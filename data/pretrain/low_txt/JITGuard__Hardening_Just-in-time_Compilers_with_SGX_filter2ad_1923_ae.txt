### Overhead Analysis

The highest overheads observed ranged from 10% to 19%. Upon investigation, we found that the usage of trampolines in the benchmarks was significantly higher than usual, with up to 316 calls per microsecond compared to an average of 83 calls per microsecond across all benchmarks.

### Trampolines and Randomization

We then measured the impact of trampolines and stack randomization used for calls from JIT-compiled code to static code. These components were tested in conjunction with the previously mentioned components (referred to as "All Trampolines & Randomization" in Figure 9). The implementation relies on these previous components for performance reasons. The average overhead in this case was 9.2%.

- **access-fannkuch** and **bitops-nsieve-bits** had the highest overhead, exceeding 19%, due to their high overheads in the previous test (18%).
- **bitops-bitwise-and** and **math-cordic** experienced the highest additional overhead, increasing from below 2% to 12.9% and 15.7%, respectively. This additional overhead is attributed to their high frequency of calls from JIT-compiled code to static code, with 579 and 594 calls per millisecond, respectively, compared to an average of 196 calls per millisecond for all benchmarks.
- The overhead is caused by the imbalance between call instructions and return instructions, which thrashes the processor’s return stack. This is necessary to implement our security guarantees.

### Full JITGuard

We also measured the impact of the full JITGuard (labeled as "Full JITGuard" in Figure 9, where error bars represent the 95% confidence interval). The average overhead for the complete scheme, including trampolines, stack randomization, and the SGX compiler, was 9.8%. This implies that the overhead due to SGX communication and mode switches is well below 1%.

- The SGX compiler was called an average of 6 times per benchmark, with a maximum of 23 calls.
- The benchmark with the highest overhead was **math-spectral-norm**, exceeding 32%. However, the absolute overhead was just 4.8 ms, which is relatively low due to the very fast run time of this benchmark (14.6 ms compared to the average of 230 ms).

### Comparison with Interpreter-Only Execution

Finally, we compared our results to another run of the benchmarks with all JIT compilers disabled (interpreter only). JIT compilation allowed the benchmarks to run more than 13 times faster on average, and up to 260 times faster for some benchmarks. This confirms that JIT-compiled code is significantly faster than the interpreter, even with our 9.8% overhead.

## Discussion

### Portability of JITGuard

Applying JITGuard to a JIT engine requires manual effort. However, this one-time effort scales due to the similarity in the high-level design of major JIT engines and their limited number. Other mitigations, such as Control-Flow Integrity (CFI), also require individual effort for each JIT engine.

### Choice of JavaScript Engines

Our attack was implemented for Edge’s JIT engine, while our defense hardens Firefox’s JIT engine. This is because both projects were started independently. However, the general ideas behind the attack and defense leverage common design features in major JIT engines.

### Effectiveness of Memory Hiding

Recent works have questioned the effectiveness of memory hiding to protect sensitive memory areas. Gawlik et al. [23] specifically considered a web browser and introduced crash-resistant programming. One countermeasure they mentioned, guard pages, can be applied to JITGuard since it has only one randomized region to protect. The enclave can terminate the program if a signal occurs near or within the JITGuard-Region, preventing exploitation by malicious code.

### Alternative Techniques

To isolate the JIT compiler, one could use randomized segments protected through segment registers or a separate process. Using randomized segments would require significant effort to prevent information leaks. SGX, however, provides a clean separation with minimal overhead. Existing browsers can be retrofitted with an SGX-based design, preserving synchronous call semantics. Using a separate process for the compiler would require substantial redesign and asynchronous communication, leading to higher overhead and latency.

### Conclusion

JITGuard is a novel defense against code-injection, code-reuse, and data-only attacks on JIT compilers. Utilizing Intel’s Software Guard Extensions (SGX), JITGuard demonstrates practicality with an average overhead of 9.8%. Further performance optimizations are ongoing, but our prototype already shows the feasibility of JITGuard.

## Acknowledgments

This work was supported in part by the German Science Foundation (project S2, CRC 1119 CROSSING), the European Union’s Seventh Framework Programme (609611, PRACTICE), and the German Federal Ministry of Education and Research within CRISP.

## References

[1] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2005. Control-flow integrity. In ACM SIGSAC Conference on Computer and Communications Security (CCS).

[2] Aleph One. 2000. Smashing the Stack for Fun and Profit. Phrack Magazine 49 (2000).

[3] Jason Ansel, Petr Marchenko, Úlfar Erlingsson, Elijah Taylor, Brad Chen, Derek L. Schuff, David Sehr, Cliff Biffle, and Bennet Yee. 2011. Language-independent sandboxing of just-in-time compilation and self-modifying code. In 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI).

[4] Michalis Athanasakis, Elias Athanasopoulos, Michalis Polychronakis, Georgios Portokalidis, and Sotiris Ioannidis. 2015. The Devil is in the Constants: Bypassing Defenses in Browser JIT Engines. In 22nd Annual Network and Distributed System Security Symposium (NDSS).

[5] Michael Backes, Thorsten Holz, Benjamin Kollenda, Philipp Koppe, Stefan Nürnberger, and Jannik Pewny. 2014. You Can Run but You Can’t Read: Preventing Disclosure Exploits in Executable Code. In ACM SIGSAC Conference on Computer and Communications Security (CCS).

[6] Dion Blazakis. 2010. Interpreter exploitation: Pointer inference and JIT spraying. In Blackhat DC (BH DC).

[7] Kjell Braden, Stephen Crane, Lucas Davi, Michael Franz, Per Larsen, Christopher Liebchen, and Ahmad-Reza Sadeghi. 2016. Leakage-Resilient Layout Randomization for Mobile Devices. In 23rd Annual Network and Distributed System Security Symposium (NDSS).

[8] Nicolas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R. Gross. 2015. Control-Flow Bending: On the Effectiveness of Control-Flow Integrity. In 24th USENIX Security Symposium (USENIX Sec).

[9] Nicholas Carlini and David Wagner. 2014. ROP is Still Dangerous: Breaking Modern Defenses. In 23rd USENIX Security Symposium (USENIX Sec).

[10] Miguel Castro, Manuel Costa, and Tim Harris. 2006. Securing Software by Enforcing Data-flow Integrity. In 7th USENIX Symposium on Operating Systems Design and Implementation (OSDI).

[11] Ping Chen, Yi Fang, Bing Mao, and Li Xie. 2011. JITDefender: A Defense against JIT Spraying Attacks. In 26th International Information Security Conference (IFIP).

[12] P. Chen, R. Wu, and B. Mao. 2013. JITSafe: a framework against Just-in-time spraying attacks. IET Information Security 7, 4 (2013).

[13] Shuo Chen, Jun Xu, Emre Can Sezer, Prachi Gauriar, and Ravishankar K Iyer. 2005. Non-Control-Data Attacks Are Realistic Threats.. In 14th USENIX Security Symposium (USENIX Sec).

[14] Mauro Conti, Stephen Crane, Lucas Davi, Michael Franz, Per Larsen, Christopher Liebchen, Marco Negro, Mohaned Qunaibit, and Ahmad-Reza Sadeghi. 2015. Losing Control: On the Effectiveness of Control-Flow Integrity under Stack Attacks. In ACM SIGSAC Conference on Computer and Communications Security (CCS).

[15] Jonathan Corbet. 2012. Yet another new approach to seccomp. https://lwn.net/Articles/475043/. (2012).

[16] Stephen Crane, Christopher Liebchen, Andrei Homescu, Lucas Davi, Per Larsen, Ahmad-Reza Sadeghi, Stefan Brunthaler, and Michael Franz. 2015. Readactor: Practical Code Randomization Resilient to Memory Disclosure. In 36th IEEE Symposium on Security and Privacy (S&P).

[17] Stephen Crane, Stijn Volckaert, Felix Schuster, Christopher Liebchen, Per Larsen, Lucas Davi, Ahmad-Reza Sadeghi, Thorsten Holz, Bjorn De Sutter, and Michael Franz. 2015. It’s a TRaP: Table Randomization and Protection against Function-Reuse Attacks. In ACM SIGSAC Conference on Computer and Communications Security (CCS).

[18] Lucas Davi, Christopher Liebchen, Ahmad-Reza Sadeghi, Kevin Z. Snow, and Fabian Monrose. 2015. Isomeron: Code Randomization Resilient to (Just-In-Time) Return-Oriented Programming. In 22nd Annual Network and Distributed System Security Symposium (NDSS).

[19] Lucas Davi, Ahmad-Reza Sadeghi, Daniel Lehmann, and Fabian Monrose. 2014. Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow Integrity Protection. In 23rd USENIX Security Symposium (USENIX Sec).

[20] Isaac Evans, Samuel Fingeret, Julian Gonzalez, Ulziibayar Otgonbaatar, Tiffany Tang, Howard Shrobe, Stelios Sidiroglou-Douskos, Martin Rinard, and Hamed Okhravi. 2015. Missing the Point(er): On the Effectiveness of Code Pointer Integrity. In 36th IEEE Symposium on Security and Privacy (S&P).

[21] Isaac Evans, Fan Long, Ulziibayar Otgonbaatar, Howeard Shrobe, Martin Rinard, Hamed Okhravi, and Stelios Sidiroglou-Douskos. 2015. Control Jujutsu: On the Weaknesses of Fine-Grained Control Flow Integrity. In ACM SIGSAC Conference on Computer and Communications Security (CCS).

[22] Roger Faulkner and Ron Gomes. 1991. The Process File System and Process Model in UNIX System V.. In USENIX Technical Conference (ATC).

[23] Robert Gawlik, Benjamin Kollenda, Philipp Koppe, Behrad Garmany, and Thorsten Holz. 2016. Enabling client-side crash-resistance to overcome diversification and information hiding. In 23rd Annual Network and Distributed System Security Symposium (NDSS).

[24] Jason Gionta, William Enck, and Peng Ning. 2015. HideM: Protecting the Contents of Userspace Memory in the Face of Disclosure Vulnerabilities. In 5th ACM Conference on Data and Application Security and Privacy (CODASPY).

[25] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and Georgios Portokalidis. 2014. Out of Control: Overcoming Control-Flow Integrity. In 35th IEEE Symposium on Security and Privacy (S&P).

[26] Enes Göktas, Elias Athanasopoulos, Michalis Polychronakis, Herbert Bos, and Georgios Portokalidis. 2014. Size Does Matter: Why Using Gadget-Chain Length to Prevent Code-Reuse Attacks is Hard. In 23rd USENIX Security Symposium (USENIX Sec).

[27] Ian Goldberg, David Wagner, Randi Thomas, and Eric A. Brewer. 1996. A Secure Environment for Untrusted Helper Applications. In 6th USENIX Security Symposium (USENIX Sec).

[28] Guang Gong. 2016. Pwn a Nexus Device With a Single Vulnerability. https://cansecwest.com/slides/2016/CSW2016_Gong_Pwn_a_Nexus_device_with_a_single_vulnerability.pdf. (2016).

[29] Andrei Homescu, Stefan Brunthaler, Per Larsen, and Michael Franz. 2013. Librando: transparent code randomization for just-in-time compilers. In ACM SIGSAC Conference on Computer and Communications Security (CCS).

[30] Hong Hu, Shweta Shinde, Adrian Sendroiu, Zheng Leong Chua, Prateek Saxena, and Zhenkai Liang. 2016. Data-Oriented Programming: On the Expressiveness of Non-Control Data Attacks. In 37th IEEE Symposium on Security and Privacy (S&P).

[31] Intel. 2016. Control-flow Enforcement Technology Preview. https://software.intel.com/sites/default/files/managed/4d/2a/control-flow-enforcement-technology-preview.pdf. (2016).

[32] Intel. 2016. Intel Software Guard Extensions (Intel SGX). https://software.intel.com/en-us/sgx. (2016).

[33] Volodymyr Kuznetsov, Laszlo Szekeres, Mathias Payer, George Candea, R. Sekar, and Dawn Song. 2014. Code-Pointer Integrity. In 11th USENIX Symposium on Operating Systems Design and Implementation (OSDI).

[34] Per Larsen, Andrei Homescu, Stefan Brunthaler, and Michael Franz. 2014. SoK: Automated Software Diversity. In 35th IEEE Symposium on Security and Privacy (S&P).

[35] Linux Foundation. 2014. This-CPU Operations. http://lxr.free-electrons.com/source/Documentation/this_cpu_ops.txt. (2014).

[36] Giorgi Maisuradze, Michael Backes, and Christian Rossow. 2016. What Cannot Be Read, Cannot Be Leveraged? Revisiting Assumptions of JIT-ROP Defenses. In 25th USENIX Security Symposium (USENIX Sec).