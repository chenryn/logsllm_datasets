### Radamsa and Fuzzer Limitations

Radamsa [40] has been successful in identifying bugs in real-world applications. However, as discussed throughout this paper, such fuzzers have inherent limitations.

### Recent Advances in Smart Fuzzing

Recently, symbolic and concolic execution-based fuzzing approaches have become prominent in the field of "smart" fuzzing [12], [38], [47], [51]. For instance, Mayhem [12], a system developed at CMU to automatically find exploitable bugs in binary code, employs several program analysis techniques, including symbolic and concolic execution, to understand application behavior for a given input. This approach is similar to VUzzer. However, VUzzer's goal differs from that of Mayhem, and it does not require heavyweight program analysis. Instead, VUzzer infers important properties of the input using heuristics based on lightweight program analysis. Similarly, Driller [47] uses hybrid concolic execution techniques [33] to solve branch constraints for deeper path explorations, thereby enhancing fuzzing.

### Alternative Fuzzing Techniques

In [28], Kargén et al. propose a different approach to generate fuzzed inputs by modifying another input producer application to inject faults that influence the output. This strategy generates mutated inputs, but it is unclear if these inputs effectively affect the way the application consumes them. TaintScope [49], a checksum-aware fuzzer, uses taint analysis to infer checksum-handling code, which helps bypass checksum checks. VUzzer can benefit from this complementary technique during fuzzing. In a recent work [8] (concurrent with our research), the authors of AFLFast proposed a Markov-model-based technique to identify low-frequency paths, focusing fuzzing efforts in that direction. VUzzer also partially uses a similar heuristic to deprioritize paths executed by the maximum number of inputs. Additionally, VUzzer's error-handling basic-block detection technique is lightweight and applies other data- and control-flow features to speed up input generation.

### Enhancing Fuzzing

Several other techniques have been developed to enhance fuzzing [11], [43], [51]. For example, seed selection [43] can help VUzzer start with a good set of seed inputs.

### Conclusions

This paper argues that the key strength of fuzzing lies in its ability to implement a lightweight, scalable bug-finding technique. Heavyweight and non-scalable techniques, such as symbolic execution-based approaches, are not the definitive solution to improve the performance of a coverage-based fuzzer. After studying several existing general-purpose (black/graybox) fuzzers, including the state-of-the-art AFL fuzzer, we observed that they tend to be application-agnostic, making them less effective in discovering deeply rooted bugs. The main limitation of application-agnostic strategies is their inability to generate interesting inputs quickly. We address this problem by making fuzzing an application-aware testing process.

We leverage control- and data-flow features of the application to infer several interesting properties of the input. Control-flow features allow us to prioritize and deprioritize certain paths, making input generation a controlled process. We achieve this by assigning weights to basic blocks and implementing a weight-aware fitness strategy for the input. By using dynamic taint analysis, we monitor several data-flow features of the application, providing us with the ability to infer structural properties of the input. For example, this provides information on which offsets in the input are used at several branch conditions and what values are used as branch constraints. We use these properties in our feedback loop to generate new inputs.

We have implemented our fuzzing technique in an open-source prototype called VUzzer and evaluated it on several applications. We also compared its performance with that of AFL, showing that in almost every test case, VUzzer was able to find bugs with significantly fewer inputs compared to AFL. This demonstrates that inferring input properties by analyzing application behavior is a viable and scalable strategy to improve fuzzing performance and a promising direction for future research in the area.

### Acknowledgements

We would like to thank the anonymous reviewers for their comments. We also thank the LAVA team for sharing the LAVA corpus privately with us before its official public release. This work was supported by the European Commission through project H2020 ICT-32-2014 SHARCS under Grant Agreement No. 644571 and by the Netherlands Organisation for Scientific Research through grants NWO 639.023.309 VICI Dowsing and NWO 628.001.006 CYBSEC OpenSesame.

### References

[1] "Peach Fuzzer," http://www.peachfuzzer.com/.

[2] 2016, http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=844634.

[3] 2016, https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=844626.

[4] 2016, https://bugs.freedesktop.org/show_bug.cgi?id=85141.

[5] 2016, https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=844719.

[6] 2016, https://gitlab.com/esr/gif2png/issues/1.

[7] W. Afzal, R. Torkar, and R. Feldt, "A systematic review of search-based testing for non-functional system properties," Information and Software Technology, vol. 51, no. 6, pp. 957–976, 2009.

[8] M. Böhm, V.-T. Pham, and A. Roychoudhury, "Coverage-based grey-box fuzzing as Markov chain," in CCS'16. New York, NY, USA: ACM, 2016, pp. 1032–1043.

[9] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R. Engler, "EXE: Automatically generating inputs of death," in CCS'06. ACM, 2006, pp. 322–335.

[10] C. Cadar and K. Sen, "Symbolic execution for software testing: Three decades later," Commun. ACM, vol. 56, no. 2, pp. 82–90, Feb. 2013.

[11] S. K. Cha, M. Woo, and D. Brumley, "Program-adaptive mutational fuzzing," in S&P'15, May 2015, pp. 725–741.

[12] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, "Unleashing mayhem on binary code," in IEEE S&P'12. Washington, DC, USA: IEEE Computer Society, 2012, pp. 380–394.

[13] S. Clark, S. Frei, M. Blaze, and J. Smith, "Familiarity breeds contempt: The honeymoon effect and the role of legacy code in zero-day vulnerabilities," in ACSAC'10. New York, NY, USA: ACM, 2010, pp. 251–260.

[14] B. Copos and P. Murthy, "InputFinder: Reverse engineering closed binaries using hardware performance counters," in PPREW'15. New York, NY, USA: ACM, 2015, pp. 2:1–2:12.

[15] DARPA CGC, "DARPA Cyber Grand Challenge Binaries," https://github.com/CyberGrandChallenge.

[16] B. Dolan-Gavitt, "Fuzzing with AFL is an art," http://moyix.blogspot.nl/2016/07/fuzzing-with-afl-is-an-art.html.

[17] B. Dolan-Gavitt, P. Hulin, E. Kirda, T. Leek, A. Mambretti, W. Robertson, F. Ulrich, and R. Whelan, "LAVA: Large-scale automated vulnerability addition," in IEEE S&P'16. IEEE Press, 2016.

[18] Elias Bachaalany, "IDAPython: Interactive disassembler," https://github.com/idapython.

[19] J. Foote, "CERT triage tools," 2013.

[20] V. Ganesh, T. Leek, and M. Rinard, "Taint-based directed whitebox fuzzing," in ICSE'09. IEEE Computer Society, 2009, pp. 474–484.

[21] P. Godefroid, "Random testing for security: Blackbox vs. whitebox fuzzing," in Int. Workshop on Random Testing. New York, NY, USA: ACM, 2007, pp. 1–1.

[22] P. Godefroid, N. Klarlund, and K. Sen, "DART: Directed automated random testing," SIGPLAN Not., vol. 40, no. 6, pp. 213–223, 2005.

[23] P. Godefroid, M. Y. Levin, and D. Molnar, "Automated whitebox fuzz testing," in NDSS'08. Internet Society, 2008.

[24] ——, "SAGE: Whitebox fuzzing for security testing," Queue, vol. 10, no. 1, pp. 20:20–20:27, Jan. 2012.

[25] C. D. Grosso, G. Antoniol, E. Merlo, and P. Galinier, "Detecting buffer overflow via automatic test input data generation," Computers & Operations Research, vol. 35, no. 10, pp. 3125–3143, 2008.

[26] I. Haller, A. Slowinska, M. Neugschwandtner, and H. Bos, "Dowsing for overflows: A guided fuzzer to find buffer boundary violations," in USENIX SEC'13. Berkeley, CA, USA: USENIX Association, 2013, pp. 49–64.

[27] Hex-Rays, "IDA: Interactive disassembler," https://www.hex-rays.com/products/ida/.

[28] U. Kargén and N. Shahmehri, "Turning programs against each other: High coverage fuzz-testing using binary-code mutation and dynamic slicing," in FSE'15. New York, NY, USA: ACM, 2015, pp. 782–792.

[29] V. P. Kemerlis, G. Portokalidis, K. Jee, and A. D. Keromytis, "LibDFT: Practical dynamic data flow tracking for commodity systems," in SIGPLAN/SIGOPS VEE '12. New York, NY, USA: ACM, 2012, pp. 121–132.

[30] H. Kobayashi, B. L. Mark, and W. Turin, Probability, Random Processes, and Statistical Analysis: Applications to Communications, Signal Processing, Queueing Theory and Mathematical Finance. Cambridge University Press, Feb. 2012.

[31] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood, "PIN: Building customized program analysis tools with dynamic instrumentation," in PLDI'05. New York, NY, USA: ACM, 2005, pp. 190–200.

[32] ——, "PIN: Building customized program analysis tools with dynamic instrumentation," in ACM Sigplan Notices, vol. 40, no. 6. ACM, 2005, pp. 190–200.

[33] R. Majumdar and K. Sen, "Hybrid concolic testing," in ICSE'07. Washington, DC, USA: IEEE Computer Society, 2007, pp. 416–426.

[34] T. Mantere and J. T. Alander, "Evolutionary software engineering, a review," Applied Soft Computing, vol. 5, no. 3, pp. 315–331, 2005, Application Reviews.

[35] B. P. Miller, L. Fredriksen, and B. So, "An empirical study of the reliability of Unix utilities," Commun. ACM, vol. 33, no. 12, pp. 32–44, 1990.

[36] C. Miller and Z. N. Peterson, "Analysis of mutation and generation-based fuzzing," [Online]. Available: https://www.defcon.org/images/defcon-15/dc15-presentations/Miller/Whitepaper/dc-15-miller-WP.pdf, 2007.

[37] D. Molnar, X. C. Li, and D. A. Wagner, "Dynamic test generation to find integer bugs in x86 binary Linux programs," in USENIX Sec'09. Berkeley, CA, USA: USENIX Association, 2009, pp. 67–82.

[38] M. Neugschwandtner, P. Milani Comparetti, I. Haller, and H. Bos, "The Borg: Nanoprobing binaries for buffer overreads," in CODASPY '15. New York, NY, USA: ACM, 2015, pp. 87–97.

[39] OpenRCE, "Sulley fuzzing framework," https://github.com/OpenRCE/sulley.

[40] OUSPG, "Radamsa fuzzer," https://github.com/aoh/radamsa.

[41] P. Piwowarski, "A nesting level complexity measure," SIGPLAN Not., vol. 17, no. 9, pp. 44–50, Sep. 1982.

[42] S. Rawat and L. Mounier, "An evolutionary computing approach for hunting buffer overflow vulnerabilities: A case of aiming in dim light," in EC2ND'10. IEEE Computer Society, 2010.

[43] A. Rebert, S. K. Cha, T. Avgerinos, J. Foote, D. Warren, G. Grieco, and D. Brumley, "Optimizing seed selection for fuzzing," in USENIX Sec'14. Berkeley, CA, USA: USENIX Association, 2014, pp. 861–875.

[44] K. Serebryany, "LibFuzzer: A library for coverage-guided fuzz testing (within LLVM)," at: http://llvm.org/docs/LibFuzzer.html.

[45] S. Sparks, S. Embleton, R. Cunningham, and C. Zou, "Automated vulnerability analysis: Leveraging control flow for evolutionary input crafting," in ACSAC'07. IEEE, 2007, pp. 477–486.

[46] M. Stamatogiannakis, P. Groth, and H. Bos, "Looking inside the black-box: Capturing data provenance using dynamic instrumentation," in IPAW'14. Springer, 2015, pp. 155–167.

[47] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta, Y. Shoshitaishvili, C. Kruegel, and G. Vigna, "Driller: Augmenting fuzzing through selective symbolic execution," in NDSS'16. Internet Society, 2016, pp. 1–16.

[48] A. Takanen, J. DeMott, and C. Miller, Fuzzing for Software Security Testing and Quality Assurance, 1st ed. Norwood, MA, USA: Artech House, Inc., 2008.

[49] T. Wang, T. Wei, G. Gu, and W. Zou, "TaintScope: A checksum-aware directed fuzzing tool for automatic software vulnerability detection," in IEEE S&P'10. IEEE Computer Society, 2010.

[50] X. Wang, L. Zhang, and P. Tanofsky, "Experience report: How is dynamic symbolic execution different from manual testing? A study on KLEE," in ISSTA'15. New York, NY, USA: ACM, 2015, pp. 199–210.

[51] M. Woo, S. K. Cha, S. Gottlieb, and D. Brumley, "Scheduling black-box mutational fuzzing," in CCS'13. New York, NY, USA: ACM, 2013, pp. 511–522.

[52] M. Zalewski, "American Fuzzy Lop," at: http://lcamtuf.coredump.cx/afl/.