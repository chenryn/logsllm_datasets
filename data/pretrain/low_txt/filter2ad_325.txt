# Design and Implementation: The Native Web Browser and Server for Content-Centric Networking

## Authors
- Guoshun Nan
- Xiuquan Qiao
- Yukai Tu
- Wei Tan
- Lei Guo
- Junliang Chen

### Affiliations
- State Key Laboratory of Networking and Switching Technology, Beijing University of Posts and Telecommunications, 100876, Beijing, China
- IBM T. J. Watson Research Center, Yorktown Heights, NY 10598, USA

### Contact Information
- PI: EMAIL
- PI: EMAIL
- PI: EMAIL
- PI: EMAIL
- PI: EMAIL
- PI: EMAIL

## Abstract
Content-Centric Networking (CCN) has emerged as a clean-slate Future Internet architecture with a communication pattern distinct from the traditional IP network. As the World Wide Web (WWW) is one of the most popular and important applications on the Internet, effectively supporting web applications is crucial for the success of CCN. However, existing web browsers and servers are primarily designed for the HTTP protocol over TCP/IP networks and cannot directly support CCN-based web applications. Current research focuses on plug-in or proxy/gateway approaches, which can significantly impact service performance due to multiple protocol conversions. To address these issues, we designed and implemented a native CCN web browser (CCNBrowser) and a CCN web server (CCNxTomcat). These implementations natively support the CCN protocol while also supporting the HTTP protocol to facilitate a smooth transition from IP networks to CCN. Experimental results show that CCNBrowser and CCNxTomcat outperform existing solutions. Additionally, a real CCN-based web application was deployed on a CCN experimental testbed, validating the applicability of our implementations.

## CCS Concepts
- Information systems → Web applications
- Networks → Network experimentation

## Keywords
- Content-Centric Networking
- Web browser
- Web server

## 1. Introduction
The World Wide Web (WWW) has become one of the most fundamental Internet applications, with web browsers and servers playing a key role in meeting the needs of a large and growing community of users. Content-Centric Networking (CCN) has emerged as a clean-slate network architecture to address the challenges faced by current IP networks. Existing web browsers and servers are designed for the Hypertext Transfer Protocol (HTTP) and IP-based Internet, making the deployment of web applications on CCN an open issue due to the lack of interconnection tools. Current research focuses on gateways for HTTP and CCN protocol conversion or plug-in methods, but these approaches are not efficient due to the additional cost of protocol conversion. The lack of native support for web applications has hindered the widespread adoption of CCN.

To address these issues, we designed and implemented a full-fledged CCN web browser (CCNBrowser) and a server (CCNxTomcat). CCNBrowser is based on the open-source WebKit, and CCNxTomcat is based on Apache Tomcat. We leveraged CCNx developed by PARC laboratory as the CCN prototype. Native CCN functions were integrated into these implementations to support interactions among users, servers, and routers in CCN. Additionally, to facilitate a smooth transition, our implementations support content requests using both 'ccnx://' and 'http://' URI schemes for HTML, CSS, and JavaScript.

## 2. Implementation
To provide a clear description, the architectures of CCNBrowser and CCNxTomcat are depicted in Figures 1 and 2, respectively, with CCN-related components highlighted in blue.

### Figure 1: CCNBrowser Architecture
- **Browser UI**
- **CCN or TCP/IP Network**
- **WebKit Embedding API**
- **WebCore**
- **JavaScript Engine**
- **Platform Interaction API**
- **Storage**
- **Graphics**
- **Audio/Video**
- **Other Components**

### Figure 2: CCNxTomcat Architecture
- **Connector**
- **CCNxTomcat Connector**
- **CCN Connector**
- **Content Processor**
- **CCND HTTP Connector**
- **CCN Parser Manager**
- **CCN Push Mode Manager**
- **Tomcat Servlet Container**
- **HTTP Processor**
- **CCN Repository**
- **CCN Processor**
- **Content Store**
- **Pending Interest Table**
- **Forwarding Interest Table**
- **CCN Parser**
- **CCN Type**
- **CCN URI Manager**
- **CCN Fetch**
- **CCN Update**
- **CCN Thread Manager**
- **CCN Input Buffer**
- **CCN Handler**
- **CCN Output Buffer**
- **CCN Content Manager**
- **Engine**
- **Host**
- **Wrapper**
- **Default Servlet**
- **Servlet**
- **CCN Queue**
- **Static File**
- **Database**
- **CCN Booter**
- **CCN Connection Handler**
- **HTTP Connection Handler**
- **CCN Service Adaptor**
- **HTTP Service Adaptor**
- **CCN Cache**

## 3. Experiment
We conducted experiments on a real testbed to compare the performance of CCNBrowser and CCNxTomcat with existing NDN.JS and HTTP/CCN proxy. The results, shown in Figure 3, indicate that CCNBrowser outperforms existing NDN.JS and HTTP/CCN gateway implementations by a factor of nineteen and five in terms of throughput. CCNxTomcat outperforms existing HTTP/CCN implementations by 58% in a single request and by a factor of three under 1000 concurrent requests. We also set up a real CCN-based personalized web site, as shown in Figure 4, to demonstrate the practical utilization of CCNBrowser and CCNxTomcat.

### Figure 3: Test Results
- **(a) CCNBrowser vs. NDN.JS and HTTP/CCN Proxy in terms of the single file test.**
- **(b) CCNxTomcat vs. HTTP/CCN Proxy in terms of the single file test.**
- **(c) CCNxTomcat vs. HTTP/CCN Proxy in terms of the throughput.**

### Figure 4: A Real CCN-Based Personalized Web Site
- **Top News**
- **Audio-Enabled**
- **HTTP-Based Web Applications**
- **CCN-Based Web Applications**
- **CCNx URI Scheme-Enabled Web App Store**
- **Wikipedia Search**
- **Hits Amount of Video Hotspots**
- **Video-Enabled**
- **Hot Videos**

## 4. Acknowledgments
This work was supported by the National Key Basic Research Program of China (973 Program) under Grant No. 2012CB315802, the National Natural Science Foundation of China under Grants No. 61171102 and No. 61132001, and the Prospective Research on Future Networks of Jiangsu Future Networks Innovation Institute under Grant No. BY2013095-4-01.

## 5. References
1. V. Jacobson, D. K. Smetters, J. D. Thornton, M. Plass, N. Briggs, and R. L. Braynard. Networking named content. CoNEXT 09. ACM, 2009.
2. X. Qiao, G. Nan, Y. Peng, L. Guo, J. Chen, Y. Sun, and J. Chen. Ndnbrowser: An extended web browser for named data networking. Journal of Network and Computer Applications, 50:134–147, 2015.
3. X. Qiao, G. Nan, W. Tan, L. Guo, J. Chen, W. Quan, and Y. Tu. Ccnxtomcat: An extended web server for content-centric networking. Computer Networks, 75:276–296, 2014.
4. W. Shang, J. Thompson, M. Cherkaoui, J. Burkey, and L. Zhang. Ndn.js: A JavaScript client library for named data networking. In Computer Communications Workshops (INFOCOM WKSHPS), 2013 IEEE Conference on. IEEE, 2013.
5. S. Wang, J. Bi, J. Wu, X. Yang, and L. Fan. On adapting HTTP protocol to content-centric networking. In Proceedings of the 7th International Conference on Future Internet Technologies. ACM, 2012.