### Protection and Security Measures

#### 1. Multi-Factor Authentication (MFA) and Code Signing
- **MFA and Code Signing**: Implementing MFA and code signing enhances security by preventing unauthorized access and ensuring the integrity of code.
- **Password Management**: Blocking weak or compromised passwords and detecting abnormal logins helps in mitigating potential security breaches.
- **Typosquatting Prevention**: Detecting typos at the registry client side and preventing the publication of typos of popular packages can combat typosquatting.

#### 2. Policy Enforcement
- **Ownership Transfer Policies**: RMs can publish policies to guard against unauthorized ownership transfers.
- **Behavior Regulation**: Policies can regulate package behaviors, such as tracking users without notification in `rsa-compat`.
- **Unwanted Packages**: RMs can rule out unwanted packages, such as `restclient`, which claims to be a typo-guard gem without proof of their own innocence.

### Review Features

#### Extended Vetting Pipeline
- **Metadata Analysis**: Identify packages with names similar to existing popular packages or related to known attacks.
- **Static Analysis**: Detect suspicious API usages and data flows.
- **Dynamic Analysis**: Identify unexpected runtime behaviors.
- **Crowdsourced Manual Reviews**: Scale the true positive verification process by involving the community in manual reviews.

#### Community Involvement
- **Open Source Community**: Engage PMs and Devs to secure the ecosystem.
- **Suspicious Package Detection**: When RMs detect a suspicious package version, they can broadcast this information to the corresponding developers or publish analysis results for "social voting."

### Remediation Features

#### Central Authority Actions
- **Malicious Package Removal**: RMs can remove malicious packages and publishers from the server and installed packages from the client by comparing against blacklists.
- **Notification Channels**: Use various channels like emails, security advisories, and client-side checks to inform stakeholders about security incidents.
- **Targeted Notifications**: Notify both Devs and PMs of affected packages and their dependents. For example, the infection of `AndroidAudioRecorder` after removal highlights the importance of notification-based remediation.

### Role-Specific Security Measures

#### Package Maintainers (PMs)
- **Account Protection**: Adopt techniques such as MFA, code signing, and strong passwords.
- **Infrastructure Security**: Protect infrastructure through firewalls, timely patches, and Intrusion Detection Systems (IDS).
- **Contributor Management**: Be cautious about new contributors and disgruntled insiders. Manually inspect small packages or employ a code review system for larger packages.
- **Ecosystem Improvement**: Report security issues to advisories, update dependencies to avoid known issues, join "social voting," and avoid security analysis hurdles.

#### Developers (Devs)
- **Best Practices**: Follow best practices to remediate security issues.
- **Private Registries**: Host private registries with known secure package versions to avoid supply chain attacks from upstream stakeholders.
- **Security Advisories**: Periodically check security advisories and update to avoid known vulnerabilities.
- **Manual Checks and Isolation**: For untrusted packages, manually check, deploy a vetting pipeline to check code, and isolate them at runtime to avoid potential hazards.
- **Community Engagement**: Join "social voting" to improve security analyses.

#### End-Users
- **Device Security**: Leverage antivirus (AV) tools to secure devices and protect themselves.
- **Security Awareness**: Raise security awareness and access only official and reputable websites.

### Measurement Limitations

#### Empirical Measurement
- **Insights and Goals**: Designed to leverage insights from existing supply chain attacks to identify new ones in the wild, focusing on revealing the severity and popularity of the problems rather than achieving high coverage and robustness in program analysis.
- **Current Limitations**: The vetting pipeline suffers from inaccuracy in static analysis and low coverage in dynamic analysis, making it easy to evade.

#### Scope of Analysis
- **Static Analysis**: Only considers files written in the corresponding language for each registry, excluding native extensions, embedded binaries, and files written in other languages.
- **Dynamic Analysis**: Limited to the Linux platform, specifically Ubuntu 16.04, and only considers runtime dependencies.

#### Inaccurate Static Analysis
- **Tools and Algorithms**: Relies on existing AST parsing and dataflow analysis tools, which can be inaccurate due to dynamic typing and programming practices like reflection and runtime code generation.
- **Future Improvements**: More accurate tools and algorithms can be developed and integrated into the pipeline when available.

#### Dynamic Code Coverage
- **Current Analyses**: Performs four types of dynamic analyses on Ubuntu 16.04 but may have limited code coverage.
- **Possible Improvements**: Diversify environments (e.g., Windows, browser), use force-execution, and symbolic execution.

#### Anti-Analysis Techniques
- **Attacker Evolution**: Attackers have adopted anti-analysis techniques, and more sophisticated techniques such as intentional vulnerable code and heavy obfuscation are expected in the future.
- **Research Call**: Solicit future researchers to combat evolving attackers.

#### Threats to Validity
- **Manual Steps**: Involves two manual steps: API labeling and initial heuristics rules based on known attacks and domain knowledge.
- **False Positives and Negatives**: Incorrect labeling can lead to false positives and negatives, which are further excluded by true positive verification.

### Related Work

#### Software Supply Chain Attacks
- **Historical Context**: The earliest software supply chain attack was the Thompson hack in 1983, followed by similar attacks targeting various components.
- **Recent Trends**: Increasing trend of supply chain attacks targeting package managers, highlighted by studies like Zimmermann et al. on the Npm ecosystem.
- **Comparison**: Our work focuses on characterizing supply chain attacks and suggesting improvements, while previous works focused on risk quantification and comparison among different registries.

#### Package Management Security
- **Previous Studies**: Focused on designing more secure package managers with properties like compromise-resilience and supply chain integrity.
- **Npm Ecosystem**: Various works have been proposed to find new vulnerabilities, isolate untrusted packages, evaluate risks, and remediate issues.

#### Security Tools
- **Extensible Pipeline**: Prototyped in an extensible way to integrate more tools for better results.
- **Static and Dynamic Analysis**: Tools for various languages and platforms can increase accuracy and coverage.
- **Threat Intelligence**: Services like VirusTotal and security blogs can provide information for indicators identified by analysis tools, automating the true positive verification process.

### Conclusion

To systematically study recent supply chain attacks in the package manager ecosystem, we propose a comparative framework that reveals relationships among stakeholders. We pinpoint root causes, summarize attack vectors, and compile well-known program analysis techniques into a large-scale analysis pipeline. Through iterative verification, we identified and reported 7 malware in PyPI, 41 in Npm, and 291 in RubyGems, with 278 (82%) removed and 3 assigned CVEs. We will open-source the analysis pipeline and provide collected malware samples for research purposes to aid future research on improving the security of package managers and defending against supply chain attacks.

### Acknowledgment

The authors thank the anonymous reviewers for their constructive comments and feedback, Professor William Enck for his guidance, and the support from ONR, NSF, and Cisco Systems. Any opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of our sponsors or collaborators.

### References

[1] J. Forcier, P. Bissex, and W. J. Chun, *Python Web Development with Django*. Addison-Wesley Professional, 2008.
[2] P. M. Mulone and M. Reingart, *web2py Application Development Cookbook*. Packt Publishing Ltd, 2012.
[3] M. Grinberg, *Flask Web Development: Developing Web Applications with Python*. O’Reilly Media, Inc., 2018.
[4] J. Foundation and other contributors, *Postmortem for Malicious Packages Published on July 12th, 2018*, Jul. 2018. [Online]. Available: https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes.
[5] J. Koljonen, *Warning! Is rest-client 1.6.13 Hijacked?*, Aug. 2019. [Online]. Available: https://github.com/rest-client/rest-client/issues/713.
[6] Bertus, *Cryptocurrency Clipboard Hijacker Discovered in PyPI Repository*, Oct. 2018. [Online]. Available: https://medium.com/@bertusk/cryptocurrency-clipboard-hijacker-discovered-in-pypi-repository-b66b8a534a8.
[7] N. P. Tschacher, *Typosquatting in Programming Language Package Managers*, Bachelor’s thesis, Universität Hamburg, Fachbereich Informatik, Jun. 2016.
[8] M. Zimmermann, C.-A. Staicu, C. Tenny, and M. Pradel, *Small World with High Risks: A Study of Security Threats in the npm Ecosystem*, in Proc. 28th USENIX Sec., Santa Clara, CA, Aug. 2019.
[9] N. Vasilakis, B. Karel, N. Roessler, N. Dautenhahn, A. DeHon, and J. M. Smith, *Breakapp: Automated, Flexible Application Compartmentalization*, Feb. 2018.
[10] C.-A. Staicu, M. Pradel, and B. Livshits, *Synode: Understanding and Automatically Preventing Injection Attacks on Node.js*, in Proc. 2018 NDSS, San Diego, CA, Feb. 2018.
[11] J. C. Davis, E. R. Williamson, and D. Lee, *A Sense of Time for JavaScript and Node.js: First-Class Timeouts as a Cure for Event Handler Poisoning*, in Proc. 27th USENIX Sec., Baltimore, MD, Aug. 2018.
[12] C.-A. Staicu and M. Pradel, *Freezing the Web: A Study of Redos Vulnerabilities in JavaScript-Based Web Servers*, in Proc. 27th USENIX Sec., Baltimore, MD, Aug. 2018.
[13] C. Cimpanu, *Hacker Backdoors Popular JavaScript Library to Steal Bitcoin Funds*, Nov. 2018. [Online]. Available: https://www.zdnet.com/article/hacker-backdoors-popular-javascript-library-to-steal-bitcoin-funds/.
[14] N. Inc., *Plot to Steal Cryptocurrency Foiled by the npm Security Team*, May 2019. [Online]. Available: https://blog.npmjs.org/post/185397814280/plot-to-steal-cryptocurrency-foiled-by-the-npm.
[15] L. Tal, *The State of Open Source Security Report*, Feb. 2019. [Online]. Available: https://snyk.io/opensourcesecurity-2019/.
[16] R. Loden, *Malware in ‘active-support‘ Gem*, Aug. 2018. [Online]. Available: https://hackerone.com/reports/392311.
[17] C. Cimpanu, *Malware Found in Arch Linux AUR Package Repository*, Jul. 2018. [Online]. Available: https://www.bleepingcomputer.com/news/security/malware-found-in-arch-linux-aur-package-repository/.
[18] N. Inc., *New PGP Machinery*, Apr. 2018. [Online]. Available: https://blog.npmjs.org/post/172999548390/new-pgp-machinery.
[19] E. W. Durbin, *Use Two-Factor Auth to Improve Your PyPI Account’s Security*, May 2019. [Online]. Available: https://blog.python.org/2019/05/use-two-factor-auth-to-improve-your.html.
[20] S. Arzt and E. Bodden, *StubDroid: Automatic Inference of Precise Data-Flow Summaries for the Android Framework*, in Proc. 38th International Conference on Software Engineering (ICSE), Austin, Texas, May 2016.
[21] M. Justicz, *Remote Code Execution on Packagist.org*, Aug. 2018. [Online]. Available: https://justi.cz/security/2018/08/28/packagist-org-rce.html.
[22] M. Justicz, *Remote Code Execution on RubyGems.org*, Oct. 2017. [Online]. Available: https://justi.cz/security/2017/10/07/rubygems-org-rce.html.
[23] N. Inc., *‘crossenv‘ Malware on the npm Registry*, Aug. 2017. [Online]. Available: https://blog.npmjs.org/post/163723642530/crossenv-malware-on-the-npm-registry.
[24] A. Almubayed, *Practical Approach to Automate the Discovery and Eradication of Open Source Software Vulnerabilities at Scale*, Blackhat USA, 2019.
[25] fate0, *Package Phishing*, Jun. 2017. [Online]. Available: http://blog.fatezero.org/2017/06/01/package-fishing/.
[26] M. Braun, *A Confusing Dependency*, Dec. 2018. [Online]. Available: https://blog.autsoft.hu/a-confusing-dependency/.
[27] A. Baldwin, *The Package Destroyer-of-Worlds Contained Malicious Code*, May 2019. [Online]. Available: https://www.npmjs.com/advisories/890.
[28] T. Costa, *Strong_password v0.0.7 RubyGem Hijacked*, Jul. 2019. [Online]. Available: https://withatwist.dev/strong-password-rubygem-hijacked.html.
[29] L. Tal, *Malicious Remote Code Execution Backdoor Discovered in the Popular Bootstrap-Sass Ruby Gem*, Apr. 2019. [Online]. Available: https://snyk.io/blog/malicious-remote-code-execution-backdoor-discovered-in-the-popular-bootstrap-sass-ruby-gem/.
[30] N. Inc., *Reported Malicious Module: Getcookies*, May 2018. [Online]. Available: https://blog.npmjs.org/post/173526807575/reported-malicious-module-getcookies.
[31] Ö. M. Akkuş, *Defcon: Webmin 1.920 Unauthenticated Remote Command Execution*, Aug. 2019. [Online]. Available: https://www.pentest.com/exploits/DEFCON-Webmin-1920-Unauthenticated-Remote-Command-Execution.html.
[32] H. Garrood, *Malicious Code in the PureScript npm Installer*, Jul. 2019. [Online]. Available: https://harry.garrood.me/blog/malicious-code-in-purescript-npm-installer/.
[33] N. Inc., *Security Advisories for npm*, Aug. 2019. [Online]. Available: https://www.npmjs.com/advisories.
[34] S.-C. Advisory, *Ten Malicious Libraries Found on PyPI - Python Package Index*, Sep. 2017. [Online]. Available: http://www.nbu.gov.sk/skcsirt-sa-20170909-pypi/.
[35] C. Cimpanu, *17 Backdoored Docker Images Removed from Docker Hub*, Jun. 2018. [Online]. Available: https://www.bleepingcomputer.com/news/security/17-backdoored-docker-images-removed-from-docker-hub/.
[36] A. Kujawa, *Why is Malwarebytes Blocking Coinhive?*, Oct. 2017. [Online]. Available: https://blog.malwarebytes.com/security-world/2017/10/why-is-malwarebytes-blocking-coinhive/.
[37] Logix, *Malware Found in the Ubuntu Snap Store*, May 2018. [Online]. Available: https://www.linuxuprising.com/2018/05/malware-found-in-ubuntu-snap-store.html.
[38] J. Wright, *Hunting Malicious npm Packages*, Aug. 2017. [Online].