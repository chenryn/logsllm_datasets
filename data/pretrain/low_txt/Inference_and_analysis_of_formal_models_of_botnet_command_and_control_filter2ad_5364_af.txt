### Future Research Directions

Hiding our traffic in the background noise is an intriguing area for future research. Additionally, our protocol state-machine inference approach relies on several assumptions outlined in Section 2.3. If any of these assumptions are violated, the approach may not be effective. The determinism and finiteness assumptions, in particular, are the most limiting.

Protocols that exhibit non-deterministic behavior, such as those triggered by date/time, pose a significant challenge for inference. As discussed in Section 2.3, one possible solution is to discretize time and encode it directly into the alphabet. Despite its limitations, we conjecture that this approach could be sufficient for inferring a majority of existing protocols. Future research will be necessary to (dis)prove this conjecture.

Infinite-state protocols can be abstracted using finite-state machines, such as the Mohri-Nederhof algorithm for abstracting context-free with regular ones [27]. However, such abstractions might not be precise enough for all potential applications. Moreover, many protocols have mildly-context-sensitive features, like buffer lengths. Grammatical inference techniques for more expressive languages are still in their early stages [14]. Inference of more expressive models is a promising research direction, not only in the context of protocol inference.

### Focus and Limitations

The primary focus of our work is the model inference technique itself. We relied on prior work [6] and manual abstraction to create the alphabet, which may be incomplete, meaning it might not contain all messages that can cause a state change in the protocol. While automatic clustering of messages in a single direction for abstraction is possible [10], it cannot guarantee the completeness of the alphabet. To our knowledge, the automatic reverse-engineering of a complete alphabet remains an open problem.

### Related Work

Our work intersects with protocol model inference and grammatical inference, contributing to the analysis of botnets (e.g., [2, 17, 18, 19, 22]). The most closely related work, to our knowledge, is the Prospex system by Comparetti et al. [10]. Prospex's automatic clustering and abstraction features are more advanced than our manual approach, and improving this aspect will be a focus of our future work. Unlike our approach, Prospex uses passive off-line inference and models protocols with Moore machines, leading to several consequences:

1. **Incomplete State-Machines**: Prospex infers incomplete state-machines, making subsequent analyses imprecise. Our approach, in contrast, infers complete state machines.
2. **Reactive Systems Handling**: Since protocols are reactive systems, there are no accepting or rejecting states. Prospex differentiates states using regular expressions, which prevents the minimization of incomplete state-machines. We avoid this issue by using Mealy machines and the L* algorithm, ensuring the inferred machine is minimal.
3. **Scalability**: Minimizing incomplete state-machines is NP-complete [30], raising questions about Prospex's scalability for large, complex protocols. Our proactive inference approach avoids this complexity, though it introduces a small probability of error (ε = 10−2) with high confidence (γ = 10−6) [3].

Earlier work by Hsu et al. [21] also uses Mealy machines but adopts off-line inference, resulting in incomplete models and NP-complete minimization. Their solution is an approximate algorithm, but even computing a model within polynomial size of the minimal one is NP-complete [34, p. 98–99]. In contrast, we developed an optimized version of L* for online protocol inference, offering polynomial computational complexity and completeness.

Our results would not have been possible without the prior research on automatic message format reverse-engineering by Cui et al. [12, 13] and Caballero et al. [7]. These techniques are crucial for both manual and automatic message abstraction into finite alphabets, and we look forward to further advancements in this area.

### Dealing with Encryption

Another important aspect of protocol model inference is handling encryption. Caballero et al. [6] proposed an automatic technique for extracting encryption routines from binaries, while Wang et al. [36] focused on reverse-engineering encrypted messages.

### Applications

Once the protocol model is known, it can be incorporated into stateful protocol analyzers like Bro [29] and GAPA [4], and firewalls like Shield [35]. These systems require protocol specifications to analyze traffic, detect intrusions, and enhance security. The technology we developed can provide such specifications.

### Contributions to Grammatical Inference

Our contributions to grammatical inference (specifically, regular language inference) extend the work of Shahbaz and Groz [33] by specializing their approach to protocol inference and optimizing the number of membership queries, which are expensive in real network settings. We introduced parallelization of L* and a cache for concentrating results of parallel probes. The output symbol prediction required more intellectual effort, inspired by the work of Gupta and McMillan [20], who used decision trees [31] to complete incomplete state-machines in hardware verification.

### Conclusions

We have proposed, to the best of our knowledge, the first technique to infer complete protocol state machines in realistic high-latency network settings and applied it to the analysis of botnet C&C protocols. While the classic L* algorithm would take 4.46 days to infer the MegaD C&C protocol model, our novel prediction technique reduced the time to just 12 hours, further optimized through parallelization.

By analyzing the complete protocol models inferred by our technique, we offer new insights into existing problems with botnet C&Cs. We hope that our new insights, gained through our protocol inference technique and novel analyses, will make future attacks on MegaD and other botnets less costly and more effective. With the new technology to fight botnets, we aim to see a decrease in spam and denial-of-service attacks, enhancing productivity and security.

### Acknowledgments

We would like to thank Greg Bronevetsky, Vern Paxson, Nishant Sinha, and the anonymous reviewers for their insightful comments to improve this manuscript.

### References

[1] 2007 malware report: The economic impact of viruses, spyware, adware, botnets, and other malicious code. Technical report, Computer Economics Inc., 2007.

[2] Moheeb Abu Rajab, Jay Zarfoss, Fabian Monrose, and Andreas Terzis. A multifaceted approach to understanding the botnet phenomenon. In IMC ’06: Proceedings of the 6th ACM SIGCOMM conference on Internet measurement, pages 41–52, New York, NY, USA, 2006. ACM.

[3] Dana Angluin. Learning regular sets from queries and counterexamples. Information and Computation, 75(2):87–106, 1987.

[4] Nikita Borisov, David Brumley, Helen J. Wang, John Dunagan, Pallavi Joshi, and Chuanxiong Guo. Generic application-level protocol analyzer and its language. In NDSS’07: Proceedings of the 2007 Network and Distributed System Security Symposium. The Internet Society, Feb 2007.

[5] Juan Caballero, Noah M. Johnson, Stephen McCamant, and Dawn Song. Binary code extraction and interface identification for security applications. In NDSS’10: Proceedings of the 17th Annual Network and Distributed System Security Symposium, Feb 2010.

[6] Juan Caballero, Pongsin Poosankam, Christian Kreibich, and Dawn Song. Dispatcher: Enabling active botnet infiltration using automatic protocol reverse-engineering. In CCS’09: Proceedings of the 16th ACM conference on Computer and communications security, pages 621–634, New York, NY, USA, 2009. ACM.

[7] Juan Caballero, Heng Yin, Zhenkai Liang, and Dawn Song. Polyglot: Automatic extraction of protocol message format using dynamic binary analysis. In CCS’07: Proceedings of the 14th ACM Conference on Computer and Communications Security, pages 317–329, New York, NY, USA, 2007. ACM.

[8] Chia Yuan Cho, Juan Caballero, Chris Grier, Vern Paxson, and Dawn Song. Insights from the inside: A view of botnet management from infiltration. In LEET’10: Proceedings of the 3rd USENIX Workshop on Large-Scale Exploits and Emergent Threats, pages 1–1, Berkeley, CA, USA, 2010. USENIX Association.

[9] Edmund M. Clarke, Orna Grumberg, and Doron A. Peled. Model checking. MIT Press, Cambridge, MA, USA, 1999.

[10] Paolo Milani Comparetti, Gilbert Wondracek, Christopher Kruegel, and Engin Kirda. Prospex: Protocol specification extraction. In SP’09: Proceedings of the 2009 30th IEEE Symposium on Security and Privacy, pages 110–125, Washington, DC, USA, 2009. IEEE Computer Society.

[11] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms. The MIT Press, 2nd edition, 2001.

[12] Weidong Cui, Jayanthkumar Kannan, and Helen J. Wang. Discoverer: Automatic protocol reverse engineering from network traces. In SS’07: Proceedings of 16th USENIX Security Symposium, pages 1–14, Berkeley, CA, USA, 2007. USENIX Association.

[13] Weidong Cui, Marcus Peinado, Karl Chen, Helen J. Wang, and Luis Irún-Briz. Tupni: Automatic reverse engineering of input formats. In CCS’08: Proceedings of the 15th ACM Conference on Computer and Communications Security, pages 391–402. ACM, Oct 2008.

[14] Colin de la Higuera. Grammatical Inference: Learning Automata and Grammars. Cambridge University Press, 2010.

[15] Roger Dingledine, Nick Mathewson, and Paul Syverson. Tor: the second-generation onion router. In SSYM’04: Proceedings of the 13th conference on USENIX Security Symposium, pages 21–21, Berkeley, CA, USA, 2004. USENIX Association.

[16] E. Mark Gold. Complexity of automaton identification from given data. Information and Control, 37(3):302–320, 1978.

[17] Julian B. Grizzard, Vikram Sharma, Chris Nunnery, Brent ByungHoon Kang, and David Dagon. Peer-to-peer botnets: overview and case study. In HotBots’07: Proceedings of the 1st Workshop on Hot Topics in Understanding Botnets, pages 1–1, Berkeley, CA, USA, 2007. USENIX Association.

[18] Guofei Gu, Roberto Perdisci, Junjie Zhang, and Wenke Lee. Botminer: Clustering analysis of network traffic for protocol- and structure-independent botnet detection. In SS’08: Proceedings of the 17th conference on Security symposium, pages 139–154, Berkeley, CA, USA, 2008. USENIX Association.

[19] Guofei Gu, Phillip Porras, Vinod Yegneswaran, Martin Fong, and Wenke Lee. Bothunter: Detecting malware infection through IDS-driven dialog correlation. In SS’07: Proceedings of 16th USENIX Security Symposium on USENIX Security Symposium, pages 1–16, Berkeley, CA, USA, 2007. USENIX Association.

[20] Anubhav Gupta, K. L. McMillan, and Zhaohui Fu. Automated assumption generation for compositional verification. Form. Methods Syst. Des., 32(3):285–301, 2008.

[21] Tating Hsu, Guoqiang Shu, and David Lee. A model-based approach to security flaw detection of network protocol implementation. In ICNP’08: Proceedings of the 15th IEEE International Conference on Network Protocols, pages 114–123, Oct 2008.

[22] Anestis Karasaridis, Brian Rexroad, and David Hoeﬂin. Wide-scale botnet detection and characterization. In HotBots’07: Proceedings of the 1st Workshop on Hot Topics in Understanding Botnets, pages 7–7, Berkeley, CA, USA, 2007. USENIX Association.

[23] J. Klensin. RFC 5321: Simple Mail Transfer Protocol, Oct 2008.

[24] Andreas Kuehlmann and Florian Krohm. Equivalence checking using cuts and heaps. In DAC’97: Proceedings of the 34th annual Design Automation Conference, pages 263–268, New York, NY, USA, 1997. ACM.

[25] Kevin J. Lang. Faster algorithms for finding minimal consistent DFAs. Technical report, NEC, 1999.

[26] George H. Mealy. A method for synthesizing sequential circuits. Bell System Technical Journal, 34(5):1045–1079, 1955.

[27] Mehryar Mohri and Mark-Jan Nederhof. Regular approximation of context-free grammars through transformation. In Robustness in Language and Speech Technology, pages 153–163. Kluwer Academic Publishers, Dordrecht, 2001.

[28] E. F. Moore. Gedanken Experiments On Sequential Machines. In Automata Studies, Annals of Mathematical Studies, volume 34, pages 129–153, Princeton, NJ, USA, 1956. Princeton University Press.

[29] Vern Paxson. Bro: a system for detecting network intruders in real-time. In SSYM’98: Proceedings of the 7th conference on USENIX Security Symposium, pages 3–3, Berkeley, CA, USA, 1998. USENIX Association.

[30] C. P. Pflueger. State reduction in incompletely specified finite-state machines. IEEE Transactions on Computers, 22(12):1099–1102, 1973.

[31] J. R. Quinlan. Induction of decision trees. Machine Learning, 1(1):81–106, 1986.

[32] R. L. Rivest and R. E. Schapire. Inference of finite automata using homing sequences. In STOC’89: Proceedings of the 21st annual ACM symposium on Theory of computing, pages 411–420, New York, NY, USA, 1989. ACM.

[33] Muzammil Shahbaz and Roland Groz. Inferring Mealy machines. In FM’09: Proceedings of the 2nd World Congress on Formal Methods, pages 207–222, Berlin, Heidelberg, 2009. Springer.

[34] B. A. Trakhtenbrot and Ya. M. Barzdin. Finite Automata, Behavior and Synthesis. North Holland, Amsterdam, 1973.

[35] Helen J. Wang, Chuanxiong Guo, Daniel R. Simon, and Alf Zugenmaier. Shield: vulnerability-driven network filters for preventing known vulnerability exploits. SIGCOMM Computer Communication Review, 34(4):193–204, 2004.

[36] Zhi Wang, Xuxian Jiang, Weidong Cui, Xinyuan Wang, and Mike Grace. ReFormat: Automatic Reverse Engineering of Encrypted Messages. In ESORICS’09: Proceedings of the 14th European Symposium on Research in Computer Security, volume 5789 of Lecture Notes in Computer Science, pages 200–215. Springer, Sep 2009.