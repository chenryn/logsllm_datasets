### Independent of the Padding Mode, RSA Encryption Does Not Provide Forward Secrecy

RSA encryption, regardless of the padding mode (e.g., PKCS #1 v1.5 or RSA-OAEP), does not provide forward secrecy. Given the clear advantages of ciphers that offer forward secrecy, we recommend against using either PKCS #1 v1.5 encryption or RSA-OAEP in TLS. This decision aligns with the one made for TLS 1.3 [33]. However, RSA-OAEP may still be a suitable alternative for other protocols. It is important to note that OAEP is not fully resilient to padding attacks, as detailed by Manger [27] and Meyer et al. [28].

### Using RSA for Signatures with Forward Secrecy

When forward secrecy is required, RSA can be used as a signature algorithm. This remains the most common setting in TLS, as alternatives like ECDSA have not yet been widely adopted. RSA signature implementations are not vulnerable to Bleichenbacher's attack from 1998, but the PKCS #1 v1.5 padding scheme has its own issues. In 2006, Bleichenbacher discovered a common implementation flaw in the parsing of these signatures [19]. A variant of this attack, known as BERserk, was independently discovered by Delignat-Lavaud and Intel, affecting the Mozilla NSS library in 2014 [35]. These attacks, though independent of the 1998 RSA encryption attack, provide strong reasons to deprecate PKCS #1 v1.5 for both encryption and signatures.

RSA-PSS, which provides resilience against such attacks, is standardized in the latest PKCS #1 v2.2 standard [29]. TLS 1.3 will use RSA-PSS for signatures [33].

### Bleichenbacher Attacks in Other Protocols

Our research focused on Bleichenbacher attacks against TLS, but these vulnerabilities are not limited to this protocol. Jager et al. [22] demonstrated Bleichenbacher vulnerabilities in XML encryption, Detering et al. [16] found vulnerabilities in JSON/JOSE, and Nestlerode discovered vulnerabilities in the Cryptographic Message Syntax (CMS) code of OpenSSL [31].

Any protocol that uses PKCS #1 v1.5 encryption and allows an attacker to see error messages is a potential target for Bleichenbacher attacks. Therefore, our recommendation to deprecate PKCS #1 v1.5 extends beyond TLS to other protocols as well.

### Vendor Responsibility

One of the most surprising findings of our research is how straightforward it was to perform a very old and well-known attack with minor modifications on current implementations. While it might be assumed that vendors test their TLS stacks for known vulnerabilities, our research shows that several vendors have not done so.

There have been several warnings about these issues. For example, Meyer et al. [28] in 2014 highlighted some vulnerable modern-day implementations. Jager et al. [23] warned about the risk of Bleichenbacher attacks for TLS 1.3, and Aviram et al. [6] used the idea of Bleichenbacher’s attack to construct the DROWN attack. Despite these publications, affected vendors did not test their products for such vulnerabilities.

### Vulnerability Detection Tools

Many existing TLS vulnerability testing tools did not include tests for Bleichenbacher vulnerabilities in the past, which is likely why such an old vulnerability remains prevalent. To our knowledge, TLS-Attacker [3] and tlsfuzzer [4] had tests for Bleichenbacher vulnerabilities before our research began. However, these tools are not optimized for usability and are likely used by a small audience. None of the existing tools we know of had tests for shortened message flow attacks.

We reached out to developers of several TLS testing tools prior to this publication. The developers of testssl.sh [5] developed a test similar to our own tool. Kario implemented additional checks in tlsfuzzer [4]. The test in tlsfuzzer is different from ours as it also checks for protocol violations that are not necessarily vulnerabilities. Tripwire IP360 added detection for vulnerable F5 devices in ASPL-753, released in coordination with F5’s public advisory. Generic detection of Bleichenbacher oracles will be released in coordination with this publication. SSLLabs added detection for Bleichenbacher oracles in their development version with a test similar to our own [7].

Before our research, TLS-Attacker had implemented a basic Bleichenbacher attack evaluation with full TLS protocol flows. We extended this evaluation to include shortened protocol flows with missing ChangeCipherSpec and Finished messages, and implemented an oracle detection based on TCP timeouts and duplicated TLS alerts. These new features are available in TLS-Attacker 2.2.

We encourage developers of other TLS or security testing tools to include tests for Bleichenbacher attacks and other old vulnerabilities. Better test tools will help detect any remaining vulnerable implementations that we have not identified during our research.

We are offering the code of our own scan tool under a CC0 (public domain) license [8], allowing developers of other tools—both free and proprietary—to use our code without restrictions.

### Summary and Conclusion

We were able to identify nine vendors and open-source projects, as well as a significant number of hosts, that were vulnerable to minor variations of Bleichenbacher’s adaptive-chosen ciphertext attack from 1998. The most notable aspect of this is how little effort it took us to do so. This suggests that there is insufficient testing of modern TLS implementations for old vulnerabilities.

The countermeasures in the TLS standard to Bleichenbacher’s attack are incredibly complex and have become more so over time. This approach has proven to be ineffective in avoiding these vulnerabilities. The designers of TLS 1.3 have already decided to deprecate the RSA encryption key exchange. However, as long as compatibility with RSA encryption cipher suites is maintained in older TLS versions, these attacks remain a problem. To ensure that Bleichenbacher attacks are finally resolved, we recommend fully deprecating RSA encryption-based key exchanges in TLS. For HTTPS, we believe this can be done today.

We hope that our research will help end the use of PKCS #1 v1.5.

### Acknowledgments

The authors thank Tibor Jager for providing a Python implementation of the Bleichenbacher attack, Adam Langley for feedback on QUIC and timing problems in Go TLS, Eric Mill from GSA for helping us identify vulnerable platforms, Nick Sullivan for sharing usage numbers of RSA key exchanges from Cloudflare, Dirk Wetter and David Cooper for implementing a ROBOT check in testssl.sh and finding bugs in our test code, Hubert Kario for finding bugs in our test code, Graham Steel, Vladislav Mladenov, Christopher Meyer, Robert Merget, Ernst-Günter Giessmann, and Tanja Lange for feedback on this paper, Ange Albertini for drawing a great logo, Garret Wasserman from CERT/CC for helping with vendor contacts, and Facebook for generous bug bounties. Juraj Somorovsky was supported through the Horizon 2020 program under project number 700542 (FutureTrust).

### References

[1] ALFARDAN, N. J., AND PATERSON, K. G. Lucky Thirteen: Breaking the TLS and DTLS Record Protocols. In 2013 IEEE Symposium on Security and Privacy (May 2013), pp. 526–540.
[2] ALLEN, C., AND DIERKS, T. The TLS Protocol Version 1.0. RFC 2246, Jan. 1999.
...
[37] VAUDENAY, S. Security Flaws Induced by CBC Padding - Applications to SSL, IPSEC, WTLS. In Advances in Cryptology - EUROCRYPT 2002, International Conference on the Theory and Applications of Cryptographic Techniques, Amsterdam, The Netherlands, April 28 - May 2, 2002, Proceedings (May 2002), vol. 2332 of Lecture Notes in Computer Science, Springer, pp. 534–546.

### A Generated Signature for Facebook

We provide a signature that signs the following text:
```
We hacked Facebook with a Bleichenbacher Oracle (JS/HB).
```
The text is PKCS #1 v1.5 encoded and signed with the certificate used on `www.facebook.com` at the time of this research. We provide example commands using `curl`, `xxd`, and `openssl` to verify this signature. The certificate is downloaded from the crt.sh search engine to ensure a stable URL. Alternatively, it could be obtained directly from Facebook’s servers via TLS, but this would stop working once the certificate expires and Facebook changes it.

This signature uses the format of OpenSSL’s `rsautl` command, which signs the raw input message and does not use the hashing that is part of PKCS #1 v1.5.

```sh
echo 799e43535a4da70980fada33d0fbf51ae60d32c1115c87ab29b716b49ab0637733f92fc985f280fa569e41e2847b09e8d028c0c2a42ce5beeb640c101d5cf486cdffc5be116a2d5ba36e52f4195498a78427982d50bb7d9d938ab905407565358b1637d46fbb60a9f4f093fe58dbd2512cca70ce842e74da078550d84e6abc83ef2d7e72ec79d7cb2014e7bd8debbd1e313188b63a2a6aec55de6f56ad49d32a1201f18082afe3b4edf02ad2a1bce2f57104f387f3b8401c5a7a8336c80525b0b83ec96589c367685205623d2dcdbe1466701dffc6e768fb8af1afdbe0a1a62654f3fd08175069b7b198c47195b630839c663321dc5ca39abfb45216db7ef837 | xxd -r -p > sig
curl https://crt.sh/?d=F709E83727385F514321D9B2A64E26B1A195751BBCAB16BE2F2F34EBB084F6A9 | openssl x509 -noout -pubkey > pubkey.key
openssl rsautl -verify -pubin -inkey pubkey.key -in sig
```

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.