### Patient Record Access and Security Labeling

The patient has specified that only (cid:21) and himself should have access to his medical records. To enforce this, the patient adds the sub-label (cid:6) (cid:2) (cid:21)(cid:6) (cid:6) to the objects P1DPatConﬁd and P1DHospConﬁd. The hospital ensures that other principals cannot read the confidential part of the record by attaching the sub-label (cid:21) (cid:2) (cid:21) to P1DHospConﬁd. Similarly, the labels for the components of (cid:8)'s patient record are set to (cid:8) (cid:2) (cid:21)(cid:6) (cid:8) and (cid:8) (cid:2) (cid:21)(cid:6) (cid:8)(cid:3) (cid:21) (cid:2) (cid:21).

Permission PP1, owned by (cid:6), grants access to (cid:21) and (cid:6) (as indicated by the label (cid:6) (cid:2) (cid:21)(cid:6) (cid:6) in Fig. 3). Permission PP2, with the label (cid:8) (cid:2) (cid:21)(cid:6) (cid:8), follows a similar pattern. The hospital owner oversees these four components. 

HospDB and Declass are not intended to print out information to anyone. Therefore, reading access is granted only to (cid:21) for maintenance purposes, with the label (cid:21) (cid:2) (cid:21). In contrast, the components (cid:2)(cid:6) and (cid:2)(cid:8) are used for outputting patient records. The label for (cid:2)(cid:6) is set to (cid:21) (cid:2) (cid:21)(cid:6) (cid:20)(cid:6), and the label for (cid:2)(cid:8) is set to (cid:21) (cid:2) (cid:21)(cid:6) (cid:20)(cid:8). The labels for data structures and channels are automatically added by a graph rewrite system. Channels are assigned the labels of the components they connect, while the data structures P1Data and P2Data carry the label (cid:21) (cid:2) (cid:21) due to the hospital's stricter security policy.

### Confidentiality Levels and Security Policies

The confidentiality security levels of the patient records are set to (cid:9). This level reflects that, while eavesdropping on patient data does not disrupt hospital operations, the leakage of such data can lead to serious privacy violations, costly compensations, and a loss of trust in the hospital. A high to moderate valuation (level (cid:9)) is considered appropriate. The same value (cid:9) is applied to the confidentiality security properties of the components and channels using graph rewrite rules.

### Declassification Rules and Permissions

The patient record of (cid:6) is constrained by (cid:21) and (cid:6). Since (cid:6) accepts (cid:20)(cid:6) as their treating doctor, both record owners agree to allow (cid:20)(cid:6) to read the record. Thus, the Add Readers property of PP1 is set to (cid:6) (cid:2) (cid:20)(cid:6)(cid:3) (cid:21) (cid:2) (cid:20)(cid:6) (see Fig. 3). Similarly, the Add Readers property of PP2 is set to (cid:8) (cid:2) (cid:20)(cid:8)(cid:3) (cid:21) (cid:2) (cid:20)(cid:8).

### Vulnerability and Threat Analysis

Next, we analyze the system model for vulnerabilities and threats. To demonstrate incorrect label settings, we replaced the correct labels of component (cid:2)(cid:8) and channel Declass-D2 with the wrong labels (cid:21) (cid:2) (cid:21)(cid:6) (cid:20)(cid:8)(cid:6) . This mistake allows any patient to access (cid:2)(cid:8). Figure 5 shows the distorted system model, augmented with vulnerability and threat objects. As expected, the objects Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:06 UTC from IEEE Xplore.  Restrictions apply.

### Risk Management and Countermeasures

The seriousness of the vulnerability and threat objects is set to the maximum value (cid:7) because no countermeasures are yet in place. For each vulnerability, a separate risk object is generated, and according to the matrix in Table 1, the risk levels of all objects are set to (cid:11). Since we only accept risks of levels (cid:6) and (cid:8), we must plan countermeasures. We apply a graph rewrite system to replace the incorrect labels of (cid:2)(cid:8) and Declass-D2 with the correct label (cid:21) (cid:2) (cid:21)(cid:6) (cid:20)(cid:8).

To reduce the information flow policies, another rewrite system suggests byte code verification and source code analysis to guard against malicious behavior of the Declass component. Byte code verification, being less expensive, is selected. In the next iteration, the two vulnerability objects IncorrectDataForwarding are generated again, but their seriousness values are now set to (cid:8). The corresponding risk levels are also set to (cid:8), which is acceptable according to our security policy. The information flow analysis is then terminated, and we perform byte code verification on the Declass component. For Java Beans-based components, this verification is facilitated by powerful tool support.

### Concluding Remarks

We have reported on the application of object-oriented modeling and graph rewriting for highly automated information flow control in component-structured software. The corresponding tool support is well-suited for real-life systems, supporting UML-based description techniques. Future work includes extending class libraries and rewrite systems, and incorporating trust management approaches. Additionally, integrity and availability aspects of component-structured software will be addressed by augmenting component contracts with specification modules in a temporal logic-based modular specification and verification technique. This will ensure that the combined interface specification fulfills the security policy and that the real component behavior complies with the contract specifications.

### References

[1] M. Abadi. Secrecy by Typing in Security Protocols. In Proc. 3rd International Conference on Theoretical Aspects of Computer Software, 1997.
...
[44] D. Volpano, G. Smith, and C. Irvine. A Sound Type System for Secure Flow Analysis. Journal of Computer Security, 4(3):167–187, 1996.

Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:06 UTC from IEEE Xplore.  Restrictions apply.