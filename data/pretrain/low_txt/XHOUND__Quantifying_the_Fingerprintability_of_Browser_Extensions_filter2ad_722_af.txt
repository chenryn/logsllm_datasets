### Every Page Load and User Association

Each page load will prevent the system from associating different page visits with the same user. Despite its apparent simplicity, this technique is likely to present its own unique set of challenges, such as preserving the functionality of a webpage when arbitrary nodes are being modified. We will investigate these challenges in future work.

### VII. Related Work

To the best of our knowledge, this paper is the first to propose a fully automated system for fingerprinting browser extensions based on their side effects on a page's Document Object Model (DOM) and to quantify the fingerprintability of popular extensions installed on the browsers of real users. In this section, we discuss related work on fingerprinting browser extensions, categorizing it into manual analysis and automated detection.

#### Manual Analysis

Mowery et al. described a method for inferring the user-customized rules of the NoScript browser extension by attempting to load multiple JavaScript scripts from various domains and observing which ones succeed and which ones fail [41]. This technique has been used by both researchers [36] and advertising companies [8–10] to detect the presence of ad-blockers.

Nikiforakis et al., in their study of commercial fingerprinting providers, manually analyzed eleven user-agent spoofing extensions and showed that inconsistencies between the claimed browser identity and JavaScript-accessible objects could be exploited to detect the presence of the evaluated browser extensions [44]. In a subsequent study, Acar et al. analyzed an anti-fingerprinting browser extension [11, 12] and demonstrated that it was, in fact, also fingerprintable [7].

#### Automated Detection

In 2012, Kotowicz presented a technique, reminiscent of timing attacks [13, 21], for detecting the browser extensions installed by Chrome users [35]. Using JavaScript, he attempted to load the manifest files of thousands of extensions by addressing them through the `chrome-extension://` URL scheme and their unique extension identifiers. By setting appropriate `onload` and `onerror` event handlers, Kotowicz could differentiate between the presence and absence of the tested browser extensions. However, this attack no longer works since Google Chrome changed its extension architecture to hide all extension resources from the public web, except for those explicitly marked as "web accessible" [24]. Golubovic [42] and Sjösten et al. [46] found that many popular extensions still use web-accessible resources, making them discoverable.

In XHOUND, we focused on the DOM-level side effects of browser extensions and did not consider web-accessible resources. While this technique can be straightforwardly incorporated into XHOUND, we argue that our discovery method is significantly more robust than those based on web-accessible resources. At any given time, developers of browser extensions can disable the use of web-accessible resources, rendering their extensions invisible to the aforementioned fingerprinting techniques. In contrast, our fingerprinting techniques are based on an extension's organic activity in a page's DOM. Removing this DOM-level activity, if at all possible, requires significant re-engineering of the entire extension's codebase. From a practical standpoint, the techniques used by XHOUND and web-accessible resources are fully orthogonal, allowing a tracker to incorporate both techniques in their tracking scripts. To quantify this complementary nature, we analyzed the manifest files of the 1,656 extensions that XHOUND was able to fingerprint and discovered that more than 40% of them do not use web-accessible resources and thus would not be detectable by them.

### VIII. Conclusion

In recent years, the web browser has evolved into an all-encompassing platform, offering features traditionally available only to installed native applications. A crucial feature of modern browsers is their ability to be extended to meet individual user requirements. In this paper, we investigated the fingerprintability of browser extensions and quantified it in terms of the fraction of popular extensions that are fingerprintable and the sets of extensions that different users install. To achieve this, we designed and implemented XHOUND, the first fully-automated, robust system that uses a combination of static and dynamic analysis to identify an extension's organic, fingerprintable activity in a webpage's DOM. By applying XHOUND to the 10,000 most popular Google Chrome browser extensions, we discovered that 9.2% to 23% of these extensions are fingerprintable and their presence could be inferred by webpages. We then surveyed 854 real users and found that most users utilize fingerprintable extensions, and a significant fraction of them use different sets of fingerprintable extensions, allowing trackers to uniquely or near-uniquely identify them. We described the process of developing an extension-fingerprinting script using XHOUND's results and showed that a tracker can fingerprint a large number of extensions in just a few seconds.

On the defensive side, we explained why extension-based fingerprinting is more intrusive than traditional fingerprinting and why, in the current architectures of browsers, eliminating the risk of extension-based fingerprinting is far from trivial. Finally, we sketched two possible countermeasures based on encapsulation and namespace pollution, aiming to either hide the presence of extensions or confuse trackers about which extensions are really installed in a user's browser. We hope that our work will be of use to browser vendors, extension developers, and end users. Browser vendors can investigate supporting extensions that make it harder for webpages to infer the presence of installed extensions, while extension developers can reconsider their designs, adopting encapsulation techniques where possible and ensuring that all DOM changes are absolutely necessary. Finally, end users can become aware of the privacy implications of installing browser extensions and consider uninstalling or disabling the ones they do not absolutely need.

### IX. Availability

Our plan is to eventually make XHOUND available to the research community, either by open-sourcing it or by making it available as a service.

### References

[1] “Bug 757726 - disallow enumeration of navigator.plugins,” https://bugzilla.mozilla.org/show_bug.cgi?id=757726.
[2] “W3C Shadow DOM,” http://www.w3.org/TR/shadow-dom/.
[3] “The Final Countdown for NPAPI,” https://blog.chromium.org/2014/11/the-final-countdown-for-npapi.html, 2014.
[4] “Use Shadow DOM for element-hiding where available,” http://old-support.getadblock.com/discussions/suggestions/423-use-shadow-dom-for-element-hiding-where-available, 2014.
[5] “NPAPI Plugins in Firefox,” https://blog.mozilla.org/futurereleases/2015/10/08/npapi-plugins-in-firefox/, 2015.
[6] G. Acar, C. Eubank, S. Englehardt, M. Juarez, A. Narayanan, and C. Diaz, “The Web Never Forgets: Persistent Tracking Mechanisms in the Wild,” in Proceedings of the 21st ACM Conference on Computer and Communications Security (CCS), 2014.
[7] G. Acar, M. Juarez, N. Nikiforakis, C. Diaz, S. Gürces, F. Piessens, and B. Preneel, “FPDetective: Dusting the Web for Fingerprinters,” in Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS), 2013.
[8] “Most effective way to detect ad blockers Completely free & easy to implement,” http://www.detectadblock.com/.
[9] “PageFair - Reclaim Your Adblocked Revenue,” https://pagefair.com/.
[10] “BlockAdblock — Stop Losing Ad Revenue,” http://blockadblock.com/.
[11] K. Boda, “Firegloves,” http://fingerprint.pet-portal.eu/?menu=6.
[12] K. Boda, A. M. Földes, G. G. Gulyás, and S. Imre, “User tracking on the web via cross-browser fingerprinting,” in Proceedings of the Nordic Conference on Information Security Technology for Applications (NordSec), 2012.
[13] A. Bortz and D. Boneh, “Exposing private information by timing web applications,” in Proceedings of the 16th International Conference on World Wide Web. ACM, 2007, pp. 621–628.
[14] Y. Cao, S. Li, and E. Wijmans, “(Cross-)Browser Fingerprinting via OS and Hardware Level Features,” in Proceedings of the Network and Distributed System Security Symposium (NDSS), 2017.
[15] J. Corpuz, “40 Best Google Chrome Extensions,” http://www.tomsguide.com/us/pictures-story/283-best-google-chrome-extensions.html, 2016.
[16] A. Das, N. Borisov, and M. Caesar, “Do you hear what I hear?: fingerprinting smart devices through embedded acoustic components,” in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2014, pp. 441–452.
[17] S. Dey, N. Roy, W. Xu, R. R. Choudhury, and S. Nelakuditi, “AccelPrint: Imperfections of accelerometers make smartphones trackable.” in NDSS, 2014.
[18] S. Dutton, “Getting Started with WebRTC,” http://www.html5rocks.com/en/tutorials/webrtc/basics/.
[19] P. Eckersley, “How Unique Is Your Browser?” in Proceedings of the 10th Privacy Enhancing Technologies Symposium (PETS), 2010, pp. 1–18.
[20] P. Eckersley, “White House Website Includes Unique Non-Cookie Tracker, Conflicts With Privacy Policy,” https://www.eff.org/deeplinks/2014/07/white-house-website-includes-unique-non-cookie-tracker-despite-privacy-policy, 2014.
[21] E. W. Felten and M. A. Schneider, “Timing attacks on web privacy,” in Proceedings of the 7th ACM Conference on Computer and Communications Security. ACM, 2000, pp. 25–32.
[22] D. Fifield and S. Egelman, “Fingerprinting web users through font metrics,” in Financial Cryptography and Data Security. Springer, 2015, pp. 107–124.
[23] J. Garcia, “Top Browser Plugins to Increase Browsing Security and Privacy,” https://www.webroot.com/blog/2016/02/03/top-browser-plugins-to-increase-browsing-security-and-privacy, 2013.
[24] Google Chrome, “Manifest - Web Accessible Resources,” https://developer.chrome.com/extensions/manifest/web_accessible_resources.
[25] Google Chrome Extension, “Imagine Easy Scholar Annotation Tool,” https://chrome.google.com/webstore/detail/imagine-easy-scholar-anno/mpioiijlnmnhfbphhafnmilihogfbijk.
[26] Google Chrome Extension, “Unlimited Free VPN - Hola,” https://chrome.google.com/webstore/detail/unlimited-free-vpn-hola/gkojfkhlekighikafcpjkiklfbnlmeio.
[27] T. Hupperich, D. Maiorca, M. Kührer, T. Holz, and G. Giacinto, “On the robustness of mobile device fingerprinting: Can mobile users escape modern web-tracking mechanisms?” in Proceedings of the 31st Annual Computer Security Applications Conference, ser. ACSAC, 2015.
[28] N. Jagpal, E. Dingle, J.-P. Gravel, P. Mavrommatis, N. Provos, M. A. Rajab, and K. Thomas, “Trends and lessons from three years fighting malicious extensions,” in 24th USENIX Security Symposium, 2015. [Online]. Available: https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/jagpal.
[29] S. Jobs, “Apple — Thoughts on Flash,” https://www.apple.com/hotnews/thoughts-on-flash/, 2010.
[30] A. Kapravelos, C. Grier, N. Chachra, C. Kruegel, G. Vigna, and V. Paxson, “Hulk: Eliciting malicious behavior in browser extensions,” in 23rd USENIX Security Symposium (USENIX Security 14). San Diego, CA: USENIX Association, Aug. 2014, pp. 641–654. [Online]. Available: https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/kapravelos.
[31] H. King, “20 ways to make your Chrome browser so much better,” http://money.cnn.com/2015/07/01/technology/best-chrome-extensions/, 2015.
[32] T. Klosowski, “Chrome for iOS Adds Support for Extensions,” http://lifehacker.com/chrome-for-ios-adds-supports-for-extensions-1637664312, 2014.
[33] K. Knibbs, “Damn, Netflix Is Cracking Down on VPNs and Proxies,” http://gizmodo.com/damn-netflix-is-cracking-down-on-vpns-and-proxies-1752956270, 2016.
[34] M. Korolov, “Java is the biggest vulnerability for US computers,” http://www.csoonline.com/article/2875535/application-security/java-is-the-biggest-vulnerability-for-us-computers.html, 2015.
[35] K. Kotowicz, “Intro to Chrome addons hacking: fingerprinting,” http://blog.kotowicz.net/2012/02/intro-to-chrome-addons-hacking.html, 2012.
[36] P. Laperdrix, W. Rudametkin, and B. Baudry, “Beauty and the Beast: Diverting modern web browsers to build unique browser fingerprints,” in 37th IEEE Symposium on Security and Privacy (S&P 2016), San Jose, United States, May 2016. [Online]. Available: https://hal.inria.fr/hal-01285470.
[37] A. Lerner, A. K. Simpson, T. Kohno, and F. Roesner, “Internet Jones and the Raiders of the Lost Trackers: An Archaeological Study of Web Tracking from 1996 to 2016,” in Proceedings of the USENIX Security Symposium, 2016.
[38] J. R. Mayer, “Any person... a pamphleteer,” Senior Thesis, Stanford University, 2009.
[39] M. McCorry, “Top 10 Free Must Have SEO Browser Plugins,” https://www.branded3.com/blog/top-10-free-must-have-seo-browser-plugins/, 2015.
[40] G. Merzdovnik, M. Huber, D. Buhov, N. Nikiforakis, S. Neuner, M. Schmiedecker, and E. Weippl, “Block Me If You Can: A Large-Scale Study of Tracker-Blocking Tools,” in Proceedings of the 2nd IEEE European Symposium on Security and Privacy (IEEE EuroS&P), 2017.
[41] K. Mowery, D. Bogenreif, S. Yilek, and H. Shacham, “Fingerprinting information in JavaScript implementations,” in Proceedings of W2SP 2011, H. Wang, Ed. IEEE Computer Society, May 2011.
[42] Nicolas Golubovic, “Attacking Browser Extensions, MS Thesis, Ruhr-University Bochum,” http://nicolas.golubovic.net/thesis/master.pdf, 2016.
[43] N. Nikiforakis, W. Joosen, and B. Livshits, “PriVaricator: Deceiving Fingerprinters with Little White Lies,” in Proceedings of the 24th International World Wide Web Conference (WWW), 2015.
[44] N. Nikiforakis, A. Kapravelos, W. Joosen, C. Kruegel, F. Piessens, and G. Vigna, “Cookieless Monster: Exploring the ecosystem of web-based device fingerprinting,” in Proceedings of the 2013 IEEE Symposium on Security and Privacy. USA: IEEE Computer Society, 2013, pp. 541–555. [Online]. Available: http://dx.doi.org/10.1109/SP.2013.43.
[45] Recorded Future, “Gone in a Flash: Top 10 Vulnerabilities Used by Exploit Kits,” https://www.recordedfuture.com/top-vulnerabilities-2015/.
[46] A. Sjösten, S. Van Acker, and A. Sabelfeld, “Discovering browser extensions via web accessible resources,” in 7th ACM Conference on Data and Applications Security and Privacy (CODASPY) 2017.
[47] K. Thomas, E. Bursztein, C. Grier, G. Ho, N. Jagpal, A. Kapravelos, D. McCoy, A. Nappa, V. Paxson, P. Pearce, et al., “Assessing deceptive advertisement modifications,” in IEEE Symposium on Security and Privacy (SP), 2015.
[48] D. Tong, “Integrating Canvas into your Web App,” http://www.html5rocks.com/en/tutorials/canvas/integrating/.
[49] C. F. Torres, H. Jonker, and S. Mauw, “FP-Block: Usable web privacy by controlling browser fingerprinting,” in ESORICS, 2015.
[50] X. Xing, W. Meng, B. Lee, U. Weinsberg, A. Sheth, R. Perdisci, and W. Lee, “Understanding malvertising through ad-injecting browser extensions,” in Proceedings of the 24th International Conference on World Wide Web, ser. WWW '15, 2015, pp. 1286–1295.
[51] Z. Zhou, W. Diao, X. Liu, and K. Zhang, “Acoustic fingerprinting revisited: Generate stable device ID stealthily with inaudible sound,” in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2014, pp. 429–440.