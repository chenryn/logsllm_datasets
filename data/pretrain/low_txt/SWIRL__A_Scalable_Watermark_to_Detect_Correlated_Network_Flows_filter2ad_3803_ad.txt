### Table 6. Detected Intervals for Varying Values of \( q \) (λ = 4.1 pps, 1000 Runs)

| \( q \) | Watermarked Mean Range | Non-watermarked Range |
|--------|-------------------------|------------------------|
| 5      | 1.71 (29.16)            | 0–7                    |
| 2.5    | 1.69 (29.44)            | 0–6                    |
| 1.6    | 1.82 (29.61)            | 0–8                    |
| 1.25   | 1.77 (29.78)            | 0–7                    |

**Figure 12. The ROC Curves for the EN and CCE Tests**

### Multi-Flow Attacks on Interval-Based Watermarking Schemes

Interval-based watermarking schemes are vulnerable to multi-flow attacks (MFA), where an attacker aggregates multiple watermarked flows to extract the watermark key. Specifically, the MFA attacker analyzes the aggregate histogram of several watermarked flows to identify common patterns, such as empty intervals, which are consistent across all flows. Previous research has shown that MFA can effectively compromise interval-based watermarking schemes [15, 19, 24].

**Resilience of SWIRL to Multi-Flow Attacks**

SWIRL's flow-dependent approach is designed to resist MFA. Since each flow has a unique watermark, the aggregated histogram should not exhibit repeated patterns. However, if the distribution of quantized values \( s \) is not uniform, an MFA attack may still be able to identify the watermark. For instance, if all watermarked flows use the same value of \( s \) for some interval, this will create a pronounced effect in the histogram.

**Parameter \( q \) and Histogram Analysis**

The parameter \( q \) helps smooth out the distribution. In Figure 13, we plot the histograms of 10 non-watermarked and 10 watermarked flows using different values of \( q \). With \( q = 5 \), the variance of the watermarked flows is similar to the non-watermarked case. However, with \( q = 1.25 \), the histogram shows a clear pattern due to the small number of quantization steps, leading to a heavily skewed distribution of \( s \).

**Offset Randomization for Enhanced Security**

In our experiments, we used the same offset for all flows. By randomizing the offset, we can disrupt the synchronization between flows: any shift of at least \( T / (mr) \) will result in completely unaligned flows. As discussed by Kiyavash et al. [10], an adversary could still examine different potential alignments, but when using the parameters from Table 3, it would be necessary to check 640k alignments to find the correct alignment of \( k \) flows. This is both computationally expensive and increases the false-positive detection rate for MFA.

**Balancing Detection Performance and MFA Resilience**

Increasing the \( q \) parameter improves resilience to MFA but also increases the false-negative rate. Table 6 shows the number of detected intervals among a sample of both watermarked and non-watermarked flows. The true detection rate decreases with increasing \( q \), while the false positives remain unaffected for a given threshold \( \eta \). This is consistent with the analysis in Section 4, where \( q \) affects the false-negative but not the false-positive calculations.

Based on these results and the observations in Figure 13, we choose \( q = 2.5 \) to balance detection performance and MFA resilience.

**Figure 13. Cumulative Histogram of 10 Flows, Non-Watermarked and Watermarked with Different Values of \( q \)**

### Active Attacks

An adversary may use more active methods to detect and remove watermarks, such as sending packets with embedded timestamps to detect extra delays or introducing extra delays at the stepping stone. In the limit, the attacker can defeat any traffic analysis scheme by generating an independent packet schedule for a relayed flow, using dummy packets and introducing large delays [3]. Previous work on stepping stone detection has considered limiting an attacker by a maximum tolerable delay [6]. However, a normal user would be less tolerant of added delays than a determined attacker. A blind watermarking scheme that introduces delays much shorter than those it tolerates remains an area for future research. SWIRL works well at detecting stepping stones and other relays over which the attacker does not have full control, as described in Section 7.

### Tor Congestion Attack

Watermarks have traditionally been seen as privacy-invasive tools because they can link relayed flows and compromise anonymity systems like Tor [5]. We show that SWIRL enables a new, privacy-enhancing use of watermarks to prevent a specific type of attack against Tor.

Evans et al. [7] demonstrated an attack on Tor that uses active probing to detect which Tor routers are used to forward a particular tunnel, thus breaking anonymity. Unlike watermarks or passive traffic analysis, their attack works even when the routers are not under the control or observation of the adversary. The basis of the attack comes from an earlier congestion attack explored by Murdoch and Danezis [11]. The new attack exploits bandwidth amplification to create sufficient congestion, making it practical on today’s Tor network.

**Bandwidth Amplification and Path Construction**

The bandwidth amplification exploits the fact that paths in Tor can be constructed to have arbitrary lengths. Each hop on a path knows only the previous and next hops, making it easy to construct a path that loops through a set of routers many times. This ensures that a single packet sent by a user results in \( k \) packet transmissions at each router in the loop, for near-arbitrary values of \( k \).

**Potential Defense and SWIRL Solution**

A potential defense described by Evans et al. is to modify the Tor protocol to restrict the number of circuit extensions and the maximum path length. However, this is not sufficient to prevent congestion attacks, as loops can still be created by going outside the Tor network and then returning. We propose using SWIRL as a solution. The basic strategy is to configure Tor exit nodes to insert a SWIRL watermark on all outgoing TCP traffic. Entry guards then try to detect the SWIRL watermark on incoming TCP connections and reject the stream if the watermark is found. This restricts the congestion attack to internal paths only, which can be managed using the solution described above.

**Tolerating False Positives**

This application can tolerate a significant rate of false positives (e.g., 10\(^{-3}\) or higher). A false positive will cause a legitimate user to retry a connection, which is unlikely to significantly affect usability given the current reliability of the Tor network. This allows SWIRL parameters to be tuned to mark shorter flows. Additionally, full invisibility is not required, as open proxies are unlikely to be adversarial. Thus, the \( q \) parameter can be reduced to decrease false-negative errors.

**Simulation Results**

To study this attack, we simulated SWIRL being applied to Tor traffic flows. We used a set of flow timings observed by a Tor middle node [4] in our tests. We used a total of 14 flows long enough for our watermark. The results are shown in Table 7, with rates of the flows naturally separating into two classes. Our tests are most representative for a direct connection from an exit to an entry node; any proxies or other relays may introduce extra delays that affect parameter choices. Prior to implementation, a survey of proxy mechanisms available for congestion attacks and appropriate parameter tuning is necessary.

**Table 7. Watermark Detection Results for Tor Flows**

| Flow Rate (pps) | True Intervals Mean | True Intervals Range | False Intervals Range |
|-----------------|---------------------|----------------------|-----------------------|
| 3.25–3.57       | 27.51               | 5.89                 | 2–11                  |
| 11.58–14.33     | 28.76               | 6.88                 | 3–14                  |

### Conclusion

We proposed SWIRL, a novel flow-dependent watermarking scheme for network flows. SWIRL uses an interval-based structure to provide robustness to network perturbations and evade multi-flow attacks by making the watermark dependent on the containing flow. SWIRL performs blind watermarking, reducing communication and computation overhead compared to passive traffic analysis or non-blind watermarking schemes. Our analysis, simulation, and experiments show that SWIRL can link related flows using flow lengths as short as 2 minutes, with error rates on the order of 10\(^{-6}\) or less. SWIRL introduces short delays on average and is undetectable using existing covert channel detection tools. Finally, we show that SWIRL can address a congestion attack on the Tor network.

### Acknowledgments

We thank anonymous reviewers for their comments on earlier drafts of this paper. We are also grateful to Nabil Schear for his help in processing the CAIDA data set and to Steven Murdoch for providing traffic data from the Tor network. This research was supported in part by National Science Foundation grant CNS 08–31488 and by the Boeing Trusted Software Center at the Information Trust Institute, University of Illinois.

### References

[1] A. Back, U. M¨oller, and A. Stiglic. Traffic analysis attacks and trade-offs in anonymity providing systems. In I. S. Moskowitz, editor, Information Hiding, volume 2137 of Lecture Notes in Computer Science, pages 245–247. Springer, Apr. 2001.

[2] A. Bavier, M. Bowman, B. Chun, D. Culler, S. Karlin, S. Muir, L. Peterson, T. Roscoe, T. Spalink, and M. Wawrzoniak. Operating systems support for planetary-scale network services. In R. Morris and S. Savage, editors, Symposium on Networked Systems Design and Implementation, pages 253–266. USENIX, Mar. 2004.

[3] A. Blum, D. X. Song, and S. Venkataraman. Detection of interactive stepping stones: Algorithms and confidence bounds. In E. Jonsson, A. Valdes, and M. Almgren, editors, International Symposium on Recent Advances in Intrusion Detection, volume 3224 of Lecture Notes in Computer Science, pages 258–277. Springer, Sept. 2004.

[4] G. Danezis. The traffic analysis of continuous-time mixes. In D. Martin and A. Serjantov, editors, Workshop on Privacy Enhancing Technologies, volume 3424 of Lecture Notes in Computer Science, pages 35–50. Springer, May 2004.

[5] R. Dingledine, N. Mathewson, and P. F. Syverson. Tor: The second-generation onion router. In M. Blaze, editor, USENIX Security Symposium, pages 303–320, Aug. 2004.

[6] D. Donoho, A. Flesia, U. Shankar, V. Paxson, J. Coit, and S. Staniford. Multiscale stepping-stone detection: Detecting pairs of jittered interactive streams by exploiting maximum tolerable delay. In A. Wespi, G. Vigna, and L. Deri, editors, International Symposium on Recent Advances in Intrusion Detection, volume 2516 of Lecture Notes in Computer Science, pages 17–35. Springer, Oct. 2002.

[7] N. Evans, R. Dingledine, and C. Grothoff. A practical congestion attack on Tor using long paths. In F. Monrose, editor, USENIX Security Symposium, pages 33–50. USENIX, Aug. 2009.

[8] S. Gianvecchio and H. Wang. Detecting covert timing channels: An entropy-based approach. In P. Ning, S. D. C. di Vimercati, and P. F. Syverson, editors, ACM Conference on Computer and Communications Security, pages 307–316. ACM, Oct. 2007.

[9] A. Houmansadr, N. Kiyavash, and N. Borisov. RAINBOW: A robust and invisible non-blind watermark for network flows. In G. Vigna, editor, Network and Distributed System Security Symposium. Internet Society, Feb. 2009.

[10] N. Kiyavash, A. Houmansadr, and N. Borisov. Multi-flow attacks against network flow watermarking schemes. In P. van Oorschot, editor, USENIX Security Symposium. USENIX, July 2008.

[11] S. Murdoch and G. Danezis. Low-cost traffic analysis of Tor. In V. Paxson and M. Waidner, editors, IEEE Symposium on Security and Privacy. IEEE Computer Society, May 2005.

[12] S. Murdoch and R. Watson. Metrics for security and performance in low-latency anonymity systems. In N. Borisov and I. Goldberg, editors, Privacy Enhancing Technologies Symposium, volume 5134 of Lecture Notes in Computer Science, pages 115–132. Springer, July 2008.

[13] P. Peng, P. Ning, and D. S. Reeves. On the secrecy of timing-based active watermarking trace-back techniques. In V. Paxson and B. Pfitzmann, editors, IEEE Symposium on Security and Privacy, pages 334–349. IEEE Computer Society Press, May 2006.

[14] B. Pfitzmann and P. McDaniel, editors. IEEE Symposium on Security and Privacy. IEEE Computer Society, May 2007.

[15] Y. Pyun, Y. Park, X. Wang, D. S. Reeves, and P. Ning. Tracing traffic through intermediate hosts that repacketize flows. In G. Kesidis, E. Modiano, and R. Srikant, editors, IEEE Conference on Computer Communications (INFOCOM), pages 634–642. IEEE Communications Society, May 2007.

[16] J.-F. Raymond. Traffic analysis: Protocols, attacks, design issues, and open problems. In H. Federrath, editor, International Workshop on Designing Privacy Enhancing Technologies, volume 2009 of Lecture Notes on Computer Science, pages 10–29. Springer, July 2000.

[17] S. Staniford-Chen and L. T. Heberlein. Holding intruders accountable on the Internet. In C. Meadows and J. McHugh, editors, IEEE Symposium on Security and Privacy, pages 39–49. IEEE Computer Society Press, May 1995.

[18] C. Walsworth, E. Aben, kc claffy, and D. Andersen. The CAIDA anonymized Internet traces—January. http://www.caida.org/data/passive/passive_2009_dataset.xml, Mar. 2009.

[19] X. Wang, S. Chen, and S. Jajodia. Network flow watermarking attack on low-latency anonymous communication systems. In Pfitzmann and McDaniel [14], pages 116–130.

[20] X. Wang, D. Reeves, and S. F. Wu. Inter-packet delay based correlation for tracing encrypted connections through stepping stones. In D. Gollmann, G. Karjoth, and M. Waidner, editors, European Symposium on Research in Computer Security, volume 2502 of Lecture Notes in Computer Science, pages 244–263. Springer, Oct. 2002.

[21] X. Wang and D. S. Reeves. Robust correlation of encrypted attack traffic through stepping stones by manipulation of interpacket delays. In V. Atluri, editor, ACM Conference on Computer and Communications Security, pages 20–29. ACM, 2003.

[22] R. Wendolsky, D. Herrmann, and H. Federrath. Performance comparison of low-latency anonymisation services from a user perspective. In N. Borisov and P. Golle, editors, Privacy Enhancing Technologies Symposium, volume 4776 of Lecture Notes in Computer Science, pages 233–253. Springer, June 2007.

[23] K. Yoda and H. Etoh. Finding a connection chain for tracing intruders. In F. Cuppens, Y. Deswarte, D. Gollmann, and M. Waidner, editors, European Symposium on Research in Computer Security, volume 1895 of Lecture Notes in Computer Science, pages 191–205. Springer, Oct. 2000.

[24] W. Yu, X. Fu, S. Graham, D. Xuan, and W. Zhao. DSSS-based flow marking technique for invisible traceback. In Pfitzmann and McDaniel [14], pages 18–32.

[25] Y. Zhang and V. Paxson. Detecting stepping stones. In S. Bellovin and G. Rose, editors, USENIX Security Symposium, pages 171–184. USENIX, Aug. 2000.