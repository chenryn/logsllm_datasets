### Strength Moderation

To defeat the moderation scheme, an attacker would need to either crack a moderator’s key or forge an MD5-hashed signature, both of which are currently computationally infeasible. Administrative functions also require the same level of authentication.

### Message Handling and Moderation

Messages that require moderation appear as bounces to most mail user agents (MUAs). MUAs that support features like "retry bounce," such as Kyle Jones's VM for XEmacs and GNU Emacs, work best. These MUAs can read submissions from the moderation queue, bring them into a composition buffer, PGP sign them, and then send them on their way.

When Shibboleth verifies that a message has a valid PGP signature belonging to a moderator, it will forward the message. Only the part of the message that was signed is passed; any content outside the delimiters for the signed message, including the PGP signature itself, is excluded.

### PGP and MIME Compatibility

We use a version of PGP that is not MIME-aware, so it does not interfere with any MIME elements in the original message. The Content-type header remains unchanged, and the signature encompasses the entire message body, including all attachment data. This ensures that any changes to the attachments in transit, such as the addition of a virus-infected file, will cause the signature to fail, prompting the administrator to review the message.

For safety, Shibboleth adds an X-Loop header to prevent mail loops. If this header and token are present in an incoming message, Shibboleth will not deliver the message and will log the detection of a mail loop.

### Load Sharing

Shibboleth allows outbound mail to be directed to another host, enabling load sharing. One machine can handle all incoming messages and processing, while another can be used to send all outbound messages. Future enhancements will include more granular load-sharing features.

### Outgoing Messages

To prevent the leakage of header data, Shibboleth creates a new message rather than simply forwarding the original. It preserves specific headers, such as Subject, using Perl patterns. Outgoing messages have their own Message-ID headers, ensuring that the poster’s MTA domain name is not included. Headers like In-Reply-To and References, which are used for building threads, can be safely passed as they contain only Message-IDs generated by Shibboleth.

Personal touches, such as X-Face and X-Attribution, are also allowed, and MIME headers like MIME-Version and Content-type are passed. This is all configurable by the list family administrator.

### Administration

Initial administration of a Shibboleth installation can be intensive as the system learns different addresses and mail relays. Over time, regular posters' profiles are set, and the system requires less administrative attention except in cases of real errors or major configuration changes.

Administrative tasks include training the system to recognize legitimate mail relays. Using Perl patterns, one can specify hosts without listing every possible relay. For example, to allow any host with an alphanumeric name in the zone `example.com`, the pattern `\w+\.example\.com` can be used.

### Future Work

#### Other Secure Mail Standards
Support for OpenPGP, which supports newer ciphers and hashing algorithms, and S/MIME would be beneficial. This would allow signing all outgoing messages without issues for MIME-formatted messages.

#### Better Peer Support
In installations where many users digitally sign their submissions, CPU overhead can be significant. A more intelligent load-sharing mechanism among multiple hosts would be ideal.

#### Improved Moderation Scheme
Currently, there is a race condition with multiple moderators, leading to potential duplicate posts. A more intelligent system would allow a moderator to claim a set number of messages from the moderation queue, preventing duplication.

#### Tolerance of SMTP Irregularities
A runtime parameter could specify the number of irregularities tolerated per message, and Shibboleth could automatically add previously unknown relays to a user’s profile if they are below a certain threshold.

#### Local User Dilemma
Local users with normal user accounts can inject messages that bypass SMTP header verification. Improving the intelligence of SMTP header parsing to identify the host that injected the message and those that merely relayed it would help mitigate this issue.

#### Reducing Necessary Trust in Administrators
Future versions of Shibboleth could distrust administrators and hide sensitive information, requiring multiple signatures for certain operations. Hosts could be used for introducing new insiders, after which users would maintain their own profiles.

### Conclusions

Shibboleth demonstrates that a group can maintain privacy and security on the Internet, even with imperfect mechanisms like SMTP headers. It ensures that only insiders can post, and once someone is no longer an insider, their addresses become useless. Our experience shows that these safeguards are effective, and while not a substitute for infrastructure-level security, they move us closer to a well-behaved system.

### Acknowledgments

Thanks to Eugene Sandulenko for the initial implementation, Ed Sheppard for suggesting the name, and Carolyne J. Butler for careful proofreading.

### References

[1] Usenet software: History and sources. Usenet FAQ, February 1998. [online] http://www.faqs.org/faqs/usenet/software/part1/

[2] D. Atkins, W. Stallings, and P. Zimmermann. PGP Message Exchange Formats. RFC 1991, August 1996.

[3] T. Berners-Lee, R. Fielding, and H. Frystyk. Hypertext Transfer Protocol – HTTP/1.0. RFC 1945, May 1996.

[4] J. Callas, L. Donnerhacke, H. Finney, and R. Thayer. OpenPGP Message Format. RFC 2440, November 1998.

[5] D. Brent Chapman. Majordomo: How I manage 17 mailing lists without answering “-request” mail. In Systems Administration (LISA VI) Conference, pages 135–143, Long Beach, CA, October 19-23 1992. USENIX.

[6] D. Crocker. Standard for the format of ARPA Internet text messages. RFC 822, August 1982.

[7] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee. Hypertext Transfer Protocol – HTTP/1.1. RFC 2616, June 1999.

[8] N. Freed and N. Borenstein. Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies. RFC 2045, November 1996.

[9] N. Haller and R. Atkinson. On internet authentication. RFC 1704, October 1994.

[10] S. Hambridge and A. Lunde. DON’T SPEW A Set of Guidelines for Mass Unsolicited Mailings and Postings (spam*). RFC 2635, June 1999.

[11] Peter J. Kappesser. Advanced newsreader part 2: trn. Usenet FAQ, August 1998. [online] http://www.faqs.org/faqs/usenet/software/trn-faq/part2/

[12] S. Kent and R. Atkinson. Security Architecture for the Internet Protocol. RFC 2401, November 1998.

[13] Eli Pogonatus. Email addressing FAQ (how to use user+box@host addresses). Usenet FAQ, December 1998. [online] http://www.faqs.org/faqs/mail/addressing/

[14] J. Postel. Simple Mail Transfer Protocol. RFC 821, August 1982.

[15] J. Postel and J.K. Reynolds. File Transfer Protocol. RFC 959, October 1985.

[16] Jon Postel. On the Junk Mail Problem. RFC 706, November 1975.

[17] B. Ramsdell (Ed.). S/MIME Version 3 Message Specification. RFC 2633, June 1999.

[18] Justin Sheehy. Gnus (emacs newsreader) FAQ. Usenet FAQ, January 2000. [online] http://www.faqs.org/faqs/gnus-faq/

[19] Bob Thomas. On the Problem of Signature Authentication for Network Mail. RFC 644, July 1974.

[20] John Viega, Barry Warsaw, and Ken Manheimer. Mailman: The GNU mailing list manager. In Twelfth Systems Administration Conference (LISA ’98), page 309, Boston, Massachusetts, December 6-11 1998. USENIX.

[21] F. Wancho. Message Digest Format. RFC 1153, April 1990.