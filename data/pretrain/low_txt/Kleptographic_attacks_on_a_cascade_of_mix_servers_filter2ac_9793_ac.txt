### Cascade Behavior for Small N
Assume that the number \( G_k \) is represented in a base-\( b \) system. Let \( (g_{k0}^{\alpha})_{\alpha=1} \) be a sequence with exponents generated from (8). The number \( N_b \approx N \cdot b \cdot \ln c \) is determined by the probability that, in a sequence of \( b \cdot \ln c \) random numbers, there will be no element giving a fixed value modulo \( b \). Simple calculations show that this probability is less than \( \frac{1}{c} \).

### Encoding and Sorting
To encode \( G_k \), server \( i \) sorts the elements \( g_{k0}^{\alpha} \). As a result, the next mix-server can take the sequence of onions (5) and sort them according to the first coordinate, thereby reading \( G_k \).

For pairs of onions (1), the first components in each pair can be produced by two consecutive exponents from (8). Some of these elements are chosen such that the \( j \)-th value \( g_{k0}^{\alpha} \) on the list of chosen elements has the property that \( g_{k0}^{\alpha} \mod b \) is equal to the \( j \)-th digit of \( G_k \) in base-\( b \). A piece of \( G_k \) will then be transmitted by the product of these components. The product can be adjusted by incrementing the first exponent.

### Taking Advantage of Permutations
First, we refer to the PaV cascade. Without loss of generality, we assume in this subsection that the batch consists of single onions (5). If the techniques described above are applied, server \( i + 1 \) can decode each \( S_{i,j} \) from its ciphertext (5). Indeed, server \( i + 1 \) knows the exponents used in (5). This provides new perspectives for an attack.

The technique below is based on encoding a message of choice in the ordering of the parts \( S_{i,j} \). Let \( \mu \) denote the permutation-message to be sent. The message space is \( N! \) (a detailed method of coding numbers into permutations and vice versa can be found in [15]). After opening all input onions \( O_{i-1,j} \), the \( i \)-th server performs operation (4) for consecutive \( S_{i-1,j} \) and random \( s_{i,j} \), obtaining a sequence \( (S_{i,j})_N^{j=1} \). The server then reorders the elements lexicographically: \( (S_{i,\sigma(j)})_N^{j=1} \). The message \( \mu \) will be transferred by arranging the order of the content of onions, which server \( i + 1 \) will consecutively find exponents from generator (8). Hence, the consecutively opened onions by server \( i + 1 \) will give a sequence \( (S_{i,\mu(\sigma(j))})_N^{j=1} \). By comparing this sequence with the lexicographically ordered \( (S_{i,\sigma(j)})_N^{j=1} \), the server will read the message.

To accomplish this task, server \( i \) applies the assignment (9) of \( k_{i,j}^0 \) for exponents \( K_{i-1,(\mu \circ \sigma)(j)} \), for \( j = 1, 2, \ldots, N \), instead of for exponents \( K_{i-1,j} \). Note that the transferred permutation \( \mu \) is independent of the permutation of the output onions. In fact, the output batch should be ordered lexicographically; otherwise, the output permutation treated as a permutation of the lexicographic order may become a source of the next leakage.

### General Purpose Cascade
Suppose now that in the general-purpose cascade, the output batch is ordered lexicographically, but a kleptographic channel relying on the freedom of choice of \( k_{i,j} \) still exists. Let permutation \( \mu \) be applied to the input batch, and \( k_{i,j} \) from (8), for \( j = 1, 2, \ldots, N \), to consecutive results of that permutation (similarly to the PaV cascade). However, Mallet encounters a slightly more difficult task than the \( (i + 1) \)-th server in the PaV protocol, because for \( k_{i,1} \) he must try all \( N \) input onions of server \( i \) (i.e., he must perform \( N \) multiplications by \( g^{k_{i,1}} \), and then some incrementations of all exponents in modified first coordinates until he finds the input onion for that exponent), for \( k_{i,2} \) he must try \( N - 1 \) input onions, and so on (total \( N \cdot (N - 1)/2 \)). Nevertheless, if a kleptographic channel exists, it is quite easy to mount another one.

### Skipping Elements
Another technique is to take advantage of the fact that the choice of \( N \) exponents for the Coupon Collector's Problem does not have to be unique. Specifically, let the \( i \)-th server choose not the first appropriate \( k_{i,j} \) satisfying condition (7), but skip some number of such numbers. How many are skipped is information available to the next server and can therefore be the next "digit" of a secret transmitted.

### Unknown Neighbors
The attacks on the PaV protocol, discussed above, are based on the assumption that each mix server in the cascade knows its neighbors, i.e., their public keys. This assumption is fulfilled when the cascade is deployed by the manufacturer or when the whole cascade is installed and supervised by some dishonest entity.

Another inevitable weakness of the above attacks on PaV is that after retrieving the private key from server \( i-1 \), we can reconstruct all exponents from its input batch, providing evidence that all previous servers are contaminated. However, without access to further servers, their input batches are well-protected, and we cannot be sure whether they are contaminated as well.

These remarks do not apply to a general-purpose cascade, where each server has the public key of the manufacturer.

### Overcoming Weaknesses
To overcome the first weakness, suppose the manufacturer Mallet cannot predict the sequence into which the servers will be arranged or even predict which servers from a set will be taken to build a cascade. Thus, we have an ad-hoc network where messages (batches) go in one direction only. According to the assumption that batches are published after mixing, each sender receives no feedback during the mixing process about whether the message was correctly decoded.

We adapt the solution from [14] designed for ad-hoc networks. Each server is equipped by the manufacturer with a master key \( Z \). Instead of \( z_{i,k} \) for (8), the sender takes \( Z := Z(\alpha) \), where \( Z(\alpha) \) stands for key \( Z \) with a flipped bit at position \( \alpha \). For each consecutive batch, the bit position \( \alpha \) is freshly chosen by the sender. After producing all \( k_{i,j}^0 \) for \( j = 1, \ldots, N \), the sender changes \( Z \) again:
\[ Z := F(Z) \]
for \( F \) being a fixed, collision-resistant hash function. Thus, the sender destroys the value of \( Z \) used in (8). The receiver, having the previous \( Z \), tries all possible \( \alpha \), and for one of them, the right \( k_{i,1}^0 \) is obtained, and then the other exponents \( k_{i,j}^0 \). Having the right \( \alpha \), the receiver also changes \( Z \) according to the same rule.

Each server would get a pair of evolving keys \( Z \), one key for input batches (as a receiver) and the other for output batches (as a sender). Mallet would be a receiver for the last server. Keys \( Z \) between different servers would evolve differently, and if one server is opened after sending the first batch, keys in other pairs would not be compromised.

To propagate the changes faster, each batch might be divided into parts, and for each part, the next step in the evolution of \( Z \) would be performed. If the order of servers is changed for each new batch, only the first one might be correctly encoded for Mallet. Changing the order during mixing is not a subroutine in known versions of PaV and seems troublesome, as fewer than \( \lambda \) batches could be present in the cascade simultaneously.

### Conclusions
We have presented kleptographic attacks on versions of the Prêt à Voter scheme. Most of these attacks can be generalized to other cascades of probabilistic mix-servers. The depicted techniques lead to important conclusions regarding the design of distributed systems: to minimize the possibility of a kleptographic attack, diversification of software sources is needed. Different manufacturers should provide appropriate software for different servers. Although this redundancy increases costs and is less convenient for system installation and administration, it radically decreases the possibility of (kleptographic) fraud.

Another general countermeasure against kleptography is to use deterministic procedures that are both verifiable and provide unpredictable results for an external observer (cf. [2, Sect. V]). Such features are delivered, for instance, by using deterministic signature schemes such as RSA.

In the Prêt à Voter scheme, the exponents \( k_{i,j} \) used by the \( i \)-th mix server for re-encryption might be determined as:
\[ k_{i,j} = R \left( H \left( \text{sig}_{\alpha_i} (h(O_{i-1,j})) \right) \right) \]
for \( \text{sig} \) being a deterministic signature scheme and \( \alpha_i \) being the private signing key of the \( i \)-th mix server. Moreover, the input and output batch should be sorted. Then, in the RPC phase, half of the \( h(O_{i-1,j}) \) would be revealed by mix \( i \), their signatures \( \text{sig}_{\alpha_i} (h(O_{i-1,j})) \) would be verified, as well as the correctness of the exponents \( k_{i,j} \). As mentioned in the Introduction, the above solution is more flexible than the one from [5]. In [5], challenges for a mix server are taken from its output batch, hence are known in advance to the mix server before it publishes commitments \( W(k) \). Consequently, the server might cheat and calculate the commitments in an advantageous way.

### References
[1] M. R. Best. Perfect codes hardly exist. IEEE Trans. Inform. Theory, 29(3):349–351, 1983.
[2] P. Borzecki, J. Kabarowski, P. Kubiak, M. Kutyłowski, and F. Zagórski. Kleptographic weaknesses in Benaloh-Tuinstra protocol. In: Proceedings of the International Conference on Systems and Networks Communications, pages 26–31. IEEE Comp. Soc., Nov. 2006.
[3] Certicom Inc. The Certicom ECC challenge. [online]. Available from: http://www.certicom.com/index.php?action=ecc,ecc_challenge.
[4] D. Chaum. Secret-ballot receipts: True voter-verifiable elections. IEEE Security and Privacy Magazine, 2(1):38–47, Jan./Feb. 2004.
[5] J. Y. Choi, P. Golle, and M. Jakobsson. Auditable privacy: On tamper-evident mix networks. In: Financial Cryptography, LNCS 4107, pages 126–141. Springer, 2006.
[6] W. Diffie and M. E. Hellman. New directions in cryptography. IEEE Trans. Inform. Theory, 22(6):644–654, Nov. 1976.
[7] W. M. Duckworth II. Codes, Designs, and Distance. PhD thesis, University of North Carolina at Chapel Hill, 1998.
[8] I. Dumer, D. Micciancio, and M. Sudan. Hardness of approximating the minimum distance of a linear code. Electronic Colloquium on Computational Complexity (ECCC), 6(29), 1999.
[9] M. Gogolewski, M. Klonowski, P. Kubiak, M. Kutyłowski, A. Lauks, and F. Zagórski. Kleptographic attacks on e-voting schemes. In: ETRICS, LNCS 3995, pages 494–508. Springer, 2006.
[10] P. Golle and M. Jakobsson. Reusable anonymous return channels. In: WPES, pages 94–100. ACM, 2003.
[11] S. Har-Peled. Class notes for randomized algorithms, Dec. 2005.
[12] M. Jakobsson and A. Juels. Mix and match: Secure function evaluation via ciphertexts. In: ASIACRYPT, LNCS 1976, pages 162–177. Springer, 2000.
[13] M. Jakobsson, A. Juels, and R. L. Rivest. Making mix nets robust for electronic voting by randomized partial checking. In: USENIX Security Symposium, pages 339–353. USENIX, 2002.
[14] M. Klonowski, M. Kutyłowski, M. Ren, and K. Rybarczyk. Forward-secure key evolution protocol in wireless sensor networks. Nov. 2006. Manuscript.
[15] D. E. Knuth. The Art of Computer Programming: Seminumerical Algorithms, volume 2. Addison-Wesley, Reading, Massachusetts, 3rd edition, Nov. 1998.
[16] D. Lundin, H. Treharne, P. Y. Ryan, S. Schneider, and J. Heather. Distributed creation of the ballot form in Prêt à Voter using an element of visual encryption. IAVoSS Workshop On Trustworthy Elections (WOTE 2006).
[17] S. McKinley. The Hamming codes and Delsarte’s linear programming bound. Master’s thesis, Portland State University, May 2003.
[18] A. J. Menezes, P. C. van Oorschot, and S. A. Vanstone. Handbook of applied cryptography. CRC Press, Boca Raton, Florida, 1996.
[19] B. Möller. A public-key encryption scheme with pseudo-random ciphertexts. In: ESORICS, LNCS 3193, pages 335–351. Springer, 2004.
[20] M. Navon and A. Samorodnitsky. On Delsarte’s linear programming bounds for binary codes. In: FOCS, pages 327–338. IEEE Comp. Soc., 2005.
[21] C. Neff. Verifiable mixing (shuffling) of ElGamal pairs., Apr. 2004.
[22] P. Ryan. Socio-technical trade-offs in cryptographic voting schemes. Workshop on Electronic Voting and e-Government in the UK, 27th–28th Feb. 2006.
[23] P. Y. Ryan and T. Peacock. Prêt à Voter: a systems perspective. Technical Report 929, University of Newcastle upon Tyne, School of Computing Science, Sept. 2005.
[24] P. Y. A. Ryan and S. A. Schneider. Prêt à Voter with re-encryption mixes. In: ESORICS, LNCS 4189, pages 313–326. Springer, 2006.
[25] P. Y. A. Ryan and S. A. Schneider. Prêt à Voter with re-encryption mixes. Technical Report 956, University of Newcastle upon Tyne, School of Computing Science, Apr. 2006.
[26] J. H. van Lint. Introduction to Coding Theory. Graduate Texts in Mathematics. Springer-Verlag New York, Inc., Secaucus, NJ, USA, 3rd rev. and expanded edition, 1998.
[27] A. Vardy. The intractability of computing the minimum distance of a code. IEEE Trans. Inform. Theory, 43(6):1757–1766, 1997.
[28] A. Young and M. Yung. The dark side of "black-box" cryptography, or: Should we trust capstone? In: CRYPTO, LNCS 1109, pages 89–103. Springer, 1996.
[29] A. Young and M. Yung. Kleptography: Using cryptography against cryptography. In: EUROCRYPT, LNCS 1233, pages 62–74. Springer, 1997.
[30] A. Young and M. Yung. Bandwidth-optimal kleptographic attacks. In: CHES, LNCS 2162, pages 235–250. Springer, 2001.
[31] A. Young and M. Yung. A subliminal channel in secret block ciphers. In: Selected Areas in Cryptography, LNCS 3357, pages 198–211. Springer, 2004.
[32] A. Young and M. Yung. Malicious cryptography: Kleptographic aspects. In: CT-RSA, LNCS 3376, pages 7–18. Springer, 2005.
[33] A. Young and M. Yung. A space efficient backdoor in RSA and its applications. In: Selected Areas in Cryptography, LNCS 3897, pages 128–143. Springer, 2005.