### Security and Key Management Implementation

#### Security Mechanisms
- **HMAC-SHA**: A 32-byte HMAC-SHA with a 224-bit pre-shared key is used for authentication between the laptop and the mobile phone.
- **Packet Structure**: Packets include:
  - 2-byte packet IDs
  - 8-byte timestamps
  - 16-byte initialization vector (IV) for AES encryption
  - 1024-bit Diffie-Hellman (DH) key pairs
- **Encoding and Transmission**: Base64 encoding is used to transmit packets over an RFComm Bluetooth connection. The `srm` tool is employed for secure deletions on the laptop.

#### Performance Evaluation
- **Execution Times**: Figure 6b shows the execution times and standard deviation for 100 runs as measured on the laptop. Key storage and retrieval operations take less than one second once the Bluetooth connection is established.
- **Variance in Times**: Key storage times exhibit higher variance compared to key retrieval times, due to the creation and writing of files rather than just reading them.

#### Key Storage and Deletion
- **Key Storage**: Keys are stored along with their expiration times in files.
- **Timely Deletion**: An alarm service is set to trigger the deletion of files upon the expiration of their timestamps.
- **Reboot Handling**: If the phone is shut down and rebooted before the expiration time, a background process (triggered by the boot-complete system broadcast) parses the key files, deletes those with expired timestamps, and resets the alarms.
- **Alarm Reset Time**: Figure 6c displays the time required to set the system alarm for different numbers of keys. The plot shows a linear dependency between the number of keys and the alarm reset time.

#### Usability and Resource Consumption
- **Resource Usage**: The prototype implementation consumes 1.5 kB for program storage and 0.18 kB per key.
- **Usability**: The execution times and resource consumption confirm the practical usability of the approach.

### Secure Deletion Considerations
- **Embedded Devices**: Many embedded devices have limited functionality for secure deletion due to OS characteristics (e.g., versioning) or hardware specifics (e.g., NAND storage using log-structured sequential writes).
- **Research and Solutions**: Recent research includes:
  - [26] for the Android YAFFS file system
  - [30] for versioning file systems
  - [34] regarding data remanence in flash memory devices
- **Device Selection**: Care should be taken in selecting the porter device to ensure secure deletion capabilities.

### Integration with Applications
- **Local File Storage**: The simplest application involves local file storage, where a device encrypts data locally with a key stored on a porter device. The communication channel between the device and the porter must be forward-secret.
- **Remote File Storage**: Similar to local file storage, but the communication between the user's device and the remote file server must also be forward-secret.
- **Web Services**: Users share data (e.g., pictures, movies, files) using remote storage. The communication key must be agreed upon between the sender and receiver(s), and the communication must be forward-secret.
- **E-mail**: Senders and receivers agree on keys and their expiration times, store the keys on their respective porter devices, and exchange e-mails. The key establishment can be optimized by having a mobile phone porter establish the keys directly with the sender.

### Related Work
- **Compromise Models**: Shoup [32] defined three notions of principal compromise: static, adaptive, and strong adaptive. Our model builds on the third notion, considering full device and user password compromise after a specific time.
- **Forward Secrecy**: Methods for protecting data confidentiality under device compromise include secret sharing, threshold cryptography, and forward secrecy. We focus on forward secrecy.
- **Centralized Systems**: Centralized systems like [20] offer access control and data deletion but require full trust in the service provider. Ephemerizer-based solutions [25, 28, 29] similarly require trust in a central server.

### Conclusion
We addressed the problem of data confidentiality in scenarios where attackers can observe communication and fully compromise principals after data exchange. We proposed two protocols that use key storage on porter devices, explicit deletion, and forward-secret subprotocols to achieve secrecy under full device, user, and communication compromise. Our prototype implementation demonstrates the practicality and feasibility of our approach.

### Acknowledgment
The authors thank Claudio Marforio for his work on the implementation of the prototype.

### References
[1] Privat Server HSM (Hardware Security Module). http://www.arx.com/products/hsm.php.
[2] Scyther protocol models for keeping data secret under full compromise using porter devices. http://people.inf.ethz.ch/cremersc/scyther/DataDeletion, Oct 2010.
[3] Chris Alexander and Ian Goldberg. Improved user authentication in off-the-record messaging. In Proceedings of the ACM Workshop on Privacy in the Electronic Society (WPES), pages 41–47, New York, 2007. ACM.
[4] Bouncy Castle Crypto APIs. http://www.bouncycastle.org.
[5] Charu Arora and Mathieu Turuani. Validating integrity for the Ephemerizer’s protocol with CL-Atse. In Formal to Practical Security: Papers Issued from the 2005-2008 French-Japanese Collaboration, pages 21–32. Berlin, 2009.
[6] David Basin and Cas Cremers. Degrees of security: Protocol guarantees in the face of compromising adversaries. In Proceedings of the 24th International Workshop on Computer Science Logic (CSL), pages 1–18. Springer, 2010.
[7] David Basin and Cas Cremers. Modeling and analyzing security in the presence of compromising adversaries. In Proceedings of the European Symposium on Research in Computer Security (ESORICS), pages 340–356. Springer, 2010.
[8] Mihir Bellare and Sara K. Miner. A forward-secure digital signature scheme. In Proceedings of the 19th Annual International Cryptology Conference on Advances in Cryptology (CRYPTO), pages 431–448, London, 1999.
[9] Bluecove. Java library for Bluetooth (JSR-82 implementation). http://bluecove.org.
[10] Bluetooth SIG, Inc. Bluetooth specification version 3.0 + HS, 2009.
[11] Nikita Borisov, Ian Goldberg, and Eric Brewer. Off-the-record communication, or, why not to use PGP. In Proceedings of the ACM Workshop on Privacy in the Electronic Society (WPES), pages 77–84, New York, 2004. ACM.
[12] Colin Boyd and Anish Mathuria. Protocols for Authentication and Key Establishment. Springer, 2003.
[13] Ran Canetti, Shai Halevi, and Jonathan Katz. A forward-secure public-key encryption scheme. In Proceedings of the Annual International Conference on the Theory and Applications of Cryptographic Techniques (EUROCRYPT), pages 255–271. Springer, 2003.
[14] IBM Corporation. IBM PCI Cryptographic Coprocessor. General Information Manual. http://www-03.ibm.com/security/cryptocards.
[15] Cas Cremers. Scyther. A tool for the automatic verification of security protocols. http://people.inf.ethz.ch/cremersc/scyther.
[16] Cas Cremers. Scyther—Semantics and Verification of Security Protocols. PhD thesis, Eindhoven University of Technology, 2006.
[17] Yvo Desmedt and Yair Frankel. Threshold cryptosystems. In Proceedings on Advances in Cryptology (CRYPTO), pages 307–315, New York, 1989. Springer.
[18] Whitfield Diffie, Paul C. van Oorschot, and Michael J. Wiener. Authentication and authenticated key exchanges. Designs, Codes and Cryptography, 2(2):107–125, 1992.
[19] Danny Dolev and Andrew C. Yao. On the security of public key protocols. IEEE Transactions on Information Theory, 29(2):198–208, 1983.
[20] Drop. Simple real-time sharing, collaboration, presentation. http://drop.io.
[21] Roxana Geambasu, Tadayoshi Kohno, Amit Levy, and Henry M. Levy. Vanish: Increasing data privacy with self-destructing data. In Proceedings of the 18th USENIX Security Symposium, pages 299–315. USENIX Association, 2009.
[22] Christoph G. Günther. An identity-based key-exchange protocol. In Proceedings of the Workshop on the Theory and Application of Cryptographic Techniques on Advances in Cryptology (EUROCRYPT), pages 29–37, New York, 1990. Springer.
[23] Prateek Gupta and Vitaly Shmatikov. Key confirmation and adaptive corruptions in the protocol security logic. In Proceedings of the Joint Workshop on Foundations of Computer Security and Automated Reasoning for Security Protocol Analysis (FCS-ARSPA), 2006.
[24] Peter Gutmann. Secure deletion of data from magnetic and solid-state memory. In Proceedings of the 6th USENIX Security Symposium (SSYM), Focusing on Applications of Cryptography, pages 77–90, Berkeley, California, 1996. USENIX Association.
[25] Disappearing Inc. http://www.disappearing-inc.com.
[26] Jaeheung Lee, Junyoung Heo, Yookun Cho, Jiman Hong, and Sung Y. Shin. Secure deletion for NAND flash file system. In Proceedings of the ACM Symposium on Applied Computing (SAC), pages 1710–1714, 2008.
[27] Alfred J. Menezes, Paul C. van Oorschot, and Scott A. Vanstone. Handbook of Applied Cryptography. CRC Press, 1997.
[28] Radia Perlman. The Ephemerizer: Making data disappear. Journal of Information System Security, 1:51–68, 2005.
[29] Radia Perlman. File system design with assured delete. In Proceedings of the Network and Distributed System Security Symposium (NDSS). ISOC, 2007.
[30] Zachary N. J. Peterson, Randal Burns, Joe Herring, Adam Stubblefield, and Aviel D. Rubin. Secure deletion for a versioning file system. In Proceedings of the 4th USENIX Conference on File and Storage Technologies (FAST), pages 143–154, Berkeley, California, 2005. USENIX Association.
[31] Adi Shamir. How to share a secret. Communications of the ACM, 22(11):612–613, 1979.
[32] Victor Shoup. On formal models for secure key exchange. Research Report RZ 3120, IBM Research, 1999.
[33] Muthian Sivathanu, Lakshmi N. Bairavasundaram, Andrea C. Arpaci-Dusseau, and Remzi H. Arpaci-Dusseau. Life or death at block-level. In Proceedings of the 6th Symposium on Operating Systems Design and Implementation (OSDI), pages 379–394, Berkeley, California, 2004. USENIX Association.
[34] Sergei Skorobogatov. Data remanence in flash memory devices. In Proceedings of the Cryptographic Hardware and Embedded Systems Workshop (CHES), pages 339–353, 2005.
[35] NexusOne Smartphone. http://www.htc.com.
[36] Scott Wolchok, Owen S. Hofmann, Nadia Heninger, Edward W. Felten, J. Alex Halderman, Christopher J. Rossbach, Brent Waters, and Emmett Witchel. Defeating Vanish with low-cost Sybil attacks against large DHTs. In Proceedings of the 17th Network and Distributed System Security Symposium (NDSS). ISOC, 2010.