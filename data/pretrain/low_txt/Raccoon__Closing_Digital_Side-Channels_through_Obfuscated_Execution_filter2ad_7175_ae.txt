### Multi-threaded Programs

Raccoon's data structures are stored in thread-local storage (TLS), enabling Raccoon to access internal data structures without the need for locks. The initialization of these data structures occurs at thread entry points, identified by `pthread_create()`, and they are freed at thread destruction points, identified by `pthread_exit()`. To prevent race conditions on the user program's memory, Raccoon employs locks where necessary. Most importantly, as long as the user program is free from race conditions, Raccoon maintains correct data-flow dependencies in both single-threaded and multi-threaded programs, as detailed in Section 5.1.

### Taint Analysis

Raccoon's taint analysis is sound but not complete, leading to an over-approximation of the code that must be obfuscated. For large programs, this over-approximation significantly contributes to overhead. Raccoon's taint analysis is flow-insensitive, path-insensitive, and context-insensitive. It uses a rudimentary alias analysis technique that assumes two pointers alias if they have the same type. We believe that more precise static analysis techniques can be employed to reduce the size of Raccoon's taint graph, thereby decreasing the obfuscation overhead.

### Limitations Imposed by Hardware

Various x86 instructions (e.g., `DIV`, `SQRT`) consume different cycles depending on their operand values. This operand-dependent instruction execution latency poses a significant challenge in ensuring the security of Raccoon-obfuscated programs. Additionally, we believe that the performance overhead of obfuscated programs would be substantially lower if processors were equipped with small scratchpad memory. Based on these conjectures, we plan to explore the impact of modified hardware designs in the near future.

### Conclusions

In this paper, we introduced the concept of digital side-channel attacks and presented Raccoon, a system designed to defend against such attacks. We evaluated Raccoon's performance across 15 programs, demonstrating that its overhead is significantly lower than that of the best prior work. Raccoon also offers several additional benefits: it expands the threat model, eliminates the need for special-purpose hardware, allows the release of transformed code to adversaries, and supports a broader range of language features. In comparison with GhostRider, Raccoon's overhead is 8.9× lower.

Raccoon's obfuscation technique can be improved in several ways. First, while the current performance overhead precludes immediate practical deployment, we believe that employing deterministic or special-purpose hardware can substantially reduce this overhead. Second, Raccoon's approach to transactional execution and oblivious memory updates can be applied to the operating system (OS) kernel, providing protection against OS-based digital side-channel attacks. Finally, in addition to defending against side-channel attacks, Raccoon can be enhanced to defend against covert-channel communication.

### Acknowledgments

We thank our shepherd, David Evans, and the anonymous reviewers for their valuable feedback. We also extend our gratitude to Casen Hunger and Akanksha Jain for their assistance with machine learning techniques and microarchitectural simulators. This work was partially funded by NSF Grants DRL-1441009 and CNS-1314709, and a gift from Qualcomm.

### References

[1] ACIIC¸ MEZ, O., KOC¸ , C. K., AND SEIFERT, J.-P. On the power of simple branch prediction analysis. In Symposium on Information, Computer and Communications Security (2007), pp. 312–320.
[2] ACIICMEZ, O., AND SEIFERT, J.-P. Cheap Hardware Parallelism Implies Cheap Security. In Workshop on Fault Diagnosis and Tolerance in Cryptography (2007), pp. 80–91.
[3] BAO, F., DENG, R. H., HAN, Y., A.JENG, NARASIMHALU, A. D., AND NGAIR, T. Breaking public key cryptosystems on tamper resistant devices in the presence of transient faults. In Workshop on Security Protocols (1998), pp. 115–124.
[4] BLUNDELL, C., LEWIS, E. C., AND MARTIN, M. Unrestricted transactional memory: Supporting I/O and system calls within transactions. Tech. rep., University of Pennsylvania, 2006.
[5] BRUMLEY, D., AND BONEH, D. Remote timing attacks are practical. In USENIX Security Symposium (2005).
[6] CARLSTROM, B. D., MCDONALD, A., CHAFI, H., CHUNG, J., MINH, C. C., KOZYRAKIS, C., AND OLUKOTUN, K. The Atomos transactional programming language. In Conference on Programming Language Design and Implementation (2006), pp. 1–13.
[7] CHECKOWAY, S., AND SHACHAM, H. Iago Attacks: Why the System Call API is a Bad Untrusted RPC Interface. In Architectural Support for Programming Languages and Operating Systems (2013), pp. 253–264.
[8] CRANE, S., HOMESCU, A., BRUNTHALER, S., LARSEN, P., AND FRANZ, M. Thwarting cache side-channel attacks through dynamic software diversity. In Network and Distributed System Security Symposium (2015).
[9] FLETCHER, C. W., DIJK, M. V., AND DEVADAS, S. A Secure Processor Architecture for Encrypted Computation on Untrusted Programs. In ACM Workshop on Scalable Trusted Computing (2012), pp. 3–8.
[10] FLETCHER, C. W., LING, R., XIANGYAO, Y., VAN DIJK, M., KHAN, O., AND DEVADAS, S. Suppressing the oblivious RAM timing channel while making information leakage and program efficiency trade-offs. In International Symposium on High Performance Computer Architecture (2014), pp. 213–224.
[11] GANDOLFI, K., MOURTEL, C., AND OLIVIER, F. Electromagnetic analysis: Concrete results. In Cryptographic Hardware and Embedded Systems (2001), pp. 251–261.
[12] ISHII, Y., INABA, M., AND HIRAKI, K. Access map pattern matching for high performance data cache prefetch. Journal of Instruction-Level Parallelism (2011), 499–500.
[13] JANA, S., AND SHMATIKOV, V. Memento: Learning secrets from process footprints. In IEEE Symposium on Security and Privacy (2012), pp. 143–157.
[14] KIM, T., PEINADO, M., AND MAINAR-RUIZ, G. STEALTHMEM: system-level protection against cache-based side channel attacks in the cloud. In USENIX Conference on Security Symposium (2012), pp. 11–11.
[15] KOCHER, P. C. Timing attacks on implementations of Diffie-Hellman, RSA, DSS, and other systems. In Advances in Cryptology (1996), pp. 104–113.
[16] KOCHER, P. C., JAFFE, J., AND JUN, B. Differential Power Analysis. In Advances in Cryptology. Springer Berlin Heidelberg, 1999, pp. 388–397.
[17] KONG, J., ACIICMEZ, O., SEIFERT, J.-P., AND ZHOU, H. Hardware-software integrated approaches to defend against software cache-based side channel attacks. In High Performance Computer Architecture (2009).
[18] KUHN, M. G. Cipher Instruction Search Attack on the Bus-Encryption Security Microcontroller DS5002FP. IEEE Transactions on Computers 47, 10 (1998), 1153–1157.
[19] LAMPSON, B. W. A note on the confinement problem. Communications of the ACM (1973), 613–615.
[20] LIU, C., HARRIS, A., MAAS, M., HICKS, M., TIWARI, M., AND SHI, E. GhostRider: A Hardware-Software System for Memory Trace Oblivious Computation. In Architectural Support for Programming Languages and Operating Systems (2015), pp. 87–101.
[21] LIU, C., HICKS, M., AND SHI, E. Memory Trace Oblivious Program Execution. In Computer Security Foundations Symposium (2013), pp. 51–65.
[22] MAAS, M., LOVE, E., STEFANOV, E., TIWARI, M., SHI, E., ASANOVIC, K., KUBIATOWICZ, J., AND SONG, D. PHANTOM: Practical Oblivious Computation in a Secure Processor. In Conference on Computer and Communications Security (2013), pp. 311–324.
[23] MARTIN, R., DEMME, J., AND SETHUMADHAVAN, S. Time-warp: rethinking timekeeping and performance monitoring mechanisms to mitigate side-channel attacks. In International Symposium on Computer Architecture (2012), pp. 118–129.
[24] MCKEEN, F., ALEXANDROVICH, I., BERENZON, A., ROZAS, C. V., SHAFI, H., SHANBHOGUE, V., AND SAVAGAONKAR, U. R. Innovative instructions and software models for isolated execution. In International Workshop on Hardware and Architectural Support for Security and Privacy (2013).
[25] MOLNAR, D., PIOTROWSKI, M., SCHULTZ, D., AND WAGNER, D. The program counter security model: Automatic detection and removal of control-flow side channel attacks. In Information Security and Cryptology (2006), pp. 156–168.
[26] OSVIK, D. A., SHAMIR, A., AND TROMER, E. Cache attacks and countermeasures: the case of AES. In RSA conference on Topics in Cryptology (2006), pp. 1–20.
[27] PERCIVAL, C. Cache missing for fun and profit. In BSDCan (2005).
[28] PORTER, D. E., HOFMANN, O. S., ROSSBACH, C. J., BENN, A., AND WITCHEL, E. Operating system transactions. In Symposium on Operating Systems Principles (2009), pp. 161–176.
[29] RISTENPART, T., TROMER, E., SHACHAM, H., AND SAVAGE, S. Hey, You, Get Off of My Cloud: Exploring Information Leakage in Third-party Compute Clouds. In Computer and Communications Security (2009), pp. 199–212.
[30] SABELFELD, A., AND MYERS, A. C. Language-Based Information-Flow Security. IEEE JSAC (2003), 5–19.
[31] SCHINDLER, W. A timing attack against RSA with the Chinese Remainder Theorem. In Cryptographic Hardware and Embedded Systems (2000), pp. 109–124.
[32] SHAMIR, A., AND TROMER, E. Acoustic cryptanalysis. Online at http://www.wisdom.weizmann.ac.il/∼tromer.
[33] SHI, E., CHAN, T.-H. H., STEFANOV, E., AND LI, M. Oblivious RAM with O((log n)³) Worst-case Cost. In International Conference on The Theory and Application of Cryptology and Information Security (2011), pp. 197–214.
[34] STEFANOV, E., VAN DIJK, M., SHI, E., FLETCHER, C., REN, L., YU, X., AND DEVADAS, S. Path ORAM: An Extremely Simple Oblivious RAM Protocol. In Conference on Computer and Communications Security (2013), pp. 299–310.
[35] SUH, G. E., FLETCHER, C., CLARKE, D., GASSEND, B., VAN DIJK, M., AND DEVADAS, S. Author Retrospective AEGIS: Architecture for Tamper-evident and Tamper-resistant Processing. In International Conference on Supercomputing (2014), pp. 68–70.
[36] THEKKATH, C., LIE, D., MITCHELL, M., LINCOLN, P., BONEH, D., MITCHELL, J., AND HOROWITZ, M. Architectural Support for Copy and Tamper Resistant Software. In International Conference on Architectural Support for Programming Languages and Operating Systems (2000), pp. 168–177.
[37] TIWARI, M., HUNGER, C., AND KAZDAGLI, M. Understanding Microarchitectural Channels and Using Them for Defense. In International Symposium on High Performance Computer Architecture (2015), pp. 639–650.
[38] VATTIKONDA, B. C., DAS, S., AND SHACHAM, H. Eliminating Fine Grained Timers in Xen. In Cloud Computing Security Workshop (2011), pp. 41–46.
[39] WANG, Z., AND LEE, R. B. New Cache Designs for Thwarting Software Cache-based Side Channel Attacks. In International Symposium on Computer Architecture (2007), pp. 494–505.
[40] WANG, Z., AND LEE, R. B. A novel cache architecture with enhanced performance and security. In IEEE/ACM International Symposium on Microarchitecture (2008), pp. 83–93.
[41] YEN, S.-M., AND JOYE, M. Checking before output may not be enough against fault-based cryptanalysis. IEEE Transactions on Computers (2000), 967–970.
[42] ZHANG, D., ASKAROV, A., AND MYERS, A. C. Predictive mitigation of timing channels in interactive systems. In Conference on Computer and Communications Security (2011), pp. 563–574.
[43] ZHANG, Y., JUELS, A., OPREA, A., AND REITER, M. K. HomeAlone: Co-residency Detection in the Cloud via Side-Channel Analysis. In IEEE Symposium on Security and Privacy (2011), pp. 313–328.
[44] ZHANG, Y., JUELS, A., REITER, M. K., AND RISTENPART, T. Cross-VM side channels and their use to extract private keys. In Conference on Computer and Communications Security (2012), pp. 305–316.
[45] ZHANG, Y., AND REITER, M. K. Duppel: Retrofitting Commodity Operating Systems to Mitigate Cache Side Channels in the Cloud. In Conference on Computer and Communications Security (2013), pp. 827–838.
[46] ZHUANG, X., ZHANG, T., AND PANDE, S. HIDE: An Infrastructure for Efficiently Protecting Information Leakage on the Address Bus. In Architectural Support for Programming Languages and Operating Systems (2004), pp. 72–84.