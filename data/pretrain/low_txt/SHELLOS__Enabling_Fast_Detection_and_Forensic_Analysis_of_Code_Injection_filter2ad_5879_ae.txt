### Implementation of Device Drivers and Future Work

The current implementation of device drivers in ShellOS prevents it from running directly as the host operating system. Running ShellOS as the host OS could offer additional performance benefits, particularly in detecting code injection for network services. This is an area we plan to explore in future work.

### Framework for Fast Detection and Analysis

ShellOS provides a framework for the rapid detection and analysis of buffers. However, an analyst or an automated data pre-processor (such as the one described in §5) must provide these buffers. Our experience has shown that this can be non-trivial, as special attention must be paid to ensure a realistic operating environment that elicits the proper execution of the sample under inspection. This challenge is common to all VM or emulation-based detection approaches we are aware of (e.g., [6, 8, 10, 31]). Our framework can be extended to benefit from ongoing research in this area.

### Limitations

#### Code Injection Attack Detection
Code injection attack detection, whether through emulation or direct CPU execution, typically operates as a self-sufficient black-box. A suspicious buffer of code or data is supplied, and a result is returned. ShellOS aims to provide a run-time environment as similar as possible to what the injected code expects. However, shellcode designed to execute under very specific conditions may not operate as expected (e.g., non-self-contained [19, 26], context-keyed [11], and swarm attacks [5]). Requiring more specific processor state reduces the attack exposure, which is generally contrary to the attacker's goal of exploiting as many systems as possible. The same rationale applies to ROP-based attacks, which require specific data to be present in memory.

#### Loop Detection
Our current approach to loop detection is simplistic. Software-based emulators can quickly detect and safely exit infinite loops by inspecting program state at each instruction. In contrast, we can only inspect state at each clock tick. Increasing the timer frequency to inspect program state more frequently would allow us to exit infinite loops more quickly, but the overhead associated with this limits our ability to do so. In future work, we plan to explore alternative methods for safely pruning such loops without incurring excessive overhead.

#### Virtualization Transparency
While using hardware virtualization to run ShellOS increases transparency compared to previous approaches, it may still be possible to detect a virtualized environment through a small set of instructions that must be emulated. Currently, ShellOS uses hardware virtualization extensions to run alongside a standard host OS, but only in a limited capacity.

### Conclusion

In this paper, we propose a new framework for enabling fast and accurate detection of code injection attacks. Specifically, we leverage hardware virtualization to allow efficient and accurate inspection of buffers by directly executing instruction sequences on the CPU. Our approach allows for the modular use of existing run-time heuristics without requiring tracing every machine-level instruction or performing unsafe optimizations. This provides a foundation upon which defenses for code injection attacks can be built. We also provide an empirical evaluation, spanning real-world attacks, that demonstrates the strengths of our framework.

### Code Availability

We anticipate that the source code for the ShellOS kernel and our packaged tools will be made available under a BSD license for research and non-commercial uses. Please contact the first author for more information on obtaining the software.

### Acknowledgments

We are especially grateful to Michalis Polychronakis for making nemu available to us and for fruitful discussions regarding this work. Thanks to Teryl Taylor, Scott Coull, Montek Singh, and the anonymous reviewers for their insightful comments and suggestions for improving an earlier draft of this paper. We also thank Bil Hayes and Murray Anderegg for their help in setting up the networking infrastructure that supported some of the throughput analyses in this paper. This work is supported by the National Science Foundation under award CNS-0915364 and by a Google Research Award.

### Notes

1. See, for example, “Sophisticated, targeted malicious PDF documents exploiting CVE-2009-4324” at http://isc.sans.edu/diary.html?storyid=7867.
2. See the discussion at https://bugs.launchpad.net/qemu/+bug/661696, November 2010.
3. We reset registers via `popa` and `fxrstor` instructions, while memory is reset by traversing page table entries and reloading pages with the dirty bit set.
4. The TAPiON engine is available at http://pb.specialised.info/all/tapion/.
5. We update this network trace with payload byte distributions collected in 2011.

### References

[1] P. Baecher and M. Koetter. Libemu - x86 shellcode emulation library. Available at http://libemu.carnivore.it/, 2007.
[2] F. Bellard. Qemu, a fast and portable dynamic translator. In Proceedings of the USENIX Annual Technical Conference, pages 41–41, Berkeley, CA, USA, 2005.
[3] E. Buchanan, R. Roemer, H. Shacham, and S. Savage. When Good Instructions Go Bad: Generalizing Return-Oriented Programming to RISC. In ACM Conference on Computer and Communications Security, Oct. 2008.
[4] B. Z. Charles Curtsigner, Benjamin Livshits, and C. Seifert. Zozzle: Fast and Precise In-Browser Javascript Malware Detection. USENIX Security Symposium, August 2011.
[5] S. P. Chung and A. K. Mok. Swarm attacks against network-level emulation/analysis. In International Symposium on Recent Advances in Intrusion Detection, pages 175–190, 2008.
[6] M. Cova, C. Kruegel, and V. Giovanni. Detection and analysis of drive-by-download attacks and malicious JavaScript code. In International Conference on World Wide Web, pages 281–290, 2010.
[7] Y. Ding, T. Wei, T. Wang, Z. Liang, and W. Zou. Heap Taichi: Exploiting Memory Allocation Granularity in Heap-Spraying Attacks. In Annual Computer Security Applications Conference, pages 327–336, 2010.
[8] M. Egele, P. Wurzinger, C. Kruegel, and E. Kirda. Defending browsers against drive-by downloads: Mitigating heap-spraying code injection attacks. In Detection of Intrusions and Malware & Vulnerability Assessment, June 2009.
[9] P. Fogla, M. Sharif, R. Perdisci, O. Kolesnikov, and W. Lee. Polymorphic blending attacks. In USENIX Security Symposium, pages 241–256, 2006.
[10] S. Ford, M. Cova, C. Kruegel, and G. Vigna. Analyzing and detecting malicious Flash advertisements. In Computer Security Applications Conference, pages 363–372, Dec 2009.
[11] D. A. Glynos. Context-keyed Payload Encoding: Fighting the Next Generation of IDS. In Athens IT Security Conference (ATH.C0N), 2010.
[12] R. Goldberg. Survey of Virtual Machine Research. IEEE Computer Magazine, 7(6):34–35, 1974.
[13] B. Gu, X. Bai, Z. Yang, A. C. Champion, and D. Xuan. Malicious shellcode detection with virtual memory snapshots. In International Conference on Computer Communications (INFOCOM), pages 974–982, 2010.
[14] F. Hernandez-Campos, F. Smith, and K. Jeffay. Tracking the evolution of web traffic: 1995-2003. In Proceedings of the 11th IEEE/ACM International Symposium on Modeling, Analysis and Simulation of Computer Telecommunication Systems (MASCOTS), pages 16–25, 2003.
[15] F. Hernandez-Campos, K. Jeffay, and F. Smith. Modeling and generating TCP application workloads. In 14th IEEE International Conference on Broadband Communications, Networks and Systems (BROADNETS), pages 280–289, 2007.
[16] I. Kim, K. Kang, Y. Choi, D. Kim, J. Oh, and K. Han. A Practical Approach for Detecting Executable Codes in Network Traffic. In Asia-Pacific Network Ops. & Mngt Symposium, 2007.
[17] G. MacManus and M. Sutton. Punk Ode: Hiding Shellcode in Plain Sight. In Black Hat USA, 2006.
[18] L. Martignoni, R. Paleari, G. F. Roglia, and D. Bruschi. Testing CPU Emulators. In International Symposium on Software Testing and Analysis, pages 261–272, 2009.
[19] J. Mason, S. Small, F. Monrose, and G. MacManus. English shellcode. In Conference on Computer and Communications Security, pages 524–533, 2009.
[20] MSDN. Mindump header structure. MSDN Library. See http://msdn.microsoft.com/en-us/library/ms680378(VS.85).aspx.
[21] R. Paleari, L. Martignoni, G. F. Roglia, and D. Bruschi. A Fistful of Red-Pills: How to Automatically Generate Procedures to Detect CPU Emulators. In USENIX Workshop on Offensive Technologies, 2009.
[22] A. Pasupulati, J. Coit, K. Levitt, S. F. Wu, S. H. Li, R. C. Kuo, and K. P. Fan. Buttercup: On Network-based Detection of Polymorphic Buffer Overflow Vulnerabilities. In IEEE/IFIP Network Op. & Mngt Symposium, pages 235–248, May 2004.
[23] U. Payer, P. Teufl, and M. Lamberger. Hybrid Engine for Polymorphic Shellcode Detection. In Detection of Intrusions and Malware & Vulnerability Assessment, pages 19–31, 2005.
[24] J. D. Pincus and B. Baker. Beyond stack Smashing: Recent Advances in Exploiting Buffer Overruns. IEEE Security and Privacy, 4(2):20–27, 2004.
[25] M. Polychronakis, K. G. Anagnostakis, and E. P. Markatos. Network-level Polymorphic Shellcode Detection using Emulation. In Detection of Intrusions and Malware & Vulnerability Assessment, pages 54–73, 2006.
[26] M. Polychronakis, K. G. Anagnostakis, and E. P. Markatos. Emulation-based Detection of Non-self-contained Polymorphic Shellcode. In International Symposium on Recent Advances in Intrusion Detection, 2007.
[27] M. Polychronakis, K. G. Anagnostakis, and E. P. Markatos. An Empirical Study of Real-world Polymorphic Code Injection Attacks. In USENIX Workshop on Large-Scale Exploits and Emergent Threats, 2009.
[28] M. Polychronakis, K. G. Anagnostakis, and E. P. Markatos. Comprehensive shellcode detection using runtime heuristics. In Annual Computer Security Applications Conference, pages 287–296, 2010.
[29] P. V. Prabhakar, Y. Song, and S. J. Stolfo. Smashing the Stack with Hydra: The Many Heads of Advanced Polymorphic Shellcode, 2009. Presented at Defcon 17, Las Vegas.
[30] M. Probst. Fast machine-adaptable dynamic binary translation. In Proceedings of the Workshop on Binary Translation, 2001.
[31] N. Provos, D. McNamee, P. Mavrommatis, K. Wang, and N. Modadugu. The ghost in the browser: Analysis of web-based malware. In Usenix Workshop on Hot Topics in Botnets, 2007.
[32] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose. All Your iFRAMEs Point to Us. In USENIX Security Symposium, pages 1–15, 2008.
[33] T. Raffetseder, C. Kruegel, and E. Kirda. Detecting System Emulators. Information Security, 4779:1–18, 2007.
[34] M. A. Rahman. Getting 0wned by malicious PDF - analysis. SANS Institute, InfoSec Reading Room, 2010.
[35] P. Ratanaworabhan, B. Livshits, and B. Zorn. NOZZLE: A Defense Against Heap-spraying Code Injection Attacks. In USENIX Security Symposium, pages 169–186, 2009.
[36] A. Sotirov and M. Dowd. Bypassing Browser Memory Protections. In Black Hat USA, 2008.
[37] D. Stevens. Malicious PDF documents. Information Systems Security Association (ISSA) Journal, July 2010.
[38] T. Toth and C. Kruegel. Accurate Buffer Overflow Detection via Abstract Payload Execution. In International Symposium on Recent Advances in Intrusion Detection, pages 274–291, 2002.
[39] Z. Tzermias, G. Sykiotakis, M. Polychronakis, and E. P. Markatos. Combining static and dynamic analysis for the detection of malicious documents. In Proceedings of the Fourth European Workshop on System Security, pages 4:1–4:6, New York, NY, USA, 2011.
[40] A. Vasudevan and R. Yerraballi. Stealth breakpoints. In 21st Annual Computer Security Applications Conference, pages 381–392, 2005.
[41] X. Wang, Y.-C. Jhi, S. Zhu, and P. Liu. STILL: Exploit Code Detection via Static Taint and Initialization Analyses. Annual Computer Security Applications Conference, pages 289–298, Dec 2008.
[42] Y. Younan, P. Philippaerts, F. Piessens, W. Joosen, S. Lachmund, and T. Walter. Filter-resistant code injection on ARM. In ACM Conference on Computer and Communications Security, pages 11–20, 2009.
[43] Q. Zhang, D. S. Reeves, P. Ning, and S. P. Iyer. Analyzing Network Traffic to Detect Self-Decrypting Exploit Code. In ACM Symposium on Information, Computer and Communications Security, 2007.