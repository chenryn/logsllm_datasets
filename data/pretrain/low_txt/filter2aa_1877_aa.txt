# Token Kidnapping's Revenge

## Author
Cesar Cerrudo  
cesar.at.argeniss.dot.com  
Argeniss â€“ Information Security & Software

## Table of Contents
1. Abstract
2. Introduction
3. Some Theory
4. The Tools
5. Finding the Vulnerabilities
6. Bypassing Microsoft Fix for Token Kidnapping on Windows 2003 and XP
7. Preventing Exploitation
8. Conclusion
9. Special Thanks
10. About the Author
11. References
12. About Argeniss

---

### Abstract
This document details several Microsoft Windows privilege escalation vulnerabilities, their discovery using simple tools, and methods of exploitation. It begins with a minor security issue that leads to the identification of more significant vulnerabilities. At the time of this document's release, these vulnerabilities were not publicly known.

---

### Introduction
**Token Kidnapping** is a research project I conducted some time ago, which identified security issues and techniques allowing privilege escalation on recent Windows operating systems. On Windows 2003 and XP, it enabled elevation to the Local System account from any account with impersonation rights. On Windows Vista and 2008, it allowed elevation to the Local System account from Network Service and Local Service accounts.

Microsoft has since fixed the original Token Kidnapping issues. However, this new research demonstrates that those fixes were insufficient, and privilege escalation remains possible on all Windows versions. Many people are curious about the process of security research, the tools used, and the methodology for finding vulnerabilities. To address this, I have made this document as practical and detailed as possible to help the reader understand and learn from it.

---

### Some Theory
Before diving into the technical details, it is essential to understand some foundational concepts. Readers with sufficient knowledge may skip this section.

#### Impersonation
Impersonation is the ability of a thread to execute using different security information than the process that owns the thread. This allows threads to run code under another user account, with all Access Control List (ACL) checks performed against the impersonated user. Impersonation can only be performed by processes with the "Impersonate a client after authentication" (SeImpersonatePrivilege) privilege. When a thread impersonates, it is associated with an impersonation token.

#### Tokens
An access token is an object that describes the security context of a process or thread, including the identity and privileges of the user account. Tokens can be primary or impersonation tokens. Primary tokens are assigned to processes, while impersonation tokens are obtained during impersonation. There are four impersonation levels: SecurityAnonymous, SecurityIdentity, SecurityImpersonation, and SecurityDelegation. Impersonation typically occurs during Inter-Process Communication (IPC) using Local Procedure Call (LPC), Named Pipes, etc. Clients can limit impersonation by setting proper options in the calling APIs.

#### Windows 2003 and XP Services Security
Services in Windows 2003 and XP run under the Local System, Network Service, Local Service, and regular user accounts. All services can impersonate. Some Windows services that impersonate privileged accounts are protected, created with special permissions. For example, a service running under the Network Service account cannot access a protected service running under the same account. This protection was introduced to fix the issues detailed in my previous Token Kidnapping research. Before this patch, it was possible to elevate privileges by obtaining privileged impersonation tokens from other processes. The patch restricts processes from accessing other processes running under the same account with privileged impersonation tokens.

#### Windows 7, Vista, and 2008 R1 & R2 Services Security
Recent Windows versions include several security improvements:
- **Session 0 Isolation:** Protects against Shatter attacks by running services in a different session (session 0) than regular user processes.
- **Least Privilege:** Allows Windows services to run with only the minimum required privileges.
- **Per Service SID:** Each service process has a unique security identifier, allowing services to be better protected. A service running under "X" account cannot access other service resources, even if the other service runs under the same "X" account.
- **Write Restricted Token:** Services can have write access to resources only if explicitly granted to the service SID, logon SID, Everyone SID, or write-restricted SID.
- **Restricted Network Access:** Services can only accept and make connections on specified ports and protocols. They can be restricted to have no network access, implemented as firewall rules that cannot be disabled after the service starts.
- **IIS 7.5 Worker Processes:** In Windows 7 and 2008 R2, IIS 7.5 worker processes no longer run under the Network Service account by default. Instead, they run under a special account named DefaultAppPool, providing more protection. However, the DefaultAppPool account has the same privileges as the Network Service account and can impersonate.

---

### The Tools
The following tools will be used in this research:

- **Process Explorer (ProcExp):** Displays information about all Windows processes, including Process ID, Windows objects handles, user names, and DACLs.
- **Process Monitor (ProcMon):** Monitors registry, file system, and network access by Windows processes.
- **WinDbg:** A user-mode and kernel-mode debugger for Windows, part of the Debugging Tools for Windows.
- **Registry Editor (Regedit):** A Windows tool for displaying and editing the Windows registry.

---

### Finding the Vulnerabilities
I was waiting for the Windows 7 (Win7) Release Candidate (RC) to conduct a quick security review, primarily looking for low-hanging fruit. I also wanted to check for new issues similar to those described in my previous Token Kidnapping research, which would allow privilege escalation and bypass new protections.

After Win7 RC was released, I installed it and began my investigation. I ran ProcExp to check for DACL issues on services, processes, and process objects such as threads, shared sections, and mutexes. Initially, everything seemed secure. After some time, I couldn't find anything interesting just by clicking around in ProcExp. I remembered a minor issue I had found on Windows 2008 R1 (Win2k8) and decided to check if it was still present in Win7.

The issue was that the Telephony service (TapiSrv) had a process object handle from a service running under the Local System account, and the handle had DuplicateHandle privileges. This meant that the Telephony service, which runs under the Network Service account, could duplicate any handle from the other process, potentially elevating its privileges.

While this issue was not critical, as exploiting it required first compromising the Telephony service, it was still a security concern. I tested it on Win7 and found that it was still present, indicating that Win7 was not entirely secure.

I continued my investigation but couldn't find any other low-hanging fruit. I decided to focus on the Telephony service issue. I didn't know the specifics, such as why the process handle sometimes had those privileges. In some tests, the handle wasn't there, making it a mystery.

To better understand the Telephony service, I considered what I knew:
- It provides functionality for programs that control telephony devices like modems and VoIP.
- It does not run by default.
- Any user can start it with the "net start tapisrv" command.
- It runs under the Network Service account on Win2k8 R1 & R2, Vista, and Win7, and under the Local System account on WinXP and Win2k3.
- It has had some remote and local vulnerabilities in the past.

To gain more insight, I needed to know about the inner and outer workings of the service, including the files and registry keys it uses, how it communicates with other processes, and what applications use its functionality. I started with the easiest tests, using ProcMon to monitor the service's interactions with the file system and registry.

I set up ProcMon to filter and display activities related to the Telephony service. Stopping and starting the service generated a lot of activity, and I analyzed the file and registry access items. The first step was to understand what the service was doing, which was challenging without extensive Windows OS knowledge. However, I noticed that TapiSrv was accessing the HKLM\Software\Microsoft\Tracing\tapisrv registry key, which caught my attention. Checking the key's ACL permissions revealed that the Network Service, Local Service, and Users accounts had the same permissions, including the "Set Value" permission. This indicated a potential security issue, as any user could manipulate values read and used by privileged processes.

---

This optimized version of your text aims to improve clarity, coherence, and professionalism. If you need further adjustments or additional sections, please let me know!