### References

1. **Simon Greiner and Daniel Grahl. 2016.** *Declassification in Component-Based Systems.* In CSF.
   - **Title:** Declassification in Component-Based Systems
   - **Authors:** Simon Greiner, Daniel Grahl
   - **Year:** 2016
   - **Conference:** CSF
   - **Note:** Non-interference with What-

2. **Weijia He, Maximilian Golla, Roshni Padhi, Jordan Ofek, Markus Dürmuth, Earlence Fernandes, and Blase Ur. 2018.** *Rethinking Access Control and Authentication for the Home Internet of Things (IoT).* In 27th USENIX Security Symposium (USENIX Security 18). USENIX Association, Baltimore, MD.
   - **Title:** Rethinking Access Control and Authentication for the Home Internet of Things (IoT)
   - **Authors:** Weijia He, Maximilian Golla, Roshni Padhi, Jordan Ofek, Markus Dürmuth, Earlence Fernandes, Blase Ur
   - **Year:** 2018
   - **Conference:** 27th USENIX Security Symposium (USENIX Security 18)
   - **Location:** Baltimore, MD
   - **Publisher:** USENIX Association

3. **Daniel Hedin, Luciano Bello, and Andrei Sabelfeld. 2016.** *Information-flow security for JavaScript and its APIs.* J. Comp. Sec. (2016).
   - **Title:** Information-flow security for JavaScript and its APIs
   - **Authors:** Daniel Hedin, Luciano Bello, Andrei Sabelfeld
   - **Year:** 2016
   - **Journal:** J. Comp. Sec.

4. **D. Hedin, A. Birgisson, L. Bello, and A. Sabelfeld. 2014.** *JSFlow: Tracking Information Flow in JavaScript and its APIs.* In SAC.
   - **Title:** JSFlow: Tracking Information Flow in JavaScript and its APIs
   - **Authors:** D. Hedin, A. Birgisson, L. Bello, A. Sabelfeld
   - **Year:** 2014
   - **Conference:** SAC

5. **Justin Huang and Maya Cakmak. 2015.** *Supporting Mental Model Accuracy in Trigger-action Programming.* In Proceedings of the 2015 ACM International Joint Conference on Pervasive and Ubiquitous Computing (UbiComp ’15). 215–225.
   - **Title:** Supporting Mental Model Accuracy in Trigger-action Programming
   - **Authors:** Justin Huang, Maya Cakmak
   - **Year:** 2015
   - **Conference:** Proceedings of the 2015 ACM International Joint Conference on Pervasive and Ubiquitous Computing (UbiComp ’15)
   - **Pages:** 215–225

6. **iBaby via IFTTT. 2018.** *Email me when temperature drops below threshold in the baby’s room.* https://ifttt.com/applets/UFcy5hZP-email-me-when-temperature-drops-below-threshold-in-the-baby-s-room. (2018).
   - **Title:** Email me when temperature drops below threshold in the baby’s room
   - **Source:** iBaby via IFTTT
   - **Year:** 2018
   - **URL:** https://ifttt.com/applets/UFcy5hZP-email-me-when-temperature-drops-below-threshold-in-the-baby-s-room

7. **IFTTT. 2016.** *How people use IFTTT today.* https://ifttt.com/blog/2016/11/connected-life-of-an-ifttt-user. (2016).
   - **Title:** How people use IFTTT today
   - **Source:** IFTTT
   - **Year:** 2016
   - **URL:** https://ifttt.com/blog/2016/11/connected-life-of-an-ifttt-user

8. **IFTTT. 2017.** *550 apps and devices now work with IFTTT.* https://ifttt.com/blog/2017/09/550-apps-and-devices-now-on-ifttt-infographic. (2017).
   - **Title:** 550 apps and devices now work with IFTTT
   - **Source:** IFTTT
   - **Year:** 2017
   - **URL:** https://ifttt.com/blog/2017/09/550-apps-and-devices-now-on-ifttt-infographic

9. **IFTTT. 2017.** *IFTTT: IF This Then That.* https://ifttt.com. (2017).
   - **Title:** IFTTT: IF This Then That
   - **Source:** IFTTT
   - **Year:** 2017
   - **URL:** https://ifttt.com

10. **IFTTT. 2018.** *IFTTT service categories.* https://ifttt.com/search. (2018).
    - **Title:** IFTTT service categories
    - **Source:** IFTTT
    - **Year:** 2018
    - **URL:** https://ifttt.com/search

11. **IFTTT. 2018.** *Share your Applet ideas with us!.* https://www.surveymonkey.com/r/2XZ7D27. (2018).
    - **Title:** Share your Applet ideas with us!
    - **Source:** IFTTT
    - **Year:** 2018
    - **URL:** https://www.surveymonkey.com/r/2XZ7D27

12. **IFTTT. 2018.** *URL Shortening in IFTTT.* https://help.ifttt.com/hc/en-us/articles/115010361648-Do-all-Applets-run-through-the-ift-tt-url-shortener-. (2018).
    - **Title:** URL Shortening in IFTTT
    - **Source:** IFTTT
    - **Year:** 2018
    - **URL:** https://help.ifttt.com/hc/en-us/articles/115010361648-Do-all-Applets-run-through-the-ift-tt-url-shortener-

13. **Nav Jagpal, Eric Dingle, Jean-Philippe Gravel, Panayiotis Mavrommatis, Niels Provos, Moheeb Abu Rajab, and Kurt Thomas. 2015.** *Trends and Lessons from Three Years Fighting Malicious Extensions.* In USENIX Security Symposium. USENIX Association, 579–593.
    - **Title:** Trends and Lessons from Three Years Fighting Malicious Extensions
    - **Authors:** Nav Jagpal, Eric Dingle, Jean-Philippe Gravel, Panayiotis Mavrommatis, Niels Provos, Moheeb Abu Rajab, Kurt Thomas
    - **Year:** 2015
    - **Conference:** USENIX Security Symposium
    - **Publisher:** USENIX Association
    - **Pages:** 579–593

14. **jayreddin via IFTTT. 2018.** *Google Contacts saved to Google Drive Spreadsheet.* https://ifttt.com/applets/nyRJVwYa-google-contacts-saved-to-google-drive-spreadsheet. (2018).
    - **Title:** Google Contacts saved to Google Drive Spreadsheet
    - **Source:** jayreddin via IFTTT
    - **Year:** 2018
    - **URL:** https://ifttt.com/applets/nyRJVwYa-google-contacts-saved-to-google-drive-spreadsheet

15. **jsonl. 2018.** *The JSON Query Language.* http://www.jsoniq.org/. (2018).
    - **Title:** The JSON Query Language
    - **Source:** jsonl
    - **Year:** 2018
    - **URL:** http://www.jsoniq.org/

16. **jsonsimple. 2018.** *json-simple.* https://code.google.com/archive/p/json-simple/.
    - **Title:** json-simple
    - **Source:** jsonsimple
    - **Year:** 2018
    - **URL:** https://code.google.com/archive/p/json-simple/

17. **Eunsuk Kang, Aleksandar Milicevic, and Daniel Jackson. 2016.** *Multi-representational Security Analysis.* In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2016). 181–192.
    - **Title:** Multi-representational Security Analysis
    - **Authors:** Eunsuk Kang, Aleksandar Milicevic, Daniel Jackson
    - **Year:** 2016
    - **Conference:** Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2016)
    - **Pages:** 181–192

18. **Manything via IFTTT. 2018.** *When you leave home, start recording on your Manything security camera.* https://ifttt.com/applets/187215p-when-you-leave-home-start-recording-on-your-manything-security-camera. (2018).
    - **Title:** When you leave home, start recording on your Manything security camera
    - **Source:** Manything via IFTTT
    - **Year:** 2018
    - **URL:** https://ifttt.com/applets/187215p-when-you-leave-home-start-recording-on-your-manything-security-camera

19. **Xianghang Mi, Feng Qian, Ying Zhang, and XiaoFeng Wang. 2017.** *An empirical characterization of IFTTT: ecosystem, usage, and performance.* In Proceedings of the 2017 Internet Measurement Conference, IMC 2017, London, United Kingdom, November 1-3, 2017. 398–404.
    - **Title:** An empirical characterization of IFTTT: ecosystem, usage, and performance
    - **Authors:** Xianghang Mi, Feng Qian, Ying Zhang, XiaoFeng Wang
    - **Year:** 2017
    - **Conference:** Proceedings of the 2017 Internet Measurement Conference, IMC 2017
    - **Location:** London, United Kingdom
    - **Dates:** November 1-3, 2017
    - **Pages:** 398–404

20. **Toby C. Murray, Robert Sison, Edward Pierzchalski, and Christine Rizkallah. 2016.** *Compositional Verification and Refinement of Concurrent Value-Dependent Noninterference.* In CSF.
    - **Title:** Compositional Verification and Refinement of Concurrent Value-Dependent Noninterference
    - **Authors:** Toby C. Murray, Robert Sison, Edward Pierzchalski, Christine Rizkallah
    - **Year:** 2016
    - **Conference:** CSF

21. **Chandrakana Nandi and Michael D. Ernst. 2016.** *Automatic Trigger Generation for Rule-based Smart Homes.* In Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security (PLAS ’16). 97–102.
    - **Title:** Automatic Trigger Generation for Rule-based Smart Homes
    - **Authors:** Chandrakana Nandi, Michael D. Ernst
    - **Year:** 2016
    - **Conference:** Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security (PLAS ’16)
    - **Pages:** 97–102

22. **Mark W. Newman, Ame Elliott, and Trevor F. Smith. 2008.** *Providing an Integrated User Experience of Networked Media, Devices, and Services through End-User Composition.* In Pervasive Computing, 6th International Conference, Pervasive 2008, Sydney, Australia, May 19-22, 2008, Proceedings. 213–227.
    - **Title:** Providing an Integrated User Experience of Networked Media, Devices, and Services through End-User Composition
    - **Authors:** Mark W. Newman, Ame Elliott, Trevor F. Smith
    - **Year:** 2008
    - **Conference:** Pervasive Computing, 6th International Conference, Pervasive 2008
    - **Location:** Sydney, Australia
    - **Dates:** May 19-22, 2008
    - **Pages:** 213–227

23. **oauth. 2018.** *OAuth 2.0.* https://oauth.net/2/. (2018).
    - **Title:** OAuth 2.0
    - **Source:** oauth
    - **Year:** 2018
    - **URL:** https://oauth.net/2/

24. **Damian Poddebniak, Jens Müller, Christian Dresen, Fabian Ising, Sebastian Schinzel, Simon Friedberger, Juraj Somorovsky, and Jörg Schwenk. 2018.** *Efail: Breaking S/MIME and OpenPGP Email Encryption using Exfiltration Channels.* In USENIX Security.
    - **Title:** Efail: Breaking S/MIME and OpenPGP Email Encryption using Exfiltration Channels
    - **Authors:** Damian Poddebniak, Jens Müller, Christian Dresen, Fabian Ising, Sebastian Schinzel, Simon Friedberger, Juraj Somorovsky, Jörg Schwenk
    - **Year:** 2018
    - **Conference:** USENIX Security

25. **Andrei Sabelfeld and David Sands. 2001.** *A Per Model of Secure Information Flow in Sequential Programs.* Higher-Order and Symbolic Computation (2001).
    - **Title:** A Per Model of Secure Information Flow in Sequential Programs
    - **Authors:** Andrei Sabelfeld, David Sands
    - **Year:** 2001
    - **Journal:** Higher-Order and Symbolic Computation

26. **Shayak Sen, Saikat Guha, Anupam Datta, Sriram K. Rajamani, Janice Y. Tsai, and Jeannette M. Wing. 2014.** *Bootstrapping Privacy Compliance in Big Data Systems.* In IEEE S&P.
    - **Title:** Bootstrapping Privacy Compliance in Big Data Systems
    - **Authors:** Shayak Sen, Saikat Guha, Anupam Datta, Sriram K. Rajamani, Janice Y. Tsai, Jeannette M. Wing
    - **Year:** 2014
    - **Conference:** IEEE S&P

27. **sparksoniq. 2018.** *Sparksoniq.* http://sparksoniq.org/. (2018).
    - **Title:** Sparksoniq
    - **Source:** sparksoniq
    - **Year:** 2018
    - **URL:** http://sparksoniq.org/

28. **Milijana Surbatovich, Jassim Aljuraidan, Lujo Bauer, Anupam Das, and Limin Jia. 2017.** *Some Recipes Can Do More Than Spoil Your Appetite: Analyzing the Security and Privacy Risks of IFTTT Recipes.* In WWW.
    - **Title:** Some Recipes Can Do More Than Spoil Your Appetite: Analyzing the Security and Privacy Risks of IFTTT Recipes
    - **Authors:** Milijana Surbatovich, Jassim Aljuraidan, Lujo Bauer, Anupam Das, Limin Jia
    - **Year:** 2017
    - **Conference:** WWW

29. **thegrowthguy via IFTTT. 2017.** *Automatically log new Stripe payments to a Google Spreadsheet.* https://ifttt.com/applets/264933p-automatically-log-new-stripe-payments-to-a-google-spreadsheet. (2017).
    - **Title:** Automatically log new Stripe payments to a Google Spreadsheet
    - **Source:** thegrowthguy via IFTTT
    - **Year:** 2017
    - **URL:** https://ifttt.com/applets/264933p-automatically-log-new-stripe-payments-to-a-google-spreadsheet

30. **Blase Ur, Melwyn Pak Yong Ho, Stephen Brawner, Jiyun Lee, Sarah Mennicken, Noah Picard, Diane Schulze, and Michael L. Littman. 2016.** *Trigger-Action Programming in the Wild: An Analysis of 200,000 IFTTT Recipes.* In Proceedings of the 2016 CHI Conference on Human Factors in Computing Systems, San Jose, CA, USA, May 7-12, 2016. 3227–3231.
    - **Title:** Trigger-Action Programming in the Wild: An Analysis of 200,000 IFTTT Recipes
    - **Authors:** Blase Ur, Melwyn Pak Yong Ho, Stephen Brawner, Jiyun Lee, Sarah Mennicken, Noah Picard, Diane Schulze, Michael L. Littman
    - **Year:** 2016
    - **Conference:** Proceedings of the 2016 CHI Conference on Human Factors in Computing Systems
    - **Location:** San Jose, CA, USA
    - **Dates:** May 7-12, 2016
    - **Pages:** 3227–3231

31. **Blase Ur, Elyse McManus, Melwyn Pak Yong Ho, and Michael L. Littman. 2014.** *Practical trigger-action programming in the smart home.* In CHI Conference on Human Factors in Computing Systems, CHI’14, Toronto, ON, Canada - April 26 - May 01, 2014. 803–812.
    - **Title:** Practical trigger-action programming in the smart home
    - **Authors:** Blase Ur, Elyse McManus, Melwyn Pak Yong Ho, Michael L. Littman
    - **Year:** 2014
    - **Conference:** CHI Conference on Human Factors in Computing Systems, CHI’14
    - **Location:** Toronto, ON, Canada
    - **Dates:** April 26 - May 01, 2014
    - **Pages:** 803–812

32. **Philipp Vogt, Florian Nentwich, Nenad Jovanovic, Engin Kirda, Christopher Krügel, and Giovanni Vigna. 2007.** *Cross Site Scripting Prevention with Dynamic Data Tainting and Static Analysis.* In NDSS.
    - **Title:** Cross Site Scripting Prevention with Dynamic Data Tainting and Static Analysis
    - **Authors:** Philipp Vogt, Florian Nentwich, Nenad Jovanovic, Engin Kirda, Christopher Krügel, Giovanni Vigna
    - **Year:** 2007
    - **Conference:** NDSS

33. **Rui Wang, Luyi Xing, XiaoFeng Wang, and Shuo Chen. 2013.** *Unauthorized origin crossing on mobile platforms: threats and mitigation.* In ACM Conference on Computer and Communications Security. ACM, 635–646.
    - **Title:** Unauthorized origin crossing on mobile platforms: threats and mitigation
    - **Authors:** Rui Wang, Luyi Xing, XiaoFeng Wang, Shuo Chen
    - **Year:** 2013
    - **Conference:** ACM Conference on Computer and Communications Security
    - **Publisher:** ACM
    - **Pages:** 635–646

34. **Xiao-yong Zhou, Soteris Demetriou, Dongjing He, Muhammad Naveed, Xiaorui Pan, XiaoFeng Wang, Carl A. Gunter, and Klara Nahrstedt. 2013.** *Identity, location, disease and more: inferring your secrets from Android public resources.* In ACM Conference on Computer and Communications Security. ACM, 1017–1028.
    - **Title:** Identity, location, disease and more: inferring your secrets from Android public resources
    - **Authors:** Xiao-yong Zhou, Soteris Demetriou, Dongjing He, Muhammad Naveed, Xiaorui Pan, XiaoFeng Wang, Carl A. Gunter, Klara Nahrstedt
    - **Year:** 2013
    - **Conference:** ACM Conference on Computer and Communications Security
    - **Publisher:** ACM
    - **Pages:** 1017–1028

### Appendix A: Semantic Rules

**Expression Typing:**
- \(\Gamma(s) = L\)
- \(\Gamma(e1 + e2) = \Gamma(e1) \sqcup \Gamma(e2)\)
- \(\Gamma(b) = L, b \in B\)
- \(\Gamma(w) = H, w \notin B\)
- \(\Gamma(f(e)) = \Gamma(e)\)
- \(\Gamma(\text{source}) = H\)
- \(\Gamma(\text{link}(e)) = \Gamma(e)\)

**Figure 15: Expression Typing**

**Expression Evaluation:**
- \(\langle s, m, \Gamma \rangle_{pc} \Downarrow s\)
- \(\langle l, m, \Gamma \rangle_{pc} \Downarrow m(l)\)
- \(\langle ei, m, \Gamma \rangle_{pc} \Downarrow si\) for \(i = 1, 2\)
- \(\langle e1 + e2, m, \Gamma \rangle_{pc} \Downarrow s1 + s2\)
- \(\langle e, m, \Gamma \rangle_{pc} \Downarrow s\)
- \(\langle f(e), m, \Gamma \rangle_{pc} \Downarrow \bar{f}(s)\)

**Command Evaluation:**
- **Assign:**
  - \(\langle l = e, m, S, \Gamma \rangle_{pc} \rightarrow_1 \langle \text{stop}, m[l \mapsto m(e)], S, \Gamma[l \mapsto pc \sqcup \Gamma(e)] \rangle\)
  - \(pc \sqsubseteq \Gamma(l)\)
- **Sequence:**
  - \(\langle c1, m, S, \Gamma \rangle_{pc} \rightarrow^{n1} \langle \text{stop}, m1, S1, \Gamma1 \rangle\)
  - \(\langle c2, m1, S1, \Gamma1 \rangle_{pc} \rightarrow^{n2} \langle \text{stop}, m2, S2, \Gamma2 \rangle\)
  - \(\langle c1; c2, m, S, \Gamma \rangle_{pc} \rightarrow^{n1+n2} \langle \text{stop}, m2, S2, \Gamma2 \rangle\)
- **If:**
  - \(m(e) = '' \Rightarrow j = 2\)
  - \(m(e) \neq '' \Rightarrow j = 1\)
  - \(\langle cj, m, S, \Gamma \rangle_{pc \sqcup \Gamma(e)} \rightarrow^n \langle \text{stop}, m', S', \Gamma' \rangle\)
  - \(\langle \text{if } e \text{ then } c1 \text{ else } c2, m, S, \Gamma \rangle_{pc} \rightarrow^n \langle \text{stop}, m', S', \Gamma' \rangle\)
- **While-True:**
  - \(\langle c, m, S, \Gamma \rangle_{pc \sqcup \Gamma(e)} \rightarrow^{n1} \langle \text{stop}, m1, S1, \Gamma \rangle\)
  - \(m(e) \neq ''\)
  - \(\langle \text{while } e \text{ do } c, m1, S1, \Gamma \rangle_{pc} \rightarrow^{n2} \langle \text{stop}, m2, S2, \Gamma \rangle\)
  - \(\langle \text{while } e \text{ do } c, m, S, \Gamma \rangle_{pc} \rightarrow^{n1+n2} \langle \text{stop}, m2, S, \Gamma \rangle\)
- **While-False:**
  - \(\langle \text{while } e \text{ do } c, m, S, \Gamma \rangle_{pc} \rightarrow_1 \langle \text{stop}, m, S, \Gamma \rangle\)
  - \(m(e) = ''\)

**Figure 16: Monitor Semantics (Remaining rules)**

### Appendix B: Soundness

**Lemma B.1 (Confinement):** If \(\langle c, m, S, \Gamma \rangle_H \rightarrow^* \langle \text{stop}, m', S', \Gamma' \rangle\) and \(\langle c[i2/x], m2, S, \Gamma \rangle_{pc} \rightarrow^* \langle \text{stop}, m'_2, S'_2, \Gamma'_2 \rangle\), then \(\forall l. \Gamma'(l) = L \Rightarrow m(l) = m'(l)\).

**Proof:**
- \(\Gamma'(l) = L\) means that \(c\) contains no assignments to \(l\).
- If \(c\) updated \(l\), then the label of \(l\) in \(\Gamma'\) would be \(H\), according to the assign rule.
- \(\blacksquare\)

**Lemma B.2 (Helper):** If \(\langle c[i1/x], m1, S, \Gamma \rangle_{pc} \rightarrow^* \langle \text{stop}, m'_1, S'_1, \Gamma'_1 \rangle\) and \(\langle c[i2/x], m2, S, \Gamma \rangle_{pc} \rightarrow^* \langle \text{stop}, m'_2, S'_2, \Gamma'_2 \rangle\) and \(m1 \sim_\Gamma m2\), then:
  1. \(S'_1 = S'_2\)
  2. \(\Gamma'_1 = \Gamma'_2\)
  3. \(m'_1 \sim_{\Gamma'_1} m'_2\)

**Proof:**
- By induction on the derivation \(\langle c[i1/x], m1, S \rangle_{pc} \rightarrow^* \langle \text{stop}, m'_1, S'_1 \rangle\) and case analysis on the last rule used in that derivation.
- **Case skip:**
  - Then \(\Gamma'_1 = \Gamma = \Gamma'_2\), \(S'_1 = S[oj \mapsto tt] = S'_2\), and \(m'_1 \sim_{\Gamma'_1} m'_2\).
- **Case assign:**
  - Then \(S'_1 = S'_2 = S\).
  - We distinguish two cases:
    - (1) \(\Gamma(e) = L\):
      - Then \(m1(e) = m2(e)\) and \(\Gamma'_1(l) = \Gamma'_2(l) = pc\).
      - Hence \(\Gamma'_1 = \Gamma'_2\) and \(m'_1 \sim_{\Gamma'_1} m'_2\).
    - (2) \(\Gamma(e) = H\):
      - Then \(\Gamma'_1(l) = \Gamma'_2(l) = H\) and \(m1(e) \sim_H m2(e)\).
      - Hence \(\Gamma'_1 = \Gamma'_2\) and \(m'_1 \sim_{\Gamma'_1} m'_2\).
- **Case seq:**
  - Follows trivially from IH.
- **Case if:**
  - We distinguish two cases:
    - (1) \(\Gamma(e) = L\):
      - Hence \(m1(e) = m2(e)\) and the same branch is taken in both executions.
      - The result follows from IH.
    - (2) \(\Gamma(e) = H\):
      - Consider the more interesting case when the two executions follow different branches of the conditional, e.g., \(c1\) executes in \(m1\) and \(c2\) executes in \(m2\).
      - From the confinement lemma (Lemma B.1), it follows that no assignments to low variables are performed in high contexts: \(\forall l. \Gamma'_1(l) = L \Rightarrow mi(l) = m'_i(l)\) and \(\Gamma'_1(l) = \Gamma'_2(l) = \Gamma(l)\).
      - Also, no downgrades take place in high contexts, thus \(\Gamma'_1 = \Gamma'_2 = \Gamma\).
      - \(\forall l. \Gamma(l) = L \Rightarrow m'_1(l) \sim_{\Gamma'_1(l)} m'_2(l)\). Hence \(m'_1 \sim_{\Gamma'_1} m'_2\).
      - From the skip rule, it follows that no changes to the skip set are performed in high contexts. Hence \(S'_1 = S'_2 = S\).
- **Case while:**
  - We distinguish two cases:
    - (1) \(\Gamma(e) = L\):
      - Hence \(m1(e) = m2(e)\) and either the while-true or while-false rule is taken in both executions.
      - The result follows from IH.
    - (2) \(\Gamma(e) = H\):
      - Consider the more interesting case when \(c\) executes in \(m1\) according to while-true, and \(c\) executes in \(m2\) according to while-false.
      - From the while-false rule, it follows that \(m2 = m\) and \(\Gamma'_2 = \Gamma\).
      - From the confinement lemma (Lemma B.1), it follows that no assignments to low variables are performed in high contexts and no downgrades take place in high contexts. Hence \(\Gamma'_1 = \Gamma\). Thus \(\Gamma'_1 = \Gamma'_2\) and \(m'_1 \sim_\Gamma m'_2\).
      - From the skip rule, it follows that no changes to the skip set are performed in high contexts. Hence \(S'_1 = S'_2 = S\).
- **Case sink:**
  - Then \(S'_1 = S'_2 = S\).
  - We distinguish two cases:
    - (1) \(\Gamma(e) = L\):
      - Then \(m1(e) = m2(e)\) and \(\Gamma'_1(outj) = \Gamma'_2(outj) = pc\).
    - (2) \(\Gamma(e) = H\):
      - If the sink statement corresponds to a skipped action (\(S(oj) = tt\)), then the memories and typing environments remain unchanged, i.e., \(m'_1 \sim_{\Gamma'_1} m'_2\).
      - If the sink statement does not correspond to a skipped action (\(S(oj) = ff\)), then \(m'_i = mi[outj \mapsto m(e)]\) and \(\Gamma_i = \Gamma[outj \mapsto H]\), for \(i = 1, 2\). Then \(\Gamma'_1 = \Gamma'_2\) and, since \(m'_1 \sim_{\Gamma'_1} m'_2\).
- \(\blacksquare\)

**Lemma B.3:**
- If \(\langle \text{sink}(e), m, S, \Gamma \rangle_H \rightarrow^* \langle \text{stop}, m', S, \Gamma' \rangle\), then \(m'(out)|B = \emptyset\).

**Proof:**
- The only construct that allows the attacker to make any observations is linkL, i.e., only blacklisted URLs inside the linkL construct can increase the attacker’s knowledge.
- However, the monitor disallows evaluating linkL in high contexts.
- \(\blacksquare\)

**Theorem 2 (Soundness):**
- Given command \(c\), input \(i1\), memory \(m1\), typing environment \(\Gamma\), skip set \(S\), and URL blacklist \(B\) such that \(\langle c[i1/x], m1, S, \Gamma \rangle_{pc} \rightarrow^* \langle \text{stop}, m'_1, S'_1, \Gamma'_1 \rangle\), for any \(i2\) and \(m2\) such that \(i1 \approx i2\), \(m1 \sim_\Gamma m2\), \(m1(outj) \sim_B m2(outj) \forall 1 \leq j \leq |S|\) such that \(S(oj) = ff\), and \(\langle c[i2/x], m2, S, \Gamma \rangle_{pc} \rightarrow^* \langle \text{stop}, m'_2, S'_2, \Gamma'_2 \rangle\), we have:
  - \(S'_1 = S'_2\)
  - \(\Gamma'_1 = \Gamma'_2\)
  - \(m'_1 \sim_{\Gamma'_1} m'_2\)

**Table 1: Popular Third-Party Applets Susceptible to Privacy Violations**

| Title of Applet on IFTTT | Trigger Service | Action Service | Users (May'17 – Aug'18) |
|--------------------------|-----------------|----------------|-------------------------|
| Tweet your Instagrams as native photos on Twitter | Instagram | Twitter | 500k – 540k |
| Sync all your new iOS Contacts to a Google Spreadsheet | iOS Contacts | Google Sheets | 270k – 270k |
| Save photos you’re tagged in on Facebook to a Dropbox folder | Facebook | Dropbox | 160k – 160k |
| Back up photos you’re tagged in on Facebook to an iOS Photos album | Facebook | iOS Photos | 150k – 160k |
| Track your work hours in Google Calendar | Location | Google Calendar | 150k – 160k |
| Get an email whenever a new Craigslist post matches your search | Classifieds | Email | 140k – 150k |
| Press a button to track work hours in Google Drive | Button Widget | Google Sheets | 130k – 130k |
| Automatically share your Instagrams to Facebook | Instagram | Facebook | 110k – 140k |
| Log how much time you spend at home/work/etc. | Location | Google Sheet | 99k – 100k |
| Tweet your Facebook status updates | Facebook | Twitter | 88k – 100k |

**Table 2: Popular Third-Party IoT Applets Susceptible to Integrity/Availability Violations**

| Title of Applet on IFTTT | Trigger Service | Action Service | Users (May'17 – Aug'18) |
|--------------------------|-----------------|----------------|-------------------------|
| Turn your lights to red if your Nest Protect detects a carbon monoxide emergency | Nest Protect | Philipps Hue | 4.8k – 6.3k |
| If Arlo detects motion, call my phone | Arlo | Phone Call | 1.1k – 1.7k |
| If Nest Protect detects smoke send notification to Xfinity X1 TVs | Nest Protect | Comcast Labs | 570 – 620 |
| If smoke emergency, set lights to alert color | Nest Protect | Philipps Hue | 410 – 590 |
| Get a phone call when Nest cam detects motion | Nest Cam | Phone Call | 410 – 420 |
|