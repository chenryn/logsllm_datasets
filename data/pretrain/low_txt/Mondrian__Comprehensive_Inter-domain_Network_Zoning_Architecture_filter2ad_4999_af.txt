Certainly! Here is the optimized and refined version of your text:

---

**Receiver Consent for Incoming Traffic**

MONDRIAN offers several significant advantages. Firstly, it is compatible with various Internet architectures, ensuring practicality and deployability. Secondly, MONDRIAN enhances security by providing source authenticity, data confidentiality, and data integrity. Lastly, it improves manageability through a simplified zoning structure, advanced key establishment system, and centralized policy management, thereby streamlining network management.

### X. Conclusion

Network zoning has long been recognized as a cornerstone of secure network operation and management. Currently, operators implement network zones using network segmentation technologies and security middleboxes. However, as information systems become more dynamic in terms of topology, operations, and functionality, traditional network-zoning architectures face new challenges in scalability and flexibility. This paper demonstrates that lightweight policy enforcement for inter-zone communication is achievable. By adopting a constructive approach with a cryptographic foundation, it is possible to create a proactive alternative to the predominantly reactive systems used in network zoning today. When integrated with MONDRIAN, firewall-based verification becomes simpler because firewalls would only process a limited amount of filtered traffic. Consequently, MONDRIAN reduces the number of management points in distributed networks while maintaining a high degree of security.

### Acknowledgment

We would like to thank our shepherd, Patrick Traynor, and the anonymous reviewers for their insightful feedback and suggestions. We also thank Markus Legner and Giacomo Giuliari for their helpful discussions that improved this research. We gratefully acknowledge support from ETH Zurich and the Zurich Information Security and Privacy Center (ZISC). This work was also supported by the Institute of Information & Communications Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT) (No. 2019-0-01697, Development of Automated Vulnerability Discovery Technologies for Blockchain Platform Security).

---

**References**

[1] D. E. 3rd, T. Senevirathne, A. Ghanwani, D. Dutt, and A. Banerjee, “Transparent Interconnection of Lots of Links (TRILL) Use of IS-IS,” RFC 7176, IETF, 2014.
[2] Apache ZooKeeper, https://zookeeper.apache.org/.
[3] J. N. Bakker, I. Welch, and W. K. Seah, “Network-wide Virtual Firewall using SDN/OpenFlow,” in Proceedings of IEEE Conference on Network Function Virtualization and Software Defined Networks (NFV-SDN), 2016.
[4] S. M. Bellovin, “Distributed Firewalls,” Login Magazine, Special Issue on Security, 1999.
[5] P. Berde, M. Gerola, J. Hart, Y. Higuchi, M. Kobayashi, T. Koide, B. Lantz, B. O’Connor, P. Radoslavov, W. Snow et al., “ONOS: Towards an Open, Distributed SDN OS,” in Proceedings of the Workshop on Hot Topics in Software Defined Networking (HOTSDN), 2014.
[6] Y. Cai, L. Wei, H. Ou, V. Arya, and S. Jethwani, “Protocol Independent Multicast Equal-Cost Multipath (ECMP) Redirect,” RFC 6754, IETF, 2012.
[7] W. R. Cheswick, S. M. Bellovin, and A. D. Rubin, *Firewalls and Internet Security: Repelling the Wily Hacker*. Addison-Wesley, 2003.
[8] Cidranger, https://github.com/yl2chen/cidranger.
[9] Consul, https://github.com/hashicorp/consul.
[10] T. Das, V. Sridharan, and M. Gurusamy, “A Survey on Controller Placement in SDN,” IEEE Communications Surveys & Tutorials, vol. 22, no. 1, pp. 472–503, 2019.
[11] S. Dawkins, “Path Aware Networking: A Bestiary of Roads Not Taken,” IETF Internet Draft, 2018.
[12] J. Deng, H. Hu, H. Li, Z. Pan, K.-C. Wang, G.-J. Ahn, J. Bi, and Y. Park, “VNGuard: An NFV/SDN Combination Framework for Provisioning and Managing Virtual Firewalls,” in Proceedings of IEEE Conference on Network Function Virtualization and Software Defined Network (NFV-SDN), 2015.
[13] DPDK Project, “Data Plane Development Kit,” https://dpdk.org.
[14] M. Dworkin, “Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC,” NIST Special Publication 800-38D, 2007.
[15] EJBCA, https://svn.cesecore.eu/svn/ejbca/trunk/ejbca/.
[16] W. Enck, P. McDaniel, S. Sen, P. Sebos, S. Spoerel, A. Greenberg, S. Rao, and W. Aiello, “Configuration Management at Massive Scale: System Design and Experience,” in Proceedings of the USENIX Annual Technical Conference (USENIX ATC), 2007.
[17] ETCD, https://github.com/etcd-io/etcd.
[18] S. K. Fayaz, T. Yu, Y. Tobioka, S. Chaki, and V. Sekar, “BUZZ: Testing Context-Dependent Policies in Stateful Networks,” in Proceedings of the USENIX Symposium on Networked Systems Design and Implementation (NSDI), 2016.
[19] D. Felsch, M. Grothe, J. Schwenk, A. Czubak, and M. Szymanek, “The Dangers of Key Reuse: Practical Attacks on IPsec IKE,” in Proceedings of the USENIX Security Symposium, 2018.
[20] Go 1.14, https://golang.org/doc/go1.14.
[21] A. Gontarczyk, P. McMillan, and C. Pavlovski, “Blueprint for Cyber Security Zone Modeling,” Information Technology in Industry, vol. 3, no. 2, pp. 38–45, 2015.
[22] D. Harkins and D. Carrel, “The Internet Key Exchange (IKE),” RFC 2409, IETF, 1998.
[23] S. Hassas Yeganeh and Y. Ganjali, “Kandoo: A Framework for Efficient and Scalable Offloading of Control Applications,” in Proceedings of the Workshop on Hot Topics in Software Defined Networks (HOTSDN), 2012.
[24] M. He, A. Varasteh, and W. Kellerer, “Toward a Flexible Design of SDN Dynamic Control Plane: An Online Optimization Approach,” IEEE Transactions on Network and Service Management, vol. 16, no. 4, pp. 1694–1708, 2019.
[25] C. Hopps, “Analysis of an Equal-Cost Multi-Path Algorithm,” RFC 2992 (Informational), IETF, 2000.
[26] IEEE Std., “1363-2000: IEEE Standard Specifications for Public-Key Cryptography,” 2000.
[27] IEEE Std., “802.1aq-2012: Local and Metropolitan Area Networks—Shortest Path Bridging,” 2012.
[28] IEEE Std., “802.1q-2018: Local and Metropolitan Area Networks—Bridges and Bridged Networks,” 2018.
[29] Juniper, “Security Products Comparison Chart,” https://www.juniper.net/us/en/local/pdf/datasheets/1000265-en.pdf.
[30] C. Kaufman, “Internet Key Exchange (IKEv2) Protocol,” RFC 4306, IETF, 2005.
[31] S. Kent, “IP Encapsulating Security Payload (ESP),” RFC 4303, IETF, 2005.
[32] S. Kent and K. Seo, “Security Architecture for the Internet Protocol,” RFC 4301, IETF, 2005.
[33] J. Kwon, T. Lee, C. Hähni, and A. Perrig, “SVLAN: Secure & Scalable Network Virtualization,” in Proceedings of the Symposium on Network and Distributed System Security (NDSS), 2020.
[34] A. X. Liu and F. Chen, “Collaborative Enforcement of Firewall Policies in Virtual Private Networks,” in Proceedings of the ACM Symposium on Principles of Distributed Computing, 2008.
[35] G. Lospoto, M. Rimondini, B. G. Vignoli, and G. Di Battista, “Rethinking Virtual Private Networks in the Software-Defined Era,” in Proceedings of the IFIP/IEEE International Symposium on Integrated Network Management (IM), 2015.
[36] M. Mahalingam, D. Dutt, K. Duda, P. Agarwal, L. Kreeger, T. Sridhar, M. Bursell, and C. Wright, “Virtual eXtensible Local Area Network (VXLAN): A Framework for Overlaying Virtualized Layer 2 Networks over Layer 3 Networks,” RFC 7348, IETF, 2014.
[37] Q. Mahmoud, *Cognitive Networks: Towards Self-Aware Networks*. Wiley & Sons, 2007.
[38] T. Markham and C. Payne, “Security at the Network Edge: A Distributed Firewall Architecture,” in Proceedings of DARPA Information Survivability Conference and Exposition II (DISCEX’01), 2001.
[39] D. Maughan, M. Schertler, M. Schneider, and J. Turner, “Internet Security Association and Key Management Protocol (ISAKMP),” RFC 2408, IETF, 1998.
[40] A. Mayer, A. Wool, and E. Ziskind, “FANG: A Firewall Analysis Engine,” in Proceedings of IEEE Symposium on Security and Privacy (S&P), 2000.
[41] J. Medved, R. Varga, A. Tkacik, and K. Gray, “OpenDaylight: Towards a Model-Driven SDN Controller Architecture,” in Proceedings of IEEE International Symposium on a World of Wireless, Mobile and Multimedia Networks, 2014.
[42] Microsoft, “Microsoft 365 Denial-of-Service Defense Strategy,” https://docs.microsoft.com/en-us/office365/enterprise/office-365-microsoft-dos-defense-strategy.
[43] A. Morton, “IMIX Genome: Specification of Variable Packet Sizes for Additional Testing,” RFC 6985, IETF, 2013.
[44] M. Mousa, A. M. Bahaa-Eldin, and M. A. Sobh, “Autonomic Management of MPLS Backbone Networks Using SDNs,” in Proceedings of the International Conference on Computer Engineering and Systems (ICCES), 2017.
[45] L. Obregon, “Infrastructure Security Architecture for Effective Security Monitoring,” SANS Institute, vol. 2, 2015.
[46] OpenXPKI, https://github.com/openxpki/openxpki/.
[47] A. Panda, C. Scott, A. Ghodsi, T. Koponen, and S. Shenker, “Cap for Networks,” in Proceedings of the ACM Workshop on Hot Topics in Software Defined Networking (HotSDN), 2013.
[48] R. Perlman, D. E. 3rd, D. Dutt, S. Gai, and A. Ghanwani, “Routing Bridges (RBridges): Base Protocol Specification,” RFC 6325, IETF, 2011.
[49] A. Perrig, P. Szalachowski, R. M. Reischuk, and L. Chuat, *SCION: A Secure Internet Architecture*. Springer Verlag, 2017.
[50] K. Phemius, M. Bouet, and J. Leguay, “Disco: Distributed Multi-domain SDN Controllers,” in Proceedings of the IEEE Network Operations and Management Symposium (NOMS), 2014.
[51] PISKES Prototype Implementation, https://github.com/netsec-ethz/scion/tree/master/go/lib/drkey.
[52] PISKES Prototype Implementation, https://github.com/chaehni/scion/tree/master/go/sig.
[53] Y. Qi, B. Yang, B. Xu, and J. Li, “Towards System-level Optimization for High Performance Unified Threat Management,” in Proceedings of the International Conference on Networking and Services (ICNS), 2007.
[54] H. V. Ramasamy, C.-L. Tsao, B. Pfitzmann, N. Joukov, and J. W. Murray, “Towards Automated Identification of Security Zone Classification in Enterprise Networks,” in Hot-ICE, 2011.
[55] E. Rescorla, “The Transport Layer Security (TLS) Protocol Version 1.3,” RFC 8446, IETF, 2018.
[56] B. Rothenberger, D. Roos, M. Legner, and A. Perrig, “PISKES: Pragmatic Internet-Scale Key-Establishment System,” in Proceedings of the ACM Asia Conference on Computer and Communications Security (ASIACCS), 2020.
[57] S. Gueron, *Intel® Advanced Encryption Standard (AES) New Instructions Set*. White Paper, 2012.
[58] X. Shi, H. Lin, H. Jin, B. B. Zhou, Z. Yin, S. Di, and S. Wu, “GIRAFFE: A Scalable Distributed Coordination Service for Large-scale Systems,” in Proceedings of IEEE International Conference on Cluster Computing (CLUSTER), 2014.
[59] SIG (Scion-IP Gateway), https://github.com/scionproto/scion/tree/master/go/posix-gateway.
[60] Spirent, *IMIX (Internet Mix) Journal*. Test Methodology Journal, 2006.
[61] SQLite 3.32.0, https://www.sqlite.org/releaselog/3_32_0.html.
[62] Statista, “Leading Banks in the United States in 2019, by Number of Branches,” https://www.statista.com/statistics/935643/banks-with-the-most-branches-usa/.
[63] X. Sun, Y. Sung, S. D. Krothapalli, and S. G. Rao, “A Systematic Approach for Evolving VLAN Designs,” in Proceedings of the Annual IEEE Conference on Computer Communications (INFOCOM), 2010.
[64] Y. Sung, S. G. Rao, G. G. Xie, and D. A. Maltz, “Towards Systematic Design of Enterprise Networks,” in Proceedings of the ACM CoNEXT, 2008.
[65] D. Thaler and C. Hopps, “Multipath Issues in Unicast and Multicast Next-Hop Selection,” RFC 2991 (Informational), IETF, 2000.
[66] B. Trammell, J. Smith, and A. Perrig, “Adding Path Awareness to the Internet Architecture,” IEEE Internet Computing, vol. 22, no. 2, 2018.
[67] B. Tschaen, Y. Zhang, T. Benson, S. Banerjee, J. Lee, and J.-M. Kang, “SFC-Checker: Checking the Correct Forwarding Behavior of Service Function Chaining,” in Proceedings of IEEE Conference on Network Function Virtualization and Software Defined Networks (NFV-SDN), 2016.
[68] K. Yap, M. Motiwala, J. Rahe, S. Padgett, M. Holliman, G. Baldus, M. Hines, T. Kim, A. Narayanan, A. Jain et al., “Taking the Edge off with Espresso: Scale, Reliability, and Programmability for Global Internet Peering,” in Proceedings of the ACM SIGCOMM, 2017.
[69] T. Yu, S. K. Fayaz, M. P. Collins, V. Sekar, and S. Seshan, “PSI: Precise Security Instrumentation for Enterprise Networks,” in Proceedings of the Symposium on Network and Distributed System Security (NDSS), 2017.
[70] Y. Yuan, S. Moon, S. Uppal, L. Jia, and V. Sekar, “NetSMC: A Custom Symbolic Model Checker for Stateful Network Verification,” in Proceedings of the USENIX Symposium on Networked Systems Design and Implementation (NSDI), 2020.
[71] T. Zhang, P. Giaccone, A. Bianco, and S. De Domenico, “The Role of the Inter-Controller Consensus in the Placement of Distributed SDN Controllers,” Computer Communications, vol. 113, pp. 1–13, 2017.

---

### Appendix A: Packet Metadata

```go
type Packet struct {
    Ingress       bool
    SrcHost       net.IP
    DstHost       net.IP
    RemoteTP      string
    DstZone       uint32
    RawPacket     common.RawBytes
}
```

The packet metadata is an abstract object passed between modules, describing an IP packet. It accumulates information about the raw IP packet (`RawPacket`). The `Ingress` field identifies a packet as either an ingress packet (coming from the WAN) or an egress packet (originated in the local network). `SrcHost` and `DstHost` reflect the source and destination IP addresses of the packet. `RemoteTP` designates the remote TP. For an ingress packet, it is the source TP from which the packet was received; for an egress packet, it is the TP to which the packet needs to be forwarded. `DstZone` is the Zone ID of the zone to which `DstHost` belongs.

### Appendix B: Controller Database

```sql
CREATE TABLE Zones (
    id INTEGER NOT NULL,
    name TEXT,
    PRIMARY KEY(id)
);

CREATE TABLE Sites (
    tp_address TEXT NOT NULL,
    name TEXT,
    PRIMARY KEY(tp_address)
);

CREATE TABLE Subnets (
    net_ip BLOB NOT NULL,
    net_mask BLOB NOT NULL,
    zone INTEGER NOT NULL,
    tp_address TEXT NOT NULL,
    PRIMARY KEY(net_ip, net_mask),
    FOREIGN KEY(zone) REFERENCES Zones(id) ON DELETE CASCADE,
    FOREIGN KEY(tp_address) REFERENCES Sites(tp_address) ON DELETE CASCADE
);

CREATE TABLE Transitions (
    src INTEGER NOT NULL,
    dest INTEGER NOT NULL,
    PRIMARY KEY(src, dest) ON CONFLICT REPLACE,
    FOREIGN KEY(src) REFERENCES Zones(id) ON DELETE CASCADE,
    FOREIGN KEY(dest) REFERENCES Zones(id) ON DELETE CASCADE
);
```

The controller database consists of four tables: `Zones`, `Sites`, `Subnets`, and `Transitions`.

- **Zones**: Contains all network zones known to the controller, identified by zone IDs. Additionally, a human-readable description is attached.
- **Sites**: Holds all known branch sites with the addresses of the corresponding TPs and a textual description.
- **Subnets**: Describes the configured IP subnets, along with their zone membership and the TP behind which they are located.
- **Transitions**: Reflects the zone transition matrix of allowed zone transitions.

---