Let \( \text{init}(G) \) be defined by \( G = (K_G, E_G, \text{Ack}_G, \text{AC}_G, L_G) \), and let \( \text{init}(G') \) be defined by \( G' = (K_G, E'_G, \text{Ack}'_G, \text{AC}_G, L'_G) \). We start by showing that \( \text{Ack}'_G \) is the same as \( \text{Ack}_G \) and \( L_G = L'_G \).

By assumption, \( \text{Ack}_G(K.r) \) is nontrivial if and only if \( \text{Ack}'_G(K.r) \) is nontrivial for each attribute \( K.r \). Therefore, step (1) of \( \text{init} \) collects the same delegation credentials in both cases. Since \( \text{Ack}_G \) is identical to \( \text{Ack}'_G \), the delegation credential graph does not depend on \( G \) and the dummy attributes introduced in step 2 are uniquely determined. Consequently, \( \text{Ack}'_G \) is the same as \( \text{Ack}_G \). Thus, \( \text{Ack}_G(K.r) \) is nontrivial if and only if \( \text{Ack}'_G(K.r) \) is nontrivial, and step 3 collects the same delegation credentials in both cases. Hence, \( L_G = L'_G \), as desired.

Next, we use induction on \( i \in [1, n] \) to show that the response sequence \( [m_1, m_2, \ldots, m_n] \) generated by using \( G \) is identical to the response sequence \( [m'_1, m'_2, \ldots, m'_n] \) generated by using \( G' \). We simultaneously show that, except for the configurations they contain, the sequences of states \( [q_1, q_2, \ldots, q_n] \) and \( [q'_1, q'_2, \ldots, q'_n] \) used in the construction of the respective message sequences are also identical.

**Base Case:**
Because \( \text{Ack}_G \) is identical to \( \text{Ack}'_G \), the state \( q_1 \) produced by \( \text{startttg}(G, \rho, K_A) \) is the same as the state \( q'_1 \) produced by \( \text{startttg}(G', \rho, K_A) \). It follows that the messages \( m_1 \) and \( m'_1 \) produced by each of the respective functions are also the same.

**Induction Step:**
We must show that for \( i \in [2, n] \), assuming \( m_{i-1} = m'_{i-1} \) and \( q_{i-1} \) and \( q'_{i-1} \) differ only in their configurations, then \( (q_i, m_i) = \text{replyttg}(q_{i-1}, a_{i-1}) \) is the same as \( (q'_i, m'_i) = \text{replyttg}(q'_{i-1}, a_{i-1}) \), again, except for the configurations in the states. To do this, we use an inner induction on the iterations of the loop in the definition of \( \text{replyttg} \) to show that in corresponding iterations, the values of \( \text{ttg} \) and \( \text{outmsg} \) obtained by using \( G \) are the same as the values obtained by using \( G' \), which we denote by \( \text{ttg}' \) and \( \text{outmsg}' \).

The base case is straightforward: the outer induction assumption tells us that \( \text{ttgold} \) and \( \text{ttg}'_{\text{old}} \) are the same, so in the third line of \( \text{replyttg} \), \( \text{apply}(a_{i-1}.\text{ops}, \text{ttgold}) \) is the same as \( \text{apply}(a_{i-1}.\text{ops}, \text{ttg}'_{\text{old}}) \); the output messages \( \text{outmsg} \) and \( \text{outmsg}' \) are both empty lists.

For the inner induction step, we assume that the TTGs and output messages are the same at the top of the loop, and show that they are again the same at the bottom. Because choice is deterministic, it is sufficient to show that \( \text{candidates}(G, K_A, \text{ttg}) \) is the same as \( \text{candidates}(G', K_A, \text{ttg}') \). This, together with the fact that the TTGs are again the same at the bottom, will show that each of the two negotiations terminate the loop at the same point, completing the proof.

We show that \( \text{candidates}(G, K_A, \text{ttg}) \) is the same as \( \text{candidates}(G', K_A, \text{ttg}') \) by considering each node in the TTGs and each processing rule that might be used to process it, and by showing that (each instance of) the rule applies when using configuration \( G \) if and only if it applies when using configuration \( G' \). In the following paragraphs, we consider the opponent-side processing rules; cases are labeled according to node-processing rule. The verifier-side processing rules are similar.

**Case 1(a):**
In this case, \( \text{Ack}_G(K.r) \) is trivially satisfied, which means that no member of \( \text{UnAcks}(G, M) \) is reachable from \( K.r \) in the delegation credential graph. (This follows from step 2 of \( \text{init} \).) So \( K.r \leftarrow K_O \in E_G \) if and only if \( K.r \leftarrow K_O \in \text{releaseable}(E, \text{UnAcks}(G, M)) \). This, in turn, holds if and only if \( K.r \leftarrow K_O \in \text{releaseable}(E'_G, \text{UnAcks}(G, M)) \), by the theorem's hypotheses. Finally, \( K.r \leftarrow K_O \in \text{releaseable}(E'_G, \text{UnAcks}(G, M)) \) holds if and only if \( K.r \leftarrow K_O \in E'_G \), again because no member of \( \text{UnAcks}(G, M) \) is reachable from \( K.r \).

**Case 1(b):**
We have already argued that \( L_G = L'_G \), so rule 1(b) applies to \( \text{ttg} \) if and only if it applies to \( \text{ttg}' \).

**Case 1(c):**
The satisfaction state of nodes is uniquely determined by the structure of the TTG and the processing state of nodes in it. By induction hypothesis, at the top of the loop, \( \text{ttg} \) and \( \text{ttg}' \) are identical in structure, including in the processing state of each node. It follows that the satisfaction state of \( T \) is the same in the two TTGs. Moreover, since \( \text{ttg} \) and \( \text{ttg}' \) are identical, for each node, the same instances of 1(a) and 1(b) can be and have been applied to that node in \( \text{ttg} \) as in \( \text{ttg}' \). (We say a rule "has been applied" if performing the rule does not change the TTG.)

**Case 2(a):**
Because \( \text{Ack}_G = \text{Ack}'_G \), the same instances of this rule apply when using \( G \) as when using \( G' \).

**Case 2(b):**
Since \( \text{ttg} \) and \( \text{ttg}' \) are identical, for each node, the same instances of 2(a) can be and have been applied to that node in \( \text{ttg} \) as in \( \text{ttg}' \). An argument similar to that used in case 1(c) shows that the satisfaction state of \( (K_O : eAck? \rightarrow K_V) \) is the same in \( \text{ttg} \) as in \( \text{ttg}' \). In the case that the satisfaction state is unknown, rule 2(b) applies neither using \( G \) nor using \( G' \). If it is satisfied, it follows by Proposition 4.1 that \( M \) has attributes that satisfy \( \text{Ack}_G(K.r) \), which tells us that no element of \( \text{UnAcks}(G, M) \) is reachable from \( K.r \) in the delegation credential graph. Thus, as we showed in case 1(a), \( K.r \leftarrow K_O \in E_G \) if and only if \( K.r \leftarrow K_O \in E'_G \). So the same instances of rule 2(b) apply using \( G \) as using \( G' \).

**Case 2(c):**
Since \( \text{ttg} \) and \( \text{ttg}' \) are identical, for each node, the same instances of 2(a) can be and have been applied to that node in \( \text{ttg} \) as in \( \text{ttg}' \). As in case 2(b), the satisfaction state of \( (K_O : eAck? \rightarrow K_V) \) is the same in the two TTGs. We have argued above that \( L_G = L'_G \). So the same instances of rule 2(c) apply in \( \text{ttg} \) using \( G \) as apply in \( \text{ttg}' \) using \( G' \).

**Case 2(d):**
Since the two graphs are identical, the same instances of 2(a), 2(b), and 2(c) apply to \( \text{ttg} \) as apply to \( \text{ttg}' \), each rule instance has been applied to \( \text{ttg} \) if and only if it has been applied to \( \text{ttg}' \). So rule 2(d) can be applied to \( \text{ttg} \) if and only if it can be applied to \( \text{ttg}' \).

**Acknowledgments:**
Both authors are supported by NSF ITR grant CCR-0325951 (BYU). We thank the anonymous reviewers for their many helpful suggestions.

**References:**

- BLAZE, M., FEIGENBAUM, J., AND LACY, J. 1996. Decentralized trust management. In Proceedings of the 1996 IEEE Symposium on Security and Privacy. IEEE Computer Society Press, Piscataway, New Jersey. 164–173.
- BONATTI, P. AND SAMARATI, P. 2000. Regulating service access and information release on the web. In Proceedings of the 7th ACM Conference on Computer and Communications Security (CCS-7). ACM Press, New York. 134–143.
- BONATTI, P., KRAUS, S., AND SUBRAHMANIAN, V. S. 1995. Foundations of secure deductive databases. Knowledge and Data Engineering 7, 3, 406–422.
- DOMINGO-FERRER, J., Ed. 2002. Inference Control in Statistical Databases, From Theory to Practice. Lecture Notes in Computer Science, vol. 2316. Springer-Verlag, New York.
- GOGUEN, J. AND MESEGUER, J. 1982. Security policies and security models. In Proceedings of the 1982 IEEE Symposium on Security and Privacy. IEEE Computer Society Press, Piscataway, New Jersey. 11–20.
- GOLDREICH, O. 2001. The foundations of cryptography—Vol. 1: Basic tools. Cambridge University Press, Cambridge.
- HERZBERG, A., MASS, Y., MIHAELI, J., NAOR, D., AND RAVID, Y. 2000. Access control meets public key infrastructure, or: Assigning roles to strangers. In Proceedings of the 2000 IEEE Symposium on Security and Privacy. IEEE Computer Society Press, Piscataway, New Jersey. 2–14.
- HESS, A., JACOBSON, J., MILLS, H., WAMSLEY, R., SEAMONS, K. E., AND SMITH, B. 2002. Advanced client/server authentication in TLS. In Network and Distributed System Security Symposium. 203–214.
- HOLT, J. E., BRADSHAW, R. W., SEAMONS, K. E., AND ORMAN, H. 2003. Hidden credentials. In Proceedings of the 2nd ACM Workshop on Privacy in the Electronic Society.
- LI, J., LI, N., AND WINSBOROUGH, W. H. 2005. Automated trust negotiation using cryptographic credentials. In CCS '05: Proceedings of the 12th ACM conference on Computer and communications security. ACM Press, New York. 46–57.
- LI, N., MITCHELL, J. C., AND WINSBOROUGH, W. H. 2002. Design of a role-based trust management framework. In Proceedings of the 2002 IEEE Symposium on Security and Privacy. IEEE Computer Society Press, Piscataway, New Jersey. 114–130.
- LI, N., DU, W., AND BONEH, D. 2003a. Oblivious signature-based envelope. In Proceedings of the 22nd ACM Symposium on Principles of Distributed Computing (PODC 2003). ACM Press, New York.
- LI, N., GROSOF, B. N., AND FEIGENBAUM, J. 2003b. Delegation Logic: A logic-based approach to distributed authorization. ACM Transactions on Information and System Security (TISSEC) 6, 1 (Feb.), 128–171.
- LI, N., WINSBOROUGH, W. H., AND MITCHELL, J. C. 2003c. Distributed credential chain discovery in trust management. Journal of Computer Security 11, 1 (Feb.), 35–86.
- RIVEST, R. L., SHAMIR, A., AND ADLEMAN, L. M. 1978. A method for obtaining digital signatures and public-key cryptosystems. Communications of the ACM 21, 120–126.
- SEAMONS, K. E., WINSLETT, M., AND YU, T. 2001. Limiting the disclosure of access control policies during automated trust negotiation. In Proceedings of the Symposium on Network and Distributed System Security (NDSS'01).
- SEAMONS, K. E., WINSLETT, M., YU, T., YU, L., AND JARVIS, R. 2002. Protecting privacy during online trust negotiation. In 2nd Workshop on Privacy Enhancing Technologies. Springer-Verlag, New York.
- STADDON, J. 2003. Dynamic inference control. In Proceedings of the 8th ACM SIGMOD Workshop on Research issues in data mining and knowledge discovery. ACM Press, New York. 94–100.
- SUTHERLAND, D. 1986. A model of information. In Proceedings of the 9th National Computer Security Conference. 175–183.
- WANG, L., WIJESEKERA, D., AND JAJODIA, S. 2003. Cardinality-based inference control in data cubes. Journal of Computer Security 12, 5 (Sept. 2004), 655–692.
- WINSBOROUGH, W. H. AND LI, N. 2002a. Protecting sensitive attributes in automated trust negotiation. In Proceedings of the ACM Workshop on Privacy in the Electronic Society. ACM Press, New York, 41–51.
- WINSBOROUGH, W. H. AND LI, N. 2002b. Towards practical automated trust negotiation. In Proceedings of the Third International Workshop on Policies for Distributed Systems and Networks (Policy 2002). IEEE Computer Society Press, Piscataway, New Jersey. 92–103.
- WINSBOROUGH, W. H., SEAMONS, K. E., AND JONES, V. E. 2000. Automated trust negotiation. In DARPA Information Survivability Conference and Exposition. Vol. I. IEEE Press, Piscataway, New Jersey. 88–102.
- WINSLETT, M., YU, T., SEAMONS, K. E., HESS, A., JACOBSON, J., JARVIS, R., SMITH, B., AND YU, L. 2002. Negotiating trust on the web. IEEE Internet Computing 6, 6 (Nov./Dec.), 30–37.
- YU, T. AND WINSLETT, M. 2003a. Policy migration for sensitive credentials in trust negotiation. In Proceedings of the ACM Workshop on Privacy in the Electronic Society. ACM Press, New York. 9–20.
- YU, T. AND WINSLETT, M. 2003b. Unified scheme for resource protection in automated trust negotiation. In Proceedings of IEEE Symposium on Security and Privacy. IEEE Computer Society Press, Piscataway, New Jersey. 110–122.
- YU, T., MA, X., AND WINSLETT, M. 2000. Prunes: An efficient and complete strategy for trust negotiation over the internet. In Proceedings of the 7th ACM Conference on Computer and Communications Security (CCS-7). ACM Press, 210–219.
- YU, T., WINSLETT, M., AND SEAMONS, K. E. 2003. Supporting structured credentials and sensitive policies through interoperable strategies for automated trust negotiation. ACM Transactions on Information and System Security (TISSEC) 6, 1 (Feb.), 1–42.
- Received May 2004; revised July 2005; accepted April 2006

**ACM Transactions on Information and System Security, Vol. 9, No. 3, August 2006.**