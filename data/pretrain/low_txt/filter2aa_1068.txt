# Security Research on Windows Kernel
## Draft v.1.1

### About the Author
- **Name:** Peter Hlavaty (@zer0mem)
- **Position:** Senior Security Researcher at KeenLab, Tencent
- **Achievements:** MSRC100, pwn2own
- **Focus Areas:** Kernel, Hypervisor, Mitigations
- **Additional Interests:** Occasionally speaks at conferences and is a wushu player.

## Sandbox
A sandbox restricts the resources available to a target process, including:
- System calls
- File system access
- Registry access
- Inter-process communication
- Different integrity levels (Untrusted, App Container, Low, Medium, etc.)

### Attack Surface in Sandboxes
- **IPC (Inter-Process Communication):** Broker vs. Worker
- **Windows Kernel Syscalls:**
- **RPC (Remote Procedure Call):** Inter-process communication
- **Third-party Elements:** Windows Defender (and other antivirus software)

### Windows Kernel Attack Surface
- **w32k (Win32k.sys)**
- **ntoskrnl.exe**
- **tm, afd, and other components**

### w32k Hardening (4 Years Ago)
- **Fonts:**
  - TTF emulation in the kernel
  - Loading custom fonts
- **GDI:**
  - Six or more different kernel objects
  - A significant source of UAF (Use-After-Free) and overflow vulnerabilities
- **EMF (Enhanced Metafile):** Remote exploitation
- **User Mode Callbacks:**

### Current w32k Hardening
- **Fonts:**
  - TTF emulation in user mode
  - Sandboxed low-privilege processes for custom fonts
- **GDI:**
  - Restricted or no GDI mode
  - Six or more different kernel objects
  - A significant source of UAF and overflow vulnerabilities
- **EMF (Enhanced Metafile):** Disabled by default
- **User Mode Callbacks:**
  - Restricted or no mode

### w32k Exploitation Hardening
- **Restricted Resources for Exploitation:**
  - No resources if the `DisableW32kSystemCalls` flag is set
- **Type Isolation:**
  - Tactical mitigations, e.g., `tagWnd`
- **Bugs:**
  - Refactored w32k (win32k -> win32kfull + win32kbase)
  - This refactoring introduced new bugs but highlighted the importance of cleaning up legacy code
- **Community Support:**
  - Security researchers (MSRC100, insider bounties, etc.)
  - Internal fuzzing

### w32k Still Alive
- **DirectX**
- **w32k User Callbacks:**
- **Small Parts of GDI and DComposition:**
- **New Syscalls:**
  - Continuously added in new builds
- **GUI Applications:**
  - w32k is essential for GUI applications
  - Acts as a bridge from the target to parts of the application with w32k access

### ntos Attack Surface
- **TM (Transaction Manager) + CLFS (Common Log File System):**
  - Lockdown for sandboxed processes
  - Heavy parsing in kernel mode
  - Simplistic logic without CLFS backup
  - Connections: Manager, Transaction, Enlistment, Resource
- **LPC, Pipe, Sockets, Registry Hives:**
  - Significant amount of logic
  - Part of SDL (Security Development Lifecycle) for a long time
- **Memory Management, Synchronization:**
  - Many syscalls
  - Logic that can be altered is often too simplistic

### RPC in User Processes
- **ALPC Port:**
  - Every process must have an open ALPC port, at least to `csrss.exe`
  - Little-researched area
  - NtAlpc* syscalls are undocumented
  - COM uses ALPC in the background
  - C++ inter-process interface

### Native Code Execution
- **Mitigations:**
  - Windows has invested heavily in breaking attack surfaces and techniques
  - Guards: (k)CFG, HVCI, VBS, ACG, CIG, Jit OoP, etc.
  - w32k and CLFS lockdown and filtering
  - ACL-based filtering in `ntoskrnl.exe`

### Type Isolation
- **Exploit Primitives:**
  - Structures with control and data parts
  - Control: pointers, sizes
  - Data: controlled by the user
  - Mitigation: Separate control and data parts to different places
  - Crucial: Data should not reach the control part (page guards, different pools)

### Tactical Mitigations
- **Methodology:**
  - Misuse objects for arbitrary read/write
  - Start with limited read/write, then boost to full read/write
  - Pivot-worker schema
  - Break particular techniques one by one
  - Introduce safe checks (buffer ranges, pool limitations)

### Memory Protections
- **Theory:**
  - No W^X memory
  - No arbitrary modules
  - No @rip hijack
  - No return address hijack
  - No exploitable overflows
  - No/limited read/write primitives
- **Practice:**
  - Not fully implemented, many bypasses due to design limitations
  - Shift towards security, especially in memory corruptions

### Virtualization and Sandboxing
- **HyperV Technology:**
  - VM machine
  - Well-designed security
  - Small, heavily audited attack surface
  - Mitigations applied
  - WDAG (Windows Defender Application Guard) using HyperV technologies
- **vmwp Overview:**
  - User-mode process on the host side responsible for running the guest partition
  - Minimal legacy, IO devices, and interaction
  - Generation2 is the way forward, though Generation1 is still the default
  - Clean design with all mitigations and sandboxing

### Successful Attack Path
1. Get a bug in a remote target (e.g., browser)
2. Achieve RCE or COOP-style control
3. Escape the sandbox
4. Get a bug in the kernel
5. Bypass process restrictions or get RCE (COOP-style is acceptable)
6. Get a bug in virtualization
7. Bypass mitigations in the virtualization target

### How to Approach
- **Understanding:**
  - Attack surface
  - Windows landscape
  - Target internals
- **Technologies:**
  - IntelPT, QemuPT
  - WinDbg, TTD
  - Qemu, KVM
  - Hypervisors (tooling and automation)
  - BochsPwn reloaded, DigTool
- **Tools:**
  - syzkaller, (k)AFL
  - Custom patches, tools, and plugins

### Fuzzing vs. Eye-balling
- **Fuzzing:**
  - Easy to make a dummy fuzzer
  - Can overengineer and kill randomness
- **Eye-balling:**
  - Can miss trivial bugs
  - Hard to comprehend complex logic
- **Combination:**
  - Make random-enough fuzzing
  - Inject knowledge from code auditing into the fuzzer
  - Use fuzzer to check complex logic and automate it

### RCE Targets
- **Not Just Browsers:**
  - Microsoft Office
  - SMB (v1, v2, v3)
  - Modern apps (Skype, Slack, games, etc.)

### Other Cool Targets in Windows Kernel
- **Sockets**
- **UoW (Ubuntu on Windows ~ WSL)**
- **HyperV (user, kernel, hypervisor)**
- **VhdParser**
- **RDP**
- **.sys files, UEFI, etc.**

This document provides a comprehensive overview of the current state of security research on the Windows kernel, focusing on sandboxes, attack surfaces, and various mitigation techniques.