### Optimized Text

**Parameter Notation:**
- "h" denotes hours, "m" denotes minutes, and "s" denotes seconds.

**Introduction to 5Gen Framework:**
We have developed a tool, 5Gen, that translates programs written in the Cryptol language into matrix branching programs, a representation commonly used in mmap-based constructions. 5Gen includes a library of mmaps accessible through a common API. Currently, we support the GGHLite and CLT mmaps, but our library is designed to be easily extended with new candidates. By leveraging the capabilities of our compiler and mmap libraries, we have implemented applications from two computing paradigms based on mmaps: multi-input functional encryption (MIFE) and obfuscation.

**Performance Evaluation:**
We evaluated the efficiency of our MIFE and obfuscation applications using various parameter settings for both the GGHLite and CLT mmaps. Although the results indicate that the current efficiency is not practical, they provide a useful benchmark for the state-of-the-art in these techniques. The construction of multilinear maps is an active and rapidly evolving area of research. Our 5Gen framework offers an easy-to-use testbed for evaluating new mmap candidates across various applications and is open-source, available at [https://github.com/5GenCrypto](https://github.com/5GenCrypto).

**Acknowledgments:**
The work of Dan Boneh and Kevin Lewi was supported by NSF, DARPA, a grant from ONR, and the Simons Foundation. The work of Daniel Apon, Jonathan Katz, and Alex J. Malozemoﬀ was partially supported by NSF awards #1111599 and #1223623. Alex J. Malozemoﬀ's work was also conducted in part with government support through the National Defense Science and Engineering Graduate (NDSEG) Fellowship, 32 CFG 168a, awarded by DoD, Air Force Office of Scientific Research. The work of Brent Carmer and Mariana Raykova was supported by NSF grants CNS-1633282, 1562888, 1565208, and DARPA SafeWare W911NF-15-C-0236. This material is based upon work supported by the ARO and DARPA under Contract No. W911NF-15-C-0227. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the ARO and DARPA.

**References:**
- **[AB15]** Benny Applebaum and Zvika Brakerski. Obfuscating circuits via composite-order graded encoding. In TCC, 2015.
- **[ABD16]** Martin Albrecht, Shi Bai, and Léo Ducas. A subfield lattice attack on overstretched NTRU assumptions: Cryptanalysis of some FHE and graded encoding schemes. 2016.
- **[ACLL15]** Martin R. Albrecht, Catalin Cocis, Fabien Laguillaumie, and Adeline Langlois. Implementing candidate graded encoding schemes from ideal lattices. In Asiacrypt, 2015.
- **[AGIS14]** Prabhanjan Vijendra Ananth, Divya Gupta, Yuval Ishai, and Amit Sahai. Optimizing obfuscation: Avoiding Barrington’s theorem. In CCS, 2014.
- **[AHKM14]** Daniel Apon, Yan Huang, Jonathan Katz, and Alex J. Malozemoﬀ. Implementing cryptographic program obfuscation. Cryptology ePrint Archive, Report 2014/779, 2014.
- **[APS15]** Martin R. Albrecht, Rachel Player, and Sam Scott. On the concrete hardness of learning with errors. Cryptology ePrint Archive, Report 2015/046, 2015. [http://eprint.iacr.org/2015/046](http://eprint.iacr.org/2015/046).
- **[BGI+01]** Boaz Barak, Oded Goldreich, Russell Impagliazzo, Steven Rudich, Amit Sahai, Salil P. Vadhan, and Ke Yang. On the (im)possibility of obfuscating programs. In Crypto, 2001.
- **[BGK+14]** Boaz Barak, Sanjam Garg, Yael Tauman Kalai, Omer Paneth, and Amit Sahai. Protecting obfuscation against algebraic attacks. In Eurocrypt, 2014.
- **[BHLN15]** Daniel J. Bernstein, Andreas Hülsmann, Tanja Lange, and Ruben Niederhagen. Bad directions in cryptographic hash functions. In ACISP, 2015.
- **[BLR+15]** Dan Boneh, Kevin Lewi, Mariana Raykova, Amit Sahai, Mark Zhandry, and Joe Zimmerman. Semantically secure order-revealing encryption: Multi-input functional encryption without obfuscation. In Eurocrypt, 2015.
- **[BMSZ15]** Saikrishna Badrinarayanan, Eric Miles, Amit Sahai, and Mark Zhandry. Post-zeroizing obfuscation: The case of evasive circuits. Cryptology ePrint Archive, Report 2015/167, 2015.
- **[BR14]** Zvika Brakerski and Guy N. Rothblum. Virtual black-box obfuscation for all circuits via generic graded encoding. In TCC, 2014.
- **[BS02]** Dan Boneh and Alice Silverberg. Applications of multilinear forms to cryptography. Cryptology ePrint Archive, Report 2002/080, 2002.
- **[BSW11]** Dan Boneh, Amit Sahai, and Brent Waters. Functional encryption: Definitions and challenges. In TCC, 2011.
- **[BWZ14a]** Dan Boneh, Brent Waters, and Mark Zhandry. Low overhead broadcast encryption from multilinear maps. Cryptology ePrint Archive, Report 2014/195, 2014.
- **[BWZ14b]** Dan Boneh, David J. Wu, and Joe Zimmerman. Immunizing multilinear maps against zeroizing attacks. Cryptology ePrint Archive, Report 2014/930, 2014.
- **[CGH+15]** Jean-Sébastien Coron, Craig Gentry, Shai Halevi, Tancrède Lepoint, Hemanta K. Maji, Eric Miles, Mariana Raykova, Amit Sahai, and Mehdi Tibouchi. Zeroizing without low-level zeroes: New MMAP attacks and their limitations. In Crypto, 2015.
- **[CHL+15]** Jung Hee Cheon, Kyoohyung Han, Changmin Lee, Hansol Ryu, and Damien Stehlé. Cryptanalysis of the multilinear map over the integers. In Eurocrypt, 2015.
- **[CJL16]** Jung Hee Cheon, Jinhyuck Jeong, and Changmin Lee. An algorithm for NTRU problems and cryptanalysis of the GGH multilinear map without an encoding of zero. Cryptology ePrint Archive, Report 2016/139, 2016.
- **[CLT13]** Jean-Sébastien Coron, Tancrède Lepoint, and Mehdi Tibouchi. Practical multilinear maps over the integers. In Crypto, 2013.
- **[CLT15]** Jean-Sébastien Coron, Tancrède Lepoint, and Mehdi Tibouchi. New multilinear maps over the integers. In Crypto, 2015.
- **[Cry]** Cryptol. [http://cryptol.net/](http://cryptol.net/). Accessed: 2016-05-02.
- **[DGG+16]** Nico Döttling, Sanjam Garg, Divya Gupta, Peihan Miao, and Pratyay Mukherjee. Obfuscation from low noise multilinear maps. Cryptology ePrint Archive, Report 2016/599, 2016.
- **[GGG+14]** Shaﬁ Goldwasser, S. Dov Gordon, Vipul Goyal, Abhishek Jain, Jonathan Katz, Feng-Hao Liu, Amit Sahai, Elaine Shi, and Hong-Sheng Zhou. Multi-input functional encryption. In Eurocrypt, 2014.
- **[GGH13a]** Sanjam Garg, Craig Gentry, and Shai Halevi. Candidate multilinear maps from ideal lattices. In Eurocrypt, 2013.
- **[GGH+13b]** Sanjam Garg, Craig Gentry, Shai Halevi, Mariana Raykova, Amit Sahai, and Brent Waters. Candidate indistinguishability obfuscation and functional encryption for all circuits. In FOCS, 2013.
- **[GGH15]** Craig Gentry, Sergey Gorbunov, and Shai Halevi. Graph-induced multilinear maps from lattices. In TCC, 2015.
- **[GGHZ14]** Sanjam Garg, Craig Gentry, Shai Halevi, and Mark Zhandry. Fully secure attribute-based encryption from multilinear maps. Cryptology ePrint Archive, Report 2014/622, 2014.
- **[GGSW13]** Sanjam Garg, Craig Gentry, Amit Sahai, and Brent Waters. Witness encryption and its applications. In STOC, 2013.
- **[GLSW15]** Craig Gentry, Allison Bishop Lewko, Amit Sahai, and Brent Waters. Indistinguishability obfuscation from the multilinear subgroup elimination assumption. In FOCS, 2015.
- **[GLW14]** Craig Gentry, Allison B. Lewko, and Brent Waters. Witness encryption from instance-independent assumptions. In Crypto, 2014.
- **[GMS16]** Sanjam Garg, Pratyay Mukherjee, and Akshayaram Srinivasan. Obfuscation without the vulnerabilities of multilinear maps. Cryptology ePrint Archive, Report 2016/390, 2016.
- **[HJ16]** Yupu Hu and Huiwen Jia. Cryptanalysis of GGH map. In Eurocrypt, 2016.
- **[Lep14]** Tancrède Lepoint. Design and Implementation of Lattice-based Cryptography. PhD thesis, Université du Luxembourg, May 2014.
- **[Lin16]** Huijia Lin. Indistinguishability obfuscation from constant-degree graded encoding schemes. In Eurocrypt, 2016.
- **[LPST16]** Huijia Lin, Rafael Pass, Karn Seth, and Sidharth Telang. Indistinguishability obfuscation with non-trivial efficiency. In PKC, 2016.
- **[LS14]** Hyung Tae Lee and Jae Hong Seo. Security analysis of multilinear maps over the integers. In Crypto, 2014.
- **[LSS14]** Adeline Langlois, Damien Stehlé, and Ron Steinfeld. GGHLite: More efficient multilinear maps from ideal lattices. In Eurocrypt, 2014.
- **[LW16]** Kevin Lewi and David J. Wu. Order-revealing encryption: New constructions, applications, and lower bounds. In CCS, 2016.
- **[MSZ16a]** Eric Miles, Amit Sahai, and Mark Zhandry. Annihilation attacks for multilinear maps: Cryptanalysis of indistinguishability obfuscation over GGH13. In Crypto, 2016.
- **[MSZ16b]** Eric Miles, Amit Sahai, and Mark Zhandry. Secure obfuscation in a weak multilinear map model: A simple construction secure against all known attacks. Cryptology ePrint Archive, Report 2016/588, 2016.
- **[PST13]** Rafael Pass, Karn Seth, and Sidharth Telang. Indistinguishability obfuscation from semantically-secure multi-linear encodings. Cryptology ePrint Archive, Report 2013/781, 2013.
- **[SZ14]** Amit Sahai and Mark Zhandry. Obfuscating low-rank matrix branching programs. Cryptology ePrint Archive, Report 2014/773, 2014.
- **[Zim15]** Joe Zimmerman. How to obfuscate programs directly. In Eurocrypt, 2015.

**Parameter Selection:**

In this section, we discuss the parameter selection for both the GGHLite and CLT mmaps considered in this work. Throughout, we use \(\lambda\) as the security parameter and \(\kappa\) as the multilinearity parameter.

**A.1 GGHLite:**
We now discuss the parameter selection used for the GGHLite mmap discussed in §5.1. We detail the various parameters and, where applicable, the values we set them to and the rationale behind these choices. Many of these parameter settings are derived from the work of Albrecht et al. [ACLL15], which we document explicitly here.

- **n**: The dimension of the lattice. We set \(n\) by iteratively producing the below parameters and then checking whether they satisfy the security parameter according to [APS15], increasing \(n\) by a power of two each iteration (cf. [ACLL15, §4.4]).
- **\(\sigma\)**: The Gaussian parameter. We set \(\sigma = \frac{4\pi n p_e \ln(8n)}{\pi}\) according to [LSS14, Eq. (4)].
- **\(\ell_g\)**: The upper bound on the size of \(\|g^{-1}\|\). We set \(\ell_g = 4\sqrt{\frac{e\pi n}{\sigma}}\) according to [LSS14, Eq. (4)].
- **\(\ell\)**: The number of bits to extract from the level-\(\kappa\) encoding. We set \(\ell = \lceil \log_2(8\sigma n) \rceil\) according to the discussion in [ACLL15, §4.2].
- **\(\sigma_0\)**: The Gaussian parameter for encoding values. We set \(\sigma_0 = \max\left(\frac{2n^{1.5} \sigma p_e \log(8n)/\pi}{\sqrt{7n^{2.5} \ln^{1.5}(n)\sigma}}\right)\) according to the discussion in [LSS14, §6].
- **q**: The modulus. Selected according to [ACLL15, §4.2, pg. 10].

**A.2 CLT:**
We now discuss the parameter selection used for the CLT mmap discussed in §5.2. As above, we detail the various parameters and, where applicable, the values we set them to and the rationale behind these choices.

- **\(\rho\)**: The bitlength of the randomness used for encodings. We set \(\rho = \lambda\) to avoid the attack of Lee and Seo [LS14].
- **\(\alpha\)**: The bitlength of the message slots \(g_i\). We set \(\alpha = \lambda\) as suggested by [CLT13].
- **\(\beta\)**: The bitlength of the random \(h_i\) values. We set \(\beta = \lambda\) to avoid a GCD attack similar to [CLT13, §5.2].
- **\(\rho_f\)**: The maximum bitlength of the randomness in a level-\(\kappa\) encoding. For the specific use-case of obfuscation, we can set \(\rho_f = \kappa(\rho + \alpha)\).
- **n**: The number of secret primes \(p_i\). In Appendix B, we show how to adapt the lattice attack on encodings by Coron et al. [CLT13, §5.1] to the “general” setting where no 0-level encodings of zero are available, and thus we need to set \(n = \omega(\eta \log \lambda)\). However, rather than setting \(n\) to match some asymptotic, such as \(\eta\lambda\), we consider the concrete costs of the various attacks to give an accurate estimate of \(n\). We use the approach detailed by Tancrède Lepoint [Lep14, §7.2] using the more conservative estimate for the running time of the LLL algorithm [Lep14, §7.2.5].
- **\(\eta\)**: The bitlength of the secret primes \(p_i\). We set \(\eta = \rho_f + \alpha + \beta + \log_2(n) + 9\) according to [CLT13, Lemma 8].
- **\(\nu\)**: The bitlength of the image of the mmap. We set \(\nu = \eta - \beta - \rho_f - \lambda - 3\) according to [CLT13, Lemma 8].

Note that \(n\), \(\eta\), and \(\nu\) depend on each other. Thus, to compute these values, we simply loop until we reach a fixed point, using the requirement that \(\beta + \alpha + \rho_f + \log_2(n) \leq \eta - 9\) and \(\nu \geq \alpha + 6\), as detailed in [CLT13, Lemma 8].

**B. Lattice Attack on Encodings:**
In this section, we describe how to adapt the lattice attack on encodings by Coron et al. [CLT13, §5.1] to our particular use of the CLT mmap. Specifically, we consider the case where an attacker has access to \(t > n\) level-1 encodings. Without loss of generality, we assume a single \(z\).

Let \(x_0 = \prod_{i=1}^n p_i\). For \(j \in [t]\), consider the level-1 encoding \(x_j/z \mod x_0\) of the secret message \(m_j = (m_{ij})_i\), where \(x_j \in \mathbb{Z}_{x_0}\) is such that \(x_j \mod p_i = r_{ij} g_i + m_{ij}\). Note that \(x_j \mod p_i\) is of size \(\rho + \alpha\) bits and can be considered as a level-0 encoding of \(m_j\). Let \(x_0 = (x_0)_j\) and \(x = (x_j)_j\).

By construction, we have:
\[ u \cdot x_0 \equiv 0 \pmod{x_0} \]
\[ \Leftrightarrow z(u \cdot x_0) \equiv 0 \pmod{x_0} \]
\[ \Leftrightarrow u \cdot x \equiv 0 \pmod{x_0}, \]
where the last equivalence comes from the fact that \(z\) and \(x_0\) are coprime with high probability. We can thus apply the attack detailed by Coron et al. [CLT13, §5.1] on vector \(x_0\) to directly recover the vectors \(s_i = (s_{ij})_j = (r_{ij} g_i + m_{ij})_j\).

Given these vectors, we can recover \(p_i\) for \(i \in [n]\) with high probability as follows [CHL+15]. Note that:
\[ x_0 s_{i1} \equiv x_0 s_{i2} \pmod{p_i} \]
\[ \Leftrightarrow x_0 s_{i1} - x_0 s_{i2} \equiv 0 \pmod{p_i}. \]
Thus, we can compute \(\gcd(x_0 s_{i1} - x_0 s_{i2}, x_0)\) to learn \(p_i\).

**Changelog:**
- **Version 2.1 (November 15, 2016):**
  - Removed erroneous reference to 128-core machine in Table 8.3.
- **Version 2.0 (October 26, 2016):**
  - Updated tables and graphs.
  - Added appendices.
  - Edits throughout.
- **Version 1.0 (June 14, 2016):**
  - First release.