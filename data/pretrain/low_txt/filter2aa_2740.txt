# BSD Security Fundamentals

**Author:** Sean Lewis  
**Contact:** PI:EMAIL  
**Website:** [http://www.subterrain.net](http://www.subterrain.net)

## Scope and Scale
- **Focus:** FreeBSD, which is known for its robust enterprise hardware support and is the most mainstream of the open-source BSD distributions.
- **Content Overview:** This document provides a security refresher and introduces some new and interesting aspects of BSD security.
- **Emphasis:** The primary focus is on host-based security, one of the foundational layers in a defense-in-depth strategy, complemented by network-level security.

## BSD in the Enterprise Market
- **Enterprise Adoption:** BSD and systems with BSD frameworks are increasingly being deployed in enterprise environments and by end-users.
- **Notable Implementations:**
  - **Nokia Firewalls:** Run FireWall-1 on IPSO (based on FreeBSD 3.2).
  - **Juniper's Internet Backbone Routers:** Use code from FreeBSD for high-growth, high-capacity networks.
  - **Other Commercial Users:** Yahoo! and LinkExchange.

## The Basics
- **Backup:** Always make backups before modifying an existing system, especially in production environments.
- **Unnecessary Services:** Review and disable unnecessary services in `/etc/inetd.conf` and `rc.conf`. For example, disable sendmail, SMTP, and submission ports (25/587).
- **OS Version:** Work with the latest version of the OS. Tracking the STABLE branch is recommended.

## Encrypted Communications
- **Disable Telnet:** Disable telnet (default in recent FreeBSD releases) and enable SSH. OpenSSH is included in the FreeBSD base system.
- **Upgrade OpenSSH:** Upgrade to OpenSSH 3.4p1 and use SSH version 2 with privilege separation.
- **SFTP Subsystem:** Enable the SFTP subsystem built into the SSHv2 protocol instead of using a standard FTP daemon.
- **Public Key Authentication:** Set up public key authentication with SSH (using DSA keys) to prevent password transmission, even if encrypted.

## File System Lockdown
- **Partitioning:** Partition the file system as much as possible. At a minimum, separate `/`, `/usr`, `/var`, and `/tmp`. Consider also separating `/home` and `/usr/local`.
- **Mount Options:** Mount non-`/usr` or non-`/` filesystems (especially `/tmp`) with the `nosuid` argument.
- **Remove SUID Bits:** Search for and remove SUID bits from unused binaries, such as `uucp` (setgid).
- **File Flags:** Use `chflags` to set flags like `sappnd` on log files and `schg` on system binaries.
- **Securelevel Awareness:** Explain different securelevel-aware file variables, such as `sappnd` and `schg`.

## Kernel Securelevels
- **Overview:** Kernel securelevels allow for dynamic security level increases.
- **Levels:**
  - **-1 and 0:** Insecure mode.
  - **1:** `sappnd` and `schg` flags cannot be disabled; LKMs may not be loaded or unloaded.
  - **2:** Level 1 + no writing to disks except for `mount(2)`, and time changes clamped to Â±1 second.
  - **3:** Level 2 + IPFW rules cannot be modified.
- **Best Practices:** Apply the `schg` flag to critical directories like `/`, `/bin`, `/usr/bin`, `/sbin`, and `/usr/sbin` for maximum effectiveness.

## Sysctl and rc.conf Variables
- **Blackhole Configuration:**
  - `net.inet.tcp.blackhole=2` and `net.inet.udp.blackhole=1`: Do not generate RSTs on connection attempts to ports with no socket listening (TCP) and do not generate ICMP port unreachable messages (UDP). This breaks `traceroute`.
- **Kernel Securelevel:**
  - `kern_securelevel_enable="YES"` and `kern_securelevel="X"`: Enable kernel securelevel.
- **ICMP Redirects:**
  - `icmp_drop_redirect="YES"`: Drop ICMP redirect packets.
- **SYN+FIN Packets:**
  - `tcp_drop_synfin="YES"`: Drop packets with both SYN and FIN bits set. This breaks RFC but helps against frequent scans.
- **Clear /tmp:**
  - `clear_tmp_enable="YES"`: Wipe `/tmp` on boot.

## Secure Your Services
- **Chroot Environments:** Start potentially dangerous programs like `bind` in a chroot environment. Many popular services now support `chroot()` jail functionality (e.g., `named`, `sshd`, `httpd`).
- **Logging Connections:**
  - `log_in_vain="YES"` in `rc.conf`: Show connections to non-listening TCP/UDP ports, useful with robust packet filtering rules.
- **Packet Filtering:** Use packet filtering software like IPFW or ipfilter to restrict access to services, even if the machine is behind a corporate firewall (defense in depth).

## Serving Files with ftpd
- **Security Best Practices:**
  - **User Restrictions:** Add individual users to `/etc/ftpchroot` to restrict them to their `$HOME`.
  - **Extended Logging:** Start `ftpd` with `-l -l` to enable extended logging.
  - **Anonymous Access:** If running an anonymous archive, use `ftpd -A` (only allow anonymous connections) and `-r` (read-only mode for the server).

## Logging
- **Syslogd Configuration:**
  - Start `syslogd` with the `-ss` flags to prevent the daemon from opening 514/udp.
  - Centralize syslog to a central server in addition to local logging: `*.* @remotehost.org`.
- **Log Directories:**
  - Add `/var/log/ftpd` for `ftpd.*` logs.
  - Add `/var/log/security` for `security.*` logs. IPFW logs on the security facility, allowing for parsing via `ipfw add deny log..` commands.

## Nifty Kernel Tricks
- **Trojan Detection:**
  - **TrojanProof.org Patch:** Detects trojans based on MD5 variations of executed files. Works well with Tripwire/AIDE.
- **Cerberus:**
  - Real-time interception and logging of potentially dangerous system calls (e.g., `execve()`, `ptrace()`, `setuid()`). Configurable via `sysctl` commands.
- **Disable BPF:**
  - Uncomment `pseudo-device bpf [n]` in your kernel to prevent attackers from sniffing traffic.

## Keeping People Out
- **TCP Wrappers:**
  - Use `/etc/hosts.allow` to allow/deny access to certain TCP services. Useful for FTP, SSH, and other non-public services.
- **SSH Configuration:**
  - Use `AllowUsers` and `AllowGroups` options to restrict SSH usage to specific users and groups. Combine this with TCP wrapper usage and privilege separation.
- **Restricted Shells:**
  - Assign `/sbin/nologin` shell to users who only require FTP access to prevent them from accessing a real shell.

## Checking Your System
- **Port Scanning:**
  - Use `/usr/ports/security/nmap` to scan for strange services.
- **Web Server Auditing:**
  - Use `/usr/ports/security/whisker` to audit your web server for potential vulnerabilities.
- **File Integrity:**
  - Use `/usr/ports/security/tripwire-1.31` for academic source release of Tripwire, ensuring file integrity.
- **Network Intrusion Detection:**
  - Use `/usr/ports/security/snort` for lightweight NIDS implementation. Visit [http://www.snort.org](http://www.snort.org) for more information.

## Other Tips and Tricks
- **Time Synchronization:**
  - Use `ntpdate` to synchronize your clock with a time server (e.g., `ntp.nasa.gov`). Schedule it in `crontab` for regular updates.
- **TTY Security:**
  - Change the `secure` flag to `insecure` in `/etc/ttys` for each local TTY to prevent direct root login. Always log in through a user account and then `su` to root.
- **Sudo:**
  - Enable `sudo` to restrict the root password. Grant certain users root privileges for specific commands.
- **TTY Monitoring:**
  - Enable `pseudo-device snp 4` and use the `watch` command to non-interactively attach to a user's TTY.

## Links to Related Material
- **Presentation:**
  - [http://www.subterrain.net/presentations/](http://www.subterrain.net/presentations/)
- **FreeBSD Security Advisories:**
  - [http://www.freebsd.org/security/](http://www.freebsd.org/security/)
- **Free FreeBSD Stuff:**
  - Courtesy of [FREEBSDMALL.COM](http://www.freebsdmall.com). Thanks, Murray!