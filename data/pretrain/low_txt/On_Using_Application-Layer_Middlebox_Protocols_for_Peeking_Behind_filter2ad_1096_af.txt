### Header Missing Despite Host Identified as a Proxy

Our analysis revealed that 37% of the connections were definitely vulnerable. There was no significant difference in the number of potentially vulnerable SOCKS and HTTP proxies. However, open SOCKS proxies were more likely to be definitely vulnerable compared to HTTP proxies.

In summary, 40% of all open proxies across any protocol claimed to establish a successful connection to the localhost on any tested port, while 23% also returned protocol-conforming responses for our probes. We now delve into the services hosted on these definitely vulnerable proxies.

### Services Hosted on Vulnerable Proxy Systems

To better understand the services behind definitely vulnerable hosts, we parsed and categorized the responses received from these hosts. The summary of our categorization is presented in Table X. Note that the absolute numbers differ from Table VI, as it does not differentiate between SOCKS versions.

The most widely exposed service was SSH, with over half of the vulnerable proxies responding with a valid SSH banner. The most commonly seen implementations were various versions of OpenSSH on different operating systems, including over a hundred hosts with Mikrotik’s SSH implementation (ROSSSH). The second most common service was HTTP, found on 36% of vulnerable proxies, with the most frequently exposed service being the router configuration interface of Mikrotik routers. 

When comparing these results to those from SSH, it is interesting to note that over 1,200 SSH banners were from Ubuntu-based devices, followed by over 700 with a generic banner and approximately 300 with the Debian banner. This indicates that it is not just Mikrotik routers exposing these services. Among other HTTP-exposing services, some default sites of common web servers or frameworks were observed. SMTP and FTP were less common, with only 432 SMTP services and 214 FTP servers exposed. Telnet was the least seen service, with only "CCProxy Telnet" on 80 hosts, so it is omitted from the table.

### CONNECT-Supporting HTTP Proxies

We identified a total of 8,909 CONNECT-supporting HTTP proxies, of which 74% signaled with a status “200” that they accepted connections to the localhost, making them potentially vulnerable. Additionally, 40% of these CONNECT-supporting proxies delivered an expected payload, marking them as definitely vulnerable, which adds up to 21% of all open HTTP proxies being vulnerable.

#### SOCKS Proxies

- **SOCKS4 Proxies**: From approximately 1,500 (5%) open SOCKS4 proxies, 42% claimed to allow connections to the localhost, and 32% were definitely vulnerable.
- **SOCKS5 Proxies**: Out of approximately 1,400 SOCKS5 proxies, over half (55%) allowed such connections, and 32% were definitely vulnerable.

### Complementary Crawling for Proxies

During our two-week crawling period (end of January until the beginning of February, 2019), we collected a total of 96,863 (host, port) combinations from 56,861 different IP addresses using 20,438 different ports. Only 16% (~16,000) of the proxies were open, hosted on over 5,500 different ports. The majority of the proxies were HTTP proxies (88%), with 14% being SOCKS proxies (10% SOCKS4, 3% SOCKS5, and 677 proxies supporting both versions). In total, 67% (~11,000) of all functioning proxies supported HTTP CONNECT or SOCKS, making them candidates for our attacks.

As shown in Table XI, only 9% of open SOCKS proxies were hosted on the standard port 1080. Out of all open SOCKS proxies, 12% were hosted on port 4145, which is often used for malicious activities [68]. Only a third of all open proxies found by crawling were behind any of the standard proxy ports used in our Internet-wide scans. 47% of all open proxies indicated that they could form a connection to the localhost (i.e., were potentially vulnerable). Out of these, 42% delivered an expected payload (i.e., were definitely vulnerable), amounting to 19% (~3,000) of all open proxies, compared to 23% from our Internet scans. 65% of these vulnerable hosts exposed Mikrotik’s configuration interface, while SSH was exposed less often (as seen in Table X).

These vulnerable proxies were found in 122 countries and ~1,100 ASes, with the most common locations being China (14% of the proxies), followed by Russia, Indonesia, India, and Brazil (each around 7%).

### Case Study: Large European ISP

During our scans, we discovered over 200,000 inadvertently open proxies supporting CONNECT proxying but returning a 400 error ("Invalid header received from client") for our absolute-URI requests. All of these systems were located in a single autonomous system of a large European ISP, spanning over 152 different subnets in a single country. Further investigations revealed that the error occurred when the mandatory "Host" header [22] was sent to the proxy. To confirm our suspicions, we manually requested the configuration page located under config.privoxy.org on one of the systems, which succeeded and displayed a reasonably recent (version 3.0.26, released at the end of 2016) Privoxy configuration page. However, the same version of Privoxy tested in our laboratory setting did not exhibit this erroneous behavior.

Privoxy is a non-caching, filtering proxy that uses actions to modify content proxied through it. To understand why these proxies are deployed, we requested the list of actions from a single proxy, which contained a single action adding a Link-Account header with a presumably unique identifier of the device. Although the configuration was correct (as tested in our lab setup), this header was not delivered to our server. We can only speculate that either the rule is not working correctly for some unknown reason, or the ISP is using this only internally in their network. We disclosed this vulnerability to the ISP at the beginning of 2019 via email and their security contact form. As of the end of 2019, this issue appears to be fixed.

### Key Findings on Network Proxies

Our Internet-wide scans revealed that only a small percentage of services running on default proxy ports are actually proxies. Only 3% (~20,000) of all proxies are open proxies, with 23% of these definitely misconfigured and allowing unauthorized access to internal networks (i.e., an adversary can misuse them to gain access to systems behind these proxies). Up to 40% are likely misconfigured, but our probes did not target the correct ports. For identifiable proxies, Squid was the dominant implementation, with ~96% of all hosts announcing the implementation, even on non-default ports. We identified over 200,000 open, modified Squid instances in an ASN of a large European ISP. These proxies require slightly off-standard requests to function and, according to their configuration, append an extra tracking header to outgoing requests. Our two-week-long crawling with ProxyBroker found almost as many open proxies as our Internet-wide scans on several ports. These proxies were mostly found on non-standard ports and were over 20 percentage points more likely to be definitely vulnerable, suggesting they are unlikely to be open on purpose but rather are vulnerable systems.

### Related Work

#### NAT Traversal Protocols

In 2006, Hemel [32] reported on the lack of destination address filtering in several UPnP IGD implementations and described how this could be used to expose internal hosts to the Internet and proxy traffic to external hosts. In 2008, Squire [65] reported finding a small number of devices exposing their SOAP endpoints on the WAN interface, and three years later, Garcia [25] released a tool to scan for exposed SOAP endpoints and reported finding over 150,000 endpoints on the Internet. The first in-depth security analysis of UPnP was done by Moore [51] in 2013, who reported finding over 81 million SSDP-responsive devices with 17 million exposed SOAP endpoints. In 2017, McAfee reported on malware leveraging UPnP to proxy C&C connections [35]. Concurrently and independently, Akamai researchers [1], [62] analyzed malicious port mappings, reaching similar conclusions to ours. Our work differs by not only targeting a single WANIPConnection interface using brute-force search but by carefully implementing the UPnP specification to obtain all relevant interfaces and adapting our crawling based on endpoint responses. This approach allows us to cover ~21% of the hosts exposing WANPPPConnection that could have been missed by the brute-force approach. Besides reporting on malicious forwards, we extend our work to show that this feature is also used for benign purposes.

UPnP was also in the news [18], [70] when someone accessed Chromecast devices behind NAT gateways, raising awareness of the protocol and its ability to expose devices to the Internet without users noticing. Other uses of UPnP have been explored, such as DiCioccio et al. [16] leveraging software installed on end-users’ computers to complement end-host-based bandwidth measurements using router-reported data. Their results from 120,000 hosts indicated that only 35% had an UPnP-enabled router. Related to our honeypot implementation, Hakim et al. [30] introduced the concept of generating UPnP honeypots based on UPnP description files.

There is limited research on NAT-PMP or PCP. Some indications, such as the UPnP-PCP bridge defined in RFC 6970 [9] and the support for cascading NATs, suggest that PCP is more aimed at ISPs rather than home users. The only relevant study on NAT-PMP was done by Hart [31] in 2014, where he analyzed potential attack scenarios and reported finding 1.2 million exposed NAT-PMP endpoints. To our knowledge, there have been no reports on insecurities in PCP deployments.

#### Internet Proxies

Various studies on the open proxy ecosystem exist [61], [57], [69], [47]. Common to these studies is that they limit their analyses to either crawling or Internet-wide scans, without providing enough concrete numbers to fully understand the proxy ecosystem. A detailed comparison of these works to ours is summarized in Table XII.

In 2015, Scott et al. [61] analyzed how open HTTP proxies are used by examining statistics provided by management interfaces of some proxy implementations. Their work included Internet scans on several ports (3128, 8080, 8123) to locate proxy servers, but left out many details. A complementary study involving both crawling and Internet-wide scans was performed by Perino et al. [57], who leveraged existing proxy lists and ZMap scans to quantify the free proxy ecosystem and analyze its trustworthiness. Results from both studies indicate that scanning for default proxy ports is not very fruitful, as only a handful of SYN-responses are real proxies. We confirm and particularize these results in our study.

In 2018, Tsirantonakis et al. [69] showed that 38% of their observed open proxies modified the sent data, and 5% of open proxy servers could be classified as malicious. They leveraged crawling for their data collection. Mani et al. [47] also contributed to the understanding of the proxy ecosystem.