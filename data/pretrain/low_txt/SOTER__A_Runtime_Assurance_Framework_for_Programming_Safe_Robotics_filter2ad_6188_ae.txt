### Runtime Assurance (RTA) for Robotic Safety

**Introduction:**
The safety of robotic systems during runtime is a critical concern. Schierman et al. [3] explored the application of the RTA framework at different levels of the software stack in unmanned aircraft systems. In a more recent study [10], Schierman et al. proposed a Component-Based Simplex Architecture (CBSA) that integrates assume-guarantee contracts with RTA to ensure the runtime safety of component-based cyber-physical systems. In [6], the authors applied the simplex approach for sandboxing cyber-physical systems and introduced automatic reachability-based methods for inferring switching conditions. The concept of using an advanced controller (AC) under normal conditions and switching to an optimal safe controller (SC) at the boundaries has been employed in [49] for real-world quadrotor operations. In [50], the authors used a switching architecture [51] to alternate between a nominal safety model and a learned performance model to synthesize policies for a quadrotor to follow a trajectory. Recently, ModelPlex [52] combined offline verification of CPS models with runtime validation to build correct-by-construction runtime monitors, providing correctness guarantees for CPS executions at runtime.

**Challenges and Prior Work:**
Most prior applications of RTA do not provide high-level programming language support for constructing provably-safe RTA systems in a compositional manner, while also considering timing and communication behavior. These works primarily use RTA as a design methodology for building reliable systems in the presence of untrusted components.

**SOTER Approach:**
To facilitate the construction of RTA systems, there is a need for a general programming framework that supports run-time assurance principles and considers implementation aspects such as timing and communication. Our approach, SOTER, provides a high-level language to:
1. Enable programmers to implement and specify complex reactive systems.
2. Leverage advances in scalable systematic testing techniques for validating the actual implementation.
3. Provide language support for runtime assurance to ensure safety in the real physical world.

We formalize a generic runtime assurance architecture and implement it in a programming framework for mobile robotic systems. We demonstrate the efficacy of the SOTER framework by building a real-world drone software stack and conducting rigorous experiments to show the safety of autonomous robots in the presence of untrusted components. Unlike other RTA frameworks, SOTER allows the programmer to specify conditions for transferring control back to the AC, maximizing the use of the AC during a mission.

### Conclusion and Future Directions

In this paper, we presented SOTER, a new runtime assurance (RTA) framework for programming safe robotics systems. SOTER offers:
1. A programming language for modular implementation of safe robotics systems by combining each advanced controller with a safe counterpart.
2. Theoretical results showing how to safely switch between advanced and safe controllers.
3. Experimental results demonstrating SOTER on drone platforms in both simulation and hardware.

**Coordinated Switching:**
Combining multiple RTA modules with coordinated switching logic is non-trivial. Each component may have different guarantees, and our philosophy is that each component should use an RTA instance to assure its guarantees. This decomposition can help in building complex systems. For example, if one module (M1) switches from AC to SC, it may require another module (M2) to switch as well to use the guarantee provided by M2's new controller (SC). This kind of coordinated switching complicates the overall architecture but is an interesting area for future work.

**Future Work:**
We plan to extend the experimental evaluation to a broader class of robotics platforms (e.g., multi-robot systems), safety specifications (e.g., probabilistic properties), and unknown environments (e.g., dynamic obstacles). These extensions will help us make further progress towards the goal of verified intelligent autonomous systems [1].

### Acknowledgments
We sincerely thank the anonymous reviewers and our shepherd Mohamed Kaaniche for their thoughtful comments. We also thank Daniel Fremont for his valuable feedback and suggested improvements on the previous drafts of the paper. This work was supported in part by the TerraSwarm Research Center, one of six centers supported by the STARnet phase of the Focus Center Research Program (FCRP) a Semiconductor Research Corporation program sponsored by MARCO and DARPA, by the DARPA BRASS and Assured Autonomy programs, by NSF grants 1545126 (VeHICaL), 1739816, and 1837132, by Berkeley Deep Drive, and by Toyota under the iCyPhy center.

### References
[1] S. A. Seshia, D. Sadigh, and S. S. Sastry, “Towards Verified Artificial Intelligence,” ArXiv e-prints, July 2016.
[2] L. Sha, “Using simplicity to control complexity,” IEEE Software, vol. 18, no. 4, pp. 20–28, July 2001.
[3] J. D. Schierman, M. D. DeVore, N. D. Richards, N. Gandhi, J. K. Cooper, K. R. Horneman, S. Stoller, and S. Smolka, “Runtime assurance framework development for highly adaptive flight control systems,” Barron Associates, Inc. Charlottesville, Tech. Rep., 2015.
[4] D. Seto, E. Ferriera, and T. Marz, “Case study: Development of a baseline controller for automatic landing of an F-16 aircraft using linear matrix inequalities (LMIs),” Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, Tech. Rep. CMU/SEI-99-TR-020, 2000.
[5] D. Phan, J. Yang, R. Grosu, S. A. Smolka, and S. D. Stoller, “Collision avoidance for mobile robots with limited sensing and limited information about moving obstacles,” Formal Methods in System Design, vol. 51, no. 1, pp. 62–86, Aug 2017.
[6] S. Bak, K. Manamcheri, S. Mitra, and M. Caccamo, “Sandboxing controllers for cyber-physical systems,” in 2011 IEEE/ACM Second International Conference on Cyber-Physical Systems, April 2011, pp. 3–12.
[7] M. Clark, X. Koutsoukos, R. Kumar, I. Lee, G. Pappas, L. Pike, J. Porter, and O. Sokolsky, “Study on run time assurance for complex cyber-physical systems,” Air Force Research Lab, Tech. Rep. ADA585474, April 2013.
[8] S. Bak, D. K. Chivukula, O. Adekunle, M. Sun, M. Caccamo, and L. Sha, “The system-level simplex architecture for improved real-time embedded system safety,” in 2009 15th IEEE Real-Time and Embedded Technology and Applications Symposium, April 2009, pp. 99–107.
[9] B. Bohrer, Y. K. Tan, S. Mitsch, M. O. Myreen, and A. Platzer, “VeriPhy: Verified controller executables from verified cyber-physical system models,” SIGPLAN Not., vol. 53, no. 4, pp. 617–630, Jun. 2018.
[10] D. Phan, J. Yang, M. Clark, R. Grosu, J. D. Schierman, S. A. Smolka, and S. D. Stoller, “A component-based simplex architecture for high-assurance cyber-physical systems,” arXiv preprint arXiv:1704.04759, 2017.
[11] M. Quigley, K. Conley, B. P. Gerkey, J. Faust, T. Foote, J. Leibs, R. Wheeler, and A. Y. Ng, “ROS: An open-source robot operating system,” in ICRA Workshop on Open Source Software, 2009.
[12] “PX4 Autopilot,” https://pixhawk.org/, 2017.
[13] “3D Robotics,” https://3dr.com/, 2017.
[14] N. Koenig and A. Howard, “Design and use paradigms for Gazebo, an open-source multi-robot simulator,” in In IEEE/RSJ International Conference on Intelligent Robots and Systems, 2004, pp. 2149–2154.
[15] G. Brockman, V. Cheung, L. Pettersson, J. Schneider, J. Schulman, J. Tang, and W. Zaremba, “OpenAI Gym,” 2016.
[16] I. A. Şucan, M. Moll, and L. E. Kavraki, “The Open Motion Planning Library,” IEEE Robotics & Automation Magazine, 2012.
[17] L. P. Kaelbling, M. L. Littman, and A. W. Moore, “Reinforcement learning: A survey,” Journal of Artificial Intelligence Research, vol. 4, pp. 237–285, 1996.
[18] B. Dutertre and M. Sorea, “Modeling and verification of a fault-tolerant real-time startup protocol using calendar automata,” in Formal Techniques, Modelling and Analysis of Timed and Fault-Tolerant Systems, Y. Lakhnech and S. Yovine, Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2004, pp. 199–214.
[19] S. L. Herbert, M. Chen, S. Han, S. Bansal, J. F. Fisac, and C. J. Tomlin, “FaSTrack: A modular framework for fast and guaranteed safe motion planning,” in 2017 IEEE 56th Annual Conference on Decision and Control (CDC), Dec 2017, pp. 1517–1522.
[20] G. Frehse, C. Le Guernic, A. Donzé, S. Cotton, R. Ray, O. Lebeltel, R. Ripado, A. Girard, T. Dang, and O. Maler, “SpaceEx: Scalable verification of hybrid systems,” in Computer Aided Verification, G. Gopalakrishnan and S. Qadeer, Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2011, pp. 379–395.
[21] R. Alur and T. A. Henzinger, “Reactive modules,” Formal methods in system design, vol. 15, no. 1, pp. 7–48, 1999.
[22] N. A. Lynch and M. R. Tuttle, “An introduction to input/output automata,” 1988.
[23] A. Desai, S. Qadeer, and S. A. Seshia, “Programming safe robotics systems: Challenges and advances,” in Leveraging Applications of Formal Methods, Verification and Validation. Verification - 8th International Symposium, ISoLA 2018, Limassol, Cyprus, November 5-9, 2018, Proceedings, Part II, 2018, pp. 103–119.
[24] A. Desai, V. Gupta, E. Jackson, S. Qadeer, S. Rajamani, and D. Zufferey, “P: Safe asynchronous event-driven programming,” in Programming Language Design and Implementation (PLDI), 2013.
[25] A. Desai, A. Phanishayee, S. Qadeer, and S. A. Seshia, “Compositional programming and testing of dynamic distributed systems,” Proceedings of the ACM on Programming Languages (PACMPL) (OOPSLA), 2018.
[26] A. Desai, I. Saha, J. Yang, S. Qadeer, and S. A. Seshia, “DRONA: A framework for safe distributed mobile robotics,” in International Conference on Cyber-Physical Systems (ICCPS), 2017.
[27] J. Fisher, T. A. Henzinger, M. Mateescu, and N. Piterman, “Bounded asynchrony: Concurrency for modeling cell-cell interactions,” in Formal Methods in Systems Biology, J. Fisher, Ed. Berlin, Heidelberg: Springer Berlin Heidelberg, 2008, pp. 17–32.
[28] I. M. Mitchell, A. M. Bayen, and C. J. Tomlin, “A time-dependent Hamilton-Jacobi formulation of reachable sets for continuous dynamic games,” IEEE Transactions on Automatic Control, vol. 50, no. 7, pp. 947–957, July 2005.
[29] S. Karaman and E. Frazzoli, “Sampling-based algorithms for optimal motion planning,” The International Journal of Robotics Research, vol. 30, no. 7, pp. 846–894, 2011.
[30] J. Guiochet, M. Machin, and H. Waeselynck, “Safety-critical advanced robots: A survey,” Robotics and Autonomous Systems, vol. 94, pp. 43–52, 2017.
[31] H. Kress-Gazit, G. E. Fainekos, and G. J. Pappas, “Temporal logic based reactive mission and motion planning,” IEEE Transactions on Robotics, 2009.
[32] G. E. Fainekos, A. Girard, H. Kress-Gazit, and G. J. Pappas, “Temporal logic motion planning for dynamic robots,” Automatica, 2009.
[33] I. Saha, R. Ramaithitima, V. Kumar, G. J. Pappas, and S. A. Seshia, “Automated composition of motion primitives for multi-robot systems from safe LTL specifications.” IEEE, 2014, pp. 1525–1532.
[34] Y. Shoukry, P. Nuzzo, A. Balkan, I. Saha, A. L. Sangiovanni-Vincentelli, S. A. Seshia, G. J. Pappas, and P. Tabuada, “Linear temporal logic motion planning for teams of underactuated robots using satisfiability modulo convex programming,” in 56th IEEE Annual Conference on Decision and Control (CDC), 2017, pp. 1132–1137.
[35] T. Wongpiromsarn, U. Topcu, N. Ozay, H. Xu, and R. M. Murray, “TuLiP: A software toolbox for receding horizon temporal logic planning,” in International Conference on Hybrid Systems: Computation and Control (HSCC), 2011.
[36] S. Bensalem, L. de Silva, F. Ingrand, and R. Yan, “A verifiable and correct-by-construction controller for robot functional levels,” arXiv preprint arXiv:1309.0442, 2013.
[37] T. Abdellatif, S. Bensalem, J. Combaz, L. de Silva, and F. Ingrand, “Rigorous design of robot software: A formal component-based approach,” Robotics and Autonomous Systems, vol. 60, no. 12, pp. 1563–1578, 2012.
[46] L. Masson, J. Guiochet, H. Waeselynck, K. Cabrera, S. Cassel, and M. Törngren, “Tuning permissiveness of active safety monitors for autonomous systems,” in NASA Formal Methods, A. Dutle, C. Muñoz, and A. Narkawicz, Eds. Cham: Springer International Publishing, 2018, pp. 333–348.
[47] H. X. Li and B. C. Williams, “Generative planning for hybrid systems based on flow tubes,” in Proceedings of the Eighteenth International Conference on Automated Planning and Scheduling, ICAPS 2008, Sydney, Australia, September 14-18, 2008, 2008, pp. 206–213.
[48] A. G. Hofmann and B. C. Williams, “Robust execution of temporally flexible plans for bipedal walking devices,” in Proceedings of the Sixteenth International Conference on Automated Planning and Scheduling, ICAPS 2006, Cumbria, UK, June 6-10, 2006, 2006, pp. 386–389.
[49] A. K. Akametalu, J. F. Fisac, J. H. Gillula, S. Kaynama, M. N. Zeilinger, and C. J. Tomlin, “Reachability-based safe learning with Gaussian processes,” in 53rd IEEE Conference on Decision and Control, Dec 2014, pp. 1424–1431.
[50] A. Aswani, P. Bouffard, and C. Tomlin, “Extensions of learning-based model predictive control for real-time application to a quadrotor helicopter,” in 2012 American Control Conference (ACC). IEEE, 2012, pp. 4661–4666.
[51] A. Aswani, H. Gonzalez, S. S. Sastry, and C. Tomlin, “Provably safe and robust learning-based model predictive control,” Automatica, vol. 49, no. 5, pp. 1216–1226, May 2013.
[52] S. Mitsch and A. Platzer, “ModelPlex: Verified runtime validation of verified cyber-physical system models,” Formal Methods in System Design, vol. 49, no. 1, pp. 33–74, Oct 2016.
[38] C. Finucane, G. Jing, and H. Kress-Gazit, “LTLMoP: Experimenting with language, temporal logic and robot control,” in IEEE/RSJ International Conference on Intelligent Robots and Systems, 2010.
[39] X. Chen, É. Ábrahám, and S. Sankaranarayanan, “Flow*: An analyzer for non-linear hybrid systems,” in Computer Aided Verification, N. Sharygina and H. Veith, Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2013, pp. 258–263.
[40] P. S. Duggirala, S. Mitra, M. Viswanathan, and M. Potok, “C2E2: A verification tool for Stateflow models,” in International Conference on Tools and Algorithms for the Construction and Analysis of Systems. Springer, 2015, pp. 68–82.
[41] T. Dreossi, A. Donzé, and S. A. Seshia, “Compositional falsification of cyber-physical systems with machine learning components,” in NASA Formal Methods - 9th International Symposium, NFM 2017, Moffett Field, CA, USA, May 16-18, 2017, Proceedings, 2017, pp. 357–372.
[42] O. Pettersson, “Execution monitoring in robotics: A survey,” Robotics and Autonomous Systems, vol. 53, no. 2, pp. 73–88, 2005.
[43] A. Desai, T. Dreossi, and S. A. Seshia, “Combining model checking and runtime verification for safe robotics,” in Runtime Verification, S. Lahiri and G. Reger, Eds. Cham: Springer International Publishing, 2017, pp. 172–189.
[44] J. V. Deshmukh, A. Donzé, S. Ghosh, X. Jin, G. Juniwal, and S. A. Seshia, “Robust online monitoring of signal temporal logic,” Formal Methods in System Design, vol. 51, no. 1, pp. 5–30, Aug 2017.
[45] J. Huang, C. Erdogan, Y. Zhang, B. Moore, Q. Luo, A. Sundaresan, and G. Rosu, “ROSRV: Runtime verification for robots,” in Runtime Verification, B. Bonakdarpour and S. A. Smolka, Eds. Cham: Springer International Publishing, 2014, pp. 247–254.