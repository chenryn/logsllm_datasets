### Optimized Text

#### Solutions Using Melbourne Shuffle and Square-Root ORAM
Ohrimenko et al. demonstrate that combining the Melbourne Shuffle with square-root ORAM can reduce the worst-case computation time to \( O(\sqrt{N}) \) using \( O(\sqrt{N}) \) private memory. In PRO-ORAM, we further show that it is possible to reduce the latency to a constant for applications with read-heavy access patterns. Additionally, Zahur et al. have shown that although square-root ORAM has asymptotically worse results than the best-known schemes, it can be modified to achieve efficient performance in multi-party computation compared to general optimized algorithms [46]. In PRO-ORAM, we observe similar benefits where the square-root ORAM approach performs better in a read-only setting.

#### Solutions Using Trusted Proxy
ObliviStore [41] is the first work to use a trusted proxy to mediate asynchronous accesses to shared data blocks among multiple users, which was later improved by TaoStore [36]. A key differentiating factor is that both ObliviStore [41] and TaoStore [36] assume mutually trusting users who do not collude with the server, thus operating under a weaker threat model than ours. The primary contribution of these works is to improve efficiency by using a single ORAM instead of separate ORAMs for each user. ObliviStore enhances the efficiency of the SSS ORAM protocol [42] by making ORAM operations asynchronous and parallel. Similar to our work, their key idea is to avoid blocking access requests on shuffle operations, thereby matching the rate of access and shuffle operations using a trusted proxy. However, their approach to achieving such parallelization differs significantly from ours. Our observations in designing PRO-ORAM are novel in the context of a read-only data setting, allowing us to reduce computation latency to a constant, whereas ObliviStore has \( O(\log N) \) computation latency per (read/write) access. TaoStore [36] is a more recent work that improves upon ObliviStore using a trusted proxy and Path-ORAM [43] as its building block. Like [41], this approach also has \( O(\log N) \) computation latency per access.

#### Solutions Using Trusted Hardware
Another line of work has demonstrated the use of trusted hardware or secure processors to improve performance, as opposed to our use to strengthen existing ORAM protocols in a stronger threat model. Shroud uses trusted hardware to guarantee private access to large-scale data in data centers [28]. ObliviAd is another system that leverages trusted hardware to obliviously access advertisements from the server [16]. However, neither of these solutions optimizes for read access patterns.

### Conclusion
In this work, we provide a solution with constant communication and computation latency to hide read data access patterns in a wide range of cloud applications. PRO-ORAM guarantees practical performance, achieving 0.3 seconds to access a 256 KB block, leveraging sufficient storage and compute units with trusted hardware available on today’s cloud platforms. Our work demonstrates that simple ORAM solutions are better suited for hiding read data access patterns than complex algorithms optimized for arbitrary read/write accesses.

### Acknowledgments
We thank the anonymous reviewers for their valuable feedback. This research is supported in part by the National Research Foundation, Prime Minister's Office, Singapore, under its National Cybersecurity R&D Program (TSUNAMi project, Award No. NRF2014NCR-NCR001-21).

### References
[1] Software Guard Extensions Programming Reference. software.intel.com/sites/default/files/329298-001.pdf, Sept 2013.
[2] Box. https://www.box.com/home, Accessed: 2017.
[3] Cloc. http://cloc.sourceforge.net/, Accessed: 2017.
[4] Dropbox. https://www.dropbox.com/, Accessed: 2017.
[5] Dropbox Hacked. https://www.theguardian.com/technology/2016/aug/31/dropbox-hack-passwords-68m-data-breach, Accessed: 2017.
[6] Dropbox Usage Statistics. http://expandedramblings.com/index.php/dropbox-statistics/, Accessed: 2017.
[7] Global Speed Average Connection Increases 26 Percent Year Over Year, According to Akamai’s Fourth Quarter, 2016 Report. https://www.akamai.com/us/en/about/news/press/2017-press/akamai-releases-fourth-quarter-2016-state-of-the-internet-connectivity-report.jsp, Accessed: 2017.
[8] Google Drive. https://drive.google.com/drive/, Accessed: 2017.
[9] Intel SGX Linux SDK. https://github.com/01org/linux-sgx, Accessed: 2017.
[10] Intel Xeon Processor Pricing. https://ark.intel.com/products/92984/Intel-Xeon-Processor-E5-2640-v4-25M-Cache-2_40-GHz, Accessed: 2017.
[11] Web Content Statistics. http://httparchive.org/trends.php, Accessed: 2017.
[12] World’s Biggest Data Breaches. http://www.informationisbeautiful.net/visualizations/worlds-biggest-data-breaches-hacks/, Accessed: 2017.
[13] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent Scarlata. Innovative Technology for CPU Based Attestation and Sealing. In Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy, Volume 13, 2013.
[14] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas Knauth, Andre Martin, Christian Priebe, Joshua Lind, Divya Muthukumaran, Daniel O’Keeffe, Mark L Stillwell, et al. Scone: Secure Linux Containers with Intel SGX. In 12th USENIX Symp. Operating Systems Design and Implementation, 2016.
[15] Adam J Aviv, Seung Geol Choi, Travis Mayberry, and Daniel S Roche. Oblivisync: Practical Oblivious File Backup and Synchronization. In NDSS, 2017.
[16] Michael Backes, Aniket Kate, Matteo Maffei, and Kim Pecina. Obliviad: Provably Secure and Practical Online Behavioral Advertising. In Security and Privacy (SP), 2012 IEEE Symposium on, Pages 257–271. IEEE, 2012.
[17] Vincent Bindschaedler, Muhammad Naveed, Xiaorui Pan, XiaoFeng Wang, and Yan Huang. Practicing Oblivious Access on Cloud Storage: The Gap, the Fallacy, and the Solution. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, Pages 145–174. Springer, 2016.
[18] Erik-Oliver Blass, Travis Mayberry, Guevara Noubir, and Kaan Onarlioglu. Toward Robust Hidden Volumes Using Write-Only Oblivious RAM. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, Pages 203–214. ACM, 2014.
[19] Victor Costan, Ilia A Lebedev, and Srinivas Devadas. Sanctum: Minimal Hardware Extensions for Strong Software Isolation. In USENIX Security Symposium, Pages 857–874, 2016.
[20] Srinivas Devadas, Marten van Dijk, Christopher W Fletcher, Ling Ren, Elaine Shi, and Daniel Wichs. Onion ORAM: A Constant Bandwidth Blowup Oblivious RAM. In Theory of Cryptography Conference, Pages 145–174. Springer, 2016.
[21] Tien Tuan Anh Dinh, Prateek Saxena, Ee-Chien Chang, Beng Chin Ooi, and Chunwang Zhang. M2R: Enabling Stronger Privacy in MapReduce Computation. In USENIX Security, Volume 15, Pages 447–462, 2015.
[22] Oded Goldreich and Rafail Ostrovsky. Software Protection and Simulation on Oblivious RAMs. J. ACM, 1996.
[23] Michael T Goodrich, Michael Mitzenmacher, Olga Ohrimenko, and Roberto Tamassia. Oblivious RAM Simulation with Efficient Worst-Case Access Overhead. In Proceedings of the 3rd ACM Workshop on Cloud Computing Security Workshop, Pages 95–100. ACM, 2011.
[24] Syed Kamran Haider and Marten van Dijk. Flat ORAM: A Simplified Write-Only Oblivious RAM Construction for Secure Processor Architectures. arXiv preprint, 2016.
[25] Mohammad Saiful Islam, Mehmet Kuzu, and Murat Kantarcioglu. Access Pattern Disclosure on Searchable Encryption: Ramification, Attack, and Mitigation. In NDSS, Volume 20, Page 12, 2012.
[26] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim, and Marcus Peinado. Inferring Fine-Grained Control Flow Inside SGX Enclaves with Branch Shadowing. arXiv preprint arXiv:1611.06952, 2016.
[27] Chang Liu, Liehuang Zhu, Mingzhong Wang, and Yu-an Tan. Search Pattern Leakage in Searchable Encryption: Attacks and New Construction. Information Sciences, 265:176–188, 2014.
[28] Jacob R Lorch, Bryan Parno, James W Mickens, Mariana Raykova, and Joshua Schiffman. Shroud: Ensuring Private Access to Large-Scale Data in the Data Center. In FAST, Volume 2013, Pages 199–213, 2013.
[29] Sinisa Matetic, Kari Kostiainen, Aritra Dhar, David Sommer, Mansoor Ahmed, Arthur Gervais, Ari Juels, and Srdjan Capkun. Rote: Rollback Protection for Trusted Execution. https://eprint.iacr.org/2017/048.pdf.
[30] Frank McKeen, Ilya Alexandrovich, Ittai Anati, Dror Caspi, Simon Johnson, Rebekah Leslie-Hurd, and Carlos Rozas. Intel R(cid:9) Software Guard Extensions (Intel R(cid:9) SGX) Support for Dynamic Memory Management Inside an Enclave. In Proceedings of the Hardware and Architectural Support for Security and Privacy 2016, Page 10. ACM, 2016.
[31] Ming-Wei Shih, Sangho Lee, Taesoo Kim, and Marcus Peinado. T-SGX: Eradicating Controlled-Channel Attacks Against Enclave Programs. In NDSS 2017.
[32] Tarik Moataz, Travis Mayberry, and Erik-Oliver Blass. Constant Communication ORAM with Small Blocksize. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, Pages 862–873. ACM, 2015.
[33] Olga Ohrimenko, Michael T Goodrich, Roberto Tamassia, and Eli Upfal. The Melbourne Shuffle: Improving Oblivious Storage in the Cloud. In International Colloquium on Automata, Languages, and Programming, Pages 556–567. Springer, 2014.
[34] Ling Ren, Christopher W Fletcher, Albert Kwon, Emil Stefanov, Elaine Shi, Marten Van Dijk, and Srinivas Devadas. Constants Count: Practical Improvements to Oblivious RAM. In USENIX Security Symposium, Pages 415–430, 2015.
[35] Daniel S Roche, Adam Aviv, Seung Geol Choi, and Travis Mayberry. Deterministic, Stash-Free Write-Only ORAM. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, Pages 507–521. ACM, 2017.
[36] Cetin Sahin, Victor Zakhary, Amr El Abbadi, Huijia Lin, and Stefano Tessaro. TaoStore: Overcoming Asynchronicity in Oblivious Data Storage. In Security and Privacy (SP), 2016 IEEE Symposium on, Pages 198–217. IEEE, 2016.
[37] Elaine Shi, T-H Hubert Chan, Emil Stefanov, and Mingfei Li. Oblivious RAM with \( O((\log N)^3) \) Worst-Case Cost. In Advances in Cryptology–ASIACRYPT 2011, 2011.
[38] Shweta Shinde, Zheng Leong Chua, Viswesh Narayanan, and Prateek Saxena. Preventing Page Faults from Telling Your Secrets. In Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security, Pages 317–328. ACM, 2016.
[39] Shweta Shinde, Dat Le Tien, Shruti Tople, and Prateek Saxena. Panoply: Low-TCB Linux Applications with SGX Enclaves. In 24th Annual Network and Distributed System Security Symposium, NDSS 2017, San Diego, California, USA, February 26-March 1, 2017.
[40] Emil Stefanov and Elaine Shi. Multi-Cloud Oblivious Storage. In Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security, Pages 247–258. ACM, 2013.
[41] Emil Stefanov and Elaine Shi. Oblivistore: High Performance Oblivious Cloud Storage. In IEEE S&P, 2013.
[42] Emil Stefanov, Elaine Shi, and Dawn Song. Towards Practical Oblivious RAM. In NDSS'12, 2011.
[43] Emil Stefanov, Marten Van Dijk, Elaine Shi, Christopher Fletcher, Ling Ren, Xiangyao Yu, and Srinivas Devadas. Path ORAM: An Extremely Simple Oblivious RAM Protocol. In Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security, Pages 299–310. ACM, 2013.
[44] Shruti Tople and Prateek Saxena. On the Trade-offs in Oblivious Execution Techniques. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 2017.
[45] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems. In Security and Privacy (SP), 2015 IEEE Symposium on, Pages 640–656. IEEE, 2015.
[46] Samee Zahur, Xiao Wang, Mariana Raykova, Adrià Gascón, Jack Doerner, David Evans, and Jonathan Katz. Revisiting Square-Root ORAM: Efficient Random Access in Multi-Party Computation. In Security and Privacy (SP), 2016 IEEE Symposium on, Pages 218–234. IEEE, 2016.

### Security Analysis
**Theorem A.1.** If the shuffle enclave executes an oblivious algorithm and \( E \) is a CPA-secure symmetric encryption scheme, then PRO-ORAM guarantees read-only obliviousness as defined in Definition 5.1.

**Proof.** From Lemma 5.1, the access pattern of the shuffle enclave is data-oblivious. To prove the theorem, we need to show that the access pattern from the access enclave is indistinguishable to the adversary. We proceed with a succession of games as follows:

- **Game0** is exactly the same as \( \text{Exp}_{\text{PRO-ORAM}}^{\text{Aadt},E} \).
- **Game1** replaces \( O_1 \) in Game0 with a random string while other parameters remain the same.
- **Game2** is the same as Game1, except that \( A(d_i) \) is selected using a pseudorandom permutation \( \pi_s : \{0,1\}^{(N + \sqrt{N})} \rightarrow \{0,1\}^{(N + \sqrt{N})} \) where \( s \leftarrow \{0,1\}^\lambda \) and not from the access enclave.
- **Game3** is the same as Game2, except that \( A(d_i) \) is selected at random from the entire data array.

For Game3, a distinguisher \( D_3 \) reduces the security of \( \pi \) to PRP security such that:
\[ \Pr[\text{Game2} = 1] - \Pr[\text{Game3} = 1] \leq \text{Adv}_{D_3,\pi}^{\text{PRP}}(\lambda) \]

From the above description, we have:
\[ \Pr[\text{Game0} = 1] = \Pr[\text{Exp}_{\text{PRO-ORAM}}^{\text{Aadt},E}(\lambda,1) = 1] \]

For Game1, a distinguisher \( D_1 \) reduces the security of \( E \) to IND-CPA security such that:
\[ \Pr[\text{Game0} = 1] - \Pr[\text{Game1} = 1] \leq \text{Adv}_{D_1,E}^{\text{IND-CPA}}(\lambda) \]

For Game2, according to Corollary 5.1, the advantage of a distinguisher \( D_2 \) is such that:
\[ \Pr[\text{Game1} = 1] - \Pr[\text{Game2} = 1] \leq \text{Adv}_{D_2,\text{shuffle}}^{\text{Corollary 5.1}} \]

This is because the access enclave uses the output of the shuffle enclave to fetch the data for each request. The access enclave runs the square-root ORAM algorithm, which selects a random address in each request. Hence, the advantage of the distinguisher \( D_2 \) depends on the correctness of the permuted output array from the shuffle enclave.

\[ \Pr[\text{Game3} = 1] = \Pr[\text{Exp}_{\text{PRO-ORAM}}^{\text{Aadt},E}(\lambda,0) = 1] \]

From (2), (3), (4), (5), and (6), we get:
\[ \Pr[\text{Exp}_{\text{PRO-ORAM}}^{\text{Aadt},E}(\lambda,1) = 1] - \Pr[\text{Exp}_{\text{PRO-ORAM}}^{\text{Aadt},E}(\lambda,0) = 1] \leq \]
\[ \text{Adv}_{D_1,E}^{\text{IND-CPA}}(\lambda) + \text{Adv}_{D_2,\text{shuffle}}^{\text{Corollary 5.1}} + \text{Adv}_{D_3,\pi}^{\text{PRP}}(\lambda) \]

The \( \text{Adv}_{D_2,\text{shuffle}}^{\text{Corollary 5.1}} \) cannot be greater than \( \text{negl} \) as it would break the security of the underlying Melbourne Shuffle algorithm stated in Lemma 5.1. With this, we prove that the advantage of an adaptive adversary in distinguishing the access patterns induced by PRO-ORAM from random is negligible. Therefore, PRO-ORAM guarantees read-only obliviousness.