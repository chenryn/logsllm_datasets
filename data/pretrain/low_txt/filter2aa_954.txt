# Hacking G Suite: The Power of Dark Apps Script Magic

## Author
- **Matthew Bryant (mandatory)**
  - Red Team Lead at Snapchat
  - @IAmMandatory
  - Research and write-ups available at [The Hacker Blog](https://thehackerblog.com)

## Context & Background

### What is Google Workspace (G Suite)?
- **Overview**: A suite of Google services for collaborative work, including Gmail, Docs/Sheets/Slides, Drive, and Google Cloud Platform (GCP).
- **Business Benefits**: Enables businesses to manage employees and set up robust security and access control policies.
- **User Base**: Used by over 2 billion users, both in enterprise and personal capacities.

### Apps Script: Automate Google Services with JavaScript
- **Definition**: Serverless JavaScript apps hosted by Google, optimized for automating Google services.
- **Integration**: Seamless integration with Google’s app registration and OAuth permission system.
- **Triggers**: Various triggers such as web requests, document opens, and scheduled tasks can start scripts.

### Example: Apps Script Editor
- **Editor**: A user-friendly interface for writing and deploying Apps Script code.

### Google OAuth 2.0
- **Functionality**: Allows third-party apps to request access to resources owned by Google users.
- **Scopes**: Over 250 different permissions (scopes) that define what the app can access.
- **User Consent**: Users are prompted to allow or reject the requested permissions.
- **Access Tokens**: Upon approval, tokens are issued for API access.

### Tying It All Together: Thinking Beyond the Machines
- **Phishing and Backdooring**: Apps Script is a powerful tool for phishing and backdooring accounts.
- **Stealth**: An Apps Script implant is invisible to antivirus, endpoint detection tools, and other on-device monitoring.
- **Persistence**: Even if a victim wipes their device, the implant remains.

### Tough Perimeters Require Clever Attacks
- **Bypassing Security**: Apps Script can be used to bypass even the most hardened environments, including those with hardware U2F, Chromebooks, and third-party OAuth scope blocking.

### Historical Precedent
- **Quote**: "There are years where we fuck around; and there are hours where we find out."
- **References**:
  - [Tweet by @zeynep](https://bit.ly/3vDvy1z)
  - [Ars Technica Article](https://bit.ly/2SMGqgb)

### A Modern-Day Super Worm
- **Propagation Cycle**:
  1. **Authorization**: A percentage of users who receive the phishing email grant access to their Gmail and contacts.
  2. **Spread**: The worm sends OAuth phishing emails to the victim's 1,000 most recently modified contacts.
  3. **Reception**: More users receive the phishing email, requesting full access to their Gmail and Contacts list.

- **Impact**:
  - Affected over 1 million Google users.
  - Google responded quickly, halting the spread and disabling the apps within a few hours.
  - Post-mortem analysis showed the coding was amateur and only collected email addresses.
  - The attack could have been much worse.

### Attack Components
- **Multiple Rotating Apps and Domains**: To prevent easy blocking by Google.
- **IDN Homograph Attack**: In the app name.
- **Social Engineering**: Clever phishing scheme.
- **Self-Propagation**: Via old-school email spam.

### Post-Worm Changes & Existing Mitigations
- **OAuth Scope and Client ID Allowlisting**: Introduced ~2 months after the incident.
- **Sensitive and Restricted Scopes**: Requiring heavy review.
- **Unverified App Warning Prompt**: For smaller apps requiring sensitive scopes.
- **Crackdown on Misleading OAuth Apps**: Enhanced security measures.

### Food for Thought
- **Zero Exploits or Bugs**: The attack utilized no exploits or bugs but had a substantial impact.

### Breaking New Ground
- **Bypassing New Restrictions**: Techniques to bypass the new restrictions and penetrate the G Suite perimeter.
- **Unverified App Prompt**: Understanding and bypassing the prompt.
- **Sensitive and Restricted Scopes**: APIs with potential to access private data, requiring manual review for apps with 100+ users.

### Getting Clever with Apps Script
- **Standalone or Bound Projects**: Apps Script can be standalone or bound to Google Docs/Sheets/Slides/Forms.
- **Trigger Execution**: Triggers run for all users with Editor permissions (who must still accept OAuth prompts).

### Example: Bypassing Unverified App Prompt
- **Make Victim Editor**: Make the victim an Editor on a Doc and send the link.
- **Trigger Activation**: The victim activates the trigger and spawns the OAuth prompt.
- **Copy URL Method**: Send the copy link to the victim, making them the owner and publisher of the App Script.

### Another Tip for Defeating Third-Party App/Unverified App Restrictions
- **Script Container Ownership**: Any Doc/Sheet/Slide with an Owner inside a GSuite domain can be a bypass.
- **Edit Access**: If you have edit access to any Doc/Sheet/Slide made by someone in a GSuite domain, you can create an Apps Script app and bypass restrictions.

### Post-Compromise Pivoting & Privilege Escalation
- **Pivoting to Google Cloud (GCP)**: Accessing GCP through Apps Script.
- **Access Token Usage**: Use the access token from `ScriptApp.getOAuthToken()` for API access.
- **Hidden Google Project**: Each Apps Script has a hidden Google Project, which can be queried using the `x-goog-user-project` header.

### Mining Google Drive for Paydirt
- **Sharing Defaults**: Default sharing settings and how they can be exploited.
- **Real-World Usage**: Important files are often shared by link, making them accessible.
- **Apps Script Spider**: A script to recursively crawl and collect metadata from Drive/Doc/Sheet/Slide links.
- **Employee Directory Dumping**: Using the People API to pull the entire organization’s directory.

### Privilege Escalation
- **Exploiting Bound Scripts**: Editing Apps Script attached to Docs/Sheets/Slides to include malicious code.
- **Force Re-Trigger**: Publishing the bound script as a web app to force re-triggering.
- **Lateral Movement via Google Groups**: Enumerating and joining open Google Groups for ACL in GCP/IAM.
- **Google Group Tricks**: Using Google Groups to upgrade spear-phishing capabilities.

### Backdoors, Stealth, & Persistence
- **Gmail Trickery**: Creating filters to hide security notifications and password reset emails.
- **Deceptive App Names**: Using homoglyph attacks to set more deceptive app names.
- **Perpetual Execution**: Setting time-based triggers for background execution.
- **Backdoor Google Cloud Projects**: Creating Google Cloud Functions and backdoors in Google Cloud Shell.

This comprehensive guide provides a detailed overview of how Apps Script can be used for various malicious activities in the G Suite environment, along with the necessary technical details and mitigation strategies.