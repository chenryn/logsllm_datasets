### Device-Agnostic Firmware Execution
**Anonymous Submission to MobiCom, 2020**

**Abstract:**
Laelaps is a device-agnostic emulator designed for lightweight Real-Time Operating Systems (RTOS) and bare-metal systems. It utilizes peripheral-specific search heuristics to mitigate the path explosion problem in peripheral emulation. Unlike previous approaches that forward peripheral access requests to real hardware, Laelaps infers proper inputs from peripherals on-the-fly using symbolic execution, offering scalability and flexibility.

**1. Introduction:**
Previous work on firmware execution often relies on forwarding peripheral access requests to real hardware [24, 27, 32, 42, 44]. This approach is not scalable for large-scale firmware testing, as it requires a dedicated real device for each firmware image. Additionally, not all devices provide an interface for data exchange with the emulator. Laelaps addresses these limitations by inferring peripheral inputs using symbolic execution, thus inheriting the benefits of traditional emulators, such as the ability to store and replay snapshots for repeated analyses.

**2. Related Work:**
A recent related work by Eric Gustafson et al. [21] proposed learning interactions between hardware and firmware from real hardware. While this approach achieves similar dynamic analysis capabilities, it still requires real hardware during the learning phase. In contrast, Laelaps does not rely on real hardware, making it more flexible and scalable.

Significant progress has been made in analyzing Linux-based firmware [9, 46], leveraging the abstraction layer provided by the Linux kernel. However, microcontroller firmware lacks a unified interface, and many MCU OSs provide fragmented Hardware Abstraction Layers (HALs). Many MCU firmware images are also bare-metal, directly interacting with diverse hardware. Laelaps directly interacts with previously unseen hardware, making it capable of handling a wider variety of firmware.

**3. Methodology:**
Laelaps leverages concolic execution to generate appropriate peripheral inputs, dynamically steering the device emulator. Dynamic symbolic execution is well-suited for this task, as it can identify the most promising branches. We designed a path selection algorithm based on generally applicable heuristics. Our implementation is built on top of QEMU and angr, and we have conducted extensive experiments.

**4. Experimental Results:**
We tested Laelaps on 30 firmware images from different manufacturers and found that our prototype successfully executed 20 of them without human intervention. We also performed fuzzing tests, which showed that Laelaps can correctly boot the system into an analyzable state, enabling the identification of both self-injected and real-world bugs.

**5. Future Work:**
In the future, we plan to extend Laelaps to support a broader spectrum of devices, including ARM Cortex-A and MIPS architectures.

**6. Implementation Details:**
- **Precise PC in QEMU:** We addressed the issue of the Program Counter (PC) always pointing to the start of the current translated block by injecting instructions into the intermediate language to update the PC with each translated guest instruction.
- **Extending Interrupts in QEMU:** The official QEMU supports 16 system exceptions and 64 hardware interrupts. We extended this to support up to 140 interrupts in our prototype.
- **Bit-banding Support:** Bit-banding is an optional feature in ARM-based microcontrollers. We extended angr's memory model to support bit-banding, allowing efficient atomic access to bits in memory.
- **CBZ/CBNZ Instructions:** These instructions mark the end of basic blocks but are not treated as such in angr's default implementation. We enabled strict basic blocks to handle these instructions correctly.
- **Memory Alias:** Some STM32 boards use memory aliasing during booting. We extended angr's memory model to redirect memory accesses when encountering aliased regions.

**7. Firmware Image Details:**
We describe the functionality of each firmware image and summarize the execution results in Table 6.

**8. Conclusion:**
Laelaps is a device-agnostic emulator for ARM microcontrollers that leverages concolic execution to generate appropriate peripheral inputs. Our experimental results show that Laelaps can successfully execute a wide range of firmware images and perform effective fuzzing tests. Future work will focus on extending support to additional architectures.

**References:**
[1] Amazon Web Services. 2018. The FreeRTO Kernel. https://www.freertos.org/.
[2] Arm Holdings. 2015. ARM Cortex-M3 Processor Technical Reference Manual. https://developer.arm.com/docs/100165/0201.
[3] Clark Barrett and Cesare Tinelli. 2018. Satisfiability Modulo Theories. Springer International Publishing.
[4] Fabrice Bellard. 2005. QEMU, a Fast and Portable Dynamic Translator. In Proceedings of the 2005 USENIX Annual Technical Conference (ATC’05).
[5] Ella Bounimova, Patrice Godefroid, and David Molnar. 2013. Billions and Billions of Constraints: Whitebox Fuzz Testing in Production. In ICSE’13.
[6] Derek Bruening, Chris Adeniyi-Jones, Edmund Grimley-Evans, and Kevin Zhou. 2017. Building Dynamic Tools with DynamoRIO on x86 and ARMv8. 2017 International Symposium on Code Generation and Optimization Tutorial.
[7] Cristian Cadar, Daniel Dunbar, and Dawson Engler. 2008. KLEE: Unassisted and Automatic Generation of High-coverage Tests for Complex Systems Programs. In Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation (OSDI’08).
[8] Cristian Cadar, Vijay Ganesh, Peter M. Pawlowski, David L. Dill, and Dawson R. Engler. 2006. EXE: Automatically Generating Inputs of Death. In Proceedings of the 2006 ACM Conference on Computer and Communications Security (CCS’06).
[9] Daming D. Chen, Manuel Egele, Maverick Woo, and David Brumley. 2016. Towards Automated Dynamic Analysis for Linux-based Embedded Firmware. In Proceedings of the 2016 Network and Distributed System Security Symposium (NDSS’16).
[10] Vitaly Chipounov and George Candea. 2010. Reverse Engineering of Binary Device Drivers with RevNIC. In Proceedings of the 5th European Conference on Computer Systems (EuroSys’10).
[11] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. 2011. S2E: A Platform for In-vivo Multi-path Analysis of Software Systems. SIGPLAN Not. 47, 4 (March 2011), 265–278. https://doi.org/10.1145/2248487.1950396
[12] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. 2011. S2E: A Platform for In-Vivo Multi-path Analysis of Software Systems. In Proceedings of the 16th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS’11).
[13] Clark, James. 2018. Expat XML parser. https://libexpat.github.io/.
[14] Nassim Corteggiani, Giovanni Camurati, and Aurélien Francillon. 2018. Inception: System-Wide Security Testing of Real-World Embedded Systems Software. In Proceedings of the 27th USENIX Security Symposium (USENIX Security’18).
[15] Drew Davidson, Benjamin Moench, Thomas Ristenpart, and Somesh Jha. 2013. FIE on Firmware: Finding Vulnerabilities in Embedded Systems Using Symbolic Execution. In Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13). USENIX, Washington, D.C., 463–478. https://www.usenix.org/conference/usenixsecurity13/technical-sessions/paper/davidson
[16] Brendan Dolan-Gavitt, Josh Hodosh, Patrick Hulin, Tim Leek, and Ryan Whelan. 2015. Repeatable Reverse Engineering with PANDA. In Proceedings of the 5th Program Protection and Reverse Engineering Workshop (PPREW-5).
[17] Federal Communications Commission. [n.d.]. FCC ID Search. howpublished=https://www.fcc.gov/oet/ea/fccid
[18] Vijay Ganesh and David L. Dill. 2007. A Decision Procedure for Bitvectors and Arrays. In Proceedings of the 2007 International Conference in Computer Aided Verification (CAV’07).
[19] Patrice Godefroid, Nils Klarlund, and Koushik Sen. 2005. DART: Directed Automated Random Testing. In PLDI’05.
[20] Patrice Godefroid, Michael Y. Levin, and David Molnar. 2008. Automated Whitebox Fuzz Testing. In NDSS’08.
[21] Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind Machiry, Yanick Fratantonio, Davide Balzarotti, Aurélien Francillon, Yung Ryn Choe, Christophe Kruegel, and Giovanni Vigna. 2019. Toward the Analysis of Embedded Firmware through Automated Rehosting. In Proceedings of the 22nd International Symposium on Research in Attacks, Intrusions and Defenses (RAID’19).
[22] Grant Hernandez, Farhaan Fowze, Dave (Jing) Tian, Tuba Yavuz, and Kevin R.B. Butler. 2017. FirmUSB: Vetting USB Device Firmware Using Domain Informed Symbolic Execution. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (Dallas, Texas, USA) (CCS ’17). ACM, New York, NY, USA, 2245–2262. https://doi.org/10.1145/3133956.3134050
[23] Andreas Ibing and Alexandra Mai. 2015. A Fixed-Point Algorithm for Automated Static Detection of Infinite Loops. In Proceedings of the 16th IEEE International Symposium on High Assurance Systems Engineering (HASE’15).
[24] Markus Kammerstetter, Christian Platzer, and Wolfgang Kastner. 2014. PROSPECT Peripheral Proxying Supported Embedded Code Testing. In Proceedings of the 9th ACM Symposium on Information, Computer and Communications Security (AsiaCCS’14). ACM.
[25] Ori Karliner. 2018. FreeRTOS TCP/IP Stack Vulnerabilities – The Details. https://blog.zimperium.com/freertos-tcpip-stack-vulnerabilities-details/
[26] James C. King. 1976. Symbolic Execution and Program Testing. Commun. ACM 19, 7 (July 1976), 385–394.
[27] Karl Koscher, Tadayoshi Kohno, and David Molnar. 2015. SURROGATES: Enabling Near-Real-Time Dynamic Analyses of Embedded Systems. In 9th USENIX Workshop on Offensive Technologies (WOOT’15). USENIX Association, Washington, D.C. https://www.usenix.org/conference/woot15/workshop-program/presentation/koscher
[28] Volodymyr Kuznetsov, Vitaly Chipounov, and George Candea. 2010. Testing Closed-source Binary Device Drivers with DDT. In Proceedings of the 2010 USENIX Annual Technical Conference (ATC’10).
[29] You Li, Zhendong Su, Linzhang Wang, and Xuandong Li. 2013. Steering Symbolic Execution to Less Traveled Paths. In Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications (OOPSLA’13).

**Table 6: Details of Firmware Samples**
(See the original text for the detailed descriptions of each firmware image.)

---

This revised version aims to make the text more coherent, professional, and easier to follow.