# MouseJack: Injecting Keystrokes into Wireless Mice

**Presented by: Marc Newlin | PI:EMAIL | @marcnewlin**

**Marc Newlin**  
Security Researcher at Bastille Networks

## Overview
- **(Mouse|Key)Jack, KeySniffer**
  - **Wireless Mice and Keyboards**
    - 16 vendors
    - Proprietary protocols (non-Bluetooth)
    - 4 families of transceivers
  - **16 Vulnerabilities**
    - Keystroke sniffing
    - Keystroke injection
    - Many are unpatchable

## Types of Vulnerabilities
- **Keystroke Injection**
  - Unencrypted, targeting mice
  - Unencrypted, targeting keyboards
  - Encrypted, targeting keyboards
- **Keystroke Sniffing**
  - Unencrypted keyboards
- **Forced Pairing**
  - Logitech Unifying dongles
  - Keyboard disguised as mouse
- **Malicious Macro Programming**
  - Delayed keystroke injection
- **Denial of Service**
  - Crash USB dongle firmware

## ShhhMouse
- It turns out that many devices are vulnerable.

## Prior Research
- **Thorsten Schroeder and Max Moser (2010)**
  - "Practical Exploitation of Modern Wireless Devices" (KeyKeriki)
  - Research into XOR encrypted Microsoft wireless keyboards
- **Travis Goodspeed (2011)**
  - "Promiscuity is the nRF24L01+’s Duty"
  - Research into nRF24L pseudo-promiscuous mode functionality
- **Samy Kamkar (2015)**
  - KeySweeper
  - Microsoft XOR encrypted wireless keyboard sniffer

## How Do Mice and Keyboards Work?
- Peripherals send user input to the dongle.
- The dongle sends user input to the computer.
- An attacker can communicate with your dongle or eavesdrop on your unencrypted keyboard.

## Background and Motivation
- "Since the displacements of a mouse would not give any useful information to a hacker, the mouse reports are not encrypted." - Logitech (2009)

## Initial Logitech Mouse Research
- **Hardware Used**
  - USRP B210 SDR
  - Logitech M510 mouse
  - GNU Radio decoder
- **Observations**
  - Good for passive RX
  - USB and CPU latency make two-way communications tricky

## Burning Man to the Rescue!
- **NES Controller Internals**
  - Arduino Nano
  - DC boost converter
  - nRF24L01+
  - Vibration motor
  - WS2812B LED

## Logitech Mouse Hijacking NES Controller
- "Village Adventure" by Marc Newlin
- IoT Village
- A Logitech mouse clicker did not like the hacks.

## NES Controller v2
- **Internals**
  - Teensy 3.1
  - 5x nRF24L01+ radios
  - 1x WS2812B RGB LED
  - 500mAh LiPo battery
  - microSD card reader
  - OLED display

## OSK Attack @ ToorCon
- **Windows 8.1/10**
  - Deterministically launch split OSK
  - Keys are at known offsets from screen corners, assuming default DPI
  - Slow, very slow

## Discovering the First Vulnerability
- **Logitech Unifying Keyboards**
  - Unencrypted keystroke injection
  - Is it really that easy?

## Research Process
- **Gather OSINT and Implement SDR Decoder**
  - FCC test reports (frequencies, modulation)
  - RFIC documentation (physical layer configuration, packet formats)
  - Google searches ("How hack mice?", "Why keyboard not encrypt?")
  - SDR decoder (GNU Radio, USRP B210, 2.4GHz ISM band, 500kHz, 1MHz, 2MHz GFSK)
- **Build Out a Protocol Model**
  - Generate some ARFz (move the mouse, click some buttons, type on the keyboard)
  - Infer payload structures and observe protocol behavior (channel hopping, ACKs, crypto, etc.)
- **Look for Low-Hanging Fruit**
  - **Wireless Mice**
    - All tested mice are unencrypted
    - Does it transmit keystrokes?
    - Does it send raw HID data?
  - **Wireless Keyboards**
    - Is the keyboard unencrypted?
    - Is it replay vulnerable?
- **Fuzzing (Poke It and See What Breaks)**
  - **usbmon / Wireshark**
    - USB sniffing to see what the dongle sends to the host computer
  - **xinput / Magic SysRq**
    - Disable xinput processing of target keyboards and mice
    - Disable magic sysrq to avoid unintended hard reboots
  - **Fuzzer**
    - NES controller and later custom nRF24LU1+ firmware

## Nordic Semiconductor nRF24L Family
- **2.4GHz GFSK Transceivers**
  - 250kbps, 1Mbps, 2Mbps data rates
  - 0-32 byte payloads, 8 or 16 bit CRC
  - Vendor-defined mouse/keyboard protocols

### Transceiver Details
- **nRF24LE1**
  - 8051 MCU, 128-bit AES, No USB, Flash
  - nRF24LE1 OTP (no firmware updates)
- **nRF24LU1+**
  - 8051 MCU, 128-bit AES, USB, Flash
  - nRF24LU1+ OTP (no firmware updates)

### Common nRF24L Configuration
- **Standardized Properties**
  - 2 Mbps data rate
  - 5 byte address length
  - 2 byte CRC
  - Automatic ACKs
  - Automatic retransmit
- **Vendor-Specific Properties**
  - RF channels
  - Payload lengths

## Logitech Unifying
- **Universal Pairing**
  - Any mouse or keyboard can pair with any dongle
- **Firmware Update Support**
  - Dongles support firmware updates
  - Most mice/keyboards do not
- **Transceivers**
  - nRF24LU1+ / nRF24LE1 (most common)
  - TI-CC2544 / TI-CC2543 (higher end)
  - All OTA compatible
- **Encryption**
  - Mice are unencrypted
  - Keyboard multimedia keys are unencrypted
  - Regular keyboard keys are encrypted with 128-bit AES
  - Key generation during pairing
- **Some Dell Products Are Really Unifying**
  - Dell KM714
  - Likely others

### Logitech Unifying Base Packet Format
- 5, 10, and 22 byte payloads
- 1 byte payload checksum

### Logitech Unifying Addressing
- **Lowest Octet is Device ID**
  - Defaults to 07 from the factory
  - Increments when you pair a new device
  - Re-pairing a device doesn’t change its ID
  - Device ID 00 is reserved for the dongle

### Logitech Unifying Payload Addressing
- **RF Address**
  - 11:22:33:44:07 (Dongle Address)
  - 00:XX:XX:XX:XX (Transmit to the address of a paired mouse and ignore the device index field)
- **11:22:33:44:00 (Mouse Address)**
  - 07:XX:XX:XX:XX (Transmit payload to the dongle address and use the device index field)

### ACK Payloads (Dongle to Peripheral Commands)
- **Example**
  - [16.922] 9D:65:CB:58:4D 0040006E52 (keepalive, 110ms interval)
  - [16.923] 9D:65:CB:58:4D (ACK)
  - [17.015] 9D:65:CB:58:4D 0040006E52 (keepalive, 110ms interval)
  - [17.015] 9D:65:CB:58:4D (ACK)
  - [17.108] 9D:65:CB:58:4D 0040006E52 (keepalive, 110ms interval)
  - [17.108] 9D:65:CB:58:4D (ACK)
  - [17.201] 9D:65:CB:58:4D 0040006E52 (keepalive, 110ms interval)
  - [17.201] 9D:65:CB:58:4D (ACK)