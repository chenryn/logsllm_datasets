Certainly! Below is the optimized and refined version of the provided text, structured to be more clear, coherent, and professional.

---

### Executable Installer File Permissions Weakness

**Created:** 2020-03-13T11:12:18.558Z  
**Description:**

Adversaries may exploit executable installers by hijacking the binaries used during the installation process. These processes often execute specific binaries as part of their functionality or to perform other actions. If the file system directory containing a target binary, or the binary itself, has improperly set permissions, the target binary can be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running with higher permissions, the replaced binary will also execute with these elevated permissions, which could include SYSTEM.

Another variant of this technique involves exploiting a common weakness in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the `%TEMP%` directory to unpack binaries such as DLLs, EXEs, or other payloads. When creating subdirectories and files, installers often do not set appropriate permissions to restrict write access, allowing for the execution of untrusted code placed in these subdirectories or the overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).

Adversaries may use this technique to replace legitimate binaries with malicious ones, thereby executing code at a higher permission level. Some installers may also require elevated privileges, leading to privilege escalation when executing adversary-controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002). Several examples of this weakness in existing common installers have been reported to software vendors.

**External References:**
- [Mozilla Foundation Security Advisory 2012-98](https://www.mozilla.org/en-US/security/advisories/mfsa2012-98/)
- [Executable Installers are Vulnerable](https://seclists.org/fulldisclosure/2015/Dec/34)

**Kill Chain Phases:**
- Persistence
- Privilege Escalation
- Defense Evasion

**Modified:** 2020-03-26T19:20:23.030Z  
**Name:** Executable Installer File Permissions Weakness  
**Type:** Attack Pattern  
**Version:** 1.0

---

### Accessibility Features

**Created:** 2020-01-24T14:32:40.315Z  
**Description:**

Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows includes accessibility features that can be launched with key combinations before a user logs in (e.g., on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging into the system.

Common accessibility programs include:
- `C:\Windows\System32\sethc.exe` (launched when the Shift key is pressed five times, often referred to as "sticky keys")
- `C:\Windows\System32\utilman.exe` (launched when the Windows + U key combination is pressed)

Depending on the version of Windows, adversaries may exploit these features in different ways. Common methods include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, must reside in `%systemdir%`, and must be protected by Windows File or Resource Protection (WFP/WRP).

For simple binary replacement on Windows XP and later, and on Windows Server 2003/R2 and later, the program (e.g., `C:\Windows\System32\utilman.exe`) may be replaced with `cmd.exe` (or another program that provides backdoor access). Pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected via [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the replaced file to be executed with SYSTEM privileges.

Other accessibility features that may be leveraged in a similar fashion include:
- On-Screen Keyboard: `C:\Windows\System32\osk.exe`
- Magnifier: `C:\Windows\System32\Magnify.exe`
- Narrator: `C:\Windows\System32\Narrator.exe`
- Display Switcher: `C:\Windows\System32\DisplaySwitch.exe`
- App Switcher: `C:\Windows\System32\AtBroker.exe`

**External References:**
- [Abusing Windows 10 Narrator's 'Feedback-Hub' URI for Fileless Persistence](https://giuliocomi.blogspot.com/2019/10/abusing-windows-10-narrators-feedback.html)
- [The “Hikit” Rootkit: Advanced and Persistent Attack Techniques (Part 1)](https://www.fireeye.com/blog/threat-research/2012/08/hikit-rootkit-advanced-persistent-attack-techniques-part-1.html)
- [Sticky Keys to the Kingdom](https://www.slideshare.net/DennisMaldonado5/sticky-keys-to-the-kingdom)
- [Registry Analysis with CrowdResponse](http://blog.crowdstrike.com/registry-analysis-with-crowdresponse/)

**Kill Chain Phases:**
- Privilege Escalation
- Persistence

**Modified:** 2023-04-21T12:33:18.602Z  
**Name:** Accessibility Features  
**Type:** Attack Pattern  
**Version:** 1.1

---

### PowerShell Profile

**Created:** 2019-06-14T18:53:49.472Z  
**Description:**

Adversaries may gain persistence and escalate privileges by abusing PowerShell profiles. A PowerShell profile (`profile.ps1`) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments. PowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for PowerShell host programs such as the PowerShell console, PowerShell ISE, or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer.

Adversaries may modify these profiles to include arbitrary commands, functions, modules, and/or PowerShell drives to gain persistence. Every time a user opens a PowerShell session, the modified script will be executed unless the `-NoProfile` flag is used when it is launched.

An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator.

**External References:**
- [About Profiles](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-6)
- [A dive into Turla PowerShell usage](https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/)
- [Lab Notes: Persistence and Privilege Elevation using the Powershell Profile](https://witsendandshady.blogspot.com/2019/06/lab-notes-persistence-and-privilege.html)
- [WINDOWS POWERSHELL LOGGING CHEAT SHEET - Win 7/Win 2008 or later](http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf)

**Kill Chain Phases:**
- Persistence
- Privilege Escalation

**Modified:** 2020-01-24T15:11:53.430Z  
**Name:** PowerShell Profile  
**Type:** Attack Pattern  
**Version:** 1.0

---

### SIP and Trust Provider Hijacking

**Created:** 2018-04-18T17:59:24.739Z  
**Description:**

In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code. The signature validation process is handled via the `WinVerifyTrust` application programming interface (API) function, which coordinates with the appropriate trust provider to validate parameters of a signature.

Microsoft created software components called Subject Interface Packages (SIPs) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc.), and are identified by globally unique identifiers (GUIDs).

Similar to [Code Signing](https://attack.mitre.org/techniques/T1116), adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and whitelisting tools to classify malicious (or any) code as signed by:

- Modifying the `Dll` and `FuncName` Registry values in `HKLM\SOFTWARE[\\WOW6432Node\\]Microsoft\Cryptography\OID\EncodingType 0\CryptSIPDllGetSignedDataMsg\{SIP_GUID}` that point to the dynamic link library (DLL) providing a SIP’s `CryptSIPDllGetSignedDataMsg` function.
- Modifying the `Dll` and `FuncName` Registry values in `HKLM\SOFTWARE[\\WOW6432Node\\]Microsoft\Cryptography\OID\EncodingType 0\CryptSIPDllVerifyIndirectData\{SIP_GUID}` that point to the DLL providing a SIP’s `CryptSIPDllVerifyIndirectData` function.
- Modifying the `DLL` and `Function` Registry values in `HKLM\SOFTWARE[\\WOW6432Node\\]Microsoft\Cryptography\Providers\Trust\FinalPolicy\{trust provider GUID}` that point to the DLL providing a trust provider’s `FinalPolicy` function.

Hijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation.

**External References:**
- [Authenticode](https://msdn.microsoft.com/library/ms537359.aspx)
- [WinVerifyTrust function](https://msdn.microsoft.com/library/windows/desktop/aa388208.aspx)
- [Subverting Trust in Windows](https://specterops.io/assets/resources/SpecterOps_Subverting_Trust_in_Windows.pdf)
- [SIP’s (Subject Interface Package) and Authenticode](https://blogs.technet.microsoft.com/eduardonavarro/2008/07/11/sips-subject-interface-package-and-authenticode/)
- [Catalog Files and Digital Signatures](https://docs.microsoft.com/windows-hardware/drivers/install/catalog-files)
- [PoCSubjectInterfacePackage](https://github.com/mattifestation/PoCSubjectInterfacePackage)
- [How do I enable CAPI 2.0 logging in Windows Vista, Windows 7 and Windows 2008 Server?](http://www.entrust.net/knowledge-base/technote.cfm?tn=8165)
- [Registry (Global Object Access Auditing)](https://docs.microsoft.com/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn311461(v=ws.11))
- [Audit Registry](https://docs.microsoft.com/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd941614(v=ws.10))

**Kill Chain Phases:**
- Defense Evasion
- Persistence

**Modified:** 2020-02-05T19:35:58.954Z  
**Name:** SIP and Trust Provider Hijacking  
**Type:** Attack Pattern  
**Version:** 1.0

---

### Account Discovery

**Created:** 2017-05-31T21:31:06.988Z  
**Description:**

Adversaries may attempt to enumerate valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, aiding in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., [Valid Accounts](https://attack.mitre.org/techniques/T1078)).

Adversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment. Cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default [PowerShell](https://attack.mitre.org/techniques/T1059/001) and other command-line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system’s files.

**External References:**
- [Embracing offensive tooling: Building detections against Koadic using EQL](https://www.elastic.co/blog/embracing-offensive-tooling-building-detections-against-koadic-using-eql)

**Kill Chain Phases:**
- Discovery

**Modified:** 2023-04-15T17:24:23.029Z  
**Name:** Account Discovery  
**Type:** Attack Pattern  
**Version:** 2.4

---

### Proxy

**Created:** 2017-05-31T21:31:08.479Z  
**Description:**

Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.

Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.

**External References:**
- [In-Depth Look: APT Attack Tools of the Trade](http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/)
- [Command & Control Understanding, Denying and Detecting](https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf)

**Kill Chain Phases:**
- Command and Control

**Modified:** 2021-08-30T19:16:11.648Z  
**Name:** Proxy  
**Type:** Attack Pattern  
**Version:** 3.1

---

### Command and Scripting Interpreter

**Created:** 2017-05-31T21:30:49.546Z  
**Description:**

Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004), while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).

There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).

Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.

**External References:**
- [How to Execute Shell Commands in a Remote Machine in Python](https://www.thepythoncode.com/article/executing-bash-commands-remotely-in-python)
- [Cisco IOS Software Integrity Assurance - Command History](https://tools.cisco.com/security/center/resources/integrity_assurance.html#23)
- [Running Remote Commands](https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/running-remote-commands?view=powershell-7.1)

**Kill Chain Phases:**
- Execution

**Modified:** 2023-03-27T16:43:58.795Z  
**Name:** Command and Scripting Interpreter  
**Type:** Attack Pattern  
**Version:** 2.4

---

### Indicator Blocking

**Created:** 2020-03-19T19:09:30.329Z  
**Description:**

Adversaries may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering with settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry, as well as being accessible via administrative utilities such as [PowerShell](https://attack.mitre.org/techniques/T1059/001) or [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).

For example, adversaries may modify the `File` value in `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\EventLog\Security` to hide their malicious actions in a new or different `.evtx` log file. This action does not require a system reboot and takes effect immediately.

ETW interruption can be achieved in multiple ways, such as defining conditions using the [PowerShell](https://attack.mitre.org/techniques/T1059/001) `Set-EtwTraceProvider` cmdlet or by interfacing directly with the Registry to make alterations.

In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.

In Linux environments, adversaries may disable or reconfigure log processing tools such as syslog or nxlog to inhibit detection and monitoring capabilities to facilitate follow-on behaviors.

**External References:**
- [REP-25: Disable Windows Event Logging](https://ptylu.github.io/content/report/report.html?report=25)
- [LemonDuck Targets Docker for Cryptomining Operations](https://www.crowdstrike.com/blog/lemonduck-botnet-targets-docker-for-cryptomining-operations/)
- [Backdoor:Win32/Lamin.A](https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?name=Backdoor:Win32/Lamin.A)
- [About Event Tracing](https://docs.microsoft.com/en-us/windows/desktop/etw/consuming-events)
- [Tampering with Windows Event Tracing: Background, Offense, and Defense](https://medium.com/palantir/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63)

**Kill Chain Phases:**
- Defense Evasion

**Modified:** 2023-04-12T15:25:10.496Z  
**Name:** Indicator Blocking  
**Type:** Attack Pattern  
**Version:** 1.2

---

### Domain Account

**Created:** 2020-01-28T14:05:17.825Z  
**Description:**

Adversaries may create a domain account to maintain access to victim systems. Domain accounts are managed by Active Directory Domain Services, where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the `net user /add /domain` command can be used to create a domain account.

Such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.

**External References:**
- [4720(S): A user account was created](https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4720)

**Kill Chain Phases:**
- Persistence

**Modified:** 2020-03-23T18:12:36.696Z  
**Name:** Domain Account  
**Type:** Attack Pattern  
**Version:** 1.0

---

### Employee Names

**Created:** 2020-10-02T14:57:15.906Z  
**Description:**

Adversaries may gather employee names that can be used during targeting. Employee names can be used to derive email addresses and to guide other reconnaissance efforts and craft more believable lures.

Adversaries may easily gather employee names, as they may be readily available and exposed via online or other accessible data sets (e.g., [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)). Gathering this information may reveal opportunities for other forms of reconnaissance (e.g., [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (e.g., [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (e.g., [Phishing](https://attack.mitre.org/techniques/T1566) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).

**External References:**
- [CYBERSECURITY INCIDENTS](https://www.opm.gov/cybersecurity/cybersecurity-incidents/)

**Kill Chain Phases:**
- Reconnaissance

**Modified:** 2021-04-15T03:27:49.437Z  
**Name:** Employee Names  
**Type:** Attack Pattern  
**Version:** 1.0

---

### Domain Trust Discovery

**Created:** 2019-02-14T16:15:05.974Z  
**Description:**

Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct [SID-History Injection](https://attack.mitre.org/techniques/T1134/005), [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003), and [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).

Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility [Nltest](https://attack.mitre.org/software/S0359) is known to be used by adversaries to enumerate domain trusts.

**External References:**
- [Windows Defender ATP thwarts Operation WilySupply software supply chain cyberattack](https://www.microsoft.com/security/blog/2017/05/04/windows-defender-atp-thwarts-operation-wilysupply-software-supply-chain-cyberattack/)
- [It’s All About Trust – Forging Kerberos Trust Tickets to Spoof Access across Active Directory Trusts](https://adsecurity.org/?p=1588)
- [Trust Technologies](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc759554(v=ws.10))
- [Domain.GetAllTrustRelationships Method](https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectory.domain.getalltrustrelationships?redirectedfrom=MSDN&view=netframework-4.7.2#System_DirectoryServices_ActiveDirectory_Domain_GetAllTrustRelationships)
- [A Guide to Attacking Domain Trusts](https://posts.specterops.io/a-guide-to-attacking-domain-trusts-971e52cb2944)

**Kill Chain Phases:**
- Discovery

**Modified:** 2022-06-16T19:18:22.305Z  
**Name:** Domain Trust Discovery  
**Type:** Attack Pattern  
**Version:** 1.2

---

### Golden Ticket

**Created:** 2020-02-11T19:13:33.643Z  
**Description:**

Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory.

Using a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.

The KDC service runs on all domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets. The KRBTGT password hash may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) and privileged access to a domain controller.

**External References:**
- [Kerberos Golden Tickets are Now More Golden](https://adsecurity.org/?p=1640)
- [Kerberos Golden Ticket Protection](https://cert.europa.eu/static/WhitePapers/UPDATED%20-%20CERT-EU_Security_Whitepaper_2014-007_Kerberos_Golden_Ticket_Protection_v1_4.pdf)
- [Detecting Forged Kerberos Ticket (Golden Ticket & Silver Ticket) Use in Active Directory](https://adsecurity.org/?p=1515)
- [Kerberos & KRBTGT: Active Directory’s Domain Kerberos Service Account](https://adsecurity.org/?p=483)
- [How to Detect Pass-the-Ticket Attacks](https://blog.stealthbits.com/detect-pass-the-ticket-attacks)
- [Kerberos Golden Ticket Check (Updated)](https://gallery.technet.microsoft.com/scriptcenter/Kerberos-Golden-Ticket-b4814285)

**Kill Chain Phases:**
- Credential Access

**Modified:** 2020-11-05T16:07:03.779Z  
**Name:** Golden Ticket  
**Type:** Attack Pattern  
**Version:** 1.1

---

### Component Object Model and Distributed COM

**Created:** 2018-01-16T16:13:52.465Z  
**Description:**

**This technique has been deprecated. Please use [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) and [Component Object Model](https://attack.mitre.org/techniques/T1559/001).**

Adversaries may use the Windows Component Object Model (COM) and Distributed Component Object Model (DCOM) for local code execution or to execute on remote systems as part of lateral movement.

COM is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). DCOM is transparent middleware that extends the functionality of Component Object Model (COM) beyond a local computer using remote procedure call (RPC) technology.

Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. By default, only Administrators may remotely activate and launch COM objects through DCOM.

Adversaries may abuse COM for local command and/or payload execution. Various COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and VBScript. Specific COM objects also exist to directly perform functions beyond code execution, such as creating a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), fileless download/execution, and other adversary behaviors such as Privilege Escalation and Persistence.

Adversaries may use DCOM for lateral movement. Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications, as well as other Windows objects that contain insecure methods. DCOM can also execute macros in existing documents and may also invoke [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1173) (DDE) execution directly through a COM created instance of a Microsoft Office application, bypassing the need for a malicious document.

**External References:**
- [Hunting COM Objects](https://www.fireeye.com/blog/threat-research/2019/06/hunting-com-objects.html)
- [Component Object Model (COM)](https://msdn.microsoft.com/library/windows/desktop/ms680573.aspx)
- [DCOM Security Enhancements in Windows XP Service Pack 2 and Windows Server 2003 Service Pack 1](https://docs.microsoft.com/en-us/windows/desktop/com/dcom-security-enhancements-in-windows-xp-service-pack-2-and-windows-server-2003-service-pack-1)
- [Setting Process-Wide Security Through the Registry](https://msdn.microsoft.com/en-us/library/windows/desktop/ms687317(v=vs.85).aspx)
- [Registry Values for System-Wide Security](https://msdn.microsoft.com/en-us/library/windows/desktop/ms694331(v=vs.85).aspx)
- [Windows Exploitation Tricks: Exploiting Arbitrary File Writes for Local Elevation of Privilege](https://googleprojectzero.blogspot.com/2018/04/windows-exploitation-tricks-exploiting.html)
- [Lateral Movement using Outlook's CreateObject Method and DotNetToJScript](https://enigma0x3.net/2017/11/16/lateral-movement-using-outlooks-createobject-method-and-dotnettojscript/)
- [Lateral Movement using the MMC20 Application COM Object](https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/)
- [Lateral Movement via DCOM: Round 2](https://enigma0x3.net/2017/01/23/lateral-movement-via-dcom-round-2/)
- [Lateral Movement using Excel.Application and DCOM](https://enigma0x3.net/2017/09/11/lateral-movement-using-excel-application-and-dcom/)
- [Leveraging Excel DDE for lateral movement via DCOM](https://www.cybereason.com/blog/leveraging-excel-dde-for-lateral-movement-via-dcom)

**Kill Chain Phases:**
- Lateral Movement
- Execution

**Modified:** 2020-03-30T13:36:10.069Z  
**Name:** Component Object Model and Distributed COM  
**Type:** Attack Pattern  
**Version:** 2.0

---

### Automated Exfiltration

**Created:** 2017-05-31T21:30:29.458Z  
**Description:**

Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection.

When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041) and [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).

**Kill Chain Phases:**
- Exfiltration

**Modified:** 2022-04-19T22:50:14.956Z  
**Name:** Automated Exfiltration  
**Type:** Attack Pattern  
**Version:** 1.2

---

### Client Configurations

**Created:** 2020-10-02T16:47:16.719Z  
**Description:**

Adversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (e.g., 32 or 64 bit), language, and/or time zone.

Adversaries may gather this information in various ways, such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) (e.g., listening ports, server banners, user agent strings) or [Phishing for Information](https://attack.mitre.org/techniques/T1598). Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the client configurations may also be exposed to adversaries via online or other accessible data sets (e.g., job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (e.g., [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (e.g., [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (e.g., [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [External Remote Services](https://attack.mitre.org/techniques/T1133)).

**External References:**
- [Scanbox: A Reconnaissance Framework Used with Watering Hole Attacks](https://cybersecurity.att.com/blogs/labs-research/scanbox-a-reconnaissance-framework-used-on-watering-hole-attacks)
- [Infrastructure Research and Hunting: Boiling the Domain Ocean](https://threatconnect.com/blog/infrastructure-research-hunting/)

**Kill Chain Phases:**
- Reconnaissance

**Modified:** 2021-10-17T16:35:09.668Z  
**Name:** Client Configurations  
**Type:** Attack Pattern  
**Version:** 1.1

---

### Disable or Modify Cloud Firewall

**Created:** 2020-06-24T16:55:46.243Z  
**Description:**

Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in [Disable or Modify System Firewall](https://attack.mitre.org/techniques/T1562/004).

Cloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary may introduce new firewall rules or policies to allow access into a victim cloud environment. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups to allow any TCP/IP connectivity, or remove networking limitations to support traffic associated with malicious activity (such as cryptomining).

Modifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed.

**External References:**
- [Finding Evil in AWS