### Vulnerability-Specific Detector Integration into HoneyMonkey

To address the exploitation of vulnerabilities, we have developed a vulnerability-specific detector (VSED) and integrated it into the HoneyMonkey framework. The VSED tool implements a source-code level, vulnerability-specific intrusion detection technique, similar to IntroVirt [JKD+05]. For each vulnerability, we manually write "predicates" to test the state of the monitored program, determining when an attacker is about to trigger a vulnerability. VSED operates by inserting breakpoints within the vulnerable code to halt execution before potentially malicious code runs, allowing for secure logging of an exploit alert. For example, VSED would detect a buffer overflow involving the "strcpy" function by setting a breakpoint right before the buggy "strcpy" executes. Once VSED stops the application, the predicate examines the variables passed into "strcpy" to determine if an overflow is imminent.

### Evaluation of VSED Effectiveness

To evaluate the effectiveness of VSED in detecting browser-based exploits, we wrote predicates for six recent Internet Explorer (IE) vulnerabilities and tested them against exploit-URLs from both a suspicious list and a popular list. Although our list of predicates is not yet comprehensive, we can already pinpoint the vulnerabilities exploited by hundreds of exploit-URLs. One limitation of VSED is that it cannot identify zero-day exploits of unknown vulnerabilities.

### Related Work

There is extensive literature on honeypots, with most being deployed to mimic vulnerable servers waiting for client machines [H, P04, J04, KGO+05]. In contrast, HoneyMonkeys are deployed to mimic clients, drawing attacks from malicious servers. To our knowledge, there are three other projects related to the concept of client-side honeypots: email quarantine, shadow honeypots, and Honeyclient.

**Email Quarantine:**
Sidiroglou et al. [SK05] described an email quarantine system that intercepts every incoming message, "opens" all suspicious attachments inside instrumented virtual machines, uses behavior-based anomaly detection to flag potentially malicious actions, quarantines flagged emails, and only delivers messages deemed safe.

**Shadow Honeypots:**
Anagnostakis et al. [ASA+05] proposed the technique of "shadow honeypots," applicable to both servers and clients. The key idea is to combine anomaly detection with honeypots by diverting suspicious traffic identified by anomaly detectors to a shadow version of the target application, which is instrumented to detect potential attacks and filter out false positives. As a demonstration of client-side protection, the authors deployed their prototype on Mozilla Firefox browsers.

**Comparison:**
The two client-side honeypots described above are passive, receiving existing traffic without actively soliciting it. In contrast, HoneyMonkeys are active, seeking out malicious websites and drawing attack traffic from them. Passive approaches provide effective, focused protection for targeted populations, while active approaches stay out of the application's critical path and achieve broader coverage but require additional defense against potential traps and black-holes during recursive redirection. These approaches are complementary and can be used together to provide maximum protection.

**Honeyclient:**
In parallel with our work, the Honeyclient project [HC] shares the goal of identifying browser-based attacks. However, the project has not published any deployment experience or data on detected exploit-URLs. There are also several major differences in implementation: Honeyclient is not VM-based, does not use a pipeline of machines with different patch levels, and does not track URL redirections.

**Categorization of Honeypot Techniques:**
Existing honeypot techniques can be categorized based on:
1. Physical vs. Virtual Honeypots: Physical honeypots [KGO+05] use dedicated physical machines, while virtual honeypots are built on Virtual Machines [VMW, UML].
2. Low-Interaction vs. High-Interaction Honeypots: Low-interaction honeypots [P04] simulate network protocol stacks, while high-interaction honeypots [J04] provide an authentic decoy system environment. HoneyMonkeys belong to the category of high-interaction, virtual honeypots.

**Detection Approaches:**
In contrast to the black-box, state-change-based detection approach used in HoneyMonkey, several papers propose vulnerability-oriented detection methods, which can be further divided into vulnerability-specific and vulnerability-generic methods. The former includes Shield [WGS+04], a network-level filter for detecting worms exploiting known vulnerabilities, and IntroVirt [JKD+05], a technique for specifying and monitoring vulnerability-specific predicates at the code level. The latter includes system call-based intrusion detection systems [FHS+96, FKF+03], memory layout randomization [ASLR, XKI03], non-executable pages [AA], and pointer encryption [CBJ+03]. An advantage of vulnerability-oriented techniques is the ability to detect an exploit earlier and identify the exact vulnerability being exploited. As discussed in Section 5.4, we have incorporated IntroVirt-style, vulnerability-specific detection capability into the HoneyMonkey.

### Summary

We have presented the design and implementation of the Strider HoneyMonkey as the first systematic method for automated web patrol to hunt for malicious websites that exploit browser vulnerabilities. Our analyses of two sets of data showed that the densities of malicious URLs are 1.28% and 0.071%, respectively. In total, we have identified a large community of 741 websites hosting 1,780 exploit-URLs. We proposed using topology graphs based on redirection traffic to capture the relationship between exploit sites and using site ranking algorithms based on the number of directly connected sites and the number of hosted exploit-URLs to identify major players. Our success in detecting the first-reported, in-the-wild, zero-day exploit-URL of the javaprxy.dll vulnerability provided the best demonstration of the effectiveness of our approach. Finally, we discussed several techniques that malicious websites can adopt to evade HoneyMonkey detection, motivating us to incorporate an additional vulnerability-specific exploit detection mechanism to complement the HoneyMonkey’s core black-box exploit detection approach.

### Acknowledgment

We would like to express our sincere thanks to the anonymous reviewers and our shepherd Nick Weaver for their valuable comments.

### References

[AA] S. Andersen and V. Abella, “Data Execution Prevention. Changes to Functionality in Microsoft Windows XP Service Pack 2, Part 3: Memory Protection Technologies,” http://www.microsoft.com/technet/prodtechnol/winxppro/maintain/sp2mempr.mspx.

[ABL04] L. von Ahn, M. Blum, and J. Langford, “Telling Humans and Computers Apart Automatically,” Communications of the ACM, Feb. 2004.

[AL] Alexa, http://www.alexa.com/.

[ASA+05] K. Anagnostakisy, S. Sidiroglouz, P. Akritidis, K. Xinidis, E. Markatos, and A. Keromytis, “Detecting Targeted Attacks Using Shadow Honeypots,” in Proc. USENIX Security Symposium, August 2005.

[ASLR] PaX Address Space Layout Randomization (ASLR), http://pax.grsecurity.net/docs/aslr.txt.

[B04] Xpire.info, http://www.vitalsecurity.org/xpire-splitinfinity-serverhack_malwareinstall-condensed.pdf, Nov. 2004.

[CBJ+03] C. Cowan, S. Beattie, J. Johansen, and P. Wagle, “PointGuard: Protecting pointers from buffer overflow vulnerabilities,” in Proc. USENIX Security Symposium, August 2003.

[CDF+04] C. Carella, J. Dike, N. Fox, and M. Ryan, “UML Extensions for Honeypots in the ISTS Distributed Honeypot Project,” in Proc. IEEE Workshop on Information Assurance, 2004.

[CWS05] “Webroot: CoolWebSearch Top Spyware Threat,” http://www.techweb.com/showArticle.jhtml?articleID=160400314, TechWeb, March 30, 2005.

[D04] Download.Ject, http://www.microsoft.com/security/incident/download_ject.msp, June 2004.

[E04] Ben Edelman, “Who Profits from Security Holes?”, Nov. 2004, http://www.benedelman.org/news/111804-1.html.

[F04] “Follow the Money; or, why does my computer keep getting infested with spyware?” http://www.livejournal.com/users/tacit/125748.html.

[FHS+96] S. Forrest, S. Hofmeyr, A. Somayaji, and T. Longsta, “A sense of self for Unix processes,” in Proc. IEEE Symp. on Security and Privacy, May 1996.

[FKF+03] H. Feng, O. Kolesnikov, P. Fogla, W. Lee, and W. Gong, “Anomaly detection using call stack information,” in Proc. IEEE Symp. on Security and Privacy, May 2003.

[G05] “Googkle.com installed malware by exploiting browser vulnerabilities,” http://www.f-secure.com/v-descs/googkle.shtml.

[G04] Archana Ganapathi, Yi-Min Wang, Ni Lao, and Ji-Rong Wen, "Why PCs Are Fragile and What We Can Do About It: A Study of Windows Registry Problems," in Proc. IEEE DSN/DCC, June 2004.

[H] The Honeynet Project, http://www.honeynet.org/.

[HC] Honeyclient Development Project, http://www.honeyclient.org/.

[HD05] “Another round of DNS cache poisoning,” Handlers Diary, March 30, 2005, http://isc.sans.org/.

[HF] hpHOSTS community managed hosts file, http://www.hosts-file.net/downloads.html.

[HM] Strider HoneyMonkey Exploit Detection, http://research.microsoft.com/HoneyMonkey.

[HR05] T. Holz and F. Raynal, “Detecting Honeypots and other suspicious environments,” in Proc. IEEE Workshop on Information Assurance and Security, 2005.

[IF05] “iframeDOLLARS dot biz partnership maliciousness,” http://isc.sans.org/diary.php?date=2005-05-23.

[ISP] ISP Ranking by Subscriber, http://www.isp-planet.com/research/rankings/index.html.

[IW05] “Scammers use Symantec, DNS holes to push adware,” InfoWorld.com, March 7, 2005, http://www.infoworld.com/article/05/03/07/HNsymantecholesandadware_1.html?DESKTOP%20SECURITY.

[J04] Xuxian Jiang, Dongyan Xu, “Collapsar: A VM-Based Architecture for Network Attack Detention Center,” in Proc. USENIX Security Symposium, Aug. 2004.

[J105] Microsoft Security Advisory (903144) - A COM Object (Javaprxy.dll) Could Cause Internet Explorer to Unexpectedly Exit, http://www.microsoft.com/technet/security/advisory/903144.msp.

[J205] Microsoft Security Bulletin MS05-037 - Vulnerability in JView Profiler Could Allow Remote Code Execution (903235), http://www.microsoft.com/technet/security/bulletin/ms05-037.msp.

[JKD+05] Ashlesha Joshi, Sam King, George Dunlap, Peter Chen, “Detecting Past and Present Intrusions Through Vulnerability-Specific Predicates,” in Proc. SOSP, 2005.

[KGO+05] Sven Krasser, Julian Grizzard, Henry Owen, and John Levine, “The Use of Honeynets to Increase Computer Network Security and User Awareness,” in Journal of Security Education, pp. 23-37, vol. 1, no. 2/3. March 2005.

[L05] Lallous, “Detect if your program is running inside a Virtual Machine,” March 2005, http://www.codeproject.com/system/VmDetect.asp.

[M52] Microsoft Security Bulletin MS05-002, Vulnerability in Cursor and Icon Format Handling Could Allow Remote Code Execution, http://www.microsoft.com/technet/security/Bulletin/MS05-002.msp.

[M311] Microsoft Security Bulletin MS03-011, Flaw in Microsoft VM Could Enable System Compromise, http://www.microsoft.com/technet/security/Bulletin/MS03-011.msp.

[M413] Microsoft Security Bulletin MS04-013, Cumulative Security Update for Outlook Express, http://www.microsoft.com/technet/security/Bulletin/MS04-013.msp.

[NK04] Neal Krawetz, Anti-honeypot technology, Security & Privacy Magazine, IEEE Volume 2, Issue 1, Jan.-Feb. 2004 Page(s):76–79.

[P04] Niels Provos, “A Virtual Honeypot Framework,” in Proc. USENIX Security Symposium, Aug. 2004.

[PVT] AMD Pacifica Virtualization Technology, http://enterprise.amd.com/downloadables/Pacifica.ppt.

[R05] “Russians use affiliate model to spread spyware,” http://www.itnews.com.au/newsstory.aspx?CIaNID=18926.

[R04] Team Register, “Bofra exploit hits our ad serving supplier,” http://www.theregister.co.uk/2004/11/21/register_adserver_attack/, November 2004.

[RP] Red Pill, http://invisiblethings.org/papers/redpill.html.

[S04] Symantec Gateway Security Products DNS Cache Poisoning Vulnerability, http://securityresponse.symantec.com/avcenter/security/Content/2004.06.21.html.

[S05] “Michael Jackson suicide spam leads to Trojan horse,” http://www.sophos.com/virusinfo/articles/jackotrojan.html, Sophos, June 9, 2005.

[SH] “What is Strider HoneyMonkey,” http://research.microsoft.com/honeymonkey/article.aspx, Aug. 2005.

[SK05] Stelios Sidiroglou and Angelos D. Keromytis, “A Network Worm Vaccine Architecture,” in 1st Information Security Practice and Experience Conference (ISPEC), April 2005.

[T05] Michael Ligh, “Tri-Mode Browser Exploits - MHTML, ANI, and ByteVerify,” http://www.mnin.org/write/2005_trimode.html, April 30, 2005.

[UML] Know Your Enemy: Learning with User-Mode Linux. Building Virtual Honeynets using UML, http://www.honeynet.org/papers/uml/.

[VMC+05] Michael Vrable, Justin Ma, Jay Chen, David Moore, Erik Vandekieft, Alex Snoeren, Geoff Voelker, and Stefan Savage, “Scalability, Fidelity, and Containment in the Potemkin Virtual Honeyfarm,” in Proc. ACM Symposium on Operating Systems Principles (SOSP), Oct. 2005.

[VMW] Know Your Enemy: Learning with VMware. Building Virtual Honeynets using VMware, http://www.honeynet.org/papers/vmware/.

[VT] Vanderpool Technology, Technical report, Intel Corporation, 2005.

[W03] Yi-Min Wang, et al., “STRIDER: A Black-box, State-based Approach to Change and Configuration Management and Support,” in Proc. Usenix LISA, Oct. 2003.

[W04] Yi-Min Wang, et al., “Gatekeeper: Monitoring Auto-Start Extensibility Points (ASEPs) for Spyware Management,” in Proc. Usenix LISA, 2004.

[W05] Yi-Min Wang, Doug Beck, Binh Vo, Roussi Roussev, and Chad Verbowski, “Detecting Stealth Software with Strider GhostBuster,” in Proc. DSN, June 2005.

[WGS+04] Helen J. Wang, Chuanxiong Guo, Daniel R. Simon, and Alf Zugenmaier, “Shield: Vulnerability-Driven Network Filters for Preventing Known Vulnerability Exploits,” in Proc. ACM SIGCOMM, August 2004.

[XKI03] J. Xu, Z. Kalbarczyk, and R. K. Iyer, “Transparent Runtime Randomization for Security,” in Proc. Symp. Reliable and Distributed Systems (SRDS), October 2003.

[XSS] “Code insertion in Blogger comments,” March 28, 2005, http://www.securityfocus.com/archive/1/394532.