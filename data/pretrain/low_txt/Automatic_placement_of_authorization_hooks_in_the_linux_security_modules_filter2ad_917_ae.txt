### 3.4 Hook Placement

Hook placement using the authorization graph is straightforward. At each location in the kernel where a controlled kernel function is called, TAHOE places the hooks as determined by the authorization graph. Currently, TAHOE does not optimize hook placement (as discussed in Section 3). In the future, we plan to extend our implementation to include optimization of hook placement.

### 4. IMPLEMENTATION & EXPERIENCE

TAHOE is implemented as a plugin for the CIL toolkit [18] and consists of approximately 3000 lines of Objective Caml [14] code. In this section, we discuss the precision of TAHOE’s analysis, its performance, and our experience with TAHOE.

#### 4.1 Precision of Hook Placement

**Methodology:**
To evaluate the effectiveness of TAHOE’s hook placement, we used it with the Linux-2.4.21 kernel and the hooks from LSM-SELinux, which has 149 hooks placed at 248 locations in the kernel. This version of the kernel is available both with and without hooks placed for LSM-SELinux, allowing us to objectively evaluate the results of TAHOE.

We have currently written idioms for conceptual operations representing file and socket operations (approximately 100 idioms) and evaluated the precision of TAHOE in placing these hooks. For each hook, we manually compared its placement in LSM-SELinux to the placement suggested by TAHOE. Since the hook placement in LSM-SELinux has been extensively verified and is believed to be bug-free, it provides a good benchmark for comparing the effectiveness of TAHOE. We report two metrics: false negatives and false positives, as discussed below.

**False Negatives:**
A hook placed in LSM-SELinux but not placed by TAHOE is classified as a false negative. A false negative in TAHOE’s output corresponds to a missing hook, resulting in insufficient authorization and potentially leading to a security hole.

TAHOE currently analyzes a subset of file hooks (26 hooks) from the LSM-SELINUX kernel module (Section 4.3 details the hooks not analyzed), which authorize various conceptual operations on files and inodes. LSM-SELinux places these hooks at 40 different locations in the kernel. When we used TAHOE for hook placement, the output was missing 5 hooks, which fell into three categories:

1. **Missing Hook for `selinux_file_receive`:**
   - The hook `selinux_file_receive`, placed in the kernel function `scm_detach_fds` in LSM-SELinux, was missing from TAHOE’s output. This was due to the absence of idioms for the conceptual operations `FILE READ`, `FILE WRITE`, and `FILE APPEND`. Adding idioms for these operations eliminated this false negative.

2. **Missing Hook for `selinux_file_set_fowner`:**
   - The hook `selinux_file_set_fowner`, placed in three kernel functions, was missing from the output. This hook updates an internal data structure in LSM-SELinux and does not contain any access vectors. As a result, the analysis in Section 3.1 determined that this hook does not perform any operations, leading to false negatives. These can be eliminated by considering the update to the data structure as a new conceptual operation and adding corresponding idioms for kernel analysis.

3. **Missing Hook for `selinux_inode_revalidate`:**
   - The hook `selinux_inode_revalidate`, placed in the kernel function `do_revalidate`, was missing from the output. However, upon closer investigation, we found that this was not a false negative. In LSM-SELinux, the authorization query posed by this hook always succeeds. Therefore, TAHOE infers that no operations are authorized by this hook. This example highlights the value of semantic information in determining hook placement.

TAHOE currently analyzes 12 socket hooks, which are placed at 12 locations in the kernel in LSM-SELinux. It identified all these hook placements without any false negatives.

**False Positives:**
The output of TAHOE may contain hooks that are not placed in LSM-SELinux. This can occur due to two reasons: (i) imprecision in the analysis, where the kernel analysis infers that a kernel function performs more controlled operations than it actually does, or (ii) unoptimized hook placement, such as the redundant placement of `selinux_inode_permission` discussed in Section 3. We classify hooks in category (i) as false positives because they result in extra authorizations being performed. While false positives do not lead to security holes, they may result in entities with requisite permissions being denied authorization. Thus, it is desirable to have a low false positive rate.

We found that TAHOE had false positives at 13 out of the 40 locations in LSM-SELinux where file hooks are placed, and at 4 out of the 12 locations where socket hooks are placed in LSM-SELinux. In each case, one extra hook was placed in addition to the required hook. This imprecision was due to imprecise idioms employed by kernel analysis. Specifically, several functions were wrongly classified as performing the conceptual operations `FILE READ`, `DIR READ`, `FILE EXECUTE`, and `DIR SEARCH`. We expect that further refinement of these idioms will reduce the number of false positives.

**Effectiveness at Finding Controlled Kernel Functions:**
So far, we have evaluated TAHOE’s hook placement at the controlled kernel functions defined by LSM-SELinux hook placements. However, TAHOE also infers controlled kernel functions using the heuristic described in Algorithm 5. We found that the controlled kernel functions identified by TAHOE for placing file and socket hooks were the same as those identified by LSM-SELinux in all but one case. TAHOE identified `open_namei` as a controlled kernel function that performed several controlled operations, including `FILE CREATE` and `FILE EXECUTE`. However, in LSM-SELinux, hooks to protect these operations were placed in functions called by `open_namei`, rather than where `open_namei` was called.

#### 4.2 Performance

We conducted timing experiments on a machine with a 1GHz AMD Athlon processor and 1GB RAM. Hook analysis took about 11 minutes, while kernel analysis took about 8 minutes. The shorter runtime for kernel analysis can be attributed to its simpler nature.

#### 4.3 Opportunities for Improvement

While we are encouraged by TAHOE’s ability to place hooks, we have identified some shortcomings that we plan to address in future work:

1. **Incomplete Analysis of Hooks:**
   - TAHOE currently does not analyze all hooks in LSM-SELinux. Specifically, LSM-SELinux has several hooks to allocate and free data structures internal to the kernel module (which implements hooks). While these do not authorize any conceptual operations, their proper placement is crucial to avoid runtime exceptions.

2. **Resource Instance Recovery:**
   - TAHOE’s kernel analysis recovers the conceptual operations performed by a kernel function but does not recover the specific resource instances on which they are performed—this is currently done manually. For example, in Figure 3(B), the resource instances `dir` and `dentry` were recovered manually.

3. **Granularity of Hook Placement:**
   - TAHOE can currently only place hooks at the granularity of function calls, i.e., it places hooks at each location where controlled kernel functions are called. There are cases in LSM-SELinux (e.g., `selinux_file_set_fowner`) where hooks are placed at a finer granularity, such as before modifications of kernel data structures.

4. **Automated Idiom Writing and Refinement:**
   - While idiom writing and refinement can improve the results of kernel analysis, they are manual procedures. We plan to investigate automatic idiom writing and refinement techniques in the future.

### 5. RELATED WORK

Prior work on the formal analysis of hook placement in the LSM framework has focused on verifying the correctness of existing hook placement. Vali [10] is a runtime tool to determine the consistency of hook placement in LSM. It is based on the observation that hook placement in LSM is typically consistent across different code paths in the kernel, and thus inconsistencies are indicative of bugs. Analysis is performed on execution traces obtained by running an instrumented version of the kernel. The authors also demonstrate a static version of Vali, built using the analysis capabilities of JaBA [13], a static analysis tool to automatically identify the least privileges needed to execute a Java program.

Zhang et al. [23] demonstrate the use of a type-qualifier-based tool, CQUAL [5], to determine inadequacies in hook placement. Their analysis determines that a resource has been authorized by a hook before a conceptual operation is performed on it. However, the analysis requires as input the set of conceptual operations performed on a resource to verify the adequacy of hook placement, which is used as the type-qualifier-lattice by CQUAL. They use the output of Vali to obtain the type-qualifier lattice. The above efforts, however, do not use the source code of hooks in their analysis.

While we have focused on the problem of automatic hook placement, we believe that the analysis employed by TAHOE can be used for verifying existing hook placement as well. For instance, authorization graphs extracted by TAHOE can be compared against the authorization graph corresponding to the existing hook placement, and anomalies can be flagged as potential errors.

The analyses employed by various stages of TAHOE are related to prior work. Hook analysis employs a flow-sensitive, context-sensitive program analysis, which has been explored by several tools in the past, including MOPS [3], MC [4], and JaBA [13]. The use of idioms in kernel analysis is conceptually similar to the use of compiler-extensions (written in a language called Metal) by MC. Vali used runtime techniques to extract the authorization graph from a hook-placed kernel and used consistency analysis on this graph to identify anomalies. Authorization graphs are also similar to access rights invocation graphs used by JaBA.

While TAHOE addresses the problem of enforcing a given authorization policy by placing hooks to a kernel module that encapsulates the policy, it does not ensure that the authorization policy itself meets security goals, such as integrity and confidentiality. SLAT [8] and Gokyo [11] are tools that can be used for this purpose. Both these tools construct an abstract model of the authorization policy (e.g., an SELinux policy) and analyze them to determine conflicts between the policy and the system security goals.

### 6. CONCLUSION

The growing popularity of the LSM framework to implement MAC authorization policies, coupled with recent interest in LSM-like frameworks for user-level applications [12, 21], underscores the need for the security of these frameworks. We believe that the techniques presented in this paper are a useful first step towards automatic enforcement of authorization policies through the use of formal reasoning and program analysis.

### ACKNOWLEDGMENTS

Many thanks to Shai Rubin and the CCS reviewers for their insightful comments. Thanks also to Vijayan Prabhakaran for patiently answering our file system questions.

### 7. REFERENCES

[1] J. P. Anderson. Computer security technology planning study, volume II. Technical Report ESD-TR-73-51, Deputy for Command and Management Systems, HQ Electronics Systems Division (AFSC), L. G. Hanscom Field, Bedford, MA, October 1972.
[2] L. Badger, D. Sterne, D. Sherman, K. Walker, and S. Haghighat. A domain and type enforcement UNIX prototype. In 5th USENIX UNIX Security, June 1995.
[3] H. Chen. Lightweight Model Checking for Improving Software Security. PhD thesis, University of California, Berkeley, Fall 2004.
[4] D. Engler, B. Chelf, A. Chou, and S. Hallem. Checking system rules using system-specific programmer-written compiler extensions. In 4th ACM/USENIX OSDI, December 2000.
[5] J. S. Foster, M. Fahndrich, and A. Aiken. A theory of type qualifiers. In ACM SIGPLAN PLDI, May 1999.
[6] M. R. Garey and D. S. Johnson. Computers and Intractability. Freeman, New York, NY, 1979.
[7] L. Gong and G. Ellison. Inside JavaT M 2 Platform Security: Architecture, API Design, and Implementation. Pearson Education, 2003.
[8] J. D. Guttman, A. L. Herzog, J. D. Ramsdell, and C. W. Skorupka. Verifying information flow goals in security-enhanced Linux. JCS, 13(1):115–134, 2005.
[9] Example idioms. www.cs.wisc.edu/∼vg/papers/ccs2005a/idioms.html.
[10] T. Jaeger, A. Edwards, and X. Zhang. Consistency analysis of authorization hook placement in the Linux security modules framework. ACM TISSEC, 7(2):175–205, May 2004.
[11] T. Jaeger, R. Sailer, and X. Zhang. Analyzing integrity protection in the SELinux example policy. In 12th USENIX Security, August 2003.
[12] D. Kilpatrick, W. Salamon, and C. Vance. Securing the X Window system with SELinux. Technical Report 03-006, NAI Labs, March 2003.
[13] L. Koved, M. Pistoia, and A. Kershenbaum. Access rights analysis for Java. In ACM SIGPLAN OOPSLA, November 2002.
[14] X. Leroy, D. Doligez, J. Garrigue, D. Rémy, and J. Vouillon. The Objective Caml system (release 3.08). Technical report, INRIA Rocquencourt, July 2004.
[15] P. Loscocco and S. Smalley. Integrating flexible support for security policies into the Linux operating system. In USENIX Annual Technical, June 2001.
[16] J. McLean. The specification and modeling of computer security. IEEE Computer, 23(1):9–16, 1990.
[17] S. S. Muchnick. Advanced Compiler Design and Implementation. Morgan Kaufmann, 1997.
[18] G. C. Necula, S. McPeak, S. P. Rahul, and W. Weimer. CIL: Intermediate language and tools for analysis and transformation of C programs. In 11th Intl. Conf. on Compiler Construction, April 2002.
[19] M. Sharir and A. Pnueli. Two approaches to interprocedural dataflow analysis. In S. Muchnick and N. Jones, editors, Program Flow Analysis: Theory and Applications, pages 189–233. Prentice Hall, 1981.
[20] Simplify. http://research.compaq.com/SRC/esc/Simplify.html.
[21] Tresys Technology. Security-enhanced Linux policy management framework. http://sepolicy-server.sourceforge.net.
[22] C. Wright, C. Cowan, S. Smalley, J. Morris, and G. Kroah-Hartman. Linux security modules: General security support for the Linux kernel. In 11th USENIX Security, August 2002.
[23] X. Zhang, A. Edwards, and T. Jaeger. Using CQUAL for static analysis of authorization hook placement. In 11th USENIX Security, August 2002.