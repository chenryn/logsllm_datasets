### Security of PKCS Tokens and Key Management Models

Kremer, Steel, and Warinschi [18] propose a model designed to provide greater generality and support for more powerful corruptions. Kremer, Künemann, and Steel [17] define a Universal Composability (UC) functionality for key management, using their model to prove the security of a minimal example. This model imposes constraints on the interactions between key management and key usage.

Shrimpton, Stam, and Warinschi [23] demonstrate that the indistinguishability definition of security for cryptographic APIs can be composed with a natural class of symmetric-key primitives, such as AEAD and MAC, to provide cryptographic services. The security of these services is defined by extending the attack vectors of standard AEAD and MAC security with all oracles available to the cryptographic API adversary. Our approach departs from this and adopts an alternative formulation for the security of cryptographic services, inspired by the UC framework. As discussed in Appendix A, the UC framework provides two key advantages: (i) clear composition guarantees for cryptographic services with other systems, and (ii) a clean and intuitive view of correctness and security guarantees for clients of cryptographic services.

### Analysis Tools and Techniques

Blanchet and Chaudhuri [11] use ProVerif to analyze a protocol for secure file sharing, which includes distributed key management features. Their analysis is conducted in the symbolic model of cryptography, which, while providing weaker guarantees, allows for a higher degree of automation. CryptoVerif [9] was one of the first tools to support cryptographic security proofs in the computational model. It uses probabilistic process algebra as a modeling language and leverages different notions of equivalence to support proofs of equivalence, equivalence up to failure events, and simple forms of hybrid arguments. CryptoVerif has been used to verify both primitives and protocols, including a recent application to TLS 1.3 [10].

### Conclusion

We have proven a concrete security bound for the DMP of AWS KMS, based on standard cryptographic assumptions. The bound is tight, increasing linearly with the number of entities in the system, and it has been machine-checked in EasyCrypt. For practical purposes, our work provides strong evidence that the DMP is as secure as an ideal encryption service, under the assumption that any quorum of AWS operators authorizing a domain update operation includes at least one honest operator.

### Access to EasyCrypt Code

The EasyCrypt code is available at gitlab.com/kmsver/kmsdmp.

### Acknowledgements

Manuel Barbosa was supported by grant SFRH/BSAB/143018/2018 awarded by the Portuguese Foundation for Science and Technology (FCT). Vitor Pereira was supported by grant FCT-PD/BD/113967/201 awarded by FCT. This work was partially funded by national funds via FCT in the context of project PTDC/CCI-INF/31698/2017.

### References

1. Michel Abdalla, Mihir Bellare, and Phillip Rogaway. DHIES: An encryption scheme based on the Diffie-Hellman problem. Contributions to IEEE P1363a, September 1998.
2. Michel Abdalla, Mihir Bellare, and Phillip Rogaway. The oracle Diffie-Hellman assumptions and an analysis of DHIES. In David Naccache, editor, CT-RSA 2001, volume 2020 of LNCS, pages 143–158. Springer, Heidelberg, April 2001.
3. José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, and François Dupressoir. Verifiable side-channel security of cryptographic implementations: Constant-time MEE-CBC. In Thomas Peyrin, editor, FSE 2016, volume 9783 of LNCS, pages 163–184. Springer, Heidelberg, March 2016.
4. José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, François Dupressoir, Benjamin Grégoire, Vincent Laporte, and Vitor Pereira. A fast and verified software stack for secure function evaluation. In Bhavani M. Thuraisingham, David Evans, Tal Malkin, and Dongyan Xu, editors, Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, CCS 2017, Dallas, TX, USA, October 30 - November 03, 2017, pages 1989–2006. ACM, 2017.
5. Amazon Web Services (AWS). AWS Key Management Service Cryptographic Details, August 2018. https://d1.awsstatic.com/whitepapers/KMS-Cryptographic-Details.pdf.
6. Gilles Barthe, François Dupressoir, Benjamin Grégoire, César Kunz, Benedikt Schmidt, and Pierre-Yves Strub. EasyCrypt: A tutorial. In Alessandro Aldini, Javier López, and Fabio Martinelli, editors, Foundations of Security Analysis and Design VII - FOSAD 2012/2013 Tutorial Lectures, volume 8604 of Lecture Notes in Computer Science, pages 146–166. Springer, 2013.
7. Gilles Barthe, Benjamin Grégoire, Sylvain Heraud, and Santiago Zanella Béguelin. Computer-aided security proofs for the working cryptographer. In Phillip Rogaway, editor, CRYPTO 2011, volume 6841 of LNCS, pages 71–90. Springer, Heidelberg, August 2011.
8. Mihir Bellare, Alexandra Boldyreva, and Jessica Staddon. Randomness re-use in multi-recipient encryption schemes. In Yvo Desmedt, editor, PKC 2003, volume 2567 of LNCS, pages 85–99. Springer, Heidelberg, January 2003.
9. Bruno Blanchet. A computationally sound mechanized prover for security protocols. In 2006 IEEE Symposium on Security and Privacy, pages 140–154. IEEE Computer Society Press, May 2006.
10. Bruno Blanchet. Composition theorems for CryptoVerif and application to TLS 1.3. In 31st IEEE Computer Security Foundations Symposium, CSF 2018, Oxford, United Kingdom, July 9-12, 2018, pages 16–30. IEEE Computer Society, 2018.
11. Bruno Blanchet and Avik Chaudhuri. Automated formal analysis of a protocol for secure file sharing on untrusted storage. In 2008 IEEE Symposium on Security and Privacy (S&P 2008), 18-21 May 2008, Oakland, California, USA, pages 417–431. IEEE Computer Society, 2008.
12. Matteo Bortolozzo, Matteo Centenaro, Riccardo Focardi, and Graham Steel. Attacking and fixing PKCS#11 security tokens. In Ehab Al-Shaer, Angelos D. Keromytis, and Vitaly Shmatikov, editors, ACM CCS 10, pages 260–269. ACM Press, October 2010.
13. Christian Cachin and Nishanth Chandran. A secure cryptographic token interface. In Proceedings of the 22nd IEEE Computer Security Foundations Symposium, CSF 2009, Port Jefferson, New York, USA, July 8-10, 2009, pages 141–153. IEEE Computer Society, 2009.
14. Ran Canetti. Universally composable security: A new paradigm for cryptographic protocols. In 42nd FOCS, pages 136–145. IEEE Computer Society Press, October 2001.
15. Ran Canetti, Yevgeniy Dodis, Rafael Pass, and Shabsi Walfish. Universally composable security with global setup. In Salil P. Vadhan, editor, TCC 2007, volume 4392 of LNCS, pages 61–85. Springer, Heidelberg, February 2007.
16. Stéphanie Delaune, Steve Kremer, and Graham Steel. Formal analysis of PKCS#11. In Proceedings of the 21st IEEE Computer Security Foundations Symposium, CSF 2008, Pittsburgh, Pennsylvania, USA, 23-25 June 2008, pages 331–344. IEEE Computer Society, 2008.
17. Steve Kremer, Robert Künemann, and Graham Steel. Universally composable key-management. In Jason Crampton, Sushil Jajodia, and Keith Mayes, editors, ESORICS 2013, volume 8134 of LNCS, pages 327–344. Springer, Heidelberg, September 2013.
18. Steve Kremer, Graham Steel, and Bogdan Warinschi. Security for key management interfaces. In Proceedings of the 24th IEEE Computer Security Foundations Symposium, CSF 2011, Cernay-la-Ville, France, 27-29 June, 2011, pages 266–280. IEEE Computer Society, 2011.
19. Matthew M. Papi, Mahmood Ali, Telmo Luis Correa, Jr., Jeff H. Perkins, and Michael D. Ernst. Practical pluggable types for Java. In Proceedings of the 2008 International Symposium on Software Testing and Analysis, ISSTA ’08, pages 201–212, New York, NY, USA, 2008. ACM.
20. Phillip Rogaway. Formalizing human ignorance. In Phong Q. Nguyen, editor, Progress in Cryptology - VIETCRYPT 06, volume 4341 of LNCS, pages 211–228. Springer, Heidelberg, September 2006.
21. Victor Shoup. A Proposal for an ISO Standard for Public Key Encryption (version 2.1), 2001. https://www.shoup.net/papers/iso-2_1.pdf.
22. Victor Shoup. A proposal for an ISO standard for public key encryption. Cryptology ePrint Archive, Report 2001/112, 2001. http://eprint.iacr.org/2001/112.
23. Thomas Shrimpton, Martijn Stam, and Bogdan Warinschi. A modular treatment of cryptographic APIs: The symmetric-key case. In Matthew Robshaw and Jonathan Katz, editors, CRYPTO 2016, Part I, volume 9814 of LNCS, pages 277–307. Springer, Heidelberg, August 2016.

### Relation to Universal Composability

Although we have not formalized it syntactically, our security model and proof can be recast in terms of Universal Composability with global setup [15]. This framework extends the UC model to enable set-up assumptions such as common reference strings or public-key infrastructures (PKI). In this setting, we consider three types of parties:

- **Hosts**: Provide the environment \( Z \) with the high-level interface of AEAD encryption and decryption, and enable \( A \) to install trusts.
- **HSMs (Hardware Security Modules)**: Enable \( A \) to update trusts and manage keys, as well as perform encryption and decryption operations based on requests placed by hosts.
- **Operators**: Enable \( Z \) to generate key attestation statements for operators and HSMs.

The proof assumes static corruptions, where some parties are known to be corrupt from the beginning of computation.

In the UC framework, the proof of security would be carried out in a hybrid model. The first hybrid functionality is a confidential and authenticated channel through which hosts place encryption and decryption requests to HSMs. This hybrid functionality is not used by the KMS DMP protocol in any of the domain management operations, which are the focus of our analysis; it captures only the architectural choice that KMS hosts collect end-user encryption/decryption requests and forward them to HSMs (see footnote 13). Future work will extend the proof to consider the specific secure channel used by KMS for this purpose, which builds on top of the DMP itself.

Additionally, the hybrid model includes two set-up assumptions. The first set-up assumption is a standard PKI functionality used only by operators, which registers the identity keys of genuine entities in the system. This models the real-world operation of KMS DMP, where operators are assumed to know the set of genuine entities. A crucial aspect of the security guarantees we prove for KMS DMP is that this resource is restricted to operators, ensuring that trust honesty is preserved by host and HSM actions.

The second set-up assumption captures the global quorum invariant that, in any group of \( n \) operators, there is at least one honest operator.