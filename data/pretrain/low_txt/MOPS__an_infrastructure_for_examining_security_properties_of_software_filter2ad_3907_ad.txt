### Stack Context and Environment Management

When using `setjmp(env)` to save the current execution context, it is essential to ensure that each `longjmp` call is correctly matched with its corresponding `setjmp` call. Pattern variables, as described in Section 3.1.2, can handle this matching naturally, provided there is no aliasing.

### 5.1.4 Results

MOPS (Model Checking for Security Properties) successfully detected a vulnerability in wu-ftpd version 2.4 beta 11. The tool identified the specific path that led to the vulnerability, as reported in [12].

In wu-ftpd version 2.4 beta 12, the vulnerability was addressed by safeguarding every `seteuid` call with signal enabling and disabling. Specifically, the new version precedes each call to gain privilege (`seteuid(0)`) with a call to disable signals and follows each call to drop privilege (`seteuid(!0)`) with a call to enable signals. MOPS verified that this updated version satisfies Property 4, as outlined above.

### 5.2 Checking Proper Privilege Dropping

Many server processes start with root privileges and often need to temporarily or permanently drop these privileges before performing untrusted operations on behalf of a user. Failure to drop privileges correctly can allow an attacker to take control of the application or even the operating system.

To detect such vulnerabilities, we need to identify which statements in the program may be executed with elevated privileges. Using the techniques described in Section 4, we constructed a Finite State Automaton (FSA) to model privilege transitions in Linux processes (Figure 9 shows the FSA, with transition labels removed for clarity). Each state in the FSA encodes whether the root privilege is present in the real user ID (ruid), effective user ID (euid), and saved set-user ID (suid).

By using MOPS to determine the set of FSA states in which each statement may be executed, we can identify all statements that may run with elevated privileges. This allows us to check if operations intended to drop privileges are successful. Using this approach, we identified two known vulnerabilities in sendmail: 
- sendmail 8.10.1 fails to permanently drop root privileges in user IDs due to a bug in the Linux kernel and an unexpected interaction between user IDs and capabilities [16].
- sendmail 8.12.0 fails to permanently drop privileges in group IDs due to an unexpected interaction between user IDs and group IDs [19].

For more details on these vulnerabilities, see [8].

### 5.3 Verifying System Call Success

The failure of certain security-related system calls can lead to vulnerabilities. For example, if `setuid(getuid())` fails, the process may fail to drop privileges permanently, allowing an untrusted application to take over the OS. We define the following security property:

**Property 5:** The `setuid` system call should never fail.

The FSA we built for modeling uid-setting system calls includes a state representing failed calls. With this FSA, MOPS can verify that no uid-setting system calls will fail in OpenSSH 2.5.2.

### 5.4 Performance

We evaluated MOPS's performance using sendmail 8.12.0, which has 53,000 lines of code. On a 1.5 GHz Pentium machine, MOPS spent 110 seconds parsing the source files and 95 seconds on model checking. The computation required less than 300 MB of memory. This suggests that MOPS scales well to large security-relevant programs.

### 6. Discussion

The primary goals of MOPS are soundness and scalability. Soundness enables MOPS to be used both for finding bugs and verifying properties. To evaluate soundness, we consider the two stages of MOPS: transforming a C program into a Pushdown Automaton (PDA) and model checking the PDA. The model checking stage is always sound. The transformation stage is sound if every execution path in the program is captured in the PDA, requiring the program to be portable, single-threaded, and free of implementation-defined behavior (e.g., no buffer overruns and no runtime code generation).

MOPS currently ignores control flow via function pointers, signal handlers, and non-local jumps via `setjmp/longjmp`, which introduces some unsoundness. However, this is not a fundamental limitation but rather a current implementation constraint. We can manually transform the ignored control flow into equivalent forms that MOPS can handle, as demonstrated in Section 5.1.3. We are working on automating this process for future versions of MOPS.

Scalability is crucial for MOPS to work on a wide range of programs, especially complex ones that are more error-prone. MOPS achieves high scalability by disregarding most data flow and efficiently compacting Control Flow Graphs (CFGs) [7]. This comes at the cost of lower precision, as MOPS may consider infeasible paths as feasible and issue extraneous warnings. We are investigating how to enhance MOPS's precision without sacrificing scalability.

### 7. Related Work

Several static analysis techniques have been used to detect specific security vulnerabilities:
- Wagner et al. used integer range analysis to find buffer overruns [18].
- Koved et al. used context-sensitive, flow-sensitive, interprocedural data flow analysis to compute access rights in Java [15].
- CQUAL is a type-based analysis tool for specifying and checking properties of C programs, used to detect format string vulnerabilities [17] and verify authorization hook placement in the Linux Security Model framework [20].
- Metal [9, 1] checks for rule violations in operating systems using meta-level compilation. It aims to find bugs with few false positives, making it neither sound nor complete.
- SLAM [2, 3] uses software model checking to verify temporal safety properties, validating programs against well-designed interfaces. However, SLAM does not yet scale to very large programs. MOPS trades precision for scalability and efficiency by focusing on control flow and ignoring most data flow.

### 8. Conclusions

We have described a formal approach for efficiently checking a wide range of security properties in large programs, implemented in a tool called MOPS. This approach identifies rules of safe programming practice, encodes them as security properties, and describes them using FSAs. MOPS models the program as a PDA and uses model checking to determine the reachability of risky states. The key advantages of this approach are:
1. Full interprocedural analysis, making it useful for finding interprocedural bugs.
2. Soundness (modulo mild assumptions), ensuring reliable detection of specified bugs.
3. Efficient and scalable, thanks to our novel compaction algorithm.

Preliminary evidence suggests that MOPS will be helpful in finding various security vulnerabilities in C programs. We are extending MOPS to incorporate more data flow analysis and check more security properties in more programs.

### 9. Acknowledgment

We thank Drew Dean for suggesting the security property regarding `setjmp` and `longjmp`. Robert Johnson helped with the initial implementation of pattern variables, and David Schultz improved MOPS's usability. We are grateful to Zhendong Su, David Schultz, Naveen Sastry, Dawn Song, Helen Wang, and the anonymous reviewers for their valuable comments.

### 10. Availability

MOPS is available at: http://www.cs.berkeley.edu/~daw/mops/

### 11. References

[1] K. Ashcraft and D. Engler. Using programmer-written compiler extensions to catch security holes. In Proceedings of IEEE Security and Privacy 2002, 2002.

[2] T. Ball and S. K. Rajamani. Automatically validating temporal safety properties of interfaces. In SPIN 2001, Workshop on Model Checking of Software, 2001.

[3] T. Ball and S. K. Rajamani. The SLAM project: Debugging system software via static analysis. In POPL 2002, 2002.

[4] F. Besson, T. Jensen, D. L. Metayer, and T. Thorn. Model checking security properties of control flow graphs. Journal of Computer Security, 9:217–250, 2001.

[5] M. Bishop and M. Dilger. Checking for race conditions in file access. Computing Systems, 9(2):131–152, 1996.

[6] CERT. CERT Advisory CA-1997-16: ftpd signal handling vulnerability. http://www.cert.org/advisories/CA-1997-16.html.

[7] H. Chen and D. Wagner. MOPS: An infrastructure for examining security properties of software. Technical Report UCB//CSD-02-1197, UC Berkeley, 2002.

[8] H. Chen, D. Wagner, and D. Dean. Setuid demystified. In Proceedings of the Eleventh Usenix Security Symposium, San Francisco, CA, 2002.

[9] D. Engler, B. Chelf, A. Chou, and S. Hallem. Checking system rules using system-specific, programmer-written compiler extensions. In OSDI, 2000.

[10] J. Esparza, D. Hansel, P. Rossmanith, and S. Schwoon. Efficient algorithms for model checking pushdown systems. Technical report, Technische Universität München, 2000.

[11] J. Foster, M. Fähndrich, and A. Aiken. A theory of type qualifiers. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI’99), May 1999.

[12] D. Greenman. Serious security bug in wu-ftpd v2.4. http://online.securityfocus.com/archive/1/6056/1997-01-04/1997-01-10/2.

[13] J. Hopcroft and J. Ullman. Introduction to automata theory, languages, and computation. Addison-Wesley, 1979.

[14] T. Jensen, D. L. Metayer, and T. Thorn. Verification of control flow based security properties. In Proceedings of the 1999 IEEE Symposium on Security and Privacy, 1999.

[15] L. Koved, M. Pistoia, and A. Kershenbaum. Access rights analysis for Java. In Proceedings of the 17th Annual ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications, 2002.

[16] Sendmail Inc. Sendmail workaround for Linux capabilities bug. http://www.sendmail.org/sendmail.8.10.1.LINUX-SECURITY.txt.

[17] U. Shankar, K. Talwar, J. S. Foster, and D. Wagner. Detecting format string vulnerabilities with type qualifiers. In Proceedings of the 10th USENIX Security Symposium, 2001.

[18] D. Wagner, J. Foster, E. Brewer, and A. Aiken. A first step towards automated detection of buffer overrun vulnerabilities. In Proceedings of NDSS 2000, 2000.

[19] M. Zalewski. Multiple local sendmail vulnerabilities. http://razor.bindview.com/publish/advisories/adv_sm812.html.

[20] X. Zhang, A. Edwards, and T. Jaeger. Using CQUAL for static analysis of authorization hook placement. In Proceedings of the Eleventh Usenix Security Symposium, August 2002.