以下是优化后的文本，以使其更加清晰、连贯和专业：

---

### 参考文献

1. [34] Úlfar Erlingsson, Martín Abadi, Michael Vrable, Mihai Budiu, and George C. Necula. 2006. XFI: Software Guards for System Address Spaces. In Proceedings of the 7th Symposium on Operating Systems Design and Implementation (OSDI).
2. [35] Francisco Falcon. 2015. Exploiting Adobe Flash Player in the Era of Control Flow Guard. In Black Hat Europe.
3. [36] Behrad Garmany and Tilo Müller. 2013. PRIME: Private RSA Infrastructure for Memory-less Encryption. In Proceedings of the 29th Annual Computer Security Applications Conference (ACSAC). 149–158.
4. [37] Dan Goodin. 2007. Safari Zero-day Exploit Nets $10,000 Prize. <https://www.theregister.co.uk/2007/04/20/pwn-2-ownwinner/>.
5. [38] Brian Gorenc. 2017. Pwn2Own 2017 – An Event for the Ages. <https://blog.trendmicro.com/pwn2own-2017-event-ages/>.
6. [39] Shay Gueron. 2010. Intel® Advanced Encryption Standard (AES) New Instructions Set. Intel Corporation (2010).
7. [40] Hong Hu, Zheng Leong Chua, Sendroiu Adrian, Prateek Saxena, and Zhenkai Liang. 2015. Automatic Generation of Data-Oriented Exploits. In Proceedings of the 24th USENIX Security Symposium. 177–192.
8. [41] Hong Hu, Shweta Shinde, Sendroiu Adrian, Zheng Leong Chua, Prateek Saxena, and Zhenkai Liang. 2016. Data-Oriented Programming: On the Expressiveness of Non-Control Data Attacks. In Proceedings of the 37th IEEE Symposium on Security & Privacy (S&P).
9. [42] Intel. 2015. Software Guard Extensions SDK. <https://software.intel.com/sites/default/files/managed/b4/cf/Intel-SGX-SDK-Developer-Reference-for-Windows-OS.pdf>.
10. [43] Trevor Jim, J. Greg Morrisett, Dan Grossman, Michael W. Hicks, James Cheney, and Yanling Wang. 2002. Cyclone: A Safe Dialect of C. In Proceedings of the USENIX Annual Technical Conference (ATC). 275–288.
11. [44] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. 2019. Spectre Attacks: Exploiting Speculative Execution. In Proceedings of the 40th IEEE Symposium on Security & Privacy (S&P).
12. [45] Koen Koning, Xi Chen, Herbert Bos, Cristiano Giuffrida, and Elias Athanasopoulos. 2017. No Need to Hide: Protecting Safe Regions on Commodity Hardware. In Proceedings of the 12th European Conference on Computer Systems (EuroSys). 437–452.
13. [46] Vadim Kotov. 2014. Dissecting the Newest IE10 0-day Exploit (CVE-2014-0322). <http://labs.bromium.com/2014/02/25/dissecting-the-newest-ie10-0-day-exploit-cve-2014-0322/>.
14. [47] Volodymyr Kuznetsov, László Szekeres, Mathias Payer, George Candea, R. Sekar, and Dawn Song. 2014. Code-Pointer Integrity. In Proceedings of the 11th USENIX Conference on Operating Systems Design and Implementation (OSDI). 147–163.
15. [48] MWR Labs. 2013. MWR Labs Pwn2Own 2013 Write-up - Webkit Exploit. <https://labs.mwrinfosecurity.com/blog/mwr-labs-pwn2own-2013-write-up-webkit-exploit/>.
16. [49] Michael Larabel. 2016. The Current Spectre / Meltdown Mitigation Overhead Benchmarks on Linux 5.0. <https://www.phoronix.com/scan.php?page=article&item=linux50-spectre-meltdown>.
17. [50] Chris Lattner and Vikram Adve. 2005. Automatic Pool Allocation: Improving Performance by Controlling Data Structure Layout in the Heap. In Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI). 129–142.
18. [51] Byoungyoung Lee, Chengyu Song, Yeongjin Jang, Tielei Wang, Taesoo Kim, Long Lu, and Wenke Lee. 2015. Preventing Use-after-free with Dangling Pointers Nullification. In Proceedings of the 22nd Annual Network and Distributed System Security Symposium (NDSS).
19. [52] Haifei Li. 2011. Understanding and Exploiting Flash ActionScript Vulnerabilities.
20. [53] Joshua Lind, Christian Priebe, Divya Muthukumaran, Dan O’Keeffe, Pierre-Louis Aublin, Florian Kelbert, Tobias Reiher, David Goltzsche, David Eyers, Rüdiger Kapitza, Christof Fetzer, and Peter Pietzuch. 2017. Glamdring: Automatic Application Partitioning for Intel SGX. In Proceedings of the USENIX Annual Technical Conference (ATC).
21. [54] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. 2018. Meltdown: Reading Kernel Memory from User Space. In Proceedings of the 27th USENIX Security Symposium.
22. [55] Yutao Liu, Tianyu Zhou, Kexin Chen, Haibo Chen, and Yubin Xia. 2015. Thwarting Memory Disclosure with Efficient Hypervisor-Enforced Intra-Domain Isolation. In Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS). 1607–1619.
23. [56] Chris Lomont. 2016. Introduction to Intel Advanced Vector Extensions. <https://software.intel.com/en-us/articles/introduction-to-intel-advanced-vector-extensions>.
24. [57] Vitaliy B. Lvin, Gene Novark, Emery D. Berger, and Benjamin G. Zorn. 2008. Archipelago: Trading Address Space for Reliability and Security. In Proceedings of the 13th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS). 115–124.
25. [58] Ali Jose Mashtizadeh, Andrea Bittau, Dan Boneh, and David Mazières. 2015. CCFI: Cryptographically Enforced Control Flow Integrity. In Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS). 941–951.
26. [59] Marina Minkin, Daniel Moghimi, Moritz Lipp, Michael Schwarz, Jo Van Bulck, Daniel Genkin, Daniel Gruss, Berk Sunar, Frank Piessens, and Yuval Yarom. 2019. Fallout: Reading Kernel Writes from User Space.
27. [60] Daniel Moghimi. 2014. Subverting without EIP. <http://www.moghimi.org/subverting-without-eip/>.
28. [61] Micah Morton, Jan Werner, Panagiotis Kintis, Kevin Z. Snow, Manos Antonakakis, Michalis Polychronakis, and Fabian Monrose. 2018. Security Risks in Asynchronous Web Servers: When Performance Optimizations Amplify the Impact of Data-oriented Attacks. In Proceedings of the 3rd IEEE European Symposium on Security & Privacy (Euro S&P).
29. [62] Tilo Müller, Felix C. Freiling, and Andreas Dewald. 2011. TRESOR Runs Encryption Securely Outside RAM. In Proceedings of the 20th USENIX Security Symposium.
30. [63] Santosh Nagarakatte, Milo M. K. Martin, and Steve Zdancewic. 2015. Everything You Want to Know About Pointer-Based Checking. In Proceedings of the 1st Summit on Advances in Programming Languages (SNAPL). 190–208.
31. [64] Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve Zdancewic. 2009. SoftBound: Highly Compatible and Complete Spatial Memory Safety for C. In Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI). 245–258.
32. [65] Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve Zdancewic. 2010. CETS: Compiler Enforced Temporal Safety for C. In Proceedings of the International Symposium on Memory Management (ISMM). 31–40.
33. [66] George C. Necula, Jeremy Condit, Matthew Harren, Scott McPeak, and Westley Weimer. 2005. CCured: Type-safe Retrofitting of Legacy Software. ACM Trans. Program. Lang. Syst. 27, 3 (May 2005), 477–526.
34. [67] Gene Novark and Emery D. Berger. 2010. DieHarder: Securing the Heap. In Proceedings of the 17th ACM Conference on Computer and Communications Security (CCS). 573–584.
35. [68] Panagiotis Papadopoulos, Giorgos Vasiliadis, Giorgos Christou, Evangelos Markatos, and Sotiris Ioannidis. 2017. No Sugar but All the Taste! Memory Encryption without Architectural Support. In Proceedings of the European Symposium on Research in Computer Security (ESORICS). 362–380.
36. [69] Andrew Pardoe. 2017. Security Features in Microsoft Visual C++. <https://blogs.msdn.microsoft.com/vcblog/2017/06/28/security-features-in-microsoft-visual-c/>.
37. [70] PaX Team. 2003. Address Space Layout Randomization. <http://pax.grsecurity.net/docs/aslr.txt>.
38. [71] PaX Team. 2003. Paging Based Non-executable Pages. <http://pax.grsecurity.net/docs/pageexec.txt>.
39. [72] David J. Pearce, Paul HJ Kelly, and Chris Hankin. 2007. Efficient Field-Sensitive Pointer Analysis of C. ACM Transactions on Programming Languages and Systems (TOPLAS) 30, 1 (2007), 4.
40. [73] Niels Provos, Markus Friedl, and Peter Honeyman. 2003. Preventing Privilege Escalation. In Proceedings of the 12th USENIX Security Symposium.
41. [74] Roman Rogowski, Micah Morton, Forrest Li, Kevin Z. Snow, Fabian Monrose, and Michalis Polychronakis. 2017. Revisiting Browser Security in the Modern Era: New Data-only Attacks and Defenses. In Proceedings of the 2nd IEEE European Symposium on Security & Privacy (Euro S&P).
42. [75] Olatunji Ruwase and Monica S. Lam. 2004. A Practical Dynamic Buffer Overflow Detector. In Proceedings of the 11th Network and Distributed System Security Symposium (NDSS). 159–169.
43. [76] Felix Schuster, Manuel Costa, Cédric Fournet, Christos Gkantsidis, Marcus Peinado, Gloria Mainar-Ruiz, and Mark Russinovich. 2015. VC3: Trustworthy Data Analytics in the Cloud Using SGX. In Proceedings of the 36th IEEE Symposium on Security & Privacy (S&P). IEEE, 38–54.
44. [77] Fermin J. Serna. 2012. CVE-2012-0769, the Case of the Perfect Info Leak. <http://zhodiac.hispahack.com/my-stuff/security/FlashASLRbypass.pdf>.
45. [78] C. Song, H. Moon, M. Alam, I. Yun, B. Lee, T. Kim, W. Lee, and Y. Paek. 2016. HDFI: Hardware-Assisted Data-Flow Isolation. In Proceedings of the IEEE Symposium on Security and Privacy (S&P).
46. [79] Bjarne Steensgaard. 1996. Points-to Analysis in Almost Linear Time. In Proceedings of the 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL). 32–41.
47. [80] Yulei Sui and Jingling Xue. 2016. SVF: Interprocedural Static Value-Flow Analysis in LLVM. In Proceedings of the 25th International Conference on Compiler Construction (CC). 265–266.
48. [81] Bing Sun, Chong Xu, and Stanley Zhu. 2017. The Power of Data-Oriented Attacks: Bypassing Memory Mitigation Using Data-Only Exploitation. In Black Hat Asia.
49. [82] Chia-Che Tsai, Donald E. Porter, and Mona Vij. 2017. Graphene-SGX: A Practical Library OS for Unmodified Applications on SGX. In Proceedings of the USENIX Annual Technical Conference (ATC).
50. [83] Victor van der Veen, Dennis Andriesse, Enes Göktaş, Ben Gras, Lionel Sambuc, Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. 2015. Practical Context-Sensitive CFI. In Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS). 927–940.
51. [84] Stephan van Schaik, Alyssa Milburn, Sebastian Österlund, Pietro Frigo, Giorgi Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2019. RIDL: Rogue In-flight Data Load. In Proceedings of the 40th IEEE Symposium on Security & Privacy (S&P).
52. [85] Giorgos Vasiliadis, Elias Athanasopoulos, Michalis Polychronakis, and Sotiris Ioannidis. 2014. PixelVault: Using GPUs for Securing Cryptographic Operations. In Proceedings of the 21st ACM Conference on Computer and Communications Security (CCS). 1131–1142.
53. [86] Robert Wahbe, Steven Lucco, Thomas E. Anderson, and Susan L. Graham. 1993. Efficient Software-based Fault Isolation. In Proceedings of the 14th ACM Symposium on Operating Systems Principles (SOSP). 203–216.
54. [87] David Weston and Matt Miller. 2016. Windows 10 Mitigation Improvements. Black Hat USA.
55. [88] Jisoo Yang and Kang G. Shin. 2008. Using Hypervisor to Provide Data Secrecy for User Applications on a Per-page Basis. In ACM International Conference on Virtual Execution Environments (VEE). 71–80.
56. [89] Yves Younan. 2015. FreeSentry: Protecting Against Use-After-Free Vulnerabilities Due to Dangling Pointers. In Proceedings of the 22nd Annual Network and Distributed System Security Symposium (NDSS).
57. [90] Min Hong Yun and Lin Zhong. 2019. Ginseng: Keeping Secrets in Registers When You Distrust the Operating System. In Proceedings of the Network and Distributed System Security Symposium (NDSS).
58. [91] Bin Zeng, Gang Tan, and Greg Morrisett. 2011. Combining Control-flow Integrity and Static Analysis for Efficient and Validated Data Sandboxing. In Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS).

### 附录：附加实现细节

在第5节中，我们讨论了应用于合并中间表示代码的加密转换。在将我们的方法应用于各种应用程序的过程中，我们遇到了一些需要特别考虑的特殊情况。以下是我们遇到的主要问题及解决方案。

#### A.1 对象对齐

尽管AES操作于128位数据块上，但敏感对象可以有不同的大小。为了适应任何对象大小，我们将敏感对象的大小四舍五入到128位的倍数，并将其严格分配在128位边界上。我们处理全局变量、栈变量和堆变量如下：

- **全局变量和栈变量**：LLVM的IR支持为全局变量和栈变量指定对齐方式。我们使用此功能为敏感的全局变量和栈变量指定16字节的自定义对齐方式，并将这些变量的大小四舍五入到128位的倍数。
- **堆变量**：我们必须确保动态分配在堆上的对象满足对齐要求。为此，我们提供了自定义内存分配函数。这些自定义内存分配函数使用`posix_memalign`函数来分配与128位边界对齐的内存。我们还将分配区域的大小四舍五入到最近的128位倍数。然后，在我们的内存加密转换过程中，所有对内存分配库函数（如`malloc`和`calloc`）的敏感调用都会自动替换为我们自定义的内存分配函数。

#### A.2 具有默认初始化器的全局变量

当全局变量被初始化为默认值时，其内存会在`.data`段中分配，并在编译时初始化为指定的值——运行时没有显式的`StoreInst`指令执行。由于我们的AES插桩转换显式的内存加载和存储，因此必须单独处理全局变量的初始化。通过引入一个`encrypt_globals`函数来加密所有敏感的全局变量，并在`main`函数开始时插入对该函数的调用来实现这一点。

#### A.3 敏感常量

敏感数据域可能包括必须在内存中加密的常量。默认情况下，LLVM将常量分配在`.rodata`段中，这是一个只读段。试图在加密过程中写入这些对象会导致保护故障。在我们的实现中，我们通过移除这些对象的常量说明符来解决这个问题。

#### A.4 环境变量

敏感数据域可能包括指向环境变量（如`$HOME`）的指针，这些指针可能会由于我们的指针分析的过度近似而被标记为敏感。加密这些环境变量会导致系统调用（如`fopen`）失败，因此这些变量不得修改。我们提供了一个`cloneenv`函数，该函数首先克隆环境变量的值，并返回指向克隆版本的指针。我们的内存加密转换将所有对`libc`函数`getenv`的敏感调用替换为这个`cloneenv`函数。

---

希望这能帮助你更好地理解和引用这些文献。