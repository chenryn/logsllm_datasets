### Figure 12: Probability of Correctly Identifying the Browser with Chrome Zero and Standard Error

The figure illustrates the probability that a user correctly identifies the browser as using Chrome Zero, along with the corresponding standard error. For one website (yahoo.com), users had a significantly higher chance of identifying the browser with Chrome Zero compared to random guessing.

For the 19 websites where at least one Chrome Zero policy was active, users correctly identified the browser in 50.8% of cases on average (standard error ±0.055). This is only a 0.8 percentage point deviation from random guessing, highlighting the negligible differences in user experience.

### User Perceptions and Misclassifications

Despite often misclassifying the browser instances, participants frequently cited loading times, cookie policy dialogues, and website redirections as reasons for selecting the instance as one using Chrome Zero.

### Practicality and Usability of Chrome Zero

Although our implementation is a proof-of-concept, the study results confirm that JavaScript Zero is practical and that our implementation of Chrome Zero is usable for everyday browsing. It does not negatively impact the browsing experience and operates without requiring any changes to existing source code or the system’s environment.

## VIII. Related Work

In this section, we discuss related work on protecting users from the execution of potentially harmful JavaScript code.

### A. Browser Extensions

Browser extensions such as NoScript [10] and uBlock [37] allow users to define policies to permit or prohibit the execution of JavaScript based on its origin. In contrast, Chrome Zero offers a more fine-grained permission model that operates at the function level and does not interfere with dynamic website content. While NoScript and uBlock primarily aim to block advertisements and third-party tracking, Chrome Zero directly targets attack prevention.

Snyder et al. [41] proposed a browser extension to protect against exploits by selectively blocking JavaScript APIs. Their approach blocks 52% of all Common Vulnerabilities and Exposures (CVEs) while impacting the usability of only 4% to 7% of tested websites. If a 16% usability impact is acceptable, they can block 72% of CVEs. Our focus on mitigating microarchitectural and side-channel attacks complements their work, demonstrating the versatility of the underlying generic idea.

### B. Modified Browsers

Meyerovich et al. [24] modified the JavaScript engine of Internet Explorer 8 to enforce fine-grained, application-specific runtime security policies defined by website developers. In contrast, JavaScript Zero is implemented as a browser extension and does not rely on developers to define security policies.

Patil et al. [35] proposed JCShadow, a fine-grained access control mechanism in Firefox that splits running JavaScript into groups with isolated copies of the JavaScript context. COWL [43] and WebPol [5] are other fine-grained policy frameworks that assume benign website developers. Unlike these approaches, JavaScript Zero makes no assumptions about the trustworthiness of website or library developers.

Kohlbrenner et al. [18] introduced Fuzzyfox, a modified version of Firefox that degrades the resolution of timing sources to 100 ms to prevent timing attacks. JavaScript Zero, however, prevents both timing attacks and other types of attacks that do not require high-resolution timing measurements.

Mao et al. [21] studied timing-based probing attacks and developed a tool to identify malicious operations. JavaScript Zero directly prevents such attacks by either disallowing timers or making them too coarse-grained.

### C. Code Rewriting

Reis et al. [38] implemented BrowserShield, a service that rewrites websites and embedded JavaScript to apply run-time checks and filter known vulnerabilities. Yu et al. [56] proposed automatically rewriting untrusted JavaScript code through a web proxy to ask users how to proceed with potentially dangerous behavior. However, these approaches do not protect against side-channel attacks and require platform-dependent services. JavaScript Zero, on the other hand, neither rewrites existing code nor relies on such services.

### D. JavaScript Frameworks

Agten et al. [1] presented JSand, a client-side JavaScript sandboxing framework that enforces server-specified policies to jail included third-party libraries. Phung et al. [36] proposed modifying code to protect it from inappropriate behavior of third-party libraries, but this requires manual intervention by website developers. Guan et al. [16] studied the privacy implications of the HTML5 postMessage function and developed a policy-based framework to restrict unintended cross-origin messages. Unlike these, our countermeasure is implemented solely as a browser extension and does not rely on any website developer to use a specific library or make code changes.

## IX. Conclusion

In this paper, we presented JavaScript Zero, a highly practical and generic fine-grained permission model in JavaScript to reduce the attack surface in modern browsers. JavaScript Zero leverages advanced JavaScript language features, such as virtual machine layering, closures, proxy objects, and object freezing, for security and privacy. It is fully transparent to website developers and users and works even with obfuscated code and higher-order scripts.

Our proof-of-concept Google Chrome extension, Chrome Zero, successfully protects against 11 state-of-the-art microarchitectural and side-channel attacks and 50% of published JavaScript 0-day exploits since Chrome 49. Chrome Zero has a low performance overhead of only 1.82% on average. In a double-blind user study, we found that for 24 websites in the Alexa Top 25, users could not distinguish browsers with and without Chrome Zero, indicating that Chrome Zero has no perceivable negative effect on most websites. Our work demonstrates that transparent, low-overhead defenses against JavaScript-based state-of-the-art microarchitectural and side-channel attacks are practical.

## Acknowledgment

We would like to thank our anonymous reviewers for their valuable feedback and our study participants for their time. This work has been supported by the Austrian Research Promotion Agency (FFG), the Styrian Business Promotion Agency (SFG), the Carinthian Economic Promotion Fund (KWF) under grant number 862235 (DeSSnet), and has received funding from the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation programme (grant agreement No 681402).

## References

[1] P. Agten, S. Van Acker, Y. Brondsema, P. H. Phung, L. Desmet, and F. Piessens, “JSand: complete client-side sandboxing of third-party JavaScript without browser modifications,” in Proceedings of the 28th Annual Computer Security Applications Conference, 2012.

[2] Alex Christensen, “Reduce resolution of performance.now.” 2015. [Online]. Available: https://bugs.webkit.org/show_bug.cgi?id=146531

[3] Apple, “JetStream 1.1,” Aug. 2017. [Online]. Available: http://browserbench.org/JetStream

[4] D. J. Bernstein, “Cache-Timing Attacks on AES,” 2004. [Online]. Available: http://cr.yp.to/antiforgery/cachetiming-20050414.pdf

[5] A. Bichhawat, V. Rajani, J. Jain, D. Garg, and C. Hammer, “Webpol: Fine-grained information flow policies for web browsers,” in ESORICS’17, 2017, (to appear).

[6] Boris Zbarsky, “Reduce resolution of performance.now.” 2015. [Online]. Available: https://hg.mozilla.org/integration/mozilla-inbound/rev/48ae8b5e62ab

[7] L. Cai and H. Chen, “TouchLogger: Inferring Keystrokes on Touch Screen from Smartphone Motion,” in USENIX Workshop on Hot Topics in Security – HotSec, 2011.

[8] Chris Peterson, “Bug 1313580: Remove web content access to Battery API,” 2016. [Online]. Available: https://bugzilla.mozilla.org/show_bug.cgi?id=1313580

[9] Chromium, “window.performance.now does not support sub-millisecond precision on Windows,” 2015. [Online]. Available: https://bugs.chromium.org/p/chromium/issues/detail?id=158234#c110

[10] Giorgio Maone, “NoScript - JavaScript/Java/Flash blocker for a safer Firefox experience!” Jul. 2017. [Online]. Available: https://noscript.net

[11] Google, “Chrome DevTools Protocol Viewer,” 2017. [Online]. Available: https://developer.chrome.com/devtools/docs/debugger-protocol

[12] ——, “chrome.debugger,” 2017. [Online]. Available: https://developer.chrome.com/extensions/debugger

[13] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuffrida, “ASLR on the Line: Practical Cache Attacks on the MMU,” in NDSS’17, 2017.

[14] D. Gruss, D. Bidner, and S. Mangard, “Practical memory deduplication attacks in sandboxed JavaScript,” in ESORICS’15, 2015.

[15] D. Gruss, C. Maurice, and S. Mangard, “Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript,” in DIMVA’16, 2016.

[16] C. Guan, K. Sun, Z. Wang, and W. Zhu, “Privacy breach by exploiting postmessage in HTML5: Identification, evaluation, and countermeasure,” in ASIACCS’16, 2016.

[17] P. C. Kocher, “Timing Attacks on Implementations of Diffe-Hellman, RSA, DSS, and Other Systems,” in CRYPTO’96, 1996.

[18] D. Kohlbrenner and H. Shacham, “Trusted browsers for uncertain times,” in USENIX Security Symposium, 2016.

[19] E. Lavoie, B. Dufour, and M. Feeley, “Portable and efficient run-time monitoring of JavaScript applications using virtual machine layering,” in European Conference on Object-Oriented Programming, 2014.

[20] M. Lipp, D. Gruss, M. Schwarz, D. Bidner, C. Maurice, and S. Mangard, “Practical Keystroke Timing Attacks in Sandboxed JavaScript,” in ESORICS’17, 2017, (to appear).

[21] J. Mao, Y. Chen, F. Shi, Y. Jia, and Z. Liang, “Toward Exposing Timing-Based Probing Attacks in Web Applications,” in International Conference on Wireless Algorithms, Systems, and Applications, 2016.

[22] C. Maurice, M. Weber, M. Schwarz, L. Giner, D. Gruss, C. A. Boano, S. Mangard, and K. Römer, “Hello from the Other Side: SSH over Robust Cache Covert Channels in the Cloud,” in NDSS’17, 2017.

[23] M. Mehrnezhad, E. Toreini, S. F. Shahandashti, and F. Hao, “Touchsignatures: identification of user touch actions and PINs based on mobile sensor data via JavaScript,” Journal of Information Security and Applications, 2016.

[24] L. A. Meyerovich and B. Livshits, “Conscript: Specifying and enforcing fine-grained security policies for JavaScript in the browser,” in S&P’10, 2010.

[25] Mike Perry, “Bug 1517: Reduce precision of time for JavaScript.” 2015. [Online]. Available: https://gitweb.torproject.org/user/mikeperry/tor-browser.git/commit/?h=bug1517

[26] Mozilla Developer Network, “ArrayBuffer,” 2017. [Online]. Available: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer

[27] ——, “debugger,” 2017. [Online]. Available: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger

[28] ——, “Proxy,” 2017. [Online]. Available: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Proxy

[29] Nolan Lawson, “A tiny and mostly spec-compliant WebWorker polyfill,” Nov. 2016. [Online]. Available: https://github.com/nolanlawson/pseudo-worker

[30] J. Nymann, “On the probability that k positive integers are relatively prime,” Journal of Number Theory, 1972.

[31] L. Olejnik, “Stealing sensitive browser data with the W3C Ambient Light Sensor API,” 2017. [Online]. Available: https://blog.lukaszolejnik.com/stealing-sensitive-browser-data-with-the-w3c-ambient-light-sensor-api/

[32] L. Olejnik, G. Acar, C. Castelluccia, and C. Diaz, “The leaking battery,” in Revised Selected Papers of the 10th International Workshop on Data Privacy Management, and Security Assurance - Volume 9481, 2016.

[33] Y. Oren, V. P. Kemerlis, S. Sethumadhavan, and A. D. Keromytis, “The Spy in the Sandbox: Practical Cache Attacks in JavaScript and their Implications,” in CCS’15, 2015.

[34] D. A. Osvik, A. Shamir, and E. Tromer, “Cache Attacks and Countermeasures: the Case of AES,” in CT-RSA, 2006.

[35] K. Patil, X. Dong, X. Li, Z. Liang, and X. Jiang, “Towards fine-grained access control in JavaScript contexts,” in 31st International Conference on Distributed Computing Systems (ICDCS), 2011.

[36] P. H. Phung, D. Sands, and A. Chudnov, “Lightweight self-protecting JavaScript,” in ASIACCS’09, 2009.

[37] Raymond Hill, “uBlock Origin - An efficient blocker for Chromium and Firefox. Fast and lean.” Jul. 2017. [Online]. Available: https://github.com/gorhill/uBlock

[38] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir, “BrowserShield: Vulnerability-driven filtering of dynamic HTML,” in USENIX Symposium on Operating Systems Design and Implementation, 2006.

[39] Ross McIlroy, “Firing up the Ignition Interpreter,” Aug. 2017. [Online]. Available: https://v8project.blogspot.co.at/2016/08/firing-up-ignition-interpreter.html

[40] M. Schwarz, C. Maurice, D. Gruss, and S. Mangard, “Fantastic Timers and Where to Find Them: High-Resolution Microarchitectural Attacks in JavaScript,” in FC’17, 2017.

[41] P. Snyder, C. Taylor, and C. Kanich, “Most Websites Don’t Need to Vibrate: A Cost-Benefit Approach to Improving Browser Security,” in CCS’17, 2017.

[42] R. Spreitzer, “Pin skimming: Exploiting the ambient-light sensor in mobile devices,” in Proceedings of the 4th ACM Workshop on Security and Privacy in Smartphones & Mobile Devices, 2014.

[43] D. Stefan, E. Z. Yang, P. Marchenko, A. Russo, D. Herman, B. Karp, and D. Mazières, “Protecting users by confining JavaScript with COWL,” in USENIX Symposium on Operating Systems Design and Implementation, 2014.

[44] P. Stone, “Pixel perfect timing attacks with HTML5,” Context Information Security (White Paper), 2013.

[45] T. Van Goethem, W. Joosen, and N. Nikiforakis, “The clock is still ticking: Timing attacks in the modern web,” in CCS’15, 2015.

[46] B. C. Vattikonda, S. Das, and H. Shacham, “Eliminating fine-grained timers in Xen,” in CCSW’11, 2011.

[47] P. Vila and B. Köpf, “Loophole: Timing attacks on shared event loops in Chrome,” in USENIX Security Symposium, 2017, (to appear).

[48] W3C, “Battery Status API,” 2016. [Online]. Available: https://www.w3.org/TR/battery-status/

[49] ——, “Geolocation API Specification 2nd Edition,” 2016. [Online]. Available: https://www.w3.org/TR/geolocation-API/

[50] ——, “Ambient Light Sensor,” 2017. [Online]. Available: https://www.w3.org/TR/ambient-light/

[51] ——, “DeviceOrientation Event Specification,” 2017. [Online]. Available: https://www.w3.org/TR/orientation-event/

[52] ——, “Generic Sensor API,” 2017. [Online]. Available: https://www.w3.org/TR/2017/WD-generic-sensor-20170530/

[53] ——, “JavaScript APIs Current Status,” 2017. [Online]. Available: https://www.w3.org/standards/techs/js

[54] W3Techs, “Usage of JavaScript for websites,” Aug. 2017. [Online]. Available: https://w3techs.com/technologies/details/cp-javascript/all/all

[55] Y. Yarom and K. Falkner, “Flush+Reload: a High Resolution, Low Noise, L3 Cache Side-Channel Attack,” in USENIX Security Symposium, 2014.

[56] D. Yu, A. Chander, N. Islam, and I. Serikov, “JavaScript instrumentation for browser security,” in ACM SIGPLAN Notices, 2007.