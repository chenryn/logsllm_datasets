### Unix Time in the ‘TimeDateStamp’ Field
In this context, the date is represented as 'GMT Sunday, July 13, 2008, 6:47:12 PM'.

**Figure 4: CFF Explorer – Compilation Date Check**

**Note:** The compilation date extracted from the PE Header can provide valuable information for incident handling.

### Section Headers Analysis
By examining the section headers, an analyst can determine whether the malware is packed. Packers often change standard section names (e.g., `.text`, `.data`, `.rsrc`) to non-standard ones, such as `UPX1`. In the example below, the sample is not packed.

**Figure 5: CFF Explorer – Section Headers**

### CFF Explorer Features
CFF Explorer includes a range of features such as:
- Process Viewer
- Hex Editor
- Drivers Viewer
- PE and Memory Dumper
- PE Integrity Checks

**Note:** At the time of writing, CFF Explorer could be downloaded from [this link](https://ntcore.com/?page_id=388).

### Resource Hacker
Resource Hacker is a free tool for extracting, modifying, or adding resources (images, dialogs, menus, etc.) from Windows binaries.

**Figure 6: Resource Hacker – Binary Resources (Icon, Manifest)**

Resource Hacker is particularly useful for analyzing dropper samples that contain additional PE files within their resources. It can also be used via the command line without opening the GUI.

**Note:** At the time of writing, Resource Hacker could be downloaded from [this link](http://www.angusj.com/resourcehacker/).

### PeStudio
PeStudio is a tool designed to identify suspicious artifacts in executable files, aiding in the initial malware assessment. It helps analysts quickly spot functionalities commonly used for malicious activities.

When opening a malicious sample in PeStudio, general information such as the MD5 hash and entropy is displayed. The hash value is checked against VirusTotal, and the results are listed within the program.

**Figure 7: PeStudio – VirusTotal Check**

In the ‘Section’ tab, the analyst can view the MD5 hash, entropy value, and entry-point address for each section, along with read, write, and execute permissions. An abnormally large `.rsrc` section may indicate that the application drops another file on the disk. During runtime analysis, it is recommended to closely monitor any files written to the disk.

**Figure 8: PeStudio – Headers Sections**

The ‘Import’ section lists imported function names. By cross-referencing these functions with documentation on MSDN, the analyst can understand their purpose. PeStudio also provides a list of blacklisted imports, which are functions commonly used for malicious activities.

**Figure 9: PeStudio – Imports Section**

In the example below, the imports `connect`, `gethostbyname`, `socket`, `memcpy`, `send`, and `GetAsyncKeyState` suggest the basic functionalities of the analyzed sample.

The ‘Exports’ section lists functions that the PE file exports for use by other PE files. In the example, there are no exports.

The ‘Resources’ section typically stores UI information (icons, custom window elements). If the malicious application has dropper functionalities, the files written to the disk may be stored in the `.rsrc` section.

The ‘tls-callback’ section contains code that sets up the environment before the entry-point is executed. Malware creators can hide code in the TLS (Thread Local Storage) that runs before the Windows OS creates the process.

The ‘Strings’ section is a useful source of information, containing all parsed strings from the executable. Analysts look for readable strings like IPs, URLs, and filenames. A reduced number of readable characters may indicate packing or obfuscation.

**Figure 10: PeStudio – Strings Section**

The ‘Certificate’ section contains the certificate used for signing the application. Malicious applications are often unsigned or use untrusted or compromised certificates.

PeStudio can generate and export an XML report for the executable, which can be used for further analysis with third-party tools.

**Note:** At the time of writing, PeStudio could be downloaded from [this link](https://www.winitor.com).

### Disassembly (IDA & Ghidra)
A disassembler translates machine code into assembly language, making it easier to understand the functionality of a compiled executable.

#### IDA Free
IDA is a standard tool for malware researchers and reverse engineers. This guide focuses on the freeware version of IDA.

Using IDA as a disassembler does not infect the workstation. However, when using its debugging capabilities, it is recommended to work in a dedicated LAB environment to prevent accidental infections. For more details, see Chapter 2 (Setting Up a LAB Environment).

IDA can display assembly code in text view (address, instruction, parameters, and comments) or graph view, which visualizes the code in logical blocks. The graph view is available only for valid functions and can be toggled with the space bar.

**Figure 11: IDA Text View (Left) & Graph View (Right)**

After opening an executable in IDA, familiarize yourself with its basic properties: strings, functions, imports, exports, and names. These can be accessed via the ‘View’ > ‘Open subviews’ menu.

**Figure 12: IDA Disassembler**

- **Strings**: Lists of string representations in the executable, which can help understand its purpose (e.g., IP addresses, URLs).
- **Imports**: Lists API functions loaded from external libraries, indicating how the executable interacts with the operating system.
- **Exports**: Lists functions offered by the executable to the external environment.
- **Names**: Lists all entity names (library functions, regular functions, instructions, string literals, data, imported names).
- **Functions**: Lists all functions in the executable. The F.L.I.R.T. feature recognizes standard library functions, improving readability.

It is advisable to focus on networking, encryption, and filesystem-related strings and imports. For example, if the imported function `InternetConnectA` is found, follow these steps:

1. Double-click on it (or single-click and press ENTER) to navigate to the function declaration.
2. Highlight the function name and press ‘x’ (or right-click > ‘Jump to xref to operand…’) to see a list of references.
3. Double-click on items to switch to the code area and analyze the context.

**Figure 13: Working with IDA (A – Imports, B – How to Get Cross-References, C – List of Cross-References, D – Code Area with Interest API Function)**

The `InternetConnectA` function is called with 8 parameters, passed in reverse order via `PUSH` instructions. IDA marks these parameters with comments, aiding in code understanding.

To efficiently analyze code, identify interesting blocks based on strings, imports, and functions, rather than analyzing the entire code sequentially.

IDA’s functionality can be extended with programmable plugins, which can automate tasks, enhance hostile code analysis, or add specific features. Plugins can be written in C++ and linked to hotkeys or menu items. Some plugins are available only for registered users, while others are open-source. IDAPython is a popular plugin for writing custom scripts in Python.

#### Ghidra
Ghidra is an open-source disassembler developed by the NSA and released in 2019.

**Figure 14: Ghidra Window (A – Menu; B – Program Structure; C – Imports, Exports, Functions; D – Assembly; E – Decompiler)**

While initially less user-friendly compared to IDA, Ghidra offers similar functionalities. Its key feature is the ability to show a graphical interpretation of code structure, aiding in algorithm understanding. This can be accessed via the ‘Display Function Graph’ icon or the ‘Window’ > ‘Function Graph’ menu.

**Figure 15: Ghidra – Function Graph**

Ghidra’s decompiler is a significant advantage over the free version of IDA. Decompilers translate assembly code into high-level programming languages, reducing analysis time. Ghidra decompiles assembly code into C, and both disassembled and decompiled code interpretations are synchronized in the default window.

**Figure 16: Ghidra – Assembly Code**
**Figure 17: Ghidra – Decompiled C Code**

### Dynamic Analysis
Dynamic malware analysis involves studying the behavior of the executable while it is running. It is recommended to run the executable in a virtual lab environment. Debuggers are used for advanced dynamic analysis.

#### Behavior Analysis Tools

##### Process Monitor
Process Monitor is a tool for monitoring process creation and termination, providing detailed information about specific processes. It combines the features of Regmon and Filemon, adding filtering capabilities.

**Figure 18: Process Monitor – Filter After Process Name**

In the example, after applying a filter for the sample (`malware.exe`), the analyst can see and correlate events caused by the sample, such as reading registry keys, creating files, and initiating network connections.

**Figure 19: Process Monitor – Filter After ‘MALWARE.EXE’ Process**

Pre-configured filters, available from the Microsoft website, can be loaded into Process Monitor to focus on relevant events. Included filters cover TCP/UDP send and receive, DLL/executable loading, file creation, file changes, and registry activities. Excluded filters exclude irrelevant events related to Sysinternals tools and page file operations.

**Figure 20: Process Monitor – Config Malware Analysis Filter**

Process Monitor is part of the SysInternals Suite and can be downloaded from [this link](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon).

##### Process Explorer
Process Explorer is a powerful process management utility that provides insight into all running processes, displaying them in a tree structure with parent-child relationships.

**Figure 21: Process Explorer – Colour Selection Filter**

The initial display includes columns such as:
- Process: Executable file name and icon
- CPU: Percentage of CPU time
- Private Bytes: Memory allocated to the program
- Working Set: Actual RAM allocated by Windows
- PID: Process identifier
- Description: Application description
- Company Name: Useful for identifying non-Microsoft processes

**Features:**
- Tree view with hierarchical parent relationships
- Accurate CPU-usage tracking
- Multiple tray icons for monitoring CPU, Disk, GPU, Network, and more
- Identification of processes loading DLLs
- Identification of processes running open windows
- Detailed information about any process, including threads, memory usage, handles, and objects
- Ability to kill an entire process tree

This structured and professional approach ensures clarity and coherence in the document, making it easier to understand and follow.