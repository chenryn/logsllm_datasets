### Analysis of Attack Surface Over Several Days on a System in Normal Use

We conducted an analysis of the attack surface over several days on a system in normal use, encompassing bootup, typical application usage, and shutdown. Our findings indicate that only 13.8% (295 out of 2138) of the total entry points are part of the attack surface (Table 2). For example, many entry points access trusted objects such as `etc_t`, which would not be considered part of the attack surface. Therefore, simply listing all possible entry points in TCB programs as part of the attack surface would be a significant overapproximation and not very useful for analysis.

Of the 295 attack surface entry points across various programs in the TCB that received untrusted input, 81 are overt operations (Section 4.2). Among these, 35 have had input filtering problems, many of which were recently discovered for the first time. Additionally, five Bash scripts add a total of 8 entry points to the attack surface (Table 3).

In our analysis, we also identified a previously unknown vulnerability at an entry point in a script that sets up the X server, which has been present for several years. This highlights the importance of identifying and examining such entry points before deployment to prevent potential exploits.

### Completeness of Runtime Analysis

Runtime analysis is inherently incomplete. To examine completeness, we ran our kernel module in an enforcing mode (Section 4.4), where any access crossing the system TCB integrity wall was blocked unless made through one of the entry points listed in Table 2 and between appropriate types. We did not observe any new accesses, and given our conservative adversary model (including unprivileged users), we believe our set of entry points to be complete for a default Ubuntu 10.04.2 Desktop distribution in relation to its SELinux policy.

### Subtle Entry Points in the Attack Surface

We identified various subtle entry points that are part of the attack surface. For instance, `logrotate` has an entry point that reads from `user_home_t`. The source code for this entry point calls a library function in `libpopt` that attempts to read its configuration file, which can be easily missed during manual code inspection. Another example is the entry points calling `libc glob()`, which performs the system call `getdents` and returns untrusted directory filenames. A recent untrusted filename attack on `logrotate` (CVE-2011-1155) was found at this entry point.

### Vulnerability in Script Setting Up /tmp/.X11-unix Directory

We examined some of the identified entry points to locate any obvious problems. The script corresponding to entry point 2 in Table 3 is responsible for setting up the `/tmp/.X11-unix` directory, where the X server creates a Unix-domain socket that clients can connect to. This flow is from `initrc_t` to `tmp_t` (Table 2). However, we found that it is vulnerable to a time-of-check-to-time-of-use (TOCTTOU) vulnerability. The script, which has been part of Ubuntu distributions since at least 2006, clearly shows that the developer did not anticipate a threat at this entry point. Identifying the attack surface made this problem evident. We believe that more thorough testing of the uncovered entry points may reveal further vulnerabilities, though this is beyond the scope of this paper.

### Apache Webserver Analysis

We used our tool to evaluate a typical webserver deployment, specifically the Apache webserver (version 2.2.14) with mod_perl. For the wall generation, we focused on object types in the SELinux policy module for Apache that were not included in the application TCB, such as four `httpd_user` types and `httpd_log_t`. During the runtime analysis for Apache, we ran the `Apache::Test` Perl module, which contains test cases.

### Summary of Violating Entry Points

Table 2 summarizes the attack surface for the system TCB. The first column lists the TCB type, the second column shows the total number of entry points for all programs running under that type, and the third column indicates the number of violating entry points that cross the integrity wall. We also list specific binaries with their overt violating entry points (Section 4.2) and the object type accessed that causes the entry point to be violating. Additionally, we identify vulnerabilities caused by insufficient filtering at the overt entry points (we could not find any for the covert entry points). When multiple vulnerabilities are available for an entry point, the chronologically earliest is listed.

| Program | Overt Violating Entry | Object Type Accessed | Bug ID / Notes |
|---------|-----------------------|----------------------|----------------|
| acpid   | 1 Unix socket         | apmd_t               | CVE-2009-0798  |
| avahi-daemon | 3 * Unix socket | avahi_t              | CVE-2007-3372  |
| console-kit-daemon | 1 Netlink socket | tty_device_t | CVE-2006-5461  |
| dhclient3 | 1 * 4 unix socket    | dhcpc_t              | CVE-2006-6870  |
| ...     | ...                   | ...                  | ...            |

This structured approach helps in understanding the vulnerabilities and the need for thorough testing and validation of entry points in the system TCB.