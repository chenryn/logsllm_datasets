### 4.4.1 Floppy Drive
Information can flow between virtual machines (VMs) through the use of a floppy drive. Files can be copied from one VM to the floppy, thereby granting the other VM access to these files.

### 4.4.2 Networking and File Sharing
Networking and file sharing support introduces a similar security issue. In this scenario, two VMs at different security levels could communicate and exchange information. Exploitable mechanisms include Microsoft Networking, Samba, Novell Netware, Network File System (NFS), and TCP/IP. For example, using TCP/IP, a VM could FTP to either the host OS or a guest Linux OS, allowing for the transfer of files.

### 4.4.3 Virtual Disks
The use of virtual disks also poses a significant security risk. A virtual disk is a single file created in the host OS that encapsulates an entire guest disk, including the operating system and its applications. If an attacker gains access to this file on the host OS, they could copy all the information from the virtual disk to external media. The attacker could then install a virtual machine monitor on their own system and open the copied virtual disk.

Another concern is that any host OS application with read access to the file containing the virtual disk can examine its contents. For instance, tools like `grep` can be used to search for specific strings within the virtual file system. Our tests using a Linux host OS and a Windows NT guest OS showed that sensitive strings could be located by `grep` in seconds on a 300 MB virtual disk.

Both issues can be mitigated by restricting access to the virtual file. However, to achieve this with a high degree of assurance, a secure host OS is required.

### 4.4.4 Program Utilities
Tools for VM interoperation, such as VMware-Tools, can introduce security vulnerabilities. For example, after installing VMware-Tools in a guest OS, the cursor can move freely between the host OS desktop and the VMs. Additionally, features like cut and paste between VMs, similar to the Windows clipboard, present obvious security risks if VMs are running at different mandatory security levels.

### 4.4.5 Host Operating System
For a Type II VMM, many security vulnerabilities arise due to the lack of assurance in the underlying host OS. Flaws in the host OS design and implementation can render the VMM and all VMs vulnerable.

### 4.4.6 Serial and Printer Ports
The implementation of serial and printer ports also presents a security challenge. Before starting a VM, a configuration of the guest OS must be loaded or created. One configuration option is to direct the output of all parallel/serial ports to a file in the host OS's file system. Thus, when a user attempts to print in the guest OS, the output is directed to a file in the host OS. If the permissions of this printer file are not carefully managed, users could easily transfer information, making it readable by others in the host OS.

### 4.5 Intel-Based VMM for High Security
We conclude that current VMMs for the Intel architecture should not be used to enforce critical security policies. It would be unwise to attempt to implement a high-assurance VMM as a Type II VMM hosted on a generic commercial OS. Layering a highly secure VMM on top of an OS that does not meet reference monitor criteria would not provide a high level of security.

However, the Intel Pentium processor architecture has many features that can be used to implement highly secure systems. How can these features be applied?

A better approach would be to build a Type I VMM as a microkernel. This secure microkernel could be very small, making it easier for the VMM to meet the reference monitor verifiability requirement. The use of minimization, rigorous engineering, and code correspondence helps ensure that the implementation is free of both intentional and accidental flaws.

The Type I VMM would provide virtual environments on the machine, intercepting all attempts to handle low-level hardware functions from the VMs and controlling all devices and system features of the CPU. The microkernel could allow each VM to choose from a specific set of virtual devices, which may or may not map directly to the real devices installed on the system.

There are two advantages to using a Type I VMM to separate mandatory security levels:
1. A Type I VMM can provide a high degree of isolation between VMs.
2. Existing popular commercial operating systems and their applications can run in this highly secure environment without modification. This eliminates the need to port software to a special secure platform and supports the functionality of current application suites.

The main disadvantage of a Type I approach is the need to write device drivers for every device, which is challenging due to the wide variety of peripheral types and models available. (Note that a less secure Type II VMM avoids this problem by using existing drivers written for the host OS.) This disadvantage can be overcome by supporting only certain types and manufacturers of devices, a common practice in highly secure solutions.

Before implementing a secure Type I VMM for the Pentium, it might be advantageous to modify the chip. Two potential modifications could make virtualization easier:
1. Change all seventeen unprivileged, sensitive instructions of the Intel architecture to privileged instructions. All instructions would naturally trap, and the VMM could emulate the behavior of the instruction. However, this solution may cause problems in current operating systems because these seventeen instructions would now trap.
2. Implement a trap on op-code instruction. A new instruction would allow an operating system to declare instructions that should be treated as if they were privileged. This makes virtualization easier without affecting current operating systems.

Other virtualization approaches require additional code to force sensitive, unprivileged instructions to be handled by VMM software. This raises two security concerns:
1. The security kernel may not be considered minimal due to the extra virtualization code.
2. Virtualization of the unmodified processor requires checking every instruction before it executes, which is likely to doom the creation of a high-assurance VMM.

### 5 Conclusions and Future Work
The feasibility of implementing a secure VMM on the Intel Pentium has been explored. We reviewed VMM types and their hardware requirements, and conducted a detailed study of the virtualizability of all 250 Pentium instructions to determine if the processor meets the hardware requirements of any type of VMM. The analysis showed that seventeen instructions did not meet virtualization requirements because they were sensitive and unprivileged.

After defining a strategy to "virtualize" the Pentium architecture, we analyzed whether a Pentium-based secure VMM could securely isolate classified and unclassified VMs. We conclude that current VMM products for the Intel architecture should not be used as a secure VMM.

The Intel Pentium processor family already has many features that support the implementation of highly secure systems. Slight modifications to the processor would significantly facilitate the development of a highly secure Type I VMM.

An effort is currently underway to examine the Intel IA64 architecture to determine how its new features relate to the construction of secure systems and virtualization. The possible use of virtualization techniques for processors supporting fast binary translation is also being explored.

### Acknowledgements
We wish to acknowledge the insight, guidance, and suggestions provided by Steve Lipner throughout this research. We are grateful to Dr. Paul Karger for his careful review of our manuscript, suggestions, and encouragement. We thank James P. Anderson for his unwavering support of our work and Timothy Levin for insightful discussions and review of the paper. We are also grateful to the Department of the Navy for its support of the Naval Postgraduate School Center for Information Studies and Research, which made this research possible.

### References
[1] ISO/IEC 15408 - Common Criteria for Information Technology Security Evaluation. Technical Report CCIB-98-026, May 1998.
[2] Alpha Architecture Handbook. Technical Report Order Number: ECQD2KC-TE, October 1998.
[3] E. R. Altman, D. Kaeli, and Y. Sheffer. Welcome to the Opportunities of Binary Translation. IEEE Computer, 33(3):40–45, March 2000.
[4] J. P. Anderson. Computer Security Technology Planning Study. Technical Report ESD-TR-73-51, Air Force Electronic Systems Division, Hanscom AFB, Bedford, MA, 1972. (Also available as Vol. I, DITCAD-758206. Vol. II, DITCAD-772806).
[5] C. Attanasio, P. Markenstein, and R. J. Phillips. Penetrating an Operating System: A Study of VM/370 Integrity. IBM Systems Journal, 15(1):102–116, 1976.
[6] D. E. Bell and L. LaPadula. Secure Computer Systems: Mathematical Foundations and Model. Technical Report M74-244, MITRE Corp., Bedford, MA, 1973.
[7] K. J. Biba. Integrity Considerations for Secure Computer Systems. Technical Report ESD-TR-76-372, MITRE Corp., 1977.
[8] E. Bugnion, S. Devine, K. Govil, and M. Rosenblum. Disco: Running Commodity Operating Systems on Scalable Multiprocessors. ACM Transactions on Computer Systems, 15(4):412–447, November 1997.
[9] B. Gold, R. Linde, R. J. Peller, M. Schaefer, J. Scheid, and P. D. Ward. A security retrofit for VM/370. In R. E. Merwin, editor, National Computer Conference, volume 48, pages 335–344, New York, NY, June 1979. AFIPS.
[10] B. Gold, R. R. Linde, and P. F. Cudney. KVM/370 in Retrospect. In Proceedings of the 1984 IEEE Symposium on Security and Privacy, pages 13–23, Oakland, CA, April 1984. IEEE Computer Society Press.
[11] B. Gold, R. R. Linde, M. Schaefer, and J. F. Scheid. VM/370 Security Retrofit Program. In Proceedings 1977 Annual Conference, pages 411–418, Seattle, WA, October 1977. A.C.M.
[12] R. Goldberg. Architectural Principles for Virtual Computer Systems. Ph.D. thesis, Harvard University, Cambridge, MA, 1972.
[13] J. Hall and P. T. Robinson. Virtualizing the VAX Architecture. In Proceedings of the 18th International Symposium on Computer Architecture, pages 380–389, Toronto, Canada, May 1991.
[14] W.-M. Hu. Reducing Timing Channels with Fuzzy Time. In Proceedings 1991 IEEE Symposium on Research in Security and Privacy, pages 8–20. IEEE Computer Society Press, 1991.
[15] Intel. Intel Architecture Software Developer’s Manual, Volume 1: Basic Architecture. Intel Corporation, Santa Clara, CA, 1999.
[29] R. Rashid, D. Julin, D. Orr, R. Sanzi, R. Baron, A. Forin, D. Golub, and M. Jones. Mach: A System Software Kernel. In Proceedings of the 34th Computer Society International Conference COMPCON 89, San Francisco, CA, February 1989. IEEE Computer Society Press.
[30] J. S. Robin. Analyzing the Intel Pentium’s Capability to Support a Secure Virtual Machine Monitor. Master’s thesis, Naval Postgraduate School, Monterey, CA, September 1999.
[31] M. Rosenblum. Lecture at Stanford University. 17 August 1999.
[32] J. H. Saltzer and M. D. Schroeder. The Protection of Information in Computer Systems. Proceedings of the IEEE, 63(9):1278–1308, 1975.
[33] M. Schaefer and B. Gold. Program Confinement in KVM/370. In Proceedings 1977 Annual Conference, pages 404–410, Seattle, WA, October 1977. A.C.M.
[34] M. D. Schroeder and J. H. Saltzer. A Hardware Architecture for Implementing Protection Rings. Comm. A.C.M., 15(3):157–170, 1972.
[35] O. Sibert, P. A. Porras, and R. Lindell. The Intel 80x86 Processor Architecture: Pitfalls for Secure Systems. In Proceedings 1995 IEEE Symposium on Security and Privacy, pages 211–222, Oakland, CA, May 1995. IEEE Computer Society Press.
[36] VMware Inc. – Virtual Platform Technology, March 1999. http://www.vmware.com/standards/index.html. Welcome to VMware, Inc.
[37] Wine. http://www.winehq.com, June 2000.
[16] Intel. Intel Architecture Software Developer’s Manual, Volume 2: Instruction Set Reference. Intel Corporation, Santa Clara, CA, 1999.
[17] P. A. Karger, M. E. Zurko, D. W. Bonin, A. H. Mason, and C. E. Kahn. A Retrospective on the VAX VMM Security Kernel. Transactions on Software Engineering, 17(11):1147–1165, November 1991.
[18] A. Klaiber. CrusoeT M Processors. Transmeta Corporation, Santa Clara, CA, January 2000. http://www.transmeta.com.
[19] K. Lawton. Bochs. http://www.bochs.com, July 1999.
[20] K. Lawton. Running Multiple Operating Systems Concurrently on the IA32 PC Using Virtualization Techniques. http://www.freemware.org/research/paper.txt, June 1999.
[21] S. E. Madnick and J. J. Donavan. Application and Analysis of the Virtual Machine Approach to Information System Security. In ACM SIGARCH-SYSOPS Workshop on Virtual Computer Systems, pages 210–224, Boston, MA, March 1973. A.C.M.
[22] National Computer Security Center. Department of Defense Trusted Computer System Evaluation Criteria, DoD 5200.28-STD, December 1985.
[23] National Computer Security Center. Final Evaluation Report: Boeing Space and Defense Group, MLS LAN Secure Network Server System, 28 August 1991.
[24] National Computer Security Center. Final Evaluation Report of HFSI XTS-200, CSC-EPL-92/003 C-Evaluation No. 21-92, 27 May 1992.
[25] National Computer Security Center. Final Evaluation Report: Trusted Information Systems, Inc. Trusted XENIX Version 4.0, January 1994.
[26] National Computer Security Center. Final Evaluation Report: Verdix Corporation VSLAN 5.1/VSLANE 5.1, 11 January 1994.
[27] National Computer Security Center. Final Evaluation Report of Gemini Computers, Incorporated Gemini Trusted Network Processor, Version 1.01, 28 June 1995.
[28] G. Popek and R. Goldberg. Formal Requirements for Virtualizable 3rd Generation Architectures. Communications of the A.C.M., 17(7):412–421, 1974.