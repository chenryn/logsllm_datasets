### Positive Rates and Reconstruction Techniques

#### Prefetching On
| Source | TP% | FP% |
|--------|-----|-----|
| Hot Trends | 91.2 | 8.8 |
| Google Insights | 87.9 | 6.5 |
| Wikipedia | 86.5 | 4.5 |
| Alexa | 88.2 | 4.1 |

#### Prefetching Off
| Source | TP% | FP% |
|--------|-----|-----|
| Hot Trends | 7.9 | 42.6 |
| Google Insights | 6.8 | 48.9 |
| Wikipedia | 4.3 | 47.1 |
| Alexa | 46.1 | 8.2 |

#### Uniform and Non-Uniform Distributions
| Source | TP% (Uniform) | FP% (Uniform) | TP% (Non-Uniform) | FP% (Non-Uniform) |
|--------|----------------|----------------|--------------------|--------------------|
| Google Insights | 89.0 | 6.5 | 93.4 | 4.5 |
| Wikipedia | 87.3 | 7.1 | 94.1 | 5.2 |
| Alexa | 87.4 | 6.2 | 93.4 | 4.1 |

### Accuracy of Reconstruction Techniques
The accuracy of the reconstruction techniques using both single events (a) and instance-based learning (b) is summarized in Table II.

#### True Positive and False Positive Rates
Let \( Q_w \) be the set of words in the original query, and \( R_w \) be the set of words in the result. The true positive (TP) and false positive (FP) rates for \( R_w \) are computed as follows:

\[
\text{TP} = 
\begin{cases} 
\frac{|R_w \cap Q_w|}{|Q_w|} & \text{if } R_w \subseteq Q_w \\
0 & \text{otherwise}
\end{cases}
\]

\[
\text{FP} = 
\begin{cases} 
\frac{|R_w \setminus Q_w|}{|Q_w|} & \text{if } Q_w \subseteq R_w \\
0 & \text{otherwise}
\end{cases}
\]

### Experimental Results
The results of our experiments are shown in Table II, broken down by each source for which we recreated a search query.

#### Single Events (Table II(a))
Table II(a) shows the accuracy when the reconstruction is restricted to using data from a single prefetching event. In this case, our accuracy depends on the number of identifiable keywords we can recreate from the domains in a prefetching event. An interesting observation is the high true positive rate for recreating "Hot Trends." This is due to the large number of entries in prefetching events for popular search terms, especially when Google's results page includes dynamically updated references, leading to more keyword extraction and improved search reconstruction. However, the false positive rate is higher because many domains are shared among searches of hot trends happening simultaneously. Notice that our reconstruction accuracy is significantly lower when prefetching is turned off.

#### Instance-Based Learning (Table II(b))
Table II(b) depicts our results for each client, considering events in 15-minute intervals. As expected, the non-uniform case, which better reflects real-world search behavior, outperforms the uniform case, achieving true positive rates over 92% and false negative rates under 5%, on average. Given the poor reconstruction accuracy when prefetching is turned off, we omit results for the instance-based learning case, as performance there is highly dependent on accurately reconstructing single events.

### Conclusion
Our main objective is to highlight that if left unchecked, rapid enhancements in DNS prefetching can have significant performance implications and lead to new security and privacy issues. Prefetching is being rapidly deployed in modern browsers, including mobile devices, with some offering no straightforward way to disable this feature. Some browser architects are experimenting with alternative prefetching strategies, such as only prefetching when the mouse hovers over a link. We support these changes but believe more should be done. It is prudent to reconsider the need for pre-resolution, given the adverse effects on name server load and the potential impact on DNSSEC adoption. Our ability to reconstruct search queries when prefetching is enabled underscores the delicate balance between performance and privacy.

### Acknowledgements
We express our gratitude to Joni Keller, Jim Gogan, Danny Shue, Sid Stafford, Hiawatha Demby, Stan Waddell, Alex Everett (all from the Information Technology Service Office), Murray Anderegg, and Bil Hayes (our local networking gurus) for their tremendous efforts in deploying the infrastructure for this study. The researchers and the University’s Technology Service Office have a longstanding memorandum of understanding (MoU) in place to collect anonymized network traffic on campus. The MoU covers specific uses and types of networking data, as well as conditions for securing and accessing such data. We also thank Michael Bailey, Kevin Jeffay, Don Smith, Teryl Taylor, and the anonymous reviewers for helpful suggestions. This work is supported by NSF grant CNS-0831245.

### References
[1] J. Valentino-Devries, “What They Know About You,” Wall Street Journal, July 2010.
[2] N. Carr, “Tracking is an Assault on Liberty, With Real Dangers,” Wall Street Journal, August 2010.
[3] E. Osterweil, M. Ryan, D. Massey, and L. Zhang, “Quantifying the Operational Status of the DNSSEC Deployment,” in ACM IMC, 2008, pp. 231–242.
[4] S. Son and V. Shmatikov, “The Hitchhiker’s Guide to DNS Cache Poisoning,” Intl. Conf. on Security and Privacy in Communication Networks, Sept. 2010.
[5] D. Wessels and M. Fomenkov, “Wow, That’s a Lot of Packets,” in Passive and Active Measurement Workshop, April 2003.
[6] R. Liston, S. Srinivasan, and E. Zegura, “Diversity in DNS Performance Measures,” in ACM SIGCOMM Workshop on Internet Measurement, 2002, pp. 19–31.
[7] J. Jung, E. Sit, H. Balakrishnan, and R. Morris, “DNS Performance and the Effectiveness of Caching,” IEEE/ACM Trans. on Networking, vol. 10, no. 5, pp. 589–603, 2002.
[8] J. Jung, A. W. Berger, and H. Balakrishnan, “Modeling TTL-based Internet Caches,” in Infocom, 2003.
[9] B. Ager, H. Dreger, and A. Feldmann, “Predicting the DNSSEC Overhead Using DNS Traces,” in Information Sciences & Systems, 2006, pp. 1484–1489.
[10] W. Wijngaards and B. Overeinder, “Securing DNS: Extending DNS Servers with a DNSSEC Validator,” Security & Privacy, vol. 7, no. 5, pp. 36–43, 2009.
[11] L. Grangeia, “DNS Cache Snooping or Snooping the Cache for Fun and Profit,” SideStep Seguranca Digital, Tech. Rep., Feb. 2004.
[12] C. E. Wills, M. Mikhailov, and H. Shang, “Inferring Relative Popularity of Internet Applications by Actively Querying DNS Caches,” in ACM IMC, 2003, pp. 78–90.
[13] M. A. Rajab, J. Zarfoss, F. Monrose, and A. Terzis, “A Multifaceted Approach to Understanding the Botnet Phenomenon,” in ACM IMC, Oct., 2006, pp. 41–52.
[14] E. Cohen and H. Kaplan, “Proactive Caching of DNS Records: Addressing a Performance Bottleneck,” in Symp. on Apps. and the Internet, 2001, pp. 85–94.
[15] H. Shang and C. E. Wills, “Piggybacking Related Domain Names to Improve DNS Performance,” Computing Networking, vol. 50, no. 11, pp. 1733–1748, 2006.
[16] S. Krishnan and F. Monrose, “DNS Prefetching and its Privacy Implications: When Good Things Go Bad,” in USENIX Workshop on Large-scale Exploits and Emergent Threats, April 2010.
[17] D. Moore, K. Keys, R. Koga, E. Lagache, and K. C. Claffy, “The CoralReef Software Suite as a Tool for System and Network Administrators,” in USENIX Conf. on System Admin., 2001, pp. 133–144.
[18] J. Fan, J. Xu, M. Ammar, and S. Moon, “Prefix-preserving IP Address Anonymization: Measurement-based Security Evaluation and a New Cryptography-based Scheme,” Computer Networks, vol. 46, no. 2, pp. 263–272, October 2004.
[19] A.-J. Su, D. R. Choffnes, A. Kuzmanovic, and F. E. Bustamante, “Drafting Behind Akamai,” SIGCOMM Computing Comm. Review, vol. 36, no. 4, pp. 435–446, 2006.
[20] R. Arends, R. Austein, M. Larson, D. Massey, and S. Rose, “DNS Security Introduction and Requirements (RFC 4033),” 2005.
[21] OpenDNS, “Privacy Policy,” See http://www.opendns.com/privacy/, July 2007.
[22] M. Deshpande and G. Karypis, “Item-based Top-N Recommendation Algorithms,” ACM Transactions on Info. Sys., vol. 22, no. 1, pp. 143–177, 2004.
[23] F. Benevenuto, T. Rodrigues, M. Cha, and V. Almeida, “Characterizing User Behavior in Online Social Networks,” in ACM IMC, 2009, pp. 49–62.

### Appendix
For Chrome (version 10), DNS prefetching can be disabled by unmarking the check box “use DNS prefetching to improve page load performance” via the Tools → Options → Under the Hood sub-menu (this is true even on Android smartphones). For Firefox (version 4), disabling this feature is less obvious. Users can do so by setting the `network.dns.disablePrefetch` preference to `true` via the `about:config` method. For some versions of Firefox, the `network.dns.disablePrefetchFromHTTPS` preference should also be set to `true` to fully disable DNS prefetching. Similarly, for other Mozilla Necko-based apps (like Thunderbird), these preferences can be set by editing the `user.js` file in the user’s profile folder.

For Safari (version 5) on MacOS, prefetching can be turned off by typing `defaults write com.apple.safari WebKitDNSPrefetchingEnabled -boolean false` in the Terminal. Unfortunately, there is no easy way to disable prefetching under iOS for mobile devices.