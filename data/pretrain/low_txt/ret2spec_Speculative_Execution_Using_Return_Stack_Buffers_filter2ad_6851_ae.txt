### 7. RELATED WORK

In this section, we discuss the concepts and research related to our paper. We begin with an overview of recent papers on speculative and out-of-order executions, followed by a summary of other similar work in the area. We then examine microarchitectural attacks in general, highlighting some notable examples. Finally, we discuss proposed defense techniques and their effectiveness against the attacks we have identified.

#### 7.1 Out-of-Order/Speculative Execution

Out-of-order and speculative execution have been implemented in CPUs since the early 1990s, but only recently have they garnered significant attention from security researchers. The initial discovery of security issues in these execution models is attributed to a Google Project Zero researcher, Jann Horn, who first disclosed the vulnerability to vendors [18]. Concurrently, Anders Fogh also investigated speculative execution and reported his findings, which were largely negative [12]. Another concurrent study by Giorgi Maisuradze and Christian Rossow [29] examined speculative execution and discovered a side channel that could be used to derandomize kernel-level Address Space Layout Randomization (ASLR) and read arbitrary user memory during speculation.

These discoveries were further detailed in two major research papers: Meltdown [26] and Spectre [22].

- **Meltdown (Variant 3)**: This attack exploits a flaw in Intel's out-of-order execution engine, allowing adversaries to access privileged data for a brief moment without proper privilege checks. This race condition in the execution core enables attackers to disclose arbitrary privileged data from kernel space. While severe, Meltdown can be mitigated with microcode updates and/or stronger separation between user and kernel space.
  
- **Spectre (Variants 1 and 2)**: Unlike Meltdown, Spectre does not rely on implementation bugs in CPUs and is therefore more challenging to address. Spectre leverages the benign CPU feature of speculative execution, where the branch predictor is shared between different processes and privileges. Adversaries can inject arbitrary branch targets into predictors, triggering speculative code execution in victim processes. Similar to our first attack, Spectre also proposes an in-browser attack to abuse the branch predictor within the same process, leading to the leakage of unauthorized data. Our approach, however, achieves similar goals by exploiting a different prediction mechanism: return stack buffers (RSBs). While RSBs were previously mentioned as a potential security risk [18, 22], it was unclear whether they posed a threat as severe as Branch Target Buffers (BTBs). Our work addresses this open question and provides countermeasures.

Follow-up works, such as SgxPectre [8] and BranchScope [10], further explored the implications of Meltdown and Spectre. For example, Chen et al. demonstrated the use of branch target injection to extract critical information from an SGX enclave, while Evtyushkin et al. studied the abuses of direct branch predictors to leak sensitive data from different processes, including SGX enclaves.

#### 7.2 Cache-Based Side Channels

Modern CPUs employ multiple layers of caches to reduce the latency of accessing main memory, which can take hundreds of cycles. Each cache layer has unique characteristics and timing properties, making them potential side channels. The key idea behind cache-based side channel attacks is to distinguish between cache hits and misses, revealing whether the corresponding data was cached or not.

Cache attacks can be divided into those targeting instruction caches and those targeting data caches:

- **Instruction Cache Attacks**: These aim to leak information about the execution of the target program. For instance, instruction cache information can be used to reconstruct the execution trace of collocated programs [1–3, 7] or even virtual machines (VMs) on the same machine [39].
  
- **Data Cache Attacks**: These reveal data access patterns in the target program, which can be a collocated program or a VM, depending on the level of the attacked cache. Per-core caches (e.g., L1 and L2) can be used as side channels against programs running on the same physical core, useful for reconstructing cryptographic keys [36]. Shared or last-level caches (LLCs) can be used to leak information, such as keystrokes or user-typed passwords, from any process running on the same CPU, even across VMs [33].

There are various methods to exploit caches, including Flush+Reload [38], Evict+Reload [17], and Prime+Probe [31]. Flush+Reload uses the `clflush` instruction to flush required cache lines from the last-level cache shared with the victim. By measuring the same cache line, the attacker can detect whether the victim has accessed a certain cache line. Evict+Reload attempts to evict the target cache line through memory accesses, which is useful when `clflush` cannot be used. Prime+Probe involves the adversary allocating the entire cache with their own data, then triggering the victim's execution and probing the caches to see which cache lines have been evicted.

#### 7.3 Other Microarchitectural Side Channels

Given the complexity and abundance of optimizations in modern CPUs, the presence of microarchitectural side channels is not surprising. Researchers have proposed numerous attack techniques targeting these features. For example, Evtyushkin et al. [9] used collisions in Branch Target Buffers (BTBs) to leak information about the kernel address space, thereby derandomizing KASLR. Similar to Meltdown, Jang et al. [20] used Intel’s Transactional Synchronization Extensions (TSX) to bypass KASLR by accessing kernel pages and using the timing differences in transaction rollbacks to probe mapped kernel pages.

### 8. CONCLUSION

In this work, we investigate the security implications of speculative execution caused by return stack buffers (RSBs), presenting general principles of RSB-based speculative execution. We demonstrate that RSBs are a powerful tool for adversaries, as speculative execution can be easily triggered via RSBs. We show that return address speculation can lead to arbitrary speculative code execution across processes unless RSBs are flushed upon context switches. Additionally, we demonstrate that in-process speculative code execution can be achieved in a sandboxed process, resulting in arbitrary memory disclosure.

### REFERENCES

[1] Onur Aciiçmez. 2007. Yet another microarchitectural attack: exploiting I-cache. In Proceedings of the 2007 ACM workshop on Computer security architecture. ACM, 11–18.

[2] Onur Acıiçmez, Billy Bob Brumley, and Philipp Grabher. 2010. New results on instruction cache attacks. In Conference on Cryptographic Hardware and Embedded Systems (CHES), Vol. 2010. Springer, 110–124.

[3] Onur Aciiçmez and Werner Schindler. 2008. A vulnerability in RSA implementations due to instruction cache analysis and its demonstration on OpenSSL. In CT-RSA, Vol. 8. Springer, 256–273.

[4] Michalis Athanasakis, Elias Athanasopoulos, Michalis Polychronakis, Georgios Portokalidis, and Sotiris Ioannidis. 2015. The Devil is in the Constants: Bypassing Defenses in Browser JIT Engines. In Proceedings of the Network and Distributed System Security (NDSS) Symposium.

[5] Daniel J Bernstein. 2005. Cache-timing attacks on AES. (2005).

[6] Yinzhi Cao, Zhanhao Chen, Song Li, and Shujiang Wu. 2017. Deterministic Browser. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 163–178.

[7] Caisen Chen, Tao Wang, Yingzhan Kou, Xiaocen Chen, and Xiong Li. 2013. Improvement of trace-driven I-Cache timing attack on the RSA algorithm. Journal of Systems and Software 86, 1 (2013), 100–107.

[8] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang Lin, and Ten H Lai. 2018. SGXPECTRE Attacks: Leaking Enclave Secrets via Speculative Execution. arXiv preprint arXiv:1802.09085 (2018).

[9] Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh. 2016. Jump over ASLR: Attacking branch predictors to bypass ASLR. In Microarchitecture (MICRO), 2016 49th Annual IEEE/ACM International Symposium on. IEEE, 1–13.

[10] Dmitry Evtyushkin, Ryan Riley, Nael CSE Abu-Ghazaleh, Dmitry Ponomarev, et al. 2018. BranchScope: A New Side-Channel Attack on Directional Branch Predictor. In Proceedings of the Twenty-Third International Conference on Architectural Support for Programming Languages and Operating Systems. ACM, 693–707.

[11] Agner Fog. 2018. The microarchitecture of Intel, AMD and VIA CPUs. http://www.agner.org/optimize/microarchitecture.pdf

[14] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Cristiano Giuffrida. 2017. ASLR on the line: Practical cache attacks on the MMU. NDSS (Feb. 2017) (2017).

[15] Daniel Gruss, Moritz Lipp, Michael Schwarz, Richard Fellner, Clémentine Maurice, and Stefan Mangard. 2017. Kaslr is dead: long live kaslr. In International Symposium on Engineering Secure Software and Systems. Springer, 161–176.

[16] Daniel Gruss, Clémentine Maurice, and Stefan Mangard. 2016. Rowhammer.js: A remote software-induced fault attack in JavaScript. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 300–321.

[17] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. 2015. Cache Template Attacks: Automating Attacks on Inclusive Last-Level Caches. In USENIX Security Symposium. 897–912.

[18] Jann Horn. 2018. Reading privileged memory with a side-channel. https://googleprojectzero.blogspot.de/2018/01/reading-privileged-memory-with-side.html

[19] Intel. 2018. Intel Analysis of Speculative Execution Side Channels. https://newsroom.intel.com/wp-content/uploads/sites/11/2018/01/Intel-Analysis-of-Speculative-Execution-Side-Channels.pdf

[20] Yeongjin Jang, Sangho Lee, and Taesoo Kim. 2016. Breaking kernel address space layout randomization with Intel TSX. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 380–392.

[21] Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye Lee, Donghyuk Lee, Chris Wilkerson, Konrad Lai, and Onur Mutlu. 2014. Flipping bits in memory without accessing them: An experimental study of DRAM disturbance errors. In ACM SIGARCH Computer Architecture News, Vol. 42. IEEE Press, 361–372.

[22] Paul Kocher, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. 2018. Spectre Attacks: Exploiting Speculative Execution. ArXiv e-prints (Jan. 2018). arXiv:1801.01203

[23] David Kohlbrenner and Hovav Shacham. 2016. Trusted Browsers for Uncertain Times. In USENIX Security Symposium. 463–480.

[24] VI Levenshtein. 1992. On perfect codes in deletion and insertion metric. Discrete Mathematics and Applications 2, 3 (1992), 241–258.

[25] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice, and Stefan Mangard. 2016. ARMageddon: Cache Attacks on Mobile Devices. In USENIX Security Symposium. 549–564.

[26] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. 2018. Meltdown. ArXiv e-prints (Jan. 2018). arXiv:1801.01207

[27] Giorgi Maisuradze, Michael Backes, and Christian Rossow. 2016. What Cannot Be Read, Cannot Be Leveraged? Revisiting Assumptions of JIT-ROP Defenses. In 25th USENIX Security Symposium (USENIX Security 16). Austin, TX.

[28] Giorgi Maisuradze, Michael Backes, and Christian Rossow. 2017. Dachshund: Digging for and Securing Against (Non-) Blinded Constants in JIT Code. In Proceedings of the 15th Conference on Network and Distributed System Security Symposium (NDSS).

[29] Giorgi Maisuradze and Christian Rossow. 2018. Speculose: Analyzing the Security Implications of Speculative Execution in CPUs. CoRR abs/1801.04084 (2018). arXiv:1801.04084 http://arxiv.org/abs/1801.04084

[30] Yossef Oren, Vasileios P Kemerlis, Simha Sethumadhavan, and Angelos D Keromytis. 2015. The spy in the sandbox: Practical cache attacks in JavaScript and their implications. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 1406–1418.

[31] Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache attacks and countermeasures: the case of AES. In Cryptographers’ Track at the RSA Conference. Springer, 1–20.

[32] Colin Percival. 2005. Cache missing for fun and profit.

[33] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan Savage. 2009. Hey, you, get off of my cloud: exploring information leakage in third-party compute clouds. In Proceedings of the 16th ACM conference on Computer and communications security. ACM, 199–212.

[34] Michael Schwarz, Clémentine Maurice, Daniel Gruss, and Stefan Mangard. 2017. Fantastic timers and where to find them: high-resolution microarchitectural attacks in JavaScript. In International Conference on Financial Cryptography and Data Security. Springer, 247–267.

[35] Chengyu Song, Chao Zhang, Tielei Wang, Wenke Lee, and David Melski. 2015. Exploiting and Protecting Dynamic Code Generation. In 22nd Annual Network and Distributed System Security Symposium, NDSS 2015, San Diego, California, USA, February 8-11, 2014.

[36] Eran Tromer, Dag Arne Osvik, and Adi Shamir. 2010. Efficient cache attacks on AES, and countermeasures. Journal of Cryptology 23, 1 (2010), 37–71.

[37] Henry Wong. 2018. Microbenchmarking Return Address Branch Prediction. http://blog.stuffedcow.net/2018/04/ras-microbenchmarks

[38] Yuval Yarom and Katrina Falkner. 2014. FLUSH+RELOAD: A High Resolution, Low Noise, L3 Cache Side-Channel Attack. In USENIX Security Symposium. 719–732.

[39] Yinqian Zhang, Ari Juels, Michael K Reiter, and Thomas Ristenpart. 2012. Cross-VM side channels and their use to extract private keys. In Proceedings of the 2012 ACM conference on Computer and communications security. ACM, 305–316.