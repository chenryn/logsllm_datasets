# Leveraging the PostgreSQL Extension Ecosystem for Advanced Analytics

**Contact Information:**
- Email: sales@chartio.com
- Phone: (855) 232-0320

## Agenda
1. The Problem
   - Prevailing View vs. Practical Reality
2. A Possible Solution
   - Or Just Building Blocks?
3. Nearness
4. A More Complete Solution
   - The PostgreSQL Extension Ecosystem

## The Problem
### Prevailing View vs. Practical Reality
- **Prevailing View:**
  - **Logical Dimension:**
    - **Relational Databases:**
      - Structured rows and columns
      - Schema on write
      - Referential integrity
      - SQL-based, declarative query language
      - Native support for joins
      - Interactive/low execution overhead
      - Only descriptive statistics
      - Requires exporting data for advanced analytics
    - **Non-Relational Databases:**
      - Unstructured files, documents, etc.
      - Schema on read
      - No referential integrity
      - Various query languages, often procedural
      - No native support for joins
      - OLAP - Batch processing
      - Robust ecosystem for data science and machine learning
      - No need to export data
  - **Physical Dimension:**
    - **Relational Databases:**
      - Single node system
      - Single process per query
      - High concurrency
      - Async and sync replication
      - Sharding may not be native and is difficult to manage
    - **Non-Relational Databases:**
      - Multiple node system
      - Multiple processes per query
      - OLAP - low concurrency/high scheduling overhead
      - Async and sync replication
      - Sharding likely to be native and easy to manage

- **Summary of RDBMS:**
  - RDBMS have nice properties such as ACID, relational integrity, constraints, and strong data types.
  - They are easier for non-technical users and exploratory analysis.
  - However, they may not meet the needs of today's analysts in terms of data science and machine learning, parallel processing, and modern application requirements like schema migrations, replication, and sharding.

- **Practical Reality:**
  - Despite the limitations, we still desire more advanced functionality from our databases.

## A Possible Solution
### Or Just Building Blocks?
- **Modern SQL:**
  - Many people still think of SQL in terms of SQL-92, but there have been significant advancements:
    - Common Table Expressions (CTEs) / Recursive CTEs
    - Window Functions
    - Ordered-set Aggregates
    - Lateral Joins
    - Temporal Support
    - And more...
  - [Reference: Modern SQL](http://use-the-index-luke.com/blog/2015-02/modern-sql)

- **Procedural Languages:**
  - **Native:**
    - PL/pgSQL, Tcl, Perl, Python
  - **Community:**
    - Java, PHP, R, JavaScript, Ruby, Scheme, sh

- **Building Blocks:**
  - These features solve some problems, but for others, they are just building blocks.

## Nearness
- **Near at Hand:**
  - Easily installable
- **Near to Our Skill Set:**
  - Familiar tools, languages, and abstractions
- **Near to Our Capabilities:**
  - Capable of solving a problem in our domain

- **Nearness Drives Adoption:**
  - Modular and composable
  - [Reference: Simple Made Easy](http://www.infoq.com/presentations/Simple-Made-Easy)

## A More Complete Solution
### The PostgreSQL Extension Ecosystem
- **PostgreSQL Extension Network:**
  - [PGXN](http://pgxn.org/)
  - **Examples:**
    - **UDFs & Operators:**
      - [pg_similarity](https://github.com/eulerto/pg_similarity)
    - **UDAs & Data Types:**
      - [postgresql-hll](https://github.com/aggregateknowledge/postgresql-hll)
    - **Foreign Data Wrappers:**
      - [Multicorn](http://multicorn.org/)
      - [pgosquery](https://github.com/shish/pgosquery)
    - **Indexes:**
      - [ZomboDB](https://github.com/zombodb/zombodb)
    - **Composing Extension Methods:**
      - [MADlib](http://doc.madlib.net/)
    - **MPP:**
      - [Citus Data](https://www.citusdata.com/)
      - [Greenplum DB](https://github.com/greenplum-db/gpdb)
    - **Custom Background Workers:**
      - [Alps](https://github.com/no0p/alps)
    - **Record Linking:**
      - [Record Linking](http://no0p.github.io/2015/10/20/record_linking.html#/)

- **Package Manager: pgxn**
  - Index/Network: [PGXN](http://pgxn.org/)
  - Commands:
    - `pgxn search semver` - Search for extensions
    - `pgxn info semver` - Get extension information
    - `pgxn install semver` - Install an extension
    - `pgxn load –d somedb semver` - Load an extension into a database
    - `pgxn unload –d somedb semver` - Unload an extension from a database
    - `pgxn uninstall semver` - Uninstall an extension

- **Parallel Processing:**
  - Parallel sequential scan
  - [Columnar FDW](https://github.com/citusdata/cstore_fdw)

- **Beyond Analytics:**
  - Web app framework: [Aquameta](http://blog.aquameta.com/)
  - REST API: [PostgREST](https://github.com/begriffs/postgrest)
  - Unit testing framework: [pgTAP](http://pgtap.org/)
  - Firewall: [sql_firewall](https://github.com/uptimejp/sql_firewall)

## Conclusion
- With PostgreSQL, you get more than just rows and columns, basic SQL, and single-machine capabilities.
- Ensure you leverage the full potential of PostgreSQL and its extension ecosystem.
- **Get your Chartio free trial!**

**Contact Information:**
- Email: sales@chartio.com
- Phone: (855) 232-0320