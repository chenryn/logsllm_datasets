### SEAndroid/SELinux Policy Analysis and Software Engineering Analyses of Git Repositories

#### SEAndroid/SELinux Policy Analysis
Understanding software complexity is a critical topic in the software engineering community, with various metrics proposed over the years, such as cyclomatic complexity [31] and Halstead volume [32]. However, in the context of SEAndroid/SELinux policies, complexity measurements are less studied. The primary metric used is often the number of rules in the policy source code [36].

Researchers have applied formal verification [2, 14, 17, 18, 38, 39], artificial intelligence, information flow integrity measurement [15, 16, 48], and functional tests [49] to SELinux policies. Machine learning techniques have also been used to analyze policies based on SELinux denial logs from billions of devices [50].

Chen et al. [6] studied the SEAndroid policy to identify potential misconfigurations. They combined SEAndroid mandatory policies with discretionary policies embedded in the Android file system (i.e., Unix permission bits), providing a more comprehensive view of what is allowed or denied in practice. Their work, along with ours, presents metrics and tools that may be useful in the Android development process. A key difference is that we focus on quantifying the complexity of a policy snapshot and how this complexity evolves over time.

#### Git Mining
Bird et al. [5] provide a thorough analysis of the advantages and challenges of Git mining. One significant challenge they highlight is the lack of a mainline repository when dealing with multiple Git branches. Many other researchers have studied Git repositories (see, e.g., [13, 44, 47]). Negara et al. [33] use Git mining to detect patterns of code changes, while German et al. [9] and Jiang et al. [20] analyze Linux kernel repositories over time. In our work, we apply similar concepts to study the evolution of SEAndroid.

### Conclusion
In this paper, we conducted the first historical analysis of the SEAndroid policy to understand its evolution over time. We examined both the "rules" as written in the SEAndroid policy and the "boxes" these rules expanded to after processing all macro and grouping operators. By plotting these metrics over time, we observed an exponential increase in the complexity of SEAndroid policies. This growth will inevitably hit a wall of engineering complexity, necessitating new and innovative approaches to manage it.

Such approaches might leverage techniques from various fields of computer science. For instance, we could implement policy "unit tests" that express operations expected to succeed or fail, verifiable alongside other tests in modern software engineering and testing processes. We might also combine AI and machine learning with formal verification and model checking, not only to find bugs and exploits but also to explain the meaning of a given SEAndroid policy. Without such understanding, it will remain challenging to definitively declare any policy as "correct."

### Acknowledgment
We thank Robert Williams and Tomasz Swierczek for their valuable advice and for answering many of our questions. We also thank the anonymous referees for their constructive feedback. This work was supported in part by NSF grants CNS-1801884, CNS-1409401, and CNS-1314492.

### References
[1] Android Open Source Project 2018. SEAndroid Policy Git Repository. Android Open Source Project. https://android.googlesource.com/platform/system/sepolicy
[2] Myla Archer, Elizabeth Leonard, and Matteo Pradella. 2003. Analyzing Security-Enhanced Linux Policy Specifications. Technical Report. Naval Research Lab Center For Computer High Assurance Systems.
[3] Armis, Inc. 2017. The Attack Vector “BlueBorne” Exposes Almost Every Connected Device. Armis, Inc. https://www.armis.com/blueborne/
[4] Lee Badger, Daniel F Sterne, David L Sherman, Kenneth M Walker, and Sheila A Haghighat. 1995. Practical Domain and Type Enforcement for UNIX. In IEEE Symposium on Security and Privacy. IEEE, Oakland, CA, 66–77.
[5] Christian Bird, Peter C Rigby, Earl T Barr, David J Hamilton, Daniel M German, and Prem Devanbu. 2009. The Promises and Perils of Mining Git. In 6th IEEE International Working Conference on Mining Software Repositories (MSR ’09). IEEE, Vancouver, BC, Canada, 1–10.
[6] Haining Chen, Ninghui Li, William Enck, Yousra Aafer, and Xiangyu Zhang. 2017. Analysis of SEAndroid Policies: Combining MAC and DAC in Android. In Proceedings of the 33rd Annual Computer Security Applications Conference. ACM, Orlando, FL, 553–565.
[7] Nikolay Elenkov. 2014. Android Security Internals: An in-depth Guide to Android’s Security Architecture. No Starch Press.
[8] Adrienne Porter Felt, Erika Chin, Steve Hanna, Dawn Song, and David Wagner. 2011. Android permissions demystified. In 18th ACM Conference on Computer and Communications Security (CCS ’11). ACM, Chicago, IL, 627–638. https://doi.org/10.1145/2046707.2046779
[9] Daniel M German, Bram Adams, and Ahmed E Hassan. 2016. Continuously Mining Distributed Version Control Systems: an Empirical Study of How Linux Uses Git. Empirical Software Engineering 21, 1 (2016), 260–299.
[10] Google 2017. Media Framework Hardening. Google. https://source.android.com/devices/media/framework-hardening
[11] Google 2017. SELinux for Android 8.0. Google. https://source.android.com/security/selinux/images/SELinux_Treble.pdf
[12] Google 2018. Android Open Source Project. Google. https://source.android.com
[13] Georgios Gousios, Margaret-Anne Storey, and Alberto Bacchelli. 2016. Work practices and challenges in pull-based development: the contributor’s perspective. In Software Engineering (ICSE), 2016 IEEE/ACM 38th International Conference on. IEEE, Austin, TX, 285–296.
[14] Boniface Hicks, Sandra Rueda, Luke St Clair, Trent Jaeger, and Patrick McDaniel. 2010. A Logical Specification and Analysis for SELinux MLS Policy. ACM Transactions on Information and System Security (TISSEC) 13, 3 (2010).
[15] Trent Jaeger, Reiner Sailer, and Umesh Shankar. 2006. PRIMA: policy-reduced integrity measurement architecture. In Proceedings of the eleventh ACM symposium on Access control models and technologies. ACM, Lake Tahoe, CA, USA, 19–28.
[16] Trent Jaeger, Reiner Sailer, and Xiaolan Zhang. 2003. Analyzing integrity protection in the SELinux example policy. In Proceedings of the 12th conference on USENIX Security Symposium-Volume 12. USENIX Association, Washington, DC, USA, 5–5.
[17] Trent Jaeger, Reiner Sailer, and Xiaolan Zhang. 2004. Resolving constraint conflicts. In Proceedings of the ninth ACM symposium on Access control models and technologies. ACM, Yorktown Heights, NY, USA, 105–114.
[18] Trent Jaeger, Xiaolan Zhang, and Antony Edwards. 2003. Policy Management Using Access Control Spaces. ACM Transactions on Information and System Security (TISSEC) 6, 3 (2003), 327–364.
[19] Xuxian Jiang and Yajin Zhou. 2012. Dissecting android malware: Characterization and evolution. In 2012 IEEE Symposium on Security and Privacy. IEEE, San Francisco, CA, USA, 95–109.
[20] Yujuan Jiang, Bram Adams, and Daniel M German. 2013. Will My Patch Make It? and How Fast? Case Study on the Linux Kernel. In 10th IEEE Working Conference on Mining Software Repositories (MSR). IEEE, San Francisco, CA, USA, 101–110.
[21] Mariantonietta La Polla, Fabio Martinelli, and Daniele Sgandurra. 2013. A Survey on Security for Mobile Devices. IEEE Communications Surveys & Tutorials 15, 1 (2013), 446–471.
[22] Butler W Lampson. 1974. Protection. ACM SIGOPS Operating Systems Review 8, 1 (1974), 18–24.
[23] Linux Foundation 2016. Security: Cynara. Linux Foundation. https://wiki.tizen.org/Security:Cynara
[24] Linux Foundation 2016. Smack three domain model. Linux Foundation. https://wiki.tizen.org/Security:SmackThreeDomainModel
[25] Linux Foundation 2016. Tizen 2.x security architecture. Linux Foundation. https://wiki.tizen.org/Security/Tizen_2.X_Architecture
[26] Linux Foundation 2016. Tizen 3.0 security overview. Linux Foundation. https://wiki.tizen.org/Security/Tizen_3.X_Overview
[27] Linux Foundation 2017. Tizen 4.0 Public M1 Release Notes. Linux Foundation. https://developer.tizen.org/tizen/release-notes/tizen-4.0-public-m1
[28] Linux Foundation 2018. Tizen | An open source, standards-based software platform for multiple device categories. Linux Foundation. https://www.tizen.org/
[29] Peter Loscocco. 2001. Integrating Flexible Support For Security Policies into the Linux Operating System. In Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference. USENIX association, Boston, MA.
[30] Lisa Mahapatra. 2013. Android vs. iOS: What’s the most popular mobile operating system in your country. International Business Times. Retrieved March 1 (2013), 2014.
[31] Thomas J McCabe. 1976. A Complexity Measure. IEEE Transactions on Software Engineering SE-2, 4 (Dec. 1976), 308–320.
[32] John C Munson and Taghi M Khoshgoftaar. 1989. The dimensionality of program complexity. In Proceedings of the 11th international conference on Software engineering. ACM, Pittsburgh, PA, USA, 245–253.
[33] Stas Negara, Mihai Codoban, Danny Dig, and Ralph E Johnson. 2014. Mining Fine-grained Code Changes to Detect Unknown Change Patterns. In Proceedings of the 36th International Conference on Software Engineering. ACM, Hyderabad, India, 803–813.
[34] Palo Alto Networks. 2017. Android Toast Overlay Attack: "Cloak and Dagger" with No Permissions. Palo Alto Networks. https://researchcenter.paloaltonetworks.com/2017/09/unit42-android-toast-overlay-attack-cloak-and-dagger-with-no-permissions/
[35] Redhat 2015. SELinux/audit2allow, Fedora Wiki. Redhat. http://fedoraproject.org/wiki/SELinux/audit2allow
[36] Elena Reshetova, Filippo Bonazzi, Thomas Nyman, Ravishankar Borgaonkar, and N Asokan. 2015. Characterizing SEAndroid Policies in the Wild. arXiv preprint arXiv:1510.05497 (2015).
[37] Samsung 2017. Samsung Knox Security Solution. Samsung. http://docs.samsungknox.com/samsung-knox-whitepaper/Samsung-Knox-Security-Solution-Whitepaper.pdf
[38] Beata Sarna-Starosta and Scott D Stoller. 2004. Policy Analysis for Security-Enhanced Linux. In Proceedings of the 2004 Workshop on Issues in the Theory of Security (WITS). Washington, DC, USA, 1–12.
[39] Amit Sasturkar, Ping Yang, Scott D Stoller, and CR Ramakrishnan. 2006. Policy analysis for administrative role-based access control. In Computer Security Foundations Workshop, 2006. 19th IEEE. IEEE, Venice, Italy, 13–pp.
[40] Casey Schaufler. 2008. The Simplified Mandatory Access Control Kernel. http://schaufler-ca.com/yahoo_site_admin/assets/docs/SmackWhitePaper.257153003.pdf.
[41] Z Cliffe Schreuders, Tanya Jane McGill, and Christian Payne. 2012. Towards Usable Application-Oriented Access Controls: Qualitative Results from a Usability Study of SELinux, AppArmor, and FBAC-LSM. International Journal of Information Security and Privacy 6, 1 (2012), 57–76.
[42] Stephen Smalley. 2005. Configuring the SELinux Policy. Technical Report 02-007. NAI Labs. https://www.nsa.gov/resources/everyone/digital-media-center/publications/research-papers/assets/files/configuring-selinux-policy-report.pdf.
[43] Stephen Smalley and Robert Craig. 2013. Security Enhanced (SE) Android: Bringing Flexible MAC to Android. In NDSS, Vol. 310. Internet Society, San Diego, CA, USA, 20–38.
[44] Margaret-Anne Storey, Leif Singer, Brendan Cleary, Fernando Figueira Filho, and Alexey Zagalsky. 2014. The (r)evolution of social media in software engineering. In Proceedings of the on Future of Software Engineering. ACM, Hyderabad, India, 100–116.
[45] Tresys Technology 2017. SELinux Policy Analysis Tools v4. Tresys Technology. https://github.com/TresysTechnology/setools
[46] Tresys Technology 2017. Tresys :: Security Enhanced Linux. Tresys Technology. http://www.tresys.com/solutions/security-enhanced-linux
[47] Bogdan Vasilescu, Daryl Posnett, Baishakhi Ray, Mark GJ van den Brand, Alexander Serebrenik, Premkumar Devanbu, and Vladimir Filkov. 2015. Gender and tenure diversity in GitHub teams. In Proceedings of the 33rd Annual ACM Conference on Human Factors in Computing Systems. ACM, Seoul, Republic of Korea, 3789–3798.
[48] Hayawardh Vijayakumar, Guruprasad Jakka, Sandra Rueda, Joshua Schiffman, and Trent Jaeger. 2012. Integrity walls: Finding attack surfaces from mandatory access control policies. In Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security. ACM, Seoul, Republic of Korea, 75–76.
[49] Ruowen Wang, Ahmed M Azab, William Enck, Ninghui Li, Peng Ning, Xun Chen, Wenbo Shen, and Yueqiang Cheng. 2017. SPOKE: Scalable Knowledge Collection and Attack Surface Analysis of Access Control Policy for Security Enhanced Android. In Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security. ACM, Abu Dhabi, UAE, 612–624.
[50] Ruowen Wang, William Enck, Douglas S Reeves, Xinwen Zhang, Peng Ning, Dingbang Xu, Wu Zhou, and Ahmed M Azab. 2015. EASEAndroid: Automatic Policy Analysis and Refinement for Security Enhanced Android via Large-Scale Semi-Supervised Learning. In USENIX Security Symposium. USENIX Association, Washington, DC, USA, 351–366.
[51] Giorgio Zanin and Luigi Vincenzo Mancini. 2004. Towards a Formal Model for Security Policies Specification and Validation in the SELinux System. In Proceedings of the Ninth ACM Symposium on Access Control Models and Technologies. ACM, Yorktown Heights, NY, USA, 136–145.
[52] Nikias Bassen Zuk Avraham, Joshua Drake. 2015. Experts Found a Unicorn in the Heart of Android. Zimperium. http://blog.zimperium.com/experts-found-a-unicorn-in-the-heart-of-android/
[53] Serkan Özkan. 2018. Google Android: List of Security Vulnerabilities. CVEdetails. https://www.cvedetails.com/vulnerability-list/vendor_id-1224/product_id-19997/Google-Android.html