### Potential Vulnerabilities in Pre-Boot Authentication

Even pre-boot authentication can be compromised if it stores cryptographic keys in memory during runtime. Memory forensics techniques, such as Firewire [4] or ColdBoot [17], can extract these keys because the decryption key must exist in main memory for both the operating system and application data to be decrypted during virtual machine (VM) execution. Therefore, the research community must explore new techniques to protect cloud VMs.

### Implications for Full Disk Encryption (FDE) on Mobile Devices

Our findings also have implications for the practical use of FDE on mobile devices. Many organizations require FDE on laptops to guard against data breaches from lost or stolen computers [36]. FDE products like TrueCrypt [41] operate as follows: the user first logs into a mini-OS through pre-boot authentication. If the password matches, FDE decrypts and loads the main OS. The user then enters the password for the main OS to log into the system.

However, in practice, pre-boot authentication is often disabled for several reasons. First, end-users must type two passwords to enter the system, which is cumbersome. Second, it often hinders software updates that require a reboot (though some FDE products offer a log-in-once option to mitigate this issue [32]). Third, remote users, such as VM users in IaaS clouds or those requiring remote assistance, cannot use the system after a reboot until the local user logs in, as they cannot enter the pre-boot password remotely. Consequently, many organizations skip pre-boot authentication and directly use the main OS's authentication credentials to protect the system. As demonstrated in our attack, such practices are insecure. We strongly advocate for the use of pre-boot authentication to ensure effective FDE protection.

### Related Work

#### Virtualization-Based Attacks

Our system authentication subversion is related to the Bluepill attack [37] (and the closely related Vitriol [47]), and SubVirt [26] (and the closely related SubXen [44]). These attacks share the philosophy of launching malicious activities from the virtualization layer but differ in several ways:

1. **Detection Avoidance**: Both Bluepill/Vitriol and SubVirt/SubXen are virtualization-based rootkits that must avoid detection by the virtualization layer. In contrast, our VMI attack leverages the relative freedom a malicious virtualization owner has to launch stealthy attacks against virtualized software.
   
2. **Code Base Size**: Bluepill/Vitriol is an ultra-thin hypervisor with a small code base. Our VMI, however, is an ultra-fat hypervisor that bridges the semantic gap and provides malicious APIs or configurable interfaces for launching attacks.
   
3. **Attack Scope**: SubVirt and SubXen demonstrate the implementation of additional malicious backdoor services (e.g., keystroke sniffers, phishing web servers, and sensitive data harvesters [26]). Unlike our VMI, their attacks are limited to self-contained services that do not attempt to bridge the semantic gap, a recognized challenge for implementing services at the hypervisor layer [5].

#### Virtual Machine Introspection (VMI)

Our attack is also closely related to VMI. Earlier introspection techniques were designed for read-only inspection without affecting the guest-OS states. Notable examples include Livewire [13], Antfarm [21], XenAccess [33], VMwatcher [19], Ether [8], Virtuoso [9], and VMST [11]. Recently, reactive VMIs have been proposed, such as IntroVirt [23], Manitou [29], and Exterior [12], which detect and respond to intrusions, make corrupted instruction pages non-executable, and repair kernel rootkit damages, respectively.

Additionally, active introspection techniques like Lares [34] and SIM [39] require modifying the guest OS. Guest OS modification has also been used to mislead VMI (e.g., [3]).

### Conclusion

We have presented the design, implementation, and evaluation of a context-aware, reactive virtual machine introspection technique that can be used to break the authentication mechanisms of Linux and Windows operating systems with relatively little effort. The attacks use binary analysis to identify critical decision points where authentication succeeds or fails at the binary level, and then leverage a context-aware, reactive VMI to transparently corrupt the control-flow or data-flow of the victim software at that point, resulting in successful authentication without any password-guessing or encryption-cracking. Depending on the instrumentation granularity, our attack can be implemented using hardware virtualization to tamper with syscall-related data, or using software virtualization to tamper with register and memory contents, or instruction operands and opcodes, without detection by the guest-OS. Our results indicate that the approach is applicable to a broad class of authentication implementations, practical against real-world OSes and VM images, and useful for both malicious attacks and forensic analysis of virtualized systems and software.

### Acknowledgments

We thank the anonymous reviewers for their insightful comments. We are also grateful to Shuo Chen, Kevin Hulin, and Kenneth A. Miller for their feedback on an earlier draft of the paper. This research was supported in part by a research gift from VMware, Inc. and National Science Foundation grant #1054629. Any opinions, findings, conclusions, or recommendations expressed are those of the authors and not necessarily of VMware or the NSF.

### References

[1] N. Amit, M. Ben-Yehuda, D. Tsafrir, and A. Schuster. vIOMMU: Efficient IOMMU emulation. In Proceedings of the USENIX Annual Technical Conference, 2011.
[2] Apache. Apache HTTP server benchmarking tool. http://httpd.apache.org/docs/2.2/programs/ab.html.
[3] S. Bahram, X. Jiang, Z. Wang, M. Grace, J. Li, D. Srinivasan, J. Rhee, and D. Xu. DKSM: Subverting virtual machine introspection for fun and profit. In Proceedings of the 29th IEEE Symposium on Reliable Distributed Systems (SRDS), pages 82–91, 2010.
[4] A. Boileau. Hit by a bus: Physical access attacks with Firewire. Ruxcon, 2006.
[5] P. M. Chen and B. D. Noble. When virtual is better than real. In Proceedings of the 8th Workshop on Hot Topics in Operating Systems (HotOS), pages 133–138, 2001.
[6] E. J. Chikofsky and J. H. C. II. Reverse engineering and design recovery: A taxonomy. IEEE Software, 7(1):13–17, 1990.
[7] Defense Science Board. Report of the Defense Science Board Task Force on High Performance Microchip Supply. http://www.acq.osd.mil/dsb/reports/ADA435563.pdf, February 2005.
[8] A. Dinaburg, P. Royal, M. Sharif, and W. Lee. Ether: Malware analysis via hardware virtualization extensions. In Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS), pages 51–62, 2008.
[9] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Giffin, and W. Lee. Virtuoso: Narrowing the semantic gap in virtual machine introspection. In Proceedings of the 32nd IEEE Symposium on Security & Privacy (S&P), pages 297–312, 2011.
[10] H. H. Feng, O. M. Kolesnikov, P. Fogla, W. Lee, and W. Gong. Anomaly detection using call stack information. In Proceedings of the 24th IEEE Symposium on Security & Privacy (S&P), 2003.
[11] Y. Fu and Z. Lin. Space traveling across VM: Automatically bridging the semantic gap in virtual machine introspection via online kernel data redirection. In Proceedings of the 33rd IEEE Symposium on Security & Privacy (S&P), 2012.
[12] Y. Fu and Z. Lin. EXTERIOR: Using a dual-VM based external shell for guest-OS introspection, configuration, and recovery. In Proceedings of the 9th Annual International Conference on Virtual Execution Environments (VEE), pages 97–110, 2013.
[13] T. Garfinkel and M. Rosenblum. A virtual machine introspection based architecture for intrusion detection. In Proceedings of the 10th Annual Network & Distributed System Security Symposium (NDSS), 2003.
[14] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. Terra: A virtual machine-based platform for trusted computing. In Proceedings of the 19th ACM Symposium on Operating Systems Principles (SOSP), pages 193–206, 2003.
[15] R. P. Goldberg. Architectural Principles of Virtual Machines. PhD thesis, Harvard University, 1972.
[16] K. Griffin, S. Schneider, X. Hu, and T.-C. Chiueh. Automatic generation of string signatures for malware detection. In Proceedings of the 12th International Symposium on Recent Advances in Intrusion Detection (RAID), pages 101–120, 2009.
[17] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul, J. A. Calandrino, A. J. Feldman, J. Appelbaum, and E. W. Felten. Lest we remember: Cold-boot attacks on encryption keys. In Proceedings of the 17th USENIX Security Symposium, 2008.
[18] Help Net Security. Encrypt and protect virtual machine images. http://www.net-security.org/secworld.php?id=11825, 2011.
[19] X. Jiang, X. Wang, and D. Xu. Stealthy malware detection through VMM-based out-of-the-box semantic view reconstruction. In Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS), pages 128–138, 2007.
[20] N. M. Johnson, J. Caballero, K. Z. Chen, S. McCamant, P. Poosankam, D. Reynaud, and D. Song. Differential slicing: Identifying causal execution differences for security applications. In Proceedings of the 32nd IEEE Symposium on Security & Privacy (S&P), pages 347–362, 2011.
[21] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. Antfarm: Tracking processes in a virtual machine environment. In Proceedings of the USENIX Annual Technical Conference, 2006.
[22] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. VMM-based hidden process detection and identification using lycosid. In Proceedings of the 4th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments (VEE), pages 91–100, 2008.
[23] A. Joshi, S. T. King, G. W. Dunlap, and P. M. Chen. Detecting past and present intrusions through vulnerability-specific predicates. In Proceedings of the 20th ACM Symposium on Operating Systems Principles (SOSP), pages 91–104, 2005.
[24] J. Kephart and W. Arnold. Automatic extraction of computer virus signatures. In Proceedings of the 4th Virus Bulletin International Conference, pages 178–184, 1994.
[25] G. H. Kim and E. H. Spafford. The design and implementation of Tripwire: A file system integrity checker. In Proceedings of the 1st ACM Conference on Computer and Communications Security (CCS), pages 18–29, 1994.
[26] S. T. King, P. M. Chen, Y.-M. Wang, C. Verbowski, H. J. Wang, and J. R. Lorch. SubVirt: Implementing malware with virtual machines. In Proceedings of the 27th IEEE Symposium on Security & Privacy (S&P), pages 314–327, 2006.
[27] S. T. King, J. Tucek, A. Cozzie, C. Grier, W. Jiang, and Y. Zhou. Designing and implementing malicious hardware. In Proceedings of the 1st USENIX Workshop on Large-scale Exploits and Emergent Threats (LEET), 2008.
[28] Z. Lin, X. Zhang, and D. Xu. Automatic reverse engineering of data structures from binary execution. In Proceedings of the 17th Annual Network & Distributed System Security Symposium (NDSS), 2010.
[29] L. Litty and D. Lie. Manitou: A layer-below approach to fighting malware. In Proceedings of the 1st Workshop on Architectural and System Support for Improving Software Dependability (ASID), pages 6–11, 2006.
[30] Memcached. Memcached: a distributed memory object caching system. http://memcached.org.
[31] Microsoft TechNet. BitLocker drive encryption technical overview, 2008. http://technet.microsoft.com/en-us/library/cc732774.aspx.
[32] R. Mogull. FireStarter: Is full disk encryption without pre-boot secure? https://securosis.com/blog/firestarter-is-full-disk-encryption-without-pre-boot-secure, 2010.
[33] B. D. Payne, M. Carbone, and W. Lee. Secure and flexible monitoring of virtual machines. In Proceedings of the 23rd Annual Computer Security Applications Conference (ACSAC), 2007.
[34] B. D. Payne, M. Carbone, M. I. Sharif, and W. Lee. Lares: An architecture for secure active monitoring using virtualization. In Proceedings of the 29th IEEE Symposium on Security & Privacy (S&P), pages 233–247, 2008.
[35] J. Pfoh, C. Schneider, and C. Eckert. Nitro: Hardware-based system call tracing for virtual machines. In Proceedings of the 6th International Conference on Advances in Information and Computer Security (IWSEC), pages 96–112, 2011.
[36] L. Ponemon. Airport insecurity: The case of missing and lost laptops. Technical report, Ponemon Institute, 2008.
[37] J. Rutkowska. Introducing Blue Pill, June 2006. http://theinvisiblethings.blogspot.com/2006/06/introducing-blue-pill.html.
[38] Seagate. Maxtor basics personal storage 3200 (PS 3200) virus. http://knowledge.seagate.com/articles/en_US/FAQ/205131en.
[39] M. I. Sharif, W. Lee, W. Cui, and A. Lanzi. Secure in-VM monitoring using hardware virtualization. In Proceedings of the 16th ACM Conference on Computer and Communications Security (CCS), pages 477–487, 2009.
[40] J. Sugerman, G. Venkitachalam, and B.-H. Lim. Virtualizing I/O devices on VMware workstation’s hosted virtual machine monitor. In Proc. of USENIX Annual Technical Conference, 2001.
[41] TrueCrypt. TrueCrypt: Free open-source on-the-fly encryption. http://www.truecrypt.org, 2012.
[42] VMware. VMware vCenter converter. http://www.vmware.com/products/converter, 2013.
[43] S. Vogl and C. Eckert. Using hardware performance events for instruction-level monitoring on the x86 architecture. In Proceedings of the 5th European Workshop on System Security (EuroSec), 2012.
[44] R. Wojtczuk. Subverting the Xen hypervisor. In Black Hat Technical Security Conference, 2008.
[45] V. Yegneswaran, J. T. Giffin, P. Barford, and S. Jha. An architecture for generating semantics-aware signatures. In Proceedings of the 14th USENIX Security Symposium, 2005.
[46] F. Zhang, J. Chen, H. Chen, and B. Zang. CloudVisor: Retrofitting protection of virtual machines in multi-tenant cloud with nested virtualization. In Proceedings of the 23rd ACM Symposium on Operating Systems Principles (SOSP), pages 203–216, 2011.
[47] D. A. D. Zov. Hardware virtualization rootkits, July 2006. http://www.theta44.org/software/HVM_Rootkits_ddz_bh-usa-06.pdf.