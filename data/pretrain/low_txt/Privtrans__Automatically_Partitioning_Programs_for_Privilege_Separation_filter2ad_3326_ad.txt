### Windows

However, the implementation of the wrappers may need to be customized depending on the interfaces supported by the operating system. Additionally, our new system call, which allows a process to change the privileges of its children, is not portable. Previous research has addressed this issue, and we do not duplicate their work.

### Potential Issues and Solutions

Several issues arise with privilege separation, many of which are not specific to our approach but apply to any privilege separation method.

1. **Behavior of `setuid` and `getuid`-style Routines:**
   - In the original program, `setuid` and `getuid`-style routines may not behave as expected. For example, since the privilege-separated version drops all privileges immediately, a call to `getuid` will return the UID of the unprivileged user. This can break programs that expect to be setuid and check for certain privileges through the `getuid` call.
   - **Solution:** In our approach, we modified `getuid`-style calls to return the UID of the monitor. Similarly, `setuid` calls should change the UID of the monitor, not the slave.

2. **File Descriptor Numbering:**
   - File descriptor numbering will differ due to the socket between the slave and the monitor. For instance, with the `select` call, the first argument is an integer indicating the highest file descriptor number to check for a change in status. If the slave asks the monitor to perform a `select` call, the highest file descriptor argument supplied by the slave may not match the correct file descriptor in the monitor.
   - **Solution:** To solve this problem, `select` calls should be rewritten as `poll`, as the `poll` call contains the list of actual file descriptors to check for a change in status.

3. **Distinguishing File Descriptors:**
   - File descriptors owned by the monitor and the slave must be distinguished. Our opaque identifiers start at 100, so we can distinguish between a file descriptor owned by the slave (less than 100) and one owned by the monitor (over 100).

4. **Pointer Alias Analysis:**
   - We do not perform any pointer alias analysis, leading to two potential problems:
     - A pointer in the slave might point to an opaque index, which is later used in an operation. Without full pointer analysis, we cannot detect such operations.
     - Since we don't know the liveliness of pointers, we cannot determine when it is safe to free a variable in the monitor. Thus, the monitor never frees memory for a privileged value.
   - **Experience:** In practice, neither of these issues has been problematic; the slave never tried to use an opaque identifier, and the monitor's memory usage was modest.

5. **State Accumulation and User Change:**
   - There is no simple way for a program that accumulates state as the unprivileged user to become another user. To address this, we created a system call that allows a superuser process to change the UID of any running process and a non-superuser process to change the UID of any of its slaves.
   - **Advantage:** A superuser process could always run a program itself, granting the necessary privileges.
   - **Disadvantage:** This system call is system-specific. Other more complex but portable techniques are explored by Kilpatrick [18] and Provos et al. [28].

### Related Work

Previous work has reported issues around `fork` [18]. For example, consider a file descriptor opened by the monitor for a slave. If the slave forks off a new child process, which asks the monitor to close the file descriptor, the parent process in the slave expects the file descriptor to remain open, while the child expects it to be closed. Thus, with privilege separation, we must distinguish in the monitor between file descriptors owned by the child and parent processes in the slave. Our solution is to fork off a new monitor when a new slave is forked.

While privilege separation can significantly reduce the number of operations executed with privileges, it is even more important to write applications securely from the outset. Programs should follow the principle of least privilege, which states that every operation should be executed with the minimum necessary privileges [29]. VSFTPD [13] and Postfix [36] use separate processes to limit the damage from programming errors. Both programs were designed with the principle of least privilege in mind.

Another important issue is identifying which elements of a collection data structure contain privileged and unprivileged data, such as an array that contains both types. The opaque identifier returned during privileged data creation can help with identification, although this may not work in all cases. For example, in thttpd, `poll()` is called. Provos et al. demonstrated the value of privilege separation in OpenSSH [28], but they manually edited OpenSSH to incorporate it. When enabled, OpenSSH resists several attacks [8, 23, 24]. Our technique involves automatic privilege separation.

Privman [18], a library for partitioning applications, provides an API that programmers can use to integrate privilege separation. However, the library can only make authorization decisions and does not support fine-grained policies. Furthermore, the programmer must manually edit the source code at every call point to use the corresponding Privman equivalent. Our method uses data flow techniques to find the proper place to insert calls to the monitor and allows for fine-grained policies.

Several mechanisms exist for dynamically checking system calls, such as Systrace [27], GSWTK [14], Tron [5], Janus [16], and MAPbox [1]. While dynamically checking system calls does not allow for fine-grained policies on regular function calls, it does not require access to the program's source code. Another drawback is that dynamic techniques cannot optimize the number of checks. Our approach works for arbitrary function calls, allows for fine-grained policies, and optimizes the number of expensive calls to the monitor.

Type qualifier propagation has been used to find bugs in C programs [32, 42]. We use attributes as type qualifiers to guide code rewriting. Type qualifiers are used to identify potentially sensitive data in Scrash [7]. CIL is used in this work to rewrite the application so that sensitive data may be removed from a core file.

JFlow/JIF [21, 41, 43] and Balfanz [4] show how to partition applications by trust level in Java. Since Java is type-safe, it is less vulnerable to malicious attacks. Instead, JFlow/JIF and Balfanz focus on preventing unintentional information leaks in programs.

Operating system mechanisms [3, 25, 39] can provide ways to reduce the privileges of applications. However, these mechanisms do not have access to the internals of a program and thus cannot be used for arbitrary function calls as with privilege separation.

Static analysis can be used to find bugs in programs [9, 12, 11, 19, 32, 37, 42]. Our goals are different: we aim to limit the damage from an unknown bug. However, we use static analysis as a tool to automatically find privileged operations.

### Conclusion

We have demonstrated how to automatically integrate privilege separation into source code. We consider a strong model of privilege separation where accessing privileged resources is relegated to the monitor. The monitor can enforce policies on data derived from a privileged resource in addition to access control. Our tool, Privtrans, uses static techniques to rewrite C code and inserts dynamic checks to reduce overhead. Privtrans requires only a few annotations from the programmer, typically fewer than five.

We successfully ran Privtrans on several open-source programs. Privilege separation offers unique benefits for each program, and the overhead due to privilege separation is reasonable. Therefore, Privtrans is applicable to a wide variety of applications.

### Acknowledgements

We would like to thank Niels Provos for helpful discussions, comments, and thoughts regarding our work. We also thank Lujo Bauer, Robert Johnson, James Newsome, David Wagner, Helen Wang, and the anonymous reviewers for their valuable comments while preparing this paper.

### References

[1] A. Acharya and M. Raje. MAPbox: Using parameterized behavior classes to confine applications. In the Proceedings of the 9th USENIX Security Symposium, 2000.

[2] American National Standards Institute (ANSI). Rationale for International Standard – Programming Languages – C, October 1999.

[3] Lee Badger, Daniel Sterne, and David Sherman. A domain and type enforcement UNIX prototype. In the Proceedings of the 5th USENIX Security Symposium, 1995.

[4] Dirk Balfanz. Access Control for Ad-hoc Collaboration. PhD thesis, Princeton University, 2001.

[5] Andrew Berman, Virgil Bourassa, and Erik Selberg. Tron: Process-specific file protection for the UNIX operating system. In the Proceedings of the USENIX Technical Conference on UNIX and Advanced Computing Systems, 1995.

[6] Marc Bevand. OpenBSD chpass/chfn/chsh file content leak. http://www.opennet.ru/base/bsd/1044293885_871.txt.html, 2003.

[7] Pete Broadwell, Matt Harren, and Naveen Sastry. Scrash: A system for generating security crash information. In the Proceedings of the 12th USENIX Security Symposium, 2003.

[8] CERT/CC. CERT advisory CA-2003-24 buffer management vulnerability in OpenSSH, September 2003.

[9] Hao Chen and David Wagner. MOPS: An infrastructure for examining security properties of software. In the Proceedings of the ACM Conference on Computer and Communications Security 2002, 2002.

[10] David Dittrich. The Tribe Flood Network distributed denial of service attack. staff.washington.edu/dittrich/misc/tfn.analysis, 1999.

[11] Dawson Engler, Benjamin Chelf, Andy Chou, and Seth Hallem. Checking system rules using system-specific programmer-written compiler extensions. In the Proceedings of the Operating Systems Design and Implementation (OSDI), 2000.

[12] Dawson Engler, David Chen, Seth Hallem, Andy Chou, and Benjamin Chelf. Bugs as deviant behavior: A general approach to inferring errors in systems code. In the Proceedings of the Symposium on Operating System Principles, 2001.

[13] Chris Evans. Very secure FTP daemon. http://vsftpd.beasts.org.

[14] Timothy Fraser, Lee Badger, and Mark Feldman. Hardening COTS software with generic software wrappers. In the Proceedings of the IEEE Symposium on Security and Privacy, pages 2–16, 1999.

[15] Jonathon Giffin, Somesh Jha, and Barton Miller. Detecting manipulated remote call streams. In the Proceedings of the 11th USENIX Security Symposium, 2002.

[16] Ian Goldberg, David Wagner, Randi Thomas, and Eric A. Brewer. A secure environment for untrusted helper applications. In the Proceedings of the 6th USENIX Security Symposium, San Jose, CA, USA, 1996.

[17] Brian Hatch and the stunnel development team. http://www.stunnel.org, stunnel 4.04, 2004.

[18] Douglas Kilpatrick. Privman: A library for partitioning applications. In the Proceedings of Freenix 2003, 2003.

[19] David Larochelle and David Evans. Statically detecting likely buffer overflow vulnerabilities. In the Proceedings of the 10th USENIX Security Symposium, 2001.

[20] Andries Brouwer (Maintainer). util-linux version 2.11y. RedHat RPMS.

[21] Andrew Myers. JFlow: Practical mostly-static information flow control. In the Proceedings of the Symposium on Principles of Programming Languages, 1999.

[22] George Necula, Scott McPeak, S. Rahul, and Westley Weimer. CIL: Intermediate language and tools for analysis and transformation of C programs. In Conference on Compiler Construction, 2002.

[23] OpenSSH. Buffer overflow in AFS/Kerberos token passing code. http://www.openssh.org/security.html, April 2002.

[24] OpenSSH. OpenSSH remote challenge vulnerability. http://www.openssh.org/security.html, June 2002.

[25] David Peterson, Matt Bishop, and Raju Pandey. A flexible containment mechanism for executing untrusted code. In the Proceedings of the 11th USENIX Security Symposium, 2002.

[26] Jef Poskanzer. thttpd. http://www.acme.com/software/thttpd/.

[27] Niels Provos. Improving host security with system call policies. In the Proceedings of the 12th USENIX Security Symposium, 2003.

[28] Niels Provos, Markus Friedl, and Peter Honeyman. Preventing privilege escalation. In the Proceedings of the 12th USENIX Security Symposium, 2003.

[29] Jerome Saltzer. Protection and the control of information in Multics. In Communications of the ACM, July 1976.

[30] Fred Schneider. Enforceable security policies. Information and System Security, 3(1):30–50, 2000.

[31] securiteam.com. Linux 'util-linux' chfn local root vulnerability. http://www.securiteam.com/unixfocus/5EP0V007PK.html, 2002.

[32] Umesh Shankar, Kunal Talwar, Jeffrey Foster, and David Wagner. Detecting format-string vulnerabilities with type qualifiers. In the Proceedings of the 10th USENIX Security Symposium, 2001.

[33] OpenSSH Development Team. OpenSSH 3.1.1p1 for Linux. www.openssh.org.

[34] OpenSSL Development Team. OpenSSL 0.9.7c. http://www.openssl.org, 2004.

[35] R. Sekar P Uppuluri. Synthesizing fast intrusion prevention/detection systems from high-level specifications. In the Proceedings of the 8th USENIX Security Symposium, 1999.

[36] Wietse Venema. Postfix overview. http://www.postfix.org/motivation.html.

[37] David Wagner, Jeffrey Foster, Eric Brewer, and Alexander Aiken. A first step towards automated detection of buffer overrun vulnerabilities. In the Proceedings of the ISOC Symposium on Network and Distributed System Security, 2000.

[38] Robert Wahbe, Steven Lucco, Thomas Anderson, and Susan Graham. Efficient software-based fault isolation. In the Proceedings of the Symposium on Operating System Principles (SOSP), 1993.

[39] Kenneth Walker, Daniel Sterne, and Lee Badger. Confining root programs with domain and type enforcement (DTE). In the Proceedings of the 6th USENIX Security Symposium, 1996.

[40] John Whaley, Michael Martin, and Monica Lam. Automatic extraction of object-oriented component interfaces. In the Proceedings of the International Symposium on Software Testing and Analysis, 2002.

[41] Steve Zdancewic, Lantian Zheng, Nathaniel Nystrom, and Andrew Myers. Secure program partitioning. In Transactions on Computer Systems, 2002.

[42] Xiaolan Zhang, Antony Edwards, and Trent Jaeger. Using CQual for static analysis of authorization hook placement. In the Proceedings of the 11th USENIX Security Symposium, 2002.

[43] Lantian Zheng, Stephen Chong, Andrew Myers, and Steve Zdancewic. Using replication and partitioning to build secure distributed systems. In the Proceedings of the 2003 IEEE Symposium on Security and Privacy, 2003.