# Intrusion Detection Mechanism within a Database Management System

## 4.4. Performance Evaluation

One of the key advantages of the Naive Bayes Classifier is its low computational cost, which stems from the underlying probability model that assumes conditional independence among attributes. This allows role profiles to be built with a single pass over the training data.

### 4.4.1. Training Time Analysis

In this section, we present results demonstrating the low execution time of our approach for both the training and intrusion detection phases.

**Figure 5: Training Time vs. Number of Training Tuples**

- **Training Time**: The training time increases linearly with the number of tuples in the training data.
- **c-Triplets**: The training time for c-triplets is negligible because they only require three attributes.
- **m-Triplets and f-Triplets**: Both m and f-triplets have similar training times, but f-triplets take approximately three times longer due to their more complex vector representation, which results in larger attribute-domain values.

**Figure 6: Training Time vs. Number of Attributes**

- **Training Time**: The training time increases with the number of attributes for both m and f-triplets, but the order of magnitude remains the same for both.

### 4.4.2. Detection Time Analysis

The time complexity of the detection algorithm for our classifier is O(R × A), where R is the number of roles and A is the number of attributes considered by the classifier.

**Figure 7: Detection Time vs. Number of Attributes**

- **Detection Time**: The detection time increases almost linearly with the number of attributes for both m and f-triplet types. The worst-case scenario is 1.54 milliseconds per query (f-triplets, 100 attributes), which is still negligible.

Overall, the performance experiments confirm the low overhead associated with our approach, suggesting the possibility of integrating it with other query processing features of a database for an integrated online intrusion detection mechanism.

## 5. Conclusions and Future Work

In this paper, we explored the integration of an intrusion detection mechanism within a DBMS. We considered three models of different granularity to represent log records and extract useful information about user access patterns. Role information from the log records was used to train a classifier, which served as the core component of our intrusion detection system. Experimental results on both real and synthetic datasets showed that our methods perform reasonably well.

### Future Work

- **Unsupervised User Profiling**: Investigate the case when role information is not available in the log records. This can be treated as a clustering problem, where standard clustering algorithms can be used to group users with similar behavior. These groups can help the Database Administrator (DBA) define roles, and the intrusion detection phase can be addressed as an outlier detection problem.
- **Sub-Profiles within Roles**: Maintain sub-profiles within a role profile to capture normal user behavior more intuitively. For example, a reservation agent's behavior can be divided into classes such as adding, modifying, canceling, forwarding, and running statistics on bookings. The intrusion detection task can then combine supervised and anomaly detection approaches.
- **Enhanced SQL Query Representation**: Explore better representations of SQL queries to capture both syntactic and semantic information.

## 6. Acknowledgments

The authors would like to thank the anonymous referees for their invaluable suggestions, which significantly improved the quality of this paper.

## References

[1] K. H. A. Hoglund and A. Sorvari. A computer host-based user anomaly detection using the self-organizing map. In Proceedings of the IEEE-INNS-ENNS International Joint Conference on Neural Networks (IJCNN), 2000.

[2] R. Agrawal, R. J. B. Jr., C. Faloutsos, J. Kiernan, R. Rantzau, and R. Srikant. Auditing compliance with a hippocratic database. In Proceedings of the 30th international conference on Very Large Data Bases (VLDB), pages 516–527, 2004.

[3] R. Agrawal, J. Kiernan, R. Srikant, and Y. Xu. Hippocratic databases. In Proceedings of the 28th international conference on Very Large Data Bases (VLDB), pages 143–154. Morgan-Kaufmann, 2002.

[4] A. Anton, E. Bertino, N. Li, and T. Yu. A roadmap for comprehensive online privacy policies. In CERIAS Technical Report, 2004-47, 2004.

[5] S. Axelsson. Intrusion detection systems: A survey and taxonomy. Technical Report 99-15, Chalmers Univ., Mar. 2000.

[6] C. Chung, M. Gertz, and K. Levitt. Demids: a misuse detection system for database systems. In Proceedings of Integrity and Internal Control in Information Systems: Strategic Views on the Need for Control. IFIP TC11 WG11.5 Third Working Conference, 2000.

[7] P. Domingos and M. J. Pazzani. On the optimality of the simple bayesian classifier under zero-one loss. Machine Learning, 29(2-3):103–130, 1997.

[8] Y. Hu and B. Panda. Identification of malicious transactions in database systems. In Proceedings of the International Database Engineering and Applications Symposium (IDEAS), 2003.

[9] Z. Jian-ming and M. Jiang-feng. Intrusion-tolerant based architecture for database system security. Journal of Xidian University, 3(1), February 2003.

[10] J. B. Joshi, R. Bhatti, E. Bertino, and A. Ghafoor. Access-control language for multidomain environments. IEEE Internet Computing, 8(6):40–50, 2004.

[11] J. Vaidya and C. Clifton. Privacy-preserving data mining: Why, how, and when. IEEE Security and Privacy, 2(6):19–27, 2004.

[12] G. Karjoth. Access control with IBM Tivoli Access Manager. ACM Transactions on Information and Systems Security (TISSEC), 6(2):232–257, 2003.

[13] T. Lane and C. E. Brodley. Temporal sequence learning and data reduction for anomaly detection. ACM Transactions on Information and Systems Security (TISSEC), 2(3):295–331, 1999.

[14] V. Lee, J. Stankovic, and S. Son. Intrusion detection in real-time databases via time signatures. In Proceedings of the Sixth IEEE Real-Time Technology and Applications Symposium (RTAS), 2000.

[15] K. LeFevre, R. Agrawal, V. Ercegovac, R. Ramakrishnan, Y. Xu, and D. J. DeWitt. Limiting disclosure in hippocratic databases. In Proceedings of the 30th international conference on Very Large Data Bases (VLDB), pages 108–119, 2004.

[16] P. Liu. Architectures for intrusion tolerant database systems. In Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC), 2002.

[17] T. Lunt, A. Tamaru, F. Gilham, R. Jagannathan, P. Neumann, H. Javitz, A. Valdes, and T. Garvey. A real-time intrusion detection expert system (IDES) - final technical report. Technical Report, Computer Science Laboratory, SRI International, 1992.

[18] T. M. Mitchell. Machine Learning. McGraw-Hill, 1997.

[19] R. Sandhu, D. Ferraiolo, and R. Kuhn. The NIST model for role-based access control: Towards a unified standard. In Proceedings of the 5th ACM Workshop on Role Based Access Control, 2000.

[20] R. Shariq, M. Alberto, S. S., and R. Prasan. Extending query rewriting techniques for fine-grained access control. In Proceedings of ACM SIGMOD, International Conference on Management of Data, 2004.

[21] L. Sweeney. Achieving k-anonymity privacy protection using generalization and suppression. International Journal on Uncertainty, Fuzziness and Knowledge-based Systems, 10(5):571–588, 2002.

[22] R. Talpade, G. Kim, and S. Khurana. Nomad: Traffic-based network monitoring framework for anomaly detection. In Proceedings of the 4th IEEE Symposium on Computers and Communications, 1999.

[23] V. S. Verykios, E. Bertino, I. Nai-Fovino, L. P. Provenza, Y. Saygin, and Y. Theodoridis. State-of-the-art in privacy preserving data mining. SIGMOD Record, 33(1):50–57, 2004.

[24] S. Wenhui and T. Tan. A novel intrusion detection system model for securing web-based database systems. In Proceedings of the 25th Annual International Computer Software and Applications Conference (COMPSAC), 2001.

[25] Q. Yao, A. An, and X. Huang. Finding and analyzing database user sessions. In Proceedings of the 10th International Conference on Database Systems for Advanced Applications (DASFAA), 2005.

---

**Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005)**  
1063-9527/05 $20.00 © 2005 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021 at 12:10:32 UTC from IEEE Xplore. Restrictions apply.