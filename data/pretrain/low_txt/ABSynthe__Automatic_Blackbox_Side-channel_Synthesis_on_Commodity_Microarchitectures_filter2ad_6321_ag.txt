### Key Recovery Using ABSynthe

An analyst equipped with ABSynthe's results can achieve full key recovery from the recovered key bit stream, even with a single capture, by performing tailored post-processing. Future work could focus on automating this post-processing, exploring brute-force heuristics that are applicable to a wide range of (cryptographic) programs.

### Related Work

#### Microarchitectural and Physical Side-Channels

Side-channel attacks have a rich history and have been applied to various microarchitectural components. Cache attacks, which target the L1 cache [3, 31, 32, 33], are the oldest and most widespread. These attacks have since expanded to higher-level caches and even DRAM [34]. Different eviction-based techniques exploit cache side channels, such as PRIME+PROBE, which requires exact eviction sets but is the most general. Other variants include EVICT+TIME [3, 35, 36], which allows over-estimating an eviction set, and FLUSH+RELOAD [1], which relies on shared physical memory and offers high-resolution, easy-to-use capabilities.

Non-software side-channels, which predate microarchitectural attacks, use physical properties of the computing device to leak secret information [37, 38].

#### Branch Target Buffer (BTB)

The BTB has been extensively studied in prior work [8, 39, 40, 41, 42]. It can leak ASLR information from the kernel and other processes. Recent research has also exploited the Pattern History Table (PHT) [9], which is shared across threads. A spy thread can leak data by evicting PHT entries and deducing the direction of a specific branch. The Translation Lookaside Buffer (TLB) is another shared resource. Prior work has shown that the L1 dTLB can be exploited for reliable side-channel attacks using a PRIME+PROBE-style attack [7].

#### Memory Order Buffer (MOB)

The MOB can leak information by creating false dependencies across threads [43] and stalling the victim thread while the CPU decides whether store forwarding should proceed.

#### Contention-Based Side Channels

Recent focus has been on contention-based side channels, which have been applied to execution ports. PortSmash [10] can leak cryptographic keys on Intel processors by creating contention on execution ports. Port contention has also been used to simplify gadgets in speculative execution attacks [44]. Previous work has shown the possibility of information leakage with port contention [42, 45]. Unlike these specialized attacks, ABSynthe can automatically synthesize contention-based side channels for a given software target and microarchitecture, discovering the best set of resources that leak information through blackbox analysis.

#### Side-Channel Attack Automation

Other efforts have proposed systems to automate side-channel attacks, though none support the blackbox synthesis strategy of ABSynthe. For example, [46] automates side-channel attacks with traditional analysis tailored to specific microarchitectural components (e.g., last-level cache). Covert Shotgun [20] runs many combinations of instructions to find covert channels, inspiring ABSynthe's approach, which covers the entire x86_64 ISA and synthesizes side-channel attacks.

While not aiming at automatic blackbox synthesis, some efforts have used machine learning to ease side-channel exploitation, such as differentiating key-dependent side-channel signals [7, 47, 48, 49]. Recent work has also applied deep learning to in-browser cache fingerprinting attacks [50].

### Conclusion

As side-channel vulnerabilities become more significant, traditional attacks like PRIME+PROBE rely on targeted eviction operations on specific components, requiring labor-intensive reverse engineering. In this paper, we created comprehensive leakage maps for on-core resources on three x86_64 microarchitectures, showing the potential for various side-channel attacks by creating contention on microarchitectural components. We developed ABSynthe, which constructs powerful contention-based attacks in a black-box, automated fashion without the need for extensive reverse engineering. Through extensive evaluation, we demonstrated that ABSynthe can automatically craft practical side-channel attacks to recover key bit streams on different microarchitectures (Intel, AMD, ARM) and execution environments (native, virtualized) against various software targets. We also presented a case study where an analyst can recover the full secret key using ABSynthe's results.

ABSynthe can be used by hardware designers for microarchitecture regression testing (e.g., to test new ISA extensions for side channels) and by software designers to test for side-channel leakage.

### Acknowledgements

We are grateful to packet.net and WorksOnArm for sponsoring the use of several bare metal machines, including the AMD EPYC and Cavium Thunder X2 machines. We thank the anonymous reviewers for their valuable feedback. This work was supported by the European Union’s Horizon 2020 research and innovation program under grant agreements No. 786669 (ReAct) and No. 825377 (UNICORE), by Intel Corporation through the Side Channel Vulnerability ISRA, and by the Netherlands Organisation for Scientific Research through grants NWO 639.023.309 VICI “Dowsing,” NWO 639.021.753 VENI “PantaRhei,” and NWO 016.Veni.192.262. The opinions and positions expressed in this document are those of the authors and do not represent the views of any current or previous employer, including Intel Corporation or its affiliates. The same applies to the funding agencies, which are not responsible for any use that may be made of the information contained in this paper.

### References

[1] Y. Yarom and K. Falkner, “Flush+Reload: A High Resolution, Low Noise, L3 Cache Side-Channel Attack.” in USENIX Security Symposium, 2014, pp. 719–732.
[2] C. Disselkoen, D. Kohlbrenner, L. Porter, and D. Tullsen, “Prime+Abort: A Timer-Free High-Precision L3 Cache Attack Using Intel TSX,” in 26th USENIX Security Symposium (USENIX Security 17), 2017, pp. 51–67.
[3] D. A. Osvik, A. Shamir, and E. Tromer, “Cache Attacks and Countermeasures: The Case of AES,” in Cryptographers’ Track at the RSA Conference. Springer, 2006, pp. 1–20.
[4] N. Lawson, “Side-Channel Attacks on Cryptographic Software,” in IEEE Symposium on Security and Privacy, 2009.
[5] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-Level Cache Side-Channel Attacks are Practical,” in IEEE Symposium on Security and Privacy, 2015.
[6] M. Yan, R. Sprabery, B. Gopireddy, C. Fletcher, R. Campbell, and J. Torrellas, “Attack Directories, Not Caches: Side-Channel Attacks in a Non-Inclusive World,” in IEEE Symposium on Security and Privacy, 2019.
[7] B. Gras, K. Razavi, H. Bos, and C. Giuffrida, “Translation Leak-Aside Buffer: Defeating Cache Side-Channel Protections with TLB Attacks,” in USENIX Security Symposium, 2018.
[8] D. Evtyushkin, D. Ponomarev, and N. Abu-Ghazaleh, “Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR,” in Microarchitecture (MICRO), 2016 49th Annual IEEE/ACM International Symposium on. IEEE, 2016, pp. 1–13.
[9] D. Evtyushkin, R. Riley, N. C. Abu-Ghazaleh, D. Ponomarev et al., “BranchScope: A New Side-Channel Attack on Directional Branch Predictor.” ACM, 2018, pp. 693–707.
[10] A. C. Aldaya, B. B. Brumley, S. ul Hassan, C. P. García, and N. Tuveri, “Port Contention for Fun and Profit,” in Security and Privacy (SP), 2019 IEEE Symposium on. IEEE, 2019.
[11] A. Bhattacharyya, A. Sandulescu, M. Neugschwandtner, A. Sorniotti, B. Falsafi, M. Payer, and A. Kurmus, “Smotherspectre: Exploiting Speculative Execution Through Port Contention,” arXiv preprint arXiv:1903.01843, 2019.
[12] S. Weiser, A. Zankl, R. Spreitzer, K. Miller, S. Mangard, and G. Sigl, “Data–Differential Address Trace Analysis: Finding Address-Based Side-Channels in Binaries,” in 27th USENIX Security Symposium (USENIX Security 18), 2018, pp. 603–620.
[13] R. Singhal, “Inside Intel Next Generation Nehalem Microarchitecture,” in Hot Chips, vol. 20, 2008, p. 15.
[14] Y. Tian, C. Lin, and K. Hu, “The Performance Model of Hyper-Threading Technology in Intel Nehalem Microarchitecture,” in Advanced Computer Theory and Engineering (ICACTE), 2010 3rd International Conference on, vol. 3. IEEE, 2010, pp. V3–379.
[15] D. Marr, F. Binns, D. Hill, G. Hinton, D. Koufaty et al., “Hyper-Threading Technology in the Netburst® Microarchitecture,” 14th Hot Chips, 2002.
[16] Intel, “Intel 64 and IA-32 Architectures Optimization Reference Manual,” 2016.
[17] H. Wong, “Measuring Reorder Buffer Capacity,” http://blog.stuffedcow.net/2013/05/measuring-rob-capacity/, Accessed on 10.11.2018, May 2013.
[18] D. Gruss, J. Lettner, F. Schuster, O. Ohrimenko, I. Haller, and M. Costa, “Strong and Efficient Cache Side-Channel Protection Using Hardware Transactional Memory,” in 26th USENIX Security Symposium (USENIX Security 17), 2017, pp. 217–233.
[19] D. Genkin, L. Valenta, and Y. Yarom, “May the Fourth Be with You: A Microarchitectural Side-Channel Attack on Several Real-World Applications of Curve25519,” in Proceedings of the 2017 ACM SIGSAC. ACM, 2017, pp. 845–858.
[20] A. Fogh, “Covert Shotgun,” September 2016. [Online]. Available: https://cyber.wtf/2016/09/27/covert-shotgun/
[21] A. Abel and J. Reineke, “uops.info: Characterizing Latency, Throughput, and Port Usage of Instructions on Intel Microarchitectures,” in Proceedings of the Twenty-Fourth ASPLOS. ACM, 2019, pp. 673–686.
[22] L. Team, “DataFlowSanitizer Design Document,” https://clang.llvm.org/docs/DataFlowSanitizerDesign.html, Accessed on 03.01.2019, March 2019.
[23] J. Zhang, X. Lu, J. Jose, R. Shi, and D. K. D. Panda, “Can Inter-VM SHMEM Benefit MPI Applications on SR-IOV Based Virtualized InfiniBand Clusters?” in European Conference on Parallel Processing. Springer, 2014, pp. 342–353.
[24] K. Price, R. M. Storn, and J. A. Lampinen, Differential Evolution: A Practical Approach to Global Optimization. Springer Science & Business Media, 2006.
[25] S. Hochreiter and J. Schmidhuber, “Long Short-Term Memory,” Neural Computation, vol. 9, no. 8, pp. 1735–1780, 1997.
[26] F. Chollet et al., “Keras,” https://keras.io, 2015.
[27] M. Abadi, A. Agarwal, P. Barham, E. Brevdo, Z. Chen, C. Citro, G. S. Corrado, A. Davis, J. Dean, M. Devin, S. Ghemawat, I. Goodfellow, A. Harp, G. Irving, M. Isard, Y. Jia, R. Jozefowicz, L. Kaiser, M. Kudlur, J. Levenberg, D. Mane, R. Monga, S. Moore, D. Murray, C. Olah, M. Schuster, J. Shlens, B. Steiner, I. Sutskever, K. Talwar, P. Tucker, V. Vanhoucke, V. Vasudevan, F. Viegas, O. Vinyals, P. Warden, M. Wattenberg, M. Wicke, Y. Yu, and X. Zheng, “TensorFlow: Large-Scale Machine Learning on Heterogeneous Systems,” 2015, software available from tensorflow.org. [Online]. Available: https://www.tensorflow.org/
[28] A. Reid, “Trustworthy Specifications of ARM® V8-A and V8-M System Level Architecture,” in 2016 Formal Methods in Computer-Aided Design (FMCAD). IEEE, 2016, pp. 161–168.
[29] D. Genkin, L. Pachmanov, I. Pipman, and E. Tromer, “ECDH Key-Extraction via Low-Bandwidth Electromagnetic Attacks on PCs,” in Cryptographers’ Track at the RSA Conference. Springer, 2016, pp. 219–235.
[30] K. Okeya and T. Takagi, “The Width-W NAF Method Provides Small Memory and Fast Elliptic Scalar Multiplications Secure Against Side-Channel Attacks,” in Cryptographers’ Track at the RSA Conference. Springer, 2003, pp. 328–343.
[31] D. Page, “Theoretical Use of Cache Memory as a Cryptanalytic Side-Channel.” IACR Cryptology ePrint Archive, vol. 2002, no. 169, 2002.
[32] C. Percival, “Cache Missing for Fun and Profit,” 2005.
[33] O. Aciiçmez, “Yet Another Microarchitectural Attack: Exploiting I-Cache,” in Proceedings of the 2007 ACM Workshop on Computer Security Architecture. ACM, 2007, pp. 11–18.
[34] P. Pessl, D. Gruss, C. Maurice, M. Schwarz, and S. Mangard, “DRAMa: Exploiting DRAM Addressing for Cross-CPU Attacks,” in USENIX Security Symposium, 2016.
[35] R. Spreitzer and T. Plos, “Cache-Access Pattern Attack on Disaligned AES T-Tables,” in International Workshop on Constructive Side-Channel Analysis and Secure Design. Springer, 2013, pp. 200–214.
[36] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuffrida, “ASLR on the Line: Practical Cache Attacks on the MMU,” NDSS (Feb. 2017), 2017.
[37] D. Genkin, L. Pachmanov, I. Pipman, E. Tromer, and Y. Yarom, “ECDSA Key Extraction from Mobile Devices via Nonintrusive Physical Side Channels,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2016, pp. 1626–1638.
[38] G. Bertoni, V. Zaccaria, L. Breveglieri, M. Monchiero, and G. Palermo, “AES Power Attack Based on Induced Cache Miss and Countermeasure,” in International Conference on Information Technology: Coding and Computing (ITCC’05)-Volume II, vol. 1. IEEE, 2005, pp. 586–591.
[39] O. Aciiçmez, Ç. K. Koç, and J.-P. Seifert, “On the Power of Simple Branch Prediction Analysis,” in Proceedings of the 2nd ACM Symposium on Information, Computer and Communications Security. ACM, 2007, pp. 312–320.
[40] O. Acıiçmez, Ç. K. Koç, and J.-P. Seifert, “Predicting Secret Keys via Branch Prediction,” in Cryptographers’ Track at the RSA Conference. Springer, 2007, pp. 225–242.
[41] O. Acıiçmez, S. Gueron, and J.-P. Seifert, “New Branch Prediction Vulnerabilities in OpenSSL and Necessary Software Countermeasures,” in IMA International Conference on Cryptography and Coding. Springer, 2007, pp. 185–203.
[42] O. Acıiçmez and J.-P. Seifert, “Cheap Hardware Parallelism Implies Cheap Security,” in Fault Diagnosis and Tolerance in Cryptography, 2007. FDTC 2007. Workshop on. IEEE, 2007, pp. 80–91.
[43] A. Moghimi, T. Eisenbarth, and B. Sunar, “MemJam: A False Dependency Attack Against Constant-Time Crypto Implementations in SGX,” in Cryptographers’ Track at the RSA Conference. Springer, 2018, pp. 21–44.
[44] P. Kocher, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom, “Spectre Attacks: Exploiting Speculative Execution,” arXiv preprint arXiv:1801.01203, 2018.
[45] S. M. D’Antoine, “Exploiting Processor Side Channels to Enable Cross VM Malicious Code Execution,” Ph.D. dissertation, Rensselaer Polytechnic Institute, 2015.
[46] D. Gruss, R. Spreitzer, and S. Mangard, “Cache Template Attacks: Automating Attacks on Inclusive Last-Level Caches.” in USENIX Security Symposium, 2015, pp. 897–912.
[47] I. P. Samiotis, “Side-Channel Attacks Using Convolutional Neural Networks: A Study on the Performance of Convolutional Neural Networks on Side-Channel Data,” Delft University of Technology Master Thesis, 2018.
[48] G. Hospodar, B. Gierlichs, E. De Mulder, I. Verbauwhede, and J. Vandewalle, “Machine Learning in Side-Channel Analysis: A First Study,” Journal of Cryptographic Engineering, vol. 1, no. 4, p. 293, 2011.
[49] T. Zhang, Y. Zhang, and R. B. Lee, “Analyzing Cache Side Channels Using Deep Neural Networks,” in Proceedings of the 34th Annual Computer Security Applications Conference. ACM, 2018, pp. 174–186.
[50] A. Shusterman, L. Kang, Y. Haskal, Y. Meltser, P. Mittal, Y. Oren, and Y. Yarom, “Robust Website Fingerprinting Through the Cache Occupancy Channel,” arXiv preprint arXiv:1811.07153, 2018.