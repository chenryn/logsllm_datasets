To address the asynchrony in the data path, we associated secure-deletion information with the legacy data path flow. Additionally, we decoupled the storage-specific secure-deletion actions from the secure information propagation to enhance portability across different storage types.

Designing the GUID scheme was challenging due to in-transit versions and the placement of GUIDs. For example, using only the sector number was insufficient for handling multiple in-transit updates to the same sector with conflicting sensitive statuses. Placing a GUID in transient data structures, such as block I/O structures, led to complications when these structures could be split, concatenated, copied, or even destroyed before reaching storage. We resolved this issue by associating a GUID with the specific memory pages that contain the data.

Tracking-granularity issues persist throughout the data path. Data is stored in memory pages, while file systems interact with blocks, which may span multiple memory pages. The block layer may concatenate blocks to form requests, which can span more than one memory page. Finally, requests are broken down into storage-specific granularities (e.g., flash pages). Metadata entries with mixed sensitive statuses can also collocate within various access units. These varying granularities make it difficult to map our solution to existing theoretical verification frameworks [34].

Our work would not have been possible without direct access to a flash FTL. Unfortunately, most FTLs are implemented in hardware, directly on the flash device controller, making them inaccessible to the OS. To facilitate software FTL research, we need to create an environment that enables and eases experimentation, demonstrating the benefits of software-level developments and controls.

In summary, we have presented the design, implementation, evaluation, and verification of TrueErase, a legacy-compatible, per-file secure-deletion framework that can stand alone or serve as a building block for encryption- and taint-based secure deletion solutions. We have identified and overcome the challenges of specifying and propagating information across storage layers. We show that TrueErase can handle common system failures. We have verified TrueErase and its core logic through cases derived from file-system-consistency properties and state-space enumeration. Although a secure-deletion solution that can withstand diverse threats remains elusive, TrueErase is a promising step toward this goal.

**11. ACKNOWLEDGMENTS**

We thank Peter Reiher and anonymous reviewers for their valuable feedback on this paper. This work is sponsored by NSF CNS-0845672/CNS-1065127, DoE P200A060279, PEO, and FSU. Any opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the NSF, DoE, PEO, or FSU.

**12. REFERENCES**

[1] Bauer, S. and Priyantha, N.B. 2001. Secure data deletion for Linux file systems. Proceedings of the 10th Usenix Security Symposium (2001), 153–164.
[2] Boneh, D. and Lipton, R. 1996. A revocable backup system. USENIX Security Symposium (1996), 91–96.
[3] Cooke, J. 2007. Flash memory technology direction. Micron Applications Engineering Document. (2007).
[4] CWE - CWE-327: Use of a Broken or Risky Cryptographic Algorithm. Accessed: 2012-09-05. http://cwe.mitre.org/data/definitions/327.html.
[5] Diesburg, S.M., Meyers, C.R., Lary, D.M. and Wang, A.I.A. 2008. When cryptography meets storage. Proceedings of the 4th ACM International Workshop on Storage Security and Survivability (2008), 11–20.
[6] Ganger, G.R. 2001. Blurring the line between OSes and storage devices. Technical Report CMU-CS-01-166, Carnegie Mellon University.
[7] Garfinkel, S.L. and Shelat, A. 2003. Remembrance of data passed: a study of disk sanitization practices. IEEE Security & Privacy. 1, 1 (Feb. 2003), 17 – 27.
[8] Geambasu, R., Kohno, T., Levy, A.A. and Levy, H.M. 2009. Vanish: increasing data privacy with self-destructing data. Proceedings of the 18th USENIX Security Symposium (Berkeley, CA, USA, 2009), 299–316.
[9] Halderman, J.A., Schoen, S.D., Heninger, N., Clarkson, W., Paul, W., Calandrino, J.A., Feldman, A.J., Appelbaum, J. and Felten, E.W. 2009. Lest we remember: cold-boot attacks on encryption keys. Commun. ACM. 52, 5 (May. 2009), 91–98.
[10] Health Insurance Portability and Accountability Act of 1996. Accessed: 2012-07-24. http://www.hhs.gov/ocr/privacy/hipaa/administrative/statute/hipaastatutepdf.pdf.
[11] Hughes, G. 2004. CMRR Protocols for disk drive secure erase. Technical report, Center for Magnetic Recording Research, University of California, San Diego.
[12] Hughes, G.F. 2002. Wise drives [hard disk drive]. IEEE Spectrum. 39, 8 (Aug. 2002), 37 – 41.
[13] Ironkey. Accessed: 2012-07-26. http://www.ironkey.com.
[14] Joukov, N., Papaxenopoulos, H. and Zadok, E. 2006. Secure deletion myths, issues, and solutions. Proceedings of the Second ACM Workshop on Storage Security and Survivability (New York, NY, USA, 2006), 61–66.
[15] Joukov, N. and Zadok, E. 2005. Adding secure deletion to your favorite file system. Third IEEE International Security in Storage Workshop (SISW '05) (Dec. 2005), 8 pp.–70.
[16] Katcher, J. 1997. Postmark: A new file system benchmark. Technical Report TR3022, Network Appliance, 1997. www.netapp.com/tech_library/3022.html.
[17] King, C. and Vidas, T. 2011. Empirical analysis of solid state disk data retention when used with contemporary operating systems. Digital Investigation. 8, (2011), S111–S117.
[18] Lee, J., Heo, J., Cho, Y., Hong, J. and Shin, S.Y. 2008. Secure deletion for NAND flash file system. Proceedings of the 2008 ACM Symposium on Applied Computing (New York, NY, USA, 2008), 1710–1714.
[19] Mac OS X Security Configuration for Mac OS X Version 10.6 Snow Leopard. Accessed: 2012-07-25. http://images.apple.com/support/security/guides/docs/SnowLeopard_Security_Config_v10.6.pdf.
[20] Marcel Breeuwsma, Martien De Jongh, Coert Klaver, Ronald Van Der Knijff and Roelofs, M. 2009. Forensic Data Recovery from Flash Memory. CiteSeerX.
[21] National Industrial Security Program Operating Manual 1995. 5220.22-M. Accessed: 2012-07-26. http://www.usaid.gov/policy/ads/500/d522022m.pdf.
[22] Nightingale, E.B., Veeraraghavan, K., Chen, P.M. and Flinn, J. 2008. Rethink the sync. ACM Trans. Comput. Syst. 26, 3 (Sep. 2008), 6:1–6:26.
[23] OpenSSH. Accessed: 2012-06-07. http://openssh.com/.
[24] Perlman, R. 2005. The ephemerizer: making data disappear. Sun Microsystems, Inc.
[25] Peterson, Z.N.J., Burns, R., Herring, J., Stubblefield, A. and Rubin, A. 2005. Secure deletion for a versioning file system. Proceedings of the USENIX Conference on File And Storage Technologies (FAST) (2005), 143–154.
[26] Reardon, J., Capkun, S. and Basin, D. 2012. Data Node Encrypted File System: Efficient Secure Deletion for Flash Memory. 21st USENIX Security Symposium (Aug. 2012).
[27] Reardon, J., Marforio, C., Capkun, S. and Basin, D. 2011. Secure Deletion on Log-structured File Systems. Technical Report arXiv:1106.0917.
[28] Scrub utility. Accessed: 2012-07-26. http://code.google.com/p/diskscrub/.
[29] Secure rm. Accessed: 2012-07-26. http://sourceforge.net/projects/srm/.
[30] Secure USB Flash Drives | Kingston. Accessed: 2012-07-26. http://www.kingston.com/us/usb/encrypted_security.
[31] shred(1) - Linux man page. Accessed: 2012-08-13. http://linux.die.net/man/1/shred.
[32] Shu, F. and Obr, N. 2007. Data set management commands proposal for ATA8-ACS2.
[33] Sivathanu, G., Sundararaman, S. and Zadok, E. 2006. Type-safe disks. Proceedings of the 7th Symposium on Operating Systems Design and Implementation (Berkeley, CA, USA, 2006), 15–28.
[34] Sivathanu, M., Arpaci-Dusseau, A.C., Arpaci-Dusseau, R.H. and Jha, S. 2005. A logic of file systems. Proceedings of the 4th USENIX Conference on File and Storage Technologies - Volume 4 (Berkeley, CA, USA, 2005), 1–1.
[35] Sivathanu, M., Bairavasundaram, L.N., Arpaci-Dusseau, A.C. and Arpaci-Dusseau, R.H. 2004. Life or death at block-level. Proceedings of the 6th Conference on Symposium on Operating Systems Design & Implementation - Volume 6 (Berkeley, CA, USA, 2004), 26–26.
[36] Sivathanu, M., Prabhakaran, V., Popovici, F.I., Denehy, T.E., Arpaci-Dusseau, A.C. and Arpaci-Dusseau, R.H. 2003. Semantically-smart disk systems. Proceedings of the 2nd USENIX Conference on File and Storage Technologies (2003), 73–88.
[37] Special Publication 800-88: Guidelines for Media Sanitization. Accessed: 2012-07-26. http://csrc.nist.gov/publications/nistpubs/800-88/NISTSP800-88_with-errata.pdf.
[38] Sun, K., Choi, J., Lee, D. and Noh, S.H. 2008. Models and Design of an Adaptive Hybrid Scheme for Secure Deletion of Data in Consumer Electronics. IEEE Transactions on Consumer Electronics. 54, 1 (Feb. 2008), 100 –104.
[39] The OpenSSD Project. Accessed: 2012-07-29. http://www.openssd-project.org/wiki/The_OpenSSD_Project.
[40] Thibadeau, R. 2006. Trusted Computing for Disk Drives and Other Peripherals. IEEE Security & Privacy. 4, 5 (Oct. 2006), 26 –33.
[41] Wei, M., Grupp, L.M., Spada, F.E. and Swanson, S. 2011. Reliably erasing data from flash-based solid state drives. Proceedings of the 9th USENIX Conference on File and Storage Technologies (Berkeley, CA, USA, 2011), 8–8.
[42] Wipe: Secure File Deletion. Accessed: 2012-07-26. http://wipe.sourceforge.net/.