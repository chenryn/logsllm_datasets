# Mission Accomplished? HTTPS Security after DigiNotar

## Authors
- **Johanna Amann**  
  ICSI / Corelight / LBNL  
  Email: [PI:EMAIL]

- **Lexi Brent**  
  The University of Sydney  
  Email: [PI:EMAIL]

- **Oliver Gasser**  
  Technical University of Munich  
  Email: [PI:EMAIL]

- **Georg Carle**  
  Technical University of Munich  
  Email: [PI:EMAIL]

- **Quirin Scheitle**  
  Technical University of Munich  
  Email: [PI:EMAIL]

- **Ralph Holz**  
  The University of Sydney  
  Email: [PI:EMAIL]

### Abstract
Driven by Certificate Authority (CA) compromises and the risk of man-in-the-middle (MITM) attacks, new security features have been added to TLS, HTTPS, and the web Public Key Infrastructure (PKI) over the past five years. These include Certificate Transparency (CT), which makes the CA system auditable; HTTP Strict Transport Security (HSTS) and HTTP Public Key Pinning (HPKP) headers, to harden the HTTPS posture of a domain; DNS-based extensions such as Certification Authority Authorization (CAA) and DNS-Based Authentication of Named Entities (DANE-TLSA), for control over certificate issuance and pinning; and Signaling Cipher Suite Value (SCSV), for protocol downgrade protection.

This paper presents the first large-scale investigation of these improvements to the HTTPS ecosystem, explicitly accounting for their combined usage. In addition to collecting passive measurements at the Internet uplinks of large university networks on three continents, we perform the largest domain-based active Internet scan to date, covering 193 million domains. Furthermore, we track the long-term deployment history of new TLS security features by leveraging passive observations dating back to 2012.

We find that while the deployment of new security features has increased in general, only SCSV (49 million domains) and CT (7 million domains) have gained enough momentum to improve the overall security of HTTPS. Features with higher complexity, such as HPKP, are deployed sparingly and often incorrectly. Our empirical findings are contextualized in terms of risk, deployment effort, and benefit of these new technologies, and actionable steps for improvement are proposed. We cross-correlate the use of features and find some techniques with significant correlation in deployment. We support reproducible research and publicly release our data and code.

### Keywords
TLS, HTTPS, PKI, CT, HSTS, HPKP, CAA, SCSV, X.509

### ACM Reference Format
Johanna Amann, Oliver Gasser, Quirin Scheitle, Lexi Brent, Georg Carle, and Ralph Holz. 2017. Mission Accomplished? HTTPS Security after DigiNotar. In Proceedings of IMC '17, London, United Kingdom, November 1–3, 2017, 16 pages. https://doi.org/10.1145/3131365.3131401

### Introduction
The compromise of the DigiNotar CA in 2011 was a pivotal event in the history of web security. For the first time, a CA was removed from browser root stores due to poor infrastructure control and the subsequent issuance of forged certificates. This incident, along with several studies documenting the poor state of the TLS/X.509 ecosystem, prompted the development of new security features to strengthen the web PKI.

These improvements include:
- **Certificate Transparency (CT)**: Establishes a set of publicly verifiable append-only certificate logs.
- **HTTP Strict Transport Security (HSTS)**: Instructs browsers to only connect through HTTPS.
- **HTTP Public Key Pinning (HPKP)**: Allows certificate pinning through HTTP headers.
- **Signaling Cipher Suite Value (SCSV)**: Protects against protocol downgrading attacks.
- **DNS-Based Authentication of Named Entities (DANE-TLSA)**: Enables HTTPS certificate pinning using the DNS.
- **Certification Authority Authorization (CAA)**: Allows control of certificate issuance through the DNS.

In this paper, we investigate the prevalence of these technologies, audit the correctness of their deployment, and examine the combined role they play in post-DigiNotar web security. Our contributions include:
- Combining active and passive measurements to investigate the improvements to TLS and the web PKI.
- Conducting the largest domain-based active Internet scan to date, covering 193 million domains.
- Tracking the long-term deployment history of new TLS security features using passive observations dating back to 2012.
- Analyzing the combined use of these technologies and the level of protection they achieve.
- Providing an accurate picture of the correct deployment and common mistakes.
- Contextualizing our empirical findings in terms of the complexity, benefit, and risk of each technology.
- Examining the proliferation of different TLS versions using a massive dataset of global connection-level TLS information collected since 2012.

We support open science by releasing our active scan dataset, parsed results, and packet-level data captures. Additionally, we publish newly created tools under a permissive open-source license. The data and code can be found at [https://mediatum.ub.tum.de/1377982](https://mediatum.ub.tum.de/1377982).

### Background
This section describes the TLS, HTTP, and DNS-based HTTPS security extensions we investigate. For a general introduction to the web PKI, we refer the reader to [18, 39].

#### Certificate Transparency (CT)
CT aims to make unnoticed attacks on the PKI nearly impossible through public disclosure of certificate issuance. Users or CAs submit certificate chains for inclusion in one or more semi-trusted public logs, run by independent parties. Each log stores entries in an append-only Merkle Hash Tree. Observers can detect tampering or holes in the dataset by requesting consistency proofs from the log. A goal of CT is for browsers to display lower security indicators if certificates are not logged; currently, Google Chrome is the only browser performing this step.

Upon submission of a certificate chain, a log server returns a signed promise of inclusion called the Signed Certificate Timestamp (SCT). The SCT can be verified using the log’s public key. TLS servers deliver SCTs to the browser, either embedded in the certificate as an X.509 extension, via a TLS extension, or in an Online Certificate Status Protocol (OCSP) response delivered as a TLS extension (OCSP stapling).

To embed SCTs in a certificate, the CA submits a signed precertificate to the CT logs. This precertificate is a promise that a CA will issue this exact certificate after receiving the SCT. The precertificate contains a poison extension that prevents browsers from validating it; it cannot be used in place of a real certificate. The log server signs the precertificate and returns SCTs for it. These are embedded into an X.509 extension of the final certificate. Browsers verify the embedded SCTs by reconstructing the precertificate.

At the time of writing, Google Chrome is the only popular browser that verifies SCTs. It supports all transmission methods and requires valid SCTs for Extended Validation (EV) certificates, removing the EV trust indicator otherwise.

#### HTTP-based Extensions
**HTTP Strict Transport Security (HSTS)** and **HTTP Public Key Pinning (HPKP)** are HTTP extensions that aim to increase the security of the HTTPS ecosystem by setting HTTP header values. HSTS instructs the client to only access a domain via HTTPS. HPKP enables the server to pin specific public keys to a domain to mitigate man-in-the-middle attacks. Browsers must abort a connection if none of the pins match the certificate chain used by the domain. Both HSTS and HPKP directives are shipped with web browsers in so-called preloading lists.

#### Signaling Cipher Suite Value (SCSV) Downgrade Prevention
RFC 7507 defines a Signaling Cipher Suite Value (SCSV) that is used to prevent downgrade attacks, where an attacker prevents connections with strong TLS versions to exploit weaknesses in older TLS versions. Clients commonly fall back to older TLS versions if a connection attempt with a newer TLS version is unsuccessful. In this fallback case, the client appends the SCSV pseudo-cipher value to its list of supported ciphers. When receiving this SCSV, the server must abort the connection if it supports a higher protocol version. One motivation for SCSV was the infamous POODLE attack.

#### DNS-based Extensions
Both **Certification Authority Authorization (CAA)** and **TLS Authentication (TLSA)** are DNS record types introduced to aid certificate issuance and verification, respectively. CAA indicates which CAs may issue certificates for a domain and supports reporting in cases where a CA is requested to issue a certificate for a domain but may not do so because of the CAA record. CAA was accepted by the CA/Browser forum as a mandatory step during certificate issuance and became effective on September 8, 2017.

In contrast to other methods, the CAA record is only required to be correct at the time a CA issues a certificate. Browsers must not match it against current certificates. TLSA, which mandates DNSSEC, allows domain owners to specify which certificate or public key is meant to be deployed for a specific domain and port.

### Related Work
Our research builds on a large body of work on the TLS and HTTPS ecosystem. Past studies have analyzed different segments of the ecosystem and highlighted its many shortcomings, focusing on the PKI, communication protocols, certificate revocation, cryptographic properties, and implementation problems. For a thorough explanation and review of the web PKI and its weaknesses, we refer to [18, 39].

Most closely related to our work, VanderSloot et al. [71] examine the HTTPS ecosystem from several perspectives, including active scans, passive monitoring, and Certificate Transparency logs. While they examine CT, they focus on some of the differences observed in CT and other scan methods and do not extensively analyze the properties of CT, as we do in this work.

Several papers explore ways to enhance or optimize Certificate Transparency. Chuat et al. [15] explore ways to exchange CT information via gossiping to defend against logs lying to small groups of users. Ryan [62] extends CT to certificate revocation and addresses end-to-end encrypted email. Gustafsson et al. [32] present a study that analyzes the content of CT logs, focusing on data directly obtained from the logs and showing differences between smaller CA-owned logs and Google’s large logs filled from Internet scans.

Clark and van Oorshot [18] theoretically studied the effects of HTTP extension headers in 2012. Kranch and Bonneau [42] study the deployment of HSTS and HPKP based on both the preload and the Alexa Top 1M lists. De los Santos et al. [21] analyze the implementation of HSTS and HPKP for several dozen domains using Shodan. Given the novelty of both standards, we find the uptake of HSTS and HPKP to have significantly changed since these early studies.

Although there is a large body of DNSSEC measurement work, interest in TLSA and CAA has been limited. An early study in 2014 shows very low deployment of TLSA records, reporting less than 1000 records in the .com and .net zones [82]. Our study shows that no explosive growth has taken place since then. Szalachowski and Perrig [68] count the deployment of CAA and TLSA among the Alexa Top 100k domains, which we compare against in Section 8.

### Methodology
Our work combines active scans and passive measurements from several sites. We collect the following data:
- For CT, we extract Signed Certificate Timestamps (SCTs) from X.509 certificates as well as TLS and OCSP extensions. A modified version of Google’s log monitor software is used to retrieve certificates from logs accepted by the Google Chrome browser.
- For HSTS/HPKP, we parse and analyze the HTTP responses our scanner collects.
- For SCSV, we lower the TLS version and set the Signaling Cipher Suite Value for Downgrade Protection. This should cause clients to reject the connection (see Section 2).
- We collect CAA and TLSA resource records from DNS. Details are provided in each section.

We devise a novel way to unify the processing of data from active scans and passive network monitoring to analyze CT properties. We dump the raw network traffic of the active scan into a pcap trace. This trace is then fed into our passive measurement pipeline. By using the same analysis code paths for active and passive data, we achieve full comparability. This also enables us to share the raw data from active scans. In contrast to earlier work, which shares processed data from active scans, this packet-level information allows better reproducibility and exposes information about exact packet timing and timeout behavior.

#### Active Scans
We conduct active scans from the University of Sydney (IPv4) and the Technical University of Munich (IPv4 & IPv6). As discussed in Section 1, our scan is based on domain names rather than IP addresses. This captures SNI-based servers and avoids accidentally connected devices.

TLS scans based on domain names have been carried out before, often using the Alexa Top 1 million list of popular domains. In 2016, VanderSloot et al. [71] used .com, .net, and .org domains to scan 153 million domains. We extend this approach by adding domains from .biz, .info, .mobi, .sk, and .xxx from PremiumDrops; .de and .au from ViewDNS; from the Alexa and Umbrella Top 1M, all Alexa Country Top 50, plus domains from 748 zones from ICANN’s Centralized Zone Data Service. This yields a total of 193 million domain names, about 58% of the 330.6 million registered domains in March 2017.

We resolve domains from both Munich (TUM) and Sydney (USyd) using a modified version of massdns and an unmodified version of unbound. From Munich, we find 154 million IPv4-enabled and 9.7 million IPv6-enabled domains, with a 9.5 million intersection. From Sydney, we considered only A records, as the university network does not support IPv6. 650,000 (0.4%) fewer domains could be resolved, which is within expectations. Rijswijk-Deij et al. [70] show that daily deviations of around 0.6% are expected for large-scale DNS scans.

IP addresses learned from our DNS scans are port-scanned using a custom IPv6-capable version of ZMap. The IPv6 response rate is in line with previous work. We perform TLS handshakes using Goscanner, a custom highly-parallelized scanning tool. Goscanner connects to each IP address, sending the domain name in the SNI extension, one name per connection.

If we can establish a TLS connection, we send an HTTP HEAD request to obtain HSTS and HPKP headers. In about 50% of cases, we receive an HTTP 200 ('OK') response code. In the remaining cases, we receive mainly redirect codes, error codes, or no HTTP response at all. For cases where the TLS handshake succeeds, we immediately connect a second time, offering a lower protocol version while sending the SCSV.