### 7. Discussion

In this section, we discuss the potential implications of our findings, particularly in relation to browser complexity.

#### 7.1 Popular and Unpopular Browser Features

A small number of standards in web browsers are extremely popular among website developers, providing essential functionalities for modern web pages. These include features such as querying the document for elements, inspecting and validating forms, and making client-side page modifications. All of these are covered by the Document Object Model (DOM) Level 1 Specification, which dates back to 1998.

However, a much larger portion of the browser's functionality remains unused by most site authors. For instance, in Firefox, eleven JavaScript-exposed standards are completely unused in the ten-thousand most popular websites, and 28 (nearly 37% of the available standards) are used by less than 1% of sites. While some of these unpopular standards are relatively new, their lack of use is not solely due to their recent introduction. Less frequently used features may cater to niche applications, such as those requiring authentication or serving specific developer and user communities.

#### 7.2 Blocked Browser Features

The use of common advertising and tracking blocking extensions further reduces the frequency and number of standards that are executed. This suggests that some standards are primarily used to support the advertising and tracking infrastructure built into the modern web. When users browse with these extensions installed, four additional standards go unused on the web (a total of 15 standards, or 20% of those available in the browser). An additional 20 standards become used on less than 1% of websites (for a total of 31 standards, or 41% of standards in the browser). Sixteen standards are blocked over 75% of the time by blocking extensions.

Furthermore, while content blocker rules do not target JavaScript APIs directly, the fact that a standard like SVG, used on 16% of the Alexa top 10,000 sites, is prevented from running 87% of the time indicates that the functionality it enables is not necessary for the millions of people who use content blocking extensions. This phenomenon supports the notion of the "Website Obesity Crisis," which posits that websites include far more functionality than is actually necessary to serve users' goals.

The presence of a large amount of unused functionality in the browser seems to contradict the security principle of least privilege, which advocates giving applications only the capabilities they need to accomplish their intended tasks. This principle exists to limit the attack surface and reduce unforeseen security risks that can arise from the unexpected and unintended composition of features. As shown in Figure 2, unpopular and heavily blocked features have imposed substantial security costs to the browser.

#### 7.3 Future Work

This study develops and validates the use of monkey testing to elicit browser feature use on the open web. The closed web (i.e., web content and functionality that is only available after logging in to a website) may use a broader set of features. With the correct credentials, the monkey testing approach could be used to evaluate "closed" websites, although it may need to be improved with a rudimentary understanding of site semantics.

Finally, a more comprehensive analysis of the security implications of these broad APIs would be valuable. In recent years, plugins like Java and Flash have become less popular, and the native capabilities of browsers have become more impressive. The modern browser acts as a monolithic intermediary between web applications and user hardware, similar to an operating system. For privacy-conscious users or those with special needs (such as on public kiosks or electronic medical record readers), understanding the privacy and security implications of this broad attack surface is crucial.

### 8. Conclusion

The Web API offers a standardized platform for programming across operating systems and web browsers, which has been instrumental in the success of the web as a platform for content dissemination and application distribution. Feature growth has enabled the modern web, built on JavaScript, to offer functionalities such as video, games, and productivity applications. Applications that were once only possible as native apps or external plugins are now implemented in JavaScript in the browser.

Over time, more features have been standardized and implemented in the browser. Some of these features have been readily adopted by websites to implement new types of applications, while others are infrequently or never used. Beyond this popularity divide, there are features that are blocked by content blockers in the vast majority of attempted uses. The fact that these features are simultaneously popular with site authors but overwhelmingly blocked by site users suggests that they may exist in the browser to serve the needs of the site author rather than the site visitor.

This work documents that much of the JavaScript-accessible functionality in the browser is unused by websites, and even more of it goes unused when popular ad and tracking blocking extensions are installed. Some of this unpopular functionality has been implicated in past security vulnerabilities. Our findings may guide browser vendors, standards authors, and web users in deciding what features are necessary for a secure, vibrant, and useful web.

### 9. Acknowledgements

We would like to thank our anonymous reviewers and our shepherd, Christo Wilson, for their feedback and assistance in improving this paper. We also thank Oliver Hui and Daniel Moreno for their assistance in performing manual website analysis. This work was supported in part by National Science Foundation grants CNS-1351058, CNS-1409868, and CNS-1405886.

### References

[1] Chromium blink mailing list discussion.
[2] Chromium blink web features guidelines.
[3] G. Acar, C. Eubank, S. Englehardt, M. Juarez, A. Narayanan, and C. Diaz. The web never forgets: Persistent tracking mechanisms in the wild. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, pages 674–689. ACM, 2014.
[4] P. Adenot, C. Wilson, and C. Rogers. Web audio api. http://www.w3.org/TR/webaudio/, 2013.
[5] D. Amalfitano, A. R. Fasolino, P. Tramontana, S. De Carmine, and A. M. Memon. Using GUI ripping for automated testing of Android applications. In Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pages 258–261. ACM, 2012.
[6] V. Apparao, S. Byrne, M. Champion, S. Isaacs, A. L. Hors, G. Nicol, J. Robie, P. Sharpe, B. Smith, J. Sorensen, R. Sutor, R. Whitmer, and C. Wilson. Document object model (DOM) level 1 specification. https://www.w3.org/TR/REC-DOM-Level-1/, 1998.
[7] M. Ayenson, D. J. Wambach, A. Soltani, N. Good, and C. J. Hoofnagle. Flash cookies and privacy II: Now with HTML5 and ETag respawning. Available at SSRN 1898390, 2011.
[8] R. Balebako, P. Leon, R. Shay, B. Ur, Y. Wang, and L. Cranor. Measuring the effectiveness of privacy tools for limiting behavioral advertising. In Web 2.0 Security and Privacy Workshop, 2012.
[9] A. Bergkvist, D. C. Burnett, C. Jennings, A. Narayanan, and B. Aboba. WebRTC 1.0: Real-time communication between browsers. https://www.w3.org/TR/webrtc/, 2016.
[10] Black Duck Software Inc. The Chromium (Google Chrome) open source project on Open Hub. https://www.openhub.net/p/chrome/analyses/latest/code_history, 2015.
[11] M. Butkiewicz, H. V. Madhyastha, and V. Sekar. Understanding website complexity: measurements, metrics, and implications. In Proceedings of the 2011 ACM SIGCOMM conference on Internet measurement conference, pages 313–328. ACM, 2011.
[12] M. Cegłowski. The website obesity crisis. http://idlewords.com/talks/website_obesity.htm, 2015.
[13] E. Dahlström, P. Dengler, A. Grasso, C. Lilley, C. McCormack, D. Schepers, and J. Watt. Scalable vector graphics (SVG) 1.1 (second edition). http://www.w3.org/TR/SVG11/, 2011.
[14] A. Deveria. Can I Use. http://caniuse.com/. [Online; accessed 16-October-2015].
[15] D. Dorwin, J. Smith, M. Watson, and A. Bateman. Encrypted media extensions. http://www.w3.org/TR/encrypted-media/, 2015.
[16] P. Eckersley. How unique is your web browser? In Privacy Enhancing Technologies, pages 1–18. Springer, 2010.
[17] M. Falahrastegar, H. Haddadi, S. Uhlig, and R. Mortier. Anatomy of the third-party web tracking ecosystem. arXiv preprint arXiv:1409.1066, 2014.
[18] I. Grigorik, J. Mann, and Z. Wang. Performance timeline level 2. https://w3c.github.io/performance-timeline/, 2016.
[19] I. Grigorik, J. Mann, and Z. Wang. UI events. https://w3c.github.io/uievents/, 2016.
[20] I. Grigorik, A. Reitbauer, A. Jain, and J. Mann. Beacon W3C working draft. http://www.w3.org/TR/beacon/, 2015.
[21] I. Hickson, S. Pieters, A. van Kesteren, P. Jägenstedt, and D. Denicola. HTML: Channel messaging. https://html.spec.whatwg.org/multipage/comms.html#channel-messaging, 2016.
[22] I. Hickson, S. Pieters, A. van Kesteren, P. Jägenstedt, and D. Denicola. HTML: Plugins. https://html.spec.whatwg.org/multipage/webappapis.html#plugins-2, 2016.
[23] A. L. Hors, P. L. Hegaret, L. Wood, G. Nicol, J. Robie, M. Champion, and S. Byrne. Document object model (DOM) level 2 core specification. https://www.w3.org/TR/DOM-Level-2-Core/, 2000.
[24] A. L. Hors, P. L. Hegaret, L. Wood, G. Nicol, J. Robie, M. Champion, and S. Byrne. Document object model (DOM) level 3 core specification. https://www.w3.org/TR/DOM-Level-3-Core/, 2004.
[25] A. L. Hors, P. L. Hegaret, L. Wood, G. Nicol, J. Robie, M. Champion, and S. Byrne. Web cryptography API. https://www.w3.org/TR/WebCryptoAPI/, 2014.
[26] D. Jackson. WebGL specification. https://www.khronos.org/registry/webgl/specs/1.0/, 2014.
[27] D. Jang, R. Jhala, S. Lerner, and H. Shacham. An empirical study of privacy-violating information flows in JavaScript web applications. In Proceedings of the 17th ACM conference on Computer and communications security, pages 270–283. ACM, 2010.
[28] S. Kamkar. Evercookie - virtually irrevocable persistent cookies. http://samy.pl/evercookie/,, 2015.
[29] T. Kohno, A. Broido, and K. C. Claffy. Remote physical device fingerprinting. Dependable and Secure Computing, IEEE Transactions on, 2(2):93–108, 2005.
[30] A. Kostiainen. Vibration. http://www.w3.org/TR/vibration/, 2015.
[31] A. Kostiainen, I. Oksanen, and D. Hazael-Massieux. HTML media capture. http://www.w3.org/TR/html-media-capture/, 2014.
[32] B. Krishnamurthy and C. Wills. Privacy diffusion on the web: a longitudinal perspective. In Proceedings of the 18th international conference on World wide web, pages 541–550. ACM, 2009.
[33] M. Lamouri and M. Cáceres. Screen orientation. http://www.w3.org/TR/screen-orientation/, 2015.
[34] F. Lardinois. Google has already removed 8.8m lines of WebKit code from Blink. http://techcrunch.com/2013/05/16/google-has-already-removed-8-8m-lines-of-webkit-code-from-blink/, 2013.
[35] B. Liu, S. Nath, R. Govindan, and J. Liu. Decaf: detecting and characterizing ad fraud in mobile apps. In 11th USENIX Symposium on Networked Systems Design and Implementation (NSDI 14), pages 57–70, 2014.
[36] A. M. McDonald and L. F. Cranor. Survey of the use of Adobe Flash local shared objects to respawn HTTP cookies, a. ISJLP, 7:639, 2011.
[37] K. Mowery, D. Bogenreif, S. Yilek, and H. Shacham. Fingerprinting information in JavaScript implementations. Proceedings of W2SP, 2011.
[38] K. Mowery and H. Shacham. Pixel perfect: Fingerprinting canvas in HTML5. Proceedings of W2SP, 2012.
[39] Mozilla Developer Network. Object.prototype.watch() - JavaScript | MDN. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch. [Online; accessed 16-October-2015].
[40] M. Mulazzani, P. Reschl, M. Huber, M. Leithner, S. Schrittwieser, E. Weippl, and F. Wien. Fast and reliable browser identification with JavaScript engine fingerprinting. In Web 2.0 Workshop on Security and Privacy (W2SP), volume 5, 2013.
[41] N. Nikiforakis, A. Kapravelos, W. Joosen, C. Kruegel, F. Piessens, and G. Vigna. Cookieless monster: Exploring the ecosystem of web-based device fingerprinting. In IEEE Symposium on Security and Privacy, 2013.
[42] L. Olejnik, T. Minh-Dung, C. Castelluccia, et al. Selling off privacy at auction. In Annual Network and Distributed System Security Symposium (NDSS). IEEE, 2014.
[43] S. Pieters and D. Glazman. CSS object model (CSS-OM). https://www.w3.org/TR/cssom-1/, 2016.
[44] E. Pujol, O. Hohlfeld, and A. Feldmann. Annoyed users: Ads and ad-block usage in the wild. In IMC, 2015.
[45] E. Rader. Awareness of behavioral tracking and information privacy concern in Facebook and Google. In Proc. of Symposium on Usable Privacy and Security (SOUPS), Menlo Park, CA, USA, 2014.
[46] M. Reavy. WebRTC privacy. https://mozillamediagoddess.org/2015/09/10/webrtc-privacy/, 2015.
[47] Z. Rogoff. We've got momentum, but we need more protest selfies to stop DRM in web standards. https://www.defectivebydesign.org/weve-got-momentum-but-we-need-more-protest-selﬁes, 2016.
[48] A. Russell. Doing science on the web. https://infrequently.org/2015/08/doing-science-on-the-web/, 2015.
[49] P. Snyder, L. Ansari, C. Taylor, and C. Kanich. Web API usage in the Alexa 10k. http://imdc.datcat.org/collection/1-0723-8=Web-API-usage-in-the-Alexa-10k, 2016.
[50] A. Soltani, S. Canty, Q. Mayo, L. Thomas, and C. J. Hoofnagle. Flash cookies and privacy. In AAAI Spring Symposium: Intelligent Information Privacy Management, volume 2010, pages 158–163, 2010.
[51] O. Sorensen. Zombie-cookies: Case studies and mitigation. In Internet Technology and Secured Transactions (ICITST), 2013 8th International Conference for, pages 321–326. IEEE, 2013.
[52] The MITRE Corporation. CVE-2013-0763. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-0763, 2013.
[53] The MITRE Corporation. CVE-2014-1577. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1577, 2014.
[54] The MITRE Corporation. Common vulnerabilities and exposures. https://cve.mitre.org/index.html, 2015.
[55] D. Turner and A. Kostiainen. Ambient light events. http://www.w3.org/TR/ambient-light/, 2015.
[56] T. Van Goethem, W. Joosen, and N. Nikiforakis. The clock is still ticking: Timing attacks in the modern web. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, pages 1382–1393. ACM, 2015.
[57] A. van Kesteren. Encoding standard. https://encoding.spec.whatwg.org/, 2016.
[58] A. van Kesteren. XMLHttpRequest. https://xhr.spec.whatwg.org/, 2016.
[59] A. van Kesteren and L. Hunt. Selectors API level 1. https://www.w3.org/TR/selectors-api/, 2013.
[60] V. Vasilyev. fingerprintjs2. https://github.com/Valve, 2015.
[61] World Wide Web Consortium (W3C). All standards and drafts. http://www.w3.org/TR/, 2015.
[62] F. Zaninotto. Gremlins.js. https://github.com/marmelab/gremlins.js, 2016.