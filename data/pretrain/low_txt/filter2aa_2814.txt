# Elevating Windows 10 Kernel Exploitation: Leveraging Write-What-Where Vulnerabilities in the Creators Update

## Speaker Information
- **Name:** Morten Schenk
- **Title:** Security Advisor, Improsec ApS
- **Twitter:** @blomster81
- **Blog:** [Improsec Blog](https://improsec.com/blog/)
- **GitHub:** [MortenSchenk](https://github.com/MortenSchenk)

## What to Expect from This Talk
- **Topic:** Windows 10 Kernel Exploitation on the Creators Update
- **Content:** 
  - In-depth analysis with hex and C code
  - Memes for a lighter touch
  - Discussion of 0-day vulnerabilities

## Agenda
1. Brief Look at Kernel Exploitation History
2. New Windows 10 Mitigations
3. Arbitrary Kernel Read/Write Primitive
4. KASLR Information Leak
5. De-randomizing Page Table Entries
6. Dynamic Function Location
7. Executable Kernel Memory Allocation

## Exploitation Concept: Write-What-Where
- **Vulnerability Class:**
  - **Best Case:** Writing a controlled value to a controlled address.
  - **Common Case:** Writing an uncontrolled value to a controlled address.
  - **Objective:** Leverage this to achieve kernel-mode code execution.

## Brief Look at Kernel Exploitation History
### Windows 7
- **Kernel Information Leaks:** Available via `NtQuerySystemInformation`
- **Executable NonPagedPool:** Default setting
- **Execute User-mode Memory from Kernel-mode:** Possible
- **Overwrite HalDispatchTable:** By using a user-mode address

### Windows 8.1 and Windows 10 (Before Anniversary Update)
- **Blocked APIs:** Kernel information leaks are blocked from low integrity processes.
- **NonPagedPoolNx:** New standard, preventing execution.
- **Supervisor Mode Execution Prevention (SMEP):** Introduced.
- **Required Primitives:**
  - **GDI Bitmap Primitive**
  - **tagWND Primitive**

#### GDI Bitmap Primitive
- **Information Leak:** Through `GdiSharedHandleTable`
- **Overwrite Size:** Using Write-What-Where
- **Consecutive Bitmaps:** Create a primitive
- **Functions:**
  - `SetBitmapBits`
  - `GetBitmapBits`

#### tagWND Primitive
- **Information Leak:** Through `Win32ClientInfo` and `UserHandleTable`
- **Overwrite `cbWndExtra`:** Using Write-What-Where
- **Consecutive Windows:** Create a primitive
- **Functions:**
  - `SetWindowLongPtr`
  - `InternalGetWindowText`
  - `NtUserDefSetText`

### Common Vectors
- **Page Table Entry Overwrite:** A common exploitation vector
- **Static HAL Heap:** Often located at `0xFFFFFFFFFD00000`, with a pointer to `ntoskrnl.exe` at offset `0x448`.

## Windows 10 Version Naming Conventions
| Public Name       | Version | Microsoft Internal Name | OS Build | Release To Market |
|-------------------|---------|-------------------------|----------|-------------------|
| Threshold 1       | 1507    | 10240                   | November Update   |
| Threshold 2       | 1511    | 10586                   | Anniversary Update |
| Redstone 1        | 1607    | 14393                   | Creators Update    |
| Redstone 2        | 1703    | 15063                   | Fall Creators Update |
| Redstone 3        | 1709?   | N/A                     | N/A                |

## Windows 10 Anniversary Update Mitigations
- **Randomized Page Table Entries**
- **Removed Kernel Addresses:** From `GdiSharedHandleTable`
- **Limited `tagWND.strName`:** Must point inside Desktop heap
- **Breaks Bitmap and tagWND Primitives**

## Locating Bitmap Object
- **Storage:** Large Paged Pool
- **Randomization:** On reboot
- **Leak Requirement:** Kernel information leak
- **Stabilization:** Creating large Bitmap objects
- **Offset:** Large static offset points to Bitmaps
- **Deletion and Reallocation:** Delete second large Bitmap, allocate new ones
- **Size Overwrite:** Uses two consecutive Bitmaps

## tagWND Read/Write Outside Desktop Heap
- **Pointer Verification:** Performed by `DesktopVerifyHeapPointer`
- **Controlled Address and Size:** By finding and replacing `tagDESKTOP` pointer
- **Verification Success:** Everywhere with `SetWindowLongPtr`

## Windows 10 Creators Update Mitigations
- **Removed `UserHandleTable` and `ulClientDelta`**
- **Moved ExtraBytes to User-mode:**
  - Cannot overwrite adjacent `tagWND.strName`
- **Broken tagWND Primitive:**
  - Increased Bitmap object header
  - Randomized HAL Heap
  - No `ntoskrnl.exe` pointer at `0xFFFFFFFFFD00448`

## tagWND Primitive Revival
- **New Pointer in `Win32ClientInfo`:** Reveals user-mode mapped Desktop Heap
- **Manual Search:** Through Desktop heap to locate `tagWND` object
- **ExtraBytes Control:**
  - Defined by `cbWndExtra` and `cbClsExtra`
  - Use `SetClassLongPtr` to update `tagWND.strName`

## Kernel ASLR Bypass
- **Randomized Memory:** Almost all kernel memory
- **Static Shared System Page:** `KUSER_SHARED_DATA` at `0xFFFFF78000000000`
- **Mitigated SIDT:**
- **Need for Information Leak:** For `ntoskrnl.exe` pointer

### Bypass Techniques
- **Primitive-Related Bypass:**
  - Works for Windows 8.1 and Windows 10 1507 to 1703
  - Leaks `ntoskrnl.exe` pointer
- **Bitmap KASLR Bypass 0-Day:**
  - Surface structure and `PDEVOBJ` from REACTOS
  - Free and reallocate Bitmaps
  - Read `cdd!DrvSyncronizeSurface` pointer
- **tagWND KASLR Bypass 0-Day:**
  - `KTHREAD` offset `0x2A8` has `ntoskrnl.exe` pointer
- **Bonus KASLR Bypass 0-Days:**
  - Kernel pool leak for Bitmap primitive
  - `ThreadLocalStoragePointer` helps leak kernel pool
  - Direct leak from `gSharedInfo`

## Page Table Entry Overwrite
- **Static Base Address:** `0xFFFFF68000000000`
- **Self-mapping References:**

### De-randomizing Page Table Entries
- **API Requirement:** Must work despite randomization
- **MiGetPteAddress:**
  - Contains randomized base address
  - Dynamically locate using read primitive
  - Leak PTE base address
  - Write shellcode to `KUSER_SHARED_DATA + 0x800`
  - Flip NX bit and call shellcode

## Dynamic Kernel Memory
- **ExAllocatePoolWithTag:**
  - Allocates kernel pool memory
  - Allocate `NonPagedPoolExecute` pool memory
- **Controlled Arguments:**
  - Use `NtGdiDdDDICreateAllocation`
  - Locate `win32kbase!gDxgkInterface` dynamically
  - Leak `win32kfull.sys` and find `win32kfull!DrvOcclusionStateChangeNotify`
  - Overwrite `win32kbase!gDxgkInterface` to execute shellcode

## Summary
- **Kernel Read/Write Primitives:** Can still be leveraged with Write-What-Where vulnerabilities
- **Bypass Page Table Randomization:** With `ntoskrnl.exe` information leak
- **Device Independent Bitmap and tagWND:** Can be used to leak `ntoskrnl.exe`
- **RWX Pool Memory Allocation:** With `ExAllocatePoolWithTag`
- **Code on GitHub:** [MortenSchenk's GitHub](https://github.com/MortenSchenk)

## Credits
- **Alex Ionescu:**
  - [Recon 2013 Slides](https://recon.cx/2013/slides/Recon2013-Alex%20Ionescu-I%20got%2099%20problems%20but%20a%20kernel%20pointer%20ain%27t%20one.pdf)
  - [Blog Post](http://www.alex-ionescu.com/?p=231)
- **Diego Juarez:**
  - [Core Security Blog](https://www.coresecurity.com/blog/abusing-gdi-for-ring0-exploit-primitives)
- **Yin Liang & Zhou Li:**
  - [Black Hat EU 2016](https://www.blackhat.com/docs/eu-16/materials/eu-16-Liang-Attacking-Windows-By-Windows.pdf)
- **Nicolas Economou:**
  - [Core Security Blog](https://www.coresecurity.com/blog/getting-physical-extreme-abuse-of-intel-based-paging-systems-part-3-windows-hals-heap)
- **David Weston & Matt Miller:**
  - [Black Hat US 2016](https://www.blackhat.com/docs/us-16/materials/us-16-Weston-Windows-10-Mitigation-Improvements.pdf)