### From the Signed Measurement Value of the Source Code Package

- **Src Compile**: This function configures and builds the package. Trusted building mechanisms can be integrated here.
- **Pkg Preinst**: The commands in this function are executed just before merging a package image into the file system.
- **Src Install**: This function installs the package to the destination.
- **Pkg Config**: This function sets up an initial configuration for the package after it has been installed.
- **Pkg Postinst**: The commands in this function are executed immediately after merging a package image into the file system.

Gentoo's package repository is well-positioned to serve as a trusted verifier. In addition to package data, the repository maintains corresponding property information to certify customized software. To support runtime certificate verification, the package repository also manages a certificate repository and a revocation list.

### 6. Related Work

Since the introduction of TCG (Trusted Computing Group) attestation as a key feature in the TCG specification [23], numerous remote attestation schemes have been proposed in the literature. Terra [7] employs a Trusted Virtual Machine Monitor (TVMM) to transform a tamper-resistant hardware platform into multiple isolated virtual machines (VMs). TVMM offers both open-box and closed-box VMs, but its attestation only measures programs before their execution, not their behavior afterward.

As an extension of TCG attestation, IMA (Integrity Measurement Architecture) [21] measures all software components, including BIOS, OS loader, operating system, and application-layer programs. However, integrity-based attestation like IMA checks at loading time, which may not provide strong security assurance due to the gap between measurement and execution times. A follow-up to IMA [20] uses IMA to enforce remote access control through attestation.

Property-based attestation [4, 19, 18] provides a scalable framework to support privacy-preserving attestation. A trusted third party examines runtime measurements and judges the target platform's properties. The challenger verifies the property certificate to conclude the attestation result, preserving the attested platform's configuration information. Existing TCG and property-based attestation schemes rely on known-good measurements of the attested programs.

Haldar et al. [12] introduced a semantic attestation mechanism based on Trusted Virtual Machines (TVM), enabling remote attestation of high-level program properties. Shi et al. proposed BIND [22], a fine-grained attestation scheme that provides interfaces to attest security-concerned code segments. Jaeger et al. [14] introduced PRIMA (Policy-Reduced Integrity Measurement Architecture), which checks information flow integrity against Mandatory Access Control (MAC) policies. Program execution attestation [11] verifies whether a program executes as expected. These semantic attestation mechanisms still require a known-good binary code repository.

However, most existing schemes are based on binary attestation, which is crucial for software authentication. Binary attestation involves verifying binary code measurements, necessitating a large database of known-good measurements in practical solutions.

Trusted Execution Technology (TXT) and Secure Virtual Machine (SVM) provide trusted execution environments. Recent practices [8, 15, 17] exploit TXT or SVM. OSLO [15] leverages dynamic root of trust to implement a bootloader based on AMD SKINIT instructions. Flicker [17] provides a secure execution infrastructure using AMD SVM, offering fine-grained attestation on program execution. LaLa [8] combines hardware virtualization and trust technologies to support both instant-on systems and full-featured OS, enabling users to benefit from fast booting and a robust OS simultaneously.

### 7. Discussion

The proposed SCOBA (Source Code Based Attestation) framework can be applied to general custom software if a trusted verifier is available for all source files and configurations, which is not always practical. Here, we discuss some limitations and possible enhancements of the proposed approach.

#### Selection of Trusted Verifier

Choosing the right party to act as the trusted verifier is crucial. For certifying customized software, the trusted verifier should have sufficient knowledge to carry out the certification process. The original software provider is ideally suited for this role. If the original provider is not trusted or unavailable, a trusted third party can be employed, maintaining a repository of known-good source code files from various providers.

#### Automatic Source Code Certification on Custom-Built Software

For custom-built programs with only variant building configurations, the trusted verifier can use semantic verification to automatically examine the building configurations. If the custom-built software does not modify the source code, the trusted verifier can maintain a repository of known-good source code files. During the certification phase, proofs of the trusted building process for the target custom software can be automatically analyzed to determine its properties.

#### Attestation on Fully Custom Software

For fully custom software, users may modify the source code or add new files, making automatic certification by a trusted verifier challenging. A straightforward solution is to have experts manually check these modifications and determine the software's properties. For lower-granularity modifications (e.g., instructions), the trusted verifier can use advanced techniques like testing [6] and model checking. The certification of a whole customized software can be achieved by certifying its components [10]. Custom software may be built from scratch, and its source code files or subcomponents may come from other open-source software, allowing for automatic certification of these subcomponents.

#### Supporting Semantic-Based Attestation on Custom Software

The proposed scheme can serve as a building block for other types of semantic-based attestation [12] on customized software. Different semantic attestation solutions may focus on different software properties, but program integrity is the foundation. Our scheme allows for the attestation of customized software with unpredictable versions and configurations.

### 8. Concluding Remarks

In this paper, we introduce SCOBA, a source code-based attestation scheme for custom software. SCOBA enables property attestation on custom software with unpredictable versions and building configurations. With a trusted building process, SCOBA binds the binary code of a program with its source code and building configuration. A trusted verifier can then certify the generated binary code using proofs from the Trusted Building System and determine the target custom software's properties by checking the source code and building configurations. Thus, SCOBA links the trust chain from TPM to the runtime-attested custom software. We implemented a prototype of SCOBA based on GCC compilation tools and TPM, and experiments show acceptable performance in practice. We also studied the application of SCOBA on Gentoo to support attestation on free software distributed in source code form. With SCOBA, the free software community can employ remote attestation, a key TCG feature, to establish trust in applications in an open networking environment.

### 9. References

[1] Linux From Scratch. http://www.linuxfromscratch.org/index.html.

[2] AMD. AMD64 Virtualization Codenamed “Pacifica” Technology–Secure Virtual Machine Architecture Reference Manual. Technical Report Publication Number 33047, Revision 3.01, AMD, May 2005.

[3] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt, and A. Warfield. Xen and the art of virtualization. In SOSP, volume 37, 5 of Operating Systems Review, pages 164–177, Oct. 19–22 2003.

[9] Gentoo. Gentoo Linux. http://www.gentoo.org/, 2009.

[10] A. K. Ghosh and G. McGraw. An approach for certifying security in software components. In Proc. 21st NIST-NCSC National Information Systems Security Conference, pages 42–48, 1998.

[11] L. Gu, X. Ding, R. H. Deng, B. Xie, and H. Mei. Remote attestation on program execution. In S. Xu, C. Nita-Rotaru, and J.-P. Seifert, editors, STC, pages 11–20. ACM, 2008.

[12] V. Haldar, D. Chandra, and M. Franz. Semantic remote attestation—a virtual machine directed approach to trusted computing. In the Third Virtual Machine Research and Technology Symposium (VM ’04). USENIX., 2004.

[13] Intel Corporation. Intel Trusted Execution Technology—Preliminary Architecture Specification. Technical Report Document Number: 31516803, Intel Corporation, 2006. ftp://download.intel.com/technology/security/downloads/31516803.pdf.

[14] T. Jaeger, R. Sailer, and U. Shankar. PRIMA: policy-reduced integrity measurement architecture. In SACMAT ’06, pages 19–28, 2006.

[15] B. Kauer. OSLO: Improving the security of Trusted Computing. In Proceedings of the 16th USENIX Security Symposium, 2008.

[16] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig. TrustVisor: Efficient TCB reduction and attestation. In Proceedings of the IEEE Symposium on Security and Privacy, May 2010.

[17] J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and H. Isozaki. Flicker: an execution infrastructure for TCB minimization. In J. S. Sventek and S. Hand, editors, EuroSys, pages 315–328. ACM, 2008.

[18] J. Poritz, M. Schunter, E. Van Herreweghen, and M. Waidner. Property attestation—scalable and privacy-friendly security assessment of peer computers. Technical Report RZ 3548, IBM Research, May 2004.

[19] A.-R. Sadeghi and C. Stüble. Property-based attestation for computing platforms: caring about properties, not mechanisms. New Security Paradigms, 2004.

[20] R. Sailer, T. Jaeger, X. Zhang, and L. v. Doorn. Attestation-based policy enforcement for remote access. In CCS 04, October 25-29, 2004.

[4] L. Chen, R. Landfermann, H. Löh, M. Rohe, A.-R. Sadeghi, and C. Stüble. A protocol for property-based attestation. In STC ’06, pages 7–16, New York, NY, USA, 2006. ACM Press.

[5] J. Cihula. Trusted Boot: Verifying the Xen Launch. Xen Summit 07 Fall.

[6] G. Fink and M. Bishop. Property-based testing: a new approach to testing for assurance. In ACM SIGSOFT Software Engineering Notes, volume 22(4), 1997.

[7] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. Terra: a virtual machine-based platform for trusted computing. In SOSP 2003, Bolton Landing, New York, USA, October, 2003.

[8] C. Gebhardt and C. Dalton. LaLa: a late launch application. In STC ’09: Proceedings of the 2009 ACM workshop on Scalable trusted computing, pages 1–8, New York, NY, USA, 2009. ACM.

[21] R. Sailer, X. Zhang, T. Jaeger, and L. v. Doorn. Design and implementation of a TCG-based integrity measurement architecture. In Proceedings of the 13th USENIX Security Symposium, San Diego, CA, USA, August, 2004.

[22] E. Shi, A. Perrig, and L. V. Doorn. BIND: A fine-grained attestation service for secure distributed systems. In 2005 IEEE Symposium on Security and Privacy, 2005.

[23] Trusted Computing Group. TPM main specification. Main Specification Version 1.2 rev. 85, Trusted Computing Group, Feb. 2005.

[24] H. Wang, Y. Guo, and X. Chen. SaConf: Semantic attestation of software configurations. In ATC ’09: Proceedings of the 6th International Conference on Autonomic and Trusted Computing, pages 120–133, 2009.