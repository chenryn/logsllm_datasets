### Analysis of DSL Session Durations and Application Usage

#### 1. DSL Session Duration Analysis
We analyzed the DSL session durations from Radius logs, excluding sessions lasting less than 5 minutes. Surprisingly, we found that the sessions are quite short, with a median duration of only 20–30 minutes. Figure 1 illustrates the distribution of DSL session durations for sessions longer than 5 minutes, along with the distribution of the median session duration computed per DSL line.

The data shows two strong modes: one around 20–30 minutes and another at 24 hours (the maximum duration given the Radius setup). This partitions the DSL lines into two large groups: always-connected lines and on-demand lines that disconnect shortly after use. We observed very few lines connected for several hours. While previous studies found that 70% of sessions in wireless university networks lasted at most 1 hour [30], the short duration of DSL sessions in residential networks was unexpected, contradicting our initial assumption that sessions would be significantly longer-lived.

To determine if there is a significant difference in DSL session durations between P2P users and non-P2P users (see Section 4), we partitioned the DSL lines into two groups. The overall characteristics of the distribution were similar, with two prevalent modes. However, P2P users tend to have longer session durations, and a larger fraction of P2P users remain always connected.

To better understand the high prevalence of short sessions, we examined the Radius termination status in the logs. Radius differentiates between 18 termination causes. Figure 2 shows the distribution of causes for sessions longer than 5 minutes. We observed that more than 80% of sessions are terminated by user request (rising to 95% for sessions under 5 minutes). These terminations are likely due to idle timeouts in the DSL modem on the client side.

While most current broadband contracts are flat-rate, time-based contracts were popular in Europe in the past and are still offered by many ISPs. Therefore, it is likely that consumer DSL routers come with a small idle timeout as a factory default to help users manage costs. We verified this for several popular home routers. The second most common termination cause is PortError, which likely results when users power off their DSL modem as part of shutting down their computing setup.

Since many DSL sessions are short and Radius does not preserve IP address assignments across sessions, we expect (and find) that IP addresses are used for multiple DSL lines. During a 24-hour period, 50% of the IP addresses were assigned to at least 2 distinct DSL lines, and 1–5% to more than 10 DSL lines. These results highlight the unreliability of using an IP address as a long-term host identifier.

Previous studies found that consumer activity patterns start in the morning, increase throughout the day, peak in the early evening, and continue until midnight [19, 17]. We observed the same overall pattern in terms of the number of active DSL sessions, as shown in Figure 3. However, the variation is modest, with 40% of the lines permanently connected. We also noted a slight day-of-week effect, with Sundays having more concurrent sessions and Friday/Saturday having lower daily maxima than other weekdays.

We also observed a diurnal pattern in bandwidth usage, as shown in Figure 4, with the relative differences being much more pronounced. Keeping a session alive does not necessarily imply any bandwidth usage.

Our data also allowed us to analyze the potential resource requirements for an ISP-wide NAT deployment. Specifically, we studied how many public IP addresses are needed to support the traffic on the monitored lines. By counting the number of concurrently active TCP/UDP connections and adding a 5- or 10-minute timeout to each 5-tuple, we found that a single public IP address can support 1,300–2,000 active lines with a 10-minute timeout, and roughly twice that with a 5-minute timeout. Given the maximum number of concurrently connected lines, 5–10 public addresses would suffice to accommodate the monitored DSL lines, significantly reducing the required public IP address space.

#### 2. Application Usage Analysis
To understand the popular applications among our user population, we examined our application classifications (made at data collection time) and anonymized application-layer header traces. We also assessed how well purely port-based classification would perform for identifying residential traffic patterns and characterized traffic asymmetries.

Previous studies found that HTTP dominated Internet traffic around the turn of the century. Fraleigh et al. [18] analyzed packet-level traces from the Sprint backbone in 2001, finding that HTTP contributed > 40% of all bytes, though some traces had P2P contributing 80%. Subsequent studies found that P2P became the dominant application. Ipoque and Cachelogic both used data from their deployed deep packet inspection and traffic management systems to assess application usage [45, 46, 40]. Cachelogic claimed that by 2006, P2P accounted for more than 70% of the traffic, with Ipoque supporting this claim for 2007. For 2008, Ipoque found that P2P in Europe accounted for more than 50% of traffic (with Web contributing another 25%).

On the other hand, Hyun-chul et al. reported that payload-based analysis conducted in 2004 from within the PAIX backbone found almost no P2P traffic but more than 45% HTTP [23]. Cho et al. [9, 10] found in 2008 that TCP port 80 contributed only 14% of all bytes in Japanese ISP backbones (9% in 2005), with the bulk of traffic on unassigned ports. None of the default P2P ports contributed more than 1% of the traffic volume. They found that residential traffic shifted towards more streaming and video content, which aligns with recent reports that P2P traffic has declined while streaming media has increased [50, 3].

From a different perspective, Kotz and Essien [29, 30] reported that 50% of wireless traffic in 2001 on a university campus, including residential buildings, used HTTP's well-known ports, with 40% of this traffic incoming to local servers. Henderson et al. [22] compared these results with newer traces from 2003/2004, finding major shifts in the application mix (HTTP 63%→27%, File systems 5%→19%, P2P 5%→22%), and that more traffic stayed on-campus than in 2001 (70%, up from 34%). Of the P2P traffic, 73% remained internal.

Given this context, we now turn to an analysis of application usage in our 2008/2009 residential traces.

##### 4.1 Application Usage Analysis
To robustly identify application protocols, we employed the Bro system’s Dynamic Protocol Detection (DPD) [13]. DPD tries to parse each byte stream with parsers for numerous protocols, deferring determination of the corresponding application until only that application’s parser recognizes the traffic. DPD also uses regular expression signatures to narrow down the initial set of candidate parsers. The Bro distribution includes full DPD parsers/recognizers for BitTorrent, FTP, HTTP, IRC, POP3, SMTP, SSH, and SSL. We extended the set of detectors with partial recognizers for eDonkey and Gnutella (both based on L7-filter signatures [32]), NNTP, RTP, RTSP, SHOUTcast, SOCKS, and Skype.

In the SEP trace, we classified more than 85% of all bytes, with another 3.6% using well-known ports, as reflected in Figure 5. We found that HTTP, not P2P, is the most significant protocol, accounting for 57% of residential bytes. NNTP also contributes a significant amount of volume, nearly 5%. Almost all NNTP bytes arise due to transfers of binary files, with RAR-archives (application/rar) being among the most common file types, suggesting that the traffic reflects file-sharing.

P2P applications—BitTorrent, Gnutella, and eDonkey—contribute < 14% of all bytes, with BitTorrent being the most prevalent and Gnutella almost non-existent. However, the L7-filter signatures for eDonkey may be incomplete. We observed a significant amount of traffic (1.2%) on well-known eDonkey ports that the classifier failed to detect as eDonkey. If we assume this traffic is indeed eDonkey, the overall share of P2P traffic increases to 17–19%, with eDonkey's popularity roughly the same as BitTorrent's. Even if we assume all unclassified traffic is P2P, the total P2P share still runs below 25%.

P2P applications could also use HTTP for data download, thus "hiding" among the bulk of HTTP traffic and increasing the significance of P2P traffic volume. However, our in-depth analysis of HTTP traffic (Section 5) finds that this is not the case.

Streaming protocols (RTSP, RTMP, SHOUTcast) account for 5% of the traffic in terms of bytes. We identified RTSP and SHOUTcast using partial DPD parsers, while we identified RTMP based only on its well-known port. We also found noticeable Voice-over-IP traffic (Skype [7], RTP), about 1.3% of the total bytes.

To increase our confidence in the representativeness of our application mix results, we analyzed sampled NetFlow data exported by 10 of the ISP’s routers. This data shows that 50% of the traffic comes from TCP port 80. We further compared our results with those from a commercial deep-packet-inspection system deployed at a different network location, finding a close match.

Our analysis of the other traces confirmed the findings outlined above. In particular, the other traces confirmed that our results are not biased by the day-of-week we chose. However, while the HTTP traffic share in the APR trace is about the same, we found slightly more unclassified traffic. We noted that the overall P2P traffic decreases somewhat, and shifts from eDonkey to BitTorrent (now 9.3%). The fraction of NNTP traffic also decreases, accounting for only 2.2% of the traffic on this day. Our hypothesis is that these observations reflect day-to-day variations rather than trends, but we will require longer-time measurements to determine this definitively.

We might expect that application usage differs widely between users with different access speeds. Figure 6 shows the application mix seen for different downstream bandwidth rates. Although the mix varies, the changes are modest, except for more P2P traffic with higher bandwidths and much higher NNTP prevalence for the 17,000 Kbps class. However, only a small percentage of lines use NNTP, so its contribution to the traffic mix can see more variation across different types of lines.

However, we found that lines with higher access bandwidth have a higher utilization in terms of average volume per line. Lines in the 3500 and 6500 Kbps categories contribute about twice as many bytes per line as lines in the 1200 Kbps class, and 17,000 Kbps lines three times more. We also found that general traffic per line is consistent with a heavy-tailed distribution, and the top 2.5% of lines account for 50% of the traffic.

To see if time-of-day effects influence the application mix, we examined the application mix per hour, as shown in Figure 7. We expected to observe more bulk downloads and less interactive traffic during off-peak hours, which our data confirmed. Night-time traffic includes a larger fraction of P2P traffic, though HTTP remains dominant during every time slot. We again noted high variability in NNTP due to the small number of lines using it.

In contemporaneous work, Erman et al. [15] studied the application mix and HTTP content type of a major US broadband provider in the context of understanding the potential for forward caching. They found that HTTP contributes 61% on average and 68% during the busy hour to the traffic volume in the downstream direction, while P2P only contributes 12%. Their results are strikingly similar to ours, strengthening the observation that HTTP is on the rise and P2P is in decline.

##### 4.2 Application Mix of P2P vs. Non-P2P Lines
Next, we studied if the application usage of lines that frequently use P2P differs from those that do not. We found that roughly 3% of DSL lines use P2P protocols, and their traffic contribution accounts for 30% of the overall volume. If a line uses P2P protocols, they usually account for most of the line’s traffic: 29% BitTorrent and 17% eDonkey. However, HTTP is still popular and is responsible for 23% of transferred bytes. We also noted that the fraction of unclassified traffic is higher at 23%, corresponding to roughly 64% of all unclassified traffic. There is hardly any NNTP usage, only 0.6% of bytes.