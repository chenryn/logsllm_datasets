# Dynamic Information Flow Tracking (DIFT) Using a Coprocessor

## Security Experiments
The following table outlines the security experiments conducted with the DIFT coprocessor, including various vulnerabilities and detection methods.

| Vulnerability | Detection Method |
|---------------|------------------|
| `quotactl` syscall (C) | String tainting + System call interposition |
| SUS (C) | String tainting + System call interposition |
| Buffer (stack) overflow | String tainting + System call interposition |
| Buffer (BSS) overflow | String tainting + System call interposition |
| User/kernel pointer dereference | String tainting + System call interposition |
| Format string bug (WU-FTPD, C) | String tainting + System call interposition |
| Pointer injection | String tainting + Function call interposition |

### Detected Vulnerabilities
- **Open file with tainted absolute path**
- **Tainted HTML output includes**
- **Tainted code pointer dereference (return address)**
- **Tainted data pointer dereference (application data)**
- **Tainted pointer to kernelspace**
- **Tainted format string specifier in syslog**
- **Tainted format string specifier in vfprintf**

## Performance Analysis

### Execution Time
The execution time of the DIFT coprocessor was normalized to an unmodified Leon processor. The results are shown in Figure 3.

### Decoupling Queue Size
Figure 4 illustrates the impact of scaling the size of the decoupling queue on a worst-case tag initialization microbenchmark. The overhead decreases as the queue size increases, with a 6-entry queue reducing the overhead to 3%.

### Memory Contention and Stalls
We evaluated the worst-case scenario for the tag cache by performing continuous memory operations designed to miss in the tag cache. With a 512-byte cache, the overhead dropped to 2% even in this worst-case scenario.

### Comparison with Multi-Core Approaches
An indirect comparison between the coprocessor and multi-core approaches for DIFT was performed. The multi-core architecture uses a 32-Kbyte table for value prediction, compressing 16 bytes of data per executed instruction into a 0.8 byte trace. The overhead of exchanging these compressed traces between cores in bulk 64-byte transfers is 5%. The actual multi-core system may have additional overheads due to synchronization.

### Processor/Coprocessor Performance Ratio
To explore the performance capabilities, we clocked the coprocessor at a lower frequency than the main core. The coprocessor introduces a modest performance overhead of 3.8% at a 1.5x ratio and 11.7% at a 2x ratio, with a 16-entry decoupling queue. This indicates that the same DIFT coprocessor design can be used with a wide variety of main cores, even if their peak IPC characteristics vary significantly.

## Conclusions
We presented an architecture that provides hardware support for dynamic information flow tracking using an off-core, decoupled coprocessor. The coprocessor encapsulates all state and functionality needed for DIFT operations and synchronizes with the main core only on system calls. This design approach drastically reduces the cost of implementing DIFT, requires no changes to the design, pipeline, and layout of a general-purpose core, simplifies design and verification, enables use with in-order cores, and avoids taking over an entire general-purpose CPU for DIFT checks. Using a full-system prototype, we showed that the coprocessor introduces a 7% resource overhead over a simple RISC core. The performance overhead of the coprocessor is less than 1% even with a 512-byte cache for DIFT tags. We also demonstrated in practice that the coprocessor can protect unmodified software binaries from a wide range of security attacks.

## Acknowledgments
We would like to thank Jiri Gaisler, Richard Pender, and Gaisler Research for their invaluable assistance with the prototype development. We also thank Shih-Lien Lu and the anonymous reviewers for their feedback on the paper. This work was supported by an Intel Foundation Graduate Fellowship, a Stanford Graduate Fellowship funded by Sequoia Capital, and NSF awards CCF-0701607 and CCF-0546060.

## References
[1] AMD. AMD Lightweight Profiling Proposal, 2007.
[2] T. Austin. DIVA: A Reliable Substrate for Deep Submicron Microarchitecture Design. In the Proc. of the 32nd MICRO, Haifa, Israel, Nov. 1999.
[3] S. Chen, B. Falsafi, et al. Logs and Lifeguards: Accelerating Dynamic Program Monitoring. Technical Report IRP-TR-06-05, Intel Research, Pittsburgh, PA, 2006.
[4] S. Chen, M. Kozuch, et al. Flexible Hardware Acceleration for Instruction-Grain Program Monitoring. In the Proc. of the 35th ISCA, Beijing, China, June 2008.
[5] S. Chen, J. Xu, et al. Defeating Memory Corruption Attacks via Pointer Taintedness Detection. In the Proc. of the 35th DSN, Yokohama, Japan, June 2005.
[6] J. Chung, M. Dalton, et al. Thread-Safe Dynamic Binary Translation using Transactional Memory. In the Proc. of the 14th HPCA, Salt Lake City, UT, Feb. 2008.
[7] J. R. Crandall and F. T. Chong. MINOS: Control Data Attack Prevention Orthogonal to Memory Model. In the Proc. of the 37th MICRO, Portland, OR, Dec. 2004.
[8] M. Dalton, H. Kannan, and C. Kozyrakis. Raksha: A Flexible Information Flow Architecture for Software Security. In the Proc. of the 34th ISCA, San Diego, CA, June 2007.
[9] M. Dalton, H. Kannan, and C. Kozyrakis. Real-World Buffer Overflow Protection for Userspace and Kernelspace. In the Proc. of the 17th Usenix Security Symposium, San Jose, CA, July 2008.
[10] D. E. Denning and P. J. Denning. Certification of programs for secure information flow. ACM Communications, 20(7), 1977.
[11] T. Garfinkel, B. Pfaff, and M. Rosenblum. Ostia: A Delegating Architecture for Secure System Call Interposition. In the Proc. of the 11th NDSS, San Diego, CA, Feb. 2004.
[12] Intel Virtualization Technology (Intel VTx). http://www.intel.com/technology/virtualization.
[13] T. Jim, M. Rajagopalan, et al. System call monitoring using authenticated system calls. IEEE Trans. on Dependable and Secure Computing, 3(3):216–229, 2006.
[14] LEON3 SPARC Processor. http://www.gaisler.com.
[15] A. Mahmood and E. J. McCluskey. Concurrent error detection using watchdog processors – a survey. IEEE Trans. on Computers, 37(2), 1988.
[16] V. Nagarajan, H. Kim, et al. Dynamic Information Tracking on Multicores. In the Proc. of the 12th INTERACT, Salt Lake City, UT, Feb. 2008.
[17] N. Nakka, Z. Kalbarczyk, et al. An Architectural Framework for Providing Reliability and Security Support. In the Proc. of the 34th DSN, Florence, Italy, 2004.
[18] J. Newsome and D. X. Song. Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software. In the Proc. of the 12th NDSS, San Diego, CA, Feb. 2005.
[19] Perl taint mode. http://www.perl.com.
[20] F. Qin, C. Wang, et al. LIFT: A Low-Overhead Practical Information Flow Tracking System for Detecting Security Attacks. In the Proc. of the 39th MICRO, Orlando, FL, Dec. 2006.
[21] M. Rajagopalan, M. Hiltunen, et al. Authenticated System Calls. In the Proc. of the 35th DSN, Yokohama, Japan, June 2005.
[22] W. Shi, J. Fryman, et al. InfoShield: A Security Architecture for Protecting Information Usage in Memory. In the Proc. of the 12th HPCA, Austin, TX, 2006.
[23] Personal communication with Shih-Lien Lu, Senior Principal Researcher, Intel Microprocessor Technology Labs, Hillsboro, OR.
[24] G. E. Suh, J. W. Lee, et al. Secure Program Execution via Dynamic Information Flow Tracking. In the Proc. of the 11th ASPLOS, Boston, MA, Oct. 2004.
[25] N. Vachharajani, M. J. Bridges, et al. RIFLE: An Architectural Framework for User-Centric Information-Flow Security. In the Proc. of the 37th MICRO, Portland, OR, Dec. 2004.
[26] G. Venkataramani, I. Doudalis, et al. FlexiTaint: A Programmable Accelerator for Dynamic Taint Propagation. In the Proc. of the 14th HPCA, Salt Lake City, UT, Feb. 2008.
[27] W. Xu, S. Bhatkar, and R. Sekar. Taint-enhanced policy enforcement: A practical approach to defeat a wide range of attacks. In the Proc. of the 15th USENIX Security Symposium, Vancouver, Canada, Aug. 2006.