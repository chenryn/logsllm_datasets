### Telematics Control Unit (TCU) Analysis and Vulnerability Assessment

#### TCU Hardware Overview
- **Modem**: Uses a 2G cellular modem.
- **Chipset**: Freescale chip with CAN and USB interfaces.
- **Connectivity**:
  - **CAN Interface**: Large connector for vehicle communication.
  - **USB Interface**: Small connector for debugging and data transfer.
  - **Antenna (ANT)**: For cellular communication.
  - **UART**: Serial interface for debugging.

#### Initial Exploration
- **Freescale Chip Debug Header**: Used to extract firmware.
- **USB Interface**: Identified as a potential point for man-in-the-middle (MITM) attacks.

#### Telematics Vulnerabilities
- **Local Vector Confirmation**:
  - Confirmed local vulnerabilities using AT commands:
    - `AT+STKPROF`
    - `AT+XAPP`
    - `AT+XLOG`
    - `AT+FNS`

- **Remote Vector Confirmation**:
  - **TMSI Buffer Overflow**:
    - Vulnerability confirmed based on research by Dr. Ralf-Philipp Weinmann.
    - Exploitation attempts using BladeRF and OpenBTS, with the help of Jared Boone.
    - Successful confirmation of remote buffer overflow after multiple attempts.

- **Exploitation Process**:
  - **Firmware Extraction**:
    - Semi-blind exploitation due to lack of firmware access.
    - Utilized basic exception logging to capture register state and stack values at the time of crash.
  - **Security Features**:
    - No Address Space Layout Randomization (ASLR).
    - No Data Execution Prevention (DEP).
    - No memory isolation.
  - **Payload Injection**:
    - Used AT command buffer overflow to inject payload:
      - Write tag to signify start of data block.
      - Copy 512 bytes from arbitrary location into stack frame.
      - Write tag to signify completed copy of data block.
      - Jump to hardcoded invalid location to force a crash at a specific location.
  - **Data Extraction**:
    - Wait for device to reboot.
    - Read exception log using `AT+XLOG` and extract data from between tags in the stack dump.
    - Repeat the process 13,000 times to gather sufficient data.

- **Post-Exploitation**:
  - Once firmware is accessible, work on reversing and jumping from the baseband to the CAN bus.

#### Advisory
- **US-CERT Advisory**: [ICSA-17-208-01](https://ics-cert.us-cert.gov/advisories/ICSA-17-208-01)
  - **CVSS v3 Score**: 8.8
  - **Impact**: Remotely exploitable with low skill level required. Public exploits are available.
  - **Vendor**: Continental AG
  - **Equipment**: Infineon S-Gold 2 (PMB 8876)
  - **Vulnerabilities**:
    - Stack-Based Buffer Overflow
    - Improper Restriction of Operations within the Bounds of a Memory Buffer

- **Affected Products**:
  - All telematics control modules (TCUs) built by Continental AG that contain the S-Gold 2 (PMB 8876) cellular baseband chipset.
  - **Vehicles Affected**:
    - BMW: Several models produced between 2009-2010.
    - Ford: Limited number of P-HEV vehicles equipped with 2G modems.
    - Infiniti: Multiple models including JX35, QX60, QX50, M37/M56, Q70, Q70L, QX56, QX80.
    - Nissan: 2011-2015 Leaf.
    - iPhone 3G (PMB8878), iPhone 4 (XMM6180), and other devices using PMB8876.

#### Additional Information
- **Security Maturity**:
  - Different market segments have varying levels of security maturity and product lifecycles.
  - Components may be shared across different sectors, necessitating awareness of security issues found elsewhere.

- **Acknowledgments**:
  - **Nissan NA**
  - **ICS-CERT**: Jason Barkley
  - **Auto-ISAC**
  - **Intel PSIRT**

- **Resources**:
  - **Advisory**: [ICSA-17-208-01](https://ics-cert.us-cert.gov/advisories/ICSA-17-208-01)
  - **Tools**:
    - Latest slides: [GitHub Repository](https://github.com/HackingThings/Publications)
    - Windows-based Arduino CAN bus tool: [GitHub Repository](https://github.com/HackingThings/CAN-Bus-Arduino-Tool)