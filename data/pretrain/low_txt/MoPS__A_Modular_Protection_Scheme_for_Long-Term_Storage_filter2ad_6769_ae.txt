### Information Service
The information service provides estimates on the security longevity of various cryptographic primitives and parameters. It also allows users to inquire whether a specific cryptographic method or parameter was considered secure at a given point in the past. The supported cryptographic primitives include hash functions and signature schemes, along with their recommended key lengths. To fulfill these tasks, the service maintains an inventory that tracks the expected security duration for each supported primitive and parameter. This inventory can be updated when new attacks are discovered. Such an online service could be operated by governmental agencies like NIST.

### Notarial Authority (NA)
The NA is responsible for issuing and renewing notarial attestations, which are transferred as XML documents. The NA supports the migration process described in Section 5.2, which involves sending a MoPS ZIP file containing all documents and their proof of existence. The NA possesses multiple RSA signature keys with different key lengths. The choice of key length depends on the hash function specified in the initialization or renewal request (see Table 4 in Appendix A.1 for details).

### Storage Service
The storage service offers a simple object storage solution. When a file is uploaded, it is stored in a single folder on the service host, and a random string is returned as an identifier for future operations. In cloud or enterprise deployment scenarios, the storage service can be adapted to act as a proxy for Amazon S3 or a distributed network file system like Ceph, providing reliability and scalability for large data sets.

### Core Service
The core service manages evidence records and performs the following operations:
- Initializes proofs of existence for documents by creating new data structures based on a given protection scheme configuration.
- Adds documents to existing data structures.
- Migrates proofs of existence from one protection scheme configuration to another.
- Updates proofs of existence according to specified parameters.
- Verifies complete proofs of existence or specific documents protected by an evidence record.

For creating attestations, the core service relies on third-party Time-Stamping Authorities (TSAs) and notarial authorities specified in the update parameters. It uses the storage service for hashing objects referenced by proofs of existence and for reading or writing evidence records. The information service is used to obtain details about cryptographic primitives and parameters during verification.

Following the standardized protection schemes AdES and ERS, MoPS stores proofs of existence in XML format. The XML schema defining valid XML evidence records is available at http://encrypto.de/code/MoPS. The Java JDK's binding compiler, xjc, is used to generate Java Architecture for XML Binding (JAXB) annotated Java classes from the XML schema. These annotations facilitate the automatic creation of XML representations from Java objects and vice versa.

### Protection System
The protection system serves as the back-end for the Web App, managing the creation, renaming, updating, and deletion of information about protection schemes and protected documents in a database. It also handles the import and export of protected documents. For operations on evidence records, the protection system uses the core service.

When a document or a folder of documents is imported or updated, the protection system performs validity estimations to predict how long a proof of existence will remain valid. This is done by extracting the latest attestation from the evidence record and setting the estimation value to the earliest of the following dates obtained from the information service:
- The date until which the hash function used for creating the attestation is considered secure.
- The date until which the signature scheme used for signing the attestation is considered secure.
- The date until which the key length of the signature key for signing the attestation is considered secure.
- The date after which the certificate for the signature key is no longer valid.

### Performance Evaluation
This section presents the results of a performance evaluation, intended to provide an intuition for the additional computation time and storage space required for long-term protection using our implementation. The evaluation runs each data structure for 100 years using the recommended access pattern. All sequence-based data structures use signature-based timestamps, and public signature keys have a two-year lifetime, necessitating renewal every two years.

The selection of hash functions and key lengths follows predictions by Lenstra, using SHA-256 with RSA 2048 until 2038, then SHA-384 with RSA 4096 until 2084, and finally SHA-512 with RSA 8192. Two hash renewals occur in the evaluation.

For AS and NAW, a single document is protected and verified. MTS protects a set of 100 documents added during initialization, verifying only one. For MDS and SLS, a single document is added annually. MDS verifies the last document, while SLS verifies the first. Each document is signed and has a size of 1 MB.

The evaluation test suite and web services were hosted on a single Tomcat 8 application server on Debian 8, powered by an eight-core AMD FXTM 8350 CPU @ 4.00 GHz with 16 GB of RAM. The results, summarized in Table 3, show average values for 10 executions.

### Conclusions and Future Work
In this work, we proposed a modular protection scheme for long-term storage, providing techniques to build, combine, and migrate protection schemes. We implemented MoPS and provided performance measurements. Future work includes integrating techniques for long-term confidentiality protection and further improving the implementation, such as supporting automated renewals of proofs.

### Acknowledgements
This work was co-funded by the DFG, the European Union’s Horizon 2020 research and innovation program, and the German Federal Ministry of Education and Research (BMBF), as well as the Hessen State Ministry for Higher Education, Research, and the Arts (HMWK) within CRISP.

### References
[1] D. Bayer, S. Haber, and W. S. Stornetta. Improving the Efficiency and Reliability of Digital Time-Stamping. In Sequences II: Methods in Communication, Security and Computer Science, pages 329–334, 1993.
[2] A. J. Blazic, S. Saljic, and T. Gondrom. Extensible Markup Language Evidence Record Syntax (XMLERS), 2011.
[3] ETSI. XML Advanced Electronic Signatures (XAdES). Number TS 101 903. 1.4.1 edition, 2009.
[4] T. Gondrom, R. Brandner, and U. Pordesch. Evidence Record Syntax (ERS), 2007.
[5] S. Haber and P. Kamat. A Content Integrity Service for Long-Term Digital Archives. In Archiving Conference, pages 159–164. Society for Imaging Science and Technology, 2006.
[6] D. Lekkas and D. Gritzalis. Cumulative Notarization for Long-term Preservation of Digital Signatures. Computers & Security, 23:413–424, 2004.
[7] A. K. Lenstra. Key lengths. In The Handbook of Information Security, volume 2, pages 617–635. 2006.
[8] P. Maniatis and M. Baker. Secure History Preservation Through Timeline Entanglement. In USENIX Security ’02, pages 297–312, 2002.
[9] R. C. Merkle. A certified digital signature. In CRYPTO ’89, pages 218–238.
[10] M. Vigil, J. Buchmann, D. Cabarcas, C. Weinert, and A. Wiesmaier. Integrity, authenticity, non-repudiation, and proof of existence for long-term archiving: A survey. Computers & Security, 50(0):16–32, 2015.
[11] M. Vigil, D. Cabarcas, J. Buchmann, and J. Huang. Assessing Trust in the Long-Term Protection of Documents. In ISCC 2013, pages 185–191, 2013.
[12] M. Vigil, C. Weinert, K. Braden, D. Demirel, and J. Buchmann. A Performance Analysis of Long-Term Archiving Techniques. In HPCC 2014, pages 878–889, 2014.
[13] M. Vigil, C. Weinert, D. Demirel, and J. Buchmann. An Efficient Time-Stamping Solution for Long-Term Digital Archiving. In IPCCC 2014, 2014.

### Table 4: Supported Hash Functions and Corresponding RSA Key Lengths
| Hash Function | RSA Key Length (in bits) |
|---------------|-------------------------|
| SHA-256       | 2048                    |
| SHA-384       | 4096                    |
| SHA-512       | 8192                    |

### Appendix
#### A. Additional Third-Party Services
Our MoPS prototype includes implementations for all required third-party services. This section provides details on the Certification Authority (CA) and the Time-Stamping Authority (TSA) services.

#### A.1 Certification Authority (CA)
The CA service primarily offers downloads of X.509 certificates and Certificate Revocation Lists (CRLs). The download URL for certificates is embedded in the authority information access (AIA) extension, and for CRLs in the CRL distribution point (CDP) extension. Downloading CA certificates and CRLs is necessary for parties who need to collect verification data for certificates.

Additionally, the CA prototype issues certificates for services and users, revokes certificates (e.g., after a key compromise), and updates CRLs. Certificates and CRLs are created and maintained using the OpenSSL toolkit. In a real-world deployment, each CA would host its own dedicated service instance, but our prototype provides certificate and CRL downloads using a single service instance for three hierarchically ordered CAs to simulate a real Public Key Infrastructure (PKI).

Our implementation operates multiple PKIs with the same entities and hierarchy, using different hash functions and RSA signatures with different key lengths. This allows simulation of cryptographic aging and enables end users to choose from different cryptographic primitives and parameters based on their security preferences. For example, a user might prefer SHA-512 with RSA 8192 for an important document, even though SHA-256 with RSA-2048 is currently recommended. Table 4 shows the supported hash functions and corresponding RSA key lengths.

Creating a signature with parameters expected to be secure for a long time does not necessarily reduce the number of updates needed to prolong the protection, as the certificate lifetime remains a limiting factor.

#### A.2 Time-Stamping Authority (TSA)
The TSA service provides signature-based timestamps according to the Time-Stamp Protocol (TSP). It receives binary-encoded attestation requests and returns binary-encoded attestations in the form of signature-based timestamps. A timestamp request contains a hash to be attested, and the returned attestation includes a timestamp token with the timestamped hash, the time of generation, the TSA's signature, and the TSA's certificate. Like the NA, the TSA service possesses multiple RSA signature keys with different key lengths.