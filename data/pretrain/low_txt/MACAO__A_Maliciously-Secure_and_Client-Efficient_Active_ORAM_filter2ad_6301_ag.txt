### Software Protection and ORAM Developments

Since the introduction of software protection in [30], various Oblivious RAM (ORAM) schemes have been proposed, such as [31] and [51]. However, none of these schemes could achieve the logarithmic bandwidth overhead, which was proven to be the ORAM lower bound under O(1) blocks of client storage [31].

In 2011, Shi et al. introduced a significant breakthrough in ORAM constructions by utilizing a tree structure [59]. This paradigm led to the development of efficient ORAM schemes, including [64], [66], [53], [28], [67], and [14], which achieved the Goldreich-Ostrovsky logarithmic communication bound [31]. The most straightforward and efficient ORAM based on this tree-ORAM paradigm is Path-ORAM [64]. In Path-ORAM, the client only needs to perform read and write operations over a data path, while the server is responsible for providing storage functionality, such as data sending and receiving.

Tree-based ORAMs have been adapted to enable access pattern obliviousness in various applications, including secure processors [43], oblivious data structures [68], [37], [54], multi-party computation [67], and oblivious storage [17], [56], [41], [70], [49], [4]. Several ORAM schemes have been specifically designed for oblivious file systems, such as [6], [44], [45], [14], and [10]. These schemes focus on specific properties in file system applications, such as range queries [14], multi-client support [44], [10], and parallel access [15].

Recently, Larsen and Nielsen re-confirmed the existence of the logarithmic bandwidth overhead in passive ORAM schemes [40]. To reduce communication overhead, the concept of active ORAM was introduced, where the server can perform some computations. Despite many active ORAM schemes being presented, such as [53], [22], [25], [46], [5], [26], [21], and [47], most either cannot surpass the logarithmic bound or have been shown to be insecure. To the best of our knowledge, only active ORAM schemes that leverage homomorphic encryption (HE) techniques [27], [19] can achieve O(1) client bandwidth overhead under reasonably large block sizes (e.g., O(log^5 N), where N is the number of data blocks) [5], [22], [25]. However, performing HE computations during ORAM access has been shown to incur significantly more latency than streaming O(log N) data blocks in passive ORAM schemes [33], [47].

### Distributed ORAM

To improve computational efficiency, ORAM has been explored in distributed settings [61], [3], [33], [42], [32]. The first multi-server ORAM was proposed by Stefanov et al. [61], transforming the (single-server) Partition-ORAM [63] paradigm into a multi-server setting to achieve O(1) client bandwidth overhead and low computation at the servers. The main limitation of this scheme is the high client storage overhead (i.e., O(√N)) due to the Partition-ORAM paradigm.

Lu et al. [42] and Kushilevitz et al. [39] adapted the hierarchical ORAM construction [31] to the multi-server setting to reduce communication overhead. Abraham et al. proposed a two-server ORAM scheme [3], which exploits the XOR-PIR protocol [18] for oblivious retrieval. Gordon et al. proposed another two-server ORAM scheme [32], which eliminates the need to update the position map component in the tree-ORAM paradigm, thereby saving the factor of O(log N) communication rounds incurred by accessing the position map recursively at the server. Chan et al. [16] proposed a three-server construction with perfect security based on the hierarchical model [31]. One of the most efficient multi-server ORAM schemes is S3ORAM [33], which uses Shamir secret sharing [57] to perform homomorphic computations efficiently over the tree-ORAM layout with triplet eviction [22]. These schemes offer semi-honest security.

Another line of research focuses on the context of multi-party computation in the RAM model [24], [67], [23], [38]. This setting differs from the standard client-server setting, as there is no trusted party with full access to the data, and all client operations are emulated by multiple parties in a privacy-preserving manner. The goal is to perform secure computation in the RAM model where both instructions and functions are hidden from participants, and ORAM is used as a building block. Due to the stronger privacy model, these distributed ORAM schemes are less efficient than those in the standard client-server setting.

### Special ORAMs

Some special ORAMs conceal only read or write patterns (but not both) [11], [55], [65]. These constructions are generally more efficient than generic ORAMs because they target specific operation types (read or write).

### MACAO: A New Multi-Server Active ORAM Framework

In this paper, we propose a new multi-server active ORAM framework called MACAO, which provides integrity, access pattern obliviousness against an active adversary, and the ability to perform secure computation simultaneously. MACAO synergizes authenticated secret sharing and the tree ORAM paradigm to offer low client communication and server computation while achieving a high level of security and privacy in the presence of active adversaries. We conducted extensive experiments on actual cloud platforms to validate the efficiency of MACAO compared to state-of-the-art solutions.

#### Use-Case: Oblivious Distributed File System

Our primary objective in designing MACAO is to enable oblivious storage and secure computation against active adversaries in data outsourcing applications. MACAO schemes can be integrated into existing distributed file systems to provide secure computation with strong security and privacy, including data confidentiality, integrity, and access pattern obliviousness against active adversaries. For example, Figure 16 illustrates an instance of an Oblivious Distributed File System (ODFS) by integrating MACAO (i.e., gray boxes) into the Network File System (NFS) [58]. Since NFS components are independent of MACAO, the performance of ODFS can be easily estimated given the cost of each MACAO component detailed in §V-B. We leave the actual integration and implementation of ODFS for future work.

Another critical feature is to support the multi-user setting in ODFS, where multiple users can obliviously access outsourced data concurrently. This requires a trusted proxy (as in [56]) to handle concurrent requests and enforce access control policies. Our MACAO can serve as the oblivious access protocol between the proxy and the servers. We also leave this implementation for future work.

### References

[1] "Libtomcrypt, a fairly comprehensive, modular and portable cryptographic toolkit," Available at https://github.com/libtom/libtomcrypt.
[2] "Zeromq distributed messaging," Available at http://zeromq.org.
[3] I. Abraham, C. W. Fletcher, K. Nayak, B. Pinkas, and L. Ren, "Asymptotically tight bounds for composing ORAM with PIR," in IACR International Workshop on Public Key Cryptography. Springer, 2017, pp. 91–120.
[4] A. Ahmad, K. Kim, M. I. Sarfaraz, and B. Lee, "Obliviate: A data oblivious filesystem for Intel SGX." in NDSS, 2018.
[5] D. Apon, J. Katz, E. Shi, and A. Thiruvengadam, "Verifiable oblivious storage," in International Workshop on Public Key Cryptography. Springer, 2014, pp. 131–148.
[6] A. J. Aviv, S. G. Choi, T. Mayberry, and D. S. Roche, "Oblivisync: Practical oblivious file backup and synchronization," in NDSS, 2017.
[7] D. Beaver, "Efficient multiparty protocols using circuit randomization," in Annual International Cryptology Conference. Springer, 1991, pp. 420–432.
[8] A. Ben-Efraim and E. Omri, "TurboSpeedz: Double your online SPDZ! Improving SPDZ using function dependent preprocessing," in Applied Cryptography and Network Security — ACNS 2019, June 5-7, 2019, to appear. Available at https://eprint.iacr.org/2019/080.
[9] V. Bindschaedler, M. Naveed, X. Pan, X. Wang, and Y. Huang, "Practicing oblivious access on cloud storage: the gap, the fallacy, and the new way forward," in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 837–849.
[10] E.-O. Blass, T. Mayberry, and G. Noubir, "Multi-client oblivious RAM secure against malicious servers," in International Conference on Applied Cryptography and Network Security. Springer, 2017, pp. 686–707.
[11] E.-O. Blass, T. Mayberry, G. Noubir, and K. Onarlioglu, "Toward robust hidden volumes using write-only oblivious RAM," in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2014, pp. 203–214.
[12] E. Boyle and M. Naor, "Is there an oblivious RAM lower bound?" in Proceedings of the 2016 ACM Conference on Innovations in Theoretical Computer Science. ACM, 2016, pp. 357–368.
[13] R. Canetti, "Security and composition of multiparty cryptographic protocols," Journal of CRYPTOLOGY, vol. 13, no. 1, pp. 143–202, 2000.
[14] A. Chakraborti, A. J. Aviv, S. G. Choi, T. Mayberry, D. S. Roche, and R. Sion, "roram: Efficient range ORAM with O(log^2 n) locality." in NDSS, 2019.
[15] A. Chakraborti and R. Sion, "Concuroram: High-throughput stateless parallel multi-client ORAM," in NDSS, 2019.
[16] T.-H. H. Chan, J. Katz, K. Nayak, A. Polychroniadou, and E. Shi, "More is less: Perfectly secure oblivious algorithms in the multi-server setting," in International Conference on the Theory and Application of Cryptology and Information Security. Springer, 2018, pp. 158–188.
[17] B. Chen, H. Lin, and S. Tessaro, "Oblivious parallel RAM: Improved efficiency and generic constructions," in Theory of Cryptography Conference. Springer, 2016, pp. 205–234.
[18] B. Chor, E. Kushilevitz, O. Goldreich, and M. Sudan, "Private information retrieval," Journal of the ACM (JACM), vol. 45, no. 6, pp. 965–981, 1998.
[19] I. Damgård and M. Jurik, "A generalisation, a simplification and some applications of Paillier’s probabilistic public-key system," in International Workshop on Public Key Cryptography. Springer, 2001, pp. 119–136.
[20] I. Damgård, V. Pastro, N. Smart, and S. Zakarias, "Multiparty computation from somewhat homomorphic encryption," in Advances in Cryptology–CRYPTO 2012. Springer, 2012, pp. 643–662.
[21] J. Dautrich and C. Ravishankar, "Combining ORAM with PIR to minimize bandwidth costs," in Proceedings of the 5th ACM Conference on Data and Application Security and Privacy. ACM, 2015, pp. 289–296.
[22] S. Devadas, M. van Dijk, C. W. Fletcher, L. Ren, E. Shi, and D. Wichs, "Onion ORAM: A constant bandwidth blowup oblivious RAM," in Theory of Cryptography Conference. Springer, 2016, pp. 145–174.
[23] J. Doerner and A. Shelat, "Scaling ORAM for secure computation," in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2017, pp. 523–535.
[24] S. Faber, S. Jarecki, S. Kentros, and B. Wei, "Three-party ORAM for secure computation," in International Conference on the Theory and Application of Cryptology and Information Security. Springer, 2015, pp. 360–385.
[25] C. Fletcher, M. Naveed, L. Ren, E. Shi, and E. Stefanov, "Bucket ORAM: single online roundtrip, constant bandwidth oblivious RAM," IACR Cryptology ePrint Archive, Report 2015, 1065, Tech. Rep., 2015.
[26] S. Garg, P. Mohassel, and C. Papamanthou, "Tworam: Round-optimal oblivious RAM with applications to searchable encryption," IACR Cryptology ePrint Archive, 2015: 1010, Tech. Rep., 2015.
[27] C. Gentry et al., "Fully homomorphic encryption using ideal lattices." in STOC, vol. 9, no. 2009, 2009, pp. 169–178.
[28] C. Gentry, K. A. Goldman, S. Halevi, C. Julta, M. Raykova, and D. Wichs, "Optimizing ORAM and using it efficiently for secure computation," in International Symposium on Privacy Enhancing Technologies Symposium. Springer, 2013, pp. 1–18.
[29] I. Goldberg, "Improving the robustness of private information retrieval," in 2007 IEEE Symposium on Security and Privacy (SP’07). IEEE, 2007, pp. 131–148.
[30] O. Goldreich, "Towards a theory of software protection and simulation by oblivious RAMs," in Proceedings of the nineteenth annual ACM symposium on Theory of computing. ACM, 1987, pp. 182–194.
[31] O. Goldreich and R. Ostrovsky, "Software protection and simulation on oblivious RAMs," Journal of the ACM (JACM), vol. 43, no. 3, pp. 431–473, 1996.
[32] S. D. Gordon, J. Katz, and X. Wang, "Simple and efficient two-server ORAM," in International Conference on the Theory and Application of Cryptology and Information Security. Springer, 2018, pp. 141–157.
[33] T. Hoang, C. D. Ozkaptan, A. A. Yavuz, J. Guajardo, and T. Nguyen, "S3ORAM: A computation-efficient and constant client bandwidth blowup ORAM with Shamir secret sharing," in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2017, pp. 491–505.
[34] T. Hoang and C. Ozkaptan D., "Implementation of S3ORAM," Available at https://github.com/thanghoang/S3ORAM, 2017.
[35] M. Ito, A. Saito, and T. Nishizeki, "Secret sharing scheme realizing general access structure," Electronics and Communications in Japan (Part III: Fundamental Electronic Science), vol. 72, no. 9, pp. 56–64, 1989.
[36] M. Keller, V. Pastro, and D. Rotaru, "Overdrive: Making SPDZ great again," in Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 2018, pp. 158–189.
[37] M. Keller and P. Scholl, "Efficient, oblivious data structures for MPC," in International Conference on the Theory and Application of Cryptology and Information Security. Springer, 2014, pp. 506–525.
[38] M. Keller and A. Yanai, "Efficient maliciously secure multiparty computation for RAM," in Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 2018, pp. 91–124.
[39] E. Kushilevitz and T. Mour, "Sub-logarithmic distributed oblivious RAM with small block size," in IACR International Workshop on Public Key Cryptography. Springer, 2019, pp. 3–33.
[40] K. G. Larsen and J. B. Nielsen, "Yes, there is an oblivious RAM lower bound!" in Annual International Cryptology Conference. Springer, 2018, pp. 523–542.
[41] J. R. Lorch, B. Parno, J. Mickens, M. Raykova, and J. Schiffman, "Shroud: Ensuring private access to large-scale data in the data center," in Presented as part of the 11th USENIX Conference on File and Storage Technologies (FAST 13), 2013, pp. 199–213.
[42] S. Lu and R. Ostrovsky, "Distributed oblivious RAM for secure two-party computation," in Theory of Cryptography. Springer, 2013, pp. 377–396.
[43] M. Maas, E. Love, E. Stefanov, M. Tiwari, E. Shi, K. Asanovic, J. Kubiatowicz, and D. Song, "Phantom: Practical oblivious computation in a secure processor," in Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security. ACM, 2013, pp. 311–324.
[44] M. Maffei, G. Malavolta, M. Reinert, and D. Schröder, "Privacy and access control for outsourced personal records," in 2015 IEEE Symposium on Security and Privacy. IEEE, 2015, pp. 341–358.
[45] M. Maffei, G. Malavolta, M. Reinert, and D. Schröder, "Maliciously secure multi-client ORAM," in International Conference on Applied Cryptography and Network Security. Springer, 2017, pp. 645–664.
[46] T. Mayberry, E.-O. Blass, and A. H. Chan, "Efficient private file retrieval by combining ORAM and PIR." in NDSS. Citeseer, 2014.
[47] T. Moataz, T. Mayberry, and E.-O. Blass, "Constant communication ORAM with small blocksize," in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 862–873.
[48] P. Mohassel and Y. Zhang, "SecureML: A system for scalable privacy-preserving machine learning," in 2017 IEEE Symposium on Security and Privacy (SP). IEEE, 2017, pp. 19–38.
[49] V. Narkhede, K. Joshi, A. J. Aviv, S. G. Choi, D. S. Roche, and T. Finin, "Managing cloud storage obliviously," in 2016 IEEE 9th International Conference on Cloud Computing (CLOUD). IEEE, 2016, pp. 990–993.
[50] P. Paillier, "Public-key cryptosystems based on composite degree residuosity classes," in International Conference on the Theory and Applications of Cryptographic Techniques.