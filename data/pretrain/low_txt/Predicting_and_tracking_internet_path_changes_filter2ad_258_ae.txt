### 5.6 Evaluation of In-Path Sampling

We now use MINMISS as the path rate allocation method and compare the performance of in-path sampling strategies using Fig. 8(b) (note that "minimize misses" in Fig. 8(a) and "per-sequence" in Fig. 8(b) are the same).

The per-probe strategy improves on the per-sequence strategy by up to 54%. Per-sequence sampling often wastes probes because, once a single changed interface is detected, there is no need to sample the rest of the sequence or route; the route can be remapped immediately, and the search for the next change can begin earlier. The per-probe strategy also has a significant advantage in detecting short-lived routes, as its sampling rate is approximately 16 times higher than that of per-sequence, greatly reducing the risk of skipping over these routes.

Both per-link and per-probe strategies use a single probe per sample, but from Fig. 8(b), the per-probe strategy is clearly superior. This is because the efficiency gains of the sample-sharing strategy in per-link are outweighed by the inherent risks of missed changes (as explained at the end of Sec. 5.3). This tradeoff becomes increasingly worse as the probing budget increases, with the error saturating rather than tending to zero in the limit.

Per-safelink sampling addresses the worst risks of per-link and is the best strategy at low detection budgets, with up to 28% fewer misses than per-probe. However, at high sampling rates, a milder form of the issue affecting per-link still arises, and the error again saturates rather than tending to zero. These results highlight the importance of carefully exploiting spatial information (like shared links) in the context of tracking, as the very assumptions one relies on for efficiency are, by definition, changing (see Tracetree results below).

By default, we use per-safelink sampling in DTRACK, as we expect most deployments to operate at low sampling budgets (e.g., DIMES and CAIDA’s Ark). At very high sampling budgets, we recommend per-probe sampling.

### 5.7 Comparing DTRACK to Alternatives

Fig. 8(c) replots the per-probe and per-safelink curves from Fig. 8(b) on a logarithmic scale and compares them against FastMapping and the assisted form of Tracetree. Each variant of DTRACK outperforms FastMapping by a large margin, up to 89% at intermediate detection budgets. DTRACK also outperforms Assisted Tracetree for all detection budgets, despite the significant degree of assistance provided. We attribute this mainly to the failure of the underlying tree assumption due to load balancing, traffic engineering, and typical AS peering practices. Real (unassisted) Tracetree also suffers from false positives, which grow linearly with the probing budget. For a detection budget of 8 × 10−3 probes per second per path, Tracetree infers 17 times more false positives than there are real changes in the dataset!

As an example, DIMES, which uses Bd/|D| = 8.88 × 10−3 probes per second per path, would miss 86% fewer changes (or detect 220% more) by using DTRACK instead of periodic traceroutes.

Fig. 9 shows the average remapping cost as a function of sampling budget for DTRACK and FastMapping. Real deployments can reduce remapping costs compared to the results shown by configuring MDA to use fewer probes [31]. We omit Tracetree as it does not perform remapping.

### Summary

Our results indicate that DTRACK not only detects more changes but also has lower detection delay, which should directly benefit applications that need up-to-date information on path stability and network topology.

### 6. Related Work

#### Forwarding vs. Routing Dynamics
Internet path dynamics and routing behavior have been of interest to the research community since the mid-1990s, starting with Paxson's study of end-to-end routing behavior [24] and Labovitz et al.'s findings on BGP instabilities [16].

In this paper, we follow Paxson's approach of using traceroute-style probing to infer end-to-end routes and track virtual path changes. Traceroute is appealing for tracking virtual paths from monitors located at the edge of the Internet for two main reasons: first, it directly measures the forwarding path, whereas AS paths inferred from BGP messages may not match the AS-level forwarding path [21]. Second, traceroute runs from any host connected to the Internet without requiring privileged access to routers, whereas collecting BGP messages requires direct access to routers. Although RouteViews and RIPE collect BGP data from some routers for the community, public BGP data lacks visibility to track all path changes from a given vantage point [7, 29]. When BGP messages from a router close to the traceroute monitor are available, they could help in tracking virtual path changes. For instance, Feamster et al. [12] showed that BGP messages could predict about 20% of the path failures in their study. We will study how to incorporate BGP messages into our prediction and tracking methods in future work.

#### Characterization and Prediction of Path Behavior
Some of the virtual path features we study are inspired by previous characterizations of Internet paths [2, 12, 24], as discussed in Sec. 2.4. None of these studies, however, use these features to predict future path changes. To our knowledge, there is no prior work on predicting path changes, although Zhang et al. [33] studied the constancy of path performance properties (loss, delay, and throughput), which is closely related to predictability. Later studies have used past path performance (e.g., end-to-end losses [28] or round-trip delays [6]) to predict future performance. iNano [20] also "predicts" several path properties, including PoP-level routes, but their goal is different from ours. Their aim is to predict the PoP-level route of an arbitrary end-to-end path, even though the system only directly measures the route of a small subset of paths. iNano refreshes measurements once per day and thus cannot track path changes.

#### Topology Mapping Techniques
Topology mapping systems [14, 17, 19, 25] often track routes to a large number of destinations. Many topology discovery techniques focus on getting more complete or accurate topology maps by resolving different interfaces to a single router [26, 27], selecting traceroute sources and destinations to better cover the topology [27], or using the record-route IP option to complement traceroutes [26]. DTRACK complements these techniques. We argue that to get more accurate maps, we should focus the probing capacity on the paths that are changing and explore spatio-temporal alternatives to simple traditional traceroute sampling. One approach to tracking the evolution of IP topologies is to exploit knowledge of shared links to reduce probing overhead and consequently probe the topology faster, as Tracetree [17] and Doubletree [11] do. As we show in Sec. 5, Tracetree leads to a very large number of false detections. Thus, we choose to guarantee the accuracy and completeness of measured routes by using Paris traceroute’s MDA [31]. Most comparable to DTRACK is FastMapping [8]. Sec. 5 shows that DTRACK, because of its adaptive probing allocation (instead of a constant rate for all paths) and single-probe sampling strategy (compared to an entire branch of the route at a time), misses up to 89% fewer changes than FastMapping.

### 7. Conclusion

This paper presented DTRACK, a path tracking strategy that proceeds in two steps: path change detection and path remapping. We designed NN4, a simple predictor of path changes that uses as input: route prevalence, route age, number of past route changes, and the number of times a route appeared in the past. Although we found that the limits to prediction in general are strong and that NN4 is not highly accurate, it is still useful for allocating probes to paths. DTRACK optimizes path sampling rates based on NN4 predictions. Within each path, DTRACK employs a kind of temporal striping of Paris traceroute. When a change is detected, path remapping uses Paris traceroute’s MDA to ensure complete and accurate route measurements. DTRACK detects up to twice as many path changes when compared to the state-of-the-art tracking technique, with lower detection delays, and while providing complete load balancer information. DTRACK finds considerably more true changes than Tracetree and none of the very large number of false positives. More generally, we point out that any approach that exploits shared links runs the risk of errors being greatly magnified in the tracking application and should be used with great care.

To accelerate the adoption of DTRACK, our immediate next step is to implement DTRACK into an easy-to-use system and deploy it on PlanetLab as a path tracking service. For future work, we will investigate the benefits of incorporating additional information, such as BGP messages, to increase prediction accuracy, as well as the benefits of coordinating the probing effort across monitors to further optimize probing.

### Acknowledgements

We thank Ethan Katz-Bassett, Fabian Schneider, and our shepherd Sharon Goldberg for their helpful comments. This work was supported by the European Community’s Seventh Framework Programme (FP7/2007-2013) no. 223850 (Nano Data Centers) and the ANR project C’MON.

### References

[1] D. Andersen, H. Balakrishnan, F. Kaashoek, and R. Morris. Resilient Overlay Networks. SIGOPS Oper. Syst. Rev., 35(5):131–145, 2001.
[8] I. Cunha, R. Teixeira, and C. Diot. Measuring and Characterizing End-to-End Route Dynamics in the Presence of Load Balancing. In Proc. PAM, 2011.
[9] I. Cunha, R. Teixeira, N. Feamster, and C. Diot. Measurement Methods for Fast and Accurate Blackhole Identification with Binary Tomography. In Proc. IMC, 2009.
[10] J. Dilley, B. Maggs, J. Parikh, H. Prokop, R. Sitaraman, and B. Weihl. Globally Distributed Content Delivery. IEEE Internet Computing, 6(5):50–58, 2002.
[11] B. Donnet, P. Raoult, T. Friedman, and M. Crovella. Efficient Algorithms for Large-scale Topology Discovery. In Proc. ACM SIGMETRICS, 2005.
[12] N. Feamster, D. Andersen, H. Balakrishnan, and F. Kaashoek. Measuring the Effects of Internet Path Faults on Reactive Routing. In Proc. ACM SIGMETRICS, 2003.
[13] J. Friedman and B. Popescu. Predictive Learning via Rule Ensembles. Annals of Applied Statistics, 2(3):916–954, 2008.
[14] k. claffy, Y. Hyun, K. Keys, M. Fomenkov, and D. Krioukov. Internet Mapping: from Art to Science. In Proc. IEEE CATCH, 2009.
[15] E. Katz-Bassett, H. Madhyastha, J. P. John, A. Krishnamurthy, D. Wetherall, and T. Anderson. Studying Black Holes in the Internet with Hubble. In Proc. USENIX NSDI, 2008.
[16] C. Labovitz, R. Malan, and F. Jahanian. Internet Routing Instability. In Proc. ACM SIGCOMM, 1997.
[17] M. Latapy, C. Magnien, and F. Ouédraogo. A Radar for the Internet. In Proc. Intl. Workshop on Analysis of Dynamic Networks, 2008.
[18] D. Leonard and D. Loguinov. Demystifying Service Discovery: Implementing an Internet-Wide Scanner. In Proc. IMC, 2010.
[19] H. Madhyastha, T. Isdal, M. Piatek, C. Dixon, T. Anderson, A. Krishnamurthy, and A. Venkataramani. iPlane: an Information Plane for Distributed Services. In Proc. USENIX OSDI, 2006.
[20] H. Madhyastha, E. Katz-Bassett, T. Anderson, A. Krishnamurthy, and A. Venkataramani. iPlane Nano: Path Prediction for Peer-to-peer Applications. In Proc. USENIX NSDI, 2009.
[21] Z. M. Mao, J. Rexford, J. Wang, and R. H. Katz. Towards an Accurate AS-level Traceroute Tool. In Proc. ACM SIGCOMM, 2003.
[22] A. Markopoulou, G. Iannaccone, S. Bhattacharyya, C. N. Chuah, Y. Ganjali, and C. Diot. Characterization of Failures in an Operational IP Backbone Network. IEEE/ACM Trans. Netw., 16(4):749–762, 2008.
[23] R. Oliveira, D. Pei, W. Willinger, B. Zhang, and L. Zhang. Quantifying the Completeness of the Observed Internet AS-level Structure. IEEE/ACM Trans. Netw., 18(1):109–122, 2010.
[24] V. Paxson. End-to-end Routing Behavior in the Internet. IEEE/ACM Trans. Netw., 5(5):601–615, 1997.
[25] Y. Shavitt and U. Weinsberg. Quantifying the Importance of Vantage Points Distribution in Internet Topology Measurements. In Proc. IEEE INFOCOM, 2009.
[26] R. Sherwood, A. Bender, and N. Spring. DisCarte: a Disjunctive Internet Cartographer. In Proc. ACM SIGCOMM, 2008.
[27] N. Spring, R. Mahajan, and D. Wetherall. Measuring ISP Topologies with Rocketfuel. In Proc. ACM SIGCOMM, 2002.
[28] S. Tao, K. Xu, Y. Xu, T. Fei, L. Gao, R. Guerin, J. Kurose, D. Towsley, and Z.-L. Zhang. Exploring the Performance Benefits of End-to-End Path Switching. In Proc. ICNP, 2004.
[2] B. Augustin, T. Friedman, and R. Teixeira. Measuring Load-balanced Paths in the Internet. In Proc. IMC, 2007.
[29] R. Teixeira and J. Rexford. A Measurement Framework for Pin-pointing Routing Changes. In Proc. SIGCOMM Workshop on Network Troubleshooting, 2004.
[3] F. Baccelli, S. Machiraju, D. Veitch, and J. Bolot. On Optimal Probing for Delay and Loss Measurement. In Proc. IMC, 2007.
[4] F. Baccelli, S. Machiraju, D. Veitch, and J. Bolot. The Role of PASTA in Network Measurement. IEEE/ACM Trans. Netw., 17(4):1340–1353, 2009.
[5] K. Beyer, J. Goldstein, R. Ramakrishnan, and U. Shaft. When Is "Nearest Neighbor" Meaningful? In Proc. Intl. Conf. on Database Theory, 1999.
[6] A. Bremler-Barr, E. Cohen, H. Kaplan, and Y. Mansour. Predicting and Bypassing End-to-end Internet Service Degradations. IEEE J. Selected Areas in Communications, 21(6):961–978, 2003.
[7] R. Bush, O. Maennel, M. Roughan, and S. Uhlig. Internet Optometry: Assessing the Broken Glasses in Internet Reachability. In Proc. IMC, 2009.
[30] D. Turner, K. Levchenko, A. Snoeren, and S. Savage. California Fault Lines: Understanding the Causes and Impact of Network Failures. In Proc. ACM SIGCOMM, 2010.
[31] D. Veitch, B. Augustin, T. Friedman, and R. Teixeira. Failure Control in Multipath Route Tracing. In Proc. IEEE INFOCOM, 2009.
[32] M. Zhang, C. Zhang, V. Pai, L. Peterson, and R. Wang. PlanetSeer: Internet Path Failure Monitoring and Characterization in Wide-area Services. In Proc. USENIX OSDI, San Francisco, CA, 2004.
[33] Y. Zhang, N. Duffield, V. Paxson, and S. Shenker. On the Constancy of Internet Path Properties. In Proc. IMW, 2001.
[34] Z. Zhang, Y. Zhang, Y. C. Hu, Z. M. Mao, and R. Bush. iSPY: Detecting IP Prefix Hijacking on My Own. In Proc. ACM SIGCOMM, 2008.