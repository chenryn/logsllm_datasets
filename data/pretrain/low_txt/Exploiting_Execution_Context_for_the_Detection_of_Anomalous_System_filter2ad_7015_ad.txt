### Proprietary setuid Application

An experiment was conducted on a setuid root application installed on 10 audit hosts used in this study. The application, a proprietary setuid root program, was designed to allow students to submit homework assignments to a class account for grading. Although the program is not a daemon or a periodic job, an analysis of its binary revealed an exploitable stack overflow vulnerability within a request logging function. This vulnerability was utilized to test the detection capabilities of our system.

The attack on this program required bypassing the exec-shield, stack randomization, and heap randomization protection mechanisms deployed on the monitored hosts. The exploit involved overwriting two stack variables: the current function’s return address and the frame pointer. This caused the program to jump to an indirect jump instruction through the modified frame pointer, transferring control to an exploit payload previously injected into a buffer on the heap. This approach was necessary to overcome the exec-shield and randomization protections.

### Rootshell Exploit

The first exploit payload executed against the vulnerable program was a simple shell execution with root privileges. Since the `execve` system call was invoked from a context not previously observed during the training period, the context-sensitive detection system identified the system call invocation as anomalous and reported an alert. In contrast, the detection system configured in context-insensitive mode did not detect the `execve` call as anomalous. This is because both a file archiving utility and a compression utility are spawned during the normal execution of the assignment submission program, making the context-insensitive argument models insufficient to detect an anomaly based solely on the `execve` target. A sequence-based system call Intrusion Detection System (IDS) would have detected a deviation from the normal sequence of system calls and raised an alert.

### Data Modification Exploit

The second exploit payload executed against the assignment submission program was a variation of a data modification attack. The objective was to manipulate the logging of an assignment submission such that the submitter and timestamp could be subverted with attacker-supplied values. To achieve this, the exploit payload first called `mprotect` from a legitimate, in-sequence context to mark the code segments of the process as read/write. By modifying the stack to hold a legitimate sequence of return addresses before calling `mprotect`, the program continued executing native application code upon returning. To regain control for the second part of the attack, a system library function pointer was overwritten in the procedure linkage table (PLT). This type of attack is detailed in [10]. Changing the memory protection bits on the code segment allowed the statically defined format string used in the `fprintf` invocation to be overwritten, enabling the attacker's format string to be used instead when the transaction was logged by the program.

A sequence-based system call IDS would not have detected an anomaly, as no invalid or out-of-sequence system calls were invoked. Additionally, the context-insensitive argument models were not tight enough to detect an aberration in the parameters to the `mprotect` system call. However, the context-sensitive detection system was able to detect the anomalous argument due to more precise argument modeling that included system call context.

### Detecting Attacks Against OpenSSL

The final demonstration of the attack detection capability involved testing an off-the-shelf exploit for the Apache web server running with a vulnerable version of OpenSSL, a popular implementation of the Secure Sockets Layer (SSL) and Transport Layer Security (TLS) protocols. This version of OpenSSL is vulnerable to a remote client master key overflow, allowing an attacker to potentially execute arbitrary code in any network service that utilizes the library.

Context-sensitive and context-insensitive model instances were trained against traces of normal HTTP client behavior. The models were then applied to a trace of an attack against OpenSSL. As before, the stack-specific models correctly identified the attack, in this case from an anomalous `execve` of `/bin/sh`. The context-insensitive models, however, did not consider this system call sufficiently anomalous to raise an alarm. We speculate that since the training data included benign invocations of CGI scripts, which necessarily involve issuing an `execve` for external script execution, the context-insensitive models were unable to differentiate between benign and malicious invocations of the system call. This supports our claim that the detection capability of argument models is measurably enhanced by instantiating models specific to each call stack context.

### Performance Overhead of Stack Unwinding

To evaluate the performance overhead of unwinding the call stacks of user processes, we constructed a benchmark application. The benchmark invokes a system call after creating a parameterized number of frames on the call stack. In each run, 100 groups of 100 such invocations are made, and the average time to complete 100 invocations is returned. Figure 2 compares the benchmark running times of an identical system in three configurations: no auditing, simple system call auditing (no stack unwinding), and system call auditing with stack unwinding. The benchmark execution time is given for a variety of stack depths.

Figure 2 shows that there is significant overhead associated with unwinding user call stacks while auditing. However, the overheads are roughly similar to simple auditing for stack depths less than 40 (i.e., within a factor of two). We also note that the benchmark is designed to expose differences in audit times and differs from normal applications in that it does essentially no other processing aside from rapidly invoking system calls.

### Related Work

Research on model-based detection using system call invocation models originated with [4], which analyzes fixed-length sequences of system calls without considering arguments or return values. The model of legitimate program behavior is built by observing normal system call sequences in attack-free application runs. Alternative data models for characterizing system call sequences were proposed in [25] and [26].

These detection techniques could be easily evaded by mimicry attacks, where an exploit is crafted to produce a legitimate sequence of system calls while performing malicious actions [24]. The introduction of gray-box and white-box approaches, which use additional information such as the stack context and information derived through static analysis techniques, has significantly raised the bar for such attacks [18, 3, 5]. Nevertheless, these approaches do not provide effective modeling of system call arguments, giving the attacker considerable freedom in crafting an exploit that evades detection. Therefore, black-box, learning-based models that take into account the arguments of system calls were introduced to further limit the ability of an attacker to perform mimicry attacks [12, 15].

The system call automaton proposed in [18] was further extended to include the analysis of system call arguments in [19]. The authors motivate this extension by stating, "clearly, it is not enough to know that something is being written by a program – we need to identify the object being modified by the write operation." Our approach performs more sophisticated argument modeling and includes the complete function call history instead of only the program counter of the system call. Therefore, we are able to detect data modification attacks as well as deviations from established site-specific behaviors that cannot be statically derived.

A further class of proposals extracts models directly from the program’s source code or binary representations using static analysis methods [23, 7, 8, 3, 27]. These systems use static analysis to derive the system call automaton, which is then extended with call stack information to remove impossible paths and increase the precision of the detection process.

### Conclusions and Future Work

In this paper, we presented a novel approach to the detection of anomalous system calls. Unlike previous approaches, our solution combines dynamic stack context analysis with the characterization of system call arguments. The resulting context-sensitive system call model is effective against data modification attacks, which do not modify the sequence of system calls executed by vulnerable applications. It also improves upon the false positive rates of models that only operate on argument values and ignore context information.

We have also introduced a metric that quantifies the degree to which system call arguments are unique to particular execution contexts. Applying this metric to a number of programs deployed in a production setting showed that the set of argument values is optimally or nearly optimally partitioned by the argument sets associated with individual stack configurations. Future work will explore the utility of applying this metric to other intrusion detection domains.

The use of system call argument modeling is orthogonal with respect to analysis techniques that characterize system call sequences. In future work, we will explore how the two approaches can be composed to achieve even more precise detection and better resilience to mimicry attacks.

### References

1. Ammons, G., Ball, T., Larus, J.R.: Exploiting hardware performance counters with flow and context sensitive profiling. In: Proceedings of the Conference on Programming Language Design and Implementation (PLDI’97) (1997)
2. Feng, H., Griffin, J., Huang, Y., Jha, S., Lee, W., Miller, B.: Formalizing sensitivity in static analysis for intrusion detection. In: Proceedings of the IEEE Symposium on Security and Privacy, May 2004, IEEE Computer Society Press, Los Alamitos (2004)
3. Feng, H., Kolesnikov, O., Fogla, P., Lee, W., Gong, W.: Anomaly detection using call stack information. In: Proceedings of the IEEE Symposium on Security and Privacy, May 2003, IEEE Computer Society Press, Los Alamitos (2003)
4. Forrest, S.: A Sense of Self for UNIX Processes. In: Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, May 1996, pp. 120–128. IEEE Computer Society Press, Los Alamitos (1996)
5. Gao, D., Reiter, M., Song, D.: Gray-Box Extraction of Execution Graphs for Anomaly Detection. In: Proceedings of ACM CCS, Washington, DC, USA, October 2004, pp. 318–329. ACM Press, New York (2004)
6. Gao, D., Reiter, M., Song, D.: On Gray-Box Program Tracking for Anomaly Detection. In: Proceedings of the 13th USENIX Security Symposium, San Diego, CA, USA (August 2004)
7. Griffin, J., Jha, S., Miller, B.: Detecting Manipulated Remote Call Streams. In: Proceedings of the 11th USENIX Security Symposium, pp. 61–79 (2002)
8. Griffin, J., Jha, S., Miller, B.: Efficient context-sensitive intrusion detection. In: Proceedings of the 11th Network and Distributed System Security Symposium, San Diego, California (February 2004)
9. Hind, M., Burke, M., Carini, P., Choi, J.-D.: Interprocedural pointer alias analysis. ACM Transactions on Programming Languages 21(4) (July 1999)
10. Kruegel, C., Kirda, E., Mutz, D., Robertson, W., Vigna, G.: Automating mimicry attacks using static binary analysis. In: Proceedings of the 14th USENIX Security Symposium (July 2005)
11. Kruegel, C., Mutz, D., Robertson, W., Valeur, F.: Bayesian Event Classification for Intrusion Detection. In: Omondi, A.R., Sedukhin, S. (eds.) ACSAC 2003. LNCS, vol. 2823, Springer, Heidelberg (2003)
12. Kruegel, C., Mutz, D., Valeur, F., Vigna, G.: On the Detection of Anomalous System Call Arguments. In: Snekkenes, E., Gollmann, D. (eds.) ESORICS 2003. LNCS, vol. 2808, pp. 326–343. Springer, Heidelberg (2003)
13. Lee, S., Low, W., Wong, P.: Learning Fingerprints for a Database Intrusion Detection System. In: Gollmann, D., Karjoth, G., Waidner, M. (eds.) ESORICS 2002. LNCS, vol. 2502, Springer, Heidelberg (2002)
14. Mutz, D.: Context-sensitive Multi-model Anomaly Detection. Ph.d. thesis, UCSB (June 2006)
15. Mutz, D., Valeur, F., Kruegel, C., Vigna, G.: Anomalous System Call Detection. ACM Transactions on Information and System Security 9(1), 61–93 (2006)
16. Nystrom, E., Kim, H., Hwu, W.: Importance of heap specialization in pointer analysis. In: Proceedings of Program Analysis for Software Tools and Engineering (2004)
17. Robertson, W., Vigna, G., Kruegel, C., Kemmerer, R.: Using Generalization and Characterization Techniques in the Anomaly-based Detection of Web Attacks. In: Proceeding of NDSS, San Diego, CA (February 2006)
18. Sekar, R., Bendre, M., Dhurjati, D., Bollineni, P.: A fast automaton-based method for detecting anomalous program behaviors. In: Proceedings of the IEEE Symposium on Security and Privacy, May 2001, IEEE Computer Society Press, Los Alamitos (2001)
19. Sekar, R., Venkatakrishnan, V., Basu, S., Du Varney, B.S.D.: Model-carrying code: A practical approach for safe execution of untrusted applications. In: Proceedings of the 19th ACM Symposium on Operating Systems Principles, ACM Press, New York (2003)
20. SNARE - System iNtrusion Analysis and Reporting Environment, http://www.intersectalliance.com/projects/Snare
21. Stolcke, A., Omohundro, S.: Hidden Markov Model Induction by Bayesian Model Merging. Advances in Neural Information Processing Systems (1993)
22. Stolcke, A., Omohundro, S.: Inducing probabilistic grammars by bayesian model merging. In: Proceedings of the International Conference on Grammatical Inference (1994)
23. Wagner, D., Dean, D.: Intrusion Detection via Static Analysis. In: Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, May 2001, IEEE Press, Los Alamitos (2001)
24. Wagner, D., Soto, P.: Mimicry Attacks on Host-Based Intrusion Detection Systems. In: Proceedings of ACM CCS, Washington DC, USA, November 2002, ACM Press, New York (2002)
25. Warrender, C., Forrest, S., Pearlmutter, B.: Detecting intrusions using system calls: Alternative data models. In: Proceedings of the IEEE Symposium on Security and Privacy, pp. 133–145. IEEE Computer Society Press, Los Alamitos (1999)
26. Wespi, A., Dacier, M., Debar, H.: Intrusion Detection Using Variable-Length Audit Trail Patterns. In: Debar, H., Mé, L., Wu, S.F. (eds.) RAID 2000. LNCS, vol. 1907, Springer, Heidelberg (2000)
27. Xu, H., Du, W., Chapin, S.: Context Sensitive Anomaly Monitoring of Process Control Flow to Detect Mimicry Attacks and Impossible Paths. In: Jonsson, E., Valdes, A., Almgren, M. (eds.) RAID 2004. LNCS, vol. 3224, Springer, Heidelberg (2004)