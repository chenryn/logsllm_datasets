### VII. 相关工作

已有多种延迟更新复制协议，其中服务器维护数据库的完整副本（例如 [1], [2], [3], [4], [12]）。在 [5] 中指出，这些协议的可扩展性受到可以排序的事务数量或单个服务器能够认证并应用到本地数据库的事务数量的限制。

我们的重排序算法基于 [1] 中描述的算法，最初用于减少中止率。本文中，我们将该思想扩展以避免全局通信对本地事务造成的延迟。

近年来提出了许多存储和事务系统。其中一些系统（例如 Cassandra[5]、Dynamo[13] 和 Voldemort[6]）保证最终一致性，在这种情况下操作永远不会被中止，但不保证隔离性。最终一致性允许在网络分区的情况下副本出现分歧，其优点是系统始终可用。然而，客户端会暴露于冲突，并且必须在应用程序级别处理协调问题。

Spinnaker [14] 与我们提出的方法类似，因为它也使用多个 Paxos 实例来实现可扩展性。然而，Spinnaker 不支持跨多个 Paxos 实例的事务。

与先前的工作不同，Sinfonia [15] 通过非结构化数据上的微事务提供了更强的保证。类似于 SDUR，微事务在提交时进行认证。与 SDUR 不同的是，Sinfonia 中的读写事务都必须经过认证，因此可能会中止。而在 SDUR 中，只读事务不会中止。

COPS [16] 是一个存储系统，确保一种强大的因果一致性版本，除了对因果相关的写操作进行排序外，还对同一数据项上的写操作进行排序。COPS 提供只读事务，但不提供多键更新事务。

Walter [17] 为跨多个数据中心复制的数据库提供了一种称为并行快照隔离 (PSI) 的隔离属性。PSI 保证了快照隔离和站点内的更新总顺序，但在数据中心之间仅保证因果顺序。

Vivace [18] 是一个针对广域网优化的存储系统。Vivace 的复制协议优先处理站点之间交换的小量关键数据，以减少由于拥塞引起的延迟。Vivace 不提供跨多个键的事务。

Google 的 Bigtable [19] 和 Yahoo 的 Pnuts [20] 是分布式数据库，提供简单的关系模型（例如，无连接）。Bigtable 支持非常大的表，并能应对从吞吐量导向的批处理到延迟敏感的应用程序的各种工作负载。Pnuts 提供比 Bigtable 更丰富的关系模型：它支持高级构造，如带谓词的范围查询、二级索引、物化视图以及创建多个表的能力。

上述系统均未提供 WAN 上多分区事务的强一致执行。在那些提供接近 SDUR 保证的系统中，我们考虑 Spanner [21]、MDCC 和 P-Store [22]。

P-Store [22] 可能是我们工作中最接近的一个，它实现了针对广域网优化的延迟更新复制。与 SDUR 不同，P-Store 使用真正的原子多播来终止事务，这比原子广播更昂贵。P-Store 还避免了车队效应，因为它可以并行终止事务。SDUR 也可以并行终止事务，并且我们使用重排序进一步减少延迟。

Spanner [21] 是一个针对 WAN 的分布式数据库。像 SDUR 一样，数据库被划分并在多个 Paxos 实例上复制。Spanner 使用两阶段提交和所谓的 TrueTime API 来实现一致的多分区事务。TrueTime 使用硬件时钟来推导时钟不确定性边界，并用于分配全局有效的时间戳和跨分区的一致读取。

MDCC [10] 是一个复制的事务数据存储，也使用多个 Paxos 实例。MDCC 优化了可交换事务，并使用 Generalized Paxos，允许放松可交换事务的传递顺序。

### VIII. 结论

本文讨论了地理分布环境中的可扩展延迟更新复制。SDUR 通过数据分区扩展了延迟更新复制，这是一种在多个数据库复制系统中广泛使用的方法。SDUR 区分快速的本地事务和较慢的全局事务。虽然本地事务在某些工作负载下随着分区数量线性扩展，但在地理分布环境中，它们可能因较慢的全局事务而显著延迟——在某些设置中，全局事务可以使本地事务速度降低十倍。我们提出了两种技术来解决这一限制：事务延迟简单但改进有限；重排序是一种更复杂的方法，可以显著减少本地事务的延迟，尤其是在全局事务对本地事务影响最大的部署中。我们的主张通过一系列微基准测试和一个类似 Twitter 的社交网络应用程序得到了验证。

### 参考文献

[1] F. Pedone, R. Guerraoui, and A. Schiper, “The Database State Machine approach,” Distrib. Parallel Databases, vol. 14, pp. 71–98, July 2003.

[2] B. Kemme and G. Alonso, “Don’t be lazy, be consistent: Postgres-r, a new way to implement database replication,” in VLDB, 2000.

[3] Y. Lin, B. Kemme, M. Patino-Martinez, and R. Jimenez-Peris, “Middleware based data replication providing snapshot isolation,” in SIGMOD, 2005.

[4] M. Patino-Martinez, R. Jimenez-Peris, B. Kemme, and G. Alonso, “MIDDLE-R: Consistent database replication at the middleware level,” ACM Transactions on Computer Systems, vol. 23, no. 4, pp. 375–423, 2005.

[5] D. Sciascia, F. Pedone, and F. Junqueira, “Scalable deferred update replication,” in DSN, 2012.

[6] H. T. Kung and J. T. Robinson, “On optimistic methods for concurrency control,” ACM Transactions on Database Systems, vol. 6, no. 2, pp. 213–226, 1981.

[7] X. Défago, A. Schiper, and P. Urbán, “Total order broadcast and multicast algorithms: Taxonomy and survey,” ACM Comput. Surv., vol. 36, no. 4, pp. 372–421, Dec. 2004.

[8] L. Lamport, “The part-time parliament,” ACM Transactions on Computer Systems, vol. 16, no. 2, pp. 133–169, 1998.

[9] P. Bernstein, V. Hadzilacos, and N. Goodman, Concurrency Control and Recovery in Database Systems. Addison-Wesley, 1987.

[10] T. Kraska, G. Pang, M. J. Franklin, and S. Madden, “MDCC: Multi-Data Center Consistency,” CoRR, 2012.

[11] Y. Sovran, R. Power, M. K. Aguilera, and J. Li, “Transactional storage for geo-replicated systems,” in SOSP, 2011.

[12] D. Agrawal, G. Alonso, A. E. Abbadi, and I. Stanoi, “Exploiting atomic broadcast in replicated databases,” in EuroPar, 1997.

[13] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lakshman, A. Pilchin, S. Sivasubramanian, P. Vosshall, and W. Vogels, “Dynamo: Amazon’s highly available key-value store,” SIGOPS, 2007.

[14] J. Rao, E. Shekita, and S. Tata, “Using Paxos to build a scalable, consistent, and highly available datastore,” Proceedings of the VLDB Endowment, vol. 4, no. 4, pp. 243–254, 2011.

[15] M. K. Aguilera, A. Merchant, M. Shah, A. Veitch, and C. Karamanolis, “Sinfonia: a new paradigm for building scalable distributed systems,” in SOSP, 2007.

[16] W. Lloyd, M. J. Freedman, M. Kaminsky, and D. G. Andersen, “Don’t settle for eventual: scalable causal consistency for wide-area storage with COPS,” in SOSP, 2011.

[17] Y. Sovran, R. Power, M. K. Aguilera, and J. Li, “Transactional storage for geo-replicated systems,” in SOSP, 2011.

[18] B. Cho and M. K. Aguilera, “Surviving congestion in geo-distributed storage systems,” in USENIX ATC, 2012.

[19] F. Chang, J. Dean, S. Ghemawat, W. C. Hsieh, D. A. Wallach, M. Burrows, T. Chandra, A. Fikes, and R. E. Gruber, “Bigtable: A distributed storage system for structured data,” ACM Transactions on Computer Systems, 2008.

[20] B. F. Cooper, R. Ramakrishnan, U. Srivastava, A. Silberstein, P. Bohannon, H.-A. Jacobsen, N. Puz, D. Weaver, and R. Yerneni, “Pnuts: Yahoo!’s hosted data serving platform,” Proceedings of the VLDB Endowment, 2008.

[21] J. Corbett, J. Dean, M. Epstein, A. Fikes, C. Frost, J. Furman, S. Ghemawat, A. Gubarev, C. Heiser, P. Hochschild et al., “Spanner: Google’s globally-distributed database,” OSDI, 2012.

[22] N. Schiper, P. Sutra, and F. Pedone, “P-store: Genuine partial replication in wide area networks,” in SRDS, 2010.