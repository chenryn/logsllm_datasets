### Detection and Defense Agenda

#### Headless/Automated Browser Detection
- **Detection Methods:**
  - **UserAgent:** Includes "Headless"
  - **AppVersion:** Includes "Headless"
  - **Webdriver:** `true`
  - **Chrome:** `window.chrome` properties
  - **Plugins:** Absence of plugins
  - **MimeType:** Absence of MIME types
  - **Language:** No language set
  - **Devtools:** DevTools protocol
  - **Permissions:** Contradictory values
  - **Time Elapse:** Alert closed quickly
  - **Broken Image:** Image width and height are 0
  - **Mouse Move:** `movementX` and `movementY` are 0
  - **WebGL:** WebGL Vendor and Renderer
  - **OuterDim:** `outerWidth` and `outerHeight` are 0
  - **RTT:** `navigator.connection.rtt` is 0

- **Shortcomings:**
  - **UserAgent, AppVersion, Webdriver, Plugins, MimeType, Language, Devtools, Permissions, Broken Image, Mouse Move, WebGL, OuterDim, RTT:** Easily bypassed or not consistently reliable.

- **New Stable Method:**
  - **Key:** Detect hidden opened DevTools instance in the browser.
  - **Testing Environment:**
    - CPU: AMD 5900x, 4.3GHz
    - x86 release build
    - Copy used 33 milliseconds

- **Analysis:**
  - **Differences Between Headless Chrome and Normal Chrome:**
    - Identify key characteristics for detection.
  - **In-Depth Implementation:**
    - Find stable features to detect headless browsers.

#### Detect Invisible Mobile Native/Webview Ad Clicks
- **Impact:**
  - Mobile phone overheating, battery drain, increased traffic fees, and becoming a control terminal for underground industries.
  - Poor advertising performance and budget wastage.

- **Malware Characteristics:**
  - Skilled in anti-analysis, anti-debugging, and anti-VM techniques, making it difficult to analyze.

- **Technical Points:**
  - **WebView Renderer:**
    - JS Bridge Communication
    - Simulate Click
    - Single HTTP GET/POST, no data reporting
    - Valid only if the page is displayed, browsed, and clicked by real users
    - Rendering via WebView
    - JS: Use `WebView.evaluateJavascript()` to control pages
    - Inject new `TouchEvent()`, `Click(x, y)`, `Click(random)`
    - Java: `MotionEvent ACTION_DOWN x, y`
    - SDK: Add `JavascriptInterface("xxBridge")` in WebView, load target URL
    - JS: Use `xxBridge.send(tasklist)` to communicate with Java code

- **Hooking Key Points:**
  - Proxy, developer, ADB, OkHttp, WebView, SSL unpinning
  - Force WebView debuggable to be enabled, use CDP protocol for remote debugging
  - Tools: `chrome:inspect`, `chrome-remote-interface`
  - Modify AOSP WebView method
  - Unpack using FART technology

- **Root and Hook Frameworks:**
  - **Root:**
    - Magisk: Unlock bootloader to root
    - Shamiko whitelist: Remounting method, undetectable in most scenarios
  - **Hook Framework:**
    - LSPosed: Stable, no Xposed features, can hide icons and package names
    - Non-rooted signature phone: Use hook to bypass environment checks

#### Detect Android Simulator and Mobile Keypress Genius
- **Traditional Detection Methods:**
  - Check for resource file existence
  - DOM sharing, special variables, special cookies
  - Page JS sends messages to the plugin to judge returned information
  - CSP: `Content-Security-Policy-Report-Only: policy` to report JS URLs and extension names

#### Detect Malware PC Browser Extension Hijack
- **Traditional Detection Methods:**
  - Check for resource file existence
  - DOM sharing, special variables, special cookies
  - Page JS sends messages to the plugin to judge returned information
  - CSP: `Content-Security-Policy-Report-Only: policy` to report JS URLs and extension names

### Agenda
- **Background:**
  - Introduction to advertising-related terms, ad types, and industry scale.
- **Advertising Fraud and Anti-Fraud:**
  - Where ad fraud occurs in the industry.
- **In-Depth Analysis of Typical Cases:**
  - Including mobile SDK malware, browser trojans, and multiple hacking tools/libraries.
- **Crowd and Key Technology Analysis:**
  - Important problems to solve.
- **Detection and Defense:**
  - Innovative detection methods for four types of scenes.
- **Summary of Project Heracles Results:**
  - Hundreds of underground industry practitioners.
  - Fraud or illegal control of computer information systems.

### Summary and Recommendations
- **Advice for Ad Network Platforms:**
  - Establish an anti-underground industry alliance.
  - Share intelligence information to combat multi-platform cheating.
- **Advice for Antivirus Software Manufacturers:**
  - Collaborate with internet companies to discover and block ad fraud.
- **Advice for App Developers:**
  - Carefully review third-party SDKs.
  - Choose reputable advertising platforms to avoid legal issues.
- **Advice for Browser Developers:**
  - Strengthen security checks for browser extensions.
  - Prevent traffic hijacking and remove malicious CRX extensions.

#BHUSA @BlackHatEvents
Information Classification: General