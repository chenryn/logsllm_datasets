# Performance Analysis of FIREMAN

### Figures
- **Figure 7**: Performance on checking individual firewalls.
  - **ACL Rule Length (in bytes)**: 0.0, 100, 200, 300, 400, 500, 600, 700, 800
- **Figure 8**: Performance on checking distributed firewalls.
  - **Number of Firewalls (k)**: 4, 6, 8, 10, 12, 14, 16, 18, 20

### Scalability Techniques in FIREMAN
To enhance scalability, FIREMAN employs the following techniques:

1. **Node and Branch Reduction**:
   - FIREMAN avoids unnecessary nodes and branching by combining routers without ACLs into a single abstract virtual node. For example, it treats the DMZ as a single node.

2. **Path Merging**:
   - FIREMAN merges paths where possible using equations from Table 5 in Section 4. For instance, instead of separately traversing `outside → W0 → Z0 → inside` and `outside → X0 → X1 → Z0 → inside`, FIREMAN merges these paths at Z0.

3. **Intermediate Result Caching**:
   - FIREMAN caches intermediate results for reuse. In Figure 4, it checks ACLs W0, X0, and X1 only once because the left and right branches are symmetric. If an ACL appears multiple times in an ACL tree, FIREMAN rechecks it only if the input sets differ on different paths.

### Performance Evaluation
In Figure 8, we randomly generated a network with \( m \) firewalls, each connecting to \( k \) other firewalls. The performance was as follows:
- When \( m \) or \( k \) is small, distributed checking completes within seconds.
- When \( m > 15 \) and \( k > 5 \), distributed checking takes several minutes.
- In the worst case with \( m = 20 \) and \( k = 5 \), which is rare in enterprise networks, FIREMAN completed in under 20 minutes.
- As FIREMAN runs offline, it is scalable enough to effectively check most distributed firewalls.

### Related Work
- **Network Topology and IP Connectivity**:
  - Studies by [5, 18, 28] and router configurations by [10, 13, 14, 25].
  - Maltz et al. [26] reverse-engineered routing designs using static analysis on router configuration state dumps.
  - Subsequent work by the same authors [16] presented a unified modeling of packet filters and routing protocols.

- **Firewall Management and Analysis Tools**:
  - Firmato and Fang [3, 27] are management and analysis tools for querying firewall rules.
  - Lumeta [30] automated queries to check if firewalls are configured according to user expectations.
  - These tools are lightweight testing tools and do not offer full coverage like static analysis tools.

- **Formal Modeling Approaches**:
  - Guttman and Herzog [19, 20] proposed formal modeling to ensure network-wide policy conformance using BDDs.
  - Their goal was to verify that filters implement high-level policies, rather than to find internal inconsistencies.

- **Closest Work**:
  - "Firewall Policy Advisor" by Al-Shaer and Hamed [1, 2] inspired our classification of misconfigurations but is more general and complete.
  - FIREMAN evaluates firewall configurations as a whole, checks for policy violations and inefficiencies, and works on any network topology with linear traversal through rules.
  - Our experiments with FIREMAN captured all misconfigurations in their sample scripts [2].

- **Other Relevant Works**:
  - Gouda and Liu [17] used FDD to assist in firewall design, reducing configuration size while maintaining consistency and completeness.
  - Eronen and Zitting [12] described an expert system based on Eclipse for rendering Cisco router access lists.
  - Hazelhurst et al. [21] used BDDs to represent firewall rules and access lists for fast lookup.

### Conclusions
In this paper, we presented a novel static analysis approach to check firewall configurations. We proposed a framework for modeling individual and distributed firewalls and designed a static analysis algorithm to discover various misconfigurations such as policy violations, inconsistencies, and inefficiencies. Our technique uses binary decision diagrams (BDDs) for compact representation and efficient processing. Compared to related research, our method is scalable and offers full-coverage of all possible IP packets and data paths. Our analysis algorithm is both sound and complete, ensuring no false negatives or positives.

We implemented our approach in a toolkit called FIREMAN, which uses BDDs to represent firewall rules. FIREMAN is fast, scalable, and requires minimal memory. In our experiments, FIREMAN uncovered misconfigurations in production environments, making it a useful tool for network administrators and personal firewall users.

### Acknowledgment
This work was supported in part by NSF grant NeTS-NBD #0520320. We thank Monica Chow, Alex Liu, David Molnar, Daniel Oxenhandler, Ashwin Sridharan, and Jimmy Su for their feedback on draft versions of this paper. We also thank the anonymous reviewers for their valuable comments.

### References
[1] E. Al-Shaer and H. Hamed. Firewall policy advisor for anomaly detection and rule editing. In Proc. IEEE/IFIP Integrated Management Conference (IM’2003), March 2003.
[2] E. Al-Shaer and H. Hamed. Discovery of policy anomalies in distributed firewalls. In Proc. IEEE Infocomm, Hong Kong, Mar 2004.
[3] Y. Bartal, A. J. Mayer, K. Nissim, and A. Wool. Firmato: A novel firewall management toolkit. In Proc. 20th IEEE Symposium on Security and Privacy, 1999.
[4] R. E. Bryant. Graph-based algorithms for boolean function manipulation. IEEE Trans. Computers, 35(8), 1986.
[5] CAIDA. Skitter tool. http://www.caida.org/tools/measurement/skitter.
[6] D. B. Chapman. Network (in)security through IP packet filtering. In Proceedings of the Third Usenix Unix Security Symposium, pages 63–76, Baltimore, MD, September 1992.
[7] H. Chen, D. Wagner, and D. Dean. Setuid demystified. In Proceedings of the Eleventh USENIX Security Symposium, San Francisco, CA, 2002.
[8] W. R. Cheswick, S. M. Bellovin, and A. D. Rubin. Firewalls and Internet Security: Repelling the Wily Hacker. Addison-Wesley, 2003.
[9] T. Cymru. The Team Cymru Bogon List v2.5 02 AUG 2004. http://www.cymru.com/Documents/bogon-list.html, 2004.
[10] D. Caldwell, A. Gilbert, J. Gottlieb, A. Greenberg, G. Hjalmtysson, and J. Rexford. The cutting edge of IP router configuration. In ACM HotNets, 2003.
[11] D. Engler, D. Y. Chen, S. Hallem, A. Chou, and B. Chelf. Bugs as deviant behavior: A general approach to inferring errors in systems code. In Proceedings of ACM Symposium on Operating Systems Principles (SOSP), October 2001.
[12] P. Eronen and J. Zitting. An expert system for analyzing firewall rules. In Proc. 6th Nordic Worksh. Secure IT Systems, 2001.
[13] N. Feamster. Practical verification techniques for wide-area routing. In ACM SIGCOMM HotNets-II, 2003.
[14] N. Feamster and H. Balakrishnan. Detecting BGP configuration faults with static analysis. In 2nd Symposium on Networked Systems Design and Implementation (NSDI), Boston, MA, May 2005.
[15] Firewall wizards mailing list. http://honor.icsalabs.com/mailman/listinfo/firewall-wizards.
[16] G. Xie, J. Zhan, D. Maltz, H. Zhang, A. Greenberg, and J. Rexford. On static reachability analysis of IP networks. In IEEE INFOCOM, 2005.
[17] M. G. Gouda and X.-Y. A. Liu. Firewall design: consistency, completeness, and compactness. In Proc. ICDCS 24, Mar 2004.
[18] R. Govindan and H. Tangmunarunkit. Heuristics for Internet Map Discovery. In IEEE INFOCOM, 2000.
[19] J. D. Guttman. Filtering postures: Local enforcement for global policies. In Proc. IEEE Symp. on Security and Privacy, 1997.
[20] J. D. Guttman and A. L. Herzog. Rigorous automated network security management. International Journal of Information Security, 4(1-2), 2005.
[21] S. Hazelhurst, A. Attar, and R. Sinnappan. Algorithms for improving the dependability of firewall and filter rule lists. In DSN ’00: Proceedings of the 2000 International Conference on Dependable Systems and Networks, 2000.
[22] J. Lind-Nielsen. Buddy version 2.4. http://sourceforge.net/projects/buddy, 2004.
[23] A. X. Liu and M. G. Gouda. Diverse firewall design. In Proc. IEEE International Conference on Dependable Systems and Networks (DSN-04), Florence, Italy, June 2004.
[24] A. X. Liu and M. G. Gouda. Complete redundancy detection in firewalls. In Proc. 19th Annual IFIP Conference on Data and Applications Security, 2005.
[25] R. Mahajan, D. Wetherall, and T. Anderson. Understanding BGP Misconfiguration. In ACM SIGCOMM, 2002.
[26] D. Maltz, G. Xie, J. Zhan, H. Zhang, G. Hjalmtysson, and A. Greenberg. Routing design in operational networks: A look from the inside. In Proc. SIGCOMM’04, 2004.
[27] A. Mayer, A. Wool, and E. Ziskind. Fang: A firewall analysis engine. In Proc. IEEE Symposium on Security and Privacy, 2000.
[28] N. Spring, R. Mahajan, and D. Wetherall. Measuring ISP topologies with Rocketfuel. In ACM SIGCOMM, 2002.
[29] Netfilter. Linux netfilter. http://www.netfilter.org.
[30] A. Wool. Architecting the Lumeta firewall analyzer. In Proc. 10th USENIX Security Symposium, Washington, D.C., 2001.
[31] A. Wool. A quantitative study of firewall configuration errors. IEEE Computer, 37(6), 2004.