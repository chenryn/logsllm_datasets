The text has been optimized for clarity, coherence, and professionalism. Here is the revised version:

---

### Conformance to Standards and Compound Authentication

The protocol adheres to the standard, which stipulates that any further user authentication requests after the first successful one should be ignored. After each key exchange, an attacker may compromise the session and obtain its keys and exchange hash.

For this protocol, we are interested in two types of compound authentication:
1. Successive instances of the key exchange protocol.
2. Interaction between the key exchange protocol and the user authentication protocol.

As depicted in Figure 7, SSH does not satisfy compound authentication for arbitrary sequences of key exchanges if the first session keys and exchange hash are compromised. In this scenario, ProVerif detects the attacks and reports the failure of the authentication property.

The cumulative hash proposed in Section IV-B binds all parameters of the current protocol instance to those of previous instances. We claim that:
(i) Maintaining `sid` becomes unnecessary, as the cumulative hash provides a stronger binding.
(ii) Additional key confirmation messages are no longer needed, as all agreement information is now contained within the cumulative hash, which is explicitly agreed upon. We implemented this fix in the SSH ProVerif model and obtained a proof of key exchange compound authentication, formally validating our proposed solution.

Regarding compound authentication between key exchange and user authentication, ProVerif can prove that this property holds even without using the cumulative hash. Restricting user authentication to occur after the first key exchange avoids the key exchange channel binding problem, thus thwarting the attack.

### Verification Summary

| Model (with session secret compromise) | SSH-USERAUTH+Rekey | SSH-USERAUTH+Rekey (cumulative hash) | TLS-RSA+Renego+Resume | TLS-RSA+Renego+Resume+SCRAM | TLS-RSA+Renego+Resume+SCRAM (session hash) |
|---|---|---|---|---|---|
| Session Sync | None | None | sid, ms, cr, sr | sid, ms, cr, sr | None |
| Initiator Agreement | Yes1 | Yes3 | Yes | Yes | Yes |
| Responder Agreement | Yes | Yes | N/A | Yes | Yes |
| Compound Auth. | No / Yes2 | Yes / Yes2 | N/A | No4 | Yes |
| Verification Time | 1.9s | 0.6s | 1.3s | 15.6s | 21.6s |

**Notes:**
1. After explicit key confirmation
2. Key exchange / User authentication
3. Without need for explicit key confirmation
4. Triple handshake; SCRAM impersonation

### Summary of Analyzed Models and Properties

Table I summarizes the 20 protocol variants and authentication properties discussed and analyzed with ProVerif. All models account for static credential compromise and dynamic session secret compromise by explicitly leaking the session secret to the attacker at the end of a successful protocol instance. The table provides a synthetic comment on the analyzed security properties and the ProVerif verification time on a 2.7 GHz Intel Core i7 machine with 8GB of RAM running a Unix operating system. All ProVerif scripts are available online.2

In the first row, we find that the SSH key exchange with user authentication is not vulnerable to channel synchronization when known DH groups are used and public values are validated. The protocol has no initiator or responder agreement flaws, although an extra key confirmation step is necessary for initiator agreement on the session secret. While compound authentication of key exchange and user authentication is sound, ProVerif finds an attack on sequences of key exchanges, where an attacker compromising the first session secret can cause a mismatch between the key exchange histories at the user and host.

The second row shows that using the cumulative hash as a channel binding fixes compound authentication for sequences of key exchanges and makes the extra key confirmation step superfluous.

TLS-RSA with session resumption and renegotiation is summarized in the third row. As discussed in [16], the protocol is vulnerable to channel synchronization on many relevant parameters, notably the shared secret. On this model, we also analyze basic agreement at the initiator, which can be shown to hold even without the mandatory RI extension, as this agreement is a property local to the current handshake instance.

We move to the combination TLS-RSA+SCRAM (fourth row), where we find the same TLS-level issues such as channel synchronization, and where the analysis of compound authentication properties finds two instances of a family of attacks. The first instance is a triple handshake attack; the second involves two TLS handshakes followed by a run of the SCRAM protocol.

In the fifth row, we formally evaluate the validity of the proposed session hash, observing that both channel synchronization and compound authentication flaws are fixed. We emphasize that these results only hold for our abstract models and within the limits of our formal threat model. We do not capture, for example, dictionary attacks on SCRAM passwords or padding oracle attacks on the TLS record protocol. Even when ProVerif finds no attacks, there may still be realistic attacks outside our model.

### Related Work

Man-in-the-middle attacks that break authentication have been documented against well-known academic security protocols such as Needham-Schroeder [31] and widely used ones such as PEAP [1] and TLS renegotiation [3], [4], [16]. This work is closely related to and inspired by the triple handshake attacks on TLS [16]. However, most of these attacks were found manually, whereas we aim to find them systematically through formal analysis.

Several works have performed rigorous analysis of widely used key exchange protocols, both in the symbolic setting (e.g., [41], [42] for TLS, [43], [38], [44] for SSH, [45] for IKEv2) and in the computational setting (e.g., [46], [47], [48], [49] for TLS, [50], [51] for SSH). We observe that none of these formal analyses take into account the problem of compound authentication, neither by means of what channel bindings to expose to outer protocols nor by means of the interaction between several instances and modes of the same protocol. Furthermore, with the exception of [46], due to the complexity of the analyzed protocols, no previous work performs a global analysis encompassing features such as re-keying, renegotiation, and resumption, often necessary to mount man-in-the-middle attacks. In our work, we complement previous analysis results by providing a formal model for compound authentication that can be automatically verified in the symbolic setting.

A separate line of work concerns safe protocol composition [52], [53], [54], for instance, for protocol instances that are nested within each other or run in parallel. These works aim to ensure that the individual security of each protocol is preserved even when it runs within or alongside other protocols. In contrast, these works do not consider the problem of obtaining stronger compound authentication properties by the composition of the protocols. We present the first formal protocol models and systematic analysis for such properties.

### Conclusions

Compound authentication protocols present a challenging but rewarding target for formal analysis. While it may be possible to analyze specific configurations of these protocols manually, the complex multi-protocol attacks described in this paper show that automation is direly needed both to find new attacks and to evaluate their countermeasures against strong attackers. We have made a first attempt towards the automated analysis of such protocols. Our 20 models of various combinations of TLS, SSH, and SASL are detailed and precise, and we are able to find both known and new man-in-the-middle attacks on various channel binding proposals, as well as evaluate the new proposals presented in this paper. Our models are far from complete, but they already indicate that this is a fruitful direction for future research.

### Acknowledgments

We would like to thank Bruno Blanchet for his support and advice on the use of the ProVerif tool.

### References

[1] N. Asokan, V. Niemi, and K. Nyberg, “Man-in-the-middle in tunnelled authentication protocols,” in Security Protocols, 2005.
[2] J. Puthenkulam, V. Lortz, A. Palekar, D. Simon, and B. Aboba, “The compound authentication binding problem,” IETF Draft v04, 2003.
[3] M. Ray and S. Dispensa, “Authentication gap in TLS renegotiation,” 2009.
[4] M. Rex, “Mitm attack on delayed TLS-client auth through renegotiation,” 2009, http://ietf.org/mail-archive/web/tls/current/msg03928.html.
[5] R. Oppliger, R. Hauser, and D. Basin, “SSL/TLS session-aware user authentication - or how to effectively thwart the man-in-the-middle,” Comput. Commun., vol. 29, no. 12, pp. 2238–2246, 2006.
[6] M. Dietz, A. Czeskis, D. Balfanz, and D. S. Wallach, “Origin-bound certificates: a fresh approach to strong client authentication for the web,” in USENIX Security, 2012.
[7] B. Aboba, L. Blunk, J. Vollbrecht, J. Carlson, and H. Levkowetz, “Extensible Authentication Protocol (EAP),” IETF RFC 3748, 2004.
[8] A. Palekar, D. Simon, J. Salowey, H. Zhou, G. Zorn, and S. Josefsson, “Protected EAP protocol (PEAP) version 2,” IETF Draft v10, 2004.
[9] P. Funk and S. Blake-Wilson, “EAP-TTLSv0: Extensible Authentication Protocol Tunneled Transport Layer Security Authenticated Protocol version 0,” IETF RFC 5281, 2008.
[10] N. Williams, “On the use of channel bindings to secure channels,” IETF RFC 5056, 2007.
[11] J. Altman, N. Williams, and L. Zhu, “Channel bindings for TLS,” IETF RFC 5929, 2010.
[12] E. Rescorla, M. Ray, S. Dispensa, and N. Oskov, “Transport Layer Security (TLS) Renegotiation Indication Extension,” RFC 5746, 2010.
[13] Microsoft, “Extended protection for authentication in integrated Windows authentication,” 2009, http://support.microsoft.com/kb/968389.
[14] D. Balfanz and R. Hamilton, “TLS Channel IDs,” IETF Draft v01, 2013.
[15] F. Giesen, F. Kohlar, and D. Stebila, “On the security of TLS renegotiation,” in ACM CCS, 2013.
[16] K. Bhargavan, A. D. Lavaud, C. Fournet, A. Pironti, and P.-Y. Strub, “Triple handshakes and cookie cutters: Breaking and fixing authentication over TLS,” in S&P, 2014.
[17] M. Abadi and C. Fournet, “Mobile values, new names, and secure communication,” SIGPLAN Not., vol. 36, pp. 104–115, January 2001.
[18] B. Blanchet, “An efficient cryptographic protocol verifier based on Prolog rules,” in CSF, 2001, pp. 82–96.
[19] K. Bhargavan, A. Delignat-Lavaud, A. Pironti, A. Langley, and M. Ray, “TLS session hash and extended master secret,” IETF Draft, 2014.
[20] D. Dolev and A. Yao, “On the security of public key protocols,” IEEE Transactions on IT, vol. IT–29, no. 2, pp. 198–208, 1983.
[21] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and V. Shmatikov, “The most dangerous code in the world: validating SSL certificates in non-browser software,” in ACM CCS, 2012.
[22] D. Akhawe, B. Amann, M. Vallentin, and R. Sommer, “Here’s my cert, so trust me, maybe?: understanding TLS errors on the Web,” in WWW, 2013, pp. 59–70.
[23] A. Cassola, W. Robertson, E. Kirda, and G. Noubir, “A practical, targeted, and stealthy attack against WPA enterprise authentication,” in NDSS, 2013.
[24] C. Soghoian and S. Stamm, “Certified lies: Detecting and defeating government interception attacks against SSL,” in FC, 2012.
[25] A. Menon-Sen, N. Williams, A. Melnikov, and C. Newman, “Salted Challenge Response Authentication Mechanism (SCRAM) SASL and GSS-API Mechanisms,” IETF RFC 5802, 2010.
[26] T. Hardjono and N. Klingenstein, “SAML v2.0 channel binding extensions version 1.0,” OASIS Committee Specification, 2013.
[27] Y. Sheffer and H. Tschofenig, “IKEv2 session resumption,” IETF RFC 5723, 2010.
[28] J. Schonwalder, G. Chulkov, E. Asgarov, and M. Cretu, “Session resumption for the Secure Shell protocol,” in Integrated Network Management, 2009, pp. 157–163.
[29] Z. Cao, B. He, Y. Shi, Q. Wu, and G. Zorn, “EAP extensions for the EAP re-authentication protocol (ERP),” IETF RFC 6696, 2012.
[30] K. Welter, “Reauthentication extension for IKEv2,” IETF Draft, 2011.
[31] G. Lowe, “Breaking and fixing the Needham-Schroeder public-key protocol using FDR,” in TACAS, 1996, pp. 147–166.
[32] R. Anderson and S. Vaudenay, “Minding your p’s and q’s,” in ASIACRYPT, 1996.
[33] E. Barker, D. Johnson, and M. Smid, NIST Special Publication 800-56A Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography (Revised), 2007.
[34] Y. Sheffer and S. Fluhrer, “Additional Diffie-Hellman tests for IKEv2,” IETF RFC 6989, 2013.
[35] M. Lepinski and S. Kent, “Additional Diffie-Hellman groups for use with IETF standards,” IETF RFC 5114, 2008.
[36] N. Williams, “Unique channel bindings for IPsec using IKEv2,” IETF Draft, 2008.
[37] D. J. Bernstein, “Curve25519: new Diffie-Hellman speed records,” in Public Key Crypto. Springer, 2006, pp. 207–228.
[38] R. Kusters and T. Truderung, “Using ProVerif to analyze protocols with Diffie-Hellman exponentiation,” in CSF, 2009, pp. 157–171.
[39] B. Schmidt, S. Meier, C. Cremers, and D. Basin, “Automated analysis of Diffie-Hellman protocols and advanced security properties,” in CSF, 2012, pp. 78–94.
[40] R. Gelashvili, “Attacks on re-keying and renegotiation in key exchange protocols,” Master’s thesis, ETH Zurich, 2012.
[41] K. Bhargavan, C. Fournet, R. Corin, and E. Zalinescu, “Verified cryptographic implementations for TLS,” TISSEC, vol. 15, no. 1, p. 3, 2012.
[42] M. Avalle, A. Pironti, D. Pozza, and R. Sisto, “JavaSPI: A framework for security protocol implementation,” JSSE, vol. 2, p. 34–48, 2011.
[43] E. Poll and A. Schubert, “Verifying an implementation of SSH,” in WITS, 2007, pp. 164–177.
[44] A. Pironti, D. Pozza, and R. Sisto, “Formally based semi-automatic implementation of an open security protocol,” Journal of Systems and Software, vol. 85, no. 4, pp. 835–849, 2012.
[45] C. Cremers, “Key exchange in IPsec revisited: Formal analysis of IKEv1 and IKEv2,” in ESORICS, 2011, pp. 315–334.
[46] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and P.-Y. Strub, “Implementing TLS with verified cryptographic security,” in S&P, 2013.
[47] H. Krawczyk, K. G. Paterson, and H. Wee, “On the Security of the TLS Protocol: A Systematic Analysis,” in CRYPTO, 2013.
[48] P. Morrissey, N. P. Smart, and B. Warinschi, “A modular security analysis of the TLS handshake protocol,” in ASIACRYPT, 2008, pp. 55–73.
[49] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, P.-Y. Strub, and S. Z. Beguelin, “Proving the TLS handshake secure (as it is),” in CRYPTO, 2014, pp. 235–255.
[50] S. C. Williams, “Analysis of the SSH key exchange protocol,” in Cryptography and Coding, 2011, pp. 356–374.
[51] D. Cade and B. Blanchet, “From computationally-proved protocol specifications to implementations,” in ARES, 2012, pp. 65–74.
[52] T. Gross and S. Modersheim, “Vertical protocol composition,” in CSF, 2011, pp. 235–250.
[53] S. Gajek, M. Manulis, O. Pereira, A.-R. Sadeghi, and J. Schwenk, “Universally composable security analysis of TLS,” in Provable Security, 2008, pp. 313–327.
[54] C. He, M. Sundararajan, A. Datta, A. Derek, and J. C. Mitchell, “A modular correctness proof of IEEE 802.11i and TLS,” in ACM CCS, 2005, pp. 2–15.

---

This version is more structured and easier to follow, with improved clarity and coherence.