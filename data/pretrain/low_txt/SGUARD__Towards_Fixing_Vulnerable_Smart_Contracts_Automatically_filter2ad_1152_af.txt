### SGUARD: Efficient and Effective Smart Contract Repair

**Bound Check Reduction:**
On average, SGUARD introduces 5.42 times fewer bound checks compared to a simplistic approach. Since each bound check incurs gas and time costs during transaction execution, this significant reduction is highly beneficial.

**RQ4: Execution Time of SGUARD**
This question addresses the efficiency of SGUARD itself. We measured the execution time by recording the time taken to fix each smart contract. As expected, more complex contracts (e.g., those with more symbolic traces) require more time to fix. Figure 12 summarizes our results, where each bar represents 10% of smart contracts, and the y-axis shows the execution time in seconds. The contracts are sorted by execution time. From the figure, we observe that 90% of contracts are fixed within 36 seconds. Among the different steps, SGUARD spends the most time identifying dependencies (70.57%) and finding vulnerabilities (20.08%). On average, SGUARD takes 15 seconds to analyze and fix a contract.

**Manual Inspection of Results:**
To ensure the quality of the fixes, we conducted an additional experiment on the top 10 ERC20 tokens in the market. We applied SGUARD to analyze and fix the contracts and then manually inspected the results to check for any remaining vulnerabilities or unnecessary runtime checks. Table IV reports these results, where columns RE, AE, and TX indicate whether reentrancy, arithmetic, and tx.origin vulnerabilities were discovered and fixed, respectively. The symbols (cid:88) and  denote "yes" and "no," respectively. The last column shows the number of symbolic traces explored.

We observed that for three tokens (HT, ZRX, and DAI), the number of symbolic traces explored was zero because these contracts contain no external calls, causing SGUARD to stop immediately after scanning the bytecode. Among the remaining seven tokens, six (LINK, BNB, CRO, LEND, KNC, and USDT) were found to be safe, and no modifications were made. One arithmetic vulnerability in the BAT smart contract was reported and fixed by SGUARD. We confirmed that a runtime check was added to prevent the discovered vulnerability. However, further investigation revealed that this vulnerability was unexploitable, as the contract already had runtime checks. We also measured the overhead of the fix by executing 10 transactions obtained from the Ethereum network on the smart contract. The result showed that SGUARD introduces a gas overhead of 18%. Our manual investigation confirmed that all contracts are free of the vulnerabilities.

### Related Work
To the best of our knowledge, SGUARD is the first tool that aims to repair smart contracts in a provably correct way. It is closely related to various works on automated program repair, such as GenProg [1], which uses evolutionary algorithms to search for program repairs, and PAR [2], which improves GenProg by learning fix patterns from existing human-written patches. Other relevant works include Abadi et al. [23], who automatically rewrite binary code to enforce control flow integrity, and ClearView [24], which learns invariants from normal application behavior to generate and select the best patches. While these tools focus on general program repair, none specifically target smart contracts in a provably correct manner.

SGUARD is also related to static analysis techniques for smart contracts, such as Securify [4] and Ethainter [5], which use pattern matching to identify vulnerabilities. In terms of symbolic execution, Luu et al. [25] presented the first engine to find potential security bugs in smart contracts, while Krupp and Rossow [26] developed teEther to focus on financial transactions. Nikolic et al. [27] introduced MAIAN for trace-based vulnerabilities, and Torres et al. [28] created Osiris to detect integer bugs. Unlike these engines, SGUARD not only detects vulnerabilities but also fixes them automatically.

SGUARD is also related to frameworks for verifying and analyzing smart contracts. Zeus [29] verifies the correctness and fairness of smart contracts based on LLVM, and Bhargavan et al. [30] proposed a framework to verify smart contracts by transforming source and bytecode into an intermediate language called F*. Additionally, Chen et al. [33] showed that many contracts suffer from gas-cost programming patterns.

Finally, SGUARD is remotely related to testing approaches like ContractFuzzer [34] and sFuzz [15], which check for various types of vulnerabilities using fuzzing techniques.

### Conclusion
In this work, we propose an approach to fix smart contracts, ensuring they are free of four common types of vulnerabilities. Our approach uses run-time information and is proven to be sound. Experimental results demonstrate the effectiveness of SGUARD, which can correctly fix contracts with minimal overhead. Future work will focus on further improving SGUARD's performance through optimization techniques.

### References
[1] W. Weimer, T. Nguyen, C. Le Goues, and S. Forrest, “Automatically finding patches using genetic programming,” in Proceedings of the 31st International Conference on Software Engineering, ser. ICSE ’09, 2009, pp. 364–374.
[2] D. Kim, J. Nam, J. Song, and S. Kim, “Automatic patch generation learned from human-written patches,” in 2013 35th International Conference on Software Engineering (ICSE). IEEE, 2013, pp. 802–811.
[3] A. Marginean, J. Bader, S. Chandra, M. Harman, Y. Jia, K. Mao, A. Mols, and A. Scott, “Sapfix: Automated end-to-end repair at scale,” in 2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP). IEEE, 2019, pp. 269–278.
[4] P. Tsankov, A. Dan, D. Drachsler-Cohen, A. Gervais, F. Buenzli, and M. Vechev, “Securify: Practical security analysis of smart contracts,” in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, 2018, pp. 67–82.
[5] L. Brent, N. Grech, S. Lagouvardos, B. Scholz, and Y. Smaragdakis, “Ethainter: a smart contract security analyzer for composite vulnerabilities.” in PLDI, 2020, pp. 454–469.
[6] G. Wood et al., “Ethereum: A secure decentralised generalised transaction ledger,” Ethereum project yellow paper, vol. 151, no. 2014, pp. 1–32, 2014.
[7] RSK. [Online]. Available: https://www.rsk.co/
[8] Hyperledger. [Online]. Available: https://www.hyperledger.org/
[9] A Multi-Sig Postmortem on the Parity Multi-Sig Library Self-Destruct. [Online]. Available: https://www.parity.io/a-postmortem-on-the-parity-multi-sig-library-self-destruct/
[10] Thinking About Smart Contract Security. [Online]. Available: https://blog.ethereum.org/2016/06/19/thinking-smart-contract-security/
[11] OpenZeppelin. [Online]. Available: https://github.com/OpenZeppelin/openzeppelin-contracts
[12] J. Jiao, S. Kan, S. Lin, D. Sanan, Y. Liu, and J. Sun, “Semantic understanding of smart contracts: Executable operational semantics of solidity,” in 2020 IEEE Symposium on Security and Privacy (SP). Los Alamitos, CA, USA: IEEE Computer Society, may 2020, pp. 1695–1712. [Online]. Available: https://doi.ieeecomputersociety.org/10.1109/SP40000.2020.00066
[13] M. Rodler, W. Li, G. Karame, and L. Davi, “Sereum: Protecting existing smart contracts against re-entrancy attacks,” in Proceedings of the Network and Distributed System Security Symposium (NDSS’19), 2019.
[14] Known Attacks. [Online]. Available: https://consensys.github.io/smart-contract-best-practices/known-attacks/
[15] T. D. Nguyen, L. H. Pham, J. Sun, Y. Lin, and Q. T. Minh, “sFuzz: An efficient adaptive fuzzer for solidity smart contracts,” in Proceedings of the 42nd International Conference on Software Engineering (ICSE), 2020, pp. 778–788.
[16] J. Chang, B. Gao, H. Xiao, J. Sun, Y. Cai, and Z. Yang, “sCompile: Critical path identification and analysis for smart contracts,” in International Conference on Formal Engineering Methods. Springer, 2019, pp. 286–304.
[17] M. Mossberg, F. Manzano, E. Hennenfent, A. Groce, G. Grieco, J. Feist, T. Brunson, and A. Dinaburg, “Manticore: A user-friendly symbolic execution framework for binaries and smart contracts,” in 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 2019, pp. 1186–1189.
[18] A worklist algorithm for dominators. [Online]. Available: http://pages.cs.wisc.edu/~fischer/cs701.f08/lectures/Lecture19.4up.pdf
[19] Etherscan. [Online]. Available: https://etherscan.io/
[20] Solc-Select. [Online]. Available: https://github.com/crytic/solc-select
[21] Ethereum transactions per day. [Online]. Available: https://etherscan.io/chart/tx
[22] EIP-170. [Online]. Available: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-170.md
[23] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti, “Control-flow integrity principles, implementations, and applications,” ACM Transactions on Information and System Security (TISSEC), vol. 13, no. 1, pp. 1–40, 2009.
[24] J. H. Perkins, S. Kim, S. Larsen, S. Amarasinghe, J. Bachrach, M. Carbin, C. Pacheco, F. Sherwood, S. Sidiroglou, G. Sullivan et al., “Automatically patching errors in deployed software,” in Proceedings of the ACM SIGOPS 22nd symposium on Operating systems principles, 2009, pp. 87–102.
[25] L. Luu, D.-H. Chu, H. Olickel, P. Saxena, and A. Hobor, “Making smart contracts smarter,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2016, pp. 254–269.
[26] J. Krupp and C. Rossow, “teether: Gnawing at ethereum to automatically exploit smart contracts,” in 27th USENIX Security Symposium (USENIX Security 18), 2018, pp. 1317–1333.
[27] I. Nikolić, A. Kolluri, I. Sergey, P. Saxena, and A. Hobor, “Finding the greedy, prodigal, and suicidal contracts at scale,” in Proceedings of the 34th Annual Computer Security Applications Conference. ACM, 2018, pp. 653–663.
[28] C. F. Torres, J. Schütte et al., “Osiris: Hunting for integer bugs in ethereum smart contracts,” in Proceedings of the 34th Annual Computer Security Applications Conference. ACM, 2018, pp. 664–676.
[29] S. Kalra, S. Goel, M. Dhawan, and S. Sharma, “Zeus: Analyzing safety of smart contracts,” in 25th Annual Network and Distributed System Security Symposium (NDSS’18), 2018.
[30] K. Bhargavan, A. Delignat-Lavaud, C. Fournet, A. Gollamudi, G. Gonthier, N. Kobeissi, N. Kulatova, A. Rastogi, T. Sibut-Pinote, N. Swamy et al., “Formal verification of smart contracts: Short paper,” in Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security. ACM, 2016, pp. 91–96.
[31] Y. Hirai, “Formal verification of deed contract in ethereum name service,” November-2016. [Online]. Available: https://yoichihirai.com/deed.pdf, 2016.
[32] M. Fröwis and R. Böhme, “In code we trust?” in Data Privacy Management, Cryptocurrencies and Blockchain Technology. Springer, 2017, pp. 357–372.
[33] T. Chen, X. Li, X. Luo, and X. Zhang, “Under-optimized smart contracts devour your money,” in 2017 IEEE 24th International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEE, 2017, pp. 442–446.
[34] B. Jiang, Y. Liu, and W. K. Chan, “ContractFuzzer: Fuzzing the smart contracts for vulnerability detection,” in Proceedings of 33rd ACM/IEEE International Conference on Automated Software Engineering, ser. ASE 2018. New York, NY, USA: ACM, 2018, pp. 259–269. [Online]. Available: http://doi.acm.org/10.1145/3238147.3238177