### Time Elapsed Between the Arrival of a Request for Application Execution and the Actual Execution

**Figure 7: The Secure I2C Bus Manager**
The secure I2C bus manager (shown in gray) restricts access to the bus by controlling tri-state buffers that connect peripherals to the I2C bus. The trusted domain initializes the peripheral access control map with information regarding which peripherals each application can access. Each application can then enable a subset of these peripherals using the Peripheral Select Register (PSR).

**Activation Latency in Idle and Non-Idle States**

When the system is idle, the activation latency is equal to the context switch time, referred to as the ideal activation delay. In our prototype, this includes the time required to save the current program counter, all general-purpose registers (32 registers in the case of the AVR ATmega103), the current stack pointer, timer register representing the remaining execution time, peripheral selection register, and the interrupt mask register. This process takes approximately 114 CPU cycles, or about 9.1 μs when the processor runs at 12.5 MHz, which is the system's ideal activation time.

In the non-idle state, the activation latency depends on whether execution control is within another application or a context switch. If execution control is within an atomic section of a lower-priority application, the activation delay increases by the number of remaining cycles in the atomic section. Similarly, if the system is currently executing a context switch, the activation delay increases by the number of remaining cycles in the context switch. Our measurements on the prototype implementation resulted in a worst-case activation latency of 222 CPU cycles, or about 18 μs at 12.5 MHz.

**System Recovery Time**

Finally, we calculate the system recovery time, which is the time taken by the system to exit an erring application and begin restoring the previous context. Our prototype implementation took 12 CPU cycles, or about 1 μs at 12.5 MHz, to recover from a security panic and restore the last known stable system state.

### Application Execution Latency

In our prototype, the only component that directly affects the total application execution time is the MPU, which checks every memory access to ensure its validity. The ATmega103 has two types of data memory access instructions: direct and indirect. While indirect memory access instructions (load and store) do not incur additional delay, direct memory access instructions require one extra cycle (i.e., they take 3 cycles instead of 2). This is because, in the latter case, the actual memory address fetched during the second cycle needs to be validated before the load/store operation.

### Hardware Complexity

We implemented the trusted scheduling hardware modules as an extension to the AVR ATmega103 core in VHDL and synthesized it for a Xilinx Virtex 5 FPGA. The application-aware MPU, the time-slice monitor, and the atomicity monitor together occupied 34.7% more logic units compared to the original AVR core. A significant portion of this increase (about 22%) is attributed to the application-aware MPU, which contains the memory map of application boundaries. However, many modern CPUs are already equipped with process-aware or domain-aware MMUs (e.g., NIOS II, ARM), which can potentially be used to realize application-aware MPUs at no additional hardware cost. The logic units utilized by the peripheral bus manager were insignificant (less than 0.1% of the whole system).

### Discussion: Implications of Bus Protocol Choice

In this section, we discuss the implications of choosing a bus protocol for a trusted scheduling-enabled embedded system. Broadly, bus protocols can be classified as either (i) node-oriented (e.g., I2C) or (ii) message-oriented (e.g., CAN).

In a node-oriented protocol, only one master and slave are active at any point in time. A simple bus manager design would allow access to the bus based on the priority of the master node. Additionally, as implemented in our prototype, the master node can selectively enable the slave(s) it requires for functioning. However, in message-oriented protocols like CAN, bus arbitration depends on the priority of the message being broadcasted. Since multiple nodes can send out messages of the same priority, formulating secure bus access control policies for message-oriented protocols without modifying the protocols is non-trivial. Therefore, bus manager designs for message-oriented protocols require further exploration.

Furthermore, if the bus protocol uses a bi-directional bus line, peripherals may connect to it using a single bi-directional pin or separate pins for input and output. Bus isolation circuits that allow control of physical access to the bus are much simpler in the latter scenario because it is easier to identify when a peripheral is actually transmitting. We intend to investigate this and other aspects of bus-interface designs that affect trusted scheduling as future work.

### Related Work

Given the feasibility of compromising the firmware of peripherals, there have been efforts to detect and defend applications against such compromised devices. The work that comes closest to ours in terms of protection against malicious peripherals is CARMA [28], which relies on a Cache-as-RAM mechanism to securely sandbox applications. However, CARMA focuses on reducing the trusted computing base rather than providing trusted scheduling guarantees as presented in this work. Furthermore, our work addresses iDoS attacks by peripherals, unlike CARMA, which addresses attacks against the confidentiality and integrity of application code and data.

Although there has been no direct work that provides guarantees similar to those of our trusted scheduling architecture, individual components of the architecture have been explored extensively in previous work. We summarize previous work on CPU scheduling, memory management, and bus isolation in real-time embedded systems.

Most previous work on scheduling in real-time systems focused on optimizing the design [23, 26] and implementation of schedulers in hardware and software [30]. Today, scheduling in real-time systems is usually done by a real-time operating system (RTOS) [5, 6] or a separation kernel [3, 8]. An overview of contemporary RTOS and their performance can be found in [21, 27]. Most RTOS support the use of both cooperative and preemptive scheduling using priority- and round-robin-based algorithms. However, unlike our solution, none of these works explicitly include mechanisms to limit the length of atomic sections in code.

Process/Domain-aware MMUs are available in some of today’s processors (e.g., ARM [1], NIOS II [7]). While most RTOS support the use of MMUs and MPUs, it is unclear whether they also support the use of such application-aware MMUs as described in this work. Furthermore, commercial RTOS [5, 6] assign separate program and data memory partitions to each of the applications [27]. RTOS for memory-constrained embedded devices ensure more efficient use of memory by sharing stack, heap, and global data sections. Solutions for secure stack sharing [20, 24] and stack overflow prevention in such constrained devices [14, 17, 20] also exist.

The work in [25, 31] discusses DoS attacks against the system bus and defense mechanisms in the context of shared-memory multi-processor systems. However, these works only consider attacks by misbehaving applications running on one or more CPUs and do not take into account other misbehaving system components and peripherals. The need for fault-tolerant bus design has led to the design of bus isolation solutions [11, 29]. These bus isolation solutions, by themselves, only provide a mechanism to physically isolate faulting devices and are therefore useful for trusted scheduling only when they are configured and controlled by a context-aware bus controller as described in our design.

### Conclusion

In this work, we investigated the problem of enabling trusted scheduling on embedded systems in adversarial settings. First, we identified the essential properties of a trusted scheduling system and presented an embedded system design that satisfies these properties. Our design includes a software-based trusted domain that manages the other hardware components. We analyzed the security of our proposal and showed that it achieves trusted scheduling in the presence of not only misbehaving applications but also misbehaving peripherals. Our prototype implementation based on the AVR ATmega103 shows the feasibility of realizing such an architecture through simple hardware extensions.

### Acknowledgments

The research leading to these results was supported, in part, by the Hasler foundation (project number: 09080) and the European Union Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 258754.

### References

[1] ARM Architecture Reference Manual.
http://infocenter.arm.com/help/index.jsp.

[2] CAN Specification v2.0.
http://esd.cs.ucr.edu/webres/can20.pdf.

[3] Codezero. http://www.l4dev.org/.

[4] IBM X-Force 2010 Trend and Risk Report.
ftp://public.dhe.ibm.com/common/ssi/ecm/en/wgl03003usen/WGL03003USEN.PDF.

[5] Integrity for Embedded Systems.
http://www.ghs.com/products.html.

[6] Lynx Embedded RTOS.
http://www.lynuxworks.com/rtos/rtos.php.

[7] NIOS II Processor Reference Handbook, chapter 3.
http://www.altera.com/literature/lit-nio2.jsp.

[8] OKL4 Microvisor.
http://www.ok-labs.com/products/overview.

[9] SPI BlockGuide v03.06.
http://www.ee.nmt.edu/~teare/ee308l/datasheets/S12SPIV3.pdf, 2003.

[10] Attacks on Mobile and Embedded Systems: Current Trends.
https://mocana.com/pdfs/attacktrends_wp.pdf, 2009.

[11] Designing an Isolated I2C Bus Interface Using Digital Isolators.
http://www.ti.com/lit/an/slyt403/slyt403.pdf, 2011.

[12] I2C Bus Specification and User Manual.
http://www.nxp.com/documents/user_manual/UM10204.pdf, 2012.

[13] J. Adomat, J. Furunas, L. Lindh, and J. Starner. Real-time Kernel in Hardware RTU: A Step Towards Deterministic and High-performance Real-time Systems. In Proceedings of the 8th Euromicro Workshop on Real-Time Systems, pages 164–168, 1996.

[14] S. Biswas, T. Carley, M. Simpson, B. Middha, and R. Barua. Memory Overflow Protection for Embedded Systems Using Run-time Checks, Reuse, and Compression. ACM Transactions on Embedded Computing Systems, 5(4):719–752, Nov. 2006.

[15] L. Duflot, Y.-A. Perez, and B. Morin. What If You Can’t Trust Your Network Card? In Proceedings of the 14th International Conference on Recent Advances in Intrusion Detection, RAID’11, pages 378–397, 2011.

[16] N. Falliere, L. O. Murchu, and E. Chien. W32.Stuxnet Dossier, 2011.

[17] A. Francillon, D. Perito, and C. Castelluccia. Defending Embedded Systems Against Control Flow Attacks. In Proceedings of the 1st ACM Workshop on Secure Execution of Untrusted Code, SecuCode ’09, pages 19–26, 2009.

[18] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and S. Winwood. seL4: Formal Verification of an OS Kernel. In Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles, SOSP ’09, pages 207–220, 2009.

[19] P. Kohout, B. Ganesh, and B. Jacob. Hardware Support for Real-time Operating Systems. In Proceedings of the 1st IEEE/ACM/IFIP International Conference on Hardware/Software Codesign and System Synthesis, CODES+ISSS’03, pages 45–51, 2003.

[20] R. Kumar, A. Singhania, A. Castner, E. Kohler, and M. Srivastava. A System for Coarse Grained Memory Protection in Tiny Embedded Processors. In Proceedings of the 44th Annual Design Automation Conference, DAC ’07, pages 218–223, 2007.

[21] B. Leiner, M. Schlager, R. Obermaisser, and B. Huber. A Comparison of Partitioning Operating Systems for Integrated Systems. In Computer Safety, Reliability, and Security, volume 4680 of Lecture Notes in Computer Science, pages 342–355, 2007.

[22] Y. Li, J. M. McCune, and A. Perrig. VIPER: Verifying the Integrity of PERipherals’ Firmware. In Proceedings of the 18th ACM Conference on Computer and Communications Security, CCS ’11, pages 3–16, 2011.

[23] C. L. Liu and J. W. Layland. Scheduling Algorithms for Multiprogramming in a Hard-Real-Time Environment. Journal of the ACM, 20(1):46–61, Jan. 1973.

[24] B. Middha, M. Simpson, and R. Barua. MTSS: Multitask Stack Sharing for Embedded Systems. ACM Transactions on Embedded Computing Systems, 7(4):46:1–46:37, Aug. 2008.

[25] T. Moscibroda and O. Mutlu. Memory Performance Attacks: Denial of Memory Service in Multi-Core Systems. In Proceedings of the 16th Usenix Security Symposium, pages 257–274, 2007.

[26] K. Ramamritham and J. Stankovic. Scheduling Algorithms and Operating Systems Support for Real-time Systems. In Proceedings of the IEEE, 82(1):55–67, Jan. 1994.

[27] S. Tan and B. Tran Nguyen. Survey and Performance Evaluation of Real-time Operating Systems (RTOS) for Small Microcontrollers. Micro, IEEE, (99), 2009.

[28] A. Vasudevan, J. M. McCune, J. Newsome, A. Perrig, and L. van Doorn. CARMA: A Hardware Tamper-Resistant Isolated Execution Environment on Commodity x86 Platforms. In Proceedings of the ACM Symposium on Information, Computer and Communications Security, ASIACCS’12, 2012.

[29] N. Venkateswaran, S. Balaji, and V. Sridhar. Fault Tolerant Bus Architecture for Deep Submicron Based Processors. SIGARCH Computer Architecture News, 33(1):148–155, Mar. 2005.

[30] M. Vetromille, L. Ost, C. Marcon, C. Reif, and F. Hessel. RTOS Scheduler Implementation in Hardware and Software for Real-Time Applications. In 17th IEEE International Workshop on Rapid System Prototyping, pages 163–168, 2006.

[31] D. H. Woo and H.-H. S. Lee. Analyzing Performance Vulnerability due to Resource Denial-of-Service Attack on Chip Multiprocessors. In Proceedings of the Workshop on Chip Multiprocessor Memory Systems and Interconnects, CMP-MSI’07, 2007.