### 10 Pages
Thus, this detector (without adjusting it to the specific application) is only useful for approximately 80-85% of web applications.

### 6.4. Reflected XSS Detector Evaluation
Since the reflected XSS detector does not require training, its evaluation is relatively straightforward.

#### Detection Evaluation (Manual Script Injection)
Our evaluation of the reflected XSS detector is based on the previously collected dataset and the set of malicious scripts discussed earlier. We randomly selected 100 request/response pairs from each web application. For each pair, a randomly chosen malicious script was encoded using a randomly selected encoding method. The encoded script was then injected into one of the parameters, while the unencoded version was injected into a randomly selected but suitable location on the corresponding webpage.

Afterward, the reflected XSS detector was applied to each request-response pair. Any injected script that did not raise an alarm was counted as a false-negative. This procedure was repeated 10 times for each request/response pair.

#### Detection Evaluation (Real-World Vulnerabilities)
Numerous disclosed reflected XSS vulnerabilities can be found online. Since we needed the complete request/response pair, we used 10 different vulnerabilities disclosed on [4] with malicious payloads from our list and recorded the required HTTP traffic. The detector was then applied to each request/response pair, and any injected script that did not trigger an alarm was counted as a false-negative.

#### False-Positives
To measure the false-positive rate, we applied the detector to every request/response pair in our dataset. We assumed that there were no attacks in the data, so each alarm was considered a false-positive and reviewed afterward. The false-positive rate was calculated by dividing the number of false-positives by the total number of pages.

#### Results
Similar to the generic XSS detector, the reflected XSS detector was able to identify all given malicious scripts, resulting in zero false-negatives. Approximately 95% of the web applications did not generate any false-positives. In the worst case, which occurred in about 1% of the cases, the false-positive rate was around 5 alarms per 100 pages. The results of our measurements are depicted in Figure 7.

### 7. Discussion

#### 7.1. Combination of the Detectors
Both proposed detectors exhibit excellent attack detection capabilities and a low "noise level," but they have individual advantages and disadvantages. The approach to identify reflected XSS (see Section 3) is immediately usable without any training overhead and generates very few false positives. However, it has limited capabilities in detecting stored XSS, potentially leaving protection gaps if relied upon solely. The generic detector (Section 4) has a slightly higher false-positive rate and requires a training phase. Our experiments also suggest that some web applications may use dynamic JavaScript generation methods incompatible with our proposed method. Nevertheless, its ability to reliably detect stored XSS makes it a suitable companion for the reflected detector. Therefore, a combined usage of both detectors is advisable. Specifically, we recommend implementing the generic detector as the primary sensor, while the reflected detector, due to its low false-positive rate, can aid in prioritizing alarms for manual review and ensuring that the generic detector's list of known scripts remains attack-free during retraining phases.

#### 7.2. Capabilities of the Adversary
In this section, we discuss potential attack vectors against our approach.

##### Reflected XSS Detector
Due to the nature of our matching algorithm, an adversary can create a large number of false positives by generating HTTP requests with parameters filled with substrings of the application’s legitimate JavaScripts. These parameters, when found within the response’s scripts, trigger an alarm. However, such attempts can be easily identified by inspecting the offending HTTP parameters, allowing the site operator to recognize deliberate attempts to cause false alarms. Furthermore, as the JavaScripts are legitimate, they should be included in the generic detector’s list of known scripts, thereby suppressing false alarms in a combined usage scenario.

##### Generic XSS Detector
It is important to note that the generic detector’s algorithm allows an adversary to reinject any known script already existing in the web application with altered constants. This could enable a sophisticated combination of several legitimate scripts to fulfill the adversary’s objectives. Although we have not encountered an application with a script-set that would allow such an attack, and consider this case highly unlikely and contrived, it remains a possible attack vector.

### 8. Related Work

#### Server-Side Approaches
Cross-site Scripting (XSS) is fundamentally an input filtering failure. Consequently, methods have been developed to target malicious inputs before they reach the web server. Traditionally, web application firewalls (WAFs) either scan for attack signatures in the parameters passed to the web application [11] or require an administrator to manually specify a ruleset to match requests against [21]. Both approaches can be seen as an external second input filtering layer. Kruegel and Vigna proposed an anomaly-based intrusion detection system for web applications [14], which derives statistical characteristics from observed HTTP requests. However, unlike our methods, these approaches focus solely on incoming query parameters and ignore the HTTP response, leading to unnecessary false positives or missed attacks.

Ismail et al. [9] describe an XSS detection mechanism similar to our reflected detector. Their server-side proxy checks incoming parameters for HTML markup and examines the HTTP response for the same markup. However, their approach is less accurate as it fails to identify in-script and attribute injections and does not consider transformation processes like character encoding or removal filters.

Taint analysis, first introduced by Perl’s taint mode, tracks the flow of untrusted data through the application. Recent work includes fine-grained taint propagation techniques [17, 18, 24]. While taint analysis is powerful, it requires significant changes to the application or the runtime environment and is specific to certain technologies. Our approach, in contrast, is applicable to all languages and application servers, does not require code modifications, and can monitor heterogeneous setups without performance penalties.

#### Client-Side Approaches
We propose server-side detection methods, but for completeness, we list related client-side approaches:

- **Internet Explorer XSS Filter** [20]: Similar to our reflected detector, it analyzes outgoing HTTP parameters and checks the corresponding HTTP response. It produces unnecessary false positives.
- **NoScript Plugin for Firefox** [15]: Warns users before sending HTTP requests with potentially malicious parameters. It ignores the incoming HTTP response, leading to false positives and cannot detect stored XSS.
- **Browser-Enforced Embedded Policies (BEEP)** [10]: Includes a whitelist-like policy in each page, allowing the browser to filter unwanted scripts. BEEP requires a modified web browser and relies on developers to compile the list of legitimate scripts.
- **SpiderMonkey Engine Modification** [7]: Tracks client-side JavaScript behavior and matches it against high-level policies to detect malicious activity.

### 9. Conclusion
We described XSSDS, a server-side Cross-site Scripting detection system. The system uses two novel detection approaches based on generic observations of XSS attacks and web applications. A prototypical implementation demonstrated the system’s capability to reliably detect XSS attacks while maintaining a tolerable false-positive rate. As our approach is completely passive and only requires reading access to the application’s HTTP traffic, it is applicable to a wide range of scenarios and works with all existing web technologies.

### References
[1] R. A. Baeza-Yates and G. H. Gonnet. Fast text searching for regular expressions or automaton searching on tries. Journal of the ACM, 43(6):915 – 936, November 1996.
[2] Blwood. Multiple xss vulnerabilities in tikiwiki 1.9.x. mailing list Bugtraq, http://www.securityfocus.com/archive/1/435127/30/120/threaded, May 2006.
[3] S. Christey and R. A. Martin. Vulnerability type distributions in cve, version 1.1. [online], http://cwe.mitre.org/documents/vuln-trends/index.html, (09/11/07), May 2007.
[4] K. Fernandez and D. Pagkalos. Xssed.com - xss (cross-site scripting) information and vulnerable websites archive. [online], http://xssed.com (03/20/08).
[5] D. Gusfield. Algorithms on Strings, Trees, and Sequences: Computer Science and Computational Biology. Cambridge University Press, New York, USA, 1997. ISBN 0521585198.
[6] W. G. Halfond, A. Orso, and P. Manolios. Using positive tainting and syntax-aware evaluation to counter sql injection attacks. In 14th ACM Symposium on the Foundations of Software Engineering (FSE), 2006.
[7] O. Hallaraker and G. Vigna. Detecting malicious javascript code in mozilla. In Proceedings of the IEEE International Conference on Engineering of Complex Computer Systems (ICECCS), pages 85–94, June 2005.
[8] R. Hansen. XSS (cross-site scripting) cheat sheet - esp: for filter evasion. [online], http://ha.ckers.org/xss.html, (05/05/07).
[9] O. Ismail, M. Eto, Y. Kadobayashi, and S. Yamaguchi. A proposal and implementation of automatic detection/collection system for cross-site scripting vulnerability. In 8th International Conference on Advanced Information Networking and Applications (AINA04), March 2004.
[10] T. Jim, N. Swamy, and M. Hicks. Defeating script injection attacks with browser-enforced embedded policies. In 16th International World Wide Web Conference (WWW2007), May 2007.
[11] A. Klein. Cross site scripting explained. White Paper, Sanctum Security Group, http://crypto.stanford.edu/cs155/CSS.pdf, June 2002.
[12] A. Klein. DOM based cross site scripting or xss of the third kind. [online], http://www.webappsec.org/projects/articles/071105.shtml, September 2005.
[13] J. Kratzer. Jspwiki multiple vulnerabilities. Posting to the Bugtraq mailinglist, http://seclists.org/bugtraq/2007/Sep/0324.html, September 2007.
[14] C. Kruegel and G. Vigna. Anomaly detection of web-based attacks. In Proceedings of the 10th ACM Conference on Computer and Communication Security (CCS ’03), pages 251–261. ACM Press, October 2003.
[15] G. Maone. NoScript firefox extension. Software, http://www.noscript.net/whats, 2006.
[16] Misc. New xss vectors/unusual javascript. [online], http://sla.ckers.org/forum/read.php?2,15812 (04/01/08), 2007.
[17] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and D. Evans. Automatically hardening web applications using precise tainting. In 20th IFIP International Information Security Conference, May 2005.
[18] T. Pietraszek and C. V. Berghe. Defending against injection attacks through context-sensitive string evaluation. In Recent Advances in Intrusion Detection (RAID2005), 2005.
[19] A. Pigrelax. XSS in nested tag in phpbb 2.0.16. mailing list Bugtraq, http://www.securityfocus.com/archive/1/404300, July 2005.
[20] D. Ross. IE 8 XSS filter architecture/implementation. [online], http://blogs.technet.com/swi/archive/2008/08/18/ie-8-xss-filter-architecture-implementation.aspx (09/09/08), August 2008.
[21] D. Scott and R. Sharp. Abstracting application-level web security. In WWW 2002, pages 396 – 407. ACM Press New York, NY, USA, 2002.
[22] P. Sowden. rbnarcissus. Software, http://code.google.com/p/rbnarcissus/ (04/01/08), 2008.
[23] E. Ukkonen. On-line construction of suffix trees. Algorithmica, 14:249 – 260, 1995.
[24] W. Xu, S. Bhatkar, and R. Sekar. Taint-enhanced policy enforcement: A practical approach to defeat a wide range of attacks. In 15th USENIX Security Symposium, August 2006.