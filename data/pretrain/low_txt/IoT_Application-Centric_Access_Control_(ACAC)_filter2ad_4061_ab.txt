### Proposed ACAC Framework for Least Privilege Network Access Control

The proposed ACAC (Adaptive Context-Aware Control) framework is designed to enable least privilege network access control for dynamic workflows, while also considering users' Quality of Experience (QoE). This is achieved by allowing notifications to flow from the application to the access control policy generator. The three main components of the ACAC framework, as depicted in Figure 3, are: Workflow Design, Workflow Service Discovery (WSD), and Dynamic Access Control Policy (DACP).

#### 2.1 Workflow Design

At the IoT application level, workflow design allows users to define their activities or tasks as abstract workflows. These workflows provide only the service semantic information on how the workflow is composed, without any execution details. The primary goal of workflow design is to decouple the activity from the underlying devices that will execute it. This decoupling enables the dynamic selection or change of devices to build an execution workflow that meets the user's requirements, such as QoE and preferences. For example, a user might define an abstract workflow for audio streaming as "TV tv audio streams to a speaker s," leaving the selection of the suitable TV and speaker devices to the WSD.

#### 2.2 Workflow Service Discovery (WSD)

Workflow Service Discovery (WSD) manages and maintains workflow execution to meet users' QoE and preferences. WSD discovers and automatically selects a suitable collection of IoT devices to provide the required services for a new workflow [10]. The devices that execute the workflow are chosen from the available devices in the network to maximize user QoE and preferences. Additionally, WSD dynamically changes or switches workflow services from one device to another to maintain user QoE and preferences [3, 4]. Workflow service changes can be triggered by environmental changes, such as user mobility, device availability, or other factors. For instance, WSD might define an execution workflow at time \( t \) by selecting \( \text{tv1} \rightarrow \text{s1} \), and then at \( t + \Delta \) switch to \( \text{s2} \) to maintain user QoE, as shown in Figure 3.

#### 2.3 Dynamic Access Control Policy (DACP)

Dynamic Access Control Policy (DACP) generates ACL (Access Control List) policy rules to support workflow communications. We consider WSD as a black box that can notify DACP about network changes in the workflows. Therefore, DACP can generate and update ACL rules dynamically in response to workflow changes or in anticipation of expected changes by WSD.

- **Reactive Approach:** In the reactive approach, DACP generates and installs ACL policies as a reaction to changes in workflows. This approach is well-known in access control research and is often used with Intrusion Detection Systems (IDS) [12]. Notifications from WSD contain information about changes in the workflow, such as (FROM, TO, SERVICE, REMOVE/ADD). For example, upon changing workflow \( W1 \), WSD sends notifications like \( (\text{tv_1}, \text{s_1}, \text{stream}, \text{REMOVE}) \) and \( (\text{tv_1}, \text{s_2}, \text{stream}, \text{ADD}) \). The access control policy generator then generates the corresponding rules to block \( \text{tv1} \) from accessing \( \text{s1} \) and allow it to access \( \text{s2} \).

- **Proactive Approach:** In the proactive approach, DACP generates the required access rules for expected changes in workflows. This requires early notification from WSD about any anticipated changes in workflow connections. WSD sends notifications before the change takes place (i.e., before handover). Once the notifications are received, corresponding rules are added for new connections, but old connections are not removed until the handover is complete. For example, the proactive approach would handle the aforementioned example as follows: first, it receives early notification from WSD about the workflow changes and installs rules for the ADD connections (e.g., \( \text{tv1} \rightarrow \text{s2} \)). Once the handover is complete, WSD sends another notification, and accordingly, the REMOVE connections (e.g., \( \text{tv1} \rightarrow \text{s1} \)) are removed.

ACL rules consist of a match represented by a four-tuple (ip_src, ip_dest, port_dest, tp_proto) and an allow action, with the default being deny. The match and action fields are filled by DACP with values corresponding to the flow changes. For example, if WSD sends \( (\text{tv_1}, \text{s_1}, \text{stream}, \text{REMOVE}) \) and \( (\text{tv_1}, \text{s_2}, \text{stream}, \text{ADD}) \), DACP compiles these changes into rules using network device information \( \text{N etdev} \) and network service requirements \( \text{N etr eq} \) as shown in Algorithm 1. The generated rules can be enforced using Software Defined Networking (SDN), which supports dynamic rule enforcement in switches [12].

### 3 Conclusions and Future Work

In this paper, we proposed the ACAC framework, which supports dynamic IoT application network access control. ACAC addresses the problem of enforcing least privilege on IoT applications while supporting dynamic access control policies. We investigated both reactive and proactive approaches to dynamically generate access rules for workflows and their impact on user QoE. Future research directions include:

- How to reduce handover time while providing an acceptable user experience without violating the principle of least privilege.
- How to infer workflow changes based on changes in user behavior or the environment.

### References

[1] Mohammed Al-Shaboti, Chen Aaron, and Welch Ian. 2019. Automatic Device Selection and Access Policy Generation based on User Preference for IoT Activity Workflow. In eprint arXiv:1904.06495.

[2] Mohammed Al-Shaboti, Ian Welch, Aaron Chen, and Muhammed Adeel Mahmood. 2018. Towards secure smart home IoT: Manufacturer and user network access control framework. In 2018 IEEE 32nd International Conference on Advanced Information Networking and Applications (AINA). IEEE, 892–899.

[3] Kyeong-Deok Baek and In-Young Ko. 2017. Spatially cohesive service discovery and dynamic service handover for distributed IoT environments. In International Conference on Web Engineering. Springer, 60–78.

[4] Wei Bao, Dong Yuan, Zhengjie Yang, Shen Wang, Wei Li, Bing Bing Zhou, and Albert Y Zomaya. 2017. Follow me fog: toward seamless handover timing schemes in a fog computing environment. IEEE Communications Magazine 55, 11 (2017), 72–78.

[5] Paolo Bellavista and A Montanari. 2017. Context awareness for adaptive access control management in IoT environments. Secur. Priv. Cyber-Phys. Syst.: Found. Princ. Appl 2, 5 (2017), 157–178.

[6] Suman Sankar Bhunia and Mohan Gurusamy. 2017. Dynamic attack detection and mitigation in IoT using SDN. In 2017 27th International Telecommunication Networks and Applications Conference (ITNAC). IEEE, 1–6.

[7] Jae-Hyun Cho, Han-Gyu Ko, and In-Young Ko. 2016. Adaptive service selection according to the service density in multiple QoS aspects. IEEE Transactions on Services Computing 9, 6 (2016), 883–894.

[8] Microsoft flow team. [n. d.]. Microsoft Flow. https://flow.microsoft.com/en-us/ (visited on 18/10/2018).

[9] Gartner. 2014. Gartner Says a Typical Family Home Could Contain More Than 500 Smart Devices by 2022. https://www.gartner.com/en/newsroom/press-releases/2014-09-08-gartner-says-a-typical-family-home-could-contain-more-than-500-smart-devices-by-2022 (visited on 8/4/2019).

[10] In-Young Ko, Han-Gyu Ko, Angel Jimenez Molina, and Jung-Hyun Kwon. 2016. SoIoT: Toward a user-centric IoT-based service framework. ACM Transactions on Internet Technology (TOIT) 16, 2 (2016), 8.

[11] Dimosthenis Kyriazis, Konstantinos Tserpes, Andreas Menychtas, Antonis Litke, and Theodora Varvarigou. 2008. An innovative workflow mapping mechanism for Grids in the frame of Quality of Service. Future Generation Computer Systems 24, 6 (2008), 498–511.

[12] Hongda Li, Feng Wei, and Hongxin Hu. 2019. Enabling Dynamic Network Access Control with Anomaly-based IDS and SDN. In Proceedings of the ACM International Workshop on Security in Software Defined Networks & Network Function Virtualization. ACM, 13–16.

[13] Rida Zojaj Naeem, Saman Bashir, Muhammad Faisal Amjad, Haider Abbas, and Hammad Afzal. 2019. Fog computing in internet of things: Practical applications and future directions. Peer-to-Peer Networking and Applications (2019), 1–27.