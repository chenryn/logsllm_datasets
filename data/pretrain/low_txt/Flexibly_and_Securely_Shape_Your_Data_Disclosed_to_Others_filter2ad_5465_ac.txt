### Decoupled Encryptions of Shared and Identity-Associated Components

In practice, the update is generated by the data owner and then sent to a cloud for publishing. To validate the complexity, we conducted a series of experiments using different numbers of noise. From Figures 2 and 3, it is evident that in our scheme, both the communication overhead and the computation time overhead for update generation remain constant, significantly lower than those in the Ciphertext-Policy Attribute-Based Encryption (CP-ABE) approach, which increases linearly with the number of noise.

Specifically, for 100 pieces of noise, the communication overhead using CP-ABE is around 900KB. The computational time overhead is approximately 210 seconds, meaning the maximum supported update frequency is one update every three-and-a-half minutes. In contrast, our scheme, FAPC, has only a 512-byte overhead per update, and the computational time overhead is just 0.04 seconds, allowing for an update frequency of 25 updates per second. Additionally, the computational time overhead for update execution in our scheme is also constant at about 0.1 milliseconds, though slightly higher than the CP-ABE approach, which requires no computational operation.

Although a small amount of computational overhead is introduced at the cloud side, it is negligible because only one multiplication operation in the group \( G_T \) is performed, which is computationally efficient. Note that the CP-ABE approach's overhead will increase linearly if storage operations on the cloud are considered. Due to the constant communication and computation overhead, our scheme is scalable and can support a larger number of users simultaneously.

### Update Communication and Computation Overhead
- **Figure 2**: Update communication overhead, 16 leaves per access tree.
- **Figure 3**: Update computation overhead at DO, 16 leaves per access tree.

### Decryption Process
In the decryption algorithm, three components are decrypted:
1. The session key component.
2. The noise components after randomization.
3. The composite of the shared and identity-associated components.

For the session key and noise components, we set different leaf numbers in an access tree ranging from 10 to 100. According to our results, the time latency increases linearly from 0.25 seconds to 2.25 seconds for the decryption of the session key, and from 0.5 seconds to 4.5 seconds for the decryption of the noise components. For the decryption of the composite (Equations 16 and 17), we conducted 1000 independent tests and found that the average decryption time is 1.06 seconds.

### Related Work
#### Fine-Grained Access Control
Fine-grained data access control [10] allows each user’s identity to be flexibly associated with their permitted access targets. Attribute-based encryption (ABE) defines a user’s identity by their attribute set. Sahai and Waters first proposed this method [24] to exert access control over encrypted data. Goyal et al. later extended it to key-policy ABE (KP-ABE) [15], and Bethencourt et al. extended it to ciphertext-policy ABE (CP-ABE) [1].

In KP-ABE, the user’s secret key is associated with an access policy over attributes. The user can decrypt the ciphertext if and only if the attribute set of the ciphertext satisfies the access policy specified in their secret key. In CP-ABE, the ciphertext is associated with an access policy over attributes, and the attribute set generates the user’s secret/attribute key. The user can decrypt the ciphertext if and only if their attributes set satisfies the access policy specified in the ciphertext. The data owner can decide who has access to the encrypted data. Multiple ABE approaches have been proposed to implement secure data outsourcing [12], sharing [21], and keyword searching [16, 20]. However, these works only study how to control access to different data. Directly applying them to our access-precision problems could generate large overheads for data owners.

Recently, researchers have been combining ABE with homomorphic encryptions, which are most similar to ours [2, 6, 9, 14, 22, 23]. However, none of these works consider the homomorphic operation between a shared component and identity-associated components, where only the composite of the two types of components is accessible by an authorized user. The enlarged ciphertext size is also a problem in most of these works.

#### Homomorphic Encryptions
In our scheme, the process of combining the shared and identity-associated components relies on the support of homomorphism. Homomorphic encryption has been extensively studied in privacy-preserving computing. Partially or fully homomorphic encryption allows arithmetic operations on the cloud with the operation results disclosed [7, 13]. Leveraging these cryptographic primitives, various utility functions can be evaluated on untrusted nodes, including range search [27], keyword/string search [4, 11], genomic data search [5], image search [29], clustering [25], and image feature extraction [17], among others. Researchers have even proposed schemes that support multiple types of functions simultaneously with inter-operable operators [28], with the assistance of the data owner staying online. However, none of these approaches support fine-grained access control, i.e., they do not address how to differentiate data or its usage for different user identities.

### Conclusion
In this work, we present a cryptographic design that combines fine-grained access control with homomorphism. We design a decoupling technique that splits the ciphertext into a dynamically shared component and multiple identity-associated components. The user can combine the two components and reveal the corresponding composite in plaintext on the fly, if and only if their identity, denoted by the attribute set, satisfies the fine-grained access policy enacted by the data owner. Our algorithms enable data owners to precisely and efficiently control the form of their data revealed to the public in a fine-grained manner. We formally prove the security of our design using a game-based approach and test our algorithms on a commercial cloud platform, validating their performance in practice.

### References
[1] John Bethencourt, Amit Sahai, and Brent Waters. 2007. Ciphertext-policy attribute-based encryption. In IEEE Symposium on Security and Privacy (SP). IEEE, 321–334.
[2] Zvika Brakerski, David Cash, Rotem Tsabary, and Hoeteck Wee. 2016. Targeted homomorphic attribute-based encryption. In Theory of Cryptography Conference. Springer, 330–360.
[3] Carole Cadwalladr and Emma Graham-Harrison. 2018. Revealed: 50 million Facebook profiles harvested for Cambridge Analytica in major data breach. The Guardian 17 (2018).
[4] Ning Cao, Cong Wang, Ming Li, Kui Ren, and Wenjing Lou. 2014. Privacy-preserving multi-keyword ranked search over encrypted cloud data. IEEE Transactions on Parallel and Distributed Systems 25, 1 (2014), 222–233.
[5] Ke Cheng, Yantian Hou, and Liangmin Wang. 2018. Secure Similar Sequence Query on Outsourced Genomic Data. In Proceedings of the 2018 on Asia Conference on Computer and Communications Security (ASIACCS ’18). ACM, New York, NY, USA, 237–251. https://doi.org/10.1145/3196494.3196535
[6] Michael Clear and Ciarán McGoldrick. 2015. Multi-identity and Multi-key Leveled FHE from Learning with Errors. In Advances in Cryptology – CRYPTO 2015, Rosario Gennaro and Matthew Robshaw (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 630–656.
[7] Ronald Cramer, Ivan Damgård, and Jesper Nielsen. 2001. Multiparty computation from threshold homomorphic encryption. EUROCRYPT 2001 (2001), 280–300.
[8] Angelo De Caro and Vincenzo Iovino. 2011. JPBC: Java pairing-based cryptography. In IEEE Symposium on Computers and Communications (ISCC). IEEE, 850–855.
[9] W. Ding, Z. Yan, and R. Deng. 2017. Privacy-Preserving Data Processing with Flexible Access Control. IEEE Transactions on Dependable and Secure Computing (2017), 1–1. https://doi.org/10.1109/TDSC.2017.2786247
[10] David F. Ferraiolo, Ravi Sandhu, Serban Gavrila, D. Richard Kuhn, and Ramaswamy Chandramouli. 2001. Proposed NIST Standard for Role-based Access Control. ACM Trans. Inf. Syst. Secur. 4, 3 (Aug. 2001), 224–274.
[11] Benjamin Fuller, Mayank Varia, Arkady Yerukhimovich, Emily Shen, Ariel Hamlin, Vijay Gadepally, Richard Shay, John Darby Mitchell, and Robert K Cunningham. 2017. SoK: Cryptographically protected database search. In 2017 IEEE Symposium on Security and Privacy (SP). IEEE, 172–191.
[12] William C Garrison, Adam Shull, Steven Myers, and Adam J Lee. 2016. On the practicality of cryptographically enforcing dynamic access control policies in the cloud. In 2016 IEEE Symposium on Security and Privacy (SP). IEEE, 819–838. Stanford University.
[13] Craig Gentry. 2009. A fully homomorphic encryption scheme. Ph.D. Dissertation.
[14] Craig Gentry, Amit Sahai, and Brent Waters. 2013. Homomorphic encryption from learning with errors: Conceptually-simpler, asymptotically-faster, attribute-based. In Advances in Cryptology–CRYPTO 2013. Springer, 75–92.
[15] Vipul Goyal, Omkant Pandey, Amit Sahai, and Brent Waters. 2006. Attribute-based encryption for fine-grained access control of encrypted data. In Proceedings of the 13th ACM conference on Computer and communications security. ACM, 89–98.
[16] Kai He, Jun Guo, Jian Weng, Jiasi Weng, Joseph K Liu, and Xun Yi. 2018. Attribute-Based Hybrid Boolean Keyword Search over Outsourced Encrypted Data. IEEE Transactions on Dependable and Secure Computing (2018).
[17] Linzhi Jiang, Chunxiang Xu, Xiaofang Wang, Bo Luo, and Huaqun Wang. 2017. Secure outsourcing SIFT: Efficient and Privacy-preserving Image Feature Extraction in the Encrypted Domain. IEEE Transactions on Dependable and Secure Computing (2017).
[18] Taeho Jung, Xiang-Yang Li, Zhiguo Wan, and Meng Wan. 2015. Control cloud data access privilege and anonymity with fully anonymous attribute-based encryption. IEEE Transactions on Information Forensics and Security 10, 1 (2015), 190–199.
[19] Jonathan Katz and Yehuda Lindell. 2014. Introduction to modern cryptography, second edition. CRC press.
[20] H. Li, Y. Yang, T. H. Luan, X. Liang, L. Zhou, and X. S. Shen. 2016. Enabling Fine-Grained Multi-Keyword Search Supporting Classified Sub-Dictionaries over Encrypted Cloud Data. IEEE Transactions on Dependable and Secure Computing 13, 3 (May 2016), 312–325. https://doi.org/10.1109/TDSC.2015.2406704
[21] Ming Li, Shucheng Yu, Yao Zheng, Kui Ren, and Wenjing Lou. 2013. Scalable and secure sharing of personal health records in cloud computing using attribute-based encryption. IEEE Transactions on Parallel and Distributed Systems 24, 1 (2013), 131–143.
[22] Adriana López-Alt, Eran Tromer, and Vinod Vaikuntanathan. 2012. On-the-fly multiparty computation on the cloud via multikey fully homomorphic encryption. In Proceedings of the Forty-fourth Annual ACM Symposium on Theory of Computing (STOC ’12). ACM, New York, NY, USA, 1219–1234.
[23] Pratyay Mukherjee and Daniel Wichs. 2016. Two Round Multiparty Computation via Multi-key FHE. In Proceedings of the 35th Annual International Conference on Advances in Cryptology — EUROCRYPT 2016 - Volume 9666. Springer-Verlag New York, Inc., New York, NY, USA, 735–763.
[24] Amit Sahai and Brent Waters. 2005. Fuzzy identity-based encryption. In Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 457–473.
[25] Jaideep Vaidya and Chris Clifton. 2003. Privacy-preserving k-means clustering over vertically partitioned data. In Proceedings of the ninth ACM SIGKDD international conference on Knowledge discovery and data mining. ACM, 206–215.
[26] Zhiguo Wan, Jun’e Liu, and Robert H Deng. 2012. HASBE: A Hierarchical Attribute-Based Solution for Flexible and Scalable Access Control in Cloud Computing. IEEE Transactions on Information Forensics and Security 7, 2 (April 2012), 743–754. https://doi.org/10.1109/TIFS.2011.2172209
[27] B. Wang, M. Li, and H. Wang. 2016. Geometric Range Search on Encrypted Spatial Data. IEEE Transactions on Information Forensics and Security 11, 4 (2016), 704–719. https://doi.org/10.1109/TIFS.2015.2506145
[28] Wai Kit Wong, Ben Kao, David Wai Lok Cheung, Rongbin Li, and Siuming Yiu. 2014. Secure query processing with data interoperability in a cloud database environment. In Proceedings of the ACM SIGMOD International Conference on Management of Data. ACM, 1395–1406.
[29] Z. Xia, X. Wang, L. Zhang, Z. Qin, X. Sun, and K. Ren. 2016. A Privacy-Preserving and Copy-Deterrence Content-Based Image Retrieval Scheme in Cloud Computing. IEEE Transactions on Information Forensics and Security 11, 11 (Nov 2016), 2594–2608. https://doi.org/10.1109/TIFS.2016.2590944
[30] Shucheng Yu, Cong Wang, Kui Ren, and Wenjing Lou. 2010. Attribute based data sharing with attribute revocation. In Proceedings of the 5th ACM Symposium on Information, Computer and Communications Security. ACM, 261–270.

### Complexity Analysis
We use \( N \) to denote the number of noise, \( W \) as the average number of one user’s attributes, and \( X \) as the average number of leaves in an access tree.

- **Setup Algorithm**: Computes a master key \( mk \) and a system public key \( pk \) with computational complexity \( O(1) \).
- **Encrypt' Algorithm**: Yields constant overhead by encrypting \( C_m \) and \( P_{up} \).
- **Encrypt'' Algorithm**: The data owner (DO) chooses a polynomial \( p_x \) at each node \( x \) in each tree \( T_i, i \in [1, N] \) and \( T_\forall \), which is the dominating overhead with complexity \( O(N \cdot X) \). This overhead is one-time for each session. Note that optimizing the tree structure could further reduce the complexity, but this is not the focus of this paper.
- **Update Algorithm**: The DO needs to compute and send two ciphertexts \(\{\Delta C_m', E_k(P'_{up})\}\) to the cloud. The cloud needs one computation to generate \( C_m' \). Therefore, the update complexity at both the DO and cloud sides, as well as the communication overhead towards the cloud, are \( O(1) \).
- **KeyGenerate Algorithm**: Computes attribute keys from each user attribute in \( A_u \). The computational complexity is \( O(W) \).
- **Decrypt Algorithm**: The computational overhead is linear with the number of leaf nodes in each tree. Therefore, the complexity is \( O(X) \).

The complexity analysis is summarized in Table 2.

### Comparison with Traditional CP-ABE
As a comparison, we compute the complexity using the traditional CP-ABE scheme [1]. In this case, the DO encrypts each piece of noisy data under the corresponding access tree. When updating the data, the DO needs to encrypt all the updated noisy data before uploading to the cloud for storage. The cloud directly replaces the obsolete data with the new one. Therefore, the update complexity using the traditional CP-ABE approach is \( O(N \cdot X) \) at both the DO and the cloud sides.

### Table 2: Computational Complexity of the FAPC Algorithms
| Algorithms           | Complexity |
|----------------------|------------|
| FAPC.Setup           | \( O(1) \)  |
| FAPC.Encrypt'        | \( O(1) \)  |
| FAPC.Encrypt''       | \( O(N \cdot X) \) |
| FAPC.Update          | \( O(1) \)  |
| FAPC.KeyGenerate     | \( O(W) \)  |
| FAPC.Decrypt         | \( O(X) \)  |

### Security Analysis
In this section, we first formally define the security requirements. Then, we will prove that our FAPC scheme is secure through a reduction chain from a publicly recognized secure scheme.

#### B.1 Security Proof
1. **Correctness**:
   - If the user’s attribute set \( A_u \) satisfies a certain access tree \( T_i, i \in [1, N] \), they will first successfully decrypt the session key \( k \) encrypted with the traditional CP-ABE scheme, since the access tree \( T_\forall \) is satisfied by all authorized users.
   - The user can then obtain the corresponding \( P_{up} \) and \( A_{\tau_i} \) using the decryption algorithm. Finally, by Equation (17), the user will get the corresponding noisy data \( f'(m, \tau_i), i \in [1, N] \).
   - Otherwise, the CP-ABE.Decrypt algorithm will output null, even though the user may decrypt \( k \) (other authorized users that satisfy other trees \( T_j, j \neq i \)). Therefore, our scheme is correct since the user will obtain the authorized noisy data \( f'(m, \tau_i), i \in [1, N] \) if and only if their attribute set \( A_u \) satisfies the corresponding access tree \( T_i \).

2. **Scheme Security**:
   - **Proof Logic**: We denote \( P_\Pi \) as the problem to break the security of our scheme (defined in Section 3.1), \( P_\Omega \) and \( P_{\Omega'} \) as the problem to break the security of the traditional CP-ABE scheme and the problem to break the security of the traditional CP-ABE scheme with multiple encryptions, respectively. We can prove the security of our FAPC scheme by first reducing \( P_{\Omega'} \) to \( P_\Pi \), then proving the hardness of \( P_{\Omega'} \) based on the hardness of \( P_\Omega \).
   - Given that \( P_\Omega \) has been proven to be computationally hard [1, 26], we can prove the hardness of our problem \( P_\Pi \) through the reduction chain.

**Reduction from \( P_{\Omega'} \) to \( P_\Pi \)**: Here we construct the reduction from \( P_{\Omega'} \) to \( P_\Pi \).