### Load and Battery Consumption Under PA

Unexpected load and battery consumption were observed under the Paranoid Android (PA) system. To investigate, we profiled the tracer to identify its most resource-intensive functions. The top five functions are listed in Table 1. Compression, performed by `deflate slow`, consumes only 7.62% of the tracer's execution time, and no cryptographic function appears in the top results. In contrast, more than 65% of the execution time is spent on `ptrace` and `waitpid`.

`waitpid` is called continuously to retrieve events from the kernel. Every time a traced process enters or exits a system call, it is blocked, and an event is delivered to the tracer via `waitpid`. Additionally, `ptrace` is used at least once for each event to retrieve additional information, such as the system call number. These two calls result in a large number of context switches between the tracer, traced processes, and the kernel, contributing significantly to the overhead.

Similarly, `pread64` is used to copy data from the memory of traced processes, such as data returned by a system call.

We are confident that moving event reception and the initial part of event handling into the kernel would greatly improve performance. This is supported by the results in Figure 6, which show that even when tracing a single system call like `read`, using `ptrace` incurs a significant overhead compared to native execution. Conversely, tracing the same system call, including copying the returned data, within the kernel imposes no observable overhead. Future work on PA will focus on moving part of the implementation into the kernel.

### Related Work

The concept of decoupling security from execution has been explored in different contexts. Malkhi et al. [22] investigated the execution of Java applets on a remote server to protect end hosts. The code is executed on the remote server instead of the end host, with a design focused on transparently linking the end host browser to the remotely executing applet. Although conceptually similar, PA replicates rather than moves the actual execution, and the interaction with the operating environment is more intensive, requiring additional engineering.

Ripley [40] is another system that proposes the replication of an application on a server to automatically preserve its integrity. Unlike PA, Ripley focuses on distributed web 2.0 applications, particularly AJAX-based ones. Attacks are detected by comparing the results of the replica with the client's. A discrepancy indicates an attack, so Ripley relies on the two executions diverging. Furthermore, it does not address a broad range of attacks like PA and is not transparent to the application.

The idea of offloading execution from smartphones to the cloud was first proposed in CloneCloud [6]. The main focus of this work is the acceleration of CPU-intensive and low-interaction applications. While the authors recognize the potential for decoupling security from phones, they do not explore the effects of disconnected operation on security (e.g., the need for secure storage) or the cost of replication for the phone and server. Finally, CloneCloud is not always transparent to applications.

Decoupling security from smartphones was first explored in SmartSiren [4], which uses a more traditional anti-virus file-scanning security model. Synchronization and replay are less of an issue in SmartSiren compared to PA. Oberheide et al. [30] explore a design similar to SmartSiren, focusing on the scale and complexity of the cloud backend for supporting mobile phone file scanning and outlining some design challenges in terms of synchronization. Some of these challenges are common in the design of PA, and we demonstrate that such a design is feasible and useful. However, both approaches can only protect against a limited set of attack vectors.

Other work on smartphone security includes VirusMeter by Liu et al. [21], which identifies that traditional defenses do not perform well on smartphones due to their limited resources. They propose using power consumption levels to detect potentially malicious software. Their solution uses minimal resources but may produce false positives. Enck et al. address the issue of malicious applications downloaded on smartphones with Kirin [13], a system that automatically analyzes applications submitted to app stores for potentially malicious behavior. Kirin is orthogonal to our system and could be used in combination with PA.

Our architecture also shares similarities with BugNet [26], which consists of a memory-backed FIFO queue decoupled from the monitored applications, with data periodically flushed to the replica rather than to disk. We store significantly less information than BugNet, as the identical replica contains most of the necessary state.

### Conclusion

In this paper, we have discussed a new model for protecting mobile phones. These devices are increasingly complex, vulnerable, and attractive targets for attackers due to their broad application domain. Strong protection is essential, preferably using multiple and diverse attack detection measures. Our security model performs attack detection on a remote server in the cloud, where the execution of the software on the phone is mirrored in a virtual machine. In principle, there is no limit to the number of attack detection techniques that can be applied in parallel. Instead of running security measures locally, the phone records a minimal execution trace and transmits it to the security server, which faithfully replays the original execution.

The evaluation of a user-space implementation of our architecture, Paranoid Android, shows that transmission overhead can be kept well below 2.5 KiBps even during periods of high activity (browsing, audio playback), and virtually nothing during idle periods. Battery life is reduced by about 30%, but we show that it can be significantly improved by implementing the tracer within the kernel. We conclude that our architecture is suitable for protecting mobile phones and offers more comprehensive security than alternative models.

### Acknowledgments

This work has been supported by the European Commission through projects FP7-ICT-216026-WOMBAT and FP7-ICT-257007 SYSSEC. It also received support from the Prevention, Preparedness, and Consequence Management of Terrorism and other Security-related Risks Programme of the European Commission - Directorate-General Home Affairs. This publication reflects the views only of the author, and the Commission cannot be held responsible for any use which may be made of the information contained herein.

### References

[1] F. Bellard. QEMU, a fast and portable dynamic translator. In Proc. of USENIX’05, April 2005.
[2] M. Bellare, R. Canetti, and H. Krawczyk. Keying hash functions for message authentication. In Proc. of Crypto’96, pages 1–15, August 1996.
[3] BlackBerry, Inc. BlackBerry Enterprise Server. http://na.blackberry.com/eng/services/business/server/full/.
[4] J. Cheng, S. H. Wong, H. Yang, and S. Lu. SmartSiren: virus detection and alert for smartphones. In Proc. of MobiSys’07, pages 258–271, June 2007.
[5] J. Chow, T. Garfinkel, and P. M. Chen. Decoupling dynamic program analysis from execution in virtual environments. In Proc. of USENIX’08, pages 1–14, June 2008.
[6] B.-G. Chun and P. Maniatis. Augmented smartphone applications through clone cloud execution. In Proc. of HotOS XII, May 2009.
[7] A. T. W. I. company. Top 500 global sites. http://www.alexa.com/topsites.
[8] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou, L. Zhang, and P. Barham. Vigilante: End-to-end containment of internet worm epidemics. In Proc. of SOSP’05, October 2005.
[9] P. J. Courtois, F. Heymans, and D. L. Parnas. Concurrent control with “readers” and “writers”. Commun. ACM, 14(10):667–668, 1971.
[10] D. E. Denning. A lattice model of secure information flow. Commun. ACM, 19(5):236–243, 1976.
[11] G. W. Dunlap, S. T. King, S. Cinar, M. A. Basrai, and P. M. Chen. Revirt: Enabling intrusion analysis through virtual-machine logging and replay. In Proc. of OSDI’02, pages 211–224, December 2002.
[12] G. W. Dunlap, D. G. Lucchetti, M. A. Fetterman, and P. M. Chen. Execution replay of multiprocessor virtual machines. In Proc. of VEE ’08, pages 121–130, March 2008.
[13] W. Enck, M. Ongtang, and P. McDaniel. On lightweight mobile phone application certification. In Proc. of CCS, pages 235–245, 2009.
[14] F-Secure. “Sexy View” trojan on Symbian S60 3rd edition. http://www.f-secure.com/weblog/archives/00001609.html, February 2008.
[15] J. Griffin, S. Jha, and B. Miller. Efficient context-sensitive intrusion detection. In Proc. of NDSS’04, February 2004.
[16] Z. Guo, X. Wang, J. Tang, X. Liu, Z. Xu, M. Wu, M. F. Kaashoek, and Z. Zhang. R2: An application-level kernel for record and replay. In Proc. of OSDI, 2008.
[17] L. Hatton. Reexamining the fault density component size connection. Software, IEEE, 14(2):89–97, 1997.
[18] V. Kiriansky, D. Bruening, and S. P. Amarasinghe. Secure execution via program shepherding. In Proc. of the 11th USENIX Security Symposium, pages 191–206, August 2002.
[19] T. Leblanc and J. Mellor-Crummey. Debugging parallel programs with instant replay. IEEE Transactions on Computers, 36(4):471–482, 1987.
[20] G. Legg. The bluejacking, bluesnarfing, bluebugging blues: Bluetooth faces perception of vulnerability. http://www.wirelessnetdesignline.com/192200279?printableArticle=true, August 2005.
[21] L. Liu, G. Yan, X. Zhang, and S. Chen. VirusMeter: Preventing your cellphone from spies. In Proc. of RAID, pages 244–264, 2009.
[22] D. Malkhi and M. K. Reiter. Secure execution of Java applets using a remote playground. IEEE Trans. Softw. Eng., 26(12):1197–1209, 2000.
[23] P. Montesinos, M. Hicks, S. T. King, and J. Torrellas. Capo: a software-hardware interface for practical deterministic multiprocessor replay. In Proc. of ASPLOS ’09, pages 73–84, March 2009.
[24] H. Moore. Cracking the iPhone (part 1). http://blog.metasploit.com/2007/10/cracking-iphone-part-1.html, October 2007.
[25] R. Naraine. Google Android vulnerable to drive-by browser exploit. http://blogs.zdnet.com/security/?p=2067, October 2008.
[26] S. Narayanasamy, G. Pokam, and B. Calder. BugNet: Continuously recording program execution for deterministic replay debugging. SIGARCH Comput. Archit. News, 33(2):284–295, 2005.
[27] J. Newsome and D. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proc. of NDSS’05, February 2005.
[28] Niacin and Dre. The iPhone/iTouch TIFF exploit is now officially released. Available at http://toc2rta.com/?q=node/23, October 2007.
[29] J. Oberheide, E. Cooke, and F. Jahanian. CloudAV: N-version antivirus in the network cloud. In Proc. of the 17th USENIX Security Symposium, San Jose, CA, July 2008.
[30] J. Oberheide, K. Veeraraghavan, E. Cooke, J. Flinn, and F. Jahanian. Virtualized in-cloud security services for mobile devices. In Proc. of MobiVirt ’08, pages 31–35, June 2008.
[31] oCERT. CVE-2009-0475: OpenCORE insufficient boundary checking during MP3 decoding. http://www.ocert.org/advisories/ocert-2009-002.html, January 2009.
[32] A. Ozment and S. E. Schechter. Milk or wine: Does software security improve with age? In Proc. of the 15th USENIX Security Symposium, July 2006.
[33] I. PalmSource. OpenBinder. http://www.angryredplanet.com/~hackbod/openbinder/docs/html/index.html, 2005.
[34] G. Portokalidis, P. Homburg, K. Anagnostakis, and H. Bos. Paranoid Android: Zero-day protection for smartphones using the cloud. Technical report, Vrije Universiteit Amsterdam, 2010.
[35] G. Portokalidis, A. Slowinska, and H. Bos. Argos: an emulator for fingerprinting zero-day attacks. In Proc. of ACM EuroSys, April 2006.
[36] N. Provos. Improving host security with system call policies. In Proc. of the 12th USENIX Security Symposium, August 2003.
[37] M. Ronsse and K. De Bosschere. RecPlay: a fully integrated practical record/replay system. ACM Trans. Comput. Syst., 17(2):133–152, 1999.
[38] M. Russinovich and B. Cogswell. Replay for concurrent non-deterministic shared-memory applications. In Proc. of PLDI ’96, pages 258–266, May 1996.
[39] V3.co.uk. BlackBerry 'kill pill' vital for IT security. http://www.v3.co.uk/vnunet/news/2159105/blackberry-kill-pill-vital.
[40] K. Vikram, A. Prateek, and B. Livshits. Ripley: automatically securing web 2.0 applications through replicated execution. In Proc. of CCS, pages 173–186, 2009.
[41] J. Xu and N. Nakka. Defeating memory corruption attacks via pointer taintedness detection. In Proc. of DSN ’05, pages 378–387, June 2005.
[42] M. Xu, R. Bodik, and M. D. Hill. A "flight data recorder" for enabling full-system multiprocessor deterministic replay. SIGARCH Comput. Archit. News, 31(2):122–135, 2003.