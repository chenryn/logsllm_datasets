### Implicit Flows and Taint Analysis in Android Applications

#### Overview of Implicit Flows
- **ImplicitFlow1**
  - **SinkInNativeLibCode**
  - **SourceInNativeCode**
- **Reflection_ICC**
  - **OnlyIntent**
  - **OnlyTelephony**
  - **OnlyTelephony_Dynamic**
  - **OnlyTelephony_Reverse**
- **ICCBench**
  - **IccTargetFinding**
    - **OnlyTelephony_Substring**
    - **icc_dynregister1**
    - **icc_dynregister2**
    - **icc_explicit1**
    - **icc_implicit_mix1**

#### Sources and Sinks
- **Sources:**
  - `android.telephony.TelephonyManager.getDeviceId()`
  - `mod.ndk.ActMain.cFuncGetIMEI(android.content.Context)`
- **Sinks:**
  - `android.util.Log.i(java.lang.String,java.lang.String)`
  - `android.telephony.SmsManager.sendTextMessage(java.lang.String, ...)`
  - `java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])`

#### False Negative Taint Flows Detected by ConDySTA
- **Table II: False Negative Taint Flows**
  - **App Package Name:**
    - `com.amazon.mShop.android.shopping`
    - `com.dianxinos.dxbs`
    - `com.disney.WMWLite`
    - `com.forthblue.pool`
    - `com.gameloft.android.ANMP.GloftDMHM`
    - `com.mxtech.videoplayer.ad`
    - `com.pinterest`
    - `com.sgiggle.production`
    - `com.tubitv`
    - `com.waze`
    - `org.mozilla.firefox`
    - `paint.by.number.pixel.art.coloring.drawing.puzzle`
  - **Total Size (KLOC):** 10881, 3034, 1489, 1778, 2540, 4044, 5534, 6015, 7660, 2996, 2155, 4795, ...
  - **Taint Flows Detected:**
    - **FlowDroid:** 2(0), 15(6), 2(2), 2(0), 3(0), 1(1), 4(4), 1(0), 3(2), 1(0), 4(4), 1(0)
    - **DySTA (Dynamic):** 25, 77, 11, 22, 3, 4, 2, 1, 5, 1, 74, 14, ...
    - **ConDySTA:** 1068, 1, 1, 2, 3, 20, 3, 0, 0, 0, 1, 24, 0, ...
  - **Execution Time (s):**
    - **DySTA + ConDySTA:** 25, 4266, 357, 1630, 29, 574, 95, 44, 38, 16, 18, 23, ...
    - **FlowDroid:** 257, 1162, 131, 270, 18, 27, 138, 32, 273, 115, 1265, 64

#### Evaluation on Real-World Apps
- **ReproDroid Benchmark Compatibility:**
  - Five out of six tools (Amandroid, DidFail, DroidSafe, IccTA, and DIALDroid) could not be applied to the real-world app dataset.
  - **Reasons:**
    - Four tools do not support recent apps (up to Android API level 19).
    - One tool (DIALDroid) targets only inter-app taint flows.
  - **Benchmarking:**
    - ConDySTA was benchmarked against FlowDroid using ReproDroidâ€™s compatible test set.
    - **Comparison with FlowDroid:**
      - **Taint Flows Counting:** Multiple taint flows between the same pair of source and sink locations are counted as one taint flow.
      - **Configuration:** FlowDroid with context sensitivity and least false negatives.
      - **Sources and Sinks:** Same set used for both ConDySTA and FlowDroid.
      - **User Information Types:**
        - Full name, user name, and password provided through `EditText.getText()` method invocations.

- **Table III: Taint Flows Detected by ConDySTA in Real-World Apps**
  - **Columns:**
    - App Name, Size (KLOC), Taint Flows (FlowDroid), Additional Taint Flows (DySTA), Additional Taint Flows (ConDySTA), Execution Time (s)
  - **Results:**
    - **Additionally Detected Flows Over FlowDroid:**
      - Among 100 apps, FlowDroid detected 281 taint flows, while ConDySTA detected 39 more.
      - 19 of these 39 were confirmed with dynamic taint analysis, and 8 were manually confirmed.
      - These 39 flows are distributed over 12 different apps.
    - **ConDySTA vs. DySTA:**
      - ConDySTA reduced 1,029 context-mismatched taint flows from 49 apps.
      - Context-mismatched taint flows may not necessarily be fake but should be removed if not inferred from observed facts.
    - **Comparison with Pure Dynamic Taint Analysis:**
      - 19 out of 39 taint flows detected by ConDySTA can be detected by dynamic taint analysis.
      - The remaining 20 cannot be detected, showing the value of static taint analysis from intermediate sources.
    - **Execution Time:**
      - ConDySTA's execution time is within 5,000 seconds, similar to FlowDroid.
      - DySTA + ConDySTA sometimes takes longer due to additional intermediate sources.
    - **Qualitative Analysis:**
      - 23 out of 39 taint flows are in heavily obfuscated apps.
      - 6 flows missed by FlowDroid due to data flowing through the network.
      - 4 flows not detected due to data flowing to local cache files.
      - 6 flows not detected due to flawed modeling of `HashMap.putAll()`.

#### Threats to Validity
- **Internal Validity:**
  - Value-based taint analysis may lead to coincident string matches.
  - Mitigated by using complicated profile data and manual confirmation.
- **External Validity:**
  - Subject apps' size and variety.
  - Mitigated by considering both a large existing benchmark and top real-world Android apps.

#### Discussion
- **Generality on Dynamic Taint Analysis:**
  - ConDySTA can use the output of any propagation-based dynamic taint analysis.
  - Can handle value-based dynamic taint analysis by using system stack traces at intermediate sources.
- **Generality on Static Taint Analysis:**
  - ConDySTA uses FlowDroid for its robustness and adoption in downstream research.
  - DySTA integrates with static taint analysis by providing intermediate sources.
  - ConDySTA encodes calling context into the IFDS framework, allowing integration with broader categories of static taint analyses.

#### Related Works
- **Taint Analyses for Android:**
  - Our approach supplements static taint analysis with dynamic taint analysis to address unsoundness and improve detection accuracy.