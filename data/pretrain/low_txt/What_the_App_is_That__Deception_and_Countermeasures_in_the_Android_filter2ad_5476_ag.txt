### VIII. RELATED WORK

As discussed in the introduction, previous research has shed light on the problem of GUI confusion attacks in Android. Specifically, [3] provides an overview of tapjacking attacks, while [4] focuses on tapjacking against WebViews, which are graphical elements used to display web content in Android. Felt et al. [5] examine phishing attacks on mobile devices that result from control transfers, similar to the "App Switching" attacks we described. Chen et al. [6] present a method for inferring the UI state from unprivileged apps and provide examples of such attacks.

Our paper builds on these existing techniques by systematizing known exploits and introducing new attack vectors. We also validated the effectiveness of these attacks through a user study. Additionally, we propose two general defense mechanisms and evaluate their effectiveness.

Fernandes et al. [9] introduce a GUI defense mechanism focused on keyboard input, called "AuthAuth," which enhances the system keyboard by displaying a user-defined image and the app name and icon. Our proposed defense system employs a similar "UI-user shared secret" mechanism, where users select an image known only to the OS and the user, making it unspoofable by malicious apps. However, our approach differs in its implementation and the information presented to the user. For example, as shown in Figure 4, app names and icons are not reliable trust indicators, as they can be easily spoofed. Our work establishes a root of trust with the app author and extends the covered attack surface by considering more scenarios and methods. We secure all user interactions, not just keyboard input, because users interact with apps in various ways, such as through custom PIN-entry forms or touch-friendly methods.

Other research efforts focus on analyzing Android malware. Zhou et al. [22] conducted a systematic study of current malware, while other studies, such as [14] and [15], focus on specific techniques like repackaging, where malware authors inject malicious functionality into well-known, benign-looking Android applications. This technique can be combined with our attack vectors to mimic the GUI of victim apps.

Roesner et al. [28] studied the security implications of embedded user interfaces in Android, focusing on the common practice of embedding graphical elements created by included libraries. Their work is related and complementary to ours, as they focus on how users interact with different elements within the same app, while we focus on interactions across different apps.

Felt et al. [29] performed a usability study to evaluate how users understand permission information during app installation. They found that current permission warnings are not helpful for most users and provided recommendations for improvement. Aurasium [30] also explored modifications to how permissions are displayed and enforced. Our work shares the goal of providing users with more information about the system's status, though we address a different threat.

Several studies have investigated how to present security-related information and error messages in browsers, both generally [31]–[33] and specifically for HTTPS [34]–[38]. Akhawe et al. [38] showed that proper HTTPS security warning messages can prevent users from interacting with malicious websites. These findings informed our proposed defense mechanism. However, other studies have indicated that indicators are not always effective. Over the years, the situation has improved in browsers, as seen in the evolution from the almost-hidden yellow lock in Internet Explorer 6 [37] to the more prominent indicators in modern browsers (see Figure 1). We believe our solution could benefit from an EV-style presentation of the app name, along with a lock and increased screen area. Effectively communicating the full security status of user interactions remains an open problem.

Phishing protection has been extensively studied in web browsers, often using blacklists like Google’s SafeBrowsing [42]. Our work complements these approaches by exploring GUI confusion attacks that are not possible in web browsers.

Finally, the problem of presenting a trustworthy GUI has been studied and implemented in desktop operating systems, either through special key combinations [43] or window decorations [44]. Given the limited screen space and controls on mobile devices, applying these solutions in an unobtrusive way would be challenging.

### IX. CONCLUSION

In this paper, we analyzed the various ways in which Android users can be confused into misidentifying an app. We categorized known attacks and disclosed novel ones that can be used to confuse users and mount stealthy phishing and privacy-invading attacks.

We developed a tool to study how the main Android GUI APIs can be exploited for such attacks, performing a full state exploration of API parameters and detecting problematic cases. Additionally, we developed a two-layered defense. At the market level, we created a tool that uses static analysis to identify code in apps that could be leveraged for GUI confusion attacks, and we evaluated its effectiveness by analyzing both malicious and popular benign applications.

To address underlying user interface limitations, we presented an on-device defense system designed to improve users' ability to judge the impact of their actions while maintaining full app functionality. By associating reliable author names with apps and presenting them in a familiar way, similar to how web browsers present page security information, we aim to enhance user awareness.

Finally, we conducted a user study demonstrating that our on-device defense improves users' ability to notice and respond to attacks.

### ACKNOWLEDGMENTS

We would like to thank all the participants in our user study for their valuable and detailed feedback.

This material is based upon work supported by DHS under Award No. 2009-ST-061-CI0001, by NSF under Award No. CNS-1408632, and by Secure Business Austria. Any opinions, findings, and conclusions or recommendations expressed in this publication are those of the authors and do not necessarily reflect the views of DHS, NSF, or Secure Business Austria.

This material is also based on research sponsored by DARPA under agreement number FA8750-12-2-0101. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of DARPA or the U.S. Government.

### REFERENCES

[1] comScore, “The U.S. Mobile App Report,” http://www.comscore.com/Insights/Presentations-and-Whitepapers/2014/The-US-Mobile-App-Report, 2014.
[2] ESET, “Trends for 2013,” http://www.eset.com/us/resources/white-papers/Trends-for-2013-preview.pdf.
[3] M. Niemietz and J. Schwenk, “UI Redressing Attacks on Android Devices,” Black Hat Abu Dhabi, 2012.
[4] T. Luo, X. Jin, A. Ananthanarayanan, and W. Du, “Touchjacking Attacks on Web in Android, iOS, and Windows Phone,” in Proceedings of the 5th International Conference on Foundations and Practice of Security (FPS). Berlin, Heidelberg: Springer-Verlag, 2012, pp. 227–243.
[5] A. P. Felt and D. Wagner, “Phishing on mobile devices,” Web 2.0 Security and Privacy, 2011.
[6] Q. A. Chen, Z. Qian, and Z. M. Mao, “Peeking into Your App Without Actually Seeing It: UI State Inference and Novel Android Attacks,” in Proceedings of the 23rd USENIX Security Symposium. Berkeley, CA, USA: USENIX Association, 2014, pp. 1037–1052.
[7] Bank of America, “SiteKey Security,” https://www.bankofamerica.com/privacy/online-mobile-banking-privacy/sitekey.go.
[8] Yahoo, “Yahoo Personalized Sign-In Seal,” https://protect.login.yahoo.com.
[9] E. Fernandes, Q. A. Chen, G. Essl, J. A. Halderman, Z. M. Mao, and A. Prakash, “TIVOs: Trusted Visual I/O Paths for Android,” University of Michigan CSE Technical Report CSE-TR-586-14, 2014.
[10] TrendLabs, “Tapjacking: An Untapped Threat in Android,” http://blog.trendmicro.com/trendlabs-security-intelligence/tapjacking-an-untapped-threat-in-android/, December 2012.
[11] TrendLabs, “Bypassing Android Permissions: What You Need to Know,” http://blog.trendmicro.com/trendlabs-security-intelligence/bypassing-android-permissions-what-you-need-to-know/, November 2012.
[12] S. Jana and V. Shmatikov, “Memento: Learning Secrets from Process Footprints,” in Proceedings of the IEEE Symposium on Security and Privacy (SP), May 2012, pp. 143–157.
[13] S. Hanna, L. Huang, E. Wu, S. Li, C. Chen, and D. Song, “Juxtapp: A Scalable System for Detecting Code Reuse Among Android Applications,” in Proceedings of the 9th International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA). Berlin, Heidelberg: Springer-Verlag, 2012, pp. 62–81.
[14] W. Zhou, Y. Zhou, X. Jiang, and P. Ning, “Detecting Repackaged Smartphone Applications in Third-party Android Marketplaces,” in Proceedings of the Second ACM Conference on Data and Application Security and Privacy (CODASPY). New York, NY, USA: ACM, 2012, pp. 317–326.
[15] W. Zhou, X. Zhang, and X. Jiang, “AppInk: Watermarking Android Apps for Repackaging Deterrence,” in Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security (ASIA CCS). New York, NY, USA: ACM, 2013, pp. 1–12.
[16] P. De Ryck, N. Nikiforakis, L. Desmet, and W. Joosen, “TabShots: Client-side Detection of Tabnabbing Attacks,” in Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security (ASIA CCS). New York, NY, USA: ACM, 2013, pp. 447–456.
[17] Google, “Using Immersive Full-Screen Mode,” https://developer.android.com/training/system-ui/immersive.html.
[18] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, “An Empirical Study of Cryptographic Misuse in Android Applications,” in Proceedings of the 2013 ACM SIGSAC Conference on Computer and Communications Security (CCS). New York, NY, USA: ACM, 2013, pp. 73–84.
[19] A. Desnos and G. Gueguen, “Android: From reversing to decompilation,” Black Hat Abu Dhabi, 2011.
[20] M. Weiser, “Program slicing,” in Proceedings of the 5th international conference on Software engineering. IEEE Press, 1981, pp. 439–449.
[21] R. Pandita, X. Xiao, W. Yang, W. Enck, and T. Xie, “WHYPER: Towards Automating Risk Assessment of Mobile Applications,” in Proceedings of the 22nd USENIX Security Symposium. Berkeley, CA, USA: USENIX Association, 2013, pp. 527–542.
[22] Y. Zhou and X. Jiang, “Dissecting Android Malware: Characterization and Evolution,” in Proceedings of the IEEE Symposium on Security and Privacy (SP), May 2012, pp. 95–109.
[23] R. Unuchek, “The Android Trojan Svpeng Now Capable of Mobile Phishing,” http://securelist.com/blog/research/57301/the-android-trojan-svpeng-now-capable-of-mobile-phishing/, November 2013.
[24] CA/Browser Forum, “Guidelines for the Issuance and Management of Extended Validation Certificates,” http://cabforum.org/wp-content/uploads/Guidelines-v1-4-3.pdf, 2013.
[25] Google, “Featured, Staff Picks, Collections, and Badges,” https://developer.android.com/distribute/googleplay/about.html#featured-staff-picks.
[26] J. Clark and P. van Oorschot, “SoK: SSL and HTTPS: Revisiting Past Challenges and Evaluating Certificate Trust Model Enhancements,” in Proceedings of the IEEE Symposium on Security and Privacy (SP), May 2013, pp. 511–525.
[27] A. Kittur, E. H. Chi, and B. Suh, “Crowdsourcing User Studies with Mechanical Turk,” in Proceedings of the SIGCHI Conference on Human Factors in Computing Systems. New York, NY, USA: ACM, 2008, pp. 453–456.
[28] F. Roesner and T. Kohno, “Securing Embedded User Interfaces: Android and Beyond,” in Proceedings of the 22nd USENIX Security Symposium. Berkeley, CA, USA: USENIX Association, 2013, pp. 97–112.
[29] A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wagner, “Android Permissions: User Attention, Comprehension, and Behavior,” in Proceedings of the Eighth Symposium On Usable Privacy and Security (SOUPS). New York, NY, USA: ACM, 2012, pp. 3:1–3:14.
[30] R. Xu, H. Saïdi, and R. Anderson, “Aurasium: Practical Policy Enforcement for Android Applications,” in Proceedings of the 21st USENIX Security Symposium. Berkeley, CA, USA: USENIX Association, 2012, pp. 27–27.
[31] Z. E. Ye and S. Smith, “Trusted Paths for Browsers,” in Proceedings of the 11th USENIX Security Symposium. Berkeley, CA, USA: USENIX Association, 2002, pp. 263–279.
[32] A. Neupane, N. Saxena, K. Kuruvilla, M. Georgescu, and R. Kana, “Neural Signatures of User-Centered Security: An fMRI Study of Phishing and Malware Warnings,” in Proceedings of the 21st Annual Network and Distributed System Security Symposium (NDSS), 2014.
[33] Y. Niu, F. Hsu, and H. Chen, “iPhish: Phishing Vulnerabilities on Consumer Electronics.” in Proceedings of the 1st Conference on Usability, Psychology, and Security (UPSEC), 2008.
[34] J. Sunshine, S. Egelman, H. Almuhimedi, N. Atri, and L. F. Cranor, “Crying Wolf: An Empirical Study of SSL Warning Effectiveness,” in Proceedings of the 18th USENIX Security Symposium. Berkeley, CA, USA: USENIX Association, 2009, pp. 399–416.
[35] J. Lee, L. Bauer, and M. L. Mazurek, “The Effectiveness of Security Images in Internet Banking,” Internet Computing, IEEE, vol. 19, no. 1, pp. 54–62, Jan 2015.
[36] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner, B. Freisleben, and M. Smith, “Why Eve and Mallory Love Android: An Analysis of Android SSL (in)Security,” in Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS). New York, NY, USA: ACM, 2012, pp. 50–61.
[37] S. Schechter, R. Dhamija, A. Ozment, and I. Fischer, “The Emperor’s New Security Indicators,” in Proceedings of the IEEE Symposium on Security and Privacy (SP), May 2007, pp. 51–65.
[38] D. Akhawe and A. P. Felt, “Alice in Warningland: A Large-scale Field Study of Browser Security Warning Effectiveness,” in Proceedings of the 22nd USENIX Security Symposium. Berkeley, CA, USA: USENIX Association, 2013, pp. 257–272.
[39] N. Chou, R. Ledesma, Y. Teraguchi, D. Boneh, and J. C. Mitchell, “Client-side defense against web-based identity theft,” in Proceedings of the 11th Annual Network and Distributed System Security Symposium (NDSS), 2004.
[40] R. Dhamija and J. D. Tygar, “The Battle Against Phishing: Dynamic Security Skins,” in Proceedings of the Symposium On Usable Privacy and Security (SOUPS). New York, NY, USA: ACM, 2005, pp. 77–88.
[41] E. Kirda and C. Kruegel, “Protecting users against phishing attacks with AntiPhish,” in Proceedings of the Computer Software and Applications Conference (COMPSAC), vol. 1, July 2005, pp. 517–524 Vol. 2.
[42] Google, “Safe Browsing,” http://www.google.com/transparencyreport/safebrowsing/.
[43] D. Clercq and Grillenmeier, Microsoft Windows Security Fundamentals (Chapter 5.2.1), Connecticut, USA: Digital Press, October 2006.
[44] J. Rutkowska, “Qubes OS Architecture (Section 5.3),” http://files.qubes-os.org/files/doc/arch-spec-0.3.pdf, January 2010.