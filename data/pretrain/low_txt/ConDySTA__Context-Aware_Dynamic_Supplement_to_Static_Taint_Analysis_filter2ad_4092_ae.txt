### Dynamic Taint Analysis and Its Relation to Static Techniques

Dynamic taint analysis is closely related to existing static and dynamic taint analysis techniques. In this discussion, we focus on Android due to the extensive body of work in this area. FlowDroid [3] is a state-of-the-art static information flow analysis tool for Android applications. Other notable static analysis tools for Android include CHEX [34], LeakMiner [35], and ScanDroid [36].

- **CHEX [34]**: Detects component hijacking vulnerabilities by tracking taints between externally accessible interfaces and sensitive sources or sinks.
- **LeakMiner [35]**: An early context-insensitive information flow analysis technique for detecting privacy leaks in Android apps.
- **ScanDroid [36]**: Tracks taint flows across multiple apps and identifies privacy leaks into other applications.

Additionally, there are dynamic taint analysis techniques such as TaintDroid [2] and CopperDroid [37], which perform OS-level or application-level dynamic taint propagation. TaintArt [26] and TaintMan [28] extend dynamic taint analysis to support the Android RunTime (ART), which uses ahead-of-time compilation and replaces the previous virtual-machine-based Dalvik.

- **PrivacyOracle [21]**: Uses differential analysis of tainted values to perform dynamic taint analysis on black-box systems without instrumenting the application or the underlying OS.
- **Tripp et al. [38]**: Utilize Bayesian reasoning to determine if an information release at a sink point represents a privacy leak, based on the distance between the information about to be released and the original sensitive data.
- **Continella et al. [39]**: Propose a black-box analysis tool to detect privacy leaks in mobile apps by analyzing network traffic.

All these taint analyses, whether static or dynamic, have their limitations. ConDySTA addresses these limitations by integrating dynamic taint analysis results into static taint analysis, thereby leveraging the strengths of both approaches and accommodating future developments in taint analysis.

### Addressing Practical Unsoundness in Static Analysis

Previous research has highlighted the practical unsoundness of static analysis. Researchers from Coverity [40] discussed the challenges of applying static analysis to real-world scenarios, noting that static inaccessibility to code is a major challenge. Various dynamic supplements to static analysis have been proposed in academia:

- **Reflection Handling**:
  - **Livshits et al. [42]**: Proposed a method to statically infer information about reflective call sites from program code.
  - **TamiFlex [16]**: Performs dynamic analysis to record destinations of reflection calls and uses these records to supplement the program call graph.
  - **DroidRA [43]**: Uses static constant propagation to estimate potential reflection call destinations in Android apps.

- **Dynamically Loaded/Generated Code**:
  - **Wei and Ryder [44]**: Developed blended taint analysis for JavaScript, summarizing dynamically generated code from dynamic analysis output and performing static taint analysis based on the summaries.
  - **Averroes [45]**: Generates mock libraries with analysis summaries to replace missing libraries.
  - **Dufour [46]**: Collects calling structure data at runtime and feeds it into static method-escape analysis for more efficient analysis of complex code portions.
  - **PRuby [47]**: A static type inference system for Ruby that uses dynamic profiles to handle dynamic language features like `send`, `require`, and `eval`.

ConDySTA differs from these works by not being specific to any type of blocker and can combine off-the-shelf static and dynamic taint analysis. This flexibility is an important advantage when applied in practice, as real-world blockers can vary significantly from the predefined blockers considered in ReproDroid.

### Static Supplements to Dynamic Analyses

The third category of research efforts uses static analysis results to guide or supplement dynamic analysis, enhancing efficiency and supporting certain code features. For example:

- **Vogt et al. [48]**: Proposed a dynamic taint analysis framework for monitoring sensitive information flows within web browsers, complemented by static analysis to detect indirect control flow dependencies.
- **Concolic Analyses [49]**: Generate test cases by statically analyzing dependencies among elements on the executed trace.
- **Christakis et al. [53]**: Use static analysis to identify verified paths and guide dynamic execution to unverified paths.
- **Zheng et al. [54]**: Use static analysis to collect activity paths towards sensitive APIs and then use dynamic analysis to trigger the UI activity path.

Other works use static analysis to reduce runtime checks and overhead. For instance:

- **Rhodes et al. [55]**: Used static analysis to reduce runtime checks for data racing by coalescing checks and compressing shadow locations.
- **Sengupta et al. [56]**: Proposed EnfoRSer, which partitions code into statically bounded regions and checks for atomic execution at runtime.
- **HARVEST [59]**: Extracts runtime values in the presence of obfuscation and anti-analysis techniques by statically collecting program slices and removing conditional statements to avoid anti-analysis features.
- **Wong et al. [60]**: Detected and reversed language-based obfuscation via dynamic instrumentation.
- **Ahmand et al. [61]**: Automatically triggered methods of interest using Inter Component Communications (ICC) and extracted runtime values of reflection and encrypted strings.
- **Xia et al. [62]**: Reduced false positives in static analysis by verifying detected leaks through approximated dynamic analysis.

Compared to these efforts, ConDySTA uses dynamic analysis results to alleviate practical unsoundness in static analysis and injects dynamic context into static taint analysis.

### Conclusion

In this paper, we explored the use of dynamic taint analysis to supplement static taint analysis, reducing false negatives. We addressed the potential loss of context sensitivity and developed a hybrid context matching mechanism to retain it. We implemented ConDySTA for value-based dynamic taint analysis as an augmentation for FlowDroid and evaluated it on the ReproDroid benchmark and 100 top Android apps. Our evaluation showed that ConDySTA reduced 12 out of 28 common false negatives present in all existing tools from ReproDroid and detected 39 additional taint flows from 100 apps that were undetectable by FlowDroid. Context-sensitivity preservation helped remove all nine false positives and 1,029 context-mismatching taint flows reported by the baseline solution DySTA.

We believe that using dynamic analysis to reduce false positives in static analysis is promising. Future work includes evaluating ConDySTA on a larger set of apps, combining it with other dynamic and static taint analyses, and exploring techniques for guiding dynamic executions through blockers to further reduce false negatives in static analysis.

### Acknowledgment

This work is supported in part by NSF Awards NSF-1846467, NSF-1736209, NSF-2007718, and NSF-1948244.