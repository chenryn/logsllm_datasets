## 主分片与复制分片之间的交互

为了更好地说明主分片和复制分片是如何在集群中进行交互的，我们将以一个具有三个节点的集群为例。假设该集群包含一个名为`bblogs`的索引，此索引配置有两个主分片，并且每个主分片都配有两份复制分片。根据Elasticsearch的设计原则，相同的分片（无论是主分片还是其副本）不会被放置在同一物理节点上。因此，我们的示例集群布局如下所示：
![由三个节点构成、含单一索引的集群](https://raw.githubusercontent.com/looly/elasticsearch-definitive-guide-cn/master/images/elas_0401.png)

在此架构下，用户可以向集群中的任一节点发送查询或更新请求；事实上，每个节点都能够处理任何形式的数据操作请求。此外，每个节点都保存了关于整个集群状态的信息，包括但不限于哪些文档存储在哪一个具体的分片上以及这些分片又分布在哪些节点之间。基于此信息，接收到来自客户端的请求后，即使目标数据并不直接存在于该节点上，它也能够将请求正确地转发给相应的负责节点。

例如，在接下来的部分里，我们假定所有的请求都将通过`Node 1`来进行传递，此时我们可以称`Node 1`为**协调节点(coordinating node)**。

> **小贴士**:
>
> 在实际应用中，建议采用轮询方式来轮流向各个节点发起请求，这样做有助于实现负载均衡，避免因持续对某单一节点施加压力而导致的性能瓶颈问题。