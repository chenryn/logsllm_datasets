### Number of Exploitable Violations

How many of the remaining violations correspond to exploitable vulnerabilities?

### MiMoSA's Performance

MiMoSA was able to identify all known vulnerabilities and discovered several new ones. Specifically, regarding multi-module data-flow vulnerabilities, there was only one false positive. In the MyEasyMarket application, the PHP variable `REMOTE_ADDR` is saved in the database and later printed to the user. Although this variable is never sanitized, it is automatically set to the client’s IP address by the PHP engine. Therefore, it can only contain a limited range of valid values (numbers and dots), which do not allow an attacker to exploit the application.

### Workflow Violations

MiMoSA also reported several violations of the intended workflow of the web applications. While most of these violations corresponded to anomalous paths (e.g., directly jumping from the login to the logout page), some were confirmed to be actual vulnerabilities that could be exploited to gain unauthorized access to restricted pages.

### Analysis Phases

The inter-module analysis phase is the most time-consuming, while the intra-module analysis is more fragile due to the approximations introduced by the static analysis techniques. Any imperfection in this phase can lead to an increase in both false positives and false negatives. For example, during the construction of intended paths, we observed that some views were isolated, with no connection to any other part of the application. This was likely due to errors in view extraction, such as missing links or incorrect pre-condition predicates.

### Evaluation of Intra-Module Analysis

To better test the accuracy of our intra-module analysis and evaluate its impact on the final results, we manually analyzed the output of each step of the view extraction phase for the SimpleCMS application. The results are shown in Table 4. MiMoSA achieved high accuracy in extracting database operations, links, post-conditions, and sinks. The rate of unknown conditions, i.e., pre-conditions that MiMoSA was unable to correctly reconstruct, is reasonable given the use of static analysis techniques.

In this application, the number of generated views was significantly higher than the number of views actually present in the application code. This discrepancy is due to two main reasons:
1. **Infeasible Paths**: MiMoSA might generate views corresponding to infeasible paths, such as those that traverse nodes with conflicting conditions. These views do not affect the final results since they are never entered during the detection phase.
2. **Duplicate Views**: MiMoSA can generate duplicate views with different but equivalent pre-conditions. While this may lead to inaccuracy, it primarily slows down the path generation phase.

### Related Work

#### Intrusion Detection and Application Firewalls
We briefly mentioned some recent works in intrusion detection and application firewalls that focus on detecting and blocking web-based attacks. Since our work focuses on vulnerability analysis, we will not review these works further.

#### Vulnerability Analysis
Several recent works in the area of vulnerability analysis of web-based applications use taint propagation analysis. Most of these approaches target specific types of vulnerabilities in PHP [7, 9, 10, 22] or Java [6, 14].

- **WebSSARI** [7]: One of the first tools to apply static taint propagation analysis to find security vulnerabilities in PHP. It targets cross-site scripting, SQL injection, and general script injection.
- **Xie and Aiken** [22]: Use intra-block, intra-procedural, and inter-procedural taint propagation analysis to find SQL injection vulnerabilities in PHP code.
- **Pixy** [9, 10]: Targets the identification of intra-module XSS vulnerabilities and is the most complete static PHP analyzer available.

None of these approaches perform inter-module analysis, limiting their ability to capture workflow vulnerabilities. They also have a higher false positive rate due to the locality of their analysis.

#### Dynamic Analysis
Dynamic analysis techniques, such as dynamic taint propagation, have been applied to various languages. For example:
- **Nguyen-Tuong et al.** [15]: Propose modifications to the PHP interpreter to dynamically track tainted data.
- **Haldar et al.** [5]: Apply a similar approach to the Java Virtual Machine.
- **Pietraszek and Vanden Berghe** [16]: Present a unifying view of injection vulnerabilities and describe a general approach for detecting and preventing injection attacks.

While these dynamic approaches can detect multi-module data-flow attacks, they cannot detect workflow vulnerabilities because they do not model the application's intended workflow.

#### SQL Injection Detection
Some approaches build models of legitimate queries and compare them to dynamically-generated queries to detect SQL injection attacks:
- **AMNESIA** [6]: Targets SQL injection attacks in Java-based applications by checking the semantics of dynamically-generated queries against a derived model.
- **Su and Wassermann** [20]: Use the syntactic structure of program-generated output to identify injection attacks, such as XSS, XPath injection, and shell injection.

These approaches can detect SQL injection attacks at the time of injection but are unable to detect data-flow vulnerabilities like persistent XSS attacks without significant implementation effort.

### Conclusions

As web applications become more sophisticated, there is a growing need for techniques and tools that address novel security issues. Our approach, implemented in the MiMoSA tool, models the multi-module, multi-technology nature of complex web applications to identify both workflow and data-flow attacks. Testing on real-world applications shows that by explicitly modeling the state and workflow of a web application, it is possible to identify complex vulnerabilities that existing approaches cannot.

### Future Work

Future work will focus on:
1. **Including Additional Technologies**: To cover a larger class of applications.
2. **Automatically Generating Test Drivers**: To reduce the number of false positives.

### Acknowledgments

This research was partially supported by the National Science Foundation under grants CCR-0238492, CCR-0524853, and CCR-0716095.

### References

[1] A. V. Aho, R. Sethi, and J.D. Ullman. Compilers: Principles, Techniques, and Tools. Addison-Wesley Longman Publishing Co., Inc., 1986.

[2] M. Almgren, H. Debar, and M. Dacier. A Lightweight Tool for Detecting Web Server Attacks. In Proceedings of the Network and Distributed System Security Symposium (NDSS), pages 157–170, February 2000.

[3] C. Anley. Advanced SQL Injection in SQL Server Applications. Technical report, Next Generation Security Software, Ltd, 2002.

[4] Common Vulnerabilities and Exposures. http://www.cve.mitre.org/, 2006.

[5] V. Haldar, D. Chandra, and M. Franz. Dynamic Taint Propagation for Java. In Proceedings of the Annual Computer Security Applications Conference (ACSAC’05), pages 303–311, December 2005.

[6] W. Halfond and A. Orso. AMNESIA: Analysis and Monitoring for NEutralizing SQL-Injection Attacks. In Proceedings of the International Conference on Automated Software Engineering (ASE’05), pages 174–183, November 2005.

[7] Y.-W. Huang, F. Yu, C. Hang, C.-H. Tsai, D. Lee, and S.-Y. Kuo. Securing Web Application Code by Static Analysis and Runtime Protection. In Proceedings of the International World Wide Web Conference (WWW’04), pages 40–52, May 2004.

[8] N. Jovanovic, E. Kirda, and C. Kruegel. Preventing Cross Site Request Forgery Attacks. In Proceedings of the IEEE International Conference on Security and Privacy for Emerging Areas in Communication Networks (Securecomm), pages 1–10, September 2006.

[9] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A Static Analysis Tool for Detecting Web Application Vulnerabilities. In Proceedings of the IEEE Symposium on Security and Privacy, pages 258–263, May 2006.

[10] N. Jovanovic, C. Kruegel, and E. Kirda. Precise Alias Analysis for Static Detection of Web Application Vulnerabilities. In Proceedings of the ACM SIGPLAN Workshop on Programming Languages and Analysis for Security (PLAS’06), pages 27–36, June 2006.

[11] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes: A Client-Side Solution for Mitigating Cross Site Scripting Attacks. In Proceedings of the ACM Symposium on Applied Computing (SAC), pages 330–337, April 2006.

[12] A. Klein. Cross Site Scripting Explained. Technical report, Sanctum Inc., 2002.

[13] C. Kruegel and G. Vigna. Anomaly Detection of Web-based Attacks. In Proceedings of the ACM Conference on Computer and Communication Security (CCS ’03), pages 251–261, October 2003.

[14] B. Livshits and M. Lam. Finding Security Vulnerabilities in Java Applications with Static Analysis. In Proceedings of the USENIX Security Symposium (USENIX’05), pages 271–286, August 2005.

[15] A. Nguyen-Tuong, S. Guarnieri, D. Greene, and D. Evans. Automatically Hardening Web Applications Using Precise Tainting. In Proceedings of the International Information Security Conference (SEC’05), pages 372–382, May 2005.

[16] T. Pietraszek and C. Vanden Berghe. Defending against Injection Attacks through Context-Sensitive String Evaluation. In Proceedings of the International Symposium on Recent Advances in Intrusion Detection (RAID’05), pages 372–382, 2005.

[17] I. Ristic. ModSecurity. http://www.modsecurity.org/, November 2006.

[18] D. Scott and R. Sharp. Abstracting Application-Level Web Security. In Proceedings of the International World Wide Web Conference (WWW’02), pages 396–407, May 2002.

[19] M. Sharir and A. Pnueli. Two Approaches to Interprocedural Data Flow Analysis. In N. Jones and S. Muchnick, editors, Program Flow Analysis: Theory and Applications, chapter 7. Prentice Hall, 1981.

[20] Z. Su and G. Wassermann. The Essence of Command Injection Attacks in Web Applications. In Proceedings of the Annual Symposium on Principles of Programming Languages (POPL’06), pages 372–382, January 2006.

[21] G. Vigna, W. Robertson, V. Kher, and R.A. Kemmerer. A Stateful Intrusion Detection System for World-Wide Web Servers. In Proceedings of the Annual Computer Security Applications Conference (ACSAC 2003), pages 34–43, December 2003.

[22] Y. Xie and A. Aiken. Static Detection of Security Vulnerabilities in Scripting Languages. In Proceedings of the USENIX Security Symposium (USENIX’06), pages 271–286, August 2006.