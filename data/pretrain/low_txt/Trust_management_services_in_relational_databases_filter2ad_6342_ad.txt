### Trust Policy Statement and Trigger Mechanism

The `create trustpolicy` statement is implemented as a trigger, with the condition specified in the policy serving as the trigger's activation condition. This trigger is activated upon the insertion of a tuple into the trust table referenced in the condition. The trigger action grants the session the privilege to activate the role (and automatically activates it if the `autoactivate` clause is specified).

### Prototype Implementation

To demonstrate the feasibility of the proposed trust management model within current DBMSs, a related project is implementing this model in the PostgreSQL system. PostgreSQL is a well-known open-source DBMS, often chosen as a testbed for implementing novel database technologies by various research initiatives.

#### Design Considerations

1. **Cryptographic Functions**: The first design decision was the selection of the component responsible for cryptographic functions used for certificate verification. OpenSSL, one of the most widely used implementations of the SSL protocol, was chosen. The PostgreSQL distribution already offers the possibility to integrate OpenSSL, but it is typically used only for establishing secure client-server communication via SSL connections.

2. **Trust Table Management**: Since PostgreSQL does not support global temporary tables, trust tables are managed using regular tables that explicitly include the session identifier along with the attributes obtained from certificates. The model restricts the use of trust table attributes to two scenarios: defining trust policies and creating views.

3. **Trigger-Based Management**: The management of `create trustpolicy` statements is based on the use of triggers. For `create view` statements, the approach follows PostgreSQL's existing method, which uses rules. PostgreSQL rules are rewriting rules that capture references to views and replace each occurrence of the view in a SQL statement with the corresponding query. These rules can be adapted to represent views using certificate attributes. A rule is generated from a view definition that replaces the view occurrence with the query, extended with a predicate that restricts the evaluation of certificate attributes to the tuples in the trust table that refer to the session executing the SQL command.

**Example 6**:
Consider the following view, which uses an attribute of the trust table `Physicians`.

```sql
create view PatientView as
select Patients.*
from Patients, Physicians
where Physicians.code = Patients.doctor_code;
```

The system generates the following PostgreSQL rule:

```sql
create rule PatientViewSelect as
on select to PatientView
do instead
select Patients.*
from Patients, Physicians
where Physicians.code = Patients.doctor_code
and Physicians.SessionId = session_identifier();
```

### Related Work

Trust management has been a significant area of interest in the research community. Much of the research focuses on formalizing and analyzing the expressive power of authorization systems, without addressing practical details and strategies for integrating and implementing trust management in DBMSs. In contrast, our approach can be easily incorporated into a DBMS, enhancing the expressiveness of the access control model in terms of supported protection requirements.

- **PolicyMaker and KeyNote**: The term "trust management" was first introduced by Blaze, Feigenbaum, and Lacy in [3], where they presented PolicyMaker, a system associating authorizations with keys rather than user identities. KeyNote, its successor, refined this idea into a more practical system.
- **REFEREE**: REFEREE [5] is a trust management system for web applications, supporting full programmability of assertions (policies and credentials). While these approaches provide a framework for reasoning about trust between unknown parties, their flexibility is difficult to integrate with DBMSs, suggesting an access control model that merges authentication and policy evaluation in a way that is challenging to integrate with database access control.
- **Digital Certificates and Delegation**: Other approaches use digital certificates to establish properties of their holder, delegation, and revocation of credentials, and evaluation of credential chains [8, 12, 15]. These proposals allow a powerful representation of privileges based on certificate information but do not guarantee the computational effort required for certificate verification.
- **X.509**: X.509 [9] defines a binding between keys and names, with X.509 v.3 extending this to general attributes. X.509 is the most successful solution, but its delegation model and certificate structure are rigid. Our model leverages the existing X.509 infrastructure for flexible policies.
- **Complementary Approaches**: Other approaches [4, 10, 11, 13, 16, 17, 18, 19] propose solutions for specifying and enforcing access control policies based on certified attributes, focusing on scenarios where parties may be unknown a-priori. Our approach assumes that the client presents all necessary certificates at the request time, compatible with different trust negotiation proposals.

### Conclusions

Despite the introduction of trust management mechanisms several years ago, their adoption has been limited, primarily due to the challenges in implementing a working infrastructure for managing and exchanging certificates. The integration of these services with database servers, which manage most of the critical information, has also been a hurdle. Many trust management proposals are powerful but difficult to integrate with current DBMSs. Our approach prioritizes compatibility with established DBMS practices, providing considerable expressive power through integration with active components (triggers, procedures, constraints, roles, transactions) and rich storage services offered by SQL. This solution is designed to be immediately implementable by DBMS producers and usable by DBAs, representing a good trade-off between functionality and applicability.

### Acknowledgments

This work was partially supported by the European Union within the PRIME Project in the FP6/IST Programme under contract IST-2002-507591.

### References

[1] C. Ardagna, E. Damiani, S. De Capitani di Vimercati, S. Foresti, and P. Samarati. Trust management. In Security, Privacy and Trust in Modern Data Management. Springer, 2006.

[2] M. Blaze, J. Feigenbaum, J. Ioannidis, and A. Keromytis. The KeyNote Trust Management System (Version 2), internet rfc 2704 edition, 1999.

[3] M. Blaze, J. Feigenbaum, and J. Lacy. Decentralized trust management. In Proc. of the 17th Symposium on Security and Privacy, Oakland, California, USA, May 1996.

[4] P. Bonatti and P. Samarati. A unified framework for regulating access and information release on the web. Journal of Computer Security, 10(3):241–272, 2002.

[5] Y. Chu, J. Feigenbaum, B. LaMacchia, P. Resnick, and M. Strauss. REFEREE: Trust management for web applications. The World Wide Web Journal, 2(3):127–139, 1997.

[6] Database language SQL – part 2: Foundation (SQL/foundation). ISO International Standard, ISO/IEC 9075:1999, 1999.

[7] S. De Capitani di Vimercati, S. Foresti, S. Jajodia, and P. Samarati. Access control policies and languages in open environments. In Security in Decentralized Data Management. Springer, 2006.

[8] C. Ellison, B. Frantz, B. Lampson, R. Rivest, B. Thomas, and T. Ylonen. SPKI certificate theory. RFC2693, September 1999.

[9] R. Housley, W. Ford, W. Polk, and D. Solo. Internet X.509 Public Key Infrastructure Certificate and CRL Profile, rfc 2459 edition, January 1999. http://www.ietf.org/rfc/rfc2459.txt.

[10] K. Irwin and T. Yu. Preventing attribute information leakage in automated trust negotiation. In Proc. of the 12th ACM CCS, Alexandria, VA, USA, Nov. 2005.

[11] N. Li, J. Mitchell, and W. Winsborough. Beyond proof-of-compliance: Security analysis in trust management. Journal of the ACM, 52(3):474–514, May 2005.

[12] N. Li, W. Winsborough, and J. Mitchell. Distributed credential chain discovery in trust management. Journal of Computer Security, 11(1):35–86, February 2003.

[13] J. Ni, N. Li, and W. Winsborough. Automated trust negotiation using cryptographic credentials. In Proc. of the 12th ACM CCS, Alexandria, VA, USA, Nov. 2005.

[14] P. Samarati and S. De Capitani di Vimercati. Access control: Policies, models, and mechanisms. In R. Focardi and R. Gorrieri, editors, Foundations of Security Analysis and Design, LNCS 2171. Springer-Verlag, 2001.

[15] L. Wang, D. Wijesekera, and S. Jajodia. A logic-based framework for attribute-based access control. In Proc. of the 2004 ACM Workshop on Formal Methods in Security Engineering, Washington DC, USA, October 2004.

[16] J. Warner, V. Atluri, and R. Mukkamala. An attribute graph-based approach to map local access control policies to credential-based access control policies. In Proc. of the International Conference on Information Systems Security (ICISS 2005), Kolkata, India, December 2005.

[17] M. Winslett, N. Ching, V. Jones, and I. Slepchin. Using digital credentials on the World-Wide Web. Journal of Computer Security, 1997.

[18] T. Yu and M. Winslett. A unified scheme for resource protection in automated trust negotiation. In Proc. of the IEEE Symposium on Security and Privacy, Oakland, CA, USA, May 2003.

[19] T. Yu, M. Winslett, and K. Seamons. Supporting structured credentials and sensitive policies through interoperable strategies for automated trust negotiation. ACM Transactions on Information and System Security, 6(1):1–42, February 2003.

### Appendix

#### Translation of SQL Trust Statements

- **SQL Trust Statement**: `create authority AuthorityName public_key = PublicKeyValue`
  - **SQL Statement**: `insert into Authority values(AuthorityName, PublicKeyValue)`

- **SQL Trust Statement**: `create authorityclass AuthorityClassName`
  - **SQL Statement**: 
    ```sql
    create global temporary table AuthorityClassName
    (AttrName AttrDomain [check (Condition)] {, AttrName AttrDomain [check (Condition)]} [, check (Condition)]);
    ```

- **SQL Trust Statement**: `create trusttable TrustTableName authoritative (AttrName AttrDomain [check (Condition)] {, AttrName AttrDomain [check (Condition)]} [, check (Condition)])`
  - **SQL Statement**: 
    ```sql
    create global temporary table TrustTableName
    (AttrName AttrDomain [check (Condition)] {, AttrName AttrDomain [check (Condition)]} [, check (Condition)]);
    ```

- **SQL Trust Statement**: `create trustpolicy PolicyName for Role autoactivate as Condition`
  - **SQL Statement**: 
    ```sql
    create trigger PolicyName
    after insert on TrustTableName
    for each row
    when Condition
    grant Role to session id
    set role Role
    ```

This appendix provides a translation of the SQL trust statements into the corresponding SQL statements for implementation.