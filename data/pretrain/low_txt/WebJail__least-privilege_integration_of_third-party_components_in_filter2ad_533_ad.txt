### Challenges and Solutions in Third-Party Component Security

#### Tight Coupling of Security Features
A significant challenge in integrating third-party components is the tight coupling of security features with the component code. This requires control over the code, either during development or deployment, which conflicts with legacy components and remote component delivery (R2). It also reduces the applicability to mashup scenarios where the integrator delivers the components to the browser.

#### JavaScript Instrumentation and Access Mediation
Instead of restricting a third-party component to a subset of JavaScript, access to specific security-sensitive operations can be mediated. Mediation can involve blocking calls or using a policy to decide whether to allow them.

- **BrowserShield**: A server-side rewriting technique that replaces certain JavaScript functions with safe equivalents. These safe equivalents are implemented in the "bshield" object, introduced through the BrowserShield JavaScript libraries injected into each page. BrowserShield uses a proxy to inject its code into webpages.
- **Self-Protecting JavaScript**: A client-side wrapping technique that applies advice around JavaScript functions without requiring browser modifications. The wrapping code and advice are provided by the server and executed first, ensuring a clean environment. However, this approach only provides non-deep advice, meaning that protecting one operation does not automatically protect different access paths to the same operation. The main challenge is to ensure full mediation (R1) without breaking the component’s legitimate functionality.
- **Browser-Enforced Embedded Policies (BEEP)**: Injects a policy script at the server-side. The browser calls this policy script before loading another script, allowing the policy to vet the script about to be loaded. This approach offers control over which scripts are loaded but is too coarse-grained to assign privileges to specific components.
- **ConScript**: Allows the enforcement of fine-grained security policies for JavaScript in the browser. Similar to self-protecting JavaScript, ConScript uses deep advice to protect all access paths to a function. However, it requires client-side support in the JavaScript engine. Additionally, ConScript policies are not composition policies; they are provided by and applied to the same webpage, conflicting with remote component delivery (R2) and secure composition policy configurable by the integrator (R3).

**WebJail** offers a solution by allowing the integrator to define a policy that restricts the behavior of a third-party component in an isolated manner. Unlike the above techniques, WebJail's policy language is designed to simplify the writing of secure policies, reducing the risk of errors in protection against emerging HTML5 APIs.

### Web Application Code and Data Analysis
Server-side code or data analysis is a common technique to protect against XSS vulnerabilities. Although these techniques only check if a component meets certain security requirements and do not enforce a policy, they ensure that a component meets least-privilege integration requirements out-of-the-box.

- **Gatekeeper**: A mostly static enforcement mechanism designed to defend against potentially malicious JavaScript widgets on a hosting page. Gatekeeper analyzes the complete JavaScript code together with the hosting page and uses runtime enforcement to disable dynamic JavaScript features.
- **XSS-Guard**: Aims to detect and remove unintended scripts in a web application's output, effectively mitigating XSS attacks. XSS-Guard dynamically learns the set of scripts used for an HTTP request and protects subsequent requests.
- **Content Security Policy (CSP)**: Proposed by Mozilla, CSP allows the integrator to insert a security policy via response headers or meta tags. However, CSP only supports restrictions on a subset of security-sensitive operations, such as those leading to content injection (e.g., script inclusion and XHR).

### Information Flow Control
Information flow control techniques can detect unauthorized information sharing or leaking between origins or external parties. This is useful for applications that use sensitive data, such as location, but are not allowed to share it.

- **Magazinius et al. and Li et al.**: Both have proposed information flow control techniques that prevent unauthorized data sharing and support authorized sharing through declassification.
- **Secure Multi-Execution**: Detects information leakage by simultaneously running the code for each security level. While robust, it does not support declassification.

Information flow control techniques are not suited for enforcing least-privilege integration, and WebJail is not suited for enforcing information flow control. However, both techniques can be used together to ensure least-privilege integration without unauthorized information leaking.

### Isolating Content Using Specialized HTML
Isolating untrusted content is another approach to least-privilege integration. By explicitly separating untrusted code, it becomes easier to restrict its behavior, such as preventing script execution.

- **Untrusted Attribute**: An attribute on a div element that aims to differentiate between trusted and untrusted code. However, this technique fails to defend against injecting closing tags, which can easily circumvent the countermeasure.
- **Sandbox Attribute**: A new attribute of the iframe element in HTML 5 that provides a safer alternative but is very coarse-grained. It only supports limited restrictions and, for JavaScript APIs, only allows completely enabling or disabling JavaScript.
- **ADJail**: Designed to securely isolate ads from a hosting page for confidentiality and integrity while maintaining usability. ADJail loads the ad on a shadow page and replicates changes to the hosting page if they conform to the specified policy. It limits DOM access and UI interaction but does not restrict the use of all other sensitive operations like WebJail can.

### User-Provided Policies
Mozilla offers **Configurable Security Policies**, a user-configurable policy that is part of the browser. This policy allows users to enable or disable certain capabilities for specific internet sites. For example, users can disallow a site from opening a popup window. Some parts of this idea have been implemented in the Security zones of Internet Explorer.

The policies and enforcement mechanisms offered by this technique resemble WebJail. However, these policies are user-configurable and not under the control of the integrator. Additionally, they do not support different sets of rules for the same included content in different scenarios, whereas WebJail does.

### Conclusion
In this paper, we presented **WebJail**, a novel client-side security architecture that enables least-privilege integration of third-party components in web mashups. WebJail is compatible with legacy mashup components and allows direct delivery of components from service providers to the browser. We designed a secure composition language for WebJail based on a study of security-sensitive operations in HTML5 APIs, achieving full mediation by applying deep aspect weaving within the browser.

We implemented a prototype of WebJail in Mozilla Firefox 4.0 and successfully applied it to mainstream platforms such as iGoogle and Facebook. Performance evaluations using micro-benchmarks showed that both the page load-time overhead (±7ms) and the execution overhead of a function advised with a whitelist policy (±0.1ms) are negligible.

### Acknowledgments
This research is partially funded by the Interuniversity Attraction Poles Programme Belgian State, Belgian Science Policy, IBBT, IWT, the Research Fund K.U.Leuven, and the EU-funded FP7-projects WebSand and NESSoS. We also thank Maarten Decat and Willem De Groef for their contributions to early proof-of-concept implementations.

### References
[1] A. Barth, C. Jackson, and J. C. Mitchell. Securing frame communication in browsers. Commun. ACM, 52:83–91, June 2009.
[2] P. Bisht and V. Venkatakrishnan. XSS-guard: Precise dynamic prevention of cross-site scripting attacks. In 5th GI International Conference on Detection of Intrusions & Malware, and Vulnerability Assesment, July 2008.
[3] D. Crockford. ADsafe – making JavaScript safe for advertising. http://adsafe.org/.
[4] P. De Ryck, M. Decat, L. Desmet, F. Piessens, and W. Joosen. Security of web mashups: a survey. In 15th Nordic Conference in Secure IT Systems (NordSec 2010). Springer, 2011.
[5] P. De Ryck, L. Desmet, T. Heyman, F. Piessens, and W. Joosen. CSFIRE: Transparent client-side mitigation of malicious cross-domain requests. In Lecture Notes in Computer Science, volume 5965, pages 18–34. Springer Berlin / Heidelberg, February 2010.
[6] P. De Ryck, L. Desmet, W. Joosen, and F. Piessens. Automatic and precise client-side protection against CSRF attacks. In V. Atluri and C. Diaz, editors, Computer Security - ESORICS 2011, volume 6879 of Lecture Notes in Computer Science, pages 100–116. Springer Berlin / Heidelberg, 2011.
[7] P. De Ryck, L. Desmet, P. Philippaerts, and F. Piessens. A security analysis of next generation web standards. Technical report, G. Hogben and M. Dekker (Eds.), European Network and Information Security Agency (ENISA), July 2011.
[8] M. Decat. Ondersteuning voor veilige Web Mashups. Master’s thesis, Katholieke Universiteit Leuven, 2010.
[9] D. Devriese and F. Piessens. Noninterference through Secure Multi-execution. 2010 IEEE Symposium on Security and Privacy, pages 109–124, 2010.
[10] A. Felt, P. Hooimeijer, D. Evans, and W. Weimer. Talking to strangers without taking their candy: isolating proxied content. In SocialNets ’08: Proceedings of the 1st Workshop on Social Network Systems, pages 25–30, New York, NY, USA, 2008. ACM.
[11] Google. Google Latitude. https://www.google.com/latitude/.
[12] S. Guarnieri and B. Livshits. Gatekeeper: Mostly static enforcement of security and reliability policies for JavaScript code. In Proceedings of the Usenix Security Symposium, Aug. 2009.
[13] I. Hickson and D. Hyatt. HTML 5 Working Draft - The sandbox Attribute. http://www.w3.org/TR/html5/the-iframe-element.html#attr-iframe-sandbox, June 2010.
[14] Involver. Tweets To Pages. http://www.facebook.com/TweetsApp.
[15] Jacaranda. Jacaranda. http://jacaranda.org.
[16] T. Jim, N. Swamy, and M. Hicks. Defeating Script Injection Attacks with Browser-Enforced Embedded Policies. In WWW ’07: Proceedings of the 16th international conference on World Wide Web, pages 601–610, New York, NY, USA, 2007. ACM.
[17] Z. Li, K. Zhang, and X. Wang. Mash-if: Practical information-flow control within client-side mashups. In Dependable Systems and Networks (DSN), 2010 IEEE/IFIP International Conference on, pages 251 –260, 28 2010-july 1 2010.
[18] J. Magazinius, A. Askarov, and A. Sabelfeld. A lattice-based approach to mashup security. In Proceedings of the 5th ACM Symposium on Information, Computer and Communications Security, ASIACCS ’10, pages 15–23, New York, NY, USA, 2010. ACM.
[19] J. Magazinius, P. Phung, and D. Sands. Safe wrappers and sane policies for self-protecting JavaScript. In The 15th Nordic Conf. in Secure IT Systems. Springer Verlag, 2010.
[20] G. Maone. NoScript 2.0.9.9. http://noscript.net/, 2011.
[21] L. Meyerovich and B. Livshits. ConScript: Specifying and enforcing fine-grained security policies for JavaScript in the browser. In IEEE Symposium on Security and Privacy, May 2010.
[22] Microsoft Live Labs. Live Labs WebSandbox. http://websandbox.org.
[23] M. S. Miller, M. Samuel, B. Laurie, I. Awad, and M. Stay. Caja - safe active content in sanitized JavaScript. Technical report, Google Inc., June 2008.
[24] P. H. Phung, D. Sands, and A. Chudnov. Lightweight self-protecting JavaScript. In Proceedings of the 4th International Symposium on Information, Computer, and Communications Security, ASIACCS ’09, pages 47–60, New York, NY, USA, 2009. ACM.
[25] Programmable Web. Keeping you up to date with APIs, mashups and the Web as platform. http://www.programmableweb.com/.
[26] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir. BrowserShield: vulnerability-driven filtering of dynamic HTML. In OSDI ’06: Proceedings of the 7th symposium on Operating systems design and implementation, pages 61–74, Berkeley, CA, USA, 2006. USENIX Association.
[27] J. Ruderman. Configurable Security Policies. http://www.mozilla.org/projects/security/components/ConfigPolicy.html.
[28] J. Samuel. RequestPolicy 0.5.20. http://www.requestpolicy.com, 2011.
[29] S. Stamm, B. Sterne, and G. Markham. Reining in the web with content security policy. In Proceedings of the 19th international conference on World wide web, WWW ’10, pages 921–930, New York, NY, USA, 2010. ACM.
[30] M. Ter Louw, K. T. Ganesh, and V. Venkatakrishnan. ADJail: Practical enforcement of confidentiality and integrity policies on web advertisements. In 19th USENIX Security Symposium, Aug. 2010.
[31] The Facebook Team. FBJS. http://wiki.developers.facebook.com/index.php/FBJS.
[32] W3C. W3C Standards and drafts - JavaScript APIs. http://www.w3.org/TR/#tr_Javascript_APIs.
[33] Willem De Groef. ConScript For Firefox. http://cqrit.be/conscript/.
[34] M. Zalewski. Browser security handbook. http://code.google.com/p/browsersec/wiki/Main, 2010.