### Execution Time and Performance Analysis

The execution time for the basic TRUMP technique is 1.37, while the higher coverage techniques, SWIFT-R and TRUMP/SWIFT-R, have normalized execution times of 1.99 and 1.98, respectively. The close execution times between TRUMP/SWIFT-R and SWIFT-R suggest that TRUMP/SWIFT-R's protection choices more closely align with those of SWIFT-R than TRUMP. This implies that SWIFT-R protects a larger number of instructions compared to TRUMP. This observation is consistent with the reliability evaluation, which shows that TRUMP/SWIFT-R's reliability is closer to SWIFT-R than to TRUMP.

The performance of TRUMP/SWIFT-R is highly dependent on the trade-offs between SWIFT-R and TRUMP protections. SWIFT-R is more resource-intensive in terms of redundancy, as it requires two additional versions of the computation, whereas TRUMP is more expensive in terms of verification, necessitating the conversion of AN-encoded and original data into the same format for comparison. Depending on the ratio of redundant computation to verification, a TRUMP dependence chain can be more costly than a SWIFT-R dependence chain, which explains why SWIFT-R occasionally outperforms TRUMP/SWIFT-R.

### TRUMP/MASK Performance

TRUMP/MASK generally exhibits higher performance than either TRUMP/SWIFT-R or SWIFT-R, but it is significantly lower than MASK and comparable to TRUMP. This is expected because the performance impact of MASK is nearly negligible. The combined performance of TRUMP/MASK is slightly worse than the sum of individual performances of MASK and TRUMP, as each technique alone can utilize some previously unused resources, but there are not enough resources to support both MASK and TRUMP simultaneously, leading to a super-additive performance penalty. In certain cases, such as mpeg2dec, TRUMP/MASK outperforms TRUMP, similar to how MASK occasionally outperforms NOFT. This is due to unpredictable changes in the scheduler and register allocator resulting from the insertion of extra instructions.

### Normalized Execution Times

An interesting observation is that the normalized execution time of all our techniques, including SWIFT-R, averages far less than three, which is what one might naively expect after tripling the code. For benchmarks dominated by floating-point instructions, which we do not protect (e.g., 179.art), the performance difference between the various versions of the code is minimal. However, even for most integer benchmarks, the normalized execution time is much less than three. All our techniques leverage the well-documented existence of unused Instruction-Level Parallelism (ILP) resources in modern processors. Since most of the instructions added in SWIFT-R and TRUMP are independent of the original instructions, the reliable code can often utilize previously unused ILP resources. This effect is particularly noticeable in benchmarks with poor ILP in NOFT, such as 181.mcf, where a large fraction of time is spent in memory stalls, making our transformations have a minimal impact on performance. The variation in available ILP leads to wide variations in the performance cost for each benchmark.

### Impact of Instruction Mix

In addition to ILP, the instruction mix of various benchmarks affects the performance cost of added reliability. For both TRUMP and SWIFT-R, the protection for most instructions is replication. However, when checks are involved, a more complex sequence of instructions is executed. Although the verification code differs for each technique, benchmarks with many checks, such as 255.vortex (due to a preponderance of loads), typically experience a higher performance impact compared to benchmarks with fewer checks and more pure computation, such as 300.twolf.

### Summary

SWIFT-R, with a normalized execution time of 1.99, significantly improves reliability, increasing unACE to 97.27%. It should be used in situations where high reliability requirements justify this level of performance degradation. The performance of SWIFT-R can be slightly improved by using the hybrid technique TRUMP/SWIFT-R. When the system's reliability requirements are not stringent enough to warrant SWIFT-R or TRUMP/SWIFT-R, TRUMP or TRUMP/MASK can be used. TRUMP has a much lower normalized runtime of 1.36 and increases unACE to 87.73% (compared to 74.18% for NOFT). TRUMP/MASK further improves reliability with a negligible impact on performance. Finally, when almost no performance degradation can be tolerated, the MASK technique can be used. While MASK does not always improve reliability, it is essentially free in terms of performance cost, making it worthwhile to apply.

### Relation to Prior Work

The techniques presented in this paper are the first low-level software-only recovery methods. Previous works have proposed single-threaded fault mitigation techniques at both the source code and instruction levels, but these only address fault detection, not recovery. Techniques using arithmetic codes have also been devised, but they either only address fault detection or require hardware support.

N-version programming (NVP) involves using N independent modules to perform the same task, aiming to reduce faults in the system design process by using different teams and compilation tools. Our techniques, however, create multiple versions of the computation to address transient faults, not programmer errors. Therefore, NVP requires programs to be independently developed multiple times, whereas our techniques are fully-automated, compiler-driven approaches.

Software-only N-way redundancy has also been applied to parallel systems, where an application is split into independent tasks and assigned to multiple computation nodes. These techniques use software recovery at a higher level, targeting thread-level parallelism rather than ILP, underutilizing available ILP resources and being applicable only in multi-processor environments. Our techniques, in contrast, are single-threaded and more efficient in utilizing ILP resources.

### Conclusion

As faults become more common, maintaining system reliability without adding hardware or increasing design complexity is critical, especially at the embedded and commodity levels. This paper demonstrates that software-only recovery is a reliable option. We introduce three novel techniques: SWIFT-R, an augmentation of the software-only detection scheme SWIFT; TRUMP, a new recovery system using AN-codes for cost-effective redundancy; and MASK, which enforces program invariants with minimal intrusiveness. Experimental evaluations show that these techniques offer a wide spectrum of performance and reliability trade-offs. SWIFT-R provides nearly total protection against faults, reducing SDC and SEGV events by 89.39%, while MASK offers negligible performance degradation. TRUMP offers a middle ground, reducing SDC and SEGV by 52.48% with a 36% execution time overhead. Combining these techniques into hybrid methods offers even more options to designers.

Our implementation of these software-only recovery techniques in a production compiler demonstrates that fault recovery can be effectively integrated into today's designs and processors.

### Acknowledgments

We thank the entire Liberty Research Group, Shubhendu Mukherjee, and the anonymous reviewers for their support. This work was supported by the Intel Corporation. Opinions, findings, conclusions, and recommendations expressed in this work are not necessarily the views of Intel Corporation.

### References

[1] A. Avizienis. The methodology of N-version programming. Chapter 2 of Software Fault Tolerance, M. R. Lyu (ed.), Wiley, 23-46, 1995.
[2] A. Avizienis and L. Chen. On the implementation of N-version programming for software fault tolerance during execution. In COMPSAC, pages 149–155, 1997.
[3] R. C. Baumann. Soft errors in advanced semiconductor devices-part I: the three radiation sources. IEEE Transactions on Device and Materials Reliability, 1(1):17–22, March 2001.
[4] S. S. Brilliant, J. C. Knight, and N. G. Leveson. Analysis of faults in an n-version software experiment. IEEE Trans. Softw. Eng., 16(2):238–247, 1990.
[5] J.-L. Dufour. Safety computations in integrated circuits. In VTS ’96: Proceedings of the 14th IEEE VLSI Test Symposium (VTS ’96), page 169, Washington, DC, USA, 1996. IEEE Computer Society.
[6] P. Forin. Vital coded microprocessor principles and application for various transit systems. In IFAC/IFIP/IFORS Symposium, pages 79–84, September 1989.
[7] R. Guerraoui and A. Schiper. Software-based replication for fault tolerance. IEEE Computer, 30:68–74, April 1997.
[8] R. W. Horst, R. L. Harris, and R. L. Jardine. Multiple instruction issue in the NonStop Cyclone processor. In Proceedings of the 17th International Symposium on Computer Architecture, pages 216–226, May 1990.
[9] Z. T. Kalbarczyk, R. K. Iyer, S. Bagchi, and K. Whisnant. Chameleon: A software infrastructure for adaptive fault tolerance. IEEE Transactions on Parallel and Distributed Systems, 10:560–579, June 1999.
[10] C. Lee, M. Potkonjak, and W. Mangione-Smith. Mediabench: A tool for evaluating and synthesizing multimedia and communications systems. In Proceedings of the 30th Annual International Symposium on Microarchitecture, pages 330–335, December 1997.
[11] J. Levon. Oprofile - a system profiler for linux. Web site: http://oprofile.soruceforge.net/, 2005.
[12] M. Li, D. Goldberg, W. Tao, and Y. Tamir. Fault-tolerant cluster management for reliable high-performance computing. In 13th International Conference on Parallel and Distributed Computing Systems, 2001.
[13] S. S. Mukherjee, C. Weaver, J. Emer, S. K. Reinhardt, and T. Austin. A systematic methodology to compute the architectural vulnerability factors for a high-performance microprocessor. In Proceedings of the 36th Annual IEEE/ACM International Symposium on Microarchitecture, page 29. IEEE Computer Society, 2003.
[14] T. J. O’Gorman, J. M. Ross, A. H. Taber, J. F. Ziegler, H. P. Muhlfeld, I. C. J. Montrose, H. W. Curtis, and J. L. Walsh. Field testing for cosmic ray soft errors in semiconductor memories. In IBM Journal of Research and Development, pages 41–49, January 1996.
[15] N. Oh, P. P. Shirvani, and E. J. McCluskey. Control-flow checking by software signatures. In IEEE Transactions on Reliability, volume 51, pages 111–122, March 2002.
[16] N. Oh, P. P. Shirvani, and E. J. McCluskey. ED4I: Error detection by diverse data and duplicated instructions. In IEEE Transactions on Computers, volume 51, pages 180 – 199, February 2002.
[17] N. Oh, P. P. Shirvani, and E. J. McCluskey. Error detection by duplicated instructions in super-scalar processors. In IEEE Transactions on Reliability, volume 51, pages 63–75, March 2002.
[18] W. W. Peterson and M. O. Rabin. On codes for checking logical operations. IBM Journal of Research and Development, 3(2):163, 1959.
[19] R. Phelan. Addressing soft errors in ARM core-based SoC. ARM White Paper, December 2003.
[20] M. Rebaudengo, M. S. Reorda, and M. Violante. An accurate analysis of the effects of soft errors in the instruction and data caches of a pipelined microprocessor. In DATE ’03: Proceedings of the Conference on Design, Automation and Test in Europe, page 10602, Washington, DC, USA, 2003. IEEE Computer Society.
[21] M. Rebaudengo, M. S. Reorda, M. Violante, and M. Torchiano. A source-to-source compiler for generating dependable software. In IEEE International Workshop on Source Code Analysis and Manipulation, pages 33–42, 2001.
[22] S. K. Reinhardt and S. S. Mukherjee. Transient fault detection via simultaneous multithreading. In Proceedings of the 27th Annual International Symposium on Computer Architecture, pages 25–36. ACM Press, 2000.
[23] G. A. Reis, J. Chang, N. Vachharajani, R. Rangan, and D. I. August. SWIFT: Software implemented fault tolerance. In Proceedings of the 3rd International Symposium on Code Generation and Optimization, March 2005.
[24] G. A. Reis, J. Chang, N. Vachharajani, R. Rangan, D. I. August, and S. S. Mukherjee. Design and evaluation of hybrid fault-detection systems. In Proceedings of the 32nd Annual International Symposium on Computer Architecture, pages 148–159, June 2005.
[25] P. P. Shirvani, N. Saxena, and E. J. McCluskey. Software-implemented EDAC protection against SEUs. In IEEE Transactions on Reliability, volume 49, pages 273–284, 2000.
[26] P. Shivakumar, M. Kistler, S. W. Keckler, D. Burger, and L. Alvisi. Modeling the effect of technology trends on the soft error rate of combinational logic. In Proceedings of the 2002 International Conference on Dependable Systems and Networks, pages 389–399, June 2002.
[27] T. J. Slegel, R. M. Averill III, M. A. Check, B. C. Giamei, B. W. Krumm, C. A. Krygowski, W. H. Li, J. S. Liptay, J. D. MacDougall, T. J. McPherson, J. A. Navarro, E. M. Schwarz, K. Shum, and C. F. Webb. IBM’s S/390 G5 Microprocessor design. In IEEE Micro, volume 19, pages 12–23, March 1999.
[28] M. Tremblay and Y. Tamir. Support for fault tolerance in VLSI processors. Volume 1, pages 388–392, May 1989.
[29] R. Venkatasubramanian, J. P. Hayes, and B. T. Murray. Low-cost on-line fault detection using control flow assertions. In Proceedings of the 9th IEEE International On-Line Testing Symposium, pages 137–143, July 2003.
[30] N. J. Wang, J. Quek, T. M. Rafacz, and S. J. Patel. Characterizing the effects of transient faults on a high-performance processor pipeline. In Proceedings of the 2004 International Conference on Dependable Systems and Networks, pages 61–72, June 2004.
[31] J. Yan and W. Zhang. Compiler-guided register reliability improvement against soft errors. Pages 203–209, 2005.
[32] Y. Yeh. Triple-triple redundant 777 primary flight computer. In Proceedings of the 1996 IEEE Aerospace Applications Conference, volume 1, pages 293–307, February 1996.
[33] Y. Yeh. Design considerations in Boeing 777 fly-by-wire computers. In Proceedings of the Third IEEE International High-Assurance Systems Engineering Symposium, pages 64 – 72, November 1998.