### Summary of Previously Proposed COSI Attacks

#### Introduction
This section summarizes previously proposed Cross-Origin State Inference (COSI) attacks, which are categorized and analyzed to provide a comprehensive overview. These attacks exploit various browser features and behaviors to infer sensitive information about a user's state on a target site.

#### JSObjectRead Attacks
JSObjectRead attacks can be mitigated by making the URLs of script files unpredictable and including JavaScript parser-breaking strings in dynamic JS files. After Grossman's initial attack using the FrameCount readable object property, several other attack classes have been proposed, leveraging properties such as window frame count, width, height, duration, cssRules, and media errors [14, 52, 55, 57, 65].

#### CSP Abuse for Redirection Detection
Homakov demonstrated that cross-origin and sub-domain redirections can be detected by abusing Content Security Policy (CSP). This approach has been used for login detection and fingerprinting attacks [38, 71]. Lee et al. showed that the AppCache feature can be abused to differentiate between 200 status responses and redirection or error responses [47]. Recently, Staicu et al. [61] demonstrated a deanonymization attack using images uploaded to GitHub, which we generalized to non-image resources. Bortz et al. [21] showed that the timing of events fired when a resource is loaded using the `img` HTML tag can determine the state of a user at a target site. Evans [27] and Gelernter and Herzberg [31] applied similar approaches for mounting cross-site search attacks. Goethem et al. [64] showed that the parsing time of included resources is a better alternative, and that the Referer and Origin headers can help prevent such attacks. Sanchez et al. [56] measured the scale of timing-based login and access detection attacks.

#### Browser History Sniffing Attacks
Multiple works have studied history sniffing attacks that use browser side channels to determine whether a user has accessed certain websites [23, 28, 53, 60, 70]. Jackson et al. proposed increasing the isolation of different origins [42], and Wondracek et al. suggested adding non-predictable tokens in URLs and using the POST method [70]. History sniffing attacks are similar to COSI attacks in leveraging browser side channels but differ in the absence of a target site and the fact that the attack page does not send cross-origin requests.

#### Attacks Using postMessage
Guan et al. [37] analyzed privacy issues in `postMessage` broadcasts by popular websites, and Stock et al. showed that the usage of broadcasted `postMessages` has been increasing [62]. Our `postMessage` XS-Leak leverages differences between broadcasted `postMessages` in Same-Domain URLs and does not require messages to contain sensitive data.

### Conclusion
We have presented COSI attacks as a comprehensive category and introduced a novel approach to identify and build complex COSI attacks that differentiate more than two states and support multiple browsers. Our approach combines multiple attack vectors, possibly using different XS-Leaks. To enable our approach, we introduced the concept of COSI attack classes and proposed novel techniques to discover attack classes from existing instances of COSI attacks. In this process, we discovered a novel browser XS-Leak based on `window.postMessage`. We implemented our approach into Basta-COSI, a tool to find COSI attacks in a target website. We applied Basta-COSI to test four stand-alone web applications and 58 popular websites, finding COSI attacks against each of them.

### Acknowledgments
We thank Adam Doupe and the anonymous reviewers for their insightful comments and feedback. This research was largely performed while Soheil Khodayari was an intern at the IMDEA Software Institute. This research received funding from the European Union Horizon 2020 Research and Innovation Programme under the ELASTEST Grant Agreement No. 731535. The work was also supported by the Regional Government of Madrid through the BLOQUES-CM grant P2018/TCS-4339 and by the Spanish Government through the SCUM grant RTI2018-102043-B-I00. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors or originators and do not necessarily reflect the views of the sponsors.

### References
[1] Appium: Mobile app automation made awesome. [Online]. Available: https://appium.io/
[2] Cross-Origin-Resource-Policy (was: From-Origin). [Online]. Available: https://github.com/whatwg/fetch/issues/687
[3] ‘Cross-Origin-Window-Policy’ header. [Online]. Available: https://github.com/whatwg/html/issues/3740
[4] Elastest: An elastic platform to ease end-to-end testing. [Online]. Available: https://elastest.eu/
[5] OWASP Zed Attack Proxy. [Online]. Available: https://www.owasp.org/index.php/ZAP
[6] Selenium-python. [Online]. Available: https://selenium-python.readthedocs.io/index.html
[7] Spider. [Online]. Available: https://github.com/zaproxy/zap-core-help/wiki/HelpStartConceptsSpider
[8] Web Video Text Tracks Format (WebVTT). [Online]. Available: https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API
[9] (2014) Using the application cache. [Online]. Available: https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache
[10] (2019) Attempt to plug an information leak represented by HTTP status. [Online]. Available: https://github.com/kohler/hotcrp/commit/406a966aad00a762460fbc62cfb04a7532fc9fbd
[11] (2019) Intent to Implement and Ship: Cookies with SameSite by default. [Online]. Available: https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/AknSSyQTGYs/SSB1rTEkBgAJ
[12] (2019) Intent to implement: Cookie SameSite=lax by default and SameSite=none only if secure. [Online]. Available: https://groups.google.com/forum/#!msg/mozilla.dev.platform/nx2uP0CzA9k/BNVPWDHsAQAJ
[13] (2019) Timing Attacks using Machine Learning. [Online]. Available: https://parzelsec.de/timing-attacks-with-machine-learning/
[14] G. Acar, D. Y. Huang, F. Li, A. Narayanan, and N. Feamster, “Web-based attacks to discover and control local IoT devices,” in Proceedings of the Workshop on IoT Security and Privacy, 2018.
[15] Amazon. The top 500 sites on the web. [Online]. Available: https://www.alexa.com/topsites
[16] A. Armando, R. Carbone, L. Compagna, J. Cuellar, and L. Tobarra, “Formal analysis of SAML 2.0 web browser single sign-on: Breaking the SAML-based single sign-on for Google Apps,” in Proceedings of the ACM Workshop on Formal Methods in Security Engineering, 2008.
[17] C. Bansal, K. Bhargavan, and S. Maffeis, “Discovering concrete attacks on website authorization by formal analysis,” in Proceedings of the IEEE Computer Security Foundations Symposium, 2012.
[18] A. Barth, “The web origin concept,” 2010. [Online]. Available: https://tools.ietf.org/html/rfc6454
[19] ——, “HTTP state management mechanism,” 2011. [Online]. Available: https://tools.ietf.org/html/rfc6265
[20] A. Barth, C. Jackson, and J. C. Mitchell, “Robust defenses for cross-site request forgery,” in Proceedings of the ACM Conference on Computer and Communications Security, 2008.
[21] A. Bortz, D. Boneh, and N. Palash, “Exposing private information by timing web applications,” in Proceedings of the International Conference on World Wide Web, 2007.
[22] M. Cardwell. (2011) Abusing HTTP Status Codes to Expose Private Information. [Online]. Available: https://www.grepular.com/
[23] A. Clover, “CSS visited pages disclosure,” BUGTRAQ mailing list posting, 2002.
[24] G. Crawley. (2018) Thousands hit by porn blackmail scam. [Online]. Available: https://www.express.co.uk/news/uk/993251/porn-blackmail-scam-cyber-criminals-demanding-ransom
[25] A. Czeskis, A. Moshchuk, T. Kohno, and H. Wang, “Lightweight server support for browser-based CSRF protection,” in Proceedings of the International Conference on World Wide Web, 2013.
[26] C. Evans. (2008) Cross-domain leaks of site logins. [Online]. Available: https://scarybeastsecurity.blogspot.com/2008/08/cross-domain-leaks-of-site-logins.html
[27] ——. (2009) Cross-domain search timing. [Online]. Available: https://scarybeastsecurity.blogspot.com/2009/12/cross-domain-search-timing.html
[28] E. W. Felten and M. A. Schneider, “Timing attacks on web privacy,” in Proceedings of the ACM Conference on Computer and Communications Security, 2000.
[29] G. Franken, T. V. Goethem, and W. Joosen, “Who left open the cookie jar? A comprehensive evaluation of third-party cookie policies,” in Proceedings of the USENIX Security Symposium, 2018.
[30] J. Franks, P. Hallam-Baker, J. Hostetler, S. Lawrence, P. Leach, A. Luotonen, and L. Stewart, “HTTP authentication: Basic and digest access authentication,” 1999. [Online]. Available: https://tools.ietf.org/html/rfc2617
[31] N. Gelernter and A. Herzberg, “Cross-site search attacks,” in Proceedings of the ACM SIGSAC Conference on Computer and Communications Security, 2015.
[32] J. Grossman. (2006) Advanced Web Attack Techniques using GMail. [Online]. Available: http://blog.jeremiahgrossman.com/2006/01/advanced-web-attack-techniques-using.html
[33] ——. (2006) I know if you’re logged-in, anywhere. [Online]. Available: https://blog.jeremiahgrossman.com/2006/12/i-know-if-youre-logged-in-anywhere.html
[34] ——. (2008) Login Detection, whose problem is it? [Online]. Available: https://blog.jeremiahgrossman.com/2008/03/login-detection-whose-problem-is-it.html
[35] ——. (2012) I Know What Websites You Are Logged-In To (Login-Detection via CSRF). [Online]. Available: http://web.archive.org/web/20160317054027/https://www.whitehatsec.com/blog/i-know-what-websites-you-are-logged-in-to-login-detection-via-csrf/
[36] J. Grossman and R. Hansen. (2006) Detecting States of Authentication With Protected Images. [Online]. Available: http://web.archive.org/web/20150417095319/http://ha.ckers.org/blog/20061108/detecting-states-of-authentication-with-protected-images/
[37] C. Guan, K. Sun, Z. Wang, and W. Zhu, “Privacy breach by exploiting `postMessage` in HTML5: Identification, evaluation, and countermeasure,” in Proceedings of the ACM on Asia Conference on Computer and Communications Security, 2016.
[38] G. G. Gulyas, D. F. Some, N. Bielova, and C. Castelluccia, “To extend or not to extend: On the uniqueness of browser extensions and web logins,” in Workshop on Privacy in the Electronic Society, 2018.
[39] A. Hern. (2016) Spouses of Ashley Madison users targeted with blackmail letters. [Online]. Available: https://www.theguardian.com/technology/2016/mar/03/ashley-madison-users-spouses-targeted-by-blackmailers
[40] E. Homakov. (2013) Bug 313737 - Disclose domain of redirect destination taking advantage of CSP. [Online]. Available: https://bugs.chromium.org/p/chromium/issues/detail?id=313737
[41] ——. (2014) Using Content-Security-Policy for Evil. [Online]. Available: http://homakov.blogspot.com/2014/01/using-content-security-policy-for-evil.html
[42] C. Jackson, A. Bortz, D. Boneh, and J. C. Mitchell, “Protecting browser state from web privacy attacks,” in Proceedings of the International Conference on World Wide Web, 2006.
[43] A. Janc and M. West, “How do we Stop Spilling the Beans Across Origins,” 2018. [Online]. Available: https://www.arturjanc.com/cross-origin-infoleaks.pdf
[44] M. A. Jaro, “Advances in record-linkage methodology as applied to matching the 1985 census of Tampa, Florida,” Journal of the American Statistical Association, vol. 84, no. 406, pp. 414–420, 1989.
[45] M. Johns and J. Winter, “RequestRodeo: Client-side protection against session riding,” 2006. [Online]. Available: https://www.owasp.org/images/4/42/RequestRodeo-MartinJohns.pdf
[46] S. Khodayari. (2019) De-anonymization attack: Cross-site information leakage. [Online]. Available: https://hackerone.com/reports/723175
[47] S. Lee, H. Kim, and J. Kim, “Identifying cross-origin resource status using application cache,” in Proceedings of the Network and Distributed Systems Security Symposium, 2015.
[48] S. Lekies, M. Johns, W. Tighzert et al., “The state of the cross-domain nation,” in Proceedings of the IEEE Web 2.0 Security & Privacy, 2011.
[49] S. Lekies, B. Stock, and M. Johns, “25 million flows later: Large-scale detection of DOM-based XSS,” in Proceedings of the ACM SIGSAC conference on Computer & communications security, 2013.
[50] S. Lekies, B. Stock, M. Wentzel, and M. Johns, “The unexpected dangers of dynamic JavaScript,” in Proceedings of the USENIX Security Symposium, 2015.
[51] R. Linus. (2016) Your Social Media Fingerprint. [Online]. Available: https://github.com/RobinLinus/socialmedia-leak
[52] R. Masas. (2018) Patched Facebook Vulnerability Could Have Exposed Private Information About You and Your Friends. [Online]. Available: https://www.imperva.com/blog/facebook-privacy-bug/
[53] L. Olejnik, C. Castelluccia, and A. Janc, “Why Johnny Can’t Browse in Peace: On the Uniqueness of Web Browsing History Patterns,” in Proceedings of the Workshop on Hot Topics in Privacy Enhancing Technologies, 2012.
[54] M. Perry, E. Clark, S. Murdoch, and G. Koppen, “The Design and Implementation of the Tor Browser [DRAFT],” 2018. [Online]. Available: https://2019.www.torproject.org/projects/torbrowser/design/#identifier-linkability
[55] Ron, Masas. (2019) Mapping communication between Facebook accounts using a browser-based side channel attack. [Online]. Available: https://www.imperva.com/blog/mapping-communication-between-facebook-accounts-using-a-browser-based-side-channel-attack/
[56] I. Sanchez-Rola, D. Balzarotti, and I. Santos, “Bakingtimer: Privacy analysis of server-side request processing time,” in Proceedings of the Annual Computer Security Applications Conference, 2019.
[57] J. Schwenk, M. Niemietz, and C. Mainka, “Same-origin policy: Evaluation in modern browsers,” in Proceedings of the USENIX Security Symposium (USENIX Security 17), 2017.
[58] R. Sharma, “Preventing cross-site attacks using same-site cookies,” 2017. [Online]. Available: https://blogs.dropbox.com/tech/2017/03/preventing-cross-site-attacks-using-same-site-cookies/
[59] C. Shiﬂett. (2006) JavaScript Login Check. [Online]. Available: http://shiflett.org/blog/2006/javascript-login-check
[60] M. Smith, C. Disselkoen, S. Narayan, F. Brown, and D. Stefan, “Browser history re:visited,” in Proceedings of the USENIX Workshop on Offensive Technologies, 2018.
[61] C. A. Staicu and M. Pradel, “Leaky images: Targeted privacy attacks in the web,” in Proceedings of the USENIX Security Symposium, 2019.
[62] B. Stock, M. Johns, M. Steffens, and M. Backes, “How the web tangled itself: Uncovering the history of client-side web (in)security,” in Proceedings of the USENIX Security Symposium, 2017.
[63] T. Terada, “Identifier-based XSSI attacks,” 2015. [Online]. Available: https://www.mbsd.jp/Whitepaper/xssi.pdf
[64] T. Van Goethem, W. Joosen, and N. Nikiforakis, “The clock is still ticking: Timing attacks in the modern web,” in Proceedings of the ACM SIGSAC Conference on Computer and Communications Security, 2015.
[65] E. Vela Nava, L. Herrera, R. Masas, K. Kotowicz, A. Saftnes, Terjanq, and Stephen. (2019) Browser Side Channels. [Online]. Available: https://github.com/xsleaks/xsleaks/wiki/Browser-Side-Channels
[66] R. Wang, S. Chen, and X. Wang, “Signing me onto your accounts through Facebook and Google: A traffic-guided security study of commercially deployed single-sign-on web services,” in Proceedings of the IEEE Symposium on Security and Privacy, 2012.
[67] M. West, “Same-site cookies,” 2016. [Online]. Available: https://tools.ietf.org/html/draft-west-first-party-cookies-07
[68] ——, “Fetch metadata request headers,” 2018. [Online]. Available: https://mikewest.github.io/sec-metadata/
[69] ——, “Incrementally better cookies,” 2019. [Online]. Available: https://tools.ietf.org/html/draft-west-cookie-incrementalism-00
[70] G. Wondracek, T. Holz, E. Kirda, and C. Kruegel, “A practical attack to de-anonymize social network users,” in Proceedings of the IEEE Symposium on Security and Privacy, 2010.
[71] T. Yoneuchi. (2018) Detect a bug in Firefox’s CSP Implementation: the Same-Origin Redirection with CSP Fingerprinting. [Online]. Available: https://diary.shift-js.info/csp-fingerprinting/
[72] M. Zalewski. (2008) Browser security handbook, part 2. [Online]. Available: https://code.google.com/archive/p/browsersec/wikis/Part2.wiki#Same-origin_policy