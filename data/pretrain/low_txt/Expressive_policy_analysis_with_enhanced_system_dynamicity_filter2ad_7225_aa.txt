# Expressive Policy Analysis with Enhanced System Dynamicity

**Authors:**
- Robert Craven, Department of Computing, Imperial College London
- Jorge Lobo, IBM T.J. Watson Research Center
- Jiefei Ma, Department of Computing, Imperial College London
- Alessandra Russo, Department of Computing, Imperial College London
- Emil C. Lupu, Department of Computing, Imperial College London
- Arosha K. Bandara, Department of Computing, Open University

## Abstract
Despite significant research efforts, effective analysis of policy-based systems remains a challenge. An ideal policy analysis framework should (i) be expressive, (ii) account for obligations and authorizations, (iii) incorporate a dynamic system model, and (iv) provide useful diagnostic information. This paper introduces a logic-based policy analysis framework that meets these requirements. We demonstrate how the framework can analyze various policy-related properties and present details of a prototype implementation.

## Categories and Subject Descriptors
- **K.6.4 [Computing Milieux]:** Management of Computing and Information Systems—System Management
- **K.6.1 [Computing Milieux]:** Management of Computing and Information Systems—Project and People Management

## General Terms
- Design, Management

## Keywords
- Policies, Formal Analysis, Security, Authorization

## Acknowledgments
This research was sponsored by the U.S. Army Research Laboratory and the U.K. Ministry of Defence under Agreement Number W911NF-06-3-0001. The views and conclusions in this document are those of the authors and do not represent the official policies of the U.S. Army Research Laboratory, the U.S. Government, the U.K. Ministry of Defence, or the U.K. Government. The U.S. and U.K. Governments are authorized to reproduce and distribute reprints for government purposes, notwithstanding any copyright notation hereon.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee.

**ASIACCS '09, March 10–12, 2009, Sydney, NSW, Australia**
**Copyright 2009 ACM 978-1-60558-394-5/09/03 ...$5.00.**

## 1. Introduction
The expressiveness of a policy language is closely related to its ability to regulate complex system behavior and handle frequent changes, such as in mobile systems. Without effective analysis, the benefits of policy-based techniques and declarative policy languages may be limited. Several key properties are essential for a robust policy framework:

1. **Expressiveness:** The framework should allow the formal specification of both authorization and obligation policies, including complex dependencies. It should also enable policy decisions to depend on the evolving system history, providing fine-grained defaults.
2. **Powerful Policy Analysis:** The framework should support the analysis of necessary and desirable properties, including modality conflicts, separation of duty conflicts, coverage gaps, policy comparison, and behavioral simulation.
3. **Rich Diagnostic Information:** The analysis component should provide detailed diagnostic information, including system traces, policy decisions, and actions related to queried properties.
4. **Separation of Policy and System Behavior:** The framework should separate the policy description from the system behavior, allowing for the analysis of policies across different systems.

This paper presents an expressive logical framework for policy specification, incorporating abductive, constraint logic programming (ACLP) and the Event Calculus (EC) to describe system states and policy applicability. Our approach supports more dynamic policy models and includes an explicit representation of time, making it suitable for managing security and other applications like context-aware adaptation and privacy. The framework is expressive enough to automatically translate existing policy notations such as Ponder2, XACML, and Cassandra.

## 2. Related Work
- **Lithium Language [20]:** Uses pure first-order logic, requiring complete definitions and lacking default rules. Our framework simplifies specifications and supports hypothetical analysis through abduction.
- **Obligation Policies [21, 15]:** Our treatment of obligations is based on deontic logic and allows for more complex policies, including mutual dependence.
- **Access Control Policies [4, 24, 23, 11]:** These works focus on RBAC policies and some conflict detection but lack a fully dynamic system model.
- **Transaction Logic Programs [5]:** Similar to our approach but limited to sequences of operations and lacks explicit prohibitions.
- **Abduction for Authorization [6, 17]:** Uses abduction for access control analysis but does not include a fully dynamic system model.

## 3. Syntax and Semantics
This section provides the syntax and semantics of our policy language, along with illustrative examples.

## 4. Policy Analysis
We discuss the types of analysis our language supports, including the implementation and complexity properties.

## 5. Conclusions and Future Work
We summarize the contributions of our work and outline future research directions.

For more details, please refer to the full paper and the prototype implementation available at:
[http://www.doc.ic.ac.uk/~rac101/ffpa/](http://www.doc.ic.ac.uk/~rac101/ffpa/)