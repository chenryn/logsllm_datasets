### Autoencoder

We directly input the weights of the MSDEG (Microservice Data Exchange Graph) into our neural network model, specifically an Autoencoder. The number of neurons in each layer of the neural network should remain constant during both the training and anomaly detection phases. Consequently, if a new data exchange occurs between two nodes of the graph at runtime that was not observed in the training dataset, the graph is considered to represent an abnormal behavior of the application. This could lead to false alarms for applications that frequently change their communication patterns.

### Role Identification

In our role identification algorithm, we use the names of threads to calculate role IDs for thread role identification. Therefore, we assume that all threads explicitly set a name for themselves. Additionally, since we use the binary hash of processes in our process role identification algorithm, our focus is on applications primarily written in compiled languages. In interpreted languages (e.g., Python), there could be collisions in the IDs, which may reduce performance.

### 6.2 Experimental Results Discussion

#### 6.2.1 SGW IP Modification

Since LTE requires mutual authentication between a user and the network, a rogue eNB (Evolved Node B) must communicate with the original MME (Mobility Management Entity) to deceive the user equipment into starting the session. After authentication, the eNB can forward the user traffic to the malicious gateway because there is no encryption or authentication between the user and the gateway. The difference between the normal attach procedure and this attack is that, in the last step of the normal procedure, the eNB exchanges a few UDP packets with the gateway, which does not occur during the attack. The absence of these packets results in an abnormal ratio of data exchange between the (eNB, MME) and (eNB, SPGW-U) edges in the microservice data exchange graph built by DistAppGuard.

#### 6.2.2 False Downlink Data Notification

Downlink Data Notification is a signal normally sent by the SGW (Serving Gateway) to the MME when a user, who is not connected to the network, has incoming data. The MME then pages the UE (User Equipment), and after UE authentication, the data is received. However, during this attack, the malicious SGW sends Downlink Data Notification signals without receiving any incoming traffic from the PGW (Packet Data Network Gateway).

The goal of this attack is to increase signaling latencies by putting memory pressure on the MME and draining the battery of the users' equipment. Therefore, the malicious SGW needs to send several false signals periodically, causing an abnormal traffic ratio between the incoming data-related signals sent by the PGW to the SGW and the SGW to the MME.

#### 6.2.3 Purging Subscribers’ Context from MME

Based on LTE design, PGWs are not directly connected to the MME. The signaling between them is routed through SGWs. SGWs and PGWs that are connected exchange heartbeat packets periodically (e.g., every 5 seconds). Due to cloud resource management policies and optimization, a PGW container can be stopped and restarted in a new location. When a PGW is relocated, the SGW that was connected to the PGW will send a signal to the MME when the heartbeat fails. The MME will then page all UEs served by the stopped PGW to connect them to the new PGW. Simultaneous attempts by multiple UEs to connect to the network can result in an overload.

During this scenario, when the main process of the PGW is shutting down, it reads and writes some data to specific files and releases a large number of memory pages. However, when the malicious SGW sends a fake "PGW restart notification" signal, there will be no such disk or memory changes. As a result, there will be an abnormal combination of data exchange flows among: 1) PGW writing to those specific files, 2) PGW releasing memory, 3) MME’s paging thread and eNB, 4) eNB’s paging thread and UEs.

### 7 Related Work

We classify the literature into two main categories: network-based anomaly detection and host-based anomaly detection in virtualized environments. Our focus is primarily on the latter, as it is more closely related to our work.

#### Network-based Intrusion Detection

In virtual network environments, prior research has attempted to address the limitations of traditional network-based intrusion detection systems (NIDS). Amjad et al. [7] suggest analyzing the network flow between virtual machines in a cloud environment using machine learning-based anomaly detection. In [18], the authors present an information entropy approach for detecting DDoS attacks against HTTP in the cloud using Support Vector Machine and Random Forest ML models. [34] adopts an aggregation content anomaly detection technique in the cloud and uses Random Forest for distributed attack detection. [4] uses artificial neural networks to detect distributed denial-of-service (DDoS) attacks in the cloud. However, their work focuses on network layer detection and is unable to detect insider attacks.

#### Host-based Intrusion Detection

To enhance the visibility of monitored virtual machines or virtual applications, prior work has explored host-based anomaly detection in virtual environments. Wang et al. [33] and Du et al. [10] use machine learning to analyze real-time performance data such as memory, CPU, and network metrics to identify container-based anomalies. Using resource consumption behavioral analysis and autoregressive models, [27] provides an anomaly detection method for container-based microservices. However, during stealthy attacks, certain characteristics do not alter significantly.

Using system calls as the raw input for intrusion detection has been employed in virtual environments. Alarifi and Wolthusen [3] use a Hidden Markov Model (HMM) to evaluate sequences of system calls for virtual machines. Gupta et al. [17] propose an algorithm called immediate system call sequence (ISCS) to determine malicious program executions in the Cloud. However, due to their exponential complexity, sequence-based approaches (e.g., n-grams or automaton-based methods) are only successful if an attack can be discovered within a short detection window. In [1], Abed et al. combine the bag of system calls (BoSC) with the sliding window technique to ignore the sequence of system calls and only monitor the frequencies of each system call for anomaly detection. Azab et al. [6] use BoSC to detect cross-channel attacks in a containerized environment. Frequency-based methods, however, suffer from high false alarm rates due to the loss of detailed information on system calls. Mishari et al. [21] combine the idea of n-grams and BoSC, and use a bag of n-grams to extract features from system call traces, apply binary particle swarm optimization (BPSO) for feature selection, and finally leverage Random Forest to distinguish between normal and abnormal behaviors. [22] also uses the bag of n-grams technique to extract features from system call logs and uses Principal Component Analysis (PCA) with ensemble learning. Although they show promising results in predicting the maliciousness of a process, their approach can only detect attacks whose symptoms are observable from a single process or a single host. Furthermore, the bag of n-grams is not capable of detecting long-span attacks on distributed applications due to their unsynchronized and non-blocking nature.

### 8 Conclusion

In this paper, we proposed a novel application profiling framework, DistAppGuard, to address the challenging task of profiling the behavior of a virtual application distributed over multiple hosts in a cloud. Traditional approaches for profiling applications’ behavior fail against new distributed stealthy attacks that do not leave any traces on a single process or microservice. DistAppGuard builds a graph for each time interval, representing an application’s behavior, by collecting and correlating the system calls of the application’s processes and threads. By feeding the generated graphs into an optimized Autoencoder model (microservice-aware Autoencoder), it trains a model representing the normal status of the application, which will be used for anomaly detection at runtime. Experiments on real-world attacks demonstrated the effectiveness of DistAppGuard in detecting distributed stealthy attacks with a high detection rate and a low false alarm rate.

In future work, we will improve DistAppGuard's efficiency and feasibility by investigating more complex neural networks. We will also explore different approaches for localizing the cause of the anomaly after detection.

### References

[1] Amr S. Abed, Charles Clancy, and David S. Levy. 2015. Intrusion Detection System for Applications Using Linux Containers. In 11th International Workshop on Security and Trust Management. 123–135.

[2] I. Ahmad, T. Kumar, M. Liyanage, J. Okwuibe, M. Ylianttila, and A. Gurtov. 2018. Overview of 5G Security Challenges and Solutions. IEEE Communications Standards Magazine 2, 1 (2018), 36–43.

[3] Suaad S Alarifi and Stephen D Wolthusen. 2012. Detecting anomalies in IaaS environments through virtual machine host system call analysis. In International Conference for Internet Technology and Secured Transactions. 211–218.

[4] Ahmed Alzahrani. 2020. An Optimized Approach-Based Machine Learning to Mitigate DDoS Attack in Cloud Computing. International Journal of Engineering Research and Technology 13 (06 2020), 1441.

[5] Sanjeev Arora, Nadav Cohen, Noah Golowich, and Wei Hu. 2019. A Convergence Analysis of Gradient Descent for Deep Linear Neural Networks. In 7th International Conference on Learning Representations, ICLR 2019, New Orleans, LA, USA, May 6-9, 2019. OpenReview.net. https://openreview.net/forum?id=SkMQg3C5K7

[6] M. Azab, B. M. Mokhtar, A. S. Abed, and M. Eltoweissy. 2016. Smart Moving Target Defense for Linux Container Resiliency. In IEEE 2nd International Conference on Collaboration and Internet Computing (CIC’16). 122–130.

[7] Amjad Hussain Bhat, Sabyasachi Patra, and Debasish Jena. 2013. Machine learning approach for intrusion detection on cloud virtual machines. International Journal of Application or Innovation in Engineering & Management (IJAIEM’13) 2, 6 (2013), 56–66.

[8] Raouf Boutaba, Mohammad Ali Salahuddin, Noura Limam, et al. 2018. A comprehensive survey on machine learning for networking: evolution, applications and research opportunities. Journal of Internet Services and Applications 9, 1 (2018), 1–99.

[9] Van Loi Cao, Miguel Nicolau, and James McDermott. 2019. Learning Neural Representations for Network Anomaly Detection. IEEE Transactions on Cybernetics 49, 8 (2019), 3074–3087.

[10] Qingfeng Du, Tiandi Xie, and Yu He. 2018. Anomaly detection and diagnosis for container-based microservices with performance monitoring. In International Conference on Algorithms and Architectures for Parallel Processing. 560–572.

[11] Christian Esposito, Aniello Castiglione, and Kim-Kwang Raymond Choo. 2016. Challenges in Delivering Software in the Cloud as Microservices. IEEE Cloud Computing 3 (2016), 10–14.

[12] José Flora and Nuno Antunes. 2019. Studying the Applicability of Intrusion Detection to Multi-Tenant Container Environments. In 2019 15th European Dependable Computing Conference (EDCC). 133–136.

[13] Chrystel Gaber, José Sánchez Vilchez, Gürkan Gür, Morgan Chopin, Nancy Perrot, Jean-Luc Grimault, and Jean-Philippe Wary. 2020. Liability-Aware Security Management for 5G. In 2020 IEEE 3rd 5G World Forum (5GWF). 133–138.

[14] Mohammad Mahdi Ghorbani, Fereydoun Farrahi Moghaddam, Mengyuan Zhang, Makan Pourzandi, Kim Khoa Nguyen, and Mohamed Cheriet. 2020. Malchain: Virtual Application Behaviour Profiling by Aggregated Microservice Data Exchange Graph. In IEEE International Conference on Cloud Computing Technology and Science (CloudCom’20). 41–48.

[15] Xavier Glorot and Yoshua Bengio. 2010. Understanding the difficulty of training deep feedforward neural networks. In Proceedings of the Thirteenth International Conference on Artificial Intelligence and Statistics (Proceedings of Machine Learning Research, Vol. 9). PMLR, 249–256.

[16] Ian Goodfellow, Yoshua Bengio, and Aaron Courville. 2016. Deep Learning. MIT Press. http://www.deeplearningbook.org.

[17] Savita Gupta and Padam Kumar. 2014. An Immediate System Call Sequence Based Approach for Detecting Malicious Program Executions in Cloud Environment. Wireless Personal Communications 81 (03 2014), 405–425.

[18] Mohamed Idhammad, Afdel Karim, and Mustapha Belouch. 2018. Detection System of HTTP DDoS Attacks in a Cloud Environment Based on Information Theoretic Entropy and Random Forest. Security and Communication Networks 2018 (2018), 1263123:1–1263123:13.

[19] Pooyan Jamshidi, Claus Pahl, Nabor C. Mendonça, James Lewis, and Stefan Tilkov. 2018. Microservices: The Journey So Far and Challenges Ahead. IEEE Software 35, 3 (2018), 24–35.

[20] Yuhang Lin, Olufogorehan Tunde-Onadele, and Xiaohui Gu. 2020. CDL: Classified Distributed Learning for Detecting Security Attacks in Containerized Applications. 179–188.

[21] P. Mishra, P. Aggarwal, A. Vidyarthi, P. Singh, B. Khan, H. Haes Alhelou, and P. Siano. 2021. VMShield: Memory Introspection-based Malware Detection to Secure Cloud-based Services against Stealthy Attacks. IEEE Transactions on Industrial Informatics (2021), 1–1.

[22] Preeti Mishra, Akash Negi, Emmanuel Pilli, and R. Joshi. 2019. VMProtector: Malign Process Detection for Protecting Virtual Machines in Cloud Environment. 360–369.

[23] Preeti Mishra, Emmanuel S Pilli, Vijay Varadharajan, and Udaya Tupakula. 2017. Intrusion detection techniques in cloud environment: A survey. Journal of Network and Computer Applications 77 (2017), 18–47.

[24] Chirag Modi, Dhiren Patel, Bhavesh Borisaniya, Hiren Patel, Avi Patel, and Muttukrishnan Rajarajan. 2013. A survey of intrusion detection techniques in Cloud. Journal of Network and Computer Applications 36 (2013), 42–57.

[25] Suresh Peddoju, Himanshu Upadhyay, Jayesh Soni, and Nagarajan Prabakar. 2020. Natural Language Processing based Anomalous System Call Sequences Detection with Virtual Memory Introspection. International Journal of Advanced Computer Science and Applications 11 (01 2020).

[26] F. Pedregosa, G. Varoquaux, A. Gramfort, et al. 2011. Scikit-learn: Machine Learning in Python. Journal of Machine Learning Research 12 (2011), 2825–2830.

[27] Rajsimman Ravichandiran, Hadi Bannazadeh, and A. Leon-Garcia. 2018. Anomaly Detection using Resource Behaviour Analysis for Autoscaling systems. In IEEE 4th Conference on Network Softwarization and Workshops (NetSoft’18). 192–196.

[28] M. T. Raza, S. Lu, and M. Gerla. 2019. vEPC-sec: Securing LTE Network Functions Virtualization on Public Cloud. IEEE Transactions on Information Forensics and Security 14, 12 (2019), 3287–3297.

[29] Yu Rong, Wenbing Huang, Tingyang Xu, and Junzhou Huang. 2020. DropEdge: Towards Deep Graph Convolutional Networks on Node Classification. In International Conference on Learning Representations. https://openreview.net/forum?id=Hkx1qkrKPr

[30] Mayu Sakurada and Takehisa Yairi. 2014. Anomaly Detection Using Autoencoders with Nonlinear Dimensionality Reduction. 4–11.

[31] L. Wan, M. Zeiler, Sixn Zhang, Y.L. Cun, and R. Fergus. 2013. Regularization of neural networks using dropconnect. Proceedings of the 30th International Conference on Machine Learning (ICML-13) (01 2013), 1058–1066.

[32] Tao Wang, Jiwei Xu, Wenbo Zhang, Zeyu Gu, and Hua Zhong. 2017. Self-adaptive cloud monitoring with online anomaly detection. Future Generation Computer Systems 80 (10 2017).

[33] Y. Wang, Q. Wang, X. Chen, D. Chen, X. Fang, M. Yin, and N. Zhang. 2020. ContainerGuard: A Real-Time Attack Detection System in Container-based Big Data Platform. IEEE Transactions on Industrial Informatics (2020), 1–1.

[34] Sean Whalen, Nathaniel Boggs, and Salvatore Stolfo. 2014. Model Aggregation for Distributed Content Anomaly Detection. Proceedings of the ACM Conference on Computer and Communications Security 2014 (11 2014), 61–71.