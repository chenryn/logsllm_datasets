# 优化后的文本

## 代码示例
```c
att_addguard((char*)&(p->guard1));
att_addguard((char*)&(p->guard2));
strcpy(p->name, s);
att_reserveguard((char*)&guard3);
att_reserveguard((char*)&(p->guard1));
att_reserveguard((char*)&(p->guard2));
att_free(p);
return 0;
}

int main(int argc, char *argv[]) {
    int guard4;
    char buf[10];
    int guard5;
    struct info person;

    att_initialization(50);
    att_addguard((char*)&guard0);
    att_addguard((char*)&guard4);
    att_addguard((char*)&guard5);
    att_addguard((char*)&person.guard1);
    att_addguard((char*)&person.guard2);
    strcpy(person.name, "Alice");
    foo(argv[1]);
    att_reserveguard((char*)&guard0);
    att_reserveguard((char*)&guard4);
    att_reserveguard((char*)&guard5);
    att_reserveguard((char*)&person.guard1);
    att_reserveguard((char*)&person.guard2);
    att_exit();
    return 0;
}
```

## 说明
图3. 仪器化程序
一些库函数可能会直接操作结构体对象。例如，`memset` 和 `memcpy` 函数可以用来设置或复制结构体的内容。在这种情况下，结构体内的数据保护会被改变或复制到其他地方。这可能会导致误报或被攻击者利用来恢复被破坏的数据保护。因此，如果一个结构体对象涉及 `memset` 函数，我们会在 `memset` 之前插入代码来存储其数据保护值，并在 `memset` 之后恢复这些值。如果 `memcpy` 涉及结构体对象，我们会在 `memcpy` 之后插入代码来为目标结构体对象分配新的数据保护值。

## 评估
我们在第3节中讨论了数据边界完整性模型能够捕获广泛的攻击。我们还编写了一些示例易受攻击的程序，并在TelosB [12]传感器节点上验证了其有效性。以下实验的主要目的是评估该方案在资源受限的传感器节点上的效率。

我们使用TinyOS [11]实现了我们的方案，并在TelosB传感器节点上进行了实验。我们使用SHA1作为哈希函数，并取结果的最高32位作为数据保护值。注意，这是合理的，因为两个数据保护具有相同值的可能性仍然非常小。此外，我们没有对库函数进行认证语义的插桩。

### 内存开销
我们的方案引入了静态和动态内存开销。对于静态内存，它为传感器节点引入了一个额外的认证模块，在我们的实现中占用约1K内存。SHA1模块占用2K内存。对程序进行认证插桩也会增加代码大小。在实验中，我们测量了具有不同数量数据保护的应用程序的可执行文件大小，结果如表1所示。第一列是程序中的局部变量数量；第二列是没有认证方案的镜像大小；第三列是集成了认证方案的程序的镜像大小。它包括认证插桩代码、认证模块和SHA1模块。结果显示，每增加10个数据保护，平均内存增加约230字节。

对于动态内存开销，我们的方案维护了一个可调整的列表来记录所有数据保护。注意，列表中每个项目的大小很小。在实验中，我们每个项目仅使用7字节：4字节用于数据保护值，3字节用于存储数据保护属性（如内存地址、偏移量和状态信息）。换句话说，1K内存可以容纳近150个动态数据保护。数据保护也使用堆栈或堆内存动态地。然而，这种内存成本是暂时的，因为它们在函数返回或释放堆内存后会释放。

| 数据数量 | 旧大小 | 新大小 |
|----------|--------|--------|
| 1        | 14608  | 14838  |
| 10       | 15056  | 15276  |
| 20       | 15716  | 11166  |
| 30       | 11166  | 11186  |
| 50       | 11186  | 11186  |

表1. 静态内存开销。数据数量表示应用程序中有多少个数据变量；旧大小是没有认证方案的应用程序镜像大小；新大小是集成了认证方案的应用程序镜像大小，包括认证插桩语义、认证模块和SHA1模块。

### 计算开销
我们的方案的主要计算成本是运行时的数据保护值测量。平均而言，我们需要一次读取、两次写入和两次哈希计算来为数据保护分配一个新值。在从函数返回之前，我们还需要保留其局部数据保护值。当数据保护列表满时，我们还需要重新排列它，即重新分配存活数据保护的值。

计算新数据保护值的频率取决于程序结构和运行时程序行为，即执行路径。假设一条执行路径有m个用户定义的函数调用，每个函数平均有n个数据保护。那么在运行时需要创建m * n个数据保护。同样，在这个过程中也需要保留m * n个数据保护。

我们在所有m和n的组合上进行了实验，其中m在集合{1, 2, 3, 4, 5, 10, 15, 20}中，n在集合{1, 2, 3, 4, 5, 8, 10}中。数据保护列表的长度为30，实验结果如图4所示。可以看到，测量数据保护值所需的时间几乎与数据保护的数量成线性关系。添加一个新的数据保护到列表中，计算其值并保存到列表中大约需要0.01秒。

在实际应用中，我们可以进一步改进计算成本。例如，我们可以使用更快的哈希函数，或者只在缓冲区而不是所有程序数据中添加数据保护。

此外，请记住，我们的方案如第3节所述引入了少量的通信开销。因此，我们的认证方案在传感器网络中是实用的。

## 相关工作
已经研究了许多技术来抵御基于内存访问检查技术的主机计算机中的缓冲区溢出或内存损坏攻击。例如，Purify [10]的工作在每次内存读写操作中插入检查逻辑，以检测几种类型的访问错误，如向已释放的内存写入。[1]的工作基于扩展的安全指针表示和程序转换技术检查指针和数组访问。其他动态监控方法，如[16, 17]也被提出用于运行时检查。然而，尚不清楚它们是否可以应用于资源有限的传感器系统。

数据保护方法类似于StackGuard [4]，后者使用canary word来保护堆栈中的返回地址。但是，我们的观点更为通用。使用StackGuard时，溢出缓冲区以操纵返回地址将破坏放置在返回地址之前的canary word。可以在函数返回时检查canary word。StackGuard不能直接应用于保护其他程序数据。

此外，一旦攻击者攻破了系统，StackGuard就无法提供保护，也没有人知道系统中发生了什么。在我们的方法中，即使攻击者攻破了系统，我们也打算保护所有程序数据对象。我们提供了一种方式来判断传感器系统是否可信。

## 局限性
请注意，我们的方法不能检测不破坏数据保护值的攻击。一种重要的此类攻击是格式字符串攻击，其中外部数据可以用作printf系列函数的格式。因此，攻击者可以直接读写任何内存内容，但不一定需要破坏任何边界数据保护。然而，在传感器网络中，使用printf系列函数的必要性相对较少。此外，格式字符串漏洞可以通过审计、静态分析方法或更安全的库[3]相对容易地检测到。因此，它们可以在传感器节点部署前修复。只要数据边界未被破坏，DataGuard也无法检测到空指针或野指针引用等程序错误。

我们的实现还引入了一些局限性。首先，它要求通过名称而不是指针和偏移量来访问结构体字段，因为附加的数据保护需要这样处理。其次，它不支持细粒度的数据保护，例如单独保护数组元素。然而，我们注意到这种保护通常不是必需的。第三，对于malloc数据，我们的方法不够精确，因为我们将其视为单个对象。

## 结论
在本文中，我们提出了基于数据边界完整性的无线传感器网络动态数据认证。我们展示了如何设置、测量和管理数据保护。我们开发了一个原型系统并在TelosB节点上进行了实验。实验结果表明，我们的方案在实践中是可行且有效的。未来，我们计划改进实现并研究与其他技术的集成以解决我们的局限性。

## 致谢
作者感谢匿名审稿人的宝贵意见。

## 参考文献
[1] T. M. Austin, S. E. Breach, and G. S. Sohi. Efficient detection of all pointer and array access errors. SIGPLAN Not., 29(6):290–301, 1994.
[2] H. Chan, A. Perrig, and D. Song. Random key predistribution schemes for sensor networks. In IEEE Symposium on Security and Privacy (S&P), pages 197–213, May 2003.
[3] C. Cowan, M. Barringer, S. Beattie, G. Kroah-hartman, M. Frantzen, and J. Lokier. FormatGuard: Automatic Protection From printf Format String Vulnerabilities. In Proceedings of the 10th USENIX security symposium, 2001.
[4] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang. StackGuard: automatic adaptive detection and prevention of buffer-overflow attacks. In Proceedings of the 7th USENIX security symposium, 1998.
[5] M. D. Ernst, J. H. Perkins, P. J. Guo, S. McCamant, C. Pacheco, M. S. Tschantz, and C. Xiao. The daikon system for dynamic detection of likely invariants. In Science of Computer Programming, 2007.
[6] L. Eschenauer and V. D. Gligor. A key-management scheme for distributed sensor networks. In Proceedings of the 9th ACM Conference on Computer and Communications Security (CCS), pages 41–47, November 2002.
[7] A. Francillon and C. Castelluccia. Code injection attacks on harvard-architecture devices. In Proceedings of the 15th ACM conference on computer and communications security (CCS), pages 15–26, 2008.
[23] C. Shuo, J. Xu, E. C. Sezer, P. Gauriar, and R. K. lyer. Non-control-data attacks are realistic threats. In Proceedings of the 14th conference on USENIX Security Symposium, 2005.
[24] Texas Instrument. MSP430 Microcontrollers.
[25] Y. Yang, X. Wang, S. Zhu, and G. Cao. Distributed software-based attestation for node compromise detection in sensor networks. In Proceedings of the 26th IEEE International Symposium on Reliable Distributed Systems, 2007.
[26] Y. Yang, S. Zhu, and G. Cao. Improving Sensor Network Immunity under Worm Attacks: a Software Diversity Approach. In Proceedings of the Ninth ACM International Symposium on Mobile Ad Hoc Networking and Computing (MobiHoc '08), 2008.
[8] D. Gay, P. Levis, R. von Behren, M. Welsh, E. Brewer, and D. Culler. The nesc language: A holistic approach to networked embedded systems. In Proceedings of Programming Language Design and Implementation (PLDI), 2003.
[9] Q. Gu and R. Noorani. Towards self-propagate mal-packets in sensor networks. In Proceedings of the first ACM conference on Wireless network security (WiSec), pages 172–182, 2008.
[10] R. Hastings and B. Joyce. Purify: Fast detection of memory leaks and access errors. In Proceedings of the Winter USENIX Conference, pages 125–136, 1992.
[11] J. Hill, R. Szewczyk, A. Woo, S. Hollar, D. Culler, and K. S. J. Pister. System architecture directions for networked sensors. In Architectural Support for Programming Languages and Operating Systems, pages 93–104, 2000.
[12] P. Joseph, S. Robert, and C. David. Telos: enabling ultra-low power wireless research. In Proceedings of the 4th international symposium on Information processing in sensor networks (IPSN '05), 2005.
[13] C. Kil, E. C. Sezer, A. M. Azab, P. Ning, and X. Zhang. Remote attestation to dynamic system properties: Towards providing complete system integrity evidence. In Proceedings of the 39th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), 2009.
[14] D. Liu and P. Ning. Establishing pairwise keys in distributed sensor networks. In Proceedings of 10th ACM Conference on Computer and Communications Security (CCS), pages 52–61, October 2003.
[15] Nergal. The advanced return-into-lib(c) exploits (PaX case study). Phrack Magazine.
[16] J. Newsome and D. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proceedings of the 12th Annual Network and Distributed System Security Symposium (NDSS), 2005.
[17] O. Ruwase and M. S. Lam. A practical dynamic buffer overflow detector. In Proceedings of the 11th Annual Network and Distributed System Security Symposium (NDSS), 2004.
[18] A. Seshadri, A. Perrig, L. van Doorn, and P. Khosla. Pioneer: Verifying Code Integrity and Enforcing Untampered Code Execution on Legacy Systems. In 20th ACM Symposium on Operating Systems Principles (SOSP), 2005.
[19] A. Seshadri, A. Perrig, L. van Doorn, and P. Khosla. SWATT: Software-based ATTestation for Embedded Devices. In IEEE Symposium on Security and Privacy, May 2004.
[20] H. Shacham. The geometry of innocent flesh on the bone: return-into-libc without function calls (on the x86). In Proceedings of the 14th ACM conference on computer and communications security (CCS), 2007.
[21] M. Shaneck, K. Mahadevan, V. Kher, and Y. Kim. Remote software-based attestation for wireless sensors. In Proceedings of the 2nd European Workshop on Security and Privacy in Ad Hoc and Sensor Networks, 2005.
[22] E. Shi, A. Perrig, and L. van Doorn. BIND: A Time-of-use Attestation Service for Secure Distributed Systems. In Proceedings of the IEEE Symposium on Security and Privacy, 2005.