### 8e2..
### 992..
### a53..
### d91..
### f e7..

#### Proof of MSCmail.a.com’s Presence:
- **CERT_SEC**: Minimum security level of MSC’s standard certificates.
- **TLS_SEC**: Minimum security level of negotiated TLS parameters.
- **Domains**: {MSCmail.a.com, RMSCmail.a.com, H5, H78, H1234}.

### 4. SCP Update Parameters
- **UP_CA_MIN**: Number of signatures required to update the policy.
- **UP_CA_TH**: Threshold number of signatures required to update the policy if not signed by the policy private key.
- **UP_COP_UNTRUSTED**: Cool-off period applied if the new policy is signed by a CA outside CA_LIST.
- **UP_COP_UNLINKED**: Cool-off period applied if the new policy is not signed by the policy private key.

### 5. Soft/Hard Failure Configurations (0 for soft failure, 1 for hard failure)
- **FAIL_CERT_TH**: If the MSC is invalid (CERT_TH not satisfied).
- **FAIL_TLS**: If the TLS security level is too low.
- **FAIL_EXP**: If the log proof has expired (older than LOG_TIMEOUT).
- **FAIL_POL**: If the policy version number is not the most recent.
- **FAIL_LOG**: If the log proof is invalid.
- **FAIL_***: All other failures.

### 6. Inheritance Mask
The inheritance mask describes which fields are inherited by subdomains. The value of CERT_TH also determines the number of CAs required to revoke an MSC. If an MSC is signed by \( n \) CAs, then \( n - \text{CERT_TH} + 1 \) revocations will invalidate the MSC.

- **CERT_SEC Parameter**: Specifies the minimum key length and strength of the cryptographic primitives used by the domain and CA to create the given certificate.
- **CERT_SEC and TLS_SEC Values**:
  - 0: Low security
  - 1: Medium security
  - 2: High security

These values are set by browser vendors and can be updated through browser updates. This allows browser vendors to protect users from cryptographic vulnerabilities as long as users keep their browsers updated. These security levels also protect users and domains from dangerous misconfigurations.

- **Failure Configuration**:
  - **Soft Failure (0)**: The browser displays the reason for the failure and gives users the option to accept the certificate anyway.
  - **Hard Failure (1)**: The user is not allowed to continue.

These configurations allow the domain to take an active role in evaluating and mitigating threats to the security of its connections.

### 5.3 Log Servers
Log servers are trusted and highly-available entities that monitor issued certificates, revocations, and policies. They can be registered at log servers and maintained in the log’s database, stored as Merkle Hash Trees (MHTs). All logs maintain a certificate tree and a policy tree, both based on MHTs.

- **Certificate Tree**: Tracks multi-signature certificates (MSCs).
- **Policy Tree**: Tracks subject certificate policies (SCPs).

The MHT structure allows the log server to produce efficient and cryptographically-secure proofs that a leaf is present in or absent from the tree. In the PoliCert infrastructure, these proofs demonstrate that a certificate is logged, not revoked, and compliant with all applicable subject certificate policies.

To avoid frequent updates to the trees and thus to the proofs, objects are batch-added periodically (e.g., every hour). The update frequencies of log servers are public information, allowing clients to query them after each update or as needed.

When an object is accepted for insertion into a tree, the log server schedules it and returns a signed receipt with a future time at which the object is guaranteed to be present in the log’s database. Log servers are required to produce a proof for a specific entry (certificate or policy) on request, certifying the current validity of that entry. They must also provide a proof of consistency by showing that its database has been extended from a previous version with valid transactions.

### Certificate and Policy Trees
- **Leaf Node (Nx)**: Defined as a tuple \((Lx, Dx, Vx)\) where:
  - \( Lx \): A label used to order the nodes in the tree.
  - \( Dx \): A set of data associated with the node.
  - \( Vx \): The node’s value whose hash is the parent node’s value.

- **Non-leaf Node**: Consists only of a value and will have one or two child nodes. The node’s value will be the hash of its child’s value, or \( H(V1) \oplus H(V2) \) if it has two children.

### Certificate Tree Example
- **Leaf Node (NMSCA)**: Represents a multi-signature certificate (MSCA) for the domain A.
  - \( L_{MSCA} = H(MSCA) \)
  - \( D_{MSCA} = (MSCA, RMSCA) \)
  - \( V_{MSCA} = MSCA \oplus RMSCA \) (if MSCA is still valid, \( V_{MSCA} = MSCA \))

### Policy Tree Example
- **Node (NA)**: Represents a domain name A.
  - **Data Fields**:
    1. \( PA \): SCP of A (null if A has no SCP).
    2. \( SA \): Policy subtree of A.
    3. \( rA \): Root hash of \( SA \).

- **Leaf Node (NA)**:
  - \( LA = A \)
  - \( DA = (PA, SA, rA) \)
  - \( VA = PA \oplus rA \)

The hierarchical organization of the policy tree according to the DNS namespace hierarchy makes it straightforward to find all policies pertaining to a domain name. Each node’s value includes its SCP, simplifying policy enforcement and ensuring all applicable policies are logged and current.

### Proof of Pmail.a.com’s Presence
- **Proof Set**: {Pmail.a.com, rmail.a.com, Ha.com,1, Ha.com,34, Pa.com, Hcom,1, Hcom,34, Pcom, HTLD,4, HTLD,12, HTLD,5678}.

### Consistency Tree
- **Purpose**: To prove the consistency of a log’s database over time.
- **Structure**: An append-only MHT containing all SCP and MSC registrations, updates, and revocations in chronological order.
- **Updates**: Upon each update, the log appends the concatenation of the root hashes of the current certificate and policy trees to the consistency tree. The log provides a proof showing that the root hashes are the most recent ones in the consistency tree.

### 6. Protocol Descriptions
We now describe the steps by which a certificate is created, registered, and validated in the PoliCert architecture. This process involves SCP registration, MSC registration, and client validation. We also describe how certificates and policies can be updated or revoked.

### 6.1 Policy Registration
Before a domain can register a certificate, it must first create and register a subject certificate policy (SCP). A domain A at a.com creates its own policy by specifying any parameters it wishes and obtaining CA signatures on the policy. Only the policy version is required in a valid SCP, so A can choose to specify only a version number if it does not want to enforce any policy on its certificates.

Once A has a valid SCP, it can register the policy at one or more logs by sending a registration request containing the SCP. Logs must globally coordinate to ensure that two different SCPs for A are not active simultaneously (to a given time tolerance). If the registration is successful, the logs send to the domain signed registration receipts containing the policy and a time after which the SCP is guaranteed to be recorded in the log’s database. This receipt serves as a temporary proof of presence for the SCP.

Policies can only be updated, not revoked, and must meet several criteria to be accepted by the logs. The new policy must be signed with the policy private key of the old policy and by a threshold number of CAs (UP_CA_MIN). If the policy private key is lost or compromised, the domain can create an unlinked policy not signed with their policy private key. However, in this case, the domain may need to obtain a larger number of CA signatures (UP_CA_TH) and a “cool-off” period is enforced. During this cool-off period, the new policy is visible but not active, allowing the domain to detect and resolve fraudulent update attempts.

To update its policy, a domain A sends an update request containing \( P'_A \). The log verifies the signatures on the new policy and checks that its policy version number is one more than that of \( P_A \). The log must then check whether the policy update meets the criteria, such as being signed by at least \( \min(\text{UP_CA_MIN}, \text{UP_CA_TH}) \) CAs from CA_LIST (of the old SCP). If not, the logs enforce the cool-off period as specified in the SCP. After a successful update, the log confirms the presence of the new policy by returning a proof of presence to the domain. The domain must then update its own MSCs to signal the use of the new policy.

### 6.2 Certificate Registration
To create a multi-signature certificate, a domain first creates a keypair for establishing TLS connections to clients. It then obtains standard X.509 certificates from CAs and combines them along with a policy binding (signed by its policy private key) into an MSC. The domain sends a certificate registration request to its trusted logs. Unlike the SCP registration process, no global coordination of logs is required. Each log server receiving the registration request validates the certificate and ensures that it is in the LOG_LIST field of the domain’s SCP. If so, the log returns a registration receipt, a signed statement containing the certificate that was registered and a time by which the certificate is guaranteed to be in the log.

Every MSC can be revoked by its owner, by a threshold number of CAs, or by a parent domain (if the policy allows). To revoke an MSC, one of the above three sends a revocation request to all logs on the domain’s LOG_LIST, containing the certificate and the appropriate signatures. If a log receives a revocation request and does not have the corresponding certificate, it adds the MSC along with the revocation request to its certificate tree. The log must not discard the revocation request without this step because otherwise, an adversary could register the revoked MSC at a log server that previously had not recorded the certificate and use it as a valid MSC. Once the log has processed the revocation request, it returns a signed revocation receipt.