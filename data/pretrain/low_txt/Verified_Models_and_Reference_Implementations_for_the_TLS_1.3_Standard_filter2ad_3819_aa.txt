# Verified Models and Reference Implementations for the TLS 1.3 Standard Candidate

**Authors:**
- Karthikeyan Bhargavan
- Bruno Blanchet
- Nadim Kobeissi

**Conference:**
2017 IEEE Symposium on Security and Privacy

## Abstract
TLS 1.3, the next version of the Transport Layer Security (TLS) protocol, is designed to address the increasing demand for low-latency HTTPS connections and to mitigate recent high-profile attacks on TLS. The goal is to create a fresh protocol with modern cryptography that avoids legacy issues. However, there is a risk that it may introduce new vulnerabilities or reintroduce old flaws. After 18 drafts, the protocol is nearing completion, and the working group has called for researchers to analyze the protocol before its publication.

This paper presents a comprehensive analysis of the TLS 1.3 Draft-18 protocol, addressing three key questions:
1. Does TLS 1.3 prevent well-known attacks on TLS 1.2, such as Logjam or the Triple Handshake, even when run in parallel with TLS 1.2?
2. Can we mechanically verify the computational security of TLS 1.3 under standard (strong) assumptions on its cryptographic primitives?
3. How can we extend the guarantees of the TLS 1.3 protocol to the details of its implementations?

To answer these questions, we propose a methodology for developing verified symbolic and computational models of TLS 1.3 alongside a high-assurance reference implementation. We present symbolic ProVerif models for various intermediate versions of TLS 1.3 and evaluate them against a rich class of attacks to identify both known and previously unpublished vulnerabilities. We also present a computational CryptoVerif model for TLS 1.3 Draft-18 and prove its security. Finally, we introduce RefTLS, an interoperable implementation of TLS 1.0-1.3, and automatically analyze its protocol core by extracting a ProVerif model from its typed JavaScript code.

## 1. Introduction
The Transport Layer Security (TLS) protocol is widely used to establish secure channels on the Internet. It was first proposed as SSL in 1994 and has undergone several revisions, leading to the standardization of TLS 1.2 in 2008. Each version adds new features, deprecates obsolete constructions, and introduces countermeasures for weaknesses found in previous versions. Protocol extensions further customize behavior, some of which are mandatory to prevent known attacks.

In practice, many legacy variants of the protocol continue to be supported for backward compatibility. Securely composing and implementing the many different versions and features of TLS has proven to be challenging, leading to the continued discovery of high-profile vulnerabilities.

### A History of Vulnerabilities
We identify four types of attacks that TLS has traditionally suffered from:
1. **Downgrade Attacks:** These enable a network adversary to force a TLS client and server to use a weaker variant of the protocol than they would normally use.
2. **Cryptographic Vulnerabilities:** These rely on weaknesses in the protocol's cryptographic constructions.
3. **Protocol Composition Flaws:** These appear when multiple modes of the protocol interact in unexpected ways.
4. **Implementation Bugs:** These range from memory safety bugs to coding errors and complex state machine flaws.

### Security Proofs
Historically, when an attack is found on TLS, practitioners propose a temporary fix, followed by a longer-term countermeasure in a protocol extension or the next version. This has led to an attack-patch-attack cycle that does not provide much assurance. An alternative approach is to develop security proofs that systematically demonstrate the absence of large classes of attacks in TLS. However, this is exceedingly difficult for an existing standard not designed with security models in mind.

A different approach taken by the protocol verification community is to symbolically analyze cryptographic protocols using simpler, stronger assumptions, commonly referred to as the Dolev-Yao model. Such methods are easy to automate and can tackle large protocols like TLS in detail. Symbolic protocol analyzers are better at finding attacks but provide weaker security guarantees than classic cryptographic proofs.

### Towards Verified Security for TLS 1.3
In 2014, the TLS working group at the IETF began work on TLS 1.3, aiming to design a faster protocol inspired by Google’s QUIC. The working group invited the research community to contribute to the design and analyze its security. Several researchers, including the authors of this paper, responded by developing new security models and cryptographic proofs for various draft versions, and using their analyses to propose protocol changes.

After 18 drafts, TLS 1.3 is entering the final phase of standardization. Although many design decisions have been vetted by multiple security analyses, several unanswered questions remain:
1. Many cryptographic proofs are already obsolete and do not apply to Draft-18.
2. None of these analyses, except [14], consider the composition of TLS 1.3 with legacy versions like TLS 1.2.
3. None of these works addresses TLS 1.3 implementations.

In this paper, we seek to cover these gaps with a new comprehensive analysis of TLS 1.3 Draft-18.

## 2. Our Contributions
We propose a methodology for developing mechanically verified models of TLS 1.3 alongside a high-assurance reference implementation. We present symbolic protocol models for TLS 1.3 written in ProVerif, incorporating a novel security model that accounts for all recent attacks on TLS, including those relying on weak cryptographic algorithms. We use ProVerif to evaluate various modes and drafts of TLS 1.3, culminating in the first symbolic analysis of Draft-18 and the first composite analysis of TLS 1.3+1.2. Our analyses uncover known and new vulnerabilities that influenced the final design of Draft-18.

In addition, we develop the first machine-checked cryptographic proof for TLS 1.3 using the verification tool CryptoVerif. Our proof reduces the security of TLS 1.3 Draft-18 to standard cryptographic assumptions over its primitives. Unlike manual proofs, our CryptoVerif script can be more easily updated from draft-to-draft as the protocol evolves.

Our ProVerif and CryptoVerif models capture the protocol core of TLS 1.3 but elide many implementation details. To demonstrate that our security results apply to carefully-written implementations of TLS 1.3, we present RefTLS, the first reference implementation of TLS 1.0-1.3 whose core protocol code has been formally analyzed for security. RefTLS is written in Flow, a statically typed variant of JavaScript, and is structured so that all its protocol code is isolated in a single module that can be automatically translated to ProVerif and symbolically analyzed against our rich threat model.

The full version of this paper is published as a technical report [13], and our models and code are available at: [GitHub Repository](https://github.com/inria-prosecco/reftls)

## 3. A Security Model for TLS
Figure 1 depicts the progression of a typical TLS connection. A client and server negotiate a protocol mode, execute an authenticated key exchange, and then start exchanging application data protected by an authenticated encryption scheme.

### Security Goals for TLS
Each phase of a TLS connection has its own correctness and security goals. For example, during negotiation, the server must choose a mode consistent with the client’s offer. The key exchange must produce a secret session key. From the viewpoint of the application, the security goals of TLS are:

- **Secrecy:** Application data messages sent between an honest client and server are kept confidential from an attacker who cannot break the cryptographic constructions used in the session.
- **Forward Secrecy:** Secrecy holds even if the long-term keys of the client and server are given to the adversary after the session has been completed and the session keys are deleted.
- **Authentication:** Application data messages received over a session from an honest peer are genuine and have not been tampered with.

These goals ensure the confidentiality and integrity of the communication between the client and server.