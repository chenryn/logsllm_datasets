### 5.3 PSK Handshakes

The Noise specification does not provide explicit security claims for PSK (Pre-Shared Key) patterns. Our method automatically identifies the detailed Source and Destination properties of PSK patterns, and we present our findings here.

#### 5.3.1 Degrees of PFS (Perfect Forward Secrecy)

To illustrate the insights gained from our methodology, we focus on secrecy from the sender's perspective. Our analysis reveals three distinct flavors of PFS, which can be crucial for protocol designers:

1. **PFS with Asymmetric Keys (Non-PSK Destination Level 5):** 
   - **Description:** The attacker must compromise the static keys before the session to break message secrecy. However, they can compromise the PSK before or after the session.
   
2. **PFS with PSK Only:**
   - **Description:** The PFS guarantee relies solely on the PSK. The attacker must have compromised the PSK before the session, but they may compromise the static keys before or after the session.
   
3. **Combined PFS (Intersection of Both Guarantees):**
   - **Description:** This form of PFS leverages both the PSK and asymmetric keys. The attacker must compromise both the static key and the PSK before the session to break secrecy.

**Example: WireGuard (IKpsk2)**
- **Context:** WireGuard justifies using a PSK pattern for post-quantum resistance [13, § V. B.] and allows the use of a public dummy PSK.
- **Analysis:**
  - **PFS with Asymmetric Keys Only:** Not post-quantum resistant.
  - **PFS with PSK Only:** Fails when using a public PSK.
  - **Combined PFS:** Suitable for WireGuard's goals.

In contrast, the Noise specification defines six levels and cannot distinguish between these PFS flavors. Our method distinguishes between 16 levels, providing a more nuanced understanding.

#### 5.3.2 Non-PSK vs. Dummy PSK

The Noise specification allows PSK patterns to be used without securely distributing a PSK by setting the PSK to a public value (e.g., 0), known as a dummy PSK. We model the public nature of these dummy PSKs by considering PSK patterns where the PSK is immediately revealed to the adversary. Comparing such protocols with public dummy keys to non-PSK patterns, we find that their security properties differ.

**Payload Encryption Before First psk or DH Token:**
- **Non-PSK Patterns:** Send payloads in clear text.
- **PSK Patterns:** Encrypt payloads with AEAD using a public value as the symmetric key.

**Agreement:**
- **Non-PSK Patterns (e.g., NN):** The first message is Source Level 0.0 because the recipient cannot distinguish it from the second message. A passive adversary can cause the recipient to mistake the second message of another handshake for the first message, leading to false agreement.
- **PSK Patterns:** Encryption of the first payload prevents message confusion, making the first message Source Level 0.1. Note that both Source Levels 0.0 and 0.1 are weak against active adversaries, and 0.1 can also be achieved in non-PSK handshakes using message tagging.

**Anonymity:**
- **KNpsk0 and KXpsk2:** Anonymity of the initiator never holds in PSK handshakes with a dummy PSK, whereas it holds in some threat models in non-PSK handshakes.
- **KXpsk2 Example:** Early encryption of payloads includes a hash of the initiator's public key in the authenticated data. An attacker can verify the integrity of the AEAD encrypted payload, breaking the initiator's anonymity.

**Modification Proposal:**
- **encryptAndHash Function:** Modify to return cleartext before the first psk or DH token. This modification ensures the initiator's anonymity in KXpsk2 if the adversary is passive, without affecting other secrecy and agreement guarantees. For KNpsk0, more involved modifications are needed.

### 5.4 Anonymity Results

We did not complete all anonymity proofs due to the high computational cost of checking observational equivalence. However, our results for 46 patterns provide interesting insights:

1. **Session Identifiers:**
   - **Noise Specification:** Allows applications to use the hash of the handshake transcript as a session identifier [24, § 11.2]. If this hash is public, anonymity cannot hold even for a passive adversary.
   - **Recommendation:** The specification should state that this session identifier must be kept secret for applications requiring anonymity.

2. **Identity-Hiding Levels:**
   - **Level 7 Example (KN):** An active attacker who pretends to be the initiator without the initiator’s static private key and subsequently learns a candidate for the initiator's private key can check if the candidate is correct. We find an attack against the initiator's anonymity under weaker assumptions: an active adversary and no key compromise.

### 5.5 Summary of Analysis Insights

Our analysis provides several insights and recommendations for the Noise specification:

1. **Session Identifiers:**
   - **Insight:** If the session identifier is public, anonymity never holds.
   - **Recommendation:** Explicitly state that applications requiring identity hiding must treat the session identifier as a secret.

2. **Early Encryption in PSK Patterns:**
   - **Insight:** Some payloads are encrypted before the first psk or DH token with a public value as a symmetric key, which marginally benefits agreement but violates anonymity guarantees.
   - **Recommendation:** Highlight the impact on anonymity when using a PSK pattern with a dummy key.

3. **Security Claims:**
   - **Insight:** Security levels assume ephemeral keys cannot be compromised, and the levels are not monotonic. Secrecy from the recipient's perspective is sometimes weaker than from the sender's perspective.
   - **Recommendation:** Make these assumptions and consequences explicit in the specification.

### 6 Conclusion

Our fine-grained analysis of the Noise specification reveals subtle differences and identifies classes of handshakes that should not be used. These results help practitioners select the right Noise handshake for their needs. Our methodology is generic and can be applied to other security protocols, offering potential future work in comparing Noise handshakes with other authentication protocols and further optimizing anonymity analysis.

### References

[1] Arapinis, M., Chothia, T., Ritter, E., & Ryan, M. (2010). Analysing Unlinkability and Anonymity Using the Applied Pi Calculus. In Computer Security Foundations Symposium (CSF), pages 107–121. IEEE.

[2] Basin, D., & Cremers, C. (2014). Know your enemy: Compromising adversaries in protocol analysis. ACM Trans. Inf. Syst. Secur., 17(2), 7:1–7:31.

[3] Basin, D., Cremers, C., Dreier, J., Schmid, S., Radomirovic, S., Sasse, R., & Schmidt, B. (2019). The Tamarin Manual. https://tamarin-prover.github.io/manual/. Accessed: 2019-11-14.

[4] Basin, D., Dreier, J., Hirschi, L., Radomirović, S., Sasse, R., & Stettler, V. (2018). A formal analysis of 5G authentication. In Conference on Computer and Communications Security (CCS), pages 1383–1396. ACM.

[5] Basin, D., Dreier, J., & Sasse, R. (2015). Automated symbolic proofs of observational equivalence. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, pages 1144–1155. ACM.

[6] Bhargavan, K., Blanchet, B., & Kobeissi, N. (2017). Verified models and reference implementations for the TLS 1.3 standard candidate. In 2017 IEEE Symposium on Security and Privacy (SP), pages 483–502. IEEE.

[7] Blanchet, B. (2016). Modeling and verifying security protocols with the applied pi calculus and ProVerif. Foundations and Trends in Privacy and Security, 1(1–2), 1–135.

[8] Cohn-Gordon, K., Cremers, C., Garratt, L., Millican, J., & Milner, K. (2018). On ends-to-ends encryption: Asynchronous group messaging with strong security guarantees. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, pages 1802–1819. ACM.

[9] Cremers, C., & Dehnel-Wild, M. (2019). Component-based formal analysis of 5G-AKA: Channel assumptions and session confusion. In 26th Annual Network and Distributed System Security Symposium, NDSS 2019, San Diego, California, USA, February 24-27. The Internet Society.

[17] Girol, G. (2019). Formalizing and Verifying the Security Protocols from the Noise Framework. Master’s thesis, ETH Zurich. https://doi.org/10.3929/ethz-b-000332859.

[18] Girol, G., Hirschi, L., Sasse, R., & Basin, D. (n.d.). Available at https://github.com/symphorien/spectral-noise-analysis-usenix-artifact.

[19] WhatsApp Inc. (2017). WhatsApp encryption overview—Technical white paper. https://www.whatsapp.com/security/WhatsApp-Security-Whitepaper.pdf. Accessed: 2019-11-14.

[10] Cremers, C., Horvat, M., Hoyland, J., Scott, S., & van der Merwe, T. (2017). A comprehensive symbolic analysis of TLS 1.3. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, pages 1773–1788. ACM.

[20] Kobeissi, N., Nicolas, G., & Bhargavan, K. (2019). Noise Explorer: Fully automated modeling and verification for arbitrary Noise protocols. In 2019 IEEE European Symposium on Security and Privacy (EuroS&P), pages 356–370. IEEE.

[11] Cremers, C., & Jackson, D. (2019). Prime, Order Please! Revisiting Small Subgroup and Invalid Curve Attacks on Protocols using Difﬁe-Hellman. In 32nd IEEE Computer Security Foundations Symposium, CSF 2019, Hoboken, NJ, USA, June 25-28, pages 78–93. IEEE.

[12] Dolev, D., & Yao, A. C. (1981). On the security of public key protocols. Information Theory, IEEE Transactions on, 29(2), 198–208.

[13] Donenfeld, J. A. (2017). WireGuard: Next generation kernel network tunnel. In 24th Annual Network and Distributed System Security Symposium, NDSS 2017, San Diego, California, USA, February 26 - March 1. The Internet Society.

[14] Donenfeld, J. A., & Milner, K. (2017). Formal verification of the WireGuard protocol. Technical report.

[15] Dowling, B., & Paterson, K. G. (2018). A cryptographic analysis of the WireGuard protocol. In International Conference on Applied Cryptography and Network Security, pages 3–21. Springer.

[16] Dowling, B., Rösler, P., & Schwenk, J. (2020). Flexible authenticated and confidential channel establishment (fACCE): Analyzing the Noise protocol framework. In Proceedings of IACR International Conference on Practice and Theory of Public-Key Cryptography (PKC 2020).

[21] Lipp, B., Blanchet, B., & Bhargavan, K. (2019). A mechanised cryptographic proof of the WireGuard virtual private network protocol. In 2019 IEEE European Symposium on Security and Privacy (EuroS&P), pages 231–246. IEEE.

[22] Lowe, G. (1997). A hierarchy of authentication specifications. In Proceedings 10th Computer Security Foundations Workshop, pages 31–43. IEEE.

[23] The Lightning Network. (2017). Bolt 8: Encrypted and authenticated transport. https://github.com/lightningnetwork/lightning-rfc/blob/130bc5da2c05f212fba09ae309e53fec8cde2c6d/08-transport.md. Accessed: 2019-11-14.

[24] Perrin, T. (2018). The Noise Protocol Framework. Revision 34, https://noiseprotocol.org/noise.html.

[25] Schmidt, B., Meier, S., Cremers, C., & Basin, D. (2012). Automated analysis of Difﬁe-Hellman protocols and advanced security properties. In Computer Security Foundations Symposium (CSF), pages 78–94. IEEE.