### 5.1 Constraint Extractor Results

In this section, we evaluate the effectiveness of the constraint extractor, particularly focusing on the field condition generalizer, in removing parsing conditions from the protocol-level path-predicate. For simplicity, we present results for the protocol-level path-predicate generated by the field condition generator from the execution trace of the original exploit. Note that during exploration, this process is repeated for each newly generated input. Table 2 summarizes these results.

- **Original Column**: This column represents the number of input-dependent conditions in the protocol-level path-predicate and serves as the baseline for comparison.
- **Non-parsing Conditions Column**: This column shows the number of remaining conditions after the removal of parsing conditions.

The removal of parsing conditions was highly successful across all experiments. Specifically, in the four vulnerable programs that include variable-length strings (excluding Gdi-wmf and DCOM-RPC), parsing conditions accounted for 92.4% to 99.8% of all conditions. For formats that include arrays, such as DCOM RPC, the number of parsing conditions is smaller, but their removal is crucial because they otherwise constrain the array to have the same number of elements as in the exploit message. By eliminating parsing conditions, each field constraint chain can represent multiple program execution paths produced by modifying the format of the exploit message (e.g., extending variable-length fields or reordering fields). This significantly reduces the exploration space, making constraint-guided exploration feasible.

### 5.2 Exploration Results

Table 3 presents the results for the exploration phase. We set a user-defined time limit of 6 hours for the exploration. If the exploration is not completed within this time, Elcano terminates the process.

### Performance Evaluation

Table 4 provides performance metrics, including generation time, average test time, and trace size. The generation time and average test time are given in seconds, while the trace size is in Megabytes.

| Program   | Generation Time (s) | # Tests | Average Test Time (s) | Trace Size (MB) |
|-----------|---------------------|---------|-----------------------|-----------------|
| Gdi-emf   | 21600               | 98      | 43.0                  | 28.8            |
| Gdi-wmf   | 21600               | 282     | 16.3                  | 3.0             |
| DCOM RPC  | 21600               | 1384    | 92.0                  | 3.5             |
| GHttpd    | 55                  | 502     | 9.1                   | 3.0             |
| AtpHttpd  | 6                   | 235     | 23.5                  | 8.6             |
| SQL Server| 6                   | 12      | 125.8                 | 27.5            |

### Gdi-wmf Example

Figure 5 illustrates the field structure of the exploit file on the left and the vulnerability point reachability predicate (VPRP) on the right. The original protocol-level path-predicate contained the four aligned nodes on the left of the graph. During exploration, one new path leading to the vulnerability point was discovered, introducing the node on the right. The graph indicates that the program checks whether the Version field is 0x300 (Windows 3.0) or 0x100 (Windows 1.0). Such constraints are often missed by probing approaches, which typically sample only a few values. In fact, ShieldGen, which analyzed a different vulnerability in the same library, also encountered this constraint but missed the second condition of the disjunction. Consequently, an attacker could evade detection by changing the value of the Version field. Since we do not have access to the source code, we cannot verify if our VPRP is optimal, but we believe it to be so.

### Other Experiments

Due to space constraints, detailed results for Atphttpd, GHttpd, and DCOM RPC are provided in our extended version [36]. For the Atphttpd and GHttpd vulnerabilities, where we had access to the source code, the extended version includes the optimal signatures manually extracted for the vulnerabilities. Our results show that Elcano's VPRPs either exactly match or are very close to the optimal ones extracted from the source code.

### 6 Conclusion

In this paper, we propose protocol-level constraint-guided exploration, a novel approach for automatically generating high-coverage, yet compact, vulnerability point reachability predicates (VPRPs) with applications in signature generation, exploit generation, and patch verification. Our experimental results demonstrate that our approach is effective, generates small VPRPs with high coverage (optimal or near-optimal in some cases), and offers significant improvements over previous methods.

### Acknowledgements

We would like to thank James Newsome and Prateek Saxena for their valuable discussions on signature generation. We also thank Stephen McCamant and the anonymous reviewers for their insightful comments on this document.

This research was partially supported by the National Science Foundation under Grants No. 0311808, No. 0448452, No. 0627511, and CCF-0424422, and by the Air Force Office of Scientific Research under MURI Grant No. 22178970-4170. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the Air Force Office of Scientific Research or the National Science Foundation.

### References

1. Symantec: Internet Security Threat Report (2008), <http://www.symantec.com/business/theme.jsp?themeid=threatreport>
2. Kreibich, C., Crowcroft, J.: Honeycomb - creating intrusion detection signatures using honeypots. In: Workshop on Hot Topics in Networks, Boston, MA (2003)
3. Kim, H.A., Karp, B.: Autograph: Toward automated, distributed worm signature detection. In: USENIX Security Symposium, San Diego, CA (2004)
4. Singh, S., Estan, C., Varghese, G., Savage, S.: Automated worm fingerprinting. In: Symposium on Operating System Design and Implementation, San Francisco, CA (2004)
5. Newsome, J., Karp, B., Song, D.: Polygraph: Automatically generating signatures for polymorphic worms. In: IEEE Symposium on Security and Privacy, Oakland, CA (2005)
6. Yegneswaran, V., GifÔ¨Ån, J.T., Barford, P., Jha, S.: An architecture for generating semantics-aware signatures. In: USENIX Security Symposium, Baltimore, MD (2005)
7. Li, Z., Sanghi, M., Chen, Y., Kao, M.Y., Chavez, B.: Hamsa: Fast signature generation for zero-day polymorphic worms with provable attack resilience. In: IEEE Symposium on Security and Privacy, Oakland, CA (2006)
8. Liang, Z., Sekar, R.: Fast and automated generation of attack signatures: A basis for building self-protecting servers. In: ACM Conference on Computer and Communications Security, Alexandria, VA (2005)
9. Liang, Z., Sekar, R.: Automatic generation of buffer overflow attack signatures: An approach based on program behavior models. In: Annual Computer Security Applications Conference, Tucson, AZ (2005)
10. Wang, X., Li, Z., Xu, J., Reiter, M.K., Kil, C., Choi, J.Y.: Packet vaccine: Black-box exploit detection and signature generation. In: ACM Conference on Computer and Communications Security, Alexandria, VA (2006)
11. Costa, M., Crowcroft, J., Castro, M., Rowstron, A., Zhou, L., Zhang, L., Barham, P.: Vigilante: End-to-end containment of internet worms. In: Symposium on Operating Systems Principles, Brighton, United Kingdom (2005)
12. Brumley, D., Newsome, J., Song, D., Wang, H., Jha, S.: Towards automatic generation of vulnerability-based signatures. In: IEEE Symposium on Security and Privacy, Oakland, CA (2006)
13. Saxena, P., Poosankam, P., McCamant, S., Song, D.: Loop-extended symbolic execution on binary programs. In: International Symposium on Software Testing and Analysis, Chicago, IL (2009)
14. Vigna, G., Robertson, W., Balzarotti, D.: Testing network-based intrusion detection signatures using mutant exploits. In: ACM Conference on Computer and Communications Security, Washington, DC (2004)
15. Rubin, S., Jha, S., Miller, B.P.: Automatic generation and analysis of NIDS attacks. In: Annual Computer Security Applications Conference, Tucson, AZ (2004)
16. Brumley, D., Wang, H., Jha, S., Song, D.: Creating vulnerability signatures using weakest pre-conditions. In: Computer Security Foundations Symposium, Venice, Italy (2007)
17. Costa, M., Castro, M., Zhou, L., Zhang, L., Peinado, M.: Bouncer: Securing software by blocking bad input. In: Symposium on Operating Systems Principles, Bretton Woods, NH (2007)
18. Cui, W., Peinado, M., Wang, H.J., Locasto, M.: Shieldgen: Automatic data patch generation for unknown vulnerabilities with informed probing. In: IEEE Symposium on Security and Privacy, Oakland, CA (2007)
19. Brumley, D., Poosankam, P., Song, D., Zheng, J.: Automatic patch-based exploit generation is possible: Techniques and implications. In: IEEE Symposium on Security and Privacy, Oakland, CA (2008)
20. A dumb patch? <http://blogs.technet.com/msrc/archive/2005/10/31/413402.aspx>
21. Common Vulnerabilities and Exposures (CVE), <http://cve.mitre.org/cve/>
22. Wireshark, <http://www.wireshark.org>
23. Pang, R., Paxson, V., Sommer, R., Peterson, L.: Binpac: A yacc for writing application protocol parsers. In: Internet Measurement Conference, Rio de Janeiro, Brazil (2006)
24. Borisov, N., Brumley, D., Wang, H.J., Dunagan, J., Joshi, P., Guo, C.: A generic application-level protocol analyzer and its language. In: Network and Distributed System Security Symposium, San Diego, CA (2007)
25. Caballero, J., Yin, H., Liang, Z., Song, D.: Polyglot: Automatic extraction of protocol message format using dynamic binary analysis. In: ACM Conference on Computer and Communications Security, Alexandria, VA (2007)
26. Cui, W., Peinado, M., Chen, K., Wang, H.J., Irun-Briz, L.: Tupni: Automatic reverse engineering of input formats. In: ACM Conference on Computer and Communications Security, Alexandria, VA (2008)
27. Wondracek, G., Comparetti, P.M., Kruegel, C., Kirda, E.: Automatic network protocol analysis. In: Network and Distributed System Security Symposium, San Diego, CA (2008)
28. Lin, Z., Jiang, X., Xu, D., Zhang, X.: Automatic protocol format reverse engineering through context-aware monitored execution. In: Network and Distributed System Security Symposium, San Diego, CA (2008)
29. Newsome, J., Song, D.: Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In: Network and Distributed System Security Symposium, San Diego, CA (2005)
30. Cadar, C., Ganesh, V., Pawlowski, P.M., Dill, D., Engler, D.R.: EXE: Automatically generating inputs of death. In: ACM Conference on Computer and Communications Security, Alexandria, VA (2006)
31. Godefroid, P., Klarlund, N., Sen, K.: DART: Directed automated random testing. In: SIGPLAN Conference on Programming Language Design and Implementation, Chicago, IL (2005)
32. Godefroid, P., Levin, M.Y., Molnar, D.: Automated whitebox fuzz testing. In: Network and Distributed System Security Symposium, San Diego, CA (2008)
33. Vine, <http://bitblaze.cs.berkeley.edu/vine.html>
34. Caballero, J., McCamant, S., Barth, A., Song, D.: Extracting models of security-sensitive operations using string-enhanced white-box exploration on binaries. Technical Report UCB/EECS-2009-36, EECS Department, University of California, Berkeley (2009)
35. Song, D., Brumley, D., Yin, H., Caballero, J., Jager, I., Kang, M.G., Liang, Z., Newsome, J., Poosankam, P., Saxena, P.: BitBlaze: A new approach to computer security via binary analysis. In: International Conference on Information Systems Security, Hyderabad, India (2008); Keynote invited paper
36. Towards generating high coverage vulnerability-based signatures with protocol-level constraint-guided exploration (extended version), <http://www.ece.cmu.edu/~juanca/papers/fieldsig_extended.pdf>
37. Godefroid, P., Kiezun, A., Levin, M.Y.: Grammar-based whitebox fuzzing. In: SIGPLAN Conference on Programming Language Design and Implementation, Tucson, AZ (2008)
38. Boonstoppel, P., Cadar, C., Engler, D.: RWSET: Attacking path explosion in constraint-based test generation. In: International Symposium on Software Testing and Analysis, Seattle, WA (2008)
39. Dijkstra, E.W.: Guarded commands, nondeterminacy and formal derivation of programs. Communications of the ACM 18(8) (1975)