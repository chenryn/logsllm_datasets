### Handling of Set Action Commands in OpenFlow Networks

Set action commands are a significant distinguishing feature of OpenFlow networks. Recently, researchers have proposed developing language abstractions to ensure the consistency of flow updates in software-defined networks (SDNs) [32]. In contrast, our work on the FRESCO security enforcement kernel focuses on detecting rule update conflicts and security policy violations. The Onix platform [20] provides a generalized API for managing a distributed control plane in SDNs. The techniques and strategies developed in Onix for managing a distributed network information base are complementary and can be integrated into FRESCO.

### Conclusion

Despite the success of OpenFlow, developing and deploying complex OpenFlow (OF) security services remains a significant challenge. We present FRESCO, a new application development framework specifically designed to address this problem. We introduce the FRESCO architecture and its integration with the NOX OpenFlow controller, and we present several illustrative security applications written in the FRESCO scripting language. To empower FRESCO applications with the ability to produce enforceable flow constraints that can defend the network as threats are detected, we present the FRESCO security enforcement kernel. Our evaluations demonstrate that FRESCO introduces minimal overhead and enables the rapid creation of popular security functions with significantly (over 90%) fewer lines of code. We believe that FRESCO offers a powerful new framework for prototyping and delivering innovative security applications into the rapidly evolving world of software-defined networks. We plan to release all developed code as open-source software to the SDN community.

### Acknowledgments

This material is based in part upon work supported by the Defense Advanced Research Projects Agency (DARPA) and the United States Air Force under Contract No. FA8750-11-C-0249, the Army Research Office under Cyber-TA Grant no. W911NF-06-1-0316, and the National Science Foundation under Grant no. CNS-0954096. All opinions, findings, and conclusions or recommendations expressed herein are those of the authors and do not necessarily reflect the views of the U.S. Air Force, DARPA, U.S. Army Research Office, or the National Science Foundation. This document is approved for Public Release, Distribution Unlimited.

### References

[1] E. Al-Shaer and S. Al-Haj. FlowChecker: Configuration Analysis and Verification of Federated OpenFlow Infrastructures. In Proceedings of the 3rd ACM Workshop on Assurable and Usable Security Configuration, SafeConfig, pages 37–44, New York, NY, USA, 2010. ACM.

[2] E. Al-shaer, W. Marrero, A. El-atawy, and K. Elbadawi. Network Configuration in A Box: Towards End-to-End Verification of Network Reachability and Security. In The 17th IEEE International Conference on Network Protocols (ICNP), 2009.

[3] J. R. Ballard, I. Rae, and A. Akella. Extensible and Scalable Network Monitoring Using OpenSAFE. In INM/WREN, 2010.

[4] Z. Cai, A. L. Cox, and T. E. Ng. Maestro: A System for Scalable OpenFlow Control. Rice University Technical Report, 2010.

[5] M. Canini, D. Venzano, P. Peresini, D. Kostic, and J. Rexford. A NICE Way to Test OpenFlow Applications. In Proceedings of NSDI, 2012.

[6] M. Casado, M. J. Freedman, J. Pettit, J. Luo, N. McKeown, and S. Shenker. Ethane: Taking Control of the Enterprise. In Proceedings of ACM SIGCOMM, 2007.

[7] M. Casado, T. Garfinkel, M. Freedman, A. Akella, D. Boneh, N. McKeown, and S. Shenker. SANE: A Protection Architecture for Enterprise Networks. In Proceedings Usenix Security Symposium, August 2006.

[8] A. El-atawy, T. Samak, Z. Wali, E. Al-shaer, F. Lin, C. Pham, and S. Li. An Automated Framework for Validating Firewall Policy Enforcement. Technical report, DePaul University, 2007.

[9] N. Foster, R. Harrison, M. Freedman, C. Monsanto, J. Rexford, A. Story, and D. Walker. Frenetic: A Network Programming Language. In ACM SIGPLAN International Conference on Functional Programming, 2011.

[10] A. Greenberg, G. Hjalmtysson, D. A. Maltz, A. Myers, J. Rexford, G. Xie, H. Yan, J. Zhan, and H. Zhang. A Clean Slate 4D Approach to Network Control and Management. In Proceedings of ACM Computer Communications Review, 2005.

[11] G. Gu, R. Perdisci, J. Zhang, and W. Lee. BotMiner: Clustering Analysis of Network Traffic for Protocol- and Structure-Independent Botnet Detection. In Proceedings of USENIX Security Symposium (Security’08), 2008.

[12] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee. BotHunter: Detecting Malware Infection through IDS-Driven Dialog Correlation. In Proceedings of the 16th USENIX Security Symposium (Security’07), August 2007.

[13] N. Gude, T. Koponen, J. Pettit, B. Pfaff, M. Casado, N. McKeown, and S. Shenker. NOX: Towards an Operating System for Networks. In Proceedings of ACM SIGCOMM Computer Communication Review, July 2008.

[14] J. H. Jafarian, E. Al-Shaer, and Q. Duan. OpenFlow Random Host Mutation: Transparent Moving Target Defense using Software-Defined Networking. In Proceedings of ACM Sigcomm HotSDN Workshop, 2012.

[15] J. Jung, R. Milito, and V. Paxson. On the Adaptive Real-time Detection of Fast Propagating Network Worms. In Proceedings of Conference on Detection of Intrusions and Malware and Vulnerability Assessment (DIMVA), 2007.

[16] J. Jung, V. Paxson, A. Berger, and H. Balakrishnan. Fast Portscan Detection Using Sequential Hypothesis Testing. In Proceedings of IEEE Symposium on Security and Privacy, 2004.

[17] P. Kazemian, G. Varghese, and N. McKeown. Header Space Analysis: Static Checking for Networks. In Proceedings of NSDI, 2012.

[18] A. Khurshid, W. Zhou, M. Caesar, and P. B. Godfrey. VeriFlow: Verifying Network-Wide Invariants in Real Time. In Proceedings of ACM Sigcomm HotSDN Workshop, 2012.

[19] E. Kohler, R. Morris, B. Chen, J. Jannotti, and F. Kaashoek. The Click Modular Router. ACM Transactions on Computer Systems, August 2000.

[20] T. Koponen, M. Casado, N. Gude, J. Stribling, L. Poutievski, M. Zhu, R. Ramanathan, Y. Iwata, H. Inoue, T. Hama, and S. Shenker. Onix: A Distributed Control Platform for Large-Scale Production Networks. In The Symposium on Operating Systems Design and Implementation (NSDI), 2010.

[21] A. Liu. Formal Verification of Firewall Policies. In Proceedings of the 2008 IEEE International Conference on Communications (ICC), Beijing, China, May 2008.

[22] A. Liu and M. Gouda. Diverse Firewall Design. IEEE Transactions on Parallel and Distributed Systems (TPDS), 19(8), 2008.

[23] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson, J. Rexford, S. Shenker, and J. Turner. OpenFlow: Enabling Innovation in Campus Networks. In Proceedings of ACM SIGCOMM Computer Communication Review, April 2008.

[24] S. A. Mehdi, J. Khalid, and S. A. Khayam. Revisiting Traffic Anomaly Detection Using Software-Defined Networking. In Proceedings of Recent Advances in Intrusion Detection, 2011.

[25] Mininet. Rapid Prototyping for Software-Defined Networks. http://yuba.stanford.edu/foswiki/bin/view/OpenFlow/Mininet/.

[26] J. C. Mogul, J. Tourrilhes, P. Yalagandula, P. Sharma, A. R. Curtis, and S. Banerjee. DevoFlow: Cost-Effective Flow Management for High-Performance Enterprise Networks. In Proceedings of the Ninth ACM SIGCOMM Workshop on Hot Topics in Networks, 2010.

[27] A. Nayak, A. Reimers, N. Feamster, and R. Clark. Resonance: Dynamic Access Control for Enterprise Networks. In Proceedings of WREN, 2009.

[28] NMAP.ORG. Nmap: Open Source Network Discovery and Auditing Tool. http://nmap.org.

[29] OpenFlow. OpenFlow 1.1.0 Specification. http://www.openflow.org/documents/openflow-spec-v1.1.0.pdf.

[30] OpenFlowHub. BEACON. http://www.openflowhub.org/display/Beacon.

[31] P. Porras, S. Shin, V. Yegneswaran, M. Fong, M. Tyson, and G. Gu. A Security Enforcement Kernel for OpenFlow Networks. In Proceedings ACM SIGCOMM Workshops on Hot Topics in Software-Defined Networking (HotSDN), August 2012.

[32] M. Reitblatt, N. Foster, J. Rexford, and D. Walker. Consistent Update for Software-Defined Networks: Change You Can Believe In! In Under Submission, 2011.

[33] RFC4765. The Intrusion Detection Message Exchange Format (IDMEF). http://www.ietf.org/rfc/rfc4765.txt.

[34] S. Schechter, J. Jung, and A. Berger. Accuracy Improving Guidelines for Network Anomaly Detection Systems. In Proceedings of International Symposium on Recent Advances in Intrusion Detection.

[35] V. Sekar, Y. Xie, M. Reiter, and H. Zhang. A Multi-Resolution Approach for Worm Detection and Containment. In Proceedings of International Conference on Dependable Systems and Networks (DSN), June 2006.

[36] D. Senn, D. Basin, and G. Caronni. Firewall Conformance Testing. In The 17th IFIP International Conference on Testing of Communicating Systems (TestCom), pages 226–241, 2005.

[37] R. Sherwood, G. Gibb, K.-K. Yap, G. Appenzeller, M. Casado, N. McKeown, and G. Parulkar. Can the Production Network Be the Testbed. In Proceedings of Operating System Design and Implementation, 2010.

[38] Snort. http://snort.org.

[39] J. Twycross and M. M. Williamson. Implementing and Testing a Virus Throttle. In Proceedings of the USENIX Security Symposium, 2003.

[40] A. Voellmy and P. Hudak. Nettle: Functional Reactive Programming of OpenFlow Networks. Yale University Technical Report, 2010.

[41] A. Voellmy, H. Kim, and N. Feamster. Procera: A Language for High-Level Reactive Network Control. In Proceedings of ACM Sigcomm HotSDN Workshop, 2012.

[42] G. Xie, J. Zhan, D. Maltz, H. Zhang, A. Greenberg, G. Hjalmtysson, and J. Rexford. On Static Reachability Analysis of IP Networks. In The 24th IEEE International Conference on Computer Communications (INFOCOM), pages 2170–2183, 2005.

[43] T.-F. Yen and M. K. Reiter. Are Your Hosts Trading or Plotting? Telling P2P File-Sharing and Bots Apart. In Proceedings of IEEE ICDCS, 2010.

### Appendix

#### A.1 FRESCO Security Enforcement Kernel

It is possible that the flow rules created by non-security-related OF applications conflict with the flow constraints distributed by FRESCO applications. A conflict arises when one or more flow rules would allow a flow from one endpoint to another that is specifically prohibited by a flow constraint rule produced by a FRESCO application. To manage FRESCO flow constraints and perform conflict evaluation, we introduce the FRESCO SEK as an embedded NOX extension.

The two main components of OpenFlow rules are match conditions and actions. Match conditions specify packet header fields that must match for the rule’s associated actions to trigger. The FRESCO SEK maintains the set of active constraint rules produced by registered FRESCO modules. Constraint rules inserted into the FRESCO SEK security constraints table are considered active and must be explicitly deactivated by a registered FRESCO module. Because non-FRESCO applications can publish flow rules that potentially violate FRESCO’s network security policy, the FRESCO SEK employs two protection mechanisms to prevent such violations:

1. **Rule Prioritization**: Flow rules produced by FRESCO applications are published to the switch using the highest rule priority. This immediately overrides any active flow rules in the switch’s flow table that may contradict FRESCO’s security policy.
2. **Conflict Detection Algorithm**: The FRESCO SEK applies a conflict detection algorithm between each new flow rule and the security constraints table, rejecting the new flow rule if a conflict is detected. Conflict detection is performed in two passes: alias set rule reduction and rule set conflict evaluation.

A conflict can also occur between security constraints enforced by different FRESCO applications. In this case, the FRESCO SEK can still detect conflicts but needs to determine which constraint should be enforced. By default, the FRESCO SEK keeps the first enforced constraint (i.e., ignores following conflicted constraints), but it can be configured by administrators to apply other approaches (e.g., keep the last enforced constraint, or based on some priority settings).

#### A.1.1 Alias Set Rule Reduction

To detect conflicts between a candidate rule set and FRESCO’s constraint rule sets, the source and destination IP addresses, their ports, and wildcard members for each rule in a rule set are used to derive rules with alias sets representing IP addresses and ports. The initial alias sets contain the first rule’s IP addresses, network masks, and ports (where 0 [zero] represents any port). If the rule’s action causes a field substitution via a set action, the resultant value is added to the appropriate alias set. These sets are then compared to the next rule’s alias sets. If there is an intersection between both the source and destination sets, the union of the respective sets is used as the subsequent rule’s alias sets.

For example, given the FRESCO rule:
```
a → b drop packet
```
Its source alias set is (a), while its destination alias set is (b). The derived rule is:
```
(a) → (b) drop packet
```
For the candidate (evasion) rule set:
```
1. a → c set (a ⇒ a')
2. a' → c set (c ⇒ b)
3. a' → b forward packet
```
The intermediate alias sets are:
```
1. a → c set (a ⇒ a') (a, a') (c)
2. a' → c set (c ⇒ b) (a, a') (c, b)
3. a' → b forward packet (a, a') (c, b)
```
And the derived rule is:
```
(a, a') → (c, b) forward packet
```

#### A.1.2 Rule Set Conflict Evaluation

The FRESCO SEK first performs alias set rule reduction on the candidate rule set. These validity checks are then performed between each derived FRESCO constraint rule (cRule) and each derived flow rule (fRule), as follows:

1. **Skip any cRule/fRule pair with mismatched prototypes.**
2. **Skip any cRule/fRule pair whose actions are both either forward or drop packet.**
3. **If cRule’s alias sets intersect those of fRule’s, declare a conflict.**

Thus, given the example security constraint table and the candidate rule set, assuming that both rules are TCP protocol, the first candidate rule passes the first two checks. However, for the third check, because the intersection of the source and destination alias sets results in (a) and (b), respectively, the candidate rule is declared to be in conflict.

**Note:** For OpenFlow 1.1, the examined members include the source and destination network mask fields (for OpenFlow 1.0, these are implicitly defined by the wildcard field).