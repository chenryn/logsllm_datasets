### Program Execution and Exception Handling

During program execution, we demonstrated how to handle various exceptional cases that can arise in practical scenarios. 

### Performance Overhead and Protection

ROPdefender introduces a performance overhead of 2x, which may be unacceptable for time-critical applications. Additionally, protection against return address attacks targeting the operating system, which ROPdefender relies on, is necessary. We also need to implement measures against ROP (Return-Oriented Programming) attacks that do not involve returns. Currently, we are working on countermeasures against ROP attacks without returns and on a countermeasure for embedded systems.

### Acknowledgments

We would like to thank Hovav Shacham and Stephen Checkoway for their valuable discussions on return-oriented programming attacks based on indirect jumps. The first author was supported by the EU FP7 project CACE.

### References

1. M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. "Control-Flow Integrity: Principles, Implementations, and Applications." In *CCS '05: Proceedings of the 12th ACM Conference on Computer and Communications Security*, pages 340–353. ACM, 2005.
2. M. Abadi, M. Budiu, U. Erlingsson, G. C. Necula, and M. Vrable. "XFI: Software Guards for System Address Spaces." In *OSDI '06: Proceedings of the 7th Symposium on Operating Systems Design and Implementation*, pages 75–88. USENIX Association, 2006.
3. Adobe Systems. "Security Advisory for Flash Player, Adobe Reader and Acrobat: CVE-2010-1297." [Online]. Available: http://www.adobe.com/support/security/advisories/apsa10-01.html, 2010.
4. Aleph One. "Smashing the Stack for Fun and Profit." *Phrack Magazine*, 49(14), 1996.
5. Anonymous. "Once upon a free()." *Phrack Magazine*, 57(9), 2001.
6. blexim. "Basic Integer Overflows." *Phrack Magazine*, 60(10), 2002.
7. D. L. Bruening. "Efficient, Transparent, and Comprehensive Runtime Code Manipulation." PhD thesis, M.I.T., 2004. [Online]. Available: http://groups.csail.mit.edu/cag/rio/derek-phd-thesis.pdf
8. E. Buchanan, R. Roemer, H. Shacham, and S. Savage. "When Good Instructions Go Bad: Generalizing Return-Oriented Programming to RISC." In *CCS '08: Proceedings of the 15th ACM Conference on Computer and Communications Security*, pages 27–38. ACM, 2008.
9. B. Buck and J. K. Hollingsworth. "An API for Runtime Code Patching." *Int. J. High Perform. Comput. Appl.*, 14(4):317–329, 2000.
10. B. M. Cantrill, M. W. Shapiro, and A. H. Leventhal. "Dynamic Instrumentation of Production Systems." In *Proceedings of USENIX 2004 Annual Technical Conference*, pages 15–28. USENIX Association, 2004.
11. S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham, and M. Winandy. "Return-Oriented Programming Without Returns." In *CCS '10: Proceedings of the 17th ACM Conference on Computer and Communications Security*, pages 559–572. ACM, 2010.
12. S. Checkoway, A. J. Feldman, B. Kantor, J. A. Halderman, E. W. Felten, and H. Shacham. "Can DREs Provide Long-Lasting Security? The Case of Return-Oriented Programming and the AVC Advantage." In *Proceedings of EVT/WOTE 2009*.
13. P. Chen, H. Xiao, X. Shen, X. Yin, B. Mao, and L. Xie. "DROP: Detecting Return-Oriented Programming Malicious Code." In *ICISS 2010: Fifth International Conference on Information Systems Security*, volume 5905 of *Lecture Notes in Computer Science*, pages 163–177. Springer, 2009.
14. P. Chen, X. Xing, H. Han, B. Mao, and L. Xie. "Efficient Detection of the Return-Oriented Programming Malicious Code." In *ICISS 2010: Sixth International Conference on Information Systems Security*, volume 6503 of *Lecture Notes in Computer Science*, pages 140–155. Springer, 2010.
15. T. Chiueh and F.-H. Hsu. "RAD: A Compile-Time Solution to Buffer Overflow Attacks." In *International Conference on Distributed Computing Systems*, pages 409–417. IEEE Computer Society, 2001.
16. T. Chiueh and M. Prasad. "A Binary Rewriting Defense Against Stack-Based Overflow Attacks." In *Proceedings of the USENIX Annual Technical Conference*, pages 211–224. USENIX Association, 2003.
17. J. Clause, W. Li, and A. Orso. "Dytan: A Generic Dynamic Taint Analysis Framework." In *Proceedings of the 2007 International Symposium on Software Testing*, pages 196–206, 2007.
18. C. Cowan, S. Beattie, J. Johansen, and P. Wagle. "PointGuard: Protecting Pointers from Buffer Overflow Vulnerabilities." In *SSYM'03: Proceedings of the 12th Conference on USENIX Security Symposium*, pages 91–104. USENIX Association, 2003.
19. C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang. "StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks." In *SSYM'98: Proceedings of the 7th Conference on USENIX Security Symposium*, pages 63–78. USENIX Association, 1998.
20. D. Dai Zovi. "Practical Return-Oriented Programming." Presentation at SOURCE Boston 2010, Apr. 2010. Slides: http://trailofbits.files.wordpress.com/2010/04/practical-rop.pdf
21. L. Davi, A.-R. Sadeghi, and M. Winandy. "Dynamic Integrity Measurement and Attestation: Towards Defense Against Return-Oriented Programming Attacks." In *Proceedings of the 4th ACM Workshop on Scalable Trusted Computing (STC'09)*, pages 49–54. ACM, 2009.
22. T. Dullien, T. Kornau, and R.-P. Weinmann. "A Framework for Automated Architecture-Independent Gadget Search." In *Proceedings of the 4th USENIX Workshop on Offensive Technologies (WOOT)*, 2010.
23. A. Edwards, A. Srivastava, and H. Vo. "Vulcan Binary Transformation in a Distributed Environment." Technical Report MSR-TR-2001-50, Microsoft Research, April 2001.
24. A. Francillon and C. Castelluccia. "Code Injection Attacks on Harvard-Architecture Devices." In *CCS '08: Proceedings of the 15th ACM Conference on Computer and Communications Security*, pages 15–26. ACM, 2008.
25. A. Francillon, D. Perito, and C. Castelluccia. "Defending Embedded Systems Against Control Flow Attacks." In *Proceedings of the 1st Workshop on Secure Execution of Untrusted Code (SecuCode'09)*, pages 19–26. ACM, 2009.
26. M. Frantzen and M. Shuey. "StackGhost: Hardware Facilitated Stack Protection." In *SSYM'01: Proceedings of the 10th Conference on USENIX Security Symposium*, pages 55–66. USENIX Association, 2001.
27. gera. "Advances in Format String Exploitation." *Phrack Magazine*, 59(12), 2002.
28. D. Goodin. "Apple QuickTime Backdoor Creates Code-Execution Peril." [Online]. Available: http://www.theregister.co.uk/2010/08/30/apple_quicktime_critical_vuln/, 2010.
29. S. Gupta, P. Pratap, H. Saran, and S. Arun-Kumar. "Dynamic Code Instrumentation to Detect and Recover from Return Address Corruption." In *WODA '06: Proceedings of the 2006 International Workshop on Dynamic Systems Analysis*, pages 65–72. ACM, 2006.
30. J. Halliday. "JailbreakMe Released for Apple Devices." [Online]. Available: http://www.guardian.co.uk/technology/blog/2010/aug/02/jailbreakme-released-apple-devices-legal, Aug. 2010.
31. M. Howard and M. Thomlinson. "Windows Vista ISV Security." [Online]. Available: http://msdn.microsoft.com/en-us/library/bb430720.aspx, Apr. 2007.
32. R. Hund, T. Holz, and F. C. Freiling. "Return-Oriented Rootkits: Bypassing Kernel Code Integrity Protection Mechanisms." In *Proceedings of the 18th USENIX Security Symposium*. USENIX Association, 2009.
33. Intel Corporation. "Intel 64 and IA-32 Architectures Software Developer's Manuals." [Online]. Available: http://www.intel.com/products/processor/manuals/
34. Intel Parallel Studio. [Online]. Available: http://software.intel.com/en-us/intel-parallel-studio-home/
35. V. Iozzo and R.-P. Weinmann. "Ralf-Philipp Weinmann & Vincenzo Iozzo Own the iPhone at PWN2OWN." [Online]. Available: http://blog.zynamics.com/2010/03/24/ralf-philipp-weinmann-vincenzo-iozzo-own-the-iphone-at-pwn2own/, Mar 2010.
36. jduck. "The Latest Adobe Exploit and Session Upgrading." [Online]. Available: http://blog.metasploit.com/2010/03/latest-adobe-exploit-and-session.html, 2010.
37. V. Kiriansky, D. Bruening, and S. P. Amarasinghe. "Secure Execution via Program Shepherding." In *Proceedings of the 11th USENIX Security Symposium*, pages 191–206. USENIX Association, 2002.
38. T. Kornau. "Return Oriented Programming for the ARM Architecture." Master thesis, Ruhr-University Bochum, Germany, 2009. [Online]. Available: http://zynamics.com/downloads/kornau-tim--diplomarbeit--rop.pdf
39. L. Le. "Payload Already Inside: Data Re-Use for ROP Exploits." In *Black Hat USA*, July 2010.
40. J. Li, Z. Wang, X. Jiang, M. Grace, and S. Bahram. "Defeating Return-Oriented Rootkits with 'Return-Less' Kernels." In *Proceedings of the 5th European Conference on Computer Systems, EuroSys '10*, pages 195–208. ACM, 2010.
41. F. Lindner. "Developments in Cisco IOS Forensics." CONFidence 2.0. [Online]. Available: http://www.recurity-labs.com/content/pub/FX_Router_Exploitation.pdf, Nov. 2009.
42. C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood. "Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation." In *PLDI '05: Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation*, pages 190–200. ACM, June 2005.
43. Microsoft. "Data Execution Prevention (DEP)." [Online]. Available: http://support.microsoft.com/kb/875352/EN-US/, 2006.
44. Nergal. "The Advanced Return-Into-Lib(c) Exploits: PaX Case Study." *Phrack Magazine*, 58(4), 2001.
45. N. Nethercote. "Dynamic Binary Analysis and Instrumentation." PhD thesis, University of Cambridge, 2004. [Online]. Available: http://valgrind.org/docs/phd2004.pdf
46. N. Nethercote and J. Seward. "Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation." *SIGPLAN Not.*, 42(6):89–100, 2007.
47. J. Newsome and D. Song. "Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software." In *Proceedings of the Network and Distributed Security Symposium*, 2005.
48. K. Onarlioglu, L. Bilge, A. Lanzi, D. Balzarotti, and E. Kirda. "G-Free: Defeating Return-Oriented Programming Through Gadget-Less Binaries." In *ACSAC'10, Annual Computer Security Applications Conference*, Dec. 2010.
49. PaX Team. [Online]. Available: http://pax.grsecurity.net/
50. S. Ragan. "Adobe Confirms Zero-Day - ROP Used to Bypass Windows Defenses." [Online]. Available: http://www.thetechherald.com/article.php/201036/6128/, 2010.
51. G. F. Roglia, L. Martignoni, R. Paleari, and D. Bruschi. "Surgically Returning to Randomized Lib(c)." In *Proceedings of the 25th Annual Computer Security Applications Conference (ACSAC 2009)*. IEEE, 2009.
52. H. Security. "Pwn2Own 2009: Safari, IE 8 and Firefox Exploited." [Online]. Available: http://www.h-online.com/security/news/item/Pwn2Own-2009-Safari-IE-8-and-Firefox-exploited-740663.html, 2010.
53. H. Shacham. "The Geometry of Innocent Flesh on the Bone: Return-Into-Libc Without Function Calls (on the x86)." In *CCS '07: Proceedings of the 14th ACM Conference on Computer and Communications Security*, pages 552–561. ACM, 2007.
54. H. Shacham, E. Jin Goh, N. Modadugu, B. Pfaff, and D. Boneh. "On the Effectiveness of Address-Space Randomization." In *CCS '04: Proceedings of the 11th ACM Conference on Computer and Communications Security*, pages 298–307. ACM, 2004.
55. S. Sinnadurai, Q. Zhao, and W. Fai Wong. "Transparent Runtime Shadow Stack: Protection Against Malicious Return Address Modifications." [Online]. Available: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.120.5702, 2008.
56. Solar Designer. "'Return-to-Libc' Attack." *Bugtraq*, 1997.
57. A. Sotirov and M. Dowd. "Bypassing Browser Memory Protections in Windows Vista." [Online]. Available: http://www.phreedom.org/research/bypassing-browser-memory-protections/, Aug. 2008. Presented at Black Hat 2008.
58. SPEC Standard Performance Evaluation Corporation. [Online]. Available: http://www.spec.org
59. Vendicator. "Stack Shield: A 'Stack Smashing' Technique Protection Tool for Linux." [Online]. Available: http://www.angelfire.com/sk/stackshield
60. P. Vreugdenhil. "Pwn2Own 2010 Windows 7 Internet Explorer 8 Exploit." [Online]. Available: http://vreugdenhilresearch.nl/Pwn2Own-2010-Windows7-InternetExplorer8.pdf, 2010.
61. T. Wang, T. Wei, G. Gu, and W. Zou. "TaintScope: A Checksum-Aware Directed Fuzzing Tool for Automatic Software Vulnerability Detection." In *Proceedings of the 31st IEEE Symposium on Security & Privacy (Oakland'10)*. IEEE Computer Society, 2010.