### Understanding Process Behavior and System Call Tracing

Traditionally, system calls are invoked by executing software interrupt instructions, which cause a transition from user-space to kernel-space. HyperSleuth can intercept these user-/kernel-space interactions. When the guest OS in VMX non-root mode executes an interrupt instruction, it causes an exit to VMX root mode, i.e., to the VMM.

Recently, CPU developers have introduced more efficient mechanisms for user-/kernel-space interactions. However, Intel VT-x does not natively support tracing system calls invoked through the `sysenter/sysexit` fast invocation interface used by modern operating systems.

To trace system calls, we adopt an approach inspired by Ether [5]. We intercept system calls using synthetic page fault exceptions. All system call invocations pass through a common gate, whose address is defined in the `SYSENTER EIP` register. We shadow this register's value and set the shadow copy to the address of a non-existent memory location, causing all system call invocations to result in a page fault exception and an exit to root mode. The VMM can easily detect the reason for the fault by inspecting the faulty address. When a system call invocation is trapped, the VMM logs the system call and resumes the execution of the guest from the real address of `SYSENTER EIP`. To intercept returns from system calls, we mark the page containing the return address as not accessible in the shadow page table. The log is then transmitted via the network to the trusted host.

### Experimental Evaluation

We implemented a prototype of the VMM and the routines for the three analyses described in Section 4. Our current implementation of HyperSleuth is specific to Microsoft Windows XP (32-bit). While the core of HyperSleuth is mostly OS-independent, the analysis routines (e.g., enumeration of running processes and active network connections) are OS-dependent and may need slight adjustments for different operating systems.

In this section, we discuss the experimental results concerning the launch of HyperSleuth, the lazy physical memory dumper, and the lie detector. For this, we simulated a compromised production system using an Intel Core i7 with 3GB RAM and a Realtek RTL8139 100Mbps network card. We disabled all but one core of the CPU, as the VMM currently supports a single core. We used a laptop to simulate the trusted host, which was used to attest the correct establishment of the dynamic root of trust and to collect and analyze the results.

#### 5.1 HyperSleuth Launch and Lazy Dump of Physical Memory

To evaluate the cost of launching HyperSleuth, the base overhead of the VMM, and the cost of the lazy physical memory dumper, we simulated the following scenario: a production DNS server was compromised, and we used HyperSleuth to dump the entire content of the physical memory under the heaviest possible load. An additional laptop on the same network flooded the DNS server with queries, and we measured the instantaneous round-trip time of the queries.

Figure 5 summarizes the results of our experiments. The graph shows the round-trip time of the queries sent to the compromised DNS server over time. The compromised machine handled all incoming DNS queries without any timeouts. Before launching HyperSleuth, the average round-trip time was approximately 0.34ms (mark 1 in Figure 5). Just after the launch, there was an initial increase to about 0.19s (mark 2 in Figure 5), caused by the bootstrap of the dynamic root of trust and the launch of the VMM, which must be performed atomically. After the launch, the round-trip time stabilized around 1.6ms, less than five times the round-trip time without the VMM. The overhead was mainly due to handling the shadow page table.

When we started the dump of the physical memory, we observed another, steeper peak (mark 3 in Figure 5). This was expected because many frequently accessed writable memory pages (e.g., the stack of the kernel and user-space processes, and global variables of the kernel) are likely written each time the corresponding process is scheduled. A dozen seconds later, the round-trip time stabilized again around 1.6ms (mark 4 in Figure 5). The regular peaks around 32ms every second (mark 5 in Figure 5) were caused by the periodic dump of non-written pages. Since the system was under heavy load, it never entered an idle loop, and the dump was forced after every second of uninterrupted CPU activity. The dumper was configured to dump 64 physical pages every second.

In conclusion, dumping the entire 3GB of RAM in the described setting required about 180 minutes, and the resulting dump could be analyzed using off-the-shelf tools like Volatility [18]. The total time could be reduced by increasing the number of physical pages dumped periodically, at the cost of a higher average round-trip time. On a 1Gbps network, we could increase the number of physical pages dumped every second to 640, reducing the total dump time to approximately 18 minutes. Although HyperSleuth introduces a non-negligible overhead, we were able to dump the entire memory content without interrupting the service (i.e., no DNS query timed out). In contrast, traditional (atomic) approaches would require 24 seconds, 50 seconds, and 4 minutes respectively on a 1Gbps network, a 480Mbps FireWire channel, and a 100Mbps network, during which the production system would be unable to handle any incoming requests.

#### 5.2 Lie Detection

Table 1 summarizes the results of the experiments we performed to assess the efficacy of the lie detection module. We used seven malware samples, each equipped with a rootkit component to hide malicious activity. HyperSleuth’s lie detector was used to detect the hidden activities. The results show that our approach can detect both user- and kernel-level rootkits.

For each malware sample, we proceeded as follows: first, we let the malware infect the untrusted system. Then, we launched HyperSleuth on the compromised host and triggered the lie detector. The module performed the analysis by leveraging the in-guest utility and then by collecting the same information directly from the VMM through OS-aware inspection. The results were sent separately to the trusted host, where we compared the two views of the system state. In all cases, we detected discrepancies between the two views, caused by lies. The state visible to the in-guest utility was altered by the rootkit, while the state visible to the HyperSleuth VMM was not.

As an example, consider the FUTo rootkit, which uses direct kernel object manipulation (DKOM) techniques to hide certain kernel objects created by the malware (e.g., processes) [1]. Our current implementation of the lie detector counteracts DKOM through analyses similar to those in RAIDE [20], which involve scanning internal structures of the Windows kernel that the malware must leave intact to preserve its functionality. By comparing the trusted and untrusted views, we noticed a process that was not present in the untrusted view produced by the in-guest utility. Another example is NucleRoot, a rootkit that hooks Windows’ System Service Descriptor Table (SSDT) to intercept system calls and filter out their results, hiding certain files, processes, and registry keys. In this case, we observed that some registry keys related to the malware were missing in the untrusted view.

Although we do not yet have empirical proof, we speculate that even rootkits like Shadow Walker [2] would be detected by our lie detector, as our approach allows direct memory inspection, bypassing a malicious page-fault handler and bogus TLB entries.

### Discussion

We presented HyperSleuth from a technical perspective. Our design and implementation decisions aimed to minimize hardware dependencies and maximize portability. Therefore, we opted for pure software-based approaches whenever possible. However, since HyperSleuth is a framework for live forensic analyses, it is important to consider its probatory value. The trustworthiness of the analysis results depends on the trust people have in the tool. To strengthen this, all HyperSleuth components should be verified to ensure their code meets all expectations [21]. In the future, we plan to further decrease the size of HyperSleuth’s code base to ease its verifiability, possibly by leveraging hardware-based attestation solutions like the TPM.

HyperSleuth’s effectiveness depends on the inability to detect its presence from the guest. Although the VMM is completely isolated from the guest, malware might attempt to detect HyperSleuth by trying to install another VMM. One approach to counter such attempts is to make the malware believe that virtualization support is not available.

### Related Work

The idea of using a VMM for sophisticated runtime analyses with tamper-proof guarantees has been widely explored. Garfinkel et al. [6] proposed using a VMM for OS-aware introspection, and subsequent work further elaborated on this [22, 5]. Other researchers suggested using a VMM to protect the guest OS from attacks, both with software-based VMMs [8] and hardware-supported virtualization [9]. Similar ideas were also proposed by other authors [7, 23]. Chen et al. [24] proposed a solution to protect application data even with a compromised OS. More recently, Vasudevan et al. [25] proposed XTREC, a lightweight framework for securely recording the execution control flow of all code in an untrusted system. These solutions must take control of the system before the guest is booted and cannot be removed until the guest is shut down. In contrast, HyperSleuth can be installed while the compromised system runs and can be removed on-the-fly once the analyses are completed. The idea of installing a VMM on a running system was also sketched in [26] and later investigated in our previous research to realize HyperDbg, a transparent kernel-level debugger [27].

Several researchers have proposed using VMMs to implement hard-to-detect and eradicate malware. SubVirt [28] was one of the first prototypes using this technique, but it required a reboot and introduced noticeable runtime overhead. Later, the Blue Pill malware [10] exploited hardware-assisted virtualization to infect a machine as it runs, without needing a reboot. HyperSleuth was inspired by this malware.

### Conclusion

We presented HyperSleuth, a framework for constructing forensic tools that leverages commodity hardware virtualization extensions to ensure that analysis results cannot be altered, even by an attacker with kernel-level privileges. HyperSleuth consists of a tiny hypervisor installed on a potentially compromised system as it runs and a secure loader that installs and verifies the hypervisor's integrity. We developed a proof-of-concept prototype of HyperSleuth and implemented three forensic analysis applications: a lazy physical memory dumper, a lie detector, and a system call tracer. Our experimental evaluation demonstrated the effectiveness of the proposed approach.

### References

1. Hoglund, G., Butler, J.: Rootkits: Subverting the Windows Kernel. Addison-Wesley Professional, Reading (2005)
2. Sparks, S., Butler, J.: Shadow Walker. Raising The Bar For Windows Rootkit Detection. Phrack Magazine 11(63) (2005)
3. AMD, Inc.: AMD Virtualization, www.amd.com/virtualization
4. Intel Corporation: Intel Virtualization Technology, http://www.intel.com/technology/virtualization/
5. Dinaburg, A., Royal, P., Sharif, M., Lee, W.: Ether: Malware Analysis via Hardware Virtualization Extensions. In: Proceedings of the 15th ACM Conference on Computer and Communications Security (2008)
6. Garfinkel, T., Rosenblum, M.: A Virtual Machine Introspection Based Architecture for Intrusion Detection. In: Proceedings of the Network and Distributed Systems Security Symposium. The Internet Society, San Diego (2003)
7. Payne, B.D., Carbone, M., Sharif, M., Lee, W.: Lares: An Architecture for Secure Active Monitoring Using Virtualization. In: Proceedings of the IEEE Symposium on Security and Privacy (2008)
8. Riley, R., Jiang, X., Xu, D.: Guest-Transparent Prevention of Kernel Rootkits with VMM-Based Memory Shadowing. In: Proceedings of the 11th International Symposium on Recent Advances in Intrusion Detection (2008)
9. Seshadri, A., Luk, M., Qu, N., Perrig, A.: SecVisor: A Tiny Hypervisor to Provide Lifetime Kernel Code Integrity for Commodity OSes. In: Proceedings of the ACM Symposium on Operating Systems Principles. ACM, New York (2007)
10. Rutkowska, J.: Subverting Vista Kernel For Fun And Profit. Black Hat USA (2006)
11. McCune, J.M., Parno, B., Perrig, A., Reiter, M.K., Isozaki, H.: Flicker: An Execution Infrastructure for TCB Minimization. In: Proceedings of the ACM European Conference in Computer Systems (2008)
12. Seshadri, A., Luk, M., Shi, E., Perrig, A., van Doorn, L., Khosla, P.: Pioneer: Verifying Integrity and Guaranteeing Execution of Code on Legacy Platforms. In: Proceedings of ACM Symposium on Operating Systems Principles (2005)
13. Seshadri, A., Perrig, A., van Doorn, L., Khosla, P.: Swatt: Software-based Attestation for Embedded Devices. In: Proceedings of the IEEE Symposium on Security and Privacy (2004)
14. Martignoni, L., Paleari, R., Bruschi, D.: Conqueror: Tamper-Proof Code Execution on Legacy Systems. In: Proceedings of the Conference on Detection of Intrusions and Malware and Vulnerability Assessment. LNCS. Springer, Heidelberg (2010)
15. Grawrock, D.: Dynamics of a Trusted Platform: A Building Block Approach. Intel Press, Hillsboro (2009)
16. Carbone, M., Zamboni, D., Lee, W.: Taming Virtualization. IEEE Security and Privacy 6(1) (2008)
17. Smith, J.E., Nair, R.: Virtual Machines: Versatile Platforms for Systems and Processes. Morgan Kaufmann, San Francisco (2005)
18. Volatile Systems LLC: Volatility, http://www.volatilesystems.com/
19. Forrest, S., Hofmeyr, S.R., Somayaji, A., Longstaff, T.A.: A Sense of Self for Unix Processes. In: Proceedings of the IEEE Symposium on Security and Privacy (1996)
20. Butler, J., Silberman, P.: RAIDE: Rootkit Analysis Identification Elimination. In: Black Hat USA (2006)
21. Franklin, J., Seshadri, A., Qu, N., Datta, A., Chaki, S.: Attacking, Repairing, and Verifying SecVisor: A Retrospective on the Security of a Hypervisor. Technical Report, Carnegie Mellon University (2008)
22. Jiang, X., Wang, X.: "Out-of-the-Box" Monitoring of VM-Based High-Interaction Honeypots. In: Proceedings of the International Symposium on Recent Advances in Intrusion Detection (2007)
23. Sharif, M., Lee, W., Cui, W., Lanzi, A.: Secure In-VM Monitoring Using Hardware Virtualization. In: Proceedings of the ACM Conference on Computer and Communications Security (2009)
24. Chen, X., Garfinkel, T., Lewis, E.C., Subrahmanyam, P., Waldspurger, C.A., Boneh, D., Dwoskin, J., Ports, D.R.K.: Overshadow: A Virtualization-Based Approach to Retrofitting Protection in Commodity Operating Systems. Operating Systems Review 42(2) (2008)
25. Perrig, A., Gligor, V., Vasudevan, A.: XTREC: Secure Real-Time Execution Trace Recording and Analysis on Commodity Platforms. Technical Report, Carnegie Mellon University (2010)
26. Sahita, R., Warrier, U., Dewan, P.: Dynamic Software Application Protection. Technical Report, Intel Corporation (2009)
27. Fattori, A., Paleari, R., Martignoni, L., Monga, M.: HyperDbg: A Fully Transparent Kernel-Level Debugger, http://code.google.com/p/hyperdbg/
28. King, S.T., Chen, P.M., Wang, Y.M., Verbowski, C., Wang, H.J., Lorch, J.R.: SubVirt: Implementing Malware with Virtual Machines. In: Proceedings of IEEE Symposium on Security and Privacy (2006)