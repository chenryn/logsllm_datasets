### Wrap/Decrypt Attack Based on Asymmetric Keys

#### Key Vulnerabilities
- **Sensitive keys are directly readable.**
- **Unextractable keys, which should be unreadable according to the standard, are also directly readable.**
- **Sensitive and unextractable keys can be changed into nonsensitive and extractable keys, respectively.**

#### Discovery and Analysis
- The first attack of this type was discovered by Tookan.
- SATMC (SAT-based Model-Checker) identified a variant of this attack on vulnerable tokens. Despite its apparent simplicity, this attack had not been previously documented in PKCS#11 security literature [6, 8].

#### Attack Variants
- **Attack a2:**
  - **Wrapping Key:** Public key `pub(z)`
  - **Decryption Key:** Corresponding private key `priv(z)`
  - **Wrap Operation:**
    \[
    h(n2, pub(z)), h(n1, k1) \rightarrow \{k1\}pub(z)
    \]
  - **Decrypt Operation:**
    \[
    h(n2, priv(z)), \{k1\}k2 \rightarrow k1
    \]
  - **Simplification:** The attacker can import a public wrapping key while knowing the corresponding private key, making it easier to decrypt the wrapped sensitive key.

- **Attack a3:**
  - **Flaw:** Sensitive keys should never be communicated outside the token. However, some devices return the plain key value instead of an error code.
  - **Violation:** This is a clear violation of the PKCS#11 security policy.

- **Attack a4:**
  - **Flaw:** Unextractable keys should not be readable, even if they are nonsensitive. If they are readable, it is another violation of the PKCS#11 security policy.

- **Attack a5:**
  - **Flaw:** Changing sensitive and unextractable keys into nonsensitive and extractable ones.
  - **Affected Tokens:** Only the Sata and Gemalto SafeSite Classic V2 tokens allow this operation.
  - **Note:** This attack does not introduce new flaws for these devices since attacks a3 and a4 already make sensitive or unextractable keys accessible.

### Model-Checking Results
- **Column 'mc':** Reports which attacks were automatically rediscovered via model-checking.
- **Run-times:** Vary from a few seconds to just over 3 minutes.
- **Performance Evaluation:** Further evaluated in section 6.

### Finding Secure Configurations
- **Current State:** None of the tested tokens can securely import and export sensitive keys.
- **Insecure Tokens:** Either inherently insecure or have had their functionality drastically restricted.
- **CryptokiX:**
  - **Overview:** A software implementation of a Cryptoki token with configurable security.
  - **Educational Use:** Adopted for a security lab class at the University of Venice, where students attempt to extract sensitive keys from a partially patched token.
  - **Starting Point:** openCryptoki, an open-source PKCS#11 implementation for Linux.
  - **Patches:**
    - **Conflicting Attributes:** Prevents the same key from being used for both wrapping and decrypting.
    - **Sticky Attributes:** Ensures that certain attributes, such as "sensitive," remain unchanged.
    - **Wrapping Formats:** Binds key attributes to the key, preventing attacks where the key is unwrapped twice with conflicting attributes.
    - **Secure Templates:** Limits the set of admissible attribute combinations for keys to avoid conflicting roles at creation time.

### Conclusion
- **Commercial Tokens:** Poor state of security; 5 out of 17 tested tokens trivially gave up their sensitive keys, and 3 were vulnerable to various key separation attacks.
- **Tookan Performance:** Successfully found attacks on all vulnerable tokens, usually within a few seconds.
- **Future Work:**
  - Extend the model to more cryptographic detail.
  - Test Tookan on more sophisticated devices, such as Hardware Security Modules (HSMs).
  - Contribute to the development of better standards for key management, such as IEEE 1619.3 and OASIS KMIP.

### References
- [1] A. Armando and L. Compagna. SAT-based model-checking for security protocols analysis. Int. J. Inf. Sec., 7(1):3–32, 2008.
- [2] L. Baloci and A. Vianello. Un sistema per lo studio della sicurezza. Baccalaureate Thesis, University of Venice, Italy, April 2010.
- [3] M. Bond. Attacks on cryptoprocessor transaction sets. In Proceedings of the 3rd International Workshop on Cryptographic Hardware and Embedded Systems (CHES’01), volume 2162 of LNCS, pages 220–234, Paris, France, 2001. Springer.
- [4] C. Cachin and N. Chandran. A secure cryptographic token interface. In Computer Security Foundations (CSF-22), pages 141–153, Long Island, New York, 2009. IEEE Computer Society Press.
- [5] R. Clayton and M. Bond. Experience using a low-cost FPGA design to crack DES keys. In Cryptographic Hardware and Embedded System - CHES 2002, pages 579–592, 2002.
- [6] J. Clulow. On the security of PKCS#11. In 5th International Workshop on Cryptographic Hardware and Embedded Systems (CHES 2003), pages 411–425, 2003.
- [7] V. Cortier and G. Steel. A generic security API for symmetric key management on cryptographic devices. In M. Backes and P. Ning, editors, Proceedings of the 14th European Symposium on Research in Computer Security (ESORICS’09), volume 5789 of Lecture Notes in Computer Science, pages 605–620, Saint Malo, France, Sept. 2009. Springer.
- [8] S. Delaune, S. Kremer, and G. Steel. Formal analysis of PKCS#11. In Proceedings of the 21st IEEE Computer Security Foundations Symposium (CSF’08), pages 331–344, Pittsburgh, PA, USA, June 2008. IEEE Computer Society Press.
- [9] S. Delaune, S. Kremer, and G. Steel. Formal analysis of PKCS#11 and proprietary extensions. Journal of Computer Security, 2009. To appear.
- [10] D. Dolev and A. Yao. On the security of public key protocols. IEEE Transactions in Information Theory, 2(29):198–208, March 1983.
- [11] S. Fröschle and G. Steel. Analysing PKCS#11 key management APIs with unbounded fresh data. In P. Degano and L. Viganò, editors, Revised Selected Papers of the Joint Workshop on Automated Reasoning for Security Protocol Analysis and Issues in the Theory of Security (ARSPA-WITS’09), volume 5511 of Lecture Notes in Computer Science, pages 92–106, York, UK, Aug. 2009. Springer.
- [12] D. Longley and S. Rigby. An automatic search for security flaws in key management schemes. Computers and Security, 11(1):75–89, March 1992.
- [13] openCryptoki. http://sourceforge.net/projects/opencryptoki/.
- [14] RSA Security Inc., v2.20. PKCS #11: Cryptographic Token Interface Standard., June 2004.