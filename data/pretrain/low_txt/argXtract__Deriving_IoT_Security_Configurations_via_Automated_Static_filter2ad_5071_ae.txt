### Device Analysis: Goji Go Activity Tracker

We conducted an analysis of the Goji Go Activity Tracker, extracting its firmware from the companion mobile application. The tracker features two SIG services, along with the Nordic firmware update service and a developer-defined service. We compared the results obtained using argXtract with those from manual analysis (via nRF Connect app [56] and ATT-Profiler tool [71]). Our findings indicate that argXtract accurately extracted the device's configuration.

### Case Study: BLE Security and Privacy (Nordic)

Bluetooth Low Energy (BLE) is a prevalent communication technology in the Internet of Things (IoT), installed on billions of endpoint devices [14]. This section presents a case study on identifying BLE configuration vulnerabilities in binaries targeting Nordic chipsets. The Nordic BLE stack accepts configuration requests via supervisor calls.

#### Building the Firmware Dataset

BLE peripherals often interface with mobile applications, many of which enable firmware upgrades or factory reset procedures. The firmware for these purposes is either embedded in the mobile application or downloaded from a server. The structure and included files make the firmware for Nordic chipsets identifiable.

We programmatically extracted Nordic BLE binaries from a dataset of over 35,000 BLE-enabled mobile apps, sourced from Androzoo [1] and Google Play. We executed argXtract against 243 unique binaries. To check for cloned firmware, we used ssdeep [44] with a 70% threshold, accounting for common Nordic baseline code. Our dataset revealed seven clusters, each containing an average of three files. These clusters were considered when presenting our results.

#### Execution Environment

argXtract was executed on a virtual machine (VM) running Ubuntu 18.04.3 LTS, equipped with 64GB RAM and 10 processor cores. We ran eight parallel processes, taking into account RAM usage.

#### Section Outline

The remainder of this section describes our findings:
1. **Security of BLE Data** (ยง5.1): Review of the protection applied to BLE data across the link and application layers.
2. **Use of Fixed Passkeys** (ยง5.2): Analysis of weakened pairing due to fixed passkeys.
3. **Privacy Concerns** (ยง5.3): Examination of privacy issues related to static addresses.
4. **Device/Manufacturer Names** (ยง5.4): Discussion of privacy concerns due to the use of static device and manufacturer names.

Each subsection provides an overview of the relevant aspect of BLE technology, describes the extracted data, and discusses the security or privacy implications. The targeted supervisor calls are listed in Table 2.

### 5.1 Security of BLE Data

BLE data is stored in attributes, including characteristics, services, and descriptors. Characteristics hold the data of interest, such as heart rate readings, and are grouped into services. Descriptors describe characteristic values. Access to attributes is controlled by attribute permissions, which include access, authentication/encryption, and authorisation permissions.

When link layer protection is required, three security modes can be applied. We focus on Mode 1, as Modes 2 and 3 were not observed in real-world devices. Mode 1 has four levels of protection:
- **Level 1**: No security.
- **Level 2**: Unauthenticated pairing with encryption (Just Works model).
- **Level 3**: Authenticated pairing with encryption (Passkey Entry or Numeric Comparison models).
- **Level 4**: Authenticated LE Secure Connections pairing with encryption using a 128-bit key.

Services are freely readable but not writable. Characteristics and specific descriptors can have authentication and authorisation permissions. Characteristics also have properties that determine how their data can be accessed, such as read, notifications, or indications.

#### Extracting Characteristic Security Configurations

We executed argXtract with a maximum execution time of 1.5 hours per trace, resulting in 199 valid output files. Validity checks ensured that characteristic permissions and service associations were correct. Six clusters were identified, and examination showed that files within each cluster had the same service configurations. Thus, we considered only 188 unique outputs.

##### Insufficient Protection for BLE Data

- **SIG-defined BLE Data**: argXtract extracted SIG-defined characteristics from 103 binaries. All devices followed SIG specifications, but developers consistently opted for lower security levels (Mode 1 Level 2) despite the availability of higher security options (Mode 1 Level 3). This may be due to the lack of a user interface on the devices.
- **Developer-defined BLE Data**: At least one developer-defined characteristic was extracted from 170 binaries. Table 3 summarizes the link layer and application layer protection applied to these characteristics. Link layer protection was virtually non-existent, with only five binaries specifying Mode 1 Level 2 authentication requirements. Application layer protection was slightly better but still inadequate.

**Security Implications**: Freely accessible BLE characteristics mean any user in the vicinity can read and write the data. Even if protected by Just Works pairing, an attacker can pair with the device and access its data. Strong link layer protection without application layer protection makes the data vulnerable to unauthorized access.

- **Readable Data**: Among the binaries with no protection for readable characteristics, we found numerous fitness trackers and healthcare devices, potentially storing sensitive personal information.
- **Writable Data**: One binary contained the SIG-defined Human Interface Device (HID) service with only Mode 1 Level 2 link layer protection. An attacker could transmit unsolicited messages and perform MitM attacks, as demonstrated in [43].

##### Different Permissions for Read vs. Notify

One binary had characteristics with both read and notify properties but different security settings. Mode 1 Level 2 security was required for reading, while notifications were freely accessible. This implies that data can always be accessed using the less secure mechanism, leading to a false sense of security.

### 5.2 Use of Fixed Passkeys

Passkey Entry provides MitM protection by requiring a user to manually enter a passkey displayed on the BLE peripheral. However, some developers program a fixed passkey, often due to the lack of input/output capabilities on the device.

**Identifying Fixed Passkeys**: argXtract identified a smartwatch binary that set a fixed passkey of "000000" using `sd_ble_opt_set` with `opt_id` 34.

**Security Implications**: Fixed passkeys undermine the security of the Passkey Entry model, especially if the same passkey is used for all devices of a certain brand. An attacker knowing the passkey for one device can covertly connect to any device of the same brand, effectively removing MitM protection.

### 5.3 User Tracking due to Fixed Addresses

BLE peripherals periodically transmit messages on advertising channels, which can be used to track the device. To mitigate this, the BLE specification defines resolvable private addresses, allowing a device to change its advertising address while still enabling reconnections from bonded peers.

There are four types of addresses:
- **Public**: Does not change during the device's lifetime.
- **Random Static**: Does not change during a single power cycle and may not change for the device's lifetime.
- **Private Resolvable**: Changes periodically, enabling reconnections by bonded peers.
- **Private Non-resolvable**: Changes periodically but does not allow reconnections.

**Extracting Advertising Address Type**: argXtract identified that 35 out of 243 firmware files included the svc numbers for address type selection/setting, with the remaining 208 files using the default random static address. Only one binary used resolvable private addresses, and one used non-resolvable addresses.

**Privacy Implications**: The use of public or random static addresses in advertising messages makes the BLE device and its owner vulnerable to tracking. In crowded locations, repeated visits by a user can be covertly tracked by monitoring BLE advertisements and logging device addresses, as demonstrated in [27].

This comprehensive analysis highlights the need for improved security and privacy practices in BLE device configurations.