### Serious Cross-Origin Attacks on Mobile Platforms

Serious cross-origin attacks can also occur on mobile platforms, making origin-based protection equally crucial for mobile security. Under the Same-Origin Policy (SOP), cross-origin communication must go through designated channels with proper mediation. A prominent example is the `postMessage` channel, which allows web content from one origin to send messages to another domain, with the browser ensuring that the recipient knows the true origin of the sender. However, the web developer of the recipient domain still needs to implement their own policy enforcement logic, which can be error-prone. Alternatively, the browser can act on whitelisted origins specified by the developer. An example is the Cross-Origin Resource Sharing (CORS) mechanism, where content from `a.com` can request resources from `b.com` using `XMLHttpRequest`. The server authorizes this cross-origin activity by attaching an `Access-Control-Allow-Origin: a.com` header to its HTTP response, and the browser enforces this policy, sending the message only to `a.com` webpages.

### Design of Morbs

The design of Morbs aligns with these browser-based security mechanisms. We introduce origin-based protection to mobile platforms, making the true origin of each message observable to app and web developers, and helping them enforce their policies at the OS level.

### Security on Mobile Platforms

Android's security framework is built on two main models: the sandbox model, which isolates an app’s data and code execution from the rest of the system, and the permission model, which grants different levels of privileges to access system resources under user consent. Previous studies have focused on bypassing these protections to obtain private user data (e.g., GPS location, phone contacts) or perform privileged operations (e.g., sending SMS messages) without user consent [10][11][12][13][14][27]. Most relevant to our work is permission re-delegation [10], where an unprivileged app sends an intent to another app with the appropriate permissions to act on its behalf, accessing resources it should not. However, this problem has been primarily studied in the context of local resources. Our focus is on protecting an app’s web resources, which are not explicitly included in Android's security models.

Luo et al. conducted two studies specifically on security issues related to WebView. In [42], they categorized existing issues raised by other researchers and discovered several new ones. Many of these issues affected Android applications using the open-source package DroidGap. In [43], they proposed a type of attack called "touchjacking," targeting weaknesses in WebView's handling of touch events.

### Defense Mechanisms

To address these problems, numerous defense mechanisms have been proposed [17][18][19][20]. Information-flow techniques, such as TaintDroid [15] and Vision [16], track the propagation of sensitive user data across suspicious apps at the instruction level. Unlike these existing techniques, our protection mechanism is designed to track the origin of messages exchanged between initiators and recipients for origin-based mediation. For this purpose, we work at the API level (assuming the OS is trusted), which is more efficient. A related technique called Quire [21] enables Android to trace and sign the entire IPC chain observed by the OS during intent messaging, allowing the recipient to identify the initiator. However, this approach does not determine a request’s web origin. For example, if an app is activated through a scheme URL generated by a malicious webpage displayed in the WebView instance of the Facebook app, the IPC chain does not reveal the malicious origin.

Similar call-sequence analyses have been performed on iOS to detect information leaks through iOS apps [22][23]. These analyses focus on malicious apps, while our focus is on protecting benign apps.

### Conclusion and Future Work

Unlike traditional web applications, which benefit from browser-level origin-based protection, apps on mobile OSes lack such safeguards. Our research shows that without this protection, mobile channels can be easily abused to gain unauthorized access to a user’s sensitive web resources. We identified five cross-origin issues in popular SDKs and high-profile apps like Facebook and Dropbox, which can be exploited to steal authentication credentials and other confidential information. Moreover, without OS support for origin-based protection, app development is prone to such cross-origin flaws, and developers may struggle to fix them even after discovery. This highlights the urgent need to integrate origin-based protection into mobile platforms.

In our research, we designed and implemented the first such protection mechanism, Morbs, for mediating cross-origin communications at the OS level. Our evaluation shows that this new technique effectively and efficiently controls the risks associated with these communications and can be conveniently utilized by app and web developers.

Our current implementation is for Android. Building this protection on iOS is equally important. Additionally, it would be valuable to automatically analyze existing apps to identify and defend against their cross-origin vulnerabilities using the origin protection we provided. Given the trend of web services being increasingly delivered through apps, further investigations are needed to understand how to better protect users’ web resources on mobile OSes, which were originally designed to safeguard a device’s local resources.

### Acknowledgements

We thank Seungyeop Han, Ravi Bhoraskar, and Jaeyeon Jung for their help in monitoring HTTPS traffic of the Android emulator. Authors from Indiana University are supported in part by National Science Foundation CNS-1117106 and CNS-1223477.

### References

[1] Fogie, S., Grossman, J., Hansen, R., Rager, A., & Petkov, P. (2007). XSS Attacks: Cross Site Scripting Exploits and Defense. Syngress Publishing.
[2] Auger, R. (2008). The cross-site request forgery (csrf/xsrf) faq. CGISecurity.com. Apr, 17.
[3] Barth, A., Jackson, C., & Mitchell, J. C. (2008, October). Robust defenses for cross-site request forgery. In Proceedings of the 15th ACM conference on Computer and communications security (pp. 75-88). ACM.
[4] Barth, A. (2011). The web origin concept.
[5] Cross-document messaging – HTML standard. http://www.whatwg.org/specs/web-apps/current-work/multipage/web-messaging.html#web-messaging
[6] van Kesteren, A. (2010). Cross-origin resource sharing. W3C Working Draft WD-cors-20100727.
[7] Garrett, J. J. (2005). Ajax: A new approach to web applications.
[8] Android Developers: Security Tips. http://developer.android.com/training/articles/security-tips.html
[9] Android Developers: Permissions. http://developer.android.com/guide/topics/security/permissions.html
[10] Felt, A. P., Wang, H. J., Moshchuk, A., Hanna, S., & Chin, E. (2011, August). Permission re-delegation: Attacks and defenses. In Proceedings of the 20th USENIX Security Symposium (Vol. 18, pp. 19-31).
[11] Davi, L., Dmitrienko, A., Sadeghi, A. R., & Winandy, M. (2011). Privilege escalation attacks on android. In Information Security (pp. 346-360). Springer Berlin Heidelberg.
[12] Grace, M., Zhou, Y., Wang, Z., & Jiang, X. (2012, February). Systematic detection of capability leaks in stock Android smartphones. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security.
[13] Schlegel, R., Zhang, K., Zhou, X., Intwala, M., Kapadia, A., & Wang, X. (2011, February). Soundcomber: A stealthy and context-aware sound trojan for smartphones. In Proceedings of the 18th Annual Network and Distributed System Security Symposium (NDSS) (pp. 17-33).
[14] Schrittwieser, S., Frühwirt, P., Kieseberg, P., Leithner, M., Mulazzani, M., Huber, M., & Weippl, E. (2012, February). Guess Who’s Texting You? Evaluating the Security of Smartphone Messaging Applications. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security.
[15] Enck, W., Gilbert, P., Chun, B. G., Cox, L. P., Jung, J., McDaniel, P., & Sheth, A. N. (2010, October). TaintDroid: an information-flow tracking system for realtime privacy monitoring on smartphones. In Proceedings of the 9th USENIX conference on Operating systems design and implementation (pp. 1-6).
[16] Gilbert, P., Chun, B. G., Cox, L. P., & Jung, J. (2011, June). Vision: automated security validation of mobile apps at app markets. In Proceedings of the second international workshop on Mobile cloud computing and services (pp. 21-26). ACM.
[17] Bugiel, S., Davi, L., Dmitrienko, A., Fischer, T., Sadeghi, A. R., & Shastry, B. (2012, February). Towards taming privilege-escalation attacks on Android. In 19th Annual Network & Distributed System Security Symposium (NDSS) (Vol. 17, pp. 18-25).
[18] Shekhar, S., Dietz, M., & Wallach, D. S. (2012). Adsplit: Separating smartphone advertising from applications. CoRR, abs/1202.4030.
[19] Fragkaki, E., Bauer, L., Jia, L., & Swasey, D. (2012). Modeling and enhancing Android’s permission system. In Computer Security–ESORICS 2012 (pp. 1-18). Springer Berlin Heidelberg.
[20] Davi, L., Dmitrienko, A., Egele, M., Fischer, T., Holz, T., Hund, R., ... & Sadeghi, A. R. (2012, February). MoCFI: A framework to mitigate control-flow attacks on smartphones. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security.
[21] Dietz, M., Shekhar, S., Pisetsky, Y., Shu, A., & Wallach, D. S. (2011, August). Quire: Lightweight provenance for smart phone operating systems. In Proceedings of the 20th USENIX Security Symposium.
[22] Egele, M., Kruegel, C., Kirda, E., & Vigna, G. (2011, February). PiOS: Detecting privacy leaks in iOS applications. In Proceedings of the Network and Distributed System Security Symposium.
[23] Werthmann, T., Hund, R., Davi, L., Sadeghi, A. R., & Holz, T. (2013). PSiOS: Bring Your Own Privacy & Security to iOS Devices.
[24] Hardy, N. (1988). The Confused Deputy: (or why capabilities might have been invented). ACM SIGOPS Operating Systems Review, 22(4), 36-38.
[25] Hermandroid. “Launching an Android application from a URL”. http://androidsmith.com/2011/07/launching-an-android-application-from-a-url/
[26] Apple URL Scheme Reference. http://developer.apple.com/library/ios/#featuredarticles/iPhoneURLScheme_Reference/Introduction/Introduction.html
[27] Chin, E., Felt, A. P., Greenwood, K., & Wagner, D. (2011, June). Analyzing inter-application communication in Android. In Proceedings of the 9th international conference on Mobile systems, applications, and services (pp. 239-252). ACM.
[28] Android Developers: WebView.addJavaScriptInterface. http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface%28java.lang.Object,%20java.lang.String%29
[29] Android Developers: Parcel. http://developer.android.com/reference/android/os/Parcel.html
[30] Android Developers: Java Native Interface. http://developer.android.com/training/articles/perf-jni.html
[31] Supporting materials for this work. http://research.microsoft.com/en-us/um/people/ruiwan/mobile-origin/index.html
[32] A local file loaded from SD card to webview on Android can cross-domain. http://lists.grok.org.uk/pipermail/full-disclosure/2012-February/085619.html
[33] Android-apktool – A tool for reverse engineering Android apk files. http://code.google.com/p/android-apktool/
[34] AndroChef Java Decompiler. http://www.neshkov.com/ac_decompiler.html
[35] Facebook Developers – Dialogs Overview. https://developers.facebook.com/docs/reference/dialogs/
[36] Android Developers – HttpClient. http://developer.android.com/reference/org/apache/http/client/HttpClient.html
[37] Android Developers – HttpURLConnection. http://developer.android.com/reference/java/net/HttpURLConnection.html
[38] iOS Developer Library – NSURLConnection Class Reference. http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/Reference/Reference.html#//apple_ref/occ/cl/NSURLConnection
[39] iOS Developer Library – Making HTTP and HTTPS Requests. http://developer.apple.com/library/ios/#documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/WorkingWithHTTPAndHTTPSRequests/WorkingWithHTTPAndHTTPSRequests.html
[40] The implementation of the mobile origin-based security mechanism (Morbs) on Android is published on GitHub. https://github.com/mobile-security/Morbs
[41] PlainText – Dropbox text editing for iPhone, iPod touch, and iPad. https://itunes.apple.com/us/app/plaintext-dropbox-text-editing/id391254385?mt=8
[42] Luo, T., Hao, H., Du, W., Wang, Y., & Yin, H. (2011, December). Attacks on WebView in the Android system. In Proceedings of the 27th Annual Computer Security Applications Conference (pp. 343-352).
[43] Luo, T., Jin, X., Ajai, A., & Du, W. Touchjacking attacks on web in Android, iOS, and Windows Phone. In Proceedings of 5TH International Symposium on Foundations & Practice of Security (FPS 2012).

This version of the text is more organized, clear, and professional, with improved flow and coherence.