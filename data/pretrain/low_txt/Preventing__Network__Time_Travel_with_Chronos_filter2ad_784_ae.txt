### Figure 16: β as a Function of x

The server pool for Chronos clients in Europe still comprises hundreds of servers, as illustrated in Figure 14. Additionally, an examination of the delay values and distribution presented in Figure 13 indicates that setting a delay threshold of 80ms is sufficient to create large server pools in California and Ohio, encompassing the majority of available NTP servers in these regions. We now turn our attention to Virginia, which exhibits the highest average delay. Figure 15 shows a cumulative distribution function (CDF). As depicted, a delay threshold of 80ms results in a server pool of only 90 servers, while a threshold of 107ms yields a pool of 300 servers. This suggests that the optimal delay threshold varies across geographical regions, and generally, a threshold below 100ms enables the creation of very large server pools.

### B. Choosing ω

#### Bounding Inter-Sample Distances

Recall that after sampling the server pool, Chronos discards the highest and lowest samples and then checks that the distance between the highest and lowest remaining samples does not exceed a certain threshold (specifically, 2ω). Our goal is to gain empirical insights into a reasonable threshold to set.

We examined each of the 2,000 all-server-sample sets and, for each set, removed the x lowest-offset-value and x highest-offset-value samples for varying values of x. We refer to the distance between the lowest and highest remaining samples as β.

Figure 16 plots the average value of β across all experiments as a function of x, i.e., the fraction of samples removed from each end of the total number of queried servers. When x = 0.33, meaning two-thirds of the samples are removed, β is less than 4ms. Furthermore, when x = 0.033, or 6.6% of the samples are removed, β is always below 50ms, with a maximum difference of 25ms between regions. These results indicate that even when x is very low relative to the sample size n, i.e., when only the extreme values are discarded, the inter-sample distance remains manageable.

### Client-Server Communication

Client-server communication, as proposed in [36], [42], is a nontrivial task in practice.

### Clock Synchronization in Distributed Computing Theory

Clock synchronization in distributed systems has been a central topic in distributed computing research since its early days [20]. Cristian's early work [5] influenced the design of clock synchronization protocols still in use today. The specific clock synchronization protocol used in NTP was suggested by Marzullo [28]–[30].

Fault-tolerant clock synchronization has also received significant attention [6], [15], [44]. The concept of using approximate agreement [7], [8] to synchronize clocks was introduced in [44]. However, the fault-tolerant protocols mentioned above were designed for relatively small groups of processors and were not intended for Internet-scale operations. Chronos adapts ideas from this rich body of literature to the context of NTP time synchronization, addressing challenges such as maintaining backwards compatibility, avoiding excessive overhead, and more.

### VII. Conclusion and Future Research

We have presented Chronos, an NTP client designed to enable secure time synchronization in a backwards-compatible, easily deployable manner, without incurring excessive communication overhead. We view Chronos as a promising approach to securing NTP, sidestepping many obstacles faced by prior methods.

We leave the reader with several interesting directions for future research:

- **Chronos’ Time Synchronization Guarantees**: Our primary motivation in designing Chronos was to prevent timeshifting attacks. We conjecture that Chronos, relying on more time samples and crowdsourcing queries across multiple servers, might improve time accuracy compared to current NTP clients. This question is left for future research. Our results in Section V-A (see Figure 12) suggest that the majority of servers in Chronos' server pools exhibit local times that are very close to each other, indicating that averaging over many servers' clock values is a reasonable approach for achieving time accuracy.
  
- **Better Security Guarantees**: Our analysis of Chronos' security guarantees aimed to set an upper bound on the attacker's probability of success, showing it to be negligible. Deeper investigation into the implications of parameter settings, more nuanced probabilistic analyses, and other factors could lead to better formal security guarantees.
  
- **Upper Bounds on NTP Security Schemes**: Our results show that Chronos significantly outperforms current NTP clients in terms of resilience to man-in-the-middle (MitM) attacks. To determine how close Chronos is to the optimal level of security, we need to set upper bounds on the security achievable by any backwards-compatible NTP client design. Consider a model where an NTP client can repeatedly query a server pool of size n and is limited to some expected number of queries x per time-update round. What are the optimal security guarantees of deterministic/randomized time-sampling schemes as a function of n, x, and the fraction of the server pool controlled by the attacker?
  
- **Weighing Servers According to Reputation**: Chronos' time sampling scheme treats all servers equally when sampling and averaging. An alternative approach could weigh servers differently based on their reliability (e.g., GPS clocks), trustworthiness (e.g., servers controlled by trusted parties), and past behavior (e.g., servers with good "reputation" from past sampling iterations).
  
- **Benefits from Changes to the Server-Side**: A key principle guiding Chronos' design is to avoid changes to NTP servers, focusing instead on the client side to facilitate easier and more realistic deployment. Understanding the security implications of being able to modify a small number of NTP servers could be valuable and potentially beneficial.
  
- **Extending Our Approach to Other Protocols**: While our focus is on NTP, applying our high-level approach to other time-synchronization protocols, such as PTP [11], [45], might help in securing these alternate schemes.

We advocate further exploration of the merits and limitations of Chronos and the feasibility of this new path to NTP security.

### Acknowledgements

We thank the Cyber Security Research Center at Hebrew University, in conjunction with the Israeli National Cyber Bureau (INCB) in the Prime Minister’s Office, for financial support. We also thank the INCB for helpful discussions. We thank the anonymous reviewers and Vyas Sekar for valuable comments. Michael Schapira and Neta Rozen Schiff are supported by an ERC Starting Grant.

### References

[1] Ntp version 4.2.8p9 code, November 2016.
[2] The secure network time protocol (ntpsec) distribution, April 2017.
[3] ANDREEVA, O., GORDEYCHIK, S., GRITSAI, G., KOCHETOVA, O., POTSELUEVSKAYA, E., SIDOROV, S. I., AND TIMORIN, A. A. Industrial control systems vulnerabilities statistics. Tech. rep., Kaspersky lab, 2016.
[4] AWERBUCH, B., CURTMOLA, R., HOLMER, D., NITA-ROTARU, C., AND RUBENS, H. Mitigating byzantine attacks in ad hoc wireless networks. Tech. rep., Department of Computer Science, Johns Hopkins University, Tech, 2004.
[28] MARZULLO, K., AND OWICKI, S. Maintaining the time in a distributed system. In Proceedings of the Second Annual ACM Symposium on Principles of Distributed Computing (New York, NY, USA, 1983), PODC ’83, ACM, pp. 295–305.
[29] MARZULLO, K. A. Maintaining the time in a distributed system. Tech. rep., Xerox, 1984.
[30] MARZULLO, K. A. Maintaining the Time in a Distributed System: An Example of a Loosely-coupled Distributed Service (Synchronization, Fault-tolerance, Debugging). PhD thesis, Stanford, CA, USA, 1984. AAI8506272.
[31] MILLS, D. How ntp works, 2014.
[32] MILLS, D., MARTIN, J., BURBANK, J., AND KASCH, W. Rfc 5905: Network time protocol version 4: Protocol and algorithms specification. internet engineering task force (ietf), 2010.
[33] MILLS, D. L. Internet time synchronization: the network time protocol. IEEE Transactions on Communications 39 (1991), 1482–1493.
[34] MILLS, D. L., MAMAKOS, L., AND PETRY, M. Network Time Protocol (NTP). RFC 958, sep 1985.
[35] MIZRAHI, T. A game theoretic analysis of delay attacks against time synchronization protocols. In 2012 IEEE International Symposium on Precision Clock Synchronization for Measurement, Control and Communication Proceedings (Sept 2012), pp. 1–6.
[36] MIZRAHI, T. Slave diversity: Using multiple paths to improve the accuracy of clock synchronization protocols. In 2012 IEEE International Symposium on Precision Clock Synchronization for Measurement, Control and Communication Proceedings (Sept 2012), pp. 1–6.
[37] MIZRAHI, T. Rfc 7384 (informational): Security requirements of time protocols in packet switched networks, October 2014.
[38] NOVICK, A. N., AND LOMBARDI, M. A. Practical limitations of ntp time transfer. In 2015 Joint Conference of the IEEE International Frequency Control Symposium the European Frequency and Time Forum (April 2015), pp. 570–574.
[39] PETERSON, A. Researchers say u.s. internet traffic was re-routed through belarus. that’s a problem., November 2013.
[40] ROTTGER, S. Analysis of the ntp autokey procedures. master’s thesis, technische universitt braunschweig, 2012.
[41] SELVI, J. Bypassing http strict transport security. In Black Hat Europe (2014).
[42] SHPINER, A., REVAH, Y., AND MIZRAHI, T. Multi-path time protocols. In 2013 IEEE International Symposium on Precision Clock Synchronization for Measurement, Control and Communication (ISPCS) Proceedings (Sept 2013), pp. 1–6.
[43] TIME, N., AND DIVISION, F. The nist authenticated ntp service, 2010.
[44] WELCH, J. L., AND LYNCH, N. A. A new fault-tolerance algorithm for clock synchronization. Inf. Comput. 77, 1 (1988), 1–36.
[45] WOLFE, M. Improving network timing in financial institutions: Regulatory imperative or opportunity to achieve operational excellence? In The ATIS Workshop on Time Sync in Financial Markets (November 2016).
[5] CRISTIAN, F. Probabilistic clock synchronization. Distributed Computing 3, 3 (1989), 146–158.
[6] DOLEV, D., HALPERN, J. Y., SIMONS, B., AND STRONG, R. Dynamic fault-tolerant clock synchronization. J. ACM 42, 1 (Jan. 1995), 143–185.
[7] DOLEV, D., LYNCH, N. A., PINTER, S. S., STARK, E. W., AND WEIHL, W. E. Reaching approximate agreement in the presence of faults. In Third Symposium on Reliability in Distributed Software and Database Systems, SRDS 1983, Clearwater Beach, FL, USA, October 17-19, 1983, Proceedings (1983), IEEE Computer Society, pp. 145–154.
[8] DOLEV, D., LYNCH, N. A., PINTER, S. S., STARK, E. W., AND WEIHL, W. E. Reaching approximate agreement in the presence of faults. J. ACM 33, 3 (1986), 499–516.
[9] DOWLING, B., STEBILA, D., AND ZAVERUCHA, G. Authenticated network time synchronization. In 25th USENIX Security Symposium (USENIX Security 16) (Austin, TX, 2016), USENIX Association, pp. 823–840.
[10] DUAN, H., WEAVER, N., ZHAO, Z., HU, M., LIANG, J., JIANG, J., LI, K., AND PAXSON, V. Hold-On: Protecting against on-path DNS poisoning. In Securing and Trusting Internet Names (2012), National Physical Laboratory.
[11] ESTRELA, P. V., AND BONEBAKKER, L. Challenges deploying ptpv2 in a global financial company. In 2012 IEEE International Symposium on Precision Clock Synchronization for Measurement, Control and Communication Proceedings (September 2012), pp. 1–6.
[12] GERSTUNG, H. How to configure ntp for use in the ntp pool project on ubuntu 16.04, May 2017.
[13] GOLDBERG, S. Why is it taking so long to secure internet routing? Queue 12, 8 (Aug. 2014), 20:20–20:33.
[14] HABERMAN, B., AND MILLS, D. Rfc 5906: Network time protocol version 4: Autokey specification. internet engineering task force (ietf), 2010.
[15] HALPERN, J. Y., SIMONS, B., STRONG, R., AND DOLEV, D. Fault-tolerant clock synchronization. In Proceedings of the Third Annual ACM Symposium on Principles of Distributed Computing (New York, NY, USA, 1984), PODC ’84, ACM, pp. 89–102.
[16] HERZBERG, A., AND SHULMAN, H. Fragmentation Considered Poisonous: or one-domain-to-rule-them-all.org. In IEEE CNS 2013. The Conference on Communications and Network Security. (2013).
[17] HOCH, D. Integrating sun kerberos and microsoft active directory kerberos, 2005.
[18] HODGES, J., AND JACKSON, C. Http strict transport security (hsts), November 2012.
[19] KAMINSKY, D. It’s the end of the cache as we know it. In Black ops 2008, Black Hat USA.
[20] LAMPORT, L. Time, clocks, and the ordering of events in a distributed system. Commun. ACM 21, 7 (July 1978), 558–565.
[21] LEE, K. S., WANG, H., SHRIVASTAV, V., AND WEATHERSPOON, H. Globally synchronized time via datacenter networks. In Proceedings of the 2016 Conference on ACM SIGCOMM 2016 Conference (New York, NY, USA, 2016), SIGCOMM ’16, ACM, pp. 454–467.
[22] LISKA, A. NTP Security: A Quick-Start Guide. Apress, 2016.
[23] LTD, N. M. Time traceability for the finance sector. Tech. rep., NPL Management Ltd, United Kingdom, March 2016.
[24] MALHOTRA, A., COHEN, I. E., BRAKKE, E., AND GOLDBERG, S. Attacking the network time protocol. IACR Cryptology ePrint Archive 2015 (2015), 1020.
[25] MALHOTRA, A., AND GOLDBERG, S. Attacking ntp’s authenticated broadcast mode. SIGCOMM Comput. Commun. Rev. 46, 2 (May 2016), 12–17.
[26] MALHOTRA, A., GUNDY, M. V., VARIA, M., KENNEDY, H., GARDNER, J., AND GOLDBERG, S. The security of ntp’s datagram protocol. IACR Cryptology ePrint Archive 2016 (2016), 1006.
[27] MALHOTRA, A., GUNDY, M. V., VARIA, M., KENNEDY, H., GARDNER, J., AND GOLDBERG, S. The security of ntp’s datagram protocol. Tech. rep., 2016.