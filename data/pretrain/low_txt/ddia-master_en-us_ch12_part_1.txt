# 12. The Future of Data Systems
![](../img/ch12.png)
> *If a thing be ordained to another as to its end, its last end cannot consist in the preservation of its being. Hence a captain does not intend as a last end, the preservation of the ship entrusted to him, since a ship is ordained to something else as its end, viz. to navigation.*
>
> *(Often quoted as: If the highest aim of a captain was to preserve his ship, he would keep it in port forever.)*
>
> — St. Thomas Aquinas, *Summa Theologica* (1265–1274)

Up to this point, this book has primarily focused on describing the current state of data systems. In this final chapter, we will shift our perspective to the future and explore how data systems *should be* designed and built. I will present some ideas and approaches that, in my view, could fundamentally improve the way we create applications.

Opinions and speculations about the future are inherently subjective. Therefore, I will use the first person in this chapter to express my personal views. You are welcome to disagree and form your own opinions, but I hope the ideas presented here will at least serve as a starting point for productive discussions and bring clarity to often-confused concepts.

The goal of this book, as outlined in [Chapter 1](ch1.md), is to explore how to create applications and systems that are *reliable*, *scalable*, and *maintainable*. These themes have been central throughout the chapters, with discussions on fault-tolerance algorithms for reliability, partitioning for scalability, and mechanisms for evolution and abstraction to enhance maintainability. In this chapter, we will synthesize these ideas and build on them to envision the future. Our aim is to discover how to design applications that are better than those of today—robust, correct, evolvable, and ultimately beneficial to humanity.

## Summary

In this chapter, we explored new approaches to designing data systems, incorporating my personal opinions and speculations about the future. We began by acknowledging that no single tool can efficiently serve all possible use cases, and thus applications must integrate multiple pieces of software to achieve their goals. We discussed solving the *data integration* problem using batch processing and event streams to allow data changes to flow between different systems.

In this approach, certain systems are designated as systems of record, and other data is derived from them through transformations. This enables the maintenance of indexes, materialized views, machine learning models, statistical summaries, and more. By making these derivations and transformations asynchronous and loosely coupled, issues in one area are prevented from affecting unrelated parts of the system, thereby increasing overall robustness and fault tolerance.

Expressing data flows as transformations from one dataset to another also aids in evolving applications. For example, if you need to change the structure of an index or cache, you can simply rerun the new transformation code on the entire input dataset to rederive the output. Similarly, if something goes wrong, you can fix the code and reprocess the data to recover.

These processes are similar to what databases already do internally. We can think of dataflow applications as *unbundling* the components of a database and building an application by composing these loosely coupled components. Derived state can be updated by observing changes in the underlying data, and this derived state can further be observed by downstream consumers. We can even extend this dataflow to the end-user device, creating user interfaces that dynamically update to reflect data changes and continue to work offline.

Next, we discussed ensuring the correctness of these processes in the presence of faults. We saw that strong integrity guarantees can be implemented scalably with asynchronous event processing by using end-to-end operation identifiers to make operations idempotent and by checking constraints asynchronously. Clients can either wait until the check has passed or proceed without waiting but risk having to apologize for a constraint violation. This approach is more scalable and robust than traditional distributed transactions and aligns with many real-world business processes.

By structuring applications around dataflow and checking constraints asynchronously, we can minimize coordination and create systems that maintain integrity while performing well, even in geographically distributed scenarios and in the presence of faults. We also touched on using audits to verify data integrity and detect corruption.

Finally, we examined some ethical aspects of building data-intensive applications. While data can be used for good, it can also cause significant harm, such as making decisions that seriously affect people’s lives, leading to discrimination and exploitation, normalizing surveillance, and exposing intimate information. There is also the risk of data breaches, and well-intentioned uses of data may have unintended consequences.

As software and data have a profound impact on the world, engineers must remember that we carry a responsibility to work toward the kind of world we want to live in—a world that treats people with humanity and respect. I hope we can work together toward this goal.

## References

1. Rachid Belaid: “[Postgres Full-Text Search is Good Enough!](http://rachbelaid.com/postgres-full-text-search-is-good-enough/),” *rachbelaid.com*, July 13, 2015.
2. Philippe Ajoux, Nathan Bronson, Sanjeev Kumar, et al.: “[Challenges to Adopting Stronger Consistency at Scale](https://www.usenix.org/system/files/conference/hotos15/hotos15-paper-ajoux.pdf),” at *15th USENIX Workshop on Hot Topics in Operating Systems* (HotOS), May 2015.
3. Pat Helland and Dave Campbell: “[Building on Quicksand](https://database.cs.wisc.edu/cidr/cidr2009/Paper_133.pdf),” at *4th Biennial Conference on Innovative Data Systems Research* (CIDR), January 2009.
4. Jessica Kerr:  “[Provenance and Causality in Distributed Systems](http://blog.jessitron.com/2016/09/provenance-and-causality-in-distributed.html),” *blog.jessitron.com*, September 25, 2016.
5. Kostas Tzoumas: “[Batch Is a Special Case of Streaming](http://data-artisans.com/batch-is-a-special-case-of-streaming/),” *data-artisans.com*, September 15, 2015.
6. Shinji Kim and Robert Blafford: “[Stream Windowing Performance Analysis: Concord and Spark Streaming](http://concord.io/posts/windowing_performance_analysis_w_spark_streaming),” *concord.io*, July 6, 2016.
7. Jay Kreps: “[The Log: What Every Software Engineer Should Know About Real-Time Data's Unifying Abstraction](http://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying),” *engineering.linkedin.com*, December 16, 2013.
8. Pat Helland: “[Life Beyond Distributed Transactions: An Apostate’s Opinion](http://www-db.cs.wisc.edu/cidr/cidr2007/papers/cidr07p15.pdf),” at *3rd Biennial Conference on Innovative Data Systems Research* (CIDR), January 2007.
9. “[Great Western Railway (1835–1948)](https://www.networkrail.co.uk/VirtualArchive/great-western/),” Network Rail Virtual Archive, *networkrail.co.uk*.
10. Jacqueline Xu: “[Online Migrations at Scale](https://stripe.com/blog/online-migrations),” *stripe.com*, February 2, 2017.
11. Molly Bartlett Dishman and Martin Fowler: “[Agile Architecture](http://conferences.oreilly.com/software-architecture/sa2015/public/schedule/detail/40388),” at *O'Reilly Software Architecture Conference*, March 2015.
12. Nathan Marz and James Warren: *Big Data: Principles and Best Practices of Scalable Real-Time Data Systems*. Manning, 2015. ISBN: 978-1-617-29034-3.
13. Oscar Boykin, Sam Ritchie, Ian O'Connell, and Jimmy Lin: “[Summingbird: A Framework for Integrating Batch and Online MapReduce Computations](http://www.vldb.org/pvldb/vol7/p1441-boykin.pdf),” at *40th International Conference on Very Large Data Bases* (VLDB), September 2014.
14. Jay Kreps: “[Questioning the Lambda Architecture](https://www.oreilly.com/ideas/questioning-the-lambda-architecture),” *oreilly.com*, July 2, 2014.
15. Raul Castro Fernandez, Peter Pietzuch, Jay Kreps, et al.: “[Liquid: Unifying Nearline and Offline Big Data Integration](http://www.cidrdb.org/cidr2015/Papers/CIDR15_Paper25u.pdf),” at *7th Biennial Conference on Innovative Data Systems Research* (CIDR), January 2015.
16. Dennis M. Ritchie and Ken Thompson: “[The UNIX Time-Sharing System](http://www.cs.virginia.edu/~zaher/classes/CS656/p365-ritchie.pdf),” *Communications of the ACM*, volume 17, number 7, pages 365–375, July 1974. [doi:10.1145/361011.361061](http://dx.doi.org/10.1145/361011.361061).
17. Eric A. Brewer and Joseph M. Hellerstein: “[CS262a: Advanced Topics in Computer Systems](http://people.eecs.berkeley.edu/~brewer/cs262/systemr.html),” lecture notes, University of California, Berkeley, *cs.berkeley.edu*, August 2011.
18. Michael Stonebraker:  “[The Case for Polystores](http://wp.sigmod.org/?p=1629),” *wp.sigmod.org*, July 13, 2015.
19. Jennie Duggan, Aaron J. Elmore, Michael Stonebraker, et al.:  “[The BigDAWG Polystore System](http://dspace.mit.edu/openaccess-disseminate/1721.1/100936),” *ACM SIGMOD Record*, volume 44, number 2, pages 11–16, June 2015. [doi:10.1145/2814710.2814713](http://dx.doi.org/10.1145/2814710.2814713).
20. Patrycja Dybka:  “[Foreign Data Wrappers for PostgreSQL](http://www.vertabelo.com/blog/technical-articles/foreign-data-wrappers-for-postgresql),” *vertabelo.com*, March 24, 2015.
21. David B. Lomet, Alan Fekete, Gerhard Weikum, and Mike Zwilling:  “[Unbundling Transaction Services in the Cloud](https://www.microsoft.com/en-us/research/publication/unbundling-transaction-services-in-the-cloud/),” at *4th Biennial Conference on Innovative Data Systems Research* (CIDR), January 2009.
22. Martin Kleppmann and Jay Kreps: “[Kafka, Samza and the Unix Philosophy of Distributed Data](http://martin.kleppmann.com/papers/kafka-debull15.pdf),” *IEEE Data Engineering Bulletin*, volume 38, number 4, pages 4–14, December 2015.
23. John Hugg: “[Winning Now and in the Future: Where VoltDB Shines](https://voltdb.com/blog/winning-now-and-future-where-voltdb-shines),” *voltdb.com*, March 23, 2016.
24. Frank McSherry, Derek G. Murray, Rebecca Isaacs, and Michael Isard: “[Differential Dataflow](http://cidrdb.org/cidr2013/Papers/CIDR13_Paper111.pdf),” at *6th Biennial Conference on Innovative Data Systems Research* (CIDR), January 2013.