### 优化后的文本

**动态生成依赖于输入值的代码**

当符号执行引擎需要猜测即将执行的指令的正确值时，这一过程变得非常困难。动态修改代码的主要缺点在于它会改变程序的输入输出行为，并为远程攻击提供了机会。由于大多数软件开发者更关心远程攻击而非自动分析攻击，他们通常会避免使用此类变换，而选择不引入这种风险的混淆变换。因此，在本研究中，我们专注于不会引入远程攻击的混淆变换。

**复杂约束**

将基于输入值的等值检查应用密码散列函数是一种数据混淆变换，这对符号执行来说是个问题。特别是，符号执行引擎使用的SMT求解器在逆向密码散列函数方面存在实际限制 [41, 49]。然而，我们注意到，密码散列函数基于包含随机数的大查找表，这些表是公开的且容易在代码中找到。因此，我们认为如§2.4所述的主动攻击者能够定位并禁用使用散列函数进行输入值检查的显式检查。隐式检查虽然不能被禁用，但可能会导致应用程序崩溃，这是许多开发者所不愿看到的，甚至更糟的是，它们可能为远程攻击打开大门。此外，需要注意的是，散列函数仅适用于等值比较，因此范围比较需要通过其他方式保护。在本文中，我们将讨论通过控制流混淆来隐藏检查位置的混淆变换。

### 结论

我们讨论了为什么测试用例生成是三种常见攻击目标（简化CFG、识别和禁用完整性检查以及绕过许可证检查）的一个共同子目标。我们的实证案例研究表明，对于本文所使用的程序数据集，现有的一些混淆变换对白盒测试用例生成的抵抗能力较弱。由于这些数据集具有异质性（如表1和表2中的高标准差所示），我们认为这些结果可以推广到其他程序。

尽管符号执行在应用于大型软件程序时存在一些限制（见§5），但我们注意到符号执行目前是一个高度活跃的研究领域，并已成功应用于Microsoft Windows 7的漏洞发现 [33]，并在DARPA Cyber Grand Challenge中用于自动化漏洞利用生成 [5]。此外，许多反混淆技术也依赖于符号执行 [47]。此外，混淆通常只应用于软件的一部分以最小化性能影响 [19]，因此攻击者可能隔离并符号化分析软件的较小部分 [2]。

我们还提出了一种提高对符号执行抵抗力的混淆方法。我们已经实现了这种方法，并通过实验证实它相对于原始（未混淆）程序，使符号执行的速度降低了四个数量级。我们免费提供实现给学术界和工业界的成员。

在未来的工作中，我们希望使用更多的程序数据集、更多的混淆实现和更多的符号执行引擎来扩展这项研究。此外，我们希望能够衡量混淆对主动攻击（见§2.4）的抵抗力。我们认为这项实证研究有助于开发一个能够准确预测不同混淆技术对自动分析攻击（如符号执行）抵抗力的模型。为此，我们打算使用机器学习算法来训练模型并测试其预测准确性。最后，我们还计划进行分析研究，并提供实用混淆的正式定义。

**致谢**

感谢Saumya Debray和Martín Ochoa提供的宝贵见解和反馈。Collberg得到了美国国家科学基金会资助1525820和1318955的支持。

**参考文献**

[此处省略具体参考文献列表，保留引用编号]

[1] S. Anand, E. K. Burke, T. Y. Chen, J. Clark, M. B. Cohen, W. Grieskamp, M. Harman, M. J. Harrold, P. McMinn, et al. An orchestrated survey of methodologies for automated software test case generation. Journal of Systems and Software, 86(8):1978–2001, 2013.

[2] S. Anand, P. Godefroid, and N. Tillmann. Demand-driven compositional symbolic execution. In Tools and Algorithms for the Construction and Analysis of Systems, pages 367–381. Springer, 2008.

... [更多参考文献]

[58] B. Yadegari, B. Johannesmeyer, B. Whitely, and S. Debray. A generic approach to automatic deobfuscation of executable code. In Security and Privacy (SP), 2015 IEEE Symposium on, pages 674–691. IEEE, 2015.