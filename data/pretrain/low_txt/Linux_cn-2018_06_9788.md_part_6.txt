### 优化后的文本

#### 缺陷修复与编程语言属性的关系
最后，我们将缺陷修复提交与编程语言的属性相关联，这些属性可以反映出报告的风格或其他开发者的特性。可用的外部工具或库也会影响特定编程语言中的缺陷数量。

### 6. 总结
我们对编程语言及其使用进行了大规模研究，重点关注其对软件质量的影响。我们使用了来自GitHub的数据，这些数据具有高度复杂性和多维度差异。我们的样本规模允许我们在控制某些混杂因素的情况下，采用混合方法研究编程语言、应用领域和缺陷类型之间的相互作用。研究结果表明，函数式语言优于过程化语言；不允许隐式类型转换的语言优于允许隐式类型转换的语言；静态类型语言优于动态类型语言；管理内存的语言优于非管理内存的语言。此外，编程语言的缺陷倾向与软件应用领域无关。每个编程语言更多地与特定类型的bug相关，而不是所有类型的bug。

然而，即使是在大规模数据集上，当通过多种方法进行分割后，数据也会变得很小且不全面。因此，随着依赖变量的增加，很难量化某个变量的具体影响，尤其是在变量之间存在相互作用的情况下。因此，我们无法精确量化编程语言在实际使用中的具体效果。其他方法，如调查问卷，可能对此有所帮助。我们将在未来的工作中解决这些挑战。

### 致谢
本研究在美国国家科学基金会（NSF）和美国空军科学研究办公室（AFOSR）的支持下完成。资助项目编号为1445079, 1247280, 1414172, 1446683, FA955-11-1-0246。

### 参考文献
1. Bhattacharya, P., Neamtiu, I. Assessing programming language impact on development and maintenance: A study on C and C++. In *Proceedings of the 33rd International Conference on Software Engineering, ICSE'11* (New York, NY USA, 2011). ACM, 171–180.
2. Bird, C., Nagappan, N., Murphy, B., Gall, H., Devanbu, P. Don't touch my code! Examining the effects of ownership on software quality. In *Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering* (2011). ACM, 4–14.
3. Blei, D.M. Probabilistic topic models. *Commun. ACM 55* , 4 (2012), 77–84.
4. Cohen, J. *Applied Multiple Regression/Correlation Analysis for the Behavioral Sciences.* Lawrence Erlbaum, 2003.
5. Easterbrook, S., Singer, J., Storey, M.-A., Damian, D. Selecting empirical methods for software engineering research. In *Guide to Advanced Empirical Software Engineering* (2008). Springer, 285–311.
6. El Emam, K., Benlarbi, S., Goel, N., Rai, S.N. The confounding effect of class size on the validity of object-oriented metrics. *IEEE Trans. Softw. Eng. 27* , 7 (2001), 630–650.
7. Hanenberg, S. An experiment about static and dynamic type systems: Doubts about the positive impact of static type systems on development time. In *Proceedings of the ACM International Conference on Object Oriented Programming Systems Languages and Applications, OOPSLA'10* (New York, NY, USA, 2010). ACM, 22–35.
8. Harrison, R., Smaraweera, L., Dobie, M., Lewis, P. Comparing programming paradigms: An evaluation of functional and object-oriented programs. *Softw. Eng. J. 11* , 4 (1996), 247–254.
9. Harter, D.E., Krishnan, M.S., Slaughter, S.A. Effects of process maturity on quality, cycle time, and effort in software product development. *Manage. Sci. 46* 4 (2000), 451–466.
10. Hindley, R. The principal type-scheme of an object in combinatory logic. *Trans. Am. Math. Soc.* (1969), 29–60.
11. Jump, M., McKinley, K.S. Cork: Dynamic memory leak detection for garbage-collected languages. In *ACM SIGPLAN Notices* , Volume 42 (2007). ACM, 31–38.
12. Kleinschmager, S., Hanenberg, S., Robbes, R., Tanter, É., Stefik, A. Do static type systems improve the maintainability of software systems? An empirical study. In *2012 IEEE 20th International Conference on Program Comprehension (ICPC)* (2012). IEEE, 153–162.
13. Li, Z., Tan, L., Wang, X., Lu, S., Zhou, Y., Zhai, C. Have things changed now? An empirical study of bug characteristics in modern open source software. In *ASID'06: Proceedings of the 1st Workshop on Architectural and System Support for Improving Software Dependability* (October 2006).
14. Marques De Sá, J.P. *Applied Statistics Using SPSS, Statistica and Matlab* , 2003.
15. Mayer, C., Hanenberg, S., Robbes, R., Tanter, É., Stefik, A. An empirical study of the influence of static type systems on the usability of undocumented software. In *ACM SIGPLAN Notices* , Volume 47 (2012). ACM, 683–702.
16. Meyerovich, L.A., Rabkin, A.S. Empirical analysis of programming language adoption. In *Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications* (2013). ACM, 1–18.
17. Milner, R. A theory of type polymorphism in programming. *J. Comput. Syst. Sci. 17* , 3 (1978), 348–375.
18. Mockus, A., Votta, L.G. Identifying reasons for software changes using historic databases. In *ICSM'00. Proceedings of the International Conference on Software Maintenance* (2000). IEEE Computer Society, 120.
19. Odersky, M., Spoon, L., Venners, B. *Programming in Scala.* Artima Inc, 2008.
20. Pankratius, V., Schmidt, F., Garretón, G. Combining functional and imperative programming for multicore software: An empirical study evaluating scala and java. In *Proceedings of the 2012 International Conference on Software Engineering* (2012). IEEE Press, 123–133.
21. Petricek, T., Skeet, J. *Real World Functional Programming: With Examples in F# and C#.* Manning Publications Co., 2009.
22. Pierce, B.C. *Types and Programming Languages.* MIT Press, 2002.
23. Posnett, D., Bird, C., Dévanbu, P. An empirical study on the influence of pattern roles on change-proneness. *Emp. Softw. Eng. 16* , 3 (2011), 396–423.
24. Tan, L., Liu, C., Li, Z., Wang, X., Zhou, Y., Zhai, C. Bug characteristics in open source software. *Emp. Softw. Eng.* (2013).

### 作者
**Baishakhi Ray** ([PI:EMAIL](mailto:PI:EMAIL)), Department of Computer Science, University of Virginia, Charlottesville, VA.
**Daryl Posnett** ([PI:EMAIL](mailto:PI:EMAIL)), Department of Computer Science, University of California, Davis, CA.
**Premkumar Devanbu** ([PI:EMAIL](mailto:PI:EMAIL)), Department of Computer Science, University of California, Davis, CA.
**Vladimir Filkov** ([PI:EMAIL](mailto:PI:EMAIL)), Department of Computer Science, University of California, Davis, CA.

### 脚注
* a. Wikipedia的文章《类型转换》提供了C语言中意外行为的更多示例。
* b. 这篇Apple开发者文章描述了“id”的用法。
* c. 一些示例可以在这里和这里找到。
* d. 卡方值为243.6，自由度为96，p值为8.394e–15。
* e. MPI不需要锁定共享资源。

---
via: 
作者：[Baishakhi Ray](http://delivery.acm.org/10.1145/3130000/3126905/mailto:PI:EMAIL), [Daryl Posnett](http://delivery.acm.org/10.1145/3130000/3126905/mailto:PI:EMAIL), [Premkumar Devanbu](http://delivery.acm.org/10.1145/3130000/3126905/mailto:PI:EMAIL), [Vladimir Filkov](http://delivery.acm.org/10.1145/3130000/3126905/mailto:PI:EMAIL)  
译者：[qhwdw](https://github.com/qhwdw) 校对：[wxy](https://github.com/wxy)  
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出