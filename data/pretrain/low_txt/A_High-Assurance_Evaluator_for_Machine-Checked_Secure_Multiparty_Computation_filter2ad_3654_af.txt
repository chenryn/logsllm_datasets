### Numerical Data

The following is a list of numerical values, which appear to be unrelated and may require context for proper interpretation:

- 0.3971
- 0.8945
- 8.0503
- 1.8390
- 2.3567
- 35.3512
- 0.1005
- 1.2966
- 6.4831
- 0.5655
- 3.7594
- 33.8347
- 2.6609
- 9.8756
- 148.1338
- 0.1229
- 5.7105
- 28.5523
- 10.5070
- 0.3565
- 73.5487
- 43.3470
- 3.7476
- 650.2054
- 193.5127
- 38.7025
- 0.1876
- 1015.8850
- 112.8761
- 1.3595
- 4393.1295
- 292.8753
- 7.4067
- 0.0151
- 0.0441
- 0.1226
- 0.0201
- 0.0628
- 0.1774
- 0.0246
- 0.0509
- 0.2498
- 0.0375
- 0.1511
- 0.4938
- 0.1191
- 1.2306
- 0.6760
- 6.1809
- 2.9788
- 27.9059
- 0.1678
- 4.6022
- 1.0586
- 24.8867
- 4.6013
- 110.5301
- 0.2838
- 19.8966
- 0.7889
- 52.0222
- 7.1490
- 478.2466
- 0.5368
- 134.2940
- 725.8251
- 3.1142
- 3202.2946
- 213.4863
- 14.1664
- 0.2461
- 0.6868
- 1.8604
- 0.9204
- 2.7652
- 7.3687
- 3.9793
- 7.4317
- 31.8831
- 26.8588
- 80.6472
- 0.0238
- 0.0751
- 0.1986
- 0.0336
- 0.1176
- 0.3068
- 0.0568
- 0.1127
- 0.4766
- 0.1074
- 0.3460
- 0.9444
- 0.1976
- 0.9878
- 0.6281
- 5.6529
- 1.7806
- 26.7091
- 0.7210
- 3.6051
- 2.4582
- 22.1240
- 6.9015
- 103.5219
- 3.0515
- 15.2577
- 6.1451
- 43.0156
- 29.3357
- 440.0359
- 20.3217
- 101.6083
- 625.8767
- 69.5419
- 2934.7924
- 195.6528

### Comparison with Other Optimized MPC Implementations

A comparison with other (unverified) optimized implementations of MPC protocols, such as EMP or SCALE-MAMBA, would be interesting but is outside the scope of this paper. We emphasize that we do not claim to have the fastest implementation of a (proactive) secure MPC evaluator, nor is that our goal. Our primary objective is to demonstrate the feasibility of performing computer-aided verification of such complex MPC protocols for active adversaries and to automatically extract verified executable implementations. It would be valuable to explore how verified implementations perform in real software engineering projects, how the performance penalty induced by the verification process affects the overall system performance, and how much execution time developers are willing to sacrifice for a more reliable system. Our performance comparison with Charm shows that the code obtained using our extraction approach is at least comparable to some manually implemented software, which is promising evidence that the verification overhead induced by our approach may not be as prohibitive as initially thought. The performance penalty of our solution is not intrinsic to the verification/extraction methodology. Some of the cited implementations rely on cryptographic optimizations, faster protocols, or underlying libraries (such as faster polynomial libraries) or circuit optimization techniques. We point out that our overall verification approach can accommodate these cryptographic advances, with some implications on security and correctness proofs. Exploring these issues is a promising avenue for future work.

### Related Work

Previous attempts at computer-aided verification have paved the way for our work by demonstrating that verification of multiparty protocols is possible in EasyCrypt, even if only for smaller numbers of parties and/or weaker adversaries. We not only wanted to demonstrate that verification tools like EasyCrypt have reached a state of maturity sufficient to formalize complex cryptographic protocols, but also to lay the foundations that can be later used or extended to verify other cryptographic protocols in other proof environments, such as an UC proof of the BGW protocol.

The most relevant related work in formal verification and high-assurance implementations of secure computation protocols is summarized in Table 1. Staughton and Varia's work [68] focuses on proving the adaptive, information-theoretic, honest-but-curious security of a function-specific three-party cryptographic protocol that counts the number of elements in a database in the non-programmable random oracle model [15]. Similar to our work, they also rely on EasyCrypt to check the security proofs. However, their work does not deal with generic secure computation protocols or more than three parties.

Haagh et al. [47] verify a simple yet didactic MPC protocol due to Maurer [58]. The authors use non-interference techniques, proven to be equivalent to certain classes of cryptographic security, to prove the existence of a simulator. This approach is useful for reasoning at a higher level, particularly in understanding whether a simulator exists for a given protocol and functionality. They also present a formalization of Maurer’s protocol that can be generalized and applied to other MPC protocols. There are two main differences between our work and that of Haagh et al.: i) there is no synthesis of a high-assurance (or certified) software to evaluate the MPC protocol; and ii) our work deals with explicit simulator definitions, achieving a full end-to-end EasyCrypt formalization. The verified version of Maurer’s protocol in [47] is designed for general adversary structures and incurs exponential overhead in the threshold case, limiting it to a small number of parties.

The closest work to ours is that of Almeida et al. [4], which develops a verified software stack for secure function evaluation by two parties in the semi-honest model. Their stack cannot handle more than two parties or active adversaries. The stack consists of a certified compiler from C to Boolean circuits and a high-assurance garbled circuit evaluator. The compiler proves that the output circuit is equivalent to the input C code. The Boolean circuit is then executed by a verified garbled circuit evaluator, synthesized from a formally verified EasyCrypt implementation of Yao’s protocol. While this work has limitations in the number of parties and security model, it still represents a significant step in the development of verified implementations of cryptographic software.

In addition to the above, there have been impressive advances in research developing practical secure computation frameworks and software, either for two parties (typically based on garbled circuits) [69, 57], or for multiparty using algebraic MPC approaches on top of secret sharing [70, 16, 23], or function-specific protocols based on (fully) homomorphic encryption, or mixed versions [48, 31]. Such frameworks are not directly comparable to our work because they do not claim to produce mechanically formally verified protocol implementations or executables. A very interesting future research direction is to perform computer-aided formal verification of the optimized protocols in these frameworks and attempt to mechanically synthesize efficient implementations. We hope that such mechanically synthesized implementations will have comparable performance to manually optimized ones.

### Conclusions and Future Work

Secure and privacy-preserving protocols are advanced cryptographic constructions that will likely play a crucial role in the future of our networked world and the Internet. Computer-aided verification and automated software synthesis of such complicated protocols (e.g., with proactive security guarantees against active adversaries) is achievable with EasyCrypt, as demonstrated by our work. As a side contribution, we performed the first computer-aided verification and automated synthesis of a variant of the (fundamental) BGW secure multiparty computation (MPC) protocol for static active adversaries. We also developed a tool-chain to verifiably extract executable implementations from EasyCrypt specifications of such protocols.

Future research directions include:
1. Extending our work to provide stronger security guarantees and handle more settings, e.g., adaptive active adversaries as opposed to static ones for BGW, dealing with dynamic groups in the standard and proactive settings, and operating over asynchronous networks.
2. Performing computer-aided verification and synthesis of other (practical) MPC protocols such as SPDZ and its variations, which form the basis for the efficient SCALE-MAMBA 17 MPC framework, or classic ones such as GMW [45] to deal with dishonest majorities.
3. Performing full verification and synthesis of UC-secure MPC protocols and primitives to enable arbitrary compositions of them and their executables.
4. Extending our protocol executables with verified libraries providing lower-level cryptographic algorithms and primitives similar to EverCrypt 18.
5. Developing formal specifications and computer-aided verifications of the underlying broadcast synchronous (or even asynchronous) communication.

**References**

1. Masayuki Abe and Serge Fehr. Adaptively secure feldman vss and applications to universally-composable threshold cryptography. In Matt Franklin, editor, Advances in Cryptology – CRYPTO 2004, pages 317–334, Berlin, Heidelberg, 2004. Springer Berlin Heidelberg.
2. Joseph A. Akinyele, Christina Garman, Ian Miers, Matthew W. Pagano, Michael Rushanan, Matthew Green, and Aviel D. Rubin. Charm: a framework for rapidly prototyping cryptosystems. Journal of Cryptographic Engineering, 3(2):111–128, Jun 2013.
3. José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, and François Dupressoir. Verifiable side-channel security of cryptographic implementations: constant-time mee-cbc. In 23rd International Conference on Fast Software Encryption (FSE), pages 163–184, March 2016.
4. José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, François Dupressoir, Benjamin Grégoire, Vincent Laporte, and Vitor Pereira. A fast and verified software stack for secure function evaluation. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, pages 1989–2006. ACM, 2017.
5. José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, Hugo Pacheco, Vitor Pereira, and Bernardo Portela. Enforcing ideal-world leakage bounds in real-world secret sharing mpc frameworks. In 2018 IEEE 31st Computer Security Foundations Symposium (CSF), pages 132–146. IEEE, 2018.
6. José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, Hugo Pacheco, Vitor Pereira, and Bernardo Portela. Enforcing ideal-world leakage bounds in real-world secret sharing mpc frameworks. Cryptology ePrint Archive, Report 2018/404, 2018. https://eprint.iacr.org/2018/404.
7. Gilad Asharov and Yehuda Lindell. A full proof of the bgw protocol for perfectly-secure multiparty computation. Cryptology ePrint Archive, Report 2011/136, 2011. https://eprint.iacr.org/2011/136.
8. Michael Backes, Aniket Kate, and Arpita Patra. Computational verifiable secret sharing revisited. In Dong Hoon Lee and Xiaoyun Wang, editors, Advances in Cryptology – ASIACRYPT 2011, pages 590–609, Berlin, Heidelberg, 2011. Springer Berlin Heidelberg.
9. Michael Backes, Matteo Maffei, and Esfandiar Mohammadi. Computationally sound abstraction and verification of secure multi-party computations. In FSTTCS, 2010.
10. Cécile Baritel-Ruet, François Dupressoir, Pierre-Alain Fouque, and Benjamin Grégoire. Formal security proof of cmac and its variants. In 2018 IEEE 31st Computer Security Foundations Symposium (CSF), pages 91–104. IEEE, 2018.
11. Joshua Baron, Karim Eldefrawy, Joshua Lampkins, and Rafail Ostrovsky. How to withstand mobile virus attacks, revisited. In PODC, pages 293–302. ACM, 2014.
12. Joshua Baron, Karim Eldefrawy, Joshua Lampkins, and Rafail Ostrovsky. Communication-optimal proactive secret sharing for dynamic groups. In Tal Malkin, Vladimir Kolesnikov, Allison Bishop Lewko, and Michalis Polychronakis, editors, Applied Cryptography and Network Security, pages 23–41, Cham, 2015. Springer International Publishing.
13. Joshua Baron, Karim Eldefrawy, Joshua Lampkins, and Rafail Ostrovsky. Communication-optimal proactive secret sharing for dynamic groups. In ACNS, volume 9092 of LNCS, pages 23–41. Springer, 2015.
14. Gilles Barthe, Cédric Fournet, Benjamin Grégoire, Pierre-Yves Strub, Nikhil Swamy, and Santiago Zanella-Béguelin. Probabilistic relational verification for cryptographic implementations. In POPL, 2014. To appear.
15. Mihir Bellare and Phillip Rogaway. Random oracles are practical: A paradigm for designing efficient protocols. In Proceedings of the 1st ACM Conference on Computer and Communications Security, CCS '93, pages 62–73, New York, NY, USA, 1993. ACM.
16. Assaf Ben-David, Noam Nisan, and Benny Pinkas. Fairplaymp: a system for secure multi-party computation. In Peng Ning, Paul F. Syverson, and Somesh Jha, editors, Proceedings of the 2008 ACM Conference on Computer and Communications Security, CCS 2008, Alexandria, Virginia, USA, October 27-31, 2008, pages 257–266. ACM, 2008.
17. Michael Ben-Or, Shafi Goldwasser, and Avi Wigderson. Completeness theorems for non-cryptographic fault-tolerant distributed computation. In Proceedings of the 20th Annual Symposium on Theory of Computing, pages 1–10. ACM, 1988.
18. Michael Ben-Or, Shafi Goldwasser, and Avi Wigderson. Completeness theorems for non-cryptographic fault-tolerant distributed computation (extended abstract). In STOC, pages 1–10. ACM, 1988.
19. Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cédric Fournet, Markulf Kohlweiss, Jianyang Pan, Jonathan Protzenko, Aseem Rastogi, Nikhil Swamy, Santiago Zanella-Béguelin, and Jean Karim Zinzindohoué. Implementing and proving the tls 1.3 record layer. Cryptology ePrint Archive, Report 2016/1178, 2016. http://eprint.iacr.org/2016/1178.
20. Karthikeyan Bhargavan, Cédric Fournet, Markulf Kohlweiss, Alfredo Pironti, and Pierre-Yves Strub. Implementing TLS with verified cryptographic security. In IEEE S&P, 2013.
21. G. R. Blakley. Safeguarding cryptographic keys. Proc. of AFIPS National Computer Conference, 48:313–317, 1979.
22. Dan Bogdanov, Peeter Laud, Sven Laur, and Pille Pullonen. From input private to universally composable secure multi-party computation primitives. In Proceedings of the 27th Computer Security Foundations Symposium, pages 184–198. IEEE, 2014.
23. Dan Bogdanov, Sven Laur, and Jan Willemson. Sharemind: A framework for fast privacy-preserving computations. In ESORICS, volume 5283 of Lecture Notes in Computer Science, pages 192–206. Springer, 2008.
24. Sally Browning and Philip Weaver. Designing Tunable, Verifiable Cryptographic Hardware Using Cryptol, pages