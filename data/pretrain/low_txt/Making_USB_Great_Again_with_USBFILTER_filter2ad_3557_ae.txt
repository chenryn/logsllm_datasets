### Improved Text

However, these filters are applied after the host and operating system have enumerated the device and loaded any necessary device drivers. USBFILTER operates at the USB packet layer, preventing unauthorized access to interfaces, regardless of whether they have been approved elsewhere. Since our system operates between the device drivers and the USB host controller, and traces packets back to their source or destination application, USBFILTER can uniquely filter access to any USB interface.

While USBFILTER works directly within the host operating system, other USB security solutions leverage virtualization. For instance, GoodUSB [41] uses QEMU-KVM as a honeypot to analyze malicious USB devices, and Cinch [3] separates the trusted USB host controller and untrusted USB devices into two QEMU-KVMs, with a gateway applying policies on USB packets. By eliminating the need for additional components in standard operation, we believe that USBFILTER is better suited for adoption within operating system kernels.

USBFILTER protects the host machine from malicious USB devices, but there are also solutions for protecting devices from malicious hosts. USB fingerprinting [6] establishes the host machine's identity using USB devices, while Kells [8] protects USB storage devices by attesting the host machine's integrity. Wang and Stavrou [47] suggest that a "USB firewall" might protect against exploitation attacks, but they do not discuss the complexities of designing or implementing such a mechanism.

### Conclusion

USB attacks often rely on hosts automatically authorizing any physically-attached device. Attackers can discreetly connect unknown and unauthorized interfaces, causing device drivers to be automatically loaded and allowing malicious devices access to the host. In this paper, we prevent unauthorized devices from accessing a host with USBFILTER, the first packet-level access control system for USB. By tracing each packet back to its associated process, our system can successfully block unauthorized interfaces and restrict access to devices by process. With a default deny policy for new devices, administrators can restrict the connection of unknown devices using granular identifiers such as serial numbers. Our experiments test USBFILTER using a range of I/O benchmarks and find that it introduces minimal overhead. The result is a host that is unresponsive to attacks that may try to discreetly introduce unknown functionality via USB, while maintaining high performance.

### Acknowledgements

This work is supported in part by the US National Science Foundation under grant numbers CNS-1540217, CNS-1540218, and CNS-1464088.

### References

[1] TURNIPSCHOOL - NSA playset. http://www.nsaplayset.org/turnipschool.
[2] J. P. Anderson. Computer Security Technology Planning Study. Technical Report ESD-TR-73-51, Air Force Electronic Systems Division, 1972.
[3] S. Angel, R. S. Wahby, M. Howald, J. B. Leners, M. Spilo, Z. Sun, A. J. Blumberg, and M. Walfish. Defending against malicious peripherals. arXiv preprint arXiv:1506.01449, 2015.
[4] J. Bang, B. Yoo, and S. Lee. Secure USB bypassing tool. Digital Investigation, 7:S114–S120, 2010.
[5] Basemark, Inc. Basemark Browsermark. http://web.basemark.com/, 2015.
[6] A. Bates, R. Leonard, H. Pruse, K. R. B. Butler, and D. Lowd. Leveraging USB to Establish Host Identity Using Commodity Devices. In Proceedings of the 2014 Network and Distributed System Security Symposium (NDSS '14), February 2014.
[7] M. Brocker and S. Checkoway. iseeyou: Disabling the MacBook webcam indicator LED. In 23rd USENIX Security Symposium (USENIX Security 14), pages 337–352, 2014.
[8] K. R. B. Butler, S. E. McLaughlin, and P. D. McDaniel. Kells: A protection framework for portable data. In Proceedings of the 26th Annual Computer Security Applications Conference, pages 231–240. ACM, 2010.
[9] A. Caudill and B. Wilson. Phison 2251-03 (2303) Custom Firmware & Existing Firmware Patches (BadUSB). GitHub, 26, September 2014.
[10] Compaq, Hewlett-Packard, Intel, Microsoft, NEC, and Phillips. Universal Serial Bus Specification, Revision 2.0, April 2000.
[11] D. Diaz et al. The GNU Prolog web site. http://gprolog.org/.
[12] S. A. Diwan, S. Perumal, and A. J. Fatah. Complete security package for USB thumb drive. Computer Engineering and Intelligent Systems, 5(8):30–37, 2014.
[13] W. Enck, P. McDaniel, and T. Jaeger. PinUP: Pinning user files to known applications. In Computer Security Applications Conference, 2008. ACSAC 2008. Annual, pages 55–64. IEEE Xplore, December 2008.
[14] J. Erdfelt and D. Drake. Libusb homepage. Online, http://www.libusb.org.
[15] N. Falliere, L. O. Murchu, and E. Chien. W32. Stuxnet Dossier. 2011.
[16] USB Implementers Forum. Media Agnostic Universal Serial Bus Specification, Release 1.0a, July 2015.
[17] D. Genkin, A. Shamir, and E. Tromer. RSA key extraction via Low-Bandwidth acoustic cryptanalysis. In Advances in Cryptology – CRYPTO 2014, Lecture Notes in Computer Science, pages 444–461. Springer Berlin Heidelberg, August 17, 2014.
[39] The Information Assurance Mission at NSA. Defense against Malware on Removable Media. https://www.nsa.gov/ia/_files/factsheets/mitigation_monday_3.pdf, 2007.
[40] The Netfilter Core Team. The Netfilter Project: Packet Mangling for Linux 2.4. http://www.netfilter.org/, 1999.
[41] D. J. Tian, A. Bates, and K. Butler. Defending against malicious USB firmware with GoodUSB. In Proceedings of the 31st Annual Computer Security Applications Conference (ACSAC 2015), pages 261–270, New York, NY, USA, 2015. ACM.
[42] A. Tirumala, F. Qin, J. Dugan, J. Ferguson, and K. Gibbs. Iperf: The TCP/UDP bandwidth measurement tool. http://dast.nlanr.net/Projects, 2005.
[43] M. Tischer, Z. Durumeric, S. Foster, S. Duan, A. Mori, E. Bursztein, and M. Bailey. Users Really Do Plug in USB Drives They Find. In Proceedings of the 37th IEEE Symposium on Security and Privacy (S&P '16), San Jose, California, USA, May 2016.
[44] USB Implementers Forum. USB-IF statement regarding USB security. http://www.usb.org/press/USB-IF_Statement_on_USB_Security_FINAL.pdf.
[45] A. Vahldiek-Oberwagner, E. Elnikety, A. Mehta, D. Garg, P. Druschel, R. Rodrigues, J. Gehrke, and A. Post. Guardat: Enforcing data policies at the storage layer. In Proceedings of the Tenth European Conference on Computer Systems, page 13. ACM, 2015.
[46] J. Walter. "Flame Attacks": Briefing and Indicators of Compromise. McAfee Labs Report, May 2012.
[47] Z. Wang and A. Stavrou. Exploiting Smartphone USB Connectivity for Fun and Profit. In Proceedings of the 26th Annual Computer Security Applications Conference (ACSAC '10), 2010.
[48] B. Yang, D. Feng, Y. Qin, Y. Zhang, and W. Wang. TMSUI: A Trust Management Scheme of USB Storage Devices for Industrial Control Systems. Cryptology ePrint Archive, Report 2015/022, 2015. http://eprint.iacr.org/.

### Appendix

```c
// lbsw - A LUM kernel module used to block SCSI write commands within USB packets
#define LUM_NAME "block_scsi_write"
#define LUM_SCSI_CMD_IDX 0

static struct usbfilter_lum lbsw;
static int lum_registered;

// Define the filter function
// Return 1 if this is the target packet, otherwise 0
int lbsw_filter_urb(struct urb *urb) {
    char opcode;

    // Must be an OUT packet
    if (usb_pipein(urb->pipe))
        return 0;

    // Ensure the packet is large enough
    if (urb->transfer_buffer_length < sizeof(char))
        return 0;

    // Get the SCSI command opcode
    opcode = ((char *)urb->transfer_buffer)[LUM_SCSI_CMD_IDX];

    // Currently handle WRITE_10 for Kingston
    switch (opcode) {
        case WRITE_10:
            return 1;
        default:
            return 0;
    }
}

static int __init lbsw_init(void) {
    pr_info("lbsw: Entering: %s\n", __func__);
    snprintf(lbsw.name, USBFILTER_LUM_NAME_LEN, "%s", LUM_NAME);
    lbsw.lum_filter_urb = lbsw_filter_urb;

    // Register this LUM
    if (usbfilter_register_lum(&lbsw)) {
        pr_err("lbsw: registering lum failed\n");
        return -1;
    }

    lum_registered = 1;
    return 0;
}

static void __exit lbsw_exit(void) {
    pr_info("exiting lbsw module\n");
    if (lum_registered)
        usbfilter_deregister_lum(&lbsw);
}

module_init(lbsw_init);
module_exit(lbsw_exit);

MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("lbsw module");
MODULE_AUTHOR("dtrump");
```

**Figure 9:** An example Linux USBFILTER Module that blocks writes to USB removable storage.