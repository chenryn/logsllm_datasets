### RAZZER: A Fuzz Testing Tool for Detecting Race Bugs

**Assumptions and Limitations of RAZZER**

RAZZER is based on the assumption that data races across different kernel modules, such as a file system and a terminal device driver, are rare. However, if such cross-module races do occur, RAZZER's RacePair candidate (RacePaircand) mechanism would not include these race pairs. To fully address this issue, RAZZER needs to avoid partition analysis and instead employ more precise static analysis techniques to aggressively identify must-not-race pairs. For example, RAZZER can leverage synchronization primitives, as demonstrated in previous research [14, 41].

**Applicability to Other Systems**

We believe it would not be challenging to apply RAZZER to other modern operating systems, such as Windows, macOS, and FreeBSD, provided their source code is available. The only part of RAZZER that relies on Linux-specific domain knowledge is its system call invocation model. All other design aspects are platform-agnostic, as the core mechanisms are performed either offline (i.e., through static analysis) or transparently (i.e., via a tailored hypervisor).

For userland programs, additional mutation strategies after identifying a race may not be necessary. Unlike the Linux kernel, which occasionally allows races to improve performance, a race in most userland programs is considered a bug.

### Conclusion

We introduced RAZZER, a fuzz testing tool specifically designed to detect race bugs. It uses static analysis to identify potential data race points, guiding the fuzzer to discover races. Additionally, RAZZER modifies the underlying hypervisor to trigger races deterministically. Our evaluation of RAZZER demonstrates its strong capability to detect races, having identified 30 new races in the Linux kernel. A comparative study with state-of-the-art tools, such as Syzkaller and SKI, highlights RAZZER's superior efficiency in detecting race bugs in the kernel.

### Acknowledgments

We would like to thank the anonymous reviewers for their insightful comments, which significantly improved the final version of this paper. We also extend our gratitude to the Linux kernel developers for their helpful feedback and responses. This research was supported in part by the ERC through the NRF of Korea (NRF-2018R1A5A1059921) and the Samsung Research Funding & Incubation Center (SRFC-IT1701-05).

### References

[1] Capstone, 2018. https://www.capstone-engine.org.
[2] Kernel Address Sanitizer, 2018. https://github.com/google/kasan/wiki.
[3] Kcov, 2018. http://simonkagstrom.github.io/kcov/index.html.
[4] Linux Kernel Mailing List Archive, 2018. https://lkml.org.
[5] QEMU, 2018. https://www.qemu.org.
[6] L. O. Andersen. Program Analysis and Specialization for the C Programming Language. PhD thesis, University of Copenhagen, 1994.
[7] Z. Anderson, D. Gay, R. Ennals, and E. Brewer. SHARC: Checking Data Sharing Strategies for Multithreaded C. In Proceedings of the 2008 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Tucson, Arizona, June 2008.
[8] M. Böhme, V.-T. Pham, and A. Roychoudhury. Coverage-based Greybox Fuzzing as Markov Chain. IEEE Transactions on Software Engineering, 2017.
[9] M. D. Bond, K. E. Coons, and K. S. McKinley. PACER: Proportional Detection of Data Races. In Proceedings of the 2010 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Toronto, Canada, June 2010.
[10] S. Burckhardt, P. Kothari, M. Musuvathi, and S. Nagarakatte. A Randomized Scheduler with Probabilistic Guarantees of Finding Bugs. In Proceedings of the 15th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), New York, NY, Mar. 2010.
[11] Y. Cai, J. Zhang, L. Cao, and J. Liu. A Deployable Sampling Strategy for Data Race Detection. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering. ACM, 2016.
[12] S. K. Cha, M. Woo, and D. Brumley. Program-Adaptive Mutational Fuzzing. In Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May 2015.
[13] J. Corina, A. Machiry, C. Salls, Y. Shoshitaishvili, S. Hao, C. Kruegel, and G. Vigna. DIFUZE: Interface-Aware Fuzzing for Kernel Drivers. In Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS), Dallas, TX, Oct.–Nov. 2017.
[14] D. Engler and K. Ashcraft. RACERX: Effective, Static Detection of Race Conditions and Deadlocks. In Proceedings of the 19th ACM Symposium on Operating Systems Principles (SOSP), Bolton Landing, NY, Oct. 2003.
[15] J. Erickson, M. Musuvathi, S. Burckhardt, and K. Olynyk. Effective Data-Race Detection for the Kernel. In Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation (OSDI), Vancouver, Canada, Oct. 2010.
[16] P. Fonseca, R. Rodrigues, and B. B. Brandenburg. SKI: Exposing Kernel Concurrency Bugs through Systematic Schedule Exploration. In Proceedings of the 11th USENIX Symposium on Operating Systems Design and Implementation (OSDI), Broomfield, Colorado, Oct. 2014.
[17] D. Gens, S. Schmitt, L. Davi, and A.-R. Sadeghi. K-MINER: Uncovering Memory Corruption in Linux. In Proceedings of the 2018 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2018.
[18] I. Haller, A. Slowinska, M. Neugschwandtner, and H. Bos. Dowsing for Overflows: A Guided Fuzzer to Find Buffer Boundary Violations. In Proceedings of the 22nd USENIX Security Symposium (Security), Washington, DC, Aug. 2013.
[19] H. Han and S. K. Cha. IMF: Inferred Model-Based Fuzzer. In Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS), Dallas, TX, Oct.–Nov. 2017.
[20] G. J. Holzmann. The Model Checker SPIN. IEEE Transactions on Software Engineering, 23(5), 1997.
[21] B. Kasikci, C. Zamfir, and G. Candea. RACE-MOB: Crowdsourced Data Race Detection. In Proceedings of the 24th ACM Symposium on Operating Systems Principles (SOSP), Farmington, PA, Nov. 2013.
[22] B. Kasikci, W. Cui, X. Ge, and B. Niu. Lazy Diagnosis of In-Production Concurrency Bugs. In Proceedings of the 26th ACM Symposium on Operating Systems Principles (SOSP), Shanghai, China, Oct. 2017.
[23] S. Y. Kim, S. Lee, I. Yun, W. Xu, B. Lee, Y. Yun, and T. Kim. CAB-FUZZ: Practical Concolic Testing Techniques for COTS Operating Systems. In Proceedings of the 2017 USENIX Annual Technical Conference (ATC), Santa Clara, CA, July 2017.
[24] M. Labs. KernelFuzzer, 2016. https://github.com/mwrlabs/KernelFuzzer.
[25] D. Marino, M. Musuvathi, and S. Narayanasamy. LiteRACE: Effective Sampling for Lightweight Data-Race Detection. In Proceedings of the 2009 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Dublin, Ireland, June 2009.
[26] MITRE. CVE-2016-8655, 2016. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-8655.
[27] MITRE. CVE-2017-17712, 2017. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-17712.
[28] MITRE. CVE-2017-2636, 2017. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-2636.
[29] I. Molnar. Runtime Locking Correctness Validator, 2018. https://www.kernel.org/doc/Documentation/locking/lockdep-design.txt.
[30] M. Musuvathi and S. Qadeer. Iterative Context Bounding for Systematic Testing of Multithreaded Programs. In Proceedings of the 2007 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), San Diego, CA, June 2007.
[31] N. Nethercote and J. Seward. Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation. In Proceedings of the 2007 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), San Diego, CA, June 2007.
[32] R. O'Callahan and J.-D. Choi. Hybrid Dynamic Data Race Detection. In ACM SIGPLAN Notices, volume 38. ACM, 2003.
[33] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and H. Bos. VUZZER: Application-Aware Evolutionary Fuzzing. In Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb.–Mar. 2017.
[34] A. Rebert, S. K. Cha, T. Avgerinos, J. M. Foote, D. Warren, G. Grieco, and D. Brumley. Optimizing Seed Selection for Fuzzing. In Proceedings of the 23rd USENIX Security Symposium (Security), San Diego, CA, Aug. 2014.
[35] K. Sen. Race-Directed Random Testing of Concurrent Programs. In Proceedings of the 2008 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Tucson, Arizona, June 2008.
[36] K. Serebryany and T. Iskhodzhanov. ThreadSanitizer: Data Race Detection in Practice. In Proceedings of the Workshop on Binary Instrumentation and Applications, pages 62–71. ACM, 2009.
[37] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov. AddressSanitizer: A Fast Address Sanity Checker. In USENIX Annual Technical Conference, pages 309–318, 2012.
[38] E. Stepanov and K. Serebryany. MemorySanitizer: Fast Detector of Uninitialized Memory Use in C++. In Proceedings of the 13th Annual IEEE/ACM International Symposium on Code Generation and Optimization. IEEE Computer Society, 2015.
[39] Y. Sui and J. Xue. SVF: Interprocedural Static Value-Flow Analysis in LLVM. In Proceedings of the 25th International Conference on Compiler Construction. ACM, 2016.
[40] K. Veeraraghavan, P. M. Chen, J. Flinn, and S. Narayanasamy. Detecting and Surviving Data Races Using Complementary Schedules. In Proceedings of the 23rd ACM Symposium on Operating Systems Principles (SOSP), Cascais, Portugal, Oct. 2011.
[41] J. W. Voung, R. Jhala, and S. Lerner. RELAY: Static Race Detection on Millions of Lines of Code. In Proceedings of the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering. ACM, 2007.
[42] D. Vyukov. SYZKALLER, 2015. https://github.com/google/syzkaller.
[43] V. M. Weaver and D. Jones. perf Fuzzer: Targeted Fuzzing of the perf_event_open() System Call. Technical Report UMAINEVMW-TR-PERF-FUZZER, University of Maine, 2015.
[44] M. Woo, S. K. Cha, S. Gottlieb, and D. Brumley. Scheduling Black-Box Mutational Fuzzing. In Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS), Berlin, Germany, Oct. 2013.
[45] W. You, P. Zong, K. Chen, X. Wang, X. Liao, P. Bian, and B. Liang. SEMFUZZ: Semantics-Based Automatic Generation of Proof-of-Concept Exploits. In Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS), Dallas, TX, Oct.–Nov. 2017.
[46] M. Zalewski. American Fuzzy Lop, 2014. http://lcamtuf.coredump.cx/afl.
[47] T. Zhang, D. Lee, and C. Jung. TXRACE: Efficient Data Race Detection Using Commodity Hardware Transactional Memory. In Proceedings of the 21st ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Atlanta, GA, Apr. 2016.
[48] T. Zhang, C. Jung, and D. Lee. PRO-RACE: Practical Data Race Detection for Production Use. In Proceedings of the 22nd ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Xi’an, China, Apr. 2017.

### Appendix

**Syscall Index 8 (sys_ioctl)**

- **Breakpoint (BP-0)** at `ffffffff817f8351`
  - Write to `ffff8801e704c020`

- **Thread 0 (thr0)**
  - `int fd = open("...")` # syscall index 0
  - `ioctl(fd, TCLFLSH)` # syscall index 8

- **Thread 1 (thr1)**
  - `write(fd, "...")` # syscall index 12
  - `ioctl(fd, TCXONC)`
  - `close(fd)`

- **User Program Dump**
  - [*] RacePair-0: `drivers/tty/n_hdlc.c:440`
  - [*] RacePair-1: `drivers/tty/n_hdlc.c:216`
  - [*] Confirmed as the true race.

- **Crash Report from the Kernel**
  - BUG: KASAN: use-after-free in `n_hdlc_buf_get+0x41/0x90` ...
  - Call Trace:
    - `dump_stack+0xb3/0x110`
    - `n_hdlc_buf_get+0x41/0x90`
    - `n_hdlc_tty_close+0x1c8/0x2d0`

**Syscall Index 12 (sys_write)**

- **Breakpoint (BP-1)** at `ffffffff817f95b9`
  - Read from `ffff8801e704c020`

- **Syscall Index 3 (sys_setsockopt)**

- **Breakpoint (BP-0)** at `ffffffff834701bb`
  - Write to `ffff8800b0ca9120`

- **Syscall Index 7 (sys_setsockopt)**

- **Breakpoint (BP-1)** at `ffffffff8346d480`
  - Read from `ffff8800b0ca9120`

- **Thread 0 (thr0)**
  - `sys_setsockopt(PACKET_AUXDATA)` # syscall index 3

- **Thread 1 (thr1)**
  - `sys_setsockopt(PACKET_RX_RING)` # syscall index 7

- **User Program Dump**
  - [*] RacePair-0: `net/packet/af_packet.c:3773`
  - [*] RacePair-1: `net/packet/af_packet.c:4303`
  - [*] Confirmed as the true race.

- **Crash Report from the Kernel**
  - refcount_t: decrement hit 0; leaking memory.
  - WARNING: CPU: 0 PID: 12248 at `lib/refcount.c:228`
  - Call Trace:
    - `dump_stack+0x155/0x1f6 lib/dump_stack.c:53`
    - `__sock_put include/net/sock.h:629 [inline]`
    - `__unregister_prot_hook+0x128/0x190 net/packet/af_packet.c:369`

---

This optimized version of the text aims to enhance clarity, coherence, and professionalism.