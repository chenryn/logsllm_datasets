### Identifiers and Authentication in Mobile Applications

Identifiers are often sent to an application's backend, even when they are not directly used for authentication. This practice introduces a significant amount of noise in the analysis, as it can complicate the identification of genuine authentication mechanisms. This transmission of identifiers may be intended to gather metrics about the app or to support advertising efforts.

Future research could explore whether the authentication issues identified in this paper also affect applications on other mobile operating systems.

### Related Work

#### 9.1 Authentication-Related Vulnerabilities in Android

**Uninstallation Residue:**
Zhang et al. [41] investigated the issue of uninstallation residue, where an app's data and references are not fully removed upon uninstallation, potentially allowing attackers to escalate privileges and access sensitive information. While our detection system triggers the removal of app-private data during uninstallation, the vulnerabilities we address differ. Our system focuses on detecting authentication vulnerabilities that involve both device identifiers and files stored in public locations.

**Exploitation and Mitigation of Authentication Schemes:**
The paper "Mayhem in the Push Clouds" [26] examines the security of push messaging platforms, which are commonly used by apps to communicate with their backends. The study found that authentication tokens for these services are often handled insecurely, particularly when using Android Intents. Our work, however, focuses on the creation and storage of these tokens using device-public information.

**OAuth Misuse:**
Chen et al. [7] explored the use of OAuth-like mechanisms for authentication, finding that many apps (89 out of 149) implemented OAuth incorrectly. Wang et al. [39] further examined the misuse of OAuth in SDKs from companies like Facebook and Microsoft. A related vulnerability involves improperly implemented OAuth services that implicitly trust identity provider responses without verification [40]. In contrast to web platforms, mobile apps can have these responses tampered with, allowing attackers to authenticate as the victim without their credentials.

**Public Storage Usage:**
Liu et al. [27] studied how apps unsafely use public storage to store sensitive information, such as contact lists. Our focus, however, is on how public storage is used to store information that, combined with device identifiers, is used for authentication with remote backends. Similarly, Bai et al. [2] studied how backup tools leak information in publicly accessible files in external storage, but their work required root or shell privileges, which are not typically available under our threat model.

**Automatic Vulnerability Detection:**
Zuo et al. [42] developed AutoForge, a system to automatically detect authentication vulnerabilities involving user-private information, such as password brute-forcing and Facebook access-token hijacking. Our work complements theirs by focusing on a broader class of authentication schemes that do not rely on supposedly-secret data.

**SMS-Based One-Time Passwords:**
Mulliner et al. [29] examined the security of SMS-based one-time passwords, including issues of wireless interception and smartphone Trojans. While their work was motivated by the banking industry, the same issues apply to many areas requiring phone number verification. Schrittwieser et al. [34] manually analyzed messaging apps, identifying various security vulnerabilities. Recent research has highlighted the inherent weaknesses of SMS-based authentication, such as the potential for intercepting SMS messages via SS7 network vulnerabilities [38] and state-sponsored attacks [37]. Security guidelines now advise against using SMS for two-factor authentication [31]. The vulnerabilities we found in popular messaging apps were due to the use of public-accessible files and device identifiers, not SMS content.

#### 9.2 Android Dynamic Analysis

**Dynamic Analysis Frameworks:**
Rastogi et al. [33] proposed AppsPlayground, a dynamic analysis framework aimed at maximizing code coverage. Other similar frameworks include Brahmastra [3] and DynoDroid [28]. Our vulnerability detection system uses similar techniques to interact with apps, but our goal is to trigger authentication mechanisms deterministically rather than maximize code coverage.

**Input Event Recording and Playback:**
Tools like RERAN [13], MOSAIC [24], MobiPlay [32], and VALERA [25] have been proposed to record and replay input events on Android. Integrating these tools into our dynamic analysis system could reduce non-deterministic behaviors, but current tools do not fully address network traffic discrepancies, which are a major source of non-determinism in our experiments. VALERA can handle network traffic but cannot replay user interactions in apps with customized rendering, which are common among the vulnerable apps we detected.

### Conclusion

In this paper, we explored real-world vulnerabilities in apps that authenticate users using device-public information. We developed an "identity-transfer" attack and a dynamic analysis system to detect and exploit insecure authentication mechanisms. Analyzing 1,000 popular apps from the Google Play market, we found 41 vulnerable to our generic identity-transfer attack, including two major messaging apps with hundreds of millions of installations. We also proposed and implemented solutions requiring minimal modifications to the Android operating system and no changes to existing apps.

### Acknowledgments

We thank our shepherd, Elias Athanasopoulos, for his help and comments. This work was supported by NSF under Award No. CNS-1408632, Googleâ€™s "Security, Privacy, and Anti-Abuse Award," and DARPA under agreement number FA8750-15-2-0084. The views and conclusions expressed are those of the authors and do not necessarily reflect the official policies or endorsements of the NSF, Google, or DARPA.

### References

[References listed here, formatted as per the original document.]

---

This version of the text is more structured, clear, and professional, with improved coherence and readability.