### Simulation Results and Analysis

The simulation results, obtained for various values of \( l \) in a system comprising 125 processes, indicate a certain dependency between \( l \) and the number of gossip rounds required for successful dissemination of an event. This finding slightly contradicts our initial analysis, which presupposed uniform and independent views. A more precise analysis would need to consider the exact composition of each process's view at each round, leading to a complex Markov Chain with impractical size. Given the strong correlation between the simulation and our analysis, assuming independent and uniform views appears reasonable.

### Measurements

We present concrete measurements to evaluate the degree of reliability achieved by our algorithm and to confirm the simulation results. 

**Test Environment:**
- Two LANs with 60 and 65 SUN Ultra 10 workstations (Solaris 2.6, 256 MB RAM, 9 GB hard disk).
- Communication via Fast Ethernet (100 Mbit/s).
- 125 processes, each publishing 40 events per gossip round.
- \( F \) fixed to 3.

**Impact of View Size:**
- Figure 6 shows the impact of \( l \) on the reliability of the system, measured as the probability that any given process delivers any given notification (1 - \( \theta \), see Section 2).
- The reliability slightly decreases with a smaller \( l \). This is intuitive, as simulations show increased latency with smaller \( l \), leading to a higher probability that messages are purged from buffers before all processes are informed.

### Discussion

This section discusses our lpbcast algorithm in the context of "perfectly" uniform views and compares it with the well-known pbcast algorithm [4], particularly when combined with our membership approach.

#### Towards "Perfect" Views

Simulations with artificially generated independent and uniform views show no significant dependency between delivery latency and view size. In practice, lpbcast views are not entirely uniform and independent.

**Dependency:**
- The slight dependency between latency and \( l \) suggests that, despite random truncation, there remains a correlation between individual views over time and space.
- To mitigate this, we initially reduced the frequency of membership information gossiping, but this increased latency. Conversely, increasing the frequency of membership gossiping improved performance, though this is difficult to apply as an optimization due to the need for high throughput.

**Weighted Views:**
- Ideally, each process should be known by exactly \( l \) other processes, but this is challenging without agreement or counting.
- We propose adding weights to view entries to measure how well a process is known. When truncating views, entries with high weights (indicating higher awareness) are removed, and low-weight entries are preferred for subs.

#### Comparison with pbcast

**Differences:**
- pbcast limits the number of hops and repetitions for a given message.
- Our lpbcast merges the two phases of pbcast (event dissemination and digest exchange) into one.

**Membership Layer:**
- Our membership approach can be encapsulated as a layer, enabling deployment of various gossip-based algorithms, including pbcast.
- Theoretically, the view size does not impact infection probability, so throughput and delivery latency remain unaffected.

**Evaluation:**
- Simulations of pbcast with our membership approach (Figure 7(a)) show that lpbcast outperforms pbcast due to unlimited hops and repetitions.
- Reliability measurements (Figure 7(b)) are similar to those of lpbcast (Figure 6). However, direct comparison is limited by different parameters. For similar results, pbcast requires a higher fanout (F = 5 vs. F = 3 in lpbcast).

In practice, at high system loads, lpbcast may experience faster performance drops due to large numbers of notifications in gossip messages, while pbcast's first phase ensures high throughput.

### Acknowledgements

We are grateful to Ken Birman and Robert van Renesse for their insights into probabilistic reliable broadcast.

### References

[1] M. Aguilera, R. Strom, D. Sturman, M. Astley, and T. Chandra. Matching events in a content-based subscription system. In Proceedings of the 18th ACM Symposium on Principles of Distributed Computing (PODC '99), Nov. 1998.

[2] Y. Amir, D. Dolev, S. Kramer, and D. Mahlki. Membership algorithms for multicast communication groups. In 6th Intl. Workshop on Distributed Algorithms proceedings (WDAG), pages 292-312, Nov. 1992.

[3] N. Bailey. The Mathematical Theory of Infectious Diseases and its Applications (second edition). Hafner Press, 1975.

[4] K. Birman, M. Hayden, O. Ozkasap, Z. Xiao, M. Budiu, and Y. Minsky. Bimodal multicast. ACM Transactions on Computer Systems, 17(2):41-88, May 1999.

[5] A. Carzaniga. Architectures for an Event Notification Service Scalable to Wide-area Networks. PhD thesis, Politecnico di Milano, Dec. 1998.

[6] S. Deering. Internet multicasting. In ARPA HPCC94 Symposium. Advanced Research Projects Agency Computing Systems Technology Office, Mar. 1994.

[7] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson, S. Shenker, H. Sturgis, D. Swinehart, and D. Terry. Epidemic algorithms for replicated database maintenance. In Proceedings of the 6th Annual ACM Symposium on Principles of Distributed Computing (PODC'87), pages 1-12, Aug. 1987.

[8] P. Eugster, R. Guerraoui, and J. Sventek. Distributed Asynchronous Collections: Abstractions for publish-subscribe interaction. In Proceedings of the 14th European Conference on Object-Oriented Programming (ECOOP 2000), pages 252-276, June 2000.

[9] R. Golding. Weak-consistency group communication and membership. PhD thesis, University of California at Santa Cruz, Dec. 1992.

[10] V. Hadzilacos and S. Toueg. Distributed Systems, chapter 5: Fault-Tolerant Broadcast; and Related Problems, pages 97-145. Addison-Wesley, 2nd edition, 1993.

[11] M. Hiltunen and R. Schlichting. Properties of membership. In Proceedings of the 2nd IEEE Symposium on Autonomous Decentralized Systems, pages 200-207, Apr. 1995.

[12] A.-M. Kermarrec, L. Massoulie, and A. Ganesh. Reliable probabilistic communication in large-scale information dissemination systems. Technical Report MSR-TR-2000-105, Microsoft Research Cambridge, Oct. 2000.

[13] M.-J. Lin and K. Marzullo. Directional gossip: Gossip in a wide area network. Technical Report CS3999-0622, University of California, San Diego, Computer Science and Engineering, June 1999.

[14] L. Opyrchal, M. Astley, J. Auerbach, G. Banavar, R. Strom, and D. Sturman. Exploiting IP Multicast in content-based publish-subscribe systems. In Proceedings of the IFIP/ACM International Conference on Distributed Systems Platforms (Middleware 2000), pages 185-207, Apr. 2000.

[15] J. Orlando, L. Rodrigues, and R. Oliveira. Semantically reliable multicast protocols. In Proceedings of the 19th IEEE Symposium on Reliable Distributed Systems (SRDS 2000), Oct. 2000.

[16] S. Paul, K. Sabnani, J. Lin, and S. Bhattacharyya. Reliable multicast transport protocol (RMTP). IEEE Journal on Selected Areas in Communications, 15(3):407-421, Apr. 1997.

[17] R. Piantoni and C. Stancescu. Implementing the Swiss Exchange trading system. In Proceedings of the Seventh Annual International Symposium on Fault-Tolerant Computing (FTCS '97), pages 309-313, June 1997.

[18] Q. Sun and D. Sturman. A gossip-based reliable multicast for large-scale high-throughput applications. In Proceedings of the IEEE International Conference on Dependable System and Networks (DSN2000), New York, USA, July 2000.

[19] TIBCO. TIB/Rendezvous White Paper. http://www.rv.tibco.com/, 1999.

[20] R. van Renesse. Scalable and secure resource location. In Proceedings of the IEEE Hawaii International Conference on System Sciences, 2000.

[21] Wego.com Inc., What Is Gnutella? http://gnutella.wego.com/, 2000.

[22] Groove Networks, Introducing Groove. http://www.groovenetworks.com/, 2000.