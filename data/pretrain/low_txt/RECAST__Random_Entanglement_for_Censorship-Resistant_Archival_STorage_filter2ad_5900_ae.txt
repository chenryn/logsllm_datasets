# RECAST: A Novel Anti-Censorship Archival System

## Introduction
RECAST is a novel anti-censorship archival system that leverages random data entanglement to protect against both failures and malicious attacks. It uses erasure codes to generate redundant blocks, combining content from multiple documents, old and new, to ensure long-term integrity and resilience.

## System Overview
### Data Entanglement
RECAST employs a hybrid strategy for data entanglement, designed to offer fast short-term and strong long-term protection for all documents in the archive. The entanglement process makes it increasingly difficult to delete or tamper with a single document without causing collateral damage to a large number of other documents.

### Recursive Repair
The system allows efficient recursive repair, meaning that even if some nodes fail, the system can recover the lost data by reconstructing it from the remaining nodes. This ensures high availability and reliability.

### Evaluation Metrics
- **Bandwidth Costs**: The amount of data transferred to repair missing blocks.
- **File Availability**: The percentage of documents that can be served as metadata after node failures.
- **Resilience to Attacks**: Resistance to both passive (e.g., node crashes) and active (e.g., targeted censorship) attacks.

## Experimental Results

### Bandwidth Costs for Repair
**Figure 14** shows the bandwidth costs to repair a 64kB document originally stored in an instance of RECAST with a n-(1, 10, 2, 3) configuration. The figure demonstrates that:
- RS reconstruction of 1 or 2 blocks requires reading 11 blocks of the same document.
- Repairing beyond 2 blocks involves reading from more than one document, increasing the number of blocks received for the repair.
- For 3 erasures, one failed block is repaired by decoding a document using it as a pointer, then relying on RS capabilities to recover the last two blocks.

### File Availability
**Figure 15** evaluates file availability as a function of device failures and storage space. The simulation includes:
- 188 nodes storing 196,664 documents.
- Documents are compressed using the LZ algorithm before archiving.
- Two configurations for STEP with different storage overheads (200% and 50%).

The results show that even in a catastrophic event where about 13% of disks fail simultaneously, the data loss is less than 0.25% with a light-storage configuration.

### Temporary Replication
**Figure 16** evaluates the impact of temporary replication on file availability. The simulation includes:
- 50-node RECAST configured with a (1, 5, 2, 3)-archive.
- Standard deviation σ = 100.
- Storing 50,000 documents.
- Simulating both without replication and by replicating the youngest 300 documents 10 times each.

Temporary replication becomes useful when more than 15% of disks fail, ensuring high availability in non-catastrophic scenarios.

### Active Attacks
**Figure 17** shows the number of corrupted documents required to erase a target in a nu-(1, 5, 2, 3)-archive with 104 documents. The simulation explores an increasing number of partial solutions at each step of the leaping attack. The results indicate that:
- Increasing the number of partial solutions from 1 to 500 leads to a small improvement in the number of documents to be destroyed.
- For the tail of the archive, exploring 10 solutions at each step of the greedy algorithm is sufficient, while for the rest of the archive, a buffer size of 100 ensures stability.

## Conclusion and Open Challenges
RECAST is a robust archival system designed to support long-term storage of documents. It leverages erasure codes and data entanglement to protect against both failures and malicious attacks. Future work will focus on extending the prototype to provide better protection and integration of metadata within the entangled archive.

## Acknowledgment
We thank our shepherd Alysson Bessani and the anonymous reviewers for their constructive comments. This research was funded by the European Union’s Horizon 2020 program under grant agreement No. 653884.

## References
[1] M. Waldman, L. F. Cranor, "Publius: A robust, tamper-evident, censorship-resistant, web publishing system," in 9th USENIX Security Symposium, 2000, pp. 59–72.
[2] R. Dingledine, M. J. Freedman, D. Molnar, "The Free Haven Project: Distributed Anonymous Storage Service," in Designing Privacy Enhancing Technologies, Springer, 2001, pp. 67–95.
[3] A. Stubblefield, D. S. Wallach, "Dagster: Censorship-Resistant Publishing Without Replication," Rice University, Tech. Rep. TR01-380, 2002.
[4] M. Waldman, D. Mazières, "Tangler: A Censorship-Resistant Publishing System Based on Document Entanglements," in 8th ACM Conference on Computer and Communications Security (CCS), 2001, pp. 126–135.
[5] H. Mercier, M. Augier, A. K. Lenstra, "STeP-archival: Storage integrity and anti-tampering using data entanglement," IEEE Transactions on Information Theory, 2018, doi:10.1109/TIT.2018.2825981.
[6] Dropbox, "Security and Legal Requests," https://www.dropbox.com/help/security/legal-requests.
[7] R. Anderson, "The Eternity Service," in 1st International Conference on the Theory and Applications of Cryptography (PRAGOCRYPT), vol. 96, 1996, pp. 242–252.
[8] I. Clarke, O. Sandberg, B. Wiley, T. W. Hong, "Freenet: A Distributed Anonymous Information Storage and Retrieval System," in Designing Privacy Enhancing Technologies, Springer, 2001, pp. 46–66.
[9] R. Kotla, L. Alvisi, M. Dahlin, "SafeStore: A Durable and Practical Storage System," in USENIX Annual Technical Conference, 2007, pp. 129–142.
[10] L. L. You, K. T. Pollack, D. D. Long, "Deep Store: An Archival Storage System Architecture," in 21st International Conference On Data Engineering (ICDE), IEEE, 2005, pp. 804–815.
[11] I. Clarke, O. Sandberg, M. Toseland, V. Verendel, "Private Communication Through a Network of Trusted Connections: The Dark Freenet," Network, 2010.
[12] Freenet, https://freenetproject.org.
[13] S. Rhea, P. Eaton, D. Geels, H. Weatherspoon, B. Zhao, J. Kubiatowicz, "Pond: The OceanStore Prototype," in 2nd USENIX Conference on File and Storage Technologies (FAST), USENIX Association, 2003, pp. 1–14.
[14] OceanStore, http://www.oceanstore.net.
[15] M. W. Storer, K. M. Greenan, E. L. Miller, K. Voruganti, "POTSHARDS: Secure Long-Term Storage Without Encryption," in USENIX Annual Technical Conference, 2008, pp. 1–14.
[16] Publius, http://www.cs.nyu.edu/~waldman/publius.
[17] RECAST Source Code, https://github.com/safecloud-project/recast.
[18] A. Shamir, "How to share a secret," Communications of the ACM, vol. 22, pp. 612–613, 1979.
[19] R. Geambasu, A. A. Levy, T. Kohno, A. Krishnamurthy, H. M. Levy, "Comet: An active distributed key-value store," in OSDI, 2010, pp. 323–336.
[20] S. Hand, T. Roscoe, "Mnemosyne: Peer-to-Peer Steganographic Storage," in 1st International Workshop on Peer-to-Peer Systems (IPTPS), Springer, 2002, pp. 130–140.
[21] M. O. Rabin, "Efficient dispersal of information for security, load balancing, and fault tolerance," Journal of the ACM (JACM), vol. 36, pp. 335–348, 1989.
[22] F. J. MacWilliams, N. J. A. Sloane, The Theory of Error-Correcting Codes, Elsevier, 1977.
[23] L. L. You, K. T. Pollack, D. D. Long, K. Gopinath, "PRESIDIO: A Framework for Efficient Archival Data Storage," ACM Transactions on Storage (TOS), vol. 7, pp. 6:1–6:60, 2011.
[24] P. Maniatis, M. Roussopoulos, T. J. Giuli, D. S. Rosenthal, M. Baker, "The LOCKSS peer-to-peer digital preservation system," ACM Transactions on Computer Systems (TOCS), vol. 23, pp. 2–50, 2005.
[25] J. C. Frank, S. M. Frank, L. A. Thurlow, T. M. Kroeger, E. L. Miller, D. D. Long, "Percival: A searchable secret-split datastore," in 31st Symposium on Mass Storage Systems and Technologies (MSST), IEEE, 2015, pp. 1–12.
[26] I. S. Reed, G. Solomon, "Polynomial codes over certain finite fields," Journal of the Society for Industrial and Applied Mathematics, vol. 8, pp. 300–304, 1960.
[27] Python, https://www.python.org/.
[28] PyECLib, https://pypi.python.org/pypi/PyECLib.
[29] GitHub - liberasurecode, https://github.com/openstack/liberasurecode.
[30] Intel ISA-L, https://github.com/01org/isa-l.
[31] Bottle, http://bottlepy.org/docs/dev/index.html.
[32] uWSGI, https://uwsgi-docs.readthedocs.io/en/latest/.
[33] Redis, https://redis.io.
[34] Minio, https://minio.io.
[35] Apache Zookeeper, https://zookeeper.apache.org.
[36] Docker, https://www.docker.com/.
[37] B. F. Cooper, A. Silberstein, E. Tam, R. Ramakrishnan, R. Sears, "Benchmarking cloud serving systems with YCSB," in Proceedings of the 1st ACM symposium on Cloud Computing, ACM, 2010, pp. 143–154.
[38] D. Bhagwat, K. Pollack, D. D. Long, T. Schwarz, E. L. Miller, J.-F. Pâris, "Providing high reliability in a minimum redundancy archival storage system," in 14th IEEE International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems (MASCOTS), IEEE, 2006, pp. 413–421.