**作者：深信服千里目安全实验室  
原文链接：**

## 一、漏洞信息

### 1. 漏洞简述
- **漏洞名称**：Microsoft Windows Win32k Local Privilege Escalation Vulnerability
- **漏洞编号**：CVE-2015-0057
- **漏洞类型**：Use-After-Free (UAF)
- **漏洞影响**：本地提权
- **CVSS 3.0**：N/A
- **CVSS 2.0**：7.2

### 2. 组件和漏洞概述
`win32k.sys` 是 Windows 的多用户管理驱动文件。在 Windows 内核模式驱动程序（`win32k.sys`）中存在一个特权提升漏洞，该漏洞是由于不当处理内存中的对象引起的。成功利用此漏洞的攻击者可以获得更高的权限，并读取任意数量的内核内存。攻击者可能会安装程序、查看、更改或删除数据，或者创建具有完全管理权限的新帐户。

### 3. 影响版本
- Windows Server 2003 Service Pack 2
- Windows Server 2008 Service Pack 2
- Windows Server 2008 R2 Service Pack 1
- Windows Vista Service Pack 2
- Windows Server 2012
- Windows Server 2012 R2
- Windows 7 Service Pack 1
- Windows 8
- Windows 8.1
- Windows RT
- Windows RT 8.1

### 4. 解决方案
[此处应提供解决方案或补丁链接]

## 二、漏洞复现

### 1. 环境搭建
- **操作系统**：Windows 7 SP1 x86, Windows 8.1 x64
- **`win32k.sys` 版本**：6.1.7601.17514, 6.3.9600.17393

### 2. 复现过程
1. 运行指定版本的操作系统。
2. 执行漏洞利用代码（EXP）。

## 三、漏洞分析

### 1. 基本信息
- **漏洞文件**：`win32k.sys`
- **漏洞函数**：`xxxEnableWndSBArrows`
- **漏洞对象**：`tagWND`

### 2. 背景知识
- **`tagSBINFO`（`tagWND + 0xB0`）**：大小为 `0x24`，是本次 UAF 的目标对象。
- **`tagPROPLIST`（`tagWND + 0xA8`）**
- **`tagPROP`**
- **`_LARGE_UNICODE_STRING`（`tagWND + 0xD8`）**：通过 `RtlInitLargeUnicodeString` 函数初始化缓冲区，`NtUserDefSetText` 可以设置 `tagWND` 的 `strName` 字段，从而实现桌面堆大小的任意分配。
- **`tagMENU`（`tagWND + 0xB8`, `tagWND + 0xC0`）**
- **`_HEAP_ENTRY`**：表示堆头，大小为 `0x10`。前 `8` 字节用于存储上一个堆块的数据，在这里通常长度为 `0x8`。

```plaintext
kd> dt _heap_entry -vr
nt!_HEAP_ENTRY
struct _HEAP_ENTRY, 22 elements, 0x10 bytes
   +0x000 PreviousBlockPrivateData : Ptr64 to Void
   +0x008 Size             : Uint2B
   +0x00a Flags            : UChar
   +0x00b SmallTagIndex    : UChar
   +0x00c PreviousSize     : Uint2B
   +0x00e SegmentOffset    : UChar
   +0x00e LFHFlags         : UChar
   +0x00f UnusedBytes      : UChar
   +0x008 CompactHeader    : Uint8B
   +0x000 Reserved         : Ptr64 to Void
   +0x008 FunctionIndex    : Uint2B
   +0x00a ContextValue     : Uint2B
   +0x008 InterceptorValue : Uint4B
   +0x00c UnusedBytesLength : Uint2B
   +0x00e EntryOffset      : UChar
   +0x00f ExtendedBlockSignature : UChar
   +0x000 ReservedForAlignment : Ptr64 to Void
   +0x008 Code1            : Uint4B
   +0x00c Code2            : Uint2B
   +0x00e Code3            : UChar
   +0x00f Code4            : UChar
   +0x008 AgregateCode     : Uint8B
```

### 3. 补丁对比
使用 Bindiff 对比补丁代码，主要是在补丁代码处将 `rbx` 和 `rsi + 0xb0` 的值进行了比较。反编译后的补丁对比显示，在第 43 行增加了一层判断，如果不满足条件，则会跳转到错误处理函数。

### 4. 漏洞分析

#### 漏洞利用流程
1. 通过堆喷将一段堆空间覆盖成大量 `tagWND + tagPROPLIST` 的结构，其中有一块是 `tagWND + tagSBINFO`。
2. 通过用户态回调（`xxxDrawScrollBar`）hook `_ClientLoadLibrary` 函数。释放我们自定义的回调回来的 `tagWND`，再次通过 `setPROP` 申请回来，此时原来的 `tagSBINFO`（`0x28 + 0x8`）的数据结构就变成了 `tagPROPLIST + tagPROP`（`0x18 + 0x10 + 0x8`）的结构。
3. 系统将这块空间（原 `tagSBINFO` 现 `tagPROPLIST + tagPROP`）进行写入操作，将 `cEntries` 从 `0x2` 改为 `0xe`，这样就可以覆盖 `(0xe - 0x2) * 0x10` 大小的缓冲区，实现了 UAF。通过原 `tagSBINFO` 的指针改变第一个字节，在 `tagPROPLIST` 中造成缓冲区溢出，可以多溢出 `0xc` 个 `tagPROP` 大小。
4. 在原 `tagSBINFO` 现 `tagPROPLIST + tagPROP` 的位置后面放入 `strNAME + tagMENU` 的结构，通过覆盖堆头，修改堆块大小标识符，将后面的 `tagMENU` 空间也覆盖入这个堆块上。释放这个堆块后，后面的 `tagMENU` 也被释放了，但堆块的句柄仍在手中。再次分配时，又造成了 UAF 漏洞。覆盖堆头的目的是为了 UAF，可以先用 `SetMenuItemInfoA` 函数修改 `rgItems` 字段，实现任意写，写的内容是 shellcode 的指针，实际上就是 `HalDispatchTable + 0x8` 的位置。之后覆盖整块空间再分配，通过 ROP 执行到 shellcode 的地址，完成提权。

数据结构如下图所示：

#### 静态分析
查看漏洞函数 `xxxEnableWndSBArrows`，可以看到一些变量如 `v3` 等的含义不明确。可以在 Windbg 中通过 `dt` 查看 `tagWND` 的结构体。

```plaintext
kd> dt win32k!tagWND
   +0x000 head             : _THRDESKHEAD
   +0x028 state            : Uint4B
   +0x028 bHasMeun         : Pos 0, 1 Bit
   +0x028 bHasVerticalScrollbar : Pos 1, 1 Bit
   +0x028 bHasHorizontalScrollbar : Pos 2, 1 Bit
   +0x028 bHasCaption      : Pos 3, 1 Bit
   +0x028 bSendSizeMoveMsgs : Pos 4, 1 Bit
   +0x028 bMsgBox          : Pos 5, 1 Bit
   +0x028 bActiveFrame     : Pos 6, 1 Bit
   +0x028 bHasSPB          : Pos 7, 1 Bit
   +0x028 bNoNCPaint       : Pos 8, 1 Bit
   +0x028 bSendEraseBackground : Pos 9, 1 Bit
   +0x028 bEraseBackground : Pos 10, 1 Bit
   +0x028 bSendNCPaint     : Pos 11, 1 Bit
   +0x028 bInternalPaint   : Pos 12, 1 Bit
   +0x028 bUpdateDirty     : Pos 13, 1 Bit
   +0x028 bHiddenPopup     : Pos 14, 1 Bit
   +0x028 bForceMenuDraw   : Pos 15, 1 Bit
   +0x028 bDialogWindow    : Pos 16, 1 Bit
   +0x028 bHasCreatestructName : Pos 17, 1 Bit
   +0x028 bServerSideWindowProc : Pos 18, 1 Bit
   +0x028 bAnsiWindowProc  : Pos 19, 1 Bit
   +0x028 bBeingActivated  : Pos 20, 1 Bit
   +0x028 bHasPalette      : Pos 21, 1 Bit
   +0x028 bPaintNotProcessed : Pos 22, 1 Bit
   +0x028 bSyncPaintPending : Pos 23, 1 Bit
   +0x028 bRecievedQuerySuspendMsg : Pos 24, 1 Bit
   +0x028 bRecievedSuspendMsg : Pos 25, 1 Bit
   +0x028 bToggleTopmost   : Pos 26, 1 Bit
   +0x028 bRedrawIfHung    : Pos 27, 1 Bit
   +0x028 bRedrawFrameIfHung : Pos 28, 1 Bit
   +0x028 bAnsiCreator     : Pos 29, 1 Bit
   +0x028 bMaximizesToMonitor : Pos 30, 1 Bit
   +0x028 bDestroyed       : Pos 31, 1 Bit
   +0x02c state2           : Uint4B
   +0x02c bWMPaintSent     : Pos 0, 1 Bit
   +0x02c bEndPaintInvalidate : Pos 1, 1 Bit
   +0x02c bStartPaint      : Pos 2, 1 Bit
   +0x02c bOldUI           : Pos 3, 1 Bit
   +0x02c bHasClientEdge   : Pos 4, 1 Bit
   +0x02c bBottomMost      : Pos 5, 1 Bit
   +0x02c bFullScreen      : Pos 6, 1 Bit
   +0x02c bInDestroy       : Pos 7, 1 Bit
   +0x02c bWin31Compat     : Pos 8, 1 Bit
   +0x02c bWin40Compat     : Pos 9, 1 Bit
   +0x02c bWin50Compat     : Pos 10, 1 Bit
   +0x02c bMaximizeMonitorRegion : Pos 11, 1 Bit
   +0x02c bCloseButtonDown : Pos 12, 1 Bit
   +0x02c bMaximizeButtonDown : Pos 13, 1 Bit
   +0x02c bMinimizeButtonDown : Pos 14, 1 Bit
   +0x02c bHelpButtonDown  : Pos 15, 1 Bit
   +0x02c bScrollBarLineUpBtnDown : Pos 16, 1 Bit
   +0x02c bScrollBarPageUpBtnDown : Pos 17, 1 Bit
   +0x02c bScrollBarPageDownBtnDown : Pos 18, 1 Bit
   +0x02c bScrollBarLineDownBtnDown : Pos 19, 1 Bit
```

希望以上优化后的文本能够更加清晰、连贯和专业。如果有任何进一步的需求，请告知。