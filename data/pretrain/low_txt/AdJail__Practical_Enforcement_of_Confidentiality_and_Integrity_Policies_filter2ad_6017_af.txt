### Arbitrary Ad Position

We successfully placed an ad on a real webpage, outside of its designated, write-accessible container element. This type of violation can be achieved by setting the ad's display position to coordinates that lie outside the bounds of its container. A policy that enforces overflow restrictions can effectively block such out-of-bounds display positioning violations. Additionally, position policies can be violated through a node splitting attack, which may only succeed in the absence of mechanisms providing hypertext markup isolation [41, 45]. Our content mirroring approach inherently provides the necessary isolation to prevent such attacks.

### Oversized Ad

We created an ad that exceeded the publisher’s expected size. The size violation was prevented by configuring a policy to limit the maximum height and width, and by disallowing overflow.

### 5.3 Rendering Overhead

To measure the ad rendering latencies introduced by our policy enforcement mechanism, we embedded each ad script into a typical blog page instrumented with benchmarking code. We prepared 12 instances of the blog page: for each of the six ad networks evaluated in §5.1, one version used the original ad, and the other used ADJAIL to enforce the policies listed in Table 3. As the blog page is rendered, the ad script executes, scans for contextual data, requests a relevant ad from the ad network based on this data, and finally renders the ad. This experiment reflects the typical delays an end-user would experience when browsing publisher pages that integrate ADJAIL.

The test pages were rendered in Firefox v3.6.3 on an AMD Phenom X4 940 (3.0 GHz) workstation with 7.5 GB RAM. To simulate a typical browsing environment, the browser cache was enabled during the experiment. Each test page included a link to our ADJAIL implementation source code (102 kB of JavaScript), which was cached by the web browser. The code, while not optimized for space, contains extensive debug information. The memory overhead required by ADJAIL was reasonably consistent across ad networks, averaging 5.52% or approximately 3.06 MB.

The results of this experiment are shown in Figure 7. First, we measured the time taken to render only the ad (Figure 7a). For AdBrite and Clicksor (inline text ads), this measurement consisted of the time between the user triggering an ad pop-up and the appearance of the pop-up. Although we do not separately report the latency incurred by forwarding events to the shadow page (ref. §4.3.3), this overhead is included in Figure 7. For this experiment, we stopped the benchmark after the ad's `onload` event was triggered, signaling the completion of the ad. Without sandboxing, ads rendered in 374 ms on average. With ADJAIL, ad rendering averaged 532 ms, introducing an additional latency of 158 ms.

To better understand the impact of ad rendering latency, we measured the time between when the page started loading and when the ad completed rendering (Figure 7b). This is an important benchmark for ads, as many ad networks use a content distribution network (CDN) to improve performance. For AdBrite and Clicksor, we measured the time until inline text links finished rendering, although no ads are visible until the user triggers a pop-up. Without sandboxing, ads appeared in 489 ms on average after the page began to load. With ADJAIL, an additional 163 ms delay was incurred on average.

Optimizing performance is an important area for future work. A straightforward way to improve performance will be to optimize our prototype implementation. More significant gains may be achieved by adapting our approach to support pre-computing policies and shadow pages. It may also be feasible to integrate caching of policies and shadow pages into web application templates and frameworks, allowing for better performance without increasing the effort required by publishers to deploy ADJAIL.

### 6. Conclusion

In this paper, we presented ADJAIL, a solution for confining third-party advertisements to prevent attacks on confidentiality and integrity. A key benefit of ADJAIL is its compatibility with existing web usage models, requiring no changes to ad networks or browsers used by end-users. Our approach offers publishers a promising near-term solution until web standards evolve to provide confinement solutions agreeable to all parties.

### Acknowledgements

We thank Rohini Krishnamurthi for her insightful discussions, which helped shape the principal ideas of this work. Our sincere thanks to our shepherd Lucas Ballard and the anonymous reviewers for their thorough and helpful feedback on drafts. This work was partially supported by National Science Foundation grants CNS-0716584, CNS-0551660, CNS-0845894, and CNS-0917229. The first author was additionally supported in part by a fellowship from the Armed Forces Communications and Electronics Association.

### References

[1] Adam Barth, Collin Jackson, and John C. Mitchell. Securing frame communication in browsers. In 17th USENIX Security Symposium, San Jose, CA, USA, July 2008.

[2] Click Quality Team. How fictitious clicks occur in third-party click fraud audit reports. Technical report, Google, Inc., August 2006.

[3] comScore. April 2009 U.S. ranking of top 25 ad networks. http://www.comscore.com/Press_Events/Press_Releases/2009/05/Top_25_US_Ad_Networks, 2009. Retrieved 19 Nov. 2009.

[4] Sean Conaty. Introducing the iSpan. http://nerdcereal.com/introducing-the-ispan/, January 2008. Retrieved 1 Jun. 2010.

[5] Marco Cova, Christopher Kruegel, and Giovanni Vigna. Detection and analysis of drive-by-download attacks and malicious JavaScript code. In 19th International World Wide Web Conference, Raleigh, NC, USA, April 2010.

[6] Douglas Crockford. ADsafe. http://www.adsafe.org/. Retrieved 1 Jun. 2010.

[7] Douglas Crockford. The application/json media type for JavaScript Object Notation (JSON). http://tools.ietf.org/html/rfc4627, July 2006. RFC 4627.

[8] Úlfar Erlingsson, V. Benjamin Livshits, and Yinglian Xie. End-to-end web application security. In 11th Workshop on Hot Topics in Operating Systems, San Diego, CA, USA, May 2007.

[9] Facebook Developers. Facebook JavaScript. http://wiki.developers.facebook.com/index.php/FBJS. Retrieved 8 Apr. 2010.

[10] Adrienne Felt, Pieter Hooimeijer, David Evans, and Westley Weimer. Talking to strangers without taking their candy: Isolating proxied content. In 1st International Workshop on Social Network Systems, Glasgow, Scotland, April 2008.

[11] Edward W. Felten and Michael A. Schneider. Timing attacks on web privacy. In 7th ACM Conference on Computer and Communications Security, Athens, Greece, November 2000.

[12] Matthew Finifter, Joel Weinberger, and Adam Barth. Preventing capability leaks in secure JavaScript subsets. In 17th Annual Network & Distributed System Security Symposium, San Diego, CA, USA, March 2010.

[13] Sean Ford, Marco Cova, Christopher Kruegel, and Giovanni Vigna. Analyzing and detecting malicious Flash advertisements. In 25th Annual Computer Security Applications Conference, Honolulu, HI, USA, December 2009.

[14] Google Caja. A source-to-source translator for securing JavaScript-based web content. http://code.google.com/p/google-caja/. Retrieved 1 Jun. 2010.

[15] Saikat Guha, Bin Cheng, Alexy Reznichenko, Hamed Haddadi, and Paul Francis. Privad: Rearchitecting online advertising for privacy. Technical Report MPI-SWS-2009-004, Max Planck Institute for Software Systems, Kaiserslautern-Saarbruecken, Germany, October 2009.

[16] Robert Hansen. XSS (cross site scripting) cheat sheet esp: for filter evasion. http://ha.ckers.org/xss.html, 2008. Retrieved 8 Apr. 2010.

[17] Robert Hansen and Jeremiah Grossman. Clickjacking. http://www.sectheory.com/clickjacking.htm, September 2008. Whitepaper.

[18] Interactive Advertising Bureau. Interactive audience measurement and advertising campaign reporting and audit guidelines. Global Version 6.0b, IAB, September 2004.

[19] Collin Jackson, Andrew Bortz, Dan Boneh, and John C. Mitchell. Protecting browser state from web privacy attacks. In 15th International World Wide Web Conference, Edinburgh, Scotland, May 2006.

[20] Collin Jackson and Helen J. Wang. Subspace: Secure cross-domain communication for Web mashups. In 16th International World Wide Web Conference, Banff, AB, Canada, May 2007.

[21] Trevor Jim, Nikhil Swamy, and Michael Hicks. Defeating script injection attacks with browser-enforced embedded policies. In 16th International World Wide Web Conference, Banff, AB, Canada, May 2007.

[39] Gustav Rydstedt, Elie Bursztein, Dan Boneh, and Collin Jackson. Busting frame busting: A study of clickjacking vulnerabilities on popular sites. In 4th Workshop in Web 2.0 Security and Privacy, Oakland, CA, USA, May 2010.

[22] Haruka Kikuchi, Dachuan Yu, Ajay Chander, Hiroshi Inamura, and Igor Serikov. JavaScript instrumentation in practice. In 6th Asian Symposium on Programming Languages and Systems, Bangalore, India, December 2008.

[23] Jeremy Kirk. Ad exploits Internet Explorer vulnerability to expose millions to adware. http://www.infoworld.com/print/23520, July 2006. Retrieved 23 Apr. 2010.

[24] Mary Landesman. ScanSafe: Weekend run of malvertisements. http://blog.scansafe.com/journal/2009/09/24/weekend-run-of-malvertisements.html, September 2009. Retrieved 23 Apr. 2010.

[25] Travis Leithead. Document Object Model prototypes, Part 1: Introduction. http://msdn.microsoft.com/en-us/library/dd282900%28VS.85%29.aspx, November 2008. Microsoft Corporation. Retrieved 22 May 2010.

[26] Elias Levy and Iván Arce. Interface illusions. IEEE Security and Privacy, 2:66–69, 2004.

[27] Zhenkai Liang, V. N. Venkatakrishnan, and R. Sekar. Isolated program execution: An application-transparent approach for executing untrusted programs. In 19th Annual Computer Security Applications Conference, Las Vegas, NV, USA, December 2003. IEEE Computer Society.

[28] V. Benjamin Livshits and Salvatore Guarnieri. Gatekeeper: Mostly static enforcement of security and reliability policies for JavaScript code. In 18th USENIX Security Symposium, Montreal, Canada, August 2009.

[29] Sergio Maffeis, John C. Mitchell, and Ankur Taly. Language-based isolation of untrusted JavaScript. In 22nd IEEE Computer Security Foundations Symposium, Port Jefferson, NY, USA, July 2009.

[30] Sergio Maffeis, John C. Mitchell, and Ankur Taly. Run-time enforcement of secure JavaScript subsets. In 3rd Workshop in Web 2.0 Security and Privacy, Oakland, CA, USA, May 2009.

[31] Dahlia Malkhi and Michael K. Reiter. Secure execution of Java applets using a remote playground. IEEE Transactions on Software Engineering, 26(12):1197–1209, December 2000.

[32] Gervase Markham. Content restrictions. http://www.gerv.net/security/content-restrictions/, March 2007.

[33] Leo A. Meyerovich and V. Benjamin Livshits. ConScript: Specifying and enforcing fine-grained security policies for JavaScript in the browser. In IEEE Symposium on Security and Privacy, Oakland, CA, USA, May 2010.

[34] Microsoft Live Labs. Web Sandbox. http://websandbox.livelabs.com. Retrieved 1 Jun. 2010.

[35] Phu H. Phung, David Sands, and Andrey Chudnov. Lightweight self-protecting JavaScript. In ACM Symposium on Information, Computer and Communications Security, Sydney, Australia, March 2009.

[36] Niels Provos, Panayiotis Mavrommatis, Moheeb Abu Rajab, and Fabian Monrose. All your iFRAMEs point to us. In 17th USENIX Security Symposium, San Jose, CA, USA, July 2008.

[37] C. Reis, J. Dunagan, Helen J. Wang, O. Dubrovsky, and S. Esmeir. BrowserShield: Vulnerability-driven filtering of dynamic HTML. In 7th Symposium on Operating Systems Design and Implementation, Seattle, WA, USA, November 2006.

[38] Matthew Rogers. Facebook’s response to uproar over ads. http://endofweb.co.uk/2009/07/facebook_ads_2/, July 2009. Retrieved 6 Apr. 2010.

[40] Jerome H. Saltzer and Michael D. Schroeder. The protection of information in computer systems. In 4th ACM Symposium on Operating Systems Principles, Yorktown Heights, NY, USA, October 1973.

[41] Prateek Saxena, Dawn Song, and Yacin Nadji. Document structure integrity: A robust basis for cross-site scripting defense. In 16th Annual Network & Distributed System Security Symposium, San Diego, CA, USA, February 2009.

[42] Barry Schnitt. Debunking rumors about advertising and photos. http://blog.facebook.com/blog.php?post=110636457130, November 2009. Retrieved 6 Apr. 2010.

[43] Sid Stamm, Brandon Sterne, and Gervase Markham. Reining in the Web with content security policy. In 19th International World Wide Web Conference, Raleigh, NC, USA, April 2010.

[44] Weiqing Sun, Zhenkai Liang, R. Sekar, and V. N. Venkatakrishnan. One-way isolation: An efficient approach for realizing safe execution environments. In 12th Annual Network and Distributed System Security Symposium, San Diego, CA, USA, February 2005.

[45] Mike Ter Louw, Prithvi Bisht, and V. N. Venkatakrishnan. Analysis of hypertext isolation techniques for cross-site scripting prevention. In 2nd Workshop in Web 2.0 Security and Privacy, Oakland, CA, USA, May 2008.

[46] Mike Ter Louw and V. N. Venkatakrishnan. Blueprint: Robust prevention of cross-site scripting attacks for existing browsers. In IEEE Symposium on Security and Privacy, Oakland, CA, USA, May 2009.

[47] Vincent Toubiana, Arvind Narayanan, Dan Boneh, Helen Nissenbaum, and Solon Barocas. Adnostic: Privacy-preserving targeted advertising. In 17th Annual Network & Distributed System Security Symposium, San Diego, CA, USA, March 2010.

[48] Ashlee Vance. Times Web ads show security breach. http://www.nytimes.com/2009/09/15/technology/internet/15adco.html, September 2009. NY Times. Retrieved 1 Jun. 2010.

[49] Yi-Min Wang, Doug Beck, Xuxian Jiang, and Roussi Roussev. Automated Web patrol with Strider HoneyMonkeys: Finding Web sites that exploit browser vulnerabilities. In 13th Annual Network and Distributed System Security Symposium, San Diego, CA, USA, February 2006.

[50] Wikipedia contributors. Same origin policy. http://en.wikipedia.org/w/index.php?title=Same_origin_policy&oldid=190222964, February 2008.

[51] World Wide Web Consortium. Document Object Model (DOM) Level 2 Events Specification. http://www.w3.org/TR/DOM-Level-2-Events, November 2000.

[52] Yankee Group. Yankee Group forecasts US online advertising market to reach $50 billion by 2011. http://www.yankeegroup.com/pressReleaseDetail.do?actionType=getDetailPressRelease&ID=1805, January 2008. Retrieved 6 Apr. 2010.

[53] Dachuan Yu, Ajay Chander, Nayeem Islam, and Igor Serikov. JavaScript instrumentation for browser security. In 34th Annual ACM SIGPLAN–SIGACT Symposium on Principles of Programming Languages, Nice, France, January 2007.

[54] Michal Zalewski. Browser security handbook. http://code.google.com/p/browsersec/wiki/Main, 2009. Retrieved 26 Jan. 2010.