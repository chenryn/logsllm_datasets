### 11% of Free Apps in Google Play (250K apps) are Already Generated by Online Services

#### B. Pitfalls of the “One Size Fits All” App Generation Strategy
Online services provide a simple means of creating apps without requiring any knowledge of programming or mobile operating systems. This is achieved by abstracting the implementation task to a drag-and-drop assembly of predefined modules and by limiting the degree of customization. Such a “One Size Fits All” strategy has led to a new paradigm in app generation, where an APK file with monolithic or module-dependent boilerplate code is distributed. This code is statically or dynamically configured with an app-specific configuration file.

While this approach provides a convenient way to generate and distribute applications for a large number of clients, it also introduces new security risks. From a security perspective, this creates new points of failure that, if not carefully managed, can compromise end-user security or even the security of the online service itself.

#### Security Concerns
The results in Section IV show that the majority of Online App Generators (OAGs) that base their business model on monolithic boilerplate apps fail to properly protect configuration files from tampering and eavesdropping. Only 2 out of 8 OAGs in Table 2 correctly use HTTPS to retrieve configuration files. Moreover, none of the services applied certificate pinning to prevent man-in-the-middle attacks. Similarly, only one service properly protected its statically included configuration file. However, none of the services checked the integrity of the configuration file during app launch. This opens the door to various attacks, such as reconfiguration attacks, ad revenue theft (through replacing API keys), and, in general, changing arbitrary app-specific data.

Boilerplate apps that use HTML/JS for layout (see category A2 in Table 2) are additionally vulnerable to code injection and fracking attacks (P6–P8 in Table 3). This is due to the web-to-app bridge these services use to access the Android API. Because of the boilerplate app pattern, these bridges often expose more functionality than necessary and are not adequately protected from misuse.

Following the principle of least privilege, Andromo and Appinventor (see category B) generate targeted boilerplate code based on the modules selected by the app developer. Since their code generation model follows traditional app development, they are not prone to OAG-specific security issues such as reconfiguration attacks. However, this approach requires additional effort in code generation, especially when ensuring that any combination of predefined modules is flawlessly composable. This is why Andromo, with only 19 available modules, is at the lower end in terms of available modules, while Appinventor, with community support, offers 59 modules.

#### C. Amplification of Security Issues
The increasing use of online services has shifted the responsibility of generating secure code from app developers to the generator service. Users have limited options to customize or change their applications beyond what the service provides. As a result, users must fully trust the service to generate non-vulnerable code and to not include hidden or non-obvious user tracking or data leakage. Notable examples include the paid service Como, which performs heavy user tracking despite emphasizing the importance of user privacy in its policy, and Mobincube, which silently tracks users via BLE beacons without explicitly stating this in its terms and conditions.

Our security evaluation in Section VI suggests that OAG-generated apps often do not adhere to security best practices and exhibit common vulnerabilities identified by prior research. Although these findings are consistent with coding practices of traditional developers, the amplification effect of online services puts millions of users and their private data at risk. Another key insight is that, unlike traditional apps, vulnerabilities in unused boilerplate code can still be exploited if a network attacker compromises the application configuration and reconfigures or activates app modules with known security issues or queries ContentProviders to retrieve internal data (see Section VI-A).

We conclude that in the current online service ecosystem, the level of security does not depend on whether it is a free or paid service but rather on the underlying app generation model. For the two module-dependent code generators, Andromo and Appinventor, we found the fewest security issues. Particularly for Appinventor, this is unsurprising, given that it is open-source and not driven by commercial interests. The boilerplate model is not inherently insecure, but from a security perspective, server communication and configuration protection require more careful design. This could include certificate pinning for dynamically retrieved configurations, obfuscation or encryption of static configurations, and integrity checks to prevent unauthorized tampering.

#### D. Missed Opportunity for Large-Scale Security Impact
A short-term mitigation is to inform online services about the discovered security issues to allow them to fix their code generation. We are currently in the process of responsible disclosure to enable the respective service providers to address these security flaws. However, this does not address the root cause of these issues and will not produce long-lasting effects. In our opinion, OAG services need thorough investigation from the research community to understand how AppGens are built. Lessons can be learned from other areas of research, such as tailored software stacks, which have shown that the attack surface can be significantly reduced through compile-time [30] and run-time configurations [42].

### VIII. Conclusion
In this paper, we present the first classification of commonly used online services for Android based on various characteristics and quantify the market penetration of these AppGens using a corpus of 2,291,898 free Android apps from Google Play. We discovered that at least 11.1% of these apps were created using online services. Based on a systematic analysis of the new boilerplate app generation model, we show that online services fall short in protecting against reconfiguration attacks and running a secure infrastructure. A subsequent security audit of the generated boilerplate code reveals that OAGs make the same security mistakes as traditional app developers. However, they carry the sole responsibility of generating secure and privacy-preserving code. Due to their amplification effect—a single error by an OAG potentially affects thousands of generated apps (250K apps in our dataset)—we conclude that online services currently have a negative impact on the overall app ecosystem's security. At the same time, these services are uniquely positioned to turn these negative aspects into positive ones by investing more effort into securing their application model and infrastructure, ultimately benefiting millions of users.

### Acknowledgments
We would like to thank the anonymous reviewers for their valuable feedback. This work was supported by the German Federal Ministry of Education and Research (BMBF) through funding for the Center for IT-Security, Privacy, and Accountability (CISPA) (FKZ: 16KIS0345, 16KIS0656), the projects SmartPriv (FKZ: 16KIS0377K) and CAMRICS (FKZ: 16KIS0656), and the CISPA-Stanford Center for Cybersecurity (FKZ: 13N1S0762).

### References
[1] "CVE-2016-2107: Padding-oracle attack against AES CBC," Jan. 2016.
[2] Y. Acar, M. Backes, S. Bugiel, S. Fahl, P. McDaniel, and M. Smith, "Sok: Lessons learned from Android security research for appified software platforms," in Proc. 37th IEEE Symposium on Security and Privacy (SP '16). IEEE, 2016.
[3] D. Adrian, K. Bhargavan, Z. Durumeric, P. Gaudry, M. Green, J. A. Halderman, N. Heninger, D. Springall, E. Thomé, L. Valenta, B. Vander-Sloot, E. Wustrow, S. Zanella-Béguelin, and P. Zimmermann, "Imperfect forward secrecy: How Diffie-Hellman fails in practice," in Proc. 22nd ACM Conference on Computer and Communication Security (CCS'15). ACM, 2015.
[4] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie, "Pscout: Analyzing the Android permission specification," in Proc. 19th ACM Conference on Computer and Communication Security (CCS'12). ACM, 2012.
[5] N. Aviram, S. Schinzel, J. Somorovsky, N. Heninger, M. Dankel, J. Steube, L. Valenta, D. Adrian, J. A. Halderman, V. Dukhovni, E. Käsper, S. Cohney, S. Engels, C. Paar, and Y. Shavitt, "DROWN: Breaking TLS using SSLv2," Mar. 2016, CVE-2016-0800.
[6] M. Backes, S. Bugiel, and E. Derr, "Reliable Third-Party Library Detection in Android and its Security Applications," in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS '16). ACM, 2016.
[7] M. Backes, S. Bugiel, E. Derr, S. Gerling, and C. Hammer, "R-Droid: Leveraging Android App Analysis with Static Slice Optimization," in Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security (ASIA CCS '16). ACM, 2016.
[8] M. Backes, S. Bugiel, E. Derr, P. McDaniel, D. Octeau, and S. Weisgerber, "On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis," in Proc. 25th USENIX Security Symposium (SEC'16). USENIX Association, 2016.
[9] M. Backes, S. Bugiel, and S. Gerling, "Scippa: System-centric IPC Provenance on Android," in Proc. 30th Annual Computer Security Applications Conference (ACSAC'14). ACM, 2014.
[10] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud, C. Fournet, M. Kohlweiss, A. Pironti, P. Y. Strub, and J. K. Zinzindohoue, "A Messy State of the Union: Taming the Composite State Machines of TLS," in Proc. 36th IEEE Symposium on Security and Privacy (SP'15). IEEE, 2015.
[11] T. Book, A. Pridgen, and D. S. Wallach, "Longitudinal Analysis of Android Ad Library Permissions," in MoST'13. IEEE, 2013.
[12] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner, "Analyzing Inter-Application Communication in Android," in Proceedings of the 9th International Conference on Mobile Systems, Applications, and Services. ACM, 2011, pp. 239–252.
[13] E. Chin and D. Wagner, "Bifocals: Analyzing WebView Vulnerabilities in Android Applications," in Proc. Information Security Applications. Springer-Verlag, 2014.
[14] T. Duong and J. Rizzo, "Here Come the ⊕ Ninjas," May 2011.
[15] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, "An Empirical Study of Cryptographic Misuse in Android Applications," in Proc. 20th ACM Conference on Computer and Communication Security (CCS'13). ACM, 2013.
[16] W. Enck, M. Ongtang, and P. McDaniel, "Understanding Android Security," in Proceedings of the IEEE International Conference on Security & Privacy, 2009, pp. 50–57.
[17] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner, B. Freisleben, and M. Smith, "Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security," in Proceedings of the 2012 ACM Conference on Computer and Communications Security, ser. CCS '12. New York, NY, USA: ACM, 2012, pp. 50–61.
[18] S. Fahl, M. Harbach, H. Perl, M. Koetter, and M. Smith, "Rethinking SSL Development in an Appified World," in Proc. 20th ACM Conference on Computer and Communication Security (CCS'13). ACM, 2013.
[19] A. Fisher, "How Companies Are Developing More Apps with Fewer Developers," http://fortune.com/2016/08/30/quickbase-coding-apps-developers, Aug. 2016, last visited: 11/29/2017.
[20] Gartner, "Gartner Says Citizen Developers Will Build at Least 25 Percent of New Business Applications by 2014," http://www.gartner.com/newsroom/id/1744514, Jul. 2011, last visited: 11/29/2017.
[21] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and V. Shmatikov, "The Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser Software," in Proc. 19th ACM Conference on Computer and Communication Security (CCS'12). ACM, 2012.
[22] M. Georgiev, S. Jana, and V. Shmatikov, "Breaking and Fixing Origin-Based Access Control in Hybrid Web/Mobile Application Frameworks," in 2014 Network and Distributed System Security (NDSS '14), San Diego, February 2014.
[23] Google, "Android Developers: Security Tips," https://developer.android.com/training/articles/security-tips.html, last visited: 11/29/2017.
[24] Google, "Android Developers Blog: Using Cryptography to Store Credentials Safely," http://android-developers.blogspot.de/2013/02/using-cryptography-to-store-credentials.html, 2013, last visited: 11/29/2017.
[25] M. Grace, Y. Zhou, Z. Wang, and X. Jiang, "Systematic Detection of Capability Leaks in Stock Android Smartphones," in Proc. 19th Annual Network and Distributed System Security Symposium (NDSS'12). The Internet Society, 2012.
[26] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang, "RiskRanker: Scalable and Accurate Zero-Day Android Malware Detection," in Proc. 10th International Conference on Mobile Systems, Applications, and Services (MobiSys'12). ACM, 2012.
[27] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi, "Unsafe Exposure Analysis of Mobile In-App Advertisements," in Proc. 5th ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec'12). ACM, 2012.
[28] D. Hinchcliffe, "The Advent of the Citizen Developer," http://www.zdnet.com/article/the-advent-of-the-citizen-developer/, Apr. 2016, last visited: 11/29/2017.
[29] X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri, "Code Injection Attacks on HTML5-Based Mobile Apps: Characterization, Detection, and Mitigation," in Proc. 21st ACM Conference on Computer and Communication Security (CCS'14). ACM, 2014.
[30] A. Kurmus, R. Tartler, D. Dorneanu, B. Heinloth, V. Rothberg, A. Ruprecht, W. Schröder-Preikschat, D. Lohmann, and R. Kapitza, "Attack Surface Metrics and Automated Compile-Time OS Kernel Tailoring," in Proc. 20th Annual Network and Distributed System Security Symposium (NDSS'13). The Internet Society, 2013.
[31] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang, "Chex: Statically Vetting Android Apps for Component Hijacking Vulnerabilities," in Proc. 19th ACM Conference on Computer and Communication Security (CCS'12). ACM, 2012.
[32] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin, "Attacks on WebView in the Android System," in Proc. 27th Annual Computer Security Applications Conference (ACSAC'11). ACM, 2011.
[33] B. Möller, T. Duong, and K. Kotowicz, "This POODLE Bites: Exploiting the SSL 3.0 Fallback (Security Advisory)," Sep. 2014, CVE-2014-3566.
[34] P. Mutchler, A. Doupé, J. Mitchell, C. Kruegel, and G. Vigna, "A Large-Scale Study of Mobile Web App Security," in Proc. 2015 Mobile Security Technologies Workshop (MoST'15). IEEE, 2015.
[35] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein, and Y. L. Traon, "Effective Inter-Component Communication Mapping in Android: An Essential Step Towards Holistic Security Analysis," in Proc. 22nd Usenix Security Symposium (SEC'13). USENIX Association, 2013.
[36] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna, "Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications," in Proc. 21st Annual Network and Distributed System Security Symposium (NDSS'14). The Internet Society, 2014.
[37] A. Porter Felt, E. Chin, S. Hanna, D. Song, and D. Wagner, "Android Permissions Demystified," in Proc. 18th ACM Conference on Computer and Communication Security (CCS'11). ACM, 2011.
[38] A. Porter Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wagner, "Android Permissions: User Attention, Comprehension, and Behavior," in Proc. 8th Symposium on Usable Privacy and Security (SOUPS '12). ACM, 2012.
[39] Seattle Cloud, "Login Page Type Tutorial," http://seattleclouds.com/login-page-type-tutorial, 2016, last visited: 11/29/2017.
[40] S. Son, G. Daehyeok, K. KAIST, and V. Shmatikov, "What Mobile Ads Know About Mobile Users," in Proc. 23rd Annual Network and Distributed System Security Symposium (NDSS'16), 2015.
[41] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and L. Khan, "SMV-Hunter: Large Scale, Automated Detection of SSL/TLS Man-in-the-Middle Vulnerabilities in Android Apps," in Proc. 21st Annual Network and Distributed System Security Symposium (NDSS'14). The Internet Society, 2014.
[42] K. Stengel, F. Schmaus, and R. Kapitza, "Esseos: Haskell-Based Tailored Services for the Cloud," in Proceedings of the 12th International Workshop on Adaptive and Reflective Middleware, ser. ARM '13. ACM, 2013.
[43] R. Stevens, C. Gibler, J. Crussell, J. Erickson, and H. Chen, "Investigating User Privacy in Android Ad Libraries," in Proc. 2012 Mobile Security Technologies Workshop (MoST'12). IEEE, 2012.
[44] R. Wang, L. Xing, X. Wang, and S. Chen, "Unauthorized Origin Crossing on Mobile Platforms: Threats and Mitigation," in Proc. 20th ACM Conference on Computer and Communication Security (CCS'13). ACM, 2013.
[45] Y. Zhou and X. Jiang, "Detecting Passive Content Leaks and Pollution in Android Applications," in Proc. 20th Annual Network and Distributed System Security Symposium (NDSS'13). The Internet Society, 2013.