### References

1. **Guillermo Suarez-Tangil, Juan E Tapiador, Pedro Peris-Lopez, and Jorge Blasco. 2014. Dendroid: A Text Mining Approach to Analyzing and Classifying Code Structures in Android Malware Families.** *Expert Systems with Applications* 41, 4 (2014), 1104–1117.

2. **Vaibhav Rastogi, Yan Chen, and Xuxian Jiang. 2013. Droidchameleon: Evaluating Android Anti-Malware Against Transformation Attacks.** In *Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer, and Communications Security*. ACM, 329–334.

3. **Pavel Laskov et al. 2014. Practical Evasion of a Learning-Based Classifier: A Case Study.** In *Security and Privacy (SP), 2014 IEEE Symposium on*. IEEE, 197–211.

4. **Médéric Hurier, Guillermo Suarez-Tangil, Santanu Kumar Dash, Tegawendé F Bissyandé, Yves Le Traon, Jacques Klein, and Lorenzo Cavallaro. 2017. Euphony: Harmonious Unification of Cacophonous Anti-Virus Vendor Labels for Android Malware.** In *Proceedings of the 14th International Conference on Mining Software Repositories*. IEEE Press, 425–435.

5. **Sevil Sen, Emre Aydogan, and Ahmet I Aysan. 2018. Coevolution of Mobile Malware and Anti-Malware.** *IEEE Transactions on Information Forensics and Security* 13, 10 (2018), 2563–2574.

6. **Fengguo Wei, Yuping Li, Sankardas Roy, Xinming Ou, and Wu Zhou. 2017. Deep Ground Truth Analysis of Current Android Malware.** In *International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA’17)*. Springer, Bonn, Germany, 232–276.

7. **Marcos Sebastián, Richard Rivera, Platon Kotzias, and Juan Caballero. 2016. AV-Class: A Tool for Massive Malware Labeling.** In *International Symposium on Research in Attacks, Intrusions, and Defenses*. Springer, 230–253.

8. **Sen Chen, Minhui Xue, Lingling Fan, Shuang Hao, Lihua Xu, Haojin Zhu, and Bo Li. 2018. Automated Poisoning Attacks and Defenses in Malware Detection Systems: An Adversarial Machine Learning Approach.** *Computers & Security* 73 (2018), 326–344.

9. **Brad Miller, Alex Kantchelian, Michael Carl Tschantz, Sadia Afroz, Rekha Bachwani, Riyaz Faizullabhoy, Ling Huang, Vaishaal Shankar, Tony Wu, George Yiu, et al. 2016. Reviewer Integration and Performance Measurement for Malware Detection.** In *International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment*. Springer, 122–141.

10. **Kaspersky Lab. 2018. Kaspersky Lab Threat Predictions for 2018.** Available at: https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/07164714/KSB_Predictions_2018_eng.pdf.

11. **Symantec. 2018. Executive Summary - 2018 Internet Security Threat Report.** Available at: https://www.symantec.com/content/dam/symantec/docs/reports/istr-23-executive-summary-en.pdf.

12. **Parvez Faruki, Ammar Bharmal, Vijay Laxmi, Vijay Ganmoor, Manoj Singh Gaur, Mauro Conti, and Muttukrishnan Rajarajan. 2015. Android Security: A Survey of Issues, Malware Penetration, and Defenses.** *IEEE Communications Surveys & Tutorials* 17, 2 (2015), 998–1022.

13. **Li Li, Alexandre Bartel, Tegawendé F Bissyandé, Jacques Klein, and Yves Le Traon. 2015. Apkcombiner: Combining Multiple Android Apps to Support Inter-App Analysis.** In *IFIP International Information Security Conference*. Springer, 513–527.

14. **Enrico Mariconti, Lucky Onwuzurike, Panagiotis Andriotis, Emiliano De Cristofaro, Gordon J. Ross, and Gianluca Stringhini. 2017. MaMaDroid: Detecting Android Malware by Building Markov Chains of Behavioral Models.** In *Proceedings of the 24th Annual Network and Distributed System Security Symposium (NDSS)*.

15. **Aravind Machiry, Nilo Redini, Eric Gustafson, Yanick Fratantonio, Yung Ryn Choe, Christopher Kruegel, and Giovanni Vigna. 2018. Using Loops for Malware Classification Resilient to Feature-Unaware Perturbations.** In *Proceedings of the 34th Annual Computer Security Applications Conference*. ACM, 112–123.

16. **Roberto Jordaney, Kumar Sharad, Santanu K Dash, Zhi Wang, Davide Papini, Ilia Nouretdinov, and Lorenzo Cavallaro. 2017. Transcend: Detecting Concept Drift in Malware Classification Models.** In *Proceedings of the 26th USENIX Security Symposium (USENIX Security'17)*. USENIX Association, 625–642.

17. **Guillermo Suarez-Tangil and Gianluca Stringhini. 2018. Eight Years of Rider Measurement in the Android Malware Ecosystem: Evolution and Lessons Learned.** *arXiv preprint arXiv:1801.08115* (2018).

18. **Wu Zhou, Yajin Zhou, Xuxian Jiang, and Peng Ning. 2012. Detecting Repackaged Smartphone Applications in Third-Party Android Marketplaces.** In *Proceedings of the Second ACM Conference on Data and Application Security and Privacy*. ACM, 317–326.

19. **Fady Copty, Matan Danos, Orit Edelstein, Cindy Eisner, Dov Murik, and Benjamin Zeltser. 2018. Accurate Malware Detection by Extreme Abstraction.** In *Proceedings of the 34th Annual Computer Security Applications Conference*. ACM, 101–111.

20. **Omid Mirzaei, Guillermo Suarez-Tangil, Juan Tapiador, and Jose M de Fuentes. 2017. Triflow: Triaging Android Applications Using Speculative Information Flows.** In *Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security*. ACM, 640–651.

21. **Silvio Cesare and Yang Xiang. 2010. Classification of Malware Using Structured Control Flow.** In *Proceedings of the Eighth Australasian Symposium on Parallel and Distributed Computing-Volume 107*. Australian Computer Society, Inc., 61–70.

22. **Dustin Hurlbut-AccessData. 2009. Fuzzy Hashing for Digital Forensic Investigators.** (2009).

23. **Geoffroy Gueguen. 2012. Androguard.** Available at: https://github.com/androguard/androguard.

24. **Kevin Allix, Tegawendé F Bissyandé, Jacques Klein, and Yves Le Traon. 2016. Androzoo: Collecting Millions of Android Apps for the Research Community.** In *Mining Software Repositories (MSR), 2016 IEEE/ACM 13th Working Conference on*. IEEE, 468–471.

25. **Christiaan Beek, Diwakar Dinkar, Yashashree Gund, German Lancioni, Niamh Minihane, Francisca Moreno, Eric Peterson, Thomas Roccia, Craig Schmugar, Rick Simon, Dan Sommer, Bing Sun, RaviKant Tiwari, and Vincent Weafer. 2017. McAfee Labs Threats Report.** Technical Report. McAfee Labs.

26. **Jing Chen, Chiheng Wang, Ziming Zhao, Kai Chen, Ruiying Du, and Gail-Joon Ahn. 2018. Uncovering the Face of Android Ransomware: Characterization and Real-Time Detection.** *IEEE Transactions on Information Forensics and Security* 13, 5 (2018), 1286–1300.

27. **Nicoló Andronio, Stefano Zanero, and Federico Maggi. 2015. Heldroid: Dissecting and Detecting Mobile Ransomware.** In *International Workshop on Recent Advances in Intrusion Detection*. Springer, 382–404.

28. **Mikko Hyppönen and Tomi Tuominen. 2017. F-Secure State of Cyber Security.** Available at: https://www.f-secure.com/documents/996508/1030743/cyber-security-report-2017.

29. **Yajin Zhou, Zhi Wang, Wu Zhou, and Xuxian Jiang. 2012. Hey, You, Get Off of My Market: Detecting Malicious Apps in Official and Alternative Android Markets.** In *Proceedings of the 19th Annual Network and Distributed System Security Symposium (NDSS)*, Vol. 25. 50–52.

30. **Roman Unuchek. 2017. A New Era in Mobile Banking Trojans.** Available at: https://securelist.com/a-new-era-in-mobile-banking-trojans/79198/.

31. **Lukas Stefanko. 2018. Banking Trojan Found on Google Play Stole 10,000 Euros from Victims.** Available at: https://lukasstefanko.com/2018/09/banking-trojan-found-on-google-play-stole-10000-euros-from-victims.html.

32. **Lukas Stefanko. 2015. Aggressive Android Ransomware Spreading in the USA.** Available at: https://www.welivesecurity.com/2015/09/10/aggressive-android-ransomware-spreading-in-the-usa.

33. **Ming Fan, Jun Liu, Wei Wang, Haifei Li, Zhenzhou Tian, and Ting Liu. 2017. Dapasa: Detecting Android Piggybacked Apps Through Sensitive Subgraph Analysis.** *IEEE Transactions on Information Forensics and Security* 12, 8 (2017), 1772–1785.

34. **Kimberly Tam, Ali Feizollah, Nor Badrul Anuar, Rosli Salleh, and Lorenzo Cavallaro. 2017. The Evolution of Android Malware and Android Analysis Techniques.** *ACM Computing Surveys (CSUR)* 49, 4 (2017), 76.

### Appendix: Ransomware Case Studies

To confirm the validity of our approach, we selected the most recently detected ransomware families from our dataset and discussed their app feature vectors in detail. We also compared the results with known information from other research works and security reports. Specifically, we focused on the Porndroid and Gepew ransomware families, both of which have been present in the wild since 2014.

#### Analysis of Ransomware Behavior

The analysis revealed that these ransomware families employ several common methods:

1. **LockerPin Application**: This method is used to lock the device and demand a ransom. The second method retrieves the loader of a specific class at runtime, indicating that all apps in this family share malicious classes that are not installed as part of the application package but are loaded dynamically during execution. In other words, once the LockerPin application is successfully downloaded, it is executed by all apps in the family.

2. **Overlay Activity**: The third method ensures that the ransomware activity is always displayed on top of other activities, preventing the victim from accessing other components of the device. The ransomware can set the value of this method to "FLAG_ACTIVITY_NEW_TASK" to restart itself and overwrite previous activities whenever it is not displayed on top.

3. **Query() and Delete() API Methods**: Approximately 90% and 80% of the apps in this family include the `query()` and `delete()` API methods, respectively. These methods are present in three ensembles, as shown in Table 3. The `query()` method is used to retrieve and leak the victim's personal information through the Android content provider [40], while the `delete()` method is used to delete critical files if the ransom is not paid.

#### Intra-Family Characterization

The final step in our evaluation was to examine intra-family dependencies. We compared the feature vector of an app with all other apps using cosine distance. The results, presented in Figure 4a, reveal several cases where apps from different ransomware families share exactly the same signature. For example, the 4654EC...48F2.apk from the Slocker family and 8905B3...99DC.apk from the Gepew family have identical feature vectors. Further inspection shows that both apps contain methods that are not installed as part of their respective packages. Instead, they use dynamic loading to retrieve the class loader of those methods and load the malicious methods into memory at runtime (feature #2 in Table 3). This highlights the importance of dynamic analysis in detecting and characterizing malware.