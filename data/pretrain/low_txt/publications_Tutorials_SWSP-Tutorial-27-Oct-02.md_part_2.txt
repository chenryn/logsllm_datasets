# Invocation Behavior, Mediation, Composition, and Trading Partner Management in Web Services

## Invocation Behavior
- **Synchronous Invocations**: There is no related work for synchronous invocations. Using RPC (Remote Procedure Call) would be a stretch.
- **Asynchronous Invocations**: A peer-to-peer (P2P) approach is used for asynchronous invocations.
  - **RosettaNet (http://www.rosettanet.org)**: Partner Interface Processes (PIPs) define the behavior of both interaction trading partners.
  - **Web Services Conversation Language (WSCL) (http://www.w3.org/TR/wscl10)**: This is a specification language for defining behavior.

### Example: RosettaNet PIP 3A4
- **Start**: Buyer initiates the process.
- **[TRANSACTION = CREATE]**: Purchase Order (PO) Transaction?
  - **Create Purchase Order**:
    - **Success**: Purchase Order Process
    - **Failure**: FAILED END
- **[TRANSACTION = CHANGE]**: Change Purchase Order
  - **Success**: Purchase Order Process
  - **Failure**: FAILED END
- **[TRANSACTION = CANCEL]**: Cancel Purchase Order

## Mediation
- **Problem Definition**: Matching internal and external data definitions and event exchange behavior.
  - **Data Definition Example**: Matching an EDI (Electronic Data Interchange) purchase order with a RosettaNet purchase order.
  - **Behavior Example**: Matching EDI behavior (no acknowledgments) with RosettaNet partner interface process (with acknowledgments).

## Composition
- **Definition of "Composition"**:
  - **Part-of Sense**: Larger parts encapsulate web services and expose themselves as a single web service.
    - **Analogy**: Method invocations as part of method definition.
  - **Sequencing Sense**: Defining the invocation order of web services.
- **Proposed Languages for Composition**:
  - **WSFL (Web Services Flow Language)**
  - **BPML (Business Process Modeling Language)**
  - **ebXML BPSS (Business Process Specification Schema)**
  - **BPEL4WS (Business Process Execution Language for Web Services)**

### WSFL (http://www-3.ibm.com/software/solutions/webservices/pdf/WSFL.pdf)
- **Message Definitions**: Port types and their input/output messages.
- **Service Provider**: Set of port types.
- **Flow Model**: Defines the invocation sequence of operations.
- **Global Model**: Relates operations of all service providers.

### BPML (http://www.bpmi.org)
- **Workflow Definition Language**: No references to web services or their composition.
- **Data Format**: XML, with XPATH expressions.
- **Process Model**: Includes inter-workflow communication, participants, transactions, and compensation.

### ebXML BPSS (http://www.ebxml.org)
- **Process Specification Language**: Emphasis on document exchange, business data messages, and acknowledgment messages.
- **Security Features**: Non-repudiation, confidentiality, and encryption.

### XLANG (www.gotdotnet.com/team/xml_wsspecs/xlang-c/default.htm)
- **Extension of WSDL**: For behavior definition.
- **Main Constructs**: Activation operation, delayFor, delayUntil, raise, empty, sequence, switch, while, all, pick, correlation, and context.

## Trading Partner Management
- **ebXML**:
  - **CPP (Collaboration Partner Profile)**: Properties of collaboration partners.
  - **CPA (Collaboration Partner Agreement)**: Rules of engagement between partners.
- **EDI**:
  - **Document Type 838**: Communication of trading partner attributes.
- **ERPs**:
  - **Internal Management**: Trading partner information that is available and accessible.

## Service Level Guarantees
- **Reliable Message Transmission**: Over unreliable networks.
- **RosettaNet**:
  - **Time-outs**: For expected delays in responses.
  - **Retry Counter**: Resending of messages.
  - **Agreement**: On the state of interaction considered failure or success.
- **Security**:
  - **Signatures, Encryption, Non-repudiation**: Emerging web services security.

## DAML-S Overview
- **DAML (DARPA Agent Markup Language)**:
  - **Upper Ontology of Web Services**: Provides resource services, service profiles, and service models.
  - **Grounding**: Communication protocol, port number, marshalling/serialization, and binding patterns.

### Subclass of Service Model: ProcessModel
- **Process Control Ontology**:
  - **Control Constructs**: Sequence, split, unordered, split+join, choice, if-then-else, iterate, repeat_until.
- **Time and Resources**: Defined in the process control ontology.

## Questions?

---

# Web Services Composition

## Authors
- Jorge Cardoso (LSDIS Lab, Computer Science, University of Georgia)
- Christoph Bussler (Oracle Corporation)
- Amit Sheth (LSDIS Lab, Computer Science, University of Georgia; Semagix, Inc)
- Dieter Fensel (Universit√§t Innsbruck)

## Objective
- The Internet provides a valuable infrastructure to support new business models such as E-services, E-commerce, Business-to-Business (B2B), Business-to-Customer (B2C), Customer-to-Customer (C2C), and Virtual Organizations.
- To support these models, research and new solutions need to be explored, with a focus on the composition of processes.

## Requirements for Making Web Services a Working Technology
- **UDDI, WSDL, and SOAP**: Important steps towards a web populated by services, but they only address part of the overall stack.
- **Layers Required**:
  - **Document Structure**: Describes the content of business documents like purchase orders or invoices.
  - **Semantics**: Ensures correct values and interpretations of document elements.
  - **Process Definition**: Defines business message exchange sequences.
  - **Exchange Sequence Definition**: Ensures reliable message transmission.
  - **Transport Binding**: Agrees on transport mechanisms and message layout.

## Types of Composition
- **Static Composition**: Services to be composed are decided at design time.
- **Dynamic Composition**: Services to be composed are decided at run-time.

## Web Service Composition Issues
- **Representation of an Abstract Web Process**: Proper form for representing/specifying the abstract process.
- **Discovery and Interoperability of Services**: Manual or automatic search for appropriate services.
- **Efficiency of a Composed Web Process**: Performance considerations.
- **Process Execution**: Suitable techniques for executing the composed concrete process.
- **Process Monitoring**: Ensuring the process runs as intended.

This document aims to provide a comprehensive overview of the key aspects of web services, including invocation behavior, mediation, composition, trading partner management, and service level guarantees.