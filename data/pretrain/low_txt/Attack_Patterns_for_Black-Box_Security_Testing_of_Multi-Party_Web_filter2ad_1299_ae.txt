### 7. Execution of the Attack Pattern

The attack pattern is executed if at least one element \( x \) has the proper data flow and semantic label (lines 6-7). For each selected element \( x \) (line 9), the function `extract(x, UAs(UV, SPM))` (line 10) executes `UAs(UV, SPM)`, returning the value \( e \) associated with \( x \). This value \( e \) is then used by the function `replay(x, e, UAs(UM, SPT))` (line 11) to replay the value of \( e \) while executing `UAs(UM, SPT)`, and generating the corresponding HTTP traffic logs (HTTP logs). These logs are finally used in the Postconditions to check whether `Flag(UV, SPT)` occurs.

To clarify how the attack pattern engine leverages the API exposed by ZAP to interact with the built-in proxy, the pseudo-codes for the `extract` and `replay` functions are provided in Listing 2 and Listing 3, respectively. In Listing 2, the function `generate_break_rule(x)` is first invoked. Given an element \( x \), it returns a proxy rule \( rb \) that sets a breakpoint in the execution of user actions in ZAP when an occurrence of \( x \) is detected. The proxy rule includes regular expressions for uniquely identifying elements in the HTTP traffic. Then, the ZAP API call `load_rule(ZAP(rule))` loads \( rb \).

### 8. Disclosure of Findings

We promptly notified our findings to the affected service providers (SPs) and trusted third parties (TTPs). Most of them acknowledged our reports and patched their solutions accordingly. Additional information regarding the disclosures is provided in Section VI-D. Screencasts of the attacks and details about our interactions with the vendors are available on the companion website. Some SPs have not yet patched the vulnerabilities, and thus, in Table IV, we have anonymized their names.

### 9. Clustering of Attacks

We cluster the attacks into four classes (see the last column of Table IV) based on their similarities to known attacks. This allows us to demonstrate the capability of our approach to detect not only known attacks but also similar attacks in multi-party web applications (MPWAs) implementing different protocols and in different MPWA scenarios.

1. **New Kind of Attack (N):** The RA5 pattern, which leverages the browser history attacker threat model, discovered an attack in the integration of the LinkedIn JS API SSO solution at developer.linkedin.com (#a2). The presence of a non-expiring user ID in the browser history allows an attacker to hijack the victim’s account. Another SP website, listed in the Alexa top 10 e-commerce category, is also vulnerable to the same attack (#a1).

2. **Attacks to Different Scenarios (NS):** A known type of attack was applied to a different MPWA scenario. By applying the RA4 attack pattern, we detected a previously unknown attack in the Cloud-as-a-Service (CaaS) scenario (#a3 in Table IV). It is important to note that RA4 is inspired by an attack in the Single Sign-On (SSO) scenario (see #6 in Table I), and our protocol-independent approach allowed us to detect it in the CaaS scenario. Specifically, we identified the attack in the payment checkout solution offered by Stripe: the attack allows an attacker to impersonate an SP by replaying its publicly available API key (DataKey in Figure 4a) to obtain a payment token (Token in Figure 4a) from the victim user, which is then used to shop at the impersonated SP’s online store using the victim’s credit card. As reported in Table IV, this attack is applicable to all SPs implementing the Stripe checkout solution [14]. Similarly, using our login Cross-Site Request Forgery (CSRF) attack pattern (inspired by attacks in SSO), we tested the Vendor-to-End-User (VvE) scenario and discovered the following (#a4):
   - **Login CSRF attack in the account registration process** of open.sap.com and six other SPs (all having Alexa Global rank less than 500). One of the victim SPs is a popular video-sharing website. The account activation link (ActLink in Figure 1c) issued by this website not only activates the account but also authenticates the user without asking for credentials. An attacker can create a fake account that looks similar to the victim’s account and authenticate the victim to the fake account (this can be done when the victim visits the attacker’s website). As mentioned in [26], this enables the attacker to track the videos searched by the victim and use this information to embarrass the victim.
   - **Twitter.com** sends an email to a user if they have not signed into Twitter for more than 10 days. The URLs included in this email directly authenticate the user without asking for credentials. This provides a perfect launchpad for performing login CSRF attacks. The authors of [25] discovered a standard form-based login CSRF attack against twitter.com and demonstrated how a login CSRF attack in twitter.com becomes a login CSRF vulnerability on all of its client websites.

3. **Attacks to Different Protocols (NP):** A known type of attack was applied to different protocols or implementations of the same scenario (SSO, CaaS, or VvE). Using the RA1 attack pattern, which is inspired by attacks against Google’s SAML SSO (cf. #1 in Table I) and Facebook’s OAuth SSO (cf. #2 in Table I), we discovered a similar issue in the integration of the LinkedIn JS API SSO solution at INstant [7] (#a6) and another SP (#a5) with an Alexa US Rank less than 55,000. The vulnerable SPs authenticated users based on their email address registered at LinkedIn and not based on their SP-specific user ID.
   - We discovered login CSRF attacks in two SPs (#a8, both having Alexa Global Rank less than 1000) integrating the Instagram SSO solution and another SP (#a9 in Table IV, with Alexa Australia rank less than 4200) integrating the LinkedIn OAuth 2.0 SSO. The attack pattern that discovered these attacks is inspired by login CSRF attacks against SPs integrating the Browser Id SSO and Facebook SSO solutions (see #7 and #8 in Table I).
   - Our attack pattern that tampers with the redirect URI (inspired by #9 in Table I) reported that in Pinterest’s implementation of the Facebook SSO, it is possible to leak the OAuth 2.0 authorization code of the victim to a network attacker by changing the protocol of the redirect URI from "https" to "http" (#a10 in Table IV). This attack was possible due to the presence of a Pinterest authentication server that is not SSL protected. The same vulnerability was found in all SPs implementing the “Login with PayPal” SSO solution [5] (#a11 in Table IV). However, in this case, it was due to incorrect validation of the redirect URI by the Identity Provider (IdP) PayPal.

4. **Attacks to New SPs (NA):** A known type of attack was applied to new SPs (still using the same protocol offered by the same TTP). This demonstrates how our technique can cover the kinds of attacks reported in the literature. For instance, in [35], the authors mention that a logical vulnerability in the 2Checkout integration in osCommerce v2.3 enables an attacker to reuse the payment status values of a paid order to bypass payment for future orders (cf. #4 in Table I). We tested the 2Checkout integration in the latest version of OpenCart (v2.1.0.1) and noticed that our RA3 attack pattern discovered a similar attack (#a12 in Table IV).

### 10. Manual Findings

In [36], the authors were able to manually discover exploit opportunities in SSO integrations by analyzing the inference results of the HTTP traffic. Since our inference module is an extension of [36], we were also able to manually identify two attacks. We created a single attack pattern that generalizes the Cross-Site Scripting (XSS) attack strategy reported in [22, §4]. While writing the preconditions and the attacker strategy was straightforward, the postcondition was more challenging. Establishing whether an XSS payload is successfully executed is a well-known issue in the automatic security testing community. In our preliminary experiments, we relied on the tester to inspect the results of the pattern and determine whether the XSS payload was successfully executed. By doing so, we uncovered an XSS vulnerability in the INstant website [7] integrating the LinkedIn JS API SSO. Additionally, we manually analyzed the data flow between SP and TTP in SPs integrating LinkedIn REST API SSO to identify tainted data elements. We replaced the value of tainted elements with XSS payloads and identified another XSS vulnerability in an SP with an Alexa Global rank less than 300 (#a13).

### 11. Disclosures

- **Pinterest:** Acknowledged our report about the redirect URI fixation attack and recently updated their Facebook SSO implementation.
- **PayPal:** Acknowledged our report, but we did not win the bug bounty as another security researcher simultaneously reported the attack. None of the details regarding this attack were publicly available, and we have the screencast of the attack on our website to support our claim.
- **Stripe:** Appreciated the attack against online shopping websites integrating Stripe checkout and rewarded us for our findings.
- **LinkedIn:** Updated the LinkedIn Developers website after receiving our report about the attack by the browser history attacker.
- **OpenSAP:** Acknowledged our report about the login CSRF attack in the account registration process of open.sap.com and fixed the issue.
- **XSS Attacks:** We reported the XSS attacks we discovered against SPs integrating the LinkedIn SSO to the corresponding vendors. LinkedIn was partially responsible for this attack as it was possible to create a LinkedIn account and provide XSS payloads as the value of user information fields (e.g., first name, last name). However, it was the responsibility of SPs to properly filter and encode the user information received from LinkedIn. After notifying LinkedIn about the issue, we noticed that they enforced restrictions in the usage of HTML characters in input fields.
- **Twitter:** Login CSRF is out of scope for Twitter’s vulnerability rewards program [19]. Hence, we did not win a bounty for our report. However, in Section V.F of [25], it is mentioned that the authors discovered a standard form-based login CSRF in the login form of twitter.com (which was already known) and explained how this causes a login CSRF in SPs integrating Twitter’s SSO solution. Further details about the disclosures are available on our website.

### 12. Related Work

#### A. Attack Pattern-Based Black-Box Techniques

- **Wang et al. [37]:** Conducted a detailed study of the security of Cashier-as-a-Service based web stores.
- **Pellegrino et al. [32]:** Proposed the idea of black-box detection of logical vulnerabilities in e-shopping applications. The proposed approach creates an abstract model of the application from the HTTP traffic, identifies the applicability of predefined behavioral patterns, and generates test cases misusing these patterns. It is interesting to note that the strategy behind all the exploitable attacks discovered by [32] falls under the category of replay attacks (precisely those covered by our RA2 and RA3 attack patterns). We follow a different complementary approach by neglecting the application model and directly focusing on replay attacks (among others). We recognize that, in principle, there could be control-flow attacks that [32] could detect and we may not (even if there is no experimental evidence for this). However, it is also true that our attack on Stripe would require not-so-obvious extensions of [32]: consider malicious SPs as we do and generate online test-cases to deal with short-lived/one-time tokens.
- **Somorovsky et al. [34]:** Conducted an in-depth analysis of 14 different SAML frameworks and developed a framework for automated security testing of SAML-based SSO systems.