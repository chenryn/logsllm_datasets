### Detection of Similar or Cloned Codes

Code clone detection is a long-standing challenge in software engineering and security. In 1998, Baxter et al. [17] proposed using abstract syntax trees (ASTs) for detecting code clones. To improve scalability, tools such as CCFinder [43], CP-Miner [49], and ReDeBug [39] split code into token sequences, enabling multilingual clone detection in large-scale source code. Deckard [40] computed characteristic vectors to approximate ASTs, allowing for the clustering of similar vectors. VulPecker [50] and VUDDY [44] further abstracted vulnerability-related features specifically for detecting vulnerable code clones. More recently, deep learning techniques have been applied to clone detection in both source code [51] and binary code [71]. However, these methods are not designed to find similar code changes, making them unsuitable for our patch code clustering problem. Only two recent works, by Kreutzer et al. [45] and Paletov et al. [59], have focused on clustering code changes. Our clustering algorithm differs from these by extracting essential changes in patch code and leveraging affinity propagation for automatic clustering without assuming any pattern template or structure.

### Conclusion

In this paper, we conducted the first systematic study of Android system vulnerabilities by comprehensively analyzing all 2,179 vulnerabilities and their 1,349 publicly available patches on the Android Security Bulletin program over approximately three years. To support this analysis, we proposed an automatic analysis framework with three analyzers: one for analyzing vulnerable modules, another for assessing patch code complexity, and a third for identifying vulnerability patterns. Specifically, we designed a similarity-based algorithm that extracts essential changes in patch code and uses affinity propagation to automatically cluster patch code patterns. Using this framework, we identified the distribution of vulnerabilities across different Android modules, studied the complexity of Android patch code, and successfully obtained 16 vulnerability patterns, including six new ones not previously documented. In future work, we plan to enhance our clustering algorithm to support longer code fragments and to evolve our analysis results over time.

### Acknowledgements

We thank all the reviewers of this paper for their valuable comments. We especially thank Prof. Lingxiao Jiang for his helpful discussion on clustering diff code. This work is partially supported by the Singapore National Research Foundation under NCR Award Number NRF2014NCR-NCR001-012.

### References

[1] 2010. Nested JSON objects. https://stackoverflow.com/a/2098294/197165. (2010).

[2] 2016. Android Bug: 24296662. https://android.googlesource.com/platform/

[3] 2017. Android Bug: 68320413. https://android.googlesource.com/platform/

[4] 2017. Android Bug: 68341964. https://android.googlesource.com/platform/external/freetype/+/f720f0db. (2016).

[5] 2017. printk: hash addresses printed with %p. https://lwn.net/Articles/737451/.

[6] 2018. diff Output Formats. https://tinyurl.com/diffOutput. (2018).

[7] 2018. Exploit Database for Android. https://www.exploit-db.com/?platform=android. (2018).

[8] 2018. Global mobile OS market share in sales to end users from 1st quarter 2009 to 2nd quarter 2018. https://www.statista.com/statistics/266136/global-market-share-held-by-smartphone-operating-systems/. (2018).

[9] 2018. Jellyfish: a Python library for doing approximate and phonetic matching of strings. https://github.com/jamesturk/jellyfish. (2018).

[10] 2018. The JSON1 Extension in SQLite. https://www.sqlite.org/json1.html. (2018).

[11] 2018. platform/frameworks/av - Git at Google. https://android.googlesource.com/platform/frameworks/av/. (2018).

[12] 2018. platform/hardware/qcom/media - Git at Google. https://android.googlesource.com/platform/hardware/qcom/media/. (2018).

[13] 2018. platform/system/bt - Git at Google. https://android.googlesource.com/platform/system/bt/. (2018).

[14] 2018. Selenium: Web Browser Automation. https://www.seleniumhq.org/. (2018).

[15] 2018. sklearn.cluster.AffinityPropagation. http://scikit-learn.org/stable/modules/generated/sklearn.cluster.AffinityPropagation.html. (2018).

[16] Yousra Aafer, Jianjun Huang, Yi Sun, Xiangyu Zhang, Ninghui Li, and Chen Tian. 2018. AceDroid: Normalizing Diverse Android Access Control Checks for Inconsistency Detection. In Proc. ISOC NDSS.

[17] Ira D. Baxter, Andrew Yahin, Leonardo Moura, Marcelo Sant’Anna, and Lorraine Bier. 1998. Clone Detection Using Abstract Syntax Trees. In Proc. IEEE ICSM.

[18] Chen Cao, Neng Gao, Peng Liu, and Ji Xiang. 2015. Towards Analyzing the Input Validation Vulnerabilities associated with Android System Services. In Proc. ACM ACSAC.

[19] Haogang Chen, Yandong Mao, Xi Wang, Dong Zhou, Nickolai Zeldovich, and M. Frans Kaashoek. 2011. Linux kernel vulnerabilities: State-of-the-art defenses and open problems. In Proc. ACM APSys.

[20] Shuo Chen, Jun Xu, Zbigniew Kalbarczyk, and Ravishankar K. Iyer. 2006. Security Vulnerabilities: From Analysis to Detection and Masking Techniques. Proc. IEEE vol. 94, no. 2 (2006).

[21] Yaohui Chen, Yuping Li, Long Lu, Yueh-Hsun Lin, Hayawardh Vijayakumar, Zhi Wang, and Xinming Ou. 2018. InstaGuard: Instantly Deployable Hot-patches for Vulnerable System Programs on Android. In Proc. ISOC NDSS.

[22] Erika Chin, Adrienne Felt, Kate Greenwood, and David Wagner. 2011. Analyzing Inter-Application Communication in Android. In Proc. ACM MobiSys.

[23] Daniel Dieterle. 2014. Android Webview Exploit Tutorial (70% of Devices Vulnerable!). https://cyberarms.wordpress.com/2014/02/26/android-webview-exploit-tutorial-70-of-devices-vulnerable/.

[24] Manuel Egele, David Brumley, Yanick Fratantonio, and Christopher Kruegel. 2013. An Empirical Study of Cryptographic Misuse in Android Applications. In Proc. ACM CCS.

[25] William Enck, Damien Octeau, Patrick McDaniel, and Swarat Chaudhuri. 2011. A Study of Android Application Security. In Proc. USENIX Security.

[26] Dawson Engler and Ken Ashcraft. 2003. RacerX: Effective, Static Detection of Race Conditions and Deadlocks. In Proc. ACM SOSP.

[27] Sascha Fahl, Marian Harbach, Thomas Muders, Lars Baumgärtner, Bernd Freisleben, and Matthew Smith. 2012. Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security. In Proc. ACM CCS.

[28] Huan Feng and Kang G. Shin. 2016. Understanding and Defending the Binder Attack Surface In Android. In Proc. ACM ACSAC.

[29] Matthew Finifter, Devdatta Akhawe, and David Wagner. 2013. An Empirical Study of Vulnerability Rewards Programs. In Proc. USENIX Security.

[30] Felix Fischer, Konstantin Böttinger, Huang Xiao, Christian Stransky, Yasemin Acar, Michael Backes, and Sascha Fahl. 2017. Stack Overflow Considered Harmful? The Impact of Copy&Paste on Android Application Security. In Proc. IEEE Symposium on Security and Privacy.

[31] Brendan J. Frey and Delbert Dueck. 2007. Clustering by Passing Messages Between Data Points. Science 315, 5814 (2007).

[32] Ioannis Gasparis, Zhiyun Qian, Chengyu Song, and Srikanth V. Krishnamurthy. 2017. Detecting Android Root Exploits by Learning from Root Providers. In Proc. USENIX Security.

[33] David Gens, Simon Schmitt, Simon Schmitt, and Ahmad-Reza Sadeghi. 2018. K-Miner: Uncovering Memory Corruption in Linux. In Proc. ISOC NDSS.

[34] Martin Georgiev, Suman Jana, and Vitaly Shmatikov. 2014. Breaking and Fixing Origin-Based Access Control in Hybrid Web/Mobile Application Frameworks. In Proc. ISOC NDSS.

[35] Yacong Gu, Yao Cheng, Lingyun Ying, Yemian Lu, Qi Li, and Purui Su. 2016. Exploiting Android System Services Through Bypassing Service Helpers. In Proc. Springer SecureComm.

[36] Stephan Heuser, Adwait Nadkarni, William Enck, and Ahmad Sadeghi. 2014. ASM: A Programmable Interface for Extending Android Security. In Proc. Usenix Security.

[37] Heqing Huang, Sencun Zhu, Kai Chen, and Peng Liu. 2015. From System Services Freezing to System Server Shutdown in Android: All You Need Is a Loop in an App. In Proc. ACM CCS.

[38] Sigmund Albert Gorski III, Benjamin Andow, Adwait Nadkarni, Sunil Manandhar, William Enck, Eric Bodden, and Alexandre Bartel. 2019. ACMiner: Extraction and Analysis of Authorization Checks in Android’s Middleware. In Proc. ACM CODASPY.

[39] Jiyong Jang, Abeer Agrawal, and David Brumley. 2012. ReDeBug: Finding Unpatched Code Clones in Entire OS Distributions. In Proc. IEEE Symposium on Security and Privacy.

[40] Lingxiao Jiang, Ghassan Misherghi, Zhendong Su, and Stephane Glondu. 2007. DECKARD: Scalable and Accurate Tree-Based Detection of Code Clones. In Proc. ACM ICSE.

[41] Matthieu Jimenez, Mike Papadakis, Tegawende F. Bissyande, and Jacques Klein. 2016. Profiling Android Vulnerabilities. In Proc. IEEE International Conference on Software Quality, Reliability and Security.

[42] Xing Jin, Xuchao Hu, Kailiang Ying, Wenliang Du, Heng Yin, and Gautam Peri. 2014. Code Injection Attacks on HTML5-based Mobile Apps: Characterization, Detection and Mitigation. In Proc. ACM CCS.

[43] Toshihiro Kamiya, Shinji Kusumoto, and Katsuro Inoue. 2002. CCFinder: A Multilinguistic Token-based Code Clone Detection System for Large Scale Source Code. IEEE Transactions on Software Engineering 28, 7 (2002).

[44] Seulbae Kim, Seunghoon Woo, Heejo Lee, and Hakjoo Oh. 2017. VUDDY: A Scalable Approach for Vulnerable Code Clone Discovery. In Proc. IEEE Symposium on Security and Privacy.

[45] Patrick Kreutzer, Georg Dotzler, Matthias Ring, Bjoern M. Eskofier, and Michael Philippsen1. 2016. Automatic Clustering of Code Changes. In Proc. ACM MSR.

[46] Su Mon Kywe, Yingjiu Li, Kunal Petal, and Michael Grace. 2016. Attacking Android Smartphone Systems without Permissions. In Proc. 14th Annual Conference on Privacy, Security and Trust (PST).

[47] Frank Li and Vern Paxson. 2017. A Large-Scale Empirical Study of Security Patches. In Proc. ACM CCS.

[48] Tongxin Li, Xueqiang Wang, Mingming Zha, Kai Chen, XiaoFeng Wang, Luyi Xing, Xiaolong Bai, Nan Zhang, and Xinhui Han. 2017. Unleashing the Walking Dead: Understanding Cross-App Remote Infections on Mobile WebViews. In Proc. ACM CCS.

[49] Zhenmin Li, Shan Lu, Suvda Myagmar, and Yuanyuan Zhou. 2004. CP-Miner: A Tool for Finding Copy-paste and Related Bugs in Operating System Code. In Proc. USENIX OSDI.

[50] Zhen Li, Deqing Zou, Shouhuai Xu, Hai Jin, Hanchao Qi, and Jie Hu. 2016. VulPecker: An Automated Vulnerability Detection System Based on Code Similarity Analysis. In Proc. ACM ACSAC.

[51] Zhen Li, Deqing Zou, Shouhuai Xu, Xinyu Ou, Hai Jin, Sujuan Wang, Zhijun Deng, and Yuyi Zhong. 2018. VulDeePecker: A Deep Learning-Based System for Vulnerability Detection. In Proc. ISOC NDSS.

[52] Mario Linares-Vasquez, Gabriele Bavota, and Camilo Escobar-Velasquez. 2017. An Empirical Study on Android-related Vulnerabilities. In Proc. ACM MSR.

[53] Kangjie Lu, Chengyu Song, Taesoo Kim, and Wenke Lee. 2016. UniSan: Proactive Kernel Memory Initialization to Eliminate Data Leakages. In Proc. ACM CCS.

[54] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and Guofei Jiang. 2012. CHEX: Statically Vetting Android Apps for Component Hijacking Vulnerabilities. In Proc. ACM CCS.

[55] Huasong Meng, Vrizlynn L.L. Thing, Yao Cheng, and Zhongmin Dai. 2018. A survey of Android exploits in the wild. Computers & Security vol. 76 (2018).

[56] Adwait Nadkarni, Benjamin Andow, William Enck, and Somesh Jha. 2016. PracTical DIFC Enforcement on Android. In Proc. USENIX Security.

[57] Adwait Nadkarni and William Enck. 2013. Preventing Accidental Data Disclosure in Modern Operating Systems. In Proc. ACM CCS.

[58] M. Oltrogge, E. Derr, C. Stransky, Y. Acar, S. Fahl, C. Rossow, G. Pellegrino, S. Bugiel, and M. Backes. 2018. The Rise of the Citizen Developer: Assessing the Security Impact of Online App Generators. In Proc. IEEE Symposium on Security and Privacy.

[59] Rumen Atanasov Paletov, Petar Tsankov, Veselin Raychev, and Martin Vechev. 2018. Inferring Crypto API Rules from Code Changes. In ACM PLDI.

[60] Yuru Shao, Qi Alfred Chen, Zhuoqing Morley Mao, Jason Ott, and Zhiyun Qian. 2016. Kratos: Discovering Inconsistent Security Policy Enforcement in the Android Framework. In Proc. ISOC NDSS.

[61] Seven Shen. 2015. Setting the Record Straight on Moplus SDK and the Wormhole Vulnerability. In https://blog.trendmicro.com/trendlabs-security-intelligence/setting-the-record-straight-on-moplus-sdk-and-the-wormhole-vulnerability/.

[62] Stephen Smalley and Robert Craig. 2013. Security Enhanced (SE) Android: Bringing Flexible MAC to Android. In Proc. ISOC NDSS.

[63] Seyed Mohammadjavad Seyed Talebi, Hamid Tavakoli, Hang Zhang, Zheng Zhang, Ardalan Amiri Sani, and Zhiyun Qian. 2018. Charm: Facilitating Dynamic Analysis of Device Drivers of Mobile Systems. In Proc. Usenix Security.

[64] Kai Wang, Yuqing Zhang, and Peng Liu. 2016. Call Me Back!: Attacks on System Server and System Apps in Android through Synchronous Callback. In Proc. ACM CCS.

[65] Tielei Wang, Tao Wei, Zhiqiang Lin, and Wei Zou. 2009. IntScope: Automatically Detecting Integer Overflow Vulnerability In X86 Binary Using Symbolic Execution. In Proc. ISOC NDSS.

[66] Daoyuan Wu and Rocky K. C. Chang. 2014. Analyzing Android Browser Apps for file:// Vulnerabilities. In Proc. Springer Information Security Conference (ISC).

[67] Daoyuan Wu and Rocky K. C. Chang. 2015. Indirect File Leaks in Mobile Applications. In Proc. IEEE Mobile Security Technologies (MoST).

[68] Daoyuan Wu, Yao Cheng, Debin Gao, Yingjiu Li, and Robert H. Deng. 2018. SCLib: A Practical and Lightweight Defense against Component Hijacking in Android Applications. In Proc. ACM CODASPY.

[69] Daoyuan Wu, Debin Gao, Rocky K. C. Chang, En He, Eric K. T. Cheng, and Robert H. Deng. 2019. Understanding Open Ports in Android Applications: Discovery, Diagnosis, and Security Assessment. In Proc. ISOC NDSS.

[70] Daoyuan Wu, Xiapu Luo, and Rocky K. C. Chang. 2014. A Sink-driven Approach to Detecting Exposed Component Vulnerabilities in Android Apps. CoRR abs/1405.6282 (2014). http://arxiv.org/abs/1405.6282

[71] Xiaojun Xu, Chang Liu, Qian Feng, Heng Yin, Le Song, and Dawn Song. 2017. Neural Network-based Graph Embedding for Cross-Platform Binary Code Similarity Detection. In Proc. ACM CCS.

[72] Guangliang Yang, Jeff Huang, Guofei Gu, and Abner Mendoza. 2018. Study and Mitigation of Origin Stripping Vulnerabilities in Hybrid-postMessage Enabled Mobile Applications. In Proc. IEEE Symposium on Security and Privacy.

[73] Wei You, Peiyuan Zong, Kai Chen, XiaoFeng Wang, Xiaojing Liao, Pan Bian, and Bin Liang. 2017. SemFuzz: Semantics-based Automatic Generation of Proof-of-Concept Exploits. In Proc. ACM CCS.

[74] Hang Zhang, Dongdong She, and Zhiyun Qian. 2016. Android ION Hazard: the Curse of Customizable Memory Management System. In Proc. ACM CCS.

[75] Veo Zhang, Jason Gu, and Seven Shen. 2018. New AndroRAT Exploits Dated Privilege Escalation Vulnerability, Allows Permanent Rooting. In https://blog.trendmicro.com/trendlabs-security-intelligence/new-androrat-exploits/.

[76] Mingyi Zhao, Jens Grossklags, and Peng Liu. 2015. An Empirical Study of Web Vulnerability Discovery Ecosystems. In Proc. ACM CCS.

[77] Xiaoyong Zhou, Yeonjoon Lee, Nan Zhang, Muhammad Naveed, and XiaoFeng Wang. 2014. The Peril of Fragmentation: Security Hazards in Android Device Driver Customizations. In Proc. IEEE Symposium on Security and Privacy.

[78] Yajin Zhou and Xuxian Jiang. 2012. Dissecting Android Malware: Characterization and Evolution. In Proc. IEEE Symposium on Security and Privacy.

[79] Yajin Zhou and Xuxian Jiang. 2013. Detecting Passive Content Leaks and Pollution in Android Applications. In Proc. ISOC NDSS.

[80] Chaoshun Zuo, Zhiqiang Lin, and Yinqian Zhang. 2019. Why Does Your Data Leak? Uncovering the Data Leakage in Cloud from Mobile Apps. In Proc. IEEE Symposium on Security and Privacy.

Session 4A: Mobile Security
AsiaCCS '19, July 9–12, 2019, Auckland, New Zealand