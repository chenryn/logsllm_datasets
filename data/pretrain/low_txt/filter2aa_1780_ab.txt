### Overview of SSL/TLS Session and Key Structures

#### Session and Key Structures
- **rgbSessionID[0x20]**: 32-byte session ID.
- **pSessionTicket**: Pointer to the session ticket.
- **cbSessionTicketLength**: Length of the session ticket.
- **_NCRYPT_SSL_KEY_HANDLE**:
  - **cbStructLength**: Length of the structure (4 bytes).
  - **dwMagic**: Magic number, e.g., "BDDD" (4 or 8 bytes).
  - **pNcryptSslProvider**: Pointer to the Ncrypt SSL provider (4 or 8 bytes).
  - **pNcryptSslKey**: Pointer to the Ncrypt SSL key (4 or 8 bytes).

- **_SSL_MASTER_SECRET**:
  - **cbStructLength**: Length of the structure (4 bytes).
  - **dwMagic**: Magic number, e.g., "ssl5" (4 bytes).
  - **dwProtocolVersion**: Protocol version (0 or 4 bytes).
  - **dwUnknown1**: Alignment padding (4 or 8 bytes).
  - **pCipherSuiteListEntry**: Pointer to the cipher suite list entry (4 bytes).
  - **bIsClientCache**: Boolean indicating if it's a client cache (48 bytes).
  - **rgbMasterSecret**: Master secret (4 bytes).
  - **dwUnknown2**: Reserved field (4 bytes).

- **RSA Session Examples**:
  - **Session-ID**: 97420000581679ae7a064f3e4a350682dca9e839ebca07075b1a944d8b1b71f7
  - **Master-Key**: 897adf533d0e87eadbc41bc1a13adb241251a56f050435fad0d54b1064f83c50cedb9d98de046008cde04a4097795df2
  - **Session-ID**: f5350000be2cebcb15a38f38b99a20751ed0d539578901ddde69278dbbf9738e
  - **Master-Key**: 716a1d493656bf534e436ffb58ff2e40000516b735dbd5dfaff93f37b5ac90ba1c3a25ba3e1505b8f3aa168a657e007b
  - **Session-ID**: bcb3aff3581fccb9fe268d46f99f5e2c6cc9e59e51c6714d70997e63b9c6fe73
  - **Master-Key**: e45e18945197c2f0a2addb901a9558f194241d2b488cd3d1f81e1271acb4dc776e3c772177c7d0462afeca57a3d9cb2
  - **Session-ID**: c7d0f952fb3fc4999a692ce3674acb1a4b2c791ece2c6d1621af95e6414ec3b0
  - **Master-Key**: db93026b71e0323b60e2537f0eeebf4fc321094b8a9a6ccd8cf0f50c7fa68c294f6c490d5af3df881db585e2a10a0aea

- **Wireshark SSL Log Format**:
  - Wireshark SSL input formats can be found in the following GitHub repository: [Wireshark SSL Dissector](https://github.com/boundary/wireshark/blob/master/epan/dissectors/packet-ssl.c)

#### Ephemeral and Persistent Private Keys
- **Shared Structure**:
  - Both ephemeral and persistent keys share the same structure.
  - Both store secrets in a Key Storage Provider.

- **Key Struct (KPSK)**:
  - The "Key Type" is compared with different values.
  - "ssl6" is compared with a list stored in `bcryptprimitives`.
  - "ssl4" is compared with a list stored in `NCRYPTPROV`.
  - The Key Storage Provider Key (KPSK) is referenced indirectly through an "Ncrypt Key" struct.

- **_SSL_KEY_PAIR**:
  - **cbStructLength**: Length of the structure (4 bytes).
  - **dwMagic**: Magic number, e.g., "ssl4" or "ssl6" (4 bytes).
  - **dwKeyType**: Key type (4 bytes).
  - **dwUnknown1**: Alignment padding (4 or 8 bytes).
  - **pKspProvider**: Pointer to the KSP provider (4 or 8 bytes).
  - **pKspKey**: Pointer to the KSP key (4 or 8 bytes).

- **_NCRYPT_KEY_HANDLE**:
  - **cbStructLength**: Length of the structure (4 bytes).
  - **dwMagic**: Magic number, e.g., 0x44440002 (4 bytes).
  - **dwKeyType**: Key type (4 bytes).
  - **dwUnknown1**: Alignment padding (4 or 8 bytes).
  - **pKspProvider**: Pointer to the KSP provider (4 or 8 bytes).
  - **pKspKey**: Pointer to the KSP key (4 or 8 bytes).

- **_KSP_KEY**:
  - **cbStructLength**: Length of the structure (4 bytes).
  - **dwMagic**: Magic number, e.g., "KSPK" (4 bytes).
  - **dwKeyType**: Key type (4 bytes).

- **Ephemeral Private Key**:
  - Reused across connections for performance.
  - Given public connection parameters, the PMS and MS can be derived.
  - Stored unencrypted in a little-endian byte array within the MSKY struct.
  - Curve parameters are stored in the KPSK.
  - Other parameters (A & B, etc.) are stored in MSKY with the key.
  - Verified by generating the public key and comparing it.
  - The public key is also stored in the first pointer of the CEphemData struct that points to "ssl6".

- **Persistent Private Key**:
  - RSA key stored on disk.
  - Unique instance for each private RSA key.
  - By default, the system has several, e.g., one for Terminal Services.
  - RSA keys are DPAPI protected.
  - Linked to a given Server Cache Item.
  - Verified by comparing the DPAPI blob in memory to the protected certificate on disk.
  - Can be decrypted using tools like DPAPIck or Mimikatz, or directly from memory.
  - MasterKeys get cached in memory, e.g., in `dpapisrv!g_MasterKeyCacheList` on Windows 10.

#### Decrypting Persistent Key - DPAPI
- **Blob Extraction and Decryption**:
  - Extract the blob from memory and decrypt it with keys from disk.
  - Use tools like DPAPIck or Mimikatz.
  - Alternatively, decrypt directly from memory.
  - MasterKeys are cached in memory.
  - On Windows 10, the cache is in `dpapisrv!g_MasterKeyCacheList`.
  - Symbols are not strictly required, but there are only two Bcrypt key pointers in lsasrv’s .rdata section (plus one lock).
  - Identifying the IV is more challenging.
  - Cached DPAPI MK + Params to Decrypt.

#### Session Tickets
- **Usage and Documentation**:
  - Not widely used with IIS.
  - Introduced with Server 2012 R2.
  - Documentation is limited.
  - Enabled via registry key and PowerShell cmdlets.
  - Creates an "Administrator managed" session ticket key.
  - Schannel functions related to session tickets load the keyfile from disk.
  - Export-TlsSessionTicketKey can be used.

- **Session Ticket Key**:
  - Keyfile contains a DPAPI blob, preceded by a SessionTicketKey GUID and an 8-byte value.
  - Loaded via schannel.
  - Heavy lifting (at least in Windows 10) is done via `mskeyprotect`.
  - AES key derived from the decrypted blob via `BCryptKeyDerivation()`.
  - Key gets cached inside `mskeyprotect`.

- **Decrypting Session Tickets**:
  - Follows RFC 5077, except the MAC and Encrypted State are flipped.
  - After extracting/deriving the symmetric key, it's just straight AES 256.
  - Contents of the State include:
    - Timestamp
    - Protocol/Ciphersuite info
    - MS struct
    - Key GUID
    - IV
    - MAC
    - Encrypted TLS State

#### Metadata and Fingerprinting
- **Inherent Metadata**:
  - **Timestamps**: Random values typically start with a 4-byte timestamp.
  - **Identity/Fingerprinting**: Public Key, Session ID, Offered Cipher Suites/Extensions.
  - **Session ID**: Arbitrary but not always random. Schannel uses the MaximumCacheEntries parameter, leading to an imperfect fingerprint of two zero bytes in 3/4th byte.

- **TLS Extensions**:
  - **Server Name Indication (SNI)**: Virtual hosts.
  - **Application-Layer Protocol Negotiation (ALPN)**: Limited, but useful for protocol fingerprinting.
  - **Session Tickets**: Key GUID.

- **Schannel Caching Parameters**:
  - **m_dwClientLifespan**: Set to 0x02255100 (10 hours in ms).
  - **m_dwServerLifespan**: Set to 0x02255100 (10 hours in ms).
  - **m_dwSessionTicketLifespan**: Set to 0x02255100 (10 hours in ms).
  - **m_dwMaximumEntries**: Set to 0x4e20 (20,000 entries by default).
  - **m_dwEnableSessionTicket**: Controls use of session tickets (e.g., 0, 1, 2).
  - **m_dwSessionCleanupIntervalInSeconds**: Set to 0x012c (300 seconds by default).

- **Process Control**:
  - The process can purge its own cache at will.
  - For example, IIS reportedly purges after around two hours.
  - Schannel maintains track of the process and frees cache items after the client process terminates.

### Questions?
- @TinRabbit_

### Special Thanks
- **Áine Doyle**: Badass Extraordinaire (OCSC)
- **Dr. John-Ross Wallrabenstein**: Sypris Electronics
- **Dr. Marcus Rogers**: Purdue Cyber Forensics Laboratory
- **Michael Hale Ligh (MHL)**: Volexity
- **Tatiana Ringenberg**: Sypris Electronics

Thank you for your support, helpful comments, time, and encouragement.