# Optimized Text

## Introduction
In this work, we propose an online log parsing method based on N-grams. The key assumption is that log messages from the same template will not have consecutively different tokens. This method allows for the processing of raw log messages in a stream without requiring historical data training.

## Methodology
### Assumptions and Processing
The proposed method, logNG, operates under the assumption that log messages sharing the same template do not contain consecutive differing tokens. This intuitive assumption enables the efficient parsing of log messages in real-time, making it suitable for both offline and online environments.

### Experimental Setup
To evaluate the effectiveness and efficiency of logNG, we conducted experiments on 10 real-world log datasets collected by the LogPai team [14]. The performance metrics include Parsing Accuracy (PA) and running time.

## Results
### Parsing Accuracy
- **logNG** achieved the highest PA on all 10 datasets, with an average PA of 0.9509.
- The second-ranked parser, **LogMine**, had an average PA of 0.7613.
- There is a significant gap between logNG and LogMine, indicating that logNG is not only more effective but also more comprehensive across different datasets.

### Efficiency
- **Efficiency** is a critical indicator. logNG demonstrated superior running speed compared to other log parsing methods.
- **Fig. 6** illustrates the running time of five log parsing methods on datasets of varying sizes. The red line represents the running time of logNG, which is the fastest on most datasets.
- Even on the three datasets (BGL, HDFS, and HealthApp) where logNG was not the fastest, it still ranked second.
- logNG's running time scales linearly with the increase in log size, whereas LKE and LogMine often exhibit quadratic time complexity, leading to longer processing times.

## Discussion
### Challenges and Future Work
During our research, we observed that some dynamic variables in log templates can take multiple value forms. For example, a timestamp might appear as "00:01" or "¨ıs". This type of dynamic variable impacts parsing accuracy, and further research is needed to address this issue.

### Conclusion
In conclusion, logNG offers the best balance of accuracy and efficiency among the evaluated log parsers. It does not require historical data training and can process log messages in real-time. Despite some challenges with dynamic variables, logNG remains a robust and effective solution for log parsing.

## References
[1] L. Tang, T. Li, and C.-S. Perng, “LogSig: Generating system events from raw textual logs,” in CIKM, 2011, pp. 785–794.

[2] Tao Li, Yexi Jiang, Chunqiu Zeng, Bin Xia, Zheng Liu, Wubai Zhou, et al, “Flap: An end-to-end event log analysis platform for system management,” in Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, 2017, pp. 1547–1556.

[3] S. Khatuya, N. Ganguly, J. Basak, M. Bharde, and B. Mitra, “ADELE: Anomaly detection from event log empiricism,” IEEE INFOCOM 2018 - IEEE Conference on Computer Communications, 2018, pp. 2114-2122.

[4] T. Barik, R. DeLine, S. Drucker, and D. Fisher, “The bones of the system: A case study of logging and telemetry at Microsoft,” 2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C), 2016, pp. 92-101.

[5] Wei Xu, Ling Huang, Armando Fox, David Patterson, and Michael I. Jordan, “Detecting large-scale system problems by mining console logs,” in Proceedings of the ACM SIGOPS 22nd symposium on Operating systems principles (SOSP’09), 2009, pp. 117–132.

[6] Tatsuaki Kimura, Keisuke Ishibashi, Tatsuya Mori, Hiroshi Sawada, Tsuyoshi Toyono, Ken Nishimatsu, et al, “Spatio-temporal factorization of log data for understanding network events,” IEEE INFOCOM 2014 - IEEE Conference on Computer Communications, 2014, pp. 610-618.

[7] D. Yuan, H. Mai, W. Xiong, L. Tan, Y. Zhou, and S. Pasupathy, “Sherlog: Error diagnosis by connecting clues from run-time logs,” SIGARCH Comput. Archit. News, vol. 38, no. 1, pp. 143–154, Mar. 2010.

[8] C. H. Kim, J. Rhee, H. Zhang, N. Arora, G. Jiang, X. Zhang, and D. Xu, “IntroPerf: Transparent context-sensitive multi-layer performance inference using system stack traces,” SIGMETRICS Perform. Eval. Rev., vol. 42, no. 1, pp. 235–247, Jun. 2014.

[9] K. Zhang, J. Xu, M. R. Min, G. Jiang, K. Pelechrinis, and H. Zhang, “Automated IT system failure prediction: A deep learning approach,” 2016 IEEE International Conference on Big Data (BigData), 2016, pp. 1291-1300.

[10] P. He, J. Zhu, Z. Zheng, and M. R. Lyu, “Drain: An online log parsing approach with fixed depth tree,” 2017 IEEE International Conference on Web Services (ICWS), 2017, pp. 33-40.

[11] Makanju, A. A., Zincir-Heywood, A. N., and Milios, E. E., “Clustering event logs using iterative partitioning,” in Proceedings of the 15th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, 2009, pp. 1255–1264.

[12] R. Vaarandi and M. Pihelgas, “LogCluster - A Data Clustering and Pattern Mining Algorithm for Event Logs,” in Proceedings of the 11th International Conference on Network and Service Management (CNSM 2015), 2015, pp. 1–7.

[13] P. He, J. Zhu, S. He, J. Li, and M. R. Lyu, “An evaluation study on log parsing and its use in log mining,” 2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), 2016, pp. 654-661.

[14] J. Zhu, S. He, J. Liu, P. He, Q. Xie, Z. Zheng, and M. R. Lyu, “Tools and benchmarks for automated log parsing,” in Proceedings of the 41st International Conference on Software Engineering (ICSE), 2019, pp. 121–130.

[15] A. Oliner and J. Stearley, “What Supercomputers Say: A Study of Five System Logs,” 37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN’07), 2007, pp. 575-584.

[16] B. Schroeder and G. A. Gibson, “Disk failures in the real world: What does an MTTF of 1,000,000 hours mean to you?” in 5th USENIX Conference on File and Storage Technologies, FAST 2007, February 13-16, 2007, San Jose, CA, USA, 2007, pp. 1–16.

[17] H. Mi, H. Wang, Y. Zhou, R. Lyu, and H. Cai, “Toward fine-grained, unsupervised, scalable performance diagnosis for production cloud computing systems,” IEEE Transactions on Parallel and Distributed Systems, vol. 24, pp. 1245–1255, 2013.

[18] W. Xu, L. Huang, A. Fox, D. A. Patterson, and M. I. Jordan, “Detecting large-scale system problems by mining console logs,” in SOSP, 2009, pp. 117–132.

[19] W. Xu, L. Huang, A. Fox, D. A. Patterson, and M. I. Jordan, “Large scale system problem detection by mining console logs,” in Proceedings of SOSP’09, 2009.

[20] W. Xu, L. Huang, and M. I. Jordan, “Experience mining Google’s production console logs.” in SLAML, 2010.

[21] Z. M. Jiang, A. E. Hassan, P. Flora, and G. Hamann, “Abstracting Execution Logs to Execution Events for Enterprise Applications (Short Paper),” 2008 The Eighth International Conference on Quality Software, 2008, pp. 181-186.

[22] H. Dai, H. Li, C. S. Chen, W. Shang, and T. Chen, “Logram: Efficient log parsing using n-Gram dictionaries,” in IEEE Transactions on Software Engineering, 2020.

[23] Q. Fu, J. Lou, Y. Wang, and J. Li, “Execution anomaly detection in distributed systems through unstructured log analysis,” 2009 Ninth IEEE International Conference on Data Mining, 2009, pp. 149-158.

[24] H. Hamooni, B. Debnath, J. Xu, H. Zhang, G. Jiang, and A. Mueen, “LogMine: Fast pattern recognition for log analytics,” in CIKM, 2016, pp. 1573–1582.

[25] S. Messaoudi, A. Panichella, D. Bianculli, L. Briand, and R. Sasnauskas, “A search-based approach for accurate identification of log message formats,” in ICPC, 2018.

[26] M. Mizutani, “Incremental mining of system log format,” in SCC, 2013, pp. 595–602.

[27] A. Makanju, A. N. Zincir-Heywood, and E. E. Milios, “A Lightweight Algorithm for Message Type Extraction in System Application Logs,” in IEEE Transactions on Knowledge and Data Engineering, vol. 24, no. 11, pp. 1921-1936, Nov. 2012.

[28] D’Souza SC, “LSTM neural network for textual n-grams,” https://doi.org/10.7287/peerj.preprints.27377v1, 2018.