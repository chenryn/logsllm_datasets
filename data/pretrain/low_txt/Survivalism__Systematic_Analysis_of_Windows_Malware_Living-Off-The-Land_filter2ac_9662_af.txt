### References

1. **MITRE ATT&CK Framework**
   - [Online]. Available: <https://attack.mitre.org/>

2. **O. Moe, “Living Off The Land Binaries and Scripts”**
   - [Online]. Available: <https://lolbas-project.github.io/>

3. **——, “Discovering The Anti-Virus Signature and Bypassing It,” 2020.**
   - [Online]. Available: <https://www.trustedsec.com/blog/discovering-the-anti-virus-signature-and-bypassing-it/>

4. **National Cyber Security Centre, “Advisory: Turla Group Exploits Iranian APT to Expand Coverage of Victims”**
   - [Online]. Available: <https://www.ncsc.gov.uk/news/turla-group-exploits-iran-apt-to-expand-coverage-of-victims>

5. **——, “APT10 Continuing to Target UK Organisations”**
   - [Online]. Available: <https://www.ncsc.gov.uk/news/apt10-continuing-target-uk-organisations>

6. **——, “Reckless Campaign: Cyber Attacks by Russian Military Intelligence Service Exposed”**
   - [Online]. Available: <https://www.ncsc.gov.uk/news/reckless-campaign-cyber-attacks-russian-military-intelligence-service-exposed>

7. **National Cybersecurity Authority, “Destructive Attack ‘DUSTMAN’ Technical Report,” 2019.**
   - [Online]. Available: <https://www.nca.gov.sa/sites/default/files/2020-01/Dustman%20Technical%20Report.pdf>

8. **R. Nolen, S. Miller, and R. Valdez, “Threat Advisory: ‘Squiblydoo’ Continues Trend of Attackers Using Native OS Tools to Live off the Land”**
   - [Online]. Available: <https://www.carbonblack.com/2016/04/28/threat-advisory-squiblydoo-continues-trend-of-attackers-using-native-os-tools-to-live-off-the-land/>

9. **Nozomi Networks, “GreyEnergy: Dissecting the Malware Backdoor – Comprehensive Reverse Engineering Analysis,” February 2019.**
   - [Online]. Available: <https://www.nozominetworks.com/downloads/US/Nozomi-Networks-GreyEnergy-Dissecting-the-Malware.pdf>

10. **Opswat Metadefender-Cloud, “Windows Anti-malware Market Share Report,” 2019.**
    - [Online]. Available: <https://metadefender.opswat.com/reports/anti-malware-market-share?date=2019-09-30>

11. **S. Pastrana and G. Suarez-Tangil, “A First Look at the Crypto-Mining Malware Ecosystem: A Decade of Unrestricted Wealth,” Proceedings of the ACM SIGCOMM Internet Measurement Conference, IMC, no. ii, pp. 73–86, 2019.**
    - [Online]. Available: <https://arxiv.org/pdf/1901.00846.pdf>

12. **J. A. Pendergrass, N. Hull, J. Clemens, S. Helble, M. Thober, K. McGill, M. Gregory, and P. Loscocco, “Runtime Detection Of Userspace Implants,” 2019.**
    - [Online]. Available: <https://www.usenix.org/system/files/sec19-pendlebury.pdf>

13. **F. Pendlebury, F. Pierazzi, R. Jordaney, J. Kinder, and L. Cavallaro, “Tesseract: Eliminating Experimental Bias in Malware Classification Across Time,” Proceedings of the 28th USENIX Security Symposium, pp. 729–746, 2019.**
    - [Online]. Available: <https://www.usenix.org/system/files/sec19-pendlebury.pdf>

14. **N. Pinkas, L. Rochberger, and M. Zatz, “Triple Threat: Emotet Deploys Trickbot To Steal Data and Spread Ryuk,” 2019.**
    - [Online]. Available: <https://www.cybereason.com/blog/triple-threat-emotet-deploys-trickbot-to-steal-data-spread-ryuk-ransomware>

15. **M. Rezaeirad, B. Farinholt, H. Dharmdasani, P. Pearce, K. Levchenko, and D. McCoy, “Schrödinger’s RAT: Profiling the Stakeholders in the Remote Trojan Access Ecosystem,” Proceedings of the 27th USENIX Security Symposium, pp. 1043–1060, 2018.**
    - [Online]. Available: <https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-rezaeirad.pdf>

16. **C. Rossow, C. J. Dietrich, C. Grier, C. Kreibich, V. Paxson, N. Pohlmann, H. Bos, and M. Van Steen, “Prudent Practices for Designing Malware Experiments: Status Quo and Outlook,” Proceedings - IEEE Symposium on Security and Privacy, pp. 65–79, 2012.**
    - [Online]. Available: <https://oaklandsok.github.io/papers/rossow2012.pdf>

17. **A. Rubin, S. Kels, and D. Hendler, “AMSI-Based Detection of Malicious PowerShell Code Using Contextual Embeddings,” 2019.**
    - [Online]. Available: <http://arxiv.org/abs/1905.09538>

18. **M. Sebastián, R. Rivera, P. Kotzias, and J. Caballero, “AVclass: A Tool for Massive Malware Labeling,” in Research in Attacks, Intrusions, and Defenses, F. Monrose, M. Dacier, G. Blanc, and J. Garcia-Alfaro, Eds. Cham: Springer International Publishing, 2016, pp. 230–253.**
    - [Online]. Available: <https://link.springer.com/chapter/10.1007/978-3-319-45909-9_14>

19. **StatCounter, “Desktop Operating System Market Share Worldwide.”**
    - [Online]. Available: <https://gs.statcounter.com/os-market-share/desktop/worldwide>

20. **Sudhakar and S. Kumar, “An Emerging Threat: Fileless Malware: A Survey and Research Challenges,” Cybersecurity, vol. 3, no. 1, pp. 1–12, 2020.**
    - [Online]. Available: <https://link.springer.com/content/pdf/10.1186/s42400-019-0043-x.pdf>

21. **V. Svajcer, “Hunting for LoLBins,” 2019.**
    - [Online]. Available: <https://blog.talosintelligence.com/2019/11/hunting-for-lolbins.html>

22. **Symantec, “Living off the Land: Turning Your Infrastructure Against You,” 2019.**
    - [Online]. Available: <https://www.symantec.com/content/dam/symantec/docs/white-papers/living-off-the-land-turning-your-infrastructure-against-you-en.pdf>

23. **D. Ugarte, D. Maiorca, F. Cara, and G. Giacinto, “PowerDrive: Accurate De-obfuscation and Analysis of PowerShell Malware,” 16th Conference on Detection of Intrusions and Malware & Vulnerability Assessment, vol. 11543 LNCS, pp. 240–259, 2019.**
    - [Online]. Available: <http://pralab.diee.unica.it/sites/default/files/dimva19-paper76-final.pdf>

24. **X. Ugarte-Pedrero, M. Graziano, and D. Balzarotti, “A Close Look at a Daily Dataset of Malware Samples,” ACM Transactions on Privacy and Security, vol. 22, no. 1, pp. 1–30, 2019.**
    - [Online]. Available: <http://s3.eurecom.fr/docs/tops19{ }dailymalware.pdf>

25. **VirusShare, “VirusShare.com.”**
    - [Online]. Available: <https://virusshare.com/hashes.4n6>
    - Note: The sample range is mostly within the period from 2015 to 2020.

26. **VX Underground, “VX Underground Samples,” 2020.**
    - [Online]. Available: <https://vx-underground.org/samples.html>

27. **Q. Wang, W. U. Hassan, D. Li, K. Jee, X. Yu, J. Rhee, Z. Chen, W. Cheng, C. A. Gunter, and H. Chen, “You Are What You Do: Hunting Stealthy Malware via Data Provenance Analysis,” Network and Distributed System Security Symposium, no. February, 2020.**
    - [Online]. Available: <https://www.ndss-symposium.org/wp-content/uploads/2020/02/24167.pdf>

28. **Q. Wang, W. U. Hassan, D. Li, K. Jee, X. Yu, K. Zou, J. Rhee, Z. Chen, W. Cheng, C. A. Gunter, and H. Chen, “You Are What You Do: Hunting Stealthy Malware via Data Provenance Analysis,” Network and Distributed System Security Symposium, no. February, 2020.**
    - [Online]. Available: <https://dx.doi.org/10.14722/ndss.2020.24167>

29. **C. Wueest and H. Anand, “Living off the Land and Fileless Attack Techniques,” Symantec, Tech. Rep., 2017.**
    - [Online]. Available: <https://www.symantec.com/content/dam/symantec/docs/security-center/white-papers/istr-living-off-the-land-and-fileless-attack-techniques-en.pdf>

30. **Yara, “Yara: Cuckoo Module,” 2019.**
    - [Online]. Available: <https://yara.readthedocs.io/en/v3.5.0/modules/cuckoo.html>

### Appendix

#### A. Dataset Characterisation

To provide a detailed understanding of the datasets we analyzed, we present their characteristics and highlight the differences between them.

**Number of Positives.** In VirusTotal, each sample is scanned by multiple antivirus (AV) engines. We define the 'Number of Positives' as the number of engines that identify a sample as malware. Figure 7 illustrates the distribution of positive matches found by various AV engines, characterizing the dataset.

**First Seen Date.** The 'first seen' field in VirusTotal reports contains the date when the malware was first uploaded to the platform. Figures 8 and 9 plot the first seen dates for each dataset, showing the temporal distribution.

#### B. Dataset Quality

Rossow et al. [60] discuss the flaws and limitations in existing malware analysis papers and suggest prudent steps to avoid biases. We adhere to the three critical assessment criteria (correctness, transparency, and realism) as closely as possible in our paper.

**Correctness.** Following the recommendation by Pendlebury et al. [57], we removed goodware to ensure reliability. This was achieved by separating elements of the Ember dataset labeled as known goodware. We did not remove samples with zero detections, as these may be evasive malware, and LotL techniques are often used for evasion.

We also removed duplicates and hashes with incomplete data, reducing our initial count of over 45,000,000 malware hashes and associated reports to a refined selection of datasets.

**Transparency.** We describe all datasets, their provenance, and characteristics in detail in Appendix A. The virtual environment used for detonating these samples is VT’s fork of the Cuckoo sandbox and similar derivatives.

**Realism.** Our aim in dataset selection is to analyze samples that represent a cross-section of modern malware. We included several well-known public malware datasets and focused on datasets we collected to provide a realistic and typical sample of the malware landscape.

#### C. Windows 10 System Preparation for AV Experimental Setup

We took specific steps to facilitate the testing of evasive malware on Windows 10 systems.

**Bypassing AMSI.** The Windows Anti-Malware Scan Interface (AMSI) is a part of the Windows operating system. Before installing an AV on each virtual system, we disabled AMSI. While various bypasses for Windows 10 have been patched, an AMSI bypass exploit is available at the time of writing [10].

The purpose of disabling AMSI is to isolate the detection and prevention capabilities of various engines against LotL binaries.

**Enabling Unauthenticated Share Access.** By default in Windows 10, guest access to shares is disabled. To perform these bypasses, this feature was enabled [34]. We accomplished this by running a command as a user and editing group policy to enable insecure guest logons to an SMB share. While unauthenticated access to an SMB share is not necessary for all tests, it was required for those involving staging from an SMB server. Alternatively, SMB Server login details can be cached to access them without editing registry keys.

#### D. LotL Binary-Based Bypass Techniques

**Ftp.exe.** Ftp.exe can execute commands from a stored text file containing instructions (-s:file.txt parameter). When the file is executed, a simple PowerShell reverse shell can be spawned. For more resilient AV engines, Powercat [18] was invoked to achieve a UDP reverse shell. Additionally, for two engines, Invoke-Obfuscation [6] was used to obfuscate the contents of Powercat for evasion.

**Mshta.exe.** Mshta.exe allows the execution of scripts contained within .hta files. We found it sufficient to use Mshta to load the .hta file from a network share, which would call a PowerShell script from VBScript and then execute a reverse shell to evade AV. Many AV programs could identify this payload file as malicious, but when obfuscation was applied (Spookflare [20]), detection was avoided.

**Wmic.exe.** Wmic.exe is a native binary on Windows systems that can, among other malicious uses, execute other binaries. For most AVs, evasion is achieved by invoking a simple PowerShell reverse shell from Wmic.exe. For other AVs, evasion was achieved by executing a shell over UDP using Powercat instead of TCP. Further obfuscation was necessary to bypass AMSI and Windows Defender, for which Invoke-Obfuscation [6] was used.

**Rundll32.exe.** We used Koadic [17], a post-exploitation tool, to test the viability and detectability of Rundll32.exe. Koadic provides several command-line parameters to provide to the Rundll32.exe binary. Koadic's evasive exploitation leverages the fact that Rundll32.exe, when provided with the ‘-javascript’ parameter, allows the execution of JavaScript code. Koadic is sufficient to achieve a bypass for most AV engines; for others, JS-Rat-Py [22], a similar remote access tool, suffices.

Some AV engines could identify the execution of JavaScript by Rundll32.exe as malicious, spawning a network connection. To bypass these, we generated a malicious .dll with MSFvenom, or in particularly evasive cases, we generated and compiled a reverse shell .dll from C++ code.

**Regsvr32.exe.** Regsvr32.exe can be used to execute remote .sct files in the squiblydoo [52] attack. This attack enables the execution of remotely hosted .sct files, containing JavaScript code that can execute arbitrary commands such as creating ActiveXObjects. For our repeated experiments, as the squiblydoo attack has been patched by Microsoft, we used a bypass described by Oddvar Moe [47].

For a number of the bypasses, Koadic was used. This tool allows a reverse shell to be executed in the form of JavaScript code. Where Koadic was detected, JS-Rat-Py’s Regsvr32 component was not. For others, we used custom code within an .sct file.

**Bitsadmin.exe.** Bitsadmin.exe was used to create Background Intelligent Transfer Service jobs. It is typically used for transferring files between different machines but has undocumented functionality allowing the execution of binaries or arbitrary commands. It can execute malicious files and bypass application whitelisting.

Bitsadmin.exe was used to create a PowerShell reverse shell by creating a job and resuming it. This PowerShell reverse shell was spawned by either calling PowerShell directly or performing this via several layers of obfuscation using an .hta file. This .hta file calls PowerShell via a Visual Basic script within that .hta file called by Mshta.exe.