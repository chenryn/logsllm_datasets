# Systematic Detection of Capability Leaks in Stock Android Smartphones

**Authors:**
- Michael C. Grace
- Yajin Zhou
- Zhi Wang
- Xuxian Jiang

**Conference:**
- NDSS 2012, February 7th, 2012, San Diego

## Abstract

This paper presents a systematic approach to detecting capability leaks in stock Android smartphones. The research aims to identify and analyze explicit and implicit capability leaks, which can pose significant security and privacy risks. We introduce Woodpecker, a tool designed to detect these leaks by analyzing the control-flow graph and pruning infeasible paths.

## Introduction

### Phones and Computers
> "I have always wished that my computer would be as easy to use as my telephone. My wish has come true. I no longer know how to use my telephone."
> – Bjarne Stroustrup (designer of C++)

### Smartphones: The PCs of the Future?
- Smartphone shipments increased by 42% between Q3 2010 and Q3 2011 (Gartner, 11/15/2011).
- More smartphones are being shipped than personal computers (IDC, 2/7/2011).
- In new markets, the first computer for many users is a smartphone.

### Smartphone ≠ Handheld PC
- Unique capabilities specific to the form factor.
- Multiple sensors enable context-aware applications.
- Always-on, always-connected nature.
- Resource-constrained environment.
- Different vendor relationships and priorities.

## Related Work

### Problems with Permissions
- Kirin [Enck et al., CCS '09], Soundcomber [Schlegel et al., NDSS '11], Stowaway [Felt et al., CCS '11], Guess Who’s Texting You [Schrilwieser et al., NDSS '12].

### Information Leak Detection
- PiOS [Egele et al., NDSS '11], TaintDroid [Enck et al., OSDI '10].

### Phone Defenses
- MockDroid [Beresford et al., HotMobile '11], TISSA [Zhou et al., TRUST '11], AppFence [Hornyack et al., CCS '11], Permission Re-Delegation [Felt et al., USENIX Security '11], QUIRE [Dietz et al., USENIX Security '11], XManDroid [Bugiel et al., NDSS '12], MoCFI [Davi et al., NDSS '12].

### Market Issues
- DroidMOSS [Zhou et al., CODASPY '12], DroidRanger [Zhou et al., NDSS '12].

## Firmware and Fragmentation

- A conspicuous gap in the body of work.
- Unlike desktops or other smartphone platforms.
- Research Goal: Determine the impact of firmware customizations on security and privacy.

## Android Capabilities

- The platform defines some APIs.
- APIs may require capabilities (permissions).
- Applications can define APIs in the same way.
- What happens when an application defines a new API based on a restricted old one? This is up to the author.

## Capability Leaks

- **Capability Leak:** A situation where an app can gain access to a restricted API without requesting proper permission.
- **Explicit Capability Leak:** Broadening access to a restricted API by exposing it via another API.
- **Implicit Capability Leak:** Inheriting permissions from other applications.

### Explicit Capability Leaks
- Outside Caller (no permissions) → Leaking API (needs no permissions, has permission P) → Restricted API (needs permission P).

### Detecting Capability Leaks
- The Android SDK provides no tools for this.
- Function composition: Capability leak: g(x) = f(x) + some other stuff.
- Intuitive algorithm:
  1. Find interesting (dangerous) APIs (f(x)).
  2. Find new API definitions (g(x)).
  3. Link them!

## System Overview

- **Woodpecker:**
  - Preloaded Apps
  - Framework Classes
  - Possible Path Identification
  - Infeasible Path Pruning
  - Leak Report
  - Android Framework Knowledge

### Possible Path Identification
1. Construct a control-flow graph.
2. Find all paths from an IPC entry point to an API of interest.

### Challenges
- Object references: Use class hierarchy to conservatively resolve references.
- Extensive use of callbacks: Use framework knowledge to stitch together callbacks.

### Infeasible Path Pruning
- Many potential paths exist, but most are either impossible or uninteresting.
- Branch conditions need an understanding of program data-flow.
- Explicit permission checks are "infeasible paths."
- Our approach: Symbolic Path Simulation.

### Symbolic Path Simulation
- Example: X = 0, If X = 0 Then X ≠ 0 Else.

## Implementation

- Based on the baksmali decompiler (1.2.6).
- Covers 13 permissions, controlling:
  - Phone information
  - Location API
  - Phone dialing
  - Sending text messages
  - Camera/microphone
  - Rebooting/shutting down the device
  - Installing/removing apps
  - Factory reset

## Evaluation

### Explicit Capability Leaks Found
- Coarse Location
- Fine Location
- Call Phone
- Call Privileged
- Camera
- Delete Packages
- Install Packages
- Master Clear
- Read Phone State
- Reboot
- Record Audio
- Send SMS
- Shutdown

### Implicit Capability Leaks Found
- Coarse Location
- Fine Location
- Call Phone
- Call Privileged
- Camera
- Delete Packages
- Install Packages
- Master Clear
- Read Phone State
- Reboot
- Record Audio
- Send SMS
- Shutdown

### Performance Measurement
- Vendor: HTC, Motorola, Samsung, Google
- Model: Legend, EVO 4G, Wildfire S, DROID, DROID X, Epic 4G, Nexus One, Nexus S
- Time: 3366.63s, 4175.03s, 3894.37s, 2138.38s, 3311.94s, 3732.56s, 2059.47s, 1815.71s
- Number of Apps: 125, 160, 144, 76, 161, 138, 76, 72

## Discussion

### Accuracy
- False negatives: Native code, undocumented extensions.
- False positives: Conservative analysis.

### Threads and Time
- Instruction interleaving, shared state.
- Example: Callback handling.

## Conclusions

- Capability leaks present a tangible threat to security and privacy on existing Android smartphones.
- We present Woodpecker, a system to detect these capability leaks.

## Thank You!

---

This optimized version of the text is more structured, clear, and professional, making it easier to read and understand.