# Title: PenJ1939: An Interactive Framework for Design and Dissemination of Exploits for Commercial Vehicles

## Authors:
- Subhojeet Mukherjee
- Noah Cain
- Jacob Walker
- David White
- Indrajit Ray
- Indrakshi Ray

### Affiliations:
- Colorado State University
- PI: [EMAIL]

## Abstract
Vehicle security has recently garnered significant attention from both the black hat and white hat communities. Research in this area has led to the development of various attacks, some of which have potentially severe consequences. Vehicle vendors and original equipment manufacturers (OEMs) are now faced with the additional responsibility of ensuring in-vehicular communication security. In this poster paper, we present a framework that allows individuals to write, test, and store exploit scripts, which can then be executed by interested parties on in-vehicular networks of commercial vehicles such as trucks and buses.

## Keywords
CAN, J1939, Exploit, Script, Development, Interactive, Download

## 1. Introduction
In the 1970s, vehicles were driven purely through physical and mechanical interactions. Today, much of the human-mechanical interaction is mediated through embedded devices known as Electronic Control Units (ECUs). These intelligent devices ensure smooth driving, safety, and comfort. However, the computerization of vehicles has introduced new vulnerabilities, with hackers and security professionals demonstrating that embedded networks in passenger cars can be compromised to cause large-scale damage. These networks primarily use the Controller Area Network (CAN) protocol for message exchange. While CAN ensures reliable message delivery, it does not specify how messages are utilized by ECUs. Passenger vehicles often use proprietary specifications, whereas commercial vehicles use a common set of standards (SAE J1939) specified by SAE International. This makes commercial vehicles more susceptible to attacks targeting the widely used SAE J1939 protocol stack.

## 2. Background
The CAN protocol [4] is an arbitration-based system that facilitates highly reliable communication over a multi-master broadcast serial bus. The SAE J1939 [1] protocol runs on top of CAN, utilizing its physical communication standards. The J1939 protocol stack is organized based on the seven-layer OSI networking model, with SAE standards currently specified for four of the seven layers. A J1939 message is composed at the Application layer and transmitted as a sequence of bits at the Physical/CAN layer after being bundled into fixed-size Protocol Data Units (PDUs). A typical J1939 PDU consists of a 29-bit Identifier Field and a 64-bit Data Field. Each J1939 message is uniquely identified using a Parameter Group Number (PGN). For example, messages related to torque or speed control correspond to PGN 0 (000016). Information required to generate a PGN is embedded in the Identifier Field, while vehicle-specific parameters are embedded within the Data Field. When an ECU receives a J1939 message, it first obtains the PGN from the Identifier Field, then refers to the SAE standards [1] to interpret the contents of the Data Field using Suspect Parameter Numbers (SPNs).

## 3. PenJ1939 Features
PenJ1939 is designed as an interactive framework for professionals to design and access existing attacks on J1939-based networks. It integrates features to ease the process of developing and testing attacks. Key features include:

- **Attack Scripting**: PenJ1939 allows attacks to be scripted in Python. We provide a development interface for writing Python code, supporting threaded executions and parallel development. Users can upload previously written and tested scripts to the PenJ1939 database.
- **Script Testing**: Scripts are executed on embedded controllers connected to a physical testbed. Test outputs and associated errors or warnings are presented to aid development. Users need access to dedicated node controllers to test their scripts.
- **Library Access**: Developers have access to previously developed modules to avoid redundancy and speed up exploit writing. All modules are stored in the Module database.
- **Traffic Sniffing**: Restricted access to the PenJ1939 experiment testbed is provided via a TestBed Manager. Users can test scripts and observe outputs in hexadecimal format, which can be interpreted in real-time using an inbuilt J1939 interpreter.
- **Script Verification**: Scripts are verified before being committed to the database. While some scripts may not be supported for execution, they are archived, and users are notified. Verification ensures error-free execution but does not guarantee the success of the attack.
- **Script Annotation**: Developers are encouraged to annotate their scripts with metadata, including documentation, tags, and pre-requisites.
- **Regex-based Filtering**: PenJ1939 supports regular expression-based filtering for traffic, messages, and script content.
- **Downloading Scripts**: Users can download scripts by browsing directories or executing search queries. They can verify script execution and access information about the developer.

## 4. Architecture and Component Interaction
Figure 2 illustrates the interactions between the architectural components of PenJ1939. The Login-Manager verifies user credentials and signs up new users. Both written and uploaded scripts are sent to the TestBed Manager for final verification. The status of the script is updated accordingly. Once a script is ready for upload, the Scripting-Manager prompts the user to annotate the script and modules. The DB-Manager executes regular expression queries and returns relevant scripts and modules. Users can select and use modules from the module browser. The TestBed-Manager provides node handles for script testing. The testbed is modeled on previous work [3], with three ECUs (Engine Controller, Retarded, Brake Controller) and two BeagleBone Black devices acting as Node Controllers.

## 5. Current Implementation and Future Work
We have started implementing PenJ1939. The testbed was set up as part of previous research, and all managers and associated databases have been established. A J1939 decoder from our previous work [3] was integrated into the PenJ1939 system to design the J1939-Interpreter. We are currently developing the web-based front-ends.

In the future, we aim to enhance the security of the system by integrating proper authentication and authorization mechanisms, allowing security professionals to alert specific OEMs about security issues. Additional features like authorized code editing and patch management will be added to make PenJ1939 more usable.

## Acknowledgment
This work was supported in part by NSF under award numbers CNS 1619641 and CNS 1715458.

## References
[1] 2013. Serial Control and Communications Heavy Duty Vehicle Network - Top Level Document. (2013). h(cid:138)p://standards.sae.org/j1939 201308

[2] C. Miller and C. Valasek. 2014. A Survey of Remote Automotive Attack Surfaces. Black Hat USA 2014 (2014).

[3] J. Daily, R. Gamble, S. Mo(cid:129)(cid:138), C. Raines, P. Harris, J. Miran, I. Ray, S. Mukherjee, H. Shirazi, and J. Johnson. 2016. Towards a Cyber Assurance Testbed for Heavy Vehicle Electronic Controls. SAE International Journal of Commercial Vehicles 9, 2 (2016), 339–349.

[4] R. Bosch. 1991. CAN specification version 2.0. Robert Bosch GmbH, Postfach 300240 (1991).

[5] S. Mukherjee, H. Shirazi, I. Ray, J. Daily, and R. Gamble. 2016. Practical DoS Attacks on Embedded Networks in Commercial Vehicles. In Proceedings of the 12th International Conference on Information Systems Security. 23–42.

[6] Y. Burakova, B. Hass, L. Millar, A. Weimerskirch. 2016. Truck Hacking: An Experimental Analysis of the SAE J1939 Standard. In Proceedings of the 10th USENIX Conference on Offensive Technologies. 211–220.