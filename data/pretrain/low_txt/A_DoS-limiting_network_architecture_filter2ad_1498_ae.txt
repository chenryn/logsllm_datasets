### Processing Overhead of Different Types of Packets

| Packet Type | Processing Time (ns) |
|-------------|----------------------|
| Regular w/ Entry | 33 ns |
| Request | 439 ns |
| Renewal w/ Entry | 439 ns |
| Regular w/o Entry | 1486 ns |
| Renewal w/o Entry | 1821 ns |

**Table 1: Processing overhead of different types of packets.**

### Policy for Managing Misbehaving Senders
The policy described in Section 3.3 allows a destination to initially grant all requests but stops renewing capabilities for senders that misbehave by flooding traffic. The destination grants an initial capability of 32KB over 10 seconds, allowing an attacker to flood at a rate of 1Mb/s for only 32KB until the capability expires. The destination does not renew capabilities due to the attack.

**Figure 11** illustrates how the transfer time changes for TVA with this policy as an attack commences. Two types of attacks are considered:
- **High Intensity Attack:** All 100 attackers attack simultaneously.
- **Low Intensity Attack:** The 100 attackers divide into 10 groups, each flooding one after the other.

Both attacks are effective for less than 5 seconds, causing temporary congestion and increasing the transfer time of some connections by about 2 seconds.

### Comparison with SIFF
**Figure 11** also shows the results for SIFF under the same attacks. In SIFF, the expiration of a capability depends on changing a router secret, even if the destination determines that the sender is misbehaving. This suggests the need for rapid secret turnover, but practical limitations exist, such as the life time of a router secret being longer than a small multiple of TCP timeouts.

In our experiment, we assume SIFF can expire its capabilities every three seconds, while TVA expires router secrets every 128 seconds. Both attacks have a more pronounced effect on SIFF:
- **High Intensity Attack:** Increases the transfer time by 4 seconds.
- **Low Intensity Attack:** Lasts for 30 seconds, with legitimate requests blocked until the next transition, causing the transfer time to jump to more than three seconds.

### Implementation
We prototyped TVA using the Linux netfilter framework [19] on commodity hardware. The host portion of the protocol was implemented as a user-space proxy to allow legacy applications to run without modification. Router capability processing was implemented as a kernel module using AES-hash for pre-capabilities and SHA1 for capabilities [17].

The purpose of this effort was to check the completeness of our design and understand the processing costs of capabilities. We did not consider the processing costs of fair queuing. Our experimental setup used a dual-processor 3.2GHz Pentium Xeon machine running a Linux 2.6.8 Kernel with the native Linux forwarding module. We generated different types of packets using a kernel packet generator and recorded the average number of instruction cycles for the router to process each type of packet, averaging the results over five experiments.

**Table 1** shows the results of this experiment, with cycles converted to time. The most common type of packet in normal operation is a regular packet with an entry at a router, which has the lowest processing overhead of 33 ns. The processing overhead for validating a capability for a packet without a cached entry is about 1486 ns, involving two hash functions. The cost to process a request packet is lower and similar to the cost to process a renewal packet with a cached entry, both involving a pre-capability hash computation. The most computation-intensive operation is forwarding a renewal packet without a cached entry, requiring three hash functions and costing 1821 ns.

### Peak Output Rate of Different Types of Packets
**Figure 12** shows the peak output rate of different types of packets. The output rate increases with the input rate and reaches a peak of 160 to 280Kpps, depending on the type of packet. This compares well with the peak lossless rate for vanilla IP packets of about 280Kpps. These rates are dominated by per-packet interrupt handling and could be increased markedly with a polling device driver, as demonstrated by Click [13]. Removing the 3.5us interrupt penalty would improve the output rate to 500-1400Kpps, equivalent to 240 to 670Mbps with minimum size packets (of 40 TCP/IP bytes plus 20 capability bytes).

An attacker might attempt to overwhelm the CPU by flooding spoofed short renewal packets, leading to packet loss of good traffic if processed in the order received. Lazy Receiver Processing (LRP) [7] can be used to queue incoming packets based on their required computation per input bit, ensuring normal traffic is processed at full speed.

### Security Analysis
The security of TVA is based on the inability of an attacker to obtain capabilities for routers along the path to a destination. We analyze how TVA counters various threats:
- **Breaking Hashing Scheme:** Standard cryptographic functions with sufficient key material and frequent key changes make breaking keys practically impossible.
- **Observing Pre-Capabilities:** A packet format that does not expose pre-capabilities in the first 8 bytes of the IP packet and treating packets with IP source routes as legacy traffic.
- **Stealing Capabilities:** Capabilities are bound to specific source, destination, and router, limiting the attacker's ability to use stolen capabilities.
- **Masquerading a Receiver:** Defense in depth provided by the design, limiting the impact of compromised routers.
- **Spoofing Authorized Traffic:** Limited impact if per-destination queuing is used, which is TVA’s default.
- **Attacks on Capability Routers:** Computation and state requirements are bounded by design, allowing provisioning for the worst case.

### Deployment
TVA requires both routers and hosts to be upgraded, but it does not require a flag day. Incremental deployment can proceed organization by organization. Routers can be upgraded incrementally at trust boundaries and locations of congestion, using inline packet processing boxes adjacent to legacy routers. Hosts can be upgraded with proxies at the edges of customer networks, similar to NAT boxes or firewalls. Legacy hosts can communicate unchanged during this deployment, with DNS signaling which hosts can handle capabilities.

### Conclusion
We have presented and evaluated TVA, a network architecture that limits denial of service attacks, allowing two hosts to communicate effectively despite a large number of attackers. Our design is based on capabilities that enable destinations to authorize senders, combined with routers that preferentially forward authorized traffic. Our simulation results show that even substantial (10x) floods of legacy traffic, request traffic, and other authorized traffic have little or limited impact on the performance of legitimate users. We have implemented a prototype in the Linux kernel, demonstrating that our design can run at gigabit speeds on commodity PCs.

### Acknowledgements
We thank Ratul Mahajan for help with the pushback approach, Ersin Uzun for pointing out the attack on per-source queuing, and the anonymous SIGCOMM reviewers for their comments. This work was supported in part by the NSF (Grant CNS-0430304).

### References
[1] D. Andersen. Mayday: Distributed Filtering for Internet Services. In 3rd Usenix USITS, 2003.
[2] T. Anderson, T. Roscoe, and D. Wetherall. Preventing Internet Denial of Service with Capabilities. In Proc. HotNets-II, Nov. 2003.
[3] K. Argyraki and D. Cheriton. Active Internet Traffic Filtering: Real-Time Response to Denial-of-Service Attacks. In USENIX 2005, 2005.
[4] DDoS attacks still pose threat to Internet. BizReport, 11/4/03.
[5] Extortion via DDoS on the rise. Network World, 5/16/05.
[6] A. Demers, S. Keshav, and S. Shenker. Analysis and Simulation of a Fair Queueing Algorithm. In ACM SIGCOMM, 1989.
[7] P. Druschel and G. Banga. Lazy Receiver Processing (LRP): A Network Subsystem Architecture for Server Systems. In 2nd OSDI, 1996.
[8] P. Ferguson and D. Senie. Network Ingress Filtering: Defeating Denial of Service Attacks that Employ IP Source Address Spoofing. Internet RFC 2827, 2000.
[9] M. Handley and A. Greenhalgh. Steps Towards a DoS-Resistant Internet Architecture. In ACM SIGCOMM Workshop on Future Directions in Network Architecture (FDNA), 2004.
[10] J. Ioannidis and S. Bellovin. Implementing Pushback: Router-Based Defense Against DoS Attacks. In NDSS, 2002.
[11] S. Kandula, D. Katabi, M. Jacob, and A. Berger. Botz-4-sale: Surviving organized DDoS attacks that mimic flash crowds. In 2nd NSDI, May 2005.
[12] A. Keromytis, V. Misra, and D. Rubenstein. SOS: Secure Overlay Services. In ACM SIGCOMM, 2002.
[13] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F. Kaashoek. The Click Modular Router. ACM Transactions on Computer Systems, 18(3):263–297, Aug. 2000.
[14] K. Lakshminarayanan, D. Adkins, A. Perrig, and I. Stoica. Taming IP Packet Flooding Attacks. In Proc. HotNets-II, 2003.
[15] S. Machiraju, M. Seshadri, and I. Stoica. A Scalable and Robust Solution for Bandwidth Allocation. In IWQoS’02, 2002.
[16] R. Mahajan, S. Bellovin, S. Floyd, J. Ioannidis, V. Paxson, and S. Shenker. Controlling High Bandwidth Aggregates in the Network. Computer Communications Review, 32(3), July 2002.
[17] A. J. Menezes, P. C. van Oorschot, and S. A. Vanstone. Handbook of applied cryptography, chapter 9. CRC Pres, 1997.
[18] D. Moore, G. Voelker, and S. Savage. Inferring Internet Denial of Service Activity. In Usenix Security Symposium 2001, 2001.
[19] http://www.netfilter.org/.
[20] S. Savage, D. Wetherall, A. Karlin, and T. Anderson. Practical Network Support for IP Traceback. In ACM SIGCOMM, 2000.
[21] A. Snoeren, C. Partridge, L. Sanchez, C. Jones, F. Tchakountio, S. Kent, and W. Strayer. Hash-Based IP Traceback. In ACM SIGCOMM, 2001.
[22] D. Song and A. Perrig. Advance and Authenticated Marking Schemes for IP Traceback. In Proc. IEEE Infocom, 2001.
[23] I. Stoica, S. Shenker, and H. Zhang. Core-Stateless Fair Queueing: Achieving Approximately Fair Bandwidth Allocations in High Speed Networks. In ACM SIGCOMM, 1998.
[24] A. Yaar, A. Perrig, and D. Song. Pi: A Path Identification Mechanism to Defend Against DDoS Attacks. In IEEE Symposium on Security and Privacy, 2003.
[25] A. Yaar, A. Perrig, and D. Song. SIFF: A Stateless Internet Flow Filter to Mitigate DDoS Flooding Attacks. In IEEE Symposium on Security and Privacy, 2004.