# Optimized Text

## Introduction
Figures 17 and 18 illustrate the performance of TFRC and TCP(1/8) under different loss patterns. The first scenario (Figure 17) is designed to highlight the best performance of TFRC, while the second scenario (Figure 18) is intended to show its worst performance.

### Figure 17: Best Performance of TFRC
**Scenario Description:**
- **Loss Pattern:** A repeating pattern of three losses after 50 packet arrivals, followed by three more losses after 400 packet arrivals.
- **Graph Details:**
  - **Solid Line:** Sending rate averaged over 0.2-second intervals.
  - **Dashed Line:** Sending rate averaged over one-second intervals.
  - **Bottom Markers:** Indicate each packet drop.

**Observations:**
- TFRC's mechanism of averaging the loss rate over roughly six successive loss intervals allows it to maintain a steady estimation of the packet loss rate, even with this bursty loss pattern.
- As shown in Figure 17, TFRC achieves smoother transmission rates and slightly higher throughput compared to TCP(1/8).

### Figure 18: Worst Performance of TFRC
**Scenario Description:**
- **Loss Pattern:** A repeating pattern of a six-second low-congestion phase where every 200th packet is dropped, followed by a one-second heavy-congestion phase where every fourth packet is dropped.
- **Graph Details:**
  - **Solid Line:** Sending rate averaged over 0.2-second intervals.
  - **Dashed Line:** Sending rate averaged over one-second intervals.
  - **Bottom Markers:** Indicate each packet drop.

**Observations:**
- The heavy-congestion phase, lasting just long enough to include six loss intervals, causes TFRC to lose all memory of the earlier low-congestion period.
- The low-congestion phase, which includes only three or four loss intervals, does not fully supplant the memory of the heavy-congestion phase.
- As a result, TFRC performs considerably worse than TCP(1/8) and TCP(1/2) in terms of both smoothness and throughput.

### Comparison with Other Algorithms
**Figure 19: IIAD and SQRT with Mildly Bursty Loss Pattern**
- **IIAD:** Reduces its window additively and increases it slowly when bandwidth becomes available, achieving smoothness at the cost of throughput.
- **SQRT:** Provides a balance between smoothness and throughput.

### Conclusion
The static notion of throughput under a steady-state loss rate is insufficient for dynamic Internet conditions. The evaluation of various SlowCC algorithms, including TFRC, AIMD-based mechanisms, binomial algorithms, and RAP, reveals that most are safe for deployment. However, slowly-responsive algorithms, while providing smoother transmission rates, lose throughput to faster ones like TCP under dynamic network conditions. This does not detract from their deployability as they do not reduce the throughput of existing TCP connections.

### References
[1] ALLMAN, M., BALAKRISHNAN, H., AND FLOYD, S. Enhancing TCP’s Loss Recovery Using Limited Transmit. Internet Engineering Task Force, January 2001. RFC 3042.
[2] BANSAL, D., AND BALAKRISHNAN, H. Binomial Congestion Control Algorithms. In Proceedings of the Conference on Computer Communications (IEEE Infocom) (Anchorage, AK, April 2001), pp. 631–640.
[3] CHIU, D.-M., AND JAIN, R. Analysis of the Increase and Decrease Algorithms for Congestion Avoidance in Computer Networks. Computer Networks and ISDN Systems 17 (1989), 1–14.
[4] FLOYD, S. Congestion Control Principles. Internet Engineering Task Force, September 2000. RFC 2914.
[5] FLOYD, S., AND FALL, K. Promoting the Use of End-to-End Congestion Control in the Internet. IEEE/ACM Trans. on Networking 7, 4 (Aug. 1999), 458–472.
[6] FLOYD, S., HANDLEY, M., PADHYE, J., AND WIDMER, J. Equation-Based Congestion Control for Unicast Applications. In SIGCOMM Symposium on Communications Architectures and Protocols (Stockholm, Sweden, August 2000), pp. 43–56.
[7] FLOYD, S., HANDLEY, M., PADHYE, J., AND WIDMER, J. Equation-Based Congestion Control for Unicast Applications: The Extended Version. Tech. Rep. TR-00-03, International Computer Science Institute, March 2000. Available from http://www.aciri.org/tfrc/.
[8] FLOYD, S. AND HANDLEY, M. AND PADHYE, J. A Comparison of Equation-Based and AIMD Congestion Control, May 2000. Available from http://www.aciri.org/tfrc/.
[9] HANDLEY, M., PADHYE, J., FLOYD, S., AND WIDMER, J. TCP Friendly Rate Control (TFRC): Protocol Specification, May 2001. draft-ietf-tsvwg-tfrc-02.txt, Internet-Draft, work-in-progress.
[10] JACOBSON, V. Congestion Avoidance and Control. In SIGCOMM Symposium on Communications Architectures and Protocols (Stanford, CA, Aug. 1988), pp. 314–329. An updated version is available from ftp://ftp.ee.lbl.gov/papers/congavoid.ps.Z.
[11] MAHDAVI, J., AND FLOYD, S. TCP-Friendly Unicast Rate-Based Flow Control. Available from http://www.psc.edu/networking/papers/tcp_friendly.html, January 1997.
[12] ns-2 Network Simulator. http://www.isi.edu/nsnam/ns/, 2001.
[13] OTT, T., KEMPERMAN, J., AND MATHIS, M. The Stationary Distribution of Ideal TCP Congestion Avoidance. In DIMACS Workshop on Performance of Realtime Applications on the Internet (November 1996).
[14] PADHYE, J., FIROIU, V., TOWSLEY, D., AND KUROSE, J. Modeling TCP Throughput: A Simple Model and its Empirical Validation. In SIGCOMM Symposium on Communications Architectures and Protocols (Vancouver, Canada, Aug. 1998), pp. 303–314.
[15] RAMAKRISHNAN, K., AND FLOYD, S. A Proposal to Add Explicit Congestion Notification (ECN) to IP. Internet Engineering Task Force, Jan 1999. RFC 2481.
[16] REJAIE, R., HANDLEY, M., AND ESTRIN, D. RAP: An End-to-end Rate-based Congestion Control Mechanism for Realtime Streams in the Internet. In Proceedings of the Conference on Computer Communications (IEEE Infocom) (New York, NY, 1999), pp. 1337–1345.
[17] RHEE, I., OZDEMIR, V., AND YI, Y. TEAR: TCP Emulation at Receivers—Flow Control for Multimedia Streaming. Tech. rep., NCSU, April 2000. Available from http://www.csc.ncsu.edu/faculty/rhee/export/tear_page/.
[18] The TCP-Friendly Web Page. http://www.psc.edu/networking/tcp_friendly.html.
[19] YANG, Y., KIM, M., AND LAM, S. Transient Behaviors of TCP-friendly Congestion Control Protocols. In Proceedings of the Conference on Computer Communications (IEEE Infocom) (Anchorage, AK, April 2001), pp. 1716–1725.
[20] YANG, Y., AND LAM, S. General AIMD Congestion Control. Tech. Rep. TR-2000-09, University of Texas at Austin, May 2000. Available from http://www.cs.utexas.edu/users/lam/NRL/TechReports/.

### Appendix: Modeling the Role of Timeouts
TCP's retransmit timeouts are a key component of congestion control, and the fairness of SlowCC mechanisms relies on their ability to account for these timeouts. The exponential backoff of TCP's retransmit timers can be viewed as an extension of the AIMD model to environments with sending rates less than one packet per RTT.

**Figure 20: Throughput Equations with and without Timeouts**
- **Reno TCP (Dashed Line):** Shows the throughput equation considering retransmit timeouts.
- **Pure AIMD (Solid Line):** Shows the throughput equation for a pure AIMD scheme without timeouts.
- **AIMD with Timeouts (Short Dashed Line):** Provides an upper bound for the analytic behavior of TCP, while the Reno TCP line gives a lower bound.

**Modeling Transmission:**
- For a steady-state packet drop rate \( P = \frac{\lambda}{\lambda - 1} \), the sender sends \(\lambda - 1\) packets over \(2^{\lambda - 1} - 1\) round-trip times, with all but the last packet dropped.
- This results in a steady-state sending rate of:
  \[
  \frac{2}{1 - P}
  \]
- For example, with \( P = \frac{1}{2} \), \(\lambda = 1\), and the sender sends two packets every three round-trip times, resulting in a steady-state sending rate of \(\frac{2}{3}\) packets/RTT.

This analysis is valid for packet drop rates of 50% or more, while the "pure AIMD" analysis applies to packet drop rates up to 33%. The "AIMD with timeouts" line provides an upper bound, and the "Reno TCP" line provides a lower bound for the behavior of TCPs with Selective Acknowledgements, Limited Transmit, and ECN.