# Out of Sight, Out of Mind: Detecting Orphaned Web Pages at Internet-Scale

## Authors
- Stijn Pletinckx, TU Delft, PI:EMAIL
- Kevin Borgolte, Ruhr University Bochum, PI:EMAIL
- Tobias Fiebig, TU Delft, PI:EMAIL

## Abstract
Security misconfigurations and neglected updates often leave systems vulnerable. In the context of websites, forgotten pages‚Äîthose left online after their purpose has been served and never updated thereafter‚Äîare a common issue. This paper introduces a novel methodology to detect such orphaned web pages. By combining historical data from the Internet Archive with active measurements, we identify pages that are no longer reachable via the site's index page but remain accessible through their specific URLs. We demonstrate the efficacy of our approach by applying it to a sample of 100,000 domains from the Tranco Top 1M, identifying 1,953 orphaned pages across 907 unique domains, some of which are 20 years old.

Analyzing the security posture of these orphaned pages, we find that they are significantly more likely to be vulnerable to cross-site scripting (XSS) and SQL injection (SQLi) vulnerabilities compared to maintained pages. Specifically, orphaned pages are almost ten times more likely to suffer from XSS (19.3%) than maintained pages (2.0%), and maintained pages on websites with some orphans are almost three times as vulnerable (5.9%). For SQLi, maintained pages on websites with orphans are almost as vulnerable (9.5%) as orphaned pages (10.8%), and both are significantly more vulnerable than other maintained pages (2.7%).

We share an open-source implementation of our methodology to enable the reproduction and application of our results in practice.

### CCS Concepts
- Security and privacy ‚Üí Web application security

### Keywords
Orphaned resources, web security, measurement

### ACM Reference Format
Stijn Pletinckx, Kevin Borgolte, and Tobias Fiebig. 2021. Out of Sight, Out of Mind: Detecting Orphaned Web Pages at Internet-Scale. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15‚Äì19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3460120.3485369

## 1. Introduction
The World Wide Web is an ever-evolving landscape. Maintaining a website involves regular updates to ensure it remains free of bugs and vulnerabilities. However, this is a cumbersome task that is rarely fully achieved [23]. Common causes include delayed or ignored critical security updates [24] and other security misconfigurations, often rooted in human error [12, 32].

A recent example of a security misconfiguration leading to a compromise is Deloitte‚Äôs ‚ÄúTest your Hacker IQ‚Äù campaign [7]. The promotional website for this 2015 campaign remained online long after the campaign ended. In November 2020, an IT consultant discovered the old domain and retrieved the database credentials.

This example highlights how administrators can lose track of their website's state, leading to old, unmaintained domains exposing data for years. While techniques like tracking certificate transparency logs and using passive DNS traces can identify abandoned domains, they do not detect orphaned URLs within a single domain. This paper aims to address this blind spot by developing a methodology to identify orphaned URLs at scale.

We define orphaned pages in terms of who knows about them (administrators vs. the public), leading to four quadrants (Figure 1). Most websites have pages intended for and known to the public. Some pages, however, are not known to the public, such as administrative interfaces and internal pages. Administrators should be aware of all types of pages, but they may become unaware, leading to orphaned pages. These pages eventually become unmaintained and may not receive necessary security updates. Our focus is on Quadrant 1, where pages were once intended for public access but have since been forgotten by administrators.

One way a page can become orphaned is through misconfiguration during removal. Proper removal requires removing the page from the webserver and ensuring no other page links to it. If only the latter step is performed, the page appears removed but remains accessible via its URL. We classify these as "orphaned" pages (Section 2).

In this paper, we develop a new methodology to detect orphaned web pages. We use archived data to compare the current sitemap of a domain against its historic versions, extracting unlisted pages that are still accessible. We further validate their unmaintained status through fingerprint comparisons and copyright checks. We evaluate our implementation through a large-scale measurement study and confirm its efficacy. To investigate the security impact, we compare the security posture of orphaned and non-orphaned pages.

### Contributions
- We create the first methodology for detecting orphaned web pages on a single domain using public information.
- We perform the first large-scale detection of orphaned web pages, finding that at least 1,953 pages across 907 domains are orphaned, with some being 20 years old.
- We compare the security posture of orphaned pages to non-orphaned pages, finding that orphaned pages are more prone to vulnerabilities. For example, 19.3% of orphaned pages are vulnerable to XSS attacks, compared to 2.0% of maintained pages (ùëù < 0.01 using ùúí¬≤).
- We share an open-source implementation of our methodology for further research and for use by administrators and security professionals.

## 2. Background
While we are, to the best of our knowledge, the first to comprehensively study orphaned resources within the context of web pages, the general concept has been studied before (Section 7). Below, we briefly describe the necessary background.

### 2.1 Definition of Orphaned Web Pages
An orphaned web page is defined based on the sitemap of a website. Figure 2 shows a simplified example: a starting node (root or index) with edges (links) to child nodes (pages). A page becomes orphaned when all links to it are removed, and no other page links to it (Figure 2b). Although there is no path from the root, the page remains accessible via its URL. Thus, a page is orphaned if it cannot be reached through graph traversal from the website's entry points, typically the index page.

### 2.2 Types of Orphaned Web Pages
Orphaned web pages can be divided into two categories: unmaintained and maintained.

#### 2.2.1 Unmaintained Orphaned Web Pages
Unmaintained orphaned pages are those where administrators are no longer aware of their existence and do not apply security updates. This can happen if a team uses a website for a limited time (e.g., a product promotion) or if the responsible person leaves the company. Over time, these pages may become outdated and prone to vulnerabilities. Unmaintained orphaned pages fall into Quadrants 1 and 4 of Figure 1. Pages in Quadrant 1 are detectable as their URL is known, while those in Quadrant 4 are challenging to detect as they were never intended for public use.

#### 2.2.2 Maintained Orphaned Web Pages
Pages may also be orphaned without becoming unmaintained. This can occur if a link is unintentionally removed, making the page unreachable from the website's entry points. However, the administrator is still aware of the page and maintains it. These pages correspond to Quadrants 2 and 3 of Figure 1 and are generally less of a security concern, although they can cause inconvenience or confusion.

### 2.3 Security by Obscurity
Pages can also be orphaned by design to reduce the attack surface. Operators may hide a page by removing links and excluding it from public search, sharing the URL only with a select group. While this reduces exposure, security by obscurity is largely ineffective, and the site remains vulnerable. We consider these pages as unmaintained if administrators do not apply other security updates.

### 2.4 Security Impact of Orphaned Pages
Unmaintained orphaned pages are more prone to vulnerabilities due to delayed or absent updates and pre-dating modern defenses. While the main infrastructure (e.g., operating system, webserver) is likely maintained, there is no reason to assume that administrators patch vulnerabilities of orphaned pages. This also applies to server-side applications used only by orphaned pages. Systems with automatic updating may differ, but these are exceptions.