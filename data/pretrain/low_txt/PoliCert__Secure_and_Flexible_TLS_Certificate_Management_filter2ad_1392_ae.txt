### Redundant Fields in Multi-Signature Certificates (MSCs)

Due to the structure of Multi-Signature Certificates (MSCs), some fields are duplicated for each certificate within the MSC. However, this overhead can be reduced by compressing the certificates during transmission.

### Performance Impact

Our results indicate that PoliCert introduces a minor overhead in logs, approximately 9 ms per proof request, which is the most common type of request sent to logs. This means that even on standard hardware, the log can handle about 111 proof requests per second. We expect that servers will query logs infrequently (e.g., every few hours) since log proofs can be stored and reused for some time. In interactions between the client browser and the domain, the average overhead is 3.3 ms, which is short enough to be unnoticeable by users [29].

### Possible Enhancements

We now present an overview of a potential security enhancement to PoliCert, which combines our architecture with another proposal called ARPKI [4].

#### ARPKI Integration

In ARPKI, a domain interacts with the PKI. The first step for a domain is policy creation and registration. We introduce a new SCP parameter, `AUDITOR_LIST`, which defines at least \( n - 1 \) auditors trusted by the domain. The domain creates an SCP and a registration request along with a list of auditors to confirm the registration. The request is first sent to the first auditor in the list, who then passes it to the log. The log performs the same checks and synchronizations as described in §6.1. The registration receipt is then returned to the second auditor, who verifies that the registration was carried out correctly. This auditor signs the receipt and passes it to the next auditor. Each of the \( n - 1 \) auditors performs similar checks and verifies whether the log appended the SCP in the next update period. Finally, the domain receives a receipt confirmed by \( n - 1 \) trusted auditors. For SCP updates, the message flow is identical, and the auditors verify whether the log correctly updated the policy (e.g., if a potential cool-off period was satisfied).

For certificate registration, the message flow is the same as previously. The log operates as presented in §6.2, with the only difference being that the log sends the receipt to an auditor instead of directly to the domain. At the end, the domain obtains a registration receipt confirmed by the auditors, and the auditors again check the log's content after the next update for the registered MSC. In the case of a certificate revocation, auditors similarly confirm that the certificate was revoked in the log.

As in PoliCert, domains periodically send proof requests and receive from the log proofs of their SCP and MSCs' presence. However, these proofs are additionally confirmed by \( n - 1 \) auditors. Browser-based validation is almost the same as presented in §6.3, with the additional step of checking if the proofs (or receipts) are confirmed by \( n - 1 \) auditors from the domain’s `AUDITOR_LIST`.

### Security Analysis

We now conduct an informal security analysis of PoliCert. In this analysis, we assume that a domain A has correctly registered its policy and MSCs at the logs. We consider an adversary who can capture trusted elements of the system (logs, CAs, and domain private keys) and whose goal is to impersonate A’s website.

**Claim 1:** An adversary without A’s policy private key cannot create a valid MSC for A. Constructing a multi-signature certificate (Equation 1) requires a policy binding that combines a set of X.509 certificates into one logical MSC. Since the policy binding must be signed by A’s policy private key, an adversary without that key cannot create any valid MSC.

**Claim 2:** Even if the adversary has access to the policy’s private key, they cannot impersonate A without compromising at least `CERT_TH` of A’s trusted CAs (from `CA_LIST`). This is due to the MSC validation process (Algorithm 2), which requires a valid MSC to contain at least `CERT_TH` valid X.509 certificates. This threshold is also a lower bound, as the domain may inherit a higher threshold from its parent domain’s SCP.

**Claim 3:** An adversary who has compromised the required number of A’s trusted CAs and A’s policy private key can impersonate A by creating a malicious MSC and serving it to clients. However, to mount this Man-in-the-Middle (MitM) attack, the adversary must receive confirmations (a registration receipt or log proof) from the log. This requires first registering the malicious MSC, making the fraudulent certificate publicly visible. The adversary could also attempt to update the SCP itself, but this would require compromising at least `UP_CA_MIN` CAs, which may be more than `CERT_TH`.

**Claim 4:** If we assume that logs are not malicious, all of the above attacks can be detected since all of the adversary’s actions would become publicly visible. In a worst-case scenario where the adversary has compromised at least `CERT_TH` of A’s trusted CAs, A’s policy private key, and one or more of A’s trusted logs, the adversary could forge an MSC and the necessary log proofs or registration receipts. However, even in this case, the MSC would have to comply with A’s SCP, constraining the malicious MSC. Additionally, while the adversary could send the client registration receipts and never add the fraudulent MSC to the log, this action would also be detectable after some time, as eventually the registration receipts would expire and anyone querying the log after the receipts’ expiration would find that the MSC was not in the log.

**Security Level Enhancement:** Security can be increased by contacting a number of auditors who can confirm the log’s actions. As proposed in §8, with a successfully registered SCP, an adversary, even with \( n - 1 \) parties compromised, cannot launch an undetectable impersonation attack, as \( n \) parties are actively involved in asserting the correctness of SCPs and MSCs.

### Incremental Deployment

The PoliCert infrastructure is designed to be interoperable with and incrementally deployable alongside the current TLS PKI. One important feature of our architecture is that CAs act no differently than they currently do, allowing them to preserve their existing business model. Because an MSC is mostly made up of a series of X.509 certificates, it can be implemented and validated using currently available tools and methods, and served in the standard TLS handshake. Moreover, PoliCert even works with legacy software, as all major browsers only validate the first certificate they receive from a domain. Thus, for a legacy browser, only the first certificate in the MSC needs to be valid, and the rest of the MSC will be ignored.

During incremental deployment of PoliCert, there is the possibility that an adversary may attempt a downgrading attack. In this attack, the adversary impersonates a domain and claims that it has not yet deployed PoliCert and hence has no proofs for its certificate or policy. In this situation, a PoliCert-enabled client browser can obtain a proof of absence for the domain’s SCP, as discussed in §6.4. Because the logs synchronize SCPs globally, any log should be able to return a proof of presence or absence for the domain’s policy. A proof of absence for a domain’s SCP allows a client to establish a TLS connection with a legacy domain, further illustrating the interoperability of PoliCert with the current PKI.

The hierarchical structure of SCPs also allows legacy domains to benefit from the protection of PoliCert. For clients deploying PoliCert, validating a legacy domain’s certificate will require fetching a proof of absence for the domain’s SCP. However, this proof will also contain all SCPs of parent domains, if they exist. With wisely chosen SCP parameters, a parent domain can protect all of its subdomains by, for example, forbidding wildcard certificates or limiting the lifetime of a certificate. These parameters constrain any certificates that an attacker might try to craft for the domain, providing resilience against malicious certificates even for legacy domains.

Additionally, parent domains can leverage the hierarchical structure of SCPs to incentivize the adoption of PoliCert or higher security levels. For example, by setting `CERT_TH` to 2 and making the parameter inheritable, a parent domain can force the adoption of PoliCert for all of its subdomains. A parent domain could also set `MAX_LIFETIME` and make it inheritable to ensure that their subdomains regularly renew their certificates. From a security perspective, it may be worth considering minimum/maximum values for update parameters. It requires debate, but it is reasonable, especially for top-level domains, whose policies may influence millions of subdomains.

A domain also has incentives to deploy PoliCert due to privacy and efficiency reasons. For a legacy domain, the client must fetch a proof of absence for the domain’s SCP, incurring extra latency when establishing a TLS connection to these domains and leaking privacy if the client directly contacts a log server for such a proof. Deploying PoliCert would cause the domain to staple log proofs of its SCP, saving extra round trips and preserving the client’s privacy. Moreover, PoliCert can be built upon currently deployed systems like Certificate Transparency (CT). Both systems employ similar data structures (consistency tree) as a core element.

### Conclusion

In this work, we presented PoliCert, a comprehensive solution that addresses a range of problems with the current TLS ecosystem. PoliCert secures domains’ certificates and allows domains to create policies for their certificates as well as their subdomains’ certificates. Additionally, PoliCert handles all operations over a certificate’s lifetime (creation, registration, validation, and revocation) in a secure and transparent manner.

By introducing long-term policies, we make a domain’s security statements stable and transparent, and narrow the range of malicious certificates that an attacker can forge. These policies can be created by IT/security departments and applied to subdomains, allowing experts to easily coordinate certificate policies for their networks. Additionally, the hierarchical enforcement of SCPs allows domains to protect subdomains from human errors such as misconfiguration.

To evaluate the feasibility of our system, we fully implemented it and sketched an incremental deployment plan. Our implementation results show that such a system can be successfully deployed without significant influence on standard client-server connections. Additionally, we showed that PoliCert is interoperable alongside the current TLS infrastructure and can be deployed using well-known tools without breaking legacy software or protocols.

However, several challenges remain. Global synchronization among logs is required for some actions, even if they are infrequent. In future work, we plan to investigate whether this requirement can be relaxed while maintaining efficiency. We also plan to explore other parameters that can be specified in SCPs and what benefits can be realized through more detailed specifications of certificate policy. Through PoliCert, we have provided an infrastructure that gives domains more control over the security of their own TLS connections and taken initial steps towards improving today’s TLS ecosystem.

### Acknowledgments

This work was supported by a Google gift. We would like to thank Lorenzo Baesso and Lin Chen for programming assistance, and Raphael Reischuk and Ralf Sasse for providing valuable feedback in finalizing the paper.

### References

[1] Convergence. http://convergence.io/.

[2] Devdatta Akhawe and Adrienne Porter Felt. Alice in warningland: A large-scale field study of browser security warning effectiveness. In Proceedings of the 22Nd USENIX Conference on Security, SEC’13, pages 257–272, Berkeley, CA, USA, 2013. USENIX Association.

[3] Yousef J Al-Houmaily and George Samaras. Two-phase commit. In Encyclopedia of Database Systems, pages 3204–3209. Springer, 2009.

[4] David Basin, Cas Cremers, Tiffany Hyun-Jin Kim, Adrian Perrig, Ralf Sasse, and Pawel Szalachowski. ARPKI: Attack Resilient Public-key Infrastructure. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), November 2014.

[5] Daniel J. Bernstein, Anna Krasnova, and Tanja Lange. Elligator: Elliptic-curve points indistinguishable from uniform random strings. IACR Cryptology ePrint Archive, 2013:325, 2013.

[6] S. Blake-Wilson, M. Nystrom, D. Hopwood, J. Mikkelsen, and T. Wright. Transport Layer Security (TLS) Extensions. RFC 4366 (Proposed Standard), April 2006. Obsoleted by RFC 5246.

[7] Joppe W. Bos, Craig Costello, Patrick Longa, and Michael Naehrig. Selecting elliptic curves for cryptography: An efficiency and security analysis. IACR Cryptology ePrint Archive, 2014:130, 2014.

[8] Jeremy Clark and Paul C. van Oorschot. Sok: SSL and HTTPS: Revisiting past challenges and evaluating certificate trust model enhancements. In IEEE Symposium on Security and Privacy, pages 511–525. IEEE Computer Society, 2013.

[9] D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley, and W. Polk. Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile. RFC 5280 (Proposed Standard), May 2008.

[10] Scott A. Crosby and Dan S. Wallach. Efficient data structures for tamper-evident logging. In USENIX Security Symposium, pages 317–334. USENIX Association, 2009.

[11] II Ecrypt. Ecrypt ii yearly report on algorithms and keysizes (2011-2012). Available on http://www.ecrypt.eu.org, 2012.

[12] Electronic Frontier Foundation. SSL Observatory. https://www.eff.org/observatory.

[13] Chris Evans and Chris Palmer. Public key pinning extension for HTTP. November 2011.

[14] Adrienne Porter Felt, Robert W. Reeder, Hazim Almuhimedi, and Sunny Consolvo. Experimenting at scale with Google Chrome’s SSL warning. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, CHI ’14, pages 2667–2670, New York, NY, USA, 2014. ACM.

[15] Alexandra C Grant. Search for trust: An analysis and comparison of CA system alternatives and enhancements. 2012.

[17] ISO/IEC. ISO/IEC JTC 1/SC 27. Standing Document 12 – Assessment of cryptographic algorithms and key lengths. ISO/IEC, 2012.

[16] Phillip Hallam-Baker and Rob Stradling. DNS certification authority authorization (CAA) resource record. January 2013.

[18] Emilia Kasper. Fast elliptic curve cryptography in OpenSSL. In George Danezis, Sven Dietrich, and Kazue Sako, editors, Financial Cryptography Workshops, volume 7126 of Lecture Notes in Computer Science, pages 27–39. Springer, 2011.

[19] James Kasten, Eric Wustrow, and J Alex Halderman. Cage: Taming certificate authorities by inferring restricted scopes.

[20] Tiffany Hyun-Jin Kim, Lin-Shung Huang, Adrian Perrig, Collin Jackson, and Virgil Gligor. Accountable Key Infrastructure (AKI): A Proposal for a Public-Key Validation Infrastructure. In Proceedings of the International World Wide Web Conference (WWW), May 2013.

[21] Qualys SSL Lab. SSL server test. https://www.ssllabs.com/ssltest/index.html, 2014.

[22] Adam Langley. Revocation checking and Chrome’s CRL. https://www.imperialviolet.org/2012/02/05/crlsets.html, February 2012.

[23] Ben Laurie and Emilia Kasper. Revocation transparency. Google Research, September, 2012.

[24] Ben Laurie, Adam Langley, and E Kasper. Certificate transparency. Available: ietf.org-Certificate Transparency (06.01.2013), 2013.

[25] Ralph C. Merkle. A digital signature based on a conventional encryption function. In CRYPTO ’87: A Conference on the Theory and Applications of Cryptographic Techniques on Advances in Cryptology, pages 369–378, London, UK, 1988. Springer-Verlag.

[26] Mozilla. Revocation plan (draft). https://wiki.mozilla.org/CA:RevocationPlan, 2014.

[27] Mark D. Ryan. Enhanced certificate transparency (how Johnny could encrypt). Cryptology ePrint Archive, Report 2013/595, 2013. http://eprint.iacr.org/.

[28] Christopher Soghoian and Sid Stamm. Certified lies: Detecting and defeating government interception attacks against SSL (short paper). In Financial Cryptography and Data Security, pages 250–259. Springer, 2012.

[29] Niraj Tolia, David G. Andersen, and Mahadev Satyanarayanan. Quantifying interactive user experience on thin clients. IEEE Computer, 39(3):46–52, 2006.

[30] H. Tschofenig and E. Lear. Evolving the web public key infrastructure. http://tools.ietf.org/id/draft-tschofenig-iab-webpki-evolution-01.html, 2013.

[31] VeriSign Inc. The domain name industry brief. https://www.verisigninc.com/assets/domain-name-report-april2014.pdf, April 2014.

[32] Dan Wendlandt, David G. Andersen, and Adrian Perrig. Perspectives: Improving SSH-style host authentication with multipath probing. In Rebecca Isaacs and Yuanyuan Zhou, editors, USENIX Annual Technical Conference, pages 321–334. USENIX Association, 2008.