### 优化后的文本

**图10. 在不同冲突命令比例下，使用慢决策提交的命令百分比。在此实验中，批处理被禁用。**

CAESAR在存在冲突的情况下能够比现有的共识协议做出更少的慢决策，从而实现更低的延迟和更高的吞吐量。如图10所示，我们展示了两种协议中通过快速决策提交的命令百分比。需要注意的是，EPaxos所采取的慢决策数量与冲突的比例大致相同。然而，对于CAESAR来说，随着冲突的增加，慢决策的数量增长更为平缓。实际上，即使在适度冲突（例如30%）的工作负载下，CAESAR所采取的慢决策数量也比EPaxos少了三倍以上。这主要是因为CAESAR中的等待条件仅在命令的时间戳无效时才会拒绝该命令。为了便于统计分析，在此实验中已禁用了批处理。

**图11. 图9实验中CAESAR的内部统计信息。**
**(a) 排序阶段的延迟分解。**
**(b) 等待条件。**

图11展示了图9实验中CAESAR的内部统计信息。图11(a)显示了协议每个排序阶段所消耗延迟的比例。在没有冲突（0%，2%）的情况下，大部分时间都花费在提案阶段。由于没有依赖关系，交付的成本非常低。然而，随着冲突的增加，交付成为总成本的主要部分，因为一个STABLE命令必须等待所有具有较早时间戳的冲突命令交付后才能被交付。图11(b)报告了在提案阶段，冲突命令在等待条件上所花费的平均时间。请注意，我们在右Y轴上使用了不同的刻度来突出显示30%冲突命令的情况与2%和10%之间的差异。相邻节点的时间戳更新速度比远距离节点快，因为它们能够更快地交换提案。远距离节点无法感知这种更新，因此会提出具有较低时间戳的命令，导致其冲突命令需要等待。

### B. 恢复

**图12. 当一个节点故障时的吞吐量。**

图12展示了当一个节点崩溃时的吞吐量，以证明这不会导致系统的不可用性。我们将CAESAR和EPaxos进行了比较。在这个测试中，请求在一个闭环中注入，每个节点上有500个客户端。实验进行到20秒时，CAESAR和EPaxos的一个节点实例突然终止。随后，该节点上的客户端超时并重新连接到其他节点。这可以从吞吐量在几秒钟内下降的情况中观察到，这是由于失去了那500个客户端。然而，随着这些客户端重新连接到其他可用节点并继续发送请求，吞吐量很快恢复到正常水平。在我们的实验中，恢复期大约持续了4秒。

### VII. 结论

本文表明，现有的高性能广义共识实现方案在冲突命令比例较高时会出现性能下降的问题。CAESAR通过减少慢决策的数量，在存在冲突的情况下实现了更低的延迟和更高的吞吐量。此外，CAESAR还展示了良好的容错能力，能够在单个节点故障的情况下保持系统可用性。

---

**参考文献**

[1] B. Charron-Bost and A. Schiper, “Uniform Consensus is Harder Than Consensus,” J. Algorithms, vol. 51, no. 1, pp. 15–37, Apr. 2004.

[2] L. Lamport, “The Part-time Parliament,” ACM Trans. Comput. Syst., vol. 16, no. 2, pp. 133–169, May 1998.

[3] ——, “Paxos made simple,” ACM Sigact News, 2001.

[4] J. C. Corbett, J. Dean, M. Epstein, A. Fikes, C. Frost, J. J. Furman, S. Ghemawat, A. Gubarev, C. Heiser, P. Hochschild, W. Hsieh, S. Kanthak, E. Kogan, H. Li, A. Lloyd, S. Melnik, D. Mwaura, D. Nagle, S. Quinlan, R. Rao, L. Rolig, Y. Saito, M. Szymaniak, C. Taylor, R. Wang, and D. Woodford, “Spanner: Google’s Globally Distributed Database,” ACM Trans. Comput. Syst., vol. 31, no. 3, pp. 8:1–8:22, Aug. 2013.

[5] S. Hirve, R. Palmieri, and B. Ravindran, “Archie: A Speculative Replicated Transactional System,” in Proceedings of the 15th International Middleware Conference, ser. Middleware, 2014, pp. 265–276.

[6] T. Kraska, G. Pang, M. J. Franklin, S. Madden, and A. Fekete, “MDCC: Multi-data Center Consistency,” in EuroSys, 2013, pp. 113–126.

[7] H. Mahmoud, F. Nawab, A. Pucher, D. Agrawal, and A. El Abbadi, “Low-latency Multi-datacenter Databases Using Replicated Commit,” Proc. VLDB Endow., vol. 6, no. 9, pp. 661–672, Jul. 2013.

[8] J. Gray and L. Lamport, “Consensus on Transaction Commit,” ACM Trans. Database Syst., vol. 31, no. 1, pp. 133–160, Mar. 2006.

[9] “Google Cloud Spanner - https://cloud.google.com/spanner/.”

[10] I. Moraru, D. G. Andersen, and M. Kaminsky, “There is More Consensus in Egalitarian Parliaments,” ser. SOSP, 2013, pp. 358–372.

[11] Y. Mao, F. P. Junqueira, and K. Marzullo, “Mencius: Building Efficient Replicated State Machines for WANs,” ser. OSDI, 2008, pp. 369–384.

[12] A. Turcu, S. Peluso, R. Palmieri, and B. Ravindran, “Be General and Don’t Give Up Consistency in Geo-Replicated Transactional Systems,” ser. OPODIS, 2014, pp. 33–48.

[13] L. Lamport, “Generalized Consensus and Paxos,” Microsoft Research, Tech. Rep. MSR-TR-2005-33, March 2005.

[14] S. Peluso, A. Turcu, R. Palmieri, G. Losa, and B. Ravindran, “Making Fast Consensus Generally Faster,” in DSN, 2016, pp. 156–167.

[15] L. Lamport, “Fast Paxos,” Distributed Computing, vol. 19, no. 2, pp. 79–103, 2006.

[16] P. Sutra and M. Shapiro, “Fast Genuine Generalized Consensus,” ser. SRDS, 2011, pp. 255–264.

[17] W. Wei, H. T. Gao, F. Xu, and Q. Li, “Fast Mencius: Mencius with Low Commit Latency,” in IEEE INFOCOM, 2013, pp. 881–889.

[18] J. Du, D. Sciascia, S. Elnikety, W. Zwaenepoel, and F. Pedone, “Clock-RSM: Low-Latency Inter-datacenter State Machine Replication Using Loosely Synchronized Physical Clocks,” ser. DSN, 2014, pp. 343–354.

[19] M. J. Fischer, N. A. Lynch, and M. S. Paterson, “Impossibility of Distributed Consensus with One Faulty Process,” J. ACM, vol. 32, no. 2, pp. 374–382, Apr. 1985.

[20] R. Guerraoui and A. Schiper, “Genuine Atomic Multicast in Asynchronous Distributed Systems,” Theor. Comput. Sci., vol. 254, no. 1-2, pp. 297–316, Mar. 2001.

[21] R. Guerraoui and L. Rodrigues, Introduction to Reliable Distributed Programming. Springer, 2006.

[22] L. Lamport, “Future Directions in Distributed Computing,” A. Schiper, A. A. Shvartsman, H. Weatherspoon, and B. Y. Zhao, Eds., 2003, ch. Lower Bounds for Asynchronous Consensus, pp. 22–23.

[23] B. Arun, S. Peluso, R. Palmieri, G. Losa, and B. Ravindran, “Speeding up Consensus by Chasing Fast Decisions,” Tech. Rep., 2017. [Online]. Available: https://arxiv.org/abs/1704.03319

[24] L. Lamport, Specifying Systems: The TLA+ Language and Tools for Hardware and Software Engineers. Addison-Wesley Longman Publishing Co., Inc., 2002.

---

**致谢**

感谢匿名评审者提供的宝贵意见。本研究部分由美国空军科学研究办公室资助，项目编号FA9550-15-1-0098，以及美国国家科学基金会资助，项目编号CNS-1523558。