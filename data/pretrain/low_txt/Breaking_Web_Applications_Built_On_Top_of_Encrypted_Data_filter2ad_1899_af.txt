### Impact of Stemming on Inference Attacks

The presence of stemmed documents may facilitate inference attacks. It remains unclear whether stemming affects the relative value of recovering a specific query, as knowing that a stem (e.g., "run") exists in a document does not provide the adversary with information about the exact keyword. We hypothesize that recovering a stemmed keyword still reveals valuable information to an adversary, given that different keywords with the same stem are often semantically related.

Quantifying the value of recovering a particular keyword is an open problem. While recovering stopwords provides little information to the adversary, quantifying the value of less frequent words is challenging and highly dependent on the distribution. In information retrieval, techniques exist to measure the "relevance" of a keyword to a specific document, but these methods are primarily used for returning the best matches for a query and do not capture the value of recovering, for example, the keywords "malignant" or "benign" in a corpus of medical documents.

### Mitigating Side Channels in Web Applications

Side channels in web applications can be mitigated through padding or varying network traffic [36, 37]. These papers assume a network adversary rather than an untrusted server.

### Lessons and Conclusions

The Mylar framework, designed for building web applications on top of encrypted data, was claimed to be secure against active attacks [48]. Mylar is based on a multi-key searchable encryption (MKSE) scheme, which was proven secure in the formal model proposed by Popa and Zeldovich [49].

Our first conclusion is that the Popa-Zeldovich model for MKSE does not imply security against either passive or active attacks. Our second conclusion is that the security claims made by Popa et al. in [48] are false: Mylar does not protect the confidentiality of a data item if none of the users with access to that data item use a compromised machine. Additionally, a fundamental design flaw in Mylar—relying on an untrusted server to convert clients' tokens—enables an efficient brute-force dictionary attack on users' queries, even recovering search keywords that do not occur in adversary-controlled documents.

The key lessons from this analysis extend beyond Mylar and apply generally to the class of BoPETs (Browser-Only Privacy-Enhancing Technologies). First, we demonstrate how encryption schemes designed to be secure against snapshot passive adversaries become completely insecure when deployed in systems requiring protection against active adversaries. Second, the natural process of porting applications—encrypting all data and adapting server operations to work over ciphertexts—leaves metadata exposed, revealing sensitive information even to snapshot passive adversaries.

Another lesson is that BoPETs need to define realistic threat models and develop formal cryptographic definitions that capture security in those models. Building a scheme and then crafting a cryptographic model in which the scheme can be proven secure can result in schemes whose security breaks down in practice.

The challenge of building client-server application frameworks that provide meaningful security against persistent passive and active attackers on the server remains open. To protect against persistent passive attacks, access patterns must be hidden or securely obfuscated. To protect against active attacks, every essential operation performed by the server must be either executed or at least verified on the client side. This contradicts the premise of BoPETs, which aim to preserve the existing split of application functionality between clients and servers while relying on clever encryption to protect data from untrusted servers. We conjecture that verifying or moving every server operation to the client involves substantial re-engineering of application logic and is likely to incur high performance overheads.

### Acknowledgments

This work was partially supported by NSF grants CNS-1223396, CNS-1330308, CNS-1514163, and CNS-1546033, and a generous gift from Microsoft.

### References

[1] 23andMe. https://www.23andme.com.
[2] R. Agrawal, J. Kiernan, R. Srikant, and Y. Xu. Order preserving encryption for numeric data. In SIGMOD, 2004.
[3] D. Akhawe, P. Saxena, and D. Song. Privilege separation in HTML5 applications. In USENIX Security, 2012.
[4] Apache Lucene. https://lucene.apache.org/core.
[5] Apache Tika. https://tika.apache.org.
[6] M. Bellare, A. Boldyreva, and A. O’Neill. Deterministic and efficiently searchable encryption. In CRYPTO, 2007.
[7] A. Boldyreva, N. Chenette, Y. Lee, and A. O’Neill. Order-preserving symmetric encryption. In EUROCRYPT, 2009.
[8] D. Boneh, K. Lewi, M. Raykova, A. Sahai, M. Zhandry, and J. Zimmerman. Semantically secure order-revealing encryption: Multi-input functional encryption without obfuscation. In EUROCRYPT, 2015.
[9] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart. Leakage-abuse attacks against searchable encryption. In CCS, 2015.
[10] D. Cash, J. Jaeger, S. Jarecki, C. S. Jutla, H. Krawczyk, M.-C. Rosu, and M. Steiner. Dynamic searchable encryption in very-large databases: Data structures and implementation. In NDSS, 2014.
[11] D. Cash, S. Jarecki, C. Jutla, H. Krawczyk, M.-C. Ro¸su, and M. Steiner. Highly-scalable searchable symmetric encryption with support for Boolean queries. In CRYPTO, 2013.
[12] P. Chapman and D. Evans. Automated black-box detection of side-channel vulnerabilities in Web applications. In CCS, 2011.
[13] S. Chen, R. Wang, X. Wang, and K. Zhang. Side-channel leaks in Web applications: A reality today, a challenge tomorrow. In S&P, 2010.
[14] R. Cheng, W. Scott, P. Ellenbogen, J. Howell, and T. Anderson. Radiatus: Strong user isolation for scalable Web applications. Univ. Washington Tech. Report, 2014.
[15] M. Christodorescu. Private use of untrusted Web servers via opportunistic encryption. In W2SP, 2008.
[16] Ciphercloud. http://www.ciphercloud.com.
[17] R. Curtmola, J. Garay, S. Kamara, and R. Ostrovsky. Searchable symmetric encryption: Improved definitions and efficient constructions. In CCS, 2006.
[18] M. Egorov and M. Wilkison. ZeroDB white paper. CoRR, abs/1602.07168, 2016.
[19] English-words. https://github.com/dwyl/english-words.
[20] A. J. Feldman, W. P. Zeller, M. J. Freedman, and E. W. Felten. SPORC: Group collaboration using untrusted cloud resources. In OSDI, 2010.
[21] R. Fischer, M. Seltzer, and M. Fischer. Privacy from untrusted Web servers. Yale Univ. Tech. Report YALEU/DCS/TR-1290, 2004.
[22] Gitzero. https://www.gitzero.com.
[23] E.-J. Goh. Secure indexes. http://eprint.iacr.org/2003/216.
[24] O. Goldreich and R. Ostrovsky. Software protection and simulation on oblivious RAMs. JACM, 1996.
[25] S. Greif. The allow & deny security challenge: Results. https://www.discovermeteor.com/blog/allow-deny-challenge-results/, 2015.
[26] P. Grubbs, K. Sekniqi, V. Bindschaedler, M. Naveed, and T. Ristenpart. Leakage-abuse attacks against order-revealing encryption. Cryptology ePrint Archive, Report 2016/895, 2016. http://eprint.iacr.org/2016/895.
[27] F. Hahn and F. Kerschbaum. Searchable encryption with secure and efficient updates. In CCS, 2014.
[28] W. He, D. Akhawe, S. Jain, E. Shi, and D. Song. ShadowCrypt: Encrypted Web applications for everyone. In CCS, 2014.
[29] X. Huang and P. Malacaria. SideAuto: quantitative information flow for side-channel leakage in Web applications. In WPES, 2013.
[30] M. S. Islam, M. Kuzu, and M. Kantarcioglu. Access pattern disclosure on searchable encryption: Ramification, attack and mitigation. In NDSS, 2012.
[31] S. Kamara, C. Papamanthou, and T. Roeder. Dynamic searchable symmetric encryption. In CCS, 2012.
[32] N. Karapanos, A. Filios, R. A. Popa, and S. Capkun. Verena: End-to-end integrity protection for Web applications. In S&P, 2016.
[33] S. Keelveedhi, M. Bellare, and T. Ristenpart. DupLESS: Server-aided encryption for deduplicated storage. In USENIX Security, 2013.
[34] B. Lau, S. Chung, C. Song, Y. Jang, W. Lee, and A. Boldyreva. Mimesis Aegis: A mimicry privacy shield–a system’s approach to data privacy on public cloud. In USENIX Security, 2014.
[35] J. Li, M. N. Krohn, D. Mazieres, and D. Shasha. Secure untrusted data repository (SUNDR). In OSDI, 2004.
[36] W. M. Liu, L. Wang, K. Ren, P. Cheng, and M. Debbabi. k-indistinguishable traffic padding in Web applications. In PETS, 2012.
[37] X. Luo, P. Zhou, E. W. Chan, W. Lee, R. K. Chang, and R. Perdisci. HTTPOS: Sealing information leaks with browser-side obfuscation of encrypted flows. In NDSS, 2011.
[38] P. Mahajan, S. Setty, S. Lee, A. Clement, L. Alvisi, M. Dahlin, and M. Walfish. Depot: Cloud storage with minimal trust. TOCS, 2011.
[39] Meteor. https://www.meteor.com.
[40] MongoDB. https://www.mongodb.org.
[41] Navajo Systems. https://www.crunchbase.com/organization/navajo-systems.
[42] M. Naveed, S. Kamara, and C. V. Wright. Inference attacks on property-preserving encrypted databases. In CCS, 2015.
[43] M. Naveed, M. Prabhakaran, and C. A. Gunter. Dynamic searchable encryption via blind storage. In S&P, 2014.
[44] openSNP. https://opensnp.org.
[45] V. Pappas, F. Krell, B. Vo, V. Kolesnikov, T. Malkin, S. G. Choi, W. George, A. Keromytis, and S. Bellovin. Blind Seer: A scalable private DBMS. In S&P, 2014.
[46] Perspecsys: A Blue Coat company. http://perspecsys.com.
[47] R. A. Popa, C. Redfield, N. Zeldovich, and H. Balakrishnan. CryptDB: Protecting confidentiality with encrypted query processing. In SOSP, 2011.
[48] R. A. Popa, E. Stark, S. Valdez, J. Helfer, N. Zeldovich, M. F. Kaashoek, and H. Balakrishnan. Building web applications on top of encrypted data using Mylar. In NSDI, 2014.
[49] R. A. Popa and N. Zeldovich. Multi-key searchable encryption. https://eprint.iacr.org/2013/508.
[50] The Porter stemming algorithm. http://tartarus.org/~martin/PorterStemmer.
[51] Preveil. http://www.preveil.com.
[52] K. P. Puttaswamy, C. Kruegel, and B. Y. Zhao. Silverline: Toward data confidentiality in storage-intensive cloud applications. In SoCC, 2011.
[53] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-Ruiz, and M. Russinovich. VC3: Trustworthy data analytics in the cloud using SGX. In S&P, 2015.
[54] Skyhigh Networks. https://www.skyhighnetworks.com.
[55] D. X. Song, D. Wagner, and A. Perrig. Practical techniques for searches on encrypted data. In S&P, 2000.
[56] The Stanford NLP library. http://nlp.stanford.edu/software.
[57] T. Steinhauer. Mylar - ported to Meteor v1.1. https://github.com/strikeout/mylar, 2015.
[58] Stilgherrian. Encryption’s holy grail is getting closer, one way or another. http://www.zdnet.com/article/encryptions-holy-grail-is-getting-closer-one-way-or-another/.
[59] M. Tamayo-Rios and N. J. H. Lai. An implementation of KFHE with faster homomorphic bitwise operations. https://github.com/kryptnostic/krypto/blob/develop/krypto-lib/src/main/V2/V2Specification.pdf.
[60] Ubuntu IRC logs. http://irclogs.ubuntu.com.
[61] Virtru Corporation. End-to-end data protection with Virtru encryption as a service (EaaS). Virtru Tech. Report, 2015.
[62] F. Wang, J. Mickens, N. Zeldovich, and V. Vaikuntanathan. Sieve: Cryptographically enforced access control for user data in untrusted clouds. In NSDI, 2012.
[63] K. Zhang, Z. Li, R. Wang, X. Wang, and S. Chen. Sidebuster: Automated detection and quantification of side-channel leaks in Web application development. In CCS, 2010.
[64] Y. Zhang, J. Katz, and C. Papamanthou. All your queries are belong to us: The power of file-injection attacks on searchable encryption. In USENIX Security, 2016.

### Postscriptum

The published Mylar paper [48] claims that "Mylar allows users to share keys and data securely in the presence of an active adversary." This statement was also repeated on the public Mylar website. Between April and July 2016, while this paper was undergoing peer review, all claims that Mylar protects data and queries from active attacks were removed from the Mylar website without any explanation or acknowledgment. As of this writing, the "Security guarantees and use cases" page states that Mylar provides protection for users' queries and data only against a passive attacker, directly contradicting the published Mylar paper [48].

The current page asserts that Mylar is secure against active attacks when used in combination with Verena [32], but no evidence is provided for this assertion. The Verena paper aims to protect the integrity of database queries and webpages returned from the server but does not prevent the server from executing other malicious code. Furthermore, neither Mylar nor Verena hides access patterns, making them insecure against persistent passive attacks.

**Archived Links:**
- [April 2016 Mylar Website](https://web.archive.org/web/20160422082354/http://css.csail.mit.edu/mylar/)
- [Current Mylar Website](https://css.csail.mit.edu/mylar/)