### Network Transfer and Reshuffling in ORAM

In Oblivious RAM (ORAM), the reshuffling process at each level involves sorting approximately \(10\) sets of \(4i \log n\) data. Each sort requires \(4i \log(n) \log_2(4i \log n)\) block transfers. The total number of block transfers for all sorts is given by:

\[ 10 \times 4i \log(n) \log_2(4i \log n) \times \frac{2^{10}}{10 \text{ MB/s}} \]

Summing over the \(\log_4 n\) levels and amortizing each level over \(4^{i-1}\) queries, the amortized network traffic cost per query is:

\[ \sum_{i=1}^{15} 10 \times 4^i \times 15 \times \log_2(15 \times 4^i) \times 2^{10} \text{ B} = \sum_{i=1}^{15} (\log 15 + \log 4^i)^2 \approx 3.680 \text{ GB} \]

Over a 10 MB/s link, this results in an amortized transfer time of approximately 368 seconds per query, which is almost three orders of magnitude slower than typical operations.

### Achieving Private Information Retrieval (PIR)

To implement PIR, the client must be able to download from a public server without prearranged secret keys. By implementing access pattern privacy on a Secure CPU (SCPU), we can achieve general PIR. The SCPU maintains the encrypted database and never leaks encryption keys. Clients interact with the main data through the SCPU to retrieve items privately.

### Resource Usage Analysis

Figure 7 illustrates the resource usage per query for both a normal client and one using the IBM 4764 SCPU. The figure shows that when PIR is implemented on the SCPU, the bottleneck shifts from network bandwidth to encryption/decryption times. Under our sample configuration, the new bottleneck results in a 560 ms per query, or just under 2 queries per second.

#### Key Observations:
- **Network Transfer:** 10 MB/s link
- **Network Latency:** 50 ms round-trip time (RTT)
- **Disk Transfer:** 50 MB/s read/write rate
- **Client Encrypt/Decrypt:** 100 MB/s AES
- **Disk Seek Latency:** 5 ms seek time

### Memory Pooling and Storage Efficiency

A key advantage of our algorithm is that working buffers are only used transiently, requiring no backup and avoiding high storage maintenance costs. Resources can be pooled between SCPUs to support larger databases. For example, if a storage provider manages 10 SCPUs for 10 customers and the working buffer is in use 10% of the time, the effective secure storage area can be 320 MB instead of 32 MB. This allows the provider to support databases of size \(10^{15}\) 1-byte blocks per client, or 1 TB if consisting of 1-KB blocks.

The limiting factor in pooling is the percentage of time the SCPUs are in use, which varies based on transaction patterns. If transactions run continuously at maximum throughput, the idle time is around 50%. If there are idle periods, each SCPU may see a much higher idle time. Overestimating the idle time can lead to performance degradation as clients wait for SCPUs to become free.

### Existing PIR Mechanisms

- **Trivial PIR:** Transferring the entire database to the SCPU for every query has a bottleneck shared by bus transfer time and disk transfer time, resulting in about 22,000 seconds per query for a 1 TB database.
- **PIR Protocol [23]:** Offers an amortized complexity of \(O(n/k)\) for database size \(n\) and secure storage size \(k\). For \(k = O(\sqrt{n})\), the overhead is \(O(\sqrt{n})\) per query. As databases grow larger, our superior \(O(\log^2(n))\) complexity becomes increasingly necessary for practicality.

### Conclusions

We introduced a practical PIR mechanism that is orders of magnitude faster than existing methods. We analyzed its overheads and security properties and validated its practicality using current off-the-shelf hardware. Future work will focus on increasing achievable throughputs and exploring alternate constructions to reduce the overhead related to fake blocks, potentially bringing the amortized overhead to \(O(\log n \log \log n)\) per query.

### Acknowledgments

We thank Bogdan Carbunar for numerous discussions and feedback, as well as our anonymous reviewers for their helpful insights.

### References

[1] FilesAnywhere. Online at http://www.filesanywhere.com/.

[2] GMail. Online at http://gmail.google.com/.

[3] Xdrive. Online at http://www.xdrive.com/.

[4] Yahoo Mail. Online at http://mail.yahoo.com/.

[5] IBM 4764 PCI-X Cryptographic Coprocessor (PCIXCC). Online at http://www-03.ibm.com/security/cryptocards/pcixcc/overview.shtml, 2006.

[6] M. Ajtai, J. Komlos, and E. Szemeredi. An o(n log n) sorting network. In Proceedings of the 25th ACM Symposium on Theory of Computing, pages 1–9, 1983.

[7] D. Asonov. Querying Databases Privately: A New Approach to Private Information Retrieval. Springer Verlag, 2004.

[8] B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan. Private information retrieval. In IEEE Symposium on Foundations of Computer Science, pages 41–50, 1995.

[9] CNN. Feds seek Google records in porn probe. Online at http://www.cnn.com, January 2006.

[10] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001.

[11] Michael Fowler. A one-dimensional random walk. Online at http://galileo.phys.virginia.edu/classes/152.mf1i.spring02/RandomWalk.htm.

[12] Gartner, Inc. Server Storage and RAID Worldwide. Technical report, Gartner Group/Dataquest, 1999. www.gartner.com.

[13] W. Gasarch. A WebPage on Private Information Retrieval. Online at http://www.cs.umd.edu/~gasarch/pir/pir.html.

[14] W. Gasarch. A survey on private information retrieval, 2004.

[15] Ian Goldberg. Improving the Robustness of Private Information Retrieval. In Proceedings of the 2007 IEEE Symposium on Security and Privacy, May 2007.

[16] O. Goldreich. Foundations of Cryptography. Cambridge University Press, 2001.

[17] Oded Goldreich and Rafail Ostrovsky. Software protection and simulation on oblivious RAM. Journal of the ACM, 45:431–473, May 1996.

[18] A. Iliev and S.W. Smith. Private information storage with logarithmic-space secure hardware. In Proceedings of i-NetSec 04: 3rd Working Conference on Privacy and Anonymity in Networked and Distributed Systems, pages 201–216, 2004.

[19] Helger Lipmaa. AES ciphers: speed. Online at http://www.adastral.ucl.ac.uk/~helger/research/aes/rijndael.html.

[20] Michael Mitzenmacher and Eli Upfal. Probability and Computing: Randomized Algorithms and Probabilistic Analysis. Cambridge University Press, 2006.

[21] Len Sassaman, Bram Cohen, and Nick Mathewson. The Pynchon Gate: a secure method of pseudonymous mail retrieval. In WPES, pages 1–9, 2005.

[22] Radu Sion and Bogdan Carbunar. On the Practicality of Private Information Retrieval. In Proceedings of the Network and Distributed Systems Security Symposium, 2007. Stony Brook Network Security and Applied Cryptography Lab Tech Report 2006-06.

[23] Shuhong Wang, Xuhua Ding, Robert H. Deng, and Feng Bao. Private information retrieval using trusted hardware. In Proceedings of the European Symposium on Research in Computer Security ESORICS, pages 49–64, 2006.