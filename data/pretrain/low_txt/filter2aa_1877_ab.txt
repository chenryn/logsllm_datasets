### Exploitation of Weak Permissions in Windows Services

Upon encountering a potential issue, I began to suspect that it was exploitable and had an idea on how to exploit it. However, I needed to confirm my suspicions.

I examined the subkeys under `HKLM\Software\Microsoft\Tracing` and found many entries. These subkeys often shared names similar to Windows services, leading me to believe that these services used this key for some functionality. At the time, I did not need to know the exact purpose of these registry keys; it was sufficient to understand that they were read and possibly written by various Windows services.

Later, while researching another vulnerability, I discovered that these registry keys are used by a tracing functionality implemented by some services. This functionality logs errors, debug messages, and other relevant information related to the services. The services using this functionality automatically monitor the registry key for changes, and if a change is detected, the services will re-read the key values.

### Identifying the Exploitability

To determine why I thought the permissions issue was exploitable, I focused on the `HKLM\Software\Microsoft\Tracing\tapisrv` key. One of the values, `FileDirectory`, had a default value of `%windir%\tracing`. This value appeared to be a folder name that the service reads and uses to access files. I located and opened this folder using Windows Explorer but found it empty. ProcMon also did not show any items accessing this folder.

Next, I noticed the `EnableFileTracing` value, which was set to `0`. Changing this value to `1` and restarting the service resulted in the creation of a file named `tapisrv.log` in the `c:\windows\tracing` folder. ProcMon confirmed that TapiSrv was accessing (writing) this file after reading the folder name from the registry key. To ensure that the folder value was indeed read from the registry key, I changed the `FileDirectory` value to a new value and restarted the service. As expected, TapiSrv attempted to access a folder with the new registry value.

### Exploiting the Issue

For those familiar with Windows local exploitation, the method to exploit this issue is straightforward but requires a special privilege: impersonation. Most Windows services and some regular processes, such as IIS application pool accounts, have this privilege. These processes, used to run ASP .NET or classic ASP applications, are prime targets for attacks if web pages can be uploaded to compromise the server.

The attack involves using impersonation over named pipes. An attacker with impersonation privileges can create and listen on a named pipe, waiting for a connection. For TapiSrv, the named pipe would be `\\.\pipe\x\tapisrv.log`. The attacker sets the `FileDirectory` registry value to the name of the created named pipe without the file name and using a UNC path (e.g., `\\localhost\pipe\x`). Then, the `EnableFileTracing` value is set to `1`. When the service reads the modified registry values, it connects to the named pipe, allowing the attacker to impersonate the user under which the service is running. If the impersonated user has more privileges than the attacker, the elevation of privileges is successful.

### Finding a Suitable Service

While TapiSrv could be exploited, the process required multiple steps to obtain a Local System impersonation token. I sought a service running under the Local System account for direct impersonation. Examining the subkeys under `HKLM\Software\Microsoft\Tracing`, I found a subkey named `IpHlpSvc`, which referred to the IP Helper service. Using Process Explorer, I identified the IP Helper service running under a `svchost.exe` process as the Local System account, making it an ideal candidate for exploitation.

After testing, I developed a reliable exploit that works well on various Windows services, including IIS 7 & 7.5 and SQL Server, running on Windows 2008 R1 and R2, Vista, and Windows 7.

### Further Research and Findings

Continuing my research on TapiSrv, I discovered that the `dialer.exe` tool interacted with TapiSrv, and some actions were recorded by ProcMon. TapiSrv accessed the `HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Telephony` registry key. Upon checking the permissions, I found that the Network Service account had full control over this key, which broke per-process SID service protection. This allowed any process running under the Network Service account to perform actions on the key.

Examining the subkeys, I found `HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Telephony\Providers` with values named `ProviderFileNameX` (where `X` is a number starting at 0). These values appeared to be file names. ProcMon showed that TapiSrv loaded these files as DLLs after reading the subkey values. This elevated the issue from a simple bug to a significant vulnerability.

Since the key allowed any process running under the Network Service account to perform actions, it was possible to set one of these registry values to an arbitrary DLL, which TapiSrv would load, allowing the execution of arbitrary code. TapiSrv runs under the Network Service account but has a process handle with DuplicateHandle privileges of a process running as the Local System account. Once an arbitrary DLL is loaded into TapiSrv, the DLL can duplicate a Local System impersonation token handle from the privileged process, fully compromising the system.

### Building the Exploit

To build an exploit, I needed to introduce a DLL, change the registry values, and trigger the functionality to load the DLL. I reviewed the TAPI APIs on MSDN and found the `lineAddProvider()` API, which takes a parameter `lpszProviderFilename`. This parameter name matched the subkey values, so I tested it.

Using ProcMon, I built a simple program to call the `lineAddProvider()` API. The program worked when run as an administrator and under the Network Service and Local Service accounts. Testing on Windows 2003, the registry key had proper permissions, but on Windows XP, both the Network Service and Local Service accounts had full control, allowing easy privilege escalation.

### Additional Findings

When running `dialer.exe`, I noticed that TapiSrv obtained a process handle with DuplicateHandle privileges from the interacting processes. To identify the service providing the handle, I used Process Explorer to find the `svchost.exe` process running as the Local System account. Stopping the Remote Access Connection Manager (RasMan) service caused the handle to disappear, confirming it as the source.

By exploiting these issues, an attacker can elevate privileges on various Windows services, including IIS 6, 7 & 7.5, and SQL Server. On IIS, uploading a .NET web page with exploit code can fully compromise the server. On SQL Server, database administrative permissions and executing stored procedures like `xp_cmdshell` or `sp_addextendedproc` can allow the attacker to run code under the Local System account.

These issues can also be used in post-exploitation scenarios where an attacker is exploiting a Windows service with impersonation privileges but not running under the Local System account. Abusing these vulnerabilities allows the attacker to bypass new Windows protections and run code under the Local System account.

*See the Chimichurri exploit available with this paper.

### Bypassing Microsoft's Fix for Token Kidnapping

In my previous research on Token Kidnapping, I found a way to get a Local System impersonation token from WMI processes running under the Network or Local Service accounts. These processes lacked protection, allowing any process running under the same accounts to access them and elevate privileges. Microsoft fixed this issue by properly protecting WMI processes, preventing other processes running under the same account from accessing them.