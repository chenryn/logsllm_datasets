### Functionality and Taint Analysis

In addition to its primary function, our tool employs taint analysis to track value flows from the results of the `read` function to the parameters of the `write` function. This is crucial because private user data received from the ADB server via `read` can potentially be leaked through `write`. To address this, we perform a taint analysis with `read` calls as sources and `write` calls as sinks.

For string analysis, we extend traditional taint analysis to track data flows between asynchronous multiple threads. Unlike static analysis, which requires precise string values for specific variables, taint analysis focuses on tracking value flows between sources and sinks. This approach ensures that the taint analysis provides sound results, even if it performs only a flow-insensitive analysis. To improve the taint analysis results, we can apply the same approach as the string analysis and use two kinds of taint analyses.

### Evaluation

To evaluate the efficiency of our static analyzer, we tested all 7 applications that leak string values to the `write` function. We also evaluated the taint analysis using 2 malicious applications described in Section 3, which leak information to external devices. For the former, we tested cases where string values flow intra-procedurally, inter-procedurally, via fields of classes, and via static fields of classes. For the latter, we tested malicious applications for application modification, SIM information leakage, and message tracking. Our static analyzer correctly detected command strings sent to the ADB server and identified data flows from the ADB server to external destinations from the malicious applications.

### Defenses Requiring Changes to Android

We propose several mitigation methods that require changes to the Android system:

#### Informative Message for Using ADB

Starting from Android 4.2.2, the Android system protects ADB by requiring user confirmation to enable USB debugging. When a user attempts to enable USB debugging, the system displays a dialog including an RSA key for approval. However, RSA keys may not be meaningful to ordinary users unfamiliar with security vulnerabilities. To help users understand potential security risks, more informative messages should be provided instead of just RSA keys.

#### Automatic Disable of USB Debugging

While still allowing ADB capabilities to ordinary applications, the Android system could automatically disable them periodically. Even though USB debugging is disabled by default, once enabled, it remains enabled even after a system reboot. Periodic automatic disabling would enhance security. The BlackBerry system, for example, disables USB debugging after a certain period [3].

#### Restricted ADB Functionalities

Given the vulnerability of ADB capabilities to various attacks, restricting their functionalities is a plausible option. One approach is to prohibit the combined use of multiple ADB commands. While this does not prevent all attacks, it can mitigate many, such as contact collection using `screenrecord` with input and overbilling using `am` with input. A more stringent approach is to disallow ADB capabilities in production applications, aligning with ADB's original purpose for debugging. Comparing the debugging utilities of the Android system and Ubuntu 12.04.01, we found that Android provides more by default. Restricting ADB in production applications will limit functionality but enhance security.

#### Secured ADB Channels

Although the Android system displays a dialog with an RSA key for enabling USB debugging, it does not authenticate the server and client. Once the ADB server is running, any application can connect to it via a TCP connection. We propose several approaches to secure communication with the ADB server. The most straightforward method is to add an authentication mechanism, such as allowing connections only from the shell by checking if the client's UID is 2000. Another solution is to create a new ADB permission, ensuring that only applications with this permission can communicate with the ADB server. If the ADB permission is protected at the signature level, malicious applications cannot leverage the ADB server.

### Related Work

Various attacks on Android applications have been reported, leveraging vulnerabilities in intents [4], dynamic code loading [23], content providers [30], permission escalation [6], and advertisement libraries [22]. In this paper, we focus on attacks that exploit the ADB, a component originally designed for debugging. Due to its high privileges, ADB can be used to launch powerful attacks with just the INTERNET permission.

While protecting system components is critical, few studies have focused on Android kernel layer security. Zhou et al. [29] highlighted that vulnerable device drivers can leak private data. Jana and Shmatikov [15] demonstrated that shared memory can leak private information. Similarly, public information can lead to private data leakage [28]. Our research focuses on understanding the security risks of ADB and Android system utilities. Lin et al. [18] studied the security risks of the screenshot function using ADB, while we present a broader range of ADB capabilities and their associated security risks. Given the emergence of malware leveraging ADB [19], our study provides valuable insights into these vulnerabilities.

### Conclusion

In this paper, we demonstrated that malicious applications can exploit ADB capabilities to leak private data, monitor device usage, and interfere with device behavior. We showed that such attacks are possible with just the INTERNET permission. To protect users, we proposed multiple mitigation mechanisms, including a static analysis tool to detect potential malware, more informative messages for users, and restrictions on ADB functionalities. We strongly recommend that ADB capabilities be restricted or secured, and ideally, used only for debugging purposes.

### Acknowledgment

This work was supported in part by the Korea Ministry of Education, Science and Technology (MEST) and the National Research Foundation of Korea (NRF) (Grants NRF-2014R1A2A2A01003235 and NRF-2008-0062609).

### References

[1] Android logging system. http://elinux.org/Android_Logging_System, 2012.
[2] AppTornado GmbH. AppBrain: Number of Android applications. http://www.appbrain.com/stats/number-of-android-apps, 2014.
[3] BlackBerry. Blackberry developer. http://developer.blackberry.com.
[4] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing inter-application communication in Android. In Proceedings of the 9th International Conference on Mobile Systems, Applications, and Services, 2011.
[5] ClockworkMod. ClockworkMod tether (no root). https://play.google.com/store/apps/details?id=com.koushikdutta.tether, 2013.
[6] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Privilege escalation attacks on Android. In Proceedings of the 13th International Conference on Information Security, 2010.
[7] A. P. Fuchs, A. Chaudhuri, and J. S. Foster. Scandroid: Automated security certification of Android applications. Technical Report CS-TR-4991, University of Maryland, 2009.
[8] Google. Android debug bridge. http://developer.android.com/tools/help/adb.html.
[9] Google. Toasts. http://developer.android.com/guide/topics/ui/notifiers/toasts.html.
[10] Google. NetworkOnMainThreadException. http://developer.android.com/reference/android/os/NetworkOnMainThreadException.html, 2014.
[11] C. Gutman. Remote ADB shell. https://play.google.com/store/apps/details?id=com.cgutman.androidremotedebugger&hl=en, 2013.
[12] Hiandroidstudio. No root screen recorder-trial. https://play.google.com/store/apps/details?id=com.screenrecnoroot&hl=en, 2014.
[13] IBM. T.J. Watson Libraries for Analysis (WALA). http://wala.sourceforge.net.
[14] Invisibility. Free screen recorder no root. https://play.google.com/store/apps/details?id=uk.org.invisibility.recordablefree&hl=en, 2014.
[15] S. Jana and V. Shmatikov. Memento: Learning secrets from process footprints. In Proceedings of the 2012 IEEE Symposium on Security and Privacy, 2012.
[16] E. Kim. No root screenshot it. https://play.google.com/store/apps/details?id=com.edwardkim.android.screenshotitfullnoroot, 2013.
[17] D. F. Kune, J. Koelndorfer, N. Hopper, and Y. Kim. Location leaks on the GSM air interface. In Proceedings of the 19th Network and Distributed System Security Symposium, 2012.
[18] C.-C. Lin, H. Li, X. Zhou, and X. Wang. Screenmilker: How to milk your Android screen for secrets. In Proceedings of the 21st Network and Distributed System Security Symposium, 2014.
[19] F. Liu. Windows malware attempts to infect Android devices. http://www.symantec.com/connect/blogs/windows-malware-attempts-infect-android-devices, 2014.
[20] H. Lockheimer. Android and security. http://googlemobile.blogspot.kr/2012/02/android-and-security.html, 2012.
[21] M. Niemietz and J. Schwenk. UI redressing attacks on Android devices. In Black Hat Abu Dhabi, 2012.
[22] P. Pearce, A. P. Felt, G. Nunez, and D. Wagner. AdDroid: Privilege separation for applications and advertisers in Android. In Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security, 2012.
[23] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna. Execute this! Analyzing unsafe and malicious dynamic code loading in Android applications. In Proceedings of the 21st Network and Distributed System Security Symposium, 2014.
[24] E. Protalinski. Android malware numbers exploded to 25,000 in June 2012. http://www.zdnet.com/android-malware-numbers-explode-to-25000-in-june-2012-7000001046, 2012.
[25] J. Rivera and R. van der Meulen. Gartner says annual smartphone sales surpassed sales of feature phones for the first time in 2013. http://www.gartner.com/newsroom/id/2665715, 2014.
[26] SmartUX. Screenshot UX. https://play.google.com/store/apps/details?id=com.liveov.shotux, 2012.
[27] X. Zhang, R. Gupta, and Y. Zhang. Cost and precision tradeoffs of dynamic data slicing algorithms. ACM Transactions on Programming Languages and Systems, 27:631–661, 2005.
[28] X. Zhou, S. Demetriou, D. He, M. Naveed, X. Pan, X. Wang, C. A. Gunter, and K. Nahrstedt. Identity, location, disease and more: Inferring your secrets from Android public resources. In Proceedings of the 20th ACM Conference on Computer and Communications Security, 2013.
[29] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang. The peril of fragmentation: Security hazards in Android device driver customizations. In Proceedings of the 2014 IEEE Symposium on Security and Privacy, 2014.
[30] Y. Zhou and X. Jiang. Detecting passive content leaks and pollution in Android applications. In Proceedings of the 20th Network and Distributed System Security Symposium, 2013.