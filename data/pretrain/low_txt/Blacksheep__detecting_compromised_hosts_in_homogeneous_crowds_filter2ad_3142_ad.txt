# Blacksheep: A System for Detecting Kernel-Level Rootkits in Similar Machine Configurations

## Abstract
This paper introduces Blacksheep, a system designed to detect kernel-level rootkit infections in a group of similarly configured machines. We discuss the current state of the art in this field, explain how Blacksheep extends it, and present the results of our analyses. We believe that Blacksheep would be a valuable tool for organizations with a homogeneous fleet of machines, as it can effectively recognize existing infections and zero-day exploits.

## 1. Introduction
Blacksheep is a novel system that detects kernel-level rootkit infestations by analyzing memory dumps from similar machines. The system relies on two main assumptions: (i) it is possible to collect comparable memory dumps, and (ii) rootkit infections modify memory dumps in a detectable way. This paper details the design, implementation, and evaluation of Blacksheep, along with its limitations and potential applications.

## 2. Methodology
### 2.1 Data Collection
#### 2.1.1 Windows 7 - QEMU Introspection
We acquired the first set of memory dumps using QEMU VM introspection on Windows 7 machines. These dumps were clean and infected with various rootkits, including Mebroot, Stuxnet, Rustock, and Blackenergy, as well as two rootkits from the TDSS family (tdss and tdl3), and the r2d2 Trojan developed by the German government.

#### 2.1.2 Windows XP - Driver-Acquired Memory
The second set of memory dumps was acquired using a custom memory acquisition driver from Windows XP machines running on VirtualBox. This method introduced noise into the analysis due to inconsistencies in the dump process. We performed common tasks on these machines (e.g., web browsing, working on Office documents, watching media files) to ensure diverse memory states.

### 2.2 Clustering and Analysis
Blacksheep uses hierarchical clustering to group memory dumps based on their similarities. Dumps that form small clusters (size 4 or less) are tagged as malicious, as we expect benign dumps to cluster together and infected ones to form outliers. The clustering threshold is a critical parameter that affects the detection rate.

## 3. Experimental Results
### 3.1 Windows 7 - QEMU Introspection
We tested Blacksheep on 40 memory dumps, with 20 clean and 20 infected. Using a clustering threshold of 1.8, Blacksheep achieved a true positive rate of 100% and a false positive rate of 0%. The hierarchical clustering results are shown in Figure 2, and the resulting clusters are detailed in Table 1.

### 3.2 Windows XP - Driver-Acquired Memory
For the Windows XP dataset, we clustered 10 clean dumps and 8 infected ones. With a clustering threshold of 0.6, Blacksheep produced 62.5% true positives and 0% false positives. With a threshold of 0.4, it achieved 75% true positives and 5.5% false positives. The hierarchical clustering results are shown in Figure 3, and the resulting clusters are detailed in Table 2.

## 4. Performance
The runtime performance of Blacksheep depends on several factors, including the size of the memory dumps, the presence of swap files, and the hardware configuration. For memory dumps of one gigabyte, we computed differences between pairs in approximately 10 minutes. The hierarchical clustering requires O(n^2) comparisons, but the results are cached, so new dumps require only O(n) comparisons. The comparisons can be parallelized, and the clustering step is computed quickly, allowing for horizontal scaling to increase performance linearly.

## 5. Discussion
### 5.1 Limitations
#### 5.1.1 Consistency of Memory Dumps
Blacksheep's effectiveness depends on the consistency of the memory dumps. Collecting dumps at similar states and times across all hosts is challenging. Inconsistencies in the dump process, especially in physical hardware, can introduce noise and affect the analysis.

#### 5.1.2 Evasion Techniques
Rootkits could evade detection by modifying high-entropy areas of the kernel memory. While such techniques are theoretically possible, they are difficult to implement and would likely make the rootkit unstable.

#### 5.1.3 System Updates
Updating a group of similar computers can introduce changes that Blacksheep might misinterpret as an infection. In such cases, Blacksheep should be disabled until a sufficient baseline is re-established.

### 5.2 Strengths
Blacksheep is agnostic to memory location randomization techniques like ASLR, as it compensates for relocation in its code analysis and uses relative memory locations for data and entry point analyses.

## 6. Conclusions
Blacksheep is a valuable tool for detecting kernel-level rootkit infections in a homogeneous fleet of machines. It offers significant benefits in recognizing existing infections and zero-day exploits, and it is easier to administer compared to current security solutions. We hope that our insights into the internal workings of the Windows kernel will be useful to the scientific community.

## 7. Acknowledgments
This work was supported by the Office of Naval Research (ONR) under Grant N000140911042 and the National Science Foundation (NSF) under grants CNS-0845559 and CNS-0905537.

## 8. References
[1] Gmer. http://www.gmer.net/, May 2012.
[2] Hbgary responder pro. http://www.hbgary.com/responder-pro-2, May 2012.
[3] Qemu website. http://qemu.org, May 2012.
[4] Windows academic program. http://www.microsoft.com/education/facultyconnection/articles/articledetails.aspx?cid=2416, Apr. 2012.
[5] A. Baliga, V. Ganapathy, and L. Iftode. Detecting kernel-level rootkits using data structure invariants. IEEE Transactions on Dependable and Secure Computing, Vol. 8, No. 5, Sept. 2010.
[6] B. Blunden. The Rootkit Arsenal. Wordware Publishing, 2009. Chapter 7.9.
[7] M. Burdach. Finding digital evidence in physical memory. In Black Hat Federal Conference, 2006.
[8] M. Carbone, W. Lee, W. Cui, M. Peinado, L. Lu, and X. Jiang. Mapping kernel objects to enable systematic integrity checking. In ACM Conf. on Computer and Communications Security, 2009.
[9] B. Cogswell and M. Russinovich. Rootkitrevealer. http://technet.microsoft.com/en-us/sysinternals/bb897445, Nov. 2008.
[10] M. D. Ernst, J. H. Perkins, P. J. Guo, S. McCamant, C. Pacheco, M. S. Tschantz, and C. Xiao. The daikon system for dynamic detection of likely invariants. Science of Computer Programming, 69, Dec. 2007.
[11] F. Gadaleta, N. Nikiforakis, J. Mühlberg, and W. Joosen. Hyperforce: Hypervisor-enforced execution of security-critical code. Information Security and Privacy Research, pages 126–137, 2012.
[12] F. Gadaleta, N. Nikiforakis, Y. Younan, and W. Joosen. Hello rootkitty: a lightweight invariance-enforcing framework. Information Security, pages 213–228, 2011.
[13] G. L. Garcia. Forensic physical memory analysis: an overview of tools and techniques. In TKK T- 110.5290 Seminar on Network Security, 2007.
[14] K. Griffin, S. Schneider, X. Hu, and T. cker Chiueh. Automatic generation of string signatures for malware detection.
[15] G. Hoglund. Rootkits: Subverting the Windows Kernel. Addison-Wesley, 2005.
[16] G. Jacob, H. Debar, and E. Filiol. Behavioral detection of malware: from a survey towards an established taxonomy. Journal in Computer Virology, 4:251–266, 2008. 10.1007/s11416-008-0086-0.
[17] A. Kapoor and R. Mathur. Predicting the future of stealth attacks. Virus Bulletin conference, Oct. 2011.
[18] J. D. Kornblum. Exploiting the rootkit paradox with windows memory analysis. International Journal of Digital Evidence, 2006.
[19] J. D. Kornblum. Using every part of the buffalo in windows memory analysis. Digital Investigation, Mar. 2007.
[20] Z. Li, M. Sanghi, Y. Chen, M. yang Kao, and B. Chavez. Hamsa: fast signature generation for zero-day polymorphic worms with provable attack resilience. In SP ’06: Proceedings of the 2006 IEEE Symposium on Security and Privacy, pages 32–47. IEEE Computer Society, 2006.
[21] M. H. Ligh. Volatility malware plugins. http://code.google.com/p/malwarecookbook.
[22] Z. Lin, J. Rhee, X. Zhang, D. Xu, and X. Jiang. Siggraph: Brute force scanning of kernel data structure instances using graph-based signatures. In the 17th Network and Distributed System Security Symposium, 2011.
[23] McAfee. Mcafee deepsafe. http://www.mcafee.com/us/solutions/mcafee-deepsafe.aspx, 2011.
[24] Microsoft. Kernel patch protection: Faq. http://msdn.microsoft.com/en-us/windows/hardware/gg487353, Sept. 2007.
[25] N. L. Petroni, J. Timothy, F. Aaron, W. William, and A. Arbaugh. An architecture for specification-based detection of semantic integrity violations in kernel dynamic data. In Proceedings of the USENIX Security Symposium, pages 289–304, 2006.
[26] M. E. Russinovich and D. A. Solomon. Windows Internals. Microsoft, 5th edition, June 2009.
[27] J. Rutkowska. Rootkits vs. stealth by design malware. https://www.blackhat.com/presentations/bh-europe-06/bh-eu-06-Rutkowska.pdf, 2006.
[28] J. Rutkowska. Beyond the cpu: Defeating hardware based ram acquisition (part i: Amd case). In Black Hat DC, 2007.
[29] A. Schuster. Pool allocations as an information source in windows memory forensics. In Pool Allocations as an Information Source in Windows Memory Forensics, 2006.
[30] A. Schuster. Searching for processes and threads in microsoft windows memory dumps. In Digital Investigation, 2006.
[31] A. Seshadri, M. Luk, N. Qu, and A. Perrig. Secvisor: A tiny hypervisor to provide lifetime kernel code integrity for commodity oses, 2007.
[32] R. Treit. Some observations on rootkits. http://blogs.technet.com/b/mmpc/archive/2010/01/07/some-observations-on-rootkits.aspx, Jan. 2010.
[33] D. Wagner. Mimicry attacks on host-based intrusion detection systems. Proceedings of the 9th ACM conference on computer and communications security, 2002.
[34] A. Walters. The volatility framework: Volatile memory artifact extraction utility framework. https://www. volatilesystems.com/default/volatility.
[35] Z. Wang, X. Jiang, W. Cui, and P. Ning. Countering kernel rootkits with lightweight hook protection. In ACM Conf. on Computer and Communications Security, Nov. 2009.
[36] Y. Xie, H. Kim, D. O’Hallaron, M. Reiter, and H. Zhang. Seurat: A pointillist approach to anomaly detection. In Recent Advances in Intrusion Detection, pages 238–257. Springer, 2004.
[37] H. Yin, P. Poosankam, S. Hanna, and D. Song. Hookscout: Proactive binary-centric hook detection. In Proceedings of the 7th Conference on Detection of Intrusions and Malware & Vulnerability Assessment, Bonn, Germany, July 2010.