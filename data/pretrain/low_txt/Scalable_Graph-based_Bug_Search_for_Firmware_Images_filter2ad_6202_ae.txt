### Handling Firmware Images in a Cross-Architecture Setting

The analysis and manipulation of firmware images require the capability to handle binary code across different architectures. For instance, the tracelet-based approach [20] captures execution sequences as features for code similarity checking, which can mitigate changes in control flow graphs (CFGs). However, this method is not suitable for cross-architecture bug detection due to differences in opcodes and register names.

Myles et al. [41] use k-grams on opcodes as a software birthmark technique, while TEDEM [46] captures semantics using the expression tree of a basic block. Both approaches are limited by the opcode differences across architectures. Rendezvous [34] was one of the first to explore code search in binary code but has two main limitations: it relies on n-gram features to improve search accuracy and decomposes the entire CFG of a function into subgraphs. Our evaluation shows that matching entire CFGs via graph matching is more accurate than comparing subgraphs, as even a single edge addition can introduce significant differences in the number of subgraphs for two equivalent CFGs. Thus, subgraph decomposition reduces search accuracy. Additionally, like other methods, Rendezvous is designed for a single architecture.

### Control Flow Graph (CFG)-Based Bug Searching

CFG-based bug searching is a prevalent approach for finding bugs in firmware images. Existing works often focus on improving matching accuracy through feature selection or matching algorithms. Flake et al. [25] proposed matching CFGs to overcome compiler optimizations such as instruction reordering and changes in register allocation. However, their approach relies on exact graph matching, which is computationally expensive and impractical for large-scale bug searches.

Pewny et al. [45] use input/output pairs to capture semantics at the basic-block level for code similarity computation, but this method is also expensive for feature extraction and graph matching. DiscovRe [23] uses pre-filtering to facilitate CFG-based matching, but our evaluation shows that pre-filtering is unreliable and produces many false negatives. Zynamics BinDiff [21] and BinSlayer [13] use a similarity metric based on CFG isomorphism to check the similarity between two binaries. These tools are not designed for bug searching, especially for finding bug doublets across different binaries where the CFGs are entirely different. BinHunt [26] and iBinHunt [39] use symbolic execution and a theorem prover to check semantic equivalence between basic blocks. These methods are computationally intensive and not feasible for large-scale firmware bug searches, as they require extensive binary analysis to extract and verify equations.

### Large-Scale Firmware Analysis

Automatic large-scale firmware analysis has made significant progress. Costin et al. [19] analyzed over 30,000 firmware samples, but their approach focuses on extracting and investigating artifacts such as private encryption keys rather than performing in-depth analysis. Therefore, it is not suitable for finding general vulnerabilities without obvious artifacts.

Dynamic analysis-based bug search in firmware images, such as Blanket-execution [22], uses the dynamic run-time environment of the program as features for code search. This method can handle CFG changes but has only been evaluated in a single architecture. Dynamic analysis for firmware images is still in its early stages [17, 61] and has not yet demonstrated effectiveness in large-scale settings.

### Conclusions

In this paper, inspired by image retrieval techniques, we proposed a numeric-feature-based search technique to address scalability issues in existing in-depth IoT bug search approaches. We developed methods to learn higher-level features from raw features (control flow graphs) and performed searches based on the learned feature vectors instead of direct pairwise matching. We implemented a bug search system called Genius and compared it with state-of-the-art bug search approaches. Extensive experimental results show that Genius achieves better accuracy and is orders of magnitude faster than most existing methods. To further demonstrate scalability, Genius was evaluated on 8,126 devices with 420 million functions across three architectures and 26 vendors, completing queries in less than one second on average.

### Acknowledgments

We would like to thank the anonymous reviewers for their feedback. This research was supported in part by the National Science Foundation Grant #1054605, Air Force Research Lab Grant #FA8750-15-2-0106, and DARPA CGC Grant #FA8750-14-C-0118. The opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

### References

[1] Cybersecurity and the Internet of Things. http://www.ey.com/Publication/vwLUAssets/EY-cybersecurity-and-the-internet-of-things.pdf.

[2] DDWRT ftp. http://download1.dd-wrt.com/dd-wrtv2/downloads/others/eko/BrainSlayer-V24-preSP2/.

[3] Industrial Utilities and Devices Where the Cyber Threat Lurks. http://www.cyactive.com/industrial-utilities-devices-cyber-threat-lurks/.

[4] IoT When Cyberattacks Have Physical Effects. http://www.federaltimes.com/story/government/solutions-ideas/2016/04/08/internet-things-when-cyberattacks-have-discretionary-physical-effects/82787430/.

[5] MongoDB. https://www.mongodb.com.

[6] Nearpy. https://pypi.python.org/pypi/NearPy.

[7] DD-WRT Firmware Image r21676. ftp://ftp.dd-wrt.com/others/eko/BrainSlayer-V24-preSP2/2013/05-27-2013-r21676/senao-eoc5610/linux.bin, 2013.

[8] ReadyNAS Firmware Image v6.1.6. http://www.downloads.netgear.com/files/GDC/READYNAS-100/ReadyNASOS-6.1.6-arm.zip, 2013.

[9] A. Andoni and P. Indyk. Near-optimal hashing algorithms for approximate nearest neighbor in high dimensions. Communications of the ACM, 51, 2008.

[10] R. Arandjelovic and A. Zisserman. All about VLAD. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 1578–1585, 2013.

[11] T. Avgerinos, S. K. Cha, A. Rebert, E. J. Schwartz, M. Woo, and D. Brumley. Automatic exploit generation. Communications of the ACM, 57(2):74–84, 2014.

[12] M.-F. Balcan, A. Blum, and A. Gupta. Approximate clustering without the approximation. In Proceedings of the twentieth Annual ACM-SIAM Symposium on Discrete Algorithms, pages 1068–1077, 2009.

[13] M. Bourquin, A. King, and E. Robbins. Binslayer: Accurate comparison of binary executables. In Proceedings of the 2nd ACM SIGPLAN Program Protection and Reverse Engineering Workshop, 2013.

[14] H. Bunke and K. Shearer. A graph distance metric based on the maximal common subgraph. Pattern Recognition Letters, 19(3):255–259, 1998.

[15] S. K. Cha, M. Woo, and D. Brumley. Program-adaptive mutational fuzzing. In Oakland, 2015.

[16] K. Chatfield, V. S. Lempitsky, A. Vedaldi, and A. Zisserman. The devil is in the details: An evaluation of recent feature encoding methods. In BMVC, volume 2, page 8, 2011.

[17] D. D. Chen, M. Egele, M. Woo, and D. Brumley. Towards automated dynamic analysis for Linux-based embedded firmware. In NDSS, 2016.

[18] K. Chen, P. Wang, Y. Lee, X. Wang, N. Zhang, H. Huang, W. Zou, and P. Liu. Finding unknown malice in 10 seconds: Mass vetting for new threats at the Google Play scale. In USENIX Security, 2015.

[19] A. Costin, J. Zaddach, A. Francillon, and D. Balzarotti. A large-scale analysis of the security of embedded firmwares. In USENIX Security, 2014.

[20] Y. David and E. Yahav. Tracelet-based code search in executables. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation, 2014.

[21] T. Dullien and R. Rolles. Graph-based comparison of executable objects (English version). SSTIC, 5:1–3, 2005.

[22] M. Egele, M. Woo, P. Chapman, and D. Brumley. Blanket execution: Dynamic similarity testing for program binaries and components. In USENIX Security, 2014.

[23] S. Eschweiler, K. Yakdan, and E. Gerhards-Padilla. DiscovRe: Efficient cross-architecture identification of bugs in binary code. In NDSS, 2016.

[24] Q. Feng, A. Prakash, M. Wang, C. Carmony, and H. Yin. Origen: Automatic extraction of offset-revealing instructions for cross-version memory analysis. In ASIACCS, 2016.

[25] H. Flake. Structural comparison of executable objects. In DIMVA, volume 46, 2004.

[37] McCabe. More Complex = Less Secure. Miss a Test Path and You Could Get Hacked. http://www.mccabe.com/sqe/books.htm, 2012.

[38] A. McCallum, K. Nigam, et al. A comparison of event models for naive Bayes text classification. In the workshop on learning for text categorization, 1998.

[39] J. Ming, M. Pan, and D. Gao. iBinHunt: Binary hunting with inter-procedural control flow. In Information Security and Cryptology, pages 92–109. Springer, 2012.

[40] F. Murtagh. A survey of recent advances in hierarchical clustering algorithms. The Computer Journal, 26(4):354–359, 1983.

[41] G. Myles and C. Collberg. K-gram based software birthmarks. In Proceedings of the 2005 ACM Symposium on Applied Computing, 2005.

[26] D. Gao, M. K. Reiter, and D. Song. BinHunt: Automatically finding semantic differences in binary programs. In Information and Communications Security, 2008.

[27] J. Holcombe. SOHO Network Equipment (Technical Report). https://securityevaluators.com/knowledge/case_studies/routers/soho_techreport.pdf.

[28] The IDA Pro Disassembler and Debugger. http://www.datarescue.com/idabase/.

[29] J. Jang, A. Agrawal, and D. Brumley. ReDebug: Finding unpatched code clones in entire OS distributions. In Oakland, 2012.

[30] L. Jiang, T. Mitamura, S.-I. Yu, and A. G. Hauptmann. Zero-example event search using multimodal pseudo relevance feedback. In ICMR, 2014.

[31] L. Jiang, W. Tong, and A. G. Meng, Deyu and Hauptmann. Towards efficient learning of optimal spatial bag-of-words representations. In ICMR, 2014.

[32] L. Jiang, S.-I. Yu, D. Meng, T. Mitamura, and A. G. Hauptmann. Bridging the ultimate semantic gap: A semantic search engine for internet videos. In ICMR, 2015.

[33] T. Kamiya, S. Kusumoto, and K. Inoue. CCFinder: A multilinguistic token-based code clone detection system for large-scale source code. IEEE Transactions on Software Engineering, 28(7):654–670, 2002.

[34] W. M. Khoo, A. Mycroft, and R. Anderson. Rendezvous: A search engine for binary code. In Proceedings of the 10th Working Conference on Mining Software Repositories, 2013.

[35] Z. Li, S. Lu, S. Myagmar, and Y. Zhou. CP-Miner: A tool for finding copy-paste and related bugs in operating system code. In OSDI, volume 4, pages 289–302, 2004.

[36] W. Liu, J. Wang, S. Kumar, and S.-F. Chang. Hashing with graphs. In ICML, 2011.

[42] M. Newman. Networks: An Introduction. 2010.

[43] A. Y. Ng, M. I. Jordan, Y. Weiss, et al. On spectral clustering: Analysis and an algorithm. Advances in Neural Information Processing Systems, 2:849–856, 2002.

[44] H. Perl, S. Dechand, M. Smith, D. Arp, F. Yamaguchi, K. Rieck, S. Fahl, and Y. Acar. VCCFinder: Finding potential vulnerabilities in open-source projects to assist code audits. In CCS, 2015.

[45] J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz. Cross-architecture bug search in binary executables. In Oakland, 2015.

[46] J. Pewny, F. Schuster, L. Bernhard, T. Holz, and C. Rossow. Leveraging semantic signatures for bug search in binary programs. In ACSAC, 2014.

[47] G. Qian, S. Sural, Y. Gu, and S. Pramanik. Similarity between Euclidean and cosine angle distance for nearest neighbor queries. In Proceedings of the Symposium on Applied Computing, pages 1232–1237, 2004.

[48] A. Rebert, S. K. Cha, T. Avgerinos, J. Foote, D. Warren, G. Grieco, and D. Brumley. Optimizing seed selection for fuzzing. In USENIX Security, 2014.

[49] K. Riesen and H. Bunke. Approximate graph edit distance computation by means of bipartite graph matching. Image and Vision Computing, 27(7):950–959, 2009.

[50] M. Shahrokh Esfahani. Effect of separate sampling on classification accuracy. Bioinformatics, 30:242–250, 2014.

[51] E. C. R. Shin, D. Song, and R. Moazzezi. Recognizing functions in binaries with neural networks. In USENIX Security, 2015.

[52] Y. Shoshitaishvili, R. Wang, C. Hauser, C. Kruegel, and G. Vigna. Firmalice: Automatic detection of authentication bypass vulnerabilities in binary firmware. In NDSS, 2015.

[53] J. Sivic and A. Zisserman. Video Google: A text retrieval approach to object matching in videos. In IEEE International Conference on Computer Vision, 2003.

[54] M. Slaney and M. Casey. Locality-sensitive hashing for finding nearest neighbors. Signal Processing Magazine, IEEE, 25(2):128–131, 2008.

[55] N. Stephens, J. Grosen, C. Salls, A. Dutcher, and R. Wang. Driller: Augmenting fuzzing through selective symbolic execution. In NDSS, 2016.

[56] M. Wall. GALib: A C++ library of genetic algorithm components. Mechanical Engineering Department, Massachusetts Institute of Technology, 87:54, 1996.

[57] R. Weber, H.-J. Schek, and S. Blott. A quantitative analysis and performance study for similarity-search methods in high-dimensional spaces. In VLDB, volume 98, pages 194–205, 1998.

[58] F. Yamaguchi, A. Maier, H. Gascon, and K. Rieck. Automatic inference of search patterns for taint-style vulnerabilities. In Oakland, 2015.

[59] J. Yang, Y.-G. Jiang, A. G. Hauptmann, and C.-W. Ngo. Evaluating bag-of-visual-words representations in scene classification. In International Workshop on Multimedia Information Retrieval, 2007.

[60] S.-I. Yu, L. Jiang, Z. Xu, Y. Yang, and A. G. Hauptmann. Content-based video search over 1 million videos with 1 core in 1 second. In ICMR, 2015.

[61] J. Zaddach, L. Bruno, A. Francillon, and D. Balzarotti. Avatar: A framework to support dynamic security analysis of embedded systems' firmwares. In NDSS, 2014.

[62] M. Zhang, Y. Duan, Q. Feng, and H. Yin. Towards automatic generation of security-centric descriptions for Android apps. In CCS, 2015.

[63] M. Zhang, Y. Duan, H. Yin, and Z. Zhao. Semantics-aware Android malware classification using weighted contextual API dependency graphs. In CCS, 2014.