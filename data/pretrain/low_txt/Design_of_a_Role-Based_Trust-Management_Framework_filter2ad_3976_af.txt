### Drawbacks of the Current Approach

There are several drawbacks to the current approach. First, most Datalog or Prolog engines do not meet our requirements. To handle a large number of credentials stored in a distributed manner, we need a goal-oriented (top-down) inference engine. This rules out many deductive database implementations that use bottom-up evaluation algorithms. Additionally, the inference engine must guarantee termination, which eliminates many Prolog engines that can enter infinite loops with recursive rules.

Second, the size of a full-featured Datalog inference engine may be unacceptable for some applications. For example, XSB [14] is a system that meets our goal-orientation and termination requirements. One of the authors has previously used XSB while working on Delegation Logic [17]. However, even the stripped-down version of XSB is several megabytes in size, whereas the current RT0 engine is less than 40KB.

Third, based on our experience, it is often challenging to integrate closely with a Datalog engine, and there is less control over the inference process than needed. For instance, it might be difficult to interleave credential collection with inferencing steps, as required by some applications.

Lastly, we require support for functions and predicates for application-defined data types. For these reasons, we are developing direct algorithms that can be implemented in general programming languages.

### Representation and Revocation

We use XML to represent both ADSDs and credentials. Credentials are digitally signed. To address the revocation issue, we plan to require each credential to have an issue time and a validity period, similar to the approach suggested in [18]. Delegation credentials should have a short lifespan and be renewed when necessary. Definition credentials can include verification mechanism descriptions, such as an address for finding a credential revocation list (CRL) or the address and public key of an online certificate status verification server.

### Future Work

In this paper, we have restricted our design to features that can be implemented in safe Datalog. However, several additional features that cannot be implemented in Datalog would also be desirable. While non-monotonicity is generally inappropriate for a decentralized environment, certain non-monotonic constraints may be useful. For example, mutual exclusion among roles that can be activated simultaneously (also known as dynamic separation of duty) may be important to some organizations. Enforcing this policy requires complete information about which roles are being activated, which can be expected to be available when processing access requests.

Another desirable feature would enable authorization to depend on state information, such as history or environmental data. For instance, history information is needed to implement the Chinese Wall policy [6]. Policies representing such policies often result in unsafe Datalog rules. We plan to address this by distinguishing a class of request-processing rules that are used only in connection with a specific request. When the request is made, it supplies values for all variables in the request-processing rule that might otherwise be unsafe.

Yet another desirable feature is the ability to represent unbounded, structured resources, such as directory hierarchies. Handling these requires going beyond Datalog. We plan to address this by using Datalog with constraints to replace Datalog as the underlying foundation. Ongoing work on such extensions will be reported in the near future.

### Related Work

In Section 1, we discussed the limitations of capability-style systems such as KeyNote and SPKI 1.0 and argued that the trust-management systems SPKI/SDSI [8, 10], KeyNote [2], and TPL [15] cannot express the five requirements for attribute-based access control. Here, we provide additional comparisons of RT with related work.

RT unifies RBAC and trust-management concepts, differing from previous TM systems by using roles as a central notion. This allows for selective role activation and delegation of these activations, supporting the use of partial authority in a request, which no previous TM systems support. The two role product operators in RT D are more expressive than threshold structures in existing trust management systems.

The SDSI part of SPKI/SDSI is equivalent to RT0 minus type-4 credentials (intersection). The SPKI part of SPKI/SDSI is a capability-style system. SPKI/SDSI is roughly equivalent to RT1 with no variables, but it has one compound data type for tags.

KeyNote [2] is a capability-style system similar to SPKI. A KeyNote credential is of the form: "A.r(h1, ..., hn) <- B.r(h1, ..., hn), conditions", where conditions are boolean expressions on h1, ..., hn. KeyNote allows conditions to contain operators like regular expression matching, which is expressive but non-declarative.

As discussed in Section 1, DL does not have the abstraction of subjects. On the other hand, DL has integer delegation depth and allows querying delegations, which are not allowed in RT. RT0,1,2 can be viewed as syntactically sugared versions of a subset of DL.

Our treatment of RT D uses role activations like "D as A.R" and atoms like forRole(B, D, A.R). The ABLP logic [1] also has "as", which it uses for restricting privileges. In ABLP, "D as R" has less privilege than D, and "D1 as R" and "D2 as R" may have different privileges. In RT, the use of roles follows that in RBAC, and "as" is interpreted as activating roles. In RT, "D1 as A.R" has the same privilege as "D2 as A.R". The difference between D1 and D2 becomes significant only when the role product operator ⊗ is involved and/or auditing is desired.

The ABLP logic also has an operator "for", which can be encoded using a quoting operator |, and a conjunction operator ∧. The combination of ∧ and | makes the ABLP logic intractable, even though it does not support localized name space for roles or parameterized roles. In RT, ∧ is implicitly achieved by having multiple credentials and manifold roles. The statement forRole(B, D, A.R) in RT D can be roughly read as "B for (D as A.R)"; this is the only form of statement RT D allows. Note that "B for B1 for D as A.R" can be achieved by two delegation credentials from D to B1 and then to B. We do not distinguish between "B for B1 for D as A.R" and "B for B2 for D as A.R". They are achieved by different credential chains, but B would have the same privilege in both cases. This reduces computational complexity, makes RT easier to understand, and still seems sufficient to capture policy concepts motivating the ABLP logic.

### Conclusions

We introduce the RT framework, a family of Role-based Trust-management languages for representing policies and credentials in distributed authorization. RT combines the strengths of role-based access control and trust-management systems and is especially suitable for attribute-based access control. We present four components of the RT framework: RT1, RT2, RT T, and RT D. Together, they have seven forms of credentials and support localized authority of roles, delegation in role definition, linked roles, parameterized roles, manifold roles, and delegation of role activations. We also presented a translation from RT credentials to Datalog rules, which serves as a logic-based semantics for RT and shows that the semantics is algorithmically tractable.

### Acknowledgements

This work is supported by DARPA through SPAWAR contracts N66001-01-C-8005 and N66001-00-C-8015 and MURI grant N00014-97-1-0505 administered by ONR. Raghuram Sri Sivalanka made some helpful comments on an earlier version of this paper. We also thank anonymous reviewers for their helpful reports.

### References

[1] Martín Abadi, Michael Burrows, Butler Lampson, and Gordon Plotkin. A calculus for access control in distributed systems. Transactions on Programming Languages and Systems, 15(4):706–734, October 1993.

[2] Matt Blaze, Joan Feigenbaum, and Angelos D. Keromytis. The KeyNote trust-management system, version 2. IETF RFC 2704, September 1999.

[3] Matt Blaze, Joan Feigenbaum, and Jack Lacy. Decentralized trust management. In Proceedings of the 1996 IEEE Symposium on Security and Privacy, pages 164–173. IEEE Computer Society Press, May 1996.

[4] Piero Bonatti and Pierangela Samarati. Regulating service access and information release on the web. In Proceedings of the 7th ACM Conference on Computer and Communications Security (CCS-7), pages 134–143. ACM Press, November 2000.

[5] Tim Bray, Dave Hollander, and Andrew Layman. Namespaces in XML. W3C Recommendation, January 1999.

[6] David F.C. Brewer and Michael J. Nash. The Chinese wall security policy. In Proceedings of the 1989 IEEE Symposium on Security and Privacy, pages 206–218, Los Alamitos, May 1989. IEEE Computer Society Press.

[7] David D. Clark and David R. Wilson. A comparison of commercial and military computer security policies. In Proceedings of the 1987 IEEE Symposium on Security and Privacy, pages 184–194. IEEE Computer Society Press, May 1987.

[8] Dwaine Clarke, Jean-Emile Elien, Carl Ellison, Matt Fredette, Alexander Morcos, and Ronald L. Rivest. Certificate chain discovery in SPKI/SDSI. Journal of Computer Security, 9(4):285–322, 2001.

[9] William F. Dowling and Jean H. Gallier. Linear-time algorithms for testing the satisfiability of propositional Horn formulae. Journal of Logic Programming, 1(3):267–284, 1984.

[10] Carl Ellison, Bill Frantz, Butler Lampson, Ron Rivest, Brian Thomas, and Tatu Ylonen. SPKI certificate theory. IETF RFC 2693, September 1999.

[11] Stephen Farrell and Russell Housley. An Internet attribute certificate profile for authorization, 2001.

[12] Luigi Giuri and Pietro Iglio. Role templates for content-based access control. In Proceedings of the Second ACM Workshop on Role-Based Access Control (RBAC’97), pages 153–159, November 1997.

[13] Martin Grohe, Thomas Schwentick, and Luc Segoufin. When is the evaluation of conjunctive queries tractable? In Proceedings of the 33rd Annual Symposium on Theory of Computing (STOC’01), pages 657–666, July 2001.

[14] The XSB Research Group. The XSB programming system. http://xsb.sourceforge.net/.

[15] Amir Herzberg, Yosi Mass, Joris Mihaeli, Dalit Naor, and Yiftach Ravid. Access control meets public key infrastructure, or: Assigning roles to strangers. In Proceedings of the 2000 IEEE Symposium on Security and Privacy, pages 2–14. IEEE Computer Society Press, May 2000.

[16] Trevor Jim. SD3: a trust management system with certificate evaluation. In Proceedings of the 2001 IEEE Symposium on Security and Privacy, pages 106–115. IEEE Computer Society Press, May 2001.

[17] Ninghui Li. Delegation Logic: A Logic-based Approach to Distributed Authorization. PhD thesis, New York University, September 2000.

[18] Ninghui Li and Joan Feigenbaum. Nonmonotonicity, user interfaces, and risk assessment in certificate revocation (position paper). In Proceedings of the 5th International Conference on Financial Cryptography (FC’01). To be published by Springer. http://crypto.stanford.edu/~ninghui/papers/fc01.pdf.

[19] Ninghui Li, Benjamin N. Grosof, and Joan Feigenbaum. A practically implementable and tractable delegation logic. In Proceedings of the 2000 IEEE Symposium on Security and Privacy, pages 27–42. IEEE Computer Society Press, May 2000.

[20] Ninghui Li, William H. Winsborough, and John C. Mitchell. Distributed credential chain discovery in trust management (extended abstract). In Proceedings of the Eighth ACM Conference on Computer and Communications Security (CCS-8), pages 156–165. ACM Press, November 2001.

[21] Emil Lupu and Morris Sloman. Reconciling role-based management and role-based access control. In Proceedings of the Second ACM Workshop on Role-Based Access Control (RBAC’97), pages 135–141, November 1997.

[22] I. V. Ramakrishnan, Prasad Rao, Konstantinos Sagonas, Terrance Swift, and David S. Warren. Efficient access mechanisms for tabled logic programs. Journal of Logic Programming, 38(1):31–55, January 1999.

[23] Ravi S. Sandhu, Edward J. Coyne, Hal L. Feinstein, and Charles E. Youman. Role-based access control models. IEEE Computer, 29(2):38–47, February 1996.

[24] Richard T. Simon and Mary Ellen Zurko. Separation of duty in role-based environments. In Proceedings of The 10th Computer Security Foundations Workshop (CSFW-10), pages 183–194. IEEE Computer Society Press, June 1997.

[25] Jeffrey D. Ullman. Principles of Databases and Knowledge-Base System, volume 2. Computer Science Press, 1989.

[26] William H. Winsborough and Ninghui Li. Towards practical automated trust negotiation. In IEEE 3rd Intl. Workshop on Policies for Distributed Systems and Networks (Policy 2002). IEEE Press, June 2002.

[27] William H. Winsborough, Kent E. Seamons, and Vicki E. Jones. Automated trust negotiation. In DARPA Information Survivability Conference and Exposition. IEEE Press, January 2000.