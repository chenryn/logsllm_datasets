### Copyright and Disclaimer
© 2016 Verint Systems Inc. All rights reserved worldwide

### Invisible Attacks
- **Invisible Network Traffic**: Google Drive, Dropbox
- **Invisible Malware**: Task Scheduler, WMI, PowerShell
- **Low Visibility of Cyber Threats**:
  - Fileless malware and scripts are on the rise.
  - PowerShell can be embedded in macros and document files.
  - PowerShell and WMI, built into Windows, are frequently used in post-exploitation activities, making fileless threats more prevalent.

### Fileless Malware Attacks
- **PowerShell Capabilities**:
  - A single line of PowerShell can:
    - Detect system architecture (x86 or x64).
    - Download a binary from a website.
    - Execute the binary using the `Invoke-Expression` (iex) command.
  - Example: `Invoke-Expression` runs commands or expressions on the local computer, allowing for the installation of a backdoor in one line.
- **Self-Signed Certificates**:
  - The malicious program is self-signed but added to the trusted root chain, making it appear as a valid signature.

### Bypassing Signature Checks
- **Import Self-Signed Certificate**:
  - TMPolicy (2).dll pretends to be msisip.dll.
  - DLL entry points and exported APIs execute `WinExec("tmpolicy.dll", 0)`.
  - TMPolicy (1).dll is actually a PE file (tmpolicy.dll).

### TMPolicy Sample Overview
- **Behavior**:
  - Determines if the system is 32-bit or 64-bit and generates different payloads.
  - In Windows XP, drops srvlic.dll + fake file.
  - In Windows 7, drops msTracer.dll + fake file.
  - Fake files are typically placed in:
    - `C:\Documents and Settings\All Users\Application Data\Windows CE\`
  - C2 Connections:
    - `help.adobeservice.net:80`, `help.adobeservice.net:8080`
    - `assist.adobeservice.net:443`, `assist.adobeservice.net:1863`

### Execution on x86 Windows XP
- **Execution Process**:
  - One of the `svchost.exe` processes loads `srvsvc.dll`.
  - `srvsvc.dll` attempts to load `srvlic.dll` when `LoadLicensingLibrary()` is called.
  - The fake `srvlic.dll` is loaded via DLL side-loading/path hijacking.
  - When `srvlic.dll` is loaded, it reads and decrypts the "fake" file.
  - The decrypted file is copied to a new memory block, making it undetectable by process explorers.

### Dll File Mapping
- **Dll File Mapping**:
  - The Dll file is mapped to memory blocks.

### Execution on x64 Windows 7
- **TMPolicy.exe Actions**:
  1. Drops `C:\ProgramData\temp0` and moves it to `C:\Users\<username>\AppData\Local\Temp\msTracer.dll`.
  2. Moves `msTracer.dll` to `C:\Windows\system32` (theoretically restricted by UAC).
  3. When `msTracer.dll` is loaded, it reads and decrypts the "fake" file.
  4. Creates a batch file to delete all files.
- **Vulnerable Services**:
  - `SearchIndexer.exe` and `SearchProtocolHost.exe` both have the same Dll side-loading vulnerability.

### Bypassing UAC on Windows 7
- **UAC Bypass**:
  - `TMPolicy.exe` cannot move `msTracer.dll` to `system32` due to UAC.
  - Bypass UAC restrictions using:
    - `makecab.exe /V1 "C:\Users\<username>\AppData\Local\Temp\msTracer.dll" "C:\Users\<username>\AppData\Local\Temp\msTracer.dll.msu"`
    - `wusa.exe /quiet "C:\Users\<username>\AppData\Local\Temp\msTracer.dll.msu" /extract:C:\Windows\system32`
  - `wusa.exe` (Windows Update Standalone Installer) works from Windows 7 up to version 10.1.10136.

### Encryption/Decryption of Fake Files
- **Encryption/Decryption Process**:
  - Each run of `TMPolicy.exe` generates different fake files, but the decrypted content remains the same.
  - Fake file content = 4-byte Secret Key + Encrypted Content.
  - Secret key generated by `rand()` function.
  - **Secret Key and Cipher**:
    - First 4 bytes are the secret key.
    - Cipher = ENCRYPT(Plain, Secret_Key)
    - Plain = DECRYPT(Cipher, Secret_Key)
  - **Reduced Sequence**:
    - 128-byte table used for encryption and decryption.
  - **Chosen Sequence**:
    - Calculate chosen sequence: 4 bytes.
    - Build first secret map: 256 bytes.
    - Rearrange first secret map four times with chosen_sequence[0-4].
    - Build second secret map: 256 bytes.
  - **Encryption and Decryption**:
    - Encryption: `encrypted_data[i] = second_secret_map[original_data[i]]`
    - Decryption: `decrypted_data[i] = reversed_second_secret_map[encrypted_data[i]]`

### Operation TooHash (H2)
- **Discovery**:
  - G DATA SecurityLabs discovered a spyware campaign in March 2014.
  - Targeted cyber attack on companies and organizations to steal sensitive information using spear-phishing.
- **Hash Values**:
  - `03/11/2014`: `8d263d5dae035e3d97047171e1cbf841` (102年尾牙、103年春酒精致菜单.xls)
  - `7251073c67db6421049ee2baf4f31b62` (李辉简历.doc)
  - `2ec306ef507402037e9c1eeb81276152` (文件列表.xls)
  - `6b83319cf336179f2105999fe586242c` (Wo.doc)
- **C2 Domains**:
  - `*.cnnic-micro.com`, `*.adobeservice.net`, `*.intarnetservice.com`

### Indicators of New OperationTooHash
- **Hash Values**:
  - `650C58E995A471FA4BE6C49A32F7899B`
  - `4DBD68D3741D46170D2585AAE4336B80`
- **IP Addresses and Domain Names**:
  - `help.adobeservice.net`
  - `help.adobeservice.net`
- **Network/Host Artifacts**:
  - En/Decode Algorithm, Strings
  - Connection Protocol, User-agent
- **Tools**:
  - `TMPolicy.exe`
- **TTPs**:
  - Spearphishing email
  - UAC bypass, `wusa.exe`
  - Deploy through Anti-Virus
  - Dll-Side loading

### Machine-Readable Threat Intelligence
- **Automated & Orchestrated Cyber Intelligence**:
  - Comprehensive: Active + Passive Monitoring
  - Multiple Dimensions: Network + Endpoint Forensics + Files Analysis
  - Automated Analysis: Intelligence-Oriented Analysis + Machine Learning
  - Visualization: Unified Investigation Platform

© 2016 Verint Systems Inc. All rights reserved worldwide