### Access Control and Message Authentication in IoT Scenarios

The access control rule for both the message sender (source) and recipient is defined as follows:

\[ \text{allowed}(s, o, R) \Rightarrow (o.\text{URI} \in s.\text{URI}_r) \land (o.\text{URI} \in o.\text{source}.\text{URI}_w) \]

In this equation, \(\text{allowed}(s, o, R)\) indicates that the subject \(s\) is permitted to have the right \(R\) over the object \(o\). This means that a recipient \(s\) is allowed to receive a message \(o\). The decision is made by checking the conditions on the right side of the implication. In IoT scenarios, this rule ensures that, from the recipient's perspective, if the message's source (\(o.\text{source}\), e.g., a user client that sent the message) has lost the rights to access the topic from which the message originated (checked by verifying if \(o.\text{URI}\) is not in \(o.\text{source}.\text{URI}_w\)), the message (e.g., a Will Message) should be rejected. Additionally, this rule checks whether the recipient is allowed to receive the message by verifying if the message's topic (\(o.\text{URI}\)) is in the set of allowed topics \(s.\text{URI}_r\). This rule bridges the gap in considering the security implications for message recipients and can mitigate message-related attacks (as discussed in Sections III-A and III-B).

### Discussion

MOUCON also supports other security policies. For example, we can define a rule to authorize a message sender based on its attribute \(\text{URI}_w\), which specifies the topics it is allowed to send messages to. A more comprehensive solution should also consider how to properly update the sender and recipient's privileges during the runtime of an IoT system. This includes dynamically revoking a client's Read/Write privileges and authorizing such revocation requests by the cloud. In the future, we plan to extend our model to safeguard other messaging protocols, such as CoAP, when they operate in an IoT environment. This will involve extending the attribute sets and corresponding authorization rules to enhance the protection of these protocols.

### Implementation and Evaluation

We implemented the above-mentioned protection on Mosquitto (version 1.5.4, which originally did not include our protection). Specifically, we modified the relevant data structures related to its messages (struct mosquitto_msg_store) to add security-related attributes (e.g., a message's source) and added authorization functions to its broker (e.g., checking the message source before delivery). We also added the proposed ClientId restriction to the broker's existing access control function [52], which is used for establishing sessions.

We deployed our secured version of Mosquitto in a lab environment and evaluated its effectiveness and performance overhead. Both our secured Mosquitto and the original unprotected Mosquitto were deployed on a workstation with a 3.40GHz Intel i7-6700 CPU, 15.6GB of memory, and 475.3GB of disk space. We ran scripts on laptops (2.2 GHz Intel Core i7, 16 GB Memory, 251GB SSD and 2.3 GHz Intel Core i5, 16 GB Memory, 251GB SSD) that acted as MQTT clients. To evaluate the effectiveness of our protection, we launched all the attacks described in Section III. Our secured Mosquitto successfully defeated all attacks, while the unprotected server did not detect any.

To evaluate the performance overhead introduced by our added protection, we ran concurrent clients to publish messages and the same number of subscribers to receive messages. For each server, we recorded the average delay (in milliseconds) between message publishing and receiving, and the average CPU and memory usage during the period. We repeated the experiment for different numbers of concurrent publishing clients, ranging from 1,000 to 8,000. The results (detailed in Table II) show that our added protection incurs negligible messaging delay (at most 0.63%) and memory overhead (at most 0.16%). Although CPU usage is higher (around 10%), this is within normal expectations, as adding critical security checks usually comes at a cost, especially compared to a non-protected implementation.

### Discussion and Future Work

#### Lessons Learned

The most important lesson learned from our study is the caution one should take when applying a utility-oriented, common-purpose protocol to domains that may involve malicious parties. In such cases, both the scenarios the protocol does not cover and individual states of the protocol need to be evaluated to identify the gap between what the protocol can protect and what needs to be protected. Specifically, in the use of general messaging protocols for IoT device-user communication, our study highlights that not only should ClientId and its related states be safeguarded with proper authentication and authorization, but the entire revocation process, which is security-critical, needs to be added to the protocol with protection in place. Note that although our research focuses on MQTT due to its wide deployment, other messaging protocols such as Firehose [53], CoAP [54], AMQP [55], JoyLink [56], and Alink [57] may also have similar issues. Indeed, we discovered a similar revocation issue in the Firehose WebSocket on Samsung’s Artik IoT cloud [53], with Samsung’s acknowledgment: the cloud fails to terminate a client’s session for receiving messages even after its privilege expires.

Mitigating such authentication/authorization flaws requires a joint effort from both the protocol designer and the IoT manufacturer. As mentioned earlier, though the MQTT Technical Committee (TC) starts enhancing the protocol against the threats we discovered, manufacturers also need to do their part. For this purpose, uniform interfaces that enable them to securely connect their devices and users to the cloud through different messaging protocols are valuable. Our approach makes a first step toward this end and is released online [14].

#### Automated Discovery of Flaws

Based on our understanding of the security pitfalls in applying generic messaging protocols to support IoT management, we believe that more systematic and automatic security analysis and vulnerability discovery are feasible. Using MQTT as an example, a possible approach is to semi-automatically construct state transitions of its operations, particularly those introduced by the protocol’s IoT customization, and utilize model checking and/or guided manual analysis to detect security flaws. More specifically, the finite-state machine (FSM) of MQTT could be recovered using Natural Language Processing (NLP) by comparing MQTT specifications against the IoT cloud documents, as we did in our prior work [58] (on analysis of payment services). On the FSM, we could manually identify desired security properties, such as session state updates for access privilege revocation, and specify them using Linear Temporal Logic (LTL) [59]. The presence of these properties on the FSM could be evaluated using a model checker, e.g., SAL [60]. A problem reported by the checker could serve as a counter-example for finding security flaws in the MQTT-IoT system by running the example against the system. In reality, however, NLP might not fully capture all details of an IoT protocol due to its limitations and/or incomplete or inaccurate specifications in the protocol documentation. Also, a complicated FSM might render formal verification challenging. In both cases, the vague, incomplete description or the complicated protocol logic could guide our analysis to focus on related implementations for finding security weaknesses. Note that this step could also be automated to some level, for example, through a guided fuzz test on protocol entities (e.g., ClientID, topic, Will Message, etc.). In the future, we envision that a line of research will automate the discovery of complex security flaws in IoT systems, particularly those built atop existing messaging protocols.

#### MQTT 5

The new version of the MQTT specification, MQTT 5, became an OASIS standard in March 2019 [18]. As far as we know, no public IoT cloud supported MQTT 5 during our research. The new standard maintains all features from the previous version, so all of our attacks are expected to work on IoT clouds using MQTT 5 without extra protection. The new specification does not provide protocol-layer solutions to address the security risks we discovered. Even though its non-normative sections mention that the client needs to be authorized to use a ClientId and that an implementation should provide access controls to restrict the client’s capability to publish or subscribe to particular topics, it offers no recommendations on how such protection should be enforced in the IoT scenarios we studied. We reported our findings to the OASIS MQTT TC, which acknowledged that our findings affect both version 5 and 3.1.1, and the issues are under open discussion now [11].

### Related Work

#### Security Studies on MQTT

Industry reports have shown that the general MQTT protocol lacks basic authentication and authorization. Without any protection, such as those already added by IoT clouds today, [61] demonstrated that an attacker could connect to arbitrary MQTT servers without authentication and subscribe to any topics. Another industry report [62] scanned exposed MQTT server endpoints on the Internet and found implementation bugs (in handling character encoding) in MQTT libraries and broker implementations. In contrast to these works that studied completely unprotected MQTT implementations, we focused on the protection that mainstream IoT clouds put in place when adopting MQTT and their insufficiency in eliminating new risks unique to IoT environments.

Academic studies have proposed enhancements to the security model of MQTT due to its lack of basic security considerations in the protocol design. [63] proposed new mechanisms for distributing temporary keys to MQTT clients; [64] proposed enhancing security protection by considering clients' context information, such as IP addresses; [65] proposed a dynamic control model that equips MQTT by monitoring mutable attributes for making access decisions; [66] proposed introducing OAuth into the MQTT environment as a security addition. In contrast to previous works, our study focused on real-world IoT platforms, the weaknesses of their added security protection in MQTT deployment, and analyzed practical security challenges and pitfalls that IoT vendors are facing today.

#### IoT Platform Security

The security of IoT platforms has been extensively studied, such as in [30], [67]–[72]. [70] conducted the first security analysis of Samsung’s SmartThings platform and discovered its coarse-grained access control design. [30] studied the interactions between IoT devices, mobile apps, and clouds, focusing on weaknesses in state transition diagrams of the three entities. Works have also been proposed to protect IoT systems. [73]–[75] studied how to restrict the capabilities of the cloud, mobile applications, and devices; [76] tracks and protects sensitive IoT information; [77] proposed a provenance-based framework to aggregate device activities for detecting errors and malicious activities. In sharp contrast, our study of IoT focuses on the unique aspects of the underlying messaging protocol, i.e., MQTT, and the insufficient security protection added by IoT clouds in adopting MQTT to the complicated and adversarial device-user interactions.

### Conclusion

We performed the first systematic study on security risks in the use of the general messaging protocol for IoT device-user communication. Our research reveals the gap between the protocol designed for operating in a simple and benign environment and the complicated, adversarial IoT scenarios, and the challenges in covering this gap with proper security measures. From our findings, we generalized new design principles and proposed an enhanced access model. Our protection was implemented, and its high effectiveness and efficiency were evaluated. Our new findings and protection will lead to better protection of user-device interactions in the real world.

### Acknowledgments

We would like to thank our shepherd Nick Feamster, the anonymous reviewers, and the MQTT TC for their insightful comments. Yan Jia, Yuhang Mao, Shangru Zhao, and Yuqing Zhang were supported by the National Natural Science Foundation of China (No. U1836210, No. 61572460) and in part by the China Scholarship Council. The Indiana University authors were supported in part by the Indiana University FRSP-SF and the NSF CNS-1618493, 1801432, and 1838083.

### References

[1] AWS, "AWS IoT Core," https://aws.amazon.com/iot-core/, accessed: 2019-01.
[2] Microsoft, "Azure IoT Hub," https://azure.microsoft.com/en-us/services/iot-hub/, accessed: 2019-01.
[3] Samsung, "Samsung SmartThings," https://www.smartthings.com/, accessed: 2019-01.
[4] OASIS, "MQTT Version 3.1.1 Plus Errata 01," http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html, 2015, accessed: 2019-01.
[5] Benjamin Cabe, "Key Trends from the IoT Developer Survey 2018," https://blog.benjamin-cabe.com/2018/04/17/key-trends-iot-developer-survey-2018, accessed: 2019-07.
[6] W. He, M. Golla, R. Padhi, J. Ofek, M. Dürmuth, E. Fernandes, and B. Ur, "Rethinking Access Control and Authentication for the Home Internet of Things (IoT)," in 27th USENIX Security Symposium (USENIX Security 18). USENIX Association, Baltimore, MD, 2018, pp. 255–272.
[7] Hilton, "Hilton Announces Connected Room, the First Mobile-Centric Hotel Room, to Begin Rollout in 2018," https://newsroom.hilton.com/corporate/news/hilton-announces-connected-room-the-first-mobilecentric-hotel-room-to-begin-rollout-in-2018, 2017, accessed: 2019-01.
[8] The Ambient, "Smart Hosting: The Dos and Don'ts of the Ultimate Airbnb Smart Home," https://www.the-ambient.com/guides/host-smart-airbnb-home-tech-217, 2018, accessed: 2019-01.
[9] RemoteLock, "The Best Smart Lock for Airbnb Hosts," https://www.remotelock.com/smart-locks-airbnb-hosts, accessed: 2019-01.
[10] Airbnb, "Smart Home Technology Can Increase Your Earning Potential," https://www.airbnb.com/resources/hosting-homes/a/how-to-use-smart-home-technology-to-make-more-money-26869, accessed: 2019-01.