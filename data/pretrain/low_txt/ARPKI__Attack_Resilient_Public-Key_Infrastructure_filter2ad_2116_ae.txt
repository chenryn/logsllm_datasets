# ARPKI: A New Public-Key Infrastructure for Enhanced Security

## 1. Introduction
ARPKI is a new public-key infrastructure designed to offer robust security guarantees, particularly resilience against impersonation attacks involving up to \( n-1 \) compromised entities. If all entities in an ARCert are compromised, the validators can still obtain evidence of the compromise and take compensatory actions. Our implementation and evaluation provide strong evidence that ARPKI can be deployed with reasonable overhead.

## 2. Processing Time Analysis
### 2.1 Overall Processing Time
The following table (Table 1) shows the total processing time (in milliseconds) from the initial request to the response sent by CA1, considering all required entities but excluding network latency.

| Request | CA1 | CA2 | ILS1 Total |
|---------|-----|-----|------------|
| 9.28    | 9.31| 9.33| 32.15      |
| 5.12    | 5.64| -   | 13.56      |
| 9.49    | -   | -   | 31.80      |
| -       | -   | -   | 12.98      |
| -       | -   | -   | 7.06       |
| -       | -   | -   | 17.82      |

**Table 1: Total processing time (in milliseconds) by the given entity.**

### 2.2 Detailed Processing Time Breakdown
Table 2 provides a more detailed breakdown of the processing time for each entity, distinguishing between four types of operations: RSA, ARCert, Hash, and Misc. The CCReq does not require ARCert validation, indicated by a hyphen in the table.

| Request | RegReq | UpdateReq | CCReq | RegReq | UpdateReq | CCReq | RegReq | UpdateReq | CCReq |
|---------|--------|-----------|-------|--------|-----------|-------|--------|-----------|-------|
| RSA     | 1.61   | 1.71      | 2.51  | 1.37   | 1.44      | 1.28  | 1.72   | 1.90      | 1.24  |
| ARCert  | 5.80   | 5.90      | -     | 5.97   | 5.72      | -     | 10.09  | 9.32      | -     |
| Hash    | 1.72   | 1.69      | -     | 1.70   | 1.93      | -     | 1.38   | 1.40      | -     |
| Misc.   | 0.18   | 0.19      | 0.22  | 0.24   | 0.24      | 0.25  | 0.37   | 0.36      | 0.15  |

**Table 2: Detailed processing time (in milliseconds) by the given entity.**

- **RSA**: Time spent on signature verification and creation.
- **ARCert**: Time spent on verifying and validating X.509 certificates.
- **Hash**: Time required to compute hashes.
- **Misc.**: Includes message processing (Base64 and JSON encoding/decoding and parsing), database lookup, and input/output operations.

## 3. Browser Validation
Browser validation involves two phases: standard validation and ARPKI validation.

- **Standard Validation**: Validates X.509 certificates within ARCert using the standard browser validation procedure.
- **ARPKI Validation**: Checks that:
  - Certificates within ARCert are signed by CAs trusted by the domain.
  - Proofs are produced for the correct ARCert and validate with the correct root.
  - Proofs and the root are signed by the correct, distinct, and trusted entities.

Using an ARCert consisting of three standard X.509 certificates, the entire validation took 2.25 ms on average (median 2.20 ms). Standard validation took 0.70 ms on average (median 0.67 ms), and ARPKI validation took 1.55 ms on average (median 1.53 ms).

## 4. Performance and Overhead
### 4.1 Signature Creation and Verification
Signature creation and verification are the most time-consuming operations. This computational overhead can be reduced by using state-of-the-art digital signature schemes [6,14]. However, such improvements may not be backward-compatible with software using older cryptographic libraries.

### 4.2 CA Operations
CAs in our design must perform additional verification. Despite our prototype not being fully optimized, tests indicate that a single low-end machine can handle about 100 ARCert registrations/updates and 200 confirmations per second, requiring a bandwidth of 10 Mbit/s.

### 4.3 Client-Server Communication
The use of ARCert introduces transmission overhead due to the concatenation of standard X.509 certificates. This overhead is adjustable based on the number of standard certificates combined into an ARCert. The latency introduced by the ARPKI infrastructure should not affect client-server connections. Confirmations are obtained periodically and stored by the server, provided to the browser along with the ARCert during each connection.

## 5. Conclusions
Our analysis of the prototype implementation indicates that ARPKI can be deployed with reasonable overhead. ARPKI offers strong security guarantees, including resilience against impersonation attacks and the ability to detect and respond to complete compromises. Future work includes developing procedures for managing CA certificates, elaborating on CAs' policies and business models, improving the representation of ARCert, and developing incremental deployment strategies.

## 6. Acknowledgments
This work was supported by CyLab at Carnegie Mellon University, NSF under award CNS-1040801, and a gift from Google. We thank Emilia Kasper, Lorenzo Baesso, and Lin Chen for their contributions.

## 7. References
[1] ARPKI: Full implementation, formal model, and security properties. http://www.netsec.ethz.ch/research/arpki.
[2] Convergence. http://convergence.io/.
[3] Public Key Pinning. http://www.imperialviolet.org/2011/05/04/pinning.html, May 2011.
[4] Public Key Pinning Extension for HTTP. http://tools.ietf.org/html/draft-ietf-websec-key-pinning-01, December 2011.
[5] Martín Abadi, Andrew Birrell, Ilya Mironov, Ted Wobber, and Yinglian Xie. Global authentication in an untrustworthy world. In Petros Maniatis, editor, HotOS. USENIX Association, 2013.
[6] Daniel J Bernstein, Niels Duif, Tanja Lange, Peter Schwabe, and Bo-Yin Yang. High-speed high-security signatures. Journal of Cryptographic Engineering, 2(2):77–89, 2012.
[7] Robert Biddle, Paul C van Oorschot, Andrew S Patrick, Jennifer Sobey, and Tara Whalen. Browser interfaces and extended validation SSL certificates: an empirical study. In Proceedings of the 2009 ACM workshop on Cloud computing security, pages 19–30. ACM, 2009.
[8] D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley, and W. Polk. Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile. RFC 5280 (Proposed Standard), May 2008.
[9] Paul Ducklin. The TURKTRUST SSL certificate fiasco - what really happened, and what happens next? http://nakedsecurity.sophos.com/2013/01/08/the-turktrust-ssl-certificate-fiasco-what-happened-and-what-happens-next/, January 2013.
[10] Peter Eckersley. Sovereign Key Cryptography for Internet Domains. https://git.eff.org/?p=sovereign-keys.git;a=blob;f=sovereign-key-design.txt;hb=HEAD.
[11] Martin Georgiev, Subodh Iyengar, Suman Jana, Rishita Anubhai, Dan Boneh, and Vitaly Shmatikov. The most dangerous code in the world: validating SSL certificates in non-browser software. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 38–49. ACM, 2012.
[12] Paul Hoffman and Jakob Schlyter. The DNS-based Authentication of Named Entities (DANE) Transport Layer Security (TLS) Protocol: TLSA. http://tools.ietf.org/html/rfc6698, August 2012. IETF RFC 6698.
[13] R. Housley, W. Polk, W. Ford, and D. Solo. Internet X.509 Public Key Infrastructure: Certificate and Certificate Revocation List (CRL) Profile. Technical Report RFC 3280, Internet Engineering Task Force, April 2002.
[14] Emilia Kasper. Fast elliptic curve cryptography in OpenSSL. In Financial Cryptography and Data Security, volume 7126 of LNCS, pages 27–39. Springer, 2012.
[15] Tiffany Hyun-Jin Kim, Lin-Shung Huang, Adrian Perrig, Collin Jackson, and Virgil Gligor. Accountable Key Infrastructure (AKI): A Proposal for a Public-Key Validation Infrastructure. In Daniel Schwabe, Virgílio A. F. Almeida, Hartmut Glaser, Ricardo A. Baeza-Yates, and Sue B. Moon, editors, Proceedings of the International World Wide Web Conference (WWW), May 2013.
[16] Adam Langley. Overclocking SSL. https://www.imperialviolet.org/2010/06/25/overclocking-ssl.html, June 2010.
[17] Ben Laurie and Emilia Kasper. Revocation Transparency. http://sump2.links.org/files/RevocationTransparency.pdf.
[18] Ben Laurie, Adam Langley, and Emilia Kasper. Certificate Transparency. http://tools.ietf.org/pdf/rfc6962.pdf, June 2013. IETF RFC 6962.
[19] Moxie Marlinspike and Trevor Perrin. Trust Assertions for Certificate Keys. http://tack.io/draft.html, May 2012.
[20] Simon Meier, Benedikt Schmidt, Cas Cremers, and David Basin. The TAMARIN Prover for the Symbolic Analysis of Security Protocols. In Computer Aided Verification, 25th International Conference, CAV 2013, Princeton, USA, Proc., volume 8044 of LNCS, pages 696–701. Springer, 2013.
[21] Joseph Menn. Key internet operator VeriSign hit by hackers. http://www.reuters.com/article/2012/02/02/us-hacking-verisign-idUSTRE8110Z820120202, January 2012.
[22] M. Myers, R. Ankney, A. Malpani, S. Galperin, and C. Adams. X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP. Internet Request for Comments 2560, June 1999.
[23] Paul Roberts. Phony SSL certificates issued for Google, Yahoo, Skype, others. http://threatpost.com/phony-ssl-certificates-issued-google-yahoo-skype-others-032311/, March 2011.
[24] Mark D. Ryan. Enhanced certificate transparency and end-to-end encrypted mail. In Proceedings of NDSS. The Internet Society, 2014.
[25] Benedikt Schmidt, Simon Meier, Cas Cremers, and David Basin. Automated analysis of Diffie-Hellman protocols and advanced security properties. In Computer Security Foundations Symposium (CSF), pages 78–94. IEEE, 2012.
[26] Toby Sterling. Second firm warns of concern after Dutch hack. http://news.yahoo.com/second-firm-warns-concern-dutch-hack-215940770.html, September 2011.
[27] Pawel Szalachowski, Stephanos Matsumoto, and Adrian Perrig. PoliCert: Secure and Flexible TLS Certificate Management. In Proceedings of the ACM Conference on Computer and Communications Security (CCS). ACM, November 2014.
[28] Emin Topalovic, Brennan Saeta, Lin-Shung Huang, Collin Jackson, and Dan Boneh. Towards Short-Lived Certificates. In Web 2.0 Security and Privacy, May 2012.
[29] Dan Wendlandt, David G. Andersen, and Adrian Perrig. Perspectives: Improving SSH-style Host Authentication with Multi-Path Probing. In Proceedings of USENIX Annual Technical Conference, June 2008.