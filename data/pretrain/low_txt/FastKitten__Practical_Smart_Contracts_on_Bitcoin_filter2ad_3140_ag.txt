# References

[28] M. Hachman. "Intel's Plan to Fix Meltdown in Silicon Raises More Questions Than Answers." *article / 3251171 / components - processors / intels - plan - to - fix - meltdown - in - silicon - raises - more - questions - than - answers.html*, 2018.

[29] M. Hoekstra, R. Lal, P. Pappachan, V. Phegade, and J. Del Cuvillo. "Using Innovative Instructions to Create Trustworthy Software Solutions." In *Workshop on Hardware and Architectural Support for Security and Privacy (HASP)*. ACM, 2013.

[30] A. Homescu, S. Brunthaler, P. Larsen, and M. Franz. "Librando: Transparent Code Randomization for Just-in-Time Compilers." In *ACM SIGSAC Conference on Computer and Communications Security, CCS*, 2013.

[31] Intel. "Intel Software Guard Extensions Developer Guide." 2016. https://download.01.org/intel-sgx/linux-1.7/docs/Intel_SGX_Developer_Guide.pdf.

[32] Intel. "Resources and Response to Side Channel L1 Terminal Fault." 2018. https://www.intel.com/content/www/us/en/architecture-and-technology/l1tf.html.

[33] A. Juels, A. E. Kosba, and E. Shi. "The Ring of Gyges: Investigating the Future of Criminal Smart Contracts." In *Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security*, Vienna, Austria, October 24-28, 2016.

[34] H. A. Kalodner, S. Goldfeder, X. Chen, S. M. Weinberg, and E. W. Felten. "Arbitrum: Scalable, Private Smart Contracts." In *USENIX Security Symposium*, 2018.

[35] A. Kosba, A. Miller, E. Shi, Z. Wen, and C. Papamanthou. "Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts." In *Security and Privacy (SP), 2016 IEEE Symposium on*. IEEE, 2016.

[36] A. E. Kosba, A. Miller, E. Shi, Z. Wen, and C. Papamanthou. "Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts." In *IEEE Symposium on Security and Privacy*, 2016.

[37] R. Kumaresan and I. Bentov. "How to Use Bitcoin to Incentivize Correct Computations." In *Proceedings of the ACM SIGSAC Conference on Computer and Communications Security*. ACM, 2014.

[38] R. Kumaresan and I. Bentov. "Amortizing Secure Computation with Penalties." In *Proceedings of the ACM SIGSAC Conference on Computer and Communications Security*, 2016.

[39] R. Kumaresan, T. Moran, and I. Bentov. "How to Use Bitcoin to Play Decentralized Poker." In *Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security*. ACM, 2015.

[40] R. Kumaresan, V. Vaikuntanathan, and P. N. Vasudevan. "Improvements to Secure Computation with Penalties." In *Proceedings of the ACM SIGSAC Conference on Computer and Communications Security*, 2016.

[41] L. Lamport, R. Shostak, and M. Pease. "The Byzantine Generals Problem." *ACM Transactions on Programming Languages and Systems (TOPLAS)*, 1982.

[42] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz. "SoK: Automated Software Diversity." In *35th IEEE Symposium on Security and Privacy, S&P*, 2014.

[43] J. Lind, O. Naor, I. Eyal, F. Kelbert, P. R. Pietzuch, and E. G. Sirer. "Teechain: Reducing Storage Costs on the Blockchain with Offline Payment Channels." In *11th ACM International Systems and Storage Conference*, 2018.

[44] R. Matzutt, J. Hiller, M. Henze, J. H. Ziegeldorf, D. Müllmann, O. Hohlfeld, and K. Wehrle. "A Quantitative Analysis of the Impact of Arbitrary Blockchain Content on Bitcoin." In *Proceedings of the 22nd International Conference on Financial Cryptography and Data Security (FC)*. Springer, 2018.

[45] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shaﬁ, V. Shanbhogue, and U. R. Savagaonkar. "Innovative Instructions and Software Model for Isolated Execution." In *Workshop on Hardware and Architectural Support for Security and Privacy (HASP)*. ACM, 2013.

[46] Microsoft. "The Coco Framework." 2018. GIT repository available at https://github.com/Azure/coco-framework.

[47] I. Miers, C. Garman, M. Green, and A. D. Rubin. "Zerocoin: Anonymous Distributed E-Cash from Bitcoin." In *Security and Privacy (SP), 2013 IEEE Symposium on*. IEEE, 2013.

[48] A. Miller and I. Bentov. "Zero-Collateral Lotteries in Bitcoin and Ethereum." In *Security and Privacy Workshops (EuroS&PW), 2017 IEEE European Symposium on*. IEEE, 2017.

[49] A. Miller, I. Bentov, R. Kumaresan, and P. McCorry. "Sprites: Payment Channels That Go Faster Than Lightning." CoRR, abs/1702.05812, 2017.

[50] V. Mohan, P. Larsen, S. Brunthaler, K. W. Hamlen, and M. Franz. "Opaque Control-Flow Integrity." In *NDSS*, 2015.

[51] S. Nakamoto. "Bitcoin: A Peer-to-Peer Electronic Cash System." 2008. http://bitcoin.org/bitcoin.pdf.

[52] J. Noorman, P. Agten, W. Daniels, R. Strackx, A. Van Herrewege, C. Huygens, B. Preneel, I. Verbauwhede, and F. Piessens. "Sanctus: Low-Cost Trustworthy Extensible Networked Devices with a Zero-Software Trusted Computing Base." In *22nd USENIX Security Symposium, USENIX Sec*, 2013.

[53] V. Pappas, M. Polychronakis, and A. D. Keromytis. "Smashing the Gadgets: Hindering Return-Oriented Programming Using In-Place Code Randomization." In *33rd IEEE Symposium on Security and Privacy, S&P*, 2012.

[54] R. Pass, E. Shi, and F. Tramèr. "Formal Abstractions for Attested Execution Secure Processors." *IACR Cryptology ePrint Archive*, 2016.

[55] J. Poon and V. Buterin. "Plasma: Scalable Autonomous Smart Contracts." Aug 2017. Plasma, https://plasma.io/plasma.pdf/.

[56] J. Seo, B. Lee, S. Kim, M.-W. Shih, I. Shin, D. Han, and T. Kim. "SGX-Shield: Enabling Address Space Layout Randomization for SGX Programs." In *Annual Network and Distributed System Security Symposium*, 2017.

[58] J. Teutsch and C. Reitwießner. "A Scalable Verification Solution for Blockchains." Nov 2017. https://people.cs.uchicago.edu/~teutsch/papers/truebit.pdf.

[59] F. Tramèr, F. Zhang, H. Lin, J. Hubaux, A. Juels, and E. Shi. "Sealed-Glass Proofs: Using Transparent Enclaves to Prove and Sell Knowledge." In *2017 IEEE European Symposium on Security and Privacy, EuroS&P*, 2017.

[60] J. Van Bulck, F. Piessens, and R. Strackx. "Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution." In *27th USENIX Security Symposium (USENIX Security 18)*. USENIX Association, 2018.

[61] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. "Binary Stirring: Self-Randomizing Instruction Addresses of Legacy x86 Binary Code." In *ACM SIGSAC Conference on Computer and Communications Security, CCS*, 2012.

[62] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou. "Practical Control Flow Integrity and Randomization for Binary Executables." In *34th IEEE Symposium on Security and Privacy, S&P*, 2013.

[63] F. Zhang, E. Cecchetti, K. Croman, A. Juels, and E. Shi. "Town Crier: An Authenticated Data Feed for Smart Contracts." In *Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security*. ACM, 2016.

[64] F. Zhang, P. Daian, I. Bentov, and A. Juels. "Paralysis Proofs: Safe Access-Structure Updates for Cryptocurrencies and More." *IACR Cryptology ePrint Archive*, 2018.

[65] M. Zhang and R. Sekar. "Control Flow Integrity for COTS Binaries." In *22nd USENIX Security Symposium, USENIX Sec*, 2013.

## Further Related Work

There is a substantial body of work aimed at improving the scalability of blockchains by moving a significant portion of smart contract executions off the blockchain. This can be achieved through second-layer solutions [24, 34, 49, 55] or outsourcing of computation [58]. As discussed in the main body of this paper, these solutions typically run on top of blockchains with sufficiently complex scripting languages, such as Ethereum. However, they cannot be integrated into popular legacy cryptocurrencies like Bitcoin, which is a key difference compared to our work. One of the primary goals of FASTKITTEN is to make minimal assumptions about the underlying blockchain technology and, in particular, to run over the Bitcoin blockchain.

### Off-Chain Contract Execution for Privacy

Another motivation for off-chain contract execution is to protect privacy. Hawk [36] and the "Ring of Gyges" [33] are examples of works that keep the state, all inputs, and outputs private. This is also true for the scaling solutions mentioned above; these techniques work only over cryptocurrencies that support complex smart contracts, such as Ethereum.

Below, we discuss the differences between these solutions and FASTKITTEN when run on top of Ethereum.

#### Second-Layer Scaling Solutions

**State Channels** State channels [20, 24, 49] are a prominent second-layer scaling solution. They allow a set of parties to execute complex smart contracts off-chain. As long as all parties are honest and agree on the state transitions, the blockchain is contacted only during channel creation, when parties lock funds in the channel, and during channel closure, when the locked funds are distributed back to the parties according to the result of contract execution. However, if parties run into disagreement off-chain, they must resolve their dispute on-chain, performing the state transition via the blockchain.

While state channels are very efficient in the optimistic case where all parties are honest, a potentially heavy computation might need to be performed on-chain in case of disagreement. In contrast, the FASTKITTEN protocol does not require any computation to be performed on the blockchain, even in case of disputes.

**Plasma** Another promising second-layer scaling solution is Plasma, first introduced by Poon and Buterin [55]. The main idea of Plasma is to build new chains (Plasma chains) on top of the Ethereum blockchain. Each Plasma chain has its own operator responsible for validating transactions and regularly posting a short commitment about the current state of the Plasma chain to a smart contract on the Ethereum blockchain. These regular commitments ensure that participants can prove the operator's misbehavior to the Ethereum smart contract and exit the Plasma chain with all their funds.

While the original goal of Plasma [55] was to support arbitrary complex smart contracts, to the best of our knowledge, there is no concrete protocol that achieves this goal (existing Plasma designs support only payment transactions). Moreover, the Plasma research community currently conjectures that Plasma with general smart contracts might be impossible to construct [8].

#### Arbitrum

The disadvantage of state channels, i.e., the potentially heavy on-chain execution in case of dispute, is addressed by the work Arbitrum [34]. Every smart contract, modeled as a virtual machine (VM) to be executed off-chain, has a set of "manager" parties responsible for correct VM execution. As long as managers reach consensus on the VM state transitions, execution progresses off-chain similarly to state channels. In case of dispute, one manager can propose the next VM state, which other managers can challenge. If the newly posted state is challenged, the proposer and the challenger run an interactive protocol via the blockchain, known as the "bisection" protocol, in which one disputable computation step is eventually identified and verified on-chain. Instead of executing the entire state transition on-chain, only one computation step and the bisection protocol (which might require \(O(\log(s))\) blockchain transactions, where \(s\) is the number of computation steps in the state transition) are performed on-chain. The Arbitrum protocol assumes that at least one manager of the VM is honest and challenges false states if they are posted by other managers. Since the blockchain interaction during the bisection protocol is expensive, Arbitrum uses monetary incentives to motivate managers to behave honestly and follow the protocol.

#### TrueBit

Another solution that supports off-chain execution of smart contracts using incentive-driven verification is TrueBit [58]. For each off-chain execution, the TrueBit system selects (using a lottery) one party, called the "Solver," responsible for performing the state transition and informing all other parties about the new contract state. The system incentivizes parties to become "verifiers" and check the correctness of the computation performed by the Solver. If they detect misbehavior, they challenge the Solver on the blockchain and run the "verification game," which works similarly to the "bisection protocol" of Arbitrum. Similar to Arbitrum, TrueBit relies on the assumption that there is at least one honest verifier who correctly performs all validations and challenges malicious Solvers. In contrast to Arbitrum, all inputs and the contract state are inherently public, even in the optimistic case when everyone is honest.

Apart from the different trust model and lower requirements on the underlying blockchain technology, FASTKITTEN differs from Arbitrum and TrueBit by providing stronger privacy guarantees, meaning that in both the optimistic and pessimistic cases, inputs of honest parties and the state of the smart contract remain private.

#### TEEs for Privacy

None of the solutions discussed above achieve privacy-preserving off-chain contract execution. This is tackled by the work Hawk [36], which keeps the state, all inputs, and all outputs private. Hawk contracts [35] achieve these properties using Ethereum smart contracts that judge computations done by a third party (a manager), who executes the contract on private inputs and is trusted not to reveal any secrets. First, all parties submit their encrypted inputs to the contract, then the manager computes the result and proves its correctness with a zero-knowledge proof. If the proof is correct, the contract pays out money accordingly. While the authors of Hawk discuss the possibility of using SGX to instantiate the manager and reduce the trust assumptions in this party, it still leverages the blockchain for every user input and only supports single-round protocols, which is their main difference from FASTKITTEN. Extending to multi-round protocols would be difficult without letting the smart contract verify the correctness of every round individually, thus creating a large blockchain communication overhead.