### Data Arguments
The arguments should match the values used in the original `mount()` call, except for those parameters that are being deliberately changed.

### Mount Flags
The following `mountflags` can be changed:
- `MS_LAZYTIME`
  - Note: `MS_LAZYTIME` is available only on a few filesystems. On ext4, this flag can only be enabled (but not disabled) during a remount.
- `MS_MANDLOCK`
- `MS_NOATIME`
- `MS_NODEV`
- `MS_NODIRATIME`
- `MS_NOEXEC`
- `MS_NOSUID`
- `MS_RELATIME`
- `MS_RDONLY`
- `MS_STRICTATIME` (which clears the `MS_NOATIME` and `MS_RELATIME` flags)
- `MS_SYNCHRONOUS`

Attempts to change the settings of the `MS_DIRSYNC` and `MS_SILENT` flags during a remount are silently ignored. Changes to per-superblock flags are visible across all mounts of the associated filesystem because these flags are shared by all mounts.

### Remount Operation
Since Linux 3.17, if none of `MS_NOATIME`, `MS_NODIRATIME`, `MS_RELATIME`, or `MS_STRICTATIME` is specified in `mountflags`, the remount operation preserves the existing values of these flags (rather than defaulting to `MS_RELATIME`).

### Modifying Per-Mount-Point Flags
Since Linux 2.6.26, the `MS_REMOUNT` flag can be used with `MS_BIND` to modify only the per-mount-point flags. This is particularly useful for setting or clearing the "read-only" flag on a mount without changing the underlying filesystem. For example, specifying `mountflags` as:
```c
MS_REMOUNT | MS_BIND | MS_RDONLY
```
will make access through this mount point read-only, without affecting other mounts.

### Creating a Bind Mount
If `mountflags` includes `MS_BIND` (available since Linux 2.4), a bind mount is performed. A bind mount makes a file or directory subtree visible at another point within the single directory hierarchy. Bind mounts can cross filesystem boundaries and span `chroot(2)` jails.

The `filesystemtype` and `data` arguments are ignored. The bind mount has the same mount options as the underlying mount. By default, only the specified directory is mounted; submounts under the directory tree are not bind-mounted. If the `MS_REC` flag is also specified, a recursive bind mount operation is performed, binding all submounts under the source subtree (except unbindable mounts) to the corresponding location in the target subtree.

### Changing the Propagation Type of an Existing Mount
If `mountflags` includes one of `MS_SHARED`, `MS_PRIVATE`, `MS_SLAVE`, or `MS_UNBINDABLE` (all available since Linux 2.6.15), the propagation type of an existing mount is changed. If more than one of these flags is specified, an error results. The `source`, `filesystemtype`, and `data` arguments are ignored.

The meanings of the propagation type flags are as follows:
- `MS_SHARED`: Make this mount shared. Mount and unmount events immediately under this mount will propagate to the other mounts that are members of this mount's peer group.
- `MS_PRIVATE`: Make this mount private. Mount and unmount events do not propagate into or out of this mount.
- `MS_SLAVE`: Convert a shared mount to a slave mount if it is a member of a peer group containing other members. If the peer group contains no other members, convert it to a private mount.
- `MS_UNBINDABLE`: Make this mount unbindable. This is like a private mount, and in addition, this mount cannot be bind-mounted.

By default, changing the propagation type affects only the target mount. If the `MS_REC` flag is also specified, the propagation type of all mounts under the target is also changed.

### Moving a Mount
If `mountflags` contains the `MS_MOVE` flag (available since Linux 2.4.18), a subtree is moved. The `source` specifies an existing mount, and `target` specifies the new location to which that mount is to be relocated. The move is atomic: at no point is the subtree unmounted. The remaining bits in `mountflags`, as well as the `filesystemtype` and `data` arguments, are ignored.

### Creating a New Mount
If none of `MS_REMOUNT`, `MS_BIND`, `MS_MOVE`, `MS_SHARED`, `MS_PRIVATE`, `MS_SLAVE`, or `MS_UNBINDABLE` is specified in `mountflags`, `mount()` performs its default action: creating a new mount. The `source` specifies the source for the new mount, and `target` specifies the directory at which to create the mount point. The `filesystemtype` and `data` arguments are employed, and further bits may be specified in `mountflags` to modify the behavior of the call.

### Return Value
On success, zero is returned. On error, -1 is returned, and `errno` is set to indicate the error.

### Errors
The following error values result from filesystem type-independent errors. Each filesystem type may have its own special errors and behavior. See the Linux kernel source code for details.
- `EACCES`: A component of a path was not searchable, or mounting a read-only filesystem was attempted without giving the `MS_RDONLY` flag.
- `EBUSY`: An attempt was made to stack a new mount directly on top of an existing mount point, or the source cannot be remounted read-only because it still holds files open for writing.
- `EFAULT`: One of the pointer arguments points outside the user address space.
- `EINVAL`: The source had an invalid superblock, or a remount or move operation was attempted with invalid conditions.
- `ELOOP`: Too many links encountered during pathname resolution, or a move operation was attempted where the target is a descendant of the source.
- `EMFILE`: Table of dummy devices is full.
- `ENAMETOOLONG`: A pathname was longer than `MAXPATHLEN`.
- `ENODEV`: The filesystem type is not configured in the kernel.
- `ENOENT`: A pathname was empty or had a nonexistent component.
- `ENOMEM`: The kernel could not allocate a free page to copy filenames or data into.
- `ENOTBLK`: The source is not a block device (and a device was required).
- `ENOTDIR`: The target, or a prefix of the source, is not a directory.
- `ENXIO`: The major number of the block device source is out of range.
- `EPERM`: The caller does not have the required privileges.
- `EROFS`: Mounting a read-only filesystem was attempted without giving the `MS_RDONLY` flag.

### Versions
The definitions of `MS_DIRSYNC`, `MS_MOVE`, `MS_PRIVATE`, `MS_REC`, `MS_RELATIME`, `MS_SHARED`, `MS_SLAVE`, `MS_STRICTATIME`, and `MS_UNBINDABLE` were added to glibc headers in version 2.12.

### Conforming To
This function is Linux-specific and should not be used in programs intended to be portable.

### Notes
Since Linux 2.4, a single filesystem can be mounted at multiple mount points, and multiple mounts can be stacked on the same mount point. The `mountflags` argument may have the magic number 0xc0ed (`MS_MGC_VAL`) in the top 16 bits, but this is no longer required and is ignored if specified.

### Mount Namespaces
Starting with kernel 2.4.19, Linux provides mount namespaces. A mount namespace is the set of filesystem mounts that are visible to a process. Mount namespaces can be (and usually are) shared between multiple processes, and changes to the namespace by one process are visible to all other processes sharing the same namespace.

A child process created by `fork(2)` shares its parent's mount namespace, and the mount namespace is preserved across an `execve(2)`. A process can obtain a private mount namespace if it was created using the `clone(2)` `CLONE_NEWNS` flag, in which case its new namespace is initialized to be a copy of the parent's namespace.