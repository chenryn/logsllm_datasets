### 6.4 Storage Overhead

While the "none" scenario incurs the same storage overhead as conventional SSL, additional security functionalities lead to extra storage requirements. Assuming a server \( S \) and a recipient \( r \) obtaining a data object \( O \) from a provider \( p \), the extra storage overhead related to each security function is as follows:

- **Client Authentication**: The recipient \( r \) needs to store a ticket for \( O \). In our implementation, a ticket is approximately 160 bytes.
- **Integrity**: Both the provider \( p \) and the recipient \( r \) need to store the Merkle hash tree of \( O \). For a 1 GB file with 8 KB blocks and 16-byte hash values, the tree will be approximately 4 MB.
- **Confidentiality**: The provider \( p \) needs to store an encrypted copy of \( O \) (unless \( p \) encrypts \( O \) on the fly), and the server \( S \) needs to store the decryption key.
- **Proof of Service**: The provider \( p \) and the recipient \( r \) need to store certificates of their public keys. Additionally, \( p \) needs to store necessary acknowledgments from \( r \). Due to the aggregation feature built into the acknowledgment mechanism, only a small number of acknowledgments are needed, and each acknowledgment in our implementation is typically 150-200 bytes.

### 6.5 Volume of Control Traffic

Similarly, while the "none" scenario incurs the same volume of control traffic as conventional SSL, additional security functionalities lead to extra control traffic. Assuming the server \( S \), a recipient \( r \), and a provider \( p \), the extra traffic purely related to each of the following is:

- **Client Authentication**: The delivery of a ticket from \( S \) to \( r \) and from \( r \) to \( p \).
- **Integrity**: If \( O \) has \( n \) blocks, the extra traffic will be \( n-1 \) hash values from \( p \) to \( r \) (we omit the proof to save space) and a small amount of request traffic from \( r \) to \( p \).
- **Confidentiality**: The server \( S \) needs to forward the decryption key to \( r \).
- **Proof of Service**: \( p \) and \( r \) need to send each other a certificate of their own public keys. \( r \) also needs to send an acknowledgment for each encrypted block of \( O \). \( p \) also needs to send a protected block key to \( r \) (see Section 4). \( p \) may also contact \( S \) to present the proof of its service, which will be the size of an acknowledgment (typically 150-200 bytes in our implementation). \( r \) may also burden \( S \) with a small amount of traffic when \( r \) has trouble with block keys.

### 6.6 Summary

Our comprehensive cost and performance study of mSSL shows that, in general, more security functionalities lead to higher storage and traffic overhead, while decreasing server capacity and lengthening file downloading time. However, the extra overhead introduced by mSSL is at a reasonable level and generally very small.

### 7 Related Work

Works related to mSSL can be categorized into related security protocols, related data integrity solutions, and incentive mechanisms in peer-to-peer environments.

#### 7.1 Security Protocols

We discuss security protocols that could potentially be used for the hybrid peer-to-peer paradigm to support functions that mSSL is designed for.

- **SSL/TLS**: SSL [17], or SSL/TLS, provides data encryption and authentication between a client and a server. It is the most common security scheme today for securing web-based services and has been used for many other services. However, SSL is designed for point-to-point communications. To secure the sharing of data from a server among its clients, it must be applied separately to every client-server and client-client connection, resulting in high overhead.
- **Kerberos**: mSSL’s ticket-based authentication mechanism has some similarities with Kerberos. Kerberos allows a client to contact a trusted third party, a Key Distribution Center (KDC), to obtain a ticket-granting ticket (TGT), and then use the TGT to obtain a ticket related to a particular service. However, mSSL avoids reliance on a trusted third party by allowing the server to issue a ticket directly to a client.
- **Group Management**: If all authenticated clients of a server are treated as a group, some group management techniques could be useful. For example, SDSI [18] uses a simple PKI to manage memberships and secret communication among members. Various group key management schemes have also been designed, such as [23, 12, 7]. However, these schemes mainly support confidential communication among group members, whereas mSSL must handle not only confidentiality but also other security functionalities such as integrity and proof of service.

#### 7.2 Data Integrity Mechanisms

Existing peer-to-peer file-sharing applications provide data integrity functionalities. PROOFS [21] and Slurpie [20] recommend the use of MD5 or similar checksum algorithms. BitTorrent [5] adopts a superblock-based mechanism, which can have high startup latency (as discussed in Section 3). Solutions based on a Merkle hash tree have also been proposed for peer-to-peer environments, such as [6]. Unlike those works, mSSL does not require pre-downloading of hash values, and for each block, a client can just request an integrity path instead of a normally much longer authentication path. Integrity solutions also exist in different contexts; for example, TESLA [16] allows a large number of recipients to check the integrity of packets being delivered from a single source.

Researchers have also proposed complementary solutions to mSSL’s integrity solution, including storage mechanisms of block-level integrity information (such as [15]) and optimization of Merkle hash trees (such as [22]).

#### 7.3 Offering Proofs of Service

Proof of service in this paper can be regarded as one particular case of a non-repudiation service. There have been several non-repudiation schemes designed in different contexts, focusing on non-repudiation of origin, receipt, submission, and delivery [10, 13]. Verification of non-repudiation schemes has also been studied [26, 19, 11].

Proof of service is also similar to the strong fair exchange of information. In the context of this paper, fairness would mean that a provider receives a proof of its service and a recipient receives the desired data. Solutions with a Trusted Third Party (TTP) can be created using an inline TTP (such as [4, 2] where the TTP is required to mediate every communication between a sender and a receiver), using an online TTP (such as [24, 25] where the sender and the receiver can directly communicate but still need the TTP to store and fetch information), and using an offline TTP (such as [1, 9], where the TTP will be involved only when a problem occurs).

The most closely related to this paper is the fair exchange with an offline TTP. While leveraging current schemes, our solution for the hybrid peer-to-peer paradigm has an important difference: a server itself can act as a TTP for its own provider and recipient clients. This is an inherent advantage for enforcing fairness. Additionally, the server is also the original source of the data that a provider offers to a recipient, bringing another advantage in designing a solution in this hybrid paradigm. If needed, a server can verify the data without requesting them from other nodes, thus avoiding a drawback in many TTP-based solutions, especially when the amount of data is large.

### 8 Conclusions

As the conventional client-server communication paradigm is enhanced with peer-to-peer communications among clients, serious security concerns arise in this hybrid communication environment. Receiving data from arbitrary, often less trustworthy peer clients is subject to much higher security risks. Malicious clients may corrupt the hybrid communications, and data integrity and confidentiality are more easily breached. Mechanisms to reward peer clients for sharing data, such as crediting those providing data to others, are also vulnerable since clients may lie about peer-level service.

We designed and evaluated the mSSL protocol to address these security concerns. In contrast to the SSL protocol that protects conventional client-server communications, mSSL allows clients to share data from their server in a peer-to-peer fashion with strong security. It protects both client-server and client-client communications. Furthermore, to strengthen the security of a wide range of Internet applications running with a hybrid communication paradigm, mSSL provides strong and flexible support for addressing both conventional security issues, such as client authentication, data integrity, and data confidentiality, and new security issues such as proof of service in this special context.

mSSL’s contributions include its special attention to designing effective and efficient data integrity protection and proof-of-service mechanisms. It introduced an "integrity path" concept to allow prompt, block-level integrity verification with low communication and computation overhead. Its proof-of-service mechanism has minimal server overhead, uses small-sized proofs for the service of a very large number of blocks, and ensures the service of every block to be credited accurately. Our evaluation agrees with our design and has shown an acceptable overhead under different scenarios where mSSL might be used.

### References

[1] N. Asokan, V. Shoup, and M. Waidner. Asynchronous Protocols for Optimistic Fair Exchange. In Proceedings of the IEEE Symposium on Research in Security and Privacy, pages 86–99, 1998.

[2] A. Bahreman and J. Tygar. Certified Electronic Mail. In Proc. of Symposium on Network and Distributed Systems Security, pages 3–19, 1994.

[3] BitTorrent, Inc. BitTorrent. http://bittorrent.com, 2005.

[4] T. Coffey and P. Saidha. Non-Repudiation with Mandatory Proof of Receipt. SIGCOMM Comput. Commun. Rev., 26(1):6–17, 1996.

[5] B. Cohen. Incentives Build Robustness in BitTorrent. Workshop on Economics of Peer-to-Peer Systems, 2003.

[6] A. Habib, D. Xu, M. Atallah, B. Bhargava, and J. Chuang. Verifying Data Integrity in Peer-to-Peer Media Streaming. In Twelfth Annual Multimedia Computing and Networking (MMCN '05), 2005.

[7] Y. Kim, A. Perrig, and G. Tsudik. Tree-Based Group Key Agreement. ACM Trans. Inf. Syst. Secur., 7(1):60–96, 2004.

[8] K. Kong and D. Ghosal. Mitigating Server-Side Congestion in the Internet through Pseudoserving. IEEE/ACM Trans. Netw., 7(4):530–544, 1999.

[9] S. Kremer and O. Markowitch. Optimistic Non-Repudiable Information Exchange. In Proceedings of the 21st Symposium on Information Theory in the Benelux, pages 139–146, Wassenaar, The Netherlands, 2000.

[10] S. Kremer, O. Markowitch, and J. Zhou. An Intensive Survey of Fair Non-Repudiation Protocols. Computer Communications, 25(17), 2002.

[11] S. Kremer and J.-F. Raskin. A Game-Based Verification of Non-Repudiation and Fair Exchange Protocols. Lecture Notes in Computer Science, 2154:551+, 2001.

[12] X. S. Li, Y. R. Yang, M. G. Gouda, and S. S. Lam. Batch Rekeying for Secure Group Communications. In Proceedings of the 10th International Conference on World Wide Web, pages 525–534. ACM Press, 2001.

[13] P. Louridas. Some Guidelines for Non-Repudiation Protocols. SIGCOMM Computer Communication Review, 30(5):29–38, 2000.

[14] M. Mathis, J. Mahdavi, S. Floyd, and A. Romanow. IETF RFC 2018: TCP Selective Acknowledgement Options, 1996.

[15] A. Oprea, M. Reiter, and K. Yang. Space-Efficient Block Storage Integrity. In The 12th Annual Network and Distributed System Security Symposium, 2005.

[16] A. Perrig, R. Canetti, J. D. Tygar, and D. Song. The TESLA Broadcast Authentication Protocol. 5(2):2–13, 2002.

[17] E. Rescorla. SSL and TLS: Designing and Building Secure Systems. Addison-Wesley, 2000.

[18] R. Rivest and B. Lampson. SDSI: A Simple Distributed Security Infrastructure. http://theory.lcs.mit.edu/~cis/sdsi.html, 1996.

[19] S. Schneider. Formal Analysis of a Non-Repudiation Protocol. In CSFW '98: Proceedings of the 11th IEEE Computer Security Foundations Workshop, page 54, Washington, DC, USA, 1998.

[20] R. Sherwood, R. Braud, and B. Bhattacharjee. Slurpie: A Cooperative Bulk Data Transfer Protocol. IEEE INFOCOM, 2004.

[21] A. Stavrou, D. Rubenstein, and S. Sahu. A Lightweight, Robust P2P System to Handle Flash Crowds. In the 10th ICNP, pages 226–235, 2002.

[22] D. Williams and E. G. Sirer. Optimal Parameter Selection for Efficient Memory Integrity Verification Using Merkle Hash Trees. In Proceedings of Network Computing and Applications, Trusted Network Computing Workshop, 2004.

[23] C. K. Wong, M. Gouda, and S. S. Lam. Secure Group Communications Using Key Graphs. IEEE/ACM Trans. Netw., 8(1):16–30, 2000.

Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021 at 12:14:11 UTC from IEEE Xplore. Restrictions apply.