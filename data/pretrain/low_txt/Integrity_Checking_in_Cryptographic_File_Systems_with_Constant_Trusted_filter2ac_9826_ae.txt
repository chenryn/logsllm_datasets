### Evaluation of High-Entropy Files (Image and Compressed Files)

**Figure 9:**
- **Running Time Relative to AES-Merkle:**
- **Average Integrity Bandwidth Relative to AES-Merkle:**
- **Total Untrusted Storage for Integrity Relative to AES-Merkle:**

**Cache Sizes for Merkle Trees (in bytes):**
- 0
- 1024
- 2048
- 4096

**Performance Metrics:**
- **MT-EINT, RAND-EINT, COMP-EINT:**
  - Running Time: 100%, 50%, 0%
  - Average Integrity Bandwidth: 100%, 50%, 0%
  - Total Untrusted Storage: 100%, 50%, 0%

### Figure 10: Performance Comparison of RAND-EINT and COMP-EINT Relative to MT-EINT

**Graphs:**
- **Running Time:**
  - MT-EINT: 100%
  - RAND-EINT: 100%
  - COMP-EINT: 100%
- **Average Integrity Bandwidth:**
  - MT-EINT: 100%
  - RAND-EINT: 100%
  - COMP-EINT: 100%
- **Total Untrusted Storage:**
  - MT-EINT: 100%
  - RAND-EINT: 100%
  - COMP-EINT: 100%

**Percentage of Random-Looking Blocks:**
- 100%
- 50%
- 0%

**Additional Untrusted Storage for Integrity:**
- **DEASNA Trace:**
  - MT-EINT: 2.56 MB
  - RAND-EINT and COMP-EINT: 7 KB
- **Maximum Overhead:**
  - **Average Integrity Bandwidth (HOME02 Trace):** 30.76%
  - **Untrusted Storage for Integrity (DEASNA Trace):** 19.14%

### 7.3 Discussion

From the evaluation of the three constructions (MT-EINT, RAND-EINT, and COMP-EINT), it is evident that no single scheme outperforms the others across all four metrics. The performance of both RAND-EINT and COMP-EINT is significantly influenced by the file block contents. To better understand the practical implications, we conducted a user study on several Linux machines in our department. The study measured the percentage of high-entropy blocks and blocks that cannot be compressed enough in users' home directories.

**Results:**
- **High-Entropy Blocks:** 28% of file blocks
- **Blocks That Cannot Be Compressed Enough:** 32% of file blocks

**Implications:**
- For cryptographic file systems handling files similar to those in users' home directories, the new integrity algorithms (RAND-EINT and COMP-EINT) improve upon Merkle trees in all four metrics.
- **COMP-EINT:** Best for read-only workloads with a priority on minimizing read latency.
- **RAND-EINT:** Best for most other workloads.
- **MT-EINT:** Remains the best option for applications with a large majority of high-entropy files (e.g., audio and video files).

We recommend implementing all three constructions in a cryptographic file system, allowing the application to choose the best scheme based on its typical workload.

### Application in Other Settings

The proposed algorithms can be applied in other settings where data authentication on untrusted storage is required. For example, they can be used to check the integrity of arbitrarily-large memory in a secure processor using a constant amount of trusted storage. In this setting, a trusted checker maintains a small amount of trusted storage and possibly a cache of recently read data blocks from main memory. The goal is to verify the integrity of untrusted memory with minimal bandwidth overhead.

**Modifications:**
- **COMP-EINT:** Can be adapted for use in settings where data is only authenticated, not encrypted.
- **RAND-EINT:** Suitable for settings where data is encrypted with a tweakable cipher.

### 8 Related Work

Our focus has been on Merkle trees as the primary point of comparison. However, other integrity protections are used in various cryptographic file systems. For instance:
- **TCFS [6] and SNAD [25]:** Store a hash or MAC for each file block, requiring trusted storage linear in the number of blocks.
- **SFS [22], SFSRO [11], Cepheus [10], FARSITE [1], Plutus [17], SUNDR [20], IBM StorageTank [23, 27]:** Build a Merkle tree per file and authenticate the root.
- **SiRiUS [13]:** Digitally signs each file, leading to linear integrity bandwidth for updates and checks.
- **Tripwire [19]:** Computes a hash per file and stores it in trusted storage, achieving constant trusted storage but linear integrity bandwidth.
- **PFS [32]:** Uses hash logging for journaling file systems, storing hashes and metadata in a protected memory area.

**Evaluations and Surveys:**
- **Riedel et al. [28]:** Framework for evaluating storage system security.
- **Wright et al. [33]:** Performance evaluation of five cryptographic file systems.
- **Sivathanu et al. [31] and Kher and Kim [18]:** Surveys on securing storage systems.

### 9 Conclusion

We have proposed two new integrity constructions, RAND-EINT and COMP-EINT, which authenticate file blocks in a cryptographic file system using only a constant amount of trusted storage per file. These constructions leverage the low entropy of block contents and sequentiality of file block writes to reduce the additional costs of integrity protection. Our experimental evaluation, using files from a standard Linux distribution and NFS traces, demonstrates that the performance of the new algorithms is significantly affected by file block contents and access patterns. For workloads with predominantly low-entropy file blocks, the new algorithms outperform Merkle trees in all four metrics.

### References

[1] A. Adya, W. J. Bolosky, M. Castro, G. Cermak, R. Chaiken, J. R. Douceur, J. Howell, J. R. Lorch, M. Theimer, and R. P. Wattenhofer. FARSITE: Federated, available, and reliable storage for an incompletely trusted environment. In Proc. 5th Symposium on Operating System Design and Implementation (OSDI). Usenix, 2002.

[2] Advanced encryption standard. Federal Information Processing Standards Publication 197, U.S. Department of Commerce/National Institute of Standards and Technology, National Technical Information Service, Springfield, Virginia, Nov. 2001.

[3] M. Bellare, R. Canetti, and H. Krawczyk. Keying hash functions for message authentication. In Proc. Crypto 1996, volume 1109 of Lecture Notes in Computer Science, pages 1–15. Springer-Verlag, 1996.

[4] J. Black and H. Urtubia. Side-channel attacks on symmetric encryption schemes: The case for authenticated encryption. In Proc. 11th USENIX Security Symposium, pages 327–338, 2002.

[5] M. Blum, W. S. Evans, P. Gemmell, S. Kannan, and M. Naor. Checking the correctness of memories. Algorithmica, 12:225–244, 1994.

[6] G. Cattaneo, L. Catuogno, A. D. Sorbo, and P. Persiano. The design and implementation of a transparent cryptographic file system for Unix. In Proc. USENIX Annual Technical Conference 2001, Freenix Track, pages 199–212, 2001.

[7] D. E. Clarke, G. E. Suh, B. Gassend, A. Sudan, M. van Dijk, and S. Devadas. Towards constant bandwidth overhead integrity checking of untrusted data. In Proc. 26th IEEE Symposium on Security and Privacy, pages 139–153, 2005.

[8] DES modes of operation. Federal Information Processing Standards Publication 81, U.S. Department of Commerce/National Bureau of Standards, National Technical Information Service, Springfield, Virginia, 1980.

[9] D. Ellard, J. Ledlie, P. Malkani, and M. Seltzer. Passive NFS tracing of email and research workloads. In Proc. Second USENIX Conference on File and Storage Technologies (FAST), pages 203–216, 2003.

[10] K. Fu. Group sharing and random access in cryptographic storage file systems. Master’s thesis, Massachusetts Institute of Technology, 1999.

[11] K. Fu, F. Kaashoek, and D. Mazieres. Fast and secure distributed read-only file system. ACM Transactions on Computer Systems, 20:1–24, 2002.

[12] FUSE: filesystem in userspace. http://fuse.sourceforge.net.

[13] E. Goh, H. Shacham, N. Modadugu, and D. Boneh. SiRiUS: Securing remote untrusted storage. In Proc. Network and Distributed Systems Security (NDSS) Symposium 2003, pages 131–145. ISOC, 2003.

[14] V. Gough. EncFS encrypted filesystem. http://arg0.net/wiki/encfs, 2003.

[15] S. Halevi and P. Rogaway. A tweakable enciphering mode. In Proc. Crypto 2003, volume 2729 of Lecture Notes in Computer Science, pages 482–499. Springer-Verlag, 2003.

[16] S. Halevi and P. Rogaway. A parallelizable enciphering mode. In Proc. The RSA conference - Cryptographer’s track (RSA-CT), volume 2964 of Lecture Notes in Computer Science, pages 292–304. Springer-Verlag, 2004.

[17] M. Kallahalla, E. Riedel, R. Swaminathan, Q. Wang, and K. Fu. Plutus: Scalable secure file sharing on untrusted storage. In Proc. Second USENIX Conference on File and Storage Technologies (FAST), 2003.

[18] V. Kher and Y. Kim. Securing distributed storage: Challenges, techniques, and systems. In Proc. First ACM International Workshop on Storage Security and Survivability (StorageSS 2005), 2005.

[19] G. H. Kim and E. H. Spafford. The design and implementation of Tripwire: A filesystem integrity checker. In Proc. Second ACM Conference on Computer and Communication Security (CCS), pages 18–29, 1994.

[20] J. Li, M. Krohn, D. Mazieres, and D. Shasha. Secure untrusted data repository. In Proc. 6th Symposium on Operating System Design and Implementation (OSDI), pages 121–136. Usenix, 2004.

[21] M. Liskov, R. Rivest, and D. Wagner. Tweakable block ciphers. In Proc. Crypto 2002, volume 2442 of Lecture Notes in Computer Science, pages 31–46. Springer-Verlag, 2002.

[22] D. Mazieres, M. Kaminsky, M. Kaashoek, and E. Witchel. Separating key management from file system security. In Proc. 17th ACM Symposium on Operating Systems Principles (SOSP), pages 124–139. ACM Press, 1999.

[23] J. Menon, D. Pease, R. Rees, L. Duyanovich, and B. Hillsberg. IBM Storage Tank - a heterogeneous scalable SAN file system. IBM Systems Journal, 42(2), 2003.

[24] R. Merkle. A certified digital signature. In Proc. Crypto 1989, volume 435 of Lecture Notes in Computer Science, pages 218–238. Springer-Verlag, 1989.

[25] E. Miller, D. Long, W. Freeman, and B. Reed. Strong security for distributed file systems. In Proc. the First USENIX Conference on File and Storage Technologies (FAST), 2002.

[26] A. Oprea, M. K. Reiter, and K. Yang. Space-efficient block storage integrity. In Proc. Network and Distributed System Security Symposium (NDSS). ISOC, 2005.

[27] R. Pletka and C. Cachin. Cryptographic security for a high-performance distributed file system. Technical Report RZ 3661, IBM Research, Sept. 2006.

[28] E. Riedel, M. Kallahalla, and R. Swaminathan. A framework for evaluating storage system security. In Proc. First USENIX Conference on File and Storage Technologies (FAST), pages 15–30, 2002.

[29] P. Rogaway and T. Shrimpton. Cryptographic hash-function basics: Definitions, implications, and separations for preimage resistance, second-preimage resistance, and collision resistance. In Proc. 11th International Workshop on Fast Software Encryption (FSE 2004), volume 3017 of Lecture Notes in Computer Science, pages 371–388. Springer-Verlag, 2004.

[30] Secure hash standard. Federal Information Processing Standards Publication 180-1, U.S. Department of Commerce/National Institute of Standards and Technology, National Technical Information Service, Springfield, Virginia, Apr. 1995.

[31] G. Sivathanu, C. Wright, and E. Zadok. Ensuring data integrity in storage: Techniques and applications. In Proc. ACM Workshop on Storage Security and Survivability, 2005.

[32] C. A. Stein, J. Howard, and M. I. Seltzer. Unifying file system protection. In Proc. USENIX Annual Technical Conference, pages 79–90, 2001.

[33] C. P. Wright, J. Dave, and E. Zadok. Cryptographic file systems performance: What you don’t know can hurt you. In Proc. Second Intl. IEEE Security in Storage Workhsop (SISW), 2003.