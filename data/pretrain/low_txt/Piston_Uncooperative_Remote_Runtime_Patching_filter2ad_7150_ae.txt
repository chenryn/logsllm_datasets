### Introduction
The vulnerability in question was initially deemed unpatchable. Piston, however, introduces a novel approach to exploit cleanup, enabling recovery from many of the unpredictable state changes introduced during a memory corruption exploit. We evaluated Piston on a large, real-world binary and a synthetic dataset provided by DARPA. Piston successfully applied patches to each binary, and in most cases, the patching process was fully automated.

### Acknowledgments
This work was supported by the Office of Naval Research (ONR) under Award Numbers N00014-17-1-2897, N00014-17-1-2011, and N00014-15-1-2948. The opinions, findings, and conclusions or recommendations expressed in this publication are those of the authors and do not necessarily reflect the views of the ONR.

### References
1. **CVE-2013-2028 Advisory**. [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-2028).
2. **Nginx CVE 2013-2028 Kingcope Exploit**. [Exploit-DB](https://www.exploit-db.com/exploits/26737/).
3. **Nginx CVE 2013-2028 Patch**. [Nginx](http://nginx.org/download/patch.2013.chunked.txt).
4. **Vulnerability Type Distribution of CVE Security Vulnerabilities**. [CVE Details](http://www.cvedetails.com/vulnerabilities-by-types.php).
5. **J. Arnold and M. F. Kaashoek**. *Ksplice: Automatic Rebootless Kernel Updates*. In Proceedings of the 4th ACM European Conference on Computer Systems, pages 187–198. ACM, 2009.
6. **G. Balakrishnan and T. Reps**. *WYSINWYX: What You See Is Not What You Execute*. ACM Transactions on Programming Languages and Systems (TOPLAS), 32(6):23, 2010.
7. **M. Bourquin, A. King, and E. Robbins**. *Accurate Comparison of Binary Executables*. 2013.
8. **M. Bourquin, A. King, and E. Robbins**. *Binslayer: Accurate Comparison of Binary Executables*. In Proceedings of the 2nd ACM SIGPLAN Program Protection and Reverse Engineering Workshop, page 4. ACM, 2013.
   - Available at: [GitHub](https://github.com/angr/angr)
9. **D. Brumley, P. Poosankam, D. Song, and J. Zheng**. *Automatic Patch-Based Exploit Generation is Possible: Techniques and Implications*. In Security and Privacy, 2008. SP 2008. IEEE Symposium on, pages 143–157. IEEE, 2008.
10. **C. Cadar, D. Dunbar, D. R. Engler, et al.** *Klee: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs*. In OSDI, volume 8, pages 209–224, 2008.
11. **F. Castaneda, E. C. Sezer, and J. Xu**. *Worm vs. Worm: Preliminary Study of an Active Counter-Attack Mechanism*. In Proceedings of the 2004 ACM Workshop on Rapid Malcode, pages 83–93. ACM, 2004.
12. **S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley**. *Unleashing Mayhem on Binary Code*. In Security and Privacy (SP), 2012 IEEE Symposium on, pages 380–394. IEEE, 2012.
13. **Y.-Y. Chang, P. Zavarsky, R. Ruhl, and D. Lindskog**. *Trend Analysis of the CVE for Software Vulnerability Management*. In Privacy, Security, Risk and Trust (PASSAT) and 2011 IEEE Third International Conference on Social Computing (SocialCom), 2011 IEEE Third International Conference on, pages 1290–1293. IEEE, 2011.
14. **H. Chen, J. Yu, C. Hang, B. Zang, and P.-C. Yew**. *Dynamic Software Updating Using a Relaxed Consistency Model*. IEEE Transactions on Software Engineering, 37(5):679–694, 2011.
15. **V. Chipounov, V. Kuznetsov, and G. Candea**. *S2E: A Platform for In-Vivo Multi-Path Analysis of Software Systems*, volume 47. ACM, 2012.
16. **C. Cifuentes and M. Van Emmerik**. *Recovery of Jump Table Case Statements from Binary Code*. In Proceedings of the Seventh International Workshop on Program Comprehension, pages 192–199. IEEE, 1999.
17. **T. Dullien and R. Rolles**. *Graph-Based Comparison of Executable Objects (English Version)*. SSTIC, 5:1–3, 2005.
18. **M. Egele, M. Woo, P. Chapman, and D. Brumley**. *Blanket Execution: Dynamic Similarity Testing for Program Binaries and Components*. In 23rd USENIX Security Symposium (USENIX Security 14), pages 303–317, 2014.
19. **H. Flake**. *Structural Comparison of Executable Objects*. 2004.
20. **C. Giuffrida, C. Iorgulescu, A. Kuijsten, and A. S. Tanenbaum**. *Back to the Future: Fault-Tolerant Live Update with Time-Traveling State Transfer*. In LISA, pages 89–104, 2013.
21. **C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum**. *Safe and Automatic Live Update for Operating Systems*. ACM SIGPLAN Notices, 48(4):279–292, 2013.
22. **D. Goodin**. *Windows 7, Not XP, Was the Reason Last Week's WCry Worm Spread So Widely*. [Ars Technica](https://arstechnica.com/security/2017/05/windows-7-not-xp-was-the-reason-last-weeks-wcry-worm-spread-so-widely/), 2017.
23. **C. M. Hayden, E. K. Smith, M. Denchev, M. Hicks, and J. S. Foster**. *Kitsune: Efficient, General-Purpose Dynamic Software Updating for C*. In ACM SIGPLAN Notices, volume 47, pages 249–264. ACM, 2012.
24. **C. M. Hayden, E. K. Smith, M. Hicks, and J. S. Foster**. *State Transfer for Clear and Efficient Runtime Updates*. In Data Engineering Workshops (ICDEW), 2011 IEEE 27th International Conference on, pages 179–184. IEEE, 2011.
25. **C. Kruegel, W. Robertson, F. Valeur, and G. Vigna**. *Static Disassembly of Obfuscated Binaries*. In USENIX Security Symposium, volume 13, pages 18–18, 2004.
26. **J. Lee, T. Avgerinos, and D. Brumley**. *TIE: Principled Reverse Engineering of Types in Binary Programs*. In Proceedings of the Network and Distributed System Security Symposium, NDSS 2011, San Diego, California, USA, 6th February - 9th February 2011, 2011.
27. **H. Martorell, J.-C. Fabre, M. Roy, and R. Valentin**. *Towards Dynamic Updates in AUTOSAR*. In SAFECOMP 2013-Workshop CARS (2nd Workshop on Critical Automotive Applications: Robustness & Safety) of the 32nd International Conference on Computer Safety, Reliability and Security, page NA, 2013.
28. **H. Martorell, J.-C. Fabre, M. Roy, and R. Valentin**. *Improving Adaptiveness of AUTOSAR Embedded Applications*. In Proceedings of the 29th Annual ACM Symposium on Applied Computing, pages 384–390. ACM, 2014.
29. **G. McManus, hal, and saelo**. *Nginx CVE 2013-2028 Metasploit Exploit*. [GitHub](https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/http/nginx_chunked_size.rb).
30. **M. A. McQueen, T. A. McQueen, W. F. Boyer, and M. R. Chaffin**. *Empirical Estimates and Observations of 0-Day Vulnerabilities*. In HICSS’09. 42nd Hawaii International Conference on System Sciences, pages 1–12. IEEE, 2009.
31. **C. Mulliner, J. Oberheide, W. Robertson, and E. Kirda**. *Patchdroid: Scalable Third-Party Security Patches for Android Devices*. In Proceedings of the 29th Annual Computer Security Applications Conference, pages 259–268. ACM, 2013.
32. **A. Nappa, R. Johnson, L. Bilge, J. Caballero, and T. Dumitras**. *The Attack of the Clones: A Study of the Impact of Shared Code on Vulnerability Patching*. In Security and Privacy (SP), 2015 IEEE Symposium on, pages 692–708. IEEE, 2015.
33. **J. A. Navas, P. Schachte, H. Søndergaard, and P. J. Stuckey**. *Signedness-Agnostic Program Analysis: Precise Integer Bounds for Low-Level Code*. In Programming Languages and Systems, pages 115–130. Springer, 2012.
34. **I. Neamtiu and M. Hicks**. *Safe and Timely Updates to Multi-Threaded Programs*. In ACM Sigplan Notices, volume 44, pages 13–24. ACM, 2009.
35. **I. Neamtiu, M. Hicks, G. Stoyle, and M. Oriol**. *Practical Dynamic Software Updating for C*, volume 41. ACM, 2006.
36. **M. Noonan, A. Loginov, and D. Cok**. *Polymorphic Type Inference for Machine Code*. In Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation, pages 27–41. ACM, 2016.
37. **Oracle**. *Ksplice*. [Ksplice](http://www.ksplice.com/).
38. **J. H. Perkins, S. Kim, S. Larsen, S. Amarasinghe, J. Bachrach, M. Carbin, C. Pacheco, F. Sherwood, S. Sidiroglou, G. Sullivan, et al.** *Automatically Patching Errors in Deployed Software*. In Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles, pages 87–102. ACM, 2009.
39. **E. Perla and M. Oldani**. *A Guide to Kernel Exploitation: Attacking the Core*. Elsevier, 2010.
40. **J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz**. *Cross-Architecture Bug Search in Binary Executables*. In Security and Privacy (SP), 2015 IEEE Symposium on, pages 709–724. IEEE, 2015.
41. **D. A. Ramos and D. Engler**. *Under-Constrained Symbolic Execution: Correctness Checking for Real Code*. In 24th USENIX Security Symposium (USENIX Security 15), pages 49–64, 2015.
42. **B. Schwarz, S. Debray, and G. Andrews**. *Disassembly of Executable Code Revisited*. In Reverse Engineering, 2002. Proceedings. Ninth Working Conference on, pages 45–54. IEEE, 2002.
43. **Secunia**. *Resources Vulnerability Review 2015*. [Secunia](http://secunia.com/resources/vulnerability-review/introduction/).
44. **Y. Shoshitaishvili, R. Wang, C. Hauser, C. Kruegel, and G. Vigna**. *Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in Binary Firmware*. 2015.
45. **M. Siniavine and A. Goel**. *Seamless Kernel Updates*. In Dependable Systems and Networks (DSN), 2013 43rd Annual IEEE/IFIP International Conference on, pages 1–12. IEEE, 2013.
46. **A. Sotirov**. *Hotpatching and the Rise of Third-Party Patches*. BlackHat USA, 2006.
47. **Tok, Teck Bok and Guyer, Samuel Z and Lin, Calvin**. *Efficient Flow-Sensitive Interprocedural Data-Flow Analysis in the Presence of Pointers*. In Compiler Construction, pages 17–31. Springer, 2006.
48. **J. Troger and C. Cifuentes**. *Analysis of Virtual Method Invocation for Binary Translation*. In Reverse Engineering, 2002. Proceedings. Ninth Working Conference on, pages 65–74. IEEE, 2002.
49. **R. van der Meulen**. *Gartner Says 6.4 Billion Connected "Things" Will Be in Use in 2016, Up 30 Percent from 2015*. [Gartner](http://www.gartner.com/newsroom/id/3165317).
50. **R. Wang, Y. Shoshitaishvili, C. Kruegel, and G. Vigna**. *Steal This Movie: Automatically Bypassing DRM Protection in Streaming Media Services*. In USENIX Security, pages 687–702, 2013.
51. **Wikipedia**. *DLL Injection*. [Wikipedia](https://en.wikipedia.org/wiki/DLL_injection).
52. **L. Xu, F. Sun, and Z. Su**. *Constructing Precise Control Flow Graphs from Binaries*. University of California, Davis, Tech. Rep, 2009.

### Appendix

#### A.1 Example
To provide more insight into Piston's operation, we present an example binary in which Piston can automatically patch out a stack-based buffer overflow. Listing 2 shows the code with an overflow in line 12 due to the call to `gets()`. Piston will receive the original binary, the patched version, and an exploit specification to achieve code execution. Note that we show the source code for clarity, although Piston operates entirely on the compiled executables.

Piston will execute the following high-level steps to remotely patch a process running the code in Listing 2:

1. **Patch Generation**: Using binary diffing techniques, Piston will identify that the `hello()` function has changed in the replacement binary. Piston then prepares a patch to insert the updated `hello()` function into the memory of the remote process.
2. **Repair Planning**: Piston will analyze the exploit specification and trace the exploit offline to determine what is corrupted during the exploit. As shown in Figure 2(b), the return address and the value of the variable `counter` are corrupted. Piston will automatically generate a repair routine to recover the value of the stack variable `counter` as well as the return address. In Figure 2(c), the arrow between `main_counter` and `counter` shows that the repair plan uses the value of `main_counter` to restore the value of `counter`.
3. **Remote Patching**: Piston will exploit the process using the provided specification to inject the patcher core. The patcher core first receives the repair routine from Piston, which is used to restore the corrupted stack values. Then, the patcher core receives the prepared patches to replace the `hello()` function. Finally, the process execution resumes on line 10, at the start of the patched `hello()`, now running a patched version of the function.

```c
int main_counter = 0;
while (1) {
    hello(main_counter);
    main_counter += 1;
    ...
}

void main() {
    ...
}

void hello(int counter) {
    char buf[0x20];
    puts("Enter your name: \n");
    gets(buf);
    printf("hello %s, you are visitor %d\n", buf, counter);
    ...
}
```

**Listing 2**: An example of a stack-based overflow that Piston can patch.

#### A.2 Glossary
We have used consistent terminology throughout the paper, and here are the definitions:

- **Corruption Effects**: A register or memory write influenced by data corrupted by the exploit.
- **Exploitation Point**: The point in the exploitation trace where it becomes apparent that the binary has been exploited.
- **Exploit Specification**: A script that carries out an exploit against the remote process to achieve remote code execution.
- **Exploitation Trace**: A detailed trace of the exploit running against the original binary (configured with the remote configuration). This trace is analyzed to generate the rollback and repair functions.
- **Hijacked Function**: The function from which the exploit hijacks control flow.
- **Original Binary**: The binary currently running on the remote process.
- **Overflow Instruction**: The instruction that performs the write triggering the detection of the exploitation point.
- **Patch Set**: The specific set of patches that Piston will apply to the remote process to transform it into a functional copy of the replacement binary.
- **Patching Stub**: A small payload injected by Piston into the remote process to facilitate various patching tasks.
- **Persistence Routine**: An optional routine, provided by the user, that tries to persist Piston’s changes on the remote machine (e.g., by overwriting the original binary with the replacement binary). In most use-cases for Piston, this is not possible due to lack of access.
- **Recovery Set**: A set of registers and stack variables that Piston determines need to be recovered before resuming remote process execution.
- **Remote Configuration**: The configuration of the remote process. For example, if the remote process is a web server, this would be the configuration file of the web server. Piston uses this to recreate an accurate exploit trace.
- **Remote Process**: A process (or piece of firmware) running on the remote system that the analyst wants to patch.
- **Repair Routine**: A function, either generated by Piston or provided by the analyst, that repairs state corruption in the remote process after Piston exploits it.
- **Replacement Binary**: The binary that the analyst wants to replace the original binary with on the remote process.
- **Rollback Routine**: A function, either generated by Piston or provided by the analyst, that undoes the effects of the hijacked function when the exploit prevents the hijacked function from completing properly.
- **Scratch Space**: Memory that can be used inside a function but will not be accessed outside of the function. This includes local stack space and data in the heap that will be freed before the end of the function.
- **State Transition Routine**: A function provided by the analyst, necessary when a patch introduces changes to structures. This function is responsible for updating all instances of the affected structures to fit the new definition of the structure.

**Figure 2**: A view of the stack frames of the program shown in Listing 2 during the automated repair process.
- **(a)**: The program is currently executing the function `hello()`. At the bottom of the stack frame of `hello()` is the return address, followed by the variable `counter`.
- **(b)**: After the call to `gets()`, the buffer overflows, corrupting the values of `ret_addr` and `counter`.
- **(c)**: Piston restores the value of `counter` using the redundant data on the stack that was not corrupted, specifically the value of `main_counter`. The value of the return address is also restored.
- **(d)**: Piston replaces `hello()` with the new version of the function `hello_patched()` taken from the patched binary. Finally, Piston chooses to restart the function `hello_patched()` and program execution continues safely.