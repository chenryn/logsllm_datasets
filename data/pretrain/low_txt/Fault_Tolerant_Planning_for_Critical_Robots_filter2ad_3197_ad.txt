### 4.2.1 Fault-free Performance

To assess the overhead of the proposed fault tolerance mechanisms, we first examine their performance under fault-free conditions. Figure 5 illustrates the impact of the FTplan component on system behavior.

**Figure 5: Impact of FTplan (without injected faults)**
- **Description**: This figure evaluates the effect of the FTplan component on fault-free system behavior by comparing three different robots:
  - **Robot1**: Uses the first model.
  - **Robot2**: Uses the second model.
  - **Robot1/2**: Incorporates an FTplan component that alternates between the first and second models.
- **Metrics**:
  - **Failure Proportions**: For each activity (M1W1 to M4W4), the figure shows the failure proportions for achieving different types of goals in a mission (photos, communications, and returns to initial position).
  - **Mission Failure Proportion**: A mission is considered failed if one or more mission goals were not achieved.
  - **Mean Number of Replanning Operations**: The average number of replanning operations observed during one experiment. For Robot1/2, this number is equivalent to the number of model switches during the mission.

**Note on W4**: Results from W4 should be interpreted with caution due to the presence of large obstacles that can cause navigational failures and permanently block the robot's path. While our work focuses on planning model faults rather than functional module limitations, success in W4 relies more on serendipity in plan selection rather than the correctness of the planner model. Nonetheless, it is valuable to study the system's reaction to unforeseen and unforgiving situations that may arise in an open and uncontrolled environment. The results show that different models exhibit different failure behaviors, particularly in W4.

**Overall Performance**:
- **Excluding W4**: The results are generally positive. Both Robot1 and Robot1/2 achieve all their goals, while Robot2 fails a few goals in M3 and all return goals in M4W1. These failures may be attributed to a larger set of constraints in the second model, which can affect performance and lead to underestimated distance declarations.
- **Activity Time**: The mean activity time (time until the system stops all activity in a mission) is approximately 404 seconds for Robot1, 376 seconds for Robot2, and 405 seconds for Robot1/2. Thus, the three systems have roughly equivalent time performance.

### 4.2.2 Fault-tolerance Efficacy

To evaluate the efficacy of the proposed mechanisms and the FTplan component, we injected 38 faults into our first model, conducting over 3500 experiments, equivalent to 1200 hours of testing. We discarded 10 mutants that could not find a plan for any of the four missions. We believe five of the remaining mutants are equivalent to the fault-free model, although the non-deterministic nature of autonomous systems makes it challenging to define objective equivalence criteria. Therefore, we include the results from these five mutants.

**Mutations Categorization**:
- **Attribute Value Substitutions**: 3
- **Variable Substitutions**: 6
- **Numerical Value Substitutions**: 10
- **Operator Substitutions**: 4
- **Constraint Removals**: 6

**Results**:
- **Failure Reduction**: The results provide objective evidence that model diversification positively contributes to fault tolerance. The reduction in failure rates is as follows:
  - **Photo Goals**: 62% (50% including W4)
  - **Communication Goals**: 70% (64% including W4)
  - **Return Goals**: 80% (58% including W4)
  - **Whole Missions**: 41% (29% including W4)

**Note on RobotFT**: In the presence of injected faults, RobotFT is less successful than a single fault-free model. This apparent decrease in dependability is due to incorrect plans being detected only after their execution has failed, potentially making one or more goals unachievable despite recovery. This underscores the importance of plan analysis procedures to detect errors before execution.

### 5. Conclusion

To our knowledge, this work is the first to propose fault-tolerant mechanisms based on diversified planning models. We introduced a component providing error detection and recovery suitable for fault-tolerant planning, implemented in the LAAS architecture. This component utilizes four detection mechanisms (watchdog timer, plan failure detector, online goal checker, and plan analyzer) and two recovery policies (sequential and concurrent planning). Our current implementation uses sequential planning with the first three error detection mechanisms.

**Performance and Efficacy**:
- **Overhead Assessment**: To evaluate the performance overhead and efficacy, we developed a validation framework using a simulated robot platform and conducted mutation experiments on declarative models. The experiments showed that the proposed mechanisms do not severely degrade system performance in the chosen scenarios and improve system behavior in the presence of model faults.

**Future Research Directions**:
- **Plan Analyzer Implementation**: This should enhance goal success levels in the presence of faults by increasing error detection coverage and reducing latency.
- **Concurrent Planning Policy**: Implementing and comparing this policy with sequential planning is of interest.
- **Diversification on Heuristics**: Evaluating diversification on planning heuristics rather than just models.
- **Additional Detection Capabilities**: Investigating the capabilities of recent additions to the LAAS architecture.
- **Statistical Relevance**: Conducting more experiments to improve the statistical relevance of the results. Using a large computer grid would significantly increase the number of executable experiments and eliminate the need for manual inspection to remove trivial mutants.

### References

[References listed here, formatted consistently and accurately.]

This revised version aims to provide a clearer, more coherent, and professional presentation of the research findings and future directions.