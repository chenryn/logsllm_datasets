### Store Key Bundle of a Contact
- **Function**: `Get-KB(ID', kb)`
- **Process**:
  - Extract the key bundle: `(wpk, spk, sig) ← kb`
  - Verify the static public key: `req spk ∈ CL-S[ID']`
  - Verify the signature: `req S-Ver(spk, wpk, sig)`
  - Enqueue the key pair in the contact list: `CL-KB[ID'].enq((wpk, spk))`

### Set Caller’s ID
- **Assignment**: `ME ← ID`

### Stored Signature Keys
- **Initialization**: `SK-sk[.] ← 𝜀`

### Stored Welcome Keys
- **Initialization**: `WK-wk[.] ← 𝜀`

### Contact List
- **Initialization**: `CL-KB[.] ← 𝜀`

### Group Specific State
- **Buffered Proposals**: `s.Props[.] ← 𝜀`
- **Roster**: `s.G ← [.]`
- **CGKA State**: `s.𝛾 ← 𝜀`
- **PRF-PRG State**: `s.𝜎 ← 𝜀`
- **FS-GAEAD States**: `s.𝑣[.] ← 𝜀`
- **Current Epoch ID**: `s.C-epid ← 𝜀`
- **My Signature Key**: `s.C-ssk ← 𝜀`
- **Verification Keys**: `s.Ep-SPK[., .] ← 𝜀`
- **MAC Key**: `s.km ← 𝜀`

### Figure 6: The SGM Construction: Initialization and PKI Algorithms

### Function to Determine if Authenticity of Epoch is Compromised
- **Function**: `*auth-compr(vid)`
- **Return**: `return ¬*PP-secure(vid, *Proj-PP(SGM-Data))`

### Function to Determine if ID’s Signature Key is Compromised in Epoch
- **Function**: `*SK-compr(vid, ID)`
- **Check**: `chk HG.getSKIDs(vid, ID) ∩ SK-Lk = ∅`

### Privacy Predicate
- **Function**: `*AM-sec (vid, S, 𝑖)`
- **Condition**:
  - If the privacy predicate is secure: 
    - `if *PP-secure(vid, *Proj-PP(SGM-Data))`
    - `return *FS-sec((S, 𝑖), *Proj-FS(SGM-Data, vid))`
  - Otherwise: `return false`

### Project History Graph to PRF-PRNG Game
- **Function**: `*Proj-PP (SGM-Data = (V, P, V-Lk, AM-Lk, BR, WK-Lk))`
- **Process**:
  - Initialize `V′` and `BI`
  - For each vertex in `V`:
    - Add `vid` to `V′`
    - Update `BI` with the result of `*CGKA-priv(vid', *Proj-CGKA(SGM-Data))`
  - Return `(V′, V-Lk, BI)`

### Project History Graph to CGKA Game
- **Function**: `*Proj-CGKA (SGM-Data = (V, P, V-Lk, AM-Lk, BR, WK-Lk))`
- **Process**:
  - Initialize `V′` and `P′`
  - For each vertex in `V`:
    - Add `(vid, orig, pid)` to `V′`
    - For each operation in `V`:
      - If the operation is `add`, update `data′` and `𝑝′`
      - If the operation is `rem`, set `𝑝′` to `𝑝`
      - If the operation is `upd`, set `𝑝′` to `⊥`
      - Add `𝑝′` to `P′`
  - Return `(V′, P′, V-Lk, BR, WK-Lk)`

### Project History Graph to FS-GAEAD Game
- **Function**: `*Proj-FS (SGM-Data = (V, P, V-Lk, AM-Lk, BR, WK-Lk), vid)`
- **Process**:
  - Initialize `AM-Lk′`
  - For each entry in `AM-Lk`:
    - Add `(ID, AM-Rcvd[ID], AM-Tr[ID])` to `AM-Lk′`
  - Return `AM-Lk′`

### Figure 8: Safety Oracles and Safety Predicate of the Security Game for SGM Schemes

### Process a Proposal
- **Function**: `Proc-PM(P)`
- **Process**:
  - Extract proposal: `(P′, 𝑡, sig) ← P`
  - Extract epoch and ID: `(., epid, ID, ., .) ← P′`
  - Check current epoch: `req epid = s.C-epid`
  - Retrieve static public key: `spk ← s.Ep-SPK[epid, ID]`
  - Verify message tag: `req M-Ver(s.km, P′, 𝑡)`
  - Verify signature: `req S-Ver(spk, (P′, 𝑡), sig)`
  - Add proposal to buffer: `s.Props +← P′`
  - Return proposal information: `return *get-propInfo(P′)`

### Send a Message
- **Function**: `Send(𝑎, 𝑚)`
- **Process**:
  - Get current epoch: `𝐸 ← s.C-epid`
  - Send message: `(s.𝑣[𝐸], ¯𝑒) ← F-Send(s.𝑣[𝐸], (𝐸, 𝑎), 𝑚)`
  - Prepare message: `𝑒′ ← (𝐸, 𝑎, ¯𝑒)`
  - Sign message: `sig ← S-Sign(s.C-ssk, 𝑒′)`
  - Return message and signature: `return (𝑒′, sig)`

### Process Commit Message
- **Function**: `Proc-CM(T)`
- **Process**:
  - Extract commit message: `(T′, 𝑡, sig) ← T`
  - Extract epoch and ID: `(., epid, ID, h, ¯T) ← T′`
  - Check current epoch: `req epid = s.C-epid`
  - Retrieve static public key: `spk ← s.Ep-SPK[epid, ID]`
  - Verify message tag: `req M-Ver(s.km, T′, 𝑡)`
  - Verify signature: `req S-Ver(spk, (T′, 𝑡), sig)`
  - Get proposal: `P ← s.Props[h]`
  - Call CGKA: `(s.𝛾, GI, 𝐼) ← K-Proc-Com(s.𝛾, ¯T)`
  - Update PRF-PRG state: `(s.𝜎, 𝑘𝑒 , s.km, s.C-epid) ← PP(s.𝜎, 𝐼 , H(T′))`
  - Update roster: `s.G ← GI.G`
  - Get position: `𝑝𝑜𝑠 ← *roster-pos(ME, s.G)`
  - Initialize FS-GAEAD: `s.𝑣[s.C-epid] ← F-Init(𝑘𝑒 , |s.G| , 𝑝𝑜𝑠)`
  - Update verification keys: `s.Ep-SPK[s.C-epid, .] ← *new-spks(s.Ep-SPK[epid, ·], P)`
  - Retrieve and set signature key: `spk ← s.Ep-SPK[s.C-epid, ME]` and `s.C-ssk ← SK-sk[spk]`
  - Return group information: `return GI`

### Join a Group
- **Function**: `Proc-WM(W)`
- **Process**:
  - Extract welcome message: `(W′, 𝑡, sig) ← W`
  - Extract sender ID and other data: `(., ID𝑠 , ., v,𝑊pub,𝑊priv, 𝑒, wpk, spk) ← W′`
  - Retrieve static public key: `spk ← spk[ID𝑠 ]`
  - Verify key and signature: `req spk ∈ CL-S[ID𝑠 ] ∧ S-Ver(spk, W′, sig)`
  - Retrieve welcome keys: `(esk, isk) ← WK-wk[wpk]`
  - Decrypt session key: `s.𝜎 ← E-Dec(esk, 𝑒)`
  - Join group: `(s.𝛾, GI, 𝐼) ← K-Join(ME, ID𝑠 ,𝑊pub,𝑊priv, isk)`
  - Update PRF-PRG state: `(s.𝜎, 𝑘𝑒 , s.km, s.C-epid) ← PP(s.𝜎, 𝐼 , v)`
  - Verify message tag: `req M-Ver(s.km, (W′, s.C-epid), 𝑡)`
  - Update roster: `s.G ← GI.G`
  - Get position: `𝑝𝑜𝑠 ← *roster-pos(ME, s.G)`
  - Initialize FS-GAEAD: `s.𝑣[s.C-epid] ← F-Init(𝑘𝑒 , |s.G| , 𝑝𝑜𝑠)`
  - Update verification keys: `s.Ep-SPK[s.C-epid, .] ← spk`
  - Retrieve and set signature key: `spk ← s.Ep-SPK[s.C-epid, ME]` and `s.C-ssk ← SK-sk[spk]`
  - Clear proposals: `s.Props ← 𝜀`

### Create a Group
- **Function**: `Create(spk, wpk; 𝑟)`
- **Process**:
  - Initialize roster: `s.G ← [ME]`
  - Retrieve welcome keys: `wsk ← WK-wk[wpk]` and `(·, isk) ← wsk`
  - Create group: `(s.𝛾, 𝐼) ← K-Create(ME, isk; 𝑟)`
  - Update PRF-PRG state: `(s.𝜎, 𝑘𝑒 , s.km, s.C-epid) ← PP(0, 𝐼 , 0)`
  - Update verification keys: `s.Ep-SPK[s.C-epid, ME] ← spk`
  - Initialize FS-GAEAD: `s.𝑣[s.C-epid] ← F-Init(𝑘𝑒 , 1, ME)`

### Add Proposal
- **Function**: `Add(ID𝑎)`
- **Process**:
  - Retrieve key bundle: `kb′ ← CL-KB[ID𝑎]`
  - Extract keys: `((epk, ipk), spk) ← kb′`
  - Generate add proposal: `(s.𝛾, ¯P) ← K-Add(s.𝛾, ID𝑎, ipk)`
  - Prepare proposal: `P′ ← ("add", s.C-epid, ME, (ID𝑎, kb′), ¯P)`
  - Tag message: `𝑡 ← M-Tag(s.km, P′)`
  - Sign proposal: `sig ← S-Sign(s.C-ssk, (P′, 𝑡))`
  - Return proposal: `return (P′, 𝑡, sig)`

### Remove Proposal
- **Function**: `Remove(ID𝑟 )`
- **Process**:
  - Generate remove proposal: `(s.𝛾, ¯P) ← K-Remove(s.𝛾, ID𝑟 )`
  - Prepare proposal: `P′ ← ("rem", s.C-epid, ME, ID𝑟 , ¯P)`
  - Tag message: `𝑡 ← M-Tag(s.km, P′)`
  - Sign proposal: `sig ← S-Sign(s.C-ssk, (P′, 𝑡))`
  - Return proposal: `return (P′, 𝑡, sig)`

### Update Proposal
- **Function**: `Update(spk; 𝑟)`
- **Process**:
  - Check signature key: `req SK-sk[spk] ̸= 𝜀`
  - Generate update proposal: `(s.𝛾, ¯P) ← K-Update(s.𝛾; 𝑟)`
  - Prepare proposal: `P′ ← ("upd", s.C-epid, ME, spk, ¯P)`
  - Tag message: `𝑡 ← M-Tag(s.km, P′)`
  - Sign proposal: `sig ← S-Sign(s.C-ssk, (P′, 𝑡))`
  - Return proposal: `return (P′, 𝑡, sig)`

### Receive a Message
- **Function**: `Rcv(𝑎, 𝑒)`
- **Process**:
  - Extract message and signature: `(𝑒′, sig) ← 𝑒`
  - Extract epoch and sender: `(epid, 𝑎, ¯𝑒) ← 𝑒′`
  - Receive message: `(s.𝑣[epid], ID𝑠 , 𝑖, 𝑚) ← F-Rcv(s.𝑣[epid], (epid, 𝑎), ¯𝑒)`
  - Check sender: `req ID𝑠 ̸= ⊥`
  - Retrieve static public key: `spk ← s.Ep-SPK[epid, ID𝑠 ]`
  - Verify signature: `req S-Ver(spk, 𝑒′, sig)`
  - Return message details: `return (epid, ID𝑠 , 𝑖, 𝑚)`

### Commit
- **Function**: `Commit(P; 𝑟)`
- **Process**:
  - Check proposals: `req P ⊆ s.Props`
  - Extract proposals: `¯P ← P.¯P`
  - Commit changes: `(s.𝛾,𝑊pub, WPrv, ¯T, 𝐼) ← K-Commit(s.𝛾, ¯P; 𝑟)`
  - Prepare commit message: `T′ ← ("com", s.C-epid, ME, H(P), ¯T)`
  - Compute hash: `v ← H(T′)`
  - Update PRF-PRG state: `(., ., 𝑘𝑚, epid) ← PP(s.𝜎, 𝐼 , v)`
  - Tag message: `𝑡 ← M-Tag(𝑘𝑚, T′)`
  - Sign commit message: `sig ← S-Sign(s.C-ssk, (T′, 𝑡))`
  - Finalize commit message: `T ← (T′, 𝑡, sig)`
  - Get added IDs and keys: `(ID, wpk) ← *added(P)` and `spk ← *new-spks(s.Ep-SPK[s.C-epid, ·], P)`
  - For each ID, prepare welcome messages:
    - Encrypt session key: `𝑒 ← E-Enc(wpk[𝑖].epk, s.𝜎)`
    - Prepare welcome message: `W′ ← ("wel", ME, ID[𝑖], v,𝑊pub, . . . , WPrv[𝑖], 𝑒, wpk[𝑖], spk)`
    - Tag message: `𝑡 ← M-Tag(𝑘𝑚, (W′, epid))`
    - Sign welcome message: `sig ← S-Sign(spk[ME], (W′, 𝑡))`
    - Finalize welcome message: `W[𝑖] ← (W′, 𝑡, sig)`
  - Return commit and welcome messages: `return (epid, W, T)`

### Figure 7: The SGM Construction: Main Algorithms

### References
1. J. Alwen, M. Capretto, M. Cueto, C. Kamath, K. Klein, G. Pascual-Perez, K. Pietrzak, and M. Walter. Keep the dirt: Tainted treeKEM, an efficient and provably secure continuous group key agreement protocol. IACR Cryptol. ePrint Arch., 2019:1489, 2019.
2. J. Alwen, S. Coretti, and Y. Dodis. The double ratchet: Security notions, proofs, and modularization for the Signal protocol. In Y. Ishai and V. Rijmen, editors, EUROCRYPT 2019, Part I, volume 11476 of LNCS, pages 129–158. Springer, Heidelberg, May 2019.
3. J. Alwen, S. Coretti, Y. Dodis, and Y. Tselekounis. Security analysis and improvements for the IETF MLS standard for group messaging. In D. Micciancio and T. Ristenpart, editors, CRYPTO 2020, Part I, volume 12170 of LNCS, pages 248–277. Springer, Heidelberg, Aug. 2020.
4. J. Alwen, S. Coretti, Y. Dodis, and Y. Tselekounis. Modular design of secure group messaging protocols and the security of MLS. Cryptology ePrint Archive, Report 2021/1083, 2021. https://ia.cr/2021/1083.
5. J. Alwen, S. Coretti, D. Jost, and M. Mularczyk. Continuous group key agreement. Cryptology ePrint Archive, Report 2020/1327, 2020. https://eprint.iacr.org/2020/1327.
6. J. Alwen, D. Jost, and M. Mularczyk. On the insider security of MLS. IACR Cryptol. ePrint Arch., 2020:1327, 2020.
7. R. Barnes. Subject: [MLS] Remove without double-join (in TreeKEM), 2018. https://mailarchive.ietf.org/arch/msg/mls/Zzw2tqZC1FCbVZA9LKERsMIQXik.
8. R. Barnes, B. Beurdouche, J. Millican, E. Omara, K. Cohn-Gordon, and R. Robert. Internet-Draft draft-ietf-mls-protocol-11, Internet Engineering Task Force, Dec. 2020. Work in Progress.
9. K. Bhargavan, B. Beurdouche, and P. Naldurg. Formal Models and Verified Protocols for Group Messaging: Attacks and Proofs for IETF MLS. Research report, Inria Paris, Dec. 2019.
10. A. Bienstock, Y. Dodis, and P. Rösler. On the price of concurrency in group ratcheting. Cryptology ePrint Archive, Report 2020/1593, 2020. https://eprint.iacr.org/2020/1593.
11. C. Brzuska, E. Cornelissen, and K. Kohbrok. Cryptographic security of the MLS ratcheting protocols. In R. Pass and K. Pietrzak, editors, TCC, 2020. Cryptology ePrint Archive, Report 2021/137, 2021. https://eprint.iacr.org/2021/137.
12. R. Canetti, J. A. Garay, G. Itkis, D. Micciancio, M. Naor, and B. Pinkas. Multicast security: A taxonomy and some efficient constructions. In IEEE INFOCOM’99, pages 708–716, New York, NY, USA, Mar. 21–25, 1999.
13. K. Cohn-Gordon, C. Cremers, L. Garratt, J. Millican, and K. Milner. On end-to-end encryption: Asynchronous group messaging with strong security guarantees. In D. Lie, M. Mannan, M. Backes, and X. Wang, editors, ACM CCS 2018, pages 1802–1819. ACM Press, Oct. 2018.
14. K. Cohn-Gordon, C. J. F. Cremers, B. Dowling, L. Garratt, and D. Stebila. A formal security analysis of the Signal messaging protocol. In 2017 IEEE European Symposium on Security and Privacy, EuroS&P 2017, pages 451–466, 2017.
15. C. Cremers, B. Hale, and K. Kohbrok. Revisiting post-compromise security guarantees in group messaging. IACR Cryptol. ePrint Arch., 2019:477, 2019.
16. Y. Dodis and N. Fazio. Public key broadcast encryption for stateless receivers. In J. Feigenbaum, editor, Digital Rights Management, pages 61–80, Berlin, Heidelberg, 2002. Springer Berlin Heidelberg.
17. E. Eaton, D. Jao, and C. Komlo. Towards post-quantum updatable public-key encryption via supersingular isogenies. Cryptology ePrint Archive, Report 2020/1593, 2020. https://eprint.iacr.org/2020/1593.
18. A. Fiat and M. Naor. Broadcast encryption. In D. R. Stinson, editor, CRYPTO’93, volume 773 of LNCS, pages 480–491. Springer, Heidelberg, Aug. 1994.
19. Z. Jafargholi, C. Kamath, K. Klein, I. Komargodski, K. Pietrzak, and D. Wichs. Be adaptive, avoid overcommitting. In J. Katz and H. Shacham, editors, CRYPTO 2017, Part I, volume 10401 of LNCS, pages 133–163. Springer, Heidelberg, Aug. 2017.
20. D. Jost, U. Maurer, and M. Mularczyk. Efficient ratcheting: Almost-optimal guarantees for secure messaging. In Y. Ishai and V. Rijmen, editors, EUROCRYPT 2019, Part I, volume 11476 of LNCS, pages 159–188. Springer, Heidelberg, May 2019.
21. Y. Kim, A. Perrig, and G. Tsudik. Group key agreement efficient in communication. IEEE Trans. Computers, 53(7):905–921, 2004.
22. H. Krawczyk. Cryptographic extraction and key derivation: The HKDF scheme. In T. Rabin, editor, CRYPTO 2010, volume 6223 of LNCS, pages 631–648. Springer, Heidelberg, Aug. 2010.
23. Matthew A. Weidner. Group Messaging for Secure Asynchronous Collaboration. Dissertation, 2019. https://mattweidner.com/acs-dissertation.pdf.
24. S. Mittra. Iolus: A framework for scalable secure multicasting. In Proceedings of ACM SIGCOMM, pages 277–288, Cannes, France, Sept. 14–18, 1997.
25. S. Panjwani. Tackling adaptive corruptions in multicast encryption protocols. In S. P. Vadhan, editor, TCC 2007, volume 4392 of LNCS, pages 21–40. Springer, 2007.
26. C. K. Wong, M. Gouda, and S. S. Lam. Secure group communications using key graphs. IEEE/ACM Transactions on Networking, 8(1):16–30, Feb. 2000.
27. Master’s thesis, University of Cambridge, June 2019.