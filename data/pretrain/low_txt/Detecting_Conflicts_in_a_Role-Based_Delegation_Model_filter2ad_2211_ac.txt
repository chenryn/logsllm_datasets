# Position and Role Assignments

The following positions and roles will remain unchanged:

- **Andreas**: Supervisor / Group Manager
- **Jonathan**: Accountant / Team Manager
- **Jeremy**: Clerk / Team Manager
- **James**: Clerk / Employee

### Figure 4: Extended Role Assignment

While it is possible to let the Accountant/Team Manager role inherit the functionality of a Clerk, we assume that no inheritance mechanisms are present. This extended definition can be used to resolve some of the conflicts identified earlier. A new definition for role delegation is necessary. A possible extended functional delegation rule could be:

- **Role Delegation**: A user \( u_1 \) can only delegate the function \( f_1 \) of a role \( (f_1/P_1) \) to another user \( u_2 \), if:
  1. \( u_1 \) is assigned to an original role \( (f_1/P_1) \).
  2. \( u_2 \) also holds Position \( P_1 \).

According to our definition of simple static and dynamic Separation of Duty (SoD) properties (Table 2), we might still have conflicts for the above initial assignment. This depends on whether we declare two roles to be mutually exclusive based on their functions or not. If the functions of Accountant and Clerk are still exclusive, and simple static and dynamic constraints are based on this property, we will still encounter conflicts as in our earlier scenario.

However, the difference in this scenario is that user Andreas will not be able to delegate the Supervisor function to Jonathan anymore, as their positions are different. Thus, an operational SoD constraint will be difficult to break, assuming that sensitive permissions such as signing a cheque are only combined with senior positions and are thus less likely to be delegated.

## Summary and Conclusion

We have demonstrated how to implement and enforce a set of static and dynamic SoD constraints in a role-based access control (RBAC) model using a rule-based, declarative approach. Depending on the type of RBAC model, the initial configuration, administrative actions, and user behavior, these constraints can be broken. Extending the model with simple delegation mechanisms is an additional source of conflict.

Simulating a role-based model with integrated constraints and delegation mechanisms is just the first step. We intend to pursue further work on how to detect and resolve these conflicts in a more formal model. According to our definition of an extended role, we might want to make a distinction between function and position hierarchies. This extended definition of a role and the distinction between the function and position of an employee seem to be a step in the right direction. However, apart from redefining delegation rules, well-known SoD constraints might also need to be changed to cater for this extension.

We have recently completed work describing how we use the specification language Alloy and its model checking facilities to analyze the implications of the simultaneous integration of administrative role-based access control (ARBAC) extensions and constraints. The next step is to investigate the relationship between such a formal specification and a set of executable rules as presented here.

## Acknowledgements

The author is sponsored by the Engineering and Physical Sciences Research Council (EPSRC) under award no. 99311141. The comments from the reviewers and from Dr. J. D. Moffett helped to clarify this paper. Further support was given by the HISE research group under Prof. J. McDermid.

Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021 at 07:10:28 UTC from IEEE Xplore. Restrictions apply.

## References

[1] G. Ahn. RCL 2000. Ph.D. dissertation, George Mason University, 2000.
[2] E. Barka and R. Sandhu. Framework for Role-Based Delegation Models. In 16th Annual Computer Security Applications Conference, New Orleans, Louisiana, 2000.
[3] F. Chen and R. Sandhu. Constraints for RBAC. In 1st ACM Workshop on Role-Based Access Control, pages 39–46, Gaithersburg, MD, 1995.
[4] D. Clark and D. Wilson. A Comparison of Commercial and Military Security Policies. In IEEE Symposium on Security and Privacy, pages 184–194, Oakland, California, 1987.
[5] W. Clocksin and C. Mellish. Programming in Prolog. Springer, 4th edition, 1996.
[6] N. Damianou, N. Dulay, E. Lupu, and M. Sloman. The Ponder Policy Specification Language. In Policies for Distributed Systems and Networks, volume 1995, pages 18–38, Bristol, 2001. Springer Lecture Notes in Computer Science.
[7] R. Kuhn. Mutual exclusion of roles as a means of implementing separation of duty in role-based access control systems. In Proceedings of the second ACM workshop on Role-based access control, pages 23–30, 1997.
[8] Z. Longhua, G. Ahn, and Chu. B. A Rule-based Framework for Role-Based Delegation. In ACM SACMAT, Chantilly, VA, USA, 2001.
[9] E. Lupu, D. Marriott, M. Sloman, and N. Yialelis. A policy-based role framework for access control. Proceedings of the first ACM Workshop on Role-based access control, pages 215–224, 1996.
[10] J. Moffett and M. Sloman. The Source of Authority for Commercial Access Control. IEEE Computer, pages 59–69, 1988.
[11] M. Nash and K. Poland. Some Conundrums Concerning Separation of Duty. In IEEE Symposium on Security and Privacy, pages 201–209, Oakland, CA, 1990.
[12] R. Sandhu. Transaction Control Expressions for Separation of Duties. In 4th Aerospace Computer Security Conference, pages 282–286, Arizona, 1988.
[13] R. Sandhu, V. Bhamidipati, and Q. Munawer. The ARBAC97 model for role-based administration of roles. ACM Transactions. Inf. Syst. Security, 2(1):105 – 135, 1999.
[14] R. Sandhu, E. Coyne, H. Feinstein, and C. Youman. Role-based access control models. IEEE Computer, 29(2):38–47, 1996.
[15] R. Sandhu, D. Ferraiolo, and R. Kuhn. The NIST Model for Role-based Access Control: Towards a Unified Standard. In 5th ACM RBAC, Berlin, Germany, 2000.
[16] A. Schaad and J. Moffett. The Incorporation of Control Principles into Access Control Policies (Extended Abstract). In Hewlett Packard Policy Workshop, Bristol, 2001.
[17] A. Schaad, J. Moffett, and J. Jacob. The access control system of a European bank - a case study. In ACM Symposium on access control models and technologies (SACMAT), Chantilly, VA, USA, 2001.
[18] R. Simon and M. Zurko. Separation of Duty in Role-Based Environments. In Computer Security Foundations Workshop X, Rockport, Massachusetts, 1997.
[19] M. Sloman and J. Moffett. Delegation of Authority. In Integrated Network Management II, pages 595–606. North Holland, 1991.

## Prolog Source Code: Conflict Detection in a Role-Based Delegation Model

### Author: Andreas Schaad
### Date: 01/06/2001

#### Simple Simulation of the RBAC96 Model and RBDM0 Delegation Extensions
Integration of static and dynamic Separation of Duty properties based on mutually exclusive roles. Facts are represented as a standard scenario of cheque processing.

```prolog
%--------------------------------------------------------------------
% Pre-processor
%--------------------------------------------------------------------
:- dynamic [plays/2].
:- dynamic [was_executed_on/4].
:- dynamic [holds_d/2].

% Simulate role activation
% Simulate permission execution
% Simulate delegation
unknown_predicate_handler(_, fail).

%--------------------------------------------------------------------
% Facts
%--------------------------------------------------------------------
user(andreas).
user(jonathan).
user(jeremy).
user(james).

role(supervisor).
role(accountant).
role(clerk).

permission(sign_cheque).
permission(issue_cheque).
permission(prepare_cheque).

cheque(customer_cheque).
cheque(supplier_cheque).

holds_o(andreas, supervisor).
holds_o(jonathan, accountant).
holds_o(jonathan, clerk).
holds_o(jeremy, clerk).
holds_o(james, clerk).

cando(supervisor, sign_cheque).
cando(accountant, prepare_cheque).
cando(clerk, dispatch_cheque).

superior(Role1, Role2).

mutexclusive(supervisor, accountant).
mutexclusive(accountant, clerk).

mutex(R1, R2) :-
    mutexclusive(R1, R2);
    mutexclusive(R2, R1).

operation(process_cheque, [prepare_cheque, sign_cheque, dispatch_cheque]).

%--------------------------------------------------------------------
% Separation of Duty Constraints
%--------------------------------------------------------------------
% Simple static SoD: A user must not be assigned to any two mutually exclusive roles r1, r2.
staticsod(User, Role1, Role2) :-
    holds(User, Role1),
    mutex(Role1, Role2),
    holds(User, Role2).

% Simple dynamic SoD: A user can be assigned to any two mutually exclusive roles r1, r2, but must not activate them at the same time.
dynamicsod(User, Role1, Role2) :-
    staticsod(User, Role1, Role2),
    plays(User, Role1),
    plays(User, Role2).

% Object-based Separation of Duties: User can hold and play mutually exclusive roles.
% He just may not act upon the same object through any of his mutex roles.
objectsod(User, Object, Role1, Role2) :-
    was_executed_on(Permission1, Object, User, Role1),
    was_executed_on(Permission2, Object, User, Role2),
    Role1 \= Role2,
    mutex(Role1, Role2).

% Operational Separation of Duties: must not be in possession of all permissions required in a sensitive operation.
operationalsod(User, Operation, Processlist, Permissionlist) :-
    user(User),
    operation(Operation, Processlist),
    collect_mutex_roles(User, Mutexlist),
    collect_all_permissions(Mutexlist, Permissionlist),
    subset(Processlist, Permissionlist).
```

Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021 at 07:10:28 UTC from IEEE Xplore. Restrictions apply.