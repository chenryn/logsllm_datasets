### Malware Behaviors and Characteristics

Malware can perform a variety of malicious activities, including distributed denial of service (DDoS) attacks and automatic self-updates. In some cases, the malware inserts tracking cookies or attempts to gather more information about the system's internal workings, such as by copying the `/etc/passwd` file and performing local banner scans. Surprisingly, only eight scripts contained functionality to automatically obtain root access. These scripts exploited C-based kernel vulnerabilities that write to the disk and compile upon exploitation. 

Intercommunication among these malware instances was almost exclusively conducted via IRC. Additionally, we observed several instances of spamming malware using email addresses extracted from the web application's MySQL database backend. In systems like phpBB, this is particularly effective because most forum users provide an email address during registration. Cross-referencing the bot IPs with data from the Spamhaus project [2] revealed that approximately 36% of them are currently listed in the spam blacklist.

One notable feature that transcends our categorizations among PHP scripts is the ability to break out of PHP safe mode. PHP safe mode restricts certain functionalities, such as executing system commands and modifying the file system. The malware we observed bypassing safe mode often uses known exploits that target PHP, MySQL, or web server software. Finally, although we identified over 5,648 unique injection scripts from distinct botnets, nearly half of them point to zombie botnets. These botnets no longer have a centralized control mechanism, and the remotely included scripts are no longer accessible. However, they still generate a significant amount of HTTP traffic.

### Limitations

A simpler, but less dynamic, approach to eliciting search worm traffic might involve generating large static pages with content representative of various popular web applications. However, this method does not produce the volume or diversity of attacks we observed. For example, one of our departmental websites, which has a much higher PageRank than our deployment site, witnessed only 437 similar attacks since August 2006. In contrast, our system recorded over 368,000 attacks in just over two months. Moreover, the attacks on the university website were far less varied and interesting, likely originating from a few botnets that issue broad search queries and inject their attacks, or simply attack common file names with typical variable names. These unsophisticated botnets are less widespread because they fail to infect many hosts. Our approach, however, provided more insightful observations about the scope and diversity of attacks by casting a wider net.

For real-world honeypot deployments, detection and exploitation of the honeypot itself can be a concern. Our system, like other honeypots [23], can be detected using various fingerprinting techniques [14]. A well-crafted bot that knows a specific string always appears in pages returned by a given web application could request the page from us and check for the presence of that string. Since we would likely fail to produce that string, our honeypot would be detected.

While the detectability of our web honeypot is a limitation, it has not hindered our efforts to characterize current attack trends. The search worms we observed used search engines to find identifying information about web applications and attacked the vulnerability upon the first visit to the site, likely to avoid slowing down the infection process. Additionally, it is often difficult to discern the origin of the web application, as many do not contain strings that uniquely identify the software. In our analysis, we frequently had difficulty identifying the targeted web application manually, suggesting that automating this process might be non-trivial.

Lastly, the limitations of our approach manifest as trade-offs. Our decision to design a stateless system results in a memory-efficient and lightweight deployment. However, this design choice makes handling stateful protocols nearly impossible. It is conceivable that our architecture could be modified to better interact with stateful protocols by incorporating flow sequence information into training and then recalling its hierarchy during generation. For multi-stage attacks, ScriptGen [18, 17] may be a better choice for emulating multi-stage protocol interaction and can be used in conjunction with our technique to cast a wider net initially to entice such malware.

### Conclusion

In this paper, we use a number of multi-disciplinary techniques to generate dynamic responses to protocol interactions. We demonstrate the utility of our approach through the deployment of a dynamic content generation system targeted at eliciting attacks against web-based exploits. During a two-month period, we witnessed an unrelenting barrage of attacks from attackers who scour search engine results to find victims, specifically vulnerable web applications. The attacks targeted a diverse set of web applications and employed a wide range of injection techniques. We believe that the results provide valuable insights into the nature and scope of this increasing Internet threat.

### Acknowledgments

We thank Ryan MacArthur for his assistance with the forensic analysis presented in Section 6.2. We are grateful to him for the time spent analyzing and cataloging the captured payloads. We also thank David Dagon for cross-referencing bot IP addresses with the Spamhaus Project blacklists [2]. We extend our gratitude to our shepherd, George Danezis, and the anonymous reviewers for their invaluable comments and suggestions. We also thank Bryan Hoffman, Charles Wright, Greg MacManus, Moheeb Abu Rajab, Lucas Ballard, and Scott Coull for many insightful discussions during the course of this project. This work was funded in part by NSF grants CT-0627476 and CNS-0546350.

### Data Availability

To promote further research and awareness of the malware problem, the data gathered during our live deployment is available to the research community. For information on how to access this data, please see: http://spar.isi.jhu.edu/botnet_data/.

### References

[1] Milw0rm. See http://www.milw0rm.com/.
[2] The Spamhaus Project. See http://www.spamhaus.org/.
[3] The Google Hack Honeypot, 2005. See http://ghh.sourceforge.net/.
[4] ANDERSON, D. S., FLEIZACH, C., SAVAGE, S., AND VOELKER, G. M. Spamscatter: Characterizing internet scam hosting infrastructure. In Proceedings of the 16th USENIX Security Symposium, pp. 135–148.
[5] BARFORD, P., AND YEGNESWARAN, V. An inside look at botnets. In Advances in Information Security (2007), vol. 27, Springer Verlag, pp. 171–191.
[6] BEDDOE, M. The protocol informatics project, 2004.
[7] CHEUNG, A. Secunia’s WordPress GBK/Big5 character set "S" SQL injection advisory. See http://secunia.com/advisories/28005/.
[8] CUI, W., KANNAN, J., AND WANG, H. J. Discoverer: Automatic protocol reverse engineering from network traces. In Proceedings of the 16th USENIX Security Symposium (Boston, MA, August 2007), pp. 199–212.
[9] CUI, W., PAXSON, V., WEAVER, N., AND KATZ, R. H. Protocol-independent adaptive replay of application dialog. In Network and Distributed System Security Symposium 2006 (February 2006), Internet Society.
[10] CUI, W., PAXSON, V., AND WEAVER, N. C. GQ: Realizing a system to catch worms in a quarter million places. Tech. Rep. TR-06-004, International Computer Science Institute, 2006.
[11] DUNLAP, G. W., KING, S. T., CINAR, S., BASRAI, M. A., AND CHEN, P. M. Revirt: enabling intrusion analysis through virtual-machine logging and replay. In Proceedings of the 5th symposium on Operating systems design and implementation (New York, NY, USA, 2002), ACM Press, pp. 211–224.
[12] FREILING, F. C., HOLZ, T., AND WICHERSKI, G. Botnet tracking: Exploring a root-cause methodology to prevent distributed denial-of-service attacks. In Proceedings of the 10th European Symposium on Research in Computer Security (ESORICS) (September 2005), vol. 3679 of Lecture Notes in Computer Science, pp. 319–335.
[13] GU, G., PORRAS, P., YEGNESWARAN, V., FONG, M., AND LEE, W. BotHunter: Detecting malware infection through IDS-driven dialog correlation. In Proceedings of the 16th USENIX Security Symposium (August 2007), pp. 167–182.
[14] HOLZ, T., AND RAYNAL, F. Detecting honeypots and other suspicious environments. In Proceedings of the Workshop on Information Assurance and Security (June 2005).
[15] Know your enemy: Tracking botnets. Tech. rep., The Honeynet Project and Research Alliance, March 2005. Available from http://www.honeynet.org/papers/bots/.
[16] KREIBICH, C., AND CROWCROFT, J. Honeycomb - Creating Intrusion Detection Signatures Using Honeypots. In Proceedings of the Second Workshop on Hot Topics in Networks (Hotnets II) (Boston, November 2003).
[17] LEITA, C., DACIER, M., AND MASSICOTTE, F. Automatic handling of protocol dependencies and reaction to 0-day attacks with ScriptGen based honeypots. In RAID (2006), D. Zamboni and C. Krügel, Eds., vol. 4219 of Lecture Notes in Computer Science, Springer, pp. 185–205.
[18] LEITA, C., MERMOUD, K., AND DACIER, M. ScriptGen: an automated script generation tool for honeyd. In Proceedings of the 21st Annual Computer Security Applications Conference (December 2005), pp. 203–214.
[19] NEEDLEMAN, S. B., AND WUNSCH, C. D. A general method applicable to the search for similarities in the amino acid sequence of two proteins. Journal of Molecular Biology, 48 (1970), 443–453.
[20] NEWSOME, J., KARP, B., AND SONG, D. Polygraph: Automatically generating signatures for polymorphic worms. In Proceedings of the 2005 IEEE Symposium on Security and Privacy (Washington, DC, USA, 2005), IEEE Computer Society, pp. 226–241.
[21] NEWSOME, J., AND SONG, D. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proceedings of the Network and Distributed System Security Symposium (2005).
[22] PANG, R., YEGNESWARAN, V., BARFORD, P., PAXSON, V., AND PETERSON, L. Characteristics of Internet background radiation, October 2004.
[23] PROVOS, N. A virtual honeypot framework. In Proceedings of the 12th USENIX Security Symposium (August 2004), pp. 1–14.
[24] PROVOS, N., MCCLAIN, J., AND WANG, K. Search worms. In Proceedings of the 4th ACM workshop on Recurring malcode (New York, NY, USA, 2006), ACM, pp. 1–8.
[25] PROVOS, N., MCNAMEE, D., MAVROMMATIS, P., WANG, K., AND MODADUGU, N. The ghost in the browser: Analysis of web-based malware. In Usenix Workshop on Hot Topics in Botnets (HotBots) (2007).
[26] RAJAB, M. A., ZARFOSS, J., MONROSE, F., AND TERZIS, A. A multifaceted approach to understanding the botnet phenomenon. In Proceedings of ACM SIGCOMM/USENIX Internet Measurement Conference (October 2006), ACM, pp. 41–52.
[27] RAJAB, M. A., ZARFOSS, J., MONROSE, F., AND TERZIS, A. My botnet is bigger than yours (maybe, better than yours): Why size estimates remain challenging. In Proceedings of the first USENIX workshop on hot topics in Botnets (HotBots '07). (April 2007).
[28] RIDEN, J., MCGEEHAN, R., ENGERT, B., AND MUETER, M. Know your enemy: Web application threats, February 2007.
[29] TATA, S., AND PATEL, J. Estimating the selectivity of TF-IDF based cosine similarity predicates. SIGMOD Record 36, 2 (June 2007).
[30] WITTEN, I. H., AND BELL, T. C. The zero-frequency problem: Estimating the probabilities of novel events in adaptive text compression. IEEE Transactions on Information Theory 37, 4 (1991), 1085–1094.
[31] YEGNESWARAN, V., GIFFIN, J. T., BARFORD, P., AND JHA, S. An Architecture for Generating Semantics-Aware Signatures. In Proceedings of the 14th USENIX Security Symposium (Baltimore, MD, USA, Aug. 2005), pp. 97–112.