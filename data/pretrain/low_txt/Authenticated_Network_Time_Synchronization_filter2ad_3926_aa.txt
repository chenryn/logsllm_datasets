# Authenticated Network Time Synchronization

## Authors
- Benjamin Dowling, Queensland University of Technology
- Douglas Stebila, McMaster University
- Greg Zaverucha, Microsoft Research

## Publication Information
- **Conference:** 25th USENIX Security Symposium
- **Date:** August 10–12, 2016
- **Location:** Austin, TX
- **ISBN:** 978-1-931971-32-4
- **Open Access Sponsored by:** USENIX

## Abstract
The Network Time Protocol (NTP) is widely used by network-connected devices to synchronize their clocks with remote servers. Many security features, such as certificate validation and Kerberos ticket verification, rely on accurate time. However, most NTP implementations lack authentication, and the available authentication mechanisms in the standard have not been formally analyzed, require pre-shared keys, or have known cryptographic weaknesses.

In this paper, we introduce Authenticated NTP (ANTP), a protocol designed to protect against desynchronization attacks. ANTP minimizes server-side public key operations by infrequently performing key exchanges using public key cryptography and then relying on symmetric cryptography for subsequent time synchronization requests. This design avoids the need for server-side per-connection state and ensures that authentication does not degrade the accuracy of time synchronization.

We implemented ANTP in OpenNTPD using OpenSSL and measured its performance. Compared to plain NTP, ANTP's symmetric cryptography reduces server throughput by only a factor of 1.6. We also developed a novel provable security framework to analyze ANTP, demonstrating that it achieves secure time synchronization under standard cryptographic assumptions. This framework can be used to analyze other candidates for securing NTP.

**Keywords:** Time synchronization, Network Time Protocol (NTP), Provable security, Network security

## 1. Introduction
The Network Time Protocol (NTP) is one of the Internet's oldest protocols, dating back to RFC 958 published in 1985. In a basic NTP deployment, a client sends a single UDP packet to a server, which responds with a packet containing the current time. The response includes the times at which the request was received and the response was sent, allowing the client to estimate the network delay and adjust its clock. If the network delay is symmetric, the protocol is perfectly accurate.

### Importance of Accurate Time for Security
Accurate time is crucial for many security mechanisms:
- **Certificate Validation in TLS and Other Protocols:** Validating a public key certificate requires confirming that the current time is within the certificate's validity period. An inaccurate clock can lead to accepting expired or revoked certificates.
- **Ticket Verification in Kerberos:** Authentication tickets in Kerberos have a validity period, and an accurate clock is necessary to prevent the use of expired tickets.
- **HTTP Strict Transport Security (HSTS):** HSTS policies specify the duration for which HTTPS must be used. An inaccurate clock can cause these policies to expire, re-enabling downgrade attacks from HTTPS to HTTP.

For clients that set their clocks using NTP, these security mechanisms can be compromised by a network-level attacker who intercepts and modifies NTP traffic. Most NTP servers do not authenticate themselves to clients, making such attacks feasible. For example, Selvi demonstrated an attack on HSTS by advancing the clock of victims to expire HSTS policies. Malhotra et al. further highlighted the need for authenticated time synchronization by presenting various attacks that exploit unauthenticated NTP.

### NTP Security Today
Early versions of NTP had no standardized authentication method. NTPv3 introduced an authentication mechanism using pre-shared key symmetric cryptography, but key negotiation must be done out-of-band, which is impractical for large-scale deployments. NTPv4 introduced Autokey, a public key authentication mechanism, but it has not seen widespread adoption due to its use of small 32-bit seeds that are vulnerable to brute-force attacks. A more recent proposal is the Network Time Security (NTS) protocol, which we discuss in §2.3.

Most NTP servers do not support NTP authentication, and NTP clients in desktop and laptop operating systems will set their clocks based on unauthenticated NTP responses. On Linux and OS X, the client either periodically polls a server or creates an NTP request when the network interface is established. On Windows, clients synchronize their clock every nine hours (using time.microsoft.com) and ignore responses that would change the clock by more than 15 hours. These defaults reduce the opportunity for a man-in-the-middle (MITM) attacker to significantly alter the clock, but cumulative small changes can still lead to large inaccuracies over time.

### 1.1 Contributions
We present the ANTP protocol for authenticated network time synchronization, along with performance and security results. ANTP messages are transported in the extension fields of NTP messages. It allows a server to authenticate itself to a client using public key certificates and public key exchange, and provides cryptographic assurance using symmetric cryptography that packets have not been modified in transit.

ANTP has three phases:
1. **Negotiation Phase:** The client and server agree on cryptographic algorithms. This phase is infrequent, occurring monthly or less.
2. **Key Exchange Phase:** The client and server use public key cryptography to establish a symmetric key for authenticating future time synchronization responses. This phase is also infrequent, say monthly.
3. **Time Synchronization Phase:** The client sends a time synchronization request, and the server replies with an NTP response authenticated using the symmetric key. This phase can be frequent, perhaps daily or more often. Notably, the server does not need to keep per-client state, as it offloads this state to the client by encrypting and authenticating it under a long-term symmetric key.

The time synchronization phase of ANTP can be run in a "no-cryptographic-latency" mode, where the server sends two response packets: the first is the unauthenticated NTP packet, and the second is the same packet with ANTP extensions providing authentication. The client measures the roundtrip time based on the unauthenticated response but updates its clock only after authenticating the response. This ensures that the time required for authentication does not affect the accuracy of time synchronization.

### ANTP Performance
Performance constraints for time synchronization protocols are driven by the need for prompt responses from heavily loaded servers. ANTP's design allows it to achieve high performance while maintaining high security. The frequently performed time synchronization phase uses only symmetric cryptography, making it slightly more expensive than simple NTP. Since the session key established in the key exchange phase is reused across many time synchronization phases, expensive public key operations are amortized and can be separately load-balanced. Additionally, ANTP offloads state to clients, leaving the server stateless.

We implemented ANTP in OpenNTPD using OpenSSL's libcrypto library. Table 1 reports the performance of our implementation compared to unauthenticated simple NTP. ANTP decreases throughput and increases latency, but the impact is reasonable. On a single core of a server, ANTP supports 175k authenticated time synchronization connections per second, a factor of 1.6 fewer than the 291k unauthenticated simple NTP connections per second. Latency for time synchronization over a 1 gigabit per second local area network at 50% load increases from 147 microseconds for unauthenticated simple NTP to 168 microseconds for ANTP's time synchronization phase. The negotiation and key exchange phases are performed far less frequently and are more bandwidth-limited than CPU-limited.

| Phase | Throughput (connections/second) | Latency within LAN (µs) | Latency across US (ms) |
|-------|---------------------------------|-------------------------|------------------------|
| NTP   | 291,926                         | 147 ± 34                | 72.4 ± 0.1             |
| ANTP – Negotiation – RSA | 58,240                          | 202 ± 44                | 77.5 ± 0.1             |
| ANTP – Negotiation – ECDH | 146,808                         | 172 ± 35                | 75.3 ± 0.1             |
| ANTP – Key Exchange – RSA | 1,754                           | 997 ± 348               | 226.6 ± 6.2            |
| ANTP – Key Exchange – ECDH | 13,210                          | 2646 ± 345              | 258.0 ± 35             |
| ANTP – Time Synchronization | 175,644                        | 168 ± 35                | 73.7 ± 0.1             |
| ANTP – All 3 phases – RSA | -                               | 891 ± 125               | 75.8 ± 0.2             |
| ANTP – All 3 phases – ECDH | -                               | 344 ± 142               | 75.4 ± 0.4             |

Table 1: Performance results for each phase of ANTP, a complete 3-phase execution of ANTP, and NTP. Throughput: mean completed phases per second. Latency: mean and standard deviation of the latency of server responses at either 50% or 90% server load on a local area network (reported in microseconds) and across the United States (between Virginia and California) (reported in milliseconds). All are computed over 5 trials, top and bottom over 100 seconds each; see Section 4.2 for details.