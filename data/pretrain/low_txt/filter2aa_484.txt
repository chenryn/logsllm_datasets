# Through the Looking-Glass: An Examination of Network Security

## Introduction
- **Title:** Through the Looking-Glass, and What Eve Found There
- **Link:** [http://www.s3.eurecom.fr/lg/](http://www.s3.eurecom.fr/lg/)
- **Authors:** Luca 'kaeso' Bruno, Mariano 'emdel' Graziano
- **Date:** 10/08/2014

## About Us
- **S3 Group at EURECOM (France) - System Security**
  - Embedded systems
  - Networking devices
  - Critical infrastructures
  - Memory forensics
  - Malware research

## Outline
1. Motivations
2. Introduction to Looking Glasses
3. Threats
4. Vulnerabilities & Incidents
5. Countermeasures

## Motivations
### How This Started
Imagine you are a novice cyber-criminal searching for your next target:
- **Target:** Critical infrastructure
- **Impact:** Global
- **Skill Level:** Low
- **Goal:** Cause widespread disruption

#### Key Points
- The Internet
- Traffic routing across Autonomous Systems (ASes)
- Basic web skills, Google Dorks, etc.
- Gaining access to BGP routers
- A good candidate: LOOKING-GLASS

## Introduction to Looking Glasses
- **The Internet:** A network of networks, connected by BGP
  - [CAIDA AS Core Network Visualization](http://www.caida.org/research/topology/as_core_network/2014/)
- **BGP Routing Tables:** Each AS has a partial local view, and what you see depends on where you are
  - [ThousandEyes BGP Troubleshooting Scenarios](http://blog.thousandeyes.com/4-real-bgp-troubleshooting-scenarios/)
- **Connectivity Troubleshooting Tools:**
  - Distributed BGP probes (e.g., RIPE Labs)
  - Private shell exchanges (e.g., NLNOG)
  - Limited web access to routers via looking glasses

### What's in a Looking Glass?
- A simple '90s-style web script (usually PHP or Perl)
- Single file, can be dropped in web root
- Direct connection to SSH/telnet router console
- Cleartext configuration file (e.g., credentials)

### How It Works
- Public IP (data + BGP)
- Private admin (telnet/SSH)
- Public web (looking glass)
- Internet
- Example AS Configuration

### Where to Get It
- Focus on open-source common ones:
  - Cougar LG (Perl)
  - Cistron LG (Perl)
  - MRLG (Perl)
  - MRLG4PHP (PHP)

## Threats
### Targeting Humans
- Assume bug-proof software
- Human errors in deployment:
  - Enable CGI/mod_php/mod_perl
  - Protect configuration files
  - Protect private SSH keys
- Exposed router credentials

### Targeting the Web Application
- Minor bugs in the web frontend
- Exploit the LG web interface:
  - Improper escaping
  - XSS/CSRF/etc.
  - Cookie stealing for other web services

### Targeting the Server
- Medium severity bugs in the entire package
- Exploit the host through the LG:
  - Embedded third-party tools
  - Forked/modified modules
  - Escalate to the hosting server

### Targeting the Router
- Important bugs in the backend
- Exploit the router through the LG:
  - Missing input escaping
  - Command injection to the router
  - Known bugs in the router CLI
  - Escalate to router administration

### Targeting the Internet
- Control multiple routers in multiple ASes
- Exploit the Internet:
  - Reroute/blackhole local traffic
  - Announce bogus BGP prefixes
  - Chaos ensues

## Vulnerabilities & Incidents
### Web Issues
- **Exposed Credentials:**
  - Stored in cleartext: IPs, usernames, and passwords
  - Configuration files at known URLs
- **Cookie Stealing:**
  - XSS vulnerabilities in LG, targeting other web-apps

### Web Misconfigurations
- **Google Dorks for Login Credentials:**
  - Find LG configuration files
  - Examples:
    - "login" "telnet" inurl:lg.conf
    - "login" "pass" inurl:lg.cfg

### Default Config Paths
- Example from Cougar LG root directory:
  - as.txt, CHANGELOG, communities.txt, COPYING, favicon.ico, lg.cgi, lg.conf, makeaslist.pl, makedb.pl, README
- Crawl for it: $BASE_LG_URL/lg.conf

### Best Practices
- README sometimes mentions them
- Found about 35 exposed cases

### Exposed Source Code

### Exposed Private SSH Keys
- Default path for SSH keys (CVE-2014-3929) in Cougar LG
- SSH private keys stored in: /var/www/.ssh/private_key

### First Steps into the Web
- No CAPTCHA anywhere
- Eases attacker's work:
  - Automated resource mapping (ping-back and conf dumping)
  - Automated command injection
  - Automated attacks from multiple ASes (if bugs are found)

### XSS
- XSS in "addr" parameter (CVE-2014-3926)
- LG may not be a primary target, but other NOC services under the same-origin domain often are

### Router Command Injection
- CVE-2014-3927 in MRLG4PHP
- 'argument' parameter issue
- HTML escape != sanitization
- Code example (mrlg-lib.php:120)

### Remote Memory Corruption
- Third-party binaries in LG
- CVE-2014-3931 in MRLG (fastping SUID bin)
- ICMP echo reply used without proper validation
- Code example (fastping.c:546)

### Network Design
- Routers' admin consoles needlessly exposed over globally routable interfaces

## Countermeasures
### Code-wise
- Understand the dangers of exposing router consoles to the web with hardcoded credentials
- Review all critical web services written during the '90s

### Deployment-wise
- Use a dedicated read-only route-server as the LG endpoint
- Check if private files (LG config, SSH keys) are reachable over the web
- Double-check web server configurations (vhost vs. default docroot)

### Administration-wise
- Set up proper ACLs on routers
- Use strong, unique passwords
- Place admin and out-of-band services in private VLANs and subnets

## Recap
- Best practices are often disregarded
- Unaudited, old, forgotten code often sits in critical places
- Attackers exploit weak links and escalate quickly
- The Internet core is fragile

## Conclusion
- Thank you for listening!
- Thanks to all members of the NOPS team who helped in bug-finding

## Backup
- **Router CLI Escalation:**
  - Cracking Cisco weak hashes
  - Exploiting CLI bugs (Cisco, Juniper)
- **Reported Incidents**