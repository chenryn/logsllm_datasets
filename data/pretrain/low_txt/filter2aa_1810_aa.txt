# Pushing a Camel through the Eye of the Needle: Funneling Data in and Out of Protected Networks

## About Us
- **SensePost**: A specialist security firm based in South Africa.
- **Global Reach**: We serve clients around the world.
- **Contributions**: Talks, papers, and books.
- **Contact**: {marco, haroon}@sensepost.com
- **Focus**: Breaking (and thinking about breaking) stuff, with a bit of foosball on the side.

## Overview
This talk is not about foosball! It will cover the evolution of attacks and methods to funnel data in and out of protected networks.

## A Progression of Attacks
### Historical Context (1601-1990)
- **Unrestricted Access**: Victims had un-firewalled access to their hosts and the rest of the network.

### The Introduction of Firewalls (circa 2000)
- **Outbound Traffic Filtering**: Early firewalls failed to filter outbound traffic effectively.
- **Command Execution Scripts**: Tools like `CommandExec.[asp|jsp|php|*]` became prevalent.

### Creating Binaries on Remote Hosts
- **Tools and Techniques**:
  - `debug.exe` and similar utilities.
  - `upload.asp` and related scripts.
  - **Win32 Port Binding (1998)**: Enabled remote execution with more control.

### Remote Execution with Advanced Techniques
- **AJAX and XMLHttpRequest**: Modern web technologies used for more sophisticated attacks.
- **XML, SOAP, and Specialized Tools**: These tools, often with no vowels in their names, add to the attacker's arsenal.

## Time to Pivot
- **Historical Methods**:
  - `sp_quickkill`
  - `nc` (Netcat) usage
  - **tcpr by SensePost** and **fport by Foundstone** (circa 2000)

### XP and IPv6
- **SSH Tunnels**:
  - **Client-Pivot-Target Setup**:
    - Client listens on port 55555.
    - Pivot connects to target.
    - Proxied connection between client and target.
  - **SSH Tunnels (a)**:
    - Client runs `ssh -L 55555:pivot:25`.
    - Pivot runs `sshd` and listens on port 25.
    - Proxied connection from client to target port.
  - **SSH Tunnels (b)**:
    - Using `ssh -R 55555:localmachine:445`.
    - Requires an SSH client on the remote machine and an SSHD on one of ours.
    - Tools like `putty` and `plink` are useful here.

### Interlude: DNS2TCP
- **Tool**: Available from [http://www.hsc.fr/ressources/outils/dns2tcp/](http://www.hsc.fr/ressources/outils/dns2tcp/).
- **Use Cases**:
  - Ideal for remote access and stealing WiFi.
  - Combining with SSH tunnels for enhanced functionality.

### Layer 2 Bridges
- **Concept**: If you can't go to the network, bring the network to you.
- **Advantages**:
  - Clean interface to the network.
  - Protocol independence.
  - Simple setup and use.
- **Disadvantages**:
  - Firewall restrictions.
  - Requires external dependencies (e.g., `pcap`, `libnet`).
- **Examples**:
  - **Tratt** by Olleb (www.toolcrypt.org).
  - **MyNetwork** by Greg Hoglund (www.rootkit.com).

## A Brief Recap
- **Past**: Unrestricted access and easy redirection of traffic.
- **Firewalls**: More restrictive, but outbound access was still possible.
- **Bridging**: Network-level bridging was effective but rules have changed.
- **HTTP/HTTPS**: Can we achieve this over HTTP/HTTPS?

## Introducing glenn.jsp
- **Working Title**: A method to hit targets on ports 80 or 443.
- **Requirements**:
  - Ability to upload/create a web page on the target.
  - Tight network-level filtering.
  - Possible reverse proxies in between.
- **Intern Contribution**: Developed by a smart intern.

### ReDuh.jsp
- **Developer**: Glenn Wilkinson (PI:EMAIL).
- **Process**:
  - Upload/create a .JSP page on the server.
  - Start a local proxy (localhost:1234).
  - Web page creates a web-bridge to internal_host:3389.
  - JSP page handles socket creation and packet queuing.
  - Attacker uses RDC client to connect to the local proxy.
  - Traffic is converted to base-64 encoded POST messages.
  - Packets are decoded and delivered via the created socket.
  - Return traffic is queued, encoded, and sent back to the proxy.

### Key Points
- **TCP over HTTP/HTTPS**: Simple implementation.
- **Flexibility**: Works with ASP.NET, PHP, and other common web technologies.
- **Creation Requirement**: A single .JSP file on the target.

## Squeeza
- **Release**: Black Hat USA 2007.
- **Purpose**: Advanced SQL injection tool for MS SQL.
- **Features**:
  - Different approach to content generation and return channels.
  - Multiple return channels supported (DNS, timing, HTTP error-based).

### Content Generation
- **Methods**:
  - Command execution: `xp_cmdshell`.
  - Data extraction: `select name from sysobjects where xtype='U'`.
  - File download: `bulk insert … from 'c:\blah.txt'`.

### Return Channels
- **Supported**:
  - DNS, timing, HTTP error-based.
- **Not Supported**:
  - Inline HTML extraction.
  - Standard blind injection techniques.

### Process Overview
- **Generate Content**: Using command execution, file copy, or data extraction.
- **Store Data**: In a temporary table inside the SQL database.
- **Extract Data**: Using the chosen return channel (DNS, timing, HTTP errors).

### Squeeza: DNS
- **Functionality**: Weaponized SQL server content extraction through DNS queries.
- **Data Handling**: Chunks of data are encoded and emitted through DNS.
- **Benefits**:
  - No need for elevated privileges.
  - Reliability guaranteed as the client controls requests and responses.

### Squeeza: Timing
- **Functionality**: Content extraction through timing attacks.
- **Data Handling**: Chunks of data are extracted one bit at a time.
- **Benefits**:
  - No explicit return channel needed.
  - Not always reliable but good enough for batch applications.

### Profiling SQL Servers
- **Version Detection**: Determine the SQL server version.
- **Feature Changes**: Different features added or removed between versions.
- **Common Solutions**: Use `@@version` and choose a return channel.

### Squeeza Future
- **Potential Integration**: Consider integration with Metasploit.
- **Requirements**: Further development and community support.

## OLE Integration
- **Introduction**: Chris Anley’s 2002 paper on OLE object instantiation and execution from T-SQL.
- **Usage**: File reading/writing, shell execution.
- **Current Status**: Often ignored in SQL injection tools.
- **Challenges**:
  - Privileges required.
  - Complexity.
  - Payload size.

### Growing OLE Together
- **Potential**: Use OLE objects for ActiveX exploitation.
- **Advantages**:
  - Safe for scripting.
  - Killbits management.
- **Future Focus**: More attention to OLE integration in injection payloads.

### Example: SQL-Based Port Scanner
- **Basis**: `MSXML2.ServerXMLHTTP` object.
- **Functionality**: Retrieve XML data from a web server.
- **Installation**: Comes with IE, IIS, etc.
- **Port Scanning**: Differentiate between open, closed, and filtered ports using timing and timeouts.

### Basic Probe Stored Procedure
- **Procedure**: Instantiate OLE control and perform port scanning.
- **Output**: Differentiate between various states (open, closed, filtered, etc.).

This talk aims to provide a comprehensive overview of the evolution of attack methods and the current state of the art in funneling data in and out of protected networks.