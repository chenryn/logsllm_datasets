### Policy Tainted Data and False Positives in Voting Systems

#### Overview
The program-row policy, which requests updates during voting, can cause false positives. Despite the session update being a blind write, it did not significantly reduce false positives. Our investigation revealed that the user ID, used as a tainted data value, was related to the initial request. All false positives occurred when the database-row policy marked queries as tainted. 

Reverting the sessions and users table, while the database-field policy updated the number of votes in the `polLchoices` table, but not the `polLvotes` table, would create an inconsistency in the application. The `polLvotes` table would have duplicate entries. This issue affects the sessions, history, and watchdog tables. Even though the update is a blind write, the field-level policy resets the taint for this field, resulting in no false positives.

#### Discussion
The program-row policy still produced many false positives due to updates in the `users` table. In contrast, the field-level policy, which only marks the third step as tainted, had fewer false positives. After examining our logs, we whitelisted the access timestamp via the `users` table. The second and third rows in Table 2 show that the same policies produce different results in terms of false positives, even though the scenarios involve the same application. This indicates that the nature of the bug plays a significant role in the results.

### Program-Row vs. Field-Level Policies

#### Program-Row Policy
- **Reduces** the number of false positives by preventing tainting from spreading.
- **Granularity**: Coarse-grained, affecting entire rows.
- **False Negatives**: No false negatives.
- **Example**: When an administrator adds links with other categories (e.g., `{caL2, caL3}`), these operations are recognized as independent, causing no false positives.

#### Field-Level Policy
- **Improves** accuracy by reducing false positives.
- **Granularity**: Fine-grained, affecting specific fields.
- **False Negatives**: Can have false negatives.
- **Example**: When adding new links associated with a category, the field-level policy misses all other related relationships, leading to false negatives.

### Gallery2: Remove Permissions Breaks Application Data

#### Scenario
An administrator temporarily removes other users' permissions to view the gallery. She then creates sub-albums under the main album and adds users and groups. After logging out, a bug causes the application to show an error message, making the gallery inaccessible.

#### Background
Gallery2 uses a global sequence mechanism to assign IDs to items such as sub-albums. The `SessionMap` table tracks open sessions, and the `Sequenceld` table stores each item and its associated relationships.

#### Results
- **Program-Field Policy**: Marks the update queries in the `SessionMap` and `Sequenceld` tables as tainted.
- **Database-Row Policy**: Marks almost every request as tainted, causing undesired behavior.
- **Session Data**: Considered temporary and ignored for correct recovery.
- **Sequence ID**: If reverted, it will cause an inconsistency because the same ID is already in use in the `Entity` table.

#### Discussion
The program-row policy marks the update queries in the `SessionMap` and `Sequenceld` tables as tainted, resulting in many false positives. The database-row policy, on the other hand, does not propagate the taint, reducing false positives. We examined our logs and whitelisted the parent-child relationship between sub-albums, significantly reducing false positives.

### Performance Analysis

#### Throughput Overhead
- **PHP Instrumentation**: Incurs a maximum of 4% overhead in throughput and latency when both monitors are enabled.
- **Database Instrumentation**: Slightly improves performance by disabling the periodic purge of the undo information for committed transactions.

#### Disk Space Overhead
- **Logs**: The PHP log takes about 4 KB per request, totaling 196 MB for a 30-minute run (9.19 GB per day).
- **Compression**: Compressing the PHP log reduces the size to 2.23 GB per day. A 250 GB disk can save logs of about 104 days.

### Conclusion

Our system helps administrators recover from data corruption in web applications by tracking and correlating changes across multiple tiers. Our evaluation, including the proposed tainting-based schemes, shows that our implementation can be obtained with little overhead and no modifications to the web applications. The challenge in data recovery is determining the correct set of dependent requests, which can be achieved with modest overhead.

### References
- [1] Amazon hit by pricing error. http://news.zdnet.co.uk/internet/0,1000000097,39226977,00.htm.
- [2] Amazon shuts after price error. http://news.bbc.co.uk/2/hi/business/2864461.stm.
- [3] Best Buy will not honor $9.99 big-screen TV deal. http://edition.cnn.com/2009/US/08/13/bestbuy.mistake/.
- [4] Drupal. https://drupal.org/.
- [5] Dell customers get snappy at pricing error. http://news.zdnet.co.uk/internet/0,1000000097,39181032,00.htm.
- [6] Drupal Bug Report: Big bug in management comments. https://drupal.org/node/67745.
- [7] Drupal Bug Report: Editing a poll clears all old votes. https://drupal.org/node/67895.
- [8] Drupal Group: Remove warning modal dialogs and replace them with undo. https://groups.drupal.org/node/913.
- [9] Gallery2 Bug Report: One easy step to break G2 with album permissions. https://gallery.menalto.com/.
- [10] Jsqlparser. http://jsqlparser.sourceforge.net/.
- [11] WordPress - Blog Tool and Publishing Platform. https://wordpress.org/.
- [12] WordPress Codex - Managing Plugins. https://codex.wordpress.org/Managing_Plugins.
- [13] WordPress Codex: IRC Meetup. https://codex.wordpress.org/IRC_Meetups/2007/September/September_26_Raw_Log.
- [14] WordPress Ticket: Links category can be set to blank. https://core.trac.wordpress.org/ticket/7336.
- [15] WordPress Ticket: Unprivileged users can perform some actions on pages they aren't allowed to access. https://trac.wordpress.org/ticket/4748.
- [16] WordPress Ticket: Users without "create_users" capability can add new users. https://trac.wordpress.org/ticket/6662.
- [17] WordPress Ticket: Users without "unfiltered_html" capability can post arbitrary HTML. https://trac.wordpress.org/ticket/4720.
- [18] I. E. Akkus. Data recovery for web applications. Master's thesis, University of Toronto. https://tspace.library.utoronto.ca/handle/1807/18132.
- [19] P. Ammann, S. Jajodia, and P. Liu. Recovery from malicious transactions. IEEE Transactions on Knowledge and Data Engineering, 14(5):1167-1185, 2002.
- [20] P. T. Barham, A. Donnelly, and R. Mortier. Using Magpie for request extraction and workload modeling. In Proceedings of the Operating Systems Design and Implementation (OSDI), pages 259-272, 2004.
- [21] A. B. Brown and D. A. Patterson. Undo for operators: Building an undoable e-mail store. In Proceedings of the USENIX Technical Conference, pages 1-14, June 2003.
- [22] A. Chanda, K. Elmeleegy, A. L. Cox, and W. Zwaenepoel. Causeway: Support for Controlling and Analyzing the Execution of Web-Accessible Applications. In Middleware, 2005.
- [23] T.-C. Chiueh and D. Pilania. Design, implementation, and evaluation of a repairable database management system. In Proceedings of the Annual Computer Security Applications Conference, pages 179-188, 2004.
- [24] A. Goel, K. Po, K. Farhadi, Z. Li, and E. de Lara. The Taser intrusion recovery system. In Proceedings of the Symposium on Operating Systems Principles (SOSP), pages 163-176, Oct. 2005.
- [25] S. T. King and P. M. Chen. Backtracking intrusions. In Proceedings of the Symposium on Operating Systems Principles (SOSP), pages 223-236, Oct. 2003.
- [26] H. F. Korth, E. Levy, and A. Silberschatz. A formal approach to recovery by compensating transactions. In The VLDB Journal, pages 95-106, 1990.
- [27] P. Liu, P. Ammann, and S. Jajodia. Rewriting histories: Recovering from malicious transactions. Distributed and Parallel Databases, 8(1):7-40, 2000.
- [28] D. B. Lomet. MLR: a recovery method for multi-level systems. SIGMOD Rec., 21(2):185-194, 1992.
- [29] B. Mediratta. Gallery photo album organizer. https://gallery.menalto.com/, 2004.
- [30] S. Nanda, L.-C. Lam, and T.-C. Chiueh. Dynamic multi-flow tracking for web application security. In Proceedings of the ACM/FIP/uSENIX international conference on Middleware, pages 1-20, 2007.
- [31] A. Nguyen-tuong, S. Guarnieri, D. Greene, J. Shirley, and D. Evans. Automatically hardening web applications using precise tainting. In Proceedings of the IFIP International Information Security Conference, 2005.
- [32] Y.-Y. Su, M. Attariyan, and J. Flinn. Autobash: Improving operating system causal analysis. In SOSP '07: Proceedings of twenty-first ACM SIGOPS symposium on Operating systems principles, pages 237-250, 2007.
- [33] W. Venema. Taint support for PHP. ftp://ftp.porcupine.org/pub/php/index.html.
- [34] W. J. Lee, J. Loaiza, M. J. Stewart, W. Hu, W. H. Bridge, Jr. Database Flashback - US Patent 7181476, 2007.
- [35] H. J. Wang, J. C. Platt, Y. Chen, R. Zhang, and Y.-M. Wang. Automatic misconfiguration troubleshooting as search: Finding the needle in the haystack. In OSDI'04: Proceedings of the 6th conference on Symposium on Operating Systems Design & Implementation, Berkeley, CA, USA, pages 6-6, 2004. USENIX Association.
- [36] A. Whitaker, R. S. Cox, and S. D. Gribble. Configuration debugging with PeerPresure. In Proceedings of the Operating Systems Design and Implementation (OSDI), pages 245-258, Dec. 2004.
- [37] Y. Xie and A. Aiken. Static detection of security vulnerabilities in scripting languages. In Proceedings of the USENIX Security Symposium, 2006.
- [38] N. Zhu and T.-C. Chiueh. Design, implementation, and evaluation of repairable file service. In Proceedings of the IEEE Dependable Systems and Networks, pages 217-226, June 2003.

Â©2010 IEEE