### Monitoring Installed Virtual Machines

Several ideas for monitoring installed virtual machines have been proposed and implemented on popular hypervisors such as Xen [22, 23]. Although hypervisors are positioned underneath and separated from the virtual machines, they can also be exploited through software vulnerabilities. Many vulnerabilities in Xen have already been reported and addressed [1, 2, 3, 4]. The discovery of hypervisor vulnerabilities is likely to continue as the code size and complexity of hypervisors increase. This implies that hypervisors may not provide a secure, independent execution environment, which is essential for a security monitor.

Efforts have been made to design minimal hypervisors to create a more secure execution environment for security monitoring [13, 17, 25, 26]. The goal is to include only essential software components to minimize the attack surface. Some of these works used static analysis to ensure their hypervisors were free of vulnerabilities. SecVisor, one of the most well-known approaches, introduced higher performance degradation compared to the popular hypervisor Xen.

Recently, Rhee et al. [24] proposed an event-driven integrity monitor based on a hypervisor. With its event-driven nature, it can be considered a hypervisor version of snoop-based monitoring. However, the security of this integrity monitor relies heavily on the assumption that the hypervisor is free of vulnerabilities. Additionally, it reported significant performance degradation.

### Hardware-Based Approaches

Another approach to implementing a kernel integrity monitor outside the operating system is to attach an independent hardware component. Hollingworth et al. [16] first proposed securing the operating system using Symmetric Multi-Processor (SMP) technology. Later, X. Zhang et al. [30] proposed an Intrusion Detection System (IDS) based on a coprocessor independent from the main processor. Petroni et al. designed and implemented Copilot [20], a kernel runtime integrity monitor operating on a coprocessor PCI-card. Subsequent snapshot-based works inherited the limitations of the snapshot-based mechanism presented in Copilot [8, 21].

Intel contributed to this trend by presenting DeepWatch [10], a hardware-based support for snapshot-based rootkit detection. J. Wang et al. designed HyperCheck [28], an integrity monitor for hypervisors based on a PCI card and System Management Mode (SMM) [12]. A. M. Azab et al. also proposed HyperSentry [7], a framework for monitoring hypervisor integrity with an agent in SMM. The critical drawback of using SMM for security monitoring is that all system activities must halt when entering SMM, implying that the host system must stop every time the integrity monitor runs. Both DeepWatch and HyperCheck focused on building a safe execution environment but used memory snapshots for integrity verification.

In summary, most hardware-based approaches use memory or register snapshots [20, 28] as the source of system status information. However, these methods are unsuitable for monitoring instant changes in the host system and are vulnerable to advanced attacks such as transient attacks. HyperSentry [7] also uses the state of the host system at certain points in time, when the independent auditor stops the host system and executes the agent. Thus, it can be considered a snapshot-based monitor, similar to Copilot [20] and HyperCheck [28]. Our approach, Vigilare, is fundamentally different from previous snapshot-based approaches because it is a snoop-based monitor.

### Snooping Bus Traffic

Snooping bus traffic is a well-known concept, as demonstrated in prior works. Clarke et al. [11] proposed adding special hardware between caches and external memories to monitor the integrity of external memory. The aim was to ensure that the value read from an address is the same as the value last written to that address. While this can defeat attacks on the integrity of external memory, it cannot address rootkits or monitor the integrity of the operating system kernel, unlike Vigilare.

BusMop [19] designed a snoop-based monitor similar to our SnoopMon, but with a different objective: to monitor the behavior of peripherals. In contrast, SnoopMon is designed to monitor the integrity of the operating system kernel. To the best of our knowledge, Vigilare is the first snoop-based approach to monitor OS kernel integrity, while all previous approaches in this area were based on taking periodic snapshots.

### Conclusions

In this paper, we proposed snoop-based monitoring, a novel scheme for monitoring the integrity of the kernel. We investigated several requirements for implementing our scheme and designed the Vigilare system and its snoop-based monitoring. We focused on two main aspects: detecting transient attacks and minimizing performance degradation. To contrast Vigilare’s SnoopMon with snapshot-based integrity monitoring, we implemented SnapMon, which represents a snapshot-based architecture. We pointed out that snapshot-based integrity monitors are inherently vulnerable to transient attacks and presented Vigilare as a solution. In our experiments, we demonstrated that SnoopMon-powered Vigilare can effectively cope with transient attacks that violate the integrity of immutable regions of the kernel, while snapshot-based approaches have limitations. We also investigated the performance impact on the host system using the STREAM benchmark [18] and showed that Vigilare, due to its independent hardware module for bus snooping, imposes no performance degradation on the host. Snapshot-based integrity monitoring is generally unsuitable for detecting transient attacks and is inefficient due to the trade-off between detection rates and performance degradation. Higher snapshot frequencies might improve detection rates but result in overused memory bandwidth. In conclusion, Vigilare overcomes the limitations of snapshot-based integrity monitors with its snoop-based architecture.

### Acknowledgments

This work was partly supported by VigilSystem, Korea Science and Engineering Foundation (KOSEF) NRL Program grant (No. 0421-2012-0047), the Attached Institute of ETRI, the Engineering Research Center of Excellence Program of Korea Ministry of Education, Science and Technology (MEST) / National Research Foundation of Korea (NRF) (Grant 2012-0000470), and the Center for Integrated Smart Sensors funded by the Ministry of Education, Science and Technology as Global Frontier Project (CISS-0543-20110012).

### References

[1] Vmware: Vulnerability statistics. http://www.cvedetails.com/vendor/252/Vmware.html.
[2] Vulnerability report: Vmware ESX Server 3.x. http://secunia.com/advisories/product/10757.
[3] Vulnerability report: Xen 3.x. http://secunia.com/advisories/product/15863.
[4] Xen: Security vulnerabilities. http://www.cvedetails.com/vulnerability-list/vendor_id-6276/XEN.html.
[5] Aeroﬂex Gaisle. GRLIB IP Core User’s Manual, January 2012.
[6] ARM Limited. AMBATM Specification, May 1999.
[7] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and N. C. Skalsky. Hypersentry: Enabling stealthy in-context measurement of hypervisor integrity. In Proceedings of the 17th ACM conference on Computer and communications security, CCS ’10, pages 38–49, New York, NY, USA, 2010. ACM.
[8] A. Baliga, V. Ganapathy, and L. Iftode. Automatic inference and enforcement of kernel data structure invariants. In Computer Security Applications Conference, 2008. ACSAC 2008. Annual, pages 77–86, December 2008.
[9] J. Bickford, R. O’Hare, A. Baliga, V. Ganapathy, and L. Iftode. Rootkits on smart phones: Attacks, implications, and opportunities. In Proceedings of the Eleventh Workshop on Mobile Computing Systems & Applications, HotMobile ’10, pages 49–54, New York, NY, USA, 2010. ACM.
[10] Y. Bulygin and D. Samyde. Chipset-based approach to detect virtualization malware a.k.a. DeepWatch. In BlackHat USA, 2008.
[11] D. Clarke, G. E. Suh, B. Gassend, M. van Dijk, and S. Devadas. Checking the integrity of a memory in a snooping-based symmetric multiprocessor (SMP) system. Technical report, MIT LCS memo-470, http://csg.csail.mit.edu/pubs/memos/Memo-470/smpMemoryMemo.pdf, 2004.
[12] L. Duﬂot, D. Etiemble, and O. Grumelard. Using CPU system management mode to circumvent operating system security functions. In Proceedings of the 7th CanSecWest conference, 2006.
[13] T. Garﬁnkel, B. Pfaﬀ, J. Chow, M. Rosenblum, and D. Boneh. Terra: A virtual machine-based platform for trusted computing. In Proceedings of the nineteenth ACM symposium on Operating systems principles, SOSP ’03, pages 193–206, New York, NY, USA, 2003. ACM.
[14] T. Garﬁnkel and M. Rosenblum. A virtual machine introspection-based architecture for intrusion detection. In Proc. Network and Distributed Systems Security Symposium, February 2003.
[15] D. Hellström. SnapGear Linux for LEON. Gaisler Research, November 2008.
[16] D. Hollingworth and T. Redmond. Enhancing operating system resistance to information warfare. In MILCOM 2000. 21st Century Military Communications Conference Proceedings, volume 2, pages 1037–1041, 2000.
[17] K. Kaneda. Tiny virtual machine monitor. http://www.yl.is.s.u-tokyo.ac.jp/~kaneda/tvmm/.
[18] J. D. McCalpin. Memory bandwidth and machine balance in current high-performance computers. IEEE Computer Society Technical Committee on Computer Architecture (TCCA) Newsletter, pages 19–25, December 1995.
[19] R. Pellizzoni, P. Meredith, M. Caccamo, and G. Rosu. Hardware runtime monitoring for dependable COTS-based real-time embedded systems. In Proceedings of the 2008 Real-Time Systems Symposium, RTSS ’08, pages 481–491, Washington, DC, USA, 2008. IEEE Computer Society.
[24] J. Rhee, R. Riley, D. Xu, and X. Jiang. Defeating dynamic data kernel rootkit attacks via VMM-based guest-transparent monitoring. In Availability, Reliability and Security, 2009. ARES ’09. International Conference on, pages 74–81, March 2009.
[25] R. Russell. Lguest: The simple x86 hypervisor. http://lguest.ozlabs.org/.
[20] N. L. Petroni, Jr., T. Fraser, J. Molina, and W. A. Arbaugh. Copilot - a coprocessor-based kernel runtime integrity monitor. In Proceedings of the 13th conference on USENIX Security Symposium - Volume 13, SSYM’04, pages 13–13, Berkeley, CA, USA, 2004. USENIX Association.
[26] A. Seshadri, M. Luk, N. Qu, and A. Perrig. Secvisor: A tiny hypervisor to provide lifetime kernel code integrity for commodity OSes. In Proceedings of the twenty-first ACM SIGOPS symposium on Operating systems principles, SOSP ’07, pages 335–350, New York, NY, USA, 2007. ACM.
[21] N. L. Petroni, Jr., T. Fraser, A. Walters, and W. A. Arbaugh. An architecture for specification-based detection of semantic integrity violations in kernel dynamic data. In Proceedings of the 15th conference on USENIX Security Symposium - Volume 15, USENIX-SS’06, Berkeley, CA, USA, 2006. USENIX Association.
[27] SPARC International Inc. The SPARC Architecture Manual, 1992.
[28] J. Wang, A. Stavrou, and A. Ghosh. Hypercheck: A hardware-assisted integrity monitor. In S. Jha, R. Sommer, and C. Kreibich, editors, Recent Advances in Intrusion Detection, volume 6307 of Lecture Notes in Computer Science, pages 158–177. Springer Berlin / Heidelberg, 2010. 10.1007/978-3-642-15512-3-9.
[29] J. Wei, B. Payne, J. Giﬃn, and C. Pu. Soft-timer driven transient kernel control flow attacks and defense. In Computer Security Applications Conference, 2008. ACSAC 2008. Annual, pages 97–107, December 2008.
[30] X. Zhang, L. van Doorn, T. Jaeger, R. Perez, and R. Sailer. Secure coprocessor-based intrusion detection. In Proceedings of the 10th workshop on ACM SIGOPS European workshop, EW 10, pages 239–242, New York, NY, USA, 2002. ACM.