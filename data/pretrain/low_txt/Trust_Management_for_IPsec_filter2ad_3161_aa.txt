# Trust Management for IPsec

**Authors:**
- Matt Blaze, AT&T Labs - Research, Email: [EMAIL]
- John Ioannidis, AT&T Labs - Research, Email: [EMAIL]
- Angelos D. Keromytis, University of Pennsylvania, Email: [EMAIL]

## Abstract
IPsec is the standard suite of protocols for network-layer confidentiality and authentication of Internet traffic. However, IPsec does not address the policies for handling protected traffic at security endpoints. This paper introduces an efficient policy management scheme for IPsec based on trust management principles. A compliance check is added to the IPsec architecture to test packet filters proposed when new security associations are created, ensuring they conform to the local security policy based on credentials presented by the peer host. Security policies and credentials can be sophisticated (specified in a trust-management language), while still allowing efficient packet filtering for actual IPsec traffic. We present a practical, portable implementation of this design, based on the KeyNote trust-management language, that works with various Unix-based IPsec implementations.

## 1. Introduction
The IPsec protocol suite, which provides network-layer security for the Internet, has been standardized by the IETF and is being integrated into commercial desktop, server, and router operating systems. Network-layer security offers several advantages over security provided elsewhere in the protocol stack. Applications automatically and transparently benefit from network-layer security services, and IPsec provides remarkable flexibility: it can be configured end-to-end, route-to-route, edge-to-edge, or in any other configuration where network nodes can be identified as appropriate security endpoints.

Despite this flexibility, IPsec does not manage the policies governing the handling of traffic entering or leaving a host running the protocol. While IPsec protects packets from external tampering and eavesdropping, it does not control which hosts are authorized for particular kinds of sessions or to exchange specific types of traffic. In many configurations, especially when building firewalls and virtual private networks, these policies can be quite complex. There is no standard interface or protocol for controlling IPsec tunnel creation, and most IPsec implementations provide only rudimentary, packet-filter-based, and ACL-based policy mechanisms.

The limitations of IPsec policy control mean that many applications are forced to duplicate cryptographic functions already provided at the network layer. This paper makes three main contributions: we introduce a new policy management architecture for IPsec based on trust management principles; we present a design that integrates this architecture with the KeyNote Trust Management system; and we provide a practical, portable implementation of this design, currently distributed in open-source form in OpenBSD.

### 1.1. IPsec Packet Filters and Security Associations
IPsec is based on datagram encapsulation, where cryptographically protected network-layer packets are placed inside other network packets. Outgoing packets are encapsulated, encrypted, and authenticated (as appropriate) before being sent to the network, and incoming packets are verified, decrypted, and decapsulated upon receipt. Key management in IPsec is straightforward in the simplest case, with two hosts using a key-agreement protocol to negotiate keys and use them for packet transforms.

When discussing "policy" in this paper, we refer to the network-layer security policies that govern the flow of traffic among networks, hosts, and applications. These policies must be enforced whenever packets arrive at or leave a network security endpoint (e.g., an end host, gateway, router, or firewall).

IPsec "connections" are described in a data structure called a security association (SA). Each SA contains encryption and authentication keys, and each IPsec-protected packet has an SA identifier that indexes the SA database of its destination host. When an incoming packet arrives, the host determines the required processing:

- If the packet is not protected, should it be accepted? This is the traditional packet filtering problem.
- If the packet is encapsulated under the security protocol:
  - Is there correct key material (in the specified SA) to decapsulate it?
  - Should the resulting packet (after decapsulation) be accepted? A second stage of packet filtering occurs here.
- Is there an SA that should be applied to this packet? If multiple SAs are applicable, which one should be selected?
- If no SA is available, how should the packet be handled? It may be forwarded, dropped, or queued until an SA is made available, possibly triggering an automated key management mechanism like IKE (Internet Key Exchange protocol).

Because these questions are asked on a packet-by-packet basis, packet-based policy filtering must be performed quickly enough to keep up with network data rates. This implies that in most network environments, there is insufficient time to process elaborate security languages, perform public key operations, traverse large tables, or resolve rule conflicts in a sophisticated manner. Therefore, IPsec implementations and other network-layer entities use simple, filter-based languages for configuring packet-handling policies.

IPsec policy control need not be limited to packet filtering. Flexibility is available in the control of when SAs are created and what packet filters are associated with them. However, in current implementations, IPsec users or administrators often provide "all or nothing" access, where holders of a set of keys (or those certified by a particular authority) can create any kind of SA, and others cannot.

Another issue with IPsec policy control is the need for two hosts to discover and negotiate the kind of traffic they are willing to exchange. When two hosts governed by their own policies want to communicate, they need a mechanism to determine what kinds of traffic are permitted by the combined effects of their policies. IPsec itself does not provide such a mechanism; a host attempting to create an SA must know in advance that the policy on the remote host will accept it. This may be sufficient for small VPNs and other applications under the same administrative control but does not scale to larger-scale applications like public servers.

### 1.2. Related Work
The IKE specification [11] uses the Subject Alternate Name field in X.509 certificates to encode the packet selector the certificate holder may use during IKE Quick Mode. Beyond this, no standard way has been defined for negotiating, exchanging, and handling IPsec security policy.

[20] defines a protocol for dynamically discovering, accessing, and processing security policy information. Hosts and networks belong to security domains, and policy servers service these domains. The protocol is similar to DNS and serves as the basis of the IETF IP Security Policy Working Group.

[9] describes a language for specifying communication security policies, heavily oriented toward IPsec and IKE. SPSL (Security Policy Specification Language) is based on RPSL (Routing Policy Specification Language). While SPSL offers considerable flexibility, it does not address delegation of authority and is not easily extensible to accommodate other types of applications.

Several Internet Drafts have been published defining directory schemata for IPsec policy. Similar directory-based work has started in the context of the IETF Policy Framework Working Group. COPS [5] defines a simple client/server protocol where a Policy Enforcement Point (PEP) communicates with a Policy Decision Point (PDP) to determine whether a requested action is permissible. COPS is mostly oriented toward admission control for RSVP or similar protocols, and its applicability to IPsec security policy is unclear.

RADIUS [19] and its proposed successor, DIAMETER [7], are similar to COPS, requiring communication with a policy server to make policy-based decisions. Both protocols are oriented toward providing Accounting, Authentication, and Authorization services for dial-up and roaming users.

We first proposed the notion of using a trust management system for network-layer security policy control in [4].

## 2. Trust Management for IPsec
A fundamental aspect of packet processing in IPsec is determining whether a packet falls under the scope of a Security Association (SA). SAs contain and manage the key material required for network-layer security protocol transforms. How are SAs created?

The obvious approach is to trigger the creation of a new SA whenever communication with a new host is attempted, if that attempt would fail the packet-level security policy. The protocol would be based on a public-key or Needham-Schroeder scheme.

However, protocols that merely arrange for packets to be protected under SAs do not address the problem of enforcing a policy regarding the flow of incoming or outgoing traffic. Security association policy is largely an open problem with important practical security implications and the potential to provide a solid framework for analyzing network security properties.

Fortunately, the problem of policy management for SAs can be distinguished from the problem of filtering individual packets in several ways:
- SAs tend to be long-lived, with locality of reference, meaning hosts that have exchanged one packet are likely to exchange others soon.
- Policy controls on SA creation can require more resources than could be expended on processing every packet (e.g., public key operations, several packet exchanges, policy evaluation).
- The result of negotiating an SA between two hosts can provide parameters for more efficient, lower-level packet policy (filtering) operations.

The trust-management approach [3] for checking compliance with security policy provides the necessary interface and abstractions. 

### 2.1. The KeyNote Trust Management System
We make extensive use of the concepts of trust management, particularly the KeyNote language. Here, we provide a brief review of these concepts.

Trust management was introduced in [3]. A trust-management system provides a standard interface that applications can use to test whether potentially dangerous actions comply with local security policies. More formally, trust-management systems are characterized by:
- A method for describing actions, which are operations with security consequences that are to be controlled by the system.
- A mechanism for identifying principals, which are entities that can be authorized to perform actions.