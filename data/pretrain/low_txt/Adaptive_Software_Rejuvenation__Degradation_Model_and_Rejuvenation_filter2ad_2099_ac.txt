### Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03)
**0-7695-1959-8/03 $17.00 (c) 2003 IEEE**
*Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021 at 04:30:24 UTC from IEEE Xplore. Restrictions apply.*

## 3.2. Adaptive Rejuvenation Scheme

We introduce an adaptive rejuvenation scheme that considers both the statistical and dynamic aspects of the system, based on updated performance estimates. This scheme determines when to collect data related to memory leakage and when to recover lost resources. Any inspection point can potentially be a point for rejuvenation. Both inspection and rejuvenation operations consume system resources and incur costs, which we aim to minimize.

For illustration, we assume the following performance criterion: the probability of system failure between any two consecutive inspection points should not exceed a specified threshold.

### Determining Inspection Points

The initial time \( t_0 \) is set at the end of the last rejuvenation operation and is considered the first inspection point. At the current inspection point \( t_c \), the next inspection point \( t_n \) is determined. Let \( \tau_p \) be the threshold on the failure probability over the time period between \( t_c \) and \( t_n \). To meet the performance criteria, \( t_n \) is bounded from above as follows:

\[
\int_{t_c}^{t_n} h(t, M) \, dt \leq -\ln(1 - \tau_p)
\]

To minimize the inspection frequency, we select \( t_n \) so that the interval \( (t_c, t_n) \) is as large as possible. In the presence of memory leakage, \( h(t, M) \) increases with time, leading to shorter intervals and more frequent inspections. To prevent this, we introduce a lower bound \( T_\Delta \) on the interval length. If the interval length is smaller than \( T_\Delta \), a rejuvenation operation is scheduled immediately.

### Summary of Rejuvenation Scheduling

1. **Specify Thresholds:**
   - Set a threshold \( \tau_p \) on the failure probability.
   - Set a lower bound \( T_\Delta \) on the interval length between consecutive inspection points.

2. **At Each Inspection Point \( t_c \):**
   - Obtain the updated estimate of \( h(t) \) as described in Section 3.1.
   - Determine the next inspection point \( t_n \) using the equation:
     \[
     t_n = \max \left\{ t : \int_{t_c}^t h(t) \, dt \leq -\ln(1 - \tau_p) \right\}
     \]
   - If \( t_n > t_c + T_\Delta \), continue system operation until the next inspection point; otherwise, schedule an immediate rejuvenation operation.

By this policy, the sequence of rejuvenation operations is a subsequence of the inspection sequence, and neither sequence is necessarily equispaced. We illustrate the scheduling policy in Figure 4, where the horizontal axis represents time from the last rejuvenation \( t_0 \), and the vertical axis shows the estimated failure rate, adjusted according to online measurements.

### Numerical Illustrations

We present numerical results to illustrate the key aspects of the adaptive software rejuvenation (ASR) framework and their impacts. The system parameters are as follows:
- Total system resource: \( M \)
- Resource request arrival rate: \( \lambda \)
- Resource holding time per request: Exponential distribution with parameter \( \mu \)
- Resource amount per request: Erlang distribution with parameters \( (\alpha, \gamma) \), mean value \( \frac{\alpha}{\gamma} \)

In the leak-present case, we assume the expected leak function is \( \xi(t) = \beta \lambda t \), where \( \beta = \frac{25}{24} \) and \( t \) is the time from the last rejuvenation. For the non-homogeneous CTMC solution, we approximate the leak function using a piecewise constant function \( \xi(t_i) = \beta \lambda t_i \), where \( t_i \) are equispaced. The numerical solutions are obtained using Mathematica and SHARPE [10].

#### 4.1. Degradation Due to Resource Loss

A degradation model must address the aging agent and provide a quantitative description of the measurable data. We focus on degradation due to resource loss, which can be detected in many systems. Our methodology differentiates the impact of resource loss on performance degradation from other factors such as workload.

Figure 5 shows the impact of resource loss on system reliability and failure rate. The dashed lines represent the leak-free case, and the solid lines represent the leak-present case. The upper plot shows that for any value \( p \in (0, 1) \), the failure probability in the leak-present case reaches it earlier than in the leak-free case. The lower plot shows that while the failure rate remains low and stable in the leak-free case, it increases monotonically in the leak-present case, indicating the aging phenomenon.

#### 4.2. Optimal Rejuvenation with Adaptive Approach

The adaptive rejuvenation approach explores a broader search space for optimization. For illustration, we set the tolerance \( \tau_p = 0.05 \) on the failure probability and the lower bound \( T_\Delta = 2 \) on the interval length between consecutive inspection points.

Initially, by model-based analysis, we obtain an estimate of the failure rate and select the first inspection point at \( t_1 = 14.5 \). Further inspection finds that the leaked memory at \( t_1 \) is 4, lower than the expected leak \( \xi(t_1) = 12 \). We adjust our estimation and select the next inspection point at \( t_2 = 20.5 \). We continue this process, and at \( t = 24 \), we schedule a rejuvenation because the next inspection point is too close. As long as the aging agent is active, the inspection intervals decrease from the last rejuvenation point to the next one, as shown in Figure 6.

### Conclusion

We have presented the framework of adaptive software rejuvenation (ASR), illustrating the ideas and techniques within the context of performance degradation due to resource leaks. The adaptive analysis and method for integrating model-based and measurement-based approaches are novel. Both the statistics and dynamics of an operating software system are respected, enabling improvements in performance estimation and rejuvenation scheduling. Our model for performance degradation due to resource leaks provides a direct connection between resource leaks and the failure rate, as demonstrated in Section 4.

The objective of the ASR framework is to make rejuvenation more effective in practical applications. To this end, application-specific models, optimization objectives, and implementation-specific issues need to be developed. Currently, a rejuvenation testbed is under development.

### References

[1] A. Avritzer and E. J. Weyuker. Monitoring smoothly degrading systems for increased dependability. Empirical Software Engineering Journal, 2(1):59–77, 1997.

[2] A. Bobbio, M. Sereno, and C. Anglano. Fine grained software degradation models for optimal software rejuvenation policies. Performance Evaluation, 46:45–62, 2001.

[3] K. Cassidy, K. Gross, and A. Malekpour. Advanced pattern recognition for detection of complex software aging in online transaction processing servers. In Proceedings of the 2002 International Conference on Dependable Systems and Networks, pages 478–482, Washington D.C., 2002.

[4] T. Dohi, K. Goseva-Popstojanova, and K. S. Trivedi. Statistical non-parametric algorithms to estimate the optimal software rejuvenation schedule. In Proceedings of the 2000 Pacific Rim International Symposium on Dependable Computing, pages 77–84, Los Angeles, CA, December 2000.

[5] C. Erickson. Memory leak detection in embedded systems. Linux Journal, Web Article 6059, March 2003.

[6] S. Garg, A. Puliafito, M. Telek, and K. S. Trivedi. Analysis of software rejuvenation using Markov regenerative stochastic Petri Nets. In Proceedings of the Sixth International Symposium on Software Reliability Engineering, pages 180–187, Toulouse, France, October 1995.

[7] S. Garg, A. Puliafito, M. Telek, and K. S. Trivedi. Analysis of preventive maintenance in transactions based software systems. IEEE Transactions on Computers, 47(1):96–107, January 1998.

[8] S. Garg, A. van Moorsel, K. Vaidyanathan, and K. S. Trivedi. A methodology for detection and estimation of software aging. In Proceedings of the 1998 International Symposium on Software Reliability Engineering, pages 283–292, Paderborn, Germany, November 1998.

[9] Y. Huang, C. Kintala, N. Kolettis, and N. D. Fulton. Software rejuvenation: Analysis, module, and applications. In Proceedings of the 25th International Symposium on Fault Tolerant Computing, pages 381–390, Pasadena, CA, June 1995.

[10] R. Sahner, K. S. Trivedi, and A. Puliafito. Performance and Reliability Analysis of Computer Systems: An Example-Based Approach Using the SHARPE Software Package. Kluwer Academic Publishers, Boston, November 1995.

[11] P. K. Sen. Estimates of the regression coefficient based on Kendall’s tau. Journal of the American Statistical Association, 63:1379–1389, 1968.

[12] A. T. Tai, S. N. Chau, L. Alkalaj, and H. Hecht. On-board preventive maintenance: Analysis of effectiveness and optimal duty period. In Proceedings of the Third International Workshop on Object-Oriented Real-Time Dependable Systems, pages 40–47, Newport Beach, CA, 1997.

[13] K. Vaidyanathan and K. S. Trivedi. A measurement-based model for estimation of resource exhaustion in operational software systems. In Proceedings of the 10th International Symposium on Software Reliability Engineering, pages 84–93, Boca Raton, Florida, November 1999.