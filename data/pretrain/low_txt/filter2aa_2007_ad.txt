# Xprobe - The Signature-Based Approach

## Network Devices
- Cabletron SSR 8000
- Cisco Routers with IOS 11.x-12.x
- Extreme Networks Switches

## Query Initiation Logic
### Static Version (v0.0.x)
Queries are initiated according to a decision tree.

### Signature-Based Version (v0.x)
The current logic for initiating queries in the signature-based version of Xprobe is as follows:

#### UDP and ICMP Queries
1. **UDP Query Sent to a Closed UDP Port**
   - **ICMP Echo Request**
     - **Processing of Reply**
   - **ICMP Timestamp Request**
     - **Processing of Reply**
   - **ICMP Address Mask Request**
     - **Processing of Reply**
   - **ICMP Information Request**
     - **Processing of Reply**

### Future Enhancements
In future versions, queries will be initiated based on specific differentiations. If an exact response for a UDP query matches two operating systems, we will not automatically send an ICMP Timestamp request. Instead, we will compare the two signatures in our database to find the exact query that will differentiate between them. This approach saves bandwidth and makes fingerprinting and manual detection more challenging.

For more than two matches, a different algorithm or decision logic will be applied.

### Example of Query Differentiation
- **OS z** and **OS t**:
  - **Query Chosen After Comparison**
  - **Comparing OS Signatures in the Database**
  - **Lookup for a Match in the Signature Database**

## Signature Examples
### Platform: "Some OS v.1.2-1.3"
- **udptest**: `0xc0:8:BAD::::::::::`
- **udptest**: `::::)::(+|-)::::`
- **udptest**

### ICMP Echo
- **icmpecho**
- **Udptest**: `:::):::`

### ICMP Address
- **icmpaddr**: `::::)`
- **icmpts, icmpaddrreq, icmpinfo**

## More Examples
- **www.netbsd.org**
- **www.net-security.org**
- **www.alldas.de**

### Detailed Example: www.alldas.de
- **IP ID of the Offending Packet**
  - **Not Echoed Correctly**: 
    - **Echoing Integrity Check**
      - **FreeBSD 2.x - 4.1.1**
      - **Other**
  - **Echoed Correctly**:
    - **UDP Checksum of the Offending Packet Echoed = 0**
      - **Echoing Integrity Check**
        - **FreeBSD 4.1.1 - 4.3**
        - **FreeBSD 5.0**
        - **Other**
    - **UDP Checksum of the Offending Packet Echoed != 0**
      - **TTL ~ 255**
        - **FreeBSD 4.1.1-4.3**
        - **FreeBSD 5.0**
        - **Already IDENTIFIED**
      - **TTL ~ 64**
        - **No reply for an ICMP Information Request**
          - **Echoing Integrity Check**
            - **IP Header Checksum Echoed = 0**
              - **NetBSD 1.3 - 1.3I**
              - **Big Endian**
              - **Other**
            - **IP Header Checksum Echoed != 0**
              - **Other**

### Packet Details
- **10/19-19:14:00.871716 213.8.199.165:24493 -> 66.21.117.5:32132**
  - **UDP TTL:250 TOS:0x0 ID:56241 IpLen:20 DgmLen:98 DF**
  - **Len: 78**
  - **Payload**: `00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...`

- **10/19-19:14:01.191716 66.21.117.5 -> 213.8.199.165**
  - **ICMP TTL:41 TOS:0x0 ID:49572 IpLen:20 DgmLen:56 DF**
  - **Type:3  Code:3  DESTINATION UNREACHABLE: PORT UNREACHABLE**
  - **Original Datagram Dump**: `213.8.199.165:24493 -> 66.21.117.5:32132`
  - **UDP TTL:233 TOS:0x0 ID:56241 IpLen:20 DgmLen:98**
  - **Len: 78**
  - **Payload**: `00 00 00 00 45 00 00 62 DB B1 40 00 E9 11 62 10 ...`

- **FreeBSD 5.0 (automatically supported by the 0.x version)**
  - **IPID Echoed OK**
  - **UDP Checksum 0**
  - **TTL 209.68.21.243:32132**

- **10/19-18:59:01.211716 209.68.21.243 -> 213.8.199.165**
  - **ICMP TTL:238 TOS:0x0 ID:40233 IpLen:20 DgmLen:56 DF**
  - **Type:3  Code:3  DESTINATION UNREACHABLE: PORT UNREACHABLE**
  - **Original Datagram Dump**: `213.8.199.165:6314 -> 209.68.21.243:32132`
  - **UDP TTL:238 TOS:0x0 ID:54470 IpLen:20 DgmLen:98**
  - **Len: 78**
  - **Payload**: `00 00 00 00 45 00 00 62 D4 C6 40 00 EE 11 33 DE ...`

- **FreeBSD 4.1.1 – 4.3 (automatically supported by the 0.x version)**
  - **IPID Echoed OK**
  - **UDP Checksum 0**
  - **TTL < 255**

## Known Problems
- **Signature Base Needs to Grow**
- **No IDS Evasion**: Packets are easy to fingerprint. Once core features are developed, optional 'masking' of payload data will be implemented.
- **ICMP Echo Request**: Sent with a code field != 0 (this parameter is often ignored).

## Further Reading
- **ICMP Usage In Scanning, v3.0 by Ofir Arkin**: [Link](http://www.sys-security.com)
- **X – Remote ICMP based OS Fingerprinting Techniques, by Fyodor Yarochkin and Ofir Arkin**: [Link](http://www.sys-security.com)
- **RFC 792: Internet Control Message Protocol**: [Link](http://www.ietf.org/rfc/rfc0792.txt)
- **RFC 1122: Requirements for Internet Hosts - Communication Layers**: [Link](http://www.ietf.org/rfc/rfc1122.txt)
- **RFC 1256: ICMP Router Discovery Messages**: [Link](http://www.ietf.org/rfc/rfc1256.txt)
- **RFC 1349: Type of Service in the Internet Protocol Suite**: [Link](http://www.ietf.org/rfc/rfc1349.txt)
- **RFC 1812: Requirements for IP Version 4 Routers**: [Link](http://www.ietf.org/rfc/rfc1812.txt)

## Tools Used
- **Xprobe**: Written by Fyodor Yarochkin & Ofir Arkin
  - [Sys-Security](http://www.sys-security.com)
  - [Notlsd](http://www.notlsd.net/xprobe)
  - [SourceForge](http://xprobe.sourceforge.net)
- **tcpdump**: [Website](http://www.tcpdump.org)
- **Snort**: Written by Marty Roesch
  - [Website](http://www.snort.org)

© 2001 @ STAKE, INC.