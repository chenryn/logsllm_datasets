### VIII. EVALUATION

This section presents experimental results that characterize the effectiveness of DroidSafe’s information-flow analysis. Our findings are as follows:

1. **Precision and Accuracy**:
   - DroidSafe achieves both higher precision and accuracy compared to FlowDroid [8] + IccTA [14], which is a state-of-the-art Android information-flow analysis tool.
   - [8] and [14] demonstrate that FlowDroid + IccTA outperforms commercially available tools such as IBM’s AppScan Source [33] (specifically designed for Android apps) and HP’s FortifySCA [34].

2. **Detection of Malicious Leaks**:
   - DroidSafe successfully identifies all malicious leaks of sensitive information in a suite of malicious Android applications developed by independent, motivated, and sophisticated attackers from three hostile Red Team organizations.

3. **Scalability**:
   - DroidSafe effectively scales to analyze large Android applications within the context of our ADI.
   - Across the APAC applications, there are 131 ContentProvider operations. Of these, 66.4% use Uri objects that DroidSafe resolves. Among the resolved operations, 35.6% target components of the application, with each resolved operation targeting 1.0 components.
   - Epicc does not resolve Uri values, and consequently, FlowDroid does not link flows through ContentProvider operations.

### IX. RELATED WORK

#### Object-Sensitive Points-To Analysis
- For robustness and flexibility, typical whole-program object-sensitive analyses reduce program facts into representations suitable for general solvers, such as logic relations [18], constraints [31], and binary decision diagrams [29, 38].
- DroidSafe differs by operating directly on the pointer assignment graph (PAG) representation of the program [30], an explicit representation of the program. Previous work has shown that direct implementations of points-to analysis, when they fit in memory, are typically faster than general solvers [29, 31].
- Today's main memory sizes are large enough to accommodate our direct implementation of a context-sensitive analysis of large programs.
- Tuning context-sensitivity for precision and scalability has been extensively studied. Hybrid context sensitivity treats virtual and static method calls differently, attempting to emulate call-site sensitivity for static calls [39]. DroidSafe implements hybrid context sensitivity by cloning static method calls for application methods and certain API factory methods.
- Type sensitivity merges contexts based on types [18], but it did not provide adequate precision for our client. Introspective analysis drops context sensitivity from program elements that could blow up the analysis [19], without regard for precision. Client-driven approaches [40] request more precision from the points-to analysis when needed. In contrast, our technique pre-calculates the set of classes (and thus allocations and method calls) for which precision is historically not helpful for our problem.

#### Information-Flow Security Analysis
- DroidSafe builds on a long history of information-flow (taint) analysis systems for security. Livshits and Lam [41] present a demand-driven approach for taint analysis of Java EE applications, using call-site context sensitivity and shallow object sensitivity via inlining. TAJ [42] focuses on Java web applications, employing program slicing and selective object-sensitive analysis. F4F [16] is a taint analysis for Java applications built on web frameworks, using a specification language to describe the semantics of the underlying framework.
- For Android, FlowDroid [8] is a sophisticated, open-source static information flow analysis. While FlowDroid’s analysis is flow-sensitive and more precise, its model of Android is not as complete as DroidSafe’s. FlowDroid compensates with inaccurate blanket flow policies on unmodeled API methods. Testing revealed that FlowDroid does not accurately model all possible combinations of lifecycle or callback events, highlighting the difficulty of modeling Android execution in a flow-sensitive system.
- Epicc [36] resolves Intent destinations in applications, developing a model of commonly-used classes and methods involved in the Android Intent implementation. Their analysis is on-demand and flow-sensitive. DroidSafe includes a more comprehensive model of classes and mechanisms used in inter-component and inter-application communication (e.g., Uri and Service messages) and can reason about values created and passed through API methods.
- IccTA [14] combines FlowDroid with Epicc to identify sensitive inter-component and inter-application information flows. DidFail [43] also combines FlowDroid and Epicc to discover sensitive flows across applications. DroidSafe includes an analysis to capture inter-application flows via a database of previously resolved Intent values and reachable source flows, injecting appropriate flows before information analysis.
- Other examples of static information flow analyses for Android include CHEX [7], ScanDal [9], SCanDroid [11], LeakMiner [12], and AndroidLeaks [13]. DroidSafe offers a more precise analysis and a more accurate and precise model of the Android API than these tools.
- Dynamic testing and monitoring approaches, such as TaintDroid [5] and Tripp and Rubin [44], have different trade-offs. They do not have issues with reflection and dynamic class loading but require adequate test coverage and are susceptible to denial-of-service attacks if malware is activated during execution. Similar to static analysis, they require user-mediated judgment for reported sensitive flows.

#### Source and Sink Identification
- DroidSafe’s list of sources and sinks was compiled manually. SuSi [24] uses supervised machine learning to automatically designate source and sink methods in the Android API. Merlin [45] is a probabilistic approach that employs a potentially incomplete list of sources, sinks, and sanitizers to calculate a more comprehensive list. Merlin infers an information flow specification for an application from its propagation graph using probabilistic inference rules.
- While SuSi’s list proved incomplete for the APAC applications, Merlin’s technique is complementary and a possible next step for enhancing DroidSafe’s results.

### X. CONCLUSION

Malicious leaks of sensitive information pose a significant threat to the security of Android applications. Static analysis techniques offer a way to detect and eliminate such flows. The complexity of modern application frameworks, however, can challenge the ability of static analyses to deliver accurate and precise results.

Our experience developing DroidSafe shows that:
1. An accurate and precise model of the application environment is essential.
2. Using the model to drive the design decisions behind the analysis and supporting techniques (such as accurate analysis stubs) is an effective, though labor-intensive, way to achieve acceptable precision and accuracy.

As long as there are complex application frameworks, making appropriate design decisions (such as using a scalable flow-insensitive analysis) will be necessary to navigate the trade-off space and achieve acceptable accuracy and precision.

Our results indicate that the final DroidSafe system, with its combination of a comprehensive model of the Android runtime and an effective set of analyses and techniques tailored for that model, takes a significant step towards the goal of an information flow analysis that can eliminate malicious information leaks in Android applications.

### ACKNOWLEDGMENT

We would like to thank our shepherd, Ben Livshits, and our anonymous reviewers for their insightful comments. This material is based on research sponsored by DARPA under agreement number FA8750-12-X-0110. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes, notwithstanding any copyright notation thereon.

### REFERENCES

[1] A. P. Felt et al., “A survey of mobile malware in the wild,” Security, vol. 55, p. 3, 2011.
[2] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi, “Unsafe exposure analysis of mobile in-app advertisements,” in WISEC, 2012.
[3] A. P. Felt et al., “Android Permissions Demystified,” CCS, 2011.
[4] N. J. Percoco and S. Schulte, “Adventures in Bouncerland,” 2012.
[5] W. Enck, P. Gilbert, B. Chun, and L. Cox, “TaintDroid: an information flow tracking system for real-time privacy monitoring on smartphones,” in OSDI, 2010.
[6] A. Reina, A. Fattori, and L. Cavallaro, “A System Call-Centric Analysis and Stimulation Technique to Automatically Reconstruct Android Malware Behaviors,” in EuroSec, 2013.
[7] L. Lu et al., “CHEX: Statically Vetting Android Apps for Component Hijacking Vulnerabilities,” in CCS, 2012.
[8] S. Arzt et al., “FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps,” in PLDI, 2014.
[9] J. Kim, Y. Yoon, K. Yi, and J. Shin, “Scandal: Static Analyzer for Detecting Privacy Leaks in Android Applications,” in MoST, 2012.
[10] E. Chin, A. Felt, K. Greenwood, and D. Wagner, “Analyzing inter-application communication in Android,” in MobiSys, 2011.
[11] A. P. Fuchs, A. Chaudhuri, and J. S. Foster, “ScanDroid: Automated Security Certification of Android Applications,” Tech. Rep., 2010.
[12] Z. Yang and M. Yang, “Leakminer: Detect information leakage on Android with static taint analysis,” in WCSE, 2012, p. 104.
[13] C. Gibler, J. Crussell, J. Erickson, and H. Chen, “AndroidLeaks: automatically detecting potential privacy leaks in Android applications on a large scale,” Trust and Trustworthy Computing, 2012.
[14] L. Li et al., “I know what leaked in your pocket: uncovering privacy leaks on Android Apps with Static Taint Analysis,” CoRR, 2014.
[15] Google, “Android Open Source Project.” [Online]. Available: https://source.android.com/
[16] M. Sridharan et al., “F4F: taint analysis of framework-based web applications,” in OOPSLA, 2011.
[17] K. Z. Chen et al., “Contextual Policy Enforcement in Android Applications with Permission Event Graphs,” in NDSS, 2013.
[18] Y. Smaragdakis, M. Bravenboer, and O. Lhoták, “Pick Your Contexts Well: Understanding Object-Sensitivity,” in POPL, 2011.
[19] Y. Smaragdakis, G. Kastrinis, and G. Balatsouras, “Introspective analysis: context-sensitivity, across the board,” in PLDI, 2014.
[20] Google, “Intent and Intent Filters.” [Online]. Available: http://developer.android.com/guide/components/intents-filters.html
[21] D. King, B. Hicks, M. Hicks, and T. Jaeger, “Implicit flows: Can’t live with ’Em, can’t live without ’Em,” in ICISS, 2008.
[22] Y. Smaragdakis, G. Kastrinis, G. Balatsouras, and M. Bravenboer, “More Sound Static Handling of Java Reflection,” Tech. Rep., 2014.
[23] B. Livshits, J. Whaley, and M. S. Lam, “Reflection Analysis for Java,” in APLAS, 2005.
[24] S. Rasthofer, S. Arzt, and E. Bodden, “A machine-learning approach for classifying and categorizing Android sources and sinks,” NDSS, 2014.
[25] L. O. Andersen, “Program Analysis and Specialization for the C Programming Language,” Ph.D. dissertation, U. of Copenhagen, 1994.
[26] M. Bravenboer and Y. Smaragdakis, “Strictly declarative specification of sophisticated points-to analyses,” in OOPSLA.
[27] O. Lhotak, “Program analysis using binary decision diagrams,” Ph.D. dissertation, McGill University, Montreal, 2006.
[28] M. Sridharan et al., Aliasing in Object-Oriented Programming. Springer Berlin Heidelberg, 2000.
[29] M. Berndl et al., “Points-to analysis using BDDs,” PLDI, 2003.
[30] O. Lhotak, “SPARK: A Flexible Points-To Analysis Framework for Java,” Ph.D. dissertation, McGill University, Montreal, 2002.
[31] J. Kodumal and A. Aiken, “Banshee: A scalable constraint-based analysis toolkit,” in SAS, 2005.
[32] A. S. Christensen, A. Møller, and M. I. Schwartzbach, “Precise Analysis of String Expressions Static Analysis,” in SAS, 2003.
[33] IBM, “IBM Security AppScan.” [Online]. Available: http://www-03.ibm.com/software/products/de/appscan
[34] HP, “Enterprise Security Intelligence.” [Online]. Available: http://www8.hp.com/us/en/software-solutions/enterprise-security.html
[35] R. Vallée-Rai, E. Gagnon, and L. Hendren, “Optimizing Java bytecode using the Soot framework: Is it feasible?” CC, 2000.
[36] D. Octeau et al., “Effective inter-component communication mapping in Android with epicc: An essential step towards holistic security analysis,” in Usenix Security, Washington D.C., USA, 2013.
[37] A. Jordan, A. Gladd, and A. Abramov, “Android Malware Survey,” Raytheon BBN Technologies, Tech. Rep. April, 2012.
[38] P. Liang and M. Naik, “Scaling abstraction refinement via pruning,” ACM SIGPLAN Notices, vol. 47, no. 6, p. 590, 2012.
[39] G. Kastrinis and Y. Smaragdakis, “Hybrid Context-Sensitivity for Points-To Analysis,” in PLDI, 2013.
[40] S. Guyer and C. Lin, “Client-driven pointer analysis,” SAS, 2003.
[41] V. B. Livshits and M. S. Lam, “Finding Security Vulnerabilities in Java Applications with Static Analysis,” in USENIX Security, 2005.
[42] O. Tripp et al., “TAJ: Effective Taint Analysis of Web Applications,” in PLDI, 2009.
[43] W. Klieber et al., “Android taint flow analysis for app sets,” in SOAP, 2014.
[44] O. Tripp and J. Rubin, “A Bayesian Approach to Privacy Enforcement in Smartphones,” in USENIX Security, 2013.
[45] B. Livshits, A. V. Nori, S. K. Rajamani, and A. Banerjee, “Merlin: Specification Inference for Explicit Information Flow Problems,” in PLDI, 2009.