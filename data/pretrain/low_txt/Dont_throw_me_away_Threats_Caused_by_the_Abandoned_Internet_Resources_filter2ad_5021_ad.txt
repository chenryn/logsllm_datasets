### 39. Authentication of Services and Apps

When discussing how a service authenticates an app that requests permission to use the service, it is essential to consider the reverse scenario: apps must also authenticate the services they connect to. This is particularly critical because an adversary can control the domain and generate a valid HTTPS certificate. To mitigate this risk, mobile developers who own private services or third-party libraries should embed the server's original certificate in the published app. This ensures that when the certificate is updated, the app must be updated as well. In addition to using HTTPS, mobile developers should implement methods for the app to verify the backend service, ensuring it connects to a legitimate service. The specifics of implementing these measures will be addressed in future work.

### 6.2 Limitations

#### Static Analysis
Our study utilized static analysis, which has several known limitations. First, even though we can detect abandoned Internet resources used by mobile apps, there is no guarantee that these resources will be executed during runtime. Second, our methodology is less effective against obfuscated apps, leading to a bias towards unobfuscated apps. Furthermore, since full URLs (or even base URLs) can be constructed using various string operation methods, our approach cannot extract URLs constructed in such ways. We also recognize that not all URLs may be called during execution. In future work, we plan to adopt more sophisticated approaches, such as the Tiger system [21], to extract network-related code and trigger network activities dynamically. This will enhance the validity and reliability of our analysis.

#### Tracking Hijacked Resources
In this study, we were unable to measure the number of resources that have been hijacked or changed ownership since the app's publication. For future work, we intend to employ algorithms like Alembic [28] or Passive DNS services [9] to detect past ownership changes.

#### Dataset
We used the Playdrone dataset, which is biased towards free apps. However, abandoned Internet resources are also relevant to paid apps. Since the Playdrone dataset is a snapshot of Google Play free apps from 2014, the apps are fairly old. There is a possibility that more recent apps are using abandoned Internet resources. Our approach is applicable to other platforms, such as iOS.

### 6. DISCUSSION

Throughout this study, we highlighted the risks and pervasiveness of abandoned Internet resources used by Android apps. Although many of the apps are old, some active apps with abandoned resources have been installed over a million times, and some resources are still frequently accessed by end users. Regardless of the number of users, developers and marketplace operators should take responsibility for addressing this problem and preventing the distribution of apps containing abandoned Internet resources. In this section, we discuss potential mitigation strategies from the perspective of developers and marketplace operators, and address some of the limitations of our work.

### 6.1 Countermeasures

As previous studies have indicated, the root problem is the change in ownership of resources. We propose the following mitigations for cloud providers, mobile marketplace operators, and developers:

- **Allowing Inquiry of IP Address Ownership**: Cloud providers can offer a service that allows third parties to inquire about the ownership of IP addresses.
- **Embedding Original Certificates**: Developers should embed the server's original certificate in the published app to ensure that updates to the certificate require corresponding app updates.
- **Implementing Backend Service Authentication**: Developers should implement methods for the app to authenticate the backend service to verify its legitimacy.

### 6.3 Ethical Consideration

We conducted this study in accordance with research ethics principles and best practices [3, 17, 35]. Our scanning servers for dangling records generated only a restricted amount of traffic (i.e., requests to HTTP port 80, port 443, and custom ports found in the URL), which did not increase server workload. On resources we acquired, we collected requests for resources, did not respond to anything harmful, and did not receive sensitive or personal information. We followed responsible disclosure procedures and are in the process of reporting abandoned Internet resources to app/library/service developers.

### 7. RELATED WORK

#### 7.1 Abandoned Internet Resource
Abandoned Internet resources and changes in ownership have been discussed in several studies. Schlamp et al. [33] discussed the problem in terms of abandoned public IP address prefixes, often caused by companies going out of business without properly cleaning up their resources. Mutchler et al. [32] conducted a large-scale study on mobile web apps and found several expired domains used by Android apps. Our research focuses on abandoned Internet resources used by Android apps, regardless of usage, while their research examined vulnerabilities in the Android WebView system.

#### 7.2 Domain Name Analysis
Previous studies have analyzed abandoned and re-registered domain names through the lens of domain registration and monetization processes. Hao et al. [25] focused on the registration process of spammers' domain names, proposing a domain reputation system called PREDATOR [24]. Lever et al. [28] introduced the concept of residual trust, showing that attackers exploit and abuse this trust. Lauinger et al. [27, 26] analyzed large-scale WHOIS data and re-registrations, demonstrating that many re-registered domain names are used for speculation and monetization. Alrwais et al. [17] and Vissers et al. [38] explored the dark side of domain parking systems, exposing practices like click fraud and malware distribution.

Our study brings a new perspective on abandoned domain names resulting from ill-maintained mobile apps, enhancing the understanding of abused domain names discussed in previous studies.

#### 7.3 Security Analysis of Mobile Apps
Many studies have revealed the security risks of third-party libraries used in mobile apps. Tools like LibRadar, LibScout, and LibD [19, 29, 31] are state-of-the-art library detection tools. We employed LibRadar to classify the resources used by apps in Section 3.3. Previous studies have classified the security risks of third-party libraries into unwanted programs and vulnerabilities. Andow et al. [18] discovered that over 1% of randomly selected apps aggressively display advertisements due to malicious adware libraries. Chen et al. [20] and Backes et al. [19] conducted longitudinal studies on library usage and evolution, highlighting the persistence of known vulnerabilities. Derr et al. [23] surveyed app developers and performed a large-scale library updatability analysis, focusing on the root causes of outdated libraries.

Our study sheds light on the availability of Internet resources used by mobile apps, offering a new aspect of mobile library analysis different from previous studies.

### 8. CONCLUSION

This study focused on the threat of abandoned Internet resources used by mobile apps. We conducted a large-scale measurement study using 1.1 million Android apps and found 3,628 abandoned Internet resources from 7,331 apps published in the official Google Play marketplace. By acquiring and evaluating these resources, we demonstrated that the threats are real, serious, and pervasive. We proposed practical solutions for cloud providers, marketplace operators, and developers. As the problem appears to cross platforms, future work intends to measure the issue on another mobile platform. Given the structural property of app popularity, the problem of abandoned Internet resources will persist, necessitating further research towards a fundamental solution.

### ACKNOWLEDGMENTS

We thank Dr. Bo Sun for his insightful and valuable advice, Dr. Mitsuhiro Hatada for letting us use the commercial sandbox tool, and Dr. Dave Plonka for his comments on abandoned Internet resources (RFC 4085). Thanks also to the anonymous reviewers for their thoughtful feedback. A part of this work was supported by JSPS Grant-in-Aid for Scientific Research B, Grant Number 16H02832. Special thanks to the Indonesia Endowment Fund for Education (LPDP) for providing a full scholarship for my master's education.

### REFERENCES

[References listed as provided in the original text]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.