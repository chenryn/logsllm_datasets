### 8.3 Dynamic DDoS Attacks

We consider the following dynamic DDoS attack strategies:
1. **RandIngress**: In each epoch, a random subset of attack ingresses is selected, and the attack budget is distributed evenly across different attack types.
2. **RandAttack**: In each epoch, a random subset of attack types is selected, and the budget is distributed evenly across all ingresses.
3. **RandHybrid**: In each epoch, a random subset of ingresses and attack types are independently selected, and the attack budget is distributed evenly across the selected pairs.
4. **Steady**: The adversary selects a random attack type and a subset of ingresses, and sustains this attack throughout all epochs.
5. **FlipPrevEpoch**: This strategy is conceptually equivalent to conducting two Steady attacks, A1 and A2, with each being active during odd and even epochs, respectively.

Given the typical DDoS attack duration (approximately 6 hours [12]), we consider an attack lasting for 5000 5-second epochs (i.e., approximately 7 hours). Bohatei is initialized with zero starting point of attack estimates. The metric of interest is the normalized regret with respect to the best static decision in hindsight; i.e., if we had to pick a single static strategy for the entire duration.

Figures 14a and 14b show the regret with respect to the two goals, G1 (the number of VMs) and G2 (volume of successful attacks), for a 24-node topology. The results are similar for other topologies and are not shown here. Overall, Bohatei's online adaptation achieves low regret across the adversarial strategies compared to two strawman solutions: (1) uniform estimates and (2) estimates based on previous measurements.

### 9 Related Work

DDoS has a long history, and readers can refer to surveys for a taxonomy of DDoS attacks and defenses (e.g., [41]). We have already discussed relevant SDN/NFV work in the previous sections. Here, we briefly review other related topics.

**Attack Detection**: Several algorithms exist for detecting and filtering DDoS attacks, including time series detection techniques (e.g., [27]), backscatter analysis (e.g., [42]), exploitation of attack-specific features (e.g., [35]), and network-wide analysis (e.g., [38]). These methods are orthogonal to the focus of this paper.

**DDoS-Resilient Internet Architectures**: These include the use of capabilities [58], improved inter-domain routing (e.g., [60]), inter-AS collaboration (e.g., [39]), packet marking and unforgeable identifiers (e.g., [26]), and traceback (e.g., [51]). However, they do not provide an immediate deployment path or resolution for current networks. In contrast, Bohatei focuses on a more practical, single-ISP context, aligning with economic incentives for ISPs and their customers.

**Overlay-Based Solutions**: Overlay-based solutions (e.g., [25, 52]) act as a "buffer zone" between attack sources and targets. The design contributions in Bohatei can be applied to these as well.

**SDN/NFV-Based Security**: There are few efforts in this space, such as FRESCO [53] and AvantGuard [54]. As previously discussed, these SDN solutions introduce new DDoS avenues due to their per-flow and reactive model [54]. Solving this control bottleneck requires hardware modifications to SDN switches to add "stateful" components, which is unlikely to be supported by switch vendors soon [54]. In contrast, Bohatei chooses a proactive approach of setting up tag-based forwarding rules that is immune to these pitfalls.

### 10 Conclusions

Bohatei leverages the flexibility and elasticity benefits of recent networking trends, such as SDN and NFV, for DDoS defense. We addressed practical challenges in the design of Bohatei's resource management algorithms and control/data plane mechanisms to ensure that these do not become bottlenecks for DDoS defense. We implemented a full-featured Bohatei prototype built on industry-standard SDN control platforms and commodity network appliances. Our evaluations on a real testbed show that Bohatei (1) is scalable and responds rapidly to attacks, (2) outperforms naive SDN implementations that do not address the control/data plane bottlenecks, and (3) enables resilient defenses against dynamic adversaries.

Looking forward, we believe that these design principles can also be applied to other aspects of network security.

### Acknowledgments

This work was supported in part by grant number N00014-13-1-0048 from the Office of Naval Research, and NSF awards 1409758, 1111699, 1440056, and 1440065. Seyed K. Fayaz was supported in part by the CMU Bertucci Fellowship. We thank Limin Jia, Min Suk Kang, the anonymous reviewers, and our shepherd Patrick Traynor for their helpful suggestions.

### References

[1] Bohatei. https://github.com/ddos-defense/bohatei.
[2] Amazon EC2. http://aws.amazon.com/ec2/.
[3] Arbor Networks, worldwide infrastructure security report, volume IX, 2014. http://bit.ly/1R0NDRi.
[4] AT&T and Intel: Transforming the Network with NFV and SDN. https://www.youtube.com/watch?v=F55pHxTeJLc#t=76.
[5] AT&T Denial of Service Protection. http://soc.att.com/
[6] AT&T Domain 2.0 Vision White Paper. http://soc.att.com/
[7] Click Modular Router. http://www.read.cs.ucla.edu/click/
[8] CloudFlare. https://www.cloudflare.com/ddos.
[9] DDoS protection using Netfilter/iptables. http://bit.ly/1IImM2F.
[10] Dell PowerEdge Rack Servers. http://dell.to/1dtP5Jk.
[11] GSA Advantage. http://1.usa.gov/1ggEgFN.
[12] Incapsula Survey: What DDoS Attacks Really Cost Businesses, 2014. http://bit.ly/1CFZyIr.
[13] iptables. http://www.netfilter.org/projects/iptables/.
[14] NTP attacks: Welcome to the hockey stick era. http://bit.ly/1ROlwQe.
[15] ONS 2014 Keynote: John Donovan, Senior EVP, AT&T Technology & Network Operations. http://bit.ly/1RQFMko.
[16] Open vSwitch. http://openvswitch.org/.
[17] OpenDaylight project. http://www.opendaylight.org/.
[18] Packet processing on Intel architecture. http://intel.ly/1efIEu6.
[19] Prolexic. http://www.prolexic.com/.
[20] Radware. http://www.radware.com/Solutions/Security/.
[21] Time for an SDN Sequel? http://bit.ly/1BSpdma.
[22] Topology Zoo. www.topology-zoo.org.
[23] Verizon-Carrier Adoption of Software-defined Networking. https://www.youtube.com/watch?v=WVczl03edi4.
[24] ZScaler Cloud Security. http://www.zscaler.com.
[25] D. G. Andersen. Mayday: Distributed filtering for internet services. In Proc. USITS, 2003.
[26] D. G. Andersen, H. Balakrishnan, N. Feamster, T. Koponen, D. Moon, and S. Shenker. Accountable internet protocol (AIP). In Proc. SIGCOMM, 2008.
[27] P. Barford, J. Kline, D. Plonka, and A. Ron. A signal analysis of network traffic anomalies. In Proc. ACM SIGCOMM Workshop on Internet Measurement, 2002.
[28] R. C´aceres, F. Douglis, A. Feldmann, G. Glass, and M. Rabinovich. Web proxy caching: The devil is in the details. SIGMETRICS Perform. Eval. Rev., 26(3):11–15, Dec. 1998.
[29] M. Casado, T. Koponen, S. Shenker, and A. Tootoonchian. Fabric: A retrospective on evolving sdn. In Proc. HotSDN, 2012.
[30] J. Czyz, M. Kallitsis, M. Gharaibeh, C. Papadopoulos, M. Bailey, and M. Karir. Taming the 800 pound gorilla: The rise and decline of ntp ddos attacks. In Proc. IMC, 2014.
[31] S. K. Fayazbakhsh, L. Chiang, V. Sekar, M. Yu, and J. C. Mogul. Enforcing network-wide policies in the presence of dynamic middlebox actions using FlowTags. In Proc. NSDI, 2014.
[32] A. Greenberg, G. Hjalmtysson, D. A. Maltz, A. Myers, J. Rexford, G. Xie, H. Yan, J. Zhan, and H. Zhang. A clean slate 4D approach to network control and management. ACM CCR, 2005.
[33] V. Heorhiadi, S. K. Fayaz, M. Reiter, and V. Sekar. Frenetic: A network programming language. Information Systems Security, 2014.
[34] Jain et al. B4: Experience with a globally-deployed software defined wan. In Proc. SIGCOMM, 2013.
[35] C. Jin, H. Wang, and K. G. Shin. Hop-count filtering: An effective defense against spoofed ddos traffic. In Proc. CCS, 2003.
[36] A. Kalai and S. Vempala. Efficient algorithms for online decision problems. J. Comput. Syst. Sci., 2005.
[37] M. S. Kang, S. B. Lee, and V. Gligor. The crossfire attack. In Proc. IEEE Security and Privacy, 2013.
[38] A. Lakhina, M. Crovella, and C. Diot. Mining Anomalies Using Traffic Feature Distributions. In Proc. SIGCOMM, 2005.
[39] R. Mahajan et al. Controlling high bandwidth aggregates in the network. CCR, 2001.
[40] N. McKeown et al. OpenFlow: enabling innovation in campus networks. CCR, March 2008.
[41] J. Mirkovic and P. Reiher. A taxonomy of ddos attack and ddos defense mechanisms. In CCR, 2004.
[42] D. Moore, C. Shannon, D. J. Brown, G. M. Voelker, and S. Savage. Inferring internet denial-of-service activity. ACM Trans. Comput. Syst., 2006.
[43] Network functions virtualisation – introductory white paper. http://portal.etsi.org/NFV/NFV_White_Paper.pdf.
[44] A. Networks. ATLAS Summary Report: Global Denial of Service. http://atlas.arbor.net/summary/dos.
[45] P. Patel et al. Ananta: cloud scale load balancing. In Proc. ACM SIGCOMM, 2013.
[46] V. Paxson. Bro: A system for detecting network intruders in real-time. In Computer Networks, 1999.
[47] S. Peter, J. Li, I. Zhang, D. R. K. Ports, D. Woos, A. Krishnamurthy, T. Anderson, and T. Roscoe. Arrakis: The operating system is the control plane. In Proc. OSDI, 2014.
[48] M. Roesch. Snort - Lightweight Intrusion Detection for Networks. In LISA, 1999.
[49] C. Rossow. Amplification hell: Revisiting network protocols for ddos abuse. In Proc. USENIX Security, 2014.
[50] M. Roughan. Simplifying the Synthesis of Internet Traffic Matrices. ACM CCR, 2005.
[51] S. Savage, D. Wetherall, A. Karlin, and T. Anderson. Practical network support for ip traceback. In Proc. SIGCOMM, 2000.
[52] E. Shi, I. Stoica, D. Andersen, and A. Perrig. OverDoSe: A generic DDoS protection service using an overlay network. Technical Report CMU-CS-06-114, School of Computer Science, Carnegie Mellon University, 2006.
[53] S. Shin, P. Porras, V. Yegneswaran, M. Fong, G. Gu, and M. Tyson. FRESCO: Modular composable security services for software-defined networks. In Proc. NDSS, 2013.
[54] S. Shin, V. Yegneswaran, P. Porras, and G. Gu. AVANT-GUARD: Scalable and vigilant switch flow management in software-defined networks. In Proc. CCS, 2013.
[55] A. Studer and A. Perrig. The coremelt attack. In Proc. ESORICS, 2009.
[56] T. Koponen et al. Network virtualization in multi-tenant datacenters. In Proc. NSDI, 2014.
[57] P. Verkaik, D. Pei, T. Schollf, A. Shaikh, A. C. Snoeren, and J. E. van der Merwe. Wresting Control from BGP: Scalable Fine-grained Route Control. In Proc. USENIX ATC, 2007.
[58] X. Yang, D. Wetherall, and T. Anderson. A dos-limiting network architecture. In Proc. SIGCOMM, 2005.
[59] S. Yeganeh, A. Tootoonchian, and Y. Ganjali. On scalability of software-defined networking. Communications Magazine, IEEE, 2013.
[60] X. Zhang, H.-C. Hsiao, G. Hasker, H. Chan, A. Perrig, and D. G. Andersen. SCION: Scalability, control, and isolation on next-generation networks. In Proc. IEEE Security and Privacy, 2011.

### A ILP Formulation

The ILP formulation for optimal resource management (mentioned in §4.2) is shown in Figure 15.

**Variables:**
In addition to the parameters and variables defined earlier in §4, we define the binary variable \( q_{d,a,i,vm,s,i,vm,s,l} \) as follows: if it is 1, VM \( vm \) of type \( a \) in ingress \( i \) is assigned to server \( s \) in datacenter \( d \) and rack \( l \).

1. Minimize \( \alpha \times \sum_e f_{e,a,d} \times T_{e,a} \times L_{e,d} + \sum_d dsc_d \)
2. \( \forall e, a, d : f_{e,a,d} = 1 \) (All suspicious traffic should be served)
3. \( \forall a, d : t_{a,d} = \sum_e f_{e,a,d} \times T_{e,a} \) (Traffic of each type to each datacenter)
4. \( \forall d : \sum_a t_{a,d} \leq C_{\text{link}}^d \) (Datacenter link capacity)
5. \( \forall d, a, i : \sum_s q_{d,a,i,vm,s,i,vm,s,l} \geq t_{a,d} \times \frac{W_{a,i \rightarrow i}}{\sum_{a,i \rightarrow i} P_{a,i}} \) (Provisioning sufficient VMs)
6. \( \forall d, s \in S_d : \sum_{a,i,vm} q_{d,a,i,vm,s,i,vm,s,l} \leq C_{\text{compute}}^{d,s} \) (Server compute capacity)
7. \( \forall d : dsc_d = \text{intraR}_d \times \text{IntraUnitCost} + \text{interR}_d \times \text{InterUnitCost} \) (Total cost within each datacenter)
8. \( \forall d : \text{intraR}_d = \sum_a \sum_i \sum_l q_{d,a,i,vm,s,i,vm,s,l} \) (Intra-rack cost)
9. \( \forall d : \text{interR}_d = \sum_a \sum_i \sum_l q_{d,a,i,vm,s,i,vm,s,l} \) (Inter-rack cost)

This formulation ensures that the resources are optimally allocated to handle the incoming traffic while minimizing the overall cost.