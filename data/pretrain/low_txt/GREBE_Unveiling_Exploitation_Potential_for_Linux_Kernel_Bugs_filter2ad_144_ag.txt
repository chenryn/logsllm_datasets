# Protection and Kernel Vulnerabilities

## syzbot Reports

### General Protection Faults
- **2020**: "general protection fault" - [syzkaller.appspot.com/bug?id=1fd1d44caf96ca464e1c1f19299d1f3e7558f6e5](https://syzkaller.appspot.com/bug?id=1fd1d44caf96ca464e1c1f19299d1f3e7558f6e5)
- **2018**: "BUG: corrupted" - [syzkaller.appspot.com/bug?id=b9b37a7aaeb4a4e2357b2dfdd1f689e3ffa66282](https://syzkaller.appspot.com/bug?id=b9b37a7aaeb4a4e2357b2dfdd1f689e3ffa66282)
- **2018**: "general protection fault" - [syzkaller.appspot.com/bug?id=695527bd03b09f741819baddcd231c16fe014a48](https://syzkaller.appspot.com/bug?id=695527bd03b09f741819baddcd231c16fe014a48)
- **2020**: "BUG: unable to handle kernel NULL pointer dereference" - [syzkaller.appspot.com/bug?id=0d93140da5a82305a66a136af99b088b75177b99](https://syzkaller.appspot.com/bug?id=0d93140da5a82305a66a136af99b088b75177b99)

### KASAN Reports
- **2020**: "KASAN: use-after-free read in pcpu freelist populate" - [syzkaller.appspot.com/bug?id=85fd017144b9b1d6761870ff71852d15e4cdd44e](https://syzkaller.appspot.com/bug?id=85fd017144b9b1d6761870ff71852d15e4cdd44e)
- **2019**: "WARNING: nel accept" - [syzkaller.appspot.com/bug?id=b0e30ab5186d097b8e3e23e8ca971fbf1cf54659](https://syzkaller.appspot.com/bug?id=b0e30ab5186d097b8e3e23e8ca971fbf1cf54659)
- **2020**: "WARNING: ucma event handler" - [syzkaller.appspot.com/bug?id=d5222b3e1659e0aea19df562c79f216515740daa](https://syzkaller.appspot.com/bug?id=d5222b3e1659e0aea19df562c79f216515740daa)
- **2020**: "general protection fault" - [syzkaller.appspot.com/bug?id=575a090948f98f28593563c9d9d9b343eb39bbb4](https://syzkaller.appspot.com/bug?id=575a090948f98f28593563c9d9d9b343eb39bbb4)
- **2020**: "KASAN: slab-out-of-bounds read in bitmap ip add" - [syzkaller.appspot.com/bug?id=3a6c9972ff471c4dbc3f45e83dd5fa2f18cb82a4](https://syzkaller.appspot.com/bug?id=3a6c9972ff471c4dbc3f45e83dd5fa2f18cb82a4)
- **2020**: "KASAN: use-after-free read in ip6 dst destroy" - [syzkaller.appspot.com/bug?id=27ae1ae5c54e09f8c86dd9428df048e7886be6dc](https://syzkaller.appspot.com/bug?id=27ae1ae5c54e09f8c86dd9428df048e7886be6dc)
- **2020**: "KASAN: use-after-free read in sctp auth free" - [syzkaller.appspot.com/bug?id=cbb289816e728f56a4e2c1b854a3163402fe2f88](https://syzkaller.appspot.com/bug?id=cbb289816e728f56a4e2c1b854a3163402fe2f88)
- **2020**: "KASAN: slab-out-of-bounds read in hci extended inquiry result evt" - [syzkaller.appspot.com/bug?id=4bf11aa05c4ca51ce0df86e500fce486552dc8d2](https://syzkaller.appspot.com/bug?id=4bf11aa05c4ca51ce0df86e500fce486552dc8d2)
- **2018**: "KASAN: slab-out-of-bounds read in sha512 final" - [syzkaller.appspot.com/bug?id=e4be30826c1b7777d69a9e3e20bc7b708ee8f82c](https://syzkaller.appspot.com/bug?id=e4be30826c1b7777d69a9e3e20bc7b708ee8f82c)
- **2018**: "KASAN: use-after-free read in cma bind port" - [syzkaller.appspot.com/bug?id=3b7409f639067d927b8ad1b11a5e08bae27061af](https://syzkaller.appspot.com/bug?id=3b7409f639067d927b8ad1b11a5e08bae27061af)
- **2020**: "KASAN: global-out-of-bounds read in fb con resize" - [syzkaller.appspot.com/bug?id=ebcbbb6576958a496500fee9cf7aa83ea00b5920](https://syzkaller.appspot.com/bug?id=ebcbbb6576958a496500fee9cf7aa83ea00b5920)
- **2019**: "kernel BUG at security/keys/keyring.c:line!" - [syzkaller.appspot.com/bug?id=f7649aa07ffca82dc93dc5cebc00c665849f5138](https://syzkaller.appspot.com/bug?id=f7649aa07ffca82dc93dc5cebc00c665849f5138)
- **2020**: "WARNING in snd info get line" - [syzkaller.appspot.com/bug?id=27ea7ae6337aef698924e3eac5aa2b925374ca4c](https://syzkaller.appspot.com/bug?id=27ea7ae6337aef698924e3eac5aa2b925374ca4c)
- **2020**: "KASAN: use-after-free read in vlink health reporter destroy" - [syzkaller.appspot.com/bug?id=b7f48618d1139d02d0faba8e5932c51eec329b65](https://syzkaller.appspot.com/bug?id=b7f48618d1139d02d0faba8e5932c51eec329b65)
- **2020**: "WARNING: refcount qdisc put (2)" - [syzkaller.appspot.com/bug?id=badc9136121e634336bcdb31592a4b70b064e421](https://syzkaller.appspot.com/bug?id=badc9136121e634336bcdb31592a4b70b064e421)
- **2020**: "KASAN: use-after-free read in do madvise" - [syzkaller.appspot.com/bug?id=33913c931f51814eeb2ecdbe03af91d1d6d73520](https://syzkaller.appspot.com/bug?id=33913c931f51814eeb2ecdbe03af91d1d6d73520)
- **2020**: "Warning in snd usbmidi submit urb/usb submit urb" - [syzkaller.appspot.com/bug?id=28741ff1906f93db2a398bc40e082da51828ec5b](https://syzkaller.appspot.com/bug?id=28741ff1906f93db2a398bc40e082da51828ec5b)

## Related Research Papers

1. H. Han and S. K. Cha, “IMF: Inferred model-based fuzzer,” in Proceedings of the 24th ACM SIGSAC Conference on Computer and Communications Security (CCS), 2017.
2. D. Song et al., “PeriScope: An effective probing and fuzzing framework for the hardware-OS boundary,” in Proceedings of the 2019 Network and Distributed System Security Symposium (NDSS), 2019.
3. T. Avgerinos et al., “AEG: Automatic exploit generation,” in Proceedings of the 2016 Network and Distributed System Security Symposium (NDSS), 2011.
4. D. Brumley et al., “Automatic patch-based exploit generation is possible: Techniques and implications,” in Proceedings of the 29th IEEE Symposium on Security and Privacy (S&P), 2008.
5. T. Bao et al., “Your exploit is mine: Automatic shellcode transplant for remote exploits,” in Proceedings of the 38th IEEE Symposium on Security and Privacy (S&P), 2017.
6. Y. Shoshitaishvili et al., “Firmalice - automatic detection of authentication bypass vulnerabilities in binary firmware,” in Proceedings of the 2015 Network and Distributed System Security Symposium (NDSS), 2015.
7. Y. Shoshitaishvili et al., “SoK:(state of) the art of war: Offensive techniques in binary analysis,” in Proceedings of the 37th IEEE Symposium on Security and Privacy (S&P), 2016.
8. N. Stephens et al., “Driller: Augmenting fuzzing through selective symbolic execution,” in Proceedings of the Network and Distributed System Security Symposium (NDSS), 2016.
9. S. Heelan et al., “Automatic heap layout manipulation for exploitation,” in Proceedings of the 27th USENIX Security Symposium (USENIX Security), 2018.
10. S. Heelan et al., “Gollum: Modular and greybox exploit generation for heap overflows in interpreters,” in Proceedings of the 26th ACM SIGSAC Conference on Computer and Communications Security (CCS), 2019.
11. Y. Wang et al., “Revery: From proof-of-concept to exploitable,” in Proceedings of the 25nd ACM SIGSAC Conference on Computer and Communications Security (CCS), 2018.
12. I. Yun et al., “Automatic techniques to systematically discover new heap exploitation primitives,” in Proceedings of the 29th USENIX Security Symposium (USENIX Security), 2020.
13. W. Xu et al., “From Collision To Exploitation: Unleashing use-after-free vulnerabilities in Linux kernel,” in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS), 2015.
14. Y. Chen and X. Xing, “SLAKE: Facilitating slab manipulation for exploiting vulnerabilities in the Linux kernel,” in Proceedings of the 26th ACM SIGSAC Conference on Computer and Communications Security (CCS), 2019.
15. K. Lu et al., “Unleashing use-before-initialization vulnerabilities in the Linux kernel using targeted stack spraying,” in Proceedings of the 2017 Network and Distributed System Security Symposium (NDSS), 2017.
16. H. Cho et al., “Exploiting uses of uninitialized stack variables in Linux kernels to leak kernel pointers,” in 14th USENIX Workshop on Offensive Technologies (WOOT), 2020.
17. V. P. Kemerlis et al., “ret2dir: Rethinking kernel isolation,” in Proceedings of the 23rd USENIX Security Symposium (USENIX Security), 2014.
18. W. Wu et al., “KEPLER: Facilitating control-flow hijacking primitive evaluation for Linux kernel vulnerabilities,” in Proceedings of the 28th USENIX Security Symposium (USENIX Security), 2019.
19. W. Wu et al., “FUZE: Towards facilitating exploit generation for kernel use-after-free vulnerabilities,” in Proceedings of the 27th USENIX Security Symposium (USENIX Security), 2018.
20. W. Chen et al., “KOOBE: Towards facilitating exploit generation of kernel out-of-bounds write vulnerabilities,” in Proceedings of the 29th USENIX Security Symposium (USENIX Security), 2020.

## User Study

### Background
To investigate the relationship between a kernel bug's error behavior and its exploitation potential, we designed a survey (Figure 3) and conducted a user study with IRB approval. The survey first inquired about the participants' backgrounds, including their occupations and expertise levels. We then asked whether they agree that, in most scenarios, kernel error behaviors like double free, use-after-free, and out-of-bound access imply higher exploitation potential than behaviors such as BUG, GPF, WARN, and NULL pointer dereference. We provided examples and comparisons to help participants understand the context. Participants were required to briefly explain their reasoning if they disagreed with our classification.

### Recruitment and Incentives
We recruited CTF players from top-tier teams [77] and encouraged them to distribute the survey to knowledgeable experts. We offered a $10 gift card to each participant to motivate survey completion. We managed to recruit 21 security experts, 12 of whom had extensive experience in kernel exploitation.

### Survey Results
The results of the survey will be detailed in the full report, providing insights into the perceived exploitation potential of different kernel error behaviors.