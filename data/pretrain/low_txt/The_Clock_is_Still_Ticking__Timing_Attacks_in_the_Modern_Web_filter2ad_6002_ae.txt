### Introduction to Timing Attacks and Their Implications

Crosby et al. demonstrated that a timing difference as small as 20 microseconds in a server-side process can be reliably distinguished over the Internet. The ability to obtain highly accurate timing information has led to numerous attacks that exploit remote timing data. These attacks aim to compromise cryptographic systems, such as extracting private keys from an OpenSSL-based web server [8], or to fingerprint the rules of Web Application Firewalls [32].

Moreover, researchers have shown that cross-site timing attacks can be used to enumerate network-enabled devices on a victim's local network [19]. An adversary could then use this information to fingerprint the user or to penetrate vulnerable devices, for example, through Cross-Site Request Forgery (CSRF) attacks. In contrast, Felten and Schneider proposed various cross-site timing attacks that allow adversaries to infer a victim's browsing history [12]. By analyzing the reduced loading time of cached resources, attackers can determine whether a specific resource is present in the victim’s cache, thereby revealing their browsing history. Despite this attack being known for over 15 years, few changes have been made to mitigate it. Recently, Jia et al. demonstrated that similar techniques can be used to launch geo-inference attacks, allowing adversaries to discover a victim's geographical location without their consent [18]. This attack exploits the fact that trusted web services, which know the user's location, cache location-specific resources.

### Browser-Side Timing Attacks

In addition to network response time and server-side processing time, researchers have discovered attacks that leverage the time required by the browser to complete certain computations. In 2013, Kotcher et al. found that applying CSS filters on framed documents results in rendering times that are related to the document's visual content [21]. This allowed adversaries to read pixels from cross-origin documents if framing was not explicitly forbidden. Similarly, Paul Stone found that using SVG filters instead of CSS filters yielded the same results [35].

### Browser Side-Channel Leaks

Due to the complex design and intricate implementations of browsers, it is common for researchers to discover unintended behavior that leads to the leakage of users' private information or bypasses the Same-Origin Policy, a fundamental security feature in modern web browsers.

One of the oldest and most well-known side-channel leaks in browsers is the history sniffing attack, first introduced in 2002 [9]. By applying CSS styles to visited links and querying the computed style in JavaScript, an adversary could determine whether a victim had previously visited a specific link. Jang et al. conducted an empirical study on the 50,000 most popular websites and discovered that 46 websites were clandestinely using these history sniffing attacks [17]. This prompted browser vendors to adopt countermeasures that restricted the CSS directives that could be used with the :visited pseudo-class [4]. However, even with these mitigations, history detection techniques remained possible, either through timing attacks leveraging SVG filters [34] or through user interaction [40].

### Attacks on User Behavior and Browser Features

Researchers have also found that the inherent behavior of certain browser features can allow adversaries to uncover a user's private information at cross-origin websites. For instance, Heiderich et al. discovered that by leveraging various CSS and HTML features, adversaries can exfiltrate sensitive information, such as CSRF tokens [16]. Lee et al. found that the intrinsic behavior of the ApplicationCache mechanism can be used to uncover the status code returned for a cross-origin resource [22]. This allows an adversary to obtain sensitive information when the resulting status code for a certain endpoint is based on the user's state. The authors showed how these attacks could be used to discover web servers on the local network and to detect the login status of a user at various websites. Our proposed countermeasure, which aims to prevent illicit cross-origin requests, can also be used to deflect the ApplicationCache attacks proposed by Lee et al. Conversely, their defense mechanism, which provides more control to website administrators over the cache-ability of a resource, can be applied to restrict the two cache-based timing techniques. Given the variety of browser features that may leak timing information, we conjecture that a more systematic approach is required to thwart these side-channel attacks.

### Conclusion

In this paper, we propose several new timing techniques for estimating the size of cross-origin resources. These attacks exploit the side-channel information exposed by the time required by a browser to process a resource, either by parsing it or involving it in caching operations. Because the timing measurements start after the resource has been downloaded, the side-channel attacks do not suffer from the limitations of traditional timing techniques and can provide more accurate measurements, regardless of the victim's network conditions. We show that these attacks can be applied across various platforms, posing a significant threat to a large number of web users. Using five real-world attack scenarios, we illustrate how attackers can leverage our novel timing techniques against a variety of online web services, allowing them to extract private data that a victim shared with trusted services.

Overall, our findings indicate that cross-site timing attacks pose a significant threat to the privacy of online users. As the side-channel leaks exploited in these timing techniques are inherent to the design of browsers and the web, we conjecture that a systematic client-side countermeasure would require structural changes to the browser architecture. Given the complexity of modern browsers, a complete mitigation against all side-channel leaks appears unlikely, suggesting the need for CSRF-like countermeasures at the server-side to hide the size of a resource from cross-site attackers.

### Acknowledgments

We thank the anonymous reviewers for their valuable comments. For KU Leuven, this research was performed with the financial support of the Prevention against Crime Programme of the European Union (B-CCENTRE), the Research Fund KU Leuven, the IWT project SPION, and the EU FP7 project NESSoS. For Stony Brook University, this work was supported by the National Science Foundation (NSF) under grant CNS-1527086.

### References

[1] Bose v. interclick, inc., 2011.
[2] G. Acar, C. Eubank, S. Englehardt, M. Juarez, A. Narayanan, and C. Diaz. The web never forgets: Persistent tracking mechanisms in the wild. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, pages 674–689. ACM, 2014.
[3] J. Archibald. Application Cache is a douchebag. http://alistapart.com/article/application-cache-is-a-douchebag, May 2012.
[4] L. D. Baron. Preventing attacks on a user’s history through CSS: visited selectors. http://dbaron.org/mozilla/visited-privacy, 2010.
[5] A. Barth, C. Jackson, and J. C. Mitchell. Robust defenses for cross-site request forgery. In Proceedings of the 15th ACM conference on Computer and communications security, pages 75–88. ACM, 2008.
[6] Beevolve. An exhaustive study of Twitter users across the world. http://www.beevolve.com/twitter-statistics/, October 2012.
[7] A. Bortz and D. Boneh. Exposing private information by timing web applications. In Proceedings of the 16th international conference on World Wide Web, pages 621–628. ACM, 2007.
[8] D. Brumley and D. Boneh. Remote timing attacks are practical. Computer Networks, 48(5):701–716, 2005.
[9] A. Clover. CSS visited pages disclosure, 2002.
[10] X. Ding, L. Zhang, Z. Wan, and M. Gu. A brief survey on de-anonymization attacks in online social networks. In CASoN, pages 611–615, 2010.
[11] Facebook. Company info. http://newsroom.fb.com/company-info/.
[12] E. W. Felten and M. A. Schneider. Timing attacks on web privacy. In Proceedings of the 7th ACM conference on Computer and communications security, pages 25–32. ACM, 2000.
[13] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee. Hypertext transfer protocol–HTTP/1.1, 1999. RFC2616, 2006.
[14] H. Gao, J. Hu, T. Huang, J. Wang, and Y. Chen. Security issues in online social networks. Internet Computing, IEEE, 15(4):56–63, 2011.
[15] D. Goodin. Marketer taps browser flaw to see if you’re pregnant. http://www.theregister.co.uk/2011/07/22/marketer_sniffs_browser_history/, July 2011.
[16] M. Heiderich, M. Niemietz, F. Schuster, T. Holz, and J. Schwenk. Scriptless attacks: Stealing the pie without touching the sill. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 760–771. ACM, 2012.
[17] D. Jang, R. Jhala, S. Lerner, and H. Shacham. An empirical study of privacy-violating information flows in JavaScript web applications. In Proceedings of the 17th ACM conference on Computer and communications security, pages 270–283. ACM, 2010.
[18] Y. Jia, X. Dong, Z. Liang, and P. Saxena. I know where you’ve been: Geo-inference attacks via the browser cache. Web 2.0 Security & Privacy (W2SP), 2014.
[19] M. Johns. Exploiting the intranet with a webpage. http://web.sec.uni-passau.de/members/martin/docs/070906_HITB_Martin_Johns.pdf, September 2007.
[20] P. C. Kocher. Timing attacks on implementations of Diffie-Hellman, RSA, DSS, and other systems. In Advances in Cryptology—CRYPTO’96, pages 104–113. Springer, 1996.
[21] R. Kotcher, Y. Pei, P. Jumde, and C. Jackson. Cross-origin pixel stealing: timing attacks using CSS filters. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, pages 1055–1062. ACM, 2013.
[22] S. Lee, H. Kim, and J. Kim. Identifying cross-origin resource status using Application Cache. In Proceedings of the ISOC Network and Distributed System Security Symposium (NDSS’15), 2015.
[23] LinkedIn. About LinkedIn. https://press.linkedin.com/about-linkedin.
[24] J. Mann. High Resolution Time. W3C recommendation, 2012.
[25] Microsoft. modern.IE - platform status. https://status.modern.ie/serviceworker.
[26] Mozilla Developer Network. ServiceWorker API. https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker_API.
[27] Mozilla Developer Network. Using HTML5 audio and video. https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_HTML5_audio_and_video.
[28] Y. Nagami, D. Miyamoto, H. Hazeyama, and Y. Kadobayashi. An independent evaluation of web timing attack and its countermeasure. In Availability, Reliability and Security (ARES), 2008.
[29] N. Nikiforakis, A. Kapravelos, W. Joosen, C. Kruegel, F. Piessens, and G. Vigna. Cookieless monster: Exploring the ecosystem of web-based device fingerprinting. In Security and privacy (SP), 2013 IEEE symposium on, pages 541–555. IEEE, 2013.
[30] OOKLA Net Index. Household download index. http://www.netindex.com/download/allcountries/, February 2015.
[31] S. Schinzel. An efficient mitigation method for timing side channels on the web. In 2nd International Workshop on Constructive Side-Channel Analysis and Secure Design (COSADE), 2011.
[32] I. Schmitt and S. Schinzel. WAFFle: Fingerprinting filter rules of web application firewalls. In WOOT, pages 34–40, 2012.
[33] StatCounter. Top 5 desktop browsers on Jan 2015. http://gs.statcounter.com/#desktop-browser-ww-monthly-201501-201501-bar, January 2015.
[34] P. Stone. Bug 711043 - (CVE-2013-1693) SVG filter timing attack. https://bugzilla.mozilla.org/show_bug.cgi?id=711043, December 2011.
[35] P. Stone. Pixel perfect timing attacks with HTML5. Context Information Security (White Paper), 2013.
[36] Twitter. Company info. https://about.twitter.com/company, February 2015.
[37] A. Van Kesteren and WHATWG. Fetch. https://fetch.spec.whatwg.org/, January 2015.
[38] W3C. Navigation Timing. http://www.w3.org/TR/navigation-timing/, December 2012.
[39] W3C. Service Workers. http://www.w3.org/TR/service-workers/, February 2015.
[40] Z. Weinberg, E. Y. Chen, P. R. Jayaraman, and C. Jackson. I still know what you visited last summer: Leaking browsing history via user interaction and side channel attacks. In Security and Privacy (SP), 2011 IEEE Symposium on, pages 147–161. IEEE, 2011.
[41] WHATWG. Offline web applications. https://html.spec.whatwg.org/multipage/browsers.html#offline, January 2015.
[42] G. Wondracek, T. Holz, E. Kirda, and C. Kruegel. A practical attack to de-anonymize social network users. In Security and Privacy (SP), 2010 IEEE Symposium on, pages 223–238. IEEE, 2010.