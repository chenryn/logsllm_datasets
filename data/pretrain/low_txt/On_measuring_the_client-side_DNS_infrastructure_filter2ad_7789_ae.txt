### Table 8: RDNSdi TTL Deviations

| Expected (sec) | % |
|---------------|---|
| 52%           | 53% |
| 69%           | 53% |
| 52%           | 72% |
| 59%           | 59% |
| 54%           |     |

### Table 9: RDNSi TTL Behavior

| Behavior                  | Percentage of Measurements |
|---------------------------|----------------------------|
| Honest                    | 36%                        |
| Lie on Initial Response    | 55%                        |
| Lie on Subsequent Requests | 5%                         |
| Constant TTL              | 5%                         |
| Incrementing TTL          | 0%                         |

### Analysis and Experimental Setup

In §7.1, 88% of FDNSes provide honest initial responses, while in §7.2, 88% are honest on the initial response. To mitigate the impact of FDNS lies, we use more than two FDNSes in coordinated probing. Instead of using F1 and F2 as single FDNSes, we utilize up to 10 FDNSes, divided into two sets, and send the same request through each at roughly the same time.

- **If any FDNS responds with the correct TTL value:** We conclude that the RDNSi is truthful.
- **If no FDNS responds with the correct TTL:**
  - **Scenario 1:** Some FDNSes are in the set of FDNSes that were honest in initial responses, and their TTL values agree. This identifies the actual TTL provided by the RDNSi.
  - **Scenario 2:** The TTL values from honest FDNSes do not agree, possibly due to HDNSes interposing between some FDNSes and the RDNSi. In this case, we assume the RDNSi returns the most common TTL value among the honest FDNSes.
  - **Scenario 3:** None of the FDNSes are honest. Here, we assume the RDNSi returns the most common TTL value among all FDNSes.

If the majority of FDNSes access an RDNSi through the same HDNS, our experiment may conflate the behavior of the RDNSi and the HDNS. However, if an RDNSi is only accessible through a single HDNS, learning the RDNSi's behavior in isolation is moot, as only the aggregate behavior of both components impacts client devices in the real system.

### Validation and Results

We validate our technique for determining RDNSi TTL behavior using RDNSdies, which allow us to obtain ground truth by direct probing. Our coordinated probing technique agrees with the ground truth in 98% of cases, not only in detecting whether an RDNSi is honest but also in determining quantitative TTL violations.

In our dataset, there are 46K RDNSies, and we conduct in-depth probing for 22K of them. Table 9 shows our findings:
- **36%** of RDNSies are honest.
- **55%** lie on the initial response to F1.
- **5%** lie in response to subsequent requests from F2, indicating that caching a different TTL than initially returned is less prevalent in RDNSies than FDNSes.
- **8%** return constant TTL values without decrementing.

Table 10 shows the TTL deviations from RDNSies, merged with the results for RDNSdies.

### Record Retention in RDNS Caches

To determine how long a record remains cached and accessible at RDNSies, we use the experimental setup described earlier, with one exception: instead of querying from F2 immediately after receiving the response from F1, we wait before repeating the query. Figure 14 shows the distribution of record availability in RDNSi caches for records with TTLs of 30 and 1 million seconds.

### Dataset Representativeness

We address the issue of bias in our datasets. Since our scans do not encompass the entire Internet, our results may not be representative of the entire population of FDNSes and RDNSies due to biases in our scanning methodology. Specifically, our results on FDNS behavior encompass a subset of FDNSes that allow cache injection, and our results for RDNSies include only those for which we discover at least two FDNSes.

We assess representativeness by calculating the fraction of actors that honestly report the TTL value for all TTL values we utilize. We divide our datasets into ten slices ordered by the time of discovery. For the aggregate behavior and FDNS behavior, the 10 slices each include an identical number of measured FDNSes, while for the RDNSi behavior, the 10 slices each include an identical number of measured RDNSies. We then calculate a cumulative snapshot of the fraction of honest actors found in the first n slices for 1–10 slices.

Figure 15 shows the results:
- The fraction of honest actors in the aggregate data remains constant throughout the 10 snapshots, indicating a representative sample.
- The fraction of honest RDNSies decreases over time but converges to a constant value by the 7th snapshot.
- The fraction of honest FDNSes increases throughout the 10 snapshots, though the growth is flattening, indicating that our dataset is not sufficient to capture a representative set of FDNSes that allow cache injection.

A larger question of representativeness is whether open DNS resolvers are representative of the overall population of DNS resolvers users employ. Our methodology does not afford a way to directly assess this, given that we would have to do so from inside many edge networks.

### Conclusion

In this paper, we present methodologies for efficiently discovering the client-side DNS infrastructure and analyzing the behavior of its components. We double previous estimates of the number of open resolvers on the Internet, find evidence of shared resolver pools, and observe significant distances DNS messages travel within the infrastructure. In terms of caching behavior, we show how long various actors retain records and how they report TTL values. We observe that the authoritative TTL value is frequently modified, with large TTLs reduced in 64% of cases and small TTLs increased in 11% of measurements. Cache evictions due to capacity limits occur infrequently in RDNSies, even for rarely accessed records. While the TTL is frequently mis-reported to clients, resolvers do not retain records much past the authoritative TTL, with records returned past TTL in only 10% of cases, even for records with a short TTL of 30 seconds.

### Acknowledgments

This work was supported in part by NSF through grants CNS-0831821, CNS-1213157, and CNS-0831535. The authors thank the anonymous reviewers and our shepherd, Meeyoung Cha, for their assistance in improving the paper.

### References

[1] Open Resolver Project. http://openresolverproject.org/.

[2] B. Ager, W. Mühlbauer, G. Smaragdakis, and S. Uhlig. Comparing DNS Resolvers in the Wild. In 10th ACM SIGCOMM IMC, pages 15–21, 2010.

[3] Alexa. http://www.alexa.com/topsites.

[4] H. A. Alzoubi, M. Rabinovich, and O. Spatscheck. The Anatomy of LDNS Clusters: Findings and Implications for Web Content Delivery. In 22d Int. WWW Conf., 2013.

[5] R. Arends. DNS Security Introduction and Requirements, 2005. RFC 4033.

[6] T. Callahan, M. Allman, and M. Rabinovich. On Modern DNS Behavior and Properties. ACM SIGCOMM CCR, 43(3):7–15, 2013.

[7] B. Chun, D. Culler, T. Roscoe, A. Bavier, L. Peterson, M. Wawrzoniak, and M. Bowman. PlanetLab: An Overlay Testbed for Broad-Coverage Services. ACM SIGCOMM CCR, 33(3):3–12, 2003.

[8] D. Dagon, N. Provos, C. Lee, and W. Lee. Corrupted DNS Resolution Paths: The Rise of a Malicious Resolution Authority. In NDSS, 2008.

[9] I. Google. https://developers.google.com/speed/public-dns/docs/performance#loadbalance.

[10] K. Gummadi, S. Saroiu, and S. Gribble. King: Estimating Latency Between Arbitrary Internet End Hosts. In 2nd ACM SIGCOMM Workshop on Internet Measurement, pages 5–18. ACM, 2002.

[11] C. Huang, D. Maltz, J. Li, and A. Greenberg. Public DNS System and Global Traffic Management. In IEEE INFOCOM, pages 2615–2623, 2011.

[12] D. Kaminsky. Black Ops 2008: It’s the End of the Cache As We Know It. Black Hat USA, 2008.

[13] D. Leonard and D. Loguinov. Demystifying Service Discovery: Implementing an Internet-wide Scanner. In 10th ACM IMC, pages 109–122, 2010.

[14] R. Liston, S. Srinivasan, and E. Zegura. Diversity in DNS Performance Measures. In 2nd ACM SIGCOMM Workshop on Internet Measurement, pages 19–31. ACM, 2002.

[15] Z. M. Mao, C. D. Cranor, F. Douglis, M. Rabinovich, O. Spatscheck, and J. Wang. A Precise and Efficient Evaluation of the Proximity Between Web Clients and Their Local DNS Servers. In USENIX ATC, pages 229–242, 2002.

[16] Geoip. maxmind llc, 2012.

[17] J. Pang, A. Akella, A. Shaikh, B. Krishnamurthy, and S. Seshan. On the Responsiveness of DNS-based Network Control. In 4th ACM SIGCOMM IMC, pages 21–26, 2004.

[18] M. Rajab, F. Monrose, A. Terzis, and N. Provos. Peeking Through the Cloud: DNS-based Estimation and its Applications. In Applied Cryptography and Network Security, pages 21–38. Springer, 2008.

[19] K. Schomp, T. Callahan, M. Rabinovich, and M. Allman. Client-Side DNS Infrastructure Dataset, Oct. 2013. http://dns-scans.eecs.cwru.edu/.

[20] A. Shaikh, R. Tewari, and M. Agrawal. On the Effectiveness of DNS-based Server Selection. In INFOCOM, pages 1801–1810, 2001.

[21] C. Shue, A. Kalafut, M. Allman, and C. Taylor. On Building Inexpensive Network Capabilities. ACM SIGCOMM CCR, 42(2), Apr. 2012.

[22] G. Sisson. DNS Survey: October 2010. http://dns.measurement-factory.com/surveys/201010/, 2010.

[23] C. E. Wills, M. Mikhailov, and H. Shang. Inferring Relative Popularity of Internet Applications by Actively Querying DNS Caches. In 3rd ACM SIGCOMM IMC, pages 78–90, 2003.