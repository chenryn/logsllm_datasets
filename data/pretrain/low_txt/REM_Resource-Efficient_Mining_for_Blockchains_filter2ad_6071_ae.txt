### Introduction

The ability of miners to simultaneously mine on multiple blockchains is a problem that He et al. [59] addressed with a scheme we refer to as Lazy-PoET. However, our analysis reveals that even Lazy-PoET suffers from what we term the "stale-chip problem." Miners find it more advantageous to maintain farms of cheap, outdated CPUs for mining rather than using newer, more capable CPUs for other useful tasks.

### Proposed Solutions

We propose an alternative approach where operators can utilize their CPUs for both mining and other productive tasks, making newer CPUs more attractive due to the additional revenue from the useful work performed. We call this scheme Busy PoET. Our findings indicate that while Busy PoET improves upon Lazy PoET, it still remains highly wasteful.

This observation leads us to another approach, Proof of Potential Work (PoPW). PoPW is similar to Busy-PoET but reduces mining time based on the CPU's speed (its potential to perform work), thereby incentivizing the use of newer CPUs. Although PoPW would significantly reduce waste, the current limitations of SGX, which do not allow an enclave to securely retrieve its CPU model, make PoPW only theoretical at this stage.

Our analysis concludes that Proof of Useful Work (PoUW) incurs the smallest amount of waste among the options under study. For a detailed explanation of our model, parameter choices, and analyses of the various mining schemes, we refer the reader to the full version [76].

### Related Work

#### Proof-of-Work (PoW) Systems
Proof-of-Work (PoW) systems [12, 29, 46] have been widely studied, along with techniques to reduce their associated waste. An approach similar to PoET [41], possibly originating with Dryja [27], is to limit power waste through so-called Proof-of-Idle. In this scheme, miners buy mining equipment and get paid for proving that their equipment remains idle. However, this approach faces technical challenges, and an operator with a set budget could redirect savings from power to purchase more idle machines, leading to capital waste.

Alternative approaches, such as PoUW, aim to make PoW produce work useful for a secondary goal. Permacoin [58] repurposes mining resources as a distributed storage network, but recycles only a small fraction of mining resources. Primecoin [49] is an active cryptocurrency whose "useful outputs" are Cunningham and Bi-twin chains of prime numbers, which have no known utility. Gridcoin [36, 35], an active cryptocurrency, allows miners to work for the BOINC [9] grid-computing network but relies on a central entity. FoldingCoin [65] rewards participants for work on a protein folding problem but operates as a layer atop, not integrated with, Bitcoin.

#### Proof-of-Stake (PoS)
Proof-of-Stake (PoS) [71, 14, 48, 16] is a distinct approach where miners gain the right to generate blocks by committing cryptocurrency funds. It is used in experimental systems such as Peercoin [50] and Nxt [23]. Unlike PoW, in PoS, an attacker who gains majority control of mining resources for a bounded time can control the system forever. PoS protocols also require that funds used as stake remain frozen (and unusable) for some time. To address these issues, Bentov et al. [15] and Duong et al. [28] propose hybrid PoW/PoS systems. These works, and the line of hybrid blockchain systems starting with Bitcoin-NG [32, 51, 63], can all utilize PoUW as a low-waste alternative to PoW.

#### Resistance to Dedicated Hardware
Another line of work on PoW for cryptocurrencies aims to resist mining on dedicated hardware and prevent the concentration of mining power, e.g., via memory-intensive hashing as in Scrypt [54] and Ethereum [19]. Although democratization of mining power is not our primary focus, PoUW achieves this goal by restricting mining to general-use CPUs.

### SGX and Security Concerns
Due to the complexity of the x86-64 architecture, several works [24, 70, 73] have exposed security problems in SGX, such as side-channel attacks [73]. Tramer et al. [70] consider the utility of SGX if its confidentiality guarantees are broken. Similar practical concerns motivate REM’s tolerance mechanism for compromised SGX chips.

### Frameworks and Implementations
Ryoan [38] is a framework that allows a server to run code on private client data and return the output to the client. The (trusted) Ryoan service instruments the server operator’s code to prevent leakage of client data. In contrast, in REM, the useful-workload code is instrumented in an untrusted environment, and an attestation of its validity is produced within a trusted environment.

Haven [13] runs non-SGX applications by incorporating a library OS into the enclave. REM, in contrast, takes code amenable to SGX compilation and enforces correct instrumentation. In principle, Haven could allow for non-SGX code to be adapted for PoUW.

Zhang et al. [75] and Juels et al. [47] are the first works we are aware of to pair SGX with cryptocurrencies. Their aim is to augment the functionality of smart contracts, however, and is unrelated to the underlying blockchain layer in which REM operates.

### Conclusion

We presented REM, which supports permissionless blockchain consensus based on a novel mechanism called Proof of Useful Work (PoUW). PoUW leverages Intel SGX to significantly reduce the waste associated with Proof of Work (PoW) and builds on and remedies shortcomings in Intel’s innovative PoET scheme. PoUW and REM are thus a promising basis for partially-decentralized blockchains, reducing waste given certain trust assumptions in a hardware vendor such as Intel.

Using a rigorous analytic framework, we have shown how REM can achieve resilience against compromised nodes with minimal waste (rejected honest blocks). This framework extends to PoET and potentially other SGX-based mining approaches.

Our implementation of REM introduces powerful new techniques for SGX applications, namely instruction-counting instrumentation and hierarchical attestation, which are of potential interest beyond REM itself. They allow REM to accommodate essentially any desired workloads, permitting flexible adaptation in a variety of settings.

Our framework for economic analysis offers a general means for assessing the true utility of mining schemes, including PoW and partially-decentralized alternatives. Beyond illustrating the benefits of PoUW and REM, it allowed us to expose risks of approaches such as PoET in the use of stale chips and propose improved variants, including Proof of Potential Work (PoPW). We found that small changes to the TEE framework would be significant for reduced-waste blockchain mining. In particular, allowing for secure instruction (or cycle) counting would reduce PoUW overhead, and a secure chip-model reading instruction would enable PoPW implementation.

We reported on a complete implementation of REM, swapped in for the consensus layer in Bitcoin core in a prototype system. Our experiments showed minimal performance impact (5-15%) on example benchmarks. In summary, our results show that REM is practically deployable and a promising path to fair and environmentally friendly blockchains in partially-decentralized blockchains.

### Acknowledgements

This work is funded in part by NSF grants CNS-1330599, CNS-1514163, CNS-1564102, CNS-1601879, CNS-1544613, and No. 1561209, ARO grant W911NF-16-1-0145, ONR grant N00014-16-1-2726, and IC3 sponsorship from Chain, IBM, and Intel.

### References

[1] A Genetic Algorithm for Predicting Protein Folding in the 2D HP Model. https://github.com/alican/GeneticAlgorithm. Accessed: 2016-11-11.
[2] A Lossless, High Performance Implementation of the Zlib (RFC 1950) and Deﬂate (RFC 1951) Algorithm. https://code.google.com/archive/p/miniz/. Accessed: 2017-2-16.
[3] Attestation Service for Intel Software Guard Extensions (Intel SGX): API Documentation. Revision 2.0. Section 4.2.2. https://software.intel.com/sites/default/files/managed/7e/3b/ias-api-spec.pdf. Accessed: 2017-2-21.
[4] Intel(R) Software Guard Extensions for Linux OS. https://github.com/01org/linux-sgx. Accessed: 2017-2-16.
[5] Intel Software Guide. Guard Extensions Enclave Writer’s Guide. https://software.intel.com/sites/default/files/managed/ae/48/Software-Guard-Extensions-Enclave-Writers-Guide.pdf. Accessed: 2017-2-16.
[6] Sawtooth-core source code (validator). https://github.com/hyperledger/sawtooth-core/tree/0-7/validator/sawtooth_validator/consensus/poet1. Accessed: 2017-2-21.
[7] Single-file C implementation of the SHA-3 implementation with Init/Update/Finalize hashing (NIST FIPS 202). https://github.com/brainhub/SHA3IUF. Accessed: 2017-2-16.
[8] ANATI, I., GUERON, S., JOHNSON, S., AND SCARLATA, V. Innovative technology for CPU based attestation and sealing. In Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy (2013), vol. 13.
[9] ANDERSON, D. P. Boinc: A system for public-resource computing and storage. In Grid Computing, 2004. Proceedings. Fifth IEEE/ACM International Workshop on (2004), IEEE, pp. 4–10.
[10] ASPNES, J., JACKSON, C., AND KRISHNAMURTHY, A. Exposing computationally-challenged Byzantine impostors. Department of Computer Science, Yale University, New Haven, CT, Tech. Rep (2005).
[11] AZURE, M. Blockchain as a service. https://web.archive.org/web/20161027013817/https://azure.microsoft.com/en-us/solutions/blockchain/, 2016.
[12] BACK, A. Hashcash – a denial of service counter-measure. http://www.cypherspace.org/hashcash/hashcash.pdf, 2002.
[13] BAUMANN, A., PEINADO, M., AND HUNT, G. Shielding applications from an untrusted cloud with Haven. ACM Trans. Comput. Syst. 33, 3 (Aug. 2015), 8:1–8:26.
[33] EYAL, I., AND SIRER, E. G. Majority is not enough: Bitcoin mining is vulnerable. In Financial Cryptography and Data Security (2014).
[14] BENTOV, I., GABIZON, A., AND MIZRAHI, A. Cryptocurrencies without proof of work. CoRR abs/1406.5694 (2014).
[15] BENTOV, I., LEE, C., MIZRAHI, A., AND ROSENFELD, M. Proof of activity: Extending Bitcoin’s proof of work via proof of stake. Cryptology ePrint Archive, Report 2014/452, 2014. http://eprint.iacr.org/2014/452.
[16] BENTOV, I., PASS, R., AND SHI, E. Snow White: Provably secure proofs of stake. Cryptology ePrint Archive, Report 2016/919, 2016. http://eprint.iacr.org/2016/919.
[17] BITCOIN COMMUNITY. Bitcoin source. https://github.com/bitcoin/bitcoin, retrieved Nov. 2016.
[18] BITCOIN COMMUNITY. Bitcoin source. https://github.com/bitcoin/bitcoin, retrieved Mar. 2015.
[19] BUTERIN, V. A next generation smart contract & decentralized application platform. https://www.ethereum.org/pdfs/EthereumWhitePaper.pdf/, retrieved Feb. 2015, 2013.
[20] CACHIN, C. Architecture of the Hyperledger blockchain fabric. In Workshop on Distributed Cryptocurrencies and Consensus Ledgers (2016).
[21] CARLSTEN, M., KALODNER, H., WEINBERG, S. M., AND NARAYANAN, A. On the instability of Bitcoin without the block reward. In ACM CCS (2016).
[22] CHANG, C.-C., AND LIN, C.-J. LIBSVM: A library for support vector machines. ACM Transactions on Intelligent Systems and Technology 2 (2011), 27:1–27:27. Software available at http://www.csie.ntu.edu.tw/~cjlin/libsvm.
[23] COMMUNITY, T. N. Nxt whitepaper, revision 4. https://web.archive.org/web/20160207083400/https://www.dropbox.com/s/cbuwrorf672c0yy/NxtWhitepaper_v122_rev4.pdf, 2014.
[24] COSTAN, V., AND DEVADAS, S. Intel SGX Explained. Cryptology ePrint Archive (2016).
[25] DEETMAN, S. Bitcoin could consume as much electricity as Denmark by 2020. http://tinyurl.com/yc4r9k3k, Mar. 2016.
[26] DONOVAN, A., MUTH, R., CHEN, B., AND SEHR, D. PNacls: Portable native client executables.
[27] DRYJA, T. Optimal mining strategies. SF Bitcoin-Devs presentation. https://www.youtube.com/watch?v=QN2TPeQ9mnA, 2014.
[28] DUONG, T., FAN, L., VEALE, T., AND ZHOU, H.-S. Securing Bitcoin-like backbone protocols against a malicious majority of computing power. Cryptology ePrint Archive, Report 2016/716, 2016. http://eprint.iacr.org/2016/716.
[29] DWORK, C., AND NAOR, M. Pricing via processing or combatting junk mail. In Annual International Cryptology Conference (1992), Springer, pp. 139–147.
[30] DWYER, J. P., AND HINES, P. Beyond the byzz: Exploring distributed ledger technology use cases in capital markets and corporate banking. Tech. rep., Celent and MISYS, 2016.
[31] EYAL, I. The miner’s dilemma. In IEEE Symposium on Security and Privacy (2015), pp. 89–103.
[32] EYAL, I., GENCER, A. E., SIRER, E. G., AND VAN RENESSE, R. Bitcoin-ng: A scalable blockchain protocol. In 13th USENIX Symposium on Networked Systems Design and Implementation (NSDI 16) (2016), pp. 45–59.
[34] GARAY, J. A., KIAYIAS, A., AND LEONARDOS, N. The Bitcoin backbone protocol: Analysis and applications. In Advances in Cryptology - EUROCRYPT 2015 - 34th Annual International Conference on the Theory and Applications of Cryptographic Techniques (2015), pp. 281–310.
[35] GRIDCOIN. Gridcoin. https://web.archive.org/web/20161013081149/http://www.gridcoin.us/, 2016.
[36] GRIDCOIN. Gridcoin (grc) – first coin utilizing boinc – official thread. https://web.archive.org/web/20160909032618/https://bitcointalk.org/index.php?topic=324118.0, 2016.
[37] HOEKSTRA, M., LAL, R., PAPPACHAN, P., PHEGADE, V., AND DEL CUVILLO, J. Using innovative instructions to create trustworthy software solutions. In Proceedings of the 2Nd International Workshop on Hardware and Architectural Support for Security and Privacy (New York, NY, USA, 2013), HASP ’13, ACM, pp. 11:1–11:1.
[38] HUNT, T., ZHU, Z., XU, Y., PETER, S., AND WITCHEL, E. Ryoan: A distributed sandbox for untrusted computation on secret data. In 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI 16) (GA, Nov. 2016), USENIX Association, pp. 533–549.
[39] INTEL. Intel Software Guard Extensions Programming Reference, 2014.
[40] INTEL. Intel 64 and IA-32 Architectures Software Developer’s Manual: Volume 3 (3A, 3B, 3C & 3D): System Programming Guide, 325384-059us ed., June 2016.
[41] INTEL. Sawtooth lake – introduction. https://web.archive.org/web/20161025232205/https://intelledger.github.io/introduction.html, 2016.
[42] INTEL CORPORATION. Intel® Software Guard Extensions SDK. https://software.intel.com/en-us/sgx-sdk, 2015.
[43] INTEL CORPORATION. Intel SGX for Linux. https://01.org/intel-softwareguard-extensions, 2016.
[44] INTEL CORPORATION. Intel Software Guard Extensions: Intel Attestation Service API. https://software.intel.com/sites/default/files/managed/3d/c8/IAS_1_0_API_spec_1_1_Final.pdf, 2016.
[45] INTEL CORPORATION. Intel Attestation Service Public Key for Intel Corporation. https://software.intel.com/en-us/sgx/resource-library, 2016.
[46] JAKOBSSON, M., AND JUELS, A. Proofs of work and bread pudding protocols. In Secure Information Networks. Springer, 1999, pp. 258–272.
[47] JUELS, A., KOSBA, A., AND SHI, E. The Ring of Gyges: Investigating the future of criminal smart contracts. In ACM CCS (2016), pp. 283–295.
[48] KIAYIAS, A., KONSTANTINOU, I., RUSSELL, A., DAVID, B., AND OLIYNYKOV, R. A provably secure proof-of-stake blockchain protocol. Cryptology ePrint Archive, Report 2016/889, 2016. http://eprint.iacr.org/2016/889.
[49] KING, S. Primecoin: Cryptocurrency with prime number proof-of-work. https://web.archive.org/web/20160307052339/http://primecoin.org/static/primecoin-paper.pdf, 2013.
[50] KING, S., AND NADAL, S. Peercoin: A crypto-currency with peer proof-of-stake. https://web.archive.org/web/20161025145347/https://peercoin.net/assets/paper/peercoin-paper.pdf, 2012.