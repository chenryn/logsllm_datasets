### Reducing Duplicate Exploration

These heuristics, while helpful, still only achieve a coverage of approximately 33%. SmartDroid [31] combines static and dynamic analysis to identify UI elements linked to sensitive APIs. Unlike Brahmastra, SmartDroid explores every UI element at runtime to determine the correct view to click. A3E [14] also employs static analysis to construct an activity transition graph, which is then used to efficiently explore applications. We utilized this technique in building execution paths. However, similar to the aforementioned tools, A3E relies on runtime GUI exploration to navigate through activities. In contrast, Brahmastra uses static analysis to determine execution paths and rewrites the app to trigger planned navigation, thereby circumventing known challenges associated with GUI exploration.

### Security Analysis of In-App Ads

The recent update to COPPA [6] to include mobile apps has prompted increased scrutiny of COPPA compliance in advertisements and their corresponding landing pages within children's apps. While there is limited prior work in this area, several studies have investigated security and privacy issues related to Android advertising libraries. AdRisk [22] is a static analysis tool that examines integrated advertising libraries and reports that many collect excessive privacy-sensitive information, often exposing it to advertisers. Stevens et al. [28] examined thirteen popular Android ad libraries and found widespread use of tracking identifiers and the collection of private user data. Furthermore, Book et al. [18] conducted a longitudinal study showing that the use of permissions by Android ad libraries has increased over the years.

### Analyzing Logic Flaws in Web Services and SDKs

The authentication vulnerability discussed in §8 falls under the category of logic flaws in web programming. Recent research has proposed various techniques for testing such flaws [16, 17, 21]. However, these methods primarily target two-party web programs, consisting of a client and a server. Logic flaws become more complex in multi-party web programs, where a client interacts with multiple servers to complete a task, such as Facebook-based authentication. AuthScan [15] is a recent technique that automatically extracts protocol specifications from concrete website implementations to discover new vulnerabilities. In contrast, our goal is not to discover new vulnerabilities but to scale up the testing of known vulnerabilities across a large number of apps.

### Discussion

#### Limitations

While Brahmastra improves test hit rates over Monkey-like tools, we encountered several unique behaviors in mobile apps that challenge runtime testing. Some apps check for server updates upon launch and force upgrades if newer versions are available. Others constantly load content from remote servers, leading to transient behaviors (e.g., extreme slowness). Additionally, we have yet to implement callbacks related to sensor inputs. Another challenge is isolating dependent components in the code. We assume that each activity is largely independent (except for passing parameters via intents) and use our jump start technique to bypass blocking pages and speed up testing. However, statically determining dependent activities to jump-start without affecting program behavior remains a future task.

#### Other Runtime Security Testing of Mobile Apps

Given that mobile apps are heavily driven by user interaction with visual components, it is crucial to analyze code behavior in conjunction with runtime UI states. For example, malicious third-party components can trick users into authorizing access to content (e.g., photos) they intended to share with the application. Brahmastra can capture visual elements when certain APIs are invoked to detect such click-jacking attempts. It can also automate testing to ensure that privacy-sensitive APIs are only invoked with explicit user interactions.

### Conclusion

We have presented Brahmastra, a mobile app automation tool that app store operators and security researchers can use to test third-party components at runtime. To overcome the limitations of GUI exploration techniques, Brahmastra analyzes application structure to discover desired execution paths and rewrites test apps to follow a short path that invokes the target third-party component. This approach more than doubles the test hit rate and speeds up testing by a factor of seven compared to state-of-the-art Monkey tools.

We applied Brahmastra to two case studies: checking COPPA compliance of in-app ads in children's apps and verifying the security of apps using Facebook Login. Among the 220 children's apps tested, 36% displayed ads deemed inappropriate for children, and 80% displayed ads that directed to landing pages attempting to collect personal information without parental consent. Among the apps using Facebook Login, 13 were found to be vulnerable to a known security flaw, even though the issue had been known for almost a year. Brahmastra enabled us to quickly test the behavior of hundreds of apps and can be easily adapted for other studies, such as checking for unauthorized invocations of privacy-sensitive APIs and detecting UI elements involved in click-jacking attempts.

### Acknowledgments

This research was supported in part by DARPA under agreement number FA8750-12-2-0107, NSF CCF-1139021, and the University of Maryland Partnership with the Laboratory of Telecommunications Sciences, Contract Number H9823013D00560002. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes, notwithstanding any copyright notation.

### References

[1] A tool for reverse engineering Android apk files. http://code.google.com/p/android-apktool/

[2] Activity — Android Developers. http://developer.android.com/reference/android/app/Activity.html

[3] Amazon Mechanical Turk. https://www.mturk.com

[4] Android Debug Bridge. http://developer.android.com/tools/help/adb.html

[5] Android Developers, UI/Application Developer’s Exerciser Monkey. http://developer.android.com/tools/help/monkey.html

[6] Complying with COPPA: Frequently Asked Questions. http://business.ftc.gov/documents/Complying-with-COPPA-Frequently-Asked-Questions

[7] Dexpler: A Dalvik to Soot Jimple Translator. http://www.abartel.net/dexpler/

[8] Fiddler. http://www.telerik.com/fiddler

[9] Web of Trust. https://www.mywot.com/

[10] Self-Regulatory Program for Children's Advertising, 2009. http://www.caru.org/guidelines/guidelines.pdf

[11] AppBrain, Feb. 2014. http://www.appbrain.com/stats/libraries/ad

[12] A. V. Aho, R. Sethi, and J. D. Ullman. Compilers: Principles, Techniques and Tools. Addison-Wesley, 1986.

[13] D. Amalfitano, A. R. Fasolino, S. D. Carmine, A. Memon, and P. Tramontana. Using GUI Ripping for Automated Testing of Android Applications. In Proceedings of the IEEE Conference on Automated Software Engineering (ASE), 2012.

[14] T. Azim and I. Neamtiu. Targeted and depth-first exploration for systematic testing of Android apps. In OOPSLA, 2013.

[15] G. Bai, J. Lei, G. Meng, S. S. V. P. Saxena, J. Sun, Y. Liu, and J. S. Dong. Authscan: Automatic extraction of web authentication protocols from implementations. In NDSS, 2013.

[16] P. Bisht, T. Hinrichs, N. Skrupsky, R. Bobrowicz, and V. N. Venkatakrishnan. Notamper: Automatically detecting parameter tampering vulnerabilities in web applications. In CCS, 2010.

[17] P. Bisht, T. Hinrichs, N. Skrupsky, and V. N. Venkatakrishnan. Waptec: Whitebox analysis of web applications for parameter tampering exploit construction. In CCS, 2011.

[18] T. Book, A. Pridgen, and D. S. Wallach. Longitudinal analysis of Android ad library permissions. In IEEE Mobile Security Technologies (MoST), 2013.

[19] J. Dean, D. Grove, and C. Chambers. Optimization of Object-Oriented Programs Using Static Class Hierarchy Analysis. In Proceedings of the 9th European Conference on Object-Oriented Programming, pages 77–101, 1995.

[20] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel. An Empirical Study of Cryptographic Misuse in Android Applications. In CCS, 2013.

[21] V. Felmetsger, L. Cavedon, C. Kruegel, and G. Vigna. Toward automated detection of logic vulnerabilities in web applications. In USENIX Security, 2010.

[22] M. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi. Unsafe Exposure Analysis of Mobile In-App Advertisements. In WiSec, 2012.

[23] S. Hao, B. Liu, S. Nath, W. G. Halfond, and R. Govindan. PUMA: Programmable UI-Automation for Large Scale Dynamic Analysis of Mobile Apps. In Mobisys, 2014.

[24] J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy, J. S. Foster, and T. Millstein. Dr. Android and Mr. Hide: Fine-grained Permissions in Android Applications. In ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices, 2012.

[25] B. Liu, S. Nath, R. Govindan, and J. Liu. DECAF: Detecting and Characterizing Ad Fraud in Mobile Apps. In USENIX NSDI, 2014.

[26] V. Rastogi, Y. Chen, and W. Enck. Appsplayground: Automatic security analysis of smartphone applications. In Proceedings of the ACM Conference on Data and Application Security and Privacy, 2013.

[27] L. Ravindranath, S. Nath, J. Padhye, and H. Balakrishnan. Automatic and Scalable Fault Detection for Mobile Applications. In Mobisys, 2014.

[28] R. Stevens, C. Gibler, J. Crussell, J. Erickson, and H. Chen. Investigating user privacy in Android ad libraries. In IEEE Mobile Security Technologies (MoST), 2012.

[29] R. Valle-Rai, P. Co, E. Gagnon, L. J. Hendren, P. Lam, and V. Sundaresan. Soot - a Java bytecode optimization framework. In IBM Centre for Advanced Studies Conference, 1999.

[30] R. Wang, Y. Zhou, S. Chen, S. Qadeer, D. Evans, and Y. Gurevich. Explicating SDKs: Uncovering Assumptions Underlying Secure Authentication and Authorization. In USENIX Security, 2013.

[31] C. Zheng, S. Zhu, S. Dai, G. Gu, X. Gong, X. Han, and W. Zou. Smartdroid: An automatic system for revealing UI-based trigger conditions in Android applications. In ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices, 2012.

### Appendix

#### Constant Propagation Analysis

We extend the existing constant propagation analysis to trace intents, UI elements, and listeners. In addition to traditional value types like numerical or string constants, we introduce meta-class, object, and intent sorts to track class IDs, object references, and intent instances, respectively. For instructions that create objects, load class IDs, or invoke special APIs such as `Intent.setClass()`, we add their semantics to the data-flow transfer function.

Figure 12 illustrates how we extend the data-flow lattice, conform to the meet operation property, and define the semantics of relevant instructions.

```ocaml
type lattice =
  | Clazz of string (* const-class *)
  | Object of string (* instance *)
  | Intent of string (* Intent *)

let meet l1 l2 = match l1, l2 with
  | Clazz c1, Clazz c2 when String.compare c1 c2 = 0 -> l1
  | Object o1, Object o2 when String.compare o1 o2 = 0 -> l1
  | Intent i1, Intent i2 when String.compare i1 i2 = 0 -> l1
  | _ -> (* default case *) ...

let transfer (inn: lattice Map.t) (op, opr) = 
  if op = OP_NEW then
    let dst :: id :: [] = opr in
    let cname = Dex.get ty name id in
    if String.compare cname "Intent" = 0 then
      Map.add dst (Intent "") inn
    else
      Map.add dst (Object cname) inn
  else
    (* other cases *)
```

Figure 12: Abbreviated source code of extended constant propagation analysis. Meta-class, object, and intent sorts maintain information as strings and can be merged only if internal values are identical, ensuring must-analysis. This example shows how to handle the `NEW` opcode.

### Examples of Ads in Kids Apps

Figures 13(a) and 13(b) show ads offering free prizes, while Figures 13(c) and 13(d) display sexually suggestive content. Figure 13(e) illustrates a scenario where clicking a banner ad in a kids app leads to a landing page that collects personal information.

Figure 14: A screenshot of the Amazon Mechanical Turk task created to characterize landing pages pointed to by ads in kids apps.