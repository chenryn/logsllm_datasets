### Permitted by Browserâ€™s Same-Origin Policy

The attacker's payload and the gadget's iframe principal are identical, which is permitted by the browser's same-origin policy.

### Google/iGoogle Security Design

Google/iGoogle is designed such that each iGoogle gadget operates as a separate security principal, hosted at a subdomain of `http://gmodules.com`. This design mitigates the risk of an attacker who compromises one gadget from gaining access to sensitive data on the `google.com` domain. In the past, Barth et al. described a related attack called "gadget hijacking," where attackers could steal sensitive data by navigating the gadget frame to a malicious site [7]. They proposed new browser frame navigation policies to prevent such attacks. Gadget overwriting attacks, resulting from CSV vulnerabilities in vulnerable gadgets, can also allow attackers to achieve similar objectives, which were addressed by the defenses proposed by Barth et al. [7].

### Gadget Overwriting Attack Example

**Figure 11.** A gadget overwriting attack layered on a CSV vulnerability. The user clicks on an untrusted link, which displays the iGoogle web page with an overwritten iGoogle gadget. The URL bar continues to show the iGoogle web page.

### Cookie-Sink Vulnerabilities

FLAX reported a cookie corruption vulnerability in one of AskAWord's iGoogle gadgets, which provides the AskAWord.com dictionary and spell checker service. FLAX noted that the cookie data could be corrupted with arbitrary data, and additional cookie attributes could be injected, classifying it as a low-severity vulnerability. However, further analysis revealed that the gadget used the cookie to store the user's history of previous searches, which was echoed back in the server's HTML response without any client-side or server-side validation. We informed the developers about the cookie attribute injection and the reflected XSS vulnerability through the cookie channel, and they patched the vulnerability on the same day.

### Application Command Injection

One vulnerability reported by FLAX for the AjaxIM chat application indicated that untrusted data from an input text box could be used to inject application commands. AjaxIM uses untrusted data to construct a URL that directs application-specific commands to its backend server using XMLHttpRequest. These commands include adding/deleting chat rooms, adding/deleting friends, and changing the user's profile. FLAX discovered a vulnerability where unsanitized input from an input-box is used to construct the URL that sends a GET request command to join a chat room. An attacker can exploit this by injecting new parameters (key-value pairs) into the URL. For example, a benign command request URL to join a chat room named 'friends' in AjaxIM is `ajaxim.php?call=joinroom&room=friends`. By providing a room name as `friends&call=addbuddy&buddy=evil`, the value of the `call` command is overridden from `joinroom` to a command that adds an untrusted user (called "evil") to the victim's friend list. The severity of this vulnerability is limited, as it does not allow a remote attacker to exploit the bug without additional social engineering. However, we informed the developers, and they acknowledged the concern, agreeing to fix the vulnerability.

### Related Work

#### Server-Side Vulnerabilities

XSS, SQL injection, directory traversal, cross-site request forgery, and command injection have been the most significant web vulnerabilities in recent years [36]. Techniques including static analyses [22, 24], model checking [28], mixed static-dynamic analyses [4], and decision procedure-based automated analyses [21, 25] have been developed for server-side applications written in PHP and Java. Among these, only a few works have aimed to precisely analyze custom validation routines. Balzarotti et al. identified that the use of custom sanitization could be a significant source of both false positives and negatives for analysis tools in their work on Saner [4]. Their approach used static techniques for reasoning about multiple paths effectively but was limited to a subset of string functions and ignored validation checks that manifest as conditional constraints on the execution path. Although an area of active research, more recent string decision procedures do not yet support the full generality of constraints observed in JavaScript subject applications [9, 21, 25].

#### Dynamic Taint Analysis Approaches

Vogt et al. developed taint-analysis techniques for JavaScript to study confidentiality attacks resulting from XSS vulnerabilities [39]. Our taint-tracking techniques are character-level precise and accurately model the semantics of string operations, which is required in our application domain. Purely dynamic taint-based approaches have been used for runtime defense against web attacks [18, 29, 32, 35, 37, 38, 43]. However, applying these to discover attacks is difficult because reasoning about validation checks is crucial for precision. Tools like PHPTaint [38] approximate this by implicitly clearing the taint when data is sanitized using a built-in sanitization routine.

#### Directed Random Testing

Our taint-enhanced blackbox fuzzing technique shares some benefits with taint-based directed whitebox fuzzing [15]. Both techniques use taint information to narrow down the space of relevant inputs; however, our technique uses knowledge of the sink to perform a directed black-box analysis for the vulnerability, as opposed to their white-box analysis. Techniques developed in this paper are related to dynamic symbolic execution-based approaches [11, 12, 16, 21], which use decision procedures to explore the program space of the application. As discussed earlier, automated decision procedures for the theory of strings do not support the expressiveness to directly solve practical constraints observed in real JavaScript applications. In comparison, our taint-enhanced blackbox fuzzing algorithm is a lighter-weight mechanism that efficiently combines the benefits of taint-based analyses with randomized testing to overcome the limitations of decision-procedure-based tools.

#### JavaScript Analysis Frameworks

Several works have recently applied static analysis to JavaScript applications [14, 17]. In contrast, we demonstrate the practical effectiveness of a complementary dynamic analysis technique and explain the benefits of our analyses over their static counterparts. GateKeeper enforces a different set of policies using static techniques, which may lead to false positives. Recent frameworks for dynamic analyses [44] have been proposed for source-level instrumentation for JavaScript, but source-level transformations are much harder to reason about in practice due to the complexity of the JavaScript language.

#### Browser Vulnerabilities

CSV vulnerabilities are related to, but significantly different from, browser vulnerabilities [5, 7, 13, 41]. Research on these vulnerabilities has largely focused on better designs of interfaces that could be used securely by mutually untrusted principals. In this paper, we showed how web application developers use these abstractions, such as inter-frame communication interfaces, in an insecure way.

### Conclusion

This paper presents a new class of vulnerabilities, which we call CSV vulnerabilities. We proposed a hybrid approach to automatically test JavaScript applications for the presence of these vulnerabilities. We implemented our approach in a prototype tool called FLAX. FLAX has discovered several real-world bugs, suggesting that such tools are valuable resources for security analysts and developers of rich web applications today. Results from running FLAX provide key insights into the prevalence of this class of CSV vulnerabilities with empirical examples, and point out several implicit assumptions and programming errors that JavaScript developers make.

### Acknowledgments

We thank Adam Barth, Stephen McCamant, Adrian Mettler, Joel Weinberger, Matthew Finifter, Devdatta Akhawe, Juan Caballero, and Min Gyung Kang for helpful feedback on the paper at various stages. We are also thankful to our anonymous reviewers for suggesting improvements to our work. This work was done while Pongsin Poosankam was a visiting student researcher at the University of California, Berkeley. This material is based upon work partially supported by the National Science Foundation under Grants No. 0311808, No. 0448452, No. 0627511, and CCF-0424422, by the Air Force Office of Scientific Research under Grant No. 22178970-4170, and by the Army Research Office under Grant No. DAAD19-02-1-0389. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation, the Air Force Office of Scientific Research, or the Army Research Office.

### References

[1] ECMAScript Language Specification, 3rd Edition. http://www.ecma-international.org/publications/standards/Ecma-262.htm.

[2] iGoogle Gadget Directory. http://www.google.com/ig/.

[3] Introducing JSON. http://www.json.org/.

[4] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. Saner: Composing Static and Dynamic Analysis to Validate Sanitization in Web Applications. In Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, May 2008.

[5] A. Barth, J. Caballero, and D. Song. Secure content sniffing for web browsers or how to stop papers from reviewing themselves. In Proceedings of the 30th IEEE Symposium on Security and Privacy, Oakland, CA, May 2009.

[6] A. Barth, C. Jackson, and J. C. Mitchell. Robust defenses for cross-site request forgery. In CCS, 2008.

[7] A. Barth, C. Jackson, and J. C. Mitchell. Securing frame communication in browsers. In Proceedings of the 17th USENIX Security Symposium (USENIX Security 2008), 2008.

[8] P. Bisht and V. N. Venkatakrishnan. XSS-GUARD: precise dynamic prevention of cross-site scripting attacks. In 5th GI International Conference on Detection of Intrusions & Malware, and Vulnerability Assessment, 2008.

[9] N. Bjorner, N. Tillmann, and A. Voronkov. Path feasibility analysis for string-manipulating programs. In TACAS â€™09: Proceedings of the 15th International Conference on Tools and Algorithms for the Construction and Analysis of Systems, 2009.

[10] S. W. Boyd and A. D. Keromytis. SQLrand: Preventing SQL injection attacks. In Proceedings of the 2nd Applied Cryptography and Network Security (ACNS) Conference, pages 292â€“302, 2004.

[11] C. Cadar, D. Dunbar, and D. R. Engler. Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs. In OSDI, 2008.

[12] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R. Engler. EXE: Automatically generating inputs of death. In CCS, 2006.

[13] S. Chen, D. Ross, and Y.-M. Wang. An analysis of browser domain-isolation bugs and a light-weight transparent defense mechanism. In Proceedings of the 14th ACM conference on Computer and Communications Security, pages 2â€“11, New York, NY, USA, 2007. ACM.

[14] R. Chugh, J. A. Meister, R. Jhala, and S. Lerner. Staged information flow for JavaScript. In PLDI, 2009.

[15] V. Ganesh, T. Leek, and M. Rinard. Taint-based directed whitebox fuzzing. In Proceedings of the 2009 IEEE 31st International Conference on Software Engineering, 2009.

[16] P. Godefroid, N. Klarlund, and K. Sen. DART: directed automated random testing. In PLDI, 2005.

[17] S. Guarnieri and B. Livshits. Gatekeeper: mostly static enforcement of security and reliability policies for JavaScript code. In Proceedings of the Usenix Security Symposium, Aug. 2009.

[18] M. V. Gundy and H. Chen. Noncespaces: Using randomization to enforce information flow tracking and thwart cross-site scripting attacks. In NDSS, 2009.

[19] R. Hansen. XSS cheat sheet. http://ha.ckers.org/xss.html.

[20] P. Hooimeijer and W. Weimer. A decision procedure for subset constraints over regular languages. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 188â€“198, June 2009.

[21] P. Hooimeijer and W. Weimer. A decision procedure for subset constraints over regular languages. In PLDI, 2009.

[22] Y. Huang, F. Yu, C. Hang, C. Tsai, D. Lee, and S. Kuo. Securing web application code by static analysis and runtime protection. The 13th International Conference on World Wide Web, 2004.

[23] S. Jha, S. A. Seshia, and R. Limaye. On the computational complexity of satisfiability solving for string theories. CoRR, abs/0903.2825, 2009.

[24] N. Jovanovic, C. KrÃ¼gel, and E. Kirda. Pixy: A static analysis tool for detecting web application vulnerabilities (short paper). In IEEE Symposium on Security and Privacy, 2006.

[25] A. Kiezun, V. Ganesh, P. J. Guo, P. Hooimeijer, and M. D. Ernst. HAMPI: A solver for string constraints. In Proceedings of the International Symposium on Software Testing and Analysis, 2009.

[43] W. Xu, S. Bhatkar, and R. Sekar. Taint-enhanced policy enforcement: A practical approach to defeat a wide range of attacks. In Proceedings of the USENIX Security Symposium, 2006.

[44] D. Yu, A. Chander, N. Islam, and I. Serikov. JavaScript instrumentation for browser security. In Proceedings of the ACM SIGPLAN-SIGACT symposium on Principles of programming languages, 2007.

[26] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes: a client-side solution for mitigating cross-site scripting attacks. In Proceedings of the ACM Symposium on Applied Computing, 2006.

[27] A. Klein. DOM-based cross-site scripting or XSS of the third kind. Technical report, Web Application Security Consortium, 2005.

[28] M. Martin and M. S. Lam. Automatic generation of XSS and SQL injection attacks with goal-directed model checking. In 17th USENIX Security Symposium, 2008.

[29] Y. Nadji, P. Saxena, and D. Song. Document structure integrity: A robust basis for cross-site scripting defense. In NDSS, 2009.

[30] S. Nanda, L.-C. Lam, and T. Chiueh. Dynamic multi-process information flow tracking for web application security. In Proceedings of the 8th ACM/IFIP/USENIX international conference on Middleware companion, 2007.

[31] J. Newsome and D. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2005.

[32] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and D. Evans. Automatically hardening web applications using precise tainting. 20th IFIP International Information Security Conference, 2005.

[33] R. Sekar. An efficient black-box technique for defeating web application attacks. In NDSS, 2009.

[34] E. Stinson and J. C. Mitchell. Characterizing botsâ€™ remote control behavior. In Botnet Detection, volume 36, pages 45â€“64. 2008.

[35] Z. Su and G. Wassermann. The essence of command injection attacks in web applications. In Proceedings of the ACM SIGPLAN-SIGACT symposium on Principles of Programming Languages, 2006.

[36] Symantec Corp. Symantec Internet Security Threat Report. Technical report, Apr. 2008.

[37] M. Ter Louw and V. N. Venkatakrishnan. BluePrint: Robust Prevention of Cross-site Scripting Attacks for Existing Browsers. In Proceedings of the IEEE Symposium on Security and Privacy, 2009.

[38] W. Venema. Taint support for PHP. http://wiki.php.net/rfc/taint, 2007.

[39] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. Cross-Site Scripting Prevention with Dynamic Data Tainting and Static Analysis. In Proceeding of the Network and Distributed System Security Symposium (NDSS), Feb. 2007.

[40] W3C. HTML 5 specification. http://www.w3.org/TR/html5/.

[41] H. J. Wang, X. Fan, J. Howell, and C. Jackson. Protection and communication abstractions for web browsers in mashups. In SOSP, 2007.

[42] G. Wassermann, D. Yu, A. Chander, D. Dhurjati, H. Inamura, and Z. Su. Dynamic test input generation for web applications. In ISSTA â€™08: Proceedings of the 2008 international symposium on Software testing and analysis, 2008.