### Optimized Text

#### Voting and View Changes
Consider a replica \( r \) that votes for block \( B_k \) at time \( t - 3\Delta \) and synchronously commits at time \( t \). By this time, no honest replica has entered a higher view. This ensures that all honest replicas receive the chain certificate \( C_v(B_k) \) by time \( t - \Delta \). Any view-change after \( t - \Delta \) will include \( C_v(B_k) \) or a higher-ranked certificate, and honest replicas will lock on a chain certificate \( CC \) such that \( \text{tip}(CC) \) extends \( C_v(B_k) \) before entering a higher view.

#### Safety of Voting with Lower-Ranked Locks
The commit rules in the protocol ensure that there is no equivocating chain certificate \( CC' \) where \( \text{tip}(CC') \) does not extend committed blocks. This means that honest replicas lock on chain certificates that extend the committed blocks. After entering a higher view, honest replicas send their locked chain certificates via status messages. The new leader collects a status certificate \( S \) of \( f + 1 \) status messages and extends the highest-ranked certified block in \( S \). An honest replica sends a status message only after entering a higher view and having locked on a chain certificate that extends committed blocks from the previous view. Since \( S \) contains status from at least one honest replica, the highest-ranked chain certificate \( \text{lock}' \) in \( S \) will extend committed blocks from the previous view. Therefore, it is safe for replicas to unlock a lock with a rank higher than \( \text{lock}' \).

In the new view, due to the status certificate, all honest replicas will vote for the new-view message sent by an honest leader. Subsequently, in the steady state, honest replicas will continue committing new blocks.

#### Safety and Liveness

**Claim 21.** If a block \( B_k \) is committed directly in view \( v \) using the responsive commit rule, then there does not exist a chain certificate \( CC' \) in view \( v \) such that \( CC' > CC \), where \( \text{tip}(CC) \) extends \( B_k \) and a block in \( CC' \) equivocates \( B_k \).

**Proof.** If a replica \( r \) responsively commits a block \( B_k \) in view \( v \), then \( r \) must have received \( \lfloor 3n/4 \rfloor + 1 \) distinct commit messages, of which at least \( \lfloor (n - f)/2 + 1 \rfloor \) are from honest replicas. An honest replica (say, \( r' \)) sends a commit message only if it pre-commits and has not sent a blame message.

Replica \( r' \) can pre-commit in two ways:
1. \( r' \) received \( \lfloor 3n/4 \rfloor + 1 \) votes for \( B_k \) in view \( v \) and pre-committed responsively. This case is identical to the responsive commit rule in Section 4. By Claim 8, an equivocating chain certificate \( CC' \) of rank higher than \( (C_{3/4}^v(B_k), \perp) \) cannot exist in view \( v \).
2. \( r' \) voted for \( B_k \) at time \( t - 2\Delta \) and received no equivocation or blame certificate by time \( t \), and synchronously pre-commits at time \( t \). This case is identical to the synchronous commit rule in Section 4. By Claim 9, there does not exist a block certificate for an equivocating block in view \( v \).

Thus, a chain certificate \( CC' \) with an equivocating block such that \( CC' > CC \) cannot exist in view \( v \).

\(\blacksquare\)

**Claim 22.** If a block \( B_k \) is directly committed in view \( v \) using the synchronous commit rule, then there does not exist a chain certificate \( CC' \) in view \( v \) such that \( CC' > CC \), where \( \text{tip}(CC) \) extends \( B_k \) and a block in \( CC' \) equivocates \( B_k \).

**Proof.** Replica \( r \) synchronously commits a block \( B_k \) when its commit-timer \( \text{commit-timer}_{v,k} \) expires. Replica \( r \) could pre-commit in two ways:
1. \( r \) pre-commits responsively. The responsive pre-commit rule is identical to the responsive commit rule in Section 4. By Claim 8, an equivocating chain certificate \( CC' \) of rank higher than \( (C_{3/4}^v(B_k), \perp) \) cannot exist in view \( v \).
2. \( r \) synchronously pre-commits at time \( t \), i.e., it voted for \( B_k \) at time \( t - 2\Delta \) and received no equivocation or blame certificate by time \( t \). This case is identical to the synchronous commit rule in Section 4. By Claim 9, there does not exist a block certificate for an equivocating block in view \( v \).

Thus, a chain certificate \( CC' \) with an equivocating block cannot exist in view \( v \).

\(\blacksquare\)

**Lemma 23.** If a block \( B_k \) is directly committed in view \( v \), then there does not exist a chain certificate \( CC' \) in view \( v \) such that \( CC' > CC \), where \( \text{tip}(CC) \) extends \( B_k \) and a block in \( CC' \) equivocates \( B_k \).

**Proof.** Follows directly from Claims 21 and 22.

\(\blacksquare\)

**Claim 24.** Let \( B_k \) be a block proposed in view \( v \) using Step 1 in Figure 5. If an honest replica votes for \( B_k \) at time \( t \) in view \( v \) and detects no equivocation or blame certificate at time \( \leq t + 2\Delta \), then:
1. All honest replicas are in view \( v \) at time \( t + \Delta \).
2. All honest replicas vote for \( B_k \) at time \( \leq t + \Delta \).

**Proof.** Suppose an honest replica \( r \) votes for \( B_k \) at time \( t \) in view \( v \) and detects no equivocation or blame certificate by time \( t + 2\Delta \). This implies:
1. \( r \) entered view \( v \) at time \( \leq t \). If \( r \) entered view \( v \) responsively, it must have done so by receiving a responsive quit-view certificate, and thus entered view \( v \) at time \( \leq t + \Delta \). If \( r \) quit the previous view due to \( f + 1 \) blame messages, it must have sent the blame certificate at time \( \leq t - 2\Delta \), which arrives at all honest replicas by time \( \leq t - \Delta \). Due to the \( 2\Delta \) wait after receiving \( f + 1 \)-sized blame certificate, \( r \) must enter view \( v \) at time \( \leq t \). All honest replicas receive the quit-view certificate by time \( \leq t + \Delta \).
2. No honest replica has voted for an equivocating block or received a blame certificate by time \( \leq t + \Delta \); otherwise, \( r \) would have received an equivocation or blame certificate by time \( \leq t + 2\Delta \). Thus, all honest replicas will vote for \( B_k \) by time \( \leq t + \Delta \).

\(\blacksquare\)

**Claim 25.** Let \( B_k \) be a block proposed in view \( v \) using Step 1 in Figure 5. If an honest replica votes for \( B_k \) at time \( t \) in view \( v \) and detects no equivocation or blame certificate at time \( \leq t + 3\Delta \), then:
1. All honest replicas are still in view \( v \) at time \( t + 2\Delta \).
2. All honest replicas receive \( C_v(B_k) \) at time \( \leq t + 2\Delta \).

**Proof.** Suppose an honest replica \( r \) votes for a block \( B_k \) at time \( t \) in view \( v \) and detects no equivocation or blame certificate by time \( t + 3\Delta \). Trivially, \( r \) has not received an equivocation or blame certificate by time \( t + 2\Delta \). By Claim 24 (i), all honest replicas are in view \( v \) at time \( t + \Delta \). No honest replica has quit view \( v \) by time \( t + 2\Delta \); otherwise, \( r \) must receive a blame certificate by time \( t + 3\Delta \), contradicting our hypothesis. Thus, all honest replicas are still in view \( v \) at time \( t + 2\Delta \).

If \( r \) receives no equivocation or blame certificate by time \( \leq t + 3\Delta \), it is easy to see that \( r \) receives no equivocation or blame certificate by time \( t + 2\Delta \). By Claim 24, all honest replicas vote by time \( \leq t + \Delta \). By the synchrony assumption, all honest replicas receive at least \( f + 1 \) votes for \( B_k \), i.e., \( C_v(B_k) \), by time \( \leq t + 2\Delta \).

\(\blacksquare\)

**Claim 26.** If an honest replica directly commits a block \( B_k \) in view \( v \) using the responsive commit rule, then all honest replicas receive a chain certificate \( CC \) before entering view \( v + 1 \) such that \( \text{tip}(CC) \) extends \( B_k \).

**Proof.** We first discuss the case where some replica performs a view-change due to a responsive quit-view certificate, and then discuss a view-change due to a synchronous blame certificate.

Suppose an honest replica \( r \) receives a set \( Q_C^{3/4} \) of \( \lfloor 3n/4 \rfloor + 1 \) commit messages for block \( B_k \) in view \( v \) and responsively commits \( B_k \) at time \( t \). Thus, all honest replicas in \( Q_C^{3/4} \) must have received \( C_v(B_k) \) before sending the commit message. By Claim 21, there does not exist a chain certificate \( CC' \) in view \( v \) such that \( CC' > CC \) where \( \text{tip}(CC) \) extends \( B_k \) and a block in \( CC' \) equivocates \( B_k \).

Consider the quorum \( Q_B^{3/4} \) that made some honest replica \( r' \) enter view \( v + 1 \). \( r' \) receives a responsive quit-view certificate of \( \lfloor 3n/4 \rfloor + 1 \) quit-view messages, each containing a chain certificate when the quit-view message was sent. By quorum intersection, \( Q_C^{3/4} \) and \( Q_B^{3/4} \) must intersect in at least one honest replica. Thus, the intersecting honest replica must include a higher-ranked chain certificate \( CC \) where \( \text{tip}(CC) \) extends \( B_k \) in the quit-view message. This implies any replica that makes a responsive view-change must receive \( CC \) before entering view \( v + 1 \).

For a view-change due to a synchronous blame certificate, observe that any honest replica (say, replica \( u \)) that quits view \( v \) and \( Q_B^{3/4} \) must include a higher-ranked chain certificate \( CC \) where \( \text{tip}(CC) \) extends \( B_k \) in the quit-view message. This implies any replica that makes a synchronous view-change must receive \( CC \) before entering view \( v + 1 \).

\(\blacksquare\)

**Claim 27.** If an honest replica directly commits a block \( B_k \) in view \( v \) using the synchronous commit rule, then all honest replicas receive a chain certificate \( CC \) before entering view \( v + 1 \) such that \( \text{tip}(CC) \) extends \( B_k \).

**Proof.** Suppose an honest replica \( r \) synchronously commits a block \( B_k \) at time \( t \) in view \( v \). Its commit-timer \( \text{commit-timer}_{v,k} \) for \( B_k \) expires at time \( t \) without detecting an equivocation or blame certificate.

Replica \( r \) waits for \( 3\Delta \) before its commit-timer \( \text{commit-timer}_{v,k} \) expires. \( r \) votes for \( B_k \) in view \( v \) at time \( t - 3\Delta \) and detects no equivocation or blame certificate by time \( t \). By Claim 25, all honest replicas are in view \( v \) at time \( t - \Delta \) and receive \( C_v(B_k) \) by time \( t - \Delta \). Thus, all honest replicas receive \( C_v(B_k) \) before entering view \( v + 1 \). This implies all honest replicas have a chain certificate \( CC \) such that \( \text{tip}(CC) \) extends \( B_k \).

\(\blacksquare\)

**Lemma 28.** If an honest replica directly commits a block \( B_k \) in view \( v \), then all honest replicas have \( \text{lock}_{v+1} \) before entering view \( v + 1 \) such that \( \text{tip}(\text{lock}_{v+1}) \) extends \( B_k \).

**Proof.** By Claims 26 and 27, all honest replicas receive a chain certificate \( CC \) such that \( \text{tip}(CC) \) extends \( B_k \). By Lemma 23, there does not exist an equivocating chain certificate \( CC' \) in view \( v \) such that \( CC' > CC \). Since honest replicas lock on the highest-ranked chain certificate, all honest replicas update \( \text{lock}_{v+1} \) to \( CC \) with \( \text{tip}(\text{lock}_{v+1}) \) extending \( B_k \).

\(\blacksquare\)

**Claim 29.** If an honest replica directly commits a block \( B_k \) in view \( v \), the tip of the highest-ranked chain certificate \( CC \) in a view \( v \) status certificate, i.e., \( \text{tip}(CC) \), must extend \( B_k \).

**Proof.** Suppose an honest replica \( r \) commits a block \( B_k \) in view \( v \). By Lemma 28, all honest replicas lock on \( CC \) before entering view \( v + 1 \) such that \( \text{tip}(CC) \) extends \( B_k \). An honest replica sends a status message containing their \( CC \) only after entering view \( v + 1 \). A view \( v \) status certificate contains a set \( S \) of \( f + 1 \) status messages, which includes the status message from at least one honest replica. By Lemma 23, there does not exist a chain certificate \( CC' \) in view \( v \) such that \( CC' > CC \) where \( \text{tip}(CC) \) extends \( B_k \) and a block in \( CC' \) equivocates \( B_k \). Thus, the tip of the highest-ranked chain certificate \( CC \) in \( S \), i.e., \( \text{tip}(CC) \), must extend \( B_k \).

\(\blacksquare\)

**Corollary 30.** If the tip of the highest-ranked chain certificate \( CC \) in a view \( v \) status certificate, i.e., \( \text{tip}(CC) \), does not extend a block \( B_k \), then \( B_k \) has not been committed in view \( v \).

**Lemma 31 (Unique Extensibility).** If an honest replica directly commits a block \( B_k \) in view \( v \), and \( C_{v'}(B_k') \) is a view \( v' > v \) block certificate, then \( B_k' \) extends \( B_k \). Moreover, all honest replicas have \( \text{lock}_{v'} \) such that \( \text{tip}(\text{lock}_{v+1}) \) extends \( B_k \).

**Proof.** The proof is by induction on the view \( v' > v \). For a view \( v' \), we prove that if \( C_{v'}(\text{tip}(\text{lock}')) \) exists, then it must extend \( B_k \). A simple induction then shows that all later block certificates must also extend \( \text{tip}(\text{lock}') \), following directly from the Vote rule in line 2.

For the base case, where \( v' = v + 1 \), the proof that \( C_{v'}(\text{tip}(\text{lock}')) \) extends \( B_k \) follows from Lemma 28 because the only way such a block can be certified is if some honest replica votes for it. However, all honest replicas are locked on a block that extends \( B_k \), and a chain certificate with a higher rank for an equivocating block does not exist. Although honest replicas unlock on their locked chain certificates \( \text{lock}_{v+1} \) and lock on the highest-ranked chain certificate \( \text{lock}' \) in a status certificate \( S \), by Claim 29, \( \text{tip}(\text{lock}') \) must extend \( B_k \). Thus, no honest replica will first vote for a block that does not extend \( B_k \). The second part follows directly from Lemma 28.

Given that the statement is true for all views below \( v' \), the proof that \( C_{v'}(\text{tip}(\text{lock}')) \) extends \( B_k \) follows from the induction hypothesis because the only way such a block can be certified is if some honest replica votes for it. An honest party with a lock \( \text{lock} \) will vote only if \( \text{tip}(\text{lock}_{v'}) \) has a valid block certificate and \( \text{lock} \geq \text{lock}_{v'} \). Due to Lemma 28 and the induction hypothesis on all block certificates of view \( v < v'' < v' \), it must be that \( C_{v'}(\text{tip}(\text{lock})) \) extends \( B_k \).

\(\blacksquare\)

**Safety.** The safety proof remains identical to that of Theorem 14, except Lemmas 23 and 31 need to be invoked.

**Theorem 32 (Liveness).** All honest replicas keep committing new blocks.

**Proof.** In a view, a leader has to propose at least \( p \) blocks that trigger honest replicas' votes within \( (2p + 4)\Delta \) time. As long as the leader proposes at least \( p \) valid blocks, honest replicas will keep voting for the blocks and keep committing the proposed blocks. If the Byzantine leader equivocates or proposes less than \( p \) blocks, a view-change will occur. Eventually, there will be an honest leader due to round-robin leader election.

Next, we show that once the leader is honest, a view-change will not occur, and all honest replicas keep committing new blocks. If a block \( B_k \) has been committed in a previous view, by Lemma 28, all honest replicas have \( \text{lock}_{v+1} \) such that \( \text{tip}(\text{lock}_{v+1}) \) extends \( B_k \). This ensures that all honest replicas will continue to commit new blocks.

\(\blacksquare\)