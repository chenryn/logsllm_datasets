# Securing the Tor Network

**Speaker:** Mike Perry  
**Affiliation:** Riverbed Technology  
**Presented at:** Black Hat USA 2007, Defcon 2007

## About the Speaker
- **Volunteer Tor Developer**
- **Forward and Reverse Engineer**
- **Employed by Riverbed Technology** (Leading manufacturer of WAN accelerators)
  - Achievements:
    - 20-200X improvement in CIFS performance
    - 5-50X improvement in MAPI/Exchange performance
    - Protocol-independent data reduction
    - >90% head-to-head win rate
    - Outselling Cisco accelerators 2:1

## Introduction
### Preaching to the Choir
- **Understanding Consequences:** Many do not yet fully grasp the implications of having their lives and thoughts archived by IP, bought, and sold.
- **Privacy Concerns:** While Google may not be entirely evil, what about ISPs and other search engines?
- **Unexpected Risks:** Information can come back to bite in unexpected ways, such as in divorce cases, lawsuits, or through spam and catalogs.

## What is Tor?
- **Definition:** A volunteer-run relay network designed for privacy, anonymity, and censorship resistance.
- **Functionality:**
  - **Client:** Acts as a SOCKS proxy.
  - **Relays TCP Connections:** Multiplexed on encrypted paths called "circuits."
  - **Circuits:** Routed through three nodes: "Guard," "Relay," and "Exit."

## Tor Routing
### Classes of Attack
- **Passive Attacks:**
  - Packet and connection timing correlation
  - Fingerprinting of traffic/usage patterns
  - Intersection attacks of multiple user attributes
- **Active Attacks:**
  - Lying about bandwidth to get more traffic
  - Failing circuits to bias node selection
  - Modifying application layer traffic at exit

### Position of Attack
- **Internal:**
  - Node operator
  - Can differentiate circuits at guard and relay.
  - Able to differentiate streams per circuit at exit
- **External:**
  - ISP or Echelon-style adversary
  - Assumed to be unable to see inside TLS streams
  - Running Tor as both node and client can mitigate risks

## Security Approaches
### Path Selection Hacks
- **/16 Hack:** No two nodes from the same /16 netmask.
- **Guard Nodes:**
  - Chosen from top 50% uptime and bandwidth
  - Foil repetitive fetch application layer attacks
  - Reduce long-term fingerprinting potential
  - Without rotation, can deter intimidation attacks
  - Typically still rotate, balancing risk over time

### Tor Routers and LiveCDs
- **Examples:** JanusVM, Anonym.OS, xBVM
- **Features:**
  - "Tor up from the floor up"
  - Address application-level attacks to bypass Tor
  - Block UDP
- **Flaw:** Circuit reuse can lead to app correlation

### Improving Speed and Usability
- **Key Component:** Large userbase
- **User Needs:**
  - Speed and ease of use
  - Two-hop proposal (semi-controversial)
  - Intelligent path selection
  - Ensure network balance and reliability

### Centralized Network Scanning
- **Tools:** Snakes on a Tor and TorFlow
- **Functions:**
  - Verify md5 sums of googled URLs
  - Check node reliability and bandwidth
- **Effectiveness:**
  - Works against incompetent and blanket adversaries
  - Found some broken and malicious nodes
  - Vulnerable to detection

### Decentralized Network Scanning
- **Client-based:**
  - Use reliability averages from TorFlow
  - Alert user if guard node fails more than X% circuits
  - Measure observed bandwidth/latency of nodes
- **Node-based:**
  - Gather statistics on average capacity and queue lengths to peers
  - Report major deviations or use as balancing feedback loop

### Balancing Issues
- **Network Unbalance:**
  - Guard node issues (bug #440)
  - Bandwidth clipping
- **Detection:**
  - Top 5% of nodes have room for 7X more capacity
  - Next 10% of nodes have room for 3X more capacity
  - High circuit failure rates that drop off at 50% mark
  - High extend times that drop off at 50% mark

### Scanning Methodology
- **Divide Network:** Into 5-percentile segments (about 80 nodes each)
- **Circuit Scanning:**
  - Build 500 three-hop paths for each range
  - Fetch ~20k file on each path
  - Count failures, track extend times
- **Bandwidth Scanning:**
  - Fetch 512k file 200 times over two-hop paths
  - Average observed bandwidth for each range

### Probability of Existing Tor Usability
- **Unbalanced Guards:**
  - 70% chance of choosing one unbalanced guard
  - 34% chance of 3 unbalanced guards
  - 44% chance of 2/3 bad guards
  - 19% chance of 1/3 bad guards
  - 3% chance of 3/3 usable guards

### Other Load Balancing Factors
- **Exit Policies:** Allowing bittorrent, P2P, SMTP
- **Uptime vs. Low Uptime**
- **Scarce Guard Bandwidth:** Avoid guards for relay choice
- **Directory vs. Node Traffic**
- **Time of Day**
- **Location**

## Securing the Application Layer
- **Threat Model:**
  - No UDP!
  - Unique identifiers are bad
  - Proxy settings must be sacrosanct
  - Location information must not be transmitted
  - Updates are dangerous in a hostile network

### Tor's Web Attack Profile
1. Bypassing proxy settings
2. Correlation of Tor vs. Non-Tor
3. History disclosure
4. Location information
5. Misc anonymity set reduction
6. History records

### Plugin Wall of Shame
- **Flash v9**
- **Quicktime v7.2:** RTSP proxy (does not apply to web streams)
- **Windows Media Player v10.000000.4040:** Has proxy settings but ignores them
- **Adobe Acrobat Reader Plugin v8.1:** Leaks DNS
- **mplayerplug-in**

### Solution: Improved TorButton
- **Features:**
  - Disable plugins while Tor is enabled
  - Isolate dynamic content per Tor load state
  - Cookie jars/cookie clearing
  - Cache management
  - History management
  - User agent spoofing during Tor
  - Timezone and locale spoofing

### TorButton Demo
- **Test Sites:**
  - http://gemal.dk/browserspy/basic.html
  - http://gemal.dk/browserspy/css.html
  - http://gemal.dk/browserspy/date.html
  - http://gemal.dk/browserspy/plugins.html
  - http://metasploit.com/research/misc/decloak/index.htm
  - http://ha.ckers.org/weird/CSS-history.cgi
  - http://www.tjkdesign.com/articles/css%20pop%20ups/

### Interesting Technical Details
- **Context Issues**
- **Tab Tagging**
- **XPCOM Hooking and XPCOM Policies**
- **JavaScript Hooking**

## Final Thoughts
- **Tor Security vs. Internet Security:**
  - Tor security is a superset of internet security
  - Adversary has different goals
  - Many apps do not consider privacy vulnerabilities as real vulnerabilities

## Credits and Contributions
- **Scott Squires:** Original TorButton Author
- **Collin Jackson:** History blocking and cookie jars
- **Johannes Renner:** TorFlow contributions and research
- **Nick & Roger:** Advice, Tor in general
- **Nitin, Dave, Thom:** Advice, moral support

## How to Help Tor
- **Extra Bandwidth?** Run a node!
  - See conference CD for Linux 'tc' prioritization script
  - No need to impact your own traffic flows
- **Post Patches/Plugins:** Protect against info disclosure
  - Raise awareness that privacy issues should be part of security measures

---

This version of the text is more structured and professional, with clear headings and subheadings, making it easier to follow and understand.