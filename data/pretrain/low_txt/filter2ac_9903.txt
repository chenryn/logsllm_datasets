# Laying a Secure Foundation for Mobile Devices
## Author: Stephen Smalley
### Trusted Systems Research, National Security Agency

## Trusted Systems Research
- **Mission**: Conduct and sponsor research to provide information assurance for national security systems.
- **Objectives**:
  - Enable safe operation in high-risk or compromised environments.
  - Investigate cryptographic algorithms and protocols, system analysis and design methods, trust mechanisms, and systems behavior.
- **Notable Contributions**:
  - SE Linux
  - Xen Security Modules
  - Linux Kernel Integrity Monitor
  - SE Android

## Our Motivation
- **Increasing Demand for Mobile Devices**:
  - NSA Mobility Program
  - Desire to use commodity solutions
  - NSA Commercial Solutions for Classified (CSfC)
- **Risks of Current Solutions**:
  - Exploitation over wireless, radio, NFC, etc.
  - Data leakage
  - Application privilege escalation

## Why It Matters for Everyone
- **Explosion in Mobile Malware**:
  - Rapid growth and increasing sophistication
  - Market drivers for mobile device attacks (e.g., payment, banking, remote control)
  - Bring Your Own Device (BYOD) trend in corporate/enterprise use
  - Increasing use of mobile platforms in non-traditional and safety-critical venues
- **Broader Impact**:
  - Not just a government issue; affects all users

## A Step in the Right Direction
- **NSA Security Enhanced (SE) Android Project**:
  - Identify and address critical gaps in Android's security
- **Why Android?**:
  - Open-source platform: suitable for a reference implementation accessible to anyone
  - Broad market adoption: opportunity to improve the security of a widely used mobile platform

## Android Security Concerns
- **Weak Separation**:
  - Prone to privilege escalation
  - Lack of support for enforcing organizational security goals
- **Components Affected**:
  - Apps
  - Browser
  - Email
  - Contacts
  - Phone
  - Android OS
  - Linux kernel
  - Hardware

## Secure Solutions on Android
- **Security Concerns**:
  - Exposure of secrets
  - Protection of app mechanisms and configurations
  - No guaranteed invocation
- **Secure Services**:
  - VOIP
  - VPN
  - DAR

## Building on a Solid Foundation
- **Critical Role of Operating System Protection Mechanisms**:
  - Support higher-level security goals
  - Reference: "The Inevitability of Failure: The Flawed Assumption of Security in Modern Computing Environments," 21st NISSC, Oct 1998
- **Key Mechanism**:
  - Flexible Mandatory Access Control (MAC)
  - SE Linux as a well-established foundation for mitigating threats posed by flawed and malicious applications

## SE Android Enhancements
- **Kernel Mandatory Access Control (MAC)**:
  - SELinux-based
  - Root exploits are no longer fatal
  - Strong separation of apps
- **Middleware Mandatory Access Control (MMAC)**:
  - Remove Android permissions from the hands of users and apps

## Effective Against Vulnerable Apps
- **Vulnerable Apps**:
  - Skype
  - Lookout Mobile Security
  - Opera Mobile
- **Root Exploits**:
  - GingerBreak
  - Exploid
  - Zimperlich
  - RageAgainstTheCage
  - Mempodroid
  - KillingInTheNameOf

## SE Android: Security Benefits
- **Strong Separation of Apps**
- **Prevents Privilege Escalation by Apps**
- **Enforces Organizational Security Goals**
- **Protects App Mechanisms and Configurations**
- **Secure Services**:
  - VOIP
  - VPN
  - DAR

## SE Android: Residual Risks
- **Kernel Vulnerability**
- **Platform Component Vulnerability**
- **Loading an Unauthorized OS/Configuration**

## Addressing the Risks
- **Mechanisms Outside OS Scope**:
  - Virtualization
  - Trusted Computing
- **Limitations**:
  - Cannot be addressed via SE Android
  - Also true for SE Linux or any other secure OS

## Secure Virtual Platform (SVP)
- **NSA Research Program (circa 2002)**:
  - Explored virtualization and trusted computing for SE Linux
  - Constructed an overall secure system architecture

## Basic Virtualization: Security Benefits
- **Guest Kernel Vulnerability Contained to Single VM**
- **Isolated Environments via Separate VMs**

## Secure Virtualization: Security Benefits
- **Platform Component Vulnerability Contained to Single VM**
- **VM Interactions and Privileges Controlled by MAC Policy**

## Virtualization for Security: Security Benefits
- **Driver Isolation**
- **Protection of Security Services**
- **Assured Invocation of Security Services**

## Virtualization Instead of SE Android?
- **Virtualization Does Not Eliminate the Need for a Secure OS**:
  - Unable to enforce security goals within guest OS
  - Does not address controlled sharing
  - Does not protect data as it is being processed
  - Limited scalability and flexibility

## Trusted Computing: Security Benefits
- **Verifiable, Trustworthy Report of Loaded Software and Configuration**
- **Protection of Long-Term Secrets from Leakage or Misuse by Unauthorized Software**
- **Hardware Roots of Trust**

## Trusted Computing & Virtualization: Security Benefits
- **Extend Benefits to Each VM**
- **Scalable Measurement and Attestation**
- **Runtime Integrity Measurement of VMs**

## Trusted Computing Instead of SE Android?
- **Trusted Computing ≠ Secure Computing**:
  - Does not remove vulnerabilities in design or implementation
  - Validates system assumptions for secure computing
  - Not a substitute for a secure OS

## SVP Technology Transfer
- **Contributions to Open Source**:
  - Xen Security Modules / Flask, vTPM, Linpicker, openAttestation
- **Commercial Products**:
  - XenClient XT product
  - AFRL SecureView solution

## XenClient XT/SecureView
- **Architecture**:
  - Dom0
  - Guest OS (Linux, Windows)
  - UIVM
  - NILFVM
  - Network Driver Domain
  - Xen with Xen Security Modules / Flask
  - Hardware with RTM and TPM

## SVP: Going Mobile
- **Originally Implemented on PC Hardware**:
  - Leveraged TPM, RTM, IOMMU capabilities
  - Transferred to laptops and x86-based tablets

## Tablet (x86) Architecture
- **Architecture**:
  - Dom0
  - SE Android
  - INE
  - VPN
  - Wireless Driver Domain
  - Xen with XSM
  - Hardware with RTM and TPM

## SVP for ARM: Virtualization
- **Leveraging OKL4 Microvisor for Para-Virtualization**
- **Looking Ahead to ARM Virtualization Extensions**

## OKL4-Based Architecture
- **Details to be Provided**

## Concerns with ARM Virtualization
- **Lack of Mature, Deployed Virtualization Solutions for ARM**
- **Need for OEM Cooperation**
- **Frequent Lack of IOMMU Support**
- **Static Configuration of VMs**

## SVP for ARM: Trusted Computing
- **TrustZone as the Likely Foundation**:
  - Provides support for isolated execution and protected storage
  - Possible to tie to hardware root of trust
  - Possible place to host a MTM

## TrustZone
- **Source**: www.arm.com/products/processors/technologies/trustzone.php

## Concerns with TrustZone
- **No Measured Launch or Attestation for Secure Monitor and Secure World OS**
- **Lack of Widely Available MTM Implementations with Standard APIs**
- **Unclear State of Separation of Trusted Applications**
- **Lack of Public Details on Many Aspects of Implementation Important to Security**
- **Variability Across Hardware**

## TrustZone Instead of SE Android?
- **Cannot Address All Security Concerns of Interest**:
  - Cannot protect data as it is being processed within the normal world
  - Similar to the discussion of virtualization
  - Pushing too much functionality into TrustZone will make it less secure
  - Requires secure OS functionality for the secure world

## TrustZone Instead of Virtualization?
- **Only Supports Secure World vs. Non-Secure World Partitioning**:
  - Cannot support multiple VM architecture for security
  - Would push too much functionality into the TrustZone secure world

## TrustZone Correctly Applied
- **Measured Launch for Normal World Hypervisor and Control Plane**
- **Provide MTM Functionality**
- **Safe Place for Runtime Integrity Monitoring of Hypervisor**
- **Protect the Underpinnings of a System with Virtualization and Secure OS Functionality**

## Putting It All Together
- **Normal World**:
  - SE Android
  - INE
  - VPN
  - Wireless Driver Domain
- **Secure World**:
  - Hypervisor with MAC
  - MTM
  - Integrity Monitoring
  - Secure OS
  - Secure Monitor
- **Hardware with TrustZone and Virtualization Extensions Support**

## Reaching the Goal
- **Processor, SOC, and Device Makers**:
  - Make virtualization and trusted computing primitives ubiquitously available
  - Enable third-party developers to use these features
- **Mobile Platform Developers**:
  - Include secure OS functionality
  - Leverage virtualization and trusted computing for security
  - Enable third-party developers to extend this functionality to applications

## Avoiding the PC Malware Plague
- **PC Industry Lessons**:
  - Did not address threats early, leading to malware issues
  - Trapped in legacy/compatibility requirements
- **Opportunity for Mobile Devices**:
  - Device OEMs and mobile OS developers can do it right
  - Mobile device ecosystem allows for changes

## Questions?
- **Contact Information**:
  - Email: PI:EMAIL
  - SE Android Project: http://selinuxproject.org/page/SEAndroid
  - Public SE Android List: Send “subscribe seandroid-list” to majordomo@tycho.nsa.gov
  - NSA SE Android Team: PI:EMAIL