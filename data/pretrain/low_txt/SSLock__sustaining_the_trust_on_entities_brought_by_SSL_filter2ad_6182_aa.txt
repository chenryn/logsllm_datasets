# SSLock: Sustaining the Trust on Entities Brought by SSL

## Authors
Adonis P.H. Fung, K.W. Cheung  
Department of Information Engineering  
The Chinese University of Hong Kong  
Shatin, N.T., Hong Kong  
{phfung, kwcheung}@ie.cuhk.edu.hk  

## Abstract
We introduce a new, simple, and effective domain segmentation approach to sustain SSL protection, which is often compromised when users are expected to make legitimacy judgments. It is well-established that relying on security warnings and indicators is a significant operational flaw in SSL. As a critical security system, SSL should not depend on users' judgment as the ultimate defense, as adversaries can exploit users' ignorance and illiteracy to compromise even the most secure systems. Our proposal, SSLock, requires service providers to opt-in by hosting their services in a special subdomain "secure." This enhanced protection is then automatically enforced. In this paper, we consider three severe and characteristic attack models—dynamic pharming, deceptive captive portals, and SSLStrip attacks—and demonstrate that SSLock is the only solution that effectively mitigates these threats. We also conduct a deployability analysis, which further justifies the proposal's high compatibility rate. SSLock is the only approach that is generic and lightweight for application vendors, opt-in and zero-initialization for service providers, and privacy-preserving and user-friendly for end-users.

## Categories and Subject Descriptors
K.6.5 [Management of Computing and Information Systems]: Security and Protection—Unauthorized Access

## General Terms
Security, Design, Human Factors

## Keywords
SSL Trust Management, Man-in-the-Middle Attacks, Domain Naming Convention

## 1. Introduction
Secure Socket Layer (SSL) is designed to provide end-to-end protection against privacy leaks and man-in-the-middle attacks. However, SSL protection can be easily compromised due to an operational flaw: the reliance on users to perform legitimacy judgments. For example, users are prompted to take action when they visit a HTTPS website with an invalid certificate. Users are expected to safeguard themselves by understanding and carefully examining all SSL warnings and indicators. Otherwise, they risk privacy breaches and financial losses. Blaming users for their ignorance is tempting, but we assert that SSL, as a security-critical system, should not rely on users as the main defense, as adversaries can exploit users' ignorance and illiteracy to break even the most secure systems.

Currently, browsers and other SSL applications lack effective mechanisms to educate and guide users in making proper legitimacy judgments. As shown in Figure 1, certificate warnings are deployed in various SSL applications, expecting users to discern certificate legitimacy. However, users are often "trained" to bypass these overwhelming warnings. A study reported that certificate warnings (triggered due to an expired certificate) prevented only 1 out of 300 users from logging into an online banking service. In recent years, many research groups have attempted to address this operational flaw, introducing more security clues but still relying on users to distinguish fake websites from legitimate ones. Browser vendors have responded by shipping "scarier" certificate warnings, but usability studies show that a significant number of participants (over 60% in one study) still bypass these warnings. Firefox users can even bypass certificate warnings using freely available extensions. Furthermore, an attack using SSLStrip demonstrated that users do not understand or recognize SSL protocol and indicators appropriately, leading to the capture of numerous email accounts, credit card numbers, and secure logins.

### 1.1 The Proposal: SSLock
We propose a simple and generic mechanism for SSL applications to intelligently identify and deny, on behalf of users, connections that were never intended to be unencrypted or shipped with invalid certificates. The only pre-agreed information is the domain, not the certificate, which is transmitted through an insecure channel without interference. Our approach is based on domains. Consider the established convenience of automatically binding specific domain patterns with the file transfer protocol (FTP). For instance, if ftp.adobe.com offers both HTTP and FTP services, all browsers except Chrome will automatically navigate to ftp://ftp.adobe.com if the protocol is not explicitly specified. Similarly, we propose SSLock (pronounced as S-S-Lock) to leverage SSL protection for a specific subset of domains. If an invalid certificate or no certificate is found in secure.gmail.com, SSLock automatically denies the connection.

The proposal shifts the responsibility of legitimacy assurance to security-conscious service providers, eliminating the need to educate users on new concepts. Service providers can opt-in for enhanced protection by hosting their services in SSLock-protected domains with valid certificates. Services that are reluctant to use SSL or lack valid certificates can stay in legacy mode by using other subdomains. However, it is obligatory for services like banks to opt-in to help browsers make legitimacy judgments on behalf of users. As a result, users are automatically safeguarded by fulfilling the minimal and essential requirement of verifying domains. Users will no longer be presented with bypassable certificate warnings or invalid content, only valid content. The SSL operational flaw is thus resolved by ruling out users from security-critical operations, ensuring SSL protection against the most severe types of attacks, including mixed content, dynamic pharming, and man-in-the-middle attacks using DNS and ICMP redirection, as well as ARP spoofing.

SSLock is designed to be a generic approach, facilitating generalization to any SSL applications. Besides browsers, SSLock leverages the SSL protection of Secure SMTP/POP3/IMAP and FTPS by denying any connections that are never supposed to come with invalid or without certificates. For simplicity, we illustrate using Internet Explorer 7 & 8, Firefox 3 & 3.5, Chrome 2, Safari 4, and Opera 10 as the main SSL applications and secure.gmail.com as the domain triggering the SSLock-protection throughout this paper.

### Contributions
Our main contributions include:
- An explanation of the current SSL deployment and the seriousness of the operational flaw.
- A detailed examination of three characteristic attack models exploiting the SSL operational flaw, and how victims fall into potential traps and the corresponding attack-specific mitigations.
- A proposal, SSLock, that mitigates the operational flaw. We illustrate how the proposal is designed to be lightweight and generic for application vendors, opt-in and zero-initialization for service providers, and user-friendly and privacy-preserving for users.
- A compatibility study on the domain naming convention, revealing statistics on how existing websites would be affected if SSLock is deployed.
- A study of several other proposals related to the attacks, comparing SSLock with ForceHTTPS, Chrome’s Force-HTTPS, EV Certificates, Locked SOP, and DNSSEC. We found SSLock to be an excellent choice, compatible with these schemes.

### Organization
The rest of the paper is organized as follows:
- **Section 2** provides background information on the current SSL deployment and reveals the seriousness of the operational flaw.
- **Section 3** considers three characteristic attacks attempting to exploit the operational flaw.
- **Section 4** details a formal specification of the proposal.
- **Section 5** evaluates the design advantages, compatibility issues, and limitations.
- **Section 6** enumerates how the proposal mitigates the addressed attacks.
- **Section 7** describes other proposals related to the attacks.
- The final section concludes the paper.

## 2. Background
We first discuss how a user visits a legitimate domain and then enumerate different types of certificate warnings and indicators implemented in various browsers. Finally, we cite usability studies showing that a majority of users fail to perform proper legitimacy judgments.

### 2.1 Domains and Protocols
A domain is a human-readable identification name that the DNS resolves to IP addresses where computers can be located. For protocols, a browser primarily uses HTTP or HTTPS to negotiate with web servers, where HTTPS is the cryptographic SSL version of HTTP. Users visit a domain and utilize a protocol by:

- **Typing:** Many users still type domains manually instead of recalling them from bookmarks. Domains are designed to replace IPs and are easier to remember. For domains related to company names, users can typically type them correctly. To locate the same domain in subsequent accesses, users are assisted by the auto-suggest feature of the location bar, available across all browsers. Note that it is uncommon for users to type https://.
- **Recalling from Bookmark:** Domain and protocol are bookmarked as parts of a full URL. Users can later recall a bookmark by clicking the bookmarking menu or by entering several keystrokes to trigger the auto-suggest feature. The protocol is fixed after it is initially bookmarked.
- **Referrals by Hyperlinks:** Users are often referred from search engines, emails, and social networking websites by following hyperlinks. Unfortunately, since webpage designers have full control over determining hyperlinks on their own webpages, adversaries can code misleading or malicious domains and protocols, where phishing tricks usually begin. Currently, browsers protect users with automatic phishing filters, but users are expected to examine and decline fake domains before they are blacklisted.

### 2.2 SSL Certificates and Security Warnings
SSL employs digital certificates, each specifying at least its holder's information, public key, common name, validity period, and its issuer's certificate and signature. The current SSL deployment accommodates both valid and invalid certificates. A certificate (or equivalently the HTTPS connection) is said to be valid or trusted if none of the following conditions are met:

- **Self-signed or Unknown Issuer Certificates:** This occurs if the certificate is self-signed or its issuer certificate is absent in the browser's certificate store.
- **Domain Names Mismatch:** This occurs if the certificate is used in a domain that does not match the common name specified on the certificate.
- **Expired Certificates:** This occurs if the date of access does not fall within the validity period specified on the certificate.

By addressing these issues, SSLock aims to provide a robust and user-friendly solution to the SSL operational flaw.