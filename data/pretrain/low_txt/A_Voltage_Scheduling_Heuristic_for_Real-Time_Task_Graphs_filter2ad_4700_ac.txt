### Sparse Matrix with Varying Execution Time Variance (12-Processor System)

We have conducted extensive simulation experiments of the algorithm described in the previous section. Here, we present our results from a real-life application as a case study, followed by results obtained for a set of random task graphs to demonstrate the algorithm's effectiveness.

#### Energy Savings and Performance

The plots in Figure 7 illustrate the energy savings achieved by dynamic resource reclamation compared to static scheduling. As expected, the greater the variance in execution time, the better the performance. Our adjustment is fast and occurs only during context switches, leading to substantial savings with minimal overhead.

#### Results for Random Graphs

To further validate the effectiveness of our algorithm, we performed tests on 60 randomly generated graphs, each consisting of 50 tasks. For each task graph, we calculated the deadline necessary to schedule the task graph under different conditions. We varied the deadlines from 0 to 10, and for each deadline, we calculated the average relative gain. The results, presented in Figure 8, show that the algorithm performs well across a wide variety of task graphs.

#### Comparison with Infinite Voltage Algorithm

Next, we compared our algorithm with a dynamic voltage adjustment algorithm, referred to as LSSR-N [32], which allows for an infinite number of voltage levels. Voltage adjustments in this algorithm were considered only at the time of context switches. We relaxed the constraint that the minimum voltage must be fixed and allowed it to vary within the specified range. The minimum uniform voltage was chosen such that the longest path meets the deadline under the worst-case scenario. Our two-voltage-level algorithm outperformed the infinite-level algorithm in most cases, demonstrating the benefits of considering the overall structure of the task graph during voltage scheduling.

#### Multiple Voltage Levels

Finally, we measured the energy savings if multiple voltage levels were used instead of just two (see Figure 10). As expected, the system supporting multiple voltage levels exhibited higher energy savings. The multiple voltage-level algorithm selected the appropriate voltage from the supported levels (Table 3), while the dual-voltage scheme used specific voltages. The results indicate that our algorithm can be easily integrated into more complex system configurations to achieve superior performance. They also show that the effect of multiple voltage levels diminishes significantly when deadlines are more relaxed.

### Discussion

In this paper, we addressed the problem of energy-efficient voltage scheduling for task graphs with precedence constraints. We proposed a two-pronged approach and demonstrated that significant energy savings can be achieved by considering the relationships among tasks in the graph. The focus was on exploiting the structure of task graphs for energy minimization. The proposed voltage scheduling requires at most one voltage switch, making it a low-overhead algorithm. We presented a simple, low-overhead voltage scheduling heuristic for executing task graphs in an energy-efficient manner.

### References

[1] http://developer.intel.com/design/pca/
[2] http://www.intel.com/design/intelxscale/
[3] http://www.kasahara.elec.waseda.ac.jp/schedule/
[4] Introduction to thumb. In ARM Documentation, Advanced RISC Machines Ltd.
[5] Aydin H., Melhem R., Mosse D., and Alvarez P.M. Determining optimal processor speeds for periodic real-time tasks with different power characteristics. In 13th Euromicro Conference on Real-Time Systems (ECRTS’01)., June 2001.
[6] Burd T.D. and Broderson R.W. Design issues for dynamic voltage scaling. In International Symposium on Low-Power Electronics and Design, pages 9–14, 2000.
[7] Chandrakasan A., Sheng S., and Brodersen R.W. Low power CMOS digital design. In IEEE Journal Solid State Circuits, pages 472–484, 1992.
[8] Chang J.-M. and Pedram M. Energy minimization using multiple supply voltages. In IEEE Trans. VLSI Systems, pages 436–443, Vol. 5, No. 4, December 1997.
[9] Govil K., Chan E., and Wasserman H. Comparing algorithms for dynamic speed-setting of a low power CPU. In Proc. MOBICOM, pages 13–25, November 1995.
[10] Greenwood G. W., Lang C., and Hurley S. Scheduling tasks in real-time systems using evolutionary strategies. In Workshop on Parallel and Distributed Real-Time Systems, 1995.
[11] Gruian F. Hard real-time scheduling for low energy using stochastic data and DVS processor. In International Symp. on Low-Power Electronics and Design, August 2001.
[12] Hong I., Kirovski D., Qu G., Potkonjak M., and Srivastava M. Power optimization of variable voltage core-based systems. In ACM Design Automation Conference, pages 176–181, 1998.
[13] Hong I., Qu G., Potkonjak M., and Srivastava M. Synthesis techniques for low-power hard real-time systems on variable voltage processors. In 19th IEEE Real-Time Systems Symposium, pages 178–187, December 1998.
[14] Hoogeveen J.A., van de Velde S.L., and Veltman B. Complexity of scheduling multiprocessor tasks with prespecified processor allocations. In CWI, Report BS-R9211, Netherlands, 1992.
[15] Ishihara T. and Yasuura H. Voltage scheduling problem for dynamically variable voltage processors. In International Symp. on Low-Power Electronics and Design, pages 197–201, 1998.
[16] Krishna C.M. and Lee Y.-H. Voltage-clock-scaling adaptive scheduling techniques for low power in hard real-time systems. In Real-Time and Embedded Technology and Applications Symposium, pages 156–165, May 2000.
[17] Lee Y.-H. and Krishna C.M. Voltage-clock scaling for low energy consumption in fixed priority real-time embedded systems. In Sixth IEEE International Conference on Real-Time Computing Systems and Applications, December 1999.
[18] Lin Y.-R., Hwang C.-T., and Wu A. Scheduling techniques for variable voltage low power designs. In ACM Trans. Design Automation for Electronic Systems, pages 115–192, Vol. 2, No. 2, April 1997.
[19] Luo J. and Jha N.K. Power-conscious joint scheduling of periodic task graphs and aperiodic tasks in distributed real-time embedded systems. In International Conference on Computer Aided Design, pages 357–364, 2000.
[20] Ma T. and Shin K.G. A user-customizable energy-adaptive combined static/dynamic scheduler for mobile applications. In Real-Time Systems Symposium, pages 227–236, 2000.
[21] Mosse D., Aydin H., Childers B., and Melhem R. Compiler-assisted dynamic power-aware scheduling for real-time applications. In Workshop on Compiler and OS for Low Power, 2000.
[22] P. P. and S. K.G. Real-time dynamic voltage scaling for low-power embedded operating systems. In ACM Symposium on Operating Systems Principles, pages 89–102, 2001.
[23] Pering T., Burd T., and Brodersen R. The simulation and evaluation of dynamic voltage scaling algorithms. In International Symp. on Low-Power Electronics and Design, pages 76–81, 1998.
[24] Qu G. and Potkonjak M. Achieving utility arbitrarily close to the optimal with limited energy. In International Symp. on Low-Power Electronics and Design, pages 125–130, 2000.
[25] Raghunathan V., Spanos P., and Srivastava M.B. Adaptive power fidelity in energy-aware wireless embedded systems. In Real-Time Systems Symposium, pages 106–115, 2001.
[26] Raje S. and Sarrafzadeh M. Variable voltage scheduling. In Proc. Int. Symp. Low Power Design, pages 9–14, 1995.
[27] Shin Y. and Choi K. Power-conscious fixed priority scheduling for hard real-time systems. In Design Automation Conference, pages 134–139, 1999.
[28] Weiser M., Welch B., Demers A., and Shenker S. Scheduling for reduced CPU energy. In Proc. First Symp. on OSDI, pages 13–23, November 1994.
[29] Wells B.E. A hard real-time static task allocation methodology for highly-constrained message passing environments. In International Symposium of Computer Architecture, 1995.
[30] Yang T. and Gerasoulis A. List scheduling with and without communication delays. In Parallel Computing Journal, pages 1321–1344, Vol. 19, 1993.
[31] Yao F., Demers A., and Shenker S. A scheduling model for reduced CPU energy. In Proc. 36th IEEE Symp. Foundations of Computer Science, pages 374–382, 1995.
[32] Zhu D., Melhem R., and Childers B. Scheduling with dynamic voltage/speed adjustment using slack reclamation in multi-processor real-time systems. In 22nd IEEE Real-Time Systems Symposium, December 2001.