以下是优化后的参考文献列表，使其更加清晰、连贯和专业：

### 参考文献

[1] Y. Kim, "Title of the Paper," in *IEEE Transactions on [Journal Name]*, vol. X, no. X, pp. XX-XX, 2014. [在线]. 可访问: <https://users.ece.cmu.edu/~yoonguk/papers/kim-isca14.pdf>

[2] J. A. Clause, I. Doudalis, A. Orso, and M. Prvulovic, "Effective Memory Protection Using Dynamic Tainting," in *22nd IEEE/ACM International Conference on Automated Software Engineering (ASE)*, ACM, 2007, pp. 284–292. [在线]. 可访问: <http://www.cc.gatech.edu/~orso/papers/clause.doudalis.orso.prvulovic.pdf>

[3] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang, "StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks," in *Proceedings of the 7th USENIX Security Symposium*, January 1998.

[4] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham, and M. Winandy, "Return-Oriented Programming without Returns," in *International Conference on Information Systems Security (CCS)*, ACM, 2010.

[5] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti, "Control-Flow Integrity," in *12th ACM Conference on Computer and Communications Security*, ACM, 2005, pp. 340–353. [在线]. 可访问: <https://research.microsoft.com/apps/pubs/?id=69217>

[6] klog, "The Frame Pointer Overwrite," *Phrack Magazine*, 第55期, 1999. [在线]. 可访问: <http://phrack.org/issues/55/8.html>

[7] M. Conti, S. Crane, L. David, M. Franz, P. Larsen, C. Liebchen, M. Negro, M. Qunaibit, and A.-R. Sadeghi, "Losing Control: On the Effectiveness of Control-Flow Integrity under Stack Attacks," in *ACM Conference on Computer and Communications Security*, ACM, 2015, pp. 952–963.

[8] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro, "Preventing Memory Error Exploits with WIT," in *Proceedings of the 29th IEEE Symposium on Security and Privacy*, IEEE, 2008.

[9] M. Castro, M. Costa, and T. Harris, "Securing Software by Enforcing Data-Flow Integrity," in *USENIX Symposium on Operating System Design and Implementation*, 2006.

[10] Qualys, Inc., "Qualys Security Advisory—The Stack Clash," 2017. [在线]. 可访问: <https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt>, 访问日期: 2018-03-29.

[11] A. Prakash and H. Yin, "Defeating ROP Through Denial of Stack Pivot," in *Annual Computer Security Applications Conference*, ACM, 2015.

[12] Standard Performance Evaluation Corporation, "SPEC CPU 2006," 2006. [在线]. 可访问: <https://www.spec.org/cpu2006/>

[13] N. Muralimanohar, R. Balasubramonian, and N. P. Jouppi, "CACTI 6.0: A Tool to Model Large Caches," HP Labs, Palo Alto, CA, HPL-2009-85, April 2009, 最新代码版本为 CACTI 6.5。[在线]. 可访问: <http://www.hpl.hp.com/techreports/2009/HPL-2009-85.html>

[14] Free Standards Group, "DWARF Debugging Information Format." [在线]. 可访问: <http://www.dwarfstd.org/doc/Dwarf3.pdf>

[15] D. Anderson, "David A’s DWARF Page," 2017. [在线]. 可访问: <https://www.prevanders.net/dwarf.html>, 访问日期: 2017-8-12.

[16] N. Binkert, B. Beckmann, G. Black, S. K. Reinhardt, A. Saidi, A. Basu, J. Hestness, D. R. Hower, T. Krishna, S. Sardashti, R. Sen, K. Sewell, M. Shoaib, N. Vaish, M. D. Hill, and D. A. Wood, "The gem5 Simulator," in *ACM SIGARCH Computer Architecture News*, 2014.

[17] H. Özdoğanoglu, T. Vijaykumar, C. E. Brodley, B. A. Kuperman, and A. Jalote, "SmashGuard: A Hardware Solution to Prevent Security Attacks on the Function Return Address," *IEEE Transactions on Computers*, vol. 55, pp. 1271–1284, Oct. 2006. [在线]. 可访问: <http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1683758>

[18] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov, "AddressSanitizer: A Fast Address Sanity Checker," in *USENIX Annual Technical Conference*, 2012.

[19] S. Nagarakatte, J. Zhao, M. M. K. Martin, and S. Zdancewic, "SoftBound: Highly Compatible and Complete Spatial Memory Safety for C," in *Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)*, 2009.

[20] J. Wilander, N. Nikiforakis, Y. Younan, M. Kamkar, and W. Joosen, "RIPE: Runtime Intrusion Prevention Evaluator," in *27th Annual Computer Security Applications Conference (ACSAC)*, ACM, 2011.

[21] H. Shacham, "The Geometry of Innocent Flesh on the Bone: Return-into-LIBC Without Function Calls (on the x86)," in *ACM Conference on Computer and Communications Security*, ACM, 2007, pp. 552–561. [在线]. 可访问: <http://cseweb.ucsd.edu/~hovav/dist/geometry.pdf>

[22] E. Buchanan, R. Roemer, H. Shacham, and S. Savage, "When Good Instructions Go Bad: Generalizing Return-Oriented Programming to RISC," in *Proc. ACM CCS*, Oct. 2008, pp. 27–38.

[23] T. Newsham, "Bugtraq: Re: Smashing the Stack: Prevention?" Apr. 1997. [在线]. 可访问: <http://seclists.org/bugtraq/1997/Apr/129>

[24] Solar Designer, "Bugtraq: Getting Around Non-Executable Stack (and Fix)," Aug. 1997. [在线]. 可访问: <http://seclists.org/bugtraq/1997/63>

[25] MITRE, "CVE-2012-0769," 2012. [在线]. 可访问: <https://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0769>

[26] H. Hu, S. Shinde, S. Adrian, Z. L. Chua, P. Saxena, and Z. Liang, "Data-Oriented Programming: On the Expressiveness of Non-Control Data Attacks," in *IEEE Symposium on Security and Privacy (Oakland S&P)*, IEEE Computer Society, May 2016.

[27] I. Evans, S. Fingeret, J. Gonzalez, U. Otgonbaatar, T. Tang, H. Shrobe, S. Sidiroglou-Douskos, M. Rinard, and H. Okhravi, "Missing the Point(er): On the Effectiveness of Code Pointer Integrity," in *IEEE Symposium on Security and Privacy (Oakland S&P)*, IEEE Computer Society, May 2015.

[28] A. Joannou, J. Woodruff, R. Kovacsics, S. W. Moore, A. Bradbury, H. Xia, R. N. Watson, D. Chisnall, M. Roe, B. Davis, E. Napierala, J. Baldwin, K. Gudka, P. G. Neumann, A. Mazzinghi, A. Richardson, S. Son, and A. T. Markettos, "Efficient Tagged Memory," in *Proceedings of the International Conference on Computer Design (ICCD)*, 2017, pp. 641–648. [在线]. 可访问: <doi.ieeecomputersociety.org/10.1109/ICCD.2017.112>

[29] lowRISC项目团队, "Tagged Memory and Minion Cores in the lowRISC SoC," *University of Cambridge, Computer Laboratory*, lowRISC-MEMO 2014-001, December 2014. [在线]. 可访问: <http://www.lowrisc.org/docs/memo-2014-001-tagged-memory-and-minion-cores/>

[30] W. Song, A. Bradbury, and R. Mullins, "Towards Tagged Memory in General Purpose RISC-V Workshop," June 2015. [在线]. 可访问: <https://riscv.org/wp-content/uploads/2015/06/riscv-tagged-mem-workshop-june2015.pdf>

[31] ARM Limited, "ARM Architecture Reference Manual: ARMv8, for ARMv8-A Architecture Profile," December 2017. [在线]. 可访问: <https://static.docs.arm.com/ddi0487/ca/DDI0487Ca_armv8_arm.pdf>

[32] lazytyped, "ADI vs. ROP," September 2017. [在线]. 可访问: <https://lazytyped.blogspot.com/2017/09/adi-vs-rop.html>

[33] D. Chisnall, C. Rothwell, R. N. Watson, J. Woodruff, M. Vadera, S. W. Moore, M. Roe, B. Davis, and P. G. Neumann, "Beyond the PDP-11: Architectural Support for a Memory-Safe C Abstract Machine," in *Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS '15)*, ACM, 2015, pp. 117–130. [在线]. 可访问: <http://doi.acm.org/10.1145/2694344.2694367>

[34] A. Azevedo de Amorim, M. Dénès, N. Giannarakis, C. Hriţcu, B. C. Pierce, A. Spector-Zabusky, and A. Tolmach, "Micro-Policies: Formally Verified, Micro-Tag-Based Security Monitors," in *36th IEEE Symposium on Security and Privacy (Oakland S&P)*, IEEE Computer Society, May 2015, pp. 813–830. [在线]. 可访问: <http://prosecco.gforge.inria.fr/personal/hritcu/publications/micro-policies.pdf>

[35] A. Azevedo de Amorim, N. Collins, A. DeHon, D. Demange, C. Hriţcu, D. Pichardie, B. C. Pierce, R. Pollack, and A. Tolmach, "A Verified Information-Flow Architecture," in *Proceedings of the 41st Symposium on Principles of Programming Languages (POPL)*, ACM, Jan. 2014, pp. 165–178. [在线]. 可访问: <http://www.crash-safe.org/node/29>

[36] A. Azevedo de Amorim, "A Methodology for Micro-Policies," 博士论文, University of Pennsylvania, 2017. [在线]. 可访问: <http://www.seas.upenn.edu/~aarthur/thesis.pdf>

[37] J. Brown and T. F. Knight, Jr., "A Minimally Trusted Computing Base for Dynamically Ensuring Secure Information Flow," *MIT CSAIL, Technical Report 5*, November 2001, Aries Memo No. 15. [在线]. 可访问: <http://www.ai.mit.edu/projects/aries/Documents/Memos/ARIES-15.pdf>

[38] U. Dhawan, A. Kwon, E. Kadric, C. Hriţcu, B. C. Pierce, J. M. Smith, A. DeHon, G. Malecha, G. Morrisett, T. F. Knight, Jr., A. Sutherland, T. Hawkins, A. Zyxnfryx, D. Wittenberg, P. Trei, S. Ray, and G. Sullivan, "Hardware Support for Safety Interlocks and Introspection," in *SASO Workshop on Adaptive Host and Network Security*, Sep. 2012. [在线]. 可访问: <http://www.crash-safe.org/sites/default/files/interlocks_ahns2012.pdf>

[39] A. DeHon, E. Boling, R. Nikhil, D. Rad, J. Schwarz, N. Sharma, J. Stoy, G. Sullivan, and A. Sutherland, "DOVER: A Metadata-Extended RISC-V," in *RISC-V Workshop*, Jan. 2016. [在线]. 可访问: <http://riscv.org/wp-content/uploads/2016/01/Wed1430-dover_riscv_jan2016_v3.pdf>

[40] S. Chen, M. Kozuch, T. Strigkos, B. Falsafi, P. B. Gibbons, T. C. Mowry, V. Ramachandran, O. Ruwase, M. P. Ryan, and E. Vlachos, "Flexible Hardware Acceleration for Instruction-Grain Program Monitoring," in *35th International Symposium on Computer Architecture (ISCA)*, IEEE, 2008, pp. 377–388. [在线]. 可访问: <http://www.cs.cmu.edu/~lba/papers/LBA-isca08.pdf>

[41] S. Fytraki, E. Vlachos, Y. O. Koçberber, B. Falsafi, and B. Grot, "FADE: A Programmable Filtering Accelerator for Instruction-Grain Monitoring," in *20th IEEE International Symposium on High Performance Computer Architecture (HPCA 2014)*, Orlando, FL, USA, February 15-19, 2014, pp. 108–119. [在线]. 可访问: <http://dx.doi.org/10.1109/HPCA.2014.6835922>

[42] M. A. Wahab, P. Cotret, M. N. Allah, G. Hiet, V. Laptre, and G. Gogniat, "ARMHEx: A Hardware Extension for DIFT on ARM-based SoCs," in *Proceedings of the International Conference on Field-Programmable Logic and Applications*, Sept 2017, pp. 1–7.

### 附录 A：实现挑战

#### setjmp/longjmp
系统代码中有时会使用 `setjmp()` 和 `longjmp()` 函数，这些函数将关键的程序状态（包括程序计数器和帧指针）存储到内存缓冲区，并在稍后恢复。`longjmp()` 操作会导致机器弹出许多栈帧而没有进行展开操作；结果是，所有被丢弃的内存仍然会被标记，这会导致我们的策略遇到违规情况。为了处理这种情况，我们在 `longjmp()` 例程中添加了额外的代码，该代码包含一个带有特殊 `LONGJMP–CLEAR` 指令标签的存储指令；这个标签允许它覆盖被丢弃的内存，并将其标记为 `EMPTY STACK`。这些存储操作违反了第四章-C 节讨论的栈不变量；我们通过这种特殊的指令类型赋予 `longjmp()` 例程额外的权限。类似地，C++ 异常可以通过向异常处理代码提供特殊的指令标签来处理。在深度隔离策略中，栈深度 `d` 存储在帧指针上，并由标准策略规则适当地检索，因此在 `longjmp()` 之后，系统再次具有在 `setjmp()` 时激活的正确深度。

#### 尾调用递归
尾调用和兄弟调用优化允许程序在尾调用的特殊情况下重用调用者的栈帧。这些优化通过 GCC 的 `-foptimize-sibling-calls` 优化传递激活，该传递包含在 `-O2` 优化级别中。我们的策略重新标记栈帧，因为权限标识符可能已经改变。此外，为一个权限准备的参数（在参数字段中）在兄弟调用后新的权限标识符下可能是陈旧的。为了处理这种情况，我们在进行兄弟调用之前插入带有特殊 `DELEGATE ARG` 标签的指令，该指令允许权限永久放弃其访问权限并授予兄弟权限。

#### 动态栈分配
程序可以使用 `alloca()` 或动态大小数组在栈上执行动态内存分配。我们在分配时插入额外的指令来标记该内存，并在堆栈指针再次递增时插入额外的指令来清除已分配的内存。请注意，这些设置和清理操作不在函数序言或结尾中，与政策描述中讨论的标记操作不同。我们当前实现的一个限制是我们为所有动态分配的栈对象分配相同的对象 ID。动态栈内存分配在 SPEC 基准测试中非常罕见。

#### 间接函数调用
为了处理间接函数调用（如第四章-D2 节所述），我们跟踪系统中的所有函数指针及其对应的帧 ID，通过扩展寄存器和内存字的标签。为此，我们在间接调用发生之前使用带有特殊 `BEGIN–INDIRECT–CALL` 标签的指令，该指令根据间接调用使用的寄存器（例如 `jsr`）的帧 ID 标记程序计数器标签。准备间接调用参数的指令被标记为 `SET–ARG–FROM–PC`，并使用程序计数器标签中的权限标识符来设置适当的参数字段。最后，间接调用指令在执行时清除 PC 上的标签。

这种策略要求所有函数指针都标记为其适当的帧 ID。为了实现这一点，我们在初始化时将全局偏移表 (GOT) 中持有的条目标记为其适当的帧 ID，这样当加载这些值时，生成的寄存器将被正确标记。函数指针也可以通过计算从全局寄存器偏移的算术指令动态创建。我们将这些指令标记为 `CREATE–FP` 指令类型，并带有要创建的函数指针的适当帧 ID，以便通过适当的规则，结果寄存器将包含正确的帧 ID。

### 附录 B：返回地址保护规则

图 10 显示了返回地址保护的规则集。在我们的规则表示法中，我们使用 ⊥ 表示空标签，使用 _ 表示特定字段的不关心值，这意味着规则不依赖于特定输入并且可以匹配任何标签。

### 附录 C：静态权限规则

本节解释如何标记间接函数调用的参数（如第四章-D2 节所述），并提供 SDMP 表示法的完整策略规则。

为了处理间接函数调用，我们通过扩展寄存器和内存字的标签来跟踪系统中的所有函数指针及其相应的帧 ID。

### 附录 D：深度隔离规则

图 12 显示了深度隔离的规则集。在我们的规则表示法中，我们使用单个元组表示指令标签，双元组表示寄存器标签，四元组表示内存标签。

希望这些优化使你的文档更加清晰、连贯和专业。如果有其他需要进一步修改的地方，请告诉我！