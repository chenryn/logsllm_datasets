# Franz Payer
## Tactical Network Solutions
### [http://cyberexplo.it](http://cyberexplo.it)

---

### Acknowledgements
- Zachary Cutlip
- Craig Heffner
- Tactical Network Solutions

### Special Thanks
- Ronald Jenkees
  - Independent artist
  - [http://www.ronaldjenkees.com](http://www.ronaldjenkees.com)

### Legal
- EFF (www.eff.org)
- DMCA (Digital Millennium Copyright Act)
- CFAA (Computer Fraud and Abuse Act)
- Opinions/views expressed here are mine, not my employer’s

### Overview
1. Background information
2. Music streaming basics
3. Security investigation process
4. Exploit demonstration
5. Questions

### End-Goal
- **Google Chrome Extension**
  - Mimics a music player when possible
  - Duplicates requests otherwise
- **Alternative Approach**
  - Duplicates request and caches
  - Performs hex-dump analysis

### Wall of Shame

### What is Streaming?
- A method to continuously receive and present data as it is delivered by a provider (Wikipedia)
- Involves:
  - Capturing data pieces
  - Reassembly
  - Encryption

### Protocols Used in Streaming
- **Custom Protocol** for desktop applications
- **HTTP/HTTPS** for browser-based applications
- **Two Types:**
  - **Static:** e.g., `http://cd09.128.music.static.jango.com/music/10/47/34/1047349946.mp3`
  - **Dynamic:** e.g., `http://stream126-he.grooveshark.com/stream.php?streamKey=1202c0ba6260e12c0b84d64b72845181d3195496_51eaabf9_24f1b63_2cb51a8_e0616020_36_0`

### Types of Music Players
- **Flash:**
  - Majority of players
  - May use JavaScript
  - Requires decompilation
  - Separate environment
- **HTML5:**
  - Experimental
  - Entirely in JavaScript
  - Usually minified

### Where is the Vulnerability?
- The browser does most of the work
- Two ways to exploit:
  - **Copy Requests:**
    - Easy
    - Suspicious
    - Has limitations
  - **Generate Requests:**
    - Difficult
    - Undetectable with sessions

### Investigation Process
- Breadth before depth
- Locate the music file in network traffic
  - Filter by XHR traffic and sort by type
- Inspect any parameters in the request
- Locate the origin of those parameters
  - Page URL
  - Page source
  - localStorage
  - JavaScript
- Attempt to replicate the request

### Target: Aimini
- **Flash Player**
- Almost no security
- Good first target
  - No need to look at the code

### Analyzing Network Traffic
- **The Easy Way Out**

### Analyzing the Song Request
- Looking for parameters

### Target: Grooveshark
- **HTML5 (http://html5.grooveshark.com/)**
- Several factors of authentication
- Minified JavaScript
- Not for the faint of heart
- Keep track of what you are doing

### JavaScript Beautifier
- You will need it
- [http://jsbeautifier.org/](http://jsbeautifier.org/)

### Analyzing more.php

### So Now What?
- We need:
  - **streamKey**
- How do we get it?
  - **more.php - getStreamKeyFromSongIDEx**
  - **Session - window.GS.config**
  - **Token - ?**
  - **UUID - ?**
  - **songID - window.GS.models.queue.models**
  - **more.php - getCommunicationToken**

### Looking Through app.min.js

### Recap
- We need:
  - **streamKey**
- How do we get it?
  - **more.php - getStreamKeyFromSongIDEx**
  - **Session - window.GS.config**
  - **Token - getCommunicationToken**
  - **UUID - copied function from app.min.js**
  - **songID - window.GS.models.queue.models**
  - **more.php - getCommunicationToken**

### Looking for Variables in app.min.js

### Demo Time

### Things I Learned
- Downloading music is inconvenient
- Services were fairly easy to exploit
- Impossible to completely protect streaming

### Things You Should Know
- People have poor security (shocker)
- Some services will patch their code now
- Some services won’t patch their code
- The same web-traffic logging can be applied to some video streaming websites

### Case Study: Last.fm
- **Heavily Secured:**
  - Caps bandwidth to match playback speed
  - One-use tokens
  - Users may only have one stream open at a time
- Could not be exploited due to:
  - Large amount of time required
  - Hundreds of lines of obfuscated code
  - Bandwidth cap prevents stealing the entire library

### Mitigations
- **Current Technology:**
  - One-time use tokens
  - Encrypted streams (rtmpe)
  - Returning songs in pieces
  - Code obfuscation
- **Future Proofing:**
  - HTML5 audio tag with DRM support
  - “HTTP Live Streaming as a Secure Streaming Method” – Bobby Kania, Luke Gusukuma

### References
- **Browsershark:**
  - [Chrome Web Store](https://chrome.google.com/webstore/detail/browsershark/jhbjnipjccjloncefdoknhicbnbjaefh)
  - [Bit.ly](http://bit.ly/18UpQtb)
  - [GitHub](https://github.com/fpayer/browsershark)
- **Blog:**
  - [http://cyberexplo.it/](http://cyberexplo.it/)
- **HTTP Live Streaming as a Secure Streaming Method:**
  - [PDF](http://vtechworks.lib.vt.edu/bitstream/handle/10919/18662/Instructions%20for%20HTTP%20Live%20Streaming%20Final.pdf)
- **JS Beautifier:**
  - [http://jsbeautifier.org/](http://jsbeautifier.org/)

### Contact
- Twitter: @franz780
- Email: PI:EMAIL

### Questions?

---