### Leveraging Timing as a Side-Channel Information Leak

Timing attacks exploit the time required to download or process a resource, which is often influenced by various factors such as network irregularities or background noise. Consequently, these attacks have certain limitations regarding the accuracy of the uncovered resource size.

In our research, we introduced novel techniques that leverage the browser-imposed quota to reveal the exact size of any resource. This approach overcomes the limitations of traditional timing attacks and provides more precise information.

### Compression Side-Channel Attacks

Compression side-channel attacks are another class of vulnerabilities where the size of resources is exploited. These attacks generally leverage the compression rate achieved when compressing an unknown value within a larger corpus of known values. This allows an adversary to uncover information about the unknown value from the resource size after compression. Recent studies have shown how similar attacks can be applied to various compression mechanisms used on the web [49, 21].

### Privacy-Violating Cross-Origin Attacks

Lee et al. demonstrated that the ApplicationCache mechanism can be used to uncover the status code returned for cross-origin resources [34]. Their attack exploits the different behaviors of ApplicationCache based on the returned status code of referenced endpoints. The researchers did not explore vulnerabilities originating from the imposed quota and storage limits. Another type of attack that violates the Same-Origin Policy is Cross-Site Script Inclusion (XSSI), first introduced by Grossman in 2006 [24] and recently analyzed on a large scale by Lekies et al. [35]. In XSSI attacks, a dynamically generated JavaScript (or CSV [58]) file from a vulnerable website is included as a `<script>` element on the attacker's webpage. The sensitive content in these files can then be obtained by the adversary through modifications made to the attacker-controlled DOM.

### Comparison with Prior Work

Compared to prior work on the analysis of web traffic [57, 6, 12, 36, 11, 10, 17], our work is, to the best of our knowledge, the first to combine traffic analysis with the ability to execute code in the victim’s browser. Similarly, traffic analysis works on Wi-Fi typically assume a passive, rather than an active, adversary [8, 23, 3, 75, 74]. Our work is the first to actively block specific Wi-Fi packets to measure the size of HTTP messages.

### Conclusion

The size of resources can be used to infer sensitive information from users at a large number of web services. In our research, we performed an extensive analysis of the various operations performed on resources. As a result, we identified several new techniques to uncover the size of any resource. Specifically, we developed an attack that abuses the storage quota imposed by browsers and a novel technique against Wi-Fi networks to disclose the size of the response associated with an attacker-initiated request. To provide more insight into real-world applications, we elaborated on several use cases involving widely used web services. Motivated by the severe consequences of these size-exposing attacks, we proposed an enhanced design for browser storage, which is likely to be adopted by browser vendors, and discussed various other options to prevent adversaries from stealing sensitive information.

### Acknowledgments

We thank the anonymous reviewers for their valuable comments. This research is partially funded by the Research Fund KU Leuven, the EU FP7 project NESSoS, and the Prevention of and Fight against Crime Programme of the European Union (B-CCENTRE). Mathy Vanhoef holds a Ph.D. fellowship of the Research Foundation - Flanders (FWO).

### References

[1] AL FARDAN, N. J., AND PATERSON, K. G. Lucky thirteen: Breaking the TLS and DTLS record protocols. In IEEE Symposium on Security and Privacy (2013).

[2] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust defenses for cross-site request forgery. In Proceedings of the 15th ACM conference on Computer and communications security (2008), ACM, pp. 75–88.

[3] BAUER, K., MCCOY, D., GREENSTEIN, B., GRUNWALD, D., AND SICKER, D. Physical layer attacks on unlinkability in wireless LANs. In Privacy Enhancing Technologies (2009).

[4] BELSHE, M., PEON, R., AND THOMSON, M. Hypertext transfer protocol version 2 (HTTP/2). RFC 7540, 2015.

[5] BHARGAVAN, K., LAVAUD, A. D., FOURNET, C., PIRONTI, A., AND STRUB, P. Y. Triple handshakes and cookie cutters: Breaking and fixing authentication over TLS. In IEEE Security and Privacy (SP) (2014).

[6] BISSIAS, G. D., LIBERATORE, M., JENSEN, D., AND LEVINE, B. N. Privacy vulnerabilities in encrypted HTTP streams. Lecture notes in computer science 3856 (2006), 1.

[7] BORTZ, A., AND BONEH, D. Exposing private information by timing web applications. In Proceedings of the 16th international conference on World Wide Web (2007), ACM, pp. 621–628.

[8] BRIK, V., BANERJEE, S., GRUTESER, M., AND OH, S. Wireless device identification with radiometric signatures. In Mobile computing and networking (2008).

[9] BUGZILLA. Bug 565965 - (doublekey) key cookies on setting domain * toplevel load domain. https://bugzilla.mozilla.org/show_bug.cgi?id=565965, May 2010.

[10] CAI, X., ZHANG, X. C., JOSHI, B., AND JOHNSON, R. Touching from a distance: Website fingerprinting attacks and defenses. In Proceedings of the 2012 ACM conference on Computer and communications security (2012), ACM, pp. 605–616.

[11] CHAPMAN, P., AND EVANS, D. Automated black-box detection of side-channel vulnerabilities in web applications. In Proceedings of the 18th ACM conference on Computer and communications security (2011), ACM, pp. 263–274.

[12] CHEN, S., WANG, R., WANG, X., AND ZHANG, K. Side-channel leaks in web applications: A reality today, a challenge tomorrow. In Security and Privacy (SP), 2010 IEEE Symposium on (2010), IEEE, pp. 191–206.

[13] CHENG, H., AND AVNUR, R. Traffic analysis of SSL encrypted web browsing. URL citeseer.ist.psu.edu/656522.html (1998).

[14] CROSBY, S. A., WALLACH, D. S., AND RIEDI, R. H. Opportunities and limits of remote timing attacks. ACM Transactions on Information and System Security (TISSEC) 12, 3 (2009), 17.

[15] DIERKS, T., AND RESCORLA, E. The transport layer security (TLS) protocol version 1.2. RFC 5246, 2008.

[16] DUONG, T., AND RIZZO, J. Here come the xor ninjas. Ekoparty Security Conference (2011).

[17] DYER, K. P., COULL, S. E., RISTENPART, T., AND SHRIMPTON, T. Peek-a-boo, I still see you: Why efficient traffic analysis countermeasures fail. In IEEE Security and Privacy (SP) (2012).

[18] FAN, Y., LIN, B., JIANG, Y., AND SHEN, X. An efficient privacy-preserving scheme for wireless link layer security. In Global Telecommunications Conference, 2008. IEEE GLOBECOM 2008. IEEE (2008).

[19] FELTEN, E. W., AND SCHNEIDER, M. A. Timing attacks on web privacy. In Proceedings of the 7th ACM conference on Computer and communications security (2000), ACM, pp. 25–32.

[20] GELERNTER, N., AND HERZBERG, A. Cross-site search attacks. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (2015), ACM, pp. 1394–1405.

[21] GLUCK, Y., HARRIS, N., AND PRADO, A. BREACH: Reviving the CRIME attack. In Black Hat Briefings (2013).

[22] GOOGLE CHROME. Managing HTML5 offline storage. https://developer.chrome.com/apps/offline_storage, February 2016.

[23] GREENSTEIN, B., MCCOY, D., PANG, J., KOHNO, T., SESHAN, S., AND WETHERALL, D. Improving wireless privacy with an identifier-free link layer protocol. In Mobile systems, applications, and services (2008).

[24] GROSSMAN, J. Advanced web attack techniques using GMail. http://jeremiahgrossman.blogspot.com/2006/01/advanced-web-attack-techniques-using.html, 2006.

[25] HINTZ, A. Fingerprinting websites using traffic analysis. In Privacy Enhancing Technologies (2003), Springer, pp. 171–178.

[26] HOMAKOV, E. Using Content-Security-Policy for evil. http://homakov.blogspot.com/2014/01/using-content-security-policy-for-evil.html, January 2014.

[27] ICSI. The ICSI certificate notary. Retrieved 23 Jan. 2016, from http://notary.icsi.berkeley.edu.

[28] IEEE STD 802.11-2012. Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications, 2012.

[29] JAGATIC, T. N., JOHNSON, N. A., JAKOBSSON, M., AND MENCZER, F. Social phishing. Communications of the ACM 50, 10 (2007), 94–100.

[30] JAKOBSEN, J. B., AND ORLANDI, C. A practical cryptanalysis of the Telegram messaging protocol. PhD thesis, Master Thesis, Aarhus University (Available on request), 2015.

[31] KELSEY, J. Compression and information leakage of plaintext. In Fast Software Encryption (2002), Springer, pp. 263–276.

[32] KITAMURA, E. Working with quota on mobile browsers. http://www.html5rocks.com/en/tutorials/offline/quota-research/, January 2014.

[33] LANDAU, P. Deanonymizing Facebook users by CSP brute-forcing. http://www.myseosolution.de/deanonymizing-facebook-users-by-csp-bruteforcing/, August 2014.

[34] LEE, S., KIM, H., AND KIM, J. Identifying cross-origin resource status using application cache. In NDSS (2015).

[35] LEKIES, S., STOCK, B., WENTZEL, M., AND JOHNS, M. The unexpected dangers of dynamic JavaScript. In 24th USENIX Security Symposium (USENIX Security 15) (2015), pp. 723–735.

[36] LUO, X., ZHOU, P., CHAN, E. W., LEE, W., CHANG, R. K., AND PERDISCI, R. HTTPOS: Sealing information leaks with browser-side obfuscation of encrypted flows. In NDSS (2011).

[37] MARLINSPIKE, M. New tricks for defeating SSL in practice. BlackHat DC, February (2009).

[38] MATHER, L., AND OSWALD, E. Pinpointing side-channel information leaks in web applications. Journal of Cryptographic Engineering 2, 3 (2012), 161–177.

[39] MICROSOFT. Platform status. https://dev.windows.com/en-us/microsoft-edge/platform/status/fetchapi, February 2016.

[40] MILLER, B., HUANG, L., JOSEPH, A. D., AND TYGAR, J. D. I know why you went to the clinic: Risks and realization of HTTPS traffic analysis. In Privacy Enhancing Technologies (2014), Springer, pp. 143–163.

[41] MOORE, T., AND EDELMAN, B. Measuring the perpetrators and funders of typosquatting. In Financial Cryptography and Data Security. Springer, 2010, pp. 175–191.

[42] MOZILLA DEVELOPER NETWORK. Browser storage limits and eviction criteria. https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Browser_storage_limits_and_eviction_criteria, October 2015.

[43] NIKIFORAKIS, N., INVERNIZZI, L., KAPRAVELOS, A., VAN ACKER, S., JOOSEN, W., KRUEGEL, C., PIESSENS, F., AND VIGNA, G. You are what you include: Large-scale evaluation of remote JavaScript inclusions. In Proceedings of the 2012 ACM conference on Computer and communications security (2012), ACM, pp. 736–747.

[44] OREN, Y., KEMERLIS, V. P., SETHUMADHAVAN, S., AND KEROMYTIS, A. D. The spy in the sandbox: Practical cache attacks in JavaScript. arXiv preprint arXiv:1502.07373 (2015).

[45] PEON, R., AND RUELLAN, H. HPACK: Header compression for HTTP/2. RFC 7541, 2015.

[46] RANGANATHAN, A., AND SICKING, J. File API. W3C Working Draft (2012).

[47] RESCORLA, E. HTTP over TLS. RFC 2818, 2000.

[48] RISTENPART, T., TROMER, E., SHACHAM, H., AND SAVAGE, S. Hey, you, get off of my cloud: Exploring information leakage in third-party compute clouds. In Proceedings of the 16th ACM conference on Computer and communications security (2009), ACM, pp. 199–212.

[49] RIZZO, J., AND DUONG, T. The CRIME attack. In EKOparty Security Conference (2012), vol. 2012.

[50] ROESNER, F., KOHNO, T., AND WETHERALL, D. Detecting and defending against third-party tracking on the web. In Proceedings of the 9th USENIX conference on Networked Systems Design and Implementation (2012), USENIX Association, pp. 12–12.

[51] RYDSTEDT, G., BURSZTEIN, E., BONEH, D., AND JACKSON, C. Busting frame busting: A study of clickjacking vulnerabilities at popular sites. IEEE Oakland Web 2 (2010), 6.

[52] SCHINZEL, S. An efficient mitigation method for timing side channels on the web. In 2nd International Workshop on Constructive Side-Channel Analysis and Secure Design (COSADE) (2011).

[53] SEGALL, L. An app called Telegram is the 'hot new thing among jihadists'. http://money.cnn.com/2015/11/17/technology/isis-telegram/, November 2015.

[54] SOOD, A. K., AND ENBODY, R. J. Malvertising: Exploiting web advertising. Computer Fraud & Security 2011, 4 (2011), 11–16.

[55] SSL PULSE. Survey of the SSL implementation of the most popular web sites. https://www.trustworthyinternet.org/ssl-pulse/, February 2016.

[56] STATCOUNTER. GlobalStats. http://gs.statcounter.com/#all-browser-ww-monthly-201501-201601, January 2016.

[57] SUN, Q., SIMON, D. R., WANG, Y.-M., RUSSELL, W., PADMANABHAN, V. N., AND QIU, L. Statistical identification of encrypted web browsing traffic. In Security and Privacy (2002).

[58] TERADA, T. Identifier-based XSSI attacks. https://www.mbsd.jp/Whitepaper/xssi.pdf, March 2015.

[59] TOR. Isolate HTTP cookies according to first and third party domain contexts. https://trac.torproject.org/projects/tor/ticket/3246, May 2011.

[60] VAN GOETHEM, T., JOOSEN, W., AND NIKIFORAKIS, N. The clock is still ticking: Timing attacks in the modern web. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (2015), ACM, pp. 1382–1393.

[61] VANHOEF, M., AND PIESSENS, F. Advanced Wi-Fi attacks using commodity hardware. In Proceedings of the 30th Annual Computer Security Applications Conference (2014), ACM, pp. 256–265.

[62] VANHOEF, M., AND PIESSENS, F. All your biases belong to us: Breaking RC4 in WPA-TKIP and TLS. In USENIX Security Symposium (2015).

[63] W3C. Offline web applications. https://www.w3.org/TR/offline-webapps/, May 2008.

[64] W3C. Same-origin policy. https://www.w3.org/Security/wiki/Same_Origin_Policy, January 2010.

[65] W3C. Quota management API. https://www.w3.org/TR/quota-api/, December 2015.

[66] W3C. Service Workers. https://www.w3.org/TR/service-workers/, June 2015.

[72] YAROM, Y., AND FALKNER, K. FLUSH+RELOAD: A high resolution, low noise, L3 cache side-channel attack: A high resolution, low noise, L3 cache side-channel attack. In 23rd USENIX Security Symposium (USENIX Security 14) (2014), pp. 719–732.

[73] ZALEWSKI, M. The tangled Web: A guide to securing modern web applications. No Starch Press, 2012.

[74] ZHANG, F., HE, W., CHEN, Y., LI, Z., WANG, X., CHEN, S., AND LIU, X. Thwarting Wi-Fi side-channel analysis through traffic demultiplexing. Wireless Communications, IEEE Transactions on 13, 1 (2014), 86–98.

[67] WAGNER, D., SCHNEIER, B., ET AL. Analysis of the SSL 3.0 protocol. In The Second USENIX Workshop on Electronic Commerce Proceedings (1996), pp. 29–40.

[75] ZHANG, F., HE, W., AND LIU, X. Defending against traffic analysis in wireless networks through traffic reshaping. In Distributed Computing Systems (ICDCS) (2011).

[68] WANG, T., AND GOLDBERG, I. Comparing web-fingerprinting attacks and defenses. Technical Report CACR, 2013-30, 2014. http://cacr.uwaterloo.ca/techreports/2013/cacr2013-30.pdf, 2014.

[69] WEBKIT. Implement fetch API. https://bugs.webkit.org/show_bug.cgi?id=151937, December 2015.

[70] WHATWG. Storage. https://storage.spec.whatwg.org/, August 2015.

[71] WIGLE. WiFi encryption over time. Retrieved 6 Feb. 2016 from https://wigle.net/enc-large.html.

[76] ZHANG, Y., JUELS, A., REITER, M. K., AND RISTENPART, T. Cross-tenant side-channel attacks in PaaS clouds. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (2014), ACM, pp. 990–1003.

[77] ZHOU, X., DEMETRIOU, S., HE, D., NAVEED, M., PAN, X., WANG, X., GUNTER, C. A., AND NAHRSTEDT, K. Identity, location, disease and more: Inferring your secrets from Android public resources. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security (2013), ACM, pp. 1017–1028.