# Refocusing in 802.11 Wireless Measurement

**Authors:**
- Udayan Deshpande¹
- Chris McDonald²
- David Kotz¹

¹Institute for Security Technology Studies, Department of Computer Science, Dartmouth College
²School of Computer Science and Software Engineering, The University of Western Australia

## Abstract
The edge of the Internet is increasingly wireless. To understand the Internet, one must comprehend the edge, yet measuring wireless networks presents many new challenges. IEEE 802.11 networks support multiple wireless channels, and any monitoring technique involves capturing traffic on each channel to gather a representative sample of frames from the network. This process, known as channel sampling, involves periodic visits to each channel by sniffers, resulting in a sample of the traffic on each channel.

This sampling approach may be sufficient for a system administrator or anomaly detection module to observe unusual behavior in the network. However, once an anomaly is detected, the administrator may require a more extensive traffic sample or need to identify the location of the offending device.

We propose a method that allows measurement applications to dynamically modify the sampling strategy, refocusing the monitoring system to pay more attention to certain types of traffic than others. In this paper, we demonstrate that refocusing is a necessary and promising new technique for wireless measurement.

## 1. Introduction
The new edge of the Internet is wireless. At Dartmouth College, all undergraduate students own wireless laptops and take advantage of ubiquitous 802.11 coverage on campus. Most large enterprises provide wireless coverage for employee use, and many cities are deploying or considering large-scale municipal wireless-access networks. Although these networks were originally intended as a convenience, an overlay for the wired network, for many users and in many places, the wireless network is of fundamental importance. Effective wireless measurement is essential to understanding the edge of the Internet.

There are many motivations for monitoring wireless networks, including network management, security, and research. We consider situations where the network of wireless access points (APs) is augmented with interspersed wireless air monitors (AMs). These dedicated sniffers can provide real-time capture of wireless traffic and measurement of MAC-layer conditions for network analysis and management [6], and intrusion-detection systems (IDS) can analyze live streams of traffic from these AMs to monitor the network for attacks [2,9].

Wireless (802.11) networks allow traffic on multiple parallel channels, but practical monitoring systems can listen to only one or two channels at a time. This approach is limited because there may be a need to monitor all channels (e.g., to locate the presence of ad-hoc networks or rogue APs). If there is only one channel to be monitored, the radio can simply monitor that channel continuously [6]. If no specific channel is desired, most scanning systems simply capture traffic on all channels with a predefined time spent on each channel [11]. Earlier work [2,6] acknowledges the need for smart channel-sampling strategies in security and management applications.

Our earlier work [9] demonstrates how to improve the capture by dynamically scheduling AMs to spend more time on channels with higher frame rates. In this work, we extend our sampling philosophy by demonstrating a technique and framework that allows external applications—such as an administrator’s console or an IDS—to dynamically instruct the AMs to put more effort into capturing traffic that meets a given condition.

We describe the traffic trace that a monitoring application requires at any time by its focus. An application can, of course, filter the stream of captured frames to suit its interests, but we want to allow the application to refocus the measurement system to skew its ongoing traffic capture towards this new focus, capturing more of the desired frames. We recognize that many important scenarios require the capture of a baseline sample, suitable for basic monitoring by multiple applications, and simultaneously a more focused sample(s) required by one or more applications.

For example, an application may be content with a traffic trace that consists of equal samples from each of the channels being monitored in the network. After observing some event, it may wish to refocus most of the sampling effort on the channels where a specific MAC address was observed. This application could be a WLAN intrusion-detection system, an application that displays locations of 802.11 devices around an office, or a system that monitors the quality of voice-over-wireless calls.

We claim that dynamic refocusing helps the wireless-network measurement system be more responsive to the needs of the subscribers of measured data. We describe a method and a tool that enables refocusing.

## 2. Related Work
We draw on related work in wireless measurement and 802.11 security. Few large-scale 802.11 measurement studies have attempted to capture wireless frames from the air. Although a few papers characterize traffic at meetings and conferences [10,13], none consider channel sampling or refocusing. To our knowledge, no commercial products provide refocusing, although some do allow channel sampling; for example, Aruba Networks [1] and Kismet [11]. Our own earlier work [9] focused on the challenge of sampling traffic from many channels and merging frames from many AMs; in this paper, we look at the problem of refocusing through a large-scale experimental deployment. We compare one of the strategies used in the previous paper with our refocusing mechanism.

Security in 802.11 remains a challenge due to many vulnerabilities in the protocol and its implementations [2,4,14, for example]. We expect refocusing to help in capturing more information about an ongoing attack that is first detected during baseline sampling of a network.

A few recent papers describe offline tools to capture and merge wireless frames from multiple AMs located around a building [8,12,15]. These papers concentrate on methods for synchronizing traces collected across multiple AMs into a single chronological trace, inferring missing frames, reconstructing transport-layer flows, and detecting performance artifacts and network inefficiencies. Most of these tools work only on offline traces. One, Jigsaw [8], requires four radios per location, clearly a more expensive solution. When few AMs are available, each radio must sample many channels, and our system of refocusing helps to gather the most relevant information with limited resources. In Jigsaw [8], the authors place 39 monitoring “pods” around the building with four radios each. Each radio (AM) monitors a separate channel (Channels 1, 6, 11, and another “center” frequency). In their coverage experiments, their clients associate with APs and transfer data using scp. They report that their sniffers capture about 90% of all scp frames sent to and from the clients. This experiment assumes that only traffic on the same channels as the APs that can be observed by both the AM and the client, or that can be observed by both the AM and the AP, needs to be monitored. There is no experiment in the paper that measures the coverage in the scenario where only the AP or the client is in the range of a transmitting radio but not the nearby AM. Due to the static allocation of channels to AMs, if there is an AM in range, it may be on a different channel. This case is, of course, important in a security scenario. With the increasing numbers of channels available for transmission in 802.11 networks, simply increasing the number of radios in a “pod” cannot be the answer. It is clear, therefore, that channel sampling is the only practical technique to cover a large monitoring area. The claim made in the Jigsaw paper [7] that monitoring platforms from DAIR [2] and Jigsaw provide “the ability to observe every link-layer network transmission across location, frequency, and time” is overly optimistic.

The DAIR system [2] uses USB NICs to turn an enterprise’s desktop computers into AMs and could benefit from our sampling techniques for collection of traffic from production networks. The newer DAIR-based network management system [6] simply assigns the USB NICs to the channels of the nearby access points, missing important security-related traffic on non-production channels.

## 3. Dingo: A Coordinated Sniffer
We developed a set of software components, named dingo, that collectively enable a variety of packet sampling policies to be defined and controlled. Dingo comprises two main components: `amsniffer`, which runs on each AM device, and `amcontroller`, which runs on a more powerful central Linux server. Dingo also employs an additional software component, a merger developed as part of earlier work and described below. Figure 1 shows the principal components of this software and the communication paths between them.

### 3.1 Architecture
- **`amsniffer`**: Runs on each AM; multi-radio AMs can run an instance for each radio. Command-line options to `amsniffer` indicate which wireless interface should be employed, the default sniffing policy to be followed, and the destination for captured frames.
- **`amcontroller`**: Determines scheduling policies and disseminates them to the AMs. Policies specify a sequence of channel numbers and the duration for which the interface should listen on each channel. Each instance of `amsniffer` executes its current scheduling policy for a requested number of cycles or until directed by `amcontroller` to execute a new policy, either an existing pre-stored policy or one computed by the `amcontroller`.
- **Merger**: Interleaves the AMs’ streams of frames into a chronologically consistent ordering and removes frames captured in duplicate by multiple AMs. The output record includes a list of the receiving AMs and signal strength. The merger’s output is forwarded to subscribing applications and to our `amcontroller`.

### 3.2 Operation
While sampling traffic, each `amsniffer` maintains a small number of counters, including the number of frames captured on each channel, the total length of those frames, and the number of frames matching one or more Boolean predicates provided by the `amcontroller`. At the end of each cycle, `amsniffer` sends its counters to the `amcontroller` for consideration in future scheduling decisions. The range of policies described in our earlier work [9] are based on these simple counts gathered at the AMs. For example, a policy employing proportional sampling spends time on each channel proportional to the recently observed frame rate on that channel.

The predicates are written in a small language, similar to C’s expressions. The language supports all precedence levels, equality and relational operators, and data types including integer, Boolean, string, and MAC address. About 30 keywords in the language correspond to the attributes of each captured frame and the wireless environment in which it was captured. Our predicates provide access to the 802.11 header attributes and a few PHY-layer attributes, and are analogous to the expressions supported by the popular `tcpdump` utility and Berkeley packet filter. For example, predicates may determine whether a captured frame was a control, management, or data frame, may examine the source, destination, and BSSID MAC addresses of frames, examine a frame’s length, payload length, the channel on which it arrived, or its relative signal strength.

To support refocusing, Dingo’s `amcontroller` uses the predicate counters in a modified form of proportional sampling, scheduling each `amsniffer` to spend time on each channel in proportion to the number of frames matching the predicate. In this manner, `amsniffers` focus on the traffic of interest while still devoting a small amount of time on other channels to determine if the traffic pattern is observed there. For example, the predicate `"src == 00:16:cb:b7:18:82"` could be used to focus on traffic from a stolen laptop’s wireless interface.