# Capturing DDL Events in PostgreSQL

## Presenter
- **Álvaro Herrera**
- **Email:** PI:EMAIL
- **Company:** 2ndQuadrant Ltd.
- **Website:** [2ndQuadrant](http://www.2ndQuadrant.com/)

## Event
- **PGDay.ru 2015**
- **Website:** [PGDay.ru 2015](http://2015.pgday.ru/)
- **Date:** July 2015

## Introduction
- How can you capture DDL (Data Definition Language) events in PostgreSQL?
  - Use event triggers, a feature introduced in PostgreSQL 9.3.
  - Event triggers run a user-defined function when a database event occurs.

## Funding
- The research leading to these results has received funding from the European Union’s Seventh Framework Programme (FP7/2007-2013) under grant agreement n°318633.

## Syntax of `CREATE EVENT TRIGGER`
```sql
CREATE EVENT TRIGGER name
ON event
[ WHEN filter_variable IN (filter_value [, ... ])
[ AND ... ] ]
EXECUTE PROCEDURE function_name();
```

## Supported Events
- `ddl_command_start`
- `ddl_command_end`
- `sql_drop`
- `table_rewrite` (introduced in 9.5)
- More events could be added in the future.

## Function Capabilities
- You can perform any action that is possible within a function.
- PL/pgSQL is the most commonly used language for event trigger functions.
- Magic variables like `TG_TAG` and `TG_EVENT` provide context information.
- Other languages and set-returning functions can also be used.

### Example
```sql
alvherre=# CREATE TABLE mytable (col INTEGER);
NOTICE: we got a CREATE TABLE event
alvherre=# create schema schema_b
create table foo (a int)
create table bar (b int);
NOTICE: we got a CREATE SCHEMA event
```

### Trivial (Useless) Example
```sql
CREATE FUNCTION snitch() RETURNS event_trigger
LANGUAGE plpgsql VOLATILE AS $$
BEGIN
  RAISE NOTICE 'we got a % event', TG_TAG;
END;
$$;

CREATE EVENT TRIGGER snitch
ON ddl_command_end
EXECUTE PROCEDURE snitch();

alvherre=# CREATE TABLE mytable (col INTEGER);
NOTICE: we got a CREATE TABLE event
alvherre=# create schema schema_b
create table foo (a int)
create table bar (b int);
NOTICE: we got a CREATE SCHEMA event
```

## Dropped Objects: `pg_event_trigger_dropped_objects()`
- Can be used in `sql_drop` only.
- Columns:
  - `classid`, `objid`, `objsubid`: OID-based object identifier.
  - `original`: Whether the object was a direct target of the DROP.
  - `normal`: Whether there is a “normal” dependency path from the parent object.
  - `is_temporary`: Whether the object was temporary.
  - `object_type`: Type of the object (e.g., "table", "schema").
  - `schema_name`: Containing schema of the object.
  - `object_name`: Name of the object.
  - `object_identity`: Machine-readable object identity.
  - `address_names`, `address_args`: Can be passed to `pg_get_object_address` to retrieve OID-based object identifiers.

### Additional Functions
- `pg_identify_object(classid, objid, objsubid)`: Obtain machine-readable string object identity.
- `pg_get_object_address(object_type, address_names, address_args)`: Obtain OID-based object identity.

### Example
```sql
CREATE FUNCTION report_drop() RETURNS event_trigger
LANGUAGE plpgsql AS $$
DECLARE
  r RECORD;
BEGIN
  FOR r IN SELECT * FROM pg_event_trigger_dropped_objects() LOOP
    RAISE NOTICE 'dropped: type "%" identity %', r.object_type, r.object_identity;
  END LOOP;
END;
$$;

CREATE EVENT TRIGGER report_drop
ON sql_drop EXECUTE PROCEDURE report_drop();

alvherre=# ALTER TABLE mytable DROP COLUMN col;
NOTICE: dropped: type "table column" identity public.mytable.col
NOTICE: we got a ALTER TABLE event
```

## DDL Commands: `pg_event_trigger_ddl_commands()`
- Columns:
  - `classid`, `objid`, `objsubid`: Same as before.
  - `command_tag`: Command tag (e.g., "CREATE FUNCTION").
  - `object_type`: Type of the object (e.g., "function").
  - `schema_name`: Name of the containing schema.
  - `object_identity`: Machine-readable identity.
  - `in_extension`: Whether the command executes in an extension script.
  - `command`: Internal C struct representing the command.

### Example
```sql
CREATE FUNCTION snitch() RETURNS event_trigger
LANGUAGE plpgsql VOLATILE AS $$
DECLARE
  r RECORD;
BEGIN
  FOR r IN SELECT * FROM pg_event_trigger_ddl_commands() LOOP
    RAISE NOTICE 'we got a % event for object "%"', r.command_tag, r.object_identity;
  END LOOP;
END;
$$;

CREATE EVENT TRIGGER snitch
ON ddl_command_end
EXECUTE PROCEDURE snitch();

$= CREATE SCHEMA sch
CREATE TABLE foo (a serial)
CREATE TABLE bar (b integer);
NOTICE: we got a CREATE SCHEMA event for object "sch"
NOTICE: we got a CREATE SEQUENCE event for object "sch.foo_a_seq"
NOTICE: we got a CREATE TABLE event for object "sch.foo"
NOTICE: we got a ALTER SEQUENCE event for object "sch.foo_a_seq"
NOTICE: we got a CREATE TABLE event for object "sch.bar"
```

## JSON Output
- An extension with a function that receives `pg_ddl_command` and returns JSON.
- The event trigger function can modify the JSON.
- A function to convert JSON back to text.

### Example JSON Blob
```json
{
  "fmt": "CREATE %{persistence}s TABLE %{identity}D %{if_not_exists}s (%{table_elements:, }s) %{inherits}s %{on_commit}s %{tablespace}s",
  "persistence": "UNLOGGED",
  "identity": {
    "objname": "t1",
    "schemaname": "public"
  },
  "if_not_exists": {
    "fmt": "IF NOT EXISTS",
    "present": false
  },
  "inherits": {
    "fmt": "INHERITS (%{parents:, }D)",
    "parents": null,
    "present": false
  },
  "on_commit": {
    "fmt": "ON COMMIT %{on_commit_value}s",
    "on_commit_value": null,
    "present": false
  },
  "table_kind": "plain",
  "tablespace": {
    "fmt": "TABLESPACE %{tablespace}I",
    "present": false,
    "tablespace": null
  }
}
```

### Possible "fmt" Escapes
- `%%`: Expand to a literal `%`.
- `%{name}I`: Expand as a single, non-qualified identifier.
- `%{name}D`: Expand as a possibly-qualified identifier.
- `%{name}T`: Expand as a type name.
- `%{name}O`: Expand as an operator name.
- `%{name}L`: Expand as a string literal (quote using single quotes).
- `%{name}s`: Expand as a simple string (no quoting).
- `%{name}n`: Expand as a simple number (no quoting).
- `%{name}R`: Expand as a role name (possibly quoted name, or PUBLIC).

### Helper Functions
- `jsonb_set(json, path, value)`
- `pg_event_trigger_expand_command(jsonb)`

### Example
```sql
CREATE UNLOGGED TABLE public.t1
(a pg_catalog.int4
DEFAULT nextval('t1_a_seq'::regclass)
NOT NULL );
```

## AXLE Project
- **Title:** Advanced Analytics for eXtremely Large European Databases
- **Website:** [AXLE Project](http://www.axleproject.eu/)

## Questions and Feedback
- Thank you for listening.
- Please provide feedback on the JSON side of things.

## Event Triggers: Development History
- **Thread: [HACKERS] Command Triggers**
  - 135 messages, 10 patch versions: Nov 2011 – Mar 2012
  - [Link](http://www.postgresql.org/message-id/PI:EMAIL)
- **Thread: [HACKERS] Command Triggers, patch v11**
  - 115 messages, 5 patch versions: Feb 2012 – Mar 2012
  - [Link](http://www.postgresql.org/message-id/PI:EMAIL)
- **Thread: [HACKERS] Command Triggers, v16**
  - 51 messages, 1 patch version: March 2012
  - [Link](http://www.postgresql.org/message-id/PI:EMAIL)
- **Subject: [HACKERS] Command Triggers (v17)**
  - 1 message, 1 patch version: March 2012
  - [Link](http://www.postgresql.org/message-id/PI:EMAIL)
- **Thread: [HACKERS] Command Triggers patch v18**
  - 43 messages, 1 patch version: Mar 2012 – Apr 2012
  - [Link](http://www.postgresql.org/message-id/PI:EMAIL)

- **Thread: [HACKERS] Event Triggers reduced, v1**
  - 64 messages, 10 patch versions: Jun 2012 – Aug 2012
  - [Link](http://www.postgresql.org/message-id/PI:EMAIL)
- **Commit: Syntax support and documentation for event triggers.**
  - Date: Wed Jul 18 10:16:16 2012 -0400
  - [Link](http://git.postgresql.org/pg/commitdiff/3855968f328918b6cd1401dd11d109d471a54d40)
- **Commit: Make new event trigger facility actually do something.**
  - Date: Fri Jul 20 11:38:47 2012 -0400
  - [Link](http://git.postgresql.org/pg/commitdiff/3a0e4d36ebd7f477822d5bae41ba121a40d22ccc)

- **Thread: [HACKERS] Event Triggers: adding information**
  - 114 messages, 9 patch versions: December 2012
  - [Link](http://www.postgresql.org/message-id/PI:EMAIL)
- **Commit: Add ddl_command_end support for event triggers.**
  - Date: Mon Jan 21 18:00:24 2013 -0500
  - [Link](http://git.postgresql.org/pg/commitdiff/841a5150c575ccd89e4b03aec66eeeefb21f3cbe)

- **Thread: [HACKERS] sql_drop Event Trigger**
  - 94 messages, 13 patch versions: Jan 2013 – Mar 2013
  - [Link](http://www.postgresql.org/message-id/PI:EMAIL)
- **Commit: Allow extracting machine-readable object identity**
  - Date: Wed Mar 20 18:19:19 2013 -0300
  - [Link](http://git.postgresql.org/pg/commitdiff/f8348ea32ec8d713cd6e5d5e16f15edef22c4d03)
- **Commit: Add sql_drop event for event triggers**
  - Date: Thu Mar 28 13:05:48 2013 -0300
  - [Link](http://git.postgresql.org/pg/commitdiff/473ab40c8bb3fcb1a7645f6a7443a0424d70fbaf)

- **Thread: [HACKERS] Add CREATE support to event triggers**
  - 106 messages, 9 patch versions: Nov 2013 – Jun 2014
  - [Link](http://www.postgresql.org/message-id/PI:EMAIL)
- **Thread: [HACKERS] deparsing utility commands**
  - 54 messages, 12 patch versions: February 2015 – May 2015
  - [Link](http://www.postgresql.org/message-id/PI:EMAIL)
- **Commit: Allow on-the-fly capture of DDL event details**
  - Date: Mon May 11 19:14:31 2015 -0300
  - [Link](http://git.postgresql.org/pg/commitdiff/b488c580aef4e05f39be5daaab6464da5b22a494)