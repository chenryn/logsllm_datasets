### Table I: Signature Accuracy and Potential Improvements

Our research has demonstrated that the identified signatures are highly accurate, based on the methodology outlined in Section IV and the Abstract Syntax Tree (AST)-based matching described in Section V. However, there are several avenues for further enhancing these signatures:

1. **Enhanced Instrumentation Points**: By adding more instrumentation points, we can reduce false positives and create even more unique signatures per event-loop turn.
2. **Behavioral Variability**: Many scripts exhibit behavior that is neither purely deterministic nor completely unpredictable. Some code sections may produce a finite but non-unique set of signatures. Further crawling could help generate a more comprehensive set of possible signatures for known privacy-and-security-affecting code, thereby increasing recall.

### D. Web Compatibility

Current web-blocking tools face significant trade-offs between coverage and usability. Decisions made at the URL level often lead to over-blocking (disrupting benign parts of a website) or under-blocking (allowing harmful behavior). By shifting the unit of analysis to the event-loop turn, privacy tools can make more granular decisions, better distinguishing between unwanted and benign code. Although a detailed evaluation of the web-compatibility improvements of our proposed system is left for future work, this approach shows promise for researchers and activists aiming to develop practical and usable web privacy tools.

### E. Limitations

#### 1. Automated Crawling
The most significant limitation of our work is the reliance on automated crawls to build signatures. While these crawls cover a large portion of the web, they have blind spots, such as missing scripts that are only accessible after authentication or complex interactions on a page. Previous studies have attempted to address this by using paid research-subject volunteers [33] or other methods to approximate real-world usage. These efforts, however, are beyond the scope of this project.

#### 2. Evasion
Although our behavioral-based signature approach is more robust against evasion than existing URL-focused web privacy-and-security tools, it is not foolproof. For instance, an attacker could distribute a privacy-harming behavior across multiple colluding code units, which our system might not detect without post-processing to merge the behavior of colluding scripts. Additionally, attackers might introduce intentional non-determinism, such as shuffling the order of operations without affecting the code's outcome. Our system could mitigate some of these issues through further crawling or generalizations in signature generation, but these remain current limitations and areas for future work.

We note, however, that our signature-based approach is resilient to many forms of obfuscation that would confuse other signature-based approaches. Since our approach relies on code behavior rather than text representation, it is resistant to common obfuscation techniques like code rewriting, modifying text encoding, and encrypting the code. Our approach is also robust against obfuscation techniques that only change control flow without altering script behavior.

#### 3. False Positives
Like all signature-based approaches, our method involves a trade-off between false-positive and false-negative rates. Encoding more information in a signature increases confidence in matches but risks missing similar-but-not-identical cases. As described in Section III-D, our system builds signatures for graphs with at least 13 edges and 4 nodes. This minimum graph size was selected iteratively to eliminate false positives through manual examination. However, it is possible that this minimum size may not prevent all false positives, given the number and diversity of scripts on the web. Deployments that prioritize accuracy over recall could increase the minimum graph size used in signature generation.

### VII. Related Work

#### A. Blocking Trackers
Most users rely on browser extensions to protect against web tracking, such as Adblock Plus [1], Disconnect [2], Ghostery [4], and Privacy Badger from EFF [10]. These extensions use hand-crafted filter lists of HTML elements and URLs associated with advertisers and trackers [3]. The transition to WebExtensions Manifest v3 [8] threatens the capabilities of these tools, as it limits dynamic content blocking. Previous research has explored automated approaches to improve content blocking, such as Gugelmann et al.'s classifier for identifying privacy-intrusive web services in HTTP traffic [14] and NoMoAds, which uses a mobile device's network interface to detect ad requests [30].

#### B. Instrumenting the Browser
Extracting information from the browser is crucial for understanding web tracking. Tools like OpenWPM leverage browser extensions to monitor page events [11]. In-band approaches, such as OpenWPM, inject JavaScript into visited pages to capture all events, which can affect accuracy. Recently, there has been a shift towards out-of-band (in-browser) instrumentation, such as AdGraph [19] and VisibleV8 [20]. Our work follows a similar out-of-band approach, building signatures of tracking scripts based on dynamic code execution by instrumenting Blink and V8 in the Chromium browser.

#### C. Code Similarity
Code similarity is a well-established field in software engineering [29]. From a security perspective, finding similarities with malicious samples has been explored. Revolver [22] performed large-scale clustering of JavaScript samples to detect evasive samples. Ikram et al. [16] suggested using syntactic and structural features to build a classifier for detecting tracking scripts. Unlike these approaches, our method identifies tracking scripts based on their runtime behavior in the browser, making it resilient to obfuscation [31] and AST manipulation [12].

#### D. Other Content Blocking Strategies
Another approach to content blocking is perceptual detection of advertisements [34, 27], which identifies ads based on visual patterns. While this is an exciting new avenue, there is already work on creating adversarial attacks against perceptual ad blocking [35].

### VIII. Conclusion

Content blocking tools are essential for protecting web security and privacy, but their URL-focused nature makes them susceptible to trivial circumventions. Our work addresses this issue by identifying malicious code using highly granular, event-loop turn-level signatures of runtime JavaScript behavior. We contribute the first web-scale measurement of evasion on the web and provide the groundwork for practical defenses. To further support a privacy-and-security-respecting web, we release the source code for our instrumentation and signature generation systems, the raw data gathered during this work, and filter list rules that can help users of existing tools defend against a subset of the problem [5].

### IX. Acknowledgements

We thank our shepherd Ben Stock and our anonymous reviewers for their insightful feedback and comments. This work was supported by the Office of Naval Research (ONR) under grant N00014-17-1-2541, DARPA under agreement number FA8750-19-C-0003, and the National Science Foundation (NSF) under grant CNS-1703375.

### References

[1] Adblock Plus. https://adblockplus.org/
[2] Disconnect. https://disconnect.me/
[3] EasyList and EasyPrivacy filter lists. https://easylist.to/
[4] Ghostery. https://www.ghostery.com/
[5] Semantic signatures. https://github.com/semantic-signatures, 2020
[6] Sadia Afroz, Michael Carl Tschantz, Shaarif Sajid, Shoaib Asif Qazi, Mobin Javed, and Vern Paxson. Exploring server-side blocking of traffic. arXiv preprint arXiv:1805.11606, 2018.
[7] Alexa. How are Alexa's traffic rankings determined? https://support.alexa.com/hc/en-us/articles/200449744-How-are-Alexa-s-trafﬁc-rankings-determined-
[8] Chromium Blog. Trustworthy Chrome Extensions, by default. https://blog.chromium.org/2018/10/trustworthy-chrome-extensions-by-default.html
[9] Digital Advertising Alliance (DAA). Self Regulatory Principles for Online Behavioral Advertising. https://digitaladvertisingalliance.org/sites/aboutads/files/DAA files/seven-principles-07-01-09.pdf, 2009
[10] EFF. Privacy Badger. https://www.eff.org/privacybadger
[11] Steven Englehardt and Arvind Narayanan. Online tracking: A 1-million-site measurement and analysis. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2016
[12] Aurore Fass, Michael Backes, and Ben Stock. HideNoSeek: Camouflaging Malicious JavaScript in Benign ASTs. 2019
[13] Kiran Garimella, Orestis Kostakis, and Michael Mathioudakis. Ad-blocking: A study on performance, privacy and counter-measures. In Proceedings of the 2017 ACM on Web Science Conference, pages 259–262. ACM, 2017
[14] David Gugelmann, Markus Happe, Bernhard Ager, and Vincent Lenders. An automated approach for complementing ad blockers' blacklists. Proceedings of the Symposium on Privacy Enhancing Technologies (PETS), 2015
[15] Raymond Hill. uBlock Origin. https://github.com/gorhill/uBlock
[16] Muhammad Ikram, Hassan Jameel Asghar, Mohamed Ali Kaafar, Anirban Mahanti, and Balachandar Krishnamurthy. Towards seamless tracking-free web: Improved detection of trackers via one-class learning. Proceedings of the Symposium on Privacy Enhancing Technologies (PETS), 2017
[17] Mozilla Inc. - mozilla — mdn. WebExtensions/API/webRequest/filterResponseData. https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/webrequest.filterresponsedata
[18] Luca Invernizzi, Kurt Thomas, Alexandros Kapravelos, Oxana Comanescu, Jean-Michel Picod, and Elie Bursztein. Cloak of visibility: Detecting when machines browse a different web. In 2016 IEEE Symposium on Security and Privacy (SP), pages 743–758. IEEE, 2016
[19] Umar Iqbal, Peter Snyder, Shitong Zhu, Benjamin Livshits, Zhiyun Qian, and Zubair Shafiq. Adgraph: A graph-based approach to ad and tracker blocking. In Proceedings of the IEEE Symposium on Security and Privacy (S&P), 2020
[20] Jordan Jueckstock and Alexandros Kapravelos. VisibleV8: In-browser Monitoring of JavaScript in the Wild. In Proceedings of the ACM Internet Measurement Conference (IMC), 2019
[21] Jordan Jueckstock, Shaown Sarker, Peter Snyder, Panagiotis Papadopoulos, Matteo Varvello, Benjamin Livshits, and Alexandros Kapravelos. The blind men and the internet: Multi-vantage point web measurements. arXiv preprint arXiv:1905.08767, 2019
[22] Alexandros Kapravelos, Yan Shoshitaishvili, Marco Cova, Chris Kruegel, and Giovanni Vigna. Revolver: An Automated Approach to the Detection of Evasive Web-based Malware. In Proceedings of the USENIX Security Symposium, 2013
[23] Bo Li, Phani Vadrevu, Kyu Hyung Lee, and Roberto Perdisci. JSgraph: Enabling reconstruction of web attacks via efficient tracking of live in-browser JavaScript executions. In Proceedings of the Symposium on Network and Distributed System Security (NDSS), 2018
[24] Zhou Li, Kehuan Zhang, Yinglian Xie, Fang Yu, and XiaoFeng Wang. Knowing your enemy: Understanding and detecting malicious web advertising. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 674–686. ACM, 2012
[25] Ben Miroglio, David Zeber, Jofish Kaye, and Rebecca Weiss. The effect of ad blocking on user engagement with the web. In Proceedings of the 2018 World Wide Web Conference, pages 813–821. International World Wide Web Conferences Steering Committee, 2018
[26] Mozilla. Event loop. https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#Event loop, 2020
[27] Adblock Plus. Sentinel - the artificial intelligence ad detector. https://adblock.ai/
[28] Enric Pujol, Oliver Hohlfeld, and Anja Feldmann. Annoyed users: Ads and ad-block usage in the wild. In Proceedings of the 2015 Internet Measurement Conference, pages 93–106. ACM, 2015
[29] Chanchal Kumar Roy and James R Cordy. A Survey on Software Clone Detection Research. Queen’s School of Computing, Technical Report, 2007
[30] Anastasia Shuba, Athina Markopoulou, and Zubair Shafiq. NoMoAds: Effective and efficient cross-app mobile ad-blocking. Proceedings of the Symposium on Privacy Enhancing Technologies (PETS), 2018
[31] Philippe Skolka, Cristian-Alexandru Staicu, and Michael Pradel. Anything to Hide? Studying Minified and Obfuscated Code in the Web. In Proceedings of the Web Conference (WWW), 2019
[32] Peter Snyder, Lara Ansari, Cynthia Taylor, and Chris Kanich. Browser feature usage on the modern web. In Proceedings of the 2016 Internet Measurement Conference, pages 97–110. ACM, 2016
[33] Peter Snyder, Cynthia Taylor, and Chris Kanich. Most websites don’t need to vibrate: A cost-benefit approach to improving browser security. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, pages 179–194. ACM, 2017
[34] Grant Storey, Dillon Reisman, Jonathan Mayer, and Arvind Narayanan. The future of ad blocking: An analytical framework and new techniques. arXiv preprint arXiv:1705.08568, 2017
[35] Florian Tramèr, Pascal Dupré, Gili Rusak, Giancarlo Pellegrino, and Dan Boneh. AdVersarial: Defeating Perceptual Ad Blocking. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2019
[36] Michael Carl Tschantz, Sadia Afroz, Shaarif Sajid, Shoaib Asif Qazi, Mobin Javed, and Vern Paxson. A bestiary of blocking: The motivations and modes behind website unavailability. In 8th USENIX Workshop on Free and Open Communications on the Internet (FOCI 18), 2018