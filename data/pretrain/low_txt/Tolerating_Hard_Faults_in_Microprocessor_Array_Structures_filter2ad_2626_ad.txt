### Comparison of SRAS and Unmodified DIVA in Handling Faults

#### ROB Faults
**Figure 4.** This figure compares the performance of SRAS (Self-Repairing Architecture System) and the unmodified DIVA (Dynamic Instruction Verification Architecture) when Register-File (RF) faults are injected into the simulated system. The benchmarks used are from the SPEC 2000 FP (Floating Point) and Integer Benchmarks, including applications such as `lucas`, `mesa`, `mgrid`, `sixtrack`, `swim`, and `wupwise`.

- **SPEC 2000 FP Benchmarks:**
  - **No faults:** Performance is at its baseline.
  - **1 fault, all bits stuck-at 1:** Performance degradation is observed.
  - **4 faults, all bits stuck-at 1:** Further performance degradation.
  - **8 faults, all bits stuck-at 1:** Significant performance degradation.

- **SPEC 2000 Integer Benchmarks:**
  - **No faults:** Baseline performance.
  - **1 fault, all bits stuck-at 1:** Performance drop.
  - **4 faults, all bits stuck-at 1:** Increased performance drop.
  - **8 faults, all bits stuck-at 1:** Severe performance drop.

#### BHT Faults
**Figure 5.** This figure compares the performance of SRAS and the unmodified DIVA when Branch History Table (BHT) faults are injected into the simulated system. The benchmarks used are the same as in Figure 4.

- **SPEC 2000 FP Benchmarks:**
  - **No faults:** Baseline performance.
  - **1 fault, all bits stuck-at 1:** Performance drop.
  - **4 faults, all bits stuck-at 1:** Increased performance drop.
  - **8 faults, all bits stuck-at 1:** Severe performance drop.

- **SPEC 2000 Integer Benchmarks:**
  - **No faults:** Baseline performance.
  - **1 fault, all bits stuck-at 1:** Performance drop.
  - **4 faults, all bits stuck-at 1:** Increased performance drop.
  - **8 faults, all bits stuck-at 1:** Severe performance drop.

### Observations
The results indicate that SRAS is more effective in handling RF faults compared to BHT faults. For sparsely used tables with a low Architectural Vulnerability Factor (AVF), such as the BHT, SRAS may not be as beneficial.

### Acknowledgments
This work is supported in part by the National Science Foundation under grants CCR-0309164 and EIA-9972879, IBM, and a Duke Warren Faculty Scholarship. We thank the Duke Architecture group for their insightful comments and criticisms on a draft of this paper.

### References
1. M. Abramovici, M. A. Breuer, and A. D. Friedman. *Digital Systems Testing and Testable Design*. IEEE Press, 1990.
2. T. Austin, E. Larson, and D. Ernst. *SimpleScalar: An Infrastructure for Computer System Modeling*. IEEE Computer, 35(2):59–67, Feb. 2002.
3. T. M. Austin. *DIVA: A Reliable Substrate for Deep Submicron Microarchitecture Design*. In Proc. of the 32nd Annual IEEE/ACM International Symposium on Microarchitecture, pages 196–207, Nov. 1999.
4. R. Blish et al. *Critical Reliability Challenges for the International Technology Roadmap for Semiconductors (ITRS)*. Report 03024377A-TR, International SEMATECH, Mar. 2003.
5. T. Chen and G. Sunada. *A Self-Testing and Self-Repairing Structure for Ultra-Large Capacity Memories*. International Test Conference, pages 623–631, Oct. 1992.
6. T. Chen and G. Sunada. *An Ultra-Large Capacity Single-Chip Memory Architecture with Self-Testing and Self-Repairing*. In Proc. of the International Conference on Computer Design (ICCD), pages 576–581, Oct. 1992.
7. T. J. Dell. *A White Paper on the Benefits of Chipkill-Correct ECC for PC Server Main Memory*. IBM Microelectronics Division Whitepaper, Nov. 1997.
8. L. Gwennap. *Alpha 21364 Bottleneck*. Microprocessor Report, Oct. 1998.
9. D. Boggs, G. Hinton, D. Carmean, A. Kyker, and P. Roussel. *The Microarchitecture of the Pentium 4 Processor*. Intel Technology Journal, Feb. 2001.
10. IBM. *Enhancing IBM Netfinity Server Reliability: IBM Chipkill Memory*. IBM Whitepaper, Feb. 1999.
11. P. Mazumder and J. S. Yih. *A Novel Built-In Self-Repair Approach to VLSI Memory Yield Enhancement*. In Proc. of the International Test Conference, pages 833–841, 1990.
12. S. McFarling. *Combining Branch Predictors*. Technical Report TN-36, Digital Western Research Laboratory, June 1993.
13. S. S. Mukherjee et al. *A Systematic Methodology to Compute the Architectural Vulnerability Factors for a High-Performance Microprocessor*. In Proc. of the 36th Annual IEEE/ACM International Symposium on Microarchitecture, Dec. 2003.
14. M. Nicolaidis, N. Achouri, and S. Boutobza. *Dynamic Data-bit Memory Built-In Self-Repair*. In Proc. of the International Conference on Computer Aided Design, pages 588–594, Nov. 2003.
15. K. Nikolic, A. Sadek, and M. Jewett. *Integrity S2: A Fault-Tolerant UNIX Platform*. In Proc. of the 21st International Symposium on Fault-Tolerant Computing Systems, pages 512–519, June 1991.
16. D. A. Patterson, G. Gibson, and R. H. Katz. *A Case for Redundant Arrays of Inexpensive Disks (RAID)*. In Proc. of 1988 ACM SIGMOD Conference, pages 109–116, June 1988.
17. K. Sawada, T. Sakurai, Y. Uchino, and K. Yamada. *Built-in Self Repair Circuit for High Density ASMIC*. In Proc. of the IEEE Custom Integrated Circuits Conference, 1989.
18. T. Sherwood, E. Perelman, G. Hamerly, and B. Calder. *Automatically Characterizing Large Scale Program Behavior*. In Proc. of the Tenth International Conference on Architectural Support for Programming Languages and Operating Systems, Oct. 2002.
19. J. E. Smith. *A Study of Branch Prediction Strategies*. In Proc. of the 8th Annual Symposium on Computer Architecture, pages 135–148, May 1981.
20. L. Spainhower and T. A. Gregg. *IBM S/390 Parallel Enterprise Server G5 Fault Tolerance: A Historical Perspective*. IBM Journal of Research and Development, 43(5/6), September/November 1999.
21. S. Thompson et al. *An Enhanced 130nm Generation Logic Technology Featuring 60nm Transistors for High Performance and Low Power at 0.7-1.4V*. In Proc. of the International Electron Devices Meeting, pages 257–260, Dec. 2001.
22. D. Wilson. *The Stratus Computer System*. In Resilient Computer Systems, pages 208–231, 1985.
23. T.-Y. Yeh and Y. Patt. *Two-level Adaptive Training Branch Prediction*. In Proc. of the 24th Annual IEEE/ACM Symposium on Microarchitecture, pages 51–61, Nov. 1991.
24. L. Youngs and S. Paramanandam. *Mapping and Repairing Embedded-Memory Defects*. IEEE Design & Test of Computers, pages 18–24, January-March 1997.
25. M. H. Lipasti and J. P. Shen. *Exceeding the Dataflow Limit via Value Prediction*. In Proc. of the 29th Annual IEEE/ACM Symposium on Microarchitecture, pages 226–237, Dec. 1996.

**Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04)**
0-7695-2052-9/04 $ 20.00 © 2004 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021, at 11:51:42 UTC from IEEE Xplore. Restrictions apply.