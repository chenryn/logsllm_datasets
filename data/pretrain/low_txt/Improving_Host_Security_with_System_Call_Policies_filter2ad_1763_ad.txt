# System Call Frequency and Performance Impact

## System Calls
**Figure 10: Histogram of System Call Frequency for Compilation Benchmark**
- The performance impact of application confinement is primarily determined by the number of system calls that require a policy decision by the user space daemon.
- The histogram illustrates that the most frequent system calls can be managed by the in-kernel policy.

### Normal Execution Time (in seconds)
- **Benchmark**: 10.44 ± 0.09
- **Compile**: 0.84 ± 0.03
- **Crawler**: 8.55 ± 0.01
- **Gzip-4.9M**: 8.57 ± 0.02

### Systrace Execution Time (in seconds)
- **Benchmark**: 13.71 ± 0.09
- **Compile**: 0.88 ± 0.03
- **Crawler**: 8.57 ± 0.02

### Increase in Execution Time (in percent)
- **Benchmark**: 31 ± 1.4
- **Compile**: 4.8 ± 5.2
- **Crawler**: 0.2 ± 0.3

**Figure 11: Overview of Different Macrobenchmarks Comparing the Execution Time of an Unmonitored Run with the Execution Time Running Under Systrace**
- The compilation benchmark incurs the highest performance penalty, yet it remains complex, involving over forty applications and still showing acceptable performance.
- Other benchmarks under Systrace incur only minor performance penalties.

### Detailed Analysis
- A direct comparison of execution times is provided in Figure 11.
- Under Systrace, the running time increases by 31% ± 1.4%.
- The number of executed system calls rises to approximately 726,000 due to filename normalization, which frequently calls `lstat` and `fstat`.
- In contrast, NetBSD 1.6I shows a significantly smaller increase in system calls because it implements a `getcwd` system call.

### Web Crawler Benchmark
- A second macrobenchmark measures the runtime of a web crawler that downloads files from a local web server.
- The crawler retrieves about 140 files with an average throughput of 2 MB/s.
- The running time under Systrace increases by 4.8% ± 5.2%, as shown in Figure 11.

### Additional Costs
- Although Systrace introduces noticeable overhead, it is not prohibitive, especially for interactive applications like web browsers, where the end-user does not observe a significant performance decrease.

## Future Work
- This work opens up several avenues for future research.
- Systrace can be used for quality assurance by injecting random faults into a running application, allowing us to introduce error conditions and observe if the application recovers correctly.
- Examples include simulating resource starvation, such as a full filesystem or out-of-memory conditions.
- Using argument replacement, we can change how an application interacts with the operating system, present a virtual filesystem layout, or redirect network traffic to different hosts or application-level firewalls.

## Conclusion
- This paper presents a new approach for application confinement that supports automatic and interactive policy generation, auditing, intrusion detection, and privilege elevation, applicable to both system services and user applications.
- System call interception is a flexible and appropriate mechanism for intrusion prevention.
- Our hybrid implementation ensures fail-safe operation while maintaining low performance overhead and good portability.
- The translation of system call arguments into human-readable strings allows for a simple policy language and fine-grained policies.
- Privilege elevation, in conjunction with application confinement, significantly reduces the privileges required by system services, enabling fine-grained privileges without requiring root user access.
- Our security analysis addresses common issues with system call interception tools and discusses further functionalities such as intrusion detection and prevention.
- The performance of Systrace is analyzed, showing that the additional overhead is acceptable and often unnoticeable to the user of a sandboxed application.

## Acknowledgments
- I would like to thank Peter Honeyman, Terrence Kelly, Chuck Lever, Ken MacInnis, Joe McClain, Perry Metzger, and Jose Nazario for their careful reviews.
- I also thank Marius Eriksen, Angelos Keromytis, Patrick McDaniel, Perry Metzger, Dug Song, and Markus Watts for helpful discussions on this topic.

## References
- [1] Anurag Acharya and Mandar Raje. MAPbox: Using Parameterized Behavior Classes to Conﬁne Applications. In Proceedings of the 9th USENIX Security Symposium, August 2000. 2, 4, 9
- [2] Albert Alexandrov, Paul Kmiec, and Klaus Schauser. Consh: Conﬁned Execution Environment for Internet Computations, 1998. 2
- [3] Lee Badger, Daniel F. Sterne, David L. Sherman, Kenneth M. Walker, and Sheila A. Haghighat. A Domain and Type Enforcement UNIX Prototype. In Proceedings of the 5th USENIX Security Symposium, pages 127–140, June 1995. 2
- [4] Steven M. Bellovin. Computer Security - An End State? Communications of the ACM, 44(3), March 2001. 1
- [5] Matt Bishop. How to write a setuid program. ;login;, 12(1):5–11, 1987. 1, 3
- [6] Matt Blaze, Joan Feigenbaum, John Ioannidis, and Angelos Keromytis. The KeyNote trust-management system version 2. RFC 2704, September 1999. 4
- [7] Matt Blaze, Joan Feigenbaum, and Jack Lacy. Decentralized Trust Management. In Proceedings of the 1996 IEEE Symposium on Security and Privacy, pages 164–173, May 1996. 4
- [8] CERT. OpenBSD contains buffer overflow in “select” call. Vulnerability Note VU#259787, August 2002. http://www.kb.cert.org/vuls/id/259787. 1
- [9] Silvio Cesare. FreeBSD Security Advisory FreeBSD-SA-02:38.signed-error. http://archives.neohapsis.com/archives/freebsd/2002-08/0094.html, August 2002. 10
- [10] Suresh N. Chari and Pau-Chen Cheng. BlueBox: A Policy-driven, Host-Based Intrusion Detection System. In Proceedings of the ISOC Symposium on Network and Distributed System Security, February 2002. 2
- [11] Hao Chen, David Wagner, and Drew Dean. Setuid Demystiﬁed. In Proceedings of the 11th Usenix Security Symposium, August 2002. 1
- [12] William R. Cheswick and Steven M. Bellovin. Firewalls and Internet Security Repelling the Willy Hacker. Addison-Wesley Publishing Company, 1994. 1
- [13] M. Coleman. Subterfogue: A Framework for Observing and Playing with Reality of Software. http://subterfugue.org/. 2
- [14] Pawl J. Dawidek. Cerb: System Firewall Mechanism. http://cerber.sourceforge.net/. 2
- [15] G. Fernandez and L. Allen. Extending the UNIX Protection Model with Access Control Lists. In Proceedings of the Summer 1988 USENIX Conference, pages 119–132, 1988. 1, 2
- [16] Stephanie Forrest, Steven A. Hofmeyr, Anil Somayaji, and Thomas A. Longstaff. A Sense of Self for Unix Processes. In Proceedings of the 1996 IEEE Symposium on Research in Security and Privacy, pages 120–128, 1996. 2, 5
- [17] Przemyslaw Frasunek. ntpd ≤ 4.0.99k remote buffer overflow. Bugtraq, April 2001. CVE-2001-0414. 6
- [18] Tal Garﬁnkel. Traps and Pitfalls: Practical Problems in System Call Interposition Based Security Tools. In Proceedings of the ISOC Symposium on Network and Distributed System Security, 2003. 2, 8
- [19] Douglas P. Ghormley, Steven H. Rodrigues, David Petrou, and Thomas E. Anderson. SLIC: An Extensibility System for Commodity Operating Systems. In Proceedings of the USENIX 1998 Annual Technical Conference, pages 39–52, June 1998. 3
- [20] Ian Goldberg, David Wagner, Randi Thomas, and Eric A. Brewer. A Secure Environment for Untrusted Helper Applications. In Proceedings of the 6th Usenix Security Symposium, July 1996. 1, 2, 4
- [21] Steven A. Hofmeyr, Stephanie Forrest, and Anil Somayaji. Intrusion Detection Using Sequences of System Calls. Journal of Computer Security, 6(3):151–180, 1998. 1, 2, 5, 9
- [22] J. Howard, M. Kazar, S. Menees, D. Nichols, M. Satyanarayanan, R. Sidebotham, and M. West. Scale and Performance in a Distributed File System. ACM Transactions on Computer Systems, 6(1):51–81, February 1988. 12
- [23] Sotiris Ioannidis, Steven M. Bellovin, and Jonathan M. Smith. Sub-Operating Systems: A New Approach to Application Security. In Proceedings of the SIGOPS European Workshop, September 2002. 2
- [24] K. Jain and R. Sekar. User-Level Infrastructure for System Call Interposition: A Platform for Intrustion Detection and Conﬁnement. In Proceedings of the ISOC Symposium on Network and Distributed System Security, February 2000. 1, 2, 4
- [25] Calvin Ko, George Fink, and Karl Levitt. Automated detection of vulnerabilities in privileged programs by execution monitoring. In Proceedings of the 10th Annual Computer Security Applications Conference, pages 134–144, December 1994. 3
- [26] Henry M. Levy. Capability-Based Computer Systems. Digital Press, 1984. http://www.cs.washington.edu/homes/levy/capabook/. 2
- [27] Vern Paxson. Bro: A System for Detecting Network Intruders in Real-Time. In Proceedings of the 7th USENIX Security Symposium, January 1998. 1
- [28] David S. Peterson, Matt Bishop, and Raju Pandey. A Flexible Containment Mechanism for Executing Untrusted Code. In Proceedings of the 11th USENIX Security Symposium, pages 207–225, August 2002. 2
- [29] Niels Provos. OpenBSD Security Advisory: Select Boundary Condition. http://monkey.org/openbsd/archive/misc/0208/msg00482.html, August 2002. 10
- [30] Niels Provos. Preventing Privilege Escalation. Technical Report CITI 02-2, University of Michigan, August 2002. 1, 11
- [31] Thomas Ptacek and Timothy Newsham. Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection. Secure Networks Whitepaper, August 1998. 1
- [32] Jerome H. Saltzer. Protection and the Control of Information in Multics. Communications of the ACM, 17(7):388–402, July 1974. 1, 2
- [33] Jerome H. Saltzer and Michael D. Schroeder. The Protection of Information in Computer Systems. In Proceedings of the IEEE 69, number 9, pages 1278–1308, September 1975. 6
- [34] Ray Spencer, Stephen Smalley, Peter Loscocco, Mike Hibler, David Andersen, and Jay Lepreau. The Flask Security Architecture: System Support for Diverse Security Policies. In Proceedings of the 8th Usenix Security Symposium, pages 123–139, August 1999. 2, 8
- [35] David Wagner and Drew Dean. Intrusion Detection via Static Analysis. In Proceedings of the IEEE Symposium on Security and Privacy, May 2001. 3, 9
- [36] David Wagner and Paolo Soto. Mimicry Attacks on Host-Based Intrusion Detection Systems. In Proceedings of the 9th ACM Conference on Computer and Communications Security, November 2002. 1, 3, 5, 9
- [37] David A. Wagner. Janus: an Approach for Conﬁnement of Untrusted Applications. Technical Report CSD-99-1056, 12, 1999. 2, 8
- [38] Kenneth M. Walker, Daniel F. Sterne, M. Lee Badger, Michael J. Petkac, David L. Shermann, and Karen A. Oostendorp. Conﬁning Root Programs with Domain and Type Enforcement (DTE). In Proceedings of the 6th Usenix Security Symposium, July 1996. 2
- [39] Andreas Wespi, Marc Dacier, and Hervé Debar. An Intrusion-Detection System Based on the Teiresias Pattern-Discovery Algorithm. In Proceedings of the EICAR, 1999. 3