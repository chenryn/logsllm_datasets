### Network Vulnerability and AVANT-GUARD's Mitigation

When a network is subjected to SYN flood attacks at a rate of 1,000,000 packets per second (one packet every microsecond), it will receive at least 460 packets before the attack can be stopped. However, with AVANT-GUARD, only two additional packets would be received after the data plane reacts to the attack.

### Related Work

Our work draws inspiration from several parallel studies that explore security threats in Software-Defined Networks (SDNs) [1, 14, 28] and aim to deliver innovative security applications using SDN technology. For instance, Mehdi et al. developed SDN applications for detecting network scan attacks [17], while Jafarian et al. proposed a random host mutation approach to protect networks from scanning attacks [10]. Popa et al. designed a new security application for cloud networks [22], and Braga et al. created a DDoS detection application using SDN [3]. Shin et al. introduced a new security-monitoring-as-a-service framework for cloud networks [25].

Unlike these approaches, which focus on creating specific high-level SDN applications to provide enhanced security services, our method fundamentally alters flow management at the SDN switch level. We believe that all these applications can benefit from AVANT-GUARD. For example, the applications for detecting scan attacks in [17, 10] no longer need to manage TCP sessions themselves, as they can leverage AVANT-GUARD.

FRESCO [26] is a new framework designed to accelerate the development of SDN security applications. We believe such frameworks can benefit from the resilience and trigger capabilities provided by AVANT-GUARD.

AVANT-GUARDâ€™s connection migration function is inspired by the SYN cookie concept, and there are many commercial products employing this idea to combat TCP SYN flooding attacks, such as Cisco Guard [6] and Juniper Junos [12]. Additionally, Mahimka et al. proposed a middle-box solution to defeat network flooding attacks [16]. To our knowledge, we are the first to apply SYN cookies and connection migration in an SDN context.

### Improving SDN Performance

Researchers have also proposed new architectures to enhance SDN performance by reducing communication between the switch and controller. Onix [13], Maestro [30], and HyperFlow [27] aim to build more scalable SDN networks using distributed control planes. While we share a common goal of improving the scalability of SDN networks, our specific techniques and emphasis on security differ. Mogul et al. proposed a new data plane architecture to reduce memory space by moving counters to the control plane [11]. Lu et al. [15] devised a new SDN architecture that handles part of packet processing in the CPU. DIFANE [29] seeks to reduce switch-to-controller traffic by keeping all traffic in the data plane and selectively directing packets through intermediate switches that store the necessary rules. DevoFlow [7] aims to improve the visibility and statistics gathering capabilities of OpenFlow and suggests a new data plane architecture to manage flow rules efficiently. However, the goals and approaches of these studies differ from ours, as they focus on improving performance under normal network conditions, while AVANT-GUARD introduces new techniques to enhance network resilience under attacks. The concept of actuating triggers in AVANT-GUARD is similar to event-triggers in DevoFlow, but our triggers result in the dynamic insertion of a flow rule, whereas DevoFlow event-triggers simply result in a callback to the controller.

### Limitations and Discussion

We now discuss some limitations of our work. First, the connection migration component of AVANT-GUARD primarily enhances resilience against TCP SYN flood and network scanning attacks. It may not help application developers who want to defend against application-layer DoS attacks or attacks based on UDP or ICMP protocols. However, delayed connection migration and actuating triggers could be selectively used to mitigate the impact of such attacks. Since most well-known network services are based on TCP and most common network attacks target TCP-based services, AVANT-GUARD would benefit the majority of network systems and applications. Extending AVANT-GUARD to better support more sophisticated attacks and non-TCP flows is a future research direction.

Second, the use of connection migration imposes a small but measurable delay on normal network connections. This represents a reasonable trade-off between security and performance. To reduce unnecessary overhead, certain networks may turn off connection migration by default and initiate it only under duress. This policy could be expressed as an actuating trigger and combined with whitelists or dynamic reputation schemes to improve the quality of service for legitimate users during attacks. In future work, we plan to thoroughly investigate such trade-offs and design better guidelines for different scenarios.

### Conclusions and Future Work

In this paper, we propose AVANT-GUARD, a new framework to enhance the security and resilience of OpenFlow networks with greater involvement from the data-plane layer. The goal of AVANT-GUARD is to make SDN security applications more scalable and responsive to dynamic network threats. A key challenge we address is the inherent bottleneck introduced by the interface between the control plane and the data plane, which knowledgeable adversaries can exploit. Connection migration enables the data plane to shield the control plane from saturation attacks. The second challenge is responsiveness. SDN security applications need expeditious access to network statistics from the data plane to quickly respond to threats. To address this, we introduce actuating triggers that automatically insert flow rules when the network is under duress. We present a software implementation of AVANT-GUARD, demonstrating that the overhead imposed by its security extensions is minimal, with connection delay increases of much less than 1%, while providing resilience to an important adversarial model that may hinder SDN adoption.

### Acknowledgements

This material is based upon work supported by the Defense Advanced Research Projects Agency (DARPA) and the United States Air Force under Contract No. FA8750-11-C-0249, and by the National Science Foundation (NSF) under Grant no. CNS-0954096. All opinions, findings, and conclusions or recommendations expressed herein are those of the authors and do not necessarily reflect the views of DARPA, the United States Air Force, or NSF. It is approved for Public Release, Distribution Unlimited.

### References

[1] K. Benton, L. J. Camp, and C. Small. OpenFlow vulnerability assessment. In Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking (HotSDN), 2013.
[2] D. J. Bernstein. SYN Cookies. http://cr.yp.to/syncookies.html.
[3] R. S. Braga, E. Mota, and A. Passito. Lightweight DDoS Flooding Attack Detection Using NOX/OpenFlow. In Proceedings of the 35th Annual IEEE Conference on Local Computer Networks (LCN), 2010.
[4] M. Casado, M. J. Freedman, J. Pettit, J. Luo, N. McKeown, and S. Shenker. Ethane: Taking Control of the Enterprise. In Proceedings of ACM SIGCOMM, 2007.
[5] M. Casado, T. Garfinkel, M. Freedman, A. Akella, D. Boneh, N. McKeown, and S. Shenker. SANE: A Protection Architecture for Enterprise Networks. In Proceedings of the Usenix Security Symposium, August 2006.
[6] Cisco. Cisco Guard Anomaly Detector. http://www.cisco.com/en/US/prod/collateral/modules/ps2706/ps6235/product_data_sheet0900aecd80220a7c.html.
[7] A. Curtis, J. Mogul, J. Tourrilhes, P. Yalagandula, P. Sharma, and S. Banerjee. DevoFlow: Scaling Flow Management for High-Performance Networks. In Proceedings of ACM SIGCOMM, 2011.
[8] A. Greenberg, G. Hjalmtysson, D. A. Maltz, A. Myers, J. Rexford, G. Xie, H. Yan, J. Zhan, and H. Zhang. A Clean Slate 4D Approach to Network Control and Management. In Proceedings of ACM Computer Communications Review, 2005.
[9] G. Gu, Z. Chen, P. Porras, and W. Lee. Misleading and Defeating Importance-Scanning Malware Propagation. In Proceedings of International Conference on Security and Privacy in Communication Networks (SecureComm), 2007.
[10] J. H. Jafarian, E. Al-Shaer, and Q. Duan. OpenFlow Random Host Mutation: Transparent Moving Target Defense using Software Defined Networking. In Proceedings of the 1st ACM Workshop on Hot Topics in Software Defined Networks (HotSDN), 2012.
[11] P. C. Jeffrey C. Mogul. Hey, You Darned Counters! Get Off My ASIC! In Proceedings of the 1st ACM Workshop on Hot Topics in Software Defined Networks (HotSDN), 2012.
[12] Juniper. Junos Security Configuration. http://www.juniper.net/us/en/products-services/nos/junos/.
[13] T. Koponen, M. Casado, N. Gude, J. Stribling, L. Poutievski, M. Zhu, R. Ramanathan, Y. Iwata, H. Inoue, T. Hama, and S. Shenker. Onix: A Distributed Control Platform for Large-scale Production Networks. In Proceedings of the Symposium on Operating Systems Design and Implementation (OSDI), 2010.
[14] D. Kreutz, F. M. Ramos, and P. Verissimo. Towards Secure and Dependable Software-Defined Networks. In Proceedings of the second ACM SIGCOMM workshop on Hot Topics in Software Defined Networking (HotSDN), 2013.
[15] G. Lu, R. Miao, Y. Xiong, and C. Guo. Using CPU as a Traffic Co-processing Unit in Commodity Switches. In Proceedings of the 1st ACM Workshop on Hot Topics in Software Defined Networks (HotSDN), 2012.
[16] A. Mahimka, J. Dange, V. Shmatikov, H. Vin, and Y. Zhang. dFence: Transparent Network-based Denial of Service Mitigation. In Proceedings of the Symposium on Networked Systems Design and Implementation (NSDI), 2007.
[17] S. Mehdi, J. Khalid, and S. Khayam. Revisiting Traffic Anomaly Detection Using Software Defined Networking. In Recent Advances in Intrusion Detection (RAID), 2011.
[18] J. Naous, D. Erickson, G. A. Covington, G. Appenzeller, and N. McKeown. Implementing an OpenFlow switch on the NetFPGA Platform. In Proceedings of the 4th ACM/IEEE Symposium on Architectures for Networking and Communications Systems (ANCS), 2008.
[19] Open Networking Foundation. Software-Defined Networking: The New Norm for Networks. Technical report, 2012. https://www.opennetworking.org/images/stories/downloads/white-papers/wp-sdn-newnorm.pdf.
[20] OpenFlow. OpenFlow Switch Specification version 1.0.0. Technical report, 2010. http://www.openflow.org/documents/openflow-spec-v1.0.0.pdf.
[21] OpenFlow.org. OpenFlow Switching Reference System. http://www.openflow.org/wp/downloads/.
[22] L. Popa, M. Yu, S. Y. Ko, I. Stoica, and S. Ratnasamy. CloudPolice: Taking Access Control out of the Network. In Proceedings of the 9th ACM Workshop on Hot Topics in Networks (HotNets), 2010.
[23] POX. Python Network Controller. http://www.noxrepo.org/pox/about-pox/.
[24] N. Security. http://nmap.org/.
[25] S. Shin and G. Gu. CloudWatcher: Network Security Monitoring Using OpenFlow in Dynamic Cloud Networks (or: How to Provide Security Monitoring as a Service in Clouds?). In Proceedings of the 7th Workshop on NPSec, 2012.
[26] S. Shin, P. Porras, V. Yegneswaran, M. Fong, G. Gu, and M. Tyson. FRESCO: Modular Composable Security Services for Software-Defined Networks. In Proceedings of the 20th Annual Network and Distributed System Security Symposium (NDSS), 2013.
[27] A. Tootoonchian and Y. Ganjali. HyperFlow: A Distributed Control Plane for OpenFlow. In Proceedings of the Internet Network Management Workshop/Workshop on Research on Enterprise Networking (INM/WREN), 2010.
[28] X. Wen, Y. Chen, C. Hu, C. Shi, and Y. Wang. Towards a secure controller platform for OpenFlow applications. In Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking (HotSDN), 2013.
[29] M. Yu, J. Rexford, M. J. Freedman, and J. Wang. Scalable Flow-based Networking with DIFANE. In Proceedings of ACM SIGCOMM, 2010.
[30] T. S. E. N. Zheng Cai, Alan L. Cox. Maestro: Balancing Fairness, Latency and Throughput in the OpenFlow Control Plane. Rice University Technical Report TR11-07.