### 优化后的文本

#### 邮件服务器规则
eXpose 发现了大多数 Exchange 服务器使用的端口，管理员特别关注其中的例外情况。例如：
- `*.Mail1.135 => *.Mail1.49155`

大多数邮件服务器运行在一个默认配置文件上，该文件在端口 135 上创建 Exchange 服务器进程。少数例外可能是由于旧服务器使用了过时的配置。能够检测到如此细粒度的配置有助于理解和调试问题。

#### 文件服务器（Windows SMB）
对于 Windows SMB（类似于 Windows 的 NFS），eXpose 发现以下规则：
- `SMBServer.445 : *. => SMBServer.139 : *.`

此规则表明客户端通过查询服务器（端口 139）来查找文件，并从响应中获取文件句柄（端口 445）。当然，文件句柄可能指向另一个服务器。
- `OtherSMBServer.445 : *. => SMBServer.139 : *.`

这种 SMB 重定向是一种常见做法，使得逻辑名称共享一个层次结构，而文件分布在多个服务器上。eXpose 揭示了这种重定向的复杂性。

#### 视频讲座广播
eXpose 发现了与视频讲座广播相关的多个群组。
- `Video.rtsp : Client1.* ⇔ Video.rtsp : Client2.*`
- `Video.rtsp : Client1.* ⇔ Video.rtsp : Client3.*`
- `Video.rtsp : Client2.* ⇔ Video.rtsp : Client3.*`
- ...

这些群组对应于特定讲座的观众。连接一对长时间重叠观看的客户端的规则得分较高，而那些快速退出广播的客户端则得分较低。

#### 邮件列表服务器
eXpose 发现了涉及邮件服务器的多个群组。
- `ListServ.* : Client1.* ⇔ ListServ.* : Client2.*`
- `ListServ.* : Client1.* ⇔ ListServ.* : Client3.*`
- `ListServ.* : Client2.* ⇔ ListServ.* : Client3.*`
- ...

每个邮件服务器负责一个特定的邮件列表。每当向列表发送邮件时，邮件服务器会将邮件转发给该列表的所有参与者。eXpose 发现了每个列表的活动时间和参与者。

#### DHCP
寻找 DHCP 服务器的客户端通过网络广播引发了以下模式：
- `NetworkBroadcast.137 : *. => DHCP Server.137 : *.`

#### 打印机
eXpose 发现了一个涉及打印队列的群组：
- `IP1.161 : PrintServ.* ⇔ IP2.161 : PrintServ.*`
- `IP1.161 : PrintServ.* ⇔ IP3.161 : PrintServ.*`
- `IP2.161 : PrintServ.* ⇔ IP3.161 : PrintServ.*`
- ...

这些 IP 对应于企业内部打印机的网络接口。打印服务器似乎定期轮询这些打印机的 SNMP 端口（161）以获取使用情况和其他信息。

#### 工作负载集群
eXpose 发现了文件服务器的群组。
- `Pool1.* : FileServ.445 ⇔ Pool2.* : FileServ.445`
- `Pool1.* : FileServ.445 ⇔ Pool3.* : FileServ.445`
- `Pool2.* : FileServ.445 ⇔ Pool3.* : FileServ.445`
- ...

这些文件服务器是各种组的集中数据存储。它们被并行处理数据的客户端池访问。

#### 在线状态服务器
eXpose 发现了许多这样的规则：
- `Presence.5601 : Client1.* ⇔ Presence.5601 : Client2.*`

在线状态服务器是 Windows Office Communicator 的一部分。每当客户端登录、注销或处于空闲状态时，其机器会将更新发送到在线状态服务器，后者再将信息转发给用户的联系人。因此，上述每条规则链接了彼此在好友列表中的用户。

#### 奇特情况
eXpose 发现某个用户 Bob 的机器进行了以下操作：
- `Bob.* : Home1.* ⇔ Bob.* : Home2`
- `Bob.* : Home1.* ⇔ Bob.* : Home3`
- `Bob.* : Home2.* ⇔ Bob.* : Home3`
- ...

事实证明，Bob 的机器正在与许多属于 DSL 用户和电缆调制解调器池的 IP 通信（如 Verizon DSL 客户、Road Runner 客户）。eXpose 发现了这种模式，因为对这些家庭机器的访问是周期性和同步的。要么 Bob 正在进行一项探测许多家庭机器的实验，要么他是僵尸网络的一部分，这里的通信是僵尸网络中的保持活跃消息。

#### 案例：实验室企业中的模式
我们在 MIT 的 CSAIL 实验室部署了 eXpose，使其能够看到主要内部服务器（包括 Web、邮件、Kerberos、AFS、NFS 服务器、托管用户工作站和 Debian/Fedora 镜像）的流量。以下是 eXpose 在 10 分钟追踪中学习到的规则。

图 @ 显示了 eXpose 学习到的规则。图中的节点对应于流或通用项，节点之间的边表示 eXpose 发现了链接这两个节点的规则。左侧的图显示了 eXpose 的规则挖掘算法输出的所有统计显著规则，右侧的图显示了递归谱划分算法的输出。我们发现，在实践中消除弱规则可以减少假阳性结果。

#### syslogd 群组
实验室内的所有托管工作站和大多数内部服务器运行相同版本的 Debian，并具有类似的配置。特别是，这些机器通过端口 514 将系统日志文件导出到服务器。配置中的 Cron 作业在特定时间运行，导致系统日志和 syslogd 服务器的同步更新。
- `IP1.514 : Syslogd.514 ⇔ IP2.514 : Syslogd.514`
- `IP1.514 : Syslogd.514 ⇔ IP3.514 : Syslogd.514`
- `IP2.514 : Syslogd.514 ⇔ IP3.514 : Syslogd.514`
- ...

eXpose 列出了所有上传日志的机器，管理员可以追查那些应该被管理但没有同步上传 syslog 文件的机器。

#### AFS 访问
以下模式在许多客户端中重复出现：
- `Client.7001 : AFSRoot.7003 ⇒ Client.7001 : *`
- `Client.7001 : AFS1.7000 ⇒ Client.7001 : AFS2.7000`
- `Client.7001 : AFS1.7000 ⇒ AFS1.7000 : AFSRoot.7002`

这些规则表明客户端首先与根服务器（端口 7003）通信，以确定哪个卷服务器上有他需要的文件，然后与相应的卷服务器通信。实验室有一个根服务器和数十个卷服务器，文件分布在这几个卷服务器上。用户的内容通常分布在多个服务器上，导致缓存管理器（端口 7001）同时访问 AFS 服务器（端口 7000）。最后，创建新文件或浏览 AFS 树的不同部分会触发与权限服务器（端口 7002）的连接。

除了识别 AFS 流量的基本结构外，eXpose 的规则还帮助我们了解每个用户的内容位置以及如何在各个服务器之间分配访问。实验室管理员很高兴地看到，对卷服务器的访问与服务器上的硬盘大小相匹配（更大的服务器获得更多的访问）。

#### 文件服务器作为后端
许多用户将其所有数据存储在 AFS 上，导致了许多有趣的模式：
- `Remote1 : WebServ.80 ⇒ WebServ.7000 : AFS.7001`
- `Client : LoginServ.22 ⇒ LoginServ.7000 : AFS.7001`
- `Compute1 : AFS.7001 ⇔ Compute2 : AFS.7001`
- `Compute1 : AFS.7001 ⇔ Compute3 : AFS.7001`
- `Compute2 : AFS.7001 ⇔ Compute3 : AFS.7001`

第一个规则表明，对实验室 Web 服务器主页的访问会导致 Web 服务器从 AFS 服务器获取内容。虽然主页存储在 Web 服务器上，但用户可能会链接到 AFS 共享中的其他内容（如论文、CGI 脚本）。此外，通过 SSH 连接到实验室登录服务器会导致登录服务器挂载 AFS 目录。最后，计算集群同时访问多个卷服务器，很可能是由于数据密集型任务在集群中并行化。

#### 邮件流
eXpose 发现了实验室中的邮件流动方式：
- `Incoming.25 : *. => Webmail.2003 : Incoming.X`
- `*. : Webmail.143 ⇒ *. : Webmail.993`
- `*. : Webmail.110 ⇒ *. : Webmail.995`

第一个规则表明，每当在端口 25（SMTP）上连接到实验室中的邮件服务器时，邮件服务器会连接到不同的服务器。事实证明，实验室有一个接收外部邮件的传入 SMTP 服务器，但它不存储邮件。相反，邮件通过 LMTP（企业版 SMTP，端口 2003）转发到 Webmail 服务器。Webmail 服务器随后为用户提供读取邮件的界面。接下来的两个规则显示 Webmail 服务器响应 IMAP（端口 143）和 POP（端口 110）连接，仅强制客户端使用相应的安全版本 IMAPS（端口 993）和 POPS（端口 995）。

#### 外发邮件
eXpose 跟踪外发邮件的模式：
- `OutMail.* : dns0.mtu.ru.53 ⇔ OutMail.* : dns1.mtu.ru.53 (many)`
- `OutMail.* : Mail1.25 ⇔ OutMail.* : Mail2.25 (clique)`

第一条规则表明，每当外发服务器在一个远程名称服务器上进行 DNS（端口 53）查找时，它会在同一域的另一个冗余名称服务器上进行名称查找。事实证明，实验室的邮件服务器实现同时查找多个 DNS 服务器，希望至少有一个响应。此外，第二条规则显示外发邮件服务器同时连接到多个邮件服务器（如 messagelabs.com）。显然，messagelabs（以及其他许多公司）是外包电子邮件提供商，他们为公司（如 Akamai）接收电子邮件。实验室的一些邮件列表中有这些公司的员工，因此向这些列表发送邮件会使外发服务器同时向外包电子邮件提供商的多个 SMTP 服务器发送邮件。

#### Nagios 监控
实验室管理员使用一台 Nagios 机器来监控实验室关键服务器的健康状况：
- `Nagios.7001 : AFS1.7000 ⇒ Nagios.7001 : AFS2.7000 (AFS clique)`
- `Nagios.* : Mail1.25 ⇒ Nagios.* : Mail2.25 (mail clique)`
- `Nagios.* : AD.139 ⇒ Nagios.* : AD.389 (active directory)`

这些规则表明 Nagios 机器定期作为客户端连接到每种类型的服务器并探测其健康状况。第一条规则是一个完整的群组，Nagios 机器作为 AFS 客户端连接到实验室中的每个 AFS 服务器。同样，第二条规则是一个群组，Nagios 机器通过实验室中的每个 SMTP 服务器发送邮件。第三条规则显示 Nagios 检查 Windows 服务器的 NetBIOS 名称（端口 139）和 LDAP 服务（目录查找，端口 389）。

#### 发现的错误
eXpose 发现了许多配置问题和恶意用户的实例，管理员可以采取行动。以下是两个这样的规则示例：
- **IDENT 依赖**：eXpose 发现了许多客户端连接到服务器后，服务器会发起端口 113 上的连接的情况。例如：
  - `Client.* : MailServer.25 ⇔ Client.113 : MailServer.*`

  端口 113 是 IDENT 流量。尽管 IDENT 协议并不常用，但仍有一些 UNIX 服务器（尤其是 IRC 聊天和某些邮件服务器）内置了这个协议。任何尝试与这些服务器建立连接的请求都会暂停，直到远程服务器通过 IDENT 连接到用户的端口 113 进行身份验证。管理员看到这条规则后更改了配置以禁用 IDENT。

- **遗留配置**：一个遗留的 DHCP 服务器在子网上仍然活跃并响应请求。更糟糕的是，这个遗留服务器访问了实验室的权威名称服务器，而该服务器本应仅由前端 DNS 服务器使用。管理员看到这条规则后禁用了遗留服务器。
  - `NetworkBroadcast.68 : Legacy.67 ⇒ Legacy.* : MasterNS.53.`

#### 假阳性
我们在实验室企业跟踪中发现了 25 个规则组中的 22 个，假阳性率为 12%。一些假阳性是由于看似真实但无法解释的依赖关系，例如在 30% 的时间窗口中始终一起发生的流对。另一些则是由于高流量服务器，如实验室内部托管的 Debian 镜像。有如此多的连接来自如此多不同的 IP，不可避免地会发现许多连接重叠。我们知道许多操作系统都有软件自动在固定时间检查分发镜像的更新，但很难确切说明为什么一对 IP 会同步访问 Debian 镜像。eXpose 的一个自然改进是根据服务器自动调整评分阈值，即高流量服务器只有在规则评分较高的情况下才会报告。

#### 假阴性
个人网页托管的 Web 服务器的后端依赖过于细粒度，eXpose 无法捕捉。我们发现了大部分网页请求导致 Web 服务器从 AFS 获取内容的主要依赖关系，但未能隔离携带动态内容的个别网页的更复杂依赖关系。这是因为动态内容的连接数量较少，我们承认 eXpose 可能会错过具体的依赖关系，而只关注广泛的依赖关系。但是，可以通过将需要特别关注的服务器的流添加到 eXpose 构建规则的流列表中来解决这个问题。

#### 案例：实验室接入链路上的模式
- **MySQL 蠕虫**：我们发现了一个 MySQL 蠕虫实例；主机 pD@E@Dʉʇʄ.dip.t-dialin.net 在整个网络上扫描端口 3306（Unix 上的默认 MySQL 端口）。MySQL Bot 扫描该端口以寻找具有弱密码的 MySQL 服务器，如果成功以 root 身份登录，则使用漏洞在系统上安装 Bot。与其他蠕虫（如 SQL Sapphire 蠕虫）不同，这种蠕虫产生的流量很少，可能不会出现在检测高流量工具中。然而，eXpose 因为远程主机同时扫描了多个实验室主机而检测到了它。

- **Cloudmark**：实验室中某组的邮件服务器参与了一种有趣的模式。每当服务器收到邮件（端口 25）时，服务器会连接到 cloudmark.com 拥有的多个服务器之一的端口 2703：
  - `MailServer.25 : *. => MailServer.* : CloudMark.2703.`

  显然，cloudmark 是一种过滤垃圾邮件、钓鱼邮件和病毒邮件的服务，该组订阅了这项服务。

- **NTP 同步**：实验室运行一个主要的网络时间协议（NTP）服务器。为了保持系统时钟的最新，客户端定期探测 NTP 服务器，并根据服务器的响应调整时钟。