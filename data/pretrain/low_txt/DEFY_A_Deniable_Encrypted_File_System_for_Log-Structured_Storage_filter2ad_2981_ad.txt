Certainly! Here is the optimized version of your text, with improvements in clarity, coherence, and professionalism:

---

### Deniable File Systems and Key Management

Storing data persistently can undermine plausible deniability. Similarly, key management techniques used in traditional disk encryption software, such as key wrapping [7], [31], [40], can also compromise deniability. Currently, all deniable file systems require users to select strong passwords, and DEFY is no exception.

### Threats and Mitigations

Attacks against deniable file systems may be possible when adversaries have access to external data ("hints") or are not constrained by single-view and snapshot models. For example, Skillen and Mannan propose a "colluding carrier" attack [46], where an adversary collaborates with a wireless provider or ISP (e.g., through governmental orders) to collect network trace data for forensic analysis. Discrepancies between device logs and carrier logs may reveal the presence of hidden data, compelling the user to disclose it. Skillen and Mannan suggest several mitigations for mobile devices, including disabling wireless connectivity (or limiting it to WiFi only) during privileged use and using multiple SIM cards and carriers to complicate log collection. We acknowledge DEFY's limitations in resisting such attacks and recommend that users follow these practices, especially in regions where carriers may assist in forensic investigations.

### Fundamental Challenges

The ultimate guarantees of deniable file systems have not been critically examined. In existing definitions, the burden is on the adversary to prove the presence of hidden data, reflecting the presumption of innocence common in many legal systems. However, given that adversaries may resort to torture to extract passwords [47], it is unclear if a system based on this principle is viable in truly hostile environments. In practice, the mere existence of a deniable file system may draw unwanted attention. To a casual observer, DEFY appears and functions like a full-disk encryption scheme, making the revelation of a single level potentially convincing.

### Conclusion

We have introduced DEFY, a deniable file system for solid-state memory, suitable for use in mobile devices and laptops. Current design patterns for deniable file systems cannot easily be adapted for many mobile devices due to assumptions about storage media that, while valid for some settings, are inappropriate for solid-state drives. The physical properties of solid-state memory, which require wear leveling and disallow in-place updates, motivated our use of a log-structured file system. Thus, DEFY is the first log-structured deniable file system. At first glance, log-structured systems seem to conflict with the goal of allowing a user to deny recent actions. We apply techniques from a secure, versioning file system in a novel way to support a log-structure with a deniable history. As the first deniable file system designed for log-structured storage, we believe DEFY fills a gap in privacy-enhancing technologies for devices using solid-state drives, such as mobile devices. DEFY also supports other features useful in a mobile setting, including authenticated encryption and fine-grained secure deletion of data.

Our DEFY prototype implementation is based on YAFFS and WhisperYAFFS and is released as an open-source project on BitBucket1. Preliminary evaluation demonstrates performance similar to that of full-disk encryption on these devices, i.e., WhisperYAFFS.

1. <https://bitbucket.org/solstice/defy/>

### Acknowledgments

The authors would like to thank the NDSS program committee for their constructive feedback, Hayawardh Vijayakumar for feedback on a pre-publication version of this paper, and LT M. Chase Smith for earlier work on a related DEFY design. We also thank the YAFFS and WhisperYAFFS developers for their contributions to the free and open-source software movement.

### References

[1] “UBIFS - A UBI File System,” October 2008, <http://www.linux-mtd.infradead.org/doc/ubifs.html>.

[2] “Martus case studies: The global human rights abuse reporting system,” 2012, <https://www.martus.org/resources/case_studies.shtml>.

[3] “GuardianProject/ChatSecure: Android,” <https://guardianproject.info/apps/chatsecure>.

[4] “GuardianProject/Orbot,” 2014, <https://guardianproject.info/apps/orbot/>.

[5] “Lookout/lookout mobile security,” 2014, <https://www.lookout.com/>.

[6] “Truecrypt,” 2014, <http://www.truecrypt.org/>.

[7] Accredited Standards Committee, X9, Inc., “ANS X9.102- Wrapping of Keys and Associated Data,” <http://eprint.iacr.org/2004/340.pdf>, November 2004.

[8] R. Anderson, “The dancing bear – a new way of composing ciphers,” in Proceedings of the International Workshop on Security Protocols, April 2004.

[9] R. Anderson, R. Needham, and A. Shamir, “The steganographic file system,” in Information Hiding, Second International Workshop (IH ’98), Portland, Oregon, USA, April 1998, pp. 73–82.

[10] M. Bellare, A. Desai, E. Jokipii, and P. Rogaway, “A Concrete Security Treatment of Symmetric Encryption,” in Proceedings of the Annual Symposium on Foundations of Computer Science, 1997, pp. 394–403.

[11] M. Bellare and C. Namprempre, “Authenticated Encryption: Relations among notions and analysis of the generic composition paradigm,” in Advances in Cryptology - Asiacrypt’00 Proceedings, vol. 1976. Springer-Verlag, 2000, Lecture Notes in Computer Science.

[12] M. Blaze, “High-bandwidth encryption with low-bandwidth smart-cards,” in Fast Software Encryption, vol. 1039, 1996, pp. 33–40, Lecture Notes in Computer Science.

[13] M. Blaze, J. Feigenbaum, and M. Naor, “A formal treatment of remotely keyed encryption,” in Advances in Cryptology – EUROCRYPT ’98, vol. 1403, 1998, pp. 251–265, Lecture Notes in Computer Science.

[14] M. Blaze, “A cryptographic file system for UNIX,” in Proceedings of the ACM Conference on Computer and Communications Security, 1993, pp. 9–16.

[15] D. Boneh and R. Lipton, “A revocable backup system,” in Proceedings of the USENIX Security Symposium, July 1996, pp. 91–96.

[16] R. Canetti, C. Dwork, M. Naor, and R. Ostrovsky, “Deniable encryption,” Advances in Cryptology — CRYPTO ’97, pp. 90–104, 1997.

[17] A. Czekis, D. J. St Hilaire, K. Koscher, S. D. Gribble, T. Kohno, and B. Schneier, “Defeating encrypted and deniable file systems: Truecrypt v5.1a and the case of the tattling OS and applications,” 3rd USENIX Workshop on Hot Topics in Security (HotSec ’08), 2008.

[18] D. Defreez, “Android privacy through encryption,” Master’s thesis, Southern Oregon University, May 2012, available at <http://goo.gl/94HBb>.

[19] Y. Dodis and J. An, “Concealment and its applications to authenticated encryption,” in Advances in Cryptology – EUROCRYPT ’03, vol. 2656, 2003, Lecture Notes in Computer Science.

[20] M. Dworkin, “Recommendation for block cipher modes of operation: The XTS-AES mode for confidentiality on storage devices,” National Institute of Standards and Technology, NIST Special Publication SP-800-38E, January 2010.

[21] S. L. Garfinkel and A. Shelat, “Remembrance of data passed: A study of disk sanitization practices,” IEEE Security and Privacy, vol. 1, no. 1, pp. 17–27, 2003.

[22] P. Gasti, G. Ateniese, and M. Blanton, “Deniable cloud storage: Sharing files via public-key deniability,” in WPES ’10: Proceedings of the 9th annual ACM workshop on Privacy in the electronic society, Oct. 2010.

[23] P. Gutmann, “Secure deletion of data from magnetic and solid-state memory,” in Proceedings of the USENIX Security Symposium, July 1996, pp. 77–90.

[24] M. Jakobsson, J. Stern, and M. Yung, “Scramble all. Encrypt small.” in Fast Software Encryption, vol. 1636, 1999, Lecture Notes in Computer Science.

[25] B. Kaliski, “PKCS #5: Password-based cryptography specification,” IETF Network Working Group, Request for Comments RFC 2898, Sept. 2000.

[26] J. Lee, S. Yi, J. Heo, S. Y. Shin, and Y. Cho, “An Efficient Secure Deletion Scheme for Flash File Systems,” Journal of Information Science and Engineering, vol. 26, pp. 27–38, 2010.

[27] C. Manning, “How YAFFS works,” 23 May 2012, available at <http://goo.gl/0Mdja>.

[28] A. D. McDonald and M. G. Kuhn, “StegFS: A steganographic file system for Linux,” in Information Hiding, 1999.

[29] J. Mull, “How a Syrian refugee risked his life to bear witness to atrocities,” March 2012, Toronto Star Online; posted 14-March-2012. [Online]. Available: <http://www.thestar.com/news/world/2012/03/14/how_a_syrian_refugee_risked_his_life_to_bear_witness_to_atrocities.html>

[30] T. Müller and M. Spreitzenbarth, “Frost: Forensic recovery of scrambled telephones,” in Applied Cryptography and Network Security (ACNS’13), 2013, pp. 373–388.

[31] National Institute of Standards and Technology, “AES key wrap specification,” November 2001.

[32] W. Norcott and D. Capps, “IOzone filesystem benchmark,” <http://www.iozone.org/>.

[33] H. Pang, K. Tan, and X. Zhou, “StegFS: A Steganographic File System,” in Proceedings of the International Conference on Data Engineering, 2003.

[34] Z. N. J. Peterson, R. Burns, J. Herring, A. Stubblefield, and A. D. Rubin, “Secure Deletion for a Versioning File System,” in Proceedings of the USENIX Conference on File and Storage Technologies, 2005.

[35] N. Provos and D. Mazieres, “A future-adaptable password scheme,” in Proceedings of the USENIX Annual Technical Conference, 1999.

[36] J. Reardon, S. Capkun, and D. Basin, “Data Node Encrypted File System: Efficient Secure Deletion for Flash Memory,” in Proceedings of the USENIX Security Symposium, 2012, pp. 333–348. [Online]. Available: <https://www.usenix.org/conference/usenixsecurity12/technical-sessions/presentation/reardon>

[37] Reporters Without Borders, “Internet enemies,” 12 March 2012, available at <http://goo.gl/x6zZ1>.

[38] R. L. Rivest, “All-or-nothing encryption and the package transform,” in Fast Software Encryption Conference, vol. 1267, 1997, pp. 210–218, Lecture Notes in Computer Science.

[39] P. Rogaway, M. Bellare, J. Black, and T. Krovet, “OCB: A block-cipher mode of operation for efficient authenticated encryption,” in Proceedings of the ACM Conference on Computer and Communications Security, November 2001, pp. 196–205.

[40] P. Rogaway and T. Shrimpton, “Deterministic Authenticated-Encryption: A Provable-Security Treatment of the Key-Wrap Problem,” in Advances in Cryptology – EUROCRYPT 06, vol. 4004, 2007, Lecture Notes in Computer Science.

[41] M. Rosenblum and J. K. Ousterhout, “The Design and Implementation of a Log-Structured File System,” Operating Systems Review, vol. 25, pp. 1–15, 1991.

[42] S. Schmitt, M. Spreitzenbarth, and C. Zimmermann, “Reverse engineering of the Android file system (YAFFS2),” Friedrich-Alexander-Universität Erlangen-Nürnberg, Tech. Rep. CS-2011-06, 2011.

[43] B. Schneier, “‘Evil maid’ attacks on encrypted hard drives,” 23 Oct. 2009, <http://goo.gl/Z1Kny>. [Online]. Available: <https://www.schneier.com/blog/archives/2009/10/evilmaidattac.html>

[44] M. Seltzer, K. Bostic, M. K. McKusick, and C. Staelin, “An implementation of a log-structured file system for UNIX,” in Proceedings of the Winter USENIX Technical Conference, January 1993, pp. 307–326.

[45] A. Skillen, “Deniable storage encryption for mobile devices,” Master’s thesis, Concordia University, 2013.

[46] A. Skillen and M. Mannan, “On implementing deniable storage encryption for mobile devices,” in Proceedings of the Network and Distributed System Security Symposium, February 2013. [Online]. Available: <http://spectrum.library.concordia.ca/975074/>

[47] M. Weaver, “Developer tortured by raiders with crowbars,” Daily Telegraph, 31 October 1997.

[48] M. Wei, L. M. Grupp, F. E. Spada, and S. Swanson, “Reliably erasing data from flash-based solid state drives,” in Proceedings of the USENIX Conference on File and Storage Technologies, 2011.

[49] “GitHub: WhisperSystems/RedPhone,” <http://goo.gl/Mmz9s>, WhisperSystems, 2012.

[50] “GitHub: WhisperSystems/TextSecure,” <http://goo.gl/3qoV8>, WhisperSystems, 2012.

[51] “GitHub: WhisperSystems/WhisperYAFFS: Wiki,” <http://goo.gl/Qsku4>, WhisperSystems, 2012. [Online]. Available: <https://github.com/WhisperSystems/WhisperYAFFS/wiki>

[52] C. P. Wright, M. C. Martino, and E. Zadok, “Ncryptfs: A secure and convenient cryptographic file system,” in Proceedings of the USENIX Technical Conference, 2003, pp. 197–210.

---

This version should be more clear, coherent, and professional.