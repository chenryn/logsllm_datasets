### Experiment Environment and Application Pool

We curated our experiment environment by incorporating relevant keywords (e.g., webcam, microphone, screenshot, capture, record) and added the results to our pool. After eliminating packages that did not function due to missing dependencies, we ended up with 58 applications. These included:

- **Video Conferencing Tools**: Skype, Jitsi
- **Audio/Video Editors**: Audacity, Kwave
- **Audio/Video Recorders**: Cheese, ZArt
- **Screenshot Utilities**: Shutter, GNOME Screenshot
- **Screencasting Tools**: Istanbul, recordMyDesktop

Additionally, we included popular web browsers such as Firefox and Chrome, testing them with various web-based video chat applications. The application pool comprised both graphical user interface (GUI) and console programs.

We manually tested each application to ensure they functioned as expected, observed whether OVERHAUL alerts were displayed correctly, and checked for false alarms. In our experiments, we encountered a single application that produced what could be considered a spurious alert. Specifically, Skype attempted to access the camera immediately upon launch, before the user logged in. When configured to start automatically on boot, this led to a camera access without user interaction, which was blocked by OVERHAUL, resulting in an alert. This did not affect subsequent video calls, and we argue that blocking such unanticipated device accesses is the desired behavior to achieve OVERHAUL’s security properties.

### Limitations of OVERHAUL

While no malfunctioning applications were encountered, our experiment revealed a limitation of OVERHAUL. Some screenshot tools include an option to delay the shot by a user-specified time. By design, OVERHAUL does not support this functionality because the interaction notifications associated with the application expire before the screen can be captured.

### Clipboard Protection Mechanism Testing

To test OVERHAUL’s clipboard protection mechanism, we used an additional set of 50 applications, including popular office programs, text and media editors, web browsers, email clients, and terminal emulators. Since OVERHAUL does not display alerts for clipboard accesses due to usability reasons, we verified correct functionality by inspecting system logs. In these tests, we did not encounter any false positives or incorrect program behavior.

### Scheduled Tasks and Persistent Programs

OVERHAUL does not support running scheduled tasks or persistent non-interactive programs that access protected devices (e.g., a cron job that periodically takes screenshots). While we did not encounter such applications in our tests, this remains a fundamental limitation of our system.

### Empirical Experiments

Due to ethical concerns and the necessity of installing a custom kernel and malware samples on users’ machines, it is challenging to design a large-scale user study to test the long-term security and usability properties of OVERHAUL. Therefore, one of the authors volunteered to use OVERHAUL on their personal home and work computers.

For this experiment, we implemented a sample malware that runs in the background during normal operation and spies on the user. It periodically retrieves clipboard contents, takes screenshots, and records sound samples from the microphone. For privacy reasons, our sample did not record camera images. The captured information was stored on disk, while real malware would exfiltrate it to a remote site. Our malware sample mimicked the behavior of real information-stealing malware, exploiting standard OS interfaces to sensitive resources. No functionality was artificially added or removed to ease detection.

We installed this malware on two different computers belonging to one of the authors, who was aware of the collected information and volunteered for the task. We enabled OVERHAUL on one machine, while the other remained unprotected. Both computers were actively used for work and personal purposes over 21 days.

At the end of the experiment, we confirmed that the malware on the OVERHAUL-protected system could not collect any information, as expected. OVERHAUL’s logs verified that attempts to access protected resources were detected and blocked. On the vulnerable computer, the malware successfully spied on the user, collecting sensitive information such as bank account details, email exchanges, passwords, phone numbers, and voice recordings. During the 21-day testing period, we did not encounter any cases where legitimate applications were incorrectly blocked.

These observations demonstrate that spying malware can be severely damaging, and that OVERHAUL effectively improves user privacy against such attacks. Conducting a similar long-term study at a larger scale in a more scientific framework is a promising future research direction.

### Related Work

Previous research has explored capturing user intent to implement user-driven access control. Roesner et al. [27] present an approach using permission-granting GUI elements called Access Control Gadgets (ACGs), extending ServiceOS to provide this capability to developers. This work captures user intent at a fine granularity but requires application modifications. Our goal is to propose an architecture that can be retrofitted into traditional OSes transparently, addressing challenges specific to systems like Linux that lack the features provided by ServiceOS.

Gyrus [21] is a virtualization-based system that displays editable UI field entries in text-based networked applications through a trusted output channel, ensuring the information sent over the network is accurate. BLADE [22] infers the authenticity of browser-based file downloads based on user behavior. While sharing similar goals, these systems address different security problems.

Systems using timing information to capture user intent include BINDER [13] and Not-a-Bot [19]. BINDER associates outbound network connections with input events to build a host-based IDS, but its design does not address IPC challenges, making it unsuitable for certain applications. Not-a-Bot uses TPM-backed attestations to tag user-generated network traffic, implementing DDoS, spam, and clickjacking mitigation measures. These systems target network-based attacks, whereas OVERHAUL aims to control access to privacy-sensitive devices.

Other systems advocate user-authentic gestures for secure copy & paste, such as the EROS Window System (EWS) [31], Qubes OS [6], and Tahoma [12]. Similarly, OVERHAUL addresses secure copy & paste to prevent malicious applications from intercepting these requests. Trusted computing systems like Terra [17], Overshadow [10], and vTPM [9] use virtual machine technology, but OVERHAUL does not require virtualization or explicit user cooperation.

Several operating systems and applications use popup prompts to defer privacy policy decisions to users [5], [4], [8]. However, this approach suffers from usability issues, as users often dismiss prompts without due diligence. OVERHAUL sidesteps these concerns by taking a transparent, unintrusive approach.

Flash Player allows only clipboard operations initiated by user input [23]. OVERHAUL generalizes this defense to the entire system and other sensitive resources, providing the additional security property that user input cannot be generated synthetically.

Quire [14] is an Android extension that enables applications to propagate call chain context to downstream callees, allowing verification of user interaction sources. Other work aims to enforce install-time application permissions within Android (e.g., Kirin [16], Saint [26], Apex [25]). These approaches enable users to define policies for protecting themselves against malicious applications. OVERHAUL is orthogonal to smartphone platform security work.

### Conclusions

This paper demonstrates that an input-driven access control model, enforcing the temporal proximity of user interactions to an application’s sensitive-resource access requests, can be retrofitted into traditional operating systems. We presented an abstract design independent of the underlying OS and described our implementation for Linux and X Window System. OVERHAUL fulfills the design goals enumerated in Section II, providing a trusted input path between the user and kernel, a display manager that authenticates hardware-generated input events, and a kernel permission monitor that mediates access to sensitive hardware. The display manager also enforces visibility requirements on application windows to prevent hijacking of authentic user interaction and ensures resource accesses are communicated via visual alerts. OVERHAUL requires no modifications to existing software and is transparent to users.

Performance evaluation and empirical tests of our prototype show that it remains efficient and practical while increasing the security of traditional operating systems. Future work will investigate gray-box approaches to input-driven access control, leveraging static and dynamic program analyses to more precisely link user intent, user input, and device accesses without requiring modifications to existing programs.

### Acknowledgments

This work was supported by the National Science Foundation (NSF) under grant CNS-1409738 and Secure Business Austria.

### References

[1] "Bonnie++," http://www.coker.com.au/bonnie++/.
[2] "CERT Polska - Slave, Banatrix and Ransomware," http://www.cert.pl/news/10358.
[3] "Dell SonicWALL Security Center - Malware switches users Bank Account Number with that of the attacker," https://www.mysonicwall.com/sonicalert/searchresults.aspx?ev=article&id=614.
[4] "Flash Player Help - Privacy settings," http://www.macromedia.com/support/documentation/en/flashplayer/help/help09.html.
[5] "OS X Mountain Lion: Prompted for access to contacts when opening an application," http://support.apple.com/en-us/HT202531.
[6] "The Qubes OS Project," http://www.qubes-os.org/trac.
[7] "Trojan-Spy:W32/Zbot," http://www.f-secure.com/v-descs/trojan-spyw32 zbot.shtml.
[8] "Windows Help - What is User Account Control?" http://windows.microsoft.com/en-us/windows/what-is-user-account-control.
[9] S. Berger, R. Caceres, K. A. Goldman, R. Perez, R. Sailer, and L. Doorn, "vTPM: Virtualizing the Trusted Platform Module," in USENIX Security, 2006.
[10] X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A. Waldspurger, D. Boneh, J. Dwoskin, and D. R. Ports, "Overshadow: A Virtualization-based Approach to Retrofitting Protection in Commodity Operating Systems," SIGOPS OSR, vol. 42, no. 2, Mar. 2008.
[11] J. Corbet, "MIT-SHM (The MIT Shared Memory Extension)," http://www.x.org/releases/X11R7.7/doc/xextproto/shm.html.
[12] R. S. Cox, S. D. Gribble, H. M. Levy, and J. G. Hansen, "A Safety-Oriented Platform for Web Applications," in IEEE S&P, 2006.
[13] W. Cui, R. H. Katz, and W. Tan, "Design and Implementation of an Extrusion-based Break-In Detector for Personal Computers," in ACSAC, 2005.
[14] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach, "Quire: Lightweight Provenance for Smart Phone Operating Systems," in USENIX Security, 2011.
[15] K. Drake, "XTEST Extension Protocol," http://www.x.org/releases/X11R7.7/doc/xextproto/xtest.html.
[16] W. Enck, M. Ongtang, and P. McDaniel, "On Lightweight Mobile Phone Application Certification," in ACM CCS, Nov. 2009.
[17] T. Garfinkel, J. C. B. Pfaff, M. Rosenblum, and D. Boneh, "Terra: A Virtual Machine-based Platform for Trusted Computing," in ACM SOSP, Oct. 2003.
[18] A. Gostev, "The Flame: Questions and Answers," http://securelist.com/blog/incidents/34344/the-flame-questions-and-answers-51/.
[19] R. Gummadi, H. Balakrishnan, P. Maniatis, and S. Ratnasamy, "Not-a-Bot: Improving Service Availability in the Face of Botnet Attacks," in USENIX NSDI, 2009.
[20] L. Huang, A. Moshchuk, H. J. Wang, S. Schechter, and C. Jackson, "Clickjacking: Attacks and defenses," in USENIX Security, 2012.
[21] Y. Jang, S. P. Chung, B. D. Payne, and W. Lee, "Gyrus: A Framework for User-Intent Monitoring of Text-Based Networked Applications," in NDSS, 2014.
[22] L. Lu, V. Yegneswaran, P. Porras, and W. Lee, "BLADE: An Attack-agnostic Approach for Preventing Drive-by Malware Infections," in ACM CCS, 2010.
[23] I. Melven, "User-initiated action requirements in Flash Player 10," http://www.adobe.com/devnet/flashplayer/articles/fplayer10_uia_requirements.html.
[24] S. Motiee, K. Hawkey, and K. Beznosov, "Do Windows Users Follow the Principle of Least Privilege?: Investigating User Account Control Practices," in SOUPS, 2010.
[25] M. Nauman, S. Khan, and X. Zhang, "Apex: Extending Android Permission Model and Enforcement with User-defined Runtime Constraints," in ASIACCS, 2010.
[26] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel, "Semantically Rich Application-centric Security in Android," in ACSAC, Dec. 2009.
[27] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang, and C. Cowan, "User-Driven Access Control: Rethinking Permission Granting in Modern Operating Systems," in IEEE S&P, May 2012.
[28] D. Rosenthal, "Inter-Client Communication Conventions Manual," http://www.x.org/releases/X11R7.7/doc/xorg-docs/icccm/icccm.html.
[29] J. Salim, H. Khosravi, A. Kleen, and A. Kuznetsov, "Linux Netlink as an IP Services Protocol," http://www.ietf.org/rfc/rfc3549.txt, Internet Engineering Task Force, Jul. 2003.
[30] R. W. Scheifler, "X Window System Protocol," http://www.x.org/releases/X11R7.7/doc/xproto/x11protocol.html.
[31] J. S. Shapiro, J. Vanderburgh, E. Northup, and D. Chizmadia, "Design of the EROS Trusted Window System," in USENIX Security, 2004.
[32] C. Wright, C. Cowan, J. Morris, S. Smalley, and G. Kroah-Hartman, "Linux Security Modules: General Security Support for the Linux Kernel," in USENIX Security, 2002.