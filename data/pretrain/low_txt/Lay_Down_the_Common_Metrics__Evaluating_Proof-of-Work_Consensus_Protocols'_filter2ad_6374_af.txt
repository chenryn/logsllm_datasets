### References

1. **Computational Power (Draft)**, arXiv preprint arXiv:1312.7013, 2013.
   
2. **Ethereum White Paper: Modified Ghost Implementation**. [Online]. Available: https://github.com/ethereum/wiki/wiki/White-Paper#modified-ghost-implementation

3. **E. Heilman**, "One Weird Trick to Stop Selfish Miners: Fresh Bitcoins, a Solution for the Honest Miner," Cryptology ePrint Archive, Report 2014/007, 2014. [Online]. Available: https://eprint.iacr.org/2014/007

4. **Y. Lewenberg, Y. Sompolinsky, and A. Zohar**, "Inclusive Blockchain Protocols," in *Financial Cryptography and Data Security*, 2015, pp. 528–547.

5. **P. R. Rizun**, "Subchains: A Technique to Scale Bitcoin and Improve the User Experience," *Ledger*, 2016. [Online]. Available: https://www.ledgerjournal.org/ojs/index.php/ledger/article/view/40

6. **S. D. Lerner**, "DECOR+HOP: A Scalable Blockchain Protocol," 2015. [Online]. Available: https://scalingbitcoin.org/papers/DECOR-HOP.pdf

7. **R. Zhang and B. Preneel**, "Publish or Perish: A Backward-Compatible Defense Against Selfish Mining in Bitcoin," in *CT-RSA 2017: The Cryptographers’ Track at the RSA Conference*, 2017, pp. 277–292.

8. **Y. Sompolinsky, Y. Lewenberg, and A. Zohar**, "SPECTRE: Serialization of Proof-of-Work Events: Confirming Transactions via Recursive Elections," 2016. [Online]. Available: https://eprint.iacr.org/2016/1159.pdf

9. **I. Bentov, P. Hubáček, T. Moran, and A. Nadler**, "Tortoise and Hares Consensus: The Meshcash Framework for Incentive-Compatible, Scalable Cryptocurrencies," IACR Cryptology ePrint Archive, 2017.

10. **Y. Sompolinsky and A. Zohar**, "PHANTOM: A Scalable BlockDAG Protocol," IACR Cryptology ePrint Archive, 2018. [Online]. Available: https://eprint.iacr.org/2018/104.pdf

11. **S. D. Lerner**, "RSK White Paper Overview," 2015. [Online]. Available: https://zh.scribd.com/document/371006520/RSK-White-Paper-Overview

12. **E. K. Kogias, P. Jovanovic, N. Gailly, I. Khoffi, L. Gasser, and B. Ford**, "Enhancing Bitcoin Security and Performance with Strong Consistency via Collective Signing," in *Proc. 25th Conference on USENIX Security Symposium*, 2016.

13. **E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, E. Syta, and B. Ford**, "Omniledger: A Secure, Scale-Out, Decentralized Ledger via Sharding," *Proc. 38th IEEE Symposium on Security and Privacy*, 2018.

14. **R. Pass and E. Shi**, "Fruitchains: A Fair Blockchain," in *Proceedings of the ACM Symposium on Principles of Distributed Computing (PODC '17)*, ACM, 2017, pp. 315–324. [Online]. Available: http://doi.acm.org/10.1145/3087801.3087809

15. **P. Camacho and S. D. Lerner**, "DECOR+LAMI: A Scalable Blockchain Protocol," 2016. [Online]. Available: https://scalingbitcoin.org/papers/DECOR-LAMI.pdf

16. **G. Bissias and B. N. Levine**, "Bobtail: A Proof-of-Work Target that Minimizes Blockchain Mining Variance (Draft)," CoRR, vol. abs/1709.08750, 2017. [Online]. Available: http://arxiv.org/abs/1709.08750

17. **W. Martino, M. Quaintance, and S. Popejoy**, "Chainweb: A Proof-of-Work Parallel-Chain Architecture for Massive Throughput," 2018. [Online]. Available: http://kadena.io/docs/chainweb-v15.pdf

18. **C. Natoli and V. Gramoli**, "The Balance Attack against Proof-of-Work Blockchains: The R3 Testbed as an Example," 2016.

19. **A. Kiayias and G. Panagiotakos**, "On Trees, Chains and Fast Transactions in the Blockchain," IACR Cryptology ePrint Archive, vol. 2016, p. 545, 2016.

20. **R. Zhang and B. Preneel**, "On the Necessity of a Prescribed Block Validity Consensus: Analyzing Bitcoin Unlimited Mining Protocol," in *Proceedings of the 13th International Conference on Emerging Networking Experiments and Technologies (CoNEXT '17)*, ACM, 2017, pp. 108–119.

21. **H. Nguyen**, "Proof-of-Stake & the Wrong Engineering Mindset," 2018. [Online]. Available: https://medium.com/@hugonguyen/proof-of-stake-the-wrong-engineering-mindset-15e641ab65a2

22. **S. Bano, A. Sonnino, M. Al-Bassam, S. Azouvi, P. McCorry, S. Meiklejohn, and G. Danezis**, "Consensus in the Age of Blockchains," CoRR, vol. abs/1711.03936, 2017. [Online]. Available: http://arxiv.org/abs/1711.03936

23. **J. Brown-Cohen, A. Narayanan, C.-A. Psomas, and S. M. Weinberg**, "Formal Barriers to Longest-Chain Proof-of-Stake Protocols," arXiv preprint arXiv:1809.06528, 2018.

24. **A. Miller**, "Feather-Forks: Enforcing a Blacklist with Sub-50% Hashrate," 2013. [Online]. Available: https://bitcointalk.org/index.php?topic=312668.0

25. **A. Gervais, G. O. Karame, K. Wüst, V. Glykantzis, H. Ritzdorf, and S. Capkun**, "On the Security and Performance of Proof of Work Blockchains," in *Proc. the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS '16)*, ACM, 2016, pp. 3–16. [Online]. Available: http://doi.acm.org/10.1145/2976749.2978341

26. **Y. Sompolinsky and A. Zohar**, "Bitcoin’s Security Model Revisited," arXiv preprint arXiv:1605.09193, 2016.

27. **Y. Sompolinsky and A. Zohar**, "Secure High-Rate Transaction Processing in Bitcoin," in *Financial Cryptography and Data Security*, 2015, pp. 507–527.

28. **J. Bonneau, A. Miller, J. Clark, A. Narayanan, J. A. Kroll, and E. W. Felten**, "SoK: Research Perspectives and Challenges for Bitcoin and Cryptocurrencies," in *IEEE Symposium on Security and Privacy (S&P)*, IEEE, 2015, pp. 104–121.

29. **M. Carlsten, H. Kalodner, S. M. Weinberg, and A. Narayanan**, "On the Instability of Bitcoin Without the Block Reward," in *Proc. 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS '16)*, ACM, 2016, pp. 154–167. [Online]. Available: http://doi.acm.org/10.1145/2976749.2978408

30. **A. Narayanan, J. Bonneau, E. Felten, A. Miller, and S. Goldfeder**, *Bitcoin and Cryptocurrency Technologies*. Princeton University Press, 2016.

31. **Decred Developers**, "Decred - Autonomous Digital Currency," 2018. [Online]. Available: https://www.decred.org/

32. **J. Bonneau**, "Why Buy When You Can Rent? Bribery Attacks on Bitcoin-Style Consensus," in *BITCOIN Workshop, Financial Cryptography and Data Security*, Springer, 2016.

33. **D. Meshkov, A. Chepurnoy, and M. Jansen**, "Revisiting Difficulty Control for Blockchain Systems," in *DPM/CBT@ESORICS 2017*, 2017. [Online]. Available: https://eprint.iacr.org/2017/731.pdf

34. **I. Eyal**, "The Miner’s Dilemma," in *IEEE Symposium on Security and Privacy (S&P)*, IEEE, 2015, pp. 89–103.

35. **Y. Kwon, D. Kim, Y. Son, E. Vasserman, and Y. Kim**, "Be Selfish and Avoid Dilemmas: Fork After Withholding (FAW) Attacks on Bitcoin," in *Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (CCS '17)*, ACM, 2017, pp. 195–209.

36. **I. Tsabary and I. Eyal**, "The Gap Game," in *Proceedings of the 11th ACM International Systems and Storage Conference (SYSTOR '18)*, ACM, 2018.

37. **R. Pass and E. Shi**, "Thunderella: Blockchains with Optimistic Instant Confirmation," in *Advances in Cryptology – EUROCRYPT 2018*, Springer International Publishing, 2018, pp. 3–33.

38. **I. Bentov, C. Lee, A. Mizrahi, and M. Rosenfeld**, "Proof of Activity: Extending Bitcoin’s Proof of Work via Proof of Stake [Extended Abstract]," *ACM SIGMETRICS Performance Evaluation Review*, vol. 42, no. 3, pp. 34–37, 2014.

39. **T. Duong, A. Chepurnoy, L. Fan, and H.-S. Zhou**, "Twinscoin: A Cryptocurrency via Proof-of-Work and Proof-of-Stake," in *Proceedings of the 2nd ACM Workshop on Blockchains, Cryptocurrencies, and Contracts (BCC '18)*, ACM, 2018, pp. 1–13. [Online]. Available: http://doi.acm.org/10.1145/3205230.3205233

40. **V. Buterin**, "Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform," 2014. [Online]. Available: https://github.com/ethereum/wiki/wiki/White-Paper

41. **I. Eyal, A. E. Gencer, E. G. Sirer, and R. V. Renesse**, "Bitcoin-NG: A Scalable Blockchain Protocol," in *13th USENIX Symposium on Networked Systems Design and Implementation (NSDI 16)*, Santa Clara, CA: USENIX Association, 2016, pp. 45–59. [Online]. Available: https://www.usenix.org/conference/nsdi16/technical-sessions/presentation/eyal

42. **Waves Platform**, 2018. [Online]. Available: https://wavesplatform.com/

43. **Aeternity Blockchain**, 2018. [Online]. Available: https://aeternity.com/

44. **A. Back, M. Corallo, L. Dashjr, M. Friedenbach, G. Maxwell, A. Miller, A. Poelstra, J. Timón, and P. Wuille**, "Enabling Blockchain Innovations with Pegged Sidechains," URL: http://www.opensciencereview.com/papers/123/enablingblockchain-innovations-with-pegged-sidechains, 2014.

45. **R. Pass, L. Seeman, and A. Shelat**, "Analysis of the Blockchain Protocol in Asynchronous Networks," in *Annual International Conference on the Theory and Applications of Cryptographic Techniques (EUROCRYPT 2017)*, Springer, 2017, pp. 643–673.

46. **A. Kiayias, E. Koutsoupias, M. Kyropoulou, and Y. Tselekounis**, "Blockchain Mining Games," in *Proceedings of the 2016 ACM Conference on Economics and Computation (EC '16)*, ACM, 2016, pp. 365–382.

47. **K. Liao and J. Katz**, "Incentivizing Blockchain Forks via Whale Transactions," in *Financial Cryptography and Data Security*, Springer International Publishing, 2017, pp. 264–279.

48. **Wolfram Research, Inc.**, "Newton-Pepys Problem," 2018. [Online]. Available: http://mathworld.wolfram.com/Newton-PepysProblem.html

49. **C. Decker and R. Wattenhofer**, "Information Propagation in the Bitcoin Network," in *13th IEEE International Conference on Peer-to-Peer Computing (P2P)*, 2013.

50. **Bitcoin Stats - Data Propagation**. [Online]. Available: http://bitcoinstats.com/network/propagation/

51. **T. Ruffing, A. Kate, and D. Schröder**, "Liar, Liar, Coins on Fire!: Penalizing Equivocation by Loss of Bitcoins," in *Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS '15)*, New York, NY, USA: ACM, 2015, pp. 219–230. [Online]. Available: http://doi.acm.org/10.1145/2810103.2813686

52. **J. Poon and T. Dryja**, "The Bitcoin Lightning Network: Scalable Off-Chain Instant Payments," 2016.

53. **J. Garay, A. Kiayias, and N. Leonardos**, "The Bitcoin Backbone Protocol with Chains of Variable Difficulty," in *Annual International Cryptology Conference (CRYPTO 2017)*, Springer, 2017, pp. 291–323.

54. **J. A. Garay, A. Kiayias, and G. Panagiotakos**, "Proofs of Work for Blockchain Protocols," Cryptology ePrint Archive, Report 2017/775, Tech. Rep., 2017.

55. **P. Wei, Q. Yuan, and Y. Zheng**, "Security of the Blockchain Against Long Delay Attack," in *Advances in Cryptology–ASIACRYPT 2018*, 2018.

56. **T. Duong, A. Chepurnoy, and H.-S. Zhou**, "Multi-Mode Cryptocurrency Systems," in *Proceedings of the 2nd ACM Workshop on Blockchains, Cryptocurrencies, and Contracts (BCC '18)*, ACM, 2018, pp. 35–46.

57. **L. Kiffer, R. Rajaraman et al.**, "A Better Method to Analyze Blockchain Consistency," in *Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS '18)*, ACM, 2018, pp. 729–744.

### Appendix A: SHTB MDP Design

#### A. Properties of Deterministic Tie-Breaking Protocols

We can simplify the state representation in these protocols by omitting two kinds of information that do not affect the miners' choices of parent blocks:
1. **Mining History**: We do not need to encode the mining history, as "latecomer" blocks can still win a tie.
2. **Attacker Chain Blocks**: We do not need to explicitly encode how many attacker chain blocks are published, as it can be deduced from the public chain length \( l_c \).

Compliant miners always work on the same chain in deterministic tie-breaking protocols. If the attacker publishes enough blocks so that the compliant miners switch to the attacker chain, the public chain is abandoned, and \( l_c \) is updated to zero. Otherwise, as long as \( l_c > 0 \), we can safely assume the compliant miners are working on the public chain. This analysis also shows that compliant miners always work on the public chain in deterministic tie-breaking protocols.

#### B. State Space

- **\( l_a \)**: Length of the attacker chain, excluding common blocks.
- **\( l_c \)**: Length of the public chain, excluding common blocks.
- **Hashc**: Hash region of the public chain tip.
- **Hash1a, Hash2a**: Hash regions of the last and second last attacker chain blocks, respectively.
- **Tie**: Whether the public chain tip is smaller than its attacker chain competitor. It has two possible values: `aWin` (attacker chain competitor is smaller) and `aLose` (public chain tip is smaller).

The state representation differs based on the length difference of the chains:
- **When \( l_a < l_c + 1 \)**: State is a 4-tuple \((l_a, l_c, \text{Hash}c, \text{Tie})\).
- **When \( l_a = l_c + 1 \)**: State is a 4-tuple \((l_a, l_c, \text{Hash}1a, \text{Tie})\).
- **When \( l_a > l_c + 1 \)**: State is a 4-tuple \((l_a, l_c, \text{Hash}1a, \text{Hash}2a)\).

#### C. Actions

The attacker can choose from four actions:
- **Adopt**: Give up the attacker chain and mine on the public chain. Always available.
- **OverrideWithTie**: Publish until the \( l_c \)-th attacker block to orphan the public chain, and keep mining on the attacker chain after publication. Available when `Tie = aWin`.
- **OverrideWithMore**: Publish until the \((l_c + 1)\)-th attacker block to orphan the public chain, and keep mining on the attacker chain. Available when \( l_a > l_c \).
- **Wait**: Do not publish anything and keep mining on the attacker chain. Always available.

This constrained action set favors the compliant miners. The compliant strategy is equivalent to choosing `Adopt` when the last block is honest and `OverrideWithMore` when the last block is the attacker's.

#### D. Reward Allocation and State Transition

- **Compliant Miners**: Get \( R_c = l_c \) only after `Adopt`.
- **Attacker**: Gets \( R_a = l_c \) or \( l_c + 1 \) after `OverrideWithTie` or `OverrideWithMore`, respectively.
- **No Reward**: After `Wait`.

When a new block is mined, it has an equal probability to reside in every hash region. For example, if there are 10 valid hash regions, the probability that the compliant miners find the next block in region 3 is \((1 - \alpha)/10\). Assuming the new block's hash region is `Hashnew`, if the new block's chain is longer than its competitor, `Hashnew` will be encoded in the next state as `Hash1a` or `Hashc`, depending on the miner. Before replacing a non-empty `Hash1a`, the old `Hash1a` is stored as `Hash2a`. If \( l_a = l_c - 1 \) in the post-publishing temporary state and the new block is mined, the state transitions accordingly.