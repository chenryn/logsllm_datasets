### Container Liveness and Grouping
Kubernetes not only manages container liveness but also groups containers that belong to the same application. Additionally, Kubernetes allows the creation of containers with SELinux labels by defining the `seLinuxOptions` field in the container manifest file.

### IX. Conclusion
In this work, we introduce Winnower, the first practical system for end-to-end provenance-based auditing of clusters at scale. Winnower includes a novel adaptation of graph abstraction techniques that remove instance-specific information from system-level provenance graphs. It further applies graph grammar principles to enable efficient behavioral modeling and comparison in the provenance domain. We evaluated Winnower's performance on cluster applications and five real-world attack scenarios, demonstrating that it reduces storage and network overheads by several orders of magnitude compared to existing solutions, while preserving the necessary context to identify and investigate system attacks.

### Acknowledgments
We would like to thank Hassaan Irshad (SRI International) for his assistance with the SPADE tool and Ben Rabe for his help in running some experiments. We also thank the anonymous reviewers for their valuable feedback. This work was supported in part by NSF CNS grant 16-57534. The views expressed are those of the authors only.

### References
1. "Docker Company," <https://www.docker.com/company>.
2. "Production-grade container orchestration," <https://kubernetes.io/>.
3. "Graph For Scala," <http://www.scala-graph.org/>.
4. "Docker Store - Find Trusted and Enterprise Ready Containers," <https://www.store.docker.com/>.
5. "System administration utilities," <man7.org/linux/man-pages/man8/auditd.8.html/>.
6. "Dirty COW Vulnerability: Impact on Containers," <http://blog.aquasec.com/dirty-cow-vulnerability-impact-on-containers>.
7. "Anchore Example Queries," <https://github.com/anchore/anchore/wiki/Example-Queries>.
8. "Dirtycow-docker-vdso," <https://github.com/gebl/dirtycow-docker-vdso>.
9. "The State Of Containerization: Survey," <http://red.ht/2iortcK>.
10. "LTTng," <http://lttng.org>.
11. "Sysdig," <https://www.sysdig.org>.
12. "openCypher," <http://www.opencypher.org/>.

### Graph Abstraction and DFA Learning
For the purposes of our work, existing graph comparison solutions are not immediately applicable, in part because various sources of non-determinism lead to subtle structural and semantic variations between provenance graphs across executions. To illustrate this limitation, we conducted a preliminary experiment using a naive graph diff in place of DFA learning. Figure 20 shows simplified provenance graphs for two Apache httpd webservers, one of which (20b) has fallen victim to a reverse shell invocation attack. The naive graph diff flagged several subgraphs as anomalous, although they described the same behavior in both executions. In contrast, Winnower accurately identified the attack subgraph without false alarms.

Previous studies have used graph grammar techniques to infer program behavior and specifications using syscall and function call graphs [43], [31]. Babic et al. [14] used induction on tree grammar to learn malicious syscall patterns, which they hoped to recognize at runtime. One of the prominent works in the graph grammar learning space is Jonyer et al.'s [44] SubDue system, which generates context-free grammars to help solve Frequent Subgraph Mining. Given the high overheads associated with DFA learning, Winnower addresses the more challenging problem of leveraging these techniques in a real-time distributed monitoring architecture. We also demonstrate methods of abstracting instance-specific details out of audit records to further improve the compression rate of graph induction.

### Deduplication and Compression
Our work is orthogonal to provenance graph compression and deduplication techniques [69], [25], [15] due to the distributed setting of system-level provenance in our work. Winnower provides scalable compression using DFA learning, which exploits the homogeneity present in the provenance of the same applications across different executions to remove redundancy and generate DFA models. Moreover, DFA models provide an efficient means of membership testing, which Winnower leverages to avoid redundant transmission of provenance data to the central node. In contrast, deduplication and compression techniques do not offer these functionalities. Recently, Chen et al. [28] proposed equivalence-based provenance tree compression to reduce storage overhead. However, their proposal requires distributed applications to be written in a new domain-specific language to find equivalent trees at compile time and works only for network provenance trees.

### VIII. Discussion
Our techniques of graph abstraction and DFA learning for system-level provenance are generic and can be employed in other domains where there is redundancy across executions, such as multiple VMs or independent process executions, as we do not make any assumptions regarding the applications and their workloads. We focus on container clusters in this paper because these techniques are ideal for environments that adhere to the microservice architecture principle (software as discrete, loosely-coupled, replicated services for scalability and fault-tolerance). There is a recent paradigm shift in the industry towards using Docker containers in clusters due to their advantages over hypervisor-based VMs [34].

Our framework is extensible to Kubernetes [2], another popular container cluster management tool. The only submodule from our architecture (§IV) that needs to be changed is the one responsible for collecting and processing provenance data.

### References (Continued)
13. P. Adriaans and C. Jacobs, "Using MDL for grammar induction," Grammatical Inference: Algorithms and . . . , pp. 293–306, 2006.
14. D. Babić, D. Reynaud, and D. Song, "Recognizing malicious software behaviors with tree automata inference," Form. Methods Syst. Des., vol. 41, no. 1, 2012.
15. Z. Bao, H. Köhler, L. Wang, X. Zhou, and S. Sadiq, "Efficient provenance storage for relational queries," in CIKM, 2012.
16. P. Barham, A. Donnelly, R. Isaacs, and R. Mortier, "Using magpie for request extraction and workload modelling." in OSDI, 2004.
17. A. Barron, J. Rissanen, and B. Yu, "The minimum description length principle in coding and modeling," IEEE Transactions on Information Theory, vol. 44, no. 6, pp. 2743–2760, 1998.
18. A. Bates, K. Butler, A. Haeberlen, M. Sherr, and W. Zhou, "Let SDN Be Your Eyes: Secure Forensics in Data Center Networks," in SENT, 2014.
19. A. Bates, W. U. Hassan, K. Butler, A. Dobra, B. Reaves, P. Cable, T. Moyer, and N. Schear, "Transparent web service auditing via network provenance functions," in WWW, 2017.
20. A. Bates, D. Tian, K. R. B. Butler, and T. Moyer, "Trustworthy whole-system provenance for the Linux kernel," in USENIX Security, 2015.
21. T. Benson, A. Akella, and D. A. Maltz, "Network traffic characteristics of data centers in the wild," in IMC, 2010.
22. D. Bernstein, "Containers and cloud: From lxc to docker to kubernetes," IEEE Cloud Computing, vol. 1, no. 3, pp. 81–84, 2014.
23. M. A. Borkin, C. S. Yeh, M. Boyd, P. Macko, K. Z. Gajos, M. Seltzer, and H. Pfister, "Evaluation of filesystem provenance visualization tools," IEEE Transactions on Visualization and Computer Graphics, vol. 19, no. 12, pp. 2476–2485, 2013.
24. H. Bunke, "On a relation between graph edit distance and maximum common subgraph," Pattern Recognition Letters, vol. 18, no. 8, 1997.
25. A. Chapman, H. Jagadish, and P. Ramanan, "Efficient Provenance Storage," in SIGMOD, 2008.
26. A. Chen, Y. Wu, A. Haeberlen, B. T. Loo, and W. Zhou, "Data provenance at internet scale: Architecture, experiences, and the road ahead," in CIDR, 2017.
27. A. Chen, Y. Wu, A. Haeberlen, W. Zhou, and B. T. Loo, "The good, the bad, and the differences: Better network diagnostics with differential provenance," in SIGCOMM, 2016.
28. C. Chen, H. T. Lehri, L. Kuan Loh, A. Alur, L. Jia, B. T. Loo, and W. Zhou, "Distributed provenance compression," in SIGMOD, 2017.
29. M. Y. Chen, A. Accardi, E. Kiciman, J. Lloyd, D. Patterson, A. Fox, and E. Brewer, "Path-based failure and evolution management," in NSDI, 2004.
30. L. Chiticariu, W.-C. Tan, and G. Vijayvargiya, "DBNotes: A Post-it System for Relational Databases Based on Provenance," in SIGMOD, 2005.
31. J. E. Cook and A. L. Wolf, "Discovering models of software processes from event-based data," ACM Trans. Softw. Eng. Methodol., vol. 7, no. 3, pp. 215–249, 1998.
32. C. De la Higuera, Grammatical Inference: Learning Automata and Grammars. Cambridge University Press, 2010.
33. U. Erlingsson, M. Peinado, S. Peter, M. Budiu, and G. Mainar-Ruiz, "Fay: Extensible distributed tracing from kernels to clusters," ACM Trans. Comput. Syst., vol. 30, pp. 13:1–13:35, 2012.
34. W. Felter, A. Ferreira, R. Rajamony, and J. Rubio, "An updated performance comparison of virtual machines and Linux containers," in ISPASS, 2015.
35. I. T. Foster, J.-S. Vöckler, M. Wilde, and Y. Zhao, "Chimera: A Virtual Data System for Representing, Querying, and Automating Data Derivation," in SSDBM, 2002.
36. A. Gehani, H. Kazmi, and H. Irshad, "Scaling SPADE to 'Big Provenance,'" in TaPP, 2016.
37. A. Gehani and D. Tariq, "SPADE: Support for Provenance Auditing in Distributed Environments," in Middleware, 2012.
38. A. Goel, K. Po, K. Farhadi, Z. Li, and E. De Lara, "The taser intrusion recovery system," in ACM SIGOPS Operating Systems Review, 2005.
39. P. Groth and L. Moreau, "Representing Distributed Systems Using the Open Provenance Model," Future Gener. Comput. Syst., vol. 27, no. 6, 2011.
40. P. D. Grünwald, The Minimum Description Length Principle. MIT press, 2007.
41. C. D. L. Higuera, "A bibliographical study of grammatical inference," Pattern recognition, 2005.
42. C. Jiang, F. Coenen, and M. Zito, "A survey of frequent subgraph mining algorithms," The Knowledge Engineering Review, vol. 28, no. 01, pp. 75–105, 2013.
43. R. Jin, C. Wang, D. Polshakov, S. Parthasarathy, and G. Agrawal, "Discovering frequent topological structures from graph datasets," in KDD, 2005.
44. I. Jonyer, L. B. Holder, and D. J. Cook, "MDL-based context-free graph grammar induction and applications," International Journal on Artificial Intelligence Tools, vol. 13, no. 01, pp. 65–79, 2004.
45. G. Karvounarakis, T. J. Green, Z. G. Ives, and V. Tannen, "Collaborative data sharing via update exchange and provenance," ACM Trans. Database Syst., vol. 38, no. 3, pp. 19:1–19:42, 2013.
46. T. Kim, X. Wang, N. Zeldovich, and M. F. Kaashoek, "Intrusion recovery using selective re-execution," in OSDI, 2010.
47. S. T. King and P. M. Chen, "Backtracking intrusions," in SOSP, 2003.
48. G. Kurtz, "Operation Aurora Hit Google, Others," 2010, <http://securityinnovator.com/index.php?articleID=42948&sectionID=25>.
49. K. J. Lang, B. A. Pearlmutter, and R. A. Price, Results of the Abbadingo One DFA Learning Competition and a New Evidence-Driven State Merging Algorithm. Springer Berlin Heidelberg, 1998.
50. K. H. Lee, X. Zhang, and D. Xu, "High Accuracy Attack Provenance via Binary-based Execution Partition," in NDSS, 2013.
51. K. H. Lee, X. Zhang, and D. Xu, "LogGC: Garbage collecting audit log," in CCS, 2013.
52. Y. Liu, M. Zhang, D. Li, K. Jee, Z. Li, Z. Wu, J. Rhee, and P. Mittal, "Towards a timely causality analysis for enterprise security," in NDSS, 2018.
53. S. Ma, J. Zhai, F. Wang, K. H. Lee, X. Zhang, and D. Xu, "MPI: Multiple perspective attack investigation with semantic aware execution partitioning," in USENIX Security, 2017.
54. S. Ma, X. Zhang, and D. Xu, "ProTracer: Towards Practical Provenance Tracing by Alternating Between Logging and Tainting," in NDSS, 2016.
55. J. Mace, R. Roelke, and R. Fonseca, "Pivot tracing: Dynamic causal monitoring for distributed systems," in SOSP, 2015.
56. P. Macko and M. Seltzer, "Provenance Map Orbiter: Interactive Exploration of Large Provenance Graphs." in TaPP, 2011.
57. J. Morris, "svirt: Hardening Linux virtualization with mandatory access control," in Linux. conf. au Conference, 2009.
58. K.-K. Muniswamy-Reddy, D. A. Holland, U. Braun, and M. Seltzer, "Provenance-aware Storage Systems," in ATC, 2006.
59. D. Namiot and M. Sneps-Sneppe, "On micro-services architecture," International Journal of Open Information Technologies, vol. 2, no. 9, pp. 24–27, 2014.
60. T. Pasquier, J. Singh, D. Eyers, and J. Bacon, "CamFlow: Managed data-sharing for cloud services," in IEEE Transactions on Cloud Computing, 2015.
61. D. Pohly, S. McLaughlin, P. McDaniel, and K. Butler, "Hi-Fi: Collecting High-Fidelity Whole-System Provenance," in ACSAC, 2012.
62. K. Riesen, M. Neuhaus, and H. Bunke, Bipartite Graph Matching for Computing the Edit Distance of Graphs. Springer Berlin Heidelberg, 2007.
63. R. Shu, X. Gu, and W. Enck, "A study of security vulnerabilities on Docker Hub," in CODASPY, 2017.
64. B. H. Sigelman, L. A. Barroso, M. Burrows, P. Stephenson, M. Plakal, D. Beaver, S. Jaspan, and C. Shanbhag, "Dapper, a large-scale distributed systems tracing infrastructure," Technical report, Google, Inc, Tech. Rep., 2010.
65. B. Tak, C. Isci, S. Duri, N. Bila, S. Nadgowda, and J. Doran, "Understanding security implications of using containers in the cloud," in USENIX ATC, 2017.
66. D. Wagner and P. Soto, "Mimicry attacks on host-based intrusion detection systems," in CCS, 2002.
67. Q. Wang, W. U. Hassan, A. Bates, and C. Gunter, "Fear and logging in the Internet of Things," in NDSS, 2018.
68. W. Wieczorek, Grammatical Inference: Algorithms, Routines and Applications. Springer, 2016, vol. 673.
69. Y. Xie, D. Feng, Z. Tan, L. Chen, K.-K. Muniswamy-Reddy, Y. Li, and D. D. Long, "A Hybrid Approach for Efficient Provenance Storage," in CIKM, 2012.
70. L. Zeng, Y. Xiao, and H. Chen, "Linux auditing: Overhead and adaptation," in IEEE ICC, 2015.
71. C. Zhao, J. Kong, and K. Zhang, "Program behavior discovery and verification: A graph grammar approach," IEEE TSE, vol. 36, no. 3, pp. 431–448, May 2010.
72. W. Zhou, Q. Fei, A. Narayan, A. Haeberlen, B. T. Loo, and M. Sherr, "Secure Network Provenance," in SOSP, 2011.