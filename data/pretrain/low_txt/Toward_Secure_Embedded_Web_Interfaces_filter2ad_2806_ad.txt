### Regular Website Performance for an Embedded Interface

For an embedded interface, we argue that the performance of WebDroid is acceptable. Even with 128 simultaneous connections, WebDroid can serve every request in under 80 milliseconds, which is below the optimal user tolerance time of 100 milliseconds [37].

**Figure 8: The WebMedia Embedded Web Application**

### 9.2 Attack Surfaces

Without framework support, web applications are vulnerable to multiple security threats. In the WebSMS application, the contact search feature can be a vector for reflected Cross-Site Scripting (XSS) or SQL injection attacks. Additionally, the ability to send messages and view their contents afterward can lead to stored XSS in both the sending and receiving phones. The WebMedia application is also susceptible to Cross-Site Request Forgery (CSRF) attacks.

XSS attacks enable attackers to steal private information, such as contact lists and SMS content. CSRF attacks can be used to send SMS on behalf of the user, potentially leading to embarrassing situations or financial loss. In extreme cases, if the phone is used as a trusted device for authorizing sensitive operations like bank transfers, the combination of XSS and CSRF attacks can allow a malicious user to bypass security mechanisms and conduct fraudulent operations.

### 9.3 Security Evaluation

To evaluate whether our framework can mitigate attacks against vulnerable applications, we ran web scanners Skipfish and Nexpose on our applications with and without the framework's defense mechanisms. When the defenses were turned off, both scanners detected reflected and stored XSS vulnerabilities in the WebSMS application. With the defenses enabled, no vulnerabilities were reported. It is worth noting that neither scanner detected the CSRF vulnerabilities.

**Figure 10: Average Time to Process a Request with and Without Security Features Enabled**

### 10 Related Work

#### Browser Defenses

The Mozilla Foundation’s Content Security Policy (CSP) [14] allows a site to specify restrictions on content served from the site, including which external resources the content can load. For example, the CSP header `X-Content-Security-Policy: allow self` prevents the content from loading any external resources or executing inline scripts. Replacing "allow self" with "allow whitelist" allows external resources from a specified whitelist. Another system, SiteFirewall [9], takes a similar approach but also allows persistent browser-side policy storage via cookies or other secure objects. SiteFirewall can block some types of XCS attacks by acting as a firewall between vulnerable internal web sites and those accessed by the user on the open Internet. A third proposal, SOMA [38], implements a mutual consent policy on cross-origin links, requiring both the embedding and embedded content to agree to the action being initiated. Finally, Content Restrictions [32] is another approach to defining content control policies on websites.

#### Frameworks

Generic web frameworks, such as Ruby on Rails [41] and Django, implement numerous features like built-in CSRF defenses, making it easier for developers to build secure web interfaces. However, these frameworks are heavy and not suitable for embedded devices. To our knowledge, there is no framework specifically designed for embedded devices. While these frameworks are designed with security in mind, they do not make secure web application design intuitive for the developer.

### 11 Conclusion

We present WebDroid, the first web application framework explicitly designed for embedded applications, with a particular emphasis on secure web application design. Our work is motivated by extensive audits conducted over the last two years on a broad range of embedded web servers. We evaluate WebDroid's performance and show that, despite a 20% performance hit when all security features are activated, WebDroid remains sufficiently fast for its purpose. As a case study, we built two sample web applications.

### Acknowledgment

We thank Samuel King and anonymous reviewers for their comments and suggestions. This work was partially supported by the National Science Foundation, the Air Force Office of Scientific Research, and the Office of Naval Research.

### References

[1] Minded Security Research Labs: HTTP Parameter Pollution: A New Web Attack Category (Not Just a New Buzzword :p). Web http://blog.mindedsecurity.com/2009/05/http-parameter-pollution-new-web-attack.html, 2009. 8

[2] Minded Security Research Labs: A Twitter DOMXSS, Web a Wrong Fix and Something More. http://blog.mindedsecurity.com/2010/09/twitter-domxss-wrong-fix-and-something.html, 2010. 8

[3] Minded Security Research Labs: Bypassing CSRF Protections with Clickjacking and HTTP Parameter Pollution. Web http://blog.andlabs.org/2010/03/bypassing-csrf-protections-with.html, 2010. 8

[4] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. Saner: Composing Static and Dynamic Analysis to Validate Sanitization in Web Applications. In IEEE Symposium on Security and Privacy, 2008. 13

[5] A. Barth, C. Jackson, and I. Hickson. The HTTP Origin Header. Web http://tools.ietf.org/id/draft-abarth-origin-03.html, 2009. 8

[6] A. Barth, C. Jackson, and J. Mitchell. Robust Defenses for Cross-Site Request Forgery. In Proceedings of ACM CCS '08, 2008. 5, 6, 13

[7] H. Bojinov, E. Bursztein, and D. Boneh. Embedded Management Interfaces: Emerging Massive Insecurity. In Blackhat USA, July 2009. Invited talk. 1

[8] H. Bojinov, E. Bursztein, and D. Boneh. XCS: Cross Channel Scripting and Its Impact on Web Applications. In CCS '09: Proceedings of the 16th ACM Conference on Computer and Communications Security, pages 420–431. ACM, 2009. 1, 3

[11] P. Efstathopoulos, M. Krohn, S. VanDeBogart, C. Frey, D. Ziegler, E. Kohler, D. Mazieres, F. Kaashoek, and R. Morris. Labels and Event Processes in the Asbestos Operating System. In Proceedings of the Twentieth ACM Symposium on Operating Systems Principles, pages 17–30. ACM, 2005. 13

[12] Facebook. Tornado Web Server. Web http://developers.facebook.com/news.php?blog=1&story=301, 2009. 13

[13] S. Fogie, J. Grossman, R. Hansen, A. Rager, and P. Petkov. XSS Exploits: Cross Site Scripting Attacks and Defense. Syngress, 2007. 2, 3, 5, 13

[14] M. Foundation. Content Security Policy, 2009. wiki.mozilla.org/Security/CSP/Spec. 6, 8, 13

[15] Google. Android OS. Web http://www.android.com/, 2008. 13

[16] B. Gourdin. Webdroid: Google Code Project. http://code.google.com/p/android-secure-web-server/. 1

[17] O. Hallaraker and G. Vigna. Detecting Malicious JavaScript Code in Mozilla. In Proceedings of the IEEE International Conference on Engineering of Complex Computer Systems (ICECCS), 2005. 13

[18] R. Hansen. Clickjacking. ha.ckers.org/blog/20080915/clickjacking. 3

[19] C. Heffner. How to Hack Millions of Routers. In Blackhat USA, 2010. 1

[20] J. Hewitt and R. Campbell. Firebug 1.3.3, 2009. http://getfirebug.com/. 4

[21] T. Holz, S. Marechal, and F. Raynal. New Threats and Attacks on the World Wide Web. Security & Privacy, IEEE, 4(2):72–75, March-April 2006. 4, 5

[22] HTTP Strict Transport Security (HSTS), 2011. http://http://bit.ly/lwqdlu. 9

[9] H. Bojinov, E. Bursztein, and D. Boneh. XCS: Cross Channel Scripting and Its Impact on Web Applications. In CCS 2009: 16th ACM Conference on Computer and Communications Security, Nov 2009. 3, 4, 13

[23] C. Jackson and A. Barth. ForceHTTPS: Protecting High-Security Websites from Network Attacks. In Proceedings of the 17th International World Wide Web Conference (WWW2008), 2008. 9

[10] CIFS Security Consideration Update, 1997. http://www.jalix.org/ressources/reseaux/nfs-samba/˜cifs/CIFS-Security-Considerations.txt. 13

[24] T. Jim, N. Swamy, and M. Hicks. Defeating Script Injection Attacks with Browser-Enforced Embedded Policies. In Proceedings of the 16th International World Wide Web Conference, 2007. 13

[25] N. Jovanovic, C. Kruegel, and E. Kirda. Precise Alias Analysis for Static Detection of Web Application Vulnerabilities. In Proceedings of the Workshop on Programming Languages and Analysis for Security (PLAS), 2006. 13

[26] A. Judson. Tamper Data 10.1.0, 2008. http://tamperdata.mozdev.org/. 4

[27] S. Kamkar. MapXSS: Accurate Geolocation via Router Exploitation. http://samy.pl/mapxss/, January 2010. 1

[28] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes: A Client-Side Solution for Mitigating Cross-Site Scripting Attacks. In Proceedings of the 21st ACM Symposium on Applied Computing (SAC), Security Track, 2006. 13

[29] M. Krohn. Building Secure High-Performance Web Services with OKWS. In Proceedings of the Annual Conference on USENIX Annual Technical Conference, page 15. USENIX Association, 2004. 2, 6, 13

[30] M. Krohn, A. Yip, M. Brodsky, N. Cliffer, M. Kaashoek, E. Kohler, and R. Morris. Information Flow Control for Standard OS Abstractions. In Proceedings of the Twenty-First ACM SIGOPS Symposium on Operating Systems Principles, pages 321–334. ACM, 2007. 13

[31] G. F. Lyon. Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning, volume 978-0470170779. Nmap Project, 2007. 4

[32] G. Markham. Content Restrictions, 2007. www.gerv.net/security/content-restrictions/. 13

[33] Microsoft. Mitigating Cross-Site Scripting with HTTP-Only Cookies. Web http://msdn.microsoft.com/en-us/library/ms533046.aspx, 2009. 7

[34] Microsoft. URLScan 3.1. Web http://www.iis.net/download/urlscan, 2011. 9

[35] Netcraft. Totals for Active Servers Across All Domains. Website http://news.netcraft.com/archives/2009/06/17/june_2009_web_server_survey.html, Jun 2009. 2

[36] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and D. Evans. Automatically Hardening Web Applications Using Precise Tainting. In Proceedings of the 20th IFIP International Information Security Conference, 2005. 13

[37] J. Nielsen. Response Times: The 3 Important Limits. http://www.useit.com/papers/responsetime.html. 12

[38] T. Oda, G. Wurster, P. van Oorschot, and A. Somayaji. SOMA: Mutual Approval for Included Content in Web Pages. In ACM CCS'08, pages 89–98, 2008. 13

[39] P. Peteﬁsh, E. Sheridan, and D. Wichers. Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet. Web http://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet, 2010. 8

[40] T. Pietraszek and C. V. Berghe. Defending Against Injection Attacks Through Context-Sensitive String Evaluation. In Recent Advances in Intrusion Detection (RAID), 2005. 13

[41] Ruby on Rails. http://rubyonrails.org/. 13

[42] R. Rogers. Nessus Network Auditing, Second Edition, volume 978-1597492089. Syngress, 2008. 4

[43] RSnake. XSS (Cross Site Scripting) Cheat Sheet for Filter Evasion. http://ha.ckers.org/xss.html. 13

[44] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jackson. Busting Frame Busting: A Study of Clickjacking Vulnerabilities at Popular Sites. In IEEE Oakland Web 2.0 Security and Privacy (W2SP 2010), 2010. 2, 8

[45] G. Rydstedt, B. Gourdin, E. Bursztein, and D. Boneh. Framing Attacks on Smartphones, Dumb Routers, and Social Sites: Tap-Jacking, Geolocation, and Framing Leak Attacks. In Woot, 2001. 1

[46] P. Saxena and D. Song. Document Structure Integrity: A Robust Basis for Cross-Site Scripting Defense. In Proceedings of NDSS'08, 2008. 13

[47] Log Injection Attack and Defense, 2007. http://bit.ly/kbMebK. 13

[48] Basic Vulnerability Issues for SIP Security, 2005. http://download.securelogix.com/library/SIP_Security030105.pdf. 13

[49] P. Stone. Next Generation Clickjacking. Media.blackhat.com/bh-eu-10/presentations/Stone/BlackHat-EU-2010-Stone-Next-Generation-Clickjacking-slides.pdf, 2010. 3

[50] D. Stuttard and M. Pinto. The Web Application Hacker’s Handbook: Discovering and Exploiting Security Flaws, volume 978-0470170779. Wiley, 2007. 1, 2, 3

[51] B. Walther. Edit Cookies 0.2.2.1, 2007. https://addons.mozilla.org/en-US/firefox/addon/4510. 4

[52] D. Wichers. SQL Injection Prevention Cheat Sheet. Web http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet, 2011. 9

[53] Y. Xie and A. Aiken. Static Detection of Security Vulnerabilities in Scripting Languages. In Proceedings of the USENIX Security Symposium, 2006. 13

[54] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazières. Making Information Flow Explicit in Histar. In 7th Symposium on Operating Systems Design and Implementation, 2006. 13