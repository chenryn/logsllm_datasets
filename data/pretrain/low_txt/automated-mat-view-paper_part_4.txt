### Optimized Text

#### Materialized View Selection and Query Cost Calculation

A dynamic programming knapsack algorithm can be used to determine which materialized views should be added, based on the values calculated in the equation above and the weight defined as the amount of disk space reserved for the materialized views. The actual query costs were computed by first running the query twice and ignoring the results, then immediately running the query three more times and taking the average of these last three runs to determine the cost. An overview of the results is shown in Table 1.

The 10% threshold resulted in the generation of three candidate materialized views. Out of the twenty-two queries in our workload, eight queries could be written using at least one of the three generated materialized views. Five of these rewritten queries lowered the cost using two of the three generated candidate materialized views. Four of the five improved query rewrites were from one of the materialized views, while only one was from the other materialized view, resulting in the lowest cost improvement (6%). The two materialized views required 1.85 GB of disk space.

The 2% threshold resulted in the generation of eight candidate materialized views. Of the twenty-two queries in our workload, ten queries could be written using at least one of the eight generated candidate materialized views. Eight of the ten rewritten queries had reduced costs by using a materialized view, with performance improvements ranging from 6% to 57%. Four of the eight generated materialized views were selected and required 2.7 GB of disk space.

#### Experiments

Our goal is to build an open-source project for PostgreSQL to support an automatic physical design advisor. So far, we have implemented several components such as a parser, a materialized view generator, SQL rewriting, and materialized view selection. These parts cooperate well under PostgreSQL. The next step is to improve the performance of each component. In materialized view generation, we need to follow the idea of generating all available materialized views and then selecting the best one for each query. After this, we can use a "merge" algorithm to improve the performance for the entire workload. Additionally, how to generate materialized views that are useful for the whole workload is still an open problem. We can try new algorithms, and it is easy to plug in new algorithms into our design.

#### Future Work

First, the PostgreSQL optimizer must be modified to support a "What-If" mode. This involves changing the source files of PostgreSQL to allow users to create hypothetical indexes and materialized views. For these hypothetical physical structures, PostgreSQL will only keep statistics information but no physical structures. The commands should look like:

```sql
CREATE INDEX A ON Table WITH STATISTICS_ONLY;
CREATE MATERIALIZED VIEW B AS Query WITH STATISTICS_ONLY;
```

This step involves removing something from the CREATE source code. The second step is to modify the optimizer to use these hypothetical physical structures. It should allow users to define the running mode, e.g., the hypothetical mode or the regular mode. Under the hypothetical mode, all datasets and plans are fixed. PostgreSQL will only accept: (1) the CREATE and DELETE statements to create and delete hypothetical physical structures; (2) the EXPLAIN query to get the estimated cost. The benefit of the "What-If" mode is reducing the time to measure the importance of materialized views without creating the actual physical structure, but just using statistics information used by the optimizer. The challenge here is becoming more familiar with PostgreSQL's source code and making careful modifications.

Second, it is necessary to implement components to recommend indexes on both original tables and materialized views. All previous papers show that materialized views with indexes can significantly improve performance. The three commercial databases (Microsoft Server, IBM DB2, and Oracle) all implement index advisors, and we can implement a similar one under PostgreSQL. Implementing an index advisor under PostgreSQL should be easier than a materialized view advisor since PostgreSQL supports index features well. After creating indexes, the optimizer can automatically choose the best index for each query, so it does not require a query rewriting component in the advisor. After finishing the index advisor, we can jointly enumerate candidate indexes and materialized views.

#### Conclusion

This open-source project borrows ideas from three commercial databases: Microsoft Server, IBM DB2, and Oracle. We have implemented almost all the components except the "What-If" mode. Our components run perfectly under PostgreSQL. We can generate some simple candidate materialized views and rewrite queries to utilize materialized views. 

For more information on this project, including the test database and client code, feel free to contact the authors via the emails listed on the first page.

#### References

[1] Materialized Views. http://wiki.postgresql.org/wiki/Materialized_Views.
[2] PostgreSQL 9.2.4 Documentation - Using EXPLAIN. http://www.postgresql.org/docs/9.2/static/using-explain.html.
[3] TPC-H is an ad-hoc, decision support benchmark. http://www.tpc.org/tpch/.
[4] A. Aboulnaga, P. J. Haas, S. Lightstone, G. M. Lohman, V. Markl, I. Popivanov, and V. Raman. Automated statistics collection in db2udb. In VLDB, pages 1146–1157, 2004.
[5] R. Agrawal and R. Srikant. Fast algorithms for mining association rules in large databases. In VLDB, pages 487–499, 1994.
[6] S. Agrawal, S. Chaudhuri, L. Kollár, A. P. Marathe, V. R. Narasayya, and M. Syamala. Database tuning advisor for Microsoft SQL Server 2005. In VLDB, pages 1110–1121, 2004.
[7] S. Agrawal, S. Chaudhuri, and V. R. Narasayya. Automated selection of materialized views and indexes in SQL databases. In VLDB, pages 496–505, 2000.
[8] S. Agrawal, E. Chu, and V. R. Narasayya. Automatic physical design tuning: workload as a sequence. In SIGMOD Conference, pages 683–694, 2006.
[9] S. Agrawal, V. R. Narasayya, and B. Yang. Integrating vertical and horizontal partitioning into automated physical database design. In SIGMOD Conference, pages 359–370, 2004.
[10] E. Baralis, S. Paraboschi, and E. Teniente. Materialized views selection in a multidimensional database. In VLDB, pages 156–165, 1997.
[11] N. Bruno and S. Chaudhuri. Physical design refinement: The "merge-reduce" approach. In EDBT, pages 386–404, 2006.
[12] D. Chak. Materialized Views that Really Work. http://www.pgcon.org/2008/schedule/events/69.en.html, 2008.
[13] M. B. Chaudhari and S. W. Dietrich. Metadata services for distributed event stream processing agents. In SEDE, pages 307–312, 2010.
[14] S. Chaudhuri, E. Christensen, G. Graefe, V. R. Narasayya, and M. J. Zwilling. Self-tuning technology in Microsoft SQL Server. IEEE Data Eng. Bull., 22(2):20–26, 1999.
[15] S. Chaudhuri, M. Datar, and V. R. Narasayya. Index selection for databases: A hardness study and a principled heuristic solution. IEEE Trans. Knowl. Data Eng., 16(11):1313–1323, 2004.
[16] S. Chaudhuri, A. C. König, and V. R. Narasayya. SQLCM: A continuous monitoring framework for relational database engines. In ICDE, pages 473–484, 2004.
[17] S. Chaudhuri, R. Krishnamurthy, S. Potamianos, and K. Shim. Optimizing queries with materialized views. In ICDE, pages 190–200, 1995.
[18] S. Chaudhuri and V. R. Narasayya. An efficient cost-driven index selection tool for Microsoft SQL Server. In VLDB, pages 146–155, 1997.
[19] S. Chaudhuri and V. R. Narasayya. AutoAdmin 'What-If' index analysis utility. In SIGMOD Conference, pages 367–378, 1998.
[20] S. Chaudhuri and V. R. Narasayya. Automating statistics management for query optimizers. IEEE Trans. Knowl. Data Eng., 13(1):7–20, 2001.
[21] S. Chaudhuri and V. R. Narasayya. Self-tuning database systems: A decade of progress. In VLDB, pages 3–14, 2007.
[22] S. Chaudhuri, V. R. Narasayya, and R. Ramamurthy. Estimating progress of long-running SQL queries. In SIGMOD Conference, pages 803–814, 2004.
[23] S. Chaudhuri and G. Weikum. Foundations of automated database tuning. In ICDE, page 104, 2006.
[24] B. Dageville, D. Das, K. Dias, K. Yagoub, M. Zaït, and M. Ziauddin. Automatic SQL tuning in Oracle 10g. In VLDB, pages 1098–1109, 2004.
[25] B. Dageville and M. Zaït. SQL memory management in Oracle 9i. In VLDB, pages 962–973, 2002.
[26] A. El-Helw, I. F. Ilyas, W. Lau, V. Markl, and C. Zuzarte. Collecting and maintaining just-in-time statistics. In ICDE, pages 516–525, 2007.
[27] S. J. Finkelstein, M. Schkolnick, and P. Tiberio. Physical database design for relational databases. ACM Trans. Database Syst., 13(1):91–128, 1988.
[28] M. R. Frank, E. Omiecinski, and S. B. Navathe. Adaptive and automated index selection in RDBMS. In EDBT, pages 277–292, 1992.
[29] J. Gardner. PostgreSQL/Materialized Views. http://tech.jonathangardner.net/wiki/PostgreSQL/Materialized_Views.
[30] H. Gupta and I. S. Mumick. Selection of views to materialize under a maintenance cost constraint. In ICDT, pages 453–470, 1999.
[31] M. Hammer and A. Chan. Index selection in a self-adaptive database management system. In SIGMOD Conference, pages 1–8, 1976.
[32] Y. Kotidis and N. Roussopoulos. Dynamat: A dynamic view management system for data warehouses. In SIGMOD, pages 371–382, 1999.
[33] C. Mishra and N. Koudas. A lightweight online framework for query progress indicators. In ICDE, pages 1292–1296, 2007.
[34] H. Mistry, P. Roy, S. Sudarshan, and K. Ramamritham. Materialized view selection and maintenance using multi-query optimization. In SIGMOD, pages 307–318, 2001.
[35] S. Papadomanolakis and A. Ailamaki. AutoPart: Automating schema design for large scientific databases using data partitioning. In SSDBM, pages 383–392, 2004.
[36] S. Rozen and D. Shasha. A framework for automating physical database design. In VLDB, pages 401–411, 1991.
[37] P. Scheuermann, W.-S. Li, and C. Clifton. Watchman: A data warehouse intelligent cache. In VLDB, pages 51–62, 1996.
[38] M. Stonebraker. The choice of partial inversions and combined indices. International Journal of Parallel Programming, 3(2):167–188, 1974.
[39] D. Theodoratos and T. Sellis. Data warehouse configuration. In VLDB, pages 126–135, 1997.
[40] G. Valentin, M. Zuliani, D. C. Zilio, G. M. Lohman, and A. Skelley. DB2 Advisor: An optimizer smart enough to recommend its own indexes. In ICDE, pages 101–110, 2000.
[41] G. Weikum, A. Mönkeberg, C. Hasse, and P. Zabback. Self-tuning database technology and information services: From wishful thinking to viable engineering. In VLDB, pages 20–31, 2002.
[42] J. Zhou, P.-A. Larson, and H. G. Elmongui. Lazy maintenance of materialized views. In VLDB, pages 231–242, 2007.
[43] D. C. Zilio, J. Rao, S. Lightstone, G. M. Lohman, A. J. Storm, C. Garcia-Arellano, and S. Fadden. DB2 Design Advisor: Integrated automatic physical database design. In VLDB, pages 1087–1097, 2004.
[44] D. C. Zilio, C. Zuzarte, S. Lightstone, W. Ma, G. M. Lohman, R. Cochrane, H. Pirahesh, L. S. Colby, J. Gryz, E. Alton, D. Liang, and G. Valentin. Recommending materialized views and indexes with IBM DB2 Design Advisor. In ICAC, pages 180–188, 2004.