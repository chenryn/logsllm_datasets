# Title: A Comprehensive Symbolic Analysis of TLS 1.3

## Authors:
- Cas Cremers, MPI-SWS, Germany
- Marko Horvat, Royal Holloway, University of London, UK
- Jonathan Hoyland, University of Oxford, UK
- Sam Scott, Royal Holloway, University of London, UK
- Thyla van der Merwe, Royal Holloway, University of London, UK

## Abstract
The Transport Layer Security (TLS) protocol is designed to enable secure end-to-end communication over insecure networks, including the Internet. Unfortunately, this goal has been compromised multiple times during the protocol's lifetime, necessitating the development of a new version, TLS 1.3. Over the past three years, in an unprecedented collaborative effort with the academic community, the TLS Working Group has worked diligently to enhance the security of TLS.

In this work, we construct the most comprehensive, faithful, and modular symbolic model of the TLS 1.3 draft 21 release candidate. We use the Tamarin prover to verify the claimed security requirements of TLS 1.3 as outlined in draft 21 of the specification. Our model covers all handshake modes of TLS 1.3.

Our analysis reveals an unexpected behavior that may inhibit strong authentication guarantees in some implementations of the protocol. Unlike previous models, we provide a novel way of making the relationship between the TLS specification and our model explicit: we offer a fully annotated version of the specification that clarifies which protocol elements are modeled and how they are modeled. We anticipate that this model will be highly beneficial to both the academic community and the TLS Working Group.

## Keywords
symbolic verification, authenticated key exchange, TLS 1.3

## 1. Introduction
The Transport Layer Security (TLS) protocol is the de facto standard for securing communications on the World Wide Web. Initially released as Secure Sockets Layer (SSL) by Netscape Communications in 1995, the protocol has undergone several version upgrades over its 20-year lifespan. Rebranded as TLS when it came under the auspices of the Internet Engineering Task Force (IETF) in the mid-1990s, the protocol has been incrementally modified and extended.

For TLS 1.2 and earlier versions, modifications were often reactive, with the TLS Working Group (WG) releasing protocol extensions or patches in response to announced attacks. However, the heightened interest in the protocol and the increasing number of practical attacks post-2011, along with the need for increased efficiency, led the IETF to start drafting TLS 1.3 in the spring of 2014. The TLS WG adopted an "analysis-prior-to-deployment" design philosophy, welcoming contributions from the academic community before the official release.

Substantial efforts from the academic community have included program verification, computational models, and the use of formal methods tools such as ProVerif and Tamarin to analyze symbolic models of TLS. These endeavors have helped to find weaknesses in the protocol and guide the design decisions of the TLS WG.

The TLS 1.3 draft specification has been a rapidly evolving target, with significant changes occurring regularly. This has often rendered much of the analysis work outdated within a few months, as large changes to the specification effectively result in a new protocol requiring a new wave of analysis.

In this work, we contribute to what is hopefully the final wave of analysis of TLS 1.3 prior to its official release. We present a tool-supported, symbolic verification of a near-final draft of TLS 1.3, adding to the extensive efforts by the TLS community to ensure that TLS 1.3 is free of the many weaknesses affecting earlier versions and is imbued with robust security guarantees. We note that most of the cryptographic mechanisms in the current TLS 1.3 draft are stable, and other than fluctuations surrounding the zero-Round-Trip-Time (0-RTT) mechanism, we do not expect substantial changes.

### 1.1 Contributions
Our main contributions in this work are as follows:

1. **Symbolic Model Development**: We develop a symbolic model of the latest specification of TLS 1.3 (draft 21) that considers all possible interactions of the available handshake modes, including PSK-based resumption and 0-RTT. Its fine-grained, modular structure greatly extends and refines the coverage of previous symbolic models. Our model captures the new TLS 1.3 protocol, incorporating the many changes made since the development of these previous models. It is also highly flexible and can easily accommodate the removal of the 0-RTT mechanism if needed.

2. **Security Proofs**: We prove the majority of the specified security requirements of TLS 1.3, including the secrecy of session keys, perfect forward secrecy (PFS) of session keys (where applicable), peer authentication, and key compromise impersonation resistance. We also show that after a successful handshake, the client and server agree on session keys, and that session keys are unique across handshakes.

3. **Uncovered Behavior**: We uncover a behavior that may lead to security problems in applications that assume TLS 1.3 provides strong authentication guarantees.

4. **Model Transparency**: We provide a novel way of exhibiting the relationship between the specification and our model: we offer an annotated version of the TLS 1.3 specification that clarifies which parts are modeled and how, and which parts were abstracted. This provides an unprecedented level of modeling transparency and enables a straightforward assessment of the faithfulness and coverage of our model. We anticipate that this output will be of great benefit to the academic community analyzing TLS 1.3, as well as the TLS Working Group.

All our Tamarin input files, proofs, and the annotated TLS 1.3 specification that shows the relationship between the RFC and the model can be downloaded from [21].

### 1.2 Related Work
There has been extensive work conducted in the complementary analysis spheres pertinent to TLS 1.3. Of particular interest to this work are the symbolic analyses presented in [22], [4], and [10].

- **Cremers et al. [22]**: Offered a symbolic model and accompanying analysis of draft 10 of the TLS 1.3 specification using the Tamarin prover. Since then, there have been multiple changes to the specification, including major revisions of the 0-RTT mechanism and the key derivation schedule. The PSK mechanism has been significantly enhanced, and post-handshake authentication was officially incorporated from draft 11 onwards.

- **CELLOS Consortium [4]**: Analyzed TLS 1.3 using the ProVerif tool, showing the initial (EC)DHE handshake of draft 11 to be secure in the symbolic setting. This analysis, however, only covers one handshake mode of a now somewhat outdated draft.

- **Bhargavan et al. [10]**: Presented ProVerif models of draft 18, covering most TLS 1.3 modes and rich threat models, including downgrade attacks. However, their analysis did not consider the post-handshake client authentication mode and did not uncover the potential mismatch between client and server views that we describe in Section 5.2.

### 1.3 Paper Organization
The paper is organized as follows:

- **Section 2**: Describes the TLS 1.3 protocol and the security properties claimed in the specification.
- **Section 3**: Details our Tamarin model and provides a few Tamarin prover fundamentals.
- **Section 4**: Describes our encoding of the security guarantees.
- **Section 5**: Presents our results.
- **Section 6**: Discusses the relationship between our model and the specification document, highlighting the unprecedented modeling transparency provided by our annotated specification.
- **Section 7**: Concludes the paper.

## 2. TLS 1.3
In this section, we provide a brief description of the TLS 1.3 protocol, focusing on the aspects necessary for understanding our symbolic model. We also outline the claimed security properties and guarantees of the protocol.

### 2.1 New Mechanisms
The three years of effort that have gone into crafting and fine-tuning both the security and efficiency mechanisms of TLS 1.3 are evident in the significant structural departures from TLS 1.2. While the two protocols share broadly similar goals, they exhibit many differences. For example, a full TLS 1.3 handshake requires one fewer round trip before a client can transmit protected application data, and the new zero round trip time (0-RTT) mechanism allows less sensitive application data to be sent by the client as part of its first flight of messages.

#### 2.1.1 Diffie–Hellman Exchange (DHE)
The default mode of TLS 1.3 allows for ephemeral Diffie–Hellman (DH) keys to be established either over a finite field or using elliptic curves.

**Initial (EC)DHE Handshake**:
- **ClientHello**: The client sends a ClientHello message containing a random nonce, a list of symmetric algorithms, a set of DH key shares, and associated groups (KeyShare).
- **ServerHello**: Upon receipt of the ClientHello, the server selects appropriate cryptographic parameters and responds with a ServerHello message, containing a server-generated random nonce, an indication of the selected parameters, and potentially other extensions. The server also sends a KeyShare message, an EncryptedExtensions message, and optionally a CertificateRequest message.
- **KeyShare**: Contains the server’s choice of group and its ephemeral DH key share. The client and server key shares are used to compute handshake and application traffic keys.
- **EncryptedExtensions**: Contains material not necessary for determining cryptographic parameters, such as the server name and the maximum TLS fragment length.
- **Certificate and CertificateVerify**: The server sends a Certificate message containing its certificate and a CertificateVerify message, which is a digital signature over the current transcript. These messages allow the client to authenticate the server.
- **Finished**: The server sends a Finished message, which is a Message Authentication Code (MAC) over the entire handshake, providing key confirmation and binding the server’s identity to the computed traffic keys.
- **Client Response**: The client responds with Certificate and CertificateVerify messages, if requested, and then sends its own Finished message.

This message flow is depicted in Figure 1.

```plaintext
Client
Server
ClientHello
KeyShare
ServerHello
KeyShare
EncryptedExtensions
CertificateRequest*
Certificate
CertificateVerify
Finished
Certificate*
CertificateVerify*
Finished
[ApplicationData]
Figure 1: A full TLS 1.3 handshake (Section 2.1.1)
```

The CertificateRequest message indicates that the server requests client authentication in the mutual authentication case. The client responds with Certificate and CertificateVerify messages, if requested, and then sends its own Finished message.