### 4.3 SELinux’s Mandatory Access Control (MAC) Policy

Even with the author's permissions, certain actions were blocked by SELinux’s Mandatory Access Control (MAC) policy. In this scenario, SELinux effectively prevented the leakage of sensitive information. However, without a comprehensive audit of the policy, potential bypasses could still exist.

### 6. Related Work

Previous studies have identified inconsistent security configurations in Android images. For instance, Aafer et al. [15] discovered such inconsistencies in 591 custom images. Unlike earlier work that focused on static analysis, our study incorporates both static and dynamic analysis.

#### Communication with Modems Using AT Commands

The use of AT commands to communicate with the modem in a Samsung S2 was detailed on the XDA forums [58]. Pereira et al. demonstrated how two AT commands could be used to flash a malicious image onto Samsung phones [46, 20]. Roberto and Aristide found additional commands that worked on specific Samsung Galaxy models [47]. Bluebug [38] showed how to exploit a Bluetooth security loophole to issue AT commands via a covert channel. Hay discovered around 10 AT commands with security implications on the Nexus 6P due to the exposure of the AT interface from the Android bootloader (ABOOT) [31]. Mickey et al. also demonstrated how to exploit modems in cars using AT commands via USB connections [41].

Unlike previous research, which often focused on a single brand or model and covered a limited number of AT commands, our study provides a systematic analysis of both traditional and Android-specific AT commands across different major vendors and phone models.

#### USB Security in Mobile Environments

While USB security has been extensively evaluated in traditional computing environments [44, 52, 53, 32], it has received less attention in mobile computing. Stavrou et al. demonstrated how a malicious host machine can unlock the bootloader and flash a compromised system image onto an Android device using fastboot and adb via USB [55, 50]. MACTANS [37] augmented USB chargers with host functionalities to inject malware into iOS devices during charging. Vidas et al. summarized Android attacks via USB, although their focus was mainly on adb [54]. Due to OEM vulnerabilities in fastboot implementations, Hay also showed that hidden USB functionalities, including modem diagnostics and AT interfaces, could be enabled, allowing data exfiltration and system downgrading [31].

#### Impact of Vendor Customizations

The Android community is aware of the impact of vendor customizations on Android images. Felt et al. [28, 29] investigated over 900 Android applications and found instances of over-privilege and permission re-delegation. Wu et al. [56] reported that 85.78% of pre-loaded apps in 10 stock Android images are over-privileged due to vendor customizations. Aafer et al. [14] analyzed the threat of hanging attribute references within pre-installed apps across 97 factory images. Previous research primarily focused on apps inside the Android image, limiting the number of images covered. Zhou et al. [59] studied the vulnerabilities of Linux device drivers in Android customizations and found common issues shared among them.

### 7. Conclusion

AT commands have become an integral part of the Android ecosystem, yet their full functionality remains unclear and poorly documented. In this paper, we systematically retrieved and extracted AT commands from over 2,000 Android smartphone firmware images across 11 vendors, building a database of 3,500 commands. We tested this AT command corpus against 8 Android devices from 4 vendors via USB connections. Our findings include various attacks using AT commands, such as firmware flashing, bypassing Android security mechanisms, unlocking screens, injecting touch events, and exfiltrating sensitive data. We demonstrate that the AT command interface contains a significant amount of unconstrained functionality, representing a broad attack surface on Android devices.

### Disclosure

We have notified each vendor of the relevant findings and have worked with their security teams to address the issues.

### Acknowledgments

This work was supported by the National Science Foundation under grants CNS-1540217, CNS-1526718, CNS-1564140, and CNS-1617474.

### References

[1] baksmali. https://bitbucket.org/JesusFreke/smali. Last Accessed: Feb. 2018.
[2] dex2jar. https://github.com/pxb1988/dex2jar. Last Accessed: Feb. 2018.
[3] FlashTool. http://www.flashtool.net. Last Accessed: Feb. 2018.
[4] jadx. https://github.com/skylot/jadx. Last Accessed: Feb. 2018.
[5] jd-cmd - Command line Java Decompiler. https://github.com/kwart/jd-cmd. Last Accessed: Feb. 2018.
[6] Lenovo QSB File splitter. https://forum.xda-developers.com/showthread.php?t=2595269. Last Accessed: Feb. 2018.
[7] LGE KDZ Utilities. https://github.com/ehem/kdztools. Last Accessed: Feb. 2018.
[8] sdat2img. https://github.com/xpirt/sdat2img. Last Accessed: Feb. 2018.
[9] simg2img. https://github.com/anestisb/android-simg2img. Last Accessed: Feb. 2018.
[10] splitupdate. https://github.com/jenkins-84/splitupdata.pl. Last Accessed: Feb. 2018.
[11] szbtool. https://github.com/yuanguo8/szbtool. Last Accessed: Feb. 2018.
[12] Universal HTC RUU/ROM Decryption Tool 3.6.8. https://forum.xda-developers.com/chef-central/android/tool-universal-htc-ruu-rom-decryption-t3382928. Last Accessed: Feb. 2018.
[13] unyaffs. https://github.com/ehlers/unyaffs. Last Accessed: Feb. 2018.
[14] Y. Aafer, N. Zhang, Z. Zhang, X. Zhang, K. Chen, X. Wang, X. Zhou, W. Du, and M. Grace. Hare Hunting in the Wild Android: A Study on the Threat of Hanging Attribute References. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, pages 1248–1259. ACM, 2015.
[15] Y. Aafer, X. Zhang, and W. Du. Harvesting Inconsistent Security Configurations in Custom Android ROMs via Differential Analysis. In USENIX Security Symposium, pages 1153–1168, 2016.
[16] ActiveXperts Software. Basic Hayes AT Command Set. https://www.activexperts.com/sms-component/at/basic/, 2018.
[17] ActiveXperts Software. Extended AT Command Set. https://www.activexperts.com/sms-component/at/extended/, 2018.
[18] ActiveXperts Software. Proprietary Sony Ericsson AT Command Set. https://www.activexperts.com/sms-component/at/sonyericsson/, 2018.
[19] M. Anderson and K. Olmstead. Many smartphone owners don’t take steps to secure their devices, Mar. 2017. Pew Research Center.
[20] P. André, C. Manuel Eduardo, and B. Pedro. Charge your device with the latest malware. BlackHat Europe, 2014.
[21] Burak Alakus. TO CONTROL YOUR MOBILE PHONE BY AT COMMANDS VIA BLUETOOTH (C#.NET). https://burakalakusen.wordpress.com/2011/07/27/to-control-your-mobile-phone-by-at-commands-via-bluetooth/, 2011.
[22] CVE. CVE-2013-3666. https://www.cvedetails.com/cve/CVE-2013-3666/, 2013.
[23] O. Davydov. Unlocking The Screen of an LG Android Smartphone with AT Modem Commands, Feb. 2017. Forensic Focus Blog.
[24] F. Durda IV. The AT Command Set Reference - History. https://nemesis.lonestar.org, 2004.
[25] ETSI. Digital cellular telecommunications system (Phase 2+); Use of Data Terminal Equipment - Data Circuit terminating; Equipment (DTE - DCE) interface for Short Message Service (SMS) and Cell Broadcast Service (CBS) (GSM 07.05 version 5.5.0). http://www.etsi.org/deliver/etsi_gts/07/0705/05.03.00_60/gsmts_0705v050300p.pdf, 1997.
[26] ETSI. Digital cellular telecommunications system (Phase 2+); AT Command set for GSM Mobile Equipment (ME) (3GPP TS 07.07 version 7.8.0 Release 1998). http://www.etsi.org/deliver/etsi_ts/100900_100999/100916/07.08.00_60/ts_100916v070800p.pdf, 2003.
[27] ETSI. Digital cellular telecommunications system (Phase 2+); (GSM); Universal Mobile Telecommunications System (UMTS); LTE; AT command set for User Equipment (UE) (3GPP TS 27.007 version 13.6.0 Release 13). http://www.etsi.org/deliver/etsi_ts/127000_127099/127007/13.06.00_60/ts_127007v130600p.pdf, 2017.
[28] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android Permissions Demystified. In Proceedings of the 18th ACM conference on Computer and communications security, pages 627–638. ACM, 2011.
[29] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission re-delegation: Attacks and defenses. In USENIX Security Symposium, volume 30, 2011.
[30] A. Ganti. Latest Samsung Galaxy Note 8 Bootloader Prevents Flashing Unsigned Firmware on Device. https://wccftech.com/latest-samsung-galaxy-s8-s8-note8-bootloader-prevents-flashing-new-firmware/, 2018.
[31] R. Hay. fastboot OEM vuln: Android Bootloader Vulnerabilities in Vendor Customizations. In 11th USENIX Workshop on Offensive Technologies (WOOT 17). USENIX Association, 2017.
[32] G. Hernandez, F. Fowze, D. J. Tian, T. Yavuz, and K. Butler. FirmUSB: Vetting USB Device Firmware using Domain Informed Symbolic Execution. In 24th ACM Conference on Computer and Communications Security (CCS’17), Dallas, USA, 2017.
[33] Intel. Installation instructions for the intel® usb driver for android* devices. https://software.intel.com/en-us/android/articles/installation-instructions-for-intel-android-usb-driver, 2015.
[34] IPFS. Motorola phone AT commands. https://ipfs.io/ipfs/QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco/wiki/Motorola_phone_AT_commands.html, 2014.
[35] ITU-T. Serial asynchronous automatic dialling and control. https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-V.250-200307-I!!PDF-E&type=items, 2003.
[36] J. Jelinek, A. Van de Ven, U. Drepper, and D. Novillo. Object size checking to prevent (some) buffer overflows, Sept. 2004. GCC Patches List.
[37] B. Lau, Y. Jang, C. Song, T. Wang, P. Chung, and P. Royal. Mactans: Injecting Malware into iOS Devices via Malicious Chargers. Proceedings of the Black Hat USA Briefings, Las Vegas, NV, August 2013, 2013.
[38] A. Laurie, M. Holtmann, and M. Herfurt. The bluebug. AL Digital Ltd. http://trifinite.org/trifinite_stuff_bluebug.html.
[39] LG. LGUP. https://www.mylgphones.com/download-lg-up-software, 2017.
[40] Messagestick. TECHNICAL REFERENCE FOR HAYES MODEMS. http://www.messagestick.net/modem/hayes_modem.html, 1992.
[41] S. Mickey, M. Jesse, and B. Oleksandr. Driving down the rabbit hole. In DEF CON 25, 2017.
[42] MultiTech Systems. AT Commands For CDMA Wireless Modems. http://www.canarysystems.com/nsupport/CDMA_AT_Commands.pdf, 2004.
[43] MultiTech Systems. EV-DO and CDMA AT Commands Reference Guide. https://www.multitech.com/documents/publications/manuals/s000546.pdf, 2015.
[44] K. Nohl and J. Lell. BadUSB-On accessories that turn evil. Black Hat USA, 2014.
[45] Openmoko. Neo 1973 and Neo FreeRunner GSM modem, 2012. http://wiki.openmoko.org/wiki/Neo_1973_and_Neo_FreeRunner_gsm_modem.
[46] A. Pereira, M. Correia, and P. Brandão. USB Connection Vulnerabilities on Android Smartphones: Default and Vendors’ Customizations. In IFIP International Conference on Communications and Multimedia Security, pages 19–32. Springer, 2014.
[47] P. Roberto and F. Aristide. Modem interface exposed via USB. https://github.com/ud2/advisories/tree/master/android/samsung/nocve-2016-0004, 2016.
[48] Samsung. Samsung Odin. https://samsungodin.com/, 2017.
[49] Y. Shao, J. Ott, Y. J. Jia, Z. Qian, and Z. M. Mao. The misuse of android unix domain sockets and security implications. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pages 80–91. ACM, 2016.
[50] A. Stavrou and Z. Wang. Exploiting Smart-Phone USB Connectivity For Fun And Profit. BlackHat DC, 2011.
[51] Telit wireless solutions. Telit xN930 AT Commands Reference Guide r1.pdf, 2013. http://www.iot.com.tr/uploads/pdf/Telit_xN930_AT_Commands_Reference_Guide_r1.pdf.
[52] D. J. Tian, A. Bates, and K. Butler. Defending Against Malicious USB Firmware with GoodUSB. In Proceedings of the 31st Annual Computer Security Applications Conference, pages 261–270. ACM, 2015.
[53] D. J. Tian, N. Scaife, A. Bates, K. Butler, and P. Traynor. Making USB Great Again with USBFILTER. In USENIX Security Symposium, 2016.
[54] T. Vidas, D. Votipka, and N. Christin. All Your Droid Are Belong to Us: A Survey of Current Android Attacks. In WOOT, pages 81–90, 2011.
[55] Z. Wang and A. Stavrou. Exploiting Smart-Phone USB Connectivity For Fun And Profit. In Proceedings of the 26th Annual Computer Security Applications Conference, pages 357–366. ACM, 2010.
[56] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The Impact of Vendor Customizations on Android Security. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, pages 623–634. ACM, 2013.
[57] XDA Developers. New Samsung Galaxy S8, S8+, and Note8 Bootloader Prevents Flashing Out of Region Firmware. https://www.xda-developers.com/samsung-galaxy-s8-note8-bootloader-odin/, 2018.
[58] XDA Forums. How to talk to the Modem with AT commands. https://forum.xda-developers.com/galaxy-s2/help/how-to-talk-to-modem-commands-t1471241, 2012.
[59] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang. The Peril of Fragmentation: Security Hazards in Android Device Driver Customizations. In Security and Privacy (SP), 2014 IEEE Symposium on, pages 409–423. IEEE, 2014.

### A. Additional Implementation Details

#### A.1 AT Extraction Details

Our extraction process has some limitations, including potentially missing AT commands, images that fail to extract, and missing build.prop files. Given our AT command regular expression and the symbol set we use, we may miss commands using non-standard symbols following the AT. In practice, we observe from AT command standards, existing online AT databases, manual analysis in IDA Pro, Google searches, and more permissive regular expressions that the vast majority of extended AT commands found in the wild are uppercase and use one of the symbols [+*!@#$%^&] matched by our expression. If new valid patterns are found in the future, they can be easily added to our regular expression.

Images that fail to extract completely are still analyzed for strings, but if they are compressed, detecting any matches will be impossible. If an image is missing a build.prop file, we do not include it in our dataset, as this may indicate an invalid Android image, since all AOSP images are mandated to contain this file.

#### A.2 AT Database Filtering

**Filtering Heuristic**

\[
\text{cmd} := \text{String}
\]
\[
\text{file} := \text{AtFile}
\]
\[
\text{charclass} = 
\begin{cases} 
e^{-0.4 \times (\text{cmd::len} - 3)}, & \text{if } \text{cmd::class} \text{ is alphanumeric} \\
0, & \text{otherwise}
\end{cases}
\]
\[
\text{file::score} = \frac{\text{file::badlines}}{\text{file::lines}}
\]
\[
\text{at score} = 10 \times \left( \text{map}_{[0,1]} \left( e^{0.05 \times \text{file::lines} - 1} \right) \times \text{map}_{[0,1]} (\text{charclass}) + \text{file::score} \right)
\]

We define `String` and `AtFile` as types, `var::attr` as accessing the attribute `attr` of `var`, and the `map_{[x,y]}` function to clamp `n` to the range `x ≤ n ≤ y`.

In practice, we observe that it is less common for an AT command to have digits ([0-9]) and lowercase letters ([a-z]) in the same command. We punish commands matching this with an exponential decay term in terms of a constant and the command length with the `charclass` metric. The minimum command that would be scored is three (3) characters, hence the subtraction of three. The larger the candidate AT command, the less it is punished, as the likelihood that the command is not random noise increases with each character.

For the `file::score` metric, we record every line found that fails the initial regular expression test and increase the `file::badlines` variable. For each line, regardless of it failing or passing, we increase the `file::lines` variable. This creates a false positive percentage for the file. We increase the confidence of this FP score exponentially based on the number of lines seen in the file and a constant of our choosing.

Finally, we sum and weight the `charclass` and `file::score` metrics to create a final `at score` (a lower score means that it is less likely to be spurious). For future processing, we set the spurious command threshold to be `at score ≥ 5.0`. Through manual inspection, we found this balances the number of false negatives (actual commands discarded) and false positives (bad commands accepted).

**Filtering Results**

During the initial extraction of firmware images, we used `strings` to match on lines matching the regular expression `AT[!@#$%^&*+]`. To narrow down on actual AT commands, we applied a more stringent regular expression, which eliminated 33.2% of all processed lines, as shown in Table 15. To further refine the results, we applied the filtering heuristic described above.