### Section 5: Empirical Results and Scalability Analysis

#### Empirical Results
From the empirical results discussed in the previous section, the most efficient instantiation of Oblivious Pseudorandom Function (OPRF) is the TABLE-based hint. Therefore, the OPRF was instantiated using the TABLE-based protocol in this section.

#### Performance Evaluation
To understand the scalability of our protocol, we evaluated it for a range of the number of parties \( n \in \{3, 4, 5, 10, 15\} \) and set sizes \( m \in \{2^{12}, 2^{16}, 2^{20}, 2^{24}\} \). We also examined the performance impact of the generalization discussed in Section 5.3, which allows the protocol to tolerate an arbitrary number \( t \) of corrupted parties. In our experiments, we used \( t \in \{1, \lfloor n/2 \rfloor, n - 1\} \).

Our protocol scales well using multi-threading between \( n \) parties. In our implementation, the leader \( P_1 \) uses \( n-1 \) threads, and other parties use \( \min\{t+1, n-1\} \) threads, allowing each party to operate the OPRF protocol with other parties simultaneously. However, we use a single thread to perform the OPRF subprotocol between two parties.

We proposed a more efficient "hashing to bin" scheme (Appendix B) compared to the state-of-the-art two-party PSI [KKRT16]. Specifically, our hashing scheme eliminates the stash bins, which incur non-trivial costs for small sets. For example, with a set size of \( 2^{12} \), our protocol requires 168 milliseconds, compared to 211 milliseconds by [KKRT16], resulting in a 1.2× improvement.

#### Experimental Results
**Table 4** presents the running time of our PSI protocol in both LAN and WAN settings. We report the total time and online phase. The offline phase includes all operations that do not depend on the input sets. In the three-party case, our protocol supports a fully corrupted majority. For \( m = 2^{20} \), our general 3-PSI protocol (Section 5) in a LAN setting takes 42 seconds, while the optimized protocol (Section 6.3) takes 26 seconds, which is 1.6× faster. In a WAN setting, the optimized variant is 1.2× faster, primarily due to the need to wait for previous OPRF completions.

To address the possibility of at most \( t \) parties colluding, each party performs OPRF with \( \min\{t+1, n-1\} \) other parties. Therefore, the cost of the protocol is the same for \( t = n-1 \) and \( t = n-2 \). Hence, we report the protocol performance for \( n = 4 \) and \( t \in \{2, 3\} \) in the same row of Table 4.

As shown in Table 4, our protocol requires only 72 seconds to compute a PSI of \( n = 5 \) parties for \( m = 2^{20} \) elements. For the same set size, increasing the number of parties to \( n = 10 \) results in a total running time of 3 minutes, and for \( n = 15 \), the protocol takes around 5 minutes. **Figure 11** shows that the protocol's cost is linear in the number of parties. Assuming only one corrupt party, our protocol takes only 64 seconds to compute PSI for 15 parties with \( m = 2^{20} \) elements. For a small set size of \( m = 2^{12} \), the PSI protocol for \( n = 15 \) parties takes a total time of 1.85 seconds, with the online phase taking 1.32 seconds. Our protocol also scales to large input sets (\( m = 2^{24} \)) with \( n \in \{3, 4, 5\} \) participants.

**Table 5** reports the numerical communication costs of our implementation. The protocol is asymmetric with respect to the leader \( P_1 \) and other parties. Since the leader plays the role of receiver in most OPRFs, the majority of his communication costs can be done in the offline phase. Thus, we report the communication costs of the clients, which reflect the online cost of the protocol. For a small set size of \( m = 2^{12} \), only 3.28 MB of communication was required in the 3-PSI protocol on the client’s side. The communication complexity of our protocols is \( O(mt\lambda) \) bits. Therefore, our protocol requires gigabytes of communication for large set sizes (\( m \in \{2^{20}, 2^{24}\} \)). Specifically, for a large input set \( m = 2^{24} \), our 3-PSI protocol uses 14.8 GB of communication, roughly 0.88 KB per item.

### References
[AMPR14] Arash Afshar, Payman Mohassel, Benny Pinkas, and Ben Riva. Non-interactive secure computation based on cut-and-choose. In Phong Q. Nguyen and Elisabeth Oswald, editors, EUROCRYPT 2014, volume 8441 of LNCS, pages 387–404, Copenhagen, Denmark, May 11–15, 2014. Springer, Heidelberg, Germany.

[ATD15] Aydin Abadi, Sotirios Terzis, and Changyu Dong. O-PSI: delegated private set intersection on outsourced datasets. In ICT Systems Security and Privacy Protection, pages 3–17. Springer, 2015.

[BA12] Marina Blanton and Everaldo Aguiar. Private and oblivious set and multiset operations. In 7th ACM Symposium on Information, Computer and Communications Security, ASIACCS ’12, pages 40–41, New York, NY, USA, 2012. ACM.

[CG13] Ran Canetti and Juan A. Garay, editors. CRYPTO 2013, Part II, volume 8043 of LNCS, Santa Barbara, CA, USA, August 18–22, 2013. Springer, Heidelberg, Germany.

[CJS12] Jung Hee Cheon, Stanislaw Jarecki, and Jae Hong Seo. Multi-party privacy-preserving set intersection with quasi-linear complexity. IEICE Transactions, 95-A(8):1366–1378, 2012.

[CLR17] Hao Chen, Kim Laine, and Peter Rindal. Fast private set intersection from homomorphic encryption. Cryptology ePrint Archive, Report 2017/299, 2017. http://eprint.iacr.org/2017/299.

[DCKT10] Emiliano De Cristofaro, Jihye Kim, and Gene Tsudik. Linear-Complexity Private Set Intersection Protocols Secure in Malicious Model, pages 213–231. Springer Berlin Heidelberg, Berlin, Heidelberg, 2010.

[DCW13] Changyu Dong, Liqun Chen, and Zikai Wen. When private set intersection meets big data: An efficient and scalable protocol. In ACM Conference on Computer & Communications Security, CCS ’13, pages 789–800. ACM, 2013.

[DSMRY12] Dana Dachman-Soled, Tal Malkin, Mariana Raykova, and Moti Yung. Efficient robust private set intersection. Int. J. Appl. Cryptol., 2(4):289–303, July 2012.

[FHNP16] Michael J. Freedman, Carmit Hazay, Kobbi Nissim, and Benny Pinkas. Efficient set intersection with simulation-based security. J. Cryptology, 29(1):115–155, 2016.

[FIPR05] Michael J. Freedman, Yuval Ishai, Benny Pinkas, and Omer Reingold. Keyword search and oblivious pseudorandom functions. In Joe Kilian, editor, TCC 2005, volume 3378 of LNCS, pages 303–324, Cambridge, MA, USA, February 10–12, 2005. Springer, Heidelberg, Germany.

[FNP04] Michael J. Freedman, Kobbi Nissim, and Benny Pinkas. Efficient private matching and set intersection. In Advances in Cryptology - EUROCRYPT 2004, volume 3027 of Lecture Notes in Computer Science, pages 1–19. Springer, 2004.

[Gol09] Oded Goldreich. Foundations of cryptography: volume 2, basic applications. Cambridge university press, 2009.

[GOW12] Ran Gelles, Rafail Ostrovsky, and Kina Winoto. Multiparty proximity testing with dishonest majority from equality testing. In Automata, Languages, and Programming, pages 537–548. Springer, 2012.

[HEK12] Y. Huang, D. Evans, and J. Katz. Private set intersection: Are garbled circuits better than custom protocols? In Network and Distributed System Security (NDSS’12). The Internet Society, 2012.

[HFH99] Bernardo A. Huberman, Matt Franklin, and Tad Hogg. Enhancing privacy and trust in electronic communities. In Proceedings of the 1st ACM Conference on Electronic Commerce, EC ’99, pages 78–86. ACM, 1999.

[HL10] Carmit Hazay and Yehuda Lindell. Efficient secure two-party protocols: Techniques and constructions. Springer Science & Business Media, 2010.

[HLP11] Shai Halevi, Yehuda Lindell, and Benny Pinkas. Secure computation on the web: Computing without simultaneous interaction. In Phillip Rogaway, editor, Advances in Cryptology - CRYPTO 2011, volume 6841 of Lecture Notes in Computer Science, pages 132–150. Springer, 2011.

[HV17] Carmit Hazay and Muthuramakrishnan Venkitasubramaniam. Scalable multi-party private set-intersection. Cryptology ePrint Archive, Report 2017/027, 2017. http://eprint.iacr.org/2017/027.

[JL09] Stanislaw Jarecki and Xiaomin Liu. Efficient oblivious pseudorandom function with applications to adaptive OT and secure computation of set intersection. In Theory of Cryptography, volume 5444 of Lecture Notes in Computer Science, pages 577–594. Springer, 2009.

[KKRT16] Vladimir Kolesnikov, Ranjit Kumaresan, Mike Rosulek, and Ni Trieu. Efficient batched oblivious PRF with applications to private set intersection. 2016. http://eprint.iacr.org/2016/799.

[KLS+17] Ágnes Kiss, Jian Liu, Thomas Schneider, N. Asokan, and Benny Pinkas. Private set intersection for unequal set sizes with mobile applications. Cryptology ePrint Archive, Report 2017/670, 2017. http://eprint.iacr.org/2017/670.

[KM08] Adam Kirsch and Michael Mitzenmacher. Less hashing, same performance: Building a better bloom filter. Random Struct. Algorithms, 33(2):187–218, September 2008.

[KMW08] Adam Kirsch, Michael Mitzenmacher, and Udi Wieder. More robust hashing: Cuckoo hashing with a stash. In Dan Halperin and Kurt Mehlhorn, editors, ESA 2008, volume 5193 of Lecture Notes in Computer Science, pages 611–622. Springer, 2008.

[KNR+17] Vladimir Kolesnikov, Jesper Buus Nielsen, Mike Rosulek, Ni Trieu, and Roberto Trifiletti. Duplo: Unifying cut-and-choose for garbled circuits. Cryptology ePrint Archive, Report 2017/344, 2017. http://eprint.iacr.org/2017/344.

[Kol05] Vladimir Kolesnikov. Gate evaluation secret sharing and secure one-round two-party computation. In Bimal K. Roy, editor, ASIACRYPT 2005, volume 3788 of LNCS, pages 136–155, Chennai, India, December 4–8, 2005. Springer, Heidelberg, Germany.

[KS05] Lea Kissner and Dawn Song. Privacy-preserving set operations. In Proceedings of the 25th Annual International Conference on Advances in Cryptology, CRYPTO’05, pages 241–257, Berlin, Heidelberg, 2005. Springer-Verlag.