### Figure 4: Error Injection Results at the Unit-Level

Figure 4 presents the results of error injection during RTL simulations at the unit-level. Similar to module-level simulations, the EXSC (Execution and Scheduler) and ID (Instruction Decode) units are the most sensitive, while the FP (Floating Point) and CU (Control Unit) units are less sensitive. The LDM (Logical Derating Margin) factors derived for the LS (Load-Store) unit at the unit level are lower compared to those obtained at the module level. It is important to note that the workloads used in these simulations are unit-specific. For example, the EXSC workload A has a different opcode mix compared to FP workload A. Therefore, we do not compare the effectiveness of workloads executed by different units.

### Simulation Durations

As previously mentioned, module-level simulations take significantly longer than unit-level simulations. Table I provides the duration of the simulations for each Bulldozer unit. The duration of module-level error injection simulations ranges from 33 minutes and 49 seconds, when running the Livermore benchmark and injecting an error into the LS unit, to 59 minutes and 49 seconds for injecting an error into the CU unit while executing the Galgel benchmark. In the case of unit-level simulations, the shortest execution time for one error injection is 1 minute and 11 seconds for LS workload C, while the longest duration is 13 minutes and 45 seconds for LS workload B.

### Comparison of LDM Factors and Simulation Times

Table II shows both the average LDM factors and the duration of the error injection simulations executed at the module and unit levels for each Bulldozer unit. Unit-level simulations provide good approximations of the LDM factors for all units except the LS unit. The LS unit simulations also have the longest average execution time compared to the other units. Overall, unit-level simulations are faster than module-level simulations.

### LDM Confidence Intervals

Table III provides LDM confidence intervals for 90% and 99% confidence levels. The large number of injected errors allows the use of the normal approximation to the Binomial distribution [26]. As expected, the 99% confidence intervals are wider. Unit-level simulations provide a good approximation of LDM for the ID, EXSC, FP, and CU units. The 99% confidence intervals for the CU unit overlap between module and unit simulations. The most significant difference occurs in the case of the LS unit.

### Future Work

Future error injection research will focus on two main topics:
1. **Workload Optimization for Unit-Level Simulations**: We aim to find better workloads for unit-level simulations, particularly faster workloads that lead to more accurate LDM estimates for the LS unit.
2. **Lower-Granularity Simulations**: We intend to perform error injection experiments at a lower granularity, such as at the block level, to target more accurately the most sensitive logic for better protection against soft errors.

### Conclusions

This paper presents the architecture of the latest AMD microprocessor building block, the Bulldozer module, and the error injection methodology used to derive SER (Soft Error Rate) derating factors. Errors were injected into the sequential logic of all five Bulldozer units (ID, EXSC, FP, LS, and CU). The experiments showed that the integer execution and scheduler (EXSC) and the instruction fetch and decode (ID) are the most sensitive units. The nearly half-million latches and flip-flops in the Bulldozer module and the complexity of the design led to very long simulation times for the entire module. We performed error injection at both the module and unit levels using different workloads and compared the results. Unit-level simulations provided good approximations of the derating factors for ID, EXSC, FP, and CU. Consequently, we consider unit-level simulations, which are much faster, to have the potential to substitute for time-consuming module-level experiments. More work is needed to narrow the gap between module and unit-level results for the LS unit.

### Acknowledgment

The authors thank Rui Zhao, Chris Warling, Rob Weidner, Mike Sedmak, Zak Smith, Paul Moyer, Paul Keltcher, Mark Anderson, Sriram Srinivasan, Subramoni Parameswaran, Rajat Bahl, and Adithya Yalavarti for their contributions to the software development and support of the Bulldozer error injection project.

### References

[1] H. Ando et al., “Validation of Hardware Error Recovery Mechanisms for the SPARC64 V Microprocessor”, International Conference on Dependable Systems and Networks, 2008, pp. 62-69.

[2] C. Constantinescu, “Neutron Characterization of Microprocessors”, International Conference on Dependable Systems and Networks, 2005, pp. 754-759.

[3] H. Nguyen, Y. Yagil, “A Systematic Approach to SER Estimation and Solutions”, International Reliability Physics Symposium, 2003, pp. 60-70.

[4] H. Nguyen, Y. Yagil, N. Seifert, M. Reitsma, “Chip-Level Soft Error Estimation Model,” IEEE Transactions on Device and Materials Reliability, Vol. 5, No. 3, 2005, pp. 365-381.

[5] S. Mukherjee, C. Weaver, J. Emer, S. Reinhardt, T. Austin, “A Systematic Methodology to Compute the Architectural Vulnerability Factors for a High-Performance Microprocessor,” International Symposium on Microarchitecture, 2003, pp. 29-40.

[6] A. Biswas, R. Cheveresan, J. Emer, S. Mukherjee, R. Rangan, “Computing Architectural Vulnerability Factors for Address-Based Structures,” International Symposium on Computer Architecture, 2005, pp. 532-543.

[7] P. Ramachandrant, P. Kudvatt, J. Kellingtont, J. Schumannt, P. Sanda, “Statistical Fault Injection,” International Conference on Dependable Systems and Networks, 2008, pp. 122-127.

[8] P. Kudva, J. Kellington, P. Sanda, R. McBeth, J. Schumann, R. Kalla, “Fault Injection Verification of IBM POWER6 Soft Error Resilience,” Workshop on Architectural Support for Gigascale Integration (ASGI), 2007.

[9] N. George, C. Elks, B. Johnson, J. Lach, “Transient Fault Models and AVF Estimation Revisited,” International Conference on Dependable Systems and Networks, 2010, pp. 477-486.

[10] X. Li, S. Adve, P. Bose, J. Rivers, “Online Estimation of Architectural Vulnerability Factors for Soft Errors,” International Symposium on Computer Architecture, 2008, pp. 341-352.

[11] C. Constantinescu, J. Maiz, N. Seifert, S. Stadler, “Logic Soft Errors in Servers,” SELSE Workshop, 2005, http://softerrors.info/selse/

[12] L. Spainhower, J. Isenberg, R. Chillarege, J. Berding, “Design for Fault-Tolerance in System ES/9000 Model 900,” International Conference on Dependable Systems and Networks, 1992, pp. 38-47.

[13] P. Meaney, S. Swaney, P. Sanda, L. Spainhower, “IBM z990 Soft Error Detection and Recovery,” IEEE Transactions on Device and Materials Reliability, Vol. 5, No. 3, 2005, pp. 419-427.

[14] P. Sanda et al., “IBM POWER6 Processor Soft Error Resilience,” IBM Journal of Research and Development, Vol. 52, No. 3, 2008, pp. 275-284.

[15] M. Butler, L. Barnes, D. Sarma, B. Gelinas, “Bulldozer: An Approach to Multithreaded Compute Performance,” IEEE Micro, Vol. 31, No. 2, 2011, pp. 6-15.

[16] T. Fischer et al., “Design Solutions for the Bulldozer 32nm SOI 2-Core Processor Module in an 8-Core CPU,” International Solid-State Circuits Conference, 2011, pp. 78-80.

[17] J. Arlat, M. Aguera, L. Amat, Y. Crouzet, J. Fabre, J. Laprie, E. Martins, D. Powell, “Fault Injection for Dependability Validation: A Methodology and Some Applications,” IEEE Transactions on Software Engineering, Vol. 16, No. 2, 1990, pp. 166-182.

[18] G. Choi, R. Iyer, V. Carreno, “Simulated Fault Injection: A Methodology to Evaluate Fault Tolerant Microprocessor Architectures,” IEEE Transactions on Reliability, Vol. 39, No. 4, 1990, pp. 486-491.

[19] M. Hsueh, T. Tsai, R. Iyer, “Fault Injection Techniques and Tools,” IEEE Computer, Vol. 30, No. 4, 1997, pp. 75-82.

[20] D. Skarin, R. Barbosa, J. Karlsson, “GOOFI-2: A Tool for Experimental Dependability Assessment,” International Conference on Dependable Systems and Networks, 2010, pp. 557-562.

[21] K. Goswami, R. Iyer, L. Young, “DEPEND: A Simulation-Based Environment for System Level Dependability Analysis,” IEEE Transactions on Computers, Vol. 46, No. 1, 1997, pp. 60-74.

[22] E. Jenn, J. Arlat, M. Rimen, J. Ohlsson, J. Karlsson, “Fault Injection into VHDL Models: The MEFISTO Tool,” International Symposium on Fault-Tolerant Computing, 1994, pp. 356-363.

[23] V. Sieh, O. Tschäche, F. Balbach, “VERIFY: Evaluation of Reliability Using VHDL-Models with Embedded Fault Descriptions,” International Symposium on Fault Tolerant Computing, 1997, pp. 32-36.

[24] J. C. Baraza, J. Gracia, D. Gil, P. J. Gil, “Improvement of Fault Injection Techniques Based on VHDL Code Modification,” High-Level Design Validation and Test Workshop, 2005, pp. 19-26.

[25] J. C. Baraza, J. Gracia, S. Blanc, D. Gil, P. J. Gil, “Enhancement of Fault Injection Techniques Based on the Modification of VHDL Code,” IEEE Transactions on Very Large Scale Integration (VLSI) Systems, Vol. 16, No. 6, 2008, pp. 693-706.

[26] K. S. Trivedi, “Probability & Statistics with Reliability, Queuing, and Computer Science Applications,” Prentice-Hall, 1982, pp. 471-507.