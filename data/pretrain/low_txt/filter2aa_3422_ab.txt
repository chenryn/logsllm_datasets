### Memory Mappings
- **eceae000-eceb0000** `rw-p 000fd000` `/system/lib/libc.so`
- **ee0da000-ee0dc000** `rwxp 00000000` `[anon:Mem_0x10000000]`
- **ee1b5000-ee303000** `r-xp 00000000` `/system/bin/linker`
- **ee303000-ee309000** `r--p 0014d000` `/system/bin/linker`
- **ee309000-ee30a000** `rw-p 00153000` `/system/bin/linker`
- **ff26d000-ffa6c000** `rw-p 00000000` `[stack]`

### Houdini Emulator — Execution
- **State Machine (Switch Inside While Loop)**
  - Fetch/Decode/Dispatch Mechanism:
    ```c
    uint32_t instruction = memory[state.pc];
    uint8_t condition_code = instruction >> 24;
    if (condition_code != 0x0E) goto 0x3100AD;

    uint32_t offset = ((instruction >> 16) & 0xFF0) + ((instruction >> 4) & 0x00F);
    void **instruction_table = 0x4BB9C0;
    int (*instruction_handler)(uint32_t, struct proc_state*);
    instruction_handler = instruction_table[offset];
    instruction_handler(instruction, state);
    ```

### Houdini Emulator — Processor State
- **Processor State Structure**
  - Stores ARM registers and other processor states.
  ```c
  struct proc_state {
      unsigned int reg[16]; /* Register values for r0, r1, r2... */
      unsigned char unk[300]; /* Unknown fields */
      unsigned int isThumb; /* Whether in thumb mode or not */
      unsigned int svcNumber; /* Pending SVC call number */
      unsigned char unk2[40]; /* Unknown fields */
      unsigned int pc8; /* PC + 8 */
      unsigned int ldrstr; /* ?? (used for ldr/str instructions) */
      unsigned char unk3[84]; /* Unknown fields */
  };
  ```
  - ARM registers can be read/written from both ARM and x86.

### Houdini Emulator — Syscall
- **ARM Syscalls Handling**
  - Handled by userland x86 code that issues x86 syscalls.

### Houdini Emulator — fork(2)/clone(2)
- **Process Cloning**
  - Intercepted and reimplemented by Houdini.
  - The child process handles the child fork/clone logic.
  - The parent process handles the fork/clone logic.
  - `clone(2)` does not pass `child_stack` to the kernel; instead, an empty RWX page is passed as `child_stack`.

### Houdini Emulator — Detection
- **Java Architecture Checking**
  - `System.getProperty("os.arch")`
  - `/proc/cpuinfo`
- **Memory Mapping Checking**
  - `/proc/self/maps`
  - Dual x86/ARM shared libraries
- **Detection from Noisy to Quiet**
  - Best implementation issues no otherwise discernable syscalls.
  - `JNIEnv` magic pointer detection.

### Houdini Emulator — Escape to x86
- **mprotect(2) + Overwrite Code**
  - Not subtle.
  - x86 stack manipulation.
  - Find and clobber x86 stack with ROP payloads.

### Security Concerns — RWX + Other Interesting Pages
- **Multiple RWX Pages**
  - Can write x86 code to these pages and jump to it.
  - Shared memory, allowing code writing from either x86/ARM.
  - Example mappings:
    - `00008000-0000a000 rw-p [anon:Mem_0x10000002]`
    - `0e094000-10000000 rwxp [anon:Mem_0x20000000]`
    - `10000000-10003000 rw-p [anon:Mem_0x10002002]`
    - `10003000-10004000 ---p [anon:Mem_0x10002002]`
    - `10004000-10015000 rw-p [anon:Mem_0x10002002]`
    - `10015000-10016000 ---p [anon:Mem_0x10002002]`
    - `10128000-12000000 rw-p [anon:Mem_0x10002000]`
    - `12000000-12100000 rwxp [anon:Mem_0x10001000]`
    - `12100000-12122000 rw-p [anon:Mem_0x10001000]`
    - `1215a000-12193000 rw-p [anon:Mem_0x10001000]`
    - `ca6e8000-ca6e9000 ---p [anon:Mem_0x10000004]`
    - `ca6e9000-caae8000 rw-p [anon:Mem_0x10000004]`
    - `caae8000-caae9000 ---p [anon:Mem_0x10000004]`
    - `caae9000-cabe8000 rw-p [anon:Mem_0x10000004]`
    - `e4f99000-e4f9a000 ---p [anon:Mem_0x10000004]`
    - `e4f9a000-e4f9f000 rw-p [anon:Mem_0x10000004]`
    - `e8cb4000-e8cb6000 rwxp [anon:Mem_0x10000000]`

### Security Concerns — NX Ignored
- **Houdini Ignores the Execute Bit**
  - ARM libraries are loaded without the execute bit on their pages.
  - No DEP/NX for ARM.
  - Trivial to abuse (write to anywhere writable, and jump/return to it).

### Page Permissions — A Matter of Interpretation
- **Example Code**
  ```c
  #include <stdio.h>

  int main() {
      unsigned int code[512] = {0};
      code[0] = 0xE2800001; // add r0, r0, #1
      code[1] = 0xE12FFF1E; // bx lr
      printf("code(1) returned: %d\n", ((int (*)(int))code)(1)); // Normally, this causes a segfault
      printf("code(5) returned: %d\n", ((int (*)(int))code)(5));
  }
  ```
  - Compilation and Execution:
    ```sh
    $ arm-linux-gnueabi-gcc nx-stack.c -static -Wl,-z,noexecstack -o nx-stack-static
    $ file nx-stack-static
    nx-stack-static: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), statically linked, for GNU/Linux 3.2.0, not stripped
    $ ./nx-stack-static
    code(1) returned: 2
    code(5) returned: 6
    ```

### Libhoudini-aware Malware
- **App Store and Security Research Environments**
  - Real ARM devices.
  - Fully virtualized ARM environment (like QEMU).
  - x86 Android emulators (VMs).
  - Apps may express different behaviors based on the environment, making detection harder.
- **JNI-loaded Native Android Code**
  - Different behaviors based on whether running through libhoudini.
  - x86 Android emulator VMs may use libhoudini for ARM compatibility.
  - Malicious apps can do bad things only when detecting the presence of libhoudini.

### Recommendations to Vendors and Platforms
- **Drop RWX Pages**
  - Perform fine-grained page permission control where necessary.
- **Implement Efficient NX/Userland Page Table Implementation**
  - Keep track of mappings and permissions in-process.
  - Perform checks if the instruction is from a different page than the previous instruction.
- **Use Virtualization**
  - Ensure ASLR is implemented/used to protect sensitive structures.
- **Custom NX Validation**
  - Trust only ARM `.so .text` sections on load.
  - Check `/proc/self/maps` on each new page.
  - Instrument memory mapping-related syscalls (e.g., `mmap`, `mprotect`) to track page permissions.
  - Combine checks for dynamic `.so` loading and legitimate JITing.

### Conclusion
- **Security Weaknesses Introduced by Houdini**
  - Impact the security of both emulated ARM code and host x86 code.
  - Undermine core native code hardening.
  - Lack of public documentation and accessibility may have prevented wider security analysis and research.

### Disclosure — Timeline
- **April 24, 2021**: Findings sent to Intel PSIRT via PI:EMAIL.
- **May 5, 2021**: Intel PSIRT confirms receipt and sends questions.
- **May 7, 2021**: NCC Group responds to Intel's questions.
- **May 7, 2021**: Intel PSIRT confirms receipt of additional information.
- **May 17, 2021**: Intel PSIRT updates that the product team is looking into the findings.
- **June 25, 2021**: Intel PSIRT plans a fix release for the end of July.
- **July 16, 2021**: Additional findings sent to Intel PSIRT.
- **July 19, 2021**: Intel PSIRT confirms receipt and will send findings to the Houdini team.
- **July 21, 2021**: NCC Group previews the talk for Intel PSIRT.

### Acknowledgments
- **Jeff Dileo**
- **Jennifer Fernick**
- **Effi Kishko**

© NCC Group 2021. All rights reserved.

### Questions?
- **Contact**: PI:EMAIL
- **Twitter**: @im_eningeer