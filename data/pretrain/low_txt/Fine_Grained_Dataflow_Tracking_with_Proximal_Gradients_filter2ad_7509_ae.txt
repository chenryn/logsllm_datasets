### Techniques for Computing Gradients Over Programs

Program Gradient Analysis (PGA) is a novel approach that computes gradients over programs, providing more precise and fine-grained information about program behavior compared to dynamic taint tracking. We have implemented a prototype of PGA based on the LLVM framework. Our evaluation shows that PGA outperforms three state-of-the-art Dynamic Taint Analysis (DTA) systems in terms of accuracy while adding less than 5% overhead on average. Additionally, we demonstrate that PGA is an effective tool for security analysis, identifying relevant data flows for 19 different Common Vulnerabilities and Exposures (CVEs), discovering 22 bugs, and detecting 2 side-channel leaks in 7 real-world programs. We hope that our approach will inspire other researchers to explore new techniques by leveraging the rich literature on non-smooth analysis.

### Acknowledgements

We are grateful to our shepherd, Lujo Bauer, and the anonymous reviewers for their constructive and valuable feedback. The first author is supported by an NDSEG Fellowship, and the second author is supported by an NSF Graduate Fellowship. This work is partially funded by the following grants: NSF grants CNS-18-42456, CNS-18-01426, CNS-16-17670; ONR grant N00014-17-1-2010; an ARL Young Investigator (YIP) award; a NSF CAREER award; a Google Faculty Fellowship; and a Capital One Research Grant. Additional support was provided by the European Union's Marie Sklodowska-Curie grant agreement No. 690972 (PROTASIS) and the innovation programme under grant agreement No. 786669 (ReAct). Any opinions, findings, conclusions, or recommendations expressed herein are those of the authors and do not necessarily reflect the views of the US Government, European Union, ONR, ARL, NSF, Google, or Capital One.

### References

[1] Pin - A Dynamic Binary Instrumentation Tool. https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool, 2019.

[2] Martín Abadi, Ashish Agarwal, Paul Barham, Eugene Brevdo, and Zhifeng Chen. TensorFlow: Large-scale machine learning on heterogeneous systems, 2015. Software available from tensorﬂow.org.

[3] Mário S Alvim, Konstantinos Chatzikokolakis, Annabelle McIver, Carroll Morgan, Catuscia Palamidessi, and Geoffrey Smith. Additive and multiplicative notions of leakage, and their capacities. In 2014 IEEE 27th Computer Security Foundations Symposium, pages 308–322. IEEE, 2014.

[4] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps. ACM Sigplan Notices, 49(6):259–269, 2014.

[5] David Baehrens, Timon Schroeter, Stefan Harmeling, Motoaki Kawanabe, Katja Hansen, and Klaus-Robert Müller. How to explain individual classification decisions. Journal of Machine Learning Research, 11:1803–1831, 2010.

[6] Davide Balzarotti, Marco Cova, Vika Felmetsger, Nenad Jovanovic, Engin Kirda, Christopher Kruegel, and Giovanni Vigna. Saner: Composing static and dynamic analysis to validate sanitization in web applications. In IEEE Symposium on Security and Privacy (S&P), pages 387–401. IEEE, 2008.

[7] Erik Bosman, Asia Slowinska, and Herbert Bos. Minemu: The world’s fastest taint tracker. In RAID, 2011.

[8] Swarat Chaudhuri and Armando Solar-Lezama. Smooth interpretation. ACM Sigplan Notices, 45(6):279–291, 2010.

[9] Swarat Chaudhuri and Armando Solar-Lezama. Smoothing a program soundly and robustly. In Computer Aided Verification, pages 277–292, Berlin, Heidelberg, 2011. Springer Berlin Heidelberg.

[10] Peng Chen and Hao Chen. Angora: Efficient fuzzing by principled search. In 2018 IEEE Symposium on Security and Privacy (SP), pages 711–725. IEEE, 2018.

[11] Shuo Chen, Rui Wang, XiaoFeng Wang, and Kehuan Zhang. Side-channel leaks in web applications: A reality today, a challenge tomorrow. In IEEE Symposium on Security and Privacy, pages 191–206. IEEE, 2010.

[12] Zheng Leong Chua, Yanhao Wang, Teodora Baluta, Prateek Saxena, Zhenkai Liang, and Purui Su. One engine to serve’em all: Inferring taint rules without architectural semantics. 2019.

[13] Frank H Clarke. Optimization and nonsmooth analysis, volume 5. SIAM, 1990.

[14] James Clause, Wanchun Li, and Alessandro Orso. Dytan: A generic dynamic taint analysis framework. In International Symposium on Software Testing and Analysis, pages 196–206. ACM, 2007.

[15] R Dennis Cook. Assessment of local influence. Journal of the Royal Statistical Society. Series B (Methodological), pages 133–169, 1986.

[16] Goran Doychev, Boris Köpf, Laurent Mauborgne, and Jan Reineke. Cacheaudit: A tool for the static analysis of cache side channels. ACM Transactions on Information and System Security (TISSEC), 18(1):4, 2015.

[17] William Enck, Peter Gilbert, Byung-Gon Chun, Landon P. Cox, Jaeyeon Jung, Patrick McDaniel, and Anmol N. Sheth. Taintdroid: An information-flow tracking system for real-time privacy monitoring on smartphones. In Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation, OSDI’10, 2010.

[18] Barbara Espinoza and Geoffrey Smith. Min-entropy as a resource. Information and Computation, 226:57–75, 2013.

[19] Vijay Ganesh, Tim Leek, and Martin Rinard. Taint-based directed whitebox fuzzing. In Proceedings of the 31st International Conference on Software Engineering, pages 474–484. IEEE Computer Society, 2009.

[20] Ian J Goodfellow, Jonathon Shlens, and Christian Szegedy. Explaining and harnessing adversarial examples. arXiv preprint arXiv:1412.6572, 2014.

[21] Andreas Griewank. Automatic directional differentiation of nonsmooth composite functions. In Recent Developments in Optimization, pages 155–169. Springer, 1995.

[22] Jonathan Heusser and Pasquale Malacaria. Quantifying information leaks in software. In Proceedings of the 26th Annual Computer Security Applications Conference, pages 261–269. ACM, 2010.

[23] Suman Jana and Vitaly Shmatikov. Memento: Learning secrets from process footprints. In IEEE Symposium on Security and Privacy, pages 143–157. IEEE, 2012.

[24] Vasileios P. Kemerlis, Georgios Portokalidis, Kangkook Jee, and Angelos D. Keromytis. Libdft: Practical dynamic data flow tracking for commodity systems. In Proceedings of the 8th ACM SIGPLAN/SIGOPS Conference on Virtual Execution Environments, VEE ’12, 2012.

[25] Boris Köpf and Andrey Rybalchenko. Approximation and randomization for quantitative information-flow analysis. In 2010 23rd IEEE Computer Security Foundations Symposium, pages 3–14. IEEE, 2010.

[26] Chris Lattner and Vikram Adve. LLVM: A compilation framework for lifelong program analysis & transformation. In Proceedings of the International Symposium on Code Generation and Optimization: Feedback-directed and Runtime Optimization, CGO ’04, pages 75–, Washington, DC, USA, 2004. IEEE Computer Society.

[27] Stephen McCamant and Michael D Ernst. Quantitative information flow as network flow capacity. In ACM SIGPLAN Notices, volume 43, pages 193–205. ACM, 2008.

[28] Jiang Ming, Dinghao Wu, Jun Wang, Gaoyao Xiao, and Peng Liu. Straighttaint: Decoupled offline symbolic taint analysis. In Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering, ASE, New York, NY, USA, 2016. ACM.

[29] Andrew C. Myers and Andrew C. Myers. Jflow: Practical mostly-static information flow control. In Proceedings of the 26th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL ’99, 1999.

[30] Yu Nesterov. Lexicographic differentiation of nonsmooth functions. Mathematical programming, 104(2-3):669–700, 2005.

[31] Nicholas Nethercote and Julian Seward. Valgrind: A framework for heavyweight dynamic binary instrumentation. ACM Sigplan notices, 42(6):89–100, 2007.

[32] James Newsome, Stephen McCamant, and Dawn Song. Measuring channel capacity to distinguish undue influence. In Proceedings of the ACM SIGPLAN Fourth Workshop on Programming Languages and Analysis for Security, pages 73–85. ACM, 2009.

[33] James Newsome and Dawn Xiaodong Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In NDSS, volume 5, pages 3–4. Citeseer, 2005.

[34] Ryan O’Donnell. Analysis of Boolean functions. Cambridge University Press, 2014.

[35] Neal Parikh, Stephen Boyd, et al. Proximal algorithms. Foundations and Trends in Optimization, 1(3):127–239, 2014.

[36] Kexin Pei, Yinzhi Cao, Junfeng Yang, and Suman Jana. Deepxplore: Automated whitebox testing of deep learning systems. In proceedings of the 26th Symposium on Operating Systems Principles, pages 1–18. ACM, 2017.

[37] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida, and Herbert Bos. VUzzer: Application-Aware Evolutionary Fuzzing. In Proceedings of the 2008 Network and Distributed Systems Security Conference, 2017.

[38] D. Richtmeyer and K.W. Morton. Difference Methods for Initial Value Problems. Wiley, 2nd edition, 1967.

[39] R Tyrrell Rockafellar and Roger J-B Wets. Variational analysis, volume 317. Springer Science & Business Media, 2009.

[40] Gabriel Ryan, Justin Wong, Jianan Yao, Ronghui Gu, and Suman Jana. CLN2INV: Learning loop invariants with continuous logic networks. In International Conference on Learning Representations, 2019.

[41] Edward J Schwartz, Thanassis Avgerinos, and David Brumley. All you ever wanted to know about dynamic taint analysis and forward symbolic execution (but might have been afraid to ask). In IEEE Symposium on Security and Privacy (S&P), pages 317–331. IEEE, 2010.

[42] Dongdong She, Yizheng Chen, Baishakhi Ray, and Suman Jana. Neutaint: Efficient dynamic taint analysis with neural networks. arXiv preprint arXiv:1907.03756, 2019.

[43] Dongdong She, Rahul Krishna, Lu Yan, Suman Jana, and Baishakhi Ray. MTFuzz: Fuzzing with a multitask neural network. Foundations of Software Engineering, 2020.

[44] Dongdong She, Kexin Pei, Dave Epstein, Junfeng Yang, Baishakhi Ray, and Suman Jana. NEUZZ: Efficient Fuzzing with Neural Program Smoothing. In IEEE Symposium on Security and Privacy (S&P), 2019.

[45] Avanti Shrikumar, Peyton Greenside, and Anshul Kundaje. Learning important features through propagating activation differences. arXiv preprint arXiv:1704.02685, 2017.

[46] Karen Simonyan, Andrea Vedaldi, and Andrew Zisserman. Deep inside convolutional networks: Visualising image classification models and saliency maps. arXiv preprint arXiv:1312.6034, 2013.

[47] Asia Slowinska and Herbert Bos. Pointless tainting? Evaluating the practicality of pointer tainting. In Proceedings of the 4th ACM European conference on Computer systems, pages 61–74. ACM, 2009.

[48] Asia Slowinska and Herbert Bos. Pointer tainting still pointless: (but we all see the point of tainting). ACM SIGOPS Operating Systems Review, 44(3):88–92, 2010.

[49] Geoffrey Smith. Quantifying information flow using min-entropy. In 2011 Eighth International Conference on Quantitative Evaluation of SysTems, pages 159–167. IEEE, 2011.

[50] Yuchi Tian, Kexin Pei, Suman Jana, and Baishakhi Ray. DeepTest: Automated testing of deep-neural-network-driven autonomous cars. In Proceedings of the 40th international conference on software engineering, pages 303–314, 2018.

[51] Doug Ward. Chain rules for nonsmooth functions. Journal of Mathematical Analysis and Applications, 158(2):519–538, 1991.

[52] R. E. Wengert. A simple automatic derivative evaluation program. Commun. ACM, 7(8):463–464, August 1964.

[53] Babak Yadegari and Saumya Debray. Bit-level taint analysis. In 2014 IEEE 14th International Working Conference on Source Code Analysis and Manipulation, pages 255–264. IEEE, 2014.

[54] LK Yan, A Henderson, X Hu, H Yin, and S McCamant. On soundness and precision of dynamic taint analysis. Dep. Elect. Eng. Comput. Sci., Syracuse Univ., Tech. Rep. SYR-EECS-2014–04, 2014.

[55] Lok Kwong Yan and Heng Yin. Droidscope: Seamlessly reconstructing the OS and Dalvik semantic views for dynamic Android malware analysis. In USENIX Security, pages 569–584, 2012.

[56] Jianan Yao, Gabriel Ryan, Justin Wong, Suman Jana, and Ronghui Gu. Learning nonlinear loop invariants with gated continuous logic networks. In Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation, pages 106–120, 2020.

[57] Heng Yin, Dawn Song, Manuel Egele, Christopher Kruegel, and Engin Kirda. Panorama: Capturing system-wide information flow for malware detection and analysis. In Proceedings of the 14th ACM Conferences on Computer and Communication Security (CCS), 2007.

[58] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim. QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing. In Proceedings of the 27th USENIX Security Symposium (Security), Baltimore, MD, August 2018.

### Table 5: Effect of Compiler Optimization Levels on Dataflow F1 Accuracy

| Tool | dfsan | grsan | dfsan | grsan | dfsan | grsan |
|------|-------|-------|-------|-------|-------|-------|
| 0.39 | 0.36  | 0.62  | 0.76  | 0.52  | 0.33  | 0.53  |
| 0.51 | 0.65  | 0.66  | 0.88  | 0.67  | 0.60  | 0.68  |
| 0.39 | 0.31  | 0.52  | 0.74  | 0.47  | 0.31  | 0.51  |
| 0.45 | 0.63  | 0.62  | 0.81  | 0.68  | 0.61  | 0.69  |
| 0.57 | 0.69  | 0.64  | 0.92  | 0.71  | 0.63  | 0.74  |
| 0.42 | 0.29  | 0.56  | 0.73  | 0.48  | 0.31  | 0.52  |

The table shows that grsan has significantly higher F1 accuracy than dfsan for all three measured optimization levels, with an average improvement of over 18%.

### A. Additional Accuracy Experiments

We describe the additional accuracy evaluations summarized in Section 5.2.1 here. Specifically, the ablation of gradient information, the effects of compiler optimization, PGA vs. Neutaint in coarse-grained dataflow prediction, analysis of 0 gradients, and a comparison with QIF.

#### Gradient Ablation
We measure the effect of gradient information on determining accurate data flows by performing an ablation with binary-valued gradients. The ablation uses the same proximal gradient propagation rules but rounds all gradients to 0 or 1. In effect, this converts PGA into DTA with PGA propagation. Results of the comparison are shown in Table 2. PGA demonstrates superior performance even with binary gradients, indicating the robustness of the method.

### Conclusion
Our work on Program Gradient Analysis (PGA) provides a more precise and fine-grained approach to program analysis compared to traditional dynamic taint tracking. We hope that this work will motivate further research into the application of non-smooth analysis techniques in program analysis.