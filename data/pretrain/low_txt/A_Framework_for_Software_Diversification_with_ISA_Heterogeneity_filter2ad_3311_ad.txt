### Latency and Performance Analysis

We evaluated the system with latencies of 10 ms and 40 ms, respectively. The 10 ms latency is typical in Edge Computing scenarios [14], while the 40 ms latency represents the minimal network overhead between two availability zones within the same region in Amazon Web Services (AWS) [66]. We manually configured the probability of ISA switching at each point and ran each test case five times. The average values and standard deviations are reported in Figure 5.

In a local network connection, Nginx on HeterSec performs at approximately 11% of the baseline throughput. This performance drop is due to the additional costs associated with cross-machine communication during an ISA switch. Although we optimized inter-machine communication using a fast in-kernel message API, the time spent on this communication still dominates the total request handling time. However, in real-world network scenarios, such as edge or cloud environments, HeterSec incurs a more reasonable overhead. For example, under 10 ms network latency (edge computing scenario in Figure 5), we observed a 10%-20% performance overhead, depending on the frequency of ISA switches. At 100% ISA switch probability, this equates to 5 switches per request, or about 3800 ISA switches per second. In the cloud scenario (40 ms latency), the throughput of Nginx shows only a minor decrease even with a 100% ISA switch probability (as shown in Figure 5). It is worth noting that the HeterSec kernel introduces minimal performance overhead for non-HeterSec processes. For instance, vanilla Nginx achieves 22357.5 req/s on a vanilla Linux kernel, whereas it performs 22273.8 req/s on the HeterSec kernel, resulting in an overhead of approximately 0.37%.

Similar results were observed when running `redis-benchmark` to measure the throughput of Redis SET instructions. As shown in Figure 6, Redis on HeterSec achieves about 30% of the throughput compared to native execution. However, the overhead drops to 15% and 2% in edge and cloud computing scenarios, respectively. For the Redis evaluation, we set the ISA switch points in a periodic job, resulting in about 20 ISA switches per second, synchronized with the `server.hz` value. Interestingly, we noticed a slight improvement in throughput when increasing the ISA-switching probability from 80% to 100%. This improvement is likely due to the deterministic execution flow transfer, which avoids disrupting branch prediction. These results indicate that, although frequent ISA switching is costly, it is feasible for use in server applications in real-world scenarios.

### Multi-ISA MVX Prototypes

Next, we report the performance of two heterogeneous ISA multi-version execution (MVX) prototypes. As mentioned in Section 3.4.2, the `ptrace` version of the multi-ISA MVX prototype is used to identify all necessary system calls for simulation, as it is easier to debug with a userspace MVX engine. The MVX engine running in HeterSec kernels can achieve better performance. In our experiment, both MVX prototypes used the ARM64 node to launch the master variant and offloaded the follower variant to the x86_64 node. The primary cost of MVX comes from the program state synchronization between the two variants. For example, the master variant must wait for the system call simulation to complete on the follower side before continuing execution (a.k.a., lock-step check).

We evaluated the two MVX prototypes using nbench, gzip, and the Lighttpd web server. Gzip and Lighttpd are I/O-intensive applications. For the gzip test case, we randomly generated files of different sizes from `/dev/urandom`. We also used ApacheBench to generate workloads for the Lighttpd web server. All benchmarks were run with both kernel-based and `ptrace`-based MVX prototypes. Figure 7 shows the normalized performance evaluation results, using the vanilla application running on the ARM64 node as the baseline. For most CPU and memory-intensive workloads, both kernel-based and `ptrace`-based MVX have similar performance overheads. This is because most system calls in computation-intensive applications do not need to be simulated in the MVX engine. For I/O-intensive applications, both MVX engines process and check descriptor-related system calls such as `read/write(v)`. Overall, both multi-ISA MVX engines introduce about 10% overhead for the gzip benchmark. Since the files were duplicated on both nodes, there was no need to transfer data between them. For the web server application, the MVX engines had to simulate several network I/O-related system calls, including `accept4`, `socket`, `sendfile`, and `recvfrom`. Generally, the HeterSec kernel-based MVX engine reduces Lighttpd throughput to about 50% of its native performance. However, this performance is still better than the `ptrace`-based MVX engine (∼10x) and the MVX engine in DMON (∼5.43x) [73].

### Related Work

The first category of related work includes various techniques for software diversity [42]. An important assumption in software attacks is that the attacker may have information about the target system [16, 59, 60] or can obtain such information through methods like brute forcing [10, 59]. Static code and defense mechanisms make attacks easier. Software diversity provides uncertainty, breaking the static nature of the target and increasing the attack cost. One notable diversification technique is Address Space Layout Randomization (ASLR), often implemented as code randomization [3, 8, 13, 26, 36, 63, 78, 81]. Previous research has demonstrated the effectiveness of code randomization at different levels, such as program module [63], page [3], function [36], basic block [13, 78], and instruction [26]. Recent research has also shown the feasibility of ASLR at runtime, re-randomizing the code layout periodically [8, 13, 81]. HeterSec extends this research by exploring the use of heterogeneous instruction sets to diversify programs.

Multi-version execution (MVX) is another concrete technique for software diversity. Instead of randomizing a single code instance, MVX engines run multiple variants of a program simultaneously [15, 38, 51, 57, 58, 72, 73, 83]. These variants differ in memory layout, making it less likely for a malicious input to succeed across all variants. Memory layout differences can include non-overlapping memory maps [38, 57, 83], reverse stack growth [58], and others. Recently, researchers have proposed applying MVX inside the Linux kernel to detect kernel bug exploits [83]. DMON is a recent concurrent work that uses distributed heterogeneous-ISA machines for multi-version execution [73]. DMON demonstrates that MVX with heterogeneous ISAs can be more effective against advanced code reuse attacks, such as position-independent ROP [23, 73]. While DMON focuses on a specific MVX engine, HeterSec is a general framework, with the multi-ISA MVX engine being one of its application scenarios.

Another category of related work includes split-interface systems [18, 19, 62, 75] and multikernel operating systems [4, 6, 7, 79]. Split-interface systems typically use two compartments to separate and isolate program code execution or secret data access. For example, Proxos [62] splits application execution into trusted and untrusted parts, isolating the trusted part in a private VM. Nested kernel [18] and SecPod [75] split the OS kernel into isolated components for enhanced security. Isomeron [19] splits code execution between two diversified variants, randomizing the execution path to mitigate conventional code reuse attacks. HeterSec shares the idea of splitting interfaces but enhances execution security by running code on two ISA-diversified nodes.

Multikernel operating systems treat a multi-core machine as a distributed network of independent cores. Several systems leverage multiple OS kernels to manage heterogeneous and multi-core machines [4, 6, 7, 79]. For example, Barrelfish [7] runs multiple OS kernels on a multi-core machine to improve multi-threaded application performance. Similarly, FOS addresses scalability issues by factoring the OS into micro-kernel components [79]. Popcorn Linux is a similar work that runs multikernels on heterogeneous hardware [4, 6]. Popcorn Linux focuses on single-threaded high-performance computing (HPC) applications, while HeterSec targets a broader range of applications, including server and multi-threaded applications.

### Conclusion

In this paper, we explored the potential of securing application execution with ISA diversity. We described the design and implementation of HeterSec, a framework that improves application security using ISA heterogeneity. HeterSec enables processes to leverage diversified ISAs as an additional layer of dynamic defense. The framework was built with several compiler and kernel extensions to facilitate secure execution on heterogeneous hardware. The two security applications built on HeterSec demonstrate the feasibility of leveraging existing heterogeneous hardware to enhance application security.

The source code of HeterSec is publicly available as part of the Popcorn Linux project at http://popcornlinux.org.

### Acknowledgments

We would like to thank the anonymous reviewers for their insightful comments. This work is supported in part by grants received by Virginia Tech, including those from the US Office of Naval Research (ONR) under grants N00014-18-1-2022, N00014-16-1-2104, and N00014-16-1-2711, and from NAVSEA/NEEC under grant N00174-16-C-0018. Kim’s work at Virginia Tech (former affiliation) was supported by ONR under grants N00014-16-1-2711 and N00014-18-1-2022. Olivier’s work at Virginia Tech (former affiliation) was supported by ONR under grants N00014-16-1-2104 and N00014-18-1-2022. Lyerly’s work at Virginia Tech (former affiliation) was supported in part by NAVSEA/NEEC under grant N00174-16-C-0018. This work is also supported by the Electronics and Telecommunications Research Institute (ETRI) grant funded by the Korean government (20ZS1310).

### References

[1] ARM Limited (or its affiliates). ARM BIG.LITTLE. https://www.arm.com/why-arm/technologies/big-little, Accessed: 2020-07-08.
[2] Linux Kernel Address Space Layout Randomization. http://lwn.net/Articles/569635/.
[3] Michael Backes and Stefan Nürnberger. Oxymoron: Making Fine-grained Memory Randomization Practical by Allowing Code Sharing. Proc. 23rd Usenix Security Sym, pages 433–447, 2014.
[4] Antonio Barbalace, Robert Lyerly, Christopher Jelesnianski, Anthony Carno, Ho-Ren Chuang, Vincent Legout, and Binoy Ravindran. Breaking the boundaries in heterogeneous-ISA datacenters. In ACM SIGPLAN Notices, volume 52, pages 645–659. ACM, 2017.
[5] Antonio Barbalace, Binoy Ravindran, and David Katz. Popcorn: a replicated-kernel OS based on Linux. In Proceedings of the Linux Symposium, Ottawa, Canada, 2014.
[6] Antonio Barbalace, Marina Sadini, Saif Ansary, Christopher Jelesnianski, Akshay Ravichandran, Cagil Kendir, Alastair Murray, and Binoy Ravindran. Popcorn: Bridging the programmability gap in heterogeneous-ISA platforms. In Proceedings of the Tenth European Conference on Computer Systems, EuroSys ’15, New York, NY, USA, 2015. Association for Computing Machinery.
[7] Baumann, Andrew, Paul Barham, Pierre-Evariste Dagand, Tim Harris, Rebecca Isaacs, Simon Peter, Timothy Roscoe, Adrian Schüpbach, and Akhilesh Singhania. The multikernel: a new OS architecture for scalable multicore systems. In Proceedings of the ACM SIGOPS 22nd symposium on Operating systems principles, pages 29–44. ACM, 2009.
[8] David Bigelow, Thomas Hobson, Robert Rudd, William Streilein, and Hamed Okhravi. Timely rerandomization for mitigating memory disclosures. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, pages 268–279. ACM, 2015.
[9] Nathan Binkert, Bradford Beckmann, Gabriel Black, Steven K Reinhardt, Ali Saidi, Arkaprava Basu, Joel Hestness, Derek R Hower, Tushar Krishna, Somayeh Sardashti, et al. The gem5 simulator. ACM SIGARCH Computer Architecture News, 39(2):1–7, 2011.
[10] Andrea Bittau, Adam Belay, Ali Mashtizadeh, David Mazieres, and Dan Boneh. Hacking Blind. In Security and Privacy (SP), 2014 IEEE Symposium on, pages 227–242. IEEE, 2014.
[11] Shekhar Borkar. Thousand core chips: a technology perspective. In Proceedings of the 44th annual Design Automation Conference, pages 746–749. ACM, 2007.
[12] BYTEmark benchmark. Linux/Unix nbench. http://www.math.utah.edu/~mayer/linux/bmark.html, Accessed: 2020-07-08.
[13] Yue Chen, Zhi Wang, David Whalley, and Long Lu. Remix: On-demand live randomization. In Proceedings of the Sixth ACM Conference on Data and Application Security and Privacy, pages 50–61. ACM, 2016.
[14] Sharon Choy, Bernard Wong, Gwendal Simon, and Catherine Rosenberg. The brewing storm in cloud gaming: A measurement study on cloud to end-user latency. In Proceedings of the 11th annual workshop on network and systems support for games, page 2. IEEE Press, 2012.
[15] Benjamin Cox, David Evans, Adrian Filipi, Jonathan Rowanhill, Wei Hu, Jack Davidson, John Knight, Anh Nguyen-Tuong, and Jason Hiser. N-variant systems: A secretless framework for security through diversity. In USENIX Security Symposium, pages 105–120, 2006.
[16] Stephen Crane, Christopher Liebchen, Andrei Homescu, Lucas Davi, Per Larsen, Ahmad-Reza Sadeghi, Stefan Brunthaler, and Michael Franz. Readactor: Practical Code Randomization Resilient to Memory Disclosure. In 36th IEEE Symposium on Security and Privacy (Oakland), May 2015.
[17] Daniel, P, Marco Cesati, and others. Understanding the Linux kernel, 2007.
[18] Nathan Dautenhahn, Theodoros Kasampalis, Will Dietz, John Criswell, and Vikram Adve. Nested kernel: An operating system architecture for intra-kernel privilege separation. In Proceedings of the Twentieth International Conference on Architectural Support for Programming Languages and Operating Systems, pages 191–206. ACM, 2015.
[19] Lucas Davi, Christopher Liebchen, Ahmad-Reza Sadeghi, Kevin Z Snow, and Fabian Monrose. Isomeron: Code Randomization Resilient to (just-in-time) Return-oriented Programming. Proc. 22nd Network and Distributed Systems Security Sym.(NDSS), 2015.
[20] Matthew DeVuyst, Ashish Venkat, and Dean M Tullsen. Execution migration in a heterogeneous-ISA chip multiprocessor. In ACM SIGARCH Computer Architecture News, volume 40, pages 261–272. ACM, 2012.
[21] Hadi Esmaeilzadeh, Emily Blem, Renee St Amant, Karthikeyan Sankaralingam, and Doug Burger. Dark silicon and the end of multicore scaling. In Computer Architecture (ISCA), 2011 38th Annual International Symposium on, pages 365–376. IEEE, 2011.
[22] Peter N Glaskowsky. NVIDIA’s Fermi: the first complete GPU computing architecture. White paper, 18, 2009.
[23] Enes Göktas, Benjamin Kollenda, Philipp Koppe, Erik Bosman, Georgios Portokalidis, Thorsten Holz, Herbert