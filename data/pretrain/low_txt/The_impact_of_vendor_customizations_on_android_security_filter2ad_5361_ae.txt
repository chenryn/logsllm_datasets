### Observations on Correlations

Our analysis reveals that several superficial metrics do not exhibit strong correlations with the number of vulnerabilities present in stock firmware images. Specifically, code size does not strongly correlate: the Nexus 4, for instance, has the third-largest number of lines of code (LOC) but the lowest number of vulnerabilities in our study. The number of pre-installed applications also does not show a clear correlation. Both Sony devices, despite having a large number of apps, performed well in terms of security, whereas LG devices, which have the fewest apps among non-reference devices, fared poorly. Finally, even popularity does not appear to be a reliable indicator of security. The Samsung Galaxy S3, the most popular smartphone of 2012 with over 50 million units shipped by March 2013, had the highest number of vulnerabilities among the devices in its generation.

### Limitations of Our Work

We acknowledge several limitations in our current work. One significant limitation is the exclusion of the customization of system-level code, which could be an interesting area for future research. Additionally, our prototype faces several constraints. First, our static analysis generates a relatively high false positive rate, with an average of fewer than 300 paths per device. While manual verification of each path is not feasible, using a lightweight dynamic analyzer could help reduce the manual workload. Second, we generate call graphs recursively, and to avoid deep or potentially infinite recursion, we impose two constraints: only acyclic graphs are allowed, and the maximum path length or exploration time is set as an upper boundary. These constraints may prevent us from discovering certain vulnerabilities, especially if the code is heavily obfuscated, extending the length of vulnerable paths or modifying the sinks used to define such paths. However, our experience indicates that most pre-loaded applications, except for bundled third-party apps, are not extensively obfuscated. As a result, these constraints were primarily triggered by infinite recursion rather than overly long, yet valid, call chains.

### Related Work

#### Provenance Analysis

In our system, provenance provides important context for evaluating the results of other analyses. Determining the provenance of an app or piece of code is a challenging problem, and various approaches have been developed. For example, traditional similarity measurement techniques have been widely used in malware clustering and investigation. Kruegel et al. [32] proposed a method to detect polymorphic worms by identifying structural similarities between control flow graphs. SMIT [29], a malware database management system based on function-call graphs, can perform large-scale malware indexing and queries. These approaches, primarily developed for PC malware, are more sophisticated and complex than our own. In a similar vein, we use chains of method signatures to determine whether a pre-loaded app is an altered version of a core AOSP (Android Open Source Project) app. Previous insights can guide us in improving the accuracy and completeness of our approach.

#### Repackaged Apps Detection

In the Android platform, detecting repackaged apps—apps that have been altered and re-uploaded by parties other than the original author—is a significant concern. Systems like DroidMOSS [50], DNADroid [9], and PiggyApp [49] focus on detecting repackaged apps in Android app markets, while AppInk [46] uses watermarking techniques to deter repackaging. These efforts aim to establish the ancestry of any given app, which aligns with our goal of understanding the longitudinal evolution of firmware images using vertical differential analysis. However, our focus is less on the temporal aspect and more on the relationship between the original AOSP image and vendor customizations, driven by legal rather than technical reasons.

#### Mobile Advertisement Libraries

Mobile advertisement libraries, which live within other apps and share their permissions, have been shown to be a significant source of privacy leaks [23]. Book et al.'s longitudinal study [5] indicates that negative behaviors in such libraries may be increasing over time. Several mitigation measures have been proposed, including adding new APIs and permissions [36] to isolate such code, and AdSplit [41], which moves advertisement code into another process to enforce different permissions. Our work shares a common interest with these studies in examining poorly-tagged vendor customizations mixed with code from other sources. While we evaluate whole phone images rather than individual third-party apps, many of the same concepts apply. There is a similar disconnect between the trust users place in the open-source, heavily vetted AOSP and the vendor's customizations, making it an interesting topic for future work to mitigate the flaws introduced by vendors.

#### Permission Usage Analysis

Our permission usage analysis builds upon the accumulated insight from several works in this area. For example, Stowaway [17], Vidas et al. [44], and PScout [2] all study the problem of overprivileged third-party apps and provide permission mappings in different ways. Barrera et al. [3] study the permission usage patterns of third-party apps using self-organizing maps. None of these works, however, analyze the problem of permission overprivilege in pre-loaded firmware apps, which is a key focus of our work.

Other researchers have attempted to infer security-related properties about apps based solely on their requested permissions. Kirin [16], for example, looks for hard-coded dangerous combinations of permissions to warn users about potential malware. Sarma et al. [40], Peng et al. [37], and Chakradeo et al. [7] use machine learning techniques to classify apps as potentially malicious based on their permissions. In our initial study, we do not attempt to look for such emergent effects in the permissions requested by pre-loaded apps, as the examined stock images are released by reputable and trustworthy entities.

#### Vulnerability Analysis

Several works have surveyed the landscape of malware on Android, such as MalGenome [51], and general apps [15, 38]. Other systems, like DroidRanger [53], RiskRanker [25], Peng et al. [37], and MAST [7], focus on finding malicious apps in app markets that contain a large number of benign apps. DroidScope [48] uses virtualization to perform semantic view reconstruction, similar to desktop systems, to analyze Android malware. The insights from these works inform our own understanding of the potential dangers of third-party malicious apps.

Permission re-delegation vulnerabilities, a form of the classic confused-deputy attack [27], have been known to be a problem on the Android platform. ComDroid [8], Woodpecker [24], and CHEX [34] all apply static analysis techniques to find vulnerabilities in either third-party or pre-loaded apps. SEFA is most similar to the latter two systems but also performs provenance analysis to determine the impact of vendor customizations on security. While ComDroid and Woodpecker can only detect in-component vulnerabilities, CHEX can additionally detect cross-component ones. Our work is the most comprehensive, capable of finding in-component, cross-component, and cross-app vulnerabilities. Specifically, cross-app vulnerabilities account for 8.90% of the vulnerabilities we found, a significant proportion that leads to similar, if not greater, security risks.

Several systems [6, 12, 18] aim to mitigate the permission re-delegation problem by checking IPC call chains or monitoring run-time communication between apps. Other works, such as Cells [1] and L4Android [33], leverage virtualization techniques, while MoCFI [10] implements a control-flow integrity enforcement framework for iOS apps. These works are complementary to our own, as similar techniques could be applied to mitigate the impact of the flaws we have detected.

Several systems, including TaintDroid [14], PiOS [13], Apex [35], MockDroid [4], TISSA [54], AppFence [28], Aurasium [47], SORBET [19], and CleanOS [43], aim to study privacy leak issues. They try to protect or mitigate privacy leaks by modifying the underlying framework. There has been less work related to content leaks. ContentScope [52] tries to identify vulnerabilities related to third-party, unprotected content providers. Our work uses a similar concept but focuses on content providers in firmware, covering both protected and unprotected content providers.

### Conclusion

In this paper, we evaluate the security impact of vendor customizations on Android devices by designing and implementing the SEFA analysis framework. This tool performs several analyses to study the provenance, permission usage, and vulnerability distribution of pre-loaded apps in a device's firmware image. We evaluated ten devices from five different vendors, with two models from each vendor representing two different generations. We then compared the various vendors' offerings for a given generation and the evolution of any given vendor's security practices over time. Our results show that, due to heavy vendor customizations, on average, over half of the apps in each image are overprivileged vendor apps, and more than 60% of the identified vulnerabilities stem from the vendors' modifications to the firmware. Furthermore, for most manufacturers in our study, these patterns were stable over time, highlighting the need for heightened focus on security in the smartphone industry.

### Acknowledgements

We would like to thank the anonymous reviewers for their comments, which greatly helped improve the presentation of this paper. We also want to thank Kunal Patel, Wu Zhou, and Minh Q. Tran for the helpful discussions. This work was supported in part by the US National Science Foundation (NSF) under Grants 0855297, 0855036, 0910767, and 0952640. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the NSF.

### References

[1] J. Andrus, C. Dall, A. Van't Hof, O. Laadan, and J. Nieh. Cells: A Virtual Mobile Smartphone Architecture. In Proceedings of the 23rd ACM Symposium on Operating Systems Principles, SOSP '11, 2011.
[2] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie. PScout: Analyzing the Android Permission Specification. In Proceedings of the 19th ACM Conference on Computer and Communications Security, CCS '12, 2012.
[3] D. Barrera, H. G. Kayacik, P. C. van Oorschot, and A. Somayaji. A Methodology for Empirical Analysis of Permission-Based Security Models and its Application to Android. In Proceedings of the 17th ACM Conference on Computer and Communications Security, CCS '10, 2010.
[4] A. R. Beresford, A. Rice, N. Skehin, and R. Sohan. MockDroid: Trading Privacy for Application Functionality on Smartphones. In Proceedings of the 12th International Workshop on Mobile Computing Systems and Applications, HotMobile '11, 2011.
[5] T. Book, A. Pridgen, and D. S. Wallach. Longitudinal Analysis of Android Ad Library Permissions. In IEEE Mobile Security Technologies, MoST '13, 2013.
[6] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and B. Shastry. Towards Taming Privilege-Escalation Attacks on Android. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security, NDSS '12, 2012.
[7] S. Chakradeo, B. Reaves, P. Traynor, and W. Enck. MAST: Triage for Market-scale Mobile Malware Analysis. In Proceedings of the 6th ACM Conference on Security and Privacy in Wireless and Mobile Networks, WiSec '13, 2013.
[8] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing Inter-Application Communication in Android. In Proceedings of the 9th Annual International Conference on Mobile Systems, Applications, and Services, MobiSys '11, 2011.
[9] J. Crussell, C. Gibler, and H. Chen. Attack of the Clones: Detecting Cloned Applications on Android Markets. In Proceedings of 17th European Symposium on Research in Computer Security, ESORICS '12, 2012.
[10] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz, R. Hund, S. Nurnberger, and A.-R. Sadeghi. MoCFI: A Framework to Mitigate Control-Flow Attacks on Smartphones. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security, NDSS '12, 2012.
[11] Defuse. Use-define chain. http://en.wikipedia.org/wiki/Use-define_chain.
[12] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach. QUIRE: Lightweight Provenance for Smart Phone Operating Systems. In Proceedings of the 20th USENIX Security Symposium, USENIX Security '11, 2011.
[13] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS: Detecting Privacy Leaks in iOS Applications. In Proceedings of the 18th Annual Symposium on Network and Distributed System Security, NDSS '11, 2011.
[14] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. In Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation, USENIX OSDI '10, 2010.
[15] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A Study of Android Application Security. In Proceedings of the 20th USENIX Security Symposium, USENIX Security '11, 2011.
[16] W. Enck, M. Ongtang, and P. McDaniel. On lightweight mobile phone application certification. In Proceedings of the 16th ACM Conference on Computer and Communications Security, CCS '09, 2009.
[17] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android Permissions Demystified. In Proceedings of the 18th ACM Conference on Computer and Communications Security, CCS '11, 2011.
[18] A. P. Felt, H. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission Re-Delegation: Attacks and Defenses. In Proceedings of the 20th USENIX Security Symposium, USENIX Security '11, 2011.
[19] E. Fragkaki, L. Bauer, L. Jia, and D. Swasey. Modeling and Enhancing Android's Permission System. In Proceedings of 17th European Symposium on Research in Computer Security, ESORICS '12, 2012.
[20] Gartner. Gartner Says Worldwide Smartphone Sales Soared in Fourth Quarter of 2011 With 47 Percent Growth. http://www.gartner.com/it/page.jsp?id=1924314.
[21] Google. Intent. http://developer.android.com/reference/android/content/Intent.html.
[22] Google. Platform Versions. http://developer.android.com/about/dashboards/index.html.
[23] M. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi. Unsafe Exposure Analysis of Mobile In-App Advertisements. In Proceedings of the 5th ACM Conference on Security and Privacy in Wireless and Mobile Networks, WiSec '12, 2012.
[24] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic Detection of Capability Leaks in Stock Android Smartphones. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security, NDSS '12, 2012.
[25] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang. RiskRanker: Scalable and Accurate Zero-day Android Malware Detection. In Proceedings of the 10th International Conference on Mobile Systems, Applications and Services, MobiSys '12, 2012.
[26] Gsmarena. http://www.gsmarena.com/.
[27] N. Hardy. The Confused Deputy: (or why capabilities might have been invented). ACM SIGOPS Operating Systems Review, 22, October 1988.
[28] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. These Aren't the Droids You're Looking For: Retrofitting Android to Protect Data from Imperious Applications. In Proceedings of the 18th ACM Conference on Computer and Communications Security, CCS '11, 2011.
[29] X. Hu, T.-c. Chiueh, and K. G. Shin. Large-Scale Malware Indexing Using Function-Call Graphs. In Proceedings of the 16th ACM Conference on Computer and Communications Security, CCS '09, 2009.
[30] IDC. Strong Demand for Smartphones and Heated Vendor Competition Characterize the Worldwide Mobile Phone Market at the End of 2012, IDC Says. https://www.idc.com/getdoc.jsp?containerId=prUS23916413#.UQIPbh0qaSp.
[31] J. Koetsier. Android captured almost 70% global smartphone market share in 2012, Apple just under 20%. http://venturebeat.com/2013/01/28/android-captured-almost-70-global-smartphone-market-share-in-2012-apple-just-under-20/.
[32] C. Kruegel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna. Polymorphic worm detection using structural information of executables. In Proceedings of 8th International Symposium on Recent Advances in Intrusion Detection, RAID '05, 2005.
[33] M. Lange, S. Liebergeld, A. Lackorzynski, A. Warg, and M. Peter. L4Android: A Generic Operating System Framework for Secure Smartphones. In Proceedings of the 1st Workshop on Security and Privacy in Smartphones and Mobile Devices, CCS-SPSM '11, 2011.
[34] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: Statically vetting android apps for component hijacking vulnerabilities. In Proceedings of the 19th ACM Conference on Computer and Communications Security, CCS '12, 2012.
[35] M. Nauman, S. Khan, and X. Zhang. Apex: Extending Android Permission Model and Enforcement with User-Defined Runtime Constraints. In Proceedings of the 5th ACM Symposium on Information, Computer and Communications Security, ASIACCS '10, 2010.
[36] P. Pearce, A. P. Felt, G. Nunez, and D. Wagner. AdDroid: Privilege Separation for Applications and Advertisers in Android. In Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security, ASIACCS '12, 2012.
[37] H. Peng, C. Gates, B. Sarma, N. Li, Y. Qi, R. Potharaju, C. Nita-Rotaru, and I. Molloy. Using probabilistic generative models for ranking risks of android apps. In Proceedings of the 19th ACM Conference on Computer and Communications Security, CCS '12, 2012.
[38] S. Rosen, Z. Qian, and Z. M. Mao. AppProïˇn ˛Aler: A Flexible Method of Exposing Privacy-Related Behavior in Android Applications to End Users. In Proceedings of the 3nd ACM Conference on Data and Application Security and Privacy, CODASPY '13, 2013.
[39] A. Russakovskii. http://www.androidpolice.com/2011/10/01/massive-security-vulnerability-in-htc-android-devices-evo-3d-4g-thunderbolt-others-exposes-phone-numbers-gps-sms-emails-addresses-much-more/.
[40] B. Sarma, C. Gates, N. Li, R. Potharaju, C. Nita-Rotaru, and I. Molloy. Android Permissions: A Perspective Combining Risks and Benefits. In Proceedings of the 17th ACM Symposium on Access Control Models and Technologies, SACMAT '12, 2012.
[41] S. Shekhar, M. Dietz, and D. S. Wallach. AdSplit: Separating smartphone advertising from applications. In Proceedings of the 21th USENIX Security Symposium, USENIX Security '12, 2012.
[42] Smali. An assembler/disassembler for Android's dex format. http://code.google.com/p/smali/.
[43] Y. Tang, P. Ames, S. Bhamidipati, A. Bijlani, R. Geambasu, and N. Sarda. CleanOS: Limiting Mobile Data Exposure With Idle Eviction. In Proceedings of the 11th USENIX Symposium on Operating Systems Design and Implementation, USENIX OSDI '12, 2012.
[44] T. Vidas, N. Christin, and L. F. Cranor. Curbing Android permission creep. In Proceedings of the 2011 Web 2.0 Security and Privacy Workshop, W2SP '11, 2011.
[45] Wiki. Samsung Galaxy S3. http://en.wikipedia.org/wiki/Samsung_Galaxy_S_III.
[46] Z. Wu, X. Zhang, and X. Jiang. AppInk: Watermarking Android Apps for Repackaging Deterrence. In Proceedings of the 8th ACM Symposium on Information, Computer and Communications Security, ASIACCS '13, 2013.
[47] R. Xu, H. Saidi, and R. Anderson. Aurasium: Practical Policy Enforcement for Android Applications. In Proceedings of the 21th USENIX Security Symposium, USENIX Security '12, 2012.
[48] L. K. Yan and H. Yin. DroidScope: Seamlessly Reconstructing the OS and Dalvik Semantic Views for Dynamic Android Malware Analysis. In Proceedings of the 21th USENIX Security Symposium, USENIX Security '12, 2012.
[49] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou. Fast, Scalable Detection of 'Piggybacked' Mobile Applications. In Proceedings of the 3nd ACM Conference on Data and Application Security and Privacy, CODASPY '13, 2013.
[50] W. Zhou, Y. Zhou, X. Jiang, and P. Ning. DroidMOSS: Detecting Repackaged Smartphone Applications in Third-Party Android Marketplaces. In Proceedings of the 2nd ACM Conference on Data and Application Security and Privacy, CODASPY '12, 2012.
[51] Y. Zhou and X. Jiang. Dissecting Android Malware: Characterization and Evolution. In Proceedings of the 33rd IEEE Symposium on Security and Privacy, IEEE Oakland '12, 2012.
[52] Y. Zhou and X. Jiang. Detecting Passive Content Leaks and Pollution in Android Applications. In Proceedings of the 20th Annual Symposium on Network and Distributed System Security, NDSS '13, 2013.
[53] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, You, Get off of My Market: Detecting Malicious Apps in Official and Alternative Android Markets. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security, NDSS '12, 2012.
[54] Y. Zhou, X. Zhang, X. Jiang, and V. W. Freeh. Taming Information-Stealing Smartphone Applications (on Android). In Proceedings of the 4th International Conference on Trust and Trustworthy Computing, TRUST '11, 2011.

### Appendix

#### Reachability Analysis

**Algorithm 3: Reachability Analysis**

**Input:** Path from entry point to sink  
**Output:** Whether the path is reachable or not

```plaintext
ret = false;
intra_analysis(all nodes in path);
nodes = nodes in the path;
edges = edges in the path;

while constraint does not meet do
    flag = false;
    foreach n in nodes do
        callee = callee set of n;
        if callee is empty then
            break;
        foreach c in callee do
            if (n, c) in edges then
                flag = flag ∪ c.summarize(n);
        if flag then
            inter_analysis(c);
        if constraint meets then
            break;
        else
            break;
    ret = reachability_check(path with summary information);
return ret
```

This algorithm checks the reachability of a path from an entry point to a sink by analyzing the intra- and inter-component interactions and ensuring that the constraints are met.