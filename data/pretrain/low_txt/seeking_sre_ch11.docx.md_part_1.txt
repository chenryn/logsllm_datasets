# SRE 模式深受 DevOps 社区的青睐

本文摘自 Gene Kim、Jez Humble、John Willis 和 Patrick Debois 合著并由 O'Reilly 出版于 2016 年的《DevOps 手册》。Gene Kim 在被 David Blank-Edelman 邀请撰写有关 SRE 知识体系及其对 DevOps 社区影响的一章时，欣然接受了邀请。

尽管有人认为 SRE（站点可靠性工程）和 DevOps 是互斥的概念，但 Kim 却持有不同的看法。他认为，SRE 对于构建运维社区、促进组织目标及提高开发人员工作效率方面有着不可估量的价值。正如谷歌 SRE 副总裁 Ben Treynor Sloss 在 2014 年 SREcon 上所说：“SRE 是由软件工程师组成的运维团队。”

在那次著名的演讲中，Treynor Sloss 提出了“真正自平衡系统”的概念：首先确定可接受的错误预算，然后根据非功能性需求优先级来指导部署决策。在编写《DevOps 手册》的过程中，Kim 发现许多 DevOps 的最佳实践实际上起源于 SRE 的知识体系。以下是三个源自 SRE 的模式，几乎任何组织都可以将其融入日常工作中：

## 模式 1：源自谷歌的自动化测试

自动化测试解决了一个极其重要且棘手的问题。Gary Gruver 曾指出，“没有自动化测试，我们编写的代码越多，测试所需的时间和成本就越高，这对大多数技术组织来说是不可持续的发展模式。”虽然如今谷歌非常重视大规模自动化测试，但在早期并非如此。

2005 年，当 Mike Bland 加入 Google 时，向 *Google.com* 的部署经常出现问题，特别是对于 Google Web 服务器 (GWS) 团队而言。Bland 解释说：
> 在 2000 年代中期，GWS 团队面临着一个难题——难以对 C++ 应用程序进行修改，该应用程序处理了所有对谷歌主页及其他页面的请求。由于 *Google.com* 的重要性和知名度，加入 GWS 团队并不吸引人。此外，负责创建各种搜索功能的不同团队各自独立开发代码，导致生成和测试时间过长、未经充分测试的代码上线以及各团队间变更冲突等问题频发。

这些问题可能导致搜索结果出错或响应变慢，进而损害客户信任度。Bland 描述了开发者们如何因恐惧而不敢轻易做出改变：“恐惧成为了一种思维障碍。新成员害怕因为不了解系统而犯错；而有经验的人则担心自己的深刻理解反而限制了创新。”

为了解决这个问题，GWS 团队负责人 Bharat Mediratta 引入了自动测试机制。他们规定，除非附带自动测试，否则不会接受任何更改，并建立了持续集成流程。最终，GWS 成为了公司中最高效的团队之一，每周整合大量来自不同团队的变更，同时保持快速发布节奏。这一成功促使了整个组织内推广自动化测试文化的努力。

目前，在谷歌提交的每一行代码都会经过数十万个自动测试套件的检验。如果通过，则会自动合并到主分支并准备部署至生产环境。许多产品每小时或每天都会生成新的版本供选择性发布；还有一些采用持续交付策略。即使面临单个代码部署可能引发全局故障的风险，谷歌依然能够依靠其高度信任的文化确保问题迅速得到纠正。

## 模式 2：启动与移交审查

即便开发者在类生产环境中编写并运行代码，首次正式发布时仍可能出现灾难性的故障，原因在于运维团队通常介入得太晚。这会导致难以维护的生产软件。为解决此问题，谷歌采取了一项措施：要求开发小组先自行管理其服务，直至具备足够的能力后再移交给集中式的运维团队。

为了防止不成熟的服务进入生产环境从而带来潜在风险，可以定义一系列必须满足的启动条件。这些条件可能包括缺陷数量与严重程度、警报频率、监控覆盖率、系统架构灵活性、部署过程自动化水平等。通过制定这样的指南，有助于确保每个项目都能从组织整体的经验中受益。

此外，在审核过程中发现任何不足之处时，指定的运维工程师应协助相关团队解决问题，甚至重新设计服务以使其更容易管理和扩展。此时还应考虑服务是否受到特定法规约束，例如收入贡献比例达到一定标准或者用户流量巨大等情况下的合规性要求。