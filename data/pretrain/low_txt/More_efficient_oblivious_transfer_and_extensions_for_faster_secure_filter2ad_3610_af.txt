### Optimized Text

#### Main Text
The optimization of Oblivious Transfers (OTs) has a negligible effect on the total runtime. To further enhance the runtime for large circuits, a faster engine for circuit garbling, such as the one described in [6], could be integrated with our improved OT implementation. For the GMW framework [56], the total runtime is primarily determined by the time required for performing OT extensions, which we have reduced by a factor of 2.

#### Acknowledgements
We would like to express our gratitude to David Evans and the anonymous reviewers of ACM CCS for their valuable comments on our paper. The first two authors were funded by the European Research Council under the European Union’s Seventh Framework Programme (FP/2007-2013) / ERC Grant Agreement n. 239868. The third and fourth authors were supported by the German Federal Ministry of Education and Research (BMBF) within EC SPRIDE and by the Hessian LOEWE excellence initiative within CASED.

#### References
1. G. Asharov, Y. Lindell, T. Schneider, and M. Zohner. More efficient oblivious transfer and extensions for faster secure computation. In *Computer and Communications Security (CCS'13)*. ACM, 2013. To appear.
2. M. Barni, T. Bianchi, D. Catalano, M. Di Raimondo, R. Donida Labati, P. Failla, D. Fiore, R. Lazzeretti, V. Piuri, F. Scotti, and A. Piva. Privacy-preserving fingercode authentication. In *Multimedia and Security (MM&SEC'10)*, pages 231–240. ACM, 2010.
3. D. Beaver. Efficient multiparty protocols using circuit randomization. In *Advances in Cryptology – CRYPTO'91*, volume 576 of LNCS, pages 420–432. Springer, 1991.
4. D. Beaver. Correlated pseudorandomness and the complexity of private computations. In *Symposium on Theory of Computing (STOC'96)*, pages 479–488. ACM, 1996.
5. M. Bellare, S. Goldwasser, and D. Micciancio. "Pseudo-random" number generation within cryptographic algorithms: The DDS case. In *Advances in Cryptology – CRYPTO'97*, volume 1294 of LNCS, pages 277–291. Springer, 1997.
6. M. Bellare, V. Hoang, S. Keelveedhi, and P. Rogaway. Efficient garbling from a fixed-key blockcipher. In *Symposium on Security and Privacy*, pages 478–492. IEEE, 2013.
7. A. Ben-David, N. Nisan, and B. Pinkas. FairplayMP: a system for secure multi-party computation. In *Computer and Communications Security (CCS'08)*, pages 257–266. ACM, 2008.
8. J. Boyar and R. Peralta. The exact multiplicative complexity of the Hamming weight function. *Electronic Colloquium on Computational Complexity (ECCC'05)*, (049), 2005.
9. R. Canetti. Security and composition of multiparty cryptographic protocols. *J. Cryptology*, 13(1):143–202, 2000.
10. S. G. Choi, K.-W. Hwang, J. Katz, T. Malkin, and D. Rubenstein. Secure multi-party computation of Boolean circuits with applications to privacy in on-line marketplaces. In *Cryptographers’ Track at the RSA Conference (CT-RSA'12)*, volume 7178 of LNCS, pages 416–432. Springer, 2012.
11. E. De Cristofaro and G. Tsudik. Practical private set intersection protocols with linear complexity. In *Financial Cryptography and Data Security (FC'10)*, volume 6052 of LNCS, pages 143–159. Springer, 2010.
12. C. Dong, L. Chen, and Z. Wen. When private set intersection meets big data: An efficient and scalable protocol. In *Computer and Communications Security (CCS'13)*. ACM, 2013. To appear.
13. Y. Ejgenberg, M. Farbstein, M. Levy, and Y. Lindell. SCAPI: The secure computation application programming interface. *IACR Cryptology ePrint Archive*, 2012:629, 2012.
14. J. O. Eklundh. A fast computer method for matrix transposing. *IEEE Transactions on Computers*, C-21(7):801–803, 1972.
15. Z. Erkin, M. Franz, J. Guajardo, S. Katzenbeisser, I. Lagendijk, and T. Toft. Privacy-preserving face recognition. In *Privacy Enhancing Technologies Symposium (PETS'09)*, volume 5672 of LNCS, pages 235–253. Springer, 2009.
16. S. Even, O. Goldreich, and A. Lempel. A randomized protocol for signing contracts. *Communications of the ACM*, 28(6):637–647, 1985.
17. K. Frikken, M. Atallah, and C. Zhang. Privacy-preserving credit checking. In *Electronic Commerce (EC'05)*, pages 147–154. ACM, 2005.
18. O. Goldreich. *Foundations of Cryptography, volume 2: Basic Applications*. Cambridge University Press, 2004.
19. O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game or a completeness theorem for protocols with honest majority. In *Symposium on Theory of Computing (STOC'87)*, pages 218–229. ACM, 1987.
20. S. D. Gordon, J. Katz, V. Kolesnikov, F. Krell, T. Malkin, M. Raykova, and Y. Vahlis. Secure two-party computation in sublinear (amortized) time. In *Computer and Communications Security (CCS'12)*, pages 513–524. ACM, 2012.
21. D. Harnik, Y. Ishai, E. Kushilevitz, and J. B. Nielsen. OT-combiners via secure computation. In *Theory of Cryptography (TCC'08)*, volume 4948 of LNCS, pages 393–411. Springer, 2008.
22. J. Håstad and A. Shamir. The cryptographic security of truncated linearly related variables. In *Symposium on Theory of Computing (STOC'85)*, pages 356–362. ACM, 1985.
23. W. Henecka, S. Kögl, A.-R. Sadeghi, T. Schneider, and I. Wehrenberg. TASTY: Tool for Automating Secure Two-partY computations. In *Computer and Communications Security (CCS'10)*, pages 451–462. ACM, 2010.
24. W. Henecka and T. Schneider. Faster secure two-party computation with less memory. In *ACM Symposium on Information, Computer and Communications Security (ASIACCS'13)*, pages 437–446. ACM, 2013.
25. A. Holzer, M. Franz, S. Katzenbeisser, and H. Veith. Secure two-party computations in ANSI C. In *Computer and Communications Security (CCS'12)*, pages 772–783. ACM, 2012.
26. Y. Huang, P. Chapman, and D. Evans. Privacy-preserving applications on smartphones. In *Hot topics in security (HotSec'11)*. USENIX, 2011.
27. Y. Huang, D. Evans, and J. Katz. Private set intersection: Are garbled circuits better than custom protocols? In *Network and Distributed Security Symposium (NDSS'12)*. The Internet Society, 2012.
28. Y. Huang, D. Evans, J. Katz, and L. Malka. Faster secure two-party computation using garbled circuits. In *Security Symposium*. USENIX, 2011.
29. Y. Huang, J. Katz, and D. Evans. Quid-pro-quo-tocols: Strengthening semi-honest protocols with dual execution. In *Symposium on Security and Privacy*, pages 272–284. IEEE, 2012.
30. Y. Huang, L. Malka, D. Evans, and J. Katz. Efficient privacy-preserving biometric identification. In *Network and Distributed Security Symposium (NDSS'11)*. The Internet Society, 2011.
31. Intelligence Advanced Research Projects Activity (IARPA). Security and Privacy Assurance Research (SPAR) Program, 2010.
32. Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Extending oblivious transfers efficiently. In *Advances in Cryptology – CRYPTO'03*, volume 2729 of LNCS, pages 145–161. Springer, 2003.
33. A. Jarrous and B. Pinkas. Secure hamming distance based computation and its applications. In *Applied Cryptography and Network Security (ACNS'09)*, volume 5536 of LNCS, pages 107–124. Springer, 2009.
34. S. Jha, L. Kruger, and V. Shmatikov. Towards practical privacy for genomic computation. In *Symposium on Security and Privacy*, pages 216–230. IEEE, 2008.
35. F. Kerschbaum. Automatically optimizing secure computation. In *Computer and Communications Security (CCS'11)*, pages 703–714. ACM, 2011.
36. V. Kolesnikov and R. Kumaresan. Improved OT extension for transferring short secrets. In *Advances in Cryptology – CRYPTO'13 (2)*, volume 8043 of LNCS, pages 54–70. Springer, 2013.
37. V. Kolesnikov, A.-R. Sadeghi, and T. Schneider. Improved garbled circuit building blocks and applications to auctions and computing minima. In *Cryptology And Network Security (CANS'09)*, volume 5888 of LNCS, pages 1–20. Springer, 2009.
38. V. Kolesnikov and T. Schneider. Improved garbled circuit: Free XOR gates and applications. In *International Colloquium on Automata, Languages and Programming (ICALP'08)*, volume 5126 of LNCS, pages 486–498. Springer, 2008.
39. H. Krawczyk. Cryptographic extraction and key derivation: The HKDF scheme. In *Advances in Cryptology – CRYPTO'10*, volume 6223 of LNCS, pages 631–648. Springer, 2010.
40. B. Kreuter, A. Shelat, and C.-H. Shen. Billion-gate secure computation with malicious adversaries. In *Security Symposium*. USENIX, 2012.
41. P. MacKenzie, A. Oprea, and M. K. Reiter. Automatic generation of two-party computations. In *Computer and Communications Security (CCS'03)*, pages 210–219. ACM, 2003.
42. L. Malka. VMCrypt - modular software architecture for scalable secure computation. In *Computer and Communications Security (CCS'11)*, pages 715–724. ACM, 2011.
43. D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay — a secure two-party computation system. In *Security Symposium*, pages 287–302. USENIX, 2004.
44. A. Menezes, P. C. van Oorschot, and S. A. Vanstone. *Handbook of Applied Cryptography*. CRC Press, 1996.
45. S. Nagaraja, P. Mittal, C.-Y. Hong, M. Caesar, and N. Borisov. Botgrep: Finding P2P bots with structured graph analysis. In *Security Symposium*, pages 95–110. USENIX, 2010.
46. M. Naor and B. Pinkas. Efficient oblivious transfer protocols. In *ACM-SIAM Symposium On Discrete Algorithms, SODA '01*, pages 448–457. Society for Industrial and Applied Mathematics, 2001.
47. A. Narayanan, N. Thiagarajan, M. Lakhani, M. Hamburg, and D. Boneh. Location privacy via private proximity testing. In *Network and Distributed Security Symposium (NDSS'11)*. The Internet Society, 2011.
48. J. B. Nielsen. Extending oblivious transfers efficiently - how to get robustness almost for free. *Cryptology ePrint Archive*, Report 2007/215, 2007.
49. J. B. Nielsen, P. S. Nordholt, C. Orlandi, and S. S. Burra. A new approach to practical active-secure two-party computation. In *Advances in Cryptology – CRYPTO'12*, volume 7417 of LNCS, pages 681–700. Springer, 2012.
50. V. Nikolaenko, U. Weinsberg, S. Ioannidis, M. Joye, D. Boneh, and N. Taft. Privacy-preserving ridge regression on hundreds of millions of records. In *Symposium on Security and Privacy*, pages 334–348. IEEE, 2013.
51. NIST. NIST Special Publication 800-57, Recommendation for Key Management Part 1: General (Rev. 3). Technical report, 2012.
52. M. Osadchy, B. Pinkas, A. Jarrous, and B. Moskovich. SCiFI - a system for secure face identification. In *Symposium on Security and Privacy*, pages 239–254. IEEE, 2010.
53. B. Pinkas, T. Schneider, N. P. Smart, and S. C. Williams. Secure two-party computation is practical. In *Advances in Cryptology – ASIACRYPT'09*, volume 5912 of LNCS, pages 250–267. Springer, 2009.
54. M. O. Rabin. How to exchange secrets with oblivious transfer, TR-81 edition, 1981. Aiken Computation Lab, Harvard University.
55. A.-R. Sadeghi, T. Schneider, and I. Wehrenberg. Efficient privacy-preserving face recognition. In *International Conference on Information Security and Cryptology (ICISC'09)*, volume 5984 of LNCS, pages 229–244. Springer, 2009.
56. T. Schneider and M. Zohner. GMW vs. Yao? Efficient secure two-party computation with low depth circuits. In *Financial Cryptography and Data Security (FC'13)*, LNCS. Springer, 2013.
57. A. Schröpfer and F. Kerschbaum. Demo: secure computation in JavaScript. In *Computer and Communications Security (CCS'11)*, pages 849–852. ACM, 2011.
58. A. C. Yao. How to generate and exchange secrets. In *Foundations of Computer Science (FOCS'86)*, pages 162–167. IEEE, 1986.

#### Appendix A: Definitions
We denote the security parameter by \(\kappa\). A function \(\mu(\cdot)\) is considered negligible if for every positive polynomial \(p(\cdot)\) and all sufficiently large \(n\), it holds that \(\mu(n) < \frac{1}{p(n)}\). A distribution ensemble \(X = \{X(a, n)\}_{a \in D_n, n \in \mathbb{N}}\) is an infinite sequence of random variables indexed by \(a \in D_n\) and \(n \in \mathbb{N}\). Two distribution ensembles \(X, Y\) are computationally indistinguishable, denoted \(X \stackrel{c}{\equiv} Y\), if for every non-uniform polynomial-time algorithm \(D\) there exists a negligible function \(\mu(\cdot)\) such that for every \(n\) and every \(a \in D_n\):
\[ \left| \Pr[D(X(a, n), a, n) = 1] - \Pr[D(Y(a, n), a, n) = 1] \right| \leq \mu(n). \]

**Key Derivation Function (KDF):** The following definition is adapted from the general definition in [39] for the case of the DDH problem. Intuitively, the adversary should not be able to distinguish between the output of the KDF function and a uniform string. Let \(Gen(1^\kappa)\) be a function that produces a group \((G, q, g)\) for which the DDH problem is believed to be hard. We define:

**Definition A1 (Key-Derivation Function):** A key derivation function KDF with \(\ell\)-bit output is said to be secure with respect to DDH if for any probabilistic polynomial-time (ppt) attacker \(A\), there exists a negligible function \(\mu(\cdot)\) such that:
\[ \left| \Pr[A(G, q, g, g^r, h, KDF(h^r)) = 1] - \Pr[A(G, q, g, g^r, h, z) = 1] \right| \leq \mu(\kappa) \]
where \((G, q, g) = Gen(1^\kappa)\), \(r\) is uniformly distributed in \(\mathbb{Z}_q\), and \(z\) is uniformly distributed in \(\{0, 1\}^\ell\).

**Correlation Robust Function:** We present a definition for a correlation robust function, based on the definition in [32].

**Definition A2 (Correlation Robustness):** An efficiently computable function \(H : \{0, 1\}^\kappa \to \{0, 1\}^\ell\) is said to be correlation robust if it holds that:
\[ \{t_1, \ldots, t_m, H(t_1 \oplus s), \ldots, H(t_m \oplus s)\} \stackrel{c}{\equiv} \{U_{m \cdot \kappa + m \cdot \ell}\} \]
where \(t_1, \ldots, t_m, s\) are chosen uniformly and independently at random from \(\{0, 1\}^\kappa\), and \(U_{m \cdot \kappa + m \cdot \ell}\) is the uniform distribution over \(\{0, 1\}^{m \cdot \kappa + m \cdot \ell}\).

**Secure Two-Party Computation:** We provide a formal definition for the security of a two-party protocol in the presence of a semi-honest adversary. The definition is standard, see [9, 18]. The view of party \(P_0\) during an execution of a protocol \(\pi\) on inputs \((x, y)\), denoted \(\text{view}_\pi^0(x, y)\), is defined to be \((x, r; m)\) where \(x\) is \(P_0\)'s private input, \(r\) are its internal coin tosses, and \(m\) are the messages it has received in the execution. The view of \(P_1\) is defined analogously. Let \(\text{output}_\pi(x, y)\) denote the output pair of both parties in a real execution of the protocol. We are now ready to state the security definition:

**Definition A3:** Let \(f : (\{0, 1\}^*)^2 \to (\{0, 1\}^*)^2\) be a (possibly randomized) two-party functionality, and let \(f_i(x, y)\) denote the \(i\)-th element of \(f(x, y)\). Let \(\pi\) be a protocol. We say that \(\pi\) privately computes \(f\) if for every \((x, y) \in (\{0, 1\}^*)^2\):
\[ \text{output}_\pi(x, y) = f(x, y) \]
and there exist a pair of probabilistic polynomial-time (ppt) algorithms \(S_0, S_1\):
\[ \{S_0(x, f_0(x, y)), f(x, y)\} \stackrel{c}{\equiv} \{\text{view}_\pi^0(x, y), \text{output}_\pi(x, y)\} \]
\[ \{S_1(y, f_1(x, y)), f(x, y)\} \stackrel{c}{\equiv} \{\text{view}_\pi^1(x, y), \text{output}_\pi(x, y)\} \]
where \(z = (x, y) \in (\{0, 1\}^*)^2\).

In the case where the function \(f\) is deterministic (like in the OT functionality), there is no need to consider the joint distribution of the outputs and the view, and it is sufficient to show that the output of the simulator \(S_i\) is indistinguishable from the view of the party \(P_i\).

#### Appendix B: Multiplication Triple Protocol
In this section, we demonstrate that the protocol presented in §5.1 privately computes the multiplication triple functionality.

First, we consider the \(f_{ab}\) functionality. The protocol implements the functionality since any random \((b, v)\), \((a, u)\), for which \(ab = u \oplus v\), can be written as \((b, v) = (x_0 \oplus x_1, x_0)\) and \((a, u) = (a, ab \oplus v) = (a, xa)\), since it holds that:
\[ ab \oplus v = ab \oplus x_0 = a(x_0 \oplus x_1) \oplus x_0 = xa. \]
The inputs and outputs of each party fully determine its view, and therefore simulators are trivial and just re-arrange their inputs. Consistency of the generated view with the output of the parties holds trivially.

Next, we turn to the multiplication triple functionality. It is straightforward to verify that the protocol implements the functionality. Regarding simulation, a simulator \(S_0\) is given \((a_0, b_0, c_0)\), chooses a random \(u_0\) and defines: \(v_0 = c_0 \oplus a_0b_0 \oplus u_0\). Since \(u_0, v_0\) are random and hidden from the distinguisher, the view is consistent with \((a_1, b_1, c_1)\). A simulator for \(S_1\) works similarly, and security holds for the same reason (i.e., \(v_1 = a_0b_1 \oplus u_0\) is random since \(u_0\) is hidden from the distinguisher, and \(v_1\) is fully determined from \(c_1, a_1, b_1, u_1\)).