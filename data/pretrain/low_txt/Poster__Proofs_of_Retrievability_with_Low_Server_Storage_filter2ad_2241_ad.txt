### PoOR: Efficient Proofs of Ownership and Retrievability in Cloud Storage

#### 1. Introduction
The primary objective of our PoOR (Proofs of Ownership and Retrievability) scheme is to efficiently manage large files by dividing them into smaller blocks and verifying a subset of these blocks using Merkle Trees or homomorphic verifiable tags. This approach ensures that only a small portion of the file, for example, 400 blocks, needs to be accessed during the proving and verification processes. It is important to note that, in the preprocessing phase, the entire file must be processed to generate unique tags for each user, which are essential for private data possession verification.

#### 2. Computation and Storage Overhead
The computation overhead in our scheme is reasonable and will be evaluated in the following section. On the client side, the additional storage requirement is minimal, as users only need to store secret keys for verifying the integrity of their files. The server, however, must store unique tags for each user, even if they share the same file. If the sector size is \( \alpha \) bytes and the block size is \( \beta \) bytes, the total space needed for a client's tags is \( \frac{\alpha}{\beta} \times l \), where \( l \) is the length of the file. For instance, with \( \alpha = 64 \) bytes and \( \beta = 16 \) bytes, only 0.4% extra data needs to be transferred and stored on the server. This additional storage cost is inevitable in general privately verifiable proof of retrievability schemes for plaintext and is acceptable given the vast storage capacity of modern servers.

#### 3. Communication Cost
The communication cost of Proof of Work (PoW) schemes can be as high as \( 256c(\log_2 n - 1) \), where \( c \) is the number of challenged blocks and \( \log_2 n \) is the height of the Merkle Tree. In contrast, our PoOR scheme significantly reduces the communication traffic between the client and the server. The root of the hash tree, \( P1 \), has a short length (e.g., 256 bits for SHA-256). The length of \( P2 \) is \( |T| + s|\mu| \), independent of the file size and the number of challenged blocks. Table II illustrates the sizes of proofs for block sizes ranging from 4KB to 64KB, with a fixed sector size of 64B. The proof sizes are nearly equal to the block sizes, making them small and manageable.

**Table II: Sizes of Proofs of Retrievability**

| Block Size (KB) | Proof Size (KB) |
|-----------------|-----------------|
| 4               | 4.09            |
| 16              | 16.18           |
| 64              | 64.51           |

#### 4. Experimental Evaluation
We implemented the PoOR scheme and evaluated its computational performance. The program was written in Java and run on a computer with a 2.8GHz Pentium Dual-Core CPU and 4GB RAM, running a 32-bit version of Windows 7.

**4.1 Pre-processing and Ownership Proving**
Figure 5 compares the running time of the pre-processing and ownership proving phases with the transmission time of uploading the file directly through a 5Mbps network. Despite the need to generate tags for all blocks, the PoOR scheme takes significantly less time than sending the entire file, especially for large files.

**Figure 5: Computation Performance of the Three Phases (Block Size: 4KB, Challenged Blocks: 400)**

**4.2 Ownership Proving**
Figure 6 shows the computation time as a function of file size for generating proofs of ownership in PoWs and PoOR. The proving time for PoWs is directly proportional to the file size and is much longer than that of PoOR. In PoWs, which challenge only 20 leaves, the client must build a hash tree from all blocks to generate a proof. In our scheme, the time to generate a proof depends only on the number of challenged blocks, resulting in a more consistent proving time.

**Figure 6: Computation Performance of Ownership Proving Phase Compared with PoWs**

**4.3 Retrievability Proving**
Finally, we compare the retrievability proving phase in our scheme with PDP [10]. The running time of this phase is independent of the file size, so we conducted experiments on a 128MB file. Figure 7 shows that the running time increases with larger block sizes and more challenged blocks. When these parameters are the same, our scheme runs faster than PDP.

**Figure 7: Computation Performance Compared with PDP**

#### 5. Conclusion
In summary, the computational performance of our PoOR scheme is satisfactory. It allows users to quickly prove ownership and verify the retrievability of large files. Our work is one of the earliest research efforts on file deduplication with proofs of data retrievability in cloud storage and can be further improved for even greater efficiency.

#### 6. Acknowledgment
This work was partially supported by the National Natural Science Foundation of China under Grant Nos. 61272451, 61100221, 61173175, and 61173154. The corresponding author is Jing Chen.

#### 7. References
[1] D. Harnik, B. Pinkas, and A. Shulman-Peleg, “Side Channels in Cloud Services: Deduplication in Cloud Storage,” *IEEE Secur. Priv.*, vol. 8, no. 6, pp. 40–47, 2010.
[2] S. Halevi, D. Harnik, B. Pinkas, and A. Shulman-Peleg, “Proofs of Ownership in Remote Storage Systems,” in *Proceedings of the 18th ACM Conference on Computer and Communications Security*, New York, NY, USA, 2011, pp. 491–500.
[3] D. T. Meyer and W. J. Bolosky, “A Study of Practical Deduplication,” *Trans Storage*, vol. 7, no. 4, pp. 14:1–14:20, 2012.
[4] D. R. Bobbarjung, S. Jagannathan, and C. Dubnicki, “Improving Duplicate Elimination in Storage Systems,” *Trans Storage*, vol. 2, no. 4, pp. 424–448, 2006.
[5] R. Di Pietro and A. Sorniotti, “Boosting Efficiency and Security in Proof of Ownership for Deduplication,” in *Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security*, New York, NY, USA, 2012, pp. 81–82.
[6] C. Yang, J. Ren, and J. Ma, “Provable Ownership of Files in Deduplication Cloud Storage,” *Secur. Commun. Netw.*, 2013.
[7] J. Xu, E.-C. Chang, and J. Zhou, “Weak Leakage-Resilient Client-Side Deduplication of Encrypted Data in Cloud Storage,” in *Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security*, New York, NY, USA, 2013, pp. 195–206.
[8] J. R. Douceur, A. Adya, W. J. Bolosky, P. Simon, and M. Theimer, “Reclaiming Space from Duplicate Files in a Serverless Distributed File System,” in *22nd International Conference on Distributed Computing Systems, 2002. Proceedings*, 2002, pp. 617–624.
[9] Y. Deswarte, J.-J. Quisquater, and A. Saïdane, “Remote Integrity Checking,” in *Integrity and Internal Control in Information Systems VI*, S. Jajodia and L. Strous, Springer US, 2004, pp. 1–11.
[10] G. Ateniese, R. Burns, R. Curtmola, J. Herring, L. Kissner, Z. Peterson, and D. Song, “Provable Data Possession at Untrusted Stores,” in *Proceedings of the 14th ACM Conference on Computer and Communications Security*, New York, NY, USA, 2007, pp. 598–609.
[11] A. Juels and B. S. Kaliski, Jr., “PORs: Proofs of Retrievability for Large Files,” in *Proceedings of the 14th ACM Conference on Computer and Communications Security*, New York, NY, USA, 2007, pp. 584–597.
[12] H. Shacham and B. Waters, “Compact Proofs of Retrievability,” in *Advances in Cryptology - ASIACRYPT 2008*, J. Pieprzyk, Springer Berlin Heidelberg, 2008, pp. 90–107.
[13] E.-C. Chang and J. Xu, “Remote Integrity Check with Dishonest Storage Server,” in *Computer Security - ESORICS 2008*, S. Jajodia and J. Lopez, Springer Berlin Heidelberg, 2008, pp. 223–237.
[14] G. Ateniese, R. Di Pietro, L. V. Mancini, and G. Tsudik, “Scalable and Efficient Provable Data Possession,” in *Proceedings of the 4th International Conference on Security and Privacy in Communication Networks*, New York, NY, USA, 2008, pp. 9:1–9:10.
[15] R. Curtmola, O. Khan, R. Burns, and G. Ateniese, “MR-PDP: Multiple-Replica Provable Data Possession,” in *The 28th International Conference on Distributed Computing Systems, 2008. ICDCS ’08*, 2008, pp. 411–420.
[16] K. D. Bowers, A. Juels, and A. Oprea, “HAIL: A High-Availability and Integrity Layer for Cloud Storage,” in *Proceedings of the 16th ACM Conference on Computer and Communications Security*, New York, NY, USA, 2009, pp. 187–198.
[17] Y. Zhu, H. Hu, G.-J. Ahn, and M. Yu, “Cooperative Provable Data Possession for Integrity Verification in Multicloud Storage,” *IEEE Trans. Parallel Distrib. Syst.*, vol. 23, no. 12, pp. 2231–2244, 2012.
[18] C. Erway, A. Küpçü, C. Papamanthou, and R. Tamassia, “Dynamic Provable Data Possession,” in *Proceedings of the 16th ACM Conference on Computer and Communications Security*, New York, NY, USA, 2009, pp. 213–222.
[19] Q. Wang, C. Wang, J. Li, K. Ren, and W. Lou, “Enabling Public Verifiability and Data Dynamics for Storage Security in Cloud Computing,” in *Computer Security – ESORICS 2009*, M. Backes and P. Ning, Springer Berlin Heidelberg, 2009, pp. 355–370.
[20] Q. Wang, C. Wang, K. Ren, W. Lou, and J. Li, “Enabling Public Auditability and Data Dynamics for Storage Security in Cloud Computing,” *IEEE Trans. Parallel Distrib. Syst.*, vol. 22, no. 5, pp. 847–859, 2011.
[21] C. Wang, Q. Wang, K. Ren, and W. Lou, “Privacy-Preserving Public Auditing for Data Storage Security in Cloud Computing,” in *2010 Proceedings IEEE INFOCOM*, 2010, pp. 1–9.
[22] G. Ateniese, R. Burns, R. Curtmola, J. Herring, O. Khan, L. Kissner, Z. Peterson, and D. Song, “Remote Data Checking Using Provable Data Possession,” *ACM Trans Inf Syst Secur*, vol. 14, no. 1, pp. 12:1–12:34, 2011.
[23] J. Yuan and S. Yu, “Proofs of Retrievability with Public Verifiability and Constant Communication Cost in Cloud,” in *Proceedings of the 2013 International Workshop on Security in Cloud Computing*, New York, NY, USA, 2013, pp. 19–26.
[24] Q. Zheng and S. Xu, “Secure and Efficient Proof of Storage with Deduplication,” in *Proceedings of the Second ACM Conference on Data and Application Security and Privacy*, New York, NY, USA, 2012, pp. 1–12.