### Low-Overhead, Software-Only Stack Protection Solutions

Stack protection solutions such as StackGuard [29] and shadow stacks [26] primarily protect return addresses but do not secure other stack data. These solutions can be circumvented by attack techniques like direct writes and information leaks. Recent studies have shown that shadow stacks incur a performance overhead of approximately 10% [26]. We include the optimized Parallel Shadow Stack variant in our taxonomy. Hardware support for shadow stacks, such as SmashGuard [43], has been proposed, and Intel has announced upcoming hardware support for this feature in their Control-Flow Enforcement Technology [16].

### AddressSanitizer

AddressSanitizer [44] instruments all memory accesses with checks against "red zones" in a shadow memory that pads all objects. It provides protection for both stack and heap objects, but only against contiguous write cases. The runtime overhead is high, at 73%, and the memory usage overhead is 3.3×.

### Code Pointer Integrity (CPI)

A recent research direction proposes providing full memory safety for code pointers (Code Pointer Integrity [25]). This technique offers effective protection with minimal overhead on commodity hardware but does not cover all stack data. Recent work has demonstrated that even non-control data attacks can be Turing complete [52].

### SafeStack

The SafeStack component explores splitting the stack into a "safe stack" and a "regular stack." Objects accessed in a statically, provably-safe manner, such as return addresses and spilled registers, are placed on the safe stack. Other objects, like arrays and structs, are placed on the regular stack. This spatial separation protects items on the safe stack with almost no performance overhead. However, it is opportunistic, protecting only the items that can be cheaply protected. Without CPI, it provides no protection for items on the unsafe stack. The safe region is protected only with information hiding on 64-bit systems, and implementations have been attacked [53].

### Hardware-Assisted Data-Flow Isolation (HDFI)

HDFI [12] uses a single metadata tag bit for efficient security checks, achieving low overhead. However, with only one metadata bit, it can only provide coarse protection, such as just return addresses or code pointers. HDFI can distinguish two classes of data and ensure that data from one class is not mistaken for data in the other, but it cannot provide fine-grained frame and object separation. Recent work shows that single-bit tags can be added without changing the physical memory word width by using a separate tag table with low overhead [54]. LowRISC provides two bits of tagging in its memory system, which could be used to implement HDFI with its ltag/stag operations [55], [56].

### Commercial Products

Some commercial products are beginning to offer features that approximate HDFI. ARM's v8.3 pointer authentication feature can detect tampering on return addresses or other code pointers without the need for separate tag bits [57]. Oracle's Application Data Integrity (ADI) can assign one of its 16 colors to spilled stack frames at a cache-line granularity, serving a similar function to the single tag bit in HDFI [58]. These offerings are available on commercially available chips but only provide protection similar to our Return Address Protection policy.

### Data-Flow Integrity (DFI) Variants

Like other data-flow integrity models [35], the DFI variants of our policies track writers to memory words. Instead of using static instructions as writers, our policies use identifiers for stack objects. In the case of Depth Isolation, we differentiate dynamic instances of the same variable. However, in this work, we restrict the policies to just stack objects.

### Bounds Checking Approaches

Bounds checking approaches such as SoftBound + CETS [45], [3] can provide complete memory safety using software checks but are expensive, with a 116% overhead. Hardware support for bounds checking, such as HardBound [11], Intel's MPX [15], and CHERI [14], [59], can significantly reduce these overheads. Metadata tags are an alternative mechanism that can provide memory protection, and this work explores the space of tag-based policies for memory safety.

### SDMP Policies

The stack protection policies presented in this work complement and can be composed with other SDMP policies. Prior work has detailed policies for Control-Flow Integrity (CFI) [17], [60], Information-Flow Control (IFC) [61], [62], Instruction and Data Tainting [17], Minimal Typing [17], Compartmentalization [60], Dynamic Sealing [60], Self Protection [60], and Heap Memory Safety [17], [60]. These previous policies did not address protecting the program stack. The previous memory safety work [17], [60] only addressed heap-allocated data, where instrumenting the allocator was sufficient to build the policies. Object-level stack memory protection is significantly more involved.

### Policy Applicability

Several systems provide programmable, multi-bit metadata tags that could exploit the policies derived here [63], [23], [64], [65]. Aries [63] would need to be extended to include tags on memory. Harmoni [23] lacks instruction tags but decodes control from instructions; most of our uses of instruction tags could be replaced with augmented instructions. Here, Depth Isolation, where ownership comes from depth on pointers, would make more sense than Static Authorities, which require authority to be embedded in the instructions. The original Harmoni design has only two inputs to its tag update table (UTBL), while some of our rules need three inputs, beyond the instruction tag, to track tags on both register arguments and memory. The SAFE Processor [64] has a hardware-isolated control stack, so it does not need to use a metadata policy for protecting procedure call control data. The policies in this work can unify stack protection under the single mechanism of tagged metadata, rather than adding a separate mechanism for just protecting stack control data. DOVER [65] closely follows SDMP and would be a direct match for our policies.

### Emerging Flexible, Decoupled Monitoring Architectures

Emerging flexible, decoupled monitoring architectures support parallel checking of events with metadata maintained in a parallel monitor [66], [67], [68]. LBA and FADE [66], [67] add hardware support to filter and accelerate events with structures similar to the SDMP rule cache. The accelerators in reported designs do not include accelerated handling for metadata on the program counter and instructions, but such extensions appear feasible. As with Harmoni, instruction tags could be handled as augmented instructions. ARMHEx exploits the ARM CoreSight debug port, added instrumentation code, and programmable logic to perform tagged information tracking on existing ARM SoCs such as a Xilinx Zynq [68]. Combining the instrumentation to pass necessary data and programmable logic to implement tracking and checking, it should be able to implement the stack policies described here. The Depth Isolation and Static Authorities policies we describe have richer metadata and are more sophisticated than any of the policies assessed in these monitoring architecture papers.

### Limitations and Future Work

Other variations of the policies presented could be constructed. With additional compiler support, subfield-sensitive policies (i.e., object-ids for individual fields of structs) could be derived for stronger protection. Variants of the policies that combine the notions of static owner and depth could overcome the limitations of the Static Authorities and Depth Isolation policies. Our policies do not differentiate between arguments, which would also be a straightforward addition. Policies designed against a stronger threat model (e.g., untrusted code) would be an interesting extension to this work.

### Conclusion

In this work, we demonstrate how a general-purpose tagged architecture can accelerate stack protection security policies expressed in the Software-Defined Metadata Processing (SDMP) model. We propose a simple policy that only protects return addresses, as well as two richer policies that provide object-level protection of all stack data. Our policies carry forward information available to the compiler about the arrangement of stack memory and the intent of the various accesses to the stack and validate them at runtime with metadata tags and rules. Our policies exploit the locality properties of typical programs to achieve effective hardware acceleration via a metadata tag rule cache. The main source of overhead incurred by the policies is the instructions added to tag and clear stack memory. We explore optimizations for reducing this overhead, bringing the overheads for our policies below 6% for memory safety and 4% for data-flow integrity. Although we derive our policies in the SDMP model, our designs and optimizations are likely applicable to other tagged architectures.

### Acknowledgements

The authors would like to thank the anonymous reviewers, as well as Cătălin Hrițcu, Benjamin Pierce, Greg Sullivan, Eli Boling, Nathan Dautenhahn, Nikos Vasilakis, and Ben Karel for their valuable feedback. This research was funded by the National Science Foundation grant TWC-1513854. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not reflect the official policy or position of the National Science Foundation or the U.S. Government.