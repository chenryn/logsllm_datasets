### Limitations
RTron, while effective, does face certain limitations. Firstly, it assumes that the structure of the target application adheres to a standard interaction graph and categorization. If the developer customizes the app based on entirely different designs, RTron may fail to identify potential risks. Secondly, RTron requires access to the source code of the robot application for risk identification and mitigation. This becomes challenging when the source code is not available. As future work, we plan to explore risk analysis and protection methods for closed-source robot applications.

### 10. Conclusion
Function interaction in robot app development provides significant flexibility and convenience. However, it also introduces potential risks that can compromise the safety of robot operations. This issue is further exacerbated by the fact that current robot app stores do not perform security inspections on function packages. Our study is the first to address safety issues caused by suspicious function interactions in robot apps. We introduce a novel end-to-end system and method to enforce security policies and protect function interactions in these apps. We hope this study will open new directions in robotics security and raise awareness about the importance of protecting function interactions.

### Acknowledgments
We are grateful to our Shepherd, Dr. Hamed Okhravi, and the anonymous reviewers for their valuable comments. This work was supported in part by the Key-Area Research and Development Program of Guangdong Province (NO.2020B010-164003), the National Natural Science Foundation of China (Grant No. 62090020), the Youth Innovation Promotion Association of the Chinese Academy of Sciences (2013073), the Strategic Priority Research Program of the Chinese Academy of Sciences (Grant No. XDC05030200), the Singapore MoE AcRF Tier 1 RG108/19 (S), and the NTU-Desay Research Program 2018-0980.

### References
[1] 2015. After Jeep Hack, Chrysler Recalls 1.4M Vehicles for Bug Fix. https://www.wired.com/2015/07/jeep-hack-chrysler-recalls-1-4m-vehicles-bug-fix/
[2] 2019. Open Source Robot Operating System. http://www.ros.org/
[3] 2020. App Store. https://www.apple.com/ios/app-store/
[4] 2020. Apple HomeKit. https://developer.apple.com/homekit/
[5] 2020. Application Builder. https://www.universal-robots.com/builder/
[6] 2020. The Autoware.AI Project. https://github.com/Autoware-AI/autoware.ai
[7] 2020. Baidu Apollo. https://github.com/ApolloAuto/apollo
[8] 2020. DJI Onboard SDK. https://developer.dji.com/onboard-sdk/
[9] 2020. Gazebo 3D Robot Simulator. http://gazebosim.org/
[10] 2020. Google Play. https://play.google.com/store/
[11] 2020. Google Weave Project. https://developers.google.com/weave/
[12] 2020. LGSVL Simulator. https://www.lgsvlsimulator.com/
[13] 2020. The Mac App Store. https://www.apple.com/uk/osx/apps/app-store/
[14] 2020. An Open Source Self-Driving Car. https://www.udacity.com/self-driving-car/
[15] 2020. OpenXC Platform. http://openxcplatform.com/
[16] 2020. Robot Vulnerability Database (RVD). https://github.com/aliasrobotics/RVD
[17] 2020. Robots that you can use with ROS. https://robots.ros.org/
[18] 2020. ROS 2 Robotic Systems Threat Model. https://design.ros2.org/articles/ros2_threat_model.html
[19] 2020. ROS ABB Package. http://wiki.ros.org/abb/
[20] 2020. ROS Messages. http://wiki.ros.org/Messages/
[21] 2020. ROS PR2 Package. http://wiki.ros.org/Robots/PR2/
[22] 2020. ROSbot 2.0 PRO. https://store.husarion.com/collections/dev-kits/products/rosbot-2-0-pro
[23] 2020. RosBot Exploration App. https://husarion.com/tutorials/ros-tutorials/8-unknown-environment-exploration/
[24] 2020. RosBot Navigation App. https://husarion.com/tutorials/ros-tutorials/7-path-planning/
[25] 2020. RosBot SLAM App. https://husarion.com/tutorials/ros-tutorials/6-slam-navigation/
[26] 2020. RosBot Teleoperation App. https://husarion.com/tutorials/ros-tutorials/3-simple-kinematics-for-mobile-robot/
[27] 2020. RViz 3D Visualization Tool for ROS. https://www.stereolabs.com/docs/ros/rviz/
[28] 2020. Samsung SmartThings. https://www.smartthings.com/
[29] 2020. Turtlebot3. https://emanual.robotis.com/docs/en/platform/turtlebot3/overview/
[30] 2020. Turtlebot3 AutoRace. https://emanual.robotis.com/docs/en/platform/turtlebot3/autonomous_driving/
[31] 2020. Ubuntu AppStore. https://ubuntu.com/blog/tag/appstore/
[32] 2020. Windows Apps - Microsoft Store. https://www.microsoft.com/en-us/store/apps/windows/
[33] 2020. Xiaoqiang Voice Interaction App. https://community.bwbot.org/topic/492/
... [Additional references as listed]

### Appendix: App Interaction Graph
Figure 15 illustrates a complete interaction graph for a home application. Gray ellipses represent function nodes, while rectangles denote topics. Each pair of nodes is connected via topics, indicated by black arrows. Interactions specific to GR-ST and GR-MT are marked in blue and red, respectively. MSR event-related and MSR action-related topics are denoted by purple rectangles, with or without diagonal stripes. Nodes related to RSR images are depicted in yellow ellipses.

**Figure 15: The Interaction Graph of Robot Applications in Home Scenario.**
*Note: Subscriptions of the visualization node (i.e., /rviz) and log node (i.e., /rosnode) have been omitted from the figure.*

[Graph details as provided in the original text]

---

This revised version aims to improve clarity, coherence, and professionalism.