### 误用的罗伊·菲尔丁的描述性状态迁移（REST）博士论文

**作者：Two-bit History**

**类别：观点**

**摘要：**
描述性状态迁移（REST）的应用程序接口（API）无处不在。然而，真正了解“符合描述性状态迁移”含义的人又有多少呢？

![](/data/attachment/album/202303/20/154318tpynlzzdi1yhug5h.jpg)

描述性状态迁移（REpresentational State Transfer, REST）的应用程序接口（API）在现代软件开发中非常普遍。然而，许多开发者对“符合描述性状态迁移”的实际意义并不完全理解。例如，在黑客新闻网站上的一篇公开问答中，有人表达了类似的困惑：

> “我阅读了几篇介绍描述性状态迁移（REST）的文章，甚至包括原始论文的部分章节。然而我仍然对REST 到底是什么只有一个相当模糊的想法。我开始认为没有人真的了解它，它仅仅是一个定义相当不充分的概念。”

为了深入探讨这个问题，我计划写一篇关于REST如何成为网络通信领域主导范式的博客。为此，我阅读了罗伊·菲尔丁（Roy Fielding）在2000年发表的博士论文《架构风格与基于网络的软件架构设计》。这篇论文首次提出了REST的概念。然而，读完后我发现，更引人注目的是菲尔丁的理论为何被如此广泛地误解。

### 误解的根源

尽管很多人知道REST源自菲尔丁的博士论文，但很少有人真正读过这篇论文。因此，对原文内容的误解得以传播。最大的误解是认为这篇博士论文直接解决了构建API的问题。许多人（包括我自己）一直认为REST从一开始就打算作为构建在超文本传输协议（HTTP）之上的Web API架构模型。然而，这种想法的时间线并不准确：我们今天所熟知的Web服务API并非在菲尔丁发表其博士论文之后才出现的。

实际上，菲尔丁的博士论文讨论的是HTTP本身。他是HTTP/1.1规范的主要贡献者之一。他的论文将REST视为指导HTTP/1.1标准化过程的架构原则。例如，他拒绝了使用新的`MGET`和`MHEAD`方法进行批量请求的提议，因为他认为这违反了REST的约束条件，特别是消息应易于代理和缓存的原则。因此，HTTP/1.1采用了持久性连接的设计，允许在一个连接上发送多个HTTP请求。

此外，菲尔丁认为Cookie不符合REST的原则，因为它们在无状态系统中引入了状态信息。然而，由于Cookie已经广泛应用，这一观点并未得到采纳。菲尔丁明确表示，REST不是构建基于HTTP系统的操作指南，而是扩展HTTP的操作指南。

### REST的应用范围

这并不意味着菲尔丁认为REST不能用于构建其他系统。他假设其他系统也是“分布式超媒体系统”。另一个常见的误解是认为REST是一种适用于任何网络应用的通用架构。然而，从博士论文中可以得出结论：REST主要解决的是在通过网络连接超文本内容时出现的可扩展性和一致性问题，而不是作为分布式应用的通用架构模型。

菲尔丁的博士论文不仅提出了REST概念，还讨论了一刀切的软件架构的弊端，并强调了选择适合特定需求的架构的重要性。论文中仅用一个章节讨论REST本身，大量内容集中在不同架构风格的分类上。这些风格包括受Unix管道设计启发的“管道-过滤器”（Pipe-and-Filter, PF）风格、客户-服务器（Client-Server, CS）风格及其改进版本，如分层-客户-服务器（Layered-Client-Server, LCS）、客户-缓存-无状态-服务器（Client-Cache-Stateless-Server, C$SS）和分层-客户-缓存-无状态-服务器（Layered-Client-Cache-Stateless-Server, LC$SS）等。菲尔丁认为，可以通过混合匹配现有风格提供的约束条件来派生出新的风格，REST就是这样一个例子。

### 结论

今天，REST在各种网络应用中的盲目使用颇具讽刺意味。菲尔丁最初将REST视为一种指导，通过它帮助开发者裁剪出适合特定应用需求的软件架构。然而，他在论文中明确指出，不应盲目追求流行架构而忽视具体需求。他在论文开头就警告说：“由于没有正确理解软件架构而‘使用流行的架构设计’是经常发生的。”几页之后，他又重申了这一点：

> “一些架构风格经常被描述为适用于一切软件形式的‘银弹’解决方案。然而，一名好的设计者应该选择能够满足解决特定问题需要的架构风格。”

总之，了解REST的初衷和适用范围对于避免其被误用至关重要。