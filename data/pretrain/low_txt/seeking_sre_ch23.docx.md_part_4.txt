### Zone 7：预配冗余存储的假设情景

在填写服务模板时，由于拼写错误而启动冗余存储配置的情况纯属假设。现实中，这种情况从未发生过。在我所了解的主要互联网公司中，也没有人使用SRE支持的框架。

### 反模式11：过度批评，缺乏鼓励

**SRE是一种吸引力，而不是压力。**

- **问题**：过度施压要求采用特定系统、框架或实践，而不是将其作为实现目标的一个有吸引力的选择。
- **解决方案**：团队应有权选择自己的工具，并引入轻量级的内部审核流程。这种开明的态度比强制性决策更快地达成更好的结果。例如，Forsgren, Nicole, Jez Humble, 和 Gene Kim（2018）在《加速：精益软件和DevOps的科学》一书中指出，这种管理风格不仅使员工更难完成工作，还会导致一种作坊式的工作体系，反而增加了风险。
- **案例**：在Dropbox，我们通过吉祥物——举着胡萝卜标志的宇航员来提醒团队要对大家友善，从而构建了更好的开发者基础设施和生产实用程序。这不仅帮助产品团队提高了工作效率，还减轻了开发和运维的工作量。

### 反模式12：推迟生产

**过于谨慎的推新会产生更大的问题。**

- **问题**：为防止系统故障，强加过长的测试周期和延迟，剥夺了工程师快速反馈调整的能力。
- **解决方案**：通过自动化和仔细的测试，结合灰度发布、生产/集成环境试错和“1%”推送，提供早期生产反馈机会。同时，进行负载和性能测试，以确保系统的稳定性和可靠性。
- **关键点**：缩短反馈循环，从早期开发测试到性能测试再到生产指标。快速更新或回滚，并通过有意义的标准对流量进行切片和切分，以控制哪些部分交付给哪些系统，降低更新或回滚的风险。

### 反模式13：优先避免故障而不追求快速恢复（MTTF > MTTR）

**失败是不可避免的。善于处理它，而不必尝试完全避免它。**

- **问题**：过分重视避免故障（增加平均故障时间[MTTF]），而忽略快速检测和从故障中恢复的能力（平均恢复时间[MTTR]）。
- **解决方案**：确保系统能够快速从不可避免的故障中恢复过来。引入容忍故障和提供降级服务的功能，充分分发服务以提高吞吐量，并尽量减少人工干预的时间。
- **案例**：混沌工程是现代服务规划和设计的重要工具。通过定期引入不至崩溃的故障，可以帮助系统更好地应对实际故障。一位优秀的SRE需要善于编写软件、调试系统，并想象事情会如何失败。通过破坏性测试和自动压力测试，可以不断改进系统的可靠性和弹性。

通过这些反模式的分析和解决方案，我们可以更好地理解如何构建高效、可靠的系统，并确保团队能够在快速变化的环境中保持灵活性和响应能力。