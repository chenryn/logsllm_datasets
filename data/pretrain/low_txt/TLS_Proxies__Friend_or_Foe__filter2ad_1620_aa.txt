# TLS Proxies: Friend or Foe?

**Authors:**
- Mark O'Neill
- Scott Ruoti
- Kent E. Seamons
- Daniel Zappala

**Affiliation:**
Brigham Young University, Department of Computer Science

**Contact:**
- PI:EMAIL
- PI:EMAIL
- PI:EMAIL
- PI:EMAIL

## Abstract
We measure the prevalence and uses of TLS proxies using a Flash tool deployed with a Google AdWords campaign. Our study generated 2.9 million certificate tests and found that 1 in 250 TLS connections are proxied. The majority of these proxies appear to be benign, but we identified over 1,000 cases where three malware products were using this technology maliciously. We also found numerous instances of negligent, duplicitous, and suspicious behavior, some of which degrade security for users without their knowledge. Distinguishing between these types of practices is challenging, indicating a need for greater transparency and user awareness.

## 1. Introduction
Secure communication on the Internet relies primarily on digital certificates signed by certificate authorities (CAs) and intermediate authorities. This validation system is being compromised by the use of TLS proxies, which can act as a man-in-the-middle (MitM) for TLS connections [3]. A TLS proxy can issue a substitute certificate for any site the user visits, so that the user establishes an encrypted connection to the proxy rather than the desired web site. The proxy can then decrypt and monitor or modify all user traffic before passing it along via a second encrypted channel to the desired web site. While TLS proxies are used for legitimate purposes, such as blocking malware, they can also be used by malicious entities to compromise the privacy or security of end users. Isolated attacks have been observed in Iran [1] and Syria [7]. The most dangerous aspect of TLS proxies is that the user is unaware that encrypted traffic is being intercepted; browser software still shows a lock icon during such sessions. Thus, TLS proxies are controversial because they mislead users and compromise the end-to-end security promises made by TLS.

Detecting the presence and prevalence of TLS proxies is a challenging measurement problem. To detect a proxy, we must compare the certificate a client (e.g., a web browser) obtains with the valid certificate presented by the server. A mismatch indicates that a proxy, either benign or malicious, is intercepting the client’s traffic to that particular server. To determine the prevalence of TLS proxies, we must repeat this measurement on as many client systems as possible.

Two recent studies have found some evidence for TLS proxies by measuring certificates received by clients. Huang et al. measured the prevalence of TLS proxies intercepting traffic from clients connecting to Facebook [9], finding that 1 in 500 TLS connections are proxied, mostly by corporate Internet filters and personal antivirus software. Additionally, 1,112 connections were found to be intercepted by malware. Because this study uses Flash to detect a certificate mismatch, it does not detect proxies affecting most mobile devices. The Netalyzer project measured certificates received by Android apps, assessing 15,000 sessions and identifying just one case of a TLS proxy running in an analytics app [22]. Though this is a very low rate of prevalence (30 times less than Huang’s study), the app was found to whitelist several sites, including Facebook. This indicates that measurements of proxies should examine low-profile sites that are unlikely to be whitelisted.

To measure the prevalence of proxies, we use a Flash app deployed with a Google AdWords campaign. Like Huang, our measurements use Flash to detect a certificate mismatch without any user interaction. However, the deployment via AdWords offers some advantages. First, we can actively measure clients based on how much money we spend on the advertisement, enabling us to collect up to 12 million measurements in one week by spending $750 per day. Second, we can target our measurements toward a server that ordinarily does not receive significant traffic, allowing us to detect proxies that may intentionally whitelist popular sites like Facebook to avoid detection.

Using the AdWords campaign, we tested 2.9 million connections for substitute certificates. Our findings are as follows:
- We found 11,764 proxied connections out of 2.9 million total measurements (0.41% or approximately 1/250 of all connections) spanning 142 countries. This rate is double that reported by Huang, providing evidence that some proxies may use whitelisting. Most substitute certificates claim to be from benign TLS proxies, with 70.87% claiming to be generated by firewall software and 12.66% claiming to be generated by a corporate network.
- We found over 2,000 instances of negligent and malicious behavior. Our analysis of one parental filter found it masks forged certificates, allowing an attacker to easily perform a MitM attack against the firewall’s users. Additionally, we found three malware products affecting over 1,000 connections that install a new root certificate and act as a TLS proxy to dynamically insert advertisements on secure sites. We also found evidence that spammers are using TLS proxies in their products. Numerous other suspicious circumstances were found in substitute certificates, such as a null Issuer Organization, falsified certificate authority signatures, and downgraded public key sizes.

## 2. Background
To validate the identity of a website such as Amazon, the web browser relies on certificate authorities (CAs), which digitally sign certificates vouching for the identity of the web server. When the browser initiates a TLS connection with a server, it retrieves the server’s certificate and verifies its validity before exchanging encrypted traffic.

Web browsers authenticate a site by validating a chain of digital signatures from the site’s certificate back to one of a set of trusted root certificates. These certificates comprise the “root store” and are typically bundled with the operating system or browser. For example, the certificate for www.google.com is signed by the Google Internet Authority G2, an intermediate certificate authority run by Google. This certificate is in turn signed by GeoTrust Global CA, a certificate authority whose certificate is located in the root store of the browser or operating system. A substitute certificate’s signature should not be able to be traced back to a root store certificate and should be rejected.

This system can be attacked by a TLS proxy inserting itself as a man-in-the-middle between the browser and the web server. As shown in Figure 1, when the browser tries to open a secure connection to the web server, this connection is instead intercepted by the proxy. The proxy provides a falsified, substitute certificate to the browser, impersonating the original website. For this to work, the proxy must control a substitute certificate for the original website that validates against the root store of the user. This can be accomplished in various ways, both benign and malicious.

Benign methods to provide valid substitute certificates include:
- Using enterprise software to supply certificates for the root store of all computers in an organization.
- Creating a software image using new root certificates.
- Installing a new root certificate with software such as a personal firewall.
These methods are generally used for benevolent reasons, such as blocking malware and viruses, providing intrusion detection, or protecting intellectual property.

More nefarious methods include:
- Malware adding new root certificates when installed inadvertently by the user.
- Rogue certificate authorities issuing any certificate they want.
- Compromised and negligent certificate authorities allowing attackers to issue fraudulent certificates [6].
- Governments coercing authorities into granting them substitute certificates.

## 3. Measurement Tool
We developed a tool to measure the prevalence of TLS proxies using existing, widely-deployed technologies. The tool runs silently from the user's perspective, requiring no user action to install or run it.

### 3.1 Design
Our tool works as shown in Figure 2. The client browser connects to an ad server where the Flash application is hosted. The application is embedded in an advertisement, which is downloaded and automatically run by the browser. The tool sends a ClientHello message to the Web Server to initiate a TLS handshake. It then records the ServerHello and Certificate messages received in response and terminates the handshake. The retrieved certificates are forwarded to the Database Server for verification.

To measure a TLS proxy, the Web Server must host a simple “socket policy file.” For security reasons, Flash 9.0 and above require that applications attempting to establish a TCP connection with a remote host first obtain permission from that host via this policy file. Our Web Server’s socket policy file is served on port 80, reducing the effect of captive portals, which often block traffic targeting ports other than those used by HTTP and HTTPS (e.g., airport public access WiFi).

### 3.2 Implementation
To implement our tool, it was necessary to retrieve the certificate used during a TLS handshake. Ideally, we would use JavaScript or HTML5 to retrieve the certificate used as part of a current TLS connection, but there is no API available for this. Firefox allows a plugin to request the certificate, but plugins require manual client installation. Therefore, we established a plain TCP connection with the target server and initiated a TLS handshake. Unfortunately, the ability to use a plain TCP connection rules out the use of HTML5 WebSockets.

Due to these constraints, we opted to use the Adobe Flash platform. We implemented our tool in ActionScript using only libraries supported by the Flash 9.0 runtime, due to its nearly complete market penetration relative to newer versions. Using the Socket API provided by Flash 9.0, we implemented functionality required to perform a partial TLS handshake. After receiving the full Certificate message from the Web Server, the handshake is aborted, and the connection is closed. The Flash application records and parses all certificates received from the Certificate message (as some hosts offer certificate chains) and stores them locally until it parses the final one. All certificate data, in PEM format, is concatenated and then sent as an HTTP POST request to the Database Server for analysis.

Code for the measurement tool and collected datasets will be available for download at https://tlsresearch.byu.edu.

### 3.3 Limitations
Our tool is unable to measure TLS proxies being used against most mobile devices. An overwhelming majority of mobile devices do not support Flash, limiting our ability to detect TLS proxies on these platforms.

## 4. Google AdWords Campaign
To achieve rapid and widespread deployment of our measurement tool, we leveraged the Google AdWords platform. This strategy for using an advertising campaign to conduct an end-user measurement study has previously been used to study CSRF attacks [2], DNS rebinding attacks [11], and DNSSEC deployment [10, 13]. Our study is the first to use this method to measure the deployment of TLS proxies.

### 4.1 Deployment
The deployment of the measurement tool is given in Figure 2. Responsibilities for deployment were delegated to the Google AdWords platform, while all reports from the tool were sent back to a Database Server we controlled. To accommodate placement in advertisements, our measurement tool was modified to contain a visible canvas on which we placed a simplistic advertisement for our research lab. Our measurement tool was run as soon as the user’s browser loaded the advertisement, requiring no interaction from the users.

For our ad campaign, we used the CPM (cost-per-impression) bidding model, which maximizes the number of unique clients presented with our ad. We set the Max. CPM to $10 USD. To reach a global audience, we indicated that our ad should be served to all locations and languages. Additionally, since ads are shown only on websites that match a set of designated keywords, we selected our keywords based on phrases that were currently trending globally on Google Trends. We set our ad to show uniformly throughout the day to collect data from users in various locations and situations (e.g., home, commuting, work).

Along with the certificate, we recorded the IP address of the client tested. This IP address was then used to query the MaxMind GeoLite [17] database to gather geolocation information.

Our Google AdWords advertising campaign ran from January 6, 2014, to January 30, 2014. During the first 17 days of the study, we varied the amount of money allocated to the ad campaign, but for the last week, we kept it at $500/day. In this study, we only gathered certificate data for our own website, tlsresearch.byu.edu.

## 5. Conclusion
TLS proxies are a double-edged sword, serving both benign and malicious purposes. Our study highlights the need for greater transparency and user awareness to distinguish between these practices. By leveraging a Google AdWords campaign, we were able to measure the prevalence of TLS proxies and identify instances of negligent and malicious behavior. Future work should focus on developing more robust methods to detect and mitigate the risks associated with TLS proxies.

---

**References:**
- [1] Reference to Iran
- [2] Reference to CSRF attacks
- [3] Reference to TLS proxies
- [6] Reference to compromised CAs
- [7] Reference to Syria
- [9] Reference to Huang et al.
- [10] Reference to DNSSEC deployment
- [11] Reference to DNS rebinding attacks
- [13] Reference to DNSSEC deployment
- [17] Reference to MaxMind GeoLite
- [22] Reference to Netalyzer project

**Permissions:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

**Conference:**
IMC 2016, November 14 - 16, 2016, Santa Monica, CA, USA

**Copyright:**
© 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM. ISBN 978-1-4503-4526-2/16/11. . . $15.00

**DOI:**
http://dx.doi.org/10.1145/2987443.2987488