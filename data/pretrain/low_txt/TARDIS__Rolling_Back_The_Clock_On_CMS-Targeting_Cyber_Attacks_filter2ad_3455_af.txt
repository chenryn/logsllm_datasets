### Inside a Hidden Directory: A Case Study

On March 6, the attackers injected a full-fledged graphical user interface (GUI) backdoor into a hidden directory, granting them complete control over the website, as depicted in Figure 7. These malicious files remained undetected for over a month. On April 13, 2019, TARDIS detected that the attackers had deleted the earlier injected malware to conceal their activities. The timeline provided by TARDIS revealed that the multi-stage attack persisted for three months, with a compromise window from February 23 to April 13, 2019, during which the website was vulnerable. Outside this window, the website could be safely rolled back.

Manual investigation uncovered that the attackers exploited CVE-2018-7600, a vulnerability related to insufficient input sanitation on Form API (FAPI) AJAX requests. Notably, this vulnerability was not patched until a month after the attack began.

**Figure 7: GUI Backdoor Injected in a Drupal Website**

### VII. Limitations

The accuracy of inferring the provenance of attacks is constrained by the granularity of the backups. The current industry standard is to perform nightly backups [19]–[23]. While this frequency is sufficient for reconstructing the timeline of an attack, it may not capture fast-paced attacks that occur between two consecutive backups. In such cases, TARDIS would only have visibility into the files at the time of the backups. Essentially, TARDIS allows website owners to balance the frequency of backups (to improve TARDIS's accuracy) against the need for deeper manual inspection when an attack occurs.

As multi-stage attacks evolve, TARDIS's spatial metric identification rules may need to be updated. However, TARDIS's modular nature makes it straightforward to add new spatial metrics. Furthermore, TARDIS's methodology of temporal correlation of spatial metrics is designed to be agnostic to individual metrics and is based on the invariants of the phases through which multi-stage attacks progress. This approach ensures that TARDIS remains effective over time.

### VIII. Related Work

#### Large-Scale Study of Web Attacks
Several studies have used high-interaction honeypots to understand web attacks on a large scale [26], [34], [35]. Some techniques have also assessed the impact of web application compromises by studying the role of hosting providers and understanding the landscape through large-scale notification campaigns [37]. Similar to TARDIS, Canali et al. [26] found that attackers often drop large volumes of files on the web server. While these techniques focused on generic web applications, this research specifically examined the spread of multi-stage attacks on CMS-based websites, particularly within production environments. Our study and TARDIS were designed to investigate such multi-stage attacks using only nightly website backups.

#### Causality Modeling
Significant advances have been made in identifying the provenance of an attack by monitoring system behavior to reconstruct the chain of events leading to the attack [4], [7], [12], [13], [17], [38], [39]. Most works, such as Holmes [3] and Sleuth [16], are built on OS audit data logs for real-time analytics. However, provenance tracking techniques require significant instrumentation and are rarely deployed by CMS hosting companies. TARDIS leverages the industry-standard practice of nightly backups to track multi-stage attack progression via temporal correlation of spatial metrics and outlier detection.

#### Web Application Security
Recent research has focused on preemptively securing websites against specific types of attacks, such as ad injection [40]–[42], survey scams [43], cross-site scripting [45]–[48], PHP code injection [49], [50], SQL injection [48], [51]–[53], and file inclusion attacks [54], [55]. These techniques typically focus on individual layers of web applications. However, since CMSs contain code across multiple layers and are marketed to less-technical website operators, attack-vector-specific solutions are not commonly deployed. TARDIS, being attack-vector agnostic, enables the investigation of a compromised CMS post-attack.

### IX. Conclusion

This paper presents a systematic study of the CMS attack landscape across 306,830 unique production websites using TARDIS. By targeting the problem of investigating compromises in CMS-based websites using only readily available nightly backups, TARDIS provides a novel provenance inference technique that reconstructs the attack phases, enabling rapid recovery from an attack. Using the temporal correlation of spatial metrics representing each snapshot, TARDIS recovers the compromise window and the progression of attack phases. TARDIS identified 20,591 websites that were victims of long-lived multi-stage attacks and demonstrated high accuracy in revealing attacks in CMS-based websites, regardless of the underlying CMS. We are working with CodeGuard to inform website owners and remediate the identified attacks.

### X. Acknowledgment

The authors would like to thank the anonymous reviewers for their constructive comments and feedback. We also thank Professor Manuel Egele for his guidance while shepherding this paper, and our collaborators at CodeGuard for their insightful suggestions throughout this research. This work was supported, in part, by NSF under Award 1916550. Any opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of our sponsors or collaborators.

### References

[1] W3Techs - Usage of content management systems for websites, https://w3techs.com/technologies/overview/content_management/all, [Accessed: 2019-01-16].

[2] Popular CMS by Market Share, https://websitesetup.org/popular-cms/, [Accessed: 2019-06-30].

[3] S. M. Milajerdi, R. Gjomemo, B. Eshete, R. Sekar, and V. Venkatakrishnan, “HOLMES: Real-time APT detection through correlation of suspicious information flows,” in Proc. 40th IEEE S&P, San Francisco, CA, May 2019.

[4] S. Ma, J. Zhai, F. Wang, K. H. Lee, X. Zhang, and D. Xu, “MPI: Multiple perspective attack investigation with semantic aware execution partitioning,” in Proc. 26th USENIX Sec., Vancouver, BC, Canada, Aug. 2017.

[5] Y. Kwon, F. Wang, W. Wang, K. H. Lee, W.-C. Lee, S. Ma, X. Zhang, D. Xu, S. Jha, G. Ciocarlie, A. Gehani, and V. Yegneswaran, “MCI: Modeling-based causality attack investigation,” in Proc. 2018 NDSS, San Diego, CA, Feb. 2018.

[6] Y. Kwon, D. Kim, W. N. Sumner, K. Kim, B. Saltaformaggio, X. Zhang, and D. Xu, “LDX: Causality inference by lightweight dual execution,” in Proc. 21st ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Atlanta, GA, Apr. 2016.

[7] K. H. Lee, X. Zhang, and D. Xu, “High accuracy attack provenance via binary-based execution partition,” in Proc. 20th NDSS, San Diego, CA, Feb. 2013.

[8] K. H. Lee, X. Zhang, and D. Xu, “LogGC: Garbage collecting audit log,” in Proc. 20th ACM CCS, Berlin, Germany, Oct. 2013.

[9] S. Ma, K. H. Lee, C. H. Kim, J. Rhee, X. Zhang, and D. Xu, “Accurate, low cost and instrumentation-free security audit logging for Windows,” in Proc. 31st ACSAC, 2015.

[10] P. Vadrevu, J. Liu, B. Li, B. Rahbarinia, K. H. Lee, and R. Perdisci, “Enabling reconstruction of attacks on users via efficient browsing snapshots,” in Proc. 2017 NDSS, San Diego, CA, Feb. 2017.

[11] S. Ma, J. Zhai, Y. Kwon, K. H. Lee, X. Zhang, G. Ciocarlie, A. Gehani, V. Yegneswaran, D. Xu, and S. Jha, “Kernel-supported cost-effective audit logging for causality tracking,” in Proc. 2018 USENIX Annual Technical Conference (ATC), Boston, MA, Jul. 2018.

[12] S. Ma, X. Zhang, and D. Xu, “ProTracer: Towards practical provenance tracing by alternating between logging and tainting,” in Proc. 2016 NDSS, San Diego, CA, Feb. 2016.

[13] S. Sitaraman and S. Venkatesan, “Forensic analysis of file system intrusions using improved backtracking,” in Proc. 3rd IEEE International Workshop on Information Assurance, IEEE, College Park, MD, USA, Mar. 2005.

[14] K. Pei, Z. Gu, B. Saltaformaggio, S. Ma, F. Wang, Z. Zhang, L. Si, X. Zhang, and D. Xu, “HERCULE: Attack story reconstruction via community discovery on correlated log graph,” in Proc. 32nd ACSAC, 2016.

[15] F. Wang, Y. Kwon, S. Ma, X. Zhang, and D. Xu, “Lprov: Practical library-aware provenance tracing,” in Proc. 34th ACSAC, 2018.

[16] M. N. Hossain, S. M. Milajerdi, J. Wang, B. Eshete, R. Gjomemo, R. Sekar, S. D. Stoller, and V. Venkatakrishnan, “Sleuth: Real-time attack scenario reconstruction from COTS audit data,” in Proc. 26th USENIX Sec., Vancouver, BC, Canada, Aug. 2017.

[17] Y. Liu, M. Zhang, D. Li, K. Jee, Z. Li, Z. Wu, J. Rhee, and P. Mittal, “Towards a timely causality analysis for enterprise security,” in Proc. 2018 NDSS, San Diego, CA, Feb. 2018.

[18] HostGator.com LLC, https://www.hostgator.com, [Accessed: 2019-06-12].

[19] Dropmysite - Cloud Backups for Websites & Databases, https://www.dropmysite.com/, [Accessed: 2018-10-31].

[20] CodeGuard, https://www.codeguard.com/, [Accessed: 2019-01-20].

[21] GoDaddy, https://www.godaddy.com/web-security/website-backup, [Accessed: 2018-01-20].

[22] Sucuri, https://sucuri.net/website-backups/, [Accessed: 2018-10-31].

[23] iPage, https://www.ipage.com/web-backup, [Accessed: 2018-10-31].

[24] W. U. Hassan, S. Guo, D. Li, Z. Chen, K. Jee, Z. Li, and A. Bates, “Nodoze: Combatting threat alert fatigue with automated provenance triage,” in Proc. 2019 NDSS, San Diego, CA, Feb. 2018.

[25] New Research from Advanced Threat Analytics, https://www.prnewswire.com/news-releases/new-research-from-advanced-threat-analytics-finds-mssp-incident-responders-overwhelmed-by-false-positive-security-alerts-300596828.html, [Accessed: 2019-01-20].

[26] D. Canali and D. Balzarotti, “Behind the scenes of online attacks: An analysis of exploitation behaviors on the web,” in Proc. 20th NDSS, San Diego, CA, Feb. 2013.

[27] zxcvbn: Low-Budget Password Strength Estimation, https://github.com/dropbox/zxcvbn, [Accessed: 2019-05-28].

[28] D. C. Howell, “Median absolute deviation,” Wiley StatsRef: Statistics Reference Online, 2014.

[29] A. Koufakou, E. G. Ortiz, M. Georgiopoulos, G. C. Anagnostopoulos, and K. M. Reynolds, “A scalable and efficient outlier detection strategy for categorical data,” in 19th IEEE International Conference on Tools with Artificial Intelligence (ICTAI 2007), IEEE, vol. 2, 2007, pp. 210–217.

[30] What CMS Is This Site Using? https://whatcms.org/, [Accessed: 2019-06-26].

[31] CMS-Garden CMSScanner, https://github.com/CMS-Garden/cmsscanner, [Accessed: 2019-06-12].

[32] Pandas: Flexible and powerful data analysis and manipulation library for Python, https://github.com/pandas-dev/pandas, [Accessed: 2019-05-28].

[33] Drupal: CVE-2018-7600: Remote Code Execution - SA-CORE-2018-002, https://www.rapid7.com/db/vulnerabilities/drupal-cve-2018-7600, [Accessed: 2019-06-26].

[34] O. Starov, J. Dahse, S. S. Ahmad, T. Holz, and N. Nikiforakis, “No honor among thieves: A large-scale analysis of malicious web shells,” in Proc. 25th WWW, 2016.

[35] O. Catakoglu, M. Balduzzi, and D. Balzarotti, “Automatic extraction of indicators of compromise for web applications,” in Proc. 25th WWW, 2016.

[36] D. Canali, D. Balzarotti, and A. Francillon, “The role of web hosting providers in detecting compromised websites,” in Proc. 22nd WWW, Rio de Janeiro, Brazil, May 2013.

[37] B. Stock, G. Pellegrino, C. Rossow, M. Johns, and M. Backes, “Hey, you have a problem: On the feasibility of large-scale web vulnerability notification,” in Proc. 25th USENIX Sec., Austin, TX, Aug. 2016.

[38] S. T. King and P. M. Chen, “Backtracking intrusions,” in Proc. 19th ACM Symposium on Operating Systems Principles (SOSP), Bolton Landing, NY, Oct. 2003.

[39] K.-K. Muniswamy-Reddy, U. Braun, D. A. Holland, P. Macko, D. L. MacLean, D. W. Margo, M. I. Seltzer, and R. Smogor, “Layering in provenance systems,” in Proc. 2009 USENIX Annual Technical Conference (ATC), San Diego, CA, Jun. 2009.

[40] S. Arshad, A. Kharraz, and W. Robertson, “Identifying extension-based ad injection via fine-grained web content provenance,” in Proc. 19th RAID, Evry, France, Sep. 2016.

[41] K. Thomas, E. Bursztein, C. Grier, G. Ho, N. Jagpal, A. Kapravelos, D. McCoy, A. Nappa, V. Paxson, P. Pearce, N. Provos, and M. Abu Rajab, “Ad injection at scale: advertisement modifications,” in Proc. 36th IEEE S&P, San Jose, CA, May 2015.

[42] X. Xing, W. Meng, B. Lee, U. Weinsberg, A. Sheth, R. Perdisci, and W. Lee, “Understanding malvertising through ad-injecting browser extensions,” in Proc. 24th WWW, 2015.

[43] A. Kharraz, W. Robertson, and E. Kirda, “Surveylance: Automatically detecting online survey scams,” in Proc. 39th IEEE S&P, San Francisco, CA, May 2018.

[44] J. W. Clark and D. McCoy, “There are no free iPads: An analysis of survey scams as a business,” in Proc. 6th USENIX LEET, Washington, D.C., United States, Aug. 2013.

[45] W. Melicher, A. Das, M. Sharif, L. Bauer, and L. Jia, “Riding out DOMsday: Toward detecting and preventing DOM cross-site scripting,” in Proc. 2018 NDSS, San Diego, CA, Feb. 2018.

[46] B. Stock, S. Lekies, T. Mueller, P. Spiegel, and M. Johns, “Precise client-side protection against DOM-based cross-site scripting,” in Proc. 2014 NDSS, San Diego, CA, Feb. 2014.

[47] G. Wassermann and Z. Su, “Static detection of cross-site scripting vulnerabilities,” in Proc. 30th International Conference on Software Engineering (ICSE), Leipzig, Germany, May 2008.

[48] M. Backes, K. Rieck, M. Skoruppa, B. Stock, and F. Yamaguchi, “Efficient and flexible discovery of PHP application vulnerabilities,” in European Symposium on Security and Privacy (EuroS&P), IEEE, Paris, France, Apr. 2017.

[49] D. R. Sahu and D. S. Tomar, “DNS pharming through PHP injection: Attack scenario and investigation,” IJ Computer Network and Information Security, vol. 4, pp. 21–28, 2015.

[50] V. Yerram and G. V. R. Reddy, “A solution to PHP code injection attacks and web vulnerabilities,” in Proc. 2014.

[51] Z. S. Alwan and M. F. Younis, “Detection and prevention of SQL injection attack: A survey,” International Journal of Computer Science and Mobile Computing, vol. 6, no. 8, pp. 5–17, 2017.

[52] N. Singh, M. Dayal, R. Raw, and S. Kumar, “SQL injection: Types, methodology, attack queries, and prevention,” in Proc. 3rd Computing for Sustainable Global Development (INDIACom), IEEE, New Delhi, India, Mar. 2016.

[53] A. Pramod, A. Ghosh, A. Mohan, M. Shrivastava, and R. Shettar, “SQLI detection system for a safer web application,” in Proc. 2015 IEEE International Advance Computing Conference, IEEE, Bangalore, India, Jun. 2015.

[54] H. F. G. Robledo, “Types of hosts on a remote file inclusion (RFI) botnet,” in Proc. Electronics, Robotics and Automotive Mechanics Conference, Jun. 2008.

[55] O. Katz, “Detecting remote file inclusion attacks,” White Paper. Breach Security Inc., May 2009.