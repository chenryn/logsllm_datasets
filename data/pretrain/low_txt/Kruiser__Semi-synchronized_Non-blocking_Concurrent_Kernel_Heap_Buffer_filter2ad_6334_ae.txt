Over the past few decades, extensive research has been conducted in the area of buffer overflow countermeasures. We have categorized these existing countermeasures into seven primary types: (1) buffer bounds checking [60, 20, 4, 27, 38, 47, 2, 17, 56, 5], (2) canary checking [14, 26, 45], (3) return address shadow stack or stack splitting [53, 12, 43, 22, 64], (4) non-executable memory [55, 51], (5) non-accessible memory [24, 59, 21], (6) randomization and obfuscation [9, 55, 13, 7], and (7) execution monitoring [31, 1, 11, 15, 48]. However, few of these countermeasures are suitable for high-performance kernel heap buffer overflow monitoring, and none have been deployed in production systems.

Kruiser is a solution that falls under the category of canary checking. The concept of canaries was first introduced by StackGuard [14], which places a canary word before the return address on the stack to detect stack-smashing attacks. If a buffer overflow overwrites the return address, it will first corrupt the canary value, thus signaling an attack. This approach has been integrated into GCC and Visual Studio. Robertson et al. [45] extended canary checking to protect heap buffers. In their method, when a heap buffer is overrun, the canary of the adjacent chunk is corrupted. However, this corruption is only detected when the adjacent chunk is coalesced, allocated, or deallocated, making detection dependent on the control flow. Kruiser, on the other hand, enforces constant concurrent canary checking, eliminating this limitation. Additionally, Kruiser introduces a secure canary concept, which is an innovative feature.

Compared to the previous work, Cruiser [65], which proposed concurrent buffer overflow monitoring in user space using custom lock-free data structures, Kruiser leverages the characteristics of kernel heap management. Unlike Cruiser, which hooks into every heap buffer allocation and deallocation, Kruiser intercepts the less frequent operations that switch pages into and out of the heap page pool. This allows Kruiser to use a fixed-sized array data structure instead of lock-free data structures to maintain metadata, leading to different monitoring algorithms. Furthermore, Kruiser's hybrid monitoring scheme differs significantly from user-space monitoring.

When compared to methods based on probabilistic memory safety, such as DieHard [8] and DieHarder [40], Kruiser imposes negligible performance overhead. While DieHard and DieHarder have only been demonstrated for user-space programs, Kruiser focuses on the kernel heap. Our previous work, Cruiser [65], provides a detailed performance comparison with DieHarder using the SPEC CPU2006 benchmark. Additionally, DieHard and DieHarder consume more memory than Kruiser, which could be problematic in a kernel environment.

### 9.2 Virtual Machine Introspection

Garfinkel and Rosenblum [23] first proposed the idea of performing intrusion detection from outside the monitored system. Since then, out-of-VM introspection has been applied to control-flow integrity checking [42, 49], malware prevention, detection, and analysis [32, 29, 18, 41, 33, 10, 44, 34, 25, 19], and attack replaying [30]. These approaches monitor static memory areas (e.g., kernel code, Interrupt Description Table), interpose specific events like page faults, trace system behaviors, or detect violations of invariants between data structures. Given the volatile nature of heap buffers, these methods are not feasible for kernel heap buffer overflow monitoring. For example, it is impractical to interpose every memory write on the heap. Some approaches detect buffer overflow attacks as a side effect by identifying corrupted pointers or control flows but cannot handle non-pointer and non-control data manipulation on heap buffer objects. Methods like kernel memory mapping and analysis can be misled by buffer overflow attacks or perform better without heap corruption. Kruiser complements these approaches by providing lightweight heap buffer overflow detection.

In contrast to out-of-VM monitoring, SIM [50] places the monitor back into the VM, enabling secure in-VM monitoring by providing discriminative memory views for the monitored system and the monitor. Kruiser uses this technique to protect heap metadata, while the monitor process still runs out-of-VM to achieve parallel monitoring, leveraging multiprocessor architecture. This hybrid scheme ensures secure and efficient monitoring.

OSck [25] also performs kernel space cruising for rootkit detection. However, OSck does not synchronize the running kernel and the verification process, requiring the system to be suspended when an anomaly is detected to avoid false positives. Kruiser, on the other hand, does not need to stop the system for detection. Additionally, OSck does not check generic buffers allocated using kmalloc, which are common attack targets, while Kruiser monitors the entire kernel heap.

### 10 Conclusion

We have presented KRUISER, a semi-synchronized concurrent kernel heap monitor that continuously cruises over heap buffers to detect overflows in a non-blocking manner. Unlike traditional techniques that monitor volatile memory regions with security enforcement inlined into normal functionality (interposition) or by analyzing memory snapshots, Kruiser performs constant monitoring in parallel with the monitored VM on live memory, avoiding false positives. The hybrid VM monitoring scheme provides high efficiency without compromising security guarantees. Attacks are guaranteed to be detected within one cruising cycle. Our evaluation shows that Kruiser imposes negligible performance overhead on the system running SPEC CPU2006 and a 7.9% throughput reduction on Apache. The concurrent kernel cruising approach leverages increasingly popular multi-core architectures, demonstrating its efficiency and scalability, making it suitable for practical deployment.

### Acknowledgements

We would like to thank Xi Xiong for his valuable comments during the system design and implementation, and also thank our shepherd Xuxian Jiang and the anonymous reviewers for their feedback, which helped shape the final version of this paper. This work was partially supported by AFOSR FA9550-07-1-0527 (MURI), ARO W911NF-09-1-0525 (MURI), NSF CNS-0905131, and AFRL FA8750-08-C-0137. Donghai Tian was supported by the China Scholarship Council (No. 2009603047).

### References

[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-flow integrity. In CCS '05, pages 340–353.
[2] P. Akritidis, M. Costa, M. Castro, and S. Hand. Baggy bounds checking: an efficient and backwards-compatible defense against out-of-bounds errors. In Usenix Security '09, pages 51–66.
[3] P. Argyroudis and D. Glynos. Protecting the core: Kernel exploitation mitigations. In Black Hat Europe '11.
[6] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and N. C. Skalsky. HyperSentry: enabling stealthy in-context measurement of hypervisor integrity. In Proceedings of the 17th ACM conference on Computer and communications security, CCS '10, pages 38–49, New York, NY, USA, 2010. ACM.
[7] E. G. Barrantes, D. H. Ackley, T. S. Palmer, D. Stefanovic, and D. D. Zovi. Randomized instruction set emulation to disrupt binary code injection attacks. In CCS '03, pages 281–289.
[8] E. D. Berger and B. G. Zorn. DieHard: probabilistic memory safety for unsafe languages. In Proceedings of the 2006 ACM SIGPLAN conference on Programming language design and implementation, PLDI '06, pages 158–168, New York, NY, USA, 2006. ACM.
[4] T. M. Austin, S. E. Breach, and G. S. Sohi. Efficient detection of all pointer and array access errors. In PLDI '04, pages 290–301.
[5] K. Avijit and P. Gupta. Tied, libsafeplus, tools for runtime buffer overflow protection. In Usenix Security '04, pages 4–4.
[9] E. Bhatkar, D. C. Duvarney, and R. Sekar. Address obfuscation: an efficient approach to combat a broad range of memory error exploits. In Usenix Security '03, pages 105–120.
[10] M. Carbone, W. Cui, L. Lu, W. Lee, M. Peinado, and X. Jiang. Mapping kernel objects to enable systematic integrity checking. CCS '09, pages 555–565.
[11] M. Castro, M. Costa, and T. Harris. Securing software by enforcing data-flow integrity. In OSDI '06, pages 147–160.
[12] T. Chiueh and F. Hsu. RAD: A compile-time solution to buffer overflow attacks. In ICDCS '01, pages 409–417.
[13] C. Cowan and S. Beattie. PointGuard: protecting pointers from buffer overflow vulnerabilities. In Usenix Security '03, pages 91–104.
[14] C. Cowan and C. Pu. StackGuard: automatic adaptive detection and prevention of buffer-overflow attacks. In Usenix Security '98, pages 63–78, January 1998.
[15] B. Cox, D. Evans, A. Filipi, J. Rowanhill, W. Hu, J. Davidson, J. Knight, A. Nguyen-Tuong, and J. Hiser. N-variant systems: a secretless framework for security through diversity. In Usenix Security '06, pages 105–120.
[16] M. Dalton, H. Kannan, and C. Kozyrakis. Real-world buffer overflow protection for userspace & kernelspace. In Usenix Security '08, pages 395–410.
[17] E. D. Berger. HeapShield: Library-based heap overflow protection for free. Tech. report, Univ. of Mass. Amherst, 2006.
[18] A. Dinaburg, P. Royal, M. Sharif, and W. Lee. Ether: malware analysis via hardware virtualization extensions. CCS '08, pages 51–62.
[19] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Griffin, and W. Lee. Virtuoso: Narrowing the semantic gap in virtual machine introspection. Oakland '11.
[20] N. Dor, M. Rodeh, and M. Sagiv. CSSV: towards a realistic tool for statically detecting all buffer overflows in C. In PLDI '03, pages 155–167, June 2003.
[21] Electric Fence debugger. http://directory.fsf.org/project/ElectricFence/.
[22] M. Frantzen and M. Shuey. StackGhost: Hardware facilitated stack protection. In Usenix Security '01, pages 55–66.
[23] T. Garfinkel and M. Rosenblum. A virtual machine introspection based architecture for intrusion detection. In NDSS '03, pages 191–206.
[24] R. Hastings and B. Joyce. Purify: Fast detection of memory leaks and access errors. In the Winter 1992 Usenix Conference, pages 125–136.
[25] O. S. Hofmann, A. M. Dunn, S. Kim, I. Roy, and E. Witchel. Ensuring operating system kernel integrity with OSck. ASPLOS '11, pages 279–290.
[26] IBM. ProPolice detector. http://www.trl.ibm.com/projects/security/ssp/.
[27] T. Jim, J. G. Morrisett, D. Grossman, M. W. Hicks, J. Cheney, and Y. Wang. Cyclone: A safe dialect of C. In Usenix ATC '02, pages 275–288, June 2002.
[28] R. W. M. Jones and P. H. J. Kelly. Backwards-compatible bounds checking for arrays and pointers in C programs. In the International Workshop on Automatic Debugging, 1997.
[29] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. Antfarm: tracking processes in a virtual machine environment. Usenix ATC '06.
[30] A. Joshi, S. T. King, G. W. Dunlap, and P. M. Chen. Detecting past and present intrusions through vulnerability-specific predicates. SOSP '05, pages 91–104.
[31] V. Kiriansky, D. Bruening, and S. P. Amarasinghe. Secure execution via program shepherding. In Usenix Security '02, pages 191–206.
[32] K. Kourai and S. Chiba. HyperSpector: virtual distributed monitoring environments for secure intrusion detection. VEE '05, pages 197–207.
[33] A. Lanzi, M. I. Sharif, and W. Lee. K-Tracer: A system for extracting kernel malware behavior. In NDSS '09.
[34] Z. Lin, J. Rhee, X. Zhang, D. Xu, and X. Jiang. SigGraph: Brute force scanning of kernel data structure instances using graph-based signatures. NDSS '11.
[35] T. Mandt. Kernel pool exploitation on Windows. https://media.blackhat.com/bh-dc-11/Mandt/BlackHat DC 2011 Mandt kernelpool-wp.pdf. 2011.
[36] P. E. Mckenney. Memory barriers: a hardware view for software hackers, 2009.
[37] D. Mosberger. Memory consistency models. Operating Systems Review, 17(1):18–26, January 1993.
[38] G. C. Necula, J. Condit, M. Harren, S. McPeak, and W. Weimer. CCured: type-safe retrofitting of legacy software. ACM Trans. Program. Lang. Syst., 27(3):477–526, 2005.
[39] NIST. National Vulnerability Database. http://nvd.nist.gov/.
[40] G. Novark and E. D. Berger. DieHarder: securing the heap. In Proceedings of the 17th ACM conference on Computer and communications security, CCS '10, pages 573–584, New York, NY, USA, 2010. ACM.
[41] B. D. Payne, M. Carbone, M. Sharif, and W. Lee. Lares: An architecture for secure active monitoring using virtualization. Oakland '08, pages 233–247.
[42] N. L. Petroni, Jr. and M. Hicks. Automated detection of persistent kernel control-flow attacks. CCS '07, pages 103–115.
[43] M. Prasad and T. Chiueh. A binary rewriting defense against stack-based buffer overflow attacks. In Usenix ATC '03, pages 211–224.
[44] J. Rhee, R. Riley, D. Xu, and X. Jiang. Kernel malware analysis with un-tampered and temporal views of dynamic kernel memory. RAID'10, pages 178–197.
[45] W. Robertson, C. Kruegel, D. Mutz, and F. Valeur. Runtime detection of heap-based overflows. In LISA '03, pages 51–60.
[46] D. Roethlisberge. Cardman Omnikey 4040 Linux driver buffer overflow. http://www.securiteam.com/unixfocus/5CP0D0AKUA.html. 2007.
[47] O. Ruwase and M. S. Lam. A practical dynamic buffer overflow detector. In NDSS '04, pages 159–169.
[48] B. Salamat, T. Jackson, A. Gal, and M. Franz. Orchestra: intrusion detection using parallel execution and monitoring of program variants in user-space. In EuroSys '09, pages 33–46.
[49] A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: a tiny hypervisor to provide lifetime kernel code integrity for commodity OSes. SOSP '07, pages 335–350.
[50] M. I. Sharif, W. Lee, W. Cui, and A. Lanzi. Secure in-VM monitoring using hardware virtualization. CCS '09, pages 477–487.
[51] Solar Designer. Non-executable user stack. http://www.openwall.com/linux/. 1997.
[52] sqrkkyu and twzi. Attacking the core: Kernel exploiting notes. http://phrack.org/issues.html. 2007.
[53] StackShield. http://www.angelfire.com/sk/stackshield/. 2000.
[54] C. S. Technologies. IPv6 mbuf overflow, OpenBSD kernel remote buffer overflow. http://www.securityfocus.com/archive/1/462728/30/0/threaded. 2007.
[55] The PaX project. http://pax.grsecurity.net/.
[56] T. K. Tsai and N. Singh. Libsafe: Transparent system-wide protection against buffer overflow attacks. In DSN '02, pages 541–541.
[57] US-CERT/NIST. CVE-2008-1673. http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2008-1673.
[58] US-CERT/NIST. CVE-2009-2407. http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2009-2407.
[59] Valgrind. http://valgrind.org/.
[60] D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken. A first step towards automated detection of buffer overrun vulnerabilities. In NDSS'00, pages 3–17.
[61] J. Wang, A. Stavrou, and A. Ghosh. HyperCheck: a hardware-assisted integrity monitor. In Proceedings of the 13th international conference on Recent advances in intrusion detection, RAID'10, pages 158–177, Berlin, Heidelberg, 2010. Springer-Verlag.
[62] Z. Wang and X. Jiang. HyperSafe: A lightweight approach to provide lifetime hypervisor control-flow integrity. In Proceedings of the 2010 IEEE Symposium on Security and Privacy, SP '10, pages 380–395, Washington, DC, USA, 2010. IEEE Computer Society.
[63] Wikipedia. RC4. http://en.wikipedia.org/wiki/RC4.
[64] J. Xu, Z. Kalbarczyk, S. Patel, and R. Iyer. Architecture support for defending against buffer overflow attacks. In Workshop Evaluating & Architecting Sys. Depend., 2002.
[65] Q. Zeng, D. Wu, and P. Liu. Cruiser: Concurrent heap buffer overflow monitoring using lock-free data structures. In Proceedings of the 32nd ACM SIGPLAN conference on Programming language design and implementation, PLDI '11, pages 367–377, New York, NY, USA, 2011. ACM.