### Byzantine Tolerance and Fault Tolerance Trade-offs

Given that \( q_c \geq q_r \), we have \( B \leq 1 - q_r \). Consequently, the Byzantine tolerance for liveness decreases. For learners who believe in synchrony, the total fault tolerance for safety is less than \( q_r \), and the Byzantine fault tolerance for liveness is at least \( 1 - q_r \). In both scenarios, the choice of \( q_r \) represents a trade-off between safety and liveness.

### Separating Alive-but-Corrupt Resilience from Diversity

So far, we have presented Flexible BFT techniques and protocols that simultaneously support diverse learner support and stronger alive-but-corrupt (a-b-c) fault tolerance. We believe both properties are desirable and they reinforce each other. However, it is important to note that these two properties can be provided independently.

Providing stronger fault tolerance in the a-b-c model within a classic uniform setting is relatively straightforward. For example, under partial-synchrony, one can simply use a larger quorum in PBFT (without the \( q_r / q \) replica/learner quorum separation). However, a higher total (a-b-c plus Byzantine) tolerance comes at the cost of lower Byzantine tolerance. In a uniform setting, this means all learners must sacrifice some Byzantine tolerance. In the diverse setting, Flexible BFT allows learners to choose the fault assumption they believe in, and a learner can opt for the classic Byzantine fault model.

Conversely, if one aims to support diverse learners in the classic Byzantine fault model (with no a-b-c faults), the "dimension of diversity" is reduced. An example is the network speed replica protocol in Section 3, which supports learners with different synchrony bounds. This protocol can be extended to support learners with a uniform partial-synchrony assumption. Learners with a partial-synchrony assumption are uniform because we have not identified any type of "diversity" outside a-b-c faults for them.

### Related Work

Most BFT protocols are designed with a uniform assumption about the system. The literature on BFT consensus is extensive and largely beyond the scope of this review; we refer the reader to standard textbooks in distributed computing [6, 26].

#### Resilience

Figure 7 compares the resilience of Flexible BFT with some existing consensus protocols. The x-axis represents the Byzantine resilience threshold, and the y-axis shows the total resilience against corruption under the a-b-c fault mode. The three different colors (red, green, blue) represent three possible instantiations of Flexible BFT at different \( q_r \) values. Each point in the figure represents an abstract "learner" belief. For the partial synchrony model, learner beliefs form lines, and for synchronous settings, learners' beliefs are individual circles. The locus of points on a given color represents all learner assumptions supported for a corresponding \( q_r \), representing the diversity of learners supported.

The figure depicts state-of-the-art resilience combinations by existing consensus solutions via uncolored shapes, +, ×, △, ▲, ♢, ♦. Partially synchronous protocols [8, 11, 36] that tolerate one-third Byzantine faults can all be represented by the ‘+’ symbol at (1/3, 1/3). Similarly, synchronous protocols [1, 3, 18] that tolerate one-half Byzantine faults are represented by the ‘×’ symbol at (1/2, 1/2). It is worth noting that some of these works employ two commit rules that differ in the number of votes or synchrony [4, 22, 29, 32]. For instance, Thunderella and Sync HotStuff optimistically commit in an asynchronous fashion based on quorums of size ≥ 3/4, as represented by a hollow triangle at (1/4, 1/2). Similarly, FaB [29], Zyzzyva [22], and SBFT [17] optimistically commit when they receive all votes but wait for two rounds of votes otherwise. These are represented by two points in the figure. Despite the two commit rules, these protocols do not have learner diversity; all parties involved (replicas and learners) make the same assumptions and reach the same commit decisions.

#### Diverse Learner Beliefs

A simple notion of learner diversity exists in Bitcoin’s probabilistic commit rule. One learner may consider a transaction committed after six confirmations, while another may require only one confirmation. Generally, the notion of learner diversity has been discussed informally at public blockchain forums. Another example of diversity is considered in the XFT protocol [25]. The protocol supports two types of learners: learners that assume crash faults under partial synchrony, or learners that assume Byzantine faults but believe in synchrony. Yet another notion of diversity is considered by the federated Byzantine consensus model and the Stellar protocol [30]. The Stellar protocol allows nodes to pick their own quorums. Our Flexible BFT approach instead considers diverse learners in terms of a-b-c adversaries and synchrony. The models and techniques in [30] and our paper are largely orthogonal and complementary.

#### Flexible Paxos

Flexible Paxos by Howard et al. [19] observes that Paxos may use non-intersecting quorums within a view, but an intersection is required across views. Our Flexible Quorum Intersection (b) can be viewed as its counterpart in the Byzantine and a-b-c setting. Additionally, Flexible BFT applies the flexible quorum idea to support diverse learners with different fault models and timing assumptions.

#### Mixed Fault Model

Fault models that mix Byzantine and crash faults have been considered in various works, e.g., FaB [29], Up-Right [12], and SBFT [4]. These works do not support diverse learners or stronger resilience. The a-b-c faults are, in a sense, the opposite of crash faults, mixing Byzantine with "anti-crashes." Our a-b-c adversary bears similarity to a rational adversary in Aiyer et al. [5] and Groce et al. [16] with several important differences. Aiyer et al. assumes no collusion between rational replicas, while Groce et al. assumes collusion but no Byzantine replicas. Aiyer et al. only considers partial synchrony, while Groce et al. only considers synchrony. In contrast, Flexible BFT considers colluding a-b-c faults and Byzantine faults and supports both partial synchrony and synchrony. Aiyer et al. provides a game-theoretic proof. More generally, game-theoretical modeling and analysis with collusion have been performed for other problems such as secret sharing and multiparty computation [2, 15, 21, 27]. A game-theoretic proof for Flexible BFT remains open.

#### Mixed Timing Model

Subsequent to this work, Blum et al. [7] designed a Byzantine Agreement protocol that supports different fractions of Byzantine faults under synchrony and asynchrony (instead of synchrony and partial synchrony as done in our work). Using the terms described in this paper, their protocol can support two types of learners: one type believes in synchrony and a larger Byzantine threshold, while the other type believes in asynchrony and a smaller Byzantine threshold. However, Blum et al. do not consider diversity in terms of supporting different ∆’s, different quorum sizes, or a-b-c faults.

### Conclusion and Future Work

We present Flexible BFT, a protocol that supports diverse learners with different assumptions to use the same ledger. Flexible BFT allows learners to tolerate combined (Byzantine plus alive-but-corrupt) faults exceeding 1/2 and 1/3 for synchrony and partial synchrony, respectively. At a technical level, under synchrony, we show a synchronous protocol where the replicas execute a network speed protocol and only the commit rule uses the synchrony assumption. For partial synchrony, we introduce the notion of Flexible Byzantine Quorums by deconstructing existing BFT protocols to understand the role played by the different quorums. We combine the two to form Flexible BFT, which obtains the best of both worlds.

Our liveness proof in Section 5.4 employs a strong assumption that all learners have correct commit rules. This is because our alive-but-corrupt fault model did not specify what these replicas would do if they could violate safety for some learners. In particular, they may stop helping liveness. However, we believe this will not be a concern once we move to a more realistic rational model. In that case, the best strategy for alive-but-corrupt replicas is to attack the safety of learners with unsafe commit rules while preserving liveness for learners with correct commit rules. Such an analysis in the rational fault model remains interesting future work. Our protocol also assumes that all replicas have clocks that advance at the same rate. It is interesting to explore whether our protocol can be modified to work with clock drifts.

### Acknowledgements

We thank Ittai Abraham and Ben Maurer for many useful discussions on Flexible BFT. We also thank Marcos Aguilera for many insightful comments on an earlier draft of this work.

### References

[1] Ittai Abraham, Srinivas Devadas, Danny Dolev, Kartik Nayak, and Ling Ren. 2019. Synchronous Byzantine Agreement with Expected O(1) Rounds, Expected O(n^2) Communication, and Optimal Resilience. In Financial Cryptography and Data Security (FC).

[2] Ittai Abraham, Danny Dolev, Rica Gonen, and Joe Halpern. 2006. Distributed computing meets game theory: robust mechanisms for rational secret sharing and multiparty computation. In Proceedings of the twenty-fifth annual ACM symposium on Principles of distributed computing. ACM, 53–62.

[3] Ittai Abraham, Dahlia Malkhi, Kartik Nayak, and Ling Ren. 2018. Dfinity Consensus, Explored. Cryptology ePrint Archive, Report 2018/1153.

[4] Ittai Abraham, Dahlia Malkhi, Kartik Nayak, Ling Ren, and Maofan Yin. 2019. Sync HotStuff: Simple and Practical State Machine Replication. Cryptology ePrint Archive, Report 2019/270. https://eprint.iacr.org/2019/270.

[5] Amitanand S Aiyer, Lorenzo Alvisi, Allen Clement, Mike Dahlin, Jean-Philippe Martin, and Carl Porth. 2005. BAR fault tolerance for cooperative services. In ACM SIGOPS operating systems review, Vol. 39. ACM, 45–58.

[6] Hagit Attiya and Jennifer Welch. 2004. Distributed computing: fundamentals, simulations, and advanced topics. Vol. 19. John Wiley & Sons.

[7] Erica Blum, Jonathan Katz, and Julian Loss. 2019. Synchronous Consensus with Optimal Asynchronous Fallback Guarantees. Cryptology ePrint Archive. (2019).

[8] Ethan Buchman. 2016. Tendermint: Byzantine fault tolerance in the age of blockchains. Ph.D. Dissertation.

[9] Vitalik Buterin and Virgil Griffith. 2017. Casper the Friendly Finality Gadget. CoRR abs/1710.09437 (2017). arXiv:1710.09437 http://arxiv.org/abs/1710.09437

[10] Christian Cachin, Klaus Kursawe, and Victor Shoup. 2005. Random oracles in Constantinople: Practical asynchronous Byzantine agreement using cryptography. Journal of Cryptology 18, 3 (2005), 219–246.

[11] Miguel Castro and Barbara Liskov. 1999. Practical Byzantine fault tolerance. In OSDI, Vol. 99. 173–186.

[12] Allen Clement, Manos Kapritsos, Sangmin Lee, Yang Wang, Lorenzo Alvisi, Mike Dahlin, and Taylor Riche. 2009. Upright Cluster Services. In Proceedings of the ACM SIGOPS 22Nd Symposium on Operating Systems Principles (SOSP ’09). ACM, New York, NY, USA, 277–290. https://doi.org/10.1145/1629575.1629602

[13] Danny Dolev and H. Raymond Strong. 1983. Authenticated algorithms for Byzantine agreement. SIAM J. Comput. 12, 4 (1983), 656–666.

[14] Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer. 1988. Consensus in the presence of partial synchrony. J. ACM 35, 2 (1988), 288–323.

[15] S Dov Gordon and Jonathan Katz. 2006. Rational secret sharing, revisited. In International Conference on Security and Cryptography for Networks. Springer, 229–241.

[16] Adam Groce, Jonathan Katz, Aishwarya Thiruvengadam, and Vassilis Zikas. 2012. Byzantine Agreement with a Rational Adversary. In Automata, Languages, and Programming, Artur Czumaj, Kurt Mehlhorn, Andrew Pitts, and Roger Wattenhofer (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 561–572.

[17] Guy Golan Gueta, Ittai Abraham, Shelly Grossman, Dahlia Malkhi, Benny Pinkas, Michael K Reiter, Dragos-Adrian Seredinschi, Orr Tamir, and Alin Tomescu. 2019. SBFT: a scalable decentralized trust infrastructure for blockchains. In DSN.

[18] Timo Hanke, Mahnush Movahedi, and Dominic Williams. 2018. DFINITY Technology Overview Series, Consensus System. arXiv preprint arXiv:1805.04548 (2018).

[19] Heidi Howard, Dahlia Malkhi, and Alexander Spiegelman. 2016. Flexible Paxos: Quorum Intersection Revisited. In OPODIS (LIPIcs), Vol. 70. Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik, 25:1–25:14.

[20] Jonathan Katz and Chiu-Yuen Koo. 2009. On expected constant-round protocols for Byzantine agreement. J. Comput. System Sci. 75, 2 (2009), 91–112.

[21] Gillat Kol and Moni Naor. 2008. Cryptography and game theory: Designing protocols for exchanging information. In Theory of Cryptography Conference. Springer, 320–339.

[22] Ramakrishna Kotla, Lorenzo Alvisi, Mike Dahlin, Allen Clement, and Edmund Wong. 2007. Zyzzyva: speculative Byzantine fault tolerance. In ACM SIGOPS Operating Systems Review, Vol. 41. ACM, 45–58.

[23] Leslie Lamport. 2006. Fast Paxos. Distributed Computing 19, 2 (2006), 79–103.

[24] Leslie Lamport, Robert Shostak, and Marshall Pease. 1982. The Byzantine generals problem. ACM Transactions on Programming Languages and Systems 4, 3 (1982), 382–401.

[25] Shengyun Liu, Christian Cachin, Vivien Quéma, and Marko Vukolic. 2016. XFT: practical fault tolerance beyond crashes. In 12th USENIX Symposium on Operating Systems Design and Implementation. USENIX Association, 485–500.

[26] Nancy A Lynch. 1996. Distributed algorithms. Elsevier.

[27] Anna Lysyanskaya and Nikos Triandopoulos. 2006. Rationality and adversarial behavior in multi-party computation. In Annual International Cryptology Conference. Springer, 180–197.

[28] Dahlia Malkhi and Michael Reiter. 1997. Byzantine Quorum Systems. In Proceedings of the Twenty-ninth Annual ACM Symposium on Theory of Computing (STOC ’97). ACM, New York, NY, USA, 569–578. https://doi.org/10.1145/258533.258650

[29] J-P Martin and Lorenzo Alvisi. 2006. Fast Byzantine consensus. IEEE Transactions on Dependable and Secure Computing 3, 3 (2006), 202–215.

[30] David Mazieres. 2015. The stellar consensus protocol: A federated model for internet-level consensus.

[31] Silvio Micali. 2016. Algorand: The efficient and democratic ledger. arXiv:1607.01341.

[32] Rafael Pass and Elaine Shi. 2018. Thunderella: Blockchains with optimistic instant confirmation. In Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 3–33.

[33] M. Pease, R. Shostak, and L. Lamport. 1980. Reaching Agreement in the Presence of Faults. J. ACM 27, 2 (April 1980), 228–234. https://doi.org/10.1145/322186.322188

[34] Fred B Schneider. 1990. Implementing fault-tolerant services using the state machine approach: A tutorial. ACM Computing Surveys (CSUR) 22, 4 (1990), 299–319.

[35] Jian Yin, Jean-Philippe Martin, Arun Venkataramani, Lorenzo Alvisi, and Mike Dahlin. 2003. Separating agreement from execution for Byzantine fault tolerant services. ACM SIGOPS Operating Systems Review 37, 5 (2003), 253–267.

[36] Maofan Yin, Dahlia Malkhi, Michael K Reiter, Guy Golan Gueta, and Ittai Abraham. 2019. BFT Consensus with Linearity and Responsiveness. In Proceedings of the ACM 38th Symposium on Principles of Distributed Computing (2019).