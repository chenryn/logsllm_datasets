### References

1. **Fragile.** RFC 8900, 2020.
2. **Sergey Bratus, Travis Goodspeed, Ange Albertini, and Debanjum S Solanky.** *Fillory of PHY: Toward a Periodic Table of Signal Corruption Exploits and Polyglots in Digital Radio.* In USENIX WOOT, 2016.
3. **Sebastian Brenza, Andre Pawlowski, and Christina Pöpper.** *A Practical Investigation of Identity Theft Vulnerabilities in eduroam.* In WiSec, 2015.
4. **Giovanni Camurati, Sebastian Poeplau, Marius Muench, Tom Hayes, and Aurélien Francillon.** *Screaming Channels: When Electromagnetic Side Channels Meet Radio Transceivers.* In CSS, 2018.
5. **Cas Cremers, Benjamin Kiesl, and Niklas Medinger.** *A Formal Analysis of IEEE 802.11’s WPA2: Countering the KRACKs Caused by Cracking the Counters.* In USENIX Security, 2020.
6. **Ralph Droms.** *Dynamic Host Configuration Protocol.* RFC 2131, 1997.
7. **T. Duong and J. Rizzo.** *Here Come the XOR Ninjas.* In Ekoparty Security Conference, 2011.
8. **Dan Harkins, Jouni Malinen, and Mike Montemurro.** *Finding PWE in Constant Time.* Retrieved 14 June 2020 from https://mentor.ieee.org/802.11/dcn/19/11-19-1173-18-000m-pwe-in-constant-time.docx, 2019.
9. **Changhua He, Mukund Sundararajan, Anupam Datta, Ante Derek, and John C Mitchell.** *A Modular Correctness Proof of IEEE 802.11i and TLS.* In CCS, 2005.
10. **Alex Hern.** *Major Sites Including New York Times and BBC Hit by Ransomware Malvertising.* The Guardian, 2016.
11. **Amir Herzberg and Haya Shulman.** *Fragmentation Considered Poisonous, or: One-Domain-to-Rule-Them-All.org.* In IEEE CNS, 2013.
12. **René Hummen, Jens Hiller, Hanno Wirtz, Martin Henze, Hossein Shafagh, and Klaus Wehrle.** *6LoWPAN Fragmentation Attacks and Mitigation Mechanisms.* In WiSec, 2013.
13. **IEEE P802.11ax/D4.3.** *Amendment 1: Enhancements for High Efficiency WLAN (Draft),* 2019.
14. **IEEE Std 802.11.** *Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specification,* 2016.
15. **IEEE Std 802.11ac.** *Amendment 4: Enhancements for Very High Throughput for Operation in Bands Below 6 GHz,* 2013.
16. **IEEE Std 802.11n.** *Amendment 5: Enhancements for Higher Throughput,* 2009.
17. **Jaehoon Paul Jeong, Soohong Daniel Park, Luc Beloeil, and Syam Madanapalli.** *IPv6 Router Advertisement Options for DNS Configuration.* RFC 8106, 2017.
18. **Lars-Erik Jonsson, Lars Åke Larzon, Gorry Fairhurst, Stephen Pink, and Mikael Degermark.** *The Lightweight User Datagram Protocol (UDP-Lite).* RFC 3828, 2004.
19. **Julien Freudiger.** *How Talkative Is Your Mobile Device? An Experimental Study of Wi-Fi Probe Requests.* In WiSec, 2015.
20. **Malachi Kenney.** *Ping of Death.* Retrieved 14 June 2020 from https://insecure.org/sploits/ping-o-death.html, 1996.
21. **Amit Klein and Benny Pinkas.** *From IP ID to Device ID and KASLR Bypass.* In USENIX Security, 2019.
22. **Changyu Li, Quanpu Cai, Juanru Li, Hui Liu, Yuanyuan Zhang, Dawu Gu, and Yu Yu.** *Passwords in the Air: Harvesting Wi-Fi Credentials from SmartCfg Provisioning.* In WiSec, 2018.
23. **Domien Schepers, Aanjhan Ranganathan, and Mathy Vanhoef.** *Practical Side-Channel Attacks Against WPA-TKIP.* In ASIA CCS, 2019.
24. **Rajiv Ranjan Singh, José Moreira, Tom Chothia, and Mark Ryan.** *Modelling of 802.11 4-Way Handshake Attacks and Analysis of Security Properties.* In STM, 2020.
25. **Jie Liang.** *Simplifying Implementation of CCMP Mode.* Retrieved 29 May 2020 from https://mentor.ieee.org/802.11/dcn/03/11-03-0122-00-000i-simplifying-implementation-of-ccmp-mode.ppt, 2003.
26. **Karim Lounis and Mohammad Zulkernine.** *Bad-Token: Denial of Service Attacks on WPA3.* In SIN, 2019.
27. **Jouni Malinen and Mark Rison.** *GCMP Decapsulation.* Retrieved 18 May 2020 from https://mentor.ieee.org/802.11/dcn/15/11-15-1132-02-000m-gcmp-decapsulation.docx, 2015.
28. **Bodo Möller, Thai Duong, and Krzysztof Kotowicz.** *This POODLE Bites: Exploiting the SSL 3.0 Fallback.* 2014.
29. **Nick Nikiforakis, Luca Invernizzi, Alexandros Kapravelos, Steven Van Acker, Wouter Joosen, Christopher Kruegel, Frank Piessens, and Giovanni Vigna.** *You Are What You Include: Large-Scale Evaluation of Remote JavaScript Inclusions.* In CCS. ACM, 2012.
30. **J. Postel and J. Reynolds.** *Standard for the Transmission of IP Datagrams over IEEE 802 Networks.* RFC 1042, 1988.
31. **Pieter Robyns, Peter Quax, and Wim Lamotte.** *Injection Attacks on 802.11n MAC Frame Aggregation.* In WiSec, 2015.
32. **Eyal Ronen, Robert Gillham, Daniel Genkin, Adi Shamir, David Wong, and Yuval Yarom.** *The 9 Lives of Bleichenbacher’s CAT: New Cache Attacks on TLS Implementations.* In IEEE S&P, 2019.
33. **Eyal Ronen, Kenneth G. Paterson, and Adi Shamir.** *Pseudo Constant Time Implementations of TLS Are Only Pseudo Secure.* In CCS, 2018.
34. **Jon Rosdahl, Mark Hamilton, and Michael Montemurro.** *Minutes REVmd – May 2018 – Warsaw.* Retrieved 14 September 2020 from https://mentor.ieee.org/802.11/dcn/18/11-18-0616-00-000m-minutes-revmd-may-2018-warsaw.docx, 2018.
35. **Flavia Salutari, Danilo Cicalese, and Dario J Rossi.** *A Closer Look at IP-ID Behavior in the Wild.* In International Conference on Passive and Active Network Measurement. Springer, 2018.
36. **Christopher McMahon Stone, Tom Chothia, and Joeri de Ruiter.** *Extending Automated Protocol State Learning for the 802.11 4-Way Handshake.* In ESORICS, 2018.
37. **Dr. Joseph D. Touch.** *Updated Specification of the IPv4 ID Field.* RFC 6864, 2013.
38. **Mathy Vanhoef, Prasant Adhikari, and Christina Pöpper.** *Protecting Wi-Fi Beacons from Outsider Forgeries.* In WiSec, 2020.
39. **Mathy Vanhoef, Nehru Bhandaru, Thomas Derham, Ido Ouzieli, and Frank Piessens.** *Operating Channel Validation: Preventing Multi-Channel Man-in-the-Middle Attacks against Protected Wi-Fi Networks.* In WiSec, 2018.
40. **Mathy Vanhoef and Frank Piessens.** *Advanced Wi-Fi Attacks Using Commodity Hardware.* In ACSAC, 2014.
41. **Mathy Vanhoef and Frank Piessens.** *Key Reinstallation Attacks: Forcing Nonce Reuse in WPA2.* In CCS, 2017.
42. **Mathy Vanhoef and Frank Piessens.** *Release the Kraken: New KRACKs in the 802.11 Standard.* In CCS, 2018.
43. **Mathy Vanhoef and Eyal Ronen.** *Dragonblood: Analyzing the Dragonfly Handshake of WPA3 and EAP-pwd.* In IEEE S&P, 2020.
44. **Wi-Fi Alliance.** *WPA3 Specification Version 2.0.* Retrieved 24 May 2020 from https://www.wi-fi.org/file/wpa3-specification, 2019.

### Driver and Firmware Modifications
Our test tool leverages Linux's virtual interface support, and we used it with a TL-WN722N to inject frames. To prevent the kernel function `ieee80211_tx_h_sequence` from overwriting sequence numbers when using multiple virtual interfaces, we patched it to not modify non-zero sequence numbers. To avoid the firmware from overwriting the sequence and fragment number, we patched `ath_tgt_tx_seqno_normal` to not modify `wh->i_seq` and `wh->i_seq[0]`.

To prevent injected frames with different QoS priorities from being reordered, we patched `ath9k_htc_tx_data` to set `tx_hdr.tidno` to zero, regardless of the frame's priority. Additional details and other required workarounds, including patches for other wireless network cards, can be found in [1].

### Non-Consecutive Packet Number Attack
#### Plaintext Fragment Injection against Linux
**Client**
- **Attacker**
- **AP (Vulnerable)**
- **Client**
- **Attacker**
- **AP (Vulnerable)**

1. **Stage 1**: Visit attacker’s website
   - `k{Frag0(s)}`
   - `{Frag1(s)}`
   - `Encn`
   - `Encn+1`
   - `k`

2. **Stage 2**: Detect packet to attacker’s server
   - `Encn`
   - `k{Frag0(s)}`
   - Decrypt & store fragment
   - Send sensitive data
   - `k`
   - `Encn+d`
   - `Encn+d+1`
   - `{Frag0(s')}`
   - `{Frag1(s')}`
   - `k`

3. **Stage 3**: Detect packet with sensitive data
   - `Encn+d+1`
   - `k`
   - `{Frag1(s)}`

4. **Reassemble frame**
   - Packet with sensitive data is sent to the attacker

### Advanced Aggregation (A-MSDU) Attacks
In our aggregation attack, we used IPv4 packets with an attacker-controlled IP identification value and payload. However, it may be infeasible to send such IPv4 packets to a victim. Instead, an adversary may wish to abuse devices that send IPv4 packets with an IP ID value of zero. This is useful when combined with the fragmentation bug of Section 6.3 to control a second plaintext fragment containing injected packets, or to attack an AP using a client in the BEAST threat model.

When setting the A-MSDU flag of an encrypted frame that transports an IPv4 packet with an ID value of zero, the last two bytes of the destination IP address become the length field of the second A-MSDU subframe. Depending on the IP addresses used by the network, this results in a short subframe, allowing an adversary to control the content of the third A-MSDU subframe. For instance, when using the subnet 192.168.1.0/24, the length of the second subframe is between 256 and 512 bytes, leaving enough space to inject frames by controlling the content of the third subframe. When targeting IPv4 packets sent to the internet that have an identification value of zero, we conjecture that traffic analysis can be used to detect which server a user is connecting to, and based on this, the adversary can predict when the last two bytes of the IP address result in a short A-MSDU subframe.

### Fragmentation Attacks against FreeBSD
The default mixed key and fragment cache attacks do not work against FreeBSD because it rejects fragments if an unrelated frame (of the same sender) is received in-between these fragments. This can be overcome by realizing that broadcast frames do not influence the defragmentation process of FreeBSD. An adversary can use this to forward 4-way handshake frames without affecting the defragmentation process by encapsulating them inside an A-MSDU frame with a broadcast receiver address, where the destination MAC address in the A-MSDU subframe equals the unicast address of the receiver.

To use this technique in an attack, the other station has to send plaintext 4-way handshake messages. This is the default behavior of devices in the cache attack but not during the rekey handshake in the mixed key attack. Nevertheless, the RT-AC51U AP does send 4-way handshake frames in plaintext during a rekey. Therefore, when a FreeBSD client is connected to such an AP, an adversary can capture the plaintext 4-way handshake messages and encapsulate them into broadcast A-MSDU frames. This causes FreeBSD to renew the pairwise session key without affecting the defragmentation process, allowing an adversary to perform a mixed key attack against FreeBSD. We successfully tested this technique against FreeBSD 12.1 when connected to our RT-AC51U. We also performed a fragment cache attack against a FreeBSD AP when it was using a TL-WN725N as a network card.