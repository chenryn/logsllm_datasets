# Universal Serial Bus (USB) Abuse

## Authors
- Rogan Dawes
- Dominic White

## Contact Information
- Email: PI:EMAIL
- Twitter: @rogandawes, @singe

## Important Note
- This is the text-based version of the slides and not the final presentation. We wanted to provide you with something meaningful to read through.
- The toolset will be released on our GitHub: [https://github.com/sensepost/USaBUSe](https://github.com/sensepost/USaBUSe)
- Details of the talk, latest slides, and code will be available on our blog: [https://sensepost.com/blog](https://sensepost.com/blog)

## Background
- Image: [http://sneakyninja95.deviantart.com/art/Stored-Memories-535612391](http://sneakyninja95.deviantart.com/art/Stored-Memories-535612391)

## Overview
In this talk, we will cover some novel USB-level attacks that can provide remote command and control of even air-gapped machines, with a minimal forensic footprint. We will also release an open-source toolset using freely available hardware.

### The Meta Point
- Defending against such attacks is challenging even under the best circumstances.
- Effective defense requires a realistic threat model.
- Often, the threat model is driven by vendor marketing rather than actual attacks.
- For example, advanced persistent threats (APTs) might not have been as prominent without significant vendor marketing.
- Penetration testers must emulate real threats or they are wasting your time.

### Why We Are Highlighting This Issue
- We have seen real attackers using these methods, but defenses have not adapted.
- The NSA’s COTTONMOUTH toolkit demonstrated these sorts of USB attacks.
- Technically unsophisticated criminals have defrauded banks using simple IP KVMs.
- If both high-level and low-level attackers are using similar physical bypasses, it is crucial to pay attention.
- Software is becoming harder to exploit and changes more rapidly than hardware.

### But We Know About These Attacks?
- Do we? In our experience, defenses in this area are poor.
- Hardware keyloggers have been around for decades and are still nearly impossible to detect in software.
- Most organizations think USB is primarily about malware or tethering/wifi and rely on other stack protections:
  - Malware deployment: proxy
  - Malware on device: AV/endpoint
  - Communication from device: FireEye and friends
- There is little defense specific to malicious devices, which the USB standard makes easy to implement.
- Finally, there was no end-to-end implementation of this attack when we started.

### Prior Work
- Our work builds on the contributions of many researchers. Specific prior work includes:
  - Travis Goodspeed’s Facedancer2: [http://goodfet.sourceforge.net/hardware/facedancer21/](http://goodfet.sourceforge.net/hardware/facedancer21/)
  - Michael Ossman and Dominic Spill’s NSA Playset, TURNIPSCHOOL: [http://www.nsaplayset.org/turnipschool](http://www.nsaplayset.org/turnipschool)
  - Samy Kamkar’s USBDriveBy: [http://samy.pl/usbdriveby/](http://samy.pl/usbdriveby/)
  - USB Rubber Ducky Wiki: [http://usbrubberducky.com/](http://usbrubberducky.com/)
  - Adrian Crenshaw’s Plug and Pray; Malicious USB Devices: [http://www.irongeek.com/i.php?page=security/plug-and-pray-malicious-usb-devices](http://www.irongeek.com/i.php?page=security/plug-and-pray-malicious-usb-devices) and PHUKD: [http://www.irongeek.com/i.php?page=security/programmable-hid-usb-keystroke-dongle](http://www.irongeek.com/i.php?page=security/programmable-hid-usb-keystroke-dongle)
  - Seunghun Han’s Iron-HID: [https://github.com/kkamagui/IRON-HID](https://github.com/kkamagui/IRON-HID) (released after our Defcon CFP submission)

### Objectives of Our Work
- Build an end-to-end attack usable in a penetration test.
- Allow it to be remotely triggered and updated.
- Work without requiring victim interaction.
- Exclude typical USB malware vectors (for which typical defenses exist), e.g., malware via mass storage.
- Send no traffic via the victim’s network.
- Avoid environmental complexities (firewalls, etc.).
- Avoid detection (IDS).
- Create a stealthy bi-directional pipe over innocuous USB devices (something forensic tools are unlikely to spot).
- Minimize forensic artifacts (e.g., execute in memory where possible).

### What's Different/New?
- Simpler networking: TCP/IP interface over WiFi.
- TURNIPSCHOOL uses a custom RF protocol.
- IRON-HID uses Bluetooth.
- More complete implementation.
- TURNIPSCHOOL never completed firmware for cc1111 against the host.
- Numerous small improvements over IRON-HID.
- Enables reuse of existing tools.
- Implements a VNC client for keyboard and mouse input.
- Compatible with Metasploit-generated payloads.
- More stealthy: no use of mass storage devices to load malware, no use of the host’s network (works on air-gapped hosts too).
- An end-to-end attack from plug-in to remote network and command access.
- Open hardware: while it works on available hardware, we are releasing our open hardware design.
- Minimal custom bootstrap.

### Initial Hardware
- April Brother Cactus Micro Rev2
  - Atmega32u4 on one side (host)
  - ESP8266 WiFi on the other (exfiltration)
  - Compact enough to be a flash drive
  - Advantages: cheap and available, AVR and ESP give us host and WiFi sides.
  - Disadvantages: no I2C, no USB A, can’t program ESP directly, minimal storage, can’t reset when in a case, LED not controllable from Atmega, not open hardware.

### New Hardware
- Similar to the Cactus Micro, but with:
  - USB A male connector!
  - Micro SD Card slot for storage
  - I2C connected with pull-up resistor
  - Programmable LED
  - Hall-effect switch to trigger reset when in case

### Firmware
- Lightweight USB Framework for AVR (LUFA) running on the atmega32u4, implementing various USB interfaces seen by the victim.
- ESP8Link (UART to TCP firmware) running on the ESP8266, providing WiFi to the device and connecting to the attacker’s AP.
- Added a VNC implementation to receive key and mouse events to pass to the host.
- Added a multiplexing protocol over the UART to allow communication between various functions.

### USB Implementation
- Traditional Keyboard and Mouse: emits events received via VNC, programmably emits events like RubberDucky, used to stage initial payload on the host and prevent screensaver engagement.
- Generic HID: allows bidirectional packet transfers (64-byte packets, 1000 per second in theory).

### Alternate USB Implementations
- For stealthier, more innocuous bi-directional comms:
  - Text-only printer: “prompt-less” driver installation in Windows.
  - Sound card: gives audio out and mic in, but might interfere with the primary audio device and depends on default permissions.

### Targets
- Currently targeting Windows PCs, with plans to expand to macOS and Linux hosts.
- Keyboard/Mouse is generic.
- Payload is platform-dependent, using PowerShell (available on most Windows workstations) and C# API (P/Invoke CreateFile, ShowWindowAsync).
- Staged approach: avoids touching disk for the most part, excluding P/Invoke function definitions.

### Payload Stages
- Stage 1 (PowerShell typed via the keyboard): optimized for size, opens device, reads Stage 2, clears history, and hides.
- Stage 2 (PowerShell read from device): arbitrary complexity.

### Stage 2 Payload Examples
- CMD.exe
- TCP Listener/Relay/Proxy: enables existing network-based exploits, localhost-only to avoid firewalls/alerts.
- Metasploit: currently being redirected through the proxy, can use arbitrary msf payloads (meterpreter, cmd, vnc, etc.).
- Purpose-built payloads: knows how to access the USB device directly, future development for meterpreter.

### Difficulties Experienced
- Programming errors on the ESP8266 result in reboots, and any debug logs disappear.
- Flow control: TCP is much faster than the UART, and the ESP8266 triggers a watchdog to reboot if processing takes too long. We had to rewrite the ESP8Link TCP handlers to support "resumable" processing of data.
- UART is faster than the Keyboard: HID interrupt transfers occur regardless of a read().
- Disappearing UART interrupts: data received by the ESP8266 gets stuck in the UART FIFO.

### Demonstrations
- We will provide a demo of the toolset in the talk.
- The software will be released at Defcon: [https://github.com/sensepost/USaBUSe](https://github.com/sensepost/USaBUSe)