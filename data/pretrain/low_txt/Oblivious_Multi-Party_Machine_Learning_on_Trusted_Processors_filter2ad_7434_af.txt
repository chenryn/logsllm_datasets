Certainly! Below is the optimized and refined version of your text, ensuring clarity, coherence, and professionalism:

---

**References**

[1] **Haven.** In *USENIX Symposium on Operating Systems Design and Implementation (OSDI)* (2014).

[2] **Bell, R. M., and Koren, Y.** "Lessons from the Netflix Prize Challenge." *ACM SIGKDD Explorations Newsletter* 9, 2 (2007).

[3] **Bishop, C. M.** *Neural Networks for Pattern Recognition.* Oxford University Press, 1995.

[4] **Blum, A., Dwork, C., McSherry, F., and Nissim, K.** "Practical Privacy: The SuLQ Framework." In *ACM SIGMOD-SIGACT-SIGART Symposium on Principles of Database Systems (PODS)* (2005).

[5] **Boser, B. E., Guyon, I. M., and Vapnik, V. N.** "A Training Algorithm for Optimal Margin Classifiers." In *Proceedings of the Fifth Annual Workshop on Computational Learning Theory* (1992).

[6] **Bost, R., Popa, R. A., Tu, S., and Goldwasser, S.** "Machine Learning Classification over Encrypted Data." In *Symposium on Network and Distributed System Security (NDSS)* (2015).

[7] **Breiman, L.** "Random Forests." *Machine Learning* 45, 1 (2001).

[8] **Breiman, L., Friedman, J. H., Olshen, R. A., and Stone, C. J.** *Classification and Regression Trees.* Wadsworth, 1984.

[9] **Criminisi, J., Shotton, J., and Konukoglu, E.** "Decision Forests: A Unified Framework for Classification, Regression, Density Estimation, Manifold Learning, and Semi-Supervised Learning." *Foundations and Trends in Computer Graphics and Vision* 7, 2-3 (2012).

[10] **Yao, A. C.** "Protocols for Secure Computations (Extended Abstract)." In *IEEE Symposium on Foundations of Computer Science (FOCS)* (1982).

[11] **De Hoogh, S., Schoenmakers, B., Chen, P., and Op den Akker, H.** "Practical Secure Decision Tree Learning in a Teletreatment Application." In *Financial Cryptography and Data Security (FC)* (2014).

[12] **Dwork, C., McSherry, F., Nissim, K., and Smith, A.** "Calibrating Noise to Sensitivity in Private Data Analysis." In *Theory of Cryptography Conference (TCC)* (2006).

[13] **Fast CNN Library.** http://fastcnn.codeplex.com/ (accessed 17/02/2016).

[14] **Fredrikson, M., Jha, S., and Ristenpart, T.** "Model Inversion Attacks That Exploit Confidence Information and Basic Countermeasures." In *ACM Conference on Computer and Communications Security (CCS)* (2015).

[15] **Fredrikson, M., Lantz, E., Jha, S., Lin, S., Page, D., and Ristenpart, T.** "Privacy in Pharmacogenetics: An End-to-End Case Study of Personalized Warfarin Dosing." In *USENIX Security Symposium* (2014).

[16] **Gentry, C.** "Fully Homomorphic Encryption Using Ideal Lattices." In *ACM Symposium on Theory of Computing (STOC)* (2009).

[17] **Goldreich, O., Micali, S., and Wigderson, A.** "How to Play Any Mental Game." In *ACM Symposium on Theory of Computing (STOC)* (1987).

[18] **Goldreich, O., and Ostrovsky, R.** "Software Protection and Simulation on Oblivious RAMs." *Journal of the ACM (JACM)* 43, 3 (1996).

[19] **Goodfellow, I., Bengio, Y., and Courville, A.** *Deep Learning.* Book in preparation for MIT Press, 2016.

[20] **Graepel, T., Lauter, K., and Naehrig, M.** "ML Confidential: Machine Learning on Encrypted Data." In *International Conference on Information Security and Cryptology (ICISC)* (2013).

[21] **Harper, F. M., and Konstan, J. A.** "The MovieLens Datasets: History and Context." In *ACM Transactions on Interactive Intelligent Systems (TiiS)* (2015).

[22] **Hoekstra, M., Lal, R., Pappachan, P., Rozas, C., Phegade, V., and Del Cuvillo, J.** "Using Innovative Instructions to Create Trustworthy Software Solutions." In *Workshop on Hardware and Architectural Support for Security and Privacy (HASP)* (2013).

[23] **Hong, J. H., and Fitzgibbon, A.** "Secrets of Matrix Factorization: Approximations, Numerics, Manifold Optimization, and Random Restarts." In *Proceedings of the IEEE International Conference on Computer Vision* (2015).

[24] **Intel Corp.** *Intel 64 and IA-32 Architectures Software Developer’s Manual—Combined Volumes: 1, 2a, 2b, 2c, 3a, 3b, and 3c.* No. 325462-048, 2013.

[25] **Koren, Y., Bell, R., and Volinsky, C.** "Matrix Factorization Techniques for Recommender Systems." *Computer* 8 (2009).

[26] **Kushilevitz, E., Lu, S., and Ostrovsky, R.** "On the (In)Security of Hash-Based Oblivious RAM and a New Balancing Scheme." In *ACM-SIAM Symposium on Discrete Algorithms (SODA)* (2012).

[27] **Laur, S., Lipmaa, H., and Mielikäinen, T.** "Cryptographically Private Support Vector Machines." In *ACM SIGKDD International Conference on Knowledge Discovery and Data Mining* (2006).

[28] **Lindell, Y., and Pinkas, B.** "Privacy Preserving Data Mining." *Journal of Cryptology* (2000).

[29] **Lindell, Y., and Pinkas, B.** "Secure Multi-Party Computation for Privacy-Preserving Data Mining." *IACR Cryptology ePrint Archive* (2008).

[30] **Liu, C., Harris, A., Maas, M., Hicks, M. W., Tiwari, M., and Shi, E.** "Ghostrider: A Hardware-Software System for Memory Trace Oblivious Computation." In *International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)* (2015).

[31] **Liu, C., Wang, X. S., Nayak, K., Huang, Y., and Shi, E.** "ObliVM: A Programming Framework for Secure Computation." In *IEEE Symposium on Security and Privacy (S&P)* (2015).

[32] **Liu, F., Yarom, Y., Ge, Q., Heiser, G., and Lee, R. B.** "Last-Level Cache Side-Channel Attacks Are Practical." In *IEEE Symposium on Security and Privacy (S&P)* (2015).

[33] **Lloyd, S. P.** "Least Squares Quantization in PCM's." *Bell Telephone Labs Memo* (1957).

[34] **Lloyd, S. P.** "Least Squares Quantization in PCM." *IEEE Transactions on Information Theory* 28, 2 (1982).

[35] **Luk, C.-K., Cohn, R., Muth, R., Patil, H., Klauser, A., Lowney, G., Wallace, S., Reddi, V. J., and Hazelwood, K.** "Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation." In *ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)* (2005).

[36] **MacQueen, J.** "Some Methods for Classification and Analysis of Multivariate Observations." In *Berkeley Symposium on Mathematics, Statistics, and Probability, Vol. 1* (1967).

[37] **Malkhi, D., Nisan, N., Pinkas, B., and Sella, Y.** "Fairplay: A Secure Two-Party Computation System." In *USENIX Security Symposium* (2004).

[38] **McKeen, F., Alexandrovich, I., Berenzon, A., Rozas, C., Shafi, H., Shanbhogue, V., and Savagaonkar, U.** "Innovative Instructions and Software Model for Isolated Execution." In *Workshop on Hardware and Architectural Support for Security and Privacy (HASP)* (2013).

[39] **Narayanan, A., and Shmatikov, V.** "Robust De-Anonymization of Large Sparse Datasets." In *IEEE Symposium on Security and Privacy (S&P)* (2008).

[40] **Nayak, K., Wang, X. S., Ioannidis, S., Weinsberg, U., Taft, N., and Shi, E.** "GraphSC: Parallel Secure Computation Made Easy." In *IEEE Symposium on Security and Privacy (S&P)* (2015).

[41] **Nikolaenko, V., Ioannidis, S., Weinsberg, U., Joye, M., Taft, N., and Boneh, D.** "Privacy-Preserving Matrix Factorization." In *ACM Conference on Computer and Communications Security (CCS)* (2013).

[42] **Ohrimenko, O., Costa, M., Fournet, C., Gkantsidis, C., Kohlweiss, M., and Sharma, D.** "Observing and Preventing Leakage in MapReduce." In *ACM Conference on Computer and Communications Security (CCS)* (2015).

[43] **Ohrimenko, O., Goodrich, M. T., Tamassia, R., and Upfal, E.** "The Melbourne Shuffle: Improving Oblivious Storage in the Cloud." In *International Colloquium on Automata, Languages, and Programming (ICALP), vol. 8573.* Springer, 2014.

[44] **Quinlan, J. R.** "Induction of Decision Trees." *Machine Learning* 1, 1 (1986).

[45] **Quinlan, J. R.** *C4.5: Programs for Machine Learning.* Morgan Kaufmann, 1993.

[46] **Rane, A., Lin, C., and Tiwari, M.** "Raccoon: Closing Digital Side-Channels through Obfuscated Execution." In *USENIX Security Symposium* (2015).

[47] **Rastogi, A., Hammer, M. A., and Hicks, M.** "Wysteria: A Programming Language for Generic, Mixed-Mode Multiparty Computations." In *IEEE Symposium on Security and Privacy (S&P)* (2014).

[48] **Sarwar, B., Karypis, G., Konstan, J., and Riedl, J.** "Application of Dimensionality Reduction in Recommender Systems—A Case Study." Tech. rep., DTIC Document, 2000.

[49] **Schölkopf, B., and Smola, A. J.** *Learning with Kernels: Support Vector Machines, Regularization, Optimization, and Beyond.* MIT Press, 2002.

[50] **Schuster, F., Costa, M., Fournet, C., Gkantsidis, C., Peinado, M., Mainar-Ruiz, G., and Russinovich, M.** "VC3: Trustworthy Data Analytics in the Cloud Using SGX." In *IEEE Symposium on Security and Privacy (S&P)* (2015).

[51] **Shalev-Shwartz, S., Singer, Y., Srebro, N., and Cotter, A.** "Pegasos: Primal Estimated Sub-Gradient Solver for SVM." *Mathematical Programming* 127, 1 (2011).

[52] **Shokri, R., and Shmatikov, V.** "Privacy-Preserving Deep Learning." In *ACM Conference on Computer and Communications Security (CCS)* (2015).

[53] **Sinha, R., Costa, M., Lal, A., Lopes, N., Seshia, S., Rajamani, S., and Vaswani, K.** "A Design and Verification Methodology for Secure Isolated Regions." In *ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)* (2016).

[54] **Smola, A. J., and Schölkopf, B.** "A Tutorial on Support Vector Regression." *Statistics and Computing* 14, 3 (2004).

[55] **Stefanov, E., van Dijk, M., Shi, E., Fletcher, C. W., Ren, L., Yu, X., and Devadas, S.** "Path ORAM: An Extremely Simple Oblivious RAM Protocol." In *ACM Conference on Computer and Communications Security (CCS)* (2013).

[56] **Tsochantaridis, I., Joachims, T., Hofmann, T., and Altun, Y.** "Large Margin Methods for Structured and Interdependent Output Variables." *Journal of Machine Learning Research* (2005).

[57] **Tu, S., Kaashoek, M. F., Madden, S., and Zeldovich, N.** "Processing Analytical Queries over Encrypted Data." In *International Conference on Very Large Data Bases (VLDB)* (2013).

[58] **Vapnik, V. N.** *Statistical Learning Theory, Vol. 1.* Wiley New York, 1998.

[59] **Wang, X. S., Nayak, K., Liu, C., Chan, T., Shi, E., Stefanov, E., and Huang, Y.** "Oblivious Data Structures." In *ACM Conference on Computer and Communications Security (CCS)* (2014).

[60] **Weston, J., and Watkins, C.** "Support Vector Machines for Multi-Class Pattern Recognition." In *ESANN* (1999).

[61] **Wu, D. J., Feng, T., Naehrig, M., and Lauter, K.** "Privately Evaluating Decision Trees and Random Forests." *IACR Cryptology ePrint Archive* (2015).

[62] **Xie, P., Bilenko, M., Finley, T., Gilad-Bachrach, R., Lauter, K. E., and Naehrig, M.** "Crypto-Nets: Neural Networks over Encrypted Data." *CoRR abs/1412.6181* (2014).

[63] **Xu, Y., Cui, W., and Peinado, M.** "Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems." In *IEEE Symposium on Security and Privacy (S&P)* (2015).

[64] **Yao, A. C.** "How to Generate and Exchange Secrets (Extended Abstract)." In *IEEE Symposium on Foundations of Computer Science (FOCS)* (1986).

**Appendix A: Illustration of Oblivious Matrix Factorization from Section 4.6**

**Figure 4: Optimized Array Scanning Using the 256-bit Vector Instruction vpgatherdd**

**256-bit Vector Register with 32-bit Components**
```
( c0 c1 c2 c3 c4 c5 c6 c7 )
...
Cache Line
...
Array in Memory
```

**Appendix B: Optimized Array Scanning**

The `oget()` primitive can be further optimized using the `vpgatherdd` instruction as follows. We ensure that a certain number of components of the vector register load values that span two cache lines. This can be achieved by loading two bytes from one cache line and two bytes from the next, as each component loads 4 bytes. Consequently, up to 16 cache lines can potentially be accessed with a single instruction.

We carefully assign components to cache lines. The first few components request addresses within dummy cache lines or cache lines containing the values of interest (whose addresses should remain secret). The remaining components load the values of interest. This concept is illustrated in Figure 4, where components C0 and C2-C6 request dummy cache lines, C1 requests the cache lines containing the desired value, which is loaded into C7.

In this configuration, four bytes are read obliviously from a memory region of size 7 · 2 · 64 bytes = 896 bytes with a single `vpgatherdd` instruction. The method generalizes when more bytes (e.g., 8 bytes using C6 and C7) are to be read.

This technique can significantly increase throughput (up to 2x in some micro-benchmarks outside enclaves on recent Intel Skylake processors). However, it requires that `vpgatherdd` appears as a truly atomic operation or, at least, that the hardware loads dummy components before secret ones (and those are then loaded from the cache). While this may hold in a software-only attacker model, it is not the case in the powerful threat model discussed in Section 2. Therefore, our implementation relies on the conservative `oget()` from Section 3.

---

This version maintains the original content while improving readability and structure.