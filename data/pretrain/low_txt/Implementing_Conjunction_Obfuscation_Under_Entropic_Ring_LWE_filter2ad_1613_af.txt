### Multilinearity Degree and Performance Analysis

The multilinearity degree of our implementation is 25, which is an improvement over the 20-degree implementation in [27]. The following table (Table V) presents the runtimes and program sizes for conjunction programs with \( w = 1 \), \( t = 220 \), and \( \lambda > 80 \).

**TABLE V: Runtimes and Program Size for Conjunction Programs**

| \( L \) | \( n \)  | \( k \)  | KeyGen (GB) | Obfuscate (min) | Evaluate (s) |
|---------|----------|----------|-------------|-----------------|--------------|
| 5       | 8192     | 240      | 1.08        | 1.1             | 0.39         |
| 6       | 8192     | 300      | 2.36        | 1.8             | 0.72         |
| 8       | 16384    | 420      | 13.2        | 8.2             | 3.7          |
| 10      | 16384    | 480      | 28.6        | 12              | 5.5          |
| 12      | 16384    | 600      | 60.4        | 22              | 12           |
| 14      | 32768    | 720      | 227         | 103             | 74           |
| 16      | 32768    | 780      | 363         | 135             | 101          |
| 18      | 32768    | 900      | 565         | 198             | 158          |
| 19      | 32768    | 960      | 723         | 237             | 188          |
| 20      | 32768    | 960      | 825         | 252             | 213          |
| 21      | 32768    | 1020     | 994         | 310             | 230          |
| 22      | 32768    | 1080     | 1232        | 350             | 247          |
| 23      | 32768    | 1140     | 1459        | 404             | 286          |
| 24      | 32768    | 1200     | 1774        | 510             | 379          |

For a multilinearity degree of 20, our obfuscation time is 237 minutes, compared to 4,060 minutes in [27], and our evaluation time is 188 seconds, compared to 1,514 seconds in [27]. The primary experimental limitation was the memory in the server computing environment. Table V shows that our implementation can support up to 24-bit conjunction programs without the word encoding optimization. The runtimes for this 24-bit scenario are significantly higher than those for 32-bit conjunction programs in Table III.

### Parallelization Experiments

Table VI shows the runtime results for a 32-bit pattern with 53 bits of security on a 4-core desktop CPU as a function of the number of threads. The total program size and all input parameters are the same as in the first row of Table III. As expected, runtimes for 4 and 8 threads are approximately the same, indicating no major benefit from hyper-threading, as the number of physical cores is 4.

**TABLE VI: Runtimes for 32-bit Conjunction Patterns at \( n = 1024 \)**

| # Threads | KeyGen (s) | Obfuscate (min) | Evaluate (ms) |
|-----------|------------|-----------------|---------------|
| 1         | 0.179      | 24.3            | 161           |
| 2         | 0.106      | 13.8            | 90            |
| 4         | 0.056      | 7.7             | 48            |
| 8         | 0.053      | 7.0             | 43            |

When increasing the number of threads from 1 to 4, the key generation time decreases by a factor of 3.2, suggesting that key generation benefits from loop parallelization. The obfuscation procedure also scales well with more threads, with a runtime improvement of 3.2 (and even 3.5 when 8 threads are considered). This implies that further obfuscation runtime improvements can be achieved using more CPU cores. The evaluation procedure also benefits from loop parallelization, with a runtime improvement of 3.4 (3.7 for 8 threads). The evaluation runtime of 43 ms on a commodity desktop environment indicates that a 32-bit conjunction obfuscator is practical.

We also evaluated an obfuscated 64-bit conjunction program (with 73 bits of security) on the commodity desktop computer, where the obfuscation was previously performed in a high-performance computing environment (corresponding to the last row in Table IV). This fits the scenario where the obfuscated program would be stored on SSD drives or other fast access media. The average evaluation time was 3.5 seconds.

### Concluding Remarks

Our work presents an improved design and software implementation for the secure obfuscation of conjunction programs, which are significantly more complex than simple point obfuscation functions supported by prior implementations. Our obfuscation construction is based on a reasonable hardness variant of a standard lattice assumption (entropic Ring-LWE) and distributional Virtual Black-Box (VBB) security, in contrast to previous implementations of non-trivial obfuscators based on Indistinguishability Obfuscation (IO) via multilinear maps [25], [26], [27] or heuristic techniques not derived from computational hardness [2], [3], [4], [5], [6], [7].

Through our optimizations, we have reduced the program size, obfuscation runtime, and evaluation runtime by multiple orders of magnitude. This allows us to execute the obfuscation and evaluation of 32-bit conjunction programs in a commodity desktop environment. Our implementation can also run secure obfuscation of 64-bit conjunction programs in a commercially available server computing environment and execute evaluation in a commodity desktop environment, achieving an evaluation runtime of 3.5 seconds.

A major challenge not addressed by this work is the encoding of real practical programs as conjunctions chosen from a distribution with sufficient entropy. A potential approach to this problem is to use the obfuscation technique for compute-and-compare programs, a recently proposed generalization of conjunction obfuscators based on Learning With Errors (LWE) [50]. Many design elements and optimizations presented in this study can also be applied to this more general obfuscation technique.

### Acknowledgements

We gratefully acknowledge the input and feedback from Sean Al-Gattas, David Archer, Lisa Bahler, Brian Coan, Nicholas Genise, Shafi Goldwasser, Michael Hsieh, Daniele Micciancio, Michael Naehrig, Rafail Ostrovsky, David Renardy, Carey Schwartz, Nigel Smart, Vinod Vaikuntanathan, and Michael Walter. We also thank the S&P’18 reviewers for their helpful comments.

This work was sponsored by the Defense Advanced Research Projects Agency (DARPA) and the Army Research Laboratory (ARL) under Contract Numbers W911NF-15-C-0226 and W911NF-15-C-0233. The views expressed are those of the authors and do not necessarily reflect the official policy or position of the Department of Defense or the U.S. Government.

### References

[1] Z. Brakerski, V. Vaikuntanathan, H. Wee, and D. Wichs, “Obfuscating conjunctions under entropic ring LWE,” in Proceedings of the 2016 ACM Conference on Innovations in Theoretical Computer Science, ser. ITCS ’16, 2016, pp. 147–156.
[2] D. Low, “Protecting Java code via code obfuscation,” Crossroads, vol. 4, no. 3, pp. 21–23, Apr. 1998.
[3] G. Wroblewski, “General method of program code obfuscation,” Ph.D. dissertation, Citeseer, 2002.
[4] C. Linn and S. Debray, “Obfuscation of executable code to improve resistance to static disassembly,” in Proceedings of the 10th ACM Conference on Computer and Communications Security, ser. CCS ’03, 2003, pp. 290–299.
[5] S. Schrittwieser, S. Katzenbeisser, P. Kieseberg, M. Huber, M. Leithner, M. Mulazzani, and E. Weippl, “Covert computation: Hiding code in code for obfuscation purposes,” in Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security, ser. ASIA CCS ’13, 2013, pp. 529–534.
[6] M. I. Sharif, A. Lanzi, J. T. Giffin, and W. Lee, “Impeding malware analysis using conditional code obfuscation.” in NDSS, 2008.
[7] Y. Zhou, A. Main, Y. X. Gu, and H. Johnson, “Information hiding in software with mixed Boolean-arithmetic transforms,” in Proceedings of the 8th International Conference on Information Security Applications, ser. WISA’07, 2007, pp. 61–75.
[8] C. S. Collberg and C. Thomborson, “Watermarking, tamper-proofing, and obfuscation: Tools for software protection,” IEEE Trans. Softw. Eng., vol. 28, no. 8, pp. 735–746, Aug. 2002.
[9] N. Eyrolles, L. Goubin, and M. Videau, “Defeating MBA-based obfuscation,” in Proceedings of the 2016 ACM Workshop on Software Protection, ser. SPRO ’16, 2016, pp. 27–38.
[10] C. Kruegel, W. Robertson, F. Valeur, and G. Vigna, “Static disassembly of obfuscated binaries,” in USENIX Security Symposium, 2004.
[11] A. H. Sung, J. Xu, P. Chavez, and S. Mukkamala, “Static analyzer of vicious executables (SAVE),” in 20th Annual Computer Security Applications Conference, Dec 2004, pp. 326–334.
[12] S. K. Udupa, S. K. Debray, and M. Madou, “Deobfuscation: reverse engineering obfuscated code,” in 12th Working Conference on Reverse Engineering (WCRE’05), Nov 2005, p. 10.
[13] B. Barak, “Hopes, fears, and software obfuscation,” Commun. ACM, vol. 59, no. 3, pp. 88–96, Feb. 2016.
[14] S. Hada, Zero-Knowledge and Code Obfuscation. Berlin, Heidelberg: Springer Berlin Heidelberg, 2000, pp. 443–457.
[15] B. Barak, O. Goldreich, R. Impagliazzo, S. Rudich, A. Sahai, S. Vadhan, and K. Yang, “On the (im)possibility of obfuscating programs,” J. ACM, vol. 59, no. 2, pp. 6:1–6:48, May 2012.
[16] N. Bitansky, R. Canetti, H. Cohn, S. Goldwasser, Y. T. Kalai, O. Paneth, and A. Rosen, The Impossibility of Obfuscation with Auxiliary Input or a Universal Simulator. Berlin, Heidelberg: Springer Berlin Heidelberg, 2014, pp. 71–89.
[17] S. Goldwasser and Y. T. Kalai, “On the impossibility of obfuscation with auxiliary input,” in 46th Annual IEEE Symposium on Foundations of Computer Science (FOCS’05), Oct 2005, pp. 553–562.
[18] B. Applebaum and Z. Brakerski, Obfuscating Circuits via Composite-Order Graded Encoding. Berlin, Heidelberg: Springer Berlin Heidelberg, 2015, pp. 528–556.
[19] B. Barak, S. Garg, Y. T. Kalai, O. Paneth, and A. Sahai, Protecting Obfuscation against Algebraic Attacks. Berlin, Heidelberg: Springer Berlin Heidelberg, 2014, pp. 221–238.
[20] S. Garg, C. Gentry, S. Halevi, M. Raykova, A. Sahai, and B. Waters, “Candidate indistinguishability obfuscation and functional encryption for all circuits,” SIAM Journal on Computing, vol. 45, no. 3, pp. 882–929, 2016.
[21] C. Gentry, S. Gorbunov, and S. Halevi, Graph-Induced Multilinear Maps from Lattices. Berlin, Heidelberg: Springer Berlin Heidelberg, 2015, pp. 498–527.
[22] H. Lin, Indistinguishability Obfuscation from SXDH on 5-Linear Maps and Locality-5 PRGs. Cham: Springer International Publishing, 2017, pp. 599–629.
[23] H. Lin, R. Pass, K. Seth, and S. Telang, Indistinguishability Obfuscation with Non-trivial Efficiency. Berlin, Heidelberg: Springer Berlin Heidelberg, 2016, pp. 447–462.
[24] H. Lin and S. Tessaro, Indistinguishability Obfuscation from Trilinear Maps and Block-Wise Local PRGs. Cham: Springer International Publishing, 2017, pp. 630–660.
[25] D. Apon, Y. Huang, J. Katz, and A. J. Malozemoff, “Implementing cryptographic program obfuscation,” Cryptology ePrint Archive, Report 2014/779, 2014, http://eprint.iacr.org/2014/779.
[26] K. Lewi, A. J. Malozemoff, D. Apon, B. Carmer, A. Foltzer, D. Wagner, D. W. Archer, D. Boneh, J. Katz, and M. Raykova, “5gen: A framework for prototyping applications using multilinear maps and matrix branching programs,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS ’16, 2016, pp. 981–992.
[27] S. Halevi, T. Halevi, V. Shoup, and N. Stephens-Davidowitz, “Implementing BP-obfuscation using graph-induced encoding,” Cryptology ePrint Archive, Report 2017/104 [to appear in ACM CCS 2017], 2017, http://eprint.iacr.org/2017/104.
[28] J.-S. Coron, C. Gentry, S. Halevi, T. Lepoint, H. K. Maji, E. Miles, M. Raykova, A. Sahai, and M. Tibouchi, Zeroizing Without Low-Level Zeroes: New MMAP Attacks and their Limitations. Berlin, Heidelberg: Springer Berlin Heidelberg, 2015, pp. 247–266.
[29] J.-S. Coron, M. S. Lee, T. Lepoint, and M. Tibouchi, Cryptanalysis of GGH15 Multilinear Maps. Berlin, Heidelberg: Springer Berlin Heidelberg, 2016, pp. 607–628.
[30] J. H. Cheon, K. Han, C. Lee, H. Ryu, and D. Stehlé, Cryptanalysis of the Multilinear Map over the Integers. Berlin, Heidelberg: Springer Berlin Heidelberg, 2015, pp. 3–12.
[31] J. H. Cheon, P.-A. Fouque, C. Lee, B. Minaud, and H. Ryu, Cryptanalysis of the New CLT Multilinear Map over the Integers. Berlin, Heidelberg: Springer Berlin Heidelberg, 2016, pp. 509–536.
[32] Y. Hu and H. Jia, Cryptanalysis of GGH Map. Berlin, Heidelberg: Springer Berlin Heidelberg, 2016, pp. 537–565.
[33] E. Miles, A. Sahai, and M. Zhandry, Annihilation Attacks for Multilinear Maps: Cryptanalysis of Indistinguishability Obfuscation over GGH13. Berlin, Heidelberg: Springer Berlin Heidelberg, 2016, pp. 629–658. [Online]. Available: http://dx.doi.org/10.1007/978-3-662-53008-5_22
[34] J.-S. Coron, M. S. Lee, T. Lepoint, and M. Tibouchi, Zeroizing Attacks on Indistinguishability Obfuscation over CLT13. Berlin, Heidelberg: Springer Berlin Heidelberg, 2017, pp. 41–58.
[35] Y. Chen, C. Gentry, and S. Halevi, Cryptanalyses of Candidate Branching Program Obfuscators. Cham: Springer International Publishing, 2017, pp. 278–307. [Online]. Available: https://doi.org/10.1007/978-3-319-56617-7_10