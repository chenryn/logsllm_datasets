### 4.2.1 Signature Mechanism
Out of the 35 Payment Processing Systems (PPSs) analyzed, 33 employ a cryptographic algorithm in their signature mechanism. The remaining two PPSs do not require packet signatures for order inquiries. Table 2 summarizes the token generation mechanisms of these 35 PPSs.

### 4.2.2 Vulnerable String Concatenation
To identify this vulnerability, our analysis is based on two criteria: 
1. Whether the values among different fields are separated by delimiters or field names.
2. Whether the price field is near any optional fields.

Table 3 shows the concatenation methods used by all 32 PPSs that adopt signature mechanisms. Thirteen PPSs concatenate strings without delimiters or field names between neighboring fields, and 12 of these have the optional "Return URL" field near the price field. The "Return URL" is the website address to which the Merchant Client (MC) redirects after a payment. When the value in the Return URL is modified, the MC remains at the payment interface page, but the transaction is still successfully processed at the Merchant Server (MS). Consequently, these 12 PPSs are vulnerable to our proposed string shift attack (Section 3.3.2). The remaining 20 PPSs require merchants to add a delimiter (e.g., `&`) between any two fields or include the corresponding field name before the values (e.g., `price=xxx`) in the concatenated string. Our string shift attack does not work on these PPSs.

### 4.2.3 Vulnerable Key Changing API
We found that 31 out of 35 PPSs do not use signature mechanisms in the request packet and may be vulnerable to the malicious key changing attack described in Section 3.1.2. Additionally, among these 31 PPSs, 14 send new keys as cleartext, allowing an attacker to intercept the packet and obtain the new key.

### 4.2.4 Vulnerable Order Inquiry
All PPSs use a cryptographic checksum, such as MD5, in the inquiry request packet to prevent malicious order inquiries. In the response packet, all 35 PPSs include the payment status (pending, error, success) represented by a status code. However, only 3 PPSs include both the expected amount and the actual value paid. Without the expected and actual payment values, it becomes impossible for the merchant to perform audits, significantly impacting financial operations in the event of an attack.

### 4.2.5 Vulnerable Payment Interface
As previously discussed, the payment interface can be crucial in helping buyers identify payment swapping attacks, where an attacker substitutes their order to mislead the victim into paying for the attacker's order. We found that the payment interfaces of all 35 PPSs display the order ID, the expected amount, and the pay-to account (e.g., QR code), but not buyer-oriented information such as the shipping address and merchandise recipient. One representative interface is shown in Figure 10. The order ID is the only information designed for identifying the payment account, but according to our analysis, it does not help buyers recognize the order attribution. Generally, when the displayed price in the interface of these 24 vulnerable PPSs matches the buyer's expectation, they are likely to pay without checking the order details. As a result, the attacker can easily perform a payment substitution attack. Nine PPSs provide additional order details such as product names, which help users recognize order substitutions, limiting the attacker's success.

### 4.2.6 Missing Security Guidelines in User Documents
One of the key questions we aim to answer is whether there is clear and concise guidance on the best security practices for developers. Since most deployment vulnerabilities are related to local key storage and historical order inquiries, we focused on the provided guidance around these issues. Our analysis shows that more than half of the PPSs do not provide important security guidelines for key storage or order verification. Out of the 35 PPSs, only 15 provide the tip that the key must be kept on the MS. The lack of this guideline has led many developers using the remaining 20 PPSs to mistakenly place the key on the MC. For historical order inquiries, only 3 PPSs suggest that merchants add additional verification steps to record the order payment history.

### 4.2.7 Insecure Network Transmission
Network transmission security is a common requirement to prevent man-in-the-middle attacks. Insecure network communication is one of the key enablers of theft of important parameters transmitted between the MS and the Payment Management Platform (PMP). Although we do not mention this trivial attack in the security analysis due to the strict requirement to sniff the channel between the MS and PMP, we still provide related statistics here. Among the 35 PPS platforms, 17 use the HTTP protocol to deliver the packet for the key-changing response. These 17 PPSs place the new key in cleartext form in the response packet, putting merchants at risk of key-sniffing attacks.

### 4.3 Real-World Attack Cases
To validate the vulnerable patterns we analyzed, we conducted several real-world attacks on our own merchant account to understand the feasibility and limitations of these attacks. Video recordings and related MD5 attack materials for all attack experiments are provided in [9]. Note that all the attacks demonstrated in our paper were launched against our own merchant and user accounts, even though they apply generally.

#### 4.3.1 String Shift Attack
We chose the Paysapi website and performed a string shift attack, aiming to recharge a certain amount to our registered account but pay less. From our analysis, we know that Paysapi has a vulnerable token generation method that simply concatenates all fields together before hashing, making it vulnerable to the string shift attack discussed in Section 3.3.2. We used the Fiddler 4 tool to intercept, counterfeit, and re-send the transmission packet between our personal computer and the Paysapi server.

We entered 30 Chinese Yuan in the input field of the Paysapi user interface and sent this order request to the merchant. After the merchant sent the order packet back to the user interface, we used Fiddler 4 to intercept the packet while preventing the user from delivering it to the Paysapi server. We manually shifted the character "0" from the price field of the order packet to the beginning of the return_url field and then forwarded the new packet to the Paysapi server. The payment interface displayed a required payment of 3 Chinese Yuan. After the user paid 3 Chinese Yuan, the payment interface showed the payment as successful, but the website failed to show the notification page. We checked the balance in our account and found it was 30 Chinese Yuan, but we had only paid 3 Chinese Yuan. This indicates the success of our attack without being noticed by the Paysapi server. We left the balance as it was and notified the merchant of this test without using it to purchase any commodity for ethical considerations. The video recording of our attack is available in the file named "string_shift_attack.mp4" in [9].

#### 4.3.2 Key Changing Attack
We performed two real merchant-oriented attacks. The first targeted disabling the merchant’s service, and the second targeted stealing the key. Merchant accounts were registered on two different PPSs, Paysapi and Xunhupay. Paysapi includes the new key in the reply, while Xunhupay does not. Our goal was to demonstrate the vulnerabilities in the key-changing interface.

For the test on Xunhupay, we logged in through the merchant portal and saw the current key as "r7Ep7kymuyQQE6taVQNF". We operated the registered account and clicked the key-changing button. Meanwhile, we used the Fiddler 4 tool to monitor the request packet for the key-changing transmission to the PPS. The PPS changed the key to "hiTcAvcYicv24XjdcwRY", but did not send a response packet carrying the key. Instead, the registered account needed to refresh the profile page to see the new key. We extracted the merchant ID information from the monitored packet, forged a new request packet, and sent it to the PPS. The PPS then changed the key to "Tk7pK5BneK2373NuU76E". Since no response packet was sent from the PPS to the registered account, the merchant’s service was disabled until the profile page was refreshed to notice the key change.

For the test on Paysapi, we followed the same steps as in the experiment above. However, since Paysapi includes the key in the response, it is possible to steal the new key just by examining the key change response. The video recordings of these two attacks are available in [9], with the files named "disabled_attack.mp4" and "key_stealing_attack.mp4".

#### 4.3.3 Payment Substitution Attack
The goal of this attack was to verify the ability of an attacker to swap the content of an order so that the victim pays for the attacker's order. Two user accounts were registered, one for the victim and the other for the attacker. Both the victim and the attacker were placed in the same local area network under the same router.

First, the victim opened the interface and clicked to recharge the account with 10 Chinese Yuan. When the attacker monitored that the victim was recharging the account with 10 Chinese Yuan, he intercepted the packet sent from the merchant service to the victim and blocked its transmission to the PMP. Meanwhile, the attacker clicked the recharging function in his account. We intercepted the packet transported from the merchant server to him without forwarding it to the PMP. We recorded the important order parameters in this packet and replaced them with those in the intercepted packet from the victim. The new substituted packet was then sent to the victim’s PMP. The payment interface was successfully shown on the victim’s website, which did not show any order identity information. The victim made the payment for the attacker’s order. We found that the balance in the attacker’s account was now 10 Chinese Yuan, but the balance in the victim’s account remained unchanged. This indicates the success of our payment substitution attack. The video recording of this attack is available in [9] with the file name "substitution_attack.mp4".

#### 4.3.4 MD5 Collision Attack
The goal of this attack was to verify that the MD5 collision attack is practical in real-world PPS systems. We carefully chose the donation payment on a blog website as the attack target, as donating a lower amount would not cause serious effects. We notified the owner of the blog for this experiment. The blog employed the payment services provided by Paysapi, whose token generation mechanism places the price directly in front of an optional "ReturnURL" field. The donation price was set to 0.02 Yuan, and the ReturnURL could be obtained by capturing a normal order packet using the Fiddler 4 tool, allowing us to collect the parameters for performing the MD5 collision attack. We used an open resource on GitHub [40] to calculate the chosen prefix MD5 collision blocks, where the two prefixes differed in the price values, "0.01" and "0.02". The calculation was processed on a computer with CPU: Intel i7-8700k, GPU: NVIDIA GeForce GTX1080 Ti, and RAM: 64G, using CUDA. It took 7 days to find a collision with the two prefixes, where the collision block was free from JSON keywords and the MD5 value was the same, "9f1ec604dce1bc1c0b1dd368dda3dd44". We started to make the payment (i.e., donation) on the blog and blocked the network packet sent from the MC to the MS. Since the price and ReturnURL were generated in the website client, we modified the price and ReturnURL fields with the collision block of 0.02 Yuan. After the order packet was signed at the MS and sent back to the MC, we again blocked and captured its transmission from the MC to the PMP server. The MD5 collision results were stored in two ".bin" files; therefore, we used a hex editor to open the blocked order packet and replace the price and notifyURL with the collision block of "0.01" Yuan. This order passed the PPS certification, and the payment interface was successfully sent back to the website, then we paid for it at a lower price. The two collision files in this attack are available in [9] with the file names "prefix1.txt.coll" and "prefix2.txt.coll".

### 4.4 Ethical Considerations and Responsible Disclosure

#### 4.4.1 Ethical Considerations on Real-World Attacks
We carefully designed and conducted our case study to avoid impacting real-world entities. We conducted the attack on credit recharging transactions to ensure no real products would be shipped as a result of the attack. In all experiments, we used test accounts created solely for demonstrating the attacks. We also did not receive any services or goods using the hijacked payment systems. At the end of our experiments, we always informed the authorities of the detailed procedures and results so that they could correct the issues at the backend.

#### 4.4.2 Responsible Disclosure
We first reported all our findings to the PPS providers in January 2020. Unfortunately, no formal email responses were received in the first round before March 2020, while 9 PPS providers (Bufpay, Xunhupay, 020zf, Paycats, Heimipay, Qianmapay, Paysapi, Greenyep, and Xddpay) gave us feedback through other online chat tools. During the second PPS inspection in August 2020, we found that 5 PPSs had updated the payment protocols with safer string concatenation mechanisms. The list of these PPSs is shown in Fig. 9. Twelve out of the 35 PPSs, which possessed multiple vulnerabilities, stopped providing payment services after our report, including Yktapi, Caiwumao, Weimifu, ARYA, L Pays, Xinyipay, 188pc, PersonalP, Yijinka, 7cPay, Yuandian, and Dunpay. We also reported the vulnerabilities to the Common Vulnerabilities and Exposures (CVE) on August 8, 2020, and received their vulnerability confirmation on August 10, 2020. However, our reported issues did not meet the requirements for applying for a CVE ID.

As we will discuss in Section 5.1, some critical vulnerabilities are design flaws in the PPS protocols. Therefore, all existing merchants supported by PPS are at risk. Since all the PPSs use the personal money transfer service from Alipay and WeChat Pay third-party payment platforms, on August 14, 2020, we reported the vulnerable PPS list and the security issues to the Security Response Center of Tencent (WeChat Pay) and the Alibaba Security Response Center (Alipay), which are responsible for the security of their payment ecosystem. The Alibaba Security Response Center confirmed our reported PPS issues on September 20, 2020, and will continue to monitor technical reports in this area to improve payment security in PPS.

### 5. PPS Vulnerability Summary
Through our study, PPS, an emerging payment platform that aims to integrate personal payment accounts on third-party platforms with an independent order management platform, still faces challenges in security and usability despite its popularity. In this section, different attacks are grouped and analyzed from various perspectives to shed light on the security of this new system in the future.

#### 5.1 Flaws Classification
The vulnerable patterns described in Section 3 fall into either protocol or implementation issues:
- **PPS Protocol Vulnerability**: Protocol vulnerabilities are due to insecure design in the payment protocol, making it difficult for merchants to correct them independently. Among the seven vulnerabilities, unprotected Key Changing API, simple String Concatenation in Token Generation, MD5-based Token Generation, Lacking Order Examining Mechanisms, and No Paid Value in Order Inquiry fall into this category.
- **Implementation Vulnerability**: These vulnerabilities are often business and implementation-specific, caused by a lack of understanding of either the PPS API or secure design. Local Order Generation and Local KEY Storage are the two major vulnerabilities in this category. Correcting these problems is easier, requiring changes only at the client side.

#### 5.2 Attack Classification
Based on the attack motivation, the five attacks proposed in Section 3 can be grouped into three categories:
- **Malicious User Attack**: In this category, an attacker manipulates their own client to benefit themselves, such as by reducing the price of the item under purchase. The attacks of Order Tampering with KEY, String Shift in Order Packet, and MD5 Signature Collision fall into this category.
- **Victim-Oriented Attack**: In this attack, the adversary intercepts the communication packets between other users (victim MC) and MS. The goal is to achieve financial gain by manipulating network packets. The Payment Substitution attack belongs to this category.
- **Merchant-Oriented Attack**: An attacker in this category primarily aims to attack the merchant or other users from the Internet, without access to the victim’s traffic or devices. Malicious KEY Changing belongs to this type.

From the perspective of merchants, the following changes might be beneficial:
1. Keys should never be stored at the client side.
2. Order parameters should be generated and signed at the server, then transmitted to the user client.
3. Check the actual paid value for each order when receiving the payment notification.

Finally, users need to carefully check order information:
1. Always check the payment attribution information, such as the order ID, before making a payment.
2. Avoid making payments over insecure links.

### 6. Related Work
[This section would typically cover relevant literature and previous research in the field, comparing and contrasting the findings of the current study with existing work. Detailed content for this section would depend on the specific context and scope of the study.]