### AdSentry: Enhancing Security and Privacy for JavaScript-based Advertisements

#### Introduction
AdSentry is a comprehensive and flexible framework designed to confine untrusted JavaScript advertisements, thereby protecting user privacy and web application integrity. This document outlines the current limitations of AdSentry, discusses related work, and presents our conclusions.

#### Current Limitations and Future Work

1. **Support for Different Ad Types**:
   - AdSentry currently supports a limited set of advertisement types and has not yet explored the integration of other popular ad formats, such as Flash. Investigating how to support Flash-based ads is a future direction for the project.

2. **Protection Against Browser Component Attacks**:
   - While AdSentry effectively protects browsers from attacks that exploit vulnerabilities in the JavaScript engine, it does not address attacks on other browser components, such as the HTML rendering engine. If malicious HTML segments are dynamically generated by JavaScript, AdSentry’s policy engine can mitigate these attacks through HTML normalization and signature-based blocking. A more general solution would be to extend AdSentry to isolate other browser components.

3. **JavaScript Compatibility**:
   - Our prototype implementation handles typical JavaScript advertisements with limited interaction with the rest of the web page. However, third-party JavaScript code often integrates tightly with the web page. Future work will focus on improving AdSentry's compatibility with a broader range of JavaScript code, including transparently isolating more complex scripts. Additionally, we will explore automated testing methods to ensure AdSentry's compatibility with a wider set of web applications.

#### Related Work

1. **Drive-by Download Prevention**:
   - Drive-by downloads pose significant threats to web and host security. Systems like BLADE [25] and WebShield [21] have been proposed to detect and prevent such attacks. These solutions leverage specific memory characteristics or use middlebox frameworks to process page content in a shadow browser. Unlike AdSentry, these solutions do not specifically protect against malicious JavaScript ads.

2. **Isolation in Web Browsers**:
   - Several research projects aim to improve browser security by running different components in isolated environments. For example, Google Chrome uses a sandbox to isolate browser components [8, 29], and IBOS [42] designs a secure architecture for both the operating system and the web browser. However, these solutions do not support isolating JavaScript ads, while AdSentry executes untrusted ad scripts in a separate, sandboxed environment.

3. **Web Application Integrity Protection**:
   - Solutions like ADsafe [10] and ConScript [30] restrict dangerous JavaScript functionality or introduce aspects into the language to enforce security rules. Other approaches, such as MashupOS [45], propose new script integration primitives. AdSentry allows both web publishers and end users to specify access control policies, providing flexible control over JavaScript ads.

4. **Privacy Protection**:
   - Privacy concerns with JavaScript ads are addressed by solutions like PriVad [18] and Adnostic [43]. PriVad makes users anonymous to advertisers, while Adnostic uses a browser extension to perform ad targeting. These solutions focus on privacy but do not address the threat to web application integrity and operating system security, which AdSentry does.

#### Conclusion

JavaScript-based advertisements are prevalent on the Internet and pose significant threats to user privacy and web application integrity. AdSentry is a comprehensive and flexible framework that confines untrusted JavaScript advertisements. It separates untrusted ad execution in a shadow JavaScript engine and mediates their access to the main page with access control policies. Our Linux-based prototype, implemented for Firefox browsers, has shown effectiveness in blocking various ad-related exploits with minimal performance overhead.

#### Acknowledgments

We thank Michael Wright for his help in investigation and implementation. We also thank the anonymous reviewers for their insightful comments. This work is supported in part by an NUS Young Investigator Award, the US Army Research Office (ARO), and the US National Science Foundation (NSF).

#### References

[1] Common Vulnerabilities and Exposures. http://cve.mitre.org/.

[2] FBJS (Facebook JavaScript). http://developers.facebook.com/docs/fbjs/.

[3] Firebug. Web Development Evolved. http://getfirebug.com/.

[4] Google Caja. http://code.google.com/p/google-caja/.

[5] Quirk Mode. http://en.wikipedia.org/wiki/Quirk_mode.

[6] Tag Soup. http://en.wikipedia.org/wiki/Tag_soup.

[7] XSS (Cross Site Scripting) Cheat Sheet. http://ha.ckers.org/xss.html.

[8] A. Barth, C. Jackson, C. Reis, and The Google Chrome Team. The Security Architecture of the Chromium Browser. http://seclab.stanford.edu/websec/chromium/.

[9] R. S. Cox, S. D. Gribble, H. M. Levy, and J. G. Hansen. A Safety-Oriented Platform for Web Applications. In IEEE Symposium on Security and Privacy, 2006.

[10] D. Crockford. ADsafe. http://www.adsafe.org/.

[11] Y. Ding, T. Wei, T. Wang, Z. Liang, and W. Zou. Heap Taichi: Exploiting Memory Allocation Granularity in Heap-Spraying Attacks. In Proceedings of the 26th Annual Computer Security Applications Conference (ACSAC), 2010.

[12] M. Egele, P. Wurzinger, C. Kruegel, and E. Kirda. Defending Browsers Against Drive-By Downloads: Mitigating Heap-Spraying Code Injection Attacks. In Proceedings of the 6th Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA), 2009.

[13] M. Finifter, J. Weinberger, and A. Barth. Preventing Capability Leaks in Secure JavaScript Subsets. In Proc. of Network and Distributed System Security Symposium, 2010.

[14] Goldberg, Wagner, Thomas, and Brewer. A Secure Environment for Untrusted Helper Applications: Confining the Wily Hacker. In Proceedings of the 5th USENIX Security Symposium, 1996.

[15] Google Inc. Google Fiscal Year 2010 Results, 2010. http://investor.google.com/earnings/2010/Q4_google_earnings.html.

[16] C. Grier, S. Tang, and S. King. Secure Web Browsing with the OP Web Browser. In IEEE Symposium on Security and Privacy, 2008.

[17] S. Guarnieri and B. Livshits. Gatekeeper: Mostly Static Enforcement of Security and Reliability Policies for JavaScript Code. In Proceedings of the 18th conference on USENIX security symposium, SSYM’09, pages 151–168, Berkeley, CA, USA, 2009. USENIX Association.

[18] S. Guha, B. Cheng, A. Reznichenko, H. Haddadi, and P. Francis. Privad: Rearchitecting Online Advertising for Privacy. Technical Report MPI-SWS-2009-004, Max Planck Institute for Software Systems, Germany, 2009.

[19] S. Isaacs and D. Manolescu. WebSandbox - Microsoft Live Labs. http://websandbox.livelabs.com/, 2009.

[20] D. Jang, R. Jhala, S. Lerner, and H. Shacham. An Empirical Study of Privacy-Violating Information Flows in JavaScript Web Applications. In Proceedings of the 17th ACM Conference on Computer and Communications Security (CCS), 2010.

[21] Z. Li, T. Yi, Y. Cao, V. Rastogi, Y. Chen, B. Liu, and C. Sbisa. WebShield: Enabling Various Web Defense Techniques Without Client-Side Modifications. In Proceedings of the 18th Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, USA, 2011.

[22] Z. Liang, V. Venkatakrishnan, and R. Sekar. Isolated Program Execution: An Application-Transparent Approach for Executing Untrusted Programs. In Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC), 2003.

[23] M. T. Louw, K. T. Ganesh, and V. Venkatakrishnan. AdJail: Practical Enforcement of Confidentiality and Integrity Policies on Web Advertisements. In Proceedings of the 19th USENIX Security Symposium, 2010.

[24] M. T. Louw and V. Venkatakrishnan. Blueprint: Robust Prevention of Cross-Site Scripting Attacks for Existing Browsers. In Proceedings of the 30th IEEE Symposium on Security and Privacy, 2009.

[25] L. Lu, V. Yegneswaran, P. Porras, and W. Lee. BLADE: An Attack-Agnostic Approach for Preventing Drive-By Malware Infections. In Proceedings of the 17th ACM Conference on Computer and Communications Security, 2010.

[26] S. Maffeis, J. Mitchell, and A. Taly. Run-Time Enforcement of Secure JavaScript Subsets. In Proc of W2SP’09. IEEE, 2009.

[27] S. Maffeis and A. Taly. Language-Based Isolation of Untrusted JavaScript. In Proceedings of the 2009 22nd IEEE Computer Security Foundations Symposium, pages 77–91, Washington, DC, USA, 2009. IEEE Computer Society.

[28] Matthew. Facebook’s Response to Uproar Over Ads. http://endofweb.co.uk/2009/07/facebook_ads_2/.

[29] S. McCloud. The Chrome Comic Book, 2008. http://www.google.com/googlebooks/chrome/index.html.

[30] L. A. Meyerovich and B. Livshits. ConScript: Specifying and Enforcing Fine-Grained Security Policies for JavaScript in the Browser. In Proceedings of the 31st IEEE Symposium on Security and Privacy, 2010.

[31] Mozilla. Bugzilla@Mozilla. https://bugzilla.mozilla.org/.

[32] Mozilla. Components.utils.evalInSandbox. https://developer.mozilla.org/en/Components.utils.evalInSandbox.

[33] R. Naraine. Research: 1.3 Million Malicious Ads Viewed Daily. http://threatpost.com/en_us/blogs/research-13-million-malicious-ads-viewed-daily-051910.

[34] W. Palant. Adblock Plus. https://addons.mozilla.org/en-US/firefox/addon/adblock-plus/.

[35] P. H. Phung, D. Sands, and A. Chudnov. Lightweight Self-Protecting JavaScript. In Proceedings of the 4th International Symposium on Information, Computer, and Communications Security, ASIACCS ’09, 2009.

[36] J. G. Politz, S. A. Eliopoulos, A. Guha, and S. Krishnamurthi. ADsafety Type-Based Verification of JavaScript Sandboxing. In Proceedings of the 20th USENIX Security Symposium, San Francisco, CA, USA, 2011.

[37] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose. All Your Iframes Point to Us. In Proceedings of the 17th USENIX Security Symposium, pages 1–15, 2008.

[38] N. Provos, D. McNamee, P. Mavrommatis, K. Wang, and N. Modadugu. The Ghost in the Browser: Analysis of Web-Based Malware. In Proceedings of the First Workshop on Hot Topics in Understanding Botnets, pages 4–4, Berkeley, CA, USA, 2007. USENIX Association.

[39] P. Ratanaworabhan, B. Livshits, and B. Zorn. NOZZLE: A Defense Against Heap-Spraying Code Injection Attacks. In Proceedings of the 18th USENIX Security Symposium, 2009.

[40] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir. BrowserShield: Vulnerability-Driven Filtering of Dynamic HTML. In Proceedings of the 7th Symposium on Operating Systems Design and Implementation (OSDI), 2006.

[41] D. Sehr, R. Muth, C. Biffler, V. Khimenko, E. Pasko, K. Schimpf, B. Yee, and B. Chen. Adapting Software Fault Isolation to Contemporary CPU Architectures. In Proceedings of the 19th USENIX Security Symposium, 2010.

[42] S. Tang, H. Mai, and S. T. King. Trust and Protection in the Illinois Browser Operating System. In Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation, OSDI’10, pages 1–8, Berkeley, CA, USA, 2010. USENIX Association.

[43] V. Toubiana, A. Narayanan, and D. Boneh. Adnostic: Privacy-Preserving Targeted Advertising. In Proceedings of the 17th Annual Network and Distributed System Security Symposium (NDSS), 2010.

[44] W3C. Document Object Model (DOM) Specifications. http://www.w3.org/DOM/DOMTR.

[45] H. J. Wang, X. Fan, J. Howell, and C. Jackson. Protection and Communication Abstractions for Web Browsers in MashupOS. In Proceedings of the Twenty-First ACM SIGOPS Symposium on Operating Systems Principles, SOSP ’07, pages 1–16, New York, NY, USA, 2007. ACM.

[46] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choudhury, and H. Venter. The Multi-Principal OS Construction of the Gazelle Web Browser. In Proceedings of the 18th Conference on USENIX Security Symposium, SSYM’09, pages 417–432, Berkeley, CA, USA, 2009. USENIX Association.

[47] Wikipedia. Online Advertising - Revenue Models. http://en.wikipedia.org/wiki/Online_advertising#Revenue_models.

[48] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar. Native Client: A Sandbox for Portable, Untrusted x86 Native Code. In Proceedings of the 30th IEEE Symposium on Security and Privacy, 2009.

[49] D. Yu, A. Chander, N. Islam, and I. Serikov. JavaScript Instrumentation for Browser Security. In Proceedings of the 34th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), 2007.