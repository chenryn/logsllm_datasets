### Reproduction and Distribution Authorization

The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes, notwithstanding any copyright notation. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of DARPA or the U.S. Government.

**Authorized licensed use limited to: Tsinghua University. Downloaded on August 07, 2022 at 12:23:40 UTC from IEEE Xplore. Restrictions apply.**

---

### References

1. **Cream Finance Post-Mortem: AMP Exploit**
   - URL: [https://medium.com/cream-finance/c-r-e-a-m-finance-post-mortem-amp-exploit-6ceb20a630c5](https://medium.com/cream-finance/c-r-e-a-m-finance-post-mortem-amp-exploit-6ceb20a630c5)

2. **Echidna**
   - GitHub: [https://github.com/crytic/echidna](https://github.com/crytic/echidna)
   - Accessed: 07/27/2020

3. **Mythril**
   - GitHub: [https://github.com/ConsenSys/mythril](https://github.com/ConsenSys/mythril)
   - Accessed: 07/27/2020

4. **Panoramix Decompiler**
   - GitHub: [https://github.com/palkeo/panoramix](https://github.com/palkeo/panoramix)

5. **Rattle: EVM Static Analysis Framework**
   - GitHub: [https://github.com/crytic/rattle](https://github.com/crytic/rattle)

6. **Real Estate Business Smart Contracts**
   - URL: [https://tinyurl.com/yawrkfpx/](https://tinyurl.com/yawrkfpx/)
   - Accessed: 01/09/2019

7. **Reentering the Reentrancy Bug: Disclosing Burgerswap’s Vulnerability**
   - URL: [https://www.zengo.com/burgerswap-vulnerability/](https://www.zengo.com/burgerswap-vulnerability/)
   - Accessed: 10/22/2020

8. **The Reentrancy Strikes Again - The Case of Lendf.Me**
   - URL: [https://valid.network/post/the-reentrancy-strikes-again-the-case-of-lendf-me](https://valid.network/post/the-reentrancy-strikes-again-the-case-of-lendf-me)
   - URL: [https://tinyurl.com/yavel7xe/](https://tinyurl.com/yavel7xe/)

9. **SWC-114: Transaction Order Dependence Attack**
   - URL: [https://swcregistry.io/docs/SWC-114](https://swcregistry.io/docs/SWC-114)
   - Accessed: 04/26/2020

10. **The DAO Attack**
    - URL: [https://www.coindesk.com/understanding-dao-hack-journalists](https://www.coindesk.com/understanding-dao-hack-journalists)
    - Accessed: 04/26/2020

11. **Governmental’s 1100 ETH Payout is Stuck Because It Uses Too Much Gas**
    - URL: [https://tinyurl.com/y83dn2yf/](https://tinyurl.com/y83dn2yf/)
    - Accessed: 01/09/2019

12. **Manticore**
    - GitHub: [https://github.com/trailofbits/manticore/](https://github.com/trailofbits/manticore/)
    - Year: 2016

13. **On the Parity Wallet Multisig Hack**
    - URL: [https://tinyurl.com/yca83zsg/](https://tinyurl.com/yca83zsg/)
    - Year: 2017

14. **Understanding the DAO Attack**
    - URL: [https://tinyurl.com/yc3o8ffk/](https://tinyurl.com/yc3o8ffk/)
    - Year: 2017

15. **Etherscan**
    - URL: [https://etherscan.io/](https://etherscan.io/)
    - Accessed: 01/09/2019

16. **Exploiting Uniswap from Reentrancy to Actual Profit**
    - URL: [https://blog.openzeppelin.com/exploiting-uniswap-from-reentrancy-to-actual-profit/](https://blog.openzeppelin.com/exploiting-uniswap-from-reentrancy-to-actual-profit/)
    - Year: 2019

17. **Sereum Repository**
    - GitHub: [https://github.com/uni-due-syssec/eth-reentrancy-attack-patterns/](https://github.com/uni-due-syssec/eth-reentrancy-attack-patterns/)
    - Year: 2019

18. **Celery - Distributed Task Queue**
    - URL: [https://celeryproject.org](https://celeryproject.org)
    - Year: 2020

19. **Demand-Driven Compositional Symbolic Execution**
    - Authors: Saswat Anand, Patrice Godefroid, and Nikolai Tillmann
    - Conference: Tools and Algorithms for the Construction and Analysis of Systems (TACAS), 2008

20. **A Survey of Attacks on Ethereum Smart Contracts (SoK)**
    - Authors: Nicola Atzei, Massimo Bartoletti, and Tiziana Cimoli
    - Conference: Principles of Security and Trust (POST), 2017

21. **Statically-Directed Dynamic Automated Test Generation**
    - Authors: Domagoj Babić, Lorenzo Martignoni, Stephen McCamant, and Dawn Song
    - Conference: International Symposium on Software Testing and Analysis, 2011

22. **Vandal: A Scalable Security Analysis Framework for Smart Contracts**
    - Authors: Lexi Brent, Anton Jurisevic, Michael Kong, Eric Liu, Francois Gauthier, Vincent Gramoli, Ralph Holz, and Bernhard Scholz
    - Year: 2018

23. **SYS: A Static/Symbolic Tool for Finding Good Bugs in Good (Browser) Code**
    - Authors: Fraser Brown, Deian Stefan, and Dawson Engler
    - Conference: 29th USENIX Security Symposium (USENIX Security), 2020

24. **Compositional Security for Reentrant Applications**
    - Authors: Ethan Cecchetti, Siqiu Yao, Haobin Ni, and Andrew C. Myers
    - Conference: IEEE Symposium on Security and Privacy (SP), 2021

25. **SODA: A Generic Online Detection Framework for Smart Contracts**
    - Authors: Ting Chen, Rong Cao, Ting Li, Xiapu Luo, Yufei Zhang, Zhou Liao, Hang Zhu, Gang Chen, Zheyuan He, Xiaodong Lin, and Xiaosong Zhang
    - Conference: Network and Distributed System Security Symposium, 2020

26. **Verifying Systems Rules Using Rule-Directed Symbolic Execution**
    - Authors: Heming Cui, Gang Hu, Jingyue Wu, and Junfeng Yang
    - Journal: SIGARCH Comput. Archit. News, 2013

27. **Slither: A Static Analysis Framework for Smart Contracts**
    - Authors: J. Feist, G. Grieco, and A. Groce
    - Conference: IEEE/ACM 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB), 2019

28. **Finding the Needle in the Heap: Combining Static Analysis and Dynamic Symbolic Execution to Trigger Use-After-Free**
    - Authors: Josselin Feist, Laurent Mounier, Sébastien Bardin, Robin David, and Marie-Laure Potet
    - Conference: 6th Workshop on Software Security, Protection, and Reverse Engineering, 2016

29. **Precise Attack Synthesis for Smart Contracts**
    - Authors: Yu Feng, Emina Torlak, and Rastislav Bodik
    - Preprint: arXiv:1902.06067, 2019

30. **Summary-Based Symbolic Evaluation for Smart Contracts**
    - Authors: Yu Feng, Emina Torlak, and Rastislav Bodík
    - Conference: 35th IEEE/ACM International Conference on Automated Software Engineering (ASE), 2020

31. **ETHBMC: A Bounded Model Checker for Smart Contracts**
    - Authors: Joel Frank, Cornelius Aschermann, and Thorsten Holz
    - Conference: 29th USENIX Security Symposium (USENIX Security), 2020

32. **Directed Dynamic Symbolic Execution for Static Analysis Warnings Confirmation**
    - Author: A. Yu. Gerasimov
    - Journal: Program. Comput. Softw., 2018

33. **Compositional Dynamic Test Generation**
    - Author: Patrice Godefroid
    - Conference: 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), 2007

34. **Gigahorse: Thorough, Declarative Decompilation of Smart Contracts**
    - Authors: Neville Grech, Lexi Brent, Bernhard Scholz, and Yannis Smaragdakis
    - Conference: IEEE/ACM 41st International Conference on Software Engineering (ICSE), 2019

35. **MadMax: Surviving Out-of-Gas Conditions in Ethereum Smart Contracts**
    - Authors: Neville Grech, Michael Kong, Anton Jurisevic, Lexi Brent, Bernhard Scholz, and Yannis Smaragdakis
    - Conference: Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA), 2018

36. **Online Detection of Effectively Callback Free Objects with Applications to Smart Contracts**
    - Authors: Shelly Grossman, Ittai Abraham, Guy Golan-Gueta, Yan Michalevsky, Noam Rinetzky, Mooly Sagiv, and Yoni Zohar
    - Conference: Symposium on Principles of Programming Languages, 2018

37. **Conc-ise: Incremental Symbolic Execution of Concurrent Software**
    - Authors: Shengjian Guo, Markus Kusano, and Chao Wang
    - Conference: 31st IEEE/ACM International Conference on Automated Software Engineering, 2016

38. **Assertion Guided Symbolic Execution of Multithreaded Programs**
    - Authors: Shengjian Guo, Markus Kusano, Chao Wang, Zijiang Yang, and Aarti Gupta
    - Conference: 2015 10th Joint Meeting on Foundations of Software Engineering, 2015

39. **ContractFuzzer: Fuzzing Smart Contracts for Vulnerability Detection**
    - Authors: Bo Jiang, Ye Liu, and W. K. Chan
    - Conference: International Conference on Automated Software Engineering, 2018

40. **Semantic Understanding of Smart Contracts: Executable Operational Semantics of Solidity**
    - Authors: J. Jiao, S. Kan, S. Lin, D. Sanan, Y. Liu, and J. Sun
    - Conference: IEEE Symposium on Security and Privacy (SP), 2020

41. **ZEUS: Analyzing Safety of Smart Contracts**
    - Authors: Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh Sharma
    - Conference: Network and Distributed System Security Symposium, 2018

42. **Exploiting the Laws of Order in Smart Contracts**
    - Authors: Aashish Kolluri, Ivica Nikolic, Ilya Sergey, Aquinas Hobor, and Prateek Saxena
    - Conference: 28th ACM SIGSOFT International Symposium on Software Testing and Analysis, 2019

43. **Teether: Gnawing at Ethereum**
    - Authors: Johannes Krupp and Christian Rossow
    - Conference: USENIX Security Symposium, 2018

44. **Precise Static Modeling of Ethereum Memory**
    - Authors: Sifis Lagouvardos, Neville Grech, Ilias Tsatiris, and Yannis Smaragdakis
    - Year: 2020

45. **Making Smart Contracts Smarter**
    - Authors: Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas Hobor
    - Conference: Computer and Communications Security, 2016

46. **SFuzz: An Efficient Adaptive Fuzzer for Solidity Smart Contracts**
    - Authors: Tai Nguyen, Long Pham, Jun Sun, Yun Lin, and Minh Quang Tran
    - Conference: International Conference on Software Engineering, 2020

47. **Smart Contract Vulnerabilities: Vulnerable Does Not Imply Exploited**
    - Authors: Daniel Perez and Ben Livshits
    - Conference: 30th USENIX Security Symposium (USENIX Security), 2021

48. **A Fast and Low-Overhead Technique to Secure Programs Against Integer Overflows**
    - Authors: Fernando Magno Quintao Pereira, Raphael Ernani Rodrigues, and Victor Hugo Sperle Campos
    - Conference: IEEE/ACM International Symposium on Code Generation and Optimization (CGO), 2013

49. **Sereum: Protecting Existing Smart Contracts Against Re-Entrancy Attacks**
    - Authors: Michael Rodler, Wenting Li, Ghassan O. Karame, and Lucas Davi
    - Conference: 26th Annual Network and Distributed System Security Symposium (NDSS), 2019

50. **Ethor: Practical and Provably Sound Static Analysis of Ethereum Smart Contracts**
    - Authors: Clara Schneidewind, Ilya Grishchenko, Markus Scherer, and Matteo Maffei
    - Conference: Computer and Communications Security, 2020

51. **SmartCheck: Static Analysis of Ethereum Smart Contracts**
    - Authors: Sergei Tikhomirov, Ekaterina Voskresenskaya, Ivan Ivanitskiy, Ramil Takhaviev, Evgeny Marchenko, and Yaroslav Alexandrov
    - Conference: 1st International Workshop on Emerging Trends in Software Engineering for Blockchain, 2018

52. **A Lightweight Symbolic Virtual Machine for Solver-Aided Host Languages**
    - Authors: Emina Torlak and Rastislav Bodík
    - Conference: Programming Language Design and Implementation, 2014

53. **Securify: Practical Security Analysis of Smart Contracts**
    - Authors: Petar Tsankov, Andrei Marian Dan, Dana Drachsler-Cohen, Arthur Gervais, Florian Bünzli, and Martin T. Vechev
    - Conference: Computer and Communications Security, 2018

54. **Detecting Nondeterministic Payment Bugs in Ethereum Smart Contracts**
    - Authors: Shuai Wang, Chengyu Zhang, and Zhendong Su
    - Conference: ACM Program. Lang., 3(OOPSLA), 2019

55. **Harvey: A Greybox Fuzzer for Smart Contracts**
    - Authors: Valentin Wüstholz and Maria Christakis
    - Preprint: ArXiv, abs/1905.06944, 2019

---

### Cross-Function Reentrancy

Figure 13 presents a simplified real-world contract that is vulnerable to a cross-function reentrancy attack due to a Destructive Write (DW). An attacker can set both `item_1.creator` (Line 11) and `item_1.game` (Line 12) to arbitrary values by invoking `funcB()`. In `funcA()`, an amount `amt` is transferred to `item_1.creator` through `transferFrom`, which is an external call. Therefore, when the external call is underway, the attacker can call `funcB()` to reset both `item_1.creator` and `item_1.game`. Consequently, `item_1.fee` gets transferred to a different address when Line 6 is executed.

```solidity
function funcA(to, amt) public {
    // ...
    item_1.creator.transfer(item_1.fee);
    // ...
}

function funcB(_creator, _game) {
    item_1.creator = _creator;
    item_1.game = _game;
}
```

### Delegate-Based Reentrancy

Figure 14 presents a real-world contract that is vulnerable to a delegate-based reentrancy attack. The contract contains three functions:
- `funcA` contains the `delegatecall`.
- `funcB` allows application data to be modified if the assertion is satisfied.
- `funcC` contains an untrusted external call.

A malicious payload can be injected into the `_data` argument of `funcA`, which, in turn, invokes `funcC()` with a tainted destination `_to`. The receiver at Line 14 is now controlled by the attacker, allowing them to re-enter `funcB` with `__isTokenFallback` inconsistently set to `true`, rendering the assertion at Line 8 useless.

```solidity
function funcA(bytes _data) {
    __isTokenFallback = true;
    address(this).delegatecall(_data);
    __isTokenFallback = false;
}

function funcB() {
    assert(__isTokenFallback);
    // Write to application data
}

function funcC(address _to) {
    Receiver receiver = Receiver(_to);
    receiver.tokenFallback(...);
}
```

### CREAM Finance Reentrancy Attack

On August 31, 2021, a reentrancy vulnerability in the CREAM Finance decentralized lending protocol was exploited, resulting in the theft of 462,079,976 AMP tokens and 2,804.96 Ethers [1]. The attack involved two contracts: the CREAM Finance contract `C` and the AMP token (ERC777) contract `A`. The `borrow()` method of `C` was the entry point for the attack.

**Figure 12: Relative Speedup Due to Value Summary Over a Path-by-Path Function Summary.**

---

**Authorized licensed use limited to: Tsinghua University. Downloaded on August 07, 2022 at 12:23:40 UTC from IEEE Xplore. Restrictions apply.**