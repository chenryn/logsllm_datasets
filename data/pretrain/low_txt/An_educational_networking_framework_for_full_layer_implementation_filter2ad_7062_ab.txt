### Overview of the Testing Framework

The testing framework is composed of three main components: specification tests, pairing tests, and logic tests.

#### Specification Tests
Specification tests validate the input parameters and return values of standard system calls. This includes checking the return value and the content of the buffer. For example, a test might verify if the TCP driver detects a collision with an existing port number when calling the `bind()` system call. These tests must also be repeated with different orders of system call events and packet events, as the execution result depends on their sequence. To achieve this, our test suite enumerates every possible ordering. Figure 5 illustrates two different cases for `accept()`: "returning an already established connection" and "blocking until a new connection has arrived."

#### Pairing Tests
Pairing tests ensure that the code behaves correctly in conjunction with its counterpart. This is crucial because communication can fail regardless of the results from specification tests. Pairing tests check whether data transmitted from one side is received correctly at the other side. For instance, even though the `write()` system call may report the success of a transmission, packets could still be dropped or unrecognized in the lower layers or in the `read()` implementation running at the destination virtual host due to bugs.

#### Logic Tests
Logic tests validate the implementation's conformance to runtime requirements, such as congestion control. Neither specification nor pairing tests cover the correctness of context-dependent runtime behavior, as they are black-box approaches that confirm execution results statically. For example, unsolicited or duplicate ACKs are dependent on the TCP protocol states and are not straightforward to validate. We leverage existing analysis tools for logic tests, which significantly reduce our development effort and make our framework easy to maintain. The framework generates packet traces in the widely-used PCAP format. We use Wireshark, which provides context-dependent protocol checks such as advanced TCP filters verifying SEQ/ACK numbers. For simpler tests, we use Packetdrill, which provides packet-level assertions to verify constant fields and checksums.

### KENSv2 Assignments

We are currently using the prototype of the KENSv2 framework in a computer networks course for undergraduate students as a programming assignment. The goal is to help students understand how actual network layers operate by requiring them to participate in TCP implementation.

#### Student Tasks
Students are expected to:
- Manipulate protocol headers properly.
- Demultiplex flows from the lower layer.
- Multiplex flows from the upper layer.
- Manage context for demultiplexed flows.
- Implement functions according to the protocol specification.

#### Excluded Tasks
Tasks we do not want students to handle include:
- Managing multiple threads and protecting critical regions.
- Connecting their network stacks with other pre-built network stacks.
- Re-inventing commonly used data structures (e.g., lists, maps).
- Addressing platform compatibility issues.

#### Assignment Schedule
The TCP layer implementation is split into a series of small tasks (sub-assignments) as follows:
- **Week 1:** Assigning a TCP context for each socket creation request.
- **Week 2:** Implementing basic `accept()` and `connect()` protocols.
- **Week 3-4:** Data transfer on reliable network connections.
- **Week 5:** Data transfer and connection establishment on unreliable network connections.
- **Week 6:** Implementing a basic AIMD congestion algorithm.

Students are given two weeks to submit each sub-assignment, with a week off between each assignment. We provide only abstract function interfaces, leaving the implementation details to the students' discretion.

In Spring 2014, 49 students participated in the project, supervised by 3 TAs. Students worked in pairs, and the final submissions consisted of hundreds to 2K lines of code.

### Evaluation of Students' Submissions

#### Correctness of System Call Functionality
Each system call implementation must satisfy certain functionalities, such as:
- Finding existing TCP context with port number/IP address.
- Checking for port number collisions while binding addresses to sockets.
- Returning the correct socket address on `getsockname()`.
- Managing backlogs.

Our test suite contains assert statements for system calls in various execution environments. We place virtual system events to cover every TCP state transition and include tests for complex situations. Figure 6 shows corner cases for the `bind()` system call. We verify functionalities by checking whether the students' implementations pass all asserts.

#### Correctness of Data Transfer
The core function of TCP is to send data from one end to the other. We verify this by comparing the sent data and the received data byte-by-byte. This transmission request is handled by a virtual user application that generates proper system call requests (socket-connect-write-close).

### Example Test Results

#### Test Listen
- **Suite:** testListen
- **Tests:**
  - __testListen_Accept_Before_Connect: Passed
  - __testListen_Accept_After_Connect: Passed
  - __testListen_Accept_Multiple: Passed
  - __testListen_Multiple_Interfaces: Passed
- **Summary:**
  - Suites: 1
  - Tests: 4
  - Asserts: 145
  - Elapsed time: 0.000 seconds

#### Test Bind
- **Suite:** testBind
- **Tests:**
  - __testBind_Simple: Passed
  - __testBind_GetSockName: Passed
  - __testBind_DoubleBind: Passed
  - __testBind_OverlapPort: Passed
  - __testBind_OverlapClosed: Passed
  - __testBind_DifferentIP_SamePort: Failed
    - CU_ASSERT_EQUAL(err, 0)
    - CU_ASSERT_TRUE(ret)
  - __testBind_SameIP_DifferentPort: Passed
- **Summary:**
  - Suites: 1
  - Tests: 7
  - Asserts: 60
  - Elapsed time: 0.000 seconds

### Acknowledgements

KENSv2 is based on KENS (KAIST Educational Network System) developed by Junehwa Song and his students. We are grateful to Yejin Park and Junhyun Shim for their help with writing. This work was supported by the Basic Science Research Program by the National Research Foundation of Korea (NRF) of MSIP (2014R1A2A1A01007580).

### References

1. James F Kurose and Keith W Ross. Computer Networking: A Top-Down Approach Featuring the Internet. Pearson Education India, 2005.
2. Dan Wendlandt, Martin Casado, Paul Tarjan, and Nick McKeown. The Clack Graphical Router: Visualizing Network Software. In Proceedings of the 2006 ACM Symposium on Software Visualization, pages 7–15. ACM, 2006.
3. John DeHart, Fred Kuhns, Jyoti Parwatikar, Jonathan Turner, Charlie Wiseman, and Ken Wong. The Open Network Laboratory. In ACM SIGCSE Bulletin. ACM, 2006.
4. Martin Casado and Nick McKeown. The Virtual Network System. In ACM SIGCSE Bulletin. ACM, 2005.
5. Bob Lantz, Brandon Heller, and Nick McKeown. A Network in a Laptop: Rapid Prototyping for Software-Defined Networks. In ACM SIGCOMM HotNets. ACM, 2010.
6. Nikhil Handigol, Brandon Heller, Vimalkumar Jeyakumar, Bob Lantz, and Nick McKeown. Reproducible Network Experiments Using Container-Based Emulation. In Proceedings of the 8th International Conference on Emerging Networking Experiments and Technologies, pages 253–264. ACM, 2012.
7. Ben Pfaff, Anthony Romano, and Godmar Back. The Pintos Instructional Operating System Kernel. In ACM SIGCSE Bulletin, volume 41, pages 453–457. ACM, 2009.
8. Luigi Rizzo. Netmap: A Novel Framework for Fast Packet I/O. In USENIX ATC, 2012.
9. PacketShader I/O Engine. github.com/PacketShader/Packet-IO-Engine.
10. Intel DPDK (Data Plane Development Kit). https://dpdk.org.
11. Marko Lackovic, Robert Inkret, and Miljenko Mikuc. An Approach to Education-Oriented TCP Simulation. In SoftCOM 2002: International Conference on Software, Telecommunications and Computer Networks, pages 181–185, 2002.
12. Matt Mathis, John Heffner, and Raghu Reddy. Web100: Extended TCP Instrumentation for Research, Education and Diagnosis. ACM SIGCOMM Computer Communication Review, 33(3):69–79, 2003.
13. Neal Cardwell, Yuchung Cheng, Lawrence Brakmo, Matt Mathis, Barath Raghavan, Nandita Dukkipati, Hsiao-keng Jerry Chu, Andreas Terzis, and Tom Herbert. Packetdrill: Scriptable Network Stack Testing, from Sockets to Packets. In USENIX Annual Technical Conference, pages 213–218, 2013.

### Summary and Future Work

KENSv2 is an educational framework for transport and network layer implementation that supports:
- Realistic Protocol Implementation
- Incremental Development
- Automated Test Suite
- Packet Level Inspection

Our improvements are based on eight years of accumulated lab experiences. In Spring 2014, we experienced benefits from these improvements, managing TCP assignments for 49 students with 3 TAs, which is half the number of TAs needed in the previous semester. We plan to release the refactored framework as open-source software and encourage other universities to try KENSv2.

Future extensions for KENSv2 include:
- Extending the automated test suite to cover the IP layer.
- Redesigning KENSv2’s data link layer as a generalized adapter for various underlying packet I/O schemes.
- Adding an IPv6 layer.
- Extending the system call abstraction layer to cover every system call with a unified interface.