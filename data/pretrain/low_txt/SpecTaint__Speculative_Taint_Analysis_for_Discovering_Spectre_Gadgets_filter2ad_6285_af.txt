### Length History and Increment Operation

```c
len = code_len;
len++;
```

**Listing 7: A false positive in Brotli detected by SpecTaint.**

### False Positives in Detection

In this section, we discuss scenarios where detected gadgets are not exploitable. 

1. **Short-Resolution Triggers:**
   When the triggering instruction can be resolved quickly, such as in loops or constant comparisons, the subsequent gadgets cannot be executed before the speculation is resolved. However, SpecTaint would still simulate speculative execution with the default SEW (Speculative Execution Window) and detect the following gadgets that match the predefined pattern.

2. **Large SEW Triggers:**
   When the triggering instruction opens a large SEW (e.g., due to a cache miss), SpecTaint may produce false positives. For example, SpecTaint detects a Spectre gadget in Brotli as shown in Listing 7. In this case, `code_len` is tainted, originating from user inputs. If the branch at line 4 is mispredicted and the CPU speculatively executes the function `ProcessSingleCodeLength`, it would pass an out-of-bounds `code_len` to the function at line 17. The out-of-bounds `code_len` is used as an index to access the array `next_symbol`, and the loaded value is further used as an index to access another array `symbol_list`. Thus, the attack can retrieve the out-of-bound value by monitoring the cache state. In practice, this gadget is difficult to exploit for a Spectre V1 attack because the out-of-bound access at line 17 uses `code_len` as an index. By the time `code_len` is available, the conditional branch at line 5 has already been resolved, terminating the speculative execution. According to our pattern checking policy, SpecTaint still treats it as a Spectre gadget.

### Ensuring Low False Negative Rate

To ensure a low false negative rate, we conservatively assume the maximum values for CPU optimization parameters such as the ROB (Reorder Buffer) limit. This means that some of our detected gadgets may not be exploitable on certain processor models.

### Incomplete Path Coverage

Like other dynamic analysis tools, our approach is limited by the quality of test cases. Specifically, it may fail to detect gadgets in uncovered paths. We can leverage state-of-the-art fuzzers [2], [8] to increase path coverage. Additionally, SpecTaint can be combined with other static Spectre gadget detection tools [5], [43] to test uncovered paths and improve overall coverage. To ensure security, all uncovered paths can be hardened conservatively for security-sensitive projects.

### Control Dependent Attacks

Our Spectre gadget detection relies on dynamic taint analysis, which tracks direct data flows. It will not detect Spectre gadgets that are control dependent on user inputs. Compared to gadgets controlled via direct data flow, control-dependent gadgets often have limited attack capabilities and are currently beyond the scope of this work. We leave the investigation of these gadgets for future work.

### Related Work

We have discussed related works throughout the paper. In this section, we briefly survey additional related works, focusing on gadget detection techniques. Many other approaches aim at designing hardware architecture to defeat transient execution vulnerabilities [36], [47], [49]. Since they are orthogonal to our approach, we will only briefly discuss these approaches in this section.

#### Transient Execution Attack Variants

Transient execution attacks include Spectre-type and Meltdown-type attacks. Spectre-type attacks can be categorized into Spectre-PHT [29], Spectre-BTB [29], [31], Spectre-RSB [30], [34], and Spectre-STL [17], [37]. These attacks focus on exploiting different hardware caches. For example, Spectre-PHT attacks poison the Pattern History Table (PHT) to trigger speculative execution, while Spectre-BTB exploits the Branch Target Buffer (BTB). Meltdown-type attacks usually exploit fault-handling exceptions such as virtual memory exceptions [16], [32], [45], or exceptions reading disabled or privileged registers [26], [42]. Aligned with other tools [23], [39], we focus on detecting gadgets in victim programs that can be exploited by Spectre V1 attacks and leak sensitive data through cache side channels.

#### Spectre Gadget Detection

Spectre gadget detection can be categorized into static and dynamic techniques. Static analysis techniques model Spectre gadgets using syntax patterns, such as RedHat's Spectre 1 Scanner [5] and MSCV Spectre 1 pass [41]. These tools search binaries for potential candidates but produce many false positives and are not generic. Another direction is to use symbolic execution or static taint analysis for more precise modeling. These approaches are more reliable and generic [23], [43] but are still limited by the constraints of static analysis. For example, oo7 [43] uses static tainting to capture the data dependency of Spectre gadgets but inherits over-tainting and under-tainting issues. SPECTECTOR [23] uses symbolic execution to automatically prove speculative non-interference or detect violations but sacrifices soundness and completeness when analyzing large programs. SpecFuzz [39] extends fuzzing techniques to detect memory errors during simulated speculative execution but simplifies the simulation logic, resulting in poor precision and recall. Compared to these approaches, SpecTaint is designed to provide a more precise and scalable detection approach for real-world programs.

#### Mitigation and Defense

Intel proposed hardware fixes [44] including improved process and privilege-level separation, but these are only designed for Spectre 2.0. ConTExT [36] provides a new architecture design using a temporary buffer to mitigate information leakage during speculative execution. Other approaches [28], [46] propose isolating the cache side channel or providing a speculative buffer to mitigate cache leakage but are still in the design stage. At the system level, kernel page-table isolation is proposed to mitigate Meltdown attacks [22]. Many approaches [4], [18] add mitigation instructions (serializing instructions or mitigation instructions) at compile time to mitigate Spectre attacks. Since SpecTaint can effectively provide more precise Spectre gadget candidates, it can reduce the number of instructions needed for mitigation, improving runtime performance after patching, as demonstrated in Section 3.

#### Dynamic Analysis

PIN [33], DynamoRIO [15], and Valgrind [38] are powerful dynamic instrumentation tools. Our approach can also be implemented on these platforms. Xforce [40] was the first tool to propose the idea of forced execution but is used for code coverage-based exploration and not designed for speculative execution simulation. Our approach builds on their approach and adds unique features for speculative execution simulation, enabling dynamic taint analysis on speculative paths.

### Conclusion

In this paper, we enable dynamic taint analysis for Spectre V1 gadget detection. We present a system-level approach to simulate and explore speculative execution, providing fine-grained gadget patterns for precise detection. We implemented a prototype, SpecTaint, to demonstrate the efficacy of our approach. We evaluated SpecTaint on our Spectre Samples Dataset and real-world programs. Our experimental results show that SpecTaint outperforms existing methods with reasonable runtime efficiency and discloses new Spectre V1 gadgets from real-world applications.

### Availability

The source code of SpecTaint and the dataset used in the evaluation can be found at: https://github.com/bitsecurerlab/SpecTaint.git.

### Acknowledgement

We thank the anonymous reviewers for their valuable suggestions and comments. This work was supported by the Office of Naval Research under Award No. N00014-17-1-2893. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

### References

[1] Caffe. https://caffe.berkeleyvision.org/.

[2] American Fuzzy Lop (2.52b). http://lcamtuf.coredump.cx/afl/, 2011.

[3] Spectre Mitigations in Microsoft’s C/C++ Compiler. https://www.paulkocher.com/doc/MicrosoftCompilerSpectreMitigation.html, 2018.

[4] Spectre mitigations in MSVC. https://blogs.msdn.microsoft.com/vcblog/2018/01/15/spectre-mitigations-in-msvc/, 2018.

[5] SPECTRE Variant 1 scanning tool. https://access.redhat.com/blogs/766093/posts/3510331, 2018.

[6] LibYAML. https://pyyaml.org/wiki/LibYAML, 2019.

[7] Brotli. https://brotli.org, Accessed: June 2020.

[8] Honggfuzz. http://honggfuzz.com/, Accessed: June 2020.

[9] HTTP. https://github.com/nodejs/http-parser, Accessed: June 2020.

[10] LibHTP. https://github.com/OISF/libhtp, Accessed: June 2020.

[11] OpenSSL. https://www.openssl.org/, Accessed: June 2020.

[12] JSMN. https://github.com/zserge/jsmn, Accessed: June 2020.

[13] Intel. https://xem.github.io/minix86/manual/intel-x86-and-64-manual-vol3/o fe12b1e2a880e0ce-273.html, cited by 2019.

[14] Fabrice Bellard. Qemu, a fast and portable dynamic translator. In Proceedings of the USENIX Annual Technical Conference (ATC ’05), ATC, 2005.

[15] Derek Bruening, Timothy Garnett, and Saman Amarasinghe. An infrastructure for adaptive dynamic optimization. In Proceedings of the International Symposium on Code Generation and Optimization: Feedback-directed and Runtime Optimization, CGO ’03, 2003.

[16] Jo Van Bulck, Marina Minkin, Ofer Weisse, Daniel Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx. Foreshadow: Extracting the keys to the Intel SGX kingdom with transient out-of-order execution. In 27th USENIX Security Symposium (USENIX Security 18), 2018.

[17] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin von Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss. A systematic evaluation of transient execution attacks and defenses. In 28th USENIX Security Symposium (USENIX Security 19), 2019.

[18] C Carruth. Speculative load hardening. https://docs.google.com/document/d/1wwcfv3UV9ZnZVcGiGuoITT61eKo3TmoCS3uXLcJR0/edit#heading=h.phdehs44eom6., 2018.

[19] Ali Davanian, Zhenxiao Qi, Yu Qu, and Heng Yin. Decaf++: Elastic whole-system dynamic taint analysis. In the 22nd International Symposium on Research in Attacks, Intrusions and Defenses (RAID), September 2019., RAID, 2019.

[20] B. Dolan-Gavitt, P. Hulin, E. Kirda, T. Leek, A. Mambretti, W. Robertson, F. Ulrich, and R. Whelan. Lava: Large-scale automated vulnerability addition. In 2016 IEEE Symposium on Security and Privacy (SP), pages 110–121, 2016.

[21] J. Fustos and H. Yun. Spectrerewind: A framework for leaking secrets to past instructions. arXiv, 2003.12208.

[22] Daniel Gruss, Moritz Lipp, Michael Schwarz, Richard Fellner, Clémentine Maurice, and Stefan Mangard. KASLR is dead: Long live KASLR. In the 9th International Symposium on Engineering Secure Software and Systems (ESSoS’17), 2017.

[23] Marco Guarnieri, Boris Köpf, José F. Morales, Jan Reineke, and Andrés Sánchez. SPECTECTOR: Principled detection of speculative information flows. CoRR, abs/1812.08639, 2018.

[24] A. Henderson, L. K. Yan, X. Hu, A. Prakash, H. Yin, and S. McCamant. Decaf: A platform-neutral whole-system dynamic binary analysis platform. IEEE Transactions on Software Engineering, 43(2):164–184, 2017.

[25] Andrew Henderson, Aravind Prakash, Lok Kwong Yan, Xunchao Hu, Xujiewen Wang, Rundong Zhou, and Heng Yin. Make it work, make it right, make it fast: Building a platform-neutral whole-system dynamic binary analysis platform. In Proceedings of the 2014 International Symposium on Software Testing and Analysis, ISSTA, 2014.

[26] Intel. Q2 2018 speculative execution side channel update. 2018.

[27] K. N. Khasawneh, E. M. Koruyeh, C. Song, D. Evtyushkin, D. Ponomarev, and N. Abu-Ghazaleh. SafeSpec: Banishing the spectre of a meltdown with leakage-free speculation. In 2019 56th ACM/IEEE Design Automation Conference (DAC), pages 1–6, 2019.

[28] V. Kiriansky, I. Lebedev, S. Amarasinghe, S. Devadas, and J. Emer. DAWG: A defense against cache timing attacks in speculative execution processors. 2018.

[29] Paul Kocher, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. Spectre attacks: Exploiting speculative execution. CoRR, abs/1801.01203, 2018.

[30] Esmaeil Mohammadian Koruyeh, Khaled N. Khasawneh, Chengyu Song, and Nael Abu-Ghazaleh. Spectre returns! Speculation attacks using the return stack buffer. In Proceedings of the 12th USENIX Conference on Offensive Technologies, WOOT’18, 2018.

[31] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim, and Marcus Peinado. Inferring fine-grained control flow inside SGX enclaves with branch shadowing. In 26th USENIX Security Symposium (USENIX Security 17), 2017.

[32] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. Meltdown: Reading kernel memory from user space. In 27th USENIX Security Symposium (USENIX Security 18), 2018.

[33] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. PIN: Building customized program analysis tools with dynamic instrumentation. In Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI ’05, 2005.

[34] Giorgi Maisuradze and Christian Rossow. Ret2spec: Speculative execution using return stack buffers. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS’18), 2018.

[35] Andrea Mambretti, Matthias Neugschwandtner, Alessandro Sorniotti, Engin Kirda, William Robertson, and Anil Kurmus. Speculator: A tool to analyze speculative execution attacks and mitigations. In Proceedings of the 35th Annual Computer Security Applications Conference, ACSAC ’19, page 747–761, New York, NY, USA, 2019. Association for Computing Machinery.

[36] Claudio Canella, Robert Schilling, Florian Kargl, and Daniel Gruss. ConTExT: A generic approach for mitigating Spectre. Proceedings of the Annual Network and Distributed System Security Symposium (NDSS’20), 2020.

[37] Marina Minkin, Daniel Moghimi, Moritz Lipp, Michael Schwarz, Jo Van Bulck, Daniel Genkin, Daniel Gruss, Frank Piessens, Berk Sunar, and Yuval Yarom. Fallout: Reading kernel writes from user space. CoRR, 2019.

[38] Nicholas Nethercote and Julian Seward. Valgrind: A framework for heavyweight dynamic binary instrumentation. In Proceedings of the 28th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI ’07, 2007.

[39] Oleksii Oleksenko, Bohdan Trach, Mark Silberstein, and Christof Fetzer. SpecFuzz: Bringing Spectre-type vulnerabilities to the surface. CoRR, abs/1905.10311, 2019.

[40] Fei Peng, Zhui Deng, Xiangyu Zhang, Dongyan Xu, Zhiqiang Lin, and Zhendong Su. X-Force: Force-executing binary programs for security applications. In 23rd USENIX Security Symposium (USENIX Security 14), 2014.

[41] Read Sprabery, Konstantin Evchenko, Abhilash Raj, Rakesh B. Bobba, Sibin Mohan, and R. H. Campbell. Scheduling, isolation, and cache allocation: A side-channel defense. 2018.

[42] Julian Stecklina and Thomas Prescher. LazyFP: Leaking FPU register state using microarchitectural side-channels. CoRR, abs/1806.07480, 2018.

[43] Guanhua Wang, Sudipta Chattopadhyay, Ivan Gotovchits, Tulika Mitra, and Abhik Roychoudhury. oo7: Low-overhead defense against Spectre attacks via binary analysis. CoRR, abs/1807.05843, 2018.

[44] T. Warren. Intel processors are being redesigned to protect against Spectre. 2018.

[45] Ofer Weisse, Jo Van Bulck, Marina Minkin, Daniel Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein, Raoul Strackx, Thomas F. Wenisch, and Yuval Yarom. Foreshadow-NG: Breaking the virtual memory abstraction with transient out-of-order execution. Technical report, 2018.

[46] Mengjia Yan, Jiho Choi, Dimitrios Skarlatos, Adam Morrison, Christopher W. Fletcher, and Josep Torrellas. InvisiSpec: Making speculative execution invisible in the cache hierarchy. 2018 51st Annual IEEE/ACM International Symposium on Microarchitecture (MICRO), 2018.

[47] Mengjia Yan, Bhargava Gopireddy, Thomas Shull, and Josep Torrellas. Secure Hierarchy-Aware Cache Replacement Policy (SHARP): Defending against cache-based side-channel attacks. In Proceedings of the 44th Annual International Symposium on Computer Architecture, ISCA ’17, 2017.

[48] Yuval Yarom and Katrina Falkner. Flush+Reload: A high resolution, low noise, L3 cache side-channel attack. In 23rd USENIX Security Symposium (USENIX Security 14), pages 719–732, San Diego, CA, August 2014. USENIX Association.

[49] Si Yu, Xiaolin Gui, and Jiancai Lin. An approach with two-stage mode to detect cache-based side-channel attacks. In Proceedings of the 2013 International Conference on Information Networking (ICOIN), ICOIN ’13, 2013.