### Server Applications and Environment Reproduction

As discussed in the introduction, the approaches mentioned above face significant challenges in reproducing the environment and committing changes back to the original system. Consequently, they are not effective for the applications discussed in the introduction.

### One-Way Isolation

[13] was the first to present a systematic development of one-way isolation as an effective means to isolate the effects of running processes from the point of compromise. They developed protocols for implementing one-way isolation in databases and file systems but did not provide an implementation. As a result, they did not address the research challenges posed by Commercial Off-The-Shelf (COTS) applications and commodity operating systems. Additionally, they did not systematically address issues related to the consistency of committed results.

### Previous Work: Secure Execution of Untrusted Software

In our previous work [12], we developed a practical approach for the secure execution of untrusted software based on isolation. The primary goal was to create a tool that could be easily installed and used by ordinary users without administrative access. The approach is implemented entirely at the user level, requiring no modifications to the OS kernel. However, this approach compromises on performance and generality. Specifically, it incurs high overheads, sometimes over 100%, and cannot faithfully reproduce isolation semantics for certain operations involving metadata such as permissions and ownership. For directories, isolation is achieved using an ad-hoc approach that is difficult to implement and inconsistent with file update semantics. Finally, it does not provide a systematic solution to the commit problem.

### Kernel-Level Isolation

The approach developed in this paper addresses these drawbacks by implementing isolation within the kernel at the Virtual File System (VFS) layer. This allows for generalization, providing isolation for non-file operations such as certain network accesses.

### Recovery-Oriented Systems

The Recovery-Oriented Computing (ROC) project [24] focuses on developing techniques for fast recovery from failures, particularly those due to operator errors. [2] presents an approach for recovering from operator errors in administering a network server, specifically an email server. Their approach offers more general recovery capabilities than ours but requires application-specific implementations. In contrast, our approach is application-independent and ensures consistency of system state whenever the commit proceeds successfully. The ROC approach, which does not restrict network operations, may lead to widespread and irreversible effects of network operations, potentially resulting in inconsistencies that must be manually resolved by the user.

### File System Approaches

- **Elephant File System [26]**: Supports file object versioning and flexible versioning policies.
- **Checkpointing Techniques [5, 23, 25, 31, 19]**: Provide data versioning through checkpointing.
- **VersionFS [16]**: A versatile versioning file system that uses a stackable template and sparse file technique to reduce storage requirements for large files.

These approaches allow rolling back the system state to a previous time, discarding all changes made since then, regardless of their origin. In contrast, our one-way isolation approach selectively rolls back the actions of processes run within the Secure Execution Environment (SEE) without losing changes made by benign processes outside the SEE.

- **Repairable File System [40, 39]**: Uses versioning to repair compromised file servers and databases, allowing selective rollback of changes. However, the risk of cascading aborts can be significant if benign processes access data produced by compromised processes.
- **Loopback File System [14]**: Creates a virtual file system from an existing one but provides no support for versioning or isolation.
- **3D File System [10]**: Provides a convenient way for software developers to work with different versions of a software package, but it is not designed to handle untrusted applications.
- **TFS [32]** and **Union File System [17]**: Allow mounting of writable file systems on top of read-only ones, but do not address the problem of securing the original file system from untrusted programs or consider data consistency and commit criteria.

### Summary

In this paper, we presented an approach for realizing safe execution environments. Our approach is versatile and supports a wide range of applications, providing strong consistency. If the results of isolated execution are not acceptable, the system state is as if the execution never took place. If the results are accepted, the user is guaranteed that the effect of isolated execution will be identical to that of atomically executing the same program at the point of commit. We also discussed alternative commit criteria that exploit file semantics to reduce commit failures.

Our approach makes minimal modifications to the kernel in the form of modules that provide file system isolation and policy enforcement, requiring no changes to applications themselves. Our functional and performance evaluations demonstrate the usefulness and efficiency of the approach, with typical overheads less than 10%.

### References

[1] A. Acharya and M. Raje. Mapbox: Using parameterized behavior classes to confine applications. In Proceedings of USENIX Security Symposium, 2000.
[2] A. Brown and D. Patterson. Undo for operators: Building an undoable e-mail store. In Proceedings of USENIX Annual Technical Conference, 2003.
[3] P. M. Chen and B. D. Nobl. When virtual is better than real. In Proceedings of Workshop on Hot Topics in Operating Systems, 2001.
[4] T. Chiueh, H. Sankaran, and A. Neogi. Spout: A transparent distributed execution engine for Java applets. In Proceedings of International Conference on Distributed Computing Systems, 2000.
[5] S. Chutani, O. T. Anderson, M. L. Kazar, B. W. Leverett, W. A. Mason, and R. N. Sidebotham. The Episode file system. In Proceedings of the USENIX Winter 1992 Technical Conference, 1992.
[6] A. Dan, A. Mohindra, R. Ramaswami, and D. Sitaram. Chakravyuha: A sandbox operating system for the controlled execution of alien code. Technical report, IBM T.J. Watson Research Center, 1997.
[7] I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. A secure environment for untrusted helper applications: confining the wily hacker. In Proceedings of USENIX Security Symposium, 1996.
[8] S. Jajodia, P. Liu, and C. D. McCollum. Application-level isolation to cope with malicious database users. In Proceedings of Annual Computer Security Applications Conference, 1998.
[9] J. Katcher. Postmark: A new file system benchmark. Technical Report TR3022, Network Appliance Inc., 1997.
[10] D. G. Korn and E. Krell. A new dimension for the Unix file system. Software: Practice & Experience, 20(S1), 1990.
[11] B. W. Lampson. A note on the confinement problem. Communications of the ACM, 16(10):613â€“615, 1973.
[12] Z. Liang, V. Venkatakrishnan, and R. Sekar. Isolated program execution: An application-transparent approach for executing untrusted programs. In Proceedings of Annual Computer Security Applications Conference, 2003.
[13] P. Liu, S. Jajodia, and C. D. McCollum. Intrusion confinement by isolation in information systems. In Proceedings of IFIP Workshop on Database Security, 1999.
[14] Loopback file system. Unix man page.
[15] D. Malkhi and M. K. Reiter. Secure execution of Java applets using a remote playground. Software Engineering, 26(12), 2000.
[16] K.-K. Muniswamy-Reddy, C. P. Wright, A. P. Himmer, and E. Zadok. A versatile and user-oriented versioning file system. In Proceedings of USENIX Conference on File and Storage Technologies, 2004.
[17] J.-S. Pendry and M. K. McKusick. Union mounts in 4.4BSD-Lite. In Proceedings of 1995 USENIX Technical Conference on UNIX and Advanced Computing Systems, 1995.
[18] J. S. Pendry, N. Williams, and E. Zadok. Am-utils user manual, 6.1b3 edition, July 2003. http://www.am-utils.org.
[19] Z. Peterson and R. Burns. Ext3cow: The design, implementation, and analysis of metadata for a time-shifting file system. Technical Report. HSSL-2003-03, Hopkins Storage Systems Lab, Department of Computer Science, Johns Hopkins University, 2003.
[20] D. Pilania and T. Chiueh. Design, implementation, and evaluation of an intrusion resilient database system. In Proceedings of International Conference on Dependable Systems and Networks, 2003.
[21] V. Prevelakis and D. Spinellis. Sandboxing applications. In Proceedings of Usenix Annual Technical Conference: FREENIX Track, 2001.
[22] N. Provos. Improving host security with system call policies. In Proceedings of USENIX Security Symposium, 2003.
[23] S. Quinlan and S. Dorward. Venti: A new approach to archival storage. In Proceedings of USENIX Conference on File and Storage Technologies.
[24] Recovery-oriented computing. http://roc.cs.berkeley.edu.
[25] W. D. Roome. 3DFS: A time-oriented file server. In Proceedings of the USENIX Winter 1992 Technical Conference, 1991.
[26] D. J. Santry, M. J. Feeley, N. C. Hutchinson, and A. C. Veitch. Elephant: The file system that never forgets. In Proceedings of Workshop on Hot Topics in Operating Systems, 1999.
[27] K. Scott and J. Davidson. Safe virtual execution using software dynamic translation. In Proceedings of Annual Computer Security Applications Conference, 2002.
[28] R. Sekar, Y. Cai, and M. Segal. A specification-based approach for building survivable systems. In Proceedings of National Information Systems Security Conference, Oct 1998.
[29] R. Sekar and P. Uppuluri. Synthesizing fast intrusion prevention/detection systems from high-level specifications. In Proceedings of USENIX Security Symposium, 1999.
[30] K. Sitaker. Picturepages software. http://www.canonical.org/picturepages/.
[31] C. Soules, G. Goodson, J. Strunk, and G. Ganger. Metadata efficiency in a comprehensive versioning file system. In Proceedings of USENIX Conference on File and Storage Technologies, 2002.
[32] Translucent file system, 1990. SunOS Reference Manual, Sun Microsystems.
[33] T. Tiilikainen. Rename-them-all, Linux freeware version.
[34] P. Uppuluri. Intrusion Detection/Prevention Using Behavior Specifications. PhD thesis, Stony Brook University, 2003.
[35] Webstone, the benchmark for web servers. http://www.mindcraft.com/webstone.
[36] A. Whitaker, M. Shaw, and S. Gribble. Denali: Lightweight virtual machines for distributed and networked applications. In Proceedings of USENIX Annual Technical Conference, 2002.
[37] E. Zadok, I. Badulescu, and A. Shender. Extending file systems using stackable templates. In Proceedings of USENIX Annual Technical Conference, 1999.
[38] M. Zalewski. Fakebust, a malicious code analyzer. http://www.derkeiler.com/Mailing-Lists/securityfocus/bugtraq/2004-09/0251.html.
[39] N. Zhu. Data versioning systems. Stony Brook University, technical report. http://www.ecsl.cs.sunysb.edu/tech-reports.html.
[40] N. Zhu and T. Chiueh. Design, implementation, and evaluation of repairable file service. In Proceedings of International Conference on Dependable Systems and Networks, 2003.