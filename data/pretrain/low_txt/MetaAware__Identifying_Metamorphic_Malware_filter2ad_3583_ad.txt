# Pattern Matching and Size Comparison of GNU Binutils Programs

## Figures

### Figure 6: Pattern Matching of GNU Binutils Programs
Each pattern matching is performed between two consecutive versions of a GNU Binutils program.

### Figure 7: Size Comparison of GNU Binutils Programs
Each size comparison is performed between two consecutive versions of a GNU Binutils program.

### Figure 8: Pattern Matching of GNU Binutils Programs
Each pattern matching is performed between version 2.10 and 2.17, or version 2.11 and 2.17 of a GNU Binutils program.

### Figure 9: Size Comparison of GNU Binutils Programs
Each size comparison is performed between version 2.10 and 2.17, or version 2.11 and 2.17 of a GNU Binutils program.

## Conclusion

This paper introduces a novel approach to characterize and compare program semantics. A key application of this method is the detection of metamorphic malware, which traditional signature-based methods struggle to identify. The proposed method has been implemented and tested using randomized benchmark programs, various real-world malware samples, and multiple releases of the GNU binutils programs. The evaluation results highlight three significant capabilities of the method:
1. It effectively identifies metamorphic variants of common malware.
2. It can easily distinguish between unrelated programs.
3. It can detect and identify variations in code, such as code reuse, which can be due to the insertion of malware into an executable or program revisions.

An additional application of this work is to help locate specific code fragments within larger programs using maximum matching techniques.

Future work will focus on more precise analysis of parameters passed to library or system functions. We also believe that the method's ability to identify similarities between binary executables will be valuable for code attribution and other reverse engineering tasks.

## Acknowledgements

The authors would like to thank Chongkyung Kil for randomizing the benchmarks using the ASLP tool and providing the results.

## References

[1] SPEC CPU2000. <http://www.spec.org/cpu/>

[2] Apache Web Server. <http://httpd.apache.org/>

[3] eEye Digital Security company. <http://www.eeye.com>

[4] GazTek Web Server. <http://gaztek.sourceforge.net/ghttpd/>

[5] GNU Binutils. <http://www.gnu.org/software/binutils/>

[6] Intel Architecture Software Developers Manual. Volume 2: Instruction Set Reference.

[7] VX heavens. <http://vx.netlux.org>

[8] M. R. Chouchane and A. Lakhotia. Using Engine Signature to Detect Metamorphic Malware. In Proceedings of the 4th ACM Workshop on Rapid Malcode, November 2006.

[9] M. Christodorescu and S. Jha. Static Analysis of Executables to Detect Malicious Patterns. In Proceedings of the 12th USENIX Security Symposium, pages 169–186, August 2003.

[10] M. Christodorescu and S. Jha. Testing malware detectors. In ISSTA '04: Proceedings of the 2004 ACM SIGSOFT international symposium on Software testing and analysis, pages 34–44, 2004.

[11] M. Christodorescu, S. Jha, and C. Kruegel. Mining Specifications of Malicious Behavior. In Proceedings of the 6th ESEC/FSE, September 2007.

[12] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and R. E. Bryant. Semantics-Aware Malware Detection. In Proceedings of 2005 IEEE Symposium on Security and Privacy (S&P'05), pages 32–46, May 2005.

[13] C. Cifuentes, M. Van Emmerik, D. Simon D.Ung, and T. Waddington. Preliminary Experiences with the Use of the UQBT Binary Translation Framework. In Proceedings of the Workshop on Binary Translation, pages 12–22, October 1999.

[14] V. Ganapathy, S. Jha, D. Chandler, D. Melski, and D. Vitek. Buffer Overrun Detection using Linear Programming and Static Analysis. In Proceedings of the 10th ACM Conference on Computer and Communications Security (CCS), pages 345–354, October 2003.

[15] J. Gordon. Lessons from Virus Developers: The Beagle Worm History Through April 24, 2004. May 2004.

[16] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. Address Space Layout Permutation (ASLP): Towards Fine-Grained Randomization of Commodity Software. In Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06), December 2006.

[17] E. Kirda and C. Kruegel. Behavior-based Spyware Detection. In Proceedings of the 15th USENIX Security Symposium, pages 273–288, August 2006.

[18] C. Kruegel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna. Polymorphic Worm Detection Using Structural Information of Executables. In Proceedings of the 8th International Symposium on Recent Advances in Intrusion Detection (RAID05), pages 53–64, September 2005.

[19] C. Kruegel, W. Robertson, F. Valeur, and G. Vigna. Static Disassembly of Obfuscated Binaries. In Proceedings of the 13th USENIX Security Symposium, pages 255–270, August 2004.

[20] W. Lee and S. Stolfo. Data Mining Approaches for Intrusion Detection. In Proceedings of the 7th USENIX Security Symposium, 1998.

[21] G. McGraw and G. Morrisett. Attacking Malicious Code: A Report to the Infosec Research Council. IEEE Software, 17(5):33–41, Sept./Oct. 2000.

[22] S. S. Muchnick. Advanced Compiler Design and Implementation. Morgan Kaufmann Publisher, CA, USA, 1997.

[23] J. Newsome, B. Karp, and D. Song. Polygraph: Automatically Generating Signatures for Polymorphic Worms. In Proceedings of 2005 IEEE Symposium on Security and Privacy (S&P'05), pages 226–241, May 2005.

[24] P. Royal, M. Halpin, D. Dagon, R. Edmonds, and W. Lee. PolyUnpack: Automating the Hidden-Code Extraction of Unpack-Executing Malware. In Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06), December 2006.

[25] A. Somayaji, S. Forrest, S. Hofmeyr, and T. Longstaff. A Sense of Self for Unix Processes. In Proceedings of 1996 IEEE Symposium on Security and Privacy, pages 120–128, May 1996.

[26] P. Szor. The Art of Computer Virus Research and Defense. Symantec Press, NJ, USA, first edition, 2005.

[27] D. Wagner and D. Dean. Intrusion detection via static analysis. In Proceedings of 2001 IEEE Symposium on Security and Privacy, pages 156–169, May 2001.

[28] D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken. A First Step towards Automated Detection of Buffer Overrun Vulnerabilities. In Proceedings of the 7th Network and Distributed System Security (NDSS'00) Symposium, February 2000.

[29] D. B. West. Introduction to Graph Theory. Prentice-Hall, NJ, USA, second edition, 2001.

[30] Q. Zhang, D. S. Reeves, P. Ning, and P. Iyer. Analyzing Network Traffic to Detect Self-Decrypting Exploit Code. In Proceedings of 2007 ACM Symposium on Information, Computer and Communications Security (ASIACCS'07), March 2007.