### Instance and Filtering

As we operate in close proximity to end-hosts with application awareness, we still consider filters such as those generated by Vigilante [13]. We chose protocol-aware filtering because Vigilante does not handle polymorphism effectively.

### Hardware Acceleration

A straightforward method to increase network throughput is to use expensive specialized hardware. Although SafeCard is implemented on an embedded device, it is not intended to explore this option. The IXP2400, which is 5 years old and no longer supported by Intel, was expensive, primarily due to its low volume sales. The trend toward multi-core CPUs at the network edge could provide a cost-effective alternative if memory latency-hiding is also provided.

To illustrate our point more clearly, we compare the performance of SafeCard to that of the IXDP2850, a dual-processor variant with 32 micro-engines running at 1.4GHz. This device can process over nine times the amount of traffic on a cycle-for-cycle basis. Since the bottleneck in our pipeline is computationally bound and inherently scalable, this would directly translate into better SafeCard performance. However, we decided not to show these results because deploying IXDP2850s at the network edge is not feasible in the near future.

### Conclusion

In this paper, we have described SafeCard, a full intrusion prevention system (IPS) on an embedded network processor. SafeCard is unique in that it includes detection techniques at all levels of abstraction in communication: packets, reassembled TCP streams, application protocol units, and flow aggregates. Additionally, SafeCard can handle nearly one Gigabit per second of TCP traffic, making it a viable option for the network edge. The IPS is implemented as a pipeline on a single Intel IXP2400 network processor embedded on a network card. Its primary function is to enforce security policies on incoming traffic through in-depth analysis in the last hop toward the host.

The system first receives traffic in a circular buffer and applies simple header-field filtering to determine which data requires further inspection. Suspect TCP streams are reassembled using an efficient in-place algorithm and fed into a per-stream pattern matching engine, similar to Snort. For streams that are not blocked by the pattern matching engine, SafeCard checks for higher-level, protocol-specific rules and applies them. A final detection technique operates on flow aggregates, such as statistics and the number of incoming connections. Future work will focus on combining alerts generated by multiple stages to mitigate false positives from individual stages.

### Acknowledgements

We would like to thank Lennert Buytenhek for his invaluable assistance during the development of the IXP2400 code and the installation of the testbed. This research was made possible by grants from the EU Lobster and Noah projects.

### References

1. Ptacek, T.H., Newsham, T.N.: Insertion, evasion, and denial of service: Eluding network intrusion detection. Technical report, Secure Networks Inc. (1998)
2. Handley, M., Paxson, V., Kreibich, C.: Network intrusion detection: Evasion, traffic normalization, and end-to-end protocol semantics. In: USENIX-Sec’2001, Washington, D.C., USA (2001)
3. Staniford, S., Weaver, N.: How to 0wn the internet in your spare time. In: Proc. of the 11th USENIX Security Symposium. (2002)
4. Newsome, J., Song, D.: Polygraph: Automatically generating signatures for polymorphic worms. In: Proc. of the IEEE Symposium on Security and Privacy. (2005)
5. Singh, S., Estan, C., Varghese, G., Savage, S.: Automated worm fingerprinting. In: In Proc. of the 6th USENIX Symposium on Operating Systems Design and Implementation (OSDI). (2004) 45–60
6. Ioannidis, S., Keromytis, A.D., Bellovin, S.M., Smith, J.M.: Implementing a distributed firewall. In: CCS ’00: Proceedings of the 7th ACM conference on Computer and communications security, ACM Press (2000) 190–199
7. Bos, H., Huang, K.: Towards software-based signature detection for intrusion prevention on the network card. In: Proc of the 8th International Symposium on Recent Advances in Intrusion Detection (RAID). (2005)
8. Portokalidis, G., Slowinska, A., Bos, H.: Argos: An emulator for fingerprinting zero-day attacks. In: Proc. ACM SIGOPS EUROSYS’2006, Leuven, Belgium (2006)
9. Roesch, M.: Snort - lightweight intrusion detection for networks. In: Proc. of LISA ’99: 13th Systems Administration Conference. (1999)
10. Cowan, C., Pu, C., Maier, D., Walpole, J., Bakke, P., Beattie, S., Grier, A., Wagle, P., Zhang, Q.: StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks. In: Proc. of the 7th USENIX Security Symposium. (1998)
11. Bhatkar, S., Du Varney, D.C., Sekar, R.: Address obfuscation: An efficient approach to combat a broad range of memory error exploits. In: In Proc. of the 12th USENIX Security Symposium. (2003) 105–120
12. Barrantes, E.G., Ackley, D.H., Forrest, S., Palmer, T.S., Stefanovix, D., Zovi, D.D.: Randomized instruction set emulation to disrupt code injection attacks. In: In Proc. of the 10th ACM Conference on Computer and Communications Security (CCS). (2003) 281–289
13. Costa, M., Crowcroft, J., Castro, M., Rowstron, A., Zhou, L., Zhang, L., Barham, P.: Vigilante: End-to-end containment of internet worms. In: In Proc. of the 20th ACM Symposium on Operating Systems Principles (SOSP), Brighton, UK (2005)
14. Clark, C., Lee, W., Schimmel, D., Contis, D., Koné, M., Thomas, A.: A hardware platform for network intrusion detection and prevention. In: Third Workshop on Network Processors and Applications, Madrid, Spain (2004)
15. Williamson, M.M.: Throttling Viruses: Restricting Propagation to Defeat Malicious Mobile Code. In: Proc. of ACSAC Security Conference, Las Vegas, Nevada (2002)
16. Robertson, W., Vigna, G., Kruegel, C., Kemmerer, R.: Using generalization and characterization techniques in the anomaly-based detection of web attacks. In: NDSS’05. (2005)
17. Cowan, C., Beattie, S., Johansen, J., Wagle, P.: PointGuard: Protecting pointers from buffer overflow vulnerabilities. In: In Proc. of the 12th USENIX Security Symposium. (2003) 91–104
18. Cowan, C., Barringer, M., Beattie, S., Kroah-Hartman, G.: FormatGuard: Automatic protection from printf format string vulnerabilities. In: In Proc. of the 10th Usenix Security Symposium. (2001)
19. Provos, N.: Improving host security with system call policies. In: In Proc. of the 12th USENIX Security Symposium. (2003)
20. Shankar, U., Talwar, K., Foster, J.S., Wagner, D.: Detecting format string vulnerabilities with type qualifiers. In: In Proc. of the 10th USENIX Security Symposium. (2001) 201–216
21. Necula, G.C., McPeak, S., Weimer, W.: CCured: Type-safe retrofitting of legacy code. In: In Proc. of the Principles of Programming Languages (PoPL). (2002)
22. bulba, Kil3r: Bypassing Stackguard and Stackshield. Phrack Magazine 10 (2000)
23. gera, riq: Advances in format string exploitation. Phrack Magazine 11 (2002)
24. Liang, Z., Sekar, R.: Fast and automated generation of attack signatures: A basis for building self-protecting servers. In: Proc. ACM CCS, Alexandria, VA, USA (2005) 213–223
25. Kruegel, C., Kirda, E., Mutz, D., Robertson, W., Vigna, G.: Polymorphic worm detection using structural information of executables. In: Proc. of RAID’05, Seattle, USA (2005)
26. Kerschbaum, F., Spafford, E.H., Zamboni, D.: Using embedded sensors for detecting network attack. Technical report, Purdue University (2000)
27. Paxson, V.: Bro: A system for detecting network intruders in real-time. Computer Networks 31(23-24) (1999) 2435–2463
28. Bos, H., de Bruijn, W., Cristea, M., Nguyen, T., Portokalidis, G.: FFPF: Fairly Fast Packet Filters. In: Proceedings of OSDI’04, San Francisco, CA (2004)
29. Cristea, M., de Bruijn, W., Bos, H.: Fpl-3: towards language support for distributed packet processing. In: Proceedings of IFIP Networking, published as LNCS Volume 3462 / 2005, ISBN: 3-540-25809-4, Waterloo, Ontario, Canada (2005) p.743–755
30. Malan, R., Watson, D., Jahanian, F., Howell, P.: Transport and application protocol scrubbing. In: Infocom’2000, Tel-Aviv, Israel (2000)
31. Laurikari, V.: NFAs with tagged transitions, their conversion to deterministic automata and application to regular expressions. In: SPIRE. (2000) 181–187
32. Aho, A.V., Ullman, J.D.: Foundations of Computer Science. Computer Science Press (1992)
33. Gill, A.: Introduction to the Theory of Finite-state Machines. McGraw-Hill (1962)
34. Newsome, J., Song, D.: Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In: Proc. of the 12th Annual Network and Distributed System Security Symposium (NDSS). (2005)
35. SecurityFocus: Can-2003-0245 apache apr-psprintf memory corruption vulnerability. http://www.securityfocus.com/bid/7723/discussion/ (2003)
36. Nguyen, T., Cristea, M., de Bruijn, W., Box, H.: Scalable network monitors for high-speed links: a bottom-up approach. In: Proceedings of IPOM’04. (2004)

### Author Index

- Mehta, Vaibhav
- Miller, Barton P.
- Mok, Aloysius K.
- Monrose, Fabian
- Newsome, James
- Parekh, Janak J.
- Patel, Jignesh M.
- Paxson, Vern
- Rajab, Moheeb Abu
- Reiter, Michael K.
- Sinha, Sushant
- Slowinska, Asia
- Song, Dawn
- Stolfo, Salvatore J.
- Tan, Kymie M.C.
- Terzis, Andreas
- Thurimella, Ramakrishna
- Treinen, James J.
- Tseng, Chinyang Henry
- Valeur, Fredrik
- van Reeuwijk, Kees
- Vigna, Giovanni
- Wang, Ke
- Wang, Shiau-Huey
- Wing, Jeannette
- Xu, Li
- Zhu, Haifeng
- Årnes, André
- Baecher, Paul
- Bartzis, Constantinos
- Bos, Herbert
- Chung, Simon P.
- Clarke, Edmund
- Dacier, Marc
- de Bruijn, Willem
- Dornseif, Maximillian
- Freiling, Felix
- Gao, Debin
- Griffin, Jonathon T.
- Gonzalez, Jose M.
- Hansen, Jeffrey P.
- Holz, Thorsten
- Hruby, Tomas
- Jahanian, Farnam
- Jha, Somesh
- Karp, Brad
- Kemmerer, Richard A.
- Ko, Calvin
- Koetter, Markus
- Leita, Corrado
- Levitt, Karl
- Massicotte, Frederic
- Maxion, Roy A.