Certainly! Here is the optimized version of your text, with improved clarity, coherence, and professionalism:

---

**Comparison with Previous Memory Decryption Attacks on SEV**

Our work differs from previous memory decryption attacks against SEV [24, 25] in three primary aspects. First, Morbitzer et al. [24, 25] manipulate unprotected nested page tables to decouple the mapping between guest virtual addresses (gVAs) and memory contents. In contrast, our decryption oracle directly replaces memory blocks used in the I/O buffer. The hardware mechanisms required to defend against these two types of attacks may differ, highlighting the necessity of mitigating both threats.

Second, instead of exploiting a network-facing application executed in the guest VM to accept attacker-controlled data, our attack can utilize any I/O traffic, making it more general. This suggests that application-specific defenses, such as pruning secrets after use [24], may not be effective. Third, the attack described by Morbitzer et al. requires the attacker to actively generate network traffic to the guest VM, which can be easily detected. Our decryption oracle, however, can leverage existing I/O traffic, making it highly stealthy. Additionally, while the next release of SEV CPUs is expected to address memory integrity issues, the fundamental I/O security problem studied in this paper will remain. The encryption oracle will not be mitigated unless the tweak function is fully secured.

**Other Studies**

Mofrad et al. [23] compare Intel SGX and AMD SEV in terms of functionality, use scenarios, security, and performance. Their study suggests that SEV is more vulnerable than SGX due to its lack of memory integrity and a larger trusted computing base (TCB). However, the performance comparison indicates that AMD SEV outperforms Intel SGX.

Wu et al. [35] propose Fidelius, a system that uses a sibling-based protection mechanism to partition an untrusted hypervisor into two components: one for resource management and the other for security protection. The "trusted" security protection component enhances the security of guest VMs. While this approach is interesting and effective, it contradicts SEV's original intention of eliminating the hypervisor from the TCB. Fidelius mentions a method to protect disk I/O similar to our temporary fix (see Section 5.2), but it implies that the disk image must be shipped to the SEV platform, requiring the same key (Ktek) every time the disk image is used. Our proxy-style solutions in Section 5.2 generalize their approach.

**Security Threats of Intel TEEs**

**Intel TME and MKTME**

Intel's counterparts to AMD's SME and SEV are Total Memory Encryption (TME) and Multi-Key Total Memory Encryption (MKTME) [18]. TME and AMD SME share a similar concept: an AES-XTS encryption engine sits between the direct data path and external memory buses, encrypting data when it leaves the processor and decrypting it when it enters. TME supports a single ephemeral encryption key for the entire processor, while MKTME supports multiple keys. Each page table entry in MKTME is labeled with a KeyID to select one of the ephemeral AES keys generated in the encryption engine. Unlike AMD SEV, guest VMs in MKTME may have more than one AES key. KeyID0 is used for sharing pages with the hypervisor, and KeyIDN is assigned to the Nth VM by the hypervisor for the guest's private pages. However, the guest VM can obtain other KeyIDs to share memory with other guest VMs. As we were unable to purchase a machine with TME and MKTME at the time of writing, we leave the analysis of these Intel technologies to future work.

**Intel SGX**

Intel Software Guard eXtension (SGX) is an instruction set architecture extension that supports the isolation of memory regions of userspace processes. Through a microcode-extended memory management unit, memory accesses to protected memory regions, known as enclaves, are mediated so that only instructions belonging to the same enclave are permitted. SGX prevents software attacks from all privileged software layers, including operating systems, hypervisors, and system management software. A hardware Memory Encryption Engine sits between the processor and memory to encrypt memory traffic, ensuring the confidentiality of enclave memory even against physical attackers. SGX also supports remote attestation to guard the integrity of the enclave code.

Similar to AMD's SEV, SGX constructs a Trusted Execution Environment (TEE) on Intel processors. However, SGX isolates portions of the user processes' memory space, whereas SEV encrypts the memory of the entire virtual machine. Developers using SEV do not need to rewrite their software, but SGX developers must manually partition applications into trusted and untrusted components and recompile the source code with the SDKs provided by Intel. SGX machines have been available since late 2015.

Two major types of attacks have been demonstrated against SGX applications:

- **Side-channel attacks**: Prior studies have shown that enclave secrets in SGX can be exfiltrated through side channels on CPU caches [8, 15, 16, 27], branch target buffers [22], DRAM row buffer contention [34], page-table entries [33, 34], and page-fault exception handlers [30, 36]. More recently, side-channel attacks exploiting speculative and out-of-order execution have been demonstrated [10, 32]. Similar to SGX, SEV is not designed to thwart side-channel attacks, and we expect similar attacks to be feasible on SEV. While the attacks demonstrated in this paper already break the confidentiality of SEV-protected VMs, side channels can facilitate some of these attacks. We leave a detailed discussion of SEV's side-channel surface to future work.

- **Memory hijacking attacks**: SGX does not provide memory safety inside enclaves. Studies [7, 21] have shown that attackers can exploit vulnerabilities in enclave programs and perform return-oriented programming (ROP) attacks [29]. Randomization-based security defenses have been proposed to mitigate ROP attacks [28]. However, Biondo et al. [7] point out that SGX runtimes inherently contain memory regions that are difficult to randomize, making it necessary to eliminate vulnerabilities from the enclave code to completely mitigate memory hijacking attacks. Neither SGX nor SEV is designed to provide memory safety, making memory hijacking attacks feasible on SEV as well. We will not further discuss these attacks on SEV in this paper.

In this paper, we have explored a fine-grained page-fault side channel to locate the memory buffers used in I/O operations. A comprehensive study of SEV side-channel and memory-hijacking attacks is left for future work.

**Conclusion**

In this paper, we have reported our study of the insecurity of SEV from the perspective of unprotected I/O operations in SEV-enabled VMs. Our findings are twofold: first, I/O operations from SEV guests are not secure; second, I/O operations can be used by adversaries to construct memory encryption and decryption oracles. We have demonstrated concrete attacks and discussed potential solutions to the underlying problems.

**Acknowledgments**

We would like to thank our shepherd Dave Tan and the anonymous reviewers for their helpful comments. This work was supported in part by NSF grants 1750809, 1718084, 1834213, and 1834216, and research gifts from Intel and DFINITY foundation to Yinqian Zhang. Yan Solihin is supported in part by UCF.

**References**

[1] AMD. AMD-V nested paging. http://developer.amd.com/wordpress/media/2012/10/NPT-WP-1%201-final-TM.pdf, 2008.
[2] AMD. Amd64 architecture programmer’s manual volume 2: System programming, 2017.
[3] AMD. Secure encrypted virtualization API version 0.17, 2018.
[4] AMD. Solving the cloud trust problem with WinMagic and AMD EPYC hardware memory encryption. White paper, 2018.
[5] Amazon AWS. Optimizing latency and bandwidth for AWS traffic, 2016.
[6] Michael Becher, Maximillian Dornseif, and Christian N. Klein. FireWire: all your memory are belong to us. In CanSecWest, 2005.
[7] Andrea Biondo, Mauro Conti, Lucas Davi, Tommaso Frassetto, and Ahmad-Reza Sadeghi. The guard’s dilemma: Efficient code-reuse attacks against Intel SGX. In 27th USENIX Security Symposium, pages 1213–1227. USENIX Association, 2018.
[8] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza Sadeghi. Software grand exposure: SGX cache attacks are practical. In 11th USENIX Workshop on Offensive Technologies, 2017.
[9] Robert Buhren, Shay Gueron, Jan Nordholz, Jean-Pierre Seifert, and Julian Vetter. Fault attacks on encrypted general purpose compute platforms. In 7th ACM on Conference on Data and Application Security and Privacy. ACM, 2017.
[10] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang Lin, and Ten H. Lai. Sgxpectre attacks: Stealing Intel secrets from SGX enclaves via speculative execution. In 4th IEEE European Symposium on Security and Privacy. IEEE, 2019.
[11] CTS. Severe security advisory on AMD processors. https://safefirmware.com/amdflaws_whitepaper.pdf, 2017.
[12] Zhao-Hui Du, Zhiwei Ying, Zhenke Ma, Yufei Mai, Phoebe Wang, Jesse Liu, and Jesse Fang. Secure encrypted virtualization is unsecure. arXiv preprint arXiv:1712.05090, 2017.
[13] Fujian Chuang YI Jia He Digital Inc. Anjian v1.1.0. www.anjian.com, 2019.
[14] Blaise Gassend, G. Edward Suh, Dwaine Clarke, Marten van Dijk, and Srinivas Devadas. Caches and hash trees for efficient memory integrity verification. In 9th International Symposium on High-Performance Computer Architecture, 2003.
[15] Johannes Götzfried, Moritz Eckert, Sebastian Schinzel, and Tilo Müller. Cache attacks on Intel SGX. In EUROSEC, 2017.
[16] Marcus Hähnel, Weidong Cui, and Marcus Peinado. High-resolution side channels for untrusted operating systems. In USENIX Annual Technical Conference, 2017.
[17] Felicitas Hetzelt and Robert Buhren. Security analysis of encrypted virtual machines. In ACM SIGPLAN Notices. ACM, 2017.
[18] Intel. Intel architecture: Memory encryption technologies specification, 2017.
[19] David Kaplan. Protecting VM register state with SEV-ES. White paper, 2017.
[20] David Kaplan, Jeremy Powell, and Tom Woller. AMD memory encryption. White paper, 2016.
[21] Jae-Hyuk Lee, Jin Soo Jang, Yeongjin Jang, Nohyun Kwak, Yeseul Choi, Changho Choi, Taesoo Kim, Marcus Peinado, and Brent ByungHoon Kang. Hacking in darkness: Return-oriented programming against secure enclaves. In 26th USENIX Security Symposium, 2017.
[22] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim, and Marcus Peinado. Inferring fine-grained control flow inside SGX enclaves with branch shadowing. In 26th USENIX Security Symposium, 2017.
[23] Saeid Mofrad, Fengwei Zhang, Shiyong Lu, and Weidong Shi. A comparison study of Intel SGX and AMD memory encryption technology. In 7th International Workshop on Hardware and Architectural Support for Security and Privacy. ACM, 2018.
[24] Mathias Morbitzer, Manuel Huber, and Julian Horsch. Extracting secrets from encrypted virtual machines. In 9th ACM Conference on Data and Application Security and Privacy. ACM, 2019.
[25] Mathias Morbitzer, Manuel Huber, Julian Horsch, and Sascha Wessel. SEVered: Subverting AMD’s virtual machine encryption. In 11th European Workshop on Systems Security. ACM, 2018.
[26] Brian Rogers, Siddhartha Chhabra, Milos Prvulovic, and Yan Solihin. Using address independent seed encryption and bonsai Merkle trees to make secure processors OS- and performance-friendly. In 40th Annual IEEE/ACM International Symposium on Microarchitecture, 2007.
[28] Jaebaek Seo, Byoungyoung Lee, Seong Min Kim, Ming-Wei Shih, Insik Shin, Dongsu Han, and Taesoo Kim. Sgx-shield: Enabling address space layout randomization for SGX programs. In 24th Annual Network and Distributed System Security Symposium, 2017.
[29] Hovav Shacham. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In 14th ACM Conference on Computer and Communications Security. ACM, 2007.
[30] Shweta Shinde, Zheng Leong Chua, Viswesh Narayanan, and Prateek Saxena. Preventing page faults from telling your secrets. In 11th ACM on Asia Conference on Computer and Communications Security, 2016.
[31] Dawn Xiaodong Song, David Wagner, and Xuqing Tian. Timing analysis of keystrokes and timing attacks on SSH. In USENIX Security Symposium, 2001.
[32] Jo Van Bulck, Marina Minkin, Ofer Weisse, Daniel Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx. Foreshadow: Extracting the keys to the Intel SGX kingdom with transient out-of-order execution. In 27th USENIX Security Symposium, 2018.
[33] Jo Van Bulck, Nico Weichbrodt, Rüdiger Kapitza, Frank Piessens, and Raoul Strackx. Telling your secrets without page faults: Stealthy page table-based attacks on enclaved execution. In 26th USENIX Security Symposium. USENIX Association, 2017.
[34] Wenhao Wang, Guoxing Chen, Xiaorui Pan, Yinqian Zhang, XiaoFeng Wang, Vincent Bindschaedler, Haixu Tang, and Carl A Gunter. Leaky cauldron on the dark land: Understanding memory side-channel hazards in SGX. In ACM SIGSAC Conference on Computer and Communications Security, 2017.
[35] Yuming Wu, Yutao Liu, Ruifeng Liu, Haibo Chen, Binyu Zang, and Haibing Guan. Comprehensive VM protection against untrusted hypervisor through retrofitted AMD memory encryption. In International Symposium on High Performance Computer Architecture, 2018.
[36] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. Controlled-channel attacks: Deterministic side channels for untrusted operating systems. In IEEE Symposium on Security and Privacy. IEEE, 2015.
[27] Michael Schwarz, Samuel Weiser, Daniel Gruss, Clémentine Maurice, and Stefan Mangard. Malware Guard Extension: Using SGX to Conceal Cache Attacks. Springer International Publishing, 2017.
[37] Chenyu Yan, B. Rogers, D. Englender, D. Solihin, and M. Prvulovic. Improving cost, performance, and security of memory encryption and authentication. In 33rd International Symposium on Computer Architecture, 2006.

---

This version should be more readable and professional.