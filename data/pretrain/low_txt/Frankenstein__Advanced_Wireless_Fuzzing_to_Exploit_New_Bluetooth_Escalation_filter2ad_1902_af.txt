### Introduction

The ability to read and modify lower-layer packets for both BLE (Bluetooth Low Energy) and classic Bluetooth is a critical feature in the implementation of InternalBlue. During this process, the authors identified a security issue on various Broadcom chips. Despite existing research on Nordic Semiconductor and Broadcom firmware, there has been no public, systematic security testing on these chips.

### Over-the-Air Fuzzing and Existing Approaches

An over-the-air fuzzing approach was implemented on top of the HCI (Host Controller Interface) layer [37]. This black-box testing method primarily detects crashes, which may occur in the firmware. However, due to the focus on host-layer protocols, crashes are more likely to happen in the operating system. Other fuzzing implementations, such as syzkaller, support fuzzing HCI on Linux [31], while kAFL and its successors support fuzzing the Linux kernel [9, 42]. Implementation flaws in operating system components handling Bluetooth can lead to Remote Code Execution (RCE) across various operating systems, as demonstrated by the Blueborne attacks [4]. Even recent implementations, such as CVE-2020-0022 (alias BlueFrag), show that such vulnerabilities still exist [40].

### Exploitation of Broadcom Wi-Fi Chips

Broadcom's Wi-Fi chips were first exploited in 2017 by two independent research teams [5, 6]. Heap exploitation was documented in [6], but the heap structure differs in the HNDRTE operating system. Recently, new vulnerabilities in Broadcom Wi-Fi chips have been revealed [1].

### Exploitation of Other Chipsets

Other chipsets have also been successfully exploited. For example, Marvell Avastar Wi-Fi, which uses similar technologies to Broadcom, had comparable heap vulnerabilities [43]. The author used afl-unicorn for fuzzing [49] but did not document the precise setup or publish any source code. The Intel LTE stack, based on x86, was successfully exploited despite memory protection mechanisms [26]. MediaTek baseband exists in both ARM and MIPS variants and was fuzzed based on the emulation of security-relevant protocol handlers [34, 36]. Qualcomm uses its own architecture and assembly for Digital Signal Processing (DSP), Hexagon, and implements various memory protection mechanisms and secure boot. Nonetheless, an over-the-air Wi-Fi buffer overflow exploit that escalates into the Linux kernel driver's memory allocation was found [25]. Security analysis of the Wi-Fi firmware was done manually.

### Emulation-Based Fuzzing

In general, emulation-based fuzzing is supported by TriforceAFL [29], which uses full-system emulation instead of QEMU user-mode emulation like Frankenstein. Instead of adding hooks to the firmware, it modifies QEMU.

### Over-the-Air Analysis

In contrast to static program analysis and emulation-based fuzzing, LTEFuzz performs over-the-air analysis on LTE and has found vulnerabilities in various mobile devices and core network components [32]. SpikerXG wirelessly fuzzes 2G on multiple smartphones in parallel, including a packet mutator using YateBTS [28, 45]. Such approaches are feasible for 2G and LTE because open-source projects like OpenAirInterface and srsLTE already implement many common protocol features on SDRs [38, 44]. For Bluetooth, there is currently no comparable implementation, and over-the-air analysis often cannot determine the precise causes of crashes.

### Conclusion

In this paper, we demonstrate several security issues arising from Bluetooth RCE, ranging from problems with the Bluetooth specification to broken driver implementations in various operating systems. Our findings reveal the possibility of escalating beyond the Bluetooth circuit boundaries, allowing attackers to take control of the chip over-the-air and disrupt Wi-Fi and LTE communications or even crash the entire smartphone.

We created Frankenstein, a tool for non-wireless fuzzing of wireless firmware in an emulated environment. Frankenstein restarts emulation from snapshots of the device's physical state after frame reception, enabling unprecedented fuzzing speed and the ability to find full-stack bugs. Emulation allows us to understand RCE vulnerabilities that do not immediately cause a crash but are potentially dangerous.

Our findings have led to contact with further chip manufacturers, confirming high interest in and awareness of technologies that allow testing wireless implementations and help fix vulnerabilities. The vulnerability patching issues of Broadcom Bluetooth chips highlight the importance of building sustainable and secure update mechanisms. We found the responsible disclosure process concerning; one of our attacks, CVE-2019-11516, was internally discovered by Broadcom in February 2018, but when we informed them in April 2019, our PoC was still working on all Broadcom chips we had access to. Typically, a Bluetooth chip becomes available in off-the-shelf devices at least one year after its initial release. Due to patching constraints and the ease of analyzing patches, Broadcom cannot patch all vulnerabilities on older chips. Each patch carries a high risk of leaking a vulnerability. Despite monthly contact with Samsung, a fix for CVE-2019-11516 took until mid-September 2019 on the Samsung Galaxy S8, which is relatively well-supported.

Despite failing to fix Bluetooth firmware vulnerabilities, mobile operating systems integrate Bluetooth into critical components. With the widespread presence of Bluetooth, even worms spreading wirelessly become feasible. Recent mobile operating systems do not reset and disable Bluetooth properly, even though they suggest to users that they do. The advice to turn off Bluetooth when not needed is insufficient. The trend of always being connected is alarming regarding over-the-air attacks. Ideally, this trend can be reversed in the future, giving back control over wireless technologies to users.

### Acknowledgments

We thank Apple, Broadcom, Cypress, Express Logic, Fitbit, Google, and Samsung for handling the responsible disclosure requests, and René Mayrhofer for assisting us in the responsible disclosure process. Additionally, we thank Dennis Heinze for porting InternalBlue to iOS and testing CVE-2019-15063 on various iPhones, Dennis Mantz for testing it on the iPhone X, and Michael Spörk for the BLE expertise. We also thank Lars Almon, Oliver Pöllny, Bianca Mix, Tim Walter, Dominik Maier, and Teal Starsong for proofreading and Nils Ole Tippenhauer for shepherding this paper.

This work has been funded by the German Federal Ministry of Education and Research and the Hessen State Ministry for Higher Education, Research, and the Arts within their joint support of the National Research Center for Applied Cybersecurity ATHENE.

### Availability

Frankenstein is publicly available on https://github.com/seemoo-lab/frankenstein.

### References

[1] Hugues Anguelkov. Reverse-engineering Broadcom Wireless Chipsets. https://blog.quarkslab.com/reverse-engineering-broadcom-wireless-chipsets.html, Apr 2019.
[2] Daniele Antonioli, Nils Ole Tippenhauer, and Kasper B. Rasmussen. The KNOB is Broken: Exploiting Low Entropy in the Encryption Key Negotiation Of Bluetooth BR/EDR. In 28th USENIX Security Symposium (USENIX Security 19), pages 1047–1061, Santa Clara, CA, August 2019. USENIX Association.
[3] Apple. Set up Find My on your iPhone, Mac, and other devices. https://support.apple.com/en-us/HT210400, 2019.
[4] Inc. Armis. The Attack Vector ‘BlueBorne’ Exposes Almost Every Connected Device. https://www.armis.com/blueborne/, 2017.
[5] Nitay Artenstein. Broadpwn: Remotely Compromising Android and iOS via a Bug in Broadcom’s Wi-Fi Chipsets. https://blog.exodusintel.com/2017/07/26/broadpwn/, 2017.
[6] Gal Beniamini. Over The Air: Exploiting Broadcom’s Wi-Fi Stack (Part 1). https://googleprojectzero.blogspot.com/2017/04/over-air-exploiting-broadcoms-wi-fi_4.html, 2017.
[7] Nishant Bhaskar, Maxwell Bland, Kirill Levchenko, and Aaron Schulman. Please Pay Inside: Evaluating Bluetooth-based Detection of Gas Pump Skimmers. In 28th USENIX Security Symposium (USENIX Security 19), pages 373–388, Santa Clara, CA, August 2019. USENIX Association.
[8] Eli Biham and Lior Neumann. Breaking the Bluetooth Pairing: Fixed Coordinate Invalid Curve Attack. http://www.cs.technion.ac.il/~biham/BT/bt-fixed-coordinate-invalid-curve-attack.pdf, 2018.
[9] Tim Blazytko, Cornelius Aschermann, Moritz Schlögel, Ali Abbasi, Sergej Schumilo, Simon Wörner, and Thorsten Holz. GRIMOIRE: Synthesizing Structure while Fuzzing. In 28th USENIX Security Symposium (USENIX Security 19), pages 1985–2002, Santa Clara, CA, August 2019. USENIX Association.
[10] BlueKitchen. BTstack. http://bluekitchen-gmbh.com/btstack/.
[11] Bluetooth SIG. Bluetooth Market Update 2019. https://www.bluetooth.com/bluetooth-resources/2019-bluetooth-market-update/, 2019.
[12] Bluetooth SIG. Bluetooth Core Specification 5.2. https://www.bluetooth.com/specifications/bluetooth-core-specification, January 2020.
[13] BlueZ Project. BlueZ - Official Linux Bluetooth protocol stack. http://www.bluez.org/.
[14] Amat Cama. A walk with Shannon. https://downloads.immunityinc.com/infiltrate2018-slidepacks/amat-cama-a-walk-with-shannon/presentation.pdf, 2018.
[15] Damien Cauquil. btlejack, 2019. Bluetooth Low Energy Swiss Army Knife. https://github.com/virtualabs/btlejack.
[16] Jiska Classen and Dennis Mantz. Reversing and Exploiting Broadcom Bluetooth, June 2019.
[17] Cypress Semiconductor. Cypress to acquire Broadcom’s wireless internet of things business. https://www.cypress.com/news/cypress-acquire-broadcom-s-wireless-internet-things-business-0, June 2016.
[18] Cypress Semiconductor Corporation. CYW920735Q60EVB-01 Overview. https://cypress.com/CYW920735Q60EVB-01.
[19] Cypress Semiconductor Corporation. Bluetooth (BR + EDR + BLE) Connectivity Solution Families. https://www.cypress.com/products/ble-bluetooth, 2020.
[20] Bernhard Schulz Detlev Liebl. LTE and Bluetooth In-Device Coexistence with WLAN. Application Note. https://scdn.rohde-schwarz.com/ur/pws/dl_downloads/dl_application/application_notes/1ma255/1MA255_2e_Coex_LTE_BT_WLAN.pdf.
[21] Sushant Dinesh, Nathan Burow, Dongyan Xu, and Mathias Payer. Retrowrite: Statically instrumenting COTS binaries for fuzzing and sanitization. In IEEE Symposium on Security and Privacy (SP), 2020.
[22] Express Logic. THREADX RTOS - Royalty Free Real-Time Operating System. https://rtos.com/solutions/threadx/real-time-operating-system/, August 2019.
[23] Jan Friebertshäuser. Polypyus – The Firmware Historian. https://github.com/seemoo-lab/polypyus/, 2020.
[24] Gaasedelen. Lighthouse - A Code Coverage Explorer for Reverse Engineers. https://github.com/gaasedelen/lighthouse.
[25] Xiling Gong and Peter Pi. Exploiting Qualcomm WLAN and Modem Over The Air. In DEF CON 27, Aug 2019.
[26] Guy. Burned in Ashes: Baseband Fairy Tale Stories. In REcon, Jun 2019.
[27] Dennis Heinze, Jiska Classen, and Felix Rohrbach. MagicPairing: Apple’s Take on Securing Bluetooth Peripherals. The 13th ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec ’20), Jul 2020.
[28] Grant Hernandez and Kevin RB Butler. Basebads: Automated security analysis of baseband firmware: poster. In Proceedings of the 12th Conference on Security and Privacy in Wireless and Mobile Networks, 2019.
[29] Jesse Hertz and Tim Newsham. TriforceAFL: AFL/QEMU fuzzing with full-system emulation. https://github.com/nccgroup/TriforceAFL, 2020.
[30] Jerry Hildenbrand. How to use Smart Lock to unlock your phone automatically. https://www.androidcentral.com/smart-lock, 2018.
[31] Google Inc., Baozeng Ding, Lorenzo Stoakes, Jeremy Huang, Shuai Bai, Alexander Popov, Jean-Baptiste Cayrou, Yuzhe Han, Thomas Garnier, Utkarsh Anand, Tobias Klauser, Tim Tianyang Chen, Ed Maste, Sumukha PK, Mitchell Horne, Hangbin Liu, Denis Efremov, Ondrej Mosnacek, Chi Pham, Anton Lindqvist, Greg Steuck, Shankara Pailoor, Michael Tuexen, Kamil Rytarowski, Siddharth Muralee, Dan Robertson, Mark Johnston, Mellanox Technologies, Cody Holliday, Jin-Woo Lee, and Andrew Turner. syzkaller is an Unsupervised, Coverage-Guided Kernel Fuzzer. https://github.com/google/syzkaller, 2019.
[32] Hongil Kim, Jiho Lee, Lee Eunkyu, and Yongdae Kim. Touching the Untouchables: Dynamic Security Analysis of the LTE Control Plane. In Proceedings of the IEEE Symposium on Security & Privacy (SP). IEEE, May 2019.
[33] Linux. ptmx(4) - Linux man page. https://linux.die.net/man/4/ptmx.
[34] Dominik Maier, Lukas Seidel, and Shinjo Park. BaseSAFE: Baseband SAnitized Fuzzing through Emulation. The 13th ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec ’20), Jul 2020.
[35] Dennis Mantz, Jiska Classen, Matthias Schulz, and Matthias Hollick. InternalBlue - Bluetooth Binary Patching and Experimentation Framework. In The 17th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys ’19), Jun 2019.
[36] Marco Grassi and Kira. Exploring the MediaTek Baseband. https://www.offensivecon.org/speakers/2020/marco-grassi-kira.html, Feb 2020.
[37] Tommi Mäkilä and Jukka Taimisto. Intelligent Bluetooth Fuzzing - Why bother? https://www.youtube.com/watch?v=Rvzrr_jfH64, Nov 2011.
[38] OpenAirInterface. OpenAirInterface - 5G software alliance for democratising wireless innovation.
[39] Jan Ruge. randomFuzz. https://github.com/bolek42/randomFuzz/commit/8ecdd12d83959e7c923ef5e48abdec46bff2ec56.
[40] Jan Ruge. CVE-2020-0022 an Android 8.0-9.0 Bluetooth Zero-Click RCE – BlueFrag. https://insinuator.net/2020/04/cve-2020-0022-an-android-8-0-9-0-bluetooth-zero-click-rce-bluefrag/, Feb 2020.
[41] Matthias Schulz. Teaching Your Wireless Card New Tricks: Smartphone Performance and Security Enhancements Through Wi-Fi Firmware Modifications. PhD thesis, Technische Universität, 2018.
[42] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and Thorsten Holz. kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels. In 26th USENIX Security Symposium (USENIX Security 17), pages 167–182, Vancouver, BC, August 2017. USENIX Association.
[43] Denis Selyanin. Remotely Compromise Devices by Using Bugs in Marvell Avastar Wi-Fi: From Zero Knowledge to Zero-Click RCE. https://2018.zeronights.ru/wp-content/uploads/materials/19-Researching-Marvell-Avastar-Wi-Fi.pdf, 2018.
[44] Software Radio Systems Limited. srsLTE. https://github.com/srsLTE/srsLTE, August 2019.
[45] SS7ware Inc. YateBTS - LTE and GSM mobile network components for MNO and MVNO. https://yatebts.com/.
[46] Milan Stute, Sashank Narain, Alex Mariotto, Alexander Heinrich, David Kreitschmann, Guevara Noubir, and Matthias Hollick. A Billion Open Interfaces for Eve and Mallory: MitM, DoS, and Tracking Attacks on iOS and macOS Through Apple Wireless Direct Link. In 28th USENIX Security Symposium (USENIX Security 19), pages 37–54, Santa Clara, CA, August 2019. USENIX Association.
[47] Fabian Ullrich, Jiska Classen, Johannes Eger, and Matthias Hollick. Vacuums in the Cloud: Analyzing Security in a Hardened IoT Ecosystem. In The 13th USENIX Workshop on Offensive Technologies (WOOT), August 2019.
[48] Unicorn. The Ultimate CPU Emulator. http://www.unicorn-engine.org/.
[49] Nathan Voss. afl-unicorn. https://github.com/Battelle/afl-unicorn, August 2019.