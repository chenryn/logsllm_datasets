### Network Sniffing and Rule Construction

Through network sniffing, we can construct new rules to detect a wider range of attacks and refine existing rules to produce more accurate results.

### 4.3 Summary

Our module extracts all transaction information from the web server and formats it in a way that the analysis engine can understand. The module then transmits this information (through multiple steps due to the aforementioned implementation issues) to the analysis engine located on a separate host. No changes to the analysis engine were necessary, even for detecting attacks over an encrypted SSL channel. This means the module and the network-based event data collector can be used interchangeably with the same knowledge base. To fully leverage the additional information provided by the module, we need to develop new detection rules.

### 5 Monitor Performance

From a performance standpoint, the application-integrated module does not perform any computationally intensive tasks. It simply accesses a few variables and formats the information before sending it. This should not degrade server performance. However, to substantiate our claim, we considered including a call to a timing function (in C) to measure the execution time within the module. We decided against this approach, as we are more interested in measuring the user experience when the entire monitor is running. Therefore, we configured the module to send data to the eXpert-HTTP analysis engine on another host, as shown in Fig. 2.

WebLoad, developed by RadView Software, is an advanced web application testing and analysis package [10]. It allows us to continuously fetch a single URL over a specified time interval and measures the round-trip time for each transaction, providing a fair assessment of the user experience. We used the free evaluation version of WebLoad, which has some limitations compared to the full commercial version, such as no support for SSL and a maximum of 12 virtual clients. These restrictions did not significantly limit our ability to evaluate the module's performance.

We conducted four runs, each lasting 60 minutes and using 10 virtual clients on a single physical client host. We tested two types of URLs: one returning a web page with about 50 KB of text and a 12 KB JPEG image, and the other executing a CGI program. A summary of the results is presented in Table 2. The absolute values may seem high due to the relatively low-end server hardware configuration. The small relative difference in performance between running the monitor and not running it is likely due to the CPU load imposed by the auxiliary communications process and eFunnel running in parallel with the web server. We believe these results confirm that a future application-integrated module can have zero performance impact (in terms of response time) on the Apache application, as explained below.

In Fig. 1, we show the request cycle for the server. The module logs the request after it has been sent back to the client. Therefore, we expect that the penalty of the module can be postponed until the next request. In Fig. 3, we detail a possible scenario of what could happen in the server. The server spawns several child processes to handle new requests. As long as there are enough children, the penalty of the module should not be noticeable, as a child can complete logging before receiving the next request. Under heavy load, where a request must wait for the logging of the previous request, this would be different.

Apache/1.3.6 behaves differently from what is depicted in Fig. 3. Depending on the content sent back to the client, we observed different behaviors, which we suspect are due to different implementations of the so-called Content-Handlers [12].

### 6 Related Work

The concept of application-based Intrusion Detection Systems (IDSs) is not new, and there are indications that this will be the next major field for commercial IDS vendors. Some IDSs are capable of monitoring firewalls [6]. However, we are currently aware of only one commercial Web server IDS, AppShield from Sanctum, Inc. [11]. It acts as a proxy that monitors HTML pages sent out, ensuring that the returned information is valid (e.g., allowing the use of hidden fields). Although it actively monitors the web server, it is not integrated into a larger IDS framework.

The work closest to our approach is that of Burak Dayioglu [5]. His module matches the current request with a list of known vulnerable CGI programs. Since the analysis is performed in line with data collection, there is a greater risk of reduced server performance, especially if the list grows large.

### 7 Improvements

The module prototype described in this paper is the first step in exploring the possibilities of application-integrated data collection for IDS. By extending the IDS knowledge base to fully utilize the information available through the module, we hope to improve detection rates and reduce false-alarm rates. A natural next step is to develop similar data collection modules for other server applications, such as FTP, email, databases, and other web servers. We already have a working prototype for the iPlanet web server.

It could also be interesting to have the analysis engine compare the transaction data from the application-integrated module with data from network sniffing. The subset of data items available to both collectors should normally be identical, except when someone actively tries to deceive one of the collectors. This could potentially enable the detection of advanced attacks that attempt to circumvent the IDS.

In Section 4, we discussed the trade-off between preemptive capabilities (application-integrated analysis) and low performance impact (application-integrated data collection but external analysis). We propose a two-tier architecture where the application-integrated module performs a quick and simple analysis before the request is granted by the application and then passes the data to an external advanced analysis engine. If the first analysis detects an attack attempt, it could deny the request. The second analysis could provide feedback to the first, such as the name of a host that launched an attack and should not be serviced again. Instead of outright denying the request, the application-integrated module could suspend a suspicious request until the external analysis engine reaches a conclusion. By tuning the first filter, we could restrict the performance penalty to a small subset of all requests while still being able to thwart attacks.

### 8 Conclusions

We have presented an application-integrated approach to data collection for intrusion detection. By being highly specialized, the module is closely tailored to the application and has access to more information than external monitors, enabling the detection of more attacks and reducing false alarms. Although each module is specific to one application product, leading to increased development costs, we have shown several reasons why this is not a severe limitation. If this approach becomes popular, we expect vendors to provide APIs for similar products in the future to stay competitive. This means very little extra effort is needed to include this type of monitor in a component-based IDS, such as EMERALD. We also demonstrated the advantages of our prototype for the Apache web server. It provided access to internal server information, helping the IDS understand how the server parsed the request. The module had access to decrypted requests, even if they were transported over SSL. By clearly separating data collection from the analysis engine, the performance penalty was negligible. The knowledge base could be used without changes, thus leveraging previous investments.

### Acknowledgments

Phillip Porras and Steven Dawson of SRI International made an early prototype design and implementation of a transaction-data collection module for Apache. Their work served as an example and inspiration for the implementation presented in this paper.

### References

[1] M. Almgren, H. Debar, and M. Dacier. A lightweight tool for detecting web server attacks. In Proceedings of the 2000 ISOC Symposium on Network and Distributed Systems Security, pages 157–170, San Diego, California, Feb. 2–4, 2000.

[2] W. R. Cheswick and S. M. Bellovin. Firewalls and Internet Security: Repelling the Wily Hacker. Addison-Wesley, 1994.

[3] T. E. Daniels and E. H. Spafford. Identification of host audit data to detect attacks on low-level IP vulnerabilities. Journal of Computer Security, 7(1):3–35, 1999.

[4] T. E. Daniels and E. H. Spafford. A network audit system for host-based intrusion detection (NASHID) in Linux. In Proceedings of the 16th Annual Computer Security Applications Conference, New Orleans, Louisiana, Dec. 11–15, 2000.

[5] B. Dayioglu, Mar. 2001. http://yunus.hacettepe.edu.tr/~burak/mod_id/.

[6] K. A. Jackson. Intrusion detection system (IDS) product survey. Technical Report LA-UR-99-3883, Los Alamos National Laboratory, Los Alamos, New Mexico, June 25, 1999. Version 2.1.

[7] The Netcraft Web server survey, Feb. 2001. http://www.netcraft.com/survey/.

[8] P. A. Porras and P. G. Neumann. EMERALD: Event monitoring enabling responses to anomalous live disturbances. In Proceedings of the 20th National Information Systems Security Conference, pages 353–365, Baltimore, Maryland, Oct. 7–10, 1997. National Institute of Standards and Technology/National Computer Security Center.

[9] T. H. Ptacek and T. N. Newsham. Insertion, evasion, and denial of service: Eluding network intrusion detection. Technical report, Secure Networks, Inc., Calgary, Alberta, Canada, Jan. 1998. http://www.clark.net/~roesch/idspaper.html.

[10] RadView Software, Inc., Mar. 2001. http://www.radview.com/.

[11] Sanctum, Inc., Mar. 2001. http://www.sanctuminc.com/.

[12] L. Stein and D. MacEachern. Writing Apache Modules with Perl and C. O’Reilly & Associates, 1999.