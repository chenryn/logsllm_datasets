### Introduction

To call the SGX primitives in native C/C++, SecureKeeper was designed to maintain a small Trusted Computing Base (TCB). This system imposes a 32.18% overhead on the base ZooKeeper. Schuster et al. proposed VC3, which operates with unmodified Hadoop and uses Intel SGX to protect Map-Reduce code and job execution. In VC3, all Map-Reduce jobs run inside the enclave with a single executing thread, and all intermediate Map-Reduce results are kept encrypted during job execution. The performance overhead of VC3 ranges from 4.3% to 24.5% when the enclave self-integrity checking mode is used.

Pires et al. introduced a lightweight, secure Map-Reduce framework that leverages Intel SGX. Their system integrates a lightweight virtual machine for Lua, a high-level language that interprets Map-Reduce scripts, and a Secure Content-Based Routing System (SCBR), a secure publish/subscribe system for message passing and data distribution in distributed systems. The system involves three main entities: the client, SCBR, and worker nodes, which collaborate to execute a Map-Reduce workflow. All message routing and script execution occur within the secure enclave, with reported performance overheads up to 2x.

Zheng et al. developed Opaque, which enhances the security of Spark SQL using SGX. One of its execution modes, the encryption mode, provides confidentiality protection for data and results. In this mode, Opaque's code at the client side is transferred to the enclave, verified via Intel attestation, and secret keys are distributed inside the enclave. Experimental results show that the encryption mode imposes a 3.3x performance overhead. Opaque also uses oblivious and oblivious pad modes to protect against access pattern and size leakage, with experimental results showing an overhead ranging from 1.60x to 46x.

### Conclusions and Future Work

In this paper, we present SecDATAVIEW, an efficient and secure big data workflow management system that protects the confidentiality and integrity of Java-written tasks and data in the workflow using SGX/SEV worker nodes. SecDATAVIEW significantly reduces the TCB size of the worker node and secures the Task Executor and individual workflow tasks by executing them inside the SGX enclave or SEV-protected instance. Our experiments with various workflows demonstrate the system's usability with low performance overhead while ensuring confidential task execution at runtime. We plan to investigate the security issues of collaborative scientific workflows, where multiple users design and execute workflows collaboratively in the cloud.

### Acknowledgments

We would like to thank the anonymous reviewers for their insightful comments, which helped improve this paper. This work is supported by the National Science Foundation under grant NSF OAC-1738929.

### References

[1] [n.d.]. National Institute of Standards, National Vulnerability Database. https://nvd.nist.gov/.

[29] David Kaplan, Jeremy Powell, and Tom Woller. 2016. AMD Memory Encryption.

[2] Secunia Advisory. 2013. Xen PV Kernel Decompression Multiple Vulnerabilities.

[3] Ishtiaq Ahmed, Shiyong Lu, Changxin Bai, and Fahima Amin Bhuyan. 2018. Diagnosis Recommendation Using Machine Learning Scientific Workflows. In Big Data Congress, 2018 IEEE International Conference on. IEEE.

[4] AMD. 2018. Secure Encrypted Virtualization API Version 0.16. https://support.amd.com/en-us/search/tech-docs.

[5] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent Scarlata. 2013. Innovative Technology for CPU Based Attestation and Sealing. In Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy, Vol. 13.

[6] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas Knauth, Andre Martin, Christian Priebe, Joshua Lind, Divya Muthukumaran, Dan O’Keeffe, and Mark L Stillwell. 2016. SCONE: Secure Linux Containers with Intel SGX. In OSDI, Vol. 16. 689–703.

[7] Alessandro Barenghi, Luca Breveglieri, Israel Koren, and David Naccache. 2012. Fault Injection Attacks on Cryptographic Devices: Theory, Practice, and Countermeasures. Proc. IEEE 100, 11 (2012), 3056–3076.

[8] Andrew Baumann, Marcus Peinado, and Galen Hunt. 2015. Shielding Applications from an Untrusted Cloud with Haven. ACM Transactions on Computer Systems (TOCS) 33, 3 (2015), 8.

[9] Andrew Baumann, Marcus Peinado, and Galen Hunt. 2015. VC3: Trustworthy Data Analytics in the Cloud Using SGX. In IEEE Symposium on Security and Privacy (SP), 2015. IEEE, 38–54.

[10] Fahima Bhuyan, Shiyong Lu, Ishtiaq Ahmed, and Jia Zhang. 2017. Predicting Efficacy of Therapeutic Services for Autism Spectrum Disorder Using Scientific Workflows. In 2017 IEEE International Conference on Big Data (Big Data). IEEE, 3847–3856.

[11] inc Black Duck Software. [n.d.]. Black Duck Open Hub. https://www.openhub.net/p?query=xen&sort=relevance.

[12] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza Sadeghi. 2017. Software Grand Exposure: SGX Cache Attacks Are Practical. arXiv preprint arXiv:1702.07521 (2017), 33.

[13] Stefan Brenner, Colin Wulf, David Goltzsche, Nico Weichbrodt, Matthias Lorenz, Christof Fetzer, Peter Pietzuch, and Rüdiger Kapitza. 2016. SecureKeeper: Confidential ZooKeeper Using Intel SGX. In Middleware. 14.

[14] Sven Bugiel, Stefan Nürnberger, Thomas Pöppelmann, Ahmad-Reza Sadeghi, and Thomas Schneider. 2011. AmazonIA: When Elasticity Snaps Back. In Proceedings of the 18th ACM Conference on Computer and Communications Security. ACM, 389–400.

[15] Jon Crowcroft. 2018. Description of SGX-LKL by Peter Pietzuch - Imperial College London. https://www.cl.cam.ac.uk/~jac22/talks/ox-strachey-6.3.2018.pptx.

[16] Jeffrey Dean and Sanjay Ghemawat. 2008. MapReduce: Simplified Data Processing on Large Clusters. Commun. ACM 51, 1 (2008), 107–113.

[17] Tien Tuan Anh Dinh, Prateek Saxena, Ee-Chien Chang, Beng Chin Ooi, and Chunwang Zhang. 2015. M2R: Enabling Stronger Privacy in MapReduce Computation. In USENIX Security Symposium. 447–462.

[18] Paul D'Avilar, Jeremy D'Errico, Ken Berends, and Michael Peck. 2004. Reading Guide 3: Authenticated Encryption. (2004).

[19] Xubo Fei and Shiyong Lu. 2010. A Dataflow-Based Scientific Workflow Composition Framework. IEEE Transactions on Services Computing 5, 1 (2010), 45–58.

[20] Robert W Graves and Arben Pitarka. 2010. Broadband Ground-Motion Simulation Using a Hybrid Approach. Bulletin of the Seismological Society of America 100, 5A (2010), 2095–2123.

[21] Marcus Hähnel, Weidong Cui, and Marcus Peinado. 2017. High-Resolution Side Channels for Untrusted Operating Systems. In Proceedings of the 2017 USENIX Conference on Usenix Annual Technical Conference (USENIX ATC '17). USENIX Association, Berkeley, CA, USA, 299–312. http://dl.acm.org/citation.cfm?id=3154690.3154719

[22] Hajar Hamidian, Shiyong Lu, Satyendra Rana, Farshad Fotouhi, and Hamid Soltanian-Zadeh. 2014. Adapting Medical Image Processing Tasks to a Scalable Scientific Workflow System. In 2014 IEEE World Congress on Services. IEEE, 385–392.

[23] Ashwin Hirschi. 2007. Traveling Light, the Lua Way. IEEE Software 24, 5 (2007).

[24] Matthew Hoekstra, Reshma Lal, Pradeep Pappachan, Vinay Phegade, and Juan Del Cuvillo. 2013. Using Innovative Instructions to Create Trustworthy Software Solutions. In HASP@ ISCA. 11.

[25] Intel. 2018. Intel Software Guard Extensions SDK (EDL). https://software.intel.com/en-us/sgx-sdk-dev-reference.

[26] Intel. 2019. Intel Software Guard Extensions SDK (ECALL-OCALL Functions). https://software.intel.com/en-us/node/702973.

[27] Geetha Jagannathan and Rebecca N Wright. 2005. Privacy-Preserving Distributed k-Means Clustering Over Arbitrarily Partitioned Data. In Proceedings of the Eleventh ACM SIGKDD International Conference on Knowledge Discovery in Data Mining. ACM, 593–599.

[28] David Kaplan. 2016. AMD x86 Memory Encryption Technologies. USENIX Association, Austin, TX. White paper, Apr (2016).

[30] Kashlev et al. 2014. A System Architecture for Running Big Data Workflows in the Cloud. In Proc. of the 2014 IEEE International Conference on Services Computing (SCC). IEEE, 51–58.

[31] Andrey Kashlev and Shiyong Lu. 2014. A System Architecture for Running Big Data Workflows in the Cloud. In Services Computing (SCC), 2014 IEEE International Conference on. IEEE, 51–58.

[32] Andrey Kashlev and Shiyong Lu. 2014. A System Architecture for Running Big Data Workflows in the Cloud. In Services Computing (SCC), 2014 IEEE International Conference on. IEEE, 51–58.

[33] Andrey Kashlev, Shiyong Lu, and Aravind Mohan. 2017. Big Data Workflows: A Reference Architecture and the DATAVIEW System. Services Transactions on Big Data (STBD) 4, 1 (2017), 1–19.

[34] Kostya Kortchinsky. 2009. Cloudburst: A VMware Guest to Host Escape Story. Black Hat USA (2009), 19.

[35] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim, and Marcus Peinado. 2017. Inferring Fine-Grained Control Flow Inside SGX Enclaves with Branch Shadowing. In 26th USENIX Security Symposium, USENIX Security. 16–18.

[36] Cui Lin, Shiyong Lu, Xubo Fei, Artem Chebotko, Darshan Pai, Zhaoqiang Lai, Farshad Fotouhi, and Jing Hua. 2009. A Reference Architecture for Scientific Workflow Management Systems and the VIEW SOA Solution. IEEE Transactions on Services Computing 2, 1 (2009), 79–92.

[37] Xiao Liu, Dong Yuan, Gaofeng Zhang, Wenhao Li, Dahai Cao, Qiang He, Jinjun Chen, and Yun Yang. 2011. The Design of Cloud Workflow Systems. Springer Science & Business Media.

[38] LSDS. 2018. SGX-LKL, Remote Attestation. https://github.com/lsds/sgx-lkl/wiki/Remote-Attestation-and-Remote-Control.

[39] LSDS. 2019. The Allan Turing Institute SGX-LKL Library. https://www.turing.ac.uk/research/publications/sgx-lkl-library-os-running-java-applications-intel-sgx-enclaves.

[40] LSDS. 2019. LSDS SGX-LKL Library. https://github.com/lsds/sgx-lkl.

[41] Shiyong Lu and Jia Zhang. 2009. Collaborative Scientific Workflows. In 2009 IEEE International Conference on Web Services. IEEE, 527–534.

[42] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos V Rozas, Hisham Shafi, Vedvyas Shanbhogue, and Uday R Savagaonkar. 2013. Innovative Instructions and Software Model for Isolated Execution. In HASP@ISCA. 10.

[43] Saeid Mofrad, Fengwei Zhang, Shiyong Lu, and Weidong Shi. 2018. A Comparison Study of Intel SGX and AMD Memory Encryption Technology. In Proceedings of the 7th International Workshop on Hardware and Architectural Support for Security and Privacy (HASP '18). ACM, New York, NY, USA, Article 9, 8 pages. https://doi.org/10.1145/3214292.3214301

[44] Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisenbarth. 2017. CacheZoom: How SGX Amplifies the Power of Cache Attacks. In International Conference on Cryptographic Hardware and Embedded Systems. Springer, 69–90.

[45] Diego Perez-Botero, Jakub Szefer, and Ruby B Lee. 2013. Characterizing Hypervisor Vulnerabilities in Cloud Computing Servers. In Proceedings of the 2013 International Workshop on Security in Cloud Computing. ACM, 3–10.

[46] Rafael Pires, Daniel Gavril, Pascal Felber, Emanuel Onica, and Marcelo Pasin. 2017. A Lightweight MapReduce Framework for Secure Processing with SGX. In Cluster, Cloud and Grid Computing (CCGRID), 2017 17th IEEE/ACM International Symposium on. IEEE, 1100–1107.

[47] Rafael Pires, Marcelo Pasin, Pascal Felber, and Christof Fetzer. 2016. Secure Content-Based Routing Using Intel Software Guard Extensions. In Proceedings of the 17th International Middleware Conference. ACM, 10.

[48] Jean-François Raymond. 2001. Traffic Analysis: Protocols, Attacks, Design Issues, and Open Problems. In Designing Privacy Enhancing Technologies. Springer, 10–29.

[49] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan Savage. 2009. Hey, You, Get Off of My Cloud: Exploring Information Leakage in Third-Party Compute Clouds. In Proceedings of the 16th ACM Conference on Computer and Communications Security. ACM, 199–212.

[50] Francisco Rocha and Miguel Correia. 2011. Lucy in the Sky Without Diamonds: Stealing Confidential Data in the Cloud. In Dependable Systems and Networks Workshops (DSN-W), 2011 IEEE/IFIP 41st International Conference on. IEEE, 129–134.

[51] Phillip Rogaway. 2002. Authenticated-Encryption with Associated-Data. In Proceedings of the 9th ACM Conference on Computer and Communications Security (CCS '02). ACM, New York, NY, USA, 98–107. https://doi.org/10.1145/586110.586125

[52] Bruce Schneier. 2007. Applied Cryptography: Protocols, Algorithms, and Source Code in C. John Wiley & Sons.

[53] Michael Schwarz, Samuel Weiser, Daniel Gruss, Clémentine Maurice, and Stefan Mangard. 2017. Malware Guard Extension: Using SGX to Conceal Cache Attacks. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 3–24.

[54] Cloud Research Security. 2018. SGX-LKL, SCONE, Graphene-SGX-Remote Attestation Status. https://github.com/lsds/sgx-lkl/issues/13.

[55] Chia-Che Tsai, Donald E Porter, and Mona Vij. 2017. Graphene-SGX: A Practical Library OS for Unmodified Applications on SGX. In 2017 USENIX Annual Technical Conference (USENIX ATC).

[56] Wenhao Wang, Guoxing Chen, Xiaorui Pan, Yinqian Zhang, XiaoFeng Wang, Vincent Bindschaedler, Haixu Tang, and Carl A Gunter. 2017. Leaky Cauldron on the Dark Land: Understanding Memory Side-Channel Hazards in SGX. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2421–2434.

[57] Rafal Wojtczuk, Joanna Rutkowska, and Alexander Tereshkin. 2008. Xen 0wning Trilogy. Invisible Things Lab (2008).

[58] Yuan Xiao, Mengyuan Li, Sanchuan Chen, and Yinqian Zhang. 2017. Stacco: Differentially Analyzing Side-Channel Traces for Detecting SSL/TLS Vulnerabilities in Secure Enclaves. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 859–874.

[59] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. 2015. Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems. In Security and Privacy (SP), 2015 IEEE Symposium on. IEEE, 640–656.

[60] Jia Zhang, Daniel Kuc, and Shiyong Lu. 2012. Confucius: A Tool Supporting Collaborative Scientific Workflow Composition. IEEE Transactions on Services Computing 7, 1 (2012), 2–17.

[61] Wenting Zheng, Ankur Dave, Jethro G Beekman, Raluca Ada Popa, Joseph E Gonzalez, and Ion Stoica. 2017. Opaque: An Oblivious and Encrypted Distributed Analytics Platform. In NSDI. 283–298.

### Appendix

The WCPAC protocol's main functionalities include:
1. Provisioning and attesting secure worker nodes.
2. Securely provisioning the code for the Task Executor and workflow tasks on each participating worker node.
3. Establishing secure communication and file transfers between the master node and worker nodes.
4. Ensuring secure file transfers among worker nodes.

Figure 7 illustrates the steps of WCPAC and the relationships between different entities in SecDATAVIEW. Below are the naming conventions for the sequence diagram:

- `machineLaunchRequest(machineType, IP)`: Calls Cloud Resource Management to launch a remote worker node (SEV or SGX machines). It accepts `machineType` and the IP address from the workflow executor and initializes the remote machines based on the given parameters. `machineTypes` are categorized as "AMD" or "SGX".
- `send(file)`: Responsible for sending a corresponding file from source to destination using SFTP.
- `message(content)`: Sends a message through an SSL socket from source to destination. The content type is a string.
- `sha256(file)`: Generates the SHA256 digest of a given file.
- `keyGen()`: Generates a random password.
- `encrypt(key, AD, file)`: AEAD encrypts the input file based on the given secret key and associated data (AD).
- `decrypt(key, AD, file)`: AEAD decrypts the provided encrypted file based on the given secret key and associated data (AD).

**Figure 7: The Sequence Diagram of the WCPAC Protocol.**