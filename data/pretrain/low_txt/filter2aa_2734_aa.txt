# MTVEC Corruption for Hardening ISA

## Presenters
### Adam 'pi3' Zabrocki
- **Twitter**: @Adam_pi3
- **Background**:
  - Phrack author
  - Bug hunter (Hyper-V, Intel/NVIDIA vGPU, Linux kernel, OpenSSH, Apache, gcc SSP / ProPolice, xpdf, and more) – CVEs
  - Creator and developer of the ERESI Reverse Engineering Software Interface
  - Developer of Linux Kernel Runtime Guard (LKRG)
  - Private contact: [http://pi3.com.pl](http://pi3.com.pl)

### Alex Matrosov
- **Twitter**: @matrosov
- **Background**:
  - Security researcher since 1997
  - Conference speaker and trainer
  - Expert in breaking firmware
  - Author of "Bootkits and Rootkits" book
  - Creator of codeXplorer & efiXplorer IDA plugins
  - Founder of Binarly, Inc.
  - Private contact: [github.com/binarly-io](https://github.com/binarly-io)

## What is This Talk About?

### Hardware and Software Attacks
#### Hardware Attacks
- **Pure HW attacks**:
  - Glitching
  - Side channel
  - Physical probing
  - More...

#### Software Attacks
- **Pure SW attacks**:
  - Memory safety (e.g., overflows)
  - Injections (e.g., command, XSS, SQL)
  - Logical issues (e.g., bad design)
  - More...

### Targeting Specific Implementations
- **Software**:
  - Programming language
  - Compiler
  - Firmware
  - More...
  
- **Hardware**:
  - CPU family
  - Implementation of architecture
  - More...

### Mixed HW and SW Attacks
- Examples: Spectre, Meltdown

### Bugs in Reference Code
- **What if the bug is in the "reference code" like HW ISA itself?**
  - Problem with all implementations, not just a specific one
  - Software cannot trust hardware at all

## How Did We Find It?
- **Objective**: Analyze Boot-SW where specific microcode runs
- **Challenges**:
  - RISC-V chip (no prior experience)
  - Custom implementation of RISC-V with custom extensions and functionalities
  - Boot-SW written in AdaCore/SPARK language (no prior experience)
  - Lack of public offensive research on AdaCore/SPARK
  - No native support for RISC-V in reverse engineering tools (IDA Pro, Ghidra)
- **Outcome**: Discovery of ambiguity in the RISC-V specification and an additional problem

## RISC-V in a Nutshell
- **Overview**:
  - Open standard instruction set architecture (ISA) based on established RISC principles
  - Provided under open-source licenses with no fees
  - Multiple different implementations possible
  - Small standard base ISA with multiple standard extensions
  - Potential for significant fragmentation due to custom extensions
  - Over 500 members in the RISC-V Foundation

## RISC-V vs. x86
- **License**:
  - x86: Fees for ISA and microarchitecture
  - RISC-V: No fee for ISA & microarchitecture

- **Instruction Set**:
  - x86: CISC
  - RISC-V: RISC

- **ISA Variants**:
  - x86: 16 / 32 / 64 bits
  - RISC-V: 32 / 64 / 128 bits

- **Memory Model**:
  - x86: Register-memory architecture
  - RISC-V: Load-store architecture

- **Registers**:
  - x86: 
    - 16-bit: 6 semi-dedicated registers, BP and SP are not general-purpose
    - 32-bit: 8 GPRs, including EBP and ESP
    - 64-bit: 16 GPRs, including RBP and RSP
  - RISC-V: 32 (16 in the embedded variant) – including one always-zero register

- **XOM**:
  - x86: Only using SLAT – requires hypervisor
  - RISC-V: Everywhere

- **SW Ecosystem Support**:
  - x86: Linux, Windows, MacOS, more...
  - RISC-V: Linux only...

- **Privilege Modes / Levels**:
  - **x86(-64)**: [Link to detailed article]
  - **RISC-V**:
    - U-mode (User)
    - S-mode (Supervisor)
    - M-mode (Machine)
    - Supported combinations:
      - M
      - M + U
      - M + S + U
    - Additional modes:
      - HS-mode (Hypervisor)
      - VS-mode (Virtualized Supervisor)
      - VU-mode (Virtualized User)
      - Supported combinations:
        - M + (V)S + (V)U

This talk will delve into the intricacies of these topics and provide insights into the challenges and discoveries made during the analysis of RISC-V chips and their security implications.