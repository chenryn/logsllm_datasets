### Performance Analysis and Comparison

Buffet outperforms both BCTV and Pantry in RAM operations, as confirmed by the benchmarks. Figure 10 illustrates that Buffet and Pantry exhibit identical performance on straight-line programs. However, for RAM operations, Buffet's performance is 1-2 orders of magnitude better than BCTV, which in turn outperforms Pantry by a similar margin.

### Data-Dependent Control Flow in Buffet

The final set of benchmarks evaluates the performance of BCTV, BuffetStatic (§5.3), and Buffet in data-dependent computations. We expect Buffet to outperform BCTV due to its lower overheads. Recent advancements in the back-end [22] have made the verifier's setup and the prover's memory requirements independent of the computation length. Although this is an exciting development, the practical benefits are still limited. For instance, the verifier must still perform expensive setup work proportional to the cost of representing the checking step in constraints, and the prover's computational costs remain significantly higher compared to Pantry, BCTV, and Buffet.

### Loop Flattening in Buffet

Section 4 adapts the concept of loop flattening, which has been described in other contexts [42, 48, 50, 65]. Unlike these systems, Buffet handles control statements (break and continue) and supports irregular loop nests. Macah [79] also uses loop flattening in the context of a programming language and compiler for FPGAs. While Macah appears to handle break and continue, the details are sparse, making the exact relationship unclear.

### Summary, Discussion, and Future Work

The experimental results (§5.4) demonstrate that Buffet achieves its goals. RAM operations in Buffet are dramatically less expensive than in BCTV and Pantry, and they incur no overhead unless used. Data-dependent control flow is supported and is substantially less expensive than in BCTV.

However, Buffet has some limitations compared to BCTV. First, Buffet's circuits are not universal; BCTV's constraints work for all computations within a given execution time bound. In practice, BCTV would need thousands of constraint sets, each with three parameters (t, |xΨ|, |x|) [19]. For M = 32000 [19], approximately 3000 constraint sets would be required.

Additionally, we have assumed throughout that Buffet and BCTV have similar per-instance verification costs (§1, §2.1, §2.4, §5). In reality, BCTV's costs are higher: xΨ is an input to C, contributing to V’s per-instance cost (§2.4, Fig. 3). The verifier can amortize this additional cost over multiple runs of Ψ, but this induces a similar amortization regime as Buffet, Pantry, and Pinocchio, albeit with less to amortize for each Ψ.

Another limitation is expressiveness. TinyRAM supports any programming language that compiles to machine instructions (§4.3). However, Buffet's approach has implications for the programming languages it can support. The absence of a machine abstraction means Buffet cannot support function pointers in C (§4.3) or efficiently compile code that controls an abstract machine’s program counter at runtime, such as object-oriented constructs in C++ or Java. On the other hand, there are programming languages where polymorphism and other features do not require direct manipulation of the program counter. For example, polymorphism in Haskell [64] and Rust [5] works statically [77], and some Standard ML [58] compilers transform higher-order function calls into a form with no indirect dispatching [31, 35, 66].

Based on this discussion, we conjecture that Buffet's compiler can map a rich set of higher-level programming language features to economical representations in Buffet's execution model. This implies that higher-level programmability does not require a machine abstraction, given a suitable choice of programming language. There is a broader research question here: if a computation is to be compiled to constraints (or non-deterministic circuits), what is the right combination of programming language and execution model? We leave these questions for future research.

### Acknowledgements

We thank Max Howald for his valuable contribution to the implementation and evaluation in this work. Helpful comments by Eli Ben-Sasson, Alessandro Chiesa, Josh Leners, Bryan Parno, and Justin Thaler improved this draft. The Texas Advanced Computing Center (TACC) at UT supplied computing resources. This work was supported by ONR grant N000141410469; NSF grants 1040083, 1048269, 1055057, and 1423249; a Sloan Fellowship; and an Intel Early Career Faculty Award. Buffet’s source code is publicly available [1].

### References

[1] https://github.com/pepper-project.
[2] PAPI: Performance API. http://icl.cs.utk.edu/papi/.
[3] https://github.com/scipr-lab/libsnark, 2014.
[4] http://clang.llvm.org, 2014.
[5] The Rust programming language. http://www.rust-lang.org, 2014.
[6] K. R. Anderson and D. Rettig. Performing Lisp: Analysis of the Fannkuch benchmark. ACM SIGPLAN Lisp Pointers, VII(4), Oct. 1994.
[7] S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. Proof verification and the hardness of approximation problems. J. of the ACM, 45(3):501–555, May 1998.
[8] S. Arora and S. Safra. Probabilistic checking of proofs: a new characterization of NP. J. of the ACM, 45(1):70–122, Jan. 1998.
[9] L. Babai. Trading group theory for randomness. In STOC, May 1985.
[10] L. Babai, L. Fortnow, L. A. Levin, and M. Szegedy. Checking computations in polylogarithmic time. In STOC, May 1991.
[11] M. Backes, D. Fiore, and R. M. Reischuk. Verifiable delegation of computation on outsourced data. In ACM CCS, Nov. 2013.
[12] M. Backes, D. Fiore, and R. M. Reischuk. Nearly practical and privacy-preserving proofs on authenticated data. Cryptology ePrint Archive, Report 2014/617, Aug. 2014.
[13] B. Beauquier and E. Darrot. On arbitrary size Waksman networks and their vulnerability. Parallel Processing Letters, 12(3–4):287–296, 2002.
[14] E. Ben-Sasson, A. Chiesa, C. Garman, M. Green, I. Miers, E. Tromer, and M. Virza. Decentralized anonymous payments from Bitcoin. In IEEE S&P, May 2014.
[15] E. Ben-Sasson, A. Chiesa, D. Genkin, and E. Tromer. Fast reductions from RAMs to delegatable succinct constraint satisfaction problems. In ITCS, Jan. 2013.
[16] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and M. Virza. SNARKs for C: Verifying program executions succinctly and in zero knowledge. In CRYPTO, Aug. 2013.
[17] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and M. Virza. TinyRAM architecture specification, v0.991. http://www.scipr-lab.org/system/files/TinyRAM-spec-0.991.pdf, 2013.
[18] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza. Scalable zero knowledge via cycles of elliptic curves. In CRYPTO, Aug. 2014.
[19] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza. Succinct non-interactive zero knowledge for a von Neumann architecture. In USENIX Security, Aug. 2014. http://eprint.iacr.org/2013/879/20140901:001903.
[20] V. Beneš. Mathematical theory of connecting networks and telephone traffic. Mathematics in Science and Engineering. Elsevier Science, 1965.
[21] N. Bitansky, R. Canetti, A. Chiesa, and E. Tromer. From extractable collision resistance to succinct non-interactive arguments of knowledge, and back again. In ITCS, Jan. 2012.
[22] N. Bitansky, R. Canetti, A. Chiesa, and E. Tromer. Recursive composition and bootstrapping for SNARKs and proof-carrying data. In STOC, 2013.
[23] N. Bitansky, A. Chiesa, Y. Ishai, R. Ostrovsky, and O. Paneth. Succinct non-interactive arguments via linear interactive proofs. In IACR TCC, Mar. 2013.
[24] M. Blum, W. Evans, P. Gemmell, S. Kannan, and M. Naor. Checking the correctness of memories. In FOCS, Oct. 1991.
[25] R. S. Boyer and J. S. Moore. A fast string searching algorithm. Communications of the ACM, 20(10):762–772, Oct. 1977.
[26] G. Brassard, D. Chaum, and C. Crépeau. Minimum disclosure proofs of knowledge. J. of Comp. and Sys. Sciences, 37(2):156–189, Oct. 1988.
[27] B. Braun. Compiling computations to constraints for verified computation. UT Austin Honors thesis HR-12-10, Dec. 2012.
[28] B. Braun, A. J. Feldman, Z. Ren, S. Setty, A. J. Blumberg, and M. Walfish. Verifying computations with state. In SOSP, Nov. 2013. Extended version: http://eprint.iacr.org/2013/356.
[29] R. Canetti, B. Riva, and G. Rothblum. Practical delegation of computation using multiple servers. In ACM CCS, Oct. 2011.
[30] M. Castro and B. Liskov. Practical Byzantine fault tolerance and proactive recovery. ACM Trans. on Comp. Sys., 20(4):398–461, 2002.
[31] H. Cejtin, S. Jagannathan, and S. Weeks. Flow-directed closure conversion for typed languages. In European Symposium on Programming, Mar. 2000.
[32] J. W. Cooley and J. W. Tukey. An algorithm for the machine calculation of complex Fourier series. Math. of Computation, 19(90):297–301, 1965.
[33] G. Cormode, M. Mitzenmacher, and J. Thaler. Practical verified computation with streaming interactive proofs. In ITCS, Jan. 2012.
[34] G. Danezis, C. Fournet, M. Kohlweiss, and B. Parno. Pinocchio coin: Building zerocoin from a succinct pairing-based proof system. In Workshop on Language Support for Privacy-enhancing Technologies, Nov. 2013.
[35] O. Danvy and L. R. Nielsen. Defunctionalization at work. In ACM PPDP, Sept. 2001.
[36] C. Fournet, M. Kohlweiss, G. Danezis, and Z. Luo. ZQL: A compiler for privacy-preserving data processing. In USENIX Security, Aug. 2013.
[37] M. Fredrikson and B. Livshits. ZØ: An optimizing distributing zero-knowledge compiler. In USENIX Security, Aug. 2014.
[38] K. Fu, M. F. Kaashoek, and D. Mazières. Fast and secure distributed read-only file system. In OSDI, Oct. 2000.
[39] R. Gennaro, C. Gentry, and B. Parno. Non-interactive verifiable computing: Outsourcing computation to untrusted workers. In CRYPTO, Aug. 2010.
[40] R. Gennaro, C. Gentry, B. Parno, and M. Raykova. Quadratic span programs and succinct NIZKs without PCPs. In EUROCRYPT, 2013.
[41] C. Gentry and D. Wichs. Separating succinct non-interactive arguments from all falsifiable assumptions. In STOC, June 2011.
[42] A. M. Ghuloum and A. L. Fisher. Flattening and parallelizing irregular, recurrent loop nests. In ACM PPoPP, July 1995.
[43] O. Goldreich. Probabilistic proof systems – a primer. Foundations and Trends in Theoretical Computer Science, 3(1):1–91, 2007.
[44] S. Goldwasser, Y. T. Kalai, and G. N. Rothblum. Delegating computation: Interactive proofs for muggles. In STOC, May 2008.
[45] S. Goldwasser, S. Micali, and C. Rackoff. The knowledge complexity of interactive proof systems. SIAM J. on Comp., 18(1):186–208, 1989.
[46] Y. Ishai, E. Kushilevitz, and R. Ostrovsky. Efficient arguments without short PCPs. In Conference on Computational Complexity (CCC), 2007.
[47] G. O. Karame, M. Strasser, and S. Čapkun. Secure remote execution of sequential computations. In ICICS, Dec. 2009.
[48] A. Kejariwal, A. Nicolau, and C. D. Polychronopoulos. Enhanced loop coalescing: A compiler technique for transforming non-uniform iteration spaces. In ICPP, Aug. 1987.
[49] J. Kilian. A note on efficient zero-knowledge proofs and arguments (extended abstract). In STOC, May 1992.
[50] P. M. W. Knijnenburg. Flattening: VLIW code generation for imperfectly nested loops. In CPC98, June 1998.
[51] D. E. Knuth, J. H. Morris, and V. R. Pratt. Fast pattern matching in strings. SIAM Journal on Computing, 6(2):323–350, June 1977.
[52] A. E. Kosba, D. Papadopoulos, C. Papamanthou, M. F. Sayed, E. Shi, and N. Triandopoulos. TRUESET: Faster verifiable set computations. In USENIX Security, Aug. 2014.
[53] J. Li, M. N. Krohn, D. Mazières, and D. Shasha. Secure untrusted data repository (SUNDR). In OSDI, Dec. 2004.
[54] C. Lund, L. Fortnow, H. J. Karloff, and N. Nisan. Algebraic methods for interactive proof systems. J. of the ACM, 39(4):859–868, 1992.
[55] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay—a secure two-party computation system. In USENIX Security, Aug. 2004.
[56] D. Malkhi and M. Reiter. Byzantine quorum systems. Distributed Computing, 11(4):203–213, Oct. 1998.
[57] R. C. Merkle. A digital signature based on a conventional encryption function. In CRYPTO, Aug. 1987.
[58] R. Milner, R. Harper, D. MacQueen, and M. Tofte. The Definition of Standard ML, revised edition. MIT Press, 1997.
[59] MIPS Technologies. MIPS32™ Architecture for Programmers, 2001.
[60] F. Monrose, P. Wycko, and A. D. Rubin. Distributed execution with remote audit. In NDSS, Feb. 1999.
[61] S. S. Muchnick. Advanced Compiler Design and Implementation. Morgan Kaufmann, 1997.
[62] B. Parno, C. Gentry, J. Howell, and M. Raykova. Pinocchio: Nearly practical verifiable computation. In IEEE S&P, May 2013.
[63] B. Parno, J. M. McCune, and A. Perrig. Bootstrapping Trust in Modern Computers. Springer, 2011.
[64] S. Peyton Jones, L. Augustsson, D. Barton, B. Boutel, W. Burton, J. Fasel, K. Hammond, R. Hinze, P. Hudak, J. Hughes, T. Johnsson, M. Jones, J. Launchbury, E. Meijer, J. Peterson, A. Reid, C. Runciman, and P. Wadler. The Haskell 98 language report, 2002. http://www.haskell.org/onlinereport/.
[65] C. D. Polychronopoulos. Loop coalescing: A compiler transformation for parallel machines. In ICPP, Aug. 1987.
[66] J. C. Reynolds. Definitional interpreters for higher-order programming languages. In ACM National Conference, Aug. 1972.
[67] A.-R. Sadeghi, T. Schneider, and M. Winandy. Token-based cloud computing: secure outsourcing of data and arbitrary computations with lower latency. In TRUST, June 2010.
[68] J. Schiffman, T. Moyer, H. Vijayakumar, T. Jaeger, and P. McDaniel. Seeding clouds with trust anchors. In ACM Workshop on Cloud Computing Security, Oct. 2010.
[69] S. Setty, A. J. Blumberg, and M. Walfish. Toward practical and unconditional verification of remote computations. In HotOS, May 2011.
[70] S. Setty, B. Braun, V. Vu, A. J. Blumberg, B. Parno, and M. Walfish. Resolving the conflict between generality and plausibility in verified computation. In EuroSys, Apr. 2013.
[71] S. Setty, R. McPherson, A. J. Blumberg, and M. Walfish. Making argument systems for outsourced computation practical (sometimes). In NDSS, Feb. 2012.
[72] S. Setty, V. Vu, N. Panpalia, B. Braun, A. J. Blumberg, and M. Walfish. Taking proof-based verified computation a few steps closer to practicality. In USENIX Security, Aug. 2012.
[73] J. Thaler. Time-optimal interactive proofs for circuit evaluation. In CRYPTO, Aug. 2013.
[74] J. Thaler, M. Roberts, M. Mitzenmacher, and H. Pfister. Verifiable computation with massively parallel interactive proofs. In USENIX HotCloud Workshop, June 2012.
[75] S. Theodoridis and K. Koutroumbas. Pattern Recognition, Third Edition. Academic Press, Inc., 2006.
[76] V. Vu, S. Setty, A. J. Blumberg, and M. Walfish. A hybrid architecture for interactive verifiable computation. In IEEE S&P, May 2013.
[77] P. Wadler and S. Blott. How to make ad-hoc polymorphism less ad hoc. In POPL, Jan. 1989.
[78] M. Walfish and A. J. Blumberg. Verifying computations without reexecuting them: from theoretical possibility to near practicality. Communications of the ACM, Feb. 2015.
[79] B. Ylvisaker, A. Carroll, S. Friedman, B. Van Essen, C. Ebeling, D. Grossman, and S. Huack. Macah: A “C-level” language for programming kernels on coprocessor accelerators. Technical report, University of Washington, Department of CSE, 2008.