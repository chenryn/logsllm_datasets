### Table 3: Results from Applying SFPD to Eight Memory Snapshots Infected with Different Real-World Malware Samples

Function pointers are classified as either explicit (E) or implicit (I) based on their type. A/B indicates that a scheme detects A out of B malicious function pointers. Definitions of the data structures are available in the Windows Research Kernel [4].

The _BLOCK object pointed to by PspCreateProcessNotifyRoutine ensures that its code is executed whenever a process is created. Previous approaches, including the baseline algorithm, do not inspect implicit function pointers, thus missing rootkits that only hook such pointers. In contrast, SFPD can identify subverted implicit function pointers by leveraging KOP’s static analysis and near-complete memory coverage. As shown in Table 3, SFPD successfully identified all the malicious implicit function pointers.

Moreover, KOP’s high coverage is crucial for preventing SFPD from generating false alarms, as discussed in Section 5.1. To demonstrate this, we tested SFPD with an incomplete list of kernel objects identified by the basic traversal and observed more than 120 false alarms for a single memory snapshot.

### 6.3 GHOST

We evaluated GHOST’s ability to identify objects hidden by rootkits, specifically processes and drivers. For detecting hidden processes, we used the Windows Task Manager as the internal source of information. The WinObj tool [26] was used to detect hidden drivers. The same experimental setup described in the SFPD experiments was used to collect memory snapshots from infected systems.

We tested GHOST with two real-world kernel-mode malware samples: FURootkit and Syzor.A. We ported the original Windows XP-based FURootkit to Windows Vista SP1.

GHOST correctly identified all hidden objects in both tests with zero false alarms. In the FURootkit test, GHOST easily identified the hidden process by checking the image file name at EPROCESS.ImageFileName and the process ID at EPROCESS.UniqueProcessId for each EPROCESS object. KOP identified the hidden process object by following a different pointer path than the one used by the Windows Task Manager.

Syzor.A hides its own driver by zeroing out its driver object in memory. In the test with Syzor.A, GHOST identified the hidden driver object because it is empty and lacks a driver name, making it absent from the list returned by WinObj.

### 7. Related Work

Kernel integrity has been a focal point of intense security research due to the increasing threat posed by kernel rootkits and other malware. Systems like CoPilot [20] and Livewire [8] passively scan the static portion of the kernel memory for integrity violations. More elaborate checks, as shown by Petroni et al. [21], verify the semantic consistency of dynamic kernel structures based on manually created rules. State-based Control Flow Integrity [22] is similar to KOP, as it also traverses the dynamic kernel object graph. Using a simple type graph and manual annotations, it verifies the value of function pointers at each object against a policy (e.g., pointing to a known module). Gibraltar [3] also relies purely on static type information and manual annotations to traverse the kernel memory for integrity checks. KOP represents a significant improvement over these approaches due to its nearly complete coverage. Additionally, by leveraging KOP, SFPD can identify all malicious function pointers, including the implicit ones, in our experiments with real-world rootkits.

More preventive approaches towards kernel integrity include SecVisor [29], which enforces code integrity through hypervisor-based memory protections. Lares [18] uses the same technique to ensure the integrity of hooks deployed by anti-virus programs in the kernel code and data. NICKLE [24] proposes a hypervisor-based memory shadowing scheme to protect kernel code integrity, and Patagonix [13] also relies on a hypervisor to trap code execution accesses and ensure that only legitimate code is executed.

Dynamic memory type inference has been addressed by work such as [23], aiming to identify heap corruption and type safety violations in C programs. Similar to KOP, their system also relies on type value constraints, type definitions, and an object graph traversal to map a program’s heap. Others have approached the problem of inferring data structures from memory images without access to source code or type definitions. Laika [5] uses Bayesian unsupervised learning to automatically infer the location and overall structure of the data objects used by user-level applications. Their approach is based on the observation that different types of data elements have values in different domain ranges. KOP also leverages this observation in resolving type ambiguities. Laika focuses on user-space programs. Operating systems have a much larger and more elaborate memory structure, for which their approach may not be suited. We believe that leveraging the source code is an important step to achieve high coverage and accuracy in analyzing kernel memory.

Pointer analysis for the C programming language has a long history [1, 2, 6, 9, 10, 19, 30, 31]. Its main goal has traditionally been performance. Thus, there has not been work that attempted to achieve both field-sensitivity and context-sensitivity with a codebase of millions of lines of code. However, since our focus is precision rather than performance, we extended the algorithm described in [10] to achieve both field-sensitivity and context-sensitivity in KOP.

### 8. Limitations and Future Work

Despite the encouraging results from our evaluation, there is room for improving KOP. KOP’s static analysis could be enhanced to automatically handle kernel implementation corner cases in a more general way. For example, tracking arithmetic and logical operations associated with pointer values could provide a general way to identify bit manipulations in pointers. Identifying the use of casts in assignments could help us automatically determine implicit polymorphism. These improvements could make porting KOP to a different OS easier.

The techniques used in KOP’s memory analysis are not perfect. Currently, KOP relies on its knowledge of pointer fields to select a candidate from the range of possibilities. There are cases where this knowledge may not be sufficient to make the correct choice. It is very hard, for instance, to tell apart small objects with very few or no pointers, which may lead to inaccuracies in the traversal. One possibility to mitigate these problems is to increase the scope of our static analysis to determine domain constraints for other basic types in addition to pointers. For example, a Unicode string should always be terminated by two consecutive null bytes, and enumerated (enum in C) types can only assume a statically-defined set of values. Such information would be very useful for increasing the precision when resolving type ambiguities.

One must also consider the possibility of an attacker trying to disrupt KOP’s traversal by polluting the kernel memory. For example, an attacker could intentionally break the internal structure of key kernel objects by tampering with the values stored at pointer fields. As a result, our traversal might incorrectly identify these objects due to pointer field mismatches. This attack is not as simple as it sounds, however, since the attacker has to carry it out in a way that the modifications do not destabilize the whole kernel and crash the system. Corrupting a pointer value that points to a string, for example, would likely be less catastrophic than corrupting another one pointing to a scheduler queue or another vital OS data structure. Our current system can tolerate this kind of attack up to a certain point, as it checks the pointer-value constraints in a flexible manner. However, it will not be able to do so if a very large number of pointers inside an object is manipulated. A more robust improvement could come from pre-determining which fields can be tampered with without crashing the system and ignoring them when matching pointer fields [7].

### 9. Conclusions

Dynamic kernel data have become a common target for malware looking to evade traditional code and static data-based integrity monitors. Previous solutions for inspecting dynamic kernel data can reach only a fraction of it, leaving holes that well-engineered malware can exploit for evasion. Therefore, it is imperative that integrity protection systems be able to accurately and completely map kernel objects in memory.

In this paper, we presented KOP, a system that can map dynamic kernel objects with very high coverage and accuracy by leveraging a set of novel techniques in static source code analysis and memory analysis. Our evaluation of KOP has shown substantial coverage gains over previous approaches. We implemented two integrity checking applications based on KOP to detect malicious function pointers and discover hidden objects. We evaluated them using real-world malware samples, demonstrating that KOP’s high coverage and accuracy result in the ability to detect kernel integrity violations missed by previous approaches.

### 10. Acknowledgments

We would like to thank Miguel Castro, Manuel Costa, and Periklis Akritidis for kindly sharing their codebase with us; John Lin and Andy Ayers for their help with issues regarding Phoenix; Paul Royal and the Anti-Malware team at Microsoft for providing malware samples; Chris Hawblitzel, Ben Livshits, and Bjarne Steensgaard for helpful discussions on implementing points-to analysis; David Evans and Helen Wang for their insightful comments on an early draft of this paper.

This material is based upon work supported in part by the National Science Foundation under Grant No. 0716570, Grant No. 0831300, Grant No. 0852131, and Grant No. 0855297, and the Department of Homeland Security under Contract No. FA8750-08-2-0141. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation and the Department of Homeland Security.

### 11. References

[1] L. O. Andersen. Program Analysis and Specialization for the C Programming Language. PhD thesis, University of Copenhagen, 1994.
[2] D. Avots, M. Dalton, B. Livshits, and M. S. Lam. Improving Software Security with a C Pointer Analysis. In Proceedings of the 27th International Conference on Software Engineering (ICSE), May 2005.
[3] A. Baliga, V. Ganapathy, and L. Iftode. Automatic Inference and Enforcement of Kernel Data Structure Invariants. In Proceedings of the 24th Annual Computer Security Applications Conference, 2008.
[4] Microsoft Corporation. Windows Research Kernel. http://www.microsoft.com/resources/sharedsource/windowsacademic/researchkernelkit.mspx.
[5] A. Cozzie, F. Stratton, H. Xue, and S. T. King. Digging for Data Structures. In Proceedings of the 8th USENIX Symposium on Operating Systems Design and Implementation, 2008.
[6] M. Das. Unification-based pointer analysis with directional assignments. In Programming Language Design and Implementation (PLDI), 2000.
[7] B. Dolan-Gavitt, A. Srivastava, P. Traynor, and J. Giffin. Robust Signatures for Kernel Data Structures. In Proceedings of the 16th ACM Conference on Computer and Communications Security (CCS), November 2009.
[8] T. Garfinkel and M. Rosenblum. A Virtual Machine Introspection Based Architecture for Intrusion Detection. In Proceedings of the Tenth ISOC Symposium on Network and Distributed Systems Security (NDSS), February 2003.
[9] B. Hardekopf and C. Lin. The Ant and the Grasshopper: Fast and Accurate Pointer Analysis for Millions of Lines of Code. In Programming Language Design and Implementation (PLDI), 2007.
[10] N. Heintze and O. Tardieu. Ultra-Fast Aliasing Analysis using CLA - A Million Lines of C Code in a Second. In Programming Language Design and Implementation (PLDI), 2001.
[11] G. Hoglund and J. Butler. Rootkits: Subverting the Windows Kernel. Addison-Wesley Professional, 2005.
[12] S. Hultquist. Rootkits: The Next Big Enterprise Threat? http://www.infoworld.com/article/07/04/30/18FErootkit_1.html.
[13] L. Litty, H. A. Lagar-Cavilla, and D. Lie. Hypervisor Support for Identifying Covertly Executing Binaries. In Proceedings of the 17th USENIX Security Symposium, 2008.
[14] Microsoft Corporation. Debugger engine and extensions API. http://msdn.microsoft.com/en-us/library/cc267863.aspx.
[15] Microsoft Corporation. Overview of Memory Dump File Options for Windows Server 2003, Windows XP, and Windows 2000. http://support.microsoft.com/kb/254649.
[16] Microsoft Corporation. Phoenix compiler framework. http://connect.microsoft.com/Phoenix.
[17] Offensive Computing. Public malware database. http://www.offensivecomputing.net.
[18] B. D. Payne, M. Carbone, M. Sharif, and W. Lee. Lares: An architecture for secure active monitoring using virtualization. In Proceedings of the IEEE Symposium on Security and Privacy, 2008.
[19] D. J. Pearce, P. H. J. Kelly, and C. Hankin. Efficient Field-Sensitive Pointer Analysis for C. In Proceedings of the 5th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering (PASTE), 2004.
[20] N. L. Petroni Jr., T. Fraser, J. Molina, and W. A. Arbaugh. CoPilot – a Coprocessor-based Kernel Runtime Integrity Monitor. In Proceedings of the 13th USENIX Security Symposium, 2004.
[21] N. L. Petroni Jr., T. Fraser, A. Walters, and W. A. Arbaugh. An Architecture for Specification-Based Detection of Semantic Integrity Violations in Kernel Dynamic Data. In Proceedings of the 15th USENIX Security Symposium, 2006.
[22] N. L. Petroni Jr. and M. Hicks. Automated Detection of Persistent Kernel Control-Flow Attacks. In Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS), October 2007.
[23] M. Polishchuk, B. Liblit, and C. W. Schulze. Dynamic Heap Inference for Program Understanding and Debugging. In Proceedings of the 34th Annual Symposium on Principles of Programming Languages, 2007.
[24] R. Riley, X. Jiang, and D. Xu. Guest-Transparent Prevention of Kernel Rootkits with VMM-based Memory Shadowing. In Proceedings of the 11th International Symposium on Recent Advances in Intrusion Detection (RAID), 2008.
[25] Rootkit.com. http://www.rootkit.com.
[26] M. Russinovich. WinObj v2.15. http://technet.microsoft.com/en-us/sysinternals/bb896657.aspx.
[27] M. E. Russinovich and D. A. Solomon. Microsoft Windows Internals (4th Edition). Microsoft Press, 2005.
[28] J. Rutkowska. klister. http://www.rootkit.com/board_project_fused.php?did=proj14.
[29] A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: A Tiny Hypervisor to Provide Lifetime Kernel Code Integrity for Commodity OSes. In Proceedings of the 21st ACM Symposium on Operating Systems Principles, 2007.
[30] B. Steensgaard. Points-to analysis in almost linear time. In Symposium on Principles of Programming Languages (POPL), 1996.
[31] R. P. Wilson and M. S. Lam. Efficient Context-Sensitive Pointer Analysis for C Programs. In Programming Language Design and Implementation (PLDI), 1995.