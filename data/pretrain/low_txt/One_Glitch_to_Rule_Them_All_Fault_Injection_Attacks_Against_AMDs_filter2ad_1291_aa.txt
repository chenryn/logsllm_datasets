# One Glitch to Rule Them All: Fault Injection Attacks Against AMD's Secure Encrypted Virtualization

**Authors:**
- Robert Buhren
- Hans Niklas Jacob
- Thilo Krachenfels
- Jean-Pierre Seifert

**Affiliation:**
Technische Universität Berlin - SECT
Fraunhofer SIT

## Abstract
AMD's Secure Encrypted Virtualization (SEV) provides protection for virtual machines (VMs) in untrusted environments through memory and register encryption. SEV leverages the AMD Secure Processor (AMD-SP) to handle security-sensitive operations, separating them from software running on the main x86 cores. This paper introduces a novel approach to attack SEV-protected VMs by targeting the AMD-SP. We present a voltage glitching attack that enables an attacker to execute custom payloads on the AMD-SP across all microarchitectures supporting SEV (Zen 1, Zen 2, and Zen 3). Our methods allow us to deploy a custom SEV firmware, decrypt VM memory, and extract endorsement keys. Using these keys, we can forge attestation reports or impersonate a valid target for VM migration without physical access to the host. Additionally, we reverse-engineered the Versioned Chip Endorsement Key (VCEK) mechanism introduced with SEV Secure Nested Paging (SEV-SNP), which binds endorsement keys to the firmware version of TCB components. Our findings demonstrate that SEV cannot adequately protect confidential data in cloud environments from insider attacks, such as those by rogue administrators, on currently available CPUs.

## CCS Concepts
- Security and privacy → Hardware attacks and countermeasures; Virtualization and security.

## Keywords
Secure Encrypted Virtualization, SEV, Secure Nested Paging, SNP, hardware fault attack, voltage glitching.

## Permissions
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484779

## ACM Reference Format
Robert Buhren, Hans Niklas Jacob, Thilo Krachenfels, and Jean-Pierre Seifert. 2021. One Glitch to Rule Them All: Fault Injection Attacks Against AMD’s Secure Encrypted Virtualization. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3460120.3484779

## 1 Introduction
Introduced in 2016, AMD's Secure Encrypted Virtualization (SEV) technology is the first commercially available solution aimed at protecting virtual machines (VMs) from higher-privileged entities [30]. SEV is particularly useful in cloud environments where the hypervisor has direct access to a VM's memory content. By encrypting a VM's memory, SEV aims to protect customer data even in the face of insider attacks.

“... SEV protects data-in-use, enabling customer workloads to be protected cryptographically from each other as well as from the hosting software. Even an administrator with malicious intentions at a cloud data center would not be able to access the data in a hosted VM.” [30, p. 9]

SEV uses AES encryption to ensure the confidentiality of data-in-use by transparently encrypting a VM's memory with a VM-specific key. The memory encryption is carried out by a dedicated memory encryption engine embedded in the memory controller [2]. Recent extensions to SEV, such as SEV Encrypted State (SEV-ES) and SEV Secure Nested Paging (SEV-SNP), expand the encryption to the VM's register content and introduce software-based integrity protection using memory ownership tracking [3, 29].

To ensure the confidentiality of VM memory encryption keys and the integrity of the remote attestation feature, AMD CPUs include a dedicated security co-processor, the AMD Secure Processor (AMD-SP). The AMD-SP constitutes the root-of-trust for modern AMD CPUs [36] and manages SEV-related VM lifecycle tasks such as deployment and migration [2]. The AMD-SP uses its own local memory and executes a firmware provided by AMD.

While the hypervisor, executing on the main x86 cores, is still in control of the VMs, only the AMD-SP can access a VM’s memory encryption key. This separation ensures that a malicious or compromised hypervisor cannot access a VM’s data.

Previous research has shown that the AMD-SP is a single point of failure for SEV [14, 15, 18]. However, the issues identified were either limited to specific CPU types or effectively mitigated by firmware updates. To the best of our knowledge, no AMD-SP-related security issues affecting SEV are known for the current and last generation of AMD Epyc CPUs (Zen 2 and Zen 3).

Given the critical role of the AMD-SP in SEV, we explore whether there is a systematic way to mount attacks against SEV-protected VMs by targeting the AMD-SP. Specifically, we consider fault injection attacks that force genuine code into an unintended state. Recently, researchers have applied this technique to Intel CPUs, mounting attacks against SGX enclaves [17, 40].

### 1.1 Contributions
In this work, we analyze the susceptibility of AMD SEV to physical attacks targeting the AMD-SP. By manipulating the input voltage to AMD systems on a chip (SoCs), we induce an error in the read-only memory (ROM) bootloader of the AMD-SP, allowing us to gain full control over this root-of-trust. We show that we can extract SEV-related secrets, such as Chip Endorsement Keys (CEKs), which can be used to mount software-only attacks without requiring physical access to the target host. Our attack does not depend on firmware issues and re-enables previous attacks on all SEV-capable CPUs. Additionally, we reverse-engineered the new key-versioning scheme introduced by SEV-SNP, called the Versioned Chip Endorsement Key (VCEK), which binds CEKs to TCB component versions. Our glitching attack enables us to extract VCEK seeds, allowing an attacker to derive valid VCEKs for all possible combinations of firmware versions.

We present our approach to determine CPU-specific glitching parameters, i.e., the length and depth of the voltage drop. After an initial characterization phase, our attack can be mounted fully automatically and requires no knowledge of the internal structure of the ROM bootloader. Both the attack and the characterization require only inexpensive equipment, making it feasible even for attackers with limited resources. We successfully mounted the attack on AMD Epyc CPUs of all microarchitectures that support SEV, i.e., Zen 1, Zen 2, and Zen 3. We publish our firmware, payload code, and SEV key-derivation functions under an open-source license at [28]. To prove the successful extraction of endorsement keys, the repository includes valid signatures over the title of this paper, which can be validated using public keys from AMD key servers [4, 6].

We responsibly disclosed our findings to AMD, including our experimental setup and code. AMD acknowledged our findings but did not provide an official statement regarding our attack.

### 1.2 Overview
In the following sections, we present our approach to overcome SEV's protection goals using voltage fault injection. Our attack allows an attacker to execute custom code on the AMD-SP by tricking the ROM bootloader into accepting an attacker-controlled public key. This ability enables the exfiltration of confidential key material and the deployment of custom SEV firmware.

- **Section 3**: Provides background information on the SVI2 protocol, the AMD-SP's firmware, and the SEV technology.
- **Section 4**: Introduces two attack scenarios against SEV based on the ability to execute code on the AMD-SP and presents our analysis of the AMD-SP's secure boot mechanism.
- **Section 5**: Describes our voltage glitch setup and attack approach.
- **Section 6**: Details our approach to decrypt firmware components of AMD Epyc Zen 3 systems.
- **Section 7**: Presents our analysis of the new VCEK key-derivation scheme introduced with SEV-SNP.
- **Section 8**: Discusses the implications of the presented attacks.
- **Section 9**: Concludes the paper.

## 2 Related Work
Voltage glitching attacks targeting security-sensitive operations on CPUs have been extensively analyzed. Most reported attacks have been carried out on small embedded systems and SoCs, using crowbar circuits to inject faults [12, 21, 51]. A more thorough list of voltage glitching attacks can be found in [22].

Recently, voltage glitching attacks against Intel desktop and server CPUs have been reported, using interfaces to voltage regulators (VRs) to glitch the supply voltage. Several authors have demonstrated how code running in Intel SGX enclaves can be faulted by injecting glitches through a software-based voltage scaling interface [31, 40, 43], violating SGX's integrity properties and allowing the extraction of cryptographic keys.

The work most related to our attack is presented by Chen et al. in [17], entitled VoltPillager. VoltPillager improves the timing precision of software-based fault attacks and leverages direct hardware access to the VR for injecting glitches. By connecting wires to the bus between the CPU and the VR, the authors could inject commands causing voltage glitches with higher timing precision than software-based methods. Although our attack uses the same mechanism to alter the input voltage to the SoC, several factors distinguish our approach from theirs. We compare our approach with VoltPillager in Section 4.

Since its introduction in 2016, several attacks against SEV have been published [20, 24, 34, 37–39, 54, 57, 58]. These attacks rely on the ability to write to encrypted guest memory, access the guest’s general-purpose registers, or alter the mapping between guest-physical and host-physical pages of a SEV-protected VM. SEV-ES and SEV-SNP mitigate many of these attacks. A different direction is explored in [44], where the authors present issues inside the Linux kernel of SEV-enabled guests that allow the circumvention of SEV's security properties. By manipulating the result of the cpuid instruction, they show how an attacker could trick the guest into not enabling SEV protection. SEV-SNP introduces a “Trusted CPUID” feature to prevent this issue.

In [15], the authors analyze SEV's remote attestation mechanism, revealing security issues in the AMD-SP's firmware that enable an attacker to deploy a custom SEV firmware and extract keys critical to the remote attestation. Using a manipulated SEV firmware, an attacker can override the debug policy of SEV-enabled VMs and decrypt their memory. The extracted keys can be used to fake the presence of SEV during deployment or migration. These attacks require the presence of firmware issues in the AMD-SP, which are only present on the first generation of SEV-capable CPUs (Zen 1). To the best of our knowledge, no comparable firmware issues for later generations of AMD CPUs (Zen 2 and Zen 3) have been published.

## 3 Background
This section introduces the Secure Encrypted Virtualization (SEV) technology, voltage fault injection, and the VR communication protocol.

### 3.1 Secure Encrypted Virtualization
SEV offers protection mechanisms for VMs in untrusted environments, such as cloud environments [30]. Unlike Intel's Software Guard Extensions (SGX), which focus on protecting applications, SEV encrypts VM memory and registers. SEV leverages the AMD-SP to handle security-sensitive operations, ensuring that even a malicious hypervisor cannot access VM data.