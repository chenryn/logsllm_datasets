### Other Studies on Cellular Networks
Other studies have focused on various layers, protocols, and domains within cellular networks. These include VoLTE [38], SS7/Diameter [32], uplink messages [39, 18], and lower layers [55, 40, 67]. These approaches are particularly effective for identifying service-related bugs in specifications rather than software bugs such as memory corruption. However, they require real hardware and significant domain knowledge of cellular networks and their specifications. Consequently, testing every implemented message across diverse devices or building a comprehensive bug oracle is extremely resource-intensive.

BASESPEC addresses this challenge by directly comparing the documented specification with the binary-embedded one, thereby uncovering hundreds of mismatches that may violate the specification across multiple devices (§VII-C). While BASESPEC currently cannot detect the specific bugs identified by these studies, its methodology can be extended as discussed in §IX.

### Conclusion
In this study, we conducted the first systematic comparative analysis of cellular baseband software and specifications. By leveraging the natural characteristics of the baseband as a real-time embedded device and a network modem, we designed BASESPEC, which automatically extracts the binary-embedded specification and compares it syntactically and semantically with the documented specification. 

By running an automated prototype of BASESPEC on 18 baseband firmware images from one of the top three vendors, we discovered hundreds of mismatches that are non-compliant with the specification. Through further analysis of these mismatches, we identified a total of 9 bugs, including 5 functional errors and 4 memory-related vulnerabilities, two of which are critical RCE 0-days. Additionally, we applied BASESPEC to another vendor and found several mismatches, two of which led to buffer overflow bugs.

### Acknowledgment
This work was supported by the Institute of Information & Communications Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT) (No.2018-0-00831, a study on physical layer security for heterogeneous wireless networks).

### References
[1] 3GPP, “3GPP Partners,” https://www.3gpp.org/about-3gpp/partners.
[2] ——, “3GPP Releases,” https://www.3gpp.org/specifications/releases.
[3] ——, “TS 24.007; Mobile radio interface signalling layer 3; General aspects,” 2018.
[4] ——, “TS 24.008; Mobile radio interface Layer 3 specification; Core network protocols; Stage 3,” 2019.
[5] ——, “TS 24.011; Point-to-Point (PP) Short Message Service (SMS) support on mobile radio interface,” 2019.
[6] ——, “TS 24.301; Non-Access-Stratum (NAS) protocol for Evolved Packet System (EPS); Stage 3,” 2019.
[7] ——, “TS 44.018; Mobile radio interface layer 3 specification; GSM/EDGE Radio Resource Control (RRC) protocol,” 2019.
[8] M. Arapinis, L. Mancini, E. Ritter, M. Ryan, N. Golde, K. Redon, and R. Borgaonkar, “New Privacy Issues in Mobile Telephony: Fix and Verification,” in Proceedings of the 19th ACM Conference on Computer and Communications Security (CCS), Raleigh, NC, Oct. 2012.
[9] T. Bao, J. Burket, M. Woo, R. Turner, and D. Brumley, “BYTEWEIGHT: Learning to Recognize Functions in Binary Code,” in Proceedings of the 23rd USENIX Security Symposium (Security), San Diego, CA, Aug. 2014.
...

### Case Studies on Other Mis-Implementations

#### E2: Redundant IEs in the SS Protocol
We discovered that several messages in the SS protocol contain redundant IEs, leading to unknown mismatches. This appears to be due to blind copy-and-paste, where a developer likely copied the structure of the RELEASE COMPLETE message in the CS protocol to implement the REGISTER and RELEASE COMPLETE messages in the SS protocol. The RELEASE COMPLETE message in the CS protocol includes an additional IE called User-user, which is not specified in the other two messages. This redundancy makes the firmware non-compliant with the specification and can cause unintended behaviors because the handler may receive unexpected messages. This mistake was found in all models in our dataset.

#### E4: Incorrect IEI Value in the EMM Protocol
We also found that the NAS message container IE in the Control plane service request message of the EMM protocol has an incorrect IEI, resulting in both missing and unknown mismatches. The IE should have an IEI of 0x67, but 0xff is stored in the firmware. The NAS message container IE is used in other messages as imperative IEs, which do not require an IEI value. However, when the Control plane service request message was added in version v13.6.1 (released in August 2016), the IE was first used as a non-imperative IE with an IEI of 0x67. This mismatch suggests that developers missed changing the IEI when adding this new message. Models H and I, which do not have this message, are not affected by this error.

#### E5: Unknown IE in the GMM Protocol
We discovered that the Routing area update accept and Attach accept messages in the GMM protocol share an unknown non-imperative IE with an IEI of 0xB and a length of 2 bytes. These messages have many unimplemented yet non-imperative IEs, and we believe this buggy IE is one of them with a misconfigured IEI. This error affects all models except Models H and I.

#### E7: Buffer Overflow in the EMM Protocol
Similar to E6, the handler function for the EMM information message in the EMM protocol mishandled the Network daylight saving time IE. In the six oldest firmware images in our dataset, the handler copies this IE into a global buffer without checking its length, leading to a buffer overflow that can corrupt nearby configuration variables and cause unintended behaviors. Recent firmware includes a routine to limit the length to 7 bytes at maximum.

#### E9: Invalid Pointer Dereference in the CS Protocol
We found an invalid pointer dereference while analyzing the START DTMF ACKNOWLEDGE message in the CS protocol. The L3 decoder function initializes a pointer with -1 and later sets it to other data. If the message contains invalid IEs, the pointer can retain the initial value (-1) until dereferencing. The decoder should check whether the pointer has a valid address before dereferencing. Unfortunately, it fails to check the pointer properly, comparing it with NULL instead of -1, leading to memory access at -1 and causing an access violation. This bug was found in all models (from Model A to Model I).