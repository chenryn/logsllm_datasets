### Improved Verification Efficiency

To enhance verification efficiency, we present implementation results that indicate the practicality of our scheme for real-world applications. A tight reduction demonstrates the security of our scheme under standard cryptographic assumptions. We leave the formalization of end-to-end security and protection against distribution attacks as interesting open problems.

### Acknowledgments

We thank Michael Walfish for initially alerting us to the distribution attack. We also extend our gratitude to Petar Maymounkov and Benny Pinkas for their valuable discussions, and to our shepherd Dan Wallach for his insightful feedback. This research was conducted as part of the IRIS project (http://project-iris.net/), supported by the NSF under Cooperative Agreement No. ANI-0225660. Maxwell Krohn is supported by an MIT EECS Fellowship, Michael Freedman by an NDSEG Fellowship, and David Mazières by an Alfred P. Sloan Research Fellowship.

### References

1. S. Saroui, K. P. Gummadi, R. J. Dunn, S. D. Gribble, and H. M. Levy, “An analysis of Internet content delivery systems,” in *Proc. 5th Symposium on Operating Systems Design and Implementation (OSDI)*, Boston, MA, Oct. 2002.
2. M. Luby, M. Mitzenmacher, A. Shokrollahi, D. Spielman, and V. Stemann, “Practical loss-resilient codes,” in *Proc. 29th Annual ACM Symposium on Theory of Computing (STOC)*, El Paso, TX, May 1997.
3. M. Luby, “LT codes,” in *Proc. 43rd Annual Symposium on Foundations of Computer Science (FOCS)*, Vancouver, Canada, Nov. 2002.
4. P. Maymounkov, “Online codes,” NYU, Tech. Rep. 2002-833, Nov. 2002.
5. A. Shokrollahi, “Raptor codes,” Digital Fountain, Inc., Tech. Rep. DF2003-06-001, June 2003.
6. J. Byers, M. Luby, M. Mitzenmacher, and A. Rege, “A Digital Fountain approach to reliable distribution of bulk data,” in *Proc. ACM SIGCOMM '98*, Vancouver, Canada, Sept. 1998.
7. J. Byers, M. Luby, and M. Mitzenmacher, “Accessing multiple mirror sites in parallel: Using Tornado codes to speed up downloads,” in *Proc. IEEE INFOCOM '99*, New York, NY, Mar. 1999.
8. J. Byers, J. Considine, M. Mitzenmacher, and S. Rost, “Informed content delivery across adaptive overlay networks,” in *Proc. ACM SIGCOMM '02*, Aug. 2002.
9. P. Maymounkov and D. Mazières, “Rateless codes and big downloads,” in *Proc. 2nd International Workshop on Peer-to-Peer Systems (IPTPS)*, Berkeley, CA, Feb. 2003.
10. M. Castro, P. Druschel, A.-M. Kermarrec, A. Nandi, A. Rowstron, and A. Singh, “Splitstream: High-bandwidth multicast in a cooperative environment,” in *Proc. 18th ACM Symposium on Operating Systems Principles (SOSP)*, Bolton’s Landing, NY, Oct. 2003.
11. D. Kostić, A. Rodriguez, J. Albrecht, and A. Vahdat, “Bullet: High bandwidth data dissemination using an overlay mesh,” in *Proc. 18th ACM Symposium on Operating Systems Principles (SOSP)*, Bolton’s Landing, NY, Oct. 2003.
12. L. Rizzo, “Effective erasure codes for reliable computer communication protocols,” *ACM Computer Communication Review*, vol. 27, no. 2, Apr. 1997.
13. FIPS 180-1, Secure Hash Standard, U.S. Department of Commerce/N.I.S.T., National Technical Information Service, Springfield, VA, Apr. 1995.
14. C. Karlof, N. Sastry, Y. Li, A. Perrig, and J. Tygar, “Distillation codes and applications to DoS resistant multicast authentication,” in *Proc. 11th Network and Distributed Systems Security Symposium (NDSS)*, San Diego, CA, Feb. 2004.
15. R. C. Merkle, “A digital signature based on a conventional encryption function,” in *Advances in Cryptology—CRYPTO '87*, Santa Barbara, CA, Aug. 1987.
16. National Institute of Standards and Technology, “Digital Signature Standard (DSS),” Federal Information Processing Standards Publication 186-2, U.S. Dept. of Commerce/NIST, 2000.
17. T. P. Pedersen, “Non-interactive and information-theoretic secure verifiable secret sharing,” in *Advances in Cryptology—CRYPTO '91*, Santa Barbara, CA, Aug. 1991.
18. D. Chaum, E. van Heijst, and B. Pfitzmann, “Cryptographically strong undeniable signatures, unconditionally secure for the signer,” in *Advances in Cryptology—CRYPTO '91*, Santa Barbara, CA, Aug. 1991.
19. M. Bellare, J. Garay, and T. Rabin, “Fast batch verification for modular exponentiation and digital signatures,” in *Advances in Cryptology—EUROCRYPT 98*, Helsinki, Finland, May 1998.
20. M. O. Rabin, “Digitalized signatures and public key functions as intractable as factorization,” MIT Laboratory for Computer Science, Tech. Rep. TR-212, Jan. 1979.
21. M. Bellare, O. Goldreich, and S. Goldwasser, “Incremental cryptography: The case of hashing and signing,” in *Advances in Cryptology—CRYPTO '94*, Santa Barbara, CA, Aug. 1994.
22. R. Canetti, J. Garay, G. Itkis, D. Micciancio, M. Naor, and B. Pinkas, “Multicast security: A taxonomy and some efficient constructions,” in *Proc. IEEE INFOCOM '99*, New York, NY, 1999.
23. R. Gennaro and P. Rohatgi, “How to sign digital streams,” in *Advances in Cryptology—CRYPTO '97*, Santa Barbara, CA, Aug. 1997.
24. C. K. Wong and S. S. Lam, “Digital signatures for flows and multicasts,” in *Proc. IEEE International Conference on Network Protocols*, Austin, TX, Oct. 1998.
25. P. Rohatgi, “A compact and fast hybrid signature scheme for multicast packet authentication,” in *Proc. 6th ACM Conference on Computer and Communication Security (CCS)*, Singapore, Nov. 1999.
26. P. Golle and N. Modadugu, “Authenticated streamed data in the presence of random packet loss,” in *Proc. Network and Distributed System Security Symposium (NDSS)*, San Diego, CA, Feb. 2001.
27. S. Miner and J. Staddon, “Graph-based authentication of digital streams,” in *Proc. IEEE Symposium on Security and Privacy*, Oakland, CA, May 2000.
28. A. Pannetrat and R. Molva, “Efficient multicast packet authentication,” in *Proc. Network and Distributed System Security Symposium (NDSS)*, San Diego, CA, Feb. 2003.
29. J. M. Park, E. K. P. Chong, and H. J. Siegel, “Efficient multicast stream authentication using erasure codes,” *ACM Trans. Inf. Syst. Secur.*, vol. 6, no. 2, 2003.
30. S. Cheung, “An efficient message authentication scheme for link state routing,” in *Proc. 13th Annual Computer Security Applications Conference*, San Diego, CA, Dec. 1997.
31. R. Anderson, F. Bergadano, B. Crispo, J.-H. Lee, C. Manifavas, and R. Needham, “A new family of authentication protocols,” *Operating Systems Review*, vol. 32, no. 4, Oct. 1998.
32. A. Perrig, R. Canetti, D. Song, and D. Tygar, “Efficient authentication and signature of multicast streams over lossy channels,” in *Proc. IEEE Symposium on Security and Privacy*, Oakland, CA, May 2000.
33. ——, “Efficient and secure source authentication for multicast,” in *Proc. Network and Distributed System Security Symposium (NDSS)*, San Diego, CA, Feb. 2001.
34. A. Perrig, “The BiBa one-time signature and broadcast authentication protocol,” in *Proc. 8th ACM Conference on Computer and Communication Security (CCS)*, Philadelphia, PA, Nov. 2001.
35. J. Benaloh and M. de Mare, “One-way accumulators: A decentralized alternative to digital signatures,” in *Advances in Cryptology—EUROCRYPT 93*, Lofthus, Norway, May 1993.
36. N. Barić and B. Pfitzmann, “Collision-free accumulators and fail-stop signature schemes without trees,” in *Advances in Cryptology—EUROCRYPT 97*, Konstanz, Germany, May 1997.
37. M. Bellare and D. Micciancio, “A new paradigm for collision-free hashing: Incrementality at reduced cost,” in *Advances in Cryptology—EUROCRYPT 97*, Konstanz, Germany, May 1997.
38. J. Camenisch and A. Lysyanskaya, “Dynamic accumulators and application to efficient revocation of anonymous credentials,” in *Advances in Cryptology—CRYPTO 2002*, Santa Barbara, CA, Aug. 2002.
39. G. Tsudik and S. Xu, “Accumulating composites and improved group signing,” in *Advances in Cryptology—ASIACRYPT-2003*, Taipei, Taiwan, Nov. 2003.
40. S. Micali and R. Rivest, “Transitive signature schemes,” in *Progress in Cryptology — CT-RSA 2002*, San Jose, CA, Feb. 2002.
41. S. Chari, T. Rabin, and R. Rivest, “An efficient signature scheme for route aggregation,” Feb. 2002.
42. R. Johnson, D. Molnar, D. Song, and D. Wagner, “Homomorphic signature schemes,” in *Progress in Cryptology — CT-RSA 2002*, San Jose, CA, Feb. 2002.

### Appendix I: Correctness of Batched Verification

Consider the batched verification algorithm given in Section IV-D. To prove its correctness, let us examine an arbitrary hash \((G; HG(F))\). For notational convenience, we write \(y\) and \(y'\) computed in Step 4 in terms of an element \(g \in \mathbb{Z}_p\) of order \(q\) and row vector \(r\) such that \(g^r = g \mod p\). These elements are guaranteed to exist, even if they cannot be computed efficiently. Thus,

\[
y' = \prod_{i=1}^{m} g^{z_i r_i} = g^{\sum_{i=1}^{m} z_i r_i} = g^{r z}
\]

By the definition of \(z\) from Step 2, we conclude \(y' = g^{r C_s}\).

Now, we examine the other side of the verification, \(y\). Recalling Equation 1, rewrite hashes of check blocks in terms of a common generator \(g\):

\[
h_G(c_j) = \prod_{i=1}^{m} g^{r_i c_{i,j}} = g^{\sum_{i=1}^{m} r_i c_{i,j}} = g^{r c_j}
\]

As noted in Step 3, for an honest sender, \(\tau_j = h_G(c_j)\). Thus, we can write that \(\tau_j = g^{s_j r c_j}\). Combining with the computation of \(y\) in Step 4:

\[
y = \prod_{j=1}^{t} g^{s_j r c_j} = g^{\sum_{j=1}^{t} s_j r c_j} = g^{r C_s}
\]

Thus, we have that \(y' \equiv y \mod p\), proving the correctness of the validator.

### Appendix II: Proof of Theorem 1

We now prove the security of the batched verification scheme by proving Theorem 1 given in Section VI-B. Our proof follows that from [19], with some additional complexity due to our multi-dimensional representation of a file.

Consider the hash function family \(h\) parameterized by \((\lambda_p, \lambda_q, m)\). For any file size \(n\), batch size \(t < n\), consider an arbitrary adversary \(A_0\) that \((\tau, \epsilon_0)\)-attacks the encoding verifier \(V\). Based on this adversary, define a CRHF-adversary \(A(G)\) that works as follows:

**Algorithm \(A(G)\):**
1. \((F, X, C) \leftarrow A_0(G, m, n, t)\)
2. If \(F\) is not \(m \times n\) or \(X\) is not \(n' \times t\) or \(C\) is not \(m \times t\), then Fail.
3. \(F' \leftarrow P(F)\)
4. If \(F'X = C\), then Fail
5. If \(V(H_G(F'), G, X, C) = \text{Reject}\), then Fail.
6. If \(H_G(F'X) \neq H_G(C)\), then Fail.
7. Find a column \(j\) such that \(F'x_j \neq c_j\). Return \((F'x_j, c_j)\).

By our selection of the adversary \(A_0\), running it in Step 1 will require time complexity \(\tau\) and will succeed in the experiment given in Definition 2 with probability \(\epsilon_0\). By construction, \(A\) corresponds naturally to the steps of our definitional experiment in Equation 5. Step 2 enforces appropriate dimensionality. Step 4 enforces the requirements that \(\langle X, C \rangle\) not be a legal encoding, given in Equation 5 by \(F'X \neq C\). Step 5 requires that the verifier \(V\) accepts the "forged" input. We can conclude that the Algorithm \(A\) will arrive at Step 6 with probability \(\epsilon_0\).

We now argue that \(A\) fails at Step 6 with probability \(2^{-\lambda}\). To arrive at this step, the verifier \(V\) as defined in Section IV-D must have output Accept. Using the same manipulations as those given in Appendix I, we take the fact that \(V\) accepted to mean that:

\[
g^{r F'X s} \equiv g^{r C s} \mod p
\]

Note that the exponents on both sides of the equation are scalars. Because \(g\) has order \(q\), we can say that these exponents are equivalent mod \(q\); that is, \(r F'X s \equiv r C s \mod q\), and rearranging,

\[
r (F'X - C) s \equiv 0 \mod q
\]

If the algorithm \(A_0\) fails at Step 6, then \(H_G(F'X) \neq H_G(C)\). Rewriting these row vectors in terms of \(g\) and \(r\), we have that \(g^{r F'X} \not\equiv g^{r C} \mod p\). Recalling that \(g\) is of order \(q\) and that exponentiation of a scalar by a row vector is defined component-wise, we can write that \(r F'X \not\equiv r C \mod q\), and consequently:

\[
r (F'X - C) \not\equiv 0 \mod q
\]

Let \(K = \{ k \mid a_k \neq 0 \}\). Then compute the product:

\[
i = \prod_{k \in K} g^{z_i}_{A[i][a_k][k]}
\]

The storage requirement for the table \(A\) is \(m(2x - 1)(\lambda_q - 1)\lambda_p/x\) bits, which is exponential in \(x\). Disregarding the one-time precomputation in Step 1, the computation of \(z_i\) in Step 2 costs \((\lambda_q - 1) \text{MultCost}(p)/x\). Compared to the conventional iterative-squaring technique, this method achieves a factor of \(x/2\) speed-up.

Setting \(x = 8\), the size of the tables \(|A| = 510 \, \text{MB}\), and we can hash a 1 GB file with global parameters in less than 2 hours (of course, hashing is much faster in the per-publisher model).

For convenience, let the \(1 \times t\) row vector \(u = r (F'X - C)\). Equation 8 gives us that \(u \not\equiv 0 \mod q\); thus, some element of \(u\) must be non-zero. For simplicity of notation, say that \(u_1\) is the first non-zero cell, but our analysis would hold for any index. Equation 7 gives us that \(u s \equiv 0 \mod q\). Since \(u_1 \neq 0\), it has a multiplicative inverse, \(u_1^{-1} \mod q\). Therefore:

\[
s_1 \equiv -u_1^{-1} \sum_{j=2}^{t} u_j s_j \mod q
\]

Referring to Step 1 of verifier \(V\), \(s_1\) was selected at random from \(2^\lambda\) possible values; consequently, the probability of its having the particular value in Equation 9 is at most \(2^{-\lambda}\). Thus, \(A\) can fail at Step 6 with probability at most \(2^{-\lambda}\).

Combining our results, we have that algorithm \(A\) will reach Step 7 with probability \(\epsilon_0 - 2^{-\lambda}\). At this point in the algorithm, \(A\) is assured that \(F'X \neq C\), since execution passed Step 4. If we consider this inequality column-wise, we conclude there must be some \(j \in \{1, \ldots, t\}\) such that \(F'x_j \neq c_j\), where \(x_j\) and \(c_j\) are the \(j\)-th columns of \(X\) and \(C\), respectively. Because Step 6 guarantees that \(H_G(F'X) = H_G(C)\) at this point in the algorithm, we can use the definition of \(H_G\) to claim that for all \(j\), \(h_G(F'x_j) = h_G(c_j)\). Thus, \((F'x_j, c_j)\) represents a hash collision for the hash function \(h_G\).

Analyzing the time-complexity of \(A\), Step 1 completes with time-complexity \(\tau\), the matrix multiplication \(F'X\) in Step 4 requires \(mt\) multiplications in \(\mathbb{Z}_q\), and the hash computations in Step 6 each require \(tm/2\) multiplications in \(\mathbb{Z}_p\), assuming the usual precomputations. Therefore, \(A\) has a time complexity given by \(\tau' = \tau + mt (\text{MultCost}(q) + \text{MultCost}(p))\).

Therefore, we have shown that if an adversary \(A_0\) is successful in a \((\tau, \epsilon_0)\)-attack against \(V\), then another adversary \(A\) exists that is \((\tau', \epsilon)\)-successful in finding collisions for the hash function \(h\), where \(\tau' = \tau + mt (\text{MultCost}(q) + \text{MultCost}(p))\) and \(\epsilon = \epsilon_0 + 2^{-\lambda}\). This completes the proof of Theorem 1.

### Appendix III: k-ary Exponentiation

In order to speed up global hash generation, one can make an exponential space-for-time tradeoff, using k-ary exponentiation. That is, we can speed up each exponentiation by a factor of \(x/2\) while costing a factor of \((2x - 1)/x\) in core memory. For simplicity, assume that \(x \mid (\lambda_q - 1)\):

1. For \(1 \leq i \leq m\), for \(0 < j < 2^x\), for \(0 \leq k < (\lambda_q - 1)/x\), precompute \(g^{j 2^k x}\). Store each value in an array \(A\) under the index \(A[i][j][k]\).
2. To compute \(g^{z_i}\), write \(z_i\) in base \(2^x\):

\[
z_i = a_0 + a_1 2^x + a_2 2^{2x} + \cdots + a_{(\lambda_q - 1)/x - 1} 2^{(\lambda_q - x)}
\]

\[
g^{z_i} = \prod_{k=0}^{(\lambda_q - 1)/x - 1} g^{a_k 2^k x}
\]

This method significantly reduces the computational overhead, making the hash generation process more efficient.