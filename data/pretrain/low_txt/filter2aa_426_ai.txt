### Injection of Payloads in Electron Apps

While injecting payloads into Electron applications may not be as straightforward as with traditional websites, it is certainly feasible. This can be achieved through various means, such as protocol handlers and remote content. 

### Common Security Weaknesses in Electron Apps

Three Electron applications were analyzed to identify common security vulnerabilities. The following weaknesses were identified:

1. **Cross-Site Scripting (XSS) due to the use of dangerous functions.**
2. **Remote Code Execution (RCE) due to the use of `shell.openExternal()`.**
3. **XSS escalation to RCE due to Node integration.**
4. **XSS escalation to RCE due to insecure preload or lack of context isolation.**

### Large-Scale Analysis Methodology

A method for large-scale analysis of Electron apps was presented, consisting of three steps:

1. **Data Collection:**
   - Open-source apps from GitHub.
   - Both open and closed-source apps from the Electron app list.

2. **App Download and Source Code Extraction:**
   - Automatically download the apps.
   - Extract source code from closed-source apps.

3. **Security Analysis:**
   - Use `npm audit` and a custom version of the Electronegativity security scanner to analyze the apps.

### Insights from the Analysis

The results provided valuable insights into the security practices of Electron app developers. While there are positive trends, such as more settings moving to secure defaults and increased awareness of necessary security considerations, several issues remain:

- A significant number of apps use outdated and unsupported versions of Electron.
- The use of potentially dangerous functions is common.
- Most apps do not go beyond the default settings, failing to explicitly set secure preferences or utilize additional security features like Content Security Policies (CSPs).

### Recommendations

To address these issues, the following recommendations were made:

- **Electron Developers:**
  - Improve documentation to consistently promote secure practices.
  - Implement safe wrappers around dangerous functions for common use cases.
  - Continue the move towards secure default settings.

- **Individual App Developers:**
  - Regularly update dependencies, particularly Electron itself.
  - Consciously set secure preferences.
  - Utilize automated security scanners like Electronegativity to catch issues early.

### Manual Analysis Findings

Manual analysis revealed that even high-profile Electron apps still have low-hanging fruit vulnerabilities. The exploitable vulnerabilities found were reported to the respective projects, with one already fixed at the time of writing.

### Future Work

#### Longitudinal Analysis
- The current analysis provides a snapshot of security practices as of mid-2020. It would be beneficial to track how these practices evolve over time.
- Using the GitHub API, older versions of a large number of apps could be obtained and analyzed using the scripts developed in this thesis. This can also be extended to future versions once they are released.

#### Subset Analysis
- Focus on specific subsets of apps, such as those that are merely wrappers around existing websites. For these, secure settings are even more critical.
- Filter apps based on their last update or commit date to exclude discontinued projects.
- Conduct in-depth analysis of particular aspects, such as the CSPs used by the apps, which were collected but not fully analyzed in this study.

#### Framework Comparison
- Similar research could be conducted for other frameworks discussed in the literature review.

#### Extended Analysis
- Improve the extraction process for closed-source apps where automated extractors failed.
- Address false negatives in Electron detection.
- Include checks for installers and updaters, which have been found to contain vulnerabilities.

#### Tool Improvement
- Enhance tools like Electronegativity to reduce false positives and provide more detailed reports.
- Continuously search for and report specific vulnerabilities in Electron apps.

### Bibliography

[1] OpenJS Foundation and The Electron contributors, “Homepage,” Electron, 02-Jun-2020. [Online]. Available: https://www.electronjs.org/. [Accessed: 13-Jul-2020]

[2] K. Sawicki, “Atom Shell is now Electron,” Electron Blog, 23-Apr-2015. [Online]. Available: https://www.electronjs.org/blog/electron. [Accessed: 13-Jul-2020]

[3] C. Kerr and S. Nguy, “Electron Governance,” Electron Blog, 18-Mar-2019. [Online]. Available: https://www.electronjs.org/blog/governance. [Accessed: 13-Jul-2020]

[4] F. Rieseberg, “Electron joins the OpenJS Foundation,” Electron Blog, 11-Dec-2020. [Online]. Available: https://www.electronjs.org/blog/electron-joins-openjsf. [Accessed: 13-Jul-2020]

[5] OpenJS Foundation, “Hosted Projects,” OpenJS Foundation, 26-Jun-2020. [Online]. Available: https://openjsf.org/projects/. [Accessed: 13-Jul-2020]

[6] C. Griffith and L. Wells, Electron: From Beginner to Pro, 1st ed. Apress, 2017 [Online]. Available: https://www.apress.com/de/book/9781484228258. [Accessed: 12-Jul-2020]

[7] F. Rieseberg, S. Vohr, J. Goldberg, C. Kerr, and C. Hawkes, “Application Architecture,” Electron Documentation, 30-Sep-2019. [Online]. Available: https://www.electronjs.org/docs/tutorial/application-architecture. [Accessed: 13-Jul-2020]

[8] C. Nokes, “Deep dive into Electron’s main and renderer processes,” 26-Oct-2016. [Online]. Available: https://cameronnokes.com/blog/deep-dive-into-electron's-main-and-renderer-processes/. [Accessed: 13-Jul-2020]

[9] S. Powers, Learning Node: Moving to the Server-Side. O’Reilly Media, Inc., 2016.

[10] M. Burda et al., “Writing Your First Electron App,” Electron Documentation, 03-Feb-2020. [Online]. Available: https://www.electronjs.org/docs/tutorial/first-app. [Accessed: 13-Jul-2020]

[11] C. Zhao et al., “Application Distribution,” Electron Documentation, 13-Apr-2020. [Online]. Available: https://www.electronjs.org/docs/tutorial/application-distribution. [Accessed: 25-Jul-2020]

[12] F. Rieseberg et al., “Notifications (Windows, Linux, macOS),” Electron Documentation, 08-Jan-2019. [Online]. Available: https://www.electronjs.org/docs/tutorial/notifications. [Accessed: 13-Jul-2020]

[13] M. Lee, J. Kleinschmidt, V. Hashimoto, F. Rieseberg, and C. Kerr, “macOS Dock,” Electron Documentation, 31-Mar-2020. [Online]. Available: https://www.electronjs.org/docs/tutorial/macos-dock. [Accessed: 13-Jul-2020]

[14] The OWASP Foundation, “OWASP Top Ten Web Application Security Risks,” 20-Nov-2017. [Online]. Available: https://owasp.org/www-project-top-ten/. [Accessed: 09-Jun-2020]

[15] D. Ray and J. Ligatti, “Defining Injection Attacks,” in Information Security, Cham, 2014, pp. 425–441, doi: 10.1007/978-3-319-13257-0_26.

[16] L. Tal, Essential Node.js Security. Lulu.com, 2017.

[17] The OWASP Foundation, “A2:2017-Broken Authentication,” OWASP Top Ten 2017. [Online]. Available: https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication.html. [Accessed: 09-Jun-2020]

[18] The MITRE Corporation, “CWE-200: Exposure of Sensitive Information to an Unauthorized Actor (4.0),” Common Weakness Enumeration. [Online]. Available: https://cwe.mitre.org/data/definitions/200.html. [Accessed: 09-Jun-2020]

[19] L. Carettoni and L. Stella, “Electronegativity Checks,” Electronegativity Wiki, 14-Apr-2020. [Online]. Available: https://github.com/doyensec/electronegativity/wiki#electronegativity-checks. [Accessed: 13-Jun-2020]

[20] PortSwigger Ltd., “What is XXE (XML external entity) injection? Tutorial & Examples,” Web Security Academy. [Online]. Available: https://portswigger.net/web-security/xxe. [Accessed: 10-Jun-2020]

[21] The MITRE Corporation, “CWE-284: Improper Access Control (4.0),” Common Weakness Enumeration. [Online]. Available: https://cwe.mitre.org/data/definitions/284.html. [Accessed: 10-Jun-2020]

[22] The OWASP Foundation, “A6:2017-Security Misconfiguration,” OWASP Top Ten 2017. [Online]. Available: https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration.html. [Accessed: 10-Jun-2020]

[23] S. Gupta and B. B. Gupta, “Cross-Site Scripting (XSS) attacks and defense mechanisms: classification and state-of-the-art,” Int J Syst Assur Eng Manag, vol. 8, no. 1, pp. 512–530, Jan. 2017, doi: 10.1007/s13198-015-0376-0.

[24] Acunetix Ltd, “What is Insecure Deserialization?” Web Security Zone (The Acunetix Blog), 07-Dec-2017. [Online]. Available: https://www.acunetix.com/blog/articles/what-is-insecure-deserialization/. [Accessed: 11-Jun-2020]

[25] OpSecX, “Exploiting Node.js deserialization bug for Remote Code Execution,” OpSecX, 08-Feb-2017. [Online]. Available: https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/. [Accessed: 11-Jun-2020]

[26] M. Morszczyzna, “What’s really wrong with node_modules and why this is your fault,” Hacker Noon, 27-Nov-2017. [Online]. Available: https://hackernoon.com/whats-really-wrong-with-node-modules-and-why-this-is-your-fault-8ac9fa893823. [Accessed: 25-Jul-2020]

[27] A. Baldwin, “npm audit: identify and fix insecure dependencies,” The npm Blog, 09-May-2018. [Online]. Available: https://blog.npmjs.org/post/173719309445/npm-audit-identify-and-fix-insecure. [Accessed: 11-Jun-2020]

[28] The OWASP Foundation, “A10:2017-Insufficient Logging & Monitoring,” OWASP Top Ten 2017. [Online]. Available: https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A10-Insufficient_Logging%252526Monitoring.html. [Accessed: 11-Jun-2020]

[29] P. Tsakalidis, “How To Backdoor Any Electron Application,” Context Information Security Blog, 24-Jan-2019. [Online]. Available: https://www.contextis.com/en/blog/basic-electron-framework-exploitation. [Accessed: 13-Jun-2020]

[30] J. Harrison, “Issue #123: Code Signing of ASAR files, especially for Windows operating system,” electron/asar Issue Tracker on GitHub, 27-May-2017. [Online]. Available: https://github.com/electron/asar/issues/123. [Accessed: 13-Jun-2020]

[31] M. Stockley, “How scammers abuse Google Search’s open redirect feature,” Naked Security, 15-May-2020. [Online]. Available: https://nakedsecurity.sophos.com/2020/05/15/how-scammers-abuse-google-searchs-open-redirect-feature/. [Accessed: 13-Jun-2020]

[32] K. Kotowicz, “Open redirects that matter,” Google Bughunter University, 20-Oct-2016. [Online]. Available: https://sites.google.com/site/bughunteruniversity/best-reports/openredirectsthatmatter. [Accessed: 13-Jun-2020]

[33] L. Carettoni, “Electron Security Checklist: A guide for developers and auditors,” Doyensec, LLC., Jul. 2017 [Online]. Available: https://doyensec.com/resources/us-17-Carettoni-Electronegativity-A-Study-Of-Electron-Security-wp.pdf. [Accessed: 13-Jun-2020]

[34] M. Bentkowski, “Vulnerability in Hangouts Chat: from open redirect to code execution,” MB blog, 23-Jul-2018. [Online]. Available: https://blog.bentkowski.info/2018/07/vulnerability-in-hangouts-chat-aka-how.html. [Accessed: 13-Jun-2020]

[35] M. Austin, “I found the path to full Remote Code Execution in @SecurityMB’s open redirect in Google Chat Desktop, good for @GoogleVRP for paying it out!” Twitter, 27-Jul-2018. [Online]. Available: https://twitter.com/mattaustin/status/1022648925902200832. [Accessed: 13-Jun-2020]

[36] MDN contributors, “Content Security Policy (CSP),” MDN Web Docs, 02-Jun-2020. [Online]. Available: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP. [Accessed: 13-Jun-2020]

[37] S. Lekies, K. Kotowicz, S. Groß, E. A. Vela Nava, and M. Johns, “Code-Reuse Attacks for the Web: Breaking Cross-Site Scripting Mitigations via Script Gadgets,” in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, Dallas, Texas, USA, 2017, pp. 1709–1723, doi: 10.1145/3133956.3134091.

[38] F. Rieseberg et al., “Electron Security Warnings,” Electron Documentation, 01-Jun-2020. [Online]. Available: https://www.electronjs.org/docs/tutorial/security#checklist-security-recommendations. [Accessed: 14-Jun-2020]

[39] Jeremy Rose et al., “Breaking Changes,” Electron Documentation, 19-May-2020. [Online]. Available: https://www.electronjs.org/docs/breaking-changes. [Accessed: 13-Jun-2020]

[40] S. Miskin, “Pull Request #19732: docs: update contextIsolation documentation on access to globals,” electron/electron Issue Tracker on GitHub, 13-Aug-2019. [Online]. Available: https://github.com/electron/electron/pull/19732. [Accessed: 10-Jul-2020]

[41] M. Kinugawa, “Electron: Abusing the lack of context isolation,” CureCon 08/2018, 18-Aug-2018 [Online]. Available: https://speakerdeck.com/masatokinugawa/electron-abusing-the-lack-of-context-isolation-curecon-en. [Accessed: 14-Jul-2020]

[42] S. Attard and M. Lee, “contextBridge,” Electron Documentation, 28-Jan-2020. [Online]. Available: https://www.electronjs.org/docs/api/context-bridge. [Accessed: 10-Jul-2020]

[43] S. Attard, “Context Isolation,” Electron Documentation, 11-May-2020. [Online]. Available: https://www.electronjs.org/docs/tutorial/context-isolation. [Accessed: 10-Jul-2020]

[44] C. Zhao et al., “Remote module,” Electron Documentation, 01-Jun-2020. [Online]. Available: https://www.electronjs.org/docs/api/remote. [Accessed: 14-Jun-2020]

[45] C. Zhao et al., “Class: BrowserWindow,” Electron Documentation, 01-Jun-2020. [Online]. Available: https://www.electronjs.org/docs/api/browser-window#class-browserwindow. [Accessed: 14-Jun-2020]

[46] J. Rose, “Electron’s ‘remote’ module considered harmful,” Medium, 06-Feb-2020. [Online]. Available: https://medium.com/@nornagon/electrons-remote-module-considered-harmful-70d69500f31. [Accessed: 14-Jun-2020]

[47] M. Burda et al., “sandbox Option,” Electron Documentation, 01-Jun-2020. [Online]. Available: https://www.electronjs.org/docs/api/sandbox-option. [Accessed: 14-Jun-2020]

[48] L. Stella, “CUSTOM_ARGUMENTS_JS_CHECK,” Electronegativity Wiki, 09-Apr-2019. [Online]. Available: https://github.com/doyensec/electronegativity. [Accessed: 14-Jun-2020]

[49] C. Zhao et al., “ses.setPermissionRequestHandler(handler),” Electron Documentation, 01-Jun-2020. [Online]. Available: https://www.electronjs.org/docs/api/session#sessetpermissionrequesthandlerhandler. [Accessed: 14-Jun-2020]

[50] C. Zhao et al., “protocol,” Electron Documentation, 01-Jun-2020. [Online]. Available: https://www.electronjs.org/docs/api/protocol. [Accessed: 14-Jun-2020]

[51] C. Zhao et al., “app,” Electron Documentation, 01-Jun-2020. [Online]. Available: https://www.electronjs.org/docs/api/app. [Accessed: 14-Jun-2020]

[52] L. Carettoni, “Subverting Electron Apps via Insecure Preload,” Doyensec Blog, 03-Apr-2019. [Online]. Available: https://blog.doyensec.com/2019/04/03/subverting-electron-apps-via-insecure-preload.html. [Accessed: 14-Jun-2020]

[53] L. Carettoni, “Democratizing Electron Security,” Covalence 2020, 24-Jan-2020 [Online]. Available: https://doyensec.com/resources/Covalence-2020-Carettoni-DemocratizingElectronSecurity.pdf. [Accessed: 10-Jul-2020]

[54] The Leanote contributors, “leanote/leanote,” GitHub, 09-Apr-2019. [Online]. Available: https://github.com/leanote/leanote. [Accessed: 25-Jun-2020]

[55] S. Väli, “Issue #284: XSS to code execution,” leanote/desktop-app Issue Tracker on GitHub, 01-Dec-2017. [Online]. Available: https://github.com/leanote/desktop-app/issues/284. [Accessed: 25-Jun-2020]

[56] Packt Publishing and jQuery Foundation,“.append(),” jQuery API Documentation, 17-May-2016. [Online]. Available: https://api.jquery.com/append/. [Accessed: 25-Jun-2020]

[57] D. Sacerdote, “nc — arbitrary TCP and UDP connections and listens,” Ubuntu Manpages, 27-Dec-2018. [Online]. Available: http://manpages.ubuntu.com/manpages/focal/man1/nc_openbsd.1.html#client/server%20model. [Accessed: 26-Jun-2020]

[58] R. Walikar, “Nodejs RCE and a simple reverse shell,” i break software, 23-Aug-2016. [Online]. Available: https://ibreak.software/2016/08/nodejs-rce-and-a-simple-reverse-shell/. [Accessed: 26-Jun-2020]

[59] imagemlt, “Issue #345: markdown feature XSS to code execution,” leanote/desktop-app Issue Tracker on GitHub, 08-Oct-2019. [Online]. Available: https://github.com/leanote/desktop-app/issues/345. [Accessed: 26-Jun-2020]

[60] The Leanote contributors, “Creating groups and adding members,” Leanote manual, 10-Jul-2015. [Online]. Available: http://leanote.leanote.com/post/group. [Accessed: 26-Jun-2020]

[61] The Leanote contributors, “Sharing notebooks and notes with friends and groups,” Leanote manual, 10-Jul-2015. [Online]. Available: http://leanote.leanote.com/post/share. [Accessed: 26-Jun-2020]