---
author: 老王
category: 穿山甲专访
comments_data:
- date: '2019-05-01 07:31:29'
  message: 不如做一个闭源千牛Linux客户端有价值。
  postip: 171.82.133.162
  username: 来自湖北武汉的 Chrome Mobile 57.0|Android 8.1 用户
count:
  commentnum: 1
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 11004
date: '2019-04-29 11:38:00'
editorchoice: true
excerpt: 在对话中，鲁直反问的一句“你为什么不开源？”给我留下了深刻印象。
fromurl: ''
id: 10794
islctt: false
largepic: /data/attachment/album/201904/29/122828t9nn39yrrez93kh3.jpg
permalink: /article-10794-1.html
pic: /data/attachment/album/201904/29/122828t9nn39yrrez93kh3.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 10141
- displayorder: 0
  raid: 10548
- displayorder: 2
  raid: 10693
reviewer: ''
selector: ''
summary: 对话中，鲁直反问的“你为什么不开源？”这句话让我印象深刻。
tags:
- 蚂蚁金服
- 穿山甲专访
thumb: false
title: 对话鲁直：蚂蚁金服中间件的开源头羊
titlepic: true
translator: ''
updated: '2019-04-29 11:38:00'
---

![](/data/attachment/album/201904/29/122828t9nn39yrrez93kh3.jpg)

初春二月，在杭州西湖畔细雨蒙蒙的天气里，我拜访了蚂蚁金服中间件团队，并与SOFA的技术负责人鲁直进行了一次深入交谈。值得一提的是，鲁直同时也是负责推动SOFA开源事务的关键人物。这样一个践行开放核心模式的开源项目，自然引起了我的浓厚兴趣。

技术人的对话总是朴实而直接，我们的讨论主要围绕SOFA和开源主题展开，希望也能引起其他技术同行的共鸣。

![](/data/attachment/album/201904/29/114834oq8iq804ii4v4xs3.jpg)

**人物介绍**

- **受访者**: 鲁直，蚂蚁金服SOFA开源负责人。
- **采访者**: 老王，开源倡导者，拥有20年互联网从业经验的技术专家。

尽管我和鲁直已在微信上交流多时，但这次是首次面对面交谈。从交谈中得知，鲁直于2009年加入阿里巴巴，至今已有十年之久。最初他在1688.COM从事业务系统开发，对中间件技术充满热情并时常研究各种中间件的实现和功能。2013年，为了更深入地学习和研究中间件框架，他转至蚂蚁金服中间件团队，并自此一直致力于SOFA项目。

目前，鲁直在SOFA团队中的职责主要包括几个方面。其中一个重要部分就是推进SOFA的开源工作。SOFA的产品体系非常广泛，涵盖已对外开源的部分、内部微服务体系以及SOFA框架等——这些开源相关的工作主要由鲁直负责推动。

作为技术负责人，鲁直不仅要领导技术团队，还要亲自参与技术工作。对此，他提到：“我认为技术管理与普通管理有所不同，因为**技术管理除了需要具备管理能力外，还需保持一定的技术判断力和敏锐度**。对于新技术或团队遇到的重大技术问题，都需要有方向性的判断。虽然最终不一定由自己具体解决，但在整个团队的技术攻坚和技术选型上，必须共同确定方向。”

### SOFA 5 迈向 Service Mesh

据我了解，SOFA已经发展到了第五代（SOFA5）。在SOFA4阶段，主要任务是对开源体系进行梳理并逐步开源；现在进入SOFA5阶段。我想知道，是什么让蚂蚁金服中间件团队认为SOFA4的阶段性目标已经达成，可以迈向新的SOFA5阶段？

“从整体行业趋势来看，SOFA4架构相对传统一些，更多是对我们之前技术框架的整理和优化。在这个过程中，SOFA代码经过大量优化和重构后达到了对外开源的标准，从而走向了开源核心模式，分阶段地将各个部分进行了开源。”鲁直解释道，“但从我们对行业的整体判断来看，未来无疑是云的时代，因此要考虑如何使所有业务系统能够提供云的能力，例如Serverless。”

接着这个话题，鲁直分享了他对云计算的理解：“一方面，云计算肯定要为业务的发展提供更加便捷的基础资源，让人们无需关心底层基础设施。Serverless顾名思义即‘无服务器’——用户不必关心服务器来源，只需关注业务代码即可。反过来，对于云服务提供商来说，通过这一层抽象，资源利用率会更高，利润空间也会更大，这是一个双赢的局面。**对用户而言，这种好处是显而易见的，他们可以更少地关注基础设施，专注于代码本身。**”

> “我们希望在SOFA5的方向上，在这一新迭代中，使业务——包括未来我们将开源的各种功能和服务模式——都能更多地关注自己的业务代码，而不必再过多地关心基础设施。”鲁直说道。

在SOFA5中，一个重要的发展方向是Service Mesh。鲁直强调了其对Service Mesh技术的高度认可：“我认为Service Mesh是迈向未来的重要一步，它可以让业务不再关心基础设施。通过Service Mesh，我们可以将许多技术能力直接集成到基础设施中，而业务则无需感知这一层。原来可能需要花费数小时甚至更长时间解决的基础设施问题，现在可以通过Service Mesh轻松解决。”

“目前我们已经在生产环境中应用了Service Mesh。我们对此抱有极大的决心，希望能在今年更广泛地推广这项技术。现阶段的重点在于内部落地，确保其稳定运行后再向社区贡献更多。”

*Service Mesh一词最早由Buoyant公司在2016年提出，随着Linkerd的引入，Service Mesh逐渐进入国内技术社区视野。Linkerd是业界首个Service Mesh。*

*Service Mesh是一种基础设施层，用于处理服务间的通信，确保请求可靠传递。实践中，服务网格通常以轻量级网络代理的形式实现，通常与应用程序一起部署，但对应用程序透明。*

*Service Mesh有两种部署模型：*

- *对于简单请求，作为发起者的客户端应用实例会先用简单方式将请求发送到本地的Service Mesh实例。这两个独立进程之间通过远程调用连接。Service Mesh完成完整的服务间调用流程，如服务发现和负载均衡，最后将请求发送给目标服务。这就是Sidecar模式，它在原有的客户端和服务端之间增加了一个代理。*
- *在多个服务调用的情况下，Service Mesh出现在所有服务之下，形成专门用于服务间通信的基础设施层。Service Mesh接管整个网络，负责在服务之间转发所有请求。在这种情况下，上层服务不再负责传递请求的具体逻辑，只负责业务处理。服务间通信环节从应用中剥离出来，形成了一个抽象层。*

*如果存在大量的服务，Sidecar之间的连接就会形成一个网络，这就是服务网格名称的由来。*

“我们将以Service Mesh为跳板继续前进。”鲁直表示，“**Serverless应聚焦于其字面意义，即‘无服务器’，后面的技术都是为了让无服务器承载具体的业务。**”