### 优化后的文本

#### 删除ACG边以避免无限循环
为避免无限循环，需要删除从ACG的边。如果路径不存在，即当前活动无法到达目标活动，系统将返回或回滚到前一个活动。一旦跳转到下一个活动，我们重复相同的操作：计算路径、触发事件并删除边，直到跳转到目标活动。

对于某些视图在特定条件下（例如点击其他按钮后）可见的情况，我们将直接跳转到目标活动。一旦跳转到包含WebView的目标活动，为了触发潜在的漏洞代码，我们构建了一个攻击环境，该环境会在应用尝试加载HTTPS页面时重定向到非法页面。但有些应用首先加载静态本地页面或HTTP页面，并在页面上提供多个链接。在这种情况下，我们采用类似爬虫的策略来查找HTTPS链接并加载它。我们首先从初始页面提取所有链接，然后逐一加载每个链接并再次提取链接，直到找到HTTPS链接或爬取深度达到3层为止。需要注意的是，我们不需要找到所有的HTTPS链接，因为所有HTTPS链接共享相同的错误处理过程。

#### 确认漏洞
当WebView加载HTTPS页面时，如果WebView拒绝非法证书，它会显示空白页面；否则，它会显示非法网页。因此，我们通过检查WebView是否为空白页面来确定该应用是否存在漏洞。借助详细的运行信息，我们可以轻松找出该应用为何存在漏洞以及HTTPS网页的功能。此外，这些信息有助于我们进行统计分析和更全面的分析。

### 评估
我们在两台安装了Ubuntu操作系统的机器上进行了实验，一台用于测试，另一台用于攻击环境。我们从360市场下载了13,820个应用作为数据集，下载时间为2014年7月。

静态分析耗时13.5小时完成，每应用平均耗时3.5秒，这足以应对大规模分析。对于反编译，有257个应用无法反编译。静态分析的结果如表1所示。从表中可以看出，在总共13,820个应用中，有1,360个应用可能存在漏洞。具有自己的SSL/TLS证书验证错误处理的应用占9.8%，这些应用需要进一步进行动态分析以确认其是否真正存在漏洞。其余12,203个应用在静态分析中被确认无此漏洞，它们要么没有自己的WebViewClient，要么代码不可达，要么代码拒绝带有非法证书的页面。

在动态分析过程中，我们使用了4个运行Android 4.2的模拟器来运行测试应用，共耗时23小时，平均每应用耗时60.8秒。动态分析的结果如表2所示，从表中可以看出，在1,360个潜在漏洞应用中，有645个应用被确认存在漏洞，占比47.4%。这意味着近一半的证书验证错误处理设计或实现不佳。另外，有715个应用在静态分析中被检测为潜在漏洞，但在动态分析中被确认无漏洞，因为它们自身的错误处理有效。

表5列出了前五类易受攻击的应用类别。根据该表，金融和社会类应用比其他类别更容易受到攻击，许多这些应用使用了第三方SDK（如腾讯微博、新浪微博和支付宝）来实现某些功能。然而，这些SDK本身存在漏洞，导致所有使用这些SDK的应用也变得易受攻击。根据表4中应用的下载排名，我们发现最受欢迎的应用（排名区间为1-1000）具有最高的漏洞率。此外，随着应用受欢迎程度的降低，漏洞率也随之下降，但这并不意味着排名较低的应用更加安全。进一步研究表明，排名较低的应用不太可能使用HTTPS，这意味着它们更容易受到攻击。

### 相关工作
Zheng等人在[4]中提出了一种名为SmartDroid的系统，可以引导原生Android UI暴露敏感行为。但SmartDroid无法处理Web UI。Bhoraskar等人在[8]中提出了一种名为Brahmastra的应用自动化工具，用于测试移动应用中的第三方组件。尽管Brahmastra功能强大，但它无法测试WebView UI，而这是我们的工作中必不可少的部分。

最近，有许多努力致力于揭示和缓解SSL安全问题。Fahl等人[9]发现了Android SSL中间人攻击漏洞，并开发了一个名为Mallodroid的工具来检测它。但他们无法自动确认大型数据集中的漏洞。Sounthiraraj等人在[1]中开发了一个名为SMV-Hunter的工具，能够自动检测大规模数据集中的SSL中间人攻击漏洞。我们的工作直接受到了SMV-Hunter的启发，但我们的系统与之不同，专注于不同的漏洞并采用了不同的技术。SMV-Hunter关注应用内置的SSL验证弱点，而我们的系统则关注HTTPS验证错误处理过程中的弱点。同时，SSL的使用方式也有所不同。在SMV-Hunter中，其目的是找到用于后端网络通信的SSL应用，而在我们的工作中，SSL的使用是基于UI的，即只有当WebView显示出来时，网页才会显示。这意味着我们需要做更多的工作来跳转到目标活动并打开HTTPS网页。Tendulkar等人在[10]中讨论了同样的问题（onReceivedSslError），并且几乎在同一时间进行了研究。他们在[10]中仅展示了问题，而我们对其进行了系统的研究并开发了这个工具来自动检测这个问题。

### 未来工作
我们的方法有几个局限性。在静态分析中，由于面向对象编程的特性，一些虚拟方法调用只能在运行时确定。在动态分析中，某些活动只有在特定条件下才能访问。例如，如果我们想跳转到某些购物应用的结账活动，我们必须先登录并将商品放入购物车。直接跳转到该活动会导致错误。此外，某些UI元素只有在特定条件下才可见。例如，注销按钮只有在登录后才可见。

### 结论
本文发现了一种新的混合Android应用漏洞，该漏洞可能影响Android WebView的HTTPS连接，使安全连接变得脆弱。我们设计了一个新的检测系统，结合静态分析和动态分析来自动检测这种类型的漏洞。我们的静态分析识别出潜在的易受攻击的应用，并生成必要的信息来指导动态分析，动态分析用于通过自动触发漏洞来确认应用是否易受攻击。我们已经应用我们的系统测试了13,820个应用，总共发现了645个确实存在漏洞的应用。

### 致谢
本研究部分得到了中国国家自然科学基金（61173068, 61173139）、教育部新世纪优秀人才支持计划、山东省重点科技项目（2014GGD01063）、山东省自主创新基金（2014CGZH1106）和山东省自然科学基金（ZR20-14FM020）的支持。

### 参考文献
[1] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and L. Khan, "Smv-hunter: Large scale, automated detection of ssl/tls man-in-the-middle vulnerabilities in android apps," in Proceedings of the 19th Network and Distributed System Security Symposium. San Diego, California, USA, 2014.
[2] J. Clark and P. C. van Oorschot, "Sok: Ssl and https: Revisiting past challenges and evaluating certificate trust model enhancements," in Proceedings of the Security and Privacy. IEEE, 2013.
[3] https://code.google.com/p/androguard/.
[4] C. Zheng, S. Zhu, S. Dai, G. Gu, X. Gong, X. Han, and W. Zou, "Smartdroid: an automatic system for revealing ui-based trigger conditions in android applications," in Proceedings of the second ACM workshop on Security and privacy in smartphones and mobile devices. ACM, 2012, pp. 93-104.
[5] https://code.google.com/p/android apktool/.
[6] M. C. Grace, Y. Zhou, Z. Wang, and X. Jiang, "Systematic detection of capability leaks in stock android smartphones." in Proceedings of the 19th Annual Symposium on Network and Distributed System Security, 2012.
[7] https://developer.android.com/reference/android/app/Instrumentation.html.
[8] R. Bhoraskar, S. Han, J. Jeon, T. Azim, S. Chen, J. Jung, S. Nath, R. Wang, D. Wetherall, D. Langenegger et al., "Brahmastra: Driving apps to test the security of third-party components." in Proceedings of the 23rd USENIX conference on Security Symposium, 2014.
[9] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner, B. Freisleben, and M. Smith, "Why eve and mallory love android: An analysis of android ssl (in) security," in Proceedings of the 2012 ACM conference on Computer and communications security. ACM, 2012.
[10] V. Tendulkar and W. Enck, "An application package configuration approach to mitigating android ssl vulnerabilities," in Proceedings of the 2014 Mobile Security Technologies Conference, 2014.