### Foundation and Funding
This work was supported by the Deutsche Forschungsgemeinschaft (DFG) under priority program SP 968/5-2 and the SFB 876. The permissions for the next access to such a resource are managed so that, after a timeout, read/write operations in a trap are handled. Pages are checksummed, and if a page is withdrawn, the checksum is used to verify the integrity of the page. This approach incurs a runtime overhead ranging from 25% to 53%. Although the authors did not evaluate the error-detection capabilities, we believe that due to the coarse page-granularity mechanism, many errors may go undetected.

### Page Retirement and Error Handling
Another technique for handling memory errors is to retire pages that have experienced errors [4], [33]. We consider this approach complementary, as it can be useful against permanent errors but does not prevent transient errors. 

### Software-based Memory Protection
#### Dynamic Heap Memory Allocation
Researchers have investigated the use of dynamic heap memory allocation to protect applications from memory errors. For example, Samurai [15] is a C/C++ dynamic memory allocator designed to protect critical data in unsafe languages. This approach modifies the memory allocator to use replication and updating of replicas, which helps in detecting and recovering from memory errors. However, it has limitations, such as no support for multi-threading and poor performance in protecting operating systems.

Chen et al. [14] describe a heap memory allocator for a Java virtual machine that adds checksums to each allocated object. These checksums are verified during execution, but their method shows less than 40% error detection, partly due to unnecessary checks.

#### Compiler-Based Approaches
Compilers are an appealing target for transforming software into fault-tolerant implementations. Chang et al. [34] apply AN-encoding to protect values, essentially doubling the storage space for encoded values. Even at this high level of redundancy, their approach reduces the windows of vulnerability and improves error detection. Fetzer et al. [16] use arithmetic coding (among other methods) to implement triple-redundant register values, which is more efficient compared to similar approaches.

Our work differs from these studies in that we use a mature general-purpose source-to-source compiler to focus on the implementation of EDMIERMs in the OS/application layer. This allows us to avoid "reinventing the wheel" and focus on the specific concerns of fault tolerance in the application layer.

### References
1. B. Schroeder, E. Pinheiro, and W-D. Weber, "DRAM errors in the wild: A large-scale field study," in Proceedings of the eleventh joint conference on Measurement and modeling of computer systems, SIGMETRICS '09, New York, NY, USA, 2009, pp. 193-204.
2. E. B. Nightingale, J. R. Douceur, and V. Orgovan, "Cycles, cells, and platters: An empirical analysis of hardware failures on a million consumer PCs," in ACM SIGOPS/EuroSys Int. Conf. on Computer Systems (EuroSys '11), New York, NY, USA, 2011, pp. 343-356.
3. A. A. Hwang, I. A. Stefanovici, and B. Schroeder, "Cosmic rays don't strike twice: Understanding the nature of DRAM errors and implications for system design," in 17th Int. Conf. on Arch. Support for Programming Languages and Operating Systems (ASPLOS '12), New York, NY, USA, 2012, pp. 111-122.
4. D. Tang, P. Carruthers, Z. Totari, and B. Schroeder, "Impact of deep submicron technology on dependability of VLSI circuits," in International Conference on Dependable Systems and Networks, DSN 2002, 2002, pp. 205-209.
5. D. Dopson, "SoftECC: A system for software memory integrity checking," Master's thesis, Massachusetts Institute of Technology, Sep. 2005.
6. R. Baumann, "Soft errors in advanced computer systems," IEEE Design & Test of Computers, vol. 22, no. 3, pp. 258-266, May 2005.
7. R. W. Hamming, "Error detecting and error correcting codes," Bell System Technical Journal, vol. 29, no. 2, pp. 147-160, 1950.
8. T. J. Dell, "A white paper on the benefits of chipkill-correct ECC for PC server main memory," IBM Whitepaper, 1997.
9. A. D. Fogle, D. Darling, and M. Erez, "Virtualized and flexible ECC for main memory," in 15th Int. Conf. on Arch. Support for Programming Languages and Operating Systems (ASPLOS '10), New York, NY, USA, 2010, pp. 397-408.
10. K. Pattabiraman, K. Sankaralingam, and M. Subramanian, "Samurai: Protecting critical data in unsafe languages," in Proceedings of the 3rd ACM SIGOPS/EuroSys European Conference on Computer Systems 2008, ser. Eurosys '08, New York, NY, USA, 2008, pp. 219-232.
11. C. Fetzer, U. Schiffel, and M. Hoffmann, "An-encoding: A versatile framework for building fault-tolerant software," in Proc. of the 28th International Conference on Computer Safety, Reliability, and Security, ser. SAFECOMP 2009, Berlin, Heidelberg: Springer-Verlag, 2009, pp. 283-296.
12. J. Chang, G. A. Reis, and D. I. August, "Automatic software-only recovery," in International Conference on Dependable Systems and Networks, DSN 2006, 2006, pp. 83-92.
13. A. Benso, S. Chiusano, P. Prinetto, and L. Tagliaferri, "A C/C++ source-to-source compiler for generating dependable software," in 11th International Conference on Dependable Systems and Networks (DSN), 2000, pp. 71-78.
14. M. Leeke and A. Jhumka, "An automated wrapper-based approach to the design of dependable software," in The Fourth International Conference on Dependability (DEPEND), IARIA, 2011.
15. F. Afonso, C. Silva, S. Montenegro, and A. Tavares, "Applying aspects and patterns for infrastructure components in a real-time embedded operating system," in Proceedings of the 6th workshop on Aspects, components, and patterns for infrastructure (ACP4IS '07), New York, NY, USA, 2007.
16. R. Alexandersson and J. Karlsson, "Fault injection-based assessment of aspect-oriented fault tolerance," in International Conference on Dependable Systems and Networks (DSN 2011), 2011, pp. 303-314.
17. Y. Aumann and M. A. Bender, "Fault tolerant data structures," in Proceedings of the 37th Annual Symposium on Foundations of Computer Science, FOCS '96, Washington, DC, USA, 1996, pp. 580-589.
18. K. Kant and A. Ravichandran, "Synthesizing robust data structuresâ€”an introduction," IEEE Trans. on Computers, vol. 39, no. 2, pp. 161-173, Feb. 1990.
19. B. Demsky and M. Rinard, "Automatic detection and repair of errors in data structures," in Proc. of the 18th annual ACM SIGPLAN Conference on Object-oriented programming, systems, languages, and applications, OOPS LA '03, New York, NY, USA, 2003, pp. 78-95.

**Note:** This text is authorized for limited use by Tsinghua University. Downloaded on March 19, 2021, at 07:53:00 UTC from IEEE Xplore. Restrictions apply.