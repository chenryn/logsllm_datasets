### Restricting an Owner’s Read or Write Access on the Client

Restricting an owner's read or write access on the client is not relevant to achieving true security. 

### 6. Related Work

Most distributed file systems, whether server-based [19, 20] or serverless [2, 40], do not address the concern of untrusted remote storage machines, either for privacy or data integrity. Similarly, content-publishing systems [13, 43] and content-indexing systems [18, 31, 34, 39, 45] do not prevent servers from reading user data or publishers from cluttering the namespace with garbage. Although our design does not prevent a writer from creating nonsensical entry names, it at least restricts these names to a legal syntax and protects their privacy.

The Cryptographic File System (CFS) [6] encrypts both file content and directory entry names on a client machine before writing them to a file server. Each entry name is encrypted using a conventional block cipher (DES [29]) and then encoded in an ASCII representation of its hexadecimal ciphertext value. This encoding technique is not surjective, so the server cannot enforce syntax. However, since CFS does not allow sharing between users, a writer can only harm themselves by writing a syntactically illegal name.

The Byzantine File System (BFS) [9] replaces an NFS server with a Byzantine-fault-tolerant replica group. Under the assumption that fewer than one-third of the servers are compromised (a condition that is provably necessary [23]), BFS guarantees the integrity of file data and directory metadata. However, it does not provide privacy for file or directory information.

SUNDR [26] is a file system that offers strong integrity and privacy guarantees against the server that provides data storage. It achieves this by placing full trust in all client machines, which implement the entirety of the file system semantics on top of block-level storage provided by the server. Since the server does not understand the blocks it stores, it cannot guarantee the validity of the written data. Additionally, without Byzantine replication, it is vulnerable to denial-of-service and data-destruction attacks. However, it ensures data consistency through all-or-nothing modification semantics.

OceanStore [21] is a distributed object store that uses Byzantine replica groups that understand the semantics of all object updates. It also employs cryptography to protect the privacy of user data, but the design is still evolving to harmonize the conflicting goals of privacy and full semantic understanding by the servers.

The Phalanx [25] replication system is an alternative to the BFT toolkit [9] on which our service design is based. Phalanx addresses the issue of "dishonest writers" by guaranteeing eventual consistency among replicas, but it does not enforce syntactical correctness.

Our directory service provides data privacy through cryptographic means. An alternative approach is to use secret sharing [37] to distribute information among the servers in a Byzantine replica group. The Cornell On-line Certification Authority [46] is an example of a system that combines Byzantine fault-tolerance with secret sharing to provide data privacy and integrity, specifically to protect the service’s private key. A similar approach could be used to address directory name integrity, perhaps using verifiable secret sharing [4] to enforce syntax requirements. However, storing different pieces of each name on different servers complicates the design because Byzantine replicas must be exactly identical.

There has been some research on performing operations on encrypted data. Song et al. [38] developed techniques for searching encrypted data. Convergent encryption [16] enables the identification and coalescing of duplicate files encrypted with different keys. Restrictive blind signatures [7] enable a signer to sign data it cannot read, while permitting the signer to constrain the structure of the data it signs.

The exclusive encryption process augments a standard block cipher to make it surjective. BEAR and LION [3] and BEAST [24] are block ciphers with variable block sizes and are surjective. Hasty Pudding [36] supports fractional block sizes. An advantage of our construction is that it employs any existing block cipher, some of which have withstood extensive cryptanalytic scrutiny [27].

Black and Rogaway [5] present three methods for encrypting an arbitrary finite domain using any existing block cipher. However, without the name-length restrictions introduced in § 5.1, our encryption domain is infinite.

### 7. Summary and Conclusions

In this paper, we presented the design of a secure, remote, file-system directory service. Our design provides privacy for directory entry names, not only from unauthorized readers but also from the servers implementing the directory service. It also ensures the persistence and integrity of directory data despite attempts at destruction or modification by unauthorized users or a small fraction of the implementing servers. Furthermore, it enforces syntactic legality, uniqueness, and view consistency of directory entry names.

Our service provides privacy through encryption and persistence and integrity through Byzantine fault-tolerance [9]. To enforce name syntax and uniqueness without divulging name information to the servers, we developed an encryption procedure called "exclusive encryption," which inherently prevents the encryption of syntactically illegal names and allows a server to check for case-insensitive name uniqueness by examining only ciphertext.

The exclusive encryption process includes several steps, each enabling a different type of exclusion. To exclude specific strings, it constructs a simple mapping from the set of allowed strings to the set of all strings. To exclude specific characters, it constructs a prefix encoding for all legal characters, amended with a special affix and terminus to maintain the required invariants. The coding can vary by index to support different restrictions at different character positions. For case-insensitive comparison, case information is extracted and encrypted separately.

Exclusive encryption requires a block cipher encryption function that is surjective. Although several new ciphers with this property have been proposed [3, 24, 36], we developed a construction that can employ (and derive security from) any existing block cipher. Alternatively, we can directly employ any existing block cipher (without our augmentation) by fixing the size of the name ciphertext. This alternative prevents the leakage of name length information but places a hard-to-characterize restriction on the length of entry names.

During our development, we discovered an intrinsic (and, we believe, previously unreported) problem with enforcing case-insensitive name uniqueness, given that the Unicode character set is not yet fully defined. We suggested several possible work-arounds, but the problem cannot be completely circumvented as long as the character set remains in flux.

Although our service's privacy guarantees apply only to directory entry names, we also considered obfuscation of access authorization information, which is reasonably straightforward, and structural information, which seems a priori tractable but for which we have not found a solution that satisfies all of our security and correctness properties. We regard the latter as an open problem.

### References

[1] A. Adya, W. J. Bolosky, M. Castro, R. Chaiken, G. Cermak, J. R. Douceur, J. Howell, J. R. Lorch, M. Theimer, R. P. Wattenhofer, “FARSITE: Federated, Available, and Reliable Storage for an Incompletely Trusted Environment”, 5th OSDI, Dec 2002.
[2] T. Anderson, M. Dahlin, J. Neefe, D. Patterson, D. Roselli, and R. Wang, “Serverless Network File Systems”, 15th SOSP, ACM, Dec 1995, pp. 109-126.
[3] R. Anderson and E. Biham, “Two Practical and Provably Secure Block Ciphers: BEAR and LION”, 3rd International Workshop on Fast Software Encryption, 1996, pp. 113-120.
[4] J. Benaloh, “Dense Probabilistic Encryption”, Selected Areas in Cryptography ’94, May 1994, pp. 120-128.
[5] J. Black and P. Rogaway, “Ciphers with Arbitrary Finite Domains”, RSA Data Security Conference, Cryptographer’s Track, LNCS 1872, Springer-Verlag, Feb 2002.
[6] M. Blaze, “A Cryptographic File System for Unix”, Ist Computer and Communications Security, ACM, Nov 1993.
[7] S. Brands, “Untraceable Off-Line Cash in Wallets with Observers”, CRYPTO ’93, 1993, pp. 302-318.
[8] R. Canneti and T. Rabin. “Optimal Asynchronous Byzantine Agreement”, Technical Report #92-15, Computer Science Department, Hebrew University, 1992.
[9] M. Castro and B. Liskov, “Practical Byzantine Fault Tolerance”, 3rd OSDI, USENIX, Feb 1999, pp. 173-186.
[10] M. Castro and B. Liskov, “Authenticated Byzantine Fault Tolerance Without Public-Key Cryptography”, Technical Memo MIT/LCS/TM-589, MIT LCS, Jun 1999.
[11] M. Castro and B. Liskov, “A Correctness Proof for a Practical Byzantine-Fault-Tolerant Replication Algorithm”, Technical Memo MIT/LCS/TM-590, MIT LCS, Jun 1999.
[12] M. Castro and B. Liskov, “Proactive Recovery in a Byzantine-Fault-Tolerant System”, 4th OSDI, USENIX, Oct 2000.
[13] I. Clarke, O. Sandberg, B. Wiley, and T. Hong, “Freenet: A Distributed Anonymous Information Storage and Retrieval System”, ICSI Workshop on Design Issues in Anonymity and Unobservability, Jul 2000.
[14] T. H. Cormen, C. E. Leiserson, R. L. Rivest, Introduction to Algorithms, MIT Press, 1990.
[15] C. D’Halluin, G. Bijnens, B. Preneel, V. Rijmen, “Equivalent keys of HPC”, Asiacrypt 99, LNCS 1716, Springer-Verlag, 1999.
[16] J. R. Douceur, A. Adya, W. J. Bolosky, D. Simon, M. Theimer, “Reclaiming Space from Duplicate Files in a Serverless Distributed File System”, ICDCS, Jul 2002.
[17] J. Garay and Y. Moses, “Fully Polynomial Byzantine Agreement for n ≥ 3t Processors in t+1 Rounds”, SIAM Journal of Computing, 27(1), 1998.
[18] Gnutella. http://gnutelladev.wego.com
[19] R. G. Guy, J. S. Heidemann, W. Mak, T. W. Page Jr., G. J. Popek, and D. Rothmeier, “Implementation of the Ficus Replicated File System”, USENIX ’90, Jun 1990, pp. 63-71.
[20] J. Howard, M. Kazar, S. Menees, D. Nichols, M. Satyanarayanan, R. Sidebotham, and M. West, “Scale and Performance in a Distributed File System,” Transactions on Computer Systems, ACM, 1988, pp. 51-81.
[21] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, and B. Zhao, “OceanStore: An Architecture for Global-Scale Persistent Storage”, 9th ASPLOS, ACM, Nov 2000.
[22] L. Lamport, “Time, Clocks, and the Ordering of Events in a Distributed System”, CACM, 21(7), 1978.
[23] L. Lamport, R. Shostak, and M. Pease, “The Byzantine Generals Problem”, TPLS 4(3), ACM, 1982.
[24] S. Lucks, “BEAST: A Fast Block Cipher for Arbitrary Blocksizes”, Communications and Multimedia Security, IFIP, 1996, pp. 144-153.
[25] D. Malkhi and M. Reiter, “Secure and Scalable Replication in Phalanx”, 17th SRDS, IEEE, Oct 1998, pp. 51-60.
[26] D. Mazières and D. Shasha, “Don't Trust Your File Server”, 8th HotOS, May 2001, pp. 113-118.
[27] A. J. Menezes, P. C. van Oorschot, S. A. Vanstone, Handbook of Applied Cryptography. CRC Press, 1997.
[28] Microsoft, “File Name Conventions”, MSDN, Apr 2002.
[29] National Bureau of Standards, “Data Encryption Standard”, FIPS Publication #46, NTIS, Apr 1977.
[30] National Bureau of Standards, “Data Encryption Standard Modes of Operation”, FIPS Publication #81, NTIS, Dec 1980.
[31] S. Ratnasamy, P. Francis, M. Handley, and R. Karp, “A Scalable Content-Addressable Network”, SIGCOMM 2001, ACM, Aug 2001.
[32] V. Razmov and D. R. Simon, “Practical Automated Filter Generation to Explicitly Enforce Implicit Input Assumptions”, 17th ACSAC, Dec 2001.
[33] R. L. Rivest, “All-Or-Nothing Encryption and The Package Transform”, Fast Software Encryption 1997, LNCS 1267, Springer-Verlag, 1997, pp. 210-218.
[34] A. Rowstron and P. Druschel, “Pastry: Scalable, Distributed Object Location and Routing for Large-Scale Peer-to-Peer Systems”, Middleware 2001, Nov 2001.
[35] F. Schneider, “Implementing Fault-Tolerant Services Using The State Machine Approach: A Tutorial”, Computing Surveys, ACM, 22(4), 1990.
[36] R. Schroeppel, “An overview of the Hasty Pudding Cipher”, AES-submission, http://www.cs.arizona.edu/~rcs/hpc, 1998.
[37] A. Shamir, “How to Share a Secret”, CACM, 22(11), pp. 612-613, 1979.
[38] D. X. Song, D. Wagner, and A. Perrig, “Practical Techniques for Searches on Encrypted Data”, Symposium on Security and Privacy, IEEE, 2000, pp. 44-55.
[39] I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, H. Balakrishnan, “Chord: A Scalable Peer-to-Peer Lookup Service for Internet Applications”, SIGCOMM 2001, ACM, Aug 2001.
[40] C. Thekkath, T. Mann, and E. Lee, “Frangipani: A Scalable Distributed File System”, 16th SOSP, ACM, Dec 1997, pp. 224-237.
[41] The Unicode Consortium, The Unicode Standard, Version 3.0, Addison-Wesley, Feb 2000.
[42] The Unicode Consortium, Unicode Standard Annex #28: Unicode 3.2, Mar 2002, http://www.unicode.org/unicode/reports/tr28/tr28-3
[43] M. Waldman, A. D. Rubin, and L. F. Cranor, “Publius: A Robust, Tamper-Evident Censorship-Resistant Web Publishing System”, 9th USENIX Security Symposium, Aug 2000, pp. 59-72.
[44] F. Yergeau, “UTF-8, a Transformation Format of ISO 10646”, RFC 2279, Jan 1998.
[45] B. Y. Zhao, J. Kubiatowicz, and A. D. Joseph, “Tapestry: An Infrastructure for Fault-Tolerant Wide-Area Location and Routing”, UCB Tech Report UCB/CSD-01-1141.
[46] L. Zhou, F. B. Schneider, and R. van Renesse, “COCA: A Secure Distributed On-line Certification Authority”, Technical Report 2000-1828, Department of Computer Science, Cornell University, Dec 2000.