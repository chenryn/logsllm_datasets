### Enforcement of Programmed Security Policies on Arbitrary Action Programs

In the current implementation, we monitor the committed instruction stream. However, PHMon can apply the same monitoring model to other data streams, such as execution information from different pipeline stages or cache access information. Extending PHMon to other data streams will require minimal modifications to the processor for collecting and transmitting these data streams to PHMon.

### Design Considerations: Number of Monitoring Units (MUs)

The number of MUs is a critical design decision in PHMon. The number of MUs directly impacts power and area overheads. If more events need to be monitored than the available number of MUs, time-multiplexing can be used (similar to HPCs). Note that multiple MUs may trigger actions simultaneously; in such cases, match packets are queued, with the MU having the lowest MU_id receiving the highest priority. Users can also set a custom priority order for MUs. Currently, PHMon does not include a dedicated local memory shared between MUs. For future work, we plan to incorporate a scratchpad memory or Content-Addressable Memory (CAM) in PHMon to reduce the number of outgoing accesses to the L1 data cache, thereby further reducing performance overhead.

### 7.2 Security Aspects

Regarding security capabilities, PHMon can, in principle, be extended to protect parts of the OS kernel. However, to achieve this protection against an attacker who has compromised the kernel, PHMon must ensure that the attacker cannot reprogram or disable the engaged protections. Since PHMon is configured from the kernel, providing such a guarantee is challenging against an adversary with the same privilege level as the defense mechanism. This challenge is common to most architecturally supported security features, such as page permissions or Intel's proposed CET. While PHMon can easily be configured to ensure the integrity of configuration information and control instructions, integrity alone is not sufficient to protect against a kernel-level adversary. For example, with integrity intact, attackers can still launch mimicry or confused deputy attacks to reprogram PHMon. "Sealing" configurations (as mentioned in Section 4.2) and protecting integrity will raise the bar against kernel-level adversaries, but a complete solution that protects an OS kernel with a kernel-controlled defense mechanism requires further study.

### 7.3 Application Aspects

Users can leverage multiple MUs to apply several monitoring policies simultaneously. For instance, one can use six MUs to apply all four use cases of PHMon presented in this paper. PHMon supports per-process monitoring, allowing an MU to be reconfigured to apply different policies based on the requirements of the running process. For example, an MU used for debugging a specific process can be reconfigured to prevent Heartbleed in any other process using OpenSSL.

### 8. Conclusion

We have presented the design, implementation, and evaluation of PHMon, a minimally invasive programmable hardware monitor. PHMon is capable of enforcing a variety of security policies at runtime and assisting with the detection of software bugs and security vulnerabilities. Our PHMon prototype includes a full FPGA implementation that interfaces the monitor with a RISC-V processor, along with the necessary OS and software support. We demonstrated the versatility and ease of adoption of PHMon through four use cases: a shadow stack, a hardware-accelerated fuzzing engine, information leak prevention, and a hardware-accelerated debugger. On average, our shadow stack incurs a 0.9% performance overhead, while our hardware-assisted AFL improves performance by up to 16×. An ASIC implementation of PHMon with two MUs has less than 5% and 13.5% power and area overheads, respectively.

### Acknowledgements

This material is based upon work supported by the National Science Foundation under Grant Nos. CNS-1916393 and CCF-1533663, and a Google Faculty Research Award.

### References

[1] ABADI, M., BUDIU, M., ERLINGSSON, Ú., AND LIGATTI, J. Control-flow integrity principles, implementations, and applications. ACM Transactions on Information and System Security (TISSEC) 13, 1 (2009).

[2] AIZATSKY, M., SEREBRYANY, K., CHANG, O., ARYA, A., AND WHITTAKER, M. Announcing OSS-Fuzz: continuous fuzzing for open source software. Google Testing Blog (2016).

[3] ANATI, I., GUERON, S., JOHNSON, S. P., AND SCARLATA, V. R. Innovative technology for CPU-based attestation and sealing. In Proceedings of the International Workshop on Hardware and Architectural Support for Security and Privacy (HASP) (2013).

[4] ANDERSON, J. P. Computer security technology planning study. Tech. Report ESD-TR-73-51, The Mitre Corporation, Air Force Systems Division, Hanscom AFB, Badford, 1972.

[5] ASANOVIĆ, K., AVIZIENIS, R., BACHRACH, J., BEAMER, S., BIANCOLIN, D., CELIO, C., COOK, H., DABBELT, D., HAUSER, J., IZRAELEVITZ, A., KARANDIKAR, S., KELLER, B., KIM, D., KOENIG, J., LEE, Y., LOVE, E., MAAS, M., MAGYAR, A., MAO, H., MORETO, M., OU, A., PATTERSON, D. A., RICHARDS, B., SCHMIDT, C., TWIGG, S., VO, H., AND WATERMAN, A. The Rocket Chip generator. Tech. Report, EECS Department, UC Berkeley (2016).

[6] AUSTIN, T. M., BREACH, S. E., AND SOHI, G. S. Efficient detection of all pointer and array access errors. In Proceedings of the Conference on Programming Language Design and Implementation (PLDI) (1994).

[7] BACHRACH, J., VO, H., RICHARDS, B., LEE, Y., WATERMAN, A., AVIŽIENIS, R., WAWRZYNEK, J., AND ASANOVIĆ, K. Chisel: constructing hardware in a Scala embedded language. In Proceedings of the Design Automation Conference (DAC) (2012).

[8] BROADWELL, P., HARREN, M., AND SASTRY, N. Scrash: a system for generating secure crash information. In Proceedings of the USENIX Security Symposium (2003).

[9] CARLINI, N., AND WAGNER, D. ROP is still dangerous: breaking modern defenses. In Proceedings of the USENIX Security Symposium (2014).

[10] CHEN, S., FALSAFI, B., GIBBONS, P., KOZUCH, M., MOWRY, T., TEODORESCU, R., AILAMAKI, A., FIX, L., GANGER, G., AND SCHLOSSER, S. Logs and lifeguards: accelerating dynamic program monitoring. Tech. Report IRP-TR-06-05, Intel Research (2006).

[11] CHEN, S., FALSAFI, B., GIBBONS, P. B., KOZUCH, M., MOWRY, T. C., TEODORESCU, R., AILAMAKI, A., FIX, L., GANGER, G. R., LIN, B., AND SCHLOSSER, S. W. Log-based architectures for general-purpose monitoring of deployed code. In Proceedings of the Workshop on Architectural and System Support for Improving Software Dependability (ASID) (2006).

[12] CHEN, S., KOZUCH, M., STRIGKOS, T., FALSAFI, B., GIBBONS, P. B., MOWRY, T. C., RAMACHANDRAN, V., RUWASE, O., RYAN, M., AND VLACHOS, E. Flexible hardware acceleration for instruction-grain program monitoring. In Proceedings of the International Symposium on Computer Architecture (ISCA) (2008).

[13] CHEN, Y.-Y., JAMKHEDKAR, P. A., AND LEE, R. B. A software-hardware architecture for self-protecting data. In Proceedings of the Conference on Computer and Communications Security (CCS) (2012).

[14] CHENG, Y., ZHOU, Z., YU, M., DING, X., AND ROBERT H., D. ROPecker: A generic and practical approach for defending against ROP attack. In Proceedings of the Network and Distributed System Security Symposium (NDSS) (2014).

[15] CLAUSE, J., DOUDALIS, I., ORSO, A., AND PRVULOVIC, M. Effective memory protection using dynamic tainting. In Proceedings of the International Conference on Automated Software Engineering (ASE) (2007).

[16] CORLISS, M. L., LEWIS, E. C., AND ROTH, A. DISE: a programmable macro engine for customizing applications. In Proceedings of the International Symposium on Computer Architecture (ISCA) (2003).

[17] CORLISS, M. L., LEWIS, E. C., AND ROTH, A. Using DISE to protect return addresses from attack. ACM SIGARCH Computer Architecture News 33, 1 (2005).

[18] CRANDALL, J. R., AND CHONG, F. T. Minos: control data attack prevention orthogonal to memory model. In Proceedings of the International Symposium on Microarchitecture (MICRO) (2004).

[19] DALTON, M., KANNAN, H., AND KOZYRAKIS, C. Raksha: a flexible information flow architecture for software security. Proceedings of the International Symposium on Computer Architecture (ISCA) (2007).

[20] DANG, T. H., MANIATIS, P., AND WAGNER, D. The performance cost of shadow stacks and stack canaries. In Proceedings of the Symposium on Information, Computer and Communications Security (ASIACCS) (2015).

[21] DAS, S., WERNER, J., ANTONAKAKIS, M., POLYCHRONAKIS, M., AND MONROSE, F. SoK: the challenges, pitfalls, and perils of using hardware performance counters for security. In Proceedings of the Symposium on Security and Privacy (S&P) (2018).

[22] DAVI, L., SADEGHI, A.-R., AND WINANDY, M. ROPdefender: a detection tool to defend against return-oriented programming attacks. In Proceedings of the Symposium on Information, Computer and Communications Security (ASIACCS) (2011).

[23] DELSHADTEHRANI, L., ELDRIDGE, S., CANAKCI, S., EGLE, M., AND JOSHI, A. Nile: a programmable monitoring coprocessor. Computer Architecture Letters (CAL) 17, 1 (2018).

[24] DEMME, J., MAYCOCK, M., SCHMITZ, J., TANG, A., WAKSMAN, A., SETHUMADHAVAN, S., AND STOLFO, S. On the feasibility of online malware detection with performance counters. In Proceedings of the International Symposium on Computer Architecture (ISCA) (2013).

[25] DENG, D. Y., LO, D., MALYSA, G., SCHNEIDER, S., AND SUH, G. E. Flexible and efficient instruction-grained run-time monitoring using on-chip reconfigurable fabric. In Proceedings of the International Symposium on Microarchitecture (MICRO) (2010).

[26] DENG, D. Y., AND SUH, G. E. High-performance parallel accelerator for flexible and efficient run-time monitoring. In Proceedings of the International Conference on Dependable Systems and Networks (DSN) (2012).

[27] DEVIETTI, J., BLUNDELL, C., MARTIN, M. M., AND ZDANCEWIC, S. Hardbound: architectural support for spatial safety of the C programming language. In Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS) (2008).

[28] DHAWAN, U., HRITCU, C., RUBIN, R., VASILAKIS, N., CHIRICESCU, S., SMITH, J. M., KNIGHT JR, T. F., PIERCE, B. C., AND DEHON, A. Architectural support for software-defined metadata processing. In Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS) (2015).

[29] DING, R., QIAN, C., SONG, C., HARRIS, B., KIM, T., AND LEE, W. Efficient protection of path-sensitive control security. In Proceedings of the USENIX Security Symposium (2017).

[30] FYTRAKI, S., VLACHOS, E., KOCBERBER, O., FALSAFI, B., AND GROT, B. FADE: a programmable filtering accelerator for instruction-grain monitoring. In Proceedings of the International Symposium on High Performance Computer Architecture (HPCA) (2014).

[31] GE, X., CUI, W., AND JAEGER, T. GRIFFIN: guarding control flows using Intel processor trace. In Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS) (2017).

[32] GHOSE, S., GILGEOUS, L., DUDNIK, P., AGGARWAL, A., AND WAXMAN, C. Architectural support for low overhead detection of memory violations. In Proceedings of the Conference on Design, Automation and Test in Europe (DATE) (2009).

[33] GOOGLE. OSS-Fuzz: five months later, and rewarding projects. https://opensource.googleblog.com/2017/05/oss-fuzz-five-months-later-and.html/, 2017.

[34] GRAHAM-CUMMING, J. Searching for the prime suspect: how heartbleed leaked private keys. https://blog.cloudflare.com/searching-for-the-prime-suspect-how-heartbleed-leaked-private-keys/, 2015.

[35] GREATHOUSE, J. L., XIN, H., LUO, Y., AND AUSTIN, T. A case for unlimited watchpoints. In Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS) (2012).

[36] GUTHAUS, M. R., RINGENBERG, J. S., ERNST, D., AUSTIN, T. M., MUDGE, T., AND BROWN, R. B. MiBench: a free, commercially representative embedded benchmark suite. In Proceedings of the International Workshop on Workload Characterization (WWC) (2001).

[37] HENNING, J. L. SPEC CPU2000: measuring CPU performance in the new millennium. Computer 33, 7 (2000).

[38] HENNING, J. L. SPEC CPU2006 benchmark descriptions. Special Interest Group on Computer Architecture News (SIGARCH) 34, 4 (2006).

[39] HU, H., QIAN, C., YAGEMANN, C., CHUNG, S. P. H., HARRIS, W. R., KIM, T., AND LEE, W. Enforcing unique code target property for control-flow integrity. In Proceedings of the Conference on Computer and Communications Security (CCS) (2018).

[40] KHASAWNEH, K. N., OZSOY, M., DONOVICK, C., ABU-GHAZALEH, N., AND PONOMAREV, D. Ensemble learning for low-level hardware-supported malware detection. In Proceedings of the International Symposium on Recent Advances in Intrusion Detection (RAID) (2015).

[41] KIM, Y., DALY, R., KIM, J., FALLIN, C., LEE, J. H., LEE, D., WILKERSON, C., LAI, K., AND MUTLU, O. Flipping bits in memory without accessing them: an experimental study of DRAM disturbance errors. In Proceedings of the International Symposium on Computer Architecture (ISCA) (2014).

[42] LARABEL, M. Intel MPX support will be removed from Linux. https://www.phoronix.com/scan.php?page=news_item&px=Intel-MPX-Kernel-Removal-Patch/, 2018.

[43] LARABEL, M. Intel MPX support removed from GCC 9. https://www.phoronix.com/scan.php?page=news_item&px=MPX-Removed-From-GCC9/, 2018.

[44] LEE, Y., WATERMAN, A., AVIZIENIS, R., COOK, H., SUN, C., STOJANOVIĆ, V., AND ASANOVIĆ, K. A 45nm 1.3 GHz 16.7 double-precision GFLOPS/W RISC-V processor with vector accelerators. In Proceedings of the European Solid State Circuits Conference (ESSCIRC) (2014).

[45] LI, P. S., IZRAELEVITZ, A. M., AND BACHRACH, J. Specification for the FIRRTL language. Tech. Report UCB/EECS-