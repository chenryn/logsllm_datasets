### References

1. **Metasploit**. <http://www.metasploit.com>.

2. **Arkeia Backup Client Type 77 Overflow (win32)**. <http://www.metasploit.com/modules/exploit/windows/arkeia/type77>, visited in January 2013.

3. **Conficker Worm Using Metasploit Payload to Spread**. <http://blogs.mcafee.com/mcafee-labs/conficker-worm-using-metasploit-payload-to-spread>, visited in January 2013.

4. **Top Vulnerability Exploit Tools**. <http://sectools.org/tag/sploits>, visited in January 2013.

5. **Artzi, S., Kie, A., Dolby, J., Ernst, M. D., Kiezun, A., Tip, F., Dig, D., and Paradkar, A.** Finding Bugs in Dynamic Web Applications. In *Proceedings of the 2008 International Symposium on Software Testing and Analysis (ISSTA’08)*, pp. 261–272.

6. **Avgerinos, T., Cha, S. K., Lim, B., Hao, T., and Brumley, D.** AEG: Automatic Exploit Generation. In *Proceedings of the Network and Distributed System Security Symposium (NDSS’11)*.

7. **Boonstoppel, P., Cadar, C., and Engler, D.** RWset: Attacking Path Explosion in Constraint-Based Test Generation. In *Proceedings of the 14th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS’08)*, pp. 351–366.

8. **Brumley, D., Newsome, J., and Song, D.** Towards Automatic Generation of Vulnerability-Based Signatures. In *Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06)*, pp. 2–16.

9. **Brumley, D., Wang, H., Jha, S., and Song, D.** Creating Vulnerability Signatures Using Weakest Preconditions. In *Proceedings of the 20th IEEE Computer Security Foundations Symposium (CSF’07)*, pp. 311–325.

10. **Bruni, A., and Disney, T.** A Peer Architecture for Lightweight Symbolic Execution. Technical Report, UC Santa Cruz, 2011.

11. **Caballero, J., Liang, Z., Poosankam, P., and Song, D.** Towards Generating High Coverage Vulnerability-Based Signatures with Protocol-Level Constraint-Guided Exploration. In *Proceedings of the 12th International Symposium on Recent Advances in Intrusion Detection (RAID’09)*, pp. 161–181.

12. **Cadar, C., Ganesh, V., and Pawlowski, P.** EXE: Automatically Generating Inputs of Death. In *Proceedings of the 13th ACM Conference on Computer and Communications Security (CCS’06)*, pp. 322–335.

13. **Chaudhuri, A., and Foster, J. S.** Symbolic Security Analysis of Ruby-on-Rails Web Applications. In *Proceedings of the 17th ACM Conference on Computer and Communications Security (CCS’10)*, pp. 585–594.

14. **Cho, C., Babic, D., and Poosankam, P.** MACE: Model-Inference-Assisted Concolic Exploration for Protocol and Vulnerability Discovery. In *Proceedings of the 20th USENIX Security Symposium (2011)*.

15. **Costa, M., Crowcroft, J., and Castro, M.** Vigilante: End-to-End Containment of Internet Worms. In *Proceedings of the 20th ACM Symposium on Operating Systems Principles (SOSP’05)*, pp. 133–147.

16. **Cui, W., Peinado, M., Wang, H. J., and Locasto, M. E.** ShieldGen: Automatic Data Patch Generation for Unknown Vulnerabilities with Informed Probing. In *Proceedings of the 2007 IEEE Symposium on Security and Privacy (S&P’07)*, pp. 252–266.

17. **Godefroid, P., and Klarlund, N.** DART: Directed Automated Random Testing. In *Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI’05)*, pp. 213–223.

18. **Godefroid, P., Levin, M. Y., and Berkeley, U. C.** Automated Whitebox Fuzz Testing. In *Proceedings of Network and Distributed Systems Security (NDSS’08)*.

19. **Godefroid, P., and Luchaup, D.** Automatic Partial Loop Summarization in Dynamic Test Generation. In *Proceedings of the 2011 International Symposium on Software Testing and Analysis (ISSTA’11)*, pp. 23–33.

20. **Kiezun, A., Ganesh, V., Guo, P. J., Hooimeijer, P., and Ernst, M. D.** Hampi: A Solver for String Constraints. In *Proceedings of the 18th International Symposium on Software Testing and Analysis (ISSTA’09)*, pp. 105–116.

21. **Kim, H., and Karp, B.** Autograph: Toward Automated, Distributed Worm Signature Detection. In *Proceedings of the 13th USENIX Security Symposium (2004)*, pp. 271–286.

22. **King, J. C.** Symbolic Execution and Program Testing. *Communications of the ACM* 19, 7 (1976), pp. 385–394.

23. **Kuznetsov, V., Kinder, J., Bucur, S., and Candea, G.** Efficient State Merging in Symbolic Execution. In *Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI’12)*, pp. 193–204.

24. **Li, Z., Sanghi, M., Chavez, B., Chen, Y., and Kao, M.** Hamsa: Fast Signature Generation for Zero-day Polymorphic Worms with Provable Attack Resilience. In *Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06)*, pp. 32–47.

25. **Moser, A., Kruegel, C., and Kirda, E.** Exploring Multiple Execution Paths for Malware Analysis. In *Proceedings of the 2007 IEEE Symposium on Security and Privacy (S&P’07)*, vol. 0, pp. 231–245.

26. **Newsome, J., Karp, B., and Song, D.** Polygraph: Automatically Generating Signatures for Polymorphic Worms. In *Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05)*, pp. 226–241.

27. **Noto-Moniz, A.** Software Agitation of a Dynamically Typed Language. Technical Report, Worcester Polytechnic Institute, 2012.

28. **Qi, D., Nguyen, H. D., and Roychoudhury, A.** Path Exploration Based on Symbolic Output. In *Proceedings of the 19th ACM SIGSOFT Symposium on Foundations of Software Engineering (FSE’11)*, pp. 278–288.

29. **Ragan, S.** Java Zero-Day Added to Blackhole Exploit Kit and Metasploit. <http://www.securityweek.com/java-zero-day-added-blackhole-exploit-kit-and-metasploit>, visited in August 2012.

30. **Ramirez-Silva, E., and Dacier, M.** Empirical Study of the Impact of Metasploit-Related Attacks in 4 Years of Attack Traces. In *Proceedings of the 12th Asian Computing Science Conference on Advances in Computer Science: Computer and Network Security (ASIAN’07)*, pp. 198–211.

31. **Costa, M., Castro, M., and Zhou, L.** Bouncer: Securing Software by Blocking Bad Input. In *Proceedings of the Twenty-First ACM SIGOPS Symposium on Operating Systems Principles (SOSP’07)*, pp. 117–130.

32. **Saxena, P., Akhawe, D., Hanna, S., Mao, F., McCamant, S., and Song, D.** A Symbolic Execution Framework for JavaScript. In *Proceedings of the 2010 IEEE Symposium on Security and Privacy (S&P’10)*, pp. 513–528.

33. **Saxena, P., Poosankam, P., McCamant, S., and Song, D.** Loop-Extended Symbolic Execution on Binary Programs. In *Proceedings of the 18th International Symposium on Software Testing and Analysis (ISSTA’09)*, pp. 225–236.

34. **Schwartz, E. J., Avgerinos, T., and Brumley, D.** All You Ever Wanted to Know about Dynamic Taint Analysis and Forward Symbolic Execution (but Might Have Been Afraid to Ask). In *Proceedings of the 2010 IEEE Symposium on Security and Privacy (S&P’10)*, pp. 317–331.

35. **Sen, K., and Agha, G.** CUTE and jCUTE: Concolic Unit Testing and Explicit Path Model-Checking Tools. In *Proceedings of the 18th International Conference on Computer Aided Verification (CAV’06)*, pp. 419–423.

36. **Song, D., Brumley, D., Yin, H., and Caballero.** BitBlaze: A New Approach to Computer Security via Binary Analysis. In *Proceedings of the 4th International Conference on Information Systems Security (ICISS’08)*, pp. 1–25.

37. **SophosLabs.** Exploring the Blackhole Exploit Kit. <http://nakedsecurity.sophos.com/exploring-the-blackhole-exploit-kit>, visited in January 2013.

38. **Xie, T., Tillmann, N., De Halleux, J., and Schulte, W.** Fitness-Guided Path Exploration in Dynamic Symbolic Execution. In *IEEE/IFIP International Conference on Dependable Systems & Networks (DSN’09)*, pp. 359–368.

39. **Xie, Y., and Aiken, A.** Static Detection of Security Vulnerabilities in Scripting Languages. In *Proceedings of the 15th USENIX Security Symposium (2006)*, pp. 179–192.

### Appendix A: Example of Rule Comparison

#### Listing 4: Code Snippet from a Metasploit Attack Script (apache mod rewrite ldap.rb)

```ruby
def exploit
  ...
  trigger = '/ldap://localhost/%3fA%3fA%3fCCCCCCCCCC%3fC%3f%90' # Sending payload
  send_request_raw({
    'uri' => '/' + rewrite_path() + trigger + shellcode(),
    'version' => '1.0'
  }, 2)
  ...
end
```

#### Listing 5: MetaSymploit Rule (MR) for an Attack Payload of apache mod rewrite ldap.rb

```plaintext
alert tcp any any -> any 80 (
  msg:"Metasploit apache_mod_rewrite_ldap, Target:[Apache 1.3/2.0/2.2], Behavior:[HTTP request with Vul-specific bytes]";
  content:"GET";
  content:"/ldap|3A|//localhost/%3fA%3fA%3fCCCCCCCCCC%3fC%3f%90";
  content:"|20|HTTP/1.0|0D 0A|Host|3A 20|";
  reference:cve,2006-3747;
  sid:5000539; rev:0;)
```

#### Listing 6: Official Snort Rule (OR) Related to the Metasploit Attack Script in Listing 4

```plaintext
alert tcp $EXTERNAL_NET any -> $HOME_NET 80 (
  msg:"WEB-MISC Apache mod_rewrite buffer overflow attempt";
  content:"GET";
  content:"ldap|3A|";
  pcre:"/ldap\x3A\x2F\x2F[^\x0A]*(%3f|\x3F)[^\x0A]*(%3f|\x3F)[^\x0A]*(%3f|\x3F)[^\x0A]*(%3f|\x3F)/smi";
  reference:cve,2006-3747;
  sid:11679; rev:5;)
```

### Explanation

In Appendix A, we provide a simple example to illustrate the comparison between an official Snort rule containing general patterns and a MetaSymploit rule containing specific patterns.

- **Listing 4** shows a code snippet from the `exploit` method in the Metasploit attack script `apache mod rewrite ldap.rb`. The script launches the attack by sending an HTTP GET request packet that contains a special URI byte string to trigger the vulnerability. The `send_request_raw` method is a Metasploit HTTP output API method that is symbolically extended by MetaSymploit to dump the entire payload packet.

- **Listing 5** is a MetaSymploit Rule (MR) based on the attack payload composed by the script. It contains constant byte string patterns, especially the vulnerability-triggering string, which can identify the specific payload packet.

- **Listing 6** is the corresponding Official Snort Rule (OR) based on CVE matching. It contains a regular expression (regex) pattern generalized by security analysts based on large amounts of samples.

According to the Snort rule manual, a rule can have multiple content byte string patterns. By default, given a packet, Snort searches these content patterns in order. A rule can also have one PCRE regex pattern, and Snort searches the entire packet for the PCRE pattern.

In the example rules, the first content in both rules share the same pattern "GET". The second content of the MR captures the triggering string, which includes the second content of the OR "ldap|3A|" as a substring. Furthermore, the second content of the MR is also matched by the general PCRE regex of the OR. Additionally, there is another content in the MR that captures the HTTP protocol version of the packet.

Although both rules can detect the attack payload of this script, the MR has multiple specific patterns that can precisely pinpoint the attacks launched by this script, thus having a very low false-positive rate compared to the general OR. In practice, the MRs can help identify what attack scripts are used by attackers, providing a way for the defense side to profile and obtain more knowledge of the attacker side.