### 3.30
1.85  
2.83  
1. I7  
1.54  
0.88  

### Fault Injection Campaigns for EDM Removal

To determine which Error Detection Mechanisms (EDMs) to remove, we conducted four fault injection campaigns. The first three campaigns evaluated the fail-silence coverage when removing one of the three EDMs with the highest ordered overlap: Coding, Deadline, and Seman. The fourth campaign assessed the fail-silence coverage when removing Vmemory, where the ordered overlap metric is skewed because the execution is necessarily stopped after an error is detected. The following fail-silence coverages were obtained from campaigns with 3,000 activated faults:
- 97.5% with all EDMs except Coding
- 98.3% with all EDMs except Deadline
- 98.7% with all EDMs except Seman
- 98.9% with all EDMs except Vmemory

**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021 at 04:06:05 UTC from IEEE Xplore. Restrictions apply.**

### Selection of EDMs for Removal

Based on these results, we chose to remove the EDM that had the smallest impact on fail-silence coverage, which is Vmemory. Additionally, we removed EDMs Timeout, Automaton, Arrival, OS, and ECI, as their percentage of first error detections was less than 1%. A campaign with only these EDMs removed showed a fail-silence coverage of 98.7%.

The following table evaluates the new set of EDMs: Coding, Robust, CodingStatic, Deadline, Callgraph, Structure, Seman, and CPU.

| Metric | All EDMs | Reduced Set of EDMs |
| --- | --- | --- |
| Fail-silence Coverage | 99.07% | 98.34% |
| Confidence Interval (95%) | [98.80%, 99.33%] | [97.98%, 98.70%] |
| Average Latency (extreme 10% excluded) | x 1.8 | x 6.7 |
| Time Overhead | x 1.2 | x 1.4 |
| Overall Memory Overhead | x 1.1 | x 1.0 |

With the reduced set of EDMs, the time overhead due to error detection decreased by 32%, and the memory overhead decreased by 45%, with only a slight decrease in fail-silence coverage (0.73%).

### Related Work

There are numerous hardware and software methods for error detection, which can be categorized into two types: redundancy-based and behavior-based EDMs.

**Redundancy-based EDMs** use redundancy in data, hardware, or software to detect errors. Examples include error-detecting/correcting codes, checksums, robust data structures, temporal or lock-step replication of processes, recovery blocks, and N-version programming.

**Behavior-based EDMs** detect errors by identifying deviations from a reference behavior. This category includes mechanisms that verify system timing and control flow, such as watchdog timers, watchdog processors, and software-implemented control flow checking. It also includes mechanisms that check data validity, such as value domain verification and Algorithm-Based Fault Tolerance (ABFT).

This study uses both categories of mechanisms but focuses on software-implemented ones to avoid the financial cost of dedicated hardware. The chosen EDMs do not require modifications to the compiler or operating system and can be applied to different types of software, with the exception of EDM Seman.

Fault injection has been used in various studies to evaluate system dependability. Some studies analyze failure modes in general, while others focus on the coverage of the fail-silence assumption.

- **Damn [6]** compared EDMs in a real-time operating system, showing a higher percentage of first detections by hardware (68000 processor) than in our results, but similar percentages for timing checks.
- **Salles et al. [17]** proposed an approach using reflexivity and fault-containment wrappers to contain the effects of faults in microkernels, achieving fail-silence coverage ranging from 97.7% to 99.5%.
- **Madeira and Silva [12]** evaluated fail-silence coverage in systems without hardware and software replication, achieving 98.1% on a 68K and 99.6% on a Z80.
- **Fuchs [7]** evaluated the Mars system using SWIFI, achieving 92% coverage with hardware, operating system, and CRCs, and 100% with temporal replication.

### Conclusion

This paper presents an evaluation of the fail-silent behavior of computers executing a run-time support for hard real-time dependable applications built from COTS components. The main result is a fail-silence coverage of up to 99.1% when using the full set of EDMs, compared to 80.6% without any EDMs. However, this coverage is not sufficient for safety-critical systems. The introduction of EDMs increases CPU and memory costs, with the time spent in the run-time support multiplied by a factor of 2.5 and memory size by a factor of 1.8. The average detection latency is several milliseconds.

A study of the overlap between EDMs showed that some can be removed, reducing the memory and CPU costs (x 1.1 and x 1.7) with only a slight decrease in fail-silence coverage (98.3%).

Future work could include comparing our EDMs with hardware-implemented ones on the same platform and designing a general methodology for selecting sets of EDMs.

### Acknowledgements

This work is partially supported by the French Department of Defense (DGA/DSP), grant #98.34.375.00.470.75.65. The authors thank D. Powell and the anonymous reviewers for their valuable comments.

### References

[1] E. Anceaume, G. Cabillic, P. Chevochot, and I. Puaut. A flexible run-time support for distributed dependable hard real-time applications. In Proceedings of the 2nd International Symposium on Object-oriented Real-time Distributed Computing, pages 310-319, St Malo, France, May 1999.

[2] J. Arlat, M. Aguera, Y. Crouzet, J. Fabre, E. Lartins, and D. Powell. Experimental evaluation of the fault tolerance of an atomic multicast system. IEEE Transactions on Reliability, 39(4):455-467, Oct. 1990.

[3] J. H. Barton, E. W. Czczek, Z. Z. Segall, and D. P. Siewiorek. Fault injection experiments using FIAT. IEEE Transactions on Computers, 39(4):575-581, Apr. 1990.

[4] J. Carreira, H. Madeira, and J. G. Silva. Xception: A technique for the experimental evaluation of dependability in modern computers. IEEE Transactions on Software Engineering, 24(2):125-136, Feb. 1998.

[5] P. Chevochot and I. Puaut. Experimental evaluation of the fail-silent behavior of a distributed real-time run-time support built from COTS components. Technical Report 1370, IRISA, Oct. 2000. ftp://ftp.irisa.fr/techreports/2000/PI-1370.ps.gz.

[6] A. Damm. The effectiveness of software error-detection mechanisms in real-time operating systems. In Proc. of the 16th International Symposium on Fault-Tolerant Computing Systems, pages 171-176, Vienna, Austria, June 1986.

[7] E. Fuchs. Validating the fail-silence assumption of the MARS architecture. In Proc. of the 6th Dependable Computing for Critical Applications Conference, pages 225-247, Garmisch-Partenkirchen, Germany, 1998.

[8] M. Hiller. Executable assertions for detecting data errors in embedded control systems. In Proc. of the 2000 International Conference on Dependable Systems and Networks (FTCS-30 and DCCA-8), pages 24-33, New York, USA, June 2000.

[9] K. H. Huang and J. Abraham. Algorithm-based fault-tolerance for matrix operations. IEEE Transactions on Computers, 33(6):518-528, June 1984.

[10] G. Kanawati, N. Kanawati, and D. Tang. FERRARI: A flexible software-based fault and error injection system. IEEE Transactions on Computers, 44(2):248-260, 1995.

[11] P. Lala. Fault Tolerant and Fault Testable Hardware Design. Prentice Hall, 1985.

[12] H. Madeira and J. G. Silva. Experimental evaluation of the fail-silent behavior in computers without error masking. In Proc. of the 24th International Symposium on Fault-Tolerant Computing Systems, pages 350-359, Austin, USA, June 1994.

[13] A. Mahmood and E. J. McCluskey. Concurrent error detection using watchdog processors - a survey. IEEE Transactions on Computers, 37(2):160-174, Feb. 1988.

[14] G. Miremadi, J. Karlsson, U. Gunnetlo, and J. Torin. Two software techniques for on-line error detection. In Proc. of the 22nd International Symposium on Fault-Tolerant Computing Systems, pages 328-335, Boston, USA, June 1992.

[15] D. Powell, G. Bonn, D. Seaton, P. Verissimo, and F. Waeselynck. The delta-4 approach to dependability in open distributed computing systems. In Proc. of the 18th International Symposium on Fault-Tolerant Computing Systems, pages 246-251, Tokyo, Japan, June 1988.

[16] M. Z. Reza, H. Madeira, and J. G. Silva. Experimental evaluation of the fail-silent behavior in programs with consistency checks. In Proc. of the 26th International Symposium on Fault-Tolerant Computing Systems, pages 394-403, Sendai, Japan, June 1996.

[17] F. Salles, M. R. Moreno, J. Fabre, and J. Arlat. Metakernels and fault containment wrappers. In Proc. of the 29th International Symposium on Fault-Tolerant Computing Systems, pages 22-29, Madison (WI), June 1999.

[18] A. Steininger and C. Scherrer. On finding an optimal combination of error detection mechanisms based on results of fault injection experiments. In Proc. of the 27th International Symposium on Fault-Tolerant Computing Systems, pages 238-247, Seattle, WA, USA, June 1997.

**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021 at 04:06:05 UTC from IEEE Xplore. Restrictions apply.**