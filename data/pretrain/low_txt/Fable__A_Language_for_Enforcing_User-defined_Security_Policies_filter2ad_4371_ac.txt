### 1. Introduction to FABLE's Static Semantics

FABLE (Flexible Access Control Language for Enforcing Security) is a language designed to enforce security policies in a flexible and type-safe manner. This section provides an overview of the static semantics of FABLE, including its type system, well-formedness judgments, and decision procedures for type convertibility.

#### 1.1. Types and Contexts

- **Types (t)**: 
  - `·` (empty type)
  - `x:t` (type variable)
  - `α` (type parameter)
  - `e (cid:31) p` (pattern matching type)
  - `Γ1, Γ2` (context concatenation)

- **Type Contexts (Γ)**:
  - `·` (empty context)
  - `(x (cid:55)→ e)` (variable binding)
  - `(α (cid:55)→ t)` (type parameter binding)
  - `σ1, σ2` (context concatenation)

- **Colors**:
  - `pol` (policy)
  - `app` (application)

#### 1.2. Type Rules

- **Integer Type (T-INT)**:
  - If `Γ (cid:96)c n : int`, then `n` is an integer.

- **Function Type (T-ABS)**:
  - If `Γ, x:t (cid:96)c e : t'` and `Γ (cid:96) t`, then `Γ (cid:96)c λ x:t.e : (x:t) → t'`.

- **Fixed Point (T-FIX)**:
  - If `Γ, f:t (cid:96)c v : t`, then `Γ (cid:96)c fix f:t.v : t`.

- **Type Abstraction (T-TAB)**:
  - If `Γ, α (cid:96)c e : t'`, then `Γ (cid:96)c Λα.e : ∀α.t'`.

- **Type Application (T-APP)**:
  - If `Γ (cid:96)c e1 : (x:t1) → t2` and `Γ (cid:96)c e2 : t1`, then `Γ (cid:96)c e1 e2 : (x (cid:55)→ e2)t2`.

- **Variable (T-VAR)**:
  - If `x:t ∈ Γ`, then `Γ (cid:96)c x : t`.

- **Type Instantiation (T-TAP)**:
  - If `Γ (cid:96)c e : ∀α.t'` and `Γ (cid:96) t`, then `Γ (cid:96)c e[t] : (α (cid:55)→ t)t'`.

- **Label (T-LAB)**:
  - If `Γ (cid:96)c ei : lab`, then `Γ (cid:96)c C((cid:126)e) : lab∼C((cid:126)e)`.

- **Pattern Matching (T-MATCH)**:
  - If `Γ (cid:96)c ei : t` and `pn = x` where `x (cid:54)∈ dom(Γ)`, then `Γ (cid:96)c match e with p1 ⇒ e1 . . . pn ⇒ en : t`.

- **Hide and Show (T-HIDE, T-SHOW)**:
  - If `Γ (cid:96)c e : lab∼ e'` and `Γ (cid:96)c e : lab`, then `Γ (cid:96)c e : lab∼ e`.

- **Unlabeling (T-UNLAB)**:
  - If `Γ (cid:96)pol e : t{e'}`, then `Γ (cid:96)pol {◦}e : t`.

- **Relabeling (T-RELAB)**:
  - If `Γ (cid:96)pol e : t` and `Γ (cid:96)pol e' : lab`, then `Γ (cid:96)pol {e'}e : t{e'}`.

- **Policy (T-POL)**:
  - If `Γ (cid:96)c e : t`, then `Γ (cid:96)c ([e]) : t`.

- **Type Conversion (T-CONV)**:
  - If `Γ (cid:96)c e : t` and `Γ (cid:96) t ∼= t'`, then `Γ (cid:96)c e : t'`.

#### 1.3. Well-Formedness Judgments

- **Integer (K-INT)**:
  - `Γ (cid:96) int` states that `int` is well-formed in `Γ`.

- **Type Variable (K-TVAR)**:
  - If `α ∈ Γ`, then `Γ (cid:96) α` states that `α` is well-formed in `Γ`.

- **Label (K-LAB)**:
  - `Γ (cid:96) lab` states that `lab` is well-formed in `Γ`.

- **Slab (K-SLAB)**:
  - If `Γ (cid:96)pol e : lab`, then `Γ (cid:96) lab∼ e` states that `lab∼ e` is well-formed in `Γ`.

- **Lab Type (K-LABT)**:
  - If `Γ (cid:96) t` and `Γ (cid:96)pol e : lab`, then `Γ (cid:96) t{e}` states that `t{e}` is well-formed in `Γ`.

- **Function (K-FUN)**:
  - If `Γ (cid:96) t1` and `Γ, x:t1 (cid:96) t2`, then `Γ (cid:96) (x:t1) → t2` states that `(x:t1) → t2` is well-formed in `Γ`.

- **All (K-ALL)**:
  - If `Γ, α (cid:96) t`, then `Γ (cid:96) ∀α.t` states that `∀α.t` is well-formed in `Γ`.

### 2. Decision Procedures for Type Convertibility

FABLE uses a combination of techniques to partially decide type convertibility:

- **Type Information**: If `l` is free in a type and the declared type of `l` is `lab∼e`, substitute `e` for `l`.
- **Context Assumption**: If the type context includes `l (cid:31) e`, substitute `l` with `e`.
- **Heuristic Pattern Matching**: Use a simple heuristic to determine which branch to take when pattern matching expressions with free variables.

These techniques are sufficient for all examples in this paper and our SEWIKI and SEWINESTORE applications. For more details, see our technical report [38].

### 3. Operational Semantics

FABLE's operational semantics define small-step reduction relations for application and policy expressions. The evaluation contexts `Ec` are parameterized by the color of the expression (either `app` or `pol`).

- **Application Reduction (E-APP)**:
  - `(λ x:t.e) vc c(cid:32) (x (cid:55)→ vc)e`

- **Type Application (E-TAP)**:
  - `(Λα.e) [t] c(cid:32) (α (cid:55)→ t)e`

- **Contextual Reduction (E-CTX)**:
  - `Ec · e c(cid:32) Ec · e'`

- **Fixed Point (E-FIX)**:
  - `fix f:t.v c(cid:32) (f (cid:55)→ fix f:t.v)v`

- **Policy Reduction (E-POL)**:
  - `([e]) pol(cid:32) e`

- **Match (E-MATCH)**:
  - `match vc with p1 ⇒ e1 . . . pn ⇒ en c(cid:32) σj(ej)` if `vc (cid:31) pj : σj` and `∀i < j. vc (cid:54)(cid:31) pi : σi`

- **Bracket Removal (E-BLAB, E-BINT, E-BABS, E-TABS, E-NEST, E-UNLAB)**:
  - These rules handle the removal of brackets from different types of expressions.

### 4. Soundness

FABLE ensures that well-typed programs never go wrong or get stuck. The type soundness theorem states:

- **Theorem 1 (Type Soundness)**:
  - If `· (cid:96)c e : t`, then either `∃e'.e c(cid:32) e'` or `∃vc.e = vc`. Furthermore, if `e c(cid:32) e'`, then `· (cid:96)c e' : t`.

### 5. Example Policies in FABLE

This section demonstrates how FABLE can encode various security policies, such as access control, provenance, and static information flow. We focus on three kinds of policies and discuss how FABLE's design eases the construction of proofs of policy correctness.

#### 5.1. Access Control Policies

Access control policies govern the release of information but do not control its subsequent use. To prove that an access control policy is implemented correctly, we must show that unauthorized programs cannot learn protected information. This is formalized as non-observability.

- **Non-Observability**:
  - If a program `P` is not allowed to access a resource `v1` with label `l`, then a program `P'` identical to `P` except that `v1` is replaced with `v2` (having the same type and label as `v1`) should evaluate in the same way as `P`.

To make this formal, we define an equivalence relation called similarity up to `l`, which holds for two terms `e` and `e'` if they are indistinguishable up to the label `l`.

### Conclusion

FABLE provides a robust framework for enforcing security policies through its type system and operational semantics. By ensuring type soundness and using decision procedures for type convertibility, FABLE enables the construction of secure and correct programs. The examples and theorems presented here demonstrate the effectiveness of FABLE in encoding and verifying various security policies.