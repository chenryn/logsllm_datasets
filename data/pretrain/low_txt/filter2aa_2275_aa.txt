# Defense by Numbers

## Making Problems for Script Kiddies and Scanner Monkeys!
@ChrisJohnRiley

> "THE WISEST MAN, IS HE WHO KNOWS, THAT HE KNOWS NOTHING"
>
> â€” Socrates, *Apology*, 21D

---

### Overview
This talk will cover:
- **Numbers**
- **Bad Jokes**
- **Traces of Peanuts**
- **Did I Mention Numbers?**

### TL;DR
**Goals for this talk:**
- Describe the defensive uses of HTTP status codes
- What, Why, How, Goals, Bringing it Together, Review

---

## 1. What are HTTP Status Codes?

HTTP status codes may seem like a small detail, but they can have a big impact.

### HTTP Status Codes
- **Major part of RFC 2616 (HTTP/1.1)**
- **5 main classes of responses:**
  - **1XX Informational**: Indicates response received, processing not yet completed.
    - 100 Continue
    - 101 Switching Protocols
    - 102 Processing (WebDAV RFC 2518)
  - **2XX Success**: Indicates response received, processed, and understood.
    - 200 OK
    - 201 Created
    - 202 Accepted
    - 203 Non-Authoritative Information
    - 204 No Content
    - 205 Reset Content
    - 206 Partial Content
    - 207 Multi-Status (WebDAV RFC 4918)
    - 208 Already Reported
    - 226 IM Used
    - 250 Low on Storage Space
  - **3XX Redirection**: Action required to complete the request.
    - 300 Multiple Choices
    - 301 Moved Permanently
    - 302 Found (Moved Temporarily)
    - 303 See Other
    - 304 Not Modified
    - 305 Use Proxy
    - 306 Switch Proxy (unused)
    - 307 Temporary Redirect
    - 308 Permanent Redirect
  - **4XX Client Error**: Client caused an error.
    - 400 Bad Request
    - 401 Unauthorized
    - 402 Payment Required
    - 403 Forbidden
    - 404 Not Found
    - 405 Method Not Allowed
    - 406 Not Acceptable
    - 407 Proxy Authentication Required
    - 408 Request Timeout
    - 409 Conflict
    - 410 Gone
    - 411 Length Required
    - 412 Precondition Failed
    - 413 Payload Too Large
    - 414 URI Too Long
    - 415 Unsupported Media Type
    - 416 Range Not Satisfiable
    - 417 Expectation Failed
    - 418 I'm a Teapot (IETF April Fools' RFC 2324)
    - 422 Unprocessable Entity (RFC 4918)
    - 423 Locked (RFC 4918)
    - 424 Failed Dependency (RFC 4918)
    - 425 Unordered Collection
    - 426 Upgrade Required (RFC 2817)
    - 428 Precondition Required
    - 429 Too Many Requests
    - 431 Request Header Fields Too Large
    - 444 No Response (NGINX)
    - 449 Retry With (Microsoft)
    - 450 Blocked by Windows Parental Controls
    - 451 Unavailable For Legal Reasons
    - 494 Request Header Too Large (NGINX)
    - 495 SSL Certificate Error (NGINX)
    - 496 No SSL Certificate (NGINX)
    - 497 HTTP to HTTPS (NGINX)
    - 499 Client Closed Request (NGINX)
  - **5XX Server Error**: Server error occurred.
    - 500 Internal Server Error
    - 501 Not Implemented
    - 502 Bad Gateway
    - 503 Service Unavailable
    - 504 Gateway Timeout
    - 505 HTTP Version Not Supported
    - 506 Variant Also Negotiates (RFC 2295)
    - 507 Insufficient Storage (WebDAV RFC 4918)
    - 508 Loop Detected (WebDAV RFC 5842)
    - 509 Bandwidth Limit Exceeded (Apache extension)
    - 510 Not Extended (RFC 2274)
    - 511 Network Authentication Required (RFC 6585)
    - 550 Permission Denied
    - 598 Network Read Timeout Error (Microsoft Proxy)
    - 599 Network Connect Timeout Error (Microsoft Proxy)

### Proposed 7XX Status Codes
- 701 Meh
- 719 I Am Not a Teapot
- 721 Known Unknowns
- 722 Unknown Unknowns
- 732 Fucking Unicode
- [More details](https://github.com/joho/7XX_rfc)

---

## 2. Why Use HTTP Status Codes Defensively?

It started as a simple idea... to screw with scanners and script kiddies. This sounds like fun!

### Objectives
- **Increase Attacker Costs**
- **Waste Attacker Time**

### Prior Art
- **When the Tables Turn (2004)**
  - Roelof Temmingh, Haroon Meer, Charl van der Walt
  - [Link](http://slideshare.net/sensepost/strikeback)
- **Stopping Automated Attack Tools (2006)**
  - Gunter Ollmann
  - [Link](http://www.technicalinfo.net/papers/StoppingAutomatedAttackTools.html)
- **mod_security Mailing List (2006)**
  - Ryan Barnett
  - [Link](http://bb10.com/apache_mod_security_user/2006_12/msg00042.html)

### Example Configuration
```apache
SecFilterDefaultAction "deny,log,status:503"
SecFilter ".*"
Header set Retry-After "120"
```

---

## 3. How to Use HTTP Status Codes Defensively

### Browsers and Flexibility
Browsers need to be flexible, which leads to interpretation. This can lead to the dark side.

### RFCs
- **They are more of a guideline really.**
- **What could possibly go wrong?**

### Testing
- **Restricted research to the big three:**
  - Internet Explorer
  - Chrome/Chromium
  - Firefox
- **No Safari or Opera in the top 3.**
- **Lynx: The unrealistic option.**

### Tools
- **MITMproxy/MITMdump**
  - Python-based
  - Simple to set up proxy/reverse proxy
  - Script-based actions
- **PHP**
  - Ability to set response code
  - Must be at the top of the PHP code
  - Can be added to `php.ini`
  - `auto_prepend_file = /full/path`
  - Example:
    ```php
    header($_SERVER["SERVER_PROTOCOL"] . " " . $status_code);
    ```
- **Testing browsers automatically**
  - Created a PHP file to set status code
  - [Example](http://c22.cc/POC/respcode.php?code=XXX)

### Browser Behavior
- **HTML Responses**
  - Almost all response codes are rendered correctly.
- **iFrames**
  - Some special cases for IE, but other browsers handle this the same as HTML.
- **JavaScript/CSS**
  - Limited accepted status codes
  - Limited 3XX support
  - Chrome is the exception here
  - No support for 4XX/5XX codes

### Common Browser Behavior
- **1XX Code Handling**
  - Retries
  - Confusion
  - Chrome/IE6 try to download the page
  - Fun on Android (never-ending download)
  - Times out (eventually)
- **204 No Content**
  - No content returned
- **304 Not Modified**
  - No content returned

### Headers
- **Redirection Codes (301-304, 307)**
  - No Location header, no redirect
- **401 Unauthorized**
  - No WWW-Authenticate header, no authentication prompt
- **407 Proxy Authentication Required**
  - No Proxy-Authenticate header, no prompt

### Browser Fingerprinting
- **Firefox**
  - Does not load JavaScript returned with a 300 'Multiple Choices' status code
- **Chrome**
  - Loads JavaScript returned with a 307 'Temporary Redirect' status code
- **Internet Explorer**
  - Loads JavaScript returned with a 205 'Reset Content' status code

### Demo
- **Other options to fingerprint browsers:**
  - 300 Redirect (Chrome)
  - 305 & 306 JavaScript (Firefox)
  - 400 iFrame (Internet Explorer)

---

## 4. Goals

### Each Browser Handles Things Differently
- **Use known conditions:**
  - Handled codes
  - Unhandled codes
  - Browser weirdness

### Browser Fingerprinting
- **Firefox**
  - Does not load JavaScript returned with a 300 'Multiple Choices' status code
- **Chrome**
  - Loads JavaScript returned with a 307 'Temporary Redirect' status code
- **Internet Explorer**
  - Loads JavaScript returned with a 205 'Reset Content' status code

### Bringing It Together
- **Review the defensive uses of HTTP status codes**
- **Understand the impact on different browsers**
- **Implement strategies to increase attacker costs and waste their time**

---

Thank you for your attention!