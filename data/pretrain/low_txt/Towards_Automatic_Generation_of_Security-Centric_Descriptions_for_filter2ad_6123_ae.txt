### Techniques for Identifying Descriptive Sentences Related to Permission Requests

AutoCog [28] utilized machine learning techniques to automatically correlate descriptive scripts with permissions. Inspired by these studies, our goal is to bridge the gap between textual descriptions and security-related program semantics.

### Program Analysis Using Graphs

Previous research has focused on using behavior graphs for program analysis. For example, Kolbitsch et al. [22] used dynamic analysis to extract syscall dependency graphs as signatures to identify unknown malicious programs. Fredrikson et al. [19] proposed an automated technique to extract near-optimal specifications that uniquely identify malware families. Yamaguchi et al. [36] introduced the code property graph, which can model common vulnerabilities. Feng et al. [18] constructed kernel object graphs for robust memory analysis, while Zhang et al. [41] generated static taint graphs to mitigate component hijacking vulnerabilities in Android apps. In contrast, our approach takes a step further by transforming behavior graphs into natural language.

### Conclusion

We propose a novel technique to automatically generate security-centric app descriptions based on program analysis. We have implemented a prototype, DESCRIBEME, and evaluated it using DroidBench and real-world Android apps. Experimental results demonstrate that DESCRIBEME effectively bridges the gap between descriptions and permissions.

### Acknowledgments

We would like to thank the anonymous reviewers and our shepherd, Prof. Lorenzo Cavallaro, for their valuable feedback in finalizing this paper. This research was supported in part by the National Science Foundation Grant #1054605 and the Air Force Research Lab Grant #FA8750-15-2-0106. Any opinions, findings, and conclusions expressed in this material are those of the authors and do not necessarily reflect the views of the funding agencies.

### References

[1] Amazon Mechanical Turk. https://www.mturk.com/mturk/welcome.
[2] Bangcle. http://www.bangcle.com.
[3] DroidBench Benchmarks. http://sseblog.ec-spride.de/tools/droidbench/.
[4] Ijiami. http://www.ijiami.cn.
[5] Malware Genome Project. http://www.malgenomeproject.org.
[6] Reference - Android Developers. http://developer.android.com/reference/packages.html.
[7] SimpleNLG: Java API for Natural Language Generation. https://code.google.com/p/simplenlg/.
[8] Soot: A Java Optimization Framework. http://www.sable.mcgill.ca/soot/.
[9] ARZT, S., RASTHOFER, S., FRITZ, C., BODDEN, E., BARTEL, A., KLEIN, J., LE TRAON, Y., OCTEAU, D., AND MCDANIEL, P. FlowDroid: Precise Context, Flow, Field, Object-sensitive, and Lifecycle-aware Taint Analysis for Android Apps. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '14) (June 2014).
[10] AU, K. W. Y., ZHOU, Y. F., HUANG, Z., AND LIE, D. PScout: Analyzing the Android Permission Specification. In Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS'12) (October 2012).
[11] BUSE, R. P., AND WEIMER, W. R. Automatically Documenting Program Changes. In Proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE'10) (September 2010).
[12] CHEN, K. Z., JOHNSON, N., D'SILVA, V., DAI, S., MACNAMARA, K., MAGRINO, T., WU, E. X., RINARD, M., AND SONG, D. Contextual Policy Enforcement in Android Applications with Permission Event Graphs. In Proceedings of the 20th Annual Network and Distributed System Security Symposium (NDSS'13) (February 2013).
[13] CORDELLA, L. P., FOGGIA, P., SANSONE, C., AND VENTO, M. A (Sub)Graph Isomorphism Algorithm for Matching Large Graphs. IEEE Transactions on Pattern Analysis and Machine Intelligence (2004).
[14] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG, J., MCDANIEL, P., AND SHETH, A. N. TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. In Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation (OSDI'10) (October 2010).
[15] FELT, A. P., HA, E., EGELMAN, S., HANEY, A., CHIN, E., AND WAGNER, D. Android Permissions: User Attention, Comprehension, and Behavior. In Proceedings of the Eighth Symposium on Usable Privacy and Security (SOUPS'12) (July 2012).
[16] FELT, A. P., REEDER, R. W., ALMUHIMEDI, H., AND CONSOLVO, S. Experimenting at Scale with Google Chrome's SSL Warning. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI'14) (April 2014).
[17] FELT, A. P., WANG, H. J., MOSHCHUK, A., HANNA, S., AND CHIN, E. Permission Re-delegation: Attacks and Defenses. In Proceedings of the 20th USENIX Security Symposium (August 2011).
[18] FENG, Q., PRAKASH, A., YIN, H., AND LIN, Z. MACE: High-Coverage and Robust Memory Analysis for Commodity Operating Systems. In Proceedings of the Annual Computer Security Applications Conference (ACSAC'14) (December 2014).
[19] FREDRIKSON, M., JHA, S., CHRISTODORESCU, M., SAILER, R., AND YAN, X. Synthesizing Near-Optimal Malware Specifications from Suspicious Behaviors. In Proceedings of the 2010 IEEE Symposium on Security and Privacy (Oakland'10) (May 2010).
[20] GRACE, M., ZHOU, Y., WANG, Z., AND JIANG, X. Systematic Detection of Capability Leaks in Stock Android Smartphones. In Proceedings of the 19th Network and Distributed System Security Symposium (NDSS'12) (February 2012).

### Appendix: Security-Centric Descriptions of the Motivating Example

1. **Network Data Handling:**
   - When a GUI component is clicked, the app reads data from the network and sends data to the network, depending on whether the user selects the "Confirm" button.

2. **Phone Number Retrieval and Encoding:**
   - When a GUI component is clicked, the app retrieves the user's phone number and encodes the data into the format "100/app_id=an1005/ani=%s/dest=%s/phone_number=%s/company=%s/" before sending it to the network, depending on whether the user selects the "Confirm" button.

3. **Service Provider Name Retrieval and Encoding:**
   - When a GUI component is clicked, the app retrieves the service provider name and encodes the data into the format "100/app_id=an1005/ani=%s/dest=%s/phone_number=%s/company=%s/" before sending it to the network, depending on whether the user selects the "Confirm" button.

4. **User Input Handling:**
   - The app retrieves text from user input and displays it to the user.
   - When a GUI component is clicked, the app retrieves text from user input and sends it to the network, depending on whether the user selects the "Confirm" button.

5. **Web Page Opening:**
   - The app opens a web page.

6. **File Reading:**
   - The app reads from the file "address.txt".
   - The app reads from the file "contact.txt".
   - The app reads from the file "message.txt".