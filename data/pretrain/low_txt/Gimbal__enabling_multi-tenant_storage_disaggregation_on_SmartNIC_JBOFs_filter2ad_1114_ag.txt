以下是优化后的参考文献列表，使其更加清晰、连贯和专业：

1. **Proceedings of the 6th International Systems and Storage Conference.**
2. **Brakmo, L. S., & Peterson, L. L. (1995). TCP Vegas: End-to-end congestion avoidance on a global Internet. *IEEE Journal on Selected Areas in Communications*, 13(8), 1465–1480.**
3. **Chen, F., Hou, B., & Lee, R. (2016). Internal parallelism of flash memory-based solid-state drives. *ACM Transactions on Storage (TOS)*, 12(3), 1–39.**
4. **Chen, F., Koufaty, D. A., & Zhang, X. (2009). Understanding intrinsic characteristics and system implications of flash memory based solid state drives. *ACM SIGMETRICS Performance Evaluation Review*, 37(1), 181–192.**
5. **Chung, E., Nowatzyk, A., Rodeheffer, T., Thacker, C., & Yu, F. (2014). AN3: A low-cost, circuit-switched datacenter network. *Technical Report MSR-TR-2014-35, Microsoft Research*.**
6. **Chung, T.-S., Park, D.-J., Park, S., Lee, D.-H., Lee, S.-W., & Song, H.-J. (2009). A survey of flash translation layer. *Journal of Systems Architecture*, 55(5-6), 332–343.**
7. **Cooper, B. F., Silberstein, A., Tam, E., Ramakrishnan, R., & Sears, R. (2010). Benchmarking cloud serving systems with YCSB. In *Proceedings of the 1st ACM Symposium on Cloud Computing*.**
8. **Demers, A., Keshav, S., & Shenker, S. (1989). Analysis and simulation of a fair queueing algorithm. In *Proceedings of the 2015 ACM Conference on Special Interest Group on Data Communication*.**
9. **Desnoyers, P. (2012). Analytic modeling of SSD write performance. In *Proceedings of the 5th Annual International Systems and Storage Conference*.**
10. **Eran, H., Zeno, L., Tork, M., Malka, G., & Silberstein, M. (2019). NICA: An infrastructure for inline acceleration of network applications. In *2019 USENIX Annual Technical Conference (USENIX ATC 19)*.**
11. **Firestone, D., Putnam, A., Mundkur, S., Chiou, D., Dabagh, A., Andrewartha, M., Angepat, H., Bhanu, V., Caulfield, A., Chung, E., Chandrappa, H. K., Chaturmohta, S., Humphrey, M., Lavier, J., Lam, N., Liu, F., Ovtcharov, K., Padhye, J., Popuri, G., Raindel, S., Sapre, T., Shaw, M., Silva, G., Sivakumar, M., Srivastava, N., Verma, A., Zuhair, Q., Bansal, D., Burger, D., Vaid, K., Maltz, D. A., & Greenberg, A. (2018). Azure Accelerated Networking: SmartNICs in the public cloud. In *15th USENIX Symposium on Networked Systems Design and Implementation (NSDI 18)*.**
12. **Goyal, P., Vin, H. M., & Chen, H. (1996). Start-time fair queuing: A scheduling algorithm for integrated services packet switching networks. In *Conference Proceedings on Applications, Technologies, Architectures, and Protocols for Computer Communications*.**
13. **Gulati, A., Ahmad, I., & Waldspurger, C. A. (2009). PARDA: Proportional allocation of resources for distributed storage access. In *7th USENIX Conference on File and Storage Technologies (FAST 09)*.**
14. **Guz, Z., Li, H. (Huan), Shayesteh, A., & Balakrishnan, V. (2017). NVMe-over-Fabrics performance characterization and the path to low-overhead flash disaggregation. In *Proceedings of the 10th ACM International Systems and Storage Conference*.**
15. **Ha, S., Rhee, I., & Xu, L. (2008). CUBIC: A new TCP-friendly high-speed TCP variant. *ACM SIGOPS Operating Systems Review*, 42(5), 64–74.**
16. **Hao, M., Toksoz, L., Li, N., Halim, E. E., Hoffmann, H., & Gunawi, H. S. (2020). LinnOS: Predictability on unpredictable flash storage with a light neural network. In *14th USENIX Symposium on Operating Systems Design and Implementation (OSDI 20)*.**
17. **Hedayati, M., Shen, K., Scott, M. L., & Marty, M. (2019). Multi-queue fair queuing. In *2019 USENIX Annual Technical Conference (USENIX ATC 19)*, 301–314.**
18. **Hwang, J., Cai, Q., Tang, A., & Agarwal, R. (2020). TCP ≈ RDMA: CPU-efficient remote storage access with i10. In *17th USENIX Symposium on Networked Systems Design and Implementation (NSDI 20)*.**
19. **Iyer, S., & Druschel, P. (2001). Anticipatory scheduling: A disk scheduling framework to overcome deceptive idleness in synchronous I/O. In *Proceedings of the Eighteenth ACM Symposium on Operating Systems Principles*.**
20. **Jung, M., & Kandemir, M. (2013). Revisiting widely held SSD expectations and rethinking system-level implications. *ACM SIGMETRICS Performance Evaluation Review*, 41(1), 203–216.**
21. **Kang, W.-H., Lee, S.-W., Moon, B., Kee, Y.-S., & Oh, M. (2014). Durable write cache in flash memory SSD for relational and NoSQL databases. In *Proceedings of the 2014 ACM SIGMOD International Conference on Management of Data*, 529–540.**
22. **Kim, T. Y., Kang, D. H., Lee, D., & Eom, Y. I. (2015). Improving performance by bridging the semantic gap between multi-queue SSD and I/O virtualization framework. In *2015 31st Symposium on Mass Storage Systems and Technologies (MSST)*.**
23. **Klimovic, A., Kozyrakis, C., Thereska, E., John, B., & Kumar, S. (2016). Flash storage disaggregation. In *Proceedings of the Eleventh European Conference on Computer Systems*.**
24. **Klimovic, A., Litz, H., & Kozyrakis, C. (2017). ReFlex: Remote flash ≈ local flash. In *Proceedings of the Twenty-Second International Conference on Architectural Support for Programming Languages and Operating Systems*.**
25. **Kumar, G., Dukkipati, N., Jang, K., Wassel, H. M. G., Wu, X., Montazeri, B., Wang, Y., Springborn, K., Alfeld, C., Ryan, M., Wetherall, D., & Vahdat, A. (2020). Swift: Delay is simple and effective for congestion control in the datacenter. In *Proceedings of the Annual Conference of the ACM Special Interest Group on Data Communication on the Applications, Technologies, Architectures, and Protocols for Computer Communication*.**
26. **Kung, H. T., & Chapman, A. (1993). The FCVC (flow-controlled virtual channels) proposal for ATM networks: A summary. In *1993 International Conference on Network Protocols*. IEEE, 116–127.**
27. **Kung, H. T., Blackwell, T., & Chapman, A. (1994). Credit-based flow control for ATM networks: Credit update protocol, adaptive credit allocation, and statistical multiplexing. In *Proceedings of the Conference on Communications Architectures, Protocols and Applications*.**
28. **Legtchenko, S., Williams, H., Razavi, K., Donnelly, A., Black, R., Douglas, A., Cheriere, N., Fryer, D., Mast, K., Brown, A. D., Klimovic, A., Slowey, A., & Rowstron, A. (2017). Understanding rack-scale disaggregated storage. In *Proceedings of the 9th USENIX Conference on Hot Topics in Storage and File Systems*.**
29. **Thereska, E., Ballani, H., O’Shea, G., Karagiannis, T., Rowstron, A., Talpey, T., Black, R., & Zhu, T. (2013). Ioflow: A software-defined storage architecture. In *Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles*.**
30. **Wachs, M., Abd-El-Malek, M., Thereska, E., & Ganger, G. R. (2007). Argon: Performance insulation for shared storage servers. In *FAST*.**
31. **Xu, Q., Siyamwala, H., Ghosh, M., Awasthi, M., Suri, T., Guz, Z., Shayesteh, A., & Balakrishnan, V. (2015). Performance characterization of hyperscale applications on NVMe SSDs. In *Proceedings of the 2015 ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems*.**
32. **Yang, J., Li, B., & Lilja, D. J. (2020). Exploring performance characteristics of the Optane 3D Xpoint storage technology. *ACM Transactions on Modeling and Performance Evaluation of Computing Systems (TOMPECS)*, 5(1), 1–28.**
33. **Yang, J., Li, B., & Lilja, D. J. (2021). HeuristicDB: A hybrid storage database system using a non-volatile memory block device. In *Proceedings of the 14th ACM International Conference on Systems and Storage*, 1–12.**
34. **Zhang, Y., Arulraj, L. P., Arpaci-Dusseau, A. C., & Arpaci-Dusseau, R. H. (2012). De-indirection for flash-based SSDs with nameless writes. In *FAST*.**
35. **Li, B., Ruan, Z., Xiao, W., Lu, Y., Xiong, Y., Putnam, A., Chen, E., & Zhang, L. (2017). KV-Direct: High-performance in-memory key-value store with programmable NIC. In *Proceedings of the 26th Symposium on Operating Systems Principles*.**
36. **Li, H., Hao, M., Novakovic, S., Gogte, V., Govindan, S., Ports, D. R. K., Zhang, I., Bianchini, R., Gunawi, H. S., & Badam, A. (2020). LeapIO: Efficient and portable virtual NVMe storage on ARM SoCs. In *Proceedings of the Twenty-Fifth International Conference on Architectural Support for Programming Languages and Operating Systems*.**
37. **Lin, J., Patel, K., Stephens, B. E., Sivaraman, A., & Akella, A. (2020). PANIC: A high-performance programmable NIC for multi-tenant networks. In *14th USENIX Symposium on Operating Systems Design and Implementation (OSDI 20)*.**
38. **Liu, C.-Y., Lee, Y., Jung, M., Kandemir, M. T., & Choi, W. (2021). Prolonging 3D NAND SSD lifetime via read latency relaxation. In *Proceedings of the 26th ACM International Conference on Architectural Support for Programming Languages and Operating Systems*, 730–742.**
39. **Liu, M., Cui, T., Schuh, H., Krishnamurthy, A., Peter, S., & Gupta, K. (2019). Offloading distributed applications onto SmartNICs using IPipe. In *Proceedings of the ACM Special Interest Group on Data Communication*.**
40. **Liu, M., Peter, S., Krishnamurthy, A., & Phothilimthana, P. M. (2019). E3: Energy-efficient microservices on SmartNIC-accelerated servers. In *2019 USENIX Annual Technical Conference (USENIX ATC 19)*.**
41. **Lu, H., Saltaformaggio, B., Kompella, R., & Xu, D. (2015). vFair: Latency-aware fair storage scheduling via per-IO cost-based differentiation. In *Proceedings of the Sixth ACM Symposium on Cloud Computing*.**
42. **Meza, J., Wu, Q., Kumar, S., & Mutlu, O. (2015). A large-scale study of flash memory failures in the field. In *Proceedings of the 2015 ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems*.**
43. **Mittal, R., Lam, V. T., Dukkipati, N., Blem, E., Wassel, H., Ghobadi, M., Vahdat, A., Wang, Y., Wetherall, D., & Zats, D. (2015). TIMELY: RTT-based congestion control for the datacenter. In *Proceedings of the 2015 ACM Conference on Special Interest Group on Data Communication*.**
44. **Mo, J., La, R. J., Anantharam, V., & Walrand, J. (1999). Analysis and comparison of TCP Reno and Vegas. In *IEEE INFOCOM'99. Conference on Computer Communications. Proceedings. Eighteenth Annual Joint Conference of the IEEE Computer and Communications Societies. The Future is Now (Cat. No. 99CH36320)*, Vol. 3, 1556–1563.**
45. **Nanavati, M., Wires, J., & Warfield, A. (2017). Decibel: Isolation and sharing in disaggregated rack-scale storage. In *14th USENIX Symposium on Networked Systems Design and Implementation (NSDI 17)*.**
46. **Park, S., & Shen, K. (2012). FIOS: A fair, efficient flash I/O scheduler. In *FAST*.**
47. **Saeed, A., Dukkipati, N., Valancius, V., Lam, V. T., Contavalli, C., & Vahdat, A. (2017). Carousel: Scalable traffic shaping at end hosts. In *Proceedings of the Conference of the ACM Special Interest Group on Data Communication*.**
48. **Saeed, A., Zhao, Y., Dukkipati, N., Zegura, E., Ammar, M., Harras, K., & Vahdat, A. (2019). Eiffel: Efficient and flexible software packet scheduling. In *16th USENIX Symposium on Networked Systems Design and Implementation (NSDI 19)*.**
49. **Schibilla, M. R., & Reiter, R. J. (2012). Garbage collection for solid state disks. US Patent 8,166,233.**
50. **Schroeder, B., Lagisetty, R., & Merchant, A. (2016). Flash reliability in production: The expected and the unexpected. In *14th USENIX Conference on File and Storage Technologies (FAST 16)*.**
51. **Shen, K., & Park, S. (2013). FlashFQ: A fair queuing I/O scheduler for flash-based SSDs. In *2013 USENIX Annual Technical Conference (USENIX ATC 13)*, 67–78.**
52. **Shrivastav, V. (2019). Fast, scalable, and programmable packet scheduler in hardware. In *Proceedings of the ACM Special Interest Group on Data Communication*.**
53. **Shrivastav, V., Valadarsky, A., Ballani, H., Costa, P., Lee, K. S., Wang, H., Agarwal, R., & Weatherspoon, H. (2019). Shoal: A network architecture for disaggregated racks. In *16th USENIX Symposium on Networked Systems Design and Implementation (NSDI 19)*.**
54. **Shue, D., & Freedman, M. J. (2014). From application requests to virtual IOPs: Provisioned key-value storage with Libra. In *Proceedings of the Ninth European Conference on Computer Systems*.**
55. **Sivaraman, A., Subramanian, S., Alizadeh, M., Chole, S., Chuang, S.-T., Agrawal, A., Balakrishnan, H., Edsall, T., Katti, S., & McKeown, N. (2016). Programmable packet scheduling at line rate. In *Proceedings of the 2016 ACM SIGCOMM Conference*.**
56. **Tavakkol, A., Gómez-Luna, J., Sadrosadati, M., Ghose, S., & Mutlu, O. (2018). MQSim: A framework for enabling realistic studies of modern multi-queue SSD devices. In *16th USENIX Conference on File and Storage Technologies (FAST 18)*.**

### 附录
**附录A：额外的SSD特性**
图14通过比较两种条件下的性能影响来展示写放大效应：预处理的大顺序（干净）和随机IO（碎片化）。在碎片化情况下，添加5%的写操作会使整体IOPS减少42.6%。与干净情况相比，碎片化情况下的吞吐量分别达到了仅写入和90/10读写混合场景的16.9%和17.8%。

图15比较了不同IO大小下干净SSD与其他三种情况的未加载延迟。平均而言，在这些情况下，碎片化SSD、70/30读写混合以及8个并发IO分别导致了52.0%、83.6%和80.5%的延迟增加。更大的IO（例如128KB/256KB）由于更可能与其他请求竞争而观察到更多的性能下降。

**附录B：拥塞控制的动态**
本节提供了实验结果，以说明以下SSD行为方面：
(a) 延迟作为SSD负载的函数，
(b) 拥塞控制算法确定的动态延迟阈值，
(c) 拥塞控制算法估计的带宽能力。

如图17所示，当负载超过吞吐量容量时，观察到的延迟显著增加。使用拥塞控制算法后，SSD能够在稳定的范围内保持平均延迟，并提供接近设备最大值的吞吐量。我们绘制了拥塞控制算法根据观察到的延迟调整延迟阈值的典型行为。图18显示了基于EWMA延迟的延迟阈值。随着未完成IO数量的增加，EWMA延迟开始超过阈值，并且如预期的那样更频繁地达到阈值。

**附录C：Gimbal交换机的更多细节**
```python
virt_slot = tenant.curr_virt_slot
io.tenant = tenant
io.virt_slot = virt_slot
virt_slot.submits += 1
virt_slot.size += io.weighted_size
if virt_slot.size > 128KB:
    virt_slot.is_full = True
    close(virt_slot)
    if not open_virt_slot(tenant):
        move_to_deferred(tenant)

# IO完成处理
def Sched_Complete(io):
    tenant = io.tenant
    v_slot = io.virt_slot
    v_slot.completions += 1
    if v_slot.is_full and v_slot.submits == v_slot.completions:
        reset(v_slot)
    if tenant.deferred and open_slot(tenant):
        move_to_active(tenant)
```

我们现在描述软件存储交换机的一些实现细节，包括如何管理虚拟槽位、如何处理由写税引起的请求包大小异质性以及系统如何维护有请求的租户列表。然后提供调度算法的伪代码。

**活动和延迟列表**：我们的调度器在每次IO提交时调用一个函数，并在IO完成事件触发回调函数时也被调用。整个逻辑在算法2中描述。通常，调度器应用DRR服务规则进行租户间公平存储资源分配。对于每个使用的槽位，调度器跟踪其未完成的IO是否已完成，并在操作完成后释放槽位。当所选租户在延迟列表中时，回调函数尝试打开新的虚拟槽位。如果成功，则将租户从延迟列表中移除并添加到活动列表中。对于活动列表中的每个租户，调度器会累积赤字值，并在没有更多可用虚拟槽位时将其移动到延迟列表中。