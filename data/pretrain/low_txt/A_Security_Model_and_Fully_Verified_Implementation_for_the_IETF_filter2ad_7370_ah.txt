### Acknowledgments

This work was supported by the Google Faculty Fellowship, the Alfred P. Sloan Foundation, the Department of the Navy, Office of Naval Research under Grant No. N00014-17-S-B001, and the National Science Foundation and VMware under Grant No. CNS-1700521. We would like to thank Felix Günther, Markulf Kohlweiss, and the anonymous reviewers for their valuable feedback. Special thanks go to Christopher Wood, Martin Thompson, and other members of the IETF QUIC working group for their support of our proposals and assistance in organizing the QUIC Security & Privacy workshop. Barry Bond contributed the initial QUIC F prototype. We also extend our gratitude to Nick Banks for integrating and testing earlier versions of this work with MsQuic.

### References

[1] J. B. Almeida, M. Barbosa, G. Barthe, and F. Dupressoir, "Certified computer-aided cryptography: Efficient provably secure machine code from high-level implementations," in *Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security (CCS '13)*, pp. 1217–1230, ACM, 2013.

[2] J. B. Almeida, M. Barbosa, G. Barthe, and F. Dupressoir, "Verifiable side-channel security of cryptographic implementations: Constant-time MEE-CBC," in *23rd International Conference on Fast Software Encryption (FSE 2016)*, pp. 163–184, 2016.

[3] J. B. Almeida, C. Baritel-Ruet, M. Barbosa, G. Barthe, F. Dupressoir, B. Grégoire, V. Laporte, T. Oliveira, A. Stoughton, and P.-Y. Strub, "Machine-checked proofs for cryptographic standards: Indifferentiability of sponge and secure high-assurance implementations of SHA-3," in *Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security (CCS '19)*, pp. 1607–1622, New York, NY, USA: Association for Computing Machinery, 2019. [Online]. Available: https://doi.org/10.1145/3319535.3363211

[4] M. Barbosa, G. Barthe, K. Bhargavan, B. Blanchet, C. Cremers, K. Liao, and B. Parno, "SoK: Computer-aided cryptography," in *2021 IEEE Symposium on Security and Privacy (to appear)*, 2021.

[5] G. Barthe, S. Belaïd, G. Cassiers, P.-A. Fouque, B. Grégoire, and F.-X. Standaert, "Maskverif: Automated verification of higher-order masking in presence of physical defaults," in *European Symposium on Research in Computer Security (ESORICS)*, Springer, 2019, pp. 300–318.

[6] G. Barthe, F. Dupressoir, B. Grégoire, C. Kunz, B. Schmidt, and P.-Y. Strub, *EasyCrypt: A Tutorial*, Springer, 2014, pp. 146–166.

[7] G. Barthe, B. Grégoire, and V. Laporte, "Secure compilation of side-channel countermeasures: The case of cryptographic 'constant-time'," in *IEEE Computer Security Foundations Symposium (CSF)*, IEEE, 2018, pp. 328–343.

[8] A. G. Bayrak, F. Regazzoni, D. Novo, and P. Ienne, "Sleuth: Automated verification of software power analysis countermeasures," in *Workshop on Cryptographic Hardware and Embedded Systems (CHES)*, Springer, 2013, pp. 293–310.

[9] M. Bellare, F. Günther, and B. Tackmann, "Two-tier authenticated encryption: Nonce hiding in QUIC," available at: https://felixguenther.info/talks/quips_ttae2020-02-23.pdf, 2020.

[10] M. Bellare, T. Kohno, and C. Namprempre, "Breaking and provably repairing the SSH authenticated encryption scheme: A case study of the Encode-Then-Encrypt-and-MAC paradigm," *ACM Transactions on Information and System Security (TISSEC)*, vol. 7, no. 2, pp. 206–241, May 2004. [Online]. Available: https://doi.org/10.1145/996943.996945

[11] M. Bellare, R. Ng, and B. Tackmann, "Nonces are noticed: AEAD revisited," in *Advances in Cryptology – CRYPTO 2019*, edited by A. Boldyreva and D. Micciancio, Cham: Springer International Publishing, 2019, pp. 235–265.

[12] M. Bellare and P. Rogaway, "The security of triple encryption and a framework for code-based game-playing proofs," in *Advances in Cryptology – EUROCRYPT 2006*, pp. 409–426, 2006.

[13] K. Bhargavan, B. Blanchet, and N. Kobeissi, "Verified models and reference implementations for the TLS 1.3 standard candidate," in *2017 IEEE Symposium on Security and Privacy (SP)*, pp. 483–502, May 2017.

[14] K. Bhargavan, A. Delignat-Lavaud, C. Fournet, M. Kohlweiss, J. Pan, J. Protzenko, A. Rastogi, N. Swamy, S. Zanella-Béguelin, and J. K. Zinzindohoué, "Implementing and proving the TLS 1.3 record layer," in *2017 IEEE Symposium on Security & Privacy*, IEEE, 2017.

[15] K. Bhargavan, A. Delignat-Lavaud, C. Fournet, A. Pironti, and P.-Y. Strub, "Triple handshakes and cookie cutters: Breaking and fixing authentication over TLS," in *2014 IEEE Symposium on Security and Privacy*, pp. 98–113, 2014.

[16] K. Bhargavan, C. Fournet, R. Corin, and E. Zalinescu, "Cryptographically verified implementations for TLS," in *ACM Computer and Communications Security (CCS '08)*, New York, NY, USA: ACM, 2008, pp. 459–468.

[17] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and P. Strub, "Implementing TLS with verified cryptographic security," in *2013 IEEE Symposium on Security and Privacy*, pp. 445–459, 2013.

[18] B. Blanchet, "Security protocol verification: Symbolic and computational models," in *Principles of Security and Trust (POST)*, Springer, 2012, pp. 3–29.

[19] A. Boldyreva, J. P. Degabriele, K. G. Paterson, and M. Stam, "Security of symmetric encryption in the presence of ciphertext fragmentation," in *EUROCRYPT 2012*, edited by D. Pointcheval and T. Johansson, Berlin, Heidelberg: Springer Berlin Heidelberg, 2012, pp. 682–699.

[20] C. Boyd, B. Hale, S. F. Mjølsnes, and D. Stebila, "From stateless to stateful: Generic authentication and authenticated encryption constructions with application to TLS," in *CT-RSA 2016*, edited by K. Sako, Cham: Springer International Publishing, 2016, pp. 55–71.

[21] C. Brzuska, A. Delignat-Lavaud, C. Fournet, K. Kohbrok, and M. Kohlweiss, "State separation for code-based game-playing proofs," in *ASIACRYPT 2018*, Lecture Notes in Computer Science, vol. 11274, Springer, 2018, pp. 222–249.

[22] S. Chen, S. Jero, M. Jagielski, A. Boldyreva, and C. Nita-Rotaru, "Secure communication channel establishment: TLS 1.3 (over TCP fast open) vs. QUIC," in *ESORICS 2019*, edited by K. Sako, S. Schneider, and P. Y. A. Ryan, Springer International Publishing, 2019, pp. 404–426.

[23] A. Chudnov, N. Collins, B. Cook, J. Dodds, B. Huffman, C. MacCárthaigh, S. Magill, E. Mertens, E. Mullen, S. Tasiran et al., "Continuous formal verification of Amazon s2n," in *Computer Aided Verification (CAV)*, Springer, 2018, pp. 430–446.

[24] V. Cortier, S. Kremer, and B. Warinschi, "A survey of symbolic methods in computational analysis of cryptographic systems," *Journal of Automated Reasoning*, vol. 46, no. 3-4, pp. 225–259, 2011.

[25] C. Cremers, M. Horvat, S. Scott, and T. v. d. Merwe, "Automated analysis and verification of TLS 1.3: 0-RTT, resumption and delayed authentication," in *IEEE Security and Privacy*, pp. 470–485, May 2016.

[26] L. de Moura and N. Bjørner, "Z3: An efficient SMT solver," 2008.

[27] B. Dowling, M. Fischlin, F. Günther, and D. Stebila, "A cryptographic analysis of the TLS 1.3 handshake protocol candidates," in *Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS '15)*, ACM, 2015, pp. 1197–1210.

[28] F. Dupressoir, A. D. Gordon, J. Jürjens, and D. A. Naumann, "Guiding a general-purpose C verifier to prove cryptographic protocols," *Journal of Computer Security*, vol. 22, no. 5, pp. 823–866, 2014.

[29] H. Eldib, C. Wang, and P. Schaumont, "SMT-based verification of software countermeasures against side-channel attacks," in *Tools and Algorithms for the Construction and Analysis of Systems (TACAS)*, Springer, 2014, pp. 62–77.

[30] M. Fischlin and F. Günther, "Multi-stage key exchange and the case of Google's QUIC protocol," in *ACM CCS*, ACM, 2014, pp. 1193–1204.

[31] M. Fischlin, F. Günther, and C. Janson, "Robust channels: Handling unreliable networks in the record layers of QUIC and DTLS 1.3," *Cryptology ePrint Archive*, Report 2020/718, 2020. [Online]. Available: https://eprint.iacr.org/2020/718

[32] M. Fischlin, F. Günther, G. A. Marson, and K. G. Paterson, "Data is a stream: Security of stream-based channels," in *CRYPTO 2015*, edited by R. Gennaro and M. Robshaw, Berlin, Heidelberg: Springer Berlin Heidelberg, 2015, pp. 545–564.

[33] C. Fournet, M. Kohlweiss, and P. Strub, "Modular code-based cryptographic verification," in *18th ACM Conference on Computer and Communications Security (CCS 2011)*, pp. 341–350, 2011.

[34] K. v. Gleissenthall, R. G. Kıcı, D. Stefan, and R. Jhala, "IODINE: Verifying constant-time execution of hardware," in *USENIX Security*, pp. 1411–1428, 2019.

[35] C. Hawblitzel, J. Howell, J. R. Lorch, A. Narayan, B. Parno, D. Zhang, and B. Zill, "Ironclad apps: End-to-end security via automated full-system verification," in *USENIX Operating Systems Design and Implementation (OSDI)*, pp. 165–181, 2014.

[36] J. Iyengar and M. Thomson, "QUIC: A UDP-based multiplexed and secure transport," IETF draft, 2019.

[37] T. Jager, J. Schwenk, and J. Somorovsky, "On the security of TLS 1.3 and QUIC against weaknesses in PKCS#1 v1.5 encryption," in *22nd ACM Conference on Computer and Communications Security (CCS '15)*, pp. 1185–1196, 2015.

[38] A. Langley, A. Riddoch, A. Wilk, A. Vicente, C. Krasic, D. Zhang, F. Yang, F. Kouranov, I. Swett, and J. Iyengar, "The QUIC transport protocol: Design and internet-scale deployment," in *SIGCOMM*, ACM, 2017, pp. 183–196.

[39] K. R. M. Leino, "Dafny: An automatic program verifier for functional correctness," in *Proceedings of the Conference on Logic for Programming, Artificial Intelligence, and Reasoning (LPAR)*, 2010.

[40] R. Lychev, S. Jero, A. Boldyreva, and C. Nita-Rotaru, "How secure and quick is QUIC? Provable security and performance analyses," in *2015 IEEE Symposium on Security and Privacy*, IEEE, 2015, pp. 214–231.

[41] C. Namprempre, P. Rogaway, and T. Shrimpton, "AE5 security notions: Definitions implicit in the CAESAR call," *Cryptology ePrint Archive*, Report 2013/242, 2013. [Online]. Available: https://eprint.iacr.org/2013/242

[42] K. Oku, "Client's initial destination CID is unauthenticated," QUIC WG issue tracker, 2019. [Online]. Available: https://github.com/quicwg/base-drafts/issues/1486

[43] A. Prado, N. Harris, and Y. Gluck, "SSL, gone in 30 seconds: A BREACH beyond CRIME," *Black Hat USA*, vol. 2013, 2013.

[44] J. Protzenko, B. Parno, A. Fromherz, C. Hawblitzel, M. Polubelova, K. y. Bhargavan, B. Beurdouche, J. Choi, A. Delignat-Lavaud, C. Fournet, N. Kulatova, T. Ramananandro, A. Rastogi, N. Swamy, C. Wintersteiger, and S. Zanella-Béguelin, "EverCrypt: A fast, verified, cross-platform cryptographic provider," in *Proceedings of the IEEE Symposium on Security and Privacy (Oakland)*, May 2020.

[45] J. Protzenko, J.-K. Zinzindohoué, A. Rastogi, T. Ramananandro, P. Wang, S. Zanella-Béguelin, A. Delignat-Lavaud, C. Hriţcu, K. Bhargavan, C. Fournet, and N. Swamy, "Verified low-level programming embedded in F*," *PACMPL*, vol. 1, no. ICFP, pp. 17:1–17:29, Sep. 2017.

[46] T. Ramananandro, A. Delignat-Lavaud, C. Fournet, N. Swamy, T. Chajed, N. Kobeissi, and J. Protzenko, "EverParse: Verified secure zero-copy parsers for authenticated message formats," in *28th USENIX Security Symposium*, pp. 1465–1482, 2019.

[47] J. Rizzo and T. Duong, "The CRIME Attack," September 2012.

[48] P. Rogaway, "Authenticated-encryption with associated-data," in *CCS'02*, ACM, 2002, pp. 98–107.

[49] P. Rogaway and Y. Zhang, "Simplifying game-based definitions: Indistinguishability up to correctness and its application to stateful AE," in *CRYPTO 2018*, edited by H. Shacham and A. Boldyreva, 2018, pp. 3–32.

[50] N. Swamy, C. Hritcu, C. Keller, A. Rastogi, A. Delignat-Lavaud, S. Forest, K. Bhargavan, C. Fournet, P.-Y. Strub, M. Kohlweiss, J.-K. Zinzindohoue, and S. Zanella-Béguelin, "Dependent types and multi-monadic effects in F*," in *43nd ACM Symposium on Principles of Programming Languages (POPL 2016)*, pp. 256–270, 2016.

[51] M. Thomson, "Version-independent properties of QUIC," IETF draft, 2019.

[52] M. Thomson and S. Turner, "Using TLS to secure QUIC," IETF draft, 2019.

[53] M. Thomson, "Authenticating connection IDs," QUIC WG issue tracker, 2020. [Online]. Available: https://github.com/quicwg/base-drafts/issues/3439

[54] T. Tsujikawa, "ngtcp2 project is an effort to implement IETF QUIC protocol," GitHub, 2019. [Online]. Available: https://github.com/ngtcp2/ngtcp2

[55] J.-K. Zinzindohoué, K. Bhargavan, J. Protzenko, and B. Beurdouche, "HACL*: A verified modern cryptographic library," in *ACM Conference on Computer and Communications Security*, ACM, 2017, pp. 1789–1806.

### Appendix

#### A. Nonce-Hiding Encryption (Review)

Figures 12 and 13 illustrate the HN1 and HN2 constructions of Bellare et al. [11], which are proven secure with respect to nonce-hiding encryption.

#### B. Constant-Time Packet Number Decoding

In our constant-time implementation of packet number decoding, we expand all expressions that use the packet number length and replace all conditionals with secret comparisons provided by EverCrypt. For example, `Secret≤(X, Y)` (resp. `Secret=`, `Secret<`) is a secret integer that equals 1 if \( X \leq Y \) (resp. \( X = Y \), \( X < Y \)) and 0 otherwise. Thus, our implementation computes `Decode` in constant time as follows:

\[ \text{Decode} = \text{Secret}=(L_n, 1) \times 28 \times 1 + \text{Secret}=(L_n, 2) \times 28 \times 2 + \text{Secret}=(L_n, 3) \times 28 \times 3 + \text{Secret}=(L_n, 4) \times 28 \times 4 \]

using multiplications and additions rather than masks. F* automatically proves the equality of these two expressions, thanks to Z3’s support for linear arithmetic theory. It also ensures, by typechecking against the abstract interface of secret integers, that the latter computation does not leak information about \( L_n \). We similarly rewrite and verify the rest of `Decode` using, e.g., \( (1 - C) \) to negate some condition \( C \in \{0, 1\} \), and using multiplication for logical conjunction:

```plaintext
Decode(Ne, Ni, LN)
W ← 28^LN
X ← Ni + 1
N ← Ne + (X & (W - 1))
C1 ← Secret≤(N, X - W/2) × Secret<(N, 2^62 - W)
C2 ← (1 - C1) × Secret<(X + W/2, N) × Secret≤(W, N)
return N + C1 × W - C2 × W
```

After processing the header and its protection, our implementation calls EverCrypt’s AEAD to decrypt the payload at an offset that depends on protected header information. Since EverCrypt does not support secret-offset decryption, this requires us to declassify the offset at that point. Although the resulting memory accesses during payload decryption might be a source of cache-based side channel (in the sense that the memory locations accessed by EverCrypt AEAD depend on the value of the packet number length), such an attack appears unlikely and impractical.