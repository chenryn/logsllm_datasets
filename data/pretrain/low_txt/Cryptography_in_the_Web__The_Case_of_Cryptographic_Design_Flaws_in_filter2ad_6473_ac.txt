### Byte Comparison in Decryption

If the byte in the decryption of the first \( C_i \) is larger than 0x7F, then the byte at the same position in the decryption of the second \( C_i \) will be smaller than or equal to 0x7F. The attacker can then reconstruct the full plaintext of \( C_i \) by combining the bytes obtained from the decryptions of the two \( C_i \).

### Solving the Second Problem

One approach to solving the second problem is to repeatedly send requests to the oracle, modifying part of the input until the output has the expected number of bytes. A more efficient method is to construct a large query such as:
\[ C_1 | C_{\text{known}} | C_2 | C_{\text{known}} | C_3 | C_{\text{known}} | \cdots | C_n | C_{\text{known}} \]
where \( C_i \) are groups of blocks that the attacker wants to decrypt, and \( C_{\text{known}} \) are the last two blocks of any known ciphertext. Note that \( C_{\text{known}} \) would be decrypted as a known plaintext \( P_{\text{known}} \). The attacker can then split the output of the T-block oracle into chunks using \( P_{\text{known}} \) as the separator. The length of each chunk is calculated, and chunks that are missing some bytes are ignored. Only those chunks that do not lose any bytes are accepted. Further optimizations are possible using redundant information present in the incomplete chunks.

### Optimizations for T-Block Oracle

With these optimizations, the attacker can use the T-block as an efficient decryption oracle to attack the framework. Algorithm 5 describes how the attacker can use the T-block oracle together with CBC-R to download files.

### Attack Cost

The cost of the attack consists of three parts, which are described in this section:

1. **Finding a T-Block**: On average, this takes 256 HTTP requests.
2. **CBC-R Cost**: For the case where the attacker wants to download `web.config`, suppose the block size \( b \) is 16. The attacker needs just one block for `|||~/web.config` (which is 15 bytes). For each block, the attacker needs only one T-block oracle call, which is equivalent to one HTTP request. Thus, the cost of this part is negligible.
3. **Finding Block \( C_0 \)**: The attacker needs to find a block \( C_0 \) whose first two bytes after decryption match one of the magic byte values. Since the first two bytes of \( C_0 \) can be one of the four values `r#`, `R#`, `q#`, and `Q#`, the attacker needs on average \( 2^{14} \) HTTP requests to brute-force the first two bytes of \( C_0 \). To reduce the number of requests, the attacker can build a large query that contains the maximum number of blocks that fit in a single HTTP request. The attacker can construct a ciphertext that contains a T-block, followed by 20 repetitions of \( C_r | C_i | \tilde{C}_r | C_i \), separated by 19 pairs of \( C_{\text{known}} \), and ending with another pair of \( C_{\text{known}} \). Each repetition consumes 6 AES blocks, or 6 * 16 = 96 bytes. With 20 repetitions, the full ciphertext after conversion to BASE64 [19] is approximately 2048 bytes long, which is the maximum query size allowed by ASP.NET. About half of these 20 repetitions would lose some bytes, so the attacker can decrypt 10 blocks per request. In summary, the attack takes on average about \( 256 + \frac{2^{14}}{10} = 1894 \) HTTP requests, each about 2048 bytes long. In other words, the attacker has to send a total of about 3 MB of data to the server on average. Note that for a particular target, the attacker can reuse the T-block and \( C_0 \) in subsequent attacks to download other files.

### Impact and Countermeasures

#### Impact

We have presented two attacks on ASP.NET v4.0. These attacks are highly efficient and have been demonstrated to work under realistic scenarios. The best attack requires fewer than 2,000 HTTP requests to steal secret cryptographic keys in ASP.NET applications. After obtaining these keys, the attacker can easily create authentication tickets to sign in to any user account. Most applications have administration interfaces, and if the attacker gains access to these areas, they can sign in as an administrator and take control of the entire application. Administration interfaces often allow unlimited file uploading, enabling the attacker to achieve remote code execution.

In addition to cryptographic keys, `web.config` contains other important information. Since `web.config` is supposed to be private, users and developers tend to store sensitive information there, such as connection strings with usernames and passwords for database stores, mail servers, and directory services. We have even seen `web.config` files containing the password for a Domain Administrator account in Microsoft Active Directory.

Besides `web.config`, the described attacks can also be used to download source code and other intellectual property. The `App_Code` folder in ASP.NET applications contains source code for shared classes and business objects (e.g., `.cs` and `.vb` files). Files within `App_Code` and any other files inside the document root of applications can be stolen.

To emphasize the real-world impact of our attacks, we note that ASP.NET is a widely popular web framework, and it is believed that 25% of online applications are built using it. However, this number is much higher in the corporate and financial services sectors, making applications like online banking and e-commerce prime targets for these attacks. DotNetNuke CMS, the most popular public ASP.NET application with over 600,000 installations, has been demonstrated to be vulnerable to these attacks. Microsoft acknowledged that Microsoft SharePoint, one of the most popular enterprise collaboration applications, was also affected. Even `microsoft.com` was vulnerable. It is also worth noting that Mono, the open-source implementation of ASP.NET, was vulnerable to these attacks.

#### Countermeasures

Our attacks, especially the T-block attack, are difficult to detect. All of the thousands of requests sent to the target are encrypted, and none of them cause suspicious logging errors. Therefore, countermeasures such as web application firewalls or network security monitoring can hardly detect, let alone prevent, our attacks.

After initial details of our attacks were released to the public [20], Microsoft released an immediate workaround. The workaround focused on padding oracles, mitigating part of the first attack but failing to address the second attack. After we provided more information to Microsoft, they eventually released a patch that prevented all of our attacks [21]. It is strongly recommended that ASP.NET users and developers immediately install this official security update to protect against these attacks.

#### Related Work

Black and Urtubia [10] generalized Vaudenay’s attack to other padding schemes and modes of operation and presented a padding method that prevents the attack. Canvel et al. [22] demonstrated the practicality of padding oracle attacks by implementing an attack against the IMAP protocol when used over SSL/TLS. In a typical setting, the attack recovers the IMAP password within one hour. For many years, this was the most practical application of the attack published.

Klima and Rosa [23] applied the idea of a “format correctness oracle” (of which the padding oracle is a special case) to construct a PKCS#7 validity oracle. Using this oracle, they were able to decrypt one PKCS#7 formatted ciphertext byte using an average of 128 oracle calls. For the Web, Rizzo and Duong [14] used padding oracle attacks to crack CAPTCHAs and to decrypt view states and session state data in various popular web development frameworks. The most vulnerable software studied in [14] is the JavaServer Faces (JSF) framework. Using CBC-R, an attacker can create malicious JSF view states to attack web applications. However, the security consequences of being able to forge JSF view states depend on how the application uses the view state information.

This paper is the first to describe step-by-step how to use decryption oracles and CBC-R to compromise any application using the ASP.NET framework. The new attacks described are more dangerous, generic, and efficient than any previous published results involving padding oracles.

### Conclusions

In this paper, we analyze and efficiently exploit several cryptographic flaws in ASP.NET, the widely-used web application framework developed by Microsoft. The most serious vulnerability we discovered is the use of unauthenticated encryption. This vulnerability is exacerbated by the reuse of keys to encrypt data with very different levels of importance. We present two practical and highly efficient attacks that allow an attacker to steal cryptographic secret keys and impersonate any user account in ASP.NET applications. These attacks are performed by abusing components present in every application developed using the framework. The applications are even more exposed if they use the security features provided by ASP.NET, especially form-based authentication.

Cryptography is difficult to implement correctly, and cryptographers often advise non-cryptographers not to develop their own cryptography. However, if one looks more closely at the current situation, it is evident that web developers and users do not have much choice. ASP.NET developers still have to figure out on their own how to use cryptographic primitives correctly whenever they want to build a secure cryptographic protocol. This is not a problem specific to ASP.NET. Most other popular web development frameworks do not provide their users and developers with easy and secure ways to use cryptography [14]. Popular scripting languages, including Ruby, Python, and PHP, provide cryptography libraries as bindings to OpenSSL [24]. While OpenSSL is powerful, it is a low-level library that again requires its users to know how to use cryptographic primitives securely.

Unauthenticated encryption should be considered harmful. This is not just a theoretical problem; rather, unauthenticated encryption has repeatedly led to devastating attacks against real systems. Any cryptographic API should use authenticated encryption whenever its users want to encrypt data. The development and popularization of high-level cryptographic toolkits that include authenticated encryption, such as Keyczar [25], Cryptlib [26], and NaCl [27], is the first step to providing secure cryptographic software libraries to the general public. The next step might be the integration of these cryptographic toolkits into mainstream web development frameworks.

### Acknowledgments

We are grateful to many people for their help in writing this paper. First of all, we would like to thank William Robertson, Ned Bass, and the anonymous reviewers for their work and valuable comments that significantly improved the quality of our initial manuscript. Our thanks to Michal Trojnara, Giang Duc Pho, Luciano Notarfrancesco, Peter Gutmann, Agustin Azubel, Matias Soler, Agustin Gianni, and especially Huong Lan Nguyen for the care with which they reviewed the original draft and for conversations that clarified our thinking on this and other matters. We would also like to thank Kenneth Paterson and Serge Vaudenay for their encouragement and instruction.

### References

[1] P. Nguyen, “Can We Trust Cryptographic Software? Cryptographic Flaws in GNU Privacy Guard v1.2.3,” in Advances in Cryptology-EUROCRYPT 2004. Springer, 2004, pp. 555–570.
[2] I. Goldberg and D. Wagner, “Randomness and the Netscape Browser,” Dr Dobb’s Journal-Software Tools for the Professional Programmer, vol. 21, no. 1, pp. 66–71, 1996.
[3] P. Gutmann, “Lessons Learned in Implementing and Deploying Crypto Software,” in Proc. USENIX Security Symp, 2002, pp. 315–325.
[4] K. Jallad, J. Katz, and B. Schneier, “Implementation of Chosen-Ciphertext Attacks against PGP and GnuPG,” Information Security, pp. 90–101, 2002.
[5] J. Katz and B. Schneier, “A Chosen-Ciphertext Attack against Several E-mail Encryption Protocols,” in Proceedings of the 9th conference on USENIX Security Symposium-Volume 9. USENIX Association, 2000, p. 18.
[6] B. Schneier, “Security in the Real World: How To Evaluate Security Technology,” Computer Security Journal, vol. 15, no. 4, p. 1, 1999.
[7] T. Yu, S. Hartman, and K. Raeburn, “The Perils of Unauthenticated Encryption: Kerberos Version 4,” in Proc. NDSS, vol. 4. Citeseer, 2004.
[8] M. Bellare, T. Kohno, and C. Namprempre, “Breaking and Provably Repairing the SSH Authenticated Encryption Scheme: A Case Study of the Encode-then-Encrypt-and-MAC Paradigm,” ACM Transactions on Information and System Security (TISSEC), vol. 7, no. 2, p. 241, 2004.
[9] M. Bellare and C. Namprempre, “Authenticated Encryption: Relations Among Notions and Analysis of the Generic Composition Paradigm,” Journal of Cryptology, vol. 21, no. 4, pp. 469–491, 2008.
[10] J. Black and H. Urtubia, “Side-channel Attacks On Symmetric Encryption Schemes: The Case for Authenticated Encryption.”
[11] K. Paterson and A. Yau, “Cryptography in Theory and Practice: The Case of Encryption in IPsec,” Advances in Cryptology-EUROCRYPT 2006, pp. 12–29, 2006.
[12] ASP.NET, “The Official Microsoft Web Development Framework. http://www.asp.net.”
[13] S. Vaudenay, “Security Flaws Induced by CBC Padding-in Cryptology-Applications EUROCRYPT 2002. Springer, 2002, pp. 534–545.
[14] J. Rizzo and T. Duong, “Practical Padding Oracle Attacks,” USENIX WOOT, 2010.
[15] J. An, Y. Dodis, and T. Rabin, “On the Security of Joint Signature and Encryption,” in Advances in Cryptology-EUROCRYPT 2002. Springer, 2002, pp. 83–107.
[16] H. Krawczyk, “The Order of Encryption and Authentication for Protecting Communications (or: How Secure Is SSL?),” in Advances in Cryptology—CRYPTO 2001. Springer, 2001, pp. 310–331.
[17] M. Dworkin, “NIST Recommendation for Block Cipher Modes of Operation, Methods and Techniques,” NIST Special Publication.
[18] K. Paterson and A. Yau, “Padding Oracle Attacks On the ISO CBC Mode Encryption Standard,” Topics in Cryptology–CT-RSA 2004, pp. 1995–1995, 2004.
[19] S. Josefsson, “RFC 3548-The Base16, Base32, and Base64 Data Encodings. IETF,” 2003.
[20] T. Duong and J. Rizzo, “Padding Oracles Everywhere,” EKOPARTY, 2010.
[26] P. Gutmann, “Cryptlib Encryption Tool Kit,” 2008.
[27] D. Bernstein, “Cryptography in NaCl.”
[28] A. Yau, K. Paterson, and C. Mitchell, “Padding Oracle Attacks on CBC-mode Encryption with Secret and Random IVs,” in Fast Software Encryption. Springer, 2005, pp. 299–319.
[29] S. Stubblebine and V. Gligor, “On Message Integrity in Cryptographic Protocols,” in Research in Security and Privacy, 1992. Proceedings., 1992 IEEE Computer Society Symposium on. IEEE, 2002, pp. 85–104.
[30] N. Borisov, I. Goldberg, and D. Wagner, “Intercepting Mobile Communications: The Insecurity of 802.11,” in Proceedings of the 7th annual international conference on Mobile computing and networking. ACM, 2001, pp. 180–189.
[31] S. Bellovin, “Problem Areas for the IP Security Protocols,” in Proceedings of the Sixth Usenix Unix Security Symposium, 1996, pp. 205–214.
[21] Microsoft. MS10-070 Information Available: Security Bulletin Could Allow Disclosure. [Online]. Available: http://www.microsoft.com/technet/security/bulletin/ms10-070.mspx
[22] B. Canvel, A. Hiltgen, S. Vaudenay, and M. Vuagnoux, “Password Interception in a SSL/TLS channel,” Advances in Cryptology-CRYPTO 2003, pp. 583–599, 2003.
[23] V. Klima and T. Rosa, “Side Channel Attacks On CBC Encrypted Messages in the PKCS# 7 Format,” IACR ePrint Archive, vol. 98, p. 2003, 2003.
[24] E. Young, T. Hudson, and R. Engelschall, “OpenSSL: The Open Source Toolkit for SSL/TLS,” World Wide Web, http://www.openssl.org/, Last visited, vol. 9, 2011.
[25] A. Dey and S. Weis, “Keyczar: A Cryptographic Toolkit,” 2008.