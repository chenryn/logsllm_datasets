### 7.3 Overhead Introduced by vIDS

During the call monitoring process, the arrival of an INVITE request message triggers the initiation of one instance of each protocol state machine, starting from the (INIT) state. As the call progresses, these state machines transition through various states. At the end of the call, the associated instances are removed from memory. The memory cost for maintaining attack patterns is relatively low, typically in the order of a few kilobytes.

SIP messages are text-based and include varied-length header fields. Mandatory fields, such as source, destination, port numbers, and media information, consume approximately 450 bytes. Similarly, RTP state information, including source, destination, ports, sequence number, timestamp, synchronization source (SSRC) identifier, and other relevant variables, requires only about 40 bytes of memory space. Although the memory requirement grows linearly with the number of calls, the very low memory cost per call allows vIDS to monitor thousands of calls simultaneously.

In the absence of vIDS, the vIDS host (e.g., see Figure 7) simply forwards the received packets. In the presence of vIDS, packets are logged at the granularity of a millisecond. The increase in CPU overhead due to running vIDS is approximately 3.6%.

### 7.4 Impact on QoS of RTP Streams

IP telephony places stringent requirements on RTP streams to meet specified Quality of Service (QoS). The latency upper-bound for one-way traffic is 150 ms, and jitter must also be bounded. Our experiments evaluate the effect of online placement of vIDS on the QoS of voice streams, focusing on two metrics: (1) end-to-end delay of RTP packets and (2) RTP jitter behavior.

Figure 10 shows the impact of vIDS on the QoS of RTP streams. On average, vIDS adds approximately 1.5 ms of additional delay to RTP-based voice streams, while the delay variations are 0.3 × 10^-9 seconds higher than those without vIDS. Therefore, vIDS has a negligible effect on RTP delay and jitter, which will not be perceived by VoIP service subscribers.

### 7.5 Detection Accuracy and Sensitivity

vIDS is based on protocol state machines and the attack signatures of known attacks. In our preliminary experiments with a few known attack scenarios, vIDS successfully detected these attacks without false alarms. For attacks that have been identified and recorded with attack patterns in the signature database, vIDS demonstrates 100% detection accuracy with zero false positives. However, the detection of unknown attacks (i.e., attacks without corresponding signatures in the database) depends largely on the development of protocol state machines. We postulate that detailed and accurate representation of protocol state machines should be capable of detecting unknown attacks. The effectiveness of vIDS in detecting unknown attacks will be the focus of future work.

The detection sensitivity of vIDS is defined as the earliest possible time to detect an intrusion since its commencement. The major strength of specification-based intrusion detection lies in its accurate and early detection capability, provided that the protocol state machine is detailed enough. The intrusion detection delay is mainly determined by the various timers in attack patterns, such as timer T1 in INVITE flooding detection and timer T in BYE DoS attack detection. Timer T1 depends on the required detection granularity and the computational resources available at vIDS, while timer T depends on network conditions. After receiving a BYE message, setting timer T to one round trip time (RTT) should be sufficient to receive all in-flight RTP packets, thereby reducing the chance of false alarms. Optimizing the values of these timers and their relationship with the probability of false alarms is ongoing work.

### 8 Related Work

The work by Sekar et al. [15] and Vigna et al. [17, 18, 19] is closely related to our research. These studies use state transition analysis tools (STAT) for intrusion detection. Sekar’s specification-based anomaly detection method [15] utilizes extended finite state automata to model network protocols. Vigna et al. proposed the NetSTAT tool [18], which extends STAT to network-based intrusion detection, and the WebSTAT tool [19] for detecting web-based attacks. WebSTAT operates on multiple event streams and correlates both network and operating system level events with entries in server logs.

Porras et al. [5] employed a similar technique to model computer penetrations as a series of state changes from an initial secure state to a target compromised state. AODVSTAT [17] is another STAT-based tool for real-time intrusion detection in wireless networks using the Ad hoc On-Demand Distance Vector (AODV) routing protocol.

Wu et al. [20] proposed SCIDIVE, a stateful cross-protocol intrusion detection architecture for VoIP. SCIDIVE translates all incoming network packets into protocol-dependent information, groups them according to sessions, and matches the aggregated state against a ruleset. This approach shares some disadvantages with misuse intrusion detection systems. Our proposed scheme builds on these previous approaches with significant enhancements via communicating extended finite state machines, making it particularly suitable for VoIP applications due to its multi-protocol awareness.

### 9 Conclusions

In this paper, we formally described the extended finite state machine and utilized it for VoIP intrusion detection. We presented potential security threats to emerging SIP-based VoIP services and detailed the stateful intrusion detection mechanism based on communicating extended finite state machines. The proposed vIDS is particularly suitable for defending VoIP applications due to its holistic consideration of multi-protocols and cross-protocol interactions.

We evaluated the performance of vIDS through our VoIP network testbed. Experimental results show that the online placement of vIDS induces approximately 100 ms delay to call setup and an additional 3.6% overhead to CPU cost. Due to the low memory cost per call, vIDS can easily monitor thousands of calls simultaneously. Moreover, vIDS has a negligible impact on the perceived quality of voice streams. Finally, we demonstrated the high detection accuracy of vIDS and discussed its detection sensitivity.

### References

[1] O. Arkin. Why E.T. Can’t Phone Home? - Security Risk Factors with IP Telephony. Presentation, AusCERT Australia, 2004.
[2] M. Handley and V. Jacobson. SDP: Session Description Protocol. RFC 2327, IETF Network Working Group, 1998.
[3] C. Hoare. Communicating Sequential Processes. Communications of the ACM, 21(8), pages 666–677, 1978.
[4] G. Holzmann. Design and Validation of Computer Protocols. Prentice Hall, 1st edition, 1991.
[5] K. Ilgun, R. A. Kemmerer, and P. A. Porras. State Transition Analysis: A Rule-Based Intrusion Detection Approach. IEEE Transactions on Software Engineering, 21(3):181–199, March 1995.
[6] A. Johnston. SIP Understanding the Session Initiation Protocol. Artech House, 2nd edition, 2004.
[7] D. Lee and M. Yannakakis. Principles and Methods of Testing Finite State Machines - A Survey. Proceedings of the IEEE, Vol 84, pages 1089–1123, August 1996.
[8] A. Niemi. Authentication of SIP Calls. Tik-110.501 Seminar on Network Security, 2000.
[9] OPNET. Optimum Network Performance, Mod-eler Tool Version 9.1. http://www.opnet.com/, 2003.
[10] A. Petrenko, S. Boroday, and R. Groz. Confirming Configurations in EFSM Testing. IEEE Transactions on Software Engineering (TSE), January 2004.
[11] M. Roesch. Snort: Lightweight Intrusion Detection for Networks. Proceedings of the 13th System Administration Conference (LISA), USENIX Association, pages 229–238, November 1999.
[12] J. Rosenberg, H. Schulzrinne, G. Camarillo, A. Johnston, J. Peterson, R. Sparks, M. Handley, and E. Schooler. SIP: Session Initiation Protocol. RFC 3261, IETF Network Working Group, 2002.
[13] S. Salsano, L. Veltri, and D. Papalilo. SIP Security Issues: The SIP Authentication Procedure and its Processing Load. IEEE Networks, pages 38–44, November 2002.
[14] H. Schulzrinne, S. Casner, R. Frederick, and V. Jacobson. RTP: A Transport Protocol for Real-Time Applications. RFC 1889, IETF Network Working Group, 1996.
[15] R. Sekar, A. Gupta, J. Frullo, T. Shanbhag, A. Tiwari, H. Yang, and S. Zhou. Specification-Based Anomaly Detection: A New Approach for Detecting Network Intrusions. ACM Computer and Communication Security Conference (CCS), Washington DC, November 2002.
[16] Tipping Point. Future of VoIP Security: White Paper. http://www.tippingpoint.com/solutions voip.html, 2005.
[17] G. Vigna, S. Gwalani, K. Srinivasan, E. Belding-Royer, and R. Kemmerer. An Intrusion Detection Tool for AODV-Based Ad Hoc Wireless Networks. Proceedings of the Annual Computer Security Applications Conference (ACSAC), pages 16–27, Tucson, AZ, December 2004.
[18] G. Vigna and R. Kemmerer. NetSTAT: A Network-Based Intrusion Detection Approach. Proceedings of the 14th Annual Computer Security Application Conference (ACSAC 1998), Scottsdale, Arizona, December 1998.
[19] G. Vigna, W. Robertson, V. Kher, and R. Kemmerer. A Stateful Intrusion Detection System for World-Wide Web Servers. Proceedings of the Annual Computer Security Applications Conference (ACSAC 2003), pages 34–43, Las Vegas, NV, December 2003.
[20] Y. Wu, S. Bagchi, S. Garg, N. Singh, and T. Tsai. SCIDIVE: A Stateful and Cross-Protocol Intrusion Detection Architecture for Voice-over-IP Environments. IEEE Dependable Systems and Networks Conference (DSN 2004), June 2004.
[21] H. Yamaguchi, K. Okano, T. Higashino, and K. Taniguchi. Synthesis of Protocol Entities Specifications from Service Specifications in a Petri Net Model with Registers. 15th International Conference on Distributed Computing Systems (ICDCS’95), May 1995.

---

This version of the text is more coherent, professional, and easier to read. It maintains the technical details while improving clarity and flow.