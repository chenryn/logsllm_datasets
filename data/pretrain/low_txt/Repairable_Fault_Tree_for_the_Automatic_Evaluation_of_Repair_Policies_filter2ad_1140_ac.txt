### Iterating through CSMs and Removing Roots

The process begins by iterating through every CSM (Common Submodule) in the list and removing the roots of the CSMs contained within the currently considered CSM. At this point, any minimal SSM (Simple Submodule) and any maximal CSM are indicated by their roots, which are contained in the specific list. These modules are then solved appropriately and replaced with a basic event, while their roots are removed from the list.

The SSM list now contains all the remaining modules that need to be reclassified and eventually solved in isolation. The entire process is repeated until the SSM list is empty, indicating that the entire RFT (Recursive Fault Tree) has been solved.

### 4.3. Solution Process for RFT Models

Classifying RFT modules into CSMs and SSMs requires applying two different solution techniques: combinatorial methods for CSMs and state-space-based methods for SSMs. The OsMoSys framework [15] supports multi-solution processes through an adaptive programmable GUI and an extensible solution architecture. The RFT model is automatically translated using a post-processor connected to the OsMoSys framework, generating an equivalent low-level model based on FT (Fault Tree) and GSPN (Generalized Stochastic Petri Net) formalisms to run the presented solution process. Figure 2 illustrates the steps needed to solve an RFT.

The RFT is drawn using the DrawNET++ GUI [14], which generates an XML representation of the model. This XML file is passed to the RFT Hierarchical Post-processor, which performs the following tasks:
- Detecting and classifying modules
- Generating the XML code for each module
- Executing the appropriate solving procedure for each module
- Gathering the partial results
- Passing the final result to DrawNET++ for visualization

CSM analysis is performed using the SHARPE package [11]. To represent the module in the SHARPE formalism, we implemented the FT2SHARPE translator, which converts the XML representation of the module into the SHARPE format.

The solving procedure for SSMs is more complex, as it involves state-space analysis and includes both failure and repair events. For each SSM, two GSPNs are automatically generated:
- One to represent the failure events (using the FT2PN translator)
- Another for each RB (Repair Box) in the module (using the RFT2PN translator) to represent the repair events associated with that RB

All the generated nets are in the input format required by the GreatSPN tool [5] and are composed to obtain a comprehensive model of the entire SSM using the Algebra tool [5]. The resulting Petri net is solved using one of the GreatSPN tool's solution modules. GreatSPN was chosen as the GSPN solver because it can also solve SWN (Stochastic Well-formed Net). The RB formalism can be extended to PFT (Probabilistic Fault Tree), using SWN instead of GSPN to solve SSMs.

The OsMoSys framework is flexible and extensible, designed to use different solvers. For example, Markov chains could be used instead of GSPN, and a different analysis tool could be adopted instead of GreatSPN.

### 5. Repair Boxes and Their GSPN Semantics

In this section, we propose possible semantics for repair boxes, corresponding to the RB types introduced in previous sections. We first discuss potential choices and general assumptions for RB semantics, highlighting the choices and assumptions considered in our framework. We then show how the considered RB types can be expressed using a parametric GSPN model. The GSPN model semantics is also used for automatic GSPN generation and related state-space analysis of SSMs.

#### 5.1. RepairBox Types

Each repair action modeled in the RFT formalism must have a trigger condition and a repair policy. The trigger condition can be:
- (a) A failure event included in the FT
- (b) A condition expressed as a function of a set of events included in the FT, but not corresponding to any event present in the FT (useful for modeling preventive maintenance)

In our framework, only option (a) is allowed: the trigger condition coincides with the event connected to the repair box.

The repair policy specifies:
- (a) Which basic components need to be repaired upon a given repair action being triggered
- (b) The repair order of such components
- (c) The number of available repair facilities

In our framework, the basic components to be repaired correspond to the basic event connected to the RB (the basic coverage set of the RB). Repair time can be specified in detail for each basic component or in a more abstract way as a single global repair time. In the latter case, the number of available repair facilities does not need to be specified as a separate parameter but must be considered when defining the global repair time. The global repair time can be state-dependent, depending on the actual set of basic events to be repaired when the repair action is triggered.

Another important aspect is the definition of when a repair action should be considered complete:
- (a) It may be completed only when all basic components have been repaired
- (b) It may be completed as soon as the trigger condition is no longer true (minimal set of repair steps to restore subsystem functionality)

In our framework, only option (a) is considered. A relevant aspect in specifying the RB semantics, orthogonal to the chosen repair policy, is the influence of the repair action on the basic event failure processes:
- (a) They may be stopped until the repair ends
- (b) They may continue during the repair action, allowing new failures to occur

If option (b) is chosen and only a global repair time is specified, this time may need to be adjusted as the failed basic event set changes during repair.

#### 5.2. GSPN Semantics of RepairBox Types

According to the RFT formal definition in Section 3, RBs have an associated type defining a repair policy. Depending on the type, the RB specification may include a set of repair policy parameters and a set of repair rates dependent on its basic coverage set. The GSPN model representing the semantics of a given RB type can be divided into three sections:
- **General Policy Section (GPS)**: Has a fixed structure, representing a part of the repair action common to all basic events involved, and may depend on the RB repair policy parameters.
- **Special Policy Section (SPS)**: Comprises a set of similar but distinct blocks for each basic event in the basic coverage set of the RB, representing the repair policy aspects specific to each basic event. This section must be instantiated according to the number of basic events in the coverage set and the basic event repair rates.
- **Module Flush-out Section (MFS)**: Depends on the module's structure and implements reset processes for all non-basic events affected by the repair. This section may also contain a set of inhibitor arcs to prevent further failures during repair.

In the actual implementation, all events in the coverage set are cleared, even if they depend on or influence other events in the module not involved in the repair process. This approach is not a limitation because if a fault is still present in the module after repair due to non-repairable basic events, it will be propagated again automatically by the submodel representing the fault tree logic.

This structure is very flexible and allows representing various policies corresponding to the choices outlined in Subsection 5.1. One of the sections can be logically absent to represent policies with only a common behavior for all basic events or no common behavior. Complex policies can be described by including rich GPS/MFS features, such as:
- Prevention of additional failures in the subsystem while under repair
- Allowing the repaired subsystem to work as soon as enough basic events have been repaired, according to Minimal Cut Set (MCS) analysis
- Imposing a repair order on the SPS
- Interrupting repair as soon as the minimal number of components that can make the subsystem work has been repaired

A repair action can be implemented using a finite or infinite number of repair facilities, influencing SPS behavior and with a unique or differentiated repair time.

In the rest of this section, we define and show the translation of three commonly used repair policies, assuming the failure of the subsystem to be repaired as the trigger condition, repairing all basic events in the coverage set of the RB, with an infinite or finite number of repair facilities influencing SPS behavior, and with a unique or differentiated repair time.

The GSPN models implementing the considered RB types follow the three-section structure, and all GPS, MFS, and SPS are automatically generated by taking into account the FT structure, the arcs connecting it to the RB, parameters, and repair rates. For each RB type, we show a GSPN model template including the GPS section and a parametric version of the SPS and MFS, where replicated subnets appear only once. To highlight the three sections, each is included in a box labeled with the section name, and interface places and transitions (those that must be eventually glued with the fault propagation GSPN model to obtain the complete GSPN model of a SSM) are shadowed.

For the sake of space, the GSPN formalism is not introduced in the paper; the reader may refer to [12].

The first policy we present is a simple Global Repair Time (GRT) policy, where only one parameter, representing the global time needed to repair the entire set of basic events connected with the RB, is given. When the repair time elapses, all basic events connected with the RB are immediately repaired. This policy is described in Figure 3. The subsystem repair activity is triggered by the failure event of the subsystem itself (immediate transition `StartRep` and place `RepSub`). A time elapses, representing the global repair time (timed transition `TimeToRepSub`). Then, the token in place `RemoveFailure` causes all non-basic event failures in the coverage set of the subsystem and all basic events pointed by the repair box to be cleared. Also, the non-basic event failures on the path from the subsystem failure event to the top event of the module, including the repairable subtree, must be cleared. All the cleared non-basic failure events that are still true are automatically reconstructed by the GSPN representing the Fault Tree logic.

In GSPN, immediate transitions (firing in zero time and represented as black bars in the depicted models) can be assigned different priorities. Observe that the priority of the immediate transitions `(cid:0) (cid:2)(cid:3) (cid:2)(cid:5)(cid:2)` is greater than `(cid:8)(cid:9)(cid:10)(cid:11)(cid:2)`, the priority of the immediate transition representing the end of a repair action. Both priorities are greater than all immediate transitions of the GSPN representing the FT logic, ensuring that the clear action is atomic with respect to the transitions implementing the fault propagation logic.

In Figure 3, the MFS square is divided into two parts: one part is related to events in the module that are in the coverage set of the RB and is always present. The other part is related to other events in the module and is only present if the module root does not coincide with the trigger event of the repair box.