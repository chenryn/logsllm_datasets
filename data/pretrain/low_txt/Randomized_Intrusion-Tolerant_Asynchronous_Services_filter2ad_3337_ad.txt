### Observations on Agreement Cost for Small Burst Sizes

For small burst sizes, the cost of reaching an agreement is notably high. Specifically, in a burst of four messages, the agreement process constitutes approximately 92% of all broadcasts. However, this cost decreases exponentially as the burst size increases, dropping to as low as 2.4% for a burst of 1000 messages.

### Summary of Main Results

- **Robustness and Performance**: The protocols are robust, and their performance and correctness remain unaffected by various fault patterns, even when a malicious process attempts to delay protocol execution.
- **Efficiency in Rounds**: The protocols are efficient in terms of the number of rounds required to reach an agreement. In our experiments, multi-valued consensus always reached a non-default value (distinct from ⊥), and binary consensus consistently terminated within one round.
- **Impact of Crashes**: Since the protocols do not perform special actions upon failure, crashes can actually speed up execution. Fewer processes result in less network contention.
- **Dilution of Agreement Cost**: In the atomic broadcast protocol, the cost of agreements is significantly reduced under high load conditions. For a burst of 1000 messages, the agreement cost represents only 2.4% of all (reliable or echo) broadcasts.

### Related Work

Randomized intrusion-tolerant protocols have been a subject of research since the seminal works of Ben-Or and Rabin [2, 20]. These protocols typically rely on a coin-tossing scheme to generate random bits. Ben-Or's approach uses a local coin-toss, while Rabin's method involves a trusted dealer distributing shares of the coins before protocol execution, ensuring that all processes see the same coins.

- **Existing Implementations**: SINTRA [5] is a recent implementation of a stack of randomized multicast and agreement protocols. It is built on a binary consensus protocol that usually terminates in one or two communication steps [4]. The SINTRA stack is implemented in Java and heavily relies on public-key cryptography primitives like digital and threshold signatures. Performance values are presented in terms of time between successive deliveries (TBSD). In a LAN, the average TBSD for atomic and reliable broadcast was 690 ms and 130 ms, respectively, corresponding to throughput values of 1.45 and 7.69 msgs/s.
- **RITAS Protocol**: RITAS uses a Ben-Or-style protocol without public-key cryptography. Theoretically, it runs in expected 2n−f communication steps [3], but in practice, with realistic fault loads in a LAN, it often completes in just three communication steps.

### Techniques to Bypass FLP Impossibility

- **Failure Detectors and Partial Synchrony**: Other techniques to circumvent the FLP impossibility result include failure detectors [15, 1, 16], partial synchrony [11], and distributed wormholes [8, 19].
- **Deterministic Asynchronous Consensus**: It has been proven that deterministic asynchronous consensus requires at least two communication steps in fault-free executions [16]. This can be achieved with a synchronous and secure distributed component called a wormhole, even in the presence of faults [8]. Partially synchronous protocols can run in a minimum of four steps in fault-free executions [11].

### Evaluation of Asynchronous Byzantine Protocols

- **Rampart Toolkit**: The first evaluation of a set of asynchronous Byzantine protocols (reliable and atomic broadcast) was conducted using the Rampart toolkit [22]. The reliable broadcast is implemented using Reiter’s echo broadcast, and the order is defined by a leader who also echo-broadcasts the order information. Despite the simplicity of the protocol and the use of small RSA keys (300 bits), public-key operations still dominate the latency for small messages. Additionally, detecting and removing corrupt processes is time-consuming and requires synchrony assumptions about network delays, which can be exploited by malicious processes.
- **SecureRing**: SecureRing is another intrusion-tolerant group communication system [14] that uses a rotating token signed by message digests. This reduces the number of signatures and improves performance compared to Rampart. However, it still suffers from the same detection issues as Rampart.

### Conclusion

This paper presents an implementation and evaluation of a stack of randomized protocols. These protocols have several key structural properties, such as not requiring public-key cryptography and achieving optimal resilience. The experiments led to the following conclusions:

1. **Practical Efficiency**: Randomized binary consensus protocols, which theoretically require many steps, often execute in just a few rounds under realistic conditions.
2. **Atomic Broadcast Efficiency**: With the right implementation, a high number of atomic broadcasts can be performed with a small number of consensus rounds, making the cost of atomic broadcast nearly equivalent to reliable broadcast.
3. **Distributed Decision-Making**: Decentralized decision-making is crucial for maintaining performance in the presence of faults. Our protocols show consistent or even improved performance under realistic fault loads, and this property also helps mitigate attacks against time assumptions.

### References

[1] R. Baldoni, J. Helary, M. Raynal, and L. Tanguy. Consensus in Byzantine asynchronous systems. In Proc. of the Int. Colloquium on Structural Information and Communication Complexity, pages 1–16, June 2000.

[2] M. Ben-Or. Another advantage of free choice: Completely asynchronous agreement protocols. In Proc. of the 2nd ACM Symp. on Principles of Distributed Computing, 1983.

[3] G. Bracha. An asynchronous (cid:1)(n − 1)/3(cid:2)-resilient consensus protocol. In Proc. of the 3rd ACM Symp. on Principles of Distributed Computing, pages 154–162, Aug. 1984.

[4] C. Cachin, K. Kursawe, and V. Shoup. Random oracles in constantipole: practical asynchronous Byzantine agreement using cryptography. In Proc. of the 19th annual ACM symp. on Principles of distributed computing, pages 123–132, New York, NY, USA, 2000. ACM Press.

[5] C. Cachin and J. A. Poritz. Secure intrusion-tolerant replication on the Internet. In Proceedings of the International Conference on Dependable Systems and Networks, pages 167–176, June 2002.

[6] R. Canetti and T. Rabin. Fast asynchronous Byzantine agreement with optimal resilience. In Proc. of the 25th Annual ACM Symp. on Theory of Computing, pages 42–51, 1993.

[7] T. Chandra and S. Toueg. Unreliable failure detectors for reliable distributed systems. Journal of the ACM, 43, 1996.

[8] M. Correia, N. F. Neves, L. C. Lung, and P. Veríssimo. Low complexity Byzantine-resilient consensus. Distributed Computing, 17(3):237–249, 2005.

[9] M. Correia, N. F. Neves, and P. Veríssimo. From consensus to atomic broadcast: Time-free Byzantine-resistant protocols without signatures. The Computer Journal, 41(1):82–96, Jan. 2006.

[10] D. Dolev, C. Dwork, and L. Stockmeyer. On the minimal synchronism needed for distributed consensus. Journal of the ACM, 34(1):77–97, Jan. 1987.

[11] C. Dwork, N. Lynch, and L. Stockmeyer. Consensus in the presence of partial synchrony. Journal of the ACM, 35(2):288–323, Apr. 1988.

[12] M. J. Fischer, N. A. Lynch, and M. S. Paterson. Impossibility of distributed consensus with one faulty process. Journal of the ACM, 32(2):374–382, Apr. 1985.

[13] S. Kent and R. Atkinson. Security architecture for the internet protocol. IETF RFC 2093, Nov. 1998.

[14] K. P. Kihlstrom, L. E. Moser, and P. M. Melliar-Smith. The SecureRing group communication system. ACM Transactions on Information and System Security, 4, 2001.

[15] D. Malkhi and M. Reiter. Unreliable intrusion detection in distributed computations. In Proc. of the 10th Computer Security Foundations Workshop, pages 116–124, June 1997.

[16] J. P. Martin and L. Alvisi. Fast Byzantine consensus. In Proceedings of the IEEE International Conference on Dependable Systems and Networks, June 2005.

[17] A. J. Menezes, P. C. V. Oorschot, and S. A. Vanstone. Handbook of Applied Cryptography. CRC Press, 1997.

[18] L. E. Moser and P. M. Melliar-Smith. Byzantine-resistant total ordering algorithms. Information and Computation, 150:75–111, 1999.

[19] N. F. Neves, M. Correia, and P. Veríssimo. Solving vector consensus with a wormhole. IEEE Transactions on Parallel and Distributed Systems, 16(12), Dec. 2005.

[20] M. O. Rabin. Randomized Byzantine generals. In Proceedings of the 24th Annual IEEE Symposium on Foundations of Computer Science, pages 403–409, Nov. 1983.

[21] H. Ramasamy, P. Pandey, J. Lyons, M. Cukier, and W. H. Sanders. Quantifying the cost of providing intrusion tolerance in group communication systems. In Proceedings of the International Conference on Dependable Systems and Networks, pages 229–238, June 2002.

[22] M. Reiter. Secure agreement protocols: Reliable and atomic group multicast in Rampart. In Proceedings of the 2nd ACM Conference on Computer and Communications Security, pages 68–80, Nov. 1994.

[23] F. B. Schneider. Implementing fault-tolerant services using the state machine approach: A tutorial. ACM Computing Surveys, 22(4):299–319, Dec. 1990.

[24] S. Toueg. Randomized Byzantine agreements. In Proceedings of the 3rd ACM Symposium on Principles of Distributed Computing, pages 163–178, Aug. 1984.

[25] P. Veríssimo, N. F. Neves, and M. Correia. Intrusion-tolerant architectures: Concepts and design. In Architecting Dependable Systems. Springer-Verlag, 2003.

[26] G. R. Wright and W. R. Stevens. TCP/IP Illustrated, Volume 2: The Implementation. Addison Wesley, 1995.