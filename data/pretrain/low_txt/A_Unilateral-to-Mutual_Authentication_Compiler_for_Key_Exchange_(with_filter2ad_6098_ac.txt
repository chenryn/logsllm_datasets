### Transcript Replication Attacks and Their Implications for TLS 1.3 Security

#### Introduction
This section introduces several examples that motivate the concept of transcript replication attacks, which are central to our analysis and have direct implications for the security of client authentication in TLS 1.3.

#### MACing the Server Identity
We demonstrate a Unilaterally Authenticated (UA) protocol that, when upgraded to Mutually Authenticated (MA) via SIGMAC but without including the server's identity under the client's MAC, becomes vulnerable to an Unknown Key-Share (UKS) attack. The necessity of including the client's identity (C) under the MAC is more apparent, as anyone can sign the transcript, making such a signature unbound to the UA run.

**Example:**
- **UA Protocol:** A simple server-authenticated Diffie-Hellman (DH) exchange where the client sends \( g^x \) and the server responds with \( g^y \) and a signature on \( g^x \) and \( g^y \). The session key \( K \) is derived from \( g^{xy} \).
- **MA Protocol (with SIGMAC):** If we extend this to a MA protocol via SIGMAC but exclude the server's identity (S) from the MAC, the client sends \( \text{MAC}_{a}(C) \) and its signature on both \( g^x \) and \( g^y \) (concatenated to form \( \text{sid} \)).

**Attack Scenario:**
- A malicious server \( S' \) relays \( g^y \) to the client but signs it with its own signature.
- When the client responds with \( \text{MAC}_{a}(C) \), \( S' \) forwards this message to the legitimate server \( S \).
- Both the client and \( S \) compute the same session key \( K_s \), but while \( S \) has the client as the peer, the client has \( S' \) as the peer, leading to a UKS attack.

#### Pre-Shared Key Protocols
We present an example of a UA protocol where applying SIGMAC to the entire transcript does not result in a MA-secure protocol. Consider a UA-secure protocol \( \Pi_1 \) where the client uses the server's identity and a symmetric pre-shared key (PSK) as credentials. The PSK is authenticated only by the server (as in the resumption mode of TLS 1.3).

**Example:**
- **UA Protocol \( \Pi_1 \):** The parties exchange nonces (forming the whole transcript), and the session key is derived using a Pseudorandom Function (PRF) keyed with the PSK.
- **MA Protocol \( \Pi_2 \):** Applying SIGMAC to \( \Pi_1 \) with the entire transcript included in \( \text{sid}^* \).

**Attack Scenario:**
- An attacker \( S' \) with shared keys with both the client and the server acts as a Man-in-the-Middle (MitM).
- \( S' \) relays the nonces chosen by the client and server without modification.
- \( S' \) forwards the client's signature on \( \text{sid}^* \) to the server but replaces the client's MAC with one computed by \( S' \) on identities (C, S) using a MAC key derived from the PSK shared with the server.
- The server ends its session with the client but with a session key known to \( S' \).

**Note:**
- Adding explicit authentication by sending a MAC from the server to the client (using a key derived from the PSK) but not including this MAC in \( \text{sid}^* \) still allows the above attack.
- As shown in Section 4.2, even including the server's MAC under the signature may not be sufficient for MA security.

#### SIGMAC Security for DH-Based Protocols
SIGMAC can be applied to lift a protocol from UA to MA, particularly for protocols that provide forward secrecy by deriving the session key from a DH value \( g^{xy} \). We show that including both \( g^x \) and \( g^y \) in \( \text{sid}^* \) is sufficient for SIGMAC to ensure MA security.

**Subtleties:**
- Without including \( g^y \) under the client's signature, MA-security is not guaranteed.
- An attacker \( S' \) can change \( g^y \) to \( g^{2y} \), leading the client to compute its MAC using a key derived from \( g^{2xy} \) while the server derives the verification key from \( g^{xy} \).
- Using a carefully constructed Key Derivation Function (KDF) and MAC, the attacker can cause both the client and server to compute the same session key but bind it to different peers, resulting in a UKS attack.

### Transcript Replication (TREPLICATION) Security
The information signed by the client in the SIGMAC compiler, specifically \( \text{sid}^* \), plays a crucial role in the security of the compiler. We define treplication security and show its importance in ensuring the successful use of the SIGMAC compiler.

#### Definition
A UA protocol \( \Pi \) is secure against transcript replication (treplication) attacks with respect to a transcript subset \( \tau \) if any efficient UA-attacker \( S' \) has only a negligible probability to win the Test experiment on a fresh session (S, sid) for which there is a session (C, S', sid) with the same session identifier sid and the same transcript core \( \tau \), and where C is an honest client.

#### Importance
- Treplication security is demonstrated by Theorem 3, showing that joint UA and treplication security suffice for the successful use of the SIGMAC compiler.
- We prove that important classes of UA protocols, including those discussed in Section 3.1 and those with direct application to TLS 1.3 client authentication, are treplication-secure and thus upgradable to mutual authentication via SIGMAC.

### Treplication Security of DH Protocols
We consider three cases for proving treplication security of DH protocols:
1. **Plain DH:** \( g^{xy} \) is used only to derive the session key.
2. **Additional Keys:** Additional keys used during the key exchange are derived from \( g^{xy} \), but the session key is secure even if these additional keys are provided to the attacker.
3. **Exponent Usage:** The exponent \( x \) (and/or \( y \)) is used for additional computation.

**Lemma 2:**
Under the Decisional Diffie-Hellman (DDH) assumption, a UA-secure DH protocol over a group \( G \) is treplication-secure if the transcript core \( \tau \) includes the session identifier sid and the two DH values \( g^x \) and \( g^y \).

### Treplication Security of PSK Protocols
We consider PSK key-exchange protocols where the parties use a symmetric key they previously shared. For UA-secure PSK protocols without forward secrecy, we investigate the conditions under which they are treplication-secure.

**Basic-UA-PSK Protocol:**
- Parties exchange nonces and derive a session key from their PSK and nonces.
- This protocol cannot be made treplication-secure even if the full transcript (nonces) is included in \( \text{sid}^* \).

**Extended Protocol:**
- The extended protocol includes explicit authentication where the server sends a MAC computed on the nonces with a MAC key derived from the PSK.
- This protocol is not treplication-secure for generic MAC functions but can be proven secure under mild assumptions on MAC security.

### One-pass (0-RTT) Protocols
TLS 1.3 supports a 0-RTT handshake, a one-pass authenticated key-exchange protocol where authentication is carried through the use of a pre-shared key. This mode is used for session resumption in TLS 1.3.

**Security:**
- One-pass protocols can be framed in the CK model and proven to be UA-secure.
- Applying SIGMAC to this protocol, MAC-ing the identities of C and S, and signing the client's nonce (which acts as sid) can be done, but the protocol is not treplication-secure.
- To fix this, the server's identity (or a value derived from it) must be included in the transcript core.

### Proof of the SIGMAC Compiler
We prove the security of the SIGMAC compiler for treplication-secure protocols, assuming the MAC and signature functions used in SIGMAC are secure in the standard chosen-message unforgeability sense.

**Theorem 3:**
Let \( \Pi_1 \) be a secure unilaterally authenticated KE protocol that is also treplication-secure with transcript core \( \tau \) and set \( \text{sid}^* \) to the concatenation of the session id sid and \( \tau \). Then, the protocol \( \Pi_2 \) resulting from the application of the SIGMAC compiler with this \( \text{sid}^* \) is a secure mutually authenticated KE protocol.

Before proving the theorem, we recall some of the adversarial actions in each model and how they differ in the case of treplication-secure protocols.