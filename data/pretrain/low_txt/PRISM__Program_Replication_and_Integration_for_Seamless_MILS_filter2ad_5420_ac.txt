### Maintaining Total Editing Time

- **o:Characters**: This tag is updated when the number of non-space characters in the document changes.
- **o:CharactersWithSpaces**: This tag is updated when the number of characters, including spaces, in the document changes.
- **o:Words**: This tag is updated when the number of words in the document changes.
- **o:Paragraphs**: This tag is updated when the number of paragraphs in the document changes.
- **o:Lines**: This tag is updated when the number of lines in the document changes.
- **o:Pages**: This tag is updated when the number of pages in the document changes.

### Solution for Tag Management

- The `o:Created` tag should be created at the lowest security level of the document.
- The `o:LastSaved`, `o:LastPrinted`, and `o:TotalTime` tags must be deleted or copied from the old version in all but the lowest security-level copy of the document.
- The `o:Revision` tag must be deleted before storage in the MLSDoc container. However, this tag can be generated before loading the MLSDoc into Word by substituting the revision numbers for each security level in the MLSDoc file.
- Other statistical properties tags are recalculated when Word loads the document and may be safely removed for storage in the MLSDoc container.

### Problem with New Styles

- When editing text at a higher security level, new styles may be added to the document. If the same document is edited at a lower level and a new style is added, there is a possibility of a style name being used more than once, which could confuse Word and/or the user.

### Solution for Style Management

- Add all styles at the lowest security level of the document to ensure they are available at all security levels and avoid name clashes. For example, use a template as discussed earlier.

### Problem with XML Entity Order

- When Word loads and saves an XML document, it sometimes alters the order of tags for some XML entities. For instance, a document containing multiple `o:SmartTagType` entities as the first children of the `w:wordDocument` entity may be reordered when loaded and immediately saved using the "save as" option.

### Solution for Canonical Order

- Define a canonical order for these elements and transform the document into this order. XSLT code to achieve this using alphanumerical ordering of `SmartTag` elements based on their `name` attributes is provided in Listing 1.

### Problem with Metadata Tags

- New metadata entity tags such as `w:rsid` and `w:proofState` appear and disappear during document editing.

### Solution for Optional Tags

- Delete optional tags such as `w:rsid` and `w:proofState` before generating the MLSDiff for storage in an MLSDoc container.

### Problem with `aml:annotation` Elements

- The `aml:annotation` element represents tracked insertions, deletions, formatting changes, comments, or bookmarks in a document. It contains the `aml:id` attribute, which is numbered sequentially. Any insertion or deletion of an `aml:annotation` element will alter the numbering of all subsequent `aml:annotation` elements, causing BLP policy violations and TCB patch rejection.

### Solution for `aml:annotation` Attributes

- Strip the `aml:id` attribute from `aml:annotation` elements before inserting them into or diffing against the MLSDoc file. When the file is subsequently loaded and saved by Word, some of these elements may be lost. For example, insertions with a `w:type` attribute of "Word.Insertion" are retained, and a new `aml:id` attribute is generated if missing. Bookmark tags with a `w:type` attribute of "Word.Bookmark.Start" or "Word.Bookmark.End" are not saved by Word and need to be removed from the document before storage in an MLSDoc container.

### Problem with Third-Party Applications

- Third-party applications like OpenOffice and different versions of Word typically write files using different detailed representations of the information. This can lead to syntactic differences that foil MLSDoc’s strict byte-based BLP policy checks.

### Solutions for Application Compatibility

- **Solution 1**: If transitioning to new application software at all security levels, reconstruct the document by transferring to the new application at the lowest security level and migrating upwards through each level, manually importing higher-level content.
- **Solution 2**: Use a tighter canonical form for the document, achieved by improving file format standards or with more extensive XML pre-processing.

### Problem with High-Level Cross References

- High-level cross references to low-level objects will break if the low-level objects are renamed or removed, which would be particularly problematic if low-level labels were reused.

### Solutions for Cross References

- **Solution 1**: The untrusted add-in could draw any broken references to the user’s attention and assist them in repairing any broken associations.
- **Solution 2**: The low-level add-in could encode remapping information into the document for transmission to the high-level add-in, which would enact any necessary substitutions. This could be achieved by an intelligent low-level differ or a more powerful option as discussed in Section X on Future Work.

### PRISM Add-in for Word

- We developed a .NET-based PRISM add-in for Word using Microsoft Visual Studio Tools for Office (VSTO) to automate MLSDoc processing within a standard "creation/load; edit; save" workflow.
- The add-in provides a "create new document" dialog box for creating a new MLSDoc and an "open existing document" dialog box for opening an existing MLSDoc container. The MLSDoc is assembled into a Word 2003 WordprocessingML file and loaded.
- The add-in uses Word’s standard document protection mechanisms to insert read-only tags throughout the document to prevent accidental alteration of lower-level data, which would be subsequently rejected by the TCB.
- A "save document as" dialog box is also provided, which intercepts document save operations to carry out the following transformations: deletion of problematic XML entities, reordering attributes into a canonical alphanumeric order, XDL diffgram generation, and MLSDiff patch generation.
- After these transformations, the xferd process sends the MLSDiff patch to the TCB for verification, patching, and redistribution. The Word add-in monitors the file system to reload the updated MLSDoc when it is received from the TCB or changes from another security level.

### Seamless User Experience

- By restricting how the user interacts with the system, multiple SLS instantiations of a COTS application can appear to behave as a single MLS instantiation, delivering a seamless user experience almost indistinguishable from native MLS.
- In the context of using Microsoft Word to edit an MLSDoc on an Annex Minisec platform, our method is also suitable for integrating other COTS applications replicated inside a separation kernel or virtualization-based isolation environment.
- The Minisec’s TCB mediates each MILS partition’s access to a display, mouse, and keyboard. In its current version, Minisec3, the TCB instantiates three minimal VNC clients in separate Annex OCRM objects, each connecting to a VNC server running in a different hardware-isolated MILS partition.
- Each VNC client interacts with a separate, dedicated TCB-virtualized frame buffer, mouse, and keyboard, only one set of which is synced through to the real underlying hardware at any point in time, depending on the state of the Minisec’s trusted buttons.
- Coupled with our PRISM architecture, the Minisec’s secure KVM-like functionality provides an excellent basis for a seamless, MLS-like user experience. Figure 6 demonstrates this seamlessness in the context of editing a Microsoft Word document in a national security classified environment.

### Automatic Sync-and-Switch

- We extended the Minisec user’s ability to switch between partitions using a trusted button by performing a synchronization step when they "double-press." This causes the TCB to send a message initiating a document save in the original partition, switch the keyboard, mouse, and video as normal, and, when in convenience mode or changing to a higher level in paranoid mode, send another message to reload the document in the newly active partition.
- By carefully pre-arranging a consistent window geometry between partitions, switching security levels appears to simply refresh which data is currently visible to the user. All other user interface elements remain essentially intact and consistent.
- Our untrusted PRISM add-in also applies thematic window colorizations (in sync with the TCB lighting the appropriate trusted button) to help the user quickly identify the new security level at which they are now operating.
- The add-in uses Word’s built-in document protection methods to mark any text at the current classification as read/write, while other sections are marked read-only. Word highlights the read/write sections in yellow, clearly identifying the at-level sections to the user and helping them only edit parts of the document that the TCB-enforced BLP security policy verification step will allow.

### MLS Copy-and-Paste

- The VNC protocol’s cuttext message type provides a simple mechanism for sharing clipboard buffer contents between an untrusted VNC server and its corresponding VNC client.
- We used this to provide MLS copy-and-paste between MILS partitions by developing an OCRM-protected communication channel that permits BLP information flow between each VNC instance’s clipboard.
- After an object is copied into a VNC server’s clipboard and received by the corresponding VNC client, the TCB automatically copies the clipboard contents to all higher-level VNC clients and hence to the VNC servers in the corresponding MILS partitions.
- The user can then switch to any higher-level partition and paste the updated clipboard contents into any supported application, providing a convenient and intuitive mechanism for regrading content and sharing it between unmodified COTS applications running at different security levels.
- We have also developed an OCRM-based downgrade application that allows a user to view text-based clipboard contents in a trusted, TCB-hosted viewer and manually regrade the content to a lower level.

### MLS Filing System

- To help users organize their MLS files, the mlsfs module manages several namespaces to provide users with a secure and intuitive view of where files originated and what higher levels of data have been added to them.
- To minimize user confusion, we aimed to provide a synchronized namespace for all files across all levels. However, to prevent filenames from being used as a covert channel, our TCB-enforced security policy insists that file creation (or renaming) may only take place at the lowest security level at which that file will exist.
- Lower levels should remain oblivious of such a file’s existence, and higher-level partitions may only embed further data content within the file.
- With these restrictions in mind, mlsfs polyinstantiates lower-level directory trees upwards to higher levels. For an unclassified partition, this results in a single directory tree:
  - `/mls/unclassified/` (data:rw, namespace:rw)
- The view from a secret-level partition contains two trees:
  - `/mls/unclassified..secret/` (data:rw, namespace:ro)
  - `/mls/secret/` (data:rw, namespace:rw)
- The root path `unclassified..secret` indicates that the namespace is maintained by the `unclassified` partition (and is hence read-only at this level), but the files may contain additional content ranging up to `secret`.
- This arrangement permits MLS documents containing unclassified information to include secret-level content. The second tree, `tree2`, provides a mechanism for creating files containing a minimum of secret-level data, and whose very existence is even kept secret from lower levels.
- The view from a top-secret partition is similarly constructed:
  - `/mls/unclassified..topsecret/` (data:rw, ns:ro)
  - `/mls/secret..topsecret/` (data:rw, ns:ro)

This revised text aims to be more clear, coherent, and professional, making it easier to understand the technical details and solutions described.