# M2cloud: Software-Defined Multi-Site Data Center Network Control Framework for Multi-Tenant Environments

**Authors:** Zhongjin Liu, Yong Li, Li Su, Depeng Jin, Lieguang Zeng  
**Affiliation:** Department of Electronic Engineering, Tsinghua University, Beijing 100084, China  
**Contact Email:** [Your Email Here]

## Abstract
Cloud operators face the challenge of providing global network performance isolation for concurrent tenants. To address this, we propose M2cloud, a software-defined framework that offers scalable network control for multi-site data centers (DCs). M2cloud utilizes a two-level controller architecture with decoupled functions, providing flexible virtualization support for both intra- and inter-DC networks.

**Categories and Subject Descriptors:** C.2.1 [Network Architecture and Design]  
**General Terms:** Design  
**Keywords:** SDN, multi-tenant, multi-site, data center networks

## 1. Introduction
Cloud service providers operate multiple data centers in distributed locations, offering diverse applications and resilient infrastructures. To provide high-availability services to global users, especially for delivering fast-growing mobile content, large volumes of data need to be transferred between sites, making inter-DC traffic a significant portion of backbone links.

Data center tenants deploy their applications across virtual machines (VMs) in one or more sites. Cloud operators require effective inter-DC traffic optimization and cross-site performance isolation for tenants, but current solutions lack the ability to provide joint intra- and inter-DC network control [1].

In this paper, we present M2cloud, a software-defined multi-site data center control framework that supports virtualization across multiple data centers, enabling tenant-specific performance optimization. The two-level controller architecture includes device configuration, network virtualization, and decoupled APIs, balancing scalability and performance. Simulation results demonstrate improved inter-DC bandwidth utilization and balanced global workloads through M2cloud.

## 2. Design Principles

### 2.1 Design Goals
M2cloud is designed to enable flexible network control in both intra- and inter-DC networks, providing an exclusive isolated network environment for each tenant. It aims to balance flexibility, scalability, and performance.

### 2.2 Network Control Architecture
The key idea behind M2cloud is the use of two-level controllers. Network functions are categorized into two types: low-latency, high-performance tasks (e.g., forwarding table configuration) are handled locally, while global tasks (e.g., inter-DC traffic engineering and workload balancing) are managed by a global controller. This architecture is illustrated in Figure 1.

Geographically distributed data centers are interconnected via programmable border gateways controlled by a logically centralized global controller. The global controller has a full view of the interconnection network, enabling global traffic engineering and workload balancing among DCs. Local controllers manage network devices within a single data center, installing flow rules on both physical and software switches.

### 2.3 Building Blocks
Controllers in M2cloud are interconnected to support joint intra- and inter-DC resource slicing. Local controllers are connected to the global controller, exchanging local events and sharing network views. The building blocks of the controllers are shown in Figure 2.

#### Global Controller
- **Lowest Layer:** Monitors interconnection network topology and real-time traffic.
- **Virtualization Layer:** Provides separate DC-DC paths for each tenant.
- **APIs:** Open to administrators and tenants for different purposes. Administrator APIs manage substrate devices and build virtual networks, while tenant APIs manage virtualized network resources, including topology control and traffic engineering.
- **Tunneling Mechanism:** Enables communication among local controllers in different sites.

#### Local Controller
- **Driver Layer:** Configures switches, monitors topology, builds virtual networks, and accesses flow tables within a data center.
- **Virtual Layer:** Provides virtual network control functions.
- **Abstraction Layer:** Integrated with VM management tools like OpenStack to manage both computing and network resources.
- **APIs:** Authorized for administrators and tenants with different control scopes.

## 3. Preliminary Results
To demonstrate M2cloud's ability to support cross-site management, we present a use case of migrating VMs across data centers, as shown in Figure 3.

We evaluated the VM migration performance using numerical simulations. Concurrent 10GB VM migration requests were generated among 30 data centers shared by two tenants. The topology was randomly generated with a link bandwidth of 100Mbps. Randomly generated background traffic simulated client traffic. In the baseline setting, migration destinations were random, and shortest path routing was used. In M2cloud, VMs can migrate to the site with the lowest workload, and traffic from different tenants can follow optimal paths with the highest bandwidth. Table 1 compares the performance, showing that M2cloud improves bandwidth utilization by over 24% and balances workloads more effectively.

| **Tenant** | **Migration Time (min)** | **Bandwidth Utilization (%)** | **Workload Std. Deviation (%)** |
|------------|--------------------------|-------------------------------|----------------------------------|
| 1          | 34.6/17.5                | 38.5/76.2                     | 23.76/10.65                      |
| 2          | 34.6/21.3                | 38.5/62.6                     | 23.76/8.2                        |

## 4. Acknowledgements
This work is supported by the National Basic Research Program of China (973 Program) (No. 2013CB329105), National Nature Science Foundation of China (No. 61171065, No. 61021001, No. 61133015), National High Technology Research and Development Program (No. 2013AA010601 and No. 2013AA010605), and Program for Changjiang Scholars and Innovative Research Team in University (PCSIRT).

## 5. References
[1] M. Banikazemi, D. Olshefski, A. Shaikh, et al. Meridian: An SDN Platform for Cloud Network Services. IEEE Communications Magazine, 51(2):120–127, 2013.

[2] Y. Li, P. Hui, D. Jin, et al. Evaluating the Impact of Social Selfishness on the Epidemic Routing in Delay Tolerant Networks. IEEE Communications Letters, 14(11):1026–1028, November 2010.

[3] Y. Li, Z. Wang, D. Jin, et al. Collaborative Vehicular Content Dissemination with Directional Antennas. IEEE Transactions on Wireless Communications, 11(4):1301–1306, April 2012.

[4] R. Sherwood, M. Chan, A. Covington, et al. Carving Research Slices Out of Your Production Networks with OpenFlow. ACM SIGCOMM Computer Communication Review, 40(1):129–130, 2010.

---

**Note:** Figures 1, 2, and 3 should be included in the final document to provide visual context for the described architecture and use cases.