### Investigating the Compatibility Cost of Eliminating Insecure Policies in Modern Browsers

In today's web environment, it is crucial to examine the compatibility costs associated with eliminating insecure policies in browsers. We have considered several policies that, while differing from current browser implementations, offer enhanced security. This preliminary study aims to provide an initial insight into the topic, though it is not exhaustive or conclusive.

#### Methodology
Our study primarily utilized a dataset consisting of the front pages of the top 100 most popular websites, as ranked by Alexa [5]. We employed a combination of browser instrumentation, automatic script execution, and manual inspection. Any visual differences in the rendering of a web page were deemed a violation of compatibility.

#### Findings

**Subdomain Treatment**
Existing browsers and the Same-Origin Policy (SOP) make exceptions for subdomains (e.g., news.google.com is a subdomain of google.com) [39]. A page can set the `document.domain` property to a suffix of its domain, thereby assuming that identity. This feature was one of the few methods for cross-origin frames to communicate before the introduction of `postMessage` [25]. However, changing `document.domain` is a risky practice and violates the Principle of Least Privilege: once a subdomain sets its domain to a suffix, it has no control over which other subdomains can access it. Zalewski [48] also observed this issue. Therefore, it would be more secure to disallow a subdomain from setting `document.domain`.

Our experiments indicate that six of the top 100 Alexa sites set `document.domain` to a different origin. Restricting write access to `document.domain` might not break the operation of these websites, but it would enhance security.

**Mixed HTTPS and HTTP Content**
When an HTTPS site embeds HTTP content, browsers typically warn users about mixed content. This is because while the HTTPS site’s content is protected against network attackers, the embedded HTTP content remains vulnerable.

If an HTTPS site embeds a script or style sheet delivered via HTTP, existing browsers allow the script to run with the HTTPS site’s privileges (after the user ignores the mixed content warning). This is dangerous because a network attacker can compromise the HTTP-transmitted script and attack the HTTPS principal. A more secure policy would be to deny the rendering of HTTP-transmitted scripts or style sheets for an HTTPS principal.

We identified a few sites that provide SSL sessions for parts of their web applications, such as amazon.com, mail.google.com, mail.microsoft.com, blogger.com, and some popular banking sites. These sites do not violate this policy. Additionally, data from one of the author’s browsing sessions over a few months showed that out of 5,500 unique SSL URLs, less than two percent included HTTP scripts and CSS.

**Layout Policies**
The opaque overlay policy allows only opaque (not transparent) cross-origin frames or objects. We tested this policy with the top 100 Alexa sites and found that two out of 100 sites attempt to violate this policy. This policy does not generate rendering errors; instead, we convert transparent cross-origin elements to opaque elements when displaying content.

We also tested the 2D display delegation policy, which we analyzed in Section 5.2. This policy has a higher compatibility cost: six of the top 100 sites attempt to violate it. Sites that violate either policy may have reduced functionality and will render differently than intended by the web page author.

**Plugins**
Existing plugin software must be adapted (ported or binary-rewritten) to use browser kernel system calls to accomplish its tasks. Of the top 100 Alexa sites, 34 use Flash, but no other types of plugins. This indicates that porting or adapting Flash alone can address a significant portion of the plugin compatibility issue.

### Concluding Remarks
We have presented Gazelle, the first web browser that qualifies as a multi-principal OS for website principals. Gazelle’s browser kernel exclusively manages resource protection, unlike existing browsers, which allow cross-principal protection logic to reside in the principal space. This design provides the security and robustness benefits of a multi-principal OS: a compromise or failure of one principal leaves other principals and the browser kernel intact.

Our browser construction exposes challenging design issues, such as providing legacy protection to cross-origin script sources and cross-principal, cross-process display, and event protection. We are the first to provide comprehensive solutions to these issues.

The implementation and evaluation of our IE-based prototype show promise for a practical multi-principal OS-based browser in the real world. In future work, we will explore fair sharing of resources among website principals in our browser kernel and conduct a more in-depth study of the trade-offs between compatibility and security in browser policy design.

### Acknowledgments
We thank Spencer Low, David Ross, and Zhenbin Xu for their constant help and fruitful discussions. We also thank Adam Barth and Charlie Reis for their detailed and insightful feedback on our paper. Additional thanks go to Barry Bond, Jeremy Condit, Rich Draves, David Driver, Jeremy Elson, Xiaofeng Fan, Manuel Fandrich, Cedric Fournet, Chris Hawblitzel, Jon Howell, Galen Hunt, Eric Lawrence, Jay Lorch, Rico Malvar, Wolfram Schulte, David Wagner, Chris Wilson, and Brian Zill. We also appreciate the feedback from our paper shepherd, Niels Provos, over our last revisions.

### References
[1] Changes in allowScriptAccess default (Flash Player). http://www.adobe.com/go/kb403183.
[2] Developer center: Security changes in Flash Player 7. http://www.adobe.com/devnet/flash/articles/fplayer_security.html.
[3] Security advisories for Firefox 2.0. http://www.mozilla.org/security/known-vulnerabilities/firefox20.html.
[4] .NET Framework Developer Center, 2008. http://msdn.microsoft.com/en-us/netframework/default.aspx.
[5] Alexa, 2009. http://www.alexa.com/.
[6] M. Barnett, K. Rustan, M. Leino, and W. Schulte. The Spec# programming system: An overview. In LNCS, editor, CAS-SIS, volume 3362. Springer, 2004. http://research.microsoft.com/en-us/projects/specsharp/.
[7] A. Barth and C. Jackson. Protecting browsers from frame hijacking attacks, April 2008. http://crypto.stanford.edu/websec/frames/navigation/.
[8] A. Barth, C. Jackson, and J. C. Mitchell. Securing frame communication in browsers. In Proceedings of the 17th USENIX Security Symposium (USENIX Security), 2008.
[9] A. Barth, C. Jackson, C. Reis, and T. G. C. Team. The security architecture of the Chromium browser, 2008. http://crypto.stanford.edu/websec/chromium/chromium-security-architecture.pdf.
[10] S. Chen, D. Ross, and Y.-M. Wang. An Analysis of Browser Domain-Isolation Bugs and A Light-Weight Transparent Defense Mechanism. In Proceedings of the ACM Conference on Computer and Communications Security, 2007.
[11] R. S. Cox, J. G. Hansen, S. D. Gribble, and H. M. Levy. A Safety-Oriented Platform for Web Applications. In Proceedings of the IEEE Symposium on Security and Privacy, 2006.
[12] D. Crockford. JSONRequest. http://www.json.org/jsonrequest.html.
[13] D. Crockford. The Module Tag: A Proposed Solution to the Mashup Security Problem. http://www.json.org/module.html.
[14] Document Object Model. http://www.w3.org/DOM/.
[15] J. R. Douceur, J. Elson, J. Howell, and J. R. Lorch. Leveraging legacy code to deploy desktop applications on the web. In Proceedings of the Symposium on Operating Systems Design and Implementation, 2008.
[16] Firefox 3 for developers, 2008. https://developer.mozilla.org/en/Firefox_3_for_developers.
[17] Mozilla Browser and Mozilla Firefox Remote Window Hijacking Vulnerability, 2004. http://www.securityfocus.com/bid/11854/.
[18] Security Advisories for Firefox 2.0. http://www.mozilla.org/security/known-vulnerabilities/firefox20.html.
[19] D. Flanagan. JavaScript: The Definitive Guide. O’Reilly Media Inc., August 2006.
[20] Adobe Flash Player 9 Security, July 2008. http://www.adobe.com/devnet/flashplayer/articles/flash_player_9_security.pdf.
[21] C. Grier, S. Tang, and S. T. King. Secure web browsing with the OP web browser. In Proceedings of the 2008 IEEE Symposium on Securiy and Privacy, 2008.
[22] J. Grossman. Advanced Web Attack Techniques using GMail. http://jeremiahgrossman.blogspot.com/2006/01/advanced-web-attack-techniques-using.html.
[23] W. H. A. T. W. Group. Web Applications 1.0, February 2007. http://www.whatwg.org/specs/web-apps/current-work/.
[24] HTML 5 Editor’s Draft, October 2008. http://www.w3.org/html/wg/html5/.
[25] What’s New in Internet Explorer 8, 2008. http://msdn.microsoft.com/en-us/library/cc288472.aspx.
[26] Microsoft Internet Explorer Remote Window Hijacking Vulnerability, 2004. http://www.securityfocus.com/bid/11855.
[27] S. Ioannidis and S. M. Bellovin. Building a secure web browser. In Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference, 2001.
[28] S. Ioannidis, S. M. Bellovin, and J. M. Smith. Sub-operating systems: a new approach to application security. In Proceedings of the 10th workshop on ACM SIGOPS European workshop, pages 108–115, New York, NY, USA, 2002. ACM.
[29] C. Jackson and A. Barth. Beware of Finer-Grained Origins. In Web 2.0 Security and Privacy, May 2008.
[30] C. Jackson, A. Barth, A. Bortz, W. Shao, and D. Boneh. Protecting Browsers from DNS Rebinding Attacks. In Proceedings of ACM Conference on Computer and Communications Security, 2007.
[31] JavaScript Object Notation (JSON). http://www.json.org/.
[32] D. Kristol and L. Montulli. HTTP State Management Mechanism. IETF RFC 2965, October 2000.
[33] T. W. Mathers and S. P. Genoway. Windows NT Thin Client Solutions: Implementing Terminal Server and Citrix MetaFrame. Macmillan Technical Publishing, Indianapolis, IN, November 1998.
[34] IEBlog: IE8 Security Part V: Comprehensive Protection, 2008. http://blogs.msdn.com/ie/archive/2008/07/02/ie8-security-part-v-comprehensive-protection.aspx.
[35] Microsoft security bulletin. http://www.microsoft.com/technet/security/.
[36] Microsoft Security Intelligence Report, Volume 5, 2008. http://www.microsoft.com/security/portal/sir.aspx.
[37] C. Reis and S. D. Gribble. Isolating web programs in modern browser architectures. In Proceedings of Eurosys, 2009.
[38] T. Richardson, Q. Stafford-Fraser, K. R. Wood, and A. Hopper. Virtual network computing. IEEE Internet Computing, 2(1):33–38, 1998.
[39] J. Ruderman. The Same Origin Policy. http://www.mozilla.org/projects/security/components/same-origin.html.
[40] R. W. Scheifler and J. Gettys. The X window system. ACM Transactions on Graphics (TOG), 5(2):79–109, April 1986.
[41] J. S. Shapiro, J. Vanderburgh, E. Northup, and D. Chizmadia. Design of the EROS TrustedWindow system. In Usenix Security, 2004.
[42] Symantec Global Internet Security Threat Report: Trends for July - December 07, April 2008.
[43] H. J. Wang, X. Fan, J. Howell, and C. Jackson. Protection and Communication Abstractions in MashupOS. In ACM Symposium on Operating System Principles, October 2007.
[44] Cross-Domain Vulnerability in Microsoft Internet Explorer 6. http://cyberinsecure.com/cross-domain-vulnerability-in-microsoft-internet-explorer-6/.
[45] The XMLHttpRequest Object. http://www.w3.org/TR/XMLHttpRequest/.
[46] W3C XMLHttpRequest Level 2. http://dev.w3.org/2006/webapi/XMLHttpRequest-2/.
[47] B. Yee, D. Sehr, G. Dardyk, B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar. Native client: A sandbox for portable, untrusted x86 native code. In Proceedings of the IEEE Symposium on Security and Privacy, May 2009.
[48] M. Zalewski. Browser security handbook, 2008. http://code.google.com/p/browsersec/wiki/Main.