### Issue Submission

- [X] Bug Report - Please search GitHub for similar issues or pull requests before submitting.
- [ ] Feature Request
- [ ] Support Request - For support, please refer to the [Angular Contribution Guidelines](https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question).

### Current Behavior

We have the following component hierarchy:
- `baseControl` -> `inputBaseControl` -> `inputControl`
- `baseControl` -> `textControl`

The `baseControl` constructor injects three objects: `Renderer`, `ElementRef`, and `ChangeDetectorRef`. If derived classes do not explicitly call the `super` constructor, these injected objects are `undefined`.

### Expected Behavior

We expect that the injected objects should be correctly available in derived classes even if they do not explicitly call the `super` constructor, as was the case in Angular 2.4.1.

### Minimal Reproduction of the Problem with Instructions

For example, `inputControl` explicitly calls the `super` constructor and works as expected. However, `textControl` does not call the `super` constructor and fails to work correctly.

**Reproduction Link:**
[Plunker Example](https://plnkr.co/edit/xXqJCy?p=preview)

### Motivation / Use Case for Changing the Behavior

This change is necessary to ensure that inheritance is managed in a standard and consistent manner.

### Environment Details

- **Operating System:** Windows 10
- **IDE:** Visual Studio 2017
- **Package Manager:** NPM
- **Web Server:** Kestrel
- **Angular Version:** 4.0.0
- **Browser:** Chrome 56
- **Language:** TypeScript 2.2.1
- **Node.js Version (for AoT issues):** 7.7.2

---

This optimized version of your text is more structured and clearly conveys the issue, expected behavior, and environment details.