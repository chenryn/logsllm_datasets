### Attack Scenarios

An adversary can attempt to attack the confidentiality or the unforgeability of the redactable signature scheme. Below, we detail the two types of attacks and their respective definitions.

#### Confidentiality Attack
- **Guess**: The adversary outputs a guess \( b' \in \{0, 1\} \).
- **Winning Condition**: The adversary wins if \( b = b' \).
- **Advantage**: The advantage of the adversary in attacking the scheme is defined as:
  \[
  \left| \Pr[b = b'] - \frac{1}{2} \right|
  \]

#### Unforgeability Attack
- **Output**: The adversary outputs a tuple \( (m, L, L', SG, SM, \sigma) \).
- **Winning Condition**: The adversary wins if no sign or redact query has been issued for any document \( m' \) such that \( m' \preceq m \) or \( m' \preceq mb \) in Phase 1 or 2, and if \( \text{Verify}(m, L, L', SG, SM, \sigma) \) returns true.
- **Advantage**: The advantage of the adversary in attacking the scheme is the probability that the above conditions are met.

### Theorem 1
Assume that \( H \) is a collision-free hash function, \( S \) is a digital signature scheme secure against existential forgery, \( C \) is a secure commitment scheme, and \( G \) is a secure pseudorandom generator. Then, the algorithm presented in §3 is an efficient and secure redactable-signature scheme.

We provide a sketch of the proof in §5.2 below. The efficiency of the algorithm is described in §3 and §4.

### Security Analysis
The security of the redactable-signature scheme is based on the security properties of collision-free hash functions, commitment schemes with hiding and binding properties, and signature schemes secure against existential forgery. We provide informal definitions of these security properties, omitting their formal definitions for brevity.

#### Security of Collision-Free Hash Function
A polynomial-time adversary has a negligible probability of finding two different messages \( m \neq m' \) with identical hash values.

#### Security of Commitment Scheme with Binding and Hiding Properties
- **Hiding Property**: A polynomial-time adversary has a negligible probability of identifying the message from a commitment, chosen randomly from two messages of her choice.
- **Binding Property**: A polynomial-time adversary has a negligible probability of finding a commitment that can be opened to two different messages [9].

#### Security of Signature Scheme with Existential Unforgeability
A polynomial-time adversary has a negligible probability of forging a valid signature \( \sigma \) on a message \( m \) such that the signer has never signed \( m \) [7].

### Proof of Theorem 1
Let \( A \) be an adversary with a non-negligible advantage against our redactable-signature scheme. We construct an adversary \( B \) that uses \( A \) to gain an advantage against the collision-free hash function, the secure commitment scheme, the secure signature scheme, or the secure pseudorandom generator. Adversary \( B \) acts as the challenger for \( A \) and uses \( A \)'s outputs as her own outputs. The steps are as follows:

#### Setup
- \( B \)'s challenger chooses a hash function \( H \), a commitment scheme \( C \), a signature scheme \( S \), and a pseudorandom generator \( G \) for \( B \) to break.
- \( B \)'s challenger gives \( B \) the public key \( PK \) of the signature scheme \( S \).
- \( B \) provides the adversary \( A \) with the public parameters \( (PK, H, C, S, G) \). Note that \( B \) does not know the private key \( SK \) of the signature scheme \( S \).

#### Phase 1
\( B \) answers \( A \)'s queries as follows. The queries may be asked adaptively, and the queried documents at each query may be distinct.

1. **Commit Query** (\( m \)):
   - \( B \) runs the first several operations in the Sign algorithm on input \( m \), including building a GGM tree, computing commitments, building a Merkle hash tree over commitments, and gathering auxiliary information.
   - All these values are given to the adversary \( A \).

2. **Sign Query** (\( h \)):
   - \( B \) cannot sign the root hash \( h \) of any Merkle tree because she does not have the private key.
   - Therefore, \( B \) submits a signing query on the root hash to her challenger (of the signature scheme to break) and obtains a signature \( \sigma \).
   - Signature \( \sigma \) is given to the adversary \( A \).

3. **Redact Query** (\( m, L, L' \)):
   - \( B \) runs a commit query and a sign query on \( m \) to obtain the signature \( \sigma \), along with the seed needed for the GGM tree.
   - \( B \) then runs the Redact algorithm, following the instructions in \( L \) and \( L' \) to redact or mark as non-redactable the appropriate subdocuments in \( m \), and computes the appropriate extended signature.

Once \( A \) decides that Phase 1 is over, if she chooses, she can issue a challenge for attacking confidentiality.

#### Confidentiality Challenge
- **Challenge**: \( A \) outputs two equal-length documents \( m_0 \) and \( m_1 \) on which to be challenged, such that \( m_0 \) and \( m_1 \) are identical except in the \( i^* \)-th subdocument (along with Redact instruction lists \( L \) and \( L' \), with \( i^* \in L \)).
- **Embedding the Challenge**: \( B \) needs to embed her commitment challenge in \( A \)'s challenge. The \( i^* \)-th subdocuments in \( m_0 \) and \( m_1 \) are \( B \)'s two messages of choice for breaking the hiding property of the commitment scheme \( C \).
- **Challenger's Action**: \( B \)'s challenger picks a random bit \( b \in \{0, 1\} \) and computes a commitment of the \( i^* \)-th subdocument in \( m_b \). Denote this challenge as \( C_b \).
- **Constructing the Document**: \( B \) computes the commitments of the other subdocuments in \( m_b \) (using either \( m_0 \) or \( m_1 \)) and obtains the root hash of the commitments.
- **Finalizing the Challenge**: \( B \) asks her challenger to sign the root hash (as in a sign query) and obtains signature \( \sigma^* \). For auxiliary information \( (SG, SM) \), \( B \) chooses at random according to the protocol specifications.
- **Redaction**: \( B \) runs \( \text{Redact}(m_b, L, L', SG, SM, \sigma^*) \) to redact the \( i^* \)-th subdocument in \( m_b \), which can be computed without knowing the actual content of the subdocument.
- **Output to Adversary**: \( B \) gives the outputs of the Redact operation to the adversary \( A \) as the confidentiality challenge.

#### Phase 2
The adversary issues more queries, and \( B \) responds as in Phase 1.

#### Guess
- **Confidentiality Guess**: If \( A \) outputs a guess \( b' \in \{0, 1\} \), then \( B \) outputs \( b' \) as her guess for breaking the commitment scheme. Because of the way \( B \) constructed her own commitment-scheme challenge, \( B \)'s guess will be correct exactly when \( A \)'s guess is correct.
- **Unforgeability Guess**: \( A \) outputs \( (m, L, L', SG, SM, \sigma) \). We assume without loss of generality that no sign query has been issued for (the root hash corresponding to) any document \( \bar{m} \) satisfying \( \bar{m} \preceq m \) or \( \bar{m} \preceq mb \) in Phase 1 or 2. \( A \)'s advantage in attacking the scheme is the probability that \( \text{Verify}(L, M, SG, SM, \sigma) \) is true.

#### Converting A's Output to a Forgery
- **Case 1**: If \( \sigma \) is not equal to any of the signatures \( \bar{\sigma} \) returned to \( A \) in response to a previous query in Phase 1 or Phase 2, \( B \) constructs the Merkle hash tree for the redacted document \( m \) and obtains the root hash \( h_r \). Let \( h_1 \) and \( h_2 \) be the hash values at the two child nodes of the root node. In this case, \( \sigma \) is a correct signature for the message \( h_1 \| h_2 \) with respect to the public key \( PK \), and \( B \) can successfully attack the digital signature scheme.
- **Case 2**: If \( \sigma \) is equal to a signature \( \bar{\sigma} \) given to \( A \) in a previous query, corresponding to an extended signature \( (\bar{m}, \bar{L}, \bar{L'}, \bar{SG}, \bar{SM}, \bar{\sigma}) \):
  - \( B \) compares the Merkle hash trees constructed for \( m \) and \( \bar{m} \).
  - If the two trees differ in their root nodes, \( B \) can use this to produce a forgery for \( PK \).
  - If the two trees differ anywhere below the root, \( B \) has found a hash collision.
  - \( B \) compares the two GGM trees constructed for \( m \) and \( \bar{m} \). If \( B \) finds any index \( i \) with subdocuments \( m_i \neq \bar{m}_i \), then \( B \) has found a pair of messages that can be used to break the binding property of the commitment scheme.
  - Given \( m \not\preceq \bar{m} \), the only remaining case is that for some index \( i \), one of the following is true:
    - \( i \in \bar{L} \) but \( i \notin L \) (so that \( A \) has computed a subdocument of \( m \) that was already redacted from \( \bar{m} \)); \( B \) can use this to break the hiding property of the commitment scheme or the pseudorandom generator.
    - \( i \in \bar{L'} \) but \( i \in L \) (so that \( A \) has redacted a subdocument of \( m \) already marked as non-redactable in \( \bar{m} \)); \( B \) can use this to break the one-way property of the hash function or the pseudorandom generator.

### References
[1] G. Ateniese, D. H. Chou, B. de Medeiros, and G. Tsudik. Sanitizable signatures. In European Symposium on Research in Computer Security (ESORICS) 2005, volume 3679 of Lecture Notes in Computer Science. Springer-Verlag, 2005.
[2] G. Ateniese and B. de Medeiros. On the key-exposure problem in chameleon hashes. In SCN '04, volume 3352 of Lecture Notes in Computer Science. Springer-Verlag, 2004.
[3] A. Buldas and M. Saarepera. On provably secure time-stamping schemes. In Advances in Cryptology — ASIACRYPT 2004, volume 3329 of Lecture Notes in Computer Science, pages 500–514, October 2004.
[4] A. Buldas and M. Saarepera. Do broken hash functions affect the security of time-stamping schemes? In 4th International Conference on Applied Cryptography and Network Security – ACNS '06, volume 3989 of Lecture Notes in Computer Science, pages 50–65, 2006.
[5] O. Goldreich, S. Goldwasser, and S. Micali. How to construct random functions. Journal of the ACM, 33(4):792–807, 1986.
[6] S. Goldwasser and S. Micali. Probabilistic encryption. Journal of Computer and System Sciences, 28(2):270–299, April 1984.
[7] S. Goldwasser, S. Micali, and R. Rivest. A digital signature scheme secure against adaptively chosen message attacks. SIAM Journal on Computing, 17(2):281–308, 1988.
[8] S. Haber and W. Stornetta. Secure names for bit-strings. In Proceedings of the 4th ACM Conference on Computer and Communication Security, pages 28–35. ACM Press, April 1997.
[9] S. Halevi and S. Micali. Practical and provably-secure commitment schemes from collision-free hashing. In N. Koblitz, editor, Advances in Cryptology — CRYPTO '96, volume 1109 of Lecture Notes in Computer Science, pages 201–215. Springer-Verlag, 1996.
[10] T. Izu, N. Kanaya, M. Takenaka, and T. Yoshioka. PIATS: A partially sanitizable signature scheme. In ICICS 2005, volume 3783 of Lecture Notes in Computer Science, pages 72–83. Springer-Verlag, 2005.
[11] T. Izu, M. Sano, N. Kunihiro, K. Ohta, and M. Takenaka. Sanitizable signature schemes based on aggregate signature. In Proceedings of the Symposium on Cryptography and Information Security (SCIS2007), 2007. (In Japanese).
[12] R. Johnson, D. Molnar, D. Song, and D. Wagner. Homomorphic signature schemes. In Proceedings of the RSA Security Conference Cryptographers Track, volume 2271 of Lecture Notes in Computer Science. Springer-Verlag, February 2002. Available at http://www.ece.cmu.edu/~dawnsong/papers/hom-rsa02.pdf.
[13] A. Menezes, P. van Oorschot, and S. Vanstone. Handbook of Applied Cryptography. CRC Press, 1996.
[14] K. Miyazaki, G. Hanaoka, and H. Imai. Digitally signed document sanitizing scheme from bilinear maps. In 2005 Symposium on Cryptography and Information Security (SCIS2005), pages 1471–1476, January 2005.
[15] K. Miyazaki, G. Hanaoka, and H. Imai. Bit-by-bit sequence sanitizable digitally signed document sanitizing scheme. In Proceedings of the Symposium on Cryptography and Information Security (SCIS2006), 2006. (In Japanese).
[16] K. Miyazaki, G. Hanaoka, and H. Imai. Digitally signed document sanitizing scheme based on bilinear maps. In Proceedings of the 2006 ACM Symposium on Information, Computer and Communications Security (ASIACCS), 2006.
[17] K. Miyazaki, M. Iwamura, T. Matsumoto, R. Sasaki, and H. Yoshimura. Digital documents sanitizing problem. Technical Report ISEC2003-20, 2003. IEICE Technical Report.
[18] K. Miyazaki, M. Iwamura, T. Matsumoto, R. Sasaki, H. Yoshimura, S. Tezuka, and H. Imai. Digitally signed document sanitizing scheme with disclosure condition control. IEICE Transactions on Fundamentals of Electronics, Communications and Computer Sciences, E88-A(1):239–246, January 2005. Available at http://ietfec.oupjournals.org/cgi/reprint/E88-A/1/239.
[19] C. Rackoff and D. Simon. Non-interactive zero-knowledge proof of knowledge and chosen ciphertext attack. In J. Feigenbaum, editor, Advances in Cryptology — CRYPTO '91: Proceedings, volume 576 of Lecture Notes in Computer Science, pages 433–444. Springer-Verlag, 1992.
[20] M. Sano, T. Izu, N. Kunihiro, K. Ohta, and M. Takenaka. On sanitizable and deletable signature schemes. In Proceedings of the Symposium on Cryptography and Information Security (SCIS2007), 2007. (In Japanese).
[21] R. Steinfeld, L. Bull, and Y. Zheng. Content extraction signatures. In 4th International Conference on Information Security and Cryptology — ICISC 2001, volume 2288 of Lecture Notes in Computer Science, pages 285–304. Springer-Verlag, December 2001.
[22] M. Suzuki, T. Ishiki, and K. Tanaka. Sanitizable signature with secret information. In Proceedings of the Symposium on Cryptography and Information Security (SCIS2006), 2006.
[23] L. Sweeney. k-anonymity: A model for protecting privacy. International Journal of Uncertainty, Fuzziness and Knowledge-Based Systems, 10(5):557–570, 2002.
[24] L. Sweeney. Achieving k-anonymity privacy protection using generalization and suppression. International Journal of Uncertainty, Fuzziness and Knowledge-Based Systems, 10(5):571–588, 2002.