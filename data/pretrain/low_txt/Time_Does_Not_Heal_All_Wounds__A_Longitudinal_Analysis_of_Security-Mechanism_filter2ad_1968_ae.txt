### Our Findings and Their Implications

Our findings echo the challenges faced in client-side JavaScript development, where different browsers support varying APIs. Consequently, developers must either tailor their code to accommodate popular browsers or use libraries like jQuery, which abstract these differences. We argue that a similar, browser- and platform-aware framework is essential for the server side. This framework would be driven by a comprehensive database of supported security mechanisms for each version of every mobile browser, combined with information on the most popular platforms on which those browsers run.

Such a database could be automatically generated using tools and techniques similar to those described in this paper. By detecting the browser family, version, and operating system (OS) of a mobile device, the framework could then apply the appropriate security mechanisms for that specific combination. For example, if a mobile browser does not support the `ALLOW-FROM` directive, the framework could automatically emit a Content Security Policy (CSP) `frame-ancestor` header, even if the website does not explicitly use CSP. Similarly, for older versions of the Opera Mini browser that predate CSP adoption, the framework could inject frame-busting JavaScript code to check if the current website is framed and redirect the top-level page if so [34]. This technique was once popular before `X-Frame-Options` was standardized and can still serve as a fallback when browsers do not support more recent anti-clickjacking mechanisms. Finally, for browsers with significant deficiencies in security mechanism support (such as UC Mini), the framework could deny serving the website, thereby protecting users from potential attacks and encouraging browser developers to improve their security features.

### Mobile Browsers on Other Platforms

We chose to analyze the adoption of security mechanisms in mobile browsers, a domain that has been largely overlooked. App stores offer a variety of browsers, and our study reveals that different browsers provide varying levels of security. We focused specifically on Android due to the availability of development and dynamic-analysis tools, as well as its dominant market share. It's worth noting that a similar study on the iOS ecosystem, while possible, would likely yield less informative results, as Apple mandates the use of WebKit as the sole rendering engine for iOS [5]. Consequently, all mobile browsers on iOS are expected to exhibit the same level of security mechanism support due to their reliance on the same underlying engine.

### Related Work

To the best of our knowledge, our work is the first systematic and longitudinal study of the adoption of security mechanisms in mobile browsers. In this section, we briefly describe prior research in the areas of web security mechanisms and web-related mobile security.

#### Adoption of Security Mechanisms

Given the importance of security mechanisms, researchers have investigated their use in the wild. In 2010, Zhou and Evans conducted a small-scale experiment measuring the adoption of `HTTPOnly` cookies and discussed reasons for the low adoption rate [50]. Weissbacher et al. performed the first study on CSP adoption, finding that CSP lagged behind other security mechanisms [49]. Kranch and Bonneau conducted a similar study for the HTTP Strict Transport Security (HSTS) mechanism [20]. Van Goethem et al. quantified the adoption of various security mechanisms on the web, discovering a positive correlation between a website's ranking and its use of security mechanisms [43]. In 2016, Weichselbaum et al. conducted a new study on CSP, finding that many developers were authoring vulnerable CSP policies [48].

More recently, Mendoza et al. investigated inconsistencies in the security mechanisms used on pages designed for mobile browsers versus those designed for desktop browsers [26]. Our work complements their research by quantifying whether mobile browsers can enforce these security mechanisms, assuming web developers configure them correctly. Researchers have also used the presence of properly configured security mechanisms as a proxy for overall website security without the need for intrusive scanning [42, 44, 45, 29].

#### Evaluating Security-Mechanism Implementations

In 2010, Singh et al. discovered inconsistencies in web browsers' access control policies, attributing these to the "piecemeal" evolution of the policies [36]. In 2015, Hothersall-Thomas et al. developed a testing framework called BrowserAudit to help users evaluate the adoption of security mechanisms by different browsers [19]. The authors manually tested desktop browsers using their framework. In our study, we focus on automatically evaluating a large number of mobile browsers, overcoming the challenges associated with automating each browser. We decided against using BrowserAudit because many security mechanisms and settings have been developed since 2015.

In 2017, Schwenk et al. studied the Same-Origin Policy implementations of ten modern browsers, discovering different behaviors in approximately 23% of their test cases [35]. In our prior work, we proposed Hindsight, an automated, browser-agnostic framework for evaluating the vulnerability of mobile browsers to UI attacks [22]. To conduct our large number of tests, we rely on this framework to quantify the adoption of a wide range of security mechanisms over time, rather than focusing on a few specific attacks. In recent work, Franken et al. evaluated the third-party cookie policies of desktop browsers and showed that third-party trackers could circumvent both built-in cookie policies and those offered by anti-tracking browser extensions [15].

#### Mobile Browser Security

Niu et al. were the first to highlight the unique security problems associated with mobile browsers compared to desktop ones [30]. They noted that limited screen real estate on mobile devices can cause critical UI components, such as the URL bar, to disappear. In 2011, Felt and Wagner investigated a novel security threat for phishing attacks on mobile devices due to the absence of reliable security indicators when switching between websites and apps [14]. In 2012, Amrutkar et al. compared desktop and mobile browsers, identifying UI vulnerabilities that exploit the screen limitations of the latter [3]. The authors later investigated the presence of security indicators in mobile browsers [4]. Other researchers focused on the WebView component of Android apps, identifying several security issues caused by malicious apps loading benign websites and vice versa [23, 24].

### Conclusion

As users increasingly rely on mobile devices and the web remains the primary platform for deploying applications, it is crucial that mobile web browsers cooperate with web servers to enhance user security.

In this paper, we conducted the first longitudinal study of the support for security mechanisms, such as CSP and HSTS, in mobile browsers. By designing 395 tests to exercise the implementations of security mechanisms in modern browsers and exposing 351 unique APKs belonging to the most popular mobile browsers to these tests, we evaluated the extent of such support across 20 different mobile browser families over the past seven years. We found that, although browsers generally increase their support over time, not all browsers behave uniformly. Some browsers update more slowly than others, and some, despite having millions of downloads, do not update for multiple years, leaving their most recent versions incapable of enforcing key mechanisms like `HttpOnly` cookies and HSTS. Additionally, we discovered that Google Chrome's decision to drop support for one mechanism in favor of a newer one has left hundreds of popular websites vulnerable to clickjacking attacks when viewed through most of the evaluated mobile browsers. We quantified the rate of change for individual security mechanisms and found that most browsers still struggle to properly enforce complex mechanisms like CSP. We also identified multi-year windows of vulnerability between the time when popular websites request a security mechanism and the time that most mobile browsers enforce it. Finally, we observed that the support for security mechanisms in browsers can depend on the Android version of the underlying platform, leading to vastly different levels of security for two users of the same browser version.

Our findings call for better testing on the part of browser vendors and highlight that developers cannot assume the enforcement of their desired security mechanisms. To address this, we discussed the need for the design and development of server-side solutions that can adapt in real-time to browsers based on the security mechanisms they support.

### Acknowledgment

We thank our shepherd Zhenkai Liang and the reviewers for their valuable feedback. This work was supported by the Office of Naval Research (ONR) under grant N00014-17-1-2541 and by the National Science Foundation (NSF) under grants CNS-1813974, CMMI-1842020, CNS-1617593, and CNS-1527086. Any opinions, findings, conclusions, and recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the Office of Naval Research or the National Science Foundation.

### References

[1] D. Akhawe, W. He, Z. Li, R. Moazzezi, and D. Song, “Click-jacking Revisited: A Perceptual View of UI Security.” in WOOT, 2014.
[2] D. Alexis and S. Lennart, “Can I use... Support tables for HTML5, CSS3, etc,” 2014. [Online]. Available: https://caniuse.com/
[3] C. Amrutkar, K. Singh, A. Verma, and P. Traynor, “VulnerableMe: Measuring systemic weaknesses in mobile browser security,” in International Conference on Information Systems Security. Springer, 2012, pp. 16–34.
[4] C. Amrutkar, P. Traynor, and P. C. Van Oorschot, “An empirical evaluation of security indicators in mobile Web browsers,” IEEE Transactions on Mobile Computing, vol. 14, no. 5, pp. 889–903, 2015.
[5] Apple Developer, “App Store Review Guidelines,” https://developer.apple.com/app-store/review/guidelines/.
[6] J. Archibald, “Third-party CSS is not safe,” Feb 2018. [Online]. Available: https://jakearchibald.com/2018/third-party-css-is-not-safe/
[7] I. Archive, “Internet Archive: Wayback Machine,” https://archive.org/web/, 2018.
[8] A. Barth, “RFC 6454 - IETF,” Dec 2011. [Online]. Available: https://tools.ietf.org/html/rfc6454
[9] ——, “HTTP state management mechanism,” 2011.
[10] A. Barth, C. Jackson, and J. C. Mitchell, “Robust defenses for cross-site request forgery,” in Proceedings of the 15th ACM conference on Computer and communications security. ACM, 2008, pp. 75–88.
[11] I. Clelland, “W3C: Feature Policy,” https://wicg.github.io/feature-policy/.
[12] comScore, “Mobile’s Hierarchy of Needs,” 2017.
[13] CVE-2010-3971, Oct 2010. [Online]. Available: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3971
[14] A. P. Felt and D. Wagner, Phishing on mobile devices. na, 2011.
[15] G. Franken, T. Van Goethem, and W. Joosen, “Who left open the cookie jar? a comprehensive evaluation of third-party cookie policies,” in 27th USENIX Security Symposium (USENIX Security 18), 2018, pp. 151–168.
[16] Google, Jan 2018. [Online]. Available: https://developers.google.com/web/fundamentals/security/csp/
[17] M. Heiderich, M. Niemietz, F. Schuster, T. Holz, and J. Schwenk, “Scriptless attacks: stealing the pie without touching the sill,” in Proceedings of the 2012 ACM conference on Computer and communications security (CCS), 2012.
[18] S. Helme, 2018. [Online]. Available: https://securityheaders.com
[19] C. Hothersall-Thomas, S. Maffeis, and C. Novakovic, “Browser-Audit: automated testing of browser security features,” in Proceedings of the 2015 International Symposium on Software Testing and Analysis. ACM, 2015, pp. 37–47.
[20] M. Kranch and J. Bonneau, “Upgrading HTTPS in mid-air: An empirical study of strict transport security and key pinning.” in NDSS, 2015.
[21] J. Leyden, “RIP HPKP: Google abandons public key pinning,” https://www.theregister.co.uk/2017/10/30/google-hpkp/, 2017.
[22] M. Luo, O. Starov, N. Honarmand, and N. Nikiforakis, “Hindsight: Understanding the Evolution of UI Vulnerabilities in Mobile Browsers,” in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2017, pp. 149–162.
[23] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin, “Attacks on WebView in the Android system,” in Proceedings of the 27th Annual Computer Security Applications Conference. ACM, 2011, pp. 343–352.
[24] T. Luo, X. Jin, A. Ananthanarayanan, and W. Du, “Touchjacking attacks on web in Android, iOS, and Windows Phone,” in International Symposium on Foundations and Practice of Security. Springer, 2012, pp. 227–243.
[25] M. Marlinspike, “More tricks for defeating SSL in practice,” Black Hat USA, 2009.
[26] A. Mendoza, P. Chinprutthiwong, and G. Gu, “Uncovering HTTP Header Inconsistencies and the Impact on Desktop/Mobile Websites,” in Proceedings of the Web Conference (WWW’18), April 2018.
[27] Mozilla, Jan 2018. [Online]. Available: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
[28] ——, “Same-origin policy,” Mar 2018. [Online]. Available: https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#Changing_origin
[29] N. Nikiforakis, L. Invernizzi, A. Kapravelos, S. Van Acker, W. Joosen, C. Kruegel, F. Piessens, and G. Vigna, “You are what you include: large-scale evaluation of remote JavaScript inclusions,” in Proceedings of the 2012 ACM conference on Computer and communications security. ACM, 2012, pp. 736–747.
[30] Y. Niu, F. Hsu, and H. Chen, “iPhish: Phishing Vulnerabilities on Consumer Electronics.” in UPSEC, 2008.
[31] OWASP, “Cross-site Scripting (XSS),” Mar 2018. [Online]. Available: https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)
[32] ——, “OWASP Secure Headers Project,” https://www.owasp.org/index.php/OWASP_Secure_Headers_Project, 2018.
[33] OWASP, “SameSite Overview,” https://www.owasp.org/index.php/SameSite_Overview, 2018.
[34] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jackson, “Busting frame busting: a study of clickjacking vulnerabilities at popular sites,” IEEE Oakland Web, vol. 2, no. 6, 2010.
[35] J. Schwenk, M. Niemietz, and C. Mainka, “Same-Origin Policy: Evaluation in Modern Browsers,” in 26th USENIX Security Symposium (USENIX Security 17). Vancouver, BC: USENIX Association, 2017.
[36] K. Singh, A. Moshchuk, H. J. Wang, and W. Lee, “On the incoherencies in web browser access control policies,” in Security and Privacy (SP), 2010 IEEE Symposium on. IEEE, 2010, pp. 463–478.
[37] D. F. Somé, N. Bielova, and T. Rezk, “On the Content Security Policy Violations due to the Same-Origin Policy,” in Proceedings of the 26th International Conference on World Wide Web, 2017, pp. 877–886.
[38] O. Starov, P. Gill, and N. Nikiforakis, “Are you sure you want to contact us? quantifying the leakage of PII via website contact forms,” Proceedings on Privacy Enhancing Technologies, vol. 2016, no. 1, pp. 20–33, 2016.
[39] Statcounter, “Android Version Market Share Worldwide,” http://gs.statcounter.com/android-version-market-share/mobile-tablet/worldwide, 2018.
[40] Statista, “Android version share,” Feb 2018. [Online]. Available: https://www.statista.com/statistics/271774/share-of-android-platforms-on-mobile-devices-with-android-os/
[41] B. Stock, M. Johns, M. Steffens, and M. Backes, “How the Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security,” in Proceedings of USENIX Security, 2017.
[42] S. Tajalizadehkhoob, T. Van Goethem, M. Korczyński, A. Noroozian, R. Böhme, T. Moore, W. Joosen, and M. van Eeten, “Herding vulnerable cats: a statistical approach to disentangle joint responsibility for web security in shared hosting,” in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2017, pp. 553–567.
[43] T. Van Goethem, P. Chen, N. Nikiforakis, L. Desmet, and W. Joosen, “Large-scale security analysis of the web: Challenges and findings,” in International Conference on Trust and Trustworthy Computing. Springer, 2014, pp. 110–126.
[44] T. Van Goethem, F. Piessens, W. Joosen, and N. Nikiforakis, “Clubbing seals: Exploring the ecosystem of third-party security seals,” in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2014, pp. 918–929.
[45] M. Vasek and T. Moore, “Identifying risk factors for webserver compromise,” in International Conference on Financial Cryptography and Data Security. Springer, 2014, pp. 326–345.
[46] W3C, “Content Security Policy - level 2,” https://www.w3.org/TR/2014/WD-CSP2-20140703/, 2018.
[47] ——, “Content Security Policy Level 2: Relation to frame-ancestors and frame-options,” https://www.w3.org/TR/CSP2/#relation-to-frame-ancestors-and-frame-options, 2018.
[48] L. Weichselbaum, M. Spagnuolo, S. Lekies, and A. Janc, “CSP is dead, long live CSP! On the insecurity of whitelists and the future of content security policy,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2016, pp. 1376–1387.
[49] M. Weissbacher, T. Lauinger, and W. Robertson, “Why is CSP failing? trends and challenges in CSP adoption,” in International Workshop on Recent Advances in Intrusion Detection. Springer, 2014, pp. 212–233.
[50] Y. Zhou and D. Evans, “Why Aren’t HTTP-only Cookies More Widely Deployed?” in Proceedings of 4th Web 2.0 Security and Privacy Workshop (W2SP), 2010.