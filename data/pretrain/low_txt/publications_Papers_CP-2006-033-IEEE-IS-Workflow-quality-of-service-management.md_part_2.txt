### Quality of Service (QoS) Estimation in Workflow Execution

#### Introduction
At runtime, when activities are executed, the initial QoS activity model for each activity may no longer be valid. Therefore, the QoS associated with these activities is periodically recomputed based on the data from previous instance executions stored in the workflow log. This ensures that the QoS estimates remain accurate and up-to-date.

#### Recomputation of QoS Metrics
To compute the estimated QoS of a process in execution, we use a variation of the Stochastic Workflow Reduction (SWR) algorithm [1]. This variation does not include probabilistic information about transitions. The SWR algorithm computes aggregate QoS properties step-by-step by applying reduction rules to shrink the process until only one activity remains. The remaining activity contains the QoS metrics corresponding to the workflow under analysis.

#### Scenarios for QoS Computation
Depending on the available workflow data, four scenarios can occur (Table II):

1. **Designer Average (a)**: For a specific activity \( a \) and a particular dimension \( \text{Dim} \) (e.g., time or cost), the average is calculated based only on the information introduced by the designer.
2. **Multi-Workflow Average (a)**: The average of an activity \( a \) dimension is calculated based on all its executions, independent of the workflow that executed it.
3. **Workflow Average (t, w)**: The average of the dimension \( \text{Dim} \) is calculated based on all the times activity \( t \) was executed in any instance from workflow \( w \).
4. **Instance Average (t, w, i)**: The average of the dimension \( \text{Dim} \) is calculated based on all the times activity \( t \) was executed in instance \( i \) of workflow \( w \).

#### Parallel System Reduction
For example, if the path predicted in the first phase of our QoS mining method includes a parallel system, as shown in Figure 3, the parallel system reduction rule is applied to a part of the original workflow (Figure 3.a), and a new section of the workflow is created (Figure 3.b). A system of parallel activities \( t_1, t_2, \ldots, t_n \), a split activity \( t_a \), and a join activity \( t_b \) can be reduced to a sequence of three activities \( t_1, t_n, \) and \( t_b \). In this reduction, the incoming transitions of \( t_a \) and the outgoing transition of \( t_b \) remain the same.

#### QoS Formulas
The QoS of the new workflow is computed using the following formulas (the QoS of tasks \( t_a \) and \( t_b \) remain unchanged):

\[
\text{Time}(t_n) = \max_{i \in \{1, \ldots, n\}} \{\text{Time}(t_i)\}
\]
\[
\text{Cost}(t_n) = \sum_{i=1}^{n} \text{Cost}(t_i)
\]

#### Rules for QoS Prediction
When predicting the QoS of activity \( a \) in an instance \( i \) of workflow \( w \), the following rules are used:

- If activity \( a \) has never been executed before, formula (a) is chosen.
- If activity \( a \) has been executed previously but in the context of a different workflow \( w' \neq w \), formula (b) is chosen.
- If activity \( a \) has been executed in the same workflow \( w \), formula (c) is chosen.
- If activity \( a \) has been executed in the same instance \( i \) of workflow \( w \), formula (d) is chosen.

#### Reduction Rules
Reduction rules exist for sequential, parallel, conditional, loop, and network systems [1]. These rules are fundamental as most workflow management systems support them. Additional reduction rules can be developed to handle the characteristics and features of specific workflow systems.

#### Methodology and Accuracy
Our approach to workflow QoS estimation, which uses a variation of the SWR algorithm, shows that the prediction of workflow QoS can provide actual metrics (e.g., the workflow instance \( w \) will take 3 days and 8 hours to execute) rather than just relative information (e.g., "more" or "less" than D days).

#### Experiments and Validation
To validate our method, we conducted experiments using the loan process application described in [6]. The results clearly show that the QoS mining method yields estimations very close to the real QoS of the running processes.

#### Related Work
Process and workflow mining is addressed in several papers, and a detailed survey is provided in [11]. In [3, 4], a Business Process Intelligence (BPI) tool suite that uses data mining algorithms to support process execution is presented. In [12] and [13], a machine learning component able to acquire and adapt a workflow model from observations of enacted workflow instances is described. Agrawal et al. [14] propose an algorithm that allows the user to automatically model a given business process from workflow logs. Chandrasekaran et al. [2] describe a simulation coupled with a Web Process Design Tool (WPDT) and a QoS model [1] to automatically simulate and analyze the QoS of Web processes.

#### Conclusions
The importance of QoS management for organizations and workflow systems is widely recognized. The design and execution of workflows cannot ignore the importance of QoS measurements, as they directly impact organizational success. This paper presents a novel method for QoS estimation in workflows, demonstrating high accuracy and practical applicability.

#### References
[1]. Cardoso, J., et al., Modeling Quality of Service for workflows and web service processes. Web Semantics: Science, Services and Agents on the World Wide Web Journal, 2004. 1(3): p. 281-308.
[2]. Chandrasekaran, S., et al. Service Technologies and their Synergy with Simulation. in Proceedings of the 2002 Winter Simulation Conference (WSC'02). 2002. San Diego, California.
[3]. Grigori, D., et al., Business Process Intelligence. Computers in Industry, 2004. 53: p. 321â€“343.
[4]. Grigori, D., et al. Improving Business Process Quality through Exception Understanding, Prediction, and Prevention. in 27th VLDB Conference. 2001. Roma, Italy.
[5]. Cardoso, J. and A. Sheth. Adaptation and Workflow Management Systems. in International Conference WWW/Internet 2005. 2005. Lisbon, Portugal.
[6]. Cardoso, J., Path Mining in Web processes using Profiles, in Encyclopedia of Data Warehousing and Mining, J. Wang, Editor. 2005, Idea Group Inc. p. 896-901.
[7]. Cardoso, J. and M. Lenic, Web Process and Workflow Path mining using the multimethod approach. Journal of Business Intelligence and Data Mining (IJBIDM). submitted., 2005.
[8]. Musa, J.D., Operational Profiles in Software-Reliability Engineering. IEEE Software, 1993. 10(2): p. 14-32.
[9]. Musa, J.D., Software reliability engineering: more reliable software, faster development and testing. 1999, New York: McGraw-Hill.
[10]. Aalst, W.M.P.v.d., et al., Workflow patterns homepage. 2002, http://tmitwww.tm.tue.nl/research/patterns.
[11]. Aalst, W.M.P.v.d., et al., Workflow Mining: A Survey of Issues and Approaches. Data & Knowledge Engineering (Elsevier), 2003. 47(2): p. 237-267.
[12]. Herbst, J. and D. Karagiannis. Integrating Machine Learning and Workflow Management to Support Acquisition and Adaption of Workflow Models. in Ninth International Workshop on Database and Expert Systems Applications. 1998.
[13]. Weijters, T. and W.M.P. van der Aalst. Process Mining: Discovering Workflow Models from Event-Based Data. in 13th Belgium-Netherlands Conference on Artificial Intelligence (BNAIC 2001). 2001. Amsterdam, The Netherlands.
[14]. Agrawal, R., D. Gunopulos, and F. Leymann. Mining Process Models from Workflow Logs. in Sixth International Conference on Extending Database Technology. 1998. Valencia, Spain: Springer.
[15]. Eder, J., et al. Time Management in Workflow Systems. in BIS'99 3rd International Conference on Business Information Systems. 1999. Poznan, Poland: Springer Verlag.
[16]. Pozewaunig, H., J. Eder, and W. Liebhart. ePERT: Extending PERT for workflow management systems. in First European Symposium in Advances in Databases and Information Systems (ADBIS). 1997. St. Petersburg, Russia.