### Introduction to the Problem and Solution

To address our specific problem, we focus on input validation in Android mobile applications. Input validation has been extensively studied in the literature, particularly in web applications [4], [9], [10], [17], [25], [28], [29], [35], [37], where it is often used to prevent common vulnerabilities such as Cross-Site Scripting (XSS) and SQL injection. Additionally, several studies have targeted server-side security issues [5], [48]. For Android mobile apps, WARDroid [27] analyzed issues from both client and server sides. Other efforts have focused on input validation in Android system services [13], [41], [42], or in IoT applications for vulnerability discovery [15], [47].

Our study aims to uncover hidden behaviors or secrets that are unknown to normal users in Android mobile apps, which differentiates it from previous work.

### Input Generation Based on UI Information

There is a significant body of research focusing on generating inputs based on the user interface (UI) information of applications. Tools like AppsPlayground [31], SmartDroid [44], Dynodroid [26], and SMV-Hunters [34] explore mobile app behaviors by recognizing UI elements and generating appropriate user inputs. However, these tools generate inputs dynamically. In contrast, our approach leverages static analysis and focuses specifically on string-related input generation.

### User-Input Analysis

Numerous studies have aimed to detect security issues related to user input in Android apps. For example, AsDroid [23] detects stealthy malicious behavior by monitoring differences between program behaviors and the semantics inferred from UI text, including descriptions for user input. Similarly, SUPOR [22] and UIPicker [30] use natural language processing (NLP) techniques and supervised classification to detect sensitive privacy data from user input. Unlike these approaches, which rely on UI text to detect malicious behaviors, our work focuses on general user input to recognize hidden behaviors through carefully defined validation contexts recovered from the code of mobile apps.

### Malware Detection

Previous efforts have also focused on detecting hidden malware behaviors. For instance, TriggerScope [19], IntelliDroid [39], and other works [11] use symbolic execution to generate external inputs (e.g., GPS, messages) for malware detection. Tools like Crowdroid [12], MAMA [32], DroidAPIMiner [3], DREBIN [6], ICCDetector [40], DroidDetector [43], and others [8], [14], [20], [24], [33] use feature-based algorithms to detect hidden malicious behaviors in Android apps that affect the OS or servers. These works typically extract features from system execution contexts (e.g., Inter-Component Communication (ICC), system events, permissions). In contrast, INPUTSCOPE aims to uncover hidden behaviors triggered by user input at the Java bytecode level, with our detection policy built upon the execution context of user input validation.

### Conclusion

While input validation has been well-studied for vulnerability discovery, this paper demonstrates that it can also be used to expose input-triggered secrets, such as backdoors (e.g., secret access keys, master passwords, and secret privileged commands) and blacklists of unwanted items (e.g., censorship keywords, cyberbullying expressions, and weak passwords). To understand the severity of such input validations in mobile apps at scale, we developed INPUTSCOPE, a tool that automatically detects the execution context of user input validation and the content involved to expose hidden functionality. We tested INPUTSCOPE on over 150,000 mobile apps and uncovered 12,706 apps containing backdoor secrets and 4,028 apps containing blacklist secrets.

### Acknowledgment

This research was supported in part by the National Science Foundation (NSF) Awards 1657199, 1834215, and by the German Federal Ministry of Education and Research (BMBF) through funding for the CISPA-Stanford Center for Cybersecurity (FKZ: 13N1S0762). Any opinions, findings, conclusions, or recommendations expressed are those of the authors and not necessarily of the BMBF and NSF.

### References

[1] OWASP - Input Validation Cheat Sheet. https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet.
[2] Soot - A Java optimization framework. https://github.com/Sable/soot.
[3] Yousra Aafer, Wenliang Du, and Heng Yin. Droidapiminer: Mining API-level features for robust malware detection in android. In Security and Privacy in Communication Networks - 9th International ICST Conference, SecureComm 2013, Sydney, NSW, Australia, September 25-28, 2013, Revised Selected Papers, pages 86–103, 2013.
[4] Muath Alkhalaf, Tevfik Bultan, and Jose L. Gallegos. Verifying client-side input validation functions using string analysis. In Proceedings of the 34th International Conference on Software Engineering, ICSE ’12, pages 947–957, Zurich, Switzerland, 2012.
[5] Omar Alrawi, Chaoshun Zuo, Ruian Duan, Ranjita Kasturi, Zhiqiang Lin, and Brendan Saltaformaggio. The betrayal at cloud city: An empirical analysis of cloud-based mobile backends. In 28th USENIX Security Symposium, 2019.
[6] Daniel Arp, Michael Spreitzenbarth, Malte Hübner, Hugo Gascon, and Konrad Rieck. Drebin: Effective and explainable detection of android malware in your pocket. 02 2014.
[7] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI ’14, pages 259–269, New York, NY, USA, 2014. ACM.
[8] Zarni Aung and Win Zaw. Permission-based android malware detection. International Journal of Scientific and Technology Research, 2:228–234, 01 2013.
[9] Davide Balzarotti, Marco Cova, Vika Felmetsger, Nenad Jovanovic, Engin Kirda, Christopher Kruegel, and Giovanni Vigna. Saner: Composing static and dynamic analysis to validate sanitization in web applications. In Proceedings of the 2008 IEEE Symposium on Security and Privacy, SP ’08, pages 387–401, Washington, DC, USA, 2008. IEEE Computer Society.
[10] Prithvi Bisht, Timothy Hinrichs, Nazari Skrupsky, Radoslaw Bobrowicz, and VN Venkatakrishnan. Notamper: automatic blackbox detection of parameter tampering opportunities in web applications. In Proceedings of the 17th ACM conference on Computer and communications security, pages 607–618. ACM, 2010.
[11] David Brumley, Cody Hartwig, Zhenkai Liang, James Newsome, Dawn Song, and Heng Yin. Automatically Identifying Trigger-based Behavior in Malware, volume 36, pages 65–88. 01 1970.
[12] Iker Burguera, Urko Zurutuza, and Simin Nadjm-Tehrani. Crowdroid: Behavior-based malware detection system for android. pages 15–26, 10 2011.
[13] Chen Cao, Neng Gao, Peng Liu, and Ji Xiang. Towards analyzing the input validation vulnerabilities associated with android system services. In Proceedings of the 31st Annual Computer Security Applications Conference, ACSAC 2015, pages 361–370, New York, NY, USA, 2015. ACM.
[14] Patrick Chan and W.-K Song. Static detection of android malware by using permissions and API calls. Proceedings - International Conference on Machine Learning and Cybernetics, 1:82–87, 01 2015.
[15] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang Lin, XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang, and Kehuan Zhang. IoTfuzzer: Discovering memory corruptions in IoT through app-based fuzzing. In Proceedings of the 25th Annual Network and Distributed System Security Symposium (NDSS’18), San Diego, CA, February 2018.
[16] Hyunwoo Choi, Jeongmin Kim, Hyunwook Hong, Yongdae Kim, Jonghyup Lee, and Dongsu Han. Extractocol: Automatic extraction of application-level protocol behaviors for android applications. In Proceedings of the 2015 ACM Conference on Special Interest Group on Data Communication, SIGCOMM ’15, pages 593–594, New York, NY, USA, 2015. ACM.
[17] Angelo Ciampa, Corrado Aaron Visaggio, and Massimiliano Di Penta. A heuristic-based approach for detecting SQL-injection vulnerabilities in web applications. In Proceedings of the 2010 ICSE Workshop on Software Engineering for Secure Systems, SESS ’10, pages 43–49, New York, NY, USA, 2010. ACM.
[18] Johannes Dahse and Thorsten Holz. Static detection of second-order vulnerabilities in web applications. In 23rd USENIX Security Symposium (USENIX Security 14), pages 989–1003, 2014.
[19] Yanick Fratantonio, Antonio Bianchi, William K. Robertson, Engin Kirda, Christopher Krügel, and Giovanni Vigna. Triggerscope: Towards detecting logic bombs in android applications. 2016 IEEE Symposium on Security and Privacy (SP), pages 377–396, 2016.
[20] Hugo Gascon, Fabian Yamaguchi, Daniel Arp, and Konrad Rieck. Structural detection of android malware using embedded call graphs. 10 2013.
[21] Michael I Gordon, Deokhwan Kim, Jeff H Perkins, Limei Gilham, Nguyen Nguyen, and Martin C Rinard. Information Flow Analysis of Android Applications in DroidSafe. In Proceedings of Network and Distributed System Security Symposium (NDSS), 2015.
[22] Jianjun Huang, Zhichun Li, Xusheng Xiao, Zhenyu Wu, Kangjie Lu, Xiangyu Zhang, and Guofei Jiang. SUPOR: Precise and scalable sensitive user input detection for android apps. In USENIX Security Symposium, pages 977–992, 2015.
[23] Jianjun Huang, Xiangyu Zhang, Lin Tan, Peng Wang, and Bin Liang. AsDroid: Detecting stealthy behaviors in android applications by user interface and program behavior contradiction. In Proceedings of the 36th International Conference on Software Engineering, ICSE 2014, pages 1036–1046, New York, NY, USA, 2014. ACM.
[24] Takamasa Isohara, Keisuke Takemori, and Ayumu Kubota. Kernel-based behavior analysis for android malware detection. pages 1011–1015, 12 2011.
[25] Muyang Liu, Ke Li, and Tao Chen. Security testing of web applications: A search-based approach for detecting SQL injection vulnerabilities. In Proceedings of the Genetic and Evolutionary Computation Conference Companion, GECCO ’19, pages 417–418, New York, NY, USA, 2019. ACM.
[26] Aravind Machiry, Rohan Tahiliani, and Mayur Naik. Dynodroid: An input generation system for android apps. In Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, pages 224–234. ACM, 2013.
[27] Abner Mendoza and Guofei Gu. Mobile application web API reconnaissance: Web-to-mobile inconsistencies and vulnerabilities. In Proceedings of the 39th IEEE Symposium on Security and Privacy (SP’18), May 2018.
[28] Maliheh Monshizadeh, Prasad Naldurg, and V. N. Venkatakrishnan. MACE: Detecting privilege escalation vulnerabilities in web applications. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, CCS ’14, pages 690–701, Scottsdale, Arizona, USA, 2014.
[29] Divya Muthukumaran, Dan O’Keeffe, Christian Priebe, David Eyers, Brian Shand, and Peter Pietzuch. FlowWatcher: Defending against data disclosure vulnerabilities in web applications. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, CCS ’15, pages 603–615, Denver, Colorado, USA, 2015.
[30] Yuhong Nan, Min Yang, Zhemin Yang, Shunfan Zhou, Guofei Gu, and XiaoFeng Wang. UIPicker: User-input privacy identification in mobile applications. In 24th USENIX Security Symposium (USENIX Security 15), pages 993–1008, 2015.
[41] Kun Yang, Jianwei Zhuge, Yongke Wang, Lujue Zhou, and Haixin Duan. IntentFuzzer: Detecting capability leaks of android applications. In Proceedings of the 9th ACM Symposium on Information, Computer and Communications Security, ASIA CCS ’14, pages 531–536, New York, NY, USA, 2014. ACM.
[42] Hui Ye, Shaoyin Cheng, Lanbo Zhang, and Fan Jiang. DroidFuzzer: Fuzzing the android apps with intent-filter tag. In Proceedings of International Conference on Advances in Mobile Computing & Multimedia, MoMM ’13, pages 68:68–68:74, New York, NY, USA, 2013. ACM.
[43] Zhenlong Yuan, Yongqiang Lu, and Yibo Xue. DroidDetector: Android malware characterization and detection using deep learning. Tsinghua Science and Technology, 21:114–123, 02 2016.
[44] Cong Zheng, Shixiong Zhu, Shuaifu Dai, Guofei Gu, Xiaorui Gong, Xinhui Han, and Wei Zou. SmartDroid: An automatic system for revealing UI-based trigger conditions in android applications. In Proceedings of the Second ACM Workshop on Security and Privacy in Smartphones and Mobile Devices, SPSM ’12, pages 93–104, New York, NY, USA, 2012. ACM.
[45] Chaoshun Zuo and Zhiqiang Lin. SmartGen: Exposing server URLs of mobile apps with selective symbolic execution. In Proceedings of the 26th World Wide Web Conference (WWW’17), Perth, Australia, April 2017.
[46] Chaoshun Zuo, Zhiqiang Lin, and Yinqian Zhang. Why does your data leak? Uncovering the data leakage in cloud from mobile apps. In Proceedings of the 2019 IEEE Symposium on Security and Privacy, San Francisco, CA, May 2019.
[47] Chaoshun Zuo, Haohuang Wen, Zhiqiang Lin, and Yinqian Zhang. Automatic fingerprinting of vulnerable BLE IoT devices with static UUIDs from mobile apps. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, 2019.
[48] Chaoshun Zuo, Qingchuan Zhao, and Zhiqiang Lin. AuthScope: Towards automatic discovery of vulnerable authorizations in online services. In Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS’17), Dallas, TX, November 2017.
[31] Vaibhav Rastogi, Yan Chen, and William Enck. AppsPlayground: Automatic security analysis of smartphone applications. In Proceedings of the Third ACM Conference on Data and Application Security and Privacy, CODASPY ’13, pages 209–220, New York, NY, USA, 2013. ACM.
[32] Borja Sanz, Igor Santos, Carlos Laorden, Xabier Ugarte-Pedrero, Javier Nieves, Pablo Bringas, and Gonzalo Alvarez. MAMA: Manifest analysis for malware detection in android. Cybernetics & Systems, 44:469–488, 10 2013.
[33] A. Schmidt, R. Bye, H. Schmidt, J. Clausen, O. Kiraz, Kamer Ali Yüksel, Seyit Camtepe, and Sahin Albayrak. Static analysis of executables for collaborative malware detection on android. 06 2009.
[34] David Sounthiraraj, Justin Sahs, Garrett Greenwood, Zhiqiang Lin, and Latifur Khan. SMV-Hunter: Large scale, automated detection of SSL/TLS man-in-the-middle vulnerabilities in android apps. In Proceedings of the 21st Annual Network and Distributed System Security Symposium (NDSS’14), San Diego, CA, February 2014.
[35] Zhendong Su and Gary Wassermann. The essence of command injection attacks in web applications. In ACM SIGPLAN Notices, volume 41, pages 372–382. ACM, 2006.
[36] Nicolas Viennot, Edward Garcia, and Jason Nieh. A measurement study of Google Play. In ACM SIGMETRICS / International Conference on Measurement and Modeling of Computer Systems, SIGMETRICS ’14, Austin, TX, USA - June 16 - 20, 2014, pages 221–233, 2014.
[37] Philipp Vogt, Florian Nentwich, Nenad Jovanovic, Engin Kirda, Christopher Kruegel, and Giovanni Vigna. Cross-site scripting prevention with dynamic data tainting and static analysis. In NDSS, volume 2007, page 12, 2007.
[38] Fengguo Wei, Sankardas Roy, Xinming Ou, et al. AMANDROID: A precise and general inter-component data flow analysis framework for security vetting of android apps. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, pages 1329–1341. ACM, 2014.
[39] Michelle Wong and David Lie. IntelliDroid: A targeted input generator for the dynamic analysis of android malware. 01 2016.
[40] Ke Xu, Yingjiu Li, and Robert Deng. ICCDetector: ICC-based malware detection on android. IEEE Transactions on Information Forensics and Security, 11:1–1, 06 2016.