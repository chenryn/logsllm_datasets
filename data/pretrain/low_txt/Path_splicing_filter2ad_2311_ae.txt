### 0.5
### 0.4
### 0.3
### 0.2
### 0.1
### 0
### Routing Deflections
### Splicing (5 slices)
### Splicing (10 slices)
### 1
### 1.5
### 2
### 2.5
### 3
### 3.5
### 4
### 4.5
### 5
### Path Stretch
**Figure 12: Comparison of stretch for recovered paths for splicing vs. routing deflections.**

Recovered paths are often longer in terms of delay compared to the shortest path in the "base" topology; these paths typically use about 50% more hops than the original shortest path. In any particular slice, 99% of all paths in each tree have a stretch of less than 2.6. The average stretch for network-based recovery was 1.33, with 55% more hops in the recovered paths. These numbers are slightly higher compared to the end-system recovery scheme.

### Interdomain Splicing
We computed the average hop-count stretch for the interdomain reliability experiment in Section 7.1.2. The hop-count stretch with 5% of the AS links failed was only 1.038, or 3.8% more hops than in the default AS paths.

### 7.4 Comparison to Routing Deflections
We compared the end-system recovery achieved by intradomain path splicing to that achieved by the routing deflection mechanism proposed by Yang et al. [32]. We re-implemented the deflection routing system and compared the reliability achieved by this scheme to that achieved by path splicing. Previous work on routing deflections does not consider the stretch of the resulting paths and considers all possible recovered paths. With routing deflections, the number of neighbors that a node can potentially send a packet to is not bounded, whereas in path splicing it is bounded by the number of slices. Hence, routing deflections may require significantly more storage. To provide a fair comparison between the two schemes, we consider a path "recovered" only if it has a stretch of less than 2. Figure 11 shows the recovery achieved by path splicing for different numbers of slices compared to routing deflections. Path splicing recovers more paths than routing deflections using just five slices.

In addition to directly comparing recovery, we compared the stretch of the recovered paths using each of the schemes for this experiment. Figure 12 shows the resulting statistics. The results show that path splicing can recover paths with lower stretch than the stretch of the paths recovered using routing deflection. Path splicing generated paths with an average stretch of 1.26, whereas the path stretch using routing deflections was 1.78. Path splicing also generates shorter paths more consistently: the variance of stretch values for paths generated using path splicing was 0.09; in contrast, the variance of stretch for recovered paths using routing deflections was 4.83.

### 7.5 Incremental Deployability
Interdomain splicing requires ASes to independently decide to deploy additional functionality. It is reasonable to ask how well interdomain splicing would perform if only a fraction of ASes deployed it. Our experiments show that path splicing provides significant benefits even if only a small fraction of ASes deploy it. To evaluate the benefits of partial deployment, we use the same AS topology as in the interdomain reliability experiments. We fixed the number of slices and performed the reliability experiment as before; for each experiment, we let only a fraction of ASes select an alternate AS-level path if the next-hop on the default route has failed. We evaluate reliability for five levels of deployment: 0% to 100% with 3 slices, as shown in Figure 13. Reliability improves significantly even if only 25% of the ASes deploy interdomain splicing. We expect that the benefits might be even higher if all "Tier-1" ISPs deployed splicing.

### 7.6 Infrequent (and Avoidable) Loops
Because traffic is not forwarded along a single routing tree, splicing does create the potential for transient forwarding loops if certain precautions are not taken. Forwarding loops are a concern because they increase the total length of the end-to-end path and unnecessarily use extra network capacity and node resources (note that these detriments are the same as paths with longer stretch; we have already shown that spliced paths have reasonable stretch). Fortunately, certain recovery strategies can avoid persistent forwarding loops entirely. First, a persistent loop would require the splicing bits to be repeated in exactly the right sequence. Second, in the design we presented in Section 5.2, the splicing header will eventually run out of splicing bits as each node shifts lg(k) bits from the header; at this point, the packet stays in the same tree to the destination. Paths that never switch back to a previously used slice would never contain persistent forwarding loops of any length; recovery strategies could pick only these paths. Although it would not necessarily prevent transient loops entirely, restricting the number of switches between slices that any packet takes would also limit the likelihood of loops significantly. Our evaluation shows that loops were quite infrequent. Using network-based recovery, there was less than one loop on average with a length greater than 2 when recovering from the case where the network had 10% of links failed. Two-hop loops occurred more frequently (about one per 100 trials for k = 2, and about one in ten trials for higher values of k). Using any of the schemes discussed above could eliminate loops entirely, at the cost of restricting the paths available for recovery.

### 7.7 Minimal Disruption to Traffic
We studied the effects of splicing on traffic loads within a single ISP. We extended C-BGP to support intradomain path splicing and provided C-BGP with BGP routing tables, IGP configurations, and NetFlow traffic traces for the Abilene network; we then used it to determine the traffic load on each link in the network in the default case and for various instantiations of splicing. Abilene has only 11 nodes and 14 links, but we ran our experiments using this network because it makes routing and traffic data publicly available.

For the experiment, we created k slices for the Abilene topology in C-BGP; we used degree-based perturbations to generate the slices. C-BGP computes shortest paths for each slice and loads the routes into the respective forwarding tables on each of the nodes. Next, we loaded the BGP routing table dumps obtained from Abilene on each of the nodes. We then "played" 5-minute NetFlow traces through the network; we loaded a NetFlow trace onto each node that corresponds to the traffic collected from the node in the actual Abilene network. For every packet reflected in the trace statistics, C-BGP selects a slice based on the hash value of the source and destination IP addresses in the packet. So traffic is split randomly among the k slices. Figure 14 shows the resulting link loads. We also performed a similar experiment using the Sprint topology and a synthetic traffic matrix, which consisted of unit traffic for all node pairs. Figure 15 shows the results of this experiment.

The plots sort links on the basis of their load in the case without splicing and show the corresponding load on the same links using splicing. The plots demonstrate that splicing does not cause significant adverse effects on traffic. Splicing can increase stretch if traffic is routed on paths other than the shortest path in the network. As a result, the sum of the load on the links in the network will be higher when using splicing. Fortunately, the utilization is not much greater: the sum of the load on the links is on average only about 4% higher (and never more than 10% higher) than without splicing. In the Sprint network, traffic under splicing is 9% higher on average (and never more than 12%).

### 8. Discussion and Open Issues
This section explores the changes both to hosts and to routers that would be required to deploy and evaluate various aspects of splicing in practice (e.g., recovery time).

**Changes to Routers:**
Path splicing requires changes to the forwarding plane in routers to support multiple routes for a destination and the ability to select one of those routes based on the splicing bits. Recently, multi-topology routing has been standardized [23], and router vendors are also supporting this function [8, 20]. The basic forwarding mechanism required for splicing is very similar to multi-topology routing. We expect that the data-plane implementation of splicing will entail only a small extension to MTR. Additionally, we have developed a Click element that uses bits in the IP ID and type of service fields to index into separate forwarding tables generated by the path splicing control plane. We plan to use this in conjunction with the changes to end systems described below to evaluate the recovery time of splicing in practice.

**Changes to End Systems:**
Path splicing relies on a failure detection mechanism before it can find a new working path. As we discussed in Section 7, detection could take place either at the routers themselves (as it is done today with other recovery mechanisms, such as fast reroute) or at end hosts (which might allow for recovery from different classes of "failures," such as paths that exhibit high packet loss or jitter, as well as those that might exhibit complete outages). Instrumenting applications to take advantage of path splicing will require designing and developing mechanisms for receiving information about path quality as well as an extension to the sockets API for setting splicing bits in the packet headers.

**Adversarial Concerns:**
An adversary could set splicing bits that send packets into a forwarding loop, thus wasting resources. This attack seems unlikely, because it requires an adversary to actually discover splicing bits that will induce a loop. An adversary cannot use the splicing bits to create arbitrary loops. Our previous work discusses defenses in more detail [21].

### 9. Conclusion
This paper presented the design and evaluation of path splicing, a primitive for increasing reliability by composing routes from multiple routing protocol instances. We applied path splicing to both intradomain and interdomain routing and evaluated its ability to allow end systems to find alternate paths when links fail. Our experiments show that running just a few slices in parallel allows path splicing to achieve reliability that is close to that of the underlying graph (i.e., as long as endpoints remain connected in the underlying graph, there will be some spliced path that connects them). We have also demonstrated that even simple recovery schemes, such as randomly selecting splicing bits, allow end systems to realize this reliability using alternate paths with small stretch. Path splicing can be deployed on existing routers with small modifications to existing multi-topology routing functions. We also foresee many possible applications to other routing protocols (e.g., wireless, overlay routing) and to many other applications that could take advantage of having access to multiple paths in parallel.

### Acknowledgments
This work was funded by NSF Awards CNS-0626950, CCR-0307536, NSF CAREER Award CNS-0643974, ARC ThinkTank at Georgia Tech, and a Raytheon fellowship. We thank our shepherd Alex Snoeren for helping us improve the paper. We thank the Algorithms and Randomness Center at Georgia Tech for inspiring discussions. We also thank David Andersen, Hari Balakrishnan, Andy Bavier, Navin Goyal, Roch Guerin, Dick Karp, Amund Kvalbein, Dick Lipton, Bruno Quoitin, Luis Rademacher, Jennifer Rexford, Stefan Savage, Scott Shenker, Geoff Voelker, and Muhammad Mukarram bin Tariq for helpful feedback and discussion.

### 10. References
[1] D. G. Andersen, H. Balakrishnan, M. F. Kaashoek, and R. Morris. Resilient Overlay Networks. In Proc. 18th ACM Symposium on Operating Systems Principles (SOSP), pages 131–145, Banff, Canada, Oct. 2001.
[2] D. G. Andersen, A. C. Snoeren, and H. Balakrishnan. Best-path vs. Multi-path Overlay Routing. In Proc. ACM SIGCOMM Internet Measurement Conference, Miami, FL, Oct. 2003.
[3] G. Apostolopoulos. Using Multiple Topologies for IP-Only Protection Against Network Failures: A Routing Performance Perspective. Technical Report 377, ICS-FORTH, Apr. 2006.
[4] A. Atlas and A. Zinin. Basic Specification for IP Fast-Reroute: Loop-free Alternates. http://tools.ietf.org/html/draft-ietf-rtgwg-ipfrr-spec-base-10, Nov. 2007.
[5] A. Broido and kc claffy. Topological Resilience in IP and AS Graphs. http://www.caida.org/analysis/topology/resilience/, 2006.
[6] M. Cha, S. Moon, C.-D. Park, and A. Shaikh. Placing Relay Nodes for Intra-Domain Path Diversity. In Proc. IEEE INFOCOM, Barcelona, Spain, Mar. 2006.
[7] MPLS Traffic Engineering Fast Reroute – Link Protection. http://www.cisco.com/univercd/cc/td/doc/product/software/ios120/120newft/120limit/120st/120st16/frr.htm.
[8] Cisco Multi-Topology Routing. http://www.cisco.com/en/US/products/ps6922/products_feature_guide09186a00807c64b8.html.
[9] Cisco Optimized Edge Routing (OER). http://www.cisco.com/en/US/products/ps6628/products_ios_protocol_option_home.html, 2006.
[10] X. A. Dimitropoulos, D. V. Krioukov, A. Vahdat, and G. F. Riley. Graph Annotations in Modeling Complex Network Topologies. CoRR, abs/0708.3879, 2007.
[11] L. Gao and J. Rexford. Stable Internet Routing Without Global Coordination. IEEE/ACM Transactions on Networking, pages 681–692, Dec. 2001.
[12] S. Gjessing. Implementation of Two Resilience Mechanisms Using Multi Topology Routing and Stub Routers. In International Conference on Internet and Web Applications and Services/Advanced, Feb. 2006.
[13] K. P. Gummadi, H. V. Madhyastha, S. D. Gribble, H. M. Levy, and D. Wetherall. Improving the Reliability of Internet Paths with One-Hop Source Routing. In Proc. 6th USENIX OSDI, San Francisco, CA, Dec. 2004.
[14] C. Hopps. Analysis of an Equal-Cost Multi-Path Algorithm. Internet Engineering Task Force, Nov. 2000. RFC 2992.
[15] Internap. http://www.internap.com/, 2006.
[16] N. Kushman, S. Kandula, D. Katabi, and B. M. Maggs. R-BGP: Staying Connected in a Connected World. In Proc. 4th USENIX NSDI, Cambridge, MA, Apr. 2007.
[17] A. Kvalbein, A. F. Hansen, T. Cicic, S. Gjessing, and O. Lysne. Fast IP Network Recovery Using Multiple Routing Configurations. In Proc. IEEE INFOCOM, pages 23–26, Barcelona, Spain, Mar. 2006.
[18] K. Lakshminarayanan, M. Caesar, M. Rangan, T. Anderson, S. Shenker, and I. Stoica. Achieving Convergence-Free Routing with Failure-Carrying Packets. In Proc. ACM SIGCOMM, Kyoto, Japan, Aug. 2007.
[19] J. Leskovec, J. Kleinberg, and C. Faloutsos. Graphs Over Time: Densification Laws, Shrinking Diameters and Possible Explanations. In Proc. 11th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, Chicago, IL, Aug. 2005.
[20] Juniper Networks: Intelligent Logical Router Service. http://www.juniper.net/solutions/literature/white_papers/200097.pdf.
[21] M. Motiwala, N. Feamster, and S. Vempala. Path Splicing: Reliable Connectivity with Rapid Recovery. In Proc. 6th ACM Workshop on Hot Topics in Networks (Hotnets-VI), Atlanta, GA, Nov. 2007.
[22] R. Perlman. Network Layer Protocols with Byzantine Robustness. PhD thesis, Massachusetts Institute of Technology, Oct. 1988. MIT-LCS-TR-429. http://www.lcs.mit.edu/publications/specpub.php?id=997.
[23] P. Psenak, S. Mirtorabi, A. Roy, L. Nguyen, and P. Pillay-Esnault. Multi-Topology Routing in OSPF. Internet Engineering Task Force, June 2007. RFC 4915.
[24] L. Qiu, Y. R. Yang, Y. Zhang, and S. Shenker. On Selfish Routing in Internet-like Environments. In Proc. ACM SIGCOMM, Karlsruhe, Germany, Aug. 2003.
[25] B. Quoitin and S. Uhlig. Modeling the Routing of an Autonomous System with C-BGP. Network, IEEE, 19(6):12–19, 2005.
[26] Routing Area Working Group (rtgwg). http://www.ietf.org/html.charters/rtgwg-charter.html.
[27] M. Shand and S. Bryant. IP Fast Re-route Framework. http://www3.tools.ietf.org/html/draft-ietf-rtgwg-ipfrr-framework-07, June 2007.
[28] M. Shand and S. Bryant. IP Fast Reroute Using Not-via Addresses. http://www3.tools.ietf.org/html/draft-ietf-rtgwg-ipfrr-notvia-addresses-01, July 2007.
[29] N. Spring, R. Mahajan, and D. Wetherall. Measuring ISP Topologies with Rocketfuel. In Proc. ACM SIGCOMM, Pittsburgh, PA, Aug. 2002.
[30] R. White and B. Akyol. Considerations in Validating the Path in BGP. IETF Draft, 2007.
[31] W. Xu and J. Rexford. MIRO: Multi-Path Interdomain Routing. In Proc. ACM SIGCOMM, Pisa, Italy, Aug. 2006.
[32] X. Yang, D. Wetherall, and T. Anderson. Source Selectable Path Diversity via Routing Deflections. In Proc. ACM SIGCOMM, Pisa, Italy, Aug. 2006.