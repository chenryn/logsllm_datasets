### Network Perturbation Tolerance and Experimental Results

Our system can withstand a limited range of network perturbations before being torn down due to Quality of Service (QoS) constraints. We inject network perturbations within the ranges suggested by this study. Below, we detail the results of our experiments.

#### Latency Variation of the Covert Channel

We introduced packet delays to achieve round-trip times (RTTs) of 15ms, 50ms, and 100ms between Protozoa endpoints (VM1 - VM3). These values emulate regional, intra-continental, and inter-continental RTTs [58, 72], while remaining within the 300ms limit recommended for real-time multimedia sessions with acceptable quality [67].

**Results:**
- **Throughput:** Figure 9(a) illustrates the throughput achieved by our prototype as the RTT between Protozoa endpoints increases. The latency introduced does not impact the throughput, which remains at an average of approximately 1420Kbps across all three configurations.
- **Detection Resistance:** Figure 10(a) presents the ROC curves obtained by the classifier when attempting to detect Protozoa in a network with different RTT configurations. The classifier achieves a maximum AUC of 0.59, indicating that the adversary does not gain an advantage in distinguishing Protozoa flows, regardless of the latency.

#### Bandwidth Variation of the Covert Channel

We symmetrically limited the bandwidth of the link to 1500Kbps, 750Kbps, and 250Kbps, beyond the unrestricted bandwidth conditions assumed in our baseline case. In these conditions, WebRTC streams use approximately 80% of the available bandwidth, consistent with other studies [37].

**Results:**
- **Throughput:** Figure 9(b) shows that the achievable throughput decreases as bandwidth becomes more constrained. For instance, Protozoa’s throughput averages 975Kbps at 1500Kbps, drops to 460Kbps at 750Kbps, and reaches 91Kbps at 250Kbps. This effect is expected because the constrained bandwidth leads to reduced frame rates and video resolution, thus limiting the space for embedding covert data.
- **Detection Resistance:** Figure 10(b) reveals that the bandwidth variation does not provide sufficient information for the classifier to accurately distinguish between legitimate and Protozoa connections, with the AUC peaking at 0.65 when the bandwidth is limited to 1500Kbps.

#### Packet Loss Rate Variation of the Covert Channel

We assessed Protozoa's performance under varying packet loss rates. Following Jansen et al. [37], we dropped 2%, 5%, and 10% of the packets pertaining to WebRTC connections. These loss rates cause WebRTC’s congestion control to increase the sending rate (2%), slowly increase the sending rate (5%), or converge to data rates leading to the tear-down of the video stream (10%). Typical recommendations for real-time media traffic are no more than 1% packet loss [67].

**Results:**
- **Throughput:** Figure 9(c) shows that while Protozoa’s throughput is negatively affected by increasing packet loss rates, it still sustains an average throughput of 1130Kbps at 2% loss and 360Kbps at 5% loss. At 10% packet loss, the throughput decreases to 160Kbps, but the covert channel connections remain active.
- **Detection Resistance:** Figure 10(c) shows that Protozoa maintains high levels of traffic analysis resistance even when the network link between Protozoa endpoints is subject to variable packet loss rates.

#### Latency Variation at the Last Mile

We focused on the impact of the RTT between Protozoa’s proxy (VM3) and open Internet services (VM4) on network performance. Figure 11(b) shows the throughput achieved by Protozoa when the RTT between VM1 and VM2 endpoints is set to 50ms and the last leg of the connection to the Internet service ranges from 15ms to 100ms. Similar to earlier experiments, the throughput remains stable at around 1410Kbps for the three tested configurations.

### Varying Carrier Conditions

We evaluated our system under two carrier-specific conditions:

#### Varying Video Profiles

This experiment tests whether different video profiles used as cover media affect the throughput of our system. Variable bitrate video encoders, such as those used in WebRTC (e.g., VP8), adjust the amount of output data based on the complexity of encoded video segments. We evaluated the performance of the covert channel using Chat, Coding, Gaming, and Sports video profiles.

**Results:**
- **Throughput:** Figure 12(b) shows that our system achieves a similar average throughput of approximately 1400Kbps for Chat, Gaming, and Sports media flows, while reaching 530Kbps for Coding media. These results suggest that the throughput is consistent within each baseline, with a maximum standard deviation of 157Kbps.
- **Detection Resistance:** Figure 12(a) shows the ROC curves for the classifier when attempting to distinguish Protozoa connections conducted over different video profiles. The classifier achieves a similar AUC for all profiles (≈0.6 AUC), indicating that the resistance against traffic analysis is preserved.

#### Varying WebRTC Services

To assess the security and performance properties of our system, we conducted experiments over two additional WebRTC services: coderpad.io (a live coding interview application) and appr.tc (Google’s bare-bones demo application).

**Results:**
- **Detection Resistance:** Figure 13(a) depicts the ROC curves for the classifier when inspecting Protozoa streams established through coderpad.io and appr.tc. The classifier obtains an AUC of 0.58 for coderpad.io and 0.60 for appr.tc, suggesting that Protozoa remains undetectable.
- **Throughput:** Figure 13(b) shows that Protozoa achieves an average throughput of 1420Kbps for appr.tc and 1388Kbps for coderpad.io, similar to the results obtained with whereby.com.

### Testing in the Wild

We tested our system in multiple real-world settings.

#### Testing with Real Application Workloads

We tested Protozoa with various networked applications, as shown in Table 2. We used the baseline setup presented in Section 6.2 and leveraged proxychains [62] to tunnel traffic for applications that do not natively support a SOCKS proxy.

**Results:**
- **Curl (A):** Downloaded files ranging from 1KB to 256MB using HTTP and FTP protocols, verifying uniform bandwidth distribution among simultaneous connections.
- **Transmission (B):** Downloaded a popular Linux distribution ISO using BitTorrent.
- **Mutt (C) and Irssi (D):** Successfully operated email and instant-messaging applications.
- **VLC (E):** Streamed video content.
- **Firefox (F):** Navigated web pages and streamed videos from YouTube, confirming interactive web-surfing capabilities.

Overall, Protozoa successfully accommodated common Internet applications, including web browsing, video streaming, and bulk data transfer.

#### Evading State-Level Adversaries

We tested Protozoa’s ability to circumvent real-world censors in China, Russia, and India. We identified sets of blocked web pages in categories such as gambling, pornography, news/politics, drug sale, and circumvention tools. We verified that these web pages could not be directly accessed using Firefox running on servers in the respective countries. After setting up Protozoa covert sessions, we were able to access the blocked web pages.

**Blocking Policies:**
- **Russia and India:** Browsing blocked websites resulted in ISP blockpages.
- **China:** Blocked websites simply did not load properly, with the Great Firewall (GFW) performing packet drops on connections aimed at blacklisted hosts.

### Conclusion

Our experiments demonstrate that Protozoa can effectively withstand a range of network perturbations, maintain high throughput, and resist detection by adversaries. Additionally, it can support a variety of real-world applications and evade state-level censorship.