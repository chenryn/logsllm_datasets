### Main Challenge and Containment Strategy

The primary challenge in monitoring botnets is that blocking network connections or redirecting them to internal servers can interfere with the botnet's internal operations, leading to missed interesting behaviors. This contradicts our goal of tracking botnets and identifying their lifecycle. On the other hand, running unknown malware without supervision may result in our analysis system participating in malicious activities. To address this, we adopt a trade-off between tracking quality and execution containment. Our containment policy blocks SMTP to prevent spam, as well as reverse shells and SOCKS connections. Future work will focus on enhancing our containment strategy and employing more sophisticated approaches, such as those described in [22].

### 3. Evaluation

This section details the experiments conducted to demonstrate the effectiveness of our approach in botnet tracking. We first describe the experimental setup, followed by the results of using BotWatcher to monitor four current botnets. Additionally, we apply BotWatcher to another operating system to showcase its genericity. The detailed results, including the concrete output generated by BotWatcher, are available in a supplementary document [12].

#### 3.1 Setup of the Analysis Environment

Our experiments were conducted on a PC with a 3.4 GHz Intel Core i7-2600 CPU and 16 GB of main memory, running Ubuntu 14.04 x86-64. We used VirtualBox [5] to create three virtual analysis environments: Windows XP SP3 (32-bit, used in Case Studies 1 and 4), Windows 8.1 (32-bit, used in Case Studies 2 and 3), and Mac OS X 10.9.5 Mavericks (64-bit, used in Case Study 5). Each virtual machine was connected to a private virtual network, which was linked to the Internet via network address translation.

#### 3.2 Case Study 1: Upatre

Upatre is a Trojan downloader that has been active since at least August 2013 [10]. It is typically spread through drive-by-downloads or spam. We executed Upatre on January 15, 2015, at 12:06 PM and tracked the botnet until January 22, 2015, at 12:15 PM.

**Results:**
Figure 3 illustrates the inferred behavior of the botnet. Initially, Upatre contacted its C&C server and downloaded an additional binary, which was then executed. This binary injected itself into the svchost.exe process. Our manual analysis revealed that the new binary is a banking Trojan called Dyzap (also known as Dyre) [3]. BotWatcher detected several malware downloads within the first 24 hours. Manual analysis showed that five of these downloads were updates of Dyzap. Some of these updates, particularly those in the first six hours, were noteworthy. First, the rootkit Pushdo (also known as Cutwail) was downloaded and executed. BotWatcher observed Pushdo creating a registry entry for persistence. The second significant update was Pushdo downloading the credential stealer Kegotip, which was later confirmed. BotWatcher detected Kegotip being injected into a newly created svchost.exe process. Kegotip enumerated all files on the hard disk, checking for online credentials like FTP credentials [1]. After starting, Kegotip began opening and closing a large number of files, which BotWatcher identified as MassiveFileAccess behavior. Pushdo, 24 hours later, began resolving many domain names, which failed to resolve, indicating the use of a domain generation algorithm.

**Discussion:**
In this case study, BotWatcher successfully illuminated the different components of an Upatre-based botnet, detecting four distinct malware families (Upatre, Dyzap, Pushdo, Kegotip) and collecting eighteen malware downloads. A quick dynamic analysis would have provided only a shallow overview of this complex, multi-component botnet. In contrast, BotWatcher monitored the botnet over an extended period, capturing various behaviors and dynamically loaded components that would otherwise be missed.

#### 3.3 Case Study 2: Emotet

Emotet is a modular botnet with a high degree of automation [2], also known as Feodo, Geodo, Cridex, or Dridex. It includes a small loader module and several modules for different purposes, such as a banking module, an address book grabber, and a spamming module. We executed Emotet on May 19, 2015, at 3:56 PM and tracked the botnet until May 22, 2015, at 4:19 PM.

**Results:**
Immediately after execution, Emotet persisted in the system and, after thirty minutes, downloaded another binary (cr mss3.exe). As shown in Figure 5, BotWatcher observed the bot continuously trying to contact several mail servers. Manual reverse engineering confirmed that this binary is a spamming module of Emotet. While spamming continued, further binaries were downloaded. After three hours, BotWatcher detected the download and execution of another binary that performed code injection. Subsequently, massive file access was observed in the targeted process. Manual analysis revealed that the downloaded binary is an information stealer malware. Spamming stopped after eight hours, but after a period of inactivity, BotWatcher observed several downloads of binaries combined with spamming activity that lasted for about two-thirds of a day. BotWatcher collected 48 binaries in total, 37 of which had unique MD5 hashes and corresponded to a few periodically rehashed modules.

**Discussion:**
Emotet demonstrated a high degree of automation during the case study. BotWatcher observed periods of spamming, information exfiltration, and the execution of further binaries. The insights provided by BotWatcher into the botnet lifecycle and the collected binaries facilitated our manual investigation of the various modules involved. Key observations include: spamming occurs in periods lasting several hours, botnet modules are frequently rehashed to evade AV products, and rehashing occurs more often during spamming periods.

#### 3.4 Case Study 3: Gamarue

Gamarue, also known as Andromeda, is a malware downloader often distributed via spam. For this case study, we used a Gamarue sample from a spam email related to a hotel booking confirmation. We executed the sample on April 27, 2015, at 2:55 PM and tracked the botnet until May 6, 2015, at 7:08 AM.

**Results:**
Initially, BotWatcher detected that Gamarue created a new process, msiexec.exe, and injected code into it. Gamarue then terminated its dropper process. For the next three days, BotWatcher detected continuous HTTP-based C&C-server communication carried out by msiexec.exe. On April 30, 2015, at 7:00 PM, BotWatcher observed a download performed by msiexec.exe, followed by the creation of a new process. This process created an autostart registry key to persist in the system. Another system process, svchost.exe, was started, and code was injected into it. This process then contacted a C&C-server for further instructions. Manual inspection revealed that Gamarue downloaded the bootkit Rovnix. Both samples remained active and continuously contacted their C&C-server for the rest of the case study.

**Discussion:**
The C&C-server of Gamarue delayed the delivery of Rovnix for around three days. This behavior could be due to either cautious operators who took time to trust our bot or a lack of commands during that period. The downloaded malware, Rovnix, is used as infrastructure-building malware. This case study highlights the importance of long-term tracking to fully understand botnet activities, as static and short-time dynamic analyses are insufficient.

#### 3.5 Observing Mac OS X: OSX/VidInstaller

Malware is increasingly targeting new platforms like Mac OS X. However, there are few Mac OS X-based botnets. During our experiments, we could not find a live botnet for this platform, as C&C infrastructures like WireLurker had already been sinkholed or taken down. We decided to run BotWatcher with the adware OSX/VidInstaller to demonstrate its capacity to monitor other platforms. We executed OSX/VidInstaller on June 3, 2015, at 8:57 AM and observed it until 1:13 PM on the same day, using a Mac OS X Mavericks (64-bit) guest system.

**Observation and Discussion:**
After executing OSX/VidInstaller, BotWatcher detected a new process that asked the user to agree to its installation. We simulated a user and accepted the request. Subsequently, BotWatcher observed several HTTP-requests to suspicious domains. The browser Safari was started, presenting a webpage advertising a program called MacKeeper. We simulated a user and installed this program. BotWatcher detected the creation of two MacKeeper-related processes, and no further activities occurred for the remaining time.

This case study demonstrates that our approach can analyze other platforms, which is valuable to malware researchers as malware authors target increasingly popular platforms like Mac OS X and Android.

### 4. Time-Based Evasion Techniques

Malware employs various techniques to evade dynamic analysis, including execution stalling to delay the actual malicious payload. This technique exploits the limited analysis time of sandboxes. Modern analysis approaches, such as Hasten [21], can circumvent client-side execution stalling. However, C&C servers can also delay delivering modules or commands, making it difficult for analysis tools to manipulate the server-side code. This serves as a mechanism to establish trust with newly joined bots and hinder dynamic analysis. Our experiments show that modern botnets are moving some of these stalling techniques to the server side, achieving greater resilience against current anti-evasion approaches. We believe that this kind of evasion can only be circumvented by tracking over an extended period.