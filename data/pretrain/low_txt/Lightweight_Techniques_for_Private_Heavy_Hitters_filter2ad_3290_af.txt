### Incremental DPF Construction and Efficiency
Incremental DPF (Distributed Point Function) construction is more efficient, especially when AES (Advanced Encryption Standard) hardware instructions are used to implement the Pseudorandom Generator (PRG).

### Providing Differential Privacy
To limit the amount of information an adversary can infer from the system's output, we ensure that the system's output satisfies ε-differential privacy [24, 25]. This can be achieved with a simple modification to our heavy-hitters protocol (Protocol 5), which is detailed in the full version of this work [8].

### Implementation and Evaluation
We implemented our complete private heavy-hitters scheme in Rust (version 1.46.0-nightly). The implementation consists of approximately 3,500 lines of code, including tests. The source code is available at: https://github.com/henrycg/heavyhitters.

Our sketching scheme uses a 62-bit finite field in the middle of the "tree" (Figure 4) and a 255-bit field at the leaves. With this configuration, our sketching schemes can detect cheating clients, except with a probability of approximately \(2^{-62}\), over the servers' random choices, independent of the computational effort by a cheating client. While this level of security against a cheating client is expected to be sufficient in practice, running the sketching scheme twice—doubling the communication and computation—can achieve nearly 128-bit security. Using the larger field at the leaves ensures that our DPF construction satisfies the extractability property (Lemma 4.1) against cheating clients that run in time at most \( \approx 2^{128} \).

### Performance Metrics
- **Authorized Use**: Limited to Tsinghua University. Downloaded on February 25, 2022, at 12:11:14 UTC from IEEE Xplore. Restrictions apply.
- **Table 9**: End-to-end cost of our private heavy-hitters system, used to collect n = 256-bit strings. Each client’s string is sampled from a Zipf distribution with parameter 1.03 and support 10,000. We use one c4.8xlarge server (32 virtual cores) to implement each of the two logical servers. One server is in Amazon’s N. California data center, and the other is in N. Virginia. The servers set the heavy-hitters threshold to collect all strings that more than 0.1% of clients hold.
- **Figure 10**: Estimated execution time of our heavy-hitters protocol. Each line represents a number of clients. The workload is fully parallelizable, so sharding costs are negligible. System parameters are as in Table 9.

### Conclusions
In this paper, we describe a system that allows two non-colluding servers to compute the most popular strings among a large set of client-held strings while preserving client privacy. Along the way, we introduce several lightweight cryptographic tools:
- A protocol for checking that a secret-shared vector is a unit vector.
- An extractable variant of distributed point functions that defends against badly formed keys.
- A generalization of distributed point functions for secret-sharing weights on binary trees.

### Potential Extensions
There are several potential extensions to this work. For instance, instead of finding heavy hitters, the servers might want to find heavy clusters—strings that are close to many of the client-held strings under some distance metric. Perhaps each client holds a GPS coordinate pair, and the servers want to learn about popular neighborhoods.

### Acknowledgments
We thank Eric Rescorla for suggesting this problem, Saba Eskandarian for comments and discussion, and the anonymous reviewers for their feedback and suggestions. Dan Boneh was funded by NSF, DARPA, a grant from ONR, and the Simons Foundation. Elette Boyle was supported by ISF grant 1861/16, AFOSR Award FA9550-17-1-0069, and ERC Project HSS (852952). Henry Corrigan-Gibbs was funded in part by a Facebook Research Award. Henry thanks Bryan Ford for generously hosting him at EPFL during the early stages of this project. Niv Gilboa was supported by ISF grant 2951/20, ERC grant 876110, and a grant by the BGU Cyber Center. Yuval Ishai was supported by ERC Project NTSC (742754), ISF grant 2774/20, NSF-BSF grant 2015782, and BSF grant 2018393.

### References
[References listed as provided, with no changes made to the original citations.]