### Index

#### Client Components and Input Retrieval
- **Client Components**
  - Retrieving input: 60–61
  - Reading data from standard input streams: 66–68
  - Retrieving command-line parameters supplied by users: 63–65
  - Using `spawn` to avoid blocking input/output: 68–70

#### Client-Related Concepts
- **Client Module**: 79
- **Client Type**: 80
- **Clients**
  - Adding network functionality: 95–98
  - Creating an instance to hold client data: 92
  - Processing messages: 92–95
  - Sending messages: 95
  - Testing the server without a client: 91–92
- **Client-Server Module**: 59
- **Close Procedure**: 93, 198
- **cmp Procedure**: 116

#### Code and Data Structures
- **Code Blocks**: Passing to templates: 256–257
- **Code Statements**: 48
- **Collection Types**
  - Arrays: 39
  - Sequences: 41–42
  - Sets: 42–43
- **Colon Character**: 31
- **Comma Character**: 36
- **Command Not Found Error**: 289
- **Command-Line Applications**: 5
- **Command-Line Arguments**: 100, 122–126
- **Command-Line Parameters**
  - Overview: 63
  - Retrieving user-supplied parameters: 63–65
- **Command-Line Tools (Nimble)**: 131
- **Comments**: 25
- **Community for Nim Programming Language**: 20, 281
- **Comparable Concept**: 254
- **Comparison Operators**: 110
- **Type Compatibility**: 231
- **Compilation**: 9–11
- **Compiler**
  - Architecture: 289
  - Building from C sources: 283–286
    - Adding Nim to PATH: 286
    - Compiling: 285
    - Downloading archives: 284
    - Extracting archives: 284–285
    - Moving archives to a safe location: 284–285
    - Verifying installation: 286
  - Installing: 282–286
  - Verifying installation: 286
- **Compiler User Guide**: 14
- **Compile-Time Error**: 31
- **Compile-Time Function Execution (CTFE)**: 19, 260–262
- **Comprehensive Perl Archive Network (CPAN)**: 128
- **Concatenation Operator**: 110
- **Concept Keyword**: 254
- **Concurrency vs. Parallelism**: 151–152
- **Config Macro**: 273
- **Configuration DSLs**: 267–278
  - Generating constructor procedures: 274–275
  - Generating load procedures: 275–277
  - Generating object types: 270–274
  - Starting a configurator project: 268–270
  - Testing configurators: 278
- **Connect Procedure**: 82, 96
- **Connected Flag**: 81, 93
- **const char * Type**: 229
- **const Keyword**: 32
- **Constraining Generics**: 252–253
- **Constructor Procedures**: 274–275
- **Container Variable**: 252
- **contextAttributes Argument**: 245
- **continue Keyword**: 44
- **Control Flow Mechanisms**: 250
- **Controllers**: 210–219
  - Adding Follow buttons: 217–218
  - Extending / routes: 214
  - Implementing /createMessage routes: 215
  - Implementing /follow routes: 218–219
  - Implementing /login routes: 212–213
  - Implementing user routes: 216–217
- **Could Not Load Error**: 289
- **Counter Variable**: 174, 176
- **counterLock**: 175
- **cpp Command**: 287
- **crash Procedure**: 159
- **createDatabase Module**: 198
- **createLoadProc Procedure**: 276
- **createMessage Procedure**: 78, 97
- **/createMessage Routes**: 215
- **createRefType Procedure**: 272
- **createThread Procedure**: 153, 155, 159
- **createWindowAndRenderer Procedure**: 239
- **critbits Module**: 111
- **Cross-Compilation**: 14
- **cstring Type**: 229
- **Curly Brackets**: 43, 73
- **currentUser Parameter**: 204

#### Data Handling
- **Data**
  - Client data: 92
  - Manipulating data: 122–126
  - Parsing data: 159–167
    - Manually using `parseutils` module: 163–164
    - Manually using `split` procedure: 162–163
    - Processing each line of Wikipedia page-counts files: 164–167
    - Understanding Wikipedia page-counts format: 160–161
    - Using regular expressions: 161–162
    - Wikipedia page-counts format: 161–164
  - Reading from standard input streams: 66–68
  - Retrieving from databases: 194–198
  - Storing in databases: 189–200
    - Setting up databases: 192–194
    - Setting up types: 190–192
    - Testing databases: 198–200
  - Transferring asynchronously: 91–99
    - Adding network functionality to the client: 95–98
    - Creating a new `Client` instance to hold client data: 92
    - Final results: 98–99
    - Processing client messages: 92–95
    - Sending messages to other clients: 95
    - Testing the server without a client: 91–92
  - Using sockets to transfer: 79–99
    - Asynchronous input/output: 83–91
    - Asynchronously: 91–99
- **Data Parameter**: 72
- **Data Parsing**: 179
- **Data Structures**: 111–117
  - Modules: 117
  - Sets module: 114–115
  - Tables module: 112–114
- **Data Variable**: 153
- **Database Module**: 192
- **Databases**
  - Retrieving data: 194–198
  - Setting up: 192–194
  - Storing data: 189–200
  - Testing: 198–200
- **DbConn Object**: 192, 195
- **db_mysql Module**: 190, 192
- **db_postgres Module**: 190, 192
- **db_sqlite Module**: 190, 192
- **Debian-Based Distributions**: 284
- **Decimal Notation**: 27
- **Declarative Templates**: 261
- **declareVar Template**: 258–259
- **Default Parameters**: 36
- **defined Procedure**: 121
- **delete Procedure**: 123
- **Dependencies**: Specifying in Nimble: 141–144
- **Deploying Web Applications**: 219–221
  - Configuring Jester microframework: 219
  - Setting up reverse proxy: 219–221
- **Developing**
  - Controllers: 210–219
    - Adding Follow buttons: 217–218
    - Extending / routes: 214
    - Implementing /createMessage routes: 215
    - Implementing /follow routes: 218–219
    - Implementing /login routes: 212–213
    - Implementing user routes: 216–217
  - Front-page view: 207–210
  - Packages in Nimble package manager: 147–148
    - Giving meaning to version numbers: 147
    - Storing different versions of a single package: 147–148
  - User view: 204–206
  - Web application view: 200–210
- **Development Environments (IDEs)**
- **Directory Layout**: Of packages in Nimble: 140–141
- **discard Keyword**: 34, 230
- **discardable Pragma**: 239, 248
- **Distributed Version Control Systems (DVCSs)**: 133
- **DLL (Dynamic-Link Library) Could Not Load Error**: 289–290
- **do Keyword**: 14, 19
- **do Notation**: 256
- **doAssert Procedure**: 76, 100, 111
- **Documentation**
  - Nimble: 133
  - Standard library: 108–109
- **Domain-Specific Languages (DSLs)**
  - Creating configuration: 267–278
  - Overview: 7
- **Dot Character**: 52
- **Double-Quote Character**: 29, 66
- **Downloading**
  - Compiler archives: 284
  - SDL libraries: 235
- **drawLines Procedure**: 240–241
- **dumpTree Macro**: 263, 268
- **Dynamic Linking**
  - Overview: 236–237
  - vs. Static linking: 227–228
- **Dynamic Type Systems**: 8
- **dynlib Pragma**: 237, 248

#### E
- **echo Procedure**: 64, 93, 110
- **elif Keyword**: 43
- **else Branch**: 121
- **else Keyword**: 43
- **EmbedElement Type**: 247
- **Empty Nodes**: 270–271
- **end Keyword**: 14, 19, 24
- **Enum Types**: 51–52
- **Environment Variables**: 286
- **Equals Character**: 36, 125
- **Errors, Catching Ahead of Time**: 18
- **escape Procedure**: 207
- **Event Loops**: 87–88
- **except Branch**: 48
- **except Keyword**: 107
- **Exceptions**
  - Handling: 47–48
  - In threads: 159
- **execCmd Procedure**: 120
- **execCmdEx Procedure**: 120
- **Execution**
  - Difference between synchronous and asynchronous: 85–86
  - External processes: 120–121
  - Compile-time function: 261–262
  - Threads: 155–156
- **Execution Time**
  - Of `parallel_counts`: 172–173
  - Of `sequential_counts`: 168
- **existsDir Procedure**: 119
- **existsFile Procedure**: 119
- **expectKind Procedure**: 273
- **Export Marker**: 72
- **exportc Procedure**: 246
- **External Libraries (C Programming Language)**: 234–242
- **External Package**: 133
- **External Processes, Executing**: 120–121
- **Extracting Compiler Archives**: 284–285

#### F
- **F4 Shortcut (Aporia)**: 62
- **F5 Shortcut (Aporia)**: 288
- **Facebook Messenger**: 58
- **failed Procedure**: 85
- **Features**
  - C++ programming language: 19
  - C programming language: 19
  - D programming language: 19
  - Go programming language: 19
  - Java programming language: 19
  - Lua programming language: 19
  - Nim programming language: 6–11, 19
    - Compilation: 9–11
    - Instability of newer features: 20
    - Memory management: 11
    - Metaprogramming: 6–7
    - Powerful type system: 8–9
    - Style insensitivity: 8
  - Python programming language: 19
  - Rust programming language: 19
- **FFIs (Foreign Function Interfaces)**: 25, 226, 261
- **FIFO (First-In-First-Out)**: 176
- **Files**
  - Parsing each line: 165–166
  - Using iterators to read fragments: 164–165
- **Filesystems**: 118–120
- **fill Procedure**: 116
- **fillString Procedure**: 32, 261
- **filter Procedure**: 38
- **Filters**: 202
- **findMessages Procedure**: 196, 200
- **findUser Procedure**: 196, 200
- **flags Argument**: 240
- **Flexibility of Nim**: 16–18
- **float Type**: 9, 26, 250
- **Floating-Point Type**: 28
- **Flow, Controlling**: 43–47
- **FlowVar Container**: 158
- **FlowVar Types, Retrieving Return Values From**: 158–159
- **fmReadWrite Mode**: 89
- **Follow Buttons, Adding**: 217–218
- **follow Procedure**: 195, 218
- **/follow Route, Implementing**: 218–219
- **foo Identifier**: 258
- **for Loop**: 18, 40, 44–45, 205
- **for Statement**: 45
- **Foreign Function Interface**
  - Static vs. dynamic linking: 227–228
  - Type compatibility: 231
  - Wrapping C procedures: 228–234
- **Foreign-Key Constraint**: 194
- **Format String**: 230
- **Forums**: 281
- **Forward Declaration**: 34
- **FP (Functional Programming)**: 17, 21
- **Fragments**
  - Overview: 160, 169
  - Using iterators to read: 164–165
- **free Function**: 232
- **from Statement**: 106
- **Front-Page View, Developing**: 207–210