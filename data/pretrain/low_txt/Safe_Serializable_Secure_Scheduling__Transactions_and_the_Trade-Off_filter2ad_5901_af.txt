### Access Control and Transaction Management

Access control mechanisms determine who can view, edit, or add to posts and comments. In one of our programs, the blog owner atomically reads a post and updates its text to alternate between “fizz” and “buzz.” In another program, a user comments on the first post (Figure 10). To ensure the comment remains relevant to the post's content, the reading of the post and the addition of the comment are performed atomically. Since posts and comments have different access labels, this transaction involves at least two stages: one for reading the post and another for writing the comment.

We successfully compiled and ran these programs with our modified system, making relatively few changes. Out of 352 lines of code, we only needed to modify 50 lines, primarily by adding annotations to method signatures (Section 7.2.4).

### Rainforest Implementation

We implemented the Rainforest example from Section 2.1. In our code, two nodes within Rainforest act with Rainforest’s authority. They perform transactions representing the orders of Gloria and Fred, as shown in Figure 1. Each transaction updates inventory data stored at one location and banking data stored at another. Figure 11 provides examples of the policies for price, inventory, and banking data.

While attempting to modify this code to work with Staged Commit (SC), we discovered that the staging order chosen in Section 7.2.3 makes it impossible to provide the atomicity of the original application while meeting its security requirements and ensuring deadlock freedom. For instance, if Gloria is purchasing an item from Outel, the event updating the inventory must share a transaction with the one debiting Gloria’s bank account. The conflict label for the inventory event corresponds to {Outel}, whereas the conflict label for the debit event corresponds to {Bank, Gloria}. Since neither is a subset of the other, the compiler cannot place them in the same transaction.

These difficulties in porting the Rainforest application arise because Fabric is designed as an open system, requiring an a priori choice of staging order. If the application were part of a closed system, deadlock freedom could be achieved by selecting a specific staging order (e.g., {Outel} before {Bank, Gloria}). However, this might complicate future extensions to the system.

### Overhead Analysis

The staged commit protocol introduces two main sources of overhead compared to traditional Two-Phase Commit (2PC). First, each stage involves a round trip to prepare the data manipulated during the stage, leading to overhead that scales with the number of stages and network latency. Second, as described in Section 7.3, dynamic labels result in potential stage points, which must be resolved using run-time checks. The number of checks depends on how well the compiler's static analysis predicts potential stage points.

We measured this overhead on an Intel Core i7-2600 machine with 16 GiB of memory, using the transactions in our examples. The post and comment transactions in the blog example were each run continuously for 15 minutes, and Patsy’s transaction in the hospital example was run continuously for 1 hour. Figure 12 shows the overall execution times for both the original and modified systems. For the modified system, it also indicates the number of stages for each transaction and the average time spent in dynamic checks for resolving potential stage points.

The comment transaction in our experiments has one more stage than described in Figure 10 because all transactions include an initial stage to obtain the principals involved in the application. By running the nodes on a single machine and using in-memory data storage, we maximize the fraction of the transaction run time occupied by dynamic checks. Despite the low communication latency, we report the number of stages, from which the overhead can be calculated for arbitrary latency.

### Related Work

Various goals for atomic transactions, such as serializability [28] and ACID [20], have long been proposed and widely studied. While recent interest has focused on performance, we focus on security. Information leaks in commonly used transaction scheduling protocols have been known for at least two decades [36, 6]. Kang and Keefe [21] explore transaction processing in databases with multiple security levels, focusing on a simpler setting with a global, trusted transaction manager. Smith et al. [36] show that strong atomicity, isolation, and consistency guarantees are not possible for all transactions in a generalized multilevel secure database. They propose weaker guarantees and three different protocols that meet various weaker guarantees. Their Low-Ready-Wait 2PL protocol is similar to SC, providing what the authors call ACIS−–correctness. Duggan and Wu [16] observe that aborts in high-security subtransactions can leak information to low-security parent transactions. Atluri, Jajodia, and George [5] describe several known protocols requiring weaker guarantees or a single trusted coordinator. Our work focuses on securely serializing transactions in a fully decentralized setting, considering liveness: SC can guarantee deadlock freedom of transactions with relaxed monotonicity.

### Conclusion

There is a fundamental trade-off between strong consistency guarantees and strong security properties in decentralized systems. We investigate the secure scheduling of transactions, a ubiquitous building block of modern large-scale applications. Abort channels offer a stark example of an unexplored security flaw: existing transaction scheduling mechanisms can leak confidential information or allow unauthorized influences on trusted data. While some sets of transactions are impossible to serialize securely, we demonstrate the viability of secure scheduling.

We present relaxed monotonicity, a simple condition under which secure scheduling is always possible. Our staged commit protocol can securely schedule any set of transactions with relaxed monotonicity, even in an open system. To demonstrate the practical applicability of this protocol, we adapted the Fabric compiler to check transactional programs for conditions that allow secure scheduling. These checks are effective: the compiler identifies an intrinsic security flaw in one program and accepts other, secure transactions with minimal adaptations.

This work sheds light on the fundamentals of secure transactions. However, there is more work to be done to understand the pragmatic implications. We have identified separate necessary and sufficient conditions for secure scheduling, but there remains space to explore. Ultimately, abort channels are just one instance of the general problem of information leakage in distributed systems. Similar channels may exist in other distributed settings, and we expect it to be fruitful to explore other protocols through the lens of information flow analysis.

### Acknowledgments

The authors would like to thank the anonymous reviewers for their suggestions. This work was supported by MURI grant FA9550-12-1-0400, NSF grants 1513797, 1422544, 1601879, gifts from Infosys and Google, and the Department of Defense (DoD) through the National Defense Science & Engineering Graduate Fellowship (NDSEG) Program.

### References

[1] Distributed transactions: .NET framework 4.6. https://msdn.microsoft.com/en-us/library/ms254973%28v=vs.110%29.aspx. Accessed: 2015-11-13.
[2] XA standard. In L. Liu and M. T. Özsu, editors, Encyclopedia of Database Systems, pages 3571–3571. Springer US, 2009.
[3] O. Arden, J. Liu, T. Magrino, and A. C. Myers. Fabric 0.3. Software release, http://www.cs.cornell.edu/projects/fabric, June 2016.
[4] A. Askarov, D. Zhang, and A. C. Myers. Predictive black-box mitigation of timing channels. In CCS, 2010.
[5] V. Atluri, S. Jajodia, and B. George. Multilevel Secure Transaction Processing. Advances in Database Systems. Springer US, 2000.
[6] V. Atluri, S. Jajodia, T. F. Keefe, C. D. McCollum, and R. Mukkamala. Multilevel secure transaction processing: Status and prospects. DBSec, 8(1):79–98, 1996.
[7] G. Barthe, T. Rezk, and M. Warnier. Preventing timing leaks through transactional branching instructions. Electron. Notes Theor. Comput. Sci., 153(2):33–55, May 2006.
[8] E. Bertino, B. Catania, and E. Ferrari. A nested transaction model for multilevel secure database management systems. ACM Trans. Inf. Syst. Secur., 4(4):321–370, Nov. 2001.
[9] B. Calder, J. Wang, A. Ogus, N. Nilakantan, A. Skjolsvold, S. McKelvie, Y. Xu, S. Srivastav, J. Wu, H. Simitci, et al. Windows Azure Storage. In SOSP, 2011.
[10] M. R. Clarkson and F. B. Schneider. Hyperproperties. In CSF, 2008.
[11] J. C. Corbett, J. Dean, M. Epstein, A. Fikes, C. Frost, J. J. Furman, S. Ghemawat, A. Gubarev, C. Heiser, P. Hochschild, et al. Spanner: Google’s globally distributed database. ACM Transactions on Computer Systems (TOCS), 31(3):8, 2013.
[12] D. E. Denning. A lattice model of secure information flow. Comm. of the ACM, 19(5):236–243, 1976.
[13] D. E. Denning. Cryptography and Data Security. Addison-Wesley, Reading, Massachusetts, 1982.
[14] D. E. Denning and P. J. Denning. Certification of programs for secure information flow. Comm. of the ACM, 20(7):504–513, July 1977.
[15] A. Dragojević, D. Narayanan, E. B. Nightingale, M. Renzelmann, A. Shamis, A. Badam, and M. Castro. No compromises: Distributed transactions with consistency, availability, and performance. In SOSP, 2015.
[16] D. Duggan and Y. Wu. Transactional correctness for secure nested transactions. In TGC, pages 179–196, 2011.
[17] K. P. Eswaran, J. N. Gray, R. A. Lorie, and I. L. Traiger. The notions of consistency and predicate locks in a database system. Comm. of the ACM, 19(11):624–633, Nov. 1976. Also published as IBM RJ1487, December 1974.
[18] M. J. Fischer, N. A. Lynch, and M. S. Paterson. Impossibility of distributed consensus with one faulty process. Journal of the ACM, 32(2):374–382, Apr. 1985. (MIT/LCS/TR-282).
[19] J. A. Goguen and J. Meseguer. Security policies and security models. In IEEE Symp. on Security and Privacy, pages 11–20, Apr. 1982.
[20] T. Haerder and A. Reuter. Principles of transaction-oriented database recovery. ACM Comput. Surv., 15(4):287–317, Dec. 1983.
[21] I. E. Kang and T. F. Keefe. Transaction management for multilevel secure replicated databases. J. Comput. Secur., 3(2-3):115–145, Mar. 1995.
[22] B. Köpf and M. Dürmuth. A provably secure and efficient countermeasure against timing attacks. In 2009 IEEE Computer Security Foundations, July 2009.
[23] L. Lamport. Time, clocks, and the ordering of events in a distributed system. Comm. of the ACM, 21(7):558–565, July 1978.
[24] J. Liu, M. D. George, K. Vikram, X. Qi, L. Waye, and A. C. Myers. Fabric: A platform for secure distributed computation and storage. In SOSP, 2009.
[25] D. McCullough. Noninterference and the composability of security properties. In IEEE Symp. on Security and Privacy, pages 177–186. IEEE Press, May 1988.
[26] S. Microsystems. JavaBeans (version 1.0.1-a). http://java.sun.com/products/javabeans/docs/spec.html, Aug. 1997.
[27] A. C. Myers and B. Liskov. Protecting privacy using the decentralized label model. ACM Transactions on Software Engineering and Methodology, 9(4):410–442, Oct. 2000.
[28] C. H. Papadimitriou. The serializability of concurrent database updates. J. of the ACM, 26(4):631–653, Oct. 1979.
[29] D. R. K. Ports and K. Grittner. Serializable snapshot isolation in PostgreSQL. Proc. VLDB Endow., 5(12):1850–1861, Aug. 2012.
[30] A. W. Roscoe. CSP and determinism in security modelling. In IEEE Symp. on Security and Privacy, 1995.
[31] A. Sabelfeld and A. C. Myers. Language-based information-flow security. IEEE Journal on Selected Areas in Communications, 21(1):5–19, Jan. 2003.
[32] A. Sabelfeld and A. C. Myers. A model for delimited release. In 2003 International Symposium on Software Security, number 3233 in Lecture Notes in Computer Science, pages 174–191. Springer-Verlag, 2004.
[33] D. A. Schultz and B. Liskov. IFDB: decentralized information flow control for databases. In EUROSYS, 2013.
[34] I. Sheff, T. Magrino, J. Liu, A. C. Myers, and R. van Renesse. Safe serializable secure scheduling: Transactions and the trade-off between security and consistency. Technical Report 1813–44581, Cornell University Computing and Information Science, Aug. 2016.
[35] A. Silberschatz, P. Galvin, and G. Gagne. Operating System Concepts. Windows XP update. Wiley, 2003.
[36] K. Smith, B. Blaustein, S. Jajodia, and L. Notargiacomo. Correctness criteria for multilevel secure transactions. Knowledge and Data Engineering, IEEE Transactions on, 8(1):32–45, Feb 1996.
[37] S. Zdancewic and A. C. Myers. Observational determinism for concurrent program security. In CSFW, 2003.