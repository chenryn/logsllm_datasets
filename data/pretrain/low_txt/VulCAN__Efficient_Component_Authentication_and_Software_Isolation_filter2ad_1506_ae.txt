### Extensibility and Performance Implications of TyTAN
We anticipate that TyTAN can be extended to provide guarantees similar to our approach, but with the inherent performance and Trusted Computing Base (TCB) implications associated with software-based cryptography.

### Sancus in IoT and Automotive Applications
Sancus has been utilized to develop a trust assessment system for IoT applications [30], enabling a Policy Management (PM) entity to securely inspect and attest the host operating system on lightweight computing nodes. In an automotive context, this technology could facilitate the integration of third-party hardware or software components into a vehicle while allowing the manufacturer to securely monitor their behavior.

### Conclusions and Future Work
This paper introduced VulCAN, a trusted computing design for message authentication, software component attestation, and isolation in vehicular communication networks. We contributed enhanced security requirements for the Controller Area Network (CAN) and evaluated our hardware-assisted solution against previous software-only authentication schemes. To the best of our knowledge, we are the first to present such a comparison, considering attackers capable of arbitrary (unprotected) code execution on participating Electronic Control Units (ECUs). Our results demonstrate that relatively inexpensive microcontrollers equipped with lightweight embedded cryptography and software component isolation can provide strong security guarantees while maintaining real-time deadlines for safety-critical applications under benign conditions.

In future work, we plan to investigate real-time responsiveness and availability guarantees on partially compromised ECUs [45]. Additionally, we aim to implement a secure vehicular attestation server [39] and explore application scenarios in the context of Vehicle-to-Everything (V2X) communications [48]. More broadly, we see compelling use cases for our approach to authentic execution [32] in distributed embedded control systems within the Internet of Things (IoT) and Industry 4.0 domains.

### Acknowledgments
This research is partially funded by the Research Fund KU Leuven. Jo Van Bulck is supported by a doctoral grant from the Research Foundation – Flanders (FWO).

### References
[1] Morton Abramson and WOJ Moser. 1970. More birthday surprises. The American Mathematical Monthly 77, 8 (1970), 856–858.
[2] Tiago Alves and Don Felton. 2004. TrustZone: Integrated hardware and software security. ARM white paper 3, 4 (2004), 18–24.
[3] AUTOSAR Specification 4.3. 2016. Specification of module secure onboard communication. https://www.autosar.org/standards/classic-platform/release-43/software-architecture/safety-and-security/. (2016).
[4] Guido Bertoni, Joan Daemen, Michaël Peeters, and Gilles Van Assche. 2011. Duplexing the sponge: Single-pass authenticated encryption and other applications. In Selected Areas in Cryptography. Springer, 320–337.
[5] Andrey Bogdanov, Miroslav Knezevic, Gregor Leander, Deniz Toz, Kerem Varici, and Ingrid Verbauwhede. 2012. SPONGENT: The design space of lightweight cryptographic hashing. IEEE Trans. Comput. 99.
[6] Ferdinand Brasser, Brahim El Mahjoub, Ahmad-Reza Sadeghi, Christian Wachsmann, and Patrick Koeberl. 2015. TyTAN: Tiny trust anchor for tiny devices. In Design Automation Conference (DAC ’15). IEEE, 1–6.
[7] Alessandro Bruni, Michal Sojka, Flemming Nielson, and Hanne Riis Nielson. 2014. Formal security analysis of the MaCAN protocol. Springer International Publishing, Cham, 241–255.
[8] Madeline Cheah, Siraj A. Shaikh, Olivier Haas, and Alastair Ruddle. 2017. Towards a systematic security evaluation of the automotive Bluetooth interface. Vehicular Communications 9 (2017), 8–18.
[9] Stephen Checkoway, Lucas Davi, Alexandra Dmitrienko, Ahmad-Reza Sadeghi, Hovav Shacham, and Marcel Winandy. 2010. Return-oriented programming without returns. In Proceedings of the 17th ACM Conference on Computer and Communications Security (CCS ’10). ACM, New York, NY, USA, 559–572.
[10] Stephen Checkoway, Damon McCoy, Brian Kantor, Danny Anderson, Hovav Shacham, Stefan Savage, Karl Koscher, Alexei Czeskis, Franziska Roesner, Tadayoshi Kohno, et al. 2011. Comprehensive experimental analyses of automotive attack surfaces. In USENIX Security Symposium. San Francisco.
[11] Karim Eldefrawy, Aurélien Francillon, Daniele Perito, and Gene Tsudik. 2012. SMART: Secure and Minimal Architecture for (Establishing a Dynamic) Root of Trust. In 19th Annual Network and Distributed System Security Symposium (NDSS ’12).
[12] Sibylle Fröschle and Alexander Stühring. 2017. Analyzing the capabilities of the CAN attacker. In ESORICS ’17 (LNCS), Vol. 10492. Springer, Heidelberg, 464–482.
[13] Olivier Girard. 2009. openMSP430 – a synthesizable 16bit microcontroller core written in Verilog. https://opencores.org/project,openmsp430. (2009).
[14] Vector Informatik GmbH. 2017. MICROSAR – AUTOSAR basic software and RTE. https://vector.com/vi_microsar_en.html. (2017).
[15] Bogdan Groza, Stefan Murvay, Anthony Van Herrewege, and Ingrid Verbauwhede. 2012. Libra-CAN: a lightweight broadcast authentication protocol for controller area networks. In International Conference on Cryptology and Network Security. Springer, 185–200.
[16] Oliver Hartkopp, C. Reuber, and R. Schilling. 2012. MaCAN: Message authenticated CAN. In Escar Conference, Berlin, Germany.
[17] Ahmed Hazem and Hossam A.H. Fahmy. 2012. LCAP: A lightweight CAN authentication protocol for securing in-vehicle networks. In 10th escar Embedded Security in Cars Conference, Berlin, Germany, Vol. 6.
[18] O. Henniger, L. Apvrille, A. Fuchs, Y. Roudier, A. Ruddle, and B. Weyl. 2009. Security requirements for automotive on-board networks. In 9th International Conference on Intelligent Transport Systems Telecommunications, (ITST). 641–646.
[19] Tobias Hoppe, Stefan Kiltz, and Jana Dittmann. 2008. Security threats to automotive CAN networks – practical examples and selected short-term countermeasures. In Computer Safety, Reliability, and Security (SAFECOMP ’08). Springer Berlin Heidelberg, Berlin, Heidelberg, 235–248.
[20] GlobalPlatform Inc. 2011. The trusted execution environment: Delivering enhanced security at a lower cost to the mobile market. https://www.globalplatform.org/documents/GlobalPlatform_TEE_White_Paper_Feb2011.pdf. (2011).
[21] Patrick Koeberl, Steffen Schulz, Ahmad-Reza Sadeghi, and Vijay Varadharajan. 2014. TrustLite: A security architecture for tiny embedded devices. In EuroSys ’14. ACM, 14 pages.
[22] Karl Koscher, Alexei Czeskis, Franziska Roesner, Shwetak Patel, Tadayoshi Kohno, Stephen Checkoway, Damon McCoy, Brian Kantor, Danny Anderson, Hovav Shacham, et al. 2010. Experimental security analysis of a modern automobile. In Security and Privacy, 2010 IEEE Symposium on. IEEE, 447–462.
[23] R Kurachi, Y Matsubara, H Takada, N Adachi, Y Miyashita, and S Horihata. 2014. CaCAN – centralized authentication system in CAN. In 14th Int. Conf. on Embedded Security in Cars (ESCAR ’14).
[24] P. Maene, J. Götzfried, R. de Clercq, T. Müller, F. Freiling, and I. Verbauwhede. 2017. Hardware-based trusted computing architectures for isolation and attestation. IEEE Trans. Comput. 99 (2017).
[25] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos V. Rozas, Hisham Shafi, Vedvyas Shanbhogue, and Uday R. Savagaonkar. 2013. Innovative instructions and software model for isolated execution. In HASP ’13. ACM, 8 pages.
[28] Charlie Miller and Chris Valasek. 2015. Remote exploitation of an unaltered passenger vehicle. Black Hat USA (2015).
[29] Jan Tobias Mühlberg, Sara Cleemput, Mustafa A. Mustafa, Jo Van Bulck, Bart Preneel, and Frank Piessens. 2016. An implementation of a high assurance smart meter using protected module architectures. In WISTP ’16 (LNCS), Vol. 9895. Springer, Heidelberg, 53–69.
[30] Jan Tobias Mühlberg, Job Noorman, and Frank Piessens. 2015. Lightweight and flexible trust assessment modules for the Internet of Things. In ESORICS ’15 (LNCS), Vol. 9326. Springer, 503–520.
[31] Job Noorman, Pieter Agten, Wilfried Daniels, Raoul Strackx, Anthony Van Herrewege, Christophe Huygens, Bart Preneel, Ingrid Verbauwhede, and Frank Piessens. 2013. Sancus: Low-cost trustworthy extensible networked devices with a zero-software trusted computing base. In 22nd USENIX Security symposium. USENIX Association, 479–494.
[32] Job Noorman, Jan Tobias Mühlberg, and Frank Piessens. 2017. Authentic execution of distributed event-driven applications with a small TCB. In STM ’17 (LNCS), Vol. 10547. Springer, Heidelberg, 55–71.
[33] Job Noorman, Jo Van Bulck, Jan Tobias Mühlberg, Frank Piessens, Pieter Maene, Bart Preneel, Ingrid Verbauwhede, Johannes Götzfried, Tilo Müller, and Felix Freiling. 2017. Sancus 2.0: A low-cost security architecture for IoT Devices. ACM Transactions on Privacy and Security (TOPS) 20 (2017), 7:1–7:33. Issue 3.
[34] Stefan Nürnberger and Christian Rossow. 2016. vatiCAN – Vetted, authenticated CAN bus. In Cryptographic Hardware and Embedded Systems – CHES ’16: 18th International Conference, Santa Barbara, CA, USA, August 17-19, 2016, Proceedings. Springer Berlin Heidelberg, Berlin, Heidelberg, 106–124.
[35] H. Oguma, A. Yoshioka, M. Nishikawa, R. Shigetomi, A. Otsuka, and H. Imai. 2008. New attestation based security architecture for in-vehicle communication. In IEEE GLOBECOM ’08 - 2008 IEEE Global Telecommunications Conference. 1–6.
[36] Marco Patrignani, Pieter Agten, Raoul Strackx, Bart Jacobs, Dave Clarke, and Frank Piessens. 2015. Secure compilation to protected module architectures. ACM Trans. Program. Lang. Syst. 37, 2 (2015), 6:1–6:50.
[37] Pieter Philippaerts, Jan Tobias Mühlberg, Willem Penninckx, Jan Smans, Bart Jacobs, and Frank Piessens. 2014. Software verification with VeriFast: Industrial case studies. Science of Computer Programming (SCP) 82 (2014), 77–97.
[38] Andreea-Ina Radu and Flavio D. Garcia. 2016. LeiA: A lightweight authentication protocol for CAN. In Computer Security – ESORICS ’16: 21st European Symposium on Research in Computer Security, Heraklion, Greece, September 26-30, 2016, Proceedings, Part II. Springer International Publishing, Cham, 283–300.
[39] Vincent Raes and Vincent Naessens. 2017. Development of an embedded platform for secure CPS services. In CyberICPS ’17 (LNCS). Springer, Heidelberg. In press.
[40] SAE International. 2016. J3061: Cybersecurity guidebook for cyber-physical vehicle systems. (2016). http://standards.sae.org/j3061_201601/.
[41] Seeed Studio. 2017. CAN BUS shield driver for Arduino/Seeeduino. https://github.com/Seeed-Studio/CAN_BUS_Shield. (2017).
[42] Raoul Strackx, Job Noorman, Ingrid Verbauwhede, Bart Preneel, and Frank Piessens. 2013. Protected software module architectures. In Securing Electronic Business Processes. Springer, 241–251.
[43] Raoul Strackx, Frank Piessens, and Bart Preneel. 2010. Efficient isolation of trusted subsystems in embedded systems. In Security and Privacy in Communication Networks. Springer, 344–361.
[44] Jo Van Bulck, Job Noorman, Jan Tobias Mühlberg, and Frank Piessens. 2015. Secure resource sharing for embedded protected module architectures. In WISTP ’15 (LNCS), Vol. 9311. Springer, 71–87.
[45] Jo Van Bulck, Job Noorman, Jan Tobias Mühlberg, and Frank Piessens. 2016. Towards availability and real-time guarantees for protected module architectures. In MASS ’16, MODULARITY Companion 2016. ACM, New York, 146–151.
[46] Anthony Van Herrewege, Dave Singelee, and Ingrid Verbauwhede. 2011. CANAuth – a simple, backward compatible broadcast authentication protocol for CAN bus. In ECRYPT Workshop on Lightweight Cryptography, Vol. 2011.
[47] David A Wheeler. 2004. SLOCCount. https://www.dwheeler.com/sloccount/.
[48] Jorden Whitefield, Liqun Chen, Frank Kargl, Andrew Paverd, Steve Schneider, Helen Treharne, and Stephan Wesemeyer. 2017. Formal analysis of V2X revocation protocols. In STM ’17 (LNCS), Vol. 10547. Springer, Heidelberg, 147–163.
[49] Marko Wolf and Timo Gendrullis. 2012. Design, implementation, and evaluation of a vehicular hardware security module. In Information Security and Cryptology (ICISC ’11) (LNCS), Vol. 7259. Springer, Berlin, 302–318.
[50] Marko Wolf, André Weimerskirch, and Christof Paar. 2004. Security in automotive bus systems. In Workshop on Embedded Security in Cars.
[51] T. Ziermann, S. Wildermann, and J. Teich. 2009. CAN+: A new backward-compatible Controller Area Network (CAN) protocol with up to 16x higher data rates. In 2009 Design, Automation Test in Europe Conference Exhibition. 1088–1093.

### Appendix: Nonce Generator Birthday Attack
In this appendix, we outline a replay attack against vatiCAN’s [34] global Nonce Generator (NG) scheme. The vatiCAN protocol prevents trivial replay attacks by including a monotonically increasing 32-bit nonce value \( c_i \) in the MAC for each message with identifier \( i \). Receiver ECUs are expected to increment their shadow nonce counter whenever a valid authenticated message is received. To accommodate for packet loss, vatiCAN relies on a trusted NG component that periodically broadcasts a randomly chosen global value \( \gamma \) to be used by all participating ECUs as the new initial value for all counters \( c_i \). The NG broadcast frequency should be sufficiently high, as it represents the worst-case time interval in which an ECU may discard valid authenticated messages. vatiCAN broadcasts a nonce renewal message every 50 ms. The NG is assumed to use a modified CAN transceiver, equipped with hardware-assisted spoofing prevention, such that an attacker cannot inject arbitrary nonce renewal requests.

However, vatiCAN’s frequent random nonce renewal approach is vulnerable to more advanced replay attacks that rely on a moderate amount of previously recorded CAN broadcast traffic. Specifically, we are interested in the probability that \( n \) 32-bit global nonce values randomly chosen by NG contain at least one duplicate. If such a nonce repetition occurs, an attacker can successfully replay previously authenticated CAN messages for the next 50 ms. Provided the nonce repetition probability is sufficiently high, the adversary could, for instance, engage safety-critical functionality such as brakes or steering systems after collecting only a reasonable amount of traffic.

The above problem is an instance of the well-known (generalized) "birthday problem" [26] that asks for the probability \( p \) that a collision occurs in \( n \) randomly chosen samples out of a set of \( d \) possibilities. The approximated probability is given by:

\[
p(n, d) \approx 1 - e^{-\frac{n(n-1)}{2d}}
\]

After substituting \( d = 2^{32} \), Eq. (2) exhibits a 90% nonce reuse probability after only \( n = 135,000 \) NG nonce renewals. Similarly, a 99% probability is reached within \( n = 199,000 \). In other words, at a nonce renewal interval of 50 ms, an adversary is sure to expect a global nonce value \( \gamma \) that was previously broadcast by NG within 2 to 3 hours. Since all vatiCAN components reset their internal nonce counters \( c_i = \gamma \) after receiving a valid NG message, the attacker can now successfully replay previously recorded CAN traffic for the next 50 ms (until the next NG broadcast). Additionally, if the attacker controls custom CAN transceiver hardware, they might tear down future NG nonce renewal messages (by destroying the CRC checksum on the fly) to extend the 50 ms replay attack window.

While the generalized birthday attack outlined above is already quite practical, it can be significantly improved when considering that NG should not necessarily produce two exact same nonce values. Indeed, when NG broadcasts a value \( h = \gamma + k \) that is within a distance \( k \) to a previously used global nonce \( \gamma \), the attacker may simply skip the first \( k \) messages when replaying traffic from the \( \gamma \) epoch. Likewise, should NG broadcast a value \( h = \gamma - k \), the adversary may wait for \( k \) benign authenticated messages before starting to replay traffic from the \( \gamma \) epoch. This modified attack scenario is an instance of a "near birthday problem" [1], which is approximated by the following equation:

\[
p(n, k, d) \approx 1 - \frac{(d - nk - 1)!}{d^{n-1}(d - n(k + 1))!}
\]

Figure 8 visualizes the nonce reuse probability distributions for various values of \( k \). The distributions distinctly approach the 100% nonce collision probability more rapidly as the \( k \) parameter increases. Note that \( k = 0 \) corresponds to the conventional birthday problem Eq. (2), which clearly achieves nonce reuse certainty within \( n = 200,000 \) (i.e., 167 minutes at a 50 ms NG nonce renewal interval). When \( k = 1 \), a 99% nonce reuse probability is already reached within \( n = 115,000 \) (96 minutes). For \( k = 5/10/15 \), a 99% certainty is reached within respectively \( n = 60,000 \) (50 minutes), \( n = 44,000 \) (37 minutes), and \( n = 36,000 \) (30 minutes). This means that, depending on the application under attack, as little as 30 minutes of recorded CAN traffic might suffice to successfully replay a safety-critical authenticated message, effectively defeating vatiCAN authentication.

It should be clear from the above explanation that randomization is inherently insufficient to protect against advanced replay attacks. Instead, the only way to properly prevent these attacks is to never reuse the same nonce value under the same key. As explained above, Sancus+vatiCAN (re-)establishes fresh symmetric session keys on platform boot and/or nonce counter overflow.

\[
\begin{array}{c|cccc}
\text{Number of nonce renewals} & \text{k = 15} & \text{k = 10} & \text{k = 5} & \text{k = 1} & \text{k = 0} \\
\hline
0 & 0.00 & 0.00 & 0.00 & 0.00 & 0.00 \\
50000 & 0.00 & 0.00 & 0.00 & 0.00 & 0.00 \\
100000 & 0.00 & 0.00 & 0.00 & 0.00 & 0.00 \\
150000 & 0.00 & 0.00 & 0.00 & 0.00 & 0.00 \\
200000 & 1.00 & 1.00 & 1.00 & 1.00 & 1.00 \\
\end{array}
\]

\[
\begin{array}{c|cccc}
\text{Nonce reuse probability} & \text{k = 15} & \text{k = 10} & \text{k = 5} & \text{k = 1} & \text{k = 0} \\
\hline
0.00 & 0.00 & 0.00 & 0.00 & 0.00 & 0.00 \\
0.20 & 0.00 & 0.00 & 0.00 & 0.00 & 0.00 \\
0.40 & 0.00 & 0.00 & 0.00 & 0.00 & 0.00 \\
0.60 & 0.00 & 0.00 & 0.00 & 0.00 & 0.00 \\
0.80 & 0.00 & 0.00 & 0.00 & 0.00 & 0.00 \\
1.00 & 1.00 & 1.00 & 1.00 & 1.00 & 1.00 \\
\end{array}
\]