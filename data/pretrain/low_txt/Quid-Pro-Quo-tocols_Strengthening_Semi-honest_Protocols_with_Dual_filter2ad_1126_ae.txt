### Privacy-Preserving Computation of the Equal Predicate

We aim to compute the predicate `Equal` in a privacy-preserving manner, defined as:
\[ \text{Equal} = \text{AND(Equal}_1, \text{Equal}_2, \ldots, \text{Equal}_{\ell}) \]
where each `Equal_i` is defined as follows:
\[ \text{Equal}_i = 
\begin{cases} 
1 & \text{if } \exists \sigma \text{ such that } w_{A_i} = w_{\sigma A_i} \text{ and } w_{B_i} = w_{\sigma B_i}, \\
0 & \text{otherwise.}
\end{cases} \]
Here, \( w_{A_i} \) (respectively \( w_{B_i} \)) is the \( i \)-th output-wire label obtained by Bob (respectively Alice) from the circuit evaluation.

#### Implementation with Garbled Circuits
The basic idea is to implement `Equal` using a garbled circuit, which ANDs all \( \ell \) wires from \( \ell \) `Equal_i` circuits. Each `Equal_i` circuit can be implemented as shown in Figure 8. The cost of `Equal_i` is \( 2\sigma \) non-free gates (where \( \sigma \) is the length of a wire label), and the total cost for the `Equal` circuit is \( 2\ell\sigma \) non-free gates. This cost does not grow with the length of the inputs or the size of the function's circuit, which can be very large.

#### Execution with Secure Protocols
We can execute the `Equal` circuit using any generic protocol secure against malicious adversaries. Alternatively, the basic DualEx protocol can be employed to keep the overhead low. Note that on average, one bit could be leaked using the DualEx protocol, but this bit is about the random nonces used as wire labels and does not expose the original private inputs.

### Performance Evaluation
To evaluate the performance, we report results from running the Private Set Intersection (PSI) and edit distance applications on larger problem sizes. The timing results are shown in Figure 7, where we performed PSI on two sets of one million 32-bit values each, and an edit-distance computation with input DNA sequences (2-bit characters) of lengths 2000 and 10000. The performance of DualEx protocols remains very competitive with semi-honest secure computation protocols even for large inputs.

### Enhancements to the DualEx Protocol
One issue with the basic DualEx protocol is that it allows an attacker to learn the output of \( f(x, y) \) even when cheating, as the output is revealed before the equality test. This advantage for adversaries could encourage participants to cheat, which is unacceptable in many scenarios.

In this section, we present two heuristic enhancements to mitigate this problem:

1. **Progressive Revelation**: This enhancement ensures that the adversary can only learn one more bit of the output than the honest party.
2. **DualEx-based Equality Test**: This ensures that outputs are revealed only after the equality check passes. Since these enhancements are orthogonal, they can be combined to construct an improved DualEx protocol.

#### Preventing Early Output Revelation
To prevent early revelation of outputs, we modify the output revelation process in the basic DualEx protocol. Specifically, we replace the final step in the garbled circuit sub-protocol (execution step 3 from Figure 3) with a step that outputs the wire labels without decoding their semantic values:
- P1 outputs \( W_1 \) that it produced when generating the circuit.
- P2 outputs \( w_{v_2} \) that it obtains from circuit evaluation.

This change ensures that P2 receives only the output-wire labels (and not the underlying bits).

### Progressive Revelation
The goal of this variation is to reveal the output wires to both parties in a bitwise fashion until cheating (if any) is detected on one output wire. If the outputs match exactly, both parties will receive the full output at the end of the protocol. If the outputs do not match, both parties will receive the same matching output bits until the first mismatch, and the adversary receives at most a single additional mismatched output bit.

The idea resembles gradual release protocols used for exchanging secret keys, signing contracts, and secure computation. To reveal the \( i \)-th bit of the output, the parties can securely evaluate a circuit `EqualRevi` (Figure 9), which tests equality and reveals the output bit simultaneously. This circuit looks the same as `Equal_i` except for an extra bit \( o_i \) set to 0 if and only if \( w_{A_i} = w_{B_i} \). The \( v_i = 1 \) bit implies that \( o_i \) is indeed valid.

### Acknowledgments
The authors thank Peter Chapman, Greg Morrisett, Abhi Shelat, David Wagner, and Samee Zahur for useful comments on this work. This work was supported by grants from the National Science Foundation, Air Force Office of Scientific Research, and DARPA. The contents of this paper do not necessarily reflect the views of the US Government.

### References
[1] Y. Aumann and Y. Lindell. Security against covert adversaries: Efficient protocols for realistic adversaries. Journal of Cryptology, 23(2):281–343, 2010.
[2] E. Barker, W. Barker, W. Burr, W. Polk, and M. Smid. NIST special publication 800-57: Recommendation for key management — part 1, March 2007.
[3] M. Blum. How to exchange (secret) keys. ACM Transactions on Computer Systems, 1(2):175–193, 1983.
[4] R. Canetti. Security and composition of multi-party cryptographic protocols. Journal of Cryptology, 13(1):143–202, 2000.
[5] D. Dachman-Soled, T. Malkin, M. Raykova, and M. Yung. Efficient robust private set intersection. In 7th Intl. Conference on Applied Cryptography and Network Security (ACNS), volume 5536 of LNCS, pages 125–142. Springer, 2009.
[6] I. Damgård. Practical and provably secure release of a secret and exchange of signatures. Journal of Cryptology, 8(4):201–222, 1995.
[7] E. De Cristofaro, J. Kim, and G. Tsudik. Linear-complexity private set intersection in the malicious model. In Advances in Cryptology — Asiacrypt 2010, volume 6477 of LNCS, pages 213–231. Springer, 2010.
[8] S. Even, O. Goldreich, and A. Lempel. A randomized protocol for signing contracts. Communications of the ACM, 28(6):637–647, 1985.
[9] M. J. Freedman, K. Nissim, and B. Pinkas. Efficient private matching and set intersection. In Advances in Cryptology — Eurocrypt 2004, volume 3027 of LNCS, pages 1–19. Springer, 2004.
[10] O. Goldreich. Foundations of Cryptography, vol. 2: Basic Applications. Cambridge University Press, Cambridge, UK, 2004.
[11] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game, or a completeness theorem for protocols with honest majority. In 19th Annual ACM Symposium on Theory of Computing (STOC), pages 218–229. ACM Press, 1987.
[12] D. Harnik, Y. Ishai, E. Kushilevitz, and J. B. Nielsen. OT-combiners via secure computation. In 5th Theory of Cryptography Conference — TCC 2008, volume 4948 of LNCS, pages 393–411. Springer, 2008.
[13] C. Hazay and Y. Lindell. Efficient protocols for set intersection and pattern matching with security against malicious and covert adversaries. In 5th Theory of Cryptography Conference — TCC 2008, volume 4948 of LNCS, pages 155–175. Springer, 2008.
[14] W. Henecka, S. Kögl, A.-R. Sadeghi, T. Schneider, and I. Wehrenberg. TASTY: A tool for automating secure two-party computations. In 17th ACM Conf. on Computer and Communications Security (CCS), pages 451–462. ACM Press, 2010.
[15] Y. Huang, D. Evans, and J. Katz. Private set intersection: Are garbled circuits better than custom protocols? In Network and Distributed System Security Symposium (NDSS). The Internet Society, 2012.
[16] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster secure two-party computation using garbled circuits. In 20th USENIX Security Symposium, 2011.
[17] Y. Huang, L. Malka, D. Evans, and J. Katz. Efficient privacy-preserving biometric identification. In Network and Distributed System Security Symposium (NDSS), pages 421–434. The Internet Society, 2011.
[18] R. Impagliazzo and M. Yung. Direct minimum-knowledge computations. In Advances in Cryptology — Crypto ’87, volume 293 of LNCS, pages 40–51. Springer, 1988.
[19] Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Extending oblivious transfers efficiently. In Advances in Cryptology — Crypto 2003, volume 2729 of LNCS, pages 145–161. Springer, 2003.
[20] S. Jarecki and X. Liu. Efficient oblivious pseudorandom function with applications to adaptive OT and secure computation of set intersection. In 6th Theory of Cryptography Conference — TCC 2009, volume 5444 of LNCS, pages 577–594. Springer, 2009.
[21] S. Jarecki and X. Liu. Fast secure computation of set intersection. In 7th Intl. Conf. on Security and Cryptography for Networks, volume 6280 of LNCS, pages 418–435. Springer, 2010.
[22] S. Jarecki and V. Shmatikov. Efficient two-party secure computation on committed inputs. In Advances in Cryptology — Eurocrypt 2007, volume 4515 of LNCS, pages 97–114. Springer, 2007.
[23] V. Kolesnikov and T. Schneider. Improved garbled circuit: Free XOR gates and applications. In 35th Intl. Colloquium on Automata, Languages, and Programming (ICALP), Part II, volume 5126 of LNCS, pages 486–498. Springer, 2008.
[24] Y. Lindell, E. Oxman, and B. Pinkas. The IPS compiler: Optimizations, variants and concrete efficiency. In Advances in Cryptology — Crypto 2011, volume 6841 of LNCS, pages 259–276. Springer, 2011.
[25] Y. Lindell and B. Pinkas. An efficient protocol for secure two-party computation in the presence of malicious adversaries. In Advances in Cryptology — Eurocrypt 2007, volume 4515 of LNCS, pages 52–78. Springer, 2007.
[26] Y. Lindell and B. Pinkas. A proof of security of Yao’s protocol for two-party computation. Journal of Cryptology, 22(2):161–188, 2009.
[27] Y. Lindell and B. Pinkas. Secure two-party computation via cut-and-choose oblivious transfer. In 8th Theory of Cryptography Conference — TCC 2011, volume 6597 of LNCS, pages 329–346. Springer, 2011.
[28] Y. Lindell, B. Pinkas, and N. Smart. Implementing two-party computation efficiently with security against malicious adversaries. In 6th Intl. Conf. on Security and Cryptography for Networks (SCN ’08), volume 5229 of LNCS, pages 2–20. Springer, 2008.
[29] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay — a secure two-party computation system. In Proc. 13th USENIX Security Symposium, 2004.
[30] P. Mohassel and M. Franklin. Efficiency tradeoffs for malicious two-party computation. In 9th Intl. Conference on Theory and Practice of Public Key Cryptography (PKC 2006), volume 3958 of LNCS, pages 458–473. Springer, 2006.
[31] M. Naor and B. Pinkas. Efficient oblivious transfer protocols. In ACM-SIAM Symposium on Discrete Algorithms (SODA), 2001.
[32] J. Nielsen, P. Nordholt, and S. Burra. A new approach to practical active-secure two-party computation. Available at http://eprint.iacr.org/2011/091.
[33] J. B. Nielsen and C. Orlandi. LEGO for two-party secure computation. In 6th Theory of Cryptography Conference — TCC 2009, volume 5444 of LNCS, pages 368–386. Springer, 2009.
[34] B. Pinkas, T. Schneider, N. Smart, and S. Williams. Secure two-party computation is practical. In Advances in Cryptology — Asiacrypt 2009, volume 5912 of LNCS, pages 250–267. Springer, 2009.
[35] A. Shelat and C.-H. Shen. Two-output secure computation with malicious adversaries. In Advances in Cryptology — Eurocrypt 2011, volume 6632 of LNCS, pages 386–405. Springer, 2011.
[36] A. C.-C. Yao. How to generate and exchange secrets. In 27th Annual Symposium on Foundations of Computer Science (FOCS), pages 162–167. IEEE, 1986.