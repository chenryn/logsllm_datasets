### Order and Encoding of Static Gates

In the context of non-deterministic choices, some orders are established. The encoding of static gates is straightforward. PANDs (Priority AND) are non-inclusive, meaning simultaneous failures do not occur. FDEPs (Functional Dependency) propagate failures from their triggers to dependent elements. Both triggers and dependent elements can be subtrees. Dependent gates are resolved through additional internal transitions, similar to extra BEs (Basic Events) connected to an OR-gate, as discussed in Section III-C. SPAREs (Spare Modules) have independent subtrees as spare modules, and nested SPAREs are allowed, following a late-claiming regime with an early-failure mechanism. SEQs (Sequence) are not included. Tool support is provided by DFTCalc [43], which supports evidence by replacing BEs with constants.

### Algebraic Encoding

Gate failures are ordered, and synchronization between elements is achieved by placing tokens. This section formalizes DFTs (Dynamic Fault Trees) using an algebraic description, as detailed in [12], [44], and [13].

### Case Studies and Potential Issues

| **Name** | **Source** | **Spare Races** | **OFC** | **FSG** | **SEQs** | **Evidence** |
|----------|------------|-----------------|---------|---------|----------|--------------|
| AHRS     | [49], [10]  |                |        |        |          |             |
| B3       | [49], [1]   |                |        |        |          |             |
| CAS      | [9], [43], [6] |              |        |        |          |             |
| FTTP     | [47]        |                |        |        |         |             |
| FDS      | [48]        |                |        |        |         |             |
| HECS     | [1]         |                |        |        |          |             |
| MAS      | [22]        |                |        |        |         |             |
| MCS      | [2]         |                |        |        |          |             |
| NDWP     | [10]        |                |        |        |          |             |
| RC       | [50]        |                |        |        |          |             |
| SAP      | [51]        |                |        |        |          |             |
| SF       | [52]        |                |        |        |         |             |
| SSS      | [20]        |                |        |        |          |             |

Similar efforts can be found in [45], [20], and [46]. However, these formalizations do not include SPAREs and are therefore excluded here. SFTs (Static Fault Trees) are trivially embedded into Boolean algebra. In [12], the authors extend Boolean algebra with temporal operators for before, inclusive before, and simultaneous to formalize "priority DFTs with repeated events," effectively SFTs with PANDs and FDEPs. "Repeated events" emphasize that the underlying graph is not necessarily a tree. Although the formalization method supports both inclusive and exclusive PANDs, the authors choose the inclusive variant, as it aligns better with designers' expectations. Failure propagation is immediate. Each DFT is given a canonical representation in the algebra, extending MCSs (Minimal Cut Sets) with ordering information over all BEs, and a scheme for deducing the top-level failure distribution given fault distributions of the BEs. In [44], the authors use the same algebra for SPAREs, assuming BEs do not occur simultaneously, thus excluding common cause failures in SPAREs. Activation is realized by considering two events: one with a warm and one with a hot failure rate, explicitly excluding the occurrence of both failures. SEQs are not included, and constant failures, though present in the algebra, are not presented.

### DFT Benchmarks

So far, we have discussed various DFT issues using small illustrative examples. The question arises whether these phenomena also occur in realistic DFTs. To answer this, we studied several DFT benchmarks from the literature, as shown in Table III. The "spare race" column marks benchmarks where spare races influence the reliability of the DFT. In some other benchmarks, spare races only occur after the DFT has failed. The OFC (Ordered Failure Combination) column lists benchmarks where ordered failure combinations yield potentially incorrect results, related to inclusive vs. exclusive priority gates. The FSG (Failed Spare Gate) column indicates that only in the MCS benchmark, the behavior of failed spare gates is relevant. SEQs occur in MAS and FTTP and should have been included in SF. The "evidence" column indicates that including a constant failure yields ambiguities, leading to more issues in the presence of spare modules and (inclusive vs. exclusive) priority gates.

Most benchmarks, except MAS and FTPP, were presented in the literature to demonstrate the feasibility of specific approaches. These DFTs are often compact and have a small static fragment. However, with the current state-of-the-art, much larger DFTs can be analyzed. Our experience with industrial partners indicates that most DFTs are largely static, with the vast majority of gates being static, even in subtrees. This is supported by [46], [50], and [24]. Most DFTs accompanying DFT analysis tools do not follow the guidelines [2] for hierarchically constructed FTs, suggesting many constructs are crafted to match the system rather than following a hierarchical approach. SEQs were used in older versions of some DFTs to model spare management, but with existing tool support for warm SPAREs, SEQs are no longer present. In the SF benchmarks, PANDs are (incorrectly) used as SEQs. Priority gates are primarily used to model reconfiguration, as seen in SSS and FDS, providing more flexibility than SPAREs. Without SPAREs, warm spare modules can only be modeled via a combination of extra BEs and SEQs, as in MAS.

In all benchmarks, spare modules are BEs—none of the benchmarks contain subtrees or spares as spare modules. This is justified by the limited analysis support for such configurations. More succinct and comprehensible DFTs for the HECS and AHRS benchmarks could be obtained by relaxing the restriction on spare modules being BEs. SPARE gates generally yield more compact DFTs, as seen in the simplification of DFTs for FTTP and MAS by using SPARE gates.

### Conclusion

This paper provides a detailed discussion of existing DFT features and their possible (mis-)interpretations. Problems of various DFT dialects are described, and approaches for solving these problems are suggested. Distinctive features with respect to syntactical and semantic aspects are elaborated. The interplay between temporal and causal dependencies makes DFTs complex and challenging to understand. Classical concepts like cut sets are difficult to generalize to DFTs. Despite their apparent simplicity, DFTs are complex objects. Engineers should be aware of the various subtleties and nuances of interpretation to correctly interpret DFT analysis results.

### Acknowledgements

This work was partially supported by the STW-ProRail partnership program ExploRail under the project ArRangeer (12238), CDZ project CAP (GZ 1023), and the EU FP7 grant agreement no. 318003 (TREsPASS). We thank Enno Ruijters for the inspiring discussions and the anonymous reviewers for their extensive feedback.

### References

[1] J. B. Dugan, S. J. Bavuso, and M. A. Boyd, “Dynamic fault-tree models for fault-tolerant computer systems,” IEEE Trans. Rel., vol. 41, no. 3, pp. 363–377, 1992.

[2] W. Vesely and M. Stamatelatos, “Fault tree handbook with aerospace applications,” NASA Headquarters, USA, Tech. Rep., 2002.

[3] E. Ruijters and M. Stoelinga, “Fault tree analysis: A survey of the state-of-the-art in modeling, analysis and tools,” Computer Science Review, vol. 15, pp. 29–62, 2015.

[4] D. Coppit, K. J. Sullivan, and J. B. Dugan, “Formal semantics of models for computational engineering: a case study on Dynamic Fault Trees,” in Proc. of ISSRE. IEEE Computer Society, 2000, pp. 270–282.

[5] H. Boudali and J. B. Dugan, “A continuous-time Bayesian network reliability modeling and analysis framework,” IEEE Trans. Rel., vol. 55, no. 1, pp. 86–97, 2006.

[6] S. Montani, L. Portinale, A. Bobbio, and D. Codetta-Raiteri, “Automatically translating dynamic fault trees into dynamic Bayesian networks by means of a software tool,” in Proc. of ARES, 2006, pp. 804–810.

[7] ——, “Radyban: A tool for reliability analysis of dynamic fault trees through conversion into dynamic Bayesian networks,” Rel. Eng. & Sys. Safety, vol. 93, no. 7, pp. 922–932, 2008.

[8] A. Bobbio and D. Codetta-Raiteri, “Parametric fault trees with dynamic gates and repair boxes,” in Proc. of RAMS, 2004, pp. 459–465.

[9] D. Codetta-Raiteri, “The conversion of dynamic fault trees to stochastic Petri nets, as a case of graph transformation,” in Proc. of PNGT, vol. 127, no. 2, 2005, pp. 45 – 60.

[10] H. Boudali, P. Crouzen, and M. Stoelinga, “A Compositional Semantics for Dynamic Fault Trees in Terms of Interactive Markov Chains,” in Proc. of ATVA, ser. LNCS, vol. 4762. Springer, 2007, pp. 441–456.

[11] ——, “A rigorous, compositional, and extensible framework for dynamic fault tree analysis,” IEEE Trans. Dependable Secure Computing, vol. 7, no. 2, pp. 128–143, 2010.

[12] G. Merle, J.-M. Roussel, J.-J. Lesage, and A. Bobbio, “Probabilistic algebraic analysis of fault trees with priority dynamic gates and repeated events,” IEEE Trans. Rel., vol. 59, no. 1, pp. 250–261, 2010.

[13] G. Merle, J.-M. Roussel, and J.-J. Lesage, “Quantitative analysis of trees based on the structure function,” Quality and Reliability Engineering International, vol. 30, no. 1, pp. 143–156, 2014.

[14] H. Boudali, P. Crouzen, and M. Stoelinga, “Dynamic fault tree analysis using input/output interactive Markov chains,” in Proc. of DSN. IEEE Computer Society, 2007, pp. 708–717.

[15] “Fault tree analysis (FTA),” Norm IEC 60050:2006, 2007.

[16] D. Codetta-Raiteri, “Integrating several formalisms in order to increase fault trees’ modeling power,” Rel. Eng. & Sys. Safety, vol. 96, no. 5, pp. 534 – 544, 2011.

[17] S. Contini, G. Cojazzi, and G. Renda, “On the use of non-coherent fault trees in safety and security studies,” in Proc. of ESREL, vol. 93, no. 12. Elsevier, 2008, pp. 1886 – 1895.

[18] T. Yuge and S. Yanagi, “Quantitative analysis of a fault tree with priority AND gates,” Rel. Eng. & Sys. Safety, vol. 93, no. 11, pp. 1577–83, 2008.

[19] J. Xiang, F. Machida, K. Tadano, K. Yanoo, W. Sun, and Y. Maeno, “A static analysis of dynamic fault trees with priority-and gates,” in Proc. of LADC. IEEE Computer Society, 2013, pp. 58–67.

[20] M. Walker and Y. Papadopoulos, “A hierarchical method for the reduction of temporal expressions in pandora,” in Proc. of DYADEM-FTS. ACM Press, 2010, pp. 7–12.

[21] ——, “Qualitative temporal analysis: Towards a full implementation of the fault tree handbook,” Control Engineering Practice, vol. 17, no. 10, pp. 1115 – 1125, 2009.

[22] E. Edifor, M. Walker, and N. Gordon, “Quantification of priority-or gates in temporal fault trees,” in Proc. of SAFECOMP, ser. LNCS. Springer, 2012, vol. 7612, pp. 99–110.

[23] S. Montani, L. Portinale, A. Bobbio, M. Varesio, and D. Codetta-Raiteri, “A tool for automatically translating dynamic fault trees into dynamic Bayesian networks,” in Proc. of RAMS, 2006, pp. 434–441.

[24] Z. Tang and J. B. Dugan, “Minimal cut set/sequence generation for dynamic fault trees,” in Proc. of RAMS, Jan 2004, pp. 207–213.

[25] D. Liu, W. Xing, C. Zhang, R. Li, and H. Li, “Cut sequence set generation for fault tree analysis,” in Embedded Software and Systems, ser. LNCS. Springer, 2007, vol. 4523, pp. 592–603.

[26] T. Chu and G. Apostolakis, “Methods for probabilistic analysis of noncoherent fault trees,” IEEE Trans. Rel., vol. R-29, no. 5, pp. 354–360, 1980.

[27] J. B. Dugan, S. J. Bavuso, and M. Boyd, “Fault trees and sequence dependencies,” in Proc. of RAMS, 1990, pp. 286–293.

[28] H. Boudali, A. Nijmeijer, and M. Stoelinga, “DFTSim: A Simulation Tool for Extended Dynamic Fault Trees,” in Proc. of ANSS, 2009, p. 31.

[29] F. Chiacchio, L. Compagno, D. D’Urso, G. Manno, and N. Trapani, “An open-source application to model and solve dynamic fault tree of real industrial systems,” in Proc. of SKIMA. IEEE, 2011, pp. 1–8.

[30] R. Gulati and J. B. Dugan, “A modular approach for analyzing static and dynamic fault trees,” in Reliability and Maintainability Symposium. 1997 Proceedings, Annual. IEEE, 1997, pp. 57–63.

[31] S. Junges, D. Guck, J.-P. Katoen, A. Rensink, and M. Stoelinga, “Fault trees on a diet - automated reduction by graph rewriting,” ser. LNCS, vol. 9409. Springer, 2015, pp. 3–18.

[32] J. Spivey, The Z Notation: A Reference Manual. Prentice Hall, 1992.

[33] K. Sullivan, J. B. Dugan, and D. Coppit, “The Galileo fault tree analysis tool,” in Proc. of FTCS, 1999, pp. 232–235.

[34] R. Manian, D. W. Coppit, K. J. Sullivan, and J. B. Dugan, “Bridging the gap between systems and dynamic fault tree models,” in Proc. of RAMS, 1999, pp. 105–111.

[35] J. Pearl, Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference. Morgan Kaufmann Publishers Inc., 1988.

[36] H. Boudali and J. B. Dugan, “A discrete-time Bayesian network reliability modeling and analysis framework,” Rel. Eng. & Sys. Safety, vol. 87, pp. 337–349, 2005.

[37] Z. Ghahramani, “Learning dynamic Bayesian networks,” in Adaptive Proc. of Sequences and Data Structures. Springer, 1998, pp. 168–197.

[38] G. Chiola, C. Dutheillet, G. Franceschinis, and S. Haddad, “Stochastic well-formed colored nets and symmetric modeling applications,” Trans. Computing, vol. 42, no. 11, pp. 1343–1360, 1993.

[39] A. Bobbio, G. Franceschinis, R. Gaeta, and L. Portinale, “Parametric fault tree for the dependability analysis of redundant systems and its high-level Petri net semantics,” IEEE TSE, vol. 29, no. 3, pp. 270–287, 2003.

[40] M. A. Marsan, G. Balbo, G. Conte, S. Donatelli, and G. Franceschinis, Modelling with Generalized Stochastic Petri Nets, 1st ed. Wiley, 1994.

[41] G. Balbo, “Introduction to generalized stochastic Petri nets,” in Formal Methods for Perf. Eval., ser. LNCS. Springer, 2007, vol. 4486, pp. 83–131.

[42] H. Hermanns, “Interactive Markov Chains: And the Quest for Quantified Quality,” LNCS, 2002.

[43] F. Arnold, A. Belinfante, F. van der Berg, D. Guck, and M. Stoelinga, “DFTCalc: A tool for efficient fault tree analysis,” in Proc. of SAFECOMP, ser. LNCS. Springer, 2013, vol. 8153, pp. 293–301.

[44] G. Merle, J.-M. Roussel, J.-J. Lesage, and N. Vayatis, “Analytical calculation of failure probabilities in dynamic fault trees including spare gates,” in Proc. of ESREL, 2010, pp. 794–801.

[45] M. D. Walker, “Pandora: a logic for the qualitative analysis of temporal fault trees,” Ph.D. dissertation, University of Hull, 2009.

[46] S. Schilling, “Beitrag zur dynamischen Fehlerbaumanalyse ohne Modulbildung und zustandsbasierte Erweiterungen,” Ph.D. dissertation, Universität Wuppertal, 2009.

[47] H. Boudali and J. B. Dugan, “A new Bayesian network approach to solve dynamic fault trees,” in Proc. of RAMS, 2005, pp. 451–456.

[48] H. Zhu, S. Zhou, J. B. Dugan, and K. Sullivan, “A benchmark for quantitative fault tree reliability analysis,” in Proc. of RAMS, 2001, pp. 86–93.

[49] K. Vemuri, J. B. Dugan, and K. Sullivan, “Automatic synthesis of fault trees for computer-based systems,” IEEE Trans. Rel., vol. 48, no. 4, pp. 394–402, 1999.

[50] D. Guck, J.-P. Katoen, M. Stoelinga, T. Luiten, and J. Romijn, “Smart railroad maintenance engineering with stochastic model checking,” in Proc. of RAILWAYS, ser. Civil-Comp Proceedings, vol. 104. Civil-Comp Press, 2014, p. 299.

[51] F. Chiacchio, L. Compagno, D. D’Urso, G. Manno, and N. Trapani, “Dynamic fault trees resolution: A conscious trade-off between analytical and simulative approaches,” Rel. Eng. & Sys. Safety, vol. 96, no. 11, pp. 1515 – 1526, 2011.

[52] M. Bozzano, R. Cavada, A. Cimatti, J.-P. Katoen, V. Y. Nguyen, T. Noll, and X. Olive, “Formal verification and validation of AADL models,” in Proc. of ERTS, 2010.