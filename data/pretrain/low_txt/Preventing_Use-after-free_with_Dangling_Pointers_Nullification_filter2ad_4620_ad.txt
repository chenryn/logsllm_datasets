### Phases and Optimization

The phases of the system can be further optimized by employing more sophisticated static analysis techniques. For instance, if it is certain that the original code already nullifies a pointer, DANGNULL would not need to nullify it again. Although we have not extensively explored this direction, such an optimization must be approached with caution. Soundly learning this information involves pointer-aliasing problems, which are well-known challenges in program analysis. Any incorrect analysis could lead to both false positives and false negatives.

### Performance Bottleneck and Optimizations

We identified that the manipulation of `shadowObjTree` is the primary performance bottleneck. This can be optimized through several strategies:
1. **Leveraging Transactional Memory**: Utilize transactional memory [20] to enhance locking performance on `shadowObjTree`.
2. **Designing a Software Cache**: Implement a software cache for `shadowObjTree`.
3. **Alternative Data Structures**: Use alternative data structures to implement `shadowObjTree`, such as alignment-based metadata storage by replacing the memory allocator [18].
4. **Dedicated Analyzing Thread/Process**: Create a dedicated analyzing thread or process for `shadowObjTree` [23].

### False Negatives

DANGNULL's static instrumentation assumes that a pointer is propagated only if either the left-hand side or right-hand side of a variable is a pointer type. This assumption may not hold if the program propagates pointers between non-pointer-typed variables. Consider the example in Example 1. If the `child` member variable is typed as `long` (i.e., `long child` at line 4) and all subsequent operations on `child` use type casting (e.g., `doc->child = (long)body` at line 13 and `((Elem*)doc->child)->getAlign()` at line 21), then such a pointer propagation would not be traced. In this case, DANGNULL would under-trace object relationships, leading to false negatives if `child` becomes an unsafe dangling pointer.

### False Positives

To prevent dereferencing of unsafe dangling pointers, DANGNULL nullifies not only unsafe dangling pointers but also benign dangling pointers. This additional nullification can cause some false positives, although these should not have any semantic meaning as they are "dangled."

During testing with SPEC CPU benchmarks and the Chromium browser, we encountered one rare false positive case. This false positive sporadically occurs when a new tab is manually created inside the Chromium browser and is related to the unique pointer hash table design (Example 4). We believe this false positive is not a critical concern due to its rarity. As described in the compatibility evaluation in §V-D, DANGNULL passed over 30,000 stress tests with the Chromium browser, a large-scale and highly complex application.

### Related Work

#### Memory-Related Issues

Memory-related issues, including invalid memory accesses, memory leaks, and use-after-free bugs, have been studied for many years. Numerous methods have been proposed for C/C++ programs. In this section, we categorize these methods and compare them with DANGNULL.

#### Use-After-Free Detectors

There is a significant body of research focused on detecting use-after-free vulnerabilities. These vulnerabilities can be detected through both static and dynamic analysis. However, since a dangling pointer itself is not erroneous behavior and statically determining whether a dangling pointer will be used in the future requires precise points-to and reachability analyses across all possible inter-procedure paths, even state-of-the-art static analysis tools are only suitable for small programs [13, 34].

Most use-after-free detectors [6, 30, 48] are based on runtime dynamic analysis. For example, CETS [30] maintains a unique identifier with each allocated object, associates this metadata with pointers, and checks that the object is still allocated on pointer dereferences. CETS uses taint propagation to handle pointer arithmetic, but this approach can result in high false positive rates. From our experiments, CETS raised false alarms on 5 out of 16 tested programs, while DANGNULL correctly ran all 16 programs. Additionally, CETS imposes higher performance overhead compared to DANGNULL. For 4 programs (bzip2, milc, sjeng, h264ref, and lbm) that CETS was able to run, it incurred an average 40% slowdown, while DANGNULL incurred only a 1% slowdown.

Undangle [6] is another runtime dynamic analysis tool that assigns a unique label to each return value of memory allocation functions and employs dynamic taint analysis to track the propagation of these labels. While this approach can collect more complete pointer propagation information, it incurs a significant performance cost.

#### Control Flow Integrity

Control flow integrity (CFI) [1, 49–51] enforces legitimate indirect function calls. SafeDispatch [22] prevents illegal control flows from virtual function call sites. Unlike use-after-free and memory error detectors, CFI makes use-after-free vulnerabilities difficult to exploit. However, most CFI implementations enforce coarse-grained CFI to avoid heavy performance overheads and false positive alarms, and recent research [7, 11, 15, 16] has shown that these implementations can be bypassed. Dangling pointers can also corrupt non-control data (e.g., vector length variables, user privilege bits, or sandbox enforcing flags) in objects, making CFI-based protection techniques bypassable. For example, a recent attack [27] overwrote user permission bits in the metadata to bypass user authorizations, including other defense mechanisms. DANGNULL eliminates dangling pointers at the moment they are created, protecting both control flows and security-sensitive metadata in objects.

#### Memory Error Detectors

Memcheck (Valgrind) [32] and Purify [19] are popular solutions for detecting memory errors. They are designed to be complete and general, but they impose very high memory and CPU overheads. AddressSanitizer [38] is another tool that optimizes the method of representing and probing the status of allocated memory. However, it cannot detect use-after-free bugs if the assumption of a quarantine zone preventing reuse of previously freed memory blocks does not hold. Attackers can leverage various techniques to force reallocation of previously freed memory blocks, such as Heap Spraying [10, 36] and Heap Fengshui [39]. With DANGNULL, all dangling pointers are nullified upon deallocation, rendering use-after-free vulnerabilities unexploitable even with sophisticated manipulations.

#### Safe Memory Allocators

Many safe memory allocators have been proposed to prevent dangling pointer issues. Cling [2] restricts memory reuse to objects of the same type, disrupting a large class of exploits. Diehard and Dieharder [4, 33] mitigate dangling pointer issues by approximating an infinite-sized heap.

#### Smart Pointers

Smart pointers encapsulate a pointer to support automatic resource management. Theoretically, an application would not suffer from use-after-free issues if all pointers are represented with smart pointers. However, it is common to expose raw pointers even in applications heavily using smart pointers. For example, browser rendering engines like WebKit [45] and Blink [5] often expose raw pointers to break resource graph cycles and avoid extra performance overheads. Automatically wrapping raw pointers with smart pointers is a challenging static analysis problem, as it requires understanding precise raw pointer semantics.

### Conclusions

In this paper, we presented DANGNULL, a system that detects temporal memory safety violations at runtime. We implemented DANGNULL, applied it to Chromium, and conducted a thorough evaluation showing its effectiveness and compatibility. DANGNULL can be applied to complex, large-scale software, such as the Chromium browser, to effectively mitigate use-after-free exploits with even the most sophisticated attack techniques. We believe DANGNULL can be used for a range of security applications, including back-end use-after-free detection, runtime use-after-free mitigation, and use-after-free resilient programs.

### Acknowledgments

The authors would like to thank the anonymous reviewers and our shepherd, Juan Caballero, for their help and feedback, as well as our operations staff for their proofreading efforts. This material is based upon work supported in part by the National Science Foundation under Grants No. CNS-1017265, CNS-0831300, and CNS-1149051, by the Office of Naval Research under Grant No. N000140911042, by the Department of Homeland Security under contract No. N66001-12-C-0133, and by the United States Air Force under Contract No. FA8650-10-C-7025. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation, the Office of Naval Research, the Department of Homeland Security, or the United States Air Force.

### References

[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-flow integrity,” in ACM Conference on Computer and Communications Security (CCS), 2005.
[2] P. Akritidis, “Cling: A Memory Allocator to Mitigate Dangling Pointers,” in USENIX Security Symposium (Security), 2010.
[3] Alexa, “The Top 500 Sites on the Web,” http://www.alexa.com/topsites, Aug 2014.
[4] E. D. Berger and B. G. Zorn, “DieHard: Probabilistic Memory Safety for Unsafe Languages,” in ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2006.
[5] Blink : the rendering engine used by Chromium, http://www.chromium.org/blink, Aug 2014.
[6] J. Caballero, G. Grieco, M. Marron, and A. Nappa, “Undangle: Early Detection of Dangling Pointers in Use-after-free and Double-free Vulnerabilities,” in International Symposium on Software Testing and Analysis (ISSTA), 2012.
[7] N. Carlini and D. Wagner, “ROP is still dangerous: Breaking modern defenses,” in USENIX Security Symposium (Security), 2014.
[8] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer, “Non-control-data Attacks Are Realistic Threats,” in USENIX Security Symposium (Security), 2005.
[9] Chromium Projects, “Running Tests at Home,” http://www.chromium.org/developers/testing/running-tests, Aug 2014.
[10] M. Daniel, J. Honoroff, and C. Miller, “Engineering Heap Overflow Exploits with JavaScript,” in USENIX Workshop on Offensive Technologies (WOOT), 2008.
[11] L. Davi, D. Lehmann, A.-R. Sadeghi, and F. Monrose, “Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow Integrity Protection,” in USENIX Security Symposium (Security), 2014.
[12] D. Dhurjati and V. Adve, “Efficiently Detecting All Dangling Pointer Uses in Production Servers,” in International Conference on Dependable Systems and Networks (DSN), 2006.
[13] J. Feist, L. Mounier, and M.-L. Potet, “Statically detecting use after free on binary code,” Journal of Computer Virology and Hacking Techniques, 2013.
[14] Flak, “Analysis of OpenSSL Freelist Reuse,” http://www.tedunangst.com/flak/post/analysis-of-openssl-freelist-reuse, Aug 2014.
[15] E. Göktas, E. Athanasopoulos, H. Bos, and G. Portokalidis, “Out of control: Overcoming Control-Flow Integrity,” in IEEE Symposium on Security and Privacy (Oakland), 2014.
[16] E. Gökta¸s, E. Athanasopoulos, M. Polychronakis, H. Bos, and G. Portokalidis, “Size does matter: Why using gadget-chain length to prevent code-reuse attacks is hard,” in USENIX Security Symposium (Security), 2014.
[17] Google, “Octane Benchmark,” https://code.google.com/p/octane-benchmark, Aug 2014.
[18] Google, “Specialized memory allocator for ThreadSanitizer, etc.,” http://llvm.org/klaus/compiler-rt/blob/7385f8b8b8723064910cf9737dc929e90aeac548/lib/sanitizer_common/sanitizer_allocator.h, Nov 2014.
[19] R. Hastings and B. Joyce, “Purify: Fast detection of memory leaks and access errors,” in Winter 1992 USENIX Conference, 1991.
[20] M. Herlihy and J. E. B. Moss, Transactional memory: Architectural support for lock-free data structures. ACM, 1993, vol. 21, no. 2.
[21] HP, “Pwn2Own 2014: A recap,” http://www.pwn2own.com/2014/03/pwn2own-2014-recap, Aug 2014.
[22] D. Jang, Z. Tatlock, and S. Lerner, “SafeDispatch: Securing C++ Virtual Calls from Memory Corruption Attacks,” in Network and Distributed System Security Symposium (NDSS), 2014.
[23] K. Jee, V. P. Kemerlis, A. D. Keromytis, and G. Portokalidis, “ShadowReplica: efficient parallelization of dynamic data flow tracking,” in ACM Conference on Computer and Communications Security (CCS), 2013.
[24] LLVM Project, “LLVM Language Reference Manual,” http://llvm.org/docs/LangRef.html.
[25] F. Long, S. Sidiroglou-Douskos, and M. Rinard, “Automatic Runtime Error Repair and Containment via Recovery Shepherding,” in ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2012.
[26] Mads Ager, Erik Corry, Vyachslav Egorov, Kentaro Hara, Gustav Wibling, Ian Zerny, “Oilpan: Tracing Garbage Collection for Blink,” http://www.chromium.org/blink/blink-gc, Aug 2014.
[27] Mallocat, “Subverting without EIP,” http://mallocat.com/subverting-without-eip, Aug 2014.
[28] Mozilla, “DROMAEO, JavaScript Performance Testing,” http://dromaeo.com, Aug 2014.
[29] S. Nagaraju, C. Craioveanu, E. Florio, and M. Miller, “Software Vulnerability Exploitation Trends,” Microsoft, 2013.
[30] S. Nagarakatte, J. Zhao, M. M. K. Martin, and S. Zdancewic, “CETS: Compiler Enforced Temporal Safety for C,” in International Symposium on Memory Management (ISMM), 2010.
[31] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic, “SoftBound: Highly Compatible and Complete Spatial Memory Safety for C,” in ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2009.
[32] N. Nethercote and J. Seward, “Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation,” in ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2007, pp. 89–100.
[33] G. Novark and E. D. Berger, “DieHarder: Securing the Heap,” in ACM Conference on Computer and Communications Security (CCS), 2010.
[34] H. Post and W. Küchlin, “Integrated static analysis for Linux device driver verification,” in Integrated Formal Methods. Springer, 2007, pp. 518–537.
[35] M. Prandini and M. Ramilli, “Return-oriented programming,” IEEE Security & Privacy, 2012.
[36] P. Ratanaworabhan, B. Livshits, and B. Zorn, “NOZZLE: A Defense Against Heap-spraying Code Injection Attacks,” in USENIX Security Symposium (Security), 2009.
[37] R. Seacord, Secure Coding in C and C++, 1st ed. Addison-Wesley Professional, 2005.
[38] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov, “AddressSanitizer: A Fast Address Sanity Checker,” in USENIX Conference on Annual Technical Conference (ATC), 2012.
[39] A. Sotirov, “Heap Feng Shui in JavaScript,” Black Hat Europe, 2007.
[40] Standard Performance Evaluation Corporation, “SPEC CPU 2006,” http://www.spec.org/cpu2006, Aug 2014.
[41] The Chromium Project, http://www.chromium.org/Home, Aug 2014.
[42] The Chromium Projects, “Chromium Issues,” https://code.google.com/p/chromium/issues, Aug 2014.
[43] The LLVM Compiler Infrastructure, http://llvm.org, Aug 2014.
[44] The Web Standards Project, “Acid Tests,” http://www.acidtests.org/, Aug 2014.
[45] The WebKit Open Source Project, http://www.webkit.org, Aug 2014.
[46] Ubuntu, “0-address protection in Ubuntu,” https://wiki.ubuntu.com/Security/Features#null-mmap, Aug 2014.
[47] WebKit, “SunSpider 1.0.2 JavaScript Benchmark,” https://www.webkit.org/perf/sunspider/sunspider.html, Aug 2014.
[48] W. Xu, D. C. DuVarney, and R. Sekar, “An efficient and backwards-compatible transformation to ensure memory safety of C programs,” in ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE), 2004.
[49] B. Zeng, G. Tan, and G. Morrisett, “Combining Control-flow Integrity and Static Analysis for Efficient and Validated Data Sandboxing,” in ACM Conference on Computer and Communications Security (CCS), 2011.
[50] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou, “Practical Control Flow Integrity and Randomization for Binary Executables,” in IEEE Symposium on Security and Privacy (Oakland), 2013.
[51] M. Zhang and R. Sekar, “Control Flow Integrity for COTS Binaries,” in USENIX Security Symposium (Security), 2013.