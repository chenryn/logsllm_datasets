### 4.2 Security Analysis

We demonstrate the security of our protocol against a malicious party \( P_2 \) in a hybrid model, where the parties have access to ideal functionalities for computing \( F_{ks} \) (keyword search) and parallel oblivious transfer (OT). We prove security by briefly describing a simulator that is given access to an ideal functionality computing \( F_{g,h} \). By standard composition theorems, this implies the security of \( \pi_{txt} \).

Let \( (S_1, S_2) \) be the simulators guaranteed for the Yao garbled circuit construction. Our simulator begins by running \( u \) independent copies of \( S_1(1^k, H) \) to obtain \( ((\overline{X'}_1, s_1), \ldots, (\overline{X'}_u, s_u)) \), where each \( \overline{X'}, \overline{Y'} \) is a \( k \)-tuple of strings (see Section 2.1 for details). The simulator then extracts from \( P_2 \) its input \( y \) to the parallel OT functionality and provides to \( P_2 \) the vectors \( \overline{Y'}_1, \ldots, \overline{Y'}_u \). Next, the simulator extracts from \( P_2 \) its input \( p \) to the \( F_{ks} \) functionality. The simulator sends \( (p, y) \) to the ideal functionality computing \( F_{g,h} \) and receives in return a set \( \{z_i\}_{i=1}^{u'} \) (where \( 0 \leq u' \leq u \)).

The simulator then chooses a random permutation \( \pi \) of \( \{1, \ldots, u\} \) and gives to \( P_2 \) the values \( \{(\pi(i), \overline{X'}_i)\}_{i=1}^{u} \) as the output from the invocation of \( F_{ks} \). To complete the simulation, the simulator computes \( gH_{\pi(i)} \leftarrow S_2(p, y, z_i, s_{\pi(i)}) \) for \( i = 1 \) to \( u' \), and \( gH_{\pi(i)} \leftarrow S_2(p, y, \perp, s_{\pi(i)}) \) for \( i = u' + 1 \) to \( u \). It then sends \( gH_1, \ldots, gH_u \) as the final message to \( P_2 \).

We omit the proof that this generates a view for \( P_2 \) that is computationally indistinguishable from the view of \( P_2 \) when running \( \pi_{txt} \) in the specified hybrid model.

### 4.3 Efficiency

The most notable feature of our protocol is that it uses only \( u \) garbled circuits, rather than \( O(|T|) \) garbled circuits as in a naive application of Yao’s methodology. To see the resulting improvement, let us focus on the communication complexity (though a similar calculation applies to the computational complexity as well) and concentrate on terms that depend on \( |T| \) — a reasonable choice if we assume \( |T| \) dominates all other parameters.

A naive application of Yao’s approach to computing the functionality in Equation (2) will involve garbling a circuit containing (among other things) \( |T| \) copies of \( H \). The communication required for transmitting the resulting garbled circuit is thus lower bounded by (roughly) \( 4k|T||H| \) bits. In our protocol, on the other hand, the only dependence on \( |T| \) is in the sub-protocol for keyword search. Looking at the keyword-search protocol from Section 3 (and ignoring the OPRF sub-protocol there, whose complexity is independent of \( |T| \)), we see that the communication complexity used by that protocol will be (roughly) \( |T| \cdot (k |g_{out}| + k) \) bits, where \( |g_{out}| \) denotes the output length of the function \( g \).

### 5. Applications and Extensions

In Section 4, we described a protocol \( \pi_{txt} \) for secure text processing. In this section, we describe some extensions and potential applications of that protocol.

Returning to the functionality considered in the Introduction (cf. Equation (1)), that function can "almost" be viewed as an instance of the class of functions \( F_{g,h} \) described in the previous section if we set \( g(T, i) \triangleq \ell_{max}(T, T_i) \) and
\[ h(\ell', (\epsilon, \ell)) = 
\begin{cases} 
1 & \text{if } |\ell' - \ell| \leq \epsilon \\
0 & \text{otherwise}
\end{cases}
\]

However, two problems arise in formulating the problem this way and applying the protocol from the previous section: first, the resulting protocol is inefficient since \( P_2 \) (possibly) gets the same answer \( u \) times rather than just once; second, it is insecure since it reveals how many times \( p \) occurs as a substring in \( T \) (whereas the functionality as described in Equation (1) does not reveal this information).

Nevertheless, we can address both these issues with a protocol constructed using the same general paradigm employed in the previous section. Specifically, we now have \( P_1 \) construct only a single garbled circuit \( gH \) for \( H \) (reflecting the fact that a single evaluation of \( h \) is sufficient for computing the desired functionality). We need \( P_2 \) to evaluate this circuit on \( P_2 \)'s inputs \( \epsilon, \ell \) as well as the value \( \ell' = g(T, p) \). Once again, the problem reduces to finding a way for \( P_2 \) to learn all the appropriate input-wire labels.

As before, it is easy for \( P_2 \) to learn the labels of the wires corresponding to its own inputs \( \epsilon, \ell \) using oblivious transfer. To enable \( P_2 \) to learn the appropriate input-wire labels, we use keyword search: \( P_1 \) prepares a "database" of entries of the form \( (p^*, g(T, p^*)) \), and \( P_1 \) learns only \( g(T, p) \). An additional subtlety here is that we need to prevent \( P_2 \) from learning how many times the pattern \( p \) appears in \( T \); this can be handled by "padding" the database using entries with random keys. See Figure 4.

In Figure 4, \( P_1 \) "pads" the database \( D \) so that it always contains exactly \( t = n - m + 1 \) entries; this prevents \( P_2 \) from learning how many distinct patterns occur as substrings of \( T \). An alternative approach, which may be more efficient depending on the relative sizes of \( |T| \) and \( |\Sigma|^m \), is described next. First, both parties redefine \( h \) as:
\[ h(b|\ell', (\epsilon, \ell)) = 
\begin{cases} 
b & \text{if } |\ell' - \ell| \leq \epsilon \\
0 & \text{otherwise}
\end{cases}
\]

Then for each pattern \( p \in \Sigma^m \), party \( P_1 \) does:
- If \( p \) occurs as a substring in \( T \), then add the tuple \( (p, \overline{X}(1|\ell_{max}(T, p))) \) to \( D \).
- If \( p \) does not occur as a substring in \( T \), then add the tuple \( (p, \overline{X}(0|0|\ell_{max})) \) to \( D \).

Now the database always has exactly \( |\Sigma|^m \) entries.

On another note, we remark that the protocol in Figure 4 returns \( \perp \) to \( P_2 \) in case its pattern \( p \) does not occur as a substring of \( T \). This is avoided when using the technique described in the previous paragraph (and can be avoided in the protocol from Figure 4 via similar techniques).

### 6. References

[1] W. Aiello, Y. Ishai, and O. Reingold. Priced Oblivious Transfer: How to Sell Digital Goods. In Advances in Cryptology — Eurocrypt 2001, volume 2045 of LNCS, pages 119–135. Springer, 2001.

[2] M. Atallah, F. Kerschbaum, and W. Du. Secure and Private Sequence Comparisons. In Proc. ACM Workshop on Privacy in the Electronic Society (WPES), pages 39–44. ACM, 2003.

[3] E. De Cristofaro and G. Tsudik. Practical Private Set Intersection Protocols with Linear Complexity. In Financial Cryptography and Data Security 2010. Available at http://eprint.iacr.org/2009/491.

[4] M. J. Freedman, Y. Ishai, B. Pinkas, and O. Reingold. Keyword Search and Oblivious Pseudorandom Functions. In 2nd Theory of Cryptography Conference, volume 3378 of LNCS, pages 303–324. Springer, 2005.

[5] K. Frikken. Practical Private DNA String Searching and Matching Through Efficient Oblivious Automata Evaluation. In Data and Applications Security, volume 5645 of LNCS, pages 81–94. Springer, 2009.

[6] R. Gennaro, C. Hazay, and J. S. Sorensen. Text Search Protocols with Simulation-Based Security. In 13th Intl. Conference on Theory and Practice of Public Key Cryptography (PKC 2010), volume 6056 of LNCS, pages 332–350. Springer, 2010.

[7] O. Goldreich. Foundations of Cryptography, vol. 2: Basic Applications. Cambridge University Press, Cambridge, UK, 2004.

[8] O. Goldreich, S. Micali, and A. Wigderson. How to Play Any Mental Game, or a Completeness Theorem for Protocols with Honest Majority. In 19th Annual ACM Symposium on Theory of Computing (STOC), pages 218–229. ACM Press, 1987.

[9] C. Hazay and Y. Lindell. Efficient Protocols for Set Intersection and Pattern Matching with Security Against Malicious and Covert Adversaries. In 5th Theory of Cryptography Conference — TCC 2008, volume 4948 of LNCS, pages 155–175. Springer, 2008.

[10] S. Jarecki and V. Shmatikov. Efficient Two-Party Secure Computation on Committed Inputs. In Advances in Cryptology — Eurocrypt 2007, volume 4515 of LNCS, pages 97–114. Springer, 2007.

[11] S. Jha, L. Kruger, and V. Shmatikov. Towards Practical Privacy for Genomic Computation. In IEEE Symp. Security & Privacy, pages 216–230. IEEE, 2008.

[12] L. Kissner and D. X. Song. Privacy-Preserving Set Operations. In Advances in Cryptology — Crypto 2005, volume 3621 of LNCS, pages 241–257. Springer, 2005.

[13] A. Lindell. Efficient Fully-Simulatable Oblivious Transfer. In Cryptographers’ Track — RSA 2008, volume 4964 of LNCS, pages 52–70. Springer, 2008.

[14] Y. Lindell and B. Pinkas. An Efficient Protocol for Secure Two-Party Computation in the Presence of Malicious Adversaries. In Advances in Cryptology — Eurocrypt 2007, volume 4515 of LNCS, pages 52–78. Springer, 2007.

[15] Y. Lindell, B. Pinkas, and N. Smart. Implementing Two-Party Computation Efficiently with Security Against Malicious Adversaries. In 6th Intl. Conf. on Security and Cryptography for Networks (SCN ’08), volume 5229 of LNCS, pages 2–20. Springer, 2008.

[16] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay — A Secure Two-Party Computation System. In Proc. 13th USENIX Security Symposium, pages 287–302. USENIX Association, 2004.

[17] M. Naor and B. Pinkas. Computationally Secure Oblivious Transfer. J. Cryptology, 18(1):1–35, 2005.

[18] A. Paus, A.-R. Sadeghi, and T. Schneider. Practical Secure Evaluation of Semi-Private Functions. In Conf. on Applied Cryptography and Network Security, volume 5536 of LNCS, pages 89–106. Springer, 2009.

[19] B. Pinkas, T. Schneider, N. Smart, and S. Williams. Secure Two-Party Computation Is Practical. In Advances in Cryptology — Asiacrypt 2009, volume 5912 of LNCS, pages 250–267. Springer, 2009.

[20] J. R. Troncoso-Pastoriza, S. Katzenbeisser, and M. Celik. Privacy Preserving Error Resilient DNA Searching Through Oblivious Automata. In 14th ACM Conf. on Computer and Communications Security (CCCS), pages 519–528. ACM Press, 2007.

[21] A. C.-C. Yao. How to Generate and Exchange Secrets. In 27th Annual Symp. on Foundations of Computer Science (FOCS), pages 162–167. IEEE, 1986.