### Illustration of the Mitnick Attack

It is important to note that an intrusion detection system (IDS) operating exclusively on either host will not be able to detect this multi-phased and distributed attack. At best, Host A’s IDS might identify a relatively short-lived SYN Flood attack, while Host B’s IDS may observe attempts to infer TCP sequence numbers, although these may not stand out from other non-intrusive but malformed TCP connection attempts.

### Utility of Our Ontology and Importance of IDS Coalitions

The following example illustrates the utility of our ontology and the importance of forming coalitions of IDSs. In our model, all IDSs share a common ontology and utilize a secure communications infrastructure optimized for IDSs. We present such a communications infrastructure in [45].

Consider the scenario where a SYN Flood attack, as described in Section 6.1, is directed against Host A. The IDS responsible for Host A continuously monitors for anomalous behavior, asserting and de-asserting data as necessary. It detects an unusually high number of partially established TCP connections and transmits the instance of the SYN Flood attack, as illustrated in Figure 5, to the other IDSs in its coalition.

This instance is converted into a set of N-Triples and asserted into the knowledge base of each IDS in the coalition. (Note: These N-Triples will be de-asserted when the responsible IDS transmits a message indicating that the particular host is no longer under a SYN Flood attack.) Given the anomalous nature of the situation, especially in conjunction with Host B being subjected to a series of probes to determine its TCP sequencing, the current and pending connections are also asserted into the knowledge base.

### DAML+OIL Notation for Connections

Figure 7 lists the set of DAML+OIL statements describing the connections used in our experiments:

**Fig. 7. DAML+OIL Notation for Instances of Connections**

### DAML+OIL Specification of the Mitnick Attack

Figure 8 illustrates the DAML+OIL notation specifying the Mitnick attack. Notice that it is a subclass of both the class defining a Denial of Service (DoS) attack and the TCP subclass, with a restriction on the property indicating that the target of the attack has established a connection with the victim of the DoS attack.

DAML+OIL, like any other notation language, does not have the functionality to perform mathematical operations. Consequently, when querying for the existence of a Mitnick-type attack, we must define a rule that tests for concomitance between the DoS attack and the establishment of the connection with the target of the DoS attack. The following query performs that test:

```clips
(defrule isMitnick
  (Property-Value
    (p http://security.umbc.edu/IntrOnt#Mitnick)
    (s ?eventNumber)
    (o "true"))
  (Property-Value
    (p http://security.umbc.edu/IntrOnt#Int_time)
    (s ?eventNumber)
    (o ?Int_Time))
  (Property-Value
    (p http://security.umbc.edu/IntrOnt#Conn_time)
    (s ?eventNumber)
    (o ?Conn_Time))
  =>
  (if (>= ?Conn_Time ?Int_Time)
      (printout t "Event number: " ?eventNumber " is a Mitnick Attack" crlf)))
```

This query correlates event number 00043, the connection occurring at 15:44:17 with the host at IP address 130.85.112.23, and event number 00038, the DoS attack. The query, in conjunction with other queries, produced the following response:

- **Attack type:** Synflood
- **Event number:** 00038
- **Connection event number:** 00043
- **Mitnick attack ID:** genid21
- **Connection details:** A connection with 130.85.112.23 was made at 15:44:17 on 02/22/2003

### Sequence of Events Leading to the Discovery of the Mitnick Attack

Recall that the IDS responsible for the victim of the SYN Flood attack queried its knowledge base for an instance of a DoS attack. The query returned an instance of a SYN Flood, which was instantiated based on the condition that a SYN Flood is a subclass of both the DoS and Network classes, restricted to the value of Exced T being true.

The instance of the SYN Flood attack was transmitted in the form of a set of DAML+OIL statements to the other IDSs in the coalition. These IDSs converted the DAML+OIL notated instance into a set of N-Triples and asserted them into their respective knowledge bases. As a SYN Flood is a precursor to a more insidious attack, instances of established and pending connections were also asserted into the knowledge base. Due to the dynamic nature of the knowledge base, the rule set of each IDS is continually applied to the knowledge base. Finally, the instance of the Mitnick attack was instantiated by the knowledge base based on the existence of both the instance of the TCP connection and the instance of the DoS attack.

### Buffer Overflow Attack

The C `strcpy()` function is one of several functions that need to be bounded to prevent a buffer overflow attack. A buffer overflow attack occurs when deliberately constructed code is placed onto the stack frame, overwriting the return address from the current function. When a function is called, input parameters, the frame pointer (ebp register), and the return address (the current eip + the length of the call instruction) are pushed onto the stack, located in the Text address space of memory.

We have instrumented the Linux kernel and can intercept any given process at each system call, examining the contents of its registers and stack frame. This allows us to define the characteristics of a buffer overflow attack, such as the instruction pointer referencing a memory location outside the boundaries of the Text segment. Figure 9 presents the DAML+OIL notation for the class Buffer Overflow and one of its properties.

**Fig. 9. DAML+OIL Notation Specifying the Buffer Overflow SubClass**

Similar to the previous examples, querying the knowledge base with the following will yield all instances of a buffer overflow:

```clips
(defrule isBufferOverflow
  (Property-Value
    (p http://www.w3.org/1999/02/22-rdf-syntax-ns#type)
    (s ?var)
    (o http://security.umbc.edu/IntrOnt#Buff_OF))
  =>
  (printout t "A Buffer Overflow has occurred." crlf
             "with ID number: " ?var))
```

### Conclusion and Future Work

We have presented the case for transitioning from taxonomies and the languages employed by them to ontologies and ontology representation languages for use in Intrusion Detection Systems. We have constructed and presented an initial ontology, available at: http://security.cs.umbc.edu/Intrusion.daml.

We have used the ontology specification language DAML+OIL to implement our ontology and to distribute information regarding system state within a distributed coalition. In the Mitnick example, the ontology (DAML+OIL) and an inference engine were initially employed as an event recognition language to discern that a type of DoS attack was taking place. Secondly, DAML+OIL was used as a reporting language to communicate this fact to other systems. Finally, the ontology (DAML+OIL) and the inference engine were used as an event aggregation language to fuse the existence of the DoS attack, a network connection, and session establishment to deduce that a Mitnick-type attack had occurred.

The only prerequisite for the disparate systems in the distributed coalition is that they share the same ontology. We are continuing our research by initiating attacks in a controlled environment to capture their low-level kernel attributes at the system, process, and network levels to further specify our ontology.

### References

1. J. Allen, A. Christie, W. Fithen, J. McHugh, J. Pickel, and E. Stoner. State of the Practice of Intrusion Detection Technologies. Technical Report 99tr028, Carnegie Mellon - Software Engineering Institute, 2000.
2. E. G. Amoroso. Fundamentals of Computer Security Technology. Prentice-Hall PTR, 1994.
3. T. Aslam, I. Krusl, and E. Spafford. Use of a Taxonomy of Security Faults. In Proceedings of the 19th National Information Systems Security Conference, October 1996.
4. D. Brickley and R. Guha. RDF Vocabulary Description Language 1.0: RDF Schema. http://www.w3c.org/TR/rdf-schema/, 2003.
5. P. C. Mahalanobis. On Tests and Measures of Groups Divergence. International Journal of the Asiatic Society of Bengal, 1930.
6. D. Curry and H. Debar. “Intrusion Detection Message Exchange Format Data Model and Extensible Markup Language (XML) Document Type Definition.” http://www.ietf.org/internet-drafts/draft-ietf-idwg-idmef-xml-10.txt, January 2003.
7. R. Davis, H. Shrobe, and P. Szolovits. What is Knowledge Representation? AI Magazine, 14(1):17 – 33, 1993.
8. J. Doyle, I. Kohane, W. Long, H. Shrobe, and P. Szolovits. Event Recognition Beyond Signature and Anomaly. In 2nd IEEE-SMC Information Assurance Workshop, June 2001.
9. S. Eckmann, G. Vigna, and R. Kemmerer. STATL: An Attack Language for State-based Intrusion Detection. Journal of Computer Security, 10(1/2):71 – 104, 2002.
10. R. Feiertag, C. Kahn, P. Porras, D. Schackenberg, S. Staniford-Chen, and B. Tung. A Common Intrusion Specification Language. http://www.isi.edu/brian/cidf/drafts/language.txt, June 1999.
11. R. Fikes and D. L. McGuinness. An Axiomatic Semantics for RDF, RDF-S, and DAML+OIL. http://www.w3.org/TR/daml+oil-axioms, December 2001.
12. G. Frank, J. Jenkins, and R. Fikes. JTP: An Object-Oriented Modular Reasoning System. http://kst.stanford.edu/software/jtp.
13. E. J. Friedman-Hill. Jess, The Java Expert System Shell. http://herzberg.ca.sandia.gov/jess/docs/52/, November 1977.
14. R. L. Glass and I. Vessey. Contemporary Application-Domain Taxonomies. IEEE Software, pages 63 – 76, July 1995.
15. G. Golub and C. Loan. Matrix Computations. The Johns Hopkins University Press, 1989.
16. J. Goubault-Larrecq. An Introduction to LogWeaver (v2.8). http://www.lsv.ens-cachan.fr/goubault/DICO/tutorial.pdf, September 2001.
17. T. F. Gruber. A Translation Approach to Portable Ontologies. Knowledge Acquisition, 5(2):199–220, 1993.
18. B. Guha and B. Mukherjee. Network Security via Reverse Engineering of TCP Code: Vulnerability Analysis and Proposed Solutions. In IEEE Networks, pages 40 – 48. IEEE, July/August 1997.
19. V. Haarslev and R. Moller. RACER: Renamed ABox and Concept Expression Reasoner. http://www.cs.concordia.ca/faculty/haarslev/racer/index.html, June 2001.
20. J. W. Haines, L. M. Rossey, R. P. Lippman, and R. K. Cunningham. Extending the DARPA Off-Line Intrusion Detection Evaluations. In DARPA Information Survivability Conference and Exposition II, volume 1, pages 77 – 88. IEEE, 2001.
21. I. Horrocks, U. Sattler, and S. Tobies. Reasoning with Individuals for the Description Logic SHIQ. In Proceedings of the 17th International Conference on Automated Deduction, number 1831. Springer-Verlag, 2000.
22. J. Hendler. DARPA Agent Markup Language+Ontology Interface Layer. http://www.daml.org/2001/03/daml+oil-index, 2001.
23. A. Joshi and J. Undercoffer. On Web Semantics and Data Mining: Intrusion Detection as a Case Study. In Proceedings of the National Science Foundation Workshop on Next Generation Data Mining, 2002.
24. C. Kahn, D. Bolinger, and D. Schackenberg. Communication in the Common Intrusion Detection Framework v 0.7. http://www.isi.edu/brian/cidf/drafts/communication.txt, June 1998.
25. R. A. Kemmerer and G. Vigna. Intrusion Detection: A Brief History and Overview. Security and Privacy a Supplement to IEEE Computer Magazine, pages 27 – 30, April 2002.
26. K. Kendall. A Database of Computer Attacks for the Evaluation of Intrusion Detection Systems. Master’s thesis, MIT, 1999.
27. D. Koller and A. Pfeffer. Probabilistic Frame-Based Systems. In Proceedings of the Fifteenth National Conference on Artificial Intelligence, pages 580 – 587, Madison, Wisconsin, July 1998. AAAI.
28. J. Kopena. DAMLJessKB. http://edge.mcs.drexel.edu/assemblies/software/damljesskb/articles/DAMLJessKB-2002.pdf, October 2002.
29. R. Krishnapuram, A. Joshi, O. Nasraoui, and L. Yi. Low-Complexity Fuzzy Relational Clustering Algorithms for Web Mining. In IEEE transactions on Fuzzy Systems, volume 9, August 2001.
30. I. Krusl. Software Vulnerability Analysis. PhD thesis, Purdue, 1998.
31. C. E. Landwehr, A. R. Bull, J. P. McDermott, and W. S. Choi. A Taxonomy of Computer Program Security Flaws. ACM Computing Surveys, 26(3):211 – 254, September 1994.
32. O. Lassila and R. R. Swick. Resource Description Framework (RDF) Model and Syntax Specification. http://www.w3.org/TR/1999/REC-rdf-syntax-19990222/, February 1999.
33. U. Lindqvist and E. Jonsson. How to Systematically Classify Computer Security Intrusions. In Proceedings of the 1997 IEEE Symposium on Security and Privacy, pages 154 – 163, May 1997.
34. U. Lindqvist and P.A. Porras. Detecting Computer and Network Misuse through the Production-Based System Toolset (P-BEST). In Proceedings of the 1999 IEEE Symposium on Security and Privacy, pages 146 – 161. IEEE, May 1999.
35. R. Lippmann, D. Fried, I. Graf, J. Haines, K. Kendall, D. McClung, D. Weber, S. Webster, D. Wyschogrod, R. Cunningham, and M. Zissman. Evaluating Intrusion Detection Systems: The 1998 DARPA Off-line Intrusion Detection Evaluation. In Proceedings of the DARPA Information Survivability Conference and Exposition, 2000, pages 12 – 26.
36. J. McHugh. Testing Intrusion Detection Systems: A Critique of the 1998 and 1999 DARPA Intrusion Detection System Evaluations as Performed by Lincoln Laboratory. ACM Transactions on Information and System Security, November 2000.
37. P. Ning, S. Jajodia, and X. S. Wang. Abstraction-Based Intrusion in Distributed Environments. ACM Transactions on Information and Systems Security, 4(4):407 – 452, November 2001.
38. N. F. Noy and D. L. McGuinnes. Ontology Development 101: A Guide to Creating Your First Ontology. Stanford University.
39. V. Paxson. Bro: A System for Detecting Network Intruders in Real Time. In Proceedings of the 7th Symposium on USENIX Security, 1998.
40. V. Raskin, C. F. Hempelmann, K. E. Triezenberg, and S. Nirenburg. Ontology in Information Security: A Useful Theoretical Foundation and Methodological Tool. In Proceedings of NSPW-2001, pages 53 – 59. ACM.
41. M. Roesch. Snort, version 1.8.3. Available via www.snort.org, August 2001. An open-source NIDS.
42. M. Roger and J. Goubault-Larrecq. Log Auditing through Model Checking. In Proceedings of the 14th IEEE Computer Security Foundations Workshop (CSFW’01), pages 220 – 236, 2001.
43. S. Staab and A. Maedche. Ontology Engineering Beyond the Modeling of Concepts and Relations. In Proceedings of the 14th European Congress on Artificial Intelligence, 2000.
44. G. G. Simpson. Principles of Animal Taxonomy. Columbia University Press, 1961.
45. J. Undercoffer, F. Perich, A. Cedilnik, L. Kagal, and A. Joshi. A Secure Infrastructure for Service Discovery and Access in Pervasive Computing. Mobile Networks and Applications: Special Issue on Security, 8(2):113 – 126, 2003.
46. J. Undercoffer and J. Pinkston. An Empirical Analysis of Computer Attacks and Intrusions. Technical Report TR-CS-03-11, University of Maryland, Baltimore County, 2002.
47. W3C. Extensible Markup Language. http://www.w3c.org/XML/, 2003.
48. WEBSTERS, editor. Merriam-Webster’s Collegiate Dictionary. Merriam-Webster, Inc., tenth edition, 1993.
49. C. Welty. Towards a Semantics for the Web. www.cs.vassar.edu/faculty/welty/papers/dagstuhl-2000.pdf, 2000.