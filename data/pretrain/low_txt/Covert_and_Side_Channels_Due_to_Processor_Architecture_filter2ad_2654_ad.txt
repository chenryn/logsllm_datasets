# Key Searching Charts and Security Analysis

## Figures
**Figure 11. Key searching charts:**
- **(a) Key searching chart without cache-index permutation:**
  - The x-axis represents the key byte value (ranging from 0 to 255).
  - The y-axis shows the normalized correlation, where a higher y-value indicates a stronger match.
  - A distinct high y-value at x=143 suggests a likely key-byte match.

- **(b) Key searching chart with cache-index permutation:**
  - The same key is used, but with RPCache remapping, the correlation timing characteristics are randomized.
  - The highest peaks are misleading, as they do not correspond to the correct key-byte.
  - This demonstrates the effectiveness of RPCache in thwarting Bernstein's statistical cache attack.

## 6.5. Security Analysis
### Cache-Based Information Leakage Attacks
Three of the attacks described in Section 3 involve cache-based information leakage. Here, we analyze the effectiveness of RPCache in mitigating these attacks:

#### Bernstein's Statistical Cache Attack
- **Evaluation:**
  - We evaluated the effectiveness of RPCache in mitigating Bernstein's statistical cache attack.
  - **Simulation:**
    - Memory blocks of the AES tables were swapped once per 25 AES encryptions, equivalent to swapping two cache sets per 10,000 cycles.
  - **Results:**
    - In Figure 11(a), a distinct high y-value for x=143 indicates a likely key-byte match.
    - In Figure 11(b), with RPCache remapping, the correlation is random, and the highest peaks are misleading, demonstrating the effectiveness of RPCache in thwarting the attack.

#### SMT/Cache Side Channel Attack
- **Description:**
  - In this attack, the receiver process can detect the memory locations used by the sender (victim) process through cache misses.
- **Mitigation:**
  - **RPCache Mechanism:**
    - Each time the receiver observes a cache miss, the swapping policy ensures that the miss could be caused by the victim process accessing any one of the cache sets with equal probability.
    - No information is gleaned about which cache line was accessed by the victim process, effectively stopping SMT/Cache side channel attacks.

#### Speculation-Enhanced Cache Attack
- **Description:**
  - The control-speculation mechanism, described in Section 3.4, can provide a more reliable way to detect cache misses.
- **Mitigation:**
  - **RPCache Mechanism:**
    - RPCache does not prevent the attacker from detecting cache misses but makes the victim process's cache accesses unrelated to the attacker's cache miss pattern.
    - Therefore, no information can be inferred even if the attacker can accurately detect cache misses.

## 7. Related Work
- **Covert Channels:**
  - Past work on covert channels analyzed system specifications for illegal information flows [13].
- **Side-Channel Attacks:**
  - Previous studies focused on differential power [2-5] and timing [6-10] analysis.
  - Cache-based side channel attacks were studied in [26-27].
  - Recent reports have shown complete key recovery during AES and RSA encryption [11][12][22].
- **Control Flow Information Leakage:**
  - The problem of control flow information leakage due to exposure of address traces on the system memory bus was studied in [21][24].
  - Probabilistic approaches for hiding real access sequences were proposed.
  - Our work differs as it focuses on information leakage caused by resource interference, such as cache interference.
- **Other Approaches:**
  - Cache partitioning, a different approach, was proposed in [23] to mitigate one type of cache-based side channel attack, but it incurs performance penalties and requires changes in the ISA, compiler, and operating system.
  - Special-purpose secure devices, such as the IBM 4758 cryptographic coprocessor [20], are also relevant.

## 8. Summary and Conclusions
- **Processor-Based Covert Channels:**
  - These channels are particularly dangerous due to their high bandwidth and reliability, even in the presence of strong software isolation techniques.
  - They are faster and more reliable than traditional covert channels because microprocessors operate at the highest clock rate and resource sharing is tightly coupled.
  - Data rates of processor-based covert channels can be orders of magnitude larger than traditional covert channels.
- **Software Isolation:**
  - Strong software isolation architectures like Virtual Machine technology with secure Virtual Machine Monitors or hypervisors do not prevent processor-based covert channels.
  - Trends toward portable design methodology and virtualization make hardware details less visible, increasing the risk of hardware-based information leakage.
- **Proposed Solutions:**
  - **Selective Partitioning:**
    - Can prevent the SMT/FU covert channel problem with an estimated performance degradation of no more than 25%, with an expected value of less than 10%.
  - **RPCache:**
    - Uses efficient cache-index randomization to thwart software cache-based side channel attacks.
    - Performance degradation is less than 1%, and the solution is transparent to software.
- **Future Work:**
  - Identify more processor features that facilitate covert and side channels.
  - Study other solutions for this growing threat.

## References
[1] Butler W. Lampson, "A note on the confinement problem," Communications of the ACM, v.16 n.10, pp.613-615, Oct. 1973.
[2] C. Kocher, J. Jaffe, and B. Jun, "Differential power analysis," Advances in Cryptology - CRYPTO '99, vol. 1666 of Lecture Notes in Computer Science, pp.388-397, Springer-Verlag, 1999.
[3] J.-S. Coron and L. Goubin, "On Boolean and arithmetic masking against differential power analysis," Cryptographic Hardware and Embedded Systems (CHES 2000), vol. 1965 of Lecture Notes in Computer Science, pp.231-237, Springer-Verlag, 2000.
[4] M. Joye, "Smart-card implementations of elliptic curve cryptography and DPA-type attacks," Smart Card Research and Advanced Applications VI, pp.115-125, Kluwer Academic Publishers, 2004.
[5] J. Waddle and D. Wagner, "Towards efficient second-order power analysis," Cryptographic Hardware and Embedded Systems (CHES 2004), vol. 3156 of Lecture Notes in Computer Science, pp.1-15, Springer-Verlag, 2004.
[6] P. Kocher, "Timing attacks in implementations of Diffie-Hellman, RSA, DSS, and other systems," Proceedings Crypto '96, Lecture Notes in Computer Science, vol. 1109, Springer-Verlag, pp.104-113.
[7] Werner Schindler, "A Timing Attack against RSA with the Chinese Remainder Theorem," CHES 2000, pp.109-124, 2000.
[8] Werner Schindler, "Optimized Timing Attacks against Public Key Cryptosystems," Statistics and Decisions, 20:191-210, 2002.
[9] David Brumley and Dan Boneh, "Remote Timing Attacks are Practical," Proceedings of the 12th USENIX Security Symposium, pp.1-14, August 2003.
[10] J.-F. Dhem, F. Koeune, P.-A. Leroux, P. Mestre, J.-J. Quisquater, and J.-L. Willems, "A practical implementation of the timing attack," Proc. CARDIS 1998, Smart Card Research and Advanced Applications, 1998.
[11] D.J. Bernstein, "Cache-timing Attacks on AES," http://cr.yp.to/antiforgery/cachetiming-20050414.pdf.
[12] C. Percival, "Cache Missing for Fun and Profit," http://www.daemonology.net/papers/htt.pdf.
[13] National Computer Security Center, "A Guide to Understanding Covert Channel Analysis of Trusted Systems," NCSC-TG-30, November 1993, http://www.radium.ncsc.mil/tpep/library/rainbow.
[14] Intel Itanium Architecture Software Developer's Manuals Volume 1-3, http://www.intel.com/design/itanium2/documentation.htm.
[15] Dean Tullsen, Susan Eggers, and Henry Levy, "Simultaneous Multithreading: Maximizing On-Chip Parallelism," Proceedings of the 22nd Annual International Symposium on Computer Architecture, June 1995.
[16] D.T. Marr, F. Binns, D.L. Hill, G. Hinton, D.A. Koufaty, J.A. Miller, M. Upton, "Hyper-Threading Technology Architecture and Microarchitecture," Intel Technology Journal, vol.6, issue 1, pp.4-15, 2002.
[17] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, D. Boneh, "Terra: A Virtual Machine-Based Platform for Trusted Computing," Proceedings of the 19th ACM Symposium on Operating System Principles, pp.193-206, Oct 2003.
[18] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt, A. Warfield, "Xen and the Art of Virtualization," Proceedings of the 19th ACM Symposium on Operating System Principles, pp.164-177, Oct 2003.
[19] A. Baratloo, T. Tsai, and N. Singh, "Transparent Run-Time Defense Against Stack Smashing Attacks," Proceedings of the USENIX Annual Technical Conference, June 2000.
[20] The IBM 4758 PCI cryptographic coprocessor, available at http://www-03.ibm.com/security/cryptocards.
[21] X. Zhuang, T. Zhang, and S. Pande, "HIDE: an infrastructure for efficiently protecting information leakage on the address bus," ACM 11th International Conference on Architecture Support for Programming Language and Operating Systems, 2004.
[22] D. A. Osvik, A. Shamir and E. Tromer, "Cache attacks and Countermeasures: the Case of AES," Cryptology ePrint Archive, Report 2005/271, 2005.
[23] D. Page, "Partitioned Cache Architecture as a Side-Channel Defense Mechanism," Cryptology ePrint Archive, Report 2005/280, 2005.
[24] Oded Goldreich, "Towards a theory of software protection and simulation by oblivious RAMs," Proceedings of the Nineteenth Annual ACM Symposium on Theory of Computing, May 1987.
[25] T. Austin, E. Larson, and D. Ernst, "Simplescalar: an infrastructure for computer system modeling," IEEE computer, 35(2), Feb 2002.
[26] Daniel Page, "Theoretical use of cache memory as a cryptanalytic side-channel," technical report CSTR-02-003, Department of Computer Science, University of Bristol, 2002.
[27] Yukiyasu Tsunoo, Teruo Saito, Tomoyasu Suzaki, Maki Shigeri, Hiroshi Miyauchi, "Cryptanalysis of DES implemented on computers with cache," Proc. CHES 2003, LNCS 2779, 62-76, 2003.