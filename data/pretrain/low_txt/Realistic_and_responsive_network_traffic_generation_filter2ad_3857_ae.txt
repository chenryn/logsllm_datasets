### 4. Energy Plot Analysis

**Figure 17: Energy plot responsiveness to doubling response size and link latency (Mawi)**

This figure illustrates the effects of doubling both request and response sizes for the same trace. As expected, the relative shape of the energy curve remains consistent, but with significantly higher energy levels at all time scales. The average bandwidth increases from 9 Mbps to 19 Mbps.

### 5. Exploring Swing’s Projection Capabilities

To further explore Swing’s ability to project alternate application mixes during traffic generation, we modified the Auck trace (Table 2) by increasing the number of SQUID sessions by a factor of 20 while keeping all other model parameters constant. This adjustment resulted in an increase in the average bandwidth of the trace to 15 Mbps. Figures 8 and 9 previously highlighted the differences in burstiness characteristics between the two applications, with SQUID exhibiting a more pronounced dip at time scale 9 and a more convex curve at smaller time scales. Since the overall energy plot is influenced by the burstiness of individual applications, increasing the percentage of SQUID should make the overall energy plot resemble SQUID. **Figure 18** confirms this hypothesis, showing the curves for the modified trace. For comparison, the energy plot corresponding to SQUID in the original trace is also provided.

**Figure 18: Energy plot responsiveness to varying application mix (Auck)**

### 6. Limitations and Future Work

In addition to the discussions in the main body of the paper, we identify several limitations of our methodology:

1. **Modeling Application Behavior**: Our models are based on information extracted from available packet traces containing only packet headers. Other studies have used full application-level information for peer-to-peer [14], multimedia [38], and HTTP [3] workloads. Ongoing work aims to show that our model can be populated from such application-level traces and workload generators, with initial results being encouraging.
   
2. **Accuracy of Models**: Swing’s accuracy is limited by the accuracy of the models it extracts for user, application, and network behavior.

3. **Trace Quality**: The quality of our traces impacts the results. We have found inter-packet timings in pcap traces that should not be possible based on the measured link’s capacity. Pervasive routing asymmetry can also introduce errors in bi-directional model extraction. Additionally, using homogeneous protocol stacks on end hosts limits our ability to reproduce the mix of network stacks (e.g., TCP flavors) seen in the original trace.

4. **Topology and Traffic Generation**: Since we generate traffic for a dumbbell topology and focus on producing accurate packet traces in terms of bandwidth and burstiness, we only consider a subset of our initial parameters. We do not currently model the distribution of requests and responses among particular clients and servers or server think time. We split the total number of hosts in the emulation topology, weighted by the number of bytes transmitted per application in the original trace. This approach loses the spatial locality of the same host simultaneously engaging in different types of sessions (e.g., HTTP, P2P, and SMTP).

5. **TCP and UDP Support**: In this work, we focus on generating realistic traces for a single network link. While our implementation supports UDP, a detailed analysis of our techniques and accuracy for UDP traffic is left for future work.

6. **Multi-Link Traffic Generation**: For some studies, it may be valuable to simultaneously generate accurate communication characteristics across multiple links in a large topology. This is an interesting and challenging area for future research, though it will likely require access to simultaneous packet traces at multiple vantage points to accurately populate an extended version of our proposed model.

### 7. Related Work

Our work benefits from related efforts in various disciplines, which we discuss below:

- **Application-Specific Workload Generation**: There have been many attempts to design application-specific workload generators. Examples include Surge [3], which follows empirically-derived models for web traffic [25] and models of TELNET, SMTP, NNTP, and FTP [31]. Cao et al. [7] perform source-level modeling of HTTP, but they attempt to parameterize round-trip times rather than capture them empirically. Relative to these efforts, Swing captures the packet communication patterns of a variety of applications communicating across wide-area networks. Application-specific workload generators are agnostic to particular network bandwidths and latencies, TCP particularities, etc. Although recent efforts characterize P2P workloads at the packet [14] and flow level [34], we are not aware of any real workload generator for such systems.

- **Synthetic Traffic Trace Generation**: One way to study statistical properties of applications and users is through packet traces from existing wide-area links, such as those available from CAIDA [6] and NLANR [29]. However, these traces are based on past measurements, making it difficult to extrapolate to other workload and topology scenarios. RAMP [8] generates high-bandwidth traces using a simulation environment involving source-level models for HTTP and FTP only. We, on the other hand, advocate a single parameterization model with different parameters (distributions) for different applications. Rupp et al. [33] introduce a packet trace manipulation framework for testbeds, presenting a set of rules to manipulate a given network trace. Our approach is complementary, focusing on generating traces using a first-principles approach by constructing real packet-exchanging sources and sinks.

- **Structural Model**: The importance of structural models is well documented [13, 41], but a generic structural model for Internet applications does not exist to date. Netspec [24] builds source models to generate traffic for Telnet, FTP, voice, video, and WWW, but the authors do not show whether the generated traffic is representative of real traffic. There is also a source model for HTTP [7], but it includes both application-dependent and network-dependent parameters, making it difficult to interpret the results and apply them to different scenarios. To the best of our knowledge, we present the first unified framework for structural modeling of a mix of applications.

- **Capturing Communication Characteristics**: There have been attempts to classify applications based on their communication patterns [22, 28, 35, 42]. Generating traffic based on clusters of applications grouped according to an underlying model is part of our ongoing effort. Harpoon [36] is perhaps most closely related to our effort, but there are key differences in the goals and design choices. Harpoon models background traffic starting with measured distributions of flow behavior on a target link, while we consider the characteristics of individual applications, enabling us to vary the mix of, for instance, HTTP versus P2P traffic in projected future settings. More importantly, Harpoon is designed to match distributions from the underlying trace at a coarse granularity (minutes) and does not extract or playback network characteristics. Swing, on the other hand, extracts distributions for the wide-area characteristics of flows that cross a particular link, enabling us to reproduce burstiness of the packet-arrival process at sub-RTT time scales. This further allows us to predict the effects, at least roughly, on a packet trace of changing network conditions.

- **Relative to Recent Work on Sub-RTT Burstiness**: We focus on extracting the necessary characteristics from existing traces to reproduce such burstiness in live packet traces. As part of future work, we hope to corroborate findings regarding the causes of sub-RTT burstiness [21].

- **Felix et al. [16]**: Generate realistic TCP workloads using a one-to-one mapping of connections from the original trace to the test environment. Our effort differs in that we develop a session model on top of their connection model, which is crucial since the termination time of previous connections determines the start duration of future connections for a user/session, making any static connection replay model unresponsive to changes in the underlying model. We also advocate a common parameterization model for various application classes instead of grouping them all under one class.

- **Passive Estimation of Wide-Area Characteristics**: Our work builds upon existing efforts on estimating wide-area network characteristics without active probing. Jaiswal et al. [20] use passive measurement to infer round trip times by looking at traffic flowing across a single link. Our methodology for estimating RTTs is closely related to this effort, though we extend it to build distinct distributions for the sender- versus receiver-side. Our approach to measuring RTT distributions is more general than the popular approach of measuring a single RTT distribution and dividing it by two to set latencies on each side of the target link [9]. Such techniques assume that the target link is close to the border router of an organization, an assumption that is not general to arbitrary traces (including Mawi). Our techniques for estimating link capacity measure the mean dispersion of packet pairs sent from the sender to the target link, as in [11, 19]. Finally, we resolve ambiguities in loss rate estimates using techniques similar to [5]. Our approach to measuring RTT and loss rates is also similar to T-RAT [44], but our goals differ: while T-RAT focuses on analyzing the cause for slowdowns on a per-flow basis, we are interested in determining the distribution of network characteristics across time for individual hosts.

- **Web Transaction Delay Components**: In [4], the authors profile various delay components in Web transactions by tracing TCP packets exchanged between clients and servers. This work assumes the presence of traces at both the client and server side and focuses on a single application. For our work, we utilize a single trace at an arbitrary point in the network and extract information on a variety of applications. Further, while we focus on generating realistic and responsive packet traces based on the measured application, network, and user behavior at a single point in the network, their effort focuses on root-cause analysis—determining the largest bottleneck to end-to-end performance in a particular system deployment.

### 8. Conclusions

In this paper, we develop a comprehensive framework for generating realistic packet traces. We argue that capturing and reproducing essential characteristics of a packet trace requires a model for user, application, and network behavior. We then present such a model and demonstrate how it can be populated using existing packet header traces. Our tool, Swing, uses these models to generate live packet traces by matching user and application characteristics on commodity operating systems subject to the communication characteristics of an appropriately configured emulated network. We show that our generated traces match both aggregate characteristics and burstiness in the byte and packet arrival process across a variety of timescales when compared to the original trace. Further, we show initial results suggesting that users can modify subsets of our semantically meaningful model to extrapolate to alternate user, application, and network conditions.

Overall, we hope that Swing will enable quantifying the impact on traffic characteristics of:
- Changing network conditions, such as increasing capacities or decreasing round trip times.
- Changing application mix, for instance, determining the effects of increased peer-to-peer application activity.
- Changing user behavior, for example, determining the effects of users retrieving video rather than audio content.

Similarly, Swing will enable the evaluation of a variety of higher-level application studies, such as bandwidth/capacity estimation tools and dynamically reconfiguring overlays, subject to realistic levels of background traffic and network variability.

### 9. Acknowledgements

We would like to thank Vern Paxson for his insightful and detailed comments in the early days of this work, and Daryl Veitch for making available the code for creating wavelet scaling plots. Credits are due to the anonymous reviewers who made valuable suggestions to improve the work, and finally to thank NLANR, WIDE, and CAIDA, who have made this research possible by allowing access to a large repository of network traces.

### 10. References

[1] ABRY, P., AND VEITCH, D. Wavelet analysis of long-range-dependent traffic. IEEE Transactions on Information Theory 44, 1 (1998), 2–15.

[2] Auckland-VI trace archive, University of Auckland, New Zealand. http://pma.nlanr.net/Traces/long/auck6.html.

[3] BARFORD, P., AND CROVELLA, M. Generating representative web workloads for network and server performance evaluation. In MMCS (1998), pp. 151–160.

[4] BARFORD, P., AND CROVELLA, M. Critical path analysis of TCP transactions. In ACM SIGCOMM (2000).

[5] BENKO, P., AND VERES, A. A passive method for estimating end-to-end TCP packet loss. In IEEE Globecom (2002).

[6] CAIDA. http://www.caida.org.

[7] CAO, J., CLEVELAND, W., GAO, Y., JEFFAY, K., SMITH, F. D., AND WEIGLE, M. Stochastic models for generating synthetic HTTP source traffic. In IEEE INFOCOMM (2004).

[8] CHAN LAN, K., AND HEIDEMANN, J. A tool for rapid model parameterization and its applications. In MoMeTools Workshop (2003).

[9] CHENG, Y.-C., HOELZLE, U., CARDWELL, N., SAVAGE, S., AND VOELKER, G. M. Monkey see, monkey do: A tool for TCP tracing and replaying. In USENIX Technical Conference (2004).

[10] DANZIG, P. B., AND JAMIN, S. tcplib: A library of TCP/IP traffic characteristics. USC Networking and Distributed Systems Laboratory TR CS-SYS-91-01 (October, 1991).

[11] DOVROLIS, C., RAMANATHAN, P., AND MOORE, D. Packet dispersion techniques and capacity estimation. In IEEE/ACM Transactions in Networking, Dec (2004).

[12] FELDMANN, A., GILBERT, A. C., HUANG, P., AND WILLINGER, W. Dynamics of IP traffic: A study of the role of variability and the impact of control. In ACM SIGCOMM (1999).

[22] KARAGIANNIS, T., PAPAGIANNAKI, K., AND FALOUTSOS, M. Blinc: Multilevel traffic classification in the dark. In ACM SIGCOMM (2005).

[23] LE, L., AIKAT, J., JEFFAY, K., AND SMITH, F. D. The Effects of Active Queue Management on Web Performance. In ACM SIGCOMM (2003).

[24] LEE, B. O., FROST, V. S., AND JONKMAN, R. Netspec 3.0 source models for telnet, ftp, voice, video, and WWW traffic. In Technical Report ITTC-TR-10980-19, University of Kansas (1997).

[25] MAH, B. A. An empirical model of HTTP network traffic. In IEEE INFOCOM (2) (1997).

[26] Mawi working group traffic archive. http://tracer.csl.sony.co.jp/mawi/.

[27] MEDINA, A., TAFT, N., SALAMATIAN, K., BHATTACHARYYA, S., AND DIOT, C. Traffic Matrix Estimation: Existing Techniques and New Directions. In ACM SIGCOMM (2002).

[28] MOORE, A., AND ZUEV, D. Internet traffic classification using Bayesian analysis techniques. In ACM SIGMETRICS (2005).

[29] The national laboratory for applied network research (nlanr). http://www.nlanr.net.

[30] The network simulator ns-2. http://www.isi.edu/nsnam/ns.

[31] PAXSON, V. Empirically derived analytic models of wide-area TCP connections. IEEE/ACM Transactions on Networking 2, 4 (1994), 316–336.

[32] PAXSON, V. End-to-end internet packet dynamics. In IEEE/ACM Transactions on Networking, Vol.7, No. 3 (June, 1999), pp. 277–292.

[33] RUPP, A., DREGER, H., FELDMANN, A., AND SOMMER, R. Packet trace manipulation framework for test labs. In Internet Measurement Conference (2004).

[34] SEN, S., AND WANG, J. Analyzing peer-to-peer traffic across large networks. In ACM SIGCOMM Internet measurement workshop (2002).

[35] SMITH, F. D., HERNANDEZ-CAMPOS, F., JEFFAY, K., AND OTT, D. What TCP/IP protocol headers can tell us about the web. In SIGMETRICS/Performance (2001), pp. 245–256.

[36] SOMMERS, J., AND BARFORD, P. Self-configuring network traffic generation. In Internet Measurement Conference (2004).

[37] STANIFORD, S., PAXSON, V., AND WEAVER, N. How to 0wn the Internet in Your Spare Time. In USENIX Security Symposium (2002).

[38] TANG, W., FU, Y., CHERKASOVA, L., AND VAHDAT, A. Medisyn: a synthetic streaming media service workload generator. In 13th International workshop on NOSSDAV (2003).

[39] VAHDAT, A., YOCUM, K., WALSH, K., MAHADEVAN, P., KOSTIC, D., CHASE, J., AND BECKER, D. Scalability and accuracy in a large-scale network emulator. In Operating Systems Design and Implementation (OSDI) (2002).

[13] FLOYD, S., AND PAXSON, V. Difficulties in simulating the internet. In IEEE/ACM Transactions on Networking (2001).

[14] GUMMADI, K. P., DUNN, R. J., SAROIU, S., GRIBBLE, S. D., LEVY, H. M., AND ZAHORJAN, J. Measurement, modeling, and analysis of a peer-to-peer file-sharing workload. In Symposium on Operating Systems Principles (SOSP) (2003).

[15] HARFOUSH, K., BESTAVROS, A., AND BYERS, J. Measuring bottleneck bandwidth of targeted path. In IEEE INFOCOM (2003).

[16] HERNANDEZ-CAMPOS, F., SMITH, F. D., AND JEFFAY, K. Generating realistic TCP workloads. In CMG2004 Conference (2004).

[17] HUANG, P., FELDMANN, A., AND WILLINGER, W. A non-intrusive, wavelet-based approach to detecting network performance problems. In Internet Measurement Workshop (2001).

[18] JAIN, M., AND DOVROLIS, C. End-to-end available bandwidth: Measurement methodology, dynamics, and relation with TCP throughput. In ACM SIGCOMM (2002).

[19] JAIN, M., AND DOVROLIS, C. Ten fallacies and pitfalls in end-to-end available bandwidth estimation. In Internet Measurement Conference (2004).

[20] JAISWAL, S., IANNACONE, G., DIOT, C., KUROSE, J., AND TOWSLEY, D. Inferring TCP connection characteristics through passive measurements. In IEEE INFOCOM (2004).

[21] JIANG, H., AND DOVROLIS, C. Why is the internet traffic bursty in short (sub-RTT) time scales? In SIGMETRICS (2005).

[41] WILLINGER, W., PAXSON, V., AND TAQQU, M. S. Self-similarity and Heavy Tails: Structural Modeling of Network Traffic. In A Practical Guide to Heavy Tails: Statistical Techniques and Applications (1998).

[42] XU, K., ZHANG, Z.-L., AND BHATTACHARYA, S. Profiling internet backbone traffic: Behavior models and applications. In ACM SIGCOMM (2005).

[43] YOCUM, K., EADE, E., DEGESYS, J., BECKER, D., CHASE, J., AND VAHDAT, A. Toward scaling network emulation using topology partitioning. In Eleventh IEEE/ACM International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems (MASCOTS) (2003).

[44] ZHANG, Y., BRESLAU, L., PAXSON, V., AND SHENKER, S. On the characteristics and origins of internet flow rates. In ACM SIGCOMM (2002).

[45] ZHANG, Y., PAXSON, V., AND SHENKER, S. The stationarity of internet path properties: Routing, loss, and throughput. ACIRI Technical Report (2000).