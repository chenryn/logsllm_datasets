### Information Flow in DNS Queries and Responses

In the context of DNS, information flow can occur through query names (outbound) and server responses (inbound). In the absence of outbound data, clients send low-frequency queries to poll the tunnel server for any pending data. The functionality of these tunnels ranges from simple client-to-server virtual circuits to full IP-level connectivity. Examples include NSTX [13], dns2tcp [7], Iodine [10], OzymanDNS [15], tcp-over-dns [25], and Heyoka [14]. DNS exfiltration has also been a tool in attackers' arsenals for several years, as detailed in [22] and its references.

### Data Embedding in DNS Messages

Beyond query names, the DNS message format contains various fields that can be used for data embedding. Additionally, timing (e.g., the timing of queries) provides a rich vector for embedding data. This is not unique to DNS traffic but is present in all Internet traffic, allowing any message to be encoded in the inter-arrival times between packets. Gianvecchio et al. [12] demonstrated how to automatically construct timing channels that mimic the statistical properties of legitimate network traffic to evade detection. Our detection technique avoids such complications by measuring information content rather than specific statistical properties.

### Detecting Covert Communication over DNS

One approach to detecting covert communication over DNS involves examining the statistical properties of DNS traffic streams. Karasaridis et al. propose DNS tunnel detection by computing the Kullback-Leibler distance between baseline and observed DNS packet-size distributions hourly [16]. To counteract such temporal statistical anomaly detectors, Butler et al. propose stealthy half-duplex and full-duplex DNS tunneling schemes [5]. They also suggest using the Jensen-Shannon divergence of per-host byte distributions of DNS payloads to detect tunneled traffic. However, their detection technique only flags whether the aggregate traffic contains tunneled communication; it does not identify the potential tunneled domains. Furthermore, the detection rate depends significantly on the ratio of tunneled traffic to normal traffic. In [3], the authors show that domain names in legitimate DNS queries follow 1-, 2-, and 3-gram fingerprints with Zipf distributions, distinguishing them from the higher-entropy names used in DNS tunneling. These evaluations, however, do not address practicality for operational use, as they validate hypotheses on short, low-volume benign and synthetic tunneled traces collected using free DNS tunneling tools. Large-scale DNS traffic often exhibits extensive diversity in multiple dimensions, which likely exacerbates issues of false positives.

### Overlap with Algorithmically-Generated Domain Names

Our work overlaps with research on algorithmically-generated domain names by Yadav et al. [29]. The key difference is that their algorithm assumes a specific model of name construction (distributions of letters and bigrams). Instead of focusing on specific name patterns, we measure the aggregate information content of a query stream, regardless of how encodings are generated for the query name, type, or timing.

### Detection of Timing Channels

Detection of timing channels has been studied before, with recent results including Cabuk et al. [6], who observe that timing-based tunnels often introduce artificial regularity in packet inter-arrival times and present detection methods based on this characteristic. More generally, Gianvecchio and Wang [11] identify timing-based tunnels in general Internet traffic (not just DNS) using conditional entropy measures to detect subtle distortions in packet inter-arrival time distributions. These works use time intervals of 20 milliseconds or more; we use a more conservative 10-millisecond timing resolution and do not assume the presence of detectable distortions.

### Related Work on Surreptitious Communication

While the general problem of surreptitious communication has been extensively examined in the literature on covert channels and steganography, our work is more closely related to previous research on bounding the volume of surreptitious communication in other protocols. Borders et al. studied this problem for HTTP, observing that covert communication is constrained to the user-generated part of an outgoing request [1, 2]. By removing fixed protocol data and data derived from inbound communication, the authors show how to determine a close approximation to the true volume of information flows in HTTP requests. An analogous approach for DNS would be to track the domain names a system receives from remote sources (such as web pages and incoming email) and exclude lookups for these names as potentially conveying information. Such tracking, however, appears infeasible without requiring extensive per-system monitoring.

### Summary

We have presented a comprehensive procedure to detect stealthy communication that an adversary transmits via DNS queries. Our detection is rooted in establishing principled bounds on the information content of entire query streams. Our approach combines careful encoding and filtering stages with the use of lossless compression, providing guarantees that we never underestimate information content, regardless of the specific encoding(s) an attacker employs.

We demonstrated that our procedure detects conventional tunnels that encode information in query names, as well as previously unexplored tunnels that repeatedly query names from a fixed alphabet, vary query types, or embed information in query timing. We applied our detection procedure to 230 billion lookups from a range of production networks and addressed numerous challenges posed by anomalous-yet-benign DNS query traffic.

In our assessment, we found that for datasets with lookups by individual clients and a threshold of detecting 4 kB/day of exfiltrated data per client and domain, the procedure typically flags about 1–2 events per week for enterprise sites. For a bound of 10 kB, it typically flags 50 per day for extremely aggregated logs at the scale of a national ISP. Within this vast number of lookups, our procedure found 59 confirmed tunnels used for surreptitious communication.

### Acknowledgments

We thank Partha Bannerjee, Scott Campbell, Haixin Duan, Robin Sommer, and James Welcher for facilitating some of the data and processing required for this work. We also thank Christian Rossow and the anonymous reviewers for their valuable comments.

This work would not have been possible without the support of IBM’s Open Collaboration Research awards program. Additionally, elements of this work were supported by the U.S. Army Research Office under MURI grant W911NF-09-1-0553 and by the National Science Foundation under grants 1161799, 1223717, and 1237265. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the sponsors.

### References

[1] BORDERS, K., AND PRAKASH, A. Towards Quantification of Network-Based Information Leaks via HTTP. In Proceedings of the 3rd USENIX Workshop on Hot Topics in Security (2008), USENIX Association.

[2] BORDERS, K., AND PRAKASH, A. Quantifying Information Leaks in Outbound Web Traffic. In Proceedings of the IEEE Symposium on Security and Privacy (2009), USENIX Association.

[3] BORN, K., AND GUSTAFSON, D. Detecting DNS Tunnels Using Character Frequency Analysis. In Proceedings of the 9th Annual Security Conference (2010).

[4] BROMBERGER, S. DNS as a Covert Channel Within Protected Networks. http://energy.gov/sites/prod/files/oeprod/DocumentsandMedia/DNS Exfiltration 2011-01-01 v1.1.pdf, 2011.

[5] BUTLER, P., XU, K., AND YAO, D. Quantitatively Analyzing Stealthy Communication Channels. In Proceedings of International Conference on Applied Cryptography and Network Security (2011).

[6] CABUK, S., BRODLEY, C. E., AND SHIELDS, C. IP Covert Timing Channels: Design and Detection. In Proceedings of the 11th ACM conference on Computer and Communications Security (New York, NY, USA, 2004), CCS '04, ACM, pp. 178–187.

[7] DEMBOUR, O. DNS2tcp. http://www.hsc.fr/ressources/outils/dns2tcp/index.html.en.

[8] DNStunnel. http://www.dnstunnel.de/.

[9] Dynamic Internet Technology. http://www.dit-inc.us/.

[10] EKMAN, E., AND ANDERSSON, B. Iodine, Tunnel IPv4 over DNS. http://code.kryo.se/iodine/, 2011.

[11] GIANVECCHIO, S., AND WANG, H. An Entropy-Based Approach to Detecting Covert Timing Channels. Dependable and Secure Computing, IEEE Transactions on 8, 6 (Nov/Dec. 2011), 785–797.

[12] GIANVECCHIO, S., WANG, H., WIJESEKERA, D., AND JAJODIA, S. Model-Based Covert Timing Channels: Automated Modeling and Evasion. In Proceedings of the 11th international symposium on Recent Advances in Intrusion Detection (Berlin, Heidelberg, 2008), RAID '08, Springer-Verlag, pp. 211–230.

[13] GIL, T. NSTX (IP-over-DNS). http://thomer.com/howtos/nstx.html.

[14] Heyoka. http://heyoka.sourceforge.net/.

[15] KAMINSKY, D. OzyManDNS.

[16] KARASARIDIS, A., MEIER-HELLSTERN, K., AND HOEFLIN, D. Detection of DNS Anomalies Using Flow Data Analysis. In Global Telecommunications Conference (GLOBECOM) (2006).

[17] KREIBICH, C., WEAVER, N., NECHAEV, B., AND PAXSON, V. Netalyzr: Illuminating the Edge Network. In Proceedings of the ACM Internet Measurement Conference (IMC) (Melbourne, Australia, November 2010), pp. 246–259.

[18] MOCKAPETRIS, P. Domain Names—Implementation and Specification. RFC 1035, Internet Engineering Task Force, Nov. 1987.

[19] MOSKOWITZ, I. S., AND KANG, M. H. Covert Channels—Here to Stay? In Proceedings of the Ninth Annual Conference on Computer Assurance (1994), pp. 235–244.

[20] MOZILLA. Public Suffix List. Published online at http://publicsuffix.org/. Last accessed on May 4, 2012.

[21] PAXSON, V. Empirically-Derived Analytic Models of Wide-Area TCP Connections. IEEE/ACM Transactions on Networking 2, 4 (Aug. 1994), 316–336.

[22] RICKS, B. DNS Data Exfiltration Using SQL Injection. http://www.defcon.org/images/defcon-16/dc16-presentations/defcon-16-ricks.pdf, 2008.

[23] SHKARIN, D. PPMd. http://www.compression.ru/ds/ppmdj1.rar, 2006.

[24] Security Information Exchange. http://sie.isc.org/.

[25] tcp-over-dns. http://analogbit.com/software/tcp-over-dns.

[26] VIXIE, P. Extension Mechanisms for DNS (EDNS0). RFC 2671 (Proposed Standard), Aug. 1999.

[27] VIXIE, P., AND DAGON, D. Use of Bit 0x20 in DNS Labels to Improve Transaction Identity. Work in progress, Internet Engineering Task Force, 2008.

[28] Wi-Free. http://wi-free.com/.

[29] YADAV, S., REDDY, A. K. K., REDDY, A. N., AND RANJAN, S. Detecting Algorithmically Generated Malicious Domain Names. In Proceedings of the 10th annual conference on Internet measurement (2010), IMC '10, ACM, pp. 48–61.

### Full Names for Examples

For completeness, Figure 7 lists the full names of various DNS lookups that in the main body of the text we elided portions for readability. Note that for some names, we introduced minor changes for privacy considerations.

### Issues Evaluating the SIE Dataset

The SIE data's extreme volume and qualitatively different nature necessitated several changes to our analysis procedure. Our access to the data was via a Hadoop cluster, requiring coding of our algorithms in the Pig and Scala languages. These provide efficient support for only a subset of the functionality we employed when analyzing the other datasets. A significant difference in this regard was that we were confined to using only gzip for compression; bzip2 and ppmd were not available.

Another important difference concerns the definition of "client." A single large American ISP dominates the SIE data, representing roughly 90% of the traffic. This ISP uses clusters of resolvers to process requests. Thus, a single abstract resolver manifests as multiple "client IP addresses," which we determined come from the same /28 address prefix. Therefore, we treat query source IP addresses equivalent in their top 28 bits as constituting a single source.

This extreme aggregation leads to significant increases in detections, as we are now measuring the information volume for queries aggregated across potentially hundreds of thousands of clients. One particular increase in benign alerts arises due to popular names with short TTLs (e.g., www.google.com). With so many clients, every popular name becomes immediately refetched whenever its TTL expires, leading to a steady stream of closely-spaced lookups. This very high level of aggregation also generates a large volume of detections for reverse lookups, which we excluded from the SIE analysis, removing about 10% of the queries.

As previously discussed in § 4, the role of the SIE dataset for our evaluation is simply to give us a (huge) target environment in which to validate that we can find actual tunnels. We do not envision our procedure as operationally viable for this environment, nor does such an environment strike us as making sense in terms of conforming with our threat model, which focuses on tightly controlled enterprises, rather than wide-open ISPs.

Given this perspective, to keep our own manual analysis tractable, for SIE we used a detection threshold \( I \) of 10 kB rather than the 4 kB value we use for the other datasets. We also explored the effects of other analysis changes. First, we investigated conducting our analysis on the SIE queries reduced to distinct, sorted names. This transformation removes our opportunity of assessing query name-codebook information vectors but preserves our ability to estimate data conveyed through the query name-content vector—the only type of encoding employed by known DNS tunneling tools. Table 2 shows this version of the SIE data as SIEUNIQ. The reduction in analyst load is quite significant, more than a factor of three.