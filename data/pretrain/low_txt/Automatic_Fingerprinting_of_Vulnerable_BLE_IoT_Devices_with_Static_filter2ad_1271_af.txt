### Leveraging Dynamic UUIDs to Enhance BLE Security

#### 1. Introduction
To mitigate the risk of fingerprinting attacks on Bluetooth Low Energy (BLE) devices, we propose a method that leverages dynamic Universally Unique Identifiers (UUIDs). The window for such an attack is narrow, and our approach ensures that the device's identity remains secure even after the initial connection.

#### 2. Methodology

**2.1. Dynamic UUID Generation**
After the first connection is established (Step 3), a dynamic UUID is generated (Step 4). Given the theoretical possibility of nearly \(2^{128}\) unique UUIDs, a random function can generate a sufficiently random UUID, making it infeasible to brute force. This generation can be performed on the mobile app, device firmware, or cloud server. In our design, we opt for generating the dynamic UUIDs on the app side, as this is more cost-effective and avoids additional energy or network consumption.

**2.2. App-Device Synchronization**
Once the dynamic UUIDs are generated, the next step is to synchronize them between the app and the device (Step 5). The app sends the dynamic UUIDs to the device, which then responds to confirm successful synchronization (Step 6). The device then uses these dynamic UUIDs for future broadcasts and communications, replacing the default, fingerprintable UUIDs. If the dynamic UUIDs are generated on the device or cloud, the synchronization process can be adapted accordingly.

**2.3. Cloud Synchronization**
In typical IoT scenarios, a BLE device often needs to connect with multiple companion apps. To facilitate this, we introduce a cloud synchronization step (Step 7) to store the dynamically generated UUIDs. Multiple apps can share the same dynamic UUIDs stored in the cloud, allowing them to establish connections without regenerating UUIDs each time. This prevents the vulnerability to fingerprinting attacks discussed earlier.

#### 3. Implementation and Deployment
To validate our scheme, we implemented a prototype using a real BLE chip (nRF52-DK). This chip provides programming interfaces to configure UUIDs for advertisement packets, services, characteristics, and descriptors. With less than 500 lines of code in both the mobile app and device firmware, we successfully tested the proposed scheme. Deployment requires software updates for both the mobile apps and device firmware, which aligns with the current IoT software ecosystem.

#### 4. Discussion

**4.1. Limitations and Future Work**
While BleScope has identified numerous vulnerable UUIDs and IoT apps, there are areas for improvement:
- **False Negatives**: Our strict rule for recognizing flawed authentication in mobile apps can lead to false negatives. We aim to develop a more sophisticated approach to accurately identify authentication credentials.
- **Branch Explosion**: Our backward slicing technique may cause branch explosion due to the exhaustive exploration of all possible branches. Future work will address this by improving the algorithm to handle object-oriented programming more efficiently.
- **Fingerprint Precision**: Our scanning experiment only used public service UUIDs from advertisement packets, leading to less precise fingerprinting. Ethical considerations prevent us from reconstructing the hierarchy of UUIDs, but real attackers could still exploit this.

**4.2. Ethical Considerations**
Our experiments were conducted on real IoT devices containing sensitive user information. We never exploited any vulnerabilities and only passively scanned advertised packets to obtain UUIDs. We reported the findings to the Bluetooth SIG and the developers of the vulnerable apps.

#### 5. Related Work
- **IoT Security**: Recent efforts have uncovered various vulnerabilities in BLE devices, including pairing credential leakage, unchanged addresses, unencrypted channels, and memory corruptions. Our research systematically studies a wide range of BLE IoT devices from the perspective of companion mobile apps.
- **Defenses**: There are several defenses against emerging security issues, such as SmartAuth, FlowFence, and BLE-Guardian. BleScope builds on these works by providing more systematic countermeasures.
- **Vulnerability Discovery**: Techniques like taint analysis have been used to uncover vulnerabilities in mobile apps and their associated servers. BleScope complements these efforts by identifying vulnerabilities in both BLE IoT devices and companion mobile apps.

#### 6. Conclusion
BleScope is a tool that fingerprints BLE devices using static UUIDs extracted from companion mobile apps. It also identifies vulnerable apps lacking user authentication. Testing with 18,166 apps from Google Play, BleScope discovered 168,093 UUIDs (13,566 unique) and 1,757 vulnerable apps. In a field test, it discovered 5,822 BLE devices and fingerprinted 94.6% of them, with 7.4% being vulnerable to attacks.

#### 7. Acknowledgments
We thank the anonymous reviewers for their feedback. This research was supported in part by NSF awards 1718084, 1750809, 1834215, and 1834216.

#### 8. References
[1] BLUETOOTH SPECIFICATION Version 4.2. https://www.bluetooth.org/DocMan/handlers/DownloadDoc.ashx?doc_id=286439.
[2] Bluetooth Pairing Part 4: LE SecureConnections. https://www.bluetooth.com/blog/bluetooth-pairing-part-4/.
[3] 16 Bit UUIDs for Members. https://www.bluetooth.com/specifications/assigned-numbers/16-bit-uuids-for-members/.
[4] BLE Advertising Primer. https://www.argenox.com/library/bluetooth-low-energy/ble-advertising-primer/.
[5] BluetoothDevice | Android Developers. https://developer.android.com/reference/android/bluetooth/BluetoothDevice.
[6] GATT Overview | Bluetooth Technology Website. https://developer.android.com/reference/android/bluetooth/BluetoothGatt.
[7] Parani-UD100 Bluetooth 4.0 Class1 USB Adapter. http://www.senanetworks.com/ud100-g03.html.
[8] Soot - a framework for analyzing and transforming java and android applications. http://sable.github.io/soot/.
[9] Omar Alrawi, Chaoshun Zuo, Ruian Duan, Ranjita Kasturi, Zhiqiang Lin, and Brendan Saltaformaggio. 2019. The Betrayal At Cloud City: An Empirical Analysis Of Cloud-Based Mobile Backends. In 28th USENIX Security Symposium (USENIX Security 19).
[10] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014. FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’14). ACM, New York, NY, USA, 259–269. https://doi.org/10.1145/2594291.2594299
[11] Gogul Balakrishnan and Thomas Reps. 2004. Analyzing memory accesses in x86 executables. In International conference on compiler construction. Springer, 5–23.
[12] BlueBorne. 2019. The Attack Vector "BlueBorne" Exposes Almost Every Connected Device. https://armis.com/blueborne/.
[13] Redjem Bouhenguel, Imad Mahgoub, and Mohammad Ilyas. 2008. Bluetooth security in wearable computing applications. In 2008 international symposium on high capacity optical networks and enabling technologies. IEEE, 182–186.
[14] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang Lin, XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang, and Kehuan Zhang. 2018. IoTFuzzer: Discovering Memory Corruptions in IoT Through App-based Fuzzing.. In NDSS.
[15] Brian Cusack, Bryce Antony, Gerard Ward, and Shaunak Mody. 2017. Assessment of security vulnerabilities in wearable devices. (2017).
[16] Britt Cyr, Webb Horn, Daniela Miao, and Michael Specter. 2014. Security analysis of wearable fitness devices (fitbit). Massachusets Institute of Technology (2014), 1.
[17] Aveek K Das, Parth H Pathak, Chen-Nee Chuah, and Prasant Mohapatra. 2016. Uncovering privacy leakage in ble network traffic of wearable fitness trackers. In Proceedings of the 17th International Workshop on Mobile Computing Systems and Applications. ACM, 99–104.
[18] Charalampos Doukas, Ilias Maglogiannis, Vassiliki Koufi, Flora Malamateniou, and George Vassilacopoulos. 2012. Enabling data protection through PKI encryption in IoT m-Health devices. In 2012 IEEE 12th International Conference on Bioinformatics & Bioengineering (BIBE). IEEE, 25–29.
[19] Kassem Fawaz, Kyu-Han Kim, and Kang G Shin. 2016. Protecting Privacy of BLE Device Users. In 25th USENIX Security Symposium (USENIX Security 16). 1205–1221.
[20] Earlence Fernandes, Jaeyeon Jung, and Atul Prakash. 2016. Security analysis of emerging smart home applications. In 2016 IEEE symposium on security and privacy (SP). IEEE, 636–654.
[21] Earlence Fernandes, Justin Paupore, Amir Rahmati, Daniel Simionato, Mauro Conti, and Atul Prakash. 2016. Flowfence: Practical data protection for emerging iot application frameworks. In 25th USENIX Security Symposium (USENIX Security 16). 531–548.
[22] Grant Ho, Derek Leung, Pratyush Mishra, Ashkan Hosseini, Dawn Song, and David Wagner. 2016. Smart locks: Lessons for securing commodity internet of things devices. In Proceedings of the 11th ACM on Asia conference on computer and communications security. ACM, 461–472.
[23] Sławomir Jasek. 2016. Gattacking Bluetooth smart devices. In Black Hat USA Conference.
[24] Arun Cyril Jose and Reza Malekian. 2015. Smart home automation security. SmartCR 5, 4 (2015), 269–285.
[25] Raghavan Komondoor and Susan Horwitz. 2001. Using slicing to identify duplication in source code. In International static analysis symposium. Springer, 40–56.
[26] TAL MELAMED. 2018. An Active Man-in-the-middle Attack On Bluetooth Smart Devices. Safety and Security Studies (2018), 15.
[27] Abner Mendoza and Guofei Gu. 2018. Mobile Application Web API Reconnaissance: Web-to-Mobile Inconsistencies and Vulnerabilities. In Proceedings of the 39th IEEE Symposium on Security and Privacy (SP’18).
[28] William Oliff, Avgoustinos Filippoupolitis, and George Loukas. 2017. Evaluating the impact of malicious spoofing attacks on Bluetooth low energy based occupancy detection systems. In Software Engineering Research, Management and Applications (SERA), 2017 IEEE 15th International Conference on. IEEE, 379–385.
[29] Mike Ryan. 2013. Bluetooth: With Low Energy Comes Low Security. In Proceedings of the 7th USENIX Conference on Offensive Technologies (WOOT’13). USENIX Association, Berkeley, CA, USA, 4–4. http://dl.acm.org/citation.cfm?id=2534748.2534754
[30] Pallavi Sivakumaran and Jorge Blasco. 2018. A Study of the Feasibility of Co-located App Attacks against BLE and a Large-Scale Analysis of the Current Application-Layer Security Landscape.
[31] Pallavi Sivakumaran and Jorge Blasco Alis. 2018. A Low Energy Profile: Analysing Characteristic Security on BLE Peripherals. In Proceedings of the Eighth ACM Conference on Data and Application Security and Privacy. ACM, 152–154.
[32] Da-Zhi Sun, Yi Mu, and Willy Susilo. 2018. Man-in-the-middle attacks on Secure Simple Pairing in Bluetooth standard V5.0 and its countermeasure. Personal and Ubiquitous Computing 22, 1 (2018), 55–67.
[33] Yuan Tian, Nan Zhang, Yueh-Hsun Lin, XiaoFeng Wang, Blase Ur, Xianzheng Guo, and Patrick Tague. 2017. Smartauth: User-centered authorization for the internet of things. In 26th USENIX Security Symposium (USENIX Security 17). 361–378.
[34] Pei Wang, Qinkun Bao, Li Wang, Shuai Wang, Zhaofeng Chen, Tao Wei, and Dinghao Wu. 2018. Software protection on the go: A large-scale empirical study on mobile app obfuscation. In Proceedings of the 40th International Conference on Software Engineering. ACM, 26–36.
[35] Xueqiang Wang, Yuqiong Sun, Susanta Nanda, and XiaoFeng Wang. 2019. Looking from the Mirror: Evaluating IoT Device Security through Mobile Companion Apps. In 28th USENIX Security Symposium (USENIX Security 19). 1151–1167.
[36] Fengguo Wei, Sankardas Roy, Xinming Ou, et al. 2014. Amandroid: A precise and general inter-component data flow analysis framework for security vetting of android apps. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 1329–1341.
[37] Mark Weiser. 1981. Program slicing. In Proceedings of the 5th international conference on Software engineering. IEEE Press, 439–449.
[38] Tae-Hun Woo, Hwa-Ju Jo, Yong-Hwan Lee, and Sung-Young Kim. 2017. Infant Body Temperature Monitoring System using Temperature Change Detection Algorithm. In Proceedings of the 2017 International Conference on Computer Science and Artificial Intelligence. ACM, 270–274.
[39] Bin Yu, Lisheng Xu, and Yongxu Li. 2012. Bluetooth Low Energy (BLE) based mobile electrocardiogram monitoring system. In 2012 IEEE International Conference on Information and Automation. IEEE, 763–767.
[40] Wondimu K Zegeye. 2015. Exploiting Bluetooth low energy pairing vulnerability in telemedicine. In International Telemetering Conference Proceedings. International Foundation for Telemetering.
[41] Qiaoyang Zhang and Zhiyao Liang. 2017. Security analysis of bluetooth low energy based smart wristbands. In Frontiers of Sensors Technologies (ICFST), 2017 2nd International Conference on. IEEE, 421–425.
[42] Chaoshun Zuo, Zhiqiang Lin, and Yinqian Zhang. 2019. Why Does Your Data Leak? Uncovering the Data Leakage in Cloud From Mobile Apps. In Proceedings of the 2019 IEEE Symposium on Security and Privacy. San Francisco, CA.
[43] Chaoshun Zuo, Wubing Wang, Rui Wang, and Zhiqiang Lin. 2016. Automatic Forgery of Cryptographically Consistent Messages to Identify Security Vulnerabilities in Mobile Services. In Proceedings of the 23rd Annual Network and Distributed System Security Symposium (NDSS’16). San Diego, CA.
[44] Chaoshun Zuo, Qingchuan Zhao, and Zhiqiang Lin. 2017. AuthScope: Towards Automatic Discovery of Vulnerable Authorizations in Online Services. In Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS’17). Dallas, TX.