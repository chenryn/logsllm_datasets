---
author: Nick Humrich
category: 观点
comments_data:
- date: '2017-04-26 01:11:11'
  message: "Linux中国的文章排版很出色，但我想了解一下是否存在版权问题？"
  postip: 183.221.23.178
  username: 来自四川成都的 Chrome 58.0|GNU/Linux 用户
- date: '2017-04-26 09:35:22'
  message: Python非常棒！
  postip: 202.107.194.180
  username: 来自浙江杭州的 Chrome 57.0|Windows 10 用户
- date: '2017-04-26 11:15:19'
  message: 对于Python这类依赖解释器运行的程序，在内存有限（约一百余MB）的情况下，如使用yum更新时，会发现磁盘IO显著升高。
  postip: 118.122.120.11
  username: 来自四川成都的 Chrome 57.0|GNU/Linux 用户
- date: '2017-04-26 14:50:06'
  message: 您似乎没有抓住本文的核心观点：效率与瓶颈。应综合考虑当前环境，寻求最优解。
  postip: 180.168.102.86
  username: 来自上海的 Firefox 49.0|Windows 10 用户
- date: '2017-04-26 15:30:18'
  message: 我的专业是C++，但我发现近几年来，在业务效率上多下功夫比过分关注代码局部性能更重要。因此，我也在考虑转向Python或Perl，以快速响应需求并作为便捷工具使用。
  postip: 218.18.171.4
  username: 来自广东深圳的 Chrome 56.0|Windows 7 用户
- date: '2017-04-28 10:04:24'
  message: 手动点赞，但在国内很少有企业会这么想。
  postip: 119.2.6.24
  username: 来自北京的 Chrome 51.0|Windows 7 用户
- date: '2017-04-29 16:11:50'
  message: Python是世界上最好的语言！
  postip: 111.43.240.181
  username: Ghjoker [Firefox 45.0|GNU/Linux]
- date: '2017-08-02 16:39:43'
  message: "我基本同意文章中的这一观点。\r\n然而现实情况是，'最重要的资源'还需依赖其他资源，比如自信。此外，学习Python也需要一定的成本，熟悉其库同样需要投入时间。而有些人可能已经习惯了不太高效的语言，难以转型。"
  postip: 61.133.215.190
  username: 来自宁夏银川的 Chrome 59.0|Windows 7 用户
- date: '2017-09-30 17:17:11'
  message: 你想成为大家的目标吗？
  postip: 114.112.193.30
  username: 来自北京的 Chrome 61.0|Windows 10 用户
- date: '2017-09-30 17:18:36'
  message: 这里是开源社区。
  postip: 114.112.193.30
  username: 来自北京的 Chrome 61.0|Windows 10 用户
count:
  commentnum: 10
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 15412
date: '2017-04-25 11:14:00'
editorchoice: true
excerpt: |
  - 优化最宝贵的资源——你自己，而非计算机。
  - 选择一种能帮助你快速开发的语言/框架/架构，例如Python。不要仅因某些技术的速度快就选用它们。
  - 当遇到性能问题时，请找到瓶颈所在。
  - 瓶颈很可能不是CPU或Python本身。
  - 如果Python成为你的瓶颈（且你已优化了算法），可以考虑转向热门的Cython或C。
  - 尽情享受能够快速完成任务的乐趣。
fromurl: https://medium.com/hacker-daily/yes-python-is-slow-and-i-dont-care-13763980b5a1
id: 8446
islctt: true
largepic: /data/attachment/album/201704/25/111213ojm89mmzzsmappkf.jpg
permalink: /article-8446-1.html
pic: /data/attachment/album/201704/25/111213ojm89mmzzsmappkf.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: |
  - 优化最宝贵的资源——你自己，而非计算机。
  - 选择一种能帮助你快速开发的语言/框架/架构，例如Python。不要仅因某些技术的速度快就选用它们。
  - 当遇到性能问题时，请找到瓶颈所在。
  - 瓶颈很可能不是CPU或Python本身。
  - 如果Python成为你的瓶颈（且你已优化了算法），可以考虑转向热门的Cython或C。
  - 尽情享受能够快速完成任务的乐趣。
tags:
- Python
- 性能
thumb: false
title: Python虽慢，但我无所谓
titlepic: true
translator: zhousiyu325
updated: '2017-04-25 11:14:00'
---

> 为牺牲性能追求生产率而呐喊

![](/data/attachment/album/201704/25/111213ojm89mmzzsmappkf.jpg)

让我从关于Python标准库asyncio的讨论中稍作休息，谈谈我最近一直在思考的一个话题：Python的速度。对于那些不熟悉我的人来说，我是一个Python的忠实粉丝，并在我能想到的所有地方积极使用它。人们对Python最大的抱怨之一就是它的速度较慢，有些人甚至因为这一点拒绝尝试使用Python。以下是我认为你应该尝试使用Python的原因，尽管它确实有些慢。

### 速度不再重要

在过去，程序运行时间很长，CPU和内存都很昂贵。程序的执行时间是一个关键指标。计算机及其运行所需的电力都非常昂贵。对这些资源进行优化遵循了一个永恒的商业法则：

> 优化你最宝贵的资源。

过去，最宝贵的资源是计算机的运行时间。这就是为什么计算机科学致力于研究不同算法的效率。然而，这已经不再是正确的，因为现在的硅芯片非常便宜。运行时间不再是您最宝贵的资源。公司最宝贵的资源现在是员工的时间——也就是你。完成任务比加快速度更为重要。实际上，这一点非常重要，以至于我要再次强调：

> 完成任务比快速完成任务更为重要。

您可能会说：“我的公司非常重视速度，我们开发的Web应用程序要求所有响应时间必须少于x毫秒。” 或者，“我们失去了客户，因为他们认为我们的应用运行太慢。” 我并不是说速度完全不重要，而是说速度不再是最重要的因素；它不再是您最宝贵的资源。

### 速度并非唯一重要的东西

当您在编程背景下谈论“速度”时，通常是指性能，即CPU周期。当您的CEO在编程背景下谈论“速度”时，他指的是业务速度，最关键的指标是产品上市时间。基本上，您的产品/Web应用程序的速度并不重要。它是用什么语言编写的也不重要。甚至花费多少成本也不重要。最终决定公司生存与否的是产品的上市时间。不仅是在创业公司的环境中——你需要多长时间才能开始赚钱，还包括从想法到交付给客户的时间。企业要想生存下来，唯一的办法就是比竞争对手更快地创新。如果在您的产品上市之前，竞争对手已经提前上市，那么无论您有多少好的创意都无关紧要。您必须第一个上市，或者至少保持同步。一旦放慢脚步，你就输了。

> 企业要想生存下来，唯一的办法就是比竞争对手更快地创新。

#### 微服务案例

像Amazon、Google和Netflix这样的公司明白快速前进的重要性。他们创建了一套业务系统，可以迅速推进和快速创新。微服务是他们解决问题的方案。这篇文章不讨论是否应该使用微服务，但至少要理解为什么这些大公司认为他们应该使用微服务。

微服务本质上很慢。微服务的主要概念是通过网络调用来打破边界。这意味着你将函数调用（几个CPU周期）转变为一个网络调用。没有什么比这更影响性能了。与CPU相比，网络调用非常慢。但这些大公司仍然选择了微服务。我知道的架构中没有比微服务更慢的了。微服务的最大缺点是性能，但最大的优点是上市时间。通过在较小的项目和代码库上建立团队，公司能够以更快的速度迭代和创新。这恰恰表明，即使是大型公司也非常重视上市时间，而不仅仅是初创公司。

#### CPU不是你的瓶颈

如果您正在编写一个网络应用程序，例如Web服务器，很可能的情况是，CPU时间并不是您的程序的瓶颈。当您的Web服务器处理请求时，可能会进行几次网络调用，例如到数据库或缓存服务器（如Redis）。虽然这些服务本身可能很快，但对它们的网络调用却非常慢。[这里有一篇很好的博客文章](https://blog.codinghorror.com/the-infinite-space-between-words/)，讲述了特定操作的速度差异。在这篇文章中，作者将CPU周期时间缩放到更容易理解的人类时间。假设一个单独的CPU周期相当于**1秒**，那么从加利福尼亚到纽约的网络调用将相当于**4年**。这就说明了网络调用是多么慢。粗略估计，我们可以假设在同一数据中心内的普通网络调用大约需要3毫秒。这相当于我们“人类比例”的**3个月**。现在假设您的程序是高CPU密集型的，需要100,000个CPU周期来响应单次调用。这相当于刚刚超过**1天**。现在假设您使用的是一种慢5倍的语言，这将需要大约**5天**。很好，将那与我们3个月的网络调用时间相比，4天的差异就显得并不重要了。如果有人为了一个包裹不得不至少等待3个月，我不认为额外的4天对他们来说真的很重要。

上面所说的终极意思是，尽管Python速度慢，但这并不重要。语言的速度（或CPU时间）几乎从来不是问题。事实上，谷歌曾经就此概念进行过研究，并[发表了一篇论文](https://static.googleusercontent.com/media/research.google.com/en//archive/sawzall-sciprog.pdf)。该论文讨论了设计高吞吐量系统的要点。在结论中，他们提到：

> 在高吞吐量环境中使用解释性语言似乎是矛盾的，但我们发现CPU时间几乎不是限制因素；语言的表达性意味着大多数程序是源代码，并且它们的大部分时间花在I/O读写和本地运行时代码上。此外，解释性语言在语言层面的轻松实验以及允许我们在许多机器上探索分布式计算方法方面非常有帮助。

再次强调：

> CPU时间几乎不是限制因素。