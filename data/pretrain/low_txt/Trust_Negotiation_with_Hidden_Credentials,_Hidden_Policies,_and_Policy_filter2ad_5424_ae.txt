### Comparison with Existing Trust Negotiation Schemes

In traditional trust negotiation schemes, a resource (e.g., a service, a credential, or a policy) is revealed and delivered to the other party once the policy for the source has been satisfied. In contrast, our framework ensures that neither the credentials nor the policies are disclosed to the other party, even when the policies for the resource and the credentials are met. Additionally, all intermediate results of the negotiation remain unknown to each participant. This approach provides superior privacy protection compared to existing schemes.

### Recent Work on Cryptographic Protocols for Trust Negotiation

Recent research in using cryptographic protocols for trust negotiation includes hidden credentials [17, 6, 14], secret handshakes [2], oblivious signature-based envelopes [20], oblivious attribute certificates [18, 19], and policy-based cryptography [1]. In these protocols, Alice possesses private credentials (or attribute values), and Bob has a policy (which may or may not be private). The goal is to determine whether Alice's credentials satisfy Bob's policy. While these protocols are generally useful and can be integrated into trust negotiation systems as valuable building blocks, none of them address the SCALP problem, where Alice's credentials are not protected by any of her policies. Therefore, our work significantly differs from these approaches.

### Relation to Secure Function Evaluation (SFE)

Our problem is closely related to Secure Function Evaluation (SFE) [31, 16, 15]. In SFE, Alice has an input \( x \), Bob has an input \( y \), and both want to compute \( f(x, y) \), where \( f \) is known to both. General constructions have been developed to solve any SFE problem [31, 16, 8]. Our paper employs two-party SFE techniques, but it is not a straightforward application because:
1. We had to propose a suitable overall strategy for the negotiation (i.e., what "overall global function" to compute).
2. In standard SFE problems, neither party's inputs are certified, whereas in our problem, some inputs are verified offline by a third party (Alice and Bob input their credentials issued by a Certificate Authority (CA) rather than directly providing their attributes to the protocol). Verifying the credentials using general SFE solutions is computationally expensive.

### Conclusion

In this paper, we present an efficient protocol for Alice and Bob to negotiate trust without revealing each other's credentials and policies. The only information they learn is whether trust can be established, or in other words, whether Alice is eligible for Bob's service or resource. Our work extends the state-of-the-art in privacy-preserving trust negotiations. The technical details of our work include independent results of interest, such as a secure protocol for an equality test for array elements.

### References

[1] W. Bagga and R. Molva. Policy-based cryptography and applications. In Proceedings of the 9th International Conference on Financial Cryptography and Data Security, Feb. 2005.
[2] D. Balfanz, G. Durfee, N. Shankar, D. Smetters, J. Staddon, and H.-C. Wong. Secret handshakes from pairing-based key agreements. In Proceedings of the IEEE Symposium on Security and Privacy, pages 180–196, May 2003.
[3] M. Blaze, J. Feigenbaum, and J. Lacy. Decentralized trust management. In Proceedings of the 1996 IEEE Symposium on Security and Privacy, pages 164–173. IEEE Computer Society Press, May 1996.
[4] P. Bonatti and P. Samarati. Regulating service access and information release on the web. In Proceedings of the 7th ACM Conference on Computer and Communications Security (CCS-7), pages 134–143. ACM Press, Nov. 2000.
[5] D. Boneh and M. Franklin. Identity-Based Encryption from the Weil Pairing. In Proceedings of Crypto 2001, volume 2139 of Lecture Notes in Computer Science, pages 213–229. Springer, 2001.
[6] R. Bradshaw, J. Holt, and K. Seamons. Concealing complex policies with hidden credentials. In Proceedings of 11th ACM Conference on Computer and Communications Security, Oct. 2004.
[7] R. Canetti. Security and composition of multiparty cryptographic protocols. Journal of Cryptology, 13(1):143–202, 2000.
[8] R. Canetti, Y. Ishai, R. Kumar, M. K. Reiter, R. Rubinfeld, and R. N. Wright. Selective private function evaluation with applications to private statistics. In Proceedings of the twentieth annual ACM symposium on Principles of distributed computing, pages 293–304. ACM Press, 2001.
[9] C. Cocks. An identity based encryption scheme based on quadratic residues. In 8th IMA International Conference on Cryptography and Coding, volume 2260, pages 360–363. Springer, Dec. 2001.
[10] I. Damgård and M. Jurik. A generalisation, a simplification and some applications of Paillier’s probabilistic public-key system. In PKC '01: Proceedings of the 4th International Workshop on Practice and Theory in Public Key Cryptography, pages 119–136. Springer, 2001.
[11] I. Damgård and M. Jurik. A length-flexible threshold cryptosystem with applications. In Proceedings of the 8th Australasian Conference on Information Security and Privacy, volume 2727 of Lecture Notes in Computer Science, pages 350–364. Springer, 2003.
[12] C. Ellison, B. Frantz, B. Lampson, R. Rivest, B. Thomas, and T. Ylonen. SPKI certificate theory. IETF RFC 2693, Sept. 1999.
[13] M. J. Freedman, K. Nissim, and B. Pinkas. Efficient private matching and set intersection. In Advances in Cryptology: EUROCRYPT '04, volume 3027 of Lecture Notes in Computer Science, pages 1–19. Springer, 2004.
[14] K. B. Frikken, M. J. Atallah, and J. Li. Hidden access control policies with hidden credentials. In Proceedings of the 3rd ACM Workshop on Privacy in the Electronic Society, Oct. 2004.
[15] O. Goldreich. The Foundations of Cryptography — Volume 2. Cambridge University Press, May 2004.
[16] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game. In Proceedings of the nineteenth annual ACM conference on Theory of computing, pages 218–229, May 1987.
[17] J. E. Holt, R. W. Bradshaw, K. E. Seamons, and H. Orman. Hidden credentials. In Proceedings of the 2nd ACM Workshop on Privacy in the Electronic Society, Oct. 2003.
[18] J. Li and N. Li. OACerts: Oblivious attribute certificates. In Proceedings of the 3rd Conference on Applied Cryptography and Network Security (ACNS), volume 3531 of Lecture Notes in Computer Science. Springer, June 2005.
[19] J. Li and N. Li. Policy-hiding access control in open environment. In Proceedings of the 24nd ACM Symposium on Principles of Distributed Computing (PODC). ACM Press, July 2005.
[20] N. Li, W. Du, and D. Boneh. Oblivious signature-based envelope. In Proceedings of the 22nd ACM Symposium on Principles of Distributed Computing (PODC). ACM Press, July 2003.
[21] N. Li, J. C. Mitchell, and W. H. Winsborough. Design of a role-based trust management framework. In Proceedings of the 2002 IEEE Symposium on Security and Privacy, pages 114–130. IEEE Computer Society Press, May 2002.
[22] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay – secure two-party computation system. In Proceedings of the 13th USENIX Security Symposium, pages 287–302. USENIX, 2004.
[23] T. Okamoto, S. Uchiyama, and E. Fujisaki. EPOC: Efficient probabilistic public-key encryption. In IEEE P1363: Protocols from other families of public-key algorithms, Nov. 1998.
[24] P. Paillier. Public-key cryptosystems based on composite degree residuosity classes. In Advances in Cryptology: EUROCRYPT '99, volume 1592 of Lecture Notes in Computer Science, pages 223–238. Springer, 1999.
[25] K. E. Seamons, M. Winslett, and T. Yu. Limiting the disclosure of access control policies during automated trust negotiation. In Proceedings of the Symposium on Network and Distributed System Security (NDSS'01), February 2001.
[26] A. Shamir. Identity-based cryptosystems and signature schemes. In Advances in Cryptology: CRYPTO '84, volume 196 of Lecture Notes in Computer Science, pages 47–53. Springer, 1984.
[27] L. G. Valiant. Universal circuits (preliminary report). In STOC '76: Proceedings of the eighth annual ACM symposium on Theory of computing, pages 196–203, New York, NY, USA, 1976. ACM Press.
[28] W. H. Winsborough and N. Li. Towards practical automated trust negotiation. In Proceedings of the Third International Workshop on Policies for Distributed Systems and Networks (Policy 2002), pages 92–103. IEEE Computer Society Press, June 2002.
[29] W. H. Winsborough and N. Li. Safety in automated trust negotiation. In Proceedings of the IEEE Symposium on Security and Privacy, pages 147–160, May 2004.
[30] W. H. Winsborough, K. E. Seamons, and V. E. Jones. Automated trust negotiation. In DARPA Information Survivability Conference and Exposition, volume I, pages 88–102. IEEE Press, Jan. 2000.
[31] A. C. Yao. How to generate and exchange secrets. In Proceedings of the 27th IEEE Symposium on Foundations of Computer Science, pages 162–167. IEEE Computer Society Press, 1986.
[32] T. Yu, X. Ma, and M. Winslett. PRUNES: An efficient and complete strategy for trust negotiation over the internet. In Proceedings of the 7th ACM Conference on Computer and Communications Security (CCS-7), pages 210–219. ACM Press, Nov. 2000.
[33] T. Yu and M. Winslett. Unified scheme for resource protection in automated trust negotiation. In Proceedings of IEEE Symposium on Security and Privacy, pages 110–122. IEEE Computer Society Press, May 2003.
[34] T. Yu, M. Winslett, and K. E. Seamons. Interoperable strategies in automated trust negotiation. In Proceedings of the 8th ACM Conference on Computer and Communications Security (CCS-8), pages 146–155. ACM Press, Nov. 2001.

### Appendix A: The Eager Strategy

In this appendix, we review the eager strategy [30]. The goal of the eager strategy is to compute a credential disclosure sequence that contains the requested service. Each negotiator iteratively executes the pseudocode shown in Figure 8. The negotiation succeeds if the requested service \( s \) appears in the output (i.e., \( s \in M \)), and it fails if the size of the credential disclosure sequence does not increment after one round of execution (i.e., \( M = \emptyset \)). Any negotiation using the eager strategy takes at most \( \min(n_S, n_C) \) rounds, where \( n_S \) and \( n_C \) are the sizes of the server's and client's credentials, respectively.

**The Eager Strategy (D, C, P, s)**
- **Inputs:**
  - \( D = \{c_1, \ldots, c_k\} \): the credential disclosure sequence.
  - \( C \): the local credentials of this party.
  - \( P \): the local policies of this party.
  - \( s \): the service to which access was originally requested.
- **Output:**
  - \( M \): the set of new released credentials.
- **Pre-condition:**
  - \( s \) has not been disclosed.
- **Procedure:**
  - \( M = \emptyset \)
  - For each credential \( c \in C \):
    - Let \( c \)'s policy be \( p_c : c \leftarrow \phi_c \)
    - If \( \phi_c(D) = 1 \), then \( M = M \cup \{c\} \)
  - \( M = M - D \)
  - Return \( M \)

**Figure 8. Pseudocode for the Eager Strategy**

**Example 2:**
Suppose the client and server have the following policies:

**Client:**
- \( p_{c1} : c_1 \leftarrow s_1 \)
- \( p_{c2} : c_2 \leftarrow s_2 \land s_3 \)
- \( p_{c3} : c_3 \leftarrow s_1 \lor s_2 \)
- \( p_{c4} : c_4 \leftarrow \text{true} \)

**Server:**
- \( p_s : s \leftarrow c_5 \lor (c_2 \land c_4) \)
- \( p_{s1} : s_1 \leftarrow c_4 \)
- \( p_{s2} : s_2 \leftarrow c_1 \)
- \( p_{s3} : s_3 \leftarrow \text{true} \)

Here, \( s \) denotes the server's service, \(\{s, s_1, s_2, s_3\}\) denote the set of server's credentials, and \(\{c_1, c_2, c_3, c_4\}\) denote the set of the client's credentials. Using the eager strategy, the client begins by revealing credential \( c_4 \) because its policy is always true. The server then discloses \( s_3 \) (which can be revealed freely) and \( s_1 \) (which requires the earlier receipt of \( c_4 \)). The exchange of credentials continues until the final disclosure sequence is \(\{c_4, s_1, s_3, c_1, c_3, s_2, c_2, s\}\). Note that all policies for disclosed credentials have been satisfied.

### Appendix B: Protocol for Blinded Policy Evaluation

**Figure 9. Blinded Policy Evaluation Protocol**

1. **Alice's Step:**
   - Alice constructs a circuit \( C \) that computes her policy using the \( r_i \) values as inputs and has an output wire with two encodings: \( t_1 \) for true and \( t_0 \) for false.
   - She sends the encodings of the circuit's gates to Bob (note that he already has input encodings).

2. **Bob's Step:**
   - Bob evaluates the circuit and learns the encoding for the output wire.

The protocol for Blinded Policy Evaluation uses a circuit to evaluate the policy, revealing the topology of the circuit to the evaluator. However, one can build a topology that covers a large class of functions, including:
1. Constructing an oblivious comparison circuit (i.e., one that can compute \( =, \neq, >, <, \geq, \leq \) without revealing which comparison is done) with size proportional to the number of bits in the values.
2. Using a binary tree of oblivious gates (with inputs \( a_1, \ldots, a_n \)) to compute many useful functions, such as:
   - \( \bigvee_{i=1}^n a_i \)
   - \( \bigwedge_{i=1}^n a_i \)
   - For any subset of the values \( S \), \( \bigvee_{i \in S} a_i \)
   - \( \bigwedge_{i \in S} a_i \)
   - Other functions like: for a subset \( S_1 \) of the first half of the values and another subset \( S_2 \) of the second half of the values, the function \( \bigvee_{i \in S_1} a_i \land \bigvee_{i \in S_2} a_i \).