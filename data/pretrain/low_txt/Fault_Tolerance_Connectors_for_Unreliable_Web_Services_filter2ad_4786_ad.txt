### Experiment Setup and Methodology

In this experiment, we focus exclusively on service crashes. We utilized three Web Service (WS) replicas, each with a different failure rate. Crash faults were introduced at various frequencies: 25%, 33%, and 50% of the total number of requests processed, to trigger the recovery procedure. The experiment concludes when there are no more WS replicas available under the passive replication and "Active Replication" strategies, or when fewer than two WS replicas remain under the "VotingReplication" strategy. The system is re-initialized for each experiment.

It is important to note that the results obtained are influenced by several factors, including the type of targeted service, the size of messages processed by the connector, the number of replicas used, the frequency of failures, the size of the state transferred, and the number of clients simultaneously using the same connector. For instance, in this test case, the size of the state to be transferred was approximately 5.0 Kbytes.

### Discussion and Related Work

Dependability is a critical issue in the deployment of Service-Oriented Architectures (SOAs) in critical domains [13]. The approach proposed in this paper aims to create more reliable applications from unreliable Web Services. This method complements other works because connectors are essentially Web Services that provide additional fault tolerance features to the target WS. Their WSDL document is an extension of the original one, with their implementation performing fault tolerance actions and delegating functional aspects to the original WS. This approach provides a separation of concerns, allowing the non-functional behavior of the target WS to be adapted to application needs.

Indirection is a conventional method for achieving fault tolerance, adapted here to the SOA context. A significant contribution of this work is the consideration of connectors as real WS, enhanced with fault tolerance features. The handling of service state is strongly related to the WS implementation. As in previous works, serialization features (save and restore operations) must be provided by the target WS to perform state recovery. The LogBasedReplication approach, however, offers a way to circumvent state issues for some services by managing input request journals transparently through the connectors. It is also worth noting that many WS are stateless (e.g., Google and MSN search services).

Many current works are based on composition languages like BPEL to implement recovery [14, 15] and other standards (e.g., [16]). BPEL is a standard means for orchestration and enabling collaboration between services. However, this is not always straightforward because developers may not have precise knowledge of the non-functional properties of the services included in the composition. Our work complements this approach by allowing the use of enhanced versions of unreliable services through connectors. Our connectors simplify the implementation and maintenance of service compositions in two ways:

- **Monitoring and Detection:** Connectors can more easily detect services that do not match the expected behavior at runtime.
- **Transparent Dependability Improvement:** Connectors give users the opportunity to improve the dependability of Web Services transparently.

Improving the reliability of individual WS relies on implementing fault tolerance mechanisms on the server side. This is often done in an ad-hoc manner, such as passive and active replication in FT-SOAP [17] and FTWeb [18], respectively. An active replication strategy with voting has also been implemented in Thema [19] and [20]. In [20], the vote is achieved on the client side. In both cases, state management is performed on the server side, and WS replicas are developed by the same WS provider. A generic framework in Java was recently proposed to provide the provider with customizable primary/backup strategies for Web Services [21]. These solutions are primarily aimed at improving the WS implementation from the provider's perspective. Our work differs in that it does not focus on individual WS dependability. Based on existing WS, our approach enables the development of external fault tolerance features to make the target WS more dependable, possibly using equivalent services. Additionally, works like WS-Reliability [16] can be used in the IWSD platform to implement reliable communications between connectors and between connectors and WS replicas.

The approach concerning the equivalence of services is currently a first step but shows promise. For stateful services, the management and transfer of the WS state to an equivalent service is another important challenge. To address this, a protocol such as WSRF (Web Services Resource Framework) [22] enables the state to be described as XML datasheets, simplifying the implementation of save/restore operations.

### Conclusion

The concept of Service-Oriented Architecture (SOA) brings the notion of large-scale applications to reality, but the Internet as a backbone introduces multiple sources of faults. The benefits of this approach include making applications as dynamic as possible by leveraging individual useful services from the Internet. This novel situation must be considered in terms of dependability, especially as more critical domains adopt SOA. Traditional solutions to make individual WS platforms reliable are insufficient. Techniques are needed to build reliable SOAs from unreliable Web Services.

The work proposed in this paper enables designers of SOA-based applications to improve the reliability of individual Web Services using WS connectors dedicated to fault tolerance. Connectors provide a separation of concerns between clients (SOA developers) and WS providers. The WSDL of the connector can then be used instead of the original one. Identical services can be found on the Web (i.e., developed with the same WSDL), but more importantly, similar services exist. The WSDL document may differ, but the service semantics are similar. Abstract services can be used to take advantage of the Internet's resource redundancy.

The various execution models proposed for fault tolerance connectors have been validated through several experiments with real Web Services (about 200). More work is needed with real SOA-based applications to further improve the proposed approach, its tool chain, and support infrastructure.

### Acknowledgements

This work has been partially supported by ReSiST, Network of Excellence of the EC, Resilience and Survivability in IST (n°026764). The authors are also very grateful to the referees for their valuable comments.

### References

[1] C. Labovitz, G. R. Malan, and F. Jahanian, "Internet Routing Instability," ACM SIGCOMM, Computer Communication Review, 27(4), pp. 115-126, 1997.

[2] S. S. Yau and R. C. Cheung, "Design of Self-Checking Software," in Proc. of Int. Conf. on Reliable Software, Los Angeles, CA, USA, IEEE Computer Society Press., 1975.

[3] R. Allen and D. Garlan, "A Formal Basis for Architectural Connection," ACM Transactions on Software Engineering and Methodology, 1997.

[4] R. Chillarege, "Orthogonal Defect Classification," E. M. R. L. Handbook of Software Reliability Engineering, McGraw-Hill, Ed., 1995.

[5] N. Salatge and J.-C. Fabre, "DeWeL: a language support for fault tolerance in service-oriented architectures," International Workshop on Engineering of Fault Tolerant Systems (EFTS'2006), Luxembourg, June 2006.

[6] N. Aghdaie and Y. Tamir, "Client-Transparent Fault-Tolerant Web Service," 20th IEEE Int. Performance, Computing, & Communications Conf., pp. 209-216, 2001.

[7] D. L. McGuinness and F. v. Harmelen., "Web Ontology Language (OWL) Overview," http://www.w3.org/TR/owl-features/, W3C Recommendation., February 2004.

[8] D. Martin, M. Burstein, O. Lassila, M. Paolucci, T. Payne, and S. McIlraith, "Describing Web Services Using OWL-S and WSDL," October 2003.

[9] T. U. Xiang Gao, T. U. Jian Yang, and T. U. Mike. P. Papazoglou, "The Capability Matching of Web Services," IEEE 4th Inter. Symp. on Multimedia Software Engineering (MSE'02) p. 56, 2002.

[10] S. R. Ponnekanti and A. Fox, "Interoperability Among Independently Evolving Web Services," In ACM/Usenix/IFIP Middleware’04, Toronto (Canada), pp. 331-351, Oct. 2004.

[11] J. Wu and Z. Wu, "Similarity-Based Web Service Matchmaking," IEEE Int. Conf. on Services Computing (SCC'05), Vol-1, pp. 287-294, 2005.

[12] W. C. Recommendation, "XSL Transformations (XSLT)," 16 November 1999.

[13] F. Tartanoglu, V. Issarny, A. Romanovsky, and N. Levy, "Dependability in the Web Services Architecture," In Architecting Dependable Systems. LNCS 2677, June 2003.

[14] A. Gorbenko, V. Kharchenko, P. Popov, and A. Romanovsky, "Dependable Composite Web Services with Components Upgraded Online," in Architecting Dependable Systems ADS III, (R. de Lemos, C. Gacek, A. Romanovsky, Eds.), vol. LNCS 3549, pp. 96-128.

[15] L. Baresi and E. Quintarelli., "Towards Self-Healing Compositions of Services," Proceedings of PRISE'04, First Conference on the PRInciples of Software Engineering, Buenos Aires, Argentina, pp. 11-20, November 2004.

[16] SUN, "Web Services Reliable Messaging TC WS-Reliability," http://www.oasis-open.org/committees/download.php/5155/WS-Reliability-2004-01-26.pdf, 2003.

[17] D. Liang, C.-L. Fang, and C. Chen, "FT-SOAP: A Fault-Tolerant Web Service," Tenth Asia-Pacific Software Engineering Conference, Chiang Mai, Thailand, 2003.

[18] G. T. Santos, L. C. Lung, and C. Montez, "FTWeb: A Fault Tolerant Infrastructure for Web Services," In Proc. of EDOC'2005, the 9th Enterprise Computing Conference 2005.

[19] M. G. Merideth, A. Iyengar, T. Mikalsen, S. Tai, I. Rouvellou, and P. Narasimhan, "Thema: Byzantine-Fault-Tolerant Middleware for Web-Service Applications," in Proc. of IEEE SRDS 2005, pp. 131 - 140, 2005.

[20] N. Looker, M. Munro, and J. Xu, "Increasing Web Service Dependability Through Consensus Voting," 2nd Int. Workshop on Quality Assurance and Testing of Web-Based Applications, COMPSAC, Edinburgh, Scotland, July 2005.

[21] X. Zhang, M. Hiltunen, K. Marzullo, and R. Schlichting, "Customizable Service State Durability for Service-Oriented Architectures," In Proceedings of the Sixth European Dependable Computing Conference, 2006.

[22] T. Banks, "Web Services Resource Framework (WSRF) – Primer v1.2," Committee Draft 02, OASIS, 23 May 2006.