# Car Infotainment Hacking: Methodology and Attack Surface Scenarios

## About the Author
- **Jay Turla (@shipcod3)**
  - Application Security Engineer at Bugcrowd
  - ROOTCON goon
  - Contributor to various security tools
  - Enthusiast of PS4
  - Not the creator of Turla malware
  - Loves to party

## Introduction
Before we dive in, let's start with an inspirational quote.

### Scope and Limitations
- Focus on infotainment system bugs and their attack surfaces.
- No CAN bus hacking.
- Methodologies and security bugs, but not full car takeover (due to infotainment system limitations).
- Inspired by Jason Haddix’s "The Bug Hunter's Methodology."
- Common attack surfaces with known vulnerabilities or proof-of-concept (PoC).

### Common Attack Surfaces
Based on Craig Smith's book, "The Car Hacker’s Handbook," common attack surfaces linked to the infotainment console include:
- Bluetooth
- Wi-Fi
- USB Ports
- SD Card Slots
- CD-ROM / DVD-ROM
- Touchscreen and other inputs
- Audio Jack (potentially)
- Cellular Connection, GPS, etc.

## Bluetooth
### Vulnerabilities
- **Bluetooth Vulnerabilities**: Exploiting known vulnerabilities.
- **Bluetooth Jamming**: Disrupting communication.
- **Code Execution**: Potential for code execution, though no PoC has been seen for infotainment systems yet.
- **Default Pairing Numbers**: "0000," "1111," "1234."
- **Format String Vulnerabilities**: Can lead to application crashes or bricking of the device.
- **Memory Corruption**: Sending malformed packages to the head unit.

### Case Study: Format String Vulnerabilities
- **Example**: Some Bluetooth stacks can be crashed using format string specifiers in a device name, address book name, or song title.
- **CVE-2017-9212**: A researcher from IOActive renamed his device with format string specifiers and connected it via Bluetooth to a BMW 330i 2011, causing the system to crash.
- **Warning**: Bricks the system; test at your own risk.
- **Potential Outcomes**: Access to the desktop environment or debug options.

### Payloads to Try
- Use format string specifiers like `%x` or `%c` in device names, contact names, or song titles.

## Wi-Fi
### Attacks
- **Wi-Fi Deauthentication Attacks**: Disrupting network connections.
- **Firmware Updates**: Sniffing traffic or replacing firmware with malicious versions.
- **Network Services**: Using Nmap to identify services like FTP, Telnet, SSH.
- **Insecure Transmission of Credentials**: Weak passwords for Telnet and FTP.
- **No Authentication Required**: Netcat can be used to access these services.
- **Exploits for These Services**: Brute-forcing credentials and finding default passwords.

### Case Study: Wi-Fi Services
- **Volkswagen and Audi**: Daan Keuper and Thijs Alkemade from Computest gained root access to the IVI system. [Report](https://www.computest.nl/wp-content/uploads/2018/04/connected-car-rapport.pdf)
- **DS5 1955 Limited Edition**: Ian Tabor accessed the IVI system over TCP port 23 (telnet) without authentication.

### Default Passwords
- **Mazda**:
  - jci : root
  - root : jci
  - user : jci

## USB
### Attacks
- **Installing Apps or Malicious Apps**: Modifying the infotainment system.
- **Firmware Update via USB**: Updating the firmware with malicious versions.
- **Remote Code Execution**: Exploiting the USB stack.
- **Killer USB**: Devices that destroy files.
- **USB-to-Ethernet Adapters**: Providing an IP address to the device.

### Case Study: Mazda
- **Modding and Installing Apps**: Owners of Mazda cars have been using MZD-AIO-TI (MZD All In One Tweaks Installer) since 2014.
- **Data Extraction**: Using tools to pull data from the CMU. [Reference](https://github.com/shipcod3/mazda_getInfo/blob/master/cmu_pull_up_details/CMU%20data%20pull%20tool%20instructions.pdf)
- **PoC**: [GitHub Repository](https://github.com/shipcod3/mazda_getInfo/)

### Research
- **Keen Security Lab**: Found local code execution via USB through an update.

## SD Card Slot & CD-ROM / DVD-ROM
### Attacks
- **Loading Malicious Files**: Similar to USB attacks, loading malicious files via SD card or CD/DVD.

### Case Study: Mazda
- **Deploying Apps via SD Card**: Using the known cmu bug. [Reference](https://github.com/flyandi/mazda-custom-application-sdk)

## Touch Screen / Interface
### Attacks
- **Wi-Fi Connection**: Establishing an IP address.
- **Overflow Attacks**: Causing buffer overflows by interacting with the interface.

### Example
- **Picture**: From the author's uncle.

## GSM, Cellular Connection, Phone App to Car, etc.
### Attacks
- **Mobile App Testing**: Analyzing apps that connect to the car.
- **Intercepted URLs**: Testing intercepted URLs. [Reference](https://www.troyhunt.com/controlling-vehicle-features-of-nissan/)
- **Eavesdropping**: Monitoring connections.
- **Reverse Engineering**: Extracting API keys from the app.

## Responsible Disclosure & Bug Bounty Programs
- **Fiat Chrysler Automobiles**: [Bugcrowd](https://bugcrowd.com/fca)
- **Tesla Motors**: [Bugcrowd](https://bugcrowd.com/tesla)
- **General Motors**: [HackerOne](https://hackerone.com/gm)

## Video Demo
- As requested, a video demo is available.

## References
- **The Car Hacker’s Handbook by Craig Smith**: [Link](http://opengarages.org/handbook/ebook)
- **Memes from Google**
- **OpenMZDC Wiki**: [Getting Started](http://openmzdc.wikia.com/wiki/Getting_started)
- **Mazda Tweaks**: [Website](https://mazdatweaks.com/)
- **Volkswagen and Audi Cars Vulnerable to Remote Hacking**: [Report](https://www.computest.nl/wp-content/uploads/2018/04/connected-car-rapport.pdf)
- **Bleeping Computer Article**: [Link](https://www.bleepingcomputer.com/news/security/volkswagen-and-audi-cars-vulnerable-to-remote-hacking/)
- **Mintynet**: [Website](https://www.mintynet.com/)
- **GitHub Repository for Mazda Info**: [Link](https://github.com/shipcod3/mazda_getInfo/)
- **KeenLab Security Assessment of BMW Cars**: [PDF](https://keenlab.tencent.com/en/Experimental_Security_Assessment_of_BMW_Cars_by_KeenLab.pdf)
- **Awesome Vehicle Security GitHub Repository**: [Link](https://github.com/jaredthecoder/awesome-vehicle-security)