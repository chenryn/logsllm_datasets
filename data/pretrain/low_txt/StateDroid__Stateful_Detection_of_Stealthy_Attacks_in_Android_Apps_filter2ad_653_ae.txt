### Comparison of AsDroid and StateDroid

AsDroid identifies four intents or actions, while StateDroid can detect an additional ten actions. Specifically, AsDroid detects the `SendSMS` action in seven samples, whereas StateDroid reports it in eight samples. The extra detection by StateDroid is due to the implementation of the `onClick()` method in ZSone malware, which AsDroid does not report. Both tools detect the `PhoneCall` action in two samples. StateDroid reports information leakage warnings in 36 samples, while AsDroid reports them in 43 samples. The higher number in AsDroid is attributed to its reporting of a warning upon detecting the presence of an `HttpAccess` action API (e.g., `URL.openConnection()`) invoked from a non-UI callback method.

### Comparison with FlowDroid and Dexteroid

We also compared StateDroid with FlowDroid [7] and Dexteroid [30] using 49 samples. Both FlowDroid and Dexteroid represent traditional control-flow and data-flow detection models. FlowDroid, Dexteroid, and StateDroid reported 28, 112, and 114 warnings, respectively. Manual verification revealed that all FlowDroid warnings were true positives and were part of Dexteroid’s 112 warnings. However, we found 11 false positives in Dexteroid's output, leaving 101 true warnings. StateDroid identified six new attacks that obtain private data from sensitive databases using multiple API calls on various objects. Neither Dexteroid nor FlowDroid detected these newly discovered warnings. It is important to note that FlowDroid and Dexteroid are limited to detecting information leakage attacks and cannot identify many other stealthy attacks that StateDroid can, as shown in Table 2.

### Performance of StateDroid

All experiments were conducted on an AMD Phonom II quad-core processor running Ubuntu 14.04 OS with 16 GB of memory. The maximum time for StateDroid to complete the analysis of an app was 1,770 seconds, and the minimum time was 120 seconds. On average, StateDroid took 214 seconds. Most of this time (195 seconds) was consumed by the API Call Detector, which handles heavy-duty tasks such as decompiling the app to bytecode, deriving callback sequences, retrieving reverse-post-order traversal of each method, analyzing bytecode instructions, storing and retrieving objects with lookup table entries, detecting API calls, and sending API call events to the Action Detector. The Action Detector took 13 seconds to process API-call events and state transitions, and broadcast action events to the Attack Detector. The Attack Detector took 6 seconds to process state transitions in ASMs and detect attacks. Optimizing StateDroid for better performance is planned for future work.

### Related Work

#### Security Analysis via FSM

Finite State Machines (FSM) provide a useful computational model for representing complex security events. The effectiveness of FSM-based security analysis depends on accurately representing domain-specific security problems as sets of states and transitions. Previous FSM-based approaches have primarily been used for network environments and desktop-based operating systems. StateDroid advances the use of FSM in Android security analysis. For example, WebSTAT [54] models multi-step web server attacks in terms of states and transitions. Sheyner et al. [48] use FSM to automatically construct attack graphs in networked environments. Shuo et al. [12] present a data-driven FSM model to reason about software vulnerabilities. Michael et al. [37] construct an FSM to detect anomalies in host-based intrusion detection systems (IDS). Lorenzo et al. [34] manually create a layered FSM model to represent Windows malware behaviors. However, most previous work suffers from the manual construction of FSM models. StateDroid bridges this gap through Horn-clause verification.

#### Android Malicious Behavior Detection

To our knowledge, StateDroid is the first stateful detection model to detect multi-action sequence-based malicious behaviors in Android applications. Most existing work [10, 29, 49] focuses on detecting individual actions. Sufatrio et al. [49] represent malicious behavioral actions as patterns of security-sensitive operations (or APIs), and their static analyzer detects trivial actions like aborting notifications. AsDroid [29] uses the contradiction between implemented app actions and user expectations to detect stealthy behaviors. It relies on API-based detection of six actions, such as starting a phone call, sending SMS, and inserting data into sensitive databases (all of which are modeled and detected by StateDroid). AsDroid then analyzes UI components to detect mismatched or stealthy app behaviors. Pegasus [10] incorporates model checking to verify the existence or absence of various temporal properties of an Android application. It abstracts an app as a Permission Event Graph (PEG) and verifies app-dependent and app-independent properties. For the former, Pegasus requires source code and prior knowledge of the application behavior, while the latter are simple actions like reading an IMEI.

There is extensive work on detecting privacy leaks in Android apps. Static taint analysis frameworks such as FlowDroid [7] and Dexteroid [30], which detect information leakage attacks, are discussed in detail in Section 3.2. DroidSafe [27] performs precise static taint analysis to detect information flows based on analysis stubs and accurate modeling of the Android runtime environment. AGRIGENTO [15] discovers privacy leaks by performing differential analysis on the network traffic of Android apps. CHEX [32] defines app splits as the app functionality reachable from an entry point and performs data flow analysis on different orderings of app splits to detect component hijacking vulnerabilities.

### Discussion

StateDroid shares limitations common to other static analyzers. It may miss some attacks where input values are not available in the bytecode or cannot be obtained statically. For example, if malware involves dynamically-available operations like decrypting data, loading classes, and computing data, StateDroid may not recognize them. The dataset of attacks and actions used in StateDroid is helpful for detecting specified malicious behaviors in Android apps but may not be comprehensive enough to detect all actions and attacks. We plan to implement more actions and attack state machines to address this issue. Additionally, Android provides many overloaded APIs to achieve the same functionality (e.g., the `Intent` class has six constructors), and the API Call Detector may not include all available APIs to detect actions. This can be resolved by incorporating missed APIs from the Android documentation. Furthermore, StateDroid does not handle inter-component communication (ICC) analysis, which we plan to include in the framework using ICC mapping output from the Epicc tool [41].

### Conclusion

Cyber-criminals are motivated to prolong the lifetime of Android malware by hiding malicious behaviors to avoid suspicion. To achieve stealth, quiet malware attacks typically involve multiple actions in a specific order. These heterogeneous characteristics make automatic detection of stealthy behavior challenging. This paper proposes a two-layer, attack-action-driven finite state machine model to reason about stealthy attacks in Android applications. We present novel techniques to automatically construct accurate detection models using Horn-clause verification and formal reasoning. We have developed StateDroid as an open-source static analysis framework. Our large-scale and comparative evaluation demonstrates that StateDroid is a compelling formal methods solution for Android security analysis.

### Acknowledgments

We thank the anonymous reviewers of ACSAC 2018 for their valuable feedback. Jiang Ming was supported by the UT System STARs Program.

### References

[1] 2016. Cotagio Mobile Malware Dump. http://contagiominidump.blogspot.com. (July 2016).

[2] Last reviewed, 03/09/2018. VirusTotal - Free Online Virus, Malware and URL Scanner. www.virustotal.com. (Last reviewed, 03/09/2018).

[3] Android Developers. Last reviewed, 03/09/2018. Application Fundamentals. https://developer.android.com/guide/components/fundamentals.html. (Last reviewed, 03/09/2018).

[4] Android Developers. Last reviewed, 03/09/2018. Starting an Activity. http://developer.android.com/training/basics/activity-lifecycle/starting.html. (Last reviewed, 03/09/2018).

[5] Nicoló Andronio, Stefano Zanero, and Federico Maggi. 2015. HelDroid: Dissecting and Detecting Mobile Ransomware. In Proceedings of the 18th International Symposium on Research in Attacks, Intrusions, and Defenses (RAID’15).

[6] Steven Arzt and Eric Bodden. 2016. StubDroid: Automatic Inference of Precise Data-Flow Summaries for the Android Framework. In Proceedings of the 38th International Conference on Software Engineering (ICSE’16).

[7] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014. FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI’14).

[8] Nikolaj Bjørner, Arie Gurfinkel, Ken McMillan, and Andrey Rybalchenko. 2015. Horn Clause Solvers for Program Verification. Springer International Publishing, 24–51.

[9] Daniel Brand and Pitro Zafiropulo. 1983. On Communicating Finite-State Machines. J. ACM 30, 2 (1983), 323–342.

[10] Kevin Zhijie Chen, Noah Johnson, Shuaifu Dai, Kyle Macnamara, Tom Magrino, Edward Wu, Martin Rinard, and Dawn Song. 2013. Contextual Policy Enforcement in Android Applications with Permission Event Graphs. In Proceedings of the 20th Annual Network and Distributed System Security Symposium (NDSS’13).

[11] Michael Chen and Kunle Olukotun. 2002. Targeting Dynamic Compilation for Embedded Environments. In Proceedings of the 2nd Java Virtual Machine Research and Technology Symposium.

[12] Shuo Chen, Zbigniew Kalbarczyk, Jun Xu, and Ravishankar K. Iyer. 2003. A data-driven finite state machine model for analyzing security vulnerabilities. In Processings of the 2003 International Conference on Dependable Systems and Networks (DSN’03).

[13] T S Chow. 1978. Testing Software Design Modeled by Finite-State Machines. IEEE Transactions on Software Engineering 4, 3 (1978), 178–187.

[14] Catalin Cimpanu. 2017. Android Ransomware Asks Victims to Speak Unlock Code. https://www.bleepingcomputer.com/news/security/android-ransomware-asks-victims-to-speak-unlock-code/. (February 2017).

[15] Andrea Continella, Yanick Fratantonio, Martina Lindorfer, Alessandro Puccetti, Ali Zand, Christopher Kruegel, and Giovanni Vigna. 2017. Obfuscation-Resilient Privacy Leak Detection for Mobile Apps Through Differential Analysis. In Proceedings of the 24th Annual Network and Distributed System Security Symposium (NDSS’17).

[16] James C. Corbett, Matthew B. Dwyer, John Hatcliff, Shawn Laubach, Corina S. Păsăreanu Robby, and Hongjun Zheng. 2000. Bandera: Extracting Finite-State Models from Java Source Code. In Proceedings of the 22nd International Conference on Software Engineering (ICSE’00).

[17] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. 2009. Introduction to Algorithms, Third Edition.

[18] Anthony Desnos. Last reviewed, 03/09/2018. Android Malware List. https://code.google.com/archive/p/androguard/wikis/DatabaseAndroidMalwares.wiki. (Last reviewed, 03/09/2018).

[19] Anthony Desnos and Geoffroy Gueguen. 2011. Android: From Reversing to Decompilation. In Black Hat Abu Dhabi.

[20] Hitesh Dharmdasani. 2014. Android.HeHe: Malware Now Disconnects Phone Calls. FireEye Threat Research Blog Posts. (2014).

[21] William Enck, Peter Gilbert, Byung-Gon Chun, Landon P. Cox, Jaeyeon Jung, Patrick McDaniel, and Anmol N. Sheth. 2010. TaintDroid: An Information-flow Tracking System for Realtime Privacy Monitoring on Smartphones. In Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation (OSDI’10).

[22] William Enck, Damien Octeau, Patrick McDaniel, and Swarat Chaudhuri. 2011. A Study of Android Application Security. In Proceedings of the 20th USENIX Conference on Security.

[23] Yu Feng, Saswat Anand, Isil Dillig, and Alex Aiken. 2014. Apposcopy: Semantics-based Detection of Android Malware Through Static Analysis. In Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE’14).

[24] Susumu Fujiwara, Gregor v. Bochmann, Ferhat Khendek, Mokhtar Amalou, and Abderrazak Ghedamsi. 1991. Test selection based on finite state models. IEEE Transactions on Software Engineering 17, 6 (1991).

[25] Clint Gibler, Jonathan Crussell, Jeremy Erickson, and Hao Chen. 2012. Android-Leaks: Automatically Detecting Potential Privacy Leaks in Android Applications on a Large Scale. In Proceedings of the 5th International Conference on Trust and Trustworthy Computing (TRUST’12).

[26] Hassan Gomaa. 2001. Designing concurrent, distributed, and real-time applications with UML. In Proceedings of the 23rd International Conference on Software Engineering (ICSE’01).

[27] Michael I. Gordon, Deokhwan Kim, Jeff Perkins, Limei Gilham, Nguyen Nguyen, and Martin Rinard. 2015. Information-Flow Analysis of Android Applications in DroidSafe. In Proceedings of the 22nd Annual Network and Distributed System Security Symposium (NDSS’15).

[28] Josh Grunzweig. 2011. NickiSpy.C - Android Malware Analysis & Demo. SpiderLabs Blog. (2011).

[29] Jianjun Huang, Xiangyu Zhang, Lin Tan, Peng Wang, and Bin Liang. 2014. AsDroid: Detecting Stealthy Behaviors in Android Applications by User Interface and Program Behavior Contradiction. In Proceedings of the 36th International Conference on Software Engineering (ICSE’14).

[30] Mohsin Junaid, Donggang Liu, and David Kung. 2016. Dexteroid: Detecting Malicious Behaviors in Android Apps Using Reverse-Engineered Life Cycle Models. Computers & Security 59 (2016), 92 – 117.

[31] Hiroshi Lockheimer. 2012. Android and Security. http://googlemobile.blogspot.com/2012/02/android-and-security.html. (2012).

[32] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and Guofei Jiang. 2012. CHEX: Statically Vetting Android Apps for Component Hijacking Vulnerabilities. In Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS’12).

[33] Davide Maiorca, Davide Ariu, Igino Corona, Marco Aresu, and Giorgio Giacinto. 2015. Stealth Attacks: An Extended Insight into the Obfuscation Effects on Android Malware. Computers & Security 51 (2015), 16 – 31.

[34] Lorenzo Martignoni, Elizabeth Stinson, Matt Fredrikson, Somesh Jha, and John C. Mitchell. 2008. A Layered Architecture for Detecting Malicious Behaviors. In Proceedings of the 10th International Symposium on Recent Advances in Intrusion Detection (RAID’08).

[35] John McCarthy and Patrick J. Hayes. 1969. Some Philosophical Problems from the Standpoint of Artificial Intelligence. In Machine Intelligence 4, B. Meltzer and D. Michie (Eds.). Edinburgh University Press, 463–502.

[36] William McCune. Last reviewed, 08/25/2017. Prover9 is an automated theorem prover for first-order and equational logic, and Mace4 searches for finite models and counterexamples. http://www.cs.unm.edu/~mccune/prover9/. (Last reviewed, 08/25/2017).

[37] C. C. Michael and Anup Ghosh. 2002. Simple, State-based Approaches to Program-based Anomaly Detection. ACM Transactions on Information and System Security (TISSEC’02) (2002).

[38] Rene Millman. 2015. Updated: 97% of Malicious Mobile Malware Targets Android. SC Media UK News. (2015).

[39] Yisroel Mirsky, Asaf Shabtai, Lior Rokach, Bracha Shapira, and Yuval Elovici. 2016. SherLock vs Moriarty: A Smartphone Dataset for Cybersecurity Research. In Proceedings of the 2016 ACM Workshop on Artificial Intelligence and Security (AISec’16).

[40] Jon Oberheide and Charlie Miller. 2012. Dissecting Android’s Bouncer. In SummerCon 2012.

[41] Damien Octeau, Patrick McDaniel, Somesh Jha, Alexandre Bartel, Eric Bodden, Jacques Klein, and Yves Le Traon. 2013. Effective Inter-Component Communication Mapping in Android: An Essential Step Towards Holistic Security Analysis. In Proceedings of the 22nd USENIX Security Symposium (USENIX Security 13).

[42] Vaibhav Rastogi, Yan Chen, and Xuxian Jiang. 2013. DroidChameleon: Evaluating Android Anti-malware Against Transformation Attacks. In Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security (ASIA CCS’13).

[43] IDC Research. 2016. Smartphone OS Market Share, 2016 Q3. http://www.idc.com/prodserv/smartphone-os-market-share.jsp. (2016).

[44] Ethan Rudd, Andras Rozsa, Manuel Gunther, and Terrance Boult. 2016. A Survey of Stealth Malware: Attacks, Mitigation Measures, and Steps Toward Autonomous Open World Solutions. IEEE Communications Surveys & Tutorials PP, 99 (2016).

[45] Stuart Russell and Peter Norvig. 2009. Artificial Intelligence: A Modern Approach (3rd Edition). Pearson.

[46] Kevin Savage, Peter Coogan, and Hon Lau. 2017. The Evolution of Ransomware. Symantec Security Response White Paper. (2017).

[47] Roman Schlegel, Kehuan Zhang, Xiaoyong Zhou, Mehool Intwala, Apu Kapadia, and XiaoFeng Wang. 2011. Soundcomber: A Stealthy and Context-Aware Sound Trojan for Smartphones. In Proceedings of the 18th Annual Network & Distributed System Security Symposium (NDSS’11).

[48] Oleg Sheyner, Joshua Haines, Somesh Jha, Richard Lippmann, and Jeannette M. Wing. 2002. Automated Generation and Analysis of Attack Graphs. In Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P’02).

[49] Sufatrio, Tong-Wei Chua, Darell J. J. Tan, and Vrizlynn L. L. Thing. 2015. Accurate Specification for Robust Detection of Malicious Behavior in Mobile Environments. In Proceedings of the 20th European Symposium on Research in Computer Security (ESORICS’15).

[50] Symantec. 2016. 2016 Internet Security Threat Report. 21 (April 2016).

[51] Kimberly Tam, Ali Feizollah, Nor Badrul Anuar, Rosli Salleh, and Lorenzo Cavallaro. 2017. The Evolution of Android Malware and Android Analysis Techniques. ACM Computing Surveys (CSUR) 49, 4 (2017).

[52] M. H. Van Emden and R. A. Kowalski. 1976. The Semantics of Predicate Logic as a Programming Language. Journal of the ACM (JACM) 23, 4 (1976).

[53] Adarsh Verma. 2017. WannaLocker - A New WannaCry-inspired Ransomware Is Attacking Android Smartphones. https://fossbytes.com/wannalocker-ransomware-wannacry-android/. (June 2017).

[54] Giovanni Vigna, William Robertson, Vishal Kher, and Richard A. Kemmerer. 2003. A Stateful Intrusion Detection System for World-Wide Web Servers. In Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC’03).

[55] Ferdinand Wagner, Ruedi Schmuki, Thomas Wagner, and Peter Wolstenholme. 2006. Modeling Software with Finite State Machines: A Practical Approach. CRC Press.

[56] Pei Wang, Qinkun Bao, Li Wang, Shuai Wang, Zhaofeng Chen, Tao Wei, and Dinghao Wu. 2018. Software Protection on the Go: A Large-Scale Empirical Study on Mobile App Obfuscation. In Proceedings of the 40th International Conference on Software Engineering (ICSE’18).

[57] Wikipedia. Last reviewed, 03/09/2018. WannaCry ransomware attack. https://en.wikipedia.org/wiki/WannaCry_ransomware_attack. (Last reviewed, 03/09/2018).

[58] Lei Xue, Xiapu Luo, Le Yu, Shuai Wang, and Dinghao Wu. 2017. Adaptive Unpacking of Android Apps. In Proceedings of the 39th International Conference on Software Engineering (ICSE’17).

[59] Zhemin Yang, Min Yang, Yuan Zhang, Guofei Gu, Peng Ning, and X. Sean Wang. 2013. AppIntent: Analyzing Sensitive Data Transmission in Android for Privacy Leakage Detection. In Proceedings of the 2013 ACM SIGSAC Conference on Computer and Communications Security (CCS’13).

[60] Zhicheng Zeng. 2014. Android.HeHe Malware Report. Symantec Security Response Posts. (2014).

[61] Yajin Zhou and Xuxian Jiang. 2012. Dissecting Android Malware: Characterization and Evolution. In Proceedings of the 2012 IEEE Symposium on Security and Privacy (S&P’12).