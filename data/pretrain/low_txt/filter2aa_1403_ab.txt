### UI and IMDb App Handling Actions

- **UI Actions Handled by the IMDb App:**
  - `willUpdateShowtimes`
  - `showtimesNoLocationError`

- **Implicit Intents:**
  - **Action:** `willUpdateShowtimes`

### Eavesdropping and Malicious Apps

- **Eavesdropping App:**
  - Sending implicit intents makes communication public.

- **Example Code for Intent Creation:**
  ```java
  Intent i = new Intent();
  i.setClassName("some.pkg.name", "some.pkg.name.TestDestination");
  // or
  Intent i = new Intent();
  i.setAction("my.special.action");
  sendBroadcast(i, "my.special.permission");
  ```

### Broadcast Intents

- **Broadcast Intent:**
  - One-to-many message.
  - Delivered to all components registered to receive them.

- **"Sticky" Broadcast Intents:**
  - Persist after delivery.
  - Re-broadcast to future receivers.
  - Cannot be restricted to a certain set of receivers (cannot require a receiver to have a permission).
  - Accessible to any receiver, including malicious ones.
  - Can compromise sensitive program data.
  - Stay around even after being sent, but anyone with `BROADCAST_STICKY` permission can remove a sticky intent.

- **Requests BROADCAST_STICKY Permission:**
  - Malicious App: Newly connected receiver will be unaware of the change.
  - Sticky broadcasts: Use regular broadcasts protected by receiver permission if possible.
  - Thoroughly scrutinize data in broadcasted messages.

### SD Card Security

- **Files on the SD Card:**
  - World-readable.
  - Stay even after the application that wrote them is uninstalled.
  - Can compromise sensitive program data such as passwords, location, SMS, etc.

- **Examples:**
  - Skype for Android: Exposes name, phone number, chat logs, and more.
  - Citibank iPhone app: "Accidentally" saved account numbers, bill payments, and security access codes in a secret file.
  - iPhone location file: Contains information about your location.

### Secure Data Storage

- **Secure Storage Options:**
  - Write to an application’s SQLite database.
  - Write to the device’s internal storage using `Context.MODE_PRIVATE`.
  - Be careful of leaking sensitive data through HTTP connections.
  - When using WebViews, connect to HTTPS when possible.

- **Treat Your Mobile App as You Would a Web App:**
  - Don’t send passwords in the clear.
  - Examples:
    - Twitter: Tweets are sent in the clear.
    - Google Calendar: Calendar traffic is sent in the clear.
    - Facebook: Despite having a fully encrypted traffic option on the web app, the mobile app sends everything in the clear.

### Overprivileged Applications

- **Overprivileged Applications:**
  - Request more permissions than the app actually requires.
  - Violate the principle of least privilege.
  - Any vulnerability may give the attacker that privilege.
  - Users may get accustomed to seeing and accepting unnecessary permission requests from third-party applications.
  - Common causes:
    - Confusing permission names.
    - Testing artifacts.
    - Using delegates.
    - Error propagation through message board advice.
    - Related methods.

### Empirical Results

- **Analyzing Applications Built on Vulnerability Types:**
  - **Intent Spoofing:** 40%
  - **Unauthorized Intent Receipt:** 50%
  - **Overprivileged Applications:** 31%

### Challenges in Analysis

- **Obtaining Application Source Code:**
  - De-dexers available fail to generate valid Java.
  - Many applications are not open source.

- **Coding Conventions:**
  - Callbacks and other implicit control flow are a challenge for traditional static analysis techniques.

- **Documentation:**
  - Google provides little documentation, which is often incomplete or out-of-date.
  - Analysis of overprivileged applications showed that:
    - Android 2.2 documents permission requirements for only 78 out of 1207 API calls.
    - 6 out of 78 are incorrect.
    - 1 of the documented permissions does not exist.

### Vulnerability Identification

- **Of the 7 vulnerabilities presented:**
  - 5 vulnerability categories can currently be identified by Fortify’s SCA tools.
  - 4 vulnerability categories can currently be identified by UC Berkeley’s tools.
  - 6 categories will be integrated into the current tools.

### References

- **Adrienne Porter Felt, David Wagner, UC Berkeley [’11]:** Overprivilege
- **Will Enck, Penn State [’09]:** Information leakage through Broadcast Intents
- **Jesse Burns [’09]:** Other common developers' errors
- **Dan Wallach:** WiFi leaks

### Conclusion

- **Android Security Pitfalls:**
  - Static analysis can help developers avoid these problems.
  - UC Berkeley and Fortify are working to incorporate state-of-the-art static analysis into Fortify’s tools.

### Presentation Title

**Seven Ways to Hang Yourself with Google Android**

- **Presenters:**
  - Yekaterina Tsipenyuk O'Neil, Principal Security Researcher
  - Erika Chin, Ph.D. Student at UC Berkeley