**作者：rep_Su@青藤实验室**

**原文链接：[Windows 计划任务隐藏新姿势分享](https://mp.weixin.qq.com/s/ktGug1VbSpmzh9CEGKbbdw)**

在我们之前的文章中，我们探讨了 [Windows 计划任务的隐藏技巧](https://mp.weixin.qq.com/s/ktGug1VbSpmzh9CEGKbbdw)。许多读者对计划任务的排查方法表现出浓厚兴趣，因此我们撰写了这篇详细的排查教程，希望能够为大家提供帮助。

## 研究背景
在 Windows Server 2012 上使用 `schtasks` 创建计划任务时，我发现当分别使用 `/mo` 和 `/ri` 参数时，计划任务的创建方式有所不同（如下图所示）。然而，在官方文档中并未详细说明这一现象，仅在计划任务管理器中观察到触发器的差异。为了解开这个谜团，我花费了一周左右的时间进行研究，并整理出这篇文章，希望能为 Windows 计划任务的相关问题提供一些见解。

本文中的所有计划任务均通过 **schtasks.exe** 创建。

## 探索原因
为了深入探究这个问题，我在 Windows Server 2012 上对两种启动流程进行了追踪。初步研究表明，随着 Windows 系统的发展，计划任务的启动和创建过程也经历了从旧版到新版的变化。以下是对新旧版本的简要说明。

### 旧版的计划任务
#### 进程启动
通过对计划任务的监控，我发现，在 Windows Server 2012 上，计划任务进程的启动主要依赖于计划任务文件的读取和注册表项配置的访问。当使用参数 `/ri` 时，计划任务进程的创建堆栈如下图所示：

![计划任务进程创建堆栈 (使用 /ri 参数)](image_url)

此时，关键模块是 `schedsvc`，它负责管理计划任务进程的创建。`schedsvc` 会启动回调 job，从队列中捕获并启动计划任务的 job，进而创建计划任务进程。在 `schedsvc.dll` 中，可以看到实际创建的是 `taskeng.exe` 进程，这也解释了为什么此类计划任务的父进程是 `taskeng`。

具体来说，`schedsvc` 负责从计划任务的 job 队列中启动任务，并将任务执行时间写入注册表项 `DynamicInfo`。通过监控 `DynamicInfo` 注册表项及其时间数据的解析，可以确定某个计划任务在何时被执行。而 `taskeng` 则主要负责读取 `\Windows\System32\Tasks` 目录下的计划任务文件，并启动相应的计划任务进程。

当使用 `/mo` 参数时，进程创建的堆栈发生了变化，如下图所示：

![计划任务进程创建堆栈 (使用 /mo 参数)](image_url)

此时，`schedsvc` 模块被替换为 `UBPM` 和 `EventAggregation`。`UBPM` 是自 Windows 7 和 Windows Server 2008 R2 引入的一种新的调度引擎，负责捕获称为 Trigger 的信号。当 Trigger 到达时，便会执行对应的 TriggerActions 启动计划任务进程。`EventAggregation` 则是一个用户态库，负责处理、通知及分发计划任务事件。

在 Windows Server 2012 上，根据 UBPM 的代码逻辑，计划任务进程启动时会在 `\Windows\System32\LogFiles\Scm` 文件夹生成对应的任务 ID 服务日志文件，并记录计划任务的报告信息，包括执行时间（UTC 时间）。

#### 计划任务的创建
对于 `/ri` 和 `/mo` 参数，计划任务的创建过程大致相同。在 Windows Server 2012 上，关键模块 `schedsvc` 在创建过程中会执行以下操作：
- 获取 task 文件夹的安全描述符进行权限检查
- 读取注册表项中的关键信息
- 创建计划任务文件
- 设置注册表中各子项的值

`schedsvc` 主要负责获取相关计划任务的安全权限并进行检查，随后读取关键注册表项 `TaskCache\Tasks\{ID}` 并创建计划任务文件，最后将注册表的各对应子项写入计划任务的相关内容。

### 现代的计划任务
在较新的 Windows 版本（如 Windows 10 19042.685）中，计划任务的执行流程已经发生了显著变化。无论使用 `/mo` 还是 `/ri` 参数创建计划任务，其执行流程都统一由 UBPM 管理，与 Windows Server 2012 上的略有不同，如下图所示：

![现代计划任务进程创建堆栈](image_url)

可以看到，UBPM 在 Trigger 到达后会处理进程，但多了一层封装。经过分析，此处 `handle` 函数的参数 `a3` 是一个 `UBPM_TRIGGER_CONSUMER_BLOCK` 结构体，此结构体会作为参数传递到后续的处理函数中。

希望以上内容能为大家理解和排查 Windows 计划任务提供一些帮助。如有任何问题或建议，欢迎留言讨论。