### Android Security and Vulnerability Exploration

#### Overview of Android Security
Android security involves multiple stakeholders, including developers, applications, the Android system, vendors, and end-users. A comprehensive overview of Android security is provided in [29], with Stowaway [32] mapping APIs to their required permissions. The security implications of vendor customizations are explored in [15], [53], and [58]. Previous studies have also examined third-party ad libraries [35], [40], [45], [49], [56], user involvement [33], [41], and the app installation process [18] on Android. While these studies provide valuable insights, none have specifically addressed the security risks associated with the app uninstallation process.

#### Android Vulnerability Research
Another area of research focuses on uncovering vulnerabilities within the Android system and apps. Luo et al. [43] demonstrate attacks on Android’s WebView component, while Wang et al. [52] identify unauthorized origin-crossing attacks in popular Android apps. Zhou et al. [59] study the prevalence of content provider vulnerabilities. Other studies [24], [36] exploit unguarded public interfaces in vulnerable Android apps to launch attacks. Recent studies [26], [38] examine cryptographic misuse in Android apps. These vulnerabilities often result from developers' misconfigurations or misunderstandings of Android's security features. In contrast, our research identifies a data residue vulnerability that arises directly from Android system services, necessitating a framework-level solution.

#### System-Level Vulnerabilities
Previous studies have also revealed several flaws in the Android system. For example, a vulnerability in the Android upgrade process allows malicious apps to escalate their privileges [54]. Additionally, permission revocation issues during app uninstallation have been discussed in [31], [34], [48], and [50]. Exploits targeting the Android Clipboard can grant attackers access to sensitive user data [30], [57]. These vulnerabilities are linked to specific Android system services, such as the PackageManager and Clipboard services. However, the data residue vulnerability affects a broader range of system services.

#### Static and Dynamic Analysis Tools
To understand the scope of these vulnerabilities, several static analysis frameworks for Android have been proposed, including AndroGuard [3], CHEX [42], FlowDroid [16], and Epicc [44]. Most of these tools are built upon WALA [14] or SOOT [12] but are customized to model specific system behaviors. These tools primarily operate at the app level and do not meet our needs for examining framework-level code. In our work, AndroGuard is used to identify potential targets on Google Play. Dynamic analysis is also widely used to understand app behavior [39], [46], [47]. Our verification experiments rely on various triggering conditions, such as device reboot, app installation, and uninstallation, which are challenging to fully automate using dynamic analysis. Despite these challenges, an automated detection system would be beneficial for eliminating all instances of data residue, which is a separate research problem.

#### Android Security Enhancements
Several architectures have been proposed to enhance Android security. SEAndroid [51] and FlaskDroid [20] build on SELinux in the kernel to develop flexible Mandatory Access Control (MAC) frameworks for Android. With MAC support, stricter and more system-wide policies can be enforced to restrict data access. TaintDroid [27] applies system-wide dynamic taint tracking and analysis to monitor the flow of sensitive information. AppFence [37] builds on TaintDroid to deny unnecessary data requests and block communications leading to privacy leaks. Other security frameworks, such as ScanDroid [11], Aurasium [55], XMandDroid [19], DroidChecker [21], PScount [17], and WoodPecker [36], aim to protect user privacy or restrict app privileges. Common techniques include statically modeling and dynamically monitoring suspicious app behaviors. However, the data residue vulnerability allows newly installed apps to access data, making data-access operations appear legitimate. The challenge is to identify all data creation functions and correctly mark the data with the associated app. This data can come directly from apps or be dynamically constructed within system services, complicating the tainting strategy. We plan to explore the possibility of applying MAC policies and framework-level static/dynamic analysis to address the data residue problem in future work.

### Conclusions and Future Work
In this project, we made the first step towards understanding the security implications of the app uninstallation process by systematically examining the data cleanup logic within 122 Android system services. Our study uncovered 12 data residue instances, 11 of which were found to be exploitable, leading to severe damage. We demonstrated the feasibility of data residue attacks against real apps, which can be distributed through existing app markets. To mitigate this threat, clear guidelines should be provided to Android framework developers regarding data cleanup during app uninstallation. Further efforts are needed to design a generic solution for preserving the uniqueness of attributes used by the Android framework to save sensitive resources. One approach is to generalize the practice of using a combination of package name and developer key to uniquely associate app data between mobile and wear devices. Other approaches, such as taint analysis and mandatory access control policies, can also be applied to defeat data residue attacks. We will pursue these ideas in our future work.

### Acknowledgments
We would like to thank our shepherd, William Enck, and our anonymous reviewers for their insightful comments. This project was supported in part by the NSF grant 1318814. Xiao Zhang and Yousra Aafer thank Samsung Research America for supporting this project during their internships.

### References
[1] AccountManager Changelog. https://goo.gl/oD2qXt.
[2] ADAL Android SDK. https://goo.gl/uJGzAU.
[3] AndroGuard. http://code.google.com/p/androguard/.
[4] AndroidCentral Poll. http://goo.gl/nl5z6y.
[5] App Genome Report. https://goo.gl/eGszpB.
[6] AppBrain Statistic on Android Apps. http://goo.gl/CyDYNc.
[7] Demo of the Paper. https://sites.google.com/site/droidnotsecure/.
[8]
[9]
[10] Localytics on App Retention. http://goo.gl/NWRCGL.
[11] SCanDroid. http://spruce.cs.ucr.edu/SCanDroid/.
[12] Soot. http://sable.github.io/soot/.
[13] Statista Report. http://goo.gl/kkwLW9.
[14] WALA. http://wala.sourceforge.net/.
[15] Y. Aafer, N. Zhang, Z. Zhang, X. Zhang, K. Chen, X. Wang, X. Zhou, W. Du, and M. Grace. Hare hunting in the wild android: A study on the threat of hanging attribute references. In Proceedings of the 22Nd ACM SIGSAC Conference on Computer and Communications Security, CCS ’15, New York, NY, USA, 2015.
[16] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI ’14, New York, NY, USA, 2014.
[17] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie. Pscout: Analyzing the android permission specification. In Proceedings of the 2012 ACM Conference on Computer and Communications Security, CCS ’12, New York, NY, USA, 2012.
[18] D. Barrera, J. Clark, D. McCarney, and P. C. van Oorschot. Understanding and improving app installation security mechanisms through empirical analysis of android. In Proceedings of the Second ACM Workshop on Security and Privacy in Smartphones and Mobile Devices, SPSM ’12, New York, NY, USA, 2012.
[19] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, and A.-R. Sadeghi. Xmandroid: A new android evolution to mitigate privilege escalation attacks. Technical report, Technische Universitt Darmstadt, 2011.
[20] S. Bugiel, S. Heuser, and A.-R. Sadeghi. Flexible and fine-grained mandatory access control on android for diverse security and privacy policies. In Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13), Washington, D.C., 2013.
[21] P. P. Chan, L. C. Hui, and S. M. Yiu. Droidchecker: Analyzing android applications for capability leak. In Proceedings of the Fifth ACM Conference on Security and Privacy in Wireless and Mobile Networks, WISEC ’12, New York, NY, USA, 2012.
[22] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing inter-application communication in android. In Proceedings of the 9th International Conference on Mobile Systems, Applications, and Services, MobiSys ’11, New York, NY, USA, 2011.
[23] M. Conti, V. T. N. Nguyen, and B. Crispo. Crepe: Context-related policy enforcement for android. In Proceedings of the 13th International Conference on Information Security, ISC’10, Berlin, Heidelberg, 2011.
[24] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Privilege escalation attacks on android. In Proceedings of the 13th International Conference on Information Security, ISC’10, Berlin, Heidelberg, 2011.
[25] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach. Quire: Lightweight provenance for smart phone operating systems. In 20th USENIX Security Symposium, San Francisco, CA, Aug. 2011.
[26] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel. An empirical study of cryptographic misuse in android applications. In Proceedings of the 2013 ACM SIGSAC Conference on Computer and Communications Security, CCS ’13, New York, NY, USA, 2013.
[27] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. Taintdroid: An information-flow tracking system for realtime privacy monitoring on smartphones. In Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation, OSDI’10, Berkeley, CA, USA, 2010.
[28] W. Enck, M. Ongtang, and P. McDaniel. On lightweight mobile phone application certification. In Proceedings of the 16th ACM Conference on Computer and Communications Security, CCS ’09, New York, NY, USA, 2009.
[29] W. Enck, M. Ongtang, and P. McDaniel. Understanding android security. Security & Privacy, IEEE, 7(1), Jan 2009.
[30] S. Fahl, M. Harbach, M. Oltrogge, T. Muders, and M. Smith. Hey, you, get off of my clipboard. In In proceeding of 17th International Conference on Financial Cryptography and Data Security, 2013.
[31] Z. Fang, W. Han, and Y. Li. Permission based android security: Issues and countermeasures. Computers & Security, 2014.
[32] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android permissions demystified. In Proceedings of the 18th ACM Conference on Computer and Communications Security, CCS ’11, New York, NY, USA, 2011.
[33] A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wagner. Android permissions: User attention, comprehension, and behavior. In Proceedings of the Eighth Symposium on Usable Privacy and Security, SOUPS ’12, New York, NY, USA, 2012.
[34] E. Fragkaki, L. Bauer, L. Jia, and D. Swasey. Modeling and enhancing androids permission system. In Computer Security ESORICS’ 12, volume 7459 of Lecture Notes in Computer Science. 2012.
[35] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi. Unsafe exposure analysis of mobile in-app advertisements. In Proceedings of the Fifth ACM Conference on Security and Privacy in Wireless and Mobile Networks, WISEC ’12, New York, NY, USA, 2012.
[36] M. C. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic detection of capability leaks in stock android smartphones. In 19th Annual Network and Distributed System Security Symposium, NDSS’ 12, San Diego, California, USA, 2012.
[37] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. These aren’t the droids you’re looking for: Retrofitting android to protect data from imperious applications. In Proceedings of the 18th ACM Conference on Computer and Communications Security, CCS ’11, New York, NY, USA, 2011.
[38] S. H. Kim, D. Han, and D. H. Lee. Predictability of android openssl’s pseudo random number generator. In Proceedings of the 2013 ACM SIGSAC Conference on Computer and Communications Security, CCS ’13, New York, NY, USA, 2013.
[39] W. Klieber, L. Flynn, A. Bhosale, L. Jia, and L. Bauer. Android taint flow analysis for app sets. In Proceedings of the 3rd ACM SIGPLAN International Workshop on the State of the Art in Program Analysis, SOAP ’14, New York, NY, USA, 2014.
[40] I. Leontiadis, C. Efstratiou, M. Picone, and C. Mascolo. Don’t kill my ads!: Balancing privacy in an ad-supported mobile application market. In Proceedings of the Twelfth Workshop on Mobile Computing Systems and Applications, HotMobile ’12, New York, NY, USA, 2012.
[41] J. Lin, S. Amini, J. I. Hong, N. Sadeh, J. Lindqvist, and J. Zhang. Expectation and purpose: Understanding users’ mental models of mobile app privacy through crowdsourcing. In Proceedings of the 2012 ACM Conference on Ubiquitous Computing, UbiComp ’12, New York, NY, USA, 2012.
[42] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: Statically vetting android apps for component hijacking vulnerabilities. In Proceedings of the 2012 ACM Conference on Computer and Communications Security, CCS ’12, New York, NY, USA, 2012.
[43] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin. Attacks on webview in the android system. In Proceedings of the 27th Annual Computer Security Applications Conference, ACSAC ’11, New York, NY, USA, 2011.
[44] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein, and Y. Le Traon. Effective inter-component communication mapping in android: An essential step towards holistic security analysis. In Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13), Washington, D.C., 2013.
[45] P. Pearce, A. P. Felt, G. Nunez, and D. Wagner. Addroid: Privilege separation for applications and advertisers in android. In Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security, ASIACCS ’12, New York, NY, USA, 2012.
[46] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna. Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications. In 21st Annual Network and Distributed System Security Symposium, NDSS 14’, San Diego, California, USA, 2014.
[47] V. Rastogi, Y. Chen, and W. Enck. Appsplayground: Automatic security analysis of smartphone applications. In Proceedings of the Third ACM Conference on Data and Application Security and Privacy, CODASPY ’13, New York, NY, USA, 2013.
[48] J. Sellwood and J. Crampton. Sleeping android: The danger of dormant permissions. In Proceedings of the Third ACM Workshop on Security and Privacy in Smartphones & Mobile Devices, SPSM ’13, New York, NY, USA, 2013.
[49] S. Shekhar, M. Dietz, and D. S. Wallach. Adsplit: Separating smartphone advertising from applications. In Proceedings of the 21st USENIX Conference on Security Symposium, Security’12, Berkeley, CA, USA, 2012.
[50] W. Shin, S. Kwak, S. Kiyomoto, K. Fukushima, and T. Tanaka. A small but non-negligible flaw in the android permission scheme. In Proceedings of the 2010 IEEE International Symposium on Policies for Distributed Systems and Networks, POLICY ’10, Washington, DC, USA, 2010.
[51] S. Smalley and R. Craig. Security enhanced (SE) android: Bringing flexible MAC to android. In 20th Annual Network and Distributed System Security Symposium, NDSS 13’, San Diego, California, USA, 2013.
[52] R. Wang, L. Xing, X. Wang, and S. Chen. Unauthorized origin crossing on mobile platforms: Threats and mitigation. In Proceedings of the 2013 ACM SIGSAC Conference on Computer and Communications Security, CCS ’13, New York, NY, USA, 2013.
[53] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The impact of vendor customizations on android security. In Proceedings of the 2013 ACM SIGSAC Conference on Computer and Communications Security, CCS ’13, New York, NY, USA, 2013.
[54] L. Xing, X. Pan, R. Wang, K. Yuan, and X. Wang. Upgrading your android, elevating my malware: Privilege escalation through mobile OS updating. In Proceedings of the 2014 IEEE Symposium on Security and Privacy, SP ’14, Washington, DC, USA, 2014.
[55] R. Xu, H. Saïdi, and R. Anderson. Aurasium: Practical policy enforcement for android applications. In Proceedings of the 21st USENIX Conference on Security Symposium, Security’12, Berkeley, CA, USA, 2012.
[56] X. Zhang, A. Ahlawat, and W. Du. Aframe: Isolating advertisements from mobile applications in android. In Proceedings of the 29th Annual Computer Security Applications Conference, ACSAC ’13, New York, NY, USA, 2013.
[57] X. Zhang and W. Du. Attacks on android clipboard. In S. Dietrich, editor, Detection of Intrusions and Malware, and Vulnerability Assessment, volume 8550 of Lecture Notes in Computer Science. 2014.
[58] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang. The peril of fragmentation: Security hazards in android device driver customizations. In Proceedings of the 2014 IEEE Symposium on Security and Privacy, SP ’14, Washington, DC, USA, 2014.
[59] Y. Zhou and X. Jiang. Detecting passive content leaks and pollution in android applications. In 20th Annual Network and Distributed System Security Symposium, NDSS ’13, San Diego, California, USA, 2013.