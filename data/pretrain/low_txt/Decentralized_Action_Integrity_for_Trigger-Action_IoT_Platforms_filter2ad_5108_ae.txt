### Integration and Evaluation of DTAP with Existing Zapier Platform

We integrated the Decentralized Trigger-Action Platform (DTAP) into the existing Zapier trigger-action platform through its developer platform. We created custom channels that connect to prototype online services, incorporating DTAP support. Our findings indicate that the existing cloud portion of Zapier successfully transfers trigger blobs from the trigger channel to the action channel, and ultimately to the action online service, where the blob is subsequently verified. This demonstrates that trigger-action platforms can maintain their current rule execution and channel creation infrastructure while reaping the benefits of DTAP.

### Implementation and Evaluation

#### DTAP-Client on Android

We implemented DTAP-Client on the Android platform. For enhanced client-side security, DTAP-Client utilizes a hardware-backed keystore, when available, to generate a key for encrypting XTokens before storing them on the filesystem. Such keystores have been present in iOS devices since 2013 [19] and have been supported in Android devices since version 6.0 [34].

#### Python Library for Online Services

We developed a Python library that online service developers can use to add DTAP functionality. The library provides a simple annotation (i.e., Python decorator) that developers can place above sensitive HTTP API methods requiring rule-specific scoping. This annotation automatically invokes the verification procedure (see §V). Using this Python library, we implemented DTAP-Cloud and two online services modeled after existing IFTTT channels: (1) an Amazon Alexa-inspired ToDo list, and (2) an email service. For benchmark measurements, we implemented a skeleton version of IFTTT as our baseline, which uses standard OAuth tokens.

### Microbenchmarks

To quantify the micro-performance factors of DTAP, we created the following rule: "IF new item == 'buy soap' is added to MyToDo List THEN send email(new item)." This rule is representative of typical rules on trigger-action platforms like IFTTT, involving a condition on data from the trigger service and the transfer of trigger service data to an action service function. We deployed DTAP locally, created the example rule, and measured storage overhead, transmission overhead, and developer effort. Our results show that using DTAP imposes negligible overhead: each rule requires an additional 3.5KB of storage and 7.5KB of transmission per execution. Online service developers using our prototype library only need to add a single line of code per HTTP API function, similar to the popular oauthlib library for Python.

**Storage Overhead:**
Using DTAP requires online services to store additional state, including XTokens for each trusted client and fine-grained tokens for each rule. These tokens include additional fields (e.g., time, TTL), imposing a storage overhead. Each DTAP rule creates a 3.5KB overhead in addition to the 0.8KB required to store the XToken, compared to the 0.8KB storage cost for the baseline trigger-action platform. This extra token storage cost is negligible given the low price of storage and the quantity of other user data these systems collect.

**Transmission Overhead:**
Executing a rule on DTAP requires transmitting more data over the network due to additional data in the trigger blob (Figure 6), including time, TTL, and signature. To evaluate the transmission overhead, we computed the transmission size of rule execution in both the baseline and DTAP cases, varying the number of function parameters passed (1-10). Figure 7 presents the overhead for different numbers of function parameters. In our experiments, DTAP created 6-11% overhead, with a maximum transmission overhead of 7.5KB even when using 10 parameters. Variance in results is due to normal network fluctuations such as packet retransmission.

**Developer Effort:**
Developers must add a single additional line of code per function to protect it with DTAP verifications, comparable to the effort required with existing OAuth libraries like oauthlib.

### Macrobenchmarks

We measured end-to-end latency and throughput of rule execution by hosting the DTAP-Cloud and two online services on separate Amazon t2.micro EC2 instances. Our results show a modest 15ms latency increase and a 2.5% throughput drop in the online service compared to the baseline. This does not represent a significant overhead, especially considering the effect of network latency and the lack of real-time requirements in these systems.

**End-to-End Latency:**
We measured the time between the trigger service being activated and the action service issuing a `send_email` call. This includes network latency, the time to generate a signed trigger blob, and the time to verify the trigger blob and action token in the case of DTAP. Our baseline case is a bare trigger-action system, including only network latency and the time to execute the trigger and action functions without any DTAP verification. Figure 8 presents the results, showing a maximum verification overhead of less than 15ms, which is acceptable for typical rules.

**Throughput:**
We measured throughput as the number of rules executed per second under a load of 2000 concurrent HTTP requests. Table III presents our results, averaged over three separate runs, showing that DTAP decreases throughput by only 2.5%.

### Discussion and Limitations

**Transitioning to DTAP:**
Although we facilitate migration to DTAP through an online library, direct transition from legacy systems may be challenging. One approach is the incremental addition of DTAP support using a trusted proxy. This proxy would intercept OAuth and API calls, translating them from DTAP requests into regular requests and vice versa. While this proxy would be overprivileged, it does not increase the risk posed to the online service, as an attack on the proxy is equivalent to an attack on the online service itself.

**DTAP-Client Use:**
In existing trigger-action platforms, users can log in to the IFTTT website and create rules from any client device. However, DTAP requires users to create rules via a trusted client device (e.g., a smartphone), which stores XTokens in a private filesystem. Although our current client prototype does not support transferring client state between devices, building such functionality is straightforward. A possible solution is to provide an export function to save the current client state to a disk image and an import function to load that state into another device.

**Prototype Limitations:**
Currently, DTAP allows a user to use only one trusted client at a time. The protocol itself does not preclude multiple clients, but our prototype does not include state maintenance between different clients of a single user. To support multiple clients, we envision the trusted client providing an option to back up the current state (XTokens, recipes, etc.) to a user's private cloud storage (e.g., Google Drive, Dropbox).

**Client-Device Loss:**
If a client device is lost, existing procedures to erase device data take care of removing OAuth tokens. An "erasure-app" can be built to automatically contact online services and invalidate tokens with cooperation from our modified OAuth helper library.

**XToken Security:**
The XToken is a high-powered credential. Although DTAP reduces its vulnerability to leakage by design, a malicious client can still leak this credential. Such leakage affects only the single user and does not pose a risk for other users of the DTAP platform. Our implementation encrypts XTokens at rest using hardware-backed keystores when available. Further security can be achieved by performing XToken-related operations inside trusted execution environments (e.g., Intel SGX on desktops or ARM TrustZone on phones).

**Data Confidentiality and Privacy:**
Our design reduces the privilege of the DTAP-Cloud, limiting its access to APIs and data needed to run the user’s rules. This is an improvement over the current state-of-the-art, where an attacker can gain wide access to data and devices. However, an attacker can still gain access to sensitive information by passively recording rule execution. A potential solution is to encrypt data passing through the DTAP-Cloud, although this can result in a loss of expressivity. Leveraging advancements in homomorphic encryption for secure integer comparison and rule matching could allow the least-privilege DTAP-Cloud to evaluate predicates on encrypted data.

**Self-Signed Certificates:**
Our current implementation reuses the HTTPS certificates of the online services. To avoid problems associated with key reuse, another implementation is to use self-signed certificates. A trigger service can generate a self-signed certificate and send it along with the XToken to the trusted client. The client can then send that certificate to the action service, which associates it with the rest of the action token parameters. This implementation also avoids privacy issues by obfuscating the identity of the trigger service.

**Formal Verification:**
The DTAP protocol has not been formally verified yet. Future work includes using automated cryptographic protocol verification tools such as ProVerif [14] to verify the security guarantees.

### Related Work

Several studies have investigated IFTTT in recent years, although in different contexts. Ur et al. [46] analyzed IFTTT programs shared by over 100,000 users, providing interesting statistics on the usage of different trigger and action channels. In contrast, our work investigates the long-term security risks of such platforms and introduces the notion of Decentralized Action Integrity to counter these risks. Surbatovich et al. [45] focused on the risks users face due to errors in rule creation or inadvertent chaining of rules. Our work, however, focuses on discovering and addressing the security design deficiencies of platforms like IFTTT. Addressing programming errors is an orthogonal research direction, with tools like TrigGen aiming to avoid errors caused by insufficient triggering conditions [37].