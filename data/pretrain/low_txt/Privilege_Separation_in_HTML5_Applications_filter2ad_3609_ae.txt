### Introduction

Our research explores an alternative line of inquiry into new browser primitives, which has proven to be fruitful. This work demonstrates how we can leverage these advancements by combining deployed primitives, such as temporary origins and Content Security Policy (CSP) [34], to achieve effective privilege separation without requiring any further changes to the platform.

### Previous Work

Carlini et al. [7] examined the effectiveness of privilege separation in the Chrome extension architecture and found that in 4 out of 61 cases, insufficient validation of messages exchanged over the privilege boundary allowed for full privilege escalation, and in 19 cases, it allowed for partial privilege escalation. In our design, we address these issues by ensuring that the parent cannot use incoming messages in a way that leads to code execution. Additionally, we aim to reduce the Trusted Computing Base (TCB) in the privileged component, as shown in Section 5.4.

### Performance Evaluation

#### Event Listeners and API Calls

Figure 5 shows the frequency distribution of event listeners and API calls used by the top 42 extensions requiring the `tabs` permission.

#### Memory Consumption

We measured the memory consumption of the new Document Object Model (DOM) and JavaScript heap created for each iframe. Our results indicate no noticeable increase in memory consumption when creating a new temporary origin iframe.

#### Performance Overhead

**Micro-benchmark:**

To measure the runtime overhead caused by the parent's mediation on privileged APIs, we created a function that measures the total time taken to open and close a tab, which involves four crossings of the privilege boundary. We performed this experiment 100 times with and without privilege separation. The median time with privilege separation was 140ms, compared to 80ms without it, implying an overhead of 15ms per call crossing the sandbox.

**Macro-benchmark:**

We also measured the time required to load an image in the Awesome Screenshot image editor. The editor receives image data from the background page. We took a screenshot of www.google.com and measured the time taken for the image to load in the editor. We repeated the experiment 20 times each for the privilege-separated and original versions. The average (median) time for the image to load was 72.5ms (77.3ms) for the original version and 78.5ms (80.1ms) for the privilege-separated version, resulting in an overhead of 8.2% (3.6%). In our testing, we did not observe any user-perceivable increase in latency after the redesign.

### Related Work

#### Mashup and Advertisement Isolation

The problem of isolating code in web applications, especially in mashups [46, 51] and malicious advertisements [52], has received significant attention. Our work is similar to these efforts in using isolation primitives like iframes. However, we advocate the use of temporary origins, which are now available in most browsers, as a basis for creating an arbitrary number of components.

#### Concurrent Work

Treehouse [53] provides similar properties but relies on isolated web workers with a virtual DOM implementation for backward compatibility. While this approach allows Treehouse to interpose on all DOM events, providing stronger security and resource isolation, it comes at a higher performance cost.

#### Language-based Isolation

Recent work has focused on language-based analysis of web application code, particularly JavaScript, for confinement. IBEX [21] proposes writing extensions in a high-level language (FINE) that can later be analyzed to conform to specific policies. In contrast, our approach does not require developers to learn a new language, maintaining compatibility with existing code. Systems like IBEX are orthogonal to our approach and can be supported on top of our architecture; if necessary, the parent’s policy component can be written in a high-level language and subject to automated analysis.

### Conclusion

Privilege separation is an essential second line of defense. Achieving privilege separation in web applications has been more challenging than on commodity operating systems, primarily due to the Same Origin Policy (SOP). SOP mandates the use of separate origins to isolate multiple components, but creating new origins on the fly incurs a cost. As a result, web applications often bundle disjoint components and run them under one monolithic authority. We propose a new design that uses standardized primitives already available in modern browsers, enabling the partitioning of web applications into an arbitrary number of temporary origins. This design contrasts with previous approaches that advocate redesigning the browser or require the adoption of new languages. Our empirical results show that our new architecture can be applied to widely used HTML5 applications with minimal changes, achieving a drastic reduction in TCB.

### Acknowledgements

We thank Erik Kay, David Wagner, Adrienne Felt, Adrian Mettler, the anonymous reviewers, and our shepherd, William Enck, for their insightful comments. This material is based upon work partially supported by the NSF under the TRUST grant CCF-0424422, by the Air Force Office of Scientific Research (AFOSR) under MURI awards FA9550-09-1-0539 and FA9550-08-1-0352, and by Intel through the ISTC for Secure Computing. The second author is supported by the Symantec Research Labs Graduate Fellowship.

### References

[1] Google Inc., “Google chrome webstore.” https://chrome.google.com/webstore/.

[2] HTTP Archive, “JS Transfer Size and JS Requests.” http://httparchive.org/trends.php#bytesJS&reqJS.

[3] Google Inc., “Chromium os.” http://www.chromium.org/chromium-os.

[4] “Mozilla boot2gecko.” https://wiki.mozilla.org/B2G.

[5] Microsoft, “Metro development,” http://msdn.microsoft.com/en-us/windows/apps/.

[6] H. Wang, A. Moshchuk, and A. Bush, “Convergence of desktop and web applications on a multi-service OS,” in Proceedings of the 4th USENIX conference on Hot topics in security, 2009.

[7] N. Carlini, A. P. Felt, and D. Wagner, “An evaluation of the Google Chrome extension security architecture,” in Proceedings of the 21st USENIX Conference on Security, 2012.

[8] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, “A symbolic execution framework for JavaScript,” in Proceedings of the 2010 IEEE Symposium on Security and Privacy, pp. 513–528.

[9] S. Bandhakavi, S. T. King, P. Madhusudan, and M. Winslett, “Vex: vetting browser extensions for security vulnerabilities,” in Proceedings of the 19th USENIX conference on Security, 2010.

[10] M. Dhawan and V. Ganapathy, “Analyzing information flow in JavaScript-based browser extensions,” in Proceedings of the Computer Security Applications Conference, pp. 382–391, IEEE, 2009.

[11] S. Guarnieri and B. Livshits, “Gatekeeper: mostly static enforcement of security and reliability policies for JavaScript code,” in Usenix Security, 2009.

[12] K. Jayaraman, W. Du, B. Rajagopalan, and S. Chapin, “Escudo: A fine-grained protection model for web browsers,” in Proceedings of the 30th International Conference on Distributed Computing Systems, pp. 231–240, IEEE, 2010.

[24] A. P. Felt, K. Greenwood, and D. Wagner, “The effectiveness of application permissions,” in Proceedings of the 2nd USENIX conference on Web application development, 2011.

[25] K. W. Y. Au, Y. F. Zhou, Z. Huang, P. Gill, and D. Lie, “Short paper: A look at smartphone permission models,” in Proceedings of the 1st ACM workshop on Security and privacy in smartphones and mobile devices, 2011.

[26] A. P. Felt, “Advertising and Android permissions,” Nov 2011. http://www.adrienneporterfelt.com/blog/?p=357.

[13] J. Saltzer and M. Schroeder, “The protection of information in computer systems,” Proceedings of the IEEE, vol. 63, no. 9, pp. 1278–1308, 1975.

[27] Google Inc., “Google chrome extensions: chrome.* apis.” http://code.google.com/chrome/extensions/api_index.html.

[14] “lxc linux containers.” http://lxc.sourceforge.net/.

[15] “Google seccomp sandbox for Linux.” http://code.google.com/p/seccompsandbox/.

[16] N. Provos, “Improving host security with system call policies,” in Proceedings of the 12th USENIX Security Symposium, 2003.

[17] N. Provos, M. Friedl, and P. Honeyman, “Preventing privilege escalation,” in Proceedings of the 12th USENIX Security Symposium, 2003.

[18] D. J. Bernstein, “Some thoughts on security after ten years of qmail 1.0,” in Proceedings of the 2007 ACM workshop on Computer security architecture.

[19] A. Barth, C. Jackson, C. Reis, and T. G. C. Team, “The security architecture of the Chromium browser,” 2008.

[20] E. Y. Chen, J. Bau, C. Reis, A. Barth, and C. Jackson, “App isolation: get the security of multiple browsers with just one,” in Proceedings of the 18th ACM conference on Computer and communications security, pp. 227–238, 2011.

[21] A. Guha, M. Fredrikson, B. Livshits, and N. Swamy, “Verified security for browser extensions,” in Proceedings of the IEEE Symposium on Security and Privacy, pp. 115–130, 2011.

[22] “HTML5 privilege separation: Source code release.” http://github.com/devd/html5privsep.

[23] A. Barth, A. Felt, P. Saxena, and A. Boodman, “Protecting browsers from extension vulnerabilities,” in Proceedings of the 17th Network and Distributed System Security Symposium, 2010.

[28] S. Maffeis, J. C. Mitchell, and A. Taly, “Object capabilities and isolation of untrusted web applications,” in Proceedings of the 2010 IEEE Symposium on Security and Privacy, pp. 125–140.

[29] Google Inc., “Issues: google-caja: A source-to-source translator for securing JavaScript-based content.” http://code.google.com/p/google-caja.

[30] M. Finifter, J. Weinberger, and A. Barth, “Preventing capability leaks in secure JavaScript subsets,” in Proc. of Network and Distributed System Security Symposium, 2010.

[31] G. Tan and J. Croft, “An empirical security study of the native code in the JDK,” in Proceedings of the 17th Usenix Conference on Security, pp. 365–377, 2008.

[32] A. Barth, “RFC 6454: The web origin concept.” http://tools.ietf.org/html/rfc6454.

[33] Bugzilla@Mozilla, “Bug 341604 - (framesand-box) implement HTML5 sandbox attribute for iframes.” https://bugzilla.mozilla.org/show_bug.cgi?id=341604.

[34] B. Sterne and A. Barth, “Content Security Policy: W3C editor’s draft,” 2012. https://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-specification.dev.html.

[35] diigo.com, “Awesome Screenshot: Capture, annotate, share.” http://www.awesomescreenshot.com/.

[50] B. Parno, J. M. McCune, D. Wendlandt, D. G. Andersen, and A. Perrig, “CLAMP: Practical prevention of large-scale data leaks,” in Proceedings of the 30th IEEE Symposium on Security and Privacy, pp. 154–169, 2009.

[51] A. Barth, C. Jackson, and W. Li, “Attacks on JavaScript mashup communication,” in Workshop on Web 2.0 Security and Privacy (W2SP), 2009.

[52] M. T. Louw, K. T. Ganesh, and V. N. Venkatakrishnan, “Adjail: practical enforcement of confidentiality and integrity policies on web advertisements,” in Proceedings of the 19th USENIX conference on Security, 2010.

[53] L. Ingram and M. Walfish, “Treehouse: JavaScript sandboxes to help web developers help themselves,” in Proceedings of the USENIX annual technical conference, 2012.

[54] “AdSafe: Making JavaScript Safe for Advertising.” http://www.adsafe.org/.

[36] Dropbox Inc., “Dropbox developer reference.” http://www.dropbox.com/developers/reference.

[37] “Ace - Ajax.org Cloud9 Editor.” http://ace.ajax.org/.

[38] The Dojo Foundation, “The Dojo Toolkit.” http://dojotoolkit.org/.

[39] GitHub Inc., “Edit like an ace.” https://github.com/blog/905-edit-like-an-ace.

[40] “OAuth.” http://oauth.net/.

[41] D. Brumley and D. Song, “Privtrans: automatically partitioning programs for privilege separation,” in Proceedings of the 13th on USENIX Conference on Security, 2004.

[42] P. Josling, “dropbox-js: A JavaScript library for the Dropbox API.” http://code.google.com/p/dropbox-js/.

[43] A. van Kesteren (Ed.), “Cross-Origin Resource Sharing.” http://www.w3.org/TR/cors/.

[44] “pynarcissus: The Narcissus JavaScript interpreter ported to Python.” http://code.google.com/p/pynarcissus/.

[45] A. Bittau, P. Marchenko, M. Handley, and B. Karp, “Wedge: splitting applications into reduced-privilege compartments,” in Proceedings of the 5th USENIX Symposium on Networked Systems Design and Implementation, pp. 309–322, 2008.

[46] H. J. Wang, X. Fan, J. Howell, and C. Jackson, “Protection and communication abstractions for web browsers in mashups,” SIGOPS Oper. Syst. Rev., vol. 41, pp. 1–16, Oct. 2007.

[47] H. Wang, C. Grier, A. Moshchuk, S. King, P. Choudhury, and H. Venter, “The multi-principal OS construction of the Gazelle web browser,” in Proceedings of the 18th USENIX security symposium, pp. 417–432, 2009.

[48] C. Grier, S. Tang, and S. King, “Designing and implementing the OP and OP2 web browsers,” ACM Transactions on the Web (TWEB), 2011.

[49] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin, “Permission re-delegation: Attacks and defenses,” in Proceedings of the 20th USENIX conference on Security, 2011.