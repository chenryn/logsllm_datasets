# New Techniques for Discovering Smart Device Vulnerabilities

**Author:** Xiaohuihui (小灰灰)  
**Title:** Senior Security Researcher, Baidu Security Lab  
**Date:** 30-May-2019

## About the Author

- **Current Role:** Senior Security Researcher at Baidu Security Lab
- **Research Areas:** IoT security, AI security, and autonomous vehicle security
- **Experience:** Experienced in hardware cracking
- **Previous Responsibilities:**
  - BSRC, incident response, and 0-day vulnerability analysis
  - Security assessments of Baidu products
  - Development of Baidu's security monitoring systems

## Traditional IoT Device Cracking

### Common Steps:
1. **Firmware Download:** Obtain the firmware from the device.
2. **Binwalk Unpacking:** Use Binwalk to unpack the firmware.
3. **Problematic Bin Identification:** Identify problematic binary files.
4. **IDA Analysis:** Analyze the binaries using IDA Pro.
5. **Web Script File Analysis:** Examine web script files (e.g., PHP, CGI).
6. **Vulnerability Verification:** Test vulnerabilities on a real machine or QEMU.

### Challenges with Modern Devices:
- **Diverse IoT Devices:** More than just routers.
- **Security Enhancements:**
  - Firmware is not available for download.
  - Telnet, serial ports, and ADB are often closed.
  - Limited entry points for initial access.

## Understanding the Structure

### Operating Systems and Hardware
- **Full Android and Linux Versions:**
  - ARMv5/6/7/x86 processors
  - EMMC/EMCP/NAND memory
- **OpenWRT Linux:**
  - Microkernel
  - ARM, MIPS processors
  - NAND/SPI Flash memory
- **RTOS (Real-Time Operating Systems):**
  - Microkernel
  - ESP Lexin, Arduino, AVR, STM32 series
  - SPI Flash memory

### Application Scenarios
- **Complex Devices:**
  - Smart Speakers, Smart Watches, Vending Machines, TV Boxes, Smart TVs, Smart Billboards, Vehicle Systems
  - Features: Advanced features, more memory, large screens, app development platforms
- **Simpler Devices:**
  - Routers, Mini Smart Speakers, Smart Cameras
  - Features: Basic functionalities, small or no screens
- **Basic Devices:**
  - Smart Locks, Smart Rice Cookers, Smart Sockets, Smart Lamps, Smart Bracelets
  - Features: Simple functions, network control, limited analog electronics

## Step-by-Step Process

### Step 0: Teardown
- **Objective:** Understand the internal components and potential entry points.
- **Actions:**
  - Identify chip solutions and obtain datasheets.
  - Focus on storage types, interfaces, and communication modules.
  - Online resources for teardowns: iFixit, FCCID.io

### Step 1: Control and Acquisition
- **Objective:** Gain control and acquire necessary data.
- **Methods:**
  - Acquire file system
  - Get shell access for analysis and monitoring
  - Capture and control network data
- **Preparation:**
  - **Firmware Acquisition:**
    - Download from official websites
    - Self-upgrade and packet monitoring
    - Reverse engineer update processes
    - Community and forum support
    - Customer service assistance
    - Physical dump if other methods fail

### Step 2: Analysis
- **Objective:** Combine acquired data to identify and exploit vulnerabilities.
- **Steps:**
  - Monitor and analyze processes using `netstat -tunlp`
  - Look for command injection, buffer overflows, and other vulnerabilities
  - Scan for web vulnerabilities (PHP, CGI, Lua scripts)
  - Reverse engineer critical code and trace network interactions

### Example Cases
- **Vending Machine:**
  - FTP server password leak
  - Unverified payment service
  - Arbitrary firmware updates
- **Smart Watches:**
  - Cloud login key disclosure
  - Configuration modification via MiTM
- **Shared Bicycle Lock:**
  - Encrypted cloud transmission
  - Key extraction and protocol analysis
- **Communication Module:**
  - FTP server command injection

## Essential Skills and Tools

### Skills:
- **Soldering and Desoldering:**
  - Soldering, desoldering, drag soldering, tinning, board washing
- **APK Decompilation and Hooking:**
  - Dynamic debugging, Java code reading
- **Web Attack and Defense:**
  - Source code auditing
- **Programming:**
  - Python, Java
- **Binary Analysis:**
  - TCP, HTTP packet analysis with Wireshark
  - Cross-platform compilation

### Tools:
- **Common Tools:**
  - gdb, tcpdump, telnetd, nmap, masscan
  - Busybox for multiple platforms
- **Commands:**
  - `busybox netstat -tunlp`
  - `busybox telnetd -l /bin/sh &`
  - `tcpdump -i xxx not tcp port xxxx -A`
  - `nmap -sS -PN -T5`

## Q&A

Feel free to ask any questions or seek further clarifications.