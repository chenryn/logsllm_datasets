### Security Flaw in the Proposed Scheme

The proposed scheme in [VB03] contains a flaw, which we identified after extending it based on previous experiences. After receiving the result from the automated theorem prover (ATP), we used an attack generator implemented in Prolog to demonstrate the attack. This involved determining the valuations of message variables, possibly across different protocol sessions.

### Explanation of the Result

In our implementation, the authentication phase of the protocol is not sufficiently bound to the session key exchange and the subsequent steps, such as decrementing the misuse counter and performing the biometric match.

#### Attack Procedure

1. **Initial Execution:**
   - The attacker uses a stolen smart-card to initiate the protocol.
   - The attacker interrupts the execution before the biometric match by, for example, removing the smart-card from the card reader.
   - At this point, the misuse counter is decremented because the biometric authentication was not completed successfully. However, the first misuse counter remains unchanged since the smart-card is legitimate and was authenticated at the host.

2. **Replay Attack:**
   - When the smart-card is removed, it returns to its initial state, except for the saved misuse counter, and is ready for another protocol execution.
   - The attacker can now start another execution of the protocol with the same card.
   - After the authentication phase, the attacker manipulates the communication between the host system and the smart-card reader, cutting off the smart-card from further communication. The attacker then directly communicates with the host system.
   - The attacker aims to perform tests using fake biometric samples to achieve a positive match. To do this, the attacker must handle the messages responsible for the secure update of the misuse counter, convincing the host that it is still communicating with the legitimate card.

3. **Session Key Replay:**
   - The host requests the session key from the smart-card. Although the session key is supposed to be protected with a MAC using the private key shared between the host and the card, and the host correctly checks this, the replay of the session key from the previous session is not prevented.
   - The host performs the decrementation of the session key itself and later checks that the smart-card has stored the decremented key. However, the host must first request the current state of the misuse counter from the smart-card.
   - The attacker can replay the corresponding message from the previous protocol run, sending the default value of the misuse counter to the host. This value is decremented and sent back to the smart-card to be stored.
   - The smart-card is queried to confirm it has stored the decremented value. This check is protected by a MAC, which is correctly verified, but the exact message from the previous run can be reused.
   - The biometric reference data is requested from the smart-card, and the response from the previous run is reused.

4. **Iterative Attack:**
   - The second part of the attack can be repeated arbitrarily many times without decrementing the misuse counter, allowing the attacker to eventually trick the biometric match with an unacceptable probability of success.
   - It is important to note that the attacker does not need to obtain the session key from a previous protocol run. Even after a successful attack, the attacker still does not know the session key. This makes the attack different from traditional session key replay attacks and specific to the misuse counter mechanism in biometric authentication protocols.

### Lessons Learned

- The amount of work required to apply our method depends on how the code was constructed. Our method is most efficient when applied by software developers during the programming phase.
- Applying our approach to legacy systems requires more effort due to the need for a deeper understanding of the software.
- Our method does not suffer from false negatives, provided the user annotations are correct. However, it may produce false positives due to abstractions introduced for efficiency. These false positives can be identified using the Prolog attack generator.

### Related Work

- [CDW04] discusses the use of the model-checker MOPS to detect low-level security properties in Unix-based applications. Compared to our work, their approach focuses on low-level implementation details, while ours targets the secure usage of cryptographic operations.
- [DDMP03] presents a tool for detecting high-risk security-critical functions, which is more general than our approach, which specifically analyzes attacks against certain security requirements.
- [DM03] addresses buffer overflow errors, while our work focuses on design errors in security protocol logic.
- Other approaches, such as [Sch97] and [Wei99], use FOL automated theorem provers for cryptoprotocol analysis, but differ in their focus and methods.

### Conclusion

We have presented an approach using automated theorem provers for first-order logic to analyze the security requirements of C code implementations of cryptographic protocols. Our approach constructs a logical abstraction of the code, which can be used to verify security properties like confidentiality. While our goal is not to provide a fully automated formal verification of C code, our method aims to enhance the understanding of cryptoprotocol implementations. We demonstrated our approach using an industrial-strength biometric authentication protocol, showing that it is applicable with reasonable effort in industrial practice.

### Acknowledgements

We thank Mark Yampolskiy for his assistance in constructing the control flow graphs used in this work.

### References

- [Abs04] AbsInt. 2004. aicall. http://www.aicall.de/
- [CDW04] Hao Chen, Drew Dean, and David Wagner. Model checking one million lines of C code. In NDSS. The Internet Society, 2004.
- [CKY03] E. Clarke, D. Kroening, and K. Yorav. Behavioral consistency of C and Verilog programs using bounded model checking. Technical Report CMU-CS-03-126, School of Computer Science, Carnegie Mellon University, 2003.
- [Coh03] E. Cohen. First-order verification of cryptographic protocols. Journal of Computer Security, 11(2):189–216, 2003.
- [DY83] D. Dolev and A. Yao. On the security of public key protocols. IEEE Transactions on Information Theory, IT-29(2):198–208, 1983.
- [Gol03] D. Gollmann. Facets of security. In C. Priami, editor, Global Computing (GC 2003), volume 2874 of LNCS, pages 192–202. Springer, 2003.
- [Mea91] C. Meadows. A system for the specification and analysis of key management protocols. In IEEE Symposium on Security and Privacy, pages 182–195, 1991.
- [RS98] P. Ryan and S. Schneider. An attack on a recursive authentication protocol. Information Processing Letters, 65:7–10, 1998.
- [Sch97] J. Schumann. Automatic verification of cryptographic protocols with SETHEO. In W. McCune, editor, 14th International Conference on Automated Deduction (CADE-14), volume 1249 of LNCS, pages 87–100. Springer, 1997.
- [sec] seCse tool (webinterface and download). http://www4.in.tum.de/˜secse.
- [SS01] G. Sutcliffe and C. Suttner. The TPTP problem library for automated theorem proving, 2001. Available at http://www.tptp.org.
- [SW00] G. Stenz and A. Wolf. E-SETHEO: An automated theorem prover. In R. Dyckhoff, editor, Automated Reasoning with Analytic Tableaux and Related Methods (TABLEAUX 2000), volume 1847 of LNCS, pages 436–440. Springer, 2000.
- [VB03] C. Viti and S. Bistarelli. Study and development of a remote biometric authentication protocol. Technical Report IIT B4-04/2003, Consiglio Nazionale delle Ricerche, Istituto di Informatica e Telematica, September 2003. Available at http://dienst.isti.cnr.it/Dienst/UI/2.0/Describe/ercim.cnr.iit/2003-B4-04?tiposearch=ercim&langver=.
- [Wei99] C. Weidenbach. Towards an automatic analysis of security protocols in first-order logic. In H. Ganzinger, editor, 16th International Conference on Automated Deduction (CADE-16), volume 1632 of LNCS, pages 314–328, 1999.