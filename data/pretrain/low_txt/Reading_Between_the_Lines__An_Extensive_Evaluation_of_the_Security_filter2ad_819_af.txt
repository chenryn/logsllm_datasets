### Clarification and Enhancement of EPUB Specification Requirements

The current EPUB specification does not impose sufficiently strict requirements for EPUB reading systems. While the responsibility to conform to the security requirements lies with the developers, more stringent requirements could be consolidated into a quantified compliance checker application. This would help ensure that reading systems meet the necessary security standards.

### Attenuating Capabilities in the EPUB Specification

A more effective approach would be to reduce the capabilities granted according to the EPUB specification. For example, while an EPUB is allowed to refer to audio, video, and fonts through static XHTML and CSS, embedded scripts can retrieve any resource. This feature can be useful for keeping EPUBs small by fetching large files from online services. However, access to local filesystem resources, which is currently allowed, introduces significant security threats. The ability to render local resources also implies the ability to determine their existence, which can be used for purposes such as filesystem fingerprinting. Therefore, we recommend completely prohibiting EPUBs from referring to resources on the user's operating system. Additionally, since references to remote resources are rare in EPUBs, we strongly suggest requiring user consent for such actions to prevent tracking.

### Evaluation of JavaScript Capabilities

Our semi-automated evaluation revealed that over half of the JavaScript-supporting reading systems also support GeoLocation and UserMedia APIs, or opening applications through URI handles. These functionalities, originating from the underlying browser engine, are not mentioned in the EPUB specification. Assuming the EPUB specification does not intend to incorporate such browser functionalities, we argue that it should include a whitelist of APIs that can be enabled.

### Real-World Analysis

Based on our analysis of 9,000 EPUBs, the proposed restrictions would have minimal impact. None of the analyzed EPUBs required local or remote resources to render correctly, and even those with embedded JavaScript remained functional when execution was prevented. We propose reconsidering the capability of unrestricted JavaScript execution in EPUB reading systems, perhaps requiring user consent when a script is about to be executed.

### Responsible Disclosure

All identified vulnerabilities, whether through our semi-automated testbed or case studies, were responsibly disclosed to the involved parties. We also sent early warnings to vendors whose reading systems did not meet the specification’s security recommendations. In total, we reached out to 33 vendors, responsible for 37 reading systems, using the most appropriate private channels available. Although many vendors provided generic or no response, major vendors like Apple and Adobe were eager to address the reported issues, resulting in the issuance of three CVEs.

### Related Work

#### Portable Document Format (PDF)

The Portable Document Format (PDF) shares similar capabilities with EPUB, including scripting and network connectivity. Previous research has shown that these features can lead to security, privacy, and content integrity vulnerabilities. By expressing our concerns about EPUB capabilities early, we hope to adapt the specification to avoid similar issues.

#### Comprehensive Policy Evaluations

Various studies have exposed vulnerabilities and inconsistencies in browser policy implementations. Aggarwal et al. uncovered weaknesses in private browsing modes, Schwenk et al. evaluated the same-origin policy, and Franken et al. assessed third-party cookie policies. Luo et al. conducted a longitudinal study on mobile browser security mechanisms, highlighting various issues such as lacking support and multi-year vulnerabilities.

### Conclusion

In this paper, we report on a semi-automated evaluation of 92 free EPUB reading systems and five physical reading devices. Our results show that almost none of the systems supporting JavaScript execution adhere adequately to the EPUB specification's security considerations. For eight reading systems, a malicious EPUB can extract arbitrary files from the local system. We are the first to comprehensively evaluate the security and privacy practices of EPUB reading systems and hope to increase awareness among users and developers. We propose refining the current security recommendations into binding requirements and providing additional documentation on incorporating existing browser engine frameworks correctly.

### Acknowledgments

We thank our shepherd Adam Doupé and the anonymous reviewers for their insightful comments. We also extend our gratitude to Lieven Desmet, Victor Le Pochat, and Yana Dimova for their feedback. This research is partially funded by the Research Fund KU Leuven.

### References

[1] EPUB 3.2. Standard, W3C, May 2019. https://www.w3.org/publishing/epub3/epub-spec.html.
[2] EPUB content documents 3.2. Standard, W3C, May 2019. https://www.w3.org/publishing/epub3/epub-contentdocs.html.
[3] Adobe. Security Updates Available for Adobe Digital Editions — APSB20-23. https://helpx.adobe.com/security/products/Digital-Editions/apsb20-23.html, April 2020.
[4] Gaurav Aggarwal, Elie Bursztein, Collin Jackson, and Dan Boneh. An analysis of private browsing modes in modern browsers. In Proceedings of the 19th USENIX Conference on Security, USENIX Security’10, pages 6–6, Berkeley, CA, USA, 2010. USENIX Association.
[5] Alexandra Alter. Your e-book is watching you. Wall Street Journal. https://www.wsj.com/articles/SB10001424052702304870304577490950051438304.
[6] Amazon. Amazon Kindle Publishing Guidelines, 2019. http://kindlegen.s3.amazonaws.com/AmazonKindlePublishingGuidelines.pdf.
[7] Android. Background execution limits. https://developer.android.com/about/versions/oreo/background.
[8] Android. Open files using storage access framework. https://developer.android.com/guide/topics/providers/document-provider.
[9] Android. WebSettings. https://developer.android.com/reference/android/webkit/WebSettings.html.
[10] Apple. UIApplication background task notes. https://forums.developer.apple.com/thread/85066.
[11] Apple. About the security content of iOS 13.1 and iPadOS 13.1. https://support.apple.com/en-us/HT210603, February 2020.
[12] Apple. About the security content of iOS 13.2 and iPadOS 13.2. https://support.apple.com/en-gb/HT210721, April 2020.
[13] Apple. About the security content of macOS Catalina 10.15. https://support.apple.com/en-us/HT210634, February 2020.
[14] Apple. About the security content of macOS Catalina 10.15.1, Security Update 2019-001, and Security Update 2019-006. https://support.apple.com/en-us/HT210722, April 2020.
[15] AuthorEarnings. February 2017 Big, Bad, Wide & International Report: covering Amazon, Apple, B&N, and Kobo ebook sales in the US, UK, Canada, Australia, and New Zealand. https://web.archive.org/web/20190218084936/http:/authorearnings.com/report/february-2017/, 2017.
[16] Internet Assigned Numbers Authority. Uniform resource identifier (URI) schemes. https://www.iana.org/assignments/uri-schemes/uri-schemes.
[17] Internet Assigned Numbers Authority. Media type assignment: application/epub+zip. https://www.iana.org/assignments/media-types/application/epub+zip, 2014.
[18] Baldur Bjarnason. EPUB JavaScript security. https://www.baldurbjarnason.com/notes/epub-javascript-security/, July 2012.
[19] Baldur Bjarnason. JavaScript in ebooks. https://www.baldurbjarnason.com/notes/javascript-in-ebooks/, February 2012.
[20] Henrik Boström, Cullen Jennings, Anant Narayanan, Jan-Ivar Bruaroey, Daniel Burnett, Adam Bergkvist, and Bernard Aboba. Media capture and streams. Candidate recommendation, W3C, July 2019. https://www.w3.org/TR/2019/CR-mediacapture-streams-20190702/.
[21] Ron Brandis and Luke Steller. Threat Modelling Adobe PDF. Technical report, Defence Science and Technology Organisation, 2012. https://www.dst.defence.gov.au/sites/default/files/publications/DSTO-TR-2730.pdf.
[22] Aniello Castiglione, Alfredo De Santis, and Claudio Soriente. Security and privacy issues in the portable document format. Journal of Systems and Software, 83(10):1813 – 1822, 2010.
[23] Chrome. Declare Permissions and Warn Users. https://developer.chrome.com/extensions/permission_warnings.
[24] Ang Cui. The overlooked problem of ‘n-day’ vulnerabilities. https://www.darkreading.com/vulnerabilities---threats/the-overlooked-problem-of-n-day-vulnerabilities/a/d-id/1331348, March 2018.
[25] Cure53. HTTPLeaks. https://github.com/cure53/HTTPLeaks, 2019.
[26] CVE Details. QT 5.2.1 Security Vulnerabilities. https://www.cvedetails.com/vulnerability-list/vendor_id-12593/product_id-24410/version_id-164958/Digia-QT-5.2.1.html.
[27] Matt Day and Jackie Gu. The enormous numbers behind Amazon’s market reach. https://www.bloomberg.com/graphics/2019-amazon-reach-across-markets/, March 2019.
[28] Digimarc. Inside the mind of a book pirate. https://www.digimarc.com/docs/default-source/default-document-library/inside-the-mind-of-a-book-pirate, 2017.
[29] M. Duerst, L. Masinter, and J. Zawinski. The 'mailto' URI scheme. RFC 6068, RFC Editor, October 2010.
[30] Eric Hellman. Publishing Hackathon Pretty Much Ignores eBooks. https://go-to-hellman.blogspot.com/2013/05/publishing-hackathon-pretty-much.html, 2013.
[31] Alison Flood. Ebooks can tell which novels you didn’t finish. The Guardian. https://www.theguardian.com/books/2014/dec/10/kobo-survey-books-readers-finish-donna-tartt.
[32] Gertjan Franken, Tom Van Goethem, and Wouter Joosen. Who left open the cookie jar? A comprehensive evaluation of third-party cookie policies. In 27th USENIX Security Symposium (USENIX Security 18), pages 151–168, Baltimore, MD, August 2018. USENIX Association.
[33] Ian Hickson. Web storage (second edition). W3C recommendation, W3C, April 2016. http://www.w3.org/TR/2016/REC-webstorage-20160419/.
[34] Intellectual Property Office. Online copyright infringement tracker: Latest wave of research. https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/628704/OCI-tracker-7th-wave.pdf, 2017.
[35] Jun Kokatsu. Is your ePub reader secure enough? https://shhnjk.blogspot.com/2017/05/is-your-epub-reader-secure-enough.html, May 2017.
[36] Martin Kaste. Is your e-book reading up on you? https://www.npr.org/2010/12/15/132058735/is-your-e-book-reading-up-on-you.
[37] Kobo Labs. Kobo EPUB guidelines. https://github.com/kobolabs/epub-spec/blob/master/README.md.
[38] Jung Hoon Lee. Issue 1134: WebKit: UXSS via ContainerNode::parserRemoveChild (2). https://bugs.chromium.org/p/project-zero/issues/detail?id=1134, 2017.
[39] Meng Luo, Pierre Laperdrix, Nima Honarmand, and Nick Nikiforakis. Time does not heal all wounds: A longitudinal analysis of security-mechanism support in mobile browsers. In Proceedings of the 26th Network and Distributed System Security Symposium (NDSS), Jan 2019.
[40] Davide Maiorca, Igino Corona, and Giorgio Giacinto. Looking at the bag is not enough to find the bomb: An evasion of structural methods for malicious PDF files detection. In Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security, ASIA CCS ’13, pages 119–130, New York, NY, USA, 2013. ACM.
[41] Vladislav Mladenov, Christian Mainka, Karsten Meyer zu Selhausen, Martin Grothe, and Jörg Schwenk. Vulnerability Report: Attacks bypassing the signature validation in PDF. Technical report, Ruhr-Universität Bochum, 2018. https://www.nds.ruhr-uni-bochum.de/media/ei/veroeffentlichungen/2019/02/12/report.pdf.
[42] Mozilla Developer Network. Content Security Policy. https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Content_Security_Policy.
[43] Mozilla Developer Network. Fetch API. https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API.
[44] Mozilla Developer Network. mdn-browser-compat-data. https://github.com/mdn/browser-compat-data.
[45] Mozilla Developer Network. MediaDevices. https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices.
[46] Mozilla Developer Network. Same-origin policy. https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy.
[47] Mozilla Developer Network. XMLHttpRequest. https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest.
[48] Nate Hoffelder. An epub3 ebook could be used to hack your tablet, steal your identity, and cause the downfall of western civilization. 2013. https://the-digital-reader.com/2013/06/09/eric-hellmans-publishing-hackathon-entry-could-be-used-to-hack-your-tablet-steal-your-identity-and-cause-the-downfall-of-western-civilization/.
[49] Nir Nissim, Aviad Cohen, Chanan Glezer, and Yuval Elovici. Detection of malicious PDF files and directions for enhancements: A state-of-the-art survey. Computers & Security, 48:246 – 266, 2015.
[50] nrclark. Pyfuse: A tool for simple FUSE Filesystems. https://github.com/nrclark/pyfuse, 2019.
[51] Andrei Popescu. Geolocation API specification 2nd edition. W3C recommendation, W3C, November 2016. https://www.w3.org/TR/2016/REC-geolocation-API-20161108/.
[52] PricewaterhouseCoopers. Turning the page: The future of ebooks. 2010. https://www.pwc.co.uk/assets/pdf/ebooks-trends-and-developments.pdf.
[53] Project Gutenberg. Project Gutenberg Submission Guidelines. https://web.archive.org/web/20181108181052/https://upload.pglaf.org/.
[54] Jörg Schwenk, Marcus Niemietz, and Christian Mainka. Same-origin policy: Evaluation in modern browsers. In 26th USENIX Security Symposium (USENIX Security 17), pages 713–727, Vancouver, BC, August 2017. USENIX Association.
[55] SmashWords. Smashwords Distribution Network. https://www.smashwords.com/distribution, 2019.
[56] Charles Smutz and Angelos Stavrou. Malicious PDF detection using metadata and structural features. In Proceedings of the 28th Annual Computer Security Applications Conference, ACSAC ’12, pages 239–248, New York, NY, USA, 2012. ACM.
[57] Peter Snyder, Cynthia Taylor, and Chris Kanich. Most websites don’t need to vibrate: A cost-benefit approach to improving browser security. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, pages 179–194. ACM, 2017.
[58] Nedim Srndic and Pavel Laskov. Detection of malicious PDF files based on hierarchical document structure. In NDSS, 2013.
[59] W3C. EPUBCheck. https://github.com/w3c/epubcheck, 2019.
[60] Xinda Wang, Kun Sun, Archer Batcheller, and Sushil Jajodia. Detecting “0-day” vulnerability: An empirical study of secret security patch in OSS. In 2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), pages 485–492. IEEE, 2019.
[61] WebKit Bugzilla. Limit user agent versioning to an upper bound. https://bugs.webkit.org/show_bug.cgi?id=180365.
[62] Rüdiger Wischenbart. The global eBook market: current conditions & future projections. O’Reilly Media, Inc., 2013.

### Appendix A: Additional Reading System Information

For completeness and transparency, we provide an overview of all EPUB reading systems considered during our evaluation, including the number of reported users. For iOS, the number of ratings is used as an estimator of the relative reach of an application. We also reported the deduced embedded browser engine for all reading systems supporting JavaScript. "OS" indicates that the reading system relies on the engine framework provided by the operating system and is considered up-to-date. Finally, we include the readers excluded from our analysis along with the reasons. In total, we considered 92 reading applications on seven platforms (Windows, Ubuntu, macOS, iOS, Android, Firefox & Chrome extensions) and five standalone physical e-readers.

#### Evaluated EPUB Reading Systems for Windows

| Reading System | Version | Rendering Engine | Release Date |
|----------------|---------|-----------------|--------------|
| Adobe Digital Editions | 4.5.10 | OS Trident | N/A |
| Bibliovore | 2.0.2.0 | - | - |
| BookReader | 1.6.0.0 | - | - |
| Bookviser Reader | 6.8.1.0 | - | - |
| Calibre | 3.40.1 | WebKit 538.1 | Oct 2014 |
| Calibre | 4.3.0 | Blink 77 | Sep 2019 |
| CoolReader | N/A | - | - |
| EPUB File Reader | 1.5 | - | N/A |
| FBReader | 0.12.10 | WebKit 538.1 | Oct 2014 |
| Freda | 4.21 | - | - |
| Icecream Ebook Reader | 5.19 | - | - |
| Liberty | 1.0.0.13 | - | - |
| MS Edge | 44.17763.1.0 | EdgeHTML 18.17763 | Oct 2018 |
| Nook | 1.10.1.15 | - | - |
| Overdrive | 3.8.0 | - | - |
| SumatraPDF | 3.1.2 | - | - |

#### Omitted EPUB Reading Systems for Windows

| Reading System | Reason |
|----------------|--------|
| Cover | Unable to open fully compliant EPUB file. |
| Epub3 Reader | Unable to correctly render fully compliant EPUB file. |
| FlyReader | Unable to open fully compliant EPUB file. |
| Perfect PDF Reader | Unable to correctly render fully compliant EPUB file. |

#### Evaluated EPUB Reading Systems for macOS

| Reading System | Version | Rendering Engine | Release Date |
|----------------|---------|-----------------|--------------|
| Adobe Digital Editions | 4.5.10 | - | - |
| Apple Books | 1.17 | - | - |
| Azardi | 43.1 | - | - |
| BookReader | 5.14 | - | - |
| Calibre | 3.40.1 | - | - |
| Calibre | 4.3.0 | - | - |
| FBReader | 0.9.0 | - | - |
| Kindle | 1.25.2 | - | - |
| Kitabu | 1.2 | - | - |
| Murasaki | - | - | - |