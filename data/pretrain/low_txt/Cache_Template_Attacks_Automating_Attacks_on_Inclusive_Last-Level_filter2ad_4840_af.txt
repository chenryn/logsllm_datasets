### Preventing Cache-Line Sharing

Preventing cache-line sharing, such as by disabling shared memory, is a potential solution. However, this approach faces significant challenges because operating systems heavily rely on shared memory. Without modifying the operating system, it is not feasible for a user program to prevent its own memory from being shared with an attacker, even in the case of static linkage, as discussed in Section 2.2.

With operating system modifications, it would be possible to disable shared memory in all scenarios where a victim program cannot prevent an attack. This includes shared program binaries, shared libraries, and shared generated files (e.g., locale-archive). Additionally, a system call could be provided to user programs to mark memory as "do-not-share."

### Hardware-Based Approach

A hardware-based approach involves changing cache tags. Virtually tagged caches are either invalidated on context switches or the virtual tag is combined with an address space identifier. Consequently, shared memory is not shared in the cache, making Flush+Reload attacks impossible on virtually tagged caches.

It is important to note that as long as shared cache lines are available to an attacker, Flush+Reload or Evict+Reload attacks cannot be completely prevented.

### Cache Set Associativity

Prime+Probe, Evict+Time, and Evict+Reload attacks exploit set-associative caches. In these cases, it is necessary to fill all ways of a cache set, either for eviction or for detecting evicted cache sets. Based on which cache set was reloaded (or evicted), secret information can be deduced. Fully associative caches offer better security properties because such information deduction is not possible, and cache eviction can only be enforced by filling the entire cache. However, timing attacks can still occur due to internal cache collisions [5], leading to different execution times. Since fully associative caches are impractical for larger caches, new cache architectures have been proposed to provide similar security properties [29, 51, 52]. Nevertheless, even fully associative caches only prevent attacks that do not exploit cache-line sharing. Therefore, a combination of countermeasures is necessary to prevent most types of cache attacks.

### Proactive Prevention of Cache Attacks

#### Instrumenting Cache Attacks

Instrumenting cache attacks to detect co-residency [57] with another virtual machine on the same physical machine, or to detect cache attacks [58] and cache-based side channels in general [11], has been proposed in the past. Brumley and Hakala [7] suggested that developers should use their attack technique to detect and eliminate cache vulnerabilities in their programs. Inspired by these works, we present defense mechanisms against cache attacks that can be improved using Cache Template Attacks.

#### Detect Cache Vulnerabilities as a Developer

Similar to Brumley and Hakala [7], we propose using Cache Template Attacks to automatically find cache-based vulnerabilities. Compared to [7], Cache Template Attacks allow developers to detect potential cache side channels for specific events, which can then be fixed. A developer only needs to select the targeted events (e.g., keystrokes, window switches, or encryptions) and trigger these events automatically during the profiling phase, significantly easing the evaluation of cache side channels. This approach even allows developers to find such cache vulnerabilities in third-party libraries.

#### Detect and Impede Ongoing Attacks as a User

Zhang et al. [58] suggested the possibility of detecting cache attacks by performing a cache attack on one of the vulnerable addresses or cache sets. We propose running a Cache Template Attack as a system service to detect code and data under attack. If Flush+Reload prevention is sufficient, we simply disable page sharing for all pages with cache lines under attack. Otherwise, we disable caching for these pages, as proposed by Aciicmez et al. [1], thus preventing all cache attacks. Only the performance for critical code and data parts is reduced, as the cache is disabled only for specific pages in virtual memory.

Additionally, cache attacks can be impeded by performing additional memory accesses unrelated to the secret information or by random cache flushes. Such obfuscation methods on the attacker’s measurements have been proposed by Zhang et al. [59]. The idea is to generate random memory accesses, denoted as cache cleansing. However, this does not address the shared last-level cache. In contrast, Cache Template Attacks can be used to identify possible cache-based information leaks and then specifically add noise to these locations by accessing or flushing the corresponding cache lines.

### Enhancing the Prefetcher

During our experiments, we found that the prefetcher influences the cache activity of certain access patterns during cache attacks, especially due to the spatial locality of addresses, as observed in other work [16, 39, 54]. The prefetcher loads multiple memory addresses in advance if “two cache misses occur in the last level cache” and the corresponding memory accesses are within a specific range (the so-called trigger distance). Depending on the CPU model, this range is either 256 or 512 bytes, but does not exceed a page boundary of 4 KB. Due to this, we are able to probe at least 2 addresses per page.

We suggest increasing the trigger distance of the prefetcher beyond the 4 KB page boundary if the corresponding page already exists in the translation lookaside buffer. This would make the granularity of the attack too high for many practical targets, especially attacks on executed instructions. Another suggestion is to adapt the prefetcher to take temporal spatiality into consideration. If the prefetcher were to prefetch data based on temporal distance, most existing attacks would be prevented.

While an attacker might still be able to establish a communication channel targeted to circumvent the prefetcher, the presented countermeasures would prevent most cache attacks targeting real-world applications.

### Conclusion

In this paper, we introduced Cache Template Attacks, a novel technique to easily find and exploit cache-based side channels. Although specific knowledge of the attacked machine and executed programs or libraries helps, it is not required for a successful attack. The attack can be performed on both closed-source and open-source binaries in the same way.

We studied various applications of Cache Template Attacks. Our results show that an attacker can infer highly accurate keystroke timings on Linux and Windows. For Linux distributions, we demonstrated a fully automatic keylogger that significantly reduces the entropy of passwords. Hence, we conclude that cache-based side-channel attacks pose a greater threat to today's computer architectures than previously assumed. Even sensitive user input, like passwords, cannot be considered secure on machines employing CPU caches. We argue that fundamental concepts of computer architectures and operating systems enable the automatic exploitation of cache-based vulnerabilities. Many existing countermeasures do not prevent such attacks as expected. Still, the combination of multiple countermeasures can effectively mitigate cache attacks. The fact that cache attacks can be launched automatically marks a change of perspective from academic interest to practical attacks, which can be launched by less sophisticated attackers. This shift emphasizes the need to develop and integrate effective countermeasures immediately. It is not sufficient to protect only specific cryptographic algorithms like AES; more general countermeasures will be necessary to counter the threat of automated cache attacks.

### Acknowledgments

We would like to thank the anonymous reviewers and our shepherd, Ben Ransford, for their valuable comments and suggestions. The research leading to these results has received funding from the European Union’s Horizon 2020 research and innovation programme under grant agreement No 644052 (HECTOR). Furthermore, this work has been supported by the Austrian Research Promotion Agency (FFG) and the Styrian Business Promotion Agency (SFG) under grant number 836628 (SeCoS).

### References

[1] ACIIC¸MEZ, O., BRUMLEY, B.B., AND GRABHER, P. New Results on Instruction Cache Attacks. In Cryptographic Hardware and Embedded Systems – CHES (2010), vol. 6225 of LNCS, Springer, pp. 110–124.
[2] ACIIC¸MEZ, O., AND KOC¸, C¸.K. Trace-Driven Cache Attacks on AES (Short Paper). In International Conference on Information and Communications Security – ICICS (2006), vol. 4307 of LNCS, Springer, pp. 112–121.
[3] BENGER, N., VANDEPOL, J., SMART, N.P., AND YAROM, Y. “Ooh Aah... Just a Little Bit”: A Small Amount of Side Channel Can Go a Long Way. In Cryptographic Hardware and Embedded Systems – CHES (2014), vol. 8731 of LNCS, Springer, pp. 75–92.
[4] BERNSTEIN, D.J. Cache-Timing Attacks on AES, 2004. URL: http://cr.yp.to/papers.html#cachetiming.
[5] BOGDANOV, A., EISENBARTH, T., PAAR, C., AND WIENECKE, M. Differential Cache-Collision Timing Attacks on AES with Applications to Embedded CPUs. In Topics in Cryptology – CT-RSA (2010), vol. 5985 of LNCS, Springer, pp. 235–251.
[6] BONNEAU, J., AND MIRONOV, I. Cache-Collision Timing Attacks Against AES. In Cryptographic Hardware and Embedded Systems – CHES (2006), vol. 4249 of LNCS, Springer, pp. 201–215.
[7] BRUMLEY, B.B., AND HAKALA, R.M. Cache-Timing Template Attacks. In Advances in Cryptology – ASIACRYPT (2009), vol. 5912 of LNCS, Springer, pp. 667–684.
[8] CHARI, S., RAO, J.R., AND ROHATGI, P. Template Attacks. In Cryptographic Hardware and Embedded Systems – CHES (2002), vol. 2523 of LNCS, Springer, pp. 13–28.
[9] CHEN, C., WANG, T., KOU, Y., CHEN, X., AND LI, X. Improvement of Trace-Driven I-Cache Timing Attack on the RSA Algorithm. Journal of Systems and Software 86, 1 (2013), 100–107.
[10] DAEMEN, J., AND RIJMEN, V. The Design of Rijndael: AES – The Advanced Encryption Standard. Information Security and Cryptography. Springer, 2002.
[11] DOYCHEV, G., FELD, D., K¨OPF, B., MAUBORGNE, L., AND REINEKE, J. CacheAudit: A Tool for the Static Analysis of Cache Side Channels. In USENIX Security Symposium (2013), USENIX Association, pp. 431–446.
[12] FRANZ, M. Eunibus pluram: Massive-Scale Software Diversity as a Defense Mechanism. In Workshop on New Security Paradigms – NSPW (2010), ACM, pp. 7–16.
[13] GALLAIS, J., KIZHVATOV, I., AND TUNSTALL, M. Improved Trace-Driven Cache-Collision Attacks against Embedded AES Implementations. IACR Cryptology ePrint Archive 2010/408.
[14] GOOGLEGROUPS. Rowhammer without CLFLUSH, 2015. URL: https://groups.google.com/forum/#!topic/rowhammer-discuss/ojgTgLr4q_M.
[15] GUERON, S. White Paper: Intel Advanced Encryption Standard (AES) Instructions Set, 2010. URL: https://software.intel.com/file/24917.
[16] GULLASCH, D., BANGERTER, E., AND KRENN, S. Cache Games – Bringing Access-Based Cache Attacks on AES to Practice. In IEEE Symposium on Security and Privacy – S&P (2011), IEEE Computer Society, pp. 490–505.
[17] G¨ULMEZO˘GLU, B., INCI, M.S., EISENBARTH, T., AND SUNAR, B. A Faster and More Realistic Flush+Reload Attack on AES. In Constructive Side-Channel Analysis and Secure Design – COSADE (2015), LNCS, Springer. In press.
[18] HUND, R., WILLEMS, C., AND HOLZ, T. Practical Timing Side Channel Attacks against Kernel Space ASLR. In IEEE Symposium on Security and Privacy – SP (2013), IEEE Computer Society, pp. 191–205.
[19] INTEL CORPORATION. Intel® 64 and IA-32 Architectures Optimization Reference Manual. No. 248966-026. 2012.
[20] IRAZOQUI, G., EISENBARTH, T., AND SUNAR, B. S$A: A Shared Cache Attack that Works Across Cores and Defies VM Sandboxing – and its Application to AES. In IEEE Symposium on Security and Privacy – S&P (2015), IEEE Computer Society.
[21] IRAZOQUI, G., INCI, M.S., EISENBARTH, T., AND SUNAR, B. Finegrain Cross-VM Attacks on Xen and VMware are Possible! IACR Cryptology ePrint Archive 2014/248.
[22] IRAZOQUI, G., INCI, M.S., EISENBARTH, T., AND SUNAR, B. Wait a Minute! A Fast, Cross-VM Attack on AES. In Research in Attacks, Intrusions and Defenses Symposium – RAID (2014), vol. 8688 of LNCS, Springer, pp. 299–319.
[23] IRAZOQUI, G., INCI, M.S., EISENBARTH, T., AND SUNAR, B. Know Thy Neighbor: Crypto Library Detection in Cloud. Privacy Enhancing Technologies 1, 1 (2015), 25–40.
[24] IRAZOQUI, G., INCI, M.S., EISENBARTH, T., AND SUNAR, B. Lucky 13 Strikes Back. In ACM ASIACCS (2015), pp. 85–96.
[25] K¨ASPER, E., AND SCHWABE, P. Faster and Timing-Attack Resistant AES-GCM. In Cryptographic Hardware and Embedded Systems – CHES (2009), vol. 5747 of LNCS, Springer, pp. 1–17.
[26] KELSEY, J., SCHNEIER, B., WAGNER, D., AND HALL, C. Side Channel Cryptanalysis of Product Ciphers. Journal of Computer Security 8, 2/3 (2000), 141–158.
[27] KIM, Y., DALY, R., KIM, J., FALLIN, C., LEE, J., LEE, D., WILKERSON, C., LAI, K., AND MUTLU, O. Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors. In ACM/IEEE International Symposium on Computer Architecture – ISCA (2014), IEEE Computer Society, pp. 361–372.
[28] KOCHER, P.C. Timing Attacks on Implementations of Diffie-Hellman, RSA, DSS, and Other Systems. In Advances in Cryptology – CRYPTO (1996), vol. 1109 of LNCS, Springer, pp. 104–113.
[29] KONG, J., ACIIC¸MEZ, O., SEIFERT, J., AND ZHOU, H. Deconstructing New Cache Designs for Thwarting Software Cache-based Side Channel Attacks. In ACM Workshop on Computer Security Architecture – CSAW (2008), pp. 25–34.
[30] K¨ONIGHOFER, R. A Fast and Cache-Timing Resistant Implementation of the AES. In Topics in Cryptology – CT-RSA (2008), vol. 4964 of LNCS, Springer, pp. 187–202.
[31] LIU, F., AND LEE, R.B. Random Fill Cache Architecture. In International Symposium on Microarchitecture – MICRO (2014), IEEE, pp. 203–215.
[32] LIU, F., YAROM, Y., GE, Q., HEISER, G., AND LEE, R.B. Last-level cache side-channel attacks are practical. In IEEE Symposium on Security and Privacy – S&P (2015).
[33] MAURICE, C., NEUMANN, C., HEEN, O., AND FRANCILLON, A. C5: Cross-Cores Cache Covert Channel. In DIMVA (2015). In press.
[34] MOWERY, K., KEELVEEDHI, S., AND SHACHAM, H. Are AES x86 Cache Timing Attacks Still Feasible? In Workshop on Cloud Computing Security – CCSW (2012), ACM, pp. 19–24.
[35] NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY. Advanced Encryption Standard. NIST FIPS PUB 197, 2001.
[36] NEVE, M. Cache-based Vulnerabilities and SPAM Analysis. PhD thesis, UCL, 2006.
[37] OPENSSL SOFTWARE FOUNDATION. OpenSSL Project, 2014. URL: http://www.openssl.org/.
[38] OREN, Y., KEMERLIS, V.P., SETHUMADHAVAN, S., AND KEROMYTIS, A.D. The Spy in the Sandbox - Practical Cache Attacks in Javascript. CoRR abs/1502.07373 (2015).
[39] OSVIK, D.A., SHAMIR, A., AND TROMER, E. Cache Attacks and Countermeasures: The Case of AES. In Topics in Cryptology – CT-RSA (2006), vol. 3860 of LNCS, Springer, pp. 1–20.
[40] OWENS, R., AND WANG, W. Non-Interactive OS Fingerprinting Through Memory De-Duplication Technique in Virtual Machines. In International Performance Computing and Communications Conference – IPCCC (2011), IEEE, pp. 1–8.
[41] PAGE, D. Theoretical Use of Cache Memory as a Cryptanalytic Side-Channel. IACR Cryptology ePrint Archive 2002/169.
[42] PERCIVAL, C. Cache Missing for Fun and Profit, http://www.daemonology.net/2005/hyperthreading-considered-harmful/. URL: http://www.daemonology.net/2005/hyperthreading-considered-harmful/.
[43] REBEIRO, C., SELVAKUMAR, A.D., AND DEVI, A.S.L. Bitslice Implementation of AES. In Cryptology and Network Security – CANS (2006), vol. 4301 of LNCS, Springer, pp. 203–212.
[44] RISTENPART, T., TROMER, E., SHACHAM, H., AND SAVAGE, S. Hey, You, Get Off of My Cloud: Exploring Information Leakage in Third-Party Compute Clouds. In ACM Conference on Computer and Communications Security – CCS (2009), ACM, pp. 199–212.
[45] SEABORN, M., AND DULLIEN, T. Exploiting the DRAM Rowhammer Bug to Gain Kernel Privileges, 2015. URL: http://googleprojectzero.blogspot.co.at/2015/03/exploiting-dram-rowhammer-bug-to-gain.html.
[46] SPREITZER, R., AND PLOS, T. Cache-Access Pattern Attack on Disaligned AES T-Tables. In Constructive Side-Channel Analysis and Secure Design – COSADE (2013), vol. 7864 of LNCS, Springer, pp. 200–214.
[47] SUZAKI, K., IIJIMA, K., YAGI, T., AND ARTHO, C. Memory Deduplication as a Threat to the Guest OS. In European Workshop on System Security – EUROSEC (2011), ACM, pp. 1–6.
[48] TANNOUS, A., TROSTLE, J.T., HASSAN, M., MCLAUGHLIN, S.E., AND JAEGER, T. New Side Channels Targeted at Passwords. In Annual Computer Security Applications Conference – ACSAC (2008), pp. 45–54.
[49] TROMER, E., OSVIK, D.A., AND SHAMIR, A. Efficient Cache Attacks on AES, and Countermeasures. Journal Cryptology 23, 1 (2010), 37–71.
[50] TSUNOO, Y., SAITO, T., SUZAKI, T., SHIGERI, M., AND MIYAUCHI, H. Cryptanalysis of DES Implemented on Computers with Cache. In Cryptographic Hardware and Embedded Systems – CHES (2003), vol. 2779 of LNCS, Springer, pp. 62–76.
[51] WANG, Z., AND LEE, R.B. New Cache Designs for Thwarting Software Cache-based Side Channel Attacks. In International Symposium on Computer Architecture – ISCA (2007), pp. 494–505.
[52] WANG, Z., AND LEE, R.B. A Novel Cache Architecture with Enhanced Performance and Security. In IEEE/ACM International Symposium on Microarchitecture – MICRO (2008), pp. 83–93.
[53] WEISS, M., HEINZ, B., AND STUMPF, F. A Cache Timing Attack on AES in Virtualization Environments. In Financial Cryptography and Data Security – FC (2012), vol. 7397 of LNCS, Springer, pp. 314–328.
[54] YAROM, Y., AND BENGER, N. Recovering OpenSSL ECDSA Nonces Using the FLUSH+RELOAD Cache Side-Channel Attack. IACR Cryptology ePrint Archive 2014/140.
[55] YAROM, Y., AND FALKNER, K. FLUSH+RELOAD: A High Resolution, Low Noise, L3 Cache Side-Channel Attack. In USENIX Security Symposium (2014), USENIX Association, pp. 719–732.
[56] ZHANG, K., AND WANG, X. Peeping Tom in the Neighborhood: Keystroke Eavesdropping on Multi-User Systems. In USENIX Security Symposium (2009), USENIX Association, pp. 17–32.
[57] ZHANG, Y., JUELS, A., OPREA, A., AND REITER, M.K. HomeAlone: Co-residency Detection in the Cloud via Side-Channel Analysis. In IEEE Symposium on Security and Privacy – S&P (2011), IEEE Computer Society, pp. 313–328.
[58] ZHANG, Y., JUELS, A., REITER, M.K., AND RISTENPART, T. Cross-Tenant Side-Channel Attacks in PaaS Clouds. In ACM Conference on Computer and Communications Security – CCS (2014), ACM, pp. 990–1003.
[59] ZHANG, Y., AND REITER, M.K. D¨uppel: Retrofitting Commodity Operating Systems to Mitigate Cache Side Channels in the Cloud. In ACM Conference on Computer and Communications Security – CCS (2013), ACM, pp. 827–838.