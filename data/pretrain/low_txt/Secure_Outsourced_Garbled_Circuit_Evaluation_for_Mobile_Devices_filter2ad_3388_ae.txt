### USENIX Association

#### Table 3: Execution Time for Evaluating a 128-bit Blinded RSA Circuit and Dijkstra Shortest Path Solvers
| Circuits (ms) | 64 Circuits (ms) | 128 Circuits (ms) | 32 Circuits Time (ms) |
|--------------|------------------|-------------------|-----------------------|
| 734000.0 ± 4% | 505000.0 ± 2%    | 25800.0 ± 2%      | 49400.0 ± 1%          |
| 1420000.0 ± 1% | 106000.0 ± 1%    | 197000.0 ± 3%     | 389000.0 ± 2%         |
| 892000.0 ± 2%  | 1300000.0 ± 2%   | 2560000.0 ± 1%    | 135000.0 ± 1%         |

- **Optimized Gates**: 116,083,727
- **Unoptimized Gates**: 1,653,542
- **Size (MB)**: 
  - 22,109,732
  - 168,422,382
  - 192,537,834
  - 20,288,444
  - 301,846,263
  - 2,376,377,302
  - 774
  - 11
  - 147
  - 1124

**Figure 8: Map of Potential Presidential Motorcade Routes through Washington, DC**
- (a) 20 identified intersections.
- (b) 50 identified intersections.
- (c) 100 identified intersections.

As the circuit size increases, a larger area can be represented at a finer granularity.

### 7.2 Privacy-Preserving Navigation

Mapping and navigation are among the most popular uses of smartphones. Consider how directions may be given using a mobile device and an application such as Google Maps, without revealing the user’s current location, their ultimate destination, or the route they are following. The navigation server should remain oblivious to these details to ensure mutual privacy and prevent the disclosure of potentially sensitive information if the phone is compromised.

Specifically, consider the planning of the motorcade route for the recent Presidential inauguration. In this case, the route is generally known in advance but may change if sudden threats emerge. A field agent along the route wants to receive directions without providing the navigation service with any additional details and without loading sensitive information about the route onto the phone. Moreover, because the threats may be classified, the navigation service does not want the holder of the phone to be given this information directly. In our example, the user of the phone is trying to determine the shortest path.

To model this scenario, we overlay a graph topology on a map of downtown Washington D.C., encoding intersections as vertices. Edge weights are a function of their distance and heuristics such as potential risks along a graph edge. Figure 8 shows graphs generated based on vertices of 20, 50, and 100 nodes, respectively. Note that the 100-node graph (Figure 8c) encompasses a larger area and provides finer-grained resolution of individual intersections than the 20-node graph (Figure 8a).

There is a trade-off between detail and execution time. As shown in Table 3, a 20-vertex graph can be evaluated in under 26 seconds, while a 100-vertex graph requires almost 15 minutes with 32 circuits in our 64-core server testbed. The 64-circuit evaluation requires more time: almost 50 seconds for the 20-vertex graph, and almost 22 minutes for a 100-vertex graph. We anticipate that based on the role a particular agent might have on a route, they will be able to generate a route that covers their particular geographical jurisdiction and thus have an appropriately sized route, with only certain users requiring the highest-resolution output. Additionally, as described in Section 6.3, servers with more parallel cores can simultaneously evaluate more circuits, giving faster results for the 64-circuit evaluation.

**Figure 9: Motorcade Route with Hazards Along the Route**
- The dashed blue line represents the optimal route.
- The dotted violet line represents the modified route that takes hazards into account.

Consider that incidents have happened along the route, shown in the figure as a car icon in a hazard zone inside a red circle. The agent recalculates the optimal route, which has been updated by the navigation service to assign severe penalties to those corresponding graph edges. The updated route returned by the navigation service is shown in the figure as a path with a dotted purple line. In the 50-vertex graph in Figure 8, the updated directions would be available in just over 135 seconds for 32-circuit evaluation, and 196.5 seconds for 64-circuit evaluation.

### 8 Conclusion

While garbled circuits offer a powerful tool for secure function evaluation, they typically assume participants with massive computing resources. Our work addresses this problem by presenting a protocol for outsourcing garbled circuit evaluation from a resource-constrained mobile device to a cloud provider in the malicious setting. By extending existing garbled circuit evaluation techniques, our protocol significantly reduces both computational and network overhead on the mobile device while still maintaining the necessary checks for malicious or lazy behavior from all parties. Our outsourced oblivious transfer construction significantly reduces the communication load on the mobile device and can easily accommodate more efficient OT primitives as they are developed.

The performance evaluation of our protocol shows dramatic decreases in required computation and bandwidth. For the edit distance problem of size 128 with 32 circuits, computation is reduced by 98.92%, and bandwidth overhead is reduced by 99.95% compared to non-outsourced execution. These savings are illustrated in our privacy-preserving navigation application, which allows a mobile device to efficiently evaluate a massive garbled circuit securely through outsourcing. These results demonstrate that improvements in garbled circuit efficiency can be applied in practical privacy-preserving mobile applications, even on the most resource-constrained devices.

### Acknowledgments

This material is based on research sponsored by DARPA under agreement number FA8750-11-2-0211. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of DARPA or the U.S. Government.

We would like to thank Benjamin Kreuter, abhi shelat, and Chih-hao Shen for working with us on their garbled circuit compiler and evaluation framework; Chris Peikert for providing helpful feedback on our proofs of security; Thomas DuBuisson and Galois for their assistance in the performance evaluation; and Ian Goldberg for his guidance during the shepherding process.

### References

[1] M. Bellare and S. Micali. Non-interactive oblivious transfer and applications. In Advances in Cryptology–CRYPTO, 1990.

[2] M. Ben-Or, S. Goldwasser, and A. Wigderson. Completeness theorems for non-cryptographic fault-tolerant distributed computation. In Proceedings of the annual ACM symposium on Theory of computing, 1988.

[3] J. Brickell and V. Shmatikov. Privacy-preserving graph algorithms in the semi-honest model. In Proceedings of the international conference on Theory and Application of Cryptology and Information Security, 2005.

[4] R. Canetti, Y. Lindell, R. Ostrovsky, and A. Sahai. Universally composable two-party and multi-party secure computation. In Proceedings of the annual ACM symposium on Theory of computing, 2002.

[5] H. Carter, C. Amrutkar, I. Dacosta, and P. Traynor. Efficient oblivious computation techniques for privacy-preserving mobile applications. Journal of Security and Communication Networks (SCN), To appear 2013.

[6] H. Carter, B. Mood, P. Traynor, and K. Butler. Secure outsourced garbled circuit evaluation for mobile devices. Technical Report GT-CS-12-09, College of Computing, Georgia Institute of Technology, 2012.

[7] D. Chaum, C. Crépeau, and I. Damgard. Multiparty unconditionally secure protocols. In Proceedings of the annual ACM symposium on Theory of computing, 1988.

[8] S. G. Choi, J. Katz, R. Kumaresan, and H.-S. Zhou. On the security of the "free-xor" technique. In Proceedings of the international conference on Theory of Cryptography, 2012.

[9] I. Damgård and Y. Ishai. Scalable secure multi-party computation. In Proceedings of the annual international conference on Advances in Cryptology, 2006.

[10] I. Damgård and J. B. Nielsen. Scalable and unconditionally secure multi-party computation. In Proceedings of the annual international cryptology conference on Advances in cryptology, 2007.

[11] V. Goyal, P. Mohassel, and A. Smith. Efficient two party and multi-party computation against covert adversaries. In Proceedings of the theory and applications of cryptographic techniques annual international conference on Advances in cryptology, 2008.

[12] M. Green, S. Hohenberger, and B. Waters. Outsourcing the decryption of ABE ciphertexts. In Proceedings of the USENIX Security Symposium, 2011.

[13] Y. Huang, P. Chapman, and D. Evans. Privacy-Preserving Applications on Smartphones. In Proceedings of the USENIX Workshop on Hot Topics in Security, 2011.

[14] Y. Huang, D. Evans, and J. Katz. Private set intersection: Are garbled circuits better than custom protocols? In NDSS '12: Proceedings of the 19th ISOC Symposium on Network and Distributed Systems Security, San Diego, CA, USA, Feb. 2012.

[15] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster secure two-party computation using garbled circuits. In Proceedings of the USENIX Security Symposium, 2011.

[16] Y. Huang, J. Katz, and D. Evans. Quid-pro-quo-protocols: Strengthening semi-honest protocols with dual execution. In Proceedings of the IEEE Symposium on Security and Privacy, 2012.

[17] A. Iliev and S. W. Smith. Small, stupid, and scalable: Secure computing with faerieplay. In The ACM Workshop on Scalable Trusted Computing, 2010.

[18] Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Extending oblivious transfers efficiently. In Proceedings of the Annual International Cryptology Conference, 2003.

[19] S. Jha, L. Kruger, and V. Shmatikov. Towards practical privacy for genomic computation. In Proceedings of the IEEE Symposium on Security and Privacy, 2008.

[20] S. Kamara, P. Mohassel, and M. Raykova. Outsourcing multi-party computation. Cryptology ePrint Archive, Report 2011/272, 2011. http://eprint.iacr.org/.

[21] S. Kamara, P. Mohassel, and B. Riva. Salus: A system for server-aided secure function evaluation. In Proceedings of the ACM conference on Computer and communications security (CCS), 2012.

[22] M. S. Kiraz. Secure and Fair Two-Party Computation. PhD thesis, Technische Universiteit Eindhoven, 2008.

[23] M. S. Kiraz and B. Schoenmakers. A protocol issue for the malicious case of Yao's garbled circuit construction. In Proceedings of Symposium on Information Theory in the Benelux, 2006.

[24] V. Kolesnikov and T. Schneider. Improved garbled circuit: Free xor gates and applications. In Proceedings of the international colloquium on Automata, Languages and Programming, Part II, 2008.

[25] B. Kreuter, a. shelat, and C. Shen. Billion-gate secure computation with malicious adversaries. In Proceedings of the USENIX Security Symposium, 2012.

[26] L. Kruger, S. Jha, E.-J. Goh, and D. Boneh. Secure function evaluation with ordered binary decision diagrams. In Proceedings of the ACM conference on Computer and communications security (CCS), 2006.

[27] Y. Lindell. Lower bounds and impossibility results for concurrent self composition. Journal of Cryptology, 21(2):200–249, 2008.

[28] Y. Lindell and B. Pinkas. Privacy preserving data mining. In Proceedings of the Annual International Cryptology Conference on Advances in Cryptology, 2000.

[29] Y. Lindell and B. Pinkas. An efficient protocol for secure two-party computation in the presence of malicious adversaries. In Proceedings of the annual international conference on Advances in Cryptology, 2007.

[30] Y. Lindell and B. Pinkas. Secure two-party computation via cut-and-choose oblivious transfer. In Proceedings of the conference on Theory of cryptography, 2011.

[31] L. Malka. VMcrypt: modular software architecture for scalable secure computation. In Proceedings of the 18th ACM conference on Computer and communications security, 2011.

[32] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay–a secure two-party computation system. In Proceedings of the USENIX Security Symposium, 2004.

[33] Message Passing Interface Forum. The Message Passing Interface (MPI) standard. http://www.mcs.anl.gov/research/projects/mpi/, 2009.

[34] P. Mohassel and M. Franklin. Efficiency tradeoffs for malicious two-party computation. In Proceedings of the Public Key Cryptography conference, 2006.

[35] B. Mood, L. Letaw, and K. Butler. Memory-efficient garbled circuit generation for mobile devices. In Proceedings of the IFCA International Conference on Financial Cryptography and Data Security (FC), 2012.

[36] M. Naor and B. Pinkas. Efficient oblivious transfer protocols. In Proceedings of the annual ACM-SIAM symposium on Discrete algorithms, 2001.

[37] M. Naor, B. Pinkas, and R. Sumner. Privacy preserving auctions and mechanism design. In Proceedings of the ACM conference on Electronic commerce, 1999.

[38] N. Nipane, I. Dacosta, and P. Traynor. "Mix-In-Place" anonymous networking using secure function evaluation. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2011.

[39] C. Peikert, V. Vaikuntanathan, and B. Waters. A framework for efficient and composable oblivious transfer. In Advances in Cryptology (CRYPTO), 2008.

[40] W. Rash. Dropbox password breach highlights cloud security weaknesses. http://www.eweek.com/c/a/Security/Dropbox-Password-Breach-Highlights-Cloud-Security-Weaknesses-266215/, 2012.

[41] a. shelat and C.-H. Shen. Two-output secure computation with malicious adversaries. In Proceedings of the Annual international conference on Theory and applications of cryptographic techniques, 2011.

[42] K. Thomas. Microsoft cloud data breach heralds things to come. http://www.pcworld.com/article/214775/microsoft_cloud_data_breach_sign_of_future.html, 2010.

[43] A. C. Yao. Protocols for secure computations. In Proceedings of the Annual Symposium on Foundations of Computer Science, 1982.