# Title: Small Changes, Big Changes: An Updated View on the Android Permission System

## Authors:
- Yury Zhauniarovich<sup>1</sup>
- Olga Gadyatskaya<sup>2</sup>

### Affiliations:
1. Qatar Computing Research Institute, HBKU, Doha, Qatar
2. SnT, University of Luxembourg, Luxembourg City, Luxembourg

### Abstract:
Since its inception, the Android permission system has been a focal point in many security studies. For a long time, the architectural description provided by Enck et al. [31] was widely used in various research papers. The introduction of runtime permissions in Android 6.0 necessitated a reevaluation of this model. Our analysis of 16 Android versions reveals that the permission system has evolved with almost every release. The changes, especially those introduced in Android 6.0, significantly impact the validity of previous conclusions and tools for newer releases. For example, some signature permissions, previously granted only to apps signed with a platform certificate, can now be granted to third-party apps even if they are signed with a non-platform certificate. Additionally, many permissions previously considered threatening are now granted by default. This paper provides a detailed review of the updated system, the introduced changes, and their security implications. We highlight some unusual behaviors that may be of interest to developers and security researchers. During our analysis, we also identified several bugs and provided patches to AOSP where possible.

**Keywords:** Android security, Permission system, Runtime permissions, Compatibility challenges

---

## 1. Introduction
Android is the dominant smartphone operating system, occupying over 80% of the total smartphone market share in 2015 [20]. It is ubiquitous, existing in various forms such as Auto, TV, and Wear. Many other types of devices, like cameras and game consoles, run modified Android firmware [17]. Currently, more than 1.4 billion active devices are powered by Android [14]. This extensive user base is partly due to Google's frequent updates, which introduce new features and improve performance.

However, the wide range of device types and platform versions presents compatibility challenges. While the latest devices are relatively well-updated, others may be left behind or never updated after their initial release. For instance, Google reported that 2.6% of devices visiting the Google Play Store in March 2016 were running Android 2.3, released in 2011 [13]. Third-party applications are typically updated frequently, but some are unsupported by developers after a while. This fragmentation leads to discrepancies in update cycles, causing various issues, including security concerns.

The Android permission system, which regulates app access to device capabilities and system components, is a critical part of the Android security model. From the beginning, it has been central to many studies of Android security. However, only a few studies acknowledged that the permission system was not stable. An early investigation by Enck, Ongtang, and McDaniel [31] reported significant shifts in the permission system across the earliest Android releases. Since then, most Android studies have relied on the same understanding introduced in this seminal paper.

The introduction of runtime permissions in Android 6.0 prompted us to take a closer look at the permission system design. In this paper, we analyze the changes in the permission system over the last six years and provide an updated view of the current architecture since its description in [31]. We reveal the core changes that need to be considered during security analysis:

- **Runtime Permissions:** In Android 6.0, permissions are divided into install-time and runtime. Normal and signature (with some exceptions) permissions are permanently assigned upon app installation, while dangerous permissions are granted at runtime and can be revoked by the user at any time.
- **Group-Based Runtime Permissions:** If an app requires runtime permissions related to the same permission group, granting one permission grants all others in the group. This approach does not enable fine-grained control of dangerous functionality.
- **Third-Party Access to Signature Permissions:** Some signature permissions can now be obtained by third-party applications, even if they are not signed with a platform certificate.
- **Deprecation of `signature|system` Protection Level:** The `signature|system` protection level is deprecated and should not be used for custom or platform permissions.
- **Default Granting of Dangerous Permissions:** In Android 6.0, 22 previously sensitive permissions are now granted by default, and users cannot revoke them. For example, `INTERNET`, `BLUETOOTH`, and `NFC` permissions are automatically granted at app installation.

Given these modifications, the Android community needs to update its understanding of the permission system and evaluate the security implications. To address this, we present an updated security architecture and important implementation details. We also conducted a thorough longitudinal study, which yielded several interesting findings, such as:

- **Persistence of Deprecated Permissions:** Despite being deprecated, `signature|system` permissions still exist in the system. Nine such permissions were added in Android 6.0. We submitted patches to Google to fix this issue in AOSP, and some have been merged.
- **Backward Compatibility Issues:** Developers must make runtime checks for permissions, but permissions that did not exist in older versions are always denied. We found eight such permissions, e.g., `ADD VOICEMAIL`.
- **Unnecessary Permission Group Assignments:** Some non-dangerous permissions are assigned to permission groups without a valid reason. We found eight such permissions, e.g., `USE FINGERPRINT`.

Our findings highlight significant flaws due to the high change rates in the permission system design. Given the discrepancies in update cycles, it is crucial for the security community to re-evaluate the attack surface of the Android permission system.

**Roadmap:**
- Section 2 outlines the established view on the Android permission system.
- Section 3 incrementally updates this view.
- Section 4 provides internal details of the permission system implementation.
- Section 5 presents our quantitative analysis of the evolution in the permission system.
- Section 6 presents the key findings of our qualitative study.
- Section 7 discusses related work.
- Section 8 concludes the paper.

---

## 2. The Established View on the Permission System
By default, all Android apps run as low-privileged processes at the Linux kernel level, limiting their access to system capabilities. To interact with other applications and system services, Android uses a special inter-component communication (ICC) protocol called Binder. The Android permission system controls these interactions by assigning unique security labels (permissions) to sensitive resources. Once an app is granted a permission, it gains access to the corresponding protected object; otherwise, interactions are prohibited.

Permissions are declared by developers in the `AndroidManifest.xml` file and assigned to protected resources. Other packages can request access by declaring the corresponding permission in their own `AndroidManifest.xml` file. Platform permissions are declared within the Android operating system itself, either in the Android framework or in the packages supplied with the platform. Third-party developers can also declare custom permissions to protect their app components.

Upon declaration, each Android permission is assigned a protection level, which defines how and to whom the permission is granted. Starting with Android 0.9 [31], permissions were divided into four levels: normal, dangerous, signature, and `signature|system`. Normal permissions were granted automatically, while dangerous permissions required user consent during app installation. Signature permissions were granted if the declaring and using packages were signed with the same certificate. `Signature|system` permissions acted like signature permissions but could also be granted to apps installed in the system partition. Prior to Android 6.0, all permissions were granted or denied at installation time.

Permissions can belong to a permission group, which clusters security labels according to specific functionality. Permission groups were introduced to simplify the presentation but were not widely adopted in "vanilla" Android, though they were used in the Google Play client application.

This view of the Android permission system was widely accepted in research, but the system continuously evolved, with changes often going unnoticed.

---

## 3. New Android Permission System Overview
In Android 6.0, permissions are divided into installation and runtime. Normal, signature, and `signature|system` permissions are granted upon app installation, while dangerous permissions are checked at runtime. The `signature|system` protection level is deprecated starting in Android 6.0, but our analysis shows that such permissions still exist (see Sections 5 and 6 for details).

Previously, dangerous permissions required user approval during app installation. In Android 6.0, the screen to grant runtime permissions is not shown (for apps targeting API 23 and up). Instead, all runtime permissions are disabled after installation and must be approved by the user when the app needs access to the protected functionality.

To support runtime permissions, special API calls were added to `PackageManager` to grant and revoke permissions dynamically. New APIs allow developers to check and request permissions at runtime. Within the Settings app, users can review, grant, and revoke runtime permissions on two screens: one grouped by app and the other by permission group.

New applications must be forward-compatible with older Android versions. To ensure compatibility, Google provided a compatibility library that proxies permission check calls. However, this proxy relies on the `Context.checkPermission` API call, which always passes in previous Android versions, leading to unexpected behavior (see Section 6).

Legacy apps are backward-compatible with the new Android version through the AppOps system, which allows users to grant and revoke permissions at runtime via the Settings app. This hidden app permission manager appeared in Android 4.3, was suppressed in Android 4.4.2, and reappeared in Android 6.0. However, AppOps handles only platform permissions and cannot enforce custom dangerous permissions.

Upon installation of a legacy app, the user is presented with the old grant permission screen. The user must agree to the permissions, or the app will not be installed. This behavior differs from apps targeting Android 6.0, leading to inconsistent user experiences (see Section 6 for details).

Runtime permissions are granted per permission group. If one permission in a group is granted or revoked, the same applies to all permissions in the group. For example, if an app is granted `READ_CONTACTS`, it automatically receives `WRITE_CONTACTS` (if requested), as both belong to the `CONTACTS` group. Android 6.0 defines nine permission groups for dangerous permissions: `CALENDAR`, `CAMERA`, `CONTACTS`, `LOCATION`, `MICROPHONE`, `PHONE`, `SENSORS`, `SMS`, and `STORAGE`.

Before, it was assumed that third-party apps could not obtain signature permissions unless signed with the same certificate. In Android 6.0, new `appop` permissions (e.g., `PACKAGE_USAGE_STATS`, `WRITE_SETTINGS`, and `SYSTEM_ALERT_WINDOW`) can be granted to third-party apps with explicit user consent through Settings.

We continue to explore the changes to the Android permission system and their implications for security analysis in Section 6.

---

## 4. Permission System Implementation Details
The behavior of permissions is controlled by assigning special string values to attributes (`android:protectionLevel` and `android:permissionFlags`) in the `AndroidManifest.xml` file. During package installation, these values are parsed and influence the bits of two 32-bit integer fields (`protectionLevel` and `flags`) in the `PermissionInfo` class. This section reviews how the bits of these fields affect the permissions' behavior.

[Insert detailed technical explanation and diagrams here]

---

**Acknowledgments:**
We thank the anonymous reviewers for their comments, which helped improve the paper. We are also grateful to William Enck for his guidance and suggestions. The work of Olga Gadyatskaya was supported by the Luxembourg National Research Fund (C15/IS/10404933/COMMA).

**Copyright:**
© Springer International Publishing Switzerland 2016. Published in the proceedings of RAID 2016, LNCS 9854, pp. 346–367, 2016. DOI: 10.1007/978-3-319-45719-2_16.