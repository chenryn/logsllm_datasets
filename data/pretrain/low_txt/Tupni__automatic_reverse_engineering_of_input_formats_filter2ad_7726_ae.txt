### Introduction to the New Signature Generation System

The new signature generation system automatically produces the same vulnerability signatures as those described in [14]. However, existing reverse engineering tools such as [6, 12, 26, 42] are not suitable for the ShieldGen application. These tools fail to reliably identify record sequences across a broad range of input formats. For example, in the case of WMF (Windows Metafile), the inability to identify record sequences prevents the system from eliminating iterative elements. As a result, the generated vulnerability signature is specific to the attack instance and may include thousands of conditions if the attack instance contains thousands of draw records.

In contrast, Tupni can identify not only fields but also record sequences and important constraints. This capability allows it to generate high-quality vulnerability signatures.

### Related Work

Network protocols and file formats have traditionally been subject to manual reverse engineering [18, 36]. Recently, there has been increasing interest in automating this process.

#### Automatic Protocol Reverse Engineering

- **Protocol Informatics Project [35]** and **Discoverer [12]**: These projects analyze network traces to infer protocol formats.
- **Fisher et al. [17]**: They presented a system that automatically infers the structure of an ad hoc data source and generates a format specification in the PADS data description language. The system infers structural relationships based on the frequency histogram of all tokens in the input. These systems are useful when a parsing program is unavailable, but leveraging a parsing program can significantly improve the quality of the reverse-engineered format.

#### Dynamic Data Flow Analysis

- **Polyglot [6]**: Uses dynamic data flow analysis to reverse engineer network message formats. Polyglot can identify basic fields and certain dependencies, such as length fields. However, it infers a message format as a "flat" sequence of fields and cannot infer record sequences common in network protocols and file formats. Additionally, Polyglot does not generalize a network message format over multiple samples.
- **AutoFormat [26]**: Employs context-aware monitored execution to reverse engineer network message formats. It groups contiguous inputs accessed consecutively in a function as a field, which works well for ASCII strings but fails for complex data structures. AutoFormat identifies record sequences by marking input positions read by the same functions, but this heuristic can produce false positives with complex input formats. It also does not recognize nested record sequences or attempt to identify record types or aggregate the analysis over multiple input samples.

#### Other Approaches

- **Wondracek et al. [42]**: Proposed a system for automatic network protocol analysis. While it can break down input chunks into individual bytes, it may fail to identify binary fields with more than one byte. It can only identify record sequences where all records are structurally identical, limiting its effectiveness with complex formats like HTTP, WMF, JPG, PNG, and TIF. Unlike Polyglot and AutoFormat, this system can generalize a network message format over multiple messages, but its sequence alignment algorithm may introduce inaccuracies due to the lack of type information for individual byte fields.

#### Comparison with Tupni

Compared to previous efforts, Tupni makes significant advances:
1. **Identification of Record Sequences**: Tupni can identify arbitrary record sequences, including nested ones, by analyzing loops in a program.
2. **Inference of Field or Record Types**: Tupni infers field or record types by comparing the set of instructions that process each field or record.
3. **Derivation of Constraints**: Tupni can derive various, not pre-defined, dependencies across fields or messages by tracking symbolic predicates from dynamic data flow analysis.
4. **Aggregation of Analysis**: Tupni improves its format specifications by aggregating its analysis over multiple inputs.

#### Parallel Research

- **Lin and Zhang [27]**: Developed dynamic analysis techniques to derive syntactic structures of inputs with top-down or bottom-up grammars. However, their system assumes that program control dependence follows the parsing structure, which may not hold in real-world programs. Unlike Tupni, it does not aggregate the analysis over multiple inputs or infer input constraints.

#### Static Analysis

- **Lim et al. [25]**: Proposed FFE/X86, a binary static analysis tool that infers file formats based on the program's output routines. The system can generate grammars with alternation and repetition but requires manual annotations to the executable.

#### Specific Applications

- **Replay Systems**: RolePlayer [13], ScriptGen [23, 24], and Replayer [29] use byte-wise sequence alignment techniques to achieve application-level replay.
- **Session Structure Discovery**: Kannan et al. [22] semi-automatically discover session structures.
- **Binary Static Analysis**: Christodorescu et al. [8] perform binary static analysis to infer all possible strings at a given program point.

#### Security Applications

Dynamic data flow analysis has been used in various security applications, including exploit detection, patch generation, worm containment, and fuzz testing [10, 11, 14, 15, 19, 30, 31].

### Limitations and Future Work

#### Limitations

1. **Coverage Dependency**: The coverage of Tupni's reverse-engineered format depends on the diversity of input samples. This limitation can be mitigated by constructing new inputs to probe the program, as shown by ShieldGen [14] and SAGE [19], or by combining dynamic analysis with static analysis.
2. **Specific Constraints**: The constraints identified by Tupni may be specific to the input samples, a general limitation of dynamic analysis. Techniques presented in ShieldGen [14] and Bouncer [9] can help mitigate this issue.

#### Input Format Challenges

- **Field Boundaries**: Tupni does not work well for formats whose field boundaries do not coincide with byte boundaries, such as encrypted and compressed file formats. This problem could be resolved with a more sophisticated implementation.
- **Complex Formats**: Formats that cannot be described as regular expressions, such as C language specifications, pose challenges for Tupni.

#### Quality of Parsing Application

The quality of Tupni's output depends on the quality of the parsing application. Applications that neglect to compute checksums, ignore fields, or deviate from published specifications reveal no information about those aspects. Running multiple parsing applications on the input samples can help mitigate this problem.

### Conclusions

Tupni is a tool designed to reverse engineer input formats. By observing that applications typically process iterative data records in loops, Tupni can automatically identify (nested) record sequences and record types in input formats. It can also find various types of constraints on field values and generalize input formats over multiple inputs. We have demonstrated that Tupni can effectively reverse engineer 10 common, real-world file and network message formats. Given the rich set of information available in the input formats reverse-engineered by Tupni, it can potentially be used for security applications such as zero-day vulnerability signature generation.

### Acknowledgments

We would like to thank Xuxian Jiang for his valuable comments on an early draft of this paper. We are grateful to Andrew Edwards, Stuart de Jong, and Jinlin Yang for helping us understand iDNA. We also want to thank the anonymous reviewers for their constructive comments.

### References

[1] International Telecommunication Union Recommendation T.81: JPEG Specification. http://www.w3.org/Graphics/JPEG/itu-t81.pdf.
[2] TIFF Revision 6.0. http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf.
[3] A. Aho, M. Lam, R. Sethi, and J. Ullman. Compilers: Principles, Techniques, and Tools. Addison-Wesley, 2007.
[4] S. Bhansali, W.-K. Chen, S. de Jong, A. Edwords, R. Murray, M. Drinic, D. Mihocka, and J. Chau. Framework for instruction-level tracing and analysis of program executions. In Proceedings of the Second International Conference on Virtual Execution Environments, Ottawa, Canada, June 2006.
[5] N. Borisov, D. J. Brumley, H. J. Wang, J. Dunagan, P. Joshi, and C. Guo. A Generic Application-Level Protocol Analyzer and its Language. In Proceedings of the 14th Annual Network & Distributed System Security Symposium (NDSS), March 2007.
[6] J. Caballero, H. Yin, Z. Liang, and D. Song. Polyglot: Automatic Extraction of Protocol Message Format using Dynamic Binary Analysis. In Proceedings of the 14th ACM Conference on Computer and Communications Security, Alexandria, VA, October 2007.
[7] B. Chandra and M. Halldórsson. Greedy local improvement and weighted setpacking. Journal of Algorithms, 39(2):223–240, 2001.
[8] M. Christodorescu, N. Kidd, and W.-H. Goh. String analysis for x86 binaries. 6th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering (PASTE 2005), 31(1):88–95, 2006.
[9] M. Costa, M. Castro, L. Zhou, L. Zhang, and M. Peinado. Bouncer: Securing Software by Blocking Bad Input. In Proceedings of the 21st ACM Symposium on Operating Systems Principles (SOSP), pages 117–130, 2007.
[10] M. Costa, J. Crowcroft, M. Castro, and A. Rowstron. Vigilante: End-to-End Containment of Internet Worms. In Proceedings of the Symposium on Systems and Operating Systems Principles (SOSP 2005), 2005.
[11] J. R. Crandall and F. T. Chong. Minos: Control Data Attack Prevention Orthogonal to Memory Model. In Proceedigns of the 37th Annual IEEE/ACM International Symposium on Microarchitecture (Micro-37), Portland, OR, December 2004.
[12] W. Cui, J. Kannan, and H. J. Wang. Discoverer: Automatic Protocol Reverse Engineering from Network Traces. In Proceedings of the 16th USENIX Security Symposium, Boston, MA, August 2007.
[27] Z. Lin and X. Zhang. Deriving input syntactic structure from execution. In Proceedings of the 16th ACM SIGSOFT International Symposium on the Foundations of Software Engineering, November 2008.
[13] W. Cui, V. Paxson, N. C. Weaver, and R. H. Katz. Protocol-Independent Adaptive Replay of Application Dialog. In Proceedings of the 13th Symposium on Network and Distributed System Security (NDSS 2006), February 2006.
[14] W. Cui, H. J. Wang, M. Peinado, and M. Locasto. ShieldGen: Automated Data Patch Generation for Unknown Vulnerabilities with Informed Probing. In Proceedings of the 2007 IEEE Symposium on Security and Privacy, May 2007.
[15] M. D. Ernst, J. H. Perkins, P. J. Guo, S. McCamant, C. Pacheco, M. S. Tschantz, and C. Xiao. The Daikon System for Dynamic Detection of Likely Invariants. 2007.
[16] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee. RFC 2616: Hypertext Transfer Protocol – HTTP/1.1. http://www.w3.org/Protocols/rfc2616/rfc2616.html.
[28] P. Mockapetris. RFC 1035: Domain Names - Implementation and Specification. http://www.faqs.org/rfcs/rfc1035.html.
[29] J. Newsome, D. Brumley, J. Franklin, and D. Song. Replayer: Automatic Protocol Replay by Binary Analysis. In Proceedings of the 13th ACM Conference on Computer and Communications Security (CCS), pages 311–321, 2006.
[30] J. Newsome, D. Brumley, and D. Song. Vulnerability-specific execution filtering for exploit prevention on commodity software. In Proceeding of the Network and Distributed System Security Symposium (NDSS), 2006.
[31] J. Newsome and D. Song. Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software. In Proceedings of the 12th Symposium on Network and Distributed System Security (NDSS), February 2005.
[17] K. Fisher, D. Walker, K. Q. Zhu, and P. White. From dirt to shovels: Fully automatic tool generation from ad hoc data. In Proceedings of the 35th Annual Symposium on Principles of Programming Languages, January 2008.
[18] Gaim Instant Messaging Client. http://gaim.sourceforge.net.
[19] P. Godefroid, M. Levin, and D. Molnar. Automated Whitebox Fuzz Testing. In Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS), February 2008.
[20] T. O. Group. DCE 1.1: Remote Procedure Call. http://www.opengroup.org/onlinepubs/9629399/toc.htm.
[21] E. Hazan, S. Safra, and O. Schwartz. On the complexity of approximating k-set packing. Computational Complexity, 15(1):20–39, 2006.
[22] J. Kannan, J. Jung, V. Paxson, and C. E. Koksal. Semi-Automated Discovery of Application Session Structure. In Proceedings of the 2006 Internet Measurement Conference (IMC), Rio de Janeiro, Brazil, October 2006.
[23] C. Leita, M. Dacier, and F. Massicotte. Automatic Handling of Protocol Dependencies and Reaction to 0-Day Attacks with ScriptGen Based Honeypots. In Proceedings of the 9th International Symposium on Recent Advances in Intrusion Detection, Hamburg, Germany, September 2006.
[24] C. Leita, K. Mermoud, and M. Dacier. ScriptGen: An Automated Script Generation Tool for Honeyd. In Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005), December 2005.
[25] J. Lim, T. Reps, and B. Liblit. Extracting File Formats from Executables. In S. E. Sim and M. Di Penta, editors, Proceedings of the 13th Working Conference on Reverse Engineering, Benevento, Italy, Oct. 23–27 2006.
[26] Z. Lin, X. Jiang, D. Xu, and X. Zhang. Automatic Protocol Format Reverse Engineering through Context-Aware Monitored Execution. In Proceedings of NDSS'2008, 2008.
[32] R. Pang, V. Paxson, R. Somer, and L. Peterson. binpac: A yacc for Writing Application Protocol Parsers. In Proceedings of the 2006 Internet Measurement Conference, October 2006.
[33] V. Paxson. Bro: A System for Detecting Network Intruders in Real Time. Computer Networks, 31(23):2435–2463, 1999.
[34] J. Postel and J. Reynolds. RFC 959: File Transfer Protocol (FTP). http://www.faqs.org/rfcs/rfc959.html.
[35] The Protocol Informatics Project. http://www.baselineresearch.net/PI/.
[36] How Samba Was Written. http://samba.org/ftp/tridge/misc/french_cafe.txt.
[37] K. Sollins. RFC 1350: The TFTP Protocol (Revision 2). http://www.faqs.org/rfcs/rfc1350.html.
[38] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas. Secure Program Execution via Dynamic Information Flow Tracking. In Proceedings of the 11th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-XI), October 2004.
[39] T. Swan. Inside Windows File Formats. Sams Publishing, 1993.
[40] T. Boutell, et. al. RFC 2083: PNG (Portable Network Graphics) Specification. http://www.faqs.org/rfcs/rfc2083.html.
[41] H. J. Wang, C. Guo, D. R. Simon, and A. Zugenmaier. Shield: Vulnerability-Driven Network Filters for Preventing Known Vulnerability Exploits. In Proceedings of the ACM SIGCOMM, August 2004.
[42] G. Wondracek, C. Kruegel, E. Kirda, and P. Milani. Automatic Network Protocol Analysis. In Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS), February 2008.