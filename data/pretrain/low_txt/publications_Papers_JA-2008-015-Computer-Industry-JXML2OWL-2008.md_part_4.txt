# Monitoring and Correcting External Messages

To ensure consistency, we monitor, evaluate, and correct deficiencies in external messages from suppliers, partners, and customers to align with internal vocabularies. JXML2OWL is a tool designed to bridge the gap between XML and OWL specifications by proposing a strategy to map external vocabularies and documents represented in XML Schema to internal vocabularies and documents represented in existing OWL ontologies. This process transforms XML data (instances of the mapped XML Schema) into instances of the ontology according to the performed mapping.

## 4.3 JXML2OWL Implementation

As described in Section 2, the JXML2OWL API and the Mapper tool are implemented in Java. The mapping rules are encapsulated within an XSL document to automatically support the transformation of XML instances into individuals. The mapping process involves several steps:

1. **Project Creation and Loading:**
   - Create a new mapping project.
   - Load both the XML schema-related file (XSD or DTD) and the OWL ontology.
   - If an XML schema is not available, load an XML document, and JXML2OWL will extract a possible schema.

2. **Class Mapping:**
   - Create class mappings between elements of the loaded XML schema and concepts of the ontology.
   - Relate these mappings to each other to create object property mappings, or relate them with elements of the XML schema to create datatype property mappings.

3. **Exporting Transformation Rules:**
   - Export the transformation rules, generated based on the mappings, as an XSL document.
   - Use this XSL document to transform any XML document that validates against the mapped XML schema into individuals of the mapped OWL ontology.

The JXML2OWL API and Mapper support all these steps. JXML2OWL supports one-to-one, many-to-one, one-to-many, and many-to-many mappings, allowing an element of the XML schema to be mapped to multiple OWL classes and vice versa. Additional features include saving the state of a mapping project in an XML file for later resumption and directly transforming XML instances into OWL individuals using the JXML2OWL Mapper.

The main methods provided by the API are derived from the notation proposed in Section 3, and the Mapper offers a user-friendly interface for all API features. Figure 4 illustrates the JXML2OWL Mapper tool with several mappings created.

### JXML2OWL Mapper Interface
The JXML2OWL Mapper tool is divided into two main parts:
- **Left Side:** Represents the XML schema.
- **Right Side:** Displays the OWL classes defined by the ontology.
- **Mapping Zone:** Allows drag-and-drop creation of mappings between XML schema elements and OWL classes.
- **Selected Class Mapping Details:** Shows the XML node used as an ID for the selected class mapping, along with all related datatype and object property mappings.

For example, the `/lecturers/lecturer` node from the XML schema is mapped to the `teacher:Teacher` class in the ontology, while `/lecturers/lecturer/teaches/course` is mapped to `teacher:Course`. These class mappings are related through an object property mapping, and datatype property mappings like `teacher:age` and `teacher:email` are also displayed.

### Performance Assessment
To evaluate the performance of the instance transformation process, we created a mapping project with 9 class mappings, 14 datatype property mappings, and 14 object property mappings. We transformed three XML documents of different sizes, which validate against the mapped schema, using the generated XSL document. The performance results are shown in Table 3.

| Lines | Size In (XML File) | Size Out (OWL Instance File) | Processing Time |
|-------|-------------------|------------------------------|-----------------|
| 385   | 10.2 KB           | 28 KB                        | 0.266s          |
| 3805  | 102 KB            | 254 KB                       | 3.734s          |
| 38005 | 1068 KB           | 1943 KB                      | 5m 14.609s      |

During our performance evaluation, we observed that the processing time did not scale well with the size of the XML input document. This is primarily due to the time-consuming process of detecting and eliminating duplicate instances and properties, which requires multiple passes through the XML instances, especially in cases with many-to-one mappings.

## 4.4 Commercial Applications

Several commercial systems and tools use RDF and OWL as representation languages, facilitating the deployment of semantic Web applications. Some notable solutions include:

- **Altova SemanticWorks™ 2007 (www.altova.com):** A visual RDF/OWL editor that allows the creation and editing of RDF, RDF Schema, OWL Lite, OWL DL, and OWL Full documents using an intuitive, visual interface and drag-and-drop functionality.
- **Oracle Spatial 10g (www.oracle.com):** Introduces the industry’s first RDF management platform, supporting the persistence, indexing, and querying of RDF triples, and offering scalable and secure semantic applications. Oracle’s RDF Database (11g) will support native OWL inferencing.
- **Metatomix (www.metatomix.com):** Developed the Metatomix Semantic Toolkit, a set of Eclipse plugins for creating and managing ontologies based on OWL standards.
- **TopQuadrant (www.topquadrant.com):** Released TopBraid Composer, a professional development environment for W3C’s Semantic Web standards, including RDF Schema, OWL, SPARQL Query Language, and SWRL.

## 5. Conclusions

Data storage technologies have evolved to meet the needs of enterprises. Initially stored in flat files, data moved to relational databases in the 1970s, and SQL became a standard in the 1980s. With the advent of the internet and XML, traditional EDI solutions were replaced by XML-based EDI. Mapping tools were developed to facilitate the transition between different technologies and schemas. More recently, XML-enabled databases and native XML databases have emerged, providing better interoperability at the syntactic level. However, organizations are now shifting towards semantic interoperability, where RDF and OWL play a crucial role.

JXML2OWL, successfully implemented in the SEED project, maps XML schemas to existing OWL ontologies and transforms XML instances into individuals. This transformation is essential for organizations moving from syntactic to semantic data representations. By using semantic domain models based on ontologies, enterprises can perform inference on a knowledge base and easily share and integrate data.

We believe the JXML2OWL framework is suitable for integrating any XML data into semantic information systems based on OWL ontologies. The framework is ready-to-use and available for download at [http://jxml2owl.projects.semwebcentral.org/](http://jxml2owl.projects.semwebcentral.org/). Our research and prototype implementation highlight the need for semantic mapping tools and encourage further development in this area.

## 6. Acknowledgments

This work was partially funded by grants from the FCT, POCTI-219, and FEDER.

## 7. References

[1] Berners-Lee T, Miller E. The Semantic Web lifts off. Special Issue of ERCIM News 2002; 51:9-11.
[2] Cardoso J. Semantic Web Services: Theory, Tools and Applications. New York: IGI Global; 2007.
[3] Davis M. The Business Value of Semantic Technologies. A TopQuadrant Special Report 2004.
[4] Oracle. Semantic Data Integration for the Enterprise (White paper); 2007.
[5] Fensel D. Ontologies: Silver Bullet for Knowledge Management and Electronic Commerce. 2nd ed. Berlin: Springer-Verlag; 2003.
[6] Yager T. The Future of Application Integration. InfoWorld; 2002.
[7] White C. Data Integration: Still a Barrier for Most Organizations. April 2006 Issue of DM Review.
[8] Alexie V, Breu M, de Bruijn J, Fensel D, Lara D, Lausen H. Information Integration with Ontologies: Experiences from an Industrial Showcase. John Wiley & Sons; 2007.
[9] Roth M. A, Wolfson D. C, Kleeweln J. C, Nelin C. J. Information integration: A new generation of information technology. IBM Systems Journal 2002; 41(4):563-577.
[10] Gold-Bernstein B. Enterprise Information Integration – What was old is new again. ebizQ, 2004.
[11] Sheth A. A Semantic Meta Data Approach to Enterprise Information Integration. July 2003 Issue of DM Review.
[12] Gruber T. A translation approach to portable ontology specifications. Knowledge Acquisition 1993; 5(2): 199-220.
[13] Silva B, Cardoso J. Semantic Data Extraction for B2B Integration. International Workshop on Distributed Applications for B2B Integration (DABI) 2006. Lisboa, Portugal, IEEE Computer Society.
[14] Cardoso J. Integrating HAD Organizational Data Assets using Semantic Web Technologies. 3rd International Conference Interoperability for Enterprise Software and Applications (I-ESA 2007), Funchal, Portugal. In: Gonçalves R, Müller J, Mertins K, Zelm M. Enterprise Interoperability II 2007. Springer. p. 333-344.
[15] Bussler C. B2B Integration: Concepts and Architecture, Springer-Verlag; 2003.
[16] Horrocks I, Patel-Schneider P, Boley H, Tabet S, Grosof B, Dean M. SWRL: A Semantic Web Rule Language Combining OWL and RuleML. 2003.
[17] Horrocks I, Patel-Schneider P. A Proposal for an OWL Rules Language (Draft Version of 16 October 2003).
[18] Cardoso J, Miller J, Su J, Pollock J. Academic and Industrial Research: Do their Approaches Differ in Adding Semantics to Web Services. In: Cardoso J, Sheth A. Semantic Web Process: powering next generation of processes with Semantics and Web services. Heidelberg: Springer-Verlag; 2005.
[19] Ehrig M, Sure Y. FOAM - Framework for Ontology Alignment and Mapping: Results of the Ontology Alignment Initiative. In: Ashpole B, Ehrig M, Euzenat J, Stuckenschmidt H. Workshop on Integrating Ontologies. Alberta, Canada: CEUR-WS. 156:72-6; 2005.
[20] Aumueller D, Do H, Massmann S, Rahm E. Schema and ontology matching with COMA++. In: International Conference on Management of Data 2005; Baltimore: ACM Press, p. 906-8.
[21] Ferdinand M, Zirpins C, Trastour D. Lifting XML Schema to OWL. In: Koch N, Fraternali P, Wirsing M. 4th International Conference Web Engineering 2004. Heidelberg: Springer, p. 354-8.
[22] Garcia R, Perdrix F, Gil R. Ontological Infrastructure for a Semantic Newspaper. In: First International on Semantic Web Annotations for Multimedia Workshop (SWAMM'06); 2006.
[23] Bohring H, Auer S. Mapping XML to OWL Ontologies. In: Jantke K, Fähnrich K, Wittig W. Marktplatz Internet: Von e-Learning bis e-Payment: 13. Leipziger Informatik-Tage (LIT2005). Leipzig, p. 147-156.
[24] Bray T, Paoli J, Sperberg-McQueen CM, Maler E, Yergeau F. Extensible Markup Language (XML) 1.0 (Fourth Edition). W3C Recommendation; 2004.
[25] Bechhofer S, Van Harmelen F, Hendler J, Horrocks I, McGuinness D, Patel-Schneider P, et al. OWL Web Ontology Language Reference. W3C Recommendation; 2004.
[26] Clark J, DeRose S. XML Path Language (XPath). W3C Recommendation; 1999.
[27] Klyne G, Caroll J, McBride B. Resource Description Framework (RDF): Concepts and Abstract Syntax. W3C Recommendation; 2002.
[28] Cardoso J, Sheth A. Semantic Web Services, Processes and Applications. Springer; 2006.
[29] Bray T, Hollander D, Layman A, Tobin R. Namespaces in XML 1.0 (Second Edition). W3C Recommendation; 2006.
[30] Mitem, Information Integration for the Public Sector, 2002.
[31] EBizQ. Semantic Integration: A New Approach to an Old Problem. Software AG; 2005.
[32] Ruh W. The Web of Meaning: The Business Value of the Semantic Web. Cisco Systems; 2004.
[33] DuCharme B. Converting XML to RDF. O’Reilly xml.com; 2004.

## 8. Vitae

**Toni Rodrigues** is a software designer and developer who joined SQLI (France) in 2006. He works as a software consultant in financial messaging and SWIFT payment systems. Previously, he was a member of the SEED Laboratory, working on emergent information systems. He wrote his Master's thesis on semantic data integration and graduated from the University of Madeira in Computer Science. His current areas of interest include service-oriented architectures, web services, and the Semantic Web.

**Pedro Rosa** is a software developer who joined Expedita – Arquitectura e Gestão de Sistemas de Informação in 2006. He works as a consultant and developer of web-based applications in the Tourism and Maritime Transportation sectors. His areas of interest include service-oriented architecture, system integrations, and the Semantic Web. He graduated in Computer Science from the University of Madeira and wrote his Master's thesis on semantic data integration as a member of the SEED laboratory.

**Prof. Dr. Jorge Cardoso** joined SAP Research (Germany) in 2007 and is also a Professor at the University of Madeira (Portugal). He has given lectures at the University of Georgia (USA) and the Instituto Politécnico de Leiria (Portugal). In 1999, he worked at the Boeing Company on enterprise application integration. Dr. Cardoso has organized several international conferences on the Semantic Web and Information Systems. He has published over 80 refereed papers in the areas of workflow management systems, the Semantic Web, and related fields. He has edited three books on the Semantic Web and Web services and serves on the Editorial Board of the Enterprise Information Systems Journal, the International Journal on Semantic Web and Information Systems, and the International Journal of Information Technology.

## 9. Figure Captions

- **Figure 1:** A semantic data integration approach.
- **Figure 2:** Java XML to OWL concept.
- **Figure 3:** Internal and external vocabularies.
- **Figure 4:** JXML2OWL Mapper.

## 10. Table Captions

- **Table 1:** Elements that need to be considered when mapping XML to OWL.
- **Table 2:** Mapping notation.
- **Table 3:** Performance assessment.