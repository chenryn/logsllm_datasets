# LeetCode Problem List and Introduction

## Page 10
- **658. Find K Closest Elements**
- **661. Image Smoother**
- **662. Maximum Width of Binary Tree**
- **668. Kth Smallest Number in Multiplication Table**
- **676. Implement Magic Dictionary**
- **682. Baseball Game**
- **684. Redundant Connection**
- **685. Redundant Connection II**
- **693. Binary Number with Alternating Bits**
- **695. Max Area of Island**
- **697. Degree of an Array**
- **699. Falling Squares**
- **704. Binary Search**
- **705. Design HashSet**
- **706. Design HashMap**
- **707. Design Linked List**
- **710. Random Pick with Blacklist**
- **713. Subarray Product Less Than K**
- **714. Best Time to Buy and Sell Stock with Transaction Fee**
- **715. Range Module**
- **717. 1-bit and 2-bit Characters**
- **718. Maximum Length of Repeated Subarray**
- **719. Find K-th Smallest Pair Distance**
- **720. Longest Word in Dictionary**
- **721. Accounts Merge**
- **725. Split Linked List in Parts**
- **726. Number of Atoms**
- **729. My Calendar I**
- **732. My Calendar III**
- **733. Flood Fill**
- **735. Asteroid Collision**
- **739. Daily Temperatures**
- **744. Find Smallest Letter Greater Than Target**
- **745. Prefix and Suffix Search**
- **746. Min Cost Climbing Stairs**
- **748. Shortest Completing Word**
- **753. Cracking the Safe**
- **756. Pyramid Transition Matrix**
- **762. Prime Number of Set Bits in Binary Representation**
- **763. Partition Labels**
- **765. Couples Holding Hands**
- **766. Toeplitz Matrix**

---

## Page 11
- **767. Reorganize String**
- **771. Jewels and Stones**
- **778. Swim in Rising Water**
- **781. Rabbits in Forest**
- **784. Letter Case Permutation**
- **786. K-th Smallest Prime Fraction**
- **793. Preimage Size of Factorial Zeroes Function**
- **802. Find Eventual Safe States**
- **803. Bricks Falling When Hit**
- **811. Subdomain Visit Count**
- **812. Largest Triangle Area**
- **815. Bus Routes**
- **817. Linked List Components**
- **819. Most Common Word**
- **826. Most Profit Assigning Work**
- **828. Unique Letter String**
- **832. Flipping an Image**
- **834. Sum of Distances in Tree**
- **836. Rectangle Overlap**
- **838. Push Dominoes**
- **839. Similar String Groups**
- **841. Keys and Rooms**
- **842. Split Array into Fibonacci Sequence**
- **844. Backspace String Compare**
- **845. Longest Mountain in Array**
- **850. Rectangle Area II**
- **851. Loud and Rich**
- **852. Peak Index in a Mountain Array**
- **853. Car Fleet**
- **856. Score of Parentheses**
- **862. Shortest Subarray with Sum at Least K**
- **863. All Nodes Distance K in Binary Tree**
- **864. Shortest Path to Get All Keys**
- **867. Transpose Matrix**
- **872. Leaf-Similar Trees**
- **875. Koko Eating Bananas**
- **876. Middle of the Linked List**
- **878. Nth Magical Number**
- **880. Decoded String at Index**
- **881. Boats to Save People**
- **884. Uncommon Words from Two Sentences**
- **885. Spiral Matrix III**
- **887. Super Egg Drop**
- **888. Fair Candy Swap**
- **891. Sum of Subsequence Widths**
- **892. Surface Area of 3D Shapes**
- **895. Maximum Frequency Stack**
- **896. Monotonic Array**
- **897. Increasing Order Search Tree**

---

## Page 12
- **898. Bitwise ORs of Subarrays**
- **901. Online Stock Span**
- **904. Fruit Into Baskets**
- **907. Sum of Subarray Minimums**
- **911. Online Election**
- **914. X of a Kind in a Deck of Cards**
- **918. Maximum Sum Circular Subarray**
- **920. Number of Music Playlists**
- **921. Minimum Add to Make Parentheses Valid**
- **922. Sort Array By Parity II**
- **923. 3Sum With Multiplicity**
- **924. Minimize Malware Spread**
- **925. Long Pressed Name**
- **927. Three Equal Parts**
- **928. Minimize Malware Spread II**
- **930. Binary Subarrays With Sum**
- **933. Number of Recent Calls**
- **942. DI String Match**
- **946. Validate Stack Sequences**
- **947. Most Stones Removed with Same Row or Column**
- **949. Largest Time for Given Digits**
- **952. Largest Component Size by Common Factor**
- **953. Verifying an Alien Dictionary**
- **959. Regions Cut By Slashes**
- **961. N-Repeated Element in Size 2N Array**
- **968. Binary Tree Cameras**
- **969. Pancake Sorting**
- **970. Powerful Integers**
- **973. K Closest Points to Origin**
- **976. Largest Perimeter Triangle**
- **977. Squares of a Sorted Array**
- **978. Longest Turbulent Subarray**
- **979. Distribute Coins in Binary Tree**
- **980. Unique Paths III**
- **981. Time Based Key-Value Store**
- **984. String Without AAA or BBB**
- **985. Sum of Even Numbers After Queries**
- **986. Interval List Intersections**
- **990. Satisfiability of Equality Equations**
- **992. Subarrays with K Different Integers**
- **993. Cousins in Binary Tree**
- **995. Minimum Number of K Consecutive Bit Flips**
- **996. Number of Squareful Arrays**
- **999. Available Captures for Rook**
- **1002. Find Common Characters**
- **1003. Check If Word Is Valid After Substitutions**
- **1004. Max Consecutive Ones II**
- **1005. Maximize Sum Of Array After K Negations**
- **1011. Capacity To Ship Packages Within D Days**

---

## Page 13
- **1017. Convert to Base -2**
- **1019. Next Greater Node In Linked List**
- **1020. Number of Enclaves**
- **1021. Remove Outermost Parentheses**
- **1025. Divisor Game**
- **1026. Maximum Difference Between Node and Ancestor**
- **1028. Recover a Tree From Preorder Traversal**
- **1030. Matrix Cells in Distance Order**
- **1037. Valid Boomerang**
- **1040. Moving Stones Until Consecutive II**
- **1047. Remove All Adjacent Duplicates In String**
- **1049. Last Stone Weight II**
- **1051. Height Checker**
- **1052. Grumpy Bookstore Owner**
- **1054. Distant Barcodes**
- **1073. Adding Two Negabinary Numbers**
- **1074. Number of Submatrices That Sum to Target**
- **1078. Occurrences After Bigram**
- **1079. Letter Tile Possibilities**
- **1089. Duplicate Zeros**
- **1093. Statistics from a Large Sample**
- **1105. Filling Bookcase Shelves**
- **1108. Defanging an IP Address**
- **1110. Delete Nodes And Return Forest**
- **1111. Maximum Nesting Depth of Two Valid Parentheses Strings**
- **1122. Relative Sort Array**
- **1123. Lowest Common Ancestor of Deepest Leaves**
- **1128. Number of Equivalent Domino Pairs**
- **1137. N-th Tribonacci Number**
- **1145. Binary Tree Coloring Game**
- **1154. Day of the Year**
- **1157. Online Majority Element In Subarray**
- **1160. Find Words That Can Be Formed by Characters**
- **1170. Compare Strings by Frequency of the Smallest Character**
- **1171. Remove Zero Sum Consecutive Nodes from Linked List**
- **1175. Prime Arrangements**
- **1184. Distance Between Bus Stops**
- **1185. Day of the Week**
- **1189. Maximum Number of Ballons**
- **1200. Minimum Absolute Difference**
- **1201. Ugly Number III**
- **1202. Smallest String With Swaps**
- **1207. Unique Number of Occurrences**
- **1208. Get Equal Substrings Within Budget**
- **1217. Play with Chips**
- **1221. Split a String in Balanced Strings**
- **1232. Check If It Is a Straight Line**
- **1234. Replace the Substring for Balanced String**
- **1235. Maximum Profit in Job Scheduling**

---

## Page 14
### Introduction to LeetCode
LeetCode is a well-known platform for programmers, especially those preparing for technical interviews. Founded in 2011, it has become an essential resource for honing algorithmic skills. The site hosts weekly, bi-weekly, and monthly coding contests, providing a challenging environment that tests one's ability to solve problems under time constraints. Top performers in sponsored competitions often receive prizes and direct referrals to major tech companies.

### What is a Cookbook?
A cookbook, in this context, refers to a practical, hands-on guide. O'Reilly, a renowned publisher of technical books, often uses this term for their series of step-by-step guides.

### Why Write This Open-Source Book?
After a year of solving problems on LeetCode, the author decided to share insights and solutions with others. The goal is to foster a community of like-minded individuals who can learn and grow together. Writing these solutions also helps the author identify and address knowledge gaps. The cover, featuring a peacock in full display, symbolizes the hope that readers will develop their skills and shine in their careers. The green color scheme represents the "Accepted" status on LeetCode.

### About the Author
The author is a relatively new Go (Golang) programmer with a background in competitive programming (ACM-ICPC). Despite not winning any gold medals, the experience was invaluable for developing problem-solving skills and meeting talented peers. The author aims to continue improving and sharing knowledge through this book.

### Tips for Using the Book
- Use the search bar in the top left corner to find specific chapters or problem numbers.
- Each page includes a Gitalk comment section for feedback and discussion.
- For each problem, try to solve it independently first. If you get stuck, refer to the provided solution but avoid looking at the code immediately. Identify and note areas where you need improvement.
- The code for all problems in this book has been optimized to achieve 100% beats. Contributions of more elegant solutions are welcome.

### Target Audience
This book is intended for programming enthusiasts who want to improve their algorithmic skills using LeetCode.

### Programming Language
All solutions in this book are implemented in Go (Golang).

### Usage Instructions
- Use the search bar to quickly locate chapters and problem numbers.
- Engage in discussions using the Gitalk comment sections at the bottom of each page.
- Follow the recommended approach: read the problem, attempt to solve it, and only refer to the solution if you get stuck. Focus on understanding and improving your skills.

### Interactive Feedback and Corrections
If you find any errors or have suggestions, please use the edit button at the bottom of the page to provide feedback. Your support and contributions are greatly appreciated.

### Let's Start Solving Problems!
Happy coding!

---

## Page 16
### LeetCode
```go
fmt.Printf("Hello, Golang!")
```
This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License (CC BY-NC-ND 4.0).
All problem copyrights belong to LeetCode and LintCode China.

---

## Page 17
Initially, the author thought that completing all LeetCode problems would be sufficient to write this book. However, the continuous addition of new problems and the pace of work made this goal unrealistic. The author decided to set a smaller target of 500 problems and document the learning journey. This chapter organizes the completed problems into thematic categories. Dynamic programming, in particular, is highlighted as a challenging and elegant area of study.

### Array Problems
| Title | Solution | Difficulty | Time Complexity | Space Complexity |
|-------|----------|------------|-----------------|------------------|
| 1. Two Sum | [Go](link) | Easy | O(n) | O(1) |
| 11. Container With Most Water | [Go](link) | Medium | O(n) | O(1) |
| 15. 3Sum | [Go](link) | Medium | O(n^2) | O(1) |
| 16. 3Sum Closest | [Go](link) | Medium | O(n^2) | O(1) |
| 18. 4Sum | [Go](link) | Medium | O(n^3) | O(1) |
| 26. Remove Duplicates from Sorted Array | [Go](link) | Easy | O(n) | O(1) |
| 27. Remove Element | [Go](link) | Easy | O(n) | O(1) |
| 39. Combination Sum | [Go](link) | Medium | O(2^n) | O(n) |

---

## Page 18
### Array Problems (Continued)
| Title | Solution | Difficulty | Time Complexity | Space Complexity |
|-------|----------|------------|-----------------|------------------|
| 18. 4Sum | [Go](link) | Medium | O(n^3) | O(1) |
| 26. Remove Duplicates from Sorted Array | [Go](link) | Easy | O(n) | O(1) |
| 27. Remove Element | [Go](link) | Easy | O(n) | O(1) |
| 39. Combination Sum | [Go](link) | Medium | O(2^n) | O(n) |

---

This structured format should make the text more clear, coherent, and professional.