### Verification by Developers to Assign Attributes

Developers assign attributes—abstract labels representing intended confidentiality—to processes and data stores. Grok policies, written in a language called Legalese, specify allowed data flows based on these attributes. Attributes and policies are applied at the granularity of fields (types), not individual users or data items. Consequently, Legalese cannot express policies such as "private," "friends only," and "friends of friends" as described in Section 2. This limitation is common to most static analysis-based policy enforcement techniques. Additionally, Legalese does not support content-dependent policies and cannot enforce mandatory access logging, censorship, and typed declassification policies mentioned in Section 2.

Grok enforces policies through fast static analysis on computations written in languages like Hive, Dremel, and Scope, with no runtime overhead. In contrast, Thoth uses kernel-level interception and is language-independent, but incurs a small runtime overhead. Grok-assigned attributes may be incorrect, leading to false negatives. Thoth, however, enforces all conduit policies without false negatives.

### Cloud Policy Compliance

Maniatis et al. [31] outline a vision, architecture, and challenges for data protection in the cloud using secure data capsules. Thoth can be seen as a realization of this vision in the context of a data retrieval system, contributing a policy language, enforcement mechanism, and experimental evaluation. Secure Data Preservers (SDaPs) [27] are software components that mediate access to data according to user-provided policies. Unlike Thoth, SDaPs are suitable only for web services with simple, narrow interfaces and do not require direct access to users' raw data. LoNet [26] enforces data-use policies at the VM level, requiring trusted application code for declassification and using FUSE for file I/O, which results in high overhead.

### Information Flow Control (IFC)

Numerous systems restrict a program's data flow to enforce security policies, either in the programming language (e.g., Jif [34]), in the language runtime (e.g., Resin [46], Nemesis [19]), in language libraries (e.g., Hails [25]), using software fault isolation (e.g., duPro [35]), in the OS kernel (e.g., Asbestos [22], HiStar [47], Flume [28], Silverline [33]), or in a hypervisor (e.g., Neon [48]). Thoth differs from these systems in several ways. Unlike language-based IFC, Thoth applications can be written in any language.

Architecturally, Thoth is similar to Flume, both isolating processes using a Linux security extension and a user-space reference monitor, and both enforcing policies on conduits. Both also distinguish between CONFINED and UNCONFINED processes. However, while Flume uses abstract labels as taints, Thoth uses declarative policies as taints. This leads to two fundamental differences:
1. **Policy Enforcement**: Flume relies on trusted application components to map system access policies to abstract labels and for all declassification. In Thoth, the reference monitor enforces all access conditions (specified in read and update rules) and all declassification conditions (specified in declassify clauses). Application components are trusted only to install correct policies on ingress and egress nodes.
2. **Policy Configuration**: Thoth policies describe the policy configuration completely. In Flume, the policy configuration is implicit in the code of the trusted components that declassify and endorse data, and map access policies to labels (though mapping can be automated to some extent [21]).

Resin tracks flows at object granularity, whereas Thoth tracks flows at process granularity, which aligns with the pipelined structure of data retrieval systems and significantly reduces overhead. Hails [25] is a Haskell-based web development framework with statically-enforced IFC. Thoth offers IFC in the kernel and is independent of any language, runtime, or framework used for developing applications. COWL [39] confines JavaScript browser contexts using labels and IFC, addressing the complementary problem of controlling data flows on the server side. Both Hails and COWL use DC-labels [38] as policies, which cannot express content-dependent policies like censorship, mandatory access logging, and ONLY_CND_IDS policies.

### Declarative Policies

Thoth’s policy language is based on Datalog and linear temporal logic (LTL), known for their clarity, conciseness, and high level of abstraction. The primary innovation in Thoth’s policy language is its two-layered structure: the first layer specifies access policies, and the second layer specifies declassification policies. Some operating systems (Nexus and Taos [37, 45]), file systems (PFS and PCFS [41, 24]), and at least one cyber-physical system (Grey [17]) and one storage system (Guardat [40]) enforce access policies expressed in Datalog-like languages. Thoth can enforce similar policies and, additionally, track flows and enforce declassification policies that these systems cannot. Like Guardat, Thoth’s policy language supports data-dependent policies. The design of Thoth’s reference monitor is inspired by Guardat’s monitor but extends it by tracking data flows, supporting declassification policies, and intercepting memcached I/O and network communication.

### Ongoing Work

#### Lightweight Isolation
Information flow control requires the isolation of computations handling different users' private data. In general-purpose operating systems, this means using separate processes for each user session. Thoth, for instance, requires front-end processes to be exec'd for each new session. We are working on an operating system primitive that provides isolation among different user sessions within the same process with low cost.

#### Database-backed Retrieval Systems
Thoth includes conduit interceptors for files, named pipes, network connections, and a key-value store (memcached). Currently, we are building a system to ensure compliance of SQL database queries with declarative policies associated with the database schema. This system can be used as a conduit interceptor, extending Thoth’s protection to database-backed data retrieval systems.

#### Policy Testing
Assigning policies to internal conduits in Thoth and ensuring they permit all compliant data flows can be tedious in large systems. We are developing a tool that semi-automatically generates internal conduit policies using a system’s dataflow graph and the ingress/egress policies as inputs. The tool performs systematic testing to ensure all compliant data flows are allowed and helps policy developers generate appropriate declassification policies as needed.

### Conclusion

Efficient policy compliance in data retrieval systems is a challenging problem. Thoth is a kernel-level policy compliance layer designed to address this issue. Providers can associate a declarative policy with each data source and sink, specifying confidentiality and integrity requirements that reflect the data owner’s privacy preferences, the provider’s data-use policy, and legal requirements. Thoth enforces these policies by tracking and controlling data flows across tasks through kernel I/O interception, preventing data leaks and corruption due to bugs, misconfigurations, and actions by unprivileged operators.

Our technical contributions include a declarative policy language that specifies both access (read/write) policies and how those access policies may change, enabling the representation of declassification policies. The language also supports content-dependent policies. Thoth uses policy sets as taint, eliminating the need to trust application processes with access checks at the system boundary and with declassification. Our Linux-based prototype demonstrates that Thoth can be deployed with low overhead in data retrieval systems, highlighting the usefulness and viability of coarse-grained taint tracking for policy enforcement.

### Acknowledgment

We would like to thank the anonymous reviewers for their helpful feedback. This research was supported in part by the European Research Council (ERC Synergy imPACT 610150) and the German Research Foundation (DFG CRC 1223).

### References

[1] Adobe data breach more extensive than previously disclosed. http://www.reuters.com/article/2013/10/29/us-adobe-cyberattack-idUSBRE99S1DJ20131029.
[2] Apache Lucene. http://lucene.apache.org.
[3] Apache Lucene bug report 1300. https://issues.apache.org/jira/browse/LUCENE-1300.
[4] Apache Lucene bug report 2756. https://issues.apache.org/jira/browse/LUCENE-2756.
[5] Apache Lucene bug report 3575. https://issues.apache.org/jira/browse/LUCENE-3575.
[6] Apache Lucene bug report 4511. https://issues.apache.org/jira/browse/LUCENE-4511.
[7] Apache Lucene bug report 49. https://issues.apache.org/jira/browse/LUCENE-49.
[8] Apache Lucene bug report 6503. https://issues.apache.org/jira/browse/LUCENE-6503.
[9] Apache Lucene bug report 6595. https://issues.apache.org/jira/browse/LUCENE-6595.
[10] Apache Lucene bug report 6832. https://issues.apache.org/jira/browse/LUCENE-6832.
[11] DataLossDB: Open Security Foundation. http://datalossdb.org.
[12] Memcached. http://memcached.org/.
[13] Privacy Rights Clearinghouse. http://privacyrights.org.
[14] Target breach worse than thought, states launch joint probe. http://www.reuters.com/article/2014/01/10/us-target-breach-idUSBREA090L120140110.
[15] Adam Barth, John C. Mitchell, Anupam Datta, and Sharada Sundaram. Privacy and utility in business processes. In Proceedings of the 20th IEEE Computer Security Foundations Symposium (CSF), 2007.
[16] David A. Basin, Felix Klaedtke, and Samuel Müller. Policy monitoring in first-order temporal logic. In Proceedings of the 22nd International Conference on Computer-Aided Verification (CAV), 2010.
[17] Lujo Bauer, Scott Garriss, and Michael K. Reiter. Distributed proving in access-control systems. In Proceedings of the 26th IEEE Symposium on Security and Privacy (S&P), 2005.
[18] Moritz Y. Becker, Cédric Fournet, and Andrew D. Gordon. Design and semantics of a decentralized authorization language. In Proceedings of the 20th IEEE Computer Security Foundations Symposium (CSF), 2007.
[19] Michael Dalton, Christos Kozyrakis, and Nickolai Zeldovich. Nemesis: Preventing authentication & access control vulnerabilities in web applications. In Proceedings of the 18th USENIX Security Symposium, 2009.
[20] John DeTreville. Binder, a logic-based security language. In Proceedings of the 23rd IEEE Symposium on Security and Privacy (S&P), 2002.
[21] Petros Efstathopoulos and Eddie Kohler. Manageable fine-grained information flow. In Proceedings of the 3rd ACM SIGOPS European Conference on Computer Systems (EuroSys), 2008.
[22] Petros Efstathopoulos, Maxwell Krohn, Steve VanDeBogart, Cliff Frey, David Ziegler, Eddie Kohler, David Mazières, Frans Kaashoek, and Robert Morris. Labels and event processes in the Asbestos operating system. In Proceedings of the 20th ACM Symposium on Operating Systems Principles (SOSP), 2005.
[23] Deepak Garg, Limin Jia, and Anupam Datta. Policy auditing over incomplete logs: theory, implementation and applications. In Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS), 2011.
[24] Deepak Garg and Frank Pfenning. A proof-carrying file system. In Proceedings of the 31st IEEE Symposium on Security and Privacy (S&P), 2010.
[25] Daniel B. Giffin, Amit Levy, Deian Stefan, David Terei, David Mazières, John Mitchell, and Alejandro Russo. Hails: Protecting data privacy in untrusted web applications. In Proceedings of the 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2012.
[26] Håvard D. Johansen, Eleanor Birrell, Robbert van Renesse, Fred B. Schneider, Magnus Stenhaug, and Dag Johansen. Enforcing privacy policies with meta-code. In Proceedings of the 6th ACM SIGOPS Asia-Pacific Workshop on Systems (APSys), 2015.
[27] Jayanthkumar Kannan, Petros Maniatis, and Byung-Gon Chun. Secure data preservers for web services. In Proceedings of the 2nd USENIX Conference on Web Application Development, 2011.
[28] Maxwell Krohn, Alexander Yip, Micah Brodsky, Natan Cliffer, M. Frans Kaashoek, Eddie Kohler, and Robert Morris. Information flow control for standard OS abstractions. In Proceedings of the 21st ACM SIGOPS Symposium on Operating Systems Principles (SOSP), 2007.
[29] Leslie Lamport. The part-time parliament. ACM Transactions on Computer Systems, 1998.
[30] Ninghui Li and John C. Mitchell. Datalog with constraints: A foundation for trust management languages. In Proceedings of the 5th Symposium on Practical Aspects of Declarative Languages, 2003.
[31] Petros Maniatis, Devdatta Akhawe, Kevin Fall, Elaine Shi, Stephen McCamant, and Dawn Song. Do you know where your data are? Secure data capsules for deployable data protection. In Proceedings of the 13th USENIX Conference on Hot Topics in Operating Systems (HotOS), 2011.
[32] Zohar Manna and Amir Pnueli. Temporal Verification of Reactive Systems: Safety. Springer-Verlag, 1995.
[33] Yogesh Mundada, Anirudh Ramachandran, and Nick Feamster. Silverline: Preventing data leaks from compromised web applications. In Proceedings of the 29th Annual Computer Security Applications Conference, 2013.
[34] Andrew C. Myers. JFlow: Practical mostly-static information flow control. In The 26th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), 1999.
[35] Ben Niu and Gang Tan. Efficient user-space information flow control. In Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security, 2013.
[36] Shayak Sen, Saikat Guha, Anupam Datta, Sriram K. Rajamani, Janice Tsai, and Jeannette M. Wing. Bootstrapping privacy compliance in big data systems. In Proceedings of the 35th IEEE Symposium on Security and Privacy (S&P), 2014.
[37] Alan Shieh, Dan Williams, Emin Gün Sirer, and Fred B. Schneider. Nexus: A new operating system for trustworthy computing. In Proceedings of the 20th ACM Symposium on Operating Systems Principles (SOSP), 2005.
[38] Deian Stefan, Alejandro Russo, David Mazières, and John C. Mitchell. Disjunction category labels. In Proceedings of the 16th Nordic Conference on Information Security Technology for Applications, 2011.
[39] Deian Stefan, Edward Z. Yang, Petr Marchenko, Alejandro Russo, Dave Herman, Brad Karp, and David Mazières. Protecting users by confining JavaScript with COWL. In Proceedings of the 11th USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2014.
[40] Anjo Vahldiek-Oberwagner, Eslam Elnikety, Aastha Mehta, Deepak Garg, Peter Druschel, Rodrigo Rodrigues, Johannes Gehrke, and Ansley Post. Guardat: Enforcing data policies at the storage layer. In Proceedings of the 3rd ACM SIGOPS European Conference on Computer Systems (EuroSys), 2018.