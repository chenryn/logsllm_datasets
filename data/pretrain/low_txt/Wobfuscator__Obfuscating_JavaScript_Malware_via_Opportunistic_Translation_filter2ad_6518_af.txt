### Analysis of Obfuscation Techniques in JavaScript Code

We have conducted an analysis of obfuscation techniques specifically in JavaScript code by examining the methods used in both malicious and benign files [66], [55]. While there is limited research proposing new obfuscation attacks for JavaScript, Fass et al. [26] developed HideNoSeek, which rewrites the Abstract Syntax Trees (ASTs) of malicious programs to match those of known benign programs, thereby evading detection. The authors evaluated HideNoSeek on 91,020 samples against various detectors, including VirusTotal, Yara, JaSt, Zozzle, and Cujo, achieving a 99.98% false negative rate.

### Malware Detection

Academic research has been actively focused on developing static analysis techniques to identify malicious behavior, even in obfuscated code. One class of static detection tools uses lexical and syntactic information from JavaScript files to identify features indicative of malicious code [50], [24], [16], [20], [54]. These techniques are further enhanced by incorporating control-flow and data-flow analysis [27] or by adding dynamic analysis to confirm the presence of malware [67], [59]. Other static detection techniques employ machine learning and deep learning approaches to analyze JavaScript source code [63], [46]. Wobfuscator can reduce the effectiveness of these detectors by minimizing the available syntactic information and moving some behavior to WebAssembly modules, which are often ignored by these tools.

Dynamic analysis techniques, on the other hand, focus on identifying malicious behaviors at runtime. Some methods collect runtime statistics to build models that detect malware [23], [53], [68], while others use symbolic execution [39] or forced execution [38] to trigger hidden malware. Wobfuscator is unlikely to significantly impact the detection rates of these dynamic detectors, as it does not substantially alter the runtime behavior.

### Obfuscation Detection

Some existing work focuses solely on detecting obfuscation rather than obfuscated malware. For example, NOFUS [35] and JSOD [13] use syntactic and contextual information as features for a machine learning classifier to detect obfuscation. Sarker et al. [53] developed a hybrid approach by instrumenting browser APIs and determining whether the traced API calls correspond to static code locations.

### WebAssembly and Security

Haas et al. [31] explain the motivation and benefits of introducing WebAssembly, a new bytecode language, to the web. Several studies have investigated the security aspects of WebAssembly, such as unsolicited cryptomining in browsers [40], [45], [52], and methods to detect and defend against it [37], [51], [62]. Lehmann et al. [41] demonstrated that source-level memory vulnerabilities can propagate to WebAssembly binaries, affecting many real-world binaries [33]. However, none of these works use WebAssembly to hide arbitrary JavaScript behavior from inspection. Future joint malicious code detectors for JavaScript and WebAssembly could build upon frameworks like Wasabi [42] or taint tracking frameworks for WebAssembly [29], [57].

### Conclusion

Much of the existing work on identifying JavaScript malware relies on static analysis. However, these techniques often overlook recent web standards, such as WebAssembly, which attackers can exploit. To bypass static detectors, we introduce Wobfuscator, an obfuscation approach that translates specific parts of JavaScript code into functionally identical WebAssembly modules using a set of seven transformation rules. We evaluated our transformations against four state-of-the-art static JavaScript malware detectors and found that our approach effectively reduces the recall on real malware samples. Our technique outperforms other obfuscation tools based solely on JavaScript. Additionally, we validated the correctness of our transformations using the test suites of six NPM packages, demonstrating their low performance overhead. Our results indicate that current static detectors are ineffective against cross-language code obfuscation, highlighting the need for future research to address this challenge.

### Acknowledgments

We thank the anonymous reviewers and the shepherd for their constructive comments. This work was partially supported by the US National Science Foundation under Grant No. 2047980, the European Research Council (ERC, grant agreement 851895), and the German Research Foundation within the ConcSys and Perf4JS projects. Any opinions, findings, and conclusions in this paper are those of the authors only and do not necessarily reflect the views of our sponsors. Authorized licensed use limited to: Tsinghua University. Downloaded on August 07, 2022, at 12:59:50 UTC from IEEE Xplore. Restrictions apply.

### References

[Online]. Available: https://www.npmjs.com/package/escodegen
[1] "escodegen."
[Online]. Available: https://www.npmjs.com/package/espree
[2] "espree."
[Online]. Available: https://esprima.org/
[3] "Esprima."
[Online]. Available: https://github.com/javascript-obfuscator/javascript-obfuscator
[4] GitHub - javascript-obfuscator/javascript-obfuscator: A powerful JavaScript obfuscator for web and Node.js.
[Online]. Available: https://github.com/rapid7/jsobfu
[5] "JSObfu," Rapid7.
[Online]. Available: https://developers.google.com/web/updates/2018/04/loading-wasm
[6] "Loading WebAssembly modules efficiently."
[Online]. Available: https://www.virustotal.com/gui/home/upload
[7] "VirusTotal."
[Online]. Available: https://www.npmjs.com/package/wabt
[8] "wabt."
[Online]. Available: https://webassembly.github.io/spec/core/download/WebAssembly.pdf
[9] "WebAssembly Core Specification."
[Online]. Available: https://www.w3.org/TR/wasm-core-1/
[10] "WebAssembly Website."
[Online]. Available: https://webassembly.org/
[11] "Malicious Javascript Dataset," Aug. 2021, original-date: 2017-01-31T17:48:24Z.
[Online]. Available: https://github.com/geeksonsecurity/js-malicious-dataset
[12] 262588213843476, "npm rank."
[Online]. Available: https://gist.github.com/anvaka/8e8fa57c7ee1350e3491
[13] I. A. AL-Taharwa, H.-M. Lee, A. B. Jeng, K.-P. Wu, C.-S. Ho, and S.-M. Chen, "JSOD: JavaScript obfuscation detector: JSOD," Security and Communication Networks, vol. 8, no. 6, pp. 1092–1107, Apr. 2015.
[Online]. Available: https://doi.org/10.1002/sec.1064
[14] M. Alsharnouby, F. Alaca, and S. Chiasson, "Why phishing still works: User strategies for combating phishing attacks," Int. J. Hum. Comput. Stud., vol. 82, pp. 69–82, 2015.
[Online]. Available: https://doi.org/10.1016/j.ijhcs.2015.05.005
[15] anseki, "Gnirts."
[Online]. Available: https://github.com/anseki/gnirts
[16] Aurore54F, "JaSt - JS AST-Based Analysis," Jun. 2021, original-date: 2017-04-10T19:03:18Z.
[Online]. Available: https://github.com/Aurore54F/JaSt
[17] ——, "JStap: A Static Pre-Filter for Malicious JavaScript Detection," Jun. 2021, original-date: 2019-09-02T13:44:26Z.
[Online]. Available: https://github.com/Aurore54F/JStap
[18] ——, "lexical-jsdetector," May 2021, original-date: 2019-09-20T05:52:48Z.
[Online]. Available: https://github.com/Aurore54F/lexical-jsdetector
[19] ——, "syntactic-jsdetector," Jun. 2021, original-date: 2019-09-20T05:54:00Z.
[Online]. Available: https://github.com/Aurore54F/syntactic-jsdetector
[20] D. Canali, M. Cova, G. Vigna, and C. Kruegel, "Prophiler: a fast filter for the large-scale detection of malicious web pages," in Proceedings of the 20th international conference on World wide web - WWW '11, Hyderabad, India: ACM Press, 2011, p. 197.
[Online]. Available: http://portal.acm.org/citation.cfm?doid=1963405.1963436
[21] N. Carlini, A. P. Felt, and D. Wagner, "An Evaluation of the Google Chrome Extension Security Architecture," in Proceedings of the 21st USENIX Conference on Security Symposium, ser. Security'12, Berkeley, CA, USA: USENIX Association, 2012, pp. 7–7.
[Online]. Available: http://dl.acm.org/citation.cfm?id=2362793.2362800
[22] M. Ceccato, A. Capiluppi, P. Falcarin, and C. Boldyreff, "A Large Study on the Effect of Code Obfuscation on the Quality of Java Code," Empirical Software Engineering, vol. 20, no. 6, pp. 1486–1524, Dec. 2015.
[Online]. Available: http://link.springer.com/10.1007/s10664-014-9321-0
[23] M. Cova, C. Krügel, and G. Vigna, "Detection and analysis of drive-by-download attacks and malicious JavaScript code," in Proceedings of the 19th International Conference on World Wide Web, WWW 2010, Raleigh, North Carolina, USA, April 26-30, 2010, M. Rappa, P. Jones, J. Freire, and S. Chakrabarti, Eds. ACM, 2010, pp. 281–290.
[Online]. Available: https://doi.org/10.1145/1772690.1772720
[24] C. Curtsinger, B. Livshits, B. G. Zorn, and C. Seifert, "ZOZZLE: fast and precise in-browser JavaScript malware detection," in 20th USENIX Security Symposium, San Francisco, CA, USA, August 8-12, 2011, Proceedings. USENIX Association, 2011.
[Online]. Available: http://static.usenix.org/events/sec11/tech/full_papers/Curtsinger.pdf
[25] S. Englehardt and A. Narayanan, "Online tracking: A 1-million-site measurement and analysis," in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, Vienna, Austria, October 24-28, 2016, E. R. Weippl, S. Katzenbeisser, C. Kruegel, A. C. Myers, and S. Halevi, Eds. ACM, 2016, pp. 1388–1401.
[Online]. Available: https://doi.org/10.1145/2976749.2978313
[26] A. Fass, M. Backes, and B. Stock, "HideNoSeek: Camouflaging Malicious JavaScript in Benign ASTs," in Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, CCS 2019, London, UK, November 11-15, 2019, L. Cavallaro, J. Kinder, X. Wang, and J. Katz, Eds. ACM, 2019, pp. 1899–1913.
[Online]. Available: https://doi.org/10.1145/3319535.3345656
[27] ——, "JStap: a static pre-filter for malicious JavaScript detection," in Proceedings of the 35th Annual Computer Security Applications Conference, ACSAC 2019, San Juan, PR, USA, December 09-13, 2019, D. Balenson, Ed. ACM, 2019, pp. 257–269.
[Online]. Available: https://doi.org/10.1145/3359789.3359813
[28] A. Fass, R. P. Krawczyk, M. Backes, and B. Stock, "JaSt: Fully Syntactic Detection of Malicious (Obfuscated) JavaScript," in Detection of Intrusions and Malware, and Vulnerability Assessment - 15th International Conference, DIMVA 2018, Saclay, France, June 28-29, 2018, Proceedings, ser. Lecture Notes in Computer Science, C. Giuffrida, S. Bardin, and G. Blanc, Eds., vol. 10885. Springer, 2018, pp. 303–325.
[Online]. Available: https://doi.org/10.1007/978-3-319-93411-2_14
[29] W. Fu, R. Lin, and D. Inge, "Taintassembly: Taint-based information flow control tracking for WebAssembly," CoRR, vol. abs/1802.01050, 2018.
[Online]. Available: http://arxiv.org/abs/1802.01050
[30] A. Gómez-Boix, P. Laperdrix, and B. Baudry, "Hiding in the crowd: an analysis of the effectiveness of browser fingerprinting at large scale," in Proceedings of the 2018 World Wide Web Conference on World Wide Web, WWW 2018, Lyon, France, April 23-27, 2018, P. Champin, F. Gandon, M. Lalmas, and P. G. Ipeirotis, Eds. ACM, 2018, pp. 309–318.
[Online]. Available: https://doi.org/10.1145/3178876.3186097
[31] A. Haas, A. Rossberg, D. L. Schuff, B. L. Titzer, M. Holman, D. Gohman, L. Wagner, A. Zakai, and J. F. Bastien, "Bringing the web up to speed with WebAssembly," in Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2017, Barcelona, Spain, June 18-23, 2017, 2017, pp. 185–200.
[32] M. Hammad, J. Garcia, and S. Malek, "A large-scale empirical study on the effects of code obfuscations on Android apps and anti-malware products," in Proceedings of the 40th International Conference on Software Engineering, Gothenburg, Sweden: ACM, May 2018, pp. 421–431.
[Online]. Available: https://dl.acm.org/doi/10.1145/3180155.3180228
[33] A. Hilbig, D. Lehmann, and M. Pradel, "An Empirical Study of Real-World WebAssembly Binaries: Security, Languages, Use Cases," in WWW '21: The Web Conference 2021, Virtual Event / Ljubljana, Slovenia, April 19-23, 2021, J. Leskovec, M. Grobelnik, M. Najork, J. Tang, and L. Zia, Eds. ACM / IW3C2, 2021, pp. 2696–2708.
[Online]. Available: https://doi.org/10.1145/3442381.3450138
[34] G. Hong, Z. Yang, S. Yang, L. Zhang, Y. Nan, Z. Zhang, M. Yang, Y. Zhang, Z. Qian, and H. Duan, "How you get shot in the back: A systematical study about cryptojacking in the real world," in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, CCS 2018, Toronto, ON, Canada, October 15-19, 2018, D. Lie, M. Mannan, M. Backes, and X. Wang, Eds. ACM, 2018, pp. 1701–1713.
[Online]. Available: https://doi.org/10.1145/3243734.3243840
[35] S. Kaplan, B. Livshits, B. Zorn, C. Siefert, and C. Cursinger, "NOFUS: Automatically Detecting" + String.fromCharCode(32) + "ObFuSCateD".toLowerCase() + "JavaScript Code," Tech. Rep. MSR-TR-2011-57, May 2011.
[Online]. Available: https://www.microsoft.com/en-us/research/publication/nofus-automatically-detecting-string-fromcharcode32-obfuscated-tolowercase-javascript-code/
[36] A. Kapravelos, Y. Shoshitaishvili, M. Cova, C. Kruegel, and G. Vigna, "Revolver: An automated approach to the detection of evasive web-based malware," in 22nd USENIX Security Symposium, Washington, DC, USA, August 14-16, 2013, S. T. King, Ed. USENIX Association, 2013, pp. 637–652.
[Online]. Available: https://www.usenix.org/conference/usenixsecurity13/technical-sessions/presentation/kapravelos
[37] A. Kharraz, Z. Ma, P. Murley, C. Lever, J. Mason, A. Miller, N. Borisov, M. Antonakakis, and M. Bailey, "Outguard: Detecting in-browser covert cryptocurrency mining in the wild," in The World Wide Web Conference, 2019, pp. 840–852.
[42] D. Lehmann and M. Pradel, "Wasabi: A framework for dynamically analyzing WebAssembly," in ASPLOS, 2019.
[38] K. Kim, I. L. Kim, C. H. Kim, Y. Kwon, Y. Zheng, X. Zhang, and D. Xu, "J-Force: Forced Execution on JavaScript," in Proceedings of the 26th International Conference on World Wide Web, ser. WWW '17, Republic and Canton of Geneva, CHE: International World Wide Web Conferences Steering Committee, Apr. 2017, pp. 897–906.
[Online]. Available: https://doi.org/10.1145/3038912.3052674
[39] C. Kolbitsch, B. Livshits, B. Zorn, and C. Seifert, "Rozzle: De-cloaking Internet Malware," in 2012 IEEE Symposium on Security and Privacy, May 2012, pp. 443–457, ISSN: 2375-1207.
[40] R. K. Konoth, E. Vineti, V. Moonsamy, M. Lindorfer, C. Kruegel, H. Bos, and G. Vigna, "Minesweeper: An in-depth look into drive-by cryptocurrency mining and its defense," in CCS, 2018.
[41] D. Lehmann, J. Kinder, and M. Pradel, "Everything Old is New Again: Binary Security of WebAssembly," in 29th USENIX Security Symposium, USENIX Security 2020, August 12-14, 2020, S. Capkun and F. Roesner, Eds. USENIX Association, 2020, pp. 217–234.
[Online]. Available: https://www.usenix.org/conference/usenixsecurity20/presentation/lehmann
[43] L. Lu, V. Yegneswaran, P. A. Porras, and W. Lee, "BLADE: an attack-agnostic approach for preventing drive-by malware infections," in Proceedings of the 17th ACM Conference on Computer and Communications Security, CCS 2010, Chicago, Illinois, USA, October 4-8, 2010, E. Al-Shaer, A. D. Keromytis, and V. Shmatikov, Eds. ACM, 2010, pp. 440–450.
[Online]. Available: https://doi.org/10.1145/1866307.1866356
[44] Microsoft, "Microsoft digital defense report," 2020.
[45] M. Musch, C. Wressnegger, M. Johns, and K. Rieck, "New kid on the web: A study on the prevalence of WebAssembly in the wild," in DIMVA, 2019.
[46] S. Ndichu, S. Kim, S. Ozawa, T. Misu, and K. Makishima, "A machine learning approach to detection of JavaScript-based attacks using AST features and paragraph vectors," Applied Soft Computing, vol. 84, p. 105721, Nov. 2019.
[Online]. Available: https://linkinghub.elsevier.com/retrieve/pii/S1568494619305022
[47] H. Petrak, "JavaScript Malware Collection," Aug. 2021, original-date: 2017-05-07T19:17:23Z.
[Online]. Available: https://github.com/HynekPetrak/javascript-malware-collection
[48] N. Provos, D. McNamee, P. Mavrommatis, K. Wang, and N. Modadugu, "The ghost in the browser: Analysis of web-based malware," in First Workshop on Hot Topics in Understanding Botnets, HotBots'07, Cambridge, MA, USA, April 10, 2007, N. Provos, Ed. USENIX Association, 2007.
[Online]. Available: https://www.usenix.org/conference/hotbots-07/ghost-browser-analysis-web-based-malware
[49] V. Raychev, P. Bielik, M. Vechev, and A. Krause, "Learning programs from noisy data," SIGPLAN Not., vol. 51, no. 1, p. 761–774, Jan. 2016.
[Online]. Available: https://doi.org/10.1145/2914770.2837671
[50] K. Rieck, T. Krueger, and A. Dewald, "Cujo: efficient detection and prevention of drive-by-download attacks," in Twenty-Sixth Annual Computer Security Applications Conference, ACSAC 2010, Austin, Texas, USA, 6-10 December 2010, C. Gates, M. Franz, and J. P. McDermott, Eds. ACM, 2010, pp. 31–39.
[Online]. Available: https://doi.org/10.1145/1920261.1920267
[51] A. Romano, Y. Zheng, and W. Wang, "Minerray: Semantics-aware analysis for ever-evolving cryptojacking detection," in Proceedings of the 35th IEEE/ACM International Conference on Automated Software Engineering, ser. ASE '20, New York, NY, USA: Association for Computing Machinery, 2020, p. 1129–1140.
[Online]. Available: https://doi.org/10.1145/3324884.3416580
[52] J. Rüth, T. Zimmermann, K. Wolsing, and O. Hohlfeld, "Digging into browser-based crypto mining," in Proceedings of the Internet Measurement Conference 2018, IMC 2018, Boston, MA, USA, October 31 - November 02, 2018. ACM, 2018, pp. 70–76.
[Online]. Available: https://dl.acm.org/citation.cfm?id=3278539
[53] S. Sarker, J. Jueckstock, and A. Kapravelos, "Hiding in Plain Site: Detecting JavaScript Obfuscation through Concealed Browser API Usage," in IMC '20: ACM Internet Measurement Conference, Virtual Event, USA, October 27-29, 2020. ACM, 2020, pp. 648–661.
[Online]. Available: https://doi.org/10.1145/3419394.3423616
[54] P. Seshagiri, A. Vazhayil, and P. Sriram, "AMA: Static Code Analysis of Web Page for the Detection of Malicious Scripts," Procedia Computer Science, vol. 93, pp. 768–773, 2016.
[Online]. Available: https://linkinghub.elsevier.com/retrieve/pii/S187705091631537X
[55] P. Skolka, C. Staicu, and M. Pradel, "Anything to Hide? Studying Minified and Obfuscated Code in the Web," in The World Wide Web Conference (WWW). ACM, 2019, pp. 1735–1746.
[Online]. Available: https://doi.org/10.1145/3308558.3313752
[56] B. Stock, B. Livshits, and B. G. Zorn, "Kizzle: A signature compiler for detecting exploit kits," in 46th Annual IEEE/IFIP International