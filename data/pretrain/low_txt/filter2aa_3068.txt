# Back to the Future: A Journey into Windows Vulnerabilities and 0-Days

## Presenters
- **Tomer Bar**
  - Director of Security Research at SafeBreach
  - 15+ years in Cyber Security
  - Main focus: APT and vulnerability research
- **Eran Segal**
  - Security Researcher at SafeBreach
  - 7+ years in Cyber Security
  - Main focus: Vulnerability research

## In Memory
- David (1951-2021)

## Research State of Mind
- "Learn from the past if you want to predict the future" â€“ Confucius

## Agenda
- Research background
- Solution process and infrastructure
- The 4-step process from 0 to 0-day
- End-to-end example
- Discovered and reported on six vulnerabilities
- Two post-exploitation techniques
- Deferred patching
- Closure and Q&A

## Research Goals
- Rapid analysis of security patches in Windows
  - Root cause analysis
  - Prioritization of vulnerabilities
- Automatic exploitation POCs within 1 day
- Semi-automatic approach for 0-day vulnerabilities

## Research Assumptions
1. Microsoft will fix (patch) the same vulnerability classes with similar patch techniques/logic.
2. The code after the patch might still be vulnerable.
3. A patched function is a good candidate for other vulnerabilities.

## Case Study: ETWpNotifyGuid - 5 Vulnerabilities
- **Ntoskrnl function** (WIN10)
  - **CVE-2020-1033**: LPE, invalid input check
  - **CVE-2021-1682**: LPE, heap overflow due to assignment to offset 0x50
  - **CVE-2020-1034**: Information Disclosure, invalid check on boolean variable
  - **CVE-2021-1662**: LPE, wrong bound check leading to OOB write to kernel pool

## Research Approach
- **Past Approach**
  - Manual patch diff of a single vulnerability
  - Goal: Understand root cause, usually for constructing a 1-day POC
- **Our Approach**
  - Automated process to gather insights from all patches into a searchable database for 0-day hunting

## Steps to Reach Our Goal - 0-Day
1. **Find vulnerable functions via patch-diffing**
2. **Correlate CVEs to patches**
3. **Generate code to trigger the vulnerable function**
4. **Find similar unpatched patterns**

### Step 1: Find Vulnerable Functions via Patch-Diffing
- **Patch Pipeline**
  - Download all Windows 8.1 security-only updates
  - Extract patched files
  - Binary diffing
  - Classify changes
  - Store features into DB
- **Statistics**
  - 770,000 total changed functions
  - 105,000 unique changed functions
  - 7,150 patched PEs
  - 970 unique PEs
  - 54 security updates
- **Structure of KB**
  - KB = msu file
  - Packages
  - Patched files
- **Recompilation Challenges**
  - Instruction reordering
  - Basic blocks reorder
  - Opcode changes
  - Alignments
- **Feature Types**
  - **Patch-related features**
    - XREF: Added/removed/changed function calls
    - Changes in loops or conditions
    - Changes in deprecated functions
  - **Vulnerability-related features**
    - Integer overflow
    - Use after free
    - Directory traversal

### Step 2: Correlate CVEs to Patches
- **Process**
  - Extract patched files from package
  - Query CVE data
  - Extract vulnerable components name (VCN)
  - Correlation logic
- **Correlation Logic**
  - Based on 4 methods:
    - Service Name
    - Executable Description
    - Internals Knowledge
    - Past Associations

### Step 3: Trigger the Vulnerable Functions
- **Process**
  - Extract all executables that call the vulnerable function
  - Generate call graphs
  - Generate code to trigger the vulnerability
    - Find examples online
    - Support COM APIs
    - Support RPC APIs
- **Generating Call Graphs**
  - Mapping all function calls across executables
- **Enriching Our Graphs**
  - MSDN
  - GitHub
- **Generate RPC Clients**
  - 127 working projects
- **Generate Code to Trigger RPC Server**
  - Example: CVE-2018-8440 - Sandbox Escaper ALPC LPE

### Step 4: 0-Day Hunt
- **Vulnerability Categories**
  - XXE vulnerabilities
  - Past XXE vulnerabilities
    - CVE-2017-0170, CVE-2017-8557, CVE-2017-8710, CVE-2018-0878, CVE-2018-8527, CVE-2019-0948, CVE-2019-1079, CVE-2020-0765
- **XXE - Root Cause Analysis**
  - Msra.exe: CVE-2018-0878
  - Upnphost: ProhibitDTD patches
- **Conditions for XXE**
  - Vulnerable functions: Load, loadXML, set_xml
  - No restrictions for DTD
  - Vulnerable CLSID (COM object)
  - Control over input XML
- **Detect Vulnerable CLSIDs**
  - Discover all Windows 10 CLSIDs
  - Enumerate all COM interfaces and functions
  - Call all XML-related functions to trigger XXE
- **XXE Feature - Automatic 0-Day**
  - Using IDA Python
  - Example: Msra.exe, LoadAndSortRAInvitationsHistory
- **Automatic 0-Days - Six Discovered Vulnerabilities**
  - CVE-2021-34507: MS Remote Assistance
  - Unpatched: Windows Help, Microsoft Management Console, Windows Media Player, MSIL XML Schema Definition Tool, MSIL XSLT compiler

### Post-Exploitation Technique
- **P2P.dll**
- **New Alternative to Discover 0-Days**
  - CVE-2020-1300: PrintBrmEngine.exe
  - No patch for localspl.dll

### Microsoft Response
- **Msra Vulnerability**: Fixed in July Patch Tuesday
- **Other 5 Vulnerabilities**: No fix currently planned

### GitHub Repository
- **Scripts and Tools**
  - Download and extract patches
  - Auto binary diffing
  - Flow graph tool
  - RPC - IDLs reordering and compiling
  - XXE Com object triggering
  - 0-day XXE discoverer (IDA Python module)
- **License**: BSD 3-clause
- **URL**: [Back2TheFuture](https://github.com/SafeBreach-Labs/Back2TheFuture)

### Credits
- Various sources and references provided

## Thank You!
- Tomer Bar
- Eran Segal

## Q&A