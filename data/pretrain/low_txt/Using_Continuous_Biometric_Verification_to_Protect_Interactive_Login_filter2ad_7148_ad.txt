### Usage and Licensing Information
This document is authorized for licensed use limited to Tsinghua University. It was downloaded on March 25, 2021, at 12:12:41 UTC from IEEE Xplore. Usage restrictions apply.

---

### Interactive Session Management

- **Session ID Handling**: 
  - If an interactive session is in progress, the system uses its session ID.
  - If no session is active, the system assigns the session ID of the next interactive session.
  
- **Session Progress Check** (Line 6):
  - The system checks if the current progress belongs to the ongoing interactive session.
  - If it does, the activity is controlled.
  - Otherwise, if it belongs to a previous session (Line 15), the process is frozen.
  
- **Process Cleanup Utility**:
  - A utility similar to `ps` can be developed to examine each `task_struct` and send signals to processes with session IDs corresponding to prior sessions.
  - This utility would help clean out frozen processes from earlier sessions that will never be executed.

### System Call Handling (Lines 8-11)

- **Critical System Calls**: Frozen.
- **Non-Critical System Calls**: Left free.
- **Remaining System Calls**: Delayed.
- **Delay Calculation**: The delay value is determined by an exponential function based on the difference between the current probability estimate of user presence and a suitable threshold.

---

### Performance Benchmarks

#### Micro Benchmarks

To evaluate the performance impact of our Linux kernel modifications, we used the lmbench suite [9]. The results are shown in Figure 9.

- **Overhead Calculation**:
  - The y-axis represents the percent increase in time for executing a system call with our modifications compared to a standard 2.4.26 Linux kernel.
  - Overhead varies by system call, ranging from 0.4% for `fork+execve` to 3.75% for `read`.
  - We consider this overhead acceptable.

#### Macro Benchmarks

For macro benchmark tests, we assessed the performance impact on compiling the Linux (2.4.26) kernel, which generates about 1200 object files. The biometric sampling rates were:
- Face biometric: Twice per second.
- Fingerprint biometric: Once every two seconds.

- **Results**:
  - The overhead for our operating environment is approximately 25%, averaged over three runs.

### Usability

Usability of a biometric system is often measured by its False Rejection Rate (FRR). In our system, false rejects result in process delays. To measure usability, we evaluated the additional delay in task completion under normal use.

- **Test Operations**:
  1. `ls -R /usr/src/linux-2.4.26`: Real-time overhead of 36%, an 11% increase.
  2. `ls -R /usr/local`: Real-time overhead of 37%.
  3. `grep -R /usr/src/linux-2.4.26`: Real-time overhead of 44%.

- **Impact**:
  - The average impact on usability is an extra 10-20% degradation.
  - While biometric verification can be offloaded to extra hardware, the delays from FRR errors cannot be avoided.

### Security Considerations

- **Security Goals**:
  - Our security goals appear to be met, though this is a qualitative judgment.
  - We tested sudden user switching and command execution (`rm /tmp/foo`), and the system froze before the command was fully typed.
  - A caveat is that keystrokes by an imposter may not be delivered to the application but will be delivered when the correct user returns.
  - For complete security, the tty/pty driver or the X server should discard all user input when a process is delayed or frozen.

### Conclusion and Future Work

- **System Performance**:
  - The reactive system we built works reasonably well.
  - Biometric verification is the main computational bottleneck, and we are exploring FPGA-based implementations to offload this task.
  
- **Utility Function**:
  - We are investigating a mathematical basis for computing the "sweet spot" of the system that maximizes a utility function, such as \( U(u) + S(s) \), where \( u \) is the raw fractional delay overhead and \( s \) is a security metric (e.g., FAR).

- **Integration of Biometrics**:
  - The focus is on integrating biometrics as a useful general abstraction into the operating system to enhance security.
  - With the advent of new biometric devices, such abstractions can provide more general and encompassing computer responses.

### Acknowledgements

This work was funded by the National University of Singapore, project no. R-252-146-112. We thank the anonymous reviewers for their valuable feedback, which has improved the presentation of this paper.

### References

[1] A. Altinok and M. Turk. Temporal Integration for Continuous Multimodal Biometrics. Proceedings of the Workshop on Multimodal User Authentication, December 2003.

[2] M. Bernaschi, E. Gabrielli, and L. V. Mancini. REMUS: A Security-Enhanced Operating System. ACM Transactions on Information and System Security, 5(1):36–61, 2002.

[3] N. Crook. The kdm Handbook. Available at http://docs.kde.org/en/3.1/kdebase/kdm/.

[4] D. E. Denning. An Intrusion-Detection Model. IEEE Transactions on Software Engineering, 13(2), February 1987.

[5] R. Duda, P. Hart, and D. Stork. Pattern Classification, 2nd edition. John Wiley and Sons, 2000.

[6] J. Kittler, M. Hatef, R. P. W. Duin, and J. Matas. On combining classifiers. IEEE Trans. on PAMI, 20(3):226–239, Mar. 1998.

[7] G. N. Lambert. A comparative study of system response time on program developer productivity. IBM Systems Journal, 23(1):36–43, 1984.

[8] R. Love. Linux Kernel Development. SAMS, 2003.

[9] L. McVoy and C. Staelin. lmbench: Portable Tools for Performance Analysis. USENIX 1996 Annual Technical Conference, January 1996.

[10] A. G. Morgan. The Linux-PAM System Administrators’ Guide. Documentation distributed with Linux-PAM. Available at http://www.kernel.org/pub/linux/libs/pam/pre/library/.

[11] C. P. Pflaeger. Security in Computing. Prentice Hall, 2nd edition, 1996.

[12] N. Provos. Improving Host Security with System Call Policies. 12th USENIX Security Symposium, August 2003.

[13] A. Ross and A. K. Jain. Information fusion in biometrics. Pattern Recognition Letters, 24(13):2115–2125, 2003.

[14] T. Sim, R. Sukthankar, M. Mullin, and S. Baluja. Memory-based Face Recognition for Visitor Identification. In Proceedings of the IEEE International Conference on Automatic Face and Gesture Recognition, 2000.

[15] S. B. Solutions. Secugen optimouse iii. http://www.secugen.com/products/po.htm.

[16] A. Somayaji. Operating System Stability and Security through Process Homeostasis. PhD thesis, University of New Mexico, Department of Computer Science, July 2002.

[17] The Linux Kernel Archives. http://www.kernel.org/.

[18] P. Viola and M. Jones. Robust real-time object detection. International Journal of Computer Vision, 2002.

[19] S. Zhang, R. Janakiraman, T. Sim, and S. Kumar. Continuous Verification Using Multimodal Biometrics. In The 2nd International Conference on Biometrics, 2006.

---

Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005)  
1063-9527/05 $20.00 © 2005 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021, at 12:12:41 UTC from IEEE Xplore. Restrictions apply.