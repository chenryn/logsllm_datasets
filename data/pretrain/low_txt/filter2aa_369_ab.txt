# Snort Dynamic Rules Implementation (2)

## The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.

### `my_dynamic_rule.c` (continued)
```c
int myRuleDetectionFunc(void *p) {
    SFSnortPacket *sp = (SFSnortPacket *) p;
    if (sp && (sp->ip4_header.identifier % (u_int16_t)2)) {
        return RULE_MATCH;
    }
    return RULE_NOMATCH;
}
```

**Question for Audience: What does this function do?**

## Snort Dynamic Rules Implementation (3)

## The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.

- **Key Header File:** `sf_dynamic_preprocessor.h`
- **Key Struct:** `DynamicPreprocessorData` (typically defined as an external variable named `_dpd`)
  - Functions to add callbacks for initialization, exit, and restart.
  - Internal logging functions.
  - Stream API.
  - Search API.
  - Alert functions.
  - Snort Inline (IPS) functions.

## Snort Dynamic Preprocessors Background

## The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.

```c
void SetupActiveX(void) {
    _dpd.registerPreproc("activex", ActiveXInit);
}

static void ActiveXInit(char *args) {
    _dpd.addPreproc(ProcessActiveX, PRIORITY_TRANSPORT, PP_ACTIVEX);
}

static void ProcessActiveX(void* pkt, void* contextp) {
    // Processing logic
    _dpd.alertAdd(GENERATOR_SPP_ACTIVEX, ACTIVEX_EVENT_KILLBIT, 1, 0, 3, 
                  ACTIVEX_EVENT_KILLBIT_STR, 0);
    return;
}
```

## `spp_activex.c`

## The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.

- We can call rule option matching functions directly, but we need to initialize internal structures first.
- Use a dummy `Rule` struct and `ruleMatch` function:
  ```c
  ENGINE_LINKAGE int ruleMatch(void *p, Rule *rule);
  ```
- Register the rule with `RegisterOneRule(&rule, DONT_REGISTER_RULE);`
- This setup initializes Boyer-Moore and internal pointers, but we don't always want to register the rules as an OTN. Hence, we pass `DONT_REGISTER_RULE`.

## Snort Plug-in API: Using Rules Within a Dynamic Preprocessor

## The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.

- **Available at:** [http://www.secureworks.com/research/tools/](http://www.secureworks.com/research/tools/)
- **License:** Released under GPLv2 (or later)
- **Support and Warranty:** No support, no warranty, use at your own risk.
- **Feedback:** Feedback is appreciated!

## SecureWorks Snort Plug-ins

## The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.

- **ActiveX Detection Dynamic Preprocessor:**
  - Inspects web traffic for scripting that instantiates "vulnerable" ActiveX controls based on public vulnerability disclosures.
  - Configuration points to a local database of ActiveX controls listed by CLSID and optionally method/property in XML format.
  - Examines traffic returned from HTTP servers, including ActiveX instantiation, Class ID, and access to methods/properties.

- **Current Limitations:**
  - Can be bypassed via JavaScript obfuscation and HTTP encodings, but many attackers still use plain CLSID.
  - Future enhancements include Snort Inline support to drop or TCP RST the HTTP response, leveraging normalization done by HTTP Inspect, and logging detected domain names using Unified2 extra data.

- **Internal Details:**
  - Uses `matchRule(Rule*)` from the Snort Plug-in API.
  - Performs a naïve linear search of CLSIDs, which could be enhanced to reuse HTTP Inspect's high-performance data structures.
  - Uses Snort's flow match, content matching, and PCRE matching.

## Live Demo: ActiveX Detection Dynamic Preprocessor

## DNS Blacklist Dynamic Preprocessor

## The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.

- **Functionality:**
  - Inspects DNS traffic for blacklisted domain names.
  - Leverages normalization done by Snort's DNS preprocessor.
  - Enhancements include Snort Inline (IPS) functionality and configurable spoofed DNS responses for malware listening posts and sandnets.
  - Logs detected domain names using Unified2 extra data.

## Live Demo: DNS Blacklist Dynamic Preprocessor

## Debian OpenSSL Predictable PRNG Vulnerability (CVE-2008-0166)

## The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.

- **Overview:**
  - Lack of sufficient entropy in the PRNG delivered by Debian's OpenSSL package.
  - Refer to Luciano Bello and Maximiliano Bertacchini's talk for more details.
  - Affects keys generated since 2006-09-17 on Debian Etch, Lenny, or Sid, and downstream distributions like Ubuntu.

- **Impact:**
  - Any DSA key used on a machine with a 'bad' OpenSSL must be considered compromised.
  - H D Moore has provided lists of brute-forced 'weak' keys on Metasploit.

- **Detection and Mitigation:**
  - Scan assets for SSH/SSL servers using blacklisted keys.
  - Scan user home directories for blacklisted SSH keys and SSL certificates.
  - Consider connections to external servers that use bad certs/keys.

## Debian OpenSSL “Weak Keys” Preprocessor

## The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.

- **Goal:**
  - Detect SSH and SSL handshakes where one or both hosts use blacklisted keys/certificates.
  - Normalize traffic by brute-forcing the DH key exchange and decoding sessions on-the-fly.
  - Potential issues with source code release due to export controls on cryptanalytic software.

- **Future Enhancements:**
  - Snort v3: Complete redesign with flexible and extensible architecture, Lua programming language, and hardware-optimized packet acquisition.
  - Snort 2.8.3 (Beta): Enhancements to HTTP Inspect, new buffers for method, URI, headers, cookies, and body, and new HTTP normalization exposed in the Snort Plug-in API.

## Wrapping It All Up

## The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.

- **Snort Framework:**
  - Powerful APIs for alerting, logging, streams, and matching.
  - Encouragement to read other plug-in source codes and ask questions.
  - Snort v2 is still evolving; if you need new features, request them.

- **Acknowledgments:**
  - Thanks to DT, the Goons, and everyone who made DEFCON a reality.
  - Greetings to DC404, Atlanta's DC Group, and speakers: dr.kaos, David Maynor, Scott Moulton, Adam Bregenzer, and our very own Goon, dc0de.

**Questions?**  
PI:EMAIL