### Table III: LAN Benchmark Parameters
- **Signing Parameters (t):** (16, 32], (32, 64], (64, 128], (128, 256]
- **Setup Parameters (n):** 1, 2, 4, 8, 16, 32
- **Bandwidth (Mbps):** 16000, 8000, 4000, 2000, 1000, 500
- **Latency (ms):** 2000, 1000, 500, 250, 125, 62

For the signing process, we varied \( t \) according to the parameters listed above. For the setup, we varied \( n \), fixing \( t = \left\lceil \frac{n + 1}{2} \right\rceil \).

### Experimental Setup
We allocated one node per party, and the parties communicated via Google’s internal network. The code was compiled using the nightly version of Rust 1.28 with the default level of optimization. Parallelism was provided by the Rayon crate, and each node could execute eight threads simultaneously. We empirically determined that limiting the number of threads used in signing to ten was optimal.

Our hash function implementations were written in C using compiler intrinsics and compiled with GCC 8.2.0. The benchmarking programs established insecure connections among the parties once and then ran a batch of setup or signing operations, measuring the wall clock time for the entire batch. This approach captured overhead due to latency and bandwidth constraints but did not account for private or authenticated channels.

### A. LAN Benchmarks
For the LAN benchmarks, we created a set of 256 nodes in Google’s South Carolina datacenter. The measured bandwidth was generally between 5 and 10 Gbps, and the round-trip latency was approximately 0.3 ms. Using these nodes, we collected data for both the setup and signing protocols with the parameters specified in Table III.

- **Signing Benchmarks:** All costs are independent of \( n \), the number of parties in the larger group. Therefore, we varied only \( t \), the number of parties actually participating in signing.
- **Setup Benchmarks:** Only computation costs depend on \( t \), not bandwidth. Thus, we varied \( n \) and set \( t = \left\lceil \frac{n + 1}{2} \right\rceil \), which is the most expensive value relative to a particular choice of \( n \).

Our aim was to ensure each benchmark took five to ten minutes in total to smooth out artifacts due to transient network conditions. The results for setup are reported in Figure 2, and the results for signing are reported in Figure 3.

### Performance Comparison
- **2-of-n Signing:** Our method slightly underperforms compared to Doerner et al. [1] in this setting, requiring 9.52 ms versus their 5.83 ms (without parallelism). In a similar environment, Lindell’s 2-of-2 protocol [12] required 36.8 ms. With parallelism, our protocol can sign with 24 parties in 37.6 ms.
- **Prior Works:** The most efficient prior works for threshold ECDSA signing with arbitrary thresholds are those of Gennaro et al. [10] and Boneh et al. [11]. Gennaro et al.’s protocol requires roughly 350 ms for 2-of-n signing, and Boneh et al.’s protocol requires roughly 1.5 seconds for 20-of-n signing. Our results are factors of roughly 40 and 50 better than theirs, respectively.

### B. WAN Benchmarks
To demonstrate the practical implications of our protocol's round count, we conducted additional benchmarks in a WAN setting. We selected 16 Google datacenters (zones) with current-generation CPUs, as shown in Figure 4. Five zones were located in the United States, and the remaining 11 were international. The longest leg had a round-trip latency of 348 ms and a bandwidth of 53.4 Mbps.

We tested two configurations: one with only the five US datacenters and another with all 16. For each configuration, we performed benchmarks with one party in each participating datacenter and with eight parties in each datacenter. Results are reported in Table IV, along with comparative data from our LAN benchmarks.

### C. Low-power Benchmarks
Finally, we performed benchmarks on three Raspberry Pi model 3B+ single-board computers to demonstrate the feasibility of evaluating our protocol on low-powered devices. Each board has a quad-core ARM-based processor clocked at 1.4 GHz. The boards were loaded with Raspbian Linux and connected via Ethernet. We used BLAKE2 hash functions for optimization in the embedded setting.

We benchmarked 2-of-2 signing and setup between a Macbook and a single Raspberry Pi, and t-of-n setup and signing among the group of Pis, with \( n \) set as 3 and \( t \) as both 2 and 3. Results are presented in Table V. Despite the hardware limitations, the signing time remains under a second, and setup requires only a few seconds.

### Conclusion
Our protocol is computationally efficient enough to run even on embedded devices such as hardware tokens or smartwatches, and certainly on more powerful mobile devices such as phones.

### References
[1] J. Doerner, Y. Kondi, E. Lee, and a. shelat, “Secure two-party threshold ECDSA from ECDSA assumptions,” in IEEE S&P, 2018.
[2] Y. Desmedt, “Society and group oriented cryptography: A new concept,” in CRYPTO, 1987.
[3] National Institute of Standards and Technology, “FIPS PUB 186-4: Digital Signature Standard (DSS),” http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf, 2013.
[4] American National Standards Institute, “X9.62: Public Key Cryptography For The Financial Services Industry: The Elliptic Curve Digital Signature Algorithm (ECDSA),” 2005.
[5] D. R. L. Brown, “Sec 2: Recommended elliptic curve domain parameters,” 2010. [Online]. Available: http://www.secg.org/sec2-v2.pdf
[6] D. Kravitz, “Digital signature algorithm,” jul 1993, uS Patent 5,231,668.
[7] Bitcoin Wiki, “Transaction,” https://en.bitcoin.it/wiki/Transaction, 2017, accessed Oct 22, 2017.
[8] G. Wood, “Ethereum: A secure decentralised generalised transaction ledger,” 2017. [Online]. Available: https://ethereum.github.io/yellowpaper/paper.pdf
[9] P. MacKenzie and M. K. Reiter, “Two-party generation of DSA signatures,” in CRYPTO, 2001.
[10] R. Gennaro, S. Goldfeder, and A. Narayanan, Threshold-Optimal DSA/ECDSA Signatures and an Application to Bitcoin Wallet Security, 2016.
[11] D. Boneh, R. Gennaro, and S. Goldfeder, “Using level-1 homomorphic encryption to improve threshold DSA signatures for Bitcoin wallet security,” in LATINCRYPT, 2017.
[12] Y. Lindell, “Fast secure two-party ECDSA signing,” in CRYPTO, 2017.
[13] P. Paillier, “Public-key cryptosystems based on composite degree residuosity classes,” in EUROCRYPT, 1999.
[14] N. Gilboa, “Two party RSA key generation,” in CRYPTO, 1999.
[15] W. Diffie and M. Hellman, “New directions in cryptography,” IEEE Trans. Inf. Theor., 1976.
[16] V. Shoup, “Lower bounds for discrete logarithms and related problems,” in EUROCRYPT, 1997.
[17] D. R. L. Brown, “Generic groups, collision resistance, and ECDSA,” Des. Codes Cryptography, 2005.
[18] D. Boneh and M. Zhandry, “Multiparty key exchange, efficient traitor tracing, and more from indistinguishability obfuscation,” in CRYPTO, 2014.