### 3.5 The Impact of 3rd Party Libraries

In our analysis of various applications, we observed that a significant portion of the codebase often consists of third-party content. For instance, in the case of Skype, only about 36.4% of its code is specific to Skype's core functionality. In contrast, 31.8% of the code is attributed to third-party SDKs (e.g., Roboguice, Jess, Qik, Android Support), and 32.8% is dedicated to ads and analytics (e.g., Flurry, Microsoft Ads).

Given this, it is crucial to determine whether the alarms defined in an application are native or originate from third-party libraries. We analyzed the package names of the files where alarms were detected and compared them against a list of 93 ads and analytics libraries available for Android, as provided by AppBrain. This list was manually verified to eliminate false positives.

Figure 4 illustrates the number of applications in which alarms defined by these ads and analytics libraries were found. Alarms from libraries present in fewer than 10 apps were excluded (e.g., Cellfish, Inmobi, Mopub). Our analysis revealed that 10.65% of unique apps (or 22.55% of apps with alarms) have alarms defined by third-party ads and analytics libraries. Additionally, 10.42% of all alarm API calls belong to these libraries.

When considering the total number of alarms across all applications, we found that 31.5% of all alarms are repeating, while nearly 40.5% are non-deferrable. Specifically, for third-party ads and analytics libraries, their alarms account for 10.4% of all occurrences. Among these, 72.6% are repeating, and 22.3% are non-deferrable. Although our study focused on ads and analytics, the extensive use of these third-party libraries suggests that optimizing their resource consumption and using inexact alarms (e.g., with the `TargetAPI` annotation) could significantly reduce energy consumption.

### 3.6 Occurrence of Alarms at Execution Time

To evaluate the impact of alarms on Android KitKat (SDK 19), which introduced batching by default, we conducted two experiments. Each experiment involved two different sets of 30 apps. The first set consisted of the top 30 most popular free apps on the Google Play market. The second set included 30 apps with the highest number of `setRepeating` alarm definitions targeting SDKs lower than 19. These apps were chosen because their alarms should be deferred if the target SDKs were set to 19 or higher, and they included apps with download counts ranging from over 1,000 to over 500 million.

For each experiment, we flashed a new Android firmware (KitKat), installed the 30 apps, and created new accounts with no contacts or friends when necessary (e.g., Gmail, Facebook, Twitter). All apps were started once to ensure they had permission to execute on reboot if required. The phone was then left on for approximately 30 minutes before being rebooted and left to run for around 3 hours with the screen off. Finally, we gathered the alarm and wakeup counts using `adb shell dumpsys alarm`. Both experiments were repeated to confirm the observed patterns.

In the first experiment, a total of 261 alarms were registered by the apps, but only 53 (20%) caused the device to wake up. There was no significant correlation between the number of registered alarms and the number of wakeups (r = 0.11, p = 0.55). Interestingly, the two Facebook apps (Messenger and the main app) were responsible for the majority of wakeups (15 per hour), even though the accounts used had zero social activity.

In the second experiment, a total of 1,041 alarms were registered, with 636 (61%) causing the device to wake up. A strong and significant correlation was found between the number of registered alarms and the number of wakeups (r = 0.86, p < 0.001). Notably, one application was responsible for 372 wakeups in a 3-hour period.

### Conclusion

This work provides an initial large-scale examination of alarms and their impact on Android devices. Our findings suggest that research on energy efficiency in mobile devices must consider the use of alarms. Further studies into the use and misuse of Android alarms could lead to more effective solutions, enhancing both energy efficiency and device performance.

### References

1. AlarmManager. http://goo.gl/ncrGaO
2. iOS Developer Library: Background execution. https://goo.gl/xZd16w
3. Athivarapu, P.K., Bhagwan, R., Guha, S., Navda, V., Ramjee, R., Arora, D., Padmanabhan, V.N., Varghese, G.: RadioJockey: mining program execution to optimize cellular radio usage. In: Proceedings of the 18th Annual International Conference on Mobile Computing and Networking (2012)
4. Aucinas, A., Vallina-Rodriguez, N., Grunenberger, Y., Erramilli, V., Papagiannaki, K., Crowcroft, J., Wetherall, D.: Staying online while mobile: the hidden costs. In: Proceedings of the Ninth ACM Conference on Emerging Networking Experiments and Technologies (2013)
5. Balasubramanian, N., Balasubramanian, A., Venkataramani, A.: Energy consumption in mobile phones: a measurement study and implications for network applications. In: Proceedings of the 9th ACM SIGCOMM Conference on Internet Measurement Conference (2009)
6. Gui, J., Mcilroy, S., Nagappan, M., Halfond, W.G.: Truth in advertising: the hidden cost of mobile ads for software developers. In: Proceedings of the 37th International Conference on Software Engineering (2015)
7. Han, D., Zhang, C., Fan, X., Hindle, A., Wong, K., Stroulia, E.: Understanding Android fragmentation with topic analysis of vendor-specific bugs. In: 19th Working Conference on Reverse Engineering (2012)
8. Higgins, B.D., Reda, A., Alperovich, T., Flinn, J., Giuli, T.J., Noble, B., Watson, D.: Intentional networking: opportunistic exploitation of mobile network diversity. In: Proceedings of the Sixteenth Annual International Conference on Mobile Computing and Networking (2010)
9. Liu, H., Zhang, Y., Zhou, Y.: TailTheft: leveraging the wasted time for saving energy in cellular communications. In: Proceedings of the Sixth International Workshop on MobiArch (2011)
10. McDonnell, T., Ray, B., Kim, M.: An empirical study of API stability and adoption in the Android ecosystem. In: Proceedings of the 2013 IEEE International Conference on Software Maintenance (2013)
11. Mulliner, C., Oberheide, J., Robertson, W., Kirda, E.: PatchDroid: scalable third-party security patches for Android devices. In: Proceedings of the 29th Annual Computer Security Applications Conference (2013)
12. Nguyen, N.T., Wang, Y., Liu, X., Zheng, R., Han, Z.: A nonparametric Bayesian approach for opportunistic data transfer in cellular networks. In: Wang, X., Zheng, R., Jing, T., Xing, K. (eds.) WASA 2012. LNCS, vol. 7405, pp. 88â€“99. Springer, Heidelberg (2012)
13. Park, S., Kim, D., Cha, H.: Reducing energy consumption of alarm-induced wake-ups on Android smartphones. In: Proceedings of the 16th International Workshop on Mobile Computing Systems and Applications (2015)
14. Qian, F., Wang, Z., Gao, Y., Huang, J., Gerber, A., Mao, Z., Sen, S., Spatscheck, O.: Periodic transfers in mobile applications: network-wide origin, impact, and optimization. In: Proceedings of the 21st International Conference on World Wide Web (2012)
15. Shi, C., Joshi, K., Panta, R.K., Ammar, M.H., Zegura, E.W.: CoAST: collaborative application-aware scheduling of last-mile cellular traffic. In: Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services (2014)
16. Vergara, E.J., Nadjm-Tehrani, S.: Energy-aware cross-layer burst buffering for wireless communication. In: Proceedings of the 3rd International Conference on Future Energy Systems: Where Energy, Computing and Communication Meet (2012)
17. Vergara, E.J., Sanjuan, J., Nadjm-Tehrani, S.: Kernel level energy-efficient 3G background traffic shaper for Android smartphones. In: Proceedings of the 9th International Wireless Communications and Mobile Computing Conference (2013)
18. Viennot, N., Garcia, E., Nieh, J.: A measurement study of Google Play. In: The 2014 ACM International Conference on Measurement and Modeling of Computer Systems (2014)