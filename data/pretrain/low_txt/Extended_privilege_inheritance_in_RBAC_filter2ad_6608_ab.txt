### Role-Based Access Control (RBAC) with Extended Privilege Inheritance

#### 1. Introduction to Extended Privilege Inheritance

In the context of RBAC, let \( r \) be a role in \( R \) and \( p \) be a privilege in \( P \). Let \( \triangleleft \) denote the standard privilege inheritance as defined in Definition 3.2. We define the extended privilege inheritance \( r \triangleleft^* p \) as follows:

\[ r \triangleleft^* p \text{ if and only if } \exists p' \in P \text{ such that } r \triangleleft p' \text{ and } p' \rightarrow p. \]

The extended privilege inheritance relation is valuable because it allows users with administrative privileges to be implicitly authorized for weaker administrative privileges. This ensures that administrative users can perform safer operations than those originally allowed.

#### 2. Practical Example

**Example 3.5 (Visiting Researcher)**

Charlie, the security administrator, grants the staff the privilege to add visiting researchers to the staff role. There is also a role below staff called `wi-fi`, which has the privilege to use the wireless network. Alice is a visiting researcher, and Bob is a member of the staff. Alice only needs access to the wi-fi network, so Bob wants Alice to use the `wi-fi` role. However, Charlie did not explicitly provide this privilege to the staff. This scenario is illustrated in Figure 3.

In the standard RBAC model, Bob can only assign Alice to the staff role. Given that Alice only needs wi-fi access, Bob encourages Alice to apply the principle of least privilege and activate only the `wi-fi` role. However, Bob can only hope that Alice does so. With the extended privilege inheritance relation, Bob can directly assign Alice to the `wi-fi` role because of his privilege to add users to the staff role. In this way, Bob applies the principle of least privilege on Alice's behalf.

#### 3. Tractability

We now address the practical issue of proving that the extended privilege inheritance relation (Definition 3.4) is tractable. Since the full set \( P \) of privileges is infinite, this result is not immediate. A naive forward search does not necessarily terminate. The proof also indicates how a decision algorithm, deciding which privileges are to be given to which roles, can be implemented at an RBAC security monitor.

**Lemma 3.6 (Decidability of the Ordering Relation)**

Given an RBAC state \( S \) and two privileges \( p \) and \( q \), it is decidable whether \( p \rightarrow q \).

**Proof:**

The proof is by structural induction over \( q \).

- **Base Cases:**
  - If \( q \) is a user privilege from \( Q \), then \( p \rightarrow q \) holds only when \( p = q \).
  - If \( q \) is of the form `addUser(., .)`, only rule (2) needs to be checked, which has finite premises.
  - If \( q \) is of the form `addEdge(., .)`, rules (2) and (3) of Definition 3.3 need to be checked, both of which have finite premises.

- **Induction Step:**
  - Suppose \( q \) is `addPrivilege(r', q')` for some role \( r' \) and privilege \( q' \). Then \( p \rightarrow q \) can only hold if:
    - \( p \) is of the form `addEdge(., .)` and the premises of rule (5) hold, or
    - \( p \) is of the form `addPrivilege(., .)` and the premises of rule (6) hold.
  - In both cases, the premises are decidable, either because they are finite or because the induction hypothesis is applicable (since \( q' \) is structurally smaller than \( q \)).

**Theorem 3.7 (Decidability of Extended Privilege Inheritance)**

Given an RBAC state, a role \( r \), and a privilege \( p \) in \( P \), there is an algorithm to determine whether \( r \triangleleft^* p \).

**Proof:**

The standard privilege inheritance \( \triangleleft \) is decidable, yielding a finite set of privileges \( p' \) inherited by \( r \). For each \( p' \), we need to check whether \( p' \rightarrow p \). This was shown to be decidable in Lemma 3.6.

**Example 3.8 (Practical Usage)**

Reconsider Example 3.5. Can Bob assign Alice to the `wi-fi` role? We need to check if the staff role inherits the privilege `addUser(alice, wi-fi)`. Using the first part of Definition 3.4, we find that the staff role has the privilege `addUser(alice, staff)`. Now we need to decide whether:

\[ \text{addUser(alice, staff)} \rightarrow \text{addUser(alice, wi-fi)}. \]

This follows trivially from the first rule of Definition 3.3.

For a more involved example, suppose the system administrator Charlie has the privilege `addPrivilege(staff, addUser(alice, staff))`. Can Charlie also give the staff role the privilege `addUser(alice, wi-fi)`? We need to check whether:

\[ \text{addPrivilege(staff, addUser(alice, staff))} \rightarrow \text{addPrivilege(staff, addUser(alice, wi-fi))}. \]

This is indeed the case by using rule (6) first, and then rule (2).

If we remove the edge between the staff and the `wi-fi` role, we need to determine that the previous relation does not hold. Only rule (6) applies, and we must decide whether:

\[ \text{addUser(alice, staff)} \rightarrow \text{addUser(alice, wi-fi)}. \]

This is a base case of the induction described in the proof of Lemma 3.6. Only rule (2) remains to be checked, and we conclude that it does not hold.

#### 4. Related Work

The problem of administering an RBAC system was first addressed by Sandhu et al. [11]. Subsequently, numerous articles have extended or improved the administration model proposed there [2, 3, 4, 5, 10, 13, 14, 15].

- **Barka et al. [2]** distinguish between original and delegated user role assignments. Delegations are modeled using special sets, and different sets are used for single-step and double-step delegations. In their work, each level of delegation requires the definition of tens of sets and functions, whereas in our model, administrative privileges are simply assigned to roles like ordinary privileges.
- **PDBM Model [15]** defines cascaded delegation, which is expressible in our grammar. However, in the PDBM model, each delegation requires the addition of a separate role, whereas in our model, no additional roles are required.
- **Zhang et al. [14]** implement rule-based constraints on delegations, focusing on separation of duty policies.
- **Crampton [4]** defines the concept of administrative scope, constraining delegations to evolve naturally in the role hierarchy.
- **Bandman et al. [1]** use a general constraint language to specify constraints on who can receive certain delegations.
- **Role-based trust management systems [6, 7, 8, 12]** and distributed certificate systems, such as SDSI [9], are related lines of research. These systems allow agents to exchange security statements, but in the RBAC setting, such statements should not be uttered by users unless they have the explicit privilege to do so.

#### 5. Conclusion

Our work contributes to the design of flexible administration models for RBAC. Flexible administration is crucial for reducing maintenance costs and enabling the RBAC system to adapt to changing circumstances. Specifically, we extend the standard RBAC privilege inheritance relation by defining an ordering on administrative privileges. This extension allows users with a particular administrative privilege to be implicitly authorized for weaker administrative privileges. We show that this relation is tractable and can be seen as an application of the principle of least privilege at the administrative level.

Future work could include expressing more complex privileges and investigating how our results can be combined with existing work on administrative constraints.

#### Acknowledgements

Marnix Dekker was funded by TNO and SenterNovem through the Dutch IOP Gencom project PAW. Jan Cederquist was funded by the Dutch NWO Account project and partially, while at SQIG-IT IST TU Lisbon, supported by the Portuguese FEDER/FCT project QuantLog POCI/MAT/55796/2004.

#### References

[1] O. L. Bandmann, B. Sadighi Firozabadi, and M. Dam. Constrained delegation. In M. Abadi and S. M. Bellovin, editors, Proc. of the Symp. on Security and Privacy (S&P), pages 131–140. IEEE Computer Society Press, 2002.

[2] E. Barka and R. S. Sandhu. Framework for role-based delegation models. In J. Epstein, L. Notargiacomo, and R. Anderson, editors, Annual Computer Security Applications Conference (ACSAC), pages 168–176. IEEE Computer Society Press, 2000.

[3] J. Crampton and H. Khambhammettu. Delegation in role-based access control. In D. Gollmann and A. Sabelfeld, editors, Proc. of the European Symp. on Research in Computer Security (ESORICS), LNCS, pages 174–191. Springer, Berlin, 2006.

[4] J. Crampton and G. Loizou. Administrative scope: A foundation for role-based administrative models. Transactions on Information System Security (TISSEC), 6(2):201–231, 2003.

[5] D. F. Ferraiolo, D. R. Kuhn, and R. Chandramouli. Role-based Access Control. Computer Security Series. Artech House, 2003.

[6] T. Jim. SD3: A trust management system with certified evaluation. In R. Needham and M. Abadi, editors, Proc. of the Symp. on Security and Privacy (S&P), pages 106–115. IEEE Computer Society Press, 2001.

[7] N. Li, J. Mitchell, and W. Winsborough. Design of a role-based trust-management framework. In M. Abadi and S. M. Bellovin, editors, Proc. of the Symp. on Security and Privacy (S&P), pages 114–130. IEEE Computer Society Press, 2002.

[8] N. Li, W. H. Winsborough, and J. C. Mitchell. Distributed credential chain discovery in trust management: extended abstract. In P. Samarati, editor, Proc. of the Conf. on Computer and Communications Security (CCS), pages 156–165. ACM Press, 2001.

[9] R. L. Rivest and B. Lampson. SDSI – A simple distributed security infrastructure. Presented at CRYPTO’96 Rump session, 1996.

[10] R. S. Sandhu, V. Bhamidipati, and Q. Munawer. The ARBAC97 model for role-based administration of roles. Transactions on Information and System Security (TISSEC), 2(1):105–135, 1999.

[11] R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E. Youman. Role-based access control models. IEEE Computer, 29(2):38–47, 1996.

[12] R. Tamassia, D. Yao, and W. H. Winsborough. Role-based cascaded delegation. In T. Jaeger and E. Ferrari, editors, Proc. of the Symp. on Access Control Models and Technologies (SACMAT), pages 146–155. ACM Press, 2004.

[13] J. Wainer and A. Kumar. A fine-grained, controllable, user-to-user delegation method in RBAC. In E. Ferrari and G. Ahn, editors, Proc. of the Symp. on Access Control Models and Technologies (SACMAT), pages 59–66. ACM Press, 2005.

[14] L. Zhang, G. Ahn, and B. Chu. A rule-based framework for role-based delegation and revocation. Transactions on Information and System Security (TISSEC), 6(3):404–441, 2003.

[15] X. Zhang, S. Oh, and R. S. Sandhu. PBDM: a flexible delegation model in RBAC. In D. Ferraiolo, editor, Proc. of the Symp. on Access Control Models and Technologies (SACMAT), pages 149–157. ACM Press, 2003.

#### Appendix: Infinitely Many Weaker Privileges

Consider a state where \((r_2, \text{addEdge}(r_1, r_2)) \in PA\). Suppose we are interested in finding all the privileges weaker than \(\text{addEdge}(r_1, r_2)\). The first weaker privilege we discover by applying rule (5) in Definition 3.3:

\[ \text{addPrivilege}(r_1, \text{addEdge}(r_1, r_2)). \]

Using this result in rule (6), we find another weaker privilege:

\[ \text{addPrivilege}(r_1, \text{addPrivilege}(r_1, \text{addEdge}(r_1, r_2))), \]

and we can use this again in rule (6), and so on.

Note that the outer nesting in the last term is redundant. Instead of assigning the privilege \(\text{addEdge}(r_1, r_2)\) to \( r_1 \), one assigns the privilege to do so, to \( r_1 \). This only requires the users in role \( r_1 \) to perform another administrative step, making the extra nesting useless. It seems that we can stop after \( n \) applications of rule (6), where \( n \) is the length of the longest chain in \( RH \), but we do not make this observation more formal here.