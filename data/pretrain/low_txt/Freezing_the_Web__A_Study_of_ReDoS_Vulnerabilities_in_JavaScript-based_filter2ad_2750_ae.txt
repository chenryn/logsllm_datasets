### Vulnerable Function and Attack Vectors

The vulnerable function is susceptible to both ReDoS (Regular Expression Denial of Service) and command injection attacks [37]. An attacker can exploit the ReDoS vulnerability as a covert method to scan for websites using the vulnerable module, and subsequently launch a command injection attack on these identified sites.

### Related Work

#### Server-Side JavaScript Security
Ojamaa and Düüna [27] discuss the security of Node.js and identify algorithmic complexity attacks as one of the primary threats. Davis et al. [11] demonstrate that ReDoS vulnerabilities are prevalent in popular modules. Our work extends these observations by showing that ReDoS vulnerabilities affect real-world websites. Other studies on Node.js explore command injection vulnerabilities [37] and configuration errors [32]. Various techniques address more general Node.js-related issues, such as static analysis for Node.js-specific events [26], fuzzing to uncover concurrency-related bugs [12], auto-sanitization to protect against injections [37], and understanding event interactions between server-side and client-side code [1]. To our knowledge, this is the first study to analyze Node.js security problems in real-world websites and demonstrate how an attacker can exploit npm module vulnerabilities to attack websites.

#### Analysis of ReDoS Vulnerabilities
Previous research has analyzed the worst-case matching time of regular expressions [6, 41, 21, 2]. Most of this work assumes backtracking-style matching and analyzes regular expressions in isolation, without considering whether attacker-controlled inputs reach them. Wüstholtz et al. [43] consider this aspect by combining static analysis and exploit generation to find 41 vulnerabilities in Java software. Our work differs in three key ways: (i) we focus on JavaScript ReDoS, which is more severe than Java ReDoS, (ii) we detect vulnerabilities in real-world websites where source code is not available for analysis, and (iii) we uncover ReDoS vulnerabilities with advanced features like lookahead, which are not supported by previous work. A concurrent study [13] confirms that ReDoS is a significant threat for JavaScript code.

#### Regular Expressions
Regular expressions are often used for sanitizers and XSS filters. Bates et al. [5] show that XSS filters are frequently slow, incorrect, and sometimes introduce new vulnerabilities. Hooimeijer et al. [18] highlight that supposedly equivalent sanitizer implementations differ. Chapman et al. [9] indicate that developers struggle with composing and reading regular expressions. We are the first to analyze the impact of this issue on real-world websites. To avoid mistakes, developers may opt to synthesize regular expressions instead of writing them [3, 4].

#### Algorithmic Complexity Attacks
Differences between average and worst-case performance form the basis of algorithmic complexity attacks. Crosby and Wallach [10] analyze vulnerabilities in hash tables and binary trees, while Dietrich et al. [15] study serialization-related attacks. Techniques like Wise [7], SlowFuzz [28], and PerfSyn [39] generate inputs to trigger unexpectedly high complexity.

#### Resource Exhaustion Attacks
SAFER [8] statically detects CPU and stack exhaustion vulnerabilities involving recursive calls and loops. Huang et al. [19] examine blocking operations in the Android system that can force the OS to reboot when called multiple times. Shan et al. [35] model attacks on n-tier web applications using a queueing network model.

#### Testing Regular Expressions
The problem of generating inputs for regular expressions is also studied from a software testing perspective [40, 24, 22, 34]. Unlike our work, these techniques aim to maximize coverage or find bugs in the implementation.

#### Performance of JavaScript
ReDoS vulnerabilities are a type of performance problem. Addressing these issues is crucial, even if they are not exploited in a denial-of-service attack, to prevent websites from being perceived as slow and unresponsive. Existing work has studied JavaScript performance issues [33] and proposed profiling techniques to identify them [30, 17, 20]. Exploring the exploitability of other performance issues beyond ReDoS is a promising direction for future research.

#### Studies of the Web
Lauinger et al. [23] study the use of outdated client-side JavaScript libraries with known vulnerabilities. In contrast, we focus on ReDoS issues, server-side code, and up-to-date code that is still vulnerable. Another study examines attack vectors and defenses related to the postMessage API in HTML5 [36], showing that attackers can use it to circumvent the same-origin policy. Richards et al. [31] analyze the use of JavaScript's eval function, which is prone to code injections. These studies are orthogonal to our work. To our knowledge, we are the first to focus on server-side JavaScript and ReDoS vulnerabilities.

### Conclusions

This paper investigates ReDoS vulnerabilities in JavaScript-based web servers and demonstrates that they are a significant problem affecting various popular websites. We exploited eight vulnerabilities affecting at least 339 popular websites, showing that an attacker could block these sites for several seconds and sometimes much longer. More broadly, our results underscore the need for tools to analyze ReDoS vulnerabilities in JavaScript.

### Acknowledgments

This work was supported by the German Federal Ministry of Education and Research and the Hessian Ministry of Science and the Arts within CRISP, the German Research Foundation within the ConcSys and Perf4JS projects, and the Hessian LOEWE initiative within the Software-Factory 4.0 project.

### References

[1] Saba Alimadadi, Ali Mesbah, and Karthik Pattabiramman. Understanding asynchronous interactions in full-stack JavaScript. In Proceedings of the 38th International Conference on Software Engineering, ICSE, 2016.

[2] Arturs Backurs and Piotr Indyk. Which regular expression patterns are hard to match? In IEEE 57th Annual Symposium on Foundations of Computer Science, FOCS, 2016.

[3] Alberto Bartoli, Giorgio Davanzo, Andrea De Lorenzo, Eric Medvet, and Enrico Sorio. Automatic synthesis of regular expressions from examples. IEEE Computer, 47(12):72–80, 2014.

[4] Alberto Bartoli, Andrea De Lorenzo, Eric Medvet, and Fabiano Tarlao. Can a machine replace humans in building regular expressions? A case study. IEEE Intelligent Systems, 2016.

[5] Daniel Bates, Adam Barth, and Collin Jackson. Regular expressions considered harmful in client-side XSS filters. In Proceedings of the 19th International Conference on World Wide Web, WWW 2010, Raleigh, North Carolina, USA, April 26-30, 2010, pages 91–100, 2010.

[6] Martin Berglund, Frank Drewes, and Brink van der Merwe. Analyzing catastrophic backtracking behavior in practical regular expression matching. In Proceedings 14th International Conference on Automata and Formal Languages, AFL 2014, Szeged, Hungary, May 27-29, 2014., pages 109–123, 2014.

[7] Jacob Burnim, Sudeep Juvekar, and Koushik Sen. WISE: Automated test generation for worst-case complexity. In ICSE, pages 463–473. IEEE, 2009.

[8] Richard M. Chang, Guofei Jiang, Franjo Ivancic, Sriram Sankaranarayanan, and Vitaly Shmatikov. Inputs of coma: Static detection of denial-of-service vulnerabilities. In Proceedings of the 22nd IEEE Computer Security Foundations Symposium, CSF 2009, Port Jefferson, New York, USA, July 8-10, 2009, pages 186–199, 2009.

[9] Carl Chapman and Kathryn T. Stolee. Exploring regular expression usage and context in Python. In Proceedings of the 25th International Symposium on Software Testing and Analysis, ISSTA, 2016.

[10] Scott A. Crosby and Dan S. Wallach. Denial of service via algorithmic complexity attacks. In Proceedings of the 12th USENIX Security Symposium, 2003.

[11] James Davis, Gregor Kildow, and Dongyoon Lee. The case of the poisoned event handler: Weaknesses in the Node.js event-driven architecture. In Proceedings of the 10th European Workshop on Systems Security, EUROSEC, 2017.

[12] James Davis, Arun Thekumparampil, and Dongyoon Lee. Node.fz: Fuzzing the server-side event-driven architecture. In Proceedings of the Twelfth European Conference on Computer Systems, EuroSys 2017, Belgrade, Serbia, April 23-26, 2017, pages 145–160, 2017.

[13] James C. Davis, Christy A. Coghlan, Francisco Servant, and Dongyoon Lee. The impact of regular expression denial of service (ReDoS) in practice: an empirical study at the ecosystem scale. In FSE, 2018.

[14] James C. Davis, Eric R. Williamson, and Dongyoon Lee. A sense of time for JavaScript and Node.js. In USENIX Security, 2018.

[15] Jens Dietrich, Kamil Jezek, Shawn Rasheed, Amjed Tahir, and Alex Potanin. Evil pickles: DoS attacks based on object-graph engineering. In 31st European Conference on Object-Oriented Programming, ECOOP, 2017.

[16] Andy Georges, Dries Buytaert, and Lieven Eeckhout. Statistically rigorous Java performance evaluation. In Conference on Object-Oriented Programming, Systems, Languages, and Application (OOPSLA), pages 57–76. ACM, 2007.

[17] Liang Gong, Michael Pradel, and Koushik Sen. JIT-Prof: Pinpointing JIT-unfriendly JavaScript code. In European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE), pages 357–368, 2015.

[18] Pieter Hooimeijer, Benjamin Livshits, David Molnar, Prateek Saxena, and Margus Veanes. Fast and precise sanitizer analysis with BEK. In USENIX Security Symposium, pages 1–16, August 2011.

[19] Heqing Huang, Sencun Zhu, Kai Chen, and Peng Liu. From system services freezing to system server shutdown in Android: All you need is a loop in an app. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, Denver, CO, USA, October 12-6, 2015, pages 1236–1247, 2015.

[20] Simon Holm Jensen, Manu Sridharan, Koushik Sen, and Satish Chandra. MemInsight: platform-independent memory debugging for JavaScript. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2015, Bergamo, Italy, August 30 - September 4, 2015, pages 345–356, 2015.

[21] James Kirrage, Asiri Rathnayake, and Hayo Thielecke. Static analysis for regular expression denial-of-service attacks. In Network and System Security - 7th International Conference, NSS 2013, Madrid, Spain, June 3-4, 2013. Proceedings, pages 135–148, 2013.

[22] Eric Larson and Anna Kirk. Generating evil test strings for regular expressions. In IEEE International Conference on Software Testing, Verification and Validation, ICST 2016, 2016.

[23] Tobias Lauinger, Abdelberi Chaabane, Sajjad Arshad, William Robertson, Christo Wilson, and Engin Kirda. Thou shalt not depend on me: Analysing the use of outdated JavaScript libraries on the web. In NDSS, 2017.

[24] Nuo Li, Tao Xie, Nikolai Tillmann, Jonathan de Halleux, and Wolfram Schulte. Reggae: Automated test generation for programs using complex regular expressions. In ASE 2009, 24th IEEE/ACM International Conference on Automated Software Engineering, 2009.

[25] Alex Mackey, William Stewart Tulloch, and Mahesh Krishnan. Introducing .NET 4.5. Apress, 2012.

[26] Magnus Madsen, Frank Tip, and Ondrej Lhoták. Static analysis of event-driven Node.js JavaScript applications. In Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA, 2015.

[27] Andres Ojamaa and Karl Düüna. Assessing the security of Node.js platform. In International Conference for Internet Technology and Secured Transactions, 2012.

[28] Theofilos Petsios, Jason Zhao, Angelos D. Keromytis, and Suman Jana. Slowfuzz: Automated domain-independent detection of algorithmic complexity vulnerabilities. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, CCS 2017, Dallas, TX, USA, October 30 - November 03, 2017, pages 2155–2168, 2017.

[29] Michael Pradel, Markus Huggler, and Thomas R. Gross. Performance regression testing of concurrent classes. In International Symposium on Software Testing and Analysis (ISSTA), pages 13–25, 2014.

[30] Michael Pradel, Parker Schuh, George Necula, and Koushik Sen. EventBreak: Analyzing the responsiveness of user interfaces through performance-guided test generation. In Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA), pages 33–47, 2014.

[31] Gregor Richards, Christian Hammer, Brian Burg, and Jan Vitek. The eval that men do - a large-scale study of the use of eval in JavaScript applications. In European Conference on Object-Oriented Programming (ECOOP), pages 52–78, 2011.

[32] Mohammed Sayagh, Noureddine Kerzazi, and Bram Adams. On cross-stack configuration errors. In Proceedings of the 39th International Conference on Software Engineering, ICSE 2017, Buenos Aires, Argentina, May 20-28, 2017, pages 255–265, 2017.

[33] Marija Selakovic and Michael Pradel. Performance issues and optimizations in JavaScript: An empirical study. In International Conference on Software Engineering (ICSE), pages 61–72, 2016.

[34] Muzammil Shahbaz, Phil McMinn, and Mark Stevenson. Automated discovery of valid test strings from the web using dynamic regular expressions collation and natural language processing. In 12th International Conference on Quality Software, 2012.

[35] Huasong Shan, Qingyang Wang, and Calton Pu. Tail attacks on web applications. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, CCS 2017, Dallas, TX, USA, October 30 - November 03, 2017, pages 1725–1739, 2017.

[36] Sooel Son and Vitaly Shmatikov. The postman always rings twice: Attacking and defending postmessage in HTML5 websites. In NDSS, 2013.

[37] Cristian-Alexandru Staicu, Michael Pradel, and Ben Livshits. Understanding and automatically preventing injection attacks on Node.js. In NDSS, 2018.

[38] Ken Thompson. Programming techniques: Regular expression search algorithm. Communications of the ACM, 11(6):419–422, 1968.

[39] Luca Della Toffola, Michael Pradel, and Thomas R. Gross. Synthesizing programs that expose performance bottlenecks. In CGO, 2018.

[40] Margus Veanes, Peli de Halleux, and Nikolai Tillmann. Rex: Symbolic regular expression explorer. In Third International Conference on Software Testing, Verification and Validation, ICST 2010, 2010.

[41] Nicolaas Weideman, Brink van der Merwe, Martin Berglund, and Bruce Watson. Analyzing matching time behavior of backtracking regular expression matchers by using ambiguity of NFA. In Implementation and Application of Automata - 21st International Conference, CIAA, 2016.

[42] Paul Wilton. Beginning JavaScript. John Wiley & Sons, 2004.

[43] Valentin Wüstholtz, Oswaldo Olivo, Marijn J. H. Heule, and Isil Dillig. Static detection of DoS vulnerabilities in programs that use regular expressions. In Tools and Algorithms for the Construction and Analysis of Systems - 23rd International Conference, TACAS, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS, 2017.