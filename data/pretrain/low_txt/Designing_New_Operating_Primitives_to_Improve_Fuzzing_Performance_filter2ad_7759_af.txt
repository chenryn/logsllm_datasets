### Figure 8: Evaluation of `snapshot()` System Call Against `fork()` and `pthread_create()`

**Figure 8(a)** illustrates the impact of the `snapshot()` system call while fuzzing the libpng library. **Figure 8(b)** compares the scalability of various process creation primitives, including `fork()`, `pthread_create()`, and the optimized AFL case, when fuzzing the libpng library.

#### Performance Metrics
- **Y-axis:** Executions per second (execs/sec)
- **X-axis:** Number of cores

| Cores | 1 | 2 | 4 | 15 | 30 | 45 | 60 | 75 | 90 | 105 | 120 |
|-------|---|---|---|----|----|----|----|----|----|-----|-----|
| execs/sec | 800k | 700k | 600k | 500k | 400k | 300k | 200k | 100k | 0k |  |  |

### Figure 9: Impact of File System on Optimized AFL for Libpng Library

This figure shows the performance impact of different file systems on our optimized version of AFL while fuzzing the libpng library. The results clearly indicate that AFL is significantly affected by the physical medium and file system overhead.

- **HDD to SSD:** Scalability improves by 1.7×.
- **SSD to tmpfs:** Further improvement by 3.2×.
- **tmpfs to ptmpfs:** Performance increases by 1.9×, 6.3×, and 10.8× over simple tmpfs, SSD, and HDD, respectively.

Even with tmpfs, performance saturation occurs at 60 cores due to the non-scalable nature of opening and closing files in a shared directory. Our partitioned approach (ptmpfs) mitigates this bottleneck, improving AFL's scalability by 24.3× on 120 cores compared to the stock version.

### 6.3.3 File-system Overhead

Most existing fuzzers save interesting test cases and crash information in a user-specified directory. As shown in Figure 9, the physical medium and file system overhead significantly affect AFL's performance. For example, switching from an HDD to an SSD improves scalability by 1.7×, and further switching to an in-memory file system (tmpfs) enhances it by 3.2×. However, even with tmpfs, performance saturates at 60 cores due to the non-scalable operation of opening and closing files in a shared directory [32].

To address this, we use a partitioned (ptmpfs) approach, which partially mitigates the file system bottleneck. This approach improves performance by 1.9×, 6.3×, and 10.8× over simple tmpfs, SSD, and HDD, respectively. In summary, our partitioned approach enhances AFL's scalability by 24.3× on 120 cores compared to the stock version.

### 7 RELATED WORK

Our work is motivated by previous research on fuzzing techniques [7, 12, 13, 21, 23, 27, 29, 34, 36, 41], which aim to explore program paths wisely, and large-scale fuzzing [20, 22, 31], which aims to explore program paths faster using many, networked machines. Our goal is to improve the performance and scalability of fuzzing on a single, multi-core machine, making our techniques orthogonal to previous work. We are also influenced by prior work on OS scalability [4, 5, 8–10, 16–18, 26, 32] and solutions to improve scalability [6, 15, 19, 28, 30, 33]. We analyze OS scalability bottlenecks specific to fuzzers and propose practical solutions for scalable, performant fuzzing.

#### Fuzzing Techniques

- **Feedback-driven Fuzzers [12, 21, 23, 29, 34, 41]:** Profile runtime characteristics and use the results to guide input generation.
- **Coverage-driven Fuzzers [23, 29, 41]:** Use past code coverage to determine the interest of mutated inputs.
- **Advanced Knowledge Retrieval [12, 34]:** Utilize code- and data-flow features or metrics to enhance input evolution.
- **Hardware Features [21]:** Use Intel PT and BTS for execution tracing.
- **Scheduling and Symbolic Execution [7, 13, 27, 36]:** Address randomness by scheduling test cases or combining with symbolic execution.

Our research focuses on solving the performance bottleneck of fuzzing through fuzzer-agnostic primitives from the operating system side, specifically designed to speed up fuzzing with multiple concurrent instances.

#### Large-scale Fuzzing

Recent years have seen a rapid increase in vulnerabilities in modern software and operating systems, leading organizations to invest heavily in automated fuzzing. For example:
- **Google's ClusterFuzz [20]:** Runs several hundred virtual machines simultaneously, processing trillions of test cases.
- **OSS-Fuzz [22]:** Targets open-source software.
- **Microsoft's Project Springfield [31]:** Provides a cloud-based fuzzing service.

Our proposed operating primitives can boost fuzzers deployed on large clusters, saving significant costs.

#### Process Snapshot

Recent research [6, 15, 28] proposes OS primitives based on process snapshots to provide temporary and isolated execution contexts. These include:
- **lwCs (light-weight contexts) [28]:** Independent units of protection, privilege, and execution state within a process.
- **Shreds [15]:** In-process execution context with private memory access.
- **Wedge [6]:** Splits applications into fine-grained, least-privilege compartments.

These works aim to create lightweight execution contexts for sandboxing, whereas our `snapshot()` system call maintains the same execution context for fuzzing purposes.

#### OS Scalability

Researchers have optimized existing OSes [4, 8–10, 16, 17, 26] or rewritten them based on new design principles [5, 18]. Our design decisions for fuzzing are inspired by these works and general concurrent programming. For instance, Wickizer et al. [4] improved the performance of Linux `fork()`, while we designed a lightweight process spawning API specific to fuzzing. Prior works have used in-memory file systems to hide file system overhead; we use two-level caching to provide the required file system interface and memory bandwidth.

#### OS Specialization

Prior research [19, 30, 33] has focused on removing underlying OS overhead in both bare metal and cloud environments. Our work specializes the OS for fuzzing, but remains generic from an OS perspective compared to library OS, which rewrites applications for performance.

### 8 DISCUSSION AND FUTURE WORK

#### Applicable Fuzzers

We focus on improving the performance and scalability of general application fuzzers that natively execute targets with concrete input values. Our operating primitives may bring less benefit to fuzzing tools relying on symbolic execution, taint analysis, or instruction emulation. OS kernel fuzzers are out of scope, as they face different performance bottlenecks.

#### Cross-platform Implementation

We implemented our design choices on the Linux platform. Future work will port our implementation to MacOS and Windows due to their popularity.

#### Scalable Fuzzing on VM Clusters

The scalability of fuzzers depends not only on their design but also on the underlying abstractions. Cloud providers adopting fuzzing as a major service (e.g., Project Springfield on Microsoft Azure [31]) or abstracting fuzzing instances inside VMs or containers (e.g., OSS-Fuzz by Google [22]) require efficient and scalable hypervisor primitives to bridge the semantic gap between the hypervisor, guest OS, and fuzzing instance.

### 9 CONCLUSION

Fuzzing is a critical tool for finding security bugs in various organizations and communities. However, with increasing code bases and the vanishing of trivial bugs, fuzzers now spend days, weeks, or even months to find critical issues, requiring large computing resources and monetary expenditure. Previous work has focused on generating interesting test cases, but has neglected system design aspects. In this work, we study and profile the components of state-of-the-art fuzzers and their interaction with the OS, identifying and addressing three design flaws for AFL and LibFuzzer. Our proposed operating primitives improve AFL's performance by up to 7.7×, 25.9×, and 28.9× on 30, 60, and 120 cores, respectively, and LibFuzzer's performance by up to 170.5×, 134.9×, and 735.7× on the same core counts.

### 10 ACKNOWLEDGMENT

We thank the anonymous reviewers for their helpful feedback. This research was supported, in part, by the NSF awards DGE-1500084, CNS-1563848, CNS-1704701, and CRI-1629851, ONR under grant N000141512162, DARPA TC (No. DARPA FA8650-15-C-7556), and XD3 programs (No. DARPA HR0011-16-C-0059), and ETRI IITP/KEIT[B0101-17-0644], and gifts from Facebook, Mozilla, and Intel.

### REFERENCES

[1] Nightmare, 2014. https://github.com/joxeankoret/nightmare.
[2] zzuf, 2016. https://github.com/samhocevar/zzuf.
[3] Pwn2Own 2017: Chrome Remains the Winner in Browser Security, 2017. https://securityzap.com/pwn2own-2017-chrome-remains-winner-browser-security/.
[4] B. Wickizer, S., Kaashoek, M. F., Morris, R., and Zeldovich, N. OpLog: a library for scaling update-heavy data structures. CSAIL Technical Report (2013).
[5] Baumann, A., Barham, P., Dagand, P.-E., Harris, T., Isaacs, R., Peter, S., Roscoe, T., Schüpbach, A., and Singhania, A. The Multikernel: A New OS Architecture for Scalable Multicore Systems. In Proceedings of the 8th USENIX Symposium on Operating Systems Design and Implementation (OSDI) (San Diego, CA, Dec. 2008).
[6] Bittau, A., Marchenko, P., Handley, M., and Karp, B. Wedge: Splitting Applications into Reduced-Privilege Compartments. In Proceedings of the 5th USENIX Symposium on Networked Systems Design and Implementation (NSDI) (San Francisco, CA, Apr. 2008).
[7] Böhme, M., Pham, V.-T., and Roychoudhury, A. Coverage-based greybox fuzzing as Markov chain. In Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS) (Vienna, Austria, Oct. 2016).
[8] Boyd-Wickizer, S., Chen, H., Chen, R., Mao, Y., Kaashoek, M. F., Morris, R., Pesterev, A., Stein, L., Wu, M., Dai, Y., Zhang, Y., and Zhang, Z. Corey: An Operating System for Many Cores. In Proceedings of the 8th USENIX Symposium on Operating Systems Design and Implementation (OSDI) (San Diego, CA, Dec. 2008).
[9] Boyd-Wickizer, S., Clements, A. T., Mao, Y., Pesterev, A., Kaashoek, M. F., Morris, R., and Zeldovich, N. An Analysis of Linux Scalability to Many Cores. In Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation (OSDI) (Vancouver, Canada, Oct. 2010).
[10] Boyd-Wickizer, S., Kaashoek, M. F., Morris, R., and Zeldovich, N. Non-scalable locks are dangerous. In Proceedings of the Linux Symposium (Ottawa, Canada, July 2012).
[11] Boyd-Wickizer, S., Kaashoek, M. F., Morris, R., and Zeldovich, N. OpLog: a library for scaling update-heavy data structures.
[12] CENSUS. Choronzon - An evolutionary knowledge-based fuzzer. ZeroNights Conference.
[13] Cha, S. K., Avgerinos, T., Rebert, A., and Brumley, D. Unleashing MAYHEM on binary code. In Proceedings of the 33rd IEEE Symposium on Security and Privacy (Oakland) (San Francisco, CA, May 2012).
[14] Chang, O., Arya, A., Serebryany, K., and Armour, J. OSS-Fuzz: Five months later, and rewarding projects, 2017. https://security.googleblog.com/2017/05/oss-fuzz-five-months-later-and.html.
[15] Chen, Y., Reymondjohnson, S., Sun, Z., and Lu, L. Shreds: Fine-grained execution units with private memory. In Proceedings of the 37th IEEE Symposium on Security and Privacy (Oakland) (San Jose, CA, May 2016).
[16] Clements, A. T., Kaashoek, M. F., and Zeldovich, N. Scalable Address Spaces Using RCU Balanced Trees. In Proceedings of the 17th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS) (London, UK, Mar. 2012).
[17] Clements, A. T., Kaashoek, M. F., and Zeldovich, N. RadixVM: Scalable Address Spaces for Multithreaded Applications. In Proceedings of the 8th European Conference on Computer Systems (EuroSys) (Prague, Czech Republic, Apr. 2013).
[18] Clements, A. T., Kaashoek, M. F., Zeldovich, N., Morris, R. T., and Kohler, E. The Scalable Commutativity Rule: Designing Scalable Software for Multicore Processors. In Proceedings of the 24th ACM Symposium on Operating Systems Principles (SOSP) (Farmington, PA, Nov. 2013).
[19] Engler, D. R., Kaashoek, M. F., and O’Toole, Jr., J. Exokernel: An Operating System Architecture for Application-level Resource Management. In Proceedings of the 15th ACM Symposium on Operating Systems Principles (SOSP) (Copper Mountain, CO, Dec. 1995), pp. 251–266.
[20] Google. Fuzzing for Security, 2012. https://blog.chromium.org/2012/04/fuzzing-for-security.html.
[21] Google. Honggfuzz, 2016. https://google.github.io/honggfuzz/.
[22] Google. OSS-Fuzz - Continuous Fuzzing for Open Source Software, 2016. https://github.com/google/oss-fuzz.
[23] Google. syzkaller. syzkaller - linux syscall fuzzer, 2016. https://github.com/google/syzkaller.
[24] Google. fuzzer-test-suite: Set of tests for fuzzing engines, 2017. https://github.com/google/fuzzer-test-suite.
[25] iSEC. PeachFarmer, 2014. http://github.com/iSECPartners/PeachFarmer.
[26] Kashyap, S., Min, C., and Kim, T. Scalable NUMA-aware Blocking Synchronization Primitives. In Proceedings of the 2017 USENIX Annual Technical Conference (ATC) (Santa Clara, CA, July 2017).
[27] Kim, S. Y., Lee, S., Yun, I., Xu, W., Lee, B., Yun, Y., and Kim, T. CAB-Fuzz: Practical Concolic Testing Techniques for COTS Operating Systems. In Proceedings of the 2017 USENIX Annual Technical Conference (ATC) (Santa Clara, CA, July 2017).
[28] Litton, J., Vahldiek-Oberwagner, A., Elnikety, E., Garg, D., Bhattacharjee, B., and Druschel, P. Light-weight contexts: an OS abstraction for safety and performance. In Proceedings of the 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI) (Savannah, GA, Nov. 2016).
[29] LLVM. libFuzzer - a library for coverage-guided fuzz testing, 2017. http://llvm.org/docs/LibFuzzer.html.
[30] Madhavapeddy, A., Mortier, R., Rotsos, C., Scott, D., Singh, B., Gazagnaire, T., Smith, S., Hand, S., and Crowcroft, J. Unikernels: Library Operating Systems for the Cloud. In Proceedings of the 18th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS) (Houston, TX, Mar. 2013), pp. 461–472.
[31] Microsoft. Microsoft previews Project Springfield, a cloud-based bug detector, 2016. https://blogs.microsoft.com/next/2016/09/26/microsoft-previews-project-springfield-cloud-based-bug-detector.
[32] Min, C., Kashyap, S., Maass, S., Kang, W., and Kim, T. Understanding Manycore Scalability of File Systems. In Proceedings of the 2016 USENIX Annual Technical Conference (ATC) (Denver, CO, June 2016).
[33] Porter, D. E., Boyd-Wickizer, S., Howell, J., Olinsky, R., and Hunt, G. C. Rethinking the Library OS from the Top Down. In Proceedings of the 16th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS) (Newport Beach, CA, Mar. 2011), pp. 291–304.
[34] Rawat, S., Jain, V., Kumar, A., Cojocar, L., Giuffrida, C., and Bos, H. VUzzer: Application-aware Evolutionary Fuzzing. In Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS) (San Diego, CA, Feb.–Mar. 2017).
[35] Ruderman, J. Releasing jsfunfuzz and domfuzz, 2015. http://www.squarefree.com/2015/07/28/releasing-jsfunfuzz-and-domfuzz/.
[36] Stephens, N., Grosen, J., Salls, C., Dutcher, A., Wang, R., Corbetta, J., Shoshitaishvili, Y., Kruegel, C., and Vigna, G. Driller: Augmenting fuzzing through selective symbolic execution. In Proceedings of the 2016 Annual Network and Distributed System Security Symposium (NDSS) (San Diego, CA, Feb. 2016).
[37] The Clang Team. Clang 5 documentation - SanitizerCoverage, 2017. http://clang.llvm.org/docs/SanitizerCoverage.html.
[38] Veggalam, S., Rawat, S., Haller, I., and Bos, H. IFuzzer: An Evolutionary Interpreter Fuzzer Using Genetic Programming. In Proceedings of the 21th European Symposium on Research in Computer Security (ESORICS) (Crete, Greece, Sept. 2016).
[39] Zalewski, M. Fuzzing random programs without execve(), 2014. https://lcamtuf.blogspot.com/2014/10/fuzzing-binaries-without-execve.html.
[40] Zalewski, M. AFL starting test cases, 2017. https://github.com/mirrorer/afl/tree/master/testcases.
[41] Zalewski, M. american fuzzy lop (2.41b), 2017. http://lcamtuf.coredump.cx/afl/.
[42] Zalewski, M. Technical "whitepaper" for afl-fuzz, 2017. https://github.com/mirrorer/afl/blob/master/docs/technical_details.txt.
[43] Zalewski, M. Tips for performance optimization, 2017. https://github.com/mirrorer/afl/blob/master/docs/perf_tips.txt.