### Partition Query Execution Time

The execution time of a multi-partition query is shorter than that of a single-partition query, as explained above. Consequently, the window of opportunity for speculative execution is narrower (cf. last paragraph in Section III-B).

### VI. RELATED WORK

State-machine replication is a well-established technique that has been extensively discussed in the literature. In this section, we focus on work related to the two optimizations we presented: speculative execution and state partitioning, as well as parallel B-trees.

#### Speculative Execution

Optimistic or speculative execution has been proposed as a mechanism to reduce the latency of agreement problems. For example, in [14] and [15], clients are included in the protocol execution to reduce the latency of Byzantine fault-tolerant agreement. In [3] and [4], the authors introduce atomic broadcast with optimistic delivery in the context of replicated databases. The motivation is similar to ours: overlapping the execution of transactions or commands with the ordering protocol. Optimistic delivery relies on spontaneous message ordering in local-area networks, which holds in the absence of contention. If too many commands are submitted simultaneously, out-of-order deliveries can occur more frequently, making the technique less effective. Ring Paxos, however, can use speculative execution even under high contention, as it does not depend on spontaneous message ordering.

#### State Partitioning

Partitioning the state of a replicated service is conceptually similar to partial replication of databases [16]. Partial database replication addresses scalability issues identified in fully replicated databases. Several partial database replication protocols have been proposed, some optimized for local-area networks (e.g., [17], [18], [19], [20]) and some topology-agnostic (e.g., [21], [22], [23], [24]). Partitioning the state of a replicated service differs from partially replicating a database in terms of data granularity and consistency criteria. Databases are typically organized as collections of data items, making their state partitioning simpler compared to services, which may not have been designed with partitioning in mind. Regarding consistency, the main criteria used in replicated databases are one-copy serializability [25] and a generalized form of snapshot isolation [26], [27]. These criteria do not account for real-time dependencies between operations, allowing for more efficient implementations than linearizability. To a certain extent, scaling a partially replicated database is "easier" than scaling a linearizable replicated service.

Ring Paxos, when equipped to implement state partitioning, resembles an atomic multicast protocol [28]. Our state partitioning ordering is inspired by the acyclic order property of atomic multicast [16]. To our knowledge, no previous work has explored multicast communication in the Paxos family of protocols, and no speculative or optimistic multicast protocol has been proposed so far.

#### B-Tree Service

The closest work to our B-tree service is [29], where the authors implement and evaluate a distributed B+Tree built on top of Sinfonia [30]. Sinfonia is a distributed, fault-tolerant storage engine that offers a low-level address space for storing data. It provides a minitransaction interface to its clients. Minitransactions are short-lived operations similar to a generalized compare-and-swap operation. The authors exploit Sinfonia's flexibility to implement a scalable B+Tree. As an optimization, inner nodes are replicated on all Sinfonia client nodes, allowing nodes to traverse the tree locally without contacting other nodes. However, all nodes must be involved in updating inner nodes. Sinfonia relies on stronger system assumptions than those assumed in this paper, due to the use of a two-phase commit protocol to terminate minitransactions.

### VII. CONCLUSIONS

This paper revisits state-machine replication from a performance perspective. State-machine replication is a well-known approach to making services fault-tolerant by fully replicating the service state on several servers and executing every client command in the same order on each non-faulty server. While some performance optimizations are possible, the technique inherently introduces overhead in service response time and is limited by the throughput of a single server. To mitigate these drawbacks, we have considered speculative execution and state partitioning.

Our experiments with speculative execution show that while the technique can reduce the response time of a replicated service, the improvement is limited. The resulting service’s response time remains significantly higher than that of a client-server setup. One area for further investigation is whether there are other ways to exploit speculation to reduce response time further. For example, a server could respond to a client immediately after a command is executed, even if the order confirmation has not been received, and notify the client later once the order is established. This mechanism would overlap both the command execution and its response with the ordering protocol.

State partitioning has shown remarkable results. In some cases, the throughput of a service improved by nearly four times after partitioning its state. Experiments also showed that the two techniques can be combined, leading to improvements in both throughput and response time. Our future plans include investigating the generality of the state partitioning technique and better characterizing the scenarios in which it can be used. We also intend to explore mechanisms to guarantee (quasi)-balanced B-trees.

### VIII. ACKNOWLEDGEMENTS

We wish to thank the anonymous reviewers for their comments. This work was partially funded by the Swiss National Science Foundation (#200021-121931) and the Hasler Foundation (#2316).

### REFERENCES

[1] L. Lamport, “Time, clocks, and the ordering of events in a distributed system,” Communications of the ACM, vol. 21, no. 7, pp. 558–565, 1978.
[2] F. B. Schneider, “Implementing fault-tolerant services using the state machine approach: A tutorial,” ACM Computing Surveys, vol. 22, no. 4, pp. 299–319, 1990.
[3] R. Jiménez-Peris, M. Patiño Martínez, B. Kemme, and G. Alonso, “Improving the scalability of fault-tolerant database clusters,” in Proceedings of the 22nd International Conference on Distributed Computing Systems (ICDCS’02), 2002.
[4] B. Kemme, F. Pedone, G. Alonso, and A. Schiper, “Processing transactions over optimistic atomic broadcast protocols,” in Proceedings of the 19th International Conference on Distributed Computing Systems (ICDCS’99), Austin (USA), 1999.
[20] N. Schiper, R. Schmidt, and F. Pedone, “Optimistic algorithms for partial database replication,” in Principles of Distributed Systems, 10th International Conference OPODIS, vol. 4305. Springer, 2006, pp. 81–93.
[21] U. Fritzke and P. Ingels, “Transactions on partially replicated data based on reliable and atomic multicasts,” in Proceedings of the 21st International Conference on Distributed Computing Systems, 2001, pp. 284–.
[22] N. Schiper, P. Sutra, and F. Pedone, “P-store: Genuine partial replication in wide area networks,” in Symposium on Reliable Distributed Systems (SRDS), 2010.
[23] D. Serrano, M. Patiño-Martínez, R. Jiménez-Peris, and B. Kemme, “Boosting database replication scalability through partial replication and 1-copy-snapshot-isolation,” in PRDC. IEEE Computer Society, 2007, pp. 290–297.
[24] ——, “An autonomic approach for replication of internet-based services,” in Symposium on Reliable Distributed Systems (SRDS’2008). IEEE, 2008, pp. 127–136.
[25] P. Bernstein, V. Hadzilacos, and N. Goodman, Concurrency Control and Recovery in Database Systems. Addison-Wesley, 1987.
[26] S. Elnikety, F. Pedone, and W. Zwaenepoel, “Database replication using generalized snapshot isolation,” in Symposium on Reliable Distributed Systems (SRDS’2005), Orlando, USA, 2005.
[27] Y. Lin, B. Kemme, R. Jiménez-Peris, M. Patiño-Martínez, and J. E. Armendáriz-Iñigo, “Snapshot isolation and integrity constraints in replicated databases,” ACM Trans. Database Syst., vol. 34, no. 2, 2009.
[28] X. Défago, A. Schiper, and P. Urbán, “Total order broadcast and multicast algorithms: Taxonomy and survey,” ACM Comput. Surv., vol. 36, no. 4, pp. 372–421, 2004.
[29] M. K. Aguilera, W. M. Golab, and M. A. Shah, “A practical scalable distributed B-tree,” PVLDB, vol. 1, no. 1, pp. 598–609, 2008.
[30] M. K. Aguilera, A. Merchant, M. Shah, A. Veitch, and C. Karamanolis, “Sinfonia: a new paradigm for building scalable distributed systems,” in SOSP ’07: Proceedings of twenty-first ACM SIGOPS symposium on Operating systems principles, 2007, pp. 159–174.
[5] P. J. Marandi, M. Primi, and F. Pedone, “High performance state-machine replication,” University of Lugano, Tech. Rep. 2010/08, December 2010.
[6] M. J. Fischer, N. A. Lynch, and M. S. Paterson, “Impossibility of distributed consensus with one faulty processor,” Journal of the ACM, vol. 32, no. 2, pp. 374–382, 1985.
[7] C. Dwork, N. Lynch, and L. Stockmeyer, “Consensus in the presence of partial synchrony,” Journal of the ACM, vol. 35, no. 2, pp. 288–323, 1988.
[8] H. Attiya and J. Welch, Distributed Computing: Fundamentals, Simulations, and Advanced Topics. Wiley-Interscience, 2004.
[9] L. Lamport, “The part-time parliament,” ACM Transactions on Computer Systems, vol. 16, no. 2, pp. 133–169, May 1998.
[10] R. Jimenez-Peris, M. Patino-Martinez, G. Alonso, and B. Kemme, “Are quorums an alternative for data replication?” ACM Transactions on Database Systems, vol. 28, no. 3, pp. 257–294, 2003.
[11] P. Marandi, M. Primi, N. Schiper, and F. Pedone, “Ring Paxos: A high-throughput atomic broadcast protocol,” in Dependable Systems and Networks (DSN), 2010 IEEE/IFIP International Conference on, 2010, pp. 527 –536.
[12] G. Weikum and G. Vossen, Transactional Information Systems: Theory, Algorithms, and the Practice of Concurrency Control and Recovery. Morgan Kaufmann, 2002.
[13] R. Jain, The art of computer systems performance analysis: techniques for experimental design, measurement, simulation, and modeling. New York: John Wiley and Sons, Inc., 1991.
[14] R. Kotla, L. Alvisi, M. Dahlin, A. Clement, and E. Wong, “Zyzzyva: speculative Byzantine fault tolerance,” in Proceedings of twenty-first ACM SIGOPS symposium on Operating systems principles, ser. SOSP ’07. New York, NY, USA: ACM, 2007, pp. 45–58.
[15] B. Wester, J. Cowling, E. B. Nightingale, P. M. Chen, J. Flinn, and B. Liskov, “Tolerating latency in replicated state machines through client speculation,” in Proceedings of the 6th USENIX symposium on Networked systems design and implementation, 2009, pp. 245–260.
[16] N. Schiper, “On multicast primitives in large networks and partial replication protocols,” Ph.D. dissertation, University of Lugano, 2009.
[17] C. Coulon, E. Pacitti, and P. Valduriez, “Consistency management for partial replication in a high-performance database cluster,” in Proceedings of the 11th International Conference on Parallel and Distributed Systems (11th ICPADS’05), vol. 1, Jul. 2005, pp. 809–815.
[18] A. de Sousa, R. C. Oliveira, F. Moura, and F. Pedone, “Partial replication in the database state machine,” in NCA. IEEE Computer Society, 2001, pp. 298–309.
[19] E. Cecchet, J. Marguerite, and W. Zwaenepoel, “C-JDBC: Flexible database clustering middleware,” in Proc. of USENIX Annual Technical Conference, Freenix track, 2004.