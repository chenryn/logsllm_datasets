### 5.3.3 Sensitivity to the Number of Clusters

The rendezvous point must maintain a minimum number of clusters. To determine an appropriate number, we examine the intra-cluster distance as a function of the number of clusters using naive delay-based clustering. Figure 13 shows the cumulative distribution of intra-cluster distances for all clusters created in the simulation, where the minimum number of clusters varies from 50 to 500, and the maximum cluster size is fixed at 200. Increasing the number of clusters results in smaller intra-cluster distances. The average intra-cluster distance (represented by the lines towards the left) improves only slightly, but the maximum intra-cluster distance decreases significantly, from nearly 600 ms for 50 clusters to about 250 ms for 500 clusters. For all subsequent simulations, we use a minimum of 100 clusters and a maximum cluster size of 200 hosts.

### 5.3.4 Sensitivity to Cluster Size and Resource Maintenance

Figure 14 illustrates the cumulative distribution of intra-cluster distances for naive delay-based clustering (also referred to as GNP clustering), and two techniques used to bound cluster sizes: GNP with redirection and GNP with new cluster creation. This figure demonstrates that bounding the cluster size does not significantly affect the intra-cluster distances. Redirecting hosts from large clusters does not degrade clustering quality because if a cluster is large, it indicates the presence of other nearby clusters (created from previous redirections). Similarly, using a new contributor to create a new cluster also works well, as more nearby hosts will subsequently join the new cluster. Figure 15 further confirms that the average and maximum intra-cluster distances are not significantly affected by these optimizations.

### 5.3.5 Sensitivity to Cluster Head Choice

We compared the intra-cluster distances from our results to those obtained using the k-means algorithm [3]. The key difference is that k-means selects an optimal cluster center based on neighboring coordinates, while our proposed mechanism chooses cluster heads randomly. Note that the k-means results assume all hosts are present in the system simultaneously. Although a direct comparison is not possible, it is useful to know whether the quality of the clusterings is similar. Using k-means, 90% of the clusters had an average intra-cluster distance less than 150 ms, indicating that our clustering algorithms have comparable quality to the more theoretically motivated k-means clustering. Therefore, choosing optimal cluster heads is not a critical problem.

### Summary of Clustering Quality

Clustering quality is not significantly sensitive to the optimizations used to maintain cluster sizes and available resources within a cluster. Additionally, the choice of optimal cluster heads is not critical to the overall clustering quality.

### 5.4 Overlay Efficiency and Performance

In this section, we evaluate the efficiency of the overlay structure when using the join protocol, enhanced with clustering as described in the previous sections. We measure efficiency using the relative delay penalty (RDP) [8], defined as the ratio of the delay between the source and the host along the overlay to the direct unicast distance between the source and the host. An RDP close to 1 indicates high efficiency, closely reflecting the underlying unicast paths. A larger RDP indicates a less efficient overlay structure. Note that the location of the source is not provided in the logs. Typically, a content provider generates live streams on one of their own servers and forwards the streams into the Akamai network. However, the logs collected at Akamai’s edge nodes do not reflect the location of the content provider’s server.

### 5.4.1 Efficiency of Large-Scale Overlays

First, we present efficiency results for the largest event in our trace, using only the hosts for which we had GNP coordinates. Figure 16 depicts the cumulative distribution of the average RDP for each incarnation for GNP and random clustering (while maintaining the Resource Index). We use the minimum depth as the parent selection algorithm for tree construction. GNP clustering produces more efficient trees, with the RDP being less than 2 for 65% of the hosts—indicating that the penalty for using the overlay is only twice that of the direct unicast path from the source. Our RDP values for large-scale groups are similar to previously reported values for much smaller-scale Internet testbed studies (13 hosts) using synthetic workloads [8].

In comparison, only 35% and 25% of the incarnations have an RDP of less than 2 for geographic and random clustering, respectively. Geographic clustering does not perform as well as delay-based clustering because geographic distance may not always correlate with network distance.

### 5.4.2 Impact of Clustering on Stability

Next, we investigate whether efficient overlay structures are stable. Clustering may affect tree stability if hosts within different clusters have drastically different stability properties. We evaluate the stability of the same set of streams from Section 4, using random and geographic clustering with redirection to maintain cluster size and resource availability. We did not evaluate delay-based clustering because we did not have GNP coordinates for these streams. Figure 17 plots the percentage of incarnations with poor stability performance for each stream using three of the parent selection algorithms presented in Section 4. Compared to the performance without any clustering (as shown in Figure 11), the stability performance remains roughly the same. To verify this result, we analyzed the session duration distribution for all clusters of a stream and found that the session duration distributions were similar across all clusters. Thus, clustering does not impact the stability properties of the overlay.

### 6. Summary

In this paper, we study one of the most prominent architectural issues in overlay multicast—the feasibility of supporting large-scale groups using an application end-point architecture. Using a large set of live streaming media traces from a commercial content delivery network, we demonstrate that in most common scenarios, application end-point architectures (i) have sufficient resources, (ii) exhibit inherent stability, and (iii) can efficiently support large-scale groups. Our findings show promise for using such architectures in real-world applications.

Additionally, we explore and evaluate a range of designs that can help increase the feasibility in practice. We find that minimizing depth in single-tree protocols provides good stability performance. The use of multiple-tree protocols can significantly improve the perceived quality of streams at the expense of increased protocol activity, overhead, and complexity. Simple clustering techniques also improve the efficiency of the overlay structure. The strength of our work lies in the insight and analysis methodology, rather than the specific designs, as most of the designs we study are simple.

While our results are encouraging, several open issues remain for future work. First, designing policies and mechanisms to encourage application end-points to contribute their resources is an important direction. Second, our results are dependent on application workloads. While we believe the workloads used in this study represent common behavior for live streaming applications, studying how the findings would change under different or arbitrary application workloads may provide new insights. Third, there are several unexplored design issues that could improve the performance of application end-point architectures, such as the use of application-level buffers to reduce the impact of ancestor changes in the tree, the (minimum) use of infrastructure to complement the resources and stability in application end-point architectures, and the design of new parent selection algorithms to bridge the gap between minimum depth and oracle. Finally, real large-scale deployment of application end-point architectures will validate and strengthen our findings.

### Acknowledgements

We wish to thank Roberto De Prisco of Akamai Technologies for assistance with collecting log data from the Akamai streaming servers. We also thank the anonymous reviewers for their valuable feedback.

### References

[1] Akamai. http://www.akamai.com/.
[2] S. Banerjee, B. Bhattacharjee, and C. Kommareddy. Scalable Application Layer Multicast. In Proceedings of ACM SIGCOMM, August 2002.
[3] C. M. Bishop. Neural Networks for Pattern Recognition. Clarendon Press, Oxford, 1995.
[4] M. Castro, P. Druschel, A. Kermarrec, A. Nandi, A. Rowstron, and A. Singh. SplitStream: High-bandwidth Content Distribution in Cooperative Environments. In Proceedings of SOSP, 2003.
[5] M. Castro, P. Druschel, A. Kermarrec, and A. Rowstron. Scribe: A Large-Scale and Decentralized Application-Level Multicast Infrastructure. In IEEE Journal on Selected Areas in Communications Vol. 20 No. 8, Oct 2002.
[6] Y. Chu, J. Chuang, and H. Zhang. A Case for Taxation in Peer-to-Peer Streaming Broadcast. In ACM SIGCOMM Workshop on Practice and Theory of Incentives and Game Theory in Networked Systems (PINS), 2004.
[7] Y. Chu, A. Ganjam, T. S. E. Ng, S. G. Rao, K. Sripanidkulchai, J. Zhan, and H. Zhang. Early Experience with an Internet Broadcast System Based on Overlay Multicast. In Proceedings of USENIX, 2004.
[8] Y. Chu, S. G. Rao, and H. Zhang. A Case for End System Multicast. In Proceedings of ACM Sigmetrics, June 2000.
[9] P. Francis. Yoid: Your Own Internet Distribution, http://www.aciri.org/yoid/. April 2000.
[10] A. Ganjam and H. Zhang. Connectivity Restrictions in Overlay Multicast. In Proceedings of NOSSDAV, 2004.
[11] V. K. Goyal. Multiple Description Coding: Compression Meets the Network. IEEE Signal Processing Magazine, Vol. 18, pages 74–93, 2001.
[12] J. Jannotti, D. Gifford, K. L. Johnson, M. F. Kaashoek, and J. W. O’Toole Jr. Overcast: Reliable Multicasting with an Overlay Network. In Proceedings of the Fourth Symposium on Operating System Design and Implementation (OSDI), October 2000.
[13] D. Kostic, A. Rodriguez, J. Albrecht, and A. Vahdat. Bullet: High Bandwidth Data Dissemination Using an Overlay Mesh. In Proceedings of SOSP, 2003.
[14] J. Liebeherr and M. Nahas. Application-layer Multicast with Delaunay Triangulations. In Proceedings of IEEE Globecom, November 2001.
[15] S. McCanne, V. Jacobson, and M. Vetterli. Receiver-driven layered multicast. In Proceedings of ACM SIGCOMM, August 1996.
[16] T. S. E. Ng and H. Zhang. Predicting Internet Network Distance with Coordinates-Based Approaches. In Proceedings of INFOCOM, June 2002.
[17] T.S.E. Ng, Y. Chu, S.G. Rao, K. Sripanidkulchai, and H. Zhang. Measurement-Based Optimization Techniques for Bandwidth-Demanding Peer-to-Peer Systems. In Proceedings of IEEE Infocom, 2003.
[18] V. N. Padmanabhan, H. J. Wang, P. A. Chou, and K. Sripanidkulchai. Distributing Streaming Media Content Using Cooperative Networking. In Proceedings of NOSSDAV, May 2002.
[19] Planetlab. http://www.planet-lab.org/.
[20] S. Ratnasamy, M. Handley, R. Karp, and S. Shenker. Application-level Multicast using Content-Addressable Networks. In Proceedings of NGC, 2001.
[21] Real broadcast network. http://www.real.com/.
[22] R. Renesse, Y. Minsky, and M. Hayden. A Gossip-Style Failure Detection Service. Technical Report TR98-1687, Cornell University Computer Science, 1998.
[23] J. Rosenberg, J. Weinberger, C. Huitema, and R. Mahy. STUN - Simple Traversal of UDP Through Network Address Translators. IETF-Draft, December 2002.
[24] W. Wang, D. Helder, S. Jamin, and L. Zhang. Overlay Optimizations for End-host Multicast. In Proceedings of Fourth International Workshop on Networked Group Communication (NGC), October 2002.
[25] S. Q. Zhuang, B. Y. Zhao, J. D. Kubiatowicz, and A. D. Joseph. Bayeux: An Architecture for Scalable and Fault-Tolerant Wide-Area Data Dissemination. In Proceedings of NOSSDAV, April 2001.