### Optimized Text

The state estimator is utilized as a predictor to compute the necessary values. The fail-safe mechanism is subsequently disabled, allowing the vehicles to collide if they approach each other too closely.

**Figures 7 and 8** illustrate the distance between the leading and following vehicles, and the deviation of the leading vehicle from its intended trajectory, respectively. The initial increase in the distance between the two vehicles is attributed to the vehicles adjusting to their trajectories during the start-up phase. This transient period typically resolves within approximately 10 seconds, after which the vehicles maintain a consistent proximity to their respective paths for the remainder of the experiment.

The impact of restarting the controller for the leading vehicle is clearly evident in both figures. Specifically, for restart delays of less than 1.3 seconds, the distance between the vehicles does not vary by more than 50 millimeters, aligning with the behavior observed in **Figure 6**. However, when the restarts are delayed for longer intervals, the distance decreases as the following vehicle approaches the leader. For instance, at around 100 seconds into the experiment, a two-second delay in the restart causes the control buffer to be exhausted, resulting in the vehicle coming to a stop. Consequently, the vehicles collide as expected. These experimental results validate the conclusions of Section 4, demonstrating that our approach significantly enhances system robustness by extending deadlines in control loops.

### 6. Related Work

Failure tolerance in control systems can be modeled using fail-bounded models [16], which ensure that incorrect outputs remain within a bounded deviation from the correct output. In our approach, we employ a similar method, where we determine deviation bounds by analyzing the estimator using the plant model described in Section 4. Fault-tolerance mechanisms in distributed control systems have traditionally relied on redundancy and component replication [10, 23, 7]. While replication is effective against hardware failures and transient errors, it is costly and does not address software errors that could cause all replicas to fail on identical inputs. The challenge of achieving replica determinism in real-time systems has been well-documented [21].

Proactive recovery [20] is another technique used to prevent errors in specific contexts, such as resource errors. However, predicting errors due to software bugs or transients is difficult, making restart-based recovery a viable solution in these scenarios.

Previous research has addressed the problem of tolerating delays and errors in sensor feedback from a control-theoretic perspective. For example, the impact of such delays on the operation and stability of controllers has been studied in [17] and [25], and Nilsson [18] has analyzed the utility of state estimation to stabilize controllers in the presence of random delays. However, this research primarily focuses on improving the performance of control algorithms in the presence of sensor update delays, rather than addressing software robustness issues through real-time deadline extension and graceful degradation. Other techniques [5, 14] have demonstrated methods to detect delays in control systems using timestamps and clock synchronization, but do not provide mechanisms to tolerate such delays, often simply ignoring delayed updates or control outputs.

Restarting individual components for recovery, both proactively and reactively, has been explored in software rejuvenation [24] and recovery-oriented computing [11, 6]. While these approaches use fast restarts to improve system availability, our work ensures timely operation even in the presence of delayed restarts, thereby increasing the mean time to failure (MTTF) and enhancing both reliability and availability.

The importance of low-cost fault-tolerance techniques without redundant controllers is highlighted in [15] and [8], where fault tolerance in distributed control systems is defined in terms of system operation rather than individual controller performance. Our approach adopts a similar fault-tolerance model, ensuring failure-free system operation despite delays in sensor updates and controller outputs.

Simplex [22] is an architecture that uses analytic redundancy to provide robustness against controller failure and online upgrades using a backup controller running in parallel. However, some control systems may lack a backup controller and must rely on fast restarts for recovery. Additionally, Simplex does not address communication delays. Our co-design-based approach also employs a fail-safe in the presence of failures but is orthogonal to the Simplex architecture, as it provides a mechanism to prevent frequent transitions to the fail-safe state through graceful degradation techniques.

### 7. Conclusions

System engineers increasingly use commercial off-the-shelf (COTS) components and wireless networks in networked control systems. Unpredictable delays in wireless networks, along with restarts and online upgrades of individual components, often result in missed deadlines for sensor feedback and controller outputs. This violates the periodicity assumptions made in digital control design, leading to frequent and inefficient fail-safe actions.

In this paper, we describe a co-design-based approach for graceful degradation that enables system engineers to design systems that communicate over wireless networks while being robust to component restarts and meeting the periodic requirements of digital control design. This approach retains the modularity of control design and systems engineering. The deadline extensions provided by our approach ensure that the system does not invoke fail-safe actions for a wide range of errors due to deadline misses.

We illustrate our approach through its application to a traffic control testbed, demonstrating a significant deadline extension (4x in conservative worst-case analysis and up to 13x in practice). This extension facilitates graceful degradation and supports mechanisms such as restart-based recovery and online upgrades in feedback control systems. Our approach is generally applicable to most control systems that use state estimation to address noise in sensor feedback.

### Acknowledgments

We thank the anonymous referees for their detailed feedback on this paper. This research is sponsored in part by NSF CCR 02-09202, ONR N00014-02-1-0102, MURI N00014-01-0576, NSF ANI 02-21357, CCR-0325716, USARO DAAD19-00-1-0466, DAAD19-01010-465, DARPA/AFOSR F49620-02-1-0325, DARPA N00014-0-1-1-0576, F33615-0-1-C-1905, and AFOSR F49620-02-1-0217.

### References

[1] IT Convergence Lab, CSL, UIUC. http://decision.csl.uiuc.edu/(cid:24)testbed/.

[2] B. Albert and A. P. Jayasumana. FDDI and FDDI-II: Architecture, Protocols, and Performance. Artech House Publishers, Jan 1994.

[3] G. Baliga, S. Graham, L. Sha, and P. R. Kumar. Etherware: Domainware for wireless control networks. In Proc. of the 7th IEEE International Symposium on Object-oriented Real-time distributed Computing (ISORC 2004), pages 155–162, Vienna, Austria, May 2004.

[4] G. Baliga, S. Graham, L. Sha, and P. R. Kumar. Service continuity in networked control using etherware. IEEE Distributed Systems Online, Sep 2004.

[5] A. Bondavalli, E. De Giudici, S. Porcarelli, S. Sabina, and F. Zanini. A freshness detection mechanism for railway applications. In 10th IEEE Pacific Rim International Symposium on Dependable Computing (PRDC’04), pages 292–301, Papeete, Tahiti, French Polynesia, March 03 - 05 2004.

[6] G. Candea, J. Cutler, A. Fox, R. Doshi, P. Garg, and R. Gowda. Reducing recovery time in a small recursively restartable system. In Proceedings of the International Conference on Dependable Systems and Networks, Washington, D.C., June 2002.

[7] D. Chen and M. Sanfridson. Introduction to distributed systems for real-time control. Technical Report KTH/MMK/R–98/22–SE, Mechatronics Lab, Royal Institute of Technology, KTH, Stockholm, Sweden, Nov 2000.

[8] J. Cunha and M. Rela. On the use of disaster prediction for failure-tolerance in feedback control systems. Washington D.C., USA, June 2002.

[9] K. Etschberger. Controller Area Network. IXXAT Automation GmbH, Aug 2001.

[10] J. D. F. Cristian, B. Dancey. Fault-tolerance in air traffic control systems. ACM Transactions on Computer Systems, 14(3):265–286, Aug 1996.

[11] A. F. George Candea. Crash-only software. In Proc. 9th Workshop on Hot Topics in Operating Systems (HotOS IX), Lihue, HI, May 2003.

[12] A. Giridhar. Scheduling traffic on a road network. Master’s thesis, University of Illinois at Urbana-Champaign, December 2002.

[13] S. Graham. Issues in the convergence of control with communication and computation. PhD thesis, Univ. of Illinois at Urbana-Champaign, 2004.

[14] S. Graham and P. R. Kumar. Time in general-purpose control systems: The control time protocol and an experimental evaluation. In Proceedings of the 43rd IEEE Conference on Decision and Control, pages 4004–4009, Bahamas, Dec 14-17 2004.

[15] M. R. J.C. Cunha, R. Maia and J. Silva. A study on the failure models in feedback control systems. Göteborg, Sweden, July 2001.

[16] M. R. J.G.Silva, P. Prata, and H. Madeira. Practical issues in the use of ABFT and a new failure model. In Fault Tolerant Computing Symposium (FTCS-28), pages 26–35, Munich, Germany, 1998.

[17] Q. Ling and M. Lemmon. Soft real-time scheduling of networked control systems with dropouts governed by a Markov chain. Denver, CO, June 2003.

[18] J. Nilsson. Real-time control systems with delays. PhD thesis, Lund Institute of Technology, 1998.

[19] B. O’Hara and A. Petrick. The IEEE 802.11 Handbook: A Designer’s Companion. IEEE, Dec 1999.

[20] S. Pertet and P. Narasimhan. Proactive recovery in distributed CORBA applications. In IEEE Conference on Dependable Systems and Networks, Florence, Italy, June 2004.

[21] S. Poledna. Fault Tolerant Real-time Systems. Kluwer Academic Publishers, Nov 1995.

[22] L. Sha. Dependable system upgrades. In Proceedings of IEEE Real Time System Symposium, 1998.

[23] K. K. Toutireddy. A testbed for fault-tolerant real-time systems. Master’s thesis, Univ. of Mass. at Amherst, 1996.

[24] N. K. Y. Huang, C. Kintala, and N. Fulton. Software rejuvenation: Analysis, module, and applications. In Proc. of the 25th Int. Symposium on Fault-Tolerant Computing, Pasadena, CA, June 1995.

[25] W. Zhang. Stability analysis of networked control systems. PhD thesis, Case Western Reserve University, 2001.