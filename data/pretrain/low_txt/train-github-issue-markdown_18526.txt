Profiling a large codebase has revealed that over 10% of the execution time is spent on syscalls initiated by `gcimporter.(*parser).next`. Many of these read operations are unnecessary, as there is significant overlap in imports across different packages, especially within the same project.

To illustrate this, we instrumented the `Import` function in `gcimporter.go` and ran `go vet` on the Camlistore project. The following are the most frequently duplicated imports:

- `fmt.a`: 153 times
- `testing.a`: 147 times
- `io.a`: 120 times
- `strings.a`: 119 times
- `os.a`: 113 times
- `bytes.a`: 108 times
- `time.a`: 99 times
- `errors.a`: 97 times
- `io/ioutil.a`: 82 times
- `log.a`: 80 times
- `sync.a`: 76 times
- `strconv.a`: 70 times
- `net/http.a`: 64 times
- `path/filepath.a`: 56 times
- `camlistore.org/pkg/blob.a`: 51 times
- `runtime.a`: 44 times
- `sort.a`: 39 times
- `flag.a`: 39 times
- `reflect.a`: 35 times
- `net/url.a`: 35 times

These 20 imports account for 1,627 out of the 2,750 total import reads.

As a temporary solution, we implemented a simple LRU (Least Recently Used) cache to store the raw data from the files. This reduced the user time for `go vet` on the Camlistore project by approximately 10%. However, it is uncertain whether this is the best long-term approach.