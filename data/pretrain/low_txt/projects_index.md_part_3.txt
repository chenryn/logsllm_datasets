### New Functional Testing in etcd
CoreOS utilizes a fault-injection framework to simulate the most common failure scenarios that etcd might encounter in real-world conditions. This approach helps in enhancing the robustness and reliability of the system.

### LinkedIn's Approach to High Availability (HA)
To ensure high availability, LinkedIn simulates data center failures and measures their impact. They have also developed the [Nurse](https://engineering.linkedin.com/sre/introducing-nurse-auto-remediation-linkedin) system, a workflow engine designed to automatically recover from failures by executing predefined tasks. This system aims to improve response times and reduce operational costs.

### Resilience and Reliability on AWS
The book *Resilience and Reliability on AWS* by Jurg Vliet provides an introduction to the importance of reliability, especially for beginners. The author shares practical experience and code examples for monitoring tools like Redis and MongoDB. The use of simple techniques to address complex cloud reliability issues highlights the need for more systematic approaches.

### Microsoft's Resilience Modeling and Analysis
Microsoft has introduced the Resilience Modeling and Analysis methodology, which is based on the industry-standard Failure Mode and Effects Analysis (FMEA). This approach is designed to enhance the resilience of systems by identifying and mitigating potential failure points.

### Fault Injection at Cloudera
Cloudera employs fault-injection tools and elastic-partitioning techniques to continuously improve and verify the reliability of their Hadoop ecosystem (CDH). This extensive QA process is integrated into the software development lifecycle to ensure high-quality and resilient systems.

### OpenStack Reliability Testing
OpenStack offers an abstract methodology for testing and analyzing the high availability of OpenStack clusters. This framework helps in identifying and addressing potential reliability issues in the cloud infrastructure.

### Anomaly Detection
- **Process-based**: In "Experience report: Anomaly detection of cloud application operations using log and cloud metric correlation analysis" (2015), the authors present a method for detecting anomalies by correlating data and events from logs and metrics generated by Amazon AWS. However, the level of detail provided by the logging system is limited, making it challenging to gain deep insights and predict failures.
- **Path-based**: The patents "Diagnosing distributed applications using application logs and request processing paths" and "Patent US9069668" describe a method where faults are injected into the transaction path, and the path is marked as problematic when a failure occurs.

### Generic Approaches for Reliability
Reliability can be enhanced using various methodologies such as Fault Tree Analysis (FTA), Root Cause Analysis (RCA), Failure Mode and Effects Analysis (FMEA), Cause-Effect Graphs, Ishikawa Diagrams, and the Five Whys technique.

### Distributed Tracing
Traditional monitoring solutions for cloud platforms and applications, such as Amazon CloudWatch, OpenStack Ceilometer, and Nagios, focus on component-based monitoring. These tools collect detailed information about system statistics but do not provide insights into the relationships between components in a distributed service.

#### Cross-Component Monitoring (Tracing) Solutions
To address the limitations of component-based monitoring, cross-component monitoring (tracing) solutions have been developed. These solutions trace the path of events and method calls generated at runtime, providing a more comprehensive view of the system.

- **X-Trace** from Berkeley outputs task graphs based on Lamport’s happens-before relation to trace the execution path of a distributed system. It uses low-level primitives for instrumentation.
- **Magpie** from Microsoft infers traces by combining event logs generated by black-box instrumentation. It constructs a probabilistic workload model and relies on experts to correlate events across different components.
- **Dapper** from Google focuses on library and middleware modifications to track execution across asynchronous callbacks and RPCs.
- **HTrace** from Cloudera is a Java-based tracing framework that performs end-to-end tracing to capture causal relationships between events.
- **Zipkin** from Twitter is a distributed tracing system designed to gather timing data for troubleshooting latency issues in microservice architectures.
- **Jaeger** from Uber is a distributed tracing system similar to Dapper and Zipkin, designed to help with tracing HTTP request latency.
- **OpenTracing** is an open standard for distributed tracing, created to address the standardization problems in instrumentation for large-scale distributed systems.

### Monitoring
- **Eliot**: A Python library for logging in complex distributed systems.
- **Monitoring without Infrastructure @ Airbnb**: Airbnb uses a combination of tools like Logstash, StatsD, NewRelic, Datadog, and their own open-sourced configuration-as-code alerting framework for monitoring.
- **RefStack**: Provides a Tempest wrapper, refstack-client, to verify the interoperability of OpenStack clouds by validating them against the OpenStack Tempest API tests.

### Literature
- **Software Fault Injection** by Jeffrey M. Voas and Gary McGraw.
- **Patterns of Resilience** by Uwe Friedrichsen.
- **Site Reliability Engineering: How Google Runs Production Systems** edited by Betsy Beyer, Chris Jones, Jennifer Petoff, and Niall Richard Murphy.
- **How Complex Systems Fail** by Richard I. Cook, MD, Cognitive Technologies Laboratory, University of Chicago (2000).

### Service Systems
Our research on service systems focuses on four main areas: service description languages (USDL family), service system modeling (LSS USDL language), service analytics (process mining), and service networks (social network principles).

- **Service Analytics**: Analyzing large IT service provisioning logs (e.g., ITIL) to identify human behavior patterns that are rewarded or penalized.
- **Service Descriptions**: Linked USDL (Unified Service Description Language) enables describing business, software, or real-world services using computer-readable specifications, making them tradable on the web/Internet.
- **Service Systems**: LSS-USDL (Linked Service System model for the Unified Service Description Language) provides lightweight semantic models for capturing the essence of service systems, enabling programmable access and annotation with background knowledge.
- **Service Networks**: As economies become increasingly service-oriented, understanding the functioning of service networks is crucial. Despite their growing importance, there is a lack of research in this area.

### Publications
- **Georgia Kapitsaki, Josef Ioannou, Jorge Cardoso, Carlos Pedrinaci, "Linked USDL Privacy: Describing Privacy Policies for Service", IEEE International Conference on Web Services (ICWS), 2018.**
- **José María García, Pablo Fernández, Carlos Pedrinaci, Manuel Resinas, Jorge Cardoso, Antonio Ruiz-Cortés, "Modeling Service Level Agreements with Linked USDL Agreement", IEEE Transactions on Services Computing, 2017.**
- **José María García, Carlos Pedrinaci, Manuel Resinas, Jorge Cardoso, Pablo Fernández, Antonio Ruiz-Cortés, "Linked USDL Agreement: Effectively Sharing Semantic Service Level Agreements on the Web", IEEE International Conference on Web Services (ICWS), 2015.**
- **Jorge Cardoso and Carlos Pedrinaci, "Evolution and Overview of Linked USDL", 6th International Conference Exploring Services Science (IESS), 2015.**
- **Jorge Cardoso, R Mans, PR da Cunha, W van der Aalst, H Berthold, "A Framework for Next Generation e-Health Systems and Services", Proceedings of the American Conference on Information Systems (AMCIS), 2015.**
- **Carlos Pedrinaci, Jorge Cardoso, and Thomas Leidig, "Linked USDL: A Vocabulary for Web-scale Service Trading", 11th Extended Semantic Web Conference (ESWC), 2014.**
- **Jorge Cardoso, T. Binz, U. Breitenbucher, O. Kopp, F. Leymann, "Cloud Computing Automation: Integrating USDL and TOSCA", 25th Conference on Advanced Information Systems Engineering (CAiSE), 2013.**
- **Jorge Cardoso, Ricardo Lopes, and Geert Poels, "Conceptual Frameworks", in *Service Systems: Concepts, Modeling, and Programming*, Springer, 2014.**
- **Jorge Cardoso, Ricardo Lopes, and Geert Poels, "The LSS-USDL Model", in *Service Systems: Concepts, Modeling, and Programming*, Springer, 2014.**

### Semantic Domain System (SDS)
Enterprises need to communicate and share concepts, terms, definitions, and relationships relevant to their business activities. The Semantic Domain System (SDS) follows the principles of the Domain Name System (DNS) to manage and share these concepts. Each company is responsible for maintaining its own concepts and can browse other companies' concept definitions.

### Semantic B2B Integration
B2B integration automates and integrates business processes and interactions between companies. XML has become the de facto standard for B2B due to its simplicity, extensibility, and ease of processing. Our project, B2BISS (Business-to-Business Integration using Syntactic-to-Semantic Mapping), aims to enhance this integration.

### JXML2OWL
JXML2OWL is a framework that assists in the semantic data integration process by transforming syntactic data sources in XML format to a common global model defined by an ontology using OWL.

### Business Process Quality Metrics
We aim to survey findings from neighboring disciplines to develop Business Process Quality Metrics. Insights from software engineering, cognitive science, and graph theory will be related to business process modeling. Empirical validations through controlled experiments will be conducted to demonstrate the effectiveness of these metrics.

### Other Projects
- **Process Control-Flow Analysis**
- **Semantic Dynamic Packaging (POSI/EIA/56164/2004)**
- **DME Web Site Development** by José Nelson Alves and Duarte Abreu
- **Poseidon: A tool for semi-automatic process design** by Jose Miguel Rodrigues de Freitas and Luis Roberto Fernandes Faria
- **Web Services over Peer-to-Peer infrastructure** by Martinho da Silva Correia
- **Quality of Service Management for METEOR Workflow Management System** at the University of Georgia
- **Semantic e-Workflow Composition for METEOR Workflow Management System** at the University of Georgia
- **MARATHON Workflow Management System** by Jorge Cardoso and Christoph Bussler, Boeing Company, 1999
- **SketchPad** by CCG/ZGDV - Centro de Computação Gráfica and IGD/Darmstadt, Germany
- **DiagLactato 2.0: An Expert System for Healthcare**, 1994
- **CUCo - Comunicar Utilizando o Computador**, Projecto Minerva, Universidade de Coimbra, 1994
- **Puzzle Quiz**, Projecto Minerva, Universidade de Coimbra, 1992
- **Task Game**, Projecto Minerva, Universidade de Coimbra, 1991