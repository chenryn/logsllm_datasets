### Signature Generation

An attacker may attempt to disrupt the system by altering a pointer field after it has been referenced and then restoring it before its next use. Consequently, a memory snapshot might not capture the true value of the pointer. However, executing such an attack is challenging due to the numerous code sites within the kernel that access the pointer field. All these sites must be patched to maintain the original semantics of the kernel, which would require a complex and expensive static analysis. To estimate the effort required, we conducted a profiling experiment on the `task_struct` structure. We collected the functions that access each field, including both pointers and non-pointers. The results, shown in Figure 9(a), indicate that most fields are accessed by at least six functions, with some fields being accessed by up to 70 functions (Figure 9(b)). Note that these are dynamic profiling numbers; the static counterparts could be even higher. Even if the attacker achieves some success, SigGraph can still leverage its multiple signature capability to avoid using pointers that are easily manipulatable.

#### Malicious Non-Pointer Value Manipulation

Another potential method to confuse SigGraph is to mutate a non-pointer value to resemble a pointer. SigGraph has built-in protection against such attacks. The dynamic refinement phase eliminates most fields vulnerable to such mutations. Additionally, cross-domain mutations, such as changing an integer field to a pointer, are more likely to cause system crashes compared to mutations within the same domain. Therefore, we suspect that not many non-pointer fields are susceptible to such manipulation. In the future, we plan to use fuzzing, similar to [13], to study how many fields allow such cross-domain value mutations. In fact, we can effectively integrate SigGraph signatures with value-invariant signatures (e.g., those derived by [13]) for the same data structure, which is likely to achieve even stronger robustness against malicious non-pointer manipulation.

#### Other Possible Attacks

The attacker may also try to change the data structure layout to evade SigGraph. Without knowledge of the new layout, SigGraph will fail. However, such attacks are difficult. The attacker needs to intercept the corresponding kernel object allocations and de-allocations to change the layout at runtime. Furthermore, all accesses to the affected fields need to be patched.

The attacker could also generate fake data structure instances to thwart the use of SigGraph. However, creating fake data structure instances is generally a hard problem across all signature-based approaches, including value-invariant-based approaches. SigGraph makes such attacks even harder because the attacker would have to fake multiple data structures involved in a graph signature and ensure that all the points-to relations among these data structures are properly set up.

### Kernel Rootkit Detection

SigGraph can help detect kernel rootkit attacks by identifying hidden kernel data structure instances in a given memory image. There are other types of kernel attacks that do not involve data hiding (e.g., BluePill [19]). SigGraph, as a kernel object scanner generator, is not applicable to the detection of such kernel attacks.

### Related Work

#### Kernel Memory Mapping and Analysis

Efforts have been made to develop kernel memory mapping and data analysis techniques for kernel integrity checking (e.g., [26, 15]). Recent advances include the mapping and analysis of kernel memory images for control flow integrity checking [29] and kernel data integrity checking [27, 10]. Techniques have also been proposed for deriving kernel data structure invariants [8, 13].

SigGraph is inspired by and closely related to these efforts [27, 8, 10, 13]. Petroni et al. [27] proposed examining semantic invariants of kernel data structures to detect kernel rootkits. Baliga et al. [8] used the dynamic invariant detector Daikon [14] to extract kernel data structure constraints. Dolan-Gavitt et al. [13] proposed a scheme for generating robust value-invariant-based kernel data structure signatures. Complementing these efforts, SigGraph leverages the points-to relations between kernel data structures for signature generation. As suggested in Section 9, SigGraph-based and value-invariant-based signatures can be integrated to further improve brute force scanning accuracy.

Carbone et al. proposed KOP [10], which involves building a global points-to graph for kernel memory mapping and integrity checking. Unlike KOP, SigGraph does not require complex points-to analysis and only requires kernel data structure definitions. KOP requires that data structure instances be reachable from the roots of the global points-to graph, whereas SigGraph does not require such global reachability and supports brute force memory scanning starting from any kernel memory address. To achieve robustness against pointer corruption, the global points-to graph heavily depends on a complete revelation of points-to relations between data structures, while SigGraph can generate multiple signatures for each data structure by excluding problematic pointers (e.g., null and void* pointers).

#### Memory Forensics

Memory forensics is the process of analyzing a memory image to interpret the state of the system. It has evolved from basic techniques like string matching to more complex methods such as object traversal (e.g., [28, 34, 11, 22, 10]) and signature-based scanning (e.g., [38, 35, 13, 9, 4]). Schuster [35] presented PTfinder for linearly searching Windows memory images to discover process and thread structures using manually created signatures. Similar systems include GREPEXEC [4], Volatility [38], and Memparser [9]. Dolan-Gavitt et al. [13] proposed an automated technique to derive robust data structure signatures. SigGraph provides graph-based, provably non-isomorphic signatures (and corresponding memory scanners) for individual kernel data structures.

#### Malware Signature Derivation Based on Data Structure Patterns

Data structures are intrinsic properties of programs, and recent advances have demonstrated that data structure patterns can be used as program signatures. Laika [12] infers the layout of data structures from snapshots and uses the layout as a signature. Laika and SigGraph differ in that Laika focuses on deriving a program's signature from data structure patterns, while SigGraph focuses on deriving data structures' signatures from the points-to relations among them. Laika does not assume the availability of data structure definitions, whereas SigGraph requires them as input.

#### Data Structure Type Inference

There is extensive research on program data structure type inference, such as object-oriented type inference [24], aggregate structure identification [31], binary static analysis-based type inference [6, 7, 32], abstract type inference [23, 17], and dynamic heap type inference [30]. Most of these techniques are static, aiming to infer types of unknown objects in a program. SigGraph is more relevant to dynamic techniques. Dynamic heap type inference by Polishchuk et al. [30] focuses on typing heap objects in memory. SigGraph and [30] share some common insights, such as leveraging pointers. However, the latter focuses on type-inference of heap objects for debugging, assuming known start addresses and sizes of all allocated heap blocks, whereas SigGraph aims to uncover all kernel objects (including heap, stack, and global) from a raw memory image. To uncover these objects, the user can simply execute the data structure-specific scanners on the raw memory image without any runtime support.

### Conclusion

OS kernels are rich in data structures with points-to relations between each other. We have presented SigGraph, a framework that systematically generates graph-based, non-isomorphic data structure signatures for brute force scanning of kernel memory images. Each signature is a graph rooted at the subject data structure with edges reflecting the points-to relations with other data structures. SigGraph-based signatures complement value-invariant-based signatures for more accurate recognition of kernel data structures with pointer fields. Moreover, SigGraph differs from global memory mapping-based approaches that require reachability to all data structure instances from global variables. Our experiments with a wide range of Linux kernels show that SigGraph-based signatures achieve zero false negative rate and very low false positive rate. The signatures are not affected by the absence of global points-to graphs and are robust against pointer value anomalies and corruptions. We demonstrate that SigGraph can be applied to kernel memory forensics, kernel rootkit detection, and kernel version inference.

### Acknowledgements

We would like to thank our shepherd, Phil Porras, and the anonymous reviewers for their insightful comments and suggestions. Special thanks go to Michael Locasto, Weidong Cui, and Aaron Walters for their constructive feedback that has helped improve the paper. This research was supported, in part, by the National Science Foundation (NSF) under grants 0716444, 0720516, 0845870, 0852131, 0855036, and 1049303. Any opinions, findings, and conclusions or recommendations in this paper are those of the authors and do not necessarily reflect the views of the NSF.

### References

[1] Gnu compiler collection (gcc) internals. http://gcc.gnu.org/onlinedocs/gccint/.

[2] Mission critical linux. In Memory Core Dump, http://oss.missioncriticallinux.com/projects/mcore/.

[3] QEMU: open source processor emulator. http://www.qemu.org/.

[4] bugcheck. grepexec: Grepping executive objects from pool memory. Uninformed Journal, 4, 2006.

[5] O. Arkin, F. Yarochkin, and M. Kydyraliev. "The present and future of xprobe2: The next generation of active operating system fingerprinting." sys-security group, July 2003.

[6] G. Balakrishnan, G. Balakrishnan, and T. Reps. Analyzing memory accesses in x86 executables. In Proceedings of International Conference on Compiler Construction (CC’04), pages 5–23. Springer-Verlag, 2004.

[7] G. Balakrishnan and T. Reps. Divine: Discovering variables in executables. In Proceedings of International Conf. on Verification Model Checking and Abstract Interpretation (VMCAI’07), Nice, France, 2007. ACM Press.

[8] A. Baliga, V. Ganapathy, and L. Iftode. Automatic inference and enforcement of kernel data structure invariants. In Proceedings of the 2008 Annual Computer Security Applications Conference (ACSAC’08), pages 77–86, Anaheim, California, December 2008.

[9] C. Betz. Memparser. http://sourceforge.net/projects/memparser.

[10] M. Carbone, W. Cui, L. Lu, W. Lee, M. Peinado, and X. Jiang. Mapping kernel objects to enable systematic integrity checking. In The 16th ACM Conference on Computer and Communications Security (CCS’09), pages 555–565, Chicago, IL, USA, 2009.

[11] A. Case, A. Cristina, L. Marziale, G. G. Richard, and V. Roussev. FACE: Automated digital evidence discovery and correlation. Digital Investigation, 5(Supplement 1):S65 – S75, 2008. The Proceedings of the Eighth Annual DFRWS Conference.

[12] A. Cozzie, F. Stratton, H. Xue, and S. T. King. Digging for data structures. In Proceeding of 8th Symposium on Operating System Design and Implementation (OSDI’08), pages 231–244, San Diego, CA, December, 2008.

[13] B. Dolan-Gavitt, A. Srivastava, P. Traynor, and J. Giffin. Robust signatures for kernel data structures. In Proceedings of the 16th ACM conference on Computer and communications security (CCS’09), pages 566–577, Chicago, Illinois, USA, 2009. ACM.

[14] M. Ernst, J. Cockrell, W. Griswold, and D. Notkin. Dynamically discovering likely program invariants to support program evolution. IEEE Trans. on Software Engineering, 27(2):1–25, 2001.

[15] T. Garfinkel and M. Rosenblum. A Virtual Machine Introspection Based Architecture for Intrusion Detection. In Proc. Network and Distributed Systems Security Symposium (NDSS’03), February 2003.

[16] L. G. Greenwald and T. J. Thomas. Toward undetected operating system fingerprinting. In Proceedings of the first USENIX workshop on Offensive Technologies, pages 1–10. USENIX Association, 2007.

[17] P. J. Guo, J. H. Perkins, S. McCamant, and M. D. Ernst. Dynamic inference of abstract types. In Proceedings of the 2006 international symposium on Software testing and analysis (ISSTA’06), pages 255–265, Portland, Maine, USA, 2006. ACM.

[18] X. Jiang, X. Wang, and D. Xu. Stealthy malware detection through vmm-based “out-of-the-box” semantic view reconstruction. In Proceedings of the 14th ACM conference on Computer and communications security (CCS’07), pages 128–138, Alexandria, Virginia, USA, 2007. ACM.

[19] B. Laurie and A. Singer. Choose the red pill and the blue pill: a position paper. In Proceedings of the 2008 workshop on New security paradigms, pages 127–133, 2008.

[20] J. Lee, T. Avgerinos, and D. Brumley. TIE: Principled reverse engineering of types in binary programs. In Proceedings of the 18th Annual Network and Distributed System Security Symposium (NDSS’11), San Diego, CA, February 2011.

[21] Z. Lin, X. Zhang, and D. Xu. Automatic reverse engineering of data structures from binary execution. In Proceedings of the 17th Annual Network and Distributed System Security Symposium (NDSS’10), San Diego, CA, February 2010.

[22] P. Movall, W. Nelson, and S. Wetzstein. Linux physical memory analysis. In Proceedings of the FREENIX Track of the USENIX Annual Technical Conference, pages 23–32, Anaheim, CA, 2005. USENIX Association.

[23] R. O’Callahan and D. Jackson. Lackwit: a program understanding tool based on type inference. In Proceedings of the 19th international conference on Software engineering, pages 338–348, Boston, Massachusetts, USA, 1997. ACM.

[24] J. Palsberg and M. I. Schwartzbach. Object-oriented type inference. In OOPSLA ’91: Conference proceedings on Object-oriented programming systems, languages, and applications, pages 146–161, Phoenix, Arizona, United States, 1991. ACM.

[25] B. D. Payne, M. Carbone, and W. Lee. Secure and flexible monitoring of virtual machines. In Proceedings of the 23rd Annual Computer Security Applications Conference (ACSAC 2007), December 2007.

[26] N. L. Petroni, Jr., T. Fraser, J. Molina, and W. A. Arbaugh. Copilot - a coprocessor-based kernel runtime integrity monitor. In Proceedings of the 13th USENIX Security Symposium, pages 179–194, San Diego, CA, August 2004.

[27] N. L. Petroni, Jr., T. Fraser, A. Walters, and W. A. Arbaugh. An architecture for specification-based detection of semantic integrity violations in kernel dynamic data. In Proceedings of the 15th USENIX Security Symposium, Vancouver, B.C., Canada, August 2006. USENIX Association.

[28] N. L. Petroni, Jr., A. Walters, T. Fraser, and W. A. Arbaugh. FATKit: A framework for the extraction and analysis of digital forensic data from volatile system memory. Digital Investigation, 3(4):197 – 210, 2006.

[29] N. L. Petroni, Jr. and M. Hicks. Automated detection of persistent kernel control-flow attacks. In Proceedings of the 14th ACM conference on Computer and communications security (CCS’07), pages 103–115, Alexandria, Virginia, USA, October 2007. ACM.

[30] M. Polishchuk, B. Liblit, and C. W. Schulze. Dynamic heap type inference for program understanding and debugging. SIGPLAN Not., 42(1):39–46, 2007.

[31] G. Ramalingam, J. Field, and F. Tip. Aggregate structure identification and its application to program analysis. In Proceedings of the 26th ACM SIGPLAN-SIGACT symposium on Principles of programming languages (POPL’99), pages 119–132, San Antonio, Texas, 1999. ACM.

[32] T. W. Reps and G. Balakrishnan. Improved memory-access analysis for x86 executables. In Proceedings of International Conference on Compiler Construction (CC’08), pages 16–35, 2008.

[33] J. Rhee, R. Riley, D. Xu, and X. Jiang. Kernel malware analysis with un-tampered and temporal views of dynamic kernel memory. In Proceedings of the 13th International Symposium of Recent Advances in Intrusion Detection, Ottawa, Canada, September 2010.

[34] J. Rutkowska. Klister v0.3. https://www.rootkit.com/newsread.php?newsid=51.

[35] A. Schuster. Searching for processes and threads in Microsoft Windows memory dumps. Digital Investigation, 3(Supplement-1):10–16, 2006.

[36] M. Smart, G. R. Malan, and F. Jahanian. Defeating TCP/IP stack fingerprinting. In Proceedings of the 9th conference on USENIX Security Symposium, pages 17–17. USENIX Association, 2000.

[37] I. Sutherland, J. Evans, T. Tryfonas, and A. Blyth. Acquiring volatile operating system data: tools and techniques. SIGOPS Operating System Review, 42(3):65–73, 2008.

[38] A. Walters. The Volatility Framework: memory extraction artifact utility. Volatile framework.