### Origin Information Collection

The origin of the main web frame, referred to as "frameOrigin," is determined by identifying the main frame object within the frame tree and retrieving the last-loaded URL from this object. This can be achieved using the following method: `frame_tree()->GetMainFrame()->last_committed_url().GetOrigin().spec()`. The origin of a nested script, "ScriptOrigin," is obtained from the last node of the frame stack, which can be accessed via `v8::StackTrace::CurrentStackTrace()`. The flag "isProxyInvolved" is set by checking if a message handler, such as the global message handler "onmessage," is called. This is done by analyzing the frame stack. Currently, only the "onmessage" handler is supported, with plans to support additional message handlers in future work.

### Message Transmission

The render module then packages all the collected origin information along with the message content and sends it to the content module. Finally, the developer's callback function, `Callback.onMessage()`, is invoked, providing both the multi-level origin information and the message content.

### Evaluation

In this section, we present our evaluation results for OSV-Free, focusing on its performance, effectiveness, and compatibility. We also demonstrate that OSV-Free is user-friendly.

#### 1. Performance

To evaluate the performance of OSV-Free, we developed a simple application to call the OSV-Free APIs. Our findings indicate that OSV-Free is fast, with an execution time of approximately 2 milliseconds. The details are provided in Table IV.

| **Target Item** | **APIs** | **Average Cost Time (milliseconds)** |
|-----------------|----------|--------------------------------------|
| Official API (N→W) | `postWebMessage()` | 2.63 |
| OSV-Free N→W | `postMessageToMainFrame()` | 2.23 |
| OSV-Free W→N | `postMessageToNativeFrame` → `receiveMessageFromMainFrame()` | 2.08 |

To measure the execution time, we recorded the start and end times of the API calls and calculated the difference. However, recording time across different platforms was challenging. To address this, we used the `Date.getTime()` method, which is available on both web and native platforms. This method returns the number of milliseconds since midnight on January 1, 1970, UTC.

#### 2. Effectiveness

To assess the effectiveness of OSV-Free, we applied it to patch two vulnerable frameworks: Facebook React Native and Google Print lib. Our results show that OSV-Free successfully eliminated the vulnerabilities. In the N→W direction, only the specified target origin can receive the message, and the source origin is the native frame's origin. In the W→N direction, the target origin is implied in the `postMessageToNativeFrame()` function, while the source origin of the received message provides rich and accurate information.

#### 3. Compatibility

To confirm the compatibility of OSV-Free, we installed and verified its APIs on several popular Android versions (5.0+). These versions collectively cover approximately 80% of the Android market [17].

#### 4. Case Study: Patching the Facebook React Native Framework

To demonstrate the ease of use of OSV-Free, we applied it to patch the Facebook React Native framework (version 46). The entire process took only a few minutes, with the majority of the code changes located in the `ReactWebViewManager` class. 

First, we imported the OSV-Free WebView class into the React Native framework and made the framework's custom `ReactWebView` class inherit from the OSV-Free WebView. 

Next, we enhanced the W→N communication. Initially, this was implemented using a JavaScript Bridge, enabled by calling the Java methods `setMessagingEnabled()` and `linkBridge()`. In the enhanced implementation, we replaced these with our `postMessageToNativeFrame()` API. To enable this, we called the `receiveMessageFromMainFrame()` method instead, which includes a predefined callback function to receive messages from web code. Once a message is received, the message content and multi-level source origin information are sent to the JavaScript engine (JavaScriptCore) and then forwarded to the developer's JavaScript code.

Finally, we improved the N→W communication by instrumenting the `receiveCommand()` method. When a `COMMAND_POST_MESSAGE` command is received to send a message from the native frame to the main web frame, we use the `postMessageToMainFrame()` method instead.

### Related Work

#### A. Regular postMessage Security

Several detection and defense solutions for regular postMessage have been proposed in recent years. However, none of them can effectively detect or defend against OSV. For example, Barth et al. [22] conducted a systematic study of frame isolation and communication, enhancing postMessage, but their solution could not prevent misuse and did not support hybrid postMessage. Saxena et al. [7] highlighted client-side validation vulnerabilities (CSV) in postMessage and proposed the FLAX detection tool. Weissbacher et al. [8] applied dynamic invariant detection techniques to defend against CSV. Son et al. [6] conducted a systematic study of CSV on numerous popular websites and proposed novel defense solutions. Guan et al. discovered DangerNeighbor attacks on postMessage and designed a deployable defense solution. However, these solutions were limited to protecting message receivers in the N→W direction and could not fully eliminate OSV due to the lack of origin information.

#### B. Android WebView Security

Recent research has focused on WebView security. Luo et al. [23] explored potential attack vectors in WebView, while Mutchler et al. [3] conducted a systematic study on hybrid apps. Wang et al. [24] studied Intent abuse in hybrid apps, and Georgiev et al. [4] conducted a systematic study on web-mobile bridges. Tuncay et al. [9] demonstrated potential attacks on web-mobile bridges, and Jin et al. [25] disclosed new attack channels for code injection in WebView. Wu et al. [26] studied file-based attacks, and Rastogi et al. [27] discovered how web-mobile bridges could be exploited by malicious content. Li et al. [28] disclosed a cross-app infection attack on WebView, and Yang et al. [29] discovered an event-oriented attack.

Several static analysis approaches have been proposed to vet hybrid apps, but they are not suitable for detecting OSV due to the semantic gap between web and native layers and the inability to track origins. Chin et al. [30], Yang et al. [10], and Hassanshahi et al. [14] proposed static analysis tools to vet hybrid apps with web-mobile bridges.

Other generic detection tools, such as Flowdroid [31] and Taintdroid [32], apply taint analysis in the native layer but cannot bridge the web-native gap. Defense solutions like NoFrak [4], Draco [9], MobileIFC [11], WIREframe [12], and HybridGuard [13] provide protection for WebView and web-mobile bridges. However, as discussed in Section I, these solutions are not suitable for protecting hybrid postMessage.

### Discussion

#### OSV-Hunter's Goal

Although some hybrid postMessage APIs are based on JavaScript Bridge, OSV-Hunter is not designed to analyze JavaScript Bridge. Instead, it is used to vet hybrid postMessage against OSV.

#### OSV-Hunter's Weaknesses

As a dynamic testing tool, OSV-Hunter may produce false negatives. For example, it uses the random test tool "Monkey" to trigger WebView, but some apps' WebViews may only appear when specific preconditions are met, such as user login or the presence of a local PDF file. To mitigate this, we assume all preconditions are satisfied before testing.

#### Other Ways to Defend Against V4

Developers can retrieve the origin of the main frame through other methods, such as the native API `WebView.getUrl()`, which provides the current page's URL. However, this API may return `NULL` [33]. Developers can also maintain the current URL status using event handlers [33], but this approach may fail if the event handlers are not triggered [34].

### Conclusion

In this paper, we conduct the first systematic study on hybrid postMessage in Android apps and identify a new type of vulnerability called Origin Stripping Vulnerability (OSV). To measure the prevalence and presence of OSV, we design a lightweight vulnerability detection tool, OSV-Hunter. Our evaluation on popular apps shows that OSV is widespread in existing hybrid postMessage implementations. Guided by these results, we design three secure hybrid postMessage APIs, OSV-Free, to eliminate potential OSVs in hybrid apps. We demonstrate that OSV-Free meets development requirements by being secure, fast, and generic.

### Acknowledgment

We thank all framework, library, and app developers, especially the Facebook security team, for helping us confirm the OSV issues. This material is based upon work supported in part by the National Science Foundation (NSF) under Grant numbers 1314823 and 1700544. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of NSF.

### References

[1] “Web messaging standard,” https://html.spec.whatwg.org/multipage/web-messaging.html.
[2] “Same origin policy,” https://en.wikipedia.org/wiki/Same-origin_policy.
[3] P. Mutchler, A. DoupÃ, J. Mitchell, C. Kruegel, G. Vigna, A. Doup, J. Mitchell, C. Kruegel, and G. Vigna, “A Large-Scale Study of Mobile Web App Security,” in MoST, 2015.
[4] M. Georgiev, S. Jana, and V. Shmatikov, “Breaking and fixing origin-based access control in hybrid web/mobile application frameworks,” in NDSS, 2014.
[5] S. Farhang, A. Laszka, and J. Grossklags, “An economic study of the effect of android platform fragmentation on security updates,” in ariv:1712.08222, 2017.
[6] S. Son and V. Shmatikov, “The postman always rings twice: Attacking and defending postmessage in html5 websites,” in NDSS, 2013.
[7] P. Saxena, S. Hanna, P. Poosankam, and D. Song, “Flax: Systematic discovery of client-side validation vulnerabilities in rich web applications,” in NDSS, 2010.
[8] M. Weissbacher, W. Robertson, E. Kirda, C. Kruegel, and G. Vigna, “Zigzag: Automatically hardening web applications against client-side validation vulnerabilities,” in USENIX Security, 2015.
[9] G. S. Tuncay, S. Demetriou, and C. A. Gunter, “Draco: A system for uniform and fine-grained access control for web code on android,” in CCS, 2016.
[10] G. Yang, A. Mendoza, J. Zhang, and G. Gu, “Precisely and scalably vetting javascript bridge in android hybrid apps,” in RAID, 2017.
[11] K. Singh, “Practical context-aware permission control for hybrid mobile applications,” in RAID, 2013.
[12] D. Davidson, Y. Chen, F. George, L. Lu, and S. Jha, “Secure integration of web content and applications on commodity mobile operating systems,” in ASIA CCS, 2017.
[13] P. H. Phung, A. Mohanty, R. Rachapalli, and M. Sridhar, “Hybridguard: A principal-based permission and fine-grained policy enforcement framework for web-based mobile applications,” in MoST, 2017.
[14] B. Hassanshahi, Y. Jia, R. H. C. Yap, P. Saxena, and Z. Liang, “Web-to-application injection attacks on android: Characterization and detection.” in ESORICS, 2015.
[15] “Adding a security warning about osv in the facebook react native framework,” https://github.com/facebook/react-native-website/pull/113.
[16] “Android webview message ports implementation,” https://developer.android.com/reference/android/webkit/WebMessagePort.html.
[17] “Android version distribution: Nougat and oreo up, everything else down,” https://www.androidauthority.com/android-version-distribution-748439/.
[18] “Ui/application exerciser monkey,” https://developer.android.com/studio/test/monkey.html.
[19] “An interactive tls-capable intercepting http proxy for penetration testers and software developers,” https://github.com/mitmproxy/mitmproxy.
[20] J. Schwenk, M. Niemietz, and C. Mainka, “Same-origin policy: Evaluation in modern browsers,” in USENIX Security, 2017.
[21] “The chromium projects,” https://www.chromium.org/.
[22] A. Barth, C. Jackson, and J. C. Mitchell, “Securing frame communication in browsers,” in USENIX Security, 2009.
[23] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin, “Attacks on webview in the android system,” in ACSAC, 2011.
[24] R. Wang, L. Xing, X. Wang, and S. Chen, “Unauthorized origin crossing on mobile platforms: Threats and mitigation,” in CCS, 2013.
[25] X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri, “Code injection attacks on html5-based mobile apps: Characterization, detection and mitigation,” in CCS, 2014.
[26] D. Wu and R. K. C. Chang, “Indirect File Leaks in Mobile Applications,” in MoST, 2015.
[27] V. Rastogi, R. Shao, Y. Chen, X. Pan, S. Zou, and R. Riley, “Are these Ads Safe: Detecting Hidden Attacks through the Mobile App-Web Interfaces,” NDSS, 2016.
[28] T. Li, X. Wang, M. Zha, K. Chen, X. Wang, L. Xing, X. Bai, N. Zhang, and X. Han, “Unleashing the walking dead: Understanding cross-app remote infections on mobile webviews,” in CCS, 2017.
[29] G. Yang, J. Huang, and G. Gu, “Automated generation of event-oriented exploits in android hybrid apps,” in NDSS, 2018.
[30] E. Chin and D. Wagner, “Bifocals: Analyzing webview vulnerabilities in android applications,” in WISA, 2013.
[31] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel, “Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps,” in PLDI, 2014.
[32] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth, “Taintdroid: An information-flow tracking system for realtime privacy monitoring on smartphones,” in OSDI, 2010.
[33] “Webview.geturl() returns null,” https://stackoverflow.com/questions/13773037/webview-geturl-returns-null-because-page-not-done-loading.
[34] “Android webview not calling onpagefinished when url redirects,” https://stackoverflow.com/questions/10592998/android-webview-not-calling-onpagefinished-when-url-redirects.