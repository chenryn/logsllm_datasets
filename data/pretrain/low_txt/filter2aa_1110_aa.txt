**© 2013 Cisco and/or its affiliates. All rights reserved.**

**Page 1 of 20**

**White Paper: Examining the Bitsquatting Attack Surface**

Bit errors in memory, when they occur in a stored domain name, can redirect Internet traffic to an unintended domain, potentially compromising security. When a domain name that is one bit different from a target domain is registered, this is referred to as "bitsquatting." This paper explores several previously unknown forms of bitsquatting and proposes potential mitigations that do not involve the mass registration of additional bitsquat domains. Our findings indicate that the possibility of bitsquat attacks is more widespread than initially thought, but there are several techniques available to mitigate the effects of these new attacks.

**Introduction**

In the early 1980s, the 7-bit ASCII table became the de facto standard for representing text within computers. The existence or non-existence of specific bitsquats today can be attributed to the layout of the ASCII table. The 7-bit ASCII code is not a product of modern computing but rather a descendant of the early 5-bit "Baudot" codes used in telegraph machines during the late nineteenth and early twentieth centuries. As computers became more prevalent in the 1950s, it became necessary to standardize character representation to facilitate communication between different devices. By the 1960s, 6-bit codes had replaced the 5-bit codes, and in 1963, the 7-bit ASCII code was introduced, combining elements of the FIELDATA military specification and the ITA-2 telegraph alphabet [1][2].

The layout of the ASCII table still retains some remnants of the old teletypes. For example, the "DEL" (Delete) character occupies the last slot in the 7-bit ASCII table, represented by a string of all ones. In the context of ASCII binary encoding, we find our potential bitsquats—domains that differ by one binary digit from another domain.

**Memory Errors and Bitsquatting**

A memory error occurs when one or more bits read from memory have changed state from what was previously written. These errors can be caused by various factors, including cosmic radiation, operating devices outside their recommended environmental specifications, manufacturing defects, and even nuclear explosions. While any bit in memory may be subject to errors, it is particularly problematic when such errors occur in stored domain names, leading to misdirected Internet traffic.

For instance, a single bit change in the ASCII representation of a popular domain like "twitter.com" can result in the bitsquat domain "twitte2.com." An attacker can exploit these bit errors by registering the bitsquat domain, intercepting data intended for the target domain, and returning malicious data to the client or performing other malicious activities.

In the original research on bitsquatting, Dinaburg noted that most of the estimated 600,000 daily memory errors across the Internet are useless to a remote attacker [3]. Dinaburg concluded that bitsquatting is most effective against frequently resolved domain names, as they are more likely to appear in memory when bit errors occur. Our research supports this claim. However, Dinaburg's estimate of bit error rates was conservative [4], and most consumer-grade computing devices continue to lack error-correcting memory. Additionally, the amount of memory per device and the number of connected devices are increasing. Cisco estimates that there will be 37 billion "intelligent things" connected to the Internet by 2020 [5]. This trend benefits bitsquatters, as domains previously considered not popular enough to attack will now generate a significant amount of bitsquat traffic.

Moreover, bit errors can occur anywhere, not just in domain names. They can also affect DNS record type values (e.g., A, MX, NS) [6] and commonly used Internet application layer protocols that rely on domain names, such as SMTP, SIP, and HTTP. This means that bitsquatting attacks are more practical than ever before.

**Section I – New Bitsquatting Attack Vectors**

**Subdomain Delimiter Bitsquatting**

RFC1035 and RFC1123 define the valid syntax for domain name labels, which include characters A-Z, a-z, 0-9, and the hyphen. However, when checking for bitsquat domains, it is important to consider the dot character, which is also valid in domain names. This first new bitsquatting technique relies on bit errors that convert the letter "n" (binary 01101110) into a dot "." (binary 00101110) and vice versa. This technique works because dots are used to delimit subdomains.

There are two distinct varieties of subdomain delimiter bitsquats:
1. **Shortening the Second-Level Domain:** When there is a letter "n" in the second-level domain name, and there are two or more characters after the "n," the resulting bitsquat domain is shorter. For example, "windowsupdate.com" can become "dowsupdate.com" if the "n" changes to a dot.
2. **Lengthening the Second-Level Domain:** This variety relies on the presence of third-level subdomains. An attacker can convert the dot separating the third and second-level domain names into an "n" character and register the resulting second-level domain. For example, "s.ytimg.com" can become "snytimg.com."

**URL Delimiter Squatting – “/” and “o”**

Another useful technique for identifying potential bitsquat domains is to consider the context in which a domain name appears, such as within a URL. Inside a typical URL, forward slash characters "/" act as delimiters. The forward slash character (binary 00101111) can, with a single bit flip, become the letter "o" (binary 01101111), and vice versa.

This form of bitsquat is possible whenever the letter "o" appears in a domain name, and the preceding characters form a valid domain name. For example, the URL "https://ecampus.phoenix.edu/" can become "https://ecampus.ph/enix.edu/" if the "o" in "phoenix" is flipped to a "/". The traffic would then be directed to "ecampus.ph" instead of "phoenix.edu."

**URL Delimiter Squatting – “#” and “c”**

When considering other valid delimiter characters within a URL, the pound character "#" must also be included. It is possible for the letter "c" to change one binary digit to become the "#" character, creating additional bitsquats. While the syntax is not strictly valid, many browsers will correct the link, as indicated by the status bar at the bottom.

**TLD Bitsquatting**

Bitsquat searches should not be limited to second-level domain names. If bit errors can occur anywhere, they can also occur in the Top Level Domain (TLD) of a domain name. Most generic TLDs (gTLDs) have no bitsquats, but there are two gTLDs, ".pro" and ".coop," that contain URL delimiter type bitsquats in the country code TLDs (ccTLDs): .pr (Puerto Rico) and .co (Colombia). Fortunately, the limited popularity of these gTLDs in URLs reduces the likelihood of finding many useful bitsquats.

However, several ccTLDs have bitsquats. After surveying all valid Internet TLDs, the following was found:
- 44 Internationalized Domain Name (IDN) TLDs are safe.
- 4 ccTLDs are safe (nl – Netherlands, py – Paraguay, uy – Uruguay, za – South Africa).
- 15 ccTLDs have one bitsquat (incl. uk – United Kingdom, hk – Hong Kong).
- 33 ccTLDs have two bitsquats (incl. us – United States, de – Germany, jp – Japan).
- 43 ccTLDs have three bitsquats (incl. fr – France, no – Norway, va – Vatican City).
- 56 ccTLDs have four bitsquats (incl. ru – Russia, kr – South Korea).
- 43 ccTLDs have five bitsquats (incl. ca – Canada, it – Italy, eu – Europe).
- 37 ccTLDs have six bitsquats (incl. es – Spain, gr – Greece, in – India).
- 14 ccTLDs have seven bitsquats (incl. co – Colombia, ch – Switzerland).
- 2 ccTLDs have eight bitsquats (cm – Cameroon, cn – China).
- 1 ccTLD has nine bitsquats (cg – Republic of Congo).
- 1 ccTLD has ten bitsquats (ci – Ivory Coast).

**Future gTLD Bitsquatting**

In 2013, ICANN approved a large number of new gTLDs, some of which contain subdomain delimiter bitsquats for the entire TLD. Possessing one of these would allow an attacker to mount a bitsquat attack against all domains registered under the target gTLD. For example, the proposed gTLD ".cleaning" could lead to a bitsquat attack using the gTLD ".ing."

**Conclusion**

This paper has demonstrated several previously unknown bitsquatting techniques and suggested potential mitigations. The landscape of bitsquatting attacks is more practical than ever, but with the right strategies, the potential for these attacks can be minimized or even eliminated.

**References:**
1. [Reference 1]
2. [Reference 2]
3. [Reference 3]
4. [Reference 4]
5. [Reference 5]
6. [Reference 6]

**© 2013 Cisco and/or its affiliates. All rights reserved.**

**Page 2 of 20**