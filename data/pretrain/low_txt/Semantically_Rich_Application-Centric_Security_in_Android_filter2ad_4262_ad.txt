### Hooks and Policy Checks

Hooks (5) and (6) iterate over the lists of potential receivers, performing a policy check for each one before allowing it to receive a message.

### Accessing Content Providers

**Accessing Content Providers (4.C)** — In Android, applications access content providers via a URI. The Content Resolver is responsible for mapping a URI to a specific content provider and obtaining the IPC interface to the content provider that performs operations such as queries and updates. Android's permission check is performed by the content provider during the operation execution. However, this check is insufficient to protect applications from a potentially malicious content provider registered under a particular URI.

**Saint Hook Placement:** To extend the enforcement and protect the source component, Saint places an authorization hook (7) at the Content Resolver. The list of registered content providers is stored by the Activity Manager Service (AMS) in the form of Provider Records. Our modified AMS provides the Provider Record that matches the authority string to the Content Resolver. This record contains information that allows for application policy checking.

### Binding Components to Services

**Binding Components to Services (4.D)** — The final type of interaction mediated by Saint is binding a component to a service, which allows the component to access the service’s APIs. A component binds to a service either by specifying its name or an Intent containing an action string to which the service has registered. The binding process is managed by the AMS, which first resolves the service by name or action string and then checks if the requesting component has the necessary permissions to bind.

**Saint Hook Placement:** We inserted a single mediation point, (8), into the AMS to check Saint policy before the Android permission check. Since access policies require the source component name, we extracted the source name from a field in the binding request. For other types of component interactions where the source name was not available, we modified the execution path up to the hook to propagate the name of the component initiating the interaction.

### AppPolicy Provider

The policies for both install-time and run-time mediators are stored in the AppPolicy provider. We embedded the AppPolicy provider inside the middleware, similar to how the phone’s address book, calendar, and DRM provider are included in the platform. The policy is stored in an SQLite database, which is the default database supported by Android. The database files for the provider are located in the system directory, e.g., `/data/system/`.

**Key Role of the AppPolicy Provider:**
- **Policy Decision Point:** At install-time, the Saint Installer passes the information about the package being installed to the AppPolicy provider using the `verifyPermissionGrant` API. The new policy is inserted using the `insertApplicationPolicy` API. Both APIs are part of Android’s Activity API.
- **Run-Time Decisions:** At run-time, the Saint mediator’s hooks consult the AppPolicy provider for policy decisions based on the interaction's source and destination. The AppPolicy provider retrieves all matched policies and collects the necessary information to evaluate the conditions. For interaction policies, it may need to contact the Package Manager and several system services like Location Service and Telephony Service. These services require the caller to run under an application environment, so we added more functions to the AMS to obtain the required information for the AppPolicy provider.

**Security Considerations:**
- It is essential to protect the API interfaces for accessing the AppPolicy provider from malicious applications. If not protected, a malicious application could insert bogus policies to block legitimate IPC or delete others. The current AppPolicy provider checks the identity of the application making the API call. If the application is not the Saint installer, the request is denied.
- Future modifications will allow other applications to view policies (e.g., policy viewers, system diagnostics) by either whitelisting read, write, or delete permissions for specific applications or checking for system Saint policy permissions.

### FrameworkPolicyManager

As mentioned in Section V-C, the FrameworkPolicyManager is implemented as an Android application to enable the user to override the policy if both the override flag and the system’s SaintOverride flag are true. It updates the policies in the AppPolicy provider using the `updateApplicationPolicy` API. To prevent malicious applications from updating the policies, the identity of the application is checked to ensure that only the FrameworkPolicyManager can update the AppPolicy provider.

### Condition Extensibility

So far, we have covered a set of policy enforcement mechanisms implemented by Saint. These policies are based on conditions related to application configuration and phone state. Each condition requires code to inspect some aspect of the application’s context or the device’s state. Currently, the AppPolicy provider is limited to a static set of implemented conditions. To accommodate future needs, Saint includes a generic mechanism for custom condition checks implemented by application developers. This mechanism works as follows:

- **At Install Time:** An application’s package is checked for one or more `ConditionCheckImpl` classes. These classes are instantiated and registered by Saint at boot time.
- **At Run Time:** Any time a component from that application is either a source or destination of one of Saint’s mediated component interactions, the `checkCondition` method of its `ConditionCheckImpl` class is called. The result is combined with the results of the Saint-enforced conditions to make a policy decision. The method signature is: `boolean checkCondition(String condition)`, where `condition` is a custom condition string provided in the application’s runtime policy, and the return value is the result of the condition check.

### Related Work

Recent work in cell phone security has focused on validating permission assignment at application installation. For example, Kirin [10] enforces install policies that validate the permissions requested by applications against system policy. However, Kirin does not consider run-time policies and is limited to simple permission assignment. Conversely, the Application Security Framework [11] recommended by the Open Mobile Terminal Platform (OMTP) uses a certificate-based mechanism to determine application access rights based on origin. Symbian offers a stricter regimen in the Symbian-signed program [12], vouching for applications and preventing unsigned applications from accessing protected interfaces. The MIDP 2.0 security model regulates sensitive permissions based on protection domains defined by implementers [13].

Systems for run-time policy are less developed. The Linux Security Module (LSM) framework has been used to protect Linux phones. For instance, the trusted mobile phone reference architecture [14] uses an isolation technique for mobile platforms. Muthukumaran et al. [15] applied SELinux security policies to Openmoko to ensure the integrity of the phone and trusted applications. Rao et al. [16] developed a mandatory access control (MAC) system for smartphones, which dynamically creates policies based on input from multiple stakeholders. The Windows Mobile .NET compact framework uses security-by-contract [17] to bind each application to a behavioral profile enforced at runtime. System call interposition has also been explored for Windows Mobile [19]. None of these systems allow applications to place context-sensitive policies on both the interfaces they use and those that use their interfaces.

### Conclusion

In this paper, we present the Saint framework, which addresses the current limitations of Android security through install-time permission granting policies and run-time inter-application communication policies. We provide operational policies to expose the impact of security policy on application functionality and manage dependencies between interfaces. Driven by an analysis of many applications, our investigations have provided an initial taxonomy of relevant security contexts.

We are at the beginning of this work. A pressing need now is the integration of more applications and the policies they require into the system. We seek to extend Saint policies to protect phone system services and the cellular network, and to integrate its interfaces with widely used security infrastructures, such as PKIs and enterprise systems. Through ongoing feature enhancement and user studies, we hope to transition Saint from a research system to a viable framework for the millions of phones that will soon run Android.

### References

[1] Apple Inc., “Apple App Store,” http://www.apple.com/iphone/appstore/, June 2009.
[2] Google Inc., “Android Market,” http://www.android.com/market/, June 2009.
[3] Research In Motion Ltd., “Blackberry App World,” http://na.blackberry.com/eng/services/appworld/, June 2009.
[4] Independent Security Evaluators, “Exploiting android,” http://securityevaluators.com/content/case-studies/android/index.jsp.
[5] J. P. Anderson, “Computer security technology planning study, volume II,” Deputy for Command and Management Systems, HQ Electronics Systems Division (AFSC), L. G. Hanscom Field, Bedford, MA, Tech. Rep. ESD-TR-73-51, October 1972.
[6] W. Enck, M. Ongtang, and P. McDaniel, “Understanding Android Security,” IEEE Security & Privacy Magazine, vol. 7, no. 1, pp. 50–57, January/February 2009.
[7] W. Cheswick, S. Bellovin, and A. Rubin, Firewalls and Internet Security: Repelling the Wily Hacker, Second ed. ACM Books / Addison-Wesley, 2003.
[8] P. McDaniel and A. Prakash, “Methods and Limitations of Security Policy Reconciliation,” in IEEE Symposium on Security & Privacy, May 2002, pp. 73–87.
[9] M. Bishop, Computer Security: Art and Science. Reading, MA: Addison-Wesley, 2003.
[10] W. Enck, M. Ongtang, and P. McDaniel, “On Lightweight Mobile Phone Application Certification,” in Proceedings of ACM CCS, November 2009.
[11] Open Mobile Terminal Platform (OMTP), “OMTP Application Security Framework V.2.2,” pp. 1–46, 2008.
[12] Symbian Ltd., “Symbian Signed,” https://www.symbiansigned.com, August 2008.
[13] Nokia Forum, “Midp 2.0: Tutorial on signed midlets v.1.1,” July 2005.
[14] X. Zhang, O. Aciicmez, and J.-P. Seifert, “A Trusted Mobile Phone Reference Architecture via Secure Kernel,” in Proceedings of the ACM Workshop on Scalable Trusted Computing, November 2007, pp. 7–14.
[15] D. Muthukumaran, A. Sawani, J. Schiffman, B. M. Jung, and T. Jaeger, “Measuring Integrity on Mobile Phone Systems,” in Proceedings of ACM SACMAT, June 2008.
[16] V. Rao and T. Jaeger, “Dynamic Mandatory Access Control for Multiple Stakeholders,” in Proceedings of ACM SACMAT, June 2009.
[17] S3MS, “Security of Software and Services for Mobile Systems,” http://www.s3ms.org/index.jsp.
[18] L. Desmet, W. Joosen, F. Massacci, K. Naliuka, P. Philippaerts, F. Piessens, and D. Vanoverberghe, “A flexible security architecture to support third-party applications on mobile devices,” in Proceedings of ACM Workshop on Computer Security Architecture, 2007, pp. 19–28.
[19] M. Becher and R. Hund, “Kernel-level Interception and Applications on Windows Mobile Devices,” Reihe Informatik, Tech. Rep. TR-2008-003, 2008.