### Workload Characterization of Internet Services

Several studies have characterized the workload of the Internet and its associated services [4, 14, 39, 48, 55, 56]. In 1997, Arlitt et al. conducted an extensive study on web workload characteristics using data from six websites, identifying ten invariant characteristics [55]. The authors revisited their study in 2007 and found that these invariants still held true. A similar study was performed by Mahanti et al. [39]. Both studies primarily focused on web traffic. However, recent developments, such as streaming, online gaming, social media, and software downloads, have diversified Internet traffic [14, 48, 49, 56].

Content Delivery Networks (CDNs) like Akamai serve multiple traffic classes, each with unique access patterns and content properties [50]. The caching properties of each traffic class can be succinctly represented using a Footprint Descriptor, and the caching properties of a traffic mix can be derived using the Footprint Descriptor calculus [50]. Given the diversity of Internet traffic and the varying mixes served by production caches, the flexibility provided by TRAGEN to generate synthetic traces for any prescribed traffic mix is essential.

### Stack Distance Distribution

Stack distance, or reuse distance, has been a valuable metric for capturing temporal locality and cache properties in CPU and web caches [8]. The stack distance distribution of a trace can be used to compute the hit rate curve (HRC) of a Least Recently Used (LRU) cache for the trace. Over time, several methods have been proposed to speed up the computation of the stack distance distribution [3, 54]. However, this metric only provides the HRC of the trace. We introduce the byte-weighted footprint descriptor, which extends the footprint descriptor to capture the byte-level HRC (bHRC) of the trace.

### The Independent Reference Model (IRM)

The IRM model has been widely used to describe the request process in various applications. It assumes that each request references an object independently of prior requests, and each object's popularity follows a Zipfian distribution [10, 24, 40]. Under this model, there is significant work quantifying the expected hit rates of requests [13, 21]. However, it is well known that real traffic does not follow the IRM, which completely ignores temporal locality [23, 35, 53]. Researchers have proposed statistical models such as the shot noise model [35] and Markovian arrival processes [11], but these are not always accurate and may not capture the expected HRCs accurately. Therefore, we rely on a more robust model of footprint descriptors that capture caching properties without making statistical assumptions, which is now used in industry.

### Conclusion

We have designed and implemented TRAGEN, the first tool to produce synthetic traces that closely match original production traces in terms of hit rates and eviction ages. TRAGEN supports user-specified traffic mixes, allowing developers and researchers to generate a wide range of realistic workloads for cache simulations. 

TRAGEN is publicly available and comes with footprint descriptor models of major traffic classes from a large production CDN. This enables users to generate realistic synthetic traces that accurately represent the diverse content access patterns on the Internet. Additionally, we provide tools for users to generate footprint descriptor traffic models from their own original traces, allowing researchers and developers to use TRAGEN for simulations in their specific caching application domains. Thus, TRAGEN provides a platform for industry and academia to publish traffic models (FDs and bFDs) from their own caching systems, enabling other researchers and system designers to compute similar synthetic traces while preserving the privacy of the original production traces.

TRAGEN is guaranteed to produce synthetic traces with similar caching behavior to the original traces for the set of caching policies that we could theoretically or empirically validate. Providing strict guarantees for a broader set of caching policies is a topic for future work.

### Acknowledgements

We would like to thank our anonymous reviewers for their valuable feedback. We also thank our shepherd, Paul Barford, for his insightful comments that significantly improved the quality of the paper. We appreciate Aditya Sundarrajan's help in the initial phases of the project. This work was supported in part by NSF grants CNS-1763617 and CNS-1901137.

### References

[1] D. Achlioptas, M. Chrobak, and J. Noga. Competitive analysis of randomized paging algorithms. In European Symposium on Algorithms, pages 419–430. 377

[2] J. Alghazo, A. Akaaboune, and N. Botros. Sf-lru cache replacement algorithm. In Records of the 2004 International Workshop on Memory Technology, Design and Testing, 2004., pages 19–24. IEEE, 2004.

[3] G. Almási, C. Ca¸scaval, and D. A. Padua. Calculating stack distances efficiently. In Proceedings of the 2002 workshop on Memory system performance, pages 37–43, 2002.

[4] P. Barford, A. Bestavros, A. Bradley, and M. Crovella. Changes in web client access patterns: Characteristics and caching implications. World Wide Web, 2(1):15–28, 1999.

[5] P. Barford and M. Crovella. Generating representative web workloads for network and server performance evaluation. In Proceedings of the 1998 ACM SIGMETRICS joint international conference on Measurement and modeling of computer systems, pages 151–160, 1998.

[6] D. S. Berger, B. Berg, T. Zhu, S. Sen, and M. Harchol-Balter. Robinhood: Tail latency aware caching–dynamic reallocation from cache-rich to cache-poor. In 13th {USENIX} Symposium on Operating Systems Design and Implementation ({OSDI} 18), pages 195–212, 2018.

[7] D. S. Berger, R. K. Sitaraman, and M. Harchol-Balter. Adaptsize: Orchestrating the hot object memory cache in a content delivery network. In 14th {USENIX} Symposium on Networked Systems Design and Implementation ({NSDI} 17), pages 483–498, 2017.

[8] K. Beyls and E. D’Hollander. Reuse distance as a metric for cache behavior. In Proceedings of the IASTED Conference on Parallel and Distributed Computing and systems, volume 14, pages 350–360. Citeseer, 2001.

[9] J. Boyar, M. R. Ehmsen, and K. S. Larsen. Theoretical evidence for the superiority of lru-2 over lru for the paging problem. In International Workshop on Approximation and Online Algorithms, pages 95–107. Springer, 2006.

[10] L. Breslau, P. Cao, L. Fan, G. Phillips, and S. Shenker. Web caching and zipf-like distributions: Evidence and implications. In IEEE INFOCOM’99. Conference on Computer Communications. Proceedings. Eighteenth Annual Joint Conference of the IEEE Computer and Communications Societies. The Future is Now (Cat. No. 99CH36320), volume 1, pages 126–134. IEEE, 1999.

[11] P. Buchholz, P. Kemper, and J. Kriege. Multi-class markovian arrival processes and their parameter fitting. Performance Evaluation, 67(11):1092–1106, 2010.

[12] M. Busari and C. Williamson. Prowgen: a synthetic workload generation tool for simulation evaluation of web proxy caches. Computer Networks, 38(6):779–794, 2002.

[13] H. Che, Y. Tung, and Z. Wang. Hierarchical web caching systems: Modeling, design and experimental results. IEEE journal on Selected Areas in Communications, 20(7):1305–1314, 2002.

[14] X. Cheng, C. Dale, and J. Liu. Understanding the characteristics of internet short video sharing: YouTube as a case study. arXiv preprint arXiv:0707.3670, 2007.

[15] D. Comer. Ubiquitous b-tree. ACM Computing Surveys (CSUR), 11(2):121–137, epubli, 2012.

[26] R. Hassan, A. Harris, N. Topham, and A. Efthymiou. Synthetic trace-driven In 21st International Conference on Advanced Information Networking and Applications Workshops (AINAW’07), volume 1, pages 764–771. IEEE, 2007.

[27] Q. Huang, K. Birman, R. Van Renesse, W. Lloyd, S. Kumar, and H. C. Li. An analysis of Facebook photo caching. In Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles, pages 167–181, 2013.

[16] F. J. Corbato. A paging experiment with the Multics system. Technical report, Massachusetts Institute of Technology, Project MAC, 1968.

[17] T. S. P. E. Corporation. Specweb96 benchmark. https://www.spec.org/web96/.

[18] M. Curiel and A. Pont. Workload generators for web-based systems: Characteristics, current status, and challenges. IEEE Communications Surveys & Tutorials, 20(2):1526–1546, 2018.

[19] A. Dan and D. Towsley. An approximate analysis of the LRU and FIFO buffer replacement schemes. In Proceedings of the 1990 ACM SIGMETRICS conference on Measurement and modeling of computer systems, pages 143–152, 1990.

[20] O. Eytan, D. Harnik, E. Ofer, R. Friedman, and R. Kat. It’s time to revisit LRU vs. FIFO. In 12th {USENIX} Workshop on Hot Topics in Storage and File Systems (HotStorage 20), 2020.

[21] R. Fagin and T. G. Price. Efficient calculation of expected miss ratios in the independent reference model. SIAM Journal on Computing, 7(3):288–297, 1978.

[22] B. Fan, H. Lim, D. G. Andersen, and M. Kaminsky. Small cache, big effect: Provable load balancing for randomly partitioned cluster services. In Proceedings of the 2nd ACM Symposium on Cloud Computing, pages 1–12, 2011.

[23] M. Garetto, E. Leonardi, and S. Traverso. Efficient analysis of caching strategies under dynamic content popularity. In 2015 IEEE conference on computer communications (INFOCOM), pages 2263–2271. IEEE, 2015.

[24] P. Gill, M. Arlitt, Z. Li, and A. Mahanti. YouTube traffic characterization: A view from the edge. In Proceedings of the 7th ACM SIGCOMM Conference on Internet Measurement, IMC ’07, page 15–28, New York, NY, USA, 2007. Association for Computing Machinery.

[25] D. Grund. Static Cache Analysis for Real-Time Systems: LRU, FIFO, PLRU.

[28] S. Jiang and X. Zhang. LIRS: An efficient low inter-reference recency set replacement policy to improve buffer cache performance. ACM SIGMETRICS Performance Evaluation Review, 30(1):31–42, 2002.

[29] T. Johnson, D. Shasha, et al. 2Q: A low overhead high performance buffer management replacement algorithm. In Proceedings of the 20th International Conference on Very Large Data Bases, pages 439–450. Citeseer, 1994.

[30] K. Kant, V. Tewari, and R. K. Iyer. GEIST: A generator for e-commerce & internet server traffic. In ISPASS, pages 49–56, 2001.

[31] R. Karedla, J. S. Love, and B. G. Wherry. Caching strategies to improve disk system performance. Computer, 27(3):38–46, 1994.

[32] K. V. Katsaros, G. Xylomenos, and G. C. Polyzos. Globetraff: A traffic workload generator for the performance evaluation of future internet architectures. In 2012 5th International Conference on New Technologies, Mobility and Security (NTMS), pages 1–5. IEEE, 2012.

[33] W. King. Analysis of paging algorithms. In Proc. IFIP 1971 Congress, Ljubljana, pages 485–490. North-Holland, 1972.

[34] V. Kirilin, A. Sundarrajan, S. Gorinsky, and R. K. Sitaraman. RL-Cache: Learning-based cache admission for content delivery. IEEE Journal on Selected Areas in Communications, 38(10):2372–2385, 2020.

[35] E. Leonardi and G. L. Torrisi. Least recently used caches under the shot noise model. In 2015 IEEE Conference on Computer Communications (INFOCOM), pages 2281–2289. IEEE, 2015.

[36] Q. Li, X. Liao, H. Jin, L. Lin, X. Xie, and Q. Yao. Cost-effective hybrid replacement strategy for SSD in web cache. In 2015 IEEE International Conference on Computer and Information Technology; Ubiquitous Computing and Communications; Dependable, Autonomic and Secure Computing; Pervasive Intelligence and Computing, pages 1286–1294, 2015.

[37] T. Lykouris and S. Vassilvtiskii. Competitive caching with machine learned advice. In International Conference on Machine Learning, pages 3296–3305. PMLR, 2018.

[38] B. M. Maggs and R. K. Sitaraman. Algorithmic nuggets in content delivery. ACM SIGCOMM Computer Communication Review, 45(3):52–66, 2015.

[39] A. Mahanti, C. Williamson, and D. Eager. Web proxy workload characterization. Progress Report, Computer Sciences Dept, Univ. of Saskatchewan, 1999.

[40] A. Mahanti, C. Williamson, and D. Eager. Traffic analysis of a web proxy caching hierarchy. IEEE Network, 14(3):16–23, 2000.

[41] R. L. Mattson, J. Gecsei, D. R. Slutz, and I. L. Traiger. Evaluation techniques for storage hierarchies. IBM Systems journal, 9(2):78–117, 1970.

[42] N. Megiddo and D. S. Modha. ARC: A self-tuning, low overhead replacement cache. In FAST, volume 3, pages 115–130, 2003.

[43] D. Mosberger and T. Jin. httperf—a tool for measuring web server performance. ACM SIGMETRICS Performance Evaluation Review, 26(3):31–37, 1998.

[44] A. Narayanan, S. Verma, E. Ramadan, P. Babaie, and Z.-L. Zhang. DeepCache: A deep learning based framework for content caching. In Proceedings of the 2018 Workshop on Network Meets AI & ML, pages 48–53, 2018.

[45] K. Psounis, A. Zhu, B. Prabhakar, and R. Motwani. Modeling correlations in web traces and implications for designing replacement policies. Computer Networks, 45(4):379–398, 2004.

[46] D. Reason and J. Reineke. Toward precise PLRU cache analysis. In 10th International Workshop on Worst-Case Execution Time Analysis (WCET 2010). Schloss Dagstuhl-Leibniz Center for Computer Science, 2010.

[47] A. Rousskov and D. Wessels. High-performance benchmarking with Web Polygraph. Software: Practice and Experience, 34(2):187–211, 2004.

[48] M. Z. Shafiq, A. R. Khakpour, and A. X. Liu. Characterizing caching workload of a large commercial content delivery network. In IEEE INFOCOM 2016—The 35th Annual IEEE International Conference on Computer Communications, pages 1–9. IEEE, 2016.

[49] J. Summers, T. Brecht, D. Eager, and A. Gutarin. Characterizing the workload of a Netflix streaming video server. In 2016 IEEE International Symposium on Workload Characterization (IISWC), pages 1–12. IEEE, 2016.

[50] A. Sundarrajan, M. Feng, M. Kasbekar, and R. K. Sitaraman. Footprint descriptors: Theory and practice of cache provisioning in a global CDN. In Proceedings of the 13th International Conference on emerging Networking EXperiments and Technologies, pages 55–67, 2017.

[51] A. Sundarrajan, M. Kasbekar, R. K. Sitaraman, and S. Shukla. Midgress-aware traffic provisioning for content delivery. In USENIX Annual Technical Conference (USENIX ATC 20), pages 543–557. USENIX Association, 2020.

[52] W. Tang, Y. Fu, L. Cherkasova, and A. Vahdat. MediSyn: A synthetic streaming media service workload generator. In Proceedings of the 13th International Workshop on Network and Operating Systems Support for Digital Audio and Video, pages 12–21, 2003.

[53] S. Traverso, M. Ahmed, M. Garetto, P. Giaccone, E. Leonardi, and S. Niccolini. Unravelling the impact of temporal and geographical locality in content caching systems. IEEE Transactions on Multimedia, 17(10):1839–1854, 2015.

[54] C. A. Waldspurger, N. Park, A. Garthwaite, and I. Ahmad. Efficient MRC construction with SHARDS. In 13th {USENIX} Conference on File and Storage Technologies (FAST 15), pages 95–110, 2015.

[57] Q. Yang, H. H. Zhang, and T. Li. Mining web logs for prediction models in WWW caching and prefetching. In Proceedings of the seventh ACM SIGKDD international conference on Knowledge discovery and data mining, pages 473–478, 2001.

[58] J. Yiu. The Definitive Guide to ARM® Cortex®-M0 and Cortex-M0+ Processors. Academic Press, 2015.

[55] A. Williams, M. Arlitt, C. Williamson, and K. Barker. Web workload characterization: Ten years later. Web content delivery, pages 3–21, 2005.

[56] J. Yang, Y. Yue, and K. Rashmi. A large-scale analysis of hundreds of in-memory cache clusters at Twitter. In 14th {USENIX} Symposium on Operating Systems Design and Implementation (OSDI 20), pages 191–208, 2020.