# Prototype Implementation of Trusted Virtual Domains (TVDs)

## Overview
Figure 6 illustrates the prototype implementation of Trusted Virtual Domains (TVDs). In this setup, packets from a virtual machine (VM) are captured by a kernel module that implements part of the vSwitch. The packets are then encapsulated using EtherIP, with the network identifier field set to match the vSwitch to which the VM is connected. The EtherIP packet is given either a multicast or unicast IP address and routed through the Dom0 IP stack onto the physical network.

The kernel module also handles incoming EtherIP packets destined for the physical host. It un-encapsulates the Ethernet frames and transmits them over the appropriate virtual network interface, ensuring they are received by the intended guest vNIC.

## VLAN Tagging and EtherIP Processing

In addition to the EtherIP processing, we have implemented a kernel module for VLAN tagging in Dom0 of each virtualized host. Ethernet packets sent by a VM are intercepted at the same point in the Dom0 network stack as in the case of EtherIP. Instead of wrapping the Ethernet packets in an IP packet, the VLAN tagging module re-transmits the packets unmodified into a pre-configured Linux VLAN device (e.g., eth0.α and eth0.β on hosts A and B, as shown in Figure 6), matching the VLAN to which the VM’s vNIC is connected.

The VLAN device, provided by the standard Linux kernel VLAN support, applies the appropriate VLAN tag before sending the packet out via the physical NIC. The VLAN tagging module also intercepts VLAN packets arriving on the physical wire and destined for a VM. The module uses the standard Linux VLAN Ethernet packet handler (8021q.ko kernel module) with a slight modification: it removes the VLAN tags and maps the packets to the appropriate vSwitch (α or β), which in turn maps them to the corresponding back-end device (vif1.0 or vif2.0) in Dom0. The packets eventually arrive at the front-end device (eth0 in Dom1 or Dom2) as plain Ethernet packets.

### Implementation Issues

1. **VLAN Tag Filtering and Offloading:**
   Some Ethernet cards offer VLAN tag filtering and offloading capabilities, which are useful when running a single kernel on a physical platform. However, for our virtual networking extensions, the hardware should not strip the tags from packets. We modified the Linux kernel drivers (tg3.ko and forcedeth.ko) to disable VLAN offloading.

2. **Checksum Handling:**
   For efficiency, the Xen front-end and back-end driver implementations avoid computing checksums between them for TCP/IP and UDP/IP packets. We modified the Xen code to handle our EtherIP-encapsulated IP packets similarly.

3. **Multicast Tunnels:**
   The EtherIP encapsulation approach relies on mapping a virtual Ethernet broadcast domain to an IP multicast domain. While this works in a LAN environment, we encountered issues with VLAN segments spanning WAN-separated physical machines. We resolved this by building unidirectional multicast tunnels between successive LAN segments.

## Performance Results

We used the NetIO network benchmark (version 1.23-2.1) to measure the network throughput for different packet sizes of the TCP protocol. We measured both Tx (outgoing) and Rx (incoming) throughput for traffic between two guest VMs on the same physical host.

Figure 7 compares the throughput results for the standard Xen-bridged configuration with configurations that include our VLAN tagging and EtherIP encapsulation extensions. The performance of our virtual networking extensions is comparable to that of the standard Xen (bridge) configuration. The VLAN tagging extension performs slightly better than the encapsulation extension for the Tx path, while the opposite is true for the Rx path.

### Throughput Analysis

- **Tx Path:**
  The major cost in the Tx path for the EtherIP method is the allocation of a fresh socket buffer (skb) and copying the original buffer data. The Linux network stack allocates a fixed amount of headroom, which is insufficient for the EtherIP header. This necessitates data copying, which is costly. In contrast, the VLAN tagging method does not suffer from this overhead, making it more efficient for the Tx path.

- **Rx Path:**
  In the Rx path, there is no packet-copying overhead for the EtherIP approach; the extra EtherIP header merely needs to be removed before the packet is sent to a VM. In the VLAN case, the packets must traverse two network devices and the vSwitch kernel module, resulting in slightly poorer performance. Our next prototype will avoid using the Linux VLAN code and have the vSwitch module do the tagging/untagging directly, similar to the EtherIP case.

Table 3 shows the round-trip times between two guest VMs on a physical host for the bridged, VLAN, and EtherIP encapsulation cases. The average round-trip times for VLAN and EtherIP encapsulation are 12% and 14.9% higher than those of the standard Xen bridged configuration.

## Conclusion

In this paper, we introduced a secure virtual networking model and a framework for efficient and security-enhanced network virtualization. Our framework leverages existing networking technologies (such as Ethernet encapsulation, VLAN tagging, and VPN) and security policy enforcement to realize the abstraction of Trusted Virtual Domains (TVDs).

Observing that manual configuration of virtual networks is error-prone, our design emphasizes automation. We introduced management entities called TVD masters to orchestrate the TVD configuration and deployment process. Based on the capability models of the physical infrastructure, the TVD masters coordinate the setup and population of TVDs using a well-defined protocol.

We described a Xen-based prototype that implements a subset of our secure network virtualization framework design. The performance of our virtual networking extensions is comparable to the standard Xen (bridge) configuration.

### Future Work

- **Short-term:**
  Enhance the prototype with more auto-deployment elements, such as the TVD master and proxy.
  
- **Mid-term:**
  Investigate ways to enforce better separation between the modules dealing with different TVDs on the same physical host. One possible solution is to employ a dedicated VM per TVD on a given physical host for the management of TVD elements, providing stronger isolation.

- **Long-term:**
  Fully automate the TVD deployment process, including key management. Investigate the use of emerging Trusted Computing technologies for secure storage and handling of TVD credentials.

## Acknowledgements

We thank the other authors of [6] for valuable inputs. This work has been partially funded by the European Commission as part of the OpenTC project (www.opentc.net).

## References

[1] RFC 3378. EtherIP: Tunneling Ethernet Frames in IP Datagrams.

[2] IEEE Standard 802.1Q-2003. Virtual Bridged Local Area Networks. Technical Report ISBN 0-7381-3662-X.

[3] D. Andersen, H. Balakrishnan, F. Kaashoek, and R. Morris. Resilient Overlay Networks. In Proc. 18th ACM Symposium on Operating Systems Principles (SOSP-2001), pages 131–145, New York, NY, USA, 2001. ACM Press.

[4] P. T. Barham, B. Dragovic, K. Fraser, S. Hand, T. L. Harris, A. Ho, R. Neugebauer, I. Pratt, and A. Warfield. Xen and the Art of Virtualization. In Proc. 19th ACM Symposium on Operating Systems Principles (SOSP-2003), pages 164–177, October 2003.

[5] A. Bavier, M. Bowman, B. Chun, D. Culler, S. Karlin, L. Peterson, T. Roscoe, and M. Wawrzoniak. Operating Systems Support for Planetary-Scale Network Services. In Proc. 1st Symposium on Networked Systems Design and Implementation (NSDI’04), San Francisco, CA, USA, 2004.

[6] A. Bussani, J. L. Griffin, B. Jansen, K. Julisch, G. Karjoth, H. Maruyama, M. Nakamura, R. Perez, M. Schunter, A. Tanner, L. van Doorn, E. V. Herreweghen, M. Waidner, and S. Yoshihama. Trusted Virtual Domains: Secure Foundation for Business and IT Services. Research Report RC 23792, IBM Research, November 2005.

[7] A. T. Campbell, M. E. Kounavis, D. A. Villela, J. B. Vicente, H. G. De Meet, K. Miki, and K. S. Kalaichelvan. Spawning Networks. IEEE Network, 13(4):16–29, July-August 1999.

[8] A. T. Campbell, J. Vicente, and D. A. Villela. Managing Spawned Virtual Networks. In Proc. 1st International Working Conference on Active Networks (IWAN ’99), volume 1653, pages 249–261. Springer-Verlag, 1999.

[9] C. I. Dalton. Xen Virtualization and Security. Technical report, HP Security Office Report, August 2005.

[10] R. Davoli. VDE: Virtual Distributed Ethernet. In Proc. 1st International Conference on Testbeds and Research Infrastructures for the Development of Networks and Communities (Tridentcom 2005), pages 213–220. IEEE Press, February 2005.

[11] S. W. Hunter, N. C. Strole, D. W. Cosby, and D. M. Green. BladeCenter Networking. IBM Journal of Research and Development, 49(6), 2005.

[12] X. Jiang and D. Xu. VIOLIN: Virtual Internetworking on OverLay INfrastructure. In Parallel and Distributed Processing and Applications, volume 3358 of LNCS, pages 937–946. Springer-Verliag, Berlin, 2004.

[13] M. E. Kounavis, A. T. Campbell, S. Chou, F. Modoux, J. Vicente, and H. Zhuang. The Genesis Kernel: A Programming System for Spawning Network Architectures. IEEE Journal on Selected Areas in Communications, 19(3):511–526, March 2001.

[14] Common Criteria Project Sponsoring Organisations. Common Criteria for Information Technology Security Evaluation (version 2.0). May 1998, adopted by ISO/IEC as Draft International Standard DIS 15408 1-3.

[15] L. Peterson, T. Anderson, D. Culler, and T. Roscoe. A Blueprint for Introducing Disruptive Technology into the Internet. SIGCOMM Comput. Commun. Rev., 33(1):59–64, 2003.

[16] P. Ruth, X. Jiang, D. Xu, and S. Goasguen. Virtual Distributed Environments in a Shared Infrastructure. IEEE Computer, 38(5):63–69, May 2005.

[17] P. Ruth, J. Rhee, D. Xu, R. Kennell, and S. Goasguen. Autonomic Live Adaptation of Virtual Computational Environments in a Multi-Domain Infrastructure. In Proc. IEEE International Conference on Autonomic Computing (ICAC-2006), June 2006.

[18] A-R. Sadeghi and C. Stüble. Property-based Attestation for Computing Platforms: Caring about Properties, not Mechanisms. In Proc. 2004 Workshop on New Security Paradigms (NSPW-2004), pages 67–77, New York, NY, USA, 2005. ACM Press.

[19] A. Sundararaj and P. Dinda. Towards Virtual Networks for Virtual Machine Grid Computing. In Proc. 3rd USENIX Conference on Virtual Machine Technology (VM 04), pp. 177-190, 2004.

[20] J. Touch. Dynamic Internet Overlay Deployment and Management using the X-bone. Computer Networks, 36(2-3):117–135, 2001.

[21] B. Traversat, A. Arora, M. Abdelaziz, M. Doigou, C. Haywood, J-C. Hugly, E. Pouyoul, and B. Yaeger. Project JXTA 2.0 Super-Peer Virtual Network, 2003.

[22] Trusted Computing Group. TPM Main Specification v1.2, November 2003. https://www.trustedcomputinggroup.org.