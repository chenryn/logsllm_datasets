# Reversing and Exploiting the Bootloader

## Introduction
- When reversing a bootloader, you may need to guess using absolute addresses to strings/functions from the literal pool.
- For more details, refer to the Quarkslab blog.

## Code Analysis in Bootimg 2
- Start of code in `bootimg2`.
- First `0x10` bytes of `bootimg2`.

### Reversing the Bootloader
- **Searching for Strings:**
  - The console log mentions `EEPROM` and `/dev/null`.
  - Look for these strings in the bootloader binary.
  - Find cross-references (XREF) to these strings.

### SPI EEPROM Information
- **EEPROM and SPI 101:**
  - **EEPROM (Electrically Erasable Programmable Read-Only Memory):**
    - Not entirely read-only.
    - Usually small and slow.
    - One type of storage among many.
  - **SPI (Serial Peripheral Interface):**
    - A bus that can be shared by multiple devices.
    - Uses 4 wires: 3 shared (MISO, MOSI, CLOCK) + 1 chip select per SPI slave.
    - Master sends commands, and the slave responds.

### Reading from EEPROM
- **Code Snippet:**
  - `R4 = var_4B`
  - `memset(var_4B, 0, 6)`
  - Read 5 bytes from `0x2B0` to `[sp-0x4B:sp-0x47]`
- **Logging:**
  - Indicates an EEPROM read.
  - Function sends a "3" command over SPI, which is a read command according to the EEPROM's datasheet.
  - SPI command uses dedicated mapped I/O, which can be found in the CPU's datasheet or needs to be guessed.

### Finding the `read_from_eeprom` Function
- The function was identified through logging and analysis of the SPI commands.

### Patching the EEPROM
- **Plan of Action:**
  - Use the datasheet to know the read/write commands.
  - Use a SPI device to interface with the EEPROM.
  - Arduino and Raspberry Pi are good candidates, but they use 5V SPI, while the phone uses 3.3V.
  - BusPirate can handle 3.3V.
  - Connect to the chip using a SOIC clip or pogo connector.
  - Micro soldering is another option.

### Troubleshooting Input Issues
- **Console Inputs:**
  - The RX pin might be tied to VCC/GND via a resistor.
  - Follow the traces from the pads to see where they connect.
  - Vias connect the front of the board to the back.
  - Lost the traces around the mod connector.
  - Used a jumper cable connected to the TX of the FTDI cable and pressed Enter while poking at the pins.
  - Sanded an Ethernet plug to fit into the mod port and used an RJ45 to DB9 (Cisco console cable).

### Root Shell and Housekeeping
- **Next Steps:**
  - Explore the live system.
  - Get pre-compiled binaries on the phone (e.g., GDB, DOOM).
  - Audit the main H.323 application.
  - Disable the watchdog daemon and stop verbose processes.

### Vulnerability Research
- **Poking Around:**
  - Check running processes and open ports.
  - Explore and have fun.
- **DHClient:**
  - Interesting because it is already running and networked.
  - Shows a 2007 copyright and a segmentation fault.
  - Compare the original source code with the fixed one.
  - Check for modern mitigations like stack cookies and ASLR.
  - Set up a debug environment, either live on the phone or in emulation (QEMU).

### Debugging DHClient
- **Running in QEMU:**
  - QEMU can emulate ARM for userland or full-system.
  - Build a custom Linux kernel with Busybox and necessary libraries.
  - Run QEMU with proper network configuration.
  - Use SoCat to handle AF_UNIX sockets.
  - Breakpoints in GDB to re-configure IP addresses and send rogue DHCP packets.

### Exploiting the Vulnerable Code Path
- **Bug Details:**
  - Bug occurs when sending an invalid-sized subnet-mask option.
  - Craft a DHCP reply with the invalid data using Scapy.
  - Control the execution flow and find a writable address.
  - No ASLR, so pick an address in a writable region.
- **Shellcode:**
  - Craft a shellcode if the stack and heap are not executable.
  - Hunt for data to be copied in a static location.
  - Use the "DOMAIN" option to find the string in memory.

### Conclusion
- **Mitigation:**
  - Monitor and segregate your network.
  - Prompt for patches.
- **Why This Happens:**
  - Technical debt and embedded device complexity.
  - Embedded devices are not black boxes; anyone can find these bugs.

### Resources
- **Tutorials:**
  - ARM assembly: [Azeria Labs](https://azeria-labs.com/writing-arm-assembly-part-1/)
  - Finding the base address of a bootloader: [Quarkslab Blog](https://blog.quarkslab.com/reverse-engineering-samsung-s6-sboot-part-i.html)
  - QEMU setup: [Zach Pfeffer](https://www.zachpfeffer.com/single-post/build-the-linux-kernel-and-busybox-and-run-on-qemu), [Learning From You Blog](https://learningfromyoublog.wordpress.com/2016/04/05/131/), [Alberand GitHub](https://alberand.github.io/host-only-networking-set-up-for-qemu-hypervisor.html)
  - Flash modification: [Black Hat](https://www.blackhat.com/docs/us-14/materials/us-14-oh-reverse-engineering-flash-memory-for-fun-and-benefit-wp.pdf), [Flashrom](https://www.flashrom.org/ISP)
  - General hardware hacking: [Devttys0](http://www.devttys0.com/2012/11/reverse-engineering-serial-ports/), [Defcon](https://www.defcon.org/images/defcon-21/dc-21-presentations/phorkus-evilrob/DEFCON-21-Phorkus-Evilrob-Hacking-Embedded-Devices-Bad-Things-to-Good-Hardware.pdf), [Pentest Partners](https://www.pentestpartners.com/security-blog/how-to-read-from-an-eeprom/), [Senrio](https://blog.senr.io/blog/jtag-explained), [Scanlime](https://www.youtube.com/watch?v=TECQatnCF20)

- **Prior Work:**
  - Red Balloon Security presentations on Avaya: [RSA Conference](https://www.rsaconference.com/videos/stepping-p3wns-adventures-in-full-spectrum-embedded-exploitation-defense), [Embedded Exploitation Party Trick](https://www.rsaconference.com/writable/presentations/file_upload/BR-T08-EMBEDDED-EXPLOITATION-PARTY-TRICK.PDF)
  - DHClient exploits: [Exploit-DB](https://www.exploit-db.com/exploits/9265), [Exploit-DB](https://www.exploit-db.com/exploits/36933)

- **Capture the Flag:**
  - [Microcorruption](https://microcorruption.com/), [Holiday Hack Challenge](https://holidayhackchallenge.com/2015/), [DVRF](https://github.com/praetorian-code/dvrf)

### Contact
- Find me on Twitter: [@PHLAUL]

### Thank You!
- Thank you all for your attention!