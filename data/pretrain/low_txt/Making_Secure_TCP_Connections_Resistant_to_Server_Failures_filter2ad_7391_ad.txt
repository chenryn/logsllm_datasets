### Connection Reset and Recovery

When the abort timer expires, clients begin resetting their connections. This timeout is typically set to several minutes, with a general minimum of two minutes and a common value of nine minutes. In our experiments, recovery under load conditions was achieved in less than two minutes.

#### Example SSH Recovery Session
- **Monitor alerts of server crash:** 17:39:21
- **Recovery start:** 17:39:26
- **IP takeover and recovery server daemon started:** 17:39:32
- **Recovery complete:** 17:39:40

It takes approximately 11 seconds to detect a server crash, reset the virtual interface, and start the recovery daemon. The actual recovery process, which includes controlled partial replay, reading and decrypting saved parameters, and resetting the recovery server’s encryption cipher states, takes an additional 8 seconds. For comparison, a regular client login to the server typically takes about 3.2 seconds.

### Recovery Performance Analysis

The following figure and table provide a detailed analysis of the recovery percentage and average recovery time based on the number of open sessions.

**Figure 5.** Recovery percentage and the average recovery time vs. the number of open sessions.

| # of Connections | Avg Recovery Time (s) | Standard Deviation (s) | Median (s) | Shortest Recovery Time (s) | Longest Recovery Time (s) |
|------------------|-----------------------|------------------------|------------|----------------------------|---------------------------|
| 5                | 30                    | 19                     | 37.4       | 57.2                       | 120                       |
| 10               | 20                    | 50                     | 40         | 129                        | 60                        |
| 70               | 191                   | 13                     | 17.3       | 54.8                       | 53.49                     |

**Table 1.** Recovery time for multiple concurrent sessions (time unit is second).

We observe that the recovery percentage drops from 100% with 20 or fewer simultaneous sessions to around 60% with 70 simultaneous sessions. This degradation is partly due to the limitations imposed by relatively outdated hardware. Under 20 to 30 open sessions, the average recovery time is within the two-minute TCP timer expiration limit, as determined by our hardware constraints. More powerful systems can handle more demanding tasks, such as a larger number of concurrent logins, and thus improve recovery performance. Although high network load could cause packet loss, this has not been found to be a limiting factor. Recovering most sessions, even with some failures, may be preferable to losing all sessions.

### Conclusions and Future Work

Until secure TCP-based migration solutions are widely available on existing systems, there will be a need for client-transparent migration. Our system demonstrates how certain techniques can be deployed simply without requiring changes to any clients. The simplicity and effectiveness of the methods presented in this paper make SecureJeebs attractive for commercial product development.

We are currently extending this work in the following directions:
- Migrate HTTPS by proposing simple extensions to SSL.
- Prove the applicability of the methods to secure file transfer protocol (SFTP).
- Improve the recovery ratio under high load by employing more sophisticated recovery methods.

### Acknowledgements

We thank Sada Narayanappa for useful discussions on various modules, Profs. Leutenegger and Lopez for lending us the hardware for experimentation, and Ocean Yang for her help with the figures.

### References

[1] N. Aghdaie and Y. Tamir. Implementation and Evaluation of Transparent Fault-Tolerant Web Service with Kernel-Level Support. In Proc. of the 11th International Conference on Computer Communications and Networks (ICCCN 2002), Miami, Florida, October 14-16, 2002.

[2] L. Alvisi, T. C. Bressoud, A. El-Khashab, K. Marzullo, and D. Zagorodnov. Wrapping Server-Side TCP to Mask Connection Failures. In Proc. of IEEE INFOCOM, Anchorage, Alaska, pp. 329-337 (April 2001).

[3] E. Amir, S. McCanne, and R. Katz. An Active Service Framework and its Application to Real-time Multimedia Transcoding. In Proc., ACM SIGCOMM ’98, Sep. 1998.

[4] A. Burt, S. Narayanappa and R. Thurimella. Techniques for Client-Transparent TCP Migration. Submitted.

[5] Cisco Systems. Cisco Distributed Director. http://www.cisco.com/warp/public/cc/pd/cxsr/dd/tech/dd_wp.htm.

[6] A. Fox, S. Gribble, Y. Chawathe, and E. Brewer. Cluster-based Scalable Network Services. In Proc. ACM SOSP ’97, Oct. 1997.

[7] M. Haungs, R. Pandey, E. Barr, and J.F. Barnes. Migrating Sockets: Bridging the OS Primitive/Internet Application Gap. Manuscript. Available for download from http://www.cs.ucdavis.edu/~haungs/my_cv/

[8] B. Kuntz and K. Rajan. MIGSOCK: Migratable TCP Socket in Linux, M.S. Thesis, Information Networking Institute, Carnegie Mellon University, Feb. 2002.

[9] D. A. Maltz and P. Bhagwat. MSOCKS: An Architecture for Transport Layer Mobility. In Proc. IEEE INFOCOM, Mar. 1998.

[10] Netscape SmartDownload, http://wp.netscape.com/computing/download/smartdownload/ib/about.html.

[11] M. Orgiyan and C. Fetzer. Tapping TCP Streams. In Proc. of IEEE International Symposium on Network Computing and Applications (NCA2001), Boston, MA, USA, Feb. 2002.

[12] V. S. Pai, M. Aron, G. Banga, M. Svendsen, P. Druschel, W. Zwaenepoel, and E. Nahum. Locality-aware Request Distribution in Cluster-based Network Servers. In Proc. ASPLOS ’98, Oct. 1998.

[13] A. E. Papathanasiou and E. V. Hensbergen. KNITS: Switch-based Connection Hand-off. In Proc. IEEE INFOCOM, Jun. 2002.

[14] X. Qu and J. Xu Yu and R.P. Brent. Implementation Of a Portable-IP System For Mobile TCP/IP. TR-CS-97-19, The Australian National University, Canberra, Australia, 1997.

[15] Scaling Next Generation Web Infrastructure with Content-Intelligent Switching, http://www.nortelnetworks.com/products/library/collateral/intel_int/l7_white_paper1.pdf

[16] C. Snoeren and H. Balakrishnan. An End-to-End Approach to Host Mobility. In Proc. 6th ACM MOBICOM, Aug. 2000.

[17] C. Snoeren, D. G. Andersen, and H. Balakrishnan. Fine-Grained Failover Using Connection Migration. In Proc. 3rd USENIX Symp. on Internet Technologies and Systems (USITS), Mar. 2001.

[18] O. Spatscheck, J. S. Hansen, J. H. Hartman and L. L. Peterson. Optimizing TCP Forwarder Performance. IEEE/ACM Transactions on Networking, 8:2, pp. 146—157, 2000.

[19] SSH Transport Layer Protocol. http://www.ietf.org/internet-drafts/draft-ietf-secsh-transport-15.txt

[20] SSH Authentication Protocol. http://www.ietf.org/internet-drafts/draft-ietf-secsh-userauth-16.txt.

[21] SSH Connection Protocol. http://www.ietf.org/internet-drafts/draft-ietf-secsh-connect-16.txt

[22] SSH Protocol Architecture. http://www.ietf.org/internet-drafts/draft-ietf-secsh-architecture-13.txt

[23] R. R. Stewart, Q. Xie, K. Morneault, C. Sharp, H. J. Schwarzberger, T. Taylor, I. Rytina, M. Kalla, L. Zhang, and V. Paxson. RFC 2960: Stream Control Transport Protocol, 2000.

[24] F. Sultan, K. Srinivasan, and L. Iftode. Transport Layer Support for Highly-Available Network Services. In Proc. HotOS-VIII, May 2001. Extended version: Technical Report DCS-TR-429, Rutgers University.

[25] F. Sultan, K. Srinivasan, D. Iyer, L. Iftode. Migratory TCP: Connection Migration for Service Continuity over the Internet. In Proc. of the 22nd International Conference on Distributed Computing Systems (ICDCS '02), July 2002.

[26] V.C. Zandy and B.P. Miller. Reliable Network Connections. In Proc. 8th Annual ACM/IEEE International Conference on Mobile Computing and Networking, pages 95–106, Atlanta, Georgia, September 2002.

---

Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003)
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021 at 07:51:08 UTC from IEEE Xplore. Restrictions apply.