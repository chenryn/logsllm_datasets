# Demo Time: Client-End (Dummy Edition)

## Date: 7/11/12

### Demo 1 – The Key for the Goal
- **Client Action**: The client must send a `FIN_ACK` in advance.
- **Server Action**: The server does not need to take any action.

### Demo 2 – TCP FIN_WAIT_1
#### From RFC:
- **FIN-WAIT-1 STATE**: 
  - In addition to the processing for the ESTABLISHED state, if our `FIN` is acknowledged, enter the `FIN-WAIT-2` state and continue processing.
- **FIN-WAIT-2 STATE**:
  - If the retransmission queue is empty, the user's `CLOSE` can be acknowledged ("ok"), but do not delete the TCB.
- **CLOSE-WAIT STATE**:
  - Do the same processing as for the ESTABLISHED state.
- **CLOSING STATE**:
  - If the `ACK` acknowledges our `FIN`, enter the `TIME-WAIT` state; otherwise, ignore the segment.
- **LAST-ACK STATE**:
  - The only thing that can arrive in this state is an acknowledgment of our `FIN`. If our `FIN` is acknowledged, delete the TCB, enter the `CLOSED` state, and return.
- **TIME-WAIT STATE**:
  - The only thing that can arrive in this state is a retransmission of the remote `FIN`. Acknowledge it and restart the 2 MSL timeout.

#### Additional Notes:
- **Timeout**: Depending on the OS, the timeout is around 60 seconds and is difficult to fine-tune on the server.
- **RFC**: "The client can still receive data from the server but will no longer accept data from its local application to be sent to the server."
- **Resource Allocation**: The server will allocate resources to handle the web service. During an attack, the web application may hold onto these resources, leading to memory overflow.

## Demo Time: Client-End (Home Make Edition)

### Demo 2 – The Key for Our Goal
- **Check**: Verify the TCP `FIN_WAIT1` timeout value.
- **Wait for RST/ACK**: Initiated by the requestor, target’s server, or CDN.

### Demo 2 – Wait for the FIN, PSH, ACK from Server
- **IIS Case**: If "connection: close" is included, the `FIN` will be sent, and the state will change to `FIN_WAIT_1`.

## Demo 3 – TCP Established
#### From RFC:
- **TCP Established State**: Represents an open connection where data received can be delivered to the user. This is the normal state for the data transfer phase of the connection.
- **Resource Allocation**: The server will allocate significant resources to handle the web service and web application.
- **Timeout**: The timeout for the `TCP Established` state is very long (around 3600 seconds) and cannot be too short. This state uses the most resources on the server compared to other TCP states.

#### Additional Notes:
- **HTTP Method Design**: We can force the server to use more resources by sending fragmented and incomplete packets.
- **Example**:
  - HTTP POST Method with `Content-length: 99999`
  - HTTP GET Method with a packet size over 1500 without `\r\n\r\n`
- **Incomplete HTTP Request**: The timeout depends on the application and server, which may be 30 seconds, 5 minutes, 10 minutes, or more.
- **Bypassing Security Devices**: Incomplete HTTP requests can bypass network security devices.

### Comparison with Slowloris
- **Slowloris**: Extends the `TCP Established` state in one connection, slowly filling the server's resource pool.
- **Our Demo 3**: Finds the maximum size of the resource "hole" and creates many holes of random sizes.

## Demo Time: Client-End (Monkey Play Level)

### Demo 3 – The Key for the Goal
- **Check**: Verify the TCP establishment timeout value (when we send PA).
- **Check**: Verify the TCP continuous `ACK` timeout value (after PA).
- **Wait for FIN/ACK**: Initiated by the target’s server.

### Demo 3 – TCP Establishment Timeout
- **Send PUSH ACK**: Send the first `PUSH ACK` to the server before the timeout.
- **Firewall and Router Considerations**: Good luck, firewall, router, IPS, WAF, etc.

### Demo 3 – TCP Continuous ACK Timeout Value
- **After First Push ACK**: After the client sends the first `PUSH ACK` in the `TCP Established` state, the client does nothing. This is the timeout for the server in the `TCP Established` state. For this demo, a `RST ACK` is sent.
- **Timeout Example**: Brother A’s timeout is 2 minutes.

### Forgotten Points
- **Fake IP Address**: It is possible to fake a three-way handshake.
- **DDoS Solution**: HKEX has already spent millions to rebuild the DDoS solution and fix the problem.
- **Omissions**: I forgot to fill in cookies, referer, and correct POST data.
- **International Security Standard**: Adhering to international low-security standards.

## Attack Conclusion for Demos 1-3
- **Signature-Based Detection**: Not useful as HTTP fields can be randomized.
- **Customized Attacks**: Each attack is customized for individual targets.
- **Testing Boundaries**: Test the boundary values of rate limits on security and detection devices.
- **Confusion Tactics**: Confuse security detection devices with "look-like" real HTTP requests.

## Additional Demos
- **Demo 4**: Empower an Attack Server
- **Demo 5**: Online Game
- **Demo 6**: Trading Application
- **Demo 7**: HTTPS
- **Demo 8**: Android Play Store
- **Demo 9**: More...

## Proof of Concept (PoC) of Case Study
- **Demos 1-3**: PoC for the analysis results and impact in Part 1.

## Empowering an Attack Server
- **Attack Goal**: Intensive use of memory and CPU without establishing a connection.
- **Server Behavior**: The server will hold the `TCP Established` connection.

### Demo
- **Launch Attack**: Use the designed Attack Server (in Demo 4) with the stuck `TCP Established` state technique (from Demo 3).

## Server-End Demo

### Design Overview
- **Current DDoS Mitigation**: Violates RFC standards.
- **Attack Server Design**: Adopts DDoS mitigation methods into the design, making it appear to fulfill RFC standards.
- **Soldier Design**: Tailored for the attack technique in Demo 3.

### Attack Server Features
- **Multi-Target Attack**: Can launch attacks against multiple targets.
- **Layer-7 Attack Methods**: Various layer-7 attack methods can disrupt the target.
- **Victim State**: Most victims are stuck in the `TCP Established` state.

### Design and Power-Up Your Attack Server
- **Different Types of Soldiers**: E.g., Attack Server + Syncookie, syncache, shared database with HTTP request, etc.

## Summary
- **Impact**: Imagine the consequences and impact if we combine the studies in Part 1 and Part 2 against our targets.

## Part 3: Defense Model
### Existing DDoS Mitigation Countermeasures
- **TCP Layer Authentication**
- **HTTP Layer Authentication** (redirect, URL)
- **HTTP Layer Interrupt** (Captcha)
- **Signature-Based Application Detection**
- **Rate Limit**

## Apache Gateway with Load Balancers Group
### Custom Filter by Script
- **User Experience**: No need for users to use captcha-like authentication.
- **Design Overview**:
  - **Apache Web Service**
  - **Hardened Apache Server**
  - **Authentication Code Module**
  - **Control Policy Module**
  - **Routing and Forwarding Engine**
  - **GUI Control Panel**
  - **Rewrite TCP Protocol in Linux Kernel Module**

### Attack Example: GET / HTTP/1.1 or GET / / 1.1
- **If Attack Cannot Be Redirected**:
  - Check HTTP fields and drop non-standard HTTP requests.
  - Close the connection, suspending the attack.
- **If Attack Can Be Redirected**:
  - Redirect the `GET` flood (Redirect 301) to phase 2 with a new session.
  - Close the existing connection in AG.

### Second Handshake Phase
- **With Referrer (Allow Traffic)**:
  - Assign a checkable value and referrer value to the user’s web browser.
  - Optional: Require the client side to run a JavaScript formula, using the result in phase 3.
  - Redirect the request to phase 3 with a new session.
  - Close the current connection in AG.
- **Without Referrer (Attack) (Drop Traffic)**:
  - Close the connection.
  - For HTTP `POST` requests, drop them instantly.

### Third Handshake Phase
- **User Sends GET Request to Checking Page**:
  - Incomplete HTTP requests will be dropped.
  - Set passed traffic in the whitelist.
  - Set connection limits per IP address.
  - Set limits per request, per URL.
  - Set time limit and timeout values.

### Deploying Mode
- **Host Mode**: Develop a module in Apache.
- **Transparent Mode**: Easy to deploy, in front of the web server.
- **Reverse Proxy Mode**: Easy to deploy.
- **Load Balancer Mode**: Same as proxy, but less effective against high-volume bandwidth attacks.

### Best Deployment Location
- **Before Firewall, Behind Router**: Analyze and filter high-volume traffic to prevent DoS attacks.
- **Behind Firewall (with Content Forward)**:
  - Firewall redirects HTTP traffic to the Apache gateway.
  - Clean traffic is sent back to the firewall for further processing.
- **Behind Firewall (Route Mode, Proxy Mode)**:
  - After traffic analysis by the firewall, traffic passes to the Apache gateway.
  - Clean traffic is then routed to the web server.
- **Integrated with Load Balancer**:
  - HTTP traffic is processed and analyzed by the Apache gateway.
  - Clean traffic is transferred to the load balancer for distribution to the web server farm.

### Roadmap
- **Phase 1**: Integrate IDS/IPS, firewall, and black hole system with the Layer-7 Anti-DDoS Gateway.
- **Phase 2**: Develop API for custom scripts.
- **Phase 3**: Develop a blacklist system for IP addresses grouped by time and generation mechanism.

## Thank You
- **Contact Information**:
  - Tony: mt[at]vxrl[dot]org
  - Alan: avenir[at]vxrl[dot]org
  - Anthony: darkfloyd[at]vxrl[dot]org
  - Kelvin: captain[at]vxrl[dot]org
  - Website: www.vxrl.org

Thank you very much for your listening! Xie Xie.