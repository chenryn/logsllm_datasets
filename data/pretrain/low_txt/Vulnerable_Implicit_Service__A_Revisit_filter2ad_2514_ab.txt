### Bound Service Destruction
A bound service will be destroyed if all its callers have been destroyed. The `Intent` object, which is a messaging object, is passed into both `startService()` and `bindService()`. There are two types of intents: explicit and implicit. Explicit intents specify the component or package name directly, while implicit intents only provide general information such as the action to be performed, the data to operate on, or the category of the action. The task of evaluating the matching components for an implicit intent is delegated to the Android system.

For a service to be started by an implicit intent, it must define one or more Intent Filters, which specify the types of intents the service can respond to. A service matches an implicit intent only if the action, data, and category defined in the intent match one of the Intent Filters defined by the service. When starting service components through an implicit intent, the Android system calculates the matching values of all Intent Filters. If multiple services match the intent, the system automatically selects the most appropriate service in the background.

### SDK Version
Each application's `Manifest.xml` file includes a `<uses-sdk>` declaration, which defines the application’s compatibility with one or more versions of the Android platform using an API Level integer. The `minSdkVersion`, `maxSdkVersion`, and `targetSdkVersion` attributes can be defined within this declaration. 

- `minSdkVersion` specifies the minimum API Level required for the application to run.
- `maxSdkVersion` designates the maximum API Level the application is designed to run on. However, this attribute is no longer checked or enforced beyond Android 2.0.1.
- `targetSdkVersion` indicates the API Level that the application targets. Its default value is set to `minSdkVersion`. This attribute informs the system that the application has been tested against the target SDK version, and the system should not enable any compatibility behaviors to maintain the application’s forward-compatibility with the target version. The application can still run on older versions down to `minSdkVersion`.

### Service Hijacking Attacks
Implicit intents were originally introduced by Android to ease the developer's workload by providing more flexibility. For example, instead of coding complex services like image enhancement or object detection, developers can pass the operation request and data to the Android system, which will select an available application (e.g., OpenCV Manager) that has implemented those services and is open to third-party apps.

However, researchers have found that implicit service invocations are not secure and may be vulnerable to service hijacking attacks. If an application defines a service `A` with at least one Intent Filter and can be called through an implicit intent by other apps, an attacker can launch a service hijacking attack by creating a malicious application that provides a service `A*` to match the same implicit intent but with higher priority. When the victim application sends requests for calling service `A` to the Android system, the system will automatically select the service with the highest priority (i.e., the malicious service `A*`) from multiple matching services and use it to serve the victim app.

Android sorts service priority using five Intent Filter fields in decreasing order:
- **Priority**: The declared priority of the Intent Filter. The value must be between -1000 and 1000, with higher values indicating higher priority. The default value is 0.
- **Preferred Order**: Represents the user’s preference. Currently, this value is set to the default value 0 for all services and cannot be changed.
- **Is Default**: Indicates whether the Intent Filter has specified the `Intent.CATEGORY_DEFAULT` attribute, meaning a default action can be performed.
- **Match**: The system’s evaluation of how well the Intent Filter matches the intent, calculated based on five Intent Filter attributes: action, categories, type, data, and scheme.
- **System**: Defines whether the service is part of a system application. System applications have higher priority than user applications.

The fields `priority`, `isDefault`, and `match` are related to the attributes set in the Intent Filter and can be misused by malicious developers to create a service with higher priority to hijack a victim service. When multiple services have the same matching value to an implicit intent, they are ranked alphabetically by package names. Thus, an attacker may misuse the package name to give their service a higher priority. Since Android 5.0, the use of explicit intents is recommended, and the system throws an exception when a service is invoked through an implicit intent, causing the application to crash.

### Methodology
We developed an analysis framework called ISA to systematically analyze vulnerabilities in service invocations before and after implicit service invocations were forbidden. The ISA framework consists of four major components: Preprocessor, Static Intent Analyzer, Reachability Verifier, and Vulnerable Service Invocation Analyzer.

- **Preprocessor**: Converts APK files into smali files to facilitate further analysis.
- **Static Intent Analyzer**: Processes smali files to identify all explicit and implicit intents used for invoking service components.
- **Reachability Verifier**: Filters out service invocations in dead code and provides a database of reachable service invocations.
- **Vulnerable Service Invocation Analyzer**: Identifies all vulnerable service invocations.

#### 3.1 Preprocessor
Android applications are packaged as APK files, which are ZIP-compressed files containing compiled bytecode and additional metadata such as `manifest.xml` and resource files. To reduce disassembly failures, we use the `android-apktool` to unpack the APK files and obtain the corresponding smali files and `manifest.xml`. Smali code contains almost all necessary information for data flow analysis, including function prototypes for tracing data flow across function boundaries.

#### 3.2 Static Intent Analyzer
We conduct a static data flow analysis on the smali files to discover all explicit and implicit intents used for invoking service components. The Static Intent Analyzer includes two modules: Intent Constructor Finder and Data Flow Analyzer.

- **Intent Constructor Finder**: Identifies methods where new intents are constructed and records them in an Intent Constructor Database.
- **Data Flow Analyzer**: Conducts a static data flow analysis to find all intents used to invoke services through `startService()` and `bindService()`, and records the intent values in an Intent Value Database.

##### 3.2.1 Intent Constructor Finder
This module finds all methods where new intents are constructed by searching for the intent construction code (e.g., `new-instance v*, Landroid/content/Intent;`) in the smali files.

##### 3.2.2 Data Flow Analyzer
The Data Flow Analyzer parses the methods in the Intent Constructor Database and records the intents for invoking services in the Intent Value Database. The process of intents can be divided into intra-method and inter-method intent processing.

**Intra-Method Intent Processing**: Focuses on obtaining intent attributes such as action, component name, package name, and class name. We construct a framework model focusing on Android classes and APIs that handle these attributes, such as `android.content.Intent`, `android.content.ComponentName`, `java.lang.Class`, `java.lang.String`, and `android.content.Context`.

**Inter-Method Intent Processing**: Handles the flow of intents across different methods, updating and storing intent values as they are processed and consumed.

The life cycle of an intent variable can be divided into three phases: creation, processing, and consumption. The list of APIs in Table 1 is categorized into intent creating functions, intent processing functions, and intent consuming functions.

- **Intent Creating Functions**: Include all constructor functions of the `Intent` class. When these functions are encountered, a new intent is stored in a temporary list (`TemporaryIntentList`).
- **Intent Processing Functions**: Include configuration functions to set intent attributes. When these functions are invoked, the attributes of the corresponding intent in `TemporaryIntentList` may be updated.
- **Intent Consuming Functions**: Include functions that consume an intent to start a service component. When these functions are encountered, the corresponding intent in `TemporaryIntentList` is stored in the Intent Value Database along with the invocation position.

By following this structured approach, the ISA framework effectively identifies and analyzes potential vulnerabilities in service invocations, enhancing the security of Android applications.