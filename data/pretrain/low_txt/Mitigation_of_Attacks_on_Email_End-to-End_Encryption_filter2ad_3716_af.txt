### References

1. **P. Arntz. 2014. The RTLO Method.**
   - URL: https://blog.malwarebytes.com/cybercrime/2014/01/the-rtlo-method/

2. **A. Barth. 2011. The Web Origin Concept.**
   - RFC6454: http://tools.ietf.org/rfc/rfc6454.txt

3. **Adam Barth and Dan Boneh. 2005. Correcting Privacy Violations in Blind-Carbon-Copy (BCC) Encrypted Email.**
   - URL: https://crypto.stanford.edu/portia/papers/bb-bcc.pdf

4. **Mihir Bellare and Chanathip Namprempre. 2008. Authenticated Encryption: Relations among Notions and Analysis of the Generic Composition Paradigm.**
   - Journal of Cryptology 21, 4 (Oct. 2008), 469–491.
   - DOI: https://doi.org/10.1007/s00145-008-9026-x

5. **H. Böck. 2018. Efail: HTML Mails have no Security Concept and are to Blame.**
   - URL: https://blog.hboeck.de/archives/894-Efail-HTML-Mails-have-no-Security-Concept-and-are-to-blame.html

6. **L. Cailleux and C. Bonatti. 2015. Securing Header Fields with S/MIME.**
   - RFC7508: http://tools.ietf.org/rfc/rfc7508.txt

7. **J. Callas, L. Donnerhacke, H. Finney, D. Shaw, and R. Thayer. 2007. OpenPGP Message Format.**
   - RFC4880: http://tools.ietf.org/rfc/rfc4880.txt

8. **D. Crocker. 1982. STANDARD FOR THE FORMAT OF ARPA INTERNET TEXT MESSAGES.**
   - RFC0822: http://tools.ietf.org/rfc/rfc0822.txt

9. **D. Crocker, T. Hansen, and M. Kucherawy. 2011. DomainKeys Identified Mail (DKIM) Signatures.**
   - RFC6376: http://tools.ietf.org/rfc/rfc6376.txt

10. **Don Davis. 2001. Defective Sign & Encrypt in S/MIME, PKCS#7, MOSS, PEM, PGP, and XML.**
    - In Proceedings of the General Track: 2001 USENIX Annual Technical Conference.
    - USENIX Association, Berkeley, CA, USA, 65–78.
    - URL: http://dl.acm.org/citation.cfm?id=647055.715781

11. **Donald Eastlake, Joseph Reagle, Frederick Hirsch, Thomas Roessler, Takeshi Imamura, Blair Dillaway, Ed Simon, Kelvin Yiu, and Magnus Nyström. 2012. XML Encryption Syntax and Processing 1.1.**
    - W3C Candidate Recommendation (2012).
    - URL: http://www.w3.org/TR/2012/WD-xmlenc-core1-20121018

12. **M. Elkins, D. Del Torto, R. Levien, and T. Roessler. 2001. MIME Security with OpenPGP.**
    - RFC3156: http://tools.ietf.org/rfc/rfc3156.txt

13. **N. Freed and N. Borenstein. 1996. Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies.**
    - RFC2045: http://tools.ietf.org/rfc/rfc2045.txt

14. **N. Freed and N. Borenstein. 1996. Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types.**
    - RFC2046: http://tools.ietf.org/rfc/rfc2046.txt

15. **Ann Fry, Sonia Chiasson, and Anil Somayaji. 2012. Not sealed but delivered: The (un) usability of S/MIME today.**
    - In Proceedings of the Annual Symposium on Information Assurance and Secure Knowledge Management.

16. **Simson L. Garfinkel and Robert C. Miller. 2005. Johnny 2: A User Test of Key Continuity Management with S/MIME and Outlook Express.**
    - In Proceedings of the 2005 Symposium on Usable Privacy and Security.
    - ACM, 13–24.

17. **Mario Heiderich, N. Krein, D. Weißer, F. Fäßler, N. Kobeissi, A. Inführ, Hong, and J. Magazinius. 2017. Pentest-Report Thunderbird & Enigmail.**
    - URL: https://cure53.de/pentest-report_thunderbird-enigmail.pdf

18. **R. Housley. 2009. Cryptographic Message Syntax (CMS).**
    - RFC5652: http://tools.ietf.org/rfc/rfc5652.txt

19. **International Organization for Standardization (ISO). 2008. ISO 32000-1:2008, Document Management – Portable Document Format – Part 1: PDF 1.7.**

20. **Tibor Jager, Kenneth G. Paterson, and Juraj Somorovsky. 2013. One Bad Apple: Backwards Compatibility Attacks on State-of-the-Art Cryptography.**
    - In Network and Distributed System Security Symposium (NDSS).

21. **Tibor Jager and Juraj Somorovsky. 2011. How To Break XML Encryption.**
    - In The 18th ACM Conference on Computer and Communications Security (CCS).

22. **Jonathan Katz and Bruce Schneier. 2000. A Chosen Ciphertext Attack Against Several e-Mail Encryption Protocols.**
    - In Proceedings of the 9th Conference on USENIX Security Symposium - Volume 9 (Denver, Colorado) (SSYM’00).
    - USENIX Association, Berkeley, CA, USA, 18–18.
    - URL: http://dl.acm.org/citation.cfm?id=1251306.1251324

23. **S. Kent and R. Atkinson. 1998. IP Encapsulating Security Payload (ESP).**
    - RFC2406: http://tools.ietf.org/rfc/rfc2406.txt

24. **Vlastimil Klíma and Tomás Rosa. 2002. Attack on Private Signature Keys of the OpenPGP format, PGP programs and other applications compatible with OpenPGP.**

25. **W. Koch, B. Carlson, R. Tse, D. Atkins, and D. Gillmor. 2019. OpenPGP Message Format draft-ietf-openpgp-rfc4880bis-08.**
    - URL: https://tools.ietf.org/html/draft-ietf-openpgp-rfc4880bis-08

26. **D. Levi and J. Schoenwaelder. 2001. Definitions of Managed Objects for the Delegation of Management Scripts.**
    - RFC3165: http://tools.ietf.org/rfc/rfc3165.txt

27. **Jonas Magazinius. 2015. OpenPGP SEIP Downgrade Attack.**
    - URL: http://www.metzdowd.com/pipermail/cryptography/2015-October/026685.html

28. **Serge Mister and Robert Zuccherato. 2005. An Attack on CFB Mode Encryption As Used By OpenPGP.**
    - Cryptology ePrint Archive, Report 2005/033.
    - URL: https://eprint.iacr.org/2005/033

29. **Jens Müller, Marcus Brinkmann, Damian Poddebniak, Hanno Böck, Sebastian Schinzel, Juraj Somorovsky, and Jörg Schwenk. 2019. “Johnny, you are fired!” – Spoofing OpenPGP and S/MIME Signatures in Emails.**
    - In 28th USENIX Security Symposium, USENIX Security 2019.

30. **Jens Müller, Fabian Ising, Vladislav Mladenov, Christian Mainka, Sebastian Schinzel, and Jörg Schwenk. 2019. Practical Decryption Exfiltration: Breaking PDF Encryption.**
    - In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security (London, United Kingdom) (CCS ’19).
    - ACM, New York, NY, USA, 15–29.
    - DOI: https://doi.org/10.1145/3319535.3354214

31. **Jens Müller, Marcus Brinkmann, Damian Poddebniak, Sebastian Schinzel, and Jörg Schwenk. 2019. Re: What’s Up Johnny? – Covert Content Attacks on Email End-to-End Encryption.**
    - URL: https://arxiv.org/ftp/arxiv/papers/1904/1904.07550.pdf

32. **Trevor Perrin. 2002. OpenPGP Security Analysis.**
    - URL: https://www.ietf.org/mail-archive/web/openpgp/current/msg02909.html

33. **Damian Poddebniak, Christian Dresen, Jens Müller, Fabian Ising, Sebastian Schinzel, Simon Friedberger, Juraj Somorovsky, and Jörg Schwenk. 2018. Efail: Breaking S/MIME and OpenPGP Email Encryption using Exfiltration Channels.**
    - In 27th USENIX Security Symposium, USENIX Security 2018, Baltimore, MD, USA, August 15-17, 2018.
    - USENIX Association, 549–566.
    - URL: https://www.usenix.org/conference/usenixsecurity18/presentation/poddebniak

34. **J. Postel. 1980. DoD Standard Transmission Control Protocol.**
    - RFC0761: http://tools.ietf.org/rfc/rfc0761.txt

35. **B. Ramsdell and S. Turner. 2010. Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2 Message Specification.**
    - RFC5751: http://tools.ietf.org/rfc/rfc5751.txt

36. **P. Resnick. 2001. Internet Message Format.**
    - RFC2822: http://tools.ietf.org/rfc/rfc2822.txt

37. **P. Resnick. 2008. Internet Message Format.**
    - RFC5322: http://tools.ietf.org/rfc/rfc5322.txt

38. **Phillip Rogaway. 2002. Authenticated-Encryption With Associated-Data.**
    - In ACM CCS 2002: 9th Conference on Computer and Communications Security.
    - ACM Press, Washington, DC, USA, 98–107.
    - DOI: https://doi.org/10.1145/586110.586125

39. **Scott Ruoti, Jeff Andersen, Luke Dickinson, Scott Heidbrink, Tyler Monson, Mark O’Neill, Ken Reese, Brad Spendlove, Elham Vaziripour, Justin Wu, et al. 2019. A Usability Study of Four Secure Email Tools Using Paired Participants.**
    - ACM Transactions on Privacy and Security (TOPS) 22, 2 (2019), 1–33.

40. **Scott Ruoti, Jeff Andersen, Scott Heidbrink, Mark O’Neill, Elham Vaziripour, Justin Wu, Daniel Zappala, and Kent E. Seamons. 2015. Johnny and Jane: Analyzing Secure Email Using Two Novice Users.**
    - CoRR abs/1510.08554 (2015).
    - arXiv:1510.08554
    - URL: http://arxiv.org/abs/1510.08554

41. **J. Schaad, B. Ramsdell, and S. Turner. 2019. Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 4.0 Message Specification.**
    - RFC8551: https://tools.ietf.org/html/rfc8551

42. **S. Sheng, L. Broderick, J. Hyland, and C. Koranda. 2006. Why Johnny Still Can’t Encrypt: Evaluating the Usability of Email Encryption Software.**
    - In Proceedings of the 6th Symposium on Usable Privacy and Security (SOUPS ’06).

43. **Juraj Somorovsky and Jörg Schwenk. 2012. Technical Analysis of Countermeasures against Attacks on XML Encryption – or – Just Another Motivation for Authenticated Encryption.**
    - In SERVICES Workshop on Security and Privacy Engineering.

44. **United Nations Educational, Scientific and Cultural Organization (UNESCO) and Reporters Without Borders. 2016. Safety Guide for Journalists – a Handbook for Reporters in High-Risk Environments.**
    - CreateSpace Independent Publishing Platform.

45. **Alma Whitten and J. Doug Tygar. [n.d.]. Why Johnny Can’t Encrypt: A Usability Evaluation of PGP 5.0.**

46. **Alma Whitten and J. D. Tygar. 1999. Why Johnny Can’t Encrypt: A Usability Evaluation of PGP 5.0.**
    - In Proceedings of the 8th Conference on USENIX Security Symposium - Volume 8 (Washington, D.C.) (SSYM’99).
    - USENIX Association, Berkeley, CA, USA, 14–14.
    - URL: http://dl.acm.org/citation.cfm?id=1251421.1251435

### Background on MIME, S/MIME, and PGP/MIME

#### Multipurpose Internet Mail Extensions (MIME)

In 1996, the original ASCII-based email data format from RFC 822 was extended by a series of five RFCs to improve support for non-ASCII and binary data in emails and to allow the definition of complex data structures within each RFC 822 email body. The two most important innovations were:

1. **Development of a Classification Scheme for Internet Data Formats:** The so-called MIME types, which are used beyond email, for example, in the HTTP protocol.
2. **Introduction of Standardized Encoding Schemes for Non-ASCII Data.**

The MIME types introduced in RFC 2046 can be roughly classified into two groups:

- **MIME types defining existing data formats** (e.g., `image/jpeg` or `text/html`).
- **MIME types for structuring data** (e.g., `multipart/*`).

With the help of the latter, the body of an email can have a tree-based data structure, where the leaves have MIME types of existing data formats, and the intermediate nodes are of MIME type `multipart/*`. MIME does not completely respect the RFC 822 empty-line boundary between mail header and body, as the newly defined MIME headers in the RFC 822 header (e.g., `Content-Type`) belong to the root of the MIME tree.

MIME trees may be embedded as subtrees in another tree (e.g., when forwarding a message), and leaves may be truncated (e.g., when removing an attachment). MIME processing tries to preserve at least the partial structure of a tree, and this is also reflected in the crypto-related standards S/MIME and PGP/MIME.

#### S/MIME

In S/MIME, all cryptographic data formats are enveloped in CMS/PKCS#7. CMS itself is an ASN.1-based structured data format that may contain arbitrarily nested data formats. In practical applications like email, this nesting must be limited. Typical combinations include encrypted or signed-then-encrypted data (wrapped into an `EnvelopedData` CMS object) or encrypted-then-signed data (wrapped into a `SignedData` object).

Additionally, a `SignedData` object may not contain the signed data itself; instead, the signed data is wrapped into the first subtree of a `multipart/signed` data element, where the second leaf is the `SignedData` object. All CMS objects have MIME type `application/pkcs7-mime` and are distinguished by different values of the `smime-type` attribute.

When a signed email is forwarded, the MUA (Mail User Agent) may preserve the structure of the original MIME tree by including the signature in the forwarded message. Although this may pose some display problems in the receiving MUA, this behavior makes sense since the signature can still be verified.

For encrypted emails, the same behavior is never used and only leads to problems. If an `EnvelopedData` CMS object is forwarded to a new recipient, they will not be able to decrypt it if their email certificate is not included in a `SignerInfo` object. The only reasonable way to forward encrypted text is to first decrypt it and then re-encrypt it for the new recipients.

The same holds for reply actions, where typically some new text or file is added to the reply mail. Since this new content needs to be encrypted, the only reasonable procedure is to decrypt the original email, paste the cleartext into the reply as a citation, and re-encrypt the whole mail body.

Nevertheless, the S/MIME standard specifies decryption to be structure-preserving. So, an email with a highly suspicious structure, such as the one in Figure 6, will be decrypted in a structure-preserving way: The middle leaf of the MIME tree, of content type `application/pkcs7-mime`, will be extracted and decrypted, and replaced by the cleartext MIME element of type `text/html`.

#### PGP/MIME

In PGP/MIME, all cryptographic data formats are enveloped in OpenPGP. For digital signatures, PGP/MIME reuses the binary `multipart/signed` MIME type from S/MIME, but now the second leaf is of type `application/pgp-signature`.

In contrast to S/MIME, the PGP/MIME element for encrypted data is also binary. It has type `multipart/encrypted` and has two leaves:

- The first leaf has type `application/pgp-encrypted` and contains a static string `Version: 1`, indicating the PGP/MIME version.
- The second leaf contains the OpenPGP encrypted data object and has MIME type `application/octet-stream`.

Since PGP/MIME is also an embedding into the MIME standard, the same structure-preserving processing of signed and encrypted data formats is enforced by the MUA or by OpenPGP plugins to the MUA (e.g., Enigmail) which are called whenever the MUA encounters a PGP/MIME type element.

### EFAIL-DE Attacks

EFAIL-DE attacks are independent of the chosen encryption mode and cannot be mitigated by using AEAD ciphers. Although public discussion centered around the idea that "HTML should not be used in emails," the main cause for EFAIL-DE attacks is that the S/MIME standard mandates that an email client must be able to process encrypted data regardless of its position in the MIME tree:

> "An S/MIME implementation MUST be able to receive and process arbitrarily nested S/MIME within reasonable resource limits of the recipient computer." [RFC 8551, Section 3.7]

This mandatory behavior is illustrated in Figure 6. Some currently implemented countermeasures clearly violate the standard, for example, by blocking certain types of nested content.