### Number of Third-Party Applications

In this paper, we focus on the Android framework and common applications that are pre-loaded in every Android distribution (e.g., Contacts, Calendar, Messaging, etc.). These built-in applications are also frequently used by third-party applications to implement common functionalities. Therefore, a rigorous evaluation of these pre-installed applications is of paramount importance.

In the Android namespace hierarchy, these applications share the package name prefix `com.android`. After filtering components with this prefix, we identified 398 components (297 Activities, 42 Services, and 59 Broadcast Receivers) in Droid and 455 components (332 Activities, 54 Services, and 69 Broadcast Receivers) in the Emulator.

In addition to built-in applications, we tested five of the most popular (as of December 3, 2011) free apps from the Android Marketplace (now known as Google Play). These apps—Facebook, Pandora Radio, Voxer Walkie Talkie, Angry Birds, and Skype—had a total of 103 Activities and 11 Service components. Despite the small sample size of Marketplace apps, the large number of Activities (103 compared to 294 in Droid) provided a realistic comparison of their robustness with that of Android. Our experiments involved subjecting all these (Android and Marketplace) components to a flow of Intents from JarJarBinks over a seven-day period. The following section presents our findings.

### IV. Experimental Results

During our experiments, more than six million Intents were sent to over 800 components across three versions of Android. We define an experiment as follows: select a specific component and inject all Intents targeted to that component. The injection is performed according to Fault Injection Campaigns (FICs), where, for example, if we are conducting FIC A, the `<action>` and `<category>` pairs are changed to semi-valid values.

We collected execution logs from the mobile phones and emulators using `logcat`, a logging application in the Android platform tools. This generated over 3GB of log data, which was later analyzed to gather information about failures and their root causes. We define a crash as a user-visible failure, such as a system alert displaying "Force Close" (in Android 2.2) or "Application X stopped unexpectedly" (in Android 4.0). These failure messages appear in the log files as a log entry stating "FATAL EXCEPTION: main," which indicates uncaught exceptions thrown by the Android runtime.

It is important to note that sending or receiving certain Intents (e.g., those with "content:" URIs in the Data field) in Android is protected by permissions. When JarJarBinks sends these Intents, `SecurityExceptions` are generated, but JJB handles these exceptions gracefully, and we discard them from our results. At present, we focus on crash failures rather than thread hangs due to their visibility and negative user experience.

Our results are discussed from three perspectives:
1. Prevalence of crashes caused by fuzzed Intents for various types of components and different fault injection campaigns.
2. Distribution of uncaught exceptions thrown by components in response to fuzzed Intents.
3. Error propagation from a user-level application to the Android framework.

In general, Android 2.2 displayed many more crashes than Android 4.0, and components in all versions were vulnerable to `NullPointerExceptions`. It was possible to crash some components by sending them an implicit Intent that matched exactly with their Intent-filter (i.e., only the mandatory fields were specified).

In Android 2.2, three of the application crashes caused cascading failures, eventually restarting the Android runtime. The Android Emulator also showed signs of stress-related failures, where the `system_server` (the framework component that coordinates interaction between Kernel space and user space) periodically restarted after testing a fixed number of components. The `system_server` is a key part of the Android environment, running essential services such as Power Manager, Device Policy, Search Service, Audio Service, Dock Observer, etc. A crash of the `system_server` kills all user-level applications and services and restarts the Android runtime.

Below, we present our experimental results organized into three discussions.

#### A. Results for Explicit Intents

In Section III-B2, we described how we generated explicit Intents for four different fault injection campaigns. In FIC A, we sent an invalid `<action>` and `<category>` pair to components; in FIC B, we sent an Intent with either Action or Data blank; in FIC C, random bytes were assigned to either Action or Data; and finally, in FIC D, random bytes were assigned to Extras values. During our experiments, we found a large number of crashes: 2148 in Android 2.2, 641 in Android 4.0, and 152 for Marketplace apps. One might argue that comparing Android 2.2 on a real phone with Android 4.0 on an emulator compromises the validity of our results. To verify this, we conducted a smaller-scale test of Android 2.2 on both an emulator and a Droid device and did not find any major differences. Our choice of Android 4.0 on an emulator was driven by the lack of a physical device. Even if the absolute numbers of crashes change when using a physical device, it does not invalidate the general trends described in our results. Below, we present an analysis of the observed crashes.

1. **Distribution of Failed Components**:
   We define a failed component as one that crashes at least once during a fuzz injection campaign. Due to the nature of our Intent generation, a component may fail repeatedly in one experiment, e.g., an activity that dereferences the Data field without a null check will crash for all Intents with a blank Data field. Counting such repeated crashes can mask the actual number of faults in the source code. For a fault injection campaign like ours, a better metric of a framework's reliability can be obtained by determining the number of failed components. Table I presents the number of failed components for various types (Activities, Broadcast Receivers, and Services) in each of our experiments. The number at the top, under the component type, represents the total number of components of that type, e.g., Android 2.2 has 297 Activities. The number in the "crash" column denotes the number of components that crashed.

   | Component Type | Total | #crash (A) | #crash (B) | #crash (C) | #crash (D) |
   |----------------|-------|------------|------------|------------|------------|
   | Activities     | 297   | 30         | 21         | 18         | 13         |
   | Services       | 42    | 1          | 1          | 1          | 1          |
   | Broadcast Receivers | 59 | 29         | 8          | 9          | 7          |

   It is encouraging to see that, in all cases but two, the percentage of failed components is less than 10%. The percentage of failed components in Android 4.0 is generally lower than in Android 2.2, with the exception of Services. Across experiments, Activities display a higher fraction of failed components in FIC A than in the other campaigns. However, this may also be due to the fact that FIC A sends nearly twice as many Intents as FICs B, C, and D combined. The high count of failed components across component types in FIC B is another key finding, indicating that many Android components do not perform null checks before dereferencing a field from an Intent, making them vulnerable to blank fields. This is verified by our data in the next section.

   The failure percentages of Marketplace apps are nearly identical to those of Android 4.0 components, with the exception of FIC A for Activities and Services, where Marketplace apps are significantly more robust. However, it was observed that three of the apps had at least one component that failed one or more experiments. Although our sample size for Marketplace apps (five) is too small to make general claims about the robustness of third-party apps, we expected the Top 5 to be more robust as they come from reputable vendors. This intuition is only partially supported by the analysis results.

2. **Distribution of Exception Types**:
   To understand how well the Android framework handles exceptional conditions, we measured the distribution of exception types from failure logs. We focused on uncaught exceptions because they result in crashes. Since we are interested in measuring what percentage of all crashes are constituted by a given exception type, we counted each crash individually. If, in one experiment, 100 fuzzed Intents are sent to a component and the component crashes 20 times, we would have 20 data points. As shown in Figure 3, `NullPointerExceptions` (NPEs) make up the largest share of all exceptions. Although the percentage of NPEs in Android 4.0 (36.50%) has improved since Android 2.2 (45.99%), this is still significant and aligns with our findings in Section IV-A1. The results are given in terms of the percentage of all exceptions, so for a given Android version, all exception numbers should sum to 100%.

   Other exceptions, such as `ClassNotFoundException` and `IllegalArgumentException`, are significantly lower in Android 4.0 than in its previous version. Although exception types are sensitive to input data, we applied similar inputs to the two different versions of Android, making our comparisons valid.

   ![Figure 3: Distribution of Different Types of Uncaught Exceptions in Android 2.2 and 4.0](figure_3.png)

   **Summary of Component Crashes in Different Versions of Android in Response to Fuzzed Intents in Four Different Injection Campaigns:**

   | Component Type | Total | #crash (A) | #crash (B) | #crash (C) | #crash (D) |
   |----------------|-------|------------|------------|------------|------------|
   | Activities (Droid, Android 2.2) | 297 | 30 | 21 | 18 | 13 |
   | Services (Droid, Android 2.2) | 42 | 1 | 1 | 1 | 1 |
   | Broadcast Receivers (Droid, Android 2.2) | 59 | 29 | 8 | 9 | 7 |
   | Activities (Emulator, Android 4.0) | 332 | 2 | 6 | 4 | 1 |
   | Services (Emulator, Android 4.0) | 54 | 3 | 3 | 3 | 3 |
   | Broadcast Receivers (Emulator, Android 4.0) | 69 | 2 | 6 | 2 | 0 |
   | Activities (Marketplace Apps, Droid, Android 2.2) | 103 | 10 | 4 | 2 | 2 |
   | Services (Marketplace Apps, Droid, Android 2.2) | 11 | 1 | 2 | 2 | 3 |

   Here, one component crashing one or more times in response to one or more malformed Intents directed at it counts as one crash.