### Reciprocity in Peer-to-Peer Networks

Reciprocity among neighbors is a common mechanism to encourage resource contribution in several deployed peer-to-peer (P2P) networks [15, 16, 17]. These systems vary in how they allocate resources among cooperative neighbors, but all provide a higher level of service to contributors than to non-contributors. Hash trees [24] are precomputed and used to verify each block of data received, making these networks suitable only for distributing static files.

### Incentive Mechanisms

**SLIC [25]** is an incentive mechanism for message forwarding in P2P search overlays. The level of service from a neighbor is measured by the number of search results it returns. However, without a method to verify results, there is an incentive to return a large number of false results. In contrast, the U-ACK protocol makes it easy to detect false acknowledgments.

**SHARP [26]** is a general framework for P2P resource trading, using digitally signed 'tickets' to reserve and claim resources such as storage, bandwidth, and computation. Claims can be delegated, allowing peers to trade resources with peers more than one hop away. However, the identities of all peers in the delegation chain must be visible to validate the claim, making SHARP unsuitable for untrusted environments and unlinkable communication.

### Authenticated Acknowledgements

**2HARP [2]** is a routing protocol for ad hoc wireless networks where each node that receives a packet sends an acknowledgment to the previous two nodes, allowing each node to verify that its downstream neighbor forwarded the packet. Each node has a public/private key pair for signing acknowledgments, which must be certified by a central authority to prevent nodes from generating extra key pairs and creating false acknowledgments. This requirement makes 2HARP unsuitable for open membership networks.

**IPSec [27]** uses message authentication codes (MACs) for end-to-end authentication at the network layer, enabling the authentication of transport-layer acknowledgments and data. However, MACs can only be verified by the endpoints, not by third parties such as relays.

**TLS [28]** uses MACs at the transport layer, but TCP headers are not authenticated, allowing relays to forge TCP acknowledgments. As with IPSec, the MACs used by TLS cannot be verified by relays.

Some robust routing protocols for ad hoc networks use MACs to acknowledge messages and detect faulty links and nodes [29, 30]. This requires a trusted certificate authority for key distribution, ruling out unlinkability.

### Authentication Using One-Way Functions

Gennaro and Rohatgi [31] describe two methods for authenticating streams using one-way functions:

1. **One-Time Signatures [32, 33]**: Each block of the stream contains a public key and is signed with the private key corresponding to the public key in the previous block. The first block carries a conventional asymmetric signature. One-time signatures are large, leading to significant bandwidth overhead. The computational cost of verifying a one-time signature is comparable to that of an asymmetric signature, although signing is more efficient.

2. **Chained Hashes**: Each block contains the hash of the next block, and the first block carries an asymmetric signature. The entire stream must be known to the originator before the first block is sent. This scheme is similar to the use of hash trees in file-sharing networks.

The Guy Fawkes protocol [34] also uses chained hashes. The originator does not need to know the entire stream in advance, but each block must be known before the previous block is sent. Each block carries a preimage and a hash to verify the previous block and a hash that commits to the contents of the next block. The first block carries a conventional signature.

Several ad hoc routing protocols use hash chains to reduce the number of asymmetric signature operations [35, 36, 37, 38]. Others use delayed disclosure, where a hash and its preimage are sent by the same party at different times, requiring loose clock synchronization [36, 39, 40]. In our protocol, the preimage is not sent until the hash is received, eliminating the need for clock synchronization.

The schemes described above use similar techniques to the protocol in this paper, but their aims differ. While the aim of a signature scheme is to associate messages with an originator, our protocol's aim is to associate an acknowledgment with a message without identifying the originator or destination. The signature schemes mentioned require an initial asymmetric signature to identify the originator, whereas the U-ACK protocol does not require asymmetric cryptography.

### Conclusion and Future Work

We have described the U-ACK protocol, which enables nodes in a network to measure the dependability of their neighbors in forwarding messages using unforgeable acknowledgments (U-ACKs). The protocol does not require trust between all nodes; only the originator and destination need to verify each other's identities. The acknowledgments created by the protocol are unforgeable and can be verified by untrusted third parties. The protocol has broad applicability, operating at the network layer or in a P2P overlay, and does not require relays to establish a security association with the endpoints or be aware of higher-layer protocol details. It can be seen as a building block for dependable communication systems, allowing nodes to measure the level of service received from their neighbors using an application-specific dependability metric (ASDM) based on the messages sent and the U-ACKs received.

We are currently investigating specific properties of the protocol when used in P2P systems, such as the dynamics of resource usage with a mix of free riders, altruists, and reciprocators. These investigations will explore the sensitivity of the U-ACK scheme to various parameters, such as the size and structure of the network and the proportion of free riders.

The U-ACK scheme could also be applicable to systems that need to be robust to Byzantine failures, such as applications for safety-critical systems, civil defense, and military use.

### References

[1] R. Perlman. Network layer protocols with Byzantine robustness. PhD Thesis, Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, August 1988.
[2] P.W. Yau and C.J. Mitchell. 2HARP: A secure routing protocol to detect failed and selfish nodes in mobile ad hoc networks. In Proc. 5th World Wireless Congress, San Francisco, CA, USA, pages 1–6, 2004.
[3] D. Quercia, M. Lad, S. Hailes, L. Capra, and S. Bhatti. STRUDEL: Supporting trust in the dynamic establishment of peering coalitions. In Proc. 21st Annual ACM Symposium on Applied Computing (SAC2006), Bourgogne University, Dijon, France, 23-27 April 2006.
[4] T.W. Ngan, D.S. Wallach, and P. Druschel. Enforcing fair sharing of peer-to-peer resources. In F. Kaashoek and I. Stoica, editors, Proc. 2nd International Workshop on Peer-to-Peer Systems (IPTPS ’03), Berkeley, CA, USA, February 2003, volume 2735 of Lecture Notes in Computer Science, pages 149–159. Springer, 2003.
[5] M. Ham and G. Agha. ARA: A robust audit to prevent free-riding in P2P networks. In 5th IEEE International Conference on Peer-to-Peer Computing, Konstanz, Germany, August-September 2005.
[6] S. Buchegger and J.Y. Le Boudec. A robust reputation system for P2P and mobile ad hoc networks. In 2nd Workshop on Economics of Peer-to-Peer Systems, Cambridge, MA, USA, June 2004.
[7] L. Anderegg and S. Eidenbenz. Ad hoc VCG: A truthful and cost-efficient routing protocol for mobile ad hoc networks with selfish agents. In ACM Mobicom, 2003.
[8] P. Druschel and A. Rowstron. PAST: A large-scale, persistent peer-to-peer storage utility. In 8th Workshop on Hot Topics in Operating Systems, Elmau, Germany, May 2001.
[9] A. Adya, W.J. Bolosky, M. Castro, G. Cermak, R. Chaiken, J.R. Douceur, J. Howell, J.R. Lorch, M. Theimer, and R.P. Wattenhofer. FARSITE: Federated, available, and reliable storage for an incompletely trusted environment. In Proc. 5th USENIX Symposium on Operating Systems Design and Implementation, Boston, MA, USA, pages 1–14, December 2002.
[10] M. Rogers and S. Bhatti. Cooperation in decentralized networks. In London Communications Symposium, London, UK, September 2005.
[22] K. Ostrowski, K. Birman, and A. Phanishayee. Quicksilver scalable multicast. Technical Report TR2006-2063, Cornell University, April 2006.
[11] J.R. Douceur. The Sybil attack. In P. Druschel, F. Kaashoek, and A. Rowstron, editors, Proc. 1st International Workshop on Peer-to-Peer Systems (IPTPS ’02), Cambridge, MA, USA, March 2002, volume 2429 of Lecture Notes in Computer Science, pages 251–260. Springer, 2002.
[12] J.H. Saltzer, D.P. Reed, and D.D. Clark. End-to-end arguments in system design. ACM Transactions on Computer Systems, 2(4):277–288, November 1984.
[13] X. Wang, D. Feng, X. Lai, and H. Yu. Collisions for hash functions MD4, MD5, HAVAL-128 and RIPEMD, 2004. Cryptology ePrint 2004/199, available from http://eprint.iacr.org/2004/199.pdf.
[14] X. Wang, Y.L. Yin, and H. Yu. Finding collisions in the full SHA-1. In 25th Annual International Cryptology Conference, Santa Barbara, CA, USA, August 2005.
[15] C. Grothoff. An excess-based economic model for resource allocation in peer-to-peer networks. Wirtschaftsinformatik, 45(3):285–292, June 2003.
[16] B. Cohen. Incentives build robustness in BitTorrent. In Workshop on Economics of Peer-to-Peer Systems, Berkeley, CA, USA, June 2003.
[17] Y. Kulbak and D. Bickson. The eMule protocol specification. Technical report, School of Computer Science and Engineering, Hebrew University of Jerusalem, January 2005.
[18] P. Gauthier, B. Bershad, and S.D. Gribble. Dealing with cheaters in anonymous peer-to-peer networks. Technical Report 04-01-03, University of Washington, January 2004.
[19] D. Goldschlag, M. Reed, and P. Syverson. Onion routing for anonymous and private internet connections. Communications of the ACM, 42(2):39–41, February 1999.
[20] The IETF Reliable Multicast Transport (RMT) Working Group. http://www.ietf.org/html.charters/rmt-charter.html
[21] K. Birman, M. Hayden, O. Ozkasap, Z. Xiao, M. Budiu, and Y. Minsky. Bimodal multicast. ACM Transactions on Computer Systems, 17(2):41–88, May 1999.
[23] S. Rafaeli and D. Hutchison. A survey of key management for secure group communication. ACM Computing Surveys, 35(3):309–329, September 2003.
[24] R. Merkle. Protocols for public key cryptosystems. In IEEE Symposium on Security and Privacy, Oakland, CA, USA, April 1980.
[25] Q. Sun and H. Garcia-Molina. SLIC: A selfish link-based incentive mechanism for unstructured peer-to-peer networks. In 24th International Conference on Distributed Computing Systems, 2004.
[26] Y. Fu, J. Chase, B. Chun, S. Schwab, and A. Vahdat. SHARP: An architecture for secure resource peering. In 19th ACM Symposium on Operating Systems Principles, Bolton Landing, NY, USA, October 2003.
[27] S. Kent and R. Atkinson. RFC 2401: Security architecture for the internet protocol, November 1998.
[28] T. Dierks and C. Allen. RFC 2246: The TLS protocol, January 1999.
[29] B. Awerbuch, D. Holmer, C. Nita-Rotaru, and H. Rubens. An on-demand secure routing protocol resilient to Byzantine failures. In Proc. ACM Workshop on Wireless Security (WiSe’02), Atlanta, GA, USA, pages 21–30, September 2002.
[30] I. Avramopoulos, H. Kobayashi, R. Wang, and A. Krishnamurthy. Highly secure and efficient routing. In IEEE Infocom, Hong Kong, March 2004.
[31] R. Gennaro and P. Rohatgi. How to sign digital streams. In B.S.J. Kaliski, editor, Proc. 17th Annual Cryptology Conference (CRYPTO ’97), Santa Barbara, CA, USA, August 1997, volume 1294 of Lecture Notes in Computer Science, pages 180–197. Springer, 1997.
[32] L. Lamport. Constructing digital signatures from a one-way function. Technical Report CSL-98, SRI International, Palo Alto, CA, USA, 1979.
[33] R. Merkle. A digital signature based on a conventional encryption function. In C. Pomerance, editor, Proc. Conference on the Theory and Applications of Cryptographic Techniques (CRYPTO ’87), Santa Barbara, CA, USA, August 1987, volume 293 of Lecture Notes in Computer Science. Springer, 1988.
[34] R.J. Anderson, F. Bergadano, B. Crispo, J.H. Lee, C. Manifavas, and R.M. Needham. A new family of authentication protocols. Operating Systems Review, 32(4):9–20, October 1998.
[35] R. Hauser, T. Przygienda, and G. Tsudik. Reducing the cost of security in link-state routing. In ISOC Symposium on Network and Distributed System Security, San Diego, CA, USA, February 1997.
[36] S. Cheung. An efficient message authentication scheme for link state routing. In Proc. 13th Annual Computer Security Applications Conference (ACSAC ’97), San Diego, CA, USA, pages 90–98, December 1997.
[37] M.G. Zapata and N. Asokan. Securing ad hoc routing protocols. In Proc. ACM Workshop on Wireless Security (WiSe’02), Atlanta, GA, USA, pages 1–10, September 2002.
[38] Y.C. Hu, D.B. Johnson, and A. Perrig. SEAD: Secure efficient distance vector routing for mobile wireless ad hoc networks. In 4th IEEE Workshop on Mobile Computing Systems and Applications (WMCSA ’02), June 2002.
[39] A. Perrig, R. Canneti, J.D. Tygar, and D. Song. The TESLA broadcast authentication protocol. CryptoBytes, 5(2):2–13, 2002.
[40] Y.C. Hu, A. Perrig, and D.B. Johnson. Ariadne: A secure on-demand routing protocol for ad hoc networks. In 8th International Conference on Mobile Computing and Networking (MobiCom), September 2002.