### 文献引用

[52] K. Lu and H. Hu, “Where does it go? refining indirect-call targets with multi-layer type analysis,” in *Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security*, 2019, pp. 1867–1881.

[53] T. Zhang, W. Shen, D. Lee, C. Jung, A. M. Azab, and R. Wang, “Pex: A permission check analysis framework for Linux kernel,” in *Proceedings of the 28th USENIX Security Symposium (USENIX Security)*, 2019.

[54] A. Machiry, C. Spensky, J. Corina, N. Stephens, C. Kruegel, and G. Vigna, “Dr.checker: A soundy analysis for Linux kernel drivers,” in *Proceedings of the 26th USENIX Security Symposium (USENIX Security)*, 2017.

[55] D. Song, F. Hetzelt, J. Kim, B. B. Kang, J.-P. Seifert, and M. Franz, “Agamotto: Accelerating kernel driver fuzzing with lightweight virtual machine checkpoints,” in *29th USENIX Security Symposium (USENIX Security 20)*, 2020, pp. 2541–2557.

[56] G. Hernandez, F. Fowze, D. Tian, T. Yavuz, and K. R. Butler, “Firmusb: Vetting USB device firmware using domain-informed symbolic execution,” in *Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security*, 2017, pp. 2245–2262.

[57] D. Song, F. Hetzelt, D. Das, C. Spensky, Y. Na, S. Volckaert, G. Vigna, C. Kruegel, J.-P. Seifert, and M. Franz, “Periscope: An effective probing and fuzzing framework for the hardware-OS boundary,” in *Proceedings of the 2019 Annual Network and Distributed System Security Symposium (NDSS)*, San Diego, CA, Feb. 2019.

[58] S. Kim, M. Xu, S. Kashyap, J. Yoon, W. Xu, and T. Kim, “Finding semantic bugs in file systems with an extensible fuzzing framework,” in *Proceedings of the 27th ACM Symposium on Operating Systems Principles (SOSP)*, 2019.

[59] E. B. Yi, H. Zhang, K. Xu, A. Maji, and S. Bagchi, “Vulcan: Lessons in reliability of Wear OS ecosystem through state-aware fuzzing,” in *Proceedings of the 18th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys)*, 2020.

[60] H. Gascon, C. Wressnegger, F. Yamaguchi, D. Arp, and K. Rieck, “Pulsar: Stateful black-box fuzzing of proprietary network protocols,” in *Proceedings of the International Conference on Security and Privacy in Communication Systems (SecureComm)*, Springer, 2015, pp. 330–347.

[61] R. Ma, T. Zhu, C. Hu, C. Shan, and X. Zhao, “Sulleyex: A fuzzer for stateful network protocol,” in *Proceedings of the International Conference on Network and System Security (NSS)*, Springer, 2017, pp. 359–372.

[62] J. De Ruiter and E. Poll, “Protocol state fuzzing of TLS implementations,” in *24th USENIX Security Symposium (USENIX Security 15)*, 2015, pp. 193–206.

[63] C. Aschermann, S. Schumilo, A. Abbasi, and T. Holz, “Ijon: Exploring deep state spaces via fuzzing,” in *2020 IEEE Symposium on Security and Privacy (SP)*, 2020.

[64] Y. Chen and X. Xing, “Slake: Facilitating slab manipulation for exploiting vulnerabilities in the Linux kernel,” in *Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security*, 2019, pp. 1707–1722.

[65] W. Wu, Y. Chen, J. Xu, X. Xing, X. Gong, and W. Zou, “FUZE: Towards facilitating exploit generation for kernel use-after-free vulnerabilities,” in *27th USENIX Security Symposium (USENIX Security 18)*, 2018, pp. 781–797.

### 附录A：漏洞发现效率

在本节中，我们评估了FUZZUSB在漏洞发现方面的有效性。我们进行了以下两个实验：
1. 测量FUZZUSB在有限时间内识别的漏洞数量；
2. 测量识别已知CVE漏洞所需的时间。

在进行每个实验时，我们也运行其他模糊测试工具以比较检测时间。

首先，我们检查FUZZUSB在有限时间内能发现多少漏洞。使用Linux-5.5内核版本，我们运行FUZZUSB和其他两个模糊测试工具共50小时。通过去除重复崩溃（使用syzkaller的崩溃哈希功能），我们记录了三个运行时间点的独特漏洞数量，并获得了平均结果，如图12b所示。

与FuzzUSB-SL和G-fuzzer相比，FUZZUSB不仅发现了更多的漏洞（约40个），而且更快地找到了第一个漏洞。根据G-fuzzer和FuzzUSB-SL在50小时内检测到的总漏洞数量，FUZZUSB在1小时和10小时后分别显示了相同的漏洞发现能力。

我们还进行了基于已知CVE的额外实验，以测量检测所需的时间。具体来说，我们运行FUZZUSB来检测CVE-2019-14763和CVE-2018-20961。表VIII总结了该实验的结果。FUZZUSB比FuzzUSB-SL更快地发现了这两个漏洞。此外，我们注意到G-fuzzer无法找到这两个漏洞中的任何一个，因为它缺乏多通道模糊测试的能力，无法深入到设备代码中。

总之，在漏洞发现效率方面，FUZZUSB比代码覆盖率模糊测试工具G-fuzzer表现好50倍，并且比FuzzUSB-SL高5倍。

### 附录B：构建状态机的开销

在本节中，我们检查了状态机的构建过程。表IX总结了我们的状态机构建结果。表中第三列表示每个设备的状态和转换数量，最后三列表示分析构建状态机所需的时间。构建状态机的平均开销为15.93秒，包括静态分析、符号执行和状态合并。

我们观察到mass_storage设备比其他设备有更多的转换，因为它需要完全处理通过USB通道的分层通信协议（例如SCSI）。为了处理所有协议命令，我们利用从符号执行中获得的相应转换输入，这增加了总的转换数量。因此，为了完全处理每个命令，mass_storage包含大量功能和大代码库。因此，为这个设备驱动程序构建状态机需要更多时间。相比之下，loopback设备提供了更简单的功能——它从Ch3接收消息并通过该通道发送回去，导致状态数量较少。

### 附录C：额外案例研究

#### A. 拒绝服务攻击

除了§C-B部分，我们还展示了另一个利用示例。在图18中，有缺陷的函数hidg_set_alt尝试重置连接。对于新的连接，该函数分配了一个内核对象req_in来保存来自主机的数据（第7行）。由于req_in的赋值远离其初始分配位置（第7行），在这段时间窗口内，如果意外断开函数hidg_disable使in_ep实例为空（第21行），则对象可能会泄露。图19概述了相应的PoC代码。PoC的目的是实现Ch2和Ch1之间的竞争条件，希望触发上述内存泄漏的条件。通过两个独立的线程，我们广泛地从Ch1和Ch2两个通道输入数据，以同时触发重新连接和断开连接。运行exploit代码10小时后，我们观察到内核内存空间被填满（由于频繁的内存泄漏），导致拒绝服务（DoS）。这种DoS攻击在提供云系统服务时非常重要。注意，FUZZUSB不仅通过我们的多通道变异提高了揭示此类漏洞的能力，还通过提供多通道输入分发的基础架构促进了exploit生成，这是现有USB模糊测试工具难以做到的。

#### B. 控制流攻击

为了展示我们的发现的严重性，我们展示了对图9中存在缺陷的HID设备的任意代码执行。参考针对use-after-free漏洞的攻击场景[64, 65]，我们成功地转移了HID驱动程序的控制流，并实现了非法代码执行。exploit通过重新分配已释放的内存（即hidg在第16行）并将一个被篡改的值放入hidg中的函数指针，当HID驱动程序访问其悬空指针时，导致非法控制流转移。这个例子是完全可以利用的，因为易受攻击的对象hidg包含丰富的函数和数据指针（例如unbind），攻击者可以通过系统调用（例如sendmsg）将它们填充为用户提供的数据。

成功的利用是具有挑战性的，因为它需要在易受攻击的对象（例如hidg）被释放和悬空指针访问之间很短的时间窗口内重新分配内存区域。然而，在这个例子中，攻击者可以轻松操纵这个时间窗口，因为悬空指针的发生和解引用可以通过系统调用（例如close()和read()）来控制。PoC允许攻击者控制设备，转移其控制流。