### Preventing Unauthorized Access to Encrypted CA Information

When encrypted CA (Client Application) information is stored in Normal World storage, such as an internal flash drive, the Normal World OS determines access to the ciphertexts. Under the threat model described in Section 3.2, applying the principle of least privilege [26] can help prevent attackers from obtaining and misusing ciphertexts belonging to a CA for HPE (Horizontal Privilege Escalation) attacks. For instance, the HPE vulnerabilities targeting the wrap/unwrap functions in the case studies presented in Section 4.4 can only be exploited if the attacker can read or alter the ciphertexts used by CAs.

### Enforcing Access Control with TZOS

Strict access control enforced by the Trusted Zone Operating System (TZOS) can prevent unauthorized access to CA information maintained in Secure World resources. To enforce this, the TZOS must:
1. Provide each CA with its own isolated space within the Secure World resources.
2. Determine on behalf of which CA a Trusted Application (TA) is attempting to read or write data within this space.

There are multiple ways to implement the first requirement. For example, Secure World resources can be partitioned, and each CA can be restricted to accessing only its own partition. Alternatively, the TZOS can use CA-specific tags to control access to the CA information stored in these resources. Implementing the second requirement is more challenging under TrustZone, as only the Normal World OS can correctly identify each CA process. The TZOS must rely on information provided by the Normal World to grant specific CAs access to Secure World resources.

In summary, fine-grained access control policies that adhere to the principle of least privilege can prevent malicious CAs from accessing CA information stored by TAs and launching HPE attacks. However, a benign and uncompromised Normal World OS is essential for reliably enforcing these policies.

### Minimizing Normal World Access to TA's

Under all studied TZOSes, once a CA is granted access by the Normal World OS to communicate with TAs in the Secure World, the CA is permitted by the TZOS to send requests to any API of the TAs running under it. This coarse-grained access model allows attackers to exploit all vulnerabilities present inside TAs by compromising a single Normal World CA.

Currently, TZOSes do not restrict CA access to TAs because they cannot reliably determine their identity due to the semantic gap between the two worlds. However, as mentioned in the previous section, the TZOS can receive the required information from an uncompromised Normal World kernel. If the Normal World OS is modified to include the origin of requests sent to the TA APIs, a fine-grained access control could be enforced by the TZOS to prevent CAs from arbitrarily accessing TA APIs.

Under a fine-grained access control, each TA could notify the TZOS of which CAs are authorized to communicate with it. For example, DRM TAs could provide a list of IDs of pre-approved DRM CAs that are allowed to access their APIs. These IDs would be read from signed CA binaries by the Normal World OS and provided to the TZOS.

To exploit vulnerabilities inside a TA, attackers would need to either compromise specific CAs or the Normal World OS. Systems like TZ-RKP [2] and SPROBES [9] can be employed by the TZOS to maintain the integrity of the Normal World OS. Thus, minimizing access to TA APIs reduces the impact of vulnerabilities in CA code and raises the bar for attackers trying to escalate their privileges into the Secure World or other CAs.

### Related Work

TrustZone was developed to protect sensitive data from untrusted software. Initial research focused on moving security-sensitive operations, such as confidential data storage [16], one-time-password generation [30], ad fraud detection [15], attesting logins [17], mobile payments [33], and memory acquisition [31], into the Secure World environments. Such operations are always performed on behalf of a Normal World application and are present in modern TrustZone devices as TAs. For example, the Key Management and DRM TAs follow DroidVault’s concept of trusted data vaults. This work shows that HPE attack vectors can be introduced when security-sensitive operations are moved inside the Secure World.

Several works have identified memory corruption vulnerabilities in TAs that result in similar impacts, such as leaking secrets and altering TA memory [3, 4, 12, 13, 25]. Cerdeira et al. [6] present a study of such issues. In contrast, the HPE attack vectors presented in this work show how it is possible to leak secrets and alter TA information without requiring TA memory corruption vulnerabilities.

The HPE attack vectors are a manifestation of the TA confused deputy problem. The closest context in which this problem has been studied is Boomerang [18] attacks. Similar to HPEs, Boomerang attacks use the semantic gap in memory sharing between the two worlds to trick the Secure World into overwriting arbitrary Normal World memory. In this work, we present vulnerabilities stemming from TAs providing untrusted applications with unauthorized access to CA data maintained in both worlds. The confused deputy problem also appears in the context of IPC between Android applications [5], but the proposed framework cannot be extended to TAs due to the semantic gap between the two worlds.

Attestation forgery attacks, such as cuckoo attacks [22] in the context of physical TPMs [32] and Goldeneye [14] in the context of virtual TPMs, trick remote servers that rely on TPM-generated attestations into establishing trust with potentially compromised clients. The vulnerable Attestation TAs identified in Section 4.3 enable variants of these attacks in the context of TrustZone devices.

Binary dynamic analysis has been used in previous work to identify vulnerabilities within binaries. Firmalice [27] examines execution paths for authentication bypass vulnerabilities. Driller [29] and Mayhem [7] combine symbolic execution with fuzzing techniques to reach deep memory corruption bugs. These tools examine individual execution paths for vulnerabilities. In contrast, HOOPER identifies HPE-enabling vulnerabilities by examining data flows across multiple execution paths.

### Conclusion

The semantic gap at the interface between TEEs (e.g., TrustZone Secure World) and external logic (e.g., Normal World OS) can introduce significant Horizontal Privilege Escalations and other security vulnerabilities. Properly bridging this gap requires careful coordination and co-design between the TEE and external logic, which is not always easy due to the nature of today’s software delivery chains involving numerous unrelated principals.

In TrustZone, multi-tenancy combined with statefulness in TEE-hosted code leads to significant HPEs, even in the absence of code execution vulnerabilities in TEE logic. Mitigations require tight coordination between the kernels in both worlds.

### Acknowledgments

We thank Lee Harrison and Hayawardh Vijayakumar for providing insight into the inner workings of TZOSes and TAs. We thank Zhongjie Wang for his guidance in using symbolic execution. We thank Michael Grace for his suggestions in improving the presentation of our work. We also thank our shepherd Adam Bates and the anonymous reviewers for their helpful feedback. The authors would like to thank Samsung Research America and the Office of Naval Research, who funded parts of this work through award N000141812043.

### References

[1] ARM. Building a secure system using TrustZone technology. ARM Technical White Paper (2009).

[2] AZAB, A. M., NING, P., SHAH, J., CHEN, Q., BHUTKAR, R., GANESH, G., MA, J., AND SHEN, W. Hypervision across worlds: Real-time kernel protection from the ARM TrustZone secure world. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (New York, NY, USA, 2014), CCS ’14, ACM, pp. 90–102.

[3] BENIAMINI, G. TrustZone Kernel Privilege Escalation. http://bits-please.blogspot.com/2016/06/trustzone-kernel-privilege-escalation.html.

[4] BERARD, D. Kinibi TEE: Trusted Application exploitation. https://www.synacktiv.com/posts/exploit/kinibi-tee-trusted-application-exploitation.html.

[5] BUGIEL, S., DAVI, L., DMITRIENKO, A., FISCHER, T., SADEGHI, A.-R., AND SHASTRY, B. Towards taming privilege-escalation attacks on Android. In NDSS (2012), vol. 17, Citeseer, p. 19.

[6] CERDEIRA, D., SANTOS, N., FONSECA, P., AND PINTO, S. SoK: Understanding the prevailing security vulnerabilities in TrustZone-assisted TEE systems. In Proceedings of the IEEE Symposium on Security and Privacy 2020 (01 2020).

[7] CHA, S. K., AVGERINOS, T., REBERT, A., AND BRUMLEY, D. Unleashing mayhem on binary code. In 2012 IEEE Symposium on Security and Privacy (May 2012), pp. 380–394.

[8] EAGLE, C. The IDA Pro Book: The Unofficial Guide to the World’s Most Popular Disassembler. No Starch Press, USA, 2008.

[9] GE, X., VIJAYAKUMAR, H., AND JAEGER, T. Sprobes: Enforcing kernel code integrity on the TrustZone architecture. CoRR abs/1410.7747 (2014).

[10] GLOBALPLATFORM. TEE client API specification v1.0. https://globalplatform.org/specslibrary/tee-client-api-specification/.

[11] HARDY, N. The confused deputy: (or why capabilities might have been invented). SIGOPS Oper. Syst. Rev. 22, 4 (Oct. 1988), 36–38.

[12] HARRISON, L., VIJAYAKUMAR, H., PADHYE, R., SEN, K., AND GRACE, M. Partemu: Enabling dynamic analysis of real-world TrustZone software using emulation. In Proceedings of the 29th USENIX Security Symposium (USENIX Security 2020) (To Appear) (August 2020).

[13] KOMAROMY, D. Unbox Your Phone. https://medium.com/taszksec/unbox-your-phone-part-iii-7436ffaff7c7, 2008.

[14] LAUER, H., SAKZAD, A., RUDOLPH, C., AND NEPAL, S. Bootstrapping trust in a “trusted” virtualized platform. In Proceedings of the 1st ACM Workshop on Cyber-Security Arms Race (New York, NY, USA, 2019), CYSARM’19, Association for Computing Machinery, p. 11–22.

[15] LI, W., LI, H., CHEN, H., AND XIA, Y. Adattester: Secure online mobile advertisement attestation using TrustZone. In Proceedings of the 13th Annual International Conference on Mobile Systems, Applications, and Services (New York, NY, USA, 2015), MobiSys ’15, ACM, pp. 75–88.

[16] LI, X., HU, H., BAI, G., JIA, Y., LIANG, Z., AND SAXENA, P. DroidVault: A trusted data vault for Android devices. In 2014 19th International Conference on Engineering of Complex Computer Systems (Aug. 2014), IEEE.

[17] LIU, D., AND COX, L. P. VeriUI. In Proceedings of the 15th Workshop on Mobile Computing Systems and Applications - HotMobile’14 (2014), ACM Press.

[18] MACHIRY, A., GUSTAFSON, E., SPENSKY, C., SALLS, C., STEPHENS, N., WANG, R., BIANCHI, A., CHOE, Y. R., KRUEGEL, C., AND VIGNA, G. BOOMERANG: Exploiting the semantic gap in trusted execution environments. In Proceedings 2017 Network and Distributed System Security Symposium (2017), Internet Society.

[19] MITRE. Common weakness enumeration. https://cwe.mitre.org/.

[20] MONSHIZADEH, M., NALDURG, P., AND VENKATAKRISHNAN, V. N. Mace: Detecting privilege escalation vulnerabilities in web applications. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (New York, NY, USA, 2014), CCS ’14, ACM, pp. 690–701.

[21] MOR, R. X session management library version 1.0. https://www.x.org/releases/X11R7.7/doc/libSM/SMlib.html, 1993.

[22] PARNO, B. Bootstrapping trust in a “trusted” platform. In Proceedings of the 3rd Conference on Hot Topics in Security (USA, 2008), HOTSEC’08, USENIX Association.

[23] RESHETOVA, E., BONAZZI, F., AND ASOKAN, N. Selint: An SEAndroid policy analysis tool. Proceedings of the 3rd International Conference on Information Systems Security and Privacy (2017).

[24] RESHETOVA, E., BONAZZI, F., NYMAN, T., BORGAONKAR, R., AND ASOKAN, N. Characterizing SEAndroid policies in the wild. CoRR abs/1510.05497 (2015).

[25] ROSENBERG, D. Reflections on Trusting TrustZone. BlackHat USA (2014).

[26] SALTZER, J. H., AND SCHROEDER, M. D. The protection of information in computer systems. Proceedings of the IEEE 63, 9 (1975), 1278–1308.

[27] SHOSHITAISHVILI, Y., WANG, R., HAUSER, C., KRUEGEL, C., AND VIGNA, G. Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in Binary Firmware. In Proceedings of the 2015 Network and Distributed System Security Symposium (2015).

[28] SHOSHITAISHVILI, Y., WANG, R., SALLS, C., STEPHENS, N., POLINO, M., DUTCHER, A., GROSEN, J., FENG, S., HAUSER, C., KRUEGEL, C., AND VIGNA, G. SoK: (State of) the Art of War: Offensive Techniques in Binary Analysis.

[29] STEPHENS, N., GROSEN, J., SALLS, C., DUTCHER, A., WANG, R., CORBETTA, J., SHOSHITAISHVILI, Y., KRUEGEL, C., AND VIGNA, G. Driller: Augmenting Fuzzing Through Selective Symbolic Execution. In Proceedings of the 2016 Network and Distributed System Security Symposium (2016).

[30] SUN, H., SUN, K., WANG, Y., AND JING, J. TrustOTP. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security - CCS’15 (2015), ACM Press.

[31] SUN, H., SUN, K., WANG, Y., JING, J., AND JAJODIA, S. TrustDump: Reliable memory acquisition on smartphones. In Computer Security - ESORICS 2014. Springer International Publishing, 2014, pp. 202–218.

[32] TRUSTED COMPUTING GROUP. Trusted platform module main specification. https://trustedcomputinggroup.org/resource/tpm-main-specification/, 2007.

[33] ZHENG, X., YANG, L., MA, J., SHI, G., AND MENG, D. TrustPAY: Trusted mobile payment on security enhanced ARM TrustZone platforms. In 2016 IEEE Symposium on Computers and Communication (ISCC) (June 2016), IEEE.

[34] ZHOU, X., LEE, Y., ZHANG, N., NAVEED, M., AND WANG, X. The peril of fragmentation: Security hazards in Android device driver customizations. Proceedings - IEEE Symposium on Security and Privacy (11 2014), 409–423.