### Falset and Materialized Workflow Instances

In both cases, the materialized workflow instances are `true`. Now, consider the following materialized workflow instance: 
- `a = true; a = true; a = true; a = true; a = false; a = true; a = ttrue; a = false; a = false; a = false`.

In this case, the materialized workflow instance does not logically terminate. Note that in this situation, the materialized workflow instance stops its execution at task `t3` because its EA (Event-Condition-Action) model is negative. Consequently, the workflow does not logically terminate but partially terminates.

### Execution of Tasks and EA Models

It is important to state that for a task `t`, in the corresponding EA model `fE → fC`, the outgoing condition `fC` is enabled only after the incoming condition `fE` is enabled. This means `fC` can be `true` only if `fE` is `true`. Consequently, we cannot arbitrarily attribute values to the transitions `a0j`, where `a0j ∈ A`. We must always attribute values to `a0j` according to Table 1.

### Theorem 5: Logical Workflow Termination

**Theorem 5:** A workflow `WG` logically terminates if and only if `b` is a tautology.

**Proof:**
1. **Suppose the workflow logically terminates.** Then, for all materialized workflow instances `WGi`, `au` is enabled at some point in time after transition `a` has been enabled. Let `b = ∧(fEi → fCi)`, `ti : fEi → fCi`, `t ∈ T`, for all `i ∈ Γ`, be the logical representation of the workflow. Assume, by contradiction, that there exists `i ∈ Γ` such that `fEi → fCi` is negative. Then, both `fEi` and `fCi` are `false`, or `fEi` is `true` but `fCi` is `false`. As a consequence, the workflow stops its execution in task `ti`. Therefore, `au` is `false` and so `au` is not enabled, which is a contradiction. Consequently, every compound EA model in `WG` is positive and `b` is a tautology.
2. **Conversely, if `b` is a tautology,** then every compound EA model in `WG` is positive. Therefore, for every `i ∈ Γ`, `fEi` and `fCi` are `true`. In particular, `a0` and `au` are `true`, which means that both `a0` and `au` are enabled. As the workflow starts its execution by enabling `a0`, `au` is enabled at some point in time after `a0` has been enabled. Thus, the workflow logically terminates.

**Example 10:** It can be easily seen that the logical representation of the workflow shown in Figure 1 is a tautology. Therefore, the workflow logically terminates.

### Using the Logical Workflow Termination Theorem

#### 4.1 Workflow Complexity Analysis

In a competitive e-commerce and e-business market, workflows can span both between enterprises and within the enterprise [28]. While organizations want their workflows to be simple, modular, easy to understand, easy to maintain, and easy to re-engineer, in cross-organizational settings, these processes have an inherent complexity. Nevertheless, in some cases, workflows' design can be highly complex due to the vast number of transactions carried out in global markets. High complexity in a process has several undesirable drawbacks, including poor understandability, more errors, defects, and exceptions, leading to more time required to develop, test, and maintain the processes. Therefore, excessive complexity should be avoided.

To achieve effective process management, one fundamental area of research that needs to be explored is the complexity analysis of workflows [7]. Studies indicate that 38% of process management solutions will be applied to redesign enterprise-wide processes (source: Delphi Group 2002). Workflow complexity can be defined as the degree to which a process is difficult to analyze, understand, or explain. It may be characterized by the number and intricacy of tasks' interfaces, transitions, conditional and parallel branches, the existence of loops, roles, activity categories, types of data structures, and other process characteristics [8].

Workflow complexity metrics can be used during the development of workflows to improve their quality and maintainability. However, it does not make sense to perform complexity analysis on workflows that are incorrectly designed and do not logically terminate. Therefore, the logical workflow termination theorem has an important role in complexity analysis.

#### 4.2 Semi-automatic Design of Workflows

A wide spectrum of workflow system architectures has been developed to support various types of business processes. Cardoso, Bostrom et al. [10] report that more than 200 workflow products are available in the market. Most systems provide a set of tools, including a graphical application to design workflows and an engine or enactment system to manage the execution of workflow instances.

Although major research has been carried out to enhance workflow systems [22][12][26][3][19], work on workflow application development lifecycles and methodologies is practically non-existent. The development of adequate frameworks is important to ensure that workflows are constructed according to initial specifications. Furthermore, it would be advantageous for workflow analysts to have tools to support—automatically or semi-automatically—the design of workflows. Unfortunately, despite the diffusion of workflow systems, methodologies and frameworks to support the development of workflow applications are still missing.

To address this lack of tools, the Poseidon framework [9] has been developed. The Poseidon framework helps analysts during their interviews with administrative staff, managers, and employees to design processes. The framework includes a set of procedures that guide the workflow analyst during interviews and supply methods to semi-automatically design workflows. As a result, workflows can be developed and implemented more rapidly and accurately. The semi-automatic design of workflows can generate workflows that are incorrect and do not logically terminate, especially since human involvement can lead to inconsistent workflows. The use of the logical workflow termination theorem guarantees that the workflows generated semi-automatically terminate and that subsequent alterations made by designers are consistent.

### Conclusions

Workflow management systems are capable of hosting e-commerce applications by integrating business functionalities in a short time and at a low cost. This is of significant importance for global and competitive markets. Workflows describing e-commerce applications require precise modeling, verification, and analysis to ensure they perform according to initial specifications. The development of frameworks and theories to achieve accurate modeling is a difficult task, and the proposed solutions are still insufficient, requiring further research.

To guarantee that workflows are successfully executed at runtime, it is necessary to verify their properties at design time. In this paper, we present a formal framework based on control flow graphs theory to check workflow specifications for correctness. In our approach, we model workflows with tri-logic acyclic directed graphs and develop a formalism to verify one important property: the logical termination of workflows.

The contribution of our work will enable the development of tools that will support and allow business process analysts to verify the correctness of their workflows at design time.

### References

[1] W. M. P. van der Aalst. The application of Petri nets to workflow management. The Journal of Circuits, Systems, and Computers, 8(1):21—66, 1998.

[2] Wil M. P. van der Aalst. Workflow verification: Finding control-flow errors using Petri-net-based techniques. In W. M. P. van der Aalst, J. Desel, and A. Oberweis, editors, Business Process Management: Models, Techniques, and Empirical Studies, volume 1806, pages 161—183. Springer-Verlag, Berlin, 2000.

[3] G. Alonso, C. Mohan, R. Guenthoer, D. Agrawal, A. El Abbadi, and M. Kamath. Exotica/FMQM: A persistent message-based architecture for distributed workflow management. In IFIP WG 8.1 Working Conference on Information Systems for Decentralized Organizations, Trondheim, Norway, 1994.

[4] Kemafor Anyanwu, Amit Sheth, Jorge Cardoso, John A. Miller, and Krys J. Kochut. Healthcare enterprise process development and integration. Journal of Research and Practice in Information Technology, Special Issue in Health Knowledge Management, 35(2):83—98, 2003.

[5] P. Attie, M. Singh, A. Sheth, and M. Rusinkiewicz. Specifying and enforcing intertask dependencies. In Proceedings 19th International Conference on Very Large Data Bases, pages 134—145, Dublin, Ireland, 1993. Morgan Kaufman.

[6] CAPA. Course approval process automation (CAPA). Technical report, LSDIS Lab, Department of Computer Science, University of Georgia, July 1, 1996 - June 30, 1997.

[7] Jorge Cardoso. About the complexity of teamwork and collaboration processes. In Wojciech Cellary Esaki and Hiroshi, editors, IEEE International Symposium on Applications and the Internet (SAINT 2005), Workshop - Teamware: Supporting scalable virtual teams in multi-organizational settings, pages 218—221, Trento, Italy, 2005. IEEE Computer Society.

[8] Jorge Cardoso. Evaluating workflows and web process complexity. In Layna Fischer, editor, Workflow Handbook 2005, page 284. Future Strategies Inc., Lighthouse Point, FL, USA, 2005.

[9] Jorge Cardoso. Poseidon: A framework to assist web process design based on business cases. International Journal of Cooperative Information Systems (IJCIS), (accepted for publication), 2005.

[10] Jorge Cardoso, Robert P. Bostrom, and Amit Sheth. Workflow management systems and ERP systems: Differences, commonalities, and applications. Information Technology and Management Journal. Special issue on Workflow and E-Business (Kluwer Academic Publishers), 5(3-4):319—338, 2004.

[11] Jorge Cardoso, Christoph Bussler, and Amit Sheth. Tutorial: Semantic web services and processes: Semantic composition and quality of service. In International Federated Conferences: DOA/ODBASE/CooPIS 2002, Irvine, CA, 2002.

[12] S. Ceri, P. Grefen, and G. Sanchez. Wide-A: A distributed architecture for workflow management. In Proceedings of the 7th International Workshop on Research Issues in Data Engineering, pages 76—79, Birmingham, UK, 1997.

[13] Umeshwar Dayal, Meichun Hsu, and Rivka Ladin. Organizing long-running activities with triggers and transactions. In ACM SIGMOD International Conference on Management of Data, pages 204—214, Atlantic City, New Jersey, 1990. ACM Press, New York, NY, USA.

[14] J. Eder, H. Groiss, and H. Nekvasil. A workflow system based on active databases. In G. Chroust and A. Benczur, editors, Proceedings of CON '94, Workflow Management: Challenges, Paradigms, and Products, pages 249—265, Linz, Austria, 1994.

[15] D. Fensel and C. Bussler. The Web Service Modeling Framework, 2002.

[16] Dimitrios Georgakopoulos, Mark Hornick, and Amit Sheth. An overview of workflow management: From process modeling to infrastructure for automation. Distributed and Parallel Databases, An International Journal, 3(2):119—153, 1995.

[17] R. David Hall, John A. Miller, Jonathan Arnold, Krys J. Kochut, Amit P. Sheth, and Michael J. Weise. Using workflow to build an information management system for a geographically distributed genome sequence initiative. In R. A. Prade and H. J. Bohnert, editors, Genomics of Plants and Fungi, pages 359—371. Marcel Dekker, Inc., New York, NY, 2003.

[18] A. H. M. ter Hofstede and E. R. Nieuwland. Task structure semantics through process algebra. Software Engineering Journal, 8(1):14—20, 1993.

[19] N. R. Jennings, P. Faratin, T. J. Norman, M. P. O'Brien, E. Wiegand, C. Voudouris, J. L. Alty, T. Miah, and E. H. Mamdani. ADEPT: Managing business processes using intelligent agents. In Proc. BCS Expert Systems 96 Conference, pages 5—23, Cambridge, UK, 1996.

[20] M. H. Kang, J. N. Froscher, A. P. Sheth, K. J. Kochut, and J. A. Miller. A multilevel secure workflow management system. In Matthias Jarke and Andreas Oberweis, editors, Proceedings of the 11th Conference on Advanced Information Systems Engineering, Lecture Notes in Computer Science, pages 271—285, Heidelberg, Germany, 1999. Springer-Verlag.

[21] J. Klingemann, J. Wäsch, and K. Aberer. Deriving service models in cross-organizational workflows. In Proceedings of RIDE - Information Technology for Virtual Enterprises (RIDE-VE '99), pages 100—107, Sydney, Australia, 1999.

[22] Krys J. Kochut, Amit P. Sheth, and John A. Miller. ORBWork: A CORBA-based fully distributed, scalable, and dynamic workflow enactment service for METEOR. Technical report, Large Scale Distributed Information Systems Lab, Department of Computer Science, University of Georgia, 1999.

[23] F. Leymann, D. Roller, and M. T. Schmidt. Web services and business process management. IBM Systems Journal, 41(2):198—211, 2002.

[24] Zongwei Luo. Knowledge Sharing, Coordinated Exception Handling, and Intelligent Problem Solving to Support Cross-Organizational Business Processes. Ph.D. dissertation, University of Georgia, 2000.

[25] METEOR. METEOR (Managing End-to-End Operations) project home page, 2004.

[26] John A. Miller, D. Palaniswami, Amit P. Sheth, Krys J. Kochut, and H. Singh. WebWork: METEOR2's web-based workflow management system. Journal of Intelligence Information Management Systems: Integrating Artificial Intelligence and Database Technologies (JIIS), 10(2):185—215, 1998.

[27] P. Muth, D. Wodtke, J. Weissenfels, G. Weikum, and A. Kotz Dittrich. Enterprise-wide workflow management based on state and activity charts. In A. Dogac, L. Kalinichenko, T. Ozsu, and A. Sheth, editors, Proceedings NATO Advanced Study Institute on Workflow Management Systems and Interoperability. Springer Verlag, 1998.

[28] Amit P. Sheth, Wil van der Aalst, and Ismailcem B. Arpinar. Processes driving the networked economy. IEEE Concurrency, 7(3):18—31, 1999.

[29] M. P. Singh. Semantical considerations on workflows: An algebra for intertask dependencies. In Paolo Atzeni and Val Tannen, editors, Fifth International Workshop on Database Programming Languages, Electronic Workshops in Computing, Umbria, Italy, 1995. Springer.

[30] Staffware. Staffware web site, 2005.

[31] TIBCO. TIBCO InConcert, 2005.