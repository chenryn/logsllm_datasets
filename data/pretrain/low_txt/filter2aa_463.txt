#BHUSA @BlackHatEvents
**Living Off the Walled Garden: Abusing the Features of the Early Launch Antimalware Ecosystem**

**Presenter:** Matt Graeber, Director, Threat Research @ Red Canary

**Information Classification:** General

## Introduction
Who protects the protector? This presentation delves into the vulnerabilities and potential abuses within the Early Launch Antimalware (ELAM) ecosystem.

### Overview of ELAM and PPL
- **ELAM (Early Launch Antimalware):** Microsoft’s supported 3rd party security product anti-tampering mechanism.
- **PPL (Protected Process Light):** Designed to prevent tampering in user-mode, even as an administrator.
  - Cannot start or stop protected processes.
  - Cannot get a handle to a protected process.
  - Cannot attach a debugger to a protected process.
  - Executables must meet specific signing requirements to run protected.

### Previous Work
- Acknowledgment to James and Alex for their foundational work.
- Everything is derivative, building on existing knowledge and research.

### Protected Process Light Protections
- **Key Features:**
  - Prevents tampering in user-mode, even as an admin.
  - No starting or stopping of protected processes.
  - No handle to a protected process.
  - No debugger attachment.
  - Requires specific signing for execution.

### Early Launch Antimalware (ELAM) Drivers
- **Functionality:**
  - Specifies certificate hashes allowed to run at the Antimalware-Light PPL protection level.
  - Vendors must be members of the Microsoft Virus Initiative (MVI).
  - Vendors must pass the WHQL driver submission.

### Enumerating Installed ELAM Drivers
- Tools and methods to enumerate and validate installed ELAM drivers.

### ELAM Driver Hashes
- **Certificate Hashes:**
  - To-Be-Signed (TBS) hashes, not the same as Thumbprints.
  - Tools to calculate TBS hash:
    - `certmgr.exe` (Windows SDK)
    - `Get-TBSHash`
  - Note: VirusTotal does not understand TBS hashes.

### ELAM Driver Signer Resource
- **MicrosoftElamCertificateInfo:**
  - Contains entries for certificate hashes, algorithms, and EKUs (Enhanced Key Usages).

### Example Parsed ELAM Ruleset - WdBoot.sys
- **Allow Rule #1:**
  - SignerHash: `f6f717a43ad9abddc8cefdde1c505462535e7d1307e630f9544a2d14fe8bf26e`
  - SignerHashAlgorithm: SHA256
  - SignerEKUs: `1.3.6.1.4.1.311.76.8.1;1.3.6.1.4.1.311.76.11.1`
- **Allow Rule #2:**
  - SignerHash: `4e80be107c860de896384b3eff50504dc2d76ac7151df3102a4450637a032146`
  - SignerHashAlgorithm: SHA256
  - SignerEKUs: `1.3.6.1.4.1.311.76.8.1;1.3.6.1.4.1.311.76.11.1`

### ELAM Ruleset - WdBoot.sys
- Detailed ruleset for WdBoot.sys, including PsProtectedSignerAntimalware values.

### ELAM Allowlist
- ELAM acts as an allowlist for Antimalware-Light PPL process execution.
- Risks if the allowlist is overly permissive.

### ELAM Driver Hunting and Auditing
- **Hunting for ELAM drivers:**
  - VirusTotal search: `signature:"Microsoft Windows Early Launch Anti-malware Publisher" tag:native tag:signed tag:peexe not tag:invalid-signature`
- **Additional validation:**
  - Confirm valid signature.
  - Leaf certificate name: "Microsoft Windows Early Launch Anti-malware Publisher".
  - MSELAMCERTINFOID resource with parsed signer allow list.
  - 866 unique ELAM drivers identified.

### Identified ELAM Vendors
- Comprehensive list of vendors, including Microsoft, McAfee, VMware, and others.

### ELAM Auditing Strategy
- Identify corresponding certificates with TBS hashes.
- Search for EXEs and DLLs signed with that certificate.
- Identify signed code that might permit code execution.
- Consider low-hanging fruit like LOLbins.
- Install candidate executables as a protected service.

### ELAM Auditing Challenges
- VirusTotal does not understand TBS hashes, only Thumbprints.
- Limited Google search results for TBS hashes.

### Associating TBS Hash to Thumbprint
- Methods to associate TBS hashes with Thumbprints.
- Example: Microsoft Code Signing PCA 2011, Thumbprint: `f252e794fe438e35ace6e53762c0a234a2c52135`.

### Hunting for Potential Protected Executables
- Specific EKU restrictions for identified rules.
- Examples of overly-permissive allowed signers and their TBS hashes.

### Weaponization
- **Steps:**
  - Register overly-permissive ELAM driver with `InstallELAMCertificateInfo` function in kernel32.dll.
  - Create a service for abusable executable (e.g., MSBuild).
  - Specify service as `SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT` with `ChangeServiceConfig2W`.
  - Start the service.
- **Constraints:**
  - Many LOLBins are not designed to run protected.
  - PPL does not permit spawning a child process by default.
  - Must permit arbitrary unsigned code execution.
  - MSBuild payloads spawn a child process by default.

### MSBuild Weaponization Constraints
- MSBuild Property Function payload must be implemented as a one-liner using pseudo-.NET syntax.

### Demos
- **Demo #1:** Running MSBuild Protected
  - [Video](https://youtu.be/-Pij0IoMWA4)
- **Demo #2:** Killing Defender AV Protected Process
  - [Video](https://youtu.be/i2aM7jGDZsw)

### Mitigations and Detection
- **Mitigations:**
  - A robust fix from Microsoft in the future.
  - WDAC blocks loading/execution of disallowed ELAM drivers.
- **Detection and Recommendations:**
  - Focus on antimalware-light service creation.
  - Monitor registry key `HKLM\SYSTEM\CurrentControlSet\Services\SERVICE – LaunchProtected – 3`.
  - Use code-signing certificates with dedicated EKUs only for necessary service executables and DLLs.
  - Perform an audit of ELAM rules and corresponding allowed binaries.

### Conclusion
- **Why is this so bad?**
  - One overly permissive ELAM driver can poison the well across the entire 3rd party antimalware ecosystem.
  - The vetting process for ELAM drivers is not robust.
  - Malware running as PPL can kill security products and is afforded anti-tampering protection.

### Disclosure Timeline
- **Dec 28, 2021:** Reported to MSRC.
- **Jan 11, 2022:** MSRC closed report, passed to Defender Research team.
- **January to Present:**
  - Defender mitigation developed and implemented for Microsoft-signers.
  - Issue and mitigation communicated to MVI vendors.
  - Scope extends beyond Microsoft-signers, making mitigation unviable.
  - Plan to treat overly-permissive ELAM drivers on an individual basis, e.g., potential blocking in CI/ASR.

### Official Microsoft Response
- “Microsoft researchers have been collaborating with Matt Graeber on the findings and with Microsoft Virus Initiative (MVI) partners to address the issue from their own ELAM drivers. Customers using both Microsoft Defender Antivirus and Microsoft Defender for Endpoint are covered by potential abuse of the ELAM functionality.”

### Resources
- Protecting anti-malware services.
- ELAM Driver Requirements.
- Unknown Known DLLs.
- The Evolution of Protected Processes Parts 1, 2, and 3.
- Building a WDAC Driver Allowlist.

### Code
- **Tools:**
  - ELAM driver allow list parser: `Get-ElamCertInfo`.
  - TBS hash calculator: `Get-TBSHash`.
  - Defanged PPL Runner: `AntimalwareBlight` (Bring your own MSBuild and overly-permissive ELAM driver).

**Thank you!**