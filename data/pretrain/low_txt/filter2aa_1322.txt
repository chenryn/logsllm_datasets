# Resilient Botnet Command and Control with Tor
**Dennis Brown**
**July 2010**

## Introduction
- **About the Author:**
  - I work for Tenable Network Solutions.
  - I have spoken at Toorcon and on the PaulDotCom Podcast.
  - I run Rhode Island's Defcon Group, DC401.

## The Problem
- **Botnet Downtime:**
  - Setting up a botnet is time-consuming and costly.
    - Server setup
    - Bot development
    - Encryption
    - Propagation (e.g., seeding bad torrents, setting up drive-by downloads)
  - Financial loss from downtime.
    - Time that could be spent on reselling, DDoS attacks, etc.

- **Common Methods of Takedown:**
  - Hosting provider de-peering (e.g., McColo, Troyak)
  - Server cleanup or eviction (e.g., public IRC servers, free web hosting)
  - Compromised host cleanup or rebuild
  - DNS revocation
  - IP banning (e.g., due to Metus pwnz and opening a port on a home router)

- **Solution:**
  - Using Tor to reduce the risk of takedown.

## Tor: Anonymity and Security
- **Tor Overview:**
  - Tor itself is not inherently "bad," but it can be misused.
  - The potential for abuse is significant.
  - Anonymity is a key feature.
  - Current research on defeating Tor's anonymity.
  - Notable users include WikiLeaks.

## How Tor Helps Hide Botnets
- **Hidden Services:**
  - A dream for bot masters.
  - Authenticated Hidden Services.
  - Private Tor Networks.
  - Exit Node Flooding.
  - Trade-offs:
    - Speed
    - Ease of control

- **HTTP Hidden Service:**
  - Basic and effective.
  - What is a Hidden Service?
    - Standard feature of Tor.
    - Diagrams and explanations.
  - Works behind NAT and firewalls.
  - No need to expose services to the network.
  - Hence the name "hidden."

- **Example: Zeus Botnet:**
  - Easy to set up.
  - LAMP server running anywhere.
    - Caution: Data leakage can reveal your IP.
  - Zeus Control Panel on the server.
    - Caution: Poorly written control panels.
  - Configure a Hidden Service for the web server.
    - Receive an Onion address.
  - Configuration challenge: Where to point the bot?

- **Tor2Web:**
  - A proxy to redirect .onion web traffic.
  - Third-party tool, not part of Tor.
  - Web redirection service.
  - Scripts to run your own.
  - Command and Control via Tor2Web.
  - Example: `http://tor2web.org/fiewfh9sfh2fj`

## Strengths and Weaknesses
- **Strengths:**
  - Hides the C&C server.
  - Nearly impossible to track down.
  - C&C server virtually immune to takedown.

- **Weaknesses:**
  - Easy to filter Tor2Web traffic.
  - Uncertainty about what Tor2Web logs.
  - Running your own Tor2Web proxy provides a single point of failure.

- **Proxy-aware Malware over Tor Network:**
  - Hiding in "plain" sight.
  - Requires proxy-aware malware.
  - Most malware (RATs, DoSers, etc.) are not proxy-aware.
  - Need to run Tor on infected hosts.
  - Not a major problem.
    - VirusTotal report.

- **Setup:**
  - Works for various types of botnets (HTTP, IRC, Custom client/servers, etc.).
  - Set up a hidden service for the C&C port.
  - Bots need SOCKS5 support.
  - Connect through Tor to .onion addresses.
  - Load Tor onto infected hosts.
  - Similar to loading FakeAV.
  - Connect through Tor, get commands, send data, win!

- **Strengths:**
  - Keeps servers hidden, behind NAT, etc.
  - Does not rely on third parties.
  - Uses the existing, stable Tor network.
  - Blends in with other Tor traffic.
  - No exit nodes used, contained entirely within the Tor network.

- **Weaknesses:**
  - More complicated to set up.
  - Add SOCKS5 support to the bot.
  - Requires Tor on all servers.
  - Tor needs to function properly.
  - Emergence of new Tor traffic may be detected by network anomaly detection.

## Other Alternatives
- **Private Tor Network:**
  - Stay off the public Tor network.
  - Can be faster.
  - Track bandwidth of infected hosts.
  - High-bandwidth hosts act as relays.
  - Potentially stealthier, less traffic.
  - Easier to block?
    - Potentially fewer relays, easier to enumerate.
    - Probably not.

- **P2P C&C:**
  - The most dangerous option.
  - Also the most complex.
  - Popular P2P botnets: Sality, Conficker.
  - Weaknesses:
    - Sality UDP-based protocol.
    - Conficker Domain Generation.
  - Overcoming weaknesses:
    - Tor Hidden Services.
    - No longer blocked by firewalls.
    - Provides greater C&C capabilities.
    - Each infected host can be an HTTP server with unique .onion addresses.
    - Distribution through all peers on the network.
    - Distribute lists of infected hosts.

- **Weaknesses:**
  - Managing all hosts becomes very complicated.
  - Ensuring new updates apply is critical.
  - Network fragmentation results in multiple, unsynched networks.

- **Strengths:**
  - Virtually impossible to take down if working properly.
  - More effective than Sality, Conficker, etc.
  - Easy to sell sub-nets to third parties.
  - Examine research done against Storm, Conficker, etc.
  - Many defenses against these worms can be bypassed by routing through Tor and using .onion addresses.

## Conclusion
- **Strength & Weakness Recap:**
  - Turning weaknesses into countermeasures.
  - Future directions.

- **Q&A:**
  - Open for questions and discussion.