### 4.3 Downstream Controller (DC) Proxy and PSQ Proxy (Location 3)

#### Attack Actions
1. **(3-1) Man-in-the-Middle Attack:**
   - Start a proxy to act as a man-in-the-middle.
   
2. **(3-2) Timing Exploit:**
   - Exploit timing vulnerabilities to kill the Cisco Security Agent before it detects the attack, then kill LC11.

#### Post-Attack Actions
- After completing (3-1) and (3-2), as a PSQ Proxy, corrupt the content of the IO.
- Take over a DC (Downstream Controller) Proxy.
- Drop the client's (one that was detached earlier) request to connect.
- Break into Q1PSQ by exploiting the same security hole.
- Connect to SM.

#### Defensive Actions
1. **Host Protection Domains:**
   - Prevent the killing of the PSQ Proxy. If not,
   - Prevent the installation of a new PSQ Proxy. If not,
   - LC notices a change in the file system and restores it. If not,
   - LC notices a change in the PID of the PSQ Proxy and kills it.

All defensive actions send alerts.

- **SM Response:**
  - SM notices the loss of heartbeat and blocks the NIC to stop further attack propagation.
  - Since an IO is signed end-to-end, the PSQ server sends an alert and rejects the corrupted IO. The client does not receive an ACK and resends the IO.

2. **Host Protection Domains and LC:**
   - Prevent the attack similarly to the first row of this table. If not,
   - After inviting the client, the SM operator notices that the client is not registered. The operator checks the alerts generated by the LC and others on Q1AP and blocks Q1AP’s NIC.
   - The client is re-invited from the Q1SM and connects successfully.

3. **Q1PSQ Security:**
   - Q1PSQ runs a different operating system, so the same security hole does not exist unless it is in the Java VM.

**Notes:**
- This was attempted in the external Red Team exercise.
- When the external Red Team was allowed on Q1AP, they successfully ran their own PSQ proxy. The PSQ Server noticed the change in the serial ID and dropped the traffic sent from this proxy.

---

### 4.4 Operations Zone – PSQ Host (Location 4)

#### Assumptions
- The attacker has gained access to the operations zone and the Q1PSQ host.

#### Defensive Mechanisms
- **Redundancy:** Multiple PSQ servers.
- **Design Based on Weak Assumptions:** The PSQ server does not solely trust its own decision but uses a quorum.
- **Detection and Correlation:** Polling of component status.
- **Adaptive Response:** Mounted by an SM to counter the attacker’s attempt to disrupt the PSQ flow.

#### Attack Actions
- **Shut Down the Database Server Running on Q1PSQ.**

#### Defensive Actions
1. **Host Protection Domain:**
   - Prevents the shutdown. If not,
   - Q1SM polls the status of the database, notices it no longer responds, and displays an alert to the SM operator. The database is restarted, and PSQ operations continue.

- **Unauthorized Reply Handling:**
  - Q1PSQ receives an unauthorized reply but consults other PSQ servers before responding. Other PSQ servers confirm the authorization, so the client is not denied.

- **Role Table Modification:**
  - Modify the role table in the database and delete a role for a client.

---

### 4.5 Executive Zone – SM Host (Location 5)

#### Assumptions
- The attacker has penetrated deep into the system, past the operations zone, and is now on the Q1SM host.

#### Defensive Mechanisms
- **Redundancy:** Multiple SMs and PSQ Servers.
- **Adaptive Responses:** Mounted by the SMs.
- **Design Based on Weak Assumptions:** SMs do not trust each other.

#### Attack Actions
- **Detach the Clients.**

#### Defensive Actions
- **Other SMs:**
  - Notice the clients have gone away and one of the SMs re-invites them. Clients resume from where they were stopped.
  - Q1PSQ recalls the IOs, but the other three PSQ servers do not. The IOs are preserved.

- **Isolation Commands:**
  - Issue a command to isolate Q1PSQ. Isolating a PSQ server requires a quorum of two; no other SM agrees, so the PSQ server is not blocked.
  - Issue a command to isolate Quad 3. Isolating a Quad requires agreement from all SMs. No other SM agrees, so Quad 3 is not isolated. SM operators on other quads notice and vote to isolate Quad 1. The system continues to operate with three quads.

---

### 5. Related Work

Since we first demonstrated the feasibility of integrating defensive adaptation into an application in 1999 [8], adaptive response has become an integral part of survivable systems. Many researchers have explored adaptive cyber defense and developed special-purpose architectures for intrusion detection and response (ID&R), intrusion tolerance, or graceful degradation.

- **ITUA [2]:** Developed technology and system design techniques for building information systems that can tolerate specific classes of attacks, such as those that introduce corruption in communication and application-level interactions in distributed object applications. The DPASA SMs and LCs are based on elements of the ITUA architecture.

- **Willow [9]:** Achieves intrusion tolerance using a combination of disabling vulnerable network elements, replacing failed system elements, and reconfiguring the system if non-maskable damage occurs. Willow uses its own event-notification service as the control mechanism.

- **Dependable Intrusion Tolerance (DIT) [10]:** Comprises functionally redundant HTTP COTS servers running on diverse operating systems and platforms. DIT uses hardened intrusion-tolerant proxies that mediate client requests and verify the behavior of servers and other proxies. It includes monitoring and alert-management components based on the EMERALD [11] Intrusion Detection System. DIT focuses on web servers, and its use of EMERALD influenced the alert management and correlation aspect of the DPASA architecture.

- **MAFTIA [12]:** A European project developing an open architecture for transactional operations on the Internet. MAFTIA models a successful attack on a security domain, leading to the corruption of processes in that domain, as a fault. The architecture exploits approaches to fault tolerance that apply regardless of whether the faults are due to accidents or malicious acts. MAFTIA is explicitly middleware-based and provides both protection from and tolerance of intrusions.

- **Saber [13]:** Uses several mechanisms, including intrusion detection, automatic code patching, process migration, and filtering of distributed denial-of-service floods, primarily focusing on server availability.

---

### 6. Conclusions

This paper presents a set of design principles followed in designing the survivability architecture. While our experience validates these principles at a general level, several practical challenges were encountered during implementation. For instance, creating a correct and consistent policy for multiple layers of mechanisms is not trivial. We used automated policy generation to mitigate this risk partially. Finding static diversity was also challenging, with different operating systems and JVM implementations being the only sources of static diversity. Existing system components and security tools were not always available for all operating systems, adding complexity.

We found that more diversity is not necessarily better, depending on how diverse entities are interconnected. We used three operating systems on four quads. The use of weaker assumptions and the overall strategy of combining protection, detection, and adaptive reaction proved very useful. The PSQ protocols showed tolerance against a wide range of environmental variations and corruption (fuzzing) attacks. Human-assisted responses complemented automated responses in recovery attempts when Red Team attacks resulted in component failures. Heavyweight adaptive responses like isolating a client or a LAN had a human override option, a feature we believe will remain useful until adaptive responses are driven by cognitive decision-making capabilities.

The defense-enabled JBI and its evaluation illustrate the utility of our approach in defending an existing system. It shows that it is possible to integrate COTS and laboratory-quality mechanisms, organized in multiple overlapping layers, to provide a high level of resilience without altering or sacrificing any operational features of the undefended system. Compromising the integrity or confidentiality of the information objects proved very hard. The PSQ service demonstrated tolerance and graceful degradation when fewer than four quads were operational.

We view the success of the survivability architecture and design as a significant step forward in the continuing fight against the threat of cyber-attack. The defense-enabled JBI completed the 12-hour mission despite visible impacts caused by sustained attacks from the external Red Team. However, in another run, a Red Team was able to mount a zero-day attack on the VPN routers to stop all communication between the client and the core LANs. The evaluation of the results from the exercise is ongoing, as it involves a complex set of various objectives, tests, and multiple (sometimes conflicting) results. Further evaluation and continued improvement of aspects of the defense are absolutely necessary.

The experience with designing, building, and evaluating a real system under stress has provided us with numerous insights for future improvements in both the design and analysis of survivable systems. Some areas currently less well understood include:
- Creating additional adaptive actions and survivability mechanisms with properties that are provably uncircumventable.
- Dynamically and credibly computing and changing the trust of a component based on past actions and current system state.
- Analytically comparing the effectiveness and contribution of the various and varying overlapping layers of defense.

### Acknowledgements

The authors would like to gratefully acknowledge the contributions of Bill Weinstein (Draper Laboratories), Al Valdez (SRI), Dick O’Brien and Charlie Payne (Adventium), and David Levin and Rick Schantz (BBN) for the work described in this paper. We would also like to thank Lee Badger (DARPA) and Patrick Hurley (AFRL) for their continuing support.

### References

[1] M. Atighetchi, P. Pal, F. Webber, R. Schantz, C. Jones, J. Loyall. “Adaptive Cyberdefense for Survival and Intrusion Tolerance”, IEEE Internet Computing, Vol. 8, No. 6, November/December 2004, pp. 25-33

[2] M. Cukier, T. Courtney, J. Lyons, H. V. Ramasamy, W. H. Sanders, M. Seri, M. Atighetchi, P. Rubel, C. Jones, F. Webber, P. Pal. R. Watro, and J. Gossett. “Providing Intrusion Tolerance With ITUA”, Supplement of the 2002 International Conference on Dependable Systems and Networks, June 23-26, 2002.

[3] Tom Markham, Lynn Meredith, and Charlie Payne. “Distributed embedded firewalls with virtual private groups”, Proceedings of the DARPA Information Survivability Conference and Exposition, Volume II. Washington, D.C., April 2003. DARPA, IEEE.

[4] Schneider, Fred. “Byzantine generals in action: Implementing fail-stop processors”, ACM Transactions on Computer Systems, Vol. 2 (2), 1984, pp. 145-154

[5] AFRL JBI homepage: http://www.infospherics.org

[6] W. Nelson, W. Farrell, M. Atighetchi, S. Kaufman, L. Sudin, M. Shepard, and K. Theriault. "APOD Experiment 1: Final Report", BBN Technologies LLC, Technical Memorandum 1311, May 2002

[7] W. Nelson, W. Farrell, M. Atighetchi, J. Clem, L. Sudin, M. Shepard, and K. Theriault. “APOD Experiment 2: Final Report”, BBN Technologies LLC, Technical Memorandum 1326, Sep, 2002

[8] Joseph Loyall, Partha Pal, Richard Schantz, and Franklin Webber. “Building Adaptive and Agile Applications Using Intrusion Detection and Response.”, Proceedings of NDSS 2000, the Network and Distributed System Security Symposium, February 2-4 2000, San Diego, CA.

[9] John Knight, Dennis Heimbigner, Alexander Wolf, Antonio Carzaniga, Jonathan Hill, Premkumar Devanbu, and Michael Gertz. “The Willow Architecture: Comprehensive Survivability for Large-Scale Distributed Applications”, Proc. Int’l Conf. Dependable Systems and Networks (DSN 02), supplemental vol., IEEE Press, 2002, pp. C.7.1–C.7.8.

[10] Alfonso Valdes, Magnus Almgren, Steven Cheung, Yves Deswarte, Bruno Dutertre, Joshua Levy, Hassen Saidi, Victoria Stavridou, and Tomas E. Uribe. “An Architecture for an Adaptive Intrusion Tolerant Server”, Proc. Security Protocols Workshop, LNCS, Springer-Verlag, 2002.

[11] P.G. Neumann and P.A. Porras. “Experience with EMERALD to Date”, 1st USENIX Workshop on Intrusion Monitoring & Detection, Santa Clara, California, 11-12 April 1999, pp 73-80

[12] P. Verissimo, N. F. Neves, and M. Correia. “The Middleware Architecture of MAFTIA: A Blueprint,” Proc. 3rd IEEE Info. Survivability Workshop, 2000.

[13] Angelos D. Keromytis, Janak Parekh, Philip N. Gross, Gail Kaiser, Vishal Misra, Jason Nieh, Dan Rubenstein, and Sal Stolfo. “A Holistic Approach to Service Survivability”, Proc. ACM Workshop on Survivable and Self-Regenerative Systems, ACM Press, 2003, pp. 11-20.

[14] William H. Sanders. “DPASA Phase II Final Validation Report”. Submitted to DARPA. 2005