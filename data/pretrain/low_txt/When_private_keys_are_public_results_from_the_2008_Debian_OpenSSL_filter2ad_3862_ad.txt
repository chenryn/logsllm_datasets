### 7.1 Mitigating the Possibility of Such Attacks
If keys are not typically generated immediately after boot, the kernel will have an opportunity to gather additional entropy from interrupt timings. This can help mitigate the risk of predictable key generation.

### 7.2 Remote Determination of Processor Architecture
We can also remotely determine the processor architecture. Approximately 80% of the hosts we observed were x86 32-bit, and 20% were x86 64-bit, with a negligible fraction being 32-bit big-endian machines.

### 7.3 Overall Upgrade Rate
Over the course of our survey, 30% of the hosts (49% of HCs) that initially exhibited a vulnerable key remained vulnerable on the last day. The rest either transitioned to a non-vulnerable key or stopped responding. As shown in Figure 1, this was a relatively gradual process for HCs, with notable discontinuities on days 2, 4, 5, 33, and 92. 

- **Day 5, 33, and 92**: These transitions were dominated by Equifax, USERTRUST, and Thawte-issued certificates, respectively.
- **Day 33**: The hosts appear to be operated by the same hosting provider.
- **Day 92**: The hosts appear to be servers at the same site (e.g., www09, www10, etc.).
- **Days 2 and 4**: There is no obvious pattern, which may represent random chance, some undetermined action by the CAs, or upgrading spurred by publicity about the bug.

As evident from Figure 1, the pattern of fixing differs from those reported by Ramos et al. [15] and Rescorla [16]. Instead of a fast exponential decay followed by minimal change, we observe a gentle curve with substantial rates of fixing extending up to 5-6 months. A natural explanation for this curve's shape is the significant baseline hazard of certificate expiration, which is roughly randomly distributed. The "not vulnerable" line in Figure 4 supports this belief.

While the baseline certificate expiration rate is likely a major factor in the long upgrade curve, other factors may also be relevant. For instance, removing all certificates with an expiration time less than 30 days from the upgrade time still shows a substantial amount of upgrading past 75 days. An alternative approach is to compute the hazard ratio: \( h(t)/h_0(t) = e^{\beta(t)} \) for vulnerable versus non-vulnerable certificates. As shown in Figure 7, which displays a spline fit of \(\beta(t)\) (dashed lines indicate two standard error confidence bounds), the excess upgrading does not smoothly decrease but rather increases up to about day 45 and then decays afterward. 

An eventual slowdown below the baseline rate is expected if certificates are changed ahead of schedule, as we do not see the corresponding scheduled replacements.

### 7.4 Factors Affecting the Upgrade Rate
In addition to the overall upgrade rate, it is important to identify factors that predict whether or when a vulnerable certificate/host will be upgraded. We used the Cox Proportional Hazards model to compare the hazard functions, assuming they are roughly constant for all values of time. The advantage of the Cox model is its non-parametric nature, providing a single numeric result for increased risk. However, it does not give meaningful results when the hazard ratio is not constant.

We considered numerous candidate predictors and fit the Cox proportional hazards model using the R `coxph` function and the `stepAIC` procedure for automatic model selection. Due to the small dataset size, we did not consider interactions of predictors. Chi-squared tests were consistent with the proportional hazards assumption for all covariates except key size and expiry during the study, so we stratified on these variables.

The results identified four potentially significant predictors: key size, expiry during the study, CA type, and the number of hosts displaying a particular certificate.

- **Key Size**: 2048-bit keys are upgraded much faster than 1024-bit keys (p < 0.001). There are insufficient 512- and 4096-bit keys to draw conclusions.
- **Expiry During the Study**: Certificates expiring during the study period are more likely to be upgraded (p < 0.001).
- **CA Type**: Hosts with self-signed certificates are significantly slower to fix (p = 0.01). There is no statistically significant difference between other categories.
- **Certiﬁcate Instances**: Certificates appearing on multiple hosts tend to be fixed faster (Figure 11).

### 7.5 Sources of Error
Our data is subject to several sources of error. Most importantly, identifying hosts by IP address can lead to renumbering, causing loss of contact or host substitution. However, this can generally be detected by examining the certificates, and Figure 4 shows a high degree of host stability.

The list of servers surveyed may be biased, as it consists of servers contacted by users of UC San Diego’s campus network over a two-month period. It may display some US-centrism or skew towards sites interesting to an academic community.

Additionally, limitations in our key-generation code may cause us to miss some vulnerable keys. We were unable to check key generation for 64-bit big-endian machines running Debian, although we believe Debian is not widely deployed on these platforms.

### 7.6 Extrapolating the Missing Data
The Debian OpenSSL vulnerability was announced 4-5 days before our first survey, creating a potential source of error. To address this, we examined certificates issued between the announcement and our first survey. VeriSign provided information on 366 certificates, of which less than 10% were revoked, and only 3 of the revoked keys were weak. Most changed certificates were marked as normally reissued or as a first certificate in the system. Thus, we believe there was not a large amount of fixing prior to our study. We plan to expand this analysis in collaboration with VeriSign and other CAs.

### 8. Conclusions
Much is known about how users and administrators respond to software vulnerabilities, but little is known about their response to cryptographic compromise. The Debian OpenSSL vulnerability provided a unique opportunity to measure this response. Using a survey of over 50,000 SSL/TLS-enabled web servers, we found that unlike other vulnerabilities, which typically show a short, fast fixing pattern, the response to this vulnerability was more gradual, extending up to 5-6 months.