### Sequences and Trampolines in Return-Oriented Programming

Sequences that can be used as trampolines are rare, but a single one is sufficient to chain together other instruction sequences, each ending in an indirect jump. This chaining makes it possible to construct a Turing-complete gadget set without return instructions, even in large Linux (x86) or Android (ARM) platform libraries.

#### Implications for Defense Mechanisms

Our new attack has significant implications for recently proposed defense mechanisms against return-oriented programming (ROP). These defenses typically rely on detecting the frequent use of return instructions in the instruction stream, violations of the Last-In-First-Out (LIFO) invariant maintained for the return-address stack, or rewriting binaries to avoid the use of return instructions. Since our attack does not use return instructions, these defenses are ineffective.

#### Open Research Questions

A major open problem suggested by our work is whether there exists a property that all ROP attacks must share, but which is more specific and efficiently checkable than Control-Flow Integrity (CFI). The use of return instructions to chain sequences was thought to be such a property, but we have shown that it is not. Identifying such a property could be a key component in developing more effective and efficient defenses against ROP. Without a narrowly tailored property, it remains unclear whether effective defenses against ROP can be deployed with lower overhead than full CFI.

### Acknowledgments

We would like to thank Thorsten Holz, Tim Kornau, Benny Pinkas, Stefan Savage, and Geoff Voelker for their valuable discussions. This research was supported by the National Science Foundation under Grant No. 0831532. The opinions, findings, and conclusions expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation. The second author was supported by the EU FP7 project CACE, and the third author was supported by the Erasmus Mundus External Co-operation Window Programme of the European Union.

### References

1. M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti. Control-Flow Integrity: Principles, Implementations, and Applications. In V. Atluri, C. Meadows, and A. Juels, editors, Proceedings of CCS 2005, pages 340–53. ACM Press, Nov. 2005.
2. ARM Limited. Procedure Call Standard for the ARM Architecture. [Online]. Available: http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042d/IHI0042D_aapcs.pdf, 2009.
3. E. Buchanan, R. Roemer, H. Shacham, and S. Savage. When Good Instructions Go Bad: Generalizing Return-Oriented Programming to RISC. In P. Syverson and S. Jha, editors, Proceedings of CCS 2008, pages 27–38. ACM Press, Oct. 2008.
4. S. Checkoway, A. J. Feldman, B. Kantor, J. A. Halderman, E. W. Felten, and H. Shacham. Can DREs Provide Long-Lasting Security? The Case of Return-Oriented Programming and the AVC Advantage. In D. Jefferson, J. L. Hall, and T. Moran, editors, Proceedings of EVT/WOTE 2009. USENIX/ACCURATE/IAVoSS, Aug. 2009.
5. S. Checkoway and H. Shacham. Escape from Return-Oriented Programming: Return-Oriented Programming Without Returns (on the x86). Technical Report CS2010-0954, UC San Diego, Feb. 2010.
6. P. Chen, H. Xiao, X. Shen, X. Yin, B. Mao, and L. Xie. DROP: Detecting Return-Oriented Programming Malicious Code. In A. Prakash and I. Sengupta, editors, Proceedings of ICISS 2009, volume 5905 of LNCS, pages 163–77. Springer-Verlag, Dec. 2009.
7. T. Chiueh and F.-H. Hsu. RAD: A Compile-Time Solution to Buffer Overflow Attacks. In P. Dasgupta and W. Zhao, editors, Proceedings of ICDCS 2001, pages 409–17. IEEE Computer Society, Apr. 2001.
8. J. R. Crandall, S. F. Wu, and F. T. Chong. Experiences Using Minos as a Tool for Capturing and Analyzing Novel Worms for Unknown Vulnerabilities. In K. Julisch and C. Krügel, editors, Proceedings of DIMVA 2005, volume 3548 of LNCS, pages 32–50. Springer-Verlag, July 2005.
9. D. Dai Zovi. Practical Return-Oriented Programming. SOURCE Boston 2010, Apr. 2010. Presentation. Slides: http://trailofbits.files.wordpress.com/2010/04/practical-rop.pdf.
10. dark spyrit. Win32 Buffer Overflows (Location, Exploitation and Prevention). Phrack Magazine, 55(15), Sept. 1999. [Online]. Available: http://www.phrack.org/archives/55/p55_0x0f_Win32%20Buffer%20Overflows..._by_dark%20spyrit.txt.
11. L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Return-Oriented Programming Without Returns on ARM. Technical Report HGI-TR-2010-002, Ruhr-University Bochum, July 2010. [Online]. Available: http://www.trust.rub.de/home/_publications/DaDmSaWi2010/.
12. L. Davi, A.-R. Sadeghi, and M. Winandy. Dynamic Integrity Measurement and Attestation: Towards Defense Against Return-Oriented Programming Attacks. In N. Asokan, C. Nita-Rotaru, and J.-P. Seifert, editors, Proceedings of STC 2009, pages 49–54. ACM Press, Nov. 2009.
13. L. Davi, A.-R. Sadeghi, and M. Winandy. ROPdefender: A Detection Tool to Defend Against Return-Oriented Programming Attacks. Technical Report HGI-TR-2010-001, Ruhr-University Bochum, Mar. 2010. [Online]. Available: http://www.trust.rub.de/home/_publications/LuSaWi10/.
14. Ú. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. Necula. XFI: Software Guards for System Address Spaces. In B. Bershad and J. Mogul, editors, Proceedings of OSDI 2006, pages 75–88. USENIX, Nov. 2006.
15. A. Francillon and C. Castelluccia. Code Injection Attacks on Harvard-Architecture Devices. In P. Syverson and S. Jha, editors, Proceedings of CCS 2008, pages 15–26. ACM Press, Oct. 2008.
16. A. Francillon, D. Perito, and C. Castelluccia. Defending Embedded Systems Against Control Flow Attacks. In S. Lachmund and C. Schaefer, editors, Proceedings of SecuCode 2009, pages 19–26. ACM Press, Nov. 2009.
17. M. Frantzen and M. Shuey. StackGhost: Hardware Facilitated Stack Protection. In D. Wallach, editor, Proceedings of USENIX Security 2001, pages 55–66. USENIX, Aug. 2001.
18. S. Gupta, P. Pratap, H. Saran, and S. Arun-Kumar. Dynamic Code Instrumentation to Detect and Recover from Return Address Corruption. In N. Gupta and A. Podgurski, editors, Proceedings of WODA 2006, pages 65–72. ACM Press, May 2006.
19. R. Hund. Listing of Gadgets Constructed on Ten Evaluation Machines. [Online]. Available: http://pi1.informatik.uni-mannheim.de/filepool/projects/return-oriented-rootkit/measurements-ro.tgz, May 2009.
20. R. Hund, T. Holz, and F. Freiling. Return-Oriented Rootkits: Bypassing Kernel Code Integrity Protection Mechanisms. In F. Monrose, editor, Proceedings of USENIX Security 2009, pages 383–98. USENIX, Aug. 2009.
21. Intel Corporation. IA-32 Intel Architecture Software Developer’s Manual, Volume 3: System Programming Guide, 2001.
22. V. Iozzo and C. Miller. Fun and Games with Mac OS X and iPhone Payloads. Black Hat Europe 2009, Apr. 2009. Presentation. Slides: http://www.blackhat.com/presentations/bh-europe-09/Miller_Iozzo/BlackHat-Europe-2009-Miller-Iozzo-OSX-IPhone-Payloads-whitepaper.pdf.
23. T. Kornau. Return Oriented Programming for the ARM Architecture. Master’s thesis, Ruhr-Universität Bochum, Jan. 2010. [Online]. Available: http://zynamics.com/downloads/kornau-tim--diplomarbeit--rop.pdf.
24. S. Krahmer. x86-64 Buffer Overflow Exploits and the Borrowed Code Chunks Exploitation Technique, Sept. 2005. [Online]. Available: http://www.suse.de/~krahmer/no-nx.pdf.
25. J. Li, Z. Wang, X. Jiang, M. Grace, and S. Bahram. Defeating Return-Oriented Rootkits with “Return-Less” Kernels. In G. Muller, editor, Proceedings of EuroSys 2010, pages 195–208. ACM Press, Apr. 2010.
26. F. Lidner. Developments in Cisco IOS Forensics. CONFidence 2.0, Nov. 2009. Presentation. Slides: http://www.recurity-labs.com/content/pub/FX_Router_Exploitation.pdf.
27. D. Litchfield. Defeating the Stack Based Buffer Overflow Prevention Mechanism of Microsoft Windows 2003 Server, Sept. 2003. [Online]. Available: http://www.ngssoftware.com/papers/defeating-w2k3-stack-protection.pdf.
28. C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation. In V. Sarkar and M. W. Hall, editors, Proceedings of PLDI 2005, pages 190–200. ACM Press, June 2005.
29. J. McDonald. Defeating Solaris/SPARC Non-Executable Stack Protection. Bugtraq, Mar. 1999. [Online]. Available: http://seclists.org/bugtraq/1999/Mar/4.
30. R. Naraine. Pwn2Own 2010: iPhone Hacked, SMS Database Hijacked. [Online]. Available: http://blogs.zdnet.com/security/?p=5836, Mar. 2010.
31. Nergal. The Advanced Return-Into-Lib(c) Exploits: PaX Case Study. Phrack Magazine, 58(4), Dec. 2001. [Online]. Available: http://www.phrack.org/archives/58/p58_0x04_Advanced%20return-into-lib(c)%20exploits%20(PaX%20case%20study)_by_nergal.txt.
32. N. Nethercote and J. Seward. Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation. In J. Ferrante and K. S. McKinley, editors, Proceedings of PLDI 2007, pages 89–100. ACM Press, June 2007.
33. T. Newsham. Re: Smashing the Stack: Prevention? Bugtraq, Apr. 1997. [Online]. Available: http://seclists.org/bugtraq/1997/Apr/129.
34. PaX Team. What the Future Holds for PaX, Mar. 2003. [Online]. Available: http://pax.grsecurity.net/docs/pax-future.txt.
35. M. Prasad and T. Chiueh. A Binary Rewriting Defense Against Stack-Based Overflow Attacks. In B. Noble, editor, Proceedings of USENIX Technical 2003, pages 211–24. USENIX, June 2003.
36. G. Richarte. Re: Future of Buffer Overflows? Bugtraq, Oct. 2000. [Online]. Available: http://seclists.org/bugtraq/2000/Nov/32 and http://seclists.org/bugtraq/2000/Nov/26.
37. G. Richarte. Insecure Programming by Example: Esoteric #2. [Online]. Available: http://community.corest.com/~gera/InsecureProgramming/e2.html, July 2001.
38. R. Roemer. Finding the Bad in Good Code: Automated Return-Oriented Programming Exploit Discovery. Master’s thesis, UC San Diego, Mar. 2009. [Online]. Available: https://cseweb.ucsd.edu/~rroemer/doc/thesis.pdf.
39. R. Roemer, E. Buchanan, H. Shacham, and S. Savage. Return-Oriented Programming: Systems, Languages, and Applications. Manuscript, 2009. [Online]. Available: https://cseweb.ucsd.edu/~hovav/papers/rbss09.html.
40. D. Sehr, R. Muth, C. Bifﬂe, V. Khimenko, E. Pasko, K. Schimpf, B. Yee, and B. Chen. Adapting Software Fault Isolation to Contemporary CPU Architectures. In I. Goldberg, editor, Proceedings of USENIX Security 2010, pages 1–11. USENIX, Aug. 2010.
41. H. Shacham. The Geometry of Innocent Flesh on the Bone: Return-Into-Libc Without Function Calls (on the x86). In S. De Capitani di Vimercati and P. Syverson, editors, Proceedings of CCS 2007, pages 552–61. ACM Press, Oct. 2007.
42. S. Sinnadurai, Q. Zhao, and W. fai Wong. Transparent Runtime Shadow Stack: Protection Against Malicious Return Address Modifications. [Online]. Available: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.120.5702, 2008.
43. A. Sotirov and M. Dowd. Bypassing Browser Memory Protections in Windows Vista. [Online]. Available: http://www.phreedom.org/research/bypassing-browser-memory-protections/, Aug. 2008. Presented at Black Hat 2008.
44. G. Tan and J. Croft. An Empirical Security Study of the Native Code in the JDK. In P. Van Oorschot, editor, Proceedings of USENIX Security 2008, pages 365–77. USENIX, July 2008.
45. Vendicator. Stack Shield: A "Stack Smashing" Technique Protection Tool for Linux. [Online]. Available: http://www.angelfire.com/sk/stackshield.
46. P. Vreugdenhil. Pwn2Own 2010 Windows 7 Internet Explorer 8 Exploit. [Online]. Available: vreugdenhilresearch.nl/Pwn2Own-2010-Windows7-InternetExplorer8.pdf, Mar. 2010.
47. B.-J. S. Wever. ALPHA2: Zero Tolerance, Unicode-Proof Uppercase Alphanumeric Shellcode Encoding. [Online]. Available: http://skypher.com/wiki/index.php/ALPHA2, 2004.
48. B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar. Native Client: A Sandbox for Portable, Untrusted x86 Native Code. In A. Myers and D. Evans, editors, Proceedings of IEEE Security and Privacy (“Oakland”) 2009, pages 79–93. IEEE Computer Society, May 2009.