### 1063-9527/03 $17.00 © 2003 IEEE
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021 at 07:42:15 UTC from IEEE Xplore. Restrictions apply.**

## XML User Policy File Format

We have adopted an XML-based policy file format, as illustrated in the following example:

```xml
<example>
    <!-- Example content here -->
</example>
```

To transform this XML policy file into desired formats, we utilized XSL stylesheets. Two XSLT stylesheets were designed (see Figure 1).

**Figure 1. XSL Transformation of XML**

- **KeyNote Policy File Format:** A stylesheet was created to convert the XML policy file into the KeyNote policy file format.
- **Graphical Web-Based Format:** An alternative stylesheet was developed to transform the XML policy file into a more human-readable, graphical web-based format. The transformed output is shown in Figure 6 (see Appendix).

## 5.1. Java-based GUI

While XML provides flexibility for editing the policy file in any XML editor, a graphical user interface (GUI) can enhance usability and reduce errors. This GUI would also allow for the application of global policy decisions across the entire policy file. Experienced system administrators can still benefit from the XML format and edit the file directly if needed.

A Java-based GUI, called the Policy-Editor, was developed to integrate various components of the software [9]. Drop-down menus and dialog boxes guide users through inputting the necessary parameters for the policy file. To facilitate maintenance, a separate XML configuration file was used to provide data for the drop-down menus and combo/list boxes. This decoupling of the Java code from the configuration data allows for continued use of the Policy-Editor without modifying the Java code.

**Figures 5 through 8** are screen shots of the Policy Editor:
- **Figure 2 and Figure 3:** Select ports, operational modes, and security levels.
- **Figure 4 and Figure 5:** Show granular settings for encryption and authentication for specific ports.
- **Figure 6 (see Appendix):** Displays the XSL transformation of the resulting policy file in a graphical and intuitive format.

In addition to the Policy-Editor, a generic XML editor such as XML Spy (Copyright ©1998-2002 Altova GmbH) can be used to view and edit the XML policy file. **Figure 7 (see Appendix)** shows a screen shot of using XML Spy to manipulate the XML policy file directly, including schema validation. **Figure 8 (see Appendix)** depicts the design view of the schema in XML Spy, allowing for specification and analysis of the policy from another perspective.

The security policy management toolkit includes the Java-based Policy-Editor and an XML editor like XML Spy or XML Notepad. While XML editors are not essential, they can assist in file manipulation, transformation, and schema validation.

## 6. Future Work

Our work can be extended in several areas to provide better tools for policy management. Below are some major items that require attention:

### 6.1. Policy File Format

The current XML policy file format could be enhanced with more elaborate tags for additional parameters. Utilizing XML Namespaces and vocabularies could create a more comprehensive policy format [18]. For example, incorporating parameters such as algorithm key length, time-of-day parameters, and other Boolean operators (e.g., inequality definitions) would be beneficial. The policy format should support statements like `esp_enc_alg > DES`, implying 3DES and AES if there is an ordering for 'security strength'. Global policy statements, such as `encryption in crisis mode < 3DES`, and inclusion of IP addresses in policy statements should also be possible. These concepts have been demonstrated in the implementation, but adding more parameters may introduce inconsistencies, which need to be carefully addressed.

### 6.2. Policy Editor Enhancements

The policy editor interface, while complete and functional, can be improved in the following ways:

#### 6.2.1. Global Policy Settings

The policy editor could be modified to enable global policy settings. For instance, a statement like "all ports should have a minimum encryption of DES" or "the maximum encryption algorithm for Crisis mode should not exceed 3DES" could be implemented, assuming a partial ordering of algorithms. The global settings option could set default values for all permissible ports, with more granular changes made as needed.

#### 6.2.2. Translation and Viewing XML

Currently, XML translation and viewing require a general-purpose XML editor. Using Java packages such as Javax, these features could be incorporated into the GUI, eliminating the need for external XML editors.

#### 6.2.3. Schema Validation

Validation of the XML document against DTD and schema needs to be integrated into the GUI. Currently, this is done using tools like XML Spy. DOM/JDOM/SAX could be used for this purpose.

#### 6.2.4. Inconsistency and Contradiction Checks

As the policy file is extended to include global parameters and overlapping rules, inconsistencies and contradictions may arise. Various XML tools could help avoid these issues. Distributed IPsec policies could also lead to policy consistency issues.

### 6.3. XML Interface to KeyNote

Extending the specified XML policy language to a broader XML specification and providing an XML processor in the KeyNote engine would greatly enhance the use of KeyNote. This could reduce parsing overhead and provide the power of XML for better auditing and dynamic trust management. By providing an XML interface to KeyNote, application users could define their own versions of the policy language and use XSL for translating it into the desired KeyNote format, or they could use the vocabulary specified in the KeyNote specifications.

## 7. Conclusion

Security policy management is crucial for managing computer and networking resources. IPsec and KeyNote provide mechanisms for implementing granular security policies. Previous research in the area of 'Quality of Security Service' demonstrates how adaptive security policies can enhance security with optimal resource utilization. A key challenge was specifying a well-defined, granular, error-free, and consistent security policy in the language understood by the KeyNote trust management engine. We have presented a solution in the form of an easy-to-use yet powerful security policy editor. The use of XML technology as a middle layer combines the security of KeyNote with the simplicity of a policy editor, providing all the benefits of XML, such as XSL and XML security. While XSL was extensively used, XML security tools could also be utilized in future work.

## References

[1] Agar, Christopher. *Dynamic Parameterization of IPsec*. Master of Science Thesis, Department of Computer Science, Naval Postgraduate School, December 2001.

[2] Keromytis, A. D., Ioannidis, J., and Smith, J. M. *Implementing IPsec*. In Proceedings of the IEEE Global Internet (GlobeCom) 1997, pp. 1948 - 1952. November 1997, Phoenix, AZ.

[3] Blaze, M., Feigenbaum, J., Ioannidis, J., and Keromytis, A. D. *The KeyNote Trust Management System Version 2*. (RFC 2704, Network Working Group, September 1999). http://www.ietf.org/rfc/rfc2404.txt

[4] Blaze, M., Feigenbaum, J., and Keromytis, A. D. *KeyNote: Trust Management for Public-Key Infrastructures*. In Proceedings of the 1998 Security Protocols International Workshop, Springer LNCS vol. 1550, pp. 59 - 63. April 1998, Cambridge, England. Also AT&T Technical Report 98.11.1.

[5] Blaze, M., Ioannidis, J., and Keromytis, A. D. *Trust Management and Network Security Protocols*. In Proceedings of the 1999 Security Protocols International Workshop, April 1999, Cambridge, England.

[6] Blaze, M., Ioannidis, J., and Keromytis, A. D. *Trust Management for IPsec*. In Proceedings of the Internet Society Symposium on Network and Distributed Systems Security (SNDSS) 2001, pp. 139 - 151. February 2001, San Diego, CA.

[7] Hunter, D., Cagle, K., Dix, C., Kovack, R., Pinnock, J., and Rafter, J. *Beginning XML 2nd Edition*. Wrox Press Ltd, 2002.

[8] Irvine, C. E. and Levin, T. *Quality of Security Service*. Proceedings of the New Security Paradigms Workshop, Cork, Ireland, September 2000.

[9] *Java 2 Standard Edition, V1.2.2 API Specification*. http://java.sun.com/products/jdk/1.2/docs/api/, Sun Microsystems, Inc., 1999.

[10] Kent, S. and Atkinson, R. *Security Architecture for the Internet Protocol*. RFC2401, Network Working Group, November 1998. http://www.ietf.org/rfc/rfc2401.txt

[11] Maughan, D., Schertler, M., Schneider, M., and Turner, J. *Internet Security Association and Key Management Protocol (ISAKMP)*. RFC 2408, Network Working Group, November 1998. http://www.ietf.org/rfc/rfc2409.txt

[12] Mohan, R. *XML Based Adaptive Policy Management in a Trust Management System Context*. Masters Thesis, Naval Postgraduate School, Monterey, CA, September 2002.

[13] Spyropoulou, Evdoxia., Agar, Christopher D., Levin, Timothy, and Irvine, Cynthia. *IPsec Modulation for the Quality of Security Service*. NPS-CS-02-001, Naval Postgraduate School, January 2002.

[14] Spyropoulou, Evdoxia., Levin, Timothy, and Irvine, Cynthia. *Demonstration of Quality of Security Service Awareness for IPsec*. NPS-CS-02-003, Naval Postgraduate School, January 2002.

[15] Thayer, R., Doraswamy, N., and Glenn, R. *IP Security Document Roadmap*. RFC 2411, Network Working Group, November 1998. http://www.ietf.org/rfc/rfc2411.txt

[16] *XML Specification*. http://www.w3.org/TR/2000/REC-xml-20001006, August 2002.

[17] *XML Schema Specifications*. http://www.w3.org/TR/xmlschema-0, August 2002.

[18] *XML Namespace Recommendation*. http://www.w3.org/TR/REC-xml-names/

[19] *XSLT Specifications*. http://www.w3.org/TR/xslt, August 2002. RFC2396

## Appendix: Detailed Screen Illustrations

**Figure 6. XSL Transformation of the Policy File**

**Figure 7. Editing and Validation of XML Policy File Using XML Spy**

**Figure 8. Schema Design View of the XML Policy Document**

---

**Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003)**  
1063-9527/03 $17.00 © 2003 IEEE  
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021 at 07:42:15 UTC from IEEE Xplore. Restrictions apply.**