# 634 sec
## Table 1. Static-Analysis Statistics
This section does not detail the time required for dynamic analysis, as it is an interactive process and its duration depends on the analyst's experience with ACE. In our experience, it takes approximately one minute to evaluate each statically-detected authorization requirement.

| Name         | Static Authorization Requirements | Dynamic Refinement |
|--------------|----------------------------------|---------------------|
| Aamfetch     | 5                                | 49                  |
| Crypto       | 7                                | 24                  |
| Ganymed      | 6                                | 45                  |
| Gnu          | 15                               | 51                  |
| JavaSign     | 4                                | 19                  |
| JPassword    | 3                                | 27                  |

| Imprecise | Actual Precise Minimized |
|-----------|--------------------------|
| 40        | 6                        |
| 2         | 12                       |
| 38        | 3                        |
| 17        | 11                       |
| 10        | 6                        |
| 19        | 6                        |

| Privilege-Assertion Requirements | Static | Dynamic Refinement |
|----------------------------------|--------|--------------------|
| False                            | 5      | 40                 |
| Imprecise                        | 16     | 24                 |
| Precise                          | 78     | 66                 |
| Total                            | 28     | 144                |

| Actual | Precise Minimized | Total |
|--------|-------------------|-------|
| 20     | 9                 | 28    |
| 14     | 43                | 78    |
| 37     | 0                 | 37    |
| 187    | 32                | 113   |

## Table 2. ACE Authorization and Privileged-Code Requirement Findings

Table 2 focuses on the security results. Specifically, for each application, it shows the following:

1. **Number of Authorization Requirements (s)**: Detected using only static analysis.
2. **Number of False Alarms (f)**: Detected by refining the static analysis results using the dynamic analyzer of ACE.
3. **Number of Actual Requirements (a)**: These are real requirements and include:
   - **Imprecise Authorization Requirements (i)**: Actual but imprecise, such as a FilePermission requirement where the file name could not be disambiguated due to the static analysis's inability to perform String computations.
   - **Precise Authorization Requirements (p)**: Actual and precise.
   - **Minimized Permission Requirements (m)**: After policy minimization, as discussed in Section 4.5.

Note that \( s = f + i + p \) since an authorization requirement found by the static analysis can only be false or actual, and if it is actual, it can only be imprecise or precise. Generally, \( m \leq s \). Table 2 demonstrates the usefulness of this combined approach, as it allows for the detection of authorization requirements (though conservatively) and then uses the dynamic analyzer to significantly reduce the number of requirements found.

Next, Table 2 shows the results obtained by using ACE to detect privilege-assertion requirements, as follows:

1. **Number of Privilege-Assertion Requirements (s)**: Detected using only static analysis.
2. **Number of False Alarms (f)**: Among those privilege-assertion requirements.
3. **Number of Actual Requirements (a)**: This category includes:
   - **Imprecise Privilege-Assertion Requirements (i)**: Actual but imprecise, as the Permission objects associated with the privilege-assertion requirement could not be uniquely disambiguated.
   - **Precise Privilege-Assertion Requirements (p)**: Actual and precise.
   - **Total Number of Actual Privilege-Assertion Requirements (t)**: Where \( t = i + p \).

In this case, \( s = f + i + p \) and \( t = i + p \), as privilege-assertion requirements cannot be minimized.

The combined static and dynamic analysis approach dramatically improves a process that, if done manually, would be impractical. With the exhaustive model for native methods included in the static analyzer of ACE, no false negatives were observed.

## 6. Conclusion and Future Work
This paper describes a combination of static and dynamic analysis for precise identification of access-control policies. The algorithms have been implemented in a tool called Access-Control Explorer (ACE), which has been used on several production-level applications.

Future areas of investigation will involve improving the precision of the static analyzer of ACE to reduce the number of false alarms and simplify the dynamic analysis. Currently, the static analyzer of ACE employs a very expensive context-sensitivity policy, which adds precision indiscriminately, even where it is not needed, thereby reducing scalability. It would be desirable to automatically increase the precision of the static analyzer when modeling security-sensitive calls, while reducing the precision where security is not needed. In particular, the context-sensitivity policy used by ACE disambiguates different calls to the same method based on the receiver and parameters. If a method is static and takes no parameters, all calls to it will be represented by only one node in the call graph, creating a pollution point when modeling stack inspection through that node. A research direction will involve a more precise and selective context-sensitivity policy that eliminates this problem. Furthermore, integrating static authorization analysis with an analysis for string computations will help in eliminating many false alarms.

## 7. Related Work
The need for integration of static and dynamic analysis has been known for a long time. Orso et al. [23] have combined static and dynamic analysis for networking modeling, discovery, and analysis. Our work distinguishes itself from that work because it precisely addresses the need for a precise authorization and privilege-assertion analysis. Ernst [12] discusses synergies and similarities of static and dynamic analysis, and how these two approaches can be integrated to achieve optimal results in a wide range of problems.

Felten et al. study a number of security problems related to mobile code [34, 8, 36, 5, 35, 7, 6] and present a formalization of stack introspection that examines authorization based on the principals currently active in a thread stack at runtime (security state). An authorization optimization technique, called Security-Passing Style (SPS), encodes the security state of an application while the application is executing [36]. Each method is modified to pass a security token as part of each invocation. The token represents an encoding of the security state at each stack frame, as well as the result of any authorization test encountered. With this mechanism, the SPS explores subgraphs of the comparable invocation graph and discovers the associated security states and authorizations. Their goal is to optimize the authorization performance, while one of the purposes of this paper is to discover authorization requirements by analyzing all possible paths through the program, even those that may not be discovered by a limited number of test cases.

Pottier et al. [29] extend and formalize the SPS via type theory using a λ-calculus, called λsec. However, their work does not address incomplete-program analysis [30]. Jensen et al. [18] focus on proving that code is secure with respect to a global security policy. Their model uses operational semantics to prove the properties, using a two-level temporal logic, and shows how to detect redundant authorization tests. They assume all of the code is available for analysis and that a call graph can be constructed for the code, though they do not do so themselves. Bartoletti et al. [3] are interested in optimizing the performance of runtime authorization testing by eliminating redundant tests and relocating others as needed. The reported results apply operational semantics to model the runtime stack.

Rather than analyzing security policies as embodied by existing code, Erlingsson and Schneider [11] describe a system that inlines reference monitors into the code to enforce specific security policies. The objective is to define a security policy and then inject authorization points into the code. This approach can reduce or eliminate redundant authorization tests. Conversely, this paper examines the authorization issue from the perspective of an existing system containing authorization test points. Through static analysis, the mathematical framework of this paper can be used to discover how the security policy needs to be modified or updated to enable the code to execute.

Hajime and Forrest [17] present a dynamic permission analysis. Their solution is not interactive, does not deal with security side effects, is not integrated with a static-analysis solution, and does not deal with privilege-asserting code. Additionally, it does not prevent a malicious program from harming the underlying system; all the permissions requested by a program are automatically granted, with the risk of compromising the underlying system.

Privileged code has historic roots in the 1970s. The Digital Equipment Corporation (DEC) Virtual Address eXtension/Virtual Memory System (VAX/VMS) operating system had a feature similar to privilege assertion, called privileged images. Those images were similar to UNIX setuid programs [4], except that they ran in the same process as all the user’s other unprivileged programs. As such, they were considerably easier to attack than UNIX setuid programs because they lacked the usual separate process/separate address space protections, as shown by Koegel et al. [19]. Koved et al. [20] and Pistoia et al. [26] automate static security analysis for Java authorization and privilege assertion. Zhang et al. [37] enhance those works with an automated native-code model generator to reduce the number of false negatives. This paper extends those works with a more precise static analysis and a novel dynamic analysis for elimination of false alarms.

## 8. Acknowledgments
The authors would like to thank the reviewers of the Twenty-Third Annual Computer Security Applications Conference (ACSAC 2007) for their valuable suggestions.

## References
[1] A. V. Aho, R. Sethi, and J. D. Ullman. Compilers: Principles, Techniques, and Tools. Addison-Wesley, Reading, MA, USA, Jan. 1986.
[2] L. O. Andersen. Program Analysis and Specialization for the C Programming Language. PhD thesis, University of Copenhagen, May 1994.
[3] M. Bartoletti, P. Degano, and G. L. Ferrari. Static Analysis for Stack Inspection. In Proceedings of International Workshop on Concurrency and Coordination, Electronic Notes in Theoretical Computer Science, volume 54, Amsterdam, The Netherlands, 2001. Elsevier.
[4] H. Chen, D. Wagner, and D. Dean. Setuid Demystified. In Proceedings of the 11th USENIX Security Symposium, pages 171–190, Berkeley, CA, USA, August 2002. USENIX Association.
[5] D. Dean. The Security of Static Typing with Dynamic Linking. In Proceedings of the 4th ACM conference on Computer and Communications Security, pages 18–27, Zurich, Switzerland, 1997. ACM Press.
[6] D. Dean, E. W. Felten, and D. S. Wallach. Java Security: From HotJava to Netscape and beyond. In Proceedings of the 1996 IEEE Symposium on Security and Privacy, pages 190–200, Silver Spring, MD, USA, 1996. IEEE Computer Society Press.
[7] D. Dean, E. W. Felten, D. S. Wallach, and D. Balfanz. Java Security: Web Browsers and Beyond. Technical Report 566-597, Princeton University, Princeton, NJ, USA, February 1997.
[8] R. D. Dean. Formal Aspects of Mobile Code Security. PhD thesis, Princeton University, Princeton, NJ, USA, Jan. 1999.
[9] Eclipse Project, http://www.eclipse.org.
[10] Equinox Project, http://www.eclipse.org/equinox.
[11] U. Erlingsson and F. B. Schneider. IRM Enforcement of Java Stack Inspection. In Proceedings of the 2000 IEEE Symposium on Security and Privacy, pages 246–255, Oakland, CA, USA, May 2000. IEEE Computer Society.
[12] M. D. Ernst. Static and Dynamic Analysis: Synergy and Duality. In Proceedings of the Program Analysis for Software Tools and Engineering (PASTE 2004) Workshop, pages 24–27, June 2004.
[13] A. Freeman and A. Jones. Programming .NET Security. O’Reilly & Associates, Inc., Sebastopol, CA, USA, June 2003.
[14] L. Gong, G. Ellison, and M. Dageforde. Inside Java 2 Platform Security: Architecture, API Design, and Implementation. Addison-Wesley, Reading, MA, USA, second edition, May 2003.
[15] G. Grätzer. General Lattice Theory. Birkhäuser, Boston, MA, USA, second edition, January 2003.
[16] D. Grove and C. Chambers. A Framework for Call Graph Construction Algorithms. ACM Trans. Program. Lang. Syst., 23(6):685–746, November 2001.
[17] H. Inoue and S. Forrest. Inferring Java Security Policies Through Dynamic Sandboxing. In International Conference on Programming Languages and Compilers, Las Vegas, NE, USA, June 2005.
[18] T. P. Jensen, D. L. Métayer, and T. Thorn. Verification of Control Flow Based Security Properties. In Proceedings of the 1999 IEEE Symposium on Security and Privacy, pages 89–103, Oakland, CA, USA, May 1999.
[19] J. F. Koegel, R. M. Koegel, Z. Li, and D. T. Miruke. A Security Analysis of VAX VMS. In ACM '85: Proceedings of the 1985 ACM Annual Conference on the Range of Computing: Mid-80’s Perspective, pages 381–386. ACM Press, 1985.
[20] L. Koved, M. Pistoia, and A. Kershenbaum. Access Rights Analysis for Java. In Proceedings of the 17th ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, pages 359–372, Seattle, WA, USA, November 2002. ACM Press.
[21] B. Livshits, J. Whaley, and M. S. Lam. Reflection Analysis for Java. In Proceedings of the 3rd Asian Symposium on Programming Languages and Systems, pages 139–160, Nov. 2005.
[22] S. S. Muchnick. Advanced Compiler Design and Implementation. Morgan Kaufmann Publishers Inc., San Francisco, CA, USA, June 1997.
[23] A. Orso, M. J. Harrold, and G. Vigna. MASSA: Mobile Agents Security through Static/Dynamic Analysis. In Proceedings of the First ICSE Workshop on Software Engineering and Mobility (WSEM 2001), Toronto, Canada, April 2001.
[24] OSGi Specification, http://www.osgi.org.
[25] M. Pistoia, A. Banerjee, and D. A. Naumann. Beyond Stack Inspection: A Unified Access Control and Information Flow Security Model. In 28th IEEE Symposium on Security and Privacy, pages 149–163, Oakland, CA, USA, May 2007.
[26] M. Pistoia, R. J. Flynn, L. Koved, and V. C. Sreedhar. Interprocedural Analysis for Privileged Code Placement and Tainted Variable Detection. In Proceedings of the 19th European Conference on Object-Oriented Programming, pages 362–386, Glasgow, Scotland, UK, July 2005. Springer-Verlag.
[27] M. Pistoia, N. Nagaratnam, L. Koved, and A. Nadalin. Enterprise Java Security. Addison-Wesley, Reading, MA, USA, February 2004.
[28] M. Pistoia, D. Reller, D. Gupta, M. Nagnur, and A. K. Ramani. Java 2 Network Security. Prentice Hall PTR, Upper Saddle River, NJ, USA, second edition, August 1999.
[29] F. Pottier, C. Skalka, and S. F. Smith. A Systematic Approach to Static Access Control. In Proceedings of the 10th European Symposium on Programming Languages and Systems, pages 30–45. Springer-Verlag, 2001.
[30] B. G. Ryder. Dimensions of Precision in Reference Analysis of Object-Oriented Languages. In Proceedings of the 12th International Conference on Compiler Construction, pages 126–137, Warsaw, Poland, April 2003. Invited Paper.
[31] J. H. Saltzer and M. D. Schroeder. The Protection of Information in Computer Systems. In Proceedings of the IEEE, volume 63, pages 1278–1308, Sept. 1975.
[32] SourceForge.net, http://www.sourceforge.net.
[33] Sun Microsystems, JavaTM Technology, http://java.sun.com.
[34] D. S. Wallach. A New Approach to Mobile-Code Security. PhD thesis, Princeton University, Princeton, NJ, USA, Jan. 1999.
[35] D. S. Wallach, D. Balfanz, D. Dean, and E. W. Felten. Extensible Security Architectures for Java. In Proceedings of the 16th ACM Symposium on Operating Systems Principles, pages 116–128, Saint Malo, France, 1997. ACM Press.
[36] D. S. Wallach and E. W. Felten. Understanding Java Stack Inspection. In Proceedings of the 1998 IEEE Symposium on Security and Privacy, pages 52–63, Oakland, CA, USA, May 1998.
[37] X. Zhang, L. Koved, M. Pistoia, S. Weber, T. Jaeger, G. Marceau, and L. Zeng. The Case for Analysis Preserving Language Transformation. In Proceedings of the ACM SIGSOFT 2006 International Symposium on Software Testing and Analysis (ISSTA). ACM Press, July 2006.