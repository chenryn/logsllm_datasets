### 4.3.2 Enabling Memory with External Dependencies

Our approach replaces the transition to be extended by two subnets: one internal to the component, which models its internal evolution, and a dependency subnet that models its interaction with other components. The initial model is depicted in Figure 12(a). In this model, we assume that \( T_1 \), \( T_{\text{dis}1} \), and \( T_{\text{dis}2} \) are exponentially distributed. Suppose that, during the refinement of \( T_1 \)'s distribution, its timer becomes dependent on \( T_{\text{dis}1} \) and \( T_{\text{dis}2} \). The transformed model is shown in Figure 12(b).

A token is placed in \( P_{\text{dep}} \) each time the timer of transition \( T_1 \) needs to be restarted due to an event that disables the event modeled by \( T_1 \) (i.e., the firing of \( T_{\text{dis}1} \) or \( T_{\text{dis}2} \) in other component models). This process is carried out in two steps:

1. **Token Removal**: As soon as place \( P_{\text{dep}} \) is marked, transitions \( t'_1 \), \( t'_2 \), and \( t'_3 \) are fired as many times as needed to remove all tokens from these three places.
2. **Return to Initial State**: The return to the initial state is performed by transition \( t_4 \), which removes a token from place \( P_{\text{dep}} \) and places one token in place \( P_{c1} \), after places \( P_1 \), \( P_2 \), and \( P_3 \) are empty.

Note that transitions \( t'_1 \), \( t'_2 \), and \( t'_3 \) replace \( t_1 \), \( t_2 \), and \( t_3 \), respectively. Additionally, Figure 12(b) has been simplified by replacing place \( P_k \) with an inhibitor arc between \( t'_4 \) and \( P_{c1} \). The two major differences between Figures 11 and 12(b) are:
1. Place \( P_1 \) in Figure 12(b) is replaced by an inhibitor arc going from place \( P_{c1} \) to immediate transition \( t \).
2. Place \( P_{\text{dep}} \), which manages dependencies between this net and the rest of the model, is added.

### 5. Application to I&C Systems

In this section, we illustrate our modeling approach. Due to space limitations, only a small part of the model is presented. We start by presenting the functional-level model for a general I&C system, followed by a description of how the high-level dependability model is built for one of the I&C systems. Finally, we show some results concerning a small part of a detailed dependability model.

An I&C system performs five main functions: Human-Machine Interface (HMI), Processing (PR), Archiving (AR), Management of Configuration Data (MD), and Interface with Other Parts of the I&C System (IP). These functions are linked by partial dependencies: HMI - {AR, MD}, PR - MD, AR - MD, and IP - MD. These relationships are modeled by the functional-level model shown in Figure 13.

To illustrate the second step of our modeling approach, we consider an I&C system composed of five nodes connected by a Local Area Network (LAN). The mapping between the various nodes and their functions is given in Figure 14. Note that while HMI is executed on four nodes, Node 5 runs three functions. Nodes 1 to 4 each consist of one computer, whereas Node 5 is fault-tolerant, composed of two redundant computers.

The initial structural model of this I&C system is built as follows:
- **Nodes 1 to 3**: Each node achieves a single function with one software component on a hardware component. The model is similar to those presented in Figures 5 and 15 (to be explained later).
- **Node 4**: Has two partially dependent functions. Its functional-level model will be similar to \( F_1 \) and \( F_2 \)'s functional-level model given in Figure 4(b). Its structural model will be similar to the one depicted in Figure 7, followed by a slightly more complex model than the one in Figure 15.
- **Node 5**: Comprises two hardware components, each with three independent functions. Its structural model is more complex than the one in Figure 15 due to the redundancy.

### 6. Conclusions

Our modeling approach builds upon existing work on dependability modeling but uniquely incorporates the system's functional specifications into the dependability model through a functional-level model. This allows for the modeling of a system from its functional specification to its implementation. While existing refinement techniques aim to preserve result values, ours provides more accurate models and associated results.

The modeling approach presented in this paper offers a generally applicable process for system analysis based on Generalized Stochastic Petri Nets (GSPNs). This process involves a stepwise refinement where dependencies are introduced at the appropriate level of refinement. A careful and precise definition of the constructs and the refinement process is provided. We have shown how starting from functional specifications, a functional-level model can be progressively transformed into a dependability model that takes into account the system's structure. We have also demonstrated how the structural model can be refined to incorporate more detailed information about the system's behavior.

Refinement is a powerful tool for mastering progressive model construction, allowing experienced but not necessarily specially-trained modelers to analyze the dependability of one or several systems and compare their dependability at the same level of modeling abstraction, if required.

This approach was illustrated using simple examples related to a specific structure of an instrumentation and control system in power plants. However, it has been applied to three different I&C systems to identify their strengths and weaknesses, aiding in the selection of the most appropriate system.

### Acknowledgements

The authors wish to thank Mohamed Kâaniche for his helpful comments on an earlier version of this paper. We also wish to thank the anonymous reviewers for their useful suggestions for improvement.

### References

[1] M.A. Ajmone Marsan and G. Chiola. On Petri Nets with Deterministic and Exponentially Distributed Firing Time. LNCS 266:132–145, 1987.
[2] M.A. Ajmone Marsan, G. Balbo, G. Conte, S. Donatelli, and G. Franchescinis. Modelling with Generalized Stochastic Petri Nets. Series in Parallel Computing, Wiley, 1995.
[3] C. Betous-Almeida and K. Kanoun. Dependability Evaluation: From Functional to Structural Modelling. Proc. 20th Int. Conf. on Computer Safety, Reliability and Security (SAFECOMP 2001), LNCS 2187:227–237, 2001.
[4] C. Béounes et al. SURF-2: A Program for Dependability Evaluation of Complex Hardware and Software Systems. Proc. 23rd. Int. Symp. on Fault-Tolerant Computing (FTCS-23), 668–673, 1993.
[5] A. Bondavalli, I. Mura, and K.S. Trivedi. Dependability Modelling and Sensitivity Analysis of Scheduled Maintenance Systems. Proc. 3rd European Dependable Computing Conf. (EDCC-3), LNCS 1667:7–23, 1999.
[6] P. Chen, S.C. Bruell, and G. Balbo. Alternative Methods for Incorporating Non-Exponential Distributions into Stochastic Timed Petri Net. Proc. of the 3rd Int. Workshop on Petri Nets and Performance Models (PNPM’89), IEEE Computer Society Press:187–197, December 1989.
[7] D.R. Cox and H.D. Miller. The Theory of Stochastic Processes. Chapman and Hall Ltd, 1965.
[8] M. Felder, A. Gargantini, and A. Morzenti. A Theory of Implementation and Refinement in Timed Petri Net. Theoretical Computer Science, 202(1–2):127–161, 1998.
[9] N. Fota, M. Kâaniche, and K. Kanoun. Incremental Approach for Building Stochastic Petri Nets for Dependability Modeling. Statistical and Probabilistic Models in Reliability (D. C. Ionescu and N. Limnios, Eds.):321–335, Birkhäuser, 1999.
[10] K. Kanoun, M. Borrel, T. Morteveille, and A. Peytavin. Availability of CAUTRA, a Subset of the French Air Traffic Control System. IEEE Trans. on Computers, 48(5):528–535, May 1999.
[11] M. Rabah and K. Kanoun. Dependability Evaluation of a Distributed Shared Memory Multiprocessor System. Proc. 3rd European Dependable Computing Conf. (EDCC-3), LNCS 1667:42–59, 1999.
[12] I. Suzuki and T. Murata. A Method for Stepwise Refinement and Abstraction of Petri Net. Journal of Computer and System Sciences, 27:51–76, 1983.
[13] R. Valette. Analysis of Petri Nets by Stepwise Refinement. Journal of Computer and System Sciences, 18(1):35–46, February 1979.

---

**Proceedings of the International Conference on Dependable Systems and Networks (DSN’02)**  
**0-7695-1597-5/02 $17.00 © 2002 IEEE**  
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 04:12:51 UTC from IEEE Xplore. Restrictions apply.**