### Enhancing Security in Mobile Device Bootloaders

#### Introduction
In this section, we discuss the use of eMMC Power-on Write-protect and Replay-protected Memory Blocks (RPMB) to enhance the security of mobile device bootloaders. These features are part of the eMMC standard and can be leveraged to prevent unauthorized modifications to critical partitions.

#### eMMC Power-on Write-protect
eMMC Power-on Write-protect can be used to prevent any partition that the bootloader must read from being controlled by an attacker with root privileges. Before executing the kernel contained in the boot partition, the final stage bootloader should enable write protection for every partition it uses to boot the device. In Android, the system and boot partitions contain entirely read-only data (excluding during OS updates), which the bootloader must read for verification. Therefore, these partitions can be easily protected using write-protection.

To close any loopholes related to unlocking the bootloader, the partition holding the device’s security state should also be write-protected. For example, Qualcomm devices use the misc partition to store data written by the OS. To address this, an additional partition can be created to hold the security state, thereby alleviating the problem without impeding any functionality or causing any impact to the user.

However, this method cannot protect the "Allow OEM Unlock" option in the Android Settings menu, as it is designed to be writable by the OS. This means that a privileged process can change this setting, but unlocking the bootloader still requires physical control of the device.

#### Alternative: Security State in RPMB
If eMMC Power-on Write-Protect is not feasible, the security state can be stored in the Replay-protected Memory Block (RPMB) portion of the eMMC module. This ensures that only TrustZone, which holds the key needed to write the data successfully, can alter the security state.

When the device boots to the final stage bootloader, it signals to TrustZone, allowing modifications to the security state via an additional command. Once the bootloader is ready to boot the Android OS, it signals again to TrustZone, which disallows all writes to the device until it reboots. This approach requires minor modifications to the Trusted OS and final-stage bootloader but does not require changes to the write-protection status or partition layout.

#### Related Work
**Trusted Boot Implementations and Vulnerabilities**
Methods that utilize the bootloader to bootstrap a trusted environment have been extensively studied. Recent Intel-based PC systems use UEFI Secure Boot, a similar mechanism for providing verification of operating system components at boot-time. However, this has also been prone to vulnerabilities. For instance, Wojtczuk et al. [34] and Kallenberg et al. [14] have demonstrated how unprivileged code can exploit vulnerabilities and design flaws to tamper with the SPI-flash content, breaking the chain-of-trust in Intel systems. Similar vulnerabilities have been found on Mac platforms using maliciously crafted Thunderbolt devices [13, 12]. Other research has focused on the Windows bootloader, built on top of UEFI, and how it can be exploited [4, 25].

Bazhaniuk et al. [2] provided a comprehensive study of different types of vulnerabilities found in UEFI firmware and proposed some mitigations. Rutkowska [26] presented an overview of technologies available in Intel processors for enforcing a trusted boot process. These works highlight the complexity of these systems, where different components developed by various entities must collaborate, leading to both classic vulnerabilities (such as memory corruption) and hard-to-fix design issues. Our work shows that these challenges also exist in the mobile world.

**Automatic Vulnerability Discovery**
Our approach, as outlined in Section 6, attempts to automatically locate vulnerabilities statically. Other approaches include fully-dynamic analysis, such as coverage-based fuzzing [36], or hybrid systems like Driller [10] and Dowser [29], which switch between static and dynamic analysis. Unfortunately, we could not use any approach leveraging concrete dynamic execution due to the tight coupling of bootloaders and the hardware they run on. Previous work has explored hardware-in-the-loop approaches [35, 15] to address this issue, but none of these can be adapted to our platform.

Many previous works have proposed statically locating memory corruption vulnerabilities, including Mayhem [5] and IntScope [32], focusing on user-land programs. These approaches are not directly applicable to our goals, as we focus on more than just memory corruption and require ad-hoc modeling and identification of sources and sinks. FirmAlice [27] proposes a technique for locating authentication bypass vulnerabilities in firmware, but it detects the absence of user input, whereas our focus is on the presence and specific uses of user input.

#### Conclusion
We presented an analysis of modern mobile device bootloaders, showing that current standards and guidelines are insufficient to guide developers toward creating secure solutions. We implemented a static analysis approach to find locations where bootloaders accept input from an adversary able to compromise the primary operating system. We evaluated our approach on bootloaders from four major device manufacturers and discovered six previously-unknown memory corruption or denial of service vulnerabilities, as well as two unlock-bypass vulnerabilities. We also proposed mitigation strategies to limit the attack surface of the bootloader and enforce desirable properties aimed at safeguarding the security and privacy of users.

#### Acknowledgements
We would like to thank our reviewers for their valuable comments and input to improve our paper. We also thank Terry O. Robinson for several insightful discussions. This material is based on research sponsored by the Office of Naval Research under grant numbers N00014-15-1-2948 and N00014-17-1-2011, DARPA under agreement number N66001-13-2-4039, and the NSF under Award number CNS-1408632. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of DARPA or the U.S. Government. This work is also sponsored by a gift from Google’s Anti-Abuse group.

#### References
[1] ARM. ARM TrustZone. http://www.arm.com/products/processors/technologies/trustzone/index.php, 2015.
[2] Bazhaniuk, O., Bulygin, Y., Furtak, A., Gorobets, M., Loucaides, J., Matrosov, A., and Shkatov, M. Attacking and Defending BIOS in 2015. In REcon (2015).
[3] Bazhaniuk, O., Loucaides, J., Rosenbaum, L., Tuttle, M. R., and Zimmer, V. Symbolic execution for bios security. In Proceedings of the 2015 USENIX Conference on Offensive Technologies (Washington, DC, USA, 2015), WOOT’15.
[4] Bulygin, Y., Furtak, A., and Bazhaniuk, O. A tale of one software bypass of Windows 8 Secure Boot. Black Hat USA (2013).
[5] Cha, S. K., Avgerinos, T., Rebert, A., and Brumley, D. Unleashing mayhem on binary code. In Proceedings of the 2012 IEEE Symposium on Security and Privacy (San Jose, CA, USA, 2012), SP ’12.
[6] GitHub. ARM Trusted Firmware. https://github.com/ARM-software/arm-trusted-firmware, 2017.
[7] Google. https://support.google.com/nexus/answer/6172890?hl=en, 2016.
[8] Google. Verifying Boot. https://source.android.com/security/verifiedboot/verified-boot.html, 2017.
[9] GSMA. Anti-theft Device Feature Requirements, 2016.
[10] Haller, I., Slowinska, A., Neugschwandtner, M., and Bos, H. Dowsing for overflows: A guided fuzzer to find buffer boundary violations. In Proceedings of the 2013 USENIX Conference on Security (Washington, DC, USA, 2013), SEC’13.
[11] Hex-Rays. IDA Pro. https://www.hex-rays.com/products/ida/index.shtml, 2017.
[12] Hudson, T., Kovah, X., and Kallenberg, C. Thunder-Strike 2: Sith Strike. Black Hat USA (2015).
[13] Hudson, T., and Rudolph, L. Thunderstrike: EFI firmware bootkits for Apple MacBooks. In Proceedings of the 2015 ACM International Systems and Storage Conference (New York, NY, USA, 2015), SYSTOR ’15.
[14] Kallenberg, C., Kovah, X., Butterworth, J., and Cornwell, S. Extreme privilege escalation on Windows 8/UEFI systems. BlackHat, Las Vegas, USA (2014).
[15] Koscher, K., Kohno, T., and Molnar, D. SURROGATES: enabling near-real-time dynamic analyses of embedded systems. In Proceedings of the 2015 USENIX Conference on Offensive Technologies (Washington, D.C., 2015), WOOT’15.
[16] Lady, K. Sixty Percent of Enterprise Android Phones Affected by Critical QSEE Vulnerability. https://duo.com/blog/sixty-percent-of-enterprise-android-phones-affected-by-critical-qsee-vulnerability, 2016.
[17] Micron Technologies. eMMC Security Features, 2016.
[18] Ming, J., Wu, D., Xiao, G., Wang, J., and Liu, P. Taint-pipe: Pipelined symbolic taint analysis. In Proceedings of the 2015 USENIX Conference on Security Symposium (Washington, DC, USA, 2015), SEC’15.
[19] MITRE. LK bootloader security vulnerability, CVE-2014-9798. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-9798.
[20] Mutti, S., Fratantonio, Y., Bianchi, A., Invernizzi, L., Corbetta, J., Kirat, D., Kruegel, C., and Vigna, G. BareDroid: Large-scale analysis of Android apps on real devices. In Proceedings of the 2015 Annual Computer Security Applications Conference (New York, NY, USA, 2015), ACSAC 2015.
[21] Outler, A. Have you paid your Linux kernel source license fee? https://www.xda-developers.com/have-you-paid-your-linux-kernel-source-license-fee/, March 2013.
[22] Qualcomm. (L)ittle (K)ernel based Android bootloader. https://www.codeaurora.org/blogs/little-kernel-based-android-bootloader.
[23] Ramos, D. A., and Engler, D. Under-constrained symbolic execution: Correctness checking for real code. In Proceedings of the 2015 USENIX Conference on Security Symposium (Washington, DC, USA, 2015), SEC’15.
[24] Rawat, S., Mounier, L., and Potet, M.-L. Static taint-analysis on binary executables, 2011.
[25] ROL. https://rol.im/securegoldenkeyboot/, 2016.
[26] Rutkowska, J. Intel x86 considered harmful, 2015.
[27] Shoshitaishvili, Y., Wang, R., Hauser, C., Kruegel, C., and Vigna, G. Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in Binary Firmware. In Proceedings of the 2015 Network and Distributed System Security Symposium (San Diego, CA, USA, 2015), NDSS 2015.
[28] Shoshitaishvili, Y., Wang, R., Salls, C., Stephens, N., Polino, M., Dutcher, A., Grosen, J., Feng, S., Hauser, C., Kruegel, C., and Vigna, G. SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis. In Proceedings of the 2016 IEEE Symposium on Security and Privacy (San Jose, CA, USA, 2016), SP ’16.
[29] Stephens, N., Grosen, J., Salls, C., Dutcher, A., Wang, R., Corbetta, J., Shoshitaishvili, Y., Kruegel, C., and Vigna, G. Driller: Augmenting fuzzing through selective symbolic execution. In Proceedings of the 2016 Network and Distributed System Security Symposium (San Diego, CA, USA, 2016), NDSS 2016.
[30] Vaas, Lisa. Smartphone anti-theft kill switch law goes into effect in California, 2015.
[31] Wang, S., Wang, P., and Wu, D. Reassembleable disassembling. In Proceedings of the 2015 USENIX Conference on Security Symposium (Washington, DC, USA, 2015), SEC’15.
[32] Wang, T., Wei, T., Lin, Z., and Zou, W. Intscope: Automatically detecting integer overflow vulnerability in x86 binary using symbolic execution. In Proceedings of the 2009 Network and Distributed System Security Symposium (San Diego, CA, USA, 2009), NDSS 2009.
[33] Wang, X., Jhi, Y.-C., Zhu, S., and Liu, P. Still: Exploit code detection via static taint and initialization analyses. In Proceedings of the 2008 Annual Computer Security Applications Conference (Anaheim, CA, USA, 2008), ACSAC ’08.
[34] Wojtczuk, R., and Kallenberg, C. Attacking UEFI boot script. In 31st Chaos Communication Congress (31C3) (2014).
[35] Zaddach, J., Bruno, L., Francillon, A., and Balzarotti, D. AVATAR: A Framework to Support Dynamic Security Analysis of Embedded Systems’ Firmwares. In Proceedings of the 2014 Network and Distributed System Security Symposium (San Diego, CA, USA, 2014), NDSS 2014.
[36] Zalewski, M. American fuzzy lop. http://lcamtuf.coredump.cx/afl/, 2007.