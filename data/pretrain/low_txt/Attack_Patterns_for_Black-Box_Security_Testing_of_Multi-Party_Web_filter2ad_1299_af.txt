### Security Testing of SAML Implementations

This paper presents a testing framework designed to evaluate the security of SAML (Security Assertion Markup Language) implementations. The framework automatically generates various SAML attack patterns by permuting the positions of original and malicious elements within a SAML assertion. While this work does not cover XML Signature Wrapping (XSW) attacks, we have explored the feasibility of extending our approach to include XSW (see Section VIII for details).

### Related Work

#### Combinatorial Testing
Bozic et al. [28] introduced a combinatorial testing method based on attack patterns to detect Cross-Site Scripting (XSS) vulnerabilities in web applications. To enhance the coverage of our attack patterns, we adopted the concept of combinatorial testing as described in Section III.

#### Other Black-Box Techniques
- **Wang et al. [36]**: Identified vulnerabilities in the integration of web Single Sign-On (SSO) systems by analyzing HTTP traffic, inferring syntax and semantics, and checking the applicability of different attack strategies. We incorporated their inference concept, enhanced it with data flow patterns, and automated the process of attack discovery.
- **Prithvi et al. [27]**: Proposed a black-box technique to expose vulnerabilities in the server-side logic of web applications by identifying parameter tampering opportunities and generating corresponding test cases. However, this technique required manual effort to convert these opportunities into actual exploits.
- **Zhou et al. [40]**: Developed SSOScan, a tool for automatically testing SP (Service Provider) websites that implement Facebook SSO. SSOScan detects five specific vulnerabilities related to Facebook SSO. Although our input collection module requires more manual effort compared to SSOScan, our application-agnostic attack patterns extend the generality of our approach, enabling the detection of attacks in multiple scenarios (e.g., SSO, CaaS).

None of the above-mentioned black-box techniques provide experimental evidence of their applicability across multiple Multi-Party Web Application (MPWA) scenarios (e.g., CaaS, SSO) as we do.

#### Other Techniques
- **Bai et al. [24]**: Introduced AUTHSCAN, which automatically extracts formal specifications from authentication protocol implementations and verifies them using a model checker to identify vulnerabilities. Despite its sophistication, manual effort is required to check inconsistencies between the actual implementation and the extracted formal model, making it less accessible to non-experts.
- **WebSpi [25]**: A library for modeling web applications using a variant of the applied pi-calculus, verified using ProVerif to discover attacks in OAuth-based SSO solutions. The authors also proposed automatically obtaining formal specifications for applications written in a subset of PHP and JavaScript, emphasizing the importance of considering CSRF and open redirectors.
- **Sun et al. [29]**: Detected logical vulnerabilities in e-commerce applications through static analysis of program code. Although their level of automation is higher, our approach can detect similar attacks without requiring the source code of the application.
- **Recent Efforts [39], [29]**: Aimed at preventing the exploitation of logical vulnerabilities in CaaS and SSO API integrations but require changes in application deployment. Our approach focuses on detecting attacks rather than preventing them.

### Limitations and Future Directions

**Coverage**: A general issue in black-box security testing, our approach can only detect known types of attacks. Creative security experts could develop new attack patterns to explore novel attack strategies. Two scenarios are possible:
1. **Building New Patterns**: Using available preconditions, actions, and postconditions to create new attack patterns, which should be straightforward for security experts.
2. **Adding New Ingredients**: Extending the inference module with control-flow related inferences and integrating fuzzing capabilities, though this may introduce false positives.

**Automatic Generation of Attack Patterns**: A challenging research direction, but there are reasonable paths to explore. For example, replay attacks could be better covered by automatically generating attack patterns to explore the combinatorial search space.

**Uncovered Attacks**: Some MPWA attacks, such as XML rewriting and XSS, are not covered by our current patterns. Adding XML support and leveraging OWASP ZAP's Jython capabilities can address these gaps. Additionally, handling postMessage interactions is feasible, although technical obstacles remain.

**Automation**: Our approach is not fully automated, requiring initial configurations provided by the tester. The quality of these configurations directly impacts the results, potentially leading to false positives if not chosen properly.

### Conclusions

We presented an approach for black-box security testing of MPWAs, centered on the concept of application-agnostic attack patterns. These patterns are inspired by previously discovered attack strategies against MPWAs. Our implementation, based on OWASP ZAP, has identified serious drawbacks in SSO and CaaS solutions offered by LinkedIn, PayPal, and Stripe, and has detected previously unknown vulnerabilities in several websites using Facebook and Instagram SSO. We have also generated test cases that reproduce known attacks against the 2Checkout service.

### Acknowledgments

This work was partially supported by the EU under grant 317387 SECENTIS (FP7-PEOPLE-2012-ITN).