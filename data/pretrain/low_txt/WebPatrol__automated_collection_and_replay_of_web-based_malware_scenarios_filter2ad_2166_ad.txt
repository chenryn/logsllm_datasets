# Optimized Text

## 3. Limitations of the Shellcode Emulation Module
Upon recognizing shellcode in certain strings, the analyzer attempts to emulate its execution. However, for security reasons, the default configuration of the emulation does not actually call system APIs. This can lead to the failure of the emulation and an inability to complete the shellcode execution.

## 4. Different Implementations of the Parser and Script Engine
The SGMLlib and SpiderMonkey libraries behave differently from a real Internet Explorer (IE) or Firefox browser when parsing HTML files and interpreting JavaScript (JS) code. This discrepancy can cause the execution of malicious code to fail. This limitation can be mitigated by running the analyzer multiple times with modifications to the source code of SGMLlib and SpiderMonkey, making them behave more like actual browsers.

From Table 4, it is evident that the most challenging aspect of the analyzer is the detection and emulation of shellcode. The other two issues can be resolved through engineering improvements. Consequently, most of the missing nodes identified by WebPatrol are malicious binaries downloaded after a successful compromise. These missing nodes have a relatively minor impact on the analysis of the malicious web logic and content. Future work to improve WebPatrol will be discussed in Section 7.

## 6.4 Case Study on Vulnerability Life Cycle
Using our collected Web Malware System (WMS) repository, we studied how vulnerability exploits evolve over time.

### MS10-002 "Aurora" Vulnerability
This vulnerability gained notoriety due to a large-scale and complex attack on several global corporations, including Google. Following this attack, Microsoft published Security Advisory 979352 on January 14, 2010. Our web-based malware collection system recorded multiple sites containing this exploit code. Although these malicious sites quickly became inaccessible, our collection system stored snapshots, allowing us to replay and analyze the scenarios using different tools.

### MS10-018 Vulnerability
Recently, the Microsoft Internet Explorer 'iepeers.dll' Remote Code Execution Vulnerability (CVE-2010-0806, MS10-018) has been widely exploited in WMSs. After the exploit code was published around March 9, 2010, we re-analyzed our WMS depository and found numerous scenarios containing such exploit snippets.

### Vulnerability Life Cycle
Using these two vulnerabilities as examples, Figure 7 illustrates the life cycle of a vulnerability from the first disclosure of the exploit to large-scale deployment. The figure shows the number of newly discovered WMSs containing exploits using these two vulnerabilities every 10 days. Typically, it takes only a few days between the disclosure of sample exploit codes and a large-scale deployment. Once patches are released, the number of such exploits decreases, and another zero-day vulnerability often replaces it. However, the exploit code does not disappear entirely; it remains at a low level for a long time. The MS10-002 exploit is less popular than MS10-018, possibly because the "Aurora" exploit attracted significant attention from security vendors, making it less profitable for adversaries.

### Exploit Evolution
We also collected several variants of the exploit to study their evolution. Through this analysis and debugging runs in a high-interaction (HI) client honeypot, we were able to dissect the details of the vulnerability before the release of the vendor's security bulletin. We compared the obfuscation techniques and coding styles, identifying different adversaries and exploit kits.

For example, the first version of the MS10-018 exploit code, found on March 11, 2010, was straightforward with no obfuscation. Over time, various obfuscation techniques were introduced, and the statements in the exploit and hop pages became more diverse. By March 22, we found a variant that used obfuscation on the setup of the heap spray sledge and hid its shellcode in another file via the SCRIPT tag (Figure 8). Subsequently, we identified five more variants, which showed improvements in two main areas:

- **Heavier Obfuscation**: Exploit codes increasingly used obfuscation techniques to avoid detection and analysis, ranging from simple escape methods using `String.fromCharCode` and `unescape` to sophisticated encryption.
- **Optimization**: Variants were optimized for better success rates, with some attempting to exploit the vulnerability multiple times or executing different code based on the client version.

## 6.5 Case Study on Scenario Evolution Analysis
Investigating vulnerability evolution helps identify different exploit kit writers and variants. Analyzing scenarios with the same URL but different timestamps reveals information about the malware deployer.

We selected a landing site and took snapshots of the scenario starting from the landing URL every few days. Over the monitoring period, we observed the evolution of the web-based malware injected into the site, as shown in Table 5. The first hop page directly linked from the landing site remained unchanged, while there was significant evolution in the following pages. Domain names of the hop and exploit pages changed frequently, likely to evade blacklist-based URL filtering or avoid DNS resolution issues. New exploits were added, and outdated ones were removed, reflecting the discovery of new vulnerabilities and the abandonment of old ones.

## 7. Discussion and Future Work
In this section, we discuss the limitations of our current implementation, including possible attacks against WebPatrol, and outline future work.

### Current Implementation Limitations
WebPatrol currently does not hide itself, making it detectable by malware. For example, plugins that cannot coexist in a real browser might be present in WebPatrol, leading to detection. Additionally, the specific behaviors of different browsers are not fully emulated, leaving room for detection. We are investigating these issues and believe some evasions can be avoided. These evasion attacks are not unique to WebPatrol but are common to any browser emulator. WebPatrol's design allows for the quick addition of new browser features, enabling us to learn from failed analysis cases and implement missing functionality rapidly.

### Potential Attacks
Attacks against WebPatrol can be categorized into Denial of Service (DoS) and vulnerability attacks. DoS attackers may consume all resources in the analysis environment by allocating large amounts of memory and performing CPU-intensive operations. WebPatrol can prevent such attacks by terminating processes that use excessive resources, though this may affect the analysis. For vulnerability attacks, if there are critical vulnerabilities in the SpiderMonkey JS engine or the Python SGML parser, the analysis system could be compromised. In the future, we may consider using multiple JS engines and parsers.

### Future Improvements
We plan to enhance the completeness of infection trail collection by running the analyzer multiple times with different configurations to emulate different browsers. We will add more system API support to libemu to improve its emulation capability and integrate static analysis techniques to increase coverage. Our goal is to provide deeper analysis on a larger scale of collected WMSs.

## 8. Conclusion
In this paper, we introduced the concept of a web-based malware scenario and its importance for web-based malware research. We designed and implemented a prototype system for automated collection and live replay of web-based malware scenarios. Our system can collect a relatively complete set of web infection trails and take snapshots for future analysis. Additionally, we provide live replay capabilities, allowing analysts to access the original malware at any time. We evaluated the system's effectiveness and presented several case studies to demonstrate its utility.

## 9. Acknowledgment
This work was partially supported by the Research Fund for the Doctoral Program of Higher Education of China under Grant No.200800011019, the project 61003127 supported by NSFC, and the project "A monitoring platform for web safe browsing" (2009-1717) supported by the National Development and Reform Commission. We thank all anonymous reviewers for their insightful comments and feedback. We also thank Tao Wei, Xiaorui Gong, Chengyu Song, Huilin Zhang, and Ruifei Yu for their contributions to our research.

## 10. References
[1] Capture-HPC. https://projects.honeynet.org/capture-hpc.
[2] libemu: x86 shellcode detection and emulation. http://libemu.carnivore.it/.
[3] Malzilla: Malware hunting tool. http://malzilla.sourceforge.net/.
[4] Polipo: A caching web proxy. http://www.pps.jussieu.fr/∼jch/software/polipo/.
[5] P. Baecher, M. Koetter, T. Holz, M. Dornseif, and F. Freiling. The Nepenthes Platform: An efficient approach to collect malware. Lecture Notes in Computer Science, vol. 4219:165, 2006.
[6] M. Cova, C. Kruegel, and G. Vigna. Detection and analysis of drive-by-download attacks and malicious JavaScript code. In Proceedings of the 19th International World Wide Web Conference, 2010.
[7] CVE-2007-4105. Baidu Soba remote code execute vulnerability. http://cve.mitre.org/cgi-bin/cvename.cgi?name=2007-4105.
[8] B. Feinstein, D. Peck, and I. SecureWorks. Caffeine Monkey: Automated collection, detection, and analysis of malicious JavaScript. Black Hat USA, 2007.
[9] S. Ford, M. Cova, C. Kruegel, and G. Vigna. Analyzing and detecting malicious Flash advertisements. In 2009 Annual Computer Security Applications Conference, pages 363–372, 2009.
[10] J. Mieres. Fragus: New botnet framework in-the-wild, 2009. http://evilfingers.blogspot.com/2009/08/fragus-new-botnet-framework-in-wild.html.
[11] J. Nazario. PhoneyC: A virtual client honeypot. In Proceedings of the 2nd USENIX Workshop on Large-Scale Exploits and Emergent Threat, 2009.
[12] M. Polychronakis, P. Mavrommatis, and N. Provos. Ghost turns zombie: Exploring the life cycle of web-based malware. In Proceedings of the 1st USENIX Workshop on Large-Scale Exploits and Emergent Threats, 2008.
[13] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose. All your iFRAMEs point to us. In Proceedings of the 17th USENIX Security Symposium, pages 1–15, 2008.
[14] N. Provos, D. McNamee, P. Mavrommatis, K. Wang, and N. Modadugu. The Ghost In The Browser. In First Workshop on Hot Topics in Understanding Botnets, 2007.
[15] C. Seifert, V. Delwadia, P. Komisarczuk, D. Stirling, and I. Welch. Measurement Study on Malicious Web Servers in the .nz Domain. In Proceedings of the 14th Australasian Conference on Information Security and Privacy, page 25, 2009.
[16] C. Song, J. Zhuge, X. Han, and Z. Ye. Preventing drive-by download via inter-module communication monitoring. In Proceedings of the 5th ACM Symposium on Information, Computer and Communications Security, pages 124–134, 2010.
[17] W3C. XMLHttpRequest. http://www.w3.org/TR/XMLHttpRequest/.
[18] Y. M. Wang. Strider HoneyMonkeys: Active Client-Side Honeypots for Finding Web Sites That Exploit Browser Vulnerabilities. In Part of Works in Progress at the 14th USENIX Security Symposium, 2007.
[19] J. Zhuge, T. Holz, X. Han, C. Song, and W. Zou. Collecting autonomous spreading malware using high-interaction honeypots. Lecture Notes in Computer Science, vol. 4861:438, 2007.
[20] J. Zhuge, T. Holz, C. Song, J. Guo, X. Han, and W. Zou. Studying malicious websites and the underground economy on the Chinese web. In Proceedings of the 7th Workshop on the Economics of Information Security, 2007.