# 优化后的文本

## 图5. 收敛速度
图5表明，使用生产Web服务器24小时的日志（113,732个HTTP请求）足以学习超过90%的规则。在一台配备2.2 GHz CPU和1 GB内存的台式机上进行此训练（未经优化），大约需要12小时。请注意，此训练可以在离线状态下完成。

## 4.6 在线监控中的开销
本部分展示了系统在对生产Web服务器的系统调用进行在线监控时的开销。我们将Web服务器托管在一台配备2.2 GHz CPU和1 GB内存的台式机上。该计算机运行Linux操作系统（内核版本2.6.22）和Apache2 Web服务器。内核被配置为拦截Web服务器发出的系统调用以实现实时监控。三个规则集中的语句是通过对新加坡管理大学Web服务器36小时日志的训练获得的。

我们使用一个程序来模拟单个或多个客户端向Web服务器发送HTTP请求。每个客户端一次从日志文件中读取一条记录，然后将请求发送到Web服务器。每个客户端被配置为每隔10毫秒发送一次请求，每次运行持续60秒。为了评估监控开销，我们测量了客户端经历的延迟。延迟定义为HTTP请求发送时间和客户端收到服务器响应的时间之间的差异。需要注意的是，我们的模拟客户端与Web服务器位于同一局域网内。我们进行了几次测试，每次测试使用不同数量的并发客户端。每次测试的平均延迟如图6所示。

## 图6. 平均延迟
结果显示，当并发客户端数量不超过8个时，我们的监控系统平均增加5到8毫秒的延迟。当并发客户端数量增加到64个时，客户端平均经历额外75毫秒的延迟。这种额外的延迟对于人类来说几乎察觉不到。此外，图6中展示的结果是客户端在同一局域网内测得的延迟。考虑到通过互联网访问的客户端通常会遭受至少几百毫秒的延迟，我们的实时监控带来的额外延迟相比之下是非常小的一部分。

## 5 相关工作
控制流信息，即由被监控应用程序发出的系统调用序列相关联的信息，已被用于对抗入侵。为了改进Forrest等人提出的固定长度模式模型，Wespi等人引入了可变长度模式，以便更好地描述应用程序的行为[19, 20]。Wagner等人引入了静态分析技术，以彻底探索应用程序的所有可能执行路径[17]。Sekar的FSA模型利用程序计数器信息来捕获系统调用的短期和长期时间关系，而Gao和Feng的模型则依赖于调用栈信息来提取程序执行路径[8, 5]。所有这些方法以及许多其他方法都利用了系统调用序列信息，但忽略了参数之间的数据流，这导致了规避攻击的可能性，例如模仿攻击[8, 18]。

在数据流分析检测器中，已有先前的工作利用系统调用参数。Kruegel等人基于系统调用参数的特征（如字符串长度、字符分布和结构推断）构建了模型[11]。该模型返回在检测过程中系统调用参数具有相应值的概率。低概率表示潜在的攻击。尽管他们的工作强调了每个单独参数的特征，但未探讨参数之间的相互关系。为了增强IDS以对抗模仿攻击，Sufatrio等人提出了一种简单的扩展，将系统调用参数和进程权限结合起来[14]。他们通过用户提供的类别规范将值归类为不同的类别。然而，这种抽象使得系统调用参数之间的关系无法检查。Tandon等人在其LERAD系统中集成了系统调用参数和属性，并专注于每个参数允许的值集[15, 16]。Bhatkar等人通过分析控制流上下文中的数据流成功提取了系统调用参数的规则[2]。然而，他们仅使用了程序计数器作为控制流上下文的信息来源。相比之下，我们的方法利用了控制流分析的结果，特别是将长系统调用序列分割成对应于小任务执行的子序列的系统调用模式，从而学习到更准确和有用的规则，这是以前的方法所不能实现的。

关联规则挖掘技术有助于从大量交易数据库中发现规则[1, 21]，也与我们的工作相关。关联规则挖掘有许多应用，例如在商业决策中决定促销商品、设计优惠券等。关联规则挖掘问题与学习系统调用参数和返回值的规则密切相关，因为两者都在尝试在一个大型数据集中找到关系。与以往关于系统调用参数的临时方法不同，我们采用了经过充分研究的关联规则挖掘技术的思想，并将其应用于学习系统调用参数和返回值的规则，同时进行了适度的修改和泛化。

## 参考文献
[1] R. Agrawal, T. Imielinski, and A. Swami. Mining association rules between sets of items in large databases. In Proceedings of 1993 ACM-SIGMOD International Conference on Management of Data, 207-216. Washington, D.C, 1993.
[2] S. Bhatkar, A. Chaturvedi, and R. Sekar. Dataflow anomaly detection. In Proceedings of the 2006 IEEE Symposium on Security and Privacy, 2006.
[3] H. Chen, D. Dean, and D. Wagner. Model checking one million lines of C code. In Proceedings of the 11th Annual Network and Distributed System Security Symposium NDSS, 2004.
[4] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer. Non-control-data attacks are realistic threats. In Proceedings of the 14th conference on USENIX Security Symposium, 2006.
[5] H. Feng, O. Kolesnikov, P. Fogla, and W. Lee. Anomaly detection using call stack information. In Proceedings: IEEE Symposium on Security and Privacy. Berkeley, California, 2003.
[6] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff. A sense of self for UNIX processes. In Proceedings of the 1996 IEEE Symposium on Security and Privacy, pages 120-128, Los Alamitos, CA, 1996.
[7] D. Gao, M. K. Reiter, and D. Song. Gray-box extraction of execution graphs for anomaly detection. In Proceedings of the 11th ACM Conference on Computer & Communication Security (CCS 2003), 2003.
[8] D. Gao, M. K. Reiter, and D. Song. On gray-box program tracking for anomaly detection. In Proceedings of the 13th USENIX Security Symposium, 2004.
[9] D. Gao, M. K. Reiter, and D. Song. Behavioral distance for intrusion detection. In Proceedings of the 8th International Symposium on Recent Advances in Intrusion Detection (RAID 2005), 2005.

## 结论与未来工作
本文提出了一种新的数据流分析模型，用于入侵检测。该模型利用控制流分析的结果来学习系统调用参数和返回值之间更准确和有用的规则。据我们所知，这是第一篇试图在数据流和控制流分析之间架起桥梁的文章，以进行入侵检测。通过基于跟踪的评估，我们展示了我们的技术不仅能够以较低的误报率检测真实攻击，而且还能学习到在入侵检测中有用的新规则。

在未来的工作中，我们希望设计一种更精细的方式来分组系统调用及其参数，从而减少无意义规则的数量。我们还希望能够生成比等式形式更复杂的语句，以丰富我们的模型概要，提高准确性和可扩展性。此外，通过为不同集合中的规则分配不同的权重，我们将尝试进一步提高系统的准确性。

参考文献
[1] R. Agrawal, T. Imielinski, and A. Swami. Mining association rules between sets of items in large databases. In Proceedings of 1993 ACM-SIGMOD International Conference on Management of Data, 207-216. Washington, D.C, 1993.
[2] S. Bhatkar, A. Chaturvedi, and R. Sekar. Dataflow anomaly detection. In Proceedings of the 2006 IEEE Symposium on Security and Privacy, 2006.
[3] H. Chen, D. Dean, and D. Wagner. Model checking one million lines of C code. In Proceedings of the 11th Annual Network and Distributed System Security Symposium NDSS, 2004.
[4] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer. Non-control-data attacks are realistic threats. In Proceedings of the 14th conference on USENIX Security Symposium, 2006.
[5] H. Feng, O. Kolesnikov, P. Fogla, and W. Lee. Anomaly detection using call stack information. In Proceedings: IEEE Symposium on Security and Privacy. Berkeley, California, 2003.
[6] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff. A sense of self for UNIX processes. In Proceedings of the 1996 IEEE Symposium on Security and Privacy, pages 120-128, Los Alamitos, CA, 1996.
[7] D. Gao, M. K. Reiter, and D. Song. Gray-box extraction of execution graphs for anomaly detection. In Proceedings of the 11th ACM Conference on Computer & Communication Security (CCS 2003), 2003.
[8] D. Gao, M. K. Reiter, and D. Song. On gray-box program tracking for anomaly detection. In Proceedings of the 13th USENIX Security Symposium, 2004.
[9] D. Gao, M. K. Reiter, and D. Song. Behavioral distance for intrusion detection. In Proceedings of the 8th International Symposium on Recent Advances in Intrusion Detection (RAID 2005), 2005.