### Optimized Text

#### Yes/No Responses
- Yes
- No
- No
- Yes
- Yes
- Yes
- Yes
- No
- Yes
- No
- Yes
- Yes
- Yes
- No
- Yes
- No
- Yes

#### Cycles and Runtime Data
| # of Cycles | 936 | 1216 | 936 | 936 | 1216 | 1216 | 936 | 1216 | 936 | 936 | 1216 | 1216 |
|-------------|-----|------|-----|-----|------|------|-----|------|-----|-----|------|------|
| Runtime [s]  | 2342.0 ± 13.3 | 2773.0 ± 2.8 | 5919.0 ± 33.1 | 2232.1 ± 1.7 | 7809.0 ± 45.8 | 2045.0 ± 4.6 | 1455.7 ± 0.3 | 979.0 ± 12.5 | 1627.0 ± 4.2 | 1440.0 ± 2.5 | 1566.0 ± 9.7 | 965.9 ± 3.4 |
| sec./cycle   | 2.502 ± 0.014 | 2.280 ± 0.002 | 6.324 ± 0.035 | 2.385 ± 0.002 | 6.422 ± 0.038 | 1.682 ± 0.004 | 1.555 ± 0.000 | 0.805 ± 0.010 | 1.739 ± 0.004 | 1.538 ± 0.003 | 1.288 ± 0.008 | 0.794 ± 0.003 |
| # of tries   | 3   | 3    | 5   | 5   | 4    | 5    | 3   | 3    | 3   | 3   | 3    | 3    |

#### Esoteric Programming Language
The esoteric programming language, Brainf*ck, was used to input the command `++++[>++++++++++++`, which resulted in the output `42`.

#### Key and Ciphertext Sizes
Table 3 shows the sizes of keys and ciphertexts. The Bootstrapping Key is significantly larger than other components, so reusing it can greatly reduce communication costs. The RAM is approximately 1024 times larger than the ROM because Vertical Packing [11] is not applied to the RAM.

#### Machine Code Size
Table 4 displays the machine code size for programs in CAHPv3. For reference, the RV32IC version is also included. RV32IC has more registers than CAHPv3, leading to more frequent register spills in CAHPv3, which results in larger code for Brainf*ck.

#### Client-Side Cost Evaluation
On a p3.8xlarge instance, Alice (the client) takes about 57 seconds to complete the generation of the Bootstrapping Key, memory encryption, program compilation, and decryption of the evaluation results. The most time-consuming step is the generation of the Bootstrapping Key, which takes about 55 seconds. For simple programs like Hamming, local evaluation on a conventional CPU takes around 0.5 microseconds, making program outsourcing impractical in such cases. However, as discussed in Section 4.1, VSP can significantly reduce client-side computations for programs with potential infinite loops. Exploring practical applications of VSP is one of our main future works.

#### Overall Performance and Comparison to Existing Works
FURISC [8, 25] is the only previous work that represents the processor as a Boolean circuit and evaluates it over FHE. We compare FURISC to VSP in Table 6. FURISC provides FPGA-accelerated evaluation time for Subtraction, which corresponds to one clock cycle in the FURISC processor. The estimated time for evaluating one clock cycle of FURISC is 21.3 minutes (over 1000 seconds). In contrast, our VSP implementation can evaluate one clock cycle in 0.8 seconds, as shown in Case #12 in Table 5. Since FURISC has an OISC ISA, the number of instructions for representing programs is larger in FURISC than in VSP. Therefore, compiling the same program on VSP results in fewer instructions, and each instruction runs nearly 1600 times faster than in FURISC. Hence, we are confident that the open-source VSP is the fastest FHE-based SCO platform to date.

#### Conclusion
In this work, we presented VSP, the first comprehensive platform that implements a multi-opcode general-purpose sequential processor over TFHE for two-party Secure Computation Offloading (SCO). We proposed a complete SCO scheme and designed a custom five-stage pipelined processor along with a custom ISA, CAHPv3. We also introduced CMUX Memory, an optimized structure for ROM and RAM over TFHE, to speed up instruction evaluation. Our thorough evaluation on benchmarks showed that both pipelining and CMUX Memory are effective in speeding up VSP. Our open-source implementation is nearly 1600 times faster than the state-of-the-art implementation while accepting conventional C language programs.

#### Acknowledgment
We thank all the people, including our shepherd Thomas Ristenpart and anonymous reviewers, for their insightful comments. This study was supported by the Information-technology Promotion Agency (IPA), Japan, The MITOU Program in fiscal year 2019, and SAKURA internet Inc. We are grateful to Kazuyuki Shudo for his support as our project manager in The MITOU Program. This work was partially supported by JSPS KAKENHI Grant No. 20K19799 and 20H04156.

#### References
[1] S. van Schaik, M. Minkin, A. Kwong, D. Genkin, and Y. Yarom, “CacheOut: Leaking data on Intel CPUs via cache evictions.” https://cacheoutattack.com/, 2020.
[2] S. van Schaik, A. Kwong, D. Genkin, and Y. Yarom, “SGAxe: How SGX fails in practice.” https://sgaxeattack.com/, 2020.
[3] S. Rass and P. Schartner, “On the security of a universal cryptocomputer: the chosen instruction attack,” IEEE Access, vol. 4, pp. 7874–7882, 2016.
[4] A. C. Yao, “How to generate and exchange secrets,” in 27th Annual Symposium on Foundations of Computer Science (sfcs 1986), pp. 162–167, 1986.
[5] C. Gentry, A Fully Homomorphic Encryption Scheme. PhD thesis, Stanford, CA, USA, 2009.
[6] E. M. Songhori, S. U. Hussain, A. Sadeghi, T. Schneider, and F. Koushanfar, “Tinygarble: Highly compressed and scalable sequential garbled circuits,” in 2015 IEEE Symposium on Security and Privacy, pp. 411–428, 2015.
[7] E. M. Songhori, T. Schneider, S. Zeitouni, A. Sadeghi, G. Dessouky, and F. Koushanfar, “Garbledcpu: A MIPS processor for secure computation in hardware,” in 2016 53nd ACM/EDAC/IEEE Design Automation Conference (DAC), pp. 1–6, June 2016.
[8] A. Chatterjee and K. M. M. Aung, FURISC: FHE Encrypted URISC Design, pp. 87–115. Singapore: Springer Singapore, 2019.
[10] R. Rivest, L. Adleman, and M. Dertouzos, “On data banks and privacy homomorphisms,” in Foundations on Secure Computation, Academia Press, pp. 169–179, 1978.
[11] I. Chillotti, N. Gama, M. Georgieva, and M. Izabachène, “TFHE: Fast fully homomorphic encryption over the torus,” Journal of Cryptology, vol. 33, no. 1, pp. 34–91, 2020.
[12] Z. Brakerski, C. Gentry, and V. Vaikuntanathan, “(Leveled) fully homomorphic encryption without bootstrapping,” in Proceedings of the 3rd Innovations in Theoretical Computer Science Conference, ITCS ’12, (New York, NY, USA), p. 309–325, Association for Computing Machinery, 2012.
[13] I. Chillotti, N. Gama, M. Georgieva, and M. Izabachène, “Faster fully homomorphic encryption: Bootstrapping in less than 0.1 seconds,” in Advances in Cryptology – ASIACRYPT 2016 (J. H. Cheon and T. Takagi, eds.), (Berlin, Heidelberg), pp. 3–33, Springer Berlin Heidelberg, 2016.
[14] S. Halevi and V. Shoup, “Bootstrapping for helib.” Cryptology ePrint Archive, Report 2014/873, 2014. https://eprint.iacr.org/2014/873.
[15] O. Regev, “On lattices, learning with errors, random linear codes, and cryptography,” in Proceedings of the Thirty-Seventh Annual ACM Symposium on Theory of Computing, STOC ’05, (New York, NY, USA), p. 84–93, Association for Computing Machinery, 2005.
[16] I. Chillotti, N. Gama, M. Georgieva, and M. Izabachène, “TFHE: Fast fully homomorphic encryption library.” https://tfhe.github.io/tfhe/, August 2016.
[17] P. Mohassel and S. Sadeghian, “How to hide circuits in MPC: An efficient framework for private function evaluation,” in Advances in Cryptology – EUROCRYPT 2013 (T. Johansson and P. Q. Nguyen, eds.), (Berlin, Heidelberg), pp. 557–574, Springer Berlin Heidelberg, 2013.
[18] D. Cash, M. Green, and S. Hohenberger, “New definitions and separations for circular security,” in Public Key Cryptography – PKC 2012 (M. Fischlin, J. Buchmann, and M. Manulis, eds.), (Berlin, Heidelberg), pp. 540–557, Springer Berlin Heidelberg, 2012.
[9] N. P. Smart and F. Vercauteren, “Fully homomorphic encryption with relatively small key and ciphertext sizes,” in Proceedings of the 13th International Conference on Practice and Theory in Public Key Cryptography, PKC’10, (Berlin, Heidelberg), p. 420–443, Springer-Verlag, 2010.
[19] J. Black, P. Rogaway, and T. Shrimpton, “Encryption-scheme security in the presence of key-dependent messages,” in Revised Papers from the 9th Annual International Workshop on Selected Areas in Cryptography, SAC ’02, (Berlin, Heidelberg), p. 62–75, Springer-Verlag, 2002.
[20] A. Paverd, A. Martin, and I. Brown, “Modelling and automatically analysing privacy properties for honest-but-curious adversaries,” tech. rep., University of Oxford, 2014.
[21] M. Brenner, H. Perl, and M. Smith, “How practical is homomorphically encrypted program execution? An implementation and performance evaluation,” in 2012 IEEE 11th International Conference on Trust, Security and Privacy in Computing and Communications, pp. 375–382, June 2012.
[22] N. G. Tsoutsos and M. Maniatakos, “The HEROIC framework: Encrypted computation without shared keys,” IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, vol. 34, no. 6, pp. 875–888, 2015.
[23] P. T. Breuer and J. P. Bowen, “Fully encrypted high-speed microprocessor architecture: The secret computer in simulation,” IJCCBS, vol. 9, no. 1/2, pp. 26–55, 2019.
[24] O. Mazonka, N. G. Tsoutsos, and M. Maniatakos, “CryptoLEQ: A heterogeneous abstract machine for encrypted and unencrypted computation,” IEEE Transactions on Information Forensics and Security, vol. 11, no. 9, pp. 2123–2138, 2016.
[25] A. Chatterjee and I. Sengupta, “FURISC: FHE encrypted URISC design.” Cryptology ePrint Archive, Report 2015/699, 2015. https://eprint.iacr.org/2015/699.
[26] “libScarab.” https://github.com/hcrypt-project/libScarab, 2013. Accessed 06/19/2020.
[27] E. M. Songhori, M. S. Riazi, S. U. Hussain, A.-R. Sadeghi, and F. Koushanfar, “ARM2GC: Succinct garbled processor for secure computation,” 2019 56th ACM/IEEE Design Automation Conference (DAC), pp. 1–6, 2019.
[28] S. Yasuda, F. Kitagawa, and K. Tanaka, Constructions for the IND-CCA1 Secure Fully Homomorphic Encryption, pp. 331–347. Singapore: Springer Singapore, 2018.
[29] J. Loftus, A. May, N. P. Smart, and F. Vercauteren, “On CCA-secure somewhat homomorphic encryption,” in Selected Areas in Cryptography (A. Miri and S. Vaudenay, eds.), (Berlin, Heidelberg), pp. 55–72, Springer Berlin Heidelberg, 2012.
[30] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and M. Virza, “SNARKs for C: Verifying program executions succinctly and in zero knowledge,” in Advances in Cryptology – CRYPTO 2013 (R. Canetti and J. A. Garay, eds.), (Berlin, Heidelberg), pp. 90–108, Springer Berlin Heidelberg, 2013.
[31] K. Matsuoka, R. Banno, and N. Matsumoto, “Source codes of our implementation,” 2020. https://github.com/virtualsecureplatform/kvsp.
[32] C. Lattner and V. Adve, “LLVM: A compilation framework for lifelong program analysis and transformation,” in CGO, (San Jose, CA, USA), pp. 75–88, Mar 2004.
[33] “sbt.” https://www.scala-sbt.org/index.html. Accessed 06/19/2020.
[34] C. Wolf, “Yosys open synthesis suite.” http://www.clifford.at/yosys/. Accessed 06/19/2020.
[35] “Original implementation of cuFHE.” https://github.com/vernamlab/cuFHE, 2018. Accessed 06/19/2020.
[36] W. Dai and B. Sunar, “cuHE: A homomorphic encryption