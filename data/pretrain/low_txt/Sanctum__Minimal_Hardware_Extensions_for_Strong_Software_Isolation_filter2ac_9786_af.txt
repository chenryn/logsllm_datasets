# Sanctum: A Low-Overhead Approach to Strong Isolation

## Introduction
Sanctum is a hardware-software co-design that provides strong, provable isolation for concurrent software modules with minimal overhead. This document discusses the performance and security aspects of Sanctum, particularly focusing on the overheads introduced by its design.

## Performance Overheads

### Enclave Overhead with DRAM Region Allocation
Figure 18 details the enclave overhead when allocating 1/4 of the Last-Level Cache (LLC) sets. The overheads are primarily due to the cache and page walker logic. This logic is small, combinational, and significantly simpler than the Arithmetic Logic Unit (ALU) in the core's execute stage. Each memory fetch issued by the page walker experiences a 1-cycle latency, adding 3 cycles of latency to each Translation Lookaside Buffer (TLB) miss. However, the overheads due to additional TLB miss latency are negligible, contributing less than 0.01% slowdown relative to the insecure baseline. This overhead is insignificant compared to the overheads of cache isolation, as TLB misses are infrequent and relatively expensive, making several additional cycles make little difference.

### Security Monitor Overhead
Invoking Sanctum’s security monitor to load code into an enclave adds a one-time setup cost to each isolated process. This overhead is amortized over the duration of the computation, making it less significant for long-running workloads. Entering and exiting enclaves is more expensive than hardware context switches because the security monitor must flush TLBs and L1 caches to avoid leaking private information. Figure 18 shows the modest overheads due to enclave context switches. A well-designed OS can minimize the number of context switches by allocating some cores to an enclave and allowing them to execute to completion, making this overhead negligible for long-running computations.

### Overhead of DRAM Region Isolation
The core of Sanctum’s strong isolation is caching DRAM regions in distinct LLC sets. When the OS assigns DRAM regions to an enclave, it confines the enclave to a part of the LLC. An enclaved thread effectively runs on a machine with fewer LLC sets, impacting its performance. However, Sanctum does not partition private caches, so a thread can utilize its core’s entire L1/L2 caches and TLB.

Figure 19 shows the completion times of SPECINT workloads, normalized to the completion time of the same benchmark running on an ideal insecure OS that allocates the entire LLC to the benchmark. Sanctum excels at isolating compute-bound workloads operating on sensitive data. SPECINT’s large, multi-phase workloads heavily exercise the entire memory hierarchy, providing a worst-case scenario for our system. For example, `mcf` is very sensitive to the available LLC size, incurring noticeable overheads when confined to a small subset of the LLC. Figure 18 further underlines that the majority of Sanctum’s enclave overheads stem from a reduction in available LLC sets. We consider `mcf`'s 23% decrease in performance when limited to 1/8th of the LLC to be a very pessimistic view of our system’s performance. For a reasonable allocation of 1/4 of DRAM regions (in a 4-core system), enclaves add under 3% overhead to most memory-bound benchmarks (with the exception of `mcf` and `bzip`, which rely on a very large LLC), and do not encumber compute-bound workloads.

## Conclusion
Sanctum demonstrates that strong, provable isolation of concurrent software modules can be achieved with low overhead. This approach provides strong security guarantees against an insidious software threat model, including cache timing and memory access pattern attacks. With this work, we aim to shift the discourse in secure hardware architecture from plugging specific security holes to a principled approach to eliminating attack surfaces.

## Acknowledgements
Funding for this research was partially provided by the National Science Foundation under contract number CNS-1413920.

## References
[1] Linux kernel: CVE security vulnerabilities, versions, and detailed reports. http://www.cvedetails.com/product/47/Linux-Linux-Kernel.html?vendor_id=33, 2014. [Online; accessed 27-April-2015].

[2] XEN: CVE security vulnerabilities, versions, and detailed reports. http://www.cvedetails.com/product/23463/XEN-XEN.html?vendor_id=6276, 2014. [Online; accessed 27-April-2015].

[3] SPEC CPU 2006. Tech. rep., Standard Performance Evaluation Corporation, May 2015.

[4] Xen project software overview. http://wiki.xen.org/wiki/Xen_Project_Software_Overview, 2015. [Online; accessed 27-April-2015].

[5] ANATI, I., GUERON, S., JOHNSON, S. P., AND SCARLATA, V. R. Innovative technology for CPU based attestation and sealing. In HASP (2013).

[6] ANTHONY, S. Who actually develops Linux? The answer might surprise you. http://www.extremetech.com/computing/175919-who-actually-develops-linux, 2015. [Online; accessed 27-April-2015].

[16] DUFLOT, L., ETIEMBLE, D., AND GRUMELARD, O. Using CPU system management mode to circumvent operating system security functions. CanSecWest/core06 (2006).

[17] DUNN, A., HOFMANN, O., WATERS, B., AND WITCHEL, E. Cloaking malware with the trusted platform module. In USENIX Security Symposium (2011).

[18] EMBLETON, S., SPARKS, S., AND ZOU, C. C. SMM rootkit: a new breed of OS-independent malware. Security and Communication Networks (2010).

[19] EVTYUSHKIN, D., ELWELL, J., OZSOY, M., PONOMAREV, D., ABU GHAZALEH, N., AND RILEY, R. Iso-X: A flexible architecture for hardware-managed isolated execution. In Microarchitecture (MICRO) (2014), IEEE.

[20] FLETCHER, C. W., DIJK, M. V., AND DEVADAS, S. A secure processor architecture for encrypted computation on untrusted programs. In Workshop on Scalable Trusted Computing (2012), ACM.

[21] GOLDREICH, O. Towards a theory of software protection and simulation by oblivious RAMs. In Theory of Computing (1987), ACM.

[7] BANESCU, S. Cache timing attacks. [Online; accessed 26-January-2014].

[22] GRAWROCK, D. Dynamics of a Trusted Platform: A building block approach. Intel Press, 2009.

[8] BONNEAU, J., AND MIRONOV, I. Cache-collision timing attacks against AES. In Cryptographic Hardware and Embedded Systems-CHES 2006. Springer, 2006, pp. 201–215.

[9] BRUMLEY, B. B., AND TUVERI, N. Remote timing attacks are still practical. In Computer Security–ESORICS. Springer, 2011.

[10] BRUMLEY, D., AND BONEH, D. Remote timing attacks are practical. Computer Networks (2005).

[11] CHEN, H., MAO, Y., WANG, X., ZHOU, D., ZELDOVICH, N., AND KAASHOEK, M. F. Linux kernel vulnerabilities: State-of-the-art defenses and open problems. In Asia-Pacific Workshop on Systems (2011), ACM.

[12] CHHABRA, S., ROGERS, B., SOLIHIN, Y., AND PRVULOVIC, M. SecureME: a hardware-software approach to full system security. In International Conference on Supercomputing (ICS) (2011), ACM.

[13] COSTAN, V., AND DEVADAS, S. Intel SGX explained. Cryptology ePrint Archive, Report 2016/086, Feb 2016.

[14] DAVENPORT, S. SGX: the good, the bad, and the downright ugly. Virus Bulletin (2014).

[15] DOMNITSER, L., JALEEL, A., LOEW, J., ABU-GHAZALEH, N., AND PONOMAREV, D. Non-monopolizable caches: Low-complexity mitigation of cache side channel attacks. Transactions on Architecture and Code Optimization (TACO) (2012).

[23] INTEL CORPORATION. Intel® 64 and IA-32 Architectures Optimization Reference Manual, Sep 2014. Reference no. 248966-030.

[24] KESSLER, R. E., AND HILL, M. D. Page placement algorithms for large real-indexed caches. Transactions on Computer Systems (TOCS) (1992).

[25] KIM, Y., DALY, R., KIM, J., FALLIN, C., LEE, J. H., LEE, D., WILKERSON, C., LAI, K., AND MUTLU, O. Flipping bits in memory without accessing them: An experimental study of DRAM disturbance errors. In ISCA (2014), IEEE Press.

[26] KLEIN, G., ELPHINSTONE, K., HEISER, G., ANDRONICK, J., COCK, D., DERRIN, P., ELKADUWE, D., ENGELHARDT, K., KOLANSKI, R., NORRISH, M., ET AL. seL4: Formal verification of an OS kernel. In SIGOPS symposium on Operating systems principles (2009), ACM.

[27] KOCHER, P. C. Timing attacks on implementations of Diffie-Hellman, RSA, DSS, and other systems. In Advances in Cryptology (CRYPTO) (1996), Springer.

[28] KONG, J., ACIICMEZ, O., SEIFERT, J.-P., AND ZHOU, H. Deconstructing new cache designs for thwarting software cache-based side channel attacks. In workshop on Computer security architectures (2008), ACM.

[29] LEE, Y., WATERMAN, A., AVIZIENIS, R., COOK, H., SUN, C., STOJANOVIC, V., AND ASANOVIC, K. A 45nm 1.3 GHz 16.7 double-precision GFLOPS/W RISC-V processor with vector accelerators. In European Solid State Circuits Conference (ESSCIRC) (2014), IEEE.

[30] LIE, D., THEKKATH, C., MITCHELL, M., LINCOLN, P., BONEH, D., MITCHELL, J., AND HOROWITZ, M. Architectural support for copy and tamper-resistant software. SIGPLAN Notices (2000).

[44] SUH, G. E., CLARKE, D., GASSEND, B., VAN DIJK, M., AND DEVADAS, S. AEGIS: architecture for tamper-evident and tamper-resistant processing. In International Conference on Supercomputing (ICS) (2003), ACM.

[31] LIN, J., LU, Q., DING, X., ZHANG, Z., ZHANG, X., AND SADAYAPPAN, P. Gaining insights into multicore cache partitioning: Bridging the gap between simulation and real systems. In HPCA (2008), IEEE.

[32] LIU, C., HARRIS, A., MAAS, M., HICKS, M., TIWARI, M., AND SHI, E. GhostRider: A Hardware-Software System for Memory Trace Oblivious Computation. In ASPLOS (2015).

[33] LIU, F., GE, Q., YAROM, Y., MCKEEN, F., ROZAS, C., HEISER, G., AND LEE, R. B. CATalyst: Defeating last-level cache side channel attacks in cloud computing. In HPCA (Mar 2016).

[34] LIU, F., AND LEE, R. B. Random fill cache architecture. In Microarchitecture (MICRO) (2014), IEEE.

[35] LIU, F., YAROM, Y., GE, Q., HEISER, G., AND LEE, R. B. Last-level cache side-channel attacks are practical. In Security and Privacy (2015), IEEE.

[36] MCKEEN, F., ALEXANDROVICH, I., BERENZON, A., ROZAS, C. V., SHAFI, H., SHANBHOGUE, V., AND SAVAGAONKAR, U. R. Innovative instructions and software model for isolated execution. HASP (2013).

[37] OREN, Y., KEMERLIS, V. P., SETHUMADHAVAN, S., AND KEROMYTIS, A. D. The spy in the sandbox – practical cache attacks in JavaScript. arXiv preprint arXiv:1502.07373 (2015).

[38] RUTKOWSKA, J. Thoughts on Intel’s upcoming Software Guard Extensions (part 2). Invisible Things Lab (2013).

[39] RUTKOWSKA, J., AND WOJTCZUK, R. Preventing and detecting Xen hypervisor subversions. Blackhat Briefings USA (2008).

[40] SANCHEZ, D., AND KOZYRAKIS, C. The ZCache: Decoupling ways and associativity. In Microarchitecture (MICRO) (2010), IEEE.

[41] SANCHEZ, D., AND KOZYRAKIS, C. Vantage: scalable and efficient fine-grain cache partitioning. In SIGARCH Computer Architecture News (2011), ACM.

[42] SEABORN, M., AND DULLIEN, T. Exploiting the DRAM rowhammer bug to gain kernel privileges. http://googleprojectzero.blogspot.com/2015/03/exploiting-dram-rowhammer-bug-to-gain.html, Mar 2015. [Online; accessed 9-March-2015].

[43] STEFANOV, E., VAN DIJK, M., SHI, E., FLETCHER, C., REN, L., YU, X., AND DEVADAS, S. Path ORAM: An extremely simple oblivious RAM protocol. In SIGSAC Computer & communications security (2013), ACM.

[45] TAYLOR, G., DAVIES, P., AND FARMWALD, M. The TLB slice - a low-cost high-speed address translation mechanism. SIGARCH Computer Architecture News (1990).

[46] WANG, Z., AND LEE, R. B. New cache designs for thwarting software cache-based side channel attacks. In International Symposium on Computer Architecture (ISCA) (2007).

[47] WATERMAN, A., LEE, Y., AVIZIENIS, R., PATTERSON, D. A., AND ASANOVIC, K. The RISC-V instruction set manual volume II: Privileged architecture version 1.7. Tech. Rep. UCB/EECS-2015-49, EECS Department, University of California, Berkeley, May 2015.

[48] WATERMAN, A., LEE, Y., AND CELIO, CHRISTOPHER, E. A. RISC-V proxy kernel and boot loader. Tech. rep., EECS Department, University of California, Berkeley, May 2015.

[49] WATERMAN, A., LEE, Y., PATTERSON, D. A., AND ASANOVIC, K. The RISC-V instruction set manual, volume I: User-level ISA, version 2.0. Tech. Rep. UCB/EECS-2014-54, EECS Department, University of California, Berkeley, May 2014.

[50] WECHEROWSKI, F. A real SMM rootkit: Reversing and hooking BIOS SMI handlers. Phrack Magazine (2009).

[51] WOJTCZUK, R., AND RUTKOWSKA, J. Attacking Intel Trusted Execution Technology. Black Hat DC (2009).

[52] WOJTCZUK, R., AND RUTKOWSKA, J. Attacking SMM memory via Intel CPU cache poisoning. Invisible Things Lab (2009).

[53] WOJTCZUK, R., AND RUTKOWSKA, J. Attacking Intel TXT via SINIT code execution hijacking, 2011.

[54] WOJTCZUK, R., RUTKOWSKA, J., AND TERESHKIN, A. Another way to circumvent Intel® Trusted Execution Technology. Invisible Things Lab (2009).

[55] XU, Y., CUI, W., AND PEINADO, M. Controlled-channel attacks: Deterministic side channels for untrusted operating systems. In Oakland (May 2015), IEEE.

[56] YAROM, Y., AND FALKNER, K. E. Flush+Reload: A high-resolution, low-noise, L3 cache side-channel attack. IACR Cryptology ePrint Archive (2013).

[57] YEE, B., SEHR, D., DARDYK, G., CHEN, J. B., MUTH, R., ORMANDY, T., OKASAKA, S., NARULA, N., AND FULLAGAR, N. Native Client: A sandbox for portable, untrusted x86 native code. In Security and Privacy (2009), IEEE.