### Contradictory Goals in Security Seal Architecture

The current architecture of security seals presents a paradox: the integrity of a seal provider and the security of a seal-using website often seem to be at odds. The only apparent solution to this dilemma is a vigilant webmaster. If a webmaster can address a discovered vulnerability within the grace period provided by the seal provider, the vulnerable website can evade detection by attackers, while the seal provider can maintain its certification integrity. Consequently, companies that do not offer a grace period—possibly under the assumption that this ensures higher security standards—are actually doing a disservice to their clients.

### Related Work

While there is some evidence of improper certification by security seal providers, this evidence is often anecdotal or gathered in an ad-hoc manner for a limited number of websites [16, 33]. To our knowledge, this paper is the first to systematically evaluate the certification of popular third-party security seals on a large scale from a security perspective.

#### Third-Party Seals

Third-party seals initially garnered attention from the user-interface and economics communities, where researchers aimed to determine whether seals are recognizable and whether they increase trust and sales for the seal-bearing website. In 2002, Head and Hassanein [10] found that awareness and influence of third-party seals were low, calling for more research on their placement and appearance to enhance their visibility. Belanger et al. [4] studied various factors influencing the perceived trustworthiness of websites, including third-party security seals. They found that users valued security features (such as encryption) more than security seals. Kimery et al. [19] discovered that while consumer trust in online merchants is positively correlated with their attitudes, the presence of third-party seals does not affect consumer trust.

Not all researchers have reached the same conclusions. Houston et al. [14] surveyed 106 students and found a positive correlation between the presence of a seal and the perceived quality of a product, which in turn influenced the consumer's willingness to buy. Hu et al. [15] empirically examined the effects of various seals and concluded that most trust-related seals do, in fact, increase a consumer's intent to purchase. Later research by Kim et al. [18] showed that seals can reduce security-related concerns for consumers, but only after they are educated about security and privacy threats and the role of third-party security seals.

Seal providers primarily rely on testimonials from existing clients to convince businesses to adopt third-party seals. These testimonials, along with much of the seal providers' advertising, focus more on increased sales and monetary gains rather than the number of vulnerabilities detected.

Edelman [8] approached third-party seals from a different angle. Instead of investigating the effect of seals on consumers, he examined the trustworthiness of sites that employ third-party trust seals. Trust seals, unlike the security seals we investigated, certify a merchant's trustworthiness rather than their security. These seals typically focus on the privacy policies of online merchants and aim to ensure that merchants do not misuse customer data. Edelman argued that a trustworthy company does not need an external entity to certify its trustworthiness. Using "site safety" information from SiteAdvisor, he found that websites using these seals are more likely to be untrustworthy than those that do not use trust seals.

#### Effectiveness of Automated Vulnerability Scanners

A core component of a third-party security seal vendor is the automated vulnerability scanner, which determines whether a website should be awarded the seal. Doupé et al. [7] conducted the most recent survey of the thoroughness of black-box automated vulnerability scanners by evaluating eleven different scanners against a known vulnerable web application. They found that many of the evaluated scanners could not handle modern web application technologies, such as JavaScript, and thus could not fully explore websites or discover all known vulnerabilities in a test web application.

One key difference between security seals and generic web application scanners is the latter's higher tolerance for false positives. In a typical penetration test, a tester can manage a relatively large number of false positives without adverse effects. In contrast, security seal vendors cannot afford false positives, as these would prevent the seal from appearing on their clients' websites, leading to dissatisfaction among paying clients. As a result, it is possible that the scanners used by third-party seal providers err on the side of caution to minimize or avoid false positives, which almost inevitably leads to fewer true positives.

### Conclusion

Providers of security seals claim that their services make websites appear more trustworthy to consumers, thereby increasing sales. In this paper, we tested the security guarantees of seal providers, specifically the guarantees that indirectly influence consumer trust. Through a series of automatic and manual experiments, we found that third-party security seals are severely lacking in their thoroughness and coverage of vulnerabilities. We uncovered multiple basic vulnerabilities in certified secure websites and demonstrated that websites using third-party security seals do not follow security best practices any better than those that do not use seals. Additionally, we proposed a novel attack where seals can be used as vulnerability oracles and described how an attacker can exploit seal providers to discover the exact exploit for any given vulnerable seal-using website.

Overall, our findings indicate that the current state-of-practice of third-party security seals is far from ideal. While we propose steps that seal providers can take to substantially increase the accuracy and effectiveness of their security certification, the issue of inadvertently creating a vulnerability oracle seems to be central to the current architecture of security seals and appears to lack a technical solution that does not compromise either the honesty of a seal provider or the security of the certified website.

### Acknowledgments

We thank the anonymous reviewers for their valuable comments. This research was supported by the Prevention against Crime Programme of the European Union (B-CCENTRE), the Research Fund KU Leuven, and the EU FP7 projects NESSoS and STREWS.

### References

[1] L. Arsene. Xbox Live Accounts of Microsoft Employees Hacked Using Social Engineering. http://www.hotforsecurity.com/blog/xbox-live-accounts-of-microsoft-employees-hacked-using-social-engineering-5716.html.
[2] A. Barth. HTTP State Management Mechanism. IETF RFC, 2011.
[3] A. Barth, C. Jackson, and J. C. Mitchell. Robust Defenses for Cross-Site Request Forgery. In Proceedings of the 15th ACM Conference on Computer and Communications Security, CCS '08, pages 75–88, New York, NY, USA, 2008. ACM.
[4] F. Belanger, J. S. Hiller, and W. J. Smith. Trustworthiness in Electronic Commerce: The Role of Privacy, Security, and Site Attributes. The Journal of Strategic Information Systems, 11(3):245–270, 2002.
[5] P. Bright. Anonymous Speaks: The Inside Story of the HBGary Hack. http://arstechnica.com/tech-policy/2011/02/anonymous-speaks-the-inside-story-of-the-hbgary-hack/.
[6] A. Z. Broder, S. C. Glassman, M. S. Manasse, and G. Zweig. Syntactic Clustering of the Web. Computer Networks and ISDN Systems, 29(8-13), Sept. 1997.
[7] A. Doupé, M. Cova, and G. Vigna. Why Johnny Can’t Pentest: An Analysis of Black-Box Web Vulnerability Scanners. In Proceedings of the Conference on Detection of Intrusions and Malware and Vulnerability Assessment (DIMVA), Bonn, Germany, July 2010.
[8] B. Edelman. Adverse Selection in Online “Trust” Certifications. In Proceedings of the 11th International Conference on Electronic Commerce, ICEC '09, pages 205–212, 2009.
[9] S. Fox. Pew Research: 51% of U.S. Adults Bank Online. http://www.pewinternet.org/2013/08/07/51-of-u-s-adults-bank-online/.
[10] M. M. Head and K. Hassanein. Trust in E-Commerce: Evaluating the Impact of Third-Party Seals. Quarterly Journal of Electronic Commerce, 3:307–326, 2002.
[11] OpenSSL ‘Heartbleed’ Vulnerability (CVE-2014-0160). https://www.us-cert.gov/ncas/alerts/TA14-098A.
[12] J. Hodges, C. Jackson, and A. Barth. HTTP Strict Transport Security (HSTS). IETF RFC, 2012.
[13] J. Horrigan. Pew Research: Online Shopping. http://www.pewinternet.org/2008/02/13/online-shopping/.
[14] R. W. Houston and G. K. Taylor. Consumer Perceptions of CPA WebTrust Assurances: Evidence of an Expectation Gap. International Journal of Auditing, 3(2):89–105, 1999.
[15] X. Hu, Z. Lin, and H. Zhang. Trust Promoting Seals in Electronic Markets: An Exploratory Study of Their Effectiveness for Online Sales Promotion. Journal of Promotion Management, 9(1-2):163–180, 2002.
[16] T. Hunt. Why I Am the World’s Greatest Lover (and Other Worthless Security Claims). http://www.troyhunt.com/2013/05/why-i-am-worlds-greatest-lover-and.html.
[17] J. P. John, F. Yu, Y. Xie, A. Krishnamurthy, and M. Abadi. deSEO: Combating Search-Result Poisoning. In Proceedings of the 20th USENIX Conference on Security, SEC'11, 2011.
[18] D. J. Kim, C. Steinfield, and Y.-J. Lai. Revisiting the Role of Web Assurance Seals in Business-to-Consumer Electronic Commerce. Decision Support Systems, 44(4):1000–1015, 2008.
[19] K. M. Kimery and M. McCord. Third-Party Assurances: The Road to Trust in Online Retailing. In Proceedings of the 35th Annual Hawaii International Conference on System Sciences. IEEE, 2002.
[20] B. Krebs. A First Look at the Target Intrusion, Malware. http://krebsonsecurity.com/2014/01/a-first-look-at-the-target-intrusion-malware/.
[21] B. Krebs. Adobe Breach Impacted At Least 38 Million Users. http://krebsonsecurity.com/2013/10/adobe-breach-impacted-at-least-38-million-users/.
[22] A. Langley. Apple’s SSL/TLS Bug. https://www.imperialviolet.org/2014/02/22/applebug.html.
[23] M. Marlinspike. New Tricks for Defeating SSL in Practice. Blackhat, 2009.
[24] McAfee. The Economic Impact of Cybercrime and Cyber Espionage. http://www.mcafee.com/sg/resources/reports/rp-economic-impact-cybercrime.pdf.
[25] N. Nikiforakis, L. Invernizzi, A. Kapravelos, S. Van Acker, W. Joosen, C. Kruegel, F. Piessens, and G. Vigna. You Are What You Include: Large-Scale Evaluation of Remote JavaScript Inclusions. In Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS), pages 736–747, 2012.
[26] N. Olivarez-Giles. Snapchat Data Breach Exposes Millions of Names, Phone Numbers. http://blogs.wsj.com/digits/2014/01/01/snapchat-alleged-leak-4-million-users/.
[27] M. Rajab, L. Ballard, N. Jagpal, P. Mavrommatis, D. Nojiri, N. Provos, and L. Schmidt. Trends in Circumventing Web-Malware Detection. Google, Google Technical Report, 2011.
[28] D. Reisinger. Syrian Electronic Army Hacks Forbes, Steals User Data. http://www.cnet.com/news/syrian-electronic-army-hacks-forbes-steals-user-data/.
[29] D. Ross and T. Gondrom. HTTP Header X-Frame-Options. IETF RFC, 2013.
[30] S. Stamm, B. Sterne, and G. Markham. Reining in the Web with Content Security Policy. In Proceedings of the 19th International Conference on World Wide Web, WWW '10, pages 921–930, New York, NY, USA, 2010. ACM.
[31] Trend Micro Site Safety Center. http://global.sitesafety.trendmicro.com/.
[32] M. Vasek and T. Moore. Identifying Risk Factors for Webserver Compromise. In Proceedings of the Eighteenth International Conference on Financial Cryptography and Data Security, FC'14, 2014.
[33] J. Vijayan. ‘Hacker Safe’ Seal: Website Shield, or Target? http://www.computerworld.com/s/article/9057878/_Hacker_Safe_seal_Web_site_shield_or_target_?
[34] M. West. Play Safely in Sandboxed IFrames. 2013.

### Appendix: Client-Side Security Mechanisms

Here, we provide brief descriptions of the client-side security mechanisms used as indicators of overall "security hygiene" when comparing seal-using websites to equivalent non-seal-using websites.

- **HTTP Strict Transport Security (HSTS)**: HSTS is a security policy mechanism where a web server can force compliant browsers to interact with it using only HTTPS connections [12]. By sending the HSTS policy via the appropriate HTTP header, a web server specifies a period during which the browser is instructed to send all requests to that website over HTTPS, regardless of user input.
- **Secure Cookies**: Using the Secure flag on Set-Cookie headers limits the scope of a cookie to secure channels [2], making the cookie less likely to be stolen by a man-in-the-middle (MitM) attacker.
- **HttpOnly Cookies**: By default, cookies are accessible to JavaScript code, which can lead to theft in a cross-site scripting (XSS) attack. To defend against this, a website operator can use the HttpOnly flag on cookies, making them unavailable to client-side JavaScript.
- **Content Security Policy (CSP)**: CSP provides a standard HTTP header that allows website owners to declare approved sources of content that browsers should load on any given webpage [30]. If a requested resource originates from a source not defined in the policy, it will not be loaded, mitigating a wide range of injection vulnerabilities, such as XSS.
- **X-Frame-Options (XFO)**: The XFO response header instructs a user's browser whether a certain page is allowed to be embedded in a frame [29], helping to mitigate Clickjacking attacks.
- **iframe Sandboxing**: The sandbox attribute for the iframe element, introduced in HTML5, enables extra restrictions on any content loaded in a frame, limiting the capabilities given to untrusted framed pages [34].
- **Anti-CSRF Tokens**: The best practice defense for Cross-Site Request Forgery (CSRF) attacks is the inclusion of a secret long random token (nonce) with each request, and validation of that token on the server side [3]. We searched for forms containing hidden form elements likely used as nonces, marked by keywords like "token," "nonce," or "csrf," and long alpha-numerical values.
- **X-Content-Type-Options**: Internet Explorer has a MIME-sniffing feature that attempts to determine the content type for each downloaded resource, which can lead to security issues. To prevent MIME-sniffing, a web server can send the X-Content-Type-Options response header with the nosniff value.
- **SSL-Stripping Vulnerable Form**: For performance reasons, some websites implement HTTPS only for certain webpages containing sensitive information (e.g., a log-in page), which can result in forms vulnerable to SSL stripping [23]. A MitM attacker can replace all HTTPS form links on the HTTP page with HTTP links, allowing the attacker to later intercept sensitive form data.