### 安全漏洞在线支付：总结与检测

**作者**  
Qing Zhang (VulpeckerTeam@Qihoo 360)  
**合作者**  
Guangdong Bai (SIT 教员), Ye Zhou (VulpeckerTeam@Qihoo 360)

---

#### 1. Web 3.0时代的支付安全漏洞

近年来，支付安全漏洞层出不穷。以下是一些重要的研究和案例：

- **Black Hat US 2016, Mendoza**: *Samsung Pay: Tokenized Numbers, Flaws and Issues* - 讨论了Token泄露问题。
- **IEEE S&P 2011, Rui Wang et al.**: *How to Shop for Free Online: Security Analysis of Cashier-as-a-Service Based Web Stores* - 揭示了支付协议实现中的安全漏洞。
- **NDSS 2014, Pellegrino et al.**: *Toward Black-Box Detection of Logic Flaws in Web Applications* - 提出了黑盒检测逻辑漏洞的方法。
- **NDSS 2014, Sun et al.**: *Detecting Logic Vulnerabilities in E-Commerce Applications* - 研究了电子商务应用中的逻辑漏洞。

开源电商代码也存在严重的安全风险，这些漏洞的成因包括：

- 支付协议和逻辑方面的复杂性导致难以察觉漏洞。
- 开发者缺乏支付安全知识和经验。
- 电商网站使用过时的开源代码，更新不及时。
- 移动端引入了新的攻击面。
- 第三方支付服务的安全问题。
- 安全通信协议的不安全性。
- 薅羊毛行为（通过漏洞获取不当利益）。

支付安全漏洞的影响非常严重，因为它们直接涉及金钱交易。常见的影响包括资金蒸发和零元支付等。

---

#### 2. 我们的工作

我们对在线支付漏洞进行了深入研究，并提出了检测与防护方法。

- **在线支付漏洞的研究及挖掘**
  - 总结了15种类型的在线支付安全漏洞。
  - 研究了80多个电商网站及APP，共检测到8种新型支付漏洞（所有漏洞均已告知商家并修复）。

- **支付漏洞的检测与防护**
  - **类型一：支付金额完整性 - 篡改支付金额**
    - 示例：某VPN购买网站
  - **类型二：订单完整性 - 订单生成后加货物**
    - 示例来源：Rui Wang et al., IEEE S&P 2011
  - **类型三：支付凭证重放**
    - 购买成功后，银行向商户网站跳转的过程如果被反复重放，可能导致商品重复购买。
  - **类型四：第三方支付漏洞导致所有商家信息泄露**
    - 漏洞原因：第三方支付完成后，页面从支付网站跳转到商家网站。如果修改支付订单的订单号，可以获取该第三方支付网站上所有成功的订单信息。
    - 示例：X钱支付
  - **类型五：数字签名未覆盖完整**
    - 即使金额已经做了签名校验，但仍有未签名的参数可能影响最终交易。
  - **类型六：订单替换**
  - **类型七：货币单位完整性 - 货币单位替换**
    - 常见于国际支付场景，如PayPal。
  - **类型八：溢出攻击 - 金额数字溢出**
    - 如果支付过程中没有对支付金额的上限进行控制，可能导致异常处理流程，甚至零元支付。
  - **类型九：顺序执行缺陷**
  - **类型十：用户完整性 - 用户替换**
    - 使用他人的账户购买自己的物品。
  - **类型十一：密钥泄露**
    - 内置支付功能的APP可能会将私钥硬编码到代码或配置文件中，导致密钥泄露。
  - **类型十二：函数修改**
    - APK反编译后的函数修改可能导致订单信息被篡改。
  - **类型十三：越权获取其他订单信息**
    - 尤其针对虚拟商品，如电影票、团购券等。
  - **类型十四：暴力破解**
    - 如果第三方支付使用MD5值作为签名校验且密钥过短，可以通过暴力破解获取密钥。
  - **类型十五：可能影响支付的底层漏洞**
    - 如OpenSSL Heartbleed漏洞，可能导致RSA私钥泄漏。

---

#### 3. 全场景的支付安全保护模型

**模型检测 (Model Checking)**  
模型检测是一种自动验证技术，通过显式状态搜索或隐式不动点计算来验证有穷状态并发系统的模态。由于它可以自动执行并在系统不满足性质时提供反例路径，在工业界比演绎证明更受推崇。

**防范模型**

- **支付前**
  - 检查支付金额边界值
  - 检查支付数量边界值
  - 金额不要直接传输
  - 使用订单号的方式传输订单
  - 对所有购买信息进行签名
  - 经常更换签名密钥

- **支付中**
  - 检测签名是否正确
  - 检测订单号是否正确
  - 检测订单号对应的数量是否正确
  - 检测订单号对应的金额是否正确
  - 检测订单号对应的产品是否正确
  - 检测收款人是否正确

**方法概览**

- **协议模型**
- **攻击模型**
- **模型检测者**
- **有攻击路径**
- **商户和第三方支付模型执行者**
- **模拟我们总结的15种支付类型**

**CSP# 中的协议建模**

- 每个协议参与者（包括商家、第三方支付和用户）都被模拟为一个过程。
- 每个参与者独立且同时运行。
- 行为被模拟为事件和内联程序。

**检测模型 & 安全审计**

- **订单号**：Order/OrderId/Order_id/out_trade_no/tradeNo/*trade*/*order*/payno*/payment_id/paymentId/merc_tranid/*tranid*
- **价格**：*Price*/*total_fee*/*amount*/*amt*
- **数量**：*Number*/*quantity*
- **物品ID**：itemId/item_id
- **用户**：User/usr
- **通知地址**：Notifyurl/notify_url/return_url/returnurl/show_url/showurl
- **商户**：Default_partner/*partner*
- **签名方式**：Sign_type/signtype
- **密钥**：PRIVATE(大写)/private_key/*MD5*/*key*
- **签名**：Sign*/*verify_sign*/*auth*

**Dooland模型**

- **Functions**
  - makeOrder(id, number)
  - EnsureOrder()
  - checkOrder()
  - Pay()
  - getAllGoods()
  - getPayType()
  - getShouldPay()
  - getPayAct()

---

#### 4. 致谢与问答

感谢大家的关注和支持！如有任何问题，请随时提问。

**Qing Zhang**  
360 VulpeckerTeam