# Evaluation of EPUB Reading Systems and Extensions

## JavaScript and Local/Remote Resource Handling in EPUBs

### iOS Reading Systems
- **JavaScript Support**: Out of 20 evaluated iOS reading systems, 11 support JavaScript and allow EPUBs to communicate with servers over the Internet without user consent.
- **User Consent**: Only Apple Books requires explicit user interaction to permit EPUBs to communicate remotely, which is remembered between sessions.
- **LocalStorage Sharing**: Two reading systems allow EPUBs to share LocalStorage data.
- **GeoLocation API and Application Launching**: Four reading systems allow access to the GeoLocation API or enable opening other applications, often requiring user consent.
- **File System Isolation**: The iOS platform design isolates the EPUB from the rest of the file system, blocking access to local resources by design.

### Android Reading Systems
- **Permissions**: Almost every Android reading system requests the "Photos, media, and files on your device" permission upon installation or when importing an EPUB.
- **Storage Access Framework (SAF)**: Most Android reading systems use SAF, which does not require explicit permissions for importing EPUBs. However, combining SAF with file permissions (as in most cases) does not prevent attacks that leak arbitrary file contents.
- **File Leaks**: For three Android applications, we successfully leaked arbitrary file contents to a remote server.
- **JavaScript Capabilities**: Seven reading systems grant the ability to open other applications, with only one asking for user permission when the referred application is the browser. Six applications support access to the LocalStorage API, but five do not provide sufficient isolation, allowing access to content saved by other EPUBs.

### Browser Extensions
- **Chrome and Firefox Extensions**: We evaluated five extensions each for Chrome and Firefox.
- **JavaScript Execution**: Three Chrome extensions allow JavaScript execution, providing access to persistent storage and even to the microphone, camera, or location (with user consent). EPUBs opened by these applications share the same origin, allowing access to the persistent storage of previously opened e-books.
- **Content Security Policy (CSP)**: The remaining seven extensions block JavaScript execution due to CSP, prohibiting inline JavaScript and only allowing local resources. Remote resources are blocked, but the extensions still provide functionality to fetch them, leading to a universal XSS in EPUBReader.

### Physical E-Reader Devices
- **Kobo E-Reader**: Limited JavaScript support for KEPUB files, and can contact remote servers without user consent. The embedded browser engine is QT 5.2.1, with known vulnerabilities.
- **Kindle**: Amazon's guidelines state that scripting is not supported, but our evaluation found that the Kindle browser engine supports JavaScript execution, though it is disabled by default. We identified ways to circumvent this, leading to potential security issues.

## Case Studies

### Apple Books
- **User Information Disclosure**: An attacker can infer whether a specific EPUB is present in the user’s library by using symbolic links.
- **Persistent Denial of Service**: A symbolic link referring to the Books folder causes Apple Books to crash on every subsequent reboot.
- **CVEs**: Apple issued CVE-2019-8789 and CVE-2019-8774 and distributed a fix through operating system updates.

### EPUBReader Extension
- **JavaScript Bypass**: By bypassing the CSP restrictions, we could abuse the extension's permission to steal user account information, leading to a universal XSS.
- **Impact**: This affects almost 300,000 users, with the attack requiring minimal user interaction on Chrome and no interaction on Firefox.

### Kindle
- **JavaScript Execution**: Although JavaScript execution is disabled, dynamic input is not properly escaped or sanitized, allowing potential attacks.
- **WebSockets and HTTP Requests**: Once JavaScript is executed, WebSockets can be leveraged to send arbitrary requests, and the image viewer can inject HTML code.
- **Proof-of-Concept Exploit**: We used a known UXSS vulnerability (CVE-2011-3243) to read out the entire library of a victim and leak document contents via the built-in KFX reader.

## Real-World Analysis

### Malicious and Tracking EPUBs
- **E-Book Stores**: We downloaded free EPUBs from popular stores and did not find any indication of abuse.
- **File Sharing Platforms**: We analyzed 7,238 EPUBs from torrents and 1,807 from 4shared, finding no evidence of abuse. Only 65 e-books used JavaScript, mostly for minor UI changes.

### Malicious EPUB Distribution
- **Self-Publishing Services**: We submitted manuscripts to six popular self-publishing services. Google Play Books rejected our submission, while Amazon removed most scripts but allowed the exploit discussed in Section VI-C.
- **Vetting Measures**: Four vendors (Apple Books, Kobo, Barnes & Noble, and Smashwords) took no vetting measures, allowing the embedding of scripts. Smashwords provides downloadable EPUBs, making it easier to target various reading systems.

## Discussion

### EPUB Specification and Implementation
- **Security Recommendations**: Many JavaScript-supporting EPUB reading systems do not correctly enforce the specification’s security recommendations.
- **Local File System Access**: A significant number of reading systems do not prevent EPUBs from accessing the local file system and provide JavaScript APIs not included in the EPUB specification.
- **Rendering Engines**: Desktop reading systems use a variety of rendering engines, with some being outdated, leading to known vulnerabilities.

### Conclusion
Our evaluation highlights the need for improved security measures in EPUB reading systems and extensions. Developers should implement stricter CSPs, update rendering engines, and reduce unnecessary permissions to mitigate potential security risks.