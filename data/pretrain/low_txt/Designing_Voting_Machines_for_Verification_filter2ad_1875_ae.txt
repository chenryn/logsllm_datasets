### Enhanced and Optimized Text

**Simultaneous Display and Confirmation:**
The same information displayed on the confirmation screen is simultaneously presented to the voter. While our architecture is particularly relevant for jurisdictions that have chosen, for various reasons, to use paperless Direct Recording Electronic (DRE) voting systems, we believe our methods could also offer benefits to DREs equipped with Voter-Verifiable Paper Audit Trails (VVPAT).

**Cryptographic Voting Protocols:**
Other researchers have proposed cryptographic voting protocols to enhance the security of DREs [10, 16, 26, 27]. We note that our methods can be easily integrated with these cryptographic schemes.

### Extensions and Discussion

In addition to the properties discussed, there are other relevant security properties we considered in designing our voting system. Although we have not rigorously validated that the design provides these properties, we outline the directions we will follow to do so.

**Property 3: Data Confidentiality and Tamper Evident Storage**
- **Description:** The DRE should not leak information through its on-disk format. Additionally, it should be history-independent and tamper-evident.
- **Implication:** This property removes the back-end tabulation system from the trusted path. Without this property, the tabulation system might be part of the trusted path because the data input to the tabulation system could reveal individual voters' choices. With this property, it is possible to make the outputs of each individual DRE publicly available, allowing multiple parties to independently tabulate the final results. We believe we can use the techniques from Molnar et al. to implement Property 3 [25].

**Property 4: Voter-Approved Ballots Only**
- **Description:** The DRE must only store ballots that the voter approves.
- **Implication:** The DRE must not change the ballot after the voter makes their selection in the VoteSelection module. Software analysis techniques could be used to ensure the ballot is not modified. Additionally, there will need to be some auditing of the code to ensure that display routines accurately present votes on the screen.

**Property 5: Minimal Ballot Content**
- **Description:** The ballot should contain nothing more than the voter's choices.
- **Implication:** The ballot needs to be put into a canonical form before being stored. Violation of Property 5 could compromise the voter's privacy, even if the voter approves the ballot. For example, storing "James Polk" with an extra space as "James Polk" could convey privacy-leaking information in a subliminal channel [16]. Software analysis techniques could ensure that canonicalization functions are run on all program paths. Combined with Property 4, this would help ensure the ballot is canonicalized.

**Minimizing the Underlying Software Platform:**
Our prototype runs on a custom-designed embedded Linux distribution for the gumstix platform. Despite its relatively minimal size (4MB binary for kernel and all programs and data), it still presents a large Trusted Computing Base (TCB), most of which is unnecessary for a special-purpose voting appliance. In a serious deployment, we expect to dispense with the OS and build a single-purpose embedded application running directly on the hardware. For instance, we would not need virtual memory, memory protection, process scheduling, filesystems, dual-mode operation, or most features found in general-purpose operating systems. A simple bootloader and a thin device driver layer specialized for election devices might suffice. Alternatively, ideas from nanokernels [11], microkernels [14, 31], and operating system specialization [30] could be used to reduce the TCB size.

**Deploying Code:**
Even after ensuring the software is free of vulnerabilities, we must also guarantee that the image running on the components is the correct one. This is a challenging problem, but the research community has begun to address it. SWATT [34] is designed to validate the code image on embedded platforms, though their model does not support CPUs with virtual memory. TCG and NGSCB use a secure hardware co-processor to achieve the same ends, but deploying signed and untampered code to devices still requires significant work. Additionally, a human must check that all components are running the latest binary and ensure that the binaries are compatible with each other. This concern is orthogonal to ours, as even current voting machines must deal with versioning, but it illustrates another challenge in deploying a secure voting system.

### Related Work

There has been extensive work on high-assurance and safety-critical systems, which are designed, implemented, and tested to achieve specific safety, reliability, and security properties. We use many classic techniques from this field, including minimizing the TCB and decomposing the application into clearly specified components. One contribution of this paper is that we show in detail how these classic techniques can be applied in the e-voting context.

**Modularity:**
Modularity is widely recognized as beneficial in building high-reliability systems. Deep space applications often use multiple components for reliability and fault tolerance [41]. Telephone switches use redundant components to upgrade software without loss of availability [41]. In avionics, Northrop Grumman has proposed an architecture for future avionics systems suitable for the Department of Defense’s Joint Vision 2020 [39]. Their MLS-PCA architecture is intended to support tens to hundreds of thousands of separate processors. MLS-PCA uses isolation for several purposes, including mission flexibility, multi-level security when interoperating with NGOs, and reduction in the amount of trusted software over traditional federated architectures. Of these reasons, the last is most related to our setting. Others have articulated composibility of security as one of the key challenges in applying modularity to the security setting [21].

**Rebooting:**
Rebooting is widely recognized in industry as a useful way to prevent and rectify errors [9]. Rebooting returns the system to its original state, which is often more reliable. Others use preventative rebooting to mitigate resource leaks and Heisenbugs [15]. In contrast, our work uses rebooting for what we believe is a new purpose: privacy. Prior work focuses on availability and recoverability, while we use it to simplify our task in verifying privacy-preserving properties.

**Starlight Interactive Link:**
The Starlight Interactive Link is a hardware device that allows a workstation trusted with secret data to safely interact with an unclassified network [2]. The Starlight Interactive Link acts as a data diode. A chief concern is the leakage of secret data onto the untrusted network. Many of these ideas led to the design of our IOMultiplexor.

**Comparison with Existing DRE Voting Machines:**
Our design shares similarities with existing DRE voting machines from major vendors such as Diebold, Hart Intercivic, Sequoia Voting Systems, and Election Systems and Software. However, a criticism of these machines is that people must trust the software running on them, as the voter cannot be sure their vote was properly recorded. Rebecca Mercuri has called for vendors to augment DRE machines with a VVPAT [22, 23]. In this DRE variant, the voter must approve a paper copy of their selections, which serves as the permanent record. The paper copy is typically held behind glass to prevent tampering. Even in the presence of malicious software, the paper copy accurately reflects the voter’s selections.

**Isolation:**
The principle of isolation for systems is well established [4, 7, 12, 20, 28, 31, 32, 35, 36, 40]. Isolation has been proposed as a technique to improve security in two existing voting systems: FROGS and Pnyx.DRE, both of which separate the vote selection process from vote confirmation [1, 6]. However, FROGS significantly alters the voting experience, and it is unclear whether Pnyx.DRE was designed for verification or provides our privacy protections.

**Source Code Disclosure:**
Finally, Hall discusses the impact of disclosing the source code for voting machines for independent audit [13].

### Conclusions

Democracy deserves the best efforts that computer scientists can deliver in producing accurate and verifiable voting systems. In this work, we have proposed better DRE-based voting designs, whether VVPAT-enabled or not. In both cases, our architecture provides stronger security properties than current voting systems.

Our approach uses hardware to isolate components from each other and uses reboots to guarantee voter privacy. Specifically, isolating the VoteSelection module, where much of the complexity of a voting system resides, into its own module can eliminate a great deal of complex code from the TCB. Although isolation is not a novel idea, the way we use it to improve the security of DREs is new. This work shows that it is possible to improve existing DREs without modifying the existing voter experience or burdening the voter with additional checks or procedures.

The principles and techniques outlined here demonstrate that there is a better way to design voting systems.

### Acknowledgments

We thank David Jefferson for early discussions that led to this work. Umesh Shankar, Chris Karlof, Rob Johnson, and Mike Reiter provided invaluable feedback on the presentation, organization, and provided great insight into the thinking and organization of the work. We also thank Matt Bishop and David Molnar for helpful discussions about related works.

### References

[1] Auditability and voter-verifiability for electronic voting terminals. http://www.scytl.com/docs/pub/a/PNYX.DRE-WP.pdf, December 2004. White paper.
[2] M. Anderson, C. North, J. Griffin, R. Milner, J. Yesberg, and K. Yiu. Starlight: Interactive Link. In Proceedings of the 12th Annual Computer Security Applications Conference (ACSAC), 1996.
[3] J. Bannet, D. W. Price, A. Rudys, J. Singer, and D. S. Wallach. Hack-a-vote: Demonstrating security issues with electronic voting systems. IEEE Security and Privacy Magazine, 2(1):32–37, Jan./Feb. 2004.
[4] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt, and A. Warfield. Xen and the art of virtualization. In Proceedings of the 19th ACM Symposium on Operating Systems Principles (SOSP), October 2003.
[5] M. Barnett, K. R. Leino, and W. Schulte. The Spec# programming system: An overview. In Proceedings of Construction and Analysis of Safe, Secure and Interoperable Smart Devices (CASSIS), 2004.
[6] S. Bruck, D. Jefferson, and R. Rivest. A modular voting architecture (“Frogs”). http://www.vote.caltech.edu/media/documents/wps/vtp_wp3.pdf, August 2001. Project Working Paper. Voting Technology.
[7] E. Bugnion, S. Devine, and M. Rosenblum. Disco: Running commodity operating systems on scalable multiprocessors. In Proceedings of the 16th ACM Symposium on Operating Systems Principles (SOSP), October 1997.
[8] L. Burdy, Y. Cheon, D. Cok, M. Ernst, J. Kiniry, G. Leavens, K. R. Leino, and E. Poll. An overview of JML tools and applications. International Journal on Software Tools for Technology Transfer (STTT), 7(3):212–232, June 2005.
[9] G. Candea, S. Kawamoto, Y. Fujiki, G. Friedman, and A. Fox. Microreboot – a technique for cheap recovery. In 6th Symposium on Operating System Design and Implementation (OSDI), December 2004.
[10] D. Chaum. Secret-ballot receipts: True voter-verifiable elections. IEEE Security & Privacy Magazine, 2(1):38–47, Jan.–Feb. 2004.
[11] D. Engler, M. F. Kaashoek, and J. O’Toole. Exokernel: An operating system architecture for application-level resource management. In Proceedings of the 15th ACM Symposium on Operating Systems Principles (SOSP), October 1995.
[12] I. Goldberg, D. Wagner, R. Thomas, and E. Brewer. A secure environment for untrusted helper applications: Confining the wily hacker. In Proceedings of the 6th USENIX Security Symposium, August 1996.
[13] J. Hall. Transparency and access to source code in e-voting. Unpublished manuscript.
[14] G. Heiser. Secure embedded systems need microkernels. USENIX ;login, 30(6):9–13, December 2005.
[15] Y. Huang, C. Kintala, N. Kolettis, and N. D. Fulton. Software rejuvenation: Analysis, module and applications. In Twenty-Fifth International Symposium on Fault-Tolerant Computing, 1995.
[16] C. Karlof, N. Sastry, and D. Wagner. Cryptographic voting protocols: A systems perspective. In Fourteenth USENIX Security Symposium, August 2005.
[17] T. Kohno, A. Stubblefield, A. D. Rubin, and D. S. Wallach. Analysis of an electronic voting system. In IEEE Symposium on Security and Privacy, pages 27–40, May 2004.
[18] M. Kuhn. Optical time-domain eavesdropping risks of CRT displays. In IEEE Symposium on Security and Privacy, May 2002.
[19] G. Leavens and Y. Cheon. Design by contract with JML. ftp://ftp.cs.iastate.edu/pub/leavens/JML/jmldbc.pdf.
[20] J. Liedtke. Toward real microkernels. Communications of the ACM, 39(9):70, September 1996.
[21] D. McCullough. Noninterference and the composability of security properties. In IEEE Symposium on Security and Privacy, May 1988.
[22] R. Mercuri. Electronic Vote Tabulation Checks & Balances. PhD thesis, School of Engineering and Applied Science of the University of Pennsylvania, 2000.
[23] R. Mercuri. A better ballot box? IEEE Spectrum, 39(10):46–50, October 2002.
[24] D. Mertz. XML Matters: Practical XML data design and manipulation for voting systems. http://www-128.ibm.com/developerworks/xml/library/x-matters36.html, June 2004.
[25] D. Molnar, T. Kohno, N. Sastry, and D. Wagner. Tamper-evident, history-independent, subliminal-free data structures on PROM storage -or- How to store ballots on a voting machine (extended abstract). In IEEE Symposium on Security and Privacy, May 2006.
[26] C. A. Neff. A verifiable secret shuffle and its application to e-voting. In 8th ACM Conference on Computer and Communications Security (CCS 2001), pages 116–125, November 2001.
[27] C. A. Neff. Practical high certainty intent verification for encrypted votes. http://www.votehere.net/vhti/documentation, October 2004.
[28] N. Provos, M. Friedl, and P. Honeyman. Preventing privilege escalation. In Proceedings of the 12th USENIX Security Symposium, August 2003.
[29] RABA Innovative Solution Cell. Trusted agent report Diebold AccuVote-TS voting system, January 2004.
[30] M. Rajagopalan, S. Debray, M. Hiltunen, and R. Schlichting. Automated operating system specialization via binary rewriting. Technical Report TR05-03, University of Arizona, February 2005.
[31] R. Rashid Jr., A. Tevanian, M. Young, M. Young, D. Golub, R. Baron, D. Black, W. Bolosky, and J. Chew. Machine-independent virtual memory management for paged uniprocessor and multiprocessor architectures. In Proceedings of the 2nd Symposium on Architectural Support for Programming Languages and Operating Systems (ASPLOS), October 1987.
[32] J. Rushby. Design and verification of secure systems. In Proceedings of the 8th ACM Symposium on Operating Systems Principles (SOSP), December 1981.
[33] Science Applications International Corporation (SAIC). Risk assessment report Diebold AccuVote-TS voting system and processes, September 2003.
[34] A. Seshadri, A. Perrig, L. van Doorn, and P. Khosla. SWAtt: Software-based attestation for embedded devices. In Proceedings of the IEEE Symposium on Security and Privacy, May 2004.
[35] M. Swift, M. Annamalai, B. Bershad, and H. Levy. Recovering device drivers. In Proceedings of the 6th ACM/USENIX Symposium on Operating System Design and Implementation, December 2004.
[36] M. Swift, B. Bershad, and H. Levy. Improving the reliability of commodity operating systems. In Proceedings of the 19th ACM Symposium on Operating Systems Principles (SOSP 2003), October 2003.
[37] W. van Eck. Electromagnetic radiation from video display units: An eavesdropping risk? Computers & Security, 4, 1985.
[38] D. Wagner, D. Jefferson, M. Bishop, C. Karlof, and N. Sastry. Security analysis of the Diebold AccuBasic interpreter. California Secretary of State’s Voting Systems Technology Assessment Advisory Board (VSTAAB), February 2006.
[39] C. Weissman. MLS-PCA: A high assurance security architecture for future avionics. In Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003), 2003.
[40] A. Whitaker, M. Shaw, and S. Gribble. Denali: A scalable isolation kernel. In 10th ACM SIGOPS European Workshop, September 2002.
[41] I.-L. Yen and R. Paul. Key applications for high-assurance systems. IEEE Computer, 31(4):35–45, April 1998.