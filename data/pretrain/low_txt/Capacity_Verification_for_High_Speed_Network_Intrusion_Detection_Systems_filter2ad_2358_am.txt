### Concerns and Real-World Implications of Intrusion Detection Weaknesses

There is a significant concern that an unknown weakness in an intrusion detection system (IDS) can create a "dangerously false sense of security." This study demonstrates that a vulnerability in an anomaly detector can be exploited to compromise the system it is designed to protect.

### Introduction to Mimicry Attacks

Wagner and Dean [20] introduced a new class of attacks against IDSs, which they termed "mimicry attacks." In a mimicry attack, an attacker develops malicious code that mimics the normal operation of the application, thereby evading detection. Wagner and Dean studied this class of attack theoretically, but no prior study had shown whether it was possible to create and deploy a real-world mimicry attack that could effectively undermine an IDS.

### Findings and Methodology

This study confirms that mimicry attacks pose a serious threat to anomaly-based IDSs. By modifying common real-world exploits, the study demonstrates how these attacks can undermine the protection offered by such systems. The research identifies weaknesses in the anomaly-based IDS and shows how attackers can exploit these weaknesses to modify common exploits, rendering the IDS blind to ongoing attacks.

### Practical Demonstration

The results show that it is possible to hide the presence of common exploits, such as `passwd` and `traceroute`, from the IDS by modifying them to operate within the system's detection blind spots. Additionally, the study demonstrates the ability to control the manifestation of an attack, moving it from a detectable area to one where the IDS is blind.

### Conclusion

This study has shown that an anomaly-based IDS can be effectively undermined by modifying common real-world exploits. It presents a method for identifying weaknesses in the IDS and demonstrates how attackers can exploit these weaknesses to craft undetectable attacks. The findings highlight the need for more robust and adaptive IDSs to counter such sophisticated threats.

### References

1. Herve Debar, Marc Dacier, and Andreas Wespi. Towards a taxonomy of intrusion-detection systems. *Computer Networks*, 31(8):805–822, April 1999.
2. Stephanie Forrest, Steven A. Hofmeyr, Anil Somayaji, and Thomas A. Longstaff. A sense of self for UNIX processes. In *Proceedings of the 1996 IEEE Symposium on Security and Privacy*, 6–8 May 1996, Oakland, California, pages 120–128, IEEE Computer Society Press, Los Alamitos, California, 1996.
3. Cristian Gafton. `passwd(1)`. Included in passwd version 0.64.1-1 software package, January 1998.
4. Anup K. Ghosh, Aaron Schwartzbard, and Michael Schatz. Learning program behavior profiles for intrusion detection. In *Proceedings of the 1st Workshop on Intrusion Detection and Network Monitoring*, 9–12 April 1999, Santa Clara, California, pages 51–62, The USENIX Association, Berkeley, California, 1999.
5. Anup K. Ghosh, James Wanken, and Frank Charron. Detecting anomalous and unknown intrusions against programs. In *Proceedings of the 14th Annual Computer Security Applications Conference*, 7–11 December 1998, Phoenix, Arizona, pages 259–267, IEEE Computer Society Press, Los Alamitos, 1998.
6. Steven A. Hofmeyr, Stephanie Forrest, and Anil Somayaji. Intrusion detection using sequences of system calls. *Journal of Computer Security*, 6(3):151–180, 1998.
7. Van Jacobson. `traceroute(8)`. Included in traceroute version 1.4a5 software package, April 1997.
8. Michel “MaXX” Kaempf. Traceroot2: Local root exploit in LBNL traceroute. Internet: <http://packetstormsecurity.org/0011-exploits/traceroot2.c>, March 2002.
9. Sandeep Kumar. Classification and Detection of Computer Intrusions. PhD thesis, Purdue University, West Lafayette, Indiana, August 1995.
10. Teresa Lunt. Automated audit trail analysis and intrusion detection: A survey. In *Proceedings of the 11th National Computer Security Conference*, Baltimore, Maryland, pages 65–73, October 1988.
11. Carla Marceau. Characterizing the behavior of a program using multiple-length N-grams. In *New Security Paradigms Workshop*, 18–22 September 2000, Ballycotton, County Cork, Ireland, pages 101–110, ACM Press, New York, New York, 2001.
12. Roy A. Maxion and Kymie M. C. Tan. Anomaly detection in embedded systems. *IEEE Transactions on Computers*, 51(2):108–120, February 2002.
13. Andrew P. Moore. CERT/CC vulnerability note VU#176888, July 2002. Internet: <http://www.kb.cert.org/vuls/id/176888>.
14. Thomas H. Ptacek and Timothy N. Newsham. Insertion, evasion, and denial of service: Eluding network intrusion detection. Secure Networks, Inc., Calgary, Alberta, Canada, January 1998.
15. Wojciech Purczynski (original author) and “lst” (author of improvements). Epcs2: Exploit for execve/ptrace race condition in Linux kernel up to 2.2.18. Internet: <http://www.securiteam.com/exploits/5NP061P4AW.html>, March 2002.
16. SecurityFocus Vulnerability Archive. LBNL Traceroute Heap Corruption Vulnerability, Bugtraq ID 1739. Internet: <http://online.securityfocus.com/bid/1739>, March 2002.
17. SecurityFocus Vulnerability Archive. Linux PTrace/Setuid Exec Vulnerability, Bugtraq ID 3447. Internet: <http://online.securityfocus.com/bid/3447>, March 2002.
18. Anil Somayaji and Geoffrey Hunsicker. IMMSEC Kernel-level system call tracing for Linux 2.2, Version 991117. Obtained through private communication. Previous version available on the Internet: <http://www.cs.unm.edu/~immsec/software/>, March 2002.
19. Kymie M. C. Tan and Roy A. Maxion. “Why 6?” Defining the operational limits of stide, an anomaly-based intrusion detector. In *Proceedings of the 2002 IEEE Symposium on Security and Privacy*, 12–15 May 2002, Berkeley, California, pages 188–201, IEEE Computer Society Press, Los Alamitos, California, 2002.
20. David Wagner and Drew Dean. Intrusion detection via static analysis. In *Proceedings of the 2001 IEEE Symposium on Security and Privacy*, 14–16 May 2001, Berkeley, California, IEEE Computer Society Press, Los Alamitos, California, 2001.
21. Christina Warrender, Stephanie Forrest, and Barak Pearlmutter. Detecting intrusions using system calls: Alternative data models. In *Proceedings of the 1999 IEEE Symposium on Security and Privacy*, 9–12 May 1999, Oakland, California, pages 133–145, IEEE Computer Society Press, Los Alamitos, California, 1999.

### Analyzing Intensive Intrusion Alerts via Correlation

**Authors:**
- Peng Ning
- Yun Cui
- Douglas S. Reeves
- Department of Computer Science, North Carolina State University, Raleigh, NC 27695-7534
- Email: PI:EMAIL, PI:EMAIL, PI:EMAIL

**Abstract:**
Traditional intrusion detection systems (IDSs) focus on low-level attacks or anomalies and generate alerts independently, even though there may be logical connections between them. In scenarios with intensive intrusions, the volume of alerts can become unmanageable, making it difficult for human users or intrusion response systems to understand and act on them. Several complementary alert correlation methods have been proposed to address this issue. We have developed a framework to correlate intrusion alerts using prerequisites of intrusions. This paper continues our work by studying the feasibility of this method in analyzing real-world, intensive intrusions. We introduce three utilities—adjustable graph reduction, focused analysis, and graph decomposition—to facilitate the analysis of large sets of correlated alerts. We evaluate the effectiveness of the alert correlation method and these utilities through a case study with the network traffic captured at the DEF CON 8 Capture the Flag (CTF) event. Our results show that these utilities can simplify the analysis of large amounts of alerts and reveal several attack strategies used in the DEF CON 8 CTF event.

**Keywords:**
- Intrusion Detection
- Alert Correlation
- Attack Scenario Analysis

### Introduction

Intrusion detection is considered the second line of defense for computer and network systems, alongside prevention-based techniques like authentication and access control. Traditional IDSs focus on low-level attacks or anomalies and generate a large number of independent alerts, even when there are logical connections between them. In situations with intensive intrusions, the volume of alerts can become unmanageable, making it difficult for human users or intrusion response systems to understand and act on them.

To assist in the analysis of intrusion alerts, several alert correlation methods have been proposed. Our approach is based on the observation that most intrusions are not isolated but are related as different stages of a series of attacks, with early stages preparing for later ones. We identify the prerequisites and consequences of each type of attack and correlate the corresponding alerts by matching the consequences of some previous alerts with the prerequisites of some later ones.

### Related Work

Several alert correlation techniques have been proposed to facilitate the analysis of intrusions. Some use probabilistic methods to correlate alerts based on similarity, while others use consequence mechanisms to specify what types of alerts may follow a given alert type. Our method addresses the same problem from a novel angle, overcoming the limitations of existing approaches.

### Preliminary: Alert Correlation Using Prerequisites of Intrusions

Our model for correlating alerts is based on the observation that in a series of attacks, the component attacks are usually related, with earlier ones preparing for later ones. We correlate alerts using the prerequisites and consequences of the corresponding attacks. For example, the existence of a vulnerable service is a prerequisite for a remote buffer overflow attack. We use predicates and logical formulas to represent these prerequisites and consequences.

### Hyper-alerts and Hyper-alert Correlation Graphs

We use hyper-alerts and hyper-alert correlation graphs to represent and analyze the relationships between alerts. These tools help in simplifying the analysis of large sets of correlated alerts and in understanding the attack strategies behind them.

### Case Study: DEF CON 8 CTF Event

We conducted a case study with the network traffic captured at the DEF CON 8 CTF event to evaluate the effectiveness of our alert correlation method and the three utilities we developed. Our results show that these utilities can effectively simplify the analysis of large amounts of alerts and reveal several attack strategies used in the event.

### Conclusion and Future Work

This paper has shown that our alert correlation method and the three utilities we developed can effectively simplify the analysis of large sets of correlated alerts and reveal attack strategies. Future work will focus on further refining these tools and applying them to other real-world datasets.