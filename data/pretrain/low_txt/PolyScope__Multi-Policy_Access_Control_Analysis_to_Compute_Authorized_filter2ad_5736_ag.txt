### References

1. W. E. Boebert and R. Y. Kain. *A Practical Alternative to Hierarchical Integrity Policies*. In *Proceedings of the 8th National Computer Security Conference*, 1985.

2. Sven Bugiel, Lucas Davi, Alexandra Dmitrienko, Thomas Fischer, Ahmad-Reza Sadeghi, and Bhargava Shastry. *Towards Taming Privilege-Escalation Attacks on Android*. In *Proceedings of the 19th Network and Distributed System Security Symposium (NDSS)*, 2012.

3. Xiang Cai, Yuwei Gui, and Rob Johnson. *Exploiting Unix File-System Races via Algorithmic Complexity Attacks*. In *IEEE Statistical Signal Processing Workshop*, 2009.

4. Suresh Chari, Shai Halevi, and Wietse Venema. *Where Do You Want to Go Today? Escalating Privileges by Pathname Manipulation*. In *Proceedings of the 17th Network and Distributed System Security Symposium (NDSS)*, 2010.

5. Haining Chen, Ninghui Li, William Enck, Yousra Aafer, and Xiangyu Zhang. *Analysis of SEAndroid Policies: Combining MAC and DAC in Android*. In *Proceedings of the Annual Computer Security Applications Conference (ACSAC)*, 2017.

6. Hong Chen, Ninghui Li, and Ziqing Mao. *Analyzing and Comparing the Protection Quality of Security Enhanced Operating Systems*. In *Proceedings of the 16th Network and Distributed System Security Symposium (NDSS)*, pages 11–16, 2009.

7. Crispin Cowan, Steve Beattie, Chris Wright, and Greg Kroah-Hartman. *RaceGuard: Kernel Protection from Temporary File Race Vulnerabilities*. In *Proceedings of the 10th USENIX Security Symposium*, 2001.

8. Drew Dean and Alan Hu. *Fixing Races for Fun and Profit*. In *Proceedings of the 13th USENIX Security Symposium*, 2004.

9. William Enck, Machigar Ongtang, and Patrick McDaniel. *On Lightweight Mobile Phone Application Certification*. In *Proceedings of the 16th ACM Conference on Computer and Communications Security*, pages 235–245, 2009.

10. Boris Farber. *ClassyShark*. URL: <https://github.com/google/android-classyshark>. Accessed May 2020.

11. Julien Gamba, Mohammed Rashed, Abbas Razaghpanah, Juan Tapiador, and Narseo Vallina-Rodriguez. *An Analysis of Pre-installed Android Software*. arXiv preprint arXiv:1905.02713, 2019.

12. Google. *Security Overview*. 2019. URL: <https://source.android.com/security/overview/updates-resources#process_types>. Accessed January 10, 2020.

13. Google. *SELinux for Android 8.0*. February 2018. URL: <https://source.android.com/security/selinux/images/SELinux_Treble.pdf>. Accessed December 2019.

14. Google. *Storage Updates in Android 11*. URL: <https://developer.android.com/preview/privacy/storage>. Accessed June 2020.

15. Norm Hardy. *The Confused Deputy: or Why Capabilities Might Have Been Invented*. *ACM Special Interest Group in Operating Systems, Operation System Review*, 22(4), 1988. ISSN: 0163-5980.

16. M. Harrison, W. Ruzzo, and J. D. Ullman. *Protection in Operating Systems*. *Communications of the ACM*, August 1976.

17. Grant Hernandez, Dave Jing Tian, Anurag Swarnim Yadav, Byron J. Williams, and Kevin R. B. Butler. *BigMAC: Fine-Grained Policy Analysis of Android Firmware*. In *Proceedings of the USENIX Security Symposium*, 2020.

18. Antonio Ken Iannillo, Roberto Natella, Domenico Cotroneo, and Cristina Nita-Rotaru. *Chizpurfle: A Gray-box Android Fuzzer for Vendor Service Customizations*. In *Software Reliability Engineering (ISSRE), IEEE 28th International Symposium*, pages 1–11, 2017.

19. Trent Jaeger, Antony Edwards, and Xiaolan Zhang. *Managing Access Control Policies Using Access Control Spaces*. In *Proceedings of the Seventh ACM Symposium on Access Control Models and Technologies*, pages 3–12, New York, NY, USA, 2002.

20. Trent Jaeger, Reiner Sailer, and Xiaolan Zhang. *Analyzing Integrity Protection in the SELinux Example Policy*. In *Proceedings of the 12th USENIX Security Symposium*, 2003.

21. A. Jones, R. Lipton, and L. Snyder. *A Linear Time Algorithm for Deciding Security*. In *Proceedings of the 17th Annual Symposium on Foundations of Computer Science*, 1976.

22. Daniel Kachakil. *Multiple Vulnerabilities in Android’s Download Provider (CVE-2018-9468, CVE-2018-9493, CVE-2018-9546)*. <https://ioactive.com/multiple-vulnerabilities-in-androids-download-provider-cve-2018-9468-cve-2018-9493-cve-2018-9546/>, January 2020.

23. Kyung-suk Lee and Steve J. Chapin. *Detection of File-based Race Conditions*. *International Journal of Information Security*, 2005.

24. P. A. Loscocco, S. D. Smalley, P. A. Muckelbauer, R. C. Taylor, S. J. Turner, and J. F. Farrell. *The Inevitability of Failure: The Flawed Assumption of Security in Modern Computing Environments*. In *Proceedings of the 21st National Information Systems Security Conference*, pages 303–314, 1998.

25. Slava Makkaveev. *Man-in-the-Disk: Android Apps Exposed via External Storage*. February 2019. URL: <https://research.checkpoint.com/2018/androids-man-in-the-disk/>.

26. W. S. McPhee. *Operating System Integrity in OS/VS2*. *IBM System Journal*, 13:230–252, 3, September 1974.

27. Novell. *AppArmor Linux Application Security*. <http://www.novell.com/linux/security/apparmor/>.

28. Open ADB Ports Being Exploited to Spread Possible Satori Variant in Android Devices, August 2018. URL: <https://blog.trendmicro.com/trendlabs-security-intelligence/open-adb-ports-being-exploited-to-spread-possible-satori-variant-in-android-devices/>. Accessed February 2020.

29. OpenWall Project - Information Security Software for Open Environments, 2008. URL: <http://www.openwall.com/>.

30. J. Park, G. Lee, S. Lee, and D. Kim. *RPS: An Extension of Reference Monitor to Prevent Race-Attacks*. In *Advances in Multimedia Information Processing*, 2004.

31. Calton Pu and Jinpeng Wei. *Modeling and Preventing TOCTTOU Vulnerabilities in Unix-style Filesystems*. In *IEEE International Symposium of System Engineering*, 2006.

32. Ryan Johnson. *All Your SMS and Contacts Belong to Adups and Others*. July 2017. URL: <https://www.blackhat.com/docs/us-17/wednesday/us-17-johnson-all-your-sms-contacts-belong-to-adups-others.pdf>. Accessed June 2019.

33. R. S. Sandhu. *The Typed Access Matrix Model*. In *Proceedings of the 1992 IEEE Symposium on Security and Privacy*, 1992.

34. SELinux. URL: <https://github.com/SELinuxProject>. Accessed December 2019.

35. SETools. URL: <https://github.com/TresysTechnology/setools>. Accessed December 2019.

36. Umesh Shankar, Trent Jaeger, and Reiner Sailer. *Toward Automated Information-Flow Integrity Verification for Security-Critical Applications*. In *Proceedings of the 2006 Network and Distributed System Security Symposium (NDSS)*, 2006.

37. Stephen Smalley and Robert Craig. *Security Enhanced (SE) Android: Bringing Flexible MAC to Android*. In *Proceedings of the 20th Network and Distributed Systems Symposium (NDSS)*, 2013.

38. StatCounter. *OS Market Share*. March 2020. URL: <https://gs.statcounter.com/os-market-share>.

39. Dave (Jing) Tian, Grant Hernandez, Joseph I. Choi, Vanessa Frost, Christie Raules, Patrick Traynor, Hayawardh Vijayakumar, Lee Harrison, Amir Rahmati, Michael Grace, and Kevin R. B. Butler. *ATtention Spanned: Comprehensive Vulnerability Analysis of AT Commands Within the Android Ecosystem*. In *27th USENIX Security Symposium*, pages 273–290, 2018.

40. Jonathon Tidswell and Trent Jaeger. *An Access Control Model for Simplifying Constraint Expression*. In *Proceedings of the 7th ACM Conference on Computer and Communications Security*, 2000.

41. Dan Tsafrir, Tomer Hertz, David Wagner, and Dilma Da Silva. *Portably Solving File TOCTTOU Races with Hardness Amplification*. In *USENIX Conference on File and Storage Technologies*, 2008.

42. Eugene Tsyrklevich and Bennet Yee. *Dynamic Detection and Prevention of Race Conditions in File Accesses*. In *USENIX Security Symposium*, 2003.

43. Prem Uppuluri, Uday Joshi, and Arnab Ray. *Preventing Race Condition Attacks on Filesystems*. In *ACM Symposium on Applied Computing*, 2005.

44. Hayawardh Vijayakumar, Xinyang Ge, Mathias Payer, and Trent Jaeger. *Jigsaw: Protecting Resource Access by Inferring Programmer Expectations*. In *Proceedings of the 23rd USENIX Security Symposium*, August 2014.

45. Hayawardh Vijayakumar, Guruprasad Jakka, Sandra Rueda, Joshua Schiffman, and Trent Jaeger. *Integrity Walls: Finding Attack Surfaces from Mandatory Access Control Policies*. In *Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security*, pages 75–76, 2012.

46. Hayawardh Vijayakumar, Joshua Schiffman, and Trent Jaeger. *Process Firewall: Protecting Processes During Resource Access*. In *Proceedings of the Eighth European Conference on Computer Systems*, 2013.

47. Hayawardh Vijayakumar, Joshua Schiffman, and Trent Jaeger. *STING: Finding Name Resolution Vulnerabilities in Programs*. In *21st USENIX Security Symposium*, 2012.

48. Ruowen Wang, Ahmed M. Azab, William Enck, Ninghui Li, Peng Ning, Xun Chen, Wenbo Shen, and Yueqiang Cheng. *SPOKE: Scalable Knowledge Collection and Attack Surface Analysis of Access Control Policy for Security Enhanced Android*. In *Proceedings of the ACM Asia Conference on Computer and Communications Security (ASIACCS)*, 2017.

49. Ruowen Wang, William Enck, Douglas Reeves, Xinwen Zhang, Peng Ning, Dingbang Xu, Wu Zhou, and Ahmed M. Azab. *EASEAndroid: Automatic Policy Analysis and Refinement for Security Enhanced Android via Large-scale Semi-supervised Learning*. In *Proceedings of the 24th USENIX Conference on Security Symposium*, pages 351–366, 2015.

50. Chris Wright, Crispin Cowan, and James Morris. *Linux Security Modules: General Security Support for the Linux Kernel*. In *USENIX Security Symposium*, 2002.

51. Liang Xie, Xinwen Zhang, Ashwin Chaugule, Trent Jaeger, and Sencun Zhu. *Designing System-Level Defenses against Cellphone Malware*. In *28th IEEE Symposium on Reliable Distributed Systems (SRDS)*, 2009.

52. Yury Zhauniarovich and Olga Gadyatskaya. *Small Changes, Big Changes: An Updated View on the Android Permission System*. In *Proceedings of the International Symposium on Research in Attacks, Intrusions, and Defenses (RAID)*, 2016.

### Additional Background

In this section, we provide details on how PolyScope collects the relevant access control information.

#### A.1 Access Control Data Collection

**MAC Data**: To obtain MAC data, PolyScope first pulls the SEAndroid policy binary file from the Android root directory using the command `adb pull sepolicy`. With the SELinux policy binary in hand, we extract the allow rules using `sesearch -A sepolicy`. To parse the SELinux attributes, we pull the attribute mapping with `seinfo -a -x sepolicy`.

**DAC Data**: To obtain DAC permissions for all files on an Android system, PolyScope executes `adb shell ls -lRZ` from the root directory. Note that the phone must be rooted to obtain the full list of file permissions, so we use a boot-time root technique to gain root. PolyScope collects the file permission data as shown in Table 6. The data in Table 6 indicates: a file `authtokcont` under the directory `/efs` has read and write permissions for its owner and group members. Its owner and group UID are both `radio`, and its MAC security label is `efs_file`.

**Process Information**: PolyScope obtains process access control information by executing the command `adb shell ps -A -o label,user,group,COMMAND`, which provides a mapping from a DAC user ID to a MAC label for running processes. One data sample is shown in Table 7. This entry shows that the `init` process has a security label of `u:r:init:s0`, a UID of `root`, a GID of `root`, was spawned by the command `/init`, and has a PID of `1`. However, the process list collection does not provide the full information on DAC supplementary groups, as described in Section 5.3. For Android system services, these extra groups are defined in the `init.rc` file, which can be parsed statically. For apps, PolyScope uses a shell script to obtain process DAC group information stored in `/proc`.

**Android Permission Data**: To obtain Android Permissions' mappings to DAC groups, PolyScope parses `/etc/platform.xml` from the Android device. Next, we need to separate the signature Android Permissions from the non-signature Android Permissions, which are available via the Android package manager (PM), as the non-signature permissions may be applied by an app. PolyScope uses the non-signature permissions to compute DAC expansion for adversaries.

**Filesystem and FileProvider**: To determine whether attack operations are blocked, PolyScope needs to examine the filesystem configuration and the application package. First, PolyScope obtains filesystem configurations by running `adb shell mount`, which will return a list of filesystem mount configurations. We identify the directories mounted with the `ro` or `nosymlink` flags and mark them as read-only and prohibiting symlinks, respectively. Second, for the application package, we want to determine if the application uses the `FileProvider` class to protect itself from luring. PolyScope first queries the `PackageManager` service for a full list of APK files on the system. Next, PolyScope collects all the APK files found and performs code inspection with Google’s new `ClassyShark` tool [15] to identify the presence of the `FileProvider` class.

---

This optimized version maintains the structure and content of the original text while improving clarity, coherence, and professionalism.