### 10. Limitations and Future Work

#### Other GPU Frameworks
While OpenGL ES is the primary framework for leveraging the GPU in mobile devices, it is not the only one. Notably, OpenCL and CUDA also utilize the GPU for computation. Milkomeda currently disallows any code outside the shield space from interacting with the GPU device driver, thereby blocking the use of these frameworks. We plan to address this limitation in two steps:

1. **Framework Integration**: We will load these frameworks within the shield space and allow applications to use them through appropriate shield-calls. This approach immediately improves upon the current state-of-the-art, which requires unrestricted access to the GPU device driver. In our solution, the application's access will be regulated and limited to a higher-level API (i.e., the GPU framework API).
2. **Security Evaluation and Vetting**: We will evaluate the security of the interfaces provided by these frameworks. If necessary, we will investigate and implement additional vetting mechanisms to ensure their secure usage.

#### Use the Shield Space to Improve WebGL Performance
As mentioned, web browsers use a multi-process architecture to protect the integrity of security checks (see Figure 1b). We plan to leverage the shield space to deploy the WebGL backend (including its security checks) within the web app process, thereby improving WebGL performance.

#### Supporting ANGLE
WebGL uses ANGLE’s shader validator, which is being enhanced with additional security checks. While ANGLE does not yet provide a comprehensive set of checks (e.g., no support for OpenGL ES version 3.0), it is under active development. Google has discussed the potential integration of all security checks [14]. We plan to update our CheckGen tool to automatically reuse ANGLE’s security checks for the mobile graphics interface.

#### Supporting ARMv7 Processors
Our current shield implementation in Milkomeda targets ARMv8 processors, which are used in modern mobile devices. We plan to extend support to older ARMv7 processors. For this, we will allocate a smaller portion of the process address space for the shield space, as the address space is limited on 32-bit processors. We will also consider using ARM memory domains available in ARMv7 processors [27], which do not require kernel modifications. Unfortunately, ARM memory domains are not available on ARMv8 processors. We believe that if such hardware support existed, the overhead of the shield could be reduced.

### 11. Conclusions

We introduced Milkomeda, a system designed to protect the mobile graphics interface against exploits. Through our study, we demonstrated that the mobile graphics interface exposes a significant amount of vulnerable kernel code to potentially malicious mobile applications. However, mobile apps' access to the OpenGL ES interface is not currently vetted.

Browser vendors have invested considerable effort in developing a comprehensive set of security checks for the WebGL API, a framework for GPU-based graphics acceleration in web applications. Milkomeda repurposes these existing WebGL security checks to enhance the security of the mobile graphics interface. This is achieved with minimal engineering effort by using the CheckGen tool, which automates the porting of these checks for mobile graphics. Additionally, we introduced a novel shield space design that allows us to securely deploy these checks within the app’s process address space, thereby improving performance. Our evaluation shows that Milkomeda achieves high graphics performance for various mobile applications, albeit with a moderate increase in CPU utilization.

### Acknowledgments

This work was supported by NSF awards #1617513, #1513783, and ONR award N00014-17-1-2513. Any opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of our sponsors. We thank the paper shepherd, Adwait Nadkarni, and the anonymous CCS reviewers for their insightful comments. The pseudocode used in Figure 6 was adopted and modified from a similar one suggested by one of the reviewers.

### References

[1] 2011. Chromium Issue 70718: Crashes when opening a page with WebGL. https://bugs.chromium.org/p/chromium/issues/detail?id=70718.
[2] 2011. Microsoft considers WebGL harmful. http://blogs.technet.com/b/srd/archive/2011/06/16/webgl-considered-harmful.aspx.
[3] 2014. GPU Accelerated Compositing in Chrome. https://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome.
[4] 2015. WebGL* in Chromium*: Behind the scenes. https://software.intel.com/en-us/articles/webgl-in-chromium-behind-the-scenes.
[5] 2017. A new multi-process model for Firefox. https://hacks.mozilla.org/2017/06/firefox-54-e10s-webextension-apis-css-clip-path/.
[6] 2017. Best Practices for Working with Vertex Data. https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/TechniquesforWorkingwithVertexData/TechniquesforWorkingwithVertexData.html.
[7] 2017. Certain types of loops in WebGL shaders cause GLSL compiler crashes on Adreno. https://bugs.chromium.org/p/chromium/issues/detail?id=784817.
[8] 2017. National Vulnerability Database. https://www.nist.gov/programs-projects/national-vulnerability-database-nvd.
[9] 2017. OpenGL ES Benchmark 1. https://github.com/googlesamples/android-ndk/tree/master/hello-gl2.
[10] 2017. SELinux. https://wiki.centos.org/HowTos/SELinux.
[11] 2017. The Common Vulnerability Scoring System version 2. https://www.first.org/cvss/v2/.
[12] 2017. WebGL Security. http://www.khronos.org/webgl/security/.
[13] 2018. Android NDK. https://developer.android.com/ndk/index.html.
[14] 2018. Direct3D to OpenGL: ANGLE, Again. https://docs.google.com/presentation/d/1CucIsdGVDmdTWRUbg68IxLE5jXwCb2y1E9YVhQo0thg/pub?slide=id.g26efd2cf6_0178.
[15] 2018. AppArmor. https://wiki.ubuntu.com/AppArmor.
[16] 2018. Client-Side Vertex Arrays. https://www.khronos.org/opengl/wiki/Client-Side_Vertex_Arrays.
[17] 2018. Drive-by Rowhammer attack using GPU on Android. https://arstechnica.com/information-technology/2018/05/drive-by-rowhammer-attack-uses-gpu-to-compromise-an-android-phone/.
[18] 2018. glTexImage2D specification – OpenGL ES 3.0. https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml.
[19] 2018. Google Play Instant. https://developer.android.com/topic/google-play-instant/.
[20] 2018. GPU Command Buffer - The Chromium Projects. https://www.chromium.org/developers/design-documents/gpu-command-buffer.
[21] 2018. OpenGL ES Benchmark 2. https://github.com/googlesamples/android-ndk/tree/master/gles3jni.
[22] 2018. OpenGL ES Benchmark 3. https://github.com/learnopengles/Learn-OpenGLES-Tutorials (Lesson 5).
[23] 2018. OpenGL ES Benchmark 4. https://github.com/learnopengles/Learn-OpenGLES-Tutorials (Lesson 7).
[24] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti. 2005. Control-Flow Integrity. In Proc. ACM CCS.
[25] A. Amiri Sani. 2017. SchrodinText: Strong Protection of Sensitive Textual Content of Mobile Applications. In Proc. ACM MobiSys.
[26] A. Amiri Sani, L. Zhong, and D. S. Wallach. 2014. Glider: A GPU Library Driver for Improved System Security. Technical Report 2014-11-14, Rice University.
[27] ARM. 2007. Architecture Reference Manual, ARMv7-A and ARMv7-R edition. ARM DDI 0406A.
[28] ARM. 2013. Architecture Reference Manual, ARMv8, for ARMv8-A architecture profile. ARM DDI 0487A.a.
[29] M. Backes, S. Bugiel, C. Hammer, O. Schranz, and P. von Styp-Rekowsky. 2015. Boxify: Full-fledged App Sandboxing for Stock Android. In Proc. USENIX Security Symposium.
[30] A. Belay, A. Bittau, A. Mashtizadeh, D. Terei, D. Mazieres, and C. Kozyrakis. 2012. Dune: Safe User-level Access to Privileged CPU Features. In Proc. USENIX OSDI.
[31] A. Bittau, P. Marchenko, M. Handley, and B. Karp. 2008. Wedge: Splitting Applications into Reduced-Privilege Compartments. In Proc. USENIX NSDI.
[32] D. Brumley and D. Song. 2004. Privtrans: Automatically Partitioning Programs for Privilege Separation. In Proc. USENIX Security Symposium.
[33] N. Burow, S. A. Carr, J. Nash, P. Larsen, M. Franz, S. Brunthaler, and M. Payer. 2017. Control-Flow Integrity: Precision, Security, and Performance. ACM Computing Surveys (CSUR).
[34] A. Chou, J. Yang, B. Chelf, S. Hallem, and D. Engler. 2001. An Empirical Study of Operating Systems Errors. In Proc. ACM SOSP.
[35] Ding, R., Qian, C., Song, C., Harris, B., Kim, T., and Lee, W. 2017. Efficient Protection of Path-Sensitive Control Security. In Proc. USENIX Security Symposium.
[36] K. Elphinstone and G. Heiser. 2013. From L3 to seL4 What Have We Learnt in 20 Years of L4 Microkernels?. In Proc. ACM SOSP.
[37] T. Frassetto, P. Jauernig, C. Liebchen, and A. Sadeghi. 2018. IMIX: In-Process Memory Isolation EXtension. In Proc. USENIX Security Symposium.
[38] P. Frigo, C. Giuffrida, H. Bos, and K. Razavi. 2018. Grand Pwning Unit: Accelerating Microarchitectural Attacks with the GPU. In Proc. IEEE Security and Privacy (S&P).

[Additional references follow the same format.]