### Limitations of ASLR and Advances in Code Diversification

The limitations of Address Space Layout Randomization (ASLR) against advanced attacks have spurred active research into defenses based on code diversification. However, from a practical standpoint, only a few of these approaches [41] can be effectively applied to protect complex commercial off-the-shelf (COTS) software, such as closed-source browsers and document viewers, which are frequent targets of in-the-wild exploits.

### Focus and Objectives

In this paper, we address the limitations of current binary-compatible code diversification techniques, with a particular focus on in-place code randomization (IPR) [41]. Our primary goal is to enhance the randomization coverage, as existing methods often leave many gadgets unaffected or with insufficient entropy, making them vulnerable to randomization-resistant Return-Oriented Programming (ROP) payloads. To achieve this, we introduce instruction displacement, a code diversification technique based on static binary instrumentation that, like IPR, does not require complete code disassembly.

### Results and Performance

Our experimental results demonstrate that the proposed technique significantly reduces the number of non-randomized gadgets. Specifically, when combined with standalone in-place code randomization, the number of non-randomized gadgets decreases from 15.04% to 2.77%. When considering non-disassembled code regions, the reduction is even more pronounced, from 21.45% to 8.96%. Importantly, this improvement comes with a negligible performance overhead of just 0.36%.

### Future Work

As part of our future work, we plan to explore more aggressive combinations of instruction displacement and IPR. The increased flexibility in altering existing code once it has been displaced will allow us to further improve randomization entropy. Additionally, we will investigate other patching techniques or alterations to reduce the remaining fraction of non-randomized gadgets even further.

### Availability

Our prototype implementation is publicly available at: [https://github.com/kevinkoo001/ropf](https://github.com/kevinkoo001/ropf)

### Acknowledgments

This work was supported by the Office of Naval Research through contract N00014-15-1-2378. Any opinions, findings, conclusions, or recommendations expressed herein are those of the authors and do not necessarily reflect those of the Office of Naval Research.

### References

[1] /ORDER (put functions in order).  
   http://msdn.microsoft.com/en-us/library/00kh39zz.aspx.

[2] Orp: in-place binary code randomizer.  
   http://nsl.cs.columbia.edu/projects/orp/.

[3] Profile-guided optimizations.  
   http://msdn.microsoft.com/en-us/library/e7k32f4k.aspx.

[4] Syzygy - profile guided, post-link executable reordering.  
   http://code.google.com/p/syzygy/wiki/SyzygyDesign.

[5] Wine.  
   http://www.winehq.org.

[6] MWR Labs Pwn2Own 2013 Write-up - Webkit Exploit, 2013.  
   https://labs.mwrinfosecurity.com/blog/mwr-labs-pwn2own-2013-write-up-webkit-exploit/.

[7] B. Antoniewicz. Analysis of a Malware ROP Chain, Oct. 2013.  
   http://blog.opensecurityresearch.com/2013/10/analysis-of-malware-rop-chain.html.

[8] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. Nürnberger, and J. Pewny. You can run but you can’t read: Preventing disclosure exploits in executable code. In Proceedings of the 21st ACM Conference on Computer and Communications Security (CCS), 2014, pages 1342–1353.

[9] M. Backes and S. Nürnberger. Oxymoron: Making fine-grained memory randomization practical by allowing code sharing. In Proceedings of the 23rd USENIX Security Symposium, 2014.

[10] J. Bennett, Y. Lin, and T. Haq. The Number of the Beast, 2013.  
   http://blog.fireeye.com/research/2013/02/the-number-of-the-beast.html.

[11] E. Bhatkar, D. C. Duvarney, and R. Sekar. Address obfuscation: an efficient approach to combat a broad range of memory error exploits. In Proceedings of the 12th USENIX Security Symposium, 2003.

[12] S. Bhatkar, R. Sekar, and D. C. DuVarney. Efficient techniques for comprehensive protection from memory error exploits. In Proceedings of the 14th USENIX Security Symposium, August 2005.

[13] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazières, and D. Boneh. Hacking blind. In Proceedings of the 35th IEEE Symposium on Security and Privacy, 2014, pages 227–242.

[14] K. Braden, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen, and A.-R. Sadeghi. Leakage-resilient layout randomization for mobile devices. In Proceedings of the 2016 Network and Distributed System Security (NDSS) Symposium, 2016.

[15] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross. Control-flow bending: On the effectiveness of control-flow integrity. In Proceedings of the 24th USENIX Security Symposium, 2015, pages 161–176.

[16] N. Carlini and D. Wagner. ROP is Still Dangerous: Breaking Modern Defenses. In Proceedings of the 23rd USENIX Security Symposium, 2014, pages 385–399.

[17] E. Carrera. pefile.  
   https://github.com/erocarrera/pefile.

[18] F. B. Cohen. Operating system protection through program evolution. Computers and Security, 12(1993):565–584, Oct. 1993.

[19] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi, S. Brunthaler, and M. Franz. Readactor: Practical code randomization resilient to memory disclosure. In Proceedings of the 36th IEEE Symposium on Security and Privacy, May 2015.

[20] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and F. Monrose. Isomeron: Code randomization resilient to (just-in-time) return-oriented programming. In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2015.

[21] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose. Stitching the gadgets: On the ineffectiveness of coarse-grained control-flow integrity protection. In Proceedings of the 23rd USENIX Security Symposium, 2014, pages 401–416.

[22] L. V. Davi, A. Dmitrienko, S. Nürnberger, and A.-R. Sadeghi. Gadge me if you can: Secure and efficient ad-hoc instruction-level randomization for x86 and ARM. In Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security (ASIACCS), 2013, pages 299–310.

[23] S. Designer. Getting around non-executable stack (and fix).  
   http://seclists.org/bugtraq/1997/Aug/63.

[24] I. Evans, F. Long, U. Otgonbaatar, H. Shrobe, M. Rinard, H. Okhravi, and S. Sidiroglou-Douskos. Control jujutsu: On the weaknesses of fine-grained control flow integrity. In Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS), 2015, pages 901–913.

[25] S. Forrest, A. Somayaji, and D. Ackley. Building diverse computer systems. In Proceedings of the 6th Workshop on Hot Topics in Operating Systems (HotOS-VI), 1997.

[26] G. Fresi Roglia, L. Martignoni, R. Paleari, and D. Bruschi. Surgically returning to randomized lib(c). In Proceedings of the 25th Annual Computer Security Applications Conference (ACSAC), 2009.

[27] J. Gionta, W. Enck, and P. Ning. HIDEM: Protecting the contents of userspace memory in the face of disclosure vulnerabilities. In Proceedings of the 5th ACM Conference on Data and Application Security and Privacy (CODASPY), 2015, pages 325–336.

[28] E. Göktas, E. Athanasopoulos, H. Bos, and G. Portokalidis. Out of control: Overcoming control-flow integrity. In Proceedings of the 35th IEEE Symposium on Security & Privacy (S&P), 2014.

[29] Hex-Rays. IDA Pro Disassembler.  
   http://www.hex-rays.com/idapro/.

[30] J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson. ILR: Where’d my gadgets go? In Proceedings of the 33rd IEEE Symposium on Security & Privacy (S&P), 2012.

[31] X. Hu, T.-c. Chiueh, and K. G. Shin. Large-scale malware indexing using function-call graphs. In Proceedings of the 16th ACM conference on Computer and Communications Security (CCS), 2009.

[32] R. Johnson. A castle made of sand: Adobe Reader X sandbox. CanSecWest, 2011.

[33] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. Address space layout permutation (ASLP): Towards fine-grained randomization of commodity software. In Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC), 2006.

[34] V. Kotov. Dissecting the newest IE10 0-day exploit (CVE-2014-0322), Feb. 2014.  
   http://labs.bromium.com/2014/02/25/dissecting-the-newest-ie10-0-day-exploit-cve-2014-0322/.

[35] S. Krahmer. x86-64 buffer overflow exploits and the borrowed code chunks exploitation technique.  
   http://www.suse.de/~krahmer/no-nx.pdf.

[36] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz. SOK: Automated software diversity. In Proceedings of the 2014 IEEE Symposium on Security and Privacy, 2014, pages 276–291.

[37] H. Li. Understanding and exploiting Flash ActionScript vulnerabilities. CanSecWest, 2011.

[38] J. Li, Z. Wang, X. Jiang, M. Grace, and S. Bahram. Defeating return-oriented rootkits with “return-less” kernels. In Proceedings of the 5th European conference on Computer Systems (EuroSys), 2010.

[39] M. Miller, T. Burrell, and M. Howard. Mitigating software vulnerabilities, July 2011.  
   http://www.microsoft.com/download/en/details.aspx?displaylang=en&id=26788.

[40] K. Onarlioglu, L. Bilge, A. Lanzi, D. Balzarotti, and E. Kirda. G-Free: defeating return-oriented programming through gadget-less binaries. In Proceedings of the 26th Annual Computer Security Applications Conference (ACSAC), 2010.

[41] V. Pappas, M. Polychronakis, and A. D. Keromytis. Smashing the gadgets: Hindering return-oriented programming using in-place code randomization. In Proceedings of the 2012 IEEE Symposium on Security and Privacy, 2012, pages 601–615.

[42] V. Pappas, M. Polychronakis, and A. D. Keromytis. Transparent ROP exploit mitigation using indirect branch tracing. In Proceedings of the 22nd USENIX Security Symposium, 2013, pages 447–462.

[43] Parvez. Bypassing Microsoft Windows ASLR with a little help by MS-Help, Aug. 2012.  
   http://www.greyhathacker.net/?p=585.

[44] PaX Team. Address space layout randomization.  
   http://pax.grsecurity.net/docs/aslr.txt.

[45] M. Pietrek. An in-depth look into the Win32 portable executable file format, part 2, 1994.  
   https://msdn.microsoft.com/en-us/library/ms809762.aspx.

[46] N. A. Quynh. Capstone: Next-gen disassembly framework. Black Hat USA, 2014.

[47] E. G. s, E. Athanasopoulos, M. Polychronakis, H. Bos, and G. Portokalidis. Size does matter: Why using gadget-chain length to prevent code-reuse attacks is hard. In Proceedings of the 23rd USENIX Security Symposium, 2014, pages 417–432.

[48] J. Seibert, H. Okhravi, and E. Söderström. Information leaks without memory disclosures: Remote side channel attacks on diversified code. In Proceedings of the 21st ACM Conference on Computer and Communications Security (CCS), 2014, pages 54–65.

[49] F. J. Serna. CVE-2012-0769, the case of the perfect info leak, Feb. 2012.  
   http://zhodiac.hispahack.com/my-stuff/security/Flash_ASLR_bypass.pdf.

[50] H. Shacham. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In Proceedings of the 14th ACM conference on Computer and Communications security, 2007, pages 552–61.

[51] Skape. Locreate: An anagram for relocate. Uninformed, 6, 2007.

[52] K. Z. Snow, L. Davi, A. Dmitrienko, C. Liebchen, F. Monrose, and A.-R. Sadeghi. Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization. In Proceedings of the 34th IEEE Symposium on Security & Privacy (S&P), 2013.

[53] K. Z. Snow, R. Rogowski, J. Werner, H. Koo, F. Monrose, and M. Polychronakis. Return to the zombie gadgets: Undermining destructive code reads via code inference attacks. In Proceedings of the 37th IEEE Symposium on Security & Privacy (S&P), May 2016.

[54] A. Tang, S. Sethumadhavan, and S. Stolfo. Heisenbyte: Thwarting memory disclosure attacks using destructive code reads. In Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS), 2015, pages 256–267.

[55] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary stirring: Self-randomizing instruction addresses of legacy x86 binary code. In Proceedings of the 19th ACM Conference on Computer and Communications Security (CCS), 2012, pages 157–168.

[56] R. Wartell, Y. Zhou, K. W. Hamlen, M. Kantarcioglu, and B. Thuraisingham. Differentiating code from data in x86 binaries. In Proceedings of the European Conference on Machine Learning and Knowledge Discovery in Databases, 2011, pages 522–536.

[57] J. Werner, G. Baltas, R. Dallara, N. Otternes, K. Snow, F. Monrose, and M. Polychronakis. No-execute-after-read: Preventing code disclosure in commodity software. In Proceedings of the 11th ACM Asia Conference on Computer and Communications Security (ASIACCS), May 2016.

[58] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou. Practical control flow integrity & randomization for binary executables. In Proceedings of the 34th IEEE Symposium on Security & Privacy (S&P), 2013.

[59] D. A. D. Zovi. Practical return-oriented programming. SOURCE Boston, 2010.