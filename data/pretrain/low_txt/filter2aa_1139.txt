### Breaking Samsung's Root of Trust: Exploiting Samsung S10 S-Boot

**Presenter: Jeff Chao (Jeffxx)**
- Researcher at TrapaSecurity
- Former Senior Researcher at TeamT5
- Member of HITCON CTF Team
- Member of Chroot
- Focus on Mobile and IoT Vulnerabilities

**Event: #BHUSA @BLACKHATEVENTS**

---

### Agenda
1. **Samsung Security Framework - Knox**
2. **Related Work**
3. **Vulnerabilities in Secure Boot**
4. **Demo**
5. **After Code Execution on S-boot**
6. **Demo Video**

---

### Samsung Security Framework - Knox

#### Knox - Root of Trust
- **Trusted Boot**
  - **Hardware PBL**: Verifies and loads the secure boot (S-Boot).
  - **S-Boot**: Sets up the handler for Monitor mode, drops privileges, and requests EL3 to initialize TEEOS.
  - **Verification and Loading**:
    - Hypervisor (uh.bin)
    - Kernel (boot.img)
  - **Kernel with DM-Verity**: Verifies and mounts system.img and vendor.img.

#### Knox Bit (Warranty Bit)
- A one-time fuse that cannot be restored.
- Blows the fuse when attempting to boot a custom image, preventing further booting.

#### Sensitive Data Protection
- The storage (Sensitive Data) is encrypted when the device is locked.
- Encrypted keys are stored in TrustZone.

---

### ARM TrustZone

- **Non-secure World**:
  - User Mode (EL0)
  - Kernel Mode (EL1)
  - Hypervisor Mode (EL2)

- **Secure World**:
  - User Mode (EL0)
  - Kernel Mode (EL1)
  - Monitor Mode (EL3)

---

### Related Work

- **BH17 – Defeating Samsung KNOX with Zero Privilege by returnsme**
  - EL0 -> EL1

- **BH17 EU - How Samsung Secures Your Wallet by Tencent Lab**
  - EL0 -> Secure EL0 (kinibi)

- **BH19 – Breaking Samsung’s Arm Trustzone**
  - EL0 -> Secure-EL3 (kinibi, S8 and before)

- **In This Talk**:
  - Outside the box (locked phone) -> Non-Secure EL1

---

### S-Boot Boot Flow

1. **Initialization**
2. **Verify Boot Image**
3. **Boot into Kernel**
4. **Set Monitor Mode**
5. **Check Boot Mode**
   - **ODIN Mode** (Volume Down + Power):
     - Flash stock firmware
     - Prevent rollback

---

### Vulnerability I: Odin Request

- **OpCode**:
  - 0x64: Odin mode initial & settings
  - 0x65: Flash PIT
  - 0x66: Flag image
  - **subOp**: Depends on OpCode (initialize, set, get, etc.)
  - **arg1 ~ arg4**: Assign size or values

- **Odin Flash Image Command**:
  - No check for provided size
  - Integer overflow
  - Use 0xC0000000 if less than 0x1e00000
  - Otherwise, use 0xB0000000
  - Copy to buffer
  - S8 and before at 0xC0000000
  - S9 and later at 0x880000000

- **Overflow the Physical Memory**:
  - Overwrite data segments and heap
  - Bypass MMU
  - Trigger data-abort
  - Overwrite error handler code with jump sled
  - Place shellcode in front of the code segment

- **Note**: S9 and later are not exploitable due to buffer changes.

---

### Potential Exploit Path on S10

- **Parallel & Compressed Download Mode**:
  - Boots up additional CPU cores
  - Sets image buffer to 0x880000000
  - Fallback to normal download if boot CPU fails
  - Buffer changes back to 0xC0000000

- **Exploit Steps**:
  - Make CPU boot fail
  - Use Uart mode and smp_test command
  - Enter Odin mode
  - Use debug cable to detect RID_523K
  - Report bug (August 2019): Duplicated

- **Patch Note**:
  - Samsung Security Update - October 2019
  - SVE-2019-15230: Potential Integer Overflow in Bootloader

---

### Vulnerability II: Aligned Size?

- **Odin - Packet Data Size**:
  - Set packet data size with opCode 0x64, subOp 0x05
  - Bypass check
  - Achieve code execution as in previous vulnerability

- **Patch Note**:
  - Samsung Security Update - January 2020

---

### Vulnerability III: ODIN – PIT Flash Command

- **opCode = 0x65**:
  - PIT is small, stored in heap buffer
  - With size 0x2000
  - Patch of vulnerability II: Size can be up to 0xFFFFFF
  - > 0x2000 => heap overflow

- **Pseudo Code - Receive Data**:
  - usb_recv function receives until passed size is reached
  - Even with large intervals

- **Heap Overflow**:
  - Overwrite metadata of heap chunk
  - Use House of Spirit technique
  - Limited overwrite data: *prev + 4 = 1
  - Overwrite return address on stack

- **Patch Note**:
  - Samsung Security Update - May 2020

---

### After Code Execution in S-Boot

- **Boot the Phone**:
  - Recover from smashed stack and heap
  - Call boot functions one by one
  - Skip TrustZone-related calls
  - Load custom kernel
  - Replace image and boot kernel

- **Exploit Steps**:
  - Set packet data size to a big number
  - Send Odin PIT flash command
  - Interrupt usb_recv() to cause heap overflow
  - Send another Odin command to trigger malloc and free buffer
  - Overwrite RIP on stack, jump to shellcode
  - Re-init heap and stack
  - Continue booting
  - Replace boot image before booting

- **Result**:
  - Gain EL1 in normal world
  - Phone is still locked, but sensitive data can be accessed after user unlock

---

### Exposed Attack Surface

- **Attacking Secure World Trustlet**:
  - Gatekeeper trustlet
  - Samsung Pay trustlet
  - Keystore trustlet
  - Many vulnerabilities in the past

- **Attack the Gatekeeper Trustlet to Decrypt Storage**:
  - SVE-2019-14575: Try all possible pattern codes in a few hours

---

### Conclusion

- **Data Security**:
  - Even if data is stored in the secure world, it is not 100% secure.
  - Multiple actions are needed to exploit and retrieve data.
  - Landing: RCE, Local USB Exploit, Social Engineering
  - Privilege escalation to non-secure EL1
  - Vulnerabilities in trustlet to get into secure-world EL0
  - Privilege escalation from secure-world EL0 to secure-world EL1 or EL3
  - Without these steps, especially the red points, the data in the phone is still safe.

---

### Disclosure Timeline

- **2019-10-02**: Report Vulnerability I
- **2019-10-08**: Informed Vulnerability I duplicated
- **2019-10-11**: Report Vulnerability II
- **2020-01-06**: Samsung Patched, SVE-2019-15872
- **2020-01-21**: Report Vulnerability III
- **2020-05-06**: Samsung Patched, SVE-2020-16712

---

**Contact: PI:EMAIL**

**THANK YOU!**