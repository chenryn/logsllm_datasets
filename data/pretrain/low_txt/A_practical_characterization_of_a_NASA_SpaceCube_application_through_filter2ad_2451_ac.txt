### Regions Representing Vulnerable Processor Portions

The regions in question encompass the entirety of the processor's vulnerable sections. A closer examination of Figure 7 reveals that the cache arrays occupy a significantly smaller area than what a simple count of vulnerable bits might suggest (Table I). In fact, the cache arrays account for less than half of the total area of the PowerPC core. This observation implies that applying a derating factor to the probability of selecting a cache upset could enhance the accuracy of the software-based fault emulator.

### Correlation Between Laser Testing and Fault Emulation

Given that nearly all non-benign errors occurred within the cache arrays, our final experiment focused on validating the fault emulator specifically for the data and instruction caches. We conducted two fault emulation campaigns: one targeting the data cache and another targeting the instruction cache. By injecting faults exclusively into these caches and comparing the results with laser-induced faults within the same areas, we avoided the issue of cache area relative to the PowerPC core.

We performed 3,956 and 5,719 trials for the dedicated instruction cache (Icache) and data cache (Dcache) fault emulation campaigns, respectively. Figures 8 and 9 compare the results of these cache-specific fault emulation campaigns with our laser test results. When comparing the percentage of errors, we found that the fault emulation results most closely matched the laser results in the case of recoverable errors.

**Figure 8:** Results of a dedicated Icache campaign compared to laser results. Values are listed as the percentage of total faults.

**Figure 9:** Results of a dedicated Dcache campaign compared to laser results. Values are listed as the percentage of total faults.

For example, there were 133 laser-based faults injected into the instruction cache and 92 laser-based faults injected into the data cache. Since we can generate many more emulated injections than those occurring during the laser experiment, we also averaged the results for comparison. This analysis allows us to directly compare the emulated results with the laser experiment results, all within a 90% confidence interval.

### Lessons from Fault Emulation

The primary lesson from our fault emulation experiments is that future studies must incorporate laser testing and/or particle beam testing into their fault distribution models to more accurately model different error rates in SRAM cells, registers, etc. While an error distribution based on Table I provides a starting point, fully characterizing error rates will require more detailed fault models than currently available.

Practically, fault emulation proved valuable as a precursor to laser testing. The fault distribution was useful for studying application behavior in the presence of bit errors. By using fault emulation, we implemented a robust fault tolerance solution before engaging the NRL for laser testing, allowing us to test our solution without in-place debugging. This resulted in more productive testing and many more trials over the three-day testing period.

### Combining Laser Testing and Fault Emulation

Both fault emulation and laser testing, individually, provided useful insights but did not fully characterize our SpaceCube-based application. Software-controlled fault emulation tended to overemphasize cache and register errors, while laser testing provided only a small sample of faults.

Characterizing a complex application like a SpaceCube-based embedded processor requires thousands more trials than can be reasonably collected through laser testing alone. However, laser testing provides a realistic fault model that cannot be replicated through fault emulation without access to proprietary design details.

Combining fault emulation and laser testing allowed us to more fully explore the failure space of the system under test. Fault emulation enabled us to gather tens of thousands of trials at low cost and correctly predicted that, for the application under test, the instruction cache is far more sensitive than the data cache in terms of recoverable errors. This was particularly true for recoverable errors (see Figures 8 and 9), despite the somewhat unrealistic fault model imposed by the emulator, the inability to accurately model multi-bit upsets, and the fact that each injection occurs along clean clock boundaries, essentially pausing the system.

Laser testing provides a more realistic fault mechanism, injecting faults independent of processor state, causing multi-bit upsets, and injecting into logic unavailable to a software-based fault emulator. By combining these techniques, we leveraged the benefits of both to explore a much greater portion of the failure space than either technique could achieve alone.

### Insights from Both Techniques

One key insight from both laser testing and fault emulation was the relative effectiveness of error detection on both the application processor and the emulated radiation-hardened controller. Surprisingly, the majority of detected recoverable errors were caught by the application processor: 94% in the laser experiment and 97.5% in the full campaign fault emulation experiment (Table III). The emulated radiation-hardened controller detected 6% in the laser experiment and 2.5% in the fault emulation campaign.

### Related Work

While we are not aware of studies specifically addressing the correlation between fault emulation and system-level laser testing, many previous studies have related aspects. Evaluations of software-implemented fault tolerance in embedded applications have been conducted with in situ data [11]. Several studies correlate fault simulation and particle beam testing [12], or fault emulation and particle beam testing [13]. Lasers have been used for dynamic, application-level testing, often in cryptographic contexts [10]. Methods of software-based fault injection have been well documented [14-16]. The use of checkpoint/restart in embedded systems has been described by Pop et al. [17]. Our earlier work focused on fault tolerance [5] and silent data corruption [18] in a NASA SpaceCube application.

### Conclusion

In this paper, we have shared valuable lessons learned in characterizing an embedded application through both laser testing and fault emulation. We demonstrated how combining both techniques provides a greater understanding of the failure space than either method alone. Additionally, we have shown the robustness of our fault tolerance solution, which tolerated thousands of faults and recovered from every one. We hope this study will offer insights to researchers who may want to use laser testing and/or fault emulation for their own work and wish to employ both techniques more effectively.

### Acknowledgments

The authors would like to acknowledge the contributions of the following individuals and organizations for their assistance in preparing this manuscript and carrying out the laser experiments. Scott Stansberry of USC/ISI provided hardware guidance. Jonathan Ahlbin of USC/ISI provided valuable feedback on this manuscript. Stephen Buchner and Jeffrey Warner of the U.S. Naval Research Lab provided expertise in laser testing. Mark Bucciero designed and implemented much of the framework used in our fault emulation work. NASA provided a test board and DUT cards. Finally, the authors greatly acknowledge Tom Flatley, the NASA Goddard Spaceflight Center, and the NASA Earth Science Technology Office AIST Program for funding this work through grant number NNX09AF16G.

### References

[1] T. Flatley, “Advanced hybrid on-board science data processor-SpaceCube 2.0,” Earth Science Technology Forum, 2011.
[2] Synova Inc. (2012) Mongoose-V MIPS R3000 Rad-Hard Processor. [Online]. Available: http://www.synova.com/proc/mg5.html
[3] N. Haddad, R. Brown, T. Cronauer, and H. Phan, “Radiation hardened COTS-based 32-bit microprocessor,” in Fifth European Conference on Radiation and Its Effects on Components and Systems, RADECS 99. IEEE, 1999, pp. 593–597.
[4] D. Rea, D. Bayles, P. Kapcio, S. Doyle, and D. Stanley, “PowerPC RAD750-A Microprocessor for Now and the Future,” in IEEE Aerospace Conference. IEEE, 2005, pp. 1–5.
[5] M. Bucciero, J. P. Walters, and M. French, “Software fault tolerance methodology and testing for the embedded PowerPC,” in IEEE Aerospace Conference, Mar. 2011.
[6] S. P. Buchner, D. Wilson, K. Kang, D. Gill, J. A. Mazer, W. D. Raburn, A. B. Campbell, and A. R. Knudson, “Laser Simulation of Single Event Upsets,” IEEE Transactions on Nuclear Science, vol. 34, no. 6, pp. 1227–1233, Dec. 1987.
[7] Xilinx, “Virtex-4 PowerPC 405 - Errata for all Virtex-4 FX Devices.”
[8] M. Bucciero, J. P. Walters, R. Moussalli, S. Gao, and M. French, “The PowerPC 405 Memory Sentinel and Injection System,” in Proceedings of the 19th Annual International Symposium on Field-Programmable Custom Computing Machines, ser. FCCM ’11. IEEE Computer Society, 2011, pp. 154–161.
[9] C. Poivey, M. Berg, M. Friendlich, H. Kim, D. Petrick, S. Stansberry, K. LaBel, C. Seidleck, A. Phan, and T. Irwin, “Single Event Effects (SEE) response of embedded PowerPCs in a Xilinx Virtex-4 FPGA for a space application,” in 9th European Conference on Radiation and Its Effects on Components and Systems, RADECS 2007, Sep. 2007, pp. 1–5.
[10] V. Pouget, A. Douin, G. Foucard, P. Peronnard, D. Lewis, P. Fouillat, and R. Velazco, “Dynamic Testing of an SRAM-Based FPGA by Time-Resolved Laser Fault Injection,” in 14th IEEE International On-Line Testing Symposium IOLTS ’08, July 2008, pp. 295–301.
[11] M. N. Lovellette et al., “Strategies for fault-tolerant, space-based computing: Lessons learned from the ARGOS testbed,” in IEEE Aerospace Conference, 2002.
[12] V. Asenek, C. Underwood, R. Velazco, S. Rezgui, M. Oldfield, P. Cheynet, and R. Ecoffet, “SEU induced errors observed in microprocessor systems,” IEEE Transactions on Nuclear Science, vol. 45, no. 6, pp. 2876–2883, Dec. 1998.
[13] P. Ramachandran, P. Kudva, J. Kellington, J. Schumann, and P. Sanda, “Statistical Fault Injection,” in International Conference on Dependable Systems and Networks, DSN 2008, June 2008, pp. 122–127.
[14] J. Carreira, H. Madeira, and J. Silva, “Xception: A Technique for the Experimental Evaluation of Dependability in Modern Computers,” IEEE Trans. Softw. Eng., vol. 24, no. 2, pp. 125–136, 1998.
[15] R. Velazco, S. Rezgui, and R. Ecoffet, “Predicting error rate for microprocessor-based digital architectures through C.E.U. (Code Emulating Upsets) injection,” IEEE Transactions on Nuclear Science, vol. 47, no. 6, pp. 2405–2411, Dec. 2000.
[16] P. Bernardi, L. Sterpone, M. Violante, and M. Portela-Garcia, “Hybrid Fault Detection Technique: A Case Study on Virtex-II Pro’s PowerPC 405,” IEEE Transactions on Nuclear Science, vol. 53, no. 6, pp. 3550–3557, Dec. 2006.
[17] P. Pop, V. Izosimov, P. Eles, and Z. Peng, “Design Optimization of Time- and Cost-Constrained Fault-Tolerant Embedded Systems With Checkpointing and Replication,” IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 17, no. 3, pp. 389–402, Mar. 2009.
[18] K. Zick, C.-C. Yu, J. P. Walters, and M. French, “Silent Data Corruption and Embedded Processing With NASA’s SpaceCube,” IEEE Embedded Systems Letters, vol. 4, no. 2, pp. 33–36, June 2012.