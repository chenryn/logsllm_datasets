Below is the optimized version of your text, with improved clarity, coherence, and a more professional tone:

---

**References:**

[62] Milad Nasr, Alireza Bahramali, and Amir Houmansadr. **DeepCorr: Strong Flow Correlation Attacks on Tor Using Deep Learning.** In *Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security*, pages 1962–1976. ACM, 2018.

[63] Ravi Netravali, Vikram Nathan, James Mickens, and Hari Balakrishnan. **Vesper: Measuring Time-to-Interactivity for Web Pages.** In *15th USENIX Symposium on Networked Systems Design and Implementation (NSDI 2018)*, Renton, WA, USA, April 9-11, 2018, pages 217–231. USENIX Association, 2018. [URL](https://www.usenix.org/conference/nsdi18/presentation/netravali-vesper).

[64] Rishab Nithyanand, Oleksii Starov, Phillipa Gill, Adva Zair, and Michael Schapira. **Measuring and Mitigating AS-Level Adversaries Against Tor.** In *23rd Annual Network and Distributed System Security Symposium (NDSS 2016)*, San Diego, California, USA, February 21-24, 2016. The Internet Society, 2016. [URL](http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/measuring-mitigating-as-level-adversaries-against-tor.pdf).

[65] Ania M. Piotrowska, Jamie Hayes, Tariq Elahi, Sebastian Meiser, and George Danezis. **The Loopix Anonymity System.** In *26th USENIX Security Symposium (USENIX Security 17)*, pages 1199–1216, 2017.

[66] Ingmar Poese, Steve Uhlig, Mohamed Ali Kaafar, Benoit Donnet, and Bamba Gueye. **IP Geolocation Databases: Unreliable?** *ACM SIGCOMM Computer Communication Review*, 41(2):53–56, 2011.

[67] The Tor Project. **Tor Metrics: Relays and Bridges.** [URL](https://metrics.torproject.org/networksize.html). Accessed December 2021.

[68] The Tor Project. **Relay Requirements.** [URL](https://community.torproject.org/relay/relays-requirements/). Accessed December 2021.

[69] The Tor Project. **Research Safety Board.** [URL](https://research.torproject.org/safetyboard/). Accessed December 2021.

[70] Mohammad Rajiullah. **Towards a Low Latency Internet: Understanding and Solutions.** PhD thesis, Karlstad University Press, 2015. [URL](https://www.diva-portal.org/smash/get/diva2:846109/FULLTEXT01.pdf).

[71] Mohammad Rajiullah, Andra Lutu, Ali Safari Khatouni, Mah-Rukh Fida, Marco Mellia, Anna Brunström, Özgü Alay, Stefan Alfredsson, and Vincenzo Mancuso. **Web Experience in Mobile Networks: Lessons from Two Million Page Visits.** In *The World Wide Web Conference (WWW 2019)*, San Francisco, CA, USA, May 13-17, 2019, pages 1532–1543. ACM, 2019. doi: 10.1145/3308558.3313606. [URL](https://doi.org/10.1145/3308558.3313606).

[72] Vera Rimmer, Davy Preuveneers, Marc Juarez, Tom Van Goethem, and Wouter Joosen. **Automated Website Fingerprinting Through Deep Learning.** *Proceedings 2018 Network and Distributed System Security Symposium*, 2018. doi: 10.14722/ndss.2018.23105. [URL](http://dx.doi.org/10.14722/ndss.2018.23105).

[73] Florentin Rochet and Olivier Pereira. **Waterfilling: Balancing the Tor Network with Maximum Diversity.** CoRR, abs/1609.04203, 2016. [URL](http://arxiv.org/abs/1609.04203).

[74] Florentin Rochet, Ryan Wails, Aaron Johnson, Prateek Mittal, and Olivier Pereira. **CLAPS: Client-Location-Aware Path Selection in Tor.** In *Proceedings of the 2020 ACM SIGSAC Conference on Computer and Communications Security (CCS '20)*, pages 17–34, New York, NY, USA, 2020. Association for Computing Machinery. ISBN 9781450370899. doi: 10.1145/3372297.3417279. [URL](https://doi.org/10.1145/3372297.3417279).

[75] Brandon Schlinker, Todd Arnold, Ítalo Cunha, and Ethan Katz-Bassett. **PEERING: Virtualizing BGP at the Edge for Research.** In *Proceedings of the 15th International Conference on Emerging Networking Experiments and Technologies*, pages 51–67, 2019.

[76] Theodor Schnitzler, C. Pöpper, Markus Dürmuth, and K. Kohls. **We Built This Circuit: Exploring Threat Vectors in Circuit Establishment in Tor.** In *2021 IEEE European Symposium on Security and Privacy (EuroS&P)*, 2021.

[77] Srinivasan Seetharaman and Mostafa Ammar. **Inter-Domain Policy Violations in Multi-Hop Overlay Routes: Analysis and Mitigation.** *Computer Networks*, 53(1):60–80, 2009. ISSN 1389-1286. doi: 10.1016/j.comnet.2008.09.014. [URL](https://www.sciencedirect.com/science/article/pii/S1389128608003009).

[78] Omar Sefraoui, Mohammed Aissaoui, and Mohsine Eleuldj. **OpenStack: Toward an Open-Source Solution for Cloud Computing.** *International Journal of Computer Applications*, 55(3):38–42, 2012.

[79] Micah Sherr, Matt Blaze, and Boon Thau Loo. **Scalable Link-Based Relay Selection for Anonymous Routing.** In *International Symposium on Privacy Enhancing Technologies Symposium*, pages 73–93. Springer, 2009.

[80] Payap Sirinam, Mohsen Imani, Marc Juarez, and Matthew Wright. **Deep Fingerprinting: Undermining Website Fingerprinting Defenses with Deep Learning.** In *Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security*, pages 1928–1943. ACM, 2018.

[81] Ao-Jan Su, David R. Choffnes, Aleksandar Kuzmanovic, and Fabián E. Bustamante. **Drafting Behind Akamai: Inferring Network Conditions Based on CDN Redirections.** *IEEE/ACM Transactions on Networking*, 17(6):1752–1765, 2009. doi: 10.1109/TNET.2009.2022157.

[82] Yixin Sun, Anne Edmundson, Nick Feamster, Mung Chiang, and Prateek Mittal. **Counter-RAPTOR: Safeguarding Tor Against Active Routing Attacks.** In *2017 IEEE Symposium on Security and Privacy (SP)*, pages 977–992. IEEE, 2017.

[83] Nirvan Tyagi, Yossi Gilad, Derek Leung, Matei Zaharia, and Nickolai Zeldovich. **Stadium: A Distributed Metadata-Private Messaging System.** In *Proceedings of the 26th Symposium on Operating Systems Principles*, pages 423–440, 2017.

[84] Jelle Van Den Hooff, David Lazar, Matei Zaharia, and Nickolai Zeldovich. **Vuvuzela: Scalable Private Messaging Resistant to Traffic Analysis.** In *Proceedings of the 25th Symposium on Operating Systems Principles*, pages 137–152, 2015.

[85] Chris Wacek, Henry Tan, Kevin S. Bauer, and Micah Sherr. **An Empirical Evaluation of Relay Selection in Tor.** In *NDSS*, 2013.

[86] Gerry Wan, Aaron Johnson, Ryan Wails, Sameer Wagh, and Prateek Mittal. **Guard Placement Attacks on Path Selection Algorithms for Tor.** *Proceedings on Privacy Enhancing Technologies*, 2019(4):272–291, 2019. doi: 10.2478/popets-2019-0069. [URL](https://doi.org/10.2478/popets-2019-0069).

[87] Tao Wang, Kevin Bauer, Clara Forero, and Ian Goldberg. **Congestion-Aware Path Selection for Tor.** In *International Conference on Financial Cryptography and Data Security*, pages 98–113. Springer, 2012.

[88] Tao Wang, Xiang Cai, Rishab Nithyanand, Rob Johnson, and Ian Goldberg. **Effective Attacks and Provable Defenses for Website Fingerprinting.** In *23rd USENIX Security Symposium (USENIX Security 14)*, pages 143–157, San Diego, CA, 2014. USENIX Association. ISBN 978-1-931971-15-7. [URL](https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/wang_tao).

[89] Lei Yang and Fengjun Li. **Enhancing Traffic Analysis Resistance for Tor Hidden Services with Multipath Routing.** In *Security and Privacy in Communication Networks*, edited by Bhavani Thuraisingham, XiaoFeng Wang, and Vinod Yegneswaran, pages 367–384, Cham, 2015. Springer International Publishing. ISBN 978-3-319-28865-9.

[90] Lei Yang and Fengjun Li. **mTor: A Multipath Tor Routing Beyond Bandwidth Throttling.** In *2015 IEEE Conference on Communications and Network Security (CNS)*, pages 479–487, 2015. doi: 10.1109/CNS.2015.7346860.

---

**Appendix A: Extended MATOR Plots**

In this section, we provide additional data from our MATOR analysis described in Section V-C. Refer to Section V for details of the analysis and results.

**Appendix B: Extended Integration with Tor**

In Section III-C, we covered the high-level design decisions made for ShorTor to support integration with Tor. Here, we provide specific details on the necessary modifications and extensions required to integrate ShorTor with Tor. ShorTor has three primary components not present in baseline Tor: (1) on-demand data races, (2) periodic sharing of latency information, and (3) a separate data path for via traffic. We designed these components to be minimal extensions to Tor’s existing protocol.

### A. Data Races

In ShorTor, data races represent the majority of required modifications. To successfully conduct a data race for traffic on a circuit, relays must:
1. Recognize data race traffic as separate from steady-state traffic.
2. Decide when a race should be conducted while observing appropriate backoff parameters.
3. Interpret the new latency tables to discover potential vias.
4. Update routing information to include vias.

#### Implementation Details:

1. **Recognition of Data Race Traffic:**
   - This can be achieved using the existing CMD field in Tor’s cell header (see Figure 4). By introducing a new CMD value to indicate that traffic is part of a data race, both vias and circuit relays can immediately recognize (and potentially drop) race traffic with minimal processing. Importantly, using the CMD field allows ShorTor to conduct data races without altering the content of the cell. Because of this, data race cells are simply normal cells from a client’s traffic stream, and clients will see no interruption or delay while the race is run.

2. **Conducting Data Races:**
   - This process is described in Sections III-B and III-C. The only additional detail is that this process will need to tie into the queuing architecture shown in Figure 5. When a data race is to be conducted for a circuit, the next cell out of its queue will be duplicated, have its header modified according to Figure 4, and have the copy rerouted to each of the vias in the race prior to reaching the output buffer. This is because, as the cells are now going to different destinations, they will also be on different TCP/TLS connections and must be sent to the appropriate output buffer.

3. **Selecting Vias:**
   - This is a simple matter of reading the latest latency table and selecting the vias with the lowest recorded latencies to participate in the race.

4. **Updating Routing Information:**
   - This is handled by a new field for the ViaID in Tor’s routing table and the new header information in Tor cells containing the IDs of the two adjacent circuit relays (see Figure 4). This information allows the via relay and both adjacent circuit relays to recognize which circuit a traffic stream is from (and, consequently, where it should be routed) even when the traffic stream arrives on a different TCP/TLS connection than is usual for the circuit (i.e., arrives through a via, not from the previous circuit relay).

### B. Latency Tables

Maintaining and disseminating up-to-date latency information is a simple process detailed in Protocol 2 presented in Section III-B. Unlike data races, it can be run entirely independently from the main Tor protocol and does not involve any circuit traffic. As such, it requires no actual integration with the Tor protocol but is simply an entirely separate functionality run by Tor relays. The table of latency information produced as part of this process is accessed to inform the selection of candidate vias for a data race but is not otherwise involved and, in particular, is not used during the steady-state of routing traffic through vias.

### C. Data Path for Via Traffic

The data path for via traffic is almost identical to that of regular, non-via, Tor traffic and follows the queuing architecture of baseline Tor as shown in Figure 5. The two differences are:
1. Traffic is not onion encrypted/decrypted while being forwarded by a via.
2. Via traffic is considered lower priority than circuit traffic.

Via traffic, like data races, can utilize the CMD field in the cell header to identify itself as soon as the TLS layer has been decrypted. This lets the via relay know that it is not expected to operate on the onion encryption layer (and does not have the keys necessary to do so) and that it should send the cell directly to the appropriate queue instead. Finally, while Tor already prioritizes browsing traffic over bulk download traffic, ShorTor requires a new priority level for via traffic that is below that of circuit traffic. This priority level is applied when cells are dequeued to be scheduled to the output buffers. Deprioritizing via traffic is necessary to ensure that it never outcompetes circuit traffic sharing the same relay (see the paragraph in Section III-C on load balancing and fairness).

---

This version of the text is more organized, coherent, and professionally formatted, making it easier to read and understand.