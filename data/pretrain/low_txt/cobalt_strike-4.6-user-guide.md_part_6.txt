### Spoofing Arguments in x64 Child Processes
- **Spoofing Arguments**: In x64 child processes, the real arguments are written to the memory space that holds the fake arguments. If the real arguments are longer than the fake arguments, the command launch will fail.
- **Source**: User Guide, www.helpsystems.com, page: 70

### Post-Exploitation: Blocking DLLs in Child Processes
- **Blocking DLLs**: Use `blockdlls start` to instruct Beacon to launch child processes with a binary signature policy that blocks non-Microsoft DLLs from the process space. Use `blockdlls stop` to disable this behavior.
- **System Requirement**: This feature requires Windows 10.

### Upload and Download Files
- **Download Command**: `download` - This command downloads the requested file. You do not need to provide quotes around a filename with spaces. Beacon is designed for low and slow exfiltration of data. During each check-in, Beacon will download a fixed chunk of each file it is tasked to get. The size of this chunk depends on Beacon’s current data channel. The HTTP and HTTPS channels pull data in 512KB chunks.
- **Downloads List**: `downloads` - Use this command to see a list of file downloads in progress for the current Beacon.
- **Cancel Download**: `cancel [filename]` - Issue this command followed by a filename to cancel a download in progress. You may use wildcards with your cancel command to cancel multiple file downloads at once.
- **Upload Command**: `upload` - This command uploads a file to the host.
- **Timestamp Update**: `timestomp` - When you upload a file, you may want to update its timestamps to blend in with other files in the same folder. This command matches the Modified, Accessed, and Created times of one file to another.
- **View Downloads**: Go to `View -> Downloads` in Cobalt Strike to see the files that your team has downloaded so far. Only completed downloads show up in this tab.
- **File Storage**: Downloaded files are stored on the team server. To bring files back to your system, highlight them here, and press `Sync Files`. Cobalt Strike then downloads the selected files to a folder of your choosing on your system.

### File Browser
- **File Browser Overview**: Beacon’s File Browser allows you to explore the files on a compromised system. Go to `[Beacon] -> Explore -> File Browser` to open it.
- **Folder Listing**: The file browser will request a listing for the current working directory of Beacon. When this result arrives, the file browser will populate.
- **Tree View**: The left-hand side of the file browser is a tree that organizes known drives and folders into one view. The right-hand side shows the contents of the current folder.
- **Cache Mechanism**: Each file browser caches the folder listings it receives. A colored folder indicates that the folder's contents are in this file browser’s cache. You may navigate to cached folders without generating a new file listing request. Press `Refresh` to ask Beacon to update the contents of the current folder.
- **Folder Navigation**: A dark-grey folder means the folder’s contents are not in the file browser’s cache. Click on a folder in the tree to have Beacon generate a task to list the contents of this folder (and update its cache). Double-click on a dark-grey folder in the right-hand side current folder view to do the same.
- **Parent Folder Navigation**: To go up a folder, press the folder button next to the file path above the right-hand side folder details view. If the parent folder is in the file browser’s cache, you will see the results immediately. If the parent folder is not in the file browser’s cache, the browser will generate a task to list the contents of the parent folder.
- **File Actions**: Right-click a file to download or delete it.
- **List Drives**: Use `List Drives` to see which drives are available.

### File System Commands
- **List Files**: `ls` - Use this command to list files in the current directory.
- **Make Directory**: `mkdir` - Use this command to make a directory.
- **Remove File/Folder**: `rm` - Use this command to remove a file or folder.
- **Copy File**: `cp` - Use this command to copy a file to a destination.
- **Move File**: `mv` - Use this command to move a file.

### The Windows Registry
- **Query Registry Key**: `reg_query [x86|x64] [HIVE\path\to\key]` - Use this command to query a specific key in the registry. This command will print the values within that key and a list of any subkeys. The `x86/x64` option is required and forces Beacon to use the WOW64 (x86) or native view of the registry.
- **Query Specific Value**: `reg_query [x86|x64] [HIVE\path\to\key] [value]` - Use this command to query a specific value within a registry key.

### Keystrokes and Screenshots
- **Keystroke Logger**: 
  - `keylogger pid x86` - Inject into an x86 process.
  - `keylogger pid x64` - Inject into an x64 process.
  - `keylogger` - Inject the keystroke logger into a temporary process.
  - **Note**: Multiple keystroke loggers may conflict with each other. Use only one keystroke logger per desktop session.
- **Screenshots**:
  - `screenshot pid x86` - Inject the screenshot tool into an x86 process.
  - `screenshot pid x64` - Inject into an x64 process.
  - `screenshot` - Inject the screenshot tool into a temporary process.
  - **Continuous Screenshot**: `screenwatch` - Continuously take screenshots until you stop the screenwatch post-exploitation job.
  - **Print Screen Method**: `printscreen` - Take a screenshot using a PrintScr key press to place the screenshot onto the user's clipboard. This feature recovers the screenshot from the clipboard and reports it back to you.
- **View Keystrokes and Screenshots**: Go to `View -> Keystrokes` to see logged keystrokes across all of your Beacon sessions. Go to `View -> Screenshots` to browse through screenshots from all of your Beacon sessions. Both of these dialogs update as new information comes in, making it easy for one operator to monitor keystrokes and screenshots on all of your Beacon sessions.

### Controlling Beacon Jobs
- **List Running Jobs**: `jobs` - Use this command to see which jobs are running in your Beacon.
- **Kill Job**: `jobkill [jobnumber]` - Use this command to kill a job.

### The Process Browser
- **Process Browser Overview**: The Process Browser tasks a Beacon to show a list of processes and displays this information to you. Go to `[beacon] -> Explore -> Show Processes` to open the Process Browser.
- **Process Tree**: The left-hand side shows the processes organized into a tree. The current process for your Beacon is highlighted yellow.
- **Process Details**: The right-hand side shows the process details. The Process Browser is also a convenient place to impersonate a token from another process, deploy the screenshot tool, or deploy the keystroke logger.
- **Highlight and Deploy**: Highlight one or more processes and press the appropriate button at the bottom of the tab. If you highlight multiple Beacons and task them to show processes, Cobalt Strike will show a Process Browser that also states which host the process comes from. This variant of the Process Browser is a convenient way to deploy Beacon’s post-exploitation tools to multiple systems at once. Simply sort by process name, highlight the interesting processes on your target systems, and press the `Screenshot` or `Log Keystrokes` button to deploy these tools to all highlighted systems.

### Desktop Control
- **VNC Server Setup**: To interact with a desktop on a target host, go to `[beacon] -> Explore -> Desktop (VNC)`. This will stage a VNC server into the memory of the current process and tunnel the connection through Beacon.
- **VNC Server Injection**: Use `desktop pid architecture low|high` to inject a VNC server into a specific process. The last parameter lets you specify a quality for the VNC session.
- **Desktop Viewer Buttons**:
  - Refresh the screen
  - View only
  - Decrease Zoom
  - Increase Zoom
  - Zoom to 100%
  - Adjust Zoom to Fit
  - Tab
  - Send Ctrl+Escape
  - Lock the Ctrl key
  - Lock the Alt key
- **Keyboard and Mouse Control**: If you can’t type in a Desktop tab, check the state of the Ctrl and Alt buttons. When either button is pressed, all of your keystrokes are sent with the Ctrl or Alt modifier. Press the Ctrl or Alt button to turn off this behavior. Make sure `View only` is not pressed either. To prevent you from accidentally moving the mouse, `View only` is pressed by default.

### Privilege Escalation
- **Elevate with Exploit**:
  - `elevate` - Lists privilege escalation exploits registered with Cobalt Strike.
  - `elevate [exploit] [listener]` - Attempts to elevate with a specific exploit.
  - **Note**: You may also launch one of these exploits through `[beacon] -> Access -> Elevate`.
- **Run as Admin**:
  - `runasadmin` - Lists command elevators registered with Cobalt Strike.
  - `runasadmin [exploit] [command+args]` - Attempts to run the specified command in an elevated context.
- **PowerShell One-liner**:
  - Go to `[beacon] -> Access -> One-liner` to set up a local host-only web server within your Beacon session to host a payload stage and return a PowerShell command to download and run this payload stage.
  - **Note**: This web server is one-use only. Once it’s connected to once, it will clean itself up and stop serving your payload.
- **Run as Known Credentials**:
  - `runas [DOMAIN\user] [password] [command]` - Runs a command as another user using their credentials. The `runas` command will not return any output.
  - `spawnas [DOMAIN\user] [password] [listener]` - Spawns a session as another user using their credentials. This command spawns a temporary process and injects your payload stage into it.
  - **Note**: Be aware that credentials for a non-SID500 account will spawn a payload in a medium integrity context. You will need to use Bypass UAC to elevate to a high integrity context.
- **Get SYSTEM**:
  - `getsystem` - Impersonates a token for the SYSTEM account. This level of access may allow you to perform privileged actions that are not possible as an Administrator user.
  - `elevate svc-exe [listener]` - Creates a service that runs a payload. It will drop an executable that runs a payload, create a service to run it, assume control of the payload, and clean up the service and executable.
- **UAC Bypass**:
  - `elevateuac-token-duplication [listener]` - Spawns a temporary process with elevated rights and injects a payload stage into it.
  - `runasadminuac-token-duplication [command]` - Runs a command of your choosing in an elevated context.
  - `runasadminuac-cmstplua [command]` - Attempts to bypass UAC and run a command in an elevated context.
- **Privileges**:
  - `getprivs` - Enables the privileges assigned to your current access token.

### Mimikatz
- **Inject Mimikatz**:
  - `mimikatz [pid] [arch] [module::command]` - Injects into the specified process to run a mimikatz command.
  - `mimikatz` - Spawns a temporary process to run a mimikatz command.
- **Force SYSTEM Elevation**:
  - Prefix a command with `!` to force mimikatz to elevate to SYSTEM before it runs your command. For example, `mimikatz !lsa::cache` will recover salted password hashes cached by the system.
- **Impersonate Current Token**:
  - Prefix a command with `@` to force mimikatz to impersonate Beacon’s current access token. For example, `mimikatz @lsadump::dcsync` will run the dcsync command in mimikatz with Beacon’s current access token.

### Credential and Hash Harvesting
- **Dump Hashes**:
  - `hashdump [pid] [x86|x64]` - Injects the hash dump tool into the specified process.
  - `hashdump` - Spawns a temporary process and injects the hash dump tool into it.
- **Dump Plaintext Credentials and NTLM Hashes**:
  - `logonpasswords [pid] [arch]` - Injects into the specified process to dump plaintext credentials and NTLM hashes.
  - `logonpasswords` - Spawns a temporary process to dump plaintext credentials and NTLM hashes.
- **Extract NTLM Password Hashes**:
  - `dcsync [pid] [arch] [DOMAIN.fqdn]` - Injects into the specified process to extract NTLM password hashes.
  - `dcsync [DOMAIN.fqdn]` - Spawns a temporary process to extract NTLM password hashes.
- **Recover Google Chrome Credentials**:
  - `chromedump [pid] [arch]` - Injects into the specified process to recover credential material from Google Chrome.
  - `chromedump` - Spawns a temporary process to recover credential material from Google Chrome.
- **Credentials Storage**: Credentials dumped with the above commands are collected by Cobalt Strike and stored in the credentials data model. Go to `View -> Credentials` to pull up the credentials on the current team server.

### Port Scanning
- **Port Scan Command**:
  - `portscan [pid] [arch] [targets] [ports] [arp|icmp|none] [maxconnections]` - Injects into the specified process to run a port scan against the specified hosts.
  - `portscan [targets] [ports] [arp|icmp|none] [maxconnections]` - Spawns a temporary process to run a port scan against the specified hosts.
- **Target and Port Specification**:
  - `[targets]` - A comma-separated list of hosts to scan. You may also specify IPv4 address ranges (e.g., 192.168.1.128-192.168.2.240, 192.168.1.0/24).
  - `[ports]` - A comma-separated list of ports to scan. You may specify port ranges as well (e.g., 1-65535).
- **Target Discovery Options**:
  - `[arp|icmp|none]` - Dictate how the port scanning tool will determine if a host is alive. The ARP option uses ARP to see if a system responds to the specified address. The ICMP option sends an ICMP echo request. The none option tells the port scan tool to assume all hosts are alive.
- **Connection Limit**:
  - `[maxconnections]` - Limits how many connections the port scan tool will attempt at any one time. The default is 1024.
- **Port Scanner Output**: The port scanner will run between Beacon check-ins. When it has results to report, it will send them to the Beacon console. Cobalt Strike will process this information and update the targets model with the discovered hosts.
- **Launch Port Scanner**: Go to `[beacon] -> Explore -> Port Scanner` to launch the port scanner tool.

### Network and Host Enumeration
- **Network and Host Enumeration Tool**:
  - `net [pid] [arch] [command] [arguments]` - Injects the network and host enumeration tool into the specified process.
  - `net [command] [arguments]` - Spawns a temporary process and injects the network and host enumeration tool into it.
- **Available Commands**:
  - `computers` - Lists hosts in a domain (groups).
  - `dclist` - Lists domain controllers. (populates the targets model)
  - `domain` - Displays the domain for this host.
  - `domain_controllers` - Lists DCs in a domain (groups).
  - `domain_trusts` - Lists domain trusts.
  - `group` - Lists groups and users in groups.
  - `localgroup` - Lists local groups and users in local groups. (great during lateral movement when you have to find who is a local admin on another system).
  - `logons` - Lists users logged onto a host.
  - `sessions` - Lists sessions on a host.
  - `share` - Lists shares on a host.
  - `user` - Lists users and user information.
  - `time` - Shows time for a host.
  - `view` - Lists hosts in a domain (browser service). (populates the targets model)

### Trust Relationships
- **Token Manipulation**:
  - `steal_token [pid]` - Impersonates a token from an existing process.
  - `ps` - Lists running processes.
  - `getuid` - Prints your current token.
  - `rev2self` - Reverts back to your original token.
- **Generate Token**:
  - `make_token [DOMAIN\user] [password]` - Generates a token that passes the specified credentials.
- **Pass-the-Hash (PTH)**:
  - `pth [pid] [arch] [DOMAIN\user] [ntlmhash]` - Injects into the specified process to generate and impersonate a token.
  - `pth [DOMAIN\user] [ntlmhash]` - Spawns a temporary process to generate and impersonate a token.
- **Make Token Dialog**: Go to `[beacon] -> Access -> Make Token` to use a front-end for these commands. It will present the contents of the credential model and use the right command to turn the selected credential entry into an access token.

### Kerberos Tickets
- **Golden Ticket**:
  - Go to `[beacon] -> Access -> GoldenTicket` to forge a Golden Ticket from Cobalt Strike. Provide the following pieces of information, and Cobalt Strike will use mimikatz to generate a ticket and inject it into your Kerberos tray:
    - The user you want to forge a ticket for.
    - The domain you want to forge a ticket for.
    - The domain's SID.
    - The NTLM hash of the krbtgt user on a domain controller.
- **Use Kerberos Ticket**:
  - `kerberos_ticket_use [/path/to/ticket]` - Injects a Kerberos ticket into the current session. This will allow Beacon to interact with remote systems using the rights in this ticket.
- **Purge Kerberos Tickets**:
  - `kerberos_ticket_purge` - Clears any Kerberos tickets associated with your session.

### Lateral Movement
- **Jump Command**:
  - `jump` - Lists lateral movement options registered with Cobalt Strike.
  - `jump [module] [target] [listener]` - Attempts to run a payload on a remote target.
- **Jump Modules**:
  - `psexec` - Uses a service to run a Service EXE artifact (x86).
  - `psexec64` - Uses a service to run a Service EXE artifact (x64).
  - `psexec_psh` - Uses a service to run a PowerShell one-liner (x86).
  - `winrm` - Runs a PowerShell script via WinRM (x86).
  - `winrm64` - Runs a PowerShell script via WinRM (x64).
- **Remote Execution**:
  - `remote-exec` - Lists remote execution modules registered with Cobalt Strike.
  - `remote-exec [module] [target] [command+args]` - Attempts to run the specified command on a remote target.
- **Remote-exec Modules**:
  - `psexec` - Remote execute via Service Control Manager.
  - `winrm` - Remote execute via WinRM (PowerShell).
  - `wmi` - Remote execute via WMI.

This document provides a comprehensive guide to various post-exploitation techniques and tools available in Cobalt Strike, including file manipulation, registry queries, keystroke logging, screenshot capturing, process management, desktop control, privilege escalation, credential harvesting, network enumeration, and lateral movement.