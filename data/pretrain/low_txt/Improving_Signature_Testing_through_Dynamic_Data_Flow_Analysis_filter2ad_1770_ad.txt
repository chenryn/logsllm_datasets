### Case Study: Evasion of Intrusion Detection Signatures

In our study, we focused the mutant operators on the URL content and successfully evaded the signature. Once we confirmed that our technique could accurately derive both basic and string constraints, we conducted a second set of experiments to demonstrate that our method could guide the evasion of closed-source signatures without prior knowledge.

To validate this, we executed the unmodified Samba `trans2open` exploit over a network link monitored by Symantec IDS. The dynamic taint analysis revealed that the sensor included a signature for this attack, specifically an equality constraint on a 16-bit word `0xd007` in the shellcode. Using this information, Sploit generated a mutant that violated this particular constraint, allowing the mutant exploit to compromise the target system while evading detection by Symantec’s NIDS.

### 5.3. Discussion

From these experiments, we conclude that our dynamic taint analysis methodology is sufficiently accurate to reconstruct the basic and string constraints used by both open-source and closed-source intrusion detection engines. This knowledge allowed Sploit to focus on generating test cases, thereby increasing the likelihood of identifying flaws in the signatures within a reasonable time frame.

For example, in the IIS chunked encoding attack involving the HTTP protocol, the large number of available mutant operators would have made the test suite too large for exhaustive analysis. Without specific information on how the IDS detects attacks, Sploit generated tens of millions of attack mutations. By determining that the signature matched only a few bytes inside one of the chunks, our mutation engine could disable all transformations not operating on the HTTP request data, reducing the test suite to a few hundred cases. Additionally, incorporating iTrace basic constraints further reduced the number of mutant operators, leaving only those that operate on end-of-line characters in the chunk data.

A similar reduction was observed in the `ans.pl` experiment. Although knowing that the IDS was looking for something in the URL field did not significantly reduce the number of test cases, the derived string-based constraints were highly effective, narrowing down the mutants to just five.

It is noteworthy that in each experiment, the first mutant generated from the reduced test suite successfully compromised the target and evaded the NIDS under test. This approach eliminated many unnecessary test cases, achieving successful evasion on the first attempt.

### 6. Related Work

The use of attack variations to test intrusion detection systems (IDS) and other security mechanisms has gained significant attention. Desynchronization attacks, initially introduced by Ptacek and Newsham [20], have been implemented in tools like `nidsbench` [3] and `congestant` [11]. Recent techniques for desynchronization at the application level [21] and attack payload level [15, 17] have also been proposed, though primarily for evasion rather than comprehensive testing and evaluation of IDS.

One of the earliest systematic approaches to using attack variations for testing IDS was Raffael Marty’s Thor [12]. Thor's design included generating variations at both the network and application layers, but its implementation was limited to network-level evasion techniques. The only result mentioned was the application of IP fragmentation to an HTTP-based attack.

Sploit [29], the first complete framework for generating mutant attacks, served as the basis for our work. Sploit defines mutant operators and provides a mutation engine to automatically generate attack variations. The initial Sploit prototype successfully evaded both open-source and commercial IDS. While Sploit does not claim to cover all possible attack variations or guarantee their success, it provides an effective framework for testing IDS signatures.

Rubin et al. [22] introduced AGENT, a tool that uses inference rules to produce attack variations. AGENT's formal characterization of transformation types allows better understanding of the mutation process, but it does not easily model complex transformations or provide guidance on exploring the mutation space. In [24], the authors proposed a model to assess the coverage of their mutant generation approach, defining a mutation algorithm as Φ-complete if it can generate all possible attack instances derivable from the original exploit with respect to a set of transformation rules Φ.

Dynamic analysis to identify portions of an attack used in signature matching was first explored in [14], where reverse-engineering a commercial, closed-source IDS guided manual evasion. Our work extends this idea, using more sophisticated techniques to drive an automatic exploit mutation engine.

Grammar inference, which aims to identify an automaton given examples of positive and negative language instances, is related to our work. While theoretically challenging [9], practical solutions exist [2]. Our approach differs in that we have information about the input, output, and internal state of the automaton, enabling more accurate results.

### 7. Conclusions and Future Work

Mutant exploits are an effective way to test IDS signatures and identify "blind spots" in IDS. Existing systems for generating mutant exploits often rely on manual or random selection of test cases. Our novel approach uses dynamic analysis to reverse-engineer NIDS signatures, extracting constraints to guide the test case generation process. This method identifies critical parts of the network stream and applies the most relevant mutant operators to these parts, successfully evading both open-source and closed-source IDS.

Future work will focus on extending the set of extractable constraints and developing a theoretical model for the automaton learning algorithm used to reverse-engineer string constraints.

### Acknowledgments

This research was partially supported by the National Science Foundation under grants CCR-0238492, CCR-0524853, and CCR-0716095.

### References

[1] A. Aho and M. Corasick. Efficient string matching: An aid to bibliographic search. Communications of the Association for Computing Machinery, 18(6), 1975.
[2] D. Angluin and C. Smith. Inductive Inference: Theory and Methods. ACM Computing Surveys, 15(3), 1983.
[3] Anzen. nidsbench: a network intrusion detection system test suite. http://packetstorm.widexs.nl/UNIX/IDS/nidsbench/, 1999.
[4] D. Balzarotti. Testing Intrusion Detection Systems. PhD thesis, Politecnico di Milano, 2006.
[5] R. Boyer and J. Moore. A Fast String Searching Algorithm. Communications of the Association for Computing Machinery, 20(10), 1977.
[6] J. Chow, B. Pfaff, T. Garfinkel, K. Christopher, and M. Rosenblum. Understanding Data Lifetime via Whole System Simulation. In USENIX Security Symposium, 2004.
[7] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou, L. Zhang, and P. Barham. Vigilante: End-to-end containment of Internet worms. In Proceedings of the ACM Symposium on Operating Systems Principles, 2005.
[8] J. Crandall and F. Chong. Minos: Control Data Attack Pre-In 37th International Symposium on Microarchitecture, 2004.
[9] E. Gold. Language Identification in the Limit. Information and Control, 5(1967), 10.
[10] P. Hazel. PCRE: Perl Compatible Regular Expressions. http://www.pcre.org/, 2005.
[11] horizon. Defeating Sniffers and Intrusion Detection Systems. Phrack Magazine, 8(54), December 1998.
[12] IBM Zurich Research Laboratory. Thor. http://www.zurich.ibm.com/csc/infosec/gsal/past-projects/thor/, 2004.
[13] S. Jha, S. Rubin, and B. Miller. Using Attack Mutation to Test a High-End NIDS. Information Security Bulletin, vol. 10, April 2005.
[14] C. Kruegel, D. Mutz, W. Robertson, G. Vigna, and R. Kemmerer. Reverse Engineering of Network Signatures. In Proceedings of the AusCERT Asia Pacific Information Technology Security Conference, Gold Coast, Australia, May 2005.
[15] S. Macaulay. ADMmutate: Polymorphic Shellcode Engine. http://www.ktwo.ca/security.html.
[16] R. Marty. Thor: A Tool to Test Intrusion Detection Systems by Variations of Attacks. Master’s thesis, ETH Zurich, March 2002.
[17] Metasploit Project. Metasploit. http://www.metasploit.com/, 2005.
[18] D. Mutz, G. Vigna, and R. Kemmerer. An Experience Developing an IDS Stimulator for the Black-Box Testing of Network Intrusion Detection Systems. In Proceedings of the 2003 Annual Computer Security Applications Conference (ACSAC ’03), pages 374–383, Las Vegas, Nevada, December 2003.
[19] J. Newsome and D. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2005.
[20] T. Ptacek and T. Newsham. Insertion, Evasion and Denial of Service: Eluding Network Intrusion Detection. Technical report, Secure Networks, January 1998.
[21] R. Graham. SideStep. http://www.robertgraham.com/tmp/sidestep.html, 2005.
[22] S. Rubin, S. Jha, and B. Miller. Automatic generation and analysis of NIDS attacks. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), December 2004.
[23] S. Rubin, S. Jha, and B. Miller. Language-Based Generation and Evaluation of NIDS Signatures. IEEE Symposium on Security and Privacy, Oakland, California, May, 2005.
[24] S. Rubin, S. Jha, and B. Miller. On the Completeness of Attack Mutation Algorithms. Proceedings of the 19th IEEE Workshop on Computer Security Foundations, pages 43–56, 2006.
[25] SecurityFocus. Avenger’s News System Remote Command Execution Vulnerability. http://securityfocus.com/bid/4149, 2002.
[26] SecurityFocus. Microsoft IIS Chunked Encoding Transfer Heap Overflow Vulnerability. http://www.securityfocus.com/bid/4485, 2002.
[27] SecurityFocus. Samba ‘call trans2open’ Remote Buffer Overflow Vulnerability. http://securityfocus.com/bid/7294, 2005.
[28] H. Spencer. regex: Regular Expression Library. http://arglist.com/regex/, 2005.
[29] G. Vigna, W. Robertson, and D. Balzarotti. Testing Network-based Intrusion Detection Signatures Using Mutant Exploits. In Proceedings of the ACM Conference on Computer and Communication Security (ACM CCS), pages 21–30, Washington, DC, October 2004.
[30] D. Wagner and P. Soto. Mimicry Attacks on Host-Based Intrusion Detection Systems. In Proceedings of the 9th ACM Conference on Computer and Communications Security, pages 255–264, Washington DC, USA, November 2002.