### 7.5. Authorization—Who Can Do What

Once you have defined how to identify your users, the next step is to determine what actions they are permitted to perform. Jenkins offers a variety of strategies for managing user permissions, ranging from a simple approach where all logged-in users can do anything, to more sophisticated role-based and project-based authentication strategies.

#### 7.5.1. Matrix-based Security

For small teams, allowing signed-in users to perform any action may be sufficient. However, for larger or multiple teams, or when Jenkins is used outside the development environment, a more advanced approach is typically required.

**Matrix-based security** is a more sophisticated method that assigns different rights to different users using a role-based approach.

##### 7.5.1.1. Setting up matrix-based security

The first step in setting up matrix-based security in Jenkins is to create an administrator. This is essential and must be done before any other configurations. The administrator can be an existing user or a new one created specifically for this purpose. To create a dedicated administrator user, sign up through the usual process (see Figure 7.2, “The Jenkins Sign-up page”).

Once your admin user is ready, activate matrix-based security by selecting "Matrix-based security" in the Authorization section of the main configuration page. Jenkins will display a table with authorized users and checkboxes for various permissions you can assign to these users (see Figure 7.16, “Matrix-based security configuration”).

The special "anonymous" user, representing unauthenticated users, is always present in the table. Typically, you should grant very limited rights to unauthenticated users, such as read-only access or no access at all (as shown in Figure 7.16, “Matrix-based security configuration”).

Next, grant administration rights to your administrator. Add your admin user in the "User/group to add" field and click "Add." Ensure that this user has every permission (see Figure 7.17, “Setting up an administrator”) and save your configuration. You should now be able to log in with your administrator account and continue setting up other users.

##### 7.5.1.2. Fine-tuning user permissions

After setting up your administrator account, you can add other users who need access to your Jenkins instance. Simply add the usernames and select the permissions you want to grant them (see Figure 7.18, “Setting up other users”). If you are using an LDAP server or Unix users and groups for authentication (see Section 7.4.2, “Using an LDAP Repository”), you can also configure permissions for groups of users.

Jenkins organizes permissions into several groups: Overall, Slave, Job, Run, View, and SCM. Each group includes specific permissions, such as:

- **Overall**
  - **Administer**: Allows system-wide configuration changes.
  - **Read**: Provides read-only access to most Jenkins pages.

- **Slave**
  - **Configure**: Create and configure new build nodes.
  - **Delete**: Delete build nodes.

- **Job**
  - **Create**: Create a new build job.
  - **Delete**: Delete an existing build job.
  - **Configure**: Update the configuration of an existing build job.
  - **Read**: View build jobs.
  - **Build**: Start a build job.
  - **Workspace**: View and download the workspace contents for a build job.
  - **Release**: Start a Maven release for a project configured with the M2Release plugin.

- **Run**
  - **Delete**: Delete a build from the build history.
  - **Update**: Update the description and other properties of a build in the build history.

- **View**
  - **Create**: Create a new view.
  - **Delete**: Delete an existing view.
  - **Configure**: Configure an existing view.

- **SCM**
  - **Tag**: Create a new tag in the source code repository for a given build.

- **Others**
  - **Promote**: If the Promoted Builds plugin is installed, this permission allows users to manually promote a build.

##### 7.5.1.3. Help! I’ve locked myself out!

If you accidentally lock yourself out of Jenkins during the setup, do not panic. As long as you have access to the Jenkins home directory, you can easily fix this. Open the `config.xml` file at the root of the Jenkins home directory and change the `<useSecurity>` element value to `false`. Restart your server, and you will regain access to Jenkins.

### 7.5.2. Project-based Security

**Project-based security** builds on the matrix-based security model and applies it to individual projects. This allows you to assign system-wide roles for your users and configure more specific rights for certain projects.

To activate project-level security, select "Project-based Matrix Authorization Strategy" in the Authorization section of the main configuration screen (see Figure 7.19, “Project-based security”). Here, you set up the default rights for users and groups, similar to matrix-based security.

You can also set up special project-specific permissions by selecting "Enable project-based security" in the project configuration screen (see Figure 7.20, “Configuring project-based security”). These permissions will be added to the system-wide permissions to produce a project-specific set of permissions applicable for that project.

### 7.5.3. Role-based Security

**Role-based security** is a more recent alternative that allows you to define global and project-level roles and assign these roles to users. This is particularly useful for large, multi-team, and multi-project organizations.

To set up role-based security, install the Role Strategy plugin via the Plugin Manager. Once installed, activate this authorization strategy in the main configuration page (see Figure 7.23, “Setting up Role-based security”).

In the Manage Roles screen, you can set up global and project-level permissions. Global permissions apply across all projects, while project roles regroup a set of permissions applicable to one or more related projects. You can define the relevant projects using regular expressions, which helps if you have clear and consistent naming conventions for your project names (see Figure 7.26, “Managing project roles”).

Once you have defined these roles, go to the Assign Roles screen to set up individual users or groups with these roles (see Figure 7.27, “Assigning roles to users”).

### 7.6. Auditing—Keeping Track of User Actions

In addition to configuring user accounts and access rights, it is useful to keep track of individual user actions. This audit trail facility is often required in many organizations.

Jenkins offers two plugins to help with this: the **Audit Trail plugin** and the **JobConfigHistory plugin**.

- **Audit Trail Plugin**: Keeps a record of user changes in rolling log files. Install it via the Plugin Manager and configure it in the Audit Trail section of the main Jenkins configuration page (see Figure 7.28, “Configuring the Audit Trail plugin”).

- **JobConfigHistory Plugin**: Maintains a full history of changes made to both job and system configuration files. Install it from the Plugin Manager and fine-tune the job history configuration in the Manage Jenkins screen (see Figure 7.29, “Setting up Job Configuration History”).

By using these plugins, you can maintain a detailed and comprehensive audit trail of user actions in Jenkins.