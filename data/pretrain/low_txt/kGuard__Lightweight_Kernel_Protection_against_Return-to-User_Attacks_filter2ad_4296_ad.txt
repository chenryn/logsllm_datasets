# Vulnerability Analysis and kGuard Evaluation

## 1. Vulnerability Descriptions

The following vulnerabilities are associated with function pointer dereferencing and overwriting in various Linux kernel modules:

- **CVE-2009-1897**: NULL function pointer dereference in `drivers/net/tun.c` due to compiler optimization.
- **CVE-2009-2692**: NULL function pointer dereference in `net/socket.c` due to improper initialization.
- **CVE-2009-2908**: NULL data pointer dereference in `fs/ecryptfs/inode.c` due to a negative reference counter (function pointer affected via tampered data flow).
- **CVE-2009-3547**: Data pointer corruption in `fs/pipe.c` due to a use-after-free bug (function pointer under user control via tampered data structure).
- **CVE-2010-2959**: Function pointer overwrite via integer overflow in `net/can/bcm.c`.
- **CVE-2010-4258**: Function pointer overwrite via arbitrary kernel memory nullification in `kernel/exit.c`.
- **EDB-15916**: NULL function pointer overwrite via a signedness error in the Phonet protocol (function pointer affected via tampered data structure).
- **CVE-2009-3234**: Return-to-user (ret2usr) attack via kernel stack buffer overflow in `kernel/perf_counter.c` (return address overwritten with user space memory).

### Impact
- **CVE-2009-1897**: Affects kernels 2.6.30–2.6.30.1.
- **CVE-2009-2692**: Affects kernels 2.6.0–2.6.30.4.
- **CVE-2009-2908**: Affects kernel 2.6.31.
- **CVE-2009-3547**: Affects kernels ≤ 2.6.32-rc6.
- **CVE-2010-2959**: Affects kernels 2.6.{27.x, 32.x, 35.x}.
- **CVE-2010-4258**: Affects kernels ≤ 2.6.36.2.
- **EDB-15916**: Affects kernel 2.6.34.
- **CVE-2009-3234**: Affects kernel 2.6.31-rc1.

### Exploit Detection
- **x86 Architecture**: All exploits were detected and prevented successfully.
- **x86-64 Architecture**: Some exploits were not available for testing, but those tested were detected and prevented successfully.

## 2. kGuard Effectiveness Evaluation

We instrumented 10 x86/x86-64 vanilla Linux kernels, ranging from v2.6.18 to v2.6.34, to assess the effectiveness of kGuard. The results indicate that kGuard successfully detected and prevented all listed exploits.

## 3. Performance Overhead

### Macro Benchmarks
We evaluated kGuard using real-life applications representing different workloads: a kernel build, Apache web server, and MySQL RDBMS. All tests were conducted on a vanilla Linux kernel v2.6.32.39, a PaX-protected kernel, and a kernel instrumented with kGuard.

- **Kernel Build (v2.6.32.39)**:
  - **PaX Overhead**: 1.26% (x86), 2.89% (x86-64)
  - **kGuard Overhead**: 0.93% (x86-64), 1.03% (x86)

- **MySQL (v5.1.49)**:
  - **PaX Overhead**: 1.16% (x86), 2.67% (x86-64)
  - **kGuard Overhead**: 0.85% (x86-64), 0.93% (x86)

- **Apache (v2.2.16)**:
  - **PaX Overhead**: 0.01% – 0.09% (x86), 0.01% – 1.07% (x86-64)
  - **kGuard Overhead**: 0.001% – 0.01%

Overall, kGuard's impact on real-life applications is negligible (≤1%).

### Micro Benchmarks
We used the LMbench microbenchmark suite to measure the performance impact of kGuard on core kernel system calls and facilities, focusing on latency and bandwidth.

- **Latency**:
  - **kGuard Latency**: 2.7% – 23.5% (x86, average 11.4%), 2.9% – 19.1% (x86-64, average 10.3%)
  - **PaX Latency**: 5.6% – 257% (x86, average 84.5%), 19% – 531% (x86-64, average 172.2%)

- **Process Creation Latency**:
  - **kGuard Overhead**: 7.1% – 9.7%
  - **PaX Overhead**: 8.1% – 56.3%

- **Bandwidth**:
  - **kGuard Bandwidth Degradation**: 3.2% – 10% (x86, average 6%), 5.25% – 9.27% (x86-64, average 6.6%)
  - **PaX Bandwidth Degradation**: 19.9% – 58.8% (x86, average 37%), 21.7% – 78% (x86-64, average 42.8%)

kGuard exhibits lower overhead on x86-64 due to fewer CFAM guards. CFAR confinement requires only 3 additional instructions, while CFAM may need up to 10, leading to higher runtime overhead.

### Custom Violation Handlers
kGuard's default violation handler logs a message and halts the OS to prevent brute-force attempts and avoid leaving the system in an insecure state.

## 6. Discussion and Future Work

Future work will focus on further optimizing kGuard to reduce overhead and enhance its effectiveness in detecting and preventing new types of vulnerabilities. Additionally, we will explore more sophisticated violation handling mechanisms to improve system resilience and security.