### Straightforward Bounds Checking and Static Analysis

To ensure that an index is within the bounds of an array, we instrument the program to perform dynamic checks. For indirect accesses, we employ static analysis to determine the appropriate instrumentation. While this approach may not catch all instances of out-of-bounds access, it is sufficient for our purposes, as we are primarily concerned with reducing the risk of already unlikely attack vectors, such as arrays of pointers. Since most programs do not heavily utilize these vectors, the performance overhead of adding this type of bounds checking is expected to be minimal.

### Selective Bounds Checker and Stack Management

If a selective bounds checker is applied to reduce the number of stacks to two, it becomes feasible to reserve a register as a stack pointer for the second stack. This would allow us to place the second stack anywhere in memory, addressing issues related to fixed stack size, incompatibility with Address Space Layout Randomization (ASLR), and eliminating gaps. However, there will likely be a performance overhead due to the need to modify this extra register in a manner similar to the original stack pointer.

### Limitations of Existing Countermeasures

One vulnerability present in existing countermeasures, which we also did not address, is the possibility of a structure containing both a pointer and an array of characters. This allows an attacker to overwrite the pointer using the character array. The same issue applies to memory allocated with `alloca`, which can store both character arrays and pointers. Although this is a significant limitation, such vulnerabilities are rare in practice, so the impact on overall protection is minimal.

A non-control data attack that relies on modifying a character array would still be possible but would be severely limited to overwriting only character arrays.

Our approach does not detect buffer overflows. However, it is straightforward to add such detection by using techniques from StackGuard and Propolice, which involve placing a random number (canary) on the stack and verifying it before returning from a function. This canary would be placed on every stack and compared to the value stored on the first stack before returning. By mirroring the random number, we can use a per-function canary, reducing the risk of an attacker discovering one random number and using it to bypass detection in another function. If an attacker discovers the canary value, the detection mechanism will no longer function, but the security measures will remain intact.

### Related Work

#### Protection from Stack-Based Vulnerabilities

Stack-based buffer overflows are a common vulnerability, and many countermeasures have been developed to protect against them. Here, we discuss some of the most relevant approaches:

- **StackGuard and Propolice**: These countermeasures rely on secret random values to provide protection.
- **Stack Shield**: This method copies the return address to another memory location before entering a function call and restores it before returning. It is efficient but can be bypassed using indirect pointer overwriting.
- **RAD (Return Address Detection)**: Similar to Stack Shield, RAD compares the return addresses stored at both locations and terminates the program if they differ. It offers better protection but still only secures return addresses.
- **Xu et al.**: Their approach splits the stack into control and data stacks. The control stack stores return addresses, while the data stack contains other data. Performance overheads range from 0.01% to 23.77%.
- **Libverify and Libsafe**: These libraries offer protection by saving and comparing return addresses or by replacing vulnerable string manipulation functions, respectively. Both can be bypassed using indirect pointer overwriting.

#### Alternative Approaches

- **Compiler-Based Countermeasures**:
  - **Bounds Checking**: Ideal for buffer overflows but can significantly impact performance.
  - **PointGuard**: Encrypts pointers with a randomly generated key, but attackers can guess the key if they view multiple encrypted pointers.
  
- **Operating System-Based Countermeasures**:
  - **Non-Executable Memory**: Prevents code injection by ensuring that only code in the text segment is executable. Bypassable with return-into-libc attacks.
  - **Randomized Instruction Sets**: Encrypts instructions in memory, decrypting them when needed. Software implementations are slow, and hardware implementations are impractical.
  - **Address Randomization**: Modifies object locations in memory, but the randomization is limited in 32-bit systems.

- **Execution Monitoring**:
  - **Program Shepherding**: Monitors execution and disallows unsafe control-flow transfers. Performance impact varies.
  - **Control-Flow Integrity**: Ensures the program adheres to its control flow graph. Performance overhead may be acceptable for some applications but prohibitive for others.

### Conclusion

In this paper, we describe a countermeasure that protects against stack-based buffer overflows with negligible performance overhead, addressing some of the shortcomings of existing efficient countermeasures. We rank the different data types stored on the stack based on their risk and value, assigning them to different categories and mapping each category onto a separate stack. This separation effectively isolates high-value targets from high-risk data. Our implementation has low performance overhead and offers better protection than existing methods, though it uses more memory. Unlike other approaches, our countermeasure remains secure even if an attacker can read arbitrary memory locations.

### References

[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-flow integrity. In Proc. of the 12th ACM Conf. on Computer and Communications Security, Alexandria, VA, Nov. 2005.

[2] Aleph One. Smashing the stack for fun and profit. Phrack, 49, 1996.

[3] S. Alexander. Defeating compiler-level buffer overflow protection. ;login: The USENIX Magazine, 30(3), June 2005.

[4] T. M. Austin, S. E. Breach, and G. S. Sohi. Efficient detection of all pointer and array access errors. In Proc. of the ACM SIGPLAN ’94 Conf. on Programming Language Design and Implementation, Orlando, FL, June 1994.

[5] A. Baratloo, N. Singh, and T. Tsai. Transparent run-time defense against stack smashing attacks. In USENIX 2000 Annual Technical Conf. Proc., San Diego, CA, June 2000.

[6] E. G. Barrantes, D. H. Ackley, S. Forrest, T. S. Palmer, D. Stefanović, and D. D. Zovi. Randomized instruction set emulation to disrupt binary code injection attacks. In Proc. of the 10th ACM Conf. on Computer and Communications Security, Washington, DC, Oct. 2003.

[7] S. Bhatkar, D. C. DuVarney, and R. Sekar. Address obfuscation: An efficient approach to combat a broad range of memory error exploits. In Proc. of the 12th USENIX Security Symp., Washington, DC, Aug. 2003.

[8] Bulba and Kil3r. Bypassing Stackguard and stackshield. Phrack, 56, 2000.

[9] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer. Non-control-data attacks are realistic threats. In Proc. of the 14th USENIX Security Symp., Baltimore, MD, Aug. 2005.

[10] T. Chiueh and F.-H. Hsu. RAD: A compile-time solution to buffer overflow attacks. In Proc. of the 21st Int. Conf. on Distributed Computing Systems, Phoenix, AZ, Apr. 2001.

[11] C. Cowan, S. Beattie, J. Johansen, and P. Wagle. PointGuard: protecting pointers from buffer overflow vulnerabilities. In Proc. of the 12th USENIX Security Symp., Washington, DC, Aug. 2003.

[12] C. Cowan, C. Pu, D. Maier, H. Hinton, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang. StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks. In Proc. of the 7th USENIX Security Symp., San Antonio, TX, Jan. 1998.

[13] H. Etoh and K. Yoda. Protecting from stack-smashing attacks. Technical report, IBM Research Division, Tokyo Research Laboratory, June 2000.

[14] J. L. Henning. SPEC CPU2000: Measuring CPU performance in the new millennium. Computer, 33(7), July 2000.

[15] R. W. M. Jones and P. H. J. Kelly. Backwards-compatible bounds checking for arrays and pointers in C programs. In Proc. of the 3rd Int. Workshop on Automatic Debugging, Linköping, Sweden, 1997.

[16] G. S. Kc, A. D. Keromytis, and V. Prevelakis. Countering code-injection attacks with instruction-set randomization. In Proc. of the 10th ACM Conf. on Computer and Communications Security, Washington, DC, Oct. 2003.

[17] S. C. Kendall. BCC: Runtime checking for C programs. In Proc. of the USENIX Summer 1983 Conf., Toronto, ON, July 1983.

[18] V. Kiriansky, D. Bruening, and S. Amarasinghe. Secure execution via program shepherding. In Proc. of the 11th USENIX Security Symp., San Francisco, CA, Aug. 2002.

[19] klog. The frame pointer overwrite. Phrack, 55, 1999.

[20] R. B. Lee, D. K. Karig, J. P. McGregor, and Z. Shi. Enlisting hardware architecture to thwart malicious code injection. In Proc. of the First Int. Conf. on Security in Pervasive Computing, volume 2802 of LNCS, 2003.

[21] K.-S. Lhee and S. J. Chapin. Type-assisted dynamic buffer overflow detection. In Proc. of the 11th USENIX Security Symp., San Francisco, CA, Aug. 2002.

[22] National Institute of Standards and Technology. National vulnerability database statistics. http://nvd.nist.gov/statistics.cfm.

[23] Y. Oiwa, T. Sekiguchi, E. Sumii, and A. Yonezawa. Fail-safe ANSI-C compiler: An approach to making C programs secure: Progress report. In Proc. of Int. Symp. on Software Security 2002, Tokyo, Japan, Nov. 2002.

[24] O. Ruwase and M. S. Lam. A practical dynamic buffer overflow detector. In Proc. of the 11th Annual Network and Distributed System Security Symp., San Diego, CA, Feb. 2004.

[25] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh. On the Effectiveness of Address-Space Randomization. In Proc. of the 11th ACM Conf. on Computer and communications security, Washington, DC, Oct. 2004.

[26] Solar Designer. Non-executable stack patch. http://www.openwall.com.

[27] N. Sovarel, D. Evans, and N. Paul. Where’s the FEEB? The effectiveness of instruction set randomization. In Proc. of the 14th USENIX Security Symp., Baltimore, MD, Aug. 2005.

[28] The PaX Team. Documentation for the PaX project. http://pageexec.virtualave.net/docs/.

[29] Vendicator. Stack shield. http://www.angelfire.com/sk/stackshield.

[30] R. Wojtczuk. Defeating Solar Designer’s Non-executable Stack Patch. Bugtraq mailing list, 1998.

[31] J. Xu, Z. Kalbarczyk, S. Patel, and K. I. Ravishankar. Architecture support for defending against buffer overflow attacks. In Second Workshop on Evaluating and Architecting System dependability, San Jose, CA, Oct. 2002.

[32] W. Xu, D. C. DuVarney, and R. Sekar. An Efficient and Backwards-Compatible Transformation to Ensure Memory Safety of C Programs. In Proc. of the 12th ACM SIGSOFT Int. Symp. on Foundations of Software Engineering, Newport Beach, CA, October-November 2004.

[33] Y. Younan, W. Joosen, and F. Piessens. Code injection in C and C++: A survey of vulnerabilities and countermeasures. Technical Report CW386, Departement Computerwetenschappen, Katholieke Universiteit Leuven, July 2004.

[34] Y. Younan, W. Joosen, and F. Piessens. A methodology for designing countermeasures against current and future code injection attacks. In Proc. of the Third IEEE Int. Information Assurance Workshop 2005, College Park, MD, Mar. 2005.

[35] Y. Younan, W. Joosen, and F. Piessens. Efficient protection against heap-based buffer overflows without resorting to magic. In Proc. of the Int. Conf. on Information and Communication Security, Raleigh, NC, Dec. 2006.

Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006