### Relevant Public Channels and Mitigation Strategies

Table 2 lists relevant public channels that make it more challenging for an adversary to determine the exact running status of an app in real-time. Another method to reduce this risk is to introduce randomness into pre-scheduled scans. Instead of setting a fixed time, users can specify a time window within which the AVD can choose a random time to start scanning each day. A long-term solution is to enhance the malScan operation, making scan operations both continuous and comprehensive. According to discussions with AVD vendors, this is a future research topic, as malScan with these properties requires extensive testing and optimization before deployment on resource-constrained mobile devices.

In addition to the short-term mitigations suggested in Section 4.2 for the engineUpdate hazard, we discussed with the Google security team the need to re-architect the PMS component to minimize or eliminate the null-protection window during the app update process. One suggestion is to delete the old APK only after the new process has been reactivated. However, this might cause conflicts with app package names or other app management tasks, such as the install verification process. Given that many apps have continuous monitoring requirements (e.g., MDMs, IPSs), Google must find a way to resolve these conflicts for the PMS feature enhancement.

### Other Hazards

Our study identified two additional potential hazards, indicating that the discovered issues are just the tip of the iceberg. We will discuss these two types of hazards that could enable evasions of current Android AVDs.

#### Cloud-Based malScan Hazard

During our analysis, we observed a trend towards incorporating cloud-based scanning strategies in mobile platforms, including AVD #1, 2, 3, 23, and 26. Cloud-based scanning is suitable for resource-limited mobile devices, as it offloads heavy computations to a remote server by sending collected information. However, since per-UID network usage statistics can be accessed through channel #16 in Table 2, an adversary can plan evasions and attacks against AVDs using a similar fingerprinting strategy described in the heavy sweeping malScan hazard.

#### Virus Definition File (VDF) Update Hazard

All AVDs store their VDF and other files/data in subdirectories, `/data/data/[AVD_package]/`, which are set to be world-unreadable and enforced by the Linux kernel in Android. Our further analysis using the Environment Information Collector shows that this robust design for app data privacy protection is insufficient for VDFs. An adversary only needs to know the file size or other metadata (e.g., creation/updated time) of relevant files in the subdirectory to infer the updating status of the VDF or other sensitive files (e.g., scan result caching files). We designed a zero-permission app to call the `stat()` system call through JNI to directly probe the metadata of all files in an AVD's data folder. The full path leading to different files (e.g., VDF) can be first collected via offline analysis. With this status information, various targeted evasions can be designed. For instance, some AVDs (e.g., #21) perform a fresh heavy sweeping malScan right after the VDF is updated. Thus, an adversary can drop or decrypt newly obfuscated known malicious payloads a few minutes after the VDF update, rendering the fresh scan ineffective.

### Related Work

Various malware analysis and threat prevention techniques [47, 38] have been designed and applied for offline analysis. Additionally, several anti-analysis techniques for both mobile and PC malware have been discussed [42, 28]. Our proof-of-concept evasion techniques are conceptually similar to anti-analysis techniques but focus on a new angle to emphasize the evasion of AVD’s online protection mechanisms. Zhou et al. [53] provided a study of Android malware, and the hazards discovered in this paper are based on a systematic study of 30 popular AVDs.

Android app and system hazards have been discovered in [41, 30, 46, 51, 50]. Accidental data disclosure between apps in mobile and PC systems has been discussed in [39]. The information leakage channels for various hazards in AVD are related to unexpected data exposure from the system side. Jana et al. [36] used per-process memory usage and CPU scheduling statistics as probing channels to leak program secrets. We identify that even per-thread usages can be leveraged for fine-grained inference. Pileup attacks [46] are based on a flaw in PMS targeting system updates. Our engineUpdate hazard is based on a newly discovered flaw in PMS (related to the app-update mechanism). Empirical studies [30] have been conducted on several hazards in security-critical components or modules in Android apps. Our study focuses on current AVD apps, and several hazards have been reported to AVD vendors.

Antivirus evasion techniques [40, 24, 35] have been studied previously. Rastogi et al. [44] presented Android Dalvik bytecode polymorphic transformation attacks targeting incomplete signature databases. However, our study concentrates on the malware recognition mechanism itself, showing that the quality of AVD’s malScan mechanism should be improved when deployed on the Android platform. Fedler et al. [31] discussed the lack of on-demand file system hooking in Android antivirus. Our study shows that some AVDs have already leveraged FileObserver APIs for this purpose. However, the lack of a combination of scan comprehensiveness and continuity causes the ineffectiveness of the current design. The discovered hazards in the AVD engineUpdate are completely orthogonal to the file system hooking problem, as any strong protections rely on an activated AVD process, which is missing in the null-protection window.

### Conclusion

Based on an analysis framework, we conducted an empirical study of the top 30 AVDs on the current Android platform. We discovered several serious hazards related to AVD malware scan mechanisms, engine update procedures, and other aspects. We developed techniques to measure the feasibility of exploiting these hazards and confirmed the vulnerable engineUpdate program logic in the Android system through static analysis and model checking. We reported the discovered vulnerabilities and hazards to AVD vendors, who have confirmed our findings and will implement some of the mitigation suggestions in their latest versions. We also discussed the vulnerable design in the PMS causing the null-protection window with the Google security team, who acknowledged the problem and will consider feature enhancements for the PMS component.

As malware and the Android system continue to evolve, more secure and preventive design strategies for mission-critical apps (e.g., AVDs, IPS [12, 14], MDM [18]) should be adopted to reduce the likelihood of unexpected failures and loopholes.

### Acknowledgments

The authors would like to thank the anonymous reviewers for their insightful comments, which helped improve the presentation of this paper. This work was partially supported by ARO W911NF-09-1-0525 (MURI), NSF CCF-1320605, NSFC 61100226, and NSF CNS-1223710. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation and Army Research Office.

### References

[1] AndroGuard: Android Dalvik Bytecode Analysis Framework. http://www.blackhat.com/html/bh-ad-11/bh-ad-11-briefings.html.
[2] Android antivirus companies. Technical report. http://www.zdnet.com/android-antivirus-comparison-review-malware-symantec-mcafee-kaspersky-sophos-norton-7000019189/.
[3] Android Dalvik Debug Monitor Server. http://developer.android.com/sdk/installing/studio-tips.html.
[4] Android Monkeyrunner. http://developer.android.com/guide/developing/tools/monkeyrunner_concepts.html.
[5] Android OS Version Relative Chart ending on April 1, 2014. http://developer.android.com/about/dashboards/index.html.
[6] AV TEST report, Jan 2014. http://www.av-test.org/en/tests/mobile-devices/android/jan-2014/.
[7] Avast! Mobile Security protects against USSD attacks. http://blog.avast.com/2012/10/04/avast-mobile-security-protects-against-ussd-attacks/.
[8] DoS attack on Lookout mobile security application. http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-3579.
[9] Factory Images for Nexus Devices. https://developers.google.com/android/nexus/images.
[10] Frequently updates of Antivirus Detection Engine, 2013. http://www.androiddrawer.com/15401/download-lookout-security-antivirus-8-30-1-app-apk/.
[11] HTC Android Images from HTCdev. http://www.htcdev.com/devcenter/downloads/P00.
[12] Jinshan mobile duba. http://m.duba.net/.
[13] Kaspersky Lab Reports Mobile Malware in 2013. http://usa.kaspersky.com/about-us/press-center/press-releases/kaspersky-lab-reports-mobile-malware-2013-more-doubles-previous.
[14] LBE secrity guard. http://www.lbesec.com/.
[15] Prevent Unintended APP Update. http://www.symantec.com/connect/blogs/case-unintended-android-application-upgrade.
[16] Samli/Baksmali. http://code.google.com/p/smali/.
[17] Samsung Images from Samsung-updates. http://samsung-updates.com/.
[18] Samsung Mobile Device Management solution. http://www.samsung.com/global/business/mobile/solution/security/mobile-device-management/.
[19] The avast! AVD v2.0.4400 for Android allows attackers to cause a denial of service. http://cve.scap.org.cn/CVE-2013-0122.html.
[20] The Lookout AVD v8.17-8a39d3f for Android allows attackers to cause a denial of service. http://cve.scap.org.cn/CVE-2013-3579.html.
[21] The TrustGo AVD v1.3.6 for Android allows attackers to cause a DoS. http://cve.scap.org.cn/CVE-2013-3580.html.
[22] Android Platform Fragmentation. http://opensignal.com/reports/fragmentation-2013/, 2012.
[23] Frequently updates of Antivirus Detection Engine. http://m.aptoide.com/list/versions/com.lookout/83510, 2013.
[24] M. I. Al-Saleh and J. R. Crandall. Application-level reconnaissance: Timing channel attacks against antivirus software. In 4th USENIX Workshop on LEET 11’.
[25] H. Chen, D. Dean, and D. Wagner. Model Checking One Million Lines of C Code. In NDSS, 2004.
[26] K. Chen, P. Liu, and Y. Zhang. Achieving accuracy and scalability simultaneously in detecting application clones on android markets. In ICSE, pages 175–186, 2014.
[27] K. Z. Chen, N. M. Johnson, V. D’Silva, S. Dai, K. MacNamara, T. R. Magrino, E. X. Wu, M. Rinard, and D. X. Song. Contextual policy enforcement in android applications with permission event graphs. In NDSS, 2013.
[28] X. Chen, J. Andersen, Z. M. Mao, M. Bailey, and J. Nazario. Towards an understanding of anti-virtualization and anti-debugging behavior in modern malware. In DSN’ 08.
[29] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and R. E. Bryant. Semantics-aware malware detection. In S&P ’05.
[30] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel. An empirical study of cryptographic misuse in android applications. In CCS ’13.
[31] R. Fedler, M. Kulicke, and J. Schutte. An antivirus API for Android malware recognition. In Malicious and Unwanted Software:" The Americas"(MALWARE), 2013.
[32] C. Gibler, R. Stevens, J. Crussell, H. Chen, H. Zang, and H. Choi. Adrob: Examining the landscape and impact of android application plagiarism. In MobiSys ’13.
[33] H. Huang, S. Zhang, X. Ou, A. Prakash, and K. Sakallah. Distilling critical attack graph surface iteratively through minimum-cost SAT solving. In Proceedings of the 27th ACSAC, pages 31–40. ACM, 2011.
[34] H. Huang, S. Zhu, P. Liu, and D. Wu. A framework for evaluating mobile app repackaging detection algorithms. In Trust and Trustworthy Computing. Springer, 2013.
[35] S. Jana and V. Shmatikov. Abusing file processing in malware detectors for fun and profit. In SP’ 12.
[36] S. Jana and V. Shmatikov. Memento: Learning secrets from process footprints. In S&P ’12.
[37] X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri. Code injection attacks on HTML5-based mobile apps: Characterization, detection, and mitigation. In CCS ’14.
[38] M. G. Kang, H. Yin, S. Hanna, S. McCamant, and D. Song. Emulating emulation-resistant malware. In Proceedings of the 1st ACM Workshop on Virtual Machine Security, 2009.
[39] A. Nadkarni and W. Enck. Preventing accidental data disclosure in modern operating systems. In CCS ’13.
[40] J. Oberheide, M. Bailey, and F. Jahanian. PolyPack: an automated online packing service for optimal antivirus evasion. In 3rd USENIX on Offensive technologies.
[41] J. Oberheide and F. Jahanian. Remote fingerprinting and exploitation of mail server antivirus engines, 2009.
[42] G. Pék, B. Bencsáth, and L. Buttyán. nEther: In-guest Detection of Out-of-the-guest Malware Analyzers. In Proceedings of the Fourth European Workshop on System Security, EUROSEC ’11.
[43] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna. Execute this! analyzing unsafe and malicious dynamic code loading in android applications. In NDSS ’14.
[44] V. Rastogi, Y. Chen, and X. Jiang. Droidchameleon: evaluating android anti-malware against transformation attacks. In asiaCCS. ACM, 2013.
[45] S. Smalley and R. Craig. Security enhanced (se) android: Bringing flexible MAC to Android. In NDSS, 2013.
[46] L. Xing, X. Pan, R. Wang, K. Yuan, and X. Wang. Upgrading your android, elevating my malware: Privilege escalation through mobile OS updating. In IEEE Symposium on S&P 14.
[47] L. K. Yan and H. Yin. Droidscope: seamlessly reconstructing the OS and Dalvik semantic views for dynamic Android malware analysis. In USENIX Sec ’12.
[48] F. Zhang, H. Huang, S. Zhu, D. Wu, and P. Liu. ViewDroid: Towards obfuscation-resilient mobile application repackaging detection. In Proceedings of ACM WiSec ’14.
[49] W. Zhou, Y. Zhou, X. Jiang, and P. Ning. Detecting repackaged smartphone applications in third-party Android marketplaces. In Proceedings of CODASPY ’12. ACM.
[50] X. Zhou, S. Demetriou, D. He, M. Naveed, X. Pan, X. Wang, C. A. Gunter, and K. Nahrstedt. Identity, location, disease, and more: inferring your secrets from Android public resources. In In ACM CCS. ACM, 2013.
[51] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang. The peril of fragmentation: Security hazards in Android device driver customizations. In IEEE Symposium on S&P, 2014.
[52] Y. Zhou and X. Jiang. An analysis of the Anserverbot Trojan. http://www.csc.ncsu.edu/faculty/jiang/pubs/AnserverBotAnalysis.pdf.
[53] Y. Zhou and X. Jiang. Dissecting Android malware: Characterization and evolution. In SP ’12. IEEE.