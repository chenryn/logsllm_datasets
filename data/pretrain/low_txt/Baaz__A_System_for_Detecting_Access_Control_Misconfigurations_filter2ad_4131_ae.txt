### Dataset 3: Email List and Organizational Group Evaluation

In Dataset 3, the subject dataset comprises email lists used as a reference in Dataset 1, while the reference dataset consists of organizational groups. Each organizational group includes a manager and all employees who report directly to that manager. As previously mentioned, the reference dataset in Baaz may contain inaccuracies. This evaluation helps us assess the accuracy of the email list memberships. The dataset contains 115 users and 243 objects. The slight difference in the number of users between Datasets 1 and 3 is due to organizational changes that occurred between the two experiments.

### Security and Accessibility Misconfigurations

Baaz identified numerous valid misconfigurations across all datasets. Most security misconfigurations were attributed to role changes. Other security issues arose when an individual with full permissions inadvertently granted access to another user who should not have had such access. Similarly, accessibility misconfigurations were often caused by organizational moves or inadvertent mistakes in manually assigning permissions.

### Insights from the Evaluation

#### Administrator Input
Baaz provides recommendations, but the final decision on whether a misconfiguration is valid, an exception, or invalid must be made by an administrator or someone with semantic knowledge about access requirements. For distributed access control systems like Windows file servers, validation requires querying multiple people in the organization because the objects involved in the misconfiguration can have different owners. Despite this complexity, administrators and resource owners found the system very useful, as it identified several valid security and accessibility misconfigurations. Additionally, administrators appreciated that they only needed to focus on a smaller set of misconfiguration candidates reported by Baaz rather than tracking down correct access for potentially thousands of objects. For Datasets 1 and 3, validation was primarily conducted through conversations and emails, taking approximately one hour. For Dataset 2, the process took three days due to remote communication with resource owners via email.

#### Group Mapping vs. Object Clustering
While Group Mapping is universally effective at identifying misconfigurations, Object Clustering is only effective in datasets with significant statistical similarity. Object Clustering relies on detecting small deviations from a regular and frequently repeated pattern of access control permissions. Datasets 2 and 3 lack a regular pattern, as most project web pages and email distribution lists have unique access permissions. Consequently, Object Clustering did not report any misconfigurations for these datasets. However, it did identify misconfigurations in the file server (Dataset 1) due to many directories with the same access permissions.

#### Invalid Misconfigurations
The number of invalid misconfigurations varies significantly across the datasets. In Dataset 3, the rigid structure of the organizational groups led to a large number of invalid misconfigurations. However, the number of invalid misconfigurations was small enough not to discourage administrators from using the tool.

### Algorithm Performance and Scalability

This section focuses on the performance and scalability of the server algorithm. We used Dataset 1, described in Table 2, for this experiment.

We ran the misconfiguration detection algorithm on the dataset while varying the subject relation matrix size, keeping the number of reference groups constant. To increase the matrix size, we included more objects up to a certain directory depth, thus increasing the number of columns in the matrix.

Figure 11 shows the results of our experiments. Each line represents the total run time of the algorithm, including all three phases: Matrix Reduction, Group Mapping, and Object Clustering, with different numbers of reference groups. We varied the number of reference groups by adding artificially created groups to the reference dataset, ensuring they followed the same size distribution as the real reference groups. Each data point is averaged across 20 runs. The experiments were conducted on a machine with a 3 GHz Intel Core 2 Duo CPU and 4 GB of memory, running a 64-bit version of Windows Server 2008.

With a matrix size of 2.7 million and 1296 reference groups, the misconfiguration detection took a total of 246 ms. The increase in time is fairly linear with the matrix size because the Matrix Reduction step dominates the total run-time. For the same data point, Matrix Reduction inspected approximately 2.7 million cells, while Group Mapping processed 24 summary statements and 1296 reference groups, and Object Clustering processed 24C2 = 276 summary statement pairs.

Based on these results, for a subject dataset representing 100,000 employees and 100,000 objects (a matrix size of 10^10) and a reference dataset involving 1296 groups, the misconfiguration detection would take approximately 340 seconds. Our experiments indicate that the algorithm can scale to large datasets and run fast enough to provide prompt misconfiguration reports.

### Related Work

In this section, we discuss our work in the context of related research.

Recent work by Baker et al. [4] uses data mining to infer association rules between groups of resources that can be accessed by common sets of users based on an offline analysis of access attempts in log files. Their tool flags operational accessibility issues and refers them to appropriate resource owners. Baaz, on the other hand, operates on access permissions and can flag and suggest fixes for misconfigurations before they are operationally exercised. While access log analysis is useful, it is complementary to analyzing access control permissions. Ideally, both approaches should be used together.

Baaz primarily uses Group Mapping, which compares subject and reference datasets. Many of the misconfigurations identified by Group Mapping could not have been found using association rules alone, such as those resulting from role changes or new employees joining the organization. Additionally, Baaz identifies both security and accessibility issues, whereas Baker et al. focus only on accessibility.

Network intrusion prevention and detection systems also have a similar operational view of misconfigurations [15, 14]. These systems aim to characterize normal behavior and flag deviations as potential vulnerabilities. Research on automatically discovering attack graphs [2, 23] has a forensic flavor, exploring identity-snowball attacks based on over-entitled user privileges. Tools like HeatRay [6] use machine learning and combinatorial optimization to suggest privilege pruning, and a system like Baaz can help administrators decide whether to remove access permissions as suggested by HeatRay.

Other related work includes policy anomaly detection in access control spaces [13], where Gokyo helps discover policy coverage issues. Role-based access control (RBAC) [21] is widely cited as a management tool for controlling access permissions but is known to be difficult to implement [5, 12]. The problem of role mining [22, 25, 18, 28, 10] is related to Baaz’s matrix reduction step, where we find related user and object groups. In Baaz, we focus on shared-object permission misconfigurations rather than discovering common patterns of access across user groups. Even if organizations adopt RBAC, a system like Baaz is useful in discovering misconfigurations caused by exceptions and role changes.

Policy anomaly detection is also studied in the firewall and network configuration space [27, 26, 3]. These techniques explore the semantics of filtering rules and firewall policies, but they are specific to firewall configurations and differ from Baaz, which uses comparison across ACL datasets and within the same dataset to find misconfigurations.

Several network security scanning tools [7, 9] are used by administrators to find vulnerabilities such as open ports, vulnerable applications, and poor passwords. Baaz targets a different problem—finding access control misconfigurations—and is complementary to these tools. Using a combination of such tools and systems ensures a high level of security for all enterprise resources.

### Conclusion

In this paper, we described the design, implementation, and evaluation of Baaz, a system for detecting access control misconfigurations in shared resources. Baaz continuously monitors access permissions and group memberships and uses Group Mapping and Object Clustering to find candidate misconfigurations. Our evaluation shows that Baaz is highly effective at identifying real security and accessibility misconfigurations, which are valuable to administrators.

### Acknowledgments

We thank our shepherd, Somesh Jha, for his valuable comments and suggestions. We also thank Ohil Manyam for testing and optimizing the prototype Baaz system, Rashmi K. Y, Geoffry Nordlund, and Chuck Needham for help with evaluating Baaz, and Geoffrey Voelker, Venkat Padmanabhan, and Vishnu Navda for providing insightful comments that improved earlier drafts of this paper.

### References

[1] Active Directory. http://www.microsoft.com/windowsserver2003/technologies/directory/activedirectory/.

[2] P. Ammann, D. Wijesekera, and S. Kaushik. Scalable, graph-based network vulnerability analysis. In Proceedings of the 9th ACM conference on Computer and communications security, 2002.

[3] Y. Bartal, A. Mayer, K. Nissim, and A. Wool. Firmato: A novel firewall management toolkit. ACM Trans. Comput. Syst., 22(4):381–420, 2004.

[4] L. Bauer, S. Garriss, and M. K. Reiter. Detecting and resolving policy misconfigurations in access-control systems. In Proc. SACMAT ’08, pages 185–194, New York, NY, USA, 2008. ACM.

[5] Bruce Schneier, Real-World Access Control. http://www.schneier.com/crypto-gram-0909.html.

[22] J. Schlegelmilch and U. Steffens. Role mining with orca. In Proc. SACMAT ’05, pages 168–176, 2005.

[23] O. Sheyner, J. Haines, S. Jha, R. Lippmann, and J. M. Wing. Automated generation and analysis of attack graphs. In Proceedings of the 2002 IEEE Symposium on Security and Privacy, 2002.

[24] The automated insider access identity threat: controls and important data. http://findarticles.com/p/articles/mi_m4153/is_265/ai_n25449309.

[25] J. Vaidya, V. Atluri, and J. Warner. Roleminer: mining roles using subset enumeration. In CCS ’06, pages 144–153. ACM, 2006.

[26] A. Wool. Architecting the lumeta firewall analyzer. In SSYM’01: Proceedings of the 10th conference on USENIX Security Symposium, pages 7–7, Berkeley, CA, USA, 2001. USENIX Association.

[27] L. Yuan, J. Mai, Z. Su, H. Chen, C.-N. Chuah, and P. Mohapatra. Fireman: A toolkit for firewall modeling and analysis. In Proceedings of the 2006 IEEE Symposium on Security and Privacy. IEEE Computer Society, 2006.

[28] D. Zhang, K. Ramamohanarao, and T. Ebringer. Role engineering using graph optimisation. In SACMAT ’07, pages 139–144. ACM, 2007.

[6] J. Dunagan, A. X. Zheng, and D. R. Simon. Heatray: Combating identity snowball attacks using machine learning, combinatorial optimization and attack graphs. SIGOPS Oper. Syst. Rev., 2009.

[7] D. Farmer and E. H. Spafford. The COPS security checker system. In Proceedings of the Summer Usenix Conference, 1990.

[8] File System Watcher Class. http://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher.aspx.

[9] S. S. A. T. for Analyzing Networks. http://www.porcupine.org/satan.

[10] M. Frank, D. Basin, and J. M. Buchmann. A class of probabilistic models for role engineering. In CCS ’08. ACM, 2008.

[11] P. D. Grunwald. The Minimum Description Length Principle. The MIT Press, 2007.

[12] Information Risk in the Professional Services - Study Results. Field Institutions from Financial: a Roadmap for Research. http://mba.tuck.dartmouth.edu/digital/Research/ResearchProjects/DataFinancial.pdf.

[13] T. Jaeger, X. Zhang, and A. Edwards. Policy management using access control spaces. ACM Trans. Inf. Syst. Secur., 6(3):327–364, 2003.

[14] A. Joshi, S. T. King, G. W. Dunlap, and P. M. Chen. Detecting past and present intrusions through vulnerability-specific predicates. SIGOPS Oper. Syst. Rev., 39(5):91–104, 2005.

[15] S. T. King and P. M. Chen. Backtracking intrusions. SIGOPS Oper. Syst. Rev., 37(5):223–236, 2003.

[16] C. Lund and M. Yannakakis. On the hardness of approximating minimization problems. J. ACM, 41(5):960–981, 1994.

[17] A. Mayer, A. Wool, and E. Ziskind. Fang: A firewall analysis engine. In SP ’00: Proceedings of the 2000 IEEE Symposium on Security and Privacy, page 177, Washington, DC, USA, 2000. IEEE Computer Society.

[18] I. Molloy, H. Chen, T. Li, Q. Wang, N. Li, E. Bertino, S. Calo, and J. Lobo. Mining roles with semantic meanings. In Proceedings of the 13th ACM symposium on Access control models and technologies, 2008.

[19] Privileged Password Management: combating the insider threat for the enterprise. Compliance and meeting regulations. http://www.cyber-ark.com/constants/white-papers.asp?dload=IDC White Paper.pdf.

[20] M. Russinovich, D. Solomon, and A. Ionescu. Windows Internals, 5th Edition. Microsoft Press, 2009.

[21] R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E. Youman. Role-based access control models. Computer, 29(2):38–47, 1996.