# Reddit

## Google Instant Predictions Off
- No noticeable difference

## Replay Page Rendering Problem
- No noticeable difference
- No noticeable difference
- No noticeable difference
- No noticeable difference
- No noticeable difference

## Search Function Issues
- No noticeable difference
- No noticeable difference
- No noticeable difference
- No noticeable difference

During the replay, we encountered some less critical issues, such as a missed page transition, due to a fixable engineering issue in our prototype code.

To better understand the replay issues related to the search functionality on Yelp and YouTube, we conducted an in-depth investigation of WebCapsule’s execution traces. We found that these problems were caused by a combination of a small bug within our WebCapsule code (now fixed) and two known bugs in the version of Chromium we used. Our bug was related to the implementation of the JavaScript call-stack reconstruction code (see Section 5.3), which sometimes returned an unhandled null value, causing WebCapsule to crash. Fixing this bug resolved the search functionality issue on Yelp. However, YouTube's search functionality still did not work properly. Further debugging confirmed that this was entirely due to two separate bugs in Chromium (Issue-365858 and Issue-460328) that caused ChromeShell to crash whenever a keystroke was entered into YouTube’s search field. After implementing a workaround for both Chromium bugs, WebCapsule was able to correctly replay YouTube’s search functionalities.

All other Android record and replay tests performed notably well. Additionally, we successfully replayed the traces recorded on the ARM-based Nexus 7 into a separate x86-based Android virtual device, demonstrating that WebCapsule’s traces can be replayed on different platforms and in isolated environments.

### Demos
To further demonstrate the record and replay capabilities of WebCapsule, we recorded five example "demo videos" showing representative demonstrations of how WebCapsule can be used to record and replay browsing activities. We produced two videos related to phishing attack traces and three for highly popular websites (Flickr, Amazon, and Wikipedia). These videos have been posted before the submission deadline, as demonstrated by the post dates on YouTube. We also removed any identifiable information from the videos to maintain anonymity during the paper submission and review process.

- **Flickr (mobile):** [http://youtu.be/K1CwIwcTgbE](http://youtu.be/K1CwIwcTgbE)
- **Amazon:** [http://youtu.be/inhkt88RqN8](http://youtu.be/inhkt88RqN8)
- **Wikipedia:** [http://youtu.be/AelqP91QfLg](http://youtu.be/AelqP91QfLg)
- **Phishing 1:** [http://youtu.be/hOcH3OQj9HU](http://youtu.be/hOcH3OQj9HU)
- **Phishing 2:** [http://youtu.be/mMiZ17Qlh0M](http://youtu.be/mMiZ17Qlh0M)

## Discussion and Future Work
Besides forensic analysis of browsing activities, WebCapsule could benefit other applications, including the debugging of web applications and web usage mining [12], or be used as a compliance tool in sensitive network environments (e.g., healthcare, banking, or government networks). Additionally, besides social engineering and phishing attacks, WebCapsule may help reconstruct other complex web-based attacks, potentially aiding in detecting and differentiating between phishing and insider threat attacks.

While WebCapsule is currently Blink-specific, this was a deliberate design decision. Our main objective was to enable accurate recording and full replay of browsing traces while maximizing portability. Implementing WebCapsule as a browser extension was considered, but extension APIs are browser-specific and do not allow for fine-grained recording of internal rendering engine events. Most popular mobile browsers do not support "powerful" extensions, which would have prevented the use of WebCapsule on some mobile devices. By instrumenting Blink, which is embedded in several popular browsers (e.g., Chrome, Opera, Silk, etc.) and in Android’s WebView library, WebCapsule can be deployed in various web browsers, web-rendering applications, and platforms, including mobile devices.

Our current version of WebCapsule has some limitations. For example, as discussed in Section 3, the fact that Blink is highly multi-threaded imposes several implementation challenges for replay. During evaluation, we encountered some practical cases of complex web pages that caused replay divergence. However, as shown by the results in Section 6, WebCapsule performed remarkably well on a large variety of sites, considering that our implementation is an academic-level prototype system.

In future work, we plan to study how to further enhance WebCapsule, for example, by using an approach inspired by the logical thread schedule proposed in DejaVu [6]. Once the Blink scheduler [4] reaches a stable release, we plan to leverage it to record the scheduling of Blink’s internal tasks and replicate the same scheduling during replay.

Another limitation is due to differences in CPU speed between the recording and replay environments, which may affect rendering. While during replay we use event timelines to synchronize the re-injection of user inputs to the underlying platform API calls (e.g., network requests, calls to current time, etc.), a web application may generate DOM changes (e.g., rotate an image or rewrite a hyperlink) repeatedly and in an unconstrained way, at a speed bounded only by the available CPU cycles. This may cause a re-injected user input to interact with the wrong DOM element, a problem we refer to as intrinsic non-determinism.

We believe this intrinsic non-determinism is difficult to solve completely unless we perform heavyweight record and replay at the instruction level [11], rather than at the API call level. Unfortunately, this would likely introduce a much higher performance overhead and degrade portability. In practice, intrinsic non-determinism rarely affects replay, as demonstrated by the positive results of our replay evaluation reported in Section 6. We expect this to hold true especially when the same device type used for recording is also used during replay. In future work, we will attempt to further mitigate the effects of intrinsic non-determinism by implementing more sophisticated replay clock synchronization techniques (e.g., synchronizing to DOM changes or rendering events).

## Related Work
Forensic analysis of web-based incidents generally relies on analyzing the web browser’s history, cache files, and system logs [16, 20], or on web traffic traces [15, 18, 24, 33]. However, such approaches do not provide the ability to fully reconstruct and replay web security incidents, especially for incidents involving the user (e.g., phishing and social engineering attacks), as discussed in Section 1.

Record and replay is a commonly desired feature for debugging and troubleshooting complex software and systems, and several previous efforts have explored record and replay at different levels. For example, approaches based on virtual machines [6, 11, 21, 29] have been proposed to record system-level events (interrupts, thread scheduling, etc.) and replay application and system execution at the level of single instructions. While they are designed for generic application record and replay, VM-based approaches cannot be easily deployed with low performance overhead to resource-constrained devices, such as smartphones and other mobile devices. In contrast, our WebCapsule system focuses on always-on record and replay of web browsing traces, providing a lightweight and practical solution that can be deployed without changes in various web-rendering applications and platforms, including mobile devices (e.g., Android devices).

WebCapsule also differs significantly from prior work that focuses exclusively on replaying specific web components, such as JavaScript code [17], user gestures and other sensor inputs on mobile devices [13], or user interactions with web applications [2]. Unlike these studies, WebCapsule aims to record and replay the execution of a web browsing trace in its entirety, including network transactions and non-deterministic calls to the underlying system platform. This allows us to replay in a completely isolated environment, without requiring new user or network inputs. This is especially important when there is a need to replay potential web-security incidents for which the server-side content is ephemeral and may not be otherwise available at the time of replay.

Another related work is TimeLapse [5], a developer tool that focuses on the record and replay of human-visible web events and interoperability with existing web application debugging tools. As discussed in more detail in Section 1, TimeLapse does not work as an always-on recording system and is not easily portable to different browsers and operating systems (it is currently limited to Safari+MacOS). Additionally, TimeLapse is not transparent because it deeply modifies WebKit (e.g., to force a synchronous scheduling of threads). In contrast, WebCapsule can perform low-overhead always-on recording and is also transparent and portable.

## Conclusion
In this paper, we presented WebCapsule, a novel record and replay forensic engine for web browsers. WebCapsule’s main goal is to work as an always-on and lightweight (i.e., low overhead) forensic data collection system that enables a full reconstruction of web security incidents, including phishing and social engineering attacks. We designed WebCapsule to be a portable system by instrumenting Google’s Blink rendering engine without altering its application and platform APIs. Our experimental results on both Linux and Android systems show that WebCapsule can accurately record and replay complex web applications, including popular websites and real-world phishing attacks, with reasonable performance overhead, making always-on recording practical.

## Acknowledgments
We thank Minesh Javiya (Stony Brook University) and Jienan Liu (University of Georgia) for their help with collecting the browsing traces used to evaluate WebCapsule. We would also like to thank the Chromium development team for their documentation of Blink and the entire Chromium project, and the anonymous reviewers for their constructive and very helpful comments.

This material is based in part upon work supported by the National Science Foundation, under grants No. CNS-1149051 and CNS-1514142. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.

## References
[1] Acid3. http://acid3.acidtests.org.
[2] ANDRICA, S., AND CANDEA, G. Warr: A tool for high-fidelity web application record and replay. In Proceedings of the 2011 IEEE/IFIP 41st International Conference on Dependable Systems & Networks (Washington, DC, USA, 2011), DSN ’11, IEEE Computer Society, pp. 403–410.
[3] Blink web rendering engine. http://www.chromium.org/blink.
[4] Blink scheduler. https://goo.gl/wzqXgC - https://goo.gl/I8YGu3 - https://goo.gl/RBkhCo.
[5] BURG, B., BAILEY, R., KO, A. J., AND ERNST, M. D. Interactive record/replay for web application debugging. In Proceedings of the 26th Annual ACM Symposium on User Interface Software and Technology (New York, NY, USA, 2013), UIST ’13, ACM, pp. 473–484.
[6] CHOI, J.-D., AND SRINIVASAN, H. Deterministic replay of Java multithreaded applications. In Proceedings of the SIGMETRICS Symposium on Parallel and Distributed Tools (New York, NY, USA, 1998), SPDT ’98, ACM, pp. 48–59.
[7] Chrome devtools. https://developer.chrome.com/devtools/docs/integrating.
[8] Chromeshell. https://code.google.com/p/chromium/wiki/AndroidBuildInstructions.
[9] DENNING, D. E., AND BRANSTAD, D. K. A taxonomy for key escrow encryption systems. Commun. ACM 39, 3 (Mar. 1996), 34–40.
[10] Dromaeo JavaScript test suite. http://dromaeo.com.
[11] DUNLAP, G. W., KING, S. T., CINAR, S., BASRAI, M. A., AND CHEN, P. M. Revirt: Enabling intrusion analysis through virtual-machine logging and replay. In Proceedings of the 5th Symposium on Operating Systems Design and Implementation (New York, NY, USA, 2002), OSDI ’02, ACM, pp. 211–224.
[12] ETMINANI, K., DELUI, A., YANEHSARI, N., AND ROUHANI, M. Web usage mining: Discovery of the users’ navigational patterns using SOM. In Networked Digital Technologies, 2009. NDT ’09. First International Conference on (2009), pp. 224–249.
[13] GOMEZ, L., NEAMTIU, I., T.AZIM, AND T.MILLSTEIN. Reran: Timing- and touch-sensitive record and replay for Android. In Proceedings of the 2013 ICSE (2013).
[14] Google instant predictions. https://support.google.com/websearch/answer/186645?hl=en.
[15] HONG, S.-S., AND WU, S. On interactive internet traffic replay. In Recent Advances in Intrusion Detection, A. Valdes and D. Zamboni, Eds., vol. 3858 of Lecture Notes in Computer Science. Springer Berlin Heidelberg, 2006, pp. 247–264.
[16] JONES, K. J. Forensic analysis of Internet Explorer activity files. http://www.mcafee.com/us/resources/white-papers/foundstone/wp-pasco.pdf.
[17] MICKENS, J., ELSON, J., AND HOWELL, J. Mugshot: Deterministic capture and replay for JavaScript applications. In Proceedings of the 7th USENIX Conference on Networked Systems Design and Implementation (Berkeley, CA, USA, 2010), NSDI’10, USENIX Association, pp. 11–11.
[18] NEASBITT, C., R.PERDISCI, LI, K., AND NELMS, T. Clickminer: Towards forensic reconstruction of user-browser interactions from network traces. In Proceedings of the 2014 ACM Computer and Communication Security Conference (CCS) (2014).
[19] RSA NetWitness. https://www.emc.com/collateral/data-sheet/rsa-netwitness-nextgen.pdf.
[20] OH, J., LEE, S., AND LEE, S. Advanced evidence collection and analysis of web browser activity. Digit. Investig. 8 (Aug. 2011), S62–S70.
[21] Panda. https://github.com/moyix/panda/blob/master/docs/record_replay.md.
[22] REIS, C., AND GRIBBLE, S. D. Isolating web programs in modern browser architectures. In Proceedings of the 4th ACM European Conference on Computer Systems (New York, NY, USA, 2009), EuroSys ’09, ACM, pp. 219–232.
[23] Selenium WebDriver. http://docs.seleniumhq.org/projects/webdriver/.
[24] Tcpreplay. http://tcpreplay.synfin.net/.
[25] TimeLapse HTMLParser. https://github.com/burg/timelapse/blob/timelapse/Source/WebCore/html/parser/HTMLDocumentParser.cpp; see "// The timing of yields is nondeterministic, so just don’t yield during capture/replay".
[26] TimeLapse wiki. https://github.com/burg/timelapse/wiki/Frequently-asked-questions.
[27] Adding traces to Chromium. http://www.chromium.org/developers/how-tos/trace-event-profiling-tool/tracing-event-instrumentation.
[28] V8 JavaScript engine. https://developers.google.com/v8/.
[29] VMware Inc. Replay debugging on Linux, October 2009. http://www.vmware.com/pdf/ws7_replay_linux_technote.pdf.
[30] The WebKit open source project. https://www.webkit.org.
[31] WebView. http://developer.android.com/guide/webapps/webview.html.
[32] Wikipedia - Acid3. http://en.wikipedia.org/wiki/Acid3.
[33] XIE, G., ILIOFOTOU, M., KARAGIANNIS, T., FALOUTSOS, M., AND JIN, Y. Resurf: Reconstructing web-surfing activity from network traffic. In IFIP Networking Conference, 2013 (2013).