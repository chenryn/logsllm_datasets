# Covert Debugging: Circumventing Software Armoring Techniques

## Offensive Computing, LLC
- **Danny Quist**
  - Co-Founder, Offensive Computing
  - PhD Student, New Mexico Tech
  - Reverse Engineer
  - Exploit Developer
  - cDc/NSF
- **Valsmith**
  - Co-Founder, Offensive Computing
  - Malware Analyst/Reverse Engineer
  - Metasploit Contributor
  - Penetration Tester/Exploit Developer
  - cDc/NSF

## Community and Business Services
- **Community Contributions**
  - Free access to malware samples
  - Largest open malware site on the Internet
  - 350,000 hits per month
- **Business Services**
  - Customized malware analysis
  - Large-scale malware data-mining and access
  - Reverse Engineering

## Introduction
- **Debugging Malware**: A powerful tool for:
  - Tracing runtime performance
  - Monitoring API calls
  - Dynamic analysis and automation
- **Challenges in Debugging Malware**:
  - Debugger detection
  - Virtual machine (VM) detection
  - Techniques pioneered by legitimate software

## Overview of the Talk
- Software armoring techniques
- Requirements for covert debugging
- Dynamic instrumentation for debugging
- OS page fault-assisted covert debugging
- Application: Generic autounpacking
- Results

## Software Armoring Techniques
- **Packing/Encryption**
  - Self-modifying code with a small decoder stub
  - Decompresses the main executable and restores imports
  - Tricks with Portable Executables (PE):
    - Hiding imports
    - Obscuring relocations
    - Encrypting/compressing the executable
- **Virtual Machine Detection**
  - Single instruction detection (e.g., SLDT, SGDT, SIDT)
  - Instructions for privileged/unprivileged CPU modes
- **Debugger Detection**
  - Windows API: `IsDebuggerPresent()`
  - Timing attacks using RDTSC instruction
  - Breakpoint detection (Int3 instruction scanning)
  - Hardware debugging detection (CPU flags)
  - SoftICE detection
- **Structured Exception Handler (SEH) Tricks**
  - Overloading SEH to unpack code
  - Debugger dies when it encounters SEH exceptions
- **Shifting Decode Frames**
  - Execution split at the basic block level
  - Block is decoded, executed, and then encoded again
  - Implemented in Patchguard for Vista 64 and Windows Server 2003 64-bit

## Unpacking
- **Unpacking Process**
  - Writes to an area of memory (decode)
  - Memory is read from (execute)
  - More writes to memory (optional re-encoding)
  - CPU executes only machine code
  - This process can be monitored and is related to timing
- **Manual Unpacking Process**
  - Identify packer type (e.g., using Peid, Msfpecan, or manual inspection)
  - Find Original Entry Point (OEP) or get the process to an unpacked state in memory
  - Dump process memory to a file
  - Fixup file and rebuild Import Address Table (IAT)
  - Ensure the file can now be analyzed

## Dynamic Instrumentation
- **Intel PIN**
  - Uses Just-In-Time (JIT) compiler to insert analysis code
  - Retains consistency of the executable
  - Pintools API for analyzing code
  - Good control over execution (instruction, memory access, basic block)
- **Instruction Tracing for Packers**
  - Tested with Armadillo, Aspack, FSG, MEW, PECompact, Telock, and UPX
  - Created a simple Hello World application and graphed results with Oreas GDE

## Results
- **Unpacking Loop**
  - Easy to find with the generic algorithm
  - All addresses verified by manual unpacking
  - Addresses display clustering, which must be taken into account
  - Attach/Detach is effective for taking memory snapshots of an executable

## Dynamic Instrumentation Problems
- **Detectability**
  - Memory checksums and signature scanning
  - Need a faster implementation (~1,000 times slower than native)

## Towards a Solution
- **Core Operating System Component**
  - Monitors all memory
  - Intercepts memory accesses
  - Fast interception and logging
  - Fundamental part of the OS

## Introducing Saffron
- **Features**
  - Intel PIN and Hybrid Page Fault Handler
  - Extension of OllyBonE Kernel Code
  - Designed for 32-bit Intel x86 CPUs
  - Replaces Windows 0x0E Trap Handler
  - Logs memory accesses

## Virtual Memory Translation
- **Memory Translation**
  - Each process has its own memory
  - Memory must be translated from virtual to physical address
  - Non-PAE 32-bit processors use two page indexes and a byte index
  - Each process has its own Page Directory

## MMU Data Structures
- **Page Directory Entry (PDE) and Page Table Entry (PTE)**
  - Hardware-defined with permissions, present bit, etc.
  - Permissions (Ring0 vs. all others)
  - Present bit (paged to disk or not)
  - "User" defined bits (for OS)

## Process Monitoring
- **Overloading Supervisor Bit in Page Fault Handler**
  - Iterate through all pages for a process
  - Mark supervisor bit on each valid PTE
  - Invalidate the page in the TLB with INVLPG
  - Hook heap allocation to watch new pages

## Trap to Page Fault Handler
- **Determine if a watched process**
  - Unset the supervisor bit
  - Load the memory into the TLB
  - Reset the supervisor bit

## Results
- **Memory Accesses**
  - Reads, writes, and executions are exposed
  - Program execution can be tracked and controlled
  - Memory reads and writes are extremely apparent
  - Executions show for each individual page

## Modifying the Autounpacker
- **Watch for written pages**
  - Monitor for executions into that page
  - Mark page as Original Entry Point
  - Dump memory of the process

## Video Demo of Unpacking
- **Demonstrate Saffron**

## Autounpacker Results
- **Effective Method for Bypassing Debugger Attacks**
  - Solves SEH decode problems and memory checksums
  - No process memory is modified
  - Shifting decode frame: Slight modification under development but effective

## Future Work
- **Develop Full-Fledged API**
  - Address issues with lost page markings and detectability

## Questions?
- **Paper and Presentation Available at www.offensivecomputing.net**