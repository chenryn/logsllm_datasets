### Simplicity is Key
- **Widespread Distribution**: Simple formats ensure the widest possible distribution, as no special viewers are required.
- **Complex Formats and Vulnerabilities**: More complex formats can limit the number of potential readers due to the higher risk of vulnerabilities.
- **Plain Text and Markdown**: Consider using plain text or Markdown, which allows for easy copying and pasting of key details and supports language translation.

### Avoid PDFs
- **Never Use PDFs**: PDFs are not recommended for sharing advisories.

### Video Best Practices
- **Respect Viewers' Time**: Keep videos short and sweet. Accompany them with a text advisory.
- **Clear Visuals**: Ensure the video has clear and essential visuals.
- **Reproduction Steps**: Show detailed steps to reproduce the issue.
- **Pacing**: Give viewers enough time to read and understand each step.

### Advisory Formats: Pros and Cons
**Steve**
- **Unique Scenarios**: Each disclosure is unique and may involve various challenges such as:
  - **Contact Issues**: Difficulty in finding the right contact, who may not even exist.
  - **Inexperience**: If the contact is inexperienced, they may not understand the issue.
  - **Legal Threats**: Potential legal threats.
  - **Silence After Acknowledgment**: Receipt acknowledgment followed by silence.
  - **Bureaucratic Barriers**: Corporate bureaucracy or politics preventing openness.
  - **Patch Sharing**: Refusal to share patches for re-testing.
  - **Lack of Credit**: No acknowledgment or credit given.
  - **Unreasonable Timelines**: Commitment to a fix but with an unreasonable timeline.
  - **Severity Disagreements**: Disagreement on the severity of the issue.
  - **Patch Release Without Mention**: Patch release without mentioning the vulnerability.

### What to Expect from Vendors
**Josh**
- **Archived Sources**: Post your advisory to at least one source that is permanently archived.
  - **Mailing Lists**: Bugtraq, Full-Disclosure, oss-security.
  - **Exploit Databases**: Exploit-DB or other exploit sites.
  - **Vulnerability Databases**: Various databases.
  - **Personal Blog/Website**: Your own blog or website.
- **Vendor Credits**: Alternatively, you may rely on vendor credits or "hall of fame" listings without separate publication.

### Where to Disclose Publicly
**Josh**
- **Live Site Testing**: Avoid testing live sites or networks without permission.
- **Threatening Behavior**: Do not interact with vendors in a threatening or blackmailing manner.
- **Verification**: Ensure the problem exists before reporting.
  - **Automated Tools**: Verify findings from automated tools.
  - **Proof of Existence**: It's easier to declare a vulnerability than to prove it.
- **Prior Discovery**: Check if the issue was already discovered.
- **Root-Cause Analysis**: Skip root-cause analysis at your peril; it often leads to more interesting findings.
- **Poor Workarounds**: Avoid suggesting poor workarounds like "uninstall software."
- **Over-Hyping Severity**: Do not over-hype the severity of your findings.

### Common Mistakes to Avoid (1)
**Josh + Steve**
- **Multiple Attacks as Separate Vulnerabilities**: Treat multiple attacks or attack chains as separate vulnerabilities only if they originate from a single vulnerability.
  - **Decision Point**: If an issue is fixed, are the other issues still a problem?
- **Template Reuse**: Start with an empty template when creating a new advisory to avoid copying old data.
- **Cultural References**: Avoid relying too heavily on memes or cultural references.
- **Assumptions About Developers**: Do not assume developers are stupid or lazy.
- **Instant Patches**: Do not assume customers can patch instantly.

### Common Mistakes to Avoid (2)
**Josh + Steve**
- **Newbie Stage**:
  - **Easy Vulnerabilities**: Focus on easy-to-find vulnerabilities and simple attacks.
  - **Single Vulnerability Type**: Limited to one type of vulnerability.
  - **Missed Important Vulns**: Misses more important vulnerabilities.
  - **No Advisory Format**: No structured advisory format.
  - **Sometimes Wrong**: Findings may be incorrect.
- **Workhorse Stage**:
  - **Comprehensive Findings**: Multiple bugs per package.
  - **Multiple Vuln/Attack Classes**: Recognizes multiple types of well-understood vulnerabilities and attacks.
  - **Evolving Disclosure Policy**: Develops a stable and evolving advisory format.
  - **Learning New Techniques**: Learns and applies new techniques.
  - **Ensures Novelty**: Ensures findings are new and references related work.
- **Subject Matter Expert Stage**:
  - **Recognizes Multiple Audiences**: Significant experience in one or more vuln or attack classes.
  - **Develops Enhancements**: Develops new enhancements for existing techniques.
  - **White Papers and Conferences**: Writes white papers and speaks at conferences.
  - **Bypasses Protection Mechanisms**: Bypasses common protection mechanisms.
  - **Root Cause Analysis**: Performs comprehensive root cause analysis.
  - **Notable Body of Work**: Creates a noticeable body of work.
  - **Detailed Advisories**: Rarely wrong, with detailed and well-written advisories.
- **Elite Stage**:
  - **Finds New Vuln Classes**: Finds new vulnerability classes and invents new attack classes.
  - **Bypasses Advanced Protections**: Bypasses state-of-the-art protection mechanisms.
  - **Anticipates Developments**: Anticipates industry-wide developments.
  - **Specialized Expertise**: Elite only for a particular specialty.
  - **Analyzes Popular Software**: Analyzes the most popular and secure software.
  - **Complex Chains**: Finds complex vulnerability chains.

### Vulnerability Research Process
- **Discovery**:
  - **Techniques**: Apply various techniques such as auditing, fuzzing, and manual testing.
- **Analysis**:
  - **Understanding**: Understand the reachability, impact, affected products and versions, and exploitability.
  - **Minimize Test Cases**: Minimize test cases.
- **Reporting**:
  - **Drafting an Advisory**: Draft an advisory.
  - **Notification**: Notify affected parties and coordinate with vendors.
  - **Public Notification**: Notify a wider audience once remediated.
- **Remediation**:
  - **Fixing Issues**: Craft and deploy a fix.
  - **Notification and Coordination**: Notify affected parties and coordinate with researchers.
  - **Affected Parties**: Prioritize, test, and apply patches.

### References and Links
- **Presentations**:
  - Andrew M. Hay: “Bootstrapping A Security Research Project”
    - [Link](https://speakerdeck.com/andrewsmhay/source-boston-2016-bootstrapping-a-security-research-project)
  - Larry Cashdollar: “How to find 1,352 WordPress XSS plugin vulnerabilities in 1 hour (not really)”
    - [Link](http://www.wallofsheep.com/blogs/news/tagged/defcon#larry)
  - Nick Jones / MWR Labs: “Bug Hunting with Static Code Analysis”
    - [Link](https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-bug-hunting-with-static-code-analysis-bsides-2016.pdf)
- **Books**:
  - Dowd, McDonald, and Schuh: “The Art of Software Security Assessment: Identifying and Preventing Software Vulnerabilities”
  - “Hacker’s Handbook” series: “Android Hacker’s Handbook”
- **Documents**:
  - Phrack Magazine: [Link](http://www.phrack.org/)
  - PoC||GTFO: [Link](https://www.alchemistowl.org/pocorgtfo/)
  - “Introduction to Vulnerability Theory”: [Link](https://cwe.mitre.org/documents/vulnerability_theory/intro.html)

### Tools
- **Considerations**: Cost, false-positive rate, false-negative rate, explanations, etc.
- **Kali Linux**: Many different tools. [Link](https://www.kali.org/)
- **Metasploit**: [Link](https://www.metasploit.com/)
- **Grep**: Yes, grep!

### Intentionally Vulnerable Software
- **OWASP WebGoat**: [Link](https://www.owasp.org/index.php/Category:OWASP_WebGoat_Project)
- **NIST SAMATE Test Suites**: Juliet and STONESOUP. [Link](https://samate.nist.gov/SARD/testsuite.php)
- **CWE Demonstrative Examples**: [Link](https://cwe.mitre.org)
- **Intentionally Vulnerable Distros**: Damn Vulnerable Linux, [VulnHub](https://www.vulnhub.com/)

### Advisory & Disclosure Advice
- **Kymberlee Price**: “Writing Vulnerability Reports that Maximize Your Bounty Payouts”. [Link](https://youtu.be/zyp2DoBqaO0)
- **John Stauffacher**: “Geekspeed’s Advice for Writing a Great Vulnerability Report”. [Link](https://blog.bugcrowd.com/advice-for-writing-a-great-vulnerability-report/)
- **OSVDB**: “Researcher Security Advisory Writing Guidelines”. [Link](https://blog.osvdb.org/2013/01/15/researcher-security-advisory-writing-guidelines)
- **CVRF (Common Vulnerability Reporting Framework)**: [Link](http://www.icasi.org/cvrf/)
- **Christey Advisory Format Suggestion (2003)**: [Link](http://www.securityfocus.com/archive/1/344559)

### Disclosure Processes
- **How to Report a Vuln**: [Link](http://howdoireportavuln.com/)
- **Attrition.org Legal Threats**: [Link](http://attrition.org/errata/legal_threats/)
- **ISO 29147 Vulnerability Disclosure Standard**: [Link](http://www.iso.org/iso/catalogue_detail.htm?csnumber=45170)
- **Christey/Wysopal IETF Draft**: [Link](https://tools.ietf.org/html/draft-christey-wysopal-vuln-disclosu-00)
- **RFPolicy 2.0**: [Link](https://dl.packetstormsecurity.net/papers/general/rfpolicy-2.0.txt)