# Title: Modeling of Multiple Agent-Based Cryptographic Key Recovery Protocol

## Authors
Shinyoung Lim, Sangseung Kang, Joo-Chan Sohn  
ETRI, Korea  
{limsy, ssk, jcsohn} @etri.re.kr

## Abstract
When a recipient of a ciphertext message cannot decrypt the message due to the loss of their private key, key recovery becomes necessary. Commercial key backup solutions (e.g., AT&T Crypto-Backup [8]) involve encrypting a session key using the public key and storing it with the data. The user sends the private key to a key recovery agent, who can provide the stored private key when needed.

In this paper, we present a new multiple agent-based key recovery protocol. This protocol is characterized by key encapsulation, protocol generalization, secret selection of key recovery agents, and the forking and joining of session keys using random keys. The proposed protocol is formally modeled using an Extended Cryptographic Timed Petri Net (ECTPN). The recoverability of the session key and the performance of the protocol are verified using the reachability graph of the ECTPN.

## 1. Introduction
Key management, like cryptographic algorithms, is a core technology in information security. It encompasses activities such as generation, distribution, validation, storage, usage, expiration, and recovery of cryptographic keys [1]. Key recovery techniques, which aim to recover cryptographic information, often face conflicts between preserving personal privacy and meeting government requirements, as these techniques may violate personal secrecy.

Key recovery techniques can be classified into several approaches [1,2]:
- **Key Escrow**: The user sends the cryptographic key to one or more escrow agents. When the user needs to recover the key, the escrow agent provides the stored key.
- **Trusted Third Party**: The user obtains the session key from a trusted third party (e.g., a key distribution center). The trusted third party can provide the original cryptographic key when needed.
- **Key Encapsulation**: A session key is encrypted along with other key recovery information in a capsule (key recovery block) that only the user's designated key recovery agent can decrypt. The key recovery block is sent to the key recovery agent, who then returns the recovered session key to the user.

Key distribution centers and escrow agents can be bottlenecks in the IT infrastructure due to high transaction overhead and large storage requirements. Private key backup reduces overhead but many users are reluctant to submit their private keys to any authority. Key escrow is sensitive to privacy violations and suffers from a binding problem [5], while key encapsulation offers better privacy and has several advantages over other approaches.

However, conventional key encapsulation approaches have limitations:
- Lack of formal modeling and analysis models.
- User agents need to directly communicate with key recovery agents, leading to complex functions.
- No practical propositions for multiple agent-based key recovery systems.

To address these issues, we developed a new multiple agent-based key recovery protocol and proposed a new analysis model, the Extended Cryptographic Timed Petri Net (ECTPN), for formal modeling and analysis. The ECTPN has been successfully used for concurrent and real-time systems since 1964 [13,14] and for modeling and analyzing information flows and cryptographic protocols [15,16].

This paper is organized as follows: Section 2 describes the key recovery requirements and the framework of the protocol. Section 3 presents the formal modeling and analysis results using the ECTPN model and its reachability graph. Basic definitions of the ECTPN are provided in the Appendix. Section 4 compares conventional key encapsulation approaches with our approach. Finally, Section 5 concludes the paper.

## 2. Framework of Research

### 2.1 Problems and Requirements of Key Recovery
Assume User A (UA) sends a ciphertext message to User B (UB) using a cryptographic mechanism over a public key infrastructure. If UB loses their private key or UA uses UB's old public key, the session key cannot be obtained, and the ciphertext data cannot be decrypted. Thus, UB or a law enforcement agent must recover the session key. The key recovery should be controlled by end-users or organizational security policies. However, this does not solve the binding problem [8], so a law enforcement access field (LEAF) is not included in the encapsulated key recovery information.

### 2.2 Framework of the Proposed Multiple Agent-Based Key Recovery Protocol
The proposed protocol operates within a key recovery system consisting of nested security domains, as shown in Fig. 1. The key recovery provider domain is the most secure, and key recovery services are provided only to user agents within the key recovery domain, i.e., intra-key-recovery communication.

**Key Recovery Scenario:**
1. **Phase 1 (Initialization)**: Public keys of all agents in the application domain are distributed by a public key infrastructure after a certification authority issues certificates. The certificate contains the public key and identification/authentication information.
2. **Phase 2 (Communication and Key Recovery Information Generation)**: UA secretly or randomly chooses one or more key recovery agents from a pool and generates key recovery information (KRI) using the public keys of the chosen agents. The KRI is encapsulated within the communication message along with the ciphertext data.
3. **Phase 3 (Key Recovery)**: UB or a law-enforced third party, such as an information system manager, generates a new key pair (pukB', prkB') and registers pukB' with the certification authority. The certification authority issues a new certificate (certB) containing pukB'. UB requests key recovery service from the Key Recovery Center (KRC) by sending certB, reqB, and KRI. The key recovery process proceeds according to the steps in Fig. 2.

In the multiple agent-based key recovery protocol, UA chooses n Key Recovery Agents (KRAs) from a pool. For example, KRA1 and KRA2 are involved in a 2-agent based key recovery protocol. The session key (ssk) is forked into n intermediate keys (iki) at UA and joined at the KRC. The fork and join functions are defined as follows:
- **Fork(ssk, n)**: ik1, ... iki, ... ikn (where, ik1 = ssk ⊕ rk1, ik2 = rk1 ⊕ rk2, ..., iki = rki-1 ⊕ rki, ..., ikn = rkn-1)
- **Join(ik1, ... iki, ... ikn)**: ik1 ⊕ ik2 ⊕ ... ⊕ iki ⊕ ... ⊕ ikn

Note that ssk is preserved because (ssk ⊕ rk1) ⊕ (rk1 ⊕ rk2) ⊕ ... ⊕ (rki-1 ⊕ rki) ⊕ ... ⊕ (rkn-2 ⊕ rkn-1) ⊕ rkn-1 = ssk. Each iki is encrypted at UA and decrypted at KRAi using the public and private keys of KRAi. Intermediate keys are merged at UA and divided at KRC to constitute KRI and the communication message.

## 3. Modeling and Analysis of Multiple Agent-Based Key Recovery Protocol

### 3.1 Modeling by Bottom-Up Approach
The key, message, and data in the protocol are modeled by places in the ECTPN. Functional components (e.g., cryptographic, operation, and communication functions) and predefined high-level functional components are modeled by transitions. Data availability or activation is specified by tokens in corresponding places. The ECTPN model for the multiple agent-based key recovery protocol is constructed using a stepwise refinement (top-down), incremental (bottom-up), or mixed approach.

#### 3.1.1 Modeling of Key, Message, and Data by Places
- **Key Places**: ssk (session key), prk (private key), prk' (new private key for key recovery), puk (public key), puk' (new public key for key recovery), rk (random key for forking/joining), ik (intermediate keys for ssk), s-prk (private key for signature), cert (certificate), sig (signature), s-puk (public key for verification), krr (key recovery request)
- **Message Places**: msg (message), KRI (key recovery information)
- **Data Places**: data (any data), req (key recovery request), int (integrity)

For each place \( p_i \), the size \( \text{size}(p_i) \) is annotated for performance evaluation.

## Conclusion
This paper presents a new multiple agent-based key recovery protocol that addresses the limitations of conventional key encapsulation approaches. The protocol is characterized by key encapsulation, protocol generalization, secret selection of key recovery agents, and the forking and joining of session keys using random keys. The proposed protocol is formally modeled using an ECTPN, and its recoverability and performance are verified using the reachability graph of the ECTPN. Future work will focus on further enhancing the protocol and exploring its practical applications.

---

**References:**
[1] Reference 1
[2] Reference 2
[3] Reference 3
[4] Reference 4
[5] Reference 5
[6] Reference 6
[7] Reference 7
[8] Reference 8
[9] Reference 9
[10] Reference 10
[11] Reference 11
[12] Reference 12
[13] Reference 13
[14] Reference 14
[15] Reference 15
[16] Reference 16