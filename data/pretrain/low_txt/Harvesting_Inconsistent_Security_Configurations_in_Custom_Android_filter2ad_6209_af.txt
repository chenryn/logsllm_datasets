### 8. Limitations

In this section, we discuss some of the limitations of our proposed approach.

#### 8.1 Component Implementation Changes
A static change in a component’s security configuration (such as visibility or permission protection) does not always indicate a security risk. For instance, a developer might intentionally decide to export a component or downgrade its permission protection for the following reasons:
- The component's operations or provided data are no longer privileged.
- The component's implementation is strengthened via runtime checks of the caller's identity (e.g., using `binder.getCallingUid()` or `Context.checkPermission()` APIs).

Our solution identifies these potentially risky configuration changes and recommends further investigation to confirm whether the change was intentional or not.

#### 8.2 Component Renaming
Our approach may fail to detect inconsistent configurations in components that have been renamed during customization. Since Android heavily relies on implicit intents for inter-app communication, vendors might rename their components to reflect their organizational identity. This renaming can lead to undetected inconsistencies.

### 9. Related Work

#### 9.1 Security Risks in Android Customization
Extensive Android vendor customization has been shown to be problematic in prior studies. At the kernel level, ADDICTED [29] identifies under-protected Linux device drivers in customized ROMs by comparing them with AOSP images. Our findings on inconsistent GID to permission mappings highlight another way that critical device drivers can be exposed. At the framework/app level, Harehunter [5] reveals the Hanging Attributes References (HAREs) vulnerability caused by under-regulated Android customization. This vulnerability occurs when an attribute is used on a device but the party defining it has been removed, allowing a malicious app to acquire critical capabilities by disguising as the owner of the attribute.

Previous works [13, 14, 25] have also highlighted security issues in the permission and component access control (AC) in preloaded apps. Gallo et al. [13] analyzed five different devices and concluded that serious security issues, such as poorer permission control, increase with the level of customization. Another prominent work [25] analyzes pre-installed apps on ten factory images and reports known problems like over-privilege [11] and permission re-delegation [12]. Our study differs fundamentally from [25], which finds specific known vulnerabilities through reachability analysis. Instead, we use differential analysis to point out inconsistencies in components' protection and detect unintentionally exposed ones. Our analysis also provides insights into possible reasons behind the exposure.

#### 9.2 Demystification of Android Security Configurations
The high flexibility of Android’s security architecture requires a thorough understanding of configurable security parameters. Stowaway [11] and PScout [7] have led the way by mapping individual APIs to required permissions. This understanding is essential for our feature selection and has inspired other researchers to detect vulnerabilities in apps. The prevalence of misconfigured content providers, activities, and services is studied in [30, 8], respectively. These vulnerabilities arise from developers exposing critical components or misinterpreting Android’s security protection. Unlike approaches that focus on analyzing individual apps for vulnerabilities, our method learns from the configurations of the same app on other ROMs to determine if it should be protected or not.

#### 9.3 Android Vulnerability Analysis
Prior research has uncovered security issues in non-customized AOSP images. PileUp [26] highlights problems in the Android upgrading process. Recent studies examine crypto misuse in Android apps [9, 16] and security risks from design flaws in push-cloud messaging [18], multi-user architecture [24], app uninstallation [28], and Android’s Clipboard and sharing mechanism [10]. Other researchers [20, 15] have focused on uncovering vulnerabilities within specific Android apps in the web landscape. These vulnerabilities complement the security issues detected in vendor customization and collectively provide a more comprehensive picture of the Android ecosystem’s security landscape.

To analyze Android vulnerabilities, both static and dynamic analysis techniques have been proposed. CHEX [19], Epicc [21], and FlowDroid [6] apply static analysis for vulnerability detection. Other works [23, 22, 17, 27] use dynamic analysis to accurately understand app behaviors. Both techniques are beneficial to our research. Dynamic analysis can help us exploit likely risky inconsistencies, while static analysis can provide control/data flow information as another security feature in our differential analysis. We plan to explore these ideas in future work.

### 10. Conclusion

In this paper, we make the first systematic attempt to detect security configuration changes introduced by Android customization. We list the security features applied at various Android layers and leverage differential analysis among a large set of custom ROMs to find out if they are consistent across all of them. By comparing security configurations of similar images (from the same vendor, running the same OS version, etc.), we can identify critical security changes that might have been unintentionally introduced during customization. Our analysis shows that indeed, customization parties introduce several configurations that can lead to severe vulnerabilities such as private data exposure and privilege escalation.

### 11. Acknowledgement

We would like to thank our anonymous reviewers for their insightful comments. This project was supported in part by the NSF grant 1318814.

### References

[1] Android Revolution. http://goo.gl/MVigfq.
[2] Factory Images for Nexus Devices. https://goo.gl/i0RJnN.
[3] Huawei ROMs. http://goo.gl/dYPTE5.
[4] Samsung Updates. http://goo.gl/RVU84V.
[5] AAFER, Y., ZHANG, N., ZHANG, Z., ZHANG, X., CHEN, K., WANG, X., ZHOU, X., DU, W., AND GRACE, M. Hare hunting in the wild android: A study on the threat of hanging attribute references. In Proceedings of the 22Nd ACM SIGSAC Conference on Computer and Communications Security (2015), CCS ’15.
[6] ARZT, S., RASTHOFER, S., FRITZ, C., BODDEN, E., BARTEL, A., KLEIN, J., LE TRAON, Y., OCTEAU, D., AND MCDANIEL, P. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps. PLDI ’14.
[7] AU, K. W. Y., ZHOU, Y. F., HUANG, Z., AND LIE, D. Pscout: Analyzing the android permission specification. In Proceedings of the 2012 ACM Conference on Computer and Communications Security (New York, NY, USA, 2012), CCS ’12, ACM.
[8] CHIN, E., FELT, A. P., GREENWOOD, K., AND WAGNER, D. Analyzing inter-application communication in android. In Proceedings of the 9th International Conference on Mobile Systems, Applications, and Services (2011), MobiSys ’11, ACM.
[9] EGELE, M., BRUMLEY, D., FRATANTONIO, Y., AND KRUEGEL, C. An empirical study of cryptographic misuse in android applications. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security (2013), ACM.
[10] FAHL, S., HARBACH, M., OLTROGGE, M., MUDERS, T., AND SMITH, M. Hey, you, get off of my clipboard. In In proceeding of 17th International Conference on Financial Cryptography and Data Security (2013).
[11] FELT, A. P., CHIN, E., HANNA, S., SONG, D., AND WAGNER, D. Android permissions demystified. In Proceedings of the 18th ACM conference on Computer and communications security (New York, NY, USA, 2011), CCS ’11, ACM.
[12] FELT, A. P., WANG, H. J., MOSHCHUK, A., HANNA, S., AND CHIN, E. Permission re-delegation: Attacks and defenses. In Proceedings of the 20th USENIX Security Symposium (2011).
[13] GALLO, R., HONGO, P., DAHAB, R., NAVARRO, L. C., KAWAKAMI, H., GALVÃO, K., JUNQUEIRA, G., AND RIBEIRO, L. Security and system architecture: Comparison of android customizations. In Proceedings of the 8th ACM Conference on Security & Privacy in Wireless and Mobile Networks (2015).
[14] GRACE, M., ZHOU, Y., WANG, Z., AND JIANG, X. Systematic detection of capability leaks in stock Android smartphones. In Proceedings of the 19th Network and Distributed System Security Symposium (NDSS) (Feb. 2012).
[15] JIN, X., HU, X., YING, K., DU, W., YIN, H., AND PERI, G. N. Code injection attacks on HTML5-based mobile apps: Characterization, detection, and mitigation. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (New York, NY, USA), CCS ’14, ACM.
[16] KIM, S. H., HAN, D., AND LEE, D. H. Predictability of android openssl’s pseudo random number generator. In Proceedings of the 2013 ACM SIGSAC Conference on Computer and Communications Security (New York, NY, USA, 2013), CCS ’13, ACM.
[17] KLIEBER, W., FLYNN, L., BHOSALE, A., JIA, L., AND BAUER, L. Android taint flow analysis for app sets. In Proceedings of the 3rd ACM SIGPLAN International Workshop on the State of the Art in Java Program Analysis (2014), SOAP ’14.
[18] LI, T., ZHOU, X., XING, L., LEE, Y., NAVEED, M., WANG, X., AND HAN, X. Mayhem in the push clouds: Understanding and mitigating security hazards in mobile push-messaging services. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (2014), CCS ’14, ACM.
[19] LU, L., LI, Z., WU, Z., LEE, W., AND JIANG, G. Chex: statically vetting android apps for component hijacking vulnerabilities. In Proceedings of the 2012 ACM conference on Computer and communications security (2012), CCS ’12.
[20] LUO, T., HAO, H., DU, W., WANG, Y., AND YIN, H. Attacks on WebView in the Android system. ACSAC ’11.
[21] OCTEAU, D., MCDANIEL, P., JHA, S., BARTEL, A., BODDEN, E., KLEIN, J., AND LE TRAON, Y. Effective inter-component communication mapping in android with epicc: An essential step towards holistic security analysis. In Proceedings of the 22Nd USENIX Conference on Security (2013), SEC’13.
[22] POEPLAU, S., FRATANTONIO, Y., BIANCHI, A., KRUEGEL, C., AND VIGNA, G. Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications. NDSS 14’.
[23] RASTOGI, V., CHEN, Y., AND ENCK, W. AppsPlayground: Automatic security analysis of smartphone applications. In Proceedings of the Third ACM Conference on Data and Application Security and Privacy (New York, NY, USA, 2013), CODASPY ’13.
[24] RATAZZI, P., AAFER, Y., AHLAWAT, A., HAO, H., WANG, Y., AND DU, W. A systematic security evaluation of Android’s multi-user framework. In Mobile Security Technologies (MoST) 2014 (San Jose, CA, USA, 2014), MoST’14.
[25] WU, L., GRACE, M., ZHOU, Y., WU, C., AND JIANG, X. The impact of vendor customizations on android security. In Proceedings of the 2013 ACM SIGSAC conference on Computer communications security (New York, NY, USA, 2013), CCS ’13, ACM.
[26] XING, L., PAN, X., WANG, R., YUAN, K., AND WANG, X. Upgrading your android, elevating my malware: Privilege escalation through mobile OS updating. In Proceedings of the 2014 IEEE Symposium on Security and Privacy (2014), SP ’14.
[27] YAN, L. K., AND YIN, H. DroidScope: seamlessly reconstructing the OS and Dalvik semantic views for dynamic android malware analysis. In Proceedings of the 21st USENIX conference on Security symposium (2012), Security’12.
[28] ZHANG, X., YING, K., AAFER, Y., QIU, Z., AND DU, W. Life after app uninstallation: Are the data still alive? Data residue attacks on Android. In NDSS (2016).
[29] ZHOU, X., LEE, Y., ZHANG, N., NAVEED, M., AND WANG, X. The peril of fragmentation: Security hazards in android device driver customizations. In 2014 IEEE Symposium on Security and Privacy, SP 2014, Berkeley, CA, USA.
[30] ZHOU, Y., AND JIANG, X. Detecting passive content leaks and pollution in android applications. In NDSS (2013).

### 12. Appendix

**Figure 8: Components Protection Mismatch Breakdown**

---

This revised text aims to improve clarity, coherence, and professionalism, making it easier to read and understand.