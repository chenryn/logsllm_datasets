# Token Kidnapping's Revenge

## Presenter: Cesar Cerrudo, Founder and CEO of Argeniss

### About Me
- **Founder and CEO of Argeniss**
- Over 8 years of experience in security
- Identified and helped to fix hundreds of vulnerabilities in software such as MS Windows, MS SQL Server, Oracle Database Server, IBM DB2, and more
- Discovered over 50 vulnerabilities in Microsoft products, including 20 on Windows operating systems
- Conducted research and developed novel attacks and exploitation techniques

### Agenda
1. Introduction
2. What is Impersonation and Tokens?
3. Windows XP and 2003 Services Security
4. Windows 7, Vista, and 2008 Services Security
5. Token Kidnapping's Revenge
6. Conclusions
7. Recommendations
8. References
9. Q&A

### Introduction
- In the past, all Windows services ran under the Local SYSTEM account.
  - Compromising a service meant full system compromise.
- Microsoft introduced NETWORK SERVICE and LOCAL SERVICE accounts.
  - Compromising a service no longer equates to full system compromise.
- Windows Vista, Windows 2008, and Windows 7 introduced additional protections.
- Initial Token Kidnapping issues were fixed, but Windows still has some vulnerabilities.

### What is Impersonation and Tokens?
- **Impersonation**:
  - The ability of a thread to execute using different security information than the process that owns the thread.
  - Access Control List (ACL) checks are performed against the impersonated user.
  - Common impersonation APIs include `ImpersonateNamedPipeClient()`, `ImpersonateLoggedOnUser()`, and `RpcImpersonateClient()`.
  - Processes must have the "Impersonate a client after authentication" (SeImpersonatePrivilege) to impersonate.
  - When a thread impersonates, it has an associated impersonation token.

- **Access Tokens**:
  - A Windows object that describes the security context of a process or thread.
  - Includes the identity and privileges of the user account associated with the process or thread.
  - Can be Primary or Impersonation tokens.
    - **Primary Tokens**: Assigned to processes.
    - **Impersonation Tokens**: Acquired during impersonation.
  - Four impersonation levels: `SecurityAnonymous`, `SecurityIdentity`, `SecurityImpersonation`, and `SecurityDelegation`.

### Windows XP and 2003 Services Security
- Services run under Network Service, Local Service, Local System, and user accounts.
- All services can impersonate.
- Fixed weaknesses:
  - A process running under an X account could access processes running under the same X account.
- After fixes:
  - RPCSS and a few services that impersonate the SYSTEM account are now properly protected.
  - WMI processes are now protected.

### Windows Vista, 2008, and 7 Services Security
- **Per-Service SID (New Protection)**:
  - Enhances protection for service processes and their resources.
- Fixed weaknesses in Windows Vista and 2008:
  - While regular threads were properly protected, threads from thread pools were not.
  - WMI processes running under LOCAL SERVICE and NETWORK SERVICE were not protected.
- After fixes:
  - Threads from thread pools are now properly protected.
  - WMI processes are now protected.

### Token Kidnapping's Revenge
- **Initial Findings**:
  - Tapi service had process handles with duplicate handle permissions.
  - Weak registry permissions were found in `HKLM\SOFTWARE\Microsoft\Tracing` and `HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Telephony`.
  - `lineAddProvider()` API allows Network Service and Local Service accounts to load arbitrary DLLs.
  - Tapi service runs as SYSTEM in Windows 2003.
  - Tracing functionality is used by most services, including those running as SYSTEM.

- **Further Findings in Windows 2003**:
  - When WMI is invoked, DCOMLaunch service reads Network and Local Service users' registry keys.
  - If values are found, HKCR keys are not used, allowing WMI process protection bypass.
  - Privileges can be elevated from Local/Network Service in all Windows versions, bypassing protections.

- **Exploits**:
  - **Windows 2003 IIS 6 & SQL Server**:
    - Bypass WMI protection.
  - **Windows 2008 and Windows 7 IIS 7.5**:
    - Exploit weak registry permissions.

### Recommendations
- On IIS:
  - Do not run ASP .NET in full trust.
  - Avoid running websites under Network Service or Local Service accounts.
- Use regular user accounts to run services.
- Remove Users group from `HKLM\Software\Microsoft\Tracing` registry key permissions.
- Disable the Telephony service.

### Conclusions
- New Windows versions are more secure but still have some easily discoverable issues.
- Finding vulnerabilities is not difficult if you know the right tools and where to look.
- **Windows XP and 2003**:
  - If a user can execute code under Network Service or Local Service account, they can execute code as SYSTEM.
- **Windows 7, Vista, and 2008**:
  - If a user can impersonate, they can execute code as SYSTEM.

### References
- [Token Kidnapping](http://www.argeniss.com/research/TokenKidnapping.pdf)
- [Impersonate a client after authentication](http://support.microsoft.com/kb/821546)
- [Access tokens](http://msdn2.microsoft.com/en-us/library/aa374909.aspx)
- [Process Explorer and Process Monitor](http://www.sysinternals.com)
- [API Impersonation Functions](http://msdn.microsoft.com/en-us/library/cc246062(PROT.10).aspx)

### Contact
- Questions? 
- Thanks!
- Contact: cesar@argeniss.com
- [Argeniss](https://www.argeniss.com)
- **We Break Anything!**

---

Feel free to ask any questions!