### Table 10: Performance Costs of DataSafe Software Operations vs. Non-DataSafe (in Cycles on the Legion Simulator)

| Operation     | Non-DataSafe | DataSafe  |
|---------------|--------------|-----------|
| Open          | 341109.8     | 22076.4   |
| Add SDC       | 10177        | N/A       |
| Read          | 2847026      | 117521.4  |
| Write         | 1659347      | N/A       |
| Delete SDC    | 9016594      | 3976      |
| Close         | 2847026      | 278525    |

### Table 11: Performance Cost (in Seconds) of Running Hikidoc Application on Increasing File Sizes

| App           | 0.5 MB      | 2.5 MB    |
|---------------|-------------|-----------|
| Non-DS        | 0.53        | 3.49      |
| DS            | 0.67 (26.42%) | 3.68 (5.44%) |

### Capabilities of DataSafe Based on Output Port Types

In these test cases, SDCs were created to prevent edit, append, save, send over the network, and display. Test cases 6-8 represent data transformation attacks by a single program. In these cases, a test program reads and transforms the data multiple times, and then tries to send the data out on one of the output ports (i.e., disk, network, and display). Test cases 9-11 represent cross-program attacks, where data is read by Program 1 (P1) and passed on to Program 2 (P2), which carries out the attack. Test cases 12-14 represent combined transformation and cross-program attacks. In these test cases, data is read by Program 1 (P1), transformed multiple times, and then the transformed data is sent to Program 2 (P2), which carries out the attack. In test case 15, different parts of a file were protected by SDCs with different protection tags. DataSafe was able to prevent different attacks targeting each of these protected segments. In all test cases, the attack succeeded in the existing machine (non-DataSafe, nDS), but DataSafe (DS) successfully defeated the attack.

### 6.2 Performance and Cost

Since DataSafe is a software-hardware architectural solution, its advantages come at the cost of changes in both hardware and software. These costs are in two distinct phases:

1. **Setup (and Termination)**: Carried out by DataSafe software, this phase incurs performance costs in the redirection of file calls and setting up of SDCs.
2. **Operation Phase**: Carried out by DataSafe hardware, this phase incurs performance costs due to information flow tracking and output control.

We analyze the cost of these changes separately and then discuss the end-to-end cost of running third-party applications.

#### 6.2.1 Software Performance

Table 10 shows the performance costs for file operations such as open, add SDC, read, write, delete SDC, and close. The overhead of the `open` operation is due to file access redirection and the setting up of memory-mapped regions, which do not occur in non-DataSafe machines. The cost of adding and deleting SDCs on DataSafe is small compared to other operations. These performance costs are consistent regardless of file size.

In contrast, we achieve better performance during the Operation phase for read and write operations in DataSafe due to the use of memory-mapped file operations. These performance gains are directly proportional to the file size (as shown for reading or writing a 2.5MB file in Table 10). As the file size increases, the performance costs of `open` and `close` get amortized, leading to better results. This is verified by the total application execution times for different file sizes, as shown in Table 11. As the file size increases, the relative performance cost of DataSafe decreases. For a reasonable file size of 2.5MB, the performance cost of DataSafe is only about 5%.

#### 6.2.2 Hardware Performance

We now evaluate the hardware performance overhead during the Operation phase. The hardware tags can be added to the existing processor datapaths by extending the widths of the registers, buses, and caches (as shown in Figure 5). Alternatively, as shown in Figure 7, they can be a separate and parallel "tag datapath." This clearly shows that the tag propagation logic is done in parallel with instruction execution, so the hardware tag propagation does not incur runtime overhead, as also found in [7].

Since all tag propagation operations can be done in parallel, the only source of hardware runtime overhead involves the output checking of memory store instructions. However, memory stores are not on the critical path, as opposed to memory loads, and normally, stores are delayed waiting in the store buffer queue for an unused cache access cycle. Hence, the output checking can be performed while the memory store instruction sits in the store buffer or the memory write buffer. Output control involves checking against the `mem_map` structure, similar to the operation of a victim buffer [14] or a small fully associative cache, with a different comparator design. The comparator for a victim buffer tests for equality, whereas we test for inequality. Our hardware FPGA implementation of inequality versus equality comparators showed that they had comparable latency.

Therefore, the net effect of performing output checking on store instructions is equivalent to adding a one-cycle delay for store instructions waiting in the store buffer queue. Thus, the output checking has no discernible impact on the overall processor bandwidth (in Instructions Per Cycle, IPC).

#### 6.2.3 Storage Overhead and Complexity

The software complexity of DataSafe amounts to a total of a 50% increase in the hypervisor code base, about half of which was for a suite of encryption/decryption routines for both asymmetric and symmetric cryptography and cryptographic hashing algorithms (Table 12). Each `sdc_list` entry takes up about 26 bytes of memory space, considering a full 64-bit address space. The total storage overhead incurred by the `sdc_list` varies according to the number of entries in the list. In our prototype implementation, 20 entries are typically used, amounting to around half a kilobyte of storage overhead.

For the DataSafe hardware, the main cost comes from the cache and memory overhead for storing the tags. For a 10-bit tag per 64-bit word used in our prototype, the storage overhead is 15.6% for the shadow memory, on-chip caches, and the register file. Existing techniques for more efficient tag management [26] can be applied to reduce storage overhead. The tag storage includes four of the six new (grey) CPU components in Figure 7. The remaining two components (Tag Operation and Output Control) discussed above are low-complexity components.

### 7. Conclusion

We presented the DataSafe architecture for realizing the concept of self-protecting data. DataSafe enables owners of sensitive data to define a security policy for their encrypted data, then allow authorized users and third-party applications to decrypt and use this data, with the assurance that the data's confidentiality policy will be enforced and plaintext data will be prevented from leaking out of these authorized use sessions. Data is protected even if transformed and obfuscated, across applications and user-system transitions. Data is also protected when at rest or in transit by encrypted, policy-attached, DataSafe packages.

DataSafe hardware uses our enhanced dynamic information flow tracking (DIFT) mechanisms to persistently track and propagate data in-use and to perform unbypassable output control to prevent the leaking of confidential data. Because this is done in hardware, performance overhead is minimal. However, unlike previous hardware DIFT solutions, DataSafe's key novelty is in seamlessly supporting flexible security policies expressed in software, bridging the semantic gap between software flexibility and efficient hardware-enforced policies. DataSafe is also application-independent, thus supporting both legacy and new but unvetted applications. This is often a practical necessity since users have no means to modify third-party program executables. More importantly, DataSafe provides the separation of data protection from applications, which we feel is the right architectural abstraction.

Self-protecting data, with unmodified legacy applications, may seem an unreachable goal, but we hope to have shown that it may be possible if we are willing to consider new hardware enhancements with a small trusted software base. We hope that DataSafe provides the architectural foundation over which multi-domain, multi-policy, end-to-end self-protecting data solutions can be further researched for distributed systems.

### 8. Acknowledgements

This work was supported in part by NSF CCF-0917134. We thank the anonymous reviewers and Radu Sion for their comments, which have helped to improve this paper. We also thank Si Chen for helping with the software performance measurements.

### 9. References

[1] M. I. Al-Saleh and J. R. Crandall. On information flow for intrusion detection: what if accurate full-system dynamic information flow tracking was possible? In Proceedings of the Workshop on New Security Paradigms, pages 17–32, 2010.

[2] D. Brumley, J. Caballero, Z. Liang, J. Newsome, and D. Song. Towards automatic discovery of deviations in binary implementations with applications to error detection and fingerprint generation. In Proceedings of USENIX Security Symposium, pages 15:1–15:16, 2007.

[3] D. Champagne and R. B. Lee. Scalable architectural support for trusted software. In Proceedings of the IEEE International Symposium on High Performance Computer Architecture, pages 1–12, 2010.

[4] S. Chhabra, B. Rogers, Y. Solihin, and M. Prvulovic. SecureME: a hardware-software approach to full system security. In Proceedings of the International Conference on Supercomputing, pages 108–119, 2011.

[5] C. Y. Cho, D. Babić, P. Poosankam, K. Z. Chen, E. X. Wu, and D. Song. MACE: model-inference-assisted concolic exploration for protocol and vulnerability discovery. In Proceedings of USENIX Security Symposium, pages 10–10, 2011.

[6] J. Chow, B. Pfa, T. Garfinkel, K. Christopher, and M. Rosenblum. Understanding data lifetime via whole system simulation. In Proceedings of USENIX Security Symposium, pages 22–22, 2004.

[7] M. Dalton, H. Kannan, and C. Kozyrakis. Raksha: a flexible information flow architecture for software security. In Proceedings of the ACM/IEEE International Symposium on Computer Architecture, pages 482–493, 2007.

[8] J. S. Dwoskin and R. B. Lee. Hardware-rooted trust for secure key management and transient trust. In Proceedings of the ACM Conference on Computer and Communications Security, pages 389–400, 2007.

[9] P. Efstathopoulos and E. Kohler. Manageable fine-grained information flow. In Proceedings of the ACM SIGOPS/EuroSys European Conference on Computer Systems, pages 301–313, 2008.

[10] P. Efstathopoulos, M. Krohn, S. VanDeBogart, C. Frey, D. Ziegler, E. Kohler, D. Mazières, F. Kaashoek, and R. Morris. Labels and event processes in the asbestos operating system. In Proceedings of the ACM Symposium on Operating Systems Principles, pages 17–30, 2005.

[11] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song. Dynamic spyware analysis. In Proceedings of the USENIX Annual Technical Conference, pages 18:1–18:14, 2007.

[12] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul, J. A. Calandrino, A. J. Feldman, J. Appelbaum, and E. W. Felten. Lest we remember: cold boot attacks on encryption keys. In Proceedings of USENIX Security Symposium, pages 45–60, 2008.

[13] R. Iannella. Open digital rights language (ODRL), Version 0.5, Aug. 2000. odrl.net/ODRL-05.pdf.

[14] N. P. Jouppi. Improving direct-mapped cache performance by the addition of a small fully-associative cache and prefetch buffers. In Proceedings of the ACM/IEEE International Symposium on Computer Architecture, pages 364–373, 1990.

[15] M. G. Kang, S. McCamant, P. Poosankam, and D. Song. DTA++: Dynamic taint analysis with targeted control-flow propagation. In Proceedings of the Network and Distributed System Security Symposium, 2011.

[16] R. B. Lee, P. C. S. Kwan, J. P. McGregor, J. Dwoskin, and Z. Wang. Architecture for protecting critical secrets in microprocessors. In Proceedings of the ACM/IEEE International Symposium on Computer Architecture, pages 2–13, 2005.

[17] D. Lie, C. A. Thekkath, and M. Horowitz. Implementing an untrusted operating system on trusted hardware. In Proceedings of the ACM Symposium on Operating Systems Principles, pages 178–192, 2003.

[18] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig. TrustVisor: Efficient TCB Reduction and Attestation. In Proceedings of the IEEE Security and Privacy, pages 143–158, 2010.

[19] J. M. McCune, B. J. Parno, A. Perrig, M. K. Reiter, and H. Isozaki. Flicker: an execution infrastructure for TCB minimization. In Proceedings of the ACM SIGOPS/EuroSys European Conference on Computer Systems, pages 315–328, 2008.

[20] V. Nagarajan, H.-S. Kim, Y. Wu, and R. Gupta. Dynamic information flow tracking on multicores. In Workshop on Interaction between Compilers and Computer Architectures, 2008.

[21] J. Park and R. Sandhu. The UCONABC usage control model. ACM Trans. Inf. Syst. Secur., 7(1):128–174, 2004.

[22] F. Qin, C. Wang, Z. Li, H.-s. Kim, Y. Zhou, and Y. Wu. LIFT: A low-overhead practical information flow tracking system for detecting security attacks. In Proceedings of the IEEE/ACM International Symposium on Microarchitecture, pages 135–148, 2006.

[23] A. Sabelfeld and A. C. Myers. Language-based information-flow security. Selected Areas in Communications, IEEE Journal on, 21(1):5–19, Jan. 2003.

[24] L. Singaravelu, C. Pu, H. H¨artig, and C. Helmuth. Reducing TCB complexity for security-sensitive applications: three case studies. In Proceedings of the ACM SIGOPS/EuroSys European Conference on Computer Systems, pages 161–174, 2006.

[25] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G. Kang, Z. Liang, N. James, P. Poosankam, and P. Saxena. BitBlaze: A new approach to computer security via binary analysis. In Proceedings of the International Conference on Information Systems Security. Keynote invited paper., pages 1–25, 2008.

[26] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas. Secure program execution via dynamic information flow tracking. In Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems, pages 85–96, 2004.

[27] M. Tiwari, H. M. Wassel, B. Mazloom, S. Mysore, F. T. Chong, and T. Sherwood. Complete information flow tracking from the gates up. In Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems, pages 109–120, 2009.

[28] Trusted Computing Group. Trusted Platform Module. https://www.trustedcomputinggroup.org/home.

[29] N. Vachharajani, M. J. Bridges, J. Chang, R. Rangan, G. Ottoni, J. A. Blome, G. A. Reis, M. Vachharajani, and D. I. August. RIFLE: An Architectural Framework for User-Centric Information-Flow Security. In Proceedings of the IEEE/ACM International Symposium on Microarchitecture, pages 243–254, 2004.

[30] S. Vandebogart, P. Efstathopoulos, E. Kohler, M. Krohn, C. Frey, D. Ziegler, F. Kaashoek, R. Morris, and D. Mazières. Labels and event processes in the asbestos operating system. ACM Trans. Comput. Syst., 25, December 2007.

[31] XrML 2.0 technical overview, version 1.0, March 2002. www.xrml.org/reference/XrMLTechnicalOverviewV1.pdf.

[32] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda. Panorama: capturing system-wide information flow for malware detection and analysis. In Proceedings of the ACM Conference on Computer and Communications Security, pages 116–127, 2007.

[33] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazières. Making information flow explicit in HiStar. In Proceedings of the Symposium on Operating Systems Design and Implementation, pages 263–278, 2006.