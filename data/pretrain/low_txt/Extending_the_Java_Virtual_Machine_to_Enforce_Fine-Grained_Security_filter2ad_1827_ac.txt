### 6. Implementation

In this section, we detail the implementation specifics of the extensions made to J2ME to achieve the previously described xJ2ME architecture. For the prototype xJ2ME implementation, we utilized Sun's open-source J2ME Reference Implementation (RI) [18]. The choice of the target JVM for extension was based on code availability, without any loss of generality. The presented architecture and prototype are fully portable to any J2ME implementation that adheres to the original security architecture specification.

#### 6.1 Background

Figure 4(a) illustrates the general call hierarchy of a Java virtual machine, including calls to the runtime monitor. To access resources, a MIDlet invokes the Java libraries provided by MIDP. These Java libraries, in turn, call underlying native classes (e.g., C libraries). Calls to the security Runtime Monitor can occur at different levels: i) at the Java MIDP library level (as shown in the figure); ii) at the native library level; or iii) beneath the running VM, intercepting the OS API calls.

We chose to implement the runtime monitor at the Java library level for two primary reasons. First, modifications to Java libraries produce completely portable solutions, whereas both alternative approaches require platform-specific knowledge. Second, Java security checks occur at a higher level of abstraction, reducing implementation complexity. This decision aligns with the original J2ME security architecture, further simplifying the implementation.

#### 6.2 Runtime Enforcement

In the MIDP 2.0 RI, APIs that provide access to resources relevant to our security policy (e.g., SMS, TCP, HTTP, etc.) are implemented as Protocol classes within corresponding packages (e.g., `com.sun.midp.io.j2me.sms.Protocol`). For example, in the case of the TCP stack, the Protocol class implements methods to open/close connections and send/receive data. As shown in Figure 4(b), all resource-specific Protocol classes extend the `ConnectionBaseAdapter` class, which implements a unique method (`checkForPermission`) to check for permission to perform the requested operation. However, in the original J2ME implementation, the policy is not evaluated on every request to access a resource. If the policy grants permission for the duration of the session, the access decision is cached upon the first check and used for subsequent requests.

Our extended security architecture follows the original class interaction model but enhances the functionality of the `ConnectionBaseAdapter` by providing a method to check policy (`checkPolicy`), which is invoked by individual Protocol classes. To support the various policy rule constraint types in our policy model, we also extended the `ConnectionBaseAdapter` class to hold relevant information related to the corresponding resource access requests. For example, in the case of an SMS request, this information includes the recipient's number and the size of the text to be sent. For a TCP connection, this information includes the URL of the connection destination and the amount of data to send.

To make an access decision, the runtime monitor, once invoked through the `checkPolicy` method, needs both the type of the request (permission required) and the identity of the MIDlet making the request (i.e., the subject). In the J2ME architecture, the latter is unknown at the library level. Therefore, in xJ2ME, policy check calls are performed indirectly at the level of the MIDlet scheduler (MIDletSuite and Scheduler classes). As shown in Figure 4(b), it is the `MIDletSuite` class, rather than the respective Protocol class, that invokes the runtime monitor. If access is denied, a `SecurityException` is thrown. Otherwise, the library proceeds and performs the requested operation.

Furthermore, since our policy model relies on historical information, both MIDlet-local and global, no caching of access decisions occurs. Policy evaluation is performed on every resource request. Our evaluation shows that this approach does not introduce significant or even noticeable performance impact.

Since our policy model allows for policy expressions based on historical information, both the global and local system states need to be maintained. This is the role of the newly introduced `HistoryKeeper` class. If a requested permission is granted, the `HistoryKeeper` updates the relevant state variables, but only after the operation for which the permission has been requested is performed successfully. Otherwise, the system state remains unchanged. The policy model presented in Section 6 accounts for these transaction-like properties of the system, enabling the expression of obligation rules conditioned on the occurrence of future events.

##### 6.2.1 Threading Issues

The reliance on historical information to derive access decisions in multi-threaded environments introduces potential race conditions on the system state. All accesses to the system state (local or global) must be implemented in a thread-safe manner. Otherwise, thread interleavings in the state-check and state-update phases may cause policy violations. For illustration, consider two threads, A and B, that both want to send an SMS. Let the constraint on sending SMS allow only one more SMS to be sent. In this case, if thread A is preempted after the state check but before the state update, and thread B is scheduled to perform the state check, both would be allowed to perform the requested operation, causing a clear violation of the policy.

There are two solutions to this problem: thread serialization and locking of relevant state variables. In the current implementation, we opted for the latter. The main reason for this choice is that we did not anticipate nested state variable lock requests, which simplifies the approach. The `HistoryKeeper` locks relevant state variables, introducing potential delays in long-lasting resource access operations, such as blocking send operations over TCP connections. However, considering the scope of the policy model in terms of security-relevant resources, we do not expect this to be a major issue. Solving the thread-safety issue consistently is a top item on our future research agenda.

#### 6.3 Porting MIDP

We have integrated the presented architecture into two open-source MIDP implementations: the MIDP 2.0 Reference Implementation 3 and PhoneME Feature [19]. The modularity of the architecture makes it easy to incorporate into other MIDP distributions, as they all follow the MIDP 2.0 specification [12].

Our implementation currently runs as an emulator on Desktop PCs (both under Linux and Windows OS) and on a PDA running Linux Embedded OS. The MIDP emulator for Desktop PCs comes with an integrated user interface that simulates mobile phones and their user-interaction models, with different skins, one of which is depicted in Figure 5(a). Additionally, the CLDC and MIDP porting guides [20, 21] provide extensive instructions on porting to new platforms.

The PhoneME software is designed to run on or be easily ported to virtually any mobile device. Several ports for Linux Embedded and Windows CE devices are already included in the PhoneME distribution. After modifying the sources, one must rebuild the project and compile it for the target machine. Our extended J2ME prototype is running on a JASJAR I-Mate [22], with 64MB RAM and an Intel Bulverde 520 MHz processor (also known as xScale ARM processor [23]). Apart from the default Windows Mobile operating system, we have installed a dual-boot Familiar Linux version 2.6 [24], loaded from a 252Mb SD Memory Card.

The window manager installed on the devices is Opie [25] version 1.2, an open-source graphical user interface developed as a fork from the commercial application environment Qtopia. Figure 5(b) depicts a snapshot of the device. Available Opie applications include Calendar, Contacts, Drawpad, a multimedia player, and a wide range of games.

#### 6.4 Performance Evaluation

The improvement brought about by our work lies in two dimensions: the flexibility of the security models for mobile computing platforms and the granularity at which policies can be specified and enforced. The flexibility of the model is demonstrated by example, while the policy enforcement mechanisms lend themselves to empirical evaluation.

It is important to note that, due to the J2ME architecture, MIDlets cannot access low-level APIs directly. This implies that by placing runtime monitor hooks within the Java library code (rather than inlining them using bytecode rewriting), we do not open up space for bypassing the security mechanisms.

As Section 4.3 presented, the previous J2ME permission model offered no flexibility in defining and managing permissions, customizing protection domains, and applying per-application policies. In contrast, the proposed security architecture provides extensive flexibility for fine-grained security policies and control over the application's behavior.

The original J2ME security architecture resorts to user consultation on every request for a permission not explicitly allowed in the respective protection domain. The presented fine-grained policy model and security architecture enhance the user experience and the control users have over the behavior of applications running on the system. For example, instead of manually counting the number of SMSs a MIDlet has sent when being prompted for confirmation each time, the user can now rely on an adequate policy.

We used the JASJAR i-mate with the configuration presented in Section 7.3 as a testbed for performance measurements. To measure the overhead introduced by the extra policy check, we conducted the following experiment. We measured the time needed by a MIDlet to send data when 11, 25, and no policies are defined. The number of policies defined on a mobile device is generally bound by the number of resources. Since the number of resources is limited, we expect the number of policies to remain reasonably low, as the values we have chosen for testing.

To avoid noise introduced by network delays, we started the TCP server locally on the JASJAR i-mate. The MIDlet Client establishes a connection to the server and sends a variable amount of data in chunks of 1Kb. This means that the policy check is done for each Kb sent. Once the connection is established, we measured the average time needed by the client to send 10Kb, 25Kb, 50Kb, and 75Kb of data. To compare the performance of the virtual machine, we considered the cases: (1) no policy check is performed (previous MIDP architecture), (2) 11 policy rules to be checked, and (3) 25 policy rules are defined.

As Figure 8 depicts, the average time to send 10Kb of data is 350ms and 75Kb is 2 seconds, in all three cases. The overhead introduced by the policy check is unnoticeable compared to the time needed to perform the security-relevant operation. It turns out that integrating the Java monitor into the virtual machine architecture and having it triggered by the Java MIDP libraries results in excellent performance.

### 7. Conclusions and Future Work

This paper presents a practical extension to the Java virtual machine for mobile devices that supports fine-grained security policies and enforces them through runtime monitoring. By doing so, and by proving an efficient and viable solution, it addresses users' needs for application control and opens the possibility of a new generation of mobile services and applications.

Although the presented model for the Runtime Monitor has been implemented for the MIDP profile, the introduced architectural concepts can be applied to other J2ME profiles as well. An alternative to porting the J2ME Sun RI to run on smartphones and PDAs is to incorporate the runtime monitor into proprietary Java implementations of specific operating systems. Since the extended security architecture is enforced only at the level of Java libraries and modules, the modifications do not affect the KVM nor the operating system. Therefore, the Runtime Monitor should be easily portable to alternative implementations.

In the future, we plan to deploy the prototype on a number of platforms and design graphical paradigms for specifying policies in a user-friendly manner. In addition to policy management tools, we plan to introduce support for defining and handling policies per groups of applications. Furthermore, at the time of writing this paper, we are working on the multi-threading issue outlined in Section 7.

### References

[1] Microsoft Developer Network Library, Windows CD Platform Documentation: Trusted APIs, available from http://msdn2.microsoft.com/en-us/library/ms924486.aspx.
[2] B. Hashii, S. Malabarba, R. Pandey, M. Bishop, Supporting reconfigurable security policies for mobile programs, Computer Networks (Amsterdam, Netherlands: 1999) 33 (1–6) (2000) 77–93.
[3] R. Pandey, B. Hashii, Providing fine-grained access control for mobile programs through binary editing, Tech. Rep. TR-98-08 (1998).
[4] L. Bauer, J. Ligatti, D. Walker, Composing security policies with polymer, in: PLDI ’05: Proceedings of the 2005 ACM SIGPLAN conference on Programming language design and implementation, ACM Press, New York, NY, USA, 2005, pp. 305–314.
[5] P. Paal, Java 2 Platform Micro Edition, in: HUT TML 2000, Tik-110.501 Seminar on Network Security.
[6] A. K. Ghosh, T. M. Swaminatha, Software security and privacy risks in mobile e-commerce, Commun. ACM 44 (2) (2001) 51–57.
[7] F. B. Schneider, Enforceable security policies, ACM Transaction on Information and System Security 3 (1) (2000) 30–50.
[8] M. Hilty, D. Basin, A. Pretschner, On obligations, in: S. de Capitani di Vimercati, P. Syverson, D. Gollmann (Eds.), 10th European Symposium on Research in Computer Security (ESORICS 2005), Vol. 3679 of LNCS, Springer-Verlag, 2005, pp. 98–117.
[9] K. W. Hamlen, G. Morrisett, F. B. Schneider, Computability classes for enforcement mechanisms, ACM Trans. Program. Lang. Syst. 28 (1) (2006) 175–205.
[10] J2ME, Connected Device Configuration (CDC), Sun Microsystems, available from http://java.sun.com/products/cdc/.
[11] J2ME, Connected Limited Device Configuration (CLDC), JSR 30, JSR 139, Sun Microsystems, available from http://java.sun.com/products/cldc/.
[12] J2ME, Mobile Information Device Profile (MIDP), JSR 37, JSR 118, Sun Microsystems, available from http://java.sun.com/products/midp/.
[13] L. Gong, G. Ellison, M. Dageforde, Inside Java 2 platform security architecture, API design, and implementation (2nd Edition), Prentice Hall PTR, May 2003.
[14] M. Debbabi, M. Saleh, C. Talhi, S. Zhioua, Security Evaluation of J2ME CLDC Embedded Java Platform., Journal of Object Technology 5 (2) (2006) 125–154.
[15] JSR 118: Mobile Information Device Profile 2.0, Sun Microsystems, Tech. rep., available from http://jcp.org/en/jsr/detail?id=118.
[16] JSR 248: Mobile Service Architecture Specification, Tech. rep., Java Community ProcessSM, JavaT M Platform, Micro Edition, available from http://jcp.org/en/jsr/detail?id=248 (April 2006).
[17] C. Ribeiro, P. Guedes, SPL: An access control language for security policies with complex constraints, in: Network and Distributed System Security Symposium (NDSS’01), San Diego, California, February 2001.
[18] Free and open source Java, http://www.sun.com/software/opensource/java/.
[19] PhoneME, https://phoneme.dev.java.net/.
[20] Sun Microsystems, Inc, VM Porting Guide. CLDC, Version 1.0.4 (October 2002).
[21] Sun Microsystems, Inc, Porting MIDP (November 2002).
[22] JASJAR i-mate Technical details, available from http://www.imate.com/t-JASJAR technical.aspx.
[23] Intel Corporation. xScale., www.intel.com/design/intelxscale/.
[24] Familiar Linux, http://familiar.handhelds.org/.
[25] Opie - Open Palmtop Integrated Environment Applications and libraries for mobile devices, http://opie.handhelds.org/cgi-bin/moin.cgi/.
[26] Qt/Embedded, http://www.trolltech.com/download/qt/embedded.html.