### Low Deployment in Line with 1697 Base Domains

We next examine the four pinning ("certificate usage") types provided by TLSA. The first two types require the entire certificate chain to pass validation via the root store:
- **Type 0**: A root or intermediate certificate in the chain is pinned.
- **Type 1**: The end-entity certificate is pinned.

The other two pinning types support bypassing root store validation:
- **Type 2**: A new trust anchor (root certificate) that must be used in the validation is pinned.
- **Type 3**: Pinning to an end-entity certificate outside any certificate chain, which can be used, for example, to pin self-signed certificates.

### Findings from SecSpider on September 28, 2017

The findings from SecSpider on September 28, 2017, are generally consistent with our results. Both SecSpider and our study found minor deployment for PKI-chained type 0 (SecSpider: 1% vs. our 2%) and type 1 (SecSpider: 10% vs. our 7%). Type 3 records were the most common (SecSpider: 90% vs. our 79%). For type 2, we found 11%, but SecSpider did not provide data for this type. This should be considered when comparing the relative numbers. Both scans support the conclusion that pinning a self-signed or otherwise non-verifiable certificate is the primary use case for TLSA. The slight differences in the numbers may also be due to different sets of scanned domains, counting methods (zones vs. base domains), and a slight timing offset between measurements.

### Comparison with Related Work

Szalachowski and Perrig [68] investigated the use of CAA and TLSA among the Alexa Top 100k domains in August 2016. They found 15 CAA records, which grew to 102 in our April 2017 scans. In a re-scan on September 4, 2017, we found 216 CAA records on Alexa Top 100k base domains. Given the CAA record's recent introduction and its effectiveness as of September 2017, this growth is plausible.

### TLSA Records

Szalachowski and Perrig reported 48 TLSA records for base and www subdomains, compared to our 18 domains with TLSA records on the base domain in April 2017. In a re-scan on September 4, 2017, we found 36 Alexa Top 100k base domains and 35 www subdomains with TLSA records, totaling 71 records. This indicates that a significant portion of TLSA records come from www subdomains, making these numbers plausible and indicating slow TLSA growth.

### SSL/TLS Version Adoption Over Time

In this section, we provide an overview of SSL/TLS version adoption over the last five years using data from the ICSI Notary [8], a large-scale passive monitoring effort of the TLS ecosystem operating since February 2012. To date, it has observed more than 240.1G connections (221.9G on port 443) containing 14.6M unique certificates.

Figure 5 shows the SSL/TLS versions negotiated in sessions. Even in 2013, there was still significant use of SSL 3 (draft published in 1996). TLS 1.0 (standardized in 1996) was the most commonly used version of TLS when the Notary was established, and this remained true until the end of 2014. TLS 1.1 (standardized in 2006) and TLS 1.2 (standardized in 2008) only gained traction years after their standardization. While TLS 1.1 saw some increased use in 2013, it never gained significant adoption. Our data suggests that most sites directly transitioned from TLS 1.0 to libraries supporting TLS 1.2. This is supported by the fact that Unix/Linux-based servers often use OpenSSL, which introduced support for TLS 1.1 and TLS 1.2 simultaneously in the release of OpenSSL 1.0.1 on March 14, 2012.

### Preparation for This Paper

In preparation for this paper, we implemented support for parsing TLS 1.3 sessions in Bro. This was added to Bro 2.5 (released in November 2016), with some sites running beta-versions of the code before the release. To date, we have encountered more than 7 million connections negotiating different TLS 1.3 drafts. The number of these connections peaked in February 2017 with up to 36k successful connections per day, when Google enabled TLS 1.3 support by default in Chrome 56. These numbers decreased to 1k to 5k successful connections per day after Google disabled support due to compatibility problems [59]. We see the early use of TLS 1.3 as a sign that the community is more security-conscious than it was in 2012, when our measurement began. We will continue monitoring the development and deployment of TLS 1.3.

### Discussion

In this section, we discuss the overall state of HTTPS security based on our measurements. First, we map protection mechanisms against attack vectors and assess the number of protected domains. Next, we relate our findings to the deployment effort and risks to site availability. Furthermore, we provide specific advice to different stakeholders on how to improve the deployment of security extensions. Finally, we discuss the value of employing multiple vantage points and IP protocol versions to assess overall security.

#### Correlation of Security Feature Application

Table 10 shows the conditional probability for a feature \( Y \) to be effectively deployed given that another feature \( X \) is effectively deployed. The lower left triangle of the matrix shows that the deployment of a frequently deployed feature such as SCSV or CT does not imply the use of less common features. The upper right triangle offers more interesting insights, of which we discuss the highlighted cells here:

1. **SCSV and HSTS**: Effective deployment of SCSV is less frequent for domains that use HSTS. Further investigation reveals that 280k domains, roughly equal to the drop-off compared to average deployment, are hosted by the controversial provider Network Solutions/web.com. The hoster apparently enabled HSTS for a large set of domains without support for SCSV and even does not provide valid certificates for those domains. We conclude that the drop-off in SCSV support for domains that use HSTS stems from this large hosting provider who handles SCSV incorrectly and sets HSTS for a large population of likely unused domains.

2. **HPKP, CT, and HSTS**: Domains that use HPKP very frequently also use CT and HSTS headers. We expect users who successfully master the complicated HPKP setup to also deploy other techniques. One reason why CAA and TLSA usage remains relatively low among HPKP users could be the required control over the domainâ€™s DNS server.

3. **CAA and TLSA**: Use of CAA or TLSA is frequently combined and often correlates with HSTS or HPKP deployment. Given the low dissemination of CAA and TLSA, it is not surprising to find their users are aware of other, more common security techniques.

#### Protection Against Attack Vectors

Table 11 shows which HTTPS security extensions protect against specific attack vectors, based on work by Clark and van Oorschot [18], who theoretically evaluated various HTTPS security extensions in 2013. We contribute empirical evidence about their use.

The upper section of Table 11 maps attack vectors to protection mechanisms. Most protection mechanisms defend against exactly one attack vector. Only HPKP and TLSA overlap, protecting against MITM attacks by offering key pinning. In general, multiple protection mechanisms must be combined to protect against all attack vectors. We analyze how many domains are protected with multiple mechanisms, shown in the lower sections of Table 11. We start with the most common protection mechanisms and then successively intersect the set of protected domains with the set of domains protected by the mechanism(s) to the immediate right. Note that we exclude preloading lists from the intersection as they are only one option to provide HSTS and HPKP.

We observe that the number of protected domains drops by one order of magnitude for each of the first four mechanisms. There is also a large drop in HSTS-protected domains when intersecting with SCSV and CT. In fact, only about 7% of all HSTS domains are also protected with SCSV and CT.