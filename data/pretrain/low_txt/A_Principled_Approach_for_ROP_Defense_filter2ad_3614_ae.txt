### Systematic Techniques for Randomizing Instruction Content

Encrypting instruction content is a systematic technique for randomization. However, developing encryption schemes that provide adequate performance for Instruction Set Randomization (ISR) while resisting reverse-engineering attacks has proven challenging. Consequently, recent efforts [33] have shifted away from encryption, instead opting to replace an instruction with a functionally equivalent one or using techniques such as register reassignment.

### Layout Randomization

Address Space Layout Randomization (ASLR) can thwart Return-Oriented Programming (ROP) attacks by making gadget locations unpredictable. Coarse-grained ASLR can often be defeated by leaking a single code or data address. Bhatkar et al. [5] developed fine-grained techniques that randomly reorder all data objects and functions. Purely compile-time permutations are ineffective unless existing binary and patch distribution models are changed, as the attacker would otherwise have access to the same randomized binary as the victim. Bhatkar et al. [5] use compile-time code transformations to generate the information required for load-time randomization. More recent works, such as binary stirring [44] and Instruction-Level Randomization (ILR) [22], can operate without compiler assistance and can reorder basic blocks rather than entire functions.

### JIT-ROP Attacks

JIT-ROP attacks [41], which exploit memory disclosure vulnerabilities to scan code sections, can defeat fine-grained randomization by discovering gadgets at runtime. Several recent works [13, 11] have developed defenses against JIT-ROP. Generally, randomization techniques can effectively block unintended gadgets, but disrupting the use of gadgets beginning at legitimate indirect control-flow targets (i.e., targets permitted by Control-Flow Integrity (CFI) schemes) is difficult. This is because programs store such targets in memory, making them vulnerable to information disclosure. Most binary instrumentation techniques do not change the original values of code pointers, so information disclosure is not even necessary with these schemes. Additionally, the targeted code has legitimate invokers that expect certain semantics, including the contents of registers and caller-callee conventions, which significantly limits the scope of what can be achieved using randomization without breaking legitimate functionality.

### Shadow Stack Schemes

Shadow stack schemes [16, 8] were initially proposed as a defense against stack smashing attacks. However, they only checked legitimate returns, allowing ROP attacks using unintended returns. CFI enforcement, which prevents the use of unintended instructions, provides one way to block this attack vector. Another approach, used in DBT-based techniques (e.g., ROPdefender [15]), is to instrument all returns before their execution.

The benefits of shadow stacks for strengthening CFI [2] and defeating ROP have long been recognized. However, practical deployment has been limited by the prevalence of non-standard returns that violate shadow stack checks. While RAD [8] addressed cases like longjmp and signals, ROPdefender [15] identified two other non-standard uses: C++ exceptions and lazy-binding of calls to shared library functions. They handled these by manually identifying instructions that save a return address on the stack and pushing a copy onto the shadow stack. Thus, their runtime policy follows the return capability model used in our approach. A drawback of ROPdefender was its significant runtime overhead. Zhang et al. [50] discuss how dynamic binary instrumentation techniques, while performing well on SPEC benchmarks, tend to perform poorly on large, real-world applications. Using static instrumentation, Zhang et al. achieved significantly better performance than ROPdefender.

Lockdown [35] combines shadow stack and CFI in dynamic instrumentation, focusing on reducing runtime overhead. Unlike our approach, they do not focus on improving compatibility. On common benchmarks, our overhead is about half of theirs.

Dang et al. surveyed existing shadow stack systems and designed a "parallel shadow stack" scheme [12] to eliminate the need for shadow stack pointer save and restore. They avoided register clobbers, applied peephole optimizations, and achieved great performance. However, this comes with some trade-offs on security. In fact, StackDefiler [10] describes an attack that leaks shadow stack addresses. In contrast, we maintain strong security by enforcing CFI, protecting RCAP-stack, and precisely managing return capabilities.

### Contributions

The primary contributions of this paper over previous works are:
1. The development of a systematic approach for identifying and handling non-standard returns without the need for manual effort.
2. Demonstrating that this approach can handle complex and low-level binaries.
3. Achieving low overheads.

### Binary vs. Source-Code Based Defenses

Most techniques discussed above, including bounds-checking [24, 45, 46, 3, 29, 20, 26], fine-grained CFI [43, 30, 31], and many fine-grained randomization techniques [5, 11], are based on compilers and operate only on source code. These approaches struggle to protect low-level code that uses inline assembly and third-party code available only in binary form. Security is often dependent on the "weakest link," and even one unprotected module can render the defense bypassable. In contrast, binary-based defenses extend to all code, regardless of the programming language or compiler.

### Conclusions

In this paper, we presented a principled approach for ROP defense. Our approach accurately infers and enforces program-intended control flow, breaking one mandatory requirement for ROP: repeatedly subverting control flows. We developed static analysis techniques and utilized static binary instrumentation for enforcement. Experimental evaluations show that our approach provides precise control flow guarantees, yet remains efficient and compatible with real-world applications.

### References

[1] HT editor 2.0.20 - buffer overflow (ROP PoC). https://www.exploit-db.com/exploits/22683/.
[2] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-flow integrity principles, implementations, and applications. ACM TISSEC, 2009.
[3] P. Akritidis, M. Costa, M. Castro, and S. Hand. Baggy bounds checking: An efficient and backwards-compatible defense against out-of-bounds errors. In USENIX Security, 2009.
[4] E. G. Barrantes, D. H. Ackley, T. S. Palmer, D. Stefanovic, and D. D. Zovi. Randomized instruction set emulation to disrupt binary code injection attacks. In ACM CCS, 2003.
[5] S. Bhatkar, R. Sekar, and D. DuVarney. Efficient techniques for comprehensive protection from memory error exploits. In USENIX Security, 2005.
[6] N. Carlini and D. Wagner. ROP is still dangerous: Breaking modern defenses. In USENIX Security, 2014.
[7] Y. Cheng, Z. Zhou, M. Yu, X. Ding, and R. H. Deng. ROPecker: A generic and practical approach for defending against ROP attacks. In NDSS, 2014.
[8] T. Chiueh and F. Hsu. RAD: A compile-time solution to buffer overflow attacks. In ICDCS, 2001.
[9] T. Chiueh and M. Prasad. A binary rewriting defense against stack based overflows. In USENIX ATC, 2003.
[10] M. Conti, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen, M. Negro, M. Qunaibit, and A. Sadeghi. Losing control: On the effectiveness of control-flow integrity under stack attacks. In CCS, 2015.
[11] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A. Sadeghi, S. Brunthaler, and M. Franz. Readactor: Practical code randomization resilient to memory disclosure. In IEEE S&P, 2015.
[12] T. H. Dang, P. Maniatis, and D. Wagner. The performance cost of shadow stacks and canaries. In ASIACCS, 2015.
[13] L. Davi, C. Liebchen, A. Sadeghi, K. Z. Snow, and F. Monrose. Isomeron: Code randomization resilient to (just-in-time) return-oriented programming. In NDSS, 2015.
[14] L. Davi, A. Sadeghi, D. Lehmann, and F. Monrose. Stitching the gadgets: On the ineffectiveness of coarse-grained control-flow integrity protection. In USENIX Security, 2014.
[15] L. Davi, A. Sadeghi, and M. Winandy. ROPdefender: A detection tool to defend against return-oriented programming attacks. In ASIACCS, 2011.
[16] M. Frantzen and M. Shuey. Stackghost: Hardware facilitated stack protection. In USENIX Security, 2001.
[17] E. Göktas, E. Athanasopoulos, H. Bos, and G. Portokalidis. Out of Control: Overcoming control-flow integrity. In IEEE S&P, 2014.
[18] E. Göktas, E. Athanasopoulos, M. Polychronakis, H. Bos, and G. Portokalidis. Size does matter: Why using gadget-chain length to prevent code-reuse attacks is hard. In USENIX Security, 2014.
[19] N. Hasabnis. Automatic Synthesis of Instruction Set Semantics and its Applications. PhD thesis, Stony Brook University, 2015.
[20] N. Hasabnis, A. Misra, and R. Sekar. Light-weight bounds checking. In CGO, 2012.
[21] N. Hasabnis and R. Sekar. Automatic generation of assembly to IR translators using compilers. In AMAS-BT, 2015.
[22] J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. Davidson. ILR: Where’d my gadgets go? In IEEE S&P, 2012.
[23] D. Jang, Z. Tatlock, and S. Lerner. SafeDispatch: Securing C++ virtual calls from memory corruption attacks. In NDSS, 2014.
[24] R. W. M. Jones, P. H. J. Kelly, M. C, and U. Errors. Backwards-compatible bounds checking for arrays and pointers in C programs. In AADEBUG, 1997.
[25] G. S. Kc, A. D. Keromytis, and V. Prevelakis. Countering code-injection attacks with instruction-set randomization. In ACM CCS, 2003.
[26] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song. Code-pointer integrity. In OSDI, 2014.
[27] longld. Payload already inside: Data reuse for ROP exploits. https://media.blackhat.com/bh-us-10/whitepapers/Le/BlackHat-USA-2010-Le-Paper-Payload-already-inside-data-reuse-for-ROP-exploits-wp.pdf.
[28] C. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: Building customized program analysis tools with dynamic instrumentation. In PLDI, 2005.
[30] B. Niu and G. Tan. Modular control-flow integrity. In PLDI, 2014.
[31] B. Niu and G. Tan. RockJIT: Securing just-in-time compilation using modular control-flow integrity. In CCS, 2014.
[32] K. Onarlioglu, L. Bilge, A. Lanzi, D. Balzarotti, and E. Kirda. G-Free: Defeating return-oriented programming through gadget-less binaries. In ACSAC, 2010.
[33] V. Pappas, M. Polychronakis, and A. D. Keromytis. Smashing the gadgets: Hindering return-oriented programming using in-place code randomization. In IEEE S&P, 2012.
[34] V. Pappas, M. Polychronakis, and A. D. Keromytis. Transparent ROP exploit mitigation using indirect branch tracing. In USENIX Security, 2013.
[35] M. Payer, A. Barresi, and T. R. Gross. Fine-grained control-flow integrity through binary hardening. In DIMVA, 2015.
[36] M. Payer, T. Hartmann, and T. R. Gross. Safe loading - a foundation for secure execution of untrusted programs. In IEEE S&P, 2012.
[37] A. Prakash, X. Hu, and H. Yin. vfGuard: Strict protection for virtual function calls in COTS C++ binaries. In NDSS, 2015.
[38] P. Saxena, R. Sekar, and V. Puranik. Efficient fine-grained binary instrumentation with applications to taint-tracking. In CGO, 2008.
[39] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A. Sadeghi, and T. Holz. Counterfeit object-oriented programming: On the difficulty of preventing code reuse attacks in C++ applications. In IEEE S&P, 2015.
[40] H. Shacham. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In CCS, 2007.
[41] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A. Sadeghi. Just-In-Time code reuse: On the effectiveness of fine-grained address space layout randomization. In IEEE S&P, 2013.
[42] L. Szekeres, M. Payer, T. Wei, and R. Sekar. Eternal war in memory. S&P Magazine, 2014.
[43] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, U. Erlingsson, L. Lozano, and G. Pike. Enforcing forward-edge control-flow integrity in GCC & LLVM. In USENIX Security, 2014.
[44] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary stirring: Self-randomizing instruction addresses of legacy x86 binary code. In CCS, 2012.
[45] W. Xu, D. C. DuVarney, and R. Sekar. An efficient and backwards-compatible transformation to ensure memory safety of C programs. In FSE, 2004.
[46] Y. Younan, P. Philippaerts, L. Cavallaro, R. Sekar, F. Piessens, and W. Joosen. PAriCheck: an efficient pointer arithmetic checker for C programs. In ASIACCS, 2010.
[47] B. Zeng, G. Tan, and G. Morrisett. Combining control-flow integrity and static analysis for efficient and validated data sandboxing. In CCS, 2011.
[48] C. Zhang, C. Song, K. Z. Chen, Z. Chen, and D. Song. VTint: Defending virtual function tables’ integrity. In NDSS, 2015.
[49] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou. Practical control flow integrity and randomization for binary executables. In IEEE S&P, 2013.
[50] M. Zhang, R. Qiao, N. Hasabnis, and R. Sekar. A platform for secure static binary instrumentation. In VEE, 2014.
[51] M. Zhang and R. Sekar. Control flow integrity for COTS binaries. In USENIX Security, 2013.
[52] M. Zhang and R. Sekar. Control flow and code integrity for COTS binaries: An effective defense against real-world ROP attacks. In ACSAC, 2015.