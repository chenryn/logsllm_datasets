### Direct Identification of Software Packages in Cloud Environments

Direct identification of software packages running on other cores in a cloud environment, using cache side-channels, has been demonstrated by [26, 27]. This method requires local presence, does not scale well, and cannot be applied to archived datasets. However, it can recover not only the library but also its specific version.

### Historical Analysis of the TLS Ecosystem

Measurements and analyses of the TLS ecosystem have a long history, with large-scale scans beginning in 2010 with the EFF SSL Observatory project [2]. Subsequent research has focused on both valid [13, 16, 17, 19, 20] and invalid certificates [12]. The growing popularity of Certificate Transparency (CT) servers now provides access to certificates that are otherwise unreachable through IP address-based scanning [37]. Researchers typically examine certificate properties, such as validity periods, and the certificate chains extracted from TLS handshakes. Cryptographic algorithms and key lengths have also been analyzed [15, 25], revealing that over 85% of current keys use certain cryptographic configurations.

### Conclusions

A wide-scale, accurate measurement of the popularity of cryptographic libraries is essential for security analysis of the Internet ecosystem, such as evaluating resilience against security bugs. Until now, such measurements have been based on proxy metrics, like the popularity of web server implementations. We propose a measurement method based on statistical inference, which matches the observed distribution of keys on the Internet with reference distributions of RSA public keys extracted from cryptographic libraries. Our method does not require active communication with server implementations, making it applicable even when proxy information is unavailable, such as for SSH client keys, where direct scanning of clients is not feasible. This analysis is possible due to recently discovered biases in RSA public key generation [36].

### Results

Our results show an increasing reliance on OpenSSL, with its share growing from 56% to 70% between 2010 and 2017, as observed from keys used by TLS servers. Among the current Alexa top 1 million domains, OpenSSL's prevalence reaches almost 85%, and it accounts for more than 96% of client-side SSH keys used by GitHub users. The usage trends of Microsoft libraries remain stable, with a share of around 20% for TLS servers and 10% for the Alexa top 1 million domains. The GnuPG Libgcrypt library and similar implementations account for 85% of all PGP keys. CT logs provide a different ratio of libraries for recently added certificates: OpenSSL is down to 60%, Microsoft is at only 3.5% (likely due to the longer validity of certificates), and other libraries account for more than 35% (compared to less than 10% in IPv4 TLS scans).

This method can also capture short-term events by examining incremental datasets. For example, we observed that many certificates from specific libraries were periodically submitted to CT logs, coinciding with the validity period of Let's Encrypt certificates. Our measurement also revealed inconsistencies in historical datasets, caused by a bug in the scanning software of Project Sonar, which led to the omission of more than a million Microsoft servers from IPv4 TLS scans over 18 months.

### Acknowledgments

We would like to thank our colleagues for their valuable discussions, especially Marek Sys and Stanislav Katina. We acknowledge the support of the Czech Science Foundation under project GA16-08565S. Access to the computing and storage resources of the National Grid Infrastructure MetaCentrum (LM2010005) is greatly appreciated. Vashek Matyas thanks Red Hat Czech and CyLab, Carnegie Mellon University, for providing a supportive sabbatical environment during part of his work on this paper.

### References

[1] DSA-1571-1 openssl – predictable random number generator, 2008. [cit. 2017-09-20]. Available from https://www.debian.org/security/2008/dsa-1571.
[2] The EFF SSL Observatory, 2010. [cit. 2017-09-20]. Available from https://www.eff.org/observatory.
[3] Censys TLS Alexa Top 1 Million Scan, 2015. [cit. 2017-09-20]. Available from https://censys.io/data/443-https-tls-alexa_top1mil.
[4] Censys TLS Full IPv4 443 Scan, 2015. [cit. 2017-09-20]. Available from https://censys.io/data/443-https-tls-full_ipv4/historical.
[5] LZ4 Extremely Fast Compression algorithm, 2015. [cit. 2017-09-20]. Available from http://www.lz4.org/.
[6] Rapid 7 Sonar SSL full IPv4 scan, 2015. [cit. 2017-09-20]. Available from https://scans.io/study/sonar.ssl.
[7] Debian quality assurance: Popularity contest statistics, 2017. [cit. 2017-09-20]. Available from https://qa.debian.org/popcon.php.
[8] Albrecht, M. R., Degabriele, J. P., Hansen, T. B., and Paterson, K. G. A surfeit of SSH cipher suites. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (2016), CCS ’16, ACM, pp. 1480–1491.
[9] Barbulescu, M., Stratulat, A., Traista-Popescu, V., and Simion, E. RSA weak public keys available on the Internet. In International Conference for Information Technology and Communications (2016), Springer-Verlag, pp. 92–102.
[10] Bernstein, D. J. Cache-timing attacks on AES, 2005. [cit. 2017-09-20]. Preprint available at https://cr.yp.to/antiforgery/cachetiming-20050414.pdf.
[11] Brumley, D., and Boneh, D. Remote timing attacks are practical. In Computer Networks (2005), vol. 48, Elsevier, pp. 701–716.
[12] Chung, T., Liu, Y., Choffnes, D., Levin, D., Maggs, B. M., Mislove, A., and Wilson, C. Measuring and applying invalid SSL certificates: The silent majority. In Proceedings of the 2016 ACM on Internet Measurement Conference (2016), ACM, pp. 527–541.
[13] Clark, J., and van Oorschot, P. C. SoK: SSL and HTTPS: Revisiting past challenges and evaluating certificate trust model enhancements. In IEEE Symposium on Security and Privacy (2013), IEEE, pp. 511–525.
[14] Batch-GCDing Github SSH Keys, 2015. [cit. 2017-09-20]. Available from https://cryptosense.com/batch-gcding-github-ssh-keys/.
[15] Durumeric, Z., Adrian, D., Mirian, A., Bailey, M., and Halderman, J. A. A search engine backed by internet-wide scanning. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (2015), ACM, pp. 542–553.
[16] Durumeric, Z., Bailey, M., and Halderman, J. A. An internet-wide view of internet-wide scanning. In Proceeding of USENIX Security Symposium (2014), pp. 65–78.
[17] Durumeric, Z., Kasten, J., Adrian, D., Halderman, J. A., Bailey, M., Li, F., Weaver, N., Amann, J., Beekman, J., Payer, M., et al. The matter of Heartbleed. In Proceedings of the 2014 Conference on Internet Measurement Conference (2014), ACM, pp. 475–488.
[18] Durumeric, Z., Kasten, J., Bailey, M., and Halderman, J. A. Analysis of the HTTPS certificate ecosystem. In Proceedings of the 13th Internet Measurement Conference (2013).
[19] Durumeric, Z., Kasten, J., Bailey, M., and Halderman, J. A. Analysis of the HTTPS certificate ecosystem. In Proceedings of the 2013 ACM Internet Measurement Conference (2013), ACM, pp. 291–304.
[20] Felt, A. P., Barnes, R., King, A., Palmer, C., Bentzel, C., and Tabriz, P. Measuring HTTPS adoption on the web. In 26th USENIX Security Symposium (2017), USENIX Association, pp. 1323–1338.
[21] Georgiev, M., Iyengar, S., Jana, S., Anubhai, R., Boneh, D., and Shmatikov, V. The most dangerous code in the world: validating SSL certificates in non-browser software. In Proceedings of the 2012 ACM Conference on Computer and Communications Security (2012), ACM, pp. 38–49.
[22] Gustafsson, J., Overier, G., Arlitt, M., and Carlsson, N. A first look at the CT landscape: Certificate Transparency logs in practice. In Proceedings of the 18th Passive and Active Measurement Conference (2017), Springer-Verlag, pp. 87–99.
[23] Hastings, M., Fried, J., and Heninger, N. Weak keys remain widespread in network devices. In Proceedings of the 2016 ACM on Internet Measurement Conference (2016), ACM, pp. 49–63.
[24] Heninger, N., Durumeric, Z., Wustrow, E., and Halderman, J. A. Mining your Ps and Qs: Detection of widespread weak keys in network devices. In Proceeding of USENIX Security Symposium (2012), vol. 8.
[25] The ICSI Certificate Notary, 2017. [cit. 2017-09-20]. Available from https://notary.icsi.berkeley.edu/.
[26] Inci, M. S., Gulmezoglu, B., Eisenbarth, T., and Sunar, B. Co-location detection on the cloud. In International Workshop on Constructive Side-Channel Analysis and Secure Design (2016), Springer-Verlag, pp. 19–34.
[27] Irazoqi, G., IncI, M. S., Eisenbarth, T., and Sunar, B. Know thy neighbor: crypto library detection in cloud. Proceedings on Privacy Enhancing Technologies 2015, 1 (2015), 25–40.
[28] Kaminsky, A. Parallel Java 2 library (PJ2), 2017. [cit. 2017-09-20]. Available from https://www.cs.rit.edu/~ark/pj2.shtml.
[29] Klafter, R., and Swanson, E. Evil 32, 2015. [cit. 2017-09-20]. Available from https://evil32.com.
[30] Lawson, C. L., and Hanson, R. J. Solving Least Squares Problems. SIAM, 1995.
[31] Lazar, D., Chen, H., Wang, X., and Zeldovich, N. Why does cryptographic software fail?: a case study and open problems. In Proceedings of 5th Asia-Pacific Workshop on Systems (2014), ACM, pp. 1–7.
[32] Mironov, I. Factoring RSA Moduli II. [cit. 2017-09-20]. Available from https://windowsontheory.org/2012/05/17/factoring-rsa-moduli-part-ii/.
[33] NetCraft April 2017 Web Server Survey, 2017. [cit. 2017-09-20]. Available from https://news.netcraft.com/archives/2017/04/21/april-2017-web-server-survey.html.
[34] NetCraft operating system detection, 2017. [cit. 2017-09-20]. Available from http://uptime.netcraft.com/accuracy.html#os.
[35] Nmap Remote OS Detection, 2017. [cit. 2017-09-20]. Available from https://nmap.org/book/osdetect.html.
[36] Svenda, P., Nemec, M., Sekan, P., Kvasnovsky, R., Formanek, D., Komarek, D., and Matyas, V. The million-key question — Investigating the origins of RSA public keys. In Proceeding of USENIX Security Symposium (2016), pp. 893–910.
[37] VanderSloot, B., Amann, J., Bernhard, M., Durumeric, Z., Bailey, M., and Halderman, J. A. Towards a complete view of the certificate ecosystem. In Proceedings of the 2016 ACM on Internet Measurement Conference (2016), ACM, pp. 543–549.

### Additional Results

Table 3 shows the sources considered in the analysis, along with the relevant biases. Figure 8 illustrates the number of keys attributed to different cryptographic libraries in certificates from the Alexa Top 1 million domains, collected by Censys. The number of OpenSSL keys is rising, while the percentage of keys from Microsoft implementations is much smaller than in general TLS scans.

Previous analyses of Internet-wide TLS scans [13, 16, 17, 19] compared various properties of certificates. Valid and invalid certificates were compared by [12], showing that the majority of certificates found by scans are invalid and have interesting properties.

We compared self-signed certificates to certificates signed by third parties in historical datasets from the HTTPS Ecosystem and Rapid7 Project Sonar. Figure 9 highlights a significant difference in the keys from these certificates. Notably, Microsoft keys are found less frequently in self-signed certificates than OpenSSL keys. As explained in Section 4.2, the decrease in the number of certificates between 11/2013 and 06/2015 is due to an improper implementation of the TLS v1.2 handshake used by Project Sonar.

**Figure 8: More domains from the Alexa Top 1M list use OpenSSL (Group 7) now than in 2015. Note that the number of keys does not sum to 1M in the original dataset collected by Censys. Some websites do not support HTTPS [20] or the specific cipher-suite used by the Censys scanner.**

**Figure 9: Comparison of library popularity for keys coming from certificates signed by a third party (top) and self-signed certificates (bottom). Self-signed certificates are dominated by OpenSSL. More than 50% of OpenSSL keys observed in 2012 were found in self-signed certificates. For OpenSSL, the number of not self-signed certificates rose faster than the number of self-signed certificates, and significantly more OpenSSL certificates are now signed by a third party. Fewer than 25% of Microsoft keys were found in self-signed certificates in most scans. Self-signed certificates are implicitly not trusted by web browsers. Only a subset of the not self-signed certificates have certificate chains leading to a browser-trusted root CA.**

**Figure 10: Estimated number of keys for different groups over time.**

**Version**
- 2.0rc1, 3.9.0, 3.10.2
- 1.5.6, 1.11.29, 2.1.0
- 1.53
- 1.54
- 20050328
- 3.4.3, 3.4.3.1
- 5.6.0, 5.6.3, 5.6.5
- 1.7p7
- 2.0.1
- 1.6.0, 1.6.5, 1.7.6
- 1.6.0 FIPS, 1.6.5 FIPS
- 1.7.6 FIPS
- 1.17
- 2.2.1, 2.4.2
- 2.0
- 3.2, 3.3
- 0.9.7, 1.0.2g, 1.0.2k, 1.1.0e
- 2.0.12, 2.0.14
- 4
- 4 FIPS
- 0.10.0, 1.3.9
- 0.67

**Source**
- Open-source libraries
- Botan
- Bouncy Castle (Java)
- Bouncy Castle (Java)
- Cryptix JCE
- cryptlib
- Crypto++
- FlexiProvider
- GNU Crypto
- Gemalto
- Infineon
- NXP
- Oberthur
- OpenSSL
- OpenSSL FIPS
- PGPSDK
- PolarSSL
- PuTTY
- SunRsaSign OpenJDK
- mbedTLS