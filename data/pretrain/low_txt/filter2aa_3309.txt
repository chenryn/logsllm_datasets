# MIFARE Classic: A Comprehensive Analysis of Security Vulnerabilities

## Author
Chen-Mou Cheng  
Department of Electrical Engineering  
National Taiwan University

## Introduction
- **MIFARE Classic** is a widely deployed RFID technology owned by NXP Semiconductors, Inc.
  - Over 1 billion cards sold
  - Main uses include public transportation ticketing systems and access control systems
  - Reverse-engineered in late 2008 by European hackers
- In this presentation, I will share our first-hand experience attacking a real MIFARE Classic system.

## Acknowledgments
- K. Nohl, D. Evans, and H. Plötz. "Reverse-engineering a cryptographic RFID tag." USENIX Security Symposium 2008.
- F. D. Garcia, P. van Rossum, R. Verdult, and R. W. Schreur. "Wirelessly pickpocketing a MIFARE Classic card." IEEE Symposium on Security and Privacy 2009.
- M.-Y. Chih, J.-R. Shih, B.-Y. Yang, J. Ding, and C.-M. Cheng. "MIFARE Classic: Practical attacks and defenses." CISC 2010.

## Outline
- Overview of MIFARE Classic
  - Memory layout
  - Communication protocol
  - Authentication protocol
  - CRYPTO-1 stream cipher
- Principal attack technique: known-plaintext attack
- Reader-based attacks
- Sniffer-based attacks
- Concluding remarks

## Jargon of the Trade
- MIFARE Classic is based on the ISO/IEC 14443 Type A 13.56 MHz contactless smart card standard.
  - A reader is referred to as a PCD (Proximity Coupling Device).
  - A card/tag is referred to as a PICC (Proximity Integrated Circuit Card).
  - These terms will be used interchangeably with readers, cards, and tags.

## Memory Layout
- **Block Structure:**
  - Data: 16 bytes
  - Value: 4 bytes
  - Sector tail: Access control
- **Sector and Block Details:**
  - Sector number
  - Block number
  - Content (16 Bytes)
  - Example:
    - Block 0: UID, BCC, Manufacturer (Read Only)
    - Blocks 1-2: Data or Value
    - Block 3: Key A, Access condition, U, Key B
- **MIFARE Classic 1K and 4K Memory Layout:**
  - 1 KB: 64 blocks, 16 sectors, 4 blocks per sector
  - 4 KB: 256 blocks, 40 sectors, 4 or 12 blocks per sector

## Communication and Authentication
1. Anti-collision (UID)
2. Authentication (key A/B)
3. Memory operations
   - Read
   - Write
   - Increment, decrement, restore
   - Halt

## Cryptographic Primitive: CRYPTO-1 Stream Cipher
- **Structure:**
  - 48-bit LFSR
  - Non-linear filter
- **Keystream Generation:**
  - Input: Sector key, Nt ⊕ UID, Nr
  - Output: Keystream bits

## Principal Attack Technique
- **Known-plaintext attack on stream cipher:**
  - Ciphertext = plaintext XOR keystream
  - Ciphertext can be easily obtained via programmable reader or sniffer
  - If you know the plaintext, you can determine the keystream
  - With enough keystream bits and computational power, the internal state can be recovered.

## Main Vulnerabilities
- **Short Key Length:**
  - CRYPTO-1’s 48-bit key is too short, making it vulnerable to brute-force attacks.
  - Time to break can range from a few seconds to a few days, depending on the available information.
- **Information Leakage:**
  - Vulnerability in parity computation
  - Insufficient entropy in nonce
  - Weaknesses in the non-linear filter function
  - Flaws in the authentication protocol
  - Efficient sniffer-based attacks are possible due to these vulnerabilities.

## Parity and Nonce
- **Parity Computation:**
  - "Buy eight get one free" effect
  - 32-bit nonce function has only 16 bits of entropy
- **Nonce Generation:**
  - Generating polynomial and left shift operations
  - Lower and higher bits manipulation

## Equipment
- **Sniffer:**
  - Good antenna
  - USRP for A/D conversion and sampling
  - Raw sample transfer via USB
  - DSP on PC
- **Reader:**
  - PCD & PICC Emulator
  - MIFARE Classic chip

## Attacks
- **PCD-based:**
  - Offline brute-force search
- **Sniffer-based:**
  - Online attacks
- **Cost Comparison:**
  - PCD offline vs. Sniffer online
  - Time and device requirements

## How to Obtain the First Key
- **Steps:**
  1. Continuously request authentication
  2. Collect 4 to 6 traces
  3. Brute-force search the 2^48 key space
- **Example:**
  - Request and response traces
  - Information leakage analysis

## GPU Search
- **Process:**
  - Nt, Nr, Ar, and error code traces
  - Keystream generation and rollback
  - Secret key candidate validation
- **Efficiency:**
  - Need at least four traces to determine the unique secret key
  - Running five or six traces is practical and efficient

## Reader Attack: Rest Keys
- **Nested Authentication:**
  - Authenticate with known keys
  - Guess unknown keys
  - Decrypt and validate keys

## Inverting Filter Function
- **Non-linear Filter:**
  - Odd and even bit processing
  - Time-memory trade-off techniques

## GNURadio-based Sniffer
- **Elements:**
  1. Antenna
  2. USRP for A/D and sampling
  3. USB for raw sample transfer
  4. DSP on PC
- **Processing:**
  - Demodulation
  - Decoding
  - Protocol analysis

## Command Set
- **Transmission Types:**
  - V (INC, DEC, RES): Change value block
  - W (WRITE): Write data block
  - A (AUTH): Authenticate sector
  - R (READ): Read block
- **Example Trace:**
  - WRITE command sequence
  - Authentication and data transfer

## Concluding Remarks
- **Fixing MIFARE Classic:**
  - Under current attacks, MIFARE Classic is effectively a memory card.
  - Defenses needed against:
    - Unauthorized content alteration
    - Replay attacks
    - Clone attacks
  - Similar to detecting counterfeit banknotes
- **Defense Mechanism:**
  - Time-synchronized key ID and digital signatures
  - Protecting data integrity using TTS (Time-based Token System)

## Questions or Comments?
Thank you!  
If you are considering deploying MIFARE Classic for access control, we strongly advise against it.