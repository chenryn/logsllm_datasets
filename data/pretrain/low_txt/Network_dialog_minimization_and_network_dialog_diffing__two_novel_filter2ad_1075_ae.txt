# Network Dialog Minimization and Differencing

## Table 3: Dialog Clustering Results
| Algorithm | Precision | Recall | F-Measure |
|-----------|-----------|--------|------------|
| PAM       | 100%      | 64.8%  | 78.6%      |
| Aggressive| 100%      | 78.0%  | 87.6%      |

## 5. Dialog Minimization and Replay

### 5.1 Overview
The goal of dialog minimization is to produce a simplified, minimized version of a dialog that achieves the same goal with minimal traffic. This is different from simply replaying the original dialog in a new setting. Other works have focused on automatically identifying and adjusting state-dependent fields (e.g., cookies and IP addresses) in the traffic to be replayed, using network-based [11] and dynamic binary analysis [27] approaches. Our approach, however, aims to minimize a dialog or compare two dialogs, assuming the protocol grammar is available. If the grammar is unknown, protocol reverse-engineering techniques can be used to recover it [6, 10, 24, 37], along with the state machine [9] and application session structure [19].

### 5.2 Related Work
- **ShieldGen [12]**: Generates vulnerability data patches by modifying an attack and replaying it to an oracle. NDM operates on a complete dialog rather than a single packet.
- **Drive-by Download Malware Collection**: Honeyclients are a popular method for collecting malware distributed through drive-by downloads [36]. We develop drive-by download milkers that periodically replay a previous dialog for the same goal. These milkers are more lightweight but less flexible than honeyclients, being specific to an exploit kit. Our infrastructure [26] combines honeyclients and drive-by download milkers to achieve both flexibility and efficiency.
- **Cookie Replay**: Session hijacking through cookie replay has been known for over a decade [14, 30]. Attacks on WiFi have been demonstrated [17], and tools are available to exploit it [1, 4]. It has also been noted that cookie replay still works after a user logs out [4, 17]. Many techniques have been proposed to prevent session hijacking attacks [2, 3, 13, 14, 30]. Our work does not discover new attacks but shows how dialog minimization and replaying tools can efficiently and conveniently automate the periodic visiting of a large number of sites to determine the duration for which cookie replays work, measuring the current state of these issues.
- **Traffic Clustering**: Several works perform malware clustering based on their traffic [16, 31, 33, 38]. Most cluster traffic at the packet level [16, 31, 33]. The most related work is Nemean [38], which generates semantics-aware network signatures, clustering similar connections and sessions using request/response types and byte distribution features. Our work proposes a dialog alignment technique that finds a mapping between dialogs to maximize similarity.

## 6. Methodology

### 6.1 Similarity Matrix
The first step is to build the similarity matrix by computing the similarity between each pair of dialogs. For benign dialogs, the average similarity is 0.96, and the minimum is 0.80, indicating that our metric captures their similarity despite non-deterministic changes. For dialogs from different sites, the average similarity is 0.16, and the maximum is 0.73 (between Facebook and Twitter, which have only one RRP), showing that the metric properly differentiates between similar and different dialogs. For malicious dialogs, the average similarity between dialogs from the same family is 0.74, and the minimum is 0.41. The average similarity for dialogs from different families is 0.25, and the maximum is 0.73 (between ZeroAccess and Zbot).

### 6.2 Clustering Algorithms
We use two clustering algorithms:
- **Partitioning Around Medoids (PAM) [20]**: Takes the similarity matrix and the number of clusters \( k \) as input. We run it with different \( k \) values, selecting the one that maximizes the silhouette width, an internal measure of clustering quality [20].
- **Aggressive Clustering**: Starts with zero clusters and iterates through the list of dialogs. For each dialog, it checks if its similarity is greater than 0.8 with any dialog already in a cluster. If the comparison holds only for dialogs in the same cluster, it adds the dialog to that cluster. If it holds for dialogs in multiple clusters, it merges those clusters and adds the current dialog to the merged cluster. Otherwise, it creates a new cluster for it.

To select the 0.8 threshold, we measured the clustering accuracy on a subset of the dataset for each threshold value between [0,1] with a step of 0.1 [15]. A threshold of 0.8 achieved the best results.

### 6.3 Clustering Results
Table 3 shows the clustering results for benign and malicious dialogs using both algorithms. For benign dialogs, both algorithms output 30 clusters, each containing 2 dialogs for the same website, achieving perfect precision and recall. For malware dialogs, the precision is perfect, but the recall is 64.8%-78.0%, respectively. This is because the same malware family is split into multiple clusters. There are two main reasons for this:
1. **Configuration Differences**: Zbot is a malware kit, and ZeroAccess is an affiliate program. Owners/affiliates may configure the malware differently, creating differences captured by our metric.
2. **Short, Polymorphic Requests**: Our metric fails to detect similarity for short dialogs with highly polymorphic requests. This is why signature generation tools use traffic clustering only as a first step before analyzing other information like content and endpoints [31, 33]. Given its perfect accuracy, our dialog clustering could be integrated as a first step in these tools.

## 7. Conclusion
In this work, we introduced the problems of network dialog minimization and network dialog differencing. We proposed network delta debugging, the first technique to solve network dialog minimization, and a novel technique for network dialog differencing, which aligns two dialogs by finding a mapping that maximizes similarity.

## 8. Acknowledgments
This research was started while M. Zubair Raﬁque was an intern at the IMDEA Software Institute. It was partially funded by the Research Fund KU Leuven, the EU FP7 project NESSoS (FP7-ICT No.256980), and the Prevention of and Fight against Crime Programme of the European Union (B-CCENTRE). It was also partially supported by the Spanish Government through Grant TIN2012-39391-C04-01 and a Juan de la Cierva Fellowship for Juan Caballero. All opinions, findings, and conclusions or recommendations expressed herein are those of the authors and do not necessarily reflect the views of the sponsors.

## 9. References
[1] Firesheep. http://codebutler.com/firesheep.
[2] B. Adida. Sessionlock: Securing web sessions against eavesdropping. In International World Wide Web Conference, 2008.
[3] A. Bittau, M. Hamburg, M. Handley, D. Mazieres, and D. Boneh. The case for ubiquitous transport-level encryption. In USENIX Security Symposium, 2010.
[4] S. Bowne. Cookie re-use in Office 365 and other web services, 2013. http://samsclass.info/123/proj10/cookie-reuse.htm#steps.
[5] J. Caballero, C. Grier, C. Kreibich, and V. Paxson. Measuring pay-per-install: The commoditization of malware distribution. In USENIX Security Symposium, 2011.
[6] J. Caballero, H. Yin, Z. Liang, and D. Song. Polyglot: Automatic extraction of protocol message format using dynamic binary analysis. In ACM Conference on Computer and Communications Security, 2007.
[7] Y.-C. Cheng, U. Hölzle, N. Cardwell, S. Savage, and G. M. Voelker. Monkey see, monkey do: A tool for TCP tracing and replaying. In USENIX Annual Technical Conference, 2004.
[8] C. Y. Cho, J. Caballero, C. Grier, V. Paxson, and D. Song. Insights from the inside: A view of botnet management from infiltration. In USENIX Workshop on Large-Scale Exploits and Emergent Threats, 2010.
[9] P. M. Comparetti, G. Wondracek, C. Kruegel, and E. Kirda. Prospex: Protocol specification extraction. In IEEE Symposium on Security and Privacy, 2009.
[10] W. Cui, J. Kannan, and H. J. Wang. Discoverer: Automatic protocol description generation from network traces. In USENIX Security Symposium, 2007.
[11] W. Cui, V. Paxson, N. C. Weaver, and R. H. Katz. Protocol-independent adaptive replay of application dialog. In Network and Distributed System Security Symposium, 2006.
[12] W. Cui, M. Peinado, H. J. Wang, and M. Locasto. ShieldGen: Automatic data patch generation for unknown vulnerabilities with informed probing. In IEEE Symposium on Security and Privacy, 2007.
[13] I. Dacosta, S. Chakradeo, P. Traynor, and M. Ahamad. One-time cookies: Preventing session hijacking attacks with disposable credentials. ACM Transactions on Internet Technology, 12(1), 2012.
[14] K. Fu, E. Sit, K. Smith, and N. Feamster. Dos and don'ts of client authentication on the web. In USENIX Security Symposium, 2001.
[15] R. Gras, E. Suzuki, F. Guillet, and F. Spagnolo. Statistical Implicative Analysis. Springer, 2008.
[16] G. Gu, R. Perdisci, J. Zhang, and W. Lee. Botminer: Clustering analysis of network traffic for protocol and structure independent botnet detection. In USENIX Security Symposium, 2008.
[17] Hamster, 2007. http://blog.erratasec.com/2007/08/sidejacking-with-hamster_05.html#.UwdUz4ZDuKk.
[18] S.-S. Hong and S. F. Wu. On interactive internet traffic replay. In International Symposium on Recent Advances in Intrusion Detection, 2006.
[19] J. Kannan, J. Jung, V. Paxson, and C. E. Koksal. Semi-automated discovery of application session structure. In Internet Measurement Conference, 2006.
[20] L. Kaufman and P. J. Rousseeuw. Finding Groups In Data: An Introduction To Cluster Analysis, volume 344. John Wiley & Sons, 2009.
[21] S. Keates. Designing user interfaces for ordinary users in extraordinary circumstances: A keyboard-only web-based application for use in airports. Universal Access in the Information Society, 12(2), 2013.
[22] H. W. Kuhn. The Hungarian method for the assignment problem. Naval Research Logistics Quarterly, 2(1-2), 1955.
[23] C. Leita, K. Mermoud, and M. Dacier. ScriptGen: An automated script generation tool for honeyd. In Annual Computer Security Applications Conference, 2005.
[24] Z. Lin, X. Jiang, D. Xu, and X. Zhang. Automatic protocol format reverse engineering through context-aware monitored execution. In Network and Distributed System Security Symposium, 2008.
[25] G. Misherghi and Z. Su. HDD: Hierarchical delta debugging. In International Conference on Software Engineering, 2006.
[26] A. Nappa, M. Z. Raﬁque, and J. Caballero. Driving in the cloud: An analysis of drive-by download operations and abuse reporting. In SIG SIDAR Conference on Detection of Intrusions and Malware & Vulnerability Assessment, 2013.
[27] J. Newsome, D. Brumley, J. Franklin, and D. Song. Replayer: Automatic protocol replay by binary analysis. In ACM Conference on Computer and Communications Security, 2006.
[28] Ostinato. http://goo.gl/oo5rmn.
[29] OSVDB. OpenSIPStack OpenSBC.exe null pointer dereference remote DoS, 2012. http://osvdb.org/86607.
[30] J. S. Park and R. Sandhu. Secure cookies on the web. Internet Computing, IEEE, 4(4), 2000.
[31] R. Perdisci, W. Lee, and N. Feamster. Behavioral clustering of HTTP-based malware and signature generation using malicious network traces. In Symposium on Networked System Design and Implementation, 2010.
[32] M. Z. Raﬁque, M. A. Akbar, and M. Farooq. Evaluating DoS attacks against SIP-based VoIP systems. In Globecom, 2009.
[33] M. Z. Raﬁque and J. Caballero. FIRMA: Malware clustering and network signature generation with mixed network behaviors. In International Symposium on Recent Advances in Intrusion Detection, 2013.
[34] SIPp. http://sipp.sourceforge.net/.
[35] Tcpreplay. http://tcpreplay.synfin.net/.
[36] Y.-M. Wang, D. Beck, X. Jiang, R. Roussev, C. Verbowski, S. Chen, and S. King. Automated web patrol with Strider Honeymonkeys: Finding web sites that exploit browser vulnerabilities. In Network and Distributed System Security Symposium, 2006.
[37] G. Wondracek, P. M. Comparetti, C. Kruegel, and E. Kirda. Automatic network protocol analysis. In Network and Distributed System Security Symposium, 2008.
[38] V. Yegneswaran, J. T. Gifﬁn, P. Barford, and S. Jha. An architecture for generating semantics-aware signatures. In USENIX Security Symposium, 2005.
[39] A. Zeller and R. Hildebrandt. Simplifying and isolating failure-inducing input. IEEE Trans. Softw. Eng., 28(2), 2002.