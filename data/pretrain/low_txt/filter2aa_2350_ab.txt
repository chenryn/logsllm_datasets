### Event ID 7937: Command `dropper.exe` is Started
- **Log Disabled by Default**: Events are exclusive to PowerShell 3.0 or greater.
- **Executed Cmdlets, Scripts, or Commands (No Arguments)**

© Mandiant, A FireEye Company. All rights reserved.

### Remoting
#### Event ID 6: Creating WSMan Session
- **Connection String**: `192.168.1.1/wsman?PSVersion=2.0`
- **Start of Remoting Session (Client Host)**

#### Event ID 400: Engine State Changed
- **From**: None
- **To**: Available
- **HostName**: ServerRemoteHost

#### Event ID 403: Engine State Changed
- **From**: Available
- **To**: Stopped
- **HostName**: ServerRemoteHost
- **Start & Stop of Remoting Session (Accessed Host)**

© Mandiant, A FireEye Company. All rights reserved.

### Remoting (Accessed Host)
#### Event ID 81: Processing Client Request
- **Operation**: CreateShell

#### Event ID 169: User Authenticated
- **User**: CORP\MattH
- **Authentication Method**: NTLM

#### Event ID 134: Sending Response
- **Operation**: DeleteShell
- **Who Connected via Remoting**
- **Timeframe of Remoting Activity**

© Mandiant, A FireEye Company. All rights reserved.

### Remoting (Accessed Host)
#### Event ID 32850: Creating a Server Remote Session
- **UserName**: CORP\JohnD

#### Event ID 32867: Received Remoting Fragment
- **Payload Length**: 752
- **Payload Data**: `0x020000000200010064D64FA51E7C78418483DC...`

#### Event ID 32868: Sent Remoting Fragment
- **Payload Length**: 202
- **Payload Data**: `0xEFBBBF3C4F626A2052656649643D2230223E3...`

- **Who Connected via Remoting**
- **Encoded Contents of Remoting I/O**

© Mandiant, A FireEye Company. All rights reserved.

### PS Analytic Log: Encoded I/O
- **Command**: `Invoke-Command {Get-ChildItem C:\}`

### PS Analytic Log: Decoded Input
- **Command**: `Invoke-Command {Get-ChildItem C:\}`

### PS Analytic Log: Decoded Output
- **Command**: `Invoke-Command {Get-ChildItem C:\}`

© Mandiant, A FireEye Company. All rights reserved.

### Logging via PowerShell Profiles
- **Add Code to Global Profile**
- **Loads with Each Local PS Session**
- **Use `Start-Transcript` Cmdlet**
- **Overwrite Default Prompt Function**
- **Limitations**:
  - Will not log remoting activity
  - Can launch PowerShell without loading profiles

**Profile Path**: `%windir%\system32\WindowsPowerShell\v1.0\profile.ps1`

© Mandiant, A FireEye Company. All rights reserved.

### Logging via AppLocker
- **Set Audit or Enforce Script Rules**
- **Captures User and Script Path**

© Mandiant, A FireEye Company. All rights reserved.

### PowerShell 3.0: Module Logging
- **Configuration Path**:
  - Computer Configuration → Administrative Templates → Windows Components → Windows PowerShell → Turn on Module Logging
- **Solves (Almost) All Our Logging Problems!**

© Mandiant, A FireEye Company. All rights reserved.

### Module Logging Example: File Listing
- **Parameter Binding (Get-ChildItem)**:
  - `name="Filter"; value="*.txt"`
  - `name="Recurse"; value="True"`
  - `name="Path"; value="c:\temp"`
- **Parameter Binding (Select-String)**:
  - `name="Pattern"; value="password"`
  - `name="InputObject"; value="creds.txt"`

- **Command Name**: `Get-ChildItem`
- **User**: CORP\MHastings
- **Parameter Binding (Out-Default)**:
  - `name="InputObject"; value="C:\temp\creds.txt:2:password: secret"`
  - `name="InputObject"; value="C:\temp\creds.txt:5:password: test"`

- **Event ID 4103**: Microsoft-Windows-PowerShell/Operational
- **Command**: `Get-ChildItem c:\temp -Filter *.txt -Recurse | Select-String password`
- **Logged Upon Command Execution and Output**

© Mandiant, A FireEye Company. All rights reserved.

### Module Logging Example: Invoke-Mimikatz
- **Via Remoting**
- **Detailed “Per-Command” Logging**
- **Mimikatz Output in Event Log**

© Mandiant, A FireEye Company. All rights reserved.

### PowerShell Persistence
- **Common Mechanisms**:
  - Registry "autorun" keys
  - Scheduled tasks
  - User "startup" folders
- **Detection Methods**:
  - Autorun review
  - Registry timeline analysis
  - File system timeline analysis
  - Event log review

**Scenario**: Attacker configures the system to load malicious PowerShell code upon startup or user logon.

© Mandiant, A FireEye Company. All rights reserved.

### Persistence via WMI
- **Set-WmiInstance**:
  - **Namespace**: `root\subscription`
  - **EventFilter**: Filter name, event query
  - **CommandLineEventConsumer**: Consumer name, path to `powershell.exe`
  - **FilterToConsumerBinding**: Filter name, consumer name

- **Example Queries**:
  - Run within minutes of startup: `SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325`
  - Run at 12:00: `SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_LocalTime' AND TargetInstance.Hour = 12 AND TargetInstance.Minute = 00 GROUP WITHIN 60`

- **Event Consumers**:
  - Launch `PowerShell.exe` when triggered by filter
  - Evil PS code loaded from: Stored in user or system-wide `profile.ps1`

- **Example CommandLineTemplate**:
  ```powershell
  Set-WmiInstance -Namespace "root\subscription" -Class 'CommandLineEventConsumer' -Arguments @{ name='TotallyLegitWMI'; CommandLineTemplate="$($Env:SystemRoot)\System32\WindowsPowerShell\v1.0\powershell.exe -NonInteractive"; RunInteractively='false'}
  ```

© Mandiant, A FireEye Company. All rights reserved.

### Enumerating WMI Objects with PowerShell
- **Commands**:
  - `Get-WMIObject –Namespace root\Subscription -Class __EventFilter`
  - `Get-WMIObject -Namespace root\Subscription -Class __EventConsumer`
  - `Get-WMIObject -Namespace root\Subscription -Class __FilterToConsumerBinding`

### PS WMI Evidence: File System
- **WBEM Repository Files Changed** (common)
- **Global or Per-User `profile.ps1` Changed** (if used to store code)
- **Strings in `objects.data`**

### PS WMI Evidence: Registry
- **Key**: `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WBEM\ESS\//./root/CIMV2\Win32ClockProvider`
- **Key Last Modified**: `06/04/14 01:30:03 UTC`
- **Created Only When Setting a Time-Based WMI Filter** (many other types of triggers may be used)

### PS WMI Evidence: Other Sources
- **SysInternals AutoRuns v12**
- **Memory**: WMI filter & consumer names
- **Processes**:
  - `svchost.exe` (WinMgmt service)
  - `WmiPrvse.exe`
- **Event Logs**: WMI Trace

### Conclusions
- **Refer to Whitepaper**
- **Prefetch for `PowerShell.exe`**
- **Local Execution Only**
- **Scripts in Accessed File List**
- **Registry**: `ExecutionPolicy` setting
- **Network Traffic Analysis** (WinRM)
- **Ports**: 5985 (HTTP) / 5986 (HTTPS)
- **Payload Always Encrypted**
- **Identify Anomalous Netflows**

### Lessons Learned
- **Upgrade and Enable Module Logging if Possible**
- **Baseline Legitimate PowerShell Usage**
- **ExecutionPolicy Setting**
- **Script Naming Conventions, Paths**
- **Remoting Enabled?**
- **Which Users?**
- **Common Source/Destination Systems**
- **Recognize Artifacts of Anomalous Usage**

### Acknowledgements
- **Matt Graeber**
- **Joseph Bialek**
- **Chris Campbell**
- **Lee Holmes**
- **David Wyatt**
- **David Kennedy**
- **Josh Kelley**
- **All the Other PowerShell Authors, Hackers, and Researchers!**

© Mandiant, A FireEye Company. All rights reserved.

### Questions?
- **Contact**: @ryankaz42, @HastingsVT

© Mandiant, A FireEye Company. All rights reserved.