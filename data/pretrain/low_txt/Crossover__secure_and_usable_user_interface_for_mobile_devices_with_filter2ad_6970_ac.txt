### Table 1: Smallest y Coordinate Reported by Various Android Devices
| Device | Smallest y Coordinate (mm) |
|--------|---------------------------|
| Device A | 0.4 |
| Device B | 0.5 |
| Device C | 0.9 |
| Device D | 0.6 |

**Note:** The last column shows the size in millimeters.

### Observations
The data also indicates that the values are slightly worse for the runs with the thumb. This is not surprising, as the thumb covers a larger screen area and can therefore be positioned less accurately compared to the index finger. At a size of 1.2 mm, the hit rates for the thumb and index finger more or less match, indicating a reasonable size for the SLI (Screen-Like Indicator). Interestingly, further increasing the SLI size seems to cause the hit rates to drop slightly. We attribute this to the exhaustion of the participants, who become less concentrated as the SLI size increases.

### Key Results from the Experiment
- There is a lower bound for the widget size to be touchable.
- To achieve reasonable hit rates, the size of the SLI must not be smaller than 1.2 mm.

### Third Experiment: Influence of SLI Size on Perceptibility under Different Environmental Conditions
In this experiment, we measured the influence of the SLI size on perceptibility under different environmental conditions. We used three primary colors (red, green, and blue) for the SLI and generated two additional sets of colors by reducing either the saturation or the brightness to 50%. This created darker shades of red, green, and blue, and a set with a pastel-like tint. Each of these nine colors was used in a random order to tint the SLI, which was shown to the participants for one second. Participants then had to decide which color the SLI had and rate their subjective recognition.

#### Experimental Setup
- **Locations:** Standard office environment and outdoors during noon with direct sunlight.
- **SLI Sizes:** 0.4 mm, 1.0 mm, and 1.5 mm.
- **Illumination Levels:**
  - Office: ~300 lux
  - Outdoors: ~40,000 lux
- **Display Brightness:** Set to 100 percent.

#### Indoor Results
We expected no issues with color perception in the office environment. Indeed, even with the smallest SLI size, the error rate was less than 5 percent. All participants reported being able to easily recognize the different colors. Errors were mainly due to confusion between a color and its darker or lighter shade.

#### Outdoor Results
When the experiment was repeated outdoors, the results changed significantly. With the smallest SLI size of 0.4 mm, the error rate exceeded 50 percent. Darker shades of red, green, and blue were almost indistinguishable. Increasing the SLI size to 1.0 mm and 1.5 mm improved the situation, with the error rate dropping to 25 percent, though still higher than the indoor results. Participants could recognize the correct hue but struggled to distinguish between different color shades. All participants had difficulty recognizing the dark shaded colors.

**Figure 9:**
- **(a) Indoor:** All colors can be distinguished.
- **(b) Outdoor:** Reflections and bright light make it hard to distinguish colors.

### Summary of Results from All Experiments
- There is a lower bound for the widget size to be touchable, which is about 0.6 mm.
- The SLI must not be smaller than 1.5 mm to be recognizable under both indoor and outdoor conditions.
- The brightness of colors should be as high as possible to make them easily distinguishable under bright light.

### Conclusion
The SLI must not be smaller than 1.5 mm. As described in Section 4.2, the SLI may display the name of the active VM. However, a height of 1.5 mm is too small to make the text label readable. Given the trade-off between providing maximum screen size to VMs and the SLI size, we recommend a minimum SLI size of 2.5 mm.

### Security Analysis
Crossover mitigates the threats described in Section 3 through several mechanisms:
- **Framebuffers Isolation:** Each VM receives its own framebuffer, ensuring no shared memory pages. The microkernel isolates different memory regions, preventing screen scraping attacks.
- **SLI Implementation:** The SLI acts as a trusted path, displaying information about the active VM. It is drawn into its own framebuffer, making it inaccessible and untamperable by VMs.
- **Input Event Multiplexing:** Only the active VM receives input events, thwarting wiretapping attacks by background VMs.
- **DoS Attack Prevention:** VMs cannot prevent switches, as they are unaware of their state and switches are initiated by Crossover.

### Related Work
- **m-gui [13]:** Displays a trusted bar and securely multiplexes the hardware framebuffer. Does not address device-global functions.
- **VMWare’s MVP [8]:** Type-2 hypervisor for Android, allowing one secure guest VM. No secure GUI implemented.
- **Gudeth et al. [11]:** Recommends bare metal virtualization for mobile security. Does not address a secure UI.
- **Cells [7]:** Uses Linux namespaces to create multiple VPs. No indicator for the active VM.
- **Qubes OS [14]:** Desktop OS with isolation at the UI level. Assigns AppVMs to security domains.
- **Feske [15]:** Addresses QoS and secure client-side window management on desktops.
- **Blackberry Z10 [16]:** OS based on QNX microkernel, separating private and business environments via Unix permissions. No UI distinction.

### Future Work
- **Lifecycle Management:** Extend functionality to manage the lifecycle of multiple VMs, addressing the always-on culture.
- **Accessibility:** Improve accessibility, such as making the two-finger swipe gesture suitable for one-armed people and supporting users without eyesight.
- **3D Graphics Security:** Investigate how to securely handle hardware-accelerated 3D graphics and GPU multiplexing.

### Acknowledgements
We thank our participants for their patience and contributions. Special thanks to Jean Wolter, Janis Danisevskis, Jan Nordholz, Adam Lackorzynski, and Alexander Warg for their help in implementing earlier versions of the system. This research was funded in part by the BMWF grant 01IS12032.

### References
[1] Coverity Inc. Coverity Scan 2010 Open Source Integrity Report. 2010.
[2] Barrera, D., Kayacik, H. G., van Oorschot, P. C., & Somayaji, A. A methodology for empirical analysis of permission-based security models and its application to Android. In CCS '10. 2010.
[3] Enck, W., Octeau, D., Mcdaniel, P., & Chaudhuri, S. A Study of Android Application Security. In USENIX Security Symposium. 2011.
[4] Bickford, J., O’Hare, R., Baliga, A., Ganapathy, V., & Iftode, L. Rootkits on smart phones: attacks, implications and opportunities. In HotMobile '10. 2010.
[5] Rains, J. Bring Your Own Device: Hot or Not? 2012.
[6] Bugiel, S., Davi, L., Dmitrienko, A., Heuser, S., Sadeghi, A.-R., & Shastry, B. Practical and Lightweight Domain Isolation on Android. In SPSM '11. 2011.
[7] Andrus, J., Dall, C., Van’t Hof, A., Laadan, O., & Nieh, J. Cells: A Virtual Mobile Smartphone Architecture. In SOSP '11. 2011.
[8] Barr, K., Bungale, P., Deasy, S., Gyuris, V., Hung, P., Newell, C., Tuch, H., & Zoppis, B. The VMware Mobile Virtualization Platform: Is That a Hypervisor in Your Pocket? SIGOPS Oper. Syst. Rev. 2010.
[9] Lange, M., Liebergeld, S., Lackorzynski, A., Warg, A., & Peter, M. L4Android: A Generic Operating System Framework. 2011.
[10] Heiser, G. Virtualizing embedded systems: why bother? In DAC '11. 2011.
[11] Gudeth, K., Pirretti, M., Hoeper, K., & Buskey, R. Delivering Secure Applications on Commercial Mobile Devices: the Case for Bare Metal Hypervisors. In SPSM '11. 2011.
[12] Niemietz, M. & Schwenk, J. UI Redressing Attacks on Android Devices. 2012.
[13] Selhorst, M., Stüble, C., Feldmann, F., & Gnaida, U. Towards a trusted mobile desktop. In TRUST '10. 2010.
[14] Rutkowska, J. & Wojtczuk, R. Qubes OS Architecture. 2012.
[15] Feske, N. Securing Graphical User Interfaces. PhD thesis, TU Dresden. 2009.
[16] Antukh, A. Blackberry z10 research primer - dissecting blackberry 10 – an initial analysis. Technical report. 2013.
[17] iPass. The iPass Global Mobile Workforce Report. Technical report. 2012.