以下是经过优化后的文本，使其更加清晰、连贯和专业：

---

### TCP 和 DCCP 的有限状态机 (FSM)

**图 9: TCP NEURALCRF+R 和 LINEARCRF+R FSM**  
这两个 FSM 是相同的。

- **CLOSED**
- **被动打开**：超时
- **主动打开**：SYN!
- **LISTEN**
- **SYN SENT**
- **SYN RECEIVED**：SYN? SYN! ACK!
- **ESTABLISHED**：ACK!
- **FIN WAIT 1**：FIN!
- **CLOSE WAIT**：FIN? ACK!
- **FIN WAIT 2**：ACK?
- **CLOSING**：FIN!
- **LAST ACK**：FIN? ACK!
- **TIME WAIT**：ACK?

用户命令以蓝色显示；可以将其视为代码中的注释（对逻辑无影响）。

**图 10: TCP 和 DCCP 的标准 FSM**

- **TCP 标准 FSM**
  - CLOSED
  - LISTEN
  - SYN SENT
  - SYN RECEIVED
  - ESTABLISHED
  - FIN WAIT 1
  - CLOSE WAIT
  - FIN WAIT 2
  - CLOSING
  - LAST ACK
  - TIME WAIT

- **DCCP 标准 FSM**
  - CLOSED
  - active := False
  - 超时
  - LISTEN
  - DCCP_REQUEST?
  - DCCP_RESPONSE!
  - active := True
  - DCCP_REQUEST!
  - DCCP_RESET? 或 (DCCP_SYNC? DCCP_RESET!) 或 超时
  - REQUEST
  - DCCP_RESPONSE?
  - DCCP_ACK!
  - PARTOPEN
  - DCCP_DATAACK!
  - DCCP_DATA!
  - RESPOND
  - DCCP_ACK? 或 DCCP_DATAACK?
  - DCCP_DATA! 或 DCCP_DATAACK! 或 DCCP_ACK? 或 DCCP_DATA? 或 DCCP_DATAACK?
  - OPEN
  - 超时，然后可选地 DCCP_RESET!
  - CLOSING
  - DCCP_RESET?
  - CLOSEREQ
  - TIMEWAIT
  - (DCCP_CLOSE? DCCP_RESET!) 或作为 ε-转换。

### 参考文献

[32] J. Devlin, M.-W. Chang, K. Lee, and K. Toutanova, “BERT: Pre-training of deep bidirectional transformers for language understanding,” in Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers). Minneapolis, Minnesota: Association for Computational Linguistics, Jun. 2019, pp. 4171–4186. [Online]. Available: https://aclanthology.org/N19-1423

[33] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, Ł. Kaiser, and I. Polosukhin, “Attention is all you need,” in Advances in neural information processing systems, 2017, pp. 5998–6008.

[34] S. Gururangan, A. Marasović, S. Swayamdipta, K. Lo, I. Beltagy, D. Downey, and N. A. Smith, “Don’t stop pretraining: Adapt language models to domains and tasks,” in Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics. Association for Computational Linguistics, Jul. 2020, pp. 8342–8360.

[35] J. D. Lafferty, A. McCallum, and F. C. N. Pereira, “Conditional random fields: Probabilistic models for segmenting and labeling sequence data,” in Proceedings of the Eighteenth International Conference on Machine Learning, ser. ICML ’01. San Francisco, CA, USA: Morgan Kaufmann Publishers Inc., 2001, p. 282–289.

[36] S. Hochreiter and J. Schmidhuber, “Long short-term memory,” Neural computation, vol. 9, no. 8, pp. 1735–1780, 1997.

[37] G. Lample, M. Ballesteros, S. Subramanian, K. Kawakami, and C. Dyer, “Neural architectures for named entity recognition,” in Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies. Association for Computational Linguistics, Jun. 2016, pp. 260–270.

[38] X. Ma and E. Hovy, “End-to-end sequence labeling via bi-directional LSTM-CNNs-CRF,” in Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers). Berlin, Germany: Association for Computational Linguistics, Aug. 2016, pp. 1064–1074.

[39] M. Gardner, J. Grus, M. Neumann, O. Tafjord, P. Dasigi, N. F. Liu, M. Peters, M. Schmitz, and L. S. Zettlemoyer, “AllenNLP: A deep semantic natural language processing platform,” in Proceedings of Workshop for NLP Open Source Software (NLP-OSS), 2017.

[40] A. Pnueli and R. Rosner, “On the synthesis of a reactive module,” in POPL, 1989.

[41] I. Segura-Bedmar, P. Martínez, and M. Herrero-Zazo, “SemEval-2013 task 9: Extraction of drug-drug interactions from biomedical texts (DDIExtraction 2013),” in Second Joint Conference on Lexical and Computational Semantics (*SEM), Volume 2: Proceedings of the Seventh International Workshop on Semantic Evaluation (SemEval 2013). Atlanta, Georgia, USA: Association for Computational Linguistics, Jun. 2013, pp. 341–350.

[42] A. C. Müller and S. Behnke, “pystruct: learning structured prediction in python,” Journal of Machine Learning Research, vol. 15, no. 59, pp. 2055–2060, 2014. [Online]. Available: http://jmlr.org/papers/v15/mueller14a.html

[43] M. Frank and P. Wolfe, “An algorithm for quadratic programming,” Naval Research Logistics Quarterly, vol. 3, no. 1-2, pp. 95–110, 1956.

[44] T. Wolf, L. Debut, V. Sanh, J. Chaumond, C. Delangue, A. Moi, P. Cistac, T. Rault, R. Louf, M. Funtowicz, J. Davison, S. Shleifer, P. von Platen, C. Ma, Y. Jernite, J. Plu, C. Xu, T. Le Scao, S. Gugger, M. Drame, Q. Lhoest, and A. Rush, “Transformers: State-of-the-art natural language processing,” in EMNLP: System Demonstrations, Oct. 2020.

[45] A. Paszke, S. Gross, F. Massa, A. Lerer, J. Bradbury, G. Chanan, T. Killeen, Z. Lin, N. Gimelshein, L. Antiga, A. Desmaison, A. Köpf, E. Yang, Z. DeVito, M. Raison, A. Tejani, S. Chilamkurthy, B. Steiner, L. Fang, J. Bai, and S. Chintala, “Pytorch: An imperative style, high-performance deep learning library,” in NeurIPS, 2019.

[46] I. Loshchilov and F. Hutter, “Decoupled weight decay regularization,” in ICLR, 2019.

[47] Apache Software Foundation, “openNLP Natural Language Processing Library,” [Online]. Available: http://opennlp.apache.org/.

[48] S. Small, J. Mason, F. Monrose, N. Provos, and A. Stubblefield, “To catch a predator: A natural language approach for eliciting malicious payloads.” in USENIX Security Symposium, 2008, pp. 171–184.

[49] Y. Dong, W. Guo, Y. Chen, X. Xing, Y. Zhang, and G. Wang, “Towards the detection of inconsistencies in public security vulnerability reports,” in 28th USENIX Security Symposium (USENIX Security 19), 2019, pp. 869–885.

[50] X. Feng, X. Liao, X. Wang, H. Wang, Q. Li, K. Yang, H. Zhu, and L. Sun, “Understanding and securing device vulnerabilities through automated bug report analysis,” in SEC’19: Proceedings of the 28th USENIX Conference on Security Symposium, 2019.

[51] W. Ding and H. Hu, “On the safety of IoT device physical interaction control,” in ACM CCS. Association for Computing Machinery, 2018.

[52] Y. Tian, N. Zhang, Y.-H. Lin, X. Wang, B. Ur, X. Guo, and P. Tague, “SmartAuth: User-centered authorization for the internet of things,” in USENIX Security. Vancouver, BC: USENIX Association, Aug. 2017, pp. 361–378.

[53] S. Jero, M. L. Pacheco, D. Goldwasser, and C. Nita-Rotaru, “Leveraging textual specifications for grammar-based fuzzing of network protocols,” in Innovative Applications of Artificial Intelligence (IAAI), 2019.

[54] J. Zhai, Y. Shi, M. Pan, G. Zhou, Y. Liu, C. Fang, S. Ma, L. Tan, and X. Zhang, “C2S: Translating natural language comments to formal program specifications,” in Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, 2020, pp. 25–37.

[55] S. Zhang, J. Zhai, L. Bu, M. Chen, L. Wang, and X. Li, “Automated generation of LTL specifications for smart home IoT using natural language,” in 2020 Design, Automation & Test in Europe Conference & Exhibition (DATE). IEEE, 2020, pp. 622–625.

[56] J. Yen, T. Lévaï, Q. Ye, X. Ren, R. Govindan, and B. Raghavan, “Semi-automated protocol disambiguation and code generation,” in SIGCOMM, 2021.

[57] A. Boldyreva, R. Lychev, S. Jero, and C. Nita-Rotaru, “How secure and quick is QUIC: Security and performance analyses,” in IEEE Symposium on Security and Privacy, 2015, iETF/IRTF Applied Networking Research Prize 2016.

[58] K. L. McMillan and L. D. Zuck, “Formal specification and testing of QUIC,” in SIGCOMM, 2019, pp. 227–240.

[59] R. J. Kate, Y. W. Wong, and R. Mooney, “Learning to transform natural to formal languages,” in AAAI, 2005.

[60] T. Kwiatkowski, L. Zettlemoyer, S. Goldwater, and M. Steedman, “Inducing probabilistic CCG grammars from logical form with higher-order unification,” in Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing. Association for Computational Linguistics, Oct. 2010, pp. 1223–1233.

[61] R. Alur and S. Tripakis, “Automatic synthesis of distributed protocols,” ACM SIGACT News, vol. 48, no. 1, pp. 55–90, 2017.

[62] R. Alur, M. Martin, M. Raghothaman, C. Stergiou, S. Tripakis, and A. Udupa, “Synthesizing finite-state protocols from scenarios and requirements,” in Haifa Verification Conference. Springer, 2014, pp. 75–91.

[63] B. Bonakdarpour and S. S. Kulkarni, “Automated model repair for distributed programs,” ACM SIGACT News, vol. 43, no. 2, pp. 85–107, 2012.

[64] C. Vick, E. Kang, and S. Tripakis, “Counterexample classification,” arXiv preprint arXiv:2108.00885, 2021.

[65] J. Iyengar and M. Thomson, “QUIC: A UDP-based multiplexed and secure transport,” Internet Engineering Task Force, Internet-Draft draft-ietf-quic-transport-17, 2021.

---

希望这些修改能够使文本更加清晰、连贯和专业。如果有任何进一步的修改需求，请告诉我！