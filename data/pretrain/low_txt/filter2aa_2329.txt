# General Methods to Identify and Exploit Directory Traversals on Android

## Presenter
Xiang Xiaobo (Elphet) @ 360 Alpha Team

## About Us
- **Alpha Team @ 360 Security**
- Over 100 Android vulnerabilities discovered (Google, Qualcomm, etc.)
- Recipient of the highest reward in the history of the ASR program
- Five-time Pwn contest winner:
  - Pwn2Own Mobile 2015 (Nexus 6)
  - Pwn0Rama 2016 (Nexus 6P)
  - Pwn2Own 2016 (Chrome)
  - PwnFest 2016 (Pixel)
  - Pwn2Own Mobile 2017 (Galaxy S8)

## Agenda
1. Concept and Impacts
2. Where and How to Find Directory Traversal Issues
3. Tricks for Exploitation
4. How to Fix

## What is Directory Traversal?
- A controllable or partially controllable file name.
- Lack of file name canonicalization.
- Can be exploited with a malformed filename, e.g., `../../../../../../data/data/com.vulnerable.app/files/plugin.so`.

## Impacts of Directory Traversal
- Arbitrary file reading via traversal
- Information leakage (tokens, user info, etc.)
- Clone attack
- Arbitrary file writing
- Phishing
- Denial of Service (DoS)
- Account replacement
- Arbitrary code execution

## Where to Find Directory Traversal Issues
- Opening files in exported content providers
- Attachment saving in mailbox applications
- Manually decompressing archives in web browsers or file managers
- Downloading and unzipping resources during runtime
- Unsafe unzipping of files on the SD card
- Transferring files in instant messaging apps
- Syncing files in cloud drive apps
- Backup and restore operations
- And more...

### Directory Traversal in Exported Content Providers
- `exported: true`
- Overridden `openFile` method in the content provider
- Vulnerable code snippet
- Proof of Concept (PoC):
  ```bash
  adb shell content open content://mydownloadcontentprovider/..%2f..%2f..%2f..%2f..%2fsdcard%2freadme.txt
  ```

### Attachment Saving in Mailbox Apps
- Two fields that must be canonicalized:
  - `Filename1` specifies the attachment name for Gmail
  - `Filename2` specifies the attachment name for Outlook
- These fields can be specified using a Python script.

### Zip Decompression in Web Browsers or File Managers
- Steps to verify:
  - Download a malformed zip file or store it on the SD card
  - Manually trigger the decompression operation
- Example: CVE-2018-8084 (Directory traversal in Sogou Browser)

### Downloaded Zip Resources
- Vulnerability detection:
  - Static analysis or scanners
    - `grep --include *.smali -r zipEntry .`
  - Controllable attack surfaces
    - Insecure communication
    - Insecure storage
    - Exported components
- Static analysis:
  - Recursively find the caller of the target function
- Dynamic analysis:
  - Hooking
  - Man-in-the-Middle (MITM) attacks

### Hooking
- Hook `File.exists()` to intercept all reading actions
- Filter files that end with `.zip`
- Print the stack backtrace to check if it is controllable

### Directory Traversal in Instant Messaging Apps
- Steps to find directory traversals in IM:
  - Send a file with a malformed filename to the target
  - The target clicks or downloads the file, triggering a directory traversal
- Methods to send a malformed file:
  - MITM
  - Hooking
  - Repackaging or recompiling

### Possibility of MITM
- Example: Base64.decode(x-obs-parms)

### Case via Hooking
- CVE-2018-10067 (Directory traversal in QQ series products)
  - Modify the filename via hooking during sending

### Case via Repackaging or Recompiling
- CVE-2017-17715 (Directory traversal in Telegram Messenger, discovered by Natalie)
  - Did not canonicalize the filename during document download
  - How to specify a malformed filename during file sending:
    - Repackage or recompile

## Categories of Directory Traversal
- **Read arbitrary files**:
  - Logic bugs in exported components
- **Overwrite arbitrary files directly**:
  - Path traversal in unzip
  - Sync directory of a cloud app
- **Write but cannot overwrite files**:
  - Download a document and rename if the file already exists in Document Apps
  - Download an attachment and rename if the file already exists in Mailbox
  - Download an arbitrary file and rename if the file already exists in Instant Messaging Apps

## Tricks for Exploitation
- Files used by an application:
  - General files
    - SharedPreference in `/data/data/<package>/shared_prefs/.xml`
    - SQLite databases in `/data/data/<package>/databases/.db`
  - Plugins
    - Shared libraries, dex, jar, apk
    - Pre-download, dynamically load and unload
    - Hot patches
      - Fix critical vulnerabilities by pushing emergency patches
      - Combine with multi-dex mechanism
  - Executables, e.g., `watch_server`

### CVE-2018-8084 (Directory Traversal in Sogou Browser)
- Allows overwriting files directly
- Many shared libraries exist in `/data/data/sogou.mobile.explorer/`
- Overwrite a proper one to get a shell, e.g., `libvplayer.so`

### CVE-2018-5722 (Directory Traversal in Tencent QQ Mail)
- Directory traversal in attachment downloads
- Vulnerable when logging in with Gmail or Gmalified address (Hotmail/Yahoo)
- Controllable filename of attachment
- Lacking canonicalization
- Dangerous hot patches with multi-dex
- Use `File.listFiles(DexFilter)` to find all dex files in a certain directory and load them directly
- Exploit: `/data/data/<package>/app_moai_patch/a.dex`
- Smali injection into classes to be loaded

### CVE-2018-5192 (Directory Traversal in Netease Mail Master)
- Directory traversal in attachment downloading
- Similar to directory traversal in QQ Mail
- Vulnerable when logging in with Gmail or Gmalified address (Hotmail/Yahoo)
- Controllable filename of attachment
- Lacking canonicalization
- Dangerous advertisement plugin loading and updating
- Loads `finalcore.jar` after launch
- Update `finalcore.jar` by renaming `newcore.jar` to `finalcore.jar` if it exists
- Exploit: Place `newcore.jar` and wait for reloading

### CVE-2017-17715 (Directory Traversal in Telegram, Discovered by Natalie)
- Directory traversal in document downloading
- Cannot overwrite existing files
- Controllable filename of documents
- Lacking canonicalization when downloading
- Implementation of `tgnet` module is dangerous
- Exploit 1: Place `tgnet.dat.bak` and wait for loading
  - Results in a crash / possibility of session hijacking
- Exploit 2: Use AOSP backup file restore logic to overwrite files
  - Overwrite `tgnet.dat` and `userconfig.xml`
  - Perform account replacing, session hijack, device binding, and force logout

## SharePreferences
- Items that can be hijacked:
  - Download URLs
  - Plugins
  - Patches
  - New APKs
  - Version code
  - Update schedule
  - Update file hash
  - Servers
    - Server IP and port
    - DNS server
    - Proxy server
  - And more...

## How to Fix
- Rename or concatenate downloaded files with a hash
- Always canonicalize user-controllable filenames
- Avoid reading important files on the SD card
- Check the integrity of important files
- And more...

## Thank You
Questions and Answers