### Definition Node

When it is necessary to differentiate between the master definition node and other master nodes that are not the master definition node, the latter are referred to as non-MDN (Master Definition Node) nodes.

### Significance of the Master Definition Node

1. **Initial Publication Creation**:
   - The publication is initially created in the master definition node.
   - The tables comprising the publication must exist in the database designated as the master definition node at the time the publication is defined.

2. **Initial Replication**:
   - The publication can be initially replicated to other master nodes by taking a snapshot from the master definition node.

3. **Subsequent Master Nodes**:
   - Each subsequent master node added to the replication system must either:
     1. Contain no tables with the same schema-qualified names as the publication tables in the master definition node.
     2. Contain all publication table definitions as they exist in the master definition node with the same schema-qualified names.
   - In the first case, when adding the master node, you select the option to replicate the publication schema from the master definition node.
   - In the second case, you do not select this option.

4. **Table Row Reloading**:
   - Table rows in a master node can be reloaded from the master definition node.
   - The master node tables are truncated and the rows are reloaded using a snapshot from the master definition node.

5. **Synchronization**:
   - Once the multi-master replication system is defined, changes (inserts, updates, and deletions) to the publication tables on any master node are synchronized to all other master nodes, either on demand or on a scheduled basis.

6. **Table Definition Changes**:
   - Generally, changes should not be made to the table definitions in any of the master nodes, including the master definition node.
   - If such changes are made, they are not propagated to other nodes in the multi-master replication system unless they are made using the DDL change replication feature described in Section 7.8.
   - Making changes to tables without using the DDL change replication feature can lead to future replication failures.

### Asynchronous Replication

xDB Replication Server performs replications asynchronously. The systems hosting the databases do not need to be running continuously for successful replication to occur. If one system goes offline, replication resumes when it comes back online if there is still pending data to replicate.

Additionally, you can create a schedule for your replication system. xDB Replication Server initiates and performs replications regularly according to the assigned schedule, allowing the replication system to run unattended. See Section 7.2 for directions on creating a schedule.

### Snapshot and Synchronization Overview

xDB Replication Server supports two types of replications: snapshot replication and synchronization replication.

#### Source and Target Tables
- **Source Tables**: The tables from which the replication data originates (the publication in a single-master replication system, or the master node whose changes are being replicated to another master node in a multi-master replication system).
- **Target Tables**: The tables receiving the replication data from the source tables (the subscription tables in a single-master replication system, or the master node receiving changes from another master node in a multi-master replication system).

#### Snapshot Replication
- All existing rows in the target tables are deleted using the `TRUNCATE` command.
- The tables are then completely reloaded from the source tables of the publication.

#### Synchronization Replication
- Only the changes (inserts, updates, and deletions) to the rows in the source tables since the last replication are applied to the target tables.
- Note: Deletion of all rows in a source table executed by the `TRUNCATE` command results in replication to the target tables only if the log-based method of synchronization replication is used. If the trigger-based method is used, execution of the `TRUNCATE` command on a source table does not replicate the effect to the target tables. A snapshot from the source table to the target tables is required in this case.

### Synchronization Replication Methods

#### Trigger-Based Method
- Changes to rows in the source tables result in the firing of row-based triggers.
- These triggers record the changes in shadow tables.
- The changes recorded in the shadow tables are periodically extracted, converted to an in-memory data structure, and applied to the target tables using SQL statements executed via JDBC.

#### Log-Based Method
- Changes to rows in the source tables are extracted from the Write-Ahead Log segments (WAL files) using asynchronous streaming replication implemented by the logical decoding feature available in Postgres database servers.
- The extracted changes are converted to an in-memory data structure and applied to the target tables using SQL statements executed via JDBC.

### Multi-Master Replication System

In a multi-master replication system, changes accumulated on all master nodes are replicated to all other master nodes in groups identified by the source master node with the changes to be replicated. See Section 2.2.11 for more information on this process and the improvement for the log-based method with parallel replication.

### Single-Master Replication System

- The very first replication to a newly created subscription must always be done by a snapshot.
- Subsequent replications can be done by snapshot or by synchronization, provided that the publication is not defined as a snapshot-only publication (see Section 2.2.7).

### Multi-Master Replication System

- The very first replication from the master definition node to a newly added master node must always be done by a snapshot.
- Subsequent replications between master nodes occur by synchronization, but it is possible to perform subsequent snapshots from the master definition node to any other master node.

### Snapshot-Only Publications

- When a publication is created in a single-master replication system, it can be defined as a snapshot-only publication.
- Replication from a snapshot-only publication can only be done using the snapshot replication method; synchronization replication is not permitted.
- A snapshot-only publication cannot be created in a multi-master replication system.
- See Section 2.4.4 for a discussion of the advantages of using a snapshot-only publication.

### Snapshot Replication

- In snapshot replication, the target tables are completely reloaded from the source tables.
- The `TRUNCATE` operation is used to delete all rows from the target tables.
- For Oracle and SQL Server: Target tables are loaded using JDBC batches of `INSERT` statements.
- For Postgres: Target tables are generally loaded using the JDBC `COPY` command, which is faster than executing an `SQL DELETE` statement followed by `JDBC` batches of `INSERT` statements.
- If the `COPY` command fails, the publication server retries the snapshot using JDBC batches of `INSERT` statements.
- If the target table contains large object data types (e.g., `BYTEA`, `BLOB`, `CLOB`), rows are loaded one at a time per batch using an `INSERT` statement to avoid heap space errors.
- Loading time can be decreased by allowing multiple inserts per batch, which is done by adjusting the `lobBatchSize` configuration option (see Section 5.8.1).
- Under certain circumstances, the corresponding Postgres target table created for certain types of Oracle partitioned tables is a set of inherited tables. In these cases, the `SQL DELETE` statement is used on the inherited child tables instead of truncation (see Section 10.4.1.4 for additional information).
- A server configuration option is available that forces the snapshot replication process to use the Oracle database link utility instead of `JDBC COPY` to populate the Postgres target tables from an Oracle publication, providing additional performance improvement (see Section 5.8.1 for details).

### Synchronization Replication with the Trigger-Based Method

- If a publication in a single-master replication system is created for synchronization replications with the trigger-based method, the publication server installs insert, update, and delete triggers on each publication table.
- In a multi-master replication system, each replicated table in each master node employing the trigger-based method has insert, update, and delete triggers.
- The publication server also creates a shadow table for each source table on which triggers have been created. A shadow table records three types of record images: inserted rows, updated rows (after image), and deleted rows (primary key value).
- In a multi-master replication system, the before image of an updated row is also stored in the shadow table to perform update conflict detection (see Section 6.6 for more information).
- After each change on the source table, the appropriate trigger is executed, recording the change in the shadow table.
- During synchronization replication, the publication server executes JDBC batches of SQL statements (transaction sets) against the target tables, containing `INSERT`, `UPDATE`, and `DELETE` statements based on the shadow table records.
- Shadow table rows that were applied to target tables can be viewed as shadow table history in the xDB Replication Console (see Section 7.4.3).
- A single SQL statement executed against a source table may result in many rows recorded in a shadow table, leading to many SQL statements executed against the target table.
- For greater efficiency, the publication server may employ prepared SQL statements when changes to the source tables consist of SQL statements affecting a large number of rows (see Section 5.8.2 for more information).

### Synchronization Replication with the Log-Based Method

- Introduced in PostgreSQL 9.4, logical decoding (also called logical replication or changeset extraction) provides the capability to extract DML changes from the Write-Ahead Log segments (WAL files) in a readable format.
- This feature captures data changes to the publication tables without impacting the online transaction processing rate, unlike the trigger-based method, which fires row-level triggers and inserts data changes into shadow tables.
- Logical decoding can improve database server throughput and reduce replication latency.
- However, logical decoding streams changes for all tables in a given database, which may cause network overhead if only a subset of tables is of interest.
- Using logical decoding for synchronization replication is referred to as the log-based method.

### Requirements and Restrictions for the Log-Based Method

- The choice between the trigger-based method and the log-based method is a characteristic of the publication database.
- The log-based method is supported starting from PostgreSQL version 9.4.
- In a single-master replication system, the choice of method for the master database does not impact the rules for choosing the subscription database (see Section 10.1).
- A master database may contain one or more publications, applicable to both methods.
- Multiple, single-master replication systems can run under a publication server with some master databases using the trigger-based method and others using the log-based method.
- In a multi-master replication system, the method chosen for the master definition node determines the method for all other master nodes.
- To use the log-based method in a multi-master replication system, all master nodes must be running under Postgres version 9.4 or later and must be configured for logical decoding.

### Configuration for the Log-Based Method

- The following configuration parameter settings are required in the `postgresql.conf` file of the Postgres database server:
  - `wal_level`: Set to `logical`.
  - `max_wal_senders`: Set to the total number of concurrent connections (minimum).
  - `max_replication_slots`: Set to the sum of the requirements for both single-master and multi-master replication systems.
  - `track_commit_timestamp`: Set to `on` (for Postgres version 9.5 and later).
- The `pg_hba.conf` configuration file must permit `REPLICATION` access for each database using the log-based method.
- See Sections 5.1.2 and 6.1.2 for setting these parameters for single-master and multi-master replication systems, respectively.

### Logical Replication Slots

- Each logical replication slot represents a changeset stream and applies to a single database.
- The xDB Replication Server assigns a unique identifier (slot name) to each logical replication slot in the form `xdb_dboid_pubid`, where `dboid` is the publication database OID and `pubid` is the publication ID.
- For each single-master replication system using the log-based method, a replication slot is required for the publication database.
- For a multi-master replication system, each master node requires a replication slot.
- The `max_replication_slots` configuration parameter must be set to a large enough value to account for all publication databases and master nodes using the log-based method.

### Streaming Replication with the WAL Sender Process

- The changeset stream is accessible to the xDB publication server via the `walsender` interface, which streams changes on a continual basis, eliminating the need for explicit polling for changes.

### Basic Synchronization Steps Using the Log-Based Method

- [Detailed steps to be provided in the relevant section]