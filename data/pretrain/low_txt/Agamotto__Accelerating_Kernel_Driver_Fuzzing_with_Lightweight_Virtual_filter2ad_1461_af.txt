### Performance Benefits and Adaptability of Agamotto

Agamotto offers significant performance benefits and is highly adaptable to various use cases. 

### Acknowledgments

The authors would like to extend their gratitude to our shepherd, Manuel Egele, and the anonymous reviewers for their invaluable feedback. We also thank Paul Kirth for his assistance with proofreading this paper. This work was partially supported by the Defense Advanced Research Projects Agency (DARPA) under contracts FA8750-15-C-0124 and FA8750-15-C-0085, the United States Office of Naval Research (ONR) under contract N00014-17-1-2782, the National Science Foundation (NSF) under awards CNS-1619211 and CNS-1513837, the European Commission under the Horizon 2020 Programme (H2020) as part of the LOCARD project (Grant Agreement No. 832735), the Institute for Information & Communications Technology Planning & Evaluation (IITP) under contract 20190015700021001, and the National Research Foundation of Korea (NRF) under contract 2017R1A2B3006360. The opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of our funding agencies.

### References

1. QEMU System Emulation User’s Guide.
2. TriforceAFL: AFL/QEMU Fuzzing with Full-System Emulation, 2016.
3. Trinity: Linux System Call Fuzzer, 2019. https://github.com/kernelslacker/trinity.
13. S. Boyd-Wickizer and N. Zeldovich. Tolerating Malicious Device Drivers in Linux. In Proceedings of the USENIX Annual Technical Conference (ATC), 2010.
14. O. Chang. Attacking the Windows NVIDIA Driver, 2017. https://googleprojectzero.blogspot.com/2017/02/attacking-windows-nvidia-driver.html.
15. A. Chou, J. Yang, B. Chelf, S. Hallem, and D. Engler. An Empirical Study of Operating Systems Errors. In Proceedings of the ACM Symposium on Operating Systems Principles (SOSP), 2001.
4. K. Adams and O. Agesen. A Comparison of Software and Hardware Techniques for x86 Virtualization. In Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2006.
16. C. Clark, K. Fraser, S. Hand, J. G. Hansen, E. Jul, C. Limpach, I. Pratt, and A. Warfield. Live Migration of Virtual Machines. In Proceedings of the USENIX Symposium on Networked Systems Design & Implementation, 2005.
5. S. Angel, R. S. Wahby, M. Howald, J. B. Leners, M. Spilo, Z. Sun, A. J. Blumberg, and M. Walfish. Defending Against Malicious Peripherals with Cinch. In Proceedings of the USENIX Security Symposium, 2016.
6. Armis Labs. BlueBorne Vulnerabilities, 2017. https://armis.com/blueborne.
7. I. Beer. pwn4fun Spring 2014 - Safari - Part II, 2014. https://googleprojectzero.blogspot.com/2014/11/pwn4fun-spring-2014-safari-part-ii.html.
8. F. Bellard. QEMU, a Fast and Portable Dynamic Translator. In Proceedings of the USENIX Annual Technical Conference, FREENIX Track, 2005.
9. G. Beniamini. Over the Air - Vol. 2, Pt. 2: Exploiting the Wi-Fi Stack on Apple Devices, 2017. https://googleprojectzero.blogspot.com/2017/10/over-air-vol-2-pt-2-exploiting-wi-fi.html.
10. G. Beniamini. Over the Air - Vol. 2, Pt. 3: Exploiting the Wi-Fi Stack on Apple Devices, 2017. https://googleprojectzero.blogspot.com/2017/10/over-air-vol-2-pt-3-exploiting-wi-fi.html.
11. G. Beniamini. Over the Air: Exploiting Broadcom's Wi-Fi Stack (Part 1), 2017. https://googleprojectzero.blogspot.com/2017/04/over-air-exploiting-broadcoms-wi-fi_4.html.
12. G. Beniamini. Over the Air: Exploiting Broadcom's Wi-Fi Stack (Part 2), 2017. https://googleprojectzero.blogspot.com/2017/04/over-air-exploiting-broadcoms-wi-fi_11.html.
17. A. A. Clements, E. Gustafson, T. Scharnowski, P. Grosen, D. Fritz, C. Kruegel, G. Vigna, S. Bagchi, and M. Payer. HALucinator: Firmware Re-hosting Through Abstraction Layer Emulation. In Proceedings of the USENIX Security Symposium, 2020.
18. J. Corina, A. Machiry, C. Salls, Y. Shoshitaishvili, S. Hao, C. Kruegel, and G. Vigna. DIFUZE: Interface-Aware Fuzzing for Kernel Drivers. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2017.
19. B. Cully, G. Lefebvre, D. Meyer, M. Feeley, N. Hutchinson, and A. Warfield. Remus: High Availability via Asynchronous Virtual Machine Replication. In Proceedings of the USENIX Symposium on Networked Systems Design & Implementation, 2008.
20. A. Davis. USB – Undermining Security Barriers. Black Hat USA, 2011.
21. G. W. Dunlap, S. T. King, S. Cinar, M. A. Basrai, and P. M. Chen. ReVirt: Enabling Intrusion Analysis through Virtual-Machine Logging and Replay. In Proceedings of the USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2002.
22. B. Feng, A. Mera, and L. Lu. P2IM: Scalable and Hardware-Independent Firmware Testing via Automatic Peripheral Interface Modeling. In Proceedings of the USENIX Security Symposium, 2020.
23. Google. Found Linux Kernel USB Bugs, 2019. https://github.com/google/syzkaller/blob/master/docs/linux/found_bugs_usb.md.
24. Google. syzkaller - Kernel Fuzzer, 2019. https://github.com/google/syzkaller.
25. E. Gustafson, M. Muench, C. Spensky, N. Redini, A. Machiry, Y. Fratantonio, D. Balzarotti, A. Francillon, Y. R. Choe, C. Kruegel, and G. Vigna. Toward the Analysis of Embedded Firmware through Automated Re-hosting. In Proceedings of the International Symposium on Research in Attacks, Intrusions and Defenses (RAID), 2019.
26. H. Han and S. K. Cha. IMF: Inferred Model-Based Fuzzer. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2017.
27. J. Hertz and T. Newsham. A Linux System Call Fuzzer Using TriforceAFL, 2016. https://github.com/nccgroup/TriforceLinuxSyscallFuzzer.
28. Intel. Intel 64 and IA-32 Architectures Software Developer’s Manual - Chapter 23: Introduction to Virtual Machine Extensions. https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3c-part-3-manual.pdf.
36. V. Kuznetsov, V. Chipounov, and G. Candea. Testing Closed-Source Binary Device Drivers with DDT. In Proceedings of the USENIX Annual Technical Conference (ATC), 2010.
37. L. Lamport. Specifying Concurrent Program Modules. ACM Transactions on Programming Languages and Systems (TOPLAS), 5(2):190–222, 1983.
38. LLVM Developers. libFuzzer – A Library for Coverage-Guided Fuzz Testing, 2019. https://llvm.org/docs/LibFuzzer.html.
39. A. T. Markettos, C. Rothwell, B. F. Gutstein, A. Pearce, P. G. Neumann, S. W. Moore, and R. N. M. Watson. Thunderclap: Exploring Vulnerabilities in Operating System IOMMU Protection via DMA from Untrustworthy Peripherals. In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2019.
40. M. Mendonça and N. Neves. Fuzzing Wi-Fi Drivers to Locate Security Vulnerabilities. In Proceedings of the European Dependable Computing Conference (EDCC), 2008.
29. D. R. Jeong, K. Kim, B. Shivakumar, B. Lee, and I. Shin. Razzer: Finding Kernel Race Bugs through Fuzzing. In Proceedings of the IEEE Symposium on Security and Privacy, 2019.
30. A. Kadav, M. J. Renzelmann, and M. M. Swift. Fine-Grained Fault Tolerance Using Device Checkpoints. In Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2013.
31. A. Kadav and M. M. Swift. Understanding Modern Device Drivers. In Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2012.
32. S. Keil and C. Kolbitsch. Stateful Fuzzing of Wireless Device Drivers in an Emulated Environment. Black Hat Japan, 2007.
33. S. Y. Kim, S. Lee, I. Yun, W. Xu, B. Lee, Y. Yun, and T. Kim. CAB-Fuzz: Practical Concolic Testing Techniques for COTS Operating Systems. In Proceedings of the USENIX Annual Technical Conference (ATC), 2017.
34. S. T. King, G. W. Dunlap, and P. M. Chen. Debugging Operating Systems with Time-Traveling Virtual Machines. In Proceedings of the USENIX Annual Technical Conference (ATC), 2005.
41. S. Nagy and M. Hicks. Full-Speed Fuzzing: Reducing Fuzzing Overhead through Coverage-Guided Tracing. In Proceedings of the IEEE Symposium on Security and Privacy, 2019.
42. K. Nohl and J. Lell. BadUSB – On Accessories That Turn Evil. Black Hat USA, 2014.
43. Open Virtualization Alliance. Linux Kernel Virtual Machine. https://www.linux-kvm.org.
44. Open Virtualization Alliance. Virtio. https://www.linux-kvm.org/page/Virtio.
45. Open Virtualization Alliance. Windows Guest Drivers. https://www.linux-kvm.org/page/WindowsGuestDrivers.
46. S. Pailoor, A. Aday, and S. Jana. Moonshine: Optimizing OS Fuzzer Seed Selection with Trace Distillation. In Proceedings of the USENIX Security Symposium, 2018.
47. N. Palix, G. Thomas, S. Saha, C. Calvès, J. Lawall, and G. Muller. Faults in Linux: Ten Years Later. In Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2011.
35. A. Konovalov and D. Vyukov. KernelAddressSanitizer (KASan): A Fast Memory Error Detector for the Linux Kernel. LinuxCon North America, 2015.
48. J. Pan, G. Yan, and X. Fan. Digtool: A Virtualization-Based Framework for Detecting Kernel Vulnerabilities. In Proceedings of the USENIX Security Symposium, 2017.
49. J. Patrick-Evans, L. Cavallaro, and J. Kinder. POTUS: Probing Off-the-Shelf USB Drivers with Symbolic Fault Injection. In Proceedings of the USENIX Workshop on Offensive Technologies (WOOT), 2017.
50. A. Pnueli. Applications of Temporal Logic to the Specification and Verification of Reactive Systems: A Survey of Current Trends. In Current Trends in Concurrency, pages 510–584. Springer, 1986.
51. M. J. Renzelmann, A. Kadav, and M. M. Swift. SymDrive: Testing Drivers Without Devices. In Proceedings of the USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2012.
52. J. Rutkowska. Why Do I Miss Microsoft BitLocker? http://theinvisiblethings.blogspot.com/2009/01/why-do-i-miss-microsoft-bitlocker.html, 2009.
53. S. Schumilo, C. Aschermann, R. Gawlik, S. Schinzel, and T. Holz. kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels. In Proceedings of the USENIX Security Symposium, 2017.
54. S. Schumilo, R. Spenneberg, and H. Schwartke. Don’t Trust Your USB! How to Find Bugs in USB Device Drivers. Black Hat Europe, 2014.
55. D. Song, F. Hetzelt, D. Das, C. Spensky, Y. Na, S. Volckaert, G. Vigna, C. Kruegel, J.-P. Seifert, and M. Franz. PeriScope: An Effective Probing and Fuzzing Framework for the Hardware-OS Boundary. In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2019.
56. J. V. Stoep and S. Tolvanen. Year in Review: Android Kernel Security. Linux Security Summit, 2018.
57. S. M. S. Talebi, H. Tavakoli, H. Zhang, Z. Zhang, A. A. Sani, and Z. Qian. Charm: Facilitating Dynamic Analysis of Device Drivers of Mobile Systems. In Proceedings of the USENIX Security Symposium, 2018.
58. D. J. Tian, A. Bates, and K. Butler. Defending Against Malicious USB Firmware with GoodUSB. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2015.
59. D. J. Tian, G. Hernandez, J. I. Choi, V. Frost, P. C. Johnson, and K. R. B. Butler. LBM: A Security Framework for Peripherals Within the Linux Kernel. In Proceedings of the IEEE Symposium on Security and Privacy, 2019.
60. D. J. Tian, N. Scaife, A. Bates, K. Butler, and P. Traynor. Making USB Great Again with USBFILTER. In Proceedings of the USENIX Security Symposium, 2016.
61. M. Tischer, Z. Durumeric, S. Foster, S. Duan, A. Mori, E. Bursztein, and M. Bailey. Users Really Do Plug in USB Drives They Find. In Proceedings of the IEEE Symposium on Security and Privacy, 2016.
62. D. Vyukov. Syzbot and the Tale of Thousand Kernel Bugs. Linux Security Summit, 2018.
63. W. Xu, S. Kashyap, C. Min, and T. Kim. Designing New Operating Primitives to Improve Fuzzing Performance. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2017.
64. W. Xu, H. Moon, S. Kashyap, P.-N. Tseng, and T. Kim. Fuzzing File Systems via Two-Dimensional Input Space Exploration. In Proceedings of the IEEE Symposium on Security and Privacy, 2019.
65. M. Zalewski. American Fuzzy Lop, 2019. http://lcamtuf.coredump.cx/afl.
66. Y. Zheng, A. Davanian, H. Yin, C. Song, H. Zhu, and L. Sun. Firm-AFL: High-Throughput Greybox Fuzzing of IoT Firmware via Augmented Process Emulation. In Proceedings of the USENIX Security Symposium, 2019.

---

This version of the text is more structured and professional, with clear headings and improved readability.