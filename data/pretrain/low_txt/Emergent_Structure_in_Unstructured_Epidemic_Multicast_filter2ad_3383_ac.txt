### 6. Experimental Results

#### 6.1. Pseudo-Geographical Evaluation
To enhance our understanding, we begin by evaluating the proposed strategies using an oracle that considers the pseudo-geographical positions of nodes, as generated by Inet-3.0. Although this does not directly assess the protocol's performance (since geometric distance does not map to end-to-end distance), it allows us to visualize and interpret the emergent structure.

**Figure 4** shows the results of running 100 node configurations with different strategies and then selecting the top 5% connections with the highest throughput. The size of each red circle is proportional to the amount of payload transmitted by the node. Note that each connection is used for a brief period, as the membership management algorithm periodically shuffles peers with neighbors. This means that the connections shown may not have existed simultaneously.

- **Baseline (Eager Push):** **Figure 4(a)** shows an eager push configuration, where no discernible structure is evident. The top 5% connections account for only 7% of all traffic, indicating that payload transmissions are evenly distributed across all connections.
- **Radius Strategy:** **Figure 4(b)** demonstrates an emergent mesh structure, where the top 5% connections account for 37% of all payload transmissions.
- **Super-Nodes (Ranked Strategy):** **Figure 4(c)** shows a subset of nodes emerging as super-nodes, accounting for a large share of links and transmitting a higher number of payloads. The top 5% of connections account for 30% of total payloads transmitted.

#### 6.2. Latency vs. Bandwidth Tradeoff
The primary evaluation criterion is the latency/bandwidth tradeoff provided by each configuration. 

- **Eager Push Protocol:** Each payload is approximately transmitted \( f \) times for each delivery, leading to significant bandwidth waste.
- **Lazy Push Approach:** On average, a single payload is transmitted for each message delivery, but at the cost of an additional round-trip, which increases latency.

**Figure 5(a)** illustrates the tradeoff for the Flat strategy. By increasing parameter \( \pi \), latency can be reduced from 480 ms to 227 ms, but this increases the number of payload transmissions per message delivered from 1 to 11.

- **TTL Strategy:** Achieves 250 ms with 1.7 payload transmissions per message delivered, offering a better tradeoff.
- **Ranked Strategy:** Improves average latency compared to the Flat strategy, despite similar traffic. The Radius strategy, however, does not show such improvement due to the increased number of rounds required, even though the round latency is reduced.

#### 6.3. Reliability
We aim to confirm that the proposed approach does not compromise reliability. We simulate failed nodes by silencing them with firewall rules after they join the overlay and warm up, just before logging message deliveries.

- **Baseline (Eager Push):** **Figure 5(b)** shows the impact of failing an increasing number of randomly selected nodes. With no node failures, perfect atomic delivery is observed. With 20% or more nodes failing, atomic delivery is not always achieved, although many nodes still deliver each message. With more than 80% of nodes failing, the protocol breaks down.
- **Ranked Strategy:** Experiments were run twice: first with random node failures and then with the best-ranked nodes failing. **Figure 5(b)** shows no significant impact on reliability in both cases. However, with more than 80% of nodes failing, the high variance makes it difficult to conclude which configuration is superior.

#### 6.4. Hybrid Strategy
A key advantage of the proposed approach is the ability to test new strategies without compromising protocol correctness. We now combine the contributions of TTL, Radius, and Ranked strategies into a single hybrid strategy.

- **Hybrid Strategy Details:** EAGER?(i, d, r, p) returns true if one of the involved nodes is considered a best node; or if METRIC(p) < 2ρ when r < u; or METRIC(p) < ρ otherwise. Parameters ρ and u are the same as in the Radius and TTL strategies. SCHEDULEDNEXT() is defined as in the Radius strategy.

**Figure 5(c)** shows the results, providing a new tradeoff for regular nodes: latency can be reduced from 379 ms to 245 ms while increasing average payload to 80% of nodes from 1.01 to 1.20 payload transmissions per message. This is achieved at the expense of a contribution of 10.77 payload/message by the remaining 20% (overall average of 3.11). Eager gossip would require an overall average of 11 payload/message to achieve 227 ms.

#### 6.5. Noise
Finally, we evaluate the protocol's performance as the accuracy of the performance monitoring module degrades. As described in Section 4.3, we do this while carefully preserving the amount of data transmitted, confirmed in **Figure 6(a)**.

- **Impact on Latency:** **Figure 6(b)** shows the impact of degrading structure on the latency of the Ranked strategy. The Radius strategy does not provide a latency advantage.
- **Emergent Structure Degradation:** **Figure 6(c)** uses the amount of data conveyed by the top 5% links as a measure of emergent structure. As noise increases, the structure converges to the expected 5% of traffic, indicating that the structure becomes increasingly blurred.

### 7. Related Work
Reliable multicast in large-scale networks has been addressed using various approaches. Some proposals build on IP multicast, which has been challenging to deploy [8]. More recently, application-level multicast protocols have been proposed, often based on scalable structured overlay networks [3, 19, 18, 23]. Comparing these protocols with our approach and the code complexity required would be valuable. However, these approaches, relying on explicit garbage collection for reliability, may suffer from throughput stability issues [1].

- **Bimodal Multicast [2]:** The first reliable multicast protocol to use gossiping for atomic delivery and throughput stability. It relies on an optimistic dissemination phase, making it hard to scale to wide area networks.
- **Mesh Construction [14]:** Proposes building a mesh according to a configurable metric using gossiping itself. These proposals share the requirement of a performance monitor but do not preserve the random nature of an unstructured overlay, which is crucial for reliability [11].
- **Lazy Push vs. Pull Gossip:** Lazy push gossip requests specific data items only from peers that have previously advertised them, unlike pull gossip, which issues generic requests to a random subset of nodes. A combination of eager push and eager pull gossip has been proposed to reduce propagation latency [12], while a combination of lazy pull and lazy push gossip has been used in the CREW protocol for fast file download [4].
- **Adaptation to Heterogeneous Resources [17, 4]:** Adjusts node fanout according to available bandwidth and biases choices during gossiping and overlay maintenance. Combining these approaches with unmodified gossip should allow further improvements.

### 8. Conclusions
Epidemic multicast protocols are known for their resilience and scalability but also for generating redundant message transmissions. We have shown that by carefully scheduling payload transmission in a combined eager/lazy push gossip protocol, one can reduce bandwidth requirements without impacting performance or reliability. Our heuristic configuration achieves near-optimal bandwidth and latency for the majority of participants.

Interestingly, the nodes and links on which most payload transmissions are scheduled emerge as a probabilistic structure within an otherwise unstructured overlay. This suggests that the performance advantages of structured overlays can be approximated while maintaining the simplicity, resilience, and scalability of gossip. Our evaluation also shows that performance degrades gracefully as environmental knowledge becomes less accurate, demonstrating the robustness of the approach. Even in the worst-case scenario, where knowledge is entirely random, performance is bounded by the original pure lazy or eager push protocols.

Furthermore, the proposed approach ensures correctness regardless of the strategy used by each peer, making it a promising foundation for building large-scale adaptive protocols that do not require tight global coordination.

### Acknowledgments
The authors thank Bruno Matos at the U. Minho for his work on setting up the experimental environment.

### References
[1] K. Birman. A review of experiences with reliable multicast. Software Practice and Experience, 29(9), July 1999.
[2] K. Birman, M. Hayden, O. Ozkasap, Z. Xiao, M. Budiu, and Y. Minsky. Bimodal multicast. ACM Trans. Computer Systems, 17(2), May 1999.
[3] Y. Chu, S. Rao, S. Seshan, and H. Zhang. A case for end system multicast. IEEE Journal on Selected Areas in Communication (JSAC), 20(8), 2002.
[4] M. Deshpande, B. Xing, I. Lazardis, B. Hore, N. Venkatasubramanian, and S. Mehrotra. CREW: A gossip-based flash-dissemination system. In Intl. Conf. Distributed Computing Systems (ICDCS), 2006.
[5] P. Eugster, R. Guerraoui, S. Handrukande, A.-M. Kermarrec, and P. Kouznetsov. Lightweight probabilistic broadcast. In Proc. IEEE Intl. Conf. Dependable Systems and Networks (DSN), 2001.
[6] P. Eugster, R. Guerraoui, A.-M. Kermarrec, and L. Massoulie. From epidemics to distributed computing. IEEE Computer, May 2004.
[7] S. Floyd and K. Fall. Promoting the use of end-to-end congestion control in the Internet. IEEE/ACM Trans. Networking, 7(4), Aug. 1999.
[8] S. Floyd, V. Jacobson, C. Liu, S. McCanne, and L. Zhang. A reliable multicast framework for light-weight sessions and application level framing. IEEE/ACM Transactions on Networking, 5, Dec. 1997.
[9] M. Jelasity. A case study on gossip beyond gossip: Sorting. Ws. on Gossip Based Computer Networking, Lorent Center, Leiden, 2006.
[10] M. Jelasity and O. Babaoglu. T-Man: Gossip-based overlay topology management. In Proc. 3rd Intl. Ws. Engineering Self-Organising Applications (ESOA’05). Springer-Verlag, 2005.
[11] M. Jelasity, R. Guerraoui, A.-M. Kermarrec, and M. van Steen. The peer sampling service: Experimental evaluation of unstructured gossip-based implementations. In Proc. 5th ACM/IFIP/USENIX Intl. Conf. Middleware, 2004.
[12] R. Karp, C. Schindelhauer, S. Shenker, and B. Vocking. Randomized rumor spreading. In IEEE Symp. Foundations of Computer Science, 2000.
[13] B. Koldehofe. Buffer management in probabilistic peer-to-peer communication protocols. In Proc. IEEE Symp. Reliable Distributed Systems (SRDS), 2003.
[14] L. Massoulié, A.-M. Kermarrec, and A. Ganesh. Network awareness and failure resilience in self-organising overlay networks. In Proc. IEEE Symp. Reliable Distributed Systems (SRDS’03), 2003.
[15] J. Pereira, R. Oliveira, and L. Rodrigues. Efficient epidemic multicast in heterogeneous networks. In OTM Workshops, number 4278 in Lecture Notes in Computer Science, 2006.
[16] J. Pereira, L. Rodrigues, M. J. Monteiro, R. Oliveira, and A.-M. Kermarrec. NeEM: Network-friendly epidemic multicast. In Proc. IEEE Symp. Reliable Distributed Systems (SRDS), 2003.
[17] J. Pereira, L. Rodrigues, A. Pinto, and R. Oliveira. Low-latency probabilistic broadcast in wide area networks. In Proc. IEEE Symp. Reliable Distributed Systems (SRDS’04), Oct. 2004.
[18] S. Ratnasamy, M. Handley, R. Karp, and S. Shenker. Application-level multicast using content-addressable networks. In NGC ’01: Proceedings of the Third International COST264 Workshop on Networked Group Communication, 2001.
[19] A. Rowstron, A.-M. Kermarrec, M. Castro, and P. Druschel. SCRIBE: The design of a large-scale event notification infrastructure. In NGC ’01: Proceedings of the Third International COST264 Workshop on Networked Group Communication. Springer-Verlag, 2001.
[20] P. Santos and J. Pereira. NeEM version 0.5. http://neem.sf.net, 2006.
[21] A. Vahdat, K. Yocum, K. Walsh, P. Mahadevan, D. Kostic, J. Chase, and D. Becker. Scalability and accuracy in a large-scale network emulator. In Proceedings of 5th Symposium on Operating Systems Design and Implementation (OSDI), 2002.
[22] J. Winick and S. Jamin. Inet-3.0: Internet topology generator. Technical Report CSE-TR-456-02, University of Michigan, 2002.
[23] S. Zhuang, B. Zhao, A. Joseph, R. Katz, and J. Kubiatowicz. Bayeux: An architecture for scalable and fault-tolerant wide-area data dissemination. In Proceedings of the Eleventh International Workshop on Network and Operating System Support for Digital Audio and Video, 2001.