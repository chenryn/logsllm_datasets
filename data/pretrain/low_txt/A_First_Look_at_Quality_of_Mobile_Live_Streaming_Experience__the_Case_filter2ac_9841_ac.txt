### 5.2 Audio and Video Quality

Both RTMP (Real-Time Messaging Protocol) and HLS (HTTP Live Streaming) use standard codecs for audio and video: AAC (Advanced Audio Coding) for audio [7] and AVC (Advanced Video Coding) for video [6]. Specifically, the audio is sampled at 44,100 Hz with 16-bit depth and encoded in Variable Bit Rate (VBR) mode, typically at 32 or 64 kbps. This bitrate is sufficient for transmitting a wide range of audio content, such as voice and music, with quality comparable to that captured by a mobile device.

The video resolution is fixed at 320×568 pixels (or vice versa, depending on the orientation), with a variable frame rate up to 30 fps. Occasionally, some frames are missing, necessitating concealment during decoding. This issue may arise from real-time encoding glitches or upload problems on the streaming device.

Figure 6(a) illustrates the typical video bitrate, which ranges between 200 and 400 kbps. There is little difference in bitrate between HLS and RTMP, except that RTMP can achieve higher maximum bitrates. Analysis of these cases reveals that inefficient coding schemes, such as using only I-type frames, were employed. The most common segment duration for HLS is 3.6 seconds (60% of the cases), ranging from 3 to 6 seconds. However, the corresponding bitrate can vary significantly. In practice, rate control algorithms aim to maintain an average bitrate close to a target, but this is challenging due to the dynamic nature of video content. To manage this, the quantization parameter (QP) is dynamically adjusted [2]. The QP value determines the amount of detail discarded during compression, and it can be used as a rough indicator of video quality. A higher QP value corresponds to lower quality and vice versa.

To investigate quality, we extracted the QP values and computed their average for all videos. Figure 6(b) shows the QP versus bitrate for each captured video (the entire video for RTMP and each segment for HLS). When the QP value (i.e., quality) is similar, the bitrate varies widely. This indicates that the type of content differs significantly among the streams. For example, some streams feature static content like a person talking against a static background, while others show dynamic content like soccer matches captured from a TV screen. Observing how the bitrate and average QP values change over time can provide insights into the communication's evolution, such as whether representation changes are used. However, definitive conclusions cannot be drawn at this point, as variations could also be due to significant changes in video content.

Finally, we analyzed the frame type patterns used for encoding. Most encodings use a repeated IBP (Intra, B, Predictive) scheme. Some encodings (20.0% for RTMP and 18.4% for HLS) use only I and P frames, or just I frames in two cases. After about 36 frames, a new I frame is inserted. Although one B frame introduces a delay equal to its duration, we speculate that the absence of B frames in some streams may be due to hardware limitations in older devices.

### 5.3 Power Consumption

We connected a Samsung Galaxy S4 4G+ smartphone to a Monsoon Power Monitor [1] to measure its power consumption, following the instructions in [17]. We used the PowerTool software to record and export the data measured by the power monitor.

The screen brightness was set to full in all test cases, and the sound was turned off. The phone was connected to the internet via non-commercial WiFi and LTE networks [2]. Figure 7 shows the results. The idle power draw in the Android application menu was around 900 to 1000 mW, both with WiFi and LTE connections. With the Periscope app open but without video playback, the power draw increased to 1537 mW with WiFi and 2102 mW with LTE, as the app refreshes available videos every 5 seconds. Playing back recorded videos consumes the same amount of power as playing live videos. The power consumption difference between RTMP and HLS is minimal. Enabling the chat feature in Periscope videos raises the power consumption to 2742 mW with WiFi and up to 3599 mW with LTE, slightly less than when broadcasting. However, the test broadcasts did not display the chat on the screen.

We further investigated the impact of the chat feature by monitoring CPU and GPU activity and network traffic. Both processors use DVFS (Dynamic Voltage and Frequency Scaling) to adjust power draw to the workload [17]. We observed an increase of about one-third in the average CPU and GPU clock rates when the chat is enabled, indicating higher power draw by both processors. As noted in Section 5.1, the chat feature can increase network traffic, especially in streams with active chats, leading to higher energy consumption. The energy overhead of the chat feature could be mitigated by caching profile pictures and allowing users to disable their display in the chat.

### 6. Related Work

Live mobile streaming has gained increasing attention, including from a sociological perspective [14]. In the technical domain, research has focused on issues such as distribution optimization [11], including scenarios with direct communication among devices [22]. The crowdsourcing of streaming activities has also been a focus [4, 21].

Stohr et al. have analyzed the YouNow service [15], and Tang et al. have studied the role of human factors in Meerkat and Periscope [16]. However, little is known about the performance of such mobile applications. Most research has focused on systems where the mobile device is only the receiver of live streaming, such as Twitch.Tv [20] or other mobile VoD (Video on Demand) systems [9].

This work, along with the study by Wang et al. [18], provides the first measurement-based analyses of the anatomy and performance of a popular mobile live streaming application. Wang et al. thoroughly examined delay and its origins, usage patterns, and video stalling, particularly the impact of buffer size. They also revealed a specific vulnerability in the service.

### 7. Conclusions

We explored the Periscope service, providing insights into key performance indicators. We addressed both usage patterns and technical characteristics of the service, such as delay and bandwidth. Additionally, we studied the impact of using such a service on mobile devices through the characterization of energy consumption. Our findings contribute to a better understanding of how the challenges of mobile live streaming are being addressed in practice.

### 8. Acknowledgments

This work was financially supported by the Academy of Finland, grant numbers 278207 and 297892, and the Nokia Center for Advanced Research.

### 9. References

[1] Monsoon: www.msoon.com.
[2] Z. Chen and K. N. Ngan. Recent advances in rate control for video coding. Signal Processing: Image Communication, 22(1):19–38, 2007.
[3] Genymotion: https://www.genymotion.com/.
[4] Q. He, J. Liu, C. Wang, and B. Li. Coping with heterogeneous video contributors and viewers in crowdsourced live streaming: A cloud-based approach. IEEE Transactions on Multimedia, 18(5):916–928, May 2016.
[5] ISO/IEC 13818-1. MPEG-2 Part 1 - Systems, Oct. 2007.
[6] ISO/IEC 14496-10 & ITU-T H.264. Advanced Video Coding (AVC), May 2003.
[7] ISO/IEC 14496-3. MPEG-4 Part 3 - Audio, Dec. 2005.
[8] F. Larumbe and A. Mathur. Under the hood: Broadcasting live video to millions. https://code.facebook.com/posts/1653074404941839/under-the-hood-broadcasting-live-video-to-millions/, Dec. 2015.
[9] Z. Li, J. Lin, M.-I. Akodjenou, G. Xie, M. A. Kaafar, Y. Jin, and G. Peng. Watching videos from everywhere: a study of the PPTV mobile VoD system. In Proc. of the 2012 ACM conf. on Internet Measurement Conference, pages 185–198. ACM, 2012.
[10] LibAV Project: https://libav.org/.
[11] T. Lohmar, T. Einarsson, P. Fröjd, F. Gabin, and M. Kampmann. Dynamic adaptive HTTP streaming of live content. In World of Wireless, Mobile and Multimedia Networks (WoWMoM), 2011 IEEE International Symposium on a, pages 1–8, June 2011.
[12] Mitmproxy Project: https://mitmproxy.org/.
[13] Periscope. Year one. https://medium.com/@periscope/year-one-81c4c625f5bc#.mzobrfpig, Mar. 2016.
[14] D. Stewart and J. Littau. Up, periscope: Mobile streaming video technologies, privacy in public, and the right to record. Journalism and Mass Communication Quarterly, Special Issue: Information Access and Control in an Age of Big Data, 2016.
[15] D. Stohr, T. Li, S. Wilk, S. Santini, and W. Effelsberg. An analysis of the younow live streaming platform. In Local Computer Networks Conference Workshops (LCN Workshops), 2015 IEEE 40th, pages 673–679, Oct 2015.
[16] J. C. Tang, G. Venolia, and K. M. Inkpen. Meerkat and periscope: I stream, you stream, apps stream for live streams. In Proceedings of the 2016 CHI Conference on Human Factors in Computing Systems, CHI ’16, pages 4770–4780, New York, NY, USA, 2016. ACM.
[17] S. Tarkoma, M. Siekkinen, E. Lagerspetz, and Y. Xiao. Smartphone Energy Consumption: Modeling and Optimization. Cambridge University Press, 2014.
[18] B. Wang, X. Zhang, G. Wang, H. Zheng, and B. Y. Zhao. Anatomy of a personalized livestreaming system. In Proc. of the 2016 ACM Conference on Internet Measurement Conference (IMC), 2016.
[19] Wireshark Project: https://www.wireshark.org/.
[20] C. Zhang and J. Liu. On crowdsourced interactive live streaming: A twitch.tv-based measurement study. In Proceedings of the 25th ACM Workshop on Network and Operating Systems Support for Digital Audio and Video, NOSSDAV ’15, pages 55–60, New York, NY, USA, 2015. ACM.
[21] Y. Zheng, D. Wu, Y. Ke, C. Yang, M. Chen, and G. Zhang. Online cloud transcoding and distribution for crowdsourced live game video streaming. IEEE Transactions on Circuits and Systems for Video Technology, PP(99):1–1, 2016.
[22] L. Zhou. Mobile device-to-device video distribution: Theory and application. ACM Trans. Multimedia Comput. Commun. Appl., 12(3):38:1–38:23, Mar. 2016.