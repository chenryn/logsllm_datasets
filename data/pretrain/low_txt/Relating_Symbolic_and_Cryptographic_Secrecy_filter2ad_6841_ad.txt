### 4.2 Preservation of Key Secrecy

We can now state our main key-secrecy theorem:

**Theorem 4.1 (Symbolic Key Secrecy Implies Cryptographic Key Secrecy)**  
Let a polynomial-time honest user \( H \) of a structure \(\{T^H_{\text{cry}}, S^H_{\text{cry}}\}\) of the ideal cryptographic library \(\text{Sys}_{\text{cry,id}}\) and a secret-key belief function \(\text{seckeys}\) for \( H \) be given such that the cryptographic library with this user keeps the keys in \(\text{seckeys}\) strictly symbolically secret. Then, every polynomial-time configuration \((\hat{M}^H_{\text{cry}}, S^H_{\text{cry}}, H, A)\) of the real cryptographic library \(\text{Sys}_{\text{cry,real}}^{E,S,A,SE}\) (with the same user \( H \)) keeps the keys in \(\text{seckeys}\) cryptographically secret.

This theorem makes statements about adversary handles and real keys, which only exist in either the ideal or the real cryptographic library, respectively. Hence, the theorem cannot be proved solely as a consequence of the "as secure as" relation, i.e., reactive simulatability, between these two systems, because reactive simulatability only concerns the indistinguishability of the views of the honest users \( H \). We therefore extend the simulatability proof from [11, 12, 9] to the desired property. The basic proof structure is that a combined system \( C^* \) is defined that essentially contains all elements of both the real and the ideal systems. In particular, it contains a database structured like \( D \) but with an additional attribute `word` for real bitstrings corresponding to the terms, as they are generated by the simulator. A second combined system \( C^H \) contains the real bitstrings as generated by the real machines. An important invariant of \( C^* \) is word secrecy, which states that no information flows from certain variables into others that are or may later become known to the adversary. We use the following word-secrecy lemma as a basis for our key secrecy proof.

**Lemma 4.1 (Word Secrecy with Symmetric Keys)**  
Let \( H \) and \( A \) be machines such that \((\hat{M}^H_{\text{cry}}, S^H_{\text{cry}}, H, A)\) is a polynomial-time configuration of the real cryptographic library \(\text{Sys}_{\text{cry,real}}^{E,S,A,SE}\). Then, the following invariant holds in runs of the configuration \(\{C^*_{\text{cryH}}, S^H_{\text{cry}}, H, A\}\) except with negligible probability: Given a state \( D^*_{C^*} \) of the database of the combined system, let the set \(\text{PubVar}\) of "public" variables contain:
- All words \( D^*_{C^*[i].\text{word}} \) with \( D^*_{C^*[i].\text{hnd}_a} \neq \downarrow \), i.e., the real messages where the adversary has learned the corresponding term symbolically.
- The state of \( A \) and \( H \), and the \( T^H_{\text{cry}} \)-part of the state of \( C^* \).
- The secret keys of public-key schemes where the public keys are known to the adversary, i.e., the words \( D^*_{C^*[i-1].\text{type}} \in \{\text{pke}, \text{pks}\} \) and \( D^*_{C^*[i].\text{word}} \) with \( D^*_{C^*[i-1].\text{hnd}_a} \neq \downarrow \).
- The symmetric secret keys for which an encryption or authenticator is public, i.e., the words \( D^*_{C^*[i].\text{word}} \) where an index \( j \) exists with \( D^*_{C^*[j].\text{hnd}_a} \neq \downarrow \) and \( D^*_{C^*[j].\text{arg}[2]} = D^*_{C^*[i-1]} \).

Then, no information from other variables has flowed into \(\text{PubVar}\) in the sense of information flow in programming languages, i.e., static program analysis.

**Definition 4.2 (Secret-key Belief Function)**  
A secret-key belief function for a set \( H \) (intuitively the indices of honest participants) is a function \(\text{seckeys}\) with domain \(\Sigma^*\) and range \((H \times HNDS \times \{\text{ska}, \text{skse}\})^*\).

**Definition 4.3 (Symbolic Key Secrecy for the Ideal Cryptographic Library)**  
Let a user \( H \) suitable for a structure \(\{T^H_{\text{cry}}, S^H_{\text{cry}}\}\) of the cryptographic library \(\text{Sys}_{\text{cry,id}}\) and a secret-key belief function \(\text{seckeys}\) for \( H \) be given. We say that the cryptographic library with this user keeps the keys in \(\text{seckeys}\) strictly symbolically secret if, for all configurations \(\text{conf} = \{T^H_{\text{cry}}, S^H_{\text{cry}}, H, A\}\) of this structure, every \( v \in \text{view}_{\text{conf}}(H) \), and every element \((u_i, \text{lhnd}_i, t_i)\) of the list \(\text{seckeys}(v)\), the term under \((u_i, \text{lhnd}_i)\) is a symbolically secret key of type \( t_i \), and \( D[\text{lhnd}_i] \neq D[\text{lhnd}_j] \) for all \( i \neq j \).

**Definition 4.4 (Cryptographic Key Secrecy for the Real Cryptographic Library)**  
Let a polynomial-time configuration \(\text{conf} = (\hat{M}^H_{\text{cry}}, S^H_{\text{cry}}, H, A)\) of the real cryptographic library \(\text{Sys}_{\text{cry,real}}^{E,S,A,SE}\) and a secret-key belief function \(\text{seckeys}\) be given. We demand that no polynomial-time adversary can distinguish the keys designated by the function \(\text{seckeys}\) from fresh keys. This is illustrated in Figure 5.

**Figure 5. Cryptographic Key Secrecy**

### 5 Conclusion

For the first time, we have related symbolic secrecy, as used in all usual automated proof tools for cryptographic protocols, with real cryptographic secrecy notions. Symbolic secrecy is essentially defined by the absence of terms from an adversary's knowledge set, while cryptographic secrecy is defined by the indistinguishability of the real secret bitstrings from fresh random bitstrings of the same type, given the view of a real, cryptographic adversary. We based our results on the Dolev-Yao-style ideal cryptographic library from [11, 12, 9] and its provably secure implementation. We pointed out why symbolic secrecy does not imply cryptographic secrecy for all terms and in all situations and therefore investigated two particularly important cases separately: message (payload) secrecy and key secrecy. For the former, we came up with a general cryptographic secrecy definition that separates information leakage about a payload by the users themselves from information leakage in the system, and we showed that symbolic key secrecy of the protocol implies that no information leaks in the protocol. For key secrecy, we defined realistic, symbolically verifiable conditions beyond the absence of a key from the adversary's knowledge set and showed that these conditions imply full cryptographic secrecy of the corresponding real key.

### References

[1] M. Abadi and A. D. Gordon. A calculus for cryptographic protocols: The spi calculus. In Proc. 4th ACM Conference on Computer and Communications Security, pages 36–47, 1997.

[2] M. Abadi and J. Jürjens. Formal eavesdropping and its computational interpretation. In Proc. 4th International Symposium on Theoretical Aspects of Computer Software (TACS), pages 82–94, 2001.

[3] M. Abadi and P. Rogaway. Reconciling two views of cryptography: The computational soundness of formal encryption. In Proc. 1st IFIP International Conference on Theoretical Computer Science, volume 1872 of Lecture Notes in Computer Science, pages 3–22. Springer, 2000.

[4] M. Backes. A cryptographically sound Dolev-Yao style security proof of the Otway-Rees protocol. In Proc. 9th European Symposium on Research in Computer Security (ESORICS), volume 3193 of Lecture Notes in Computer Science, pages 89–108. Springer, 2004.

[5] M. Backes and C. Jacobi. Cryptographically sound and machine-assisted verification of security protocols. In Proc. 20th Annual Symposium on Theoretical Aspects of Computer Science (STACS), volume 2607 of Lecture Notes in Computer Science, pages 675–686. Springer, 2003.

[6] M. Backes and B. Pfitzmann. Computational probabilistic non-interference. In Proc. 7th European Symposium on Research in Computer Security (ESORICS), volume 2502 of Lecture Notes in Computer Science, pages 1–23. Springer, 2002.

[7] M. Backes and B. Pfitzmann. A cryptographically sound security proof of the Needham-Schroeder-Lowe public-key protocol. In Proc. 23rd Conference on Foundations of Software Technology and Theoretical Computer Science (FSTTCS), pages 1–12, 2003. Full version in IACR Cryptology ePrint Archive 2003/121, Jun. 2003, http://eprint.iacr.org/.

[8] M. Backes and B. Pfitzmann. Intransitive non-interference for cryptographic purposes. In Proc. 24th IEEE Symposium on Security & Privacy, pages 140–152, 2003.

[9] M. Backes and B. Pfitzmann. Symmetric encryption in a simulatable Dolev-Yao style cryptographic library. In Proc. 17th IEEE Computer Security Foundations Workshop (CSFW), 2004. Full version in IACR Cryptology ePrint Archive 2004/059, Feb. 2004, http://eprint.iacr.org/.

[10] M. Backes, B. Pfitzmann, M. Steiner, and M. Waidner. Polynomial fairness and liveness. In Proc. 15th IEEE Computer Security Foundations Workshop (CSFW), pages 160–174, 2002.

[11] M. Backes, B. Pfitzmann, and M. Waidner. A composable cryptographic library with nested operations (extended abstract). In Proc. 10th ACM Conference on Computer and Communications Security, pages 220–230, 2003. Full version in IACR Cryptology ePrint Archive 2003/015, Jan. 2003, http://eprint.iacr.org/.

[12] M. Backes, B. Pfitzmann, and M. Waidner. Symmetric authentication within a simulatable cryptographic library. In Proc. 8th European Symposium on Research in Computer Security (ESORICS), volume 2808 of Lecture Notes in Computer Science, pages 271–290. Springer, 2003. Extended version in IACR Cryptology ePrint Archive 2003/145, Jul. 2003, http://eprint.iacr.org/.

[13] M. Backes, B. Pfitzmann, and M. Waidner. A general composition theorem for secure reactive systems. In Proc. 1st Theory of Cryptography Conference (TCC), volume 2951 of Lecture Notes in Computer Science, pages 336–354. Springer, 2004.

[14] R. Canetti and J. Herzog. Universally composable symbolic analysis of cryptographic protocols (the case of encryption-based mutual authentication and key exchange). Cryptology ePrint Archive, Report 2004/334, 2004. http://eprint.iacr.org/.

[15] D. Dolev and A. C. Yao. On the security of public key protocols. IEEE Transactions on Information Theory, 29(2):198–208, 1983.

[16] S. Even and O. Goldreich. On the security of multi-party ping-pong protocols. In Proc. 24th IEEE Symposium on Foundations of Computer Science (FOCS), pages 34–39, 1983.

[17] J. Herzog, M. Liskov, and S. Micali. Plaintext awareness via key registration. In Advances in Cryptology: CRYPTO 2003, volume 2729 of Lecture Notes in Computer Science, pages 548–564. Springer, 2003.

[18] R. Kemmerer, C. Meadows, and J. Millen. Three systems for cryptographic protocol analysis. Journal of Cryptology, 7(2):79–130, 1994.

[19] P. Laud. Semantics and program analysis of computationally secure information flow. In Proc. 10th European Symposium on Programming (ESOP), pages 77–91, 2001.

[20] G. Lowe. Breaking and fixing the Needham-Schroeder public-key protocol using FDR. In Proc. 2nd International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS), volume 1055 of Lecture Notes in Computer Science, pages 147–166. Springer, 1996.

[21] G. Lowe. Casper: A compiler for the analysis of security protocols. In Proc. 10th IEEE Computer Security Foundations Workshop (CSFW), pages 18–30, 1997.

[22] C. Meadows. Using narrowing in the analysis of key management protocols. In Proc. 10th IEEE Symposium on Security & Privacy, pages 138–147, 1989.

[23] M. Merritt. Cryptographic Protocols. PhD thesis, Georgia Institute of Technology, 1983.

[24] D. Micciancio and B. Warinschi. Soundness of formal encryption in the presence of active adversaries. In Proc. 1st Theory of Cryptography Conference (TCC), volume 2951 of Lecture Notes in Computer Science, pages 133–151. Springer, 2004.

[25] J. K. Millen. The interrogator: A tool for cryptographic protocol security. In Proc. 5th IEEE Symposium on Security & Privacy, pages 134–141, 1984.

[26] L. Paulson. The inductive approach to verifying cryptographic protocols. Journal of Cryptology, 6(1):85–128, 1998.

[27] B. Pfitzmann and M. Waidner. A model for asynchronous reactive systems and its application to secure message transmission. In Proc. 22nd IEEE Symposium on Security & Privacy, pages 184–200, 2001. Extended version of the model (with Michael Backes) IACR Cryptology ePrint Archive 2004/082, http://eprint.iacr.org/.

[28] A. W. Roscoe. Modelling and verifying key-exchange protocols using CSP and FDR. In Proc. 8th IEEE Computer Security Foundations Workshop (CSFW), pages 98–107, 1995.

[29] S. Schneider. Security properties and CSP. In Proc. 17th IEEE Symposium on Security & Privacy, pages 174–187, 1996.

[30] A. C. Yao. Theory and applications of trapdoor functions. In Proc. 23rd IEEE Symposium on Foundations of Computer Science (FOCS), pages 80–91, 1982.