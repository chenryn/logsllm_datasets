### Approach and Assumptions

The approach presented in this paper is specifically designed for trusted programs. We make no assumptions about the relationship between untrusted programs and system data. In fact, we are certain that there is system data that should not be accessed by most, if not all, untrusted programs. It is important to note that verifying the compliance of untrusted programs offers no advantage, as the system does not rely on these programs to enforce its security goals. Untrusted programs have no special authority.

### 7. Related Work

#### Policy Analysis

Policies typically contain a significant number of rules that dictate how elements in a given environment must be controlled. Due to the size and complexity of policies, it is challenging to manually evaluate whether a policy satisfies a given property. Therefore, tools for automatic policy analysis are essential. Some of the tools developed for analyzing SELinux policies include APOL [35], PAL [29], SLAT [10], Gokyo [16], and PALMS [15]. However, these tools primarily focus on single security policies. Among them, only PALMS provides mechanisms for comparing policies, particularly addressing compliance evaluation. Our approach to compliance is more comprehensive and allows for the automation of the compliance problem.

#### Policy Modeling

A formal model is necessary to reason about the features of a given policy. This model should be largely independent of the specific representation of the targeted policies and should enable comparisons among different policies. Several models have been proposed, each defining a set of components that need to be considered when translating a policy into an intermediate representation. For example, Cholvy and Cuppens [6] focus on permissions, obligations, and prohibitions, providing a mechanism to check regulation consistency. Bertino et al. [3] focus on subjects, objects, and privileges, as well as the organization of these components and the set of authorization rules that define their relationships. Kock et al. [18] represent policies as graphs with nodes representing components (processes, users, objects) and edges representing rules, along with a set of constraints globally applied to the system. Policy modeling is a crucial step in evaluating compliance, as different policies must be translated into a common model to be compared and their properties evaluated.

#### Policy Reconciliation

Policy compliance problems can be similar to policy reconciliation problems. Given two policies A and B that define a set of requirements, a reconciliation algorithm seeks a specific policy instance C that satisfies the stated requirements. In a general sense, policy compliance means determining whether any part of policy A is in conflict with policy B. Previous work [21] has shown that reconciling three or more policies is intractable. Compliance is also intractable, as it requires checking all possible paths in B against all possible paths in A. Although both problems test policy properties and are non-tractable in general cases, they differ in their inputs and expected outputs. In reconciliation, an instance that satisfies the requirements must be calculated, whereas in compliance, policy instances are given and one is evaluated against the other.

#### Security-by-Contract Paradigm

The security-by-contract paradigm is similar to our policy compliance model. It supports the installation and execution of potentially malicious third-party code on a local platform. Third-party applications are expected to come with a security contract specifying their behavior regarding security issues. The first step in the verification process is to check whether the behaviors allowed by the contract are also allowed by the local policy [8]. In recent projects involving contract matching, contracts and policies are represented as security automata, and the problem of contract matching becomes one of testing language inclusion for automata. While there is no known polynomial technique to test language inclusion for non-deterministic automata, determining language inclusion for deterministic automata is known to be polynomial [9]. One key advantage of our representation is that we verify policies actually implemented by the enforcement mechanism, rather than high-level statements that may not be implemented due to the semantic gap between specification and implementation. Additionally, the enforcement mechanism is part of the architecture.

### 8. Conclusion

This work aims to unify application and system security policies. Since applications and system policies are developed independently, they use different language syntax and semantics, making it difficult to prove or disprove that programs enforce system security goals. The emergence of mandatory access control systems and security-typed languages makes it possible to automatically evaluate whether applications and systems enforce common security goals. We frame this problem as a verification problem: we want to evaluate if applications are compliant with system policies. Compliance verification involves ensuring that the system protects applications from tampering and verifying that applications enforce system security goals.

To automate the mapping between program and system policies, we propose the PIDSI (Program Integrity Dominates System Data Integrity) approach. This approach is based on the observation that, in general, program objects have higher integrity than system objects. We tested the trusted program core of the SELinux system to see if its policy was compatible with the PIDSI approach. Our findings indicate that our approach accurately represents the SELinux security design with minor exceptions and requires little or no feedback from administrators to function effectively.

### Notes
1. Program verification (e.g., STL compilation) enforces the complete mediation guarantee.
2. Currently, module policies are not included in Linux packages, but RedHat is interested in including SELinux module policies in its rpm packages in the future [36].
3. SELinux uses the term "type" for its labels, as it employs an extended Type Enforcement policy [5].
4. As described, this must be done manually now via `semodule`, but the intention is to install the module policy when loading a package containing it.
5. Violating the confidentiality of SSH keys enables a large class of integrity attacks, a phenomenon discussed by Sean Smith [31].

### References
[1] ANDERSON, J. P. Computer security technology planning study. Tech. Rep. ESD-TR-73-51, The Mitre Corporation, Air Force Electronic Systems Division, Hanscom AFB, Badford, MA, 1972.
[3] BERTINO, E., CATANIA, B., FERRARI, E., AND PERLASCA, P. A logical framework for reasoning about access control models. In Proceedings of SACMAT (2001).
[4] BIBA, K. J. Integrity considerations for secure computer systems. Tech. Rep. MTR-3153, MITRE, April 1977.
[5] BOEBERT, W. E., AND KAIN, R. Y. A practical alternative to hierarchical integrity policies. In Proceedings of the 8th National Computer Security Conference (1985).
[6] CHOLVY, L., AND CUPPENS, F. Analyzing Consistency of Security Policies. In Proceedings of the 1997 IEEE Symposium on Security and Privacy (Oakland, CA, USA, May 1997), pp. 103–112.
[7] CLARK, D. D., AND WILSON, D. A comparison of military and commercial security policies. In 1987 IEEE Symposium on Security and Privacy (May 1987).
[8] DESMET, L., JOOSEN, W., MASSACCI, F., NALIUKA, K., PHILIPPAERTS, P., PIESSENS, F., AND VANOVERBERGHE, D. A flexible security architecture to support third-party applications on mobile devices. In Proceedings of the ACM Computer Security Architecture Workshop (2007).
[9] DRAGONI, N., MASSACCI, F., NALIUKA, K., SEBASTIANI, R., SIAHAAN, I., QUILLIAN, T., MATTEUCCI, I., AND SHAEFER, C. Methodologies and tools for contract matching. Security of Software and Services for Mobile Systems.
[10] GUTTMAN, J. D., HERZOG, A. L., RAMSDELL, J. D., AND SKORUPKA, C. W. Verifying information flow goals in Security-Enhanced Linux. J. Comput. Secur. 13, 1 (2005), 115–134.
[11] HANSON, C. SELinux and MLS: Putting the pieces together. In Proceedings of the 2nd Annual SELinux Symposium (2006).
[12] HICKS, B., KING, D., MCDANIEL, P., AND HICKS, M. Trusted declassification: High-level policy for a security-typed language. In Proceedings of the 1st ACM SIGPLAN Workshop on Programming Languages and Analysis for Security (PLAS ’06) (Ottawa, Canada, June 10 2006), ACM Press.
[13] HICKS, B., RUEDA, S., JAEGER, T., AND MCDANIEL, P. From trusted to secure: Building and executing applications that enforce system security. In Proceedings of the USENIX Annual Technical Conference (2007).
[14] HICKS, B., RUEDA, S., JAEGER, T., AND MCDANIEL, P. Integrating SELinux with security-typed languages. In Proceedings of the 3rd SELinux Symposium (Baltimore, MD, USA, March 2007).
[15] HICKS, B., RUEDA, S., ST. CLAIR, L., JAEGER, T., AND MCDANIEL, P. A logical specification and analysis for SELinux MLS policy. In Proceedings of the ACM Symposium on Access Control Models and Technologies (SACMAT) (Antipolis, France, June 2007).
[16] JAEGER, T., EDWARDS, A., AND ZHANG, X. Managing access control policies using access control spaces. In SACMAT ’02: Proceedings of the Seventh ACM Symposium on Access Control Models and Technologies (2002), ACM Press, pp. 3–12.
[17] JAEGER, T., EDWARDS, A., AND ZHANG, X. Consistency analysis of authorization hook placement in the Linux security modules framework. ACM Transactions on Information and System Security (TISSEC) 7, 2 (May 2004), 175–205.
[18] KOCK, M., MACINI, L., AND PARISI-PRESICCE, F. On the specification and evolution of access control policies. In Proceedings of SACMAT (2001).
[19] LI, N., MAO, Z., AND CHEN, H. Usable mandatory integrity protection for operating systems. In IEEE Symposium on Security and Privacy (2007).
[20] MAYER, F., MACMILLAN, K., AND CAPLAN, D. SELinux by Example. Prentice Hall, 2007.
[2] BELL, D. E., AND LAPADULA, L. J. Secure computer systems: Unified exposition and multics interpretation. Tech. rep., MITRE MTR-2997, March 1976.
[21] MCDANIEL, P., AND PRAKASH, A. Methods and limitations of security policy reconciliation. ACM Transactions on Information and System Security V, N (May 2006), 1–32.
[22] MCGRAW, G., AND FELTEN, E. Java Security. Wiley Computer, 1997.
[23] MYERS, A. C. JFlow: Practical mostly-static information flow control. In POPL ’99, pp. 228–241.
[24] MYERS, A. C., AND LISKOV, B. A decentralized model for information flow control. In Proceedings of the 16th ACM Symposium on Operating System Principles (October 1997).
[25] MYERS, A. C., AND LISKOV, B. Protecting privacy using the decentralized label model. ACM Transactions on Software Engineering and Methodology 9, 4 (2000), 410–442.
[26] MYERS, A. C., NYSTROM, N., ZHENG, L., AND ZDANCEWIC, S. Jif: Java + information flow. Software release. Located at http://www.cs.cornell.edu/jif, July 2001.
[27] Security-enhanced Linux. Available at http://www.nsa.gov/selinux.
[28] POTTIER, F., AND SIMONET, V. Information Flow Inference for ML. In Proceedings ACM Symposium on Principles of Programming Languages (Jan. 2002), pp. 319–330.
[29] SARNA-STAROSTA, B., AND STOLLER, S. Policy analysis for Security-Enhanced Linux. In Proceedings of the 2004 Workshop on Issues in the Theory of Security (WITS) (April 2004), pp. 1–12. Available at http://www.cs.sunysb.edu/˜stoller/WITS2004.html.
[30] SHANKAR, U., JAEGER, T., AND SAILER, R. Toward automated information-flow integrity verification for security-critical applications. In Proceedings of the 2006 ISOC Networked and Distributed Systems Security Symposium (NDSS’06) (San Diego, CA, USA, Feb. 2006).
[31] SMITH, S. W. Outbound authentication for programmable secure coprocessors. In European Symposium on Research in Computer Security (ESORICS) (2002), pp. 72–89.
[32] STONY BROOK UNIVERSITY. COMPUTER SCIENCE DEPARTMENT. XSB: Logic programming and deductive database system for Unix and Windows. Available at http://xsb.sourceforge.net.
[33] SWAMY, N., CORCORAN, B., AND HICKS, M. Fable: A language for enforcing user-defined security policies. In In Proceedings of the IEEE Symposium on Security and Privacy (Oakland), May 2008. To appear.
[34] TRESYS TECHNOLOGY. SELinux Policy Server. Available at http://www.tresys.com/selinux/selinux policy server.
[35] TRESYS TECHNOLOGY. SETools - policy analysis tools for SELinux. available at http://oss.tresys.com/projects/setools.
[36] WALSH, D. SELinux Mailing List. http://www.engardelinux.org/modules/index/list_archives.cgi?list=selinu%x&page=0609.html&month=2007-12, December 2007.
[37] The X Foundation: http://www.x.org.

---

This version of the text is more structured, coherent, and professional, with clear headings and improved readability.