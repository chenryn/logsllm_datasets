### Enhancing Security and Scalability in Topology Discovery Mechanisms

While advanced topology discovery mechanisms can provide better security and scalability guarantees [6, 33], their adoption is often challenging due to implementation difficulties. In this section, we propose simple yet effective ways to extend existing countermeasures to defend against the attacks identified in Section 5.

#### Link Fabrication Attacks via Forged LLDP Packets

Protecting the integrity of LLDP (Link Layer Discovery Protocol) packets is essential to prevent adversaries from sending forged LLDP packets. As shown in Section 5, some proposed defenses lack freshness, making them vulnerable to replay attacks. For instance, TopoGuard suggested computing a MAC tag over the DPID (Data Path Identifier) and port of the source switch using a cryptographic key known only to the controller. To address this, Alharbi et al. proposed updating the cryptographic key in every LLDP round [3]. However, this approach requires the controller to track the keys used in each round, which can be cumbersome.

To overcome these limitations, we suggest computing the MAC tag over the DPID, the port, and a timestamp using a single cryptographic key. This method leverages the existing timestamp field in LLDP packets, which is used for calculating link latency. Our modification enhances security by protecting against adversaries who:
1. Tamper with the DPID or port to conduct link fabrication attacks.
2. Alter the timestamp field inside the LLDP packets (e.g., to execute a Reverse Loop attack).

#### Link Fabrication Attacks Using Out-of-Band Channels

The security mechanisms implemented in the LLI (Link Layer Interface) module can be improved. One enhancement would be for the LLI module to distinguish between LLDP packets received from existing links and those from new links. We recommend allowing higher tolerances in the latencies of existing links to mitigate attacks where adversaries aim to remove genuine links. However, even with these improvements, the LLI module can only partially mitigate such attacks. Advanced hardware used by adversaries to relay packets, as noted by Skowyra et al. [49], can still bypass these defenses. The most effective way to prevent relay attacks is through distance bounding protocols [7], which determine an upper bound on the physical distance between two parties using a combination of physical properties and cryptographic challenge-response protocols.

#### Host Location Hijacking Attacks

The HTS (Host Tracking System) relies on unencrypted and unauthenticated OpenFlow packet_in packets to determine hosts' locations in the network. This lack of strong identifier bindings makes it possible to hijack the location of a victim's host. SecureBinder was introduced to protect SDN networks against host location hijacking attacks by modifying the 802.1x authentication protocol. While SecureBinder significantly mitigates these attacks, it is based on a legacy 802.1x protocol that authenticates hosts only once per connection to a new switch. This can be sufficient if the controller can reliably infer a port disconnection from a host. As future work, we plan to investigate a middle-ground solution where the controller authenticates a host with a certain probability each time it sends a packet, rather than only once. Several studies have shown that performing security operations on all packets may not be scalable in SDN networks, suggesting instead to apply security mechanisms to:
1. A set of randomly selected packets [5].
2. Per flow [55].

### Conclusions

This paper provides an in-depth evaluation of the security of topology discovery mechanisms in SDN. We conducted a security analysis of state-of-the-art defenses, including TopoGuard, TopoGuard+, SPV, and SecureBinder. Our analysis revealed that even with TopoGuard/TopoGuard+ in place, adversaries can still create fake links or remove genuine ones. Additionally, we provided evidence that SPV and SecureBinder are likely vulnerable to attacks. Our work also uncovered weaknesses in the Floodlight controller, leading to the identification and demonstration of two new topology attacks: Reverse Loop and Topology Freezing. These attacks can be used for various purposes, from DoS attacks to misleading behaviors as a precursor to more sophisticated attacks. Finally, we discussed potential ways to improve existing countermeasures to defend against the new attacks we discovered.

### Acknowledgements

We thank our shepherd, Seungwon Shin, and the anonymous reviewers for their constructive and valuable comments. We also thank Allarna Janson for her help and support. During his research stay at the University of Padua, Eduard Marin was supported by a Travel Grant from the Research Foundation - Flanders (FWO file number V413318N). This work was partially supported by the Research Council KU Leuven (C16/15/058), the FWO (SBO project SPITE), and the European Commission (LOCARD project, Grant Agreement no. 832735).

### References

[1] Pica8: Flow scalability per broadcom chipset. https://docs.pica8.com/display/picos2102cg/Flow+Scalability+per+Broadcom+Chipset [Online; accessed 7-Dec-2018].

[2] A. Abdou, P. C. van Oorschot, and T. Wan. Comparative Analysis of Control Plane Security of SDN and Conventional Networks. IEEE Communications Surveys Tutorials, pages 3542–3559, 2018.

[3] T. Alharbi, M. Portmann, and F. Pakzad. The (in)security of Topology Discovery in Software Defined Networks. In Local Computer Networks (LCN). pages 502–505, 2015.

[4] A. Alimohammadifar, S. Majumdar, T. Madi, Y. Jarraya, M. Pourzandi, L. Wang, and M. Debbabi. Stealthy Probing-Based Verification (SPV): An Active Approach to Defending Software Defined Networks Against Topology Poisoning Attacks. In European Symposium on Research in Computer Security (ESORICS). pages 463–484, 2018.

[5] M. Ambrosin, M. Conti, F. De Gaspari, and R. Poovendran. Lineswitch: Tackling IEEE/ACM control plane saturation attacks in software-defined networking. Transactions on Networking (TON) 25, 2, pages 1206–1219, 2017.

[6] A. Azzouni, R. Boutaba, T. Mai Trang Nguyen, and G. Pujolle. sOFTDP: Secure and Efficient Topology Discovery Protocol for SDN. In CoRR, Vol. abs/1705.04527. arXiv:1705.04527 http://arxiv.org/abs/1705.04527

[7] S. Brands and D. Chaum. Distance-bounding Protocols. In International Conference on the Theory and Applications of Cryptographic Techniques (EUROCRYPT). pages 344–359, 1994.

[8] J. Cao, Q. Li, R. Xie, K. Sun, G. Gu, M. Xu, and Y. Yang. The CrossPath Attack: Disrupting the SDN Control Channel via Shared Links. In USENIX Security Symposium. pages 19–36, 2019.

[9] H. Chen and T. Benson. The Case for Making Tight Control Plane Latency Guarantees in SDN Switches. In Symposium on SDN Research (SOSR). pages 150–156, 2017.

[10] A. R. Curtis, J. C. Mogul, J. Tourrilhes, P. Yalagandula, P. Sharma, and S. Banerjee. DevoFlow: Scaling Flow Management for High-performance Networks. In ACM SIGCOMM Conference. pages 254–265, 2011.

[11] M. Dhawan, R. Poddar, K. Mahajan, and V. Mann. SPHINX: Detecting Security Attacks in Software-Defined Networks. In Network and Distributed System Security Symposium (NDSS). pages 8–11, 2015.

[12] Raspberry Pi Foundation. 2018. Raspberry Pi 3 Model B. https://www.raspberrypi.org/products/raspberry-pi-3-model-b/ [Online; accessed 7-Dec-2018].

[13] Linux Fundation. Open vSwitch version 2.5.5 LTS. http://openvswitch.org/releases/openvswitch-2.5.5.tar.gz [Online; accessed 7-Dec-2018].

[14] K. He, J. Khalid, A. Gember-Jacobson, S. Das, C. Prakash, A. Akella, L. Erran Li, and M. Thottan. Measuring Control Plane Latency in SDN-enabled Switches. In Symposium on SDN Research (SOSR). pages 25:1–25:6, 2015.

[15] S. Hong, L. Xu, H. Wang, and G. Gu. Poisoning Network Visibility in Software-Defined Networks: New Attacks and Countermeasures. In Network and Distributed System Security Symposium (NDSS). pages 8–11, 2015.

[16] IEEE. 2016. IEEE Standard for Ethernet. IEEE Std 802.3-2015 (Revision of IEEE Std 802.3-2012), 1–4017. https://doi.org/10.1109/IEEESTD.2016.7428776

[17] S. Jain, A. Kumar, S. Mandal, J. Ong, L. Poutievski, A. Singh, S. Venkata, J. Wanderer, J. Zhou, M. Zhu, J. Zolla, U. Hölzle, S. Stuart, and A. Vahdat. B4: Experience with a Globally-deployed Software Defined WAN. In ACM SIGCOMM Conference. pages 3–14, 2013.

[18] S. Jero, X. Bu, C. Nita-Rotaru, H. Okhravi, R. Skowyra, and S. Fahmy. BEADS: Automated Attack Discovery in OpenFlow-Based SDN Systems. In Symposium on Research in Attacks, Intrusions, and Defenses (RAID). pages 311–333, 2017.

[19] S. Jero, W. Koch, R. Skowyra, H. Okhravi, C. Nita-Rotaru, and D. Bigelow. Identifier Binding Attacks and Defenses in Software-Defined Networks. In USENIX Security Symposium. pages 415–432, 2017.

[20] N. Katta, O. Alipourfard, J. Rexford, and D. Walker. CacheFlow: Dependency-Aware Rule-Caching for Software-Defined Networks. In Symposium on SDN Research (SOSR). pages 6:1–6:12, 2016.

[21] H. Kim and H. Ju. Efficient method for inferring a firewall policy. In Asia-Pacific Network Operations and Management Symposium (APNOMS). pages 1–8, 2011.

[22] J. King and K. Lauerman. 2014.

[23] R. Kloti, V. Kotronis, and P. Smith. 2013. OpenFlow: A security analysis. In IEEE International Conference on Network Protocols (ICNP). pages 1–6.

[24] D. Kreutz, F. Ramos, and P. Verissimo. Towards secure and dependable software-defined networks. In ACM SIGCOMM workshop on Hot topics in software defined networking. pages 55–60, 2013.

[25] D. Kreutz, F. Ramos, P. Verissimo, C. Esteve Rothenberg, S. Azodolmolky, and S. Uhlig. Software-Defined Networking: A Comprehensive Survey. In ArXiv e-prints, 2014. https://doi.org/10.1109/JPROC.2014.2371999

[26] A. Lazaris, D. Tahara, X. Huang, E. Li, A. Voellmy, Y. R. Yang, and M. Yu. Tango: Simplifying SDN Control with Automatic Switch Property Inference, Abstraction, and Optimization. In ACM International on Conference on Emerging Networking Experiments and Technologies (CoNEXT). pages 199–212, 2014.

[27] S. Lee, C. Yoon, C. Lee, S. Shin, V. Yegneswaran, and P. A Porras. DELTA: A Security Assessment Framework for Software-Defined Networks. In Network and Distributed System Security Symposium (NDSS), 2017.

[28] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson, J. Rexford, S. Shenker, and J. Turner. OpenFlow: enabling innovation in campus networks. ACM SIGCOMM Computer Communication Review, pages 69–74, 2008.

[29] A. Nehra, M. Tripathi, M. Singh Gaur, R. Babu Battula, and C. Lal. TILAK: A token-based prevention approach for topology discovery threats in SDN. International Journal of Communication Systems, pages e3781, 2018.

[30] Big Switch Networks. 2018. Floodlight. http://www.projectfloodlight.org/floodlight/ [Online; accessed 7-Dec-2018].

[31] Big Switch Networks. 2018. Floodlight Git repository. https://github.com/floodlight/floodlight [Online; accessed 7-Dec-2018].

[50] L. Xu, J. Huang, S. Hong, J. Zhang, and G. Gu. Attacking the brain: Races in the SDN control plane. In USENIX Security Symposium. pages 451–468, 2017.

[51] L. Xue, X. Ma, X. Luo, E. W.W. Chan, T. T.N. Miu, and G. Gu. LinkScope: Towards Detecting Target Link Flooding Attacks. IEEE Transactions on Information Forensics and Security (TIFS), 2018.

[52] S. Hassas Yeganeh, A. Tootoonchian, and Y. Ganjali. On scalability of software-defined networking. In IEEE Communications Magazine. pages 136–141, 2013.

[53] M. Yu, J. Rexford, M. J. Freedman, and J. Wang. Scalable Flow-based Networking with DIFANE. In ACM SIGCOMM Conference. pages 351–362, 2010.

[32] P. P. Lin, P. Li, and V. L. Nguyen. Inferring OpenFlow rules by active probing in software-defined networks. In International Conference on Advanced Communication Technology (ICACT). pages 415–420, 2017.

[33] F. Pakzad, M. Portmann, W. Lum Tan, and J. Indulska. Efficient topology discovery in openflow-based software defined networks. Computer Communications 77, pages 52–61, 2016.

[34] C. Rigney, S. Willens, A. Rubens, and W. Simpson. Remote Authentication Dial In User Service (RADIUS), 2000.

[35] T. Sasaki, C. Pappas, T. Lee, T. Hoefler, and A. Perrig. SDNsec: Forwarding Accountability for the SDN Data Plane. In International Conference on Computer Communication and Networks (ICCCN). pages 1–10, 2016.

[36] S. Sharma, D. Staessens, D. Colle, M. Pickavet, and P. Demeester. Automatic bootstrapping of OpenFlow networks. In IEEE Workshop on Local Metropolitan Area Networks (LANMAN). pages 1–6, 2013.

[37] S. Shin, P. Porras, V. Yegneswaran, M. Fong, G. Gu, and M. Tyson. FRESCO: Modular Composable Security Services for Software-Defined Networks. In Annual Network and Distributed System Security Symposium (NDSS), 2013.

[38] S. Shin, V. Yegneswaran, P. Porras, and G. Gu. Avant-guard: Scalable and vigilant switch flow management in software-defined networks. In ACM SIGSAC conference on Computer and communications security (CCS). pages 413–424, 2013.

[39] P. Shrivastava, A. Agarwal, and K. Kataoka. Detection of Topology Poisoning by Silent Relay Attacker in SDN. In Annual International Conference on Mobile Computing and Networking (MobiCom). pages 792–794, 2018.

[40] R. Skowyra, L. Xu, G. Gu, V. Dedhia, T. Hobson, H. Okhravi, and J. Landry. Effective topology tampering attacks and defenses in software-defined networks. In International Conference on Dependable Systems and Networks (DSN). pages 374–385, 2018.

[41] J. Sonchack, A. Dubey, A. J. Aviv, J. M. Smith, and E. Keller. Timing-based Reconnaissance and Defense in Software-defined Networks. In Annual Conference on Computer Security Applications (ACSAC). pages 89–100, 2016.

[42] A. Steinhoff, A. Wiesmaier, and R. Araújo. The State of the Art in DNS Spoofing. In International Conference on Applied Cryptography and Network Security (ACNS), 2006.

[43] Mininet Team. 2018. Mininet. http://mininet.org [Online; accessed 7-Dec-2018].

[44] K. Thimmaraju, L. Schiff, and S. Schmid. Outsmarting network security with SDN teleportation. In IEEE European Symposium on Security and Privacy (EuroS&P). pages 563–578, 2017.

[45] B. E. Ujcich, S. Jero, A. Edmundson, Q. Wang, R. Skowyra, J. Landry, A. Bates, W. H. Sanders, C. Nita-Rotaru, and H. Okhravi. Cross-App Poisoning in Software-Defined Networking. In ACM SIGSAC Conference on Computer and Communications Security (CCS). pages 648–663, 2018.

[46] A. Wang, Y. Guo, F. Hao, T.V. Lakshman, and S. Chen. Scotch: Elastically Scaling Up SDN Control-Plane Using vSwitch Based Overlay. In ACM International on Conference on Emerging Networking Experiments and Technologies (CoNEXT). pages 403–414, 2014.

[47] H. Wang, G. Yang, P. Chinprutthiwong, L. Xu, Y. Zhang, and G. Gu. Towards Fine-grained Network Security Forensics and Diagnosis in the SDN Era. In ACM SIGSAC Conference on Computer and Communications Security (CCS). pages 3–16, 2018.

[48] H. Xu, Z. Yu, X. Yang Li, C. Qian, L. Huang, and T. Jung. Real-time update with joint optimization of route selection and update scheduling for SDNs. In International Conference on Network Protocols (ICNP). pages 1–10, 2016.

[49] Lei Xu. TopoGuard+ git repository. https://github.com/xuraylei/TopoGuard_Plus [Online; accessed 7-Dec-2018].

[54] M. Zhang, G. Li, L. Xu, J. Bi, G. Gu, and J. Bai. Control Plane Reflection Attacks in SDNs: New Attacks and Countermeasures. In Symposium on Research in Attacks, Intrusions and Defenses (RAID), 2018.

[55] P. Zhang. Towards rule enforcement verification for software defined networks. In IEEE Conference on Computer Communications (INFOCOM). pages 1–9, 2017.