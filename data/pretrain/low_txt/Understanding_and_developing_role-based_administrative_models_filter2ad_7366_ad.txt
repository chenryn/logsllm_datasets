### Optimized Text

Given \( w \in \sigma(y) \), it follows that for all \( z \in [x, y] \), \( z \in \sigma(y) \) and \([z] \subseteq \sigma(y)\). This result is derived from the observation that any smaller administrative domain does not contain \( y \).

**Corollary 16.** Encapsulated ranges are either nested or disjoint.

**Proof.** The result follows directly from Lemma 2 and Lemma 15.

The converse of Lemma 15 is not true because an administrative domain is not necessarily a range. However, we introduce the following definition and result:

**Definition 17.** An administrative range is a range \([b, t] \in R\) such that for all \( x \in [b, t] \), \(\uparrow x \subseteq \sigma(t)\) and \(\downarrow x \subseteq \sigma(b)\).

Note that the definition of an administrative range is the symmetric analogue of the definition of an administrative scope. We will use this fact later when deriving conditions for an operation to preserve encapsulated ranges.

**Proposition 18.** The range \([b, t]\) is encapsulated if and only if \([b, t]\) is an administrative range.

**Proof.** The result follows from the definition of an administrative range and the proof method of Lemma 15.

An encapsulated range does not include the endpoints that define it. In other words, an encapsulated range is analogous to a strict administrative scope (which omits the top element in an administrative domain). To avoid introducing further notation, we denote the encapsulated range with top element \( a \) as \(\sigma(a)\).

In ARBAC97, the ranges that appear in the can-modify relation are called authority ranges. These are defined by the system administrator and must be encapsulated ranges. Additionally, each pair of authority ranges must be either nested or disjoint. Corollary 16 shows that this requirement is redundant since encapsulated ranges are either nested or disjoint by definition.

The success of many operations in ARBAC97 depends on the notion of an immediate authority range. Since authority ranges are nested or disjoint by definition, there exists a smallest authority range to which any given role belongs. The immediate authority range of a role \( r \) is analogous to \([r]\).

We now place ARBAC97 in the context of the framework developed in this paper. In ARBAC97, every hierarchy operation must preserve the encapsulation of all authority ranges. The designers of ARBAC97 do not provide rules or methods for determining whether a hierarchy operation satisfies this condition. Using the approach described in the previous section, we can explicitly state sufficient conditions for an operation to preserve encapsulated ranges. Specifically, \( U \) is defined as the set of encapsulated ranges, \( C \) is the analogue of \( C2 \) for encapsulated ranges, and can-modify is replaced by can-administer.

In Table 5, we summarize the conditions that must be satisfied for a hierarchy operation to succeed in the ARBAC97 model. We write \( x \in \sigma(a) \) as an abbreviation for "there exists \( r \in R \) such that \( x \in \sigma(r) \) and \((a, r) \in \text{can-administer}\)". Expressions such as \( X \subseteq \sigma(a) \) and \( x \in \sigma(a) \) have analogous interpretations.

The second column restates the conditions given by Sandhu in the original formulation of the model. Notice the use of \(\sigma(a)\) in the second column, corresponding to the fact that the basic unit of administration in ARBAC97 is the encapsulated range, which does not include the endpoints of the range. We have simplified some of the conditions for the addRole and addEdge operations, which were permitted in the original formulation of ARBAC97 provided one of three conditions was satisfied, one of which was that \([c] = [p]\). In fact, each of these conditions turns out to be equivalent. By symmetry, and using \( C2 \) from Table 3, all encapsulated ranges are preserved if \([c] \subseteq [p]\) and \([p] \subseteq [c]\). Therefore, addRole\((a, r, \{c\}, \{p\})\) succeeds if \( c, p \in \sigma(a) \) and \([c] = [p]\).

The third column suggests slight modifications to these conditions that should yield an improved version of ARBAC97. Specifically, we add a condition to the deleteEdge operation that guarantees that all such operations preserve encapsulated ranges. Sandhu et al. do not comment on the fact that deleting an edge can destroy an encapsulated range and make no effort to prevent this. In contrast, we introduced a new requirement into \( C2 \) for the deleteEdge operation to preserve administrative domains. Correspondingly, ARBAC97 should include the following condition for the deleteEdge operation to preserve all encapsulated ranges: \([p] = [c]\), since we require that \([\uparrow p] \subseteq [c]\) and (by symmetry) \([\downarrow c] \subseteq [p]\) to preserve encapsulated ranges. We also make the definition of addRole more general, in line with the addRole operation used elsewhere in this paper. The ARBAC97 model requires that a new role have a single child and parent role. There is no theoretical reason for this restriction. Hence, we suggest using the operation addRole\((a, r, C, P)\), and that it succeeds if \( C \subseteq \sigma(a) \), \( P \subseteq \sigma(a) \), and \(\bigcap C = \bigcup C = \bigcap P = \bigcup P\). (This latter condition simply says that there exists \( b \) such that for all \( c \in C \) and all \( p \in P \), \([c] = [p] = \sigma(b)\).)

### Conclusion

We have provided a characterization of role-based administrative models based on the extent to which the hierarchy operations permitted by the model preserve administrative domains. This characterization enables us to provide a concise description of ARBAC97 and to identify and correct several flaws in the original specification.

The success or failure of hierarchy operations is determined by the administrative scope of the role performing the operation. The administrative scope of a role can be determined directly and efficiently from the domain tree. Hence, it should be possible to produce an implementation of ARBAC97 and other models described in this paper for evaluation purposes. Until now, it was not obvious that such an implementation of ARBAC97 existed, since there was no clear way of testing the requirement that the encapsulation of all authority ranges be preserved.

RBAT mandates the specification of a set of administrative units, which must be either pairwise nested or disjoint. The obvious choices for such a set are administrative domains and encapsulated ranges (giving rise to RHA-style and ARBAC97-style models, respectively). However, these are not the only choices, and we may also consider the administration of disconnected hierarchies (such as those defined in ERBAC96 [14] and TRBAC [3]). In this case, systems administrators must define the administrative domains (without reference to administrative scope or encapsulated ranges) and then use an appropriate set of conditions to determine the success of hierarchy operations and preserve the integrity of those administrative domains. This will require some modification to the conditions \( C0 \), \( C2 \), and \( C3 \), because in these conditions, the notion of preserving administrative domains could be neatly captured using the administrative scope of a role. Instead, the conditions will have to be specified in terms of preserving \(\downarrow r\), where \( r \) is the administrator of the domain, and \(\uparrow x\), where \( x \) belongs to the domain of which \( r \) is the administrator. This does not present insurmountable difficulties.

To date, no administrative model exists for either ERBAC96 or TRBAC. We can also build real ARBAC97 systems. This was not obvious previously, since there existed a "chicken and egg" situation, in which the can-modify relation was defined in terms of the hierarchy, but the can-modify relation controlled changes to the hierarchy [6, Section 8.3]. We know that we can build RHA systems if we assume the existence of a system administrator role that initially controls an empty domain [6], which therefore suggests that we can also build ARBAC97 systems.

Moreover, we can define more "relaxed" ARBAC97-style models. The original version of the model is essentially a 2SP model, since it requires that all encapsulated ranges be preserved. We now have a framework that enables us to develop a set of less restrictive models based on authority ranges, but with weaker preservation properties such as 0SP.

Finally, we note that this work may have a considerable impact on the study of the safety problem in role-based systems [4, 11, 12]. The safety problem considers the propagation of access rights due to changes to access control data structures, and hence every administrative model gives rise to an instance of the safety problem. The fact that we can order administrative models according to the extent to which they preserve domains may enable us to identify classes of role-based administrative systems which have a decidable safety problem. We anticipate that domain preservation will be a feature of models for which the safety problem is decidable in polynomial time.

We believe that this work will benefit application and systems developers who wish to understand the mechanisms of role-based administration better and to know what properties will be preserved by the administrative model they choose to implement. We also believe this work lays a valuable theoretical foundation for the further development of role-based administrative models and the investigation of the safety problem in role-based systems.

Future work will include the construction of administrative models for ERBAC96 and TRBAC as suggested above. We will also extend RBAT to include all administrative operations (as defined in Section 2) and the administration of the can-administer relation. A further interesting possibility is to introduce administrative permissions. This leads to a two-phase checking process for administrative operations, similar to that in the Bell-LaPadula model: the operation should be both explicitly permitted by the assignment of appropriate administrative permissions and should satisfy the conditions for the operation to proceed. In this context, the conditions form the mandatory element of the access control checking process, and the permissions form the discretionary element. The introduction of administrative permissions also suggests the possibility of administrative separation of duty. For example, for a given administrative domain, a human resources role could be responsible for the administration of the user-role assignment relation, whereas some managerial or systems administrator role could be responsible for the administration of the permission-role assignment relation. Finally, we hope to investigate the notion of role "visibility," which we regard as being analogous to the scope of a variable in block-structured programming languages. Some roles and edges within a domain might only be visible to roles within that domain, whereas others might have global visibility. This concept may help address the fact that it is not always appropriate for all permissions to be available to all more senior roles. Certainly, there is no shortage of directions in which this work can be developed.

### Acknowledgements

The author would like to thank the anonymous reviewers for their constructive comments and suggestions.

### References

[1] Abrams, M., LaPadula, L., and Olson, I. M. Building generalized access control on UNIX. In Proceedings of Second USENIX UNIX Security Workshop (1990), pp. 65–70.

[2] American National Standards Institute. ANSI INCITS 359-2004 for Role Based Access Control, 2004.

[3] Bertino, E., Bonatti, P., and Ferrari, E. TRBAC: A temporal role-based access control model. ACM Transactions on Information and System Security 4, 3 (2001), 191–223.

[4] Crampton, J. Authorization and antichains. PhD thesis, Birkbeck, University of London, London, England, 2002. Available from http://www.isg.rhul.ac.uk/∼jason.

[5] Crampton, J. Understanding and developing role-based administrative models. Tech. Rep. RHUL–MA–2005–6, Royal Holloway, University of London, 2005.

[6] Crampton, J., and Loizou, G. Administrative scope: A foundation for role-based administrative models. ACM Transactions on Information and System Security 6, 2 (2003), 201–231.

[7] Davey, B., and Priestley, H. Introduction to Lattices and Order. Cambridge University Press, Cambridge, United Kingdom, 1990.

[8] Ferraiolo, D., and Kuhn, D. Role-based access control. In Proceedings of the 15th NIST-NSA National Computer Security Conference (1992), pp. 554–563.

[9] Ferraiolo, D., Sandhu, R., Gavrila, S., Kuhn, D., and Chandramouli, R. Proposed NIST standard for role-based access control. ACM Transactions on Information and System Security 4, 3 (2001), 224–274.

[10] Harrison, M., Ruzzo, W., and Ullman, J. Protection in operating systems. Communications of the ACM 19, 8 (1976), 461–471.

[11] Li, N., and Tripunitara, M. Security analysis in role-based access control. In Proceedings of the Ninth ACM Symposium on Access Control Models and Technologies (2004), pp. 126–135.

[12] Munawer, Q., and Sandhu, R. Simulation of the augmented typed access matrix model (ATAM) using roles. In Proceedings INFOSECU99 International Conference on Information Security (1999).

[13] Nyanchama, M., and Osborn, S. The role graph model and conflict of interest. ACM Transactions on Information and System Security 2, 1 (1999), 3–33.

[14] Sandhu, R. Role activation hierarchies. In Proceedings of Third ACM Workshop on Role-Based Access Control (1998), pp. 33–40.

[15] Sandhu, R., Bhamidipati, V., and Munawer, Q. The ARBAC97 model for role-based administration of roles. ACM Transactions on Information and System Security 1, 2 (1999), 105–135.

[16] Sandhu, R., Coyne, E., Feinstein, H., and Youman, C. Role-based access control models. IEEE Computer 29, 2 (1996), 38–47.