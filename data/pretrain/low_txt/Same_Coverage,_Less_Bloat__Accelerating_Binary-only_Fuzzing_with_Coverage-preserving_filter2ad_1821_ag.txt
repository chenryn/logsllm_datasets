### Indirect Branch Promotion and Hybrid Instrumentation

Indirect branch promotion is a technique designed to "rewrite" indirect transfers as direct ones. At runtime, each dynamically-resolved indirect branch target is compared against several statically-encoded candidates. If the comparison matches (e.g., `if (%eax == foo): jump foo`), a conditional jump is made to the corresponding target. While this approach can be applied to nearly all indirect branches, including those that form critical edges, it does not guarantee perfect branch target prediction. Existing methods aim to maximize precision by profiling indirect branches in advance to identify their "most probable" targets. However, fuzzing may uncover and prioritize new targets that were previously considered unlikely.

**Hybrid Instrumentation:** A third approach for handling indirect critical edges is to revert to AFL-style hashing-based edge coverage (as described in §2.3). Although it is challenging to accurately identify the targets of each indirect edge, a conservative strategy is to instrument the set of all potential indirect branch targets. These targets are often well-known, such as function entry points for indirect calls and post-call blocks for returns. Future target-tailored CGT (Coverage-Guided Tracing) approaches could balance fast speed for common-case critical edges with more precise handling (e.g., header splitting, promotion, and hybrid instrumentation) for infrequent ones.

### Trade-offs of Hit Count Coverage

Hit counts are used to measure fuzzing exploration progress in loops and cycles. The implementation of hit count coverage must carefully balance precision and speed to support effective bug-finding. Two key considerations for hit count coverage implementations are:

1. **Bucket Granularity:** Our current implementation of bucketed unrolling (§4.3) mimics the hit count tracking of conventional fuzzers by injecting conditional checks against eight bucket ranges (0–1, 2, 3, 4–7, 8–15, 16–31, 32–127, 128+). These eight bucket ranges are a legacy from AFL’s original implementation, where each hashed edge is mapped to an 8-bit index in its coverage bitmap. Increasing the number of buckets allows for more subtle changes in loop iteration counts to be tracked, while fewer buckets offer higher fuzzing throughput at the cost of reduced introspection. The optimal balance between speed and coverage for bug-finding remains an open question, but future research is expected to address these issues.

2. **Frequency of Tracking:** The frequency at which hit counts are tracked also influences fuzzing exploration and bug-finding. Conventional exhaustive (per-edge) hit counts provide detailed insights into the frequencies of cycle subpaths (e.g., how many times a loop break is taken), but they risk saturating the fuzzer's search space with redundant or noisy paths. Bucketed unrolling trades off coverage exhaustiveness for speed by restricting hit count tracking to a subset of the program state (e.g., loop iteration counters). Our analysis of bugs found exclusively by exhaustive hit counts (Figure 11b) shows that none of them are outside the reach of HeXcite. Future work will likely explore adapting selective and synergistic hit count schemes to better cover complex loops, cycles, and compiler optimizations at high speed.

### Improving Performance

The fuzzing-oriented binary transformation platform currently utilized in HeXcite, ZAFL [38], employs a code layout algorithm that rewrites all direct jumps to use 32-bit PC-relative signed displacements. This is well-suited for our implementation of zero-address jump mistargeting (§4.2), enabling virtually every conditional jump in the program's address space to be mistargeted to 0x00. However, 32-bit displacements introduce more runtime overhead compared to 8-16-bit displacements. As ZAFL has experimental code layouts that prioritize smaller displacements, there is potential for faster "hybrid" mistargeting schemes that combine both zero-address and embedded interrupt styles.

### Supporting Other Software & Platforms

Our current coverage-preserving CGT prototype, HeXcite, supports 64-bit Linux C and C++ binaries. Extending support to other software characteristics (e.g., 32-bit) or platforms (e.g., Windows) requires retooling of its underlying static binary rewriting engine. However, since this component is orthogonal to the fundamental principles of coverage-preserving CGT, we expect that HeXcite will benefit from future engineering improvements in static rewriting, bringing accelerated fuzzing to a broader software ecosystem.

### Related Work

We discuss recent efforts to improve binary-only fuzzing performance that are complementary to coverage-preserving CGT: (1) faster instrumentation, (2) less instrumentation, and (3) faster execution.

#### Faster Instrumentation

Effective binary fuzzing relies heavily on maintaining fast coverage tracking. Recent research focuses on optimizing dynamic translation-based instrumentation (e.g., AFL-QEMU [59], DrAFL [47], UnicornAFL [52]) by simplifying or expanding the caching of translated code [4]. Static rewriting approaches (e.g., ZAFL [38], Dyninst [40], RetroWrite [15]) tackle various challenges related to generated code performance. Our coverage-preserving CGT prototype, HeXcite, currently leverages the ZAFL rewriter, and we anticipate that future advances in binary instrumentation will enable it to achieve performance closer to native speed.

#### Less Instrumentation

Reducing the footprint of coverage tracking can be achieved by eliminating unnecessary instrumentation from the program under test. While most control-flow-centric approaches exist in compiler instrumentation-based implementations (e.g., dominator trees [2], INSTRIM [28], CollAFL [19]), their principles are well-suited to binary-only fuzzing. A recent fork of AFL-Dyninst [26] omits instrumentation from blocks preceded by unconditional direct transfers, as their coverage is directly implied by their ancestors. In addition to accelerating the execution of HeXcite’s tracer binary, such control-flow-centric analyses can help determine the optimal application of HeXcite’s control-flow-altering transformations (e.g., bucketed unrolling).

#### Faster Execution

Execution speed is a critical bottleneck in fuzzing, as faster execution enables more test cases to be run in less time. Most modern binary-only fuzzing efforts have moved away from slow process creation-based execution to faster snapshotting, using cheap copy-on-write cloning to rapidly initiate target execution from a pre-initialized state (e.g., AFL’s fork-server [59]). Xu et al. [55] further enhance snapshotting speed through fuzzing-optimized Linux kernel extensions. Persistent/in-memory execution, which restricts execution to a pre-specified target program code region, offers even higher speed and is gaining support among popular binary-only fuzzing toolchains (e.g., WinAFL [22], AFL-QEMU, UnicornAFL). Parallelization is another approach to amortize fuzzing execution speed, with off-the-shelf binary-only fuzzers like AFL [59] and honggFuzz [49] supporting parallelization out-of-the-box. Recent work by Falk [16] achieves even faster speeds by leveraging vectorized instruction sets. As execution and coverage tracking work hand-in-hand during fuzzing, we view such accelerated execution mechanisms as complementary to HeXcite’s accelerated coverage tracking.

### Conclusion

Coverage-preserving Coverage-guided Tracing (CGT) extends the principles behind CGT’s performance-maximizing, waste-eliminating tracing strategy to finer-grained coverage metrics such as edge coverage and hit counts. We introduce program transformations that enhance CGT’s introspection capabilities while maintaining its minimally invasive nature. Our results show that these techniques improve binary-only fuzzing effectiveness over conventional CGT, while still offering a significant performance advantage over leading binary-only coverage tracers. It is now possible for state-of-the-art coverage-guided fuzzers to embrace the acceleration of CGT without sacrificing coverage. We envision a new era in software fuzzing, where synergistic and target-tailored approaches will maximize common-case performance with infrequent-case precision.

### Acknowledgements

We thank our shepherd Jun Xu and our reviewers for helping us improve the paper. We also thank Peter Goodman and Trail of Bits for assisting us with binary-to-LLVM lifting. This material is based upon work supported by the Defense Advanced Research Projects Agency under Contract No. W911NF-18-C-0019 and the National Science Foundation under Grant No. 1650540.

### References

[1] laf-intel: Circumventing Fuzzing Roadblocks with Compiler Transformations, 2016. URL: https://lafintel.wordpress.com/.

[2] Hiralal Agrawal. Dominators, Super Blocks, and Program Coverage. In ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL, 1994.

[3] Cornelius Aschermann, Sergej Schumilo, Tim Blazytko, Robert Gawlik, and Thorsten Holz. REDQUEEN: Fuzzing with Input-to-State Correspondence. In Network and Distributed System Security Symposium, NDSS, 2018.

[4] Andrea Biondo. Improving AFL’s QEMU mode performance, 2018. URL: https://abiondo.me/2018/09/21/improving-afl-qemu-mode/.

[5] Tim Blazytko, Cornelius Aschermann, Moritz Schlögel, Ali Abbasi, Sergej Schumilo, Simon Wörner, and Thorsten Holz. GRIMOIRE: Synthesizing Structure while Fuzzing. In USENIX Security Symposium, USENIX, 2019.

[6] Marcel Böhme, Van-Thuan Pham, Manh-Dung Nguyen, and Abhik Roychoudhury. Directed Greybox Fuzzing. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2017.

[7] Marcel Böhme, Van-Thuan Pham, and Abhik Roychoudhury. Coverage-based Greybox Fuzzing As Markov Chain. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2016.

[8] Ella Bounimova, Patrice Godefroid, and David Molnar. Billions and Billions of Constraints: Whitebox Fuzz Testing in Production. Technical report, 2012. URL: https://www.microsoft.com/en-us/research/publication/billions-and-billions-of-constraints-whitebox-fuzz-testing-in-production/.

[9] Peng Chen and Hao Chen. Angora: efficient fuzzing by principled search. In IEEE Symposium on Security and Privacy, Oakland, 2018.

[10] Peng Chen, Jianzhong Liu, and Hao Chen. Matryoshka: Fuzzing Deeply Nested Branches. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2019.

[11] Yaohui Chen, Peng Li, Jun Xu, Shengjian Guo, Rundong Zhou, Yulong Zhang, Taowei, and Long Lu. SAVIOR: Towards Bug-Driven Hybrid Testing. In IEEE Symposium on Security and Privacy, Oakland, 2020. arXiv: 1906.07327.

[12] Yuanliang Chen, Yu Jiang, Fuchen Ma, Jie Liang, Mingzhe Wang, Chijin Zhou, Xun Jiao, and Zhuo Su. EnFuzz: Ensemble Fuzzing with Seed Synchronization among Diverse Fuzzers. In USENIX Security Symposium, USENIX, 2019.

[13] Jaeseung Choi, Joonun Jang, Choongwoo Han, and Sang Kil Cha. Grey-box Concolic Testing on Binary Code. In International Conference on Software Engineering, ICSE, 2019.

[14] Artem Dinaburg and Andrew Ruef. McSema: Static Translation of X86 Instructions to LLVM, 2014. URL: https://github.com/trailofbits/mcsema.

[15] Sushant Dinesh, Nathan Burow, Dongyan Xu, and Mathias Payer. RetroWrite: Statically Instrumenting COTS Binaries for Fuzzing and Sanitization. In IEEE Symposium on Security and Privacy, Oakland, 2020.

[16] Brandon Falk. Vectorized Emulation: Hardware accelerated taint tracking at 2 trillion instructions per second, 2018. URL: https://gamozolabs.github.io/fuzzing/2018/10/14/vectorized_emulation.html.

[17] Andrea Fioraldi, Daniele Cono D’Elia, and Leonardo Querzoni. Fuzzing Binaries for Memory Safety Errors with QASan. In IEEE Secure Development Conference, SecDev, 2020.

[18] Andrea Fioraldi, Dominik Maier, Heiko Eißfeldt, and Marc Heuse. AFL++: Combining Incremental Steps of Fuzzing Research. In USENIX Workshop on Offensive Technologies, WOOT, 2020.

[19] S. Gan, C. Zhang, X. Qin, X. Tu, K. Li, Z. Pei, and Z. Chen. CollAFL: Path Sensitive Fuzzing. In IEEE Symposium on Security and Privacy, Oakland, 2018.

[20] GNU Project. GNU gprof, 2018. URL: https://sourceware.org/binutils/docs/gprof/.

[21] Patrice Godefroid, Adam Kiezun, and Michael Y Levin. Grammar-based whitebox fuzzing. In ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI, 2008.

[22] Google Project Zero. WinAFL, 2016. URL: https://github.com/googleprojectzero/winafl.

[23] Samuel Groß and Google Project Zero. Fuzzing ImageIO, 2020. URL: https://googleprojectzero.blogspot.com/2020/04/fuzzing-imageio.html.

[24] Ilfak Guilfanov and Hex-Rays. IDA, 2019. URL: https://www.hex-rays.com/products/ida/.

[25] William H. Hawkins, Jason D. Hiser, Michele Co, Anh Nguyen-Tuong, and Jack W. Davidson. Zipr: Efficient Static Binary Rewriting for Security. In IEEE/IFIP International Conference on Dependable Systems and Networks, DSN, 2017.

[26] Marc Heuse. AFL-Dyninst, 2018. URL: https://github.com/vanhauser-thc/afl-dyninst.

[27] Jason Hiser, Anh Nguyen-Tuong, William Hawkins, Matthew McGill, Michele Co, and Jack Davidson. Zipr++: Exceptional Binary Rewriting. In Workshop on Forming an Ecosystem Around Software Transformation, FEAST, 2017.

[28] Chin-Chia Hsu, Che-Yu Wu, Hsu-Chun Hsiao, and Shih-Kun Huang. INSTRIM: Lightweight Instrumentation for Coverage-guided Fuzzing. In NDSS Workshop on Binary Analysis Research, BAR, 2018.

[29] Vivek Jain, Sanjay Rawat, Cristiano Giuffrida, and Herbert Bos. TIFF: Using Input Type Inference To Improve Fuzzing. In Annual Computer Security Applications Conference, ACSAC, 2018.

[30] Jinho Jung, Stephen Tong, Hong Hu, Jungwon Lim, Yonghwi Jin, and Taesoo Kim. WINNIE: Fuzzing Windows Applications with Harness Synthesis and Fast Cloning. In Network and Distributed System Security Symposium, NDSS, 2021.

[31] Sun Hyoung Kim, Cong Sun, Dongrui Zeng, and Gang Tan. Refining Indirect Call Targets at the Binary Level. In Network and Distributed System Security Symposium, NDSS, 2021.

[32] George Klees, Andrew Ruef, Benji Cooper, Shiyi Wei, and Michael Hicks. Evaluating Fuzz Testing. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2018.

[33] C. Lattner and V. Adve. LLVM: A compilation framework for lifelong program analysis & transformation. In International Symposium on Code Generation and Optimization, CGO, 2004.

[34] Caroline Lemieux and Koushik Sen. FairFuzz: A Targeted Mutation Strategy for Increasing Greybox Fuzz Testing Coverage. In ACM/IEEE International Conference on Automated Software Engineering, ASE, 2018.

[35] Yuekang Li, Bihuan Chen, Mahinthan Chandramohan, Shang-Wei Lin, Yang Liu, and Alwen Tiu. Steelix: Program-state Based Binary Fuzzing. In ACM Joint Meeting on Foundations of Software Engineering, ESEC/FSE, 2017.

[36] Chenyang Lv, Shouling Ji, Chao Zhang, Yuwei Li, Wei-Han Lee, Yu Song, and Raheem Beyah. MOPT: Optimize Mutation Scheduling for Fuzzers. In USENIX Security Symposium, USENIX, 2019.

[37] Stefan Nagy and Matthew Hicks. Full-speed Fuzzing: Reducing Fuzzing Overhead through Coverage-guided Tracing. In IEEE Symposium on Security and Privacy, Oakland, 2019.

[38] Stefan Nagy, Anh Nguyen-Tuong, Jason D Hiser, Jack W Davidson, and Matthew Hicks. Breaking Through Binaries: Compiler-quality Instrumentation for Better Binary-only Fuzzing. In USENIX Security Symposium, USENIX, 2021.

[39] Chengbin Pang, Ruotong Yu, Yaohui Chen, Eric Koskinen, Georgios Portokalidis, Bing Mao, and Jun Xu. SoK: All You Ever Wanted to Know About x86/x64 Binary Disassembly But Were Afraid to Ask. In IEEE Symposium on Security and Privacy, Oakland, 2021.

[40] Paradyn Tools Project. Dyninst API, 2018. URL: https://dyninst.org/dyninst.

[41] Van-Thuan Pham, Marcel Böhme, Andrew E. Santosa, Alexandru Răzvan Căciulescu, and Abhik Roychoudhury. Smart Greybox Fuzzing. IEEE Transactions on Software Engineering, 2019.

[42] Ganesan Ramalingam. On Loops, Dominators, and Dominance Frontiers. ACM transactions on Programming Languages and Systems, page 22, 2002.

[43] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida, and Herbert Bos. VUzzer: Application-aware Evolutionary Fuzzing. In Network and Distributed System Security Symposium, NDSS, 2017.

[44] Sanjay Rawat and Laurent Mounier. Finding Buffer Overflow Inducing Loops in Binary Executables. In IEEE International Conference on Software Security and Reliability, SERE, 2012.

[45] Kosta Serebryany. Continuous fuzzing with libfuzzer and addresssanitizer. In IEEE Cybersecurity Development Conference, SecDev, 2016.

[46] Dongdong She, Kexin Pei, Dave Epstein, Junfeng Yang, Baishakhi Ray, and Suman Jana. NEUZZ: Efficient Fuzzing with Neural Program Smoothing. In IEEE Symposium on Security and Privacy, Oakland, 2019.

[47] Maksim Shudrak and Battelle. drAFL, 2019. URL: https://github.com/mxmssh/drAFL.

[48] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna. Driller: Augmenting Fuzzing Through Selective Symbolic Execution. In Network and Distributed System Security Symposium, NDSS, 2016.

[49] Robert Swiecki. honggfuzz, 2018. URL: http://honggfuzz.com/.

[50] The Clang Team. SanitizerCoverage, 2019. URL: https://clang.llvm.org/docs/SanitizerCoverage.html.

[51] Fabian Toepfer and Dominik Maier. BSOD: Binary-only Scalable fuzzing Of device Drivers. In International Symposium on Research in Attacks, Intrusions and Defenses, RAID, 2021.

[52] Nathan Voss and Battelle. AFL-Unicorn, 2019. URL: https://github.com/Battelle/AFL-Unicorn.

[53] Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. Superion: Grammar-Aware Greybox Fuzzing. In International Conference on Software Engineering, ICSE, 2019. arXiv: 1812.01197.

[54] Matthias Wenzl, Georg Merzdovnik, Johanna Ullrich, and Edgar Weippl. From Hack to Elaborate Technique—A Survey on Binary Rewriting. ACM Computing Surveys, 52(3), 2019.

[55] Wen Xu, Sanidhya Kashyap, Changwoo Min, and Taesoo Kim. Designing New Operating Primitives to Improve Fuzzing Performance. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2017.

[56] Wei You, Xuwei Liu, Shiqing Ma, David Perry, Xiangyu Zhang, and Bin Liang. SLF: Fuzzing without Valid Seed Inputs. In International Conference on Software Engineering, ICSE, 2019.

[57] Wei You, Xueqiang Wang, Shiqing Ma, Jianjun Huang, Xiangyu Zhang, XiaoFeng Wang, and Bin Liang. ProFuzzer: On-the-fly Input Type Probing for Better Zero-day Vulnerability Discovery. In IEEE Symposium on Security and Privacy, Oakland, 2019.

[58] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim. QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing. In USENIX Security Symposium, USENIX, 2018.

[59] Michal Zalewski. American fuzzy lop, 2017. URL: http://lcamtuf.coredump.cx/afl/.

[60] Lei Zhao, Yue Duan, Heng Yin, and Jifeng Xuan. Send Hardest Problems My Way: Probabilistic Path Prioritization for Hybrid Fuzzing. In Network and Distributed System Security Symposium, NDSS, 2019.

Session 2A: Fuzzing and Bug Finding
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea