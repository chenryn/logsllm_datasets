### Distance to the Query C

The distance to the query C (where \( m = 512 \) and \( n = 4 \)) is a standard benchmark in Multi-Party Computation (MPC). This benchmark is well-known and consists of a two-pass structure. In the first pass, arithmetic operations are highly parallelized, making it suitable for the arithmetic protocol \(\pi_A\). The second pass involves computing the minimum value using unamortized comparison (GE) and multiplexing (MUX) operations, which are more cost-effective in \(\pi_Y\) than in \(\pi_B\). Therefore, the second pass is assigned \(\pi_Y\). A single array holds the output from the first pass, necessitating a single conversion before the second pass. Our assignment aligns with the well-known assignment.

### Modular Exponentiation

Two parties collaborate to compute \( \text{base}^{\text{exp}} \mod m \), where one party holds the base and the other holds the exponent. Both values, along with the modulus, are 32-bit unsigned integers. This protocol does not support parallelization and is assigned \(\pi_Y\) for the same reasons as the GCD computation. In a simulated WAN setting, our assignment matches that of ABY [DSZ15]. Due to time constraints, we have translated all publicly available HyCC benchmarks except for Gauss.

### Private Set Intersection (PSI)

A server holds set \( S_1 \) and a client holds set \( S_2 \) (with sizes 1024 and 32, respectively, and elements being 32-bit unsigned integers). We use a straightforward \( O(n^2) \) protocol, which is fully parallelizable and relies on NE (not equal) and MUX operations. Based on the cost tables, amortized NE and MUX are cheaper with \(\pi_B\), leading to the \(\pi_B\) assignment.

### Histogram

This benchmark is adapted from the PUMA benchmark suite of MapReduce programs. Parties jointly hold a movie ratings database with \( n \) reviewers and \( m \) movies (here \( n = 100 \) and \( m = 100 \), with all elements as unsigned integers). They compute a histogram of average ratings. The process includes one loop with sufficient parallelization to justify a \(\pi_A\) assignment, making the optimal assignment a mix of \(\pi_A\) and \(\pi_Y\).

### MiniONN (MNIST) and Cryptonets

These are machine learning benchmarks translated from HyCC's public code. MNIST is the largest and most complex benchmark in terms of lines of code. Several loops with arithmetic operations are parallelizable and are assigned \(\pi_A\); all other operations are assigned \(\pi_Y\). This results in a mixed \(\pi_A\) and \(\pi_Y\) assignment, consistent with HyCC [B¨us+18]. In Cryptonets (using the square function for RELU), although there are only arithmetic operations, some are inside non-parallel loops. Since unamortized \(\pi_Y\) costs are lower than unamortized \(\pi_A\) in the WAN setting, arithmetic operations in non-parallel loops are assigned \(\pi_Y\). This results in a mixed \(\pi_A\) and \(\pi_Y\) assignment. HyCC [B¨us+18] uses \(\pi_A\) only, possibly due to their lower arithmetic operation costs in \(\pi_A\).

### k-means

This is a clustering algorithm and data mining benchmark. We took it from HyCC's public code and ran it through our toolchain. No parallelizable loops were detected, explaining the lack of \(\pi_A\) assignments. An OR operation (used in integer division) is accumulated for subsequent operations, leading to a \(\pi_B\) assignment. The overall assignment is a mix of \(\pi_B\) and \(\pi_Y\). HyCC’s assignment is a mix of \(\pi_A\) and \(\pi_Y\), likely because they analyzed a parallelizable version.

### DB-Merge (500 + 500), DB-Join (50x50), and DB-Join (25 x 200)

These are data analytics benchmarks also taken from HyCC. All contain arithmetic operations inside parallelizable loops, which are assigned \(\pi_A\). The overall assignment that optimizes total time in all three cases is a mix of \(\pi_A\) and \(\pi_Y\), consistent with HyCC.

### Conclusions

We revisit the problem of optimal protocol assignment (OPA) for hybrid MPC, previously conjectured to be NP-hard. We prove that, modulo scheduling/parallelization, for the special case of two protocols, the problem can be solved in polynomial time. Our analysis is based on a framework combining ideas and techniques from program analysis and MPC. We implemented our OPA solver and tested it using simulated costs in a wide set of known benchmarks, demonstrating its efficiency and quality. Our treatment points to several open problems in programming languages, MPC, and networks.

### References

[Aho+06] Alfred V. Aho et al. Compilers: Principles, Techniques, and Tools (2nd Edition). Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc., 2006. ISBN: 0321486811.

[Bea92] Donald Beaver. “Efficient Multiparty Protocols Using Circuit Randomization.” In: CRYPTO’91. Ed. by Joan Feigenbaum. Vol. 576. LNCS. Santa Barbara, CA, USA: Springer, Heidelberg, Germany, Aug. 1992, pp. 420–432. doi: 10.1007/3-540-46766-1_34.

[BK15] Niklas B¨uscher and Stefan Katzenbeisser. “Faster Secure Computation through Automatic Parallelization.” In: 24th USENIX Security Symposium, USENIX Security 15, Washington, D.C., USA, August 12-14, 2015. 2015, pp. 531–546. URL: https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/buescher.

[BLW08] Dan Bogdanov, Sven Laur, and Jan Willemson. “Sharemind: A Framework for Fast Privacy-Preserving Computations.” In: ESORICS 2008. Ed. by Sushil Jajodia and Javier L´opez. Vol. 5283. LNCS. M´alaga, Spain: Springer, Heidelberg, Germany, Oct. 2008, pp. 192–206. doi: 10.1007/978-3-540-88313-5_13.

[BNP08] A. Ben-David, N. Nisan, and B. Pinkas. “FairplayMP: a system for secure multi-party computation.” In: Proc. 15th ACM Conf. Comput. and Commun. Security (CCS). Alexandria, VA, USA: ACM, 2008, pp. 257–266.

[B¨us+18] Niklas B¨uscher et al. “HyCC: Compilation of Hybrid Protocols for Practical Secure Computation.” In: ACM CCS 18. Ed. by David Lie et al. Toronto, ON, Canada: ACM Press, Oct. 2018, pp. 847–861. doi: 10.1145/3243734.3243786.

[Cam65] Paul Camion. “Characterization of Totally Unimodular Matrices.” In: Proceedings of the American Mathematical Society 16.5 (1965), pp. 1068–1073.

[CCD88] David Chaum, Claude Cr´epeau, and Ivan Damg˚ard. “Multiparty Unconditionally Secure Protocols (Extended Abstract).” In: 20th ACM STOC. Chicago, IL, USA: ACM Press, May 1988, pp. 11–19. doi: 10.1145/62212.62214.

[Cha+17] Nishanth Chandran et al. “EzPC: Programmable, Efficient, and Scalable Secure Two-Party Computation.” In: IACR Cryptology ePrint Archive 2017 (2017), p. 1109.

[Cho+07] Stephen Chong et al. “Secure Web Applications via Automatic Partitioning.” In: Proceedings of Twenty-first ACM SIGOPS Symposium on Operating Systems Principles. SOSP ’07. Stevenson, Washington, USA: ACM, 2007, pp. 31–44. ISBN: 978-1-59593-591-5. doi: 10.1145/1294261.1294265. URL: http://doi.acm.org/10.1145/1294261.1294265.

[Cho+13] Ashish Choudhury et al. “Between a Rock and a Hard Place: Interpolating between MPC and FHE.” In: ASIACRYPT 2013, Part II. Ed. by Kazue Sako and Palash Sarkar. Vol. 8270. LNCS. Bangalore, India: Springer, Heidelberg, Germany, Dec. 2013, pp. 221–240. doi: 10.1007/978-3-642-42045-0_12.

[Cyt+91] Ron Cytron et al. “Efficiently Computing Static Single Assignment Form and the Control Dependence Graph.” In: ACM Trans. Program. Lang. Syst. 13.4 (Oct. 1991), pp. 451–490. ISSN: 0164-0925. doi: 10.1145/115372.115320. URL: http://doi.acm.org/10.1145/115372.115320.

[DSZ15] Daniel Demmler, Thomas Schneider, and Michael Zohner. “ABY - A Framework for Efficient Mixed-Protocol Secure Two-Party Computation.” In: NDSS 2015. San Diego, CA, USA: The Internet Society, Feb. 2015.

[Fra+14] Martin Franz et al. “CBMC-GC: An ANSI C Compiler for Secure Two-Party Computations.” In: Compiler Construction - 23rd International Conference, CC 2014, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2014, Grenoble, France, April 5-13, 2014. Proceedings. 2014, pp. 244–249. doi: 10.1007/978-3-642-54807-9_15. URL: https://doi.org/10.1007/978-3-642-54807-9_15.

[Gil+16] Ran Gilad-Bachrach et al. “CryptoNets: Applying Neural Networks to Encrypted Data with High Throughput and Accuracy.” In: Proceedings of the 33nd International Conference on Machine Learning, ICML 2016, New York City, NY, USA, June 19-24, 2016. 2016, pp. 201–210. URL: http://jmlr.org/proceedings/papers/v48/gilad-bachrach16.html.

[GMW87] Oded Goldreich, Silvio Micali, and Avi Wigderson. “How to Play any Mental Game or A Completeness Theorem for Protocols with Honest Majority.” In: 19th ACM STOC. Ed. by Alfred Aho. New York City, NY, USA: ACM Press, May 1987, pp. 218–229. doi: 10.1145/28395.28420.

[IJT91] Fran¸cois Irigoin, Pierre Jouvelot, and R´emi Triolet. “Semantical interprocedural parallelization: an overview of the PIPS project.” In: Proceedings of the 5th international conference on Supercomputing, ICS 1991, Cologne, Germany, June 17-21, 1991. 1991, pp. 244–251. doi: 10.1145/109025.109086. URL: https://doi.org/10.1145/109025.109086.

[IMZ19] Muhammad Ishaq, Ana Milanova, and Vassilis Zikas. “Efficient MPC via Program Analysis: A Framework for Efficient Optimal Mixing.” In: 2019 ACM SIGSAC Conference on Computer and Communications Security (CCS ’19), November 11–15, 2019, London, United Kingdom. 2019. ISBN: 978-1-4503-6747-9/19/11. doi: 10.1145/800057.808695.

[Kar84] N. Karmarkar. “A New Polynomial-time Algorithm for Linear Programming.” In: Proceedings of the Sixteenth Annual ACM Symposium on Theory of Computing. STOC ’84. New York, NY, USA: ACM, 1984, pp. 302–311. ISBN: 0-89791-133-4. doi: 10.1145/800057.808695. URL: http://doi.acm.org/10.1145/800057.808695.

[Kha80] Leonid G. Khachiyan. “A Polynomial-Time Algorithm for Solving Linear Programs.” In: Mathematics of Operations Research 5.1 (Feb. 1980). ISSN: 0364-765X. doi: 10.1287/moor.5.1.iv.

[KSS13] Vladimir Kolesnikov, Ahmad-Reza Sadeghi, and Thomas Schneider. “A systematic approach to practically efficient general two-party secure function evaluation protocols and their modular design.” In: Journal of Computer Security 21.2 (2013), pp. 283–315. URL: http://dblp.uni-trier.de/db/journals/jcs/jcs21.html#KolesnikovS013.

[KSS14] Florian Kerschbaum, Thomas Schneider, and Axel Schr¨opfer. “Automatic Protocol Selection in Secure Two-Party Computations.” In: ACNS 14. Ed. by Ioana Boureanu, Philippe Owesarski, and Serge Vaudenay. Vol. 8479. LNCS. Lausanne, Switzerland: Springer, Heidelberg, Germany, June 2014, pp. 566–584. doi: 10.1007/978-3-319-07536-5_33.

[Liu+17] Jian Liu et al. “Oblivious Neural Network Predictions via MiniONN Transformations.” In: ACM CCS 17. Ed. by Bhavani M. Thuraisingham et al. Dallas, TX, USA: ACM Press, Oct. 2017, pp. 619–631. doi: 10.1145/3133956.3134056.