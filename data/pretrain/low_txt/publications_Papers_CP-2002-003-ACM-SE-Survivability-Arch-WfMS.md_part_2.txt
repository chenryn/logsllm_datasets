### Table 2 - Status of Implementation

In the context of ORBWork, dynamic changes can lead to an inconsistency state if the information related to a previous task no longer reflects the current state of the system. In our work, most of the primitive changes implemented in ORBWork are incremental. Composite changes, on the other hand, consist of a sequence of primitive changes that describe more complex process definition changes (e.g., adding a task between two existing tasks).

### 3.2.2 Adaptation

As Charles Darwin observed, "It is not the strongest or the most intelligent species that survive, but the one most responsive to change." Adaptation refers to the ability of a system to adjust to environmental conditions. This involves modifying the system or its components to better fit the environment. The importance of adaptation has been recognized in various fields, including software [21][10], database systems, mobile systems [31], and fault-tolerant systems [11].

To illustrate the concept of adaptation, consider the Ethernet protocol. Although it may not be immediately obvious, the Ethernet protocol is an adaptive algorithm. It adjusts the interval for resending messages based on collisions on the broadcast medium, thereby changing its behavior in response to environmental changes.

In the domain of workflow management systems, adaptability is crucial. This allows workflow systems to adjust to different business and organizational settings and to a changing context [9]. This requirement stems from the highly dynamic environment surrounding business processes, which can be influenced by factors such as political decisions, new company policies, laws, regulations, and global market changes. At a finer level, the environment also includes elements like the people involved in the execution of a business process and the resources used to achieve process goals.

For example, if a workflow instance is running and a task cannot be completed due to the inability to access a DBMS, an internal environmental change is identified. This triggers an event or exception, which is then processed by a competent module to restore the environment to a stable state.

With this scenario in mind, we have developed a module that enables the METEOR workflow management system to be adaptable. This module handles exceptions, a well-defined class of events that may occur during the realization of a process instance.

### Figure 3 - Example of Adaptation Using Exception Handling Mechanism

### 3.2.3 Exception Handling as a Case of Adaptation

Despite extensive research in workflow management, the need for modeling exceptions in information systems has only recently been recognized by the workflow community [5]. An exception refers to facts, situations, or abnormal events not modeled by the underlying workflow management system or deviations between planned and actual outcomes [18].

The architecture we developed and implemented in ORBWork includes a sophisticated exception handling mechanism, which is essential for deploying the workflow management system in cross-organizational settings. During workflow schema execution, if an exception occurs and is propagated to the case-based reasoning (CBR) exception-handling component, the CBR process derives an acceptable exception handler. Human involvement is necessary when acceptable handlers cannot be automatically obtained. Solutions provided by humans are incorporated into the case repository, and the effects of these handlers on the workflow system and applications are evaluated.

### System Description

Our approach to managing exception handling knowledge is based on a knowledge-based system using case-based reasoning (CBR). CBR improves exception handling capabilities by retrieving information about previous problem-solving cases to help solve new problems [18]. The exception resolution process involves the following steps:

1. **Determine the Coordination Mode**: Based on the type of process interactions, the coordination mode for exception handling is determined.
2. **Identify Contacting Party and Interaction Point**: The contacting party and interaction point are identified, where the interactions can take place.
3. **Find Compensation Scheme**: If necessary, a compensation scheme is determined, taking into account the nature of the processes.
4. **Find Rework Scheme**: If necessary, a rework scheme is developed to allow the processes to make progress from failure points.

The retrieval of similar previous cases is based on a similarity measure that considers both semantic and structural similarities. This measure is achieved by evaluating exception similarity, workflow similarity, and context similarity.

We use a pattern-guided case adaptation scheme, which involves the following steps:

1. **Classify the Exception Pattern**: Identify the exception pattern and add it to the exception pattern repository if it is new.
2. **Search for Handling Pattern**: Determine the handling pattern and identify the exception handling coordination mode, contacting party, and interaction point.
3. **Select a Handler Pattern**: Choose a handler pattern based on the search results and determine the compensation and rework schemes.
4. **Initialize the Handler**: Populate the CPR handling template and create an adapted case.

### 4 Conclusions

Modern systems in a highly technological society require critical systems to be survivable. Survivability encompasses characteristics that systems should have to be resistant to failures and changes in the environment. To achieve this, factors such as security, recovery, fault tolerance, mobility, scalability, adaptation, and evolution must be considered. Our work focuses on the survivability of workflow management systems (WfMS) and defines a survivable architecture that functionally divides WfMS into a four-layer architecture, incorporating the seven fundamental survivable characteristics mentioned earlier.

### References

[1] Alonso, G., Hagen, C., Agrawal, D., El Abbadi, A., Mohan, C. “Enhancing the Fault Tolerance of Workflow Management Systems”. IEEE Concurrency, Vol. 8, No.3, pp 74-81, Jul-Sep, 2000.

[2] M. Barbacci. “Survivability in the age of vulnerable systems”. IEEE Computer, 29(11):8, Nov, 1996.

[3] L. Bass, P. Clements and R. Kazman, “Software Architecture in Practice”. Addison Wesley, 1998.

[4] Pauline M. Berry and Karen L. Myers. “Adaptive Process Management: An AI Perspective”. The 1998 ACM Conference on Computer Supported Cooperative Work. Seattle, Washington, 1998.

[5] Fabio Casati, "A Discussion on Approaches to Handling Exceptions in Workflows". Proceedings of 1998 Computer-Supported Cooperative Work (CSCW 1998), Towards Adaptive workflow Systems Workshop, Seattle, WA, 1998.

[6] Yufeng Chen, “Design and Implementation of Dynamic Process Definition Modifications in OrbWork Enactment System”. M.Sc. thesis. University of Georgia. July 2000.

[7] R.J. Ellison, D. Fisher, R.C. Linger, H. F. Lipson, T. A. Longstaff, and N.R. Mead, “Survivable Network Systems: An Emerging Discipline”. Software Engineering Institute Technical Report No. CMU/SEI-97-TR-013, Nov 1997.

[8] E. Elnozahy, L. Alvisi, Y.M. Wang, and D.B. Johnson. “A Survey of Rollback-Recovery Protocols in Message-Passing Systems”. Carnegie Mellon University, Technical Report CMU-CS-99-148, Jun 1999.

[9] Yanbo Han, Amit Sheth and Christoph Bussler. "A Taxonomy of Adaptive Workflow Management". Proceedings of 1998 Computer-Supported Cooperative Work (CSCW 1998), Towards Adaptive workflow Systems Workshop, Seattle, WA, 1998.

[10] Heineman, George T. “Adaptation and Software Architecture”. ISAW3, Orlando, Florida, USA, check reference, Sept 1998.

[11] Hiltunen, Matti A. and Schlichting, Richard D. “Adaptive Distributed Fault-Tolerant Systems”. International Journal of Computer Systems Science and Engineering, vol.11, n.5, pp. 125-133, Sep 1996.

[12] David Hollingsworth. “The Workflow Reference Model”. Workflow Management Coalition, Document Number TC00-1003, 19 Jan 1995.

[13] Stefan Horn, Stefan Jablonski, “An Approach to Dynamic Instance Adaption in Workflow Management Applications”. 1998.

[14] John D. Howard. “An Analysis Of Security Incidents On The Internet 1989–1995”. PhD thesis, Carnegie Mellon University, Pennsylvania USA, Apr 1997.

[15] OMG BODTF RFP #2 Submission, Workflow Management Facility, Revised Submission, 1998. (ftp://ftp.omg.org/pub/docs/bom/98-06-07.pdf), 4 Jul 1998.

[16] R. Kazman, M. Klein, M. Barbacci, T. Longstaff, H. D. Lipson, J. Carriere, "The Architecture Tradeoff Analysis Method", Proceedings of ICECCS ‘98, Monterey CA, Aug 1998.

[17] Mark Klein and Chrysanthos Dellarocas, "A Knowledge-Based Approach to Handling Exceptions in Workflow Systems". Proceedings of 1998 Computer-Supported Cooperative Work (CSCW 1998), Towards Adaptive workflow Systems Workshop, Seattle, WA, 1998.

[18] Zongwei Luo, Amit Sheth, Krys Kochut, and John Miller, "Exception handling in workflow systems", Applied Intelligence: the International Journal of AI, Neural Networks, and Complex Problem-Solving Technologies, Volume 13, Number 2, pp125-147, Sep-Oct 2000.

[19] Zongwei Luo, "Knowledge Sharing, Coordinated Exception Handling, and Intelligent Problem Solving to Support Cross-Organizational Business Processes", Ph.D. dissertation, Department of Computer Science, University of Georgia, December, 2000.

[20] Zongwei Luo, Amit Sheth, John Miller, Krys Kochut, "Defeasible Workflow,its Computation, and Exception Handling". Proceedings of 1998 Computer-Supported Cooperative Work (CSCW 1998), Towards Adaptive workflow Systems Workshop, Seattle, WA, 1998.

[21] Davis, J. Margaret. “Adaptable, Reusable Code”. SSR, ACM, check reference, Seattle, WA, USA, 1995.

[22] Krys J. Kochut, Amit P. Sheth, John A. Miller. “ORBWork: A CORBA-Based Fully Distributed, Scalable and Dynamic Workflow Enactment Service for METEOR”. Large Scale Distributed Information Systems Lab, Computer Science Department, University of Georgia, 1999.

[23] J. Miller, D. Palaniswami, A. Sheth, K. Kochut, and H. Singh. “WebWork: METEOR's Web-based Workflow Management System”. Journal of Intelligence Information Management Systems, pp. 185-215, 1997.

[24] Manfred Reichert, Peter Dadam, “ADEPT — Supporting Dynamic Changes of Workflows Without Loosing Control”. Journal of Intelligent Information Systems (JIIS), Special Issue on Workflow Management Systems, Vol. 10, No. 2, pp. 93-129, 1998.

[25] Vincent, Regis, Horling, Bryan, Wagner, Tom and Lesser, Victor. “Survivability Simulator for Multi-Agent Adaptive Coordination”. In International Conference on Web-Based Modeling and Simulation, San Diego, CA, 1998.

[26] C. Sabnis, M. Cukier, J. Ren, P. Rubel, W. H. Sanders, D. E. Bakken, and D. A. Karr. “Proteus: A Flexible Infrastructure to Implement Adaptive Fault Tolerance in AquA”. In C. B. Weinstock and J. Rushby (Eds.), Dependable Computing for Critical Applications 7, vol. 12 in series Dependable Computing and Fault-Tolerant Systems, pp. 149-168. Los Alamitos, CA, IEEE Computer Society, 1999.

[27] Santosh K. Shrivastava, Stuart M. Wheater, “Architectural Support for Dynamic Reconfiguration of Distributed Workflow Applications”. IEE Proceedings – Software Engineering, 145:5, pp. 155-162, 1998.

[28] Knight J. Sullivan, John C. Knight, Xing Du, and Steve Geist. “Information Survivability Control Systems”. Proceedings of 21th International Conference on Software Engineering (ICSE’99), Los Angeles, California, May 16-22, 1999.

[29] Swenson, K., “SWAP - Simple Workflow Access Protocol”. 1998.

[30] Jeffrey M. Voas, Gary E. McGraw, & Anup K. Ghosh, “Reducing Uncertainty About Survivability”. Information Survivability Workshop - ISW'97, San Diego, California, Feb 12-13, 1997.

[31] Olaf Zukunft. “Rule based Adaptation in Mobile Database Systems”. Proc. 12th Symposium on Applied Computing, ACM SAC 97, pp. 310-317, Mar 1997.