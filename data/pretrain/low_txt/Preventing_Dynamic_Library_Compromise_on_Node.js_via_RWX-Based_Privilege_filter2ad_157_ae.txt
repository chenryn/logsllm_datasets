以下是优化后的文本，使其更加清晰、连贯和专业：

---

**参考文献**

[57] Niels Provos, Markus Friedl, 和 Peter Honeyman. 2003. 防止特权提升. 在第12届USENIX安全研讨会论文集 (SSYM'03). USENIX协会, 加利福尼亚州伯克利, 16-16. https://dl.acm.org/citation.cfm?id=1251353.1251369

[58] Martin Rinard. 2011. 通过操纵程序功能消除安全漏洞. 在《移动目标防御》. Springer, 109-115.

[59] J. M. Rushby. 1981. 安全系统的设计与验证. 在第八届ACM操作系统原理研讨会论文集 (SOSP '81). ACM, 纽约, NY, USA, 12-21. https://doi.org/10.1145/800216.806586

[60] Jerome H Saltzer. 1974. Multics中的信息共享保护与控制. 通讯. ACM 17, 7 (1974), 388-402.

[61] José Fragoso Santos, Thomas Jensen, Tamara Rezk, 和 Alan Schmitt. 2015. JavaScript类语言中安全信息流的混合类型. 在可信全球计算. Springer, 63-78.

[62] José Fragoso Santos 和 Tamara Rezk. 2014. 为JavaScript核心部分的安全性提供信息流监控内联编译器. 在IFIP国际信息安全会议. Springer, 278-292.

[63] Node Security. 2016. 持续安全监控您的Node应用. https://nodesecurity.io/

[64] Jonathan S Shapiro, Jonathan M Smith, 和 David J Farber. 1999. EROS: 一个快速的能力系统. 卷33. ACM.

[65] Snyk. 2021. Snyk漏洞数据库. https://snyk.io/vuln?type=npm

[66] Manu Sridharan, Julian Dolby, Satish Chandra, Max Schäfer, 和 Frank Tip. 2012. JavaScript的指针分析相关跟踪. 在ECOOP 2012 - 面向对象编程 - 第26届欧洲会议, 北京, 中国, 2012年6月11-16日. 435-458.

[67] Cristian-Alexandru Staicu, Martin Toldam Torp, Max Schäfer, Anders Møller, 和 Michael Pradel. 2020. 提取JavaScript库的污点规范. 在ICSE '20: 第42届国际软件工程会议, 首尔, 韩国, 2020年6月27日至7月19日. Gregg Rothermel 和 Doo-Hwan Bae (编辑). ACM, 198-209. https://doi.org/10.1145/3377811.3380390

[68] Cristian-Alexandru Staicu, Michael Pradel, 和 Benjamin Livshits. 2018. Synode: 理解并自动防止对Node.js的注入攻击. 在网络和分布式系统安全 (NDSS'18). https://doi.org/10.14722/ndss.2018.23071

[69] Deian Stefan, Edward Z. Yang, Petr Marchenko, Alejandro Russo, Dave Herman, Brad Karp, 和 David Mazières. 2014. 使用COWL限制JavaScript以保护用户. 在第11届USENIX操作系统设计与实现研讨会 (OSDI 14). USENIX协会, 科罗拉多州布鲁姆菲尔德, 131-146. https://www.usenix.org/conference/osdi14/technical-sessions/presentation/stefan

[70] Michael Stepankin. 2016. [demo.paypal.com] Node.js代码注入 (RCE). http://artsploit.blogspot.com/2016/08/pprce2.html. 访问日期: 2018-10-05.

[71] Michael Stepankin. 2016. Snyk: dustjs-linkedin中的代码注入. https://snyk.io/vuln/npm:dustjs-linkedin:20160819. 访问日期: 2019-03-19.

[72] TC39. 2021. SES (Secure EcmaScript)草案提案. https://github.com/tc39/proposal-ses. 访问日期: 2021-04-20.

[73] Mike Ter Louw, Phu H Phung, Rohini Krishnamurti, 和 Venkat N Venkatakrishnan. 2013. SafeScript: 用于策略执行的JavaScript转换. 在北欧安全IT系统会议. Springer, 67-83.

[74] Jeff Terrace, Stephen R Beard, 和 Naga Praveen Kumar Katta. 2012. JavaScript中的JavaScript (js.js): 沙箱化第三方脚本. 在第三届USENIX Web应用程序开发会议 (WebApps 12) 上展示. 95-100.

[75] Neline van Ginkel, Willem De Groef, Fabio Massacci, 和 Frank Piessens. 2019. 一种服务器端JavaScript安全架构, 用于安全集成第三方库. 安全和通信网络 2019 (2019).

[76] Nikos Vasilakis, Achilles Benetopoulos, Shivam Handa, Alizee Schoen, 和 Martin C. Rinard. 2021. 通过主动学习和再生消除供应链漏洞. 在2021年ACM SIGSAC计算机和通信安全会议 (CCS '21) 论文集. 计算机协会, 纽约, NY, USA.

[77] Nikos Vasilakis, Ben Karel, Nick Roessler, Nathan Dautenhahn, André DeHon, 和 Jonathan M. Smith. 2018. BreakApp: 自动、灵活的应用隔离. 在网络和分布式系统安全 (NDSS'18). https://doi.org/10.14722/ndss.2018.23131

[78] Nikos Vasilakis, Grigoris Ntousakis, Veit Heller, 和 Martin C. Rinard. 2021. 动态语言模块级动态分析的高效方法. 在第29届欧洲软件工程会议和软件工程基础研讨会联合会议 (ESEC/FSE 2021) 论文集. 计算机协会, 纽约, NY, USA, 1202-1213. https://doi.org/10.1145/3468264.3468574

[79] Robert Wahbe, Steven Lucco, Thomas E. Anderson, 和 Susan L. Graham. 1993. 高效的基于软件的故障隔离. 在第十四届ACM操作系统原理研讨会 (SOSP '93) 论文集. ACM, 纽约, NY, USA, 203-216. https://doi.org/10.1145/168619.168635

[80] Michael Weissbacher, William K. Robertson, Engin Kirda, Christopher Kruegel, 和 Giovanni Vigna. 2015. ZigZag: 自动强化Web应用程序以防止客户端验证漏洞. 在第24届USENIX安全研讨会, USENIX Security 15, 华盛顿特区, 美国, 2015年8月12-14日. Jaeyeon Jung 和 Thorsten Holz (编辑). USENIX协会, 737-752. https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/weissbacher

[81] Yongzheng Wu, Sai Sathyanarayan, Roland HC Yap, 和 Zhenkai Liang. 2012. Codejail: 应用透明的库隔离, 具有紧密的程序交互. 在欧洲计算机安全研究研讨会. Springer, 859-876.

[82] Nicholas C. Zakas 和 ESLint贡献者. 2013. ESLint—可插拔的JavaScript检查工具. https://eslint.org/. 访问日期: 2018-07-12.

[83] Markus Zimmermann, Cristian-Alexandru Staicu, Cam Tenny, 和 Michael Pradel. 2019. 小世界高风险: npm生态系统中的安全威胁研究. 在第28届USENIX安全研讨会论文集 (SEC'19). USENIX协会, 美国, 995-1010.

**兼容性分析 (Q3)**

表5和表6分别报告了Q1库子集和Q2流行库的兼容性结果。

**详细安全分析 (Q1)**

下表展示了Mir的安全评估细节。表7列出了我们能够安装的漏洞，这些漏洞有或我们已经创建了利用，并且属于Mir的威胁模型。Mir防御了61/63个利用，并在其他两个库上崩溃；即使没有运行利用，Mir在这两个库上也会崩溃。（表7的最后一列提供了与Mir兼容性分析相关的信息，特别是哪些Q1库被纳入了Mir的兼容性评估及其原因。）表8包含了一些我们未对Mir应用的易受攻击的库及其原因。在每个库最多5小时的人力投入超时时间内，有7个库无法被利用，6个库无法安装；33个库不在Mir的威胁模型范围内；23个库是为不同的语言或平台设计的。

**详细权限分析 (Q2)**

表9包含了Mir的权限分析结果。

---

希望这能帮助您更好地组织和呈现您的内容！如果需要进一步的修改或调整，请告诉我。