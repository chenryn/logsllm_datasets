### Computational Resources
The computations for this work were carried out using the High-Performance Computing (HPC) facilities at the University of Luxembourg [39]. For more information, please visit: <https://hpc.uni.lu>. This work is partially supported by the Luxembourg National Research Fund (FNR) under grant 13192291.

### References

1. **Amani, S., Béguin, M., Bortin, M., & Staples, M. (2018).** *Towards Verifying Ethereum Smart Contract Bytecode in Isabelle/HOL.* In *Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs (CPP’18)*, pp. 66–77. ACM. DOI: <https://doi.org/10.1145/3167084>

2. **Atzei, N., Bartoletti, M., & Cimoli, T. (2017).** *A Survey of Attacks on Ethereum Smart Contracts (SoK).* In *Proceedings of the 6th International Conference on Principles of Security and Trust - Volume 10204*. Lecture Notes in Computer Science, Vol. 10204. Springer-Verlag, pp. 164–186.

3. **Ben Ayed, A. (2017).** *A Conceptual Secure Blockchain-Based Electronic Voting System.* *International Journal of Network Security & Its Applications*, 9(3), 01–09.

4. **Baylina, J. (2019).** *Verification of the Balances Rescued from the Multisig Compromise.* GitHub. <https://github.com/Giveth/WHGBalanceVerification>

5. **Bhargavan, K., Delignat-Lavaud, A., Fournet, C., Gollamudi, A., Gonthier, G., Kobeissi, N., Kulatova, N., Rastogi, A., Sibut-Pinote, T., Swamy, N., & Zanella-Béguelin, S. (2016).** *Formal Verification of Smart Contracts: Short Paper.* In *Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security (PLAS ’16)*, pp. 91–96. ACM. DOI: <https://doi.org/10.1145/2993600.2993611>

6. **Breidenbach, L., Daian, P., Tramèr, F., & Juels, A. (2018).** *Enter the Hydra: Towards Principled Bug Bounties and Exploit-Resistant Smart Contracts.* In *Proceedings of the 27th USENIX Security Symposium (USENIX Security’18)*, pp. 1335–1352. USENIX Association. <https://www.usenix.org/conference/usenixsecurity18/presentation/breidenbach>

7. **ChainSecurity. (2019).** *Constantinople Enables New Reentrancy Attack.* Medium. <https://medium.com/chainsecurity/constantinople-enables-new-reentrancy-attack-ace4088297d9>

8. **Daniel, A. (2016).** *CarbonVote.* <https://carbonvote.com/>

9. **devops199. (2019).** *Your Contract Can Kill Anyone.* GitHub. <https://github.com/paritytech/parity-ethereum/issues/6995>

10. **Feist, J., Grieco, G., & Groce, A. (2019).** *Slither: A Static Analysis Framework for Smart Contracts.* In *2019 IEEE/ACM 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB)*, pp. 8–15. IEEE.

11. **Grishchenko, I., Maffei, M., & Schneidewind, C. (2018).** *A Semantic Framework for the Security Analysis of Ethereum Smart Contracts.* In *Proceedings of the 7th International Conference on Principles of Security and Trust (POST’18)*, Lecture Notes in Computer Science, Vol. 10804. Springer, pp. 243–269. DOI: <https://doi.org/10.1007/978-3-319-89722-6_10>

12. **Grossman, S., Abraham, I., Golan-Gueta, G., Michalevsky, Y., Rinetzky, N., Sagiv, M., & Zohar, Y. (2017).** *Online Detection of Effectively Callback Free Objects with Applications to Smart Contracts.* *Proceedings of the ACM on Programming Languages*, 2(POPL), 48.

13. **NCC Group. (2018).** *Decentralized Application Security Project (DASP) Top 10.* <https://dasp.co/index.html>

14. **Hao, F., Ryan, P. Y. A., & Zieliński, P. (2010).** *Anonymous Voting by Two-Round Public Discussion.* *IET Information Security*, 4(2), 62–67.

15. **He, J., Balunovic, M., Ambroladze, N., Tsankov, P., & Vechev, M. T. (2019).** *Learning to Fuzz from Symbolic Execution with Application to Smart Contracts.* In *Proceedings of the 26th ACM SIGSAC Conference on Computer and Communications Security (CCS’19)*, pp. 531–548. ACM. DOI: <https://doi.org/10.1145/3319535.3363230>

16. **Hildenbrandt, E., Saxena, M., Rodrigues, N., Zhu, X., Daian, P., Guth, D., Moore, B., Park, D., Zhang, Y., Stefanescu, A., et al. (2018).** *KEVM: A Complete Formal Semantics of the Ethereum Virtual Machine.* In *2018 IEEE 31st Computer Security Foundations Symposium (CSF)*, pp. 204–217. IEEE.

17. **Hjálmarsson, F., Hreiðarsson, G. K., Hamdaqa, M., & Hjálmtýsson, G. (2018).** *Blockchain-Based E-Voting System.* In *2018 IEEE 11th International Conference on Cloud Computing (CLOUD)*, pp. 983–986. IEEE.

18. **Jiang, B., Liu, Y., & Chan, W. K. (2018).** *ContractFuzzer: Fuzzing Smart Contracts for Vulnerability Detection.* In *Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering*, pp. 259–269. ACM.

19. **Kalra, S., Goel, S., Dhawan, M., & Sharma, S. (2018).** *ZEUS: Analyzing Safety of Smart Contracts.* In *Proceedings of the 25th Network and Distributed System Security Symposium (NDSS’18)*, pp. 1–12. The Internet Society.

20. **Kolluri, A., Nikolic, I., Sergey, I., Hobor, A., & Saxena, P. (2019).** *Exploiting the Laws of Order in Smart Contracts.* In *Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis*, pp. 363–373. ACM.

21. **Krupp, J. & Rossow, C. (2018).** *teEther: Gnawing at Ethereum to Automatically Exploit Smart Contracts.* In *27th USENIX Security Symposium (USENIX Security’18)*, pp. 1317–1333. USENIX Association. <https://www.usenix.org/conference/usenixsecurity18/presentation/krupp>

22. **Lee, K., James, J. I., Ejeta, T. G., & Kim, H. J. (2016).** *Electronic Voting Service Using Block-Chain.* *Journal of Digital Forensics, Security and Law*, 11(2), 8.

23. **Luu, L., Chu, D.-H., Olickel, H., Saxena, P., & Hobor, A. (2016).** *Making Smart Contracts Smarter.* In *Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS ’16)*, pp. 254–269. ACM. DOI: <https://doi.org/10.1145/2976749.2978309>

24. **McCorry, P., Shahandashti, S. F., & Hao, F. (2017).** *A Smart Contract for Boardroom Voting with Maximum Voter Privacy.* In *Proceedings of the 21st International Conference on Financial Cryptography and Data Security (FC’17)*, Lecture Notes in Computer Science, Vol. 10322. Springer, pp. 357–375. DOI: <https://doi.org/10.1007/978-3-319-70972-7_20>

25. **Nakamoto, S. (2009).** *Bitcoin: A Peer-to-Peer Electronic Cash System.* Cryptography Mailing List. <https://metzdowd.com/pipermail/cryptography/2009-April/014923.html>

26. **Nikolic, I., Kolluri, A., Sergey, I., Saxena, P., & Hobor, A. (2018).** *Finding the Greedy, Prodigal, and Suicidal Contracts at Scale.* In *Proceedings of the 34th Annual Computer Security Applications Conference (ACSAC’18)*, pp. 653–663. ACM.

27. **Osgood, R. (2016).** *The Future of Democracy: Blockchain Voting.* COMP116: Information Security, pp. 1–21.

28. **Permenev, A., Dimitrov, D., Tsankov, P., Drachsler-Cohen, D., & Vechev, M. (2020).** *VerX: Safety Verification of Smart Contracts.* In *Proceedings of the 41st IEEE Symposium on Security and Privacy (IEEE SP’20)*, pp. 18–20. IEEE.

29. **Petrov, S. (2017).** *Another Parity Wallet Hack Explained.* Medium. <https://medium.com/@Pr0Ger/another-parity-wallet-hack-explained-847ca46a2e1c>

30. **Rodler, M., Li, W., Karame, G. O., & Davi, L. (2019).** *Re-Entrancy Attack Patterns.* GitHub. <https://github.com/uni-due-syssec/eth-reentrancy-attack-patterns>

31. **Rodler, M., Li, W., Karame, G. O., & Davi, L. (2019).** *Sereum: Protecting Existing Smart Contracts Against Re-Entrancy Attacks.* In *Proceedings of the 26th Network and Distributed System Security Symposium (NDSS’19)*. The Internet Society.

32. **Siegel, D. (2016).** *Understanding the DAO Attack.* Coindesk. <https://www.coindesk.com/understanding-dao-hack-journalists/>

33. **Sun, X., Wang, Z., Kulicki, P., & Sopek, M. (2019).** *A Simple Voting Protocol on Quantum Blockchain.* *International Journal of Theoretical Physics*, 58(1), 275–281.

34. **Tann, A., Han, X. J., Gupta, S. S., & Ong, Y.-S. (2018).** *Towards Safer Smart Contracts: A Sequence Learning Approach to Detecting Vulnerabilities.* arXiv preprint arXiv:1811.06632.

35. **Tikhomirov, S., Voskresenskaya, E., Ivanitskiy, I., Takhaviev, R., Marchenko, E., & Alexandrov, Y. (2018).** *SmartCheck: Static Analysis of Ethereum Smart Contracts.* In *Proceedings of the 1st IEEE/ACM International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB@ICSE’18)*, pp. 9–16. ACM. <http://ieeexplore.ieee.org/document/8445052>

36. **Torres, C. F., Schütze, J., & State, R. (2018).** *Osiris: Hunting for Integer Bugs in Ethereum Smart Contracts.* In *Proceedings of the 34th Annual Computer Security Applications Conference (ACSAC ’18)*, pp. 664–676. ACM. DOI: <https://doi.org/10.1145/3274694.3274737>

37. **Torres, C. F., Steichen, M., & State, R. (2019).** *The Art of the Scam: Demystifying Honeypots in Ethereum Smart Contracts.* In *28th USENIX Security Symposium (USENIX Security 19)*, pp. 1591–1607. USENIX Association, Santa Clara, CA.

38. **Tsankov, P., Dan, A., Drachsler-Cohen, D., Gervais, A., Buenzli, F., & Vechev, M. (2018).** *Securify: Practical Security Analysis of Smart Contracts.* In *Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security*, pp. 67–82. ACM.

39. **Varrette, S., Bouvry, P., Cartiaux, H., & Georgatos, F. (2014).** *Management of an Academic HPC Cluster: The UL Experience.* In *Proceedings of the 2014 Intl. Conf. on High Performance Computing & Simulation (HPCS 2014)*, pp. 959–967. IEEE, Bologna, Italy.

40. **Wang, H., Li, Y., Lin, S.-W., Ma, L., & Liu, Y. (2019).** *Vultron: Catching Vulnerable Smart Contracts Once and for All.* In *Proceedings of the 41st International Conference on Software Engineering: New Ideas and Emerging Results (ICSE NIER’19)*, pp. 1–4. IEEE / ACM. DOI: <https://doi.org/10.1109/ICSE-NIER.2019.00009>

41. **Wood, G. (2014).** *Ethereum: A Secure Decentralised Generalised Transaction Ledger.* Ethereum Project Yellow Paper, 151, 1–32.

42. **Wüstholz, V. & Christakis, M. (2019).** *Harvey: A Greybox Fuzzer for Smart Contracts.* arXiv preprint arXiv:1905.06944.

43. **Zhang, P., Xiao, F., & Luo, X. (2019).** *SolidityCheck: Quickly Detecting Smart Contract Problems Through Regular Expressions.* arXiv preprint arXiv:1911.09425.

44. **Zhao, W. (2017).** *$30 Million: Ether Reported Stolen Due to Parity Wallet Breach.* Coindesk. <https://www.coindesk.com/30-million-ether-reported-stolen-parity-wallet-breach>

45. **Zhao, Z. & Chan, T.-H. H. (2015).** *How to Vote Privately Using Bitcoin.* In *Proceedings of the 17th International Conference on Information and Communications Security (ICICS’15)*, Lecture Notes in Computer Science, Vol. 9543. Springer, pp. 82–96. DOI: <https://doi.org/10.1007/978-3-319-29814-6_8>

46. **Zhou, Y., Kumar, D., Bakshi, S., Mason, J., Miller, A., & Bailey, M. (2018).** *Erays: Reverse Engineering Ethereum’s Opaque Smart Contracts.* In *27th {USENIX} Security Symposium ({USENIX} Security 18)*, pp. 1371–1385. USENIX Association.

### A Complete List of ÆGIS's Attack Patterns

Table 5 provides a complete list of vulnerabilities and their respective attack patterns that ÆGIS is currently capable of detecting.

#### Unconditional Reentrancy Example

Figure 9 shows an example of a smart contract with an unconditional reentrancy. In this example, an attacker first deposits a small amount of ether and then uses a reentrancy attack to drain all the ether that every single user has deposited.

```solidity
contract VulnBank {
    mapping (address => uint) public userBalances;

    function deposit() public payable {
        userBalances[msg.sender] += msg.value;
    }

    function withdrawAll() public {
        uint amountToWithdraw = userBalances[msg.sender];
        msg.sender.call.value(amountToWithdraw)("");
        userBalances[msg.sender] = 0;
    }
}
```

*Figure 9: Example of a contract that is vulnerable to unconditional reentrancy [30].*

### Table 5: List of Vulnerabilities and Their Respective Attack Patterns

| Vulnerability               | Attack Pattern                                                                 |
|-----------------------------|-------------------------------------------------------------------------------|
| Same-Function Reentrancy    | (opcode = CALL) ⇒ (opcode = CALL) where (src.stack(1) = dst.stack(1)) ∧ (src.address = dst.address) ∧ (src.memory(src.stack(3), src.stack(4)) ≠ dst.memory(dst.stack(3), dst.stack(4))) → (src.address = dst.address) ∧ (src.depth > dst.depth) |
| Cross-Function Reentrancy   | (opcode = CALL) ⇒ (opcode = CALL) where (src.stack(1) = dst.stack(1)) ∧ (src.address = dst.address) ∧ (src.pc = dst.pc) → (src.address = dst.address) ∧ (src.depth > dst.depth) |
| Delegated Reentrancy         | (opcode = DELEGATECALL) ⇒ (opcode = DELEGATECALL) where (src.stack(1) = dst.stack(1)) ∧ (src.address = dst.address) ∧ (src.pc = dst.pc) → (src.address = dst.address) ∧ (src.depth > dst.depth) |
| Create-Based Reentrancy      | (opcode = CREATE) ⇒ (opcode = CREATE) where (src.stack(1) = dst.stack(1)) ∧ (src.address = dst.address) ∧ (src.pc = dst.pc) → (src.address = dst.address) ∧ (src.depth > dst.depth) |
| Parity Wallet Hack 1         | (opcode = DELEGATECALL) ⇒ (opcode = CALLDATACOPY) (cid:123) (opcode = SSTORE) (cid:123) (opcode = JUMPI) where (src.transaction.hash ≠ dst.transaction.hash) → ((opcode = CALLDATALOAD) (cid:123) (opcode = CALL)) where (dst.stack(2) > 0) |
| Parity Wallet Hack 2         | (opcode = CALLDATACOPY) (cid:123) (opcode = SSTORE) (cid:123) (opcode = JUMPI) where (src.transaction.hash ≠ dst.transaction.hash) → ((opcode = CALLDATALOAD) (cid:123) (opcode = SELFDESTRUCT)) |
| Integer Overflow (Addition)  | (opcode = CALLDATALOAD) (cid:123) (opcode = ADD) where ((dst.stack(0) + dst.stack(1)) ≠ dst.stack.result) (cid:123) (opcode = CALL) |
| Integer Overflow (Multiplication) | (opcode = CALLDATALOAD) (cid:123) (opcode = MUL) where ((dst.stack(0) * dst.stack(1)) ≠ dst.stack.result) (cid:123) (opcode = CALL) |
| Integer Underflow            | (opcode = CALLDATALOAD) (cid:123) (opcode = SUB) where ((dst.stack(0) - dst.stack(1)) ≠ dst.stack.result) (cid:123) (opcode = CALL) |
| Timestamp Dependence         | (opcode = TIMESTAMP) (cid:123) (opcode = JUMPI) → (opcode = CALL) where (dst.stack(2) > 0) |
| Transaction Order Dependency | (opcode = SSTORE) (cid:123) (opcode = SLOAD) where (src.block.number = dst.block.number) ∧ (src.transaction.from ≠ dst.transaction.from) |

This table outlines the specific conditions and opcodes that define each type of vulnerability and its corresponding attack pattern.