# Tag-Side Attacks Against NFC

## Introduction to NFC
**NFC (Near Field Communication)** is a technology that enables contactless communication between two devices in close proximity. It is widely used in applications such as door access control and payment systems.

### Why Attack NFC?
- **Interesting Technology**: NFC is a fascinating and widely used technology.
- **Cost of Analysis Tools**: Low-level analysis tools can be prohibitively expensive.
- **Security Concerns**: Despite known security vulnerabilities, NFC is still extensively used.

## ISO-14443 Standard
ISO-14443 focuses on 13.56MHz NFC communication and defines the characteristics of the communication between tags and readers. There are two main types of tags based on this standard: Type A and Type B. ISO-14443A is the most commonly used standard.

### Low-Level Communication – ISO14443A
- **Powering Tags**: Tags are powered by electromagnetic induction.
- **Communication Mechanism**:
  - The reader sends data by modulating the field at specific intervals.
  - The reader uses the Modified Miller coding scheme to transmit data to the tag.
  - The tag responds by modifying the power it draws from the reader using the Manchester coding scheme.
  - Each byte communicated includes an additional parity bit.

#### Modified Miller Coding Scheme
- **0 bit after 0 bit**: Low for the first quarter of the transmission, followed by high for the remainder.
- **0 bit after 1 bit**: High for the entire transmission.
- **1 bit**: High for the first half of the transmission, low for one quarter, and high for the remainder.

#### Manchester Coding Scheme
- **Signal Modulation**: Performed by modifying the phase of the signal.
- **NFC Implementation**: Achieved by changing the load drawn by the tag using a subcarrier.

## Basic Enumeration
- **Anticollision**: Used when multiple tags communicate with a reader.
- **Process**:
  - Requests responses based on partial UIDs.
  - Increases the number of bits requested until a single UID is identified.
  - Allows subsequent tags to be identified and communicated with.

## Encryption and Authentication
### Mifare Ultralight
- **Authentication Key**: Sent to the tag.
- **Authentication**:
  - If the key is correct, communication is allowed.
  - Failed attempts are logged and can lock the chip.
  - Can operate without authentication.
  - Newer versions support more authentication methods.

### Mifare Classic
- **Crypto-1 Algorithm**: Used for encryption.
- **Authentication Process**:
  - Reader requests authentication for a sector (0x60/0x61).
  - Tag responds with a unique four-byte nonce.
  - Reader sends a random value and an encrypted number generated from the nonce.
  - Tag responds with an encrypted number.
  - Further communication is encrypted.
  - Each sector can have its own unique keys.

### Mifare DESFire
- **Authentication Methods**: Based on DES, 3-DES, or AES, depending on the version and configuration.
- **Multiple Keys**: Can be used for authentication.
- **Similar to Mifare Classic**: Not yet broken in any meaningful manner.

## Creating Analysis Tools
### Existing Tools and Projects
- **Proxmark3**: [https://proxmark.com/](https://proxmark.com/)
- **Chameleon Mini**: [https://github.com/emsec/ChameleonMini](https://github.com/emsec/ChameleonMini)
- **HydraNFC**: [https://hydrabus.com/hydranfc-1-0-specifications/](https://hydrabus.com/hydranfc-1-0-specifications/)
- **SimpleNFC**: [http://www.nonan.net/nkruse/simplenfc](http://www.nonan.net/nkruse/simplenfc)
- **Emutag**: [http://www.emutag.com/](http://www.emutag.com/)

### NFC Field Detection
- **LED and Coil**: Useful for detecting active fields.
- **RTL-SDR**: Powerful SDR tunable between 25MHz and 1700MHz.
  - **Configurable Sample Rate**: Libraries available for simple communication.
  - **Issues**:
    - Cannot tune down to 13.56MHz without hardware modifications.
    - Cannot run at a low sample rate.
    - Bundled with a weak antenna.
    - Not built for purpose.

### Tuning RTL-SDR to Harmonic Frequency
- **Possible Tuning**: To 27.12MHz for adequate signal.
- **Synchronization**: By setting the sample rate to 1.695MHz.
- **Antenna Modifications**: Not required; introducing a coil to the NFC field provides sufficient power.
- **Detection**: Communication from the reader to the tag.
- **Automatic Gain Control**: Possible due to constant signal.
- **Real-Time Analysis**: Provides accurate responses.

## Building a Tag
### Initial Tag Type
- **Mifare Classic**: Chosen as the initial tag type.
- **Non-Standard Chipsets**: Built without standard NFC chipsets to access raw communication.
- **Minimal Components**: Aimed to use minimal components.
- **Crypto-1 Implementation**: Required for full implementation, adding complexity but identifying protocol weaknesses.

### Hardware Requirements
- **Inductive Coupling**: Required to receive the signal from the reader.
- **Demodulation**: Signal demodulated by amplitude.
- **Microcontroller**: Needed to synchronize to 13.56MHz and perform encryption calculations.
- **Memory**: Sufficient memory for data storage.

### Inductive Coupling - LC Circuit
- **Components**: Inductor and capacitor.
- **Tuning**: Coil tuned to a 10pF capacitor.
- **Resonance Check**: Using a logic analyzer to verify 13.56MHz frequency.

### Demodulation – Envelope Detector
- **Components**: Diode, resistor, and capacitor.
- **Function**: Rectifies and smooths the signal.
- **Values**: 1K resistor and 220pF capacitor.

### Receiving Circuit
- **Final Circuit**: Simple layout.
- **Performance**: Accurately receives communication with sufficient voltage to trigger GPIO.

### Microcontroller Selection
- **ATTiny84**: Selected for the initial device.
- **Features**:
  - 8KB program space, 512B RAM.
  - Programmable using Arduino or dedicated programmer.
  - Uses external crystals for specific frequencies.
  - DIP package for easy prototyping.
  - Good support for interrupts and timers.
  - Limited debugging support.
  - 8-bit architecture may cause issues with fast calculations.

### Implementation
- **Crystal and Capacitors**: Connected to the ATTiny.
- **Receiving Circuit**: Connected to input and output pins.
- **Debugging**: Software-based SPI for debug strings.
- **LED**: Confirms device activity.
- **State Machine**: Implemented to emulate a Mifare Classic tag.

### Timing Issues
- **Synchronization**: Using a 13.56MHz crystal, the ATTiny was synchronized with the reader.
- **GPIO Readings**: At predefined intervals, values were read.
- **Clock Drift**: Caused inconsistent results.
- **Interrupts**: Configured to run on signal changes, improving accuracy to 99%.

### Implementing Crypto-1
- **References**: Crapto-1 library and papers.
- **Key Structure**: 48-bit keys split into two 24-bit keys.
- **Performance**: 8-bit architecture and AVR machine code limitations.
- **Optimizations**:
  - Converted C code to AVR assembly.
  - Used SimAVR for comparison and debugging.
  - Optimized bit-shift operations.
  - Increased calculation speed by ~10 times.

### Hardware Limitations
- **Speed**: Microcontroller too slow for complex operations.
- **Memory**: Limited RAM and Flash.
- **EEPROM**: Insufficient for storing an entire tag.
- **Debugging**: Difficult on AVR microcontrollers.
- **Peripherals**: Limited number of pins.

### Building a Better Device
- **STM32L496ZG**: More powerful microcontroller.
- **Features**:
  - 1MB Flash, 320KB RAM.
  - 80MHz clock speed.
  - 32-bit architecture.
  - USB and UART peripherals.
  - Easy programming and debugging.

### Pin Configurations and Clock Speeds
- **STM32Cube**: Set pin configurations and clock speeds.
- **Codebase**: Minimal modifications required.
- **Synchronization**: Internal clock not tunable to 13.56MHz.
- **Frequency Assessment**: Finding the most suitable clock frequency.

### Additional Features
- **Multi-Tag Support**: Multiple instances of the state machine.
- **Dynamic Crypto-1 Key Generation**: Reverse-engineering key generation algorithms.
- **DESFire Implementation**: Modify SAK and ATQA response values.
- **Testing**: Using Mifare DESFire Tool Android Application.

## Security Weaknesses
### Crypto-1 Weaknesses
- **Known Vulnerabilities**: Outlined in "Dismantling Mifare Classic".
- **Brute Force**: 48-bit keys can be brute-forced.
- **Replay Attacks**: Authentication vulnerable to replay attacks.
- **Nonce Recovery**: Nonces can recover 32-bits of keystream.
- **Rollbacks**: Can fully recover the initial key.

### Attacking Crypto-1 from the Tag
- **Key Recovery**: From two authentication requests.
- **Keystream Calculation**: XORing with the generated value.
- **Reducing Key Space**: From ~16 million to ~200,000 possible keys.
- **Offline Cracking**: Keys recovered in under ten minutes.
- **Practicality**: Impractical in real-world settings.

### Demonstration
- **Selected Reader**: Japanese Video Game NFC reader.
- **Reverse Engineering**: Using USBProxy and Beaglebone Black.
- **Incompatibility**: Proxmark and Chameleon Mini.
- **Custom Tool**: Written to process UIDs and recover keys.
- **Verification**: Verified against the reader.

### Improvements
- **Increased Key Size**: Significantly increases attack complexity.
- **Single Large Key**: Prevents brute forcing.
- **Improved PRNG**: Limits replay attacks.
- **Removing Known Plaintext**: Reduces exploitation opportunities.

### Raw Protocol Weaknesses
- **Initial Enumeration**: Most NFC chipsets don't support control.
- **Response Sizes**: No limits, potentially causing memory corruption.
- **Anticollision Procedures**: Exploiting by overflowing buffer.

### High-Level Protocol Weaknesses
- **Tag Types**: Each has its own weaknesses.
- **Fuzzing**: Entire stack lends itself to fuzzing.
- **NDEF Data**: Greatest potential for weaknesses.
- **Authentication**: Often has known plaintext weaknesses.
- **Hardware Capabilities**: Complex authentication and encryption not feasible.

## Compiling Research
- **STM32F070**: Small TSSOP-20 chip.
- **Features**:
  - 32KB Flash, 6KB RAM.
  - Recommended maximum clock speed of 48MHz.
  - Overclockable to 72MHz and above.
  - Easily soldered to a breakout board.

### NFC Sonic Screwdriver
- **Circuitry**: Similar to the original STM32 device.
- **Modes**:
  - Fuzz
  - Dump Authentication
  - Standard Mifare Classic
- **Solo STM32F070**: Using internal clock.
- **Power Source**: Lithium Ion battery.
- **Programming**: Via SWD.

## Future Work
- **Source Release**: RTL-SDR, AVR, and STM32 tools.
- **Board Design**: For various applications.
- **DESFire Implementation**: Full implementation.
- **Research**: More tag types for weaknesses.

## Contact Information
- **Christopher Wade**
- **@Iskuri1**
- **GitHub**: [https://github.com/Iskuri](https://github.com/Iskuri)
- **Website**: [https://www.pentestpartners.com](https://www.pentestpartners.com)
- **Hardware Hacking Village**: 17:00 – Follow-up talk and questions