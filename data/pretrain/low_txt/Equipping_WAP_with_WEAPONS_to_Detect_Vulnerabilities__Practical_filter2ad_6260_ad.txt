### Tool Functionality and Configuration

The tool accurately did not report six specific cases. This is consistent with the behavior of WAP, which does not flag sanitized candidate vulnerabilities. This example illustrates that users can configure WAP for a specific web application during its development. By feeding WAP with user-defined functions developed for the application, users can refine and improve the application's code.

### WordPress Plugins Analysis

To address the first and last questions and to identify previously unknown (zero-day) vulnerabilities, we ran WAP on a set of 115 WordPress (WP) plugins [27]. Five of these plugins had known vulnerabilities listed in the Common Vulnerabilities and Exposures (CVE) database [5]. WordPress is the most widely adopted Content Management System (CMS) and supports plugins developed by various teams. We selected 115 plugins from different categories (arts, food, health, shopping, travel, authentication, popular plugins, etc.) and across a range of download counts, from fewer than 2,000 to more than 500,000. Popular plugins, some with over 1 million downloads, fall into the highest download range. Figure 4(a) shows the number of downloads for these plugins, and Figure 4(b) displays the number of active installations.

WAP identified 153 zero-day vulnerabilities and 16 known vulnerabilities. Table VII lists the 23 plugins with vulnerabilities, categorized into 8 classes. The `wpsqli` weapon detected 55 SQL Injection (SQLI) vulnerabilities, while other detectors found the remaining 114 vulnerabilities, including Cross-Site Scripting (XSS), Remote File Inclusion (RFI), Local File Inclusion (LFI), Directory Traversal (DT), Header Injection (HI), and Command Shell (CS) (the last two are new classes). For the five known vulnerable plugins (appointment-booking-calendar 1.1.7, easy2map 1.2.9, payment-form-for-paypal-pro 1.0.1, resads 1.0.1, and simple-support-ticket-system 1.2), we confirmed the vulnerabilities using information from BugTraq [3]. However, for the `simple-support-ticket-system 1.2` plugin, WAP detected 13 additional SQLI vulnerabilities beyond those registered.

The 23 vulnerable plugins span all download ranges, as shown by the orange columns in Figure 4(a). Sixteen of them have more than 10,000 downloads, with some reaching over 500,000 downloads. All ranges of active WP installations include vulnerable plugins, as indicated by the orange columns in Figure 4(b). Twelve plugins are used on more than 2,000 websites. The `Lightbox Plus Colorbox` plugin, which is active on more than 200,000 websites, is the most widely used and makes these sites vulnerable to XSS attacks.

**Vulnerable Plugins:**
- Appointment Booking Calendar
- Auth0
- Authorizer
- BuddyPress
- Contact formgenerator
- CP Appointment Calendar
- Easy2map
- Ecwid Shopping Cart
- Gantry Framework
- Google Maps Travel Route
- Lightbox Plus Colorbox
- Payment form for Paypal pro
- Recipes writer
- ResAds
- Simple support ticket system
- The CartPress eCommerce Shopping Cart
- WebKite
- WP EasyCart - eCommerce Shopping Cart
- WP Marketplace
- WP Shop
- WP ToolBar Removal Node
- WP ultimate recipe
- WP Web Scraper

**Vulnerability Distribution:**
- **SQLI:** 55
- **XSS:** 31
- **CS:** 5
- **HI:** 2
- **LFI:** 5
- **DT & RFI:** 2
- **Total:** 100

**Plugins with Known CVEs:**
- appointment-booking-calendar 1.1.7
- easy2map 1.2.9
- payment-form-for-paypal-pro 1.0.1
- resads 1.0.1
- simple-support-ticket-system 1.2

**Table VII: Vulnerabilities Found by the New Version of WAP in WordPress Plugins**

| Plugin | Version | Real Vulnerabilities | Files* | SCD | CS | HI | Total | FPP | FP |
|--------|---------|---------------------|--------|-----|----|----|-------|-----|----|
| ...    | ...     | ...                 | ...    | ... | ...| ...| ...   | ... | ...|

*DT & RFI, LFI vulnerabilities

**Figure 4: Downloads and Active Installations of 115 Analyzed (Blue Columns) and 23 Vulnerable (Orange Columns) Plugins.**

- (a) Downloads
- (b) Active Installs

**Figure 5: Number of Vulnerabilities Detected by Class in the Vulnerable Web Applications and WordPress Plugins.**

All detected vulnerabilities were reported to the developers of the web applications and WP plugins. Some developers have already confirmed their existence. We manually verified all reported vulnerabilities.

### Related Work

This section summarizes the main related work in the areas of static analysis and data mining used to detect vulnerabilities.

#### Static Analysis

Taint analysis is a form of data flow analysis that tracks sensitive data and verifies where it reaches in the code. This technique is commonly used to detect vulnerabilities in source code by tracking entry points and checking if they reach sensitive sinks. Taint analysis uses two states—tainted and untainted—that may change during the data flow analysis. WAP [11] is a tool that performs this type of analysis to detect input validation vulnerabilities in PHP web applications. Other tools like Pixy [10], phpSAFE [15], and RIPS [6] use similar techniques. Pixy and phpSAFE only detect SQLI and XSS vulnerabilities. RIPS detects the same vulnerabilities as WAP v2.1 but cannot analyze object-oriented source code. phpSAFE was configured to detect SQLI vulnerabilities in WordPress plugins, but this required modifying its source code. In contrast, our work modifies WAP to be configurable without altering the source code. None of these tools are modular and extensible for new vulnerability classes, and only WAP corrects the detected vulnerabilities by fixing the source code.

#### Data Mining

Data mining has recently been explored to predict the existence of vulnerabilities in software. This technique uses machine learning classifiers trained on datasets containing instances composed of attributes. Tools like PhpMiner [22] detect SQLI and XSS vulnerabilities in PHP source code by collecting attributes from code excerpts that end in a sink. It does not perform the data mining process itself, requiring the user to run WEKA [26]. Nunan et al. [14] retrieve attributes from a large collection of XSS attack vectors to learn how to characterize and detect XSS attacks. WAP also uses data mining but focuses on predicting false positives.

### Conclusion

This paper presents the extension of the WAP tool to detect new vulnerabilities. It addresses the challenge of extending such tools by proposing a modular and extensible version of WAP, equipped with "weapons" to detect and correct vulnerabilities of new classes. The approach involved restructuring WAP to make it modular and creating a new module to generate weapons, i.e., to automatically generate detectors and fixes for new vulnerability classes. To predict false positives, the precision and accuracy of the data mining process have been improved by adding more symptoms and instances. The new version of the tool was evaluated with 7 new vulnerability classes using web applications and WordPress plugins. The results show that this extensibility allows WAP to find many new (zero-day) vulnerabilities.

### Acknowledgment

This work was partially supported by the European Commission through project FP7-607109 (SEGRID) and by national funds through Fundação para a Ciência e a Tecnologia (FCT) with references UID/CEC/50021/2013 (INESC-ID) and UID/CEC/00408/2013 (LaSIGE).

### References

[1] OWASP WAP – Web Application Protection. https://www.owasp.org/index.php/OWASP_WAP-Web_Application_Protection.
[2] WAP. http://awap.sourceforge.net/.
[3] BugTraq. http://www.securityfocus.com.
[4] CSO Online. Ashley Madison hack exposes IT details and customer records. http://www.csoonline.com/article/2949902/. July 2015.
[5] CVE. http://cve.mitre.org.
[6] J. Dahse and T. Holz. Simulation of built-in PHP features for precise static code analysis. In Proceedings of the 21st Network and Distributed System Security Symposium, Feb 2014.
[7] DB-Engines. http://db-engines.com/en/ranking.
[8] Imperva. Anatomy of comment spam. hacker intelligence initiative. May 2014.
[9] Imperva. Web application attack report #6. Nov. 2015.
[10] N. Jovanovic, C. Kruegel, and E. Kirda. Precise alias analysis for static detection of web application vulnerabilities. In Proceedings of the 2006 Workshop on Programming Languages and Analysis for Security, pages 27–36, June 2006.
[11] I. Medeiros, N. F. Neves, and M. Correia. Automatic detection and correction of web application vulnerabilities using data mining to predict false positives. In Proceedings of the International World Wide Web Conference, pages 63–74, Apr. 2014.
[12] I. Medeiros, N. F. Neves, and M. Correia. Detecting and removing web application vulnerabilities with static analysis and data mining. IEEE Transactions on Reliability, 65(1):54–69, March 2016.
[13] MongoDB. https://www.mongodb.org/.
[14] A. E. Nunan, E. Souto, E. M. dos Santos, and E. Feitosa. Automatic classification of cross-site scripting in web pages using document-based and URL-based features. In Proceedings of the IEEE Symposium on Computers and Communications, pages 702–707, July 2012.
[15] P. Nunes, J. Fonseca, and M. Vieira. phpSAFE: A security analysis tool for OOP web application plugins. In Proceedings of the 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, June 2015.
[16] OWASP. Session fixation. https://www.owasp.org/index.php/Session_fixation.
[17] OWASP. Testing for NoSQL injection. https://www.owasp.org/index.php/Testing_for_NoSQL_injection.
[18] Packet storm. https://packetstormsecurity.com.
[19] T. Parr. The Definitive ANTLR Reference: Building Domain-Specific Languages. Pragmatic Bookshelf, 2007.
[20] D. Powers. Evaluation a monte carlo study. CoRR, abs/1504.00854:843–844, 2015.
[21] J. Scambray, V. Lui, and C. Sima. Hacking Exposed Web Applications: Web Application Security Secrets and Solutions. McGraw Hill, 2011.
[22] L. K. Shar and H. B. K. Tan. Mining input sanitization patterns for predicting SQL injection and cross site scripting vulnerabilities. In Proceedings of the 34th International Conference on Software Engineering, pages 1293–1296, 2012.
[23] The Hacker News. 600TB MongoDB database 'accidentally' exposed on the internet, Nov. 2015. http://thehackernews.com/2015/07/MongoDB-Database-hacking-tool.html.
[24] WhiteHat Security. Website security statistics report. Nov. 2015.
[25] J. Williams and D. Wichers. OWASP Top 10 2013 – the ten most critical web application security risks, 2013.
[26] I. H. Witten, E. Frank, and M. A. Hall. Data Mining: Practical Machine Learning Tools and Techniques. Morgan Kaufmann, 3rd edition, 2011.
[27] WordPress. https://wordpress.org/.

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the content.