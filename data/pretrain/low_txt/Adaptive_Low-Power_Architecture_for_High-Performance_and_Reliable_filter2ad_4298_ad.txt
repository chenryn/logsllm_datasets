### Fault Injection Results of the Transactional Core

**Table III: Error Correction and Detection Coverage for Various Applications**

| Application | SET Correction | SET Detection | SEU Correction | SEU Detection | Total Coverage | No. of Faults | Masked Faults |
|-------------|----------------|---------------|----------------|---------------|----------------|---------------|---------------|
| bbsort      | 99.86335%      | 0.06693%      | 99.83288%      | 0.06857%      | 99.92214%      | 10,808,861    | 44.20838%     |
| lsquares    | 99.12833%      | 0.66185%      | 98.83037%      | 0.79907%      | 99.74389%      | 882,007       | 44.97413%     |
| crc32       | 99.68222%      | 0.29517%      | 97.89248%      | 2.02247%      | 99.97360%      | 20,169,300    | 13.88979%     |
| floyd       | 99.62601%      | 0.27263%      | 99.81063%      | 0.08744%      | 99.89848%      | 254,465,240   | 44.97101%     |
| kruskal     | 99.10989%      | 0.77919%      | 92.08549%      | 7.79002%      | 99.88852%      | 109,994,127   | 49.08854%     |
| matmul      | 99.10790%      | 0.76215%      | 99.16822%      | 0.67754%      | 99.86334%      | 276,029,356   | 43.20838%     |

The fault injection campaign for the entire benchmark involved 672,348,891 injected faults, achieved using an instrumented FPGA-based emulation of the hardware architecture, similar to [25]. This method allows for very high injection rates. For the entire benchmark, the error detection coverage of the transactional core, including both correction and detection, is 99.9%. Focusing on corrected errors, the average error correction coverage is 98.7%.

### Fault Injection Results of the RA3 Core

**Table IV: Error Correction Coverage for Varying Number of Multipliers in the RA3 Core**

| # of RA3 multipliers | # of corrected/non-masked errors | Error correction coverage |
|----------------------|----------------------------------|---------------------------|
| 2                    | 900/948                          | 94.94%                    |
| 4                    | 1563/1614                        | 96.84%                    |
| 8                    | 2727/2782                        | 98.02%                    |
| 16                   | 4345/4414                        | 98.44%                    |
| 32                   | 6693/6753                        | 99.11%                    |
| 64                   | 9236/9289                        | 99.43%                    |

Fault injection experiments for the RA3 core were conducted with six configurations: 2, 4, 8, 16, 32, and 64 multipliers. In each configuration, 50,000 faults were injected, totaling 300,000 faults. The computation workload involved a matrix multiplication between two 16 × 16 integer matrices. All non-masked errors were detected, achieving 100% error detection coverage. The error correction coverage started at 94.94% for 2 multipliers and increased to 99.43% for 64 multipliers.

### Observations and Implications

The number of masked faults decreased as the number of multipliers increased because more bits became sensitive, leading to a higher proportion of time spent in the multipliers. Although more bits are sensitive to upsets, these errors are contained within the RA3 core and are further detected or corrected, ensuring the computed output is correct.

Despite the comprehensive fault injection campaign, a small number of errors were not detected. These undetected errors occurred due to faults injected in the address of data just before it was written to memory. To mitigate this, additional comparators could be added, but this would increase area, power, and latency. Alternatively, the transactional core could encode all data with ECC, allowing the memory controller to check the ECC before writing the data. However, non-detected errors account for less than 0.1% of the total fault injection campaign.

### Related Work

**Atomic Execution in Hardware and Transactional Memory (TM)**

- **FaulTM** [31] uses TM to provide fault-tolerance at the thread level by duplicating threads and comparing their read/write instruction sets. However, the rollback scheme is problematic, as it requires re-launching the faulty thread to an unknown region, which is not feasible.
- **DIVA** [9] checks the integrity of executed instructions before they commit, but assumes store instructions are correct, making it unfeasible for critical systems. It also lacks a mechanism to restore control flow after a branch error.
- **Razor** [32] extends DIVA with dynamic voltage scaling but still faces issues with control-flow restoration.
- **Selective Replication** [33] duplicates parts of the pipeline to reduce overhead, achieving 97% data-error detection and 62.5% instruction-error detection.
- **Stochastic Computing** [34] allows for errors within a margin, but lacks an automatic program transformation for imperative programs.

**GPU Reliability and ABFT**

- **On-Line ABFT** [28] detects errors in parallel with matrix multiplication on GPUs, and its feasibility under radiation has been demonstrated [35, 36].

### Final Remarks

This paper presents the MoMa architecture for reliable and low-power embedded computing. MoMa was evaluated in terms of performance, area, error coverage, and power, meeting the requirements for reliable embedded computing. The TBB (Transactional Block Buffer) mechanism allows for fast repair of data-flow and control-flow errors, reducing the register file size and decreasing architectural vulnerability.

The RA3 core, a dedicated and resilient matrix multiplication hardware, implements ABFT for error detection and correction, making it suitable for common tasks in embedded systems. The transactional core accounts for 5.82% of the total peak power, indicating potential for optimization through hardware adaptation and power gating.

Future work includes radiation testing of the MoMa architecture and designing a setup to separate errors in the MoMa architecture from those in the FPGA's configuration memory, contributing to the radiation test community.

### References

[1] R. Baumann, “Soft errors in advanced computer systems,” IEEE Design and Test of Computers, vol. 22, no. 3, pp. 258–266, May 2005.

[2] ITRS, “ITRS 2012 roadmap,” International Technology Roadmap for Semiconductors, Tech. Rep., 2012.

[3] T. Konefal et al., “A statistical model to estimate an upper bound on the probability of failure of a system installed on an irradiated vehicle,” IEEE Transactions on Electromagnetic Compatibility, vol. 49, no. 4, pp. 840–848, 2007.

[4] A. Keys et al., “High-performance, radiation-hardened electronics for space and lunar environments,” in AIP, vol. 969, 2008, pp. 749–756.

[5] J. Penix and P. Mehlitz, “Expecting the unexpected: Radiation hardened software,” NASA Ames, CA, Tech. Rep., 2005.

[6] NASA, “Next generation space processor – solicitation number BAA-RVKV-2013-02,” feb 2013.

[7] P. Rech et al., “Neutron-induced soft errors in graphic processing units,” in REDW ’12:Radiation Effects Data Workshop. IEEE, 2012, pp. 1–6.

[8] H. Esmaeilzadeh et al., “Dark silicon and the end of multicore scaling,” in ISCA ’11: annual international symposium on Computer architecture. ACM, 2011, pp. 365–376.

[23] N. Muralimanohar, R. Balasubramonian, and N. P. Jouppi, “CACTI 6.0: A tool to model large caches,” HP Laboratories, Tech. Rep., 2009.

[9] T. Austin, “DIVA: a reliable substrate for deep submicron microarchitecture design,” in MICRO 32: int. symp. on Microarchitecture, 1999, pp. 196–207.

[10] Y. Yetim, M. Martonosi, and S. Malik, “Extracting useful computation from error-prone processors for streaming applications,” in DATE ’13: Design, Automation and Test in Europe, 2013, pp. 202–207.

[11] H. Esmaeilzadeh et al., “Architecture support for disciplined approximate programming,” in ASPLOS ’12: Architectural Support for Programming Languages and Operating Systems. ACM, 2012, pp. 301–312.

[12] H. Chen and C. Yang, “Fault detection and recovery efficiency co-optimization through compile-time analysis and runtime adaptation,” in CASES ’13: int. conf. on Compilers, Arch., and Synthesis for Embedded Systems. ACM, 2013, p. 10.

[13] J. A. Blome et al., “Cost-efficient soft error protection for embedded microprocessors,” in CASES ’06: Compilers, Architecture and Synthesis for Embedded Systems. ACM, 2006, pp. 421–431.

[14] J. Lee and A. Shrivastava, “Software-based register file vulnerability reduction for embedded processors,” ACM Trans. Embed. Comput. Syst., vol. 13, no. 1s, pp. 38:1–38:20, Dec. 2013.

[15] T. Kranenburg and R. Van Leuken, “MB-LITE: A robust, light-weight soft-core implementation of the MicroBlaze architecture,” in DATE ’10: Design, Automation Test in Europe. IEEE, 2010, pp. 997–1000.

[16] J. Yan and W. Zhang, “Compiler-guided register reliability improvement against soft errors,” in EMSOFT ’05: int. conf. on Embedded software, 2005, pp. 203–209.

[17] M. R. Guthaus et al., “Mibench: A free, commercially representative embedded benchmark suite,” in WWC ’01: Workload Characterization. IEEE, 2001, pp. 3–14.

[18] J. E. Miller and A. Agarwal, “Software-based instruction caching for embedded processors,” in ASPLOS ’06: Architectural support for prog. languages and operating systems. ACM, 2006, pp. 293–302.

[19] A. Chaudhari, J. Park, and J. Abraham, “A framework for low overhead hardware based runtime control flow error detection and recovery,” in VTS’ 13: VLSI Test Symposium. IEEE, 2013, pp. 1–6.

[20] D. Bernick et al., “NonStop advanced architecture,” in DSN IEEE, 2005, pp. 12–21.

[21] F. Itturriet et al., “Adaptive parallelism exploitation under physical and real-time constraints for resilient systems,” in ReCoSoC ’12: Reconfigurable Communication-centric Systems-on-Chip. IEEE, 2012, pp. 1–8.

[22] K.-H. Huang and J. Abraham, “Algorithm-based fault tolerance for matrix operations,” IEEE Transactions on Computers, vol. 33, no. 6, pp. 518–528, Jun. 1984.

[24] N. Binkert et al., “The gem5 simulator,” SIGARCH Comput. Archit. News, vol. 39, no. 2, pp. 1–7, Aug. 2011.

[25] M. Aguirre, V. Baena, J. Tombs, and M. Violante, “A new approach to estimate the effect of single event transients in complex circuits,” IEEE Transactions on Nuclear Science, vol. 54, no. 4, pp. 1018–1024, 2007.

[26] E. Petersen, Single Event Effects in Aerospace, 1st ed. Wiley-IEEE Press, 2011.

[27] S. Mukherjee et al., “A systematic methodology to compute the architectural vulnerability factors for a high-performance microprocessor,” in MICRO 36: International Symposium on Microarchitecture. IEEE, 2003, pp. 29–41.

[28] C. Ding et al., “Matrix multiplication on GPUs with online fault tolerance,” in ISPA ’11: Parallel and Distributed Processing with Applications, 2011, pp. 311–317.

[29] R. Hentschke et al., “Analyzing area and performance penalty of protecting different digital modules with Hamming code and triple modular redundancy,” in SBCCI ’02: Integrated circuits and systems design. IEEE, 2002, pp. 95–100.

[30] M. Herlihy and J. Moss, “Transactional memory: architectural support for lock-free data structures,” in ISCA ’93: international symposium on computer architecture. ACM, 1993, pp. 289–300.

[31] G. Yalcin, O. Unsal, and A. Cristal, “FaulTM: error detection and recovery using hardware transactional memory,” in DATE ’13: Design, Automation and Test in Europe. IEEE, 2013, pp. 220–225.

[32] D. Ernst et al., “Razor: a low-power pipeline based on circuit-level timing speculation,” in MICRO 36: int. symp. on Microarchitecture. IEEE, 2003, pp. 7–18.

[33] N. Nakka, K. Pattabiraman, and R. Iyer, “Processor-level selective replication,” in DSN ’07: Dependable Systems and Networks. IEEE, 2007, pp. 544–553.

[34] J. Sartori, J. Sloan, and R. Kumar, “Stochastic computing: embracing errors in architecture and design of processors and applications,” in CASES ’11: Compilers, architectures and synthesis for embedded systems, 2011, pp. 135–144.

[35] P. Rech et al., “An efficient and experimentally tuned software-based hardening strategy for matrix multiplication on GPUs,” IEEE Transactions on Nuclear Science, vol. 60, no. 4, pp. 2797–2804, 2013.

[36] C. Andreani et al., “Facility for fast neutron irradiation tests of electronics at the ISIS spallation neutron source,” Applied Physics Letters, vol. 92, no. 11, pp. 114 101–114 101–3, 2008.

*This work is supported by the Conselho Nacional de Desenvolvimento Científico e Tecnológico (CNPq), Brazil.