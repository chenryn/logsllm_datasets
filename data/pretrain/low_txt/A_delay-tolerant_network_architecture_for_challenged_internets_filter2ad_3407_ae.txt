### Optimized Text

#### Message Routing and Storage
The next hop in the routing process may not always be the most desirable (a form of "hot potato" routing), and non-custody messages may be discarded in favor of those requiring custody transfers. In extreme and critical situations, a facility for removing messages that require custody may be available, but such removal should be avoided if possible, as deleting reliable bundles is considered a system fault.

The current approach uses a shared priority queue to allocate custody storage. First, any expired messages are cleared. Messages that are too large are denied custody transfer. Next, messages are spooled based on their priority and useful lifetime (specified by the sender and included in each message). Two potential issues include priority inversion (where higher-priority messages arriving later may not have custody storage available due to earlier-arriving lower-priority messages) and head-of-line blocking. This blocking can occur when a DTN gateway accepts custody for messages that are outgoing on a contact that has not yet started, and is then asked to forward messages to a currently-available contact that does not require a custody transfer. In such cases, the persistent storage in the node may be completely consumed by pending messages, preventing non-custody messages from being transmitted.

#### Flow Control Implementation
For flow control, a DTN forwarder will leverage existing mechanisms in the underlying region-local transport protocols. Most mature networks already have such mechanisms (e.g., TCP, X.25, RTS/CTS, XON/XOFF, explicit admission/rate control, etc.). For networks where these mechanisms are still under development, region-specific mechanisms can be constructed in the DTN forwarders' convergence layers. The uppermost functions of a DTN forwarder generally assume the existence of flow control, so some mechanism should be in place to ensure reliable message delivery.

#### Application Interface
The DTN architecture is built as an overlay network using messages as the primary unit of data interchange. Applications using this architecture must be designed to handle potentially long request/response turnaround times, exceeding the expected longevity of client and server processes. Additionally, applications must manage the creation and manipulation of name tuples and their registrations (for demultiplexing received messages), class of service specifiers, and authentication information. The application interface is non-blocking, with persistent callback registrations. DTN applications should be structured to continue operating in the face of reboots or network partitioning as much as possible.

#### Related Work
The DTN architecture is most closely based on the Interplanetary Internet [3] design, but it generalizes to other types of networks with non-Internet-like performance characteristics. It addresses several issues raised in the "network survivability" literature [18], especially concerning networks lacking continuous connectivity.

In other frequently-disconnected networks, recent efforts include ZebraNet [12], where wireless sensor nodes attached to animals collect location data and opportunistically report their histories when they come within radio range of base stations. ZebraNet explores the use of mobile base stations and sensor devices, employing flooding-based routing protocols. DataMules [17] involves low-power sensor nodes that save power by periodically visited "mules" that provide a non-interactive message store-and-forward service. These efforts, along with Vahdat's work [20], use mobility models in simulations to predict the ability of partially connected networks to deliver data eventually.

The use of late binding for names in DTN shares some similarities with, but is not directly based on, the work on Intentional Naming [21]. Names in Intentional Naming represent a form of query and are used for anycast to locate nearby network services. Name-based routing in DTN is also related to Internet Content Routing [10], which focuses on providing a content distribution facility. While it does not use two separate name components as in DTN, it suggests the viability of name-based routing. The generality of the entity portion of names is influenced by [11], where database-like queries are effectively used as addresses for groups of sensor nodes.

The architectural principles of interoperability and layering in DTN are guided by the ARPANET/Internet [4,7]. DTN gateways operate similarly to Internet routers but are adapted for high-delay and disconnected environments by storing messages for potentially long periods.

#### Conclusion
The DTN architecture aims to provide interoperable communications between a wide range of networks with disparate and poor performance characteristics. The design embraces message switching with in-network storage and retransmission, late-binding of names, and routing tolerant of network partitioning. This makes it better suited for operations in challenged environments than most existing network architectures, particularly today's TCP/IP-based Internet.

A prototype DTN implementation has been developed under the Linux operating system, implementing the application interface, basic forwarding across scheduled and "always-on" connections, detection of new and lost contacts, and two convergence layers (for TCP/IP and a sensor network proxy). The prototype serves as a proof-of-concept for the overall architecture and demonstrates the utility of the non-interactive reliable messaging service it provides.

The DTN architecture represents a generalization of the Interplanetary Internet architecture to challenged networks beyond space. Previous work was closely tied to deep space communications, but contributed key ideas toward a networking architecture applicable to challenged internetworks more generally. The design also draws from trends in the Internet, such as content-based naming, the creation of administrative "regions," and alternative routing structures (e.g., network overlays).

The proposed DTN architecture advocates a change to the basic service model and system interface that most Internet-style applications are accustomed to, motivated by the exceptionally poor performance in some networks. This is a relatively radical approach; other approaches aim to "repair" underlying link performance problems or alter limited portions of the Internet architecture, such as routing, with additional protocols to keep the current service model and existing TCP/IP-based protocols constant. Because it provides a different type of network service, the DTN design makes different choices in the architectural design space: messages versus packets, hop-by-hop reliability and security versus end-to-end, name-based routing versus address-based routing, and a routing abstraction of partially-connected rather than fully-connected network graphs. Interestingly, DTN can be overlaid upon the TCP/IP-based Internet and remains compatible, though its strength lies in tying together dramatically different types of networks with unusual connectivity properties. In some ways, it makes more limited assumptions on the underlying protocol layers than IP does on its underlying link layers.

Only time will tell which application interfaces and service semantics will best match applications to challenged networks, but we believe the DTN architecture presents several design decisions worthy of consideration. It is timely to consider a broad range of network characteristics in formulating a new network architecture, as it appears likely that an increasing number of these features will need to be addressed.

#### Acknowledgments
The author wishes to thank the members of the Interplanetary Internet Research Group for their previous work on the initial definitions of bundling and naming, without which this architecture would not exist. Members of this group include Vint Cerf (MCI), Adrian Hooke and Scott Burleigh (NASA/JPL), Bob Durst and Keith Scott (the MITRE Corporation), and Howard Weiss (SPARTA). The author is especially indebted to Bob Durst and Scott Burleigh for an ongoing collaboration regarding the DTN design. Versions of the manuscript benefited from the comments of David Culler, Sylvia Ratnasamy, the anonymous reviewers, David Hutchison, and Sushant Jain.

#### References
[1] J. Alonso, K. Fall, “A Linear Programming Formulation of Flows over Time with Piecewise Constant Capacity and Transit Times”, Intel Research Technical Report IRB-TR-03-007, June 2003
[2] J. Border et al., “Performance Enhancing Proxies Intended to Mitigate Link-Related Degradations”, Internet RFC3135, June 2001
[3] V. Cerf et al., “Interplanetary Internet (IPN): Architectural Definition”, http://www.ipnsig.org/reports/memo-ipnrg-arch-00.pdf
[4] V. Cerf, R. Kahn, “A Protocol for Packet Network Inter-communication”, IEEE Trans. on Comm., COM-22(5), May 1974
[5] CFDP Protocol Specification, CCSDS 727.0-B-1, Jan 2002, http://www.ccsds.org
[6] E. Chen, J. Stewart, “A Framework for Inter-Domain Route Aggregation”, Internet RFC2519, Feb 1999
[7] D. Clark, “The Design Philosophy of the DARPA Internet Protocols”, Proc. SIGCOMM 1988
[8] K. Fall, “A Delay-Tolerant Network Architecture for Challenged Internets”, Intel Research Technical Report IRB-TR-03-003, Feb 2003
[9] D. Feldmeier, A. McAuley, J. Smith, D. Bakin, W. Marcus, T. Raleigh, “Protocol Boosters”, IEEE JSAC, Apr 1998
[10] M. Gritter, D. Cheriton, “An Architecture for Content Routing Support in the Internet”, Proc. Usenix USITS, March 2001
[11] J. Heidemann et al., “Building Efficient Wireless Sensor Networks with Low-Level Naming”, Proc. SOSP, Oct 2001
[12] P. Juang, H. Oki, Y. Wang, M. Maronosi, L. Peh, D. Rubenstein, “Energy-Efficient Computing for Wildlife Tracking: Design Tradeoffs and Early Experiences with ZebraNet”, Proc. ASPLOS, Oct 2002
[13] M. Mealling, R. Denenberg, eds., “Report from the Joint W3C/IETF URI Planning Interest Group: Uniform Resource Identifiers (URIs), URLs, and Uniform Resource Names (URNs): Clarifications and Recommendations”, Internet RFC 3305, Aug 2002
[14] D. Mills, “Network Time Protocol (Version 3) Specification, Implementation and Analysis”, Internet RFC1305, Mar 1992
[15] D. Mills, H. Nair, “Timekeeping in the Interplanetary Internet”, in progress, http://www.eecis.udel.edu/~mills/ipin.html
[16] J. Saltzer, D. Reed, D. Clark, “End-to-End Arguments in System Design”, ACM Trans on Computer Systems, 2(4), Nov 1984
[17] R. Shah, S. Roy, S. Jain, W. Brunette, “Data MULEs: Modeling a Three-tier Architecture for Sparse Sensor Networks”, IEEE SNPA Workshop, May 2003
[18] J. Sterbenz et al., “Survivable Mobile Wireless Networks: Issues, Challenges and Research Directions”, WiSe 2002, Sep 2002
[19] J. Sterbenz, T. Saxena, R. Krishnan, “Latency-Aware Information Access with User-Directed Fetch Behaviour for Weakly-Connected Mobile Wireless Clients”, BBN Tech. Report 8340, May 2002
[20] A. Vahdat, D. Becker, “Epidemic Routing for Partially-Connected Ad Hoc Networks”, Duke Tech Report CS-2000-06, 2000
[21] W. Adgie-Winoto, E. Schwartz, H. Balakrishnan, J. Lilley, “The Design and Implementation of an Intentional Naming System”, Proc. SOSP, Dec 1999
[22] J. Wroclawski, “The MetaNet: White Paper”, Workshop on Research Directions for the Next Generation Internet, May 1997, http://www.cra.org/Policy/NGI/papers/wroklawWP