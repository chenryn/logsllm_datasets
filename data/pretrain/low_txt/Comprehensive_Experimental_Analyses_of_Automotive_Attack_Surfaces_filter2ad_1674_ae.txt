### Problem Example: Eavesdropping on Google Executives

For example, an individual wishing to eavesdrop on Google executives might filter a set of compromised vehicles down to those that are both expensive and located in the Google parking lot at 10 a.m. The location of these same vehicles at 7 p.m. is likely to be the driver’s residence, allowing the attacker to identify the driver (e.g., via commercial credit records). We suspect that one could identify promising targets for eavesdropping quite quickly using this method.

### 7. Discussion and Synthesis

Our research provides new insights into the risks associated with modern automotive computing systems. We begin with a discussion of concrete directions for increasing security. We then reflect on why these vulnerabilities exist today and the challenges in mitigating them.

#### 7.1 Implementation Fixes

Our concrete, near-term recommendations fall into two familiar categories: restricting access and improving code robustness. Given the high interconnectedness of car ECUs necessary for desired functionality, the solution is not simply to remove or harden individual components (e.g., the telematics unit) or create physically isolated subnetworks.

We were surprised by the extent to which the car’s externally facing interfaces were open to unsolicited communications, thereby significantly broadening the attack surface. Simple actions, such as not allowing Bluetooth pairing attempts without the driver first manually placing the vehicle in pairing mode, would have undermined our ability to exploit the vulnerability in the underlying Bluetooth code. Similarly, we believe the cellular interface could be significantly hardened by using inbound calls only to “wake up” the car (i.e., never for data transfer) and having the car itself periodically dial out for requests while it is active. Finally, the use of application-level authentication and encryption (e.g., via OpenSSL) in the PassThru device’s proprietary configuration protocol would have prevented its code from being exploited as well.

However, rather than assuming the attack surface will not be breached, the underlying code platform should also be hardened. This includes standard security engineering best practices, such as avoiding unsafe functions like `strcpy`, diligent input validation, and checking function “contracts” at module boundaries. As an additional measure of protection against less-motivated adversaries, we recommend removing all debugging symbols and error strings from deployed ECU code. We also encourage the use of simple anti-exploitation mitigations such as stack cookies and ASLR, which can be easily implemented even for simple processors and can significantly increase the exploit burden for potential attackers.

In the same vein, critical communication channels (e.g., Bluetooth and telematics) should have some amount of behavioral monitoring. The car should not allow arbitrary numbers of connection failures to go unanswered, nor should outbound Internet connections to arbitrary destinations be allowed. In cases where ECUs communicate on multiple buses, they should only be allowed to be reflashed from the bus with the smallest external attack surface. While this does not stop all attacks where one compromised ECU affects an ECU on a bus with a smaller attack surface, it does make such attacks more difficult. Finally, a number of the exploits we developed were facilitated by the services included in several units. For example, we made extensive use of `telnetd`, `ftp`, and `vi`, which were installed on the PassThru and telematics devices. There is no reason for these extraneous binaries to exist in shipping ECUs, and they should be removed before deployment, as they make it easier to exploit additional connectivity to the platform.

Finally, secure (authenticated and reliable) software updates must also be considered as part of automotive component design.

#### 7.2 Vulnerability Drivers

While the recommendations in Section 7.1 can significantly increase the security of modern cars against external attacks and post-compromise control, none of these ideas are new or innovative. Thus, perhaps the more interesting question is why they have not been applied in the automotive environment already. Our findings and subsequent interactions with the automotive industry have given us a unique vantage point for answering this question.

One clear reason is that automobiles have not yet been subjected to significant adversarial pressures. Traditionally, automobiles have not been network-connected, and thus manufacturers have not had to anticipate the actions of an external adversary; anyone who could get close enough to a car to modify its systems was also close enough to do significant damage through physical means. However, modern automotive systems now have broad connectivity; millions of cars on the road today can be directly addressed via cellular phones and the Internet.

This is similar to the evolution of desktop personal computer security during the early 1990s. Just as connecting PCs to the Internet exposed existing vulnerabilities that previously could not be conveniently exploited, so too does increasing the connectivity of automotive systems. This analogy suggests that, even though automotive attacks do not occur frequently today, there is cause to take their potential seriously. Much of our work is motivated by a desire that automotive manufacturers should not repeat the mistakes of the PC industry—waiting for high-profile attacks before making security a top priority. We believe many of the lessons learned in hardening desktop systems (such as those suggested earlier) can be quickly repurposed for the embedded context.

However, our experimental vulnerability analyses also uncover an ecosystem for which high levels of assurance may be fundamentally challenging. Reflecting upon our discovered vulnerabilities, we noticed interesting similarities in where they occur. Virtually all vulnerabilities emerged at the interface boundaries between code written by distinct organizations. For example, the Airbiquity software modem appears to have been delivered as a completed component. We found vulnerabilities not in the software modem itself but rather in the “glue” code calling it and binding it to other telematics functions. It was here that the caller did not fully understand the assumptions made by the component being called.

We find this pattern repeatedly. The Bluetooth vulnerability arose from a similar misunderstanding between the callers of the Bluetooth protocol stack library and its implementers (again in glue code). The PassThru vulnerability arose in script-based glue code that tried to interface a proprietary configuration protocol with standard Linux configuration scripts. Even the media player firmware update vulnerability appears to have arisen because the manufacturer was unaware of the vestigial CD-based reflashing capability implemented in the code base.

While interface boundary problems are common in all kinds of software, we believe there are structural reasons that make them particularly likely in the automotive industry. Specifically, the automotive industry has adopted an outsourcing approach to software that is quite similar to that used for mechanical components: supply a specification and contract for completed parts. Thus, for many components, the manufacturer does not do the software development and is only responsible for integration. We have found, for example, that different model years of ECUs with effectively the same functionality used completely different source code bases because they were provided by different suppliers. Indeed, we have come to understand that frequently, manufacturers do not have access to the source code for the ECUs they contract for (and suppliers are hesitant to provide such code since this represents their key intellectual property advantage over the manufacturer). Thus, while each supplier does unit testing (according to the specification), it is difficult for the manufacturer to evaluate security vulnerabilities that emerge at the integration stage. Traditional kinds of automated analysis and code reviews cannot be applied, and assumptions not embodied in the specifications are difficult to unravel. Therefore, while this outsourcing process might have been appropriate for purely mechanical systems, it is no longer appropriate for digital systems that have the potential for remote compromise.

Developing security solutions compatible with the automotive ecosystem is challenging, and we believe it will require more engagement between the computer security community and automotive manufacturers (in the same way that our community engages directly with the makers of PC software today).

### 8. Conclusions

A modern automobile is controlled by tens of distinct computers physically interconnected with each other via internal (wired) buses and thus exposed to one another. A non-trivial number of these components are also externally accessible via a variety of I/O interfaces. Previous research showed that an adversary can seriously impact the safety of a vehicle if he or she is capable of sending packets on the car’s internal wired network, and numerous other papers have discussed potential security risks with future (wired and wireless) automobiles in the abstract or on the bench.

To the best of our knowledge, however, we are the first to experimentally and systematically study the externally-facing attack surface of a car. Our experimental analyses focus on a representative, moderately priced sedan. We iteratively refined an automotive threat model framework and implemented complete, end-to-end attacks along key points of this framework. For example, we can compromise the car’s radio and upload custom firmware via a doctored CD, we can compromise the technicians’ PassThru devices and thereby compromise any car subsequently connected to the PassThru device, and we can call our car’s cellular phone number to obtain full control over the car’s telematics unit over an arbitrary distance. Being able to compromise a car’s ECU is, however, only half the story: The remaining concern is what an attacker is able to do with those capabilities. In fact, we show that a car’s externally-facing I/O interfaces can be used post-compromise to remotely trigger or control arbitrary vehicular functions at a distance and to exfiltrate data such as vehicle location and cabin audio. Finally, we consider concrete, financially-motivated scenarios under which an attacker might leverage the capabilities we develop in this paper.

Our experimental results give us the unique opportunity to reflect on the security and privacy risks with modern automobiles. We synthesize concrete, pragmatic recommendations for future automotive security, as well as identify fundamental challenges. We disclosed our results to relevant industry and government stakeholders. While defending against known vulnerabilities does not imply the non-existence of other vulnerabilities, many of the specific vulnerabilities identified in this paper have or will soon be addressed.

### Acknowledgments

We thank our shepherd Dan Wallach and the anonymous reviewers for their helpful comments, Ingolf Krueger for his guidance on understanding automotive architectures, Conrad Meyer for his help with Bluesniff, and Cheryl Hile and Melody Kadenko for their support on all aspects of the project. Portions of this work were supported by NSF grants CNS-0722000, CNS-0831532, CNS-0846065, CNS-0963695, and CNS-0963702; by the MURI program under AFOSR Grant No. FA9550-08-1-0352; by a CCC-CRA-NSF Computing Innovation Fellowship; by an NSF Graduate Research Fellowship; by a Marilyn Fries Endowed Regental Fellowship; and by an Alfred P. Sloan Research Fellowship.

### References

[1] BBC. Hack attacks mounted on car control systems. BBC News, May 17, 2010. Online: http://www.bbc.co.uk/news/10119492.
[2] S. Bono, M. Green, A. Stubblefield, A. Juels, A. D. Rubin, and M. Szydlo. Security analysis of a cryptographically-enabled RFID device. In P. McDaniel, editor, USENIX Security 2005, pages 1–16. USENIX Association, July 2005.
[3] R. Boyle. Proof-of-concept CarShark software hacks car computers, shutting down brakes, engines, and more. Popular Science, May 14, 2010. Online: http://www.popsci.com/cars/article/2010-05/researchers-hack-car-computers-shutting-down-brakes-engine-and-more.
[4] CAMP Vehicle Safety Communications Consortium. Vehicle safety communications project task 3 final report, Mar. 2005. Online: http://www.intellidriveusa.org/documents/vehicle-safety.pdf.
[5] R. Charette. This car runs on code. Online: http://www.spectrum.ieee.org/feb09/7649, Feb. 2009.
[6] T. Eisenbarth, T. Kasper, A. Moradi, C. Paar, M. Salmasizadeh, and M. Manzuri Shalmani. On the power of power analysis in the real world: A complete break of the KeeLoq code hopping scheme. In D. Wagner, editor, Crypto ’08, volume 5157 of LNCS, pages 203–220. Springer-Verlag, Aug. 2008.
[7] N. Falliere, L. O Murchu, and E. Chien. W32.Stuxnet dossier version 1.3, Nov. 2010. Online: http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/w32_stuxnet_dossier.pdf.
[8] FlexRay Consortium. FlexRay communications system protocol specification version 2.1 revision A, Dec. 2005. Online: http://www.flexray.com/index.php?pid=47.
[9] A. Francillon, B. Danev, and S. Capkun. Relay attacks on passive keyless entry and start systems in modern cars. In A. Perrig, editor, NDSS 2011. ISOC, Feb. 2011.
[10] T. Hoppe, S. Kiltz, and J. Dittmann. Security threats to automotive CAN networks – practical examples and selected short-term countermeasures. In M. D. Harrison and M.-A. Sujan, editors, SAFECOMP 2008, volume 5219 of LNCS, pages 235–248. Springer-Verlag, Sept. 2008.
[11] S. Indesteege, N. Keller, O. Dunkelman, E. Biham, and B. Preneel. A practical attack on KeeLoq. In N. Smart, editor, Eurocrypt ’08, volume 4965 of LNCS, pages 1–18. Springer-Verlag, Apr. 2008.
[12] ISO. ISO 11898-1:2003 - Road vehicles – Controller area network. International Organization for Standardization, 2003.
[13] F. Kargl, P. Papadimitratos, L. Buttyan, M. Müter, E. Schoch, B. Wiedersheim, T.-V. Thong, G. Calandriello, A. Held, A. Kung, and J.-P. Hubaux. Secure vehicular communication systems: implementation, performance, and research challenges. IEEE Communications Magazine, 46(11):110–118, 2008.
[14] K. Koscher, A. Czeskis, F. Roesner, S. Patel, T. Kohno, S. Checkoway, D. McCoy, B. Kantor, D. Anderson, H. Shacham, and S. Savage. Experimental security analysis of a modern automobile. In D. Evans and G. Vigna, editors, IEEE Symposium on Security and Privacy. IEEE Computer Society, May 2010.
[15] U. E. Larson and D. K. Nilsson. Securing vehicles against cyber attacks. In A. Mili and A. Krings, editors, CSIIRW '08, pages 30:1–30:3. ACM Press, May 2008.
[16] J. Leyden. Boffins warn on car computer security risk. The Register, May 14, 2010. Online: http://www.theregister.co.uk/2010/05/14/car_security_risks/.
[17] P. Magney. iPod connections expected in more than half of U.S. car models in 2009. Online: http://www.isuppli.com/Automotive-Infotainment-and-Telematics/MarketWatch/Pages/iPod-Connections-Expected-in-More-than-Half-of-U-S-Car-Models-in-2009.aspx, Oct. 2008.
[18] J. Markoff. Stung by security flaws, Microsoft makes software safety a top goal. The New York Times, Jan. 2002.
[19] C. Mundie. Trustworthy computing. Online: http://download.microsoft.com/download/a/f/2/af22fd56-7f19-47aa-8167-4b1d73cd3c57/twc_mundie.doc, Oct. 2002.
[20] NPR. 'Rifle' sniffs out vulnerability in Bluetooth devices. All Things Considered, Apr 13, 2005.
[21] M. Raya and J.-P. Hubaux. Securing vehicular ad hoc networks. Journal of Computer Security, 15(1):39–68, 2007.
[22] I. Rouf, R. Miller, H. Mustafa, T. Taylor, S. Oh, W. Xu, M. Gruteser, W. Trappe, and I. Seskar. Security and privacy vulnerabilities of in-car wireless networks: A tire pressure monitoring system case study. In I. Goldberg, editor, USENIX Security 2010, pages 323–338. USENIX Association, Aug. 2010.
[23] D. Spill and A. Bittau. Bluesniff: Eve meets Alice and Bluetooth. In D. Boneh, T. Garfinkel, and D. Song, editors, WOOT 2007, pages 1–10. USENIX Association, 2007.
[24] P. R. Thorn and C. A. MacCarley. A spy under the hood: Controlling risk and automotive EDR. Risk Management, Feb. 2008.
[25] J. Vijayan. Update: Android gaming app hides Trojan, security vendors warn. Computerworld, Aug. 17, 2010. Online: http://www.computerworld.com/s/article/9180844/Update_Android_gaming_app_hides_Trojan_security_vendors_warn.
[26] M. Wolf, A. Weimerskirch, and C. Paar. Security in automotive bus systems. In C. Paar, editor, ESCAR 2004, Nov. 2004.
[27] M. Wolf, A. Weimerskirch, and T. Wollinger. State of the art: Embedding security in vehicles. EURASIP Journal on Embedded Systems, 2007.
[28] Y. Zhao. Telematics: safe and fun driving. Intelligent Systems, IEEE, 17(1):10–14, Jan./Feb. 2002.