### Security and Privacy References

1. **GULLASCH, D., BANGERTER, E., AND KRENN, S.** (2011). "Cache Games–Bringing Access-Based Cache Attacks on AES to Practice." In *Proceedings of the 32nd IEEE Symposium on Security and Privacy (Oakland)*, Oakland, CA, May 2011.

2. **HÄHNEL, M., CUI, W., AND PEINADO, M.** (2017). "High-Resolution Side Channels for Untrusted Operating Systems." In *Proceedings of the 2017 USENIX Annual Technical Conference (ATC)*, Santa Clara, CA, July 2017.

3. **HAND, S. M.** (1999). "Self-Paging in the Nemesis Operating System." In *Proceedings of the 3rd USENIX Symposium on Operating Systems Design and Implementation (OSDI)*, New Orleans, LA, February 1999.

4. **HUND, R., WILLEMS, C., AND HOLZ, T.** (2013). "Practical Timing Side Channel Attacks Against Kernel Space ASLR." In *Proceedings of the 34th IEEE Symposium on Security and Privacy (Oakland)*, San Francisco, CA, May 2013.

5. **INTEL.** (2014). *Intel Software Guard Extensions Programming Reference (Rev2)*, October 2014. Document Number: 329298-002US.

6. **INTEL.** (2016). *Intel 64 and IA-32 Architectures Optimization Reference Manual*, June 2016.

7. **INTEL.** (2016). *Intel 64 and IA-32 Architectures Software Developer’s Manual Combined Volumes: 1, 2a, 2b, 2c, 2d, 3a, 3b, 3c, and 3d*, September 2016.

8. **IRAZOQUI, G., EISENBARTH, T., AND SUNAR, B.** (2015). "S$A: A Shared Cache Attack That Works Across Cores and Defies VM Sandboxing—and Its Application to AES." In *Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland)*, San Jose, CA, May 2015.

9. **JANG, Y., LEE, S., AND KIM, T.** (2016). "Breaking Kernel Address Space Layout Randomization with Intel TSX." In *Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS)*, Vienna, Austria, October 2016.

10. **KELSEY, J., SCHNEIER, B., WAGNER, D., AND HALL, C.** (1998). "Side Channel Cryptanalysis of Product Ciphers." In *Proceedings of the 5th European Symposium on Research in Computer Security (ESORICS)*, Belgium, September 1998.

11. **KIM, H., LEE, J., LAKSHMINARAYANA, N. B., SIM, J., LIM, J., AND PHO, T.** "MacSim: A CPU-GPU Heterogeneous Simulation Framework."

12. **KIM, S., HAN, J., HA, J., KIM, T., AND HAN, D.** (2017). "Enhancing Security and Privacy of Tor’s Ecosystem by Using Trusted Execution Environments." In *Proceedings of the 14th USENIX Symposium on Networked Systems Design and Implementation (NSDI)*, Boston, MA, March 2017.

13. **KLEEN, A.** (2016). "Advanced Usage of Last Branch Records." Available at: <https://lwn.net/Articles/680996/>.

14. **KLEEN, A.** (2016). "An Introduction to Last Branch Records." Available at: <https://lwn.net/Articles/680985/>.

15. **KOCHER, P.** (1996). "Timing Attacks on Implementations of Diffie-Hellman, RSA, DSS, and Other Systems." In *Advances in Cryptology—CRYPTO’96*, Springer, pp. 104–113.

16. **LIU, F., YAROM, Y., GE, Q., HEISER, G., AND LEE, R. B.** (2015). "Last-Level Cache Side-Channel Attacks Are Practical." In *Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland)*, San Jose, CA, May 2015.

17. **LU, K., SONG, C., KIM, T., AND LEE, W.** (2016). "UniSan: Proactive Kernel Memory Initialization to Eliminate Data Leakages." In *Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS)*, Vienna, Austria, October 2016.

18. **MCFARLING, S.** (1993). "Combining Branch Predictors." Technical Report TN-36, Digital Western Research Laboratory.

19. **NAVEED, M., KAMARA, S., AND WRIGHT, C. V.** (2015). "Inference Attacks on Property-Preserving Encrypted Databases." In *Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS)*, Denver, Colorado, October 2015.

20. **OHRIMENKO, O., MANUEL COSTA, C. F., NOWOZIN, S., MEHTA, A., SCHUSTER, F., AND VASWANI, K.** (2016). "SGX-Enabled Oblivious Machine Learning." In *Proceedings of the 25th USENIX Security Symposium (Security)*, Austin, TX, August 2016.

21. **PAGE, D.** (2002). "Theoretical Use of Cache Memory as a Cryptanalytic Side-Channel." IACR Cryptology ePrint Archive.

22. **PIRES, R., PASIN, M., FELBER, P., AND FETZER, C.** (2016). "Secure Content-Based Routing Using Intel Software Guard Extensions." In *Proceedings of the 16th Annual Middleware Conference (Middleware)*, 2016.

23. **POPA, R. A.** (2014). "Building Practical Systems That Compute on Encrypted Data." PhD thesis, Massachusetts Institute of Technology.

24. **POULIOT, D., AND WRIGHT, C. V.** (2016). "The Shadow Nemesis: Inference Attacks on Efficiently Deployable, Efficiently Searchable Encryption." In *Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS)*, Vienna, Austria, October 2016.

25. **RANE, A., LIN, C., AND TIWARI, M.** (2015). "Raccoon: Closing Digital Side-Channels Through Obfuscated Execution." In *Proceedings of the 24th USENIX Security Symposium (Security)*, Washington, DC, August 2015.

26. **RISTENPART, T., TROMER, E., SHACHAM, H., AND SAVAGE, S.** (2009). "Hey, You, Get Off of My Cloud: Exploring Information Leakage in Third-Party Compute Clouds." In *Proceedings of the 16th ACM Conference on Computer and Communications Security (CCS)*, Chicago, IL, November 2009.

27. **SCHUSTER, F., COSTA, M., FOURNET, C., GKANTSIDIS, C., PEINADO, M., MAINAR-RUIZ, G., AND RUSSINOVICH, M.** (2015). "VC3: Trustworthy Data Analytics in the Cloud Using SGX." In *Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland)*, San Jose, CA, May 2015.

28. **SEO, J., LEE, B., KIM, S., SHIH, M.-W., SHIN, I., HAN, D., AND KIM, T.** (2017). "SGX-Shield: Enabling Address Space Layout Randomization for SGX Programs." In *Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS)*, San Diego, CA, February–March 2017.

29. **SHIH, M.-W., KUMAR, M., KIM, T., AND GAVRILOVSKA, A.** (2016). "S-NFV: Securing NFV States by Using SGX." In *Proceedings of the 1st ACM International Workshop on Security in SDN and NFV*, New Orleans, LA, March 2016.

30. **SHIH, M.-W., LEE, S., KIM, T., AND PEINADO, M.** (2017). "T-SGX: Eradicating Controlled-Channel Attacks Against Enclave Programs." In *Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS)*, San Diego, CA, February–March 2017.

31. **SHINDE, S., CHUA, Z. L., NARAYANAN, V., AND SAXENA, P.** (2016). "Preventing Your Faults from Telling Your Secrets." In *Proceedings of the 11th ACM Symposium on Information, Computer and Communications Security (ASIACCS)*, Xi’an, China, May–June 2016.

32. **SHINDE, S., TIEN, D. L., TOPLE, S., AND SAXENA, P.** (2017). "Panoply: Low-TCB Linux Applications with SGX Enclaves." In *Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS)*, San Diego, CA, February–March 2017.

33. **SINHA, R., COSTA, M., LAL, A., LOPES, N. P., RAJAMANI, S., SESHIA, S. A., AND VASWANI, K.** (2016). "A Design and Verification Methodology for Secure Isolated Regions." In *Proceedings of the 2016 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)*, Santa Barbara, CA, June 2016.

34. **SINHA, R., RAJAMANI, S., SESHIA, S., AND VASWANI, K.** (2015). "Moat: Verifying Confidentiality of Enclave Program." In *Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS)*, Denver, Colorado, October 2015.

35. **SONG, C., LEE, B., LU, K., HARRIS, W. R., KIM, T., AND LEE, W.** (2016). "Enforcing Kernel Security Invariants with Data Flow Integrity." In *Proceedings of the 23rd Annual Network and Distributed System Security Symposium (NDSS)*, San Diego, CA, February 2016.

36. **STRACKX, R., AND PIESSENS, F.** (2016). "Ariadne: A Minimal Approach to State Continuity." In *Proceedings of the 25th USENIX Security Symposium (Security)*, Austin, TX, August 2016.

37. **TRUSTED COMPUTING GROUP.** (n.d.). "Trusted Platform Module (TPM) Summary." Available at: <http://www.trustedcomputinggroup.org/trusted-platform-module-tpm-summary/>.

38. **TSAI, C.-C., PORTER, D. E., AND VIJ, M.** (2017). "Graphene-SGX: A Practical Library OS for Unmodified Applications on SGX." In *Proceedings of the 2017 USENIX Annual Technical Conference (ATC)*, Santa Clara, CA, July 2017.

39. **UZELAC, V., AND MILENKOVIC, A.** (2009). "Experiment Flows and Microbenchmarks for Reverse Engineering of Branch Predictor Structures." In *Performance Analysis of Systems and Software, 2009. ISPASS 2009. IEEE International Symposium on*, IEEE, pp. 207–217.

40. **WEICHBRODT, N., KURMUS, A., PIETZUCH, P., AND KAPITZA, R.** (2016). "AsyncShock: Exploiting Synchronisation Bugs in Intel SGX Enclaves." In *Proceedings of the 21st European Symposium on Research in Computer Security (ESORICS)*, Heraklion, Greece, September 2016.

41. **XU, Y., CUI, W., AND PEINADO, M.** (2015). "Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems." In *Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland)*, San Jose, CA, May 2015.

42. **YANG, K., HICKS, M., DONG, Q., AUSTIN, T., AND SYLVESTER, D.** (2016). "A2: Analog Malicious Hardware." In *Proceedings of the 37th IEEE Symposium on Security and Privacy (Oakland)*, San Jose, CA, May 2016.

43. **ZHANG, F.** (n.d.). "mbedtls-SGX: A SGX-Friendly TLS Stack (ported from mbedtls)." Available at: <https://github.com/bl4ck5un/mbedtls-SGX>.

44. **ZHANG, F., CECCHETTI, E., CROMAN, K., JUELS, A., AND SHI, E.** (2016). "Town Crier: An Authenticated Data Feed for Smart Contracts." In *Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS)*, Vienna, Austria, October 2016.

45. **ZHANG, Y., JUELS, A., OPREA, A., AND REITER, M. K.** (2011). "Home-Alone: Co-Residency Detection in the Cloud via Side-Channel Analysis." In *Proceedings of the 32nd IEEE Symposium on Security and Privacy (Oakland)*, Oakland, CA, May 2011.

46. **ZHANG, Y., JUELS, A., REITER, M. K., AND RISTENPART, T.** (2012). "Cross-VM Side Channels and Their Use to Extract Private Keys." In *Proceedings of the 19th ACM Conference on Computer and Communications Security (CCS)*, Raleigh, NC, October 2012.

47. **ZHENG, W., DAVE, A., BEEKMAN, J. G., POPA, R. A., GONZALES, J. E., AND STOICA, I.** (2017). "Opaque: An Oblivious and Encrypted Distributed Analytics Platform." In *Proceedings of the 14th USENIX Symposium on Networked Systems Design and Implementation (NSDI)*, Boston, MA, March 2017.

### A. Manipulating Local APIC Timer

The local APIC is a component of Intel CPUs used to configure and handle CPU-specific interrupts [26, §10]. An operating system (OS) can program it through memory-mapped registers (e.g., device configuration register) or model-specific registers (MSRs) to adjust the frequency of the local APIC timer, which generates high-resolution timer interrupts, and deliver an interrupt to a CPU core (e.g., inter-processor interrupt (IPI) and I/O interrupt from the I/O APIC).

Figure 11 shows that Intel CPUs support three local APIC timer modes: periodic, one-shot, and timestamp counter (TSC)-deadline modes. The periodic mode allows the OS to configure the initial-count register, whose value is copied into the current-count register used by the local APIC timer. The current-count register's value decreases at the rate of the bus frequency, and when it becomes zero, a timer interrupt is generated, and the register is re-initialized using the initial-count register. The one-shot mode allows the OS to configure the initial-count counter value whenever a timer interrupt is generated. The TSC-deadline mode is the most advanced and precise timer mode, allowing the OS to specify when the next timer interrupt will occur in terms of a TSC value. Our target Linux system (kernel version 4.4) uses the TSC-deadline mode, so we focus on this mode.

#### Modifying `lapic_next_deadline()` and `local_apic_timer_interrupt()`

We modified the `lapic_next_deadline()` function, which specifies the next TSC deadline, and the `local_apic_timer_interrupt()` function, which is called whenever a timer interrupt is generated. We made and exported two global variables to manipulate these functions with a kernel module:
- `lapic_next_deadline_delta` to change the delta.
- `lapic_target_cpu` to specify a virtual CPU running a victim enclave process (via a CPU affinity).
- `timer_interrupt_hook` to specify a function to be called whenever a timer interrupt is generated.

In our evaluation environment with an Intel Core i7 6700K CPU (4GHz), we were able to set 1,000 as the minimum delta value, meaning it fires a timer interrupt about every 1,000 cycles. Note that, in our environment, a delta value lower than 1,000 caused the entire system to freeze because a timer interrupt was generated before the old timer interrupt was handled by the interrupt handler.

### B. Modifying SGX Driver

Figure 12 shows how we modified the Intel SGX driver for Linux to manipulate the base address of an enclave.

```c
u64 tsc;
tsc = rdtsc();

/* linux-4.4.23/arch/x86/kernel/apic/apic.c */
...
// Manipulate the delta of TSC-deadline mode
unsigned int lapic_next_deadline_delta = 0U;
EXPORT_SYMBOL_GPL(lapic_next_deadline_delta);

// Specify the virtual core under attack
int lapic_target_cpu = -1;
EXPORT_SYMBOL_GPL(lapic_target_cpu);

// A hook to launch branch shadowing attack
void (*timer_interrupt_hook)(void*) = NULL;
EXPORT_SYMBOL_GPL(timer_interrupt_hook);

...
// Update the next TSC deadline
static int lapic_next_deadline(unsigned long delta, struct clock_event_device *evt) {
    if (smp_processor_id() != lapic_target_cpu)
        wrmsrl(MSR_IA32_TSC_DEADLINE, tsc + (((u64) delta) * TSC_DIVISOR));
    else
        wrmsrl(MSR_IA32_TSC_DEADLINE, tsc + lapic_next_deadline_delta); // Custom deadline
    return 0;
}

...
// Handle a timer interrupt
static void local_apic_timer_interrupt(void) {
    int cpu = smp_processor_id();
    struct clock_event_device *evt = &per_cpu(lapic_events, cpu);
    if (cpu == lapic_target_cpu && timer_interrupt_hook)
        timer_interrupt_hook((void*)&cpu); // Call attack code
}
```

**Figure 11:** Modified local APIC timer code. We changed `lapic_next_deadline()` to manipulate the next TSC deadline and `local_apic_timer_interrupt()` to launch attack code.

### Conclusion

This document provides a comprehensive list of references related to security and privacy, along with detailed modifications to the local APIC timer and the Intel SGX driver for Linux. These modifications are aimed at manipulating the behavior of the local APIC timer and the base address of an enclave, respectively.