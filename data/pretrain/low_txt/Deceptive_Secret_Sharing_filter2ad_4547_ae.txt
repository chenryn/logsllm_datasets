### Lazy Replication and Its Impact on Consistency and Availability

Lazy replication techniques can reduce consistency and availability. As the overlap (n - r) decreases, latency increases because a smaller overlap results in a higher number of shares that must be read or written. The bottom left of the figure illustrates the impact of object size, showing that performance is reasonable for files up to 1 MB but significantly degrades for 4 MB files. The bottom right compares the three schemes, indicating that their latencies are similar, except for the replicated write latency, which has already been discussed. Latency is most sensitive to the overlap, while n and k have a lesser impact since the number of shares is primarily determined by n - r.

### Reconstruction of Remaining Secrets in NCP Scheme

Figure 10, generated using the above expressions, shows the number of combinations required to guarantee the reconstruction of all remaining secrets given the first secret. For example, with k = 14 and r = 10, an adversary can reconstruct all remaining secrets with approximately 10^6 attempts. Reducing r to 5 increases the number of attempts to about 10^16, which was our target. This reduction in r increases the number of shares to 505, which is still about 2/3 of the number needed in P NAIVE but significantly higher than when only considering the security of the first secret.

### Discussion on Parameters in NCP and Shamir’s Secret Sharing

It is interesting to compare the parameters m and k in NCP with the parameter k in Shamir’s secret sharing scheme (without deception). In Shamir’s scheme, k is considered a fault threshold, meaning it is the minimum number of servers an adversary must compromise to reveal a secret. Such threshold schemes have been criticized for security when deployed on identical servers, as a vulnerability on one server is likely present on all others. Deceptive secret sharing mitigates this issue by making k no longer a strict fault threshold. Even if an adversary compromises k servers, the assembled secret is unlikely to be correct. Even if all servers and shares are compromised, the adversary would still need to perform a practically infeasible amount of computation to reconstruct all secrets, ensuring at least one correct secret remains unknown. Thus, deceptive secret sharing with a large enough value of m, even with a small k, provides much stronger security than simply increasing k without deception.

### Prototype Evaluation

We evaluated our techniques using a CloudLab prototype, focusing on performance and data availability.

#### Overview of Prototype Implementation

The implementation follows the architecture shown in Figure 2, with storage servers implemented on CloudLab. 

#### Latency Analysis

Figure 11 shows the latency for the three schemes with 256 KB objects and m = 50. The bottom left focuses on the impact of object size using CYCLIC without replication for illustration. The bottom right compares the three schemes on one graph. Table II compares the cyclic DSS scheme without replication and with m = 50, n = 15, and r = 14, where each file is encoded with 64 shares, compared to a single share for no secret sharing and no deception. Despite reading or writing 64 times the number of shares, the latency of DSS is always less than twice that of reading a single share. For smaller file sizes, the DSS latency is only 10-20% higher, as performance is not bandwidth-limited, and multiple share reads/writes can overlap substantially. For larger file sizes, the latency degradation increases, but for applications with file sizes in the evaluated range, such as email and photo sharing, latencies should be tolerable for users.

#### Data Availability

Figure 12 depicts the data availability of the three schemes. Note that the availability of CYCLIC without replication drops quickly as the number of crashed servers increases. Each server stores shares of some real secrets, and CYCLIC needs all shares to reconstruct the secret, so even one crashed server causes some data objects to be unavailable. Availability also decreases with the number of servers, as fewer servers require more shares to be stored on each. CYCLIC with three replicas improves fault tolerance, maintaining availability near one even with up to 10 crashed servers, except when the number of servers is small (e.g., 50). However, triplication comes with high costs, tripling storage overhead and significantly increasing write latency unless lazy replication is used. NCP with appropriate values of k and a large enough number of servers can also achieve high availability for a relatively large number of crashed servers. For example, with n = 15, k = 12, r = 9, m = 50, and 150 servers of which 8 are crashed, NCP requires 309 shares and has an availability of 0.9995, while CYCLIC with triplication requires 903 shares and has an availability of 0.9999.

### Related Work

Fake resources are often used to detect and track attacks, such as honeypots and honey patches. These systems deploy fake resources openly to attract adversaries. Our work combines the protection of real information with the provision of fake information, providing two layers of security.

### Conclusion

We presented new deceptive secret sharing techniques that work with both XOR secret sharing and Shamir’s polynomial-based threshold secret sharing. We evaluated the overhead and security of the proposed techniques, showing they permit tunable security by varying one parameter. A CloudLab prototype demonstrated acceptable latency and very high availability. Our work involves hiding true information among a sea of true and fake information, extending the chaffing and winnowing concept to distributed storage. Unlike existing approaches, our method addresses both confidentiality and deception.

### References

[1] Araujo F, Hamlen K W, Biedermann S, et al, “From patches to honey-patches: Lightweight attacker misdirection, deception, and disinformation,” Proc. ACM SIGSAC Conference on Computer and Communications Security, 2014: 942-953.
[2] Bessani A, Correia M, Quaresma B, et al, “DepSky: Dependable and secure storage in a cloud-of-clouds,” ACM Transactions on Storage (TOS), 2013, 9(4): 12.
[3] Bowen B M, Hershkop S, Keromytis A D, et al, “Baiting inside attackers using decoy documents,” Int’l Conf. on Security and Privacy in Communication Systems. Springer Berlin Heidelberg, 2009: 51-70.
[4] CloudLab Team, “The CloudLab Manual,” http://docs.cloudlab.us/.
[5] Dagon D, Lee W, Lipton R, “Protecting secret data from insider attacks,” Int’l Conf. on Financial Cryptography and Data Security, 2005: 16-30.
[6] Dziembowski S, Pietrzak K, “Intrusion-resilient secret sharing,” Proc. Symposium on Foundations of Computer Science, 2007: 227-237.
[7] Greenberg, A., “Hackers hit macron with huge email leak ahead of French election,” Wired Security Blog, 2017.
[8] Herlihy, M., and Tygar, J., “How to make replicated data secure,” Proc. of Advances in Cryptology, pp. 379–391, 1987.
[9] Huang, Z., Ayday, E., Fellay, J., et al., “GenoGuard: Protecting genomic data against brute-force attacks,” Security and Privacy (SP), 2015 IEEE Symposium on. IEEE, 2015: 447-462.
[10] Juels A., Rivest R., “Honeywords: Making password-cracking detectable,” Proc. ACM SIGSAC Conference on Computer & Comm. Security, 2013: 145-160.
[11] Juels A, Ristenpart T, “Honey encryption: Security beyond the brute-force bound,” Int’l Conf. Theory & Appl. Crypto. Tech., 2014: 293-310.
[12] Kott, A., Swami, A., and West, B., “The fog of war in cyberspace,” IEEE Computer, pp. 84–87, Nov. 2016.
[13] Krawczyk, H., “Secret sharing made short,” Proc. of the Annual International Cryptology Conference, pp. 136–146, 1993.
[14] Lakshmanan, S., Ahamad, M., and Venkateswaran, H., “Responsive security for stored data,” IEEE Transactions on Parallel and Distributed Systems, Vol. 14, pp. 818-828, 2003.
[15] Padilha, R., Pedone, F., “Belisarius: BFT storage with confidentiality,” Proc. Int’l Symp. on Network Computing and Appl., pp. 9–16, 2011.
[16] Provos, N., “Honeyd: A virtual honeypot daemon,” Proc. of 10th DFN-CERT Workshop, pp. 4–9, 2003.
[17] Rivest, R.L., “Chaffing and winnowing: Confidentiality without encryption,” CryptoBytes (RSA laboratories), 1998, 4(1): 12-17.
[18] Shamir, A., “How to share a secret,” Communications of the ACM, Vol. 22, pp. 612–613, Nov. 1979.
[19] Spitzner L, “Honeypots: Catching the insider threat,” Proc. Computer Security Applications Conference, 2003: 170-179.
[20] Storer, M., Greenan, K., Miller E., et al., “POTSHARDS: Secure long-term storage without encryption,” 2007 USENIX Annual Technical Conference. USENIX Association, 2008.
[21] Subbiah, A. and Blough, D.M., “An approach for fault tolerant and secure data storage in collaborative work environments,” Proc. of the ACM Workshop on Storage Security and Survivability, pp. 84–93, 2005.
[22] Yuill J, Zappe M, Denning D, et al, “Honeyfiles: Deceptive files for intrusion detection,” Information Assurance Workshop, 2004. Proceedings from the Fifth Annual IEEE SMC. IEEE, 2004: 116-122.
[23] Zage, D., Obert, J., “Utilizing linear subspaces to improve cloud security,” Dependable Systems and Networks Workshops (DSN-W), 2012 IEEE/IFIP 42nd International Conference on. IEEE, 2012: 1-6.
[24] Zhang, F., Zhou, S., Qin, Z., and Liu, J., “Honeypot: A supplemented active defense system for network security,” Proc. Int’l. Conf. on Parallel & Dist. Computing, Applications and Technologies, pp. 231–235, 2003.