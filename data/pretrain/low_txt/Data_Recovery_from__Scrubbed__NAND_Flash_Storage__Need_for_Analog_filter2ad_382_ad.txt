### 6.3 Effectiveness of Analog Scrubbing

To demonstrate the effectiveness of the proposed analog scrubbing, we conducted a series of step-by-step experiments. First, we wrote the same Einstein image to a NAND block and baked it for 3 hours at 120°C to simulate data retention effects. Next, we created an all-zero page using a partial programming technique. The duration of the partial programming was determined based on the memory's data retention characteristics.

**Figure 7:**
- **(a)** Stored original Einstein image (460 × 600).
- **(b)** Scrubbed image after data retention has taken place. The chip was baked for 3 hours in an oven at 120°C to accelerate the data retention effect.
- **(c)** Recovered raw image using the analog scrubbing operation.

### Data Sanitization Techniques

#### Logical Sanitization
Block erasure methods are often slow, so NAND storage typically performs logical sanitization by invalidating the page address of obsolete data. The Flash Translation Layer (FTL) manages the page address mapping, performing a one-to-one mapping between the logical page address and the physical memory address of the flash media. For any page update, the FTL writes new content to another physical page (or sector) location and updates the address table map. This means the old version of the data remains in the physical storage medium, which can be retrieved by an adversary.

#### Encryption-Based Sanitization
Several recent studies have proposed encryption-based methods for NAND sanitization [17]–[22]. The core idea is to encrypt the user file with an encryption key and store the encrypted data and the key in separate NAND blocks. Secure deletion is achieved by removing the keys, which is efficient as keys require less memory space. However, this method has several drawbacks:
1. **Implementation Risks:** Encryption may have vulnerabilities, such as issues with random number generation for the encryption key, which can be exploited by a motivated adversary [23].
2. **Key Storage Sanitization:** Proper sanitization of the key storage block and any derived values that might aid in cryptanalysis is necessary.
3. **Limited Applicability:** Some existing storage solutions and resource-constrained embedded platforms do not include encryption/decryption modules, making this technique infeasible.

#### Scrubbing or Zero-Overwrite Based Digital Sanitization
To achieve page-level deletion in flash-based storage, the concept of "data scrubbing" was introduced [1], [16], [24]. The key idea behind scrubbing is to create an all-zero page (or fully programmed cells), effectively deleting the data from that page. However, our research shows that scrubbed data can still be partially or completely recoverable due to the analog properties of the programmed cells.

#### History Independent Erase
Recent research has focused on secure NAND deletion methods that not only remove data but also conceal deletion history [25]–[27]. For example, Jia et al. [26] proposed undetectable secure deletion in flash systems using partial scrubbing and removing structural artifacts of past deletions. Similarly, Chen et al. [27] designed HiFlash, a history-independent flash device that removes all historical artifacts in the flash layout.

### Conclusion

In this paper, we demonstrated that digitally sanitized (zero-overwrite based "scrubbing") NAND flash storage media still retain previously written information in the analog threshold voltage characteristics. The data retention property of flash memory cells causes differences in the analog threshold voltage of the original zero bits and the newly created zeros during scrubbing. We experimentally showed that these differences can be exploited to recover deleted data from a fully scrubbed all-zero page. Using a partial erase technique, our evaluation indicates that more than 75% of the bits are recoverable, depending on the NAND chip specifications, memory cell data retention characteristics, and the nature of the image data. Finally, we described a new method for analog sanitization of NAND memory pages using page creation time and partial programming. Our evaluation suggests that the proposed technique holds promise for true deletion of user data from flash media.

### References

[1] M. Wei, L. M. Grupp, F. E. Spada, and S. Swanson, “Reliably Erasing Data from Flash-based Solid State Drives,” in Proceedings of the 9th USENIX Conference on File and Stroage Technologies, Berkeley, CA, USA, 2011, pp. 8–8.

[2] Y. Cai, O. Mutlu, E. F. Haratsch, and K. Mai, “Program Interference in MLC NAND Flash Memory: Characterization, Modeling, and Mitigation,” in 2013 IEEE 31st International Conference on Computer Design (ICCD), 2013, pp. 123–130.

[3] L. Zuolo, C. Zambelli, R. Micheloni, and P. Olivo, “Solid-State Drives: Memory Driven Design Methodologies for Optimal Performance,” Proc. IEEE, vol. 105, no. 9, pp. 1589–1608, Sep. 2017.

[4] F. Chen, T. Zhang, and X. Zhang, “Software Support Inside and Outside Solid-State Devices for High Performance and High Efficiency,” Proc. IEEE, vol. 105, no. 9, pp. 1650–1665, Sep. 2017.

[5] N. R. Mielke, R. E. Frickey, I. Kalastirsky, M. Quan, D. Ustinov, and V. J. Vasudevan, “Reliability of Solid-State Drives Based on NAND Flash Memory,” Proc. IEEE, vol. 105, no. 9, pp. 1725–1750, Sep. 2017.

[6] Y. Cai, S. Ghose, E. F. Haratsch, Y. Luo, and O. Mutlu, “Error Characterization, Mitigation, and Recovery in Flash-Memory-Based Solid-State Drives,” Proc. IEEE, vol. 105, no. 9, pp. 1666–1704, Sep. 2017.

[7] C. M. Compagnoni, A. Goda, A. S. Spinelli, P. Feeley, A. L. Lacaita, and A. Visconti, “Reviewing the Evolution of the NAND Flash Technology,” Proc. IEEE, vol. 105, no. 9, pp. 1609–1633, Sep. 2017.

[8] L. M. Grupp et al., “Characterizing Flash Memory: Anomalies, Observations, and Applications,” in 2009 42nd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO), 2009, pp. 24–33.

[9] Y. Luo, S. Ghose, Y. Cai, E. F. Haratsch, and O. Mutlu, “Enabling Accurate and Practical Online Flash Channel Modeling for Modern MLC NAND Flash Memory,” IEEE J. Sel. Areas Commun., vol. 34, no. 9, pp. 2294–2311, Sep. 2016.

[10] Y. Cai, E. F. Haratsch, O. Mutlu, and K. Mai, “Threshold Voltage Distribution in MLC NAND Flash Memory: Characterization, Analysis, and Modeling,” in 2013 Design, Automation Test in Europe Conference Exhibition (DATE), 2013, pp. 1285–1290.

[11] P. Gutmann, “Data Remanence in Semiconductor Devices,” in USENIX Security Symposium, 2001.

[12] P. Gutmann, “Secure Deletion of Data from Magnetic and Solid-state Memory,” in Proceedings of the 6th Conference on USENIX Security Symposium, Focusing on Applications of Cryptography - Volume 6, Berkeley, CA, USA, 1996, pp. 8–8.

[13] S. Skorobogatov, “Data Remanence in Flash Memory Devices,” in Proceedings of the 7th International Conference on Cryptographic Hardware and Embedded Systems, Berlin, Heidelberg, 2005, pp. 339–353.

[14] J. Reardon, C. Marforio, S. Capkun, and D. Basin, “User-level Secure Deletion on Log-structured File Systems,” in Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security, New York, NY, USA, 2012, pp. 63–64.

[15] S. M. Diesburg et al., “TrueErase: per-file secure deletion for the storage data path,” in ACSAC, 2012.

[16] K. Sun, J. Choi, D. Lee, and S. H. Noh, “Models and Design of an Adaptive Hybrid Scheme for Secure Deletion of Data in Consumer Electronics,” IEEE Trans. Consum. Electron., vol. 54, 2008.

[17] J. Reardon, S. Capkun, and D. Basin, “Data Node Encrypted File System: Efficient Secure Deletion for Flash Memory,” presented at the Presented as part of the 21st {USENIX} Security Symposium ({USENIX} Security 12), 2012, pp. 333–348.

[18] J. Reardon, D. Basin, and S. Capkun, “On Secure Data Deletion,” IEEE Secur. Priv., vol. 12, no. 3, pp. 37–44, May 2014.

[19] J. Reardon, D. Basin, and S. Capkun, “SoK: Secure Data Deletion,” in 2013 IEEE Symposium on Security and Privacy, 2013, pp. 301–315.

[20] J. Lee, J. Heo, Y. Cho, J. Hong, and S. Y. Shin, “Secure Deletion for NAND Flash File System,” in In ACM Symposium on Applied Computing, 2008.

[21] S. Jia, L. Xia, B. Chen, and P. Liu, “DEFTL: Implementing Plausibly Deniable Encryption in Flash Translation Layer,” in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, New York, NY, USA, 2017, pp. 2217–2229.

[22] L. Yang, T. Wei, F. Zhang, and J. Ma, “SADUS: Secure Data Deletion in User Space for Mobile Devices,” Comput. Secur., vol. 77, pp. 612–626, Aug. 2018.

[23] T. Ristenpart and S. Yilek, “When Good Randomness Goes Bad: Virtual Machine Reset Vulnerabilities and Hedging Deployed Cryptography,” in Ndss ’10 (Network and Distributed Security Symposium), 2010.

[24] W. Wang, C. Ho, Y. Chang, T. Kuo, and P. Lin, “Scrubbing-Aware Secure Deletion for 3-D NAND Flash,” IEEE Trans. Comput.-Aided Des. Integr. Circuits Syst., vol. 37, no. 11, pp. 2790–2801, Nov. 2018.

[25] B. Chen, S. Jia, L. Xia, and P. Liu, “Sanitizing Data is Not Enough!: Towards Sanitizing Structural Artifacts in Flash Media,” in Proceedings of the 32Nd Annual Conference on Computer Security Applications, New York, NY, USA, 2016, pp. 496–507.

[26] S. Jia, L. Xia, B. Chen, and P. Liu, “NFPS: Adding Undetectable Secure Deletion to Flash Translation Layer,” in Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security, New York, NY, USA, 2016, pp. 305–315.

[27] B. Chen and R. Sion, “HiFlash: A History Independent Flash Device,” ArXiv, vol. abs/1511.05180, 2015.