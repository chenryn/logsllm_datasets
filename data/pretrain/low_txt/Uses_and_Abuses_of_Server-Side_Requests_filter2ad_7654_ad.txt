### Optimized Text

**Rate Limiting and Data Compression:**
To prevent abuse, interpreter services must limit the request rate. Another source of resource exhaustion is data compression. According to Table 3c, most tested services support data compression, and one service also supports HTTP request decompression. Decompressing HTTP requests is not a standardized behavior but rather a web server-specific feature [20]. The reasons for supporting this feature are unclear, and we recommend disabling it. In contrast, HTTP response compression is standardized and more commonly used. We also recommend disabling data compression. If this is not feasible, developers should ensure that their services limit the resources used during decompression (see [20] for guidelines on secure data decompression).

**Mitigation M6: Remove Open Access Control Policies for CORS**
As OOP services can be accessed via CORS from any domain, they can be exploited by interpreters to chain SSR services and mount an attack. Among our case studies, four services use the header `ACAO: *`, which is a bad practice in the presence of our threat model. The other 64 services omit `ACAO` headers, effectively blocking cross-origin requests. Another effective countermeasure is to limit access to SSR services to trusted origins.

**Mitigation M7: Limit Information Leakage**
Seventy-two percent of the services can be used as probes for network reconnaissance, making this the most widespread behavior among the applications we tested. All probe services in Table 3a allow, with varying degrees of granularity, network reconnaissance through response time analysis and response codes. To mitigate information leaks, S's behavior should be independent of the success of the SSR. For example, S can enforce a constant response time (i.e., a fixed delay between C’s request and the response sent to C). We observed this behavior in 15 services that do not allow distinguishing the port state, seven services that do not leak information about host availability, and 24 services that do not disclose the availability of an HTTP resource. However, enforcing a constant time introduces undesired delays, making it unsustainable for scenarios where responsiveness is critical. In such cases, S may deploy weaker security measures, such as accepting URLs only with selected TCP ports (mitigation M3) or rate-limiting requests.

**Mitigation M8: Enforce URL-Based Browser Countermeasures**
None of the mitigations observed in the wild (M1-7) can solve Web Origin Laundering Attack 1.2. The root cause of this attack is that S allows retrieval and serving of malicious content while hiding the true origin of the malicious content under S’s domain. To block Web Origin Laundering Attack 1.2, SSR services should implement the same countermeasures deployed by browsers to block harmful and unwanted content, such as Google Safe Browsing. When the client submits a URL to S, S validates the URL using the Google Safe Browsing protocol. If the URL is malicious, S refuses to retrieve it. While this approach partially mitigates the distribution of malicious content, it does not address the problem if web browsers implement custom security policies, such as NoScript or AdBlock custom domain blacklists. In conclusion, a general solution to Web Origin Laundering Attack 1.2 is still lacking.

**Developer Feedback**
We responsibly disclosed all vulnerabilities to the respective developers. In most cases, developers responded to our initial reports. If developers were unresponsive for over a month, we attempted a second contact and then alerted the US CERT. Our disclosures resulted in a variety of responses from developers, strongly related to the type of flaw in our classification.

**Forgery**
Seventy-five percent of these vulnerabilities have been fixed. Six vendors (S1, S14, S15, S35, S46, and S64) patched their services, while two vendors (S12 and S41) did not respond. The high number of fixes may be due to partial awareness of the security risks associated with forgery vulnerabilities. Forgery is the first documented SSR flaw, and developers often deploy countermeasures like URL validation (e.g., 64 services reject URLs with non-HTTP schemes, 13 with TCP ports, and eight with IPs). However, the fact that countermeasures can be bypassed with HTTP redirections indicates that the full exploitation space of SSR flaws is not entirely understood.

**Information Gathering**
The disclosure of these vulnerabilities revealed a more fragmented situation. Five services patched the problem, while the majority ignored the issue or did not respond to our report. In three cases, developers did not want to modify S because they use monitoring to prevent abuses (S3, S5, and S59). The use of monitoring suggests prudence and attention to security-related issues. However, choosing monitoring over a patch may indicate that developers consider this risk a low priority. Other developers (S7, S60, and S62) do not consider this flaw a security risk at all.

**Enforcement of Security Policies**
Out of four affected services, S15 has been shut down, and S2 partially solved the flaw by adding the content disposition header into the response. Developers of S16 reported fixing the flaw, but the patch was ineffective. Lastly, developers of S5 rejected our report because they use monitoring to prevent abuses. As discussed in Section 6, monitoring may work for large-scale abuses but can miss individual exploitations.

**Related Work**
In this section, we review SSR literature according to four thematic groups. First, we review academic literature focused on vulnerability analysis and detection. Then, we review known SSR-based attacks against popular web applications. Third, we present current attempts to classify and categorize existing SSR threats. Finally, we survey existing tools to detect SSR vulnerabilities.

**Vulnerability Analyses and Detection**
Web vulnerabilities have been extensively studied from various angles, including categorization and prioritization [17, 23], impact and trends [18], detection techniques [2, 19], and defense mechanisms [3]. While existing works focus largely on classical yet severe vulnerabilities, no scientific work has studied the SSR communication pattern.

**Attacks and Classifications**
Most security incidents are described in reports and whitepapers. These attacks are SSR forgery attacks, brought to the community’s attention by Polyakov et al. [22] and Walikar [27]. Polyakov et al. [22] described an XXE vulnerability in SAP NetWeaver, while Walikar [27] described an insufficient input validation vulnerability in popular social networks. Other exploitations of SSR forgery vulnerabilities were reported by Almroth et al. [1], who retrieved local resources in Google services. All these attacks are included in Polyakov’s threat model. Our paper presents five previously unknown SSR-based attacks: two Web Origin Laundering attacks and three DoS attacks.

Following the initial incidents, the community started classifying and categorizing known SSR-based vulnerabilities. All efforts focused on SSR forgery (e.g., CWE [25] and OnSec [16]). However, current knowledge on SSR vulnerabilities is sparse, disjoint, and incomplete. While the CWE database includes some SSR-related vulnerabilities, they are mainly isolated entries not correlated to each other. As a result, developers cannot identify all possible flaws that can affect an SSR service. Furthermore, there are other attacks targeting C and S that do not rely on forgery but instead abuse improper enforcement of security policies.

**Detection Tools**
Existing detection tools target only SSRF vulnerabilities and are available as proof-of-concept scripts (e.g., the SSRF Bible [16]) or testing tools. A proprietary tool that can find SSRF vulnerabilities is Acunetix WVS version 9 with AcuMonitor5. However, this tool is not freely available, and we were unable to inspect it. Existing public tools offer limited detection power (only SSRF), making them inapplicable to the purpose of this paper. Ussrfuzzer [28] fuzzes HTTP requests with URLs to detect SSRs but does not perform security tests. In contrast, the OWASP Skanda [5] tool can detect information disclosure flaws, particularly leaks of TCP port status. However, it cannot detect other types of leakage, such as web application fingerprinting, nor other vulnerabilities or security-related features. For these reasons, we developed G¨unther, a comprehensive SSR testing tool, which we plan to release to the public.

**Conclusion**
To the best of our knowledge, this is the first comprehensive study of the security of SSRs. We presented a classification of SSRs based on the type of flaw, the level of control of messages, the behavior of vulnerable services, and potential attack targets. We also unveiled previously unknown exploitation techniques, where a combination of seemingly innocuous services can be used to mount sophisticated attacks targeting both users and servers on the Internet. We conducted experiments on 68 popular web applications, showing that the majority can be abused to perform malicious activities, ranging from server-side code execution to DoS attacks. We also presented eight mitigations to help developers implement SSRs more securely.

**Acknowledgments**
This work was supported by the German Federal Ministry of Education and Research (BMBF) through funding for the Center for IT-Security, Privacy and Accountability (CISPA) and for the BMBF project 13N13250.

**References**
[1] Almroth, F., Karlsson, M.: How we got read access on Google's production servers. http://blog.detectify.com/post/82370846588/how-we-got-read-access-on-googles-production
[2] Balzarotti, D., Cova, M., Felmetsger, V.V., Vigna, G.: Multi-module vulnerability analysis of web-based applications. In: ACM CCS 2007 (2007)
[3] Barth, A., Jackson, C., Mitchell, J.C.: Robust defenses for cross-site request forgery. In: ACM CCS 2008 (2008)
[4] Bau, J., Bursztein, E., Gupta, D., Mitchell, J.: State of the art: Automated black-box web application vulnerability testing. In: IEEE S&P 2010 (2010)
[5] Chauhan, J.: OWASP SKANDA - SSRF Exploitation Framework. http://www.chmag.in/article/may2013/owasp-skanda-%E2%80%93-ssrf-exploitation-framework
[6] Eyeo GmbH: Adblock Plus. https://adblockplus.org/
[7] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., Berners-Lee, T.: Hypertext Transfer Protocol – HTTP/1.1. In: RFC 2616 (Draft Standard). Request for Comments. Internet Engineering Task Force (1999). http://www.ietf.org/rfc/rfc2616.txt
[8] Fitzpatrick, B., Recordon, D., Hardt, D., Hoyt, J.: OpenID Authentication 2.0 - Final. http://openid.net/specs/openid-authentication-2_0.html
[9] Google Inc.: Safe Browsing API. https://developers.google.com/safe-browsing/
[10] Grossman, J., Johansen, M.: Million browser botnet. https://media.blackhat.com/us-13/us-13-Grossman-Million-Browsed-Botnet.pdf
[11] Haﬁf, O.: Reflected file download: A new web attack vector. https://drive.google.com/file/d/0B0KLoHg gR XQnV4RVhlNl96MHM/view
[12] Heiland, D.: Web portals: Gateway to information or a hole in our perimeter defenses. http://www.shmoocon.org/2008/presentations/Web+portals,+gateway+to+information.ppt
[13] InformAction: NoScript. https://noscript.net/
[14] Jack Whitton: SafeCurl. https://github.com/finite/safecurl
[15] Kulkarni, P.: SSRF/XSPA bug in https://www.coinbase.com 06, http://www.prajalkulkarni.com/2013/06/ssrfxspa
[16] ONsec Lab: SSRF Bible, Cheatsheet. https://docs.google.com/document/d/1v1TkWZtrhzRLy0bYXBcdLUedXGb9njTNIJXa3u9akHM
[17] OWASP: The OWASP Top 10 Project. https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project
[18] Payet, P., Doupé, A., Kruegel, C., Vigna, G.: Ears in the wild: Large-scale analysis of execution after redirect vulnerabilities. In: ACM SAC 2013 (2013)
[19] Pellegrino, G., Balzarotti, D.: Toward black-box detection of logic flaws in web applications. In: NDSS 2014 (2014)
[20] Pellegrino, G., Balzarotti, D., Winter, S., Suri, N.: In the compression Hornet’s Nest: A security study of data compression in network services. In: USENIX Security 2015 (2015)
[21] Pellegrino, G., Rossow, C., Ryba, F.J., Schmidt, T.C., Wählisch, M.: Cashing out the Great Cannon? On browser-based DDoS attacks and economics. In: USENIX WOOT 2015 (2015)
[22] Polyakov, A., Chastukjin, D., Tyurin, A.: SSRF vs. Business-Critical Applications Part 1: XXE Tunnelling in SAP NetWeaver. http://erpscan.com/wp-content/uploads/2012/08/SSRF-vs-Business-Critical-Applications-Whitepaper.pdf
[23] SANS Institute: Critical Security Controls for Effective Cyber Defense. https://www.sans.org/media/critical-security-controls/CSC-5.pdf
[24] Santese, A.: Yahoo! SSRF/XSPA Vulnerability, 06. http://hacksecproject.com/yahoo-ssrfxspa-vulnerability/
[25] The MITRE Corporation: Common Weakness Enumeration. http://cwe.mitre.org/
[26] van Kesteren, A.: Cross-Origin Resource Sharing - W3C Recommendation, 16 January 2014. http://www.w3.org/TR/cors/
[27] Walikar, R.A.: Cross Site Port Attacks - XSPA. http://www.riyazwalikar.com/2012/11/cross-site-port-attacks-xspa-part-1.html
[28] Zaitov, E.: Universal SSRF Fuzzer. https://github.com/kyprizel/ussrfuzzer