### Figure 9. Processing Time vs. d for n = 2 and Different Values of k

Figure 10 illustrates the relationship between processing time and the parameter \( k \) for a fixed value of \( n = 4 \) and different values of \( d \). The chart clearly shows that large graphs can be processed in just a few seconds for values of \( k \) up to 5. As we will demonstrate, relatively small values of \( k \) provide an excellent balance between the approximation ratio and processing time, making this result highly valuable.

Similarly, Figure 11 depicts how processing time increases with \( k \) for a fixed value of \( d = 8 \) and different values of \( n \). This chart confirms that large graphs can be processed in a few seconds for relatively small values of \( k \).

### Relationship Between Processing Time and Graph Size

We also examined the relationship between processing time and the size of the graphs (in terms of the number of nodes). Figure 12 presents a scatter plot of average processing times for given pairs of \( d \) and \( n \) versus the corresponding graph size. The data suggest that, in practice, processing time is linear in the size of the graph for small values of \( k \).

### Approximation Ratio Analysis

Next, we evaluated the approximation ratio achieved by the algorithm. Figure 13 shows how the ratio changes as \( k \) increases for a fixed value of \( n = 2 \) and different values of \( d \). It is evident that the approximation ratio improves as \( k \) increases, and in all cases, the ratio remains well below the theoretical bound. Additionally, relatively low values of \( k \) (between 2 and 6) are sufficient to achieve a reasonably good approximation ratio in a time-efficient manner. Similarly, Figure 14 demonstrates how the approximation ratio improves with increasing \( k \) for a fixed value of \( d = 4 \) and different values of \( n \). The conclusions drawn from this chart are consistent: the approximation ratio is always below the theoretical bound.

### Conclusions

In this paper, we highlighted the limitations of previous work on minimum-cost network hardening using attack graphs. We demonstrated both theoretically and experimentally that finding the exact solution to this problem is feasible only for very small graphs. We proposed an approximation algorithm to find reasonably good solutions in a time-efficient manner. We proved that, under certain reasonable assumptions, the approximation ratio of this algorithm is bounded by \( n^2 \), where \( n \) is the maximum in-degree of nodes in the graph and \( d \) is the depth of the graph. We also showed that, in practice, the approximation ratio is much smaller than its theoretical bound. Finally, we reported experimental results that confirm the validity of our approach and motivate further research in this direction.

### Future Work

The experiments described in this paper were conducted on mostly synthetic but realistic attack graphs. Our future plans include evaluating the proposed approach on real data and deepening our understanding of cost functions. Although additional work is required, the theoretical and experimental results obtained so far are extremely promising. The proposed algorithm could be easily adopted to augment the hardening capabilities currently offered by available commercial tools such as Cauldron [18], a vulnerability analysis framework originally developed by members of our research group. Cauldron’s current approach to optimal network hardening is based on disabling the smallest possible set of edges in the attack graph to prevent the attacker from reaching certain target conditions. However, this approach has the same limitations as selectively removing exploits. As discussed earlier, it is not always possible to remove arbitrary exploits (or attack paths) without removing their causes. In practice, removing sets of initial conditions—over which administrators have control—will help existing tools generate hardening recommendations that can be actually enforced.

### References

[1] S. Noel and S. Jajodia, “Managing attack graph complexity through visual hierarchical aggregation,” in Proceedings of the ACM CCS Workshop on Visualization and Data Mining for Computer Security (VizSEC/DMSEC 2004). Fairfax, VA, USA: ACM, October 2004, pp. 109–118.

[2] L. Wang, S. Noel, and S. Jajodia, “Minimum-cost network hardening using attack graphs,” Computer Communications, vol. 29, no. 18, pp. 3812–3824, November 2006.

[3] Tenable Network Security R, “The Nessus R scanner,” http://www.tenable.com/products/nessus.

[4] P. Ammann, D. Wijesekera, and S. Kaushik, “Scalable, graph-based network vulnerability analysis,” in Proceedings of the 9th ACM Conference on Computer and Communications Security (CCS 2002), Washington, DC, USA, November 2002, pp. 217–224.

[5] M. Dacier, “Towards quantitative evaluation of computer security,” Ph.D. dissertation, Institut National Polytechnique de Toulouse, 1994.

[6] S. Jajodia, S. Noel, and B. O’Berry, Managing Cyber Threats: Issues, Approaches, and Challenges, ser. Massive Computing. Springer, 2005, vol. 5, ch. Topological Analysis of Network Attack Vulnerability, pp. 247–266.

[7] R. Ortalo, Y. Deswarte, and M. Kaˆaniche, “Experimenting with quantitative evaluation tools for monitoring operational security,” IEEE Transactions on Software Engineering, vol. 25, no. 5, pp. 633–650, September/October 1999.

[8] C. Phillips and L. P. Swiler, “A graph-based system for network-vulnerability analysis,” in Proceedings of the New Security Paradigms Workshop (NSPW 1998), Charlottesville, VA, USA, September 1998, pp. 71–79.

[9] R. W. Ritchey and P. Ammann, “Using model checking to analyze network vulnerabilities,” in Proceedings of the 2000 IEEE Symposium on Research on Security and Privacy (S&P 2000), Berkeley, CA, USA, May 2000, pp. 156–165.

[10] R. Ritchey, B. O’Berry, and S. Noel, “Representing TCP/IP connectivity for topological analysis of network security,” in Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC 2002), Las Vegas, NV, USA, December 2002, pp. 25–34.

[11] O. Sheyner, J. Haines, S. Jha, R. Lippmann, and J. M. Wing, “Automated generation and analysis of attack graphs,” in Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P 2002), Berkeley, CA, USA, May 2002, pp. 273–284.

[12] L. P. Swiler, C. Phillips, D. Ellis, and S. Chakerian, “Computer-attack graph generation tool,” in Proceedings of the DARPA Information Survivability Conference & Exposition II (DISCEX 2001), vol. 2, Anaheim, CA, USA, June 2001, pp. 307–321.

[13] D. Zerkle and K. Levitt, “NetKuang - A multi-host configuration vulnerability checker,” in Proceedings of the 6th USENIX Security Symposium, San Jose, CA, USA, July 1996.

[14] C. R. Ramakrishnan and R. Sekar, “Model-based analysis of configuration vulnerabilities,” Journal of Computer Security, vol. 10, no. 1/2, pp. 189–209, 2002.

[15] S. Jha, O. Sheyner, and J. Wing, “Two formal analyses of attack graphs,” in Proceedings of 15th IEEE Computer Security Foundations Workshop (CSFW 2002), Cape Breton, Canada, June 2002.

[16] S. Noel, E. Robertson, and S. Jajodia, “Correlating intrusion events and building attack scenarios through attack graph distances,” in Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC 2004), Tucson, AZ, USA, December 2004, pp. 350–359.

[17] L. Wang, A. Liu, and S. Jajodia, “Using attack graphs for correlating, hypothesizing, and predicting intrusion alerts,” Computer Communications, vol. 29, no. 15, pp. 2917–2933, September 2006.

[18] S. Jajodia, S. Noel, P. Kalapa, M. Albanese, and J. Williams, “Cauldron: Mission-centric cyber situational awareness with defense in depth,” in Proceedings of the Military Communications Conference (MILCOM 2011), Baltimore, MD, USA, November 2011.