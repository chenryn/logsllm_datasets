# Exploiting JRE: Analysis & Hunting
## Presentation at Hitcon 2013

### Contact Information
- **PI Email:** [Email Address]
- **PI Email:** [Email Address]

### About Us
- **Presenters:**
  - Xiao Lee (xye0x01)
  - Sen Nie (nforest)
- **Affiliation:**
  - Shanghai Jiao Tong University
- **Major:**
  - Computer Science and Technology
- **Research Interests:**
  - J2EE Development
  - Program Analysis
  - JRE Vulnerability Research
  - Cross-Site Scripting (XSS)

### Abstract
- **Topics Covered:**
  - Exploiting Applets
  - JRE Security Components
  - JRE Vulnerabilities
  - Bug Hunting in JRE
  - Future Directions

## Exploiting Applets
- **JDK/JRE/JVM Overview:**
  - Java Applet
  - No DEP & ASLR in JRE 6
- **Objective:**
  - Target Oracle JRE, Apple JRE, OpenJDK on Windows, Linux, and Mac OS X

### Exploit Statistics (2011 Data)
- **JRE: 5%**
- **Adobe Reader/Acrobat: 10%**
- **Adobe Flash: 16%**
- **MS IE: 32%**
- **Others: 37%**

## JRE Security Components
- **Sandbox Restrictions:**
  - Reading/Writing local files
  - Executing commands
  - Socket communication
  - Accessing system properties
  - Loading libraries
  - Other restrictions

### Key Components
- **Classloader:**
  - Bootstrap Classloader
  - Extension Classloader
  - Application Classloader
  - Custom Classloader
  - Trusts all classes it loads
- **SecurityManager:**
  - Key component for security checks
  - Null in local Java applications
  - `sun.applet.AppletSecurity` by default in applets
  - Setting `System.setSecurityManager(null)` to disable
- **doPrivileged Block:**
  - Bypasses certain security checks
  - Example:
    ```java
    AccessController.doPrivileged(new PrivilegedAction<Void>() {
        public Void run() {
            // Dangerous code
            return null;
        }
    });
    ```
- **Reflection:**
  - Accessing class, method, constructor, and field objects
  - Methods: `newInstance`, `invoke`
  - Java 7: `MethodType` and `MethodHandle`
- **Package Access:**
  - IDE warnings
  - `checkPackageAccess` before execution
  - `Security.getProperty("package.access")`

## JRE Vulnerabilities
- **API Design Vulnerabilities:**
  - Unsafe use of reflection API
  - Examples:
    - **CVE-2012-4681:**
      - `sun.awt.SunToolkit.getField`
      - `java.beans.Statement` field "acc"
      - Exploit: `Statement s = new Statement(java.lang.System.class, "setSecurityManager", new Object[] { null }); s.execute();`
    - **CVE-2013-2423:**
      - Type confusion in JVM
      - Steps:
        1. Helper classes
        2. Type confusion
        3. Find and set
- **Bugs in Native Code (C):**
  - Buffer overflows, etc.
  - Example: **CVE-2013-1493:**
    - Large array allocation
    - Heap spray
    - Exploiting `ColorConvertOp.filter` and `ICC_Transform.colorConvert`

## Bug Hunting in JRE
- **Key Points:**
  - API Design Vulnerabilities
  - Bugs in Native Code (C)
- **Target JRE Versions:**
  - OpenJDK 6/7
  - Oracle JRE
  - Apple JRE
- **Methods:**
  - Whitebox auditing
  - Fuzzing
- **Discovered Issues:**
  - **Issue #1:** Sensitive info leak in `SunToolkit.getSystemProperty`
  - **Issue #2:** Sensitive info leak in `SecuritySupport.getSystemProperty`
  - **Issue #3:** File probe in `FileManager.moveToTrash`
  - **Issue #4:** Getting any class object in `ObjectFactory.findProviderClass`
  - **Issue #5:** Taking over EIP & EAX in `DefaultDisposerRecord.invokeNativeDispose`

## Future Directions
- **Bypassing Click-and-Play:**
  - Social engineering
  - Loading `.ser` files under Oracle JRE 7u10
- **File Type Resolving Bugs:**
  - Pwn2own 2013: Java Memory Corruption in resolving `.otf` files
- **Advanced Techniques:**
  - Smart fuzzing
  - Program analysis

### References
- OpenJDK
- Java als Sicherheitsrisiko. Renato Ettisberger. 2011.
- Security Issues of the Sandbox inside Java Virtual Machine (JVM). Mohammad Shouaib Hashemi. 2010.
- Security Vulnerabilities in Java SE. Security Explorations. 2012.
- Inside the Java2 Virtual Machine. Bill Venners. 2000.
- Comparing Java and .NET Security. Nathanael Paul, David Evans. 2006.

### Acknowledgements
- Professors and partners in our lab
- Researchers in the security community
- Everyone who shared their papers online

Thank you!

### Q&A