### Bounded by the Droplet Request Rate from a Particular Entry Server

The latency can be significantly reduced by introducing peer-to-peer (P2P) communication among all participants. This P2P network allows data to be transferred directly between participants, thereby decreasing the load on CoverUp, particularly on the mix server. In effect, CoverUp would function similarly to a BitTorrent network, enhancing bandwidth multiple times over.

### Mix-Server as a Full HTTP Proxy

CoverUp can be easily extended to make the mix server act as a full HTTP proxy. This modification would allow voluntary participants to browse arbitrary web pages, serving as an immediate extension of CoverUp's capabilities.

### Custom Browser

Our evaluation of the timing leakage in CoverUp (Section 7) indicates that the browser extension used for the bi-directional channel has some timing leakages. After extensive observations and experiments, we conjecture that these leakages arise from the browser’s internal scheduler. The extension operates through several layers of heavy abstractions, making it non-trivial to develop extensions that are highly sensitive to timing. We believe that modifications to the browser code could address this issue, with all changes implemented in native code rather than high-level abstractions (such as JavaScript-based APIs). However, such modifications are non-trivial and require significant engineering effort, placing them outside the scope of our current research. Nevertheless, this could be an immediate follow-up to our work and would be a major contribution to privacy-preserving browsing applications.

### References

1. 2016 Q1 Demandware Shopping Index.
2. Chart of Signatures and Ratifications of Treaty 185.
3. E-commerce KPI Study: There’s (Finally) a Benchmark for That.
4. European Convention on Human Rights (ECHR).
5. Fourth Amendment.
6. Heise Article (in German): O2 Entschärft Drosselung: Neue Tarife immer mit mindestens 1 Mbit/s.
7. Katz v. United States, 389 U.S. 347 (1967).
8. Olmstead v. United States, 277 U.S. 438 (1928).
9. RFC 7323 - TCP Extensions for High Performance.
10. Tshark - The Wireshark Network Analyzer 2.0.0.
11. America’s Founding Documents — National Archives, 1776.
12. Directive 95/46/EC of the European Parliament and of the Council, Nov 1995.
13. Federal Constitution of the Swiss Confederation, Apr 1999.
14. Directive 2002/22/EC of the European Parliament and of the Council, Apr 2002.
15. Directive 2002/58/EC of the European Parliament and of the Council, July 2002.
16. Regulation (EC) No 2006/2004 of the European Parliament and of the Council, Dec 2004.
17. Consolidated Version of the Treaty on the Functioning of the European Union, May 2008.
18. EUR-Lex, May 2008.
19. Directive 2009/136/EC of the European Parliament and of the Council, Dec 2009.
20. RFC 918 - Post Office Protocol, Dec 2009.
21. Attitudes on Data Protection and Electronic Identity in the European Union, June 2011.
22. State of Privacy Report 2015.
23. Regulation (EU) 2016/679 of the European Parliament and of the Council, May 2016.
24. Artz, D. Digital Steganography: Hiding Data within Data. IEEE Internet Computing 5, 3 (2001), 75–80.
25. Backes, M., Manoharan, P., and Mohammadi, E. TUC: Time-sensitive and Modular Analysis of Anonymous Communication. In Proceedings of the 27th IEEE Computer Security Foundations Symposium (CSF) (2014), IEEE, pp. 383–397.
26. Bonneau, J., and Morrison, A. Finite-state Security Analysis of OTR Version 2.
27. Boyko, V. On the Security Properties of OAEP as an All-or-Nothing Transform. Springer Berlin Heidelberg, Berlin, Heidelberg, 1999, pp. 503–518.
28. Brubaker, C., Houmansadr, A., and Shmatikov, V. CloudTransport: Using Cloud Storage for Censorship-Resistant Networking. In International Symposium on Privacy Enhancing Technologies Symposium (2014), Springer, pp. 1–20.
29. Cao, Y., Li, S., and Wijmans, E. (Cross-)Browser Fingerprinting via OS and Hardware Level Features. In Proc. 25th Network and Distributed System Security Symposium (NDSS) (2017), Internet Society.
30. Che, P. H., Bakshi, M., and Jaggi, S. Reliable Deniable Communication: Hiding Messages in Noise. In Information Theory Proceedings (ISIT), 2013 IEEE International Symposium on (July 2013), pp. 2945–2949.
31. Chen, C., Asoni, D. E., Barrera, D., Danezis, G., and Perrig, A. Hornet: High-speed Onion Routing at the Network Layer. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (2015), ACM, pp. 1441–1454.
32. Corrigan-Gibbs, H., and Ford, B. Dissent: Accountable Anonymous Group Messaging. In Proceedings of the 17th ACM Conference on Computer and Communications Security (2010), ACM, pp. 340–350.
33. Daemen, J., and Rijmen, V. The Design of Rijndael: AES-The Advanced Encryption Standard. Springer Science & Business Media, 2013.
34. Danezis, G., Dingledine, R., and Mathewson, N. Mixminion: Design of a Type III Anonymous Remailer Protocol. In Proceedings of the Symposium on Security and Privacy (S&P) (2003), IEEE, pp. 2–15.
35. Dingledine, R., Mathewson, N., and Syverson, P. Tor: The Second-Generation Onion Router. Tech. rep., DTIC Document, 2004.
36. Dwork, C., McSherry, F., Nissim, K., and Smith, A. Calibrating Noise to Sensitivity in Private Data Analysis. In Proc. 10th Theory of Cryptography Conference (TCC) (2006), pp. 265–284.
37. Eggers, J. J., Bäuml, R., and Girod, B. Communications Approach to Image Steganography. In Electronic Imaging 2002 (2002), International Society for Optics and Photonics, pp. 26–37.
38. Feamster, N., Balazinska, M., Harfst, G., Balakrishnan, H., and Karger, D. R. Infranet: Circumventing Web Censorship and Surveillance. In USENIX Security Symposium (2002), pp. 247–262.
39. Geddes, J., Schuchard, M., and Hopper, N. Cover Your ACKs: Pitfalls of Covert Channel Censorship Circumvention. In Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security (2013), ACM, pp. 361–372.
40. Gilad, Y., and Herzberg, A. Spying in the Dark: TCP and Tor Traffic Analysis. In International Symposium on Privacy Enhancing Technologies Symposium (2012), Springer, pp. 100–119.
41. Google. Content Security Policy (CSP) - Google Chrome.
42. Google. Cross Origin XMLHttpRequest - Google Chrome.
43. GROUP, I. N. W. Convention on Cybercrime, Budapest, 23.xi.2001, Oct 1984.
44. Houmansadr, A., Nguyen, G. T., Caesar, M., and Borisov, N. Cirripede: Circumvention Infrastructure Using Router Redirection with Plausible Deniability. In Proceedings of the 18th ACM Conference on Computer and Communications Security (New York, NY, USA, 2011), CCS '11, ACM, pp. 187–200.
45. Houmansadr, A., Riedl, T. J., Borisov, N., and Singer, A. C. I Want My Voice to Be Heard: IP Over Voice-over-IP for Unobservable Censorship Circumvention. In NDSS (2013).
46. Jansen, R., Tschorsch, F., Johnson, A., and Scheuermann, B. The Sniper Attack: Anonymously Deanonymizing and Disabling the Tor Network. Tech. rep., DTIC Document, 2014.
47. Kamble, M. P. R., Waghamode, M. P. S., Gaikwad, M. V. S., and Hogade, M. G. B. Steganography Techniques: A Review. International Journal of Engineering 2, 10 (2013).
48. Le Blond, S., Choffnes, D., Zhou, W., Druschel, P., Ballani, H., and Francis, P. Towards Efficient Traffic-Analysis Resistant Anonymity Networks. In ACM SIGCOMM Computer Communication Review (2013), vol. 43, ACM, pp. 303–314.
49. Mackay, D. J. Fountain Codes. In Communications, IEE Proceedings- (2005), vol. 152, IET, pp. 1062–1068.
50. McPherson, R., Houmansadr, A., and Shmatikov, V. Covertcast: Using Live Streaming to Evade Internet Censorship. Proceedings on Privacy Enhancing Technologies 2016, 3 (2016), 212–225.
51. Molland, H., and Helleseth, T. An Improved Correlation Attack Against Irregular Clocked and Filtered Keystream Generators. In Annual International Cryptology Conference (2004), Springer, pp. 373–389.
52. The Tor Project. Tor Metrics, Nov 2016.
53. Rivest, R. L. All-or-Nothing Encryption and the Package Transform. Springer Berlin Heidelberg, Berlin, Heidelberg, 1997, pp. 210–218.
54. Shokrollahi, A. Raptor Codes. IEEE Transactions on Information Theory 52, 6 (2006), 2551–2567.
55. Sun, Y., Edmundson, A., Vanbever, L., Li, O., Rexford, J., Chiang, M., and Mittal, P. Raptor: Routing Attacks on Privacy in Tor. In 24th USENIX Security Symposium (USENIX Security 15) (2015), pp. 271–286.
56. Sundararajan, J. K., Shah, D., and Médard, M. ARQ for Network Coding. In Information Theory, 2008. ISIT 2008. IEEE International Symposium on (2008), IEEE, pp. 1651–1655.
57. Van den Hooff, J., Lazar, D., Zaharia, M., and Zeldovich, N. Vuvuzela: Scalable Private Messaging Resistant to Traffic Analysis. In Proceedings of the 25th Symposium on Operating Systems Principles (2015), ACM, pp. 137–152.
58. Wang, T., and Goldberg, I. Improved Website Fingerprinting on Tor. In Proceedings of the 12th ACM Workshop on Workshop on Privacy in the Electronic Society (2013), ACM, pp. 201–212.
59. Wang, X., Chen, S., and Jajodia, S. Network Flow Watermarking Attack on Low-Latency Anonymous Communication Systems. In 2007 IEEE Symposium on Security and Privacy (SP'07) (2007), IEEE, pp. 116–130.
60. Zhou, W., Houmansadr, A., Caesar, M., and Borisov, N. Sweet: Serving the Web Tunnels. arXiv preprint arXiv:1211.3191 (2012).

### 13. Preliminaries

In this section, we describe existing tools and techniques that have been used in our proposed system, CoverUp.

#### 13.1 Fountain Code

Fountain codes [49, 56] are a class of forward error correction (FEC) codes with the following properties:

- **Arbitrary Sequence Generation**: Any sequence of encoding symbols can be generated from a given set of source symbols (input data).
- **Recovery from Subsets**: Original source symbols can be recovered from any subset of encoding symbols, provided the subset size exceeds a threshold value \( T \).
- **Order Independence**: Encoding symbols can be delivered in any order.
- **Variable Code Rate**: Fountain codes do not have a fixed code rate.

In this paper, we use a bit-wise XOR (⊕) based fountain code with an error detection mechanism. To illustrate, consider an empty glass for water. A fountain emits input data encoded in a large number of droplets in a steady stream. Anyone can collect these droplets in a glass. If one thinks the glass is sufficiently filled, they can attempt to reassemble the data from the collected droplets. If the amount of droplets is insufficient, one must wait longer to collect more droplets and try again later.

Our specific implementation of fountain codes is not optimal. More efficient fountain codes, such as Raptor [54], exist in the literature but are often protected by intellectual property rights.

#### 13.2 All-or-Nothing Transformation

All-or-nothing transformation (AONT) is an encryption mode where data can only be decrypted if all the encrypted data is known. More precisely, "An AONT is an unkeyed, invertible, randomized transformation, with the property that it is hard to invert unless all of the output is known." [27].

We modified the AONT scheme proposed by Rivest [53], which encrypts all data using a symmetric key cryptography algorithm (AES-128 [33] in Cipher Block Chaining (CBC) mode) and appends a new block where the encryption key is XORed (⊕) with the 128-bit truncated SHA-256 hashes of all the encrypted blocks. This ensures that one needs all encrypted data (or at least its hash) to extract the decryption key from the last block.

1. **Input Message Blocks**: \( m_1, m_2, \ldots, m_n \)
2. **Choose Random Key**: \( K \leftarrow \{0,1\}^{128} \) for AES-128.
3. **Compute Output Text Sequence** \( m'_1, m'_2, \ldots, m'_n, m'_{\text{key}} \) as follows:
   - Let \( m'_i = \text{Enc}(K, m_i) \) for all \( i \in \{1, \ldots, n\} \) using CBC mode.
   - Let \( m'_{\text{key}} = K \oplus h_1 \oplus h_2 \oplus \ldots \oplus h_n \) where \( h_i[1, \ldots, 128] \); \( h_i = \text{SHA-256}(m_i) \) for all \( i \in \{1, \ldots, n\} \).

This ensures that the decryption key can only be extracted if all encrypted data (or at least its hash) is available.