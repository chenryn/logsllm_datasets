### Active Countermeasures Against Worm Propagation

It is possible to actively counter worm propagation by immunizing infected hosts that contact our virtual honeypots. Similar to the approach taken by Moore et al. [17], we can model the effect of immunization on worm propagation using the classic SIR (Susceptible-Infected-Recovered) epidemic model [13]. This model posits that the number of newly infected hosts increases linearly with the product of the number of infected hosts, the fraction of susceptible hosts, and the contact rate. The immunization process is represented by a decrease in new infections, which is linear in the number of infected hosts.

The SIR model is defined by the following differential equations:

\[
\frac{ds}{dt} = -\beta i(t)s(t)
\]

\[
\frac{di}{dt} = \beta i(t)s(t) - \gamma i(t)
\]

\[
\frac{dr}{dt} = \gamma i(t)
\]

where at time \( t \), \( i(t) \) is the fraction of infected hosts, \( s(t) \) is the fraction of susceptible hosts, and \( r(t) \) is the fraction of immunized hosts. The propagation speed of the worm is characterized by the contact rate \( \beta \), and the immunization rate is represented by \( \gamma \).

### Simulation Parameters

We simulate worm propagation based on the parameters for a Code-Red-like worm [15, 17]. The simulation includes 360,000 susceptible machines in a 2^32 address space, with an initial seed of 150 infected machines. Each worm launches 50 probes per second, and we assume that the immunization of an infected machine takes one second after it has contacted a honeypot.

The simulation measures the effectiveness of using active immunization by virtual honeypots. Honeypots start working after a time delay, representing the time required to detect the worm and install the immunization code. We expect that the immunization code can be prepared before a vulnerability is actively exploited.

Figure 11 illustrates the worm propagation resulting from varying numbers of instrumented honeypots. The left graph shows the results if the honeypots are brought online one hour after the worm starts spreading, while the right graph shows the results if the honeypots can be activated within twenty minutes. If we wait for an hour, all vulnerable machines on the Internet will be infected. However, if we start the honeypots after twenty minutes, a deployment of about 262,000 honeypots can stop the worm from spreading to all susceptible hosts. Ideally, we should automatically detect new worms and immunize infected machines when a new worm is detected.

Alternatively, it would be possible to scan the Internet for vulnerable systems and remotely patch them. For ethical reasons, this is probably unfeasible. However, if we can reliably detect an infected machine with our virtual honeypot framework, then active immunization might be an appropriate response. For the Blaster worm, this idea has been realized by Oudot et al. [18].

### Spam Prevention Using Honeyd

The Honeyd framework can be used to understand how spammers operate and to automate the identification of new spam, which can then be submitted to collaborative spam filters. Generally, spammers abuse two Internet services: proxy servers [10] and open mail relays. Open proxies are often used to connect to other proxies or to submit spam email to open mail relays, anonymizing the spammer's identity. An open mail relay accepts email from any sender address to any recipient address, allowing spammers to cause the mail relay to deliver the spam on their behalf.

To understand how spammers operate, we use the Honeyd framework to instrument networks with open proxy servers and open mail relays. We leverage Honeyd’s GRE tunneling capabilities to tunnel several C-class networks to a central Honeyd host. Our network space is populated with randomly chosen IP addresses and a random selection of services, including open proxies and open mail relays.

When a spammer attempts to send spam email via an open proxy or an open mail relay, the email is automatically redirected to a spam trap. The spam trap then submits the collected spam to a collaborative spam filter. At the time of writing, Honeyd has received and processed more than six million spam emails from over 1,500 different IP addresses. A detailed evaluation is the subject of future work.

Figure 12 demonstrates how the Honeyd framework can be used to instrument networks to automatically capture spam and submit it to collaborative filtering systems.

### Related Work

Cohen’s Deception Toolkit provides a framework to write services that seem to contain remotely exploitable vulnerabilities [6]. Honeyd operates at a higher level by providing a framework to create virtual honeypots that can run any number of services. The Deception Toolkit could be one of the services running on a virtual honeypot.

There are several areas of research in TCP/IP stack fingerprinting, including effective methods to classify the remote operating system through active probing or passive analysis of network traffic, and defeating TCP/IP stack fingerprinting by normalizing network traffic.

Fyodor’s Nmap uses TCP and UDP probes to determine the operating system of a host [9]. Nmap collects the responses of a network stack to different queries and matches them to a signature database to determine the operating systems of the queried host. Nmap’s fingerprint database is extensive and serves as a reference for operating system personalities in Honeyd.

P0f [29] is a tool that passively analyzes network packets to identify the remote operating system. The TCP/IP flags inspected by P0f are similar to the data collected in Nmap’s fingerprint database.

Smart et al. show how to defeat fingerprinting tools by scrubbing network packets to remove artifacts identifying the remote operating system [22]. This approach is similar to Honeyd’s personality engine, which changes network packets to contain artifacts of the configured operating system, rather than removing identifiable information.

High-interaction virtual honeypots can be constructed using User Mode Linux (UML) or VMware [27]. One example is ReVirt, which can reconstruct the state of the virtual machine for any point in time [7], aiding forensic analysis after the virtual machine has been compromised. Although high-interaction virtual honeypots can be fully compromised, it is not easy to instrument thousands of such machines due to their overhead. The Honeyd framework, however, allows us to instrument unallocated network space with thousands of virtual honeypots. Additionally, we may use a combination of Honeyd and virtual machines to benefit from both approaches, with Honeyd providing network facades and selectively proxying connections to services provided by high-interaction virtual machines.

### Conclusion

Honeyd is a framework for creating virtual honeypots that mimics the network stack behavior of operating systems to deceive fingerprinting tools like Nmap and Xprobe. We have provided an overview of Honeyd’s design and architecture, showing how its personality engine can modify packets to match the fingerprints of other operating systems and how it is possible to create arbitrary virtual routing topologies.

Our performance measurements indicate that a single 1.1 GHz Pentium III can simulate thousands of virtual honeypots with an aggregate bandwidth of over 30 MBit/s and sustain over two thousand TCP transactions per second. Experimental evaluations have shown that Honeyd is effective in creating virtual routing topologies and successfully fooling fingerprinting tools.

We have demonstrated how the Honeyd framework can be deployed to help in various areas of system security, such as worm detection, worm countermeasures, and spam prevention. Honeyd is freely available as source code and can be downloaded from [http://www.citi.umich.edu/u/provos/honeyd/](http://www.citi.umich.edu/u/provos/honeyd/).

### Acknowledgments

I thank Marius Eriksen, Peter Honeyman, Patrick McDaniel, and Bennet Yee for careful reviews and suggestions. Jamie Van Randwyk, Dug Song, and Eric Thomas also provided helpful suggestions and contributions.

### References

[1] Oﬁr Arkin and Fyodor Yarochkin. Xprobe v2.0: A “Fuzzy” Approach to Remote Active Operating System Fingerprinting. www.xprobe2.org, August 2002.

[2] Steven M. Bellovin. Security problems in the TCP/IP protocol suite. Computer Communications Review, 19:2:32–48, 1989.

[3] Smoot Carl-Mitchell and John S. Quarterman. Using ARP to Implement Transparent Subnet Gateways. RFC 1027, October 1987.

[4] CERT. Cert advisory ca-2001-26 nimda worm. www.cert.org/advisories/CA-2001-26.html, September 2001.

[5] CERT. Cert advisory ca-2003-20 w32/blaster worm. www.cert.org/advisories/CA-2003-20.html, August 2003.

[6] Fred Cohen. The Deception Toolkit. http://all.net/dtk.html, March 1998. Viewed on May 12th, 2004.

[7] George W. Dunlap, Samuel T. King, Sukru Cinar, Murtaza Basrai, and Peter M. Chen. ReVirt: Enabling Intrusion Analysis through Virtual-Machine Logging and Replay. In Proceedings of the 2002 Symposium on Operating Systems Design and Implementation, December 2002.

[8] Kevin Fall. Network Emulation in the VINT/NS Simulator. In Proceedings of the fourth IEEE Symposium on Computers and Communications, July 1999.

[9] Fyodor. Remote OS Detection via TCP/IP Stack Fingerprinting. www.nmap.org/nmap/nmap-fingerprinting-article.html, October 1998.

[10] S. Glassman. A Caching Relay for the World Wide Web. In Proceedings of the First International World Wide Web Conference, pages 69–76, May 1994.

[11] S. Hanks, T. Li, D. Farinacci, and P. Traina. Generic Routing Encapsulation (GRE). RFC 1701, October 1994.

[12] S. Hanks, T. Li, D. Farinacci, and P. Traina. Generic Routing Encapsulation over IPv4 networks. RFC 1702, October 1994.

[13] Herbert W. Hethcote. The Mathematics of Infectious Diseases. SIAM Review, 42(4):599–653, 2000.

[14] C. Kreibich and J. Crowcroft. Automated NIDS Signature Generation using Honeypots. Poster paper, ACM SIGCOMM 2003, August 2003.

[15] D. Moore, C. Shannon, and J. Brown. Code-Red: A Case Study on The Spread and Victims of an Internet Worm. In Proceedings of the 2nd ACM Internet Measurement Workshop, pages 273–284. ACM Press, November 2002.

[16] David Moore, Vern Paxson, Stefan Savage, Colleen Shannon, Stuart Staniford, and Nicholas Weaver. Inside the Slammer Worm. IEEE Security and Privacy, 1(4):33–39, July 2003.

[17] David Moore, Colleen Shannon, Geoffrey Voelker, and Stefan Savage. Internet Quarantine: Requirements for Containing Self-Propagating Code. In Proceedings of the 2003 IEEE Infocom Conference, April 2003.

[18] Laurent Oudot. Fighting worms with honeypots: honeyd vs msblast.exe. lists.insecure.org/lists/honeypots/2003/Jul-Sep/0071.html, August 2003. Honeypots mailinglist.

[19] Vern Paxson. Bro: A System for Detecting Network Intruders in Real-Time. In Proceedings of the 7th USENIX Security Symposium, January 1998.

[20] Jon Postel. Transmission Control Protocol. RFC 793, September 1981.

[21] Thomas Ptacek and Timothy Newsham. Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection. Technical report, Secure Networks, August 1998.

[22] Matthew Smart, G. Robert Malan, and Farnam Jahanian. Defeating TCP/IP Stack Fingerprinting. In Proceedings of the 9th USENIX Security Symposium, August 2000.

[23] Dug Song, Robert Malan, and Robert Stone. A Snapshot of Global Worm Activity. Technical report, Arbor Networks, November 2001.

[24] Lance Spitzner. Honeypots: Tracking Hackers. Addison Wesley Professional, September 2002.

[25] Stuart Staniford, Vern Paxson, and Nicholas Weaver. How to 0wn the Internet in your Spare Time. In Proceedings of the 11th USENIX Security Symposium, August 2002.

[26] W. R. Stevens. TCP/IP Illustrated, volume 1. Addison-Wesley, 1994.

[27] Jeremy Sugerman, Ganesh Venkitachalam, and Beng-Hong Lim. Virtualizing I/O Devices on VMware Workstation’s Hosted Virtual Machine Monitor. In Proceedings of the Annual USENIX Technical Conference, pages 25–30, June 2001.

[28] David Wagner and Paolo Soto. Mimicry Attacks on Host-Based Intrusion Detection Systems. In Proceedings of the 9th ACM Conference on Computer and Communications Security, November 2002.

[29] Michal Zalewski and William Stearns. Passive OS Fingerprinting Tool. www.stearns.org/p0f/README. Viewed on January 12th, 2003.