以下是经过优化后的参考文献列表，使其更加清晰、连贯和专业：

1. Leitch, J. (2011). Process Hollowing. *AutoSecTools*. Retrieved from: https://www.autosectools.com/Process-Hollowing.pdf.
2. Lenoir, J. (2015). Implementing Your Own Generic Unpacker. *HITB Singapore 2015*.
3. Lindorfer, M., Di Federico, A., Maggi, F., Comparetti, P. M., & Zanero, S. (2012). Lines of Malicious Code: Insights into the Malicious Software Industry. In *Proceedings of the 28th Annual Computer Security Applications Conference (ACSAC’12)*.
4. Liu, L., Ming, J., Wang, Z., Gao, D., & Jia, C. (2009). Denial-of-Service Attacks on Host-Based Generic Unpackers. In *Proceedings of the 11th International Conference on Information and Communications Security (ICICS’09)*.
5. Luk, C.-K., Cohn, R., Muth, R., Patil, H., Klauser, A., Lowney, G., Wallace, S., Reddi, V. J., & Hazelwood, K. (2005). Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation. In *Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI’05)*.
6. Lundsgård, G., & Nedström, V. (2016). Bypassing Modern Sandbox Technologies. Master’s thesis, Lund University.
7. Lyda, R., & Hamrock, J. (2007). Using Entropy Analysis to Find Encrypted and Packed Malware. *IEEE Security and Privacy*, 5(2).
8. Mariani, S., Fontana, L., Gritti, F., & D’Alessio, S. (2016). PinDemonium: A DBI-Based Generic Unpacker for Windows Executables. *Black Hat USA 2016*.
9. Martignoni, L., Christodorescu, M., & Jha, S. (2007). OmniUnpack: Fast, Generic, and Safe Unpacking of Malware. In *Proceedings of the 23rd Annual Computer Security Applications Conference (ACSAC’07)*.
10. Mazzeo, A. (2016). Custom LoadLibrary Implementation. GitHub. Retrieved from: https://github.com/gbmaster/loadLibrary.
11. Microsoft. (2018). Linking Explicit. *Microsoft Developer Network (MSDN)*. Last reviewed: 05/08/2018. Retrieved from: https://msdn.microsoft.com/en-us/library/784bt7z7.aspx.
12. Microsoft. (2018). Linking Implicitly. *Microsoft Developer Network (MSDN)*. Last reviewed: 05/08/2018. Retrieved from: https://msdn.microsoft.com/en-us/library/d14wsce5.aspx.
13. Miller, M. (2008). Using Dual-Mappings to Evade Automated Unpackers. *Uninformed*. Retrieved from: http://www.uninformed.org/?v=10&a=1.
14. Min, B., & Varadharajan, V. (2015). Secure Dynamic Software Loading and Execution Using Cross Component Verification. In *Proceedings of the 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN’15)*.
15. Min, B., & Varadharajan, V. (2016). Rethinking Software Component Security: Software Component Level Integrity and Cross Verification. *The Computer Journal*, 59(11), 1735–1748.
16. Ming, J., Xu, D., Jiang, Y., & Wu, D. (2017). BinSim: Trace-Based Semantic Binary Diffing via System Call Sliced Segment Equivalence Checking. In *Proceedings of the 26th USENIX Conference on Security Symposium (USENIX Security’17)*.
17. Morgenstern, M., & Marx, A. (2008). Runtime Packer Testing Experiences. *2nd International CARO Workshop*.
18. Morgenstern, M., & Pilz, H. (2010). Useful and Useless Statistics About Viruses and Anti-Virus Programs. *4th International CARO Workshop*.
19. Nakashima, E., & Rucker, P. (2017, December 19). U.S. Declares North Korea Carried Out Massive WannaCry Cyberattack. *The Washington Post*.
20. Nataraj, L. (2013). Nearly 70% of Packed Windows System Files Are Labeled as Malware. *UCSB Sarvam Blog*.
21. NO-MERCY. (2015). Top Maliciously Used APIs. *RST Forums*. Retrieved from: https://rstforums.com/forum/topic/95273-top-maliciously-used-apis.
22. Oberheide, J., Bailey, M., & Jahanian, F. (2009). PolyPack: An Automated Online Packing Service for Optimal Antivirus Evasion. In *Proceedings of the 3rd USENIX Conference on Offensive Technologies (WOOT’09)*.
23. O'Kane, P., Sezer, S., & McLaughlin, K. (2011). Obfuscation: The Hidden Malware. *IEEE Security and Privacy*, 9(5).
24. Oktavianto, D., & Muhardianto, I. (2013). *Cuckoo Malware Analysis: Analyze Malware Using Cuckoo Sandbox*. Packt Publishing Ltd.
25. Oreans Technologies. (2018). Themida: Advanced Windows Software Protection System. *Oreans Technologies*. Last reviewed: 05/08/2018. Retrieved from: https://www.oreans.com/themida.php.
26. Panda Security. (2017). *PandaLabs Annual Report 2017*. Retrieved from: https://www.pandasecurity.com/mediacenter/src/uploads/2017/11/PandaLabs_Annual_Report_2017.pdf.
27. Perdisci, R., Lanzi, A., & Lee, W. (2008). Classification of Packed Executables for Accurate Computer Virus Detection. *Pattern Recognition Letters*, 29(14).
28. Phillips, I. (2006). Windows Vista Security: First Impressions. *Information Security Technical Report*, 11(4), 176–185.
29. Polino, M., Continella, A., Mariani, S., D’Alessio, S., Fontata, L., Gritti, F., & Zanero, S. (2017). Measuring and Defeating Anti-Instrumentation-Equipped Malware. In *Proceedings of the 14th Conference on Detection of Intrusions and Malware and Vulnerability Assessment (DIMVA’17)*.
30. Quist, D., & Valsmith. (2007). Covert Debugging: Circumventing Software Armoring Techniques. *Black Hat USA 2007*.
31. Raber, J., & Krumheuer, B. (2009). QuietRIATT: Rebuilding the Import Address Table Using Hooked DLL Calls. *Black Hat DC 2009*.
32. Rival, M. (2018). Dynamic-Link Library Hijacking. *Exploit-DB*. Last reviewed: 05/08/2018. Retrieved from: https://www.exploit-db.com/docs/31687.pdf.
33. Robbins, J. (1999). Debugging Windows Based Applications Using WinDbg. *Microsoft Systems Journal*.
34. Roundy, K. A., & Miller, B. P. (2010). Hybrid Analysis and Control of Malware. In *Proceedings of the 13th International Conference on Recent Advances in Intrusion Detection (RAID’10)*.
35. Roundy, K. A., & Miller, B. P. (2013). Binary-Code Obfuscations in Prevalent Packer Tools. *Comput. Surveys*, 46(1).
36. Royal, P., Halpin, M., Dagon, D., Edmonds, R., & Lee, W. (2006). PolyUnpack: Automating the Hidden-Code Extraction of Unpack-Executing Malware. In *Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC’06)*.
37. Russinovich, M. E., Solomon, D. A., & Ionescu, A. (2012). *Windows Internals (6th Edition)*. Microsoft Press.
38. Sharif, M., Lanzi, A., Giffin, J., & Lee, W. (2009). Automatic Reverse Engineering of Malware Emulators. In *Proceedings of the 30th IEEE Symposium on Security and Privacy (S&P’09)*.
39. Sharif, M., Yegneswaran, V., Saidi, H., Porras, P., & Lee, W. (2008). Eureka: A Framework for Enabling Static Malware Analysis. In *Proceedings of the 13th European Symposium on Research in Computer Security (ESORICS’08)*.
40. Shirani, P., Wang, L., & Debbabi, M. (2017). BinShape: Scalable and Robust Binary Library Function Identification Using Function Shape. In *Proceedings of the 14th Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA’17)*.
41. Sikorski, M., & Honig, A. (2012). *Practical Malware Analysis: The Hands-On Guide to Dissecting Malicious Software*. No Starch Press.
42. Sintsov, A. (2010). Writing JIT-Spray Shellcode for Fun and Profit. *DigitÐřl Security Research Group (DSecRG)*.
43. Sparks, S., & Butler, J. (2005). Shadow Walker: Raising the Bar for Windows Rootkit Detection. *Black Hat Japan 2005*.
44. Stewart, J. (2007). Unpacking with OllyBonE. Retrieved from: http://www.joestewart.org/ollybone.
45. Sun, H. M., Lin, Y. H., & Wu, M. F. (2006). API Monitoring System for Defeating Worms and Exploits in MS-Windows System. In *Proceedings of the 11th Australasian Conference on Information Security and Privacy (ACISP’06)*.
46. Szappanos, G. (2007). Exepacker Blacklisting. *Virus Bulletin*.
47. Taylor, B. (2017). Extortion-Based Cyber Attacks: The Next Evolution in Profit-Motivated Attack Strategies. *Help Net Security*. Retrieved from: https://www.helpnetsecurity.com/2017/11/09/extortion-based-cyber-attacks.
48. Check Point Research Team. (2017). May’s Most Wanted Malware: Fireball and Wannacry Impact More Than 1 in 4 Organizations Globally. *Check Point Blog*. Retrieved from: https://blog.checkpoint.com/2017/06/20/mays-wanted-malware-fireball-wannacry-impact-1-4-organizations-globally.
49. Check Point Research Team. (2018). March’s Most Wanted Malware: Cryptomining Malware That Works Even Outside the Web Browser on the Rise. *Check Point Blog*. Retrieved from: https://blog.checkpoint.com/2018/04/13/marchs-wanted-malware-cryptomining-malware-works-even-outside-web-browser-rise.
50. Ugarte-Pedrero, X., Balzarotti, D., Santos, I., & Bringas, P. G. (2015). SoK: Deep Packer Inspection: A Longitudinal Study of the Complexity of Runtime Packers. In *Proceedings of the 36th IEEE Symposium on Security & Privacy (S&P’15)*.
51. Ugarte-Pedrero, X., Balzarotti, D., Santos, I., & Bringas, P. G. (2016). RAMBO: Run-Time Packer Analysis with Multiple Branch Observation. In *Proceedings of the 13th International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA’16)*.
52. Ugarte-Pedrero, X., Santos, I., Sanz, B., Laorden, C., & Garcia Bringas, P. (2012). Countering Entropy Measure Attacks on Packed Software Detection. In *Proceedings of the 2012 IEEE Consumer Communications and Networking Conference (CCNC’12)*.
53. Vigna, G., & Balzarotti, D. (2018). When Malware is Packing Heat. *USENIX Enigma 2018*.
54. Willems, C., Holz, T., & Freiling, F. (2007). Toward Automated Dynamic Malware Analysis Using CWSandbox. *IEEE Security & Privacy*, 5(2).
55. Yadegari, B., Johannesmeyer, B., Whitely, B., & Debray, S. (2015). A Generic Approach to Automatic Deobfuscation of Executable Code. In *Proceedings of the 36th IEEE Symposium on Security & Privacy (S&P’15)*.
56. Yan, L.-K., Jayachandra, M., Zhang, M., & Yin, H. (2012). V2E: Combining Hardware Virtualization and Software Emulation for Transparent and Extensible Malware Analysis. In *Proceedings of the 8th ACM SIGPLAN/SIGOPS Conference on Virtual Execution Environments (VEE’12)*.
57. Yan, W., Zhang, Z., & Ansari, N. (2008). Revealing Packed Malware. *IEEE Security and Privacy*, 6(5).
58. Yavo, U., & Bitton, T. (2016). Captain Hook: Pirating AVs to Bypass Exploit Mitigations. *Black Hat USA 2016*.
59. Zeltser, L. (2017). The History of Fileless Malware – Looking Beyond the Buzzword. *Zeltser Security*. Retrieved from: https://zeltser.com/fileless-malware-beyond-buzzword.

### 附录

**图9：劫持Windows网络管理DLL（wsock32.dll）并替换为自定义DLL。**

**图10：LoadLibrary的调用链。LoadLibrary首先解析加载DLL的绝对路径，包括从特定注册表键中读取核心DLL的路径。然后，LoadLibrary将加载DLL的完整路径传递给下一级API，并最终调用NtMapViewOfSection。**

**表5：标准路径搜索顺序。**
| 顺序 | 路径 |
| --- | --- |
| 1 | 应用程序加载目录 |
| 2 | 系统目录 |
| 3 | 16位系统目录 |
| 4 | Windows目录 |
| 5 | 当前目录 |
| 6 | PATH环境变量 |

**表6：BinUnpack在处理良性程序时引入的开销。**
| 样本 | 任务列表 (ms) | WinRAR (ms) | WinPcap (ms) | IE (ms) | Firefox (ms) | Chrome (ms) |
| --- | --- | --- | --- | --- | --- | --- |
| 良性 | 109 | 10624 | 3620 | 254 | 231 | 161 |
| BinUnpack | 0.24 | 30.57 | 0.45 | 0.65 | 1.97 | 2.39 |
| 相对延迟 | 0.22% | 0.29% | 0.01% | 0.26% | 0.85% | 1.48% |

**算法2：MyNtMapViewOfSection的实现。**

```plaintext
函数 MyNtMapViewOfSection(SectionHandle, ... BaseAddress, ...)
/* 从SectionHandle解析文件名 */
FileName <- ResolveFileName(SectionHandle)
如果 FileName = "c:\windows\system32\kernel32.dll" 则
    /* 将自制DLL "MyKernel32.dll" 映射到内存地址 mapped_address */
    mapped_address <- MapFile(MyKernel32.dll)
    /* 设置“BaseAddress”为“mapped_address” */
    *BaseAddress <- mapped_address
    /* 让LdrpMapDll函数重新加载自制的kernel32.dll */
    返回 STATUS_IMAGE_NOT_AT_BASE
否则
    返回 NtMapViewOfSection(SectionHandle, ... BaseAddress, ...)
结束 如果
结束 函数
```

**图11：NSIS打包勒索软件的典型攻击过程。**

**表7：钩子逃避抵抗评估结果。**
“√”表示API监视器/沙箱对该逃避类型具有抵抗力。

| 打包器 | Armadillo | Pespin | Asprotect | Pelock | Yoda's Protector | Yoda's Crypter | PEP | Enigma | Themida | Cerber's packer | Cerber's packer | 自定义UPX | 自定义UPX | 自定义UPX |
| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
| 逃避类型 | 子进程 | 子进程 | 代码窃取 | 代码窃取 | 代码窃取 | 代码窃取 | 代码窃取 | 代码窃取 | 代码窃取 | 进程掏空 | 崩溃挂钩模块 | 自定义加载器 [57] | 隐形加载器 [39] | DLL完整性检查 |
| Detours | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ |
| CWSandbox | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ |
| Cuckoo | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ |
| BinUnpack | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ | √ |