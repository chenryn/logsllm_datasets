# The SOA/XML Threat Model and New XML/SOA/Web 2.0 Attacks & Threats

**Speaker: Steve Orrin, Director of Security Solutions, SSG-SPI, Intel Corp.**

## Agenda
- Introduction to SOA/Web 2.0 and the Security Challenge
- The XML/SOA Threat Model
- Details on XML/Web Services & SOA Threats
- Next Generation and Web 2.0 Threats
- The Evolving Enterprise and Environment
- Summary
- Q&A

## What is SOA?
Service-Oriented Architecture (SOA) is a design paradigm that consists of a collection of services. These services communicate with each other, either by passing simple data or executing applications directly. They can also coordinate activities involving two or more services.

### What is a Service?
- A service is a well-defined, self-contained function that operates independently of the context or state of other services.

### What is a Web Service?
- A web service is typically based on XML and SOAP, described using WSDL and schemas. In most SOA implementations, a directory system called UDDI is used for web service discovery and central publication.

### What is Web 2.0?
Web 2.0, a term coined by Tim O'Reilly and popularized at the first Web 2.0 conference in 2004, refers to a second generation of web-based communities and hosted services. These include social networking sites, wikis, and folksonomies, which facilitate collaboration and sharing among users. The term does not indicate a new version of the World Wide Web but rather a shift in how developers and end-users use the web as a platform.

#### Characteristics of Web 2.0
- Transition from isolated information silos to sources of content and functionality, becoming computing platforms serving web applications to end-users.
- A social phenomenon characterized by open communication, decentralization of authority, freedom to share and reuse, and "the market as a conversation."
- Enhanced organization and categorization of content, emphasizing deep linking.

**Source: Wikipedia, the free encyclopedia**
[http://en.wikipedia.org/wiki/Web_2.0](http://en.wikipedia.org/wiki/Web_2.0)

## It’s a SOA World After All…
- Fortune 1000 companies are deploying datacenter SOA and web services applications.
- The average XML network traffic load is expected to grow from 24.4% to 35.5% next year.
- The number of web service applications across enterprise companies has increased by 300% over the last year.
- Gartner predicts that 46% of the IT professional services market will be related to web services by 2010.
- Web services are now the preferred choice for application development, although performance barriers prevent widespread implementation.

### Why SOA? – The Cruel Reality
- **Screen Scrape**
- **Message Queue**
- **Download File**
- **Transaction File**
- **ORB**
- **CICS Gateway**
- **APPC**
- **RPC**
- **Sockets**
- **Application**

## Where do SOA Apps & Web 2.0 Data Come From?
- EDI Replacement
- Decoupling of Databases from Client/Server Applications
- EAI & Portals
- e-Commerce
- ERP/CRM/SFA/SCM
- Social Networking & Collaboration
- End-User Data
- EAI

### The SOA Implementation Roadmap
- **Example of Services Server Stack**
  - **Operating System**: Linux, Solaris, Windows, Apple
  - **OS Services & Libraries**: NPTL, OpenLDAP
  - **Security Libraries**: PHP
  - **Hardware**: NuSOAP
  - **Web Services and RIAs**: Apache, Jetty
  - **Database**: MySQL, PostgreSQL
  - **Languages**: Perl, Ruby
  - **Base Support for Web Services**: C/C++, Java
  - **Web Service Frameworks**: Axis, SOAP4R, SOAP::Lite, gSOAP
  - **Custom Tools**: Performance Analyzer
  - **Web Service Instrumentation Tools**
  - **Other**: Compilers, Vmware/Xen/KVM
  - **ESB, Message Queuing, GWT**
  - **This part is flexible**

### Some Typical Web 2.0 Server Environments
- **LAMP**: Linux, Apache, MySQL, PHP (or Perl or Python)
- **MAMP**: Mac OS X, Apache, MySQL, PHP
- **LAMR**: Linux, Apache, MySQL, Ruby
- **WAMP**: Microsoft Windows, Apache, MySQL, PHP
- **WIMP**: Windows, IIS, MySQL, and PHP
- **WISA**: Windows, IIS, Microsoft SQL Server, ASP
- **WISC**: Windows, IIS, SQL Server, and C#
- **WISP**: Windows, IIS, SQL Server, and PHP
- **JOLT**: Java, Oracle, Linux, and Tomcat
- **STOJ**: Solaris, Tomcat, Oracle, and Java

## SOA Business Drivers
- **Effective Reuse of IT Applications & Systems**
  - IT layers & applications
  - Across organizational and trust boundaries
- **Reduce IT Complexity**
  - Implementation (language/platform agnostic)
  - Standards-based application interaction
- **Faster IT Results at Lower Costs**
  - Easier integration with fellow travelers and internal systems
  - Less custom software/adapters/B2B gateways
  - Easier to introduce new services

### Why is Security So Important in SOA?
- **Drastic & Fundamental Shift in Authentication & Authorization Models**
- **Real Business Apps Affected**
- **Non-Repudiation**
- **Externalization of Application Functionality and Loss of Internal Controls**
- **Next-Generation Threats and New Risks**

### Increasing Risks
- **Time-to-Market**
- **Complexity is Growing**
  - Mixed Bag of Standards
  - Interoperability, reuse, etc.
- **Increasing Business Risks**
  - Continued Rise in Malicious Activity
  - Government Scrutiny and Regulation Pressures (HIPAA, GLBA, SB1386, etc.)
  - Liability Precedents for Security Incidents

### The New Frontier
- **Many attacks occur at the Application/Service Layers**

#### Reported Vulnerabilities & Incidents
- **Vulnerabilities Reported**
- **Incidents Reported**

**Source: CERT & CSI/FBI Survey**

### Old Attacks Still Valid
- **Common Web Vulnerabilities**
- **Injection Attacks**
- **Buffer Overflow**
- **Denial of Service**

### The New Manipulation Attacks
- **Entity and Referral Attacks**
- **DTD and Schema Attacks**

### The Next Generation Attacks
- **Web Service Enabled Application Attacks**
- **Multi-Phase Attacks**

#### Specific Attacks
- **XPATH Injection**
- **XML/Web Services Attacks**
- **Cross-Site Scripting in Client-Side XML Documents**
- **SAP/BAPI Attacks via SOAP**
- **Endless Loop Denial of Service Attacks**
- **Schema Redirection Attacks**
- **SQL Injection in XQuery**
- **Entity Expansion Attacks**
- **Command Injection SOAP Attacks**

## SOA/XML Threat Model
### Payload / Content Threats
- **Back End Target**
  - Examples: SQL Injection, BAPI Protocol Attack, Universal Tunnel Misuse
- **End User Target**
  - Examples: XSS, Malicious Active Content

### XML Misuse/Abuse
- **Examples: XML Injection, XPath Injection, XQuery Injection, XML Structure Manipulation**
- **Examples: Entity Expansion, Referral Attacks, Schema Poisoning**

### Infrastructure Attacks
- **Examples: Buffer Overflow of Server, DNS Poisoning for CA Server**

### XML/SOA Threat Model
#### Payload / Content Threats
- **Payload and Content threats use XML as a carrier for malicious code and content.**
- **Many existing web and application layer threats can leverage XML formats for delivery.**
- **Sub-Categories:**
  - **Back End Target**: The attacker uses the XML flow/message to attack a target application.
  - **End User Target**: Targets the browser or client application of the service end user.
- **Key Differentiator**: XML documents are often persistent, leading to longer-term threats.

#### XML Misuse/Abuse
- **XML structures and methods are misused to cause malicious outcomes.**
- **Example: XPath Injection**
  - **Blind XPath Injection Attack**: The attacker leverages advanced XPath querying to perform deeper invasions than SQL injection.

#### XML Structure Manipulation
- **Malicious XML structures and formats.**
- **Common Examples:**
  - **Entity Attacks (External and Expansion Based)**
  - **DTD/Schema Based Threats**
  - **Entity Expansion Attack**: Forces recursive entity expansion, depleting server resources.
  - **"Many Laughs" Attack (Billion Laughs Attack)**: An example of an entity expansion attack.