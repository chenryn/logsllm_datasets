### 6.2 Hot Patching Frameworks

ClearView [41] is an automated error patching framework that operates at the binary level. It constructs models for the normal execution of a program and identifies abnormal executions, which are treated as errors. When errors are detected, ClearView searches for invariants and generates patches based on these invariants. The framework then performs self-evaluation to determine whether the generated patches effectively resolve the errors.

Bouncer [15] utilizes the attack detector DFI [12] to identify vulnerability exploits. It leverages both static and dynamic symbolic execution to generate filters that block malicious inputs before they reach the vulnerable program. This approach ensures that only safe inputs are processed, thereby mitigating potential vulnerabilities.

Embroidery [55] is a hot-patching framework designed for outdated Android systems. It combines static and dynamic analysis to build a binary rewriting engine that can patch vulnerabilities. By doing so, it aims to enhance the security of older Android versions without requiring extensive code modifications.

Instaguard [13] is another hot-patching framework for Android, which focuses on fixing vulnerabilities without adding new code to the original programs. Instead, Instaguard uses patch specifications to generate rules that mitigate vulnerabilities. Our work complements these existing frameworks, as the hot patches generated by our method can serve as inputs for their patching mechanisms.

### 7. Conclusions

In this work, we have defined the problem of automatic hot patch generation. We analyzed the patch behaviors of recent real-world Android vulnerabilities and proposed methods to automatically generate hot patches that can be directly applied to Android kernels without affecting user experiences. To demonstrate the effectiveness of our approach, we developed a tool called Vulmet, which generates semantically equivalent code changes by learning from the semantics of official vulnerability patches through program analysis. Our experiments showed that Vulmet can generate correct hot patches for fixing real-world CVEs. The generated hot patches were tested to ensure that they maintain the robustness of the program while incurring minimal overhead.

### Acknowledgements

This research was supported (in part) by the National Research Foundation, Prime Minister's Office, Singapore, under its National Cybersecurity R&D Program (Award No. NRF2018NCR-NCR005-0001), the National Satellite of Excellence in Trustworthy Software System (Award No. NRF2018NCR-NSOE003-0001) administered by the National Cybersecurity R&D Directorate, and the Alibaba-NTU JRI project (M4062640.J4A).

### References

[1] Android Security Bulletin. https://source.android.com/security/bulletin.

[2] Antutu Benchmark. http://www.antutu.com/en/.

[3] CF-Bench. https://play.google.com/store/apps/details?id=eu.chainfire.cfbench&hl=en_SG.

[4] CVE-2014-4943 Patch. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=3cf521f7dc87c031617fd47e4b7aa2593c2f3daf.

[5] CVE-2014-9873 Patch. https://source.codeaurora.org/quic/la/kernel/msm/commit/?id=ef29ae1d40536fef7fb95e4d5bb5b6b57bdf9420.

[6] CVE-2015-8940 Patch. https://source.codeaurora.org/quic/la/kernel/msm-3.10/commit/?id=e13ebd727d161db7003be6756e61283dce85fa3b.

[7] CVE-2016-4470 Patch. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=38327424b40bcebe2de92d07312c89360ac9229a.

[8] CVE-2016-8457 Patch. https://github.com/aosp-mirror/kernel_msm/commit/e5c1b001a822e8b38680655c400e7b3f67cc3323.

[9] CVE-2018-17182 Patch. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7a9cdebdcc17e426fb5287e4a82db1dfe86339b2.

[10] IDA Pro. https://www.hex-rays.com/products/ida/.

[11] List for Hot Patch Semantics. https://sites.google.com/view/usenix-auto-patch-paper.

[12] Castro, M., Costa, M., and Harris, T. Securing software by enforcing data-flow integrity. In Proceedings of the 7th Symposium on Operating Systems Design and Implementation (2006), USENIX Association, pp. 147–160.

[13] Chen, Y., Li, Y., Lu, L., Lin, Y.-H., Vijayakumar, H., Wang, Z., and Ou, X. Instaguard: Instantly deployable hot-patches for vulnerable system programs on Android. In 2018 Network and Distributed System Security Symposium (NDSS’18) (2018).

[14] Chen, Y., Zhang, Y., Wang, Z., Xia, L., Bao, C., and Wei, T. Adaptive Android kernel live patching. In Proceedings of the 26th USENIX Security Symposium (USENIX Security 17) (2017).

[15] Costa, M., Castro, M., Zhou, L., Zhang, L., and Peinado, M. Bouncer: Securing software by blocking bad input. In ACM SIGOPS Operating Systems Review (2007), vol. 41, ACM, pp. 117–130.

[16] Cui, W., Peinado, M., Wang, H. J., and Locasto, M. E. Shieldgen: Automatic data patch generation for unknown vulnerabilities with informed probing. In Security and Privacy, 2007. SP’07. IEEE Symposium on (2007), IEEE, pp. 252–266.

[17] Dijkstra, E. W., and Scholten, C. S. Predicate Calculus and Program Semantics. Springer Science & Business Media, 2012.

[18] Faruki, P., Bharmal, A., Laxmi, V., Ganmoor, V., Gaur, M. S., Conti, M., and Rajarajan, M. Android security: A survey of issues, malware penetration, and defenses. IEEE Communications Surveys & Tutorials 17, 2 (2015), 998–1022.

[19] Gupta, R., Pal, S., Kanade, A., and Shevade, S. DeepFix: Fixing common C language errors by deep learning. In AAAI (2017), pp. 1345–1351.

[20] Horn, J. A cache invalidation bug in Linux memory management.

[21] Kaleeswaran, S., Tulsian, V., Kanade, A., and Orso, A. Minthint: Automated synthesis of repair hints. In Proceedings of the 36th International Conference on Software Engineering (2014), ACM, pp. 266–276.

[22] Ke, Y., Stolee, K. T., Le Goues, C., and Brun, Y. Repairing programs with semantic code search (t). In Automated Software Engineering (ASE), 2015 30th IEEE/ACM International Conference on (2015), IEEE, pp. 295–306.

[23] Kim, D., Nam, J., Song, J., and Kim, S. Automatic patch generation learned from human-written patches. In Proceedings of the 2013 International Conference on Software Engineering (2013), IEEE Press, pp. 802–811.

[24] Le Goues, C., Dewey-Vogt, M., Forrest, S., and Weimer, W. A systematic study of automated program repair: Fixing 55 out of 105 bugs for $8 each. In 34th International Conference on Software Engineering, ICSE 2012, June 2-9, 2012, Zurich, Switzerland (2012), IEEE, pp. 3–13.

[25] Li, F., and Paxson, V. A large-scale empirical study of security patches. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (2017), ACM, pp. 2201–2215.

[26] Lin, Z., Jiang, X., Xu, D., Mao, B., and Xie, L. Autopag: Towards automated software patch generation with source code root cause identification and repair. In Proceedings of the 2nd ACM symposium on Information, computer and communications security (2007), ACM, pp. 329–340.

[27] Liu, H., Chen, Y., and Lu, S. Understanding and generating high quality patches for concurrency bugs. In Proceedings of the 2016 24th ACM SIGSOFT international symposium on foundations of software engineering (2016), ACM, pp. 715–726.

[28] Long, F., and Rinard, M. Staged program repair with condition synthesis. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering (2015), ACM, pp. 166–178.

[29] Long, F., and Rinard, M. An analysis of the search spaces for generate and validate patch generation systems. In Software Engineering (ICSE), 2016 IEEE/ACM 38th International Conference on (2016), IEEE, pp. 702–713.

[30] Long, F., and Rinard, M. Automatic patch generation by learning correct code. ACM SIGPLAN Notices 51, 1 (2016), 298–312.

[31] Long, F., Sidiroglou-Douskos, S., Kim, D., and Rinard, M. Sound input filter generation for integer overflow errors. ACM SIGPLAN Notices 49, 1 (2014), 439–452.

[32] Ma, S., Thung, F., Lo, D., Sun, C., and Deng, R. H. Vurle: Automatic vulnerability detection and repair by learning from examples. In European Symposium on Research in Computer Security (2017), Springer, pp. 229–246.

[33] Martinez, M., and Monperrus, M. Mining software repair models for reasoning on the search space of automated program fixing. Empirical Software Engineering 20, 1 (2015), 176–205.

[34] Mechtaev, S., Yi, J., and Roychoudhury, A. DirectFix: Looking for simple program repairs. In Proceedings of the 37th International Conference on Software Engineering-Volume 1 (2015), IEEE Press, pp. 448–458.

[35] Medeiros, I., Neves, N. F., and Correia, M. Automatic detection and correction of web application vulnerabilities using data mining to predict false positives. In Proceedings of the 23rd international conference on World wide web (2014), ACM, pp. 63–74.

[36] Mokhov, S. A., Laverdiere, M.-A., and Benredjem, D. Taxonomy of Linux kernel vulnerability solutions. In Innovative Techniques in Instruction Technology, E-learning, E-assessment, and Education. Springer, 2008, pp. 485–493.

[37] Monperrus, M. Automatic software repair: A bibliography. ACM Computing Surveys (CSUR) 51, 1 (2018), 17.

[38] Mulliner, C., Oberheide, J., Robertson, W., and Kirda, E. PatchDroid: Scalable third-party security patches for Android devices. In Proceedings of the 29th Annual Computer Security Applications Conference (2013), ACM, pp. 259–268.

[39] Muntean, P., Kommanapalli, V., Ibing, A., and Eckert, C. Automated generation of buffer overflow quick fixes using symbolic execution and SMT. In International Conference on Computer Safety, Reliability, and Security (2014), Springer, pp. 441–456.

[40] Nguyen, H. A., Nguyen, A. T., Nguyen, T. T., Nguyen, T. N., and Rajan, H. A study of repetitiveness of code changes in software evolution. In Proceedings of the 28th IEEE/ACM International Conference on Automated Software Engineering (2013), IEEE Press, pp. 180–190.

[41] Perkins, J. H., Kim, S., Larsen, S., Amarasinghe, S., Bachrach, J., Carbin, M., Pacheco, C., Sherwood, F., Sidiroglou, S., Sullivan, G., et al. Automatically patching errors in deployed software. In Proceedings of the ACM SIGOPS 22nd symposium on Operating systems principles (2009), ACM, pp. 87–102.

[42] Qi, Z., Long, F., Achour, S., and Rinard, M. An analysis of patch plausibility and correctness for generate-and-validate patch generation systems. In Proceedings of the 2015 International Symposium on Software Testing and Analysis (2015), ACM, pp. 24–36.

[43] Razmov, V., and Simon, D. R. Practical automated filter generation to explicitly enforce implicit input assumptions. In Computer Security Applications Conference, 2001. ACSAC 2001. Proceedings 17th Annual (2001), IEEE, pp. 347–357.

[44] Schulte, E., Forrest, S., and Weimer, W. Automated program repair through the evolution of assembly code. In Proceedings of the IEEE/ACM international conference on Automated software engineering (2010), ACM, pp. 313–316.

[45] Sidiroglou, S., and Keromytis, A. D. Countering network worms through automatic patch generation. IEEE Security & Privacy 3, 6 (2005), 41–49.

[46] Sidiroglou-Douskos, S., Lahtinen, E., Long, F., and Rinard, M. Automatic error elimination by horizontal code transfer across multiple applications. In ACM SIGPLAN Notices (2015), vol. 50, ACM, pp. 43–54.

[47] Sotirov, A. Hotpatching and the rise of third-party patches. In Black Hat Technical Security Conference, Las Vegas, Nevada (2006).

[48] Soto, M., Thung, F., Wong, C.-P., Le Goues, C., and Lo, D. A deeper look into bug fixes: patterns, replacements, deletions, and additions. In Proceedings of the 13th International Conference on Mining Software Repositories (2016), ACM, pp. 512–515.

[49] Sui, Y., and Xue, J. SVF: Interprocedural static value-flow analysis in LLVM. In Proceedings of the 25th International Conference on Compiler Construction (2016), ACM, pp. 265–266.

[50] Sui, Y., Ye, D., and Xue, J. Detecting memory leaks statically with full-sparse value-flow analysis. IEEE Transactions on Software Engineering 40, 2 (2014), 107–122.

[51] Tian, Y., Lawall, J., and Lo, D. Identifying Linux bug-fixing patches. In Proceedings of the 34th International Conference on Software Engineering (2012), IEEE Press, pp. 386–396.

[52] Weimer, W., Nguyen, T., Le Goues, C., and Forrest, S. Automatically finding patches using genetic programming. In Proceedings of the 31st International Conference on Software Engineering (2009), IEEE Computer Society, pp. 364–374.

[53] Xie, X., Chen, B., Zou, L., Lin, S.-W., Liu, Y., and Li, X. Loopster: Static loop termination analysis. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (2017), ACM, pp. 84–94.

[54] Zhang, M., and Yin, H. AppSealer: Automatic generation of vulnerability-specific patches for preventing component hijacking attacks in Android applications. In NDSS (2014).

[55] Zhang, X., Zhang, Y., Li, J., Hu, Y., Li, H., and Gu, D. Embroidery: Patching vulnerable binary code of fragmented Android devices. In Software Maintenance and Evolution (ICSME), 2017 IEEE International Conference on (2017), IEEE, pp. 47–57.

[56] Zhong, H., and Su, Z. An empirical study on real bug fixes. In Proceedings of the 37th International Conference on Software Engineering-Volume 1 (2015), IEEE Press, pp. 913–923.