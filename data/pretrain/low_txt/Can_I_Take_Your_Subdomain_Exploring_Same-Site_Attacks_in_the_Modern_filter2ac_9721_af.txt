# References

1. Bugcrowd. (2020). Public Bug Bounty List. Retrieved from https://www.bugcrowd.com/bug-bounty-list/

2. Bugliesi, M., Calzavara, S., Focardi, R., & Khan, W. (2015). CookiExt: Patching the Browser Against Session Hijacking Attacks. *Journal of Computer Security*, 23(4), 509-537.

3. Calzavara, S., Focardi, R., Grimm, N., Maffei, M., & Tempesta, M. (2020). Language-Based Web Session Integrity. In *CSF*.

4. Calzavara, S., Focardi, R., Squarcina, M., & Tempesta, M. (2017). Surviving the Web: A Journey into Web Session Security. *ACM Computing Surveys (CSUR)*, 50(1), 13:1-13:34.

5. Calzavara, S., Rabitti, A., & Bugliesi, M. (2018). Semantics-Based Analysis of Content Security Policy Deployment. *ACM Transactions on the Web*.

6. Calzavara, S., Rabitti, A., Ragazzo, A., & Bugliesi, M. (2019). Testing for Integrity Flaws in Web Sessions. In *ESORICS*.

7. Censys. (2020). Retrieved from https://censys.io/

8. Chen, J., Jiang, J., Duan, H., Wan, T., Chen, S., Paxson, V., & Yang, M. (2018). We Still Don’t Have Secure Cross-Domain Requests: An Empirical Study of CORS. In *USENIX Security*.

9. Common Crawl. (2020). Host and Domain-Level Web Graphs Feb/Mar/May 2020. Retrieved from https://commoncrawl.org/2020/06/host-and-domain-level-web-graphs-febmarmay-2020/

10. Conca, M. (2020). Changes to SameSite Cookie Behavior – A Call to Action for Web Developers. Retrieved from https://hacks.mozilla.org/2020/08/changes-to-samesite-cookie-behavior/

11. Daigle, L. (2004). RFC3912: WHOIS Protocol Specification.

12. EdOverﬂow. (n.d.). can-i-take-over-xyz. Retrieved from https://github.com/EdOverflow/can-i-take-over-xyz

13. Foudil, E., & Shafranovich, Y. (2020). A File Format to Aid in Security Vulnerability Disclosure.

14. FreeDNS. (2020). Free DNS Hosting, Dynamic DNS Hosting, Static DNS Hosting, subdomain and domain hosting. Retrieved from https://freedns.afraid.org/

15. Hallam-Baker, P., Stradling, R., & Hoffman-Andrews, J. (2019). RFC8659: DNS Certification Authority Authorization (CAA) Resource Record.

16. Helme, S. (2017). Cross-Site Request Forgery is dead! Retrieved from https://scotthelme.co.uk/csrf-is-dead/

17. IANA. (n.d.). Root Zone Database. Retrieved from https://www.iana.org/domains/root/db

18. Kintis, P., Miramirkhani, N., Lever, C., Chen, Y., Gómez, R. R., Pitropakis, N., Nikiforakis, N., & Antonakakis, M. (2017). Hiding in Plain Sight: A Longitudinal Study of Combosquatting Abuse. In *CCS*.

19. Kocher, P., Horn, J., Fogh, A., Genkin, D., Gruss, D., Haas, W., Hamburg, M., Lipp, M., Mangard, S., Prescher, T., Schwarz, M., & Yarom, Y. (2019). Spectre Attacks: Exploiting Speculative Execution. In *S&P*.

20. Lever, C., Walls, R. J., Nadji, Y., Dagon, D., McDaniel, P. D., & Antonakakis, M. (2016). Domain-Z: 28 Registrations Later Measuring the Exploitation of Residual Trust in Domains. In *S&P*.

21. Lewis, E. P. (2006). RFC4592: The Role of Wildcards in the Domain Name System.

22. Li, F., Durumeric, Z., Czyz, J., Karami, M., Bailey, M., McCoy, D., Savage, S., & Paxson, V. (2016). You’ve Got Vulnerability: Exploring Effective Vulnerability Notifications. In *USENIX Security*.

23. Liu, D., Hao, S., & Wang, H. (2016). All Your DNS Records Point to Us: Understanding the Security Threats of Dangling DNS Records. In *CCS*.

24. Liu, D., Li, Z., Du, K., Wang, H., Liu, B., & Duan, H. (2017). Don’t Let One Rotten Apple Spoil the Whole Barrel: Towards Automated Detection of Shadowed Domains. In *CCS*.

25. Osborne, C. (2017). Uber Patches Security Flaw Leading to Subdomain Takeover. *ZDNet*. Retrieved from https://www.zdnet.com/article/uber-patches-security-flaw-leading-to-subdomain-takeover/

26. OWASP. (2020). Amass. Retrieved from https://owasp.org/www-project-amass/

27. Pochat, V. L., Goethem, T. V., Tajalizadehkhoob, S., Korczyński, M., & Joosen, W. (2019). Tranco: A Research-Oriented Top Sites Ranking Hardened Against Manipulation. In *NDSS*.

28. Rapid7 Labs. (2020). Open Data, TCP and UDP scans. Retrieved from https://opendata.rapid7.com/

29. Reis, C., Moshchuk, A., & Oskov, N. (2019). Site Isolation: Process Separation for Web Sites within the Browser. In *USENIX Security*.

30. Roberts, R., Goldschlag, Y., Walter, R., Chung, T., Mislove, A., & Levin, D. (2019). You Are Who You Appear to Be: A Longitudinal Study of Domain Impersonation in TLS Certificates. In *CCS*.

31. Roth, S., Barron, T., Calzavara, S., Nikiforakis, N., & Stock, B. (2020). Complex Security Policy? A Longitudinal Analysis of Deployed Content Security Policies. In *NDSS*.

32. Röttger, S., & Janc, A. (2021). A Spectre Proof-of-Concept for a Spectre-proof web. Retrieved from https://security.googleblog.com/2021/03/a-spectre-proof-of-concept-for-spectre.html

33. Schwittmann, L., Wander, M., & Weis, T. (2019). Domain Impersonation is Feasible: A Study of CA Domain Validation Vulnerabilities. In *EuroS&P*.

34. Sectigo. (2020). Crt.sh: Certificate search. Retrieved from https://crt.sh/

35. Meiser, G., Laperdix, P., & Stock, B. (2021). Careful Who You Trust: Studying the Pitfalls of Cross-Origin Communication. In *ASIA CCS*.

36. Son, S., & Shmatikov, V. (2013). The Postman Always Rings Twice: Attacking and Defending postMessage in HTML5 Websites. In *NDSS*.

37. Mockapetris, P. (1987). RFC1035: Domain Names - Implementation and Specification.

38. Mozilla. (n.d.). Mixed content. Retrieved from https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content

39. Mozilla. (n.d.). Public Suffix List. Retrieved from https://publicsuffix.org/

40. Nottingham, M. (2019). RFC8615: Well-Known Uniform Resource Identifiers (URIs).

41. Steffens, M., & Stock, B. (2020). PMForce: Systematically Analyzing postMessage Handlers at Scale. In *CCS*.

42. Stock, B., Pellegrino, G., Li, F., Backes, M., & Rossow, C. (2018). Didn’t You Hear Me? - Towards More Successful Web Vulnerability Notifications. In *NDSS*.

43. Stock, B., Pellegrino, G., Rossow, C., Johns, M., & Backes, M. (2016). Hey, You Have a Problem: On the Feasibility of Large-Scale Web Vulnerability Notification. In *USENIX Security*.

44. The Chromium Projects. (2020). SameSite Updates. Retrieved from https://www.chromium.org/updates/same-site

45. W3C. (2018). Content Security Policy Level 3. Retrieved from https://www.w3.org/TR/CSP3/

46. Walker, J. (n.d.). Subdomain Autoﬁll Feature Raises Questions over LastPass Security. Retrieved from https://portswigger.net/daily-swig/subdomain-autofill-feature-raises-questions-over-lastpass-security

47. Weichselbaum, L., Spagnuolo, M., Lekies, S., & Janc, A. (2016). CSP Is Dead, Long Live CSP! On the Insecurity of Whitelists and the Future of Content Security Policy. In *CCS*.

48. Weissbacher, M., Lauinger, T., & Robertson, W. K. (2014). Why Is CSP Failing? Trends and Challenges in CSP Adoption. In *RAID*.

49. West, M., & Wilander, J. (2020). RFC6265: Cookies: HTTP State Management Mechanism.

50. Wired. (2011). Researchers’ Typosquatting Stole 20 GB of E-Mail From Fortune 500. Retrieved from https://www.wired.com/2011/09/doppelganger-domains/

51. Zhang, M., Zheng, X., Shen, K., Kong, Z., Lu, C., Wang, Y., Duan, H., Hao, S., Liu, B., & Yang, M. (2020). Talking with Familiar Strangers: An Empirical Study on HTTPS Context Confusion Attacks. In *CCS*.

52. Zheng, X., Jiang, J., Liang, J., Duan, H., Chen, S., Wan, T., & Weaver, N. (2015). Cookies Lack Integrity: Real-World Implications. In *USENIX Security*.

## A. Disclosure and Ethical Considerations

RDScan identified 1,520 vulnerable subdomains on 887 distinct domains, of which 260 are subdomains pointing to an expired domain and 1,260 are those mapped to a discontinued service (see §4.2). Besides disclosing the vulnerabilities found on service providers (§5.1.2), we also attempted to notify all the websites affected by the issues we discovered. Prior work [32, 52, 53] showed that the identification and selection of correct security contact points is the main issue behind an overall unsatisfactory remediation rate. To maximize the chances of a successful notification campaign, we examined the following sources until a valid point of contact was found:

1. The list of bug bounty and security disclosure programs maintained by Bugcrowd [11].
2. The security.txt file [23] in the root directory of the vulnerable domains and under the /.well-known/ folder [39].
3. The Abusix [3] database, queried with the IP addresses of the vulnerable domains to collect the associated email contacts.
4. WHOIS lookups [21].

We validated the obtained email addresses to avoid reporting vulnerabilities to unrelated parties, e.g., by checking whether the domain part of the email address matches any of the input domains. Unfortunately, using this procedure, we could not find any security contact for the majority of the considered domains (62%). To inform them about their security vulnerabilities, we contacted our national CERT, which willingly agreed to disclose the issues to the affected parties on our behalf. Among the few contacted websites with a bug bounty program, F-Secure awarded us €250 for the reported subdomain takeover vulnerability.

Aside from vulnerability disclosure programs, our notification campaign is fully automatic: we sent an email to all the identified contacts containing a high-level description of the vulnerabilities and a link to the security advisory on our web application, which contains a detailed description of the problems found for a given domain, the required actions to fix the reported vulnerabilities, and instructions to opt out from future scans.

### A.1 Outcome of the Notification Campaign

We performed a second run of RDScan in January 2021, six months after the first analysis, to assess the state of vulnerable instances left in the wild after our disclosure. We repeated the test for the whole set of expired domains. Concerning discontinued services, we focused on the three largest providers (WordPress, Shopify, and Tumblr), representing 87% of the vulnerable subdomains found in the first round. Overall, we covered 1,362 out of the original 1,520 vulnerable subdomains (90%), which translates to 781 out of 887 sites (88%).

To account for possible changes in services, we verified the takeover preconditions included in RDScan. After the conclusion of the analysis, we manually assessed a random sample of 10% of the results to ensure the correctness of the procedure without finding any discrepancy.

We discovered that only 200 out of 1,362 subdomains (15%) have been fixed during this time frame, for a total of 125 sites over 781 (16%). We noticed that the sites which we contacted directly exhibit a noticeably higher fix rate (31% subdomains, 22% sites) than those alerted by our national CERT (10% subdomains, 14% sites). Unfortunately, we also observed that a considerable amount of sites fixed only a subset of their vulnerable subdomains, resulting in still being affected by threats posed by related-domain attackers.

The overall remediation rate of our notification campaign is in line with previous studies [53]. Nonetheless, we report that our procedure to identify appropriate contact points turned out to be successful, considering that 34% of the contacted parties accessed the full vulnerability report on our web application.

### A.2 Ethical Considerations

We consciously designed our vulnerability scanning framework to avoid raising network alerts or causing harm to the analyzed targets. Specifically, the subdomain takeover assessment phase has been carried out mostly by DNS queries and simple HTTP requests. Active websites have never been affected by our tests since we restricted the analysis to abandoned DNS records. We did not perform any large-scale port scan but opted instead for using a public dataset consisting of a scan of the full IPv4 range on 148 ports. We also avoided checking the availability of IP addresses on cloud providers by iterating over the creation of multiple virtual machines, as this practice could interfere with the normal operations of the cloud platforms. Similarly, the web analysis module did not execute attacks against the targets but limited its operations to the passive collection of data (cookies and security policies), simple HTTP requests, and client-side testing. Overall, our approach proved to be lightweight and unobtrusive: we did not receive requests from the analyzed websites to opt out from future scans, and no complaints concerning our activity were sent to the abuse contact of the IPs used to perform the analysis.

## B. Case Studies

We report on manually vetted case studies of confirmed attacks. All vulnerable parties have been promptly informed of the discovered issues; see Appendix A for details.

### B.1 Site Impersonation

We provide a concrete example of how the Shopify vulnerability described in §5.1.2 could have been abused to impersonate a major website. As of September 2020, the e-shop of fox.com was hosted on Shopify and made available at shop.fox.com using a custom domain mapping. Our scan verified the two preconditions to connect www.shop.fox.com to a Shopify store under our control, i.e., the existence of a DNS A record pointing the domain www.shop.fox.com to 23.227.38.65 (the IP address owned by Shopify to map custom domains) and that www.shop.fox.com was not associated with any registered store on Shopify.

We manually investigated the e-shop of fox.com and found that the redirection performed by Shopify from www.shop.fox.com to shop.fox.com caused the www-prefixed subdomain to be referenced in the store as a legitimate URL. By taking over www.shop.fox.com, criminals could have abused this implicit trust to mount severe attacks against the legitimate store, such as phishing, reputation damage, and credential stealing. We notified the vulnerability to Shopify on August 27, 2020, and received a bounty for our disclosure. Around one month after the report, we noticed that FOX moved its e-shop to a different domain (maskedsingershop.com). We have no evidence to assert whether this change is connected to our disclosure.

### B.2 Session Hijacking

We describe an example of a subdomain takeover vulnerability that could have been exploited to hijack authenticated user sessions at the FedEx website. RDScan discovered a dangling DNS affecting the cn.grantcontest.fedex.com subdomain due to a CNAME record pointing to the purchasable domain cngrantcontest.com.

After taking control of the subdomain, attackers could escalate their privileges by exploiting the insecure configuration of session cookies on the main website. We manually verified that authenticated sessions with www.fedex.com were built upon domain cookies, which are sent by default to all subdomains (see §3.3.2). Thus, authenticated users would disclose their session cookies to the attackers just by visiting the compromised subdomain. After acquiring the victim’s cookies, an attacker could automatically break into the victim’s session and access confidential data stored on the web portal. We notified FedEx about the takeover vulnerability in August 2020. The company acknowledged our findings, and as of January 2021, we confirmed that the vulnerability was fixed.

### B.3 Leakage of PII Data

Now we show how a related-domain attacker can abuse misconfigurations in the CORS policy to access personally identifiable information (PII) of a user on the F-Secure website. Our vulnerability scanning pipeline detected a CNAME record uk.safeandsavvy.f-secure.com pointing to the deleted WordPress blog at safeandsavvyuk.wordpress.com. Notice that subdomains of deleted blogs still resolve to a WordPress IP thanks to a CNAME wildcard for *.wordpress.com.

To take over the F-Secure subdomain, an attacker could simply create an account on wordpress.com and set uk.safeandsavvy.f-secure.com as a custom domain. We observed that WordPress allows paid accounts to install plugins which enable the inclusion of arbitrary scripts as part of the blog’s theme. The ability to execute JavaScript from a subdomain of f-secure.com would allow attackers to exploit a CORS vulnerability identified by our web analyzer on api.my.f-secure.com. Such domain was configured to relax the SOP on requests originating from any subdomain of f-secure.com, even when cookies are attached. An attacker could trick a victim into visiting a page on the compromised subdomain which performs a fetch request to, e.g., the https://api.my.f-secure.com/get_userinfo endpoint to read private information such as past billing details, tokens, etc. We notified F-Secure through their bug bounty program in August 2020 and received €250 for the report.