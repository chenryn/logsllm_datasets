# Table 3: Pivoting Instructions Used by Recent Metasploit Exploits

| CVE Number | Instruction |
|------------|-------------|
| 2013-3897  | xchg eax, esp |
| 2013-3163  | mov esp, [eax] |
| 2013-1347  | pop esp |
| 2012-4969  | xchg eax, esp |
| 2012-4792  | mov esp, [eax] |
| 2012-1889  | pop esp |
| 2012-1535  | xchg eax, esp |
| 2014-0515  | mov esp, [eax] |
| 2013-1017  | pop esp |

To demonstrate the effectiveness of PBlocker, we present the number of explicit stack pointer (SP) update instructions that PBlocker protects, compared to the total number of gadgets in coreutils and binutils. The results are summarized in Table 2. Our findings indicate that absolute SP-update instructions, which are the most commonly used for stack pivoting, constitute a very small fraction of the total instructions in a program.

## 6. Related Work

### 6.1 Defense Against Stack Pivoting

Microsoft’s Enhanced Mitigation Experience Toolkit (EMET) [2] is a widely used utility for preventing zero-day exploits, including defense against stack pivot in Return-Oriented Programming (ROP) attacks. EMET's core mechanism is based on ROPguard [20]. When execution enters a critical function like `VirtualProtect`, EMET ensures that the stack pointer lies within the current thread's stack region. DeMott [18] bypasses EMET by exploiting the time-of-check to time-of-use gap. They perform a stack pivot to the heap, execute ROP, and then pivot back to the stack region just before invoking `VirtualProtect`. Since EMET only checks the stack pointer within the critical function, such an attack can evade detection.

PBlocker, on the other hand, checks the stack pointer immediately after every absolute SP-update instruction, thereby stopping the attacks demonstrated by DeMott.

Recent stack-based defenses have made stack pivoting more challenging but not impossible. In StackArmor [10], Chen et al. randomize the stack location, making it harder for attackers to guess the ROP payload's location on the stack. However, if an attacker can successfully locate the payload, the system remains vulnerable to pivoting [19].

### 6.2 Control-Flow Integrity (CFI)

Starting with Abadi et al. [3], several CFI defenses have been proposed at the source code level [22, 37], binary level [43, 42, 16, 14], and runtime [39, 31]. Kuznetsov et al. propose CPI [24], which distinguishes between code and non-code pointers and protects code pointers. Unlike CFI, PBlocker and PBlocker+ are not control-flow-based approaches but are complementary to CFI. Coarse-grained CFI can supplement PBlocker and PBlocker+ to prevent attackers from using unintended SP-update instructions (e.g., 1-byte instructions like `leave`) that cannot be removed through gadget elimination techniques.

More recent CFI defenses, such as vfGuard [30], improve the precision of CFI for C++ virtual call dispatches. Opaque CFI [26] combines coarse-grained CFI and artificial diversification to make disclosure attacks more difficult.

### 6.3 Artificial Diversity

The goal of artificial diversity is to randomize and hide the location of a program's code, data, stack, heap, etc. [4, 36, 5, 41, 12]. STIR [40] performs static instrumentation to generate self-randomizing binaries. Isomeron [17] combines code randomization with execution-path randomization, duplicating code fragments that can be indirectly targeted and invoking a randomly chosen fragment at runtime. Xu and Chapin [41] introduce ASLR using code-islands to defend against chained return-to-libc attacks, randomizing base pointers used in memory mappings into isolated code blocks.

Artificial-diversity-based defenses are susceptible to disclosure attacks and may not always be effective [33]. PBlocker and PBlocker+ do not rely on ASLR for defense.

### 6.4 Gadget Elimination

Two main works, in-place code randomization [28] and G-Free [27], have been proposed to eliminate gadgets. Given the large number of available gadgets even in binaries [32], it is challenging to eliminate all gadgets. These methods perform semantics-preserving in-place code randomization.

## 7. Conclusion

In this paper, we introduced PBlocker, a novel defense against ROP attacks. PBlocker enforces Stack Localization to prevent stack-pivot operations that pivot outside the stack region, covering most ROP cases. We also presented PBlocker+, a more conservative version that checks the stack pointer before each function returns.

## 8. Acknowledgment

We would like to thank the anonymous reviewers for their feedback. This research was supported in part by the National Science Foundation Grant #1054605, Air Force Research Lab Grant #FA8750-15-2-0106, and DARPA CGC Grant #FA8750-14-C-0118. Any opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

## 9. References

[1] Metasploit penetration testing framework. http://www.metasploit.com/.

[2] Microsoft Enhanced Mitigation Experience Toolkit. http://support.microsoft.com/kb/2458544, August 2014.

[3] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-Flow Integrity. In Proceedings of the 12th ACM Conference on Computer and Communications Security (CCS’05), pages 340–353, 2005.

[4] S. Bhatkar, D. C. DuVarney, and R. Sekar. Address Obfuscation: An Efficient Approach to Combat a Broad Range of Memory Error Exploits. In USENIX Security, volume 3, pages 105–120, 2003.

[5] S. Bhatkar and R. Sekar. Data Space Randomization. In Detection of Intrusions and Malware, and Vulnerability Assessment, pages 1–22. Springer, 2008.

[6] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazieres, and D. Boneh. Hacking Blind. In IEEE Symposium on Security and Privacy (SP’2014), pages 227–242. IEEE, 2014.

[7] T. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang. Jump-Oriented Programming: A New Class of Code-Reuse Attack. In Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security, pages 30–40. ACM, 2011.

[8] N. Carlini and D. Wagner. ROP is still dangerous: Breaking modern defenses. In 23rd USENIX Security Symposium (USENIX Security’14), 2014.

[9] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham, and M. Winandy. Return-oriented programming without returns. In Proceedings of the 17th ACM conference on Computer and communications security, pages 559–572. ACM, 2010.

[10] X. Chen, A. Slowinska, D. Andriesse, H. Bos, and C. Giuffrida. Stackarmor: Comprehensive protection from stack-based memory error vulnerabilities for binaries. In Proceedings of the 22nd Annual Network and Distributed System Security Symposium (NDSS’15).

[11] Y. Cheng, Z. Zhou, M. Yu, X. Ding, and R. H. Deng. Ropecker: A generic and practical approach for defending against ROP attacks. In Symposium on Network and Distributed System Security (NDSS), 2014.

[12] M. Chew and D. Song. Mitigating buffer overflows by operating system randomization. Technical Report CMU-CS-02-197, Carnegie Mellon University, 2002.

[13] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, Q. Zhang, and H. Hinton. Stackguard: Automatic adaptive detection and prevention of buffer-overflow attacks. In Usenix Security, volume 98, pages 63–78, 1998.

[14] J. Criswell, N. Dautenhahn, and V. Adve. KCoFI: Complete control-flow integrity for commodity operating system kernels. In Proceedings of 35th IEEE Symposium on Security and Privacy (Oakland’14), 2014.

[15] T. H. Dang, P. Maniatis, and D. Wagner. The performance cost of shadow stacks and stack canaries. In ACM Symposium on Information, Computer and Communications Security, ASIACCS, volume 15, 2015.

[16] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz, R. Hund, S. Nürnberger, and A.-r. Sadeghi. MoCFI: A framework to mitigate control-flow attacks on smartphones. In Proceedings of the 19th Annual Network and Distributed System Security Symposium (NDSS’12), 2012.

[17] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and F. Monrose. Isomeron: Code Randomization Resilient to (Just-In-Time) Return-Oriented Programming. In Symposium on Network and Distributed System Security (NDSS’15).

[18] J. DeMott. Bypassing EMET 4.1. https://bromiumlabs.files.wordpress.com/2014/02/bypassing-emet-4-1.pdf.

[19] E. Eng and D. Caselden. Operation Clandestine Wolf – Adobe Flash Zero-Day in APT3 Phishing Campaign. https://www.fireeye.com/blog/threat-research/2015/06/operation-clandestine-wolf-adobe-flash-zero-day.html.

[20] I. Fratric. Runtime prevention of return-oriented programming attacks. http://ropguard.googlecode.com/svn-history/r2/trunk/doc/ropguard.pdf, 2014.

[21] E. Göktas, E. Anthanasopoulos, H. Bos, and G. Portokalidis. Out of control: Overcoming control-flow integrity. In Proceedings of 35th IEEE Symposium on Security and Privacy (Oakland’14), 2014.

[22] D. Jang, Z. Tatlock, and S. Lerner. SafeDispatch: Securing C++ virtual calls from memory corruption attacks. In Proceedings of 21st Annual Network and Distributed System Security Symposium (NDSS’14), 2014.

[23] T. Jim, J. G. Morrisett, D. Grossman, M. W. Hicks, J. Cheney, and Y. Wang. Cyclone: A Safe Dialect of C. In USENIX Annual Technical Conference, General Track, pages 275–288, 2002.

[24] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song. Code-Pointer Integrity. In USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2014.

[25] W. Lian, H. Shacham, and S. Savage. Too LeJIT to Quit: Extending JIT Spraying to ARM. In Proceedings of the 22nd Annual Network and Distributed System Security Symposium (NDSS’15), 2015.

[26] V. Mohan, P. Larsen, S. Brunthaler, K. Hamlen, and M. Franz. Opaque control-flow integrity. In Symposium on Network and Distributed System Security (NDSS), 2015.

[27] K. Onarlioglu, L. Bilge, A. Lanzi, D. Balzarotti, and E. Kirda. G-free: defeating return-oriented programming through gadget-less binaries. In Proceedings of the 26th Annual Computer Security Applications Conference, pages 49–58. ACM, 2010.

[28] V. Pappas, M. Polychronakis, and A. D. Keromytis. Smashing the Gadgets: Hindering Return-Oriented Programming using in-place Code Randomization. In IEEE Symposium on Security and Privacy (SP’2012), pages 601–615, 2012.

[29] V. Pappas, M. Polychronakis, and A. D. Keromytis. Transparent ROP Exploit Mitigation Using Indirect Branch Tracing. In USENIX Security, 2013.

[30] A. Prakash, X. Hu, and H. Yin. vfGuard: Strict Protection for Virtual Function Calls in COTS C++ Binaries. In Proceedings of the 22nd Annual Network and Distributed System Security Symposium (NDSS’15), 2015.

[31] A. Prakash, H. Yin, and Z. Liang. Enforcing System-wide Control Flow Integrity for Exploit Detection and Diagnosis. In Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security (ASIACCS’13), pages 311–322, 2013.

[32] H. Shacham. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In Proceedings of the 14th ACM conference on Computer and communications security, pages 552–561. ACM, 2007.

[33] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh. On the effectiveness of address-space randomization. In Proceedings of the 11th ACM conference on Computer and communications security, pages 298–307. ACM, 2004.

[34] F. Shuster, T. Tendyck, C. Liebchen, L. Davi, A.-r. Sadeghi, and T. Holz. Counterfeit Object-oriented Programming, On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In Proceedings of 36th IEEE Symposium on Security and Privacy (Oakland’15), 2015.

[35] K. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A. Sadeghi. Just-In-Time Code Reuse: On the Effectiveness of Fine-Grained Address Space Layout Randomization. In IEEE Symposium on Security and Privacy (SP’2013), pages 574–588, 2013.

[36] PaX Team. PaX: Address space layout randomization (ASLR). http://pax.grsecurity.net/docs/aslr.txt, 2003.

[37] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson, L. Lozano, and G. Pike. Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM. In Proceedings of 23rd USENIX Security Symposium (USENIX Security’14), pages 941–955, 2014.

[38] D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken. A First Step Towards Automated Detection of Buffer Overrun Vulnerabilities. In NDSS, pages 2000–02, 2000.

[39] Z. Wang and X. Jiang. HyperSafe: A Lightweight Approach to Provide Lifetime Hypervisor Control-Flow Integrity. In IEEE Symposium on Security and Privacy (Oakland’10), pages 380–395, 2010.

[40] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary stirring: Self-randomizing instruction addresses of legacy x86 binary code. In Proceedings of the 2012 ACM conference on Computer and communications security (CCS’12), pages 157–168. ACM, 2012.

[41] H. Xu and S. J. Chapin. Address-space layout randomization using code islands. Journal of Computer Security, 17(3):331–362, 2009.

[42] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou. Practical control flow integrity and randomization for binary executables. In Proceedings of the IEEE Symposium on Security and Privacy (Oakland’13), pages 559–573, 2013.

[43] M. Zhang and R. Sekar. Control flow integrity for COTS binaries. In Proceedings of the 22nd USENIX Security Symposium (Usenix Security’13), pages 337–352, 2013.