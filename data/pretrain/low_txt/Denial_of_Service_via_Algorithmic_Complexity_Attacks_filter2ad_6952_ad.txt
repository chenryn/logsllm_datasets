### Operation and Hash Value Generation
The final operation in the process yields a 32-bit hash value. This construction is designed to support input lengths up to 224 bytes. When a hashing context is allocated, the programmer specifies the maximum input length, which initializes a fixed vector using AES in counter mode, with a key derived from `/dev/random`. Inputs exceeding this declared length are rejected.

### Performance Comparison: UHASH vs. Carter-Wegman
Initial tests demonstrated that UHASH significantly outperforms the Carter-Wegman construction for long inputs, while Carter-Wegman performs well for short inputs. Many software applications, such as in-kernel network stacks that hash portions of IP headers, often deal with small, fixed-length inputs. To optimize such scenarios, we developed carefully tuned functions. By fixing the input length, we could fully unroll the internal loop and avoid function calls. GCC inlines our hand-tuned function, enhancing performance. Additionally, the Carter-Wegman construction can be implemented with a smaller accumulator. For example, multiplying 8-bit values with 20-bit entries in the fixed vector and using a 32-bit accumulator allows us to handle inputs less than 16 bytes without overflow, resulting in a 20-bit hash value. The inputs are passed as separate formal arguments, facilitating inlining and specialization by the compiler.

### Universal Hash Microbenchmarks
We conducted microbenchmarking on a Pentium 2, 450MHz computer. Given that hash tables often use large amounts of data but read it only once, the working set size and its impact on cache miss rates are significant. Our microbenchmark measures the effects of cache hits and misses. We selected an array size, filled it with random data, and then hashed a random sub-range. The performance varies depending on whether the array fits in the L1 cache, L2 cache, or not.

#### Algorithms Tested
- **Perl 5.8.0 hash function**
- **MD5 (cryptographic hash function)**
- **UMAC (universal hash function)**
- **Carter-Wegman (one byte processing, variable-length input, 64-bit accumulator, 32-bit output)**
- **Carter-Wegman (two byte processing, 12-byte fixed input, 64-bit accumulator, 32-bit output)**
- **CW12 (Carter-Wegman, one byte processing, 12-byte fixed input, 32-bit accumulator, 20-bit output)**
- **XOR12 (a specialized function that XORs its input together, four bytes at a time)**

### Results
Figure 7 illustrates the impact of changing the working set size on hash performance. All hash functions were tested on 12-byte inputs, with array sizes chosen to fit within the L1 cache, L2 cache, or to miss both caches. The largest size simulates the effect of freshly read data from a network buffer. As expected, the simple XOR12 function outperforms others, but the performance gap narrows with larger working sets. For a 6MB working set, XOR12 achieves 50 MB/sec, while CW12-20 reaches 33 MB/sec, indicating that universal hashing can approach the performance of even the simplest hash functions.

### Effect of Input Length
Figure 8 shows the effect of varying input lengths on hash performance with a 6MB working set. For short strings, Perl's hash function outperforms others. However, for strings longer than about 44 bytes, UHASH outperforms all other functions, thanks to extensive performance tuning and hand-coded assembly routines.

### Integration into Perl
Preliminary benchmarks with integrating universal hashing into Perl showed that the application performance difference between UHASH and Perl’s default hash function is within ±10% for two scripts primarily performing hash table operations.

### Conclusions and Future Work
We conclude that our customized Carter-Wegman construction for short, fixed-length strings and UHASH for arbitrary strings offer high performance, making them suitable for production systems. Our code is available online under a BSD-style license.

### Acknowledgements
We thank John Garvin for his help in analyzing the Squid web proxy and Algis Rudys and David Rawlings for their feedback. We also thank David Wagner and Dan Boneh for discussions on universal hashing. This work is supported by NSF Grant CCR-9985332, Texas ATP grant #03604-0053-2001, and gifts from Microsoft and Schlumberger.

### References
[1] G. M. Adel’son-Vel’skii and Y. M. Landis. An algorithm for the organization of information. Soviet Mathematics Doklady, 3:1259–1262, 1962.
[2] Aleph1. Smashing the stack for fun and profit. Phrack #49, Nov. 1996. http://www.phrack.org/show.php?p=49&a=14.
[3] D. J. Bernstein. Floating-point arithmetic and message authentication. http://cr.yp.to/papers/hash127.ps, March 2000.
[4] J. Black, S. Halevi, H. Krawczyk, T. Krovetz, and P. Rogaway. UMAC: Fast and secure message authentication. In Advances in Cryptology – CRYPTO 99, pages 215–233, 1999. See also, http://www.cs.ucdavis.edu/~rogaway/umac/.
[5] J. L. Carter and M. N. Wegman. Universal classes of hash functions. Journal of Computer and System Sciences (JCSS), 18(2):143–154, Apr. 1979.
[6] T. H. Cormen, C. E. Leiserson, and R. L. Rivest. Introduction to Algorithms. MIT Electrical Engineering and Computer Science Series. MIT Press, 1990.
[7] P. B. Danzig, R. S. Hall, and M. F. Schwartz. A case for caching file objects inside internetworks. In Proceedings of the ACM SIGCOMM ’93 Conference on Communication Architectures, Protocols, and Applications, pages 239–248, San Francisco, CA, Sept. 1993.
[19] D.-E. C. Smorgrav. YA Apache DoS attack. Bugtraq mailing list, August 1998. http://lists.nas.nasa.gov/archives/ext/bugtraq/1998/08/msg00060.html.
[20] F. Weimer. Private communication, Apr. 2003.
[21] D. Wessels and K. Claffey. Application of Internet Cache Protocol (ICP), version 2. Technical Report RFC-2187, Internet Engineering Task Force, Sept. 1997. ftp://ftp.rfc-editor.org/in-notes/rfc2187.txt.
[8] D. Dean and A. Stubblefield. Using client puzzles to protect TLS. In Proceedings of the 10th USENIX Security Symposium, Washington, D.C., Aug. 2001.
[9] C. Dwork and M. Naor. Pricing via processing or combatting junk mail. Advances in Cryptology CRYPTO ’92, 740:139–147, August 1992.
[10] S. Garfinkel. Script for a king. HotWired Packet, Nov. 1996. http://hotwired.lycos.com/packet/garfinkel/96/45/geek.html, and see http://simson.vineyard.net/table.html for the table attack.
[11] L. J. Guibas and R. Sedgewick. A dichromatic framework for balanced trees. In Proceedings of 19th Foundations of Computer Science, pages 8–21, 1978.
[12] H. Krawczyk, M. Bellare, and R. Canetti. HMAC: Keyed-hashing for message authentication. Technical Report RFC-2104, Internet Engineering Task Force, Feb. 1997. ftp://ftp.rfc-editor.org/in-notes/rfc2104.txt.
[13] S. McCanne and V. Jacobson. The BSD packet filter: A new architecture for user-level packet capture. In USENIX Annual Technical Conference, pages 259–270, San Diego, California, Jan. 1993.
[14] National Laboratory for Applied Network Research. The Squid Internet object cache. http://www.squid-cache.org.
[15] V. Paxson. Bro: a system for detecting network intruders in real-time. Computer Networks, 31(23–24):2435–2463, 1999.
[16] X. Qie, R. Pang, and L. Peterson. Defensive Programming: Using an Annotation Toolkit to Build Dos-Resistant Software. In Proceedings of the Fifth Symposium on Operating Systems Design and Implementation, Boston, MA USA, December 2002.
[17] R. Seidel and C. R. Aragon. Randomized search trees. Algorithmica, 16(4/5):464–497, 1996.
[18] D. D. Sleator and R. E. Tarjan. Self-adjusting binary search trees. Journal of the ACM (JACM), 32(3):652–686, 1985.