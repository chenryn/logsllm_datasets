我想用一点时间来解释 Chris 的观点。想象一下，95%的ATM交易都依赖于COBOL代码，这正是我们与这种语言紧密相连的原因。然而，COBOL程序员的平均年龄并不比该语言本身年轻多少，通常在45岁到55岁之间。而新晋开发者对学习这门语言的兴趣不大。这就是我想要介绍一位特别嘉宾的原因。

**00:06:56 - Ritika Trikha**：大家好，我是Ritika Trikha。

**00:06:59 - Saron Yitbarek**：Ritika是一位技术编辑，曾在HackerRank工作过。她对COBOL面临的问题非常感兴趣——许多人认为COBOL不过是后大型机时代的一种无意义遗留物。

**00:07:12 - Ritika Trikha**：当今的开发人员几乎不再考虑或接触COBOL了。

**00:07:17 - Saron Yitbarek**：但这可能成为潜在灾难的根源。

**00:07:21 - Ritika Trikha**：尽管如此，仍有大量的企业业务依靠COBOL代码运行。每年至少新增15亿行COBOL代码。以美国国税局为例，其拥有约5000万行COBOL代码；社会保障局则有6000万行。这些机构处理着极其敏感且重要的信息。如果不对这些大型机系统进行持续的支持与维护，可能会引发严重问题。

**00:08:04 - Saron Yitbarek**：如果我们无法摆脱老旧的基础设施，也无法通过魔法瞬间重建整个大型机环境，那么我们应该怎么办呢？开发人员往往只关注未来的技术趋势，如何才能让他们重视并接纳过去的技术遗产呢？首先，我们必须正视这个问题。

**00:08:25 - Ritika Trikha**：年轻一代要么需要重新学习这些技能，要么必须找到一种方法对现有系统进行现代化改造。无论如何，这个问题不会自行消失。这也是为什么COBOL仍然活跃于今天的原因之一。

**00:08:35 - Saron Yitbarek**：这不是一件容易的事。Ritika认为我们忽视这个问题已经太久了。

**00:08:42 - Ritika Trikha**：替换数十亿行COBOL代码不仅成本高昂、复杂度高，而且风险极大。特别是当涉及到关键任务应用如社会保障和金融服务时。COBOL最初就是为处理大量商业交易而设计的。自上世纪60年代以来，“没坏就别修”的原则一直适用至今。但现在我们正处于一个转折点上，数十年积累下来的宝贵数据依然运行在COBOL之上。

**00:09:22 - Saron Yitbarek**：从某种意义上说，Ritika呼吁的是一种文化上的转变——改变对待“前进”与“倒退”的态度。随着软件行业历史的不断延伸，我们也越来越频繁地接触到自己的技术遗产。你不可能完全摆脱老化的基础设施，因此也不能忽略编程语言的历史价值。

**00:09:47 - Ritika Trikha**：有些事情必须得做。在我任职于HackerRank期间，亲眼目睹了许多银行及金融机构对于COBOL开发人员的需求几乎是到了绝望的地步。这是一个亟待解决的问题。要么我们需要开发出现代化系统作为替代方案，要么继续培训新人并对他们加以激励。我个人预测COBOL将再次迎来复兴时刻。试想一下，当所有掌握COBOL知识的老一辈开发者退休之后，而新一代却没有相应技能，会发生什么呢？总得采取行动才行。因此，在从COBOL向基于云的新架构迁移过程中，需要更加系统化和制度化的变革措施。

**00:10:37 - Saron Yitbarek**：Ritika Trikha是一位来自旧金山的技术作家。

**00:10:49 - Saron Yitbarek**：那么Ritika提到的那些基于云计算的新基础设施又如何呢？我们现在构建的技术栈是否也会像COBOL那样在未来几十年内束缚住我们的脚步？亚马逊网络服务（AWS）于2006年推出，谷歌云平台（GCP）紧随其后于2008年面世，微软Azure则是在2010年发布的。Go语言以其出色的并发支持特性而闻名，并迅速成为了新时代云计算的理想选择。

**00:11:26 - Carmen Andoh**：你好，我是Carmen Andoh，目前担任谷歌Go团队的产品经理。

**00:11:34 - Saron Yitbarek**：Carmen对Go语言及其与现代IT架构之间的关系有着深刻的理解。这一切都要从Go语言的设计者们说起，他们本身就是编程史上的重要人物。

**00:11:47 - Carmen Andoh**：Robert Pike、Robert Griesemer以及Ken Thompson都是从上世纪60年代起就开始活跃于计算机科学领域的先驱。Ken Thompson发明了B语言，并在此基础上创造了UNIX操作系统。Rob Pike则是UTF-8编码标准的主要贡献者之一，同时也参与了ASCII标准的制定。他还协助Ken Thompson共同开发了最初的UNIX编程环境。Ken Thompson后来还与Dennis Ritchie合作开发了C语言。

**00:12:28 - Saron Yitbarek**：Pike、Griesemer和Thompson加入Google之后发现了一个严重的问题：现有的编程语言并不能很好地支持大规模并发计算。人们常常需要花费数小时等待程序编译完成。当时使用的主要是C++，编写代码时还需要处理复杂的回调机制和事件调度器等问题。那是在2009年左右，随着IT基础设施的变化，像C++这样的传统语言开始显得力不从心。

**00:12:59 - Carmen Andoh**：多核处理器、分布式网络系统、大规模计算集群以及Web编程模型等新技术的应用带来了新的挑战。同时，程序员群体也在迅速扩大。直到那时为止，大多数编程语言都在试图绕开这些问题而不是正面解决它们。

**00:13:24 - Saron Yitbarek**：最终，情况发展到了一个临界点，迫使我们必须做出改变。

**00:13:30 - Carmen Andoh**：我们都厌倦了使用C++，于是决定尝试创造一种全新的语言。

**00:13:37 - Saron Yitbarek**：这种新语言需要能够完美适配最新的IT基础设施需求。

**00:13:43 - Carmen Andoh**：自从2005年云计算兴起以来，你不再需要拥有自己的服务器，而是可以通过租赁方式获得分布式的计算资源。但在这样一个环境中，消息传递和并发处理变得尤为重要。你需要确保异步操作对你来说不是障碍。Go语言默认支持异步编程模式。这意味着你可以同时向多个目标发送消息，而不必等待每个响应逐一返回。因此它非常适合处理高并发场景下的各种任务。

**00:14:28 - Carmen Andoh**：简而言之，云计算本质上是分布式的。Go语言正是为了满足这一需求而生。很快它就成了实现分布式计算的标准工具之一。这也是为什么Go能够在短时间内吸引众多开发者关注的原因所在。无论是从设计理念还是实际应用来看，Go都是最适合云时代的编程语言之一。此外，围绕Go建立起来的生态系统也日益成熟，涌现出了大量优秀的开源项目和库。

**00:15:06 - Saron Yitbarek**：不久之后，Kubernetes等关键应用程序也开始采用Go语言进行开发。谷歌甚至推出了名为Go Cloud的开源库集合，进一步增强了Go在云端的优势地位。显然，Go已经成为当前最热门的编程语言之一。它是云时代的语言。更重要的是，它的创造者们都有着丰富经验，能够确保所设计的语言具备长久生命力。

**00:15:33 - Carmen Andoh**：我认为业界其他人士也会认同这一点：“嘿，我觉得这种语言不会很快过时。”毕竟，它的创始人可是已经在编程领域耕耘了五六十年之久的人。

**00:15:47 - Saron Yitbarek**：Carmen Andoh是谷歌Go团队的产品经理。

**00:15:54**：现在我们有了这样一种专为云时代设计的新语言Go，旨在提供所需的高性能并发能力。这听起来很棒。Go的设计者们也有着创造长寿语言的良好记录。但我的问题是：50年后，当Go变得像今天的COBOL一样古老时，这对我们意味着什么？当世界上充斥着只有少数资深开发人员才能理解的老版Go代码时，又会怎样？面对日益老化的云基础设施，我们是否做好了充分准备？我们能否从COBOL和大型机的经验中吸取教训，从而为Go和未来的云计算打造一个更加光明的前景？

**00:16:40**：幸运的是，我找到了一个可以解答这些问题的最佳人选。

**00:16:51**：我们如何让我们的语言面向未来？我们知道它们与当今的IT基础设施密切相关。我们也知道随着时间推移，新的基础设施必将取代旧有的系统。那么我们现在应该做些什么，以确保将来能够顺利过渡？

**00:17:10 - Kelsey Hightower**：我是Kelsey Hightower，在谷歌担任开发者大使一职。我的工作重点在于推广开放性技术和将其应用于谷歌云产品中。

**00:17:19 - Saron Yitbarek**：Kelsey花了很多时间思考编程的未来方向。我很想知道，有一天我们是否会遇到类似今天缺少COBOL专家的情况——一群掌握Go语言技能的老龄化程序员。我们是否正在为此长远的目标做规划？于是我与Kelsey坐下来进行了深入探讨。

**00:17:42 - Kelsey Hightower**：...等等。但是如果你考虑到当今面临的许多新挑战，比如互联网带来的海量用户访问量、成千上万的并发请求以及多种不同类型的硬件架构组合等复杂情境，你就明白为什么我们需要一种新语言来应对这些问题了。举例来说，JavaScript就是为了适应Web环境而诞生的，你肯定不想尝试用COBOL来进行Web开发吧？事实上，如今已经有数百种高度专业化的编程语言可供选择，每一种都有其独特的优势所在。