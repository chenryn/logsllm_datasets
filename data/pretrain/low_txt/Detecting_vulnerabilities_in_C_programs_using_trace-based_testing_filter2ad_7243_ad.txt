### Remark
- 1 new bug
- 1 new bug
- 1 new bug
- 1 new bug
- 2 new bugs
- 2 new bug
- 4 new bugs
- 1 new bug

According to the BAD marks in the program, there are 6 bugs in the trace. However, we found that one of them is not a bug.

### Table 3. Experimental Results
- **LOC**: Number of lines of code.
- **Input**: Program input used.
- **LOT**: Number of lines in the execution trace exercised by the test case.
- **Time**: Time taken by our tool.
- **#KnownBugs**: Number of previously reported vulnerabilities in the execution trace.
- **#FoundBugs**: Number of vulnerabilities found by SecTAC.
- **#FP**: Number of false positives.

The default values provided in [28] are used in the table.

### Test Case Generation
For HTTP server programs, we randomly generate 50 normal HTTP requests. For the FTP server program, we manually generate 10 test cases that include basic FTP commands such as "ls", "get", and "put". We use the GCC bounds checking extension to monitor the program execution. These test cases do not trigger any out-of-bounds operations. Below, we describe the test inputs for each benchmark program tested in the experiment.

#### Bind Programs
- **Bind 1**: Buffer overflow occurs when a negative value is passed as the third argument of `memcpy`. In [28], a constant string "sls.lcs.mit.edu" is hard-coded as the second argument of `strcpy` to achieve this. We use "www.cnn.com" instead, which is a normal test data under which the program runs normally, and SecTAC can detect this vulnerability.
- **Bind 2**: We use the string "cnn.com" as the normal test input instead of the original hard-coded input "sls.lcs.mit.edu" that crashes the program.
- **Bind 3**: The program does not check the buffer space when calling `memcpy`. The provided test case is a file `s3.in` with content "9283721". We noticed that as long as its content is not "0", the vulnerability always occurs. Thus, we use the original test case.
- **Bind 4**: The program uses `sprintf` without boundary checking. A string of 1072 bytes long is provided in [28] to trigger the vulnerability. We use a normal test input as given in Table 3.

#### Sendmail Programs
Most vulnerabilities in the Sendmail programs are caused by out-of-bounds pointer operations, usually in a loop where the pointer is incremented by 1 for each iteration. In the execution trace, the out-of-bounds operation of a pointer only occurs when a test case can actually trigger the vulnerability. Therefore, we use the test cases provided by the benchmark programs in our experiments.

#### Wu-ftp Programs
- **Wu-ftp 1**: The original test case in [28] is "/tmp/" followed by 24 'a's, designed to trigger the buffer overflow caused by `strcpy`. We use a normal input "/tmp/aa" that does not trigger the vulnerability.
- **Wu-ftp 2**: The original test case is a specific complex path with 9 subdirectories, triggering the vulnerability caused by `strcat`. We use "/tmp/test.c", which is the path of an existing file and does not trigger the vulnerability.
- **Wu-ftp 3**: The length of the input path is made more than 47 to trigger the vulnerability caused by `strcpy`. We use a normal input "/tmp/aa" that does not trigger the vulnerability.

### Performance
Experiments were conducted on a 2GHz Core 2 Desktop running Ubuntu-8.10 Linux operating system. Java was configured to use a maximum of 1G heap memory. The fifth column of Table 3 shows the execution time of SecTAC for analyzing all traces for each program. The execution time is the sum of the times needed for trace-based symbolic execution and satisfiability analysis, which increases nearly linearly with the trace size. SecTAC can quickly analyze C programs for vulnerabilities.

In addition to the known bugs, SecTAC detected six new vulnerabilities in the 14 benchmark programs, as shown in Table 4. Test cases that trigger these vulnerabilities can be directly derived from the solutions given by the satisfiability checker Yices [7] in SecTAC.

### New Vulnerabilities
| Program         | Test Input Triggering the New Vulnerability | Location of the New Vulnerability        | Remarks                       |
|-----------------|---------------------------------------------|-----------------------------------------|-------------------------------|
| Bind 4          | www.cnn.com; www.nbc.com                    | ns-lookup-bad.c:277                     | nsp out-of-bound              |
| Sendmail 1      | default                                     | crackaddr-bad.c:460                     | buflim out-of-bound           |
| Sendmail 3      | default                                     | mime1-bad.c:212                         | infile out-of-bound           |
| Wu-ftp 2        | a 200 bytes long string for argv[1]         | call fb realpath.c:94                   | strcpy buffer overflow        |
| Wu-ftp 3        | /a...a (48 a’s)/aa                          | realpath-2.4.2-bad.c:269                | where out-of-bound            |
| Wu-ftp 3        | /a...a (48 a’s)/aa                          | realpath-2.4.2-bad.c:257                | strcpy buffer overflow        |

Notably, we detected a vulnerability in code that was previously considered safe. The authors of [28] explicitly commented that line 257 of file `realpath-2.4.2-bad.c` in the Wu-ftp 3 program was safe. However, our experiment shows that it is not. When the length of a directory name is long enough, the `strcpy` function at line 257 will overflow the destination buffer, whose size is only 46 bytes.

### Additional Findings
- **nullhttpd-0.5.1**: SecTAC found three buffer overflow vulnerabilities at line 143 of file "http.c". Additionally, it found a new vulnerability at line 58 of file "config.c", where the program uses `snprintf` to copy a string variable `config.server_base_dir` and a constant string "/bin" to buffer `server_bin_dir`. If the string length of `config.server_base_dir` is 255, the buffer is not null-terminated, causing a configuration error. Lines 59 to 61 in the same file have the same vulnerability.
- **lancer program**: SecTAC found four buffer overflow problems in "handler.c" and "host.c". These problems occur because the author declared a buffer with size `n` and used `strncpy` to copy at most `n-1` non-zero characters. However, the value at position `n-1`, which does not belong to this buffer, could be a non-zero value, leading to potential buffer overflows.
- **bftpd-2.3**: SecTAC detected that the buffer "bu host" (whose content is from an external input) may not be properly null-terminated. We reported this vulnerability to the author, and a new version was subsequently released to fix this bug.

### Related Work
- **[14]**: Detects buffer overflow using existing test cases but does not perform symbolic analysis and ignores branch conditions, leading to many false alarms.
- **[16]**: Uses predictive testing by inserting assertions into the source program and combining concrete and symbolic execution on given test inputs to discover assertion violations.
- **DART [11, 10]** and **CUTE [22]**: Can automatically generate test cases but use concrete values for complex constraints they cannot handle, potentially missing many paths covered by carefully designed traditional tests.
- **SPLAT [26]**: Improves DART by introducing a length attribute in each buffer and representing a fixed-length prefix of the buffer elements symbolically. However, when the program visits a buffer element beyond the prefix, their symbolic execution becomes concrete.
- **EXE [6]** and **KLEE [4]**: Developed to achieve high branch coverage and can detect memory overflow vulnerabilities.
- **SAGE [12]**: Employs trace-based symbolic execution with satisfiability analysis but works on the binary level, losing much useful information from the source code.

### Limitations and Suggestions
SecTAC has several limitations:
- **Test Case Availability**: We must have the test cases ready before conducting security testing. The effectiveness of SecTAC depends on the completeness of the existing test cases, and the branch coverage of the test cases determines the number of paths that our method can check.
- **Execution Trace Size**: For large, complex programs, the size of an execution trace can be enormous. Analyzing a large execution trace can cause many problems, such as generating a large number of security constraints, which can slow down security testing significantly. We plan to improve SecTAC by managing program and security constraints more efficiently, e.g., using BDDs [2, 3].

### Conclusion and Future Work
We proposed an approach for testing the security of C programs using trace-based symbolic execution and satisfiability analysis. We developed a tool named SecTAC to demonstrate the effectiveness of our approach. We evaluated this tool on 14 benchmark programs and 3 open-source programs. The results show that our tool quickly identified every reported vulnerability in the traces and also found 13 new vulnerabilities. In conclusion, our tool is effective and efficient in testing the security of current software systems.

Future work includes:
- **Multi-threaded Programs**: Although our approach can handle multi-threaded programs, it only analyzes a specific combination of the traces generated by different threads. We propose to identify the trace for each thread and seek effective ways to combine them to improve the detection of security vulnerabilities in multi-threaded programs.
- **Efficiency Improvement**: We will seek solutions to further improve the efficiency of SecTAC and conduct more experiments on large and complex programs to evaluate our approach.

### Acknowledgment
The authors would like to thank the anonymous reviewers for their valuable comments.

### References
[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-flow integrity. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), pages 340–353, 2005.
[2] S. B. Akers. Binary decision diagrams. IEEE Transaction on Computers, C-27(6):509 – 516, June 1978.
[3] R. E. Bryant. Graph-based algorithms for boolean function manipulation. IEEE Transaction on Computers, C-35(8):677–691, 1986.
[4] C. Cadar, D. Dunbar, and D. Engler. KLEE: Unassisted and automatic generation of high-coverage tests for complex system programs. In Proceedings of the USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2008.
[5] C. Cadar and D. Engler. Execution generated test cases: How to make systems code crash itself. In Proceedings of the International SPIN Workshop on Model Checking of Software, 2005.
[6] C. Cadar, V. Ganesh, P. Pawlowski, D. Dill, and D. Engler. EXE: automatically generating inputs of death. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), pages 322–335, 2006.
[7] B. Dutertre and L. de Moura. A fast linear-arithmetic solver for DPLL(T). In Proceedings of the Computer-Aided Verification Conference (CAV), pages 81–94, 2006.
[8] G. Fink, C. Ko, M. Archer, and K. Levitt. Towards a property-based testing environment with applications to security-critical software. In Proceedings of the 4th Irvine Software Symposium, pages 39–48, 1994.
[9] A. Ghosh, T. O’Connor, and G. McGraw. An automated approach for identifying potential vulnerabilities in software. In Proceedings of the IEEE Symposium on Security and Privacy, pages 104–114, 1998.
[10] P. Godefroid. Compositional dynamic test generation. In Proceedings of the Symposium on Principles of Programming Languages (POPL), 2007.
[11] P. Godefroid, N. Klarlund, and K. Sen. DART: directed automated random testing. In Proceedings of the ACM SIGPLAN conference on Programming Language Design and Implementation, pages 213–223, 2005.
[12] P. Godefroid, M. Y. Levin, and D. Molnar. Automated white-box fuzz testing. In Proceedings of the Network and Distributed Systems Security (NDSS), pages 151–166, 2008.
[13] R. Hastings and B. Joyce. Purify: Fast detection of memory leaks and access errors. In Proceedings of the Winter USENIX Conference, pages 125–136, 1992.
[14] E. Haugh and M. Bishop. Testing C programs for buffer overflow vulnerabilities. In Proceedings of the Network and Distributed System Security Symposium (NDSS), pages 123–130, 2003.
[15] R. Jones and P. Kelly. Backwards-compatible bounds checking for arrays and pointers in C programs. In Proceedings of the International Workshop on Automated Debugging, 1997.
[16] P. Joshi, K. Sen, and M. Shlimovich. Predictive testing: amplifying the effectiveness of software testing. In Proceedings of the Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pages 561–564, 2007.
[17] P. Marinescu and G. Candea. LFI: A practical and general library-level fault injector. In Proceedings of the International Conference on Dependable Systems and Networks (DSN), 2009.
[18] G. C. Necula, S. McPeak, S. Rahul, and W. Weimer. CIL: Intermediate language and tools for analysis and transformation of C programs. In Proceedings of the International Conference on Compiler Construction, pages 213–228, 2002.
[19] S. Ranise and C. Tinelli. The satisfiability modulo theories library (SMT-LIB). www.SMT-LIB.org, 2006.
[20] M. Ringenburg and D. Grossman. Preventing format-string attacks via automatic and efficient dynamic checking. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), pages 354–363, 2005.
[21] K. Sen. Concolic testing. In Proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE), 2007.
[22] K. Sen, D. Marinov, and G. Agha. CUTE: a concolic unit testing engine for C. In Proceedings of the joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT International Symposium on Foundations of Software Engineering, pages 263–272, 2005.
[23] E. C. Sezer, P. Ning, C. Kil, and J. Xu. Memsherlock: an automated debugger for unknown memory corruption vulnerabilities. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), pages 562–572, 2007.
[24] J. Viega, J. T. Bloch, Y. Kohno, and G. McGraw. ITS4: A static vulnerability scanner for C and C++ code. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), page 257, 2000.
[25] D. Wagner, J. Foster, E. Brewer, and A. Aiken. A first step towards automated detection of buffer overrun vulnerabilities. In Proceedings of the Network and Distributed System Security Symposium (NDSS), pages 3–17, 2000.
[26] R. Xu, P. Godefroid, and R. Majumdar. Testing for buffer overflows with length abstractions. In Proceedings of the International Symposium on Software Testing and Analysis (ISSTA), pages 27–38, 2008.
[27] M. Zhivich, T. Leek, and R. Lippmann. Dynamic buffer overflow detection. In Proceedings of the Workshop on the Evaluation of Software Defect Detection Tools, 2005.
[28] M. Zitser, R. Lippmann, and T. Leek. Testing static analysis tools using exploitable buffer overflows from open source code. In Proceedings of the ACM SIGSOFT International Symposium on Foundations of Software Engineering, pages 97–106, 2004.