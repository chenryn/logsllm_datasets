# WebWitness: Investigating, Categorizing, and Mitigating Malware Download Paths

**Authors:**
- Terry Nelms (Damballa, Inc. and Georgia Institute of Technology)
- Roberto Perdisci (University of Georgia and Georgia Institute of Technology)
- Manos Antonakakis (Georgia Institute of Technology)
- Mustaque Ahamad (Georgia Institute of Technology and New York University Abu Dhabi)

**Publication:**
- Proceedings of the 24th USENIX Security Symposium
- August 12â€“14, 2015, Washington, D.C.
- ISBN: 978-1-939133-11-3
- Open access sponsored by USENIX

## Abstract

Modern malware download attacks often occur through web browsers, typically via social engineering and drive-by downloads. In this paper, we investigate the "origin" of such attacks experienced by real network users, with the goal of improving defenses against malware downloads. Specifically, we study the web paths followed by users who eventually fall victim to different types of malware downloads. To achieve this, we propose a novel incident investigation system called WebWitness. Our system has two main objectives:
1. Automatically trace back and label the sequence of events (e.g., visited web pages) preceding malware downloads to highlight how users reach attack pages on the web.
2. Leverage these labeled in-the-wild malware download paths to better understand current attack trends and develop more effective defenses.

We deployed WebWitness on a large academic network for ten months, collecting and categorizing thousands of live malicious download paths. Our analysis of this data allowed us to design a new defense against drive-by downloads that rely on injecting malicious content into (hacked) legitimate web pages. For example, using the information provided by WebWitness, we can decrease the infection rate for this type of drive-by download by almost six times, on average, compared to existing URL blacklisting approaches.

## Introduction

Remote malware downloads are currently the most common infection vector, with the majority occurring via the browser due to social engineering and drive-by downloads. While there is extensive research on detecting drive-by downloads and some studies on social engineering attacks, little attention has been given to investigating and categorizing the web browsing paths followed by users before they reach the attack pages.

### Our Work

In this paper, we study the web paths followed by real users who become victims of different types of malware downloads, including social engineering and drive-by downloads. Our primary goals are:
1. Provide context to the attack by automatically identifying and labeling the sequence of web pages visited by the user prior to the attack, giving insight into how users reach attack pages.
2. Leverage these annotated in-the-wild malware download paths to better understand current attack trends and develop more effective defenses.

To achieve these goals, we propose a novel malware download incident investigation system called WebWitness, designed for passive deployment on enterprise-scale networks. The system consists of two main components:
- **Attack Path Traceback and Categorization (ATC) Module:** Identifies and links all HTTP requests and responses that constitute the web path from an "origin" node (e.g., a search engine) to the actual malware download page, filtering out irrelevant traffic. A statistical classifier then categorizes the collected malware download paths into update, social engineering, and drive-by attacks.
- **Malware Download Defense (MDD) Module:** Uses the annotated malware download paths (AMPs) to aid in the study of recent attack trends and to design and build new defenses.

The AMPs are continuously updated as new malware downloads are detected, providing valuable data for designing new defenses. For example, by analyzing real-world web paths leading to drive-by malware downloads, we found that it is often possible to automatically trace back the domain names used in drive-by attacks to inject malicious code into compromised web pages. Blocking these domain names is a more effective defense compared to blacklisting URLs that directly serve the drive-by browser exploits or the actual malware executables.

### Main Differences from Previous Work

Most previous works on malware downloads focus on building detection systems, particularly for drive-by exploit kits. Our work differs because our goal is not to build a detection system but to passively trace back and automatically label the network events preceding different types of in-the-wild malware downloads, including both drive-by and social engineering attacks. We show that our investigation approach can aid in the design of more effective malware download defenses.

Some recent studies focus on detecting malicious redirection chains to identify potential malware download events. WebWitness, however, uses a generic path traceback approach that does not rely on the properties of redirection chains. It aims to provide context around malicious downloads by reconstructing the full web path from an "origin" page to the download event, classifying the cause of the download, and identifying the roles of the domains involved in the attack.

### Summary of Contributions

- We investigate the web paths followed by real network users who fall victim to different types of malware downloads, providing quantitative information on attack scenarios.
- We build a system called WebWitness that can automatically trace back and categorize in-the-wild malware downloads, enabling the continuous collection and study of web paths leading to malware download attacks.
- We deployed WebWitness on a large academic network for ten months, collecting and categorizing thousands of live malicious download paths. Using this data, we designed a new defense against drive-by downloads that relies on injecting malicious content into hacked legitimate web pages, reducing the infection rate by almost six times compared to existing URL blacklisting approaches.

## In-The-Wild Malware Download Study

### Goals

In this section, we report the results of a large study of in-the-wild malware downloads captured on a live academic network. Our aim is to create a labeled dataset of download paths to design, train, and evaluate the ATC and MDD modules of WebWitness.

### Collecting Executable File Downloads

To collect executable file downloads, we use deep packet inspection to perform on-the-fly TCP flow reconstruction, keeping a buffer of all recent HTTP transactions observed on the network. For each transaction, we check the response content to determine if it contains an executable file. If so, we retrieve all buffered HTTP transactions related to the client that initiated the download, allowing us to study the web path users follow before falling victim to malware downloads. All data is saved in accordance with our Institutional Review Board policies and protected under a nondisclosure agreement.

### Identifying Malicious Executables

We exclude all executable downloads from a manually-compiled whitelist of approximately 120 second-level domains (e.g., microsoft.com, google.com). For the remaining downloads, we scan them with more than 40 antivirus (AV) engines using virustotal.com, periodically rescanning to account for zero-day malware. We label a file as malicious if at least one of the top five AV vendors and a minimum of two other AVs detect it as malicious. The remaining downloads are considered benign until the rescan. We also discard binary samples with generic or heuristic-based labels.

### Overview of Study Data

We deployed our collection agent on a large academic network serving tens of thousands of users for six months. During this period, we collected 174,376 executable downloads from non-whitelisted domains, labeling 5,536 as malicious. Many of these were related to adware, so we used heuristics to separate adware from malware, resulting in 1,064 malware downloads with 533 unique samples. We performed extensive manual analysis of these download paths, categorizing them into 164 drive-by, 41 social engineering, and 328 update/drop malware download events.

### Study Data Limitations

Our collection agent was deployed on an existing production network monitoring sensor with limited hardware resources. We collected downloads only during off-peak hours to avoid overloading the sensor. Additionally, our system monitors the network passively, so any malicious downloads preemptively blocked by existing defenses (e.g., URL blacklists like Google Safe Browsing) were not observed. Despite these limitations, we believe the 533 malware downloads to be sufficiently diverse and representative of the overall set of malware downloads during our study period.

### Download Path Traceback Challenges

[Further details on the challenges and methods for tracing back download paths can be added here.]