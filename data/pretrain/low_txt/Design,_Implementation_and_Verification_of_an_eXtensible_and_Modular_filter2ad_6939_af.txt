### Quality Attributes and Analysis

Our work reaffirms the importance of integrating quality attributes into the analysis process, making such an analysis more manageable [59]. This study demonstrates the synergy and criticality of architecture and analysis in developing an integrity-protected hypervisor.

### Interface-Constrained Adversary Model

The concept of an interface-constrained adversary [33], [60] has been widely used to model and verify security properties in various systems. By defining the attacker's interface, it becomes possible to systematically and rigorously reason about security guarantees. In our work, we apply this idea by restricting the attacker’s interface to a set of intercept handlers, which is crucial for the feasibility of DRIVE.

### Software Model Checking and Static Analysis

Several projects have utilized software model checking and static analysis to detect errors in source code without specifying an attacker model. Some of these projects, such as [61]–[63], target general classes of bugs, while others focus on specific types of errors. For example, Kidd et al. [64] detect atomic set serializability violations, and Emmi et al. [65] verify the correctness of reference counting implementations. These approaches often require abstractions like random isolation [64] or predicate abstraction [65], leading to potential unsoundness or incompleteness. In contrast, our methodology focuses on developing a hypervisor that achieves a specific security property against a well-defined attacker.

### Verifying Security of Operating Systems and Hypervisors

There have been several projects aimed at verifying the security of operating system and hypervisor implementations. Neumann et al. [66], Rushby [67], and Shapiro and Weber [68] propose manually proving properties using logic without an explicit adversary model. Other groups, such as [18]–[20], have employed theorem proving to verify security properties of OS implementations. Barthe et al. [69] formalized an idealized model of a hypervisor in the Coq proof assistant, and Alkassar et al. [70], [71] and Baumann et al. [72] annotated the C code of a hypervisor and used the VCC [21] verifier to prove correctness properties. Theorem-proving approaches are applicable to a broader class of properties but require significant manual effort. For instance, the seL4 verification [20] required several person-years of effort to relate the C implementation with a high-level specification. However, since the high-level specification does not include an explicit adversary, it does not imply the memory integrity property we are interested in. Our approach, while more automated, focuses on a specific security property (memory integrity) with an explicit adversary model. However, we do not verify full functional correctness, so we cannot claim, for example, that our system will never crash.

### Conclusion and Future Work

We propose an eXtensible and Modular Hypervisor Framework (XMHF), which aims to be a comprehensible and flexible platform for building hypervisor applications ("hypapps"). XMHF is designed to enable automated verification of hypervisor memory integrity. The automated verification was performed on the actual source code of XMHF, consisting of 5208 lines of C code, using the CBMC model checker. We believe XMHF provides a solid foundation for research and development on hypervisors with rigorous and "designed-in" security guarantees. Given its features and performance, XMHF can significantly enhance security-oriented hypervisor research and development.

#### Future Directions
1. **Modular Verification**: Extend the verification to the XMHF core composed with hypapps.
2. **Other Security Properties**: Expand DRIVE to other security properties, such as secrecy, despite the challenges posed by less well-defined attacker interfaces due to covert channels.
3. **Concurrent Execution**: Include support for concurrent execution within XMHF and the hypapps, while maintaining memory integrity.

### Acknowledgements

We thank our shepherd, William Enck, for his assistance with the final version of this paper, and the anonymous reviewers for their detailed comments. We also want to thank Adrian Perrig, Virgil Gligor, and Zongwei Zhou for stimulating conversations on XMHF. This work was partially supported by NSF grants CNS-1018061, CCF-0424422, CNS-0831440, and an AFOSR MURI on Science of Cybersecurity. Copyright 2012 Carnegie Mellon University and IEEE.

### References

[1] C. Chen, P. Maniatis, A. Perrig, A. Vasudevan, and V. Sekar, “Towards verifiable resource accounting for outsourced computation,” in Proc. of ACM VEE, 2013.

[2] A. Vasudevan, B. Parno, N. Qu, V. D. Gligor, and A. Perrig, “Lockdown: Towards a safe and practical architecture for security applications on commodity platforms,” in Proc. of TRUST, Jun. 2012.

[3] Z. Wang, C. Wu, M. Grace, and X. Jiang, “Isolating commodity hosted hypervisors with hyperlock,” in Proc. of EuroSys 2012.

[4] Z. Zhou, V. D. Gligor, J. Newsome, and J. M. McCune, “Building verifiable trusted path on commodity x86 computers,” in Proc. of IEEE S&P, May 2012.

[5] F. Zhang, J. Chen, H. Chen, and B. Zang, “CloudVisor: retrofitting protection of virtual machines in multi-tenant cloud with nested virtualization,” in Proc. of SOSP, 2011.

[6] A. Vasudevan, N. Qu, and A. Perrig, “Xtrec: Secure real-time execution trace recording on commodity platforms,” in Proc. of IEEE HICSS, Jan. 2011.

[7] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig, “TrustVisor: Efficient TCB reduction and attestation,” in Proc. of IEEE S&P, May 2010.

[8] A. Fattori, R. Paleari, L. Martignoni, and M. Monga, “Dynamic and transparent analysis of commodity production systems,” in Proc. of IEEE/ACM ASE 2010.

[9] L. Litty, H. A. Lagar-Cavilla, and D. Lie, “Hypervisor support for identifying covertly executing binaries,” in Proc. of USENIX Security Symposium, 2008.

[10] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “SecVisor: A tiny hypervisor to provide lifetime kernel code integrity for commodity OSes,” in Proc. of SOSP, 2007.

[11] X. Xiong, D. Tian, and P. Liu, “Practical protection of kernel integrity for commodity OS from untrusted extensions,” in Proc. of NDSS 2011.

[12] L. Singaravelu, C. Pu, H. Haertig, and C. Helmuth, “Reducing TCB complexity for security-sensitive applications: Three case studies,” in Proc. of EuroSys, 2006.

[13] R. Ta-Min, L. Litty, and D. Lie, “Splitting Interfaces: Making Trust Between Applications and Operating Systems Configurable,” in Proc. of SOSP, 2006.

[14] A. Dinaburg, P. Royal, M. Sharif, and W. Lee, “Ether: malware analysis via hardware virtualization extensions,” in Proc. of ACM CCS 2008.

[15] D. Quist, L. Liebrock, and J. Neil, “Improving antivirus accuracy with hypervisor assisted analysis,” J. Comput. Virol., vol. 7, no. 2, May 2011.

[16] M. I. Sharif, W. Lee, W. Cui, and A. Lanzi, “Secure in-VM monitoring using hardware virtualization,” in Proc. of ACM CCS, 2009.

[17] X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A. Waldspurger, D. Boneh, J. Dwoskin, and D. R. K. Ports, “Overshadow: A virtualization-based approach to retrofitting protection in commodity operating systems,” in Proc. of ASPLOS, Mar. 2008.

[18] B. J. Walker, R. A. Kemmerer, and G. J. Popek, “Specification and verification of the UCLA Unix security kernel,” Communications of the ACM (CACM), vol. 23, no. 2, 1980.

[19] C. L. Heitmeyer, M. Archer, E. I. Leonard, and J. D. McLean, “Formal specification and verification of data separation in a separation kernel for an embedded system,” in Proc. of ACM CCS, 2006.

[20] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and S. Winwood, “seL4: formal verification of an OS kernel,” in Proc. of SOSP, 2009.

[21] E. Cohen, M. Dahlweid, M. A. Hillebrand, D. Leinenbach, M. Moskal, T. Santen, W. Schulte, and S. Tobies, “VCC: A Practical System for Verifying Concurrent C,” in Proc. of TPHOLs, 2009.

[22] E. Clarke, D. Kroening, and F. Lerda, “A Tool for Checking ANSI-C Programs,” in Proc. of TACAS, 2004.

[23] Intel Corporation, “Intel 64 and IA-32 Architectures Software Developer’s Manual Combined Volumes:1, 2A, 2B, 2C, 3A, 3B, and 3C,” 2011.

[24] Advanced Micro Devices, “AMD64 architecture programmer’s manual: Volume 2: System programming,” AMD Publication no. 24594 rev. 3.11, Dec. 2005.

[25] ARM Limited, “Virtualization extensions architecture specification,” http://infocenter.arm.com, 2010.

[26] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti, “Control-Flow Integrity principles, implementations and applications,” TISSEC, vol. 13, no. 1, 2009.

[27] L. Jia, D. Garg, and A. Datta, “Compositional security for higher-order programs,” Carnegie Mellon University, Tech. Rep. CMU-CyLab-13-001, 2013, online at http://www.andrew.cmu.edu/user/liminjia/compositional.

[28] M. Ben-Yehuda, M. D. Day, Z. Dubitzky, M. Factor, N. Har’El, A. Gordon, A. Liguori, O. Wasserman, and B.-A. Yassour, “The turtles project: design and implementation of nested virtualization,” in Proc. of OSDI 2010.

[29] RedHat, “KVM – kernel based virtual machine,” http://www.redhat.com/f/pdf/rhev/DOC-KVM.pdf, 2009.

[30] P. Karger and D. Safford, “I/O for virtual machine monitors: Security and performance issues,” IEEE Security and Privacy, vol. 6, no. 5, 2008.

[31] N. Elhage, “Virtunoid: Breaking out of KVM,” Defcon, 2011.

[32] Z. Wang and X. Jiang, “Hypersafe: A lightweight approach to provide lifetime hypervisor control-flow integrity,” in Proc. of IEEE S&P, 2010.

[33] A. Datta, J. Franklin, D. Garg, and D. Kaynar, “A logic of secure systems and its application to trusted computing,” in Proc. of IEEE S&P, 2009.

[34] T. Ball, E. Bounimova, V. Levin, R. Kumar, and J. Lichtenberg, “The static driver verifier research platform,” in Proc. of CAV, 2010.

[35] J. Alglave, D. Kroening, and M. Tautschnig, “Partial orders for efficient BMC of concurrent software,” CoRR, vol. abs/1301.1629, 2013.

[36] J. Franklin, S. Chaki, A. Datta, and A. Seshadri, “Scalable Parametric Verification of Secure Systems: How to Verify Reference Monitors without Worrying about Data Structure Size,” in Proc. of IEEE S&P, 2010.

[37] J. Franklin, S. Chaki, A. Datta, J. M. McCune, and A. Vasudevan, “Parametric Verification of Address Space Separation,” in Proc. of POST, 2012.

[38] T. A. Henzinger, R. Jhala, R. Majumdar, and G. Sutre, “Lazy Abstraction,” in Proc. of POPL, 2002.

[39] E. M. Clarke, D. Kroening, N. Sharygina, and K. Yorav, “SATABS: SAT-Based Predicate Abstraction for ANSI-C,” in Proc. of TACAS, 2005.

[40] D. Kroening and G. Weissenbacher, “Interpolation-Based Software Verification with Wolverine,” in Proc. of CAV, 2011.

[41] E. M. Clarke, O. Grumberg, S. Jha, Y. Lu, and H. Veith, “Counterexample-guided abstraction refinement for symbolic model checking,” Journal of the ACM, vol. 50, no. 5, 2003.

[42] T. Ball and S. K. Rajamani, “Automatically Validating Temporal Safety Properties of Interfaces,” in Proc. of SPIN, 2001.

[43] S. Graf and H. Saïdi, “Construction of Abstract State Graphs with PVS,” in Proc. of CAV, 1997.

[44] T. Shinagawa, H. Eiraku, K. Tanimoto, K. Omote, S. Hasegawa, T. Horie, M. Hirano, K. Kourai, Y. Oyama, E. Kawai, K. Kono, S. Chiba, Y. Shinjo, and K. Kato, “Bitvisor: a thin hypervisor for enforcing I/O device security,” in Proc. of ACM SIGPLAN/SIGOPS VEE 2009.

[45] J. Szefer, E. Keller, R. B. Lee, and J. Rexford, “Eliminating the hypervisor attack surface for a more secure cloud,” in Proc. of ACM CCS, 2011.

[46] E. Keller, J. Szefer, J. Rexford, and R. B. Lee, “Nohype: virtualized cloud infrastructure without the virtualization,” in Proc. of ISCA, 2010.

[47] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt, and A. Warfield, “Xen and the art of virtualization,” in Proc. of SOSP, 2003.

[48] VMware Corporation, “VMware ESX, bare-metal hypervisor for virtual machines,” http://www.vmware.com, Nov. 2008.

[49] U. Steinberg and B. Kauer, “Nova: a microhypervisor-based secure virtualization architecture,” in Proc. of the Eurosys.

[50] J. Rutkowska and R. Wojtczuk, “Qubes OS architecture,” http://qubes-os.org, 2010.

[51] R. Wojtczuk, “Detecting and preventing the Xen hypervisor subversions,” Invisible Things Lab, 2008.

[52] “Elevated privileges,” CVE-2007-4993, 2007.

[53] “Multiple integer overflows allow execution of arbitrary code,” CVE-2007-5497, 2007.

[54] R. Wojtczuk and J. Rutkowska, “Xen 0wning trilogy,” Invisible Things Lab, 2008.

[55] R. Wojtczuk, “Subverting the Xen hypervisor,” Invisible Things Lab, 2008.

[56] B. Ford, G. Back, G. Benson, J. Lepreau, A. Lin, and O. Shivers, “The flux Oskit: A substrate for OS and language research,” in Proc. of ACM SOSP 1997.

[57] M. Shaw and D. Garlan, Software architecture - perspectives on an emerging discipline. Prentice Hall, 1996.

[58] L. Bass, P. Clements, and R. Kazman, Software Architecture in Practice. Addison Wesley, 2003.

[59] K. Wallnau, “Volume III: A Technology for Predictable Assembly from Certifiable Components,” Software Engineering Institute, Carnegie Mellon University, Technical report CMU/SEI-2003-TR-009, 2003.

[60] D. Garg, J. Franklin, D. K. Kaynar, and A. Datta, “Compositional System Security with Interface-Conﬁned Adversaries,” ENTCS, vol. 265, 2010.

[61] S. Hallem, B. Chelf, Y. Xie, and D. Engler, “A system and language for building system-specific, static analyses.”

[62] H. Chen and D. Wagner, “MOPS: an infrastructure for examining security properties of software,” in Proc. of CCS, 2002.

[63] J. Yang, P. Twohey, D. R. Engler, and M. Musuvathi, “Using model checking to find serious file system errors,” in Proc. of OSDI, 2004.

[64] N. Kidd, T. Reps, J. Dolby, and M. Vaziri, “Finding Concurrency-Related Bugs Using Random Isolation,” in Proc. of VMCAI, 2009.

[65] M. Emmi, R. Jhala, E. Kohler, and R. Majumdar, “Verifying Reference Counting Implementations,” in Proc. of TACAS, 2009.

[66] P. Neumann, R. Boyer, R. Feiertag, K. Levitt, and L. Robinson, “A provably secure operating system: The system, its applications, and proofs.” SRI International, Tech. Rep., 1980.

[67] J. M. Rushby, “Design and Verification of Secure Systems,” in Proc. of SOSP, 1981.

[68] J. S. Shapiro and S. Weber, “Verifying the EROS Confinement Mechanism,” in Proc. of IEEE S&P, 2000.

[69] G. Barthe, G. Betarte, J. D. Campo, and C. Luna, “Formally Verifying Isolation and Availability in an Idealized Model of Virtualization,” in Proc. of FM, 2011.

[70] E. Alkassar, M. A. Hillebrand, W. J. Paul, and E. Petrova, “Automated Verification of a Small Hypervisor,” in Proc. of VSTTE, vol. 6217, 2010.

[71] E. Alkassar, E. Cohen, M. A. Hillebrand, M. Kovalev, and W. J. Paul, “Verifying shadow page table algorithms,” in Proc. of FMCAD, 2010.

[72] C. Baumann, H. Blasum, T. Bormer, and S. Tverdyshev, “Proving memory separation in a microkernel by code level verification,” in Proc. of AMICS, 2011.