### 8.3.1 Comparison with Doerner and Shelat's SPFSS Implementation

We compare our distributed Known-Index SPFSS variant (Protocol 3) with the SPFSS implementation by Doerner and Shelat [23] to demonstrate the efficiency gains in scenarios where one of the parties may know the index, such as in semi-private accesses. The results are presented in Figure 3. Our implementation outperforms the baseline for all tested vector lengths. For short vectors, this is expected because our protocol does not require expensive garbled circuits, but only log(ùëõ) oblivious transfers. Even for large vectors, where both protocols have a time complexity approximately linear in ùëõ, our implementation remains highly efficient, thanks to the simplicity of our construction.

### 8.3.2 Vector-OLE Computation

We also measure the time required to generate a full Vector-OLE. Here, we compare our implementation of Protocol 6 against three baselines:
1. The approach proposed in [9], which uses FLORAM‚Äôs FSS implementation in each bucket but employs our probabilistic batch codes.
2. Our variant of MPFSS using naive batching, which repeatedly evaluates over the entire domain.
3. Our optimized implementation of Gilboa‚Äôs multiplication protocol [31], which includes all optimizations from [44] and has a lower per-single-element multiplication time than reported in [44].

Figure 4 (left) shows the wall-clock running times of all three approaches. It is evident that using FLORAM is impractical compared to the alternatives, despite having the same asymptotic running time. Our second baseline, known-indices MPFSS with naive batching, outperforms FLORAM for small vectors but is less efficient than both Gilboa‚Äôs and our VOLE in terms of both asymptotics and concrete efficiency. For the third baseline, Gilboa‚Äôs multiplication is faster than our protocol for vector lengths below 300k (finite fields) and 2M (integer rings). This discrepancy is due to the reduced computational overhead from the lack of modular reductions and the direct use of 64-bit integers, which allows us to use correlated OT [3].

### 8.3.3 Communication Experiments

We investigate the communication overhead of both our VOLE implementation and Gilboa‚Äôs multiplication. We artificially limit the bandwidth of our machine to 100Mbit/s, which is typical for a consumer household connection. We measure the running time and the number of bytes sent by both parties during the protocol execution. The results are shown in Figure 4 (middle) and (right). Compared to Figure 4 (left), the cutoff point where our protocol outperforms Gilboa is lower, at about 200k for finite fields and 400k for integer rings.

### 8.3.4 Parallelization of VOLE

Finally, we examine the effect of parallelization on our VOLE protocol. Figure 5 shows the results for ùëõ = 220. With 8 threads, we observe a speedup of about 5x, and with 32 threads, this increases to over 10x. Although we did not run experiments on more than 32 cores, the slope of the plot suggests that the running time can be further reduced with additional hardware parallelism.

### 9. Conclusion

Our work introduces a new protocol for shared randomness generation in the form of a random vector oblivious linear evaluation, which generates vectors with linear correlations. Along the way, we developed several new protocols of independent interest in the areas of random OT, private puncturable PRFs, and function secret sharing for single and multi-point functions with known indices. We demonstrated how our VOLE construction can be leveraged in several secure computation constructions and compared it experimentally with two alternatives.

A possible improvement lies in our lowest-level primitive, (ùëõ ‚àí 1)-out-of-ùëõ-ROT. While our current construction is based on GGM trees with binary arity, we believe that using efficient (ùëò ‚àí 1)-out-of-ùëò-OT sub-protocols from homomorphic encryption for larger ùëò could yield additional concrete efficiency.

In terms of asymptotics, to our knowledge, ours is the first implementation of Vector OLE with sub-linear communication. However, it does not achieve the poly-logarithmic communication guarantees provided by alternative constructions, such as the dual version by Boyle et al. This is due to the lack of concretely efficient, LPN-friendly encoding schemes. If such schemes become available, our implementation could potentially achieve poly-logarithmic communication complexity while remaining concretely efficient.

### Acknowledgments

We would like to extend special thanks to Benny Pinkas for his assistance during the development of this paper. We also thank Geoffroy Couteau and Mike Rosulek for their valuable discussions. Adri√† Gasc√≥n‚Äôs work on this paper was conducted while at The Alan Turing Institute, supported by EPSRC grant EP/N510129/1 and funding from the UK Government‚Äôs Defence & Security Programme in support of the Alan Turing Institute.

### References

[1] Sebastian Angel, Hao Chen, Kim Laine, and Srinath T. V. Setty. 2018. PIR with Compressed Queries and Amortized Query Processing. In IEEE Symposium on Security and Privacy. IEEE, 962‚Äì979.

[2] Benny Applebaum, Ivan Damg√•rd, Yuval Ishai, Michael Nielsen, and Lior Zichron. 2017. Secure Arithmetic Computation with Constant Computational Overhead. In CRYPTO (1). Springer, 223‚Äì254.

[3] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. 2013. More efficient oblivious transfer and extensions for faster secure computation. In CCS. ACM, 535‚Äì548.

[4] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. 2015. More Efficient Oblivious Transfer Extensions with Security for Malicious Adversaries. In EUROCRYPT (1). Springer, 673‚Äì701.

[5] Donald Beaver. 1991. Efficient Multiparty Protocols Using Circuit Randomization. In CRYPTO. Springer, 420‚Äì432.

[6] Donald Beaver. 1996. Correlated Pseudorandomness and the Complexity of Private Computations. In STOC. ACM, 479‚Äì488.

[7] Avrim Blum, Adam Kalai, and Hal Wasserman. 2003. Noise-tolerant learning, the parity problem, and the statistical query model. J. ACM 50, 4 (2003), 506‚Äì519.

[8] Dan Boneh, Kevin Lewi, and David J. Wu. 2017. Constraining Pseudorandom Functions Privately. In Public Key Cryptography (2). Springer, 494‚Äì524.

[9] Elette Boyle, Geoffroy Couteau, Niv Gilboa, and Yuval Ishai. 2018. Compressing Vector OLE. In CCS. ACM, 896‚Äì912.

[10] Elette Boyle, Geoffroy Couteau, Niv Gilboa, Yuval Ishai, Lisa Kohl, Peter Rindal, and Peter Scholl. 2019. Efficient Two-Round OT Extension and Silent Non-Interactive Secure Computation. In CCS. ACM, 291‚Äì308.

[11] Elette Boyle, Geoffroy Couteau, Niv Gilboa, Yuval Ishai, Lisa Kohl, and Peter Scholl. 2019. Efficient Pseudorandom Correlation Generators: Silent OT Extension and More. In CRYPTO (3). Springer, 489‚Äì518.

[12] Elette Boyle, Niv Gilboa, and Yuval Ishai. 2015. Function Secret Sharing. In EUROCRYPT (2). Springer, 337‚Äì367.

[13] Elette Boyle, Niv Gilboa, and Yuval Ishai. 2016. Function Secret Sharing: Improvements and Extensions. In CCS. ACM, 1292‚Äì1303.

[14] Ran Canetti. 2000. Security and Composition of Multiparty Cryptographic Protocols. J. Cryptology 13, 1 (2000), 143‚Äì202.

[15] Hao Chen, Kim Laine, and Peter Rindal. 2017. Fast Private Set Intersection from Homomorphic Encryption. In CCS. ACM, 1243‚Äì1255.

[16] Benny Chor, Oded Goldreich, Eyal Kushilevitz, and Madhu Sudan. 1995. Private Information Retrieval. In FOCS. IEEE Computer Society, 41‚Äì50.

[17] Leonardo Dagum and Ramesh Menon. 1998. OpenMP: An industry-standard API for shared-memory programming. Computing in Science & Engineering 1 (1998), 46‚Äì55.

[18] Ivan Damg√•rd, Marcel Keller, Enrique Larraia, Valerio Pastro, Peter Scholl, and Nigel P. Smart. 2013. Practical Covertly Secure MPC for Dishonest Majority - Or: Breaking the SPDZ Limits. In ESORICS. Springer, 1‚Äì18.

[19] Ivan Damg√•rd and Sunoo Park. 2012. Is Public-Key Encryption Based on LPN Practical? IACR Cryptology ePrint Archive (2012), 699.

[20] Ivan Damg√•rd, Valerio Pastro, Nigel P. Smart, and Sarah Zakarias. 2012. Multiparty Computation from Somewhat Homomorphic Encryption. In CRYPTO. Springer, 643‚Äì662.

[21] Daniel Demmler, Peter Rindal, Mike Rosulek, and Ni Trieu. 2018. PIR-PSI: Scaling Private Contact Discovery. PoPETs 2018, 4 (2018), 159‚Äì178.

[22] Daniel Demmler, Thomas Schneider, and Michael Zohner. 2015. ABY - A Framework for Efficient Mixed-Protocol Secure Two-Party Computation. In NDSS. The Internet Society.

[23] Jack Doerner and abhi shelat. 2017. Scaling ORAM for Secure Computation. In CCS. ACM, 523‚Äì535.

[24] Nico D√∂ttling, Satrajit Ghosh, Jesper Buus Nielsen, Tobias Nilges, and Roberto Trifiletti. 2017. TinyOLE: Efficient Actively Secure Two-Party Computation from Oblivious Linear Function Evaluation. In CCS. ACM, 2263‚Äì2276.

[25] Nico D√∂ttling, Daniel Kraschewski, and J√∂rn M√ºller-Quade. 2012. David & Goliath Oblivious Affine Function Evaluation - Asymptotically Optimal Building Blocks for Universally Composable Two-Party Computation from a Single Untrusted Stateful Tamper-Proof Hardware Token. IACR Cryptology ePrint Archive (2012), 135.

[26] Michael J. Freedman, Carmit Hazay, Kobbi Nissim, and Benny Pinkas. 2016. Efficient Set Intersection with Simulation-Based Security. J. Cryptology 29, 1 (2016), 115‚Äì155.

[27] Michael J. Freedman, Yuval Ishai, Benny Pinkas, and Omer Reingold. 2005. Keyword Search and Oblivious Pseudorandom Functions. In TCC. Springer, 303‚Äì324.

[28] Adri√† Gasc√≥n, Phillipp Schoppmann, Borja Balle, Mariana Raykova, Jack Doerner, Samee Zahur, and David Evans. 2017. Privacy-Preserving Distributed Linear Regression on High-Dimensional Data. PoPETs 2017, 4 (2017), 345‚Äì364.

[29] Satrajit Ghosh and Tobias Nilges. 2019. An Algebraic Approach to Maliciously Secure Private Set Intersection. In EUROCRYPT (3). Springer, 154‚Äì185.

[30] Niv Gilboa. [n. d.]. Private Communication.

[31] Niv Gilboa. 1999. Two Party RSA Key Generation. In CRYPTO. Springer, 116‚Äì129.

[32] Oded Goldreich, Shafi Goldwasser, and Silvio Micali. 1986. How to construct random functions. J. ACM 33, 4 (1986), 792‚Äì807.

[33] Ga√´l Guennebaud, Beno√Æt Jacob, et al. 2010. Eigen v3. http://eigen.tuxfamily.org.

[34] Stefan Heyse, Eike Kiltz, Vadim Lyubashevsky, Christof Paar, and Krzysztof Pietrzak. 2012. Lapin: An Efficient Authentication Protocol Based on Ring-LPN. In FSE. Springer, 346‚Äì365.

[35] Yuval Ishai, Joe Kilian, Kobbi Nissim, and Erez Petrank. 2003. Extending Oblivious Transfers Efficiently. In CRYPTO. Springer, 145‚Äì161.

[36] Yuval Ishai, Eyal Kushilevitz, Rafail Ostrovsky, and Amit Sahai. 2004. Batch codes and their applications. In STOC. ACM, 262‚Äì271.

[37] Jonathan Katz and Yehuda Lindell. 2014. Introduction to Modern Cryptography (2nd ed.). Chapman and Hall/CRC Press.

[38] Marcel Keller, Emmanuela Orsini, and Peter Scholl. 2016. In CCS. ACM, 830‚Äì842.

[39] Marcel Keller, Valerio Pastro, and Dragos Rotaru. 2018. Overdrive: Making SPDZ Great Again. In EUROCRYPT (3). Springer, 158‚Äì189.

[40] Joe Kilian. 1988. Founding Cryptography on Oblivious Transfer. In STOC. ACM, 20‚Äì31.

[41] Adam Kirsch, Michael Mitzenmacher, and Udi Wieder. 2009. More Robust Hashing: Cuckoo Hashing with a Stash. SIAM J. Comput. 39, 4 (2009), 1543‚Äì1561.

[42] Vladimir Kolesnikov, Ranjit Kumaresan, Mike Rosulek, and Ni Trieu. 2016. Efficient Batched Oblivious PRF with Applications to Private Set Intersection. In CCS. 818‚Äì829.

[43] Yehuda Lindell and Benny Pinkas. 2009. A Proof of Security of Yao‚Äôs Protocol for Two-Party Computation. J. Cryptology 22, 2 (2009), 161‚Äì188.

[44] Payman Mohassel and Yupeng Zhang. 2017. SecureML: A System for Scalable Privacy-Preserving Machine Learning. In IEEE Symposium on Security and Privacy. IEEE Computer Society, 19‚Äì38.

[45] Moni Naor and Benny Pinkas. 1999. Oblivious Transfer and Polynomial Evaluation. In STOC. ACM, 245‚Äì254.

[46] Moni Naor and Benny Pinkas. 2006. Oblivious Polynomial Evaluation. SIAM J. Comput. 35, 5 (2006), 1254‚Äì1281.

[47] Rasmus Pagh and Flemming Friche Rodler. 2004. Cuckoo hashing. J. Algorithms 51, 2 (2004), 122‚Äì144.

[48] Benny Pinkas, Thomas Schneider, and Michael Zohner. 2014. Faster Private Set Intersection Based on OT Extension. In USENIX Security Symposium. USENIX Association, 797‚Äì812.

[49] Benny Pinkas, Thomas Schneider, and Michael Zohner. 2018. Scalable Private Set Intersection Based on OT Extension. ACM Trans. Priv. Secur. 21, 2 (2018).

[50] Michael O. Rabin. 1981. How To Exchange Secrets with Oblivious Transfer. TR-81 edition, Aiken Computation Lab, Harvard University (1981).

[51] Phillipp Schoppmann, Adri√† Gasc√≥n, Mariana Raykova, and Benny Pinkas. 2019. Make Some ROOM for the Zeros: Data Sparsity in Secure Distributed Machine Learning. In CCS. ACM.

[52] Victor Shoup et al. 2001. NTL: A library for doing number theory. https://www.shoup.net/ntl.

[53] Abraham Waksman. 1968. A Permutation Network. J. ACM 15, 1 (1968), 159‚Äì163.

[54] Xiao Wang, Alex J. Malozemoff, and Jonathan Katz. 2016. EMP-toolkit: Efficient MultiParty computation toolkit. https://github.com/emp-toolkit.

[55] Robert S. Winternitz. 1984. A Secure One-Way Hash Function Built from DES. In IEEE Symposium on Security and Privacy. IEEE Computer Society, 88‚Äì90.

[56] Andrew Chi-Chih Yao. 1986. How to Generate and Exchange Secrets (Extended Abstract). In FOCS. IEEE Computer Society, 162‚Äì167.

### A. Security Proofs

[This section should contain the detailed security proofs for the protocols and constructions discussed in the paper.]