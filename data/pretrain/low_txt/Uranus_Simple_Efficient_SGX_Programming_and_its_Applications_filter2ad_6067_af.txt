### References

1. Cui, and Amy Wang. "UPA: An Automated, Accurate, and Efficient Differentially Private Big-Data Mining System." To appear at the 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN '20). IEEE.

2. Yanlin Li, Jonathan M McCune, James Newsome, Adrian Perrig, Brandon Baker, and Will Drewry. "MiniBox: A Two-Way Sandbox for x86 Native Code." In USENIX Annual Technical Conference. 409–420.

3. Joshua Lind, Christian Priebe, Divya Muthukumaran, Dan O’Keeffe, Pierre-Louis Aublin, Florian Kelbert, Tobias Reiher, David Goltzsche, David Eyers, Rüdiger Kapitza, et al. "Glamdring: Automatic Application Partitioning for Intel SGX." In 2017 USENIX Annual Technical Conference (USENIX ATC 17), Santa Clara, CA.

4. Nuno P Lopes, David Menendez, Santosh Nagarakatte, and John Regehr. "Provably Correct Peephole Optimizations with Alive." ACM SIGPLAN Notices 50, 6 (2015), 22–32.

5. Sinisa Matetic, Mansoor Ahmed, Kari Kostiainen, Aritra Dhar, David Sommer, Arthur Gervais, Ari Juels, and Srdjan Capkun. "ROTE: Rollback Protection for Trusted Execution." IACR Cryptology ePrint Archive 2017 (2017), 48.

6. Saeid Mofrad, Ishtiaq Ahmed, Shiyong Lu, Ping Yang, Heming Cui, and Fengwei Zhang. "SecDATAVIEW: A Secure Big Data Workflow Management System for Heterogeneous Computing Environments." In Proceedings of The 35th Annual Computer Security Applications Conference (ACSAC'19).

7. Khanh Nguyen, Lu Fang, Guoqing Xu, Brian Demsky, Shan Lu, Sanazsadat Alamian, and Onur Mutlu. "Yak: A High-Performance Big-Data-Friendly Garbage Collector." In 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI 16). 349–365.

8. Christian Priebe, Kapil Vaswani, and Manuel Costa. "EnclaveDB: A Secure Database Using SGX." In Proceedings of the 2018 IEEE Symposium on Security and Privacy. IEEE.

9. Konstantin Rubinov, Lucia Rosculete, Tulika Mitra, and Abhik Roychoudhury. "Automated Partitioning of Android Applications for Trusted Execution Environments." In ICSE. IEEE, 923–934.

10. Nuno Santos, Himanshu Raj, Stefan Saroiu, and Alec Wolman. "Using ARM TrustZone to Build a Trusted Language Runtime for Mobile Applications." ACM SIGARCH Computer Architecture News 42, 1 (2014), 67–80.

11. Felix Schuster, Manuel Costa, Cédric Fournet, Christos Gkantsidis, Marcus Peinado, Gloria Mainar-Ruiz, and Mark Russinovich. "VC3: Trustworthy Data Analytics in the Cloud Using SGX." In Security and Privacy (SP), 2015 IEEE Symposium on. IEEE, 38–54.

12. Fahad Shaon, Murat Kantarcioglu, Zhiqiang Lin, and Latifur Khan. "SGX-BigMatrix: A Practical Encrypted Data Analytic Framework With Trusted Processors." In Proceedings of the 17th ACM conference on Computer and communications security (CCS '10).

13. Ming-Wei Shih, Mohan Kumar, Taesoo Kim, and Ada Gavrilovska. "S-NFV: Securing NFV States by Using SGX." In Proceedings of the 2016 ACM International Workshop on Security in Software Defined Networks & Network Function Virtualization. ACM, 45–48.

14. Shweta Shinde, Dat Le Tien, Shruti Tople, and Prateek Saxena. "PANOPLY: Low-TCB Linux Applications With SGX Enclaves." In Proc. of the Annual Network and Distributed System Security Symp. (NDSS).

15. Alexander Sotirov. "Heap Feng Shui in JavaScript." Black Hat Europe 2007 (2007).

16. Pramod Subramanyan, Rohit Sinha, Ilia Lebedev, Srinivas Devadas, and Sanjit A Seshia. "A Formal Foundation for Secure Remote Execution of Enclaves." In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2435–2450.

17. Yogesh Swami. "Intel SGX Remote Attestation is not sufficient." IACR (2017).

18. Hongliang Tian, Yong Zhang, Chunxiao Xing, and Shoumeng Yan. "SGXKernel: A Library Operating System Optimized for Intel SGX." In Proceedings of the Computing Frontiers Conference. ACM, 35–44.

19. Chia-Che Tsai, Donald E Porter, and Mona Vij. "Graphene-SGX: A Practical Library OS for Unmodified Applications on SGX." In 2017 USENIX Annual Technical Conference (USENIX ATC).

20. Jo Van Bulck, David Oswald, Eduard Marin, Abdulla Aldoseri, Flavio D. Garcia, and Frank Piessens. "A Tale of Two Worlds: Assessing the Vulnerability of Enclave Shielding Runtimes." In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security (London, United Kingdom) (CCS '19). Association for Computing Machinery, New York, NY, USA, 1741–1758.

21. Jo Van Bulck, Frank Piessens, and Raoul Strackx. "SGX-Step: A Practical Attack Framework for Precise Enclave Execution Control." In Proceedings of the 2nd Workshop on System Software for Trusted Execution. ACM, 4.

22. Huibo Wang, Erick Bauman, Vishal Karande, Zhiqiang Lin, Yueqiang Cheng, and Yinqian Zhang. "Running Language Interpreters Inside SGX: A Lightweight, Legacy-Compatible Script Code Hardening Approach." In Proceedings of the 2019 ACM Asia Conference on Computer and Communications Security. ACM, 114–121.

23. Huibo Wang, Pei Wang, Yu Ding, Mingshen Sun, Yiming Jing, Ran Duan, Long Li, Yulong Zhang, Tao Wei, and Zhiqiang Lin. "Towards Memory Safe Enclave Programming with Rust-SGX." In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security (London, United Kingdom) (CCS '19). Association for Computing Machinery, New York, NY, USA, 2333–2350.

24. Nico Weichbrodt, Anil Kurmus, Peter Pietzuch, and Rüdiger Kapitza. "AsyncShock: Exploiting Synchronization Bugs in Intel SGX Enclaves." In European Symposium on Research in Computer Security. Springer, 440–457.

25. Samuel Weiser, Mario Werner, Ferdinand Brasser, Maja Malenko, Stefan Mangard, and Ahmad-Reza Sadeghi. "TIMBER-V: Tag-Isolated Memory Bringing Fine-Grained Enclaves to RISC-V."

26. Jean Yang and Chris Hawblitzel. "Safe to the Last Instruction: Automated Verification of a Type-Safe Operating System." ACM Sigplan Notices 45, 6 (2010), 99–110.

27. Min Hong Yun and Lin Zhong. "Ginseng: Keeping Secrets in Registers When You Distrust the Operating System." In NDSS.

28. Matei Zaharia, Mosharaf Chowdhury, Tathagata Das, Ankur Dave, Justin Ma, Murphy McCauley, Michael J Franklin, Scott Shenker, and Ion Stoica. "Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing." In NSDI. USENIX Association, 2–2.

29. Wenting Zheng, Ankur Dave, Jethro G Beekman, Raluca Ada Popa, Joseph E Gonzalez, and Ion Stoica. "Opaque: An Oblivious and Encrypted Distributed Analytics Platform." In NSDI. 283–298.

### Appendix

#### A. Java Bytecode Size
**Dependent Classes Size**
- **Package Name**: LinearRegr (UDF)
- **Spark + Scala**: 2.3 MB
- **Java RT**: 5.0 MB
- **Total**: 7.3 MB

**Jar Size**
- **LinearRegr (UDF)**: 1.1 KB
- **Spark + Scala**: 17.4 MB
- **Java RT**: 65.0 MB
- **Total**: 82.4 MB

**Table 4: Enclave memory usage of Java bytecode.**

#### B. Sample JIT Code
**Figure 9: Uranus’s JIT Compilation.**
- Verified Java bytecode sequences are compiled into native code.
- `aload_0` and `getfield` are compiled as instructions 1 and 2 ∼ 7, respectively.
- Figure 9 shows the native code with runtime checks (in dash box, line 3 ∼ 6).

#### C. Uranus’s Multi-Threading and Exception Handling
- **Multi-Threading**: Uranus supports multi-threading executions and in-enclave synchronization. It does not support thread creation within an enclave, so there is a one-to-one mapping between an enclave thread and an external thread. Uranus re-implements Java’s locking mechanism with spinlocks, avoiding the need to go across the enclave boundary.
- **Exception Handling**: Uranus adopts a similar design to Hotspot’s exception capture and dispatch mechanism. Uranus supports handling memory exceptions in enclaves, including `NullPointerException`, `ArrayOutOfBoundException`, and `ArithmeticException`, using runtime checks. When an exception is captured, Uranus searches for a handler in the current function and recursively in the caller. If no handler is found, Uranus throws an `EnclaveException` outside the enclave with encrypted exception information.

#### D. Evaluated Applications
**Framework**
- **Distributed Data Analytics**: Opaque (encryption mode), VC3, Spark-Uranus
- **Privacy-preserving ZooKeeper**: SecureKeeper, ZooKeeper-Uranus

**Table 5: Code modified by Uranus and code rewriting systems.**
- **Spark-Uranus**: 4k (C++), 2.6k (Scala)
- **VC3**: 7k (C/C++)
- **SecureKeeper**: 3.4k (C), 154 (Java)

#### E. Comparison of Lines of Code (LoC)
**Table 6: Comparisons of LoC between Uranus, SGX-LKL-JVM, and Civet.**
- **Uranus**: 
  - **JIT Compiler**: 14,411 LoC
  - **Garbage Collector**: 6,600 LoC
  - **Code Verifier**: 1,281 LoC
  - **Exception Handler**: 310 LoC
  - **Native Libraries**: 6,837 LoC
  - **Bytecode and Class**: 22,494 LoC
  - **SGX SDK**: 171,606 LoC
  - **JVM**: 913,951 LoC
- **SGX-LKL-JVM**: 
  - **SGX-LKL**: 38,870 LoC
  - **SGX-MUSL**: 99,222 LoC
  - **Graphene-SGX**: 38,481 LoC
  - **GNU libc**: 422,199 LoC
  - **JVM**: 49,689 LoC
  - **Total**: 1,008,773 LoC
- **Civet**: 
  - **Modified JVM**: 171,606 LoC
  - **Graphene-SGX**: 38,870 LoC
  - **GNU libc**: 422,199 LoC
  - **Total**: 1,008,773 LoC

#### F. More Benchmarks of Uranus’s GC
- **Benchmark**: Key-Value Store Program (KV-Uranus)
- **Implementation**: Uses ChronicleMap [3] library to implement a secure key-value store server that parses plaintext key-value pairs only in enclaves.
- **Cache**: 10MB, including key-value pairs and metadata.
- **Security**: Outside the enclave, values and keys are encrypted together to avoid attacks.
- **Figure 10: KV-Uranus’s Multi-Threading Scalability**
  - **Settings**: KV-Uranus, KV-Native, and KV-Uranus with Uranus’s region-based GC mechanism disabled.
  - **Results**: 
    - **Per-Request Processing Time**: 10us ∼ 22us for KV-Uranus, faster than KV-Uranus-disable-region.
    - **Total GC Time**: 12.5s for KV-Uranus, 21.4s for KV-Uranus-disable-region.
  - **Conclusion**: Uranus’s GC is efficient for diverse applications.