# When TLS Hacks You
## JOSHUA MADDUX
### Demo

### Overview
- **Where I Started**
- **Testing Approach**
- **Implications**
- **Concrete Vulnerabilities**
- **Defense**

### SSRF (Server-Side Request Forgery)
- **Definition**: Send a URL, and the server hits it.
- **Common in**: Webhooks, Apple Pay support.

### EC2 IMDS V1
- **Example**: Sending `http://169.254.169.254` to webkit.org.
- **Context**: Apple Pay SSRF, EC2 IMDS V1.
- **Results**:
  - **Website 2**: No data back.
  - **Website 3**: PUT request, 405 Method Not Allowed.

### Getting Around Limitations
- **Past Approaches**:
  - **Weird Protocols**: e.g., `gopher://localhost:11211/_%0aset%20foo%20...`
    - **Note**: Does not work against modern libraries.
  - **SNI Injection**: e.g., `https://127.0.0.1 %0D%0AHELO orange.tw%0D%0AMAIL FROM…:25/`
    - **Source**: Orange Tsai’s talk “A new era of SSRF”.
    - **Link**: [YouTube](https://www.youtube.com/watch?v=2MslLrPinm0)
    - **Note**: Depends on specific bugs.

### Step-by-Step Example
- **Step 1**: `jmaddux.com`
- **Step 2**: Saved Payload
- **Step 3**: DNS Server, SMTP on localhost, Hello + Payload

### Testing Approach
- **Components**:
  - Redis configuration
  - Custom TLS
  - Alternating DNS Server
  - Internet
  - IP of Custom TLS box
  - Netcat

- **Code Available at**: [GitHub](https://github.com/jmdx/TLS-poison)
  - **Forks**:
    - [rustls](https://github.com/ctz/rustls)
    - [redis-based configuration](https://github.com/SySS-Research/dns-mitm) by Akash Idnani

### Implications
- **What’s Now Vulnerable**:
  - **Almost-SSRF**: Stuff on local ports, Outbound TLS sessions.
  - **Surprisingly Common**:
    - OIDC discovery (sometimes)
    - Webpush
    - Webmention
    - SVG conversion
    - URL-based XXE
    - Scraping
    - Webhooks
    - PDF renderers with images enabled
    - Apple Pay Web
    - In browsers, just phishing people (CSRF)
    - Wifi captive portals
    - SSDP

- **Getting More Common**:
  - What things cache TLS sessions?
    - **HTTPS Client Library/Application**:
      - Java `HttpsUrlConnection`: Yes
      - Webkit: Yes
      - Chrome: Yes
      - Firefox: No (caches by IP address, not domain)
      - Curl/libcurl: Yes
      - IOS, Android SSDP: Yes
      - Python `requests` package: No
      - Go HTTP client: Not yet (open issue on GitHub)
      - Node-fetch, axios: Yes (Node has built-in cache)

- **Internal SSRF Targets**:
  - **Package**:
    - Memcached: Yes (common route to RCE)
    - Hazelcast: Yes (common in Java apps)
    - Redis: No (closes connections after null bytes)
    - SMTP: Yes (all implementations)
    - FTP: Yes (all implementations)
    - MySQL, Postgres, etc.: Maybe (let me know if you make this happen)
    - FastCGI: Maybe
    - Zabbix: No (similar reasons as Redis)
    - Syslog: Yes (less severe)

### Concrete Vulnerabilities
- **Real-World SSRF: Youtrack**
  - **Example**: Hex dump showing SMTP traffic.
- **Real-World SSRF: Nextcloud**
  - **Federated Sharing**: `@PI:EMAIL`, `@PI:EMAIL:11211`
  - **Use TLS Rebinding, write to memcached!**
  - **Fix**: Added a request timeout, bounty awarded.

### Demo: Phishing -> CSRF -> RCE
- **Assumptions**:
  - Victim is a developer for a project using `django.core.cache` configured for memcached.
  - Victim views web-based emails in a susceptible browser like Chrome.
  - Attacker knows/guesses this.
  - Victim is smart enough not to download attachments.

### Further Work
- **Chain with Memory Corruption**
- **NAT Pinning**
- **DOS Amplification**
- **High Amplification Factors?**
- **Better Testing Infrastructure**
- **Infrastructure-as-Code**
- **Image-Based CSRF on Bad IoT Devices**
- **Telnet?**
- **Hit Internal HTTP Servers with a Session Ticket Payload**
- **Attack Message Queues**
- **Correct Me – My DMs are Open @joshmdx**

### Defense
- **My Proposal for TLS Clients**:
  - **Change Cache Key**:
    - Currently: `(hostname, port)`
    - Better: `(hostname, port, ip_addr)`
    - For large TLS deployments: `(hostname, port, addr_type(ip_addr))`
  - **Credit**: Chromium team, similar to [WICG CORS RFC1918](https://wicg.github.io/cors-rfc1918/)

- **Security Costs of TLS Session Resumption**:
  - **Measuring the Security Harm of TLS Crypto Shortcuts**
  - **Detrimental to PFS**
  - **Tracking Users across the Web via TLS Session Resumption**
  - **Detrimental to Privacy**
  - **Insecure TLS session reuse can lead to hostname verification bypass** (NodeJS)
  - **Complexity ➔ Bugs**
  - **Also everything in the previous slides**

- **Benefits of TLS Session Resumption**:
  - **Full Handshake**: ~2x real time, ~23x CPU time
  - **Source**: [Cloudflare Blog](https://blog.cloudflare.com/tls-session-resumption-full-speed-and-secure/)

- **Disabling Outbound TLS Session Resumption**:
  - **libcurl**: `CURLOPT_SSL_SESSIONID_CACHE=false`
  - **Firefox**: `security.ssl.disable_session_identifiers=true`
  - **Tor Browser**: Disabled by default
  - **Java, Nodejs, Chrome, Others**: No option

- **For Web Apps That Can’t Disable It**:
  - Be careful around webhooks, Apple Pay.
  - Set up a proxy for outbound requests, e.g., [Stripe Smokescreen](https://github.com/stripe/smokescreen).
  - Avoid running unauthenticated internal TCP stuff, especially if it’s newline-delimited.

### Takeaways
- **Modern TLS is useful for SSRF attacks**.
- **Following the latest specs is a good way to break things**.
- **We need to reconsider the merits of TLS session resumption**.

### Thank You!
- **Joshua Maddux, @joshmdx**
- **Security Engineer - latacora.com** – security teams for startups