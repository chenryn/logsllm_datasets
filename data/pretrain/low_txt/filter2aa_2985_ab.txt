# Attacking Microsoft PTA and Azure AD Seamless Single Sign-On

## Attacking Microsoft PTA
- **Managed by**: Azure AD Connect
- **Vulnerability**: Compromise the server hosting PTA (typically the Azure AD Connect server)
- **Authentication Process**: Azure AD sends the clear-text password (not hashed) to authenticate the user.
- **Attack Method**: Inject a DLL to compromise the credentials used for PTA.

**Reference**: [Microsoft Documentation](https://docs.microsoft.com/en-us/azure/active-directory/hybrid/how-to-connect-pta)

**Source**: Sean Metcalf | @PyroTek3 | PI:EMAIL  
[Blog Post](https://blog.xpnsec.com/azuread-connect-for-redteam/)

## Attacking Azure AD Seamless Single Sign-On
- **Managed by**: Azure AD Connect
- **Vulnerability**: Azure AD exposes a publicly available endpoint that accepts Kerberos tickets and translates them into SAML and JWT tokens.
- **Compromise**: The Azure AD Seamless SSO Computer Account password hash ("AZUREADSSOACC").
- **Attack Method**: 
  - Generate a Silver Ticket for the user you want to impersonate and the service `aadg.windows.net.nsatc.net`.
  - Inject this ticket into the local Kerberos cache.
  - Note: The Azure AD Seamless SSO computer account password does not change.

**Reference**: [Microsoft Documentation](https://docs.microsoft.com/en-us/azure/active-directory/hybrid/how-to-connect-sso)

**Source**: Sean Metcalf | @PyroTek3 | PI:EMAIL  
[Blog Post](https://www.dsinternals.com/en/impersonating-office-365-users-mimikatz/)

## Attacking Azure AD Connect
- **Presentation**: DEF CON 25 (July 2017)
- **Context**: Acme’s Azure AD Connect
- **Source**: Sean Metcalf | @PyroTek3 | PI:EMAIL

## Cloud Administration and Identity Access Management (IAM)

### Cloud Administration & Roles
- **Administrative Groups**: Called Roles
- **Access Delegation**: Each role has specifically delegated access.
- **Custom Roles**: Depending on the cloud provider, custom roles can be created with custom delegation and rights.
- **Cloud Providers**: Azure and Amazon AWS each have their own methods, but the concepts are similar.

**Source**: Sean Metcalf | @PyroTek3 | PI:EMAIL

### Azure IAM – Role Types
- **Owner**
  - Full access to all resources, including the right to delegate access to others.
- **Contributor**
  - Can create and manage all types of Azure resources but cannot grant access to others.
- **Reader**
  - Can view existing Azure resources.

**Source**: Sean Metcalf | @PyroTek3 | PI:EMAIL

### Azure IAM – Privileged Roles
- **Tenant Admins**
  - Owner Role on the Tenant
  - Full control over the tenant and all subscriptions
- **Subscription Admin**
  - Owner Role on the Subscription
  - Full control over the subscription

**Source**: Sean Metcalf | @PyroTek3 | PI:EMAIL

### AWS IAM (Organizations)
- **Root Account (Payer Account)**: Organization primary account (often the first account)
- **Account Admins**: Full control over the account and everything in it.
- **Privilege Escalation**: If the Root Account (admin) and Account Admin are compromised, full organizational control is possible.
- **No Subscription Concept**: Uses Organizational Unit concept for granular administration of instances (EC2).

**Source**: Sean Metcalf | @PyroTek3 | PI:EMAIL

### AWS IAM Privilege Escalation Methods
- **Creating a new policy version (iam:CreatePolicyVersion)**
  - Allows a user to gain full administrator access to the AWS account.
- **Creating an EC2 instance with an existing instance profile (iam:PassRole and ec2:RunInstances)**
  - Gives the attacker access to the set of permissions that the instance profile/role has, potentially leading to full administrator access.
- **Creating a new user access key (iam:CreateAccessKey)**
  - Provides the same level of permissions as any user they were able to create an access key for, potentially leading to full administrator access.
- **Create/update new login profile (iam:CreateLoginProfile / iam:UpdateLoginProfile)**
  - Provides the same level of permissions as any user they were able to create a login profile for, potentially leading to full administrator access.
- **Attaching a policy to a user (iam:AttachUserPolicy)**
  - Allows the attacker to attach the AdministratorAccess AWS managed policy to a user, giving them full administrator access.
- **Attaching a policy to a group (iam:AttachGroupPolicy)**
  - Allows the attacker to attach the AdministratorAccess AWS managed policy to a group, giving them full administrator access.
- **Attaching a policy to a role (iam:AttachRolePolicy)**
  - Allows the attacker to attach the AdministratorAccess AWS managed policy to a role, giving them full administrator access.
- **Creating/updating an inline policy for a user (iam:PutUserPolicy)**
  - Allows the attacker to specify a policy that gives permission to perform any action on any resource, potentially leading to full administrator privileges.
- **Creating/updating an inline policy for a group (iam:PutGroupPolicy)**
  - Allows the attacker to specify a policy that gives permission to perform any action on any resource, potentially leading to full administrator privileges.
- **Creating/updating an inline policy for a role (iam:PutRolePolicy)**
  - Allows the attacker to specify a policy that gives permission to perform any action on any resource, potentially leading to full administrator privileges.
- **Adding a user to a group (iam:AddUserToGroup)**
  - Allows the attacker to gain the privileges of any existing group in the account, potentially leading to full administrator access.
- **Updating the AssumeRolePolicyDocument of a role (iam:UpdateAssumeRolePolicy)**
  - Allows the attacker to gain the privileges attached to any role in the account, potentially leading to full administrator access.

**References**:
- [Rhino Security Labs](https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/)
- [GitHub](https://github.com/RhinoSecurityLabs/Security-Research/blob/master/tools/aws-pentest-tools/aws_escalate.py)

**Source**: Sean Metcalf | @PyroTek3 | PI:EMAIL

## Cloud API Keys
- **Purpose**: Provide permanent access, often with privileged rights.
- **Additional Authentication**: Often provides an additional authentication method (other than username/password).
- **Exposure Risk**: API keys are frequently exposed in code (e.g., GitHub), including private repositories.
- **Mitigation**: Compromised API keys need to be regenerated.

**Source**: Sean Metcalf | @PyroTek3 | PI:EMAIL

## Compromise Cloud Hosted DCs via AWS/Federation
- **On-Prem AD Domain Controllers**: Hosted in AWS EC2
- **On-Prem AD Groups**: Added to AWS Roles
- **Compromise Path**: Compromise an on-prem AD user account to compromise AWS EC2 instances (VMs) to run commands on DCs.
- **Default Installation**: Amazon SSM installed by default on most Amazon-provided instances (templates) – requires a role to execute.
- **Logging**: Ensure logging (e.g., CloudTrail) is enabled and monitored. Logs should not be deletable.

**Reference**: [AWS Blog](https://aws.amazon.com/blogs/security/aws-federated-authentication-with-active-directory-federation-services-ad-fs/)

**Source**: Sean Metcalf | @PyroTek3 | PI:EMAIL

## From Azure AD to Azure: An Unanticipated Attack Path

**Summary**:
- **On-Prem AD Account**: Use to compromise AWS Federation.
- **Compromise Summary**: On-prem AD Domain Controllers hosted in AWS EC2, on-prem AD groups added to AWS Roles, and compromising an on-prem AD user account can lead to the compromise of AWS EC2 instances and the ability to run commands on DCs.

**Source**: Sean Metcalf | @PyroTek3 | PI:EMAIL