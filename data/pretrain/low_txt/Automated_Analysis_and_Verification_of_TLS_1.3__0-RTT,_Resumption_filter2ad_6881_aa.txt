# Title: Automated Analysis and Verification of TLS 1.3: 0-RTT, Resumption, and Delayed Authentication

**Authors:**
- Cas Cremers
- Marko Horvat
- Sam Scott
- Thyla van der Merwe

**Affiliations:**
- **Cas Cremers, Marko Horvat:**
  - Department of Computer Science
  - University of Oxford, UK
- **Sam Scott, Thyla van der Merwe:**
  - Information Security Group
  - Royal Holloway, University of London, UK

**Conference:**
2016 IEEE Symposium on Security and Privacy

## Abstract
After an extensive development process, the TLS 1.3 specification is nearing completion. To avoid past mistakes, this critical security protocol must be thoroughly scrutinized before deployment. In this work, we model and analyze revision 10 of the TLS 1.3 specification using the Tamarin prover, a tool for automated analysis of security protocols. We specify and analyze the interaction of various handshake modes for an unbounded number of concurrent TLS sessions. Our results show that revision 10 meets the goals of authenticated key exchange in both unilateral and mutual authentication cases.

We extend our model to incorporate the proposed delayed client authentication mechanism, a feature likely to be included in the next revision. This extension revealed a potential attack where an adversary can impersonate a client during a PSK-resumption handshake. This observation was reported to and confirmed by the IETF TLS Working Group.

Our work not only provides the first supporting evidence for the security of several complex protocol mode interactions in TLS 1.3 but also highlights the necessity of including more information in the protocol's signature contents.

## 1. Introduction
The TLS protocol is used globally by millions of users daily, serving as the core building block for Internet security. However, TLS is a complex protocol with many possible variants and use cases, which has made thorough cryptographic analysis challenging for decades. Although TLS has received significant attention since its deployment by Netscape as SSL in 1995, it was not until the BEAST [19] and CRIME [20] attacks in 2011 and 2012, respectively, that the protocol became the subject of intense analysis and academic study. Prior to these attacks, relevant works spanned almost two decades [6], [7], [15], [16], [28], [29], [31], [43], [44], [45], [54], [55]. Post-2011, a comparable number of works were published in less than five years [2], [3], [4], [5], [10], [11], [12], [13], [14], [18], [23], [26], [27], [30], [34], [35], [37], [40], many of which represent significant advances on both manual and automated fronts, leading to the discovery of numerous weaknesses.

The flaws identified in TLS 1.2 and earlier versions, whether implementation- or specification-based, prompted the TLS Working Group to adopt an "analysis-before-deployment" design paradigm for TLS 1.3 [48]. The new TLS handshake protocol is largely influenced by the OPTLS protocol of Krawczyk and Wee [35], designed to offer zero Round-Trip Time (0-RTT) exchanges and ensure perfect forward secrecy. Its simple structure lends itself to analysis via manual and automated means, a benefit deemed desirable for TLS 1.3. Despite the simplified logic, the addition of 0-RTT functionality and new resumption and client authentication mechanisms has introduced new complexity.

Given the critical importance of TLS, it is essential that the TLS 1.3 protocol design is rigorously analyzed before finalization and deployment to minimize potential flaws. Our work, based on tool-supported, symbolic verification of TLS 1.3 security guarantees, contributes to this goal.

### 1.1. Contributions
Our main contribution is a more comprehensive treatment of the TLS 1.3 specification than previous works [18], [30], [35]. Additionally, our formal model of TLS 1.3 serves as a tool that can be extended and modified for future releases, providing long-lasting benefits to the designers of the TLS protocol. We detail our contributions below:

- **Comprehensive Analysis:** One of the most relevant and up-to-date analyses of TLS 1.3 is the analysis of OPTLS by its designers [35]. However, their analysis does not cover the full TLS 1.3 specification, particularly excluding client authentication and resumption. We aim to fill this gap by formally modeling and analyzing TLS 1.3 revision 10 (draft-10). Since the main decisions on the TLS 1.3 design have been made, we expect to incorporate any future changes directly into our analysis.
- **Security of Handshake Modes:** We cover the security and secure interaction of the following handshake modes: regular (EC)DHE mode, (Pre-Shared Key) PSK mode, PSK-DHE mode, and 0-RTT mode.
- **PSK-Resumption Handshake:** We analyze the PSK-resumption handshake when composed with any acceptable initial handshake, including (EC)DHE, PSK, PSK-DHE, and 0-RTT handshakes.
- **Delayed Authentication Mechanism:** We examine the security of the proposed delayed authentication mechanism in the context of all previous modes.
- **State Transitions Coverage:** We provide near-complete coverage of the state transitions in the standard, unlike previous works that abstracted away message components or subprotocols or were developed before the newer mechanisms crystallized.

For our analysis, we use the Tamarin prover [51], a state-of-the-art tool for the symbolic analysis of security protocols. Tamarin enables us to precisely specify and analyze the secrecy and complex authentication properties of the various handshake modes. Furthermore, Tamarin’s multiset-rewriting semantics is well-suited for modeling the complex transition system implied by the TLS 1.3 specification, allowing for the analysis of the interaction of assorted handshake modes and an unbounded number of concurrent TLS sessions.

We consider a Dolev-Yao adversary model where the adversary can reveal long-term private keys of honest parties. Our Tamarin model includes both the client authentication mechanism and session resumption, so our property specifications go beyond the basic session key secrecy considered in [35].

We find that draft-10 achieves the standard goals of authenticated key exchange. Specifically, we show that a client has assurances regarding the secrecy of the established session key and the identity of the server. The server obtains equivalent assurances when authenticating the client, both in the standard way and using the newly introduced 0-RTT mechanism. Our analysis confirms perfect forward secrecy of session keys and covers the properties of handshake integrity and secrecy of early data keys. We verify these desirable properties in the presence of composable handshake modes and an unbounded number of concurrent TLS sessions, something not done in previous TLS 1.3 analyses.

The TLS Working Group suggested that a new delayed authentication mode would likely appear in the next revision. Our exploration of the initial proposal for this option [46] revealed a potential attack where an adversary can impersonate a client during a PSK-resumption handshake. This highlights the strict necessity of creating a binding between TLS 1.3 handshakes.

### 1.2. Future Prospects
The scope of our model and analysis goes well beyond draft-10. As final modifications are made to the TLS 1.3 specifications, the model will be updated, and the analysis re-run to ensure no new errors are introduced. This will simplify the analysis of any new properties that may arise, helping to inform and guide the final stages of the TLS 1.3 design.

### 1.3. Acknowledgements
We would like to thank Eric Rescorla and Martin Thomson of Mozilla and the TLS Working Group for their invaluable inputs to this work through numerous clarifying conversations.

### 1.4. Related Work on TLS 1.3
The 0-RTT mechanism of OPTLS, and hence of TLS 1.3, is similar to that of Google’s Quick UDP Internet Connections (QUIC) protocol [36]. Lychev et al. introduce a security model for what they term Quick Connections (QC) protocols and analyze QUIC within this framework [39]. Although they do not focus on TLS 1.3, they note that the 0-RTT mode of TLS fits the definition of a QC protocol. Fischlin and Günther also provide an analysis of QUIC [22] by developing a Bellare-Rogaway style model for multi-stage key exchange protocols.

Both QUIC and the TLS 1.3 handshake protocol can be viewed as multi-stage key exchange protocols because the communicating parties establish multiple session keys during an exchange, potentially using one key to derive another. Fischlin and Günther show QUIC to be secure within this model. In work by Dowling et al. [18], two TLS 1.3 drafts, specifically draft-05 and draft-dh, are analyzed using this framework. Although the authors showed that keys output by the handshake protocol could be securely used by the record protocol, at the time of writing, the TLS drafts did not include a 0-RTT mode and resumption had not yet been merged with the PSK mode. Kohlweiss et al. also produced an analysis of draft-05 using a constructive-cryptography approach [30].

Although there were changes in earlier drafts of TLS 1.3, including a reduction in handshake latency, removal of renegotiation, and a switch to AEAD ciphers, it is not until draft-07 that we see a radical shift in the design of the protocol away from TLS 1.2. From draft-07 onwards, the OPTLS protocol of Krawczyk and Wee [35] is adopted as the foundation for TLS 1.3, including 0-RTT support and a semi-ephemeral Difﬁe-Hellman exchange, as well as a new resumption mechanism using PSKs.

### 1.5. Paper Organization
- **Section 2:** Introduces the main new features of the TLS 1.3 protocol and its stated security goals.
- **Section 3:** Describes how we formally model the protocol and its complex set of behaviors.
- **Section 4:** Formally specifies a range of secrecy and authentication properties that apply to different use cases and analyzes the protocol with respect to these properties.
- **Section 5:** Considers the addition of client authentication in PSK mode.
- **Section 6:** Concludes the paper and discusses future work.

## 2. TLS 1.3: New Mechanisms, Stated Goals, and Security Properties
We introduce the new mechanisms of TLS 1.3 in comparison to TLS 1.2 and present the protocol’s intended security properties as described by the specification.

### 2.1. Design
The main design goals for TLS 1.3 include [53]:
- Encrypt as much of the handshake as possible.
- Re-evaluate the handshake contents.
- Reduce handshake latency—one Round-Trip Time (1-RTT) for full handshakes, zero Round-Trip Time (0-RTT) for repeated handshakes.
- Update the record protection mechanisms.

#### Handshake Encryption
The motivation behind handshake encryption is to reduce the amount of observable data to both passive and active adversaries [53]. Unlike TLS 1.2, which only provides session keys to protect application data, TLS 1.3 establishes additional session keys for resumption and handshake encryption purposes. Handshake encryption begins immediately after the handshake keys have been negotiated via a Difﬁe-Hellman (DH) exchange.

#### Handshake Contents
The handshake structure has been reworked for efficiency. An additional server message accommodates parameter mismatches, and compression has been removed. Static DH and RSA have been removed in favor of PFS-supporting finite-field ephemeral Difﬁe-Hellman (DHE) and elliptic-curve ephemeral Difﬁe-Hellman (ECDHE) key exchange modes. RSA certificates are still used for transcript-signing keys in both DHE and ECDHE modes (alongside ECDSA certificates). Server-side signatures are mandated in all handshake modes.

#### Handshake Latency
The TLS 1.2 handshake required a two Round-Trip Time exchange before application data could be transmitted. TLS 1.3 reduces this to 1-RTT if no parameter mismatches occur. TLS 1.3 also includes a 0-RTT option, allowing the client to send application data as part of its first flight of messages. This functionality is enabled by a server providing a long-term (EC)DH share. On future connections to the same server, a client can use this share to encrypt early data.

Additionally, the pre-existing mechanism for Pre-Shared Keys (PSKs) has been extended to cover session resumption. This mode requires a single round trip and less computation than a full handshake.

#### Record Protection Mechanisms
Earlier versions of TLS used the MAC-then-Encrypt general composition scheme as a record protection mechanism. Despite not being secure in general [9], the particular use of this scheme in SSL was shown to be safe in practice by Krawczyk [31]. While it is still used in TLS 1.2, there was a proposal to replace it with the Encrypt-Then-MAC paradigm (cf. RFC 7366 [24]). Similarly, Krawczyk [33] announced that OPTLS would use Encrypt-then-MAC for record protection. Ultimately, the TLS working group decided that TLS 1.3 would avoid general composition schemes by using block ciphers that operate in Authenticated Encryption with Additional Data (AEAD) modes. All non-AEAD ciphers have been removed in TLS 1.3.

#### Key Derivation
TLS 1.3 employs the use of handshake traffic keys and application traffic keys. This keying material is derived from two secrets: the ephemeral secret (es) and the static secret (ss). In the 1-RTT (EC)DHE handshake, the es and ss are identical, derived from the ephemeral client and server key shares. In a PSK handshake, these values are again identical and take on the value of the PSK. In PSK-DHE mode, the es is derived from the ephemeral client and server key shares, and the ss is the PSK. In a 0-RTT handshake, the es is derived from the ephemeral client and server key shares, and the ss is computed using the server’s semi-static key share and the client’s ephemeral key share.

These secrets are used as inputs to the HMAC-based construction, HKDF [21], [32], to derive a master secret (ms), a resumption secret (rs), and a finished secret (fs). These secrets are derived according to the schematic presented in Figure 1.

### 2.2. Full (EC)DHE Handshake
The full (EC)DHE handshake involves the following steps:
- **ClientHello, ClientKeyShare:** The client initiates the handshake by sending a ClientHello message along with a ClientKeyShare.
- **HelloRetryRequest (optional):** If the server detects a parameter mismatch, it sends a HelloRetryRequest.
- **ServerHello, ServerKeyShare, {EncryptedExtensions}, {ServerConfiguration†}, {Certificate}, {CertificateRequest*}, {CertificateVerify}, {Finished}:** The server responds with a ServerHello, ServerKeyShare, and other necessary messages, including EncryptedExtensions, ServerConfiguration, Certificate, CertificateRequest (if client authentication is desired), and a signature on all messages exchanged thus far (CertificateVerify).
- **{Certificate*}, {CertificateVerify*}, {Finished}:** The client responds with its certificate (if requested), a signature on the messages (CertificateVerify), and a Finished message.
- **[Application data]:** Application data can now be transmitted.

## 3. Formal Modeling and Analysis
In this section, we describe how we formally model the TLS 1.3 protocol and its complex set of behaviors using the Tamarin prover. We specify and analyze the interaction of various handshake modes for an unbounded number of concurrent TLS sessions.

## 4. Secrecy and Authentication Properties
We formally specify a range of secrecy and authentication properties that apply to different use cases and analyze the protocol with respect to these properties. Our analysis confirms that draft-10 meets the goals of authenticated key exchange in both unilateral and mutual authentication cases.

## 5. Client Authentication in PSK Mode
We consider the addition of client authentication in PSK mode and uncover a potential attack where an adversary can impersonate a client during a PSK-resumption handshake. This highlights the strict necessity of creating a binding between TLS 1.3 handshakes.

## 6. Conclusion and Future Work
We conclude by summarizing our findings and discussing future work. Our analysis not only provides the first supporting evidence for the security of several complex protocol mode interactions in TLS 1.3 but also shows the necessity of including more information in the protocol's signature contents. As the final modifications are made to the TLS 1.3 specifications, our model will be updated, and the analysis re-run to ensure no new errors are introduced.

---

This optimized version of the text is more structured, clear, and professional, making it easier to read and understand.