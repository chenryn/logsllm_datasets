Over the years, numerous high-profile attacks have been identified against various OAuth implementations [23, 41, 37, 33, 43, 42, 16, 15, 24, 25]. Despite continuous scrutiny from the security community, the OAuth protocol remains a complex and often misunderstood topic for many mobile developers. Rather than focusing on individual attacks, our work aims to provide deeper insights into how real-world mobile developers interpret OAuth and why some interpretations are correct while others are not.

We are not the first to identify flaws in commercially deployed authentication protocols [41, 5, 4, 35, 38]. However, much of the previous research has concentrated on the security of web-based protocol implementations. Our study revealed that mobile platforms differ significantly from web environments, making it non-trivial for developers to translate secure web-based authentication mechanisms into the mobile context.

Our motivation to demystify OAuth was inspired by Chen et al.'s work on demystifying setuid UNIX system calls [8]. Recent studies have also highlighted situations where APIs and SDKs present significant challenges for developers to use securely. For example, Georgiev et al. demonstrated that developers of mobile applications often struggle to implement SSL certificate validation logic correctly [14]. Similarly, Wang et al. showed that popular SDKs frequently contain implicit security assumptions that developers may be unaware of [43].

Several other studies have examined the issues with custom schemes [9, 42]. Unlike these, our work does not focus on the specifics of the attacks but rather on understanding how and why these attacks occur. We highlight several nuances within the OAuth protocol that are prone to developer misconceptions when implemented in a mobile environment.

Permission re-delegation is another form of privilege escalation attack, which occurs when privileged services exposed by an application with permission are accessed by an application without permission [10, 12]. Various defenses have been proposed to mitigate such attacks [12, 11, 9, 21, 30]. The attacks discussed in this paper do not fall into the same category as permission re-delegation attacks, as our adversary is not interested in gaining access to privileged device resources. Instead, the attacker aims to obtain application-specific resources located on the service provider and the relying party.

Several defense mechanisms have been proposed that utilize privilege separation to secure mobile advertising libraries and prevent click fraud [20, 36, 32, 34, 11]. However, defenses based on privilege separation cannot address logic flaws induced by developers' misinterpretation of the OAuth protocol.

### Conclusion

The OAuth protocol was initially designed for website authorization, but over the years, it has taken on additional responsibilities, particularly as the de-facto standard for authentication and authorization in mobile applications. As we demonstrate in this paper, several key steps in the OAuth protocol flows and some OAuth concepts are confusing, vague, or unspecific when applied to mobile platforms. The consequences are severe: 59.7% of OAuth-capable mobile applications in our study were found to be vulnerable. The mistakes were diverse, including improper storage of application secrets, confusion between authentication and authorization, and the use of arbitrary client mechanisms to redirect secret tokens. Some developers even invented their own OAuth protocol flows.

Our findings have been communicated to the vendors of the vulnerable applications, and most vendors have positively confirmed the issues, with some already applying fixes, which is encouraging. However, we believe the ultimate solution to this problem lies in the OAuth Working Group's effort to develop clear usage guidelines specifically targeting mobile platforms. We hope that our work will prompt such an effort.

### Acknowledgements

We thank Rui Wang and anonymous reviewers for their valuable comments.

### References

[1] Apple Inc. Advanced app tracks. https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/AdvancedAppTricks/AdvancedAppTricks.html.
[2] Apple Inc. Implementing custom URL schemes. https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/AdvancedAppTricks/AdvancedAppTricks.html#//apple_ref/doc/uid/TP40007072-CH7-SW50.
[3] Apple Inc. UIWebView class reference. https://developer.apple.com/library/ios/documentation/uikit/reference/UIWebView_Class/Reference/Reference.html.
[4] A. Armando, R. Carbone, L. Compagna, J. Cuellar, and L. Tobarra. Formal analysis of SAML 2.0 web browser single sign-on: Breaking the SAML-based single sign-on for Google Apps. In Proceedings of the 6th ACM Workshop on Formal Methods in Security Engineering, FMSE '08, pages 1–10, New York, NY, USA, 2008. ACM.
[5] G. Bai, J. Lei, G. Meng, S. S. Venkatraman, P. Saxena, J. Sun, Y. Liu, and J. S. Dong. AuthScan: Automatic extraction of web authentication protocols from implementations. In NDSS. The Internet Society, 2013.
[6] A. Barth, C. Jackson, and J. C. Mitchell. Securing frame communication in browsers. Commun. ACM, 52(6):83–91, June 2009.
[7] J. Bradley. The problem with OAuth for authentication. http://www.thread-safe.com/2012/01/problem-with-oauth-for-authentication.html.
[8] H. Chen, D. Wagner, and D. Dean. Setuid demystified. In Proceedings of the 11th USENIX Security Symposium, pages 171–190, Berkeley, CA, USA, 2002. USENIX Association.
[9] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing inter-application communication in Android. In Proceedings of the 9th International Conference on Mobile Systems, Applications, and Services, MobiSys '11, pages 239–252, New York, NY, USA, 2011. ACM.
[10] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Privilege escalation attacks on Android. In Proceedings of the 13th International Conference on Information Security, ISC'10, pages 346–360, Berlin, Heidelberg, 2011. Springer-Verlag.
[11] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach. Quire: Lightweight provenance for smartphone operating systems. In Proceedings of the 20th USENIX Conference on Security, SEC'11, pages 23–23, Berkeley, CA, USA, 2011. USENIX Association.
[12] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission re-delegation: Attacks and defenses. In USENIX Security Symposium. USENIX Association, 2011.
[13] B. Fitzpatrick and D. Recordon. OpenID authentication 1.1. http://openid.net/specs/openid-authentication-1_1.html.
[14] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and V. Shmatikov. The most dangerous code in the world: Validating SSL certificates in non-browser software. In Proceedings of the 2012 ACM Conference on Computer and Communications Security, CCS '12, pages 38–49, New York, NY, USA, 2012. ACM.
[15] N. Goldshlager. How I hacked any Facebook account...again! http://www.breaksec.com/?p=5753.
[16] N. Goldshlager. How I hacked Facebook OAuth to get full permission on any Facebook account (without app "allow" interaction). http://www.breaksec.com/?p=5734.
[17] Google Inc. Intent. http://developer.android.com/reference/android/content/Intent.html.
[18] Google Inc. Intents and intent filter. http://developer.android.com/guide/components/intents-filters.html.
[19] Google Inc. WebView. http://developer.android.com/reference/android/webkit/WebView.html.
[20] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi. Unsafe exposure analysis of mobile in-app advertisements. In Proceedings of the Fifth ACM Conference on Security and Privacy in Wireless and Mobile Networks, WISEC '12, pages 101–112, New York, NY, USA, 2012. ACM.
[21] M. C. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic detection of capability leaks in stock Android smartphones. In NDSS. The Internet Society, 2012.
[22] E. Hammer-Lahav. OAuth 2.0 and the road to hell. http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/.
[23] E. Hammer-Lahav. OAuth security advisory: 2009.1. http://oauth.net/advisories/2009-1/.
[24] E. Homakov. How we hacked Facebook with OAuth2 and Chrome bugs. http://homakov.blogspot.ca/2013/02/hacking-facebook-with-oauth2-and-chrome.html.
[25] E. Homakov. OAuth1, OAuth2, OAuth...? http://homakov.blogspot.ca/2013/03/oauth1-oauth2-oauth.html.
[26] Internet Engineering Task Force (IETF). The OAuth 1.0 protocol. http://tools.ietf.org/html/rfc5849.
[27] Internet Engineering Task Force (IETF). The OAuth 2.0 authorization framework. http://tools.ietf.org/html/rfc6749.
[28] Internet Engineering Task Force (IETF). The OAuth 2.0 authorization framework: Bearer token usage. http://tools.ietf.org/html/rfc6750.
[29] Internet Engineering Task Force (IETF). OAuth core 1.0 revision A. http://oauth.net/core/1.0a/.
[30] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: Statically vetting Android apps for component hijacking vulnerabilities. In Proceedings of the 2012 ACM Conference on Computer and Communications Security, CCS '12, pages 229–240, New York, NY, USA, 2012. ACM.
[31] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin. Attacks on WebView in the Android system. In Annual Conference on Security, SEC'13, pages 399–414, Berkeley, CA, USA, 2013. USENIX Association.
[32] P. Pearce, A. P. Felt, G. Nunez, and D. Wagner. Addroid: Privilege separation for applications and advertisers in Android. In Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security, ASIACCS '12, pages 71–72, New York, NY, USA, 2012. ACM.
[33] M. Shehab and F. Mohsen. Towards enhancing the security of OAuth implementations in smartphones. In Proceedings of the IEEE 3rd International Conference on Mobile Services, 2014.
[34] S. Shekhar, M. Dietz, and D. S. Wallach. AdSplit: Separating smartphone advertising from applications. In Proceedings of the 21st USENIX Conference on Security Symposium, Security'12, pages 28–28, Berkeley, CA, USA, 2012. USENIX Association.
[35] J. Somorovsky, A. Mayer, J. Schwenk, M. Kampmann, and M. Jensen. On breaking SAML: Be whoever you want to be. In Proceedings of the 21st USENIX Conference on Security Symposium, Security'12, pages 21–21, Berkeley, CA, USA, 2012.
[36] R. Stevens, C. Gibler, J. Crussell, J. Erickson, and H. Chen. Investigating user privacy in Android ad libraries. In IEEE Mobile Security Technologies (MoST), 2012.
[37] S.-T. Sun and K. Beznosov. The devil is in the (implementation) details: An empirical analysis of OAuth SSO systems. In Proceedings of the 2012 ACM Conference on Computer and Communications Security, CCS '12, pages 378–390, New York, NY, USA, 2012. ACM.
[38] S.-T. Sun, K. Hawkey, and K. Beznosov. Systematically breaking and fixing OpenID security: Formal analysis, semi-automated empirical evaluation, and practical countermeasures. Computers & Security, 31(4):465–483, 2012.
[39] Tencent Holdings Limited. Tencent announces 2012 fourth quarter and annual results. http://www.prnewswire.com/news-releases/tencent-announces-2012-fourth-quarter-and-annual-results-199130711.html.
[40] Tencent Holdings Limited. Tencent announces 2013 first quarter results. http://www.prnewswire.com/news-releases/tencent-announces-2013-first-quarter-results-207507531.html.
[41] R. Wang, S. Chen, and X. Wang. Signing me onto your accounts through Facebook and Google: A traffic-guided security study of commercially deployed single-sign-on web services. In IEEE Symposium on Security and Privacy, pages 365–379, 2012.
[42] R. Wang, L. Xing, X. Wang, and S. Chen. Unauthorized origin crossing on mobile platforms: Threats and mitigation. In Proceedings of the 2013 ACM SIGSAC Conference on Computer and Communications Security, CCS '13, pages 635–646, New York, NY, USA, 2013. ACM.
[43] R. Wang, Y. Zhou, S. Chen, S. Qadeer, D. Evans, and Y. Gurevich. Explicating SDKs: Uncovering assumptions underlying secure authentication and authorization. In Proceedings of the 22nd USENIX Conference on Security, SEC'13, pages 287–302, Berkeley, CA, USA, 2013. USENIX Association.