### Performance Over Encrypted Local Indexes

We compare the performance of our encrypted local indexes with an encrypted global index, which is based on the encrypted dictionary design from [5]. Our evaluation involves querying a specific attribute with up to 10,000 data values. As shown in Figure 6, the time cost increases linearly from 2,000 to 10,000 data values for the same number of nodes. However, the query on the global index is more than three times slower than the local indexes. This discrepancy arises because the global index does not account for data locality.

To process a secure query, a node first locates where the matched data is stored. If the data is not at the current node, it establishes another connection to the target node. The target node then establishes a connection to the client to return the data. Although the number of tokens scales linearly with the number of nodes in our design, while the global index design only requires the client to generate one token, the overhead introduced by token transmission is significantly smaller than the overhead introduced by additional interactions across different nodes.

From the results in Figure 6, the secure query can be effectively handled in parallel. The time cost with 6 nodes is roughly half that with 3 nodes when querying the same number of encrypted data. This is because the data in a column is fully scrambled using a Pseudo-Random Function (PRF), ensuring even distribution across different nodes. Each node processes approximately the same number of entries in their local index. As more nodes are used, the time to retrieve the same amount of data decreases. For example, it takes around 2 seconds and 4 seconds to retrieve 10,000 encrypted data values from 6 nodes and 3 nodes, respectively. We believe this advantage will be even more pronounced for other secure rich queries like counting, range, and aggregation.

In contrast, the encrypted global index does not benefit from scalability. The query time does not decrease linearly as the number of nodes increases. As seen in Figure 6, it takes 13 seconds and 17 seconds to retrieve 10,000 encrypted data values from 6 nodes and 3 nodes, respectively. One reason is that the encrypted global index must be processed serially. Another reason is that the costs introduced by inter-node connections dominate the cost of secure query processing. In summary, the proposed encrypted local indexes support very efficient search queries over encrypted data and outperform the encrypted global index if prior encrypted index designs are directly applied.

### Related Works

#### Private DBMS Systems
Recent practical encrypted DBMS systems have been proposed and implemented to support rich queries without compromising data confidentiality. A well-known system is CryptDB, designed by Popa et al. [32]. It uses onion encryption, which encrypts data in one or more layers for queries with different functionalities. The underlying structure of the DBMS remains unchanged to support most SQL queries. Tu et al. developed MONOMI to improve CryptDB's performance and allow analytical queries over encrypted data [37]. MONOMI is built on CryptDB but includes a dedicated query planner to optimize complex analytic queries, dividing them between the server and the client.

Very recently, Pappas et al. presented BlindSeer to achieve better query privacy and support arbitrary boolean queries [29]. It uses an encrypted Bloom filter tree for backend storage, embedding the query into a Bloom filter. BlindSeer performs secure function evaluation via garbled circuits and oblivious transfer for tree traversal. All these encrypted DBMSs focus on executing rich queries over encrypted data in centralized DBMS systems, which are not designed for the scale and performance needs of modern data-intensive applications. They differ from our system in this regard.

Another mechanism for protecting data and query privacy is to apply fragmentation and encryption in databases [1, 8]. Aggarwal et al. assume data is stored at two non-colluding servers, protecting sensitive associations through fragmentation [1]. Ciriani et al. model privacy constraints to represent the sensitivity of attributes and associations, improving performance by minimizing the number of fragmentations [8]. Chow et al. propose a two-party computation model for privacy-preserving queries on distributed databases [7]. These designs assume that involved servers do not collude, whereas our design ensures data confidentiality even if all nodes collude.

#### Search Over Encrypted Data
Our system design is also related to searchable symmetric encryption (SSE) schemes, which provide secure and efficient search over encrypted data. Curtmola et al. improved the security definitions of SSE and introduced new constructions with sublinear search time [10]. Kamara et al. proposed a dynamic SSE scheme supporting adding and deleting files, capturing the leakage of dynamic operations [19]. Several attacks on SSE exploit search and access patterns to recover queries and document sets, assuming partial information about the documents and queries [4, 18].

Chase et al. designed an SSE scheme for arbitrarily structured data [6], introducing structured encryption and enabling lookup queries on encrypted matrix-structured data with controlled disclosure. Cash et al. designed and implemented an efficient dynamic SSE to handle large amounts of data [5], addressing the locality of documents with the same keywords and improving I/O parallelism. Kuzu et al. proposed an encrypted and distributed index for secure keyword search [22], building an encrypted inverted index and partitioning it into different regions. However, these designs require rebuilding the entire index when new nodes are added and introduce many connections and interactions between data and index nodes due to a lack of consideration for data and index locality.

### Conclusion
This paper presents a scalable, private, and searchable key-value store, allowing clients to outsource a growing amount of data to public clouds with strong privacy assurance. The proposed underlying storage is an encrypted key-value store, which is secure and highly scalable. Data values are evenly distributed using a standard consistent hashing algorithm. Two basic APIs are provided for secure and fast data retrieval and update on single encrypted data values. To support search queries over encrypted and distributed data, we designed encrypted local indexes considering data and index locality and provided rigorous security analysis. We implemented the system prototype, deployed it to Microsoft Azure, and evaluated it comprehensively according to the performance metrics for distributed database systems. The results show that our system is practical, introducing little security overhead compared to plaintext systems.

### Acknowledgment
This work was supported in part by the Research Grants Council of Hong Kong (Project No. CityU 138513), National Natural Science Foundation of China (Project No. 61572412), US National Science Foundation under grant CNS-1464335, and a Microsoft Azure grant for research.

### References
[1] G. Aggarwal, M. Bawa, P. Ganesan, H. Garcia-Molina, K. Kenthapadi, R. Motwani, U. Srivastava, D. Thomas, and Y. Xu. "Two Can Keep a Secret: A Distributed Architecture for Secure Database Services." In Proc. of CIDR, 2005.
[2] A. Bessani, M. Correia, B. Quaresma, F. André, and P. Sousa. "DepSky: Dependable and Secure Storage in a Cloud-of-Clouds." ACM TOS, 9(4):12, 2013.
[3] A. Boldyreva, N. Chenette, and A. O’Neill. "Order-Preserving Encryption Revisited: Improved Security Analysis and Alternative Solutions." In Proc. of CRYPTO. Springer, 2011.
[4] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart. "Leakage-Abuse Attacks Against Searchable Encryption." In Proc. of ACM CCS, 2015.
[5] D. Cash, J. Jaeger, S. Jarecki, C. Jutla, H. Krawczyk, M.-C. Rosu, and M. Steiner. "Dynamic Searchable Encryption in Very Large Databases: Data Structures and Implementation." In Proc. of NDSS, 2014.
[6] M. Chase and S. Kamara. "Structured Encryption and Controlled Disclosure." In Proc. of ASIACRYPT, 2010.
[7] S. Chow, J.-H. Lee, and L. Subramanian. "Two-Party Computation Model for Privacy-Preserving Queries Over Distributed Databases." In Proce. of NDSS, 2009.
[8] V. Ciriani, S. D. C. D. Vimercati, S. Foresti, S. Jajodia, S. Paraboschi, and P. Samarati. "Combining Fragmentation and Encryption to Protect Privacy in Data Storage." ACM TISSEC, 13(3):22, 2010.
[9] B. F. Cooper, A. Silberstein, E. Tam, R. Ramakrishnan, and R. Sears. "Benchmarking Cloud Serving Systems with YCSB." In Proc. of the 1st ACM Symposium on Cloud Computing, 2010.
[10] R. Curtmola, J. A. Garay, S. Kamara, and R. Ostrovsky. "Searchable Symmetric Encryption: Improved Definitions and Efficient Constructions." Journal of Computer Security, 19(5):895–934, 2011.
[11] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lakshman, A. Pilchin, S. Sivasubramanian, P. Vosshall, and W. Vogels. "Dynamo: Amazon’s Highly Available Key-Value Store." In Proc. of ACM SOSP, 2007.
[12] R. Escriva, B. Wong, and E. G. Sirer. "HyperDex: A Distributed, Searchable Key-Value Store." In Proc. of ACM SIGCOMM, 2012.
[13] FoundationDB. "FoundationDB: Data Modeling." Online at http://www.odbms.org/wp-content/uploads/2013/11/data-modeling.pdf, 2013.
[14] FoundationDB. "A Rock-Solid, High-Performance Database That Provides NoSQL and SQL Access." Online at https://foundationdb.com/, 2015.
[15] F. Hahn and F. Kerschbaum. "Searchable Encryption with Secure and Efficient Updates." In Proc. of ACM CCS, 2014.
[16] HBase. "The Hadoop Database, a Distributed, Scalable, Big Data Store." Online at http://hbase.apache.org, 2010.
[17] InfoWorld. "The Rise of the Multimodel Database." Online at http://www.infoworld.com/article/2861579/database/the-rise-of-the-multimodel-database.html, 2015.
[18] M. Islam, M. Kuzu, and M. Kantarcioglu. "Access Pattern Disclosure on Searchable Encryption: Ramification, Attack, and Mitigation." In Proc. of NDSS, 2012.
[19] S. Kamara, C. Papamanthou, and T. Roeder. "Dynamic Searchable Symmetric Encryption." In Proc. of ACM CCS, 2012.
[20] D. Karger, E. Lehman, T. Leighton, R. Panigrahy, M. Levine, and D. Lewin. "Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web." In Proc. of ACM STOC, 1997.
[21] V. Kher and Y. Kim. "Securing Distributed Storage: Multi-Model Database Platform." Online at http://www.datastax.com/2015/02/datastax-graph-and-the-move-to-a-multi-model-database-platform, 2015.
[22] M. Kuzu, M. S. Islam, and M. Kantarcioglu. "Distributed Search Over Encrypted Big Data." In Proc. of ACM CODASPY, 2015.
[23] A. Lakshman and P. Malik. "Cassandra: A Decentralized Structured Storage System." Operating Systems Review, 44(2):35–40, 2010.
[24] M. Li, C. Qin, and P. P. Lee. "CDStore: Toward Reliable, Secure, and Cost-Efficient Cloud Storage via Convergent Dispersal." In Proc. of USENIX ATC, 2015.
[25] MongoDB. "A Cross-Platform Document-Oriented Database." Online at https://www.mongodb.com/, 2015.
[26] M. Naveed, S. Kamara, and C. V. Wright. "Inference Attacks on Property-Preserving Encrypted Databases." In Proc. of ACM CCS, 2015.
[27] J. Ousterhout, A. Gopalan, A. Gupta, A. Kejriwal, C. Lee, B. Montazeri, D. Ongaro, S. J. Park, H. Qin, M. Rosenblum, et al. "The RAMCloud Storage System." ACM TOCS, 33(3):7, 2015.
[28] P. Paillier. "Public-Key Cryptosystems Based on Composite Degree Residuosity Classes." In Proc. of EUROCRYPT, 1999.
[29] V. Pappas, B. Vo, F. Krell, S. Choi, V. Kolesnikov, A. Keromytis, and T. Malkin. "Blind Seer: A Scalable Private DBMS." In Proc. of IEEE S&P, 2014.
[30] E. Pattuk, M. Kantarcioglu, V. Khadilkar, H. Ulusoy, and S. Mehrotra. "BigSecret: A Secure Data Management Framework for Key-Value Stores." In Proc. of IEEE Int’l Conference on Cloud Computing, 2013.
[31] R. A. Popa, F. H. Li, and N. Zeldovich. "An Ideal-Security Protocol for Order-Preserving Encoding." In Proc. of IEEE S&P, 2013.
[32] R. A. Popa, C. Redfield, N. Zeldovich, and H. Balakrishnan. "CryptDB: Protecting Confidentiality with Encrypted Query Processing." In Proc. of ACM SOSP. ACM, 2011.
[33] Redis. "An Advanced Key-Value Cache and Store." Online at http://redis.io/, 2015.
[34] K. Ren, C. Wang, Q. Wang, et al. "Security Challenges for the Public Cloud." IEEE Internet Computing, 16(1):69–73, 2012.
[35] R. Schumacher. "DataStax, Graph, and the Move to a Multi-Model Database Platform." Online at http://www.datastax.com/2015/02/datastax-graph-and-the-move-to-a-multi-model-database-platform, 2015.
[36] D. Thain, T. Tannenbaum, and M. Livny. "Distributed Computing in Practice: The Condor Experience." Concurrency and Computation: Practice and Experience, 17(2-4):323–356, 2005.
[37] S. Tu, M. F. Kaashoek, S. Madden, and N. Zeldovich. "Processing Analytical Queries Over Encrypted Data." In Proc. of the VLDB Endowment, volume 6, pages 289–300, 2013.