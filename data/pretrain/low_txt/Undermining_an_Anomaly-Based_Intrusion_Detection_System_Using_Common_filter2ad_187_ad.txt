# Undermining an Anomaly-Based Intrusion Detection System

## 1. Introduction
This study demonstrates the potential for undermining anomaly-based intrusion detection systems (IDS) by modifying common exploits to exploit their weaknesses. Specifically, it shows how such modifications can move the manifestation of an attack from a detectable region to a blind spot, thereby evading detection.

### 1.1 Background
The study focuses on the `stide` IDS, which is configured with a detector window size of 6. The goal is to show that by modifying the `passwd` and `traceroute` exploits, they can be made undetectable by `stide`.

## 2. Methodology
The methodology involves:
- **Detection Region Analysis:** Identifying the regions where `stide` can and cannot detect anomalies.
- **Exploit Modification:** Modifying the `passwd` and `traceroute` exploits to fall within the blind spots of `stide`.
- **Evaluation:** Assessing the effectiveness of these modifications in evading detection.

### 2.1 Detection Region Analysis
Figure 2 illustrates the detector coverage map for `stide`, showing how different versions of the `traceroute` exploit are detected. Each version is plotted based on its size and the number of configurations in which it can be detected. The final version is completely undetectable, indicating a blind spot in `stide`.

### 2.2 Exploit Modification
By modifying the `passwd` and `traceroute` exploits, the study shows that it is possible to control their manifestation so that they fall within the blind spots of `stide`. This effectively hides the exploits from the detector's view.

## 3. Results
The results demonstrate that:
- **Hiding Exploits:** It is possible to hide the `passwd` and `traceroute` exploits from `stide` by modifying them to manifest only within `stide`'s blind spots.
- **Controlled Manifestation:** The study also shows that it is possible to control the manifestation of an attack, moving it from a detectable region to a blind spot.

## 4. Discussion
### 4.1 Implications for Anomaly Detector Development
- **Identifying Weaknesses:** By identifying the specific events and conditions that characterize the detection blindness for `stide`, developers can be forewarned about these weaknesses.
- **Mitigation Strategies:** Combining `stide` with another detector that compensates for its weaknesses can mitigate the threat. The variable sequence size model explored by Marceau [11] is a promising approach.
- **Data Expressiveness:** The ease with which attackers can introduce sequences into system call data suggests that more expressive forms of data may be needed to improve the effectiveness of anomaly detectors.

### 4.2 Implications for Anomaly Detector Evaluation
- **Anomaly-Based Evaluation:** An evaluation method focused on anomaly detection can provide broader and more reliable results compared to current methods that focus on detecting attacks.
- **Accuracy Improvement:** Anomaly-based evaluation can help in increasing the accuracy of anomaly detectors in detecting various types of anomalies.

## 5. Related Work
- **Signature-Based IDS:** Ptacek and Newsham [14] highlighted weaknesses in signature-based IDS, but this study extends the concern to anomaly-based IDS.
- **Mimicry Attacks:** Wagner and Dean [20] introduced the concept of mimicry attacks, and this study provides real-world examples of such attacks.

## 6. Conclusion
This study has shown that anomaly-based intrusion detection systems can be effectively undermined by modifying common exploits. By identifying and exploiting the weaknesses in `stide`, the study demonstrates the need for more robust and comprehensive anomaly detection mechanisms.

## References
1. Debar, H., Dacier, M., & Wespi, A. (1999). Towards a taxonomy of intrusion-detection systems. *Computer Networks*, 31(8), 805–822.
2. Forrest, S., Hofmeyr, S. A., Somayaji, A., & Longstaff, T. A. (1996). A sense of self for UNIX processes. In *Proceedings of the 1996 IEEE Symposium on Security and Privacy* (pp. 120–128).
3. Gafton, C. (1998). passwd(1). Included in passwd version 0.64.1-1 software package.
4. Ghosh, A. K., Schwartzbard, A., & Schatz, M. (1999). Learning program behavior profiles for intrusion detection. In *Proceedings of the 1st Workshop on Intrusion Detection and Network Monitoring* (pp. 51–62).
5. Ghosh, A. K., Wanken, J., & Charron, F. (1998). Detecting anomalous and unknown intrusions against programs. In *Proceedings of the 14th Annual Computer Security Applications Conference* (pp. 259–267).
6. Hofmeyr, S. A., Forrest, S., & Somayaji, A. (1998). Intrusion detection using sequences of system calls. *Journal of Computer Security*, 6(3), 151–180.
7. Jacobson, V. (1997). Traceroute(8). Included in traceroute version 1.4a5 software package.
8. Kaempf, M. "MaXX" (2002). Traceroot2: Local root exploit in LBNL traceroute. Retrieved from http://packetstormsecurity.org/0011-exploits/traceroot2.c
9. Kumar, S. (1995). Classification and Detection of Computer Intrusions. PhD thesis, Purdue University.
10. Lunt, T. (1988). Automated audit trail analysis and intrusion detection: A survey. In *Proceedings of the 11th National Computer Security Conference* (pp. 65–73).
11. Marceau, C. (2001). Characterizing the behavior of a program using multiple-length N-grams. In *New Security Paradigms Workshop* (pp. 101–110).
12. Maxion, R. A., & Tan, K. M. C. (2002). Anomaly detection in embedded systems. *IEEE Transactions on Computers*, 51(2), 108–120.
13. Moore, A. P. (2002). CERT/CC vulnerability note VU#176888. Retrieved from http://www.kb.cert.org/vuls/id/176888
14. Ptacek, T. H., & Newsham, T. N. (1998). Insertion, evasion, and denial of service: Eluding network intrusion detection. Secure Networks, Inc.
15. Purczynski, W. (original author) & "lst" (author of improvements) (2002). Epcs2: Exploit for execve/ptrace race condition in Linux kernel up to 2.2.18. Retrieved from http://www.securiteam.com/exploits/5NP061P4AW.html
16. SecurityFocus Vulnerability Archive. (2002). LBNL Traceroute Heap Corruption Vulnerability, Bugtraq ID 1739. Retrieved from http://online.securityfocus.com/bid/1739
17. SecurityFocus Vulnerability Archive. (2002). Linux PTrace/Setuid Exec Vulnerability, Bugtraq ID 3447. Retrieved from http://online.securityfocus.com/bid/3447
18. Somayaji, A., & Hunsicker, G. (2002). IMMSEC Kernel-level system call tracing for Linux 2.2, Version 991117. Obtained through private communication.
19. Tan, K. M. C., & Maxion, R. A. (2002). "Why 6?" Defining the operational limits of stide, an anomaly-based intrusion detector. In *Proceedings of the 2002 IEEE Symposium on Security and Privacy* (pp. 188–201).
20. Wagner, D., & Dean, D. (2001). Intrusion detection via static analysis. In *Proceedings of the 2001 IEEE Symposium on Security and Privacy*.
21. Warrender, C., Forrest, S., & Pearlmutter, B. (1999). Detecting intrusions using system calls: Alternative data models. In *Proceedings of the 1999 IEEE Symposium on Security and Privacy* (pp. 133–145).