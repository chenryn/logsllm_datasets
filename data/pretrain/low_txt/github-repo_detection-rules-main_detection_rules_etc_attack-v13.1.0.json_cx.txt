### Rogue Domain Controller

**Description:**
Adversaries may register a rogue Domain Controller (DC) to manipulate Active Directory (AD) data, including objects and schemas. This technique, known as DCShadow, allows adversaries to create a rogue DC that can inject and replicate changes into the AD infrastructure, such as credentials and keys. Once registered, the rogue DC can bypass system logging and security monitors, such as Security Information and Event Management (SIEM) products, and alter or delete replication metadata to obstruct forensic analysis.

**Registration Process:**
Registering a rogue DC involves creating new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires either Domain or local DC Administrator privileges or the KRBTGT hash. This technique can be used to perform SID-History Injection and manipulate AD objects to establish backdoors for persistence.

**Detection:**
- Monitor and analyze network traffic associated with data replication.
- Leverage AD directory synchronization (DirSync) to monitor changes to the directory state.
- Baseline and periodically analyze the Configuration partition of the AD schema.
- Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services.

**References:**
- [DCShadow Blog](https://www.dcshadow.com/)
- [Adsecurity Mimikatz Guide](https://adsecurity.org/?page_id=1821)
- [GitHub DCSYNCMonitor](https://github.com/shellster/DCSYNCMonitor)
- [Microsoft DirSync](https://msdn.microsoft.com/en-us/library/ms677626.aspx)
- [ADDSecurity DCShadow Feb 2018](https://adds-security.blogspot.fr/2018/02/detecter-dcshadow-impossible.html)

---

### Code Signing Policy Modification

**Description:**
Adversaries may modify code signing policies to enable the execution of unsigned or self-signed code. Security controls, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS, ensure that only valid, signed code runs on an operating system. Adversaries may disable these features using command-line or GUI utilities, modifying the Registry, rebooting the computer in debug/recovery mode, or altering kernel memory variables.

**Implementation:**
- Use commands like `bcdedit.exe -set TESTSIGNING ON` on Windows and `csrutil disable` on macOS.
- Modify the code signing policy through the Registry or by conducting exploitation for privilege escalation to access kernel memory.

**Detection:**
- Monitor processes and command-line arguments for actions that modify code signing policies.
- Monitor for modifications made to Registry keys associated with code signing policies.
- Detect and alert on the creation of nTDSDSA objects in the AD schema.

**References:**
- [Microsoft DSE June 2017](https://docs.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653559(v=vs.85)?redirectedfrom=MSDN)
- [Apple Disable SIP](https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection)
- [Microsoft Unsigned Driver Apr 2017](https://docs.microsoft.com/en-us/windows-hardware/drivers/install/installing-an-unsigned-driver-during-development-and-test)
- [Microsoft TESTSIGNING Feb 2021](https://docs.microsoft.com/en-us/windows-hardware/drivers/install/the-testsigning-boot-configuration-option)
- [FireEye HIKIT Rootkit Part 2](https://www.fireeye.com/blog/threat-research/2012/08/hikit-rootkit-advanced-persistent-attack-techniques-part-2.html)
- [GitHub Turla Driver Loader](https://github.com/hfiref0x/TDL)

---

### Deploy Container

**Description:**
Adversaries may deploy a container into an environment to facilitate execution or evade defenses. Containers can be deployed via Docker's create and start APIs, web applications like the Kubernetes dashboard, or Kubeflow. Adversaries may use retrieved or built malicious images or benign images that download and execute malicious payloads at runtime.

**Deployment Methods:**
- Deploy containers based on malicious images or from benign images that download and execute malicious payloads.
- Configure containers without network rules, user limitations, etc., to bypass existing defenses.

**Detection:**
- Monitor for suspicious or unknown container images and pods.
- Deploy logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application pods.
- Monitor the daemon log in Docker for remote API calls.
- Log and monitor management services or applications used to deploy containers.

**References:**
- [Aqua Build Images on Hosts](https://blog.aquasec.com/malicious-container-image-docker-container-host)
- [Docker Containers API](https://docs.docker.com/engine/api/v1.41/#tag/Container)
- [Kubeflow Pipelines](https://www.kubeflow.org/docs/components/pipelines/overview/pipelines-overview/)
- [Kubernetes Dashboard](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/)

---

### File Deletion

**Description:**
Adversaries may delete files left behind by their intrusion activities to minimize their footprint. Tools available from the host operating system, such as native `cmd` functions like `DEL`, or secure deletion tools like SDelete, can be used to remove these files. Adversaries may also use other third-party file deletion tools.

**Implementation:**
- Use native `cmd` functions like `DEL`.
- Use secure deletion tools like SDelete.
- Use other third-party file deletion tools.

**Detection:**
- Monitor for command-line deletion functions and correlate with binaries or files dropped and removed.
- Monitor for known deletion and secure deletion tools not already on systems within the enterprise network.
- Collect and analyze command-line arguments and events related to file deletion.

**References:**
- [Trend Micro APT Attack Tools](http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/)

---

### Private Keys

**Description:**
Adversaries may gather private keys from compromised systems for use in authenticating to Remote Services like SSH or for decrypting other collected files such as email. Common key and certificate file extensions include `.key`, `.pgp`, `.gpg`, `.ppk`, `.p12`, `.pem`, `.pfx`, `.cer`, `.p7b`, `.asc`. Adversaries may also look in common key directories, such as `~/.ssh` for SSH keys on *nix-based systems or `C:\Users\(username)\.ssh\` on Windows.

**Collection:**
- Search for file extensions related to cryptographic keys and certificates.
- Look in common key directories.
- Use tools to search for private key and certificate files.

**Detection:**
- Monitor access to files and directories related to cryptographic keys and certificates.
- Collect authentication logs and look for potentially abnormal activity.
- Use input capture for keylogging or attempt to brute force passphrases offline.

**References:**
- [Wikipedia Public Key Crypto](https://en.wikipedia.org/wiki/Public-key_cryptography)
- [Kaspersky Careto](https://kasperskycontenthub.com/wp-content/uploads/sites/43/vlpdfs/unveilingthemask_v1.0.pdf)
- [Palo Alto Prince of Persia](https://researchcenter.paloaltonetworks.com/2016/06/unit42-prince-of-persia-game-over/)

---

### Modify Registry

**Description:**
Adversaries may interact with the Windows Registry to hide configuration information, remove information, or aid in persistence and execution. Access to specific areas of the Registry depends on account permissions, and some require administrator-level access. The built-in Windows command-line utility `Reg` may be used for local or remote Registry modification.

**Modification:**
- Modify the Registry to hide keys, such as prepending key names with a null character.
- Abuse pseudo-hidden keys to conceal payloads or commands used for persistence.
- Modify the Registry of a remote system to aid in the execution of files as part of lateral movement.

**Detection:**
- Enable Registry Auditing on specific keys to produce an alertable event.
- Monitor for changes to Registry entries that load software on Windows startup.
- Monitor processes and command-line arguments for actions that change or delete information in the Registry.
- Inspect and clean up malicious hidden Registry entries using Native Windows API calls and tools like Autoruns and RegDelNull.

**References:**
- [Microsoft Reg](https://technet.microsoft.com/en-us/library/cc732643.aspx)
- [Microsoft Remote](https://technet.microsoft.com/en-us/library/cc754820.aspx)
- [Microsoft 4657 APR 2017](https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4657)
- [SpectorOps Hiding Reg Jul 2017](https://posts.specterops.io/hiding-registry-keys-with-psreflect-b18ec5ac8353)
- [Microsoft Reghide NOV 2006](https://docs.microsoft.com/sysinternals/downloads/reghide)
- [Microsoft RegDelNull July 2016](https://docs.microsoft.com/en-us/sysinternals/downloads/regdelnull)
- [TrendMicro POWELIKS AUG 2014](https://blog.trendmicro.com/trendlabs-security-intelligence/poweliks-malware-hides-in-windows-registry/)

---

### Launch Daemon

**Description:**
Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework on macOS. These daemons run in the background without user interaction and are executed for every user on a system prior to login.

**Implementation:**
- Install a Launch Daemon configured to execute at startup using the `RunAtLoad` parameter set to `true` and the `Program` parameter set to the malicious executable path.
- Disguise the daemon name by using a name from a related operating system or benign software.
- Modify executables referenced by current Launch Daemon's plist files if the system configuration allows it.

**Detection:**
- Monitor for new files added to the `/Library/LaunchDaemons/` folder.
- Ensure the `Program` parameter points to signed code or executables in alignment with enterprise policy.
- Monitor for parameters that are interchangeable but must be present, such as `Program` and `ProgramArguments`.

**References:**
- [AppleDocs Launch Agent Daemons](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html)
- [Methods of Mac Malware Persistence](https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf)
- [launchd Keywords for plists](https://www.real-world-systems.com/docs/launchdPlist.1.html)
- [WireLurker](https://www.paloaltonetworks.com/content/dam/pan/en_US/assets/pdf/reports/Unit_42/unit42-wirelurker.pdf)
- [OSX Malware Detection](https://www.synack.com/wp-content/uploads/2016/03/RSA_OSX_Malware.pdf)
- [LaunchDaemon Hijacking](https://bradleyjkemp.dev/post/launchdaemon-hijacking/)
- [sentinelone macos persist Jun 2019](https://www.sentinelone.com/blog/how-malware-persists-on-macos/)

---

### Cloud Infrastructure Discovery

**Description:**
Adversaries may attempt to discover infrastructure and resources available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots, as well as resources of other services like storage and databases.

**Discovery:**
- Use APIs and commands issued through CLIs to gather information about infrastructure.
- Enumerate resources using a compromised user's access keys.
- Use open-source tools to discover cloud storage infrastructure through wordlist scanning.

**Detection:**
- Establish centralized logging for the activity of cloud infrastructure components.
- Monitor logs for actions that could be taken to gather information about cloud infrastructure.
- To reduce false positives, introduce a known identifier that is logged with the change if supported by the cloud provider.

**References:**
- [Expel IO Evil in AWS](https://expel.io/blog/finding-evil-in-aws/)
- [AWS Head Bucket](https://docs.aws.amazon.com/AmazonS3/latest/API/API_HeadBucket.html)
- [AWS Get Public Access Block](https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetPublicAccessBlock.html)
- [AWS Describe DB Instances](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBInstances.html)
- [Amazon Describe Instance](https://docs.aws.amazon.com/cli/latest/reference/ssm/describe-instance-information.html)
- [Amazon Describe Instances API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html)
- [Google Compute Instances](https://cloud.google.com/sdk/gcloud/reference/compute/instances/list)
- [Mandiant M-Trends 2020](https://content.fireeye.com/m-trends/rpt-m-trends-2020)
- [Microsoft AZ CLI](https://docs.microsoft.com/en-us/cli/azure/ad/user?view=azure-cli-latest)
- [Malwarebytes OSINT Leaky Buckets - Hioureas](https://blog.malwarebytes.com/researchers-corner/2019/09/hacking-with-aws-incorporating-leaky-buckets-osint-workflow/)

---

### Credentials from Web Browsers

**Description:**
Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords in an encrypted format within a credential store. Adversaries may extract plaintext credentials from these stores.

**Acquisition:**
- Read encrypted credentials from Google Chrome's `Login Data` database file and use the Windows API function `CryptUnprotectData` to obtain the plaintext password.
- Execute similar procedures for common web browsers such as Firefox, Safari, Edge, etc.
- Search web browser process memory for patterns that commonly match credentials.

**Detection:**
- Identify web browser files that contain credentials and monitor file read events.
- Monitor process execution logs, including PowerShell Transcription, for behaviors that indicate credential extraction.
- Monitor for processes that read web browser process memory and use regular expressions to identify credentials.

**References:**
- [Talos Olympic Destroyer 2018](https://blog.talosintelligence.com/2018/02/olympic-destroyer.html)
- [Microsoft CryptUnprotectData April 2018](https://docs.microsoft.com/en-us/windows/desktop/api/dpapi/nf-dpapi-cryptunprotectdata)
- [Proofpoint Vega Credential Stealer May 2018](https://www.proofpoint.com/us/threat-insight/post/new-vega-stealer-shines-brightly-targeted-campaign)
- [FireEye HawkEye Malware July 2017](https://www.fireeye.com/blog/threat-research/2017/07/hawkeye-malware-distributed-in-phishing-campaign.html)
- [GitHub Mimikittenz July 2016](https://github.com/putterpanda/mimikittenz)

---

### Path Interception by Search Order Hijacking

**Description:**
Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.

**Hijacking:**
- Create a program named after the improperly specified program and place it within the initiating program's directory.
- Place a program called `net.exe` within the same directory as `example.exe`, causing `net.exe` to be run instead of the Windows system utility `net`.

**Detection:**
- Monitor file creation for files named after partial directories and in locations that should not be user-writable.
- Monitor the executing process for process executable paths that are named for partial directories.
- Monitor file creation for programs named after Windows system programs or programs commonly executed without a path.
- If this activity occurs outside of known administration activity, upgrades, installations, or patches, it may be suspicious.

**References:**
- [Microsoft CreateProcess](http://msdn.microsoft.com/en-us/library/ms682425)
- [Windows NT Command Shell](https://docs.microsoft.com/en-us/previous-versions//cc723564(v=technet.10)?redirectedfrom=MSDN#XSLTsection127121120120)
- [Microsoft WinExec](http://msdn.microsoft.com/en-us/library/ms687393)
- [Microsoft Environment Property](https://docs.microsoft.com/en-us/previous-versions//fd7hxfdd(v=vs.85)?redirectedfrom=MSDN)

---

### Defacement

**Description:**
Adversaries may modify visual content available internally or externally to an enterprise network, affecting the integrity of the original content. Reasons for defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used to cause user discomfort or pressure compliance with accompanying messages.

**Implementation:**
- Modify internal and external websites to display unplanned content.
- Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection.
- Use Web Application Firewalls to detect improper inputs attempting exploitation.

**Detection:**
- Monitor internal and external websites for unplanned content changes.
- Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation.
- Use deep packet inspection to look for artifacts of common exploit traffic.
- Use Web Application Firewalls to detect improper inputs attempting exploitation.

**References:**
- None

---

### Unused/Unsupported Cloud Regions

**Description:**
Adversaries may create cloud instances in unused geographic service regions to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure. Cloud service providers often provide infrastructure throughout the world, and customers may only use a subset of the available regions. If an adversary creates resources in an unused region, they may be able to operate undetected.

**Implementation:**
- Utilize regions that do not support advanced detection services to avoid detection.
- An example of adversary use of unused AWS regions is to mine cryptocurrency through Resource Hijacking, which can cost organizations substantial amounts of money over time.

**Detection:**
- Monitor system logs to review activities occurring across all cloud environments and regions.
- Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.

**References:**
- [CloudSploit - Unused AWS Regions](https://blog.cloudsploit.com/the-danger-of-unused-aws-regions-af0bf1b878fc)

---

### DHCP Spoofing

**Description:**
Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols.

**Spoofing:**
- Spoof as a rogue DHCP server on the victim network, providing adversary-owned DNS servers to the victimized computers.
- Achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.
- Use the rogue DHCP server to respond to DHCPv6 INFORMATION-REQUEST messages with malicious network configurations.

**Detection:**
- Monitor network traffic for suspicious/malicious behavior involving DHCP, such as changes in DNS and/or gateway parameters.
- Monitor Windows logs for Event IDs (EIDs) 1341, 1342, 1020, and 1063, which specify that the IP allocations are low or have run out.

**References:**
- [rfc2131](https://datatracker.ietf.org/doc/html/rfc2131)
- [new_rogue_DHCP_serv_malware](https://isc.sans.edu/forums/diary/new+rogueDHCP+server+malware/6025/)
- [rfc3315](https://datatracker.ietf.org/doc/html/rfc3315)
- [dhcp_serv_op_events](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn800668(v=ws.11))
- [solution_monitor_dhcp_scopes](https://lockstepgroup.com/blog/monitor-dhcp-scopes-and-detect-man-in-the-middle-attacks/)
- [w32.tidserv.g](https://web.archive.org/web/20150923175837/http://www.symantec.com/security_response/writeup.jsp?docid=2009-032211-2952-99&tabid=2)

---

### AppleScript

**Description:**
macOS and OS X applications send AppleEvent messages to each other for interprocess communications (IPC). These messages can be easily scripted with AppleScript and any other Open Scripting Architecture (OSA) language scripts. Osascript executes AppleScript and any other OSA language scripts. Adversaries can use this to interact with open SSH connections, move to remote machines, and even present users with fake dialog boxes.

**Implementation:**
- Use AppleScript to interact with open SSH connections, move to remote machines, and present users with fake dialog boxes.
- Scripts can be run from the command-line via `osascript /path/to/script` or `osascript -e "script here"`.

**Detection:**
- Monitor for execution of AppleScript through `osascript` that may be related to other suspicious behavior occurring on the system.

**References:**
- [Macro Malware Targets Macs](https://www.mcafee.com/blogs/other-blogs/mcafee-labs/macro-malware-targets-macs/)

---

### Remote Service Session Hijacking

**Description:**
Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.

**Hijacking:**
- Commandeer these sessions to carry out actions on remote systems.
- Differ from the use of Remote Services because it hijacks an existing session rather than creating a new session using Valid Accounts.

**Detection:**
- Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.
- Monitor for processes and command-line arguments associated with hijacking service sessions.

**References:**
- [RDP Hijacking Medium](https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6)
- [Breach Post-mortem SSH Hijack](https://matrix.org/blog/2019/05/08/post-mortem-and-remediations-for-apr-11-security-incident)

---

### Binary Padding

**Description:**
Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations.

**Padding:**
- Change the checksum of the file and avoid hash-based blocklists and static anti-virus signatures.
- Increase the file size to decrease the effectiveness of certain tools and detection capabilities.
- Public file scanning services, such as VirusTotal, limit the maximum size of an uploaded file to be analyzed.

**Detection:**
- Use file-based signatures to detect padding using a scanning or on-access based tool.
- Monitor for the resulting process from padded files, which may exhibit other behavior characteristics of being used to conduct an intrusion.

**References:**
- [ESET OceanLotus](https://www.welivesecurity.com/2018/03/13/oceanlotus-ships-new-backdoor/)
- [Securelist Malware Tricks April 2017](https://securelist.com/old-malware-tricks-to-bypass-detection-in-the-age-of-big-data/78010/)
- [VirusTotal FAQ](https://www.virustotal.com/en/faq/)

---

### Web Shell

**Description:**
Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.

**Backdooring:**
- Place a Web shell on an openly accessible Web server.
- Use the Web shell to execute commands or provide a command-line interface on the system that hosts the Web server.
- Use a client interface program to talk to the Web server (e.g., China Chopper Web shell client).

**Detection:**
- Monitor for web servers that perform suspicious actions such as spawning `cmd.exe` or accessing files that are not in the Web directory.
- Monitor for changes to files in the Web directory of a Web server that do not match with updates to the Web server's content.
- Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network.

**References:**
- [NSA Cyber Mitigating Web Shells](https://github.com/nsacyber/Mitigating-Web-Shells)
- [volexity_0day_sophos_FW](https://www.volexity.com/blog/2022/06/15/driftingcloud-zero-day-sophos-firewall-exploitation-and-an-insidious-breach/)
- [Lee 2013](https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-i.html)
- [US-CERT Alert TA15-314A Web Shells](https://www.us-cert.gov/ncas/alerts/TA15-314A)

---

### Group Policy Modification

**Description:**
Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path.

**Modification:**
- Delegate GPO access control permissions, such as write access, to specific users or groups in the domain.
- Use malicious GPO modifications to implement many other malicious behaviors such as Scheduled Task/Job, Disable or Modify Tools, Ingress Tool Transfer, Create Account, Service Execution, and more.

**Detection:**
- Monitor for GPO modifications by monitoring directory service changes using Windows event logs.
- Detect GPO abuse by monitoring for events associated with scheduled tasks, permission value modifications, and other related behaviors.

**References:**
- [Mandiant M Trends 2016](https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/rpt-mtrends-2016.pdf)
- [ADSecurity GPO Persistence 2016](https://adsecurity.org/?p=2716)
- [Microsoft Hacking Team Breach](https://www.microsoft.com/security/blog/2016/06/01/hacking-team-breach-a-cyber-jurassic-park/)
- [Wald0 Guide to GPOs](https://wald0.com/?p=179)
- [Harmj0y Abusing GPO Permissions](http://www.harmj0y.net/blog/redteaming/abusing-gpo-permissions/)
- [Harmj0y SeEnableDelegationPrivilege Right](http://www.harmj0y.net/blog/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/)
- [TechNet Group Policy Basics](https://blogs.technet.microsoft.com/musings_of_a_technical_tam/2012/02/13/group-policy-basics-part-1-understanding-the-structure-of-a-group-policy-object/)

---

### Browser Information Discovery

**Description:**
Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers, such as bookmarks, accounts, and browsing history, may reveal personal information about users and details about internal network resources.

**Discovery:**
- Gather information about browsers, such as bookmarks, accounts, and browsing history.
- Highlight additional targets after gaining access to valid credentials, especially credentials in files associated with logins cached by a browser.

**Detection:**
- Monitor processes and command-line arguments for actions that could be taken to gather browser bookmark information.
- Monitor for system and network discovery techniques that occur throughout an operation as an adversary learns the environment.

**References:**
- [Chrome Roaming Profiles](https://support.google.com/chrome/a/answer/7349337)
- [Kaspersky Autofill](https://www.kaspersky.com/blog/browser-data-theft/27871/)

---

### Private Keys

**Description:**
Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: `.key`, `.pgp`, `.gpg`, `.ppk`, `.p12`, `.pem`, `.pfx`, `.cer`, `.p7b`, `.asc`.

**Search:**
- Look in common key directories, such as `~/.ssh` for SSH keys on *nix-based systems or `C:\Users\(username)\.ssh\` on Windows.
- Use adversary tools to search compromised systems for file extensions relating to cryptographic keys and certificates.
- Export device keys and transport keys on Azure AD-registered devices to impersonate the device.
- On network devices, private keys may be exported via Network Device CLI commands such as `crypto pki export`.

**Detection:**
- Monitor access to files and directories related to cryptographic keys and certificates.
- Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication.
- For network infrastructure devices, collect AAA logging to monitor for private keys being exported.

**References:**
- [Palo Alto Prince of Persia](https://researchcenter.paloaltonetworks.com/2016/06/unit42-prince-of-persia-game-over/)
- [cisco_deploy_rsa_keys](https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/sec_conn_pki/configuration/xe-17/sec-pki-xe-17-book/sec-deploy-rsa-pki.html#GUID-1CB802D8-9DE3-447F-BECE-CF22F5E11436)
- [AADInternals Azure AD Device Identities](https://aadinternals.com/post/deviceidentity/)
- [Kaspersky Careto](https://kasperskycontenthub.com/wp-content/uploads/sites/43/vlpdfs/unveilingthemask_v1.0.pdf)
- [Microsoft Primary Refresh Token](https://learn.microsoft.com/en-us/azure/active-directory/devices/concept-primary-refresh-token)
- [Wikipedia Public Key Crypto](https://en.wikipedia.org/wiki/Public-key_cryptography)

---

### Server

**Description:**
Adversaries may buy, lease, or rent physical servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Adversaries may use web servers to support watering hole operations or email servers to support phishing operations.

**Provisioning:**
- Acquire and configure physical servers for staging, launching, and executing operations.
- Use servers for various tasks, including Command and Control, watering hole operations, and phishing operations.

**Detection:**
- Monitor for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software.
- Focus detection efforts on related stages of the adversary lifecycle, such as during Command and Control.

**References:**
- [ThreatConnect Infrastructure Dec 2020](https://threatconnect.com/blog/infrastructure-research-hunting/)
- [Mandiant SCANdalous Jul 2020](https://www.mandiant.com/resources/scandalous-external-detection-using-network-scan-data-and-automation)
- [Koczwara Beacon Hunting Sep 2021](https://michaelkoczwara.medium.com/cobalt-strike-c2-hunting-with-shodan-c448d501a6e2)
- [NYTStuxnet](https://www.nytimes.com/2011/01/16/world/middleeast/16stuxnet.html)

---

### Windows Remote Management

**Description:**
Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user. WinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).

**Interaction:**
- Use WinRM to interact with remote systems and perform actions as the logged-on user.
- Call WinRM with the `winrm` command or by any number of programs such as PowerShell.
- Use WinRM as a method of remotely interacting with Windows Management Instrumentation (WMI).

**Detection:**
- Monitor use of WinRM within an environment by tracking service execution.
- Monitor processes created and actions taken by the WinRM process or a WinRM invoked script.
- Monitor for remote WMI connection attempts (typically over port 5985 when using HTTP and 5986 for HTTPS).

**References:**
- [Microsoft WinRM](http://msdn.microsoft.com/en-us/library/aa384426)
- [Jacobsen 2014](https://www.slideshare.net/kieranjacobsen/lateral-movement-with-power-shell-2)
- [MSDN WMI](https://msdn.microsoft.com/en-us/library/aa394582.aspx)
- [Medium Detecting Lateral Movement](https://medium.com/threatpunter/detecting-lateral-movement-using-sysmon-and-splunk-318d3be141bc)