### Security Vulnerabilities in Secure Encrypted Virtualization (SEV) Platforms

We demonstrate that the security of Secure Encrypted Virtualization (SEV) platforms can be compromised. Specifically, we show that even when additional state is encrypted—such as under the SEV-ES extension, which encrypts the state of general-purpose registers—an adversary may still conduct application fingerprinting attacks. These attacks can render the protections less effective than initially thought. We provide recommendations for mitigating some of these threats in the short term.

### Acknowledgments

We would like to thank Richard Strong and Caleb Loverro for their valuable discussions and feedback on an earlier draft of this paper. We also extend our gratitude to David Kaplan and Joe Greathouse for their insights regarding Instruction-Based Sampling (IBS). Special thanks to Murray Anderegg for his assistance with deploying the infrastructure used in this study. This work was partially supported by the Department of Defense (DoD) under award FA8750-17-C-0016, the Office of Naval Research (ONR) under award N00014-17-1-2891, the National Science Foundation (NSF) under award CNS-1749895, and the Defense Advanced Research Projects Agency (DARPA) under award D18AP00045. The opinions, findings, and conclusions expressed in this paper are those of the authors and do not necessarily reflect the views of the DoD, ONR, NSF, or DARPA.

### References

1. L. Abrams. Intel releases Linux CPU microcodes to fix Meltdown and Spectre, 2018.
2. AMD. AMD64 Architecture Programmer’s Manual Volume 2: System Programming. http://support.amd.com/TechDocs/24593.pdf, 2017.
3. AMD. AMD Research Instruction Based Sampling Toolkit. https://github.com/jlgreathouse/AMD_IBS_Toolkit, 2018.
4. AMD. SEV-ES Guest-Hypervisor Communication Block Standardization. https://developer.amd.com/wp-content/resources/56421.pdf, 2019.
5. A. Baumann, M. Peinado, and G. Hunt. Shielding applications from an untrusted cloud with Haven. In USENIX Symposium on Operating Systems Design and Implementation, pages 267–283, 2014.
6. A. K. Biswas, D. Ghosal, and S. Nagaraja. A survey of timing channels and countermeasures. ACM Computer Surveys, 50(1):6:1–6:39, Mar. 2017.
7. J. V. Bulck, N. Weichbrodt, R. Kapitza, F. Piessens, and R. Strackx. Telling your secrets without page faults: Stealthy page table-based attacks on enclaved execution. In USENIX Security Symposium, pages 1041–1056, 2017.
8. S. Checkoway and H. Shacham. Iago attacks: Why the system call API is a bad untrusted RPC interface. In Architectural Support for Programming Languages and Operating Systems, pages 253–264, 2013.
9. X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A. Waldspurger, D. Boneh, J. Dwoskin, and D. R. Ports. Overshadow: A virtualization-based approach to retrofitting protection in commodity operating systems. SIGPLAN Not., 43(3):2–13, Mar. 2008.
10. V. Costan, I. Lebedev, and S. Devadas. Sanctum: Minimal hardware extensions for strong software isolation. In USENIX Security Symposium, pages 857–874, 2016.
11. J. Criswell, N. Dautenhahn, and V. Adve. Virtual ghost: Protecting applications from hostile operating systems. In ACM Conference on Architectural Support for Programming Languages and Operating Systems, pages 81–96, 2014.
12. CTS-LABS. Severe security advisory on AMD processors. https://amdflaws.com, 2018.
13. P. J. Drongowski. Instruction-based sampling: A new performance analysis technique for AMD Family 10h processors. https://developer.amd.com/wordpress/media/2012/10/AMD_IBS_paper_EN.pdf, 2007.
14. Z.-H. Du, Z. Ying, Z. Ma, Y. Mai, P. Wang, J. Liu, and J. Fang. Secure Encrypted Virtualization is Unsecure. https://arxiv.org/pdf/1712.05090.pdf, 2017.
15. R. Elbaz, D. Champagne, C. Gebotys, R. B. Lee, N. Potlapally, and L. Torres. Hardware mechanisms for memory authentication: A survey of existing techniques and engines. In Transactions on Computational Science IV, pages 1–22, 2009.
16. S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff. A sense of self for Unix processes. In IEEE Symposium on Security & Privacy, 1996.
17. J. Greene. Intel Trusted Execution Technology. https://www.intel.com/content/www/us/en/architecture-and-technology/trusted-execution-technology/trusted-execution-technology-security-paper.html, 2012.
18. S. Gueron. Memory encryption for general-purpose processors. IEEE Security & Privacy, 14(6):54–62, Nov. 2016.
19. S. Gueron. A memory encryption engine suitable for general-purpose processors. ePrint Archive, Report 2016/204, 2016. https://eprint.iacr.org/2016/204.
20. D. Gullasch, E. Bangerter, and S. Krenn. Cache games – bringing access-based cache attacks on AES to practice. In IEEE Symposium on Security & Privacy, pages 490–505, May 2011.
21. J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul, J. A. Calandrino, A. J. Feldman, J. Appelbaum, and E. W. Felten. Lest we remember: Cold boot attacks on encryption keys. In USENIX Security Symposium, pages 45–60, 2009.
22. Y. Hebbal, S. Laniepce, and J. M. Menaud. Virtual machine introspection: Techniques and applications. In International Conference on Availability, Reliability and Security, pages 676–685, Aug. 2015.
23. M. Henson and S. Taylor. Memory encryption: A survey of existing techniques. ACM Computing Surveys, 46(4):53:1–53:26, Mar. 2014.
24. F. Hetzelt and R. Buhren. Security analysis of encrypted virtual machines. In ACM International Conference on Virtual Execution Environments, pages 129–142, 2017.
25. S. Jin, J. Ahn, S. Cha, and J. Huh. Architectural support for secure virtualization under a vulnerable hypervisor. In International Symposium on Microarchitecture, pages 272–283, Dec. 2011.
26. D. Kaplan. Protecting VM register state with SEV-ES. http://support.amd.com/TechDocs/Protecting%20VM%20Register%20State%20with%20SEV-ES.pdf, 2017.
27. D. Kaplan, J. Powell, and T. Woller. AMD Memory Encryption. http://amd-dev.wpengine.netdna-cdn.com/wordpress/media/2013/12/AMD_Memory_Encryption_Whitepaper_v7-Public.pdf, 2016.
28. Y. Kim, R. Daly, J. Kim, C. Fallin, J. Lee, D. Lee, C. Wilkerson, K. Lai, and O. Mutlu. Rowhammer: Reliability analysis and security implications. CoRR, abs/1603.00747, 2016.
29. P. Kocher, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom. Spectre attacks: Exploiting speculative execution. https://arxiv.org/abs/1801.01203, 2018.
30. J. Lee, J. Jang, Y. Jang, N. Kwak, Y. Choi, C. Choi, T. Kim, M. Peinado, and B. B. Kang. Hacking in darkness: Return-oriented programming against secure enclaves. In USENIX Security Symposium, pages 523–539, 2017.
31. S. Lee, M.-W. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado. Inferring fine-grained control flow inside SGX enclaves with branch shadowing. In USENIX Security Symposium, pages 557–574, 2017.
32. T. Lendacky. [RFC PATCH v1 00/18] x86: Secure memory encryption (AMD). https://www.mail-archive.com/linux-kernel@vger.kernel.org/msg02713.html, 2016.
33. M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg. Meltdown. https://arxiv.org/abs/1801.01207, 2018.
34. Y. Lyu and P. Mishra. A survey of side-channel attacks on caches and countermeasures. Journal of Hardware and Systems Security, Nov. 2017.
35. G. Maisuradze and C. Rossow. Speculose: Analyzing the security implications of speculative execution in CPUs. https://arxiv.org/abs/1801.04084, 2018.
36. M. Morbitzer, M. Huber, J. Horsch, and S. Wessel. Severed: Subverting AMD’s virtual machine encryption. In European Workshop on System Security, 2018.
37. M. Morbitzer, M. Huber, and J. Horsch. Extracting secrets from encrypted virtual machines. In ACM CODASPY, 2019.
38. National Security Institute. Department of Defense Trusted Computer System Evaluation Criteria. Department of Defense, 1985.
39. E. PARSA. CloudSuite. http://cloudsuite.ch/, 2018.
40. P. Pessl, D. Gruss, C. Maurice, M. Schwarz, and S. Mangard. DRAMA: Exploiting DRAM addressing for cross-CPU attacks. In USENIX Security Symposium, pages 565–581, 2016.
41. J. V. B. F. Piessens and R. Strackx. SGX-Step: A practical attack framework for precise enclave execution control. In Workshop on System Software for Trusted Execution (SysTEX), 2017.
42. N. A. Quynh. Operating system fingerprinting for virtual machines. Defcon, 2010.
43. E. Rescorla. SSL and TLS: Designing and Building Secure Systems. Addison-Wesley, 2001.
44. J. Sharkey. Breaking hardware-enforced security with hypervisors. Black Hat USA, 2016.
45. S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena. Preventing page faults from telling your secrets. In ACM Conference on Computer and Communications Security, pages 317–328, 2016.
46. R. Spreitzer, V. Moonsamy, T. Korak, and S. Mangard. SoK: Systematic classification of side-channel attacks on mobile devices. CoRR, 2016.
47. J. Szefer and R. B. Lee. Architectural support for hypervisor-secure virtualization. SIGPLAN Not., 47(4):437–450, Mar. 2012.
48. B.-P. Tine and S. Yalamanchili. PageVault: Securing off-chip memory using page-based authentication. In Proceedings of the International Symposium on Memory Systems, pages 293–304, 2017.
49. Trusted Computing Group. TPM Main: Part 1 – Design Principles. https://trustedcomputinggroup.org/resource/tpm-main-specification/, 2003.
50. T. Unterluggauer, M. Werner, and S. Mangard. Securing memory encryption and authentication against side-channel attacks using unprotected primitives. IACR ePrint Archive, 2017:663, 2017.
51. A. Vahldiek-Oberwagner, E. Elnikety, D. Garg, and P. Druschel. ERIM: Secure and efficient in-process isolation with memory protection keys. https://arxiv.org/abs/1801.06822, 2018.
52. VMware. Securing the cloud: A review of cloud computing, security implications, and best practices, 2009.
53. W. Wang, G. Chen, X. Pan, Y. Zhang, X. Wang, V. Bindschaedler, H. Tang, and C. A. Gunter. Leaky cauldron on the dark land: Understanding memory side-channel hazards in SGX. In ACM Conference on Computer and Communications Security, pages 2421–2434, 2017.
54. C. Warrender, S. Forrest, and B. Pearlmutter. Detecting intrusions using system calls: Alternative data models. In IEEE Symposium on Security & Privacy, pages 133–145, 1999.
55. M. Werner, T. Unterluggauer, R. Schilling, D. Schaffenrath, and S. Mangard. Transparent memory encryption and authentication. In Field Programmable Logic and Applications (FPL), pages 1–6, 2017.
56. Y. Xia, Y. Liu, and H. Chen. Architecture support for guest-transparent VM protection from untrusted hypervisor and physical attacks. In International Symposium on High Performance Computer Architecture, pages 246–257, Feb. 2013.
57. Y. Xiao, X. Zhang, Y. Zhang, and R. Teodorescu. One bit flips, one cloud flops: Cross-VM row hammer attacks and privilege escalation. In USENIX Security Symposium, pages 19–35, 2016.
58. Y. Xu, W. Cui, and M. Peinado. Controlled-channel attacks: Deterministic side channels for untrusted operating systems. In IEEE Symposium on Security & Privacy, pages 640–656, 2015.

### Ethical Considerations

In the field of computer security, there is a delicate balance between defensive and offensive research. We have shared our findings with AMD regarding the power of inference attacks and have incorporated their feedback into this paper. This new class of attacks is a direct result of the inability to inspect main memory.

### Introspection Algorithm

The procedure we use for selective hyper-stepping is outlined in Algorithm 3.

**Algorithm 3: Introspection Using Trigger Points**

1. **Offline:**
   - Identify critical code sections.
   - Generate a profile.
   - Set candidate trigger ∆.

2. **Loop: Introspection**
   1. Identify the target using the profile.
   2. If the trigger point ∆ is reached:
      1. Hyper-step the target.
      2. Unveil likely instructions.
      3. Locate a fine-grained trigger ∆’.
      4. If ∆’ is found, set ∆ = ∆’.
   3. Exfiltrate data.
   4. Continue until a system call invocation occurs.

### Nginx Process Control

The process of spawning processes in Nginx, as shown in Figure 5, involves a sequence of system calls spanning the init, master, and worker processes. This sequence, observable in the context of the SEV register inference attack, uniquely identifies the target.

**Figure 5: Process Control in Nginx**

- **Init Process:**
  - Create socket 1.
  - Bind socket 1 to address.
  - Put socket 1 in listening state.

- **Master Process:**
  - Clone.
  - Wait for child.
  - Put socket 1 in listening state.

- **Worker Process:**
  - Create new socket.
  - Listen.
  - Bind address.
  - Clone.
  - Exit.
  - Put socket 1 in listening state.

- **End:**
  - Decrypt, disk read, compress, encrypt.
  - Accept.
  - Close.
  - Receive request.
  - Send response.
  - Wait for connections.

**Figure 6: Application Reference and IBS-Based Fingerprints**

- **Application Reference:**
  - Eight distances for the nine functions in the application binary image.

- **Function Layout:**
  - Each vertical line represents a return instruction.
  - Functions 1 to 9 with corresponding return instructions (r1 to r9).

This structured and detailed presentation should make the text more clear, coherent, and professional.