### References

1. **Gary Ian Gaskell.** *Integrating Smart Cards into Kerberos.* Master’s thesis, Queensland University of Technology, February 2000.

2. **Alan Harbitter and Daniel A. Menascé.** *Performance of Public Key-Enabled Kerberos Authentication in Large Networks.* In IEEE Conference on Security and Privacy, Oakland, CA, May 2001.

3. **Alan Harbitter and Daniel A. Menascé.** *The Performance of Public Key-Enabled Kerberos Authentication in Mobile Computing Applications.* In Proceedings of the 8th ACM Conference on Computer and Communications Security, Philadelphia, PA, November 2001. ACM Press.

4. **Heimdal Kerberos 5 Implementation.** [http://www.pdc.kth.se/heimdal/](http://www.pdc.kth.se/heimdal/).

5. **Amir Herzberg, Yosi Mass, Joris Mihaeli, Dalit Naor, and Yiftach Ravid.** *Access Control Meets Public Key Infrastructure, Or: Assigning Roles to Strangers.* In IEEE Symposium on Security and Privacy, Berkeley, CA, May 2000.

6. **Adam Hess, Jared Jacobson, Hyrum Mills, Ryan Wamsley, Kent E. Seamons, and Bryan Smith.** *Advanced Client/Server Authentication in TLS.* In Network and Distributed System Security Symposium, San Diego, CA, February 2002.

7. **Matthew Hur, Brian Tung, Tatyana Ryutov, Clifford Neuman, Ari Medvinski, Gene Tsudik, and Bill Sommerfeld.** *Public Key Cryptography for Cross-Realm Authentication in Kerberos.* November 2001.

8. **Dave Kearns.** *Kerberos and Windows 2000.* Network World Fusion, March 2000.

9. **N. Li, J.C. Mitchell, and W.H. Winsborough.** *Design of a Role-Based Trust Management Framework.* In IEEE Symposium on Security and Privacy, May 2002.

10. **J. Linn.** *RFC 2743: Generic Security Service Application Program Interface Version 2.* January 2000.

11. **Microsoft.** *Windows 2000 Kerberos Authentication.* Microsoft Technical White Paper, July 1999.

12. **Microsoft.** *Microsoft .Net Passport.* Microsoft Technical White Paper, January 2004.

13. **Patrick C. Moore, Wilbur R. Johnson, and Richard J. Detry.** *Adapting Globus and Kerberos for a Secure ASCI Grid.* In Proceedings of the 2001 ACM/IEEE Conference on Supercomputing, Denver, CO, November 2001. ACM Press.

14. **Clifford Neuman, Tom Yu, Sam Hartman, and Ken Raeburn.** *RFC 4120: The Kerberos Network Authentication Service (V5).* July 2005.

15. **S. Sakane and K. Kamada.** *Applying Kerberos to the Communication Environment for Information Appliances.* In Applications and the Internet Workshops, 2003.

16. **Ravi S. Sandhu, Edward J. Coyne, Hal L. Feinstein, and Charles E. Youman.** *Role-Based Access Control Models.* IEEE Computer, 29(2):38–47, February 1996.

17. **Marvin A. Sirbu and John Chung-I Chuang.** *Distributed Authentication in Kerberos Using Public Key Cryptography.* In Network and Distributed System Security, February 1997.

18. **William Stallings.** *Network Security Essentials.* Prentice Hall, 2000.

19. **Jennifer G. Steiner, B. Clifford Neuman, and Jeffrey I. Schiller.** *Kerberos: An Authentication Service for Open Network Systems.* In USENIX Technical Conference, 1988.

20. **Timothy W. van der Horst and Kent E. Seamons.** *Simple Authentication for the Web.* To Appear: Security and Privacy in Communications Networks, 2007.

21. **William H. Winsborough, Kent E. Seamons, and Vicki E. Jones.** *Automated Trust Negotiation.* In Information Survivability Conference and Exposition, January 2000.

22. **M. Winslett, T. Yu, K.E. Seamons, A. Hess, R. Jarvis, B. Smith, and L. Yu.** *Negotiating Trust on the Web.* IEEE Internet Computing Special Issue on Trust Management, 6(6), November/December 2002.

23. **Ting Yu, Xiaosong Ma, and Marianne Winslett.** *PRUNES: An Efficient and Complete Strategy for Automated Trust Negotiation over the Internet.* In 7th ACM Conference on Computer and Communications Security, Athens, Greece, November 2000.

24. **Ting Yu, Marianne Winslett, and Kent E. Seamons.** *Interoperable Strategies in Automated Trust Negotiation.* In Proceedings of the 8th ACM Conference on Computer and Communications Security, Philadelphia, PA, November 2001. ACM Press.

25. **Larry Zhu and Brian Tung.** *RFC 4556: Public Key Cryptography for Initial Authentication in Kerberos (PKINIT).* June 2006.

### Appendix A — Source Code

- **Heimdal 0.8.1 source** can be obtained from: [http://www.pdc.kth.se/heimdal/](http://www.pdc.kth.se/heimdal/)
- **EPAK, SAWK, and TNK source** can be obtained from: [http://isrl.cs.byu.edu/epak/](http://isrl.cs.byu.edu/epak/)

### Appendix B — EPAK ASN.1 Definitions

```asn.1
EPAK DEFINITIONS ::= BEGIN
    IMPORTS 
        Realm, Principal, KerberosTime, EncryptionKey, EncryptedData,
        Checksum, krb5int32 FROM krb5;

    epakvno INTEGER ::= 1 -- Current EPAK protocol version number.

    -- EPAK Data: Main data including principal names, etc.
    EPAKData ::= SEQUENCE {
        cprinc[0] Principal,
        starttime[1] KerberosTime OPTIONAL,
        endtime[2] KerberosTime
    }

    -- The EPAK Ticket is always encrypted by the EPAK key, aka K(epak).
    EPAKTicket ::= SEQUENCE {
        key[0] EncryptionKey,
        epakdata[1] EPAKData
    }

    -- The EPAK Authenticator helps prove that this client was recently
    -- granted the EPAK Ticket. Serves the same purpose as authenticators
    -- in RFC 4120.
    EPAKAuth ::= SEQUENCE {
        cprinc[0] Principal,
        cksum[2] Checksum OPTIONAL,
        cusec[3] krb5int32,
        ctime[4] KerberosTime
    }

    -- EPAK Request: Used to obtain pre-authentication for a client
    -- from a custom pre-authentication server.
    EPAK-REQ ::= SEQUENCE {
        epakvno[0] INTEGER (-2147483648..2147483647),
        epakdata[1] EPAKData
    }

    -- EPAK Reply: Response from pre-authentication server.
    -- Contains pre-authentication data to be used in AS-REQ.
    EPAK-REP ::= SEQUENCE {
        epakvno[0] INTEGER (-2147483648..2147483647),
        epakdata[1] EPAKData,
        pasrealm Realm,
        key[3] EncryptionKey,
        epakticket[4] EncryptedData
    }

    -- EPAK pre-authentication data for AS-REQ.
    PA-EPAK-AS-REQ ::= SEQUENCE {
        epakvno[0] INTEGER (-2147483648..2147483647),
        pasrealm Realm,
        epakticket[1] EncryptedData,
        epakauth[2] EncryptedData
    }

    -- EPAK pre-authentication data for AS-REP.
    PA-EPAK-AS-REP ::= SEQUENCE {
        epakvno[0] INTEGER (-2147483648..2147483647),
        result[1] INTEGER (-2147483648..2147483647)
    }
END
```

### Appendix C — EPAK Installation Guide

#### Build Heimdal Kerberos with EPAK Support

1. **Download Heimdal Kerberos 0.8.1 (heimdal-0.8.1.tar.gz)**
   - MD5 = 7ff8c4850bce9702d9d3cf9eff05abaa
   - See Appendix A for more details.

2. **Download EPAK patch (epak.patch)**
   - See Appendix A for more details.

3. **Install 3rd party tools and libraries**
   - `yacc` or `bison`
   - `flex`
   - `xt` library (libxt-dev)
   - Berkeley DB (libdb3-dev)
   - `ncurses` (libncurses5-dev)

4. **Extract Heimdal Kerberos**
   - `tar -zxvf heimdal-0.8.1.tar.gz`

5. **Apply EPAK Patch**
   - `cd heimdal-0.8.1/`
   - `patch -p1 < /path/to/epak.patch`

6. **Build Heimdal Kerberos with EPAK enabled**
   - `./configure --enable-epak --enable-epakdebug` (optional)
   - `make`

7. **Install Heimdal Kerberos (optional)**
   - `make install`

#### Set up `/etc/krb5.conf` on Server and Client

A sample `krb5.conf` is presented below. The EPAK ticket lifetime should be set to a value similar to the other ticket lifetimes, such as eight or ten hours (36000 seconds).

```ini
[libdefaults]
    ticket_lifetime = 36000
    epak_ticket_lifetime = 36000
    default_realm = SSHOCK.HOME
    no-addresses = true

[realms]
    SSHOCK.HOME = {
        kdc = sshock.homeipx.net
        admin_server = sshock.homeipx.net
        default_domain = sshock.homeipx.net
    }

[domain_realm]
    sshock.homeipx.net = SSHOCK.HOME

[logging]
    kdc = FILE:/var/log/krb5kdc.log
    admin_server = FILE:/var/log/kadmin.log
    default = FILE:/var/log/krb5lib.log
```

#### Set up Kerberos Server

**Note:** These commands must be run as root (or using `sudo`).

1. **Create Heimdal directory**
   - `mkdir /var/heimdal`
   - `chmod 700 /var/heimdal`

2. **Create master key file**
   - `cd heimdal-0.8.1/`
   - `kdc/kstash --random-key`

3. **Initialize database**
   - `kadmin/kadmin -l`
   - `init REALM` (where `REALM` is the name of your realm)
   - `init` will ask some questions about max ticket life.

4. **Add a principal for your username (optional)**
   - `add username`

5. **Add one or more principals that will be used with pre-authentication**
   - `add --random-key princname`

6. **Add `epakt/REALM` (EPAK Ticket) service principal**
   - Run these commands on the PAS machine.
   - `kadmin/kadmin -l`
   - `add --random-key epakt/REALM`
   - `ext epakt/REALM` (This puts the key into the keytab file `/etc/krb5.keytab`.)
   - If the KDC resides on a different machine, you must export the principal to the keytab of the KDC as well.

7. **To test FTP or Telnet, add service principals and set up daemons**
   - `add --random-key host/hostname` (where `hostname` is the domain name of the FTP or Telnet server; `host/localhost` may work fine for testing.)
   - `ext host/myhostname` (This puts the key into the keytab file `/etc/krb5.keytab`.)
   - If the FTP or Telnet server is on a different machine than the KDC, you must export the principal to the keytab on that machine as well.
   - Set up `telnetd` and `ftpd` in your `inetd.conf`.
   - Make sure your clients use kerberized `telnet` and `ftp` programs.
   - If you didn’t install Kerberos with `make install`, you must add a link from `/usr/heimdal/bin/login` to `heimdal-0.6.3/appl/login/login`.

#### Download and Set Up SAWK and/or TNK for Testing EPAK

- See Appendix A for source code.