# The JOP ROCKET: A Supremely Wicked Tool for JOP Gadget Discovery, or What to Do If ROP Is Too Easy

## Authors
- **Dr. Bramwell Brizendine**
  - Assistant Professor of Computer and Cyber Sciences at Dakota State University.
  - Creator of the JOP ROCKET.
  - Interests: Software exploitation, reverse engineering, malware analysis, offensive security.
  - Education:
    - 2019: Ph.D. in Cyber Operations
    - 2016: M.S. in Applied Computer Science
    - 2014: M.S. in Information Assurance
  - Contact: [PI:EMAIL]

- **Dr. Joshua Stroschein**
  - Assistant Professor of Cyber Security and Network & Security Administration at Dakota State University.
  - Teaches undergraduate and graduate courses in cyber security with a focus on malware analysis, reverse engineering, and software exploitation.
  - Regular trainer at venues such as DerbyCon, Hack-in-The-Box, BlackHat USA, and ToorCon.
  - Education:
    - 2017: D.S. in Cyber Security
    - 2014: M.S. in Information Assurance
  - Contact: [PI:EMAIL]

## Acknowledgements
- **Austin Babcock**
  - Undergraduate research assistant at Dakota State University.
  - Cyber Operations student.
  - Created JOP exploit chain for demo.
  - Contact: [PI:EMAIL]
  - For internship or job opportunities, contact Austin.

- **Dr. Jared DeMott of VDA Labs**
  - Member of Dr. Brizendine's Ph.D. dissertation committee.

## Overview
- **Remember ROP?** 
  - Let’s try something different.
- **Introduction to Jump-Oriented Programming (JOP).**
- **Getting to know the JOP ROCKET.**
- **Key aspects of JOP exploit development.**
- **Demonstration of JOP in action.**

## The JOP ROCKET: Did We Invent JOP?
- **No, we did not.**
  - Literature provides examples of JOP going back a decade, including works by Bletsch, Chen et al., Erdődi, Checkoway, and Shacham.
  - **Problem:** Lack of tools to facilitate JOP usage.
  - **Limited Information:** Practical information on JOP in Windows is scarce.

- **Download the JOP ROCKET from GitHub:**
  - [https://github.com/Bw3ll/JOP_ROCKET](https://github.com/Bw3ll/JOP_ROCKET)

## JOP Creates a Side Door
- **Bypassing ROP Heuristics:**
  - If ROP heuristics make detection too challenging, JOP can provide an alternative.
  - **Objective:** Bypass mitigations and reach executable shellcode.

- **JOP vs. ROP:**
  - **JOP is a category of code-reuse attacks.**
  - **Precursor to ROP:**
    - Alexander Peslyak (1997) - Linux; not relevant on Windows.
    - Schacham’s work (2007) - Borrowed chunks of code.
  - **Gadgets:**
    - **ROP Gadgets:** Instruction ending in RET.
    - **JOP Gadgets:** Sequence of instructions ending in JMP or CALL.
  - **Stack Pivot and API Calls:**
    - Stack pivot, setting up Windows API calls, etc.

- **Existing Tools:**
  - **Mona:**
    - By Corelan Team, Peter Van Eeckhoutte.
    - Python script for WinDbg or Immunity, discovers ROP gadgets.
  - **ROPgadget:**
    - By Jonathan Salwan.
    - Python script supporting ELF, PE, Mach-O formats on x86, x64, ARM64, PowerPC, SPARC, and MIPS.
    - Uses Capstone disassembly engine.

- **Understanding ROP:**
  - This talk assumes you have a basic understanding of ROP.

- **Example of ROP Chain from Mona:**
  - RETs act as glue, chaining gadgets together.

- **JOP Paradigm:**
  - **Dispatcher Gadget (DG):**
    - Instrument of change, moving forward or backward in the dispatch table.
    - Short and sweet, ideally two or three instructions.
    - Predictably modifies the register holding the address to the dispatch table and then JMP or CALL to the dereferenced location.
  - **Dispatch Table (DT):**
    - Each entry leads to addresses of functional gadgets.
    - May include padding (NOPs).
  - **Functional Gadgets:**
    - Terminate in JMP or CALL to a register containing the address of the dispatcher gadget.
    - Set up registers or stack for Windows API calls.
  - **Control Flow:**
    - Loop from DG to the current entry in the DT, to its associated functional gadget, back to the DG, which moves to the next location in the DT.

- **Why JOP Is Not Widely Used:**
  - **Lack of Proper Tooling:**
    - Finding JOP gadgets is non-trivial without appropriate tools.
  - **Complexity:**
    - JOP is more complex and less well-documented than ROP.
  - **Enhanced Difficulty:**
    - Fewer gadgets and more complexity in maintaining control flow.
  - **Opcode-Splitting:**
    - Essential for JOP but not supported by many existing tools.
  - **JOP ROCKET:**
    - Changes the game by providing advanced features for JOP gadget discovery.

- **The JOP ROCKET: Features and Contributions:**
  - **Features:**
    - Flexible discovery of both functional and dispatcher gadgets.
    - Customizable search parameters.
    - Classifications based on operations (e.g., MOV, ADD, SUB).
    - Simultaneous classification and results printing.
    - Opcode-splitting to discover unintended gadgets.
  - **Contributions:**
    - New logic to find other types of DG.
    - Avoids irrelevant, useless results.
    - Static analysis tool for scanning executables and associated modules.

- **Conclusion:**
  - The JOP ROCKET is a powerful tool for JOP gadget discovery, offering a side door to bypass ROP heuristics and other mitigations.

- **Download and Explore:**
  - [https://github.com/Bw3ll/JOP_ROCKET](https://github.com/Bw3ll/JOP_ROCKET)

- **Contact Us:**
  - For more information, collaboration, or feedback, please contact us at [PI:EMAIL].