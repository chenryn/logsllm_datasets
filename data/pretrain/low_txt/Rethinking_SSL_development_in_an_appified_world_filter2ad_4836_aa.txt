# Rethinking SSL Development in an Appified World

**Authors:**
- Sascha Fahl
- Marian Harbach
- Henning Perl
- Markus Koetter
- Matthew Smith

**Affiliation:**
Distributed Computing & Security Group, Leibniz University Hannover, Germany

**Contact:**
{fahl, harbach, perl, koetter, smith}@dcsec.uni-hannover.de

## Abstract
The Secure Sockets Layer (SSL) is widely used to secure data transfers on the Internet. Previous studies have shown that the state of non-browser SSL code is problematic across a variety of desktop applications, libraries, and Android apps, leaving users vulnerable to Man-in-the-Middle attacks (MITMAs). To determine the possible causes of SSL issues on major appified platforms, we extended our analysis to the iOS ecosystem, analyzed software developer forums, and conducted interviews with developers of vulnerable apps. Our results show that the root causes are not simply careless developers but also limitations and issues within the current SSL development paradigm. Based on our findings, we propose a new approach to handling SSL in the appified world and present a set of countermeasures to improve SSL handling, using Android as a blueprint for other platforms. These countermeasures prevent developers from willfully or accidentally breaking SSL certificate validation, offer support for advanced features like SSL Pinning, and protect users. We evaluated our solution against 13,500 popular Android apps and conducted developer interviews to gauge the acceptance of our approach. Our solution works well for all investigated apps and is well-received by developers.

## Categories and Subject Descriptors
- **D.4.4 [Software]: Communications Management—Network communication**
- **H.3.5 [Information Storage and Retrieval]: Online Information Services—Data Sharing**

## General Terms
- Security
- Human Factors

## Keywords
- Android
- Apps
- iOS
- MITMA
- Security
- SSL

## Introduction
The proliferation of smartphones and tablets has transformed software development. The Android Play Market and Apple App Store each offer over half a million apps, with more than one billion apps installed annually. This "There's an app for that" mindset and the potential to reach a global market quickly have inspired numerous small software companies and hobby developers to create apps on an unprecedented scale. However, many developers face challenges when working with SSL. In previous work, we found that a large number of Android apps did not use SSL correctly, making them vulnerable to Man-in-the-Middle attacks. Affected applications ranged from home-brew and open-source apps to those developed by large corporations and security specialists, indicating that SSL issues are not just due to untrained developers.

While our previous work and related studies by Georgiev et al. [8] discussed possible reasons and made recommendations, the actual causes and potential countermeasures have not been fully identified or evaluated. In this paper, we delve into the root causes of SSL coding problems and argue that the way developers work with SSL needs significant change. We designed a framework for SSL development, implemented it for Android, and evaluated it against 13,500 popular apps, conducting developer interviews to demonstrate its functionality and feasibility.

Our solution includes:
1. Removing the need for developers to write actual SSL code, allowing configuration options for deviations from standard use.
2. Supporting all use-cases securely, eliminating the need for dangerous customizations.
3. Distinguishing between developer and end-user devices, enabling rapid prototyping while protecting end-users.
4. Informing end-users reliably about SSL issues, preventing silent vulnerabilities.
5. Allowing for new SSL validation strategies and infrastructures to be deployed centrally, easing the deployment of new SSL validation strategies.

## Contributions
- **First Analysis of iOS SSL Security:** We manually examined 1,009 iOS apps and found that 14% of apps using SSL do not implement SSL validation correctly, similar to Android.
- **In-Depth Study of SSL Problems:** We conducted a comprehensive study of the reasons behind widespread SSL issues on Android and iOS, including technical aspects and developer insights.
- **Countermeasures for SSL Handling:** We designed and implemented countermeasures for SSL on Android, which can serve as a blueprint for other appified platforms.
- **Evaluation and Acceptance:** We evaluated our approach by auditing 13,500 apps and conducting follow-up developer studies to ensure our solution meets development needs and gains community acceptance.

## Related Work
### SSL Validation
Much research on SSL has focused on finding alternatives to the CA-based validation of certificates. Proposals such as Perspectives [18], Convergence [13], Certificate Transparency [11], Sovereign Keys [3], TACK [12], and DANE [9] aim to strengthen certificate validation. However, these systems require modifications to client code, which is challenging on appified platforms where thousands of apps contain their own SSL validation implementations.

### SSL on Appified Platforms
Research has highlighted new security and privacy challenges due to the appification trend. While most SSL connections on desktops occur in browsers, there are applications that use SSL for communication. Georgiev et al. [8] analyzed SSL certificate validation in various libraries and frameworks, concluding that many popular libraries fail in SSL certificate validation, endangering the applications based on them. Our study [5] examined SSL on Android, finding that 1,074 out of 13,500 popular free apps had SSL code that accepted all certificates or hostnames, potentially exposing up to 185 million users to MITMAs.

### SSL Development Paradigm
Numerous SSL libraries and TrustManagers aim to simplify SSL integration, but many are error-prone. There is limited research on the root causes of SSL coding problems or suggestions for changing the development paradigm. Our paper addresses both areas, providing important contributions.

## SSL on iOS
To determine if SSL problems are endemic to Android and open-source ecosystems, we conducted the first in-depth analysis of iOS apps. Despite Apple's more restrictive and curated app store, iOS developers still have freedom in implementing and using SSL. We manually analyzed 1,009 popular free iOS apps, capturing network traffic and performing active MITM attacks. We found that 14% of apps using SSL were vulnerable to MITMAs, leaking sensitive information. Additionally, 9.27% of apps used plain HTTP for sensitive data transfer, and two apps were vulnerable to SSL stripping attacks. This shows that SSL problems on iOS are similar to those on Android, and Apple's app development model does not prevent SSL-related security issues.

## Conclusion
Our findings highlight the need for a rethinking of SSL development in the appified world. By addressing the root causes and implementing robust countermeasures, we can significantly improve SSL handling and enhance user security. Our proposed framework and countermeasures, evaluated and accepted by developers, provide a solid foundation for future improvements in SSL security on appified platforms.