### 201
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021 at 09:56:57 UTC from IEEE Xplore. Restrictions apply.**

**Figure Descriptions:**
- **Figure 10:** Register File AVF using a cache size of 14 for different numbers of Read Count bits (R.C.).
- **Figure 11:** Register File AVF using a cache size of 16 for different numbers of Read Count bits (R.C.).
- **Figure 12:** Register File AVF using a cache size of 18 for different numbers of Read Count bits (R.C.).
- **Figure 13:** Register File AVF using a cache size of 20 for different numbers of Read Count bits (R.C.).
- **Figure 14:** Non-protected Register File AVF.

**Read Operation in the Register File:**
In each read operation, both the register cache and the main register file are accessed. A multiplexer is used to select the data. If the value is in the register cache, the hit signal is set, and the multiplexer selects the data from the cache. Otherwise, the data from the main register file is connected to the multiplexer output. It should be noted that Single Event Transients (SETs) occurring in the output lines of the multiplexer may be captured by the next pipeline stage of the processor, resulting in a soft error. However, the proposed technique does not address these errors. If robust latches are employed in the pipeline stages, these errors can be masked. When a miss occurs and the data is read from the main register file, parity checking is performed to detect any errors in the read value. In the case of an erroneous value, a rollback recovery mechanism can be used. After a value is read from a cache entry, the corresponding read counter is incremented. When the read counter reaches its maximum value, it is not incremented further until the entry is selected as a victim.

### 5. Experimental Results and Comparisons
As mentioned in Section 3.1, the AVF of the register file is considered a metric for reliability estimation of the RRC technique. The two important parameters affecting the register file AVF in the RRC technique are the size of the register cache and the number of bits assigned for the read counter. Figures 10, 11, 12, and 13 report the register file AVF of the RRC technique with cache sizes of 14, 16, 18, and 20 entries, and the number of read count bits ranging from 0 to 3. Figure 14 shows the AVF of the non-protected register file.

From these figures, it is evident that as the cache size increases for a fixed number of read counts, the register file AVF decreases. For example, with three bits of read count (R.C. = 3), as the cache size changes from 14 (Figure 10) to 20 entries (Figure 13), the AVF decreases from about 3% to about 1%. This trend holds true, but with a higher degree of improvement, for a specific cache size with different numbers of read count bits. For instance, with a cache size of 14 (Figure 10), as the number of read count bits increases, the AVF decreases from about 7% to 3%.

This indicates that to achieve significant AVF improvements, both the cache size and the number of read count bits are crucial. Even with zero read count bits, using register caching results in considerable improvement in register file AVF. For example, with a cache size of 20 and zero read count bits, the register file AVF is 4% on average, compared to about 15% in the non-protected register file (Figure 14). Using three bits for the read count, the AVF can be reduced to less than 1%.

### Error Handling in the RRC Technique
An MBU or SBU error may occur in either the main register file or the register cache. When such an error occurs, three situations are possible:
1. The erroneous register value is in the main register file and is still in its ACE time. In this case, an MBU results in an SDC error, while an SBU results in a DUE error due to the use of a parity bit for the main register file.
2. The erroneous register value is in the main register file and is in its UN-ACE time. In this case, neither an MBU nor an SBU will cause any failure.
3. The erroneous register value is in the register cache. In this case, the error is masked, whether it is an MBU or SBU, as the cache is built with robust memory elements.

Based on these scenarios, the RRC technique can experience two types of errors:
1. SDC errors for MBUs.
2. DUE errors for SBUs.

The SDC AVF for SBUs is zero in the RRC technique due to the use of a parity bit for all registers in the main register file. Therefore, the AVF results shown in Figures 10, 11, 12, and 13 represent SDC AVF for MBUs and DUE AVF for SBUs. According to the simulation results, using the RRC technique with appropriate cache size and read count bits can significantly reduce MBU SDC and SBU DUE errors. This is because the probability that a register value is in the main register file and is still in its ACE time is very low, meaning that the first and second situations rarely occur.

### Power Consumption Analysis
To extract the power consumption of the RRC technique, we used the Synopsis power compiler tool for 180nm technology. The robust register cache was simulated using the HSPICE tool, and its power consumption for read and write operations was measured for 180nm technology using the CMOS predictive transistor model [4]. The total power consumption of the RRC was then calculated by multiplying the total number of read and write operations by the power consumed per single read and write operation. Finally, the total power consumed by the processor was measured. The power overheads reported in this section are the additional power consumed by the processor, not the register file.

**Figure 15:** The RRC power overhead for different cache sizes and three bits for the read count.

Based on Figure 15, the average processor power overhead increases from about 10% to about 15% as the cache size increases from 14 to 20. This means that a 5% power overhead is imposed on the processor for reducing the average AVF of the register file from about 3% to 1%. The main causes of the power overhead are:
1. SEU/SET-tolerant flip-flops used in the design of the register cache.
2. The read counter used for each entry of the register cache.
3. Word matching needed for the fully associative register cache.

### Reducing Power Overhead
To decrease the power overhead, we utilized the well-known clock gating technique introduced in Section 4.2. In the RRC technique, a new value is never written to the main register file; a write to the main register file only occurs when a victim value is transferred to the buffer. A value in the cache becomes a victim if its cache entry is selected for storing a new computed value. If the new value is written to a register already cached with an old value, the new value overwrites the old value, and the old value is not considered a victim.

**Figure 16:** The average percentage of victim values as a function of Cache Size (C.S.).

For example, if the value of R0 is already stored in the cache and the processor executes a new write operation to R0, the new value is written to the entry storing the old R0 value, and no victim case occurs. Figure 16 shows that with a cache size of 20 (C.S. = 20), only about 15% of all register write operations result in a victim value. In other words, in about 85% of register write operations, the new value is written to a register that is already stored in the cache. By using clock gating to gate the clock of the main register file when there is no need to write a value, unnecessary transitions in the register file inputs are prevented, resulting in considerable power reduction.

**Figure 17:** The RRC power overhead for different cache sizes using clock gating.

From Figure 17, it is evident that the power overhead is significantly reduced by applying the clock gating technique. For example, with a cache size of 20, the power overhead is reduced from about 15% to about 9%, representing a 6% power overhead reduction. The amount of power saving decreases as the cache size decreases, as shown in Figures 15, 16, and 17. This is because, with a smaller cache size, the frequency of writing to the main register file increases, resulting in fewer opportunities for clock gating and higher power dissipation by the register file.

### Comparison with Other Techniques
To demonstrate the power efficiency of the RRC technique, its power overhead was compared to other well-known SEU-tolerant techniques, including SEC-DED, duplication with parity, and TMR. In the SEC-DED technique, the entire register file is protected by SEC-DED codes. In the duplication with parity technique, the entire register file is duplicated, and a one-bit parity is used for each register. When a value is written to a register, its parity is computed and stored. In a read operation, the parity is recomputed and compared with the previously computed one. If a mismatch occurs, the duplicated version is used; otherwise, the original register is utilized. In the TMR technique, the entire register file is triplicated, and a voter is used to compare the redundant register values.

**Figure 18:** Processor power overheads for the mentioned techniques and the RRC technique with a cache size of 20.

As shown in Figure 18, the RRC with a cache size of 20 has a considerably lower power overhead compared to the other mentioned techniques.

### Performance and Area Overheads
The delay of the critical path increase is used as a metric for measuring performance overheads of the RRC technique. The slowest stage of the processor pipeline is considered the critical path. To extract the delay of the critical path of the processor equipped with the RRC technique, the Synopsis design compiler tool was used. The performance overheads were extracted for the RRC technique with cache sizes of 20, 18, and 16, as well as the other SEU-tolerant techniques, including SEC-DED, duplication with parity, and TMR.

**Figure 19:** The RRC technique has the lowest performance overheads compared to other soft error-tolerant techniques. The RRC technique with a cache size of 20 has a negligible performance overhead of about 1%.

**Figure 20:** The area overhead of the RRC technique and the other mentioned techniques. The RRC technique also has a lower processor area overhead compared to the other techniques.

### 6. Conclusions
In this paper, a technique called Robust Register Caching (RRC) is proposed, which effectively utilizes circuit-level and architectural-level techniques to protect the register file against MBUs and SETs. In the RRC technique, the most vulnerable registers are cached in a small, highly robust memory built with circuit-level protected memory elements. The number of read operations from a register is used as a criterion for the cache replacement policy, such that the victim cache entry is the one with the maximum read count. Additionally, the clock gating technique is efficiently exploited to minimize the power overhead of the RRC. The experimental results of RRC implemented on the LEON processor showed that it can significantly reduce the AVF of the register file while maintaining low overheads in terms of power, area, and performance.

### References
[1] J. Maiz, S. Hareland, K. Zhang, and P. Armstrong, “Characterization of Multibit Soft Error Events in Advanced SRAMs,” Proc. of IEEE Int’l Electronic Device Meeting, pp. 519-522, Dec. 2003.
[2] F. X. Ruckerbauer and G. Georgakos, "Soft Error Rates in 65nm SRAMs—Analysis of New Phenomena," Proceedings of the 13th IEEE International On-Line Testing Symposium, pp. 203-204, 2007.
[3] P. Shivakumar, M. Kistler, S. W. Keckler, D. Burger, and L. Alvisi, "Modeling the Effect of Technology Trends on the Soft Error Rate of Combinational Logic," Proceedings of International Conference on Dependable Systems and Networks, pp. 389-398, 2002.
[4] A.J. Drake, A. KleinOsowski, A.K. Martin, "A Self-Correcting Soft Error Tolerant Flip-Flop," 12th NASA Symposium on VLSI Design, Coeur d’Alene, Idaho, USA, Oct. 4-5, 2005.
[5] A. Ejlali, B.M. Al-Hashimi, M.T. Schmitz, P. Rosinger, S.G. Miremadi, “Combined Time and Information Redundancy for SEU-Tolerance in Energy-Efficient Real-Time Systems,” IEEE Trans. on Very Large Scale Integration Systems, Vol. 14, No. 4, pp. 323-335, April 2006.
[6] P. Montesinos, W. Liu, J. Torrellas, “Using Register ACE Time Predictions to Protect Register Files Against Soft Errors,” IEEE Transactions on Dependable and Secure Computing (IEEE TDSC), To Appear, 2008.
[7] P. Montesinos, W. Liu, J. Torrellas, “Using Register ACE Time Predictions to Protect Register Files Against Soft Errors,” Proc. of 37th International Conference on Dependable Systems and Networks (DSN), June 2007.
[8] J. Gaisler, “Evaluation of a 32-bit Microprocessor with Built-In Concurrent Error-Detection,” in International Symposium on Fault-Tolerant Computing, 1997.
[9] T. Slegel, I. Averill, R.M., M. Check, B. Giamei, B. Krumm, C. Krygowski, W. Li, J. Liptay, J. MacDougall, T. McPherson, J. Navarro, E. Schwarz, K. Shum, and C. Webb, “IBM’s S/390 G5 Microprocessor Design,” IEEE Micro, vol. 19, 1999.
[10] J. Kim, N. Hardavellas, K. Mai, B. Falsafi, J. C. Hoe, “Multi-Bit Error Tolerant Caches Using Two-Dimensional Error Coding,” Proceedings of the 40th Annual ACM/IEEE International Symposium on Microarchitecture (MICRO-40).
[11] M. Fazeli, A. Patooghy, S. G. Miremadi, A. Ejlali, “Feedback Redundancy: A Power-Aware SEU-Tolerant Latch Design in DSM Technologies,” Proc. of the IEEE/IFIP Int’l. Conference on Dependable Systems and Networks, Edinburg, UK, June 2007, pp. 276-285.
[12] M. Omana, D. Rossi, C. Metra, “Latch Susceptibility to Transient Faults and New Hardening Approach,” IEEE Trans. on Computers, Vol. 56, No. 9, pp. 1255-1268, September 2007.
[13] P. Hazucha, T. Karnik, S. Walstra, B. Bloechel, J. Tschanz, J. Maiz, K. Soumyanath, G. Dermer, S. Narendra, V.De, S. Borkar, “Measurements and Analysis of SER Tolerant Latch in a 90-nm Dual-Vt CMOS Process,” IEEE Custom Integrated Circuits Conference, Page(s): 617–620, 2003.
[14] N. Seifert, P. Slankard, M. Kirsch, B. Narasimham, V. Zia, C. Brookreson, A. Vo, S. Mitra, B. Gill, J. Maiz, “Radiation-Induced Soft Error Rates of Advanced CMOS Bulk Devices,” Proceedings of the IEEE International Physics Symposium, pp. 217-225, 2006.
[15] A. Dutta, N. A. Touba, "A Low Cost Code-Based Methodology for Tolerating Multiple Bit Upsets in Memories," IEEE Workshop on System Effects of Logic Soft Errors, Apr. 2007.
[16] J. Patel, "Characterization of Soft Errors Caused by Single Event Upsets in CMOS Processes," IEEE Transactions on Dependable and Secure Computing, vol. 1, no. 2, pp. 128-143, 2004.
[17] S.S. Mukherjee, C. Weaver, J. Emer, S. K. Reinhardt, T. Austin, "A Systematic Methodology to Compute the Architectural Vulnerability Factors of a High-Performance Microprocessor," Proc. of 36th Int'l Symposium on Microarchitecture (MICRO-36), IEEE CS Press, 2003.
[18] M. Fazeli, S. G. Miremadi, A. Ejlali, A. Patooghy, "A Low Energy SEU/SET-Tolerant Latch for Deep Sub-Micron Technologies," To appear in the Journal of IET Computers & Digital Techniques.
[19] S. Mitra, M. Zhang, N. Seifert, T.M. Mak, S. K. Kee, “Soft Error Resilient System Design through Error Correction,” Proc. of IFIP Int’l. Conference on Very Large Scale Integration, October 2006, pp. 332-337.
[20] W. Wang, H. Gong, “Edge Triggered Pulse Latch Design with Delayed Latching Edge for Radiation Hardened Application,” IEEE Trans. on Nuclear Science, Vol. 51, No. 6, pp. 3626-3630, December 2004.
[21] J. M. Benedetto, P. H. Eaton, D. G. Mavis, M. Gadlage, T. Turflinger, “Variation of Digital SET Pulse Widths and the Implications for Single Event Hardening of Advanced CMOS Processes,” IEEE Trans. on Nuclear Science, Vol. 52, No. 6, pp. 2114-2119, December 2005.
[22] Gaisler Research. Leon2 Processor User's Manual, Version 1.0.30, XST Edition. July 2005.
[23] R. Yung, N.C. Wilhelm, “Caching Processor General Registers,” Proceedings of International Conference on Computer Design (ICCD, 95), pp. 307-312, Oct. 1995.
[24] J. A. Butts, G. S. Sohi, “Use-based Register Caching with Decoupled Indexing,” Proceedings of the 31st Annual International Symposium on Computer Architecture (ISCA’04), pp. 302-313, June 2004.
[25] Matthew R. Guthaus, Jeffrey S. Ringenberg, Dan Ernst, Todd M. Austin, Trevor Mudge, Richard B. Brown, “MiBench: A Free, Commercially Representative Embedded Benchmark Suite,” IEEE 4th Annual Workshop on Workload Characterization, Austin, TX, December 2001.
[26] J. Blome, S. Gupta, S. Feng, S. Mahlke, and D. Bradley, "Cost Efficient Soft Error Protection for Embedded Microprocessors," Proc. of the Int’l Conference on Compilers, Architecture, and Synthesis for Embedded Systems, 2006, pp. 421-431.