### IX. COMPARISONS WITH RELATED WORK

#### Bitcoin and Scalability Issues
Bitcoin's underlying blockchain technology faces significant scalability challenges. With a current block size of 1MB and a 10-minute inter-block interval, the throughput is limited to approximately 7 transactions per second (TPS). A client initiating a transaction must wait about 10 minutes for confirmation. In contrast, mainstream payment processors like Visa confirm transactions within a few seconds and can handle an average of 2000 TPS, with peak capacity reaching up to 56,000 TPS [vis]. Reconfiguring Bitcoin, such as in Bitcoin-NG, can marginally improve this to 27 TPS with a 12-second latency [CDE+16]. However, substantial improvements require a fundamental redesign of the blockchain paradigm.

#### OmniLedger
The most comparable system to Chainspace is OmniLedger [KJG+17], which was developed concurrently. OmniLedger provides a scalable distributed ledger for cryptocurrencies but does not support generic smart contracts. It assigns nodes (selected using a Sybil-attack resistant mechanism) into shards, where the state, representing coins, is split. The node-to-shard assignment is updated every epoch using a bias-resistant decentralized randomness protocol [SJK+16] to prevent adversaries from compromising individual shards. Each shard maintains a block-DAG (Directed Acyclic Graph) structure instead of a single blockchain, enabling parallel consensus on transactions. Nodes within shards reach consensus through the Practical Byzantine Fault Tolerant (PBFT) protocol [CL+99] with modifications from ByzCoin [KJG+16] that reduce messaging complexity to O(n). In contrast, Chainspace uses BFT-SMART’s PBFT implementation [SB12], which has an O(n²) messaging complexity. However, BFT-SMART can be replaced with any improved PBFT variant without compromising security.

#### Atomic Commit Protocol
Similar to Chainspace, OmniLedger employs an atomic commit protocol to process transactions across shards. However, it uses a different, client-driven approach. To commit a transaction, the client first sends the transaction to the network. The leader of each input shard validates the transaction and returns a proof-of-acceptance (or proof-of-rejection) to the client, locking the inputs. The client then sends proof-of-accepts to the output shards, whose leaders add the transaction to the next block. If the transaction fails validation, the client can send proof-of-rejection to the input shards to roll back the transaction and unlock the inputs. This protocol assumes clients are incentivized to proceed to the Unlock phase, which may hold in cryptocurrency applications but not in generalized platforms like Chainspace, where objects may have shared ownership. Therefore, Chainspace’s atomic commit protocol involves the entire shard, rather than a single untrusted client, acting as the coordinator.

#### Other Related Works
Other related works include improvements to Byzantine consensus for reduced latency and decentralization [Buc16, Maz15, SYB14], but these do not support sharding. Elastico [LNZ+16] scales by partitioning nodes into a hierarchy of committees, each responsible for managing a subset of transactions through PBFT. A final committee collates sets of transactions from other committees into a final block. Nodes are reassigned to committees through proof-of-work at the end of each epoch. The block throughput scales almost linearly with the network size, but Elastico cannot process multi-shard transactions.

RSCoin [DM16] is a permissioned blockchain where the central bank controls all monetary supply, and mintettes (nodes authorized by the bank) manage subsets of transactions and coins. Communication between mintettes occurs indirectly through the client, relying on the client to ensure transaction completion. RSCoin has low communication overhead, and its transaction throughput scales linearly with the number of mintettes, but it does not support generic smart contracts.

Some systems, like ByzCoin [KJG+16], PeerConsensus [DSW16], and Algorand [Mic16], improve transaction latency by replacing probabilistic guarantees with strong consistency. ByzCoin extends Bitcoin-NG for high transaction throughput, organizing a consensus group into a communication tree. The leader runs an O(n) variant of PBFT to get members to agree on the next microblock. PeerConsensus allows previous miners to vote on blocks, while Algorand proposes a faster graded Byzantine fault tolerance protocol. However, none of these systems are designed to support generic smart contracts.

#### Smart Contract Platforms
Recent systems like Hyperledger Fabric [Cac16] and Ethereum [Woo14] provide transparent platforms for smart contracts. Hyperledger Fabric is a permissioned blockchain for setting up private infrastructures for smart contracts, designed around a 'consortium' model where specific nodes validate transactions. Each smart contract (chaincode) has its own set of endorsers that re-execute submitted transactions for validation. A consensus service then orders transactions and filters out those endorsed by too few. It uses modular consensus, which can be replaced based on requirements (e.g., Apache Kafka or SBFT).

Ethereum provides a decentralized Turing-complete virtual machine (EVM) capable of executing smart contracts. Its main scalability limitation is that every node must process every transaction, similar to Bitcoin. In contrast, Chainspace’s sharded architecture allows for linear scalability, as only the nodes concerned with the transaction (managing the transaction’s inputs or references) need to process it. Ethereum plans to improve scalability through sharding techniques [BCWD15], but their work is still theoretical and lacks implementation or measurements. A key difference is that Ethereum’s smart contracts are executed by the node, whereas Chainspace requires the user to provide the outputs of each transaction. Chainspace also supports smart contracts written in any language, provided checkers are pure functions, with no limitations on the code creating transactions.

Some industrial systems [tez17, roo17, cor17] implement similar functionalities as Chainspace but lack empirical performance evaluations.

#### Security Policy
Chainspace implements a platform that enforces high integrity by embodying a variant of the Clark-Wilson model [CW87], proposed before smart contracts were known.

### X. CONCLUSIONS

We presented the design of Chainspace, an open, distributed ledger platform for high-integrity and transparent processing of transactions. Chainspace offers extensibility through privacy-friendly smart contracts. We instantiated Chainspace by parameterizing it with several 'system' and 'application' contracts, along with their evaluation. Unlike existing smart-contract-based systems like Ethereum [Woo14], Chainspace offers high scalability through sharding across nodes using a novel distributed atomic commit protocol called S-BAC, while providing high auditability. We implemented and evaluated S-BAC on a real cloud-based testbed under varying transaction loads, showing that Chainspace’s transaction throughput scales linearly with the number of shards, achieving up to 22 TPS for each additional shard, handling up to 350 TPS with 15 shards. Thus, Chainspace offers a competitive alternative to both centralized and permissioned systems, as well as fully peer-to-peer but unscalable systems like Ethereum.

**Acknowledgements:**
George Danezis, Shehar Bano, and Alberto Sonnino are supported in part by EPSRC Grant EP/M013286/1 and the EU H2020 DECODE project under grant agreement number 732546. Mustafa Al-Bassam is supported by a scholarship from The Alan Turing Institute. Many thanks to Daren McGuinness and Ramsey Khoury for discussions about the Chainspace design.

**References:**
[BCCG16] Jonathan Bootle, Andrea Cerulli, Pyrros Chaidos, and Jens Groth. "Efficient zero-knowledge proof systems." In Foundations of Security Analysis and Design VIII, pages 1–31. Springer, 2016.
[BCWD15] Vitalik Buterin, Jeff Coleman, and Matthew Wampler-Doty. "Notes on scalable blockchain protocols (version 0.3.2)," 2015.
[BHG87] Philip A Bernstein, Vassos Hadzilacos, and Nathan Goodman. "CONCURRENCY CONTROL AND RECOVERY IN DATABASE SYSTEMS." Addison-Wesley, 1987.
[BSA14] Alysson Bessani, Joao Sousa, and Eduardo E. P. Alchieri. "State machine replication for the masses with BFT-SMART." In Proceedings of the 2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, DSN '14, pages 355–362, Washington, DC, USA, 2014. IEEE Computer Society.
[Buc16] Ethan Buchman. "Tendermint: Byzantine fault tolerance in the age of blockchains." http://atrium.lib.uoguelph.ca/xmlui/bitstream/handle/10214/9769/Buchman_Ethan_201606_MAsc.pdf, June 2016. Accessed: 2017-02-06.
[Cac16] Christian Cachin. "Architecture of the Hyperledger Blockchain Fabric." In Workshop on Distributed Cryptocurrencies and Consensus Ledgers, 2016.
[CDE+16] Kyle Croman, Christian Decker, Ittay Eyal, Adem Efe Gencer, Ari Juels, Ahmed Kosba, Andrew Miller, Prateek Saxena, Elaine Shi, and Emin Gun. "On scaling decentralized blockchains." In 3rd Workshop on Bitcoin and Blockchain Research, Financial Cryptography 16, 2016.
[CL+99] Miguel Castro, Barbara Liskov, et al. "Practical Byzantine fault tolerance." In OSDI, volume 99, pages 173–186, 1999.
[cor17] Corda: A distributed ledger. https://docs.corda.net/static/corda-technical-whitepaper.pdf, 2017 (visited August 9, 2017).
[CW87] David D Clark and David R Wilson. "A comparison of commercial and military computer security policies." In Security and Privacy, 1987 IEEE Symposium on, pages 184–184. IEEE, 1987.
[DGFK14] George Danezis, Jens Groth, C Fournet, and Markulf Kohlweiss. "Square span programs with applications to succinct NIZK arguments." Springer Berlin Heidelberg, 2014.
[DM16] George Danezis and Sarah Meiklejohn. "Centrally banked cryptocurrencies." In Network and Distributed System Security. The Internet Society, 2016.
[DSW16] Christian Decker, Jochen Seidel, and Roger Wattenhofer. "Bitcoin meets strong consistency." In Proceedings of the 17th International Conference on Distributed Computing and Networking, ICDCN '16, pages 13:1–13:10, New York, NY, USA, 2016. ACM.
[GL06] Jim Gray and Leslie Lamport. "Consensus on transaction commit." ACM Transactions on Database Systems (TODS), 31(1):133–160, 2006.
[JJK11] Marek Jawurek, Martin Johns, and Florian Kerschbaum. "Plug-In Privacy Enhancing Technologies - 11th International Symposium, PETS 2011, Waterloo, ON, Canada, July 27-29, 2011. Proceedings," pages 192–210, 2011.
[KJG+16] Eleftherios Kokoris Kogias, Philipp Jovanovic, Nicolas Gailly, Ismail Khoffi, Linus Gasser, and Bryan Ford. "Enhancing Bitcoin security and performance with strong consistency via collective signing." In 25th USENIX Security Symposium (USENIX Security 16), pages 279–296, Austin, TX, 2016. USENIX Association.
[KJG+17] Eleftherios Kokoris-Kogias, Philipp Jovanovic, Linus Gasser, Nicolas Gailly, and Bryan Ford. "OmniLedger: A secure, scale-out, decentralized ledger." IACR Cryptology ePrint Archive, 2017:406, 2017.
[L+01] Leslie Lamport et al. "Paxos made simple." ACM Sigact News, 32(4):18–25, 2001.
[LCQV15] Shengyun Liu, Christian Cachin, Vivien Quema, and Marko Vukolic. "XFT: Practical fault tolerance beyond crashes." CoRR, abs/1502.05831, 2015.
[LL94] Butler Lampson and David B Lomet. "Distributed transaction processing using two-phase commit protocol with presumed-commit without log force," August 2, 1994. US Patent 5,335,343.
[LLK13] Ben Laurie, Adam Langley, and Emilia Kasper. "Certificate transparency." Technical report, 2013.
[LNZ+16] Loi Luu, Viswesh Narayanan, Chaodong Zheng, Kunal Baweja, Seth Gilbert, and Prateek Saxena. "A secure sharding protocol for open blockchains." In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, CCS '16, pages 17–30, New York, NY, USA, 2016. ACM.
[LW94] Luc Lauwers and Marleen Willekens. "Five hundred years of bookkeeping: a portrait of Luca Pacioli." Tijdschrift voor Economie en Management, 39(3):289–304, 1994.
[Maz15] David Mazieres. "The Stellar Consensus Protocol: A federated model for internet-level consensus." https://www.stellar.org/papers/stellar-consensus-protocol.pdf, 2015. Accessed: 2016-08-01.
[MGGR13] Ian Miers, Christina Garman, Matthew Green, and Aviel D Rubin. "Zerocoin: Anonymous distributed e-cash from Bitcoin." In Security and Privacy (SP), 2013 IEEE Symposium on, pages 397–411. IEEE, 2013.
[Mic16] Silvio Micali. "Algorand: The efficient and democratic ledger." http://arxiv.org/abs/1607.01341, 2016. Accessed: 2017-02-09.
[MMM+16] Trent McConaghy, Rodolphe Marques, Andreas Muller, Dimitri De Jonghe, Troy McConaghy, Greg McMullen, Ryan Henderson, Sylvain Bellemare, and Alberto Granzotto. "BigchainDB: A scalable blockchain database." White paper, BigChainDB, 2016.
[Nak08] Satoshi Nakamoto. "Bitcoin: A peer-to-peer electronic cash system." 2008.
[P+91] Torben P Pedersen et al. "Non-interactive and information-theoretic secure verifiable secret sharing." In Crypto, volume 91, pages 129–140. Springer, 1991.
[pet17] petlib. https://github.com/gdanezis/petlib, 2017 (version July 20, 2017).
[RD12] Alfredo Rial and George Danezis. "Privacy-preserving smart metering." In ISSE 2012 - Securing Electronic Business Processes, Highlights of the Information Security Solutions Europe 2012 Conference, Brussels, Belgium, October 23-24, 2012, pages 105–115, 2012.
[roo17] RSK. http://www.rsk.co, 2017 (visited August 9, 2017).
[SB12] Joao Sousa and Alysson Bessani. "From Byzantine consensus to BFT state machine replication: A latency-optimal transformation." In Proceedings of the 2012 Ninth European Dependable Computing Conference, EDCC '12, pages 37–48, Washington, DC, USA, 2012. IEEE Computer Society.
[SJK+16] Ewa Syta, Philipp Jovanovic, Eleftherios Kokoris-Kogias, Nicolas Gailly, Linus Gasser, Ismail Khoffi, Michael J. Fischer, and Bryan Ford. "Scalable bias-resistant distributed randomness." IACR Cryptology ePrint Archive, 2016:1067, 2016.
[SRC84] Jerome H Saltzer, David P Reed, and David D Clark. "End-to-end arguments in system design." ACM Transactions on Computer Systems (TOCS), 2(4):277–288, 1984.
[SYB14] David Schwartz, Noah Youngs, and Arthur Britto. "The Ripple protocol consensus algorithm." https://ripple.com/files/ripple_consensus_whitepaper.pdf, 2014. Accessed: 2016-08-08.
[tez17] Tezos – a self-amending crypto-ledger. https://www.tezos.com/static/papers/position_paper.pdf, 2017 (visited August 9, 2017).
[vis] How a Visa transaction works. http://web.archive.org/web/20160121231718/http://apps.usa.visa.com/merchants/become-a-merchant/how-a-visa-transaction-works.jsp.
[Woo14] Gavin Wood. "Ethereum: A secure decentralised generalised transaction ledger." Ethereum Project Yellow Paper, 151, 2014.