### StackDeﬁler: A Comprehensive Study of Stack-Based Memory Disclosure and Mitigations

We introduce StackDeﬁler, a set of stack corruption attacks designed to bypass Control-Flow Integrity (CFI) implementations. Our novel attack techniques corrupt the stack without relying on traditional stack-based vulnerabilities, challenging the prevailing belief that stack corruption is a solved problem. To our knowledge, this paper presents the first comprehensive study of stack-based memory disclosure and potential mitigations.

#### Key Findings

1. **Fine-Grained CFI Vulnerabilities**:
   - We discovered that fine-grained CFI implementations in both LLVM and GCC, which are widely used to protect browsers, are not immune to our stack attacks.
   - IFCC, a compiler feature, spills critical pointers to the stack, which we can exploit to bypass CFI checks.
   - A similar vulnerability was found in VTV, a separate implementation of fine-grained CFI in a different compiler.

2. **Context Switch Vulnerabilities**:
   - Unprotected context switches between user and kernel modes can also be exploited to bypass CFI.

3. **Shadow Stack Challenges**:
   - Implementing a secure and efficient shadow stack is challenging, and information disclosure poses a significant threat to shadow stacks that lack memory isolation.

4. **Analysis of Defenses**:
   - We analyzed several stack-based defenses and concluded that they are ineffective against our StackDeﬁler attacks.

#### Recommendations

Based on our findings, we recommend the following for new defenses:
1. **Consider Arbitrary Memory Access**: Defenses should account for the threat of arbitrary memory reads and writes to properly secure web browsers and other attacker-scriptable programs.
2. **Do Not Trust Writable Memory Values**: Values from writable memory should not be trusted.
3. **Complementary Approaches**: Complementary methods should be employed to protect both the stack and heap, thereby mitigating the threat of memory disclosure.

### Acknowledgments

The authors thank Andrei Homescu for providing insights into the V8 JavaScript engine. We also thank Ferdinand Brasser and the anonymous reviewers for their valuable suggestions and constructive feedback.

### Funding and Support

This work has been co-funded by:
- The German Science Foundation as part of project S2 within the CRC 1119 CROSSING.
- The European Union’s Seventh Framework Programme under grant agreement No. 609611, PRACTICE project.
- The Intel Collaborative Research Institute for Secure Computing (ICRI-SC).

Partial support was provided by:
- The Defense Advanced Research Projects Agency (DARPA) under contracts D11PC20024, N660001-1-2-4014, FA8750-15-C-0124, and FA8750-15-C-0085.
- Gifts from Google, Mozilla, Oracle, and Qualcomm.

Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of DARPA, its Contracting Agents, the National Science Foundation, or any other agency of the U.S. Government.

Mauro Conti is supported by a European Marie Curie Fellowship (N. PCIG11-GA-2012-321980). This work is also partially supported by the Italian MIUR PRIN Project TENACE (N. 20103P34XC) and the University of Padua PRAT 2014 Project on Mobile Malware.

### References

[1] M. Abadi, M. Budiu, ´U. Erlingsson, and J. Ligatti. Control-Flow Integrity: Principles, Implementations, and Applications. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2005.

[2] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. A Theory of Secure Control Flow. In Proceedings of the 7th International Conference on Formal Methods and Software Engineering, ICFEM’05, 2005.

[3] M. Abadi, M. Budiu, ´U. Erlingsson, and J. Ligatti. Control-Flow Integrity Principles, Implementations, and Applications. ACM Transactions on Information System Security, 13, 2009.

[4] Aleph One. Smashing the Stack for Fun and Profit. Phrack Magazine, 49(14), 2000.

[5] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. N¨urnberger, and J. Pewny. You Can Run But You Can’t Read: Preventing Disclosure Exploits in Executable Code. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2014.

[6] M. Backes and S. N¨urnberger. Oxymoron: Making Fine-Grained Memory Randomization Practical by Allowing Code Sharing. In 23rd USENIX Security Symposium, USENIX Sec, 2014.

[7] S. Bhatkar, D. DuVarney, and R. Sekar. Address Obfuscation: An Efficient Approach to Combat a Broad Range of Memory Error Exploits. In 12th USENIX Security Symposium, USENIX Sec, 2003.

[8] A. Bittau, A. Belay, A. J. Mashtizadeh, D. Mazi`eres, and D. Boneh. Hacking Blind. In 35th IEEE Symposium on Security and Privacy, S&P, 2014.

[9] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross. Control-Flow Bending: On the Effectiveness of Control-Flow Integrity. In 24th USENIX Security Symposium, USENIX Sec, 2015.

[10] N. Carlini and D. Wagner. ROP is Still Dangerous: Breaking Modern Defenses. In 23rd USENIX Security Symposium, USENIX Sec, 2014.

[11] X. Chen, A. Slowinska, D. Andriesse, H. Bos, and C. Giuffrida. StackArmor: Comprehensive Protection from Stack-Based Memory Error Vulnerabilities for Binaries. In Symposium on Network and Distributed System Security (NDSS), NDSS, 2015.

[12] Y. Cheng, Z. Zhou, M. Yu, X. Ding, and R. H. Deng. ROPecker: A Generic and Practical Approach for Defending Against ROP Attacks. In 21st Annual Network and Distributed System Security Symposium, NDSS, 2014.

[13] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang. StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks. In 8th USENIX Security Symposium, USENIX Sec, 1998.

[14] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi, S. Brunthaler, and M. Franz. Readactor: Practical Code Randomization Resilient to Memory Disclosure. In 36th IEEE Symposium on Security and Privacy, S&P, 2015.

[15] S. Crane, S. Volckaert, F. Schuster, C. Liebchen, P. Larsen, L. Davi, A.-R. Sadeghi, T. Holz, B. D. Sutter, and M. Franz. It’s a TRAP: Table Randomization and Protection Against Function Reuse Attacks. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2015.

[16] T. H. Dang, P. Maniatis, and D. Wagner. The Performance Cost of Shadow Stacks and Stack Canaries. In 10th ACM Symposium on Information, Computer and Communications Security, ASIACCS, 2015.

[17] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and F. Monrose. Isomeron: Code Randomization Resilient to (Just-In-Time) Return-Oriented Programming. In 22nd Annual Network and Distributed System Security Symposium, NDSS, 2015.

[18] L. Davi, A. Sadeghi, D. Lehmann, and F. Monrose. Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow Integrity Protection. In 23rd USENIX Security Symposium, USENIX Sec, 2014.

[19] L. V. Davi, A. Dmitrienko, S. N¨urnberger, and A. Sadeghi. Gadge Me If You Can: Secure and Efficient Ad-Hoc Instruction-Level Randomization for x86 and ARM. In 8th ACM Symposium on Information, Computer and Communications Security, ASIACCS, 2013.

[20] I. Evans, S. Fingeret, J. Gonzalez, U. Otgonbaatar, T. Tang, H. Shrobe, S. Sidiroglou-Douskos, M. Rinard, and H. Okhravi. Missing the Point: On the Effectiveness of Code Pointer Integrity. In 36th IEEE Symposium on Security and Privacy, S&P, 2015.

[21] I. Evans, F. Long, U. Otgonbaatar, H. Shrobe, M. Rinard, H. Okhravi, and S. Sidiroglou-Douskos. Control Jujutsu: On the Weaknesses of Fine-Grained Control Flow Integrity. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2015.

[22] G. Fresi Roglia, L. Martignoni, R. Paleari, and D. Bruschi. Surgically Returning to Randomized Lib(c). In 25th Annual Computer Security Applications Conference, ACSAC, 2009.

[23] J. Gionta, W. Enck, and P. Ning. HideM: Protecting the Contents of Userspace Memory in the Face of Disclosure Vulnerabilities. In 5th ACM Conference on Data and Application Security and Privacy, CODASPY, 2015.

[24] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum. Enhanced Operating System Security Through Efficient and Fine-Grained Address Space Randomization. In 21st USENIX Security Symposium, USENIX Sec, 2012.

[25] E. G¨oktas, E. Athanasopoulos, H. Bos, and G. Portokalidis. Out of Control: Overcoming Control-Flow Integrity. In 35th IEEE Symposium on Security and Privacy, S&P, 2014.

[26] E. G¨oktas, E. Athanasopoulos, M. Polychronakis, H. Bos, and G. Portokalidis. Size Does Matter: Why Using Gadget-Chain Length to Prevent Code-Reuse Attacks is Hard. In 23rd USENIX Security Symposium, USENIX Sec, 2014.

[27] J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson. ILR: Where’d My Gadgets Go? In 33rd IEEE Symposium on Security and Privacy, S&P, 2012.

[28] A. Homescu, S. Neisius, P. Larsen, S. Brunthaler, and M. Franz. Profile-Guided Automatic Software Diversity. In IEEE/ACM International Symposium on Code Generation and Optimization, CGO, 2013.

[29] R. Hund, C. Willems, and T. Holz. Practical Timing Side Channel Attacks Against Kernel Space ASLR. In 34th IEEE Symposium on Security and Privacy, S&P, 2013.

[30] Intel. Intel 64 and IA-32 Architectures Software Developer’s Manual, Combined Volumes 3A, 3B, and 3C: System Programming Guide. http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-system-programming-manual-325384.pdf, 2013.

[31] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. Address Space Layout Permutation (ASLP): Towards Fine-Grained Randomization of Commodity Software. In 22nd Annual Computer Security Applications Conference, ACSAC, 2006.

[32] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song. Code-Pointer Integrity. In 11th USENIX Symposium on Operating Systems Design and Implementation, OSDI, 2014.

[33] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz. SoK: Automated Software Diversity. In 35th IEEE Symposium on Security and Privacy, S&P, 2014.

[34] C. Lattner, A. Lenharth, and V. Adve. Making Context-Sensitive Points-To Analysis with Heap Cloning Practical for the Real World. In Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI, 2007.

[35] Microsoft. Data Execution Prevention (DEP). https://support.microsoft.com/kb/875352/EN-US/, 2006.

[36] Microsoft. Control Flow Guard. https://msdn.microsoft.com/en-us/library/Dn919635.aspx, 2015.

[37] V. Pappas, M. Polychronakis, and A. D. Keromytis. Smashing the Gadgets: Hindering Return-Oriented Programming Using In-Place Code Randomization. In 33rd IEEE Symposium on Security and Privacy, S&P, 2012.

[38] V. Pappas, M. Polychronakis, and A. D. Keromytis. Transparent ROP Exploit Mitigation Using Indirect Branch Tracing. In 22nd USENIX Security Symposium, USENIX Sec, 2013.

[39] M. Payer, A. Barresi, and T. R. Gross. Fine-Grained Control-Flow Integrity Through Binary Hardening. In 12th Conference on Detection of Intrusions and Malware and Vulnerability Assessment, DIMVA, 2015.

[40] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and T. Holz. Counterfeit Object-Oriented Programming: On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In 36th IEEE Symposium on Security and Privacy, S&P, 2015.

[41] F. Schuster, T. Tendyck, J. Pewny, A. Maaß, M. Steegmanns, M. Contag, and T. Holz. Evaluating the Effectiveness of Current Anti-ROP Defenses. In 17th International Symposium on Research in Attacks, Intrusions and Defenses, RAID, 2014.

[42] D. Sehr, R. Muth, C. Biffle, V. Khimenko, E. Pasko, K. Schimpf, B. Yee, and B. Chen. Adapting Software Fault Isolation to Contemporary CPU Architectures. In 19th USENIX Conference on Security, USENIX Sec, 2010.

[43] J. Seibert, H. Okhravi, and E. S¨oderstr¨om. Information Leaks Without Memory Disclosures: Remote Side Channel Attacks on Diversified Code. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2014.

[44] H. Shacham. The Geometry of Innocent Flesh on the Bone: Return-Into-LIBC Without Function Calls (on the x86). In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2007.

[45] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A. Sadeghi. Just-in-Time Code Reuse: On the Effectiveness of Fine-Grained Address Space Layout Randomization. In 34th IEEE Symposium on Security and Privacy, S&P, 2013.

[46] A. Sotirov. Heap Feng Shui in JavaScript. In Black Hat Europe, BH US, 2007.

[47] R. Strackx, Y. Younan, P. Philippaerts, F. Piessens, S. Lachmund, and T. Walter. Breaking the Memory Secrecy Assumption. In 2nd European Workshop on System Security, EUROSEC, 2009.

[48] The Clang Team. Clang 3.8 Documentation SafeStack. http://clang.llvm.org/docs/SafeStack.html, 2015.

[49] C. Tice. Improving Function Pointer Security for Virtual Method Dispatches. In GNU Tools Cauldron Workshop, 2012.

[50] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, ´U. Erlingsson, L. Lozano, and G. Pike. Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM. In 23rd USENIX Security Symposium, USENIX Sec, 2014.

[51] VUPEN Security. Advanced Exploitation of Internet Explorer Heap Overflow (Pwn2Own 2012 Exploit). http://www.vupen.com/blog/20120710.Advanced_Exploitation_of_Internet_Explorer_HeapOv_CVE-2012-1876.php, 2012.

[52] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham. Efficient Software-Based Fault Isolation. In 14th ACM Symposium on Operating Systems Principles, SOSP, 1993.

[53] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary Stirring: Self-Randomizing Instruction Addresses of Legacy x86 Binary Code. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2012.

[54] Web Hypertext Application Technology Working Group (WHATWG). Chapter 10 - Web Workers, 2015.

[55] Z. Yunhai. Bypass Control Flow Guard Comprehensively. In Black Hat, BH US, 2015.

[56] B. Zeng, G. Tan, and U. Erlingsson. Strato: A Retargetable Framework for Low-Level Inlined-Reference Monitors. In 22nd USENIX Security Symposium, USENIX Sec, 2013.

[57] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou. Practical Control Flow Integrity and Randomization for Binary Executables. In 34th IEEE Symposium on Security and Privacy, S&P, 2013.

[58] M. Zhang and R. Sekar. Control Flow Integrity for COTS Binaries. In 22nd USENIX Security Symposium, USENIX Sec, 2013.