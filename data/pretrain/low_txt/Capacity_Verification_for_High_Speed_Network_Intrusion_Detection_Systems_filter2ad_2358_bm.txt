### References

1. G. D. Giacomo, Y. Lesperance, and H. Levesque, "ConGolog: A Concurrent Programming Language Based on the Situation Calculus," *Artificial Intelligence*, vol. 121, no. 1-2, pp. 109–169, 2000.
2. G. D. Giacomo, H. J. Levesque, and S. Sardiña, "Incremental Execution of Guarded Theories," *ACM Transactions on Computational Logic*, vol. 2, no. 4, pp. 495–525, October 2001.
3. R. P. Goldman, W. Heimerdinger, S. A. Harp, C. W. Geib, V. Thomas, and R. L. Carter, "Information Modeling for Intrusion Report Aggregation," in *DARPA Information Survivability Conference and Exposition (DISCEX-2001)*, pp. 329–342, 2001.
4. H. Grosskreutz and G. Lakemeyer, "On-Line Execution of cc-Golog Plans," in *Proceedings of the 17th International Joint Conference on Artificial Intelligence*, pp. 12–18, Los Altos, CA, August 2001, Morgan Kaufmann Publishers, Inc.
5. A. R. Haas, "The Case for Domain-Specific Frame Axioms," in *The Frame Problem in Artificial Intelligence: Proceedings of the 1987 Workshop*. Morgan Kaufmann, 1987.
6. Y. Lesperance, Personal communication, August 2001.
7. H. J. Levesque and M. Pagnucco, "Legolog: Inexpensive Experiments in Cognitive Robotics," in *Proceedings of the Second International Cognitive Robotics Workshop*, Berlin, Germany, August 2000.
8. H. J. Levesque, R. Reiter, Y. Lesperance, F. Lin, and R. B. Scherl, "GOLOG: A Logic Programming Language for Dynamic Domains," *Journal of Logic Programming*, vol. 31, no. 1-3, pp. 59–83, 1997.
9. J. McCarthy and P. J. Hayes, "Some Philosophical Problems from the Standpoint of Artificial Intelligence," in *Machine Intelligence*, B. Meltzer and D. Michie, editors, volume 4, Edinburgh University Press, Edinburgh, 1969.
10. R. Reiter, "The Frame Problem in the Situation Calculus: A Simple Solution (Sometimes) and a Completeness Result for Goal Regression," in *Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy*, Vladimir Lifschitz (Ed.), Academic Press, 1991.
11. R. Reiter, *Knowledge in Action*, MIT Press, Cambridge, MA, 2001.
12. R. W. Ritchey and P. Ammann, "Using Model Checking to Analyze Network Vulnerabilities," in *Proceedings 2000 IEEE Computer Society Symposium on Security and Privacy*, pp. 156–165, May 2000.
13. R. B. Scherl and H. J. Levesque, "The Frame Problem and Knowledge-Producing Actions," in *Proceedings of the Eleventh National Conference on Artificial Intelligence*, pp. 689–695, Menlo Park, CA, 1993, AAAI Press/MIT Press.
14. B. Schneier, *Secrets & Lies*, John Wiley & Sons, 2000.
15. L. Schubert, "Monotonic Solution of the Frame Problem in the Situation Calculus," in *Knowledge Representation and Defeasible Reasoning*, J. H. E. Kyburg, editor, pp. 23–67, Kluwer Academic Publishers, 1990.
16. O. Sheyner, J. Haines, S. Jha, R. Lippmann, and J. M. Wing, "Automated Generation and Analysis of Attack Graphs," in *2002 IEEE Symposium on Security and Privacy (SSP '02)*, pp. 273–284, Washington - Brussels - Tokyo, May 2002, IEEE.
17. S. J. Templeton and K. Levitt, "A Requires/Provides Model for Computer Attacks," in *Proceedings of the New Security Paradigms Workshop*, September 2000.

---

### Attacks against Computer Networks: Formal Grammar-Based Framework and Simulation Tool

**Authors:**
Vladimir Gorodetski and Igor Kotenko  
St. Petersburg Institute for Informatics and Automation  
39, 14th Liniya, St. Petersburg, Russia  
Email: PI:EMAIL, PI:EMAIL

**Abstract:**
This paper presents an approach and formal framework for modeling attacks against computer networks and its software implementation based on a multi-agent architecture. The model of an attack is considered as a complex process involving adversarial entities, such as malefactors or teams of malefactors, and the network security system implementing a security policy. The paper focuses on the conceptual justification of the chosen approach, the specification of the basic components composing the attack model, formal frameworks for specifying these components and their interactions in the simulation procedure. The key features of the developed approach include:
1. Intention-centric attack modeling.
2. Multi-level attack specification.
3. Ontology-based distributed attack model structuring.
4. Attributed stochastic LL(2) context-free grammar for formal specification of attack scenarios and their components ("simple attacks").
5. Use of formal grammar substitution operations to specify the multi-level structure of attacks.
6. State machine-based formal grammar framework implementation.
7. Online generation of the malefactor's activity resulting from the reaction of the attacked network security system.

**1. Introduction**
Attacks against computer networks are a significant dimension of cyber terrorism, and the detection and prevention of such attacks have become a major concern. Substantial improvements in the efficiency of Intrusion Detection Systems (IDS) can be achieved by using knowledge derived from the generalization and formalization of accumulated experience regarding computer attacks. Despite the availability of data in the form of taxonomies and attack languages, there have been few serious attempts to generalize this data to develop a mathematical model of a wide spectrum of attacks and use this model for attack simulation. This is likely due to the extreme complexity of both network attacks and computer networks from a modeling perspective.

A formal model of attacks could serve as a powerful source of knowledge for IDS development, providing deeper insights into the nature and peculiarities of attacks. Such a model could also be used as a generator of training and testing samples for both known and unknown attacks. Finally, a formal model of attacks and an attack simulation tool could be used as a testbed for validating security policies and evaluating IDS components.

This paper addresses the development of such a model, its formal specification, and implementation issues. The rest of the paper is structured as follows: Section 2 outlines the conceptual aspects and general strategy of attack modeling and describes the definitions of basic notions composing an attack specification. Section 3 describes the developed ontology of the problem domain "Computer Network Attacks," which serves as a basis for consistent attack specification. Section 4 provides an overview of the proposed formal grammar framework for specifying attacks and exemplifies such specifications for several classes of attacks. Section 5 describes the model of the "counterparty" of attacks, i.e., the model of the attacked computer network. Section 6 presents the architecture of the attack simulation tool and its implementation issues. Section 7 gives an overview of related works, and Section 8 summarizes the main results of the paper.

**2. Attack Modeling Strategy**
Computer network attacks are complex systems characterized by large scale, multi-connectivity, diversity of connections, variability of structure, multiplicity of functions, and structural redundancy. An attack model is a formal object that shares key properties with real-life attacks and serves as a tool for investigation by fixing known information and obtaining new insights about attacks.

Key characteristics influencing the choice of a formal model of attacks include:
1. **Target- and Intention-Centric:** Any attack is directed against a specific object (network, computer, service, directory, file, etc.) and typically has a clear intention. Intention is understood as a goal or sub-goal that the malefactor aims to achieve. Examples of intentions include reconnaissance, penetration, access to files, and denial of service. Targets can include IP addresses of trusted hosts, password files, and specific resources.
2. **Hierarchical Intentions:** An attack intention can be represented as a partially ordered set of lower-level intentions. These intentions can be specified at different levels of detail, with the lowest level consisting of sequences of actions (network packets, OS commands, etc.).
3. **Adversary Domain:** Attack development depends on the response of the attacked network, which in turn depends on the implemented security policy. The current state of the attack is determined by the initial information the malefactor has, the information collected during the attack, and the success or failure of previous steps.

**Conceptual Scheme of Attack Generation:**
- **Selection of Intention and Object:** The selection of the attack intention and object is a subjective act. A list of possible intentions and objects is given, and a formal mechanism (e.g., randomization) is used to select an intention and object.
- **Generation of Lower-Level Intentions:** Given a high-level intention and object, the next step is to generate the attack in terms of a hierarchy of lower-level intentions and corresponding sequences of actions. This process involves randomization to select among multiple possible sub-goals.
- **Action Sequences:** Each lower-level intention is realized through sequences of commands. The selection of these sequences is non-deterministic and can be modeled using randomization mechanisms.
- **State Representation:** The state of the attack at any step can be represented by a sequence of symbols, each marked with a flag indicating success or failure. The sequence includes symbols of intentions and actions at different levels of detail.

**Basic Notions and Terminology:**
- **Reconnaissance (R):** Aims to gather information about the network or host. Specific intentions include identification of running hosts, services, operating systems, and collection of additional information.
- **Implantation and Threat Realization (I):** Includes getting access to resources, escalating privileges, gaining additional data, and realizing threats such as confidentiality, integrity, and availability violations.

**Conclusion:**
This paper introduces a formal framework for modeling attacks against computer networks, emphasizing intention-centric, multi-level, and ontology-based approaches. The framework uses attributed stochastic LL(2) context-free grammars and state machines to specify and simulate attacks, providing a robust tool for IDS development and security policy validation.