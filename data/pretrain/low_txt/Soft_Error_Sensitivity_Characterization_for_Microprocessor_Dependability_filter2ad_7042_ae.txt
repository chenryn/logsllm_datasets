### 8.2 Sensitivity Analysis of the D-cache

**Figure 8. The SES of the D-cache.**

The transition from a valid to an invalid state in the D-cache simply causes the processor to wait for valid data. Conversely, an unexpected transition from invalid to valid can deliver incorrect data to the IU or SMU. A corrupted data transfer also occurs if FIL 54 or FIL 83 fails. FIL 54 aligns data items read from the DCRAM (FIL 83) and places them on the bus. Since the functions of FIL 54 and FIL 83 are sequential, their SES levels and patterns are very similar.

FIL 56 is the most sensitive sub-block, as it signals synchronization errors, I/O errors, and/or memory errors during data access. Similar to FIL 38 in the I-cache, FIL 59 may modify data in the DCRAM with a false write enable signal. Other write enable signals are produced by FIL 68 for tags and FIL 69 for status bits. FIL 60 acts as a sleep signal for the DCRAM and DTAG. Improperly disabling the D-cache results in process failure.

FILs 61 and 70 provide the address for D-cache access. An address error may be resolved as an access miss or other situations, similar to those discussed with FIL 1. Thus, their sensitivities are close to that of FIL 1. FIL 63 controls bypassing data paths for non-cacheable loads and stores. If it selects the wrong path, a memory transaction error occurs.

A DTAG error leads to an incorrect hit or miss decision. The miss rate in the D-cache is relatively high, leading to more false hits (erroneous decisions changing from miss to hit) compared to the I-cache. Additionally, a false miss for a dirty line can result in stale data delivery from memory. This explains why the DTAG exhibits some error susceptibilities, unlike the ITAG. A bit-toggle at the outputs of FIL 81 or 82 guarantees a mis-decision. However, a faulty FIL 79 still has a possibility of avoiding false hits due to its 19-bit output signal. It is important to note that the frequency of a fault corrupting the output signal (upset rate) is different from how the output error affects computation (SES). In reality, the upset rates for FIL 79 and FIL 81 might be similar.

When FID was increased to 500 for testing rarely sensitive sub-blocks, faults were effective in FILs 64, 71, and 72, but not in FILs 57 and 73, as shown in Figure 6. The reason for FIL 57 is the same as FIL 44 in the ICU. FIL 73 indicates whether a store on an SC write miss is completed in the D-cache. SC misses are rare events. False signaling in one direction induces more wait cycles, while the other direction is less prone to failure.

### General Protection Scheme for the D-cache

The general protection scheme for the D-cache can be similar to that of the I-cache, where memory arrays are checked with ECC, and critical control sub-blocks are covered. For a write-back D-cache, as in picoJava-II, up-to-date data items may be available only in the cache. Therefore, more integrity checking is needed for the D-cache than the I-cache. Write-through policy is commonly used when parity protection is employed. In the case of error detection in a cache line, simply invalidating the line can achieve error recovery.

### 8.3 Sensitivity Analysis of FPU, SMU, PCSU, BIU, and MEMC

**Figure 9. The SES of the remaining FUBs.**

In Figure 9, the maximum SES results for the remaining FUBs are presented for FIDs of 1 and 10. The more floating-point operations, the higher the SES. However, the FPU shows very low sensitivities. This is because FIL 84 asserts the start and end signals of floating-point operations. The output of FIL 85 is valid only for one or two cycles upon completion of long execution (up to 2000 cycles) of a floating-point instruction. It is unlikely for short FIDs to overlap with such a brief interval. To examine the FPU's SES in the worst situation, faults could be injected when the output is active, resulting in a much higher SES. Separate fault injections into smaller logic blocks of FIL 85 are needed to understand error manifestation behavior at its output.

The SMU shows zero SES in all FILs except FIL 92. It handles spills and fills of the SC and manages the execution pipeline in overflow and underflow conditions. Overflow occurs if the top of the stack pointer is smaller than the bottom of the stack pointer, which is a rare event. Underflow is activated only in response to changes at the top of the stack pointer initiated by return instructions, which seldom occur. Therefore, faults are hardly effective in the SMU. Randomly selected FIPs in our test did not coincide with the occasional SMU active cycles.

Even with FID 500 (Figure 6), FILs 90, 91, 94, and 96 show no changes in SES. When FID 90 asserts a write enable, the output of FIL 89 is latched. Since the state of FIL 89 does not vary often, additional writes by erroneous FID 90 have little impact. FIL 91 generates pipeline stalls, introducing operation delays but not process failures. FIL 94 requests loads solely on an SC fill or underflow. FIL 96 tells the DCU that a data request is a non-allocate store, which has no effect in the case of a D-cache hit but directly writes to memory on a miss. Erroneous switching by FIL 96 between caching or non-caching data cannot alter computation correctness unless it caches data from a non-cacheable address region. Based on these observations, the SMU can be the last FUB to consider for integrity checking. Since the SMU mainly consists of random logic, the lifespan of errors caused by temporary hardware failures is short.

FIL 97 requests the IU to take a trap when there is an interrupt by an external device. However, the trap is not taken if the interrupt mask bit of the processor state register is 0, making faults ineffective. FIL 99 signals a power-down to other FUBs. Unless the IU executes a power-down instruction (indicated by FIL 24), no response is made, resulting in zero SES. Erroneously triggering standby when FUBs are not ready leads to process failure, while not entering standby mode at the right time does not affect normal execution. Considering this unique characteristic, the power-down control logic needs protection from the former case only. The PCSU is placed in a fault-tolerant position like Figure 4(b).

As seen in the figure, handshaking signals by FIL 100, 101, and 109 are error-sensitive during memory transactions between the BIU and the caches or the BIU and MEMC. A false bus acknowledgment causes the processor to hang or crash. Other FILs, except FIL 107, are less sensitive because their faulty signals neither initiate nor terminate bus transactions. Data errors directly propagate through memory transactions. Ensuring the integrity of handshaking activity along with data check is a critical component, qualifying for protection redundancy.

### 8.4 FUB-level SES

**Figure 10. Estimated SES visualization.**

Figure 10 visualizes our SES estimate of the picoJava-II. The average SES of each FUB is quantized into one of 10 shade levels after weighting the areas and sensitivities of FILs in the FUB. A higher SES is represented by a darker shade.

### 6. Summary

We conducted fault injection simulations on the commercial product picoJava-II to characterize the soft error sensitivities of its components. Our analysis reveals the following:

1. **Component Sensitivity**: Many processor components are seldom susceptible to soft errors, while a few have a very high SES. The SES of a component is determined by its architectural function, logical situation, and active cycle/frequency. A logic block may have an inherent capability of fault masking to some degree.
2. **Workload Variation**: Workload variation does not convert a critical component to a non-critical component in terms of SES, or vice versa. Minor changes in SES level and failure pattern can be induced by different workloads, but the clear distinction in protection order remains unchanged. The SES is an effective standard for prioritizing protection and integrity checking of various processor components to enhance dependability.
3. **Control Logic vs. Memory Arrays**: Soft errors in control logic generally have a shorter lifetime than those in memory arrays. Controlling program flow and bus transactions is more effective than other controls. Protection can start with memory, which is already common in many microprocessors, and then include critical random logic.
4. **Predictability and Efficiency**: The sensitivities of many components are fairly predictable from processor architecture and organization. The amount of effort to estimate SES data is adjustable with varying degrees of accuracy. Different levels in the processor model hierarchy can be selected for estimation, enabling designers to meet time-to-market requirements while achieving resource-efficient increases in processor dependability.

Our study demonstrates that fault injection in RTL models is a very effective method to improve the efficiency of protection techniques in the early development stage.

### Acknowledgments

This work was funded in part by Carver Trust Grants from Iowa State University. The authors would like to thank Jon E. Froehlich for verifying our simulator and benchmark programs.

### References

[1] J. Sosnowski, “Transient fault tolerance in digital systems,” IEEE Micro, 14(1):24-35, Feb. 1994.
[2] D. Siewiorek and R. Swartz, Reliable Computer Systems: Design and evaluation, A K Peters, Natick, MA, 1998.
[3] S. Kim and A. K. Somani, “Area efficient architectures for information integrity in cache memories,” Int’l Symp. Computer Architecture, pp. 246-255, 1999.
[4] J. Clark and D. Pradhan, “Fault injection: a method for validating computer-system dependability,” IEEE Computer, 28(6):47-56, June 1995.
[5] M. Hsueh, T. Tsai, and R. Iyer, “Fault injection techniques and tools,” IEEE Computer, 30(4):75-82, April 1997.
[6] S. Chau, “Fault injection boundary scan design for verification of fault tolerant systems,” Proc. ITC, pp. 667-682, 1994.
[7] C. Constantinescu, “Teraflops supercomputer: architecture and validation of the fault tolerance mechanisms,” IEEE Trans. Computers, 49(9):886-894, Sept. 2000.
[8] J. Karlsson et al., “Using heavy-ion radiation to validate fault-handling mechanisms,” IEEE Micro, 14(1):8-23, 1994.
[9] G. Miremadi and J. Torin, “Evaluating processor-behavior and three error-detection mechanisms using physical fault-injection,” IEEE Trans. Reliability, 44(3):441-454, 1995.
[10] U. Gunneflo, J. Karlsson, and J. Torin, “Evaluation of error detection schemes using fault injection by heavy-ion radiation,” Proc. FTCS-19, pp. 340-347, 1989.
[11] G. Miremadi et al., “Two software techniques for on-line error detection,” Proc. FTCS-22, pp. 328-335, 1992.
[12] W. Moreno et al., “First test results of system level fault tolerant design validation through laser fault injection,” Proc. ICCD, pp. 544-548, 1997.
[13] J. Samson et al., “A technique for automated validation of fault tolerant designs using laser fault injection (LFI),” Proc. FTCS-28, pp. 162-167, 1998.
[14] G. Kanawati et al., “FERRARI: a flexible software-based fault and error injection system,” IEEE Trans. Computers, 44(2):248-260, Feb., 1995.
[15] P. Cheynet et al., “Experimentally evaluating an automatic approach for generating safety-critical software with respect to transient errors,” IEEE Trans. Nuclear Science, 47(6):2231-2236, Dec., 2000.
[16] J. Aidemark et al., “GOOFI: generic object-oriented fault injection tool,” Proc. DSN, pp. 83-88, 2001.
[17] V. Sieh et al., “VERIFY: evaluation of reliability using VHDL-models with embedded fault descriptions,” Proc. FTCS-97, pp. 32-36, 1997.
[18] E. W. Czeck and D. P. Siewiorek, “Observations on the effects of fault manifestation as a function of workload,” IEEE Trans. Computers, 41(5):559-566, 1992.
[19] S. Kim and A. K. Somani, “On-line integrity monitoring of microprocessor control logic,” ICCD, pp. 314-319, 2001.
[20] P. Duba and R. Iyer, “Transient fault behavior in a microprocessor—a case study,” ICCD, pp. 272-276, 1988.
[21] E. W. Czeck and D. P. Siewiorek, “Effects of transient gate-level faults on program behavior,” FTCS, pp. 236-243, 1990.
[22] M. Rimen and J. Ohlsson, “A study of the error behavior of a 32-bit RISC subjected to simulated transient fault injection,” Proc. Int’l Test Conf., pp. 696-704, 1992.
[23] G. Choi et al., “Fault behavior dictionary for simulation of device-level transients,” Proc. Conf. CAD, pp. 6-9, 1993.
[24] N. Kanawati et al., “Dependability evaluation using hybrid fault/error injection,” Proc. Symp. Computer Performance and Dependability, pp. 224-233, 1995.
[25] J. Guthoff and V. Sieh, “Combining software-implemented and simulation-based fault injection into a single fault injection method,” Proc. FTCS-25, pp. 196-206, 1995.
[26] E. Jenn et al., “Fault injection into VHDL models: the MEFISTO tool,” Proc. FTCS-24, pp. 66-75, 1994.
[27] A. Amendola et al., “Fault behavior observation of a microprocessor system through a VHDL simulation-based fault injection experiment,” Proc. Conf. EURO Design Automation, pp. 536-541, 1996.
[28] D. Gil et al., “Fault injection into VHDL models: analysis of the error syndrome of a microcomputer system,” Proc. FTCS-28, pp. 418-424, 1998.
[29] J. Gaisler, “Evaluation of a 32-bit microprocessor with built-in concurrent error-detection,” FTCS-27, pp. 42-46, 1997.
[30] C. Kouba and G. Choi, “The single event upset characteristics of the 486-DX4 microprocessor,” Proc. Radiation Effects Data Workshop, pp. 48-52, 1997.
[31] H. McGhan and M. O’Connor, “PicoJava: a direct execution engine for Java bytecode,” IEEE Computer, 32(10):22-30, Oct. 1998.
[32] “Community source licensing,” Sun Microsystems, http://www.sun.com/processors/communitysource.
[33] S. Dey et al., “Using a soft core in a SoC design: experiences with picoJava,” IEEE Design & Test of computers, 17(3):60-71, July-Sept. 2000.
[34] “The java grande forum benchmark suite,” Java Grande Forum, http://www.javagrande.org.
[35] S. Kim and A. K. Somani, “SSD: an affordable fault tolerant architecture for superscalar processors,” Proc. Int’l Symp. Pacific Rim Dependable Computing, pp. 27-34, 2001.