# Performance Overhead and Security in OS-VM Communication

## A. Kernel Integrity and Security Violations
It is crucial to note that if a benign module attempts to modify kernel areas it does not own, such as adding a new system call, the Virtual Machine (VM) will prevent this action and report it as a security violation, similar to how it handles malicious modules.

## B. Performance Overhead

We evaluated the performance overhead of our architecture using a subset of the SPEC CINT2000 CPU benchmark suite [55] and the system microbenchmarks from Unixbench [43]. The execution times were normalized to the execution time of the system without the OS Request Manager and memory monitor modules at the VM layer, running on an unmodified Linux 2.4.21 guest OS.

### Figure 3: Performance Overhead for SPEC CINT2000 (CPU)
Figure 3 illustrates the performance overhead incurred by the OS-VM communication, the memory monitor module inside the VM, and all modules combined for SPEC CINT2000 (CPU). The average overhead for the OS-VM communication in benchmarks primarily exercising the CPU is low, approximately 7%. The greatest overhead is caused by the memory monitor module inside the VM, which resulted in a slowdown of 1.38X alone and 1.46X when combined with the OS-VM communication.

### Figure 4: Performance Overhead for System Microbenchmarks
Figure 4 shows the overhead of the OS-VM communication for system microbenchmarks (exercising OS functionalities such as file system, process creation, and execution, pipes, etc.) from Unixbench. On average, the system overhead is 16%, with the highest performance penalties observed for microbenchmarks involving the file system and process creation. This is because their related system calls (sys_write, sys_read, and sys_execve) frequently trigger OS-VM communication.

## VII. Discussion

An attacker might attempt to compromise our system by issuing malicious OS-VM requests from within a kernel module. For example, they could request the VM to set a high integrity level for a memory area they control through the OS-VM request FREE ALLOC AREA. However, the VM can still control which subjects at the OS level can perform down-calls by checking the integrity level of the instruction issuing the OS-VM request. Only high-integrity instructions should be allowed to perform such requests.

Benign kernel modules that modify kernel data structures without using exported kernel functions will have their actions reported as kernel integrity violations. This issue can be mitigated if such modules are obtained from a high-integrity network interface or installed offline.

Currently, we do not provide protection against malicious DMA writes into kernel space or write operations from malicious peripheral devices. In many corporate settings, attacks often arrive via infected USB keys. To address this, we could consider all bytes coming from device ports as low integrity and apply the same approach we use for low-integrity bytes from the network.

Additionally, we cannot protect against attacks that do not require writing into kernel space, such as hardware-supported rootkits like Cloaker [13] or soft timer attacks [48]. These types of attacks work by installing a malicious soft timer that can degrade system performance or steal sensitive information. Capturing VM-based rootkits [26], [36] is also out of the scope of this work.

Finally, we currently do not offer protection against low-integrity subjects writing into low-integrity objects they do not own, such as a low-integrity module corrupting memory areas allocated by another low-integrity module or kernel thread. This issue is left for future work.

## VIII. Related Work

### A. OS-VM Interaction
Lares [32] is an architecture for secure active monitoring that aims to bridge the semantic gap between VM and security applications. It involves placing hooks inside the monitored system, and when the execution reaches the hook, control is passed to the security application. Panorama [50] is a VM-based active monitoring system that uses whole-system taint checking to analyze whether an unknown program accesses data it should not. Prospector [39] tracks bytes contributing to overflow attacks on the heap or stack by interposing OS functions like malloc and free with unused software interrupts to inform Qemu about changes in the heap.

### B. Kernel Integrity Defense
Most works addressing kernel attack prevention focus on preventing unauthorized code execution [19], [28], [37], [38] but do not protect against non-control data attacks. Solutions addressing non-control data attacks rely on policies that explicitly protect specific data structures [4], [18], [49], which may be incomplete.

Copilot [24] is a kernel integrity monitor that uses a PCI add-in card to access memory, employing MD5 hashes of kernel text, LKM's text, and the system call table for detection. Its limitation of not being applicable to dynamic kernel data structures was addressed with an architecture that compares the kernel state with a specification of a correct state [31]. State-based control-flow integrity (SCFI) [25] periodically validates kernel state during execution.

Strider GhostBuster [47] detects ghostware by comparing two snapshots of the same state from different points of view. Lycosid [22] and VMWatcher [21] also use this cross-view principle. Gibraltar [3] detects rootkits that modify both control and non-control data by hypothesizing invariants for kernel data structures during a training phase.

### C. Taint Tracking
Taint tracking involves tagging data with extra information that propagates when the data is involved in system operations. This can be a simple bit indicating trust or more complex information like the data source. Recent work has focused on reducing the runtime overhead of taint tracking [7], [8], [20], [33], [42].

Rifle [44] and Loki [51] implement decentralized information flow control (DIFC) at the architecture level. Loki uses a tagged memory architecture to enforce application security policies in hardware. Laminar [35] combines programming language and OS techniques to express comprehensive security policies.

## IX. Conclusions

In this work, we challenged the traditional model of placing all security solutions inside a VM layer and having the guest OS run unaware of virtualization. We believe that for certain security requirements, an OS actively collaborating with a VM layer can provide fine-grained and stronger system protection.

We presented an approach using virtualization-aware OS and VM collaboration to prevent violations against kernel code and data. Our prototype was implemented with a relaxed version of Biba’s integrity model, validating all attempted writes into kernel code and data segments. If an untrusted instruction attempted to write to a high-integrity location, the VM aborted the write and issued a General Protection fault, terminating the offending process without compromising kernel integrity.

We successfully tested our prototype against six rootkits (including a non-control data attack) and four real-world benign LKM/drivers. The average overhead for the OS-VM communication for CPU benchmarks was low, approximately 7%. The memory monitor module incurred a slowdown of 1.38X alone and 1.46X when combined with the OS-VM communication (SPEC CPU benchmarks). The overhead for the OS-VM communication for OS microbenchmarks was approximately 16% on average.

As future work, we plan to demonstrate how this model can be employed in other types of security solutions.

## Acknowledgments
We thank the anonymous reviewers for their helpful comments and the developers of the Bochs project. This work was supported by grants FA9550-07-1-0532 (AFOSR MURI) and 0335299, 0520269, 0627749 (NSF).

## References
[1] GCC Hacks in the Linux Kernel (http://www.ibm.com/developerworks/linux/library/l-gcc-hacks/).
[2] Who needs /dev/kmem? (http://lwn.net/Articles/147901/).
[3] A. Baliga, V. Ganapathy, and L. Iftode. Automatic Inference and Enforcement of Kernel Data Structure Invariants. Annual Computer Security Applications Conference (ACSAC), pages 77–86, December 2008.
[4] A. Baliga and L. Iftode. Automated Containment of Rootkit Attacks. Computer and Security, Elsevier, 2008.
[5] A. Baliga, P. Kamat, and L. Iftode. Lurking in the Shadows: Identifying Systemic Threats to Kernel Data. IEEE S&P’07, pages 246–251, May 2007.
[6] K. J. Biba. Integrity Considerations for Secure Computer Systems. In MITRE Technical Report TR-3153, Apr 1977.
[7] W. Chang, B. Streiff, and C. Lin. Efficient and Extensible Security Enforcement Using Dynamic Data Flow Analysis. ACM CCS, November 2008.
[8] H. Chen, X. Wu, L. Yuan, B. Zang, P. chung Yew, and F. T. Chong. From Speculation to Security: Practical and Efficient Information Flow Tracking Using Speculative Hardware. ISCA, June 2008.
[9] P. M. Chen and B. D. Noble. When Virtual is Better than Real. HotOS, May 2001.
[10] S. Chen, J. Xu, and E. C. Sezer. Non-control-hijacking attacks are realistic threats. In USENIX Security Symposium, 2005.
[11] J. Chow, B. Pfaff, T. Garfinkel, and M. Rosenblum. Understanding Data Lifetime via Whole System Simulation. USENIX, 2004.
[12] J. R. Crandall and F. T. Chong. Minos: Control Data Attack Prevention Orthogonal to Memory Model. MICRO, pages 221–232, December 2004.
[13] F. M. David, E. M. Chan, J. C. Carlyle, and R. H. Campbell. Cloaker: Hardware Supported Rootkit Concealment. IEEE Security and Privacy, pages 296–310, 2008.
[14] G. W. Dunlap, S. T. King, S. Cinar, M. A. Basrai, and P. M. Chen. ReVirt: Enabling Intrusion Analysis through Virtual-Machine Logging and Replay. SIGOPS Oper. Syst. Rev., 36(SI):211–224, 2002.
[15] P. Ferrie. Attacks on Virtual Machine Emulators. Symantec Advanced Threat Research, 2007.
[16] T. Garfinkel, K. Adams, A. Warfield, and J. Franklin. Compatibility is Not Transparency: VMM Detection Myths and Realities. HotOS, 2007.
[17] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. Terra: A Virtual Machine-Based Platform for Trusted Computing. ACM Symposium on Operating Systems Principles, pages 193–206, October 2003.
[18] T. Garfinkel and M. Rosenblum. A Virtual Machine Introspection Based Architecture for Intrusion Detection. Network and Distributed System Security Symposium, 2003.
[19] J. B. Grizzard. Towards Self-Healing Systems: Re-establishing Trust in Compromised Systems. PhD thesis, Georgia Institute of Technology, May 2006.
[20] A. Ho, M. Fetterman, C. Clark, A. Warfield, and S. Hand. Practical taint-based protection using demand emulation. EuroSys, 2006.
[21] X. Jiang, X. Wang, and D. Xu. Stealthy malware detection through VMM-based “out-of-the-box” semantic view reconstruction. ACM CCS, pages 128–138, November 2007.
[22] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. VMM-based Hidden Process Detection and Identification using Lycosid. ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments, 2008.
[23] A. Joshi, S. T. King, G. W. Dunlap, and P. M. Chen. Detecting Past and Present Intrusions through Vulnerability-specific Predicates. ACM SOSP, pages 91–104, October 2005.
[24] N. L. P. Jr, T. Fraser, and W. A. Arbaugh. Copilot - a Coprocessor-based Kernel Runtime Integrity Monitor. USENIX, 2004.
[25] N. L. P. Jr. and M. Hicks. Automated Detection of Persistent Kernel Control-Flow Attacks. ACM CCS, pages 103–115, November 2007.
[26] S. T. King, P. M. Chen, Y.-M. Wang, C. Verbowski, H. J. Wang, and J. R. Lorch. SubVirt: Implementing malware with virtual machines. IEEE Security and Privacy, May 2006.
[27] L. Litty, H. Lagar-Cavilla, and D. Lie. Hypervisor support for identifying covertly executing binaries. USENIX, 2008.
[28] L. Litty and D. Lie. Manitou: a layer-below approach to fighting malware. ASID, October 2006.
[29] R. Love. Linux Kernel Development. Novell Press. 2005.
[30] J. Newsome and D. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In NDSS, Feb. 2005.
[31] J. Nick L. Petroni, T. Fraser, A. Walters, and W. A. Arbaugh. An Architecture for Specification-Based Detection of Semantic Integrity Violations in Kernel Dynamic Data. USENIX Security, 2006.
[32] B. Payne, M. Carbone, M. Sharif, and W. Lee. Lares: An Architecture for Secure Active Monitoring using Virtualization. IEEE Symposium on Security and Privacy, May 2008.
[33] F. Qin, C. Wang, Z. Li, H. seop Kim, Y. Zhou, and Y. Wu. LIFT: A Low-Overhead Practical Information Flow Tracking System for Detecting Security Attacks. MICRO-39, pages 135–148, December 2006.
[34] J. S. Robin and C. E. Irvine. Analysis of the Intel Pentium’s ability to support a secure virtual machine monitor. USENIX, 2000.
[35] I. Roy, D. E. Porter, M. D. Bond, K. S. McKinley, and E. Witchel. Laminar: Practical Fine-Grained Decentralized Information Flow Control. PLDI, pages 63–74, June 2009.
[36] J. Rutkowska. Subverting VistaTM Kernel For Fun And Profit. Black Hat Briefings, 2006.
[37] D. X. Ryan Riley, Xuxian Jiang. Guest-Transparent Prevention of Kernel Rootkits with VMM-based Memory Shadowing. RAID, 2008.
[38] A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: A Tiny Hypervisor to Provide Lifetime Kernel Code Integrity for Commodity OSes. ACM Symposium on Operating Systems Principles (SOSP), October 2007.
[39] A. Slowinska and H. Bos. The Age of Data: pinpointing guilty bytes in polymorphic buffer overflows on heap and stack. ACSAC, December 2007.
[40] J. E. Smith and R. Nair. Virtual Machines - Versatile Platforms for Systems and Processes. Morgan Kaufmann, 2005.
[41] G. E. Suh, J. Lee, and S. Devadas. Secure Program Execution via Dynamic Information Flow Tracking. In Proceedings of ASPLOS-XI, Oct. 2004.
[42] O. Tripp, M. Pistoia, S. Fink, M. Sridharan, and O. Weisman. TAJ: Effective Taint Analysis of Web Applications. PLDI, pages 87–97, June 2009.
[43] UnixBench (http://www.tux.org/pub/tux/benchmarks/).
[44] N. Vachharajani, M. J. Bridges, J. Chang, R. Rangan, G. Ottoni, J. A. Blome, G. A. Reis, M. Vachharajani, and D. I. August. Rifle: An architectural framework for user-centric information-flow security. In Proceedings of the 37th International Symposium on Microarchitecture (MICRO), December 2004.
[45] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. Cross-Site Scripting Prevention with Dynamic Data Tainting and Static Analysis. NDSS, 2007.
[46] Y.-M. Wang, D. Beck, X. Jiang, R. Roussev, C. Verbowski, S. Chen, and S. King. Automated Web Patrol with Strider HoneyMonkeys: Finding Web Sites That Exploit Browser Vulnerabilities. NDSS, 2006.
[47] Y.-M. Wang, D. Beck, B. Vo, R. Roussev, and C. Verbowski. Detecting Stealth Software with Strider GhostBuster. DSN, 2005.
[48] J. Wei, B. D. Payne, J. Griffin, and C. Pu. Soft-Timer Driven Transient Kernel Control Flow Attacks and Defense. Annual Computer Security Applications Conference (ACSAC), 2008.
[49] M. Xu, X. Jiang, R. Sandhu, and X. Zhang. Towards a VMM-based Usage Control Framework for OS Kernel Integrity Protection. SACMAT, 2007.
[50] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda. Panorama: Capturing System-wide Information Flow for Malware Detection and Analysis. ACM CCS 07, pages 116–127, November 2007.
[51] N. Zeldovich, H. Kannan, M. Dalton, and C. Kozyrakis. Hardware Enforcement of Application Security Policies Using Tagged Memory. OSDI, December 2008.
[52] bochs: Open Source IA-32 Emulation Project (http://bochs.sourceforge.net).
[53] Linux on-the-fly kernel patching without LKM (http://doc.bughunter.net/rootkit-backdoor/kernel-patching.html).
[54] SourceForge.net: Open Source Software (http://sourceforge.net).
[55] SPEC Performance Evaluation Standard - Corporation (http://ftp.spec.org/cpu2000/CINT2000).

---

This optimized version of your text is more coherent, clear, and professionally formatted. It includes headings, subheadings, and a structured layout to enhance readability and comprehension.