## 前言
Real-Time Find and Replace 是一个可以实时查找和替换 WordPress 网页数据的插件。据统计，该插件已安装在超过 100,000 个站点上。近日，Real-Time Find and Replace 3.9 版本被披露存在一处高度严重的安全漏洞：由于该插件的核心功能模块未采用随机数来校验请求的合法性，导致了跨站点请求伪造（CSRF）漏洞的产生。攻击者可以利用此漏洞，使用恶意代码替换目标站点页面上的任何内容。

## 漏洞分析

### 预备知识
这一部分将介绍本次漏洞分析过程中涉及的 WordPress 函数与机制。如果对 WordPress 已经非常熟悉，可以直接跳过这部分内容。

#### Real-Time Find and Replace 插件注册过程
首先，我们来看看 Real-Time Find and Replace 插件是如何注册到 WordPress 的菜单栏中的，以及 WordPress 是如何调用该插件的。

`real-time-find-and-replace` 插件只有一个 PHP 文件 `real-time-find-and-replace.php`。在 `wp-content\plugins\real-time-find-and-replace\real-time-find-and-replace.php` 的第 17 行，可以看到 `far_add_pages` 方法。该方法使用 `add_submenu_page` 方法向 WordPress 的顶级菜单添加子菜单。

`add_submenu_page` 方法的参数说明如下：
- `parent_slug`：父菜单的子名称（或标准 WordPress 管理页面的文件名）
- `page_title`：选择菜单后在页面标题标签中显示的文本
- `menu_title`：菜单中使用的文本
- `capability`：向用户显示此菜单所需的功能
- `menu_slug`：别名，用于引用此菜单
- `function`：用于输出此页面内容的函数

这里重点看一下 `parent_slug` 和 `function` 参数。`parent_slug` 参数值为 `tools.php`，因此该子菜单是在工具菜单栏处添加的。通过 `parent_slug` 参数，可以在不同的位置添加子菜单，例如：
- 仪表盘菜单处: `add_submenu_page( 'index.php', ... )`
- 文章菜单处: `add_submenu_page( 'edit.php', ... )`
- 媒体菜单处: `add_submenu_page( 'upload.php', ... )`
- 链接菜单处: `add_submenu_page( 'link-manager.php', ... )`
- 页面菜单处: `add_submenu_page( 'edit.php?post_type=page', ... )`
- 评论菜单处: `add_submenu_page( 'edit-comments.php', ... )`
- 自定义文章类型菜单处: `add_submenu_page('edit.php?post_type=your_post_type', ...)`
- 外观菜单处: `add_submenu_page( 'themes.php', ... )`
- 插件菜单处: `add_submenu_page( 'plugins.php', ... )`
- 用户菜单处: `add_submenu_page( 'users.php', ... )`
- 工具菜单处: `add_submenu_page( 'tools.php', ... )`
- 设置菜单处: `add_submenu_page( 'options-general.php', ... )`

`function` 参数指定用于输出此页面内容的函数。这里指定的是 `far_options_page`，即使用 `far_options_page` 来输出页面信息。

接着来看 `add_submenu_page` 方法的 `function` 参数。在第 19 行有一段 `add_action( "admin_print_scripts-$page", 'far_admin_scripts' );` 代码。这里的 `$page` 是 `add_submenu_page` 方法的返回值，表示子菜单对应的页面的 `page_hook`。在这个例子中，`$page` 的值为 `tools_page_real-time-find-and-replace`。

`admin_print_scripts-(page_hook)` 方法用于在指定的后台页面中引入 JS 和 CSS 文件。通过 `add_action("admin_print_scripts-$page", 'far_admin_scripts' );` 在 `admin_print_scripts-tools_page_real-time-find-and-replace` 页面中加载 `far_admin_scripts` 函数，而 `far_admin_scripts` 函数中指定了要引入的 JS 和 CSS 文件。

在了解插件注册过程后，可以通过访问工具菜单栏中的 `real-time-find-and-replace` 子菜单进入存在漏洞的页面。该页面由 `far_options_page` 函数加载 `far_admin_scripts` 函数中引入的 JS 和 CSS 文件后渲染生成。

#### Real-Time Find and Replace 插件的工作原理
这一部分探讨插件是如何实现实时查找和替换网站页面中的数据的。

跟踪代码可以发现，实际的实现非常巧妙。在 `wp-content\plugins\real-time-find-and-replace\real-time-find-and-replace.php` 文件的最后一行，通过 `add_action` 将 `far_template_redirect` 函数连接到 `template_redirect` 钩子上。`template_redirect` 钩子会在显示所请求页面的模板文件前执行，以便插件改写对模板文件的选择。

接着看 `far_template_redirect` 函数。该函数使用 `ob_start` 打开输出缓冲区，将所请求页面的模板文件信息保存在输出缓冲区中，并使用 `far_ob_call` 函数处理输出结果。`far_ob_call` 函数对所请求页面的模板文件内容进行搜索与替换。最终输出的页面内容被修改，但页面文件本身不会被修改。

### 进入正题
通过预备知识部分，我们已经了解了 `real-time-find-and-replace` 插件是如何在工具菜单中注册子菜单、页面是如何渲染以及插件的工作原理。相比之下，本次漏洞就显得比较简单。

本次漏洞出现在 `real-time-find-and-replace` 插件管理页面，该页面提供了 WordPress 页面全局搜索与替换的功能。执行完毕后，WordPress 中的所有输出都会被替换。从代码中可以看到替换后的结果。

虽然这个功能很强大，但正常情况下只有管理员才能使用。我们抓取一个替换操作的数据包进行分析，发现 POST 提交的数据中仅包含替换相关的属性值，并没有 CSRF token。从代码中也可以看到，这个功能并没有校验 CSRF token。攻击者可以伪造链接诱骗管理员点击，通过 CSRF 攻击使管理员发送请求使用 `real-time-find-and-replace` 插件提供的功能，用新内容或恶意代码替换网站上的任何页面信息。当攻击成功后，浏览任意页面均可能受到攻击。

## 总结
开发者的一个小小疏忽往往会导致严重的后果。尽管漏洞成因简单，但其影响却非常严重。欢迎访问我的博客：[熊本熊本熊](http://kumamon.fun/)