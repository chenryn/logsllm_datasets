### FormatGuard and Its Limitations

FormatGuard [6] ingeniously leverages the capabilities of the GNU C Preprocessor to count the arguments passed to `printf`-style functions. It then invokes wrapper functions that reject calls with an excessive number of format specifiers. This method is effective because the number of arguments is known at compile-time. As discussed in the previous section, the runtime overhead is comparable to our approach. FormatGuard is simpler in that it does not require compile-time flow analysis, but this simplicity comes with certain limitations.

Most notably, FormatGuard cannot detect attacks on `vprintf`-style functions. Such attacks are not only common but also pose a significant security risk. A system where `printf` is more secure than `vprintf` discourages the best practice of interceding output with application-specific functions. However, FormatGuard could potentially be extended to allow programmers to explicitly declare their printing functions.

Additionally, FormatGuard would fail to detect an attack that replaces one format specifier with `%n`. Although we are unaware of any such attacks, they seem quite difficult to construct. FormatGuard also lacks an equivalent of our constant-string optimization. It might be possible to add such an optimization to FormatGuard using GCC's built-in function `__builtin_constant_p` or a similar mechanism. In our system, this optimization was straightforward to implement due to the type-checked abstract-syntax tree provided by CIL.

### Tainted-String Detection

A compile-time or runtime analysis can determine whether a format string passed to a printing function could have originated from an untrusted source. These format strings can then be rejected. Different systems use various analyses and definitions of untrusted sources.

Shankar et al. [31] and Guyer et al. [12] employ compile-time flow analyses to identify and track strings that may have come from I/O or been modified by the user. If this potentially tainted data is used as the format string for a `printf` or `syslog` call, an error is declared. This approach is overly conservative because static analysis is inherently limited, and much of the supposedly "tainted" data is actually safe. Moreover, purely static-analysis-based techniques require code changes to fix potential vulnerabilities, which can be challenging when dealing with large, unfamiliar applications (e.g., protecting open-source code you are compiling and installing). In contrast, our approach provides automatic protection without requiring any code modifications.

Other compile-time approaches are less comprehensive. For example, Alan DeKok’s PScan [9] identifies `printf` call sites where the format string is both non-static and the final parameter. The GCC compiler flag `-Wformat=2` issues a warning whenever a non-static format string is found. These methods can produce false positives (warnings about safe code) and false negatives (missed format-string vulnerabilities).

At runtime, we can detect suspicious format strings or writes. Tim Robbins' `libformat` library [27] takes a similar approach, rejecting any `printf` that uses a format string in writable memory and containing a `%n` specifier. This is essentially equivalent to using an empty whitelist in conjunction with our constant string optimization. This approach may abort safe and correct programs, including the example in Figure 1. The `libsafe` library by Tsai and Singh [36] verifies that the write caused by a `%n` is not to a function return address, which is equivalent to whitelisting all of memory except the locations of the return addresses. This approach might miss less direct format-string attacks and requires frame pointers, making it incompatible with GCC's `-fomit-frame-pointer` flag.

### Restricting Writes

Our explicit whitelist can be viewed as a software approach to restricting memory writes based on the address being written. Related work has taken a similar approach for entire applications rather than specific vulnerabilities like format-string attacks.

Software fault isolation (SFI) [37] is one such method. The legal address range is chosen ahead of time, and the binary code is rewritten to enforce the restriction efficiently. Unfortunately, a compile-time whitelist is not flexible enough to prevent format-string attacks.

Systems like Safe-C [1, 16] are more flexible than SFI, checking at runtime that memory writes do not violate array bounds, follow dangling pointers, etc. This approach can significantly slow down applications, making it unsuitable in many settings. In contrast, our whitelist approach is relevant only to printing functions, resulting in a more reasonable performance overhead.

### Safe `printf`

CCured [21, 5] (a type-safe implementation of C) and Cyclone [14, 8] (a type-safe dialect of C) take similar approaches to making printing functions safe. Generally, the caller provides the number and types of the variable arguments, and the callee compares them against the format string at runtime. The compiler handles this implicitly at call sites, so there is no burden for the programmer using the printing functions.

In Cyclone, the native calling convention for variable-argument functions is not preserved. Instead, a stack-allocated array holds the variable arguments and their type tags. In CCured, the type information can be passed via a global variable. In both cases, there is extra data (the type tags) and extra parameter passing, even when the format string does not contain `%n`. Despite using flow analysis, our approach is simpler and more efficient than making C type-safe.

### Conclusions

We have presented a solution to format-string attacks by providing an automated approach to maintaining an explicit whitelist. We have found that a whitelist directly encodes the relevant security policy, namely that printing functions should modify only certain caller-specified memory locations. Furthermore, a dynamic whitelist provides flexibility: we can change the policy at runtime and directly encode common policies ranging from "no checking" to sandboxing to "no writes." With minimal performance overhead, our approach has fewer false positives and false negatives than previous work. Specifically, we catch attacks using `vprintf` and do not forbid the `%n` format specifier in non-static format strings.

An efficient, automatic, whole-program static analysis and transformation performs whitelist maintenance without burdening programmers. The analysis is simple and efficient using the right tool (such as CIL, which provides a type-checked abstract-syntax tree), but would be impossible with macros or simple scripts. Moreover, we use the analysis just to insert the correct runtime checks, so the imprecision of static analysis is not a limitation.

We believe whitelists are a useful tool for implementing software security policies and consider this work a compelling example. We look forward to exploring whitelists for reducing other security vulnerabilities, such as preventing race conditions for file I/O [3], limiting references to kernel data in user buffers, and restricting access to communication ports.

### Acknowledgments

We would like to thank Steve Gribble, Michael Hicks, Jesse Rothstein, and the anonymous reviewers for their helpful comments on earlier drafts.

### References

[1] Todd Austin, Scott Breach, and Gurindar Sohi. Efficient detection of all pointer and array access errors. In ACM Conference on Programming Language Design and Implementation, pages 290–301, Orlando, FL, June 1994.

[2] William Bush, Jonathan Pincus, and David Sielaﬀ. A static analyzer for finding dynamic programming errors. Software Practice and Experience, 30(7):775–802, June 2000.

[3] Hao Chen, Drew Dean, and David Wagner. Model checking one million lines of C code. In Proceedings of the Network and Distributed System Security Symposium, San Diego, CA, 2004.

[4] CIL - Infrastructure for C Program Analysis and Transformation, version 1.3.2. Available at http://manju.cs.berkeley.edu/cil/.

[5] Jeremy Condit, Matthew Harren, Scott McPeak, George Necula, and Westley Weimer. CCured in the real world. In ACM Conference on Programming Language Design and Implementation, pages 232–244, June 2003.

[6] C. Cowan, M. Barringer, S. Beattie, and G. Kroah-Hartman. FormatGuard: Automatic protection from printf format string vulnerabilities. In Proceedings of the 10th USENIX Security Symposium, Washington, D.C., Aug. 2001.

[7] Crispin Cowan, Calton Pu, Dave Maier, Heather Hinton, Jonathan Walpole, Peat Bakke, Steve Beattie, Aaron Grier, Perry Wagle, and Qian Zhang. StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks. In 7th USENIX Security Symposium, pages 63–78, San Antonio, TX, January 1998.

[8] Cyclone, version 0.8. Available at http://www.research.att.com/projects/cyclone.

[9] Alan DeKok. Pscan: A limited problem scanner for C source files, July 2000. Available at www.striker.ottawa.on.ca/˜aland/pscan/.

[10] Dawson Engler, Benjamin Chelf, Andy Chou, and Seth Hallem. Checking system rules using system-specific, programmer-written compiler extensions. In 4th USENIX Symposium on Operating System Design and Implementation, pages 1–16, San Diego, CA, October 2000.

[11] Free Software Foundation. The GNU compiler collection. Available at http://gnu.gcc.org/.

[12] S. Z. Guyer, E. D. Berger, and C. Lin. Detecting errors with configurable whole-program dataflow analysis. Technical Report UTCS TR-02-04, UT-Austin, 2002.

[13] Reed Hastings and Bob Joyce. Purify: Fast detection of memory leaks and access errors. In Winter USENIX Conference, pages 125–138, San Francisco, CA, January 1992.

[14] T. Jim, G. Morrisett, D. Grossman, M. Hicks, J. Cheney, and Y. Wang. Cyclone: A safe dialect of C. In USENIX Annual Technical Conference, pages 275–288, Monterey, CA, June 2002.

[15] Stephen Johnson. Lint, a C program checker. Computer Science Technical Report 65, Bell Laboratories, December 1977.

[16] Richard Jones and Paul Kelly. Backwards-compatible bounds checking for arrays and pointers in C programs. In AADEBUG’97. Third International Workshop on Automatic Debugging, volume 2(9) of Linköping Electronic Articles in Computer and Information Science, 1997.

[17] Michel Kaempf. Multiple vulnerabilities in splitvt, January 2001. At www.securityfocus.com/archive/1/156251.

[18] Vladimir Kiriansky, Derek Bruening, and Saman Amarasinghe. Secure execution via program shepherding. In 11th USENIX Security Symposium, pages 191–206, August 2002.

[19] Gabriel A. Maggiotti. Unreal ircd format string vuln, February 2002. At www.securityfocus.com/archive/82/258190.

[20] G. C. Necula, S. McPeak, S. P. Rahul, and W. Weimer. CIL: Intermediate language and tools for analysis and transformation of C programs. In Proceedings of the Conference on Compiler Construction, pages 213–228, 2002.

[21] George Necula, Scott McPeak, and Westley Weimer. CCured: Type-safe retrofitting of legacy code. In 29th ACM Symposium on Principles of Programming Languages, pages 128–139, January 2002.

[22] T. Newsham. Format string attacks. White Paper, Sept. 2000. At www.securityfocus.com/guest/3342.

[23] Bruce Perens. Electric fence. At www.gnu.org/directory/All Packages in Directory/Electric-Fence.html.

[24] NGSSoftware Insight Security Research. Pfinger 0.7.8 format string vulnerability, December 2002. http://www.securityfocus.com/archive/1/303555.

[25] NGSSoftware Insight Security Research. zkfingerd 0.9.1 format string vulnerability, December 2002. http://www.securityfocus.com/archive/1/303557.

[26] Michael F. Ringenburg and Dan Grossman. www.cs.washington.edu/homes/miker/formatstring/.

[27] Tim Robbins. libformat, November 2001. At www.wiretapped.net/˜fyre/software/libformat.html.

[28] Rwhoisd remote format string vulnerability, October 2001. At www.securityfocus.com/archive/1/222756.

[29] Jerome H. Saltzer and Michael D. Schroeder. The protection of information in computer systems. Proceedings of the IEEE, 63(9):1278–1308, September 1975.

[30] VOID.AT Security. isc dhcpd 3.0 format string exploit, January 2003. At www.securityfocus.com/archive/1/306327.

[31] U. Shankar, K. Talwar, J. S. Foster, and D. Wagner. Detecting format string vulnerabilities with type qualifiers. In 10th USENIX Security Symposium, pages 201–220, 2001.

[32] Christopher Small and Margo Seltzer. MiSFIT: constructing safe extensible systems. IEEE Concurrency, 6(3):33–41, July–September 1998.

[33] Splint manual, version 3.0.6, 2002. http://www.splint.org/manual/.

[34] @stake, Inc. tcpflow 0.2.0 format string vulnerability, August 2003. At www.securityfocus.com/advisories/5686.

[35] tf8@zolo.freelsd.net. Wu-ftpd remote format string stack overwrite vulnerability, June 2000. At www.securityfocus.com/bid/1387.

[36] T. Tsai and N. Singh. Libsafe: Protecting critical elements of stacks. Technical Report ALR-2001-019, Avaya Labs, Aug. 2001.

[37] Robert Wahbe, Steven Lucco, Thomas Anderson, and Susan Graham. Efficient software-based fault isolation. ACM SIGOPS Operating Systems Review, 7(5):203–216, December 1993.

[38] J. Wilander and M. Kamkar. A comparison of publicly available tools for static intrusion prevention. In Proceedings of the 7th Nordic Workshop on Secure IT Systems, pages 68–84, Nov. 2002.

[39] zillion. nn format string exploit, July 2002. http://www.securityfocus.com/archive/82/280687.