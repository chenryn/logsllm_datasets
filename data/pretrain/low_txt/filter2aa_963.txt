# Abusing Firefox Extensions
## Defcon17 – Las Vegas, US
### Presenters:
- **Roberto Suggi Liverani**
  - Senior Security Consultant, Security-Assessment.com
  - OWASP NZ Leader
  - [malerisch.net](http://malerisch.net)
- **Nick Freeman**
  - Security Consultant, Security-Assessment.com
  - [atta.cked.me](http://atta.cked.me)

### Contact Information:
- Roberto: [PI:EMAIL]
- Nick: [PI:EMAIL]

## Agenda
1. Introduction
2. Security Threats and Risks
3. Disclosure Summary
4. Abusing Extensions: A Selection of Exploits and Demos

## Introduction
### What are Firefox Extensions?
Firefox extensions are software components that extend, modify, and control the browser's behavior, providing enhanced functionality and additional features. They can be categorized into:
- **Extensions**: Add new features to the browser.
- **Plugins (e.g., Search Engine plugins)**: Integrate with specific web technologies.
- **Themes**: Customize the browser's appearance.

### Key Technologies
- **XUL**: Provides a user interface for extensions, combined with JavaScript, CSS, and HTML elements.
- **XBL**: Allows the creation of new widgets, combined with CSS, XML, and XUL.
- **XPConnect**: Acts as a middle layer, allowing JavaScript to interface with XPCOM.
- **XPCOM**: Reusable components/interfaces that interact with low-level libraries (network, I/O, file system, etc.).
- **Chrome**: A privileged browser zone where code is fully trusted.

### Extension Security Model
- **Mozilla's Security Model**: Currently, there is no robust security model for extensions. Extension code is fully trusted by Firefox, and vulnerabilities can lead to full system compromise.
- **Lack of Boundaries**: Extensions can silently modify or alter other extensions, and XPCom C++ components are subject to memory corruption.
- **Platform Independence**: Vulnerabilities in extensions are platform-independent.
- **No Security Policies**: There are no policies to control access to internal APIs, XPCOM components, etc.

## The Potential
### Market Share and Downloads
- **Firefox Browser Market Share**: Exceeds 20% globally since November 2008, with over 50% in certain regions/countries.
- **AMO (Addons.Mozilla.Org) Download Trend**: Over 1 billion extension downloads from AMO as of November 2008.

### Popular Extensions
- **Search Engines**: Google Toolbar, Yahoo Toolbar, Ask.com Toolbar
- **Social Networks**: Facebook Toolbar, LinkedIn Browser Toolbar
- **Services**: Google Browser Sync, Del.icio.us Extension
- **Security Tools**: Netcraft Anti-Phishing Toolbar, PhishTank SiteChecker
- **Communication**: Skype
- **Antivirus**: AVG
- **Operating Systems**: Ubuntu
- **Portals**: AMO, Mozdev, Xulplanet

## The Weakest Part of the Chain
### Human Factors
- **Users**:
  - **Trust**: Users often trust extensions, especially those recommended by AMO or open-source projects.
  - **Misconceptions**: Users may believe extensions are safe, even when they are not.
  - **False Sense of Security**: Tools like NoScript and AdBlockPlus can provide a false sense of security. For example, `chrome://` URIs are whitelisted in NoScript, making them vulnerable to XSS attacks.
- **Developers**:
  - **Lack of Security Awareness**: Many developers create extensions as a hobby and may not be aware of the potential dangers.
  - **Documentation**: Mozilla's documentation on building extensions does not emphasize security.
- **Reviewers**:
  - **Limited Knowledge**: Reviewers do not need extensive security knowledge and focus more on finding malicious extensions, which can allow vulnerable extensions to slip through.

### Concerns on AMO
- **Submission Process**: Anyone can submit an extension to AMO, and the review process lacks a comprehensive security assessment.
- **Unsigned Extensions**: Few extensions are signed, and users often trust unsigned extensions.
- **Experimental Extensions**: Extensions that have not been approved yet are publicly available.

## Extension and Malware
- **Exploited Cases**:
  - **FormSpy (2006)**: Steals passwords, credit card numbers, and e-banking login details.
  - **Firestarterfox (2008)**: Hijacks search requests and redirects them through a Russian site.
  - **Vietnamese Language Pack (2008)**: Shipped with adware.
- **Future Concerns**:
  - Malware authors may bribe or hack famous/recommended extension developers.
  - Initial benign extensions could introduce malware in later updates.

## Abusing Firefox Extensions
### Finding Bugs
- **Methods**:
  - Nature of the extension
  - Logic exposed
  - Input and output
  - XPCOM components
  - Third-party API/components
- **Research Focus**:
  - Extension logic, security model, and functions exposed
  - Data flow and data injection points

### Cross-Site Scripting (XSS)
- **XSS on Steroids**:
  - Any input rendered in the chrome is a potential XSS injection point.
  - XSS in chrome is privileged code, allowing interaction with XPConnect and XPCOM.
  - No Same-Origin Policy (SOP) restrictions.
  - Cannot be blocked by NoScript.

### Testing for XSS
- **Steps**:
  - Run Firefox with the console active: `firefox.exe -console`
  - Confirm execution of the XSS payload by generating an error in the console: `dump(error);`
  - Check all window properties to ensure the XSS is in the chrome.

### Useful XSS Payloads
- **Check for nsIScriptableUnescapeHTML.parseFragment()**:
  - Lack of this function might indicate the use of input black-list filters.
- **Payloads**:
  - iframe with data URI and base64 payload
  - Recursive iframes
  - Embedded XSS
  - XSS on DOM events
  - XUL injection
  - XBL injection

### Tools
- **Firebug**: Console, monitor, and debugging features.
- **Chromebug**: Firebug for chrome, XUL.
- **WebDeveloper**: More control over page elements and cookies.
- **XPComViewer**: Shows registered XPCOM components/interfaces.
- **Venkman**: JavaScript Debugger.
- **Console2**: Advanced error console.
- **ChromeList**: File viewer for installed extensions.
- **Execute JS**: Enhanced JavaScript-Console.
- **DOM Inspector**: Inspect the DOM.
- **Burp**: Web proxy.
- **Mozrepl**: JavaScript shell via telnet service.
- **Sysinternals Tools**: Regmon, Filemon, Tcpmon, etc.

### Disclosed Vulnerabilities
| Extension Name | Date Disclosed | Vendor Response Date | Fix Date |
|----------------|----------------|----------------------|----------|
| WizzRSS        | 2009/02/18     | 2009/02/18           | 2009/03/20 |
| CoolPreviews   | 2009/03/05     | No response, silently fixed | 2009/04/20 |
| FireFTP        | N/A            | N/A                  | 2009/02/19 |
| Undisclosed    | 2009/02/16     | 2009/02/16           | N/A      |
| Feed Sidebar   | 2009/03/04     | 2009/03/05           | 2009/03/14 |
| UpdateScanner  | 2009/06/08     | 2009/06/11           | 2009/06/15 |
| Undisclosed    | 2009/06/22     | N/A                  | N/A      |
| ScribeFire     | 2009/07/10     | 2009/07/15           | 2009/07/20 |
| Skype          | N/A            | N/A                  | 2009/06/03 |

### Exploit Examples
- **Skype**:
  - **Exploit**: XSS via event handler.
  - **Demo**: Compromising NoScript – whitelisting a malicious site.
- **FireFTP**:
  - **Vulnerability**: `<script>` tags in RSS feeds executed in the chrome security zone.
  - **Exploit**: `<iframe src="data:text/html;base64,base64encodedjavascript"></iframe>`.
  - **Demo**: Password stealing.
- **ScribeFire**:
  - **Exploit**: Reverse VNC Using XHR – contents of payload.

### Security Disclosure
- **Process**: Security disclosure is a new process for extension developers/vendors.
- **Underestimation**: Security is often underestimated or not understood.
- **Mozilla Security Team**: Can now be queried for bugs found in extensions.

### Recommendations
- **Developers**:
  - Follow the OWASP developer's guide.
  - Read code of similar extensions to avoid common bugs.
- **Security Professionals**:
  - Adhere to the OWASP testing guide.
  - Watch for publications for new ideas on breaking extensions.
- **End-Users**:
  - Do not trust extensions blindly.
  - Check changelogs for security issues and Bugzilla.
  - Update addons after verifying their security.
  - Consider using Safe Mode (disable all extensions).

### Thanks!
- Buy us a beer!

### References
- **Research and Publications**:
  - "Extensible Web Browser Security" by Mike Ter Louw, Jin Soon Lim, and V.N. Venkatakrishnan.
  - Bachelor thesis on Firefox extension security by Julian Verdurmen.
  - "Attacking Rich Internet Applications" by kuza55 and Stefano Di Paola.
- **Specific Vulnerabilities**:
  - Firebug: Petko D. Petkov, Thor Larholm, April 6, 2007.
  - Tamper Data XSS: Roee Hay, July 27, 2008.
  - GreaseMonkey: ISS, July 21, 2005.
  - Sage RSS Reader: pdp & David Kierznowski.