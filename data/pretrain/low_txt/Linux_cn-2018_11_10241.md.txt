---
**作者:** Gordon Haff  
**分类:** 观点  
**评论数据:** 无  
**统计:** 
  - 评论数: 0
  - 收藏次数: 0
  - 点赞数: 0
  - 分享次数: 0
  - 浏览量: 3690
**日期:** 2018-11-17 11:00:10  
**编辑精选:** 否  
**摘录:** 开发人员无需成为安全专家，但他们确实需要转变将安全视为不幸障碍的心态。  
**原文链接:** <https://opensource.com/article/18/4/what-developers-need-know-about-security>  
**ID:** 10241  
**是否为原创翻译:** 是  
**大图:** /data/attachment/album/201811/17/110005jlpaaqr3obzerfpr.jpg  
**永久链接:** /article-10241-1.html  
**图片:** /data/attachment/album/201811/17/110005jlpaaqr3obzerfpr.jpg.thumb.jpg  
**相关文章:** 无  
**审阅者:** wxy  
**选题人:** lujun9972  
**摘要:** 开发人员无需成为安全专家，但他们确实需要转变将安全视为不幸障碍的心态。  
**标签:** 安全, DevOps  
**缩略图:** 否  
**标题:** 关于安全，开发人员需要知道的  
**标题图片:** 是  
**译者:** MjSeven  
**更新时间:** 2018-11-17 11:00:10
---

> 开发人员无需成为安全专家，但他们确实需要转变将安全视为不幸障碍的心态。

![](/data/attachment/album/201811/17/110005jlpaaqr3obzerfpr.jpg)

DevOps 并不意味着每个人都必须成为开发和运维方面的专家，尤其是在大型组织中，角色往往更加专业化。相反，DevOps 更多关注的是问题的分离。在某种程度上，运维团队可以为开发人员（无论是在本地云还是公共云中）部署平台，并且不会受到干扰，这对两个团队都是好事。开发人员可以获得高效的开发环境和自助服务，而运维人员则可以专注于保持基础架构的运行和维护平台。

这是一种默契。开发者期望从运维人员那里得到一个稳定且实用的平台，而运维人员希望开发者能够自行处理与开发应用相关的大部分任务。

此外，DevOps 还涉及更好的沟通、合作和透明度。如果它不仅仅是一种介于开发和运维之间的新壁垒，效果会更好。运维人员需要对开发者所需工具类型以及通过监控和日志记录来编写更好应用程序所需的可见性保持敏感。另一方面，开发人员需要了解如何更有效地使用底层基础设施，以及什么能让运维在夜间平稳运行。

同样的原则也适用于更广泛的 DevSecOps，这个术语明确地提醒我们，安全需要嵌入整个 DevOps 管道中，从获取内容到编写、构建、测试应用程序，再到在生产环境中运行它们。开发人员（和运维人员）不需要突然成为安全专家，但他们通常可以从对安全最佳实践的更高认识中受益，并摆脱将安全视为不幸障碍的心态。

以下是一些观察结果：

### 开放式 Web 应用程序安全项目 (OWASP)
[OWASP](https://www.owasp.org/index.php/Main_Page) 的 Top 10 列表提供了一个窗口，可以了解 Web 应用程序中的主要漏洞。列表中的许多条目对 Web 程序员来说都很熟悉，例如跨站脚本 (XSS) 和注入漏洞。但令人震惊的是，2007 年列表中的许多漏洞仍在 2017 年的列表中（[PDF](https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf)）。无论是培训还是工具，都有问题，许多相同的编码漏洞一再出现。

### 新平台技术的影响
新的平台技术加剧了这种情况。例如，虽然容器不一定要求应用程序以不同的方式编写，但它们与新模式（如 [微服务](https://opensource.com/tags/microservices)）相吻合，并可能放大某些安全实践的影响。我的同事 Dan Walsh 写道：“计算机领域最大的误解是认为需要 root 权限来运行应用程序。问题是，不是所有开发者都认为他们需要 root，而是他们将这种假设构建到他们的服务中，即服务无法在非 root 情况下运行，这降低了安全性。”

### 默认使用 root 访问
默认使用 root 访问是一个好的实践吗？并不是。但它可能（也许）是一个可以防御的应用程序和系统，否则就会被其他方法完全隔离。然而，在当今高度互联、没有真正边界、多用户工作负载和不同访问权限的环境中，快捷方式的空间更小。

### 自动化
自动化应该是 DevOps 不可分割的一部分，包括安全和合规性测试。代码是从哪里来的？是否涉及第三方技术、产品或容器镜像？是否有已知的安全勘误表？是否有已知的常见代码缺陷？机密信息和个人身份信息是否被隔离？如何进行身份验证？谁被授权部署服务和应用程序？

你不是自己写加密代码吧？

尽可能地自动化渗透测试。我提到过自动化吗？它是使安全性持续的一个重要部分，而不是偶尔做一次的检查清单。

这听起来很难吗？可能有点。至少它是不同的。一位 DevOpsDays OpenSpaces 伦敦论坛的参与者对我说：“这只是技术测试。它既不神奇也不神秘。”他接着说，将安全作为一种更广泛地了解整个软件生命周期的方法（这是一种不错的技能）来参与进来并不难。他还建议参加事件响应练习或 [夺旗练习](https://dev.to/_theycallmetoni/capture-the-flag-its-a-game-for-hacki-mean-security-professionals)。你会发现它们很有趣。

---

**原文作者:** [Gordon Haff](https://opensource.com/users/ghaff)  
**选题:** [lujun9972](https://github.com/lujun9972)  
**译者:** [MjSeven](https://github.com/MjSeven)  
**校对:** [wxy](https://github.com/wxy)  
**本文由 LCTT 原创编译，Linux中国 荣誉推出**
---