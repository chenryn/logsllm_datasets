# Rollback Protection for Intel SGX: ROTE

## Performance Results

### Throughput Comparison
The following table (Table 1) presents the throughput of an example application without rollback protection, using ROTE, and using SGX counters. The results are given in transactions per second (tx/s) with their respective standard deviations.

| Enclave State Size (KB) | No Rollback Protection | ROTE | SGX Counter |
|-------------------------|------------------------|------|-------------|
| 1                       | 260 (± 0.06)           | 190 (± 0.05) | 6 (± 0.04)  |
| 10                      | 230 (± 0.06)           | 170 (± 0.05) | 5 (± 0.04)  |
| 100                     | 180 (± 0.06)           | 160 (± 0.05) | 4 (± 0.04)  |

### Latency Analysis
- **Update Time**: 
  - Between two locations: 654 ms
  - Between five locations: 1.37 seconds
- **Read Delay**:
  - Between two locations: 342 ms
  - Between five locations: 810 ms

### Conclusions
1. The performance overhead of ROTE is largely determined by the network connections between nodes.
2. If nodes are connected over a low-latency network, ROTE can support applications requiring very fast state updates (1-2 ms).
3. For applications that can tolerate larger delays (e.g., more than 600 ms per state update), ROTE can be deployed across geographically distant groups.

## Example Application Throughput

We measured the throughput of a financial enclave that processes incoming transactions continuously. The experimental setup involved a protection group of four nodes. For each update transaction, the enclave updates its state, creates a new seal, and writes it to disk. Read transactions involve reading from the disk, unsealing, and retrieving the counter for comparison. In the ROTE and SGX counter variants, the enclave also increments the counter.

### Test Cases
- **No Rollback Protection**
- **ROTE Implementation**
- **SGX Counter-Based Rollback Protection**

### Enclave State Sizes
- 1 KB
- 10 KB
- 100 KB

### Results
- ROTE provides significantly better state update performance compared to SGX counters (e.g., 190 tx/s vs. 6 tx/s for 1 KB).
- ROTE incurs a 20-25% performance drop compared to systems with no rollback protection (e.g., 260 tx/s vs. 190 tx/s for 1 KB).

## Discussion

### Data Migration
Although sealing binds encrypted enclave data to a specific processor, our solution enables data migration within the protection group. This is particularly useful for planned hardware replacements and group updates. During migration, an ASE unseals its persistent data and passes it to the RE, which then sends the data to another Rollback Enclave in the same protection group, along with the measurement of the ASE. The communication channel is encrypted and authenticated.

### Information Leakage
Our model excludes execution side-channels. However, each enclave state update and read causes network communication, which can be observed by an adversary. This leakage can reveal the timing of sealing and unsealing events and platform reboots. Developing countermeasures for this information leakage is outside the scope of this paper.

### Performance
The main performance characteristic of our solution, the state update delay, is dominated by networking and the asymmetric signature operation required for the first message of the state update protocol. On a local 1 Gbps network and an average laptop, networking takes approximately 1 ms, and the signature operation takes 0.5 ms. Pre-computing asymmetric signatures can be an optimization, as the signed data is predictable MC values.

### Consensus Applications
In distributed applications maintaining a consensus (e.g., permissioned blockchain), our rollback protection can be optimized further. All participating enclaves have a shared global state, and the state update protocol can be replaced with a Byzantine agreement protocol.

### Forking Prevention
The current SGX architecture does not provide the ability for one enclave instance to check if another instance of the same enclave is already running. Implementing this feature would simplify rollback protection. A potential solution involves using a TPM to extend a PCR value after system boot.

### Periodic Checkpointing
For increased robustness, our rollback protection can be complemented with periodic checkpointing. An example approach is to increment a counter on local NVRAM for selected updates (e.g., mod 100). If all nodes crash simultaneously, the administrator can recover from the latest saved checkpoint, with the risk of possible rollback.

## Related Work

### SGX-Counter and TPM Solutions
- **Ariadne**: Uses TPM NVRAM or SGX counters for enclave rollback protection. Ariadne minimizes TPM NVRAM wear but has performance limitations.
- **Memoir**: Leverages TPM NVRAM for rollback protection, with similar performance limitations.
- **ICE**: Enhances the CPU with protected volatile memory and a power supply to flush the latest state to non-volatile memory upon shutdown.

### Client-Side Detection
- **Brandenburger**: Proposes client-side rollback detection for SGX in cloud computing, allowing mutually trusting clients to remain synchronized and detect consistency and integrity violations.

### Integrity Servers
- **Verena**: Maintains authenticated data structures for web applications and stores integrity information on a separate, trusted server.
- **Credential Disabling**: Stores counters on an integrity-protected server to prevent the usage of disabled credentials on mobile devices.

### Byzantine Broadcast and Agreement
- Our state update protocol follows the Echo broadcast approach with an additional confirmation message. It requires O(n) messages, while Byzantine agreement typically requires O(n^2) messages.

### Secure Audit Logs
- Secure audit log systems provide accountability and prevent manipulation of previous log entries. Our goal is to design a system with no single point of failure, using a distributed system among assisting nodes.

### Adversary Models
- Several recently proposed SGX systems consider an adversary model with an untrusted OS. Our work defines a model with explicit adversarial capabilities that cover enclave restarts and multiple instances.

## Conclusion

In this paper, we propose a new approach for rollback protection on Intel SGX, implementing integrity protection as a distributed system across collaborative enclaves running on separate processors. We demonstrate that our system provides strong security guarantees and significantly better performance compared to solutions based on local non-volatile memory.

## Acknowledgements

This work was partly supported by the TREDISEC project, funded by the European Union under the Horizon 2020 research and innovation programme. We thank Jonathan McCune for his insightful comments.

## References

[1] V. Costan et al., “Intel SGX explained,” in Cryptology ePrint Archive, 2016.
[2] R. Strackx et al., “Ariadne: A minimal approach to state continuity,” in USENIX Security, 2016.
[3] ——, “ICE: A passive, high-speed, state-continuity scheme,” in ACSAC, 2014.
[4] B. Parno et al., “Memoir: Practical state continuity for protected modules,” in IEEE S&P, 2011.
[5] Intel, “SGX documentation: sgx create monotonic counter,” 2016, https://software.intel.com/en-us/node/696638.
[6] N. Karapanos et al., “Verena: End-to-End Integrity Protection for Web Applications,” in IEEE S&P, 2016.
[7] M. van Dijk et al., “Offline Untrusted Storage with Immediate Detection of Forking and Replay Attacks,” in ACM STC, 2007.
[8] K. Kostiainen et al., “Credential Disabling from Trusted Execution Environments,” in Nordsec, 2010.
[9] M. Castro et al., “Practical Byzantine fault tolerance,” in OSDI, 1999.
[10] D. Dolev et al., “On the security of public key protocols,” IEEE Transactions on information theory, 1983.
[11] M. Pease et al., “Reaching agreement in the presence of faults,” Journal of the ACM, 1980.
[12] L. Lamport et al., “The Byzantine Generals Problem,” ACM TOPLAS, 1982.
[13] M.-W. Shih et al., “S-NFV: Securing NFV states by using SGX,” in ACM SDN-NFV, 2016.
[14] F. Schuster et al., “VC3: trustworthy Data Analytics in the Cloud Using SGX,” in IEEE S&P, 2015.
[15] M. K. Reiter, “Secure agreement protocols: Reliable and atomic group multicast in Rampart,” in ACM CCS, 1994.
[16] C. Cachin et al., Introduction to reliable and secure distributed programming. Springer, 2011.
[17] Y. Xu et al., “Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems,” in IEEE S&P, 2015.
[18] F. Brasser et al., “Software Grand Exposure: SGX Cache Attacks are Practical,” 2017, http://arxiv.org/abs/1702.07521.
[19] M. Schwarz et al., “Malware Guard Extension: Using SGX to Conceal Cache Attacks,” 2017, http://arxiv.org/abs/1702.08719.
[20] S. Matetic et al., “ROTE: Rollback protection for trusted execution,” 2017, https://eprint.iacr.org/2017/048.
[21] Intel Support Forum, “Ensuring only a single instance of Enclave,” 2017, https://software.intel.com/en-us/forums/intel-software-guard-extensions-intel-sgx/topic/709552.
[22] S. Skorobogatov, “The bumpy road towards iPhone 5c NAND mirroring,” 2016, http://arxiv.org/abs/1609.04327.
[23] Trusted Computing Group, “Trusted Platform Module Library, Part 1: Architecture, Family 2.0,” 2014.
[24] Intel, “SGX documentation: sgx get trusted time,” 2016, https://software.intel.com/en-us/node/696638.