### Increasing Demand for Sanitizers in Binary-Only Fuzzing

There is a growing demand for sanitizers in binary-only fuzzing. However, their heavyweight nature poses significant challenges in porting them. RetroWrite [26] demonstrates the potential for integrating lightweight versions of sanitizers into the main fuzzing loop without compromising performance. We anticipate that such transformations can be achieved with ZAFL.

### Conclusion

ZAFL leverages state-of-the-art binary rewriting to extend the capabilities of compiler-quality instrumentation to binary-only fuzzing, while maintaining compiler-level performance. Our results show that ZAFL significantly enhances effectiveness across both synthetic and real-world benchmarks. Compared to leading binary instrumenters, ZAFL enables fuzzers to achieve 26–131% more unique crashes, 48–203% more test cases, and 60–229% less overhead. Additionally, ZAFL can find crashes in instances where competing instrumenters fail. We further demonstrate that ZAFL scales well to real-world open- and closed-source software of varying sizes and complexities, and supports Windows binaries.

Our findings highlight the necessity and importance of compiler-quality instrumentation in binary-only fuzzing. By carefully matching compiler instrumentation properties in a static binary rewriter, state-of-the-art compiler-based approaches can be ported to binary-only fuzzing without degrading performance. We envision a future where the disparity between compiler-based and binary instrumentation no longer hinders fuzzing.

**USENIX Association**
30th USENIX Security Symposium    1697

### Acknowledgment

We would like to thank our reviewers for their valuable feedback, which has helped us improve this paper. This work was supported by the Defense Advanced Research Projects Agency under Contract No. W911NF-18-C-0019, and the National Science Foundation under Grant No. 1650540.

### References

[1] laf-intel: Circumventing Fuzzing Roadblocks with Compiler Transformations, 2016. URL: https://lafintel.wordpress.com/.

[2] Hiralal Agrawal. Dominators, Super Blocks, and Program Coverage. In ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL, 1994.

[3] F. E. Allen and J. Cocke. A Program Data Flow Analysis Procedure. Communications of the ACM, 19(3):137, 1976.

[4] Kapil Anand, Matthew Smithson, Aparna Kotha, Rajeev Barua, and Khaled Elwazeer. Decompilation to Compiler High IR in a Binary Rewriter. Technical report, University of Maryland, 2010.

[5] Dennis Andriesse, Xi Chen, Victor Van Der Veen, Asia Slowinska, and Herbert Bos. An In-Depth Analysis of Disassembly on Full-Scale x86/x64 Binaries. In USENIX Security Symposium, USENIX, 2019.

[6] Cornelius Aschermann, Patrick Jauernig, Tommaso Frassetto, Ahmad-Reza Sadeghi, Thorsten Holz, and Daniel Teuchert. NAUTILUS: Fishing for Deep Bugs with Grammars. In Network and Distributed System Security Symposium, NDSS, 2019.

[7] Cornelius Aschermann, Sergej Schumilo, Tim Blazytko, Robert Gawlik, and Thorsten Holz. REDQUEEN: Fuzzing with Input-to-State Correspondence. In Network and Distributed System Security Symposium, NDSS, 2018.

[8] Fabrice Bellard. QEMU, a Fast and Portable Dynamic Translator. In USENIX Annual Technical Conference, ATC, 2005.

[9] Andrew R. Bernat and Barton P. Miller. Anywhere, Anytime Binary Instrumentation. In ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools, PASTE, 2011.

[10] Andrea Biondo. Improving AFL’s QEMU mode performance, 2018. URL: https://abiondo.me/2018/09/21/improving-afl-qemu-mode/.

[11] Tim Blazytko, Cornelius Aschermann, Moritz Schlögel, Ali Abbasi, Sergej Schumilo, Simon Wörner, and Thorsten Holz. GRIMOIRE: Synthesizing Structure while Fuzzing. In USENIX Security Symposium, USENIX, 2019.

[12] Tim Blazytko, Moritz Contag, Cornelius Aschermann, and Thorsten Holz. Syntia: Synthesizing the Semantics of Obfuscated Code. In USENIX Security Symposium, USENIX, 2017.

[13] Marcel Böhme, Van-Thuan Pham, Manh-Dung Nguyen, and Abhik Roychoudhury. Directed Greybox Fuzzing. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2017.

[14] Marcel Böhme, Van-Thuan Pham, and Abhik Roychoudhury. Coverage-based Greybox Fuzzing As Markov Chain. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2016.

[15] Ahmed Bougacha. Dagger, 2018. URL: https://github.com/repzret/dagger.

[16] Derek Bruening and Qin Zhao. Practical memory checking with Dr. Memory. In International Symposium on Code Generation and Optimization, CGO, 2011.

[17] Cristian Cadar, Daniel Dunbar, Dawson R Engler, and others. KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs. In USENIX Symposium on Operating Systems Design and Implementation, OSDI, 2008.

[18] Peng Chen and Hao Chen. Angora: Efficient fuzzing by principled search. In IEEE Symposium on Security and Privacy, Oakland, 2018.

[19] Yaohui Chen, Peng Li, Jun Xu, Shengjian Guo, Rundong Zhou, Yulong Zhang, Taowei, and Long Lu. SAVIOR: Towards Bug-Driven Hybrid Testing. In IEEE Symposium on Security and Privacy, Oakland, 2020. arXiv: 1906.07327.

[20] Yaohui Chen, Dongliang Mu, Jun Xu, Zhichuang Sun, Wenbo Shen, Xinyu Xing, Long Lu, and Bing Mao. PTrix: Efficient Hardware-Assisted Fuzzing for COTS Binary. In ACM ASIA Conference on Computer and Communications Security, ASIACCS, 2019. arXiv: 1905.10499.

[21] Yuanliang Chen, Yu Jiang, Fuchen Ma, Jie Liang, Mingzhe Wang, Chijin Zhou, Xun Jiao, and Zhuo Su. EnFuzz: Ensemble Fuzzing with Seed Synchronization among Diverse Fuzzers. In USENIX Security Symposium, USENIX, 2019.

[22] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. S2E: A platform for in-vivo multi-path analysis of software systems. In ACM SIGPLAN International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS, 2011.

[23] Jaeseung Choi, Joonun Jang, Choongwoo Han, and Sang Kil Cha. Grey-box Concolic Testing on Binary Code. In International Conference on Software Engineering, ICSE, 2019.

[24] Keith D Cooper and Timothy J Harvey. Compiler-Controlled Memory. In ACM SIGOPS Operating Systems Review, OSR, 1998.

[25] Artem Dinaburg and Andrew Ruef. McSema: Static Translation of X86 Instructions to LLVM, 2014. URL: https://github.com/trailofbits/mcsema.

[26] Sushant Dinesh, Nathan Burow, Dongyan Xu, and Mathias Payer. RetroWrite: Statically Instrumenting COTS Binaries for Fuzzing and Sanitization. In IEEE Symposium on Security and Privacy, Oakland, 2020.

[27] Brendan Dolan-Gavitt. Of Bugs and Baselines, 2018. URL: http://moyix.blogspot.com/2018/03/of-bugs-and-baselines.html.

[28] Brendan Dolan-Gavitt, Patrick Hulin, Engin Kirda, Tim Leek, Andrea Mambretti, Wil Robertson, Frederick Ulrich, and Ryan Whelan. Lava: Large-scale automated vulnerability addition. In IEEE Symposium on Security and Privacy, Oakland, 2016.

[29] Alexis Engelke and Josef Weidendorfer. Using LLVM for Optimized Lightweight Binary Re-Writing at Runtime. In IEEE International Parallel and Distributed Processing Symposium Workshops, IPDPSW, May 2017.

[30] Andrea Fioraldi, Daniele Cono D’Elia, and Leonardo Querzoni. Fuzzing Binaries for Memory Safety Errors with QASan. In IEEE Secure Development Conference, SecDev, 2020.

[31] Andrea Fioraldi, Dominik Maier, Heiko Eißfeldt, and Marc Heuse. AFL++: Combining Incremental Steps of Fuzzing Research. In USENIX Workshop on Offensive Technologies, WOOT, 2020.

[32] S. Gan, C. Zhang, X. Qin, X. Tu, K. Li, Z. Pei, and Z. Chen. CollAFL: Path Sensitive Fuzzing. In IEEE Symposium on Security and Privacy, Oakland, 2018.

[33] Vijay Ganesh, Tim Leek, and Martin Rinard. Taint-based directed whitebox fuzzing. In International Conference on Software Engineering, ICSE, 2009.

[34] GNU Project. GNU gprof, 2018. URL: https://sourceware.org/binutils/docs/gprof/.

[35] Patrice Godefroid, Adam Kiezun, and Michael Y Levin. Grammar-based whitebox fuzzing. In ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI, 2008.

[36] Patrice Godefroid, Michael Y Levin, David A Molnar, and others. Automated whitebox fuzz testing. In Network and Distributed System Security Symposium, NDSS, 2008.

[37] Google Project Zero. WinAFL, 2016. URL: https://github.com/googleprojectzero/winafl.

[38] GrammaTech. GTIRB, 2019. URL: https://github.com/GrammaTech/gtirb.

[39] Ilfak Guilfanov and Hex-Rays. IDA, 2019. URL: https://www.hex-rays.com/products/ida/.

[40] Niranjan Hasabnis and R. Sekar. Lifting Assembly to Intermediate Representation: A Novel Approach Leveraging Compilers. In International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS, 2016.

[41] William H. Hawkins, Jason D. Hiser, Michele Co, Anh Nguyen-Tuong, and Jack W. Davidson. Zipr: Efficient Static Binary Rewriting for Security. In IEEE/IFIP International Conference on Dependable Systems and Networks, DSN, 2017.

[42] Matthew S Hecht and Jeffrey D Ullman. Flow Graph Reducibility. SIAM Journal on Computing, 1(2):188–202, 1972.

[43] Marc Heuse. AFL-DynamoRIO, 2018. URL: https://github.com/vanhauser-thc/afl-dynamorio.

[44] Marc Heuse. AFL-Dyninst, 2018. URL: https://github.com/vanhauser-thc/afl-dyninst.

[45] Marc Heuse. AFL-PIN, 2018. URL: https://github.com/vanhauser-thc/afl-pin.

[46] Jason Hiser, Anh Nguyen-Tuong, William Hawkins, Matthew McGill, Michele Co, and Jack Davidson. Zipr++: Exceptional Binary Rewriting. In Workshop on Forming an Ecosystem Around Software Transformation, FEAST, 2017.

[47] Chin-Chia Hsu, Che-Yu Wu, Hsu-Chun Hsiao, and Shih-Kun Huang. INSTRIM: Lightweight Instrumentation for Coverage-guided Fuzzing. In NDSS Workshop on Binary Analysis Research, BAR, 2018.

[48] Intel. Intel Processor Trace Tools, 2017. URL: https://software.intel.com/en-us/node/721535.

[49] Vivek Jain, Sanjay Rawat, Cristiano Giuffrida, and Herbert Bos. TIFF: Using Input Type Inference To Improve Fuzzing. In Annual Computer Security Applications Conference, ACSAC, 2018.

[50] James Johnson. gramfuzz, 2018. URL: https://github.com/d0c-s4vage/gramfuzz.

[51] Mateusz Jurczyk. CmpCov, 2019. URL: https://github.com/googleprojectzero/CompareCoverage.

[52] George Klees, Andrew Ruef, Benji Cooper, Shiyi Wei, and Michael Hicks. Evaluating Fuzz Testing. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2018.

[53] C. Lattner and V. Adve. LLVM: A compilation framework for lifelong program analysis & transformation. In International Symposium on Code Generation and Optimization, CGO, 2004.

[54] Caroline Lemieux and Koushik Sen. FairFuzz: A Targeted Mutation Strategy for Increasing Greybox Fuzz Testing Coverage. In ACM/IEEE International Conference on Automated Software Engineering, ASE, 2018.

[55] Yuekang Li, Bihuan Chen, Mahinthan Chandramohan, Shang-Wei Lin, Yang Liu, and Alwen Tiu. Steelix: Program-state Based Binary Fuzzing. In ACM Joint Meeting on Foundations of Software Engineering, ESEC/FSE, 2017.

[56] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation. In ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI, 2005.

[57] Chenyang Lv, Shouling Ji, Chao Zhang, Yuwei Li, Wei-Han Lee, Yu Song, and Raheem Beyah. MOPT: Optimize Mutation Scheduling for Fuzzers. In USENIX Security Symposium, USENIX, 2019.

[58] Björn Mathis, Rahul Gopinath, Michaël Mera, Alexander Kampmann, Matthias Höschele, and Andreas Zeller. Parser-directed fuzzing. In ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI, 2019.

[59] Xiaozhu Meng and Barton P. Miller. Binary code is not easy. In ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA, 2016.

[60] Mozilla Security. Dharma: A generation-based, context-free grammar fuzzer, 2018. URL: https://github.com/MozillaSecurity/dharma.

[61] Robert Muth. Register Liveness Analysis of Executable Code. 1998.

[62] Stefan Nagy and Matthew Hicks. Full-speed Fuzzing: Reducing Fuzzing Overhead through Coverage-guided Tracing. In IEEE Symposium on Security and Privacy, Oakland, 2019.

[63] Nikolaos Naziridis and Zisis Sialveras. Choronzon - An evolutionary knowledge-based fuzzer, 2016. URL: https://github.com/CENSUS/choronzon.

[64] Paradyn Tools Project. Dyninst API, 2018. URL: https://dyninst.org/dyninst.

[65] Chen Peng. AFL_pin_mode, 2017. URL: https://github.com/spinpx/afl_pin_mode.

[66] Van-Thuan Pham, Marcel Böhme, Andrew E. Santosa, Alexandru Răzvan Căciulescu, and Abhik Roychoudhury. Smart Greybox Fuzzing. IEEE Transactions on Software Engineering, 2019.

[67] Nguyen Anh Quynh. Capstone: The Ultimate Disassembler, 2019. URL: http://www.capstone-engine.org/.

[68] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida, and Herbert Bos. VUzzer: Application-aware Evolutionary Fuzzing. In Network and Distributed System Security Symposium, NDSS, 2017.

[69] Benjamin Schwarz, Saumya Debray, and Gregory Andrews. Disassembly of executable code revisited. In Working Conference on Reverse Engineering, WCRE, 2002.

[70] Kosta Serebryany. Continuous fuzzing with libfuzzer and addresssanitizer. In IEEE Cybersecurity Development Conference, SecDev, 2016.

[71] Bhargava Shastry, Federico Maggi, Fabian Yamaguchi, Konrad Rieck, and Jean-Pierre Seifert. Static Exploration of Taint-Style Vulnerabilities Found by Fuzzing. In USENIX Workshop on Offensive Technologies, WOOT, 2017.

[72] Dongdong She, Kexin Pei, Dave Epstein, Junfeng Yang, Baishakhi Ray, and Suman Jana. NEUZZ: Efficient Fuzzing with Neural Program Smoothing. In IEEE Symposium on Security and Privacy, Oakland, 2019.

[73] Maksim Shudrak. drAFL, 2019. URL: https://github.com/mxmssh/drAFL.

[74] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna. Driller: Augmenting Fuzzing Through Selective Symbolic Execution. In Network and Distributed System Security Symposium, NDSS, 2016.

[75] Robert Swiecki. honggfuzz, 2018. URL: http://honggfuzz.com/.

[76] talos-vulndev. AFL-Dyninst, 2018. URL: https://github.com/talos-vulndev/afl-dyninst.

[77] R Tarjan. Testing Flow Graph Reducibility. In ACM Symposium on Theory of Computing, STOC, 1973.

[78] The Clang Team. DataFlowSanitizer, 2019. URL: https://clang.llvm.org/docs/DataFlowSanitizer.html.

[79] The Clang Team. SanitizerCoverage, 2019. URL: https://clang.llvm.org/docs/SanitizerCoverage.html.

[80] Parker Thompson. AFLPIN, 2015. URL: https://github.com/mothran/aflpin.

[81] Mustafa M Tikir and Jeffrey K Hollingsworth. Efficient Instrumentation for Code Coverage Testing. ACM SIGSOFT Software Engineering Notes, 27:86–96, 2002.

[82] Anatoly Trosinenko. AFL-Dr, 2017. URL: https://github.com/atrosinenko/afl-dr.

[83] Martin Vuagnoux. Autodafe, an Act of Software Torture, 2006. URL: http://autodafe.sourceforge.net/.

[84] Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. Skyfire: Data-Driven Seed Generation for Fuzzing. In IEEE Symposium on Security and Privacy, Oakland, 2017.

[85] Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. Superion: Grammar-Aware Greybox Fuzzing. In International Conference on Software Engineering, ICSE, 2019. arXiv: 1812.01197.

[86] Ruoyu Wang, Yan Shoshitaishvili, Antonio Bianchi, Aravind Machiry, John Grosen, Paul Grosen, Christopher Kruegel, and Giovanni Vigna. Ramblr: Making Reassembly Great Again. In Network and Distributed System Security Symposium, NDSS, 2017.

[87] Shuai Wang, Pei Wang, and Dinghao Wu. Reassembleable Disassembling. In USENIX Security Symposium, USENIX, 2015.

[88] Song Wang, Jaechang Nam, and Lin Tan. QTEP: Quality-aware Test Case Prioritization. In ACM Joint Meeting on Foundations of Software Engineering, ESEC/FSE, 2017.

[89] T. Wang, T. Wei, G. Gu, and W. Zou. TaintScope: A Checksum-Aware Directed Fuzzing Tool for Automatic Software Vulnerability Detection. In IEEE Symposium on Security and Privacy, Oakland, 2010.

[90] Babak Yadegari, Brian Johannesmeyer, Ben Whitely, and Saumya Debray. A Generic Approach to Automatic Deobfuscation of Executable Code. In IEEE Symposium on Security and Privacy, Oakland, 2015.

[91] Wei You, Xuwei Liu, Shiqing Ma, David Perry, Xiangyu Zhang, and Bin Liang. SLF: Fuzzing without Valid Seed Inputs. In International Conference on Software Engineering, ICSE, 2019.

[92] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim. QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing. In USENIX Security Symposium, USENIX, 2018.

[93] Michal Zalewski. American fuzzy lop, 2017. URL: http://lcamtuf.coredump.cx/afl/.

[94] Lei Zhao, Yue Duan, Heng Yin, and Jifeng Xuan. Send Hardest Problems My Way: Probabilistic Path Prioritization for Hybrid Fuzzing. In Network and Distributed System Security Symposium, NDSS, 2019.

**USENIX Association**
30th USENIX Security Symposium    1700