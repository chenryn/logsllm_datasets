### Optimized Text

#### Matching Execution Paths and Node Analysis
- **Execution Path Analysis**: All matching execution paths that differ by no more than \( \tau \) nodes are analyzed. The candidate path, which enters at node `send_response()` with a node index of 71, is marked as infeasible.
- **StatSym Support**: With StatSym support, the function `defang()` can be explored efficiently using guidance from a candidate path identified in the second round. The predicate associated with this candidate node (`len(str) > 999.5`) helps prune the search space for KLEE, eliminating unnecessary forks of states related to loop iterations and switch-case branches for shorter strings.
- **Vulnerable Path Discovery**: Overall, StatSym used two candidate paths to discover the vulnerable path in thttpd.

#### CTree and Grep: Buffer Overflow Bug
- **Bug Trigger**: The buffer overflow bug in CTree is triggered when an environment variable named `stonesoup_stack_buffer_64` with a length over 64 bytes is read, overflowing a fixed stack buffer of size 64 bytes.
- **StatSym Modules**: StatSym's statistical analysis module and symbolic execution module work together to identify the vulnerable path. In all experiments, StatSym successfully discovers the vulnerable path.
- **Performance Impact**: As the sampling rate increases from 20% to 100%, the time spent on statistical analysis increases from 1.6 seconds to 1.9 seconds in polymorph and from 43.2 seconds to 58.7 seconds in CTree due to larger log files.
- **Search Space Reduction**: More runtime profile information improves the accuracy of results, reducing the search space for the symbolic executor. This leads to a decrease in the time spent by the symbolic execution module, from 213.0 seconds to 179.5 seconds for polymorph and from 2.4 seconds to 1.6 seconds for CTree.
- **Trade-off**: There is a trade-off between more accurate inference (requiring increased runtime information and overhead) and a larger search space. Smarter techniques for partial logging could achieve the same effectiveness with lower sampling rates.

#### Related Work
- **Statistical Analysis for Bugs**: Statistical analysis has been used to construct bug-related predicates to facilitate testing and debugging [9], [10], [11], [37]. These approaches often rely on partial logging to reduce monitoring overheads [9].
- **Predicate Construction**: Prior works have studied predicate construction algorithms for bug localization and identifying multiple bugs [11], [38], [10]. Although these techniques assist testing and debugging, their outputs still require manual analysis.
- **Machine Learning for Bug Detection**: Other works use machine learning techniques, such as mining control-flow graphs [39] and hidden Markov models for anomaly detection [40], and modified support vector machines [41]. Unlike these, StatSym focuses on automated vulnerable program path diagnosis and debugging.
- **Symbolic Execution and Formal Verification**: Symbolic execution, model checking, and tainting are well-studied techniques for formal verification, static analysis, or test generation [13], [14], [42], [17], [43], [44], [45]. These methods, while effective, suffer from high overheads, especially for large software programs with exponential potential execution paths.
- **Runtime Information and Debugging**: Li et al. [31], [30] leverage program runtime information for debugging and security enhancement. Jin et al. [20] propose a bug synthesis tool that reproduces field failures using execution data, but this approach can be impractical if logging entire call sequences is infeasible.
- **Branch Selection History**: Crameri et al. [19] use branch selection history to guide symbolic execution, offering a local view of program execution. In contrast, StatSym uses predicates and candidate path construction for a global search, making it semantically more powerful.

#### Conclusion
- **StatSym Framework**: StatSym is a novel framework for discovering vulnerable paths, combining the scalability of statistical analysis with the rigor of symbolic execution. It constructs predicates and identifies candidate vulnerable paths using program runtime information.
- **Evaluation Results**: Evaluated on four applications—polymorph from Bugbench, CTree, Grep from NIST STONESOUP benchmarks, and thttpd—StatSym achieves a 15× speedup in finding vulnerable paths compared to KLEE and correctly identifies vulnerabilities even when KLEE fails in three out of four applications.

#### Acknowledgment
- **Funding**: This work was supported by the US Office of Naval Research (ONR) under Award N00014-15-1-2210. Any opinions, findings, conclusions, or recommendations expressed in this article are those of the authors and do not necessarily reflect those of ONR.

#### References
- [1] M. C. Libicki, L. Ablon, and T. Webb, *The Defenders Dilemma: Charting a Course Toward Cybersecurity*. Rand Corporation, 2015.
- [2] P. Akulavenkatavara, J. Girouard, and E. Ratliff, "Mitigating Malicious Exploitation of A Vulnerability in A Software Application by Selectively Trapping Execution along A Code Path," 2010. US Patent 7,845,006.
- [3] J. S. Mertoguno, "Human Decision Making Model for Autonomic Cyber Systems," *International Journal on Artificial Intelligence Tools*, 2014.
- [4] Z. Guo, X. Wang, J. Tang, X. Liu, Z. Xu, M. Wu, M. F. Kaashoek, and Z. Zhang, "R2: An Application-level Kernel for Record and Replay," in *USENIX Conference on Operating Systems Design and Implementation*, 2008.
- [5] K. Veeraraghavan, D. Lee, B. Wester, J. Ouyang, P. M. Chen, J. Flinn, and S. Narayanasamy, "DoublePlay: Parallelizing Sequential Logging and Replay," *ACM Transactions on Computer Systems*, 2012.
- [6] D. Subhraveti and J. Nieh, "Record and Transplay: Partial Checkpointing for Replay Debugging across Heterogeneous Systems," in *ACM SIGMETRICS joint international conference on Measurement and modeling of computer systems*, 2011.
- [7] G. W. Dunlap, S. T. King, S. Cinar, M. A. Basrai, and P. M. Chen, "ReVirt: Enabling Intrusion Analysis through Virtual-machine Logging and Replay," *ACM SIGOPS Operating Systems Review*, 2002.
- [8] R. McNally, K. Yiu, D. Grove, and D. Gerhardy, "Fuzzing: The State of the Art," tech. rep., DTIC Document, 2012.
- [9] B. Liblit, A. Aiken, A. X. Zheng, and M. I. Jordan, "Bug Isolation via Remote Program Sampling," *ACM SIGPLAN Notices*, 2003.
- [10] P. Arumuga Nainar, T. Chen, J. Rosin, and B. Liblit, "Statistical Debugging Using Compound Boolean Predicates," in *International Symposium on Software Testing and Analysis, ACM*, 2007.
- [11] B. Liblit, M. Naik, A. X. Zheng, A. Aiken, and M. I. Jordan, "Scalable Statistical Bug Isolation," *ACM SIGPLAN Notices*, 2005.
- [12] H. Xue, Y. Chen, F. Yao, Y. Li, T. Lan, and G. Venkataramani, "SIMBER: Eliminating Redundant Memory Bound Checks via Statistical Inference," in *International Conference on ICT Systems Security and Privacy Protection-IFIP SEC, Springer*, 2017.
- [13] C. Cadar, D. Dunbar, and D. Engler, "KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs," in *USENIX Conference on Operating Systems Design and Implementation*, 2008.
- [14] I. Doudalis, J. Clause, G. Venkataramani, M. Prvulovic, and A. Orso, "Effective and Efficient Memory Protection Using Dynamic Tainting," *IEEE Transactions on Computers*, vol. 61, pp. 87–100, 2012.
- [15] S. Bucur, V. Ureche, C. Zamfir, and G. Candea, "Parallel Symbolic Execution for Automated Real-world Software Testing," in *European Conference on Computer Systems, ACM*, 2011.
- [16] G. Venkataramani, I. Doudalis, Y. Solihin, and M. Prvulovic, "MemTracker: An Accelerator for Memory Debugging and Monitoring," *ACM Transactions on Architecture and Code Optimization*, vol. 6, no. 2, pp. 5:1–5:33, 2009.
- [17] J. Shen, G. Venkataramani, and M. Prvulovic, "Tradeoffs in Fine-grained Heap Memory Protection," in *Workshop on Architectural and System Support for Improving Software Dependability, ACM*, 2006.
- [18] K.-K. Ma, K. Y. Phang, J. S. Foster, and M. Hicks, "Directed Symbolic Execution," in *International Static Analysis Symposium, Springer*, 2011.
- [19] O. Crameri, R. Bianchini, and W. Zwaenepoel, "Striking A New Balance between Program Instrumentation and Debugging Time," in *European Conference on Computer Systems*, 2011.
- [20] W. Jin and A. Orso, "BugRedux: Reproducing Field Failures for In-house Debugging," in *International Conference on Software Engineering, IEEE Press*, 2012.
- [21] D. Yuan, J. Zheng, S. Park, Y. Zhou, and S. Savage, "Improving Software Diagnosability via Log Enhancement," *ACM Transactions on Computer Systems*, vol. 30, no. 1, pp. 4:1–4:28, 2012.
- [22] D. Yuan, S. Park, P. Huang, Y. Liu, M. M. Lee, X. Tang, Y. Zhou, and S. Savage, "Be Conservative: Enhancing Failure Diagnosis with Proactive Logging," in *USENIX Conference on Operating Systems Design and Implementation*, 2012.
- [23] ACME Lab, "Thttpd." http://www.acme.com/software/thttpd/.
- [24] S. Lu, Z. Li, F. Qin, L. Tan, P. Zhou, and Y. Zhou, "BugBench: A Benchmark for Evaluating Bug Detection Tools," in *Workshop on the Evaluation of Software Defect Detection Tools*, 2005.
- [25] NIST, "IARPA STONESOUP Phase 3." https://samate.nist.gov/SARD/testsuites.php.
- [26] J.-C. Laprie, "Dependable Computing: Concepts, Limits, Challenges," in *International Symposium On Fault-Tolerant Computing*, 1995.
- [27] E. Buchanan, R. Roemer, H. Shacham, and S. Savage, "When Good Instructions go bad: Generalizing Return-oriented Programming to RISC," in *ACM SIGSAC Conference on Computer and Communications Security*, 2008.
- [28] CVE, "Vulnerability of thttpd in defang function." http://www.cvedetails.com/cve/2003-0899.
- [29] Y. Zheng and X. Zhang, "Path Sensitive Static Analysis of Web Applications for Remote Code Execution Vulnerability Detection," in *International Conference on Software Engineering, IEEE*, 2013.
- [30] Y. Li, F. Yao, T. Lan, and G. Venkataramani, "POSTER: Semantics-Aware Rule Recommendation and Enforcement for Event Paths," in *International Conference on Security and Privacy in Communication Systems, Springer*, 2015.
- [31] Y. Li, F. Yao, T. Lan, and G. Venkataramani, "SARRE: Semantics-Aware Rule Recommendation and Enforcement for Event Paths on Android," *IEEE Transactions on Information Forensics and Security*, vol. 11, no. 12, pp. 2748–2762, 2016.
- [32] R. Agrawal and R. Srikant, "Fast Algorithms for Mining Association Rules," in *International Conference on Very Large Data Bases*, 1994.
- [33] N. Nethercote and J. Seward, "Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation," *ACM Sigplan notices*, vol. 42, no. 6, pp. 89–100, 2007.
- [34] P. J. Guo, "A Scalable Mixed-level Approach to Dynamic Analysis of C and C++ Programs," Master’s thesis, MIT, 2006.
- [35] "Verisec Suite." https://se.cs.toronto.edu/index.php/Verisec Suite.
- [36] E. Wong, L. Zhang, S. Wang, T. Liu, and L. Tan, "DASE: Document-assisted Symbolic Execution for Improving Automated Software Testing," in *International Conference on Software Engineering, IEEE*, 2015.
- [37] C. Liu, X. Yan, L. Fei, J. Han, and S. P. Midkiff, "SOBER: Statistical Model-based Bug Localization," *ACM SIGSOFT Software Engineering Notes*, 2005.
- [38] S. Wang, F. Khomh, and Y. Zou, "Improving Bug Localization Using Correlations in Crash Reports," in *International Conference on Mining Software Repositories, IEEE*, 2013.
- [39] X. Shu, D. Yao, and N. Ramakrishnan, "Unearthing Stealthy Program Attacks Buried in Extremely Long Execution Paths," in *ACM SIGSAC Conference on Computer and Communications Security*, 2015.
- [40] K. Xu, K. Tian, D. D. Yao, and B. G. Ryder, "A Sharper Sense of Self: Probabilistic Reasoning of Program Behaviors for Anomaly Detection with Context Sensitivity," in *International Conference on Dependable Systems & Networks, IEEE/IFIP*, 2016.
- [41] Z. Gu, K. Pei, Q. Wang, L. Si, X. Zhang, and D. Xu, "LEAPS: Detecting Camouflaged Attacks with Statistical Learning Guided by Program Analysis," in *International Conference on Dependable Systems & Networks, IEEE/IFIP*, 2014.
- [42] G. Venkataramani, I. Doudalis, Y. Solihin, and M. Prvulovic, "FlexiTaint: A programmable Accelerator for Dynamic Taint Propagation," in *International Symposium on High Performance Computer Architecture, IEEE*, 2008.
- [43] D. Engler, D. Y. Chen, S. Hallem, A. Chou, and B. Chelf, "Bugs as Deviant Behavior: A General Approach to Inferring Errors in Systems Code," in *SIGOPS Operating Systems Review, ACM*, 2001.
- [44] D. Engler, B. Chelf, A. Chou, and S. Hallem, "Checking System Rules Using System-specific, Programmer-written Compiler Extensions," in *USENIX Conference on Operating Systems Design and Implementation*, 2000.
- [45] M. Baluda, G. Denaro, and M. Pezze, "Bidirectional Symbolic Analysis for Effective Branch Testing," *IEEE Transactions on Software Engineering*, 2015.
- [46] T. Xie, N. Tillmann, J. De Halleux, and W. Schulte, "Fitness-guided Path Exploration in Dynamic Symbolic Execution," in *International Conference on Dependable Systems & Networks, IEEE/IFIP*, 2009.
- [47] C. Zamfir and G. Candea, "Execution Synthesis: A Technique for Automated Software Debugging," in *European Conference on Computer Systems, ACM*, 2010.
- [48] A. Aquino, F. A. Bianchi, M. Chen, G. Denaro, and M. Pezzè, "Reusing Constraint Proofs in Program Analysis," in *International Symposium on Software Testing and Analysis, ACM*, 2015.
- [49] P. A. Abdulla, M. F. Atig, Y.-F. Chen, L. Holík, A. Rezine, P. Rümmer, and J. Stenman, "Norn: An SMT Solver for String Constraints," in *International Conference on Computer Aided Verification*, 2015.
- [50] J. D. Scott, P. Flener, and J. Pearson, "Constraint Solving on Bounded String Variables," in *International Conference on Integration of AI and OR Techniques in Constraint Programming, Springer*, 2015.
- [51] X. Xie, Y. Liu, W. Le, X. Li, and H. Chen, "S-looper: Automatic Summarization for Multipath String Loops," in *International Symposium on Software Testing and Analysis, ACM*, 2015.
- [52] P. Saxena, P. Poosankam, S. McCamant, and D. Song, "Loop-extended Symbolic Execution on Binary Programs," in *International Symposium on Software Testing and Analysis, ACM*, 2009.
- [53] J. Zhang, X. Chen, and X. Wang, "Path-oriented Test Data Generation Using Symbolic Execution and Constraint Solving Techniques," in *International Conference on Software Engineering and Formal Methods, IEEE*, 2004.
- [54] P. Dinges and G. Agha, "Targeted Test Input Generation Using Symbolic Concrete Backward Execution," in *International Conference on Automated Software Engineering, ACM/IEEE*, 2014.