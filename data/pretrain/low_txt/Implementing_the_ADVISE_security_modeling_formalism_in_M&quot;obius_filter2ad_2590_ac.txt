### Optimization Problem in ADVISE

In the ADVISE framework, an optimization problem must be solved for each state transition. The inclusion of the adversary's decision significantly impacts performance.

The time required to complete the adversary decision algorithm is directly proportional to the size of the State Lookahead Tree (SLAT). For typical models, calculating the SLAT size is challenging because the number of enabled attacks is not known a priori. However, for a general model with \( A \) attack steps, where each attack step has \( O \) or fewer outcomes and the adversary has a lookahead of \( L \), the upper bound of the SLAT size is \( A \times O \times L \). Solving for the adversary's decision is exponential in the lookahead.

### Caching to Improve Performance

The exponential algorithm is executed for each state the adversary enters during thousands of simulation iterations. However, the adversary’s decision is static with respect to the state. By caching the decision associated with a state, we avoid subsequent rebuilding of the SLAT, reducing the complexity of the decision algorithm from constructing the SLAT to a simple lookup. Using a cache allows us to quickly return the adversary’s decision if the adversary revisits a state.

Moreover, the cache can be utilized across multiple simulation iterations. To achieve metrics within the specified confidence interval, we run a given experiment thousands of times. Since the underlying model does not change between iterations, the cache remains valid. Depending on the model, we can achieve a 100% cache hit rate after the first few simulation iterations, as only the attack outcomes are probabilistic.

### SLAT Construction

The simplest method to execute the adversary decision algorithm is to construct the SLAT in a depth-first manner, leading to the \( A \times O \times L \) SLAT size. An improvement is to use a graph-based approach, storing intermediate results of the SLAT and reusing them if the same state is encountered again at the same lookahead level.

We accomplish this by caching the cost, detection probability, and expected payoff of the sub-tree for each state and lookahead level pair. This extends the depth-first exploration of the SLAT, significantly reducing its branching.

Because all intermediate values are cached, the size of the SLAT is bounded by the lookahead \( L \) times the size of the state space (\( L \times 2^{|A| \times |K| \times |G|} \)). Although this can still be very large, the sequential nature of attacks in typical models means the reachable state space is significantly smaller than the potential state space.

### Performance Data

Table I presents full execution timings for the base implementation (Base), when caching was used at the decision level (ADA Cache), when caching was used within the SLAT (SLAT Cache), and when both caches were used simultaneously (SLAT & ADA). The hyphen indicates that one simulation could not be included due to excessive execution time. These timings are generated from an easily extensible model, fully described in [7].

The model consists of eight accesses, eight attack steps, and seven goals. One access is designated as the initial access. Seven of the attack steps are set up sequentially, while the eighth attack step is always enabled. Each attack step has two outcomes: success and failure. The structure of the model provides the exact size of the SLAT, which is \( 4^N \), where \( N \) is the lookahead.

| Lookahead | Base    | SLAT Cache | ADA Cache | SLAT & ADA |
|-----------|---------|------------|-----------|-------------|
| 3         | 4.79    | 5.23       | 0.57      | 0.60        |
| 4         | 17.80   | 8.96       | 0.57      | 0.57        |
| 5         | 69.12   | 13.89      | 0.57      | 0.58        |
| 6         | 289.81  | 19.78      | 0.58      | 0.58        |
| 7         | 1134.02 | 26.99      | 0.60      | 0.57        |
| 8         | 4303.11 | 34.63      | 0.65      | 0.57        |
| 9         | 18455.96| 42.50      | 0.94      | 0.57        |
| 10        | -       | 50.64      | 1.94      | 0.56        |

The base algorithm scales poorly with respect to the lookahead. By caching within the SLAT, we achieve significant improvements. However, these computations are repeated for each of the 100,000 runs. Caching the adversary’s decision results in a single decision computation over all simulation iterations for each state. The times shown in the ADA Cache column approach the lowest timing bound due to simulation overhead. For large lookaheads, even a single decision calculation takes a significant amount of time unless optimized. When combining both methods, the execution time remains close to the simulation overhead threshold, even with large lookaheads.

### Related Tools

The ADVISE formalism implementation in M¨obius is not the only system security analysis tool. Researchers at George Mason University developed the Topological Vulnerability Analysis (TVA) tool [18] to generate attack graphs based on input from a network vulnerability scanner. They developed a database of vulnerabilities specifying preconditions and postconditions for each vulnerability. To create an attack graph, the system information from the scanner and the vulnerability information from the database are combined with information about the starting and goal states of the attacker. The analysis of the attack graph finds a minimum set of conditions such that the attacker can reach the attack goal.

By adding visualization capabilities, the researchers at George Mason University developed CAULDRON [19], now available as a commercial product. Researchers at MIT Lincoln Laboratory developed NetSPA [20] to generate attack graphs, assuming monotonicity and independence of the time required to execute an attack. To facilitate the analysis of attack graphs generated by NetSPA, an interactive visualization tool called GARNET [21] was developed. Further visualization improvements were implemented in NAVIGATOR [22], which overlays results on the network topology map.

Both CAULDRON and NAVIGATOR focus on the reachability of an attack goal, analyzing live systems based on scanner input and assuming no defensive response. In contrast, ADVISE simulates adversary behavior over time using attractiveness functions, provides the ability to model arbitrary vulnerabilities, analyzes real or yet unrealized systems, incorporates business and operational models, and provides predictive probabilistic security metrics.

### Conclusion

The main contribution of this paper is a detailed discussion of the implementation of the ADVISE formalism within the M¨obius tool and performance enhancements to solving ADVISE models via simulation. The ADVISE atomic model formalism implementation provides a graphical editor for constructing ADVISE models. Because we implemented the ADVISE atomic model to conform with the standardized M¨obius AFI, ADVISE models are fully integrated into the M¨obius tool. The addition of ADVISE to M¨obius allows users to easily model system security and adversary preferences and quickly compute relevant quantitative security metrics.

### Acknowledgments

This work was conducted, in part, with funding from the Department of Homeland Security under contract FA8750-09-C-0039 with the Air Force Research Laboratory and the Army Research Office under Award No. W911NF-09-1-0273. We particularly wish to thank Douglas Maughan, Director of the Cyber Security Division in the Homeland Security Advanced Research Projects Agency (HSARPA), within the Science and Technology (S&T) Directorate of the Department of Homeland Security (DHS).

The authors would like to acknowledge the contributions of current and former members of the M¨obius team and the work of outside contributors for the M¨obius project. The authors also thank Jenny Applequist for her editorial work.

### References

[1] D. D. Deavours, G. Clark, T. Courtney, D. Daly, S. Derisavi, J. M. Doyle, W. H. Sanders, and P. G. Webster, “The M¨obius framework and its implementation,” IEEE Transactions on Software Engineering, vol. 28, no. 10, pp. 956–969, Oct. 2002.
[2] J. M. Doyle, “Abstract model specification using the M¨obius modeling tool,” Master’s thesis, University of Illinois at Urbana-Champaign, Urbana, Illinois, January 2000.
[3] S. Derisavi, P. Kemper, W. H. Sanders, and T. Courtney, “The M¨obius state-level abstract functional interface,” Perf. Eval., vol. 54, no. 2, pp. 105–128, Oct. 2003.
[4] D. Daly, D. D. Deavours, J. M. Doyle, P. G. Webster, and W. H. Sanders, “M¨obius: An extensible tool for performance and dependability modeling,” in Computer Performance Evaluation / TOOLS, 2000, pp. 332–336.
[5] E. LeMay, W. Unkenholz, D. Parks, C. Muehrcke, K. Keefe, and W. H. Sanders, “Adversary-driven state-based system security evaluation,” in Proceedings of the 6th International Workshop on Security Measurements and Metrics (MetriSec 2010), Bolzano-Bozen, Italy, Sept. 15, 2010.
[6] E. LeMay, M. D. Ford, K. Keefe, W. H. Sanders, and C. Muehrcke, “Model-based security metrics using ADversary VIew Security Evaluation (ADVISE),” in Proceedings of the 8th International Conference on Quantitative Evaluation of SysTems (QEST 2011), Aachen, Germany, Sept. 5–8, 2011, pp. 191–200.
[7] E. LeMay, “Adversary-driven state-based system security evaluation,” Ph.D. dissertation, University of Illinois at Urbana-Champaign, Urbana, Illinois, 2011.
[8] D. Buckshaw, G. Parnell, W. Unkenholz, D. Parks, J. Wallner, and O. S. Saydjari, “Mission oriented risk and design analysis of critical information systems,” Military Operations Research, vol. 10, no. 2, pp. 19–38, 2005.
[9] S. R. Watson and D. M. Buede, Decision Synthesis: The Principles and Practice of Decision Analysis. Cambridge University Press, 1987.
[10] M. D. Ford, P. Buchholz, and W. H. Sanders, “State-based analysis in advise,” in Quantitative Evaluation of Systems (QEST), 2012 Ninth International Conference on, sept. 2012, pp. 148 –157.
[11] J. McAffer, J.-M. Lemieux, and C. Aniszczyk, Eclipse Rich Client Platform, 2nd ed. Addison-Wesley Professional, 2010.
[12] S. Northover and M. Wilson, SWT: The Standard Widget Toolkit, volume 1, 1st ed. Addison-Wesley Professional, 2004.
[13] R. Harris, The Definitive Guide to SWT and Jface, 2nd ed. Berkeley, CA, USA: Apress, 2007.
[14] D. Steinberg, F. Budinsky, M. Paternostro, and E. Merks, EMF: Eclipse Modeling Framework 2.0, 2nd ed. Addison-Wesley Professional, 2009.
[15] A. J. Stillman, “Model composition within the M¨obius modeling framework,” Master’s thesis, University of Illinois, 1999.
[16] W. H. Sanders and J. F. Meyer, “Stochastic activity networks: Formal definitions and concepts,” in Lectures on Formal Methods and Performance Analysis, ser. Lecture Notes in Computer Science, E. Brinksma, H. Hermanns, and J. P. Katoen, Eds., vol. 2090. Berg en Dal, The Netherlands: Springer, 2001, pp. 315–343.
[17] M¨obius Team, The M¨obius Manual, www.mobius.illinois.edu, University of Illinois at Urbana-Champaign, Urbana, IL, 2013. [Online]. Available: https://www.mobius.illinois.edu/manual/MobiusManual.pdf
[18] S. Jajodia, S. Noel, and B. O’Berry, “Topological analysis of network attack vulnerability,” in Managing Cyber Threats: Issues, Approaches and Challenges, V. Kumar, J. Srivastava, and A. Lazarevic, Eds. New York, NY: Springer, 2005, ch. 9.
[19] S. O’Hare, S. Noel, and K. Prole, “A graph-theoretic visualization approach to network risk analysis,” in Proceedings of the 5th International Workshop on Visualization for Computer Security (VizSec 2008), J. Goodall, G. Conti, and K.-L. Ma, Eds. Berlin, Germany: Springer-Verlag, September 2008, pp. 60–67.
[20] K. Ingols, R. Lippmann, and K. Piwowarski, “Practical attack graph generation for network defense,” in Proceedings of the 22nd Annual Computer Security Applications Conference. Washington, D.C.: IEEE Computer Society, 2006, pp. 121–130.
[21] L. Williams, R. Lippmann, and K. Ingols, “GARNET: A graphical attack graph and reachability network evaluation tool,” in Proceedings of the 5th International Workshop on Visualization for Computer Security (VizSec 2008), J. Goodall, G. Conti, and K.-L. Ma, Eds. Berlin, Germany: Springer-Verlag, 2008, pp. 44–59.
[22] M. Chu, K. Ingols, R. Lippmann, S. Webster, and S. Boyer, “Visualizing attack graphs, reachability, and trust relationships with NAVIGATOR,” in Proceedings of the Seventh International Symposium on Visualization for Cyber Security, 2010, pp. 22–23.