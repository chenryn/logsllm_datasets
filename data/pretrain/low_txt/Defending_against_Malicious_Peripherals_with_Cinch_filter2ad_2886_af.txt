### Protection Against Compromised Drivers
Cinch does not directly protect against compromised drivers, although it can sanitize driver inputs as described in §5.2. For this reason, the works discussed here complement and, in many cases, are compatible with Cinch.

### Secure Peripheral Interaction
Kells [82], USB Fingerprinting [76, 113], and the work by Wang and Stavrou [150] allow a USB device to verify the identity of a host. The first two works are defense mechanisms that prevent compromised operating systems from corrupting devices or propagating malware. In contrast, the latter is an attack primitive that enables a malicious device to selectively compromise hosts. Cinch's cryptographic overlay (§5.4) also allows a device to identify a host, as connections can be mutually authenticated (§6.3). However, the primary goal is to prevent eavesdropping and device masquerading.

SeRPEnT [151] and Bumpy [121] provide secure pathways for data to travel from devices through an untrusted host to a trusted, remote machine. SeRPEnT offers a similar abstraction to Cinch’s cryptographic overlay (§5.4), and its mechanism is comparable to Cinch’s cryptographic adapter. Bumpy, however, aims to enable remote attestation of user input rather than preventing masquerading attacks, and it relies on trusted hardware. Both SeRPEnT and Bumpy focus on wide area networking, whereas Cinch is designed for intra-host communication.

Zhou et al. [155] have developed a method for trusted applications running on untrusted operating systems to securely communicate with I/O devices. This is achieved via a trusted hypervisor that mediates access to hardware for both trusted and untrusted components. While Cinch also interacts with peripheral devices through an untrusted intermediary, the architecture, mechanisms, goals, and threat models differ significantly.

### Separation Kernels and Network Security
Two other research areas are particularly relevant: separation kernels and network security. Rushby’s separation kernel [129] is designed to make a computer’s components interact as if they were part of a distributed system. Modern implementations of this concept can be found in [81] and [122]. The foundational idea that networks are a useful abstraction for interposition is shared by Cinch. However, our goals and scenarios differ. The separation kernel was intended to be a small, formally verifiable kernel that provided separation through information flow control. In contrast, Cinch targets commodity operating systems and applies the conceptual framework of network security.

Network security itself has been a significant influence on Cinch, which borrows concepts such as firewalls, deep packet inspection, and virtual private networks. The recent trend towards Network Function Virtualization (NFV) [119, 138] also involves I/O virtualization, but NFV focuses on making middleboxes virtual for configurability and cost reasons.

### Summary and Conclusion
Cinch was motivated by the observation that hardware security is following a trajectory similar to that of network security. Initially, the Internet was a relatively small, mutually trusting environment, leading to a lack of emphasis on security within the infrastructure. As the number of Internet users grew, security became a critical issue. Similarly, commodity operating systems have few safeguards against misbehaving hardware, reflecting a time when peripheral devices could be trusted. With the rapid decline in barriers to producing plug-and-play peripherals, this trust model is no longer viable, and Cinch aims to address this new reality.

While individual mechanisms in Cinch have precedents in the literature, the overall architecture and synthesis are novel, to the best of our knowledge. Evaluation results show that the implementation is both pragmatic and surprisingly powerful. We believe that we have identified a good abstraction for the problem at hand.

It is important to note that Cinch does not uniquely enable any single piece of functionality (§5); rather, the abstraction makes it natural to develop and deploy what would otherwise require more effort under alternative solutions (§8).

Cinch is not comprehensive. It has limitations, as discussed earlier (§1, §4.2, §7.6), and some of its solutions require additional mechanisms. For example, providing authentication and privacy with Cinch requires certificates or pairing, and device modifications. However, these requirements are not overly burdensome, as demonstrated by our implementation of the adapter (§6.3). Additionally, Cinch’s compliance policy (§5.2) could be strengthened through formal verification.

Despite these issues, Cinch appears to improve upon the current status quo. While it is possible that widespread deployment of Cinch could escalate an arms race, driving attackers to find more esoteric vulnerabilities, security is inherently about building higher fences. The principles underlying Cinch could guide the future design of peripheral buses and drivers.

### Acknowledgements
This paper benefited from discussions with Andrew Baumann, Adam Belay, Sergio Benitez, Kevin Butler, Christian Huitema, Trammell Hudson, Ant Rowstron, Dennis Shasha, Jeremy Stribling, Ymir Vigfusson, and Junfeng Yang. The detailed comments from SOSP and USENIX Security reviewers were also instrumental in improving the work. This research was supported by NSF grants CNS-1055057, CNS-1423249, and CNS-1514422; AFOSR grant FA9550-15-1-0302; and ONR grant N00014-14-1-0469.

### References
[1] IEEE Standard for a High-Performance Serial Bus. http://standards.ieee.org/findstds/standard/1394-2008.html.
[2] Abstraction without Overhead: Traits in Rust. http://blog.rust-lang.org/2015/05/11/traits.html.
[3] Advanced Teensy Penetration Testing Payloads. https://www.offensive-security.com/offsec/advanced-teensy-penetration-testing-payloads/.
[4] AnywhereUSB/5 Integer Overflow. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4459.
[5] Apple MacBook Tech Specs. http://www.apple.com/macbook/specs/.
[6] BadUSB—Now with Do-It-Yourself Instructions. https://nakedsecurity.sophos.com/2014/10/06/badusb-now-with-do-it-yourself-instructions/.
[7] BadUSB: Big, Bad USB Security Problems Ahead. http://www.zdnet.com/article/badusb-big-bad-usb-security-problems-ahead/.
[8] BadUSB: What You Can Do About Undetectable Malware on a Flash Drive. http://www.pcworld.com/article/2840905/badusb-what-you-can-do-about-undetectable-malware-on-a-flash-drive.html.
[9] BeagleBone Black. http://beagleboard.org/BLACK.
[10] Chromebook Pixel. http://www.google.com/chromebook/pixel/.
[11] ClamAV. http://www.clamav.net/.
[12] Close Access SIGADS. https://www.documentcloud.org/documents/807030-ambassade.html#document/p1.
[13] CoCoSys Endpoint Protector. http://www.endpointprotector.com/products/endpoint_protector.
[14] Common Vulnerabilities and Exposures. https://cve.mitre.org.
[15] Comodo Endpoint Security Manager. https://www.comodo.com/business-enterprise/endpoint-protection/endpoint-security-manager.php.
[16] COTTONMOUTH-I. https://nsa.gov1.info/dni/nsa-ant-catalog/usb/index.html#COTTONMOUTH-I.
[17] COTTONMOUTH-II. https://nsa.gov1.info/dni/nsa-ant-catalog/usb/index.html#COTTONMOUTH-II.
[18] DeviceLock Data Loss Prevention Suite. http://www.devicelock.com/products/.
[19] DLL Planting Remote Code Execution Vulnerability. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-0096.
[20] Equation Group: Questions and Answers. https://securelist.com/files/2015/02/Equation_group_questions_and_answers.pdf.
[21] Equation: The Death Star of Malware Galaxy. https://securelist.com/blog/research/68750/equation-the-death-star-of-malware-galaxy/.
[22] GFI EndpointSecurity. http://www.gfi.com/products-and-solutions/network-security-solutions/gfi-endpointsecurity.
[23] grsecurity. https://grsecurity.net.
[24] Hackers Pierce Network with Jerry-Rigged Mouse. http://www.theregister.co.uk/2011/06/27/mission_impossible_mouse_attack/.
[25] Hubs—BadUSB Exposure. https://opensource.srlabs.de/projects/badusb/wiki/Hubs.
[26] Inception. https://github.com/carmaa/inception.
[27] Inside TAO: Documents Reveal Top NSA Hacking Unit. http://www.spiegel.de/international/world/the-nsa-uses-powerful-toolbox-in-effort-to-spy-on-global-networks-a-940969.html.
[28] Linux Audio Driver Dereferences Null Pointer Under Invalid Device. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-2184.
[29] Linux Default Configuration Does Not Warn User Before Enabling HID over USB. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0640.
[30] Linux Serial Driver Dereferences Null Pointer Under Device with No Bulk-In or Interrupt-In Endpoints. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-2782.
[31] Linux hid-picolcd_core.c Buffer Overflow. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3186.
[32] Linux Report_Fixup HID Functions Out-of-Bounds Write. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3184.
[33] Lumension Device Control. https://www.lumension.com/device-control-software/usb-security-protection.aspx.
[34] MatrixSSL Open Source Embedded SSL and TLS. http://www.matrixssl.org.
[35] McAfee Complete Data Protection. http://www.mcafee.com/us/products/complete-data-protection.aspx.
[36] NanoSSL—An SSL Library for Embedded Devices. http://www.mocana.com/iot-security/nanossl.
[37] Novell ZENworks Endpoint Security Management. https://www.novell.com/products/zenworks/endpointsecuritymanagement/.
[38] NSA Reportedly Installing Spyware on US-Made Hardware. http://www.cnet.com/news/nsa-reportedly-installing-spyware-on-us-made-hardware/.
[39] Only Half of USB Devices Have an Unpatchable Flaw, But No One Knows Which Half. http://www.wired.com/2014/11/badusb-only-affects-half-of-usbs/.
[40] OpenSSL. https://www.openssl.org.
[41] OS X Does Not Warn User Before Enabling HID over USB. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0639.
[42] OS X USB Hub Descriptor Memory Corruption. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-3723.
[43] Phision 2251-03 (2303) Custom Firmware & Existing Firmware Patches (BadUSB). https://github.com/adamcaudill/Psychson.
[44] QEMU usb_host_handle_control Function Buffer Overflow. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0297.
[45] Qubes OS Project. https://www.qubes-os.org.
[46] The Rust Programming Language. https://www.rust-lang.org.
[47] Snort.Org. https://www.snort.org.
[48] Sophos Endpoint Security and Control. http://www.sophos.com/en-us/support/documentation/endpoint-security-and-control-for-windows.aspx.
[49] Stunnel. http://www.stunnel.org.
[50] Symantec Endpoint Protection. http://www.symantec.com/endpoint-protection.
[51] SyncStop. http://syncstop.com.
[52] Teensy USB Development Board. https://www.pjrc.com/teensy.
[53] This Thumbdrive Hacks Computers. http://arstechnica.com/security/2014/07/this-thumbdrive-hacks-computers-badusb-exploit-makes-devices-turn-evil.
[54] Thunderbolt Technology. http://www.intel.com/content/dam/doc/technology-brief/thunderbolt-technology-brief.pdf.
[55] Trend Micro Enterprise Data Protection. http://www.trendmicro.com/us/enterprise/data-protection/endpoint.
[56] udev. http://www.freedesktop.org/software/systemd/man/udev.html.
[57] Universal Serial Bus Revision 2.0 Specification. http://www.usb.org/developers/docs/usb20_docs/usb_20_031815.zip.
[58] Universal Serial Bus Revision 3.1 Specification. http://www.usb.org/developers/docs/usb_31_031815.zip.
[59] USB Device Class Specifications. http://www.usb.org/developers/docs/devclass_docs.
[60] USB over Network. http://www.usb-over-network.com.
[61] USB Rubber Ducky. http://usbrubberducky.com.
[62] Using and Managing USB Devices. Qubes OS Project. https://www.qubes-os.org/doc/usb.
[63] Windows Crafted .LNK or .PIF Arbitrary Code Execution. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2568.
[64] Windows Disk Partition Driver Elevation of Privilege Vulnerability. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-4115.
[65] Windows Does Not Warn User Before Enabling HID over USB. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0638.
[66] wolfSSL. http://www.yassl.com.
[67] Bluetooth User Interface Flow Diagrams for Bluetooth Secure Simple Pairing Devices. Technical report, Bluetooth Usability Expert Group, Sept. 2007.
[68] AMD-V Nested Paging. Technical report, AMD, July 2008.
[69] Cherry MX Series Keyswitch, 2014. http://cherrycorp.com/product/mx-series.
[70] Intel Virtualization Technology for Directed I/O, Oct. 2014. http://www.intel.com/content/www./us/en/embeded/technology/virtualization/vt-directed-io-spec.html.
[71] AMD I/O Virtualization Technology (IOMMU) Specification, Feb. 2015. http://support.amd.com/TechDocs/48882_IOMMU.pdf.
[72] TURNIPSCHOOL - An Open Source Reimagining of