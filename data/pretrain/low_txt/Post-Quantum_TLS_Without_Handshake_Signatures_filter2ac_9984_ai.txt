### References
1. **Draft Document on Hybrid Design for TLS**
   - Internet Engineering Task Force (IETF). (n.d.). *Hybrid Design for TLS*. Work in Progress. Retrieved from: https://datatracker.ietf.org/doc/html/draft-ietf-tls-hybrid-design-00

2. **Open Quantum Safe Project**
   - Open Quantum Safe. (n.d.). *Open Quantum Safe*. Retrieved from: https://openquantumsafe.org

3. **Quantum-Safe Hybrid Key Exchange for TLS 1.3**
   - Whyte, W., Zhang, Z., Fluhrer, S., & Garcia-Morchon, O. (2017). *Quantum-Safe Hybrid (QSH) Key Exchange for Transport Layer Security (TLS) version 1.3*. Internet-Draft draft-whyte-qsh-tls13-06. Internet Engineering Task Force (IETF). Work in Progress. Retrieved from: https://datatracker.ietf.org/doc/html/draft-whyte-qsh-tls13-06

4. **CacheBleed: A Timing Attack on OpenSSL Constant-Time RSA**
   - Yarom, Y., Genkin, D., & Heninger, N. (2017). *CacheBleed: A timing attack on OpenSSL constant-time RSA*. Journal of Cryptographic Engineering, 7(2), 99–112. DOI: https://doi.org/10.1007/s13389-017-0152-y

5. **NTRUEncrypt**
   - Zhang, Z., Chen, C., Hoffstein, J., Whyte, W., Schanck, J. M., Hulsing, A., Rijneveld, J., Schwabe, P., & Danba, O. (2019). *NTRUEncrypt*. Technical Report. National Institute of Standards and Technology (NIST). Available at: https://csrc.nist.gov/projects/post-quantum-cryptography/round-2-submissions

6. **Tighter Security Proofs for Post-Quantum Key Encapsulation Mechanism in the Multi-Challenge Setting**
   - Zhang, Z., Wei, P., & Xue, H. (2019). *Tighter Security Proofs for Post-quantum Key Encapsulation Mechanism in the Multi-challenge Setting*. In CANS 2019 (LNCS, Vol. 11829), edited by Mu, Y., Deng, R. H., & Huang, X. Springer, Heidelberg, pp. 141–160. DOI: https://doi.org/10.1007/978-3-030-31578-8_8

### Cryptographic Definitions

**KEMTLS** relies on several cryptographic primitives and standard security definitions.

#### Definition A.1: Hash Function and Collision Resistance
A hash function \( H : \{0, 1\}^* \to \{0, 1\}^\lambda \) maps arbitrary-length messages \( m \in \{0, 1\}^* \) to a hash value \( H(m) \in \{0, 1\}^\lambda \) of fixed length \( \lambda \in \mathbb{N} \). The collision resistance of a hash function \( H \) measures the ability of an adversary \( A \) to find two distinct messages that hash to the same output:
\[ \text{Adv}_{\text{COLL}}^{H,A} = \Pr \left[ (m, m') \xleftarrow{\$} A : (m \neq m') \land (H(m) = H(m')) \right] \]

#### Definition A.2: Pseudorandom Function (PRF)
A pseudorandom function \( \text{PRF} : K \times L \to \{0, 1\}^\lambda \) maps a key \( k \in K \) and a label \( \ell \in L \) to an output of fixed length in \( \{0, 1\}^\lambda \). The PRF-security of a pseudorandom function \( \text{PRF} \) measures the ability of an adversary \( A \) to distinguish the output of \( \text{PRF} \) from random:
\[ \text{Adv}_{\text{PRF-sec}}^{\text{PRF},A} = \left| \Pr \left[ k \xleftarrow{\$} K : A_{\text{PRF}(k, \cdot)} \Rightarrow 1 \right] - \Pr \left[ A_R(\cdot) \Rightarrow 1 \right] \right| \]
where \( R : L \to \{0, 1\}^\lambda \) is a truly random function.

A pseudorandom function satisfies dual-PRF-security [4] if it is a pseudorandom function with respect to either of its inputs \( k \) or \( \ell \) being the key, i.e., if both \( \text{PRF} \) and \( \text{PRF}' : (x, y) \mapsto \text{PRF}(y, x) \) have PRF-security.

#### Definition A.3: Message Authentication Code (MAC) and Existential Unforgeability under Chosen Message Attack (EUF-CMA)
A message authentication code \( \text{MAC} : K \times \{0, 1\}^* \to \{0, 1\}^\lambda \) maps a key \( k \in K \) and a message \( m \in \{0, 1\}^* \) to an authentication tag of fixed length in \( \{0, 1\}^\lambda \). The existential unforgeability under chosen message attack (EUF-CMA) measures the ability to forge an authentication tag on a new message, given access to a tag-generation oracle, as shown in Figure 5:
\[ \text{Adv}_{\text{EUF-CMA}}^{\text{MAC},A} = \Pr \left[ G_{\text{EUF-CMA}}^{\text{MAC},A} \Rightarrow 1 \right] \]

#### Key Encapsulation Mechanisms (KEMs)
A key encapsulation mechanism \( \text{KEM} \) is \( \delta \)-correct [53] if:
\[ \Pr \left[ \text{KEM.Decapsulate}(sk, ct) \neq ss \mid (pk, sk) \xleftarrow{\$} \text{KEM.Keygen}; (ss, ct) \xleftarrow{\$} \text{KEM.Encapsulate}(pk) \right] \leq \delta \]

The IND-CPA, IND-1CCA, and IND-CCA experiments for KEMs are shown in Figure 6. The advantage of \( A \) in breaking IND-atk security of KEM, for \( \text{atk} \in \{\text{CPA, 1CCA, CCA}\} \), is:
\[ \text{Adv}_{\text{IND-atk}}^{\text{KEM},A} = \left| \Pr \left[ G_{\text{IND-atk}}^{\text{KEM},A} \Rightarrow 1 \right] - \frac{1}{2} \right| \]

### Reductionist Security Analysis of KEMTLS

Our approach adapts the security model and reductionist security analysis of the TLS 1.3 handshake by Dowling, Fischlin, Günther, and Stebila [38, 39] for KEMTLS.

#### B.1 Model Syntax
- **Set U**: Denotes the set of identities of honest participants in the system.
- **Identities \( S \in U \)**: Can be associated with a certified long-term KEM public key \( pk_S \) and corresponding private key \( sk_S \).
- **Sessions**: Each participant can run multiple instances of the protocol, each called a session. Sessions are uniquely identified by some administrative label \( \pi \in U \times \mathbb{N} \), which is a pair \( (U, n) \) identifying the \( n \)-th local session of \( U \).

Each session consists of multiple stages, run sequentially with shared state. The session-specific information includes:
- **id**: Identity of the session owner.
- **pid**: Identity of the intended communication partner (may be unknown, indicated by '*').
- **role**: Role of the participant (initiator or responder).
- **status**: Status of each stage key (initially set to \( (\text{running}, \bot \times 5) \)).
- **stage**: Last accepted stage (initially set to 0).
- **sid**: Session identifier in stage \( i \) (initially set to \( \bot \)).
- **cid**: Contributive identifier in stage \( i \) (initially set to \( \bot \)).
- **key**: Key established in stage \( i \) (initially set to \( \bot \)).
- **revealed**: Records if the \( i \)-th-stage key has been revealed by the adversary (initially all false).
- **tested**: Records if key \( i \) has been tested by the adversary (initially all false).
- **auth**: Indicates by which stage a stage key is considered to be explicitly authenticated.
- **FS**: For \( j \geq i \), \( \text{FS}_{i,j} \) indicates the type of forward secrecy expected of stage key \( i \), assuming stage \( j \) has accepted.
- **use**: Indicates if a stage-\( i \) key is used internally in the key exchange protocol.

For a session identified by \( \pi \), we may write \( \pi .X \) as shorthand to refer to that session’s element \( X \).

#### B.2 Adversary Interaction
Following DFGS [38, 39], our two security properties, Match security and Multi-Stage security, take place within the same adversary interaction model. The adversary \( A \) controls the communication between all parties and can intercept, inject, or drop any message. Some combinations of queries are restricted to ensure appropriate security modeling.

- **NewSession(\( U, V, \text{role} \))**: Creates a new session \( \pi \) with owner \( \pi .\text{id} \leftarrow U \), intended peer \( \pi .\text{pid} \leftarrow V \), and role \( \pi .\text{role} \leftarrow \text{role} \).
- **Send(\( \pi, m \))**: Sends message \( m \) to session \( \pi \). If \( \pi \) has not been created, return \( \bot \). Otherwise, Send runs the protocol on behalf of \( \pi .\text{id} \).

Special handling of acceptance: The adversary may not test any keys that have already been used. When any key is accepted, Send will pause execution and return "accepted" to the adversary. The adversary may choose to test the session or continue other operations.

- **Reveal(\( \pi, i \))**: Reveals the session key \( \pi .\text{key}_i \) to the adversary and records \( \pi .\text{revealed}_i \leftarrow \text{true} \).
- **Corrupt(\( U \))**: Provides the adversary with the long-term secret key \( sk_U \) of \( U \).
- **Test(\( \pi, i \))**: Challenges the adversary on the indistinguishability of stage key \( \pi .\text{key}_i \). If the stage has not accepted, the key has already been tested, or there exists a partner \( \pi' \) to \( \pi \) at stage \( i \) such that \( \pi'.\text{tested}_i = \text{true} \), return \( \bot \).

#### B.3 Specifics of KEMTLS in the Model
For the proofs in the subsequent subsections, KEMTLS is specified in Figure 4 with \( M = 6 \) stages. The session identifiers \( \text{sid}_i \) and contributive identifiers \( \text{cid}_i \) for each stage are defined as follows:

- **Session Identifiers**:
  - \( \text{sid}_1 = (\text{"CHTS"}, \text{ClientHello} \ldots \text{ServerHello}) \)
  - \( \text{sid}_2 = (\text{"SHTS"}, \text{ClientHello} \ldots \text{ServerHello}) \)
  - \( \text{sid}_3 = (\text{"CAHTS"}, \text{ClientHello} \ldots \text{ClientKemCiphertext}) \)
  - \( \text{sid}_4 = (\text{"SAHTS"}, \text{ClientHello} \ldots \text{ClientKemCiphertext}) \)
  - \( \text{sid}_5 = (\text{"CATS"}, \text{ClientHello} \ldots \text{ClientFinished}) \)
  - \( \text{sid}_6 = (\text{"SATS"}, \text{ClientHello} \ldots \text{ServerFinished}) \)

- **Contributive Identifiers**:
  - In stage \( i = 1 \), the client and server set \( \text{cid}_1 = (\text{"CHTS"}, \text{ClientHello}) \) upon sending (client) or receiving (server) the ClientHello message. When they next send (server) or receive (client) the ServerHello response, they update this to \( \text{cid}_1 = \text{sid}_1 \). All other contributive identifiers are set to \( \text{cid}_i = \text{sid}_i \) whenever \( \text{sid}_i \) is set.

- **Authentication and Use**:
  - Every client session of KEMTLS uses \( \text{auth} = (6, 6, 6, 6, 6, 6) \), \( \text{use} = (\text{internal} \times 4, \text{external} \times 2) \).
  - Every server session of KEMTLS uses \( \text{auth} = (\infty \times 6) \), \( \text{use} = (\text{internal} \times 4, \text{external} \times 2) \), and \( \text{FS}_{i,j} = \text{wfs1} \) for all \( j \geq i \).

#### B.4 Match Security
Match security models sound behavior of session matching, ensuring that, for honest sessions, the session identifier \( \pi .\text{sid} \) matches the partnered \( \pi'.\text{sid} \).

**Definition B.1: Match Security**
- **Forward Secrecy (FS)**:
  - \( \text{FS} \) matrix:
    \[
    \begin{array}{cccccc}
    \text{wfs1} & \text{wfs1} & \text{wfs1} & \text{wfs1} & \text{wfs1} & \text{wfs1} \\
    \text{wfs1} & \text{wfs1} & \text{wfs1} & \text{wfs1} & \text{wfs1} & \text{wfs1} \\
    \text{wfs2} & \text{wfs2} & \text{wfs2} & \text{wfs2} & \text{wfs2} & \text{wfs2} \\
    \text{wfs2} & \text{wfs2} & \text{wfs2} & \text{wfs2} & \text{wfs2} & \text{wfs2} \\
    \text{wfs2} & \text{wfs2} & \text{wfs2} & \text{wfs2} & \text{wfs2} & \text{wfs2} \\
    \text{fs} & \text{fs} & \text{fs} & \text{fs} & \text{fs} & \text{fs} \\
    \end{array}
    \]

This document provides a clear and structured overview of the cryptographic definitions and the security analysis of KEMTLS, ensuring that the content is professional and coherent.