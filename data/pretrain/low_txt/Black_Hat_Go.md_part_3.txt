# Running the Program

## Summary
12. **Windows System Interaction and Analysis**
   - The Windows API’s `OpenProcess()` Function
   - The `unsafe.Pointer` and `uintptr` Types
   - Performing Process Injection with the `syscall` Package
   - Defining Windows DLLs and Assigning Variables
   - Obtaining a Process Token with the `OpenProcess` Windows API
   - Manipulating Memory with the `VirtualAllocEx` Windows API
   - Writing to Memory with the `WriteProcessMemory` Windows API
   - Finding `LoadLibraryA` with the `GetProcAddress` Windows API
   - Executing the Malicious DLL Using the `CreateRemoteThread` Windows API
   - Verifying Injection with the `WaitForSingleObject` Windows API
   - Cleaning Up with the `VirtualFreeEx` Windows API
   - Additional Exercises

13. **The Portable Executable File**
   - Understanding the PE File Format
   - Writing a PE Parser
   - Additional Exercises

14. **Using C with Go**
   - Installing a C Windows Toolchain
   - Creating a Message Box Using C and the Windows API
   - Building Go into C
   - Summary

15. **Hiding Data with Steganography**
   - Exploring the PNG Format
     - The Header
     - The Chunk Sequence
     - Reading Image Byte Data
     - Reading the Header Data
     - Reading the Chunk Sequence
   - Writing Image Byte Data to Implant a Payload
     - Locating a Chunk Offset
     - Writing Bytes with the `ProcessImage()` Method
   - Encoding and Decoding Image Byte Data Using XOR
   - Summary
   - Additional Exercises

16. **Building a Command-and-Control RAT (Remote Access Trojan)**
   - Getting Started
   - Installing Protocol Buffers for Defining a gRPC API
   - Creating the Project Workspace
   - Defining and Building the gRPC API
   - Creating the Server
   - Implementing the Protocol Interface
   - Writing the `main()` Function
   - Creating the Client Implant
   - Building the Admin Component
   - Running the RAT
   - Improving the RAT
     - Encrypt Your Communications
     - Handle Connection Disruptions
     - Register the Implants
     - Add Database Persistence
     - Support Multiple Implants
     - Add Implant Functionality
     - Chain Operating System Commands
     - Enhance the Implant’s Authenticity and Practice Good OPSEC
     - Add ASCII Art
   - Summary

## Index
- Foreword
- Acknowledgments
- Introduction
- Who This Book Is For
- What This Book Isn’t
- Why Use Go for Hacking?
- Why You Might Not Love Go
- Chapter Overview

---

## Foreword
Programming languages have always had a significant impact on information security. The design constraints, standard libraries, and protocol implementations available within each language define the attack surface of any application built on them. Security tooling is no different; the right language can simplify complex tasks and make incredibly difficult ones trivial. Go's cross-platform support, single-binary output, concurrency features, and vast ecosystem make it an excellent choice for security tool development. Go is rewriting the rules for both secure application development and the creation of security tools, enabling faster, safer, and more portable tooling.

Over the 15 years I worked on the Metasploit Framework, the project went through two full rewrites, changed languages from Perl to Ruby, and now supports a range of multilingual modules, extensions, and payloads. These changes reflect the constantly evolving nature of software development; in order to keep up in security, your tools need to adapt, and using the right language can save an enormous amount of time. However, just like Ruby, Go didn't become ubiquitous overnight. It takes a leap of faith to build anything of value using a new language, given the uncertainties of the ecosystem and the sheer amount of effort needed to accomplish common tasks before the standard libraries catch up.

The authors of "Black Hat Go" are pioneers in Go security tool development, responsible for some of the earliest open-source Go projects, including BlackSheepWall, Lair Framework, and sipbrute, among many others. These projects serve as excellent examples of what can be built using the language. The authors are just as comfortable building software as tearing it apart, and this book is a great example of their ability to combine these skills.

"Black Hat Go" provides everything necessary to get started with Go development in the security space without getting bogged down in lesser-used language features. Whether you want to write a fast network scanner, an evil HTTP proxy, or a cross-platform command-and-control framework, this book is for you. If you are a seasoned programmer looking for insight into security tool development, this book will introduce the concepts and trade-offs that hackers of all stripes consider when writing tools. Veteran Go developers who are interested in security may learn a lot from the approaches taken here, as building tools to attack other software requires a different mindset than typical application development. Your design trade-offs will likely be substantially different when your goals include bypassing security controls and evading detection.

If you already work in offensive security, this book will help you build utilities that are light-years faster than existing solutions. If you work on the defense side or in incident response, this book will give you an idea of how to analyze and defend against malware written in the Go language.

Happy hacking!

**HD Moore**
- Founder of the Metasploit Project and the Critical Research Corporation
- VP of Research and Development at Atredis Partners

---

## Acknowledgments
This book would not be possible without the creation of the Go programming language by Robert Griesemer, Rob Pike, and Ken Thompson. These individuals and the entire core Go development team consistently contribute useful updates with each release. We would have never written this book had the language not been so easy and fun to learn and use.

We would also like to thank the team at No Starch Press: Laurel, Frances, Bill, Annie, Barbara, and everyone else we interacted with. You all guided us through the uncharted territory of writing our first book. Life happens—new families, new jobs—and all the while, you’ve been patient but still pushed us to complete this book. The entire No Starch Press team has been a pleasure to work with on this project.

**Chris Patten**
- I would like to thank Jen for all her support, encouragement, and for keeping life moving forward while I was locked away in my office nights and weekends, working on this never-ending book. Jen, you helped me more than you know, and your constant words of encouragement helped make this a reality. I am sincerely grateful to have you in my life.
- I must thank “T” (my canine quadra-pet) for holding the floor down in my office while I hacked away and reminding me that “outside” is a real place I should visit.
- Lastly, and close to my heart, I want to dedicate this book to my pups, Luna and Annie, who passed while I was writing this book. You girls were and are everything to me, and this book will always be a reminder of my love for you both.

**Dan Kottmann**
- I would like to extend a sincere thank you to my wife and best friend, Katie, for your constant support, encouragement, and belief in me. Not a day goes by when I’m not grateful for everything you do for me and our family.
- I’d like to thank Brooks and Subs for giving me reason to work so hard. There is no better job than being your father.
- And to the best “Office Hounds” a guy could ask for—Leo (RIP), Arlo, Murphy, and even Howie (yes, Howie too)—you’ve systematically destroyed my house and periodically made me question my life choices, but your presence and companionship mean the world to me. I’ll give each of you a signed copy of this book to chew on.

**Tom Steele**
- Thank you to the love of my life, Jackie, for your love and encouragement; nothing I do would be possible without your support and everything you do for our family.
- Thank you to my friends and colleagues at Atredis Partners and to anyone I’ve shared a shell with in the past. I am where I am because of you.
- Thank you to my mentors and friends who have believed in me since day one. There are too many of you to name; I am grateful for the incredible people in my life.
- Thank you, Mom, for putting me in computer classes (these were a thing). Looking back, those were a complete waste of time, and I spent most of the time playing Myst, but it sparked an interest (I miss the 90s).
- Most importantly, thank you to my Savior, Jesus Christ.

It was a long road to get here—almost three years. A lot has happened to get to this point, and here we are, finally. We sincerely appreciate the early feedback we received from friends, colleagues, family, and early-release readers. For your patience, dear reader, thank you so, so very much; we are truly grateful and hope you enjoy this book just as much as we enjoyed writing it. All the best to you! Now, go create some amazing code!

---

## Introduction
For about six years, the three of us led one of North America’s largest dedicated penetration-testing consulting practices. As principal consultants, we executed technical project work, including network penetration tests, on behalf of our clients. We also spearheaded the development of better tools, processes, and methodologies. At some point, we adopted Go as one of our primary development languages.

Go provides the best features of other programming languages, striking a balance between performance, safety, and user-friendliness. Soon, we defaulted to it as our language of choice when developing tools. Eventually, we even found ourselves acting as advocates of the language, pushing for our colleagues in the security industry to try it. We felt the benefits of Go were at least worthy of consideration.

In this book, we’ll take you on a journey through the Go programming language from the perspective of security practitioners and hackers. Unlike other hacking books, we won’t just show you how to automate third-party or commercial tools (although we’ll touch on that a little). Instead, we’ll delve into practical and diverse topics that approach a specific problem, protocol, or tactic useful to adversaries. We’ll cover TCP, HTTP, and DNS communications, interact with Metasploit and Shodan, search filesystems and databases, port exploits from other languages to Go, write the core functions of an SMB client, attack Windows, cross-compile binaries, mess with crypto, call C libraries, interact with the Windows API, and much, much more. It’s ambitious! We’d better begin...

### Who This Book Is For
This book is for anyone who wants to learn how to develop their own hacking tools using Go. Throughout our professional careers, and particularly as consultants, we’ve advocated for programming as a fundamental skill for penetration testers and security professionals. Specifically, the ability to code enhances your understanding of how software works and how it can be broken. Also, if you’ve walked in a developer’s shoes, you’ll gain a more holistic appreciation for the challenges they face in securing software, and you can use your personal experience to better recommend mitigations, eliminate false positives, and locate obscure vulnerabilities.

Coding often forces you to interact with third-party libraries and various application stacks and frameworks. For many people (us included), it’s hands-on experience and tinkering that leads to the greatest personal development.

To get the most out of this book, we encourage you to clone the book’s official code repository so you have all the working examples we’ll discuss. Find the examples at [https://github.com/blackhat-go/bhg/](https://github.com/blackhat-go/bhg/).

### What This Book Isn’t
This book is not an introduction to Go programming in general but an introduction to using Go for developing security tools. We are hackers and then coders—in that order. None of us have ever been software engineers. This means that, as hackers, we put a premium on function over elegance. In many instances, we’ve opted to code as hackers do, disregarding some of the idioms or best practices of software design. As consultants, time is always scarce; developing simpler code is often faster and, therefore, preferable over elegance. When you need to quickly create a solution to a problem, style concerns come secondary.

This is bound to anger Go purists, who will likely tweet at us that we don’t gracefully handle all error conditions, that our examples could be optimized, or that better constructs or methods are available to produce the desired results. We’re not, in most cases, concerned with teaching you the best, the most elegant, or 100 percent idiomatic solutions, unless doing so will concretely benefit the end result. Although we’ll briefly cover the language syntax, we do so purely to establish a baseline foundation upon which we can build. After all, this isn’t "Learning to Program Elegantly with Go"—this is "Black Hat Go."

### Why Use Go for Hacking?
Prior to Go, you could prioritize ease of use by using dynamically typed languages—such as Python, Ruby, or PHP—at the expense of performance and safety. Alternatively, you could choose a statically typed language, like C or C++, that offers high performance and safety but isn’t very user-friendly. Go is stripped of much of the ugliness of C, its primary ancestor, making development more user-friendly. At the same time, it’s a statically typed language that produces syntax errors at compile time, increasing your assurance that your code will actually run safely. As it’s compiled, it performs more optimally than interpreted languages and was designed with multicore computing considerations, making concurrent programming a breeze.

These reasons for using Go don’t concern security practitioners specifically. However, many of the language’s features are particularly useful for hackers and adversaries:

- **Clean package management system**: Go’s package management solution is elegant and integrated directly with Go’s tooling. Through the use of the `go` binary, you can easily download, compile, and install packages and dependencies, which makes consuming third-party libraries simple and generally free from conflict.
- **Cross-compilation**: One of the best features in Go is its ability to cross-compile executables. So long as your code doesn’t interact with raw C, you can easily write code on your Linux or Mac system but compile the code in a Windows-friendly, Portable Executable format.
- **Rich standard library**: Time spent developing in other languages has helped us appreciate the extent of Go’s standard library. Many modern languages lack the standard libraries required to perform many common tasks such as crypto, network communications, database connectivity, and data encoding (JSON, XML, Base64, hex). Go includes many of these critical functions and libraries as part of the language’s standard packaging, reducing the effort necessary to correctly set up your development environment or to call the functions.
- **Concurrency**: Unlike languages that have been around longer, Go was released around the same time as the initial mainstream multicore processors became available. For this reason, Go’s concurrency patterns and performance optimizations are tuned specifically to this model.

### Why You Might Not Love Go
We recognize that Go isn’t a perfect solution to every problem. Here are some of the downsides of the language:

- **Binary size**: When you compile a binary in Go, the binary is likely to be multiple megabytes in size. Of course, you can strip debugging symbols and use a packer to help reduce the size, but these steps require attention. This can be a drawback, particularly for security practitioners who need to attach a binary to an email, host it on a shared filesystem, or transfer it over a network.
- **Verbosity**: While Go is less verbose than languages like C#, Java, or even C/C++, you still might find that the simplistic language construct forces you to be overly expressive for things like lists (called slices in Go), processing, looping, or error handling. A Python one-liner might easily become a three-liner in Go.

### Chapter Overview
The first chapter of this book covers a basic overview of Go’s syntax and philosophy. Next, we start to explore examples that you can leverage for tool development, including various common network protocols like HTTP, DNS, and SMB. We then dig into various tactics and problems that we’ve encountered as penetration testers, addressing topics including data pilfering, packet sniffing, and exploit development. Finally, we take a brief step back to talk about how you can create dynamic, pluggable tools before diving into crypto, attacking Microsoft Windows, and implementing steganography.

In many cases, there will be opportunities to extend the tools we show you to meet your specific objectives. Although we present robust examples throughout, our real intent is to provide you with the knowledge and foundation through which you can extend or rework the examples to meet your goals. We want to teach you to fish.

Before you continue with anything in this book, please note that we—the authors and publisher—have created this content for legal usage only. We won’t accept any liability for the nefarious or illegal things you choose to do. All the content here is for educational purposes only; do not perform any penetration-testing activities against systems or applications without authorized consent.

The sections that follow provide a brief overview of each chapter.

#### Chapter 1: Go Fundamentals
- **Goal**: Introduce the fundamentals of the Go programming language and provide a foundation necessary for understanding the concepts within this book.
- **Content**: An abridged review of basic Go syntax and idioms, discussion of the Go ecosystem, including supporting tools, IDEs, dependency management, and more.
- **Outcome**: Readers new to the programming language can expect to learn the bare necessities of Go, which will allow them to, hopefully, comprehend, implement, and extend the examples in later chapters.

#### Chapter 2: TCP, Scanners, and Proxies
- **Introduction**: Basic Go concepts and concurrency primitives and patterns, input/output (I/O), and the use of interfaces through practical TCP applications.
- **Content**:
  - Creating a simple TCP port scanner that scans a list of ports using parsed command-line options.
  - Improving the efficiency and speed of the port scanner by introducing concurrent functions.
  - Building a TCP proxy—a port forwarder—starting with basic examples and refining the code to create a more reliable solution.
  - Re-creating Netcat’s “gaping security hole” feature in Go, teaching you how to run operating system commands while manipulating stdin and stdout and redirecting them over TCP.

#### Chapter 3: HTTP Clients and Remote Interaction with Tools
- **Introduction**: HTTP clients are a critical component to interacting with modern web server architectures.
- **Content**:
  - Creating the HTTP clients necessary to perform a variety of common web interactions.
  - Handling a variety of formats to interact with Shodan and Metasploit.
  - Demonstrating how to work with search engines, using them to scrape and parse document metadata to extract information useful for organizational profiling activities.

#### Chapter 4: HTTP Servers, Routing, and Middleware
- **Introduction**: Concepts and conventions necessary for creating an HTTP server.
- **Content**:
  - Discussing common routing, middleware, and templating patterns.
  - Leveraging this knowledge to create a credential harvester and keylogger.