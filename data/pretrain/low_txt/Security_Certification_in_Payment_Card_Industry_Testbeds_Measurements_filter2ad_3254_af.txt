### Is Improving PCI Certification a Practical Task?

From an economic perspective, the concept of for-profit security certification companies may seem paradoxical. Intuitively, a scanning vendor might generate more revenue if its scanner is less stringent, allowing websites to easily pass the DSS certification test. Conversely, a company offering rigorous certification scanning might lose customers due to frustration from failing the certification test. Misaligned incentives are common in many security domains, such as ATM and network security [41]. However, unlike the decentralized Internet, PCI security is centrally supervised by the PCI Security Council. This central oversight, which governs the process of screening and approving scanner vendors, serves as a strong quality control mechanism. The enforcement can be further strengthened through technical means. Therefore, improving PCI security certification, unlike deploying Internet security protocols [69], is a practical and achievable goal in the near future.

### Gaming-Resistant Self-Evolving Testbeds and Open-Source PCI Scanners

A testbed must continuously evolve, incorporating new types of vulnerabilities and relocating existing ones over time. A static testbed is undesirable because scanners may gradually learn the test cases and pass without conducting a thorough analysis. Automating this process and creating self-evolving testbeds are interesting open research problems.

Competitive, open-source PCI/web scanners from non-profit organizations could drive up the quality of commercial vendors, forcing the entire industry to improve and providing alternative solutions for merchants to run sanity checks on their services. Currently, there are few high-quality, open-source, and deployable web scanners; w3af and ZAP are among the very few available.

### Automate the Workload at Payment Brands and Acquirer Banks

Payment brands and acquirer banks are the ultimate gatekeepers in the PCI DSS enforcement chain. Manually screening millions of scanning reports and questionnaires every quarter is inefficient and likely not done well in practice. Our real-world experiments suggest that the gatekeeping at acquirer banks and payment brands is weak. Thus, automating report processing for scalable enforcement is urgently needed.

### Scanning vs. Self-Assessment Questionnaires

There are four major types of Self-Assessment Questionnaires (SAQs) (A to D) [29]. These SAQs are designed for different types of merchants, as illustrated in Figure 6 in the Appendix. In SAQs, all questions are closed-ended, i.e., multiple-choice. For most merchants, current compliance checking largely relies on the trust of the merchant’s honesty and capability to maintain a secure system. This observation is derived from our analysis of the 340 questions in the SAQ D-Mer, which is designed for merchants that process or store cardholder data. Consequently, it is the most comprehensive questionnaire.

We manually categorized the 340 questions in the SAQ D-Mer into five major groups: network security, system security, application security, application capability, and company policies. 271 of the 340 questions fall under the category of company policies and application capability, where none can be automatically verified by an external entity (e.g., ASV/web scanners). Only 31 out of the 69 questions on network, system, and application security are automatically verifiable by a PCI scanner.

### Legal Consequences of Cheating in PCI Certification

The PCI DSS standard is not required by U.S. federal law. Some state laws, such as those in Nevada, Minnesota, and Washington, do refer to PCI DSS, stating that merchants must be PCI compliant [58]. However, there are no legal consequences specified for cheating in the PCI DSS certification process. Therefore, being untruthful when filling out the self-assessment questionnaire would not have any direct legal consequences. The only potential penalty would be an "after effect," such as a fine by the card brand if a data breach occurs due to non-compliance [3].

### Limitations

Our work has several limitations. First, we tested only 6 PCI scanners and 4 web scanners. Given the high cost of ordering PCI and web scanning, scaling up such an experiment is unlikely. To increase diversity, we selected PCI scanners from different price ranges and added website scanners. Second, our paper primarily focuses on the PCI compliance certification of e-commerce websites. Although we did not evaluate the compliance of banks, which report to card brands, we argue that the same set of approved PCI scanners provide compliance reports for both merchants and banks. The issues revealed in our study should be generally applicable. Third, we did not test vulnerabilities not yet covered by the current Data Security Standards (DSS). Future work can further study the comprehensiveness of DSS. Finally, in Section 5, we tested 1,203 e-commerce websites, requiring manual efforts to verify whether a website accepts payment card information. Automating this verification is difficult, as it often requires registering an account and visiting multiple pages. We argue that our experiment already covers websites from various categories and ranking ranges, sufficient to demonstrate the prevalence of the problem.

### Related Work

#### Website Scanning
The detection of web application vulnerabilities has been well studied [45, 49, 73]. In [45, 74], authors measured the performance of several black-box web scanners and reported a low detection rate for XSS and SQL injection attacks. The main challenge is to exhaustively discover various web-app states by observing input/output patterns. Duchene et al. [53] proposed an input fuzzer to detect XSS vulnerabilities. Doupé et al. [49] proposed guiding fuzzing based on the website’s internal states. In [64], authors proposed a black-box method to detect logical flaws using network traffic. In [73], authors used taint-tracking-based detection of XSS vulnerabilities at the client-side. In [65], authors used dynamic execution trace-based behavioral models to detect CSRF vulnerabilities. Although most defenses against XSS and SQL injection prescribe input sanitization [44, 57, 59], in [51], authors proposed an application-agnostic rewrite technique to differentiate scripts from other HTML inputs. We argue that similar research efforts could positively impact the PCI community by (1) producing and releasing high-quality, open-sourced tools; and (2) customizing a non-intrusive version of the tool for testing production websites in the PCI DSS context.

#### Proactive Threat Measurements
Honeypots [62, 66] are useful for collecting empirical data on attackers (or defenders). In [56], authors measure attack behaviors by deploying vulnerable web servers waiting to be compromised. In [63], authors deployed phishing websites to measure the timeliness of browsers’ blacklist mechanisms. In [48], authors measure the capability of web hosting providers to detect compromised websites by deploying vulnerable websites within those web hosting services. Our testbed can be regarded as a specialized honeypot to assess the capability of PCI scanners.

#### Physical Card Frauds
Payment card frauds at ATMs or point-of-sale (POS) machines have been studied for decades [42, 43, 47, 52, 61, 70, 71]. Most of these frauds occur due to stealing payment card information during physical transactions [35, 42] and cloning magnetic stripe cards [70, 71]. EMV cards are known to be resistant to card cloning but are vulnerable to tempered terminals [52], protocol-level vulnerabilities [61], and implementation flaws [47]. Recently, researchers proposed mechanisms to detect magnetic card skimmers [46, 70].

#### Digital Card Frauds
In the online setting, the danger of using magnetic-stripe-like transactions has been known for years [8, 21]. Various methods (e.g., 3D-Secure [24], Tokenization framework [13]) have been proposed to address this. Unfortunately, 3D-Secure is found to be inconvenient and easy to break [60]. Tokenization offers a great alternative by replacing original card information with temporary tokens during a transaction. However, card information can still be stolen during the account setup phase at a poorly secured merchant. Other unregulated digital financial services are also reported to be insecure [68]. In [68], the authors showed that branchless banking apps that leverage cellular networks to send/receive cash are also vulnerable due to flaws such as skipping SSL/TLS certificate validation and using insecure cryptographic primitives.

### Conclusion

Our study shows that the PCI data security standard (PCI DSS) is comprehensive, but there is a significant gap between the specifications and their real-world enforcement. Our testbed experiments revealed that the vulnerability screening capabilities of some approved scanning vendors (ASVs) are inadequate. 5 of the 6 PCI scanners are not compliant with the ASV scanning guidelines. All 6 PCI scanners would certify e-commerce websites that remain vulnerable. Our measurement on 1,203 e-commerce websites shows that 86% of the websites have at least one type of vulnerability that should disqualify them as non-compliant. Our future work will focus on designing a minimum-footprint black-box scanning method.

### Acknowledgment

This project was supported in part by NSF grants CNS-1717028, CNS-1750101, and OAC-1541105, ONR Grant ONR-N00014-17-1-2498.

### References

[1] Common Vulnerability Scoring System Calculator Version 3. https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator. [Online; accessed 28-Aug-2019].
[2] The OWASP Zed Attack Proxy (ZAP). https://www.zaproxy.org/.
[3] Q15: What are the penalties for non-compliance? https://pcicomplianceguide.org/faq/#15.
[4] W3af. http://w3af.org/.
[5] SQL injection with raw MD5 hashes (Leet More CTF 2010 Injection 300). http://cvk.posthaven.com/sql-injection-with-raw-md5-hashes, 2010.
[6] Payment Card Industry (PCI) Point-to-Point Encryption: Solution Requirements and Testing Procedures. https://www.pcisecuritystandards.org/documents/P2PE_v2_r1-1.pdf, 2015.
[7] Payment Card Industry (PCI) Token Service Providers: Additional Security Requirements and Assessment Procedures for Token Service Providers (EMV Payment Tokens). https://www.pcisecuritystandards.org/documents/PCI_TSP_Requirements_v1.pdf, 2015.
[8] All About Fraud: How Crooks Get the CVV. https://krebsonsecurity.com/2016/04/all-about-fraud-how-crooks-get-the-cvv/, 2016. [Online; accessed 8-Jan-2019].
[9] Payment Card Industry (PCI) Payment Application Data Security Standard: Requirements and Security Assessment Procedures. https://www.pcisecuritystandards.org/documents/PA-DSS_v3-2.pdf, 2016.
[10] Payment Card Industry (PCI) PIN Transaction Security (PTS) Hardware Security Module (HSM): Modular Security Requirements. https://www.pcisecuritystandards.org/documents/PCI_HSM_Security_Requirements_v3_2016_final.pdf, 2016.
[11] PCI Self-Assessment Questionnaire Instructions and Guidelines. Version 3.2. https://www.pcisecuritystandards.org/documents/SAQ-InstrGuidelines-v3_2.pdf, 2016.
[12] Amazon Connect is Now PCI DSS Compliant. https://aws.amazon.com/about-aws/whats-new/2017/07/amazon-connect-is-now-pci-dss-compliant/, 2017.
[13] EMV Payment Tokenisation Framework: Technical Specification. https://www.emvco.com/terms-of-use/?u=/wp-content/uploads/documents/EMVCo-Payment-Tokenisation-Specification-Technical-Framework-v2.0-1.pdf, 2017.
[14] Giant Equifax Data Breach: 143 Million People Could Be Affected. https://money.cnn.com/2017/09/07/technology/business/equifax-data-breach/index.html, 2017.
[15] How Many E-Commerce Companies Are There? What’s the Global E-Commerce Market Size? http://blog.pipecandy.com/e-commerce-companies-market-size/, 2017.
[16] Payment Card Industry 3-D Secure (PCI 3DS): Security Requirements and Assessment Procedures for EMV 3-D Secure Core Components: ACS, DS, and 3DS Server. https://www.pcisecuritystandards.org/documents/PCI-3DS-Core-Security-Standard-v1.pdf, 2017.
[17] Payment Card Industry (PCI) Card Production and Provisioning: Logical Security Requirements. https://www.pcisecuritystandards.org/documents/PCI_Card_Production_Logical_Security_Requirements_v2.pdf, 2017.
[18] Payment Card Industry (PCI) Card Production and Provisioning: Physical Security Requirements. https://www.pcisecuritystandards.org/documents/PCI_Card_Production_Physical_Security_Requirements_v2.pdf, 2017.
[19] Payment Card Industry (PCI) Data Security Standard Approved Scanning Vendor Program Guide. Version 3.1. https://www.pcisecuritystandards.org/documents/ASV_Program_Guide_v3.1.pdf, 2017.
[20] Approved Scanning Vendors. https://www.pcisecuritystandards.org/assessors_and_solutions/approved_scanning_vendors, 2018.
[21] Card Fraud on the Rise, Despite National EMV Adoption. https://geminiadvisory.io/card-fraud-on-the-rise/, 2018. [Online; accessed 8-Jan-2019].
[22] CardConnect: A New Wave of Payment Processing. https://cardconnect.com/, 2018.
[23] A Comprehensive Guide to PCI DSS Merchant Levels. https://semafone.com/blog/a-comprehensive-guide-to-pci-dss-merchant-levels/, 2018.
[24] EMV 3-D Secure: Protocol and Core Functions Specification. https://www.emvco.com/wp-content/uploads/documents/EMVCo_3DS_Spec_v220_122018.pdf, 2018.
[25] Let’s Encrypt. https://letsencrypt.org/, 2018.
[26] OpenCart. https://www.opencart.com/, 2018.
[27] Payment Card Industry (PCI) Data Security Standard: Requirements and Security Assessment Procedures. https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf, 2018.
[28] Payment Card Industry (PCI) Data Security Standard Self-Assessment Questionnaire D and Attestation of Compliance for Merchants: All Other SAQ-Eligible Merchants. https://www.pcisecuritystandards.org/documents/PCI-DSS-v3_2_1-SAQ-D_Merchant.pdf?agreement=true&time=1557603304233, 2018.
[29] Payment Card Industry (PCI) Data Security Standard Self-Assessment Questionnaire: Instructions and Guidelines. https://finance.ubc.ca/sites/finserv.ubc.ca/files/banking-leases/PCI_DSS_SAQ_Instructions_Guidelines.pdf, 2018.
[30] Payment Card Industry (PCI) PIN Transaction Security (PTS) Point of Interaction (POI): Modular Security Requirements. https://www.pcisecuritystandards.org/documents/PCI_PTS_POI_SRs_v5-1.pdf, 2018.
[31] Payment Card Industry (PCI) Software-based PIN Entry on COTS: Security Requirements. https://www.pcisecuritystandards.org/documents/SPoC_Security_Requirements_v1.0.pdf, 2018.
[32] Who’s In Your Online Shopping Cart? https://krebsonsecurity.com/2018/11/whos-in-your-online-shopping-cart/, 2018.
[33] BlueCrypt: Cryptographic Key Length Recommendation. https://www.keylength.com/en/4/, 2019.
[34] DB-Engines Ranking. https://db-engines.com/en/ranking, 2019.
[35] Insert Skimmer + Camera Cover PIN Stealer. https://krebsonsecurity.com/2019/03/insert-skimmer-camera-cover-pin-stealer/, 2019. [Online; accessed 20-Mar-2019].
[36] Netcat. https://en.wikipedia.org/wiki/Netcat, 2019.
[37] PCI DSS Compliance. https://www.akamai.com/us/en/resources/pci-dss-compliance.jsp, 2019.
[38] Shopify Meets All 6 Categories of PCI Standards. https://www.shopify.ca/security/pci-compliant, 2019.
[39] Standards, Regulations & Certifications. https://cloud.google.com/security/compliance/pci-dss/, 2019.
[40] Adrian, D., Bhargavan, K., Durumeric, Z., Gaudry, P., Green, M., Halderman, J. A., Heninger, N., Springall, D., Thomé, E., Valenta, L., VanderSloot, B., Wustrow, E., Béguelin, S. Z., and Zimmermann, P. Imperfect Forward Secrecy: How Diffie-Hellman Fails in Practice. In Proceedings of the ACM SIGSAC Conference on Computer and Communications Security (CCS) (2015).
[41] Anderson, R., and Moore, T. The Economics of Information Security. Science 314, 5799 (2006), 610–613.
[42] Anderson, R. J. Why Cryptosystems Fail. In Proceedings of the ACM Conference on Computer and Communications Security (CCS) (1993).
[43] Anderson, R. J., and Murdoch, S. J. EMV: Why Payment Systems Fail. Commun. ACM 57, 6 (2014), 24–28.
[44] Balzarotti, D., Cova, M., Felmetsger, V., Jovanovic, N., Kirda, E., Kruegel, C., and Vigna, G. Saner: Composing Static and Dynamic Analysis to Validate Sanitization in Web Applications. In Proceedings of the IEEE Symposium on Security and Privacy (S&P) (2008).
[45] Bau, J., Bursztein, E., Gupta, D., and Mitchell, J. C. State of the Art: Automated Black-Box Web Application Vulnerability Testing. In Proceedings of the IEEE Symposium on Security and Privacy (S&P) (2010).
[46] Bhaskar, N., Bland, M., Levchenko, K., and Schulman, A. Please Pay Inside: Evaluating Bluetooth-Based Detection of Gas Pump Skimmers. In Proceedings of the 28th USENIX Security Symposium (USENIX SEC) (2019).
[47] Bond, M., Choudary, O., Murdoch, S. J., Skorobogatov, S. P., and Anderson, R. J. Chip and Skim: Cloning EMV Cards with the Pre-Play Attack. In Proceedings of the IEEE Symposium on Security and Privacy (S&P) (2014).
[48] Canali, D., Balzarotti, D., and Francillon, A. The Role of Web Hosting Providers in Detecting Compromised Websites. In Proceedings of the International World Wide Web Conference (WWW) (2013).
[49] Doupé, A., Cavedon, L., Kruegel, C., and Vigna, G. Enemy of the State: A State-Aware Black-Box Web Vulnerability Scanner. In Proceedings of the USENIX Security Symposium (USENIX SEC) (2012).
[50] Doupé, A., Cova, M., and Vigna, G. Why Johnny Can’t Pentest: An Analysis of Black-Box Web Vulnerability Scanners. In Proceedings of the Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA) (2010).
[51] Doupé, A., Cui, W., Jakubowski, M. H., Peinado, M., Kruegel, C., and Vigna, G. Dedacota: Toward Preventing Server-Side XSS via Automatic Code and Data Separation. In Proceedings of the ACM SIGSAC Conference on Computer and Communications Security (CCS) (2013).
[52] Drimer, S., and Murdoch, S. J. Keep Your Enemies Close: Distance Bounding Against Smartcard Relay Attacks. In Proceedings of the USENIX Security Symposium (USENIX SEC) (2007).
[53] Duchene, F., Rawat, S., Richier, J., and Groz, R. KameleonFuzz: Evolutionary Fuzzing for Black-Box XSS Detection. In Proceedings of the ACM Conference on Data and Application Security and Privacy (CODASPY) (2014).
[54] Gamero-Garrido, A., Savage, S., Levchenko, K., and Snoeren, A. C. Quantifying the Pressure of Legal Risks on Third-Party Vulnerability Research. In Proceedings of the ACM SIGSAC Conference on Computer and Communications Security (CCS) (2017).
[55] Grossman, J. Cross Site Tracing (XST). https://www.cgisecurity.com/whitehat-mirror/WH-WhitePaper_XST_ebook.pdf.
[56] Han, X., Kheir, N., and Balzarotti, D. Phisheye: Live Monitoring of Sandboxed Phishing Kits. In Proceedings of the ACM SIGSAC Conference on Computer and Communications Security (CCS) (2016).
[57] Hooimeijer, P., Livshits, B., Molnar, D., Saxena, P., and Veanes, M. Fast and Precise Sanitizer Analysis with BEK. In Proceedings of the USENIX Security Symposium (USENIX SEC) (2011).
[58] Kemp, T. Buckle Up with Cybersecurity... It’s the Law. https://www.forbes.com/sites/tomkemp/2012/02/01/buckle-up-with-cybersecurity-its-the-law/#5d83d3a31d72, 2012.
[59] Livshits, B., and Chong, S. Towards Fully Automatic Placement of Security Sanitizers and Declassifiers. In Proceedings of the ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL) (2013).
[60] Murdoch, S. J., and Anderson, R. J. Verified by Visa and MasterCard SecureCode: Or, How Not to Design Authentication. In Proceedings of the International Conference on Financial Cryptography and Data Security (FC) (2010).
[61] Murdoch, S. J., Drimer, S., Anderson, R. J., and Bond, M. Chip and PIN is Broken. In Proceedings of the IEEE Symposium on Security and Privacy (S&P) (2010).
[62] Nazario, J. PhoneyC: A Virtual Client Honeypot. In Proceedings of the USENIX Workshop on Large-Scale Exploits and Emergent Threats (LEET) (2009).
[63] Oest, A., Safaei, Y., Doupé, A., Ahn, G.-J., Wardman, B., and Tyers, K. PhishFarm: A Scalable Framework for Measuring the Effectiveness of Evasion Techniques Against Browser Phishing Blacklists. In Proceedings of the IEEE Symposium on Security and Privacy (S&P) (2019).
[64] Pellegrino, G., and Balzarotti, D. Toward Black-Box Detection of Logic Flaws in Web Applications. In Proceedings of the Network and Distributed System Security Symposium (NDSS) (2014).
[65] Pellegrino, G., Johns, M., Koch, S., Backes, M., and Rossow, C. Deemon: Detecting CSRF with Dynamic Analysis and Property Graphs. In Proceedings of the ACM SIGSAC Conference on Computer and Communications Security (CCS) (2017).
[66] Provos, N. A Virtual Honeypot Framework. In Proceedings of the 13th USENIX Security Symposium (USENIX SEC) (2004).
[67] Ramos, S. H., Villalba, M. T., and Lacuesta, R. MQTT Security: A Novel Fuzzing Approach. Wireless Communications and Mobile Computing 2018 (2018).
[68] Reaves, B., Scaife, N., Bates, A., Traynor, P., and Butler, K. R. B. Mo(bile) Money, Mo(bile) Problems: Analysis of Branchless Banking Applications in the Developing World. In Proceedings of the USENIX Security Symposium (USENIX SEC) (2015).
[69] Routing Security for Policymakers: An Internet Society White Paper, October 2018. Internet Society. https://www.manrs.org/wp-content/uploads/2018/10/Routing-Security-for-Policymakers-EN.pdf.
[70] Scaife, N., Peeters, C., and Traynor, P. Fear the Reaper: Characterization and Fast Detection of Card Skimmers. In Proceedings of the USENIX Security Symposium (USENIX SEC) (2018).
[71] Scaife, N., Peeters, C., Velez, C., Zhao, H., Traynor, P., and Arnold, D. P. The Cards Aren’t Alright: Detecting Counterfeit Gift Cards Using Encoding Jitter. In Proceedings of the IEEE Symposium on Security and Privacy (S&P) (2018).
[72] Shu, X., Tian, K., Ciambrone, A., and Yao, D. Breaking the Target: An Analysis of Target Data Breach and Lessons Learned. CoRR abs/1701.04940 (2017).
[73] Steffens, M., Rossow, C., Johns, M., and Stock, B. Don’t Trust the Locals: Investigating the Prevalence of Persistent Client-Side Cross-Site Scripting in the Wild. In 26th Annual Network and Distributed System Security Symposium, NDSS 2019, San Diego, California, USA, February 24-27, 2019 (2019).
[74] Vieira, M., Antunes, N., and Madeira, H. Using Web Security Scanners to Detect Vulnerabilities in Web Services. In Proceedings of the IEEE/IFIP International Conference on Dependable Systems and Networks (DSN) (2009).

### Appendix

**Figure 3:** An example of a wrong hostname in the certificate. The domain (a*****.***) uses a certificate issued for a different domain name (*.n*****.***).

**Figure 4:** Self-signed certificate used by (r*****.***), a website that accepts payment cards for donations.

**Implementation Details of PciCheckerLite**

PciCheckerLite follows a series of rules for vulnerability testing. The index of the rules matches the testing cases discussed in the paper. As described, we only focus on a subset of test cases that do not disrupt or cause any negative impact to the remote servers (for ethical considerations). The implementation details are as follows:

**Rule 2: Database Port Detection**
For database port detection, we choose to probe for MySQL port. The reasons for choosing MySQL port are:
1. MySQL is among the top three (MySQL, Oracle, Microsoft SQL Server) most popular databases in the world [34].
2. MySQL is free.
3. It supports a wide range of programming languages.
Access to the MySQL port (e.g., 3306) is disabled by default. Enabling remote access to a MySQL database for an arbitrary client is very dangerous. We check the MySQL port using `nc` [36], a Unix utility tool that reads and writes data across network connections using the TCP or UDP protocol.

**Rule 5: Default MySQL User/Password Detection**
If the MySQL database of a website is remotely accessible, we further check for the default username and password. A typical MySQL installation has a user "root" with an empty password, unless it is otherwise customized or disabled. We run a MySQL client to connect to the remote host using the default username and password. PciCheckerLite terminates the connection immediately and raises an alert if the attempt is successful.

**Rules 3 & 19: Checking OpenSSH’s Availability and Version**
We use `nc` [36] to connect with port 22 of the remote OpenSSH server. If OpenSSH runs on port 22, it will return server information (e.g., OpenSSH version, OS type, OS version). We parse the returned information to determine the version of the OpenSSH server. We consider any installation versions before OpenSSH_7.6 as vulnerable.

**Rules 29 & 33: Checking HTTP Header Information**
Extracting HTTP information does not require rich browser functionality. We use Java net URL APIs to open HTTP connections for extracting HTTP headers. For case 29, we raise a warning if the "Server" header contains the server name and version. For case 33, we raise a warning if any of the four security headers (i.e., X-Frame-Options, X-XSS-Protection, X-Content-Type-Options, Strict-Transport-Security) are missing.

**Rule 7: Sensitive Information Over HTTP**
We tested whether all HTTP traffic is redirected to HTTPS by default. We open an HTTP connection with the server and follow the redirection chain. If the server doesn't redirect to HTTPS, we raise an alert. We use Java net URL APIs to implement this test case.

**Rules 18 & 13: TLSv1.0 and Weak Cipher Negotiation**
We use OpenSSL’s `s_client` tool to establish a SSL/TLS connection using the TLSv1.0 protocol. PciCheckerLite raises a warning if the connection is successful. We also use `s_client` to negotiate the ciphersuite with the remote server. PciCheckerLite raises a warning if we successfully negotiate a weak ciphersuite.