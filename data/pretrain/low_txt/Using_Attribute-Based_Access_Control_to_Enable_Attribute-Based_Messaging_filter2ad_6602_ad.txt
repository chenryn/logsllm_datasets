### Course and Variable x

In the context of an access request, `request.teaching` represents the requester's teaching attribute value. The variable `x` refers to the course attribute value within this request.

### Access Policies for Attributes

Certain attributes in an enterprise may require only one access policy for each disjoint subset of possible values. For example, an attribute like "Age" with a range from 17 to 120 might need policies for disjoint sub-ranges such as (17,30], (30,65], and (65,120). Generally, attributes with an infinite or uncountable set of values that cannot be meaningfully grouped will have a single policy. Conversely, attributes that divide the population into disjoint sets may require a policy for each (attribute, value) pair.

Our analysis of attributes in three units at the University of Illinois revealed that only 20% of attributes require a unique policy for each value, while 50% can be managed with a single policy per attribute.

### Distributed Administration of Policies

A single enterprise policy administrator does not need to manage all policies. Instead, policy administrators in each unit can be responsible for specifying and managing policies for attributes originating from their unit, enabling distributed administration.

### User Interface

End users should not be expected to write database queries or logical expressions. An effective user interface for composing Attribute-Based Messaging (ABM) addresses is crucial for the system's adoption. Similarly, policy administrators would benefit from a user-friendly interface for specifying policies. Although this work does not address these needs, interfaces similar to those found in web directories and catalog searches, along with recent advances in natural language query interfaces like NaLix [12, 13], which translate English queries into XQuery, can enhance the usability of ABM systems.

### Privacy Considerations

Deploying an ABM system raises privacy concerns regarding sender and recipient email addresses and the ABM address itself. For instance, should senders know the list of recipients for a message sent to a particular ABM address? Should recipients know why they received a specific message or the ABM address used to target it?

If sensitive attributes, such as medical conditions, are used in an ABM address, the following information should be considered sensitive and governed by policies:
1. The ABM address using the sensitive attribute.
2. The list of recipients (email addresses) targeted by the ABM address.
3. The sender's email address.

For example, senders may be allowed to know only those recipients not targeted by the sensitive attribute, and recipients may be allowed to know only their attributes included in the ABM address rather than the entire address. If a sender targeting messages based on sensitive attributes is not allowed to know the recipient list, it might be desirable to reciprocally not let the recipients know who the sender is.

### Related Work

#### Targeted Messaging Systems
Customer Relationship Management (CRM) systems are the most similar technology to ABM. CRMs help enterprises target customers by isolating specific buying patterns and customizing communication. The key difference is that CRM communication is from the enterprise to the customer group, whereas ABM messages are sent by users to other users after access is determined by the sender's attributes.

#### Secure Role-Based Messaging
Secure role-based messaging uses Role-Based Access Control (RBAC) for authorizing access to sensitive email content [7, 16]. Users can send messages to a given role identified by a special email address, and recipients must provide role membership credentials to access the email. This approach differs from ABM, which focuses on access control rules for senders rather than recipients and uses attributes rather than roles.

#### WSEmail
The Adaptive Messaging Policy (AMPol) project has considered technologies related to ABM, including WSEmail, which builds messaging systems over a web services foundation. A prototype demonstrated dynamic routing of messages through WSEmail MTAs but did not decide on recipients based on their attributes. A WSEmail-based design shows how to adapt to recipient policies but does not deal with multiple recipients.

#### Attribute-Based Access Control (ABAC)
Early works on ABAC [5, 17, 19, 18] use it for trust negotiation and credential-based access control in distributed systems. Our study shows how ABAC is valuable for enterprise applications and uses attributes from backend databases. Access control in ABM is different from traditional systems because the resource (an ABM address) is distinct. Most research on ABAC provides theoretical insights but does not discuss implementation and practical studies. Some works [14, 19, 18] have led to implementations, but performance data is limited. Performance is becoming important in recent applications like location-based access control [6].

### Conclusion

We have demonstrated a simple and manageable access control model for ABM based on ABAC, accommodating a useful collection of ABM applications. This system can be embedded in an architecture deployable in virtually any enterprise messaging system. We have shown that this architecture can be efficiently implemented for mid-size enterprises and provided a profile of policy parameters affecting its efficiency.

There are several interesting questions and open opportunities for ABM with ABAC, particularly interdomain operation and more expressive ABAC policy languages. While we have shown how to architect and deploy ABM for enterprises, it is more challenging when multiple enterprises are involved. Techniques are required to map attributes across domains, and we have a design for such a system, though it needs further development and study. Our ABAC policy language (implemented as a subset of XACML) is rudimentary but useful. More complex policy languages could be beneficial, but ease of maintenance is also crucial.

### Acknowledgements

We would like to thank Noam Artz, Mike Berry, and anonymous reviewers for their helpful comments. This material is supported by ONR N00014-04-1-0562 and N00014-02-1-0715, NSF CCR02-08996, CNS05-09268, and CNS05-24695, a grant from MacArthur Foundation, and the Sohaib and Sara Abbasi Fellowship. Any opinions, findings, and conclusions or recommendations expressed in this publication are those of the authors and do not necessarily reflect the views of ONR, NSF, or MacArthur Foundation.

### References

[1] R. N. Afandi, J. Zhang, and C. A. Gunter. AMPol-Q: Adaptive Middleware Policy to Support QoS. In International Conference on Service Oriented Computing(ICSOC), Chicago, IL, December 2006.

[2] R. N. Afandi, J. Zhang, M. Hafiz, and C. A. Gunter. AMPol: Adaptive Messaging Policy. In European Conference on Web Services(ECOWS ’06), Zurich, Switzerland, December 2006. IEEE.

[3] XACML references. Technical Report v1.54, OASIS, May 2005.

[4] N. Bieberstein, R. Shah, K. Jones, S. Bose, and M. Fiammante. Service-Oriented Architecture COMPASS: Business Value, Planning, and Enterprise Roadmap. Pearson Education, 2005.

[5] P. A. Bonatti and P. Samarati. A uniform framework for regulating service access and information release on the web. J. Comput. Secur., 10(3):241–271, 2002.

[6] K. Borders, X. Zhao, and A. Prakash. CPOL: high-performance policy evaluation. In CCS ’05: 12th ACM Conference on Computer and Communications Security, Virginia, pages 147–157. ACM Press, 2005.

[7] D. Chadwick, G. Lunt, and G. Zhao. Secure Role-based Messaging. In CMS ’04: Eighth IFIP TC-6 TC-11 Conference on Communications and Multimedia Security, Windermere, UK, pages 263–275, 2004.

[8] E. Damiani, S. D. C. di Vimercati, and P. Samarati. New Paradigms for Access Control in Open Environments. In 5th IEEE International Symposium on Signal Processing and Information, Athens, December 2005.

[9] D. Ferraiolo, D. Kuhn, and R. Chandramouli. Role Based Access Control. Artech House, 2003.

[10] eXtensible Access Control Markup Language (XACML). Technical Report v1.1, OASIS, August 2003.

[11] N. Li, J. C. Mitchell, and W. H. Winsborough. Design of a role-based trust management framework. In IEEE Symposium on Security and Privacy, Oakland, May 2002.

[12] Y. Li, H. Yang, and H. Jagadish. Nalix: an interactive natural language interface for querying XML. In ACM SIGMOD International Conference on Management of Data (SIGMOD 2005), Baltimore MD, June 2005.

[13] Y. Li, H. Yang, and H. Jagadish. Constructing a generic natural language interface for an XML database. In International Conference on Extending Database Technology (EDBT 2006), Munich Germany, March 2006.

[14] M. Lorch, S. Proctor, R. Lepro, D. Kafura, and S. Shah. First experiences using XACML for access control in distributed systems. In XMLSEC ’03: ACM workshop on XML security, Virginia, pages 25–37. ACM, 2003.

[15] K. D. Lux, M. J. May, N. L. Bhattad, and C. A. Gunter. WSEmail: Secure internet messaging based on web services. In International Conference on Web Services (ICWS ’05), Orlando FL, July 2005. IEEE.

[16] M. C. Mont, P. Bramhall, and K. Harrison. A Flexible Role-based Secure Messaging Service: Exploiting IBE Technology for Privacy in Health Care. In DEXA ’03: 14th International Workshop on Database and Expert Systems Applications, page 432. IEEE, 2003.

[17] L. Wang, D. Wijesekera, and S. Jajodia. A logic-based framework for attribute-based access control. In FMSE ’04: ACM workshop on Formal methods in security engineering, Washington DC, pages 45–55. ACM, 2004.

[18] T. Yu, M. Winslett, and K. E. Seamons. Supporting structured credentials and sensitive policies through interoperable strategies for automated trust negotiation. ACM Trans. Inf. Syst. Secur., 6(1):1–42, 2003.

[19] E. Yuan and J. Tong. Attributed Based Access Control (ABAC) for Web Services. In ICWS’05: IEEE International Conference on Web Services, Orlando, page 569. IEEE, July 2005.

[20] N. Yuhanna, M. Gilpin, L. Hogan, and A. Sahalie. Information fabric: Enterprise data virtualization. White Paper, Forrester Research Inc., January 2006.