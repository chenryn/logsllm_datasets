### Memory Remapping and SMRAM Security Analysis

#### Memory Reclaim Range
- **Target Range**: 4GB
- **SMRAM (System Management RAM)**
- **REMAPBASE**: Base address for memory remapping
- **REMAPLIMIT**: Limit address for memory remapping

#### Is a Memory Remapping Attack Possible?
- **Module**: `chipsec.modules.remap`
- **Registers**:
  - **TOUUD (Top of Upper Memory)**: 0x000000013E000001
  - **REMAPLIMIT**: 0x000000013DF00001
  - **REMAPBASE**: 0x0000000100000001
  - **TOLUD (Top of Low Memory)**: 0xBFA00001
  - **TSEGMB (Top of System Management RAM)**: 0xBD000001

- **Memory Map**:
  - **Top of Upper Memory**: 0x000000013E000000
  - **Remap Limit Address**: 0x000000013DFFFFFF
  - **Remap Base Address**: 0x0000000100000000
  - **4GB Boundary**: 0x0000000100000000
  - **Top of Low Memory**: 0x00000000BFA00000
  - **TSEG (SMRAM) Base**: 0x00000000BD000000

- **Locks and Alignment**:
  - **TOUUD, TOLUD, REMAPBASE, and REMAPLIMIT are locked**.
  - **All addresses are 1MB aligned**.

- **Remap Programming**:
  - **Memory Remap is enabled**.
  - **Remap window is correctly programmed**: 4GB ≤ REMAPBASE ≤ REMAPLIMIT.

- **Result**: **PASSED**: Memory Remap is configured correctly and locked.

#### Potential Issues with Hardware Configuration and Protections
- **BIOS Lockdown**: If the BIOS does not lock down memory configuration, the boundary separating DRAM and MMIO (TOLUD) can be moved. For example, malware can move it below SMRAM to make SMRAM decode as MMIO.
- **Graphics Aperture Overlap**: The Graphics Aperture can be overlapped with SMRAM, redirecting MMIO access to a memory range defined by PTE entries in the Graphics Translation Table (GTT).
- **SMI Handler Access Redirection**: When the CPU accesses the protected SMRAM range to execute SMI handlers, the access can be redirected to an unprotected memory range elsewhere in DRAM.
- **Mitigation**: The BIOS must lock down the hardware memory configuration (e.g., TOLUD) to mitigate this attack.

#### SMRAM Redirection via Graphics Aperture
- **Normal Memory Map**:
  - **CPU executes instructions from SMRAM normally**.
  - **Code fetch at SMBASE in SMM**.
  - **Access to GFx aperture is redirected to GFx DRAM range per GTT PTEs**.

- **Redirection Attack**:
  - **CPU executes instructions from fake SMRAM redirected by MMIO GFx Aperture per malicious GTT PTEs**.
  - **Code fetch at SMBASE in SMM**.
  - **Access to GFx aperture is redirected to fake SMRAM**.

#### DMA Attacks Against SMRAM
- **DMA Access to SMRAM**:
  - **Normal Memory Map**: DMA access to SMRAM is blocked due to TSEG covering SMRAM.
  - **DMA Attack**: DMA access to SMRAM is not blocked if TSEG Base is moved. Access to the Graphics Aperture can be redirected to SMRAM.

- **Protection**: The BIOS must lock down the configuration required to define the range protecting SMRAM from inbound DMA access (e.g., TSEG range).

- **Module**: `chipsec.modules.smm_dma`
- **Registers**:
  - **TOLUD**: 0xBFA00001
  - **BGSM (Bottom of Graphics Segment)**: 0xBD800001
  - **TSEGMB**: 0xBD000001
  - **SMRR_BASE (System Management Range Register Base)**: 0x00000000BD000006
  - **SMRR_MASK (System Management Range Register Mask)**: 0x00000000FF800800

- **Memory Map**:
  - **Top of Low Memory**: 0xBFA00000
  - **TSEG Range (TSEGMB-BGSM)**: [0xBD000000-0xBD7FFFFF]
  - **SMRR Range**: [0xBD000000-0xBD7FFFFF]

- **Locks and Configuration**:
  - **TSEGMB and BGSM are locked**.
  - **TSEG covers the entire SMRR range**.

- **Result**: **PASSED**: TSEG is properly configured. SMRAM is protected from DMA attacks.

### BIOS Attack Surface: Hardware Configuration
- **System Components**:
  - **FW/BIOS**
  - **SPI Flash Protection**
  - **BIOS Update**
  - **SMRAM Protection**
  - **Hardware Configuration**
  - **SMI Handlers**
  - **Secure Boot**
  - **BIOS Settings (NVRAM, Variables)**

#### Top Swap Mode
- **Description**: "Top Swap" mode allows fault-tolerant updates of the BIOS boot-block.
- **Configuration**: Enabled by BUC[TS] in the Root Complex MMIO range.
- **Operation**: The chipset inverts the A16 line (A16-A20 depending on the size of the boot-block) of the address targeting ROM, allowing the CPU to execute from 0xFFFEFFF0 inside the "backup" boot-block rather than from 0xFFFFFFF0.
- **Security**: The Top Swap indicator is not reset on reboot (requires RTC reset). If not locked/protected, malware can redirect execution of the reset vector to the alternate (backup) boot-block.
- **Mitigation**: The BIOS must lock down the Top Swap configuration (BIOS Interface Lock in the General Control & Status register) and protect the swap boot-block range in SPI.
- **Module**: `chipsec.modules.common.bios_ts`
- **Registers**:
  - **RCBA General Config base**: 0xFED1F400
  - **GCS (General Control and Status) register**: 0x00000021
    - **BBS (BIOS Boot Straps)**: 0x0
    - **BILD (BIOS Interface Lock-Down)**: 1
  - **BUC (Backed Up Control) register**: 0x00000000
    - **TS (Top Swap)**: 0
  - **BC (BIOS Control) register**: 0x2A
    - **TSS (Top Swap Status)**: 0

- **Result**: **PASSED**: BIOS Interface is locked (including Top Swap Mode).

### BIOS Attack Surface: SMI Handlers
- **Legacy SMI Handlers**:
  - **Description**: Legacy SMI handlers can call out of SMRAM.
  - **Exploit**: An OS-level exploit stores a payload in the F-segment below 1MB (0xF8070 Physical Address), reprograms PAM for the F-segment, and triggers a "SW SMI" via the APMC port (I/O 0xB2). The SMI handler then calls 0F000:08070 in SMM.
  - **Mitigation**: BIOS SMM privilege escalation vulnerabilities need to be addressed.

- **Function Pointers Outside of SMRAM (DXE SMI)**:
  - **Description**: Function pointers outside of SMRAM can be used to call payloads outside of SMRAM.
  - **Exploit**: Read a function pointer from ACPI NVS memory (outside SMRAM) and call the function pointer (payload outside SMRAM).
  - **Mitigation**: Ensure that function pointers and their targets are within SMRAM.

### BIOS Attack Surface: Secure Boot
- **Secure Boot Key Hierarchy**:
  - **Platform Key (PK)**: Verifies KEKs (Key Exchange Keys).
  - **KEKs**: Verify db and dbx (Authorized and Forbidden Databases).
  - **db (Authorized Database)**: X509 certificates, SHA1/SHA256 hashes of allowed images.
  - **dbx (Forbidden Database)**: X509 certificates, SHA1/SHA256 hashes of revoked images.

- **Secure Boot Configuration**:
  - **PK Variable in NVRAM?**
    - **Yes**: Set SetupMode variable to USER_MODE.
    - **No**: Set SetupMode variable to SETUP_MODE.
  - **SecureBootEnable Variable in NVRAM?**
    - **Yes**:
      - **SecureBootEnable is SECURE_BOOT_ENABLE and SetupMode is USER_MODE?** Set SecureBoot variable to ENABLE.
      - **Else?** Set SecureBoot variable to DISABLE.
    - **No**:
      - **SetupMode is USER_MODE?** Set SecureBoot variable to ENABLE.
      - **SetupMode is SETUP_MODE?** Set SecureBoot variable to DISABLE.

- **First Public Windows 8 Secure Boot Bypass**:
  - **Description**: Platform Key in NVRAM can be modified, leading to a bypass of Secure Boot.
  - **Exploit**: Corrupt the Platform Key EFI variable in NVRAM, causing the AuthenticatedVariableService DXE driver to enter Secure Boot SETUP_MODE. The main volatile SecureBoot variable is then set to DISABLE, and the DXE ImageVerificationLib assumes Secure Boot is off, skipping Secure Boot checks.
  - **Mitigation**: Ensure the Platform Key EFI variable is protected and validated.

- **Exploit Programs SPI Controller & Modifies SPI Flash**:
  - **Description**: An exploit can program the SPI controller and modify the SPI flash, installing a UEFI bootkit on the ESP (EFI System Partition).
  - **Mitigation**: Implement robust SPI flash protection and secure boot mechanisms.

This document provides a comprehensive overview of potential security issues and mitigations related to memory remapping, SMRAM, DMA attacks, BIOS configuration, and Secure Boot.