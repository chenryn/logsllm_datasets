**标题：LOLSnif – 追踪另一基于Ursnif的定向攻击活动**

**译者：知道创宇404实验室翻译组**

工具泄露是网络安全领域中一个非常有趣的现象。一方面，泄露的工具在被广泛分析后，可能会削弱其原有功能；另一方面，这些泄露的内容会被集成到较低版本的工具中。本文将对Ursnif的新变种进行详细分析。

恶意软件源代码泄露的情况并不罕见。2017年，名为“Eternal Blue”（CVE-2017-0144）的漏洞利用代码遭到泄露并被黑客广泛使用。早在2010年，银行木马Zeus的源代码泄露事件就催生了大量新的恶意软件变种。本文将重点关注于2014年泄露的Ursnif系列（也称为Gozi2/ISFB），这是一种成熟的银行木马，且相关研究已有很多。

本文中，我将深入探讨Ursnif最新变种的特性。该变种通过使用LOLBins（Living Off the Land Binaries）、组件对象模型（COM）接口等技术来检测Internet Explorer，并绕过本地代理及Windows Management Instrumentation (WMI)与操作系统交互，从而替代传统的Win32 API调用，使其难以被发现。

此变种已被重新设计为一种侦察工具和下载器，在打击网络犯罪活动中具有重要意义。它首次公开提及是在[2019年8月](https://www.fortinet.com/blog/threat-research/ursnif-variant-spreading-word-document.html)，并与一些注册域名的时间一致。同年冬季，该变种发起了恶意攻击。有文章详细分析了该软件在2020年4月发起的攻击活动，特别提到了LOLBins的使用。简而言之，LOLBins指的是利用目标系统上已存在的合法工具执行恶意操作。例如，数十种Windows系统工具可用于下载文件、转储凭据或执行其他二进制文件。因此，攻击者无需自带工具，可以将其活动隐藏在这些合法工具的正常用途中。由于本文中提到的Ursnif变种使用了LOLBins，我们将其称为LOLSnif。目前，尚未发现以LOLSnif名称被追踪的相关活动。

## 近期恶意活动的详细探究

为了更好地理解参与者的战术、技术和程序（TTPs），我们从今年4月7日开始对LOLSnif活动进行了深入分析。该活动主要通过发送带有加密ZIP附件的电子邮件进行传播。邮件正文提供了解密密码，要求用户解密附件中的JavaScript文件（如“my_presentation_v8s.js”，大小为1.34M，SHA256: 4d98790aa67fb14f6bedef97f5f27ea8a60277dda9e2dcb8f1c0142d9619ef52）。

该恶意软件样本于4月7日提交至VirusTotal。最终，JavaScript文件会生成一个名为`UtBuefba.txt`的PE可执行文件，存放在`AppData\Local\Temp`目录下，并通过`regsvr32.exe -s [redacted]\AppData\Local\Temp\\UtBuefba.txt`命令启动DLL（其中“-s”表示静默注册）。尽管DLL通常需要导出`DllRegisterServer`和`DllUnregisterServer`函数，但该文件只有一个常规的DLL入口点。然而，该文件仍然能够解压Ursnif DLL。

## LOLSnif 分析

LOLSnif包含两个主要组件：加载器和工作器。加载器负责部署工作器，两者均为头部轻微损坏的PE DLL文件（DOS头部“MZ”和PE头部“PE”均被覆盖）。虽然这可能妨碍某些沙箱解决方案转储有效负载，但问题相对容易解决。值得注意的是，这两个组件都是x86二进制文件，且未发现与其他恶意软件关联。

### 加载器

未打包的DLL（SHA256: e3d89b564e57e6f1abba05830d93fa83004ceda1dbc32b3e5fb97f25426fbda2）包含两个导出点：DLL入口点和`DllRegisterServer`，后者通过`regsvr32`注册。加载器采用与Ursnif相同的配置机制（JJ结构）。每个配置部分以头部数字0x4A4A（“JJ”）开头，存储数据偏移量及描述数据类型的CRC32标签。更多关于Ursnif配置格式的信息可以在[这里](https://labs.sentinelone.com/writing-malware-configuration-extractors-isfb-ursnif/)找到。

加载器包括两个配置部分。第一部分定义了第二部分有效负载的安装路径（`INSTALL_IN`），第二部分则包含一个经过APlib压缩的DLL，即实际的工作器。在解压缩第二个DLL之前，加载器会检查操作系统是否为俄语或中文本地化版本。如果是，则停止操作。

### 相关操作

LOLSnif的操作与原始Ursnif相似，保留了整体结构，使用JJ结构存储配置，并加密`.bss`段（包含字符串和其他重要数据）。尽管加密算法略有不同，但也增加了一些新功能。

配置格式与原始版相同，Blob配置的第一部分包含字符串及其类型信息的偏移量。这些字符串存储在Blob的末尾，其中包括命令与控制服务器地址及公共DNS服务器列表。此外，Blob还包含域生成算法（DGA）的配置参数，例如用于下载关键字的域名`constitution.org`。不过，LOLSnif并未实现任何域名生成功能。

在原始Ursnif中，`.bss`段在启动时解密，使用滚动XOR算法。而LOLSnif使用基于加法/减法指令的算法，解密密钥基于样本编译日期。完整的解密字符串列表见[附录B](https://www.telekom.com/resource/blob/600078/0a7581ca22c85e654a49eeb2cd302c02/dl-20200511-lolsnif-appendix-b-en-data.pdf)。

登记交互可以通过本机Win32 API（如`RegOpenKey`、`RegEnumKey`、`RegCloseKey`）或Windows Management Instrumentation（WMI）实现。某些函数接受布尔参数，决定使用哪种方法。例如，设置注册表项字符串值的函数中，第一个参数（标记为`use_wmi`）决定了使用本机API还是WMI。

LOLSnif虽然是x86架构构建，但预计也可在x64平台上运行。另一个显著特点是其广泛使用COM接口。据报道，该恶意软件通过IWebBrowser接口检测Internet Explorer以联系命令与控制服务器。由于IE常与代理连接，这种方案允许它绕过合作网络中的任何代理配置。此外，LOLSnif通过IHTMLElement在DOM中搜索字符串`invalidcert`，以处理无效证书警告。当前示例使用纯HTTP而非HTTPS，并将IE设为默认浏览器以避免弹出窗口。Ursnif变种还利用了LOLBins，如`mshta.exe`和`powershell.exe`，以启动恶意软件、下载和执行其他模块及有效负载。

## LOLSnif的api1活动观察范围的缩小

在4月份的恶意活动中，我们通过几个链接找到了更多样本和域名。[附录A](https://www.telekom.com/resource/blob/600076/ff2f4f0adcfcef604c1f8aa0c3a615e2/dl-20200511-lolsnif-appendix-a-en-data.pdf)列出了所有发现的IoC。首先，LOLSnif的字符串解密算法与原始代码库不同，基于此算法我们发现了更多样本并提取了相关配置。

所有样本使用相同的服务器ID（730）和RSA密钥（此处未列出），每个系列有三个递增的僵尸网络ID（1000、2000、3000）。除最后一个外，所有域共享`wensa.at`或其子域。经过六个月的努力，发现CBC密钥在大多数情况下为`W7fx3j0lFvOxT2kF`。例外情况是僵尸网络ID 2000，其密钥为`U7yKaYwFde7YtppY`。更有趣的是，有两个样本在2020年2月19日的四秒钟内编译完成，表明存在某种形式的自动化构建过程。

另一种方法是分析CC基础设施。所有样本都使用`/api1`作为URL的一部分，例如`been.dianer.at/api1`。除一个域名外，所有域名都使用“.at”顶级域。还有一个TOR域名`6buzj3jmnvrak4lh.onion`。通过DNS信息，我们发现了更多有趣的细节。许多域名被使用了几个月，其中“wensa.at”的使用时间最长，约六个月。

以下时间线显示了唯一的配置和某些域名。样本由其SHA256前缀和CBC密钥前缀（如8d700ea_W7）描述。域名有首次发现日期（FS），有些还有最后查阅日期（LS）。参与者可能在操作开始时就注册了`lamanak.at`和`kamalak.at`，并与基础设施IP关联。

时间线

关联的参与者要么不关心OpSec，要么非常自信，因为他们多次重复使用域名和IP，有时甚至长期使用。

## 结论

本文详细研究了Ursnif的最新变种（LOLSnif）及其近期活动。这些活动的核心是Ursnif Trojan的变种，被重新设计为下载器和侦察工具，以满足操作者的特定需求。

操作者使用的技术（如LOLBins）以及在后期攻击阶段观察到的COM接口和TTP表明，这是一个有针对性的攻击行为。自上个月以来，这些袭击一直在持续，但并未引起广泛关注。这可能是由于参与者重复使用域名和IP，但这并不能忽视他们的存在。