### Existing USB Fuzzers and Their Limitations

Current USB fuzzers, such as vUSBf, are inefficient and lack portability. For example, syzkaller's usb-fuzzer is not portable across different operating systems and only targets probe functions of drivers. To address these limitations, we propose USBFuzz, a flexible and modular framework designed to fuzz USB drivers in various OS kernels.

### Features of USBFuzz

- **Portability**: USBFuzz can be used to fuzz USB drivers on different operating systems. It leverages coverage-guided fuzzing on Linux and dumb fuzzing on other kernels where coverage collection is not yet supported.
- **Broad and Focused Fuzzing**: USBFuzz supports both broad fuzzing, targeting the entire USB subsystem and a wide range of USB drivers, and focused fuzzing, targeting specific device drivers.

### Evaluation and Results

We applied coverage-guided fuzzing, a state-of-the-art technique, to the Linux kernel USB stack and drivers using the USBFuzz framework. In a preliminary evaluation on nine recent versions of the Linux kernel, we discovered 16 new memory bugs, even in kernels that have been extensively fuzzed.

To further extend the reach of USBFuzz, we reused the generated seeds from the Linux campaign to perform dumb fuzzing on USB drivers in FreeBSD, MacOS, and Windows. This resulted in the discovery of one bug in FreeBSD, three bugs in MacOS, and four bugs in Windows.

Additionally, we conducted focused fuzzing on a USB webcam driver and identified another bug in the XHCI driver of the Linux kernel. So far, we have fixed 11 bugs and received 10 Common Vulnerabilities and Exposures (CVE) identifiers.

### Availability

USBFuzz is available at [https://github.com/HexHive/USBFuzz](https://github.com/HexHive/USBFuzz).

### Acknowledgments

We thank our shepherd and the anonymous reviewers for their insightful comments. This project has received funding from the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation program (grant agreement No. 850868). This material is also based upon work supported by the Office of Naval Research (ONR) under Award No. N00014-18-1-2674 and by the National Science Foundation (NSF) under award number CNS-1801601.

### References

[1] Sebastian Angel, Riad S Wahby, Max Howald, Joshua B Leners, Michael Spilo, Zhen Sun, Andrew J Blumberg, and Michael Walfish. "Defending against Malicious Peripherals with Cinch." In USENIX Security Symposium, pages 397–414, 2016.

[2] MIDI Association. "Basics of USB-MIDI." [https://www.midi.org/articles-old/basic-of-usb](https://www.midi.org/articles-old/basic-of-usb), 2018.

[10] Jake Corina, Aravind Machiry, Christopher Salls, Yan Shoshitaishvili, Shuang Hao, Christopher Kruegel, and Giovanni Vigna. "Difuze: Interface-Aware Fuzzing for Kernel Drivers." In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, pages 2123–2138. ACM, 2017.

[11] die.net. "lsusb(8) - Linux Man Page." [https://linux.die.net/man/8/lsusb](https://linux.die.net/man/8/lsusb), 2018.

[12] Ellisys. "Explorer 200 - Hardware Trigger." [https://www.ellisys.com/products/usbex200/trigger.php](https://www.ellisys.com/products/usbex200/trigger.php).

[13] GoodFET. "Goodfet-facedancer21." [http://goodfet.sourceforge.net/hardware/facedancer21/](http://goodfet.sourceforge.net/hardware/facedancer21/), 2018.

[14] Google. "External USB Fuzzing for Linux Kernel." [https://github.com/google/syzkaller/blob/master/docs/linux/external_fuzzing_usb.md](https://github.com/google/syzkaller/blob/master/docs/linux/external_fuzzing_usb.md), 2018.

[15] Google. "Found Linux Kernel USB Bug." [https://github.com/google/syzkaller/blob/usb-fuzzer/docs/linux/found_bugs_usb.md](https://github.com/google/syzkaller/blob/usb-fuzzer/docs/linux/found_bugs_usb.md), 2018.

[3] SD Association. "SD Standard Overview." [https://www.sdcard.org/developers/overview/](https://www.sdcard.org/developers/overview/), 2020.

[16] Google. "Syzkaller - Kernel Fuzzer." [https://github.com/google/syzkaller](https://github.com/google/syzkaller), 2018.

[4] Fabrice Bellard. "QEMU, a Fast and Portable Dynamic Translator." In Proceedings of the Annual Conference on USENIX Annual Technical Conference, 2005.

[5] Silas Boyd-Wickizer and Nickolai Zeldovich. "Tolerating Malicious Device Drivers in Linux." In USENIX annual technical conference. Boston, 2010.

[6] Hartley Brody. "USB Rubber Ducky Tutorial: The Missing Quickstart Guide to Running Your First Keystroke Payload Hack." [https://blog.hartleybrody.com/rubber-ducky-guide/](https://blog.hartleybrody.com/rubber-ducky-guide/), 2017.

[7] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang Lin, XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang, and Kehuan Zhang. "IoTFuzzer: Discovering Memory Corruptions in IoT Through App-based Fuzzing." In NDSS, 2018.

[8] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. "S2E: A Platform for In-Vivo Multi-Path Analysis of Software Systems." ACM Sigplan Notices, 46(3):265–278, 2011.

[9] Catalin Cimpanu. "List of 29 Different Types of USB Attacks." [https://www.bleepingcomputer.com/news/security/heres-a-list-of-29-different-types-of-usb-attacks/](https://www.bleepingcomputer.com/news/security/heres-a-list-of-29-different-types-of-usb-attacks/), 2019.

[17] Google. "KASAN-Linux USB-Fuzzer." [https://github.com/google/kasan/tree/usb-fuzzer](https://github.com/google/kasan/tree/usb-fuzzer), 2020.

[18] NCC Group. "nccgroup/umap2." [Umap2.](https://github.com/nccgroup/umap2)

[19] NCC Group. "AFL/QEMU Fuzzing with Full-System Emulation." [https://github.com/nccgroup/TriforceAFL](https://github.com/nccgroup/TriforceAFL), 2018.

[20] Intel. "Intel Virtualization Technology." [https://www.intel.com/content/www/us/en/virtualization/virtualization-technology/intel-virtualization-technology.html](https://www.intel.com/content/www/us/en/virtualization/virtualization-technology/intel-virtualization-technology.html), 2018.

[21] Dae R Jeong, Kyungtae Kim, Basavesh Shivakumar, Byoungyoung Lee, and Insik Shin. "Razzer: Finding Kernel Race Bugs through Fuzzing." In Symposium on Security and Privacy. IEEE, 2019.

[22] Dave Jones. "Trinity: Linux System Call Fuzzer." [https://github.com/kernelslacker/trinity](https://github.com/kernelslacker/trinity), 2018.

[23] Samy Kamkar. "USBdriveby: Exploiting USB in Style." [http://samy.pl/usbdriveby/](http://samy.pl/usbdriveby/), 2014.

[24] Sylvester Keil and Clemens Kolbitsch. "Stateful Fuzzing of Wireless Device Drivers in an Emulated Environment." Black Hat Japan, 2007.

[25] Linux Kernel Document. "The Kernel Address Sanitizer (KASAN)." [https://www.kernel.org/doc/html/v4.12/dev-tools/kasan.html](https://www.kernel.org/doc/html/v4.12/dev-tools/kasan.html), 2018.

[26] Linux Kernel Document. "KernelAddressSanitizer." [https://github.com/google/kasan/wiki](https://github.com/google/kasan/wiki), 2018.

[27] David Kierznowski. "BadUSB 2.0: Exploring USB Man-In-The-Middle Attacks," 2015.

[28] Knowledge Base. "ar5212." [https://whirlpool.net.au/wiki/ar5212](https://whirlpool.net.au/wiki/ar5212).

[29] Andrey Konovalov. "CVE-2016-2384: Exploiting a Double-Free in the USB-MIDI Linux Kernel Driver." [https://xairy.github.io/blog/2016/cve-2016-2384](https://xairy.github.io/blog/2016/cve-2016-2384), 2016.

[30] Volodymyr Kuznetsov, Vitaly Chipounov, and George Candea. "Testing Closed-Source Binary Device Drivers with DDT." In USENIX Annual Technical Conference, 2010.

[31] Jon Larimer. "Beyond Autorun: Exploiting Vulnerabilities with Removable Storage." [https://media.blackhat.com/bh-dc-11/Larimer/BlackHat_DC_2011_Larimer_Vulnerabiliters_w-removeable_storage-wp.pdf](https://media.blackhat.com/bh-dc-11/Larimer/BlackHat_DC_2011_Larimer_Vulnerabiliters_w-removeable_storage-wp.pdf), 2011.

[32] LXR. "Linux Source Code." [https://elixir.bootlin.com/linux/latest/source/drivers/media/mc/mc-entity.c#L666](https://elixir.bootlin.com/linux/latest/source/drivers/media/mc/mc-entity.c#L666), 2020.

[33] Richard McNally, Ken Yiu, Duncan Grove, and Damien Gerhardy. "Fuzzing: The State of the Art." Technical report, Defence Science and Technology Organisation Edinburgh (Australia), 2012.

[34] Microsoft. "LifeCam VX-800." [https://www.microsoft.com/accessories/en-us/d/lifecam-vx-800](https://www.microsoft.com/accessories/en-us/d/lifecam-vx-800), 2018.

[35] Microsoft. "Microsoft Security Bulletin MS17-011 - Critical." [https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2017/ms17-011](https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2017/ms17-011), 2018.

[36] Nir Nissim, Ran Yahalom, and Yuval Elovici. "USB-Based Attacks." Computers & Security, 70:675–688, 2017.

[37] NVD. "Common Vulnerabilities and Exposures: CVE-2016-2384." [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-2384](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-2384), 2018.

[39] Alex Plaskett. "Biting the Apple That Feeds You." [https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-44con-biting-the-apple-that-feeds-you-2017-09-25.pdf](https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-44con-biting-the-apple-that-feeds-you-2017-09-25.pdf), 2018.

[40] Alex Plaskett. "MacOS Kernel Fuzzer." [https://github.com/mwrlabs/OSXFuzz](https://github.com/mwrlabs/OSXFuzz), 2018.

[41] NSA Playset. "TURNIPSCHOOL NSA Playset." [http://www.nsaplayset.org/turnipschool](http://www.nsaplayset.org/turnipschool), 2019.

[42] Matt Porter. "Kernel USB Gadget Configfs Interface." [https://events.static.linuxfound.org/sites/events/files/slides/USB%20Gadget%20Configfs%20API_0.pdf](https://events.static.linuxfound.org/sites/events/files/slides/USB%20Gadget%20Configfs%20API_0.pdf), 2018.

[43] Spice Project. "usbredir." [https://www.spice-space.org/usbredir.html](https://www.spice-space.org/usbredir.html), 2018.

[44] Syzkaller Project. "report.go." [https://github.com/google/syzkaller/blob/master/pkg/report/report.go](https://github.com/google/syzkaller/blob/master/pkg/report/report.go).

[45] USBGuard Project. "USB Guard." [https://usbguard.github.io/](https://usbguard.github.io/), 2018.

[46] USB/IP Project. "USB/IP PROJECT." [http://usbip.sourceforge.net/](http://usbip.sourceforge.net/).

[47] Matthew J Renzelmann, Asim Kadav, and Michael M Swift. "SymDrive: Testing Drivers Without Devices." In Presented as part of the 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI 12), pages 279–292, 2012.

[48] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and Thorsten Holz. "kafl: Hardware-Assisted Feedback Fuzzing for OS Kernels." In Usenix Security Symposium, 2017.

[49] Sergej Schumilo, Ralf Spenneberg, and Hendrik Schwartke. "Don't Trust Your USB! How to Find Bugs in USB Device Drivers." Blackhat Europe, 2014.

[50] Dokyung Song, Felicitas Hetzelt, Dipanjan Das, Chad Spensky, Yeoul Na, Stijn Volckaert, Giovanni Vigna, Christopher Kruegel, Jean-Pierre Seifert, and Michael Franz. "PeriScope: An Effective Probing and Fuzzing Framework for the Hardware-OS Boundary." In 2019 Network and Distributed Systems Security Symposium (NDSS). Internet Society, 2019.

[38] James Patrick-Evans, Lorenzo Cavallaro, and Johannes Kinder. "POTUS: Probing Off-The-Shelf USB Drivers with Symbolic Fault Injection." In 11th USENIX Workshop on Offensive Technologies (WOOT 17), 2017.

[51] Alan Stern. "Dummy/Loopback USB Host and Device Emulator Driver." [https://elixir.bootlin.com/linux/v3.14/source/drivers/usb/gadget/dummy_hcd.c](https://elixir.bootlin.com/linux/v3.14/source/drivers/usb/gadget/dummy_hcd.c), 2018.

[52] syzkaller Team. "Found Bugs by Syzkaller in BSD." [https://github.com/google/syzkaller/blob/master/docs/openbsd/found_bugs.md](https://github.com/google/syzkaller/blob/master/docs/openbsd/found_bugs.md), 2018.

[53] syzkaller Team. "Found Bugs by Syzkaller in Linux." [https://github.com/google/syzkaller/blob/master/docs/linux/found_bugs.md](https://github.com/google/syzkaller/blob/master/docs/linux/found_bugs.md), 2018.

[54] syzkaller Team. "vusb ids." [https://github.com/google/syzkaller/blob/usb-fuzzer/sys/linux/vusb_ids.txt](https://github.com/google/syzkaller/blob/usb-fuzzer/sys/linux/vusb_ids.txt), 2018.

[55] syzkaller Team. "vusb.txt at google/syskaller." [https://github.com/google/syzkaller/blob/master/sys/linux/vusb.txt](https://github.com/google/syzkaller/blob/master/sys/linux/vusb.txt), 2018.

[56] QEMU Team. "Device Specification for Inter-VM Shared Memory Device." [https://github.com/qemu/qemu/blob/master/docs/specs/ivshmem-spec.txt](https://github.com/qemu/qemu/blob/master/docs/specs/ivshmem-spec.txt), 2018.

[57] QEMU Team. "QEMU: The Fast! Processor Emulator." [https://www.qemu.org/](https://www.qemu.org/), 2018.

[58] Dave Jing Tian, Adam Bates, and Kevin Butler. "Defending Against Malicious USB Firmware with GoodUSB." In Proceedings of the 31st Annual Computer Security Applications Conference, pages 261–270, 2015.

[59] Dave Jing Tian, Grant Hernandez, Joseph I Choi, Vanessa Frost, Peter C Johnson, and Kevin RB Butler. "LBM: A Security Framework for Peripherals within the Linux Kernel." In LBM: A Security Framework for Peripherals within the Linux Kernel, page 0, 2019.

[60] Dave Jing Tian, Nolen Scaife, Adam Bates, Kevin Butler, and Patrick Traynor. "Making USB Great Again with USBFILTER." In 25th USENIX Security Symposium (USENIX Security 16), pages 415–430, 2016.

[61] Jing Tian, Nolen Scaife, Deepak Kumar, Michael Bailey, Adam Bates, and Kevin Butler. "SoK: 'Plug & Pray' Today–Understanding USB Insecurity in Versions 1 Through C." In 2018 IEEE Symposium on Security and Privacy (SP), pages 1032–1047. IEEE, 2018.

[62] Linus Torvalds. "Kernel Parameters." [https://github.com/torvalds/linux/blob/master/Documentation/admin-guide/kernel-parameters.txt](https://github.com/torvalds/linux/blob/master/Documentation/admin-guide/kernel-parameters.txt), 2018.

[63] Ubuntu. "Package: streamer (3.103-3build1)." [https://packages.ubuntu.com/xenial/streamer](https://packages.ubuntu.com/xenial/streamer), 2019.

[64] Linux USB. "A List of USB ID's." [http://www.linux-usb.org/usb.ids](http://www.linux-usb.org/usb.ids), 2019.

[65] usbkill.org. "Official USB Killer Site." [https://usbkill.com/](https://usbkill.com/), 2019.

[66] Rijnard Van Tonder and Herman A Engelbrecht. "Lowering the USB Fuzzing Barrier by Transparent Two-Way Emulation." In WOOT, 2014.

[67] Dmitry Vyukov. "Kernel: Add KCOV Code Coverage." [https://lwn.net/Articles/671640/](https://lwn.net/Articles/671640/), 2018.

[68] Wikipedia. "Extensible Host Controller Interface." [https://en.wikipedia.org/wiki/Extensible_Host_Controller_Interface](https://en.wikipedia.org/wiki/Extensible_Host_Controller_Interface), 2018.

[69] Wikipedia. "USB On-The-Go." [https://en.wikipedia.org/wiki/USB_On-The-Go](https://en.wikipedia.org/wiki/USB_On-The-Go), 2018.

[70] Wikipedia. "Wireless USB." [https://en.wikipedia.org/wiki/Wireless_USB](https://en.wikipedia.org/wiki/Wireless_USB), 2019.

[71] Jonas Zaddach, Luca Bruno, Aurelien Francillon, Davide Balzarotti, et al. "AVATAR: A Framework to Support Dynamic Security Analysis of Embedded Systems' Firmwares." In NDSS, 2014.

[72] Michal Zalewski. "American Fuzzy Lop." [http://lcamtuf.coredump.cx/afl/](http://lcamtuf.coredump.cx/afl/), 2017.

[73] Michal Zalewski. "The Bug-O-Rama Trophy Case." [http://lcamtuf.coredump.cx/afl/#bugs](http://lcamtuf.coredump.cx/afl/#bugs), 2017.

[74] Google Project Zero. "Notes on Windows Uniscribe Fuzzing." [https://googleprojectzero.blogspot.com/2017/04/notes-on-windows-uniscribe-fuzzing.html](https://googleprojectzero.blogspot.com/2017/04/notes-on-windows-uniscribe-fuzzing.html), 2018.

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the content.