### Chain Ecosystem and Mitosis Implementation

We implemented Mitosis on top of Hyperledger Fabric, utilizing Raft [15] as the underlying consensus protocol due to its widespread deployment as a CFT (Crash Fault Tolerant) protocol. We developed three core functionalities: Transfer of Knowledge, Transfer of Asset, and Chain Division, which are described in detail below.

#### Transfer of Knowledge
We implemented two versions of the Transfer of Knowledge functionality:
1. **Generic Proof**: Based on predicates evaluated using data known by the chaincode.
2. **Transaction Inclusion Proof**: A proof that a specific transaction is included in the blockchain.

**ToK.GenerateProof(P, τ)**: 
- The chaincode evaluates the predicate \( P \) and returns a verdict \( v \in \{0, 1\} \).
- The proof \( \pi \) is a collection of signatures from a quorum of peers in the source chain.
- The tag \( \tau \) is included in the signed statement to ensure the freshness of the information.

**ToK.VerifyProof(π, τ)**: 
- Under the assumption that the verifying client can always recompute the correct quorum of a given chain, the verification process checks:
  - The correctness of \( \tau \).
  - The validity of the signatures.
  - That the set of signers forms a valid quorum.
- Proofs can be verified by any device (e.g., computer, mobile device) or a blockchain through a chaincode.

#### Transfer of Asset
**ToA.Lock(a, At, Ct)**: 
- The locking mechanism varies with each use case and asset type. In our evaluation setup, we added a `locked` field to the asset properties.
- When an asset is locked, the `locked` field is set to `True`, and the chaincode prevents any further modifications.
- The locking mechanism includes a target chain \( Ct \) and an address \( At \) to prevent double spending.
- The proof is constructed as a proof of knowledge that the asset has been locked.

**ToA.Claim(πlock)**: 
- An asset can be claimed on the destination chain if the tag \( \tau \) of the knowledge proof is correct.
- If the tag is incorrect or the address is invalid, the transaction fails, and a failure record is added to the chain. A proof \( \pi_{abort} \) can be retrieved.
- If the transaction is successful, the asset is transferred to the target address \( At \), and a success transaction \( \pi_{claim} \) is generated to finalize the transfer on the original chain.

#### Chain Division
We implemented the chain-division process in Fabric as a two-step procedure:
1. **Create a New Chain**: A new chain is created with the same state as the parent chain.
2. **Assign Peers**: Different peers are assigned to the two chains according to the assignment scheme detailed in Section 3.4.

### Implementation and Evaluation

In this section, we evaluate the performance of our Mitosis implementation based on Hyperledger Fabric.

#### Implementation Setup
- **Network Initialization**: We initialized a Fabric network with \( n \) peers and \( n \) orderers inside Docker containers, supporting up to 44 nodes.
- **Chain Splitting**: We performed a chain split resulting in \( \frac{n}{2} \) peers for each sibling chain.
- **Consensus Protocol**: Since Raft is a CFT protocol, the number of faults in each sibling chain must be below 50% (i.e., \( \alpha_i = \frac{1}{2} \) in our analysis, cf. Figure 2b). For \( n = 44 \), Mitosis preserves security with a probability below 0.05 as long as the faulty ratio \( \beta \) in the parent chain is below 40%, i.e., up to \( f = 17 \) peers are faulty.
- **Chaincodes**: In each chain, we installed two chaincodes:
  - **Chain Manager**: For verifying proofs and monitoring the current chain configuration.
  - **Asset Manager**: Responsible for cross-chain transfers.

We evaluated the time required for chain division, generating and verifying cross-chain transfers, and both asset and knowledge transfers.

**Hardware Configuration**:
- **Server Specifications**: 6-Core Intel Xeon E-2176G, 128 GB RAM.
- **Experiment Configurations**: Varying the number of nodes from 2 to 44, and measuring the performance of various operations for each configuration.

#### Evaluation Results
The results of our evaluation are shown in Figure 3, where each data point averages the results of at least 5 independent runs. Each plot illustrates the performance trend of a given operation as the number of peers \( n \) increases.

- **Proof Size and Latency**: Figures 3a and 3b show the size and generation latency of a proof of knowledge, respectively.
- **Verification Latency**: Figures 3c and 3d show the time required to verify a proof, off-chain and on-chain, respectively.
- **Cross-Chain Transfer Performance**: Figures 3e and 3f show the proof size and latency required for a cross-chain transfer compared to regular in-chain transfers.

**Impact of Chain Splitting**:
- The chain-division operation involves a validator assignment scheme and a reconfiguration process.
- Additional experiments measured the latency of the chain division process in terms of downtime.
- Our experiments show that the chain-splitting latency grows linearly with the number of peers, e.g., 35 seconds for \( n = 10 \) peers and 72 seconds for \( n = 20 \). This downtime is negligible compared to the frequency of chain splitting, which may range from days to months.

**Performance of Transfer of Knowledge**:
- **Proof Size**: The size of a proof of knowledge grows linearly with the number of nodes (Figure 3a).
- **Latency**: The latency to generate and verify a proof also grows linearly with the number of nodes (Figures 3b–3d).
- **Off-Chain vs. On-Chain Verification**: Verifying an off-chain proof (Figure 3c) is much faster than an on-chain verification (Figure 3d), on average by a factor of 4, due to the endorsements required for on-chain transactions in Fabric.

**Performance of Cross-Chain Transfer**:
- **Size and Latency**: Figures 3e and 3f show the size and latency for a cross-chain asset transfer, combining lock, claim, and validate operations, and compare it to an in-chain transaction.
- Both size and latency scale linearly with the number of peers, as the asset transfer is based on three knowledge transfers.

### Conclusion

Scalability remains a significant challenge for the adoption of permissioned blockchains in real-world applications. While existing solutions propose sharding, they often assume fixed node participation. Mitosis, inspired by cell mitosis, dynamically constructs and merges shards, allowing nodes to join and leave at will. We analyzed the security of Mitosis and showed that, under mild assumptions, it does not compromise the security of the blockchain ecosystem. Our implementation and integration within Hyperledger Fabric demonstrate that Mitosis incurs minimal modifications and negligible overhead.

### Acknowledgments

The authors would like to thank the anonymous reviewers for their constructive feedback. This work was supported in part by the European Commission H2020 TeraFlow Project under Grant Agreement No 101015857.

### References

[1] Mohammad Javad Amiri, Divyakant Agrawal, and Amr El Abbadi. 2021. SharPer: Sharding Permissioned Blockchains Over Network Clusters. In SIGMOD Conference. ACM, 76–88.

[2] Elli Androulaki, Christian Cachin, Angelo De Caro, and Eleftherios Kokoris-Kogias. 2018. Channels: Horizontal Scaling and Confidentiality on Permissioned Blockchains. In ESORICS (1) (Lecture Notes in Computer Science, Vol. 11098). Springer, 111–131.

[3] Georgia Avarikioti, Eleftherios Kokoris-Kogias, and Roger Wattenhofer. 2019. Divide and Scale: Formalization of Distributed Ledger Sharding Protocols. CoRR abs/1910.10434 (2019). arXiv:1910.10434 http://arxiv.org/abs/1910.10434

[4] Adam Back, Matt Corallo, Luke Dashjr, Mark Friedenbach, Gregory Maxwell, Andrew Miller, Andrew Poelstra, Jorge Timón, and Pieter Wuille. 2014. Enabling Blockchain Innovations with Pegged Sidechains. https://blockstream.com/sidechains.pdf.

[5] Miguel Castro and Barbara Liskov. 1999. Practical Byzantine Fault Tolerance. In OSDI. USENIX Association, 173–186.

[6] David Chaum, Christian Grothoff, and Thomas Moser. 2021. How to Issue a Central Bank Digital Currency. CoRR abs/2103.00254 (2021).

[7] Hung Dang, Tien Tuan Anh Dinh, Dumitrel Loghin, Ee-Chien Chang, Qian Lin, and Beng Chin Ooi. 2019. Towards Scaling Blockchain Systems via Sharding. In SIGMOD Conference. ACM, 123–140.

[8] Bernardo David, Bernardo Magri, Christian Matt, Jesper Buus Nielsen, and Daniel Tschudi. 2021. GearBox: An Efficient UC Sharded Ledger Leveraging the Safety-Liveness Dichotomy. IACR Cryptol. ePrint Arch. (2021), 211.

[9] Arthur Gervais, Ghassan O. Karame, Karl Wüst, Vasileios Glykantzis, Hubert Ritzdorf, and Srdjan Capkun. 2016. On the Security and Performance of Proof of Work Blockchains. In CCS. ACM, 3–16.

[10] Eleftherios Kokoris-Kogias, Philipp Jovanovic, Linus Gasser, Nicolas Gailly, and Bryan Ford. 2017. OmniLedger: A Secure, Scale-Out, Decentralized Ledger. IACR Cryptol. ePrint Arch. 2017 (2017), 406.

[11] Wenting Li, Alessandro Sforzin, Sergey Fedorov, and Ghassan Karame. 2017. Towards Scalable and Private Industrial Blockchains. In Proceedings of the ACM Workshop on Blockchain, Cryptocurrencies and Contracts. ACM, 9–14.

[12] Jian Liu, Wenting Li, Ghassan O. Karame, and N. Asokan. 2019. Scalable Byzantine Consensus via Hardware-Assisted Secret Sharing. IEEE Trans. Computers 68, 1 (2019), 139–151.

[13] Loi Luu, Viswesh Narayanan, Chaodong Zheng, Kunal Baweja, Seth Gilbert, and Prateek Saxena. 2016. A Secure Sharding Protocol For Open Blockchains. In CCS. ACM, 17–30.

[14] Satoshi Nakamoto. 2008. Bitcoin: A peer-to-peer electronic cash system.

[15] Diego Ongaro and John K. Ousterhout. 2014. In Search of an Understandable Consensus Algorithm. In USENIX Annual Technical Conference. USENIX Association, 305–319.

[16] Joseph Poon and Thaddeus Dryja. 2016. The Bitcoin Lightning Network: Scalable Off-Chain Instant Payments. https://lightning.network/lightning-network-paper.pdf.

[17] Serguei Popov. 2018. The Tangle.

[18] Raiden Network [n. d.]. The Raiden Network. https://raiden.network/. Accessed: 2021-06-28.

[19] Federal Council report. 2018. Legal framework for distributed ledger technology and blockchain in Switzerland.

[20] Matthew Skala. 2013. Hypergeometric tail inequalities: ending the insanity. arXiv:1311.5939 [math.PR].

[21] Yonatan Sompolinsky, Yoad Lewenberg, and Aviv Zohar. 2016. SPECTRE: A Fast and Scalable Cryptocurrency Protocol. IACR Cryptol. ePrint Arch. 2016 (2016), 1159.

[22] Yonatan Sompolinsky and Aviv Zohar. 2013. Accelerating Bitcoin’s Transaction Processing. Fast Money Grows on Trees, Not Chains. IACR Cryptol. ePrint Arch. 2013 (2013), 881.

[23] Jiaping Wang and Hao Wang. 2019. Monoxide: Scale out Blockchains with Asynchronous Consensus Zones. In NSDI. USENIX Association, 95–112.

[24] Maofan Yin, Dahlia Malkhi, Michael K. Reiter, Guy Golan-Gueta, and Ittai Abraham. 2019. HotStuff: BFT Consensus with Linearity and Responsiveness. In PODC. ACM, 347–356.

[25] Mahdi Zamani, Mahnush Movahedi, and Mariana Raykova. 2018. RapidChain: Scaling Blockchain via Full Sharding. In CCS. ACM, 931–948.

[26] Alexei Zamyatin, Mustafa Al-Bassam, Dionysis Zindros, Eleftherios Kokoris-Kogias, Pedro Moreno-Sanchez, Aggelos Kiayias, and William J. Knottenbelt. 2019. SoK: Communication Across Distributed Ledgers. https://eprint.iacr.org/2019/1128. Financial Cryptography and Data Security 2021 (to appear).