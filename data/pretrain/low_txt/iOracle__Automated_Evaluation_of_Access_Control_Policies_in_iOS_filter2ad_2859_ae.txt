### Security Mechanisms and Prior Research

Several security researchers have conducted in-depth analyses of the iOS sandbox mechanism through reverse engineering, as documented in references [1, 6, 15-17]. Watson [28] provides a comprehensive survey on access control extensibility, which includes a discussion of iOS sandboxing.

Previous work has focused on creating logical models of access control systems. Chaudhuri et al. [3] used Datalog to model dynamic access control systems, such as those found in Windows Vista and Asbestos. SEAL [18], a language similar to Datalog, is designed for specifying and analyzing label-based access control systems like those in Windows 7, Asbestos, and HiStar. Chen et al. [4] employed Prolog to model and compare attack graphs for SELinux and AppArmor.

The multi-stage nature of jailbreak gadgets can be represented as state transitions in an attack graph. Sheyner et al. [22] utilized the NuSMV model checker to automatically construct attack graphs representing networks. MulVAL [19] uses Datalog to create a logic-based attack graph that integrates network configurations with data from reported vulnerabilities. Saha [20] extended MulVAL to include complex security policies (e.g., SELinux), logical characterization of negation, and more efficient reconstruction of the attack graph after changes are made. Sawilla and Ou [21] developed an algorithm that uses vulnerabilities and attacker privileges to prioritize vertices in a network attack graph.

### iOracle and Related Work in Android

iOracle is related to prior work in the Android ecosystem. Gasparis et al. [12] learned from legitimate rooting applications to detect Android malware containing rooting exploits. SEAndroid [23] ports SELinux to Android, and EASEAndroid [25] automatically refines SEAndroid policies using semi-supervised learning. SPOKE [24] models the attack surface of SEAndroid using functional tests.

### Conclusions

To automate the evaluation of the iOS protection system, we developed iOracle. Working with a closed-source system, we modeled the iOS protection system to detect policy flaws. We performed a case study of four recent jailbreaks, and iOracle helped identify the executables exploited by them. Additionally, iOracle led us to discover five previously unknown policy flaws.

As iOS access control must continue to evolve to meet the demands of new features and increasingly sophisticated attacks, the iOracle framework allows security researchers to scale their analysis efforts to keep pace with this increasing complexity.

### Acknowledgments

We thank Micah Bushouse, Brad Reaves, and the WolfPack Security and Privacy Research (WSPR) lab for their valuable comments. We also extend our gratitude to Dennis Bahler for his advice on Prolog and other logic programming languages.

This work was supported in part by the Army Research Office (ARO) grants W911NF-16-1-0299 and W911NF-16-1-0127, the National Science Foundation (NSF) CAREER grant CNS-1253346, and co-funded by the DFG as part of projects P3, S2, and E4 within the CRC 1119 CROSSING. The University Politehnica of Bucharest provided additional funding through the "Excellence Research Grants" Program, UPB-GEX2017, Ctr. No. 19/2017. Any opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the funding agencies.

### References

[1] Dionysus Blazakis. 2011. The Apple Sandbox. In Blackhat DC.
[2] Mihai Bucicoiu, Lucas Davi, Razvan Deaconescu, and Ahmad-Reza Sadeghi. 2015. XiOS: Extended Application Sandboxing on iOS. In Proceedings of the ACM Symposium on Information, Computer and Communications Security (ASIACCS).
[3] Avik Chaudhuri, Prasad Naldurg, Sriram K Rajamani, Ganesan Ramalingam, and Lakshmisubrahmanyam Velaga. 2008. EON: Modeling and Analyzing Dynamic Access Control Systems with Logic Programs. In Proceedings of the ACM Conference on Computer and Communications Security (CCS).
[4] Hong Chen, Ninghui Li, and Ziqing Mao. 2009. Analyzing and Comparing the Protection Quality of Security Enhanced Operating Systems. In Proceedings of the Network and Distributed Systems Security Symposium (NDSS).
[5] Kai Chen, Xueqiang Wang, Yi Chen, Peng Wang, Yeonjoon Lee, XiaoFeng Wang, Bin Ma, Aohui Wang, Yingjun Zhang, and Wei Zou. 2016. Following Devil’s Footprints: Cross-Platform Analysis of Potentially Harmful Libraries on Android and iOS. In Proceedings of the IEEE Symposium on Security and Privacy.
[6] Dino A Dai Zovi. 2011. Apple iOS 4 security evaluation. Black Hat USA.
[7] Lucas Davi, Alexandra Dmitrienko, Manuel Egele, Thomas Fischer, Thorsten Holz, Ralf Hund, Stefan Nürnberger, and Ahmad-Reza Sadeghi. 2012. MoCFI: A Framework to Mitigate Control-Flow Attacks on Smartphones. In Proceedings of the Network and Distributed Systems Symposium (NDSS).
[8] Razvan Deaconescu, Luke Deshotels, Mihai Bucicoiu, William Enck, Lucas Davi, and Ahmad-Reza Sadeghi. 2016. SandBlaster: Reversing the Apple Sandbox. (Aug. 2016). https://arxiv.org/abs/1608.04303 arXiv: 1608.04303.
[9] Zhui Deng, Brendan Saltaformaggio, Xiangyu Zhang, and Dongyan Xu. 2015. iRiS: Vetting Private API Abuse in iOS Applications. In Proceedings of the ACM Conference on Computer and Communications Security (CCS).
[10] Luke Deshotels, Razvan Deaconescu, Mihai Chiroiu, Lucas Davi, William Enck, and Ahmad-Reza Sadeghi. 2016. SandScout: Automatic Detection of Flaws in iOS Sandbox Profiles. In Proceedings of the ACM Conference on Computer and Communications Security (CCS).
[11] Manuel Egele, Christopher Kruegel, Engin Kirda, and Giovanni Vigna. 2011. PiOS: Detecting Privacy Leaks in iOS Applications. In Proceedings of the Network and Distributed Systems Security Symposium (NDSS).
[12] Ioannis Gasparis, Zhiyun Qian, Chengyu Song, and Srikanth V Krishnamurthy. 2017. Detecting Android Root Exploits by Learning from Root Providers. In Proceedings of the USENIX Security Symposium.
[13] Jin Han, Su Mon Kywe, Qiang Yan, Feng Bao, Robert Deng, Debin Gao, Yingjiu Li, and Jianying Zhou. 2013. Launching Generic Attacks on iOS with Approved Third-Party Applications. In Proceedings of the International Conference on Applied Cryptography and Network Security (ACNS).
[14] Jin Han, Qiang Yan, Debin Gao, Jianying Zhou, and Robert Deng. 2013. Comparing Mobile Privacy Protection Through Cross-Platform Applications. In Proceedings of the Network and Distributed Systems Security Symposium (NDSS).
[15] Andreas Kurtz, Hugo Gascon, Tobias Becker, Konrad Rieck, and Felix Freiling. 2016. Fingerprinting Mobile Devices Using Personalized Configurations. Proceedings on Privacy Enhancing Technologies (PoPETS) 1 (2016).
[16] Jonathan Levin. 2016. MacOS and iOS Internals, Volume III: Security & Insecurity. Technologeeks Press.
[17] Charlie Miller, Dion Blazakis, Dino DaiZovi, Stefan Esser, Vincenzo Iozzo, and Ralf-Philip Weinmann. 2012. iOS Hacker’s Handbook. John Wiley & Sons.
[18] Prasad Naldurg and Raghavendra KR. 2011. SEAL: A Logic Programming Framework for Specifying and Verifying Access Control Models. In Proceedings of the ACM Symposium on Access Control Models and Technologies (SACMAT).
[19] Xinming Ou, Sudhakar Govindavajhala, and Andrew W Appel. 2005. MulVAL: A Logic-based Network Security Analyzer. In Proceedings of the USENIX Security Symposium.
[20] Diptikalyan Saha. 2008. Extending Logical Attack Graphs for Efficient Vulnerability Analysis. In Proceedings of the ACM Conference on Computer and Communications Security (CCS).
[21] Reginald E Sawilla and Xinming Ou. 2008. Identifying Critical Attack Assets in Dependency Attack Graphs. In Proceedings of the European Symposium on Research in Computer Security (ESORICS).
[22] Oleg Sheyner, Joshua Haines, Somesh Jha, Richard Lippmann, and Jeannette M Wing. 2002. Automated Generation and Analysis of Attack Graphs. In Proceedings of the IEEE Symposium on Security and Privacy.
[23] Stephen Smalley and Robert Craig. 2013. Security Enhanced (SE) Android: Bringing Flexible MAC to Android. In Proceedings of the Network and Distributed Systems Security Symposium (NDSS).
[24] Ruowen Wang, Ahmed M. Azab, William Enck, Ninghui Li, Peng Ning, Xun Chen, Wenbo Shen, and Yueqiang Cheng. 2017. SPOKE: Scalable Knowledge Collection and Attack Surface Analysis of Access Control Policy for Security Enhanced Android. In Proceedings of the ACM Asia Conference on Computer and Communications Security (ASIACCS).
[25] Ruowen Wang, William Enck, Douglas Reeves, Xinwen Zhang, Peng Ning, Dingbang Xu, Wu Zhou, and Ahmed M Azab. 2015. EASEAndroid: Automatic Policy Analysis and Refinement for Security Enhanced Android via Large-scale Semi-supervised Learning. In Proceedings of the USENIX Security Symposium.
[26] Tielei Wang, Yeongjin Jang, Yizheng Chen, Simon Chung, Billy Lau, and Wenke Lee. 2014. On the Feasibility of Large-Scale Infections of iOS Devices. In Proceedings of the USENIX Security Symposium.
[27] Tielei Wang, Kangjie Lu, Long Lu, Simon Chung, and Wenke Lee. 2013. Jekyll on iOS: When Benign Apps Become Evil. In Proceedings of the USENIX Security Symposium.
[28] Robert NM Watson. 2013. A Decade of OS Access-Control Extensibility. Commun. ACM 56, 2 (2013), 52–63.
[29] Tim Werthmann, Ralf Hund, Lucas Davi, Ahmad-Reza Sadeghi, and Thorsten Holz. 2013. PSiOS: Bring Your Own Privacy & Security to iOS Devices. In Proceedings of the ACM Symposium on Information, Computer and Communications Security (ASIACCS).
[30] Luyi Xing, Xiaolong Bai, Tongxin Li, XiaoFeng Wang, Kai Chen, Xiaojing Liao, Shi-Min Hu, and Xinhui Han. 2015. Cracking App Isolation on Apple: Unauthorized Cross-App Resource Access on MAC OS. In Proceedings of the ACM Conference on Computer and Communications Security (CCS).

### Table 3: Measuring the Increasing Complexity of iOS Access Control

| Description/iOS Version | 7.0 | 7.1 | 8.0 | 8.1 | 8.2 | 8.3 | 8.4 |
|-------------------------|-----|-----|-----|-----|-----|-----|-----|
| Sandbox Profiles         | 63  | 63  | 95  | 95  | 99  | 100 | 100 |
| Used Sandbox Profiles    | 49  | 49  | 73  | 73  | 72  | 75  | 75  |
| Unused Sandbox Profiles  | 14  | 14  | 22  | 22  | 27  | 25  | 25  |
| Unsandboxed Executables  | 248 | 250 | 311 | 311 | 342 | 369 | 372 |
| Sandboxed Executables    | 66  | 66  | 100 | 100 | 102 | 106 | 107 |
| Percent Sandboxed        | 21  | 20.9| 24.3| 24.3| 23  | 22.3| 22.3|
| Facts Generated          | 12  | 12  | 22  | 22  | 26  | 27  | 28  |
| Container Sandbox Ops    | 1048| 1051| 1238| 1245| 1296| 1322| 1337|
| Non-Mobile Processes     | 114 | 114 | 114 | 114 | 114 | 114 | 114 |
| Root Processes           | 3   | 3   | 5   | 5   | 5   | 5   | 5   |
| Mobile Processes         | 23  | 23  | 29  | 29  | 29  | 29  | 29  |
| Other User Processes     | 54  | 54  | 93  | 93  | 93  | 93  | 93  |
| Unique Entitlement Keys  | 4   | 4   | 6   | 6   | 6   | 6   | 6   |
| Unique Sandbox Extensions| 312 | 320 | 503 | 505 | 544 | 562 | 562 |
| Default Allow Profiles   | 17  | 17  | 31  | 31  | 31  | 33  | 33  |
| Default Deny Profiles    | 1   | 1   | 1   | 1   | 1   | 1   | 1   |
| Unix Users               | 62  | 62  | 94  | 94  | 98  | 99  | 99  |
| Unix Groups              | 11  | 11  | 14  | 14  | 14  | 14  | 14  |
| Files on Firmware Rootfs | 67k | 70k | 89k | 90k | 98k | 100k| 100k|

This table illustrates the increasing complexity of iOS access control across different versions.