### Miss Rates in Different DRC Configurations
- The miss rate in a 512-entry DRC is 4.5%.
- The average miss rate in a 64-entry DRC is 20.6%.

### Performance Metrics
- **Speedup**: 
  - Y-axis: Speedup
  - X-axis: Applications
- **Normalized IPC**:
  - Y-axis: Normalized IPC
  - X-axis: Applications
  - Legends: DRC 512, DRC 128, DRC 64
- **DRC Miss Rate**:
  - Y-axis: DRC miss rate (%)
  - X-axis: Applications
  - Legends: DRC 512, DRC 64

### Detection of ROP Attacks
A method for detecting Return-Oriented Programming (ROP) attacks has been proposed, which involves observing program behavior and identifying gadget execution patterns [12]. Although not specifically targeting ROP exploits, some solutions use hardware performance counters to detect malware and verify control flow integrity [13], [48].

### Our Approach
Our work distinguishes itself from previous software-based and hardware-based solutions. Our system aims to enhance control flow diversity with native hardware support, improving performance and instruction fetch efficiency by preserving instruction locality while maximizing control flow randomness.

### Conclusion
We have developed a micro-architectural solution to enhance the dependability of software against code reuse attacks. Unlike prior hardware-based approaches, our method leverages software diversity and instruction location randomization. To address the inefficiencies in the memory system and instruction fetch caused by instruction layout randomization, we propose a novel micro-architecture design that supports native execution of ILR software while maintaining instruction fetch performance.

Using state-of-the-art architecture simulation frameworks, such as XIOSim, and a set of SPEC CPU2006 applications, we demonstrate that our solution achieves an average speedup of 1.63 times over a straightforward hardware implementation of ILR. The direct execution of randomized binaries incurs only a 2.1% IPC performance overhead. Currently, our proposed idea is limited to single-issue, in-order processors, which are commonly used in low-power embedded systems. However, in the near future, we plan to explore and extend this approach to out-of-order superscalar processors for high-performance computing systems.

### Acknowledgment
This work is supported in part by the National Science Foundation (Grant No. CNS-1205708, DGE-1433817) and the Memory Division of Samsung Electronics Co., Ltd.

### References
[1] H. Shacham, “The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86),” in Proc. 14th ACM Conf. Computer and Communications Security, 2007, pp. 552–561.
[2] E. Buchanan, R. Roemer, H. Shacham, and S. Savage, “When good instructions go bad: Generalizing return-oriented programming to RISC,” in Proc. 15th ACM Conf. Computer and Communications Security, 2008, pp. 27–38.
[3] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham, and M. Winandy, “Return-oriented programming without returns,” in Proc. 17th ACM Conf. Computer and Communications Security, 2010, pp. 559–572.
[4] S. Checkoway, A. J. Feldman, B. Kantor, J. A. Halderman, E. W. Felten, and H. Shacham, “Can DREs provide long-lasting security? The case of return-oriented programming and the AVC advantage,” in Proc. Conf. on Electronic Voting Technology/Workshop on Trustworthy Elections, 2009, pp. 6–21.
[5] T. Dullien, T. Kornau, and R.-P. Weinmann, “A framework for automated architecture-independent gadget search,” in Proc. 4th USENIX Conf. on Offensive Technologies, 2010, pp. 1–10.
[6] R. Hund, T. Holz, and F. C. Freiling, “Return-oriented rootkits: Bypassing kernel code integrity protection mechanisms,” in Proc. 18th Conf. on USENIX Security Symp., 2009, pp. 383–398.
[7] The Metasploit Project. [Online]. Available: http://www.metasploit.com/
[8] G. S. Kc, A. D. Keromytis, and V. Prevelakis, “Countering code-injection attacks with instruction-set randomization,” in Proc. 10th ACM Conf. Computer and Communications Security, 2003, pp. 272–280.
[9] J. D. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson, “ILR: Where’d my gadgets go?” in Proc. IEEE Symp. Security and Privacy, 2012, pp. 571–585.
[10] V. Pappas, M. Polychronakis, and A. D. Keromytis, “Smashing the gadgets: Hindering return-oriented programming using in-place code randomization,” in Proc. IEEE Symp. on Security and Privacy, 2012, pp. 601–615.
[11] M. Kayaalp, M. Ozsoy, N. Abu-Ghazaleh, and D. Ponomarev, “Branch regulation: Low-overhead protection from code reuse attacks,” SIGARCH Comput. Archit. News, vol. 40, no. 3, pp. 94–105, 2012.
[12] M. Kayaalp, S. T, J. Nomani, N. Abu-Ghazaleh, and D. Ponomarev, “Scrap: Architecture for signature-based protection from code reuse attacks,” in Proc. IEEE Int’l Symp. on High Performance Computer Architecture, 2013, pp. 258–269.
[13] J. Demme, M. Maycock, J. Schmitz, A. Tang, A. Waksman, S. Sethumadhavan, and S. Stolfo, “On the feasibility of online malware detection with performance counters,” in Proc. 40th Annual Int’l Symp. on Computer Architecture, 2013, pp. 559–570.
[14] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh, “On the effectiveness of address-space randomization,” in Proc. 11th ACM Conf. on Computer and Communications Security, 2004, pp. 298–307.
[15] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A.-R. Sadeghi, “Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization,” in Proc. of the 2013 IEEE Symp. on Security and Privacy, 2013, pp. 574–588.
[16] S. Kanev, G.-Y. Wei, and D. Brooks, “Xiosim: Power-performance modeling of mobile x86 cores,” in Proc. 2012 ACM/IEEE Int’l Symp. on Low Power Electronics and Design, 2012, pp. 267–272.
[17] G. Loh, S. Subramaniam, and Y. Xie, “Zesto: A cycle-level simulator for highly detailed microarchitecture exploration,” in Proc. IEEE Int’l Symp. on Performance Analysis of Systems and Software, 2009, pp. 53–64.
[18] Hex-rays. [Online]. Available: http://www.hex-rays.com/products/ida/index.shtml
[19] B. De Sutter, B. De Bus, K. De Bosschere, P. Keyngnaert, and B. Demoen, “On the static analysis of indirect control transfers in binaries,” 2000, pp. 1013–1019.
[20] B. De Sutter, B. De Bus, and K. De Bosschere, “Link-time binary rewriting techniques for program compaction,” ACM Transactions on Programming Languages and Systems, vol. 27, no. 5, pp. 882–945, 2005.
[21] M. Madou. Birma: Binary rewriter for mips architecture/matias madou. Available: http://lib.ugent.be/fulltxt/RUG01/000/777/296/RUG01-000777296 2010 0001 AC.pdf
[22] C. de Dinechin, “C++ exception handling for ia64.” in Proc. First Workshop on Industrial Experiences with Systems Software, 2000, pp. 67–76.
[23] J.-C. Laprie, “Dependability - its attributes, impairments and means,” in Predictably Dependable Computing Systems, ser. ESPRIT Basic Research Series, B. Randell, J.-C. Laprie, H. Kopetz, and B. Littlewood, Eds. Springer Berlin Heidelberg, 1995, pp. 3–18.
[24] Libtiff tifffetchshortpair remote buffer overflow vulnerability. [Online]. Available: http://www.securityfocus.com/bid/19283
[25] J. Salwan. (2012) ROPgadget. [Online]. Available: http://shell-storm.org/project/ROPgadget
[26] A. One, “Smashing the stack for fun and profit,” Phrack, vol. 7, no. 49, 1996.
[27] J. Pincus and B. Baker, “Beyond stack smashing: Recent advances in exploiting buffer overruns,” IEEE Security & Privacy, vol. 2, no. 4, pp. 20–27, 2004.
[28] J. Demme, R. Martin, A. Waksman, and S. Sethumadhavan, “A quantitative, experimental approach to measuring processor side-channel security,” IEEE Micro, vol. 33, no. 3, pp. 68–77, 2013.
[29] J. Demme, R. Martin, A. Waksman, and S. Sethumadhavan, “Side-channel vulnerability factor: A metric for measuring information leakage,” in Proc. 39th Annual Int’l Symp. on Computer Architecture, 2012, pp. 106–117.
[30] T. Zhang, F. Liu, S. Chen, and R. B. Lee, “Side channel vulnerability metrics: The promise and the pitfalls,” in Proc. 2nd Int’l Workshop on Hardware and Architectural Support for Security and Privacy, 2013, pp. 2:1–2:8.
[31] Standard Performance Evaluation Corporation. Spec cpu2006. [Online]. Available: https://www.spec.org
[32] S. Li, J. H. Ahn, R. D. Strong, J. B. Brockman, D. M. Tullsen, and N. P. Jouppi, “McPAT: An integrated power, area, and timing modeling framework for multicore and manycore architectures,” in Proc. 42nd Annual IEEE/ACM Int’l Symp. on Microarchitecture, 2009, pp. 469–480.
[33] P. Rosenfeld, E. Cooper-Balis, and B. Jacob, “Dramsim2: A cycle accurate memory system simulator,” IEEE Comput. Archit. Lett., vol. 10, no. 1, pp. 16–19, 2011.
[34] PaX Team, “PaX address space layout randomization (ASLR),” 2003.
[35] S. Bhatkar, D. C. DuVarney, and R. Sekar, “Address obfuscation: An efficient approach to combat a broad range of memory error exploits,” in Proc. 12th USENIX Security Symposium, 2003, pp. 105–120.
[36] S. Bhatkar, R. Sekar, and D. C. DuVarney, “Efficient techniques for comprehensive protection from memory error exploits,” in Proc. 14th USENIX Security Symposium, 2005, pp. 255–270.
[37] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning, “Address Space Layout Permutation (ASLP): Towards fine-grained randomization of commodity software,” in Proc. 22nd Annual Computer Security Applications Conf., 2006, pp. 339–348.
[38] L. Davi, A.-R. Sadeghi, and M. Winandy, “Ropdefender: A detection tool to defend against return-oriented programming attacks,” in Proc. 6th ACM Symp. on Information, Computer and Communications Security, 2011, pp. 40–51.
[39] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin, “Binary stirring: Self-randomizing instruction addresses of legacy x86 binary code,” in Proc. ACM Conf. Computer and Communications Security, 2012, pp. 157–168.
[40] E. G. Barrantes, D. H. Ackley, T. S. Palmer, D. Stefanovic, and D. D. Zovi, “Randomized instruction set emulation to disrupt binary code injection attacks,” in Proc. 10th ACM Conf. Computer and Communications Security, 2003, pp. 281–289.
[41] A. N. Sovarel, D. Evans, and N. Paul, “Where’s the FEEB? The effectiveness of instruction set randomization,” in Proc. 14th Conf. on USENIX Security Symp., 2005, pp. 10–25.
[42] C. Cowan, S. Beattie, J. Johansen, and P. Wagle, “PointGuardTM: Protecting pointers from buffer overflow vulnerabilities,” in Proc. 12th USENIX Security Symp, 2003, pp. 91–104.
[43] C. Cadar, P. Akritidis, M. Costa, J.-P. Martin, and M. Castro, “Data randomization,” Tech. Rep. MSR-TR-2008-120, 2008.
[44] S. Bhatkar and R. Sekar, “Data space randomization,” in Proc. Int. Conf. Detection of Intrusions and Malware, and Vulnerability Assessment, 2008, pp. 1–22.
[45] B. Cox, D. Evans, A. Filipi, J. Rowanhill, W. Hu, J. Davidson, J. Knight, A. Nguyen-Tuong, and J. Hiser, “N-variant systems: A secretless framework for security through diversity,” in Proc. 15th Conf. on USENIX Security Symposium, 2006, pp. 105–120.
[46] R. Huang, D. Y. Deng, and G. E. Suh, “Orthrus: Efficient software integrity protection on multi-cores,” SIGARCH Comput. Archit. News, vol. 38, no. 1, pp. 371–384, 2010.
[47] M. Kayaalp, M. Ozsoy, N. Abu-Ghazaleh, and D. Ponomarev, “Branch regulation: Low-overhead protection from code reuse attacks,” in Proc. 39th Int’l Symp. on Computer Architecture, 2012, pp. 94–105.
[48] Y. Xia, Y. Liu, H. Chen, and B. Zang, “CFIMon: Detecting violation of control flow integrity using performance counters,” in Proc. 42nd Annual IEEE/IFIP Int’l Conf. on Dependable Systems and Networks, 2012, pp. 1–12.