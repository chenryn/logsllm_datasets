### 5.6. 讨论

使用TAPC（类型感知指针损坏）来表征系统行为可以为处理损坏提供有价值的见解。如果NTFS和ext3文件系统在遇到损坏时能够完全恢复，那么它们分别可以在高达55%和40%的损坏场景下成功恢复。我们重点讨论了TAPC与损坏处理的相关性。

首先，TAPC没有考虑不同类型值出现的概率。这取决于损坏的来源。例如，如果损坏值是任意的，则超过99%的值可能是越界值；而由于位翻转导致的损坏则意味着损坏值接近正确值。虽然我们的概率无关方法不能提供文件系统因损坏而失败的概率，但它提供了有关文件系统如何处理损坏的重要见解。

其次，结果引发了一个问题：校验是否是正确的技术选择？尽管使用校验和（如ZFS中的校验和）可以显著提高损坏处理能力，但这并不能替代类型检查和校验提供的保护。例如，校验和无法防止文件系统错误地放置错误的指针值。

第三，在不改变磁盘格式的情况下，向文件系统添加校验和其他保护措施并不简单。类型感知指针损坏有助于识别潜在的校验点，这些校验点可以在不改变格式的情况下使用。

### 6. 相关工作

**软件故障注入**：多年来已经开发了许多软件故障注入技术和框架[6, 9, 15, 16, 17, 27]。其中最接近我们工作的是FTAPE [27]，它包括一个工作负载生成器和设备驱动级别的磁盘故障注入器。故障注入技术和框架已在各种实际系统的多项研究中得到应用。例如，Gu等人[14]研究了当Linux内核指令流中注入错误时的行为。

**文件系统研究**：最近的研究工作[29, 30]使用静态分析和检查技术来提取文件系统代码中的错误，而不是依赖于故障注入。我们的研究也类似于之前基于故障注入的行为分析[2, 18]。这些分析使用类型信息进行故障注入，以理解系统对磁盘错误和随机错误的行为。本文详细探讨了指针损坏的影响，并深入分析了NTFS；事实上，我们获得了关于文件系统行为的新见解。类型感知指针损坏和一些初步的NTFS实验在我们的立场论文[4]中进行了讨论。

**指针完整性**：许多研究工作致力于保护系统免受指针错误的影响。特别相关的是数据结构冗余[25]和高可用性系统中的数据保护[5]。各种文件系统已构建用于通过校验和保护数据和元数据[8, 18, 23]。使用TAPC来理解Sun ZFS [8]中校验和使用的细节将非常有趣。另一个相关的工作是类型安全磁盘[20]，确保文件系统不会使用损坏的磁盘指针访问数据。

### 7. 结论

文件系统依赖于磁盘上的指针来访问数据。尽管现代文件系统采用了不同的新技术来防止指针损坏，但我们需要了解这些技术在实际中的表现。

我们开发了类型感知指针损坏作为快速、系统化地分析文件系统损坏处理能力的方法。我们将TAPC应用于NTFS和ext3，发现尽管它们有潜力从许多指针损坏场景中恢复，但实际上并未实现，导致数据丢失、文件系统不可挂载和系统崩溃。我们通过这项研究得出了处理损坏指针的重要经验。

我们认为未来的文件系统应更加谨慎地实施指针保护技术。第一步是开发一致的损坏处理策略及其相应的机制，以便所有文件系统组件都能使用。

### 致谢

本材料基于美国国家科学基金会（NSF）的支持，项目编号为CCF-0621487, CNS-0509474, CCR-0133456。同时感谢Network Appliance和Sun Microsystems的慷慨捐赠。感谢我们的指导者Marco Vieira和匿名审稿人提出的详细意见，帮助改进了本文。文中表达的任何观点、结论或建议均为作者个人观点，并不一定反映NSF或其他机构的观点。

### 参考文献

[1] D. Anderson, J. Dykes, and E. Riedel. More Than an Interface: SCSI vs. ATA. In FAST '03, Apr. 2003.

[2] L. N. Bairavasundaram, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. Dependability Analysis of Virtual Memory Systems. In DSN '06, June 2006.

[3] L. N. Bairavasundaram, G. R. Goodson, B. Schroeder, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. An Analysis of Data Corruption in the Storage Stack. In FAST'08, 2008.

[4] L. N. Bairavasundaram, M. Rungta, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. Limiting Trust in the Storage Stack. In StorageSS '06, June 2006.

[5] W. Bartlett and L. Spainhower. Commercial Fault Tolerance: A Tale of Two Systems. IEEE Trans. on Dependable and Secure Computing, 1(1):87-96, Jan. 2004.

[6] J. Barton, E. Czeck, Z. Segall, and D. Siewiorek. Fault Injection Experiments Using FIAT. IEEE Transactions on Computers, 39(4):1105-1118, April 1990.

[7] S. Best. JFS Overview. www.ibm.com/developerworks/library/l-jfs.html, 2000.

[8] J. Bonwick. ZFS: The Last Word in File Systems. http://www.opensolaris.org/os/community/zfs/docs/zfs_last.pdf.

[9] J. Carreira, H. Madeira, and J. G. Silva. Xception: A Technique for the Experimental Evaluation of Dependability in Modern Computers. IEEE Trans. on Software Engg., 1998.

[10] A. Chou, J.-F. Yang, B. Chelf, S. Hallem, and D. E. Engler. An Empirical Study of Operating System Errors. In SOSP '01.

[11] D. Engler, D. Y. Chen, S. Hallem, A. Chou, and B. C. Chelf. Bugs as Deviant Behavior: A General Approach to Inferring Errors in Systems Code. In SOSP '01.

[12] S. Ghemawat, H. Gobioff, and S.-T. Leung. The Google File System. In SOSP '03, Bolton Landing, NY, October 2003.

[13] R. Green. EIDE Controller Flaws Version 24. http://mindprod.com/jgloss/eideflaw.html, Feb. 2005.

[14] W. Gu, Z. Kalbarczyk, R. K. Iyer, and Z. Yang. Characterization of Linux Kernel Behavior Under Error. In DSN '03, pages 459-468, San Francisco, CA, June 2003.

[15] S. Han, K. G. Shin, and H. A. Rosenberg. DOCTOR: An Integrated Software Fault Injection Environment for Distributed Real-Time Systems. In Proceedings of IPDS'95.

[16] G. A. Kanawati, N. A. Kanawati, and J. A. Abraham. FERRARI: A Flexible Software-Based Fault and Error Injection System. IEEE Transactions on Computing, 44(2), 1995.

[17] W. Jun Kao, R. K. Iyer, and D. Tang. FINE: A Fault Injection and Monitoring Environment for Tracing the UNIX System Behavior Under Faults. In IEEE Transactions on Software Engineering, pages 1105-1118, 1993.

[18] V. Prabhakaran, L. N. Bairavasundaram, N. Agrawal, H. S. Gunawi, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. IRON File Systems. In SOSP '05.

[19] T. J. Schwarz, Q. Xin, E. L. Miller, D. D. Long, Andy Hospodor, and S. Ng. Disk Scrubbing in Large Archival Storage Systems. In MASCOTS '04.

[20] G. Sivathanu, S. Sundararaman, and E. Zadok. Type-Safe Disks. In OSDI '06, Seattle, WA, November 2006.

[21] M. Sivathanu, V. Prabhakaran, F. I. Popovici, T. E. Denehy, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. Semantically-Smart Disk Systems. In FAST '03.

[22] D. A. Solomon. Inside Windows NT. Microsoft Programming Series. Microsoft Press, 2nd edition, 1998.

[23] C. A. Stein, J. H. Howard, and M. I. Seltzer. Unifying File System Protection. In USENIX '01, June 2001.

[24] R. Sundaram. The Private Lives of Disk Drives. http://www.netapp.com/go/techontap/matl/sample/0206toLresiliency.html, February 2006.

[25] D. J. Taylor, D. E. Morgan, and J. P. Black. Redundancy in Data Structures: Improving Software Fault Tolerance. IEEE Trans. on Software Engg., 6(6), 1980.

[26] The Data Clinic. Hard Disk Failure. http://www.dataclinic.co.uk/hard-disk-failures.htm, 2004.

[27] T. K. Tsai and R. K. Iyer. Measuring Fault Tolerance with the FTAPE Fault Injection Tool. In MASCOTS '95.

[28] S. C. Tweedie. Journaling the Linux ext2fs File System. In The 4th Annual Linux Expo, Durham, NC, May 1998.

[29] J. Yang, C. Sar, P. Twohey, C. Cadar, and D. Engler. Automatically Generating Malicious Disks using Symbolic Execution. In IEEE Security and Privacy, May 2006.

[30] J. Yang, P. Twohey, D. Engler, and M. Musuvathi. Using Model Checking to Find Serious File System Errors. In OSDI '04, San Francisco, CA, December 2004.

---

通过这种方式，文本变得更加清晰、连贯和专业。希望这对你有所帮助！