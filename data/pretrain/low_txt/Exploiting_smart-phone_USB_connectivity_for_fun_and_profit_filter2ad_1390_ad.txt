### 1. Introduction

To prevent attacks that replay keystrokes via the USB interface, bypassing user input, platform-specific rules must be implemented. In the interim, a full backup of the smartphone system can provide protection. This solution is both feasible and straightforward for most mobile devices. 

### 2. Full Backup as a Protective Measure

The internal ROM storage on smartphones is often limited, such as 512 MB in our case. Using a program that runs on the phone, it is possible to dump the entire filesystem, including the boot partition and kernel binaries, to a backend desktop system or even an external SD card. If the backup is performed from a clean state, a simple revert can defeat all persistent malware, including rootkits. However, restoring the phone to a pristine state may lead to the loss of user personalization data. Therefore, this method should be considered an emergency measure rather than a comprehensive or user-friendly solution.

### 3. Related Work

#### 3.1 Platform-Specific Attacks and Defenses

- **Understanding Android’s Security Framework** [14]: This presentation provides a high-level overview of the mechanisms required to develop secure applications within the Android development framework. It covers the basics of building an Android application and highlights the importance of securing described interfaces to defend against general malfeasance.
  
- **Application-Centric Policies** [21]: Authors argue that the existing security model in Android is insufficient and propose the need for semantically rich and application-centric policies.
  
- **Trust and Integrity Measurement** [19]: The authors discuss methods to establish trust and measure the integrity of applications on mobile phone systems.
  
- **Black Hat 2009** [11]: Focuses on application security on the Android platform, highlighting the open nature of the platform and its potential for proprietary extensions and changes.
  
- **Android Security Mechanisms** [23, 24]: Shabtai et al. assess the security mechanisms incorporated in Google’s Android framework and provide recommendations for enhancing security. They also identify current threats and vulnerabilities.
  
- **TaintDroid** [13]: A tool designed to expose how user-permitted applications access and use private or sensitive data, such as location, phone numbers, and SIM card identifiers, and notify users in real-time.

#### 3.2 Rootkits on Mobile Devices

- **Cloaker** [12]: A non-persistent rootkit that does not alter any part of the host operating system (OS) code or data, making it immune to existing rootkit detection techniques. It leverages the ARM architecture design to remain hidden.
  
- **Rootkit Vulnerability** [10]: Demonstrates that smartphones are as vulnerable to rootkits as desktop operating systems, with unique social consequences due to their ubiquity and unique interfaces.

#### 3.3 Power Drain Attacks

- **Malware and Power Depletion** [22, 16]: Studies malware that aims to deplete power resources on mobile devices, primarily through MMS/SMS interfaces.
  
- **WiFi, Bluetooth, and Display Overuse** [18]: Applications can overuse these features, causing a denial of service attack.
  
- **VirusMeter** [17]: Models power consumption and detects malware based on power abnormalities, though the approach is not scalable.

#### 3.4 Stealthy Video and Audio Surveillance

- **Stealthy Video Capture** [26]: Xu et al. describe an attack that stealthily captures video using the onboard camera on smartphones, storing the video on disk for later transfer to the attacker.

#### 3.5 Text Messages Attacks

- **SMS/MMS Exploits** [22, 15]: Special message packets can compromise GSM infrastructure, with mitigating mechanisms proposed.
  
- **SMiShing** [6]: Malware that uses text-messaging APIs to send fake messages to contacts.

#### 3.6 Buffer Overflows

- **Buffer Overflows** [4]: These vulnerabilities plague mobile devices, with recent threats targeting web browsers and other software like Adobe PDF viewers.

### 4. Conclusions

In this paper, we introduce several new types of attack vectors that exploit the inherent trust users place on the physical USB connectivity between a smartphone and their computer. These attacks are feasible due to the new hardware and software capabilities of third-generation smartphones. We describe how an adversary can subvert one connected device to control the other by crafting a USB cable capable of putting a subverted smartphone into host mode. While our experiments focused on Android platforms, these attacks can be generalized to other third-generation smartphones, including Apple’s iPhone. We discuss the underlying reasons why USB attacks are successful and propose potential defense mechanisms to limit or prevent such attacks in the future.

### 5. Acknowledgements

We thank Nelson Nazzica, Quan Jia, Meixing Le, and Jiang Wang from the Center for Secure Information Systems at George Mason University for their comments on our early draft. We also thank the anonymous ACSAC reviewers for their constructive feedback. This work was supported in part by the US National Science Foundation (NSF) grant CNS-TC 0915291 and a research fund from Google Inc. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the NSF.

### 6. References

[1] Android. http://developer.android.com/.

[2] Autoplay in Windows XP: Automatically detect and react to new devices on a system. http://msdn.microsoft.com/en-us/magazine/cc301341.aspx.

[3] Dark side arises for phone apps. http://online.wsj.com/article/SB10001424052748703340904575284532175834088.html?mod=WSJ_newsreel_technology.

[4] Hacking Windows CE. http://www.phrack.org/issues.html?issue=63&id=6.

[5] Nexus One features and specifications. http://www.google.com/phone/static/en_US-nexusone_tech_specs.html.

[6] SMS phishing, records system and method. http://www.f-secure.com/weblog/archives/archive-042007.html.

[7] USB 2.0 specification. http://www.usb.org.

[8] USB Gadget API for Linux. http://www.kernel.org/doc/htmldocs/gadget.html.

[9] USB On-The-Go. http://www.usb.org/developers/onthego/.

[10] Bickford, J., O’Hare, R., Baliga, A., Ganapathy, V., and Iftode, L. Rootkits on Smartphones: Attacks, Implications, and Opportunities. In HotMobile ’10: Proceedings of the Eleventh Workshop on Mobile Computing Systems & Applications (New York, NY, USA, 2010), ACM, pp. 49–54.

[11] Burns, J. Mobile Application Security on Android. In Black Hat ’09 (2009), Black Hat USA.

[12] David, F. M., Chan, E. M., Carlyle, J. C., and Campbell, R. H. Cloaker: Hardware Supported Rootkit Concealment. In SP ’08: Proceedings of the 2008 IEEE Symposium on Security and Privacy (Washington, DC, USA, 2008), IEEE Computer Society, pp. 296–310.

[13] Enck, W., Gilbert, P., gon Chun, B., Jung, L. P. C. J., McDaniel, P., and Sheth, A. N. TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. In OSDI ’10: Proceedings of the 9th Symposium on Operating Systems Design and Implementation (New York, NY, USA, 2010), ACM, pp. 255–270.

[14] Enck, W., and McDaniel, P. Understanding Android’s Security Framework. In CCS ’08: Proceedings of the 15th ACM Conference on Computer and Communications Security (New York, NY, USA, 2008), ACM, pp. 552–561.

[15] Enck, W., Traynor, P., McDaniel, P., and La Porta, T. Exploiting Open Functionality in SMS-Capable Cellular Networks. In CCS ’05: Proceedings of the 12th ACM Conference on Computer and Communications Security (New York, NY, USA, 2005), ACM, pp. 393–404.

[16] Kim, H., Smith, J., and Shin, K. G. Detecting Energy-Greedy Anomalies and Mobile Malware Variants. In MobiSys ’08: Proceeding of the 6th International Conference on Mobile Systems, Applications, and Services (New York, NY, USA, 2008), ACM, pp. 239–252.

[17] Liu, L., Yan, G., Zhang, X., and Chen, S. VirusMeter: Preventing Your Cellphone from Spies. In RAID ’09: Proceedings of the 12th International Symposium on Recent Advances in Intrusion Detection (Berlin, Heidelberg, 2009), Springer-Verlag, pp. 244–264.

[18] Moyers, B. R., Dunning, J. P., Marchany, R. C., and Tront, J. G. Effects of Wi-Fi and Bluetooth Battery Exhaustion Attacks on Mobile Devices. In HICSS ’10: Proceedings of the 2010 43rd Hawaii International Conference on System Sciences (Washington, DC, USA, 2010), IEEE Computer Society, pp. 1–9.

[19] Muthukumaran, D., Sawani, A., Schiffman, J., Jung, B. M., and Jaeger, T. Measuring Integrity on Mobile Phone Systems. In SACMAT ’08: Proceedings of the 13th ACM Symposium on Access Control Models and Technologies (New York, NY, USA, 2008), ACM, pp. 155–164.

[20] Nash, D. C., Martin, T. L., Ha, D. S., and Hsiao, M. S. Towards an Intrusion Detection System for Battery Exhaustion Attacks on Mobile Computing Devices. In PERCOMW ’05: Proceedings of the Third IEEE International Conference on Pervasive Computing and Communications Workshops (Washington, DC, USA, 2005), IEEE Computer Society, pp. 141–145.

[21] Ongtang, M., McLaughlin, S., Enck, W., and McDaniel, P. Semantically Rich Application-Centric Security in Android. In In ACSAC ’09: Annual Computer Security Applications Conference (2009).

[22] Radmilo Racic, D. M., and Chen, H. Exploiting MMS Vulnerabilities to Stealthily Exhaust Mobile Phone's Battery. In In SecureComm 06 (2006), SECURECOMM, pp. 1–10.

[23] Shabtai, A., Fledel, Y., Kanonov, U., Elovici, Y., and Dolev, S. Google Android: A State-of-the-Art Review of Security Mechanisms. CoRR abs/0912.5101 (2009).

[24] Shabtai, A., Fledel, Y., Kanonov, U., Elovici, Y., Dolev, S., and Glezer, C. Google Android: A Comprehensive Security Assessment. IEEE Security and Privacy 8 (2010), 35–44.

[25] Traynor, P., Enck, W., McDaniel, P., and Porta, T. L. Mitigating Attacks on Open Functionality in SMS-Capable Cellular Networks. IEEE/ACM Trans. Netw. 17, 1 (2009), 40–53.

[26] Xu, N., Zhang, F., Luo, Y., Jia, W., Xuan, D., and Teng, J. Stealthy Video Capturer: A New Video-Based Spyware in 3G Smartphones. In WiSec ’09: Proceedings of the Second ACM Conference on Wireless Network Security (New York, NY, USA, 2009), ACM, pp. 1–10.