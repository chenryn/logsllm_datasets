### Optimized Text

**Performance and Scalability of Sechduler**

During a typical computer usage session, the number of scheduled tasks can reach up to 18,000 per second. We measured the time required for converting policy specifications into automata for a system based on linear temporal logic (LTL) [1]. Figure 2(c) presents the results for individual temporal security policies. As shown, Sechduler completed the conversion for individual temporal requirements in approximately 0.58 seconds on average, indicating that it can scale effectively for real-world scenarios involving multiple requirements.

**Case Study: Sensitive File Modification**

We demonstrate how Sechduler protects a target host system when it is subjected to a sensitive file modification attack. Samhain was deployed as the attack detection system. Specifically, we modified its configuration file, `/etc/samhain/samhainrc`, to monitor the files and directories of interest and set it to report events with at least a critical severity level.

Initially, we created the initial database, `/var/state/samhain/samhain_file`, using `samhain -t init`, and updated it using `samhain -t update`. During the operational mode, Samhain was configured to check the marked sensitive files and directories against its database and trigger an alert upon detecting any modifications or access, as defined in the configuration file.

To simulate an attack, we implemented a trojan version of Firefox that modified sensitive user files monitored by Samhain. Figure 2(d) shows the scheduling activity statistics of the malware within a non-Sechduler-aware kernel. Upon detecting the attack, Samhain fired an alert, and Sechduler performed the following actions:
1. Called the `setsec` system call to lower the security level of the Firefox process.
2. Initiated a comprehensive ClamAV virus scan on the Firefox executable.
3. Compiled the triggered alert's corresponding policy module and loaded it dynamically onto the kernel.

By enforcing the loaded policy, Sechduler manipulated the task selection procedure within the kernel scheduler to prevent the potentially malicious Firefox process from gaining CPU access until ClamAV provided a clean signal. In our experiments, ClamAV detected malicious content in the executable, leading Sechduler to terminate the suspended Firefox process and remove its executable. Figure 2(e) illustrates a different run of the trojan Firefox on a Sechduler-enabled Linux kernel, where Sechduler denies execution requests starting from the 69th second and ultimately terminates the process. The process termination was implemented as a single countermeasure, but more complex actions can be defined and implemented through policies.

**System Performance Overhead**

It is crucial that Sechduler performs runtime system security verification efficiently to minimize the impact on overall system throughput. We measured the performance overhead of Sechduler on our testbed system using the Apache Webserver benchmarking toolset. To make the webpage processing more CPU-intensive, we designed a simple HTML webpage. For our server system, we defined the overall performance measure as the number of requests processed per second. Figure 2(f) shows the effect of runtime verification on the system's throughput. We believe that the overall performance overhead of Sechduler can be further reduced by optimizing the code, such as redesigning frequently searched data structures for logarithmic search, thereby improving overall system performance.

**Acknowledgments**

The authors would like to thank the Office of Naval Research (Grant N000141210462) for their support.

**References**

[1] Dwyer, M. B., Avrunin, G. S., and Corbett, J. C. Patterns in property specifications for finite-state verification. In Proceedings of the 21st International Conference on Software Engineering (New York, NY, USA, 1999), ICSE '99, ACM, pp. 411–420.

[2] Jiang, K., and Jonsson, B. Using SPIN to model check concurrent algorithms, using a translation from C to Promela. In Proc. 2nd Swedish Workshop on Multi-Core Computing (2009), Department of Information Technology, Uppsala University, pp. 67–69.

[3] King, S. T., and Chen, P. M. Backtracking intrusions. In Proceedings of the Nineteenth ACM Symposium on Operating Systems Principles (2003), vol. 37, pp. 223–236.

[4] Pabla, C. S. Completely fair scheduler. Linux J. 2009, 184 (Aug. 2009).

[5] Routray, R., Zhang, R., Eyers, D., Willcocks, D., Pietzuch, P., and Sarkar, P. Policy generation framework for large-scale storage infrastructures. In IEEE Symposium on Policies for Distributed Systems and Networks (2010), pp. 65–72.

[6] Sato, H., and Yakoh, T. A real-time communication mechanism for RTLinux. In Annual Conference of the IEEE Industrial Electronics Society (2000), vol. 4, pp. 2437–2442.

[7] Wotring, B., Potter, B., Ranum, M., and Wichmann, R. Host Integrity Monitoring Using Osiris and Samhain. Syngress Publishing, 2005.

[8] Zonouz, S. A., Joshi, K. R., and Sanders, W. H. Floguard: cost-aware systemwide intrusion defense via online forensics and on-demand IDS deployment. In International Conference on Computer Safety, Reliability, and Security (2011), pp. 338–354.