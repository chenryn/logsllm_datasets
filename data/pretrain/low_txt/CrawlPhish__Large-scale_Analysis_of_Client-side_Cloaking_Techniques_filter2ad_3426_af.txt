### Requests and Forced Execution

During forced execution, CrawlPhish can modify the configurations of browser profiles before the JavaScript code sends an `XMLHttpRequest` to check for potential divergent responses. This modification can reveal whether cloaking techniques are dependent on AJAX. If such techniques are in use, the screenshots taken after mutation and forced execution will differ, allowing CrawlPhish to identify the presence of evasion tactics.

---

### Related Work

#### Studies on Phishing and Cloaking Techniques

Oest et al. analyzed server-side cloaking techniques within a dataset of 2,313 phishing kits and proposed a taxonomy of five different types of cloaking [44]. They also demonstrated that cloaking techniques, including basic JavaScript cloaking, can effectively bypass detection by anti-phishing blacklists [43]. In an end-to-end analysis of large-scale phishing attacks, Oest et al. found that sophisticated evasion techniques are prevalent but not effectively mitigated by the anti-phishing ecosystem [46].

In our work, we present the first in-depth analysis of client-side cloaking techniques in the context of phishing, based on a dataset of 112,005 live phishing websites.

Invernizzi et al. studied server-side web cloaking techniques against search engines and proposed methods to identify and bypass such cloaking [30]. CrawlPhish leverages these methods to overcome server-side cloaking during crawling. The authors focused on mutating browser profiles to detect server-side cloaking and found that 11.7% of search results were cloaked. Their study considered cloaking techniques used for SEO, advertisements, and drive-by download attacks but did not investigate client-side cloaking techniques implemented in JavaScript. In contrast, we discovered and analyzed diverse client-side cloaking techniques from the perspective of phishing attacks.

#### JavaScript Analysis Techniques

Several static [18, 32, 65] and dynamic [34, 36] analysis approaches have been proposed to analyze malicious JavaScript code. However, no prior work has attempted to automatically extract JavaScript code semantics for identifying and classifying cloaking techniques. Arrow and Zozzle are static analysis methods for classifying JavaScript malware based on previously discovered malicious scripts [18, 65]. Revolver detects evasive JavaScript code through similarity checks against known malicious matters [32]. Rozzle is a multi-execution virtual machine that explores multiple execution paths in parallel to enhance the efficiency of dynamic analysis for large-scale experiments [36]. J-Force enhances dynamic analysis by force-executing JavaScript code, regardless of conditions, to explore all possible execution paths [34], making it suitable for revealing content hidden behind JavaScript cloaking code.

Similar semantic analysis has been performed in other contexts. Coogan et al. proposed a de-obfuscation approach that identifies behaviors of malicious programs based on the flow of values to system calls [15]. BEAGLE assigns semantics to malware by dynamically monitoring system and API calls to compare versions of malicious code and quantify their differences, observing the evolution of a series of malware [39]. Zhang et al. introduced a semantic-based static analysis approach to reveal the behaviors of malicious Android applications, leveraging an API dependency graph to classify malware and identify variants [66].

### Conclusion

Through the first in-depth analysis of client-side JavaScript code used by phishing websites, we have uncovered a wide range of sophisticated evasion techniques. Our approach not only categorizes these techniques based on their semantics but also measures their prevalence in the wild. We observed that client-side evasion is becoming increasingly common.

Client-side JavaScript enables website developers to implement complex interactions between their sites and visitors. Evasion techniques implemented in this manner pose a significant threat to the ecosystem, as they can effectively discriminate between automated crawler visits and potential human victims. Unfortunately, client-side evasion techniques are difficult to analyze due to the dynamic nature of JavaScript code. CrawlPhish addresses this difficulty in a scalable manner, capable of detecting and categorizing client-side evasion with high accuracy and tracking the origin of different implementations.

Given the rise of sophisticated phishing websites, we believe that automated analysis systems like CrawlPhish are essential for maintaining an understanding of phishers' evolving tactics. Methodologies like ours can be incorporated into the ecosystem to more expeditiously and reliably detect sophisticated phishing, thereby helping prevent users from falling victim to these attacks through continuous enhancement of appropriate mitigations.

### Acknowledgments

We would like to thank our shepherd, Giancarlo Pellegrino, and the anonymous reviewers for their valuable feedback. This material is based upon work supported partially by the National Science Foundation (NSF) under Grant No. CNS-1703644 and CNS-1703375, the Defense Advanced Research Projects Agency (DARPA) under Grant No. HR001118C0060 and FA875019C0003, the Institute for Information & Communications Technology Promotion (IITP) grant funded by the Korean government (MSIT) (No. 2017-0-00168, Automatic Deep Malware Analysis Technology for Cyber Threat Intelligence), the NSF Center for Accelerated Real Time Analytics - NCSU, and a grant from the Center for Cybersecurity and Digital Forensics (CDF) at Arizona State University.

### References

[1] “000webhost: Free web hosting,” https://www.000webhost.com/migrate?static=true.
[2] “Amazon Mechanical Turk,” https://www.mturk.com/.
[3] “Event reference,” https://developer.mozilla.org/en-US/docs/Web/Events.
[4] “Jsinspect: Detect copy-pasted and structurally similar code,” https://github.com/danielstjules/jsinspect.
[5] “Katalon Studio,” https://www.katalon.com/katalon-studio/.
[6] “OpenPhish,” https://openphish.com.
[7] E. Alowaisheq, P. Wang, S. Alrwais, X. Liao, X. Wang, T. Alowaisheq, X. Mi, S. Tang, and B. Liu, “Cracking the wall of confinement: Understanding and analyzing malicious domain take-downs,” in Proceedings of the Network and Distributed System Security Symposium (NDSS), 2019.
[8] B. Anderson, “Best automation testing tools for 2018 (top 10 reviews),” https://medium.com/@briananderson2209/best-automation-testing-tools-for-2018-top-10-reviews-8a4a19f664d2.
[9] APWG, “Phishing Activity Trends Report 3rd Quarter 2019,” 2019, https://docs.apwg.org/reports/apwg-trends-report-q3-2019.pdf.
[10] L. Bilge, E. Kirda, C. Kruegel, and M. Balduzzi, “Exposure: Finding malicious domains using passive DNS analysis.” in NDSS, 2011, pp. 1–17.
[11] S. Bin, W. Qiaoyan, and L. Xiaoying, “A DNS-based anti-phishing approach,” in 2010 Second International Conference on Networks Security, Wireless Communications and Trusted Computing, vol. 2. IEEE, 2010, pp. 262–265.
[12] A. Blum, B. Wardman, T. Solorio, and G. Warner, “Lexical feature-based phishing URL detection using online learning,” in Proceedings of the 3rd ACM Workshop on Artificial Intelligence and Security. ACM, 2010, pp. 54–60.
[13] D. Canali, D. Balzarotti, and A. Francillon, “The role of web hosting providers in detecting compromised websites,” in Proceedings of the 22nd International Conference on World Wide Web. ACM, 2013, pp. 177–188.
[14] T. W. Club, “Web browser automatically adds www to URL,” 2016, https://www.thewindowsclub.com/browser-automatically-adds-www-to-url.
[15] K. Coogan, G. Lu, and S. Debray, “Deobfuscation of virtualization-obfuscated software: A semantics-based approach,” in Proceedings of the 18th ACM Conference on Computer and Communications Security, 2011, pp. 275–284.
[16] M. Cova, C. Kruegel, and G. Vigna, “There is no free phish: An analysis of 'free' and live phishing kits.” WOOT, vol. 8, pp. 1–8, 2008.
[17] ——, “Detection and analysis of drive-by-download attacks and malicious JavaScript code,” in Proceedings of the 19th International Conference on World Wide Web, 2010, pp. 281–290.
[18] C. Curtsinger, B. Livshits, B. G. Zorn, and C. Seifert, “Zozzle: Fast and precise in-browser JavaScript malware detection.” in USENIX Security Symposium. San Francisco, 2011, pp. 33–48.
[19] R. Dhamija, J. D. Tygar, and M. Hearst, “Why phishing works,” in Proceedings of the SIGCHI Conference on Human Factors in Computing Systems. ACM, 2006, pp. 581–590.
[20] M. W. Docs, “Mozilla Web APIs,” https://developer.mozilla.org/en-US/docs/Web/API.
[21] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee, “RFC2616: Hypertext Transfer Protocol–HTTP/1.1,” 1999, https://www.ietf.org/rfc/rfc2616.txt.
[22] Google, “Transparency report,” 2019, https://transparencyreport.google.com/safe-browsing/overview?hl=en.
[23] ——, “Manual actions report,” 2020, https://support.google.com/webmasters/answer/9044175?hl=en&ref_topic=4596795.
[24] C. Guarnieri, “The Year of the Phish,” 2019, https://nex.sx/blog/212/15/the-year-of-the-phish.html.
[25] Z. Guo, “World-wide cloaking phishing websites detection,” 2017.
[26] R. W. Hamming, “Error detecting and error correcting codes,” The Bell System Technical Journal, vol. 29, no. 2, pp. 147–160, 1950.
[27] G. Ho, A. Cidon, L. Gavish, M. Schweighauser, V. Paxson, S. Savage, G. M. Voelker, and D. Wagner, “Detecting and characterizing lateral phishing at scale,” in 28th USENIX Security Symposium, 2019, pp. 1273–1290.
[28] A. Holmes and M. Kellogg, “Automating functional tests using Selenium,” in AGILE 2006 (AGILE’06). IEEE, 2006, pp. 6–pp.
[29] H. Huang, L. Qian, and Y. Wang, “A SVM-based technique to detect phishing URLs,” Information Technology Journal, vol. 11, no. 7, pp. 921–925, 2012.
[30] L. Invernizzi, K. Thomas, A. Kapravelos, O. Comanescu, J.-M. Picod, and E. Bursztein, “Cloak of visibility: Detecting when machines browse a different web,” in 2016 IEEE Symposium on Security and Privacy (SP). IEEE, 2016, pp. 743–758.
[31] T. Kachalov and zamotkin, “JavaScript obfuscator,” https://github.com/javascript-obfuscator/javascript-obfuscator.
[32] A. Kapravelos, Y. Shoshitaishvili, M. Cova, C. Kruegel, and G. Vigna, “Revolver: An automated approach to the detection of evasive web-based malware,” in Presented as part of the 22nd USENIX Security Symposium, 2013, pp. 637–652.
[33] M. Khonji, A. Jones, and Y. Iraqi, “A novel phishing classification based on URL features,” in 2011 IEEE GCC Conference and Exhibition (GCC). IEEE, 2011, pp. 221–224.
[34] K. Kim, I. L. Kim, C. H. Kim, Y. Kwon, Y. Zheng, X. Zhang, and D. Xu, “J-Force: Forced execution on JavaScript,” in Proceedings of the 26th International Conference on World Wide Web. International World Wide Web Conferences Steering Committee, 2017, pp. 897–906.
[35] J. C. King, “Symbolic execution and program testing,” Communications of the ACM, vol. 19, no. 7, pp. 385–394, 1976.
[36] C. Kolbitsch, B. Livshits, B. Zorn, and C. Seifert, “Rozzle: De-cloaking internet malware,” in 2012 IEEE Symposium on Security and Privacy. IEEE, 2012, pp. 443–457.
[37] N. Leontiadis, T. Moore, and N. Christin, “Measuring and analyzing search-redirection attacks in the illicit online prescription drug trade.” in USENIX Security Symposium, vol. 11, 2011.
[38] B. Liang, M. Su, W. You, W. Shi, and G. Yang, “Cracking classifiers for evasion: A case study on Google’s phishing pages filter,” in Proceedings of the 25th International Conference on World Wide Web, 2016, pp. 345–356.
[39] M. Lindorfer, A. Di Federico, F. Maggi, P. M. Comparetti, and S. Zanero, “Lines of malicious code: Insights into the malicious software industry,” in Proceedings of the 28th Annual Computer Security Applications Conference, 2012, pp. 349–358.
[40] “Windows Defender SmartScreen,” 2019, https://github.com/MicrosoftDocs/windows-itpro-docs/blob/public/windows/security/threat-protection/windows-defender-smartscreen/windows-defender-smartscreen-overview.md.
[41] A. Modi, Z. Sun, A. Panwar, T. Khairnar, Z. Zhao, A. Doupé, G.-J. Ahn, and P. Black, “Towards automated threat intelligence fusion,” in 2016 IEEE 2nd International Conference on Collaboration and Internet Computing (CIC). IEEE, 2016, pp. 408–416.
[42] X.-m. Niu and Y.-h. Jiao, “An overview of perceptual hashing,” Acta Electronica Sinica, vol. 36, no. 7, pp. 1405–1411, 2008.
[43] A. Oest, Y. Safaei, A. Doupé, G.-J. Ahn, B. Wardman, and K. Tyers, “Phishfarm: A scalable framework for measuring the effectiveness of evasion techniques against browser phishing blacklists,” in Proceedings of the 40th IEEE Symposium on Security and Privacy (Oakland), Oakland, CA, May 2019, pp. 764–781.
[44] A. Oest, Y. Safaei, A. Doupé, G.-J. Ahn, B. Wardman, and G. Warner, “Inside a phisher’s mind: Understanding the anti-phishing ecosystem through phishing kit analysis,” in 2018 APWG Symposium on Electronic Crime Research (eCrime). IEEE, 2018, pp. 1–12.
[45] A. Oest, Y. Safaei, P. Zhang, B. Wardman, K. Tyers, Y. Shoshitaishvili, A. Doupé, and G.-J. Ahn, “PhishTime: Continuous longitudinal measurement of the effectiveness of anti-phishing blacklists,” in Proceedings of the 29th USENIX Security Symposium, 2020.
[46] A. Oest, P. Zhang, B. Wardman, E. Nunes, J. Burgis, A. Zand, K. Thomas, A. Doupé, and G.-J. Ahn, “Sunrise to sunset: Analyzing the end-to-end life cycle and effectiveness of phishing attacks at scale,” in Proceedings of the 29th USENIX Security Symposium, 2020.
[47] I. C. Paya and T. Chow, “Combining a browser cache and cookies to improve the security of token-based authentication protocols,” Jul. 3 2007, US Patent 7,240,192.
[48] “PhishStats,” https://phishstats.info/.
[49] “PhishTank,” https://phishtank.com.
[50] T. Rotolo, “Mouse movement patterns and user frustration,” 2016, https://www.trymyui.com/blog/2016/10/28/mouse-movement-patterns-and-user-frustration/.
[51] F. Shiver, “APWG and the eCrime Exchange: A member network providing collaborative threat data sharing,” 2016, https://www.first.org/resources/papers/valencia2017/shiver-foy-slides.pdf.
[52] V. E. Solutions, “Data Breach Investigations Report (DBIR),” 2019.
[53] Z. Sun, C. E. Rubio-Medrano, Z. Zhao, T. Bao, A. Doupé, and G.-J. Ahn, “Understanding and predicting private interactions in underground forums,” in Proceedings of the Ninth ACM Conference on Data and Application Security and Privacy (CODASPY). ACM, 2019.
[54] K. Thomas, F. Li, A. Zand, J. Barrett, J. Ranieri, L. Invernizzi, Y. Markov, O. Comanescu, V. Eranti, A. Moscicki et al., “Data breaches, phishing, or malware?: Understanding the risks of stolen credentials,” in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2017, pp. 1421–1434.
[55] A. Van Der Heijden and L. Allodi, “Cognitive triaging of phishing attacks,” in 28th USENIX Security Symposium, 2019, pp. 1309–1326.
[56] L. Von Ahn, B. Maurer, C. McMillen, D. Abraham, and M. Blum, “reCAPTCHA: Human-based character recognition via web security measures,” Science, vol. 321, no. 5895, pp. 1465–1468, 2008.
[57] W3C, “HTTP Archive (HAR) format,” https://w3c.github.io/web-performance/specs/HAR/Overview.html.
[58] ——, “Web Notifications,” 2015, https://www.w3.org/TR/notifications/.
[59] D. Y. Wang, S. Savage, and G. M. Voelker, “Cloak and dagger: Dynamics of web search cloaking,” in Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS). ACM, 2011, pp. 477–490.
[60] Y.-M. Wang and M. Ma, “Detecting stealth web pages that use click-through cloaking,” in Microsoft Research Technical Report, MSR-TR, 2006.
[61] C. Whittaker, B. Ryner, and M. Nazif, “Large-scale automatic classification of phishing pages,” in Proceedings of the 28th Network and Distributed System Security Symposium (NDSS), 2010.
[62] M. Wu, R. C. Miller, and G. Little, “Web Wallet: Preventing phishing attacks by revealing user intentions,” in Proceedings of the Second Symposium on Usable Privacy and Security. ACM, 2006, pp. 102–113.
[63] G. Xiang, J. Hong, C. P. Rose, and L. Cranor, “Cantina+: A feature-rich machine learning framework for detecting phishing web sites,” ACM Transactions on Information and System Security (TISSEC), vol. 14, no. 2, p. 21, 2011.
[64] H. Zhang, G. Liu, T. W. Chow, and W. Liu, “Textual and visual content-based anti-phishing: A Bayesian approach,” IEEE Transactions on Neural Networks, vol. 22, no. 10, pp. 1532–1546, 2011.
[65] J. Zhang, C. Seifert, J. W. Stokes, and W. Lee, “Arrow: Generating signatures to detect drive-by downloads,” in Proceedings of the 20th International Conference on World Wide Web. ACM, 2011, pp. 187–196.
[66] M. Zhang, Y. Duan, H. Yin, and Z. Zhao, “Semantics-aware Android malware classification using weighted contextual API dependency graphs,” in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, 2014, pp. 1105–1116.
[67] Y. Zhang, J. I. Hong, and L. F. Cranor, “Cantina: A content-based approach to detecting phishing web sites,” in Proceedings of the 16th International Conference on World Wide Web. ACM, 2007, pp. 639–648.