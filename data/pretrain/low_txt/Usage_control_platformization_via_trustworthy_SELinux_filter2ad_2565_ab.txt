### Requirement 5: Establishing a Trust Chain for Policy Enforcement

To ensure that the policies remain consistent before and after a transformation, it is essential to build a trust chain for policy enforcement. This trust chain should start from the data or service provider (the usage control policy stakeholder) and extend to the target platform where the policies are enforced. The trust chain involves several key components, including the Usage Control Policies, the Data/Service Provider, the Target Platform, and the Trusted Subsystem.

High assurance of a subsystem in a remote computing platform should originate from a root-of-trust and then be extended to other system components. Typically, Mandatory Access Control (MAC) mechanisms are implemented in the kernel of the operating system (OS) on the platform. Therefore, a trusted subsystem should include a trusted kernel and any other components booted before the kernel, such as the BIOS and boot loader.

To establish trust in the MAC mechanism within a trusted subsystem, all supporting components must also be trusted. These components include policy transformation and management, subject and object attribute acquisition, and the reference monitor itself. The primary goal of this trust chain is to create a trusted runtime environment for object access, where the integrity of all related parts can be verified by a stakeholder.

### Requirement 6: Building a Trusted Subsystem with a Minimum Trusted Computing Base

To build a practical and usable trusted subsystem, it is desirable to have a minimum trusted computing base (TCB). The TCB includes all the components in the trust chain for policy enforcement during runtime. A large TCB increases both the cost of system development and verification, as each trusted component requires detailed verification of its software implementation.

Our work adheres to these principles. Specifically, we propose a platform architecture with mandatory and minimum components. Our implementation leverages emerging trusted computing technologies with hardware-based root-of-trust. We utilize the MAC mechanism in SELinux for policy enforcement and develop a policy transformation mechanism from high-level XACML policies to SELinux policies using an extended MAC policy model. Due to space constraints, we provide a high-level overview of our platform architecture in the following section.

### 3. Platform Architecture

A trusted subsystem comprises a root-of-trust, a trust chain, a policy transformation and enforcement mechanism, and a runtime integrity measurement mechanism. Figure 2 illustrates a target platform architecture for enforcing usage control policies.

#### Hardware Layer
The hardware layer includes a Trusted Platform Module (TPM), a Core Root of Trust Measurement (CRTM), and other devices. The TPM and CRTM provide the hardware-based root-of-trust for the entire platform. Similar to trusted or authenticated boot, the booting components, including the BIOS, boot loader, and OS kernel, are measured, and their integrity values are stored in specific Platform Configuration Registers (PCRs) of the TPM. According to the TCG specification, the CRTM is the first component to run when the platform boots. It measures the integrity of the BIOS before the BIOS starts, which in turn measures the boot loader, and then the kernel and kernel modules, recursively. Along this booting and measurement sequence, particular PCRs are extended with the measured values, resulting in P_CRboot. The TPM ensures that P_CRboot is reset once the platform reboots.

#### User Request and Policy Download
Upon a user's request on the target platform, a client application (e.g., a healthcare client software) is invoked to communicate with a data owner/provider to obtain an object. Simultaneously, a policy can be downloaded by the client application from a stakeholder, which may or may not be the same as the data provider. For example, a data provider can delegate its policy specification and enforcement to a security service provider, making the latter the policy stakeholder when the object is downloaded and processed on the client platform.

#### Policy Transformation and Enforcement
When a usage control policy (e.g., an XACML policy file) is downloaded from its stakeholder, it is transformed by the policy transformation component into MAC policies that can be enforced by the reference monitor. The client application is the target process that manipulates the object and is protected by MAC policies. These policies also include rules to control access to the object from others and any configurations for the client application and the overall security system (e.g., local security policy management).

#### Environmental Authorization Factors
Usage control policies typically include environmental authorization factors such as time and location. Sensors send this environmental information to the policies. For example, in a mobile application where a service can only be accessed in a specific location, the sensor reports the physical (e.g., through a cellular network provider or GPS) or logical (e.g., through a Wi-Fi access point) location of the device, such as home, office, or airport.

#### Reference Monitor
At the kernel level, the reference monitor captures every possible access attempt to the object and queries the MAC policies before allowing the access. The reference monitor must capture all types of access attempts, from storage in the local file system to the memory space of the object. It also controls interactions between the client application and others, both locally and remotely, according to the loaded MAC policies.

#### Integrity Measurement Service (IMS)
The IMS is a mandatory component in a trusted subsystem, starting right after the kernel is booted. Its main function is to measure the mandatory components that make up the TCB for enforcing usage control policies. All measured events and integrity values are stored in a measurement list, and corresponding PCRs are extended. Specifically:
- The reference monitor is measured after the kernel is booted.
- The client application, object, and configurations are measured right before the client application is invoked.
- The integrity of the usage control policy (e.g., XACML policy file downloaded from its stakeholder), policy transformation service, and the sensor are measured when they are invoked and before they run.
- MAC policies are measured when they are loaded, either at platform boot or during runtime (i.e., loaded by the policy transformation service).
- Any other applications or services that communicate with the client application are also measured.

To allow access to a target object only from authorized applications and control the information flow between the application and others, the IMS must measure not only the policy enforcement services such as policy transformation and platform sensors but also all applications that interact with the client application running on the same platform.

#### Integrity Verification Service
As part of the policy specifications, the integrity verification service verifies the integrity values measured by the IMS and generates inputs for the reference monitor. For example, the client application can only access the target object if its "current" integrity is a known good value, where the current integrity is the one measured by the IMS.

Note that while we use data objects (e.g., files) in this paper, our usage control mechanism is applicable to other types of objects such as messages and streams. The essential requirement for the object is that its authenticity and integrity can be verified, ensuring that the initial state of the platform can be trusted.

### 4. Conclusions and Future Work

Usage control focuses on enforcing security policies on a remote client platform with high assurance and verifiable trust. In this paper, we identified general security requirements for usage control and proposed a general framework for this problem. Our approach builds a trusted subsystem on an open platform, allowing a policy stakeholder to deploy sensitive data and services. We propose an architecture with a hardware-based TPM as the root-of-trust and consider integrity measurement/verification and other environmental restrictions in our MAC policy model.

We are currently implementing a prototype system based on a mobile reference platform and exploring automated policy transformations in a mobile computing environment. Additionally, our architecture is extensible, allowing extra components to be included in the TCB of a trusted subsystem to meet increased security requirements. We are particularly investigating how to enforce obligation policies in our architecture.

### 5. References

[1] Fairplay. http://en.wikipedia.org/wiki/FairPlay.
[2] TCG Specification Architecture Overview. https://www.trustedcomputinggroup.org.
[3] Windows Media Digital Rights Management (DRM). http://www.microsoft.com/windows/windowsmedia/drm/default.aspx.
[4] M. Abadi, M. Burrows, and B. Lampson. A calculus for access control in distributed systems. ACM Transactions on Programming Languages and Systems, 15(4):706–734, 1993.
[5] J. P. Anderson. Computer Security Technology Planning Study Volume II, ESD-TR-73-51, Vol. II, Electronic Systems Division, Air Force Systems Command, Hanscom Field, Bedford, MA 01730. http://csrc.nist.gov/publications/history/ande72.pdf, Oct. 1972.
[6] D. E. Bell and L. J. LaPadula. Secure Computer Systems: Mathematical Foundations and Model. Mitre Corp. Report No.M74-244, Bedford, Mass., 1975.
[7] K. J. Biba. Integrity Considerations for Secure Computer System. Technical report, Mitre Corp. Report TR-3153, Bedford, Mass., 1977.
[8] Matt Blaze, Joan Feigenbaum, and Jack Lacy. Decentralized Trust Management. In Proceedings of IEEE Symposium on Security and Privacy, pages 164–173, Oakland, CA, May 1996.
[9] D. E. Denning. A Lattice Model of Secure Information Flow. Communications of the ACM, 19(5), May 1976.
[10] Department of Defense National Computer Security Center. Department of Defense Trusted Computer Systems Evaluation Criteria, December 1985. DoD 5200.28-STD.
[11] J. Dyer, M. Lindemann, R. Perez, R. Sailer, L. van Doorn, S. W. Smith, and S. Weingart. Building the IBM 4758 Secure Coprocessor. IEEE Computer, (10):57–66, 2001.
[12] M. H. Harrison, W. L. Ruzzo, and J. D. Ullman. Protection in Operating Systems. Communication of ACM, 19(8), 1976.
[13] A. Herzberg, Y. Mass, J. Mihaeli, D. Naor, and Y. Ravid. Access Control Meets Public Key Infrastructure, or: Assigning Roles to Strangers. In Proc. of IEEE Symposium on Security and Privacy, pages 2–14, 2000.
[14] M. Hilty, D. Basin, and A. Pretschner. On Obligations. In Proc. of 10th European Symp. on Research in Computer Security, September 2005.
[15] B. Lampson. Computer Security in the Real World. IEEE Computer, (6):37–46, June 2004.
[16] B.W. Lampson. Protection. In 5th Princeton Symposium on Information Science and Systems, pages 437–443, 1971. Reprinted in ACM Operating Systems Review 8(1):18–24, 1974.
[17] N. Li, J. C. Mitchell, and W. H. Winsborough. Design of a Role-Based Trust-Management Framework. In Proc. of IEEE Symposium on Security and Privacy, pages 114–130, 2002.
[18] P. Loscocco, S. Smalley, P. Muckelbauer, R. Taylor, J. Turner, and J. Farrell. The Inevitability of Failure: The Flawed Assumption of Computer Security in Modern Computing Environments. In Proceedings of the National Information Systems Security Conference, October 1998.
[19] J. Park and R. Sandhu. The UCONabc Usage Control Model. ACM Transactions on Information and Systems Security, 7(1):128–174, February 2004.
[20] A. Pretschner, M. Hilty, and D. Basin. Distributed Usage Control. Communications of the ACM, (9):39–44, September 2006.
[21] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design and Implementation of a TCG-Based Integrity Measurement Architecture. In USENIX Security Symposium, pages 223–238, 2004.
[22] R. Sandhu. Good-Enough Security: Toward a Pragmatic Business-Driven Discipline. IEEE Internet Computing, (1):66–68, January/February 2003.
[23] R. Sandhu, K. Ranganathan, and X. Zhang. Secure Information Sharing Enabled by Trusted Computing and PEI Models. In Proceedings of ACM Symposium on Information, Computer, and Communication Security, Taipei, Taiwan, March 21-24, 2006.