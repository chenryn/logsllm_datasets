## 小结

今天，我从如何选择、如何使用以及如何改进三个方面详细介绍了如何有效地利用开源项目。希望这些内容对你有所帮助。今天的课程到此结束，但我为你准备了一道思考题：目前，许多云计算提供商都推出了与开源项目类似的系统（例如阿里云的HBase）。你会倾向于购买云服务商提供的系统，还是更愿意将开源系统部署在云服务器上？请分享你的理由。欢迎在留言区留下你的见解，让我们一起探讨。我相信，通过深入思考并回答这个问题，你将对相关知识有更加深刻的理解。（编辑提示：优秀的留言有机会获得丰厚奖励！）

![](Images/f2eae62fce5bba3ca5ee38d11da01862.png){savepage-src="https://static001.geekbang.org/resource/image/ba/37/ba6fcd186893b8cc9977d18e1fa5ab37.jpg"}

# 49 | 谈谈App架构的演进

截止到上一期，我们已经讨论了架构设计中的多种理念、技术和实践经验。你可能会注意到，这些内容主要聚焦于后端系统的架构设计，如存储高可用性、微服务和异地多活等。然而，这并不意味着前端或App就没有架构设计的需求。实际上，本专栏所介绍的一整套架构设计理念同样适用于前端和App。

首先，让我们回顾一下专栏中提到的几个关键点：

- **架构是系统的顶层结构。**
- **架构设计的主要目标在于解决软件系统复杂度带来的问题。**
- **架构设计需遵循三个基本原则：适用性原则、简洁性原则及演化原则。**
- **进行架构设计时，应先掌握业界已成熟的各类架构模式，并在此基础上进行优化、调整乃至创新。**

现在，我们将重点转向App架构的发展历程，并探讨上述架构设计的关键要素是如何在其中体现的。

## Web App

早期的许多App采用了Web App架构，尤其是在新业务尝试阶段。这种架构又称为“包壳”架构，其核心思想是在Web应用的基础上添加一个App外壳，使用户感觉像是在使用原生App，但实际上大部分功能仍然依赖于Web技术实现。

那么，为什么早期的App或新业务会选择这种架构呢？原因在于当时的业务复杂度决定了这一点。以2010年前后的移动互联网环境为例，尽管移动互联网正在快速发展，但由于硬件设备和网络速度等方面的限制，PC互联网依然是主流。因此，在这样的背景下，企业更多地将移动互联网视为一种尝试性的探索领域，追求的是快速迭代和低成本投入。鉴于当时原生App开发成本较高，Web App便成为了首选方案，它有效解决了“快速开发”与“低成本”两大挑战，体现了架构设计中的“适用性”与“简洁性”原则。

## 原生 App

随着移动互联网市场的不断成熟和技术的进步，Web App逐渐暴露出了一些明显的局限性，比如用户体验不佳等问题变得越来越突出。具体来说：

- 移动设备性能提升的速度远超Web技术发展速度，导致两者之间的体验差距日益增大。
- 随着时间推移，移动互联网成为不可逆转的趋势，App承载的功能也越来越复杂，进一步加剧了Web App的体验问题。
- 新兴技术不断涌现，为改善移动端用户体验提供了更多可能性，但这些新技术往往只能通过原生App来实现。

因此，当业务需求转向注重用户体验时，采用原生App架构成为了必然选择。这一转变也遵循了架构设计中的“演化”原则。大约从2013年开始，原生App迎来了爆发式增长期，Android和iOS开发者也因此变得非常抢手。

## Hybrid App

尽管原生App能够提供出色的用户体验，但在面对快速变化的市场需求时仍存在一些不足之处——特别是跨平台开发效率低下这一痛点。由于不同操作系统（如Android、iOS甚至曾经流行的Windows Phone）之间缺乏兼容性，相同功能需要重复开发多次，严重影响了开发速度。

为了解决这个问题，Hybrid App应运而生。其基本思路是根据具体应用场景灵活选择原生或Web技术实现，从而达到兼顾开发效率与用户体验的目的。例如，对于那些对交互效果要求较高的部分可以采用原生代码编写；而对于更新频繁且对即时性要求不高的内容，则可以通过嵌入Web页面的方式完成。这种方式充分体现了架构设计中强调的“适用性”原则。