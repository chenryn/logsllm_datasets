Certainly! Below is a more polished and professional version of the provided text, with improved clarity, coherence, and structure:

---

### 1. Run Virtual Instance
**Created:** 2020-06-29T15:36:41.535Z  
**Description:**
Adversaries may use virtual instances to carry out malicious operations, thereby evading detection. Various virtualization technologies allow for the emulation of a computer or computing environment. By executing malicious code within a virtual instance, adversaries can hide artifacts associated with their activities from security tools that cannot monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (e.g., bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host, as the IP address and hostname might not match known values. [1]

Adversaries may utilize native support for virtualization (e.g., Hyper-V) or drop the necessary files to run a virtual instance (e.g., VirtualBox binaries). After running a virtual instance, they may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system. [2]

**Detection:**
- Monitor for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (e.g., VirtualBox, VMware, QEMU, Hyper-V).
- Consider monitoring the size of virtual machines running on the system, as adversaries may create smaller virtual images.
- Network adapter information may also help in detecting the use of virtual instances.
- Monitor for process command-line arguments that are atypical for benign use of virtualization software.
- Monitor for commands that enable hypervisors such as Hyper-V.
- If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for Windows Services related to virtualization software.

**References:**
1. Committee of Inquiry into the Cyber Attack on SingHealth. (2019, January 10). Public Report of the Committee of Inquiry into the Cyber Attack on Singapore Health Services Private Limited's Patient Database. Retrieved June 29, 2020.
2. SophosLabs. (2020, May 21). Ragnar Locker ransomware deploys virtual machine to dodge security. Retrieved June 29, 2020.

---

### 2. Trap
**Created:** 2017-12-14T16:46:06.044Z  
**Description:**
The `trap` command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common use case is a script that handles keyboard interrupts like Ctrl+C and Ctrl+D for graceful termination. Adversaries can use this to register code to be executed when the shell encounters specific interrupts, either to gain execution or as a persistence mechanism. The `trap` command format is `trap 'command list' signals`, where "command list" will be executed when "signals" are received. [3][4]

**Detection:**
- Monitor files for suspicious or overly broad trap commands to narrow down suspicious behavior during an investigation.
- Monitor for suspicious processes executed through trap interrupts.

**References:**
3. ss64. (n.d.). trap. Retrieved May 21, 2019.
4. Cyberciti. (2016, March 29). Trap statement. Retrieved May 21, 2019.

---

### 3. Password Policy Discovery
**Created:** 2018-04-18T17:59:24.739Z  
**Description:**
Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies enforce complex passwords that are difficult to guess or crack through brute force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks that adhere to the policy.

Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as `net accounts (/domain)`, `Get-ADDefaultDomainPasswordPolicy`, `chage -l`, `cat /etc/pam.d/common-password`, and `pwpolicy getaccountpolicies`. Adversaries may also leverage a Network Device CLI on network devices to discover password policy information. In cloud environments, available APIs such as `GetAccountPasswordPolicy` in AWS can be used to discover password policy information. [5][6][7][8][9]

**Detection:**
- Monitor logs and processes for tools and command-line arguments that may indicate they are being used for password policy discovery.
- Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity.

**References:**
5. Amazon Web Services. (n.d.). AWS API GetAccountPasswordPolicy. Retrieved June 8, 2021.
6. Holland, J. (2016, January 25). User password policies on non AD machines. Retrieved April 5, 2018.
7. Matutiae, M. (2014, August 6). How to display password policy information for a user (Ubuntu)?. Retrieved April 5, 2018.
8. US-CERT. (2018, April 20). Alert (TA18-106A) Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices. Retrieved October 19, 2020.

---

### 4. Event Triggered Execution
**Created:** 2020-01-22T21:04:23.285Z  
**Description:**
Adversaries may establish persistence and/or escalate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activities. Cloud environments may also support functions and services that monitor and can be invoked in response to specific cloud events. [10][11][12][13][14][15]

After gaining access to a victim system, adversaries may create or modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked. Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.

**Detection:**
- Monitor for additions or modifications of mechanisms that could be used to trigger event-based execution, especially the addition of abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network.
- These mechanisms may vary by OS but are typically stored in central repositories that store configuration information such as the Windows Registry, Common Information Model (CIM), and/or specific named files.
- Tools such as Sysinternals Autoruns can be used to detect changes to execution triggers that could be attempts at persistence.
- Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process.

**References:**
10. Ballenthin, W., et al. (2015). Windows Management Instrumentation (WMI) Offense, Defense, and Forensics. Retrieved March 30, 2016.
11. Berk Veral. (2020, March 9). Real-life cybercrime stories from DART, the Microsoft Detection and Response Team. Retrieved May 27, 2022.
12. Claud Xiao, Cong Zheng, Yanhui Jia. (2017, April 6). New IoT/Linux Malware Targets DVRs, Forms Botnet. Retrieved February 19, 2018.
13. Daniel Grzelak. (2016, July 9). Backdooring an AWS account. Retrieved May 27, 2022.
14. Eric Saraga. (2022, February 2). Using Power Automate for Covert Data Exfiltration in Microsoft 365. Retrieved May 27, 2022.
15. Patrick Wardle. (2015). Malware Persistence on OS X Yosemite. Retrieved July 10, 2017.

---

### 5. Unix Shell Configuration Modification
**Created:** 2020-01-24T14:13:45.936Z  
**Description:**
Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH), a login shell is initiated. The login shell executes scripts from the system (`/etc`) and the user’s home directory (`~/`) to configure the environment. All login shells on a system use `/etc/profile` when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. [16][17][18][19][20][21][22][23][24][25][26][27][28][29]

Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the `/etc/profile` and `/etc/profile.d` files. For user-level permissions, adversaries can insert malicious commands into `~/.bash_profile`, `~/.bash_login`, or `~/.profile` which are sourced when a user opens a command-line interface or connects remotely. Some malware targets the termination of a program to trigger execution, and adversaries can use the `~/.bash_logout` file to execute malicious commands at the end of a session.

For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using `/etc/profile`, `/etc/zshenv`, `/etc/zprofile`, and `/etc/zlogin`. The login shell then configures the user environment with `~/.zprofile` and `~/.zlogin`. The interactive shell uses the `~/.zshrc` to configure the user environment. Upon exiting, `/etc/zlogout` and `~/.zlogout` are executed. For legacy programs, macOS executes `/etc/bashrc` on startup.

**Detection:**
- While users may customize their shell profile files, there are only certain types of commands that typically appear in these files. Monitor for abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network when user profiles are loaded during the login process.
- Monitor for changes to `/etc/profile` and `/etc/profile.d`, as these files should only be modified by system administrators.

**References:**
16. Paul Litvak. (2020, May 4). Kaiji: New Chinese Linux malware turning to Golang. Retrieved December 17, 2020.
17. Benjamin Cane. (2013, September 16). Understanding a little more about /etc/profile and /etc/bashrc. Retrieved February 25, 2021.
18. Anomali Threat Research. (2019, October 15). Illicit Cryptomining Threat Actor Rocke Changes Tactics, Now More Difficult to Detect. Retrieved December 17, 2020.
19. ArchWiki. (2021, January 19). Bash. Retrieved February 25, 2021.
20. Claud Xiao and Cong Zheng. (2017, April 6). New IoT/Linux Malware Targets DVRs, Forms Botnet. Retrieved December 17, 2020.
21. Anomali Threat Research. (2018, December 6). Pulling Linux Rabbit/Rabbot Malware Out of a Hat. Retrieved December 17, 2020.
22. Cesar Anjos. (2018, May 31). Shell Logins as a Magento Reinfection Vector. Retrieved December 17, 2020.
23. Armin Briegel. (2019, June 5). Moving to zsh, part 2: Configuration Files. Retrieved February 25, 2021.
24. Leo Pitt. (2020, August 6). Persistent JXA - A poor man's Powershell for macOS. Retrieved January 11, 2021.
25. Leo Pitt. (2020, November 11). Github - PersistentJXA/BashProfilePersist.js. Retrieved January 11, 2021.
26. Cedric Owens. (2021, May 22). macOS MS Office Sandbox Brain Dump. Retrieved August 20, 2021.
27. Patrick Wardle. (2019, September 17). Writing a File Monitor with Apple's Endpoint Security Framework. Retrieved December 17, 2020.

---

### 6. Forced Authentication
**Created:** 2018-01-16T16:13:52.465Z  
**Description:**
Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept. The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource, it will automatically attempt to authenticate and send credential information for the current user to the remote system. [30][31][32][33][34][35]

Web Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. [36][37]

Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. They can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary, or place a specially crafted file on the navigation path for privileged accounts (e.g., `.SCF` file placed on desktop) or on a publicly accessible share to be accessed by victims. When the user's system accesses the untrusted resource, it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary-controlled server. With access to the credential hash, an adversary can perform offline brute force cracking to gain access to plaintext credentials. [38][39]

**Detection:**
- Monitor for SMB traffic on TCP ports 139, 445, and UDP port 137 and WebDAV traffic attempting to exit the network to unknown external systems.
- If attempts are detected, investigate endpoint data sources to find the root cause.
- Monitor creation and modification of `.LNK`, `.SCF`, or any other files on systems and within virtual environments that contain resources that point to external network resources as these could be used to gather credentials when the files are rendered.

**References:**
30. Wikipedia. (2017, December 16). Server Message Block. Retrieved December 21, 2017.
31. Stevens, D. (2017, November 13). WebDAV Traffic To Malicious Sites. Retrieved December 21, 2017.
32. Microsoft. (n.d.). Managing WebDAV Security (IIS 6.0). Retrieved December 21, 2017.
33. Dunning, J. (2016, August 1). Hashjacking. Retrieved December 21, 2017.
34. Cylance. (2015, April 13). Redirect to SMB. Retrieved December 21, 2017.
35. Osanda Malith Jayathissa. (2017, March 24). Places of Interest in Stealing NetNTLM Hashes. Retrieved January 26, 2018.
36. US-CERT. (2017, October 20). Alert (TA17-293A): Advanced Persistent Threat Activity Targeting Energy and Other Critical Infrastructure Sectors. Retrieved November 2, 2017.

---

### 7. SID-History Injection
**Created:** 2020-02-18T18:34:49.414Z  
**Description:**
Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. An account can hold additional SIDs in the SID-History Active Directory attribute, allowing inter-operable account migration between domains. [40][41][42][43][44][45]

With Domain Administrator (or equivalent) rights, harvested or well-known SID values may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as Remote Services, SMB/Windows Admin Shares, or Windows Remote Management.

**Detection:**
- Examine data in user’s SID-History attributes using the PowerShell `Get-ADUser` cmdlet. Also, monitor account management events on Domain Controllers for successful and failed changes to SID-History.
- Monitor for Windows API calls to the `DsAddSidHistory` function.

**References:**
40. Microsoft. (n.d.). Security Identifiers. Retrieved November 30, 2017.
41. Microsoft. (n.d.). Active Directory Schema - SID-History attribute. Retrieved November 30, 2017.
42. Microsoft. (2017, June 23). Well-known security identifiers in Windows operating systems. Retrieved November 30, 2017.
43. Microsoft. (n.d.). Active Directory Cmdlets - Get-ADUser. Retrieved November 30, 2017.
44. Metcalf, S. (2015, September 19). Sneaky Active Directory Persistence #14: SID History. Retrieved November 30, 2017.
45. Microsoft. (n.d.). Using DsAddSidHistory. Retrieved November 30, 2017.

---

### 8. Network Boundary Bridging
**Created:** 2020-10-19T16:08:29.817Z  
**Description:**
Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks. Devices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks. They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections. Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications. [46]

When an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hindrance. By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to further achieve goals such as command and control via Multi-hop Proxy or exfiltration of data via Traffic Duplication. Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with Internal Proxy to achieve the same goals. [47]

**Detection:**
- Consider monitoring network traffic on both interfaces of border network devices with out-of-band packet capture or network flow data, using a different device than the one in question.
- Look for traffic that should be prohibited by the intended network traffic policy enforcement for the border network device.
- Monitor the border network device’s configuration to validate that the policy enforcement sections are what was intended.
- Look for rules that are less restrictive or that allow specific traffic types that were not previously authorized.

**References:**
46. Vyacheslav Kopeytsev and Seongsu Park. (2021, February 25). Lazarus targets defense industry with ThreatNeedle. Retrieved October 27, 2021.

---

### 9. Data Encrypted for Impact
**Created:** 2019-03-15T13:59:30.390Z  
**Description:**
Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. [48][49][50][51][52]

In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.

To maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as "print bombing").

In cloud environments, storage objects within compromised accounts may also be encrypted. [53]

**Detection:**
- Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as `vssadmin`, `wbadmin`, and `bcdedit`.
- Monitor for the creation of suspicious files as well as unusual file modification activity.
- In some cases, monitoring for unusual kernel driver installation activity can aid in detection.
- In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.

**References:**
48. Baskin, B. (2020, July 8). TAU Threat Discovery: Conti Ransomware. Retrieved February 17, 2021.
49. Berry, A., Homan, J., and Eitzman, R. (2017, May 23). WannaCry Malware Profile. Retrieved March 15, 2019.
50. Gietzen, S. (n.d.). S3 Ransomware Part 1: Attack Vector. Retrieved April 14, 2021.
51. NHS Digital. (2020, November 26). Egregor Ransomware The RaaS successor to Maze. Retrieved December 29, 2020.
52. US-CERT. (2016, March 31). Alert (TA16-091A): Ransomware and Recent Variants. Retrieved March 15, 2019.
53. US-CERT. (2017, July 1). Alert (TA17-181A): Petya Ransomware. Retrieved March 15, 2019.
54. US-CERT. (2018, December 3). Alert (AA18-337A): SamSam Ransomware. Retrieved March 15, 2019.

---

### 10. Disk Content Wipe
**Created:** 2019-03-29T14:59:50.763Z  
**Description:**
Adversaries may erase the contents of storage devices on specific systems as well as large numbers of systems in a network to interrupt availability to system and network resources. Adversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface. Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data. Adversaries have been observed leveraging third-party drivers like RawDisk to directly access disk content. This behavior is distinct from Data Destruction because sections of the disk are erased instead of individual files. [55][56][57][58][59]

To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and Windows Admin Shares.

**Detection:**
- Look for attempts to read/write to sensitive locations like the partition boot sector or BIOS parameter block/superblock.
- Monitor for unusual kernel driver installation activity.

**References:**
55. Novetta Threat Research Group. (2016, February 24). Operation Blockbuster: Unraveling the Long Thread of the Sony Attack. Retrieved February 25, 2016.
56. Novetta Threat Research Group. (2016, February 24). Operation Blockbuster: Destructive Malware Report. Retrieved March 2, 2016.
57. Department of Justice. (2018, September 6). Criminal Complaint - United States of America v. PARK JIN HYOK. Retrieved March 29, 2019.

---

### 11. Subvert Trust Controls
**Created:** 2020-02-05T14:54:07.588Z  
**Description:**
Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.

Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct File and Directory Permissions Modification or Modify Registry in support of subverting these controls. Adversaries may also create or steal code signing certificates to acquire trust on target systems. [60][61][62][63]

**Detection:**
- Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers.
- Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries.
- Analyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations.
- Monitor and investigate attempts to modify extended file attributes with utilities such as `xattr`.

**References:**
60. Graeber, M. (2017, December 22). Code Signing Certificate Cloning Attacks and Defenses. Retrieved April 3, 2018.
61. Graeber, M. (2017, September). Subverting Trust in Windows. Retrieved January 31, 2018.
62. Ladikov, A. (2015, January 29). Why You Shouldn’t Completely Trust Files Signed with Digital Certificates. Retrieved March 31, 2016.
63. Shinotsuka, H. (2013, February 22). How Attackers Steal Private Keys from Digital Certificates. Retrieved March 31, 2016.

---

### 12. Elevated Execution with Prompt
**Created:** 2020-01-30T14:40:20.187Z  
**Description:**
Adversaries may leverage the `AuthorizationExecuteWithPrivileges` API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials, but no checks on the origin or integrity of the program are made. The program calling the API may also load world-writable files which can be modified to perform malicious behavior with elevated privileges. [64][65][66][67][68]

Adversaries may abuse `AuthorizationExecuteWithPrivileges` to obtain root privileges in order to install malicious software on victims and install persistence mechanisms. This technique may be combined with Masquerading to trick the user into granting escalated privileges to malicious code. This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.

**Detection:**
- Consider monitoring for `/usr/libexec/security_authtrampoline` executions, which may indicate that `AuthorizationExecuteWithPrivileges` is being executed.
- MacOS system logs may also indicate when `AuthorizationExecuteWithPrivileges` is being called.
- Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.

**References:**
64. Apple. (n.d.). Apple Developer Documentation - AuthorizationExecuteWithPrivileges. Retrieved August 8, 2019.
65. Carbon Black Threat Analysis Unit. (2019, February 12). New macOS Malware Variant of Shlayer (OSX) Discovered. Retrieved August 8, 2019.
66. Patrick Wardle. (2017). Death by 1000 installers; it's all broken!. Retrieved August 8, 2019.
67. Patrick Wardle. (2018, February 17). Tearing Apart the Undetected (OSX)Coldroot RAT. Retrieved August 8, 2019.

---

### 13. Firmware
**Created:** 2020-10-02T16:46:42.537Z  
**Description:**
Adversaries may gather information about the victim's host firmware that can be used during targeting. Information about host firmware may include a variety of details such as type and versions on specific hosts, which may be used to infer more information about hosts in the environment (e.g., configuration, purpose, age/patch level, etc.).

Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about host firmware may only be exposed to adversaries via online or other accessible data sets (e.g., job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance, establishing operational resources, and/or initial access. [69]

**Detection:**
- Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.
- Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.

**References:**
69. Goodin, D. & Salter, J. (2020, August 6). More than 20GB of Intel source code and proprietary data dumped online. Retrieved October 20, 2020.

---

### 14. Encrypted Channel
**Created:** 2020-03-16T15:33:01.739Z  
**Description:**
Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files. [70][71][72]

**Detection:**
- SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.
- In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.

**References:**
70. Butler, M. (2013, November). Finding Hidden Threats by Decrypting SSL. Retrieved April 5, 2016.
71. Dormann, W. (2015, March 13). The Risks of SSL Inspection. Retrieved April 5, 2016.
72. Gardiner, J., Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.

---

### 15. Password Filter DLL
**Created:** 2018-01-16T16:13:52.465Z  
**Description:**
Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as dynamic link libraries (DLLs) containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts.

Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.

Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made. [73][74]

**Detection:**
- Monitor for change notifications to and from unfamiliar password filters.
- Newly installed password filters will not take effect until after a system reboot.
- Password filters will show up as an autorun and loaded DLL in `lsass.exe`.

**References:**
73. Fuller, R. (2013, September 11). Stealing passwords every time they change. Retrieved November 21, 2017.
74. Bialek, J. (2013, September 15). Intercepting Password Changes With Function Hooking. Retrieved November 21, 2017.

---

### 16. Authentication Package
**Created:** 2020-01-24T14:54:42.757Z  
**Description:**
Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. [75][76][77]

Adversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location `HKLM\SYSTEM\CurrentControlSet\Control\Lsa\` with the key value of "Authentication Packages"=<target binary>. The binary will then be executed by the system when the authentication packages are loaded.

**Detection:**
- Monitor the Registry for changes to the LSA Registry keys.
- Monitor the LSA process for DLL loads.
- Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned DLLs try to load into the LSA by setting the Registry key `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\LSASS.exe` with `AuditLevel = 8`.

**References:**
75. Graeber, M. (2014, October). Analysis of Malicious Security Support Provider DLLs. Retrieved March 1, 2017.
76. Microsoft. (2013, July 31). Configuring Additional LSA Protection. Retrieved June 24, 2015.
77. Microsoft. (n.d.). Authentication Packages. Retrieved March 1, 2017.

---

### 17. Regsvr32
**Created:** 2020-01-23T19:52:17.414Z  
**Description:**
Adversaries may abuse `regsvr32.exe` to proxy execution of malicious code. `regsvr32.exe` is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs