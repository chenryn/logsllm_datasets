### Fault Injection Results

**Figure 8. Results from fault injection.**

- **Total Faults Injected:** 400
- **No Crash:** 49 (134)
- **User-Driver Contained (UD):** 26 (14)
- **Clear Logs:** 212 (147)
- **In Logs:** 113 (105)
- **Detected by RPC Monitor:**
  - 8139too: 95 (84%)
  - 8139cp: 64 (61%)

#### Experimental Setup and Observations

We used an off-the-shelf fault injector [42] to inject 400 random faults into the user-driver (u-driver) of each microdriver. The primary objective was to measure the number of faults that propagated to the kernel via Remote Procedure Calls (RPC) and the number of these faults detected by our invariants.

Our current prototype lacks a recovery subsystem, so any fault that propagates to the kernel results in a system crash. The RPC monitor can detect data corruption but cannot prevent or recover from a system crash. Therefore, we inspected the system logs following each crash to determine whether the RPC monitor had detected the crash.

**Key Findings:**

- **No Crash and User-Driver Containment:**
  - In some cases, the system did not crash, and the faults were contained within the u-driver (indicated by the #NoCrash and #UD columns).
  - The majority of the faults, however, propagated to the kernel, highlighting the need for an RPC monitor to inspect kernel data structure updates initiated by the u-driver.

- **Log Analysis:**
  - In several instances, the system log was cleared after a crash (indicated by the #Clear column), making it impossible to determine if the RPC monitor would have detected the crash.
  - For the crashes where the logs were available (indicated by the #InLog column), we could assess the effectiveness of the invariants. The #Detect column shows the number of #InLog crashes detected by the RPC monitor.

- **Detection Rates:**
  - The RPC monitor detected 84% of the injected faults in the 8139too driver and 61% of the faults in the 8139cp driver. These results indicate that the RPC monitor can effectively thwart a significant fraction of attacks enabled by a compromised u-driver.

### Performance Evaluation

We measured the throughput and CPU utilization of the two network drivers and the USB driver using our QEMU testbed. While QEMU does not provide an accurate representation of performance on real hardware, it allows us to measure differences in performance. If the driver has lower performance, it will be reflected either as higher CPU utilization or lower throughput.

- **Network Drivers:**
  - We used netperf [15] to transmit packets between our QEMU test environment and a client machine. The tests used TCP receive and send buffer sizes of 87KB and 16KB, respectively.
  - All measurements were averaged over 10 runs and are presented in Figure 7. Our security architecture minimally impacts common-case performance, with minor speedups within the margin of experimental error. This is because the code to transmit packets is in the k-driver, and sending a packet does not involve any user/kernel transitions.

- **USB Driver:**
  - We copied a 140MB file into a USB disk. The measurements showed minimal impact on performance.

- **Sound Driver:**
  - We compared the CPU utilization of both the original driver and the split driver while playing a 256-Kbps MP3. CPU utilization in both cases was zero.
  - However, uncommon functionality such as device initialization, shutdown, and configuration resulted in several user/kernel transitions and took almost three times as long.

### Related Work

**Hardware-Based Isolation Techniques:**
- **Nooks [35]** and **Mondrix [40]** use memory protection at the page level or with fine-grained segments to isolate device driver failures. They execute device drivers in kernel mode and do not enforce integrity specifications on kernel data structure updates, which can lead to significant performance overheads. Consequently, they cannot protect against compromised drivers that attempt to subvert the kernel.

**Virtual Machine-Based Techniques:**
- These techniques isolate device drivers by running them within their own virtual machine [17, 20, 25]. While this approach offers many benefits, it requires the use of a VMM, which is not widely deployed on personal desktops. Additionally, VM-based techniques must provide a front-end driver within the guest VM, which can be cumbersome for non-standard drivers.

**Language-Based Mechanisms:**
- **SafeDrive [42]** and **XFI [18]** are language-based mechanisms to isolate device drivers. SafeDrive protects against type-safety violations but still executes with kernel privilege and only protects against type-safety issues. XFI ensures control-flow integrity for device drivers. Our security architecture allows the use of any user-space security mechanism to be applied to a large fraction of device driver code without adapting these mechanisms to kernel code.

**Microkernels:**
- **Microkernels [26, 39, 41]** provide new operating system abstractions that allow device drivers to execute in user mode. **Nexus [39]** enforces domain-specific rules on driver/device communication using a kernel-resident reference monitor. While Nexus can prevent certain attacks, it is a microkernel and its security mechanisms are largely inapplicable to commodity operating systems. Additionally, Nexus reports high CPU utilization and lower throughputs with a network driver.

**User-Mode Driver Frameworks:**
- **User-mode driver frameworks [11, 16, 24, 28, 37]** also attempt to execute drivers without kernel privilege. However, these techniques either offer poor performance or are incompatible with commodity operating systems, often requiring complete rewrites of drivers and modifications to the kernel.

**Program Partitioning Techniques:**
- **Partitioning techniques [6, 10]** have been used for privilege separation and to create secure web applications. Our architecture applies partitioning to device driver code, enabling user-mode drivers and the use of user-mode tools like Daikon to infer invariants. Prior work has also investigated the use of program invariants for bug detection, data structure repair, rootkit detection, and improving the security of web applications. Our contribution is to apply these techniques to improve the security of device drivers.

### References

[1] D. Abramson, J. Jackson, S. Muthrasanallur, G. Neiger, G. Regnier, R. Sankaran, I. Schoinas, R. Uhlig, B. Vembu, and J. Weigert. Intel virtualization technology for directed I/O. Intel Technology Journal, 10(3), 2006.

[2] AMD. AMD I/O virtualization technology (IOMMU) specification.

[3] Francois Armand. Give a process to your drivers! In EurOpen Autumn Feb 2007, 1991.

[4] AusCERT. ESB-2006.0896: Intel network adapter driver local privilege escalation, 2006. http://www.vul.org.au/render.html?it=7058.

[5] A. Baliga, V. Ganapathy, and L. Iftode. Automatic inference and enforcement of kernel data structure invariants. In ACSAC, 2008.

[6] D. Brumley and D. Song. Privtrans: Automatically partitioning programs for privilege separation. In USENIX Security, 2004.

[7] Yuriy Bulygin. Remote and local exploitation of network drivers. In Blackhat-USA, 2007.

[8] S. Butt, C. Chang, V. Ganapathy, and M. M. Swift. Protecting commodity OS kernels from vulnerable device drivers. Technical Report DCS-TR-645, Rutgers Univ., Dept. of Comp. Sci., Nov 2008.

[9] J. Cache, H. D. Moore, and Skape. Exploiting 802.11 wireless driver vulnerabilities on Windows. http://www.uninformed.org/?v=6&a=2&t=sumry.

[10] S. Chong, J. Liu, A. C. Myers, X. Qi, K. Vikram, L. Zheng, and X. Zheng. Secure web applications via automatic partitioning. In ACM SOSP, 2007.

[11] P. Chubb. Get more device drivers out of the kernel! In Ottawa Linux Symp., pages 149–161, 2004.

[12] M. Cova, D. Balzarotti, V. Felmgester, and G. Vigna. Swaddler: An approach for the anomaly-based detection of state violations in web applications. In RAID, 2007.

[13] Coverity. Analysis of the Linux kernel, 2004. Available at http://www.coverity.com.

[14] Brian Demsky, Michael D. Ernst, Philip J. Guo, Stephen McCamant, Jeff H. Perkins, and Martin Rinard. Inference and enforcement of data structure consistency specifications. In ISSTA, 2006.

[15] Information Networks Division. Netperf: A network performance benchmark. http://www.netperf.org.

[16] J. Elson. FUSD: A Linux framework for user-space devices, 2004. User manual for FUSD 1.0.

[17] Ú. Erlingsson, T. Roeder, and T. Wobber. Virtual environments for unreliable extensions. Technical Report MSR-TR-05-82, Microsoft Research, 2005.

[18] Ulfar Erlingsson, Martin Abadi, Michael Vrable, Mihai Budiu, and George Necula. XFI: Software guards for system address spaces. In OSDI, 2006.

[19] M. D. Ernst, J. H. Perkins, P. J. Guo, S. McCamanat, C. Pacheco, M. S. Tschantz, and C. Xiao. The Daikon system for dynamic detection of likely invariants. Science of Computer Programming, 69(1–3), 2007.

[20] K. Fraser, S. Hand, R. Neugebauer, I. Pratt, A. Warfield, and M. Williamson. Safe hardware access with the Xen virtual machine monitor. In Workshop on Operating System and Architectural Support for the On-Demand IT Infrastructure, 2004.

[21] V. Ganapathy, M. Renzelmann, A. Balakrishnan, M. M. Swift, and S. Jha. The design and implementation of microdrivers. In ACM ASPLOS, 2008.

[22] S. Hangal and M. S. Lam. Tracking down software bugs using automatic anomaly detection. In ICSE, 2002.

[23] Rob Johnson and David Wagner. Finding user/kernel pointer bugs with type inference. In USENIX Security Symposium, 2004.

[24] B. Leslie, P. Chubb, N. Fitzroy-Dale, S. Gotz, C. Gray, L. Macpherson, D. Potts, Y. Shen, K. Elphinstone, and G. Heiser. User-level device drivers: Achieved performance. Jour. Comp. Sci. and Tech., 20(5), 2005.

[25] J. LeVasseur, V. Uhlig, J. Stoess, and S. Gotz. Unmodified device driver reuse and improved system dependability via virtual machines. In OSDI, 2004.

[26] J. Liedtke. On μ-kernel construction. In ACM SOSP, 1995.

[27] D. Maynor. OS X kernel-mode exploitation in a weekend. http://uninformed.org/index.cgi?v=8&a=4.

[28] Microsoft. Architecture of the user-mode driver framework, 2006.

[29] Microsoft Inc. Microsoft interface definition language.

[30] Linux device driver vulnerabilities from the MITRE database. CVEs 2007-4571, 2007-05, 2007-4308, 2008-0007, 2005-0504, 2006-2935, 2006-2936, 2005-3180, 2004-1017, 2007-4997, 2006-1368.

[31] G. C. Necula, S. McPeak, S. P. Rahul, and W. Weimer. CIL: Intermediate languages and tools for analysis and transformation. In Compiler Construction, 2002.

[32] George C. Necula, Scott McPeak, and Westley Weimer. CCured: Type-safe retrofitting of legacy code. In Symposium Principles of Programming Languages, 2002.

[33] N. L. Petroni, T. Fraser, A. Walters, and W. Arbaugh. An architecture for specification-based detection of semantic integrity violations in kernel dynamic data. In USENIX Security Symposium, 2006.

[34] N. L. Petroni and M. W. Hicks. Automated detection of persistent kernel control-flow attacks. In ACM CCS, 2007.

[35] Michael M. Swift, Brian N. Bershad, and Henry M. Levy. Improving the reliability of commodity operating systems. ACM Transactions on Computer Systems, 23(1), 2005.

[36] L. Tan, E. M. Chan, R. Farivar, N. Mallick, J. C. Carlyle, F. M. David, and R. C. Campbell. iKernel: Isolating buggy and malicious device drivers using hardware virtualization support. In IEEE Intl. Symp. on Dependable, Autonomic and Secure Computing, 2007.

[37] L. Torvalds. UIO: Linux patch for user-mode I/O, 2007.

[38] K. T. Van Maren. The Fluke device driver framework. Master’s thesis, Dept. of Computer Science, Univ. of Utah, 1999.

[39] Dan Williams, Patrick Reynolds, Kevin Walsh, Emin Gun Sirer, and Fred B. Schneider. Device driver safety through a reference validation mechanism. In OSDI, 2008.

[40] E. Witchel, J. Rhee, and K. Asanovic. Mondrix: Memory isolation for Linux. In ACM SOSP, 2005.

[41] M. Young, M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, and A. Tevanian. Mach: A new kernel foundation for UNIX development. In Summer USENIX Conference, 1986.

[42] F. Zhou, J. Condit, Z. Anderson, I. Bagrak, R. Ennals, M. Harren, G. Necula, and E. Brewer. SafeDrive: Safe and recoverable extensions using language-based techniques. In OSDI, 2006.