### Security Policy and Attestation Sessions

We conducted a comprehensive analysis of the security policy for each `dom0`, including measurements of the SELinux kernel image, the initial RAM disk, and the MAC (Mandatory Access Control) policy. Subsequently, we established two pairwise attestation sessions to ensure trustworthiness.

In each session, one system periodically challenged the other to provide measurements of the software loaded into the hypervisor environment. Specifically, `dom0` on `shype1` challenged `dom0` on `shype2`, and vice versa. The challenged system returned a quote, signed by the TPM (Trusted Platform Module), containing the current values of PCR (Platform Configuration Register) registers and the list of measurements taken by the Integrity Measurement Architecture (IMA). The challenging system then compared these measurements against its database of known trustworthy components. Attestation was deemed successful if all measured components were found in the database.

### Verification of Communication

To further validate the system, we confirmed that `shype1` and `shype2` could not communicate if any aspect of the attestation failed. We verified that the `dom0`s on `shype1` and `shype2` would not establish an IPsec tunnel unless the attestation sessions between them indicated that they were running the expected software.

### Mutual Attestation of `domU`

Additionally, we had `domU` on `shype1` challenge `domU` on `shype2`, and vice versa. This mutual attestation ensured the security properties of the BOINC (Berkeley Open Infrastructure for Network Computing) client and server. These properties are crucial for the distributed BOINC client-server application to ensure the trustworthiness of the computation results. For each `domU`, we measured the Linux kernel image, the initial RAM disk, and the images and configuration information of applications such as the BOINC client. We also added an entry for a test application labeled as untrusted to the database.

We verified that the `domUs` on `shype1` and `shype2` would not communicate unless the attestation sessions between them showed correct results. To test the effectiveness of our periodic challenges, we ran our untrusted test application alongside the BOINC client software after communication had been successfully established. The next time the server `domU` challenged the client `domU`, the returned measurements included one for the untrusted application, causing the server `domU` to shut down network communication with the client `domU`.

### Discussion

#### Distributed Tamper-Proofness
Our prototype requires a VM to successfully attest its ability to uphold the relevant security policies for membership in a particular distributed coalition. We perform both bind-time and periodic checks, resulting in tamper-responding behavior. The labeled IPsec tunnel protects the flow of information between members of a distributed coalition.

#### Distributed Mediation
The labeled IPsec tunnel, SELinux policy in the MAC VM, and sHype policy in Xen ensure that all communication involving members of a distributed coalition is subject to the constraints of the distributed reference monitor.

#### Verifiable Enforcement
Our prototype uses 13 total authorizations in Xen and SELinux to enforce MAC policies, with 5 of these authorizations applying only to user VMs. While the coalition we examined is relatively simple, we are optimistic that verification at this level of abstraction may be practical for more complex systems. The main challenge is reducing the MAC VM or enabling verification of the reference monitor despite significant functions in the MAC VM, such as network processing.

#### Layering Security Policy
Our distributed MAC architecture enforces MAC policy at two layers: the hypervisor and the MAC VM. This arrangement ensures that the most important security properties are achieved by the lowest-complexity (most assurable) mechanisms. Intra-VM controls can benefit directly from the Shamon mandatory controls through a hypervisor interface that allows VMs to interact in a controlled way with the hypervisor's MAC policy. This structure is advantageous because the most security-critical components are also the most robust.

#### Mitigating Covert Channels
The individual reference monitors do not have complete formal assurance, so some information flows, such as covert channels, may not be enforced. The sHype hypervisor MAC policy enables the use of conflict sets of the Chinese Wall policy to formally define which coalitions cannot run simultaneously on the same hypervisor system.

#### Runtime Tamper-Responsiveness
TPM-based attestation mechanisms (e.g., IMA) measure inputs at load-time, which means runtime tampering may go undetected. However, the code loaded and attested can be related to known vulnerabilities. Minimizing code and policy complexity can help address this. Other techniques, such as Copilot and BIND, aim to provide some runtime guarantees in addition to load-time guarantees but face other obstacles, such as preventing circumvention and annotation effort.

### Conclusions and Future Work

We developed a distributed systems architecture where MAC policies can be enforced across physically separate systems, bridging the reference monitor between those systems and creating a Shamon. The major insights are that attestation can serve as a basis for extending trust to remote reference monitors and that it is possible to obtain effective reference monitor guarantees from a Shamon. This work provides a mechanism and guarantees for building a distributed reference monitor to support distributed applications. Additionally, the architecture enables exploration of MAC, secure communication, and attestation policies, and the construction of reference monitors from open-source components.

Future work includes reducing the size of the MAC VM and exploring additional policy options. Instead of running a full Linux kernel in the MAC VM, specialized code can be used to drive the network interface over which the secure labeled tunnel connects, supporting only the critical components for MAC operation. This specialized code may be designed to enforce more expressive policies, such as Chinese Wall policies, expanding the applicability of Shamon.

### References

[1] M. Abadi, E. Wobber, M. Burrows, and B. Lampson. Authentication in the Taos operating system. In Proceedings of the ACM Symposium on Operating System Principles, 1993.
[2] D. P. Anderson. BOINC: A system for public-resource computing and storage. In Proceedings of the Workshop on Grid Computing, Nov. 2004.
[3] D. P. Anderson, J. Cobb, E. Korpela, M. Lebofsky, and D. Werthimer. SETI@Home: An experiment in public-resource computing. Communications of the ACM, 45(11):56–61, 2002.
[4] W. A. Arbaugh, D. J. Farber, and J. M. Smith. A secure and reliable bootstrap architecture. In Proceedings of the IEEE Symposium on Security and Privacy, May 1997.
[5] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt, and A. Warfield. Xen and the art of virtualization. In Proceedings of the ACM Symposium on Operating Systems Principles, Oct. 2003.
[6] E. Belani, A. Vahdat, T. Anderson, and M. Dahlin. The CRISIS wide area security architecture. In Proceedings of the USENIX Security Symposium, Jan. 1998.
[7] D. E. Bell and L. J. LaPadula. Secure computer systems: Mathematical foundations and model. Technical Report ESD-TR-75-306, The Mitre Corporation, Air Force Electronic Systems Division, Hanscom AFB, Badford, MA, 1976.
[8] D. E. Bell and L. J. LaPadula. Secure computer systems: Unified exposition and multics interpretation. Technical report, MITRE MTR-2997, March 1976.
[9] S. Berger, R. Caceres, K. Goldman, R. Sailer, and L. van Doorn. vTPM: Virtualizing the Trusted Platform Module. In Proceedings of the USENIX Security Symposium, July 2006.
[10] M. Blaze, J. Feigenbaum, Ioannidis, and A. D. Keromytis. The keynote trust-management system, version 2. IETF RFC 2704, Sept. 1999.
[11] W. E. Boebert and R. Y. Kain. A practical alternative to hierarchical integrity policies. In Proceedings of the National Computer Security Conference, 1985.
[12] D. F. C. Brewer and M. J. Nash. The Chinese Wall security policy. In Proceedings of the IEEE Symposium on Security and Privacy, 1989.
[13] C. M. Ellison, B. Frantz, B. Lampson, R. L. Rivest, B. M. Thomas, and T. Ylonen. SPKI certificate theory. IETF RFC 2693, Sept. 1999.
[14] I. Foster, C. Kesselman, and S. Tuecke. The anatomy of the grid: Enabling scalable virtual organizations. Supercomputer Applications, 15(3), 2001.
[15] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. Terra: A virtual machine-based platform for trusted computing. In Proceedings of the ACM Symposium on Operating System Principles, October 2003.
[16] IBM. Integrity measurement architecture for Linux. http://www.sourceforge.net/projects/linux-ima.
[17] T. R. Jaeger, S. Hallyn, and J. Latten. Leveraging IPSec for mandatory access control of Linux network communications. Technical Report RC23642 (W0506-109), IBM, June 2005.
[18] P. A. Karger, M. E. Zurko, D. W. Bonin, A. H. Mason, and C. E. Kahn. A retrospective on the VAX VMM security kernel. IEEE Transactions on Software Engineering, 17(11):1147–1165, 1991.
[19] S. Kent and R. Atkinson. IP encapsulating security payload (ESP). IETF RFC 2406, Nov. 1998.
[20] S. Kent and R. Atkinson. Security architecture for the internet protocol. IETF RFC 2401, Nov. 1998.
[21] J. Kohl and C. Neuman. The Kerberos Network Authentication Service (V5). Internet Draft, Sept. 1992.
[22] B. Lampson, M. Abadi, M. Burrows, and E. Wobber. Authentication in distributed systems: Theory and practice. ACM Transactions on Computer Systems (TOCS), 10(4):265–310, 1992.
[23] N. Li, B. N. Grosof, and J. Feigenbaum. Delegation logic: A logic-based approach to distributed authorization. ACM Transactions on Information and System Security (TISSEC), 6(1):128–171, Feb. 2003.
[24] N. Li and J. C. Mitchell. Understanding SPKI/SDSI using first-order logic. In Proceedings of the IEEE Computer Security Foundations Workshop, pages 89–103, June 2003.
[25] R. Meushaw and D. Simard. NetTop: Commercial technology in high assurance applications. Tech Trend Notes, 9(4):1–8, 2000.
[26] Microsoft Corporation. Next generation secure computing base. http://www.microsoft.com/resources/ngscb/, May 2005.
[27] Open Software Foundation. Introduction to OSF DCE. Prentice Hall, Englewood Cliffs, NJ, 1993.
[28] N. L. Petroni, T. Fraser, J. Molina, and W. A. Arbaugh. Copilot - A coprocessor-based kernel runtime integrity monitor. In Proceedings of the USENIX Security Symposium, 2004.
[29] T. T. Russell and M. Schaefer. Toward a high B level security architecture for the IBM ES/3090 processor resource / systems manager (PR/SM). In Proceedings of the National Computer Security Conference, Oct. 1989.
[30] R. Sailer, T. Jaeger, E. Valdez, R. Caceres, R. Perez, S. Berger, J. Griffin, and L. van Doorn. Building a MAC-based security architecture for the Xen opensource hypervisor. In Proceedings of the Annual Computer Security Applications Conference, Dec. 2005.
[31] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design and implementation of a TCG-based integrity measurement architecture. In Proceedings of the USENIX Security Symposium, 2004.
[32] M. Schaefer, B. Gold, R. Linde, and J. Scheid. Program confinement in KVM/370. In Proceedings of the ACM National Conference, Oct. 1977.
[33] E. Shi, A. Perrig, and L. V. Doorn. BIND: A time-of-use attestation service for secure distributed systems. In Proceedings of IEEE Symposium on Security and Privacy, May 2005.
[34] S. Smalley, C. Vance, and W. Salamon. Implementing SELinux as a Linux security module. Technical Report 01-043, NAI Labs, 2001.
[35] S. W. Smith. Outbound authentication for programmable secure coprocessors. In Proceedings of the European Symposium on Research in Computer Security, Oct. 2002.
[36] Sun Microsystems. Trusted Solaris 8 Operating System. http://www.sun.com/software/solaris/trustedsolaris/, Feb. 2006.
[37] R. Watson, W. Morrison, C. Vance, and B. Feldman. The TrustedBSD MAC framework: Extensible kernel access control for FreeBSD 5.0. In Proceedings of the USENIX Annual Technical Conference, June 2003.
[38] V. Welch, F. Siebenlist, I. Foster, J. Bresnahan, K. Czajkowski, J. Gawor, C. Kesselman, S. Meder, L. Pearlman, and S. Tuecke. Security for grid services. In Proceedings of Symposium on High Performance Distributed Computing, June 2003.
[39] C. Wright, C. Cowan, S. Smalley, J. Morris, and G. Kroah-Hartman. Linux Security Modules: General security support for the Linux kernel. In Proceedings of the USENIX Security Symposium, 2002.
[40] H. Yin and H. Wang. Building an application-aware IPsec policy system. In Proceedings of the USENIX Security Symposium, 2005.