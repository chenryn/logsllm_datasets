## Steps to Reproduce

I have forked the geofencing example written by @bkonyi, which can be found at [this repository](https://github.com/MaikuB/FlutterGeofencing). (Note: I have since deleted the fork, but if it is still needed, please let me know.)

1. **Enable a Plugin for Headless Dart Code Execution**:
   - Follow the instructions provided in this [Medium article](https://medium.com/flutter-io/executing-dart-in-the-background-with-flutter-plugins-and-geofencing-2b3e40a1a124) to enable a plugin to execute headless Dart code.
   - This involves creating a custom `Application` class with overrides and a service that includes a `PluginRegistrantCallback` to register with the plugin registry of a background view.
   - Typically, this process involves setting up both a "foreground" platform channel and a "background" platform channel.

2. **Add Code on the Android Platform Side**:
   - Add code on the Android side to execute Dart code normally (i.e., the "non-headless" way) using `channel.invokeMethod(...)`.
   - In the forked repository, whenever a geofence is registered, the Android side will call `channel.invokeMethod("register", null)`. 
   - On the Flutter side, this method call is caught, and the name of the method ("register") is printed (see [here](#link-to-code)).

3. **Run the App and Test the Logic**:
   - Run the app and trigger the logic written in step 2.
   - You should see `method called: register` in the debugger output, indicating that the method was successfully called from the platform side.

4. **Trigger Headless Execution**:
   - Invoke the logic that triggers headless execution.

5. **Reinvoke the Non-Headless Logic**:
   - Reinvoke the logic from step 2.
   - Notice that the Flutter side does not receive a notification that the method was called from the platform side; `method called: register` is not displayed again.

### Observations
I observed this behavior while incorporating headless execution into my own plugin for notifications. It seems that once a background service calls the method that enables headless Dart code, calling `invokeMethod` on the foreground platform channel no longer works. I am unsure whether this is a solution issue or a potential problem with the engine itself.

### Environment
- **Flutter (Channel beta, v0.9.4, on Mac OS X 10.14 18A391, locale en-AU)**:
  - Flutter version 0.9.4 at /Users/michaelbui/flutter
  - Framework revision f37c235c32 (5 weeks ago), 2018-09-25 17:45:40 -0400
  - Engine revision 74625aed32
  - Dart version 2.1.0-dev.5.0.flutter-a2eb050044

- **Android Toolchain**:
  - Android SDK 27.0.3
  - Android SDK at /Users/michaelbui/Library/Android/sdk
  - Android NDK location not configured (optional; useful for native profiling support)
  - Platform android-28, build-tools 27.0.3
  - ANDROID_HOME = /Users/michaelbui/Library/Android/sdk
  - Java binary at: /Applications/Android Studio.app/Contents/jre/jdk/Contents/Home/bin/java
  - Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1136-b06)
  - All Android licenses accepted.

- **iOS Toolchain**:
  - Xcode 10.1, Build version 10B61
  - ios-deploy 1.9.2
  - CocoaPods version 1.5.0

- **IDEs**:
  - Android Studio 3.2
    - Flutter plugin version 27.1.1
    - Dart plugin version 173.4700
    - Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1136-b06)
  - IntelliJ IDEA Community Edition 2017.3.5
    - Flutter plugin version 23.0.2
    - Dart plugin version 173.4700
  - VS Code 1.28.2
    - Flutter extension version 2.20.0

- **Connected Devices**:
  - Pixel 2 XL • 711KPXV0530842 • android-arm64 • Android 9 (API 28)

- **No issues found!**