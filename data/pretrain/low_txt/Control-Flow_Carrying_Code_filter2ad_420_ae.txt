### 7.4 Fine-Grained CFI Enforcement
C3 can be extended to enforce fine-grained Control-Flow Integrity (CFI). For instance, C3 can implement the fine-grained CFI policy for forward-edge indirect branch transfer instructions as enforced in TypeArmor [45]. This is achieved by classifying functions and indirect call instructions into different clusters based on the number of arguments they can accept. Basic blocks are then encrypted using a more precise set of control transfers derived from these clusters. It is worth noting that enforcing a finer-grained CFI policy could potentially reduce the execution time and space overhead of C3, as fewer valid control transfers would result in less secret sharing and block redistribution.

### 7.5 Other Limitations
1. **Static Analysis and Binary Rewriting**: C3 relies on static analysis and rewriting of binaries. The current implementation does not support dynamically generated or self-modifying code.
2. **Indirect Memory Disclosure**: While C3 prevents attackers from directly reading the code and finding useful gadgets, code pointers in data areas such as the stack and heap remain vulnerable to indirect memory disclosure. For example, if the protected binary has a format string vulnerability, an attacker can print out valid memory locations for return instructions, potentially enabling the use of call-preceded gadgets. This limitation is shared by other techniques performing binary rewriting [47, 48, 50].
3. **Caching and Pipelining**: C3 reduces the effectiveness of caching and pipelining. This is a common limitation for most Instruction Set Randomization (ISR) approaches, except those that perform decryption during I-cache misses and store plaintext in the I-cache.
4. **Symbol Information and Code-Data Separation**: C3 requires symbol names in the executable to patch function and data pointers after basic block redistribution. Additionally, it necessitates complete separation of data and code to enforce instruction encryption. For binaries lacking symbol information, external tools like Unstrip7 [35, 39] can be used to restore the symbol information. Similarly, there are methods to identify data embedded within code [49, 50].

### 8. Conclusion
We present C3, a novel CFI technique that embeds the Control-Flow Graph (CFG) into instructions to perform CFI checks without relying on additional data structures, such as the read-only table used in existing CFI approaches. Each basic block is encrypted with a key that can be reconstructed by any of its valid callers using a secret sharing scheme. During execution, C3 reconstructs the key when a branch transfer instruction is encountered. Our evaluation demonstrates that C3 can effectively defend against most control-flow hijacking attacks with moderate overhead.

### Acknowledgements
We thank our shepherd, Hong Hu, and the anonymous reviewers for their valuable comments and suggestions, which have significantly improved our paper.

### References
[1] Martín Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti. 2005. Control-Flow Integrity. In Proceedings of the 12th ACM Conference on Computer and Communications Security. ACM, 340–353.
[2] Elena Gabriela Barrantes, David H. Ackley, Trek S. Palmer, Darko Stefanovic, and Dino Dai Zovi. 2003. Randomized Instruction Set Emulation to Disrupt Binary Code Injection Attacks. In Proceedings of the 10th ACM Conference on Computer and Communications Security. ACM, 281–289.
[3] Andrew R. Bernat and Barton P. Miller. 2011. Anywhere, Any-Time Binary Instrumentation. In Proceedings of the 10th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools. ACM, 9–16.
[4] Andrea Bittau, Adam Belay, Ali Mashtizadeh, David Mazières, and Dan Boneh. 2014. Hacking Blind. In Proceedings of the 35th IEEE Symposium on Security and Privacy. IEEE, 227–242.
[5] Tyler Bletsch, Xuxian Jiang, Vince W. Freeh, and Zhenkai Liang. 2011. Jump-Oriented Programming: A New Class of Code-Reuse Attack. In Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security. ACM, 30–40.
[6] Erik Bosman, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2016. Dedup Est Machina: Memory Deduplication as an Advanced Exploitation Vector. In 2016 IEEE Symposium on Security and Privacy (SP). IEEE, 987–1004.
[7] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R. Gross. 2015. Control-Flow Bending: On the Effectiveness of Control-Flow Integrity. In Proceedings of the 24th USENIX Security Symposium. 161–176.
[8] Nicholas Carlini and David Wagner. 2014. ROP is Still Dangerous: Breaking Modern Defenses. In Proceedings of the 23rd USENIX Security Symposium. 385–399.
[9] Stephen Checkoway, Lucas Davi, Alexandra Dmitrienko, Ahmad-Reza Sadeghi, Hovav Shacham, and Marcel Winandy. 2010. Return-Oriented Programming Without Returns. In Proceedings of the 17th ACM Conference on Computer and Communications Security. ACM, 559–572.
[10] Xiaoyang Cheng, Yan Lin, Debin Gao, and Chunfu Jia. 2019. DynOpvm: VM-Based Software Obfuscation with Dynamic Opcode Mapping. In Proceedings of the 17th International Conference on Applied Cryptography and Network Security.
[11] Yueqiang Cheng, Zongwei Zhou, Yu Miao, Xuhua Ding, Huijie Deng, et al. 2014. ROPecker: A Generic and Practical Approach for Defending Against ROP Attack. In Symposium on Network and Distributed System Security.
[12] Mauro Conti, Stephen Crane, Lucas Davi, Michael Franz, Per Larsen, Marco Negro, Christopher Liebchen, Mohaned Qunaibit, and Ahmad-Reza Sadeghi. 2015. Losing Control: On the Effectiveness of Control-Flow Integrity Under Stack Attacks. In Proceedings of the 22nd ACM Conference on Computer and Communications Security. ACM, 952–963.
[13] Intel Corporation. 2019. Intel Software Guard Extensions (Intel SGX). https://software.intel.com/en-us/sgx/.
[14] Lucas Davi, Ahmad-Reza Sadeghi, Daniel Lehmann, and Fabian Monrose. 2014. Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow Integrity Protection. In Proceedings of the 23rd USENIX Security Symposium.
[15] Ruan de Clercq, Johannes Götzfried, David Übler, Pieter Maene, and Ingrid Verbauwhede. 2017. SOFIA: Software and Control Flow Integrity Architecture. Computers & Security 68 (2017), 16–35.
[16] Jianming Fu, Xu Zhang, and Yan Lin. 2015. An Instruction-Set Randomization Using Length-Preserving Permutation. In IEEE International Conference on Trust, Security and Privacy in Computing and Communications. IEEE, 376–383.
[17] Xinyang Ge, Weidong Cui, and Trent Jaeger. 2017. GRIFFIN: Guarding Control Flows Using Intel Processor Trace. In Proceedings of the 22nd International Conference on Architectural Support for Programming Languages and Operating Systems. ACM, 585–598.
[18] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and Georgios Portokalidis. 2014. Out of Control: Overcoming Control-Flow Integrity. In Proceedings of the 35th IEEE Symposium on Security and Privacy. IEEE, 575–589.
[19] Yufei Gu, Qingchuan Zhao, Yinqian Zhang, and Zhiqiang Lin. 2017. PT-CFI: Transparent Backward-Edge Control Flow Violation Detection Using Intel Processor Trace. In Proceedings of the Seventh ACM on Conference on Data and Application Security and Privacy. ACM, 173–184.
[20] Hong Hu, Chenxiong Qian, Carter Yagemann, Simon Pak Ho Chung, William R. Harris, Taesoo Kim, and Wenke Lee. 2018. Enforcing Unique Code Target Property for Control-Flow Integrity. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 1470–1486.
[21] Hong Hu, Shweta Shinde, Sendroiu Adrian, Zheng Leong Chua, Prateek Saxena, and Zhenkai Liang. 2016. Data-Oriented Programming: On the Expressiveness of Non-Control Data Attacks. In Proceedings of the 37th IEEE Symposium on Security and Privacy. IEEE, 969–986.
[22] Gaurav S. Kc, Angelos D. Keromytis, and Vassilis Prevelakis. 2003. Countering Code-Injection Attacks with Instruction-Set Randomization. In Proceedings of the 10th ACM Conference on Computer and Communications Security. ACM, 272–280.
[23] Yan Lin, Xiaoxiao Tang, Debin Gao, and Jianming Fu. 2016. Control Flow Integrity Enforcement with Dynamic Code Optimization. In International Conference on Information Security. Springer, 366–385.
[24] Yutao Liu, Peitao Shi, Xinran Wang, Haibo Chen, Binyu Zang, and Haibing Guan. 2017. Transparent and Efficient CFI Enforcement with Intel Processor Trace. In Proceedings of the 23rd IEEE International Symposium on High Performance Computer Architecture. IEEE, 529–540.
[25] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation. In Proceedings of the 2005 ACM Conference on Programming Language Design and Implementation. ACM, 190–200.
[26] Vishwath Mohan, Per Larsen, Stefan Brunthaler, Kevin W. Hamlen, and Michael Franz. 2015. Opaque Control-Flow Integrity. In Symposium on Network and Distributed System Security, Vol. 26. 27–30.
[27] George C. Necula. 2002. Proof-Carrying Code: Design and Implementation. In Proof and System-Reliability. Springer, 261–288.
[28] Ben Niu and Gang Tan. 2014. Modular Control-Flow Integrity. In Proceedings of the 21st ACM Conference on Computer and Communications Security. ACM, 577–587.
[29] Ben Niu and Gang Tan. 2015. Per-Input Control-Flow Integrity. In Proceedings of the 22nd ACM Conference on Computer and Communications Security. ACM, 914–926.
[30] Heidi Pan, Krste Asanović, Robert Cohn, and Chi-Keung Luk. 2005. Controlling Program Execution Through Binary Instrumentation. ACM SIGARCH Computer Architecture News 33, 5 (2005), 45–50.
[31] Antonis Papadogiannakis, Laertis Loutsis, Vassilis Papaefstathiou, and Sotiris Ioannidis. 2013. ASIST: Architectural Support for Instruction Set Randomization. In Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security. ACM, 981–992.
[32] Vasilis Pappas, Michalis Polychronakis, and Angelos D. Keromytis. 2013. Transparent ROP Exploit Mitigation Using Indirect Branch Tracing. In Proceedings of the 22nd USENIX Security Symposium. 447–462.
[33] Mathias Payer, Antonio Barresi, and Thomas R. Gross. 2015. Fine-Grained Control-Flow Integrity Through Binary Hardening. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 144–164.
[34] Georgios Portokalidis and Angelos D. Keromytis. 2010. Fast and Practical Instruction-Set Randomization for Commodity Systems. In Proceedings of the 26th Annual Computer Security Applications Conference. ACM, 41–48.
[35] Rui Qiao and R. Sekar. 2017. Function Interface Analysis: A Principled Approach for Function Recognition in COTS Binaries. In Proceedings of the 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks. 201–212.
[36] Nguyen Anh Quynh. 2014. Capstone: Next-Gen Disassembly Framework. Black Hat USA (2014).
[37] Hovav Shacham. 2007. The Geometry of Innocent Flesh on the Bone: Return-Into-LIBC Without Function Calls (on the x86). In Proceedings of the 14th ACM Conference on Computer and Communications Security. ACM, 552–561.
[38] Adi Shamir. 1979. How to Share a Secret. Commun. ACM 22, 11 (1979), 612–613.
[39] Eui Chul Richard Shin, Dawn Song, and Reza Moazzezi. 2015. Recognizing Functions in Binaries with Neural Networks. In Proceedings of the 24th USENIX Security Symposium. 611–626.
[40] Kanad Sinha, Vasileios P. Kemerlis, and Simha Sethumadhavan. 2017. Reviving Instruction Set Randomization. In International Symposium on Hardware Oriented Security and Trust. IEEE, 21–28.
[41] Kevin Z. Snow, Fabian Monrose, Lucas Davi, Alexandra Dmitrienko, Christopher Liebchen, and Ahmad-Reza Sadeghi. 2013. Just-in-Time Code Reuse: On the Effectiveness of Fine-Grained Address Space Layout Randomization. In Proceedings of the 34th IEEE Symposium on Security and Privacy. IEEE, 574–588.
[42] Ana Nora Sovarel, David Evans, and Nathanael Paul. 2005. Where’s the FEEB? The Effectiveness of Instruction Set Randomization. In Proceedings of the 15th USENIX Security Symposium.
[43] Dean Sullivan, Orlando Arias, David Gens, Lucas Davi, Ahmad-Reza Sadeghi, and Yier Jin. 2017. Execution Integrity with In-Place Encryption. arXiv preprint arXiv:1703.02698 (2017).
[44] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM. In Proceedings of the 23rd USENIX Security Symposium. 941–955.
[45] Victor van der Veen, Enes Göktas, Moritz Contag, Andre Pawoloski, Xi Chen, Sanjay Rawat, Herbert Bos, Thorsten Holz, Elias Athanasopoulos, and Cristiano Giuffrida. 2016. A Tough Call: Mitigating Advanced Code-Reuse Attacks at the Binary Level. In Proceedings of the 37th IEEE Symposium on Security and Privacy. IEEE, 934–953.
[46] Robert Wahbe, Steven Lucco, Thomas E. Anderson, and Susan L. Graham. 1994. Efficient Software-Based Fault Isolation. In ACM SIGOPS Operating Systems Review, Vol. 27. ACM, 203–216.
[47] Minghua Wang, Heng Yin, Abhishek Vasisht Bhaskar, Purui Su, and Dengguo Feng. 2015. Binary Code Continent: Finer-Grained Control Flow Integrity for Stripped Binaries. In Proceedings of the 31st Annual Computer Security Applications Conference. ACM, 331–340.
[48] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen McCamant, Dawn Song, and Wei Zou. 2013. Practical Control Flow Integrity and Randomization for Binary Executables. In Proceedings of the 34th IEEE Symposium on Security and Privacy. IEEE, 559–573.
[49] Mingwei Zhang, Michalis Polychronakis, and R. Sekar. 2017. Protecting COTS Binaries from Disclosure-Guided Code Reuse Attacks. In Proceedings of the 33rd Annual Computer Security Applications Conference. 128–140.
[50] Mingwei Zhang and R. Sekar. 2013. Control Flow Integrity for COTS Binaries. In Proceedings of the 22nd USENIX Security Symposium. 337–352.
[51] Mingwei Zhang and R. Sekar. 2015. Control Flow and Code Integrity for COTS Binaries: An Effective Defense Against Real-World ROP Attacks. (2015).

### A Basic Block Redistribution Algorithm

**Algorithm 1: Basic Block Redistribution**

1. **procedure Redistribution(callee, master_key, k, p)**
2.   **if callee not in key_block then**
3.     **priority_callee = Look_Ahead(callee)**
4.     **if priority_callee then**
5.       **callers = callee_caller[callee]**
6.       **moved_callers = find_moved_callers(callers)**
7.       **if len(moved_callers) == 0 then**
8.         **caller = random_choose_caller(callers)**
9.       **else**
10.        **caller = moved_callers[0]**
11.        **if len(moved_callers) == 1 then**
12.          **compute_key(callee, caller, master_key, k, p)**
13.      **# move all callers of this basic block to be on the curve**
14.      **for i in callers do**
15.        **if i not in redistributed_block then**
16.          **move_caller(callee, i, master_key, k, p)**
17.    **# DFS: process callees of this basic block**
18.    **for i in caller_callee[callee] do**
19.      **Redistribution(i, master_key, k, p)**
20.  **# backtracking**
21.  **for i in callers do**
22.    **for j in caller_callee[i] do**
23.      **Redistribution(j, master_key, k, p)**

**Session 1A: Binary Analysis and Hardening**
AsiaCCS '19, July 9–12, 2019, Auckland, New Zealand