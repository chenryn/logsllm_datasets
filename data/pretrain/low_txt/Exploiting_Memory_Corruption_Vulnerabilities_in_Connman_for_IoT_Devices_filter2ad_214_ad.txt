### Memory Usage and IoT Firmware Vulnerabilities

Memory usage increases by more than 200% [74]. Other related works highlight how attackers exploit IoT firmware flaws to compromise these devices. Tsoutsos [75] summarizes various types of attacks that target memory corruption vulnerabilities in embedded systems. However, his work does not provide or discuss any proof-of-concept (PoC) exploits for these attacks.

Researchers at Google discovered several buffer overflow vulnerabilities [76] in Dnsmasq [77], a lightweight, open-source DHCP server and DNS forwarder commonly used in IoT devices for managing DHCP leases and as a caching DNS stub resolver. They provided several PoCs for these vulnerabilities [78], but these PoCs are limited to causing a Denial of Service (DoS) attack on the targeted device running the vulnerable version of Dnsmasq. Caceres expanded on this by providing a PoC for a return-to-libc exploit against the Dnsmasq vulnerability [79]. While he successfully bypassed W⊕X protection, he was unable to craft a PoC to bypass Address Space Layout Randomization (ASLR).

Researchers at Senrio Security [80] identified a stack-based buffer overflow vulnerability in D-Link smart routers' firmware (v1.12) [81]. A PoC that can bypass W⊕X and ASLR on MIPS and ARM architectures through brute force is available online. However, this PoC requires Local Area Network (LAN) access and cannot be exploited remotely.

### Conclusion

Memory corruption vulnerabilities, particularly stack-based buffer overflows, are among the most prevalent security issues affecting software systems. These vulnerabilities can lead to DoS or Remote Code Execution (RCE) and are also present in IoT firmware. In this paper, we demonstrate several attack scenarios to exploit a stack-based buffer overflow vulnerability in Connman for IoT firmware. Our experiments involve attacks on two different architectures, x86 and ARMv7, and bypassing different levels of memory protections, W⊕X and ASLR, in both controlled and uncontrolled environments.

### Future Work

In future work, we plan to:
1. Attack popular IoT operating systems such as TizenOS, OpenELEC, and Yocto builds on the ARMv7 architecture.
2. Develop an automated exploit generator for stack-based buffer overflow attacks in IoT devices.
3. Shift our current exploits to target IoT operating systems.
4. Develop a lightweight stack memory protection mechanism for IoT devices, addressing key challenges such as resource constraints.

### References

[1] M. A. Khan and K. Salah, “IoT security: Review, blockchain solutions, and open challenges,” Future Generation Computer Systems, vol. 82, pp. 395–411, 2018.

[2] D. Celebucki, M. A. Lin, and S. Graham, “A security evaluation of popular internet of things protocols for manufacturers,” in 2018 IEEE International Conference on Consumer Electronics ICCE, 2018, pp. 1–6.

[3] C. Bradley, S. El-Tawab, and M. H. Heydari, “Security analysis of an IoT system used for indoor localization in healthcare facilities,” in Systems and Information Engineering Design Symposium SIEDS, 2018, pp. 147–152.

[4] H. Haddadi, V. Christophides, R. Teixeira, K. Cho, S. Suzuki, and A. Perrig, “SIOTOME: An edge-ISP collaborative architecture for IoT security,” in Proceedings of the 1st International Workshop on Security and Privacy for the Internet-of-Things (IoTSec), 2018.

[5] Z. B. Celik, P. McDaniel, and G. Tan, “Soteria: Automated IoT safety and security analysis,” in Proceedings of the USENIX Annual Technical Conference (USENIX ATC), Boston, MA, 2018, pp. 147–158.

[6] R. Sairam, S. S. Bhunia, V. Thangavelu, and M. Gurusamy, “NETRA: Enhancing IoT security using NFV-based edge traffic analysis,” arXiv preprint arXiv:1805.10815, 2018.

[7] H. Mouratidis and V. Diamantopoulou, “A security analysis method for industrial Internet of Things,” IEEE Transactions on Industrial Informatics, 2018.

[8] S. Demetriou, “Analyzing & designing the security of shared resources on smartphone operating systems,” Ph.D. dissertation, University of Illinois at Urbana-Champaign, 2018.

[9] E. Bertino and N. Islam, “Botnets and Internet of Things security,” Computer, no. 2, pp. 76–79, 2017.

[10] M. Antonakakis, T. April, M. Bailey, M. Bernhard, E. Bursztein, J. Cochran, Z. Durumeric, J. A. Halderman, L. Invernizzia, M. Kallitsis et al., “Understanding the Mirai botnet,” in Proceedings of the USENIX Security Symposium, 2017, pp. 1092–1110.

[11] M. Barnes, “Alexa, are you listening?” http://tinyurl.com/y75t2hzh, August 2017.

[12] I. Clinton, L. Clinton, and S. Banik, “A survey of various methods for analyzing the Amazon Echo,” 2016.

[13] J. Mao, Q. Lin, and J. Bian, “Application of learning algorithms in smart home IoT system security,” Mathematical Foundations of Computing, vol. 1, no. 1, pp. 63–76, 2018.

[14] M. Burhanuddin, A. A.-J. Mohammed, R. Ismail, M. E. Hameed, A. N. Kareem, and H. Basiron, “A review on security challenges and features in wireless sensor networks: IoT perspective,” Journal of Telecommunication, Electronic and Computer Engineering JTEC, vol. 10, no. 1-7, pp. 17–21, 2018.

[15] P. E. Black, L. Feldman, and G. A. Witte, “Dramatically reducing software vulnerabilities,” https://tinyurl.com/ybqtc7fj, May 2017.

[16] A. Mohanty, I. Obaidat, F. Yilmaz, and M. Sridhar, “Control-hijacking vulnerabilities in IoT firmware: A brief survey,” in Proceedings of the 1st International Workshop on Security and Privacy for the Internet-of-Things (IoTSec), 2018.

[17] S. Cass, “The 2015 top ten programming languages,” IEEE Spectrum, July, vol. 20, 2015.

[18] U. E. Group, “2015 embedded markets study,” http://tinyurl.com/y9wxg3u7.

[19] S. Bhatkar, D. C. DuVarney, and R. Sekar, “Address obfuscation: An efficient approach to combat a broad range of memory error exploits,” in Proceedings of the USENIX Security Symposium, vol. 12, no. 2, 2003, pp. 291–301.

[20] A. Lautenbach, M. Almgren, and T. Olovsson, “What the stack? On memory exploitation and protection in resource-constrained automotive systems,” in Critical Information Infrastructures Security, Cham, 2018, pp. 185–193.

[21] Z. Wang, X. Ding, C. Pang, J. Guo, J. Zhu, and B. Mao, “To detect stack buffer overflow with polymorphic canaries,” in 2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks DSN, 2018, pp. 243–254.

[22] “CVE-2017-12865,” Available from MITRE, CVE-ID CVE-2017-12865, Aug. 29, 2017. [Online]. Available: http://tinyurl.com/y2t3hndq

[23] “Connman,” https://01.org/connman.

[24] “Nest,” https://nest.com/thermostats/.

[25] “NAO robot,” https://www.softbankrobotics.com/emea/en/nao.

[26] “OpenNAO - NAO OS,” http://tinyurl.com/y5h8tvf8.

[27] P. Team, https://pax.grsecurity.net/.

[28] Microsoft, “A detailed description of the data execution prevention (DEP) feature in Windows XP Service Pack 2, Windows XP Tablet PC Edition 2005, and Windows Server 2003,” http://support.microsoft.com/kb/875352/EN-US/.

[29] P. Team, “Address space layout randomization, Mar. 2003,” http://pax.grsecurity.net/docs/aslr.txt.

[30] A. One, “Smashing the stack for fun and profit,” Phrack, 1996.

[31] P. Larsen and A.-R. Sadeghi, The Continuing Arms Race: Code-reuse Attacks and Defenses, 2018.

[32] Hak5, “WiFi Pineapple,” https://www.wifipineapple.com/, 2018.

[33] “New IoT security rules: Stop using default passwords and allow software updates,” https://tinyurl.com/yctkfuuj.

[34] “New IoT legislation bans shared default passwords,” http://tinyurl.com/ybb9f6kp.

[35] “California passes law that bans default passwords in connected devices,” https://tinyurl.com/ycr9bpof.

[36] A. Designer, “Internet of Things security vulnerabilities: All about buffer overflow,” https://tinyurl.com/ybfdaob3.

[37] “oFono,” https://01.org/ofono.

[38] “BlueZ,” http://www.bluez.org/.

[39] “Mer,” http://www.merproject.org/.

[40] “Yocto Project,” https://www.yoctoproject.org/.

[41] “Jolla OS,” https://jolla.com/.

[42] “Configuring an IP address in the Ostro OS,” Available from Ostro Documentation. [Online]. Available: https://ostroproject.org/documentation/howtos/ip-address-config.html

[43] “Sailfish OS,” https://sailfishos.org/.

[44] “Tizen,” https://www.tizen.org/.

[45] S. Saxena, “Tizen architecture,” in Tizen Developer Conference, San Francisco, California, 2012.

[46] M. D. Sousa, Internet of Things with Intel Galileo, 2015.

[47] “CVE-2017-12865,” NATIONAL VULNERABILITY DATABASE, 2017. [Online]. Available: https://www.cvedetails.com/cve/CVE-2017-12865/

[48] “Dnsproxy: Fix crash on malformed DNS response,” Available from Connman git page, Aug. 09, 2017. [Online]. Available: http://tinyurl.com/y6erhvg2

[49] “Connman `src/dnsproxy.c` stack-based buffer overflow vulnerability,” Securityfocus, 2017. [Online]. Available: https://www.securityfocus.com/bid/100498

[50] H. Shacham, “The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86),” in Proceedings of the 14th ACM Conference on Computer and Communications Security, Alexandria, Virginia, USA, 2007, pp. 552–561.

[51] S. Schirra, “Ropper,” https://github.com/sashs/Ropper, 2018.

[52] Oracle, “Procedure linkage table (processor-specific),” http://tinyurl.com/y2zpweh5, 2018.

[53] “execlp(3): execute file,” https://linux.die.net/man/3/execlp, 2018.

[54] J. Salwan, “Ropgadget tool,” https://github.com/JonathanSalwan/ROPgadget, 2017.

[55] A. Ltd, “4.8.1. B, BL, BX, BLX, and BXJ,” http://tinyurl.com/j7eo7vn, 2010.

[56] T. Nyman, J.-E. Ekberg, L. Davi, and N. Asokan, “CFI CaRE: Hardware-supported call and return enforcement for commercial microcontrollers,” in International Symposium on Research in Attacks, Intrusions, and Defenses, 2017, pp. 259–284.

[57] A. Ltd, “ARM TrustZone technology for ARMv8-M architecture. Version 2.1,” http://tinyurl.com/y3yzz2v8, 2017.

[58] S. Pinto and N. Santos, “Demystifying ARM TrustZone: A comprehensive survey,” ACM Computing Surveys CSUR, vol. 51, no. 6, p. 130, 2019.

[59] P. Sparks, “The route to a trillion devices,” White Paper, ARM, 2017.

[60] D. Kaplan, T. Woller, and J. Powell, “AMD memory encryption tutorial,” White Paper, 2016.

[61] V. Costan and S. Devadas, “Intel SGX explained.” IACR Cryptology ePrint Archive, vol. 2016, no. 086, pp. 1–118, 2016.

[62] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz, “SoK: Automated software diversity,” in Proceedings of the 2014 IEEE Symposium on Security and Privacy, 2014, pp. 276–291.

[63] T. Jackson, B. Salamat, A. Homescu, K. Manivannan, G. Wagner, A. Gal, S. Brunthaler, C. Wimmer, and M. Franz, “Compiler-generated software diversity,” in Moving Target Defense, 2011, pp. 77–98.

[64] D. J. Malan, M. Welsh, and M. D. Smith, “A public-key infrastructure for key distribution in TinyOS based on elliptic curve cryptography,” in First Annual IEEE Communications Society Conference on Sensor and Ad Hoc Communications and Networks IEEE SECON 2004, 2004, pp. 71–80.

[65] N. Gura, A. Patel, A. Wander, H. Eberle, and S. C. Shantz, “Comparing elliptic curve cryptography and RSA on 8-bit CPUs,” in International workshop on cryptographic hardware and embedded systems, 2004, pp. 119–132.

[66] S. Sultana, D. Midi, and E. Bertino, “Kinesis: A security incident response and prevention system for wireless sensor networks,” in Proceedings of the 12th ACM Conference on Embedded Network Sensor Systems, 2014, pp. 148–162.

[67] R. Watro, D. Kong, S. fen Cuti, C. Gardiner, C. Lynn, and P. Kruus, “TinyPK: Securing sensor networks with public key technology,” in Proceedings of the 2nd ACM workshop on Security of ad hoc and sensor networks, 2004, pp. 59–64.

[68] S. Zhu, S. Setia, and S. Jajodia, “LEAP: Efficient security mechanisms for large-scale distributed sensor networks,” in Proceedings of the 10th ACM Conference on Computer and Communications Security, Washington D.C., USA, 2003, pp. 62–72.

[69] A. L. M. Neto, A. L. Souza, I. Cunha, M. Nogueira, I. O. Nunes, L. Cotta, N. Gentille, A. A. Loureiro, D. F. Aranha, H. K. Patil et al., “AoT: Authentication and access control for the entire IoT device lifecycle,” in Proceedings of the 14th ACM Conference on Embedded Network Sensor Systems CD-ROM, 2016, pp. 1–15.

[70] S. Sicari, A. Rizzardi, L. A. Grieco, and A. Coen-Porisini, “Security, privacy, and trust in Internet of Things: The road ahead,” Computer Networks, vol. 76, pp. 146–164, 2015.

[71] S. Gisdakis, T. Giannetsos, and P. Papadimitratos, “SHIELD: A data verification framework for participatory sensing systems,” in Proceedings of the 8th ACM Conference on Security & Privacy in Wireless and Mobile Networks, 2015, p. 16.

[72] T. Markmann, T. C. Schmidt, and M. Wählisch, “Federated end-to-end authentication for the constrained Internet of Things using IBC and ECC,” in Proceedings of the 2015 ACM Conference on Special Interest Group on Data Communication, ser. SIGCOMM ’15. New York, NY, USA: ACM, 2015, pp. 603–604.

[73] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov, “AddressSanitizer: A fast address sanity checker,” in Proceedings of the USENIX Annual Technical Conference, 2012, pp. 309–318.

[74] F. A. Teixeira, F. M. Pereira, H.-C. Wong, J. M. Nogueira, and L. B. Oliveira, “SIoT: Securing Internet of Things through distributed systems analysis,” Future Generation Computer Systems, 2017.

[75] N. G. Tsoutsos and M. Maniatakos, “Anatomy of memory corruption attacks and mitigations in embedded systems,” IEEE Embedded Systems Letters, vol. 10, no. 3, pp. 95–98, 2018.

[76] “Behind the masq: Yet more DNS, and DHCP, vulnerabilities,” http://tinyurl.com/y7l44lmw.

[77] “Dnsmasq,” http://www.thekelleys.org.uk/dnsmasq/doc.html.

[78] “Google security research PoCs for dnsmasq,” http://tinyurl.com/y7l44lmw.

[80] “Enterprise security for IoT,” http://senr.io/.

[81] “400,000 publicly available IoT devices vulnerable to single flaw,” https://tinyurl.com/ycb2p7q4.

[79] “Local privilege escalation exploit/PoC for dnsmasq <v2.78 on vyos,” http://tinyurl.com/y2qujb2n.