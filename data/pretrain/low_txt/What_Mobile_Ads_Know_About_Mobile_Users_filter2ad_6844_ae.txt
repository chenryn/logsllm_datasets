### Subspace and Jail Functionality
The operating system (OS) should provide a built-in "jail" functionality that can be invoked via an API call. This approach is preferable to requiring AdSDK developers to manually write code for intercepting file requests and interpreting file paths.

### iOS Approach
iOS employs a different method, where each app's files are stored under a file path with a random 128-bit universally unique identifier (UUID) [7]. If the UUID does not leak to an attacker, this method prevents the inference attacks described in this paper.

### Long-Term Solutions
In the long term, we believe mobile operating systems would benefit from a principled re-engineering of the mobile software stack. A redesigned OS would provide secure, full-stack containers for untrusted mobile content, extending from the application layer to storage systems. This would eliminate the current use of external storage as a shared file cache for all apps. These containers would offer an isolated execution environment for the entire functionality required by media-rich ads, including rendering, caching, and storage. Effectively, each ad impression would be treated as a separate app with dedicated storage and no access rights outside that storage. The design and implementation of such containers are left for future work.

### Related Work
There is extensive research on direct and side-channel attacks performed by malicious Android apps to steal other apps' secrets [10, 28, 30, 40, 49, 57]. These studies assume the victim has installed a malicious app. In contrast, the attacks described in this paper are performed solely via mobile ads, without running any malicious app code.

We argue that threats from malicious ads are broader in scope and have a greater impact than those from malicious apps. First, virtually any advertising-supported mobile app can be exploited by a malicious advertiser to attack other apps via the local resource oracle. For example, 41% of Android apps in the Google Play Store use AdMob [6], one of the vulnerable AdSDKs in our study. Second, users have little control over the ads shown to them, unlike the apps they install. Finally, while many malicious apps can be blocked by app stores, dynamically filtering malicious ads is more challenging.

Several studies have investigated the leakage of user information to mobile advertising libraries and the risks of overprivileged AdSDKs [9, 22, 46]. As explained in Section III-C, most modern AdSDKs do not intentionally reveal all collected information to advertisers and take great care to isolate ads from the host app and the AdSDK. Therefore, these studies do not address the leakage of user information to mobile ads. To the best of our knowledge, ours is the first study to investigate this issue.

**AdDroid [37] and AdSplit [43]** propose separating advertising functionality from mobile apps to prevent over-privileging advertising libraries. However, these solutions would not prevent the attacks described in this paper. As long as media-rich ads on Android require access to external storage for performance and caching, direct and indirect inference mechanisms remain feasible even if the privileges of the ads are separated from the host app.

**AdJail [47]** protects web content from malicious advertising by assigning a different origin to ads and leveraging browser support for Content Security Policy (CSP). This solution does not translate to mobile advertising without significant changes to the Android OS, such as propagating origin information to individual objects in the device's external storage.

**Wu and Chang [53]** demonstrated how to steal files from mobile devices by exploiting how mobile browsers interpret the Same-Origin Policy (SOP) for file-scheme origins, particularly in older versions of Android's WebView. This attack is similar to the direct file-reading vulnerability in AdMarvel described in Section IV-B. To the best of our knowledge, the local resource oracle and the inference attacks it enables have never been reported before. These indirect attacks work regardless of how the SOP is implemented in WebView, including the latest implementations that have fixed the vulnerability described in [53].

**Wu and Chang [54]** also applied their attacks to iOS devices, showing that UIWebView, the iOS counterpart of Android's WebView, allows web content to read sensitive files. In iOS, the path to each app's files includes a random 128-bit UUID [7], making it difficult for attackers to infer the paths to sensitive files. The exploits described by Wu and Chang involve users explicitly consenting to open malicious JavaScript files with vulnerable iOS applications. Our inference attacks based on the local resource oracle do not require user interaction but need exact paths to sensitive files. Therefore, unlike on Android, they cannot be used to attack a large number of iOS devices unless the attacker can learn application UUIDs on targeted devices.

**LP-Guardian [17]** coarsens location data by adding noise and lets users designate apps that require protection. Zhang et al. [56] focus on side-channel leaks and propose an application-level monitor to prevent background processes from collecting privacy-sensitive information. This defense does not protect against AdSDKs that openly send location data over the network or against mobile ads that run in the foreground.

Several proposed systems aim to help users make informed decisions about installing mobile apps. **AppProfiler [41]** generates a privacy-sensitive behavior profile based on static analysis of the app. Harbach et al. [24] demonstrated that personalized dialogs showing actual values requested by apps help users avoid overprivileged apps. These techniques do not address the privacy risks of mobile ads.

### Current Status of Vulnerabilities
We have disclosed the issues discussed in this paper to the Android security team and all affected AdSDK providers. In response, AdMob and AdMarvel patched the local resource oracle in the latest releases of their AdSDKs. AirPush and MoPub acknowledged the report but did not respond whether they patched the local resource oracle.

We also reported to MoPub that if the app has the `ACCESS_FINE_LOCATION` permission, the MoPub AdSDK reveals the device's fine-grained locations to advertisers. MoPub responded as follows:

> "If you are allowing MoPub to access this data, these will be accessible to our advertisers for precise targeting. If you have more questions on the privacy policy, you can also read here: http://www.mopub.com/legal/privacy/"

### References
[1] G. Acar, C. Eubank, S. Englehardt, M. Juarez, A. Narayanan, and C. Diaz, “The Web never forgets: Persistent tracking mechanisms in the wild,” in CCS, 2014.
[2] Google ID. Advertising Tracking Macros. Available: https://support.google.com/googleplay/android-developer/answer/6048248?hl=en
[3] AdMarvel. Macro Support. Available: https://wiki.operamediaworks.com/display/AMS/Macro+Support
[4] AdMob. Set up conversion tracking. Available: https://support.google.com/admob/answer/3111064?hl=en
[5] Developer reference: Android Identifier. Available: http://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID
[6] AppBrain. Android ad networks. Available: http://www.appbrain.com/stats/libraries/ad
[7] Apple. Creating UUIDs. Available: https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUUID_Class/index.html#//apple_ref/doc/uid/TP40012254-CH1-SW7
[8] A. Barth, “The Web origin concept,” http://tools.ietf.org/html/rfc6454, 2011.
[9] T. Book, A. Pridgen, and D. Wallach, “Longitudinal analysis of Android ad library permissions,” in MoST, 2013.
[10] Q. Chen, Z. Qian, and Z. Mao, “Peeking into your app without actually seeing it: UI state inference and novel Android attacks,” in USENIX Security, 2014.
[11] D. Cheng. Treat file:// URLs as having unique origin. Available: https://code.google.com/p/chromium/issues/detail?id=455882
[12] D. Crandall, L. Backstrom, D. Cosley, S. Suri, D. Huttenlocher, and J. Kleinberg, “Inferring social ties from geographic coincidences,” Proc. NAS, no. 52, 2010.
[13] Android dashboards. Available: https://developer.android.com/about/dashboards/index.html
[14] Y.-A. de Montjoye, C. Hidalgo, M. Verleysen, and V. Blondel, “Unique in the crowd: The privacy bounds of human mobility.” Nature Scientific Reports 3, vol. 1376, 2013.
[15] Dolphin browser for Android. Available: https://play.google.com/store/apps/details?id=mobi.mgeek.TunnyBrowser
[16] Android storage. Available: https://source.android.com/devices/storage/
[17] K. Fawaz and K. Shin, “Location privacy protection for smartphone users,” in CCS, 2014.
[18] T. Garfinkel, “Traps and pitfalls: Practical problems in system call interposition based security tools,” in NDSS, 2003.
[19] M. Georgiev, S. Jana, and V. Shmatikov, “Breaking and fixing origin-based access control in hybrid Web/mobile application frameworks,” in NDSS, 2014.
[20] P. Golle and K. Partridge, “On the anonymity of home/work location pairs,” in Pervasive, 2009.
[21] GoodRx - prescription drug prices, coupons and pill identifier. Available: https://play.google.com/store/apps/details?id=com.goodrx
[22] M. Grace, W. Zhou, X. Jiang, and A. Sadeghi, “Unsafe exposure analysis of mobile in-app advertisements,” in WiSec, 2012.
[23] E. Grey. An HTML5 FileSaver implementation. Available: https://github.com/eligrey/FileSaver.js
[24] M. Harbach, M. Hettig, S. Weber, and M. Smith, “Using personal examples to improve risk communication for security & privacy decisions,” in CHI, 2014.
[25] Developer reference: Android class hashCode. Available: http://developer.android.com/reference/java/lang/String.html#hashCode()
[26] Interactive Advertising Bureau. Mobile rich media ad interface definitions (MRAID). Available: http://www.iab.net/mraid
[27] IAB. Understanding mobile cookies. Available: http://www.iab.net/media/file/IABDigitalSimplifiedMobileCookies.pdf
[28] S. Jana and V. Shmatikov, “Memento: Learning secrets from process footprints,” in S&P, 2012.
[29] D. Kaplan. Malicious banner ads hit major websites. Available: http://www.scmagazineus.com/Malicious-banner-ads-hit-major-websites/article/35605/
[30] C. Lin, H. Li, X. Zhou, and X. Wang, “Screenmilker: How to milk your Android screen for secrets,” in NDSS, 2014.
[31] C. Ma, D. Yau, N. Yip, and N. Rao, “Privacy vulnerability of published anonymous mobility traces,” in MOBICOM, 2010.
[32] J. Mayer and J. Mitchell, “Third-party web tracking: Policy and technology,” in S&P, 2012.
[33] MoPub tracking macros. Available: https://dev.twitter.com/mopub/ui/macros
[34] A. Narayanan and V. Shmatikov, “De-anonymizing social networks,” in S&P, 2009.
[35] N. Nikiforakis, A. Kapravelos, W. Joosen, C. Kruegel, F. Piessens, and G. Vigna, “Cookieless monster: Exploring the ecosystem of web-based device fingerprinting,” in S&P, 2013.
[36] A. Odri. AirPush tracking macros. Available: http://iamattila.com/traffic-source-tokens/airpush-dynamic-tracking-tokensscriptsapi.php
[37] P. Pearce, A. Felt, G. Nunez, and D. Wagner, “Ad-Droid: Privilege separation for applications and advertisers in Android,” in ASIACCS, 2012.
[38] POF free dating app. Available: https://play.google.com/store/apps/details?id=com.pof.android
[39] Most popular permissions in various application categories. Available: http://privacygrade.org/stats
[40] Z. Qian, Z. Mao, and Y. Xie, “Collaborative TCP sequence number inference attack: How to crack sequence number under a second,” in CCS, 2012.
[41] S. Rosen, Z. Qian, and Z. Mao, “AppProfiler: A flexible method of exposing privacy-related behavior in Android applications to end users,” in CODASPY, 2013.
[42] J. Ruderman. Same origin policy. Available: https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy
[43] S. Shekhar, M. Dietz, and D. Wallach, “AdSplit: Separating smartphone advertising from applications,” in USENIX Security, 2012.
[44] S. Son and V. Shmatikov, “The postman always rings twice: Attacking and defending postMessage in HTML5 websites,” in NDSS, 2013.
[45] B. Sterne and A. Barth. Content Security Policy 1.0. Available: http://www.w3.org/TR/2012/CR-CSP-20121115
[46] R. Stevens, C. Gibler, J. Crussell, J. Erickson, and H. Chen, “Investigating user privacy in Android ad libraries,” in MoST, 2012.
[47] M. Ter Louw, K. Ganesh, and V. Venkatakrishnan, “AdJail: Practical enforcement of confidentiality and integrity policies on Web advertisements,” in USENIX Security, 2012.
[48] A. Vance. Times web ads show security breach. Available: http://www.nytimes.com/2009/09/15/technology/internet/15adco.html
[49] R. Wang, L. Xing, X. Wang, and S. Chen, “Unauthorized origin crossing on mobile platforms: Threats and mitigation,” in CCS, 2013.
[50] Developer reference: WebSettings. Available: http://developer.android.com/reference/android/webkit/WebSettings.html
[51] Developer reference: WebView. Available: http://developer.android.com/reference/android/webkit/WebView.html
[52] M. West, A. Barth, and D. Veditz. Content Security Policy 2.0. Available: http://www.w3.org/TR/CSP2
[53] D. Wu and R. Chang, “Analyzing Android browser apps for file:// vulnerabilities,” in ISC, 2014.
[54] D. Wu and R. Chang, “Indirect file leaks in mobile applications,” in MoST, 2015.
[55] H. Zang and J. Bolot, “Anonymization of location data does not work: A large-scale measurement study,” in MOBICOM, 2011.
[56] N. Zhang, K. Yuan, M. Naveed, X. Zhou, and X. Wang, “Leave me alone: App-level protection against runtime information gathering on Android,” in S&P, 2015.
[57] X. Zhou, S. Demetriou, D. He, M. Naveed, X. Pan, X. Wang, C. Gunter, and K. Nahrstedt, “Identity, location, disease and more: Inferring your secrets from Android public resources,” in CCS, 2013.