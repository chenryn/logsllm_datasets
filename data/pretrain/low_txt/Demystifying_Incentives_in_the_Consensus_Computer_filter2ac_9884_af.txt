### Key Differences in Assumptions and Goals

A key difference lies in the assumptions and goals. Our objective is not to produce explicit proofs of correctness, but rather to create an incentive structure where cheating offers no intrinsic advantage over following the protocol honestly. Additionally, our techniques are specific to certain algorithms, whereas verifiable computation enables proving the correctness of arbitrary circuits. Verifiable computation can be, and has been, applied in our setting, with recent schemes achieving constant verification effort [43]. However, such schemes impose impractically high overheads on provers and require expensive initial key setup between all miners in the protocol.

### Repurposing the Blockchain for Other Applications

Since the rise of Bitcoin, a new line of work has emerged, focusing on repurposing the blockchain for other applications [19, 21, 16, 20]. For example, Kumaresan et al. [19, 21] studied how to run several applications, including verifiable computation, on Bitcoin. Their technique is fairly complex and relies on the assumption that all computations done by the consensus protocol will be correct. As we have shown, with expressive scripting languages (e.g., Ethereum), one can achieve the same results with a single concise smart contract. However, as pointed out in this paper, miners have incentives to deviate from the honest protocol in a Turing-complete cryptocurrency. Thus, the techniques used in [20, 21] may not guarantee the correctness of the computation on some ε-consensus computer with a small ε. Furthermore, our technique differs by leveraging a new cryptocurrency design and adapting property testing techniques within the verifiable computation domain.

### Conclusion

In this paper, we introduce the verifier's dilemma, demonstrating that honest miners are vulnerable to attacks in cryptocurrencies where verifying transactions per block requires significant computational resources. We formalize the security model to study the incentive structure and attacks that affect the correctness of computations performed on a consensus computer. Finally, we discuss how to implement our ε-consensus computer in Ethereum, considering various trade-offs in latency and accuracy. It remains an open problem to determine whether one can incentivize robust computations to execute correctly on a consensus computer by modifying its underlying consensus mechanism.

### Acknowledgment

We thank Frank Stephan, Shruti Tople, Pratik Soni, Ratul Saha, Virgil Griffith, and Vitalik Buterin for their useful discussions and feedback on the early version of the paper. This work is supported by the Ministry of Education, Singapore under Grant No. R-252-000-560-112. All opinions expressed in this work are solely those of the authors.

### References

[1] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic cash system. bitcoin.org, 2009.
[2] Karl J. O’Dwyer and David Malone. Bitcoin mining and its energy footprint. In Irish Signals Systems Conference 2014 and 2014 China-Ireland International Conference on Information and Communications Technologies (ISSC 2014/CIICT 2014). 25th IET, pages 280–285, June 2014.
[3] Rob Halford. Gridcoin: Crypto-currency using Berkeley Open Infrastructure Network Computing grid as a proof of work. http://www.gridcoin.us/images/gridcoin-white-paper.pdf, May 2014.
[4] Use case for Factom: The world’s first blockchain operating system (BOS). http://kencode.de/projects/ePlug/Factom-Linux-Whitepaper.pdf, Feb 2015.
[5] Ethereum Foundation. Ethereum’s white paper. https://github.com/ethereum/wiki/wiki/White-Paper, 2014.
[6] Blockchain.info. Bitcoin average number of transactions per block. https://blockchain.info/charts/n-transactions-per-block.
[7] Gavin Andresen. Why increasing the max block size is urgent. http://gavinandresen.ninja/why-increasing-the-max-block-size-is-urgent, May 2015.
[8] Justin Thaler. Time-optimal interactive proofs for circuit evaluation. In Advances in Cryptology - CRYPTO 2013 - 33rd Annual Cryptology Conference, Santa Barbara, CA, USA, August 18-22, 2013. Proceedings, Part II, pages 71–89, 2013.
[9] Graham Cormode, Michael Mitzenmacher, and Justin Thaler. Practical verified computation with streaming interactive proofs. In Proceedings of the 3rd Innovations in Theoretical Computer Science Conference, ITCS ’12, pages 90–112, 2012.
[10] Srinath T. V. Setty, Richard McPherson, Andrew J. Blumberg, and Michael Walfish. Making argument systems for outsourced computation practical (sometimes). In 19th Annual Network and Distributed System Security Symposium, NDSS, pages 253–268, 2012.
[11] Eli Ben-Sasson, Alessandro Chiesa, Daniel Genkin, Eran Tromer, and Madars Virza. SNARKs for C: Verifying program executions succinctly and in zero knowledge. Cryptology ePrint Archive, Report 2013/507, 2013. http://eprint.iacr.org/.
[12] Benjamin Braun, Ariel J. Feldman, Zuocheng Ren, Srinath Setty, Andrew J. Blumberg, and Michael Walfish. Verifying computations with state. In Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles, SOSP ’13, pages 341–357, 2013.
[13] Srinath Setty, Victor Vu, Nikhil Panpalia, Benjamin Braun, Andrew J. Blumberg, and Michael Walfish. Taking proof-based verified computation a few steps closer to practicality. In Proceedings of the 21st USENIX Conference on Security Symposium, Security’12, 2012.
[14] Bryan Parno, Jon Howell, Craig Gentry, and Mariana Raykova. Pinocchio: Nearly practical verifiable computation. In Proceedings of the 2013 IEEE Symposium on Security and Privacy, SP ’13, pages 238–252, 2013.
[15] Joseph Bonneau, Andrew Miller, Jeremy Clark, Arvind Narayanan, Joshua A. Kroll, and Edward W. Felten. SoK: Research Perspectives and Challenges for Bitcoin and Cryptocurrencies. In IEEE Security and Privacy 2015, May 2015.
[16] A. Miller, A. Juels, E. Shi, B. Parno, and J. Katz. Permacoin: Repurposing Bitcoin work for long-term data preservation. IEEE Security and Privacy, 2014.
[17] Ian Miers, Christina Garman, Matthew Green, and Aviel D. Rubin. Zerocoin: Anonymous distributed E-cash from Bitcoin. IEEE Symposium on Security and Privacy, 2013.
[18] Eli Ben-Sasson, Alessandro Chiesa, Christina Garman, Matthew Green, Ian Miers, Eran Tromer, and Madars Virza. Zerocash: Decentralized anonymous payments from Bitcoin. In Proceedings of the 2014 IEEE Symposium on Security and Privacy, SP ’14, 2014.
[19] Ranjit Kumaresan and Iddo Bentov. How to use Bitcoin to incentivize correct computations. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, 2014, pages 30–41, 2014.
[20] Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, and Lukasz Mazurek. Secure multiparty computations on Bitcoin. In Proceedings of the 2014 IEEE Symposium on Security and Privacy, SP ’14, pages 443–458. IEEE Computer Society, 2014.
[21] Iddo Bentov and Ranjit Kumaresan. How to use Bitcoin to design fair protocols. In Advances in Cryptology - CRYPTO 2014 - 34th Annual Cryptology Conference, Santa Barbara, CA, USA, August 17-21, 2014, Proceedings, Part II, pages 421–439, 2014.
[22] Nick Szabo. The idea of smart contracts. http://szabo.best.vwh.net/smart_contracts_idea.html, 1997.
[23] Gavin Wood. Ethereum: A secure decentralised generalised transaction ledger. http://gavwood.com/paper.pdf, 2014.
[24] Andrew Miller, James Litton, Andrew Pachulski, Neil Spring, Neal Gupta, Dave Levin, and Bobby Bhattacharjee. Discovering Bitcoin’s public topology and influential nodes. http://cs.umd.edu/projects/coinscope/coinscope.pdf, May 2015.
[25] US-CERT/NIST. Resource exhaustion attack in Bitcoin. https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-2292, 2013.
[26] Sergio Demian Lerner. New Bitcoin vulnerability: A transaction that takes at least 3 minutes to be verified by a peer. https://bitcointalk.org/?topic=140078, 2013.
[27] Some miners generating invalid blocks. https://bitcoin.org/en/alert/2015-07-04-spv-mining, July 2015.
[28] Byron Cook, Andreas Podelski, and Andrey Rybalchenko. Proving program termination. Commun. ACM, 54(5):88–98, May 2011.
[29] Dana Ron. Property testing (a tutorial). http://www.eng.tau.ac.il/~danar/Public-pdf/tut.pdf, 2000.
[30] Oded Goldreich. Combinatorial property testing (a survey). Electronic Colloquium on Computational Complexity (ECCC), 4(56), 1997.
[31] Endre Szemerédi. Regular partitions of graphs. In Problèmes combinatoires et théorie des graphes (Colloq. Internat. CNRS, Univ. Orsay, Orsay, 1976), volume 260 of Colloq. Internat. CNRS, pages 399–401, 1978.
[32] Noga Alon and Asaf Shapira. Every monotone graph property is testable. SIAM Journal on Computing, 38(2):505–522, 2008.
[33] Noga Alon and Michael Krivelevich. Testing k-colorability. SIAM Journal on Discrete Mathematics, 15(2):211–227, 2002.
[34] Miguel Castro and Barbara Liskov. Practical Byzantine fault tolerance. In Proceedings of the Third Symposium on Operating Systems Design and Implementation, OSDI ’99, pages 173–186, 1999.
[35] David Mazières. The Stellar consensus protocol: A federated model for internet-level consensus. https://www.stellar.org/papers/stellar-consensus-protocol.pdf, April 2015.
[36] Jae Kwon. Tendermint: Consensus without mining. http://jaekwon.com/2014/05/11/tendermint/, May 2014.
[37] Sunny King and Scott Nadal. PPCoin: Peer-to-peer crypto-currency with proof-of-stake. http://peercoin.net/assets/paper/peercoin-paper.pdf, August 2012.
[38] Loi Luu, Ratul Saha, Inian Parameshwaran, Prateek Saxena, and Aquinas Hobor. On power splitting games in distributed computation: The case of Bitcoin pooled mining. The 28th IEEE Computer Security Foundations Symposium, July 2015.
[39] Ittay Eyal and Emin Gün Sirer. Majority is not enough: Bitcoin mining is vulnerable. arXiv preprint arXiv:1311.0243, 2013.
[40] Ittay Eyal. The miner’s dilemma. In The 36th IEEE Symposium on Security and Privacy, SP ’15, May 2015.
[41] Joshua A. Kroll, Ian C. Davey, and Edward W. Felten. The economics of Bitcoin mining, or Bitcoin in the presence of adversaries. In Workshop on the Economics of Information Security, June 2013.
[42] Juan A. Garay, Aggelos Kiayias, and Nikos Leonardos. The Bitcoin backbone protocol: Analysis and applications. In Advances in Cryptology - EUROCRYPT 2015, pages 281–310, 2015.
[43] Ahmed Kosba, Andrew Miller, Elaine Shi, Zikai Wen, and Charalampos Papamanthou. Hawk: The blockchain model of cryptography and privacy-preserving smart contracts. Cryptology ePrint Archive, Report 2015/675, 2015. http://eprint.iacr.org/.
[44] Response from founder of Ethereum about our paper. https://www.reddit.com/r/ethereum/comments/3fcw0i/verifiers_dilemma_renders_ethereum_nonincentive/, July 2015.

### Appendix: Discussion on GasLimit in Ethereum

We explain why gasLimit does not completely prevent our Denial-of-Service (DoS) attack in Ethereum. The current design allows miners to set the gasLimit for the next block once they find a block. However, the gasLimit of the next block cannot vary more than a fraction (2−10) of the current gasLimit. This constraint, which we learned from private communication with the founder of Ethereum, seems to mitigate our attack. However, we explain why the gasLimit can still reach a high value that makes the resource exhaustion attack feasible.

In practice, miners have different views on what gasLimit value is acceptable due to various reasons. For instance, a miner with more resources or who values the advantages of a high gasLimit may always verify a new block regardless of its gasLimit value. Each miner will decide to reduce the block’s gasLimit at a different threshold \( G_i \). Suppose our DoS attack requires a gasLimit of at least \( G_0 \) to be practical. In a scenario where more than 50% of the computational power considers \( G_0 \) within their \( G_i \), all miners are under our denial-of-service attack. Conversely, if the majority of miners have their \( G_i \) less than \( G_0 \), the gasLimit can successfully block our attack.

Rational users in the network have the following incentives to extend the gasLimit value:
- A higher gasLimit means higher transaction fees that miners can collect from a block.
- A block with a higher gasLimit can support more applications, especially those that require more gas to run. This increases the value of the network and its underlying currency, benefiting the miners directly.
- As more applications are built on top of Ethereum, the gasLimit must be increased to improve the throughput of the network and support these applications. It is not practical to wait for, say, ten blocks to see a transaction included in the blockchain due to the small throughput.

There are also reasons for miners to reduce the gasLimit:
- High gasLimit values may cause DoS attacks, as described.
- Low gasLimit means only a limited number of transactions can be included in a block, increasing transaction fees.

In conclusion, gasLimit does not completely block our DoS attack, i.e., the resource exhaustion attack, in Ethereum.