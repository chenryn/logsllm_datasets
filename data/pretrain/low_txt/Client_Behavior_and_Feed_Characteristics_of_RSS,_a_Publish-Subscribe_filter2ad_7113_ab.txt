### 4.1 Feed Size

RSS feeds typically consist of web content encapsulated in XML format. Therefore, we expect the majority of RSS feeds to have sizes similar to most web objects. This is confirmed by Figure 4, which shows the distribution of feed sizes. The feed size is calculated as the average of all snapshots of the feed, and the variance among these snapshots is very small.

- **Key Statistics:**
  - More than 80% of RSS feeds are relatively small, with sizes less than 10KB.
  - The minimum observed feed size is 356 bytes.
  - The median feed size is 5.8KB.
  - The average feed size is 10KB.
  - 99.9% of feeds are smaller than 100KB.
  - The largest feed observed is 876,836 bytes, but this is an outlier and not shown in the graph.

Extremely large RSS feeds are rare, unlike some web objects that can be several megabytes or more. This conciseness is expected because RSS is designed for the quick dissemination of news updates, often carrying only links to more detailed articles. Additionally, the current architecture of RSS, where clients need to fetch the entire feed to check for updates, imposes a high bandwidth load on content servers. This discourages content providers from supporting large feeds, leading to a bias towards smaller feed sizes.

### 4.2 Update Characteristics

Updates are the main driving force of the RSS pub-sub system. We examine the nature of RSS updates using a series of hourly snapshots gathered through active polling. To ensure missing snapshots do not affect the calculations of update intervals, we only count intervals between valid updates. An update is considered valid if there is a valid snapshot preceding it, and that preceding snapshot matches the last recorded update. We filtered out all feeds with fewer than thirty snapshots, leaving 68,266 feeds for analysis.

#### Update Rate

Figure 5 shows the distribution of update intervals for the first valid update. We observe that feed update rates fall into two extremes: they either update very frequently or very rarely. 

- **Key Findings:**
  - More than 55% of feeds are updated within the first hour.
  - 25% of feeds did not see any updates during the entire polling period.
  - This result suggests that RSS readers should use different polling periods for different feeds. However, some RSS readers, such as Thunderbird 1.0, do not currently support this feature.

Figure 6 shows the average update interval of RSS feeds, calculated by averaging the valid update intervals measured for each feed. Over 57% of RSS feeds have an average update interval of less than two hours. Since we gathered snapshots hourly, our data do not show updates that happen within an hour. Nevertheless, we find that RSS feeds often change at a rapid rate, and RSS readers need to poll aggressively to detect updates quickly.

#### Update Size

We quantify update sizes using the minimum edit distance ("diff") between two consecutive snapshots. Figure 7 shows the cumulative distribution of update sizes.

- **Key Statistics:**
  - 64% of all updates involve no more than two lines of changes.
  - The average change in the number of lines is 16.7 (6.8% of feed size).
  - The maximum change is 16,542 lines.
  - The feed that changes the most is hosted by a weather service website, providing weather forecasts for many areas.

### Correlations Between Feed Size and Updates

We explore the correlation between feed size and update rates and sizes. Figure 8 shows the average number of updates as a function of feed size. Although the data indicates some peaks, there is no strong correlation between size and update rate. We suspect that the peaks are due to commonly used, frequently changing XML objects clustered around certain sizes.

However, there is a correlation between feed size and update size, as seen in Figure 9. For most feeds, the average update size grows as feed size increases. For feeds smaller than 68KB (about 99% of the total), the correlation coefficient is 0.89. The curve becomes irregular after feed size increases beyond 68KB due to the small number of samples available.

### 4.3 Client Behavior

Finally, we analyze how clients use the RSS system based on the user activity trace we collected.

#### Polling Frequency

We divide clients into two categories: auto and manual, based on their polling behavior. Auto clients poll feeds at a fixed rate, usually by running RSS readers in the background. Manual clients use RSS similarly to web browsing, launching RSS readers when they want to read the news and closing the program afterward. We consider clients who poll a feed less than three times a day or with irregular polling intervals as manual clients. We find that 36% of clients in our department fall into this category. For auto clients, who poll at periodic intervals, Figure 10 shows the polling rate.

- **Key Findings:**
  - 58% of auto clients poll feeds hourly, suggesting that most users do not change the default setting of their RSS readers.
  - A small number of aggressive clients poll as often as every ten minutes.

#### Number of Subscriptions

Figure 11 shows the number of feeds subscribed to by each client in sorted order. This distribution follows a Zipf distribution with an Î± parameter around 1.13.

- **Key Findings:**
  - Most clients subscribe to fewer than five feeds.
  - Several clients subscribe to more than 100 feeds.

### 5. Discussions and Conclusions

This paper presents a measurement study of RSS, a pub-sub system for disseminating web micronews. It provides insights into how a pub-sub system is utilized in practice and what issues need to be addressed while designing such systems.

The main focus of our study is to analyze how feeds are updated, a fundamental aspect of pub-sub systems. Our study shows that update rates of RSS feeds are distributed in extremes: a majority of feeds (55%) update every hour, while many feeds (25%) do not change for days. Significant bandwidth savings can be achieved by using the optimal polling period for each feed instead of a single common polling rate for all feeds. However, end users of RSS cannot be relied upon to set the optimal polling rate, as this study shows that clients predominantly do not change the default settings of RSS readers. A better solution is for content providers to indicate when and at what rate to poll a particular feed. Version 2.0 of RSS already supports customized polling, although many readers have yet to implement this feature.

Much of the bandwidth in RSS goes towards refetching feeds to check for updates because the current RSS architecture does not employ asynchronous notifications. This study indicates that delta encoding is a major opportunity for improving bandwidth usage in RSS, as updates are often made to only a tiny portion of the content (about 7% of the feed on average). Moreover, clients subscribed to the same feed poll the content servers independently, imposing a high load on the servers of popular feeds. Recently proposed systems [11, 10] use peer-to-peer overlays for cooperative polling to alleviate server load and provide faster updates. Such systems capable of asynchronous update notifications seem to be a step in the right direction.

Overall, this is the first study of a widely deployed pub-sub system performed during the early days of RSS. We hope this study will help in understanding, designing, and evaluating future pub-sub systems, and more in-depth studies will emerge as the popularity of RSS increases.