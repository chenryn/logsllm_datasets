### 21. Nested Loop Joins
- **21.2 Nested Loop Joins** . . . . . . . . . . . . . . . . . . . . . . . . . . . . 398
- **Cartesian Product** . . . . . . . . . . . . . . . . . . . . . . . . . . . . 399
- **Parameterized Joins** . . . . . . . . . . . . . . . . . . . . . . . . . . . 403
- **Caching Rows (Memoization)** . . . . . . . . . . . . . . . . . . . . . . 407
- **Outer Joins** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 411
- **Anti- and Semi-Joins** . . . . . . . . . . . . . . . . . . . . . . . . . . . 412
- **Non-Equi-Joins** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415
- **Parallel Mode** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415

### 22. Hashing
- **22.1 Hash Joins** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 417
  - **One-Pass Hash Joins** . . . . . . . . . . . . . . . . . . . . . . . . . . . 417
  - **Two-Pass Hash Joins** . . . . . . . . . . . . . . . . . . . . . . . . . . . 422
  - **Dynamic Adjustments** . . . . . . . . . . . . . . . . . . . . . . . . . . 425
  - **Hash Joins in Parallel Plans** . . . . . . . . . . . . . . . . . . . . . . . 429
    - **Parallel One-Pass Hash Joins** . . . . . . . . . . . . . . . . . . . . . 430
    - **Parallel Two-Pass Hash Joins** . . . . . . . . . . . . . . . . . . . . . 432
  - **Modifications** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435
- **22.2 Distinct Values and Grouping** . . . . . . . . . . . . . . . . . . . . . . 437

### 23. Sorting and Merging
- **23.1 Merge Joins** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 440
  - **Merging Sorted Sets** . . . . . . . . . . . . . . . . . . . . . . . . . . . 440
  - **Parallel Mode** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 443
  - **Modifications** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 444
- **23.2 Sorting** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 445
  - **Quicksort** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 447
  - **Top-N Heapsort** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 448
  - **External Sorting** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 450
  - **Incremental Sorting** . . . . . . . . . . . . . . . . . . . . . . . . . . . 454
  - **Parallel Mode** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 456
- **23.3 Distinct Values and Grouping** . . . . . . . . . . . . . . . . . . . . . . 458
- **23.4 Comparison of Join Methods** . . . . . . . . . . . . . . . . . . . . . . 460

### Index
- **Index** . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 464

---

## About This Book

> "Books are not made to be believed, but to be subjected to inquiry."
> —Umberto Eco, *The Name of the Rose*

### For Whom Is This Book?
This book is for those who will not settle for a black-box approach when working with a database. If you are eager to learn, prefer not to take expert advice for granted, and would like to figure everything out yourself, follow along.

I assume that the reader has already tried using PostgreSQL and has at least some general understanding of how it works. Entry-level users may find the text a bit difficult. For example, I will not tell anything about how to install the server, enter psql commands, or set configuration parameters.

I hope that the book will also be useful for those who are familiar with another database system but switch over to PostgreSQL and would like to understand how they differ. A book like this would have saved me a lot of time several years ago, and that's exactly why I finally wrote it.

### What This Book Will Not Provide
This book is not a collection of recipes. You cannot find ready-made solutions for every occasion, but if you understand the inner mechanisms of a complex system, you will be able to analyze and critically evaluate other people's experiences and come to your own conclusions. For this reason, I explain such details that may at first seem to be of no practical use.

But this book is not a tutorial either. While delving deeply into some fields (in which I am more interested myself), it may say nothing at all about others.

By no means is this book a reference. I tried to be precise, but I did not aim at replacing the documentation, so I could easily leave out some details that I considered insignificant. In any unclear situation, read the documentation.

This book will not teach you how to develop the PostgreSQL core. I do not expect any knowledge of the C language, as this book is mainly intended for database administrators and application developers. But I do provide multiple references to the source code, which can give you as many details as you like, and even more.

### What This Book Does Provide
In the introductory chapter, I briefly touch upon the main database concepts that will serve as the foundation for all the further narration. I do not expect you to get much new information from this chapter but still include it to complete the big picture. Besides, this overview can be found useful by those who are migrating from other database systems.

Part I is devoted to questions of data consistency and isolation. I first cover them from the user’s perspective (you will learn which isolation levels are available and what are the implications) and then dwell on their internals. For this purpose, I have to explain implementation details of multiversion concurrency control and snapshot isolation, paying special attention to cleanup of outdated row versions.

Part II describes the buffer cache and its usage to restore data consistency after a failure.

Part III goes into details about the structure and usage of various types of locks: lightweight locks for, heavyweight locks for relations, and row-level locks.

Part IV explains how the server plans and executes queries. I will tell you which data access methods are available, which join methods can be used, and how the collected statistics are applied.

Part V extends the discussion of indexes from the already covered B-trees to other access methods. I will explain some general principles of extensibility that define the boundaries between the core of the indexing system, index access methods, and data types (which will bring us to the concept of operator classes), and then elaborate on each of the available methods.

### Conventions
PostgreSQL includes multiple “introspective” extensions, which are not used in routine work but give us an opportunity to peek into the server’s internal behavior. This book uses quite a few of them. Apart from letting us explore the server internals, these extensions can also facilitate troubleshooting in complex usage scenarios.

I tried to write this book in a way that would allow reading it page by page, from start to finish. But it is hardly possible to uncover all the truth at once, so I had to get back to one and the same topics several times. Writing that “it will be considered later” over and over again would inevitably make the text much longer, so in such cases, I simply put the page number in the margin to refer you to further discussion. A similar number pointing backward will take you to the page where something has already been said on the subject.

Both the text and all the code examples in this book apply to PostgreSQL. Next to some paragraphs, you can see a version number in the page margin. It means that the provided information is relevant starting from the indicated PostgreSQL version, while all the previous versions either did not have the described feature at all or used a different implementation. Such notes can be useful for those who have not upgraded their systems to the latest release yet.

I also use the margins to show the default values of the discussed parameters. The names of both regular and storage parameters are printed in italics: `work_mem`. 

In footnotes, I provide multiple links to various sources of information. There are several of them, but first and foremost, I list the PostgreSQL documentation, which is a wellspring of knowledge. Being an essential part of the project, it is always kept up-to-date by PostgreSQL developers themselves. However, the primary reference is definitely the source code. It is amazing how many answers you can find by simply reading comments and browsing through files, even if you do not know C. Sometimes I also refer to commitfest entries: you can always trace the history of all changes and understand the logic of decisions taken by developers if you read the related discussions in the psql-hackers mailing list, but it requires digging through piles of emails.

Sidenotes that can lead the discussion astray (which I could not help but include in the book) are printed like this, so they can be easily skipped.

Naturally, the book contains multiple code examples, mainly in SQL. The code is provided with the prompt `=>`; the server response follows if necessary:
```sql
=> SELECT now();
now
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
2022−11−25 22:57:04.866944+03
(1 row)
```
If you carefully repeat all the provided commands in PostgreSQL, you should get exactly the same results (down to transaction IDs and other inessential details). Anyway, all the code examples in this book have been generated by a script containing exactly these commands.

When it is required to illustrate concurrent execution of several transactions, the code run in another session is indented and marked off by a vertical line.
```sql
=> SHOW server_version;
server_version
−−−−−−−−−−−−−−−−
14.4
(1 row)
```
To try out such commands (which is useful for self-study, just like any experimentation), it is convenient to open two psql terminals.

The names of commands and various database objects (such as tables and columns, functions, or extensions) are highlighted in the text using a sans-serif font: `CREATE TABLE`, `pg_class`.

If a utility is called from the operating system, it is shown with a prompt that ends with `$`:
```sh
postgres$ whoami
postgres
```
I use Linux, but without any technicalities; having some basic understanding of this operating system will be enough.

### Acknowledgments
It is impossible to write a book alone, and now I have an excellent opportunity to thank good people.

I am very grateful to Pavel Luzanov who found the right moment and offered me to start doing something really worthwhile.

I am obliged to Postgres Professional for the opportunity to work on this book beyond my free time. But there are actual people behind the company, so I would like to express my gratitude to Oleg Bartunov for sharing ideas and infinite energy, and to Ivan Panchenko for thorough support and LaTeX.

I would like to thank my colleagues from the education team for the creative atmosphere and discussions that shaped the scope and format of our training courses, which also got reflected in the book. Special thanks to Pavel Tolmachev for his meticulous review of the drafts.

Many chapters of this book were first published as articles in the Habr blog, and I am grateful to the readers for their comments and feedback. It showed the importance of this work, highlighted some gaps in my knowledge, and helped me improve the text.

I would also like to thank Liudmila Mantrova, who has put much effort into polishing this book’s language. If you do not stumble over every other sentence, the credit goes to her. Besides, Liudmila took the trouble to translate this book into English, for which I am very grateful too.

I do not provide any names, but each function or feature mentioned in this book has required years of work done by particular people. I admire PostgreSQL developers, and I am very glad to have the honor of calling many of them my colleagues.

---

## 1. Introduction
### 1.1 Data Organization
#### Databases
PostgreSQL is a program that belongs to the class of database management systems. When this program is running, we call it a PostgreSQL server, or instance. Data managed by PostgreSQL is stored in databases. A single PostgreSQL instance can serve several databases at a time; together they are called a database cluster.

To be able to use the cluster, you must first initialize (create) it. The directory that contains all the files related to the cluster is usually called `PGDATA`, after the name of the environment variable pointing to this directory.

Installations from pre-built packages can add their own “abstraction layers” over the regular PostgreSQL mechanism by explicitly setting all the parameters required by utilities. In this case, the database server runs as an operating system service, and you may never come across the `PGDATA` variable directly. But the term itself is well-established, so I am going to use it.

After cluster initialization, `PGDATA` contains three identical databases:
- `template0` is used for cases like restoring data from a logical backup or creating a database with a different encoding; it must never be modified.
- `template1` serves as a template for all the other databases that a user can create in the cluster.
- `postgres` is a regular database that you can use at your discretion.

#### PostgreSQL Instance
- **Database**: `CREATEDATABASE`
- **Cluster**: `postgres`, `template0`, `template1`, `newdb`

#### System Catalog
Metadata of all cluster objects (such as tables, indexes, data types, or functions) is stored in tables that belong to the system catalog. Each database has its own set of tables (and views) that describe the objects of this database. Several system catalog tables are common to the whole cluster; they do not belong to any particular database (technically, a dummy database with a zero OID is used), but can be accessed from all of them.

The system catalog can be viewed using regular queries, while all modifications in it are performed by DDL commands. The `psql` client also offers a whole range of commands that display the contents of the system catalog.

Names of all system catalog tables begin with `pg_`, like in `pg_database`. Column names start with a three-letter prefix that usually corresponds to the table name, like `datname`.

In all system catalog tables, the column declared as the primary key is called `oid` (object identifier); its type, which is also called `oid`, is a 32-bit integer.

The implementation of `oid` object identifiers is virtually the same as that of sequences, but it appeared in PostgreSQL much earlier. What makes it special is that the generated unique IDs issued by a common counter are used in different tables of the system catalog. When an assigned ID exceeds the maximum value, the counter is reset. To ensure that all values in a particular table are unique, the next issued `oid` is checked by the unique index; if it is already used in this table, the counter is incremented, and the check is repeated.

#### Schemas
Schemas are namespaces that store all objects of a database. Apart from user schemas, PostgreSQL offers several predefined ones:
- `public` is the default schema for user objects unless other settings are specified.
- `pg_catalog` is used for system catalog tables.
- `information_schema` provides an alternative view for the system catalog as defined by the standard.
- `pg_toast` is used for objects related to TOAST.
- `pg_temp` comprises temporary tables. Although different users create temporary tables in different schemas called `pg_temp_N`, everyone refers to their objects using the `pg_temp` alias.

Each schema is confined to a particular database, and all database objects belong to this or that schema.

If the schema is not specified explicitly when an object is accessed, PostgreSQL selects the first suitable schema from the search path. The search path is based on the value of the `search_path` parameter, which is implicitly extended with `pg_catalog` and (if necessary) `pg_temp` schemas. It means that different schemas can contain objects with the same names.

#### Tablespaces
Unlike databases and schemas, which determine logical distribution of objects, tablespaces define physical data layout. A tablespace is virtually a directory in a filesystem. You can distribute your data between tablespaces in such a way that archived data is stored on slow disks, while the data that is being actively updated goes to fast disks.

One and the same tablespace can be used by different databases, and each database can store data in several tablespaces. It means that logical structure and physical data layout do not depend on each other.

Each database has the so-called default tablespace. All database objects are created in this tablespace unless another location is specified. System catalog objects related to this database are also stored there.

During cluster initialization, two tablespaces are created:
- `pg_default` is located in the `/base` directory; it is used as the default tablespace unless another tablespace is explicitly selected for this purpose.
- `pg_global` is located in the `/global` directory; it stores system catalog objects that are common to the whole cluster.

When creating a custom tablespace, you can specify any directory; PostgreSQL will create a symbolic link to this location in the `/pg_tblspc` directory. In fact, all paths used by PostgreSQL are relative to the `PGDATA` directory, which allows you to move the entire cluster to a different location.