### Cost of FlowFox
During the compatibility experiment, where FlowFox browsed 500 different websites, we measured the memory consumption for each site using `about:memory` after the `onload` event. On average, FlowFox incurred a memory overhead of 88%.

### 6. Related Work
We discuss related work on (i) information flow security and specific enforcement mechanisms and (ii) general web script security countermeasures.

#### Information Flow Security
Information flow security is an established research area, and it is too broad to survey comprehensively here. For many years, the field was dominated by research into static enforcement techniques. We refer the reader to the well-known survey by Sabelfeld and Myers [38] for a detailed discussion of general, static approaches to information flow enforcement.

Dynamic techniques have seen renewed interest in the last decade. Le Guernic’s PhD thesis [28] provides an extensive survey up to 2007, but significant new results have been achieved since then. Recent works propose runtime monitors for information flow security, often with a particular focus on JavaScript or the web context. Sabelfeld et al. have proposed monitoring algorithms that can handle DOM-like structures [37], dynamic code evaluation [3], and timeouts [36]. In a very recent paper, Hedin and Sabelfeld [21] propose dynamic mechanisms for all core JavaScript language features. Austin and Flanagan [4] have developed alternative, sometimes more permissive techniques. These runtime monitoring-based techniques are likely more efficient than the technique proposed in this paper, but they lack the precision of secure multi-execution (SME): such monitors will block the execution of some non-interferent programs.

Secure multi-execution (SME) is another dynamic technique that was independently developed by several researchers. Capizzi et al. [13] proposed shadow executions, running two processes for the H (secret) and L (public) security levels to provide strong confidentiality guarantees. They applied their technique to Mozilla Firefox but multi-executed the entire browser, which limits the script policies they can enforce compared to FlowFox, as discussed in Section 3.3. Devriese and Piessens [18] were the first to prove the strong soundness and precision guarantees offered by SME. They also reported on a JavaScript implementation that requires a modified virtual machine but did not integrate it into a browser.

These initial results have been improved and extended in several ways. Kashyap et al. [27] generalized the technique of secure multi-execution to a family of techniques called the scheduling approach to non-interference, analyzing how the scheduling strategy can impact security properties. Jaskelioff and Russo [24] proposed a monadic library to realize secure multi-execution in Haskell, and Barthe et al. [9] proposed a program transformation that simulates SME. Bielova et al. [10] proposed a variant of secure multi-execution suitable for reactive systems like browsers. This paper develops the theory of SME for reactive systems, but the implementation is only for a simple browser model written in OCaml. Finally, Austin and Flanagan [5] developed a more efficient implementation technique. Their multi-faceted evaluation technique could lead to substantial performance improvements for FlowFox, especially for policies with many levels.

Static or hybrid techniques specifically for information flow security in JavaScript or browsers have also been proposed, but these techniques are either quite restrictive or cannot handle the full JavaScript language. Bohannon et al. [12, 11] defined a notion of non-interference for reactive systems and showed how a model browser can be formalized as such a reactive system. Chugh et al. [14] developed a novel multi-stage static technique for enforcing information flow security in JavaScript. BFlow [44] provides a framework for building privacy-preserving web applications and includes a coarse-grained dynamic information flow control monitor.

#### Other Web Script Security Countermeasures
Information flow security is one promising approach to web script security, but two other general-purpose approaches have also been applied: isolation and taint-tracking.

**Isolation or Sandboxing:** These approaches develop techniques where scripts can be included in web pages without giving them (full) access to the surrounding page and the browser API. Several practical systems have been proposed, including ADSafe [15], Caja [31], and Facebook JavaScript [19]. Maffeis et al. [29] formalized the key mechanisms underlying these sandboxes and proved they can be used to create secure sandboxes. They also discussed several other existing proposals, and we refer the reader to their paper for a more extensive discussion of work in this area. Isolation is easier to achieve than non-interference, but it is also more restrictive: often access needs to be denied to ensure the script cannot leak information, even if it would be perfectly fine to use the information locally in the browser.

**Taint Tracking:** This is an approximation to information flow security that only takes explicit flows into account. It can be implemented more efficiently than dynamic information flow enforcement techniques, and several authors have proposed taint tracking systems for web security. Two representative examples are Xu et al. [43], who propose taint-enhanced policy enforcement as a general approach to mitigate implementation-level vulnerabilities, and Vogt et al. [41], who propose taint tracking to defend against cross-site scripting.

Besides these general alternative approaches, many ad-hoc countermeasures for specific classes of web script security problems have been proposed. Due to space constraints, we do not provide a full list. We discussed the examples of AdJail [40], SessionShield [33], and history sniffing [42] in the paper.

### 7. Conclusions
We have discussed the design, implementation, and evaluation of FlowFox, a browser that extends Mozilla Firefox with a general, flexible, and sound information flow control mechanism. FlowFox provides evidence that information flow control can be implemented in a full-scale web browser, supporting powerful security policies without compromising compatibility.

All our research material, including the prototype implementation and Selenium test cases, is available online at http://distrinet.cs.kuleuven.be/software/FlowFox/.

### 8. Acknowledgments
The authors thank Andrei Sabelfeld, Nataliia Bielova, Fabio Massacci, and the anonymous reviewers for their feedback on draft versions of this paper. The development of FlowFox was strongly influenced by discussions with and feedback from the WebSand and SPION project teams.

This research is partially funded by the Research Fund KU Leuven, the EU-funded FP7 projects NESSoS and WebSand, and by the IWT-SBO project SPION. Dominique Devriese holds a Ph.D. fellowship of the Research Foundation - Flanders (FWO).

With financial support from the Prevention of and Fight against Crime Programme of the European Union, European Commission – Directorate-General Home Affairs. This publication reflects the views only of the authors, and the European Commission cannot be held responsible for any use which may be made of the information contained therein.

### 9. References
[1] D. Akhawe, A. Barth, P. E. Lam, J. Mitchell, and D. Song. Towards a Formal Foundation of Web Security. In Proceedings of the IEEE Computer Security Foundations Symposium, pages 290–304, 2010.

[2] P. Akritidis, M. Costa, M. Castro, and S. Hand. Noninterference Through Baggy Bounds Checking: An Efficient and Backwards-Compatible Defense against Out-of-Bounds Errors. In Proceedings of the USENIX Security Symposium, pages 51–66, 2009.

[3] A. Askarov and A. Sabelfeld. Tight Enforcement of Information-Release Policies for Dynamic Languages. In Proceedings of the IEEE Computer Security Foundations Symposium, pages 43–59, 2009.

[4] T. H. Austin and C. Flanagan. Permissive Dynamic Information Flow Analysis. In Proceedings of the ACM SIGPLAN Workshop on Programming Languages and Analysis for Security, pages 3:1–3:12, 2010.

[5] T. H. Austin and C. Flanagan. Multiple Facets for Dynamic Information Flow. In Proceedings of the ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, 2012.

[6] L. D. Baron. Preventing attacks on a user’s history through CSS :visited selectors. http://dbaron.org/mozilla/visited-privacy, 2010.

[7] A. Barth, C. Jackson, and J. C. Mitchell. Robust Defenses for Cross-Site Request Forgery. In Proceedings of the ACM Conference on Computer and Communications Security, pages 75–88, 2008.

[8] A. Barth, C. Jackson, and J. C. Mitchell. Securing Frame Communication in Browsers. In Proceedings of the USENIX Security Symposium, 2008.

[9] G. Barthe, J. M. Crespo, D. Devriese, F. Piessens, and E. Rivas. Secure Multi-Execution through Static Program Transformation. Proceedings of the International Conference on Formal Techniques for Distributed Systems, pages 186–202, 2012.

[10] N. Bielova, D. Devriese, F. Massacci, and F. Piessens. Reactive Non-Interference for a Browser Model. In Proceedings of the International Conference on Network and System Security, 2011.

[11] A. Bohannon and B. C. Pierce. Featherweight Firefox: Formalizing the Core of a Web Browser. In Proceedings of the USENIX Conference on Web Application Development, pages 123–135, 2010.

[12] A. Bohannon, B. C. Pierce, V. Sjöberg, S. Weirich, and S. Zdancewic. Reactive Noninterference. In Proceedings of the ACM Conference on Computer and Communications Security, pages 79–90, 2009.

[13] R. Capizzi, A. Longo, V. Venkatakrishnan, and A. Sistla. Preventing Information Leaks through Shadow Executions. In Proceedings of the Annual Computer Security Applications Conference, pages 322–331, 2008.

[14] R. Chugh, J. A. Meister, R. Jhala, and S. Lerner. Staged Information Flow for JavaScript. ACM SIGPLAN Notices, 44(6):50–62, 2009.

[15] D. Crockford. Adsafe. http://www.adsafe.org/, December 2009.

[16] M. Daniel, J. Honoroﬀ, and C. Miller. Engineering Heap Overflow Exploits with JavaScript. In Proceedings of the USENIX Workshop on Offensive Technologies, 2008.

[17] P. De Ryck, L. Desmet, P. Philippaerts, and F. Piessens. A Security Analysis of Next Generation Web Standards. Technical report, European Network and Information Security Agency (ENISA), 2011.

[18] D. Devriese and F. Piessens. Noninterference Through Baggy Bounds Checking: An Efficient and Backwards-Compatible Defense against Out-of-Bounds Errors. In Proceedings of the IEEE Symposium on Security and Privacy, pages 109–124, 2010.

[19] Facebook. Fbjs. http://developers.facebook.com/docs/fbjs/, 2011.

[20] D. Flanagan. JavaScript: The Definitive Guide. O’Reilly Media, Inc., 6th edition, 2011.

[21] D. Hedin and A. Sabelfeld. Information-Flow Security for a Core of JavaScript. In Proceedings of the IEEE Computer Security Foundations Symposium, 2012.

[22] W3C: HTML5. http://dev.w3.org/html5/spec/Overview.html.

[23] D. Jang, R. Jhala, S. Lerner, and H. Shacham. An Empirical Study of Privacy-Violating Information Flows in JavaScript Web Applications. In Proceedings of the ACM Conference on Computer and Communications Security, pages 270–283, 2010.

[24] M. Jaskelioff and A. Russo. Secure Multi-Execution in Haskell. In Proceedings of Andrei Ershov International Conference on Perspectives of System Informatics, 2011.

[25] M. Johns. On JavaScript Malware and related threats - Web page based attacks revisited. Journal in Computer Virology, 4(3):161–178, August 2008.

[26] R. W. M. Jones and P. H. J. Kelly. Backwards-compatible bounds checking for arrays and pointers in C programs. In Proceedings of the International Workshop on Automatic Debugging, pages 13–26, 1997.

[27] V. Kashyap, B. Wiedermann, and B. Hardekopf. Timing- and Termination-Sensitive Secure Information Flow: Exploring a New Approach. In Proceedings of the IEEE Conference on Security and Privacy, pages 413–428, 2011.

[28] G. Le Guernic. Confidentiality Enforcement Using Dynamic Information Flow Analyses. PhD thesis, Kansas State University, 2007.

[29] S. Maffeis, J. C. Mitchell, and A. Taly. Object Capabilities and Isolation of Untrusted Web Applications. In Proceedings of the IEEE Symposium on Security and Privacy, pages 125–140, 2010.

[30] J. Magazinius, A. Askarov, and A. Sabelfeld. A Lattice-based Approach to Mashup Security. In Proceedings of the ACM Symposium on Information, Computer and Communications Security, pages 15–23, 2010.

[31] M. S. Miller, M. Samuel, B. Laurie, I. Awad, and M. Stay. Caja: Safe active content in sanitized JavaScript. http://google-caja.googlecode.com/files/caja-spec-2008-01-15.pdf, January 2008.

[32] N. Nikiforakis, L. Invernizzi, A. Kapravelos, S. Van Acker, W. Joosen, C. Kruegel, F. Piessens, and G. Vigna. You Are What You Include: Large-scale Evaluation of Remote JavaScript Inclusions. In Proceedings of the ACM Conference on Computer and Communications Security, 2012.

[33] N. Nikiforakis, W. Meert, Y. Younan, M. Johns, and W. Joosen. SessionShield: Lightweight protection against session hijacking. In Proceedings of the International Symposium on Engineering Secure Software and Systems, pages 87–100, 2011.

[34] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose. All Your iFRAMEs Point to Us. In Proceedings of the USENIX Security Symposium, pages 1–15, 2008.

[35] N. Provos, D. McNamee, P. Mavrommatis, K. Wang, and N. Modadugu. The Ghost In The Browser: Analysis of Web-based Malware. In Proceedings of the USENIX Workshop on Hot Topics in Understanding Botnets, 2007.

[36] A. Russo and A. Sabelfeld. Securing Timeout Instructions in Web Applications. In Proceedings of the IEEE Computer Security Foundations Symposium, pages 92–106, 2009.

[37] A. Russo, A. Sabelfeld, and A. Chudnov. Tracking Information Flow in Dynamic Tree Structures. In Proceedings of the European Symposium on Research in Computer Security, pages 86–103, 2009.

[38] A. Sabelfeld and A. C. Myers. Language-Based Information-Flow Security. IEEE Journal on Selected Areas of Communications, 21(1):5–19, January 2003.

[39] K. Singh, A. Moshchuk, H. J. Wang, and W. Lee. On the Incoherencies in Web Browser Access Control Policies. In Proceedings of the IEEE Symposium on Security and Privacy, pages 463–478, 2010.

[40] M. Ter Louw, K. T. Ganesh, and V. Venkatakrishnan. AdJail: Practical Enforcement of Confidentiality and Integrity Policies on Web Advertisements. In Proceedings of the USENIX Security Symposium, pages 24–24, 2010.

[41] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Krügel, and G. Vigna. Cross Site Scripting Prevention with Dynamic Data Tainting and Static Analysis. In Proceedings of the Annual Network & Distributed System Security Symposium, 2007.

[42] Z. Weinberg, E. Y. Chen, P. R. Jayaraman, and C. Jackson. I Still Know What You Visited Last Summer: User Interaction and Side-Channel Attacks on Browsing History. In Proceedings of the IEEE Symposium on Security and Privacy, 2011.

[43] W. Xu, S. Bhatkar, and R. Sekar. Taint-Enhanced Policy Enforcement: A Practical Approach to Defeat a Wide Range of Attacks. In Proceedings of the USENIX Security Symposium, pages 121–136, 2006.

[44] A. Yip, N. Narula, M. Krohn, and R. Morris. Privacy-Preserving Browser-Side Scripting with BFlow. In Proceedings of the ACM European Conference on Computer Systems, pages 233–246. ACM, 2009.

[45] Y. Younan, W. Joosen, and F. Piessens. Runtime Countermeasures for Code Injection Attacks against C and C++ Programs. ACM Computing Surveys, 44(3):17:1–17:28, 2012.

[46] Y. Younan, P. Philippaerts, L. Cavallaro, R. Sekar, F. Piessens, and W. Joosen. PAriCheck: An Efficient Pointer Arithmetic Checker for C Programs. In Proceedings of the ACM Symposium on Information, Computer and Communications Security, pages 145–156, 2010.

### Appendix A: Scenarios
| Category | Site | Rank | Use Case Scenario |
|----------|------|------|-------------------|
| Search Engine | Google | 1 | The user types a keyword, clicks on a random search term in the auto-completed result list, and waits for the result page. |
| Social Network Site | Facebook | 2 | The user clicks on a friend in the friends list, types a multi-line private message, and clicks the send button. |
| Web Mail | Yahoo! | 4 | The user clicks on the 'Compose Message' button, fills in the to and subject fields, types the message body, and clicks the send button. The user waits for confirmation that the message is sent successfully. |
| Wiki | Wikipedia | 6 | The user opens the main page, clicks on the search bar, types the first characters of a keyword, clicks on the first result, and waits until a specific piece of text is found on the page. |
| Blogging | Blogspot | 8 | The user opens the dashboard, creates a new blog post, types a title and message, saves the message, and closes the editor. |
| Online Sales | Amazon | 11 | The user types the beginning of a book title, clicks on the first search result within the auto-completed result list, adds the book to the shopping cart, and deletes the book again from the cart. |
| Tracking | Microsoft | 31 | The user selects random pieces of text from the home page and clicks on several objects (e.g., menu items). The tracking library will leak the selected locations. |
| Tracking | The Sun | 547 | The user selects random pieces of text from the home page. The tracking library will leak the document title and selected text. |

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.