### 1. Install-Time MAC Mechanism

Our install-time Mandatory Access Control (MAC) mechanism performs checks on the permissions requested by an app or implicitly granted by the system against a predefined MAC policy configuration. This approach allows for a policy-driven authorization of app installations, maintaining the all-or-nothing contract that Android currently offers to apps. Unlike Androidâ€™s existing permission model, which relies on user consent, our install-time MAC ensures that the policy has the final say in app installation, thereby enabling organizations to enforce limits on the maximum permissions granted to apps.

The policy is defined in a new `mac_permissions.xml` configuration file, as described in Section 3.3.2, and is enforced through extensions to the Android PackageManagerService (PMS). Integrating this mechanism into the PMS ensures that policy checks are unbypassable and always applied during app installation and system startup. This means that even pre-installed system apps can be restricted; if an app is not authorized by the policy, it is completely disabled from running. For third-party app installations, if the policy denies any of the requested permissions, the installation is aborted.

### 2. Runtime Policy Management

SE Android's policy is integrated into the Android build process and included in the ramdisk image within the boot partition. This ensures that all subsequent processes and files are properly labeled and that the policy is enforced as early as possible. However, this approach does not allow for runtime changes to the policy without updating the entire boot image.

To support basic SELinux management functionality, we developed SELinux JNI bindings that enable the system server or system UID apps (signed with the platform certificate) to set the SELinux enforcing mode and policy booleans. We also created a SEAndroidManager app to allow users to manage these settings. However, this mechanism does not support modifying the policy beyond setting policy booleans.

For runtime policy management, we added support for reloading policy files from the standard Android `/data/system` directory, which is already used for various runtime system configuration data. This directory is writable only by the system UID, ensuring that only the Android system server or system UID apps can update the configuration files. Once the updated policy files are written to `/data/system`, a policy reload is initiated by setting a new Android system property, `selinux.reload_policy`, which can only be set by system UID processes. The ability to write these files and set this property can be further restricted using SE Android policy.

Each time the property is set, the `init` process reloads the kernel policy and other relevant configuration files, such as file contexts and property contexts. The `init` process then executes any triggers defined for the `selinux.reload_policy` property in the `init.rc` configuration. We added a trigger to restart the `ueventd` and `installd` daemons, ensuring they also reload the policy configuration files. We confirmed that restarting these daemons at runtime does not cause any issues for Android. An alternative approach would have been to notify the daemons via their existing socket interfaces, allowing them to reload the policy without restarting.

With this support in place, we created device admin APIs to allow management of SELinux settings and provisioning of alternate policy configurations via a device admin app. We also developed a sample device admin app, SEAndroidAdmin, to demonstrate these APIs. MDM vendors can leverage the code from this sample app as a starting point for integrating SE Android management.

### 3. Policy Configuration

Policy configuration for SE Android can be divided into two categories: the kernel layer MAC mechanism, governed by the SELinux policy configuration, and the middleware MAC mechanisms, governed by their own configurations.

#### 3.1. SELinux Policy Configuration

Our goal for SE Android was to apply SELinux to enforce a small set of platform security goals without introducing any user-visible or app developer-visible changes. Recognizing that Android was unlikely to discard its existing Discretionary Access Control (DAC) model, we focused on using SELinux to reinforce the DAC model and address its gaps.

We aimed to confine privileged daemons, ensure that Android middleware components could not be bypassed, and strongly isolate apps from each other and from the system. As the SELinux reference policy was not suitable for Android, we created a tailored policy from scratch. The Type Enforcement (TE) portion of the policy defines confined domains for system daemons and apps, while the Multi-Level Security (MLS) portion isolates app processes and files based on MLS categories. This approach yielded a small, fixed policy at the kernel layer, with no requirement for policy writing by Android app developers.

Table 3 compares the SE Android policy to the Fedora SELinux policy, showing that SE Android's policy is significantly smaller and simpler. It defines very few unconstrained domains, with only the domains for kernel threads, the `init` process, and the `su` program (in debug builds) being unconstrained. No app domains are unconstrained in SE Android.

Two new configuration files were added to the Android SELinux policy: the `property_contexts` configuration, which specifies the security context of Android system properties, and the `seapp_contexts` configuration, which labels app processes and app package directories.

#### 3.2. Middleware Policy

The `mac_permissions.xml` configuration for the install-time MAC mechanism is written in XML format and follows the conventions of other Android system configuration files. To manage access control policies for potentially hundreds of apps, we provided a scalable policy that does not require a new policy for each app. We leveraged the existing attribute of Android apps, which requires each installed app to be signed with an X.509 certificate. The `mac_permissions.xml` configuration uses AOSP signing keys to organize apps into equivalence classes and to allow or deny permissions based on whitelist/blacklist logic. Each entry in the configuration can also contain a `seinfo` tag to specify the seinfo string used for app security labeling. Individual apps can be specified by package name in addition to specifying their certificate. A default tag is provided to match any apps not otherwise specified by the configuration.

### 4. Analysis

This section surveys previously published exploits and vulnerabilities for Android and describes the results of analysis and testing performed to assess the effectiveness of SE Android in addressing the threats posed by flawed and malicious apps. The analysis and testing were conducted using the initial SE Android policy configuration, developed before reading about any specific exploits or vulnerabilities in Android.

#### 4.1. Root Exploits

The first class of exploits and vulnerabilities evaluated were Android root exploits, which escalate privileges from an unprivileged app or user shell to gain full root access to the device, enabling arbitrary actions.

##### 4.1.1. GingerBreak and Exploid

The Android volume daemon (`vold`) is a system service that runs as root and manages the mounting of the SD card and encrypted storage. `vold` listens for messages on a netlink socket to receive notifications from the kernel. CVE-2011-1823 identified a vulnerability in `vold`'s handling of netlink messages, where `vold` did not verify the origin of the messages and used a signed integer from the message as an array index without checking if it was non-negative.

The GingerBreak exploit demonstrated how to exploit this vulnerability to gain root access from a user shell. The exploit dynamically surveys the device to find the necessary information, obtains the PID of the `vold` process, and crafts a malicious payload. It then sends the payload to `vold` via a netlink socket, triggering the execution of the exploit binary with full root privileges.

In our analysis and testing of GingerBreak on SE Android, the policy denied the exploit's attempts to read the proc information for the `vold` process and to read the `vold` binary. The policy also denied the creation of the netlink socket, preventing the exploit from reaching the vulnerable code. Even if the exploit managed to send the payload, the policy denied the attempt to execute the exploit binary. Finally, the policy denied the attempt to create a setuid-root shell, limiting the shell to the same set of permissions with no superuser capabilities.

A similar vulnerability was discovered in the `ueventd` daemon, and the Exploid exploit demonstrated how to exploit it. In our analysis, SE Android would have blocked both the GingerBreak and Exploid exploits, as well as all vulnerabilities in the same class, i.e., vulnerabilities in netlink socket message handling in privileged daemons.

##### 4.1.2. Zimperlich and RageAgainstTheCage

The Android zygote is a system service that runs as root and spawns all Android apps. The zygote receives requests to spawn apps over a local socket and forks a child process for each app, which then switches to the unprivileged UID for the app before executing any app code. The Dalvik VM did not check for failure on the `setuid()` call, leading to the Zimperlich exploit, which induced a failure in the `setuid()` call through a subtle interaction with Linux resource limits.

The exploit forks itself repeatedly to reach the maximum number of processes allowed per UID, then issues a request to the zygote to spawn one of its components. When the zygote forks a child process and attempts to set the app UID, the `setuid()` call fails due to reaching the resource limit. The Dalvik VM does not abort, and the malicious app's code runs with the root UID. The exploit then remounts the system partition read-write and creates a setuid-root shell.

In our analysis and testing of Zimperlich on SE Android, although the malicious app succeeded in running with the root UID, the SELinux security context was still correctly set by the Dalvik VM based on the app's credentials. Consequently, the app ran in an unprivileged security context with no superuser capabilities, unable to remount the system partition or perform other privileged actions.

A similar vulnerability was discovered in the Android debug bridge daemon (`adbd`), and the RageAgainstTheCage exploit demonstrated how to exploit it. SE Android would have similarly blocked this exploit, ensuring that the app ran in an unprivileged security context.