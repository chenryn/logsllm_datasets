### Mitigating Third-Party Requests in Browser Extensions

#### 1. Issue with PDFium and Third-Party Requests
When requests are triggered from within a browser extension, such as PDFium, different directives apply, allowing cookies to be attached. A potential mitigation for this issue is to disable the functionality that triggers requests from within PDFium. However, this behavior is not unique to PDFium; other browser extensions can also be exploited to send arbitrary third-party requests, bypassing imposed cookie policies. Therefore, we propose that browsers strip cookies from all requests initiated by extensions by default. To avoid interfering with the operations of certain extensions, exclusions should be allowed, such as defining a list of cookie-enabled domains in the extension manifest.

#### 2. Bypassing Built-in Tracking Protection in Firefox
We analyzed the built-in tracking protection in Firefox and found that for each category of mechanisms that may trigger requests (excluding JavaScript in PDFs), there exists at least one technique that can bypass the protection. A manual analysis of the Firefox source code revealed that these bypasses are caused by the retroactive implementation of tracking protection. Specifically, although the request-validation mechanism is applied centrally, it is only triggered when a specific flag is set, requiring modifications to every functionality that may trigger requests. While Mozilla is aware of some of these bypasses and is working to mitigate them, our framework will assist in identifying bypass techniques, even those that are difficult to detect in millions of lines of code.

#### 3. Browser Extensions and Anti-Tracking
For anti-tracking extensions and ad blockers, it is crucial that all requests can be intercepted and blocked or altered. Our results, summarized in Table 2 and Table 3, show that this is not currently the case. We found that for every analyzed browser extension, there exists at least one technique that can be used to circumvent the extension and send an authenticated third-party request. Additionally, the results of the evaluated browser extensions are highly disparate, even for extensions targeting the same browser. For example, out of the 15 ad-blocking extensions for Google Chrome, at most 3 exhibited similar behavior.

The disparity in results can be partly explained by the frequent introduction of new features in browsers, which may affect the WebExtension API or cause unforeseen effects. For instance, support for intercepting WebSockets in browser exceptions was added years after the feature became available and had been actively exploited to circumvent ad blockers. Furthermore, AppCache caused one of the parameters of the `onBeforeRequest` API to behave differently, which was unexpected by most browser extensions. As a result, requests triggered by AppCache managed to bypass the vast majority of browser extensions. The same change was introduced to Chromium-based browsers when Service Workers were implemented, allowing most extensions for Chrome and Opera to be circumvented by triggering requests from Service Workers, while all Firefox extensions successfully block these third-party requests.

To address these issues, test cases that include new functionalities can be added to our framework, enabling browser vendors and extension developers to automatically detect and mitigate unforeseen side effects. Since all anti-tracking and ad-blocking browser extensions share a common core functionality (intercepting and altering or blocking requests), we propose that they use a specifically purposed API that is actively maintained. This API could be added to the WebExtension API or offered as an extension module, which would need to be maintained and updated by all browser extensions.

#### 4. Related Work
**Policy Inconsistencies:**
Multiple studies have shown that browser implementations often exhibit inconsistencies concerning security or privacy policies. Aggarwal et al. [3] discovered privacy violations in private browsing implementations through both manual and automatic analysis. Schwenk et al. [41] implemented a web application to evaluate the Same-Origin Policy (SOP) implementation in browsers, showing that browser behaviors differ due to the lack of a formal specification. Singh et al. [43] pointed out incoherencies in web browser access control policies and developed a measurement system to help browser vendors find a balance between keeping incoherent features and avoiding website breakage. Jackson and Barth [21] showed that newly shipped browser features can undermine existing security policies, particularly those affected by origin contamination.

**Ad Blocking Circumventions:**
Iqbal et al. [20] examined methods used to circumvent ad blocking in the wild, discussing the limitations of anti-adblock filter lists and proposing a machine learning approach to identify ad block bypasses. Storey et al. [45] proposed new approaches to ad blocking, including visual element recognition, stealth ad blocking, and signature-based active ad blocking.

**Trackers in the Wild:**
Roesner et al. [40] performed an in-depth empirical investigation of third-party trackers, proposing a classification and developing a client-side application for detecting and classifying trackers. Englehardt and Narayanan [14] conducted a large-scale crawl to gather insights about tracking behaviors, finding that tools like Ghostery were effective for blocking undesirable third-parties, except for obscure trackers.

#### 5. Conclusion
In this work, we introduce a framework capable of performing automated and comprehensive evaluations of cross-site countermeasures and anti-tracking policy implementations. By evaluating 7 browsers and 46 browser extensions, we found that virtually every browser- or extension-enforced policy can be bypassed. These bypasses were traced back to various causes, such as prerendering functionality not correctly accounting for same-site cookies and design flaws in Chromium-based browsers. Additionally, we discovered that not every implementation of the WebExtension API guarantees interception of every request, making it impossible for extension developers to be completely thorough in blocking or modifying undesirable requests.

Overall, browser implementations exhibited highly inconsistent behavior in enforcing policies on third-party requests, resulting in a high number of bypasses. This highlights the need for thorough evaluation of browsers, especially as they continuously add new features. Future research could extend the framework to evaluate other policy implementations, such as the LocalStorage API and Content Security Policy, and include the evaluation of mobile browsers.

#### 6. Acknowledgements
We would like to thank the reviewers for their insightful comments. This research is partially funded by the Research Fund KU Leuven.

#### 7. References
[1] Content security policy level 3. W3C working draft, W3C, Sept. 2016. https://www.w3.org/TR/2016/WD-CSP3-20160913/.

[2] ACAR, G., EUBANK, C., ENGLEHARDT, S., JUAREZ, M., NARAYANAN, A., AND DIAZ, C. The Web Never Forgets: Persistent Tracking Mechanisms in the Wild. Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security - CCS ’14 (2014), 674–689.

[3] AGGARWAL, G., BURSZTEIN, E., JACKSON, C., AND BONEH, D. An analysis of private browsing modes in modern browsers. In Proceedings of the 19th USENIX Conference on Security (Berkeley, CA, USA, 2010), USENIX Security’10, USENIX Association, pp. 6–6.

[4] AYENSON, M., WAMBACH, D., SOLTANI, A., GOOD, N., AND HOOFNAGLE, C. Flash cookies and privacy II: Now with HTML5 and ETag respawning.

[5] BARTH, A. HTTP State Management Mechanism. RFC 6265, RFC Editor, April 2011.

[6] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust defenses for cross-site request forgery. In Proceedings of the 15th ACM Conference on Computer and Communications Security (New York, NY, USA, 2008), CCS ’08, ACM, pp. 75–88.

[7] BLOG, M. Firefox now offers a more private browsing experience. https://blog.mozilla.org/blog/2015/11/03/firefox-now-offers-a-more-private-browsing-experience/, 2015.

[8] BLOG, M. Supporting same-site cookies in Firefox 60. https://blog.mozilla.org/security/2018/04/24/same-site-cookies-in-firefox-60/, 2018.

[9] BORTZ, A., AND BONEH, D. Exposing private information by timing web applications. In Proceedings of the 16th International Conference on World Wide Web (New York, NY, USA, 2007), WWW ’07, ACM, pp. 621–628.

[10] BUGREPLAY. WebSockets. Pornhub bypasses ad blockers with WebSockets. https://medium.com/thebugreport/pornhub-bypasses-ad-blockers-with-websockets-cedab35a8323, 2016.

[11] CHROMIUM. chrome.webRequest.onBeforeRequest doesn’t intercept WebSocket requests. https://bugs.chromium.org/p/chromium/issues/detail?id=129353, 2012.

[12] COMSCORE. The impact of cookie deletion on site-server and ad-server metrics in Australia, January 2011.

[13] ECKERSLEY, P. How unique is your web browser? In Proceedings of the 10th International Conference on Privacy Enhancing Technologies (Berlin, Heidelberg, 2010), PETS’10, Springer-Verlag, pp. 1–18.

[14] ENGLEHARDT, S., AND NARAYANAN, A. Online tracking: A 1-million-site measurement and analysis. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (New York, NY, USA, 2016), CCS ’16, ACM, pp. 1388–1401.

[15] FIELDING, R., GETTYS, J., MOGUL, J., FRYSTYK, H., MASINTER, L., LEACH, P., AND BERNERS-LEE, T. Hypertext transfer protocol – http/1.1. RFC 2616, RFC Editor, June 1999.

[16] GELERNTER, N., AND HERZBERG, A. Cross-site search attacks. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (2015), ACM, pp. 1394–1405.

[17] GITHUB. PDF.js. https://mozilla.github.io/pdf.js/.

[18] GOOGLE SOURCE. PDFium. https://pdfium.googlesource.com/pdfium/.

[19] GRIGORIK, I., AND WEST, M. Reporting API. Tech. rep., November 2017.

[20] IQBAL, U., SHAFIQ, Z., AND QIAN, Z. The ad wars: Retrospective measurement and analysis of anti-adblock filter lists. pp. 171–183.

[21] JACKSON, C., AND BARTH, A. Beware of finer-grained origins.

[22] JANG, D., TATLOCK, Z., AND LERNER, S. Establishing browser security guarantees through formal shim verification. In Proceedings of the 21st USENIX conference on Security symposium (2012), USENIX Association, pp. 8–8.

[23] KONTAXIS, G., AND CHEW, M. Tracking Protection in Firefox For Privacy and Performance. In IEEE Web 2.0 Security & Privacy (2015).

[24] LEKIES, S., STOCK, B., WENTZEL, M., AND JOHNS, M. The unexpected dangers of dynamic JavaScript. In 24th USENIX Security Symposium (USENIX Security 15) (Washington, D.C., 2015), USENIX Association, pp. 723–735.

[25] LERNER, B. S., ELBERTY, L., POOLE, N., AND KRISHNAMURTHI, S. Verifying web browser extensions compliance with private-browsing mode. In European Symposium on Research in Computer Security (2013), Springer, pp. 57–74.

[44] SOLTANI, A., CANTY, S., MAYO, Q., THOMAS, L., AND HOOFNAGLE, C. J. Flash cookies and privacy. In AAAI spring symposium: intelligent information privacy management (2010), vol. 2010, pp. 158–163.

[26] MAYER, J. R., AND MITCHELL, J. C. Third-party web tracking: Policy and technology. In 2012 IEEE Symposium on Security and Privacy (May 2012), pp. 413–427.

[27] MICROSOFT. Platform status. https://developer.microsoft.com/en-us/microsoft-edge/platform/status/samesitecookies/, 2018.

[45] STOREY, G., REISMAN, D., MAYER, J., AND NARAYANAN, A. The future of ad blocking: An analytical framework and new techniques.

[46] THE CHROMIUM PROJECTS. Chrome Prerendering. https://www.chromium.org/developers/design-documents/prerender, 2011.

[28] MOZILLA DEVELOPER NETWORK. LocalStorage. https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage.

[29] MOZILLA DEVELOPER NETWORK. Beacon API. https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API, 2017.

[30] MOZILLA DEVELOPER NETWORK. Fetch API. https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API, 2017.

[31] MOZILLA DEVELOPER NETWORK. webRequest. https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/webRequest, 2017.

[32] MOZILLA DEVELOPER NETWORK. WebSocket. https://developer.mozilla.org/en-US/docs/Web/API/WebSocket, 2017.

[33] MOZILLA DEVELOPER NETWORK. XMLHttpRequest. https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest, 2017.

[34] MOZILLA DEVELOPER NETWORK. EventSource. https://developer.mozilla.org/en-US/docs/Web/API/EventSource, 2018.

[35] MOZILLA DEVELOPER NETWORK. Using the application cache. https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache, 2018.

[36] MOZILLA SUPPORT. Firefox Focus. https://support.mozilla.org/en-US/products/focus-firefox.

[37] MOZILLA WIKI. https://wiki.mozilla.org/Security/Safe_Browsing.

[38] NOTTINGHAM, M. Web linking. RFC 5988, RFC Editor, October 2010.

[39] PIETRASZAK, M. Browser extensions. Draft community group report, W3C, July 2017. https://browserext.github.io/browserext/.

[40] ROESNER, F., KOHNO, T., AND WETHERALL, D. Detecting and defending against third-party tracking on the web. In Proceedings of the 9th USENIX Conference on Networked Systems Design and Implementation (Berkeley, CA, USA, 2012), NSDI’12, USENIX Association, pp. 12–12.

[41] SCHWENK, J., NIEMIETZ, M., AND MAINKA, C. Same-origin policy: Evaluation in modern browsers. In 26th USENIX Security Symposium (USENIX Security 17) (Vancouver, BC, 2017), USENIX Association, pp. 713–727.

[42] SHARMA, R. Preventing cross-site attacks using same-site cookies. https://blogs.dropbox.com/tech/2017/03/preventing-cross-site-attacks-using-same-site-cookies/, 2017.

[43] SINGH, K., MOSHCHUK, A., WANG, H. J., AND LEE, W. On the incoherencies in web browser access control policies. In Proceedings of the 2010 IEEE Symposium on Security and Privacy (Washington, DC, USA, 2010), SP ’10, IEEE Computer Society, pp. 463–478.

[47] VAN GOETHEM, T., CHEN, P., NIKIFORAKIS, N., DESMET, L., AND JOOSEN, W. Large-scale security analysis of the web: Challenges and findings. In International Conference on Trust and Trustworthy Computing (2014), Springer, pp. 110–126.

[48] VAN GOETHEM, T., JOOSEN, W., AND NIKIFORAKIS, N. The clock is still ticking: Timing attacks in the modern web. In ACM Conference on Computer and Communications Security (2015).

[49] WEBKIT. Intelligent Tracking Prevention. https://webkit.org/blog/7675/intelligent-tracking-prevention/.

[50] WEST, M. 'samesite' cookie attribute. https://www.