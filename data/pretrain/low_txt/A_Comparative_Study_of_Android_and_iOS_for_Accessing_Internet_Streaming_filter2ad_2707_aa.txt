# A Comparative Study of Android and iOS for Accessing Internet Streaming Services

**Authors:**
- Yao Liu
- Fei Li
- Lei Guo
- Bo Shen
- Songqing Chen

**Affiliations:**
- Yao Liu, Fei Li, Songqing Chen: Department of Computer Science, George Mason University
  - Email: {yliud, lifei, sqchen}@cs.gmu.edu
- Lei Guo: Department of Computer Science and Engineering, Ohio State University
  - Email: [PI:EMAIL]
- Bo Shen: Vuclip
  - Email: [PI:EMAIL]

## Abstract
Android and iOS devices dominate the mobile market. While various user experiences have been reported regarding their differences, such as battery life, display, and touchpad control, there are few in-depth studies comparing their performance when accessing internet streaming services. With video traffic increasingly dominating mobile data, this study focuses on analyzing and comparing the performance of Android and iOS devices in accessing internet streaming services. By analyzing a server-side workload from a top mobile streaming service provider, we find that Android and iOS use different methods to request media content, resulting in different amounts of received traffic for the same video clip. Further client-side studies reveal that Android and iOS media players use different data requesting approaches (standard HTTP requests vs. HTTP range requests) and buffer management methods (static vs. dynamic), leading to our observations. Our empirical results and analysis provide insights for current Android and iOS users, streaming service providers, and mobile media player developers.

## 1. Introduction
Mobile devices have become increasingly popular among users. The competition in the mobile device market is intense, with iOS (e.g., iPhone, iPad, iPod Touch) and Android (e.g., Galaxy Nexus, Motorola Droid, Kindle Fire) devices being the most popular. According to reports, iOS and Android devices comprise more than 79% of all existing mobile devices [1].

More and more mobile users are using their devices for internet streaming. Pseudo Streaming [2] is the most popular protocol among mobile devices. Both iOS and Android natively support Pseudo Streaming, and platforms like YouTube [3], Dailymotion [4], and Veoh [5] support it for mobile access.

Streaming typically involves large, continuous data transfers, which raises two main concerns for mobile users: battery power consumption and data usage costs. Battery technology has not yet seen a significant breakthrough, and mobile data usage is closely tied to the cost users pay to cellular service providers. Therefore, reducing traffic while maintaining service quality is of great interest to users.

In this work, we analyze and compare the performance of Android and iOS devices in accessing internet streaming services. We start by analyzing a server-side workload from a top mobile streaming service provider, Vuclip. This workload includes about 26,713,708 HTTP requests to access 15,725 video clips over 28 days, generating 27.4 TB of video traffic. Our analysis reveals that Android and iOS devices use different methods to request media content, leading to different amounts of received traffic for the same video clip.

To understand the underlying causes, we conducted client-side experiments with state-of-the-art iOS and Android devices. Our findings show that Android and iOS media players use different data requesting approaches (standard HTTP requests vs. HTTP range requests) and different playout buffer management methods (static vs. dynamic). These differences result in significantly more redundant traffic on iOS devices compared to Android devices, leading to higher battery consumption and potentially higher costs for iOS users.

Our study provides insights for common users, streaming service providers, and mobile media player developers. The client-side trace is available for download at [6].

## 2. Server-Side Observations
The server log we collected is from Vuclip, a top mobile streaming video site serving worldwide mobile users. The workload was collected from February 1st to February 28th, 2011. In this period, about 26,713,708 HTTP requests were observed to access 15,725 video clips, generating 27.4 TB of video traffic.

Vuclip supports both iOS and Android. Users can install an application [7] on their mobile devices from the iOS AppStore or Google Play. The application provides the same user interface for both iOS and Android users, allowing them to access the same pool of videos via WiFi or cellular connections, making it a good base for our study.

Vuclip allows users to watch videos using Pseudo Streaming. With Pseudo Streaming, a client can download the video file via HTTP requests and start playback without waiting for the entire file to be downloaded. It also supports jumping to a specific position in the video by downloading the desired part directly via HTTP range requests. To handle network speed variations during playback, Pseudo Streaming requires a playout buffer on the client side to store video data. Typically, downloading should be faster than playback for a good user experience, and it is common for the entire video file to be downloaded while the playback is still in progress.

We used the User-Agent string to identify whether a request came from an iOS or Android device. For example, iOS devices use "AppleCoreMedia/1.0.0" in their User-Agent string, while Android devices use "stagefright/1.x (Linux; Android x.x.x)". From the workload, we extracted 397,940 unique video sessions from iOS devices and 884,648 unique video sessions from Android devices. Each session may consist of multiple HTTP requests, and users do not necessarily watch the entire video from start to finish. They may terminate playback in the middle if they find the video uninteresting.

### 2.1. Session Duration and Video Duration
Figure 1 shows the ratio between session duration and video duration. We found that the patterns of session duration relative to video duration are similar for both iOS and Android devices, although Android devices generally have slightly longer session durations. This indicates similar accessing behaviors for both types of devices.

### 2.2. Number of HTTP Requests per Session
Figure 2 shows the distribution of the number of HTTP requests sent to the server in these sessions. More than 80% of Android sessions consist of only one single HTTP request, and less than 2% of sessions involve more than 10 HTTP requests. In contrast, iOS devices always send more HTTP requests, with a median of 13 HTTP requests per session. This is surprising because, intuitively, only one HTTP request should be needed, as is the case for most Android sessions.

Based on the log, we found that the MediaPlayer on a mobile device can request the video file in two ways: (1) it requests the entire video file with a standard HTTP request, and the server responds with HTTP 200 OK, or (2) it requests a portion of the video file using an HTTP range request, and the server responds with HTTP 206 Partial Content. Typically, an HTTP range request is used when a user wants to skip part of the video and jump to the desired content directly. However, in this server log, we found that iOS devices always use HTTP range requests, even for the first request. Android devices, on the other hand, always use standard HTTP requests and only use HTTP range requests if the user decides to jump to another part of the video.

Table 1 shows the percentage of different types of HTTP requests used by iOS and Android devices. Over 80% of Android traffic is delivered using standard HTTP responses (200), while almost all iOS traffic is delivered using HTTP partial content response (206).

### 2.3. Traffic Received by Devices
We further summed up the size of HTTP responses belonging to the same video session to examine the impact of different content requesting approaches on the traffic delivered to the devices. Figure 3 shows the results. For Android devices, about 55% of sessions downloaded the same amount of traffic as the video file size, and only a small percentage downloaded more data, possibly due to re-watching. The rest (about 43%) only downloaded partial video content and terminated earlier.

For iOS devices, about 72% of sessions terminated before the entire file was downloaded. Surprisingly, about 28% of iOS sessions downloaded more data than the actual video file size. Given that we are comparing requests from the same streaming service, it is reasonable to assume that users' interests and access patterns are similar. Among the 28% of sessions where iOS devices downloaded more data than the actual file size, only a small portion is likely due to re-watching activities. We are particularly interested in the 28% of iOS sessions that received extra traffic.

## 3. Analysis of Android and iOS Media Players
While the server-side workload provided a high-level overview of different content requesting approaches and the amount of traffic received, it did not provide detailed insights into the underlying mechanisms. To gain a deeper understanding, we conducted client-side experiments with state-of-the-art iOS and Android devices.

### 3.1. Devices Used
Table 2 lists the devices used in our experiments:
- **iOS Devices:**
  - iPod Touch (iOS 3.1.2)
  - iPhone 3G (iOS 4.2.1)
  - iPhone 3GS (iOS 5.0.1)
  - iPhone 4S (iOS 5.1)
- **Android Devices:**
  - Nexus One (Android 2.3.4)
  - Kindle Fire (Android 2.3.4)

### 3.2. Experiment Results
Table 3 shows the results of iOS devices accessing a 36.7 MB YouTube video:
- **iOS Devices:**
  - iPod Touch (iOS 3.1.2): Memory Size 128 MB
  - iPhone 3G (iOS 4.2.1): Memory Size 128 MB
  - iPhone 3GS (iOS 5.0.1): Memory Size 128 MB
  - iPhone 4S (iOS 5.1): Memory Size 128 MB

Through extensive experiments and by delving into the source code of the Android media player, we found that the current Android and iOS media players employ different data requesting approaches and playout buffer management methods. These differences lead to a significant amount of redundant traffic received on iOS devices but not on Android devices. Intuitively, this causes more battery power consumption on iOS devices and potentially results in higher monetary costs for iOS users.

## Conclusion
Our study provides valuable insights for common users, streaming service providers, and mobile media player developers. The different data requesting approaches and buffer management methods used by Android and iOS media players highlight the need for further optimization and standardization in mobile streaming technologies. Future work could focus on improving the efficiency of media players and reducing the overall traffic and power consumption for a better user experience.