### Security Assurance Check for Sequence Diagram

```java
Seq_Diag_Sec(SeqD: Sequence_Diagram) { 
    For each tree (GMsg, si, ucj) in the forest SeqD.MsgForest { 
        SD_Sec_Check(GMsg, si, ucj); 
    } 
}
```

**Figure 6. Security Assurance Check for Sequence Diagram**

In our prototype, designers can define an ordered set of security levels with user-defined labels, ranging from level 0 to level 5. Although more levels are possible, they may not be practical. By editing a configuration file, we can modify the Default Options Dialog of TCC, allowing users to define string labels for these security levels. With this information, our security extensions support the definition of MAC (Mandatory Access Control) CLS (Class Level Security) or CLR (Clearance Level) for actors, use cases, classes, and methods, using the previously defined labels for the security levels.

### Integration of MAC into TCC

To integrate MAC into TCC, we use its APIs to extend the TCC-Inspector property window for classes, methods, actors, and use cases with an additional tab for "MAC Settings," as shown in Figure 7. This new tab is a crucial component of the security extensions, providing MAC security levels for all supported UML elements. The designer selects a security level from the predefined range and assigns it to a UML element using a drop-down combo box. The names displayed in the combo box are those defined in the Default Options Dialog. For example, in Figure 7, the actor "Senior Staff" is assigned the security level S ("Secret"). The plugin also inserts comments for the chosen security levels into the generated code, allowing security to be tracked through later development and maintenance stages, as shown in Figure 10 for the class `Survey_List`.

For actors, use cases, and methods, a single MAC level must be selected. However, for classes, the "MAC Security" property tab includes two entries: CLS Min Level and CLS Max Level. This allows us to verify that the security levels of the methods within a class fall within the specified minimum and maximum range.

**Figure 7. The CLR Assignment of Actor Senior Staff**

### Dynamic Design-Time Checking

The prototype under development supports "dynamic" design-time checking of MAC Security Assurance Rules (SARs) between UML elements based on the SARs presented in Section 4, as illustrated in Figure 8 for the SAR AUC. Dynamic checking focuses on the security consistency of MAC levels between two UML elements connected via certain relationships (e.g., include, extend, generalize, etc.). If a software engineer draws a connection that violates a SAR, an error message window will pop up.

For example, if there is an association from actor "Senior Staff" (CLR = S) to use case "Add Survey Header" (CLS = S), and we attempt to connect an association from actor "Staff" (CLR = C) to use case "Add Survey Header" (CLS = S), an error dialog will be displayed because the SAR AUC is violated (Staff.CLR = C < Add_Survey_Header.CLS = S). The dynamic checking module can be activated or deactivated by the user, which may be useful when many connections need to be made, potentially causing inconsistencies until all connections are established.

**Figure 8. An Example of Violating SAR AUC**
**Figure 9. An Example of Violating SAR MM**

### Code Generation Example

```java
/* Generated by Together */
package Survey_Package;

/* 
 * Survey List is used to store the list of all survey headers.
 * Min CLS = "C" and Max CLS = "S"
 * @stereotype container  
 * @clsPropertyMin Level1: Confidential 
 * @clsPropertyMax Level2: Secret 
 */
public class Survey_List { 
    /* @clsProperty Level2: Secret */ 
    public int Add_Survey_Header() { 
    }

    /* @clsProperty Level2: Secret */ 
    public int Update_Survey_List() { 
    }

    /* @clsProperty Level1: Confidential */ 
    public boolean Survey_Title_Search(String aSurvey_Title) { 
    }

    private String Survey_Title; 
}
```

**Figure 10. Code Generated for Survey_List Class**

### Static Post-Design Iteration Check

To supplement the dynamic check, a "static" or post-design-iteration check can be performed over UML designs at meaningful increments. For example, if the dynamic check was deactivated for a period, the static check can scan the entire design for security conflicts and inconsistencies. We have implemented the algorithm given in Section 4.4, which conducts a comprehensive security analysis of an entire design by verifying use case diagrams where the assigned security levels occur in isolation from the SARs. If the designer has assigned all elements of a use case diagram with MAC security levels, they can start the "MAC Static Check," and the diagram will be traversed. If a violation of a SAR occurs, an error message referring to the affected elements and the violated SAR will be displayed.

### Ongoing Work

The assurance checks between methods and use cases, as well as between methods in Sequence Diagrams, are being prototyped as part of our Together MAC plugin. To illustrate their potential usage, a simulated example to enforce the SAR MM is shown in Figure 9 (if we adopt the Simple Integrity Property). If the designer tries to assign the method `Add_Survey_Header` a lower security level than `Create_Survey_Header`, the SAR MM will be violated. We anticipate that the algorithms for all the checks associated with the SARs in Sections 4.1 to 4.4 will be available for both dynamic and static analysis in the near future.

### Related Research

Several research efforts in security for UML share similarities and differences with our work. In [11], a proposed Framework for Network Enterprise uses UML notations to describe a role-based access control (RBAC) model, employing UML as a language to represent RBAC requirements. However, the representation is too general to incorporate subtle properties of RBAC such as separation of duty constraints (see [12] for different types of RBAC constraints). Similarly, [24] proposed an alternative technique to utilize UML notations to describe RBAC modeling and processing. Both efforts focus on how UML elements can model roles rather than examining secure software design, which is our focus.

In [15, 16], extended UML features were proposed to accommodate security requirements. Their approach uses a mathematical Abstract State Machine model [13] to formalize UML elements (excluding use cases) and extends several stereotypes to accommodate their proposed security framework towards theoretical security verification with UML. This contrasts with our approach, which extends properties of essential UML elements (use cases, actors, classes, and methods) to directly apply security models (i.e., MAC) for secure software design, balancing a theoretical perspective with practical realization in TCC.

Another effort [17] introduced SecureUML for model-driven security with extended meta-model elements for RBAC only, similar in concept to our work on RBAC for UML [9]. Additionally, [22] used parameterized UML elements to model an access control framework combining MAC and RBAC, expressing a hybrid access control policy of an organization, rather than inserting MAC features into software design using UML and performing MAC constraints checking as we have done. Lastly, [1, 2] proposed a framework to incorporate security into UML design, but it only deals with use case modeling without considering sequence diagrams.

### Conclusion and Ongoing Work

This paper examines the incorporation of MAC into the Unified Modeling Language (UML), supporting both design-time and post-design security assurance checking. Section 2 reviewed the background on MAC and UML. Section 3 proposed guidelines for secure software design and interpreting MAC for OO design. Section 4 examined security assurance for UML use case, class, and sequence diagrams, focusing on the assignment of security levels to MAC elements, the security assurance rules (SARs) that are automatically fired when users connect elements, and algorithms for assurance of use case and sequence diagrams for post-design checking. The integration of this work into the Together Control Center prototype for design-time analysis was reviewed in Section 5. Section 6 compared other research on UML and security to our own efforts.

Our ongoing research includes expanding our work to support RBAC for UML [9] and exploring the generation of formal security requirements (in a logic-based programming paradigm) to identify security problems and inconsistencies. From a practical perspective, we are continuing our prototyping efforts to fully support the SARs presented in this paper and include RBAC support. The work presented here is also related to our ongoing efforts in distributed security and security assurance [21]. For further information on our security research, please see [10].

### References

[1] Alghathbar, K. and Wijesekera, D. AuthUML: A Three-phased Framework to model Secure Use Cases. In Proc. of the Formal Methods in Security Engineering Wksp (FMSEâ€™03), Washington D.C., USA, 2003.

[2] Alghathbar, K. and Wijesekera, D. Consistent and Complete Access Control Policies in Use Cases. In Proc. of UML 2003, San Francisco, CA, LNCS, 2003.

[3] Bell, D. and La Padula, L. Secure Computer Systems: Mathematical Foundations Model. M74-244, Mitre Corp., 1975.

[4] Biba, K. Integrity Considerations for Secure Computer Systems. TR-3153, Mitre Corp., 1977.

[5] Booch, G. Object-Oriented Design With Applications. Benjamin/Cummings, 1991.

[6] Booch G., et al. The Unified Modeling Language User Guide. Addison Wesley, 1999.

[7] Budd, T. An Introduction to Object-Oriented Programming. Addison-Wesley, 1997.

[8] Cormen, T., et al. Introduction to Algorithms. The MIT Press and McGraw-Hill, 1990.

[9] Doan, T., et al. RBAC/MAC Security for UML. In Proc. of the 18th Annual IFIP WG 11.3 Working Conference on Data and Applications Security. Sitges, Spain, July, 2004.

[10] http://www.engr.uconn.edu/~steve/DSEC/dsec.html.

[11] Epstein, P. and Sandhu, R. Towards A UML Based Approach to Role Engineering. In Proc. of the 4th ACM workshop on Role-based Access Control, 1999.

[12] Ferraiolo, D., et al. Proposed NIST Standard for Role-Based Access Control. ACM Trans. on Information and System Security, Vol. 4, No. 3. August 2001.

[13] Gurevich, Y. Evolving algebras 1993: Lipari guide. In E. Borger, editor, Specification and Validation Methods. Oxford University Press, 1995.

[14] Jacobson, I., et al. Object-Oriented Software Engineering: A Use Case Driven Approach. Addison-Wesley, 1992.

[15] JÃ¼rjens, J. Principles for Secure Systems Design. Ph.D. dissertation. Oxford University Computing Laboratory. Oxford University, 2002.

[16] JÃ¼rjens, J. UMLsec: Extending UML for Secure Systems Development. In Proc. of UML 2002, LNCS, Sept. 30 - Oct. 4, 2002.

[17] Lodderstedt, T., et al. SecureUML: A UML-Based Modeling Language for Model-Driven Security. In Proc. of UML 2002, LNCS, 2002.

[18] OMG. Unified Modeling Language, v.1.5. UMLâ„¢ Resource Page. http://www.omg.org/uml/

[19] Osborn, S., et al. Configuring Role-Based Access Control to Enforce Mandatory and Discretionary Access Control Policies. ACM Trans. on Information and System Security. Vol. 3, No. 2, May 2000.

[20] Osborn, S. Information Flow Analysis of an RBAC System. In Proc. of SACMATâ€™02, June, 2002.

[21] Phillips, C., et al. Security Assurance for an RBAC/MAC Security Model. In Proc. of the 2003 IEEE Info. Assurance Wksp., 2003.

[22] Ray, I., et al. Using Parameterized UML to Specify and Compose Access Control Models. In Proc. of the 6th IFIP Working Conference on Integrity & Internal Control in Info. Systems, 2003.

[23] Rumbaugh, J., et al. Object-Oriented Modeling and Design. Prentice-Hall, 1991.

[24] Shin, M. and Ahn, G. UML-Based Representation of Role-Based Access Control. In Proc. of the IEEE 9th Intl. Wksp. on Enabling Technologies: Infrastructure for Collaborative Enterprises, 2000.

[25] Thuraisingham, B. Mandatory Security in Object-Oriented Database Systems. In Proc. of 1989 OOPSLA Conf., 1989.

[26] Zdonik, S. and Maier, D. Fundamentals of Object-Oriented Databases, in Readings in Object-Oriented Database Systems, S. Zdonik and D. Maier (eds.), Morgan Kaufmann, 1990.