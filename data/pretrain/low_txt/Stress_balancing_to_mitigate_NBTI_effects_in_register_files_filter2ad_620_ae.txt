### Unique Application in Other Microprocessor Architectures

The unique technique can also be applied to other microprocessor architectures, such as out-of-order processors [25]. In these architectures, the renaming unit can assign infrequent registers to predetermined physical registers, where NBTI-induced stress is mitigated by our introduced hardware solution. For longer bit-width registers (e.g., 64-bit), the analysis to determine high-stress bits should be repeated similarly (see Fig. 4). Dividing registers into infrequent and frequent categories, as we propose, exists to some extent, but this distinction diminishes as the number of physical registers increases. When there are a large number of registers, all of them are effectively only infrequently written, meaning that most physical registers are not used most of the time.

### Evaluation and Experimental Results

To evaluate the effectiveness of our proposed technique, we employed various diverse applications from the MiBench and MediaBench benchmark suites [22], [23], which exhibit varying characteristics, allowing us to cover many different possible NBTI stress scenarios in the register file. Since our work targets the 32-bit MIPS architecture, the MIPS model simulator [26] was used in our experiments. Profiling information was gathered from an initial run of each application.

**Figure 8** presents the ABPF (Average Bit Probability Factor) of the lower and upper halves of the register file and the ABPF of the total register file after applying our technique. As seen, our technique drives the ABPF of the register file toward the optimal value of 50%. Moreover, the NBTI-induced stress is equally distributed between the lower and upper halves of the register file (the ABPF of both is around 50%). This contrasts with the Base case, where no NBTI mitigation technique is applied, and the upper half suffers from higher NBTI stress than the lower half (see Fig. 4(a)). Our technique requires three additional flag bits, and the corresponding duty cycle of each flag bit was analyzed, reaching an average of 54%, indicating that the NBTI stress in the flag bits is also well-balanced.

#### Sensitivity to Input Data

Applications are generally subject to different input data during runtime than those used in the profiling phase. To explore how susceptible the results of our technique are to these inputs and provide a fair evaluation, the experiments were repeated with different input data sets. **Figure 9** shows the corresponding ABPF result for each benchmark. As shown, the ABPF of the lower/upper half and the total register file remain very close to the optimal value of 50%, and the results are consistent with those presented in Fig. 8. Modifying the input data does not significantly worsen the results, and our technique does not rely too much on the input data set.

#### Detailed NBTI Stress Balancing

To further investigate how effectively our technique balances NBTI stress in the individual bits of the register file, we gathered the duty cycle (λ) of each bit to build a corresponding histogram. **Figure 10** demonstrates a comparison in terms of the percentage of λ values within the range of [40% - 60%] among the Base case and the two different NBTI relaxing strategies of our proposed technique. This range was selected because the NBTI-induced stress is approximately balanced there, and the reliability degradation is minimized, as observed from our analysis in Fig. 2.

In the first case (called the fixed strategy), the NBTI stress in all registers is tackled using the same strategy, i.e., all registers are considered frequent and relaxed similarly (see Fig. 6). In the second case (selective strategy), we selectively address the NBTI effects in the register file, i.e., different registers are relaxed according to their classification (frequent/infrequent).

As seen in **Figure 10**, selectively mitigating NBTI stress in the register file, as proposed in this work, is more effective than applying one NBTI strategy for all registers. Across all benchmarks, our technique (after implementing the selective strategy) considerably increases the percentage of λ values within the range of [40% - 60%], with an average increase of 3.3x and up to 6.2x. This promises to mitigate NBTI-induced reliability degradation in the register file because the NBTI stress is well-balanced in the majority of the register file bits.

### State-of-the-Art Comparison

It is important to note that other techniques based on toggling the entire register file at a statistical aging standpoint work fine only if NBTI stress remains approximately the same across applications. Varying NBTI-stress cases from multiple applications may be interleaved, resulting in non-optimal overall NBTI stress. Assuming two applications with mean ABP values of 0.1 and 0.9 and a toggling interval corresponding to the time an application is scheduled, the overall ABP from the toggling technique is (0.1 + (1− 0.9))/2 = 0.1, which is far from the optimal value (0.5) achieved if both applications have the same stress, e.g., (0.1 + (1− 0.1))/2 = 0.5.

There are two possibilities for employing the toggling mechanism: either not applying it often, in which case the balancing of NBTI stress in the SRAM cells needs to consider additional effects such as application scheduling, or applying it frequently, incurring high overhead by stalling the processor for several cycles each register file inversion. In contrast, our technique is designed to attain high stress balancing with little additional overhead, independent of application behavior. According to our technique, all-zero bits in a frequent register are only periodically relaxed to '1's, remaining zeros roughly half of the time. Additionally, swapping the lower and upper halves of the register bits compensates for non-balanced upper bits due to the non-uniform distribution of leading zeros in subsequent register contents.

A potential limitation of our proposed technique is that the static profiling fixes the number of frequent or infrequent registers at design-time. Without profiling, a runtime adaptive solution would require online monitoring to determine infrequent registers and then perform the required balancing.

Finally, **Figure 11** evaluates our technique in terms of reliability degradation and presents a comparison with the Base case and an implementation of the State-of-the-Art "Bit level Rotation" (BR) technique [18]. The SNM (Static Noise Margin) degradation, a widely used metric in evaluating register file reliability, was utilized. As seen, applying the selective strategy increases the register file resiliency against NBTI effects more than the fixed strategy alone. The SNM degradation is effectively minimized, and we achieve better results in all the targeted benchmarks: our introduced technique improves the register file reliability by 35% and 22% compared to the Base and BR techniques, respectively. The reason for achieving better results is that our technique has the ability to select the best-suited NBTI mitigation strategy for each register class.

### Conclusion

The degradation of PMOS transistors throughout their lifetime due to NBTI stress has become a significant reliability concern for SRAM-based register files, especially at deep sub-micron technologies. Current techniques aiming to increase resiliency target all registers in the same manner and fail to consider that different access patterns of individual registers reduce the effectiveness of the techniques. In this paper, we analyzed the severity of NBTI impact on the SRAM-based register file when running a wide range of applications. This key observation led to the proposal of our optimizing technique, which selectively balances the voltage stress in the register file bits depending on our classification of the registers, thereby mitigating the reliability degradation induced by NBTI.

Our technique effectively balances the stress by making the percentage of time that the PMOS transistors in the register file undergo stress near 50% on average, minimizing the damaging effects of NBTI. We reduce the reliability degradation by 35% and achieve better results (22% on average) compared to the State-of-the-Art.

### Acknowledgment

This work was supported in part by the German Research Foundation (DFG) as part of the priority program “Dependable Embedded Systems” (SPP 1500 - spp1500.itec.kit.edu). We would also like to thank Sani Nassif for his valuable input regarding NBTI modeling.

### References

[1] T. Siddiqua and S. Gurumurthi, “Recovery boosting: A technique to enhance NBTI recovery in SRAM arrays,” Proceedings of the IEEE Annual Symposium on VLSI, pp. 393–398, 2010.
[2] K. Kang, S. Gangwal, S. Park, and K. Roy, “NBTI induced performance degradation in logic and memory circuits: how effectively can we approach a reliability solution?” Design Automation Conference, Asia and South Pacific, pp. 726–731, March 2008.
[3] R. Vattikonda, W. Wang, and Y. Cao, “Modeling and minimization of PMOS NBTI effect for robust nanometer design,” Proceedings of the 43rd annual Design Automation Conference DAC, pp. 1047–1052, 2006.
[4] A. Bansal, R. M. Rao, J.-J. Kim, S. Zafar, J. H. Stathis, and C.-T. Chuang, “Impacts of NBTI and PBTI on SRAM static/dynamic noise margins and cell failure probability,” Microelectronics Reliability, pp. 642–649, 2009.
[5] G. Memik, M. Kandemir, and O. Ozturk, “Increasing register file immunity to transient errors,” Design, Automation and Test in Europe, Proceedings, pp. 586–591, March 2005.
[6] J. A. Blome, S. Gupta, S. Feng, and S. Mahlke, “Cost-efficient soft error protection for embedded microprocessors,” Proceedings of the 2006 international conference on Compilers, architecture and synthesis for embedded systems, pp. 421–431, 2006.
[7] H. Amrouch and J. Henkel, “Self-immunity technique to improve register file integrity against soft errors,” VLSI Design, 24th International Conference on, pp. 189–194, Jan. 2011.
[8] B. Calhoun and A. Chandrakasan, “Analyzing static noise margin for sub-threshold SRAM in 65nm CMOS,” Solid-State Circuits Conference. Proceedings of the 31st European, pp. 363–366, Sept. 2005.
[9] S. Bhardwaj, W. Wang, R. Vattikonda, Y. Cao, and S. Vrudhula, “Predictive modeling of the NBTI effect for reliable design,” Custom Integrated Circuits Conference, CICC ’06. IEEE, pp. 189–192, 2006.
[10] W. Zhao and Y. Cao, “Predictive technology model for nano-CMOS design exploration,” J. Emerg. Technol. Comput. Syst., April 2007.
[11] K. Arabi, R. Saleh, and M. Xiongfei, “Power supply noise in SoCs: Metrics, management, and measurement,” Design Test of Computers, IEEE, vol. 24, no. 3, pp. 236–244, May-June 2007.
[12] A. Pavlov and M. Sachdev, CMOS SRAM Circuit Design and Parametric Test in Nano-Scaled Technologies: Process-Aware SRAM Design and Test, 1st ed. Springer Publishing Company, Incorporated, 2008.
[13] F. Mesa, M. Brown, J. Nayfach, and J. Renau, “Measuring power and temperature from real processors,” Parallel and Distributed Processing, IEEE International Symposium on, pp. 1–5, April 2008.
[14] I. K. Yongkui Han and C. Mritz, “Temperature aware floorplanning,” Temperature-Aware Computer Systems, June 2005.
[15] K. Kang, H. Kufluoglu, K. Roy, and M. Ashraful Alam, “Impact of negative-bias temperature instability in nanoscale SRAM array: Modeling and analysis,” Computer-Aided Design of Integrated Circuits and Systems, IEEE Transactions on, pp. 1770–1781, Oct. 2007.
[16] J. Abella, X. Vera, and A. Gonzalez, “Penelope: The NBTI-aware processor,” Microarchitecture. 40th Annual IEEE/ACM International Symposium on, pp. 85–96, Dec. 2007.
[17] L. Li, Y. Zhang, J. Yang, and J. Zhao, “Proactive NBTI mitigation for busy functional units in out-of-order microprocessors,” Proceedings of the Conference on Design, Automation and Test, pp. 411–416, 2010.
[18] S. Kothawade, K. Chakraborty, and S. Roy, “Analysis and mitigation of NBTI aging in register file: An end-to-end approach,” Quality Electronic Design, 12th International Symposium on, pp. 1–7, March 2011.
[19] Y. Kunitake, T. Sato, and H. Yasuura, “Signal probability control for relieving NBTI in SRAM cells,” Quality Electronic Design (ISQED), 11th International Symposium on, pp. 660–666, March 2010.
[20] S. Wang, T. Jin, C. Zheng, and G. Duan, “Low power aging-aware register file design by duty cycle balancing,” Design, Automation Test in Europe Conference Exhibition (DATE), pp. 546–549, March 2012.
[21] J. Tandon, “The openrisc processor: open hardware and linux,” Linux J., Dec. 2011.
[22] M. R. Guthaus, J. S. Ringenberg, D. Ernst, T. M. Austin, T. Mudge, and R. B. Brown, “MiBench: A free, commercially representative embedded benchmark suite,” Proceedings of the Workload Characterization, IEEE International Workshop, pp. 3–14, 2001.
[23] C. Lee, M. Potkonjak, and W. H. Mangione-Smith, “MediaBench: a tool for evaluating and synthesizing multimedia and communications systems,” Proceedings of the 30th annual ACM/IEEE international symposium on Microarchitecture, pp. 330–335, 1997.
[24] “Faraday Memory Compiler Architecture, http://www.faraday-tech.com/index.html.”
[25] R. Preston, R. Badeau, D. Bailey, S. Bell, L. Biro, W. Bowhill, D. Dever, S. Felix, R. Gammack, V. Germini, M. Gowan, P. Gronowski, D. Jackson, S. Mehta, S. Morton, J. Pickholtz, M. Reilly, and M. Smith, “Design of an 8-wide superscalar RISC microprocessor with simultaneous multithreading,” Solid-State Circuits Conference, Digest of Technical Papers. IEEE International, pp. 334–472, Feb. 2002.
[26] R. Azevedo, S. Rigo, M. Bartholomeu, G. Araujo, C. Araujo, and E. Barros, “The ArchC architecture description language and tools,” International Journal of Parallel Programming, pp. 453–484, 2005.

Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 07:40:27 UTC from IEEE Xplore. Restrictions apply.