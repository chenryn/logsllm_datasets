### Replacing iptables with eBPF

InKeV [3] is a network virtualization solution that allows for the dynamic insertion of network functions using eBPF. Hyperupcalls [6] enables virtual machines (VMs) to load eBPF programs and request their execution by hypervisors, effectively treating these hyperupcalls as an additional form of BPF helpers. On the security front, eBPF has been fortified against JIT spray attacks [64] and Spectre attacks [47], [72], [19]. New file mode and Linux Security Module (LSM) hooks have been added to control eBPF program permissions, thereby removing the dependency on "CAP_SYS_ADMIN" [29]. LBM extends the scope of eBPF usage by exploring peripheral space.

### Linux Kernel Security Frameworks

Linux Security Modules (LSM) [86] is a general framework for implementing Mandatory Access Control (MAC) on Linux, providing hundreds of hooks for security-sensitive operations within the kernel. The Integrity Measurement Architecture (IMA) [65] leverages Trusted Platform Module (TPM) to measure the integrity of the kernel image and user-space applications. Android Security Modules (ASM) [40] enhances security extensibility in the Android platform by adding new authorization hooks within Android OS APIs. Linux Provenance Modules (LPM) [14] provides a whole-system provenance framework by mirroring LSM hooks. Seccomp [27] uses classic BPF filters to limit the number of syscalls that can be invoked by a process or container. Landlock [66] controls how a process accesses filesystem objects by writing policies in C within applications and compiling them into eBPF programs using LLVM. Guardat [82] presents a high-level policy language for mediating I/O events but operates at the storage layer, above the peripheral layer, and thus does not provide defenses against protocol-level attacks. While various kernel frameworks address different security concerns, LBM is the first to unify defenses across protocols against malicious peripherals.

### Conclusion

In this paper, we introduced LBM, an extensible security framework designed to defend against malicious peripherals. LBM implements a high-level filtering language for creating peripheral policies, which are compiled into eBPF instructions and loaded into the Linux kernel to ensure performance and extensibility. We added support for USB, Bluetooth, and NFC protocols, described the design process of LBM, and demonstrated specific cases where LBM can be used to harden the operating system's protocol stacks. Our evaluation showed that LBM performs as well as or better than previous solutions, with overhead typically within 1 μs per packet. LBM is practical and, to the best of our knowledge, is the first security framework designed to provide comprehensive protection within the Linux kernel peripheral subsystem, covering different subsystems while supporting and unifying existing defensive solutions.

### Acknowledgements

We would like to thank our reviewers and especially our shepherd, Taesoo Kim, for their valuable insights and suggestions. This work was partially supported by the US National Science Foundation under grant numbers CNS-1540217 and CNS-1815883. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.

### References

[1] PyBluez: Bluetooth Python extension module. https://github.com/pybluez/pybluez, 2018.

[2] O. Afonin. Restricted Mode. $39 Device Can Defeat iOS USB Restricted Mode. https://blog.elcomsoft.com/2018/07/this-9-device-can-defeat-ios-usb-restricted-mode/, July 2018.

[3] Z. Ahmed, M. H. Alizai, and A. A. Syed. Inkev: In-Kernel Distributed Network Virtualization for DCN. ACM SIGCOMM Computer Communication Review, 46(3), 2016.

[4] A. V. Aho, R. Sethi, and J. D. Ullman. Compilers: Principles, Techniques, and Tools. Addison Wesley, 1986.

[5] American National Standards Institute (ANSI). ANSI X3.159-1989: Programming Language C. Technical report, 1989.

[6] N. Amit and M. Wei. The Design and Implementation of Hyperupcalls. In Proceedings of the USENIX Annual Technical Conference (USENIX ATC), 2018.

[7] J. P. Anderson. Computer Security Technology Planning Study, ESD-TR-73-51, Vol. 1. Technical report, Air Force Systems Command: Electronic Systems Division, Oct. 1972.

[8] Android Developers. Bluetooth Low Energy Overview. https://developer.android.com/guide/topics/connectivity/bluetooth-le, Apr. 2018.

[9] S. Angel, R. S. Wahby, M. Howald, J. B. Leners, M. Spilo, Z. Sun, A. J. Blumberg, and M. Walfish. Defending against Malicious Peripherals with Cinch. In Proceedings of the 25th USENIX Security Symposium, 2016.

[10] Apple, Hewlett-Packard, Intel, Microsoft, Renesas, STMicroelectronics, and Texas Instruments. Universal Serial Bus 3.2 Specification: Revision 1.0. Technical report, Sept. 2017.

[11] Armis Inc. BlueBorne. https://www.armis.com/blueborne/, 2017.

[12] Armis Inc. Bleeding Bit. https://armis.com/bleedingbit/, 2018.

[13] S. Baghdasaryan. [v3,2/4] NFC: Fix possible memory corruption when handling SHDLC I-Frame commands. https://patchwork.kernel.org/patch/10378895/, May 2018.

[14] A. M. Bates, D. Tian, K. R. Butler, and T. Moyer. Trustworthy Whole-System Provenance for the Linux Kernel. In Proceedings of the USENIX Security Symposium, 2015.

[15] Bluetooth SIG, Inc. Bluetooth Core Specification v5.0. Technical report, Dec. 2016.

[24] K. Cook. Linux Kernel ASLR (KASLR). Linux Security Summit, 69, 2013.

[25] J. Corbet. Extending Extended BPF. Linux Weekly News, 2014.

[26] E. Cree. [RFC/PoC PATCH bpf-next 00/12] Bounded loops for eBPF. https://www.mail-archive.com/PI:EMAIL/msg218182.html, Feb. 2018.

[27] W. Drewry. [RFC, PATCH 0/2] Dynamic seccomp policies (using BPF filters). https://www.spinics.net/lists/linux-security-module/msg12441.html, Jan. 2012. Kernel Patch.

[28] ETSI Technical Committee Smart Card Platform (SCP). ETSI TS 102 622 V10.2.0: Smart Cards; UICC-Contactless Front-end (CLF) Interface; Host Controller Interface (HCI) (Release 10). Technical report, Mar. 2011.

[29] C. Feng. bpf: security: New file mode and LSM hooks for eBPF object permission control. https://lwn.net/Articles/737402/, 2017.

[30] GoodFET. Facedancer21. http://goodfet.sourceforge.net/hardware/facedancer21, 2018.

[31] Google, Inc. syzkaller - kernel fuzzer: Found Linux kernel USB bugs. https://github.com/google/syzkaller/blob/master/docs/linux/found_bugs_usb.md, 2018.

[32] J. Greene. Intel® Trusted Execution Technology. Technical report, Intel Corporation, 2012.

[33] B. Gregg. Linux Extended BPF (eBPF) Tracing Tools. http://www.brendangregg.com/ebpf.html, 2016.

[34] T. E. Hart, P. E. McKenney, A. D. Brown, and J. Walpole. Performance of Memory Reclamation for Lockless Synchronization. Journal of Parallel and Distributed Computing, 67(12):1270–1285, Dec. 2007.

[35] Y. Hayakawa. eBPF Implementation for FreeBSD. https://www.bsdcan.org/2018/schedule/track/Hacking/963.en.html, 2018.

[36] T. Herbert and A. Starovoitov. eXpress Data Path (XDP). https://github.com/iovisor/bpf-docs/blob/master/Express_Data_Path.pdf, 2016.

[37] M. Herfurt. Bluetooth Security. What the Hack Conference, 2005.

[38] M. Herfurt and C. Mulliner. Blueprinting: Remote Device Identification based on Bluetooth Fingerprinting Techniques. In 21st Chaos Communication Congress (21C3), Dec. 2004.

[39] G. Hernandez, F. Fowze, D. J. Tian, T. Yavuz, and K. R. B. Butler. FirmUSB: Vetting USB device firmware using domain-informed symbolic execution. In Proceedings of the 2017 ACM Conference on Computer and Communications Security (CCS’17), 2017.

[40] S. Heuser, A. Nadkarni, W. Enck, and A.-R. Sadeghi. ASM: A Programmable Interface for Extending Android Security. In Proceedings of the USENIX Security Symposium, 2014.

[41] Intel Corporation. Intel® Virtualization Technology for Directed I/O: Architecture Specification. Technical report, June 2018.

[42] IO Visor Project. BCC - Tools for BPF-based Linux IO analysis, networking, monitoring, and more. https://github.com/iovisor/bcc, 2015.

[43] P. C. Johnson, S. Bratus, and S. W. Smith. Protecting Against Malicious Bits On the Wire: Automatically Generating a USB Protocol Parser for a Production Kernel. In Proceedings of the 33rd Annual Computer Security Applications Conference (ACSAC), 2017.

[44] C. Kellner. Introducing bolt: Thunderbolt 3 security levels for GNU/Linux. https://christian.kellner.me/2017/12/14/introducing-bolt-thunderbolt-3-security-levels-for-gnulinux/, 2017.

[45] J. Kicinski and N. Viljoen. eBPF Hardware Offload to SmartNICs: cls_bpf and XDP. Proceedings of netdev, 1, 2016.

[46] A. Kobayashi. DisplayPort™ Ver. 1.2 Overview.

[47] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom. Spectre Attacks: Exploiting Speculative Execution. In Proceedings of the 40th IEEE Symposium on Security and Privacy (S&P), 2019.

[48] M. Krasnyansky and M. Holtmann. BlueZ: Official Linux Bluetooth protocol stack. http://www.bluez.org/, 2002.

[49] M. Krasnyansky and M. Holtmann. l2ping.c. https://github.com/pauloborges/bluez/blob/master/tools/l2ping.c, 2002.

[50] E. Kustarz, S. Shepler, and A. Wilson. The New and Improved FileBench File System Benchmarking Framework. In Proceedings of the USENIX Conference on File and Storage Technologies (FAST), 2008. WiP.

[51] B. Lau, Y. Jang, C. Song, T. Wang, P. Chung, and P. Royal. Mactans: Injecting Malware into iOS Devices via Malicious Chargers. Proceedings of the Black Hat USA Briefings, Las Vegas, NV, August 2013, 2013.

[52] A. Laurie, M. Holtmann, and M. Herfurt. Hacking Bluetooth-enabled Mobile Phones and Beyond - Full Disclosure. BlackHat Europe, 2005.

[53] A. Laurie, M. Holtmann, and M. Herfurt. Bluetooth Hacking: The State of the Art. BlackHat Europe, 2006.

[16] A. Borg, S. N, and P. Uttarwar. Can BLE be turned on while Bluetooth Classic is off on an Android device? https://www.quora.com/Can-BLE-be-turned-on-while-Bluetooth-Classic-is-off-on-an-Android-device, 2016.

[17] D. Borkmann. [PATCH net-next 3/4] bpf: add support for persistent maps/progs, Oct. 2015. LKML Archive.

[18] D. Borkmann. On getting tc classifier fully programmable with cls_bpf. tc, (1/23), 2016.

[19] D. Borkmann. [bpf] bpf: use array_index_nospec in find_prog_type. http://patchwork.ozlabs.org/patch/908385/, May 2018.

[20] K. R. B. Butler, S. E. McLaughlin, and P. D. McDaniel. Kells: A Protection Framework for Portable Data. In Proceedings of the 26th Annual Computer Security Applications Conference (ACSAC’10), 2010.

[21] L. Carettoni, C. Merloni, and S. Zanero. Studying Bluetooth Malware Propagation: The Bluebag Project. IEEE Security & Privacy, 5(2), 2007.

[22] G. J. Chaitin. Register Allocation & Spilling via Graph Coloring. In Proceedings of the SIGPLAN Symposium on Compiler Construction, 1982.

[23] Compaq, Digital Equipment Corporation, IBM PC Company, Intel, Microsoft, NEC, and Northern Telecom. Universal Serial Bus Specification: Revision 1.0. Technical report, Jan. 1996.

[54] S. McCanne and V. Jacobson. The BSD Packet Filter: A New Architecture for User-level Packet Capture. In USENIX Winter, Volume 93, 1993.

[55] L. McVoy and C. Staelin. lmbench: Portable Tools for Performance Analysis. In Proceedings of the USENIX Annual Technical Conference (ATC), 1996.

[56] C. Miller. Exploring the NFC Attack Surface. Proceedings of Blackhat, 2012.

[57] NCCGROUP. Umap2. https://github.com/nccgroup/umap2, 2018.

[58] Near Field Communication Forum, Inc. NFC Digital Protocol: Digital 1.0. Technical report, Nov. 2010.

[59] Near Field Communication Forum, Inc. NFC Controller Interface (NCI) Specification: NCI 1.0. Technical report, Nov. 2012.

[60] Near Field Communication Forum, Inc. Protocol Specifications. Technical specifications-and-application-documents/specifications/protocol-technical-specifications/, 2018. https://nfc-forum.org/our-work/

[61] M. Newlin. MouseJack: Injecting Keystrokes into Wireless Mice. Technical report, Bastille Threat Research Team, 2016.

[62] K. Nohl, S. Krissler, and J. Lell. BadUSB - On Accessories That Turn Evil. BlackHat, 2014.

[63] T. Remple and A. Burns. Battery Charging Specification: Revision 1.2. Technical report, Dec. 2010.

[64] E. Reshetova, F. Bonazzi, and N. Asokan. Randomization Can’t Stop BPF JIT Spray. In Proceedings of the International Conference on Network and System Security (NSS), 2017.

[65] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design and Implementation of a TCG-based Integrity Measurement Architecture. In Proceedings of the USENIX Security Symposium, 2004.

[66] M. Salaün. File Access-Control per Container with Landlock, 2018.

[67] J. Schulist, D. Borkmann, and A. Starovoitov. Linux Socket Filtering aka Berkeley Packet Filter (BPF). https://www.kernel.org/doc/Documentation/networking/filter.txt, 2018.

[68] B. Seri. Bluetooth: Properly check L2CAP config option output buffer length. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=e860d2c904d1a9f38a24eb44c9f34b8f915a6ea3, Sept. 2017. Kernel Patch.

[69] S. Smalley, C. Vance, and W. Salamon. Implementing SELinux as a Linux Security Module. Technical report, Dec. 2001. NAI Labs Report 01-043.

[70] A. Staravoitov. [RFC,net-next,08/14] bpf: add eBPF verifier. https://lore.kernel.org/patchwork/patch/477364/, June 2014. Kernel Patch.

[71] A. Starovoitov. BPF in LLVM and Kernel. Linux Plumbers Conference, 2015.

[72] A. Starovoitov. [PATCH v2 bpf] bpf: prevent out-of-bounds speculation. https://lwn.net/Articles/743288/, Jan. 2018.

[73] A. Starovoitov, D. Borkmann, and D. S. Miller. [Patch RFC 0/4] net: add bpfilter. https://www.mail-archive.com/netfilter-devel@vger.kernel.org/msg11127.html, Feb. 2018.

[74] P. Stewin and I. Bystrov. Understanding DMA Malware. In Proceedings of the Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA), 2012.

[75] SyncStop. The Original USB Condom. https://shop.syncstop.com/products/usb-condom?variant=35430087052, 2018.

[76] D. J. Tian, A. Bates, and K. Butler. Defending Against Malicious USB Firmware with GoodUSB. In Proceedings of the 31st Annual Computer Security Applications Conference (ACSAC), 2015.

[77] D. J. Tian, A. Bates, K. R. B. Butler, and R. Rangaswami. ProvUSB: Block-level Provenance-based Data Protection for USB Storage Devices. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS’16), 2016.

[78] D. J. Tian, G. Hernandez, J. I. Choi, V. Frost, C. Ruales, P. Traynor, H. Vijayakumar, L. Harrison, A. Rahmati, M. Grace, and K. R. B. Butler. ATtention Spanned: Comprehensive Vulnerability Analysis of AT Commands within the Android Ecosystem. In 27th USENIX Security Symposium (USENIX Security 18), 2018.

[79] D. J. Tian, N. Scaife, A. Bates, K. R. B. Butler, and P. Traynor. Making USB Great Again with USBFILTER. In Proceedings of the 25th USENIX Security Symposium, 2016.

[80] D. J. Tian, N. Scaife, D. Kumar, M. Bailey, A. Bates, and K. R. B. Butler. SoK: “Plug & Pray” Today - Understanding USB Insecurity in Versions 1 through C. In Proceedings of the IEEE Symposium on Security and Privacy (S&P), 2018.

[81] trifinite.group. trifinite. https://trifinite.org/, 2004.

[82] A. Vahldiek-Oberwagner, E. Elnikety, A. Mehta, D. Garg, P. Druschel, R. Rodrigues, J. Gehrke, and A. Post. Guardat: Enforcing Data Policies at the Storage Layer. In Proceedings of the Tenth ACM European Conference on Computer Systems (EuroSys’15), 2015.

[83] R. Verdult and F. Kooman. Practical Attacks on NFC-Enabled Cell Phones. In Proceedings of the 3rd International Workshop on Near Field Communication (NFC), 2011.

[84] C. Welch. Apple’s USB Restricted Mode: How to Use Your iPhone’s Latest Security Feature. https://www.theverge.com/2018/7/10/17550316/apple-iphone-usb-restricted-mode-how-to-use-security, July 2018.

[85] Windows Dev Center. Windows Filtering Platform. https://docs.microsoft.com/en-us/windows/desktop/fwp/windows-filtering-platform-start-page, 2018.

[86] C. Wright, C. Cowan, S. Smalley, J. Morris, and G. Kroah-Hartman. Linux Security Modules: General Security Support for the Linux Kernel. In Proceedings of the 11th USENIX Security Symposium, 2002.

### Appendix

#### A. Frontend Grammar

```
expr ::= logical-or
logical-or ::= logical-and ('||' logical-and)*
logical-and ::= comparison ('&&' comparison)*
comparison ::= atom (comparison-op atom)*
comparison-op ::= '<' | '>' | '=' | '==' | '!='
access ::= '[' number ':' number ']'
attribute ::= '.' IDENTIFIER
struct ::= IDENTIFIER attribute* access?
number ::= DEC_NUMBER | HEX_NUMBER
string ::= STRING
```