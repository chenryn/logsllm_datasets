### 5.2.3 Hindering Critical Application Patching

**Scenario:**
Mobile systems are constantly evolving, and applications must be updated to patch vulnerabilities. Malicious apps aim to hinder the patching of critical applications, leaving them vulnerable.

**Design:**
The application update process is managed by the Package Management System (PMS) and can be divided into three sequential subtasks: removing the original app, adding a new app, and configuring the new app. After each subtask, a broadcast is sent with corresponding action tags. The malicious app can monitor the target app's existence by frequently calling `PackageManager.getApplicationInfo()`. This helps in detecting the removal of the old version. Once the target app no longer exists, the malicious app can prevent the installation of the new version or force a system soft-reboot. Upon reboot, PMS will roll back the unfinished update task to ensure atomicity.

**Result:**
A Proof-of-Concept (PoC) app was deployed on Android 5.1.0 on a Nexus 6 to prevent the update of 360 Mobile Safe. The PoC app checked the target app's existence every 5 milliseconds. Using Vulnerability #1, it caused the Activity Manager Service (AMS) to freeze, preventing PMS from sending the necessary broadcasts after the old version was removed. After approximately 62 seconds, the system crashed, and the update rolled back upon reboot.

### 5.2.4 Hindering System Updating

**Scenario:**
Android updates rapidly, and newly discovered vulnerabilities are quickly patched in new versions. If an attacker can prevent system updates, the system will remain vulnerable indefinitely.

**Design and Implementation:**
For most users, Over-The-Air (OTA) updates are the primary method for system updates. OTA updates involve downloading files from a network server and storing them locally. To monitor the OTA update, the malicious app can scan the file system for downloaded update files or track the amount of data received from the internet. When the malicious app detects a system update, it can exploit various vulnerabilities (Vul#1, Vul#4, or Vul#6) to freeze and soft-reboot the system or crash the Phone app to hinder the download.

**Result:**
The PoC app was deployed on a Nexus 6 running Android 5.1.0, which needed to update to 5.1.1. The update package size was about 110MB, and the Google Mobile Services (GMS) app was responsible for the OTA update. The PoC app monitored the number of bytes received by GMS using the `TrafficStats.getUidRxBytes()` API. When the number exceeded 10 MB, Vul#4 was triggered, causing an immediate system soft-reboot. The test results showed that the PoC app successfully prevented the OTA update.

### 6. Defense Approaches

Attacks on new vulnerabilities are challenging to prevent due to several reasons:
1. **Binder Driver:** Malicious service requests are indistinguishable from benign ones.
2. **System Services (SS):** Received callback handles cannot be verified to prevent attacks.
3. **Dynamic Monitoring:** Malicious components can time their attacks to avoid detection.
4. **Static Audit:** Attack code can be written in both Java and C/C++.

To defend against these attacks, the best approach is to identify and patch vulnerabilities as quickly as possible. We propose the following suggestions for system service developers:

- **Asynchronous Callbacks:** For callbacks where the caller does not need to wait for a reply, declare them as asynchronous. For example, AMS and MS receive callback handles defined in `IInstrumentationWatcher` and `IMountServiceListener` classes, respectively. Changing these callbacks from synchronous to asynchronous can mitigate the "call me back" vulnerability.
- **Synchronized Blocks and Exception Handling:** For callbacks requiring a reply, avoid invoking them in synchronized blocks. Use try-catch blocks to handle all possible exceptions. Four of the new vulnerabilities arise from receiving a parameter containing a callback handler. Developers should invoke these callbacks in try-catch blocks to manage exceptions.
- **Fundamental Design Principle:** Consider whether a system service should use synchronous callbacks to communicate with untrusted apps. Alternative methods like sockets, pipes, and shared memory may be more secure. A key principle is to avoid synchronous communication with untrusted apps.

### 7. Related Work

Previous studies have explored vulnerabilities in system services. One such study [17] discovered a general design flaw in the concurrency control mechanism, naming it ASV, which makes Android susceptible to Denial-of-Service (DoS) attacks. However, this work has limitations: it focuses on APIs wrapping vulnerable service interfaces rather than the interfaces themselves, and the exploitation code is easily detectable and preventable. Our work identifies four hazard situations, making the attacks more versatile and flexible.

Other research has developed fuzzing tools for Android system services [13, 16, 19]. While fuzzing tests are effective, they face challenges in generating comprehensive test cases and defining abnormal behaviors. Our static taint analysis tool addresses these issues by covering all execution paths and clearly characterizing "call me back" vulnerabilities.

Taint analysis has been widely used for different purposes, including detecting privacy leaks in Android apps. Dynamic taint analysis tools like TaintDroid [15] and static taint analysis frameworks like FlowDroid [10] have been developed. Our work introduces static taint analysis for code audit and vulnerability detection in system services, providing a more precise and comprehensive solution.

### 8. Conclusions

Based on a new understanding of security risks introduced by the callback mechanism in system services, we have discovered a general type of design flaw. This reveals a new kind of vulnerability in system services and system apps. We designed and implemented a vulnerability detection tool based on static taint analysis, which successfully analyzed all 80 system services in Android 5.1.0. With its help, we discovered six previously unknown vulnerabilities, confirmed on Android 2.3.7-6.0.1. These vulnerabilities affect approximately 97.3% of 1.4 billion real-world Android devices. We crafted several PoC apps to illustrate serious attack hazards, from freezing critical functionalities to soft-rebooting the system. We also designed attack scenarios proving that the vulnerabilities can enable malicious apps to attack at mission-critical moments, such as system updating and virus scanning. The newly found vulnerabilities have been reported to Google, which confirmed them promptly. We also proposed suggestions for developers to patch and prevent this new kind of vulnerability.

### 9. Acknowledgments

Kai Wang and Yuqing Zhang were supported by the National Natural Science Foundation of China (61272481, 61572460), the National Key Research and Development Project (2016YFB0800703), and the National Information Security Special Projects of the National Development and Reform Commission of China [(2012)1424]. Peng Liu was supported by ARO W911NF-13-1-0421 (MURI), NSF CNS-1422594, and NSF CNS-1505664.

### 10. References

[1] 27 million doctors’ mobile devices at high risk of malware | ITProPortal.com. http://goo.gl/BJs5Mu.
[2] Android and RTOS together: The dynamic duo for today’s medical devices - embedded computing design. http://goo.gl/StURzu.
[3] Android auto. https://www.android.com/auto/.
[4] Android OS for smart medical equipment, developing embedded systems. [URL]
[5] Android point of sale | android POS restaurants, cafes, bars | [URL]
[6] The best android POS of 2016 | top ten reviews. [URL]
[7] Gartner says worldwide smartphone sales grew 9.7 percent in the fourth quarter of 2015. http://goo.gl/M0ZwSk.
[8] Google says there are now 1.4 billion active android devices worldwide. http://goo.gl/utHxO8.
[9] Lollipop is now the most-used version of Android, marshmallow up to 2.3 percent. http://goo.gl/Q598DH.
[10] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. FlowDroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI ’14, pages 259–269. ACM.
[11] J. Bell and G. Kaiser. Dynamic taint tracking for Java with Phosphor (demo). In Proceedings of the 2015 International Symposium on Software Testing and Analysis, ISSTA 2015, pages 409–413. ACM.
[12] E. Bodden. Inter-procedural data-flow analysis with IFDS/IDE and Soot. In Proceedings of the ACM SIGPLAN International Workshop on State of the Art in Java Program Analysis, SOAP ’12, pages 3–8. ACM.
[13] C. Cao, N. Gao, P. Liu, and J. Xiang. Towards analyzing the input validation vulnerabilities associated with Android system services. In Proceedings of the 31st Annual Computer Security Applications Conference, ACSAC 2015, pages 361–370. ACM.
[14] Q. A. Chen, Z. Qian, and Z. M. Mao. Peeking into your app without actually seeing it: UI state inference and novel Android attacks. In 23rd USENIX Security Symposium (USENIX Security 14), pages 1037–1052, San Diego, CA, Aug. 2014. USENIX Association.
[15] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: An information-flow tracking system for real-time privacy monitoring on smartphones. In Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation, OSDI’10.