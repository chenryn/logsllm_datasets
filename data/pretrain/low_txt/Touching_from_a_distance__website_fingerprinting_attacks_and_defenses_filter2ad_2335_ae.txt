### 4. Experimental Evaluation

To evaluate the effectiveness of our attack, we conducted a series of experiments. The first experiment, which uses artificial transition probabilities, overestimates the success rate of our attack. Conversely, the IMDB model underestimates the success rate due to these artificial transition probabilities. Together, these two experiments provide a rough estimate of the performance bounds of our attack.

#### 4.1 Data Collection
We generated packet traces by visiting URLs via Tor, simulating the observations an attacker would make. Unfortunately, Facebook's traffic patterns complicate the analysis, as they introduce additional variability.

#### 4.2 Results
**Figure 7:**
- **(a)** Distribution of log-likelihood scores (from the Facebook model) for Facebook visits and non-Facebook visits.
- **(b)** Distribution of log-likelihood scores (from the IMDB model) for IMDB visits and non-IMDB visits.

**Figure 8:**
- Receiver operating curves for the (a) Facebook and (b) IMDB website classifiers.

The log-likelihood scores are typically below the threshold when the user is visiting the target website and above the threshold otherwise. This allows an attacker to use our algorithms to pinpoint when a user visits a specific website.

**Figure 10:**
- Anecdotal evidence supporting our template matching intuition. We created a set of 99 random web pages and 1 IMDB movie page (Harry Potter). Running 100 trials of 4 other IMDB movie pages through the classifier, we found that the other movie pages matched the Harry Potter page 95% of the time. This indicates that an attacker can model template pages using a single instance as a representative of all instantiations of that template.

### 5. Discussion

Our data support several key conclusions:

1. **Inadequacy of Existing Defenses:**
   - Our attack achieved over 90% accuracy in identifying the page being loaded over an SSH tunnel and over 80% accuracy against Tor. The recently proposed randomized pipelining defense was ineffective against our attack. Even with traffic morphing or HTTPOS, our attack could identify web pages loaded over SSH.

2. **Multiple Side Channels for Traffic Analysis:**
   - The Panchenko classifier relies primarily on packet sizes and achieves good results. In contrast, our classifier performs well even if all packet size information is removed from the trace, as demonstrated in the randomized cover traffic experiment. Surprisingly, traffic analysis attacks based solely on the number of packets transmitted (without direction information) can outperform random guessing.

3. **Performance of DLSVM Classifier:**
   - The DLSVM classifier generally outperforms other classifiers, tying or beating the Panchenko classifier in all cases except packet count experiments. Our attack is more generic, not relying on ad hoc HTTP-related features. Unlike previous work, our page classifier does not reduce packet traces to a fixed-length feature vector but passes the trace directly into the classifier. This allows the Damerau-Levenshtein-based classifier to consider multiple aspects of the observation, such as packet sizes, directions, and ordering.

4. **Critical Features for Attack Success:**
   - Our experiments suggest that the most crucial feature is the pattern of upstream/downstream transmissions. For example, sample-based morphing destroys packet size information but leaves ordering largely undisturbed, making our attack effective against morphing. Randomized pipelining partially disrupts ordering and leaves some packet size information, allowing our attack to still perform well. Adding randomized cover traffic and hiding all packet size information significantly degrades our attack's performance.

5. **Effectiveness of Cover Traffic Defenses:**
   - Defenses based on randomized requests and cover traffic are not likely to be effective. In the experiment where we added cover traffic to the Tor + randomized pipelining data, our attack achieved between a 50% and 80% success rate. Figure 3 suggests that additional cover traffic provides diminishing security returns.

6. **Practicality in Real Settings:**
   - Our evaluation assumes that the victim loads one page at a time and each page is loaded to completion. While this may not always match real user behavior, our experiments show that cover-traffic-based defenses are not effective. Even if users do not always load a single page at a time, they do so often enough that it is a valid attack scenario. Any defense that fails to protect users in this scenario must be considered inadequate.

### 6. Conclusion

We have demonstrated that Tor is vulnerable to web page and website fingerprinting attacks. An adversary with the power to monitor a Tor user’s internet connection can infer which websites the user is visiting, potentially leading to censorship or persecution. Previously proposed defenses, such as traffic morphing, HTTPOS, and randomized pipelining, impose high costs but do not stop our attack. Consequently, we propose a new defense with provable security properties, albeit with higher overhead.

Our attack has several novel features. It is successful even if it ignores packet sizes, a feature critical to almost all prior fingerprinting attacks against Tor and encrypting proxies. Despite this, its performance on Tor is competitive with state-of-the-art SVM-based classifiers.

### 7. Acknowledgments

We thank Daniel Xiapu Luo for providing the HTTPOS source code and invaluable technical support. We also thank Eelco Herder for providing us with the URL traces used to evaluate our website classifier.

### 8. References

[1] Aurelien Bellet, Amaury Habrard, and Marc Sebban. Good edit similarity learning by loss minimization. Machine Learning, 2012.

[2] George Bissias, Marc Liberatore, David Jensen, and Brian Levine. Privacy vulnerabilities in encrypted HTTP streams. In Privacy Enhancing Technologies. 2006.

[3] Xiang Cai, Xin Cheng Zhang, Brijesh Joshi, and Rob Johnson. Touching from a distance: Website fingerprinting attacks and defenses. Technical Report SPLAT-TR-12-01, Stony Brook University, 2012.

[4] George Danezis. Traffic analysis of the HTTP protocol over TLS. http://research.microsoft.com/en-us/um/people/gdane/papers/TLSanon.pdf.

[5] The Internet Movie Database. http://www.imdb.com/.

[6] Kevin P. Dyer, Scott E. Coull, Thomas Ristenpart, and Thomas Shrimpton. Peek-a-boo, I still see you: Why efficient traffic analysis countermeasures fail. In Proceedings of the 33rd Annual IEEE Symposium on Security and Privacy, 2012.

[7] Facebook. http://www.facebook.com/.

[8] X. Fu, B. Graham, R. Bettati, and W. Zhao. On countermeasures to traffic analysis attacks. In Information Assurance Workshop, 2003.

[9] Xun Gong, Negar Kiyavash, and Nikita Borisov. Fingerprinting websites using remote traffic analysis. In ACM CCS, 2010.

[10] Dominik Herrmann, Rolf Wendolsky, and Hannes Federrath. Website fingerprinting: attacking popular privacy enhancing technologies with the multinomial naive-bayes classifier. In Proceedings of the 2009 ACM workshop on Cloud computing security.

[11] Andrew Hintz. Fingerprinting websites using traffic analysis. In Privacy Enhancing Technologies. 2003.

[12] The Internet Society. Hypertext Transfer Protocol – HTTP/1.1, 1999.

[13] Marc Liberatore and Brian Neil Levine. Inferring the source of encrypted HTTP connections. In ACM CCS, 2006.

[14] Liming Lu, Ee-Chien Chang, and Mun Chan. Website fingerprinting and identification using ordered feature sequences. In ESORICS. 2010.

[15] Xiapu Luo, Peng Zhou, Edmond W. W. Chan, Wenke Lee, Rocky K. C. Chang, and Roberto Perdisci. HTTPOS: Sealing information leaks with browser-side obfuscation of encrypted flows. In NDSS, 2011.

[16] Gonzalo Navarro. A guided tour to approximate string matching. ACM Comput. Surv., 33:31–88, March 2001.

[17] Andriy Panchenko, Lukas Niessen, Andreas Zinnen, and Thomas Engel. Website fingerprinting in onion routing based anonymization networks. In Proceedings of the 10th Workshop on Privacy in the Electronic Society, 2011.

[18] Mike Perry. Experimental defense for website traffic fingerprinting. https://blog.torproject.org/blog/experimental-defense-website-traffic-fingerprinting, September 2011.

[19] Yi Shi and Kanta Matsuura. Fingerprinting attack on the Tor anonymity system. In Information and Communications Security, volume 5927 of Lecture Notes in Computer Science, pages 425–438. Springer Berlin / Heidelberg, 2009.

[20] Qixiang Sun, Daniel R. Simon, Yi-Min Wang, Wilf Russell, Venkata N. Padmanabhan, and Lili Qiu. Statistical identification of encrypted web browsing traffic. In Proceedings of the IEEE Symposium on Security and Privacy, 2002.

[21] Tor project: Anonymity online. https://www.torproject.org/, August 2011.

[22] Vladimir N. Vapnik. The nature of statistical learning theory. Springer-Verlag New York, Inc., 1995.

[23] Harald Weinreich, Hartmut Obendorf, Eelco Herder, and Matthias Mayer. Not quite the average: An empirical study of web use. ACM Transactions on the Web, 1(2):26, 2 2008.

[24] Andrew M. White, Austin R. Matthews, Kevin Z. Snow, and Fabian Monrose. Phonotactic reconstruction of encrypted VoIP conversations: Hookt on fon-iks. In Proceedings of the 32nd IEEE Symposium on Security and Privacy, 2011.

[25] Charles Wright, Fabian Monrose, and Gerald M. Masson. HMM profiles for network traffic classification. In Proceedings of the ACM workshop on Visualization and data mining for computer security, 2004.

[26] Charles V. Wright, Scott E. Coull, and Fabian Monrose. Traffic morphing: An efficient defense against statistical traffic analysis. In NDSS, 2009.

[27] Shui Yu, Wanlei Zhou, Weijia Jia, and Jiankun Hu. Attacking anonymous web browsing at local area networks through browsing dynamics. The Computer Journal, 2011.

[28] Fan Zhang, Wenbo He, Xue Liu, and Patrick G. Bridges. Inferring users’ online activities through traffic analysis. In Proceedings of the Fourth ACM conference on Wireless network security, 2011.