### Segmentation Fault and Rediscovered Vulnerability in TinyDTLS

A segmentation fault, resulting from a null address read, has been identified in the TinyDTLS library. This issue is a rediscovery of CVE-2017-7243, which remains unfixed in the master branch of TinyDTLS.

### Inconsistent Alerts and Unreliable Handshake Protocol

Analysis of the learned model revealed frequent usage of `Alert(DecryptError)` messages. TinyDTLS sends this alert whenever it attempts to decrypt a record (whether encrypted or not) and fails to find the necessary key material for the epoch in its internal state. While this behavior is not inherently problematic, TinyDTLS also invalidates the entire connection in such cases. This can lead to unnecessary connection breaks when `ChangeCipherSpec` and `Finished` messages are received out of order during a regular handshake.

### Handshake with Invalid Epoch Numbers

The model for TinyDTLSC showed that the server can perform the first two steps of a handshake using `ClientHello` messages with epoch 1, even when no cipher for epoch 0 has been negotiated. Further investigation revealed that the handshake could be completed by sending `ClientKeyExchange`, `ChangeCipherSpec`, and `Finished` messages with the same epochs as in a normal handshake (which are 0, 0, and 1, respectively). This handshake is clearly invalid and should not have been possible to complete.

### Bugs in OpenSSL

#### Finished Treated as Retransmission

After a successful handshake, the OpenSSL server incorrectly treats retransmitted `Finished` messages. Instead of discarding the message or sending an appropriate alert, OpenSSL responds by resending the last flight (`ChangeCipherSpec`, `Finished`). The `Finished` message received from the server has a different message sequence number and `verify_data` content, which is incorrect.

#### InternalError Alerts

OpenSSL sends an `Alert(InternalError)` in response to unexpected `Finished` messages. Internally, OpenSSL processes the message and attempts to compute the `verify_data` for the `Finished` message. However, due to defensive programming, if missing parameters in the session context are discovered, the processing is stopped, and an `Alert(InternalError)` is returned. A more appropriate response would be an alert indicating the receipt of an out-of-order message, such as `Alert(UnexpectedMessage)`.

### Observed Code Patterns

Our analysis revealed several recurring code patterns that led to bugs and vulnerabilities. Most importantly, many of the analyzed implementations do not use proper state machines. While they attempt to verify the handshake protocol flow with simple checks in switch statements, a complete message flow validation is often missing. For example, the Scandium implementation was too lenient in message sequence verification, and only additional checks in the code prevented further security vulnerabilities. One reason for the lack of state machines is that the DTLS specification [36] does not provide a design for one. We believe that protocol standards should include such designs and require their implementation.

In libraries implementing TLS and DTLS, we observed that code is reused across both protocols. This means that similar vulnerabilities in one protocol implementation can affect the other. For instance, we found an authentication bypass in JSSE by analyzing the DTLS server implementation, but subsequent analysis revealed that the bug is also applicable to TLS. We expect to find similar behaviors in the future.

Interestingly, both Scandium and PionDTLS include the same early `Finished` message bug that was found in JSSE TLS in 2015 [13]. This may be attributed to the lack of state machine implementation, but it is also related to an ambiguity mentioned in [36].

### Related Work

Most attacks applicable to TLS are also potentially applicable to DTLS, including Heartbleed [37], Bleichenbacher’s attack [7], and CBC padding oracle attacks [43]. One exception is the attack presented by AlFardan and Paterson in 2012, which adapted padding oracle attacks to DTLS using novel side channels [1]. The attack exploited subtle timing differences between processing packets with valid and invalid padding, amplified by the processing of subsequent Heartbeat messages. It was applicable to OpenSSL and GnuTLS. In 2013, the same authors extended their work to a powerful attack breaking both TLS and DTLS—Lucky13 [2].

Van Drueten obtained preliminary results on analyzing DTLS implementations using protocol state fuzzing, from which this work branched off. His thesis [42] analyzed OpenSSL and mbedTLS with a limited input alphabet and did not reveal any security vulnerabilities. De Ruiter and Poll [13] used protocol state fuzzing to analyze TLS implementations and found several security bugs. Our models are significantly larger due to the complexity introduced by UDP and the inclusion of multiple key exchange algorithms and certificate settings. Some of the bugs we found are only possible under specific configurations or are specific to DTLS.

McMahon Stone et al. [28] extended state learning to capture time behavior and operate over an unreliable communication medium. They used the extension to analyze implementations of the 802.11 4-Way Handshake in seven Wi-Fi routers. Our work employs similar strategies, such as checking counterexamples against a cache or using majority voting, but it can use a more efficient learning setup as it does not have to deal with a lossy medium and resulting timeouts.

Chalupar et al. [9] also addressed non-determinism in their work.

### Conclusions and Future Work

We have presented the first protocol state fuzzing framework for DTLS. As a basis, particularly for constructing a MAPPER, we developed a test framework for DTLS based on TLS-Attacker. The MAPPER and test framework implement DTLS specifics, including explicit sequence numbers, support for cookie management, and epoch numbers. We focused on discovering state machine bugs triggered by sequences of valid handshake messages and did not exercise reordering and fragmentation. Using our platform, we generated models of thirteen widely used DTLS server implementations and found critical security vulnerabilities and implementation flaws.

Future work includes:
1. Exploring Record Layer functionality such as fragmentation and reordering by adding a strategy for sending reordered and fragmented records.
2. Using our learned models to support systematic testing with invalid input messages, as done in protocol fuzzers.
3. Automating the analysis of learned models using model checking techniques, following methodologies presented in work for TCP [18] or SSH [19].

### Acknowledgements

We thank Jörg Schwenk, our shepherd Kenneth Paterson, and the anonymous reviewers for their insightful comments. We also thank Niels van Drueten for his contribution to an initial version of the test framework.

This research was conducted at the Lorentz Center workshop on Systematic Analysis of Security Protocol Implementations. It was partially funded by the Swedish Foundation for Strategic Research (SSF) through the aSSIsT project, the Swedish Research Council, and the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under Germany’s Excellence Strategy - EXC 2092 CASA - 390781972.

### References

[1] Nadhem AlFardan and Kenneth G. Paterson. Plaintext-recovery attacks against Datagram TLS. In Network and Distributed System Security Symposium, NDSS 2012, 2012.

[2] Nadhem J. AlFardan and Kenneth G. Paterson. Lucky thirteen: Breaking the TLS and DTLS record protocols. In 2013 IEEE Symposium on Security and Privacy, pages 526–540. IEEE, 2013.

[3] Dana Angluin. Learning regular sets from queries and counterexamples. Information and Computation, 75(2):87–106, 1987.

[4] Nimrod Aviram, Sebastian Schinzel, Juraj Somorovsky, Nadia Heninger, Maik Dankel, Jens Steube, Luke Valenta, David Adrian, J. Alex Halderman, Viktor Dukhovni, Emilia Käsper, Shaanan Cohney, Susanne Engels, Christof Paar, and Yuval Shavitt. DROWN: Breaking TLS using SSLv2. In 25th USENIX Security Symposium, USENIX Security 16, pages 689–706, August 2016.

[5] Benjamin Beurdouche, Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cédric Fournet, Markulf Kohlweiss, Alfredo Pironti, Pierre-Yves Strub, and Jean Karim Zinzindohoue. A messy state of the union: Taming the composite state machines of TLS. Commun. ACM, 60(2):99–107, February 2017.

[6] Benjamin Beurdouche, Antoine Delignat-Lavaud, Nadim Kobeissi, Alfredo Pironti, and Karthikeyan Bhargavan. FlexTLS: A tool for testing TLS implementations. In 9th USENIX Workshop on Offensive Technologies, WOOT 15. USENIX Association, August 2015.

[7] Daniel Bleichenbacher. Chosen ciphertext attacks against protocols based on the RSA encryption standard PKCS #1. In Advances in Cryptology - CRYPTO '98, volume 1462 of LNCS. Springer, Berlin / Heidelberg, 1998.

[8] Botan: Crypto and TLS for C++11, 2019.

[9] Georg Chalupar, Stefan Peherstorfer, Erik Poll, and Joeri de Ruiter. Automated reverse engineering using Lego R. In 8th USENIX Workshop on Offensive Technologies, WOOT 14. USENIX Association, August 2014.

[10] Chia Yuan Cho, Domagoj Babic, Eui Chul Richard Shin, and Dawn Song. Inference and analysis of formal models of botnet command and control protocols. In Proceedings of the 17th ACM Conference on Computer and Communications Security, CCS 2010, pages 426–439. ACM, October 2010.

[11] Tsun S. Chow. Testing software design modeled by finite-state machines. IEEE Trans. Soft. Eng., 4(3):178–187, May 1978. Special collection based on COMPSAC.

[12] Lesly-Ann Daniel, Erik Poll, and Joeri de Ruiter. Inferring OpenVPN state machines using protocol state fuzzing. In IEEE European Symposium on Security and Privacy (EuroS&P) Workshops, pages 11–19. IEEE, April 2018.

[13] Joeri de Ruiter and Erik Poll. Protocol state fuzzing of TLS implementations. In 24th USENIX Security Symposium, pages 193–206. USENIX Association, August 2015.

[14] T. Dierks and Eric Rescorla. The transport layer security (TLS) protocol version 1.1. RFC 4346, April 2006.

[15] T. Dierks and Eric Rescorla. The transport layer security (TLS) protocol version 1.2. RFC 5246, August 2008.

[16] N. Modadugu E. Rescorla, H. Tschofenig. The datagram transport layer security (DTLS) protocol version 1.3 - draft-34, July 2018.

[17] P. Eronen and H. Tschofenig. Pre-shared key ciphersuites for transport layer security (TLS). RFC 4279, December 2005.

[18] Paul Fiterău-Broştean, Ramon Janssen, and Frits W. Vaandrager. Combining model learning and model checking to analyze TCP implementations. In Computer Aided Verification - 28th International Conference, CAV 2016, Proceedings, Part II, volume 9780 of LNCS, pages 454–471. Springer, 2016.

[19] Paul Fiterău-Broştean, Toon Lenaerts, Joeri de Ruiter, Erik Poll, Frits W. Vaandrager, and Patrick Verleg. Model learning and model checking of SSH implementations. In Proceedings of the 24th ACM SIGSOFT International SPIN Symposium on Model Checking of Software, SPIN 2017, pages 142–151. ACM, 2017.

[20] Susumu Fujiwara, Gregor von Bochmann, Ferhat Khendek, Mokhtar Amalou, and Abderrazak Ghedamsi. Test selection based on finite state models. IEEE Trans. Soft. Eng., 17(6):591–603, June 1991.

[21] Malte Isberner. Foundations of Active Automata Learning: An Algorithmic Perspective. PhD thesis, Technical University Dortmund, Germany, 2015.

[22] Malte Isberner, Falk Howar, and Bernhard Steffen. The TTT algorithm: A redundancy-free approach to active automata learning. In Runtime Verification: 5th International Conference, RV 2014, Proceedings, volume 8734 of LNCS, pages 307–322. Springer, September 2014.

[23] Malte Isberner, Falk Howar, and Bernhard Steffen. The open-source LearnLib - A framework for active automata learning. In Computer Aided Verification - 27th International Conference, CAV, volume 9206 of LNCS, pages 487–495. Springer, 2015.

[24] Hubert Kario. tlsfuzzer, 2018.

[25] David Lee and Mihalis Yannakakis. Principles and methods of testing finite state machines—a survey. Proceedings of the IEEE, 84(8):1090–1123, 1996.

[26] Knud Lasse Lueth. State of the IoT 2018: Number of IoT devices now at 7B — market accelerating, August 2018.

[27] matrixSSL. Compact Embedded SSL/TLS stack, 2019.

[28] Chris McMahon Stone, Tom Chothia, and Joeri de Ruiter. Extending automated protocol state learning for the 802.11 4-way handshake. In Computer Security, volume 11098 of LNCS, pages 325–345, Cham, August 2018. Springer International Publishing.

[29] Nagendra Modadugu and Eric Rescorla. The design and implementation of Datagram TLS. In Proceedings of the Network and Distributed System Security Symposium, NDSS 2004, 2004.

[30] Bodo Möller, Thai Duong, and Krzysztof Kotowicz. This POODLE bites: exploiting the SSL 3.0 fallback, 2014.

[31] Thomas Pornin. BoarSSL, 2017.

[32] Harald Raffelt, Maik Merten, Bernhard Steffen, and Tiziana Margaria. Dynamic testing via automata learning. STTT, 11(4):307–324, 2009.

[33] Abdullah Rasool, Greg Alpár, and Joeri de Ruiter. State machine inference of QUIC. arXiv preprint arXiv:1903.04384, 2019.

[34] E. Rescorla, M. Ray, S. Dispensa, and N. Oskov. Transport layer security (TLS) renegotiation indication extension. RFC 5746, February 2010.

[35] Eric Rescorla and Nagendra Modadugu. Datagram transport layer security. RFC 4347, April 2006.

[36] Eric Rescorla and Nagendra Modadugu. Datagram transport layer security version 1.2. RFC 6347, January 2012.

[37] Riku, Antti, Matti, and Neel Mehta. Heartbleed, CVE-2014-0160, 2015.

[38] Zach Shelby, Klaus Hartke, and Carsten Bormann. The constrained application protocol (CoAP). RFC 7252, June 2014.

[39] Juraj Somorovsky. Systematic fuzzing and testing of TLS libraries. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, CCS '16, pages 1492–1504, New York, NY, USA, 2016. ACM.

[40] Martin Tappler, Bernhard K. Aichernig, and Roderick Bloem. Model-based testing IoT communication via active automata learning. In Software Testing, Verification and Validation, (ICST) 2017 IEEE International Conference on, pages 276–287. IEEE Computer Society, March 2017.

[41] Frits W. Vaandrager. Model learning. Commun. ACM, 60(2):86–95, 2017.

[42] Niels van Drueten. Security analysis of DTLS 1.2 implementations. Bachelor thesis, Radboud University, Nijmegen, The Netherlands, 2019.

[43] Serge Vaudenay. Security flaws induced by CBC padding - applications to SSL, IPSEC, WTLS ... In Advances in Cryptology - EUROCRYPT 2002, volume 2332 of LNCS. Springer, Berlin / Heidelberg, April 2002.

[44] David Wagner and Bruce Schneier. Analysis of the SSL 3.0 protocol. In Proceedings of the 2nd USENIX Workshop on Electronic Commerce, pages 29–40, Berkeley, CA, USA, 1996. USENIX Association.