# Grendel-Scan

## Distribution
- Written entirely in Java
- Utilizes Eclipseâ€™s Standard Widget Toolkit (SWT)
- Available for Windows, Linux, and Mac
- The only requirement is JRE 1.5 or later

## Primary Libraries
- **Apache HTTP Components**: [http://hc.apache.org/](http://hc.apache.org/)
- **Cobra HTML DOM Parsing Engine**: A highly modified version - [http://lobobrowser.org/cobra.jsp](http://lobobrowser.org/cobra.jsp)
- **Apache Derby (embedded SQL database)**: [http://db.apache.org/](http://db.apache.org/)
- **Mozilla Rhino (JavaScript engine)**: [http://www.mozilla.org/rhino/](http://www.mozilla.org/rhino/)
- **Apache Commons components**: [http://commons.apache.org/](http://commons.apache.org/)
- **Nikto 2 database** (used with permission)

## Design Philosophy
- **False Positives vs. False Negatives**
  - False positives are easy to manually test for.
  - False negatives require a full penetration test to find.
- **Extensibility**
  - Pushing abstract logic to shared libraries simplifies the development of test modules.

## Application Walkthrough

### Product Roadmap

#### Version 1.1
- Multi-part MIME encoded POST bodies
- SSL/TLS configuration testing
- PDF and XML report formats
- Support for one-time passwords and authentication domains
- Parameter incrementing
- Upstream proxy authentication
- Test module: Brute-force authentication
- Test module: Error-based username enumeration

#### Version 1.2
- Automated AJAX navigation
- Full-featured HTTP fuzzer
- Support for client SSL certificates

#### Version 1.3
- Reports of new and remediated vulnerabilities between scans
- Support for graphs in reports
- Ability to save and resume scans

## Demonstration Environment
- **SLAX-based LiveCD**
- **Server (Typical LAMP Stack)**
  - Apache HTTPD (from Slackware, defaults + mod_php)
  - MySQL (from Slackware, defaults)
  - PHP 4
  - Zencart 1.1.2 (circa February 2004, known vulnerabilities)
- **Client**
  - Mozilla Firefox 3.0
  - Grendel-Scan

### Grendel-Scan Demonstration
- **Automated & Manual Testing**

## Advantages of Automated Web Scanners
- Minimal training requirements
- Fast
- Cost-effective

## Limitations of Automated Web Scanners
- **General Limitations**
  - Logic flaws (e.g., sending -$1000 to another account)
  - Design flaws (e.g., weak password recovery questions)
  - Improper application flow enforcement (e.g., forced browsing)
- **Other Limitations**
  - Scanners cannot contextually understand an application's logic or data.
  - Scanners typically generate far more traffic than manual tests.