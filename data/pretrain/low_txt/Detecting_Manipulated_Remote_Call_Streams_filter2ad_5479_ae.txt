### Entry
### Socket

### Exit

**Figure 17: The socket model in Linux glibc.**

The differences observed in the library code between our test platforms and those used by Wagner and Dean can be attributed to the distinct operating systems. While Wagner and Dean analyzed programs compiled on Red Hat Linux, our tests were conducted on Solaris 8. Solaris, being an older operating system, includes more extensive library code in its standard libraries. For instance, the structure of Solaris libc differs from that of glibc on Linux, incorporating additional functionalities not present in glibc.

To illustrate these differences, compare Figure 17, which shows the automaton for the `socket` system call in glibc, with Figure 16, which depicts the same function in Solaris libc. The Solaris `socket` function includes code to maintain backward compatibility with earlier methods of resolving the device path for a networking protocol. This is one of the most significant differences we have identified, but we have also found numerous other library functions with similar characteristics. In summary, the library code in Solaris is more complex compared to that in Linux.

### Understanding the Impact of Different Library Code Bases

To better understand the influence of these different library code bases, we identified several functions in Solaris libc that differ significantly from their equivalents in glibc. We instrumented these functions to generate remote system call events in a manner similar to glibc. As expected, the average branching factor of each model decreased significantly (see Figure 18). Although the instrumentation was intentionally incorrect, leading to semantically invalid models, the change in precision values supports our hypothesis.

**Figure 18: Comparison of our baseline NFA models with the prior results of Wagner and Dean.**

Our model operation demonstrates a significant improvement over the work of Wagner and Dean. Figure 18 also highlights the overheads in each of the two programs attributed to model operation. Our gain is partly due to the implementation: Wagner and Dean's monitor was written in Java, whereas our code runs natively and is highly efficient, introducing only negligible delay.

### Related Work

There are three main areas with techniques and goals similar to those considered in this paper: applications of static analysis to intrusion detection, statistical anomaly-detection-based intrusion detection, and secure agentry. We compare our techniques with existing research in these areas.

#### Static Analysis for Intrusion Detection

Our work builds upon and extends the techniques described by Wagner and Dean [36, 37]. To our knowledge, they were the first to propose using static analysis for intrusion detection. However, they analyzed C source code by modifying a compiler and linker to construct application models. Our analysis is performed on binaries, independent of any source language or compiler, thus removing the burden on users to provide their source code. We also propose several optimizations and program transformations to improve model precision and efficiency. These optimizations are important contributions and can be utilized by other researchers in this field.

#### Statistical Anomaly-Detection-Based Intrusion Detection

A vast body of work applies dynamic analysis to intrusion detection. Systems like IDES [9] construct a statistical model of normal behavior from dynamic traces of the program. For example, a sequence of system calls, as produced by tools like `strace` and `truss`, can be used to generate a statistical model of the program (see Forrest et al. [12]). Behaviors deviating from this model are flagged as anomalous but do not guarantee manipulation. While theoretically, we could use a statistical program model in our checking agent, these models suffer from high false alarm rates, rejecting sequences of system calls that represent acceptable but infrequent program behavior. Given that human inspection of flagged jobs is impractical in our setting, we did not pursue this approach.

#### Secure Agentry

The literature on safe execution of mobile agents on malicious hosts (secure agentry) is extensive. Readers are referred to Schneider's summary [31] for an overview of various techniques in this area. We are currently exploring whether techniques such as replication are useful in our setting.

### Future Work

We are progressing on several fronts. First, we aim to expand our infrastructure base of static analysis techniques to include points-to analysis for binaries and regular expression construction for arguments. Standard points-to analysis algorithms are designed for higher-level source languages and often rely on datatype properties evident from the syntax of the code. We will adapt these algorithms to the weakly-typed SPARC code. For arguments, we plan to use stronger slicing techniques to build regular expressions for arguments that are not statically determined. Better code analyses will produce more precise models.

We are also targeting run-time overhead reductions in our complex models. To reduce the impact of null call insertions, we will investigate adaptations of the Ball and Larus algorithm to identify optimal code instrumentation points for minimum-cost code profiling [4]. To reduce the overhead of our PDA models, we will collapse all run-time values at the same automaton state into a single value, represented by a DAG, to cover all stack configurations. When traversing outgoing edges, a single update to the DAG will be equivalent to individual updates to each previous stack. Our goal is to make our complex and precise models attractive for real environments.

Additionally, we will add general support for dynamically linked applications and signal handlers to our analysis engine, enabling the analysis of larger test programs. To better measure the attack opportunities afforded by our models, we will implement the average adversarial opportunity metric and create a collection of attack automata. Accurate measurement of the danger inherent in an automaton will help us develop strategies to mitigate potential harm.

### Acknowledgments

We thank David Wagner for patiently answering questions about his work and for providing his specification of dangerous system calls. David Melski pointed out the relevance of the Ball and Larus research [4]. We had many insightful discussions with Tom Reps regarding static analysis. Hong Lin initially researched solutions to the remote code manipulation vulnerability. Glenn Ammons provided helpful support for EEL. We also thank the other members of the WiSA security group at Wisconsin for their valuable feedback and suggestions. Lastly, we thank the anonymous referees for their useful comments.

### Availability

Our research tool is still in development and is not yet available for distribution. For updates, contact Jonathon Giffin, PI:EMAIL.

### References

[1] A.D. Alexandrov, M. Ibel, K.E. Schauser, and C.J. Scheiman, “SuperWeb: Towards a Global Web-Based Parallel Computing Infrastructure,” 11th IEEE Symposium on High-Performance Distributed Computing, Geneva, Switzerland, April 1997.

[2] K. Anstreicher, N. Brixius, J.-P. Goux, and J. Linderoth, “Solving Large Quadratic Assignment Problems on Computational Grids,” 17th International Symposium on Mathematical Programming, Atlanta, Georgia, August 2000.

[3] A.W. Appel and D.B. MacQueen, “Standard ML of New Jersey,” Third International Symposium on Programming Language Implementation and Logic Programming, Passau, Germany, August 1991. Also appears in J. Maluszynski and M. Wirsing, eds., Programming Language Implementation and Logic Programming, Lecture Notes in Computer Science #528, pp. 1-13, Springer-Verlag, New York (1991).

[4] T. Ball and J.R. Larus, “Optimally Profiling and Tracing Programs,” ACM Transactions on Programming Languages and Systems 16, 3, pp. 1319-1360, July 1994.

[5] B. Barak, O. Goldreich, R. Impagliazzo, S. Rudich, A. Sahai, S. Vadhan, “On the (Im)possibility of Obfuscating Programs,” 21st Annual International Cryptography Conference, Santa Barbara, California, August 2001. Also appears in J. Kilian, ed., Advances in Cryptology - CRYPTO 2001, Lecture Notes in Computer Science #2139, pp. 1-18, Springer-Verlag, New York (2001).

[6] E. Belani, A. Vahdat, T. Anderson, and M. Dahlin, “The CRISIS Wide Area Security Architecture,” Seventh USENIX Security Symposium, San Antonio, Texas, January 1998.

[7] S. Chow, Y. Gu, H. Johnson, and V.A. Zakharov, “An Approach to the Obfuscation of Control-Flow of Sequential Computer Programs,” Information Security Conference ‘01, Malaga, Spain, October 2001.

[8] C. Collberg, C. Thomborson, and D. Low, “Breaking Abstractions and Unstructuring Data Structures,” IEEE International Conference on Computer Languages, Chicago, Illinois, May 1998.

[9] D.E. Denning and P.J. Neumann, Requirements and Model for IDES–A Real-Time Intrusion Detection System, Technical Report, SRI International, August 1985.

[10] J. Esparza, D. Hansel, P. Rossmanith, and S. Schwoon, “Efficient Algorithms for Model Checking Pushdown Systems,” 12th Conference on Computer Aided Verification, Chicago, Illinois, July 2000. Also appears in E.A. Emerson and A.P. Sistla, eds., Computer Aided Verification, Lecture Notes in Computer Science #1855, pp. 232-247, Springer-Verlag, New York (2000).

[11] G.E. Fagg, K. Moore, and J.J. Dongarra, “Scalable Networked Information Processing Environment (SNIPE),” Supercomputing ‘97, San Jose, California, November 1997.

[12] S. Forrest, S.A. Hofmeyr, A. Somayaji, and T.A. Longstaff, “A Sense of Self for Unix Processes,” 1996 IEEE Symposium on Research in Security and Privacy, Oakland, California, May 1996.

[13] I. Foster and C. Kesselman, “Globus: A Toolkit for Building Grid Environments,” The International Journal of Supercomputer Applications and High Performance Computing 11, 2, pp. 115-129, Summer 1997.

[14] I. Foster and C. Kesselman, eds., The Grid: Blueprint for a New Computing Infrastructure, Morgan Kaufmann, San Francisco (1998).

[15] A.K. Ghosh, A. Schwartzbard, and M. Schatz, “Learning Program Behavior Profiles for Intrusion Detection,” 1st USENIX Workshop on Intrusion Detection and Network Monitoring, Santa Clara, California, April 1999.

[16] J.T. Giffin and H. Lin, “Exploiting Trusted Applet-Server Communication,” Unpublished Manuscript, 2001. Available at http://www.cs.wisc.edu/~giffin/.

[17] F. Hohl, “A Model of Attacks of Malicious Hosts Against Mobile Agents,” 4th ECOOP Workshop on Mobile Object Systems: Secure Internet Computations, Brussels, Belgium, July 1998.

[18] J. Hopcroft, An n log n Algorithm for Minimizing States in a Finite Automaton, Theory of Machines and Computations, pp. 189-196, Academic Press, New York (1971).

[19] J.E. Hopcroft, R. Motwani, and J.D. Ullman, Introduction to Automata Theory, Languages, and Computation, Addison Wesley, Boston (2001).

[20] S. Horwitz and T. Reps, “The Use of Program Dependence Graphs in Software Engineering,” 14th International Conference on Software Engineering, Melbourne, Australia, May 1992.

[21] N.D. Jones, C.K. Gomard, and P. Sestoft, Partial Evaluation and Automatic Program Generation, Prentice Hall International Series in Computer Science, Prentice Hall, Englewood Cliffs, New Jersey (1993).

[22] C. Ko, G. Fink, and K. Levitt, “Automated Detection of Vulnerabilities in Privileged Programs by Execution Monitoring,” 10th Annual Computer Security Applications Conference, Orlando, Florida, 1994.

[23] C. Ko, “Induction of Valid Behavior Specifications for Intrusion Detection,” 2000 IEEE Symposium on Security and Privacy, Oakland, California, 2000.

[24] L. Lamport, R. Shostak, and M. Pease, “The Byzantine Generals Problem,” ACM Transactions on Programming Languages and Systems 4, 3, pp. 382-401, July 1982.

[25] J.R. Larus and E. Schnarr, “EEL: Machine-Independent Executable Editing,” SIGPLAN ‘95 Conference on Programming Language Design and Implementation, La Jolla, California, June 1995.

[26] M. Litzkow, M. Livny, and M. Mutka, “Condor–A Hunter of Idle Workstations,” 8th International Conference on Distributed Computer Systems, San Jose, California, June 1988.

[27] B.P. Miller, M. Christodorescu, R. Iverson, T. Kosar, A. Mirgorodskii, and F. Popovici, “Playing Inside the Black Box: Using Dynamic Instrumentation to Create Security Holes,” Parallel Processing Letters 11, 2/3, pp. 267-280, June/September 2001. Also appears in the Second Los Alamos Computer Science Institute Symposium, Sante Fe, NM (October 2001).

[28] T. Reps, “Program Analysis via Graph Reachability,” Information and Software Technology 40, 11/12, pp. 701-726, November/December 1998.

[29] J.H. Saltzer, “Protection and the Control of Information Sharing in Multics,” Communications of the ACM 17, 7, pp. 388-402, July 1974.

[30] T. Sander and C.F. Tschudin, “Protecting Mobile Agents Against Malicious Hosts,” in G. Vigna, ed., Mobile Agents and Security, Lecture Notes in Computer Science #1419, pp. 44-60, Springer-Verlag, New York (1998).

[31] F.B. Schneider, “Towards Fault-tolerant and Secure Agentry,” 11th International Workshop on Distributed Algorithms, Saarbrucken, Germany, September 1997.

[32] SETI@home: Search for Extraterrestrial Intelligence, Home, January 2002, at http://setiathome.ssl.berkeley.edu/.

[33] Sun Microsystems, Java Virtual Machines, 11 May 2002, http://java.sun.com/j2se/1.4/docs/guide/vm/.

[34] F. Tip, “A Survey of Program Slicing Techniques,” Journal of Programming Languages 3, 3, pp. 121-189, September 1995.

[35] A. Vahdat, T. Anderson, M. Dahlin, E. Belani, D. Culler, P. Eastham, and C. Yoshikawa, “WebOS: Operating System Services for Wide Area Applications,” Seventh International Symposium on High Performance Distributed Computing, Chicago, Illinois, July 1998.

[36] D.A. Wagner, Static Analysis and Computer Security: New Techniques for Software Assurance, Ph.D. Dissertation, University of California at Berkeley, Fall 2000.

[37] D. Wagner and D. Dean, “Intrusion Detection via Static Analysis,” 2001 IEEE Symposium on Security and Privacy, Oakland, California, May 2001.

[38] C. Wang, J. Davidson, J. Hill, and J. Knight, “Survivability of Dependent Systems and Networks,” International Conference on Dependable Systems and Networks, Goteborg, Sweden, July 2001.

[39] C. Warrender, S. Forrest, and B. Pearlmutter, “Detecting Intrusions Using System Calls: Alternative Data Models,” 1999 IEEE Symposium on Security and Privacy, Oakland, California, May 1999.