### Malware Distribution and Detection

#### Downloader Binaries and IRC Connections
Downloader binaries often fetch up to 60 additional binaries over HTTP. We also observed a significant number of connection attempts to typical IRC ports, accounting for more than 50% of all non-HTTP connections. Previous studies (e.g., [1, 2, 3, 4, 5]) have shown that these IRC connection attempts are likely aimed at unwillingly adding compromised machines to an IRC botnet, confirming earlier conjectures by Provos et al. [6] about the connection between web malware and botnets.

#### Anti-Virus Engine Detection Rates
Web-based malware typically uses a pull-based delivery mechanism, requiring victims to visit the malware-hosting server or a linked URL to download the malware. This behavior presents several challenges for defense mechanisms, such as malware signature generation schemes, due to the sparse and difficult-to-cover nature of the web. Unlike active scanning malware, which uses a push-based delivery mechanism and can be effectively monitored with honeypot sensors, web-based malware is more elusive.

To evaluate the implications of this delivery mechanism, we measured the detection rates of several well-known anti-virus engines against our collected set of suspected malware samples. We developed a heuristic to detect these suspected binaries before subjecting them to anti-virus scanners. For each inspected URL, we checked if visiting the URL caused the creation of at least one new process on the virtual machine. If so, we extracted any binary downloads from the recorded HTTP response and flagged them as suspicious.

We applied this methodology daily over a one-month period in April 2007. Each binary was then scanned using the latest virus definitions for each anti-virus engine. The detection rate for each engine was calculated as the number of detected (flagged) samples divided by the total number of suspicious malware instances inspected that day. Figure 1 shows the individual detection rates of the anti-virus engines, revealing an average detection rate of 70% for the best engine. These results are concerning, as even the best anti-virus engines fail to cover a significant fraction of web malware.

**Figure 1: Detection rates of 3 anti-virus engines.**

#### False Positives
The above strategy may falsely classify benign binaries as malicious. To evaluate false positives, we used the following heuristic: we assumed that all suspicious binaries would eventually be discovered by anti-virus vendors. We re-scanned all undetected binaries two months later (in July 2007) using the latest virus definitions. All undetected binaries from the re-scanning step were considered false positives. Our results showed that the earlier analysis was fairly accurate, with false positive rates of less than 10%.

We further investigated some binaries identified as false positives and found that popular installers exhibit behavior similar to drive-by downloads, where the installer first runs and then downloads the associated software package. To minimize the impact of false positives, we created a whitelist of known benign downloads, exempting them from our analysis.

#### Discussion
The level of malfeasance on the Internet is a cause for concern. While our work has shown that web-based malware is a serious threat, it does not quantify the number of visitors who become infected. Our infrastructure is intentionally configured to be vulnerable to a wide range of attacks, but savvy users who apply software updates diligently would be far less vulnerable. Without a wide-scale browser vulnerability study, the actual number of compromises remains unknown. Nonetheless, our findings highlight the pervasive nature of the malware problem and aim to educate users, webmasters, and researchers about the security challenges ahead.

Several outlets exist for leveraging the results of our infrastructure. For example, Google's Safe Browsing API [7] and diagnostic page [8] provide data to flag search results, which we hope will benefit the broader community.

#### Related Work
Honeypots, including virtual machines, have been used to detect unknown attacks. Moshchuk et al. [9] used client-side techniques to study spyware on the web, but their primary focus was not on detecting drive-by downloads. Provos et al. [10] and Seifert et al. [11] raised awareness of the threat posed by drive-by downloads, explaining how different web page components exploit browsers. Wang et al. [12] proposed an approach for detecting exploits against Windows XP when visiting webpages in Internet Explorer.

Our work offers a more comprehensive analysis of web-based malware, including its prevalence, distribution networks, and major driving forces. Additionally, dynamic tainting analysis may provide deeper insights into malware installation and operation, but we focused on structural properties and behavioral changes due to computational constraints.

#### Conclusion
Malicious URLs initiating drive-by downloads are widespread, raising concerns about web browsing safety. Our large-scale data collection infrastructure continuously detects and monitors the behavior of websites perpetrating drive-by downloads. Our analysis of over 66 million URLs over a 10-month period reveals that 1.3% of incoming search queries to Google return at least one link to a malicious site. We also find that advertising networks are being abused to deliver malware through ads, and even state-of-the-art anti-virus engines are lacking in their ability to protect against drive-by downloads. This calls for more elaborate defense mechanisms to address this rapidly increasing threat.

#### Acknowledgments
We thank Oliver Fisher, Dean McNamee, Mark Palatucci, and Ke Wang for their help with Google's malware detection infrastructure. This work was funded in part by NSF grants CNS-05-17111 and CNS-05-27001.

#### References
[1] The Open Directory Project. See http://www.news.com/2100-1023-877568.html.
[2] Safe Browsing API, June 2007. See http://code.google.com/apis/safebrowsing/.
[3] Safe Browsing Diagnostic Page, May 2007. See http://www.google.com/safebrowsing/diagnostic?site=yoursite.com.
[4] A NAGNOSTAKIS, K. G., SIDIROGLOU, S., AKRITIDIS, P., XINIDIS, K., MARKATOS, E., AND KEROMYTIS, A. D. Detecting Targeted Attacks Using Shadow Honeypots.
[5] A NDERSON, D. S., FLEIZACH, C., SAVAGE, S., AND VOELKER, G. M. Spamscatter: Characterizing Internet Scam Hosting Infrastructure. In Proceedings of the USENIX Security Symposium (August 2007).
[6] B ARFORD, P., AND YAGNESWARAN, V. An Inside Look at Botnets. Advances in Information Security. Springer, 2007.
[7] BEM, J., HARIK, G., LEVENBERG, J., SHAZEER, N., AND TONG, S. Large Scale Machine Learning and Methods. US Patent: 7,213,157.
[8] C OOKE, E., JAHANIAN, F., AND MCPHERSON, D. The Zombie Roundup: Understanding, Detecting, and Disturbing Botnets. In Proceedings of the First Workshop on Steps to Reducing Unwanted Traffic on the Internet (July 2005).
[9] D EAN, J., AND GHEMAWAT, S. MapReduce: Simplified Data Processing on Large Clusters. In Proceedings of the Sixth Symposium on Operating System Design and Implementation (Dec 2004), pp. 137–150.
[10] EGELE, M., KRUEGEL, C., KIRDA, E., YIN, H., AND SONG, D. Dynamic Spyware Analysis. In Proceedings of the USENIX Annual Technical Conference (June 2007).
[11] FRANKLIN, J., PAXSON, V., PERRIG, A., AND SAVAGE, S. An Inquiry into the Nature and Causes of the Wealth of Internet Miscreants. In Proceedings of the ACM Conference on Computer and Communications Security (CCS) (October 2007).
[12] G U, G., PORRAS, P., YEGNESWARAN, V., FONG, M., AND LEE, W. BotHunter: Detecting Malware Infection through IDS-driven Dialog Correlation. In Proceedings of the 16th USENIX Security Symposium (2007), pp. 137–150.
[13] M ODADUGU, N. Web Server Software and Malware, June 2007. See http://googleonlinesecurity.blogspot.com/2007/06/web-server-software-and-malware.html.
[14] M OORE, D., VOELKER, G. M., AND SAVAGE, S. Inferring Internet Denial of Service Activity. In Proceedings of the 10th USENIX Security Symposium (Aug. 2001).
[15] M OSER, A., KRUEGEL, C., AND KIRDA, E. Exploring Multiple Execution Paths for Malware Analysis. In Proceedings of the 2007 IEEE Symposium on Security and Privacy (May 2007).
[16] R AJAB, M. A., ZARFOSS, J., MONROSE, F., AND TERZIS, A. A Multifaceted Approach to Understanding the Botnet Phenomenon. In Proceedings of ACM SIGCOMM/USENIX Internet Measurement Conference (IMC) (Oct., 2006), pp. 11–22.
[17] R AMACHANDRAN, A., FEAMSTER, N., AND DAGON, D. Revealing Botnet Membership using DNSBL Counter-Intelligence. In Proceedings of the 2nd Workshop on Steps to Reducing Unwanted Traffic on the Internet (SRUTI) (July 2006).
[18] The Route Views Project. See http://www.antc.uoregon.edu/route-views/.
[19] S EIFERT, C., STEENSON, R., HOLZ, T., BING, Y., AND DAVIS, M. A. Know Your Enemy: Malicious Web Servers. See http://www.honeynet.org/papers/mws/, August 2007.
[20] W ANG, Y.-M., BECK, D., JIANG, X., ROUSSEV, R., VERBOWSKI, C., CHEN, S., AND KING, S. Automated Web Patrol with Strider Honeymonkeys. In Proceedings of Network and Distributed Systems Security Symposium (2006), pp. 1–12.
[21] W ANG, Y.-M., NIU, Y., CHEN, H., BECK, D., JIANG, X., ROUSSEV, R., VERBOWSKI, C., CHEN, S., AND KING, S. Strider Honeymonkeys: Active, Client-Side Honeypots for Finding Malicious Websites. See http://research.microsoft.com/users/shuochen/HM.PDF.
[22] Y IN, H., SONG, D., EGELE, M., KRUEGEL, C., AND KIRDA, E. Panorama: Capturing System-wide Information Flow for Malware Detection and Analysis. In Proceedings of the 14th ACM Conference on Computer and Communication Security (October 2007).
[23] M OSHCHUK, A., BRAGIN, T., DEVILLE, D., GRIBBLE, S., AND LEVY, H. SpyProxy: Execution-based Detection of Malicious Web Content.
[24] P OLYCHRONAKIS, M., MAVROMMATIS, P., AND PROVOS, N. Ghost Turns Zombie: Exploring the Life Cycle of Web-based Malware. In Proceedings of the 1st USENIX Workshop on Large-Scale Exploits and Emergent Threats (LEET) (April 2008).
[25] P ROJECT, H., AND ALLIANCE, R. Know Your Enemy: Tracking Botnets, March 2007. See http://www.honeynet.org/papers/bots/.
[26] P ROVOS, N., MCNAMEE, D., MAVROMMATIS, P., WANG, K., AND MODADUGU, N. The Ghost in the Browser: Analysis of Web-based Malware. In Proceedings of the First USENIX Workshop on Hot Topics in Botnets (HotBots’07) (April 2007).

**Notes:**
1. Some compromised web servers trigger dialog windows asking users to manually download and run malware. This analysis considers only malware installs that require no user interaction.
2. This mapping is readily available at Google.
3. We consider a version as outdated if it is older than the latest corresponding version released by January 2007 (the start date for our data collection).
4. We restrict our analysis to Windows executables identified by searching for PE headers in each payload.