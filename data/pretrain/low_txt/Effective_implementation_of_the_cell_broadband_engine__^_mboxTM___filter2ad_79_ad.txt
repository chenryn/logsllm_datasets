### 6.3 Secure Main-processors

In XOM [16] and Cerium [5], secure and trusted software validates the integrity of each application whenever data is transferred to a CPU. When a CPU needs to send computed results back to the main memory, the secure and trusted software encrypts them before the data transfer. Both XOM and Cerium assume that secure and trusted software has the highest privilege level, as neither system trusts the commodity operating systems. To protect secure and trusted software from tampering (e.g., a DMA attack [19] that can directly attack the supervisory software), the entire program image must remain in the cache or local memory within the CPU, similar to our approach. However, [20] identified a security flaw in XOM, where hackers can use replay attacks against the encrypted data and instructions from a XOM processor.

AEGIS [22] is a system that realizes secure application loading through a secure boot. It also supports encrypted application execution, similar to the SPE isolation loader. Unlike our approach, AEGIS does not use a runtime secure boot. Instead, it embeds hash values of a runtime system, particularly for a secure small kernel, into the application image at build time. When an application is launched, secure and trusted software computes the current hash values of the running hypervisor, kernel, and the target application, then validates the target application by comparing the embedded hash values with the current ones. This method requires programmers to rebuild their applications every time security patches for the operating systems or hypervisors are released, as the hash values of those programs will change. In contrast, we establish a chain-of-trust with the runtime secure boot using a layered structure, eliminating the need for hash values of underlying software during the application build process.

In XOM, Cerium, and AEGIS, when secrets are transferred from the caches of a secure CPU to the main memory, secure and trusted software or hardware automatically encrypts them using hard-coded cryptographic algorithms. While this frees application programmers from handling secure secrets, it is difficult to change the encryption algorithms according to application requirements. In our approach, we allow application developers to program cryptographic algorithms for protecting secrets transferred from the isolated LS to the main memory, providing flexibility in programming secure applications. Our software stack also includes a high-performance cryptographic user library, the SPE cryptographic library [1], enabling developers to easily program secure DMA transfer functions.

TrustZone [25] is another solution in this category but differs significantly from the others. TrustZone adds a new privilege level to an ARM processor, creating both a secure domain and a non-secure domain within the same machine. The secure domain runs a secure kernel, secure device drivers, and secure applications, while the non-secure domain runs a traditional kernel, drivers, and applications. Access to secure domain resources from the non-secure domain is impossible due to hardware-level partitioning. In the secure domain, a secure boot is performed from the kernel layer to the application layer. The secure kernel, which loads secure applications, is validated only at system boot time. In contrast, the SPE isolation loader, which performs a similar role, is validated by the hardware every time an SPE secure application is launched. The primary difference between our work and TrustZone is that our isolation runtime modules separate the secure application domain from the supervisory software domain, ensuring no supervisory software runs in the same memory space as the secure application. This reduces the risk of third-party secure drivers or applications observing the behavior of a security-sensitive application or stealing secret data by exploiting security flaws.

### 7. Conclusion and Future Work

We have presented the detailed design and implementation of the SPE isolation loader, a component of the IBM SDK for Multicore Acceleration. The SPE isolation loader leverages the Cell/B.E. security features to make security practical, extensible, and portable. The coupling technique for the digital certificate and decryption key introduced in this paper addresses the substituted-ciphertext attack, preventing the exposure of secrets to unauthorized users with legitimate signing keys.

Performance measurements show that the SPE secure application load process, including RSA-2048 and AES-128 decryption, takes only 50 milliseconds, even for large applications. This overhead affects only the initial load; once the application is loaded, it can fully utilize all hardware resources, such as registers, LS, and channels, to achieve high performance. Our evaluation demonstrates the efficient and secure implementation of the SPE isolation loader. Replacing the RSA-2048 decryption with a more advanced algorithm like Elliptic Curve Cryptography (ECC) would enable a sign-then-encrypt policy, which is a future direction for our work.

Additionally, we have developed a code verification service by extending the SPE isolation loader's validation feature. This example shows the potential for realizing a virtual TPM or a virtual IBM 4758 co-processor in software. Although we focused on validation in this paper, our service can be extended to function as a cryptographic accelerator by integrating it with AES and RSA encryption/decryption in the SPU cryptographic library. For instance, a software-based secure cryptographic accelerator could encrypt all outgoing traffic from a cluster of machines or decrypt all incoming traffic, ensuring that cryptographic keys never leave the secure vault. We will explore such applications in future work.

### 8. Acknowledgments

The authors would like to thank the management team, development team, researchers, and architects for their support and guidance. Special thanks go to Mike Day, Peter Hofstee, Dan Brokenshire, Jeremy Kerr, Mark Nutter, Arnd Bergmann, Mike Kistler, Sally Tekulsky, Mike Perks, and Vladimir Zbarsky. This work would not have been possible without their contributions.

### 9. References

[1] SPE Cryptographic Library User Documentation Version 1.0. http://publib.boulder.ibm.com/infocenter/systems/scope/syssw/index.jsp?topic=/eicce/SPE_Libcrypto_API_v1.0.pdf&Open&S_TACT=105AGX16&S_CMP=HP.
[2] PowerXCell 8i Hardware Initialization Guide. http://www-01.ibm.com/chips/techlib/techlib.nsf/techdocs/53991AEE3346F21E0025751A0015539F/$file/PXC8i_HIG_V1.2_8Dec2008.pdf.
[3] AT97SC3203S SMBus Two-Wire Interface Summary. http://www.atmel.com/dyn/resources/prod_documents/5132s.pdf.
[4] Cell Broadband Engine Architecture Version 1.02. http://www-01.ibm.com/chips/techlib/techlib.nsf/techdocs/1AEEE1270EA2776387257060006E61BA/$file/CBEA_v1.02_11Oct2007_pub.pdf.
[5] Benjie Chen and Robert Morris. Certifying program execution with secure processors. In HOTOS’03: Proceedings of the 9th conference on Hot Topics in Operating Systems, pages 23–23, Berkeley, CA, USA, 2003. USENIX Association.
[6] Colin Percival. Cache missing for fun and profit. http://www.daemonology.net/papers/htt.pdf.
[7] Christian S. Collberg and Clark Thomborson. Watermarking, tamper-proofing, and obfuscation tools for software protection. IEEE TRANSACTIONS ON SOFTWARE ENGINEERING, 28(8):735–746, August 2002.
[8] Microsoft Corporation. Authenticode. http://technet.microsoft.com/en-us/library/cc750035.aspx.
[9] Don Davis. Defective sign & encrypt in S/MIME, PKCS#7, MOSS, PEM, PGP, and XML. http://world.std.com/~dtd/sign_encrypt/sign_encrypt7.html.
[10] B. Flachs, S. Asano, S. H. Dhong, H. P. Hofstee, G. Gervais, R. Kim, T. Le, P. Liu, J. Leenstra, J. Liberty, B. Michael, H.-J. Oh, S. M. Mueller, O. Takahashi, A. Hatakeyama, Y. Watanabe, and N. Yano. The microarchitecture of the streaming processor for a cell processor. In Proceedings of the IEEE International Solid-State Circuits Symposium, pages 184–185, February 2005.
[11] GNU Toolchain 4.1.1 and GDB for the Cell BE’s PPU/SPU. http://www.bsc.es/projects/deepcomputing/linuxoncell/.
[12] GNU GRand Unified Bootloader (GRUB). http://www.gnu.org/software/grub/grub.en.html.
[13] John L. Hennessy and David A. Patterson. Computer Architecture: A Quantitative Approach. Morgan Kaufmann Publishers, third edition, 2002.
[14] IBM SDK for Multicore Acceleration V3.1. http://www-03.ibm.com/technology/cell/swlib.html.
[15] Gene. H. Kim and Eugene. H. Spafford. Experiences with tripwire: Using integrity checkers for intrusion detection. In System Administration, Networking and Security Conference III, 1994.
[16] David Lie, Chandramohan Thekkath, Mark Mitchell, Patrick Lincoln, Dan Boneh, John Mitchell, and Mark Horowitz. Architectural support for copy and tamper-resistant software. In Proceedings of the 9th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-IX), pages 168–177, November 2000.
[17] Jonathan M. McCune, Bryan J. Parno, Adrian Perrig, Michael K. Reiter, and Hiroshi Isozaki. Flicker: An execution infrastructure for TCB minimization. In Eurosys ’08: Proceedings of the 3rd ACM SIGOPS/EuroSys European Conference on Computer Systems 2008, pages 315–328, New York, NY, USA, 2008. ACM.
[18] Microsoft NGSCB. http://www.microsoft.com/resources/ngscb/default.mspx.
[19] Peter Panholzer. Physical security attacks on Windows Vista. http://www.sec-consult.com/fileadmin/Whitepapers/Vista_Physical_Attacks.pdf, 2008.
[20] William Shapiro and Radek Vingralek. How to manage persistent state in DRM systems. In DRM ’01: Revised Papers from the ACM CCS-8 Workshop on Security and Privacy in Digital Rights Management, pages 176–191, London, UK, 2002. Springer-Verlag.
[21] Shimizu Kanna. The Cell Broadband Engine Processor Security Architecture. http://www-128.ibm.com/developerworks/power/library/pa-cellsecurity.
[22] G. Edward Suh, Dwaine Clarke, Blaise Gassend, Marten van Dijk, and Srinivas Devadas. The AEGIS processor architecture for tamper-evident and tamper-resistant processing. Technical Report LCS-TM-460, MIT Laboratory for Computer Science, February 2003.
[23] Trusted Computing Group. https://www.trustedcomputinggroup.org/specs/TPM/.
[24] Chenxi Wang, Jonathan Hill, John Knight, and Jack Davidson. Software tamper resistance: Obstructing static analysis of programs. Technical Report CS-2000-12, Dept. Computer Science, University of Virginia, Charlottesville, VA, USA, 2000.
[25] Peter Wilson, Alexandre Frey, Tom Mihm, Danny Kershaw, and Tiago Alves. Implementing Embedded Security on Dual-Virtual-CPU Systems. IEEE Des. Test, 24(6):582–591, 2007.
[26] Bennet Yee. Using secure coprocessors. PhD thesis, Carnegie Mellon University, May 1994.
[27] Xiaolan Zhang, Leendert van Doorn, Trent Jaeger, Ronald Perez, and Reiner Sailer. Secure coprocessor-based intrusion detection. In Proceedings of the 10th workshop on ACM SIGOPS European workshop: Beyond the PC, 2002.

**Trademarks and Copyrights:**
- Cell Broadband Engine is a trademark of Sony Computer Entertainment, Inc.
- IBM, POWER, Power Architecture, PowerPC, PowerXCell are trademarks of IBM Corporation in the United States, other countries, or both.
- Other company, product, or service names may be trademarks or service marks of others.