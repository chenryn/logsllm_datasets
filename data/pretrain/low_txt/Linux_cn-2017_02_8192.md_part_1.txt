---
author: Karl Matthias, Sean Kane
category: 技术
comments_data:
- date: '2017-02-11 10:37:22'
  message: OCI才是未来，用户无法自建和管理IMAES的DOCKER绝不是好OCI体系
  postip: 113.201.244.68
  username: 来自陕西安康的 Chrome 53.0|Windows 10 用户
- date: '2017-02-16 17:50:23'
  message: 有个Docker拼成了Docekr
  postip: 218.78.247.126
  username: 来自上海的 Chrome 55.0|Windows 7 用户
- date: '2017-02-16 18:16:26'
  message: 谢谢，马上改正~
  postip: 114.242.250.14
  username: linux [Chrome 56.0|Mac 10.11]
count:
  commentnum: 3
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 11087
date: '2017-02-11 09:04:00'
editorchoice: false
excerpt: 在2013年3月15日，于加利福尼亚州圣克拉拉举行的Python开发者大会上，dotCloud的创始人兼首席执行官Solomon Hykes在一次五分钟的闪电演讲中首次提出了Docker的概念。当时，仅有约40人（不包括dotCloud内部人员）有机会使用Docker。
fromurl: https://www.oreilly.com/learning/what-is-docker
id: 8192
islctt: true
largepic: /data/attachment/album/201702/10/220516f40nd8jcnj0c0bcf.jpg
permalink: /article-8192-1.html
pic: /data/attachment/album/201702/10/220516f40nd8jcnj0c0bcf.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 在2013年3月15日，于加利福尼亚州圣克拉拉举行的Python开发者大会上，dotCloud的创始人兼首席执行官Solomon Hykes在一次五分钟的闪电演讲中首次提出了Docker的概念。当时，仅有约40人（不包括dotCloud内部人员）有机会使用Docker。
tags:
- 容器
- Docker
thumb: false
title: Docker是什么？
titlepic: true
translator: Cathon
updated: '2017-02-11 09:04:00'
---

![](/data/attachment/album/201702/10/220516f40nd8jcnj0c0bcf.jpg)

> 这是一篇摘录，取自Karl Matthias和Sean P. Kane所著的《Docker即学即用》。其中可能包含一些引用到本文中没有的内容，因为那些是整本书的一部分。

2013年3月15日，在加利福尼亚州圣克拉拉召开的Python开发者大会上，dotCloud的创始人兼首席执行官Solomon Hykes在一次五分钟的[闪电演讲](http://youtu.be/wW9CAH9nSLs)中首次提出了Docker这一概念。当时，只有大约40人（不包括dotCloud内部人员）获得了使用Docker的机会。

随后几周内，有关Docker的消息迅速传播开来。不久之后，该项目在[Github](https://github.com/docker/docker)上开源，任何人都可以下载并为其做出贡献。几个月后，越来越多的业内人士开始听说Docker以及它如何彻底改变了软件开发、交付和运行的方式。不到一年的时间里，Docker几乎无人不知，但许多人仍不清楚Docker究竟是什么，为什么人们对它如此兴奋。

### Docker简介

Docker是一种工具，旨在简化任何应用程序的封装流程，使其能够被部署到各种规模的环境中，并将敏捷软件组织的工作流程和响应流水线化。

### Docker带来的希望

尽管表面上被视为一种虚拟化平台，但Docker远不止于此。它跨越了多个技术领域，包括KVM、Xen、OpenStack、Mesos、Capistrano、Fabric、Ansible、Chef、Puppet和SaltStack等。你可能已经注意到，在Docker的竞争产品列表中有一些非常值得关注的技术。例如，大多数工程师不会认为虚拟化产品和配置管理工具是竞争对手，但Docker与这两种技术都有一定的关系。这些技术因其提高了工作效率而受到广泛赞誉，从而引发了大量讨论。如今，Docker已成为过去十年间最广泛使用的技术之一。

如果你单独比较Docker与其各个领域的卫冕冠军的功能，Docker可能看起来只是一个普通的竞争对手。然而，Docker提供了一个广泛的功能集合，能够解决工作流程中的许多挑战。通过结合类似Capistrano和Fabric这样的易用的应用部署工具和易于管理的虚拟系统，Docker提供了强大的自动化和编排功能。

新技术层出不穷，因此对新事物保持一定程度的怀疑总是明智的。如果不深入了解，人们很容易误以为Docker只是另一种为开发者和运营团队解决具体问题的技术。如果仅仅将其视为一种虚拟化或部署技术，Docker似乎并不特别引人注目。但实际上，Docker比表面看起来强大得多。

即使在小型团队中，沟通和协作也常常是一个难题。而在当今世界，团队内部的有效沟通对于成功越来越重要。一个能够降低沟通复杂性、协助开发更健壮软件的工具无疑是一个巨大的成功。这正是Docker值得我们深入研究的原因。当然，Docker并非万能，其正确使用需要深思熟虑。不过，Docker确实能够解决一些组织层面的实际问题，并帮助公司更快地发布软件。精心设计的Docker工作流程可以使技术团队更加和谐，为组织创造实际收益。

### 公司面临的挑战

目前，很难按照预期的速度发布软件。随着公司从只有一两个开发人员发展到拥有多个开发团队，发布新版本时的沟通负担变得越来越重，难以管理。开发者必须了解软件所处环境的复杂性，生产运营团队也需要不断理解所发布软件的内部细节。虽然这些都是很好的技能，有助于更好地理解整个发布环境并促进软件的鲁棒性设计，但随着组织的成长，这些技能的扩展变得越来越困难。

充分了解所用环境的细节通常需要团队之间大量的沟通，而这并不能直接为团队创造价值。例如，为了发布版本1.2.1，开发人员要求运维团队升级特定库的过程会降低开发效率，也没有为公司创造价值。如果开发人员可以直接升级他们使用的库，编写代码，测试新版本，然后发布软件，那么整个交付过程的时间将显著缩短。如果运维人员无需与多个应用开发团队协调，就能在宿主系统上升级软件，那么效率将大大提高。Docker有助于在软件层面建立一层隔离，从而减轻团队的沟通负担。

除了有助于解决沟通问题，Docker的软件架构还鼓励开发出更健壮的应用程序。这种架构的核心是一次性的小型容器。在新版本部署时，旧版本应用的整个运行环境都会被丢弃。这意味着应用程序不会意外依赖于之前的遗留产物；对应用的短暂调试和修改也不会存在于未来的版本中；应用程序具有高度可移植性，因为所有状态要么直接包含在部署物中且不可修改，要么存储在数据库、缓存或文件服务器等外部依赖中。

因此，应用程序不仅具有更好的可扩展性，而且更加可靠。增减存储应用的容器实例数量对前端网站的影响很小。事实证明，这种架构对于非Docker化的应用程序也是成功的，但Docker本身包含了这种架构方式，使得Docker化的应用程序始终遵循这些最佳实践，这是一件好事。

### Docker工作流程的好处

很难一一列举Docker的所有好处。如果使用得当，Docker可以在多个方面为组织、团队、开发者和运维工程师带来帮助。从宿主系统的角度来看，所有应用程序的本质是一样的，因此Docker使架构选择变得更加简单。这也让工具的编写和应用程序之间的共享变得更加容易。虽然没有什么东西只有好处而没有挑战，但Docker似乎是一个例外。以下是一些使用Docker能够获得的好处：

**利用开发人员已掌握的技能打包软件**

> 许多公司为了管理各种工具来生成支持不同平台的软件包，不得不设立专门的软件发布和构建工程师岗位。像rpm、mock、dpkg和pbuilder等工具使用起来并不容易，每种工具都需要单独学习。而Docker则将所有需要的东西打包成一个文件，定义为一个Dockerfile。

**使用标准化的镜像格式打包应用程序及其所需的文件系统**

> 过去，不仅需要打包应用程序，还需要包含一些依赖库和守护进程等。然而，我们永远不能百分之百地保证，软件运行的环境是完全一致的。这就使得软件打包变得非常困难，许多公司也无法可靠地完成这项工作。常有类似的事情发生：使用Scientific Linux的用户试图部署一个仅在Red Hat Linux上经过测试的社区软件包，希望这个软件包足够接近他们的需求。如果使用Docker，则只需将应用程序及其依赖的每个文件一起部署即可。Docker的分层镜像使得这个过程更加高效，确保应用程序运行在预期的环境中。

**测试打包好的构建产物并将其部署到运行任意系统的生产环境**

> 当开发者将更改提交到版本控制系统时，可以构建一个新的Docker镜像，然后通过测试，部署到生产环境，整个过程中无需重新编译和重新打包。

---

通过这些改进，文本变得更加清晰、连贯和专业。希望这对你有所帮助！