### Introduction

This document presents an in-depth analysis of the performance and cost implications of tolerating malicious faults in an intrusion-tolerant group communication system. The study evaluates the overhead associated with various fault types, including single, double, and triple faults, and compares different detection mechanisms, such as time-outs and direct message examination.

### Figures and Analysis

#### Figure 4: Comparing gmp-reliable-total & gmp-reliable-total-dummy crypt stacks for different faults
- **(a) Single Fault: With and Without Cryptography**
- **(b) Double Faults: With and Without Cryptography**

**Observations:**
- For a given group size, the gap between the values for the two stacks (gmp-reliable-total and gmp-reliable-total-dummy crypt) is approximately the same under different combinations of double faults.
- This is because, for a particular combination of double faults, the number of messages exchanged (communication cost) is the same for both stacks.
- The increase in cost with increasing group size is more pronounced for the gmp-reliable-total stack than the gmp-reliable-total-dummy crypt stack, indicating that the cost associated with cryptography increases more steadily than communication costs as the group size increases.

#### Figure 5: Comparing the view installation times for single and double faults
- **Clusters of Curves:**
  - **Bottom Cluster:** Close to the curves for single faults; corresponds to combinations of double faults where fault detection does not rely on any time-outs.
  - **Middle Cluster:** Involves one time-out.
  - **Top Cluster:** Involves two time-outs.

**Observations:**
- The view installation times for the bottom cluster are higher than those for single faults because they include the time to detect the additional fault and the time for one transitional view.
- The difference in values between different combinations of double faults in the bottom cluster is small, as changing the phase of the transitional view in which the second fault is activated has minimal impact.
- The middle and top clusters involve time-outs for fault detection, with the top cluster having the highest times due to the full time-out needed to detect the second fault during the transitional view.

#### Figure 6: Variation of view installation time with load (single crash fault)
- **Replicas per Host:**
  - One replica per host
  - Two replicas per host
  - Three replicas per host

**Observations:**
- For the same group size, the communication cost associated with the view installation is the same in all three cases.
- The differences in view installation times for the gmp-reliable-total stack are mainly due to the differences in time needed to complete cryptographic operations, which become more significant with increasing group sizes.
- This highlights that cryptographic overheads will be significantly greater when computing power is at a premium.

#### Figure 7: Effect of using time-outs for fault detection in transitional views
- **Clusters of Curves:**
  - **Top Cluster:** Two transitional views, both using time-outs.
  - **Middle Cluster:** Two transitional views, but with just one time-out.
  - **Lower Cluster:** No time-outs.

**Observations:**
- If not for the time-outs, the time taken for the other parts of the view installation is about the same in all cases.
- The view installation time for a group size of 10 for the single-fault case differs from that for the triple-faults case (which does not involve any time-outs) by about 1 second, due to the additional time to detect two additional faults.

### Summary of Results

- **Overhead for Tolerating Malicious Faults:**
  - The overhead for tolerating malicious faults due to intrusions is significant compared to the overhead for tolerating benign faults like crashes.
  - Detection mechanisms based on time-outs are slower than those based on direct examination of message content or patterns.
  - Fine-tuning time-outs to account for current network load and host load can reduce latency and the possibility of excluding members who are genuinely suffering resource shortages.
  - Cryptographic operations account for a larger percentage of the cost of tolerating malicious faults than communication does.

### Conclusion

This paper provides an extensive study of the cost incurred when tolerating malicious faults due to intrusions, under both fault and fault-free conditions. The results show that the cost of removing corrupt members depends on the detection mechanism and the phase of recovery in which multiple faults occur. The most significant contributor to the cost was public key cryptography, especially under loaded conditions and for large group sizes. Specialized hardware, faster machines, or symmetric cryptography could be used to reduce the overall cost. These results are useful for application and protocol designers to structure distributed applications and build better intrusion-tolerant group communication systems.

### Acknowledgments

We would like to thank other members of the ITUA project, including Michael Atighetchi, David Corman, Jeanna Gossett, Chris Jones, Joe Loyall, Partha Pal, Paul Rubel, Richard Schantz, Ron Watro, and Franklin Webber, for many useful discussions. We are grateful to Jenny Applequist for helping us to improve the readability of the paper.

### References

[1] Flaviu Cristian and Christof Fetzer, “The Timed Asynchronous Distributed System Model,” IEEE Transactions on Parallel and Distributed Systems, Vol. 10, No. 6, pp. 642-657, 1999
[2] Michael K. Reiter, “The Rampart Toolkit for Building High-integrity Services,” Lecture Notes in Computer Science, Vol. 938, pp. 99-110, 1995
[3] Michael K. Reiter, “Secure Agreement Protocols: Reliable and Atomic Group Multicast in Rampart,” Proceedings of the 2nd ACM Conference on Computer and Communications Security, pp. 68-80, 1994
[4] Michael K. Reiter, “A Secure Group Membership Protocol,” Proceedings of the IEEE Symposium on Research in Security and Privacy, pp. 176-189, 1994
[5] HariGovind V. Ramasamy, “Group Membership Protocol for an Intrusion-Tolerant Group Communication System,” MS Thesis, University of Illinois at Urbana-Champaign, 2002
[6] Prashant Pandey, “Reliable Delivery and Ordering Mechanisms for an Intrusion-Tolerant Group Communication System,” MS Thesis, University of Illinois at Urbana-Champaign, 2001
[7] Michel Cukier, James Lyons, Prashant Pandey, HariGovind V. Ramasamy, William H. Sanders, Partha Pal, Franklin Webber, Richard Schantz, Joseph Loyall, Ron Watro, Michael Atighetchi, and Jeanna Gossett, “Intrusion Tolerance Approaches in ITUA,” FastAbstract in Supplement of the 2001 International Conference on Dependable Systems and Networks, pp. B64-B65, 2001
[8] Brian Matt, Brian Niebuhr, David Sames, Gregg Tally, Brent Whitmore, and David Bakken, “Intrusion Tolerant CORBA Architectural Design,” Technical Report 01-007, NAI Labs, 2001
[9] Paulo Veríssimo, Nuno Ferreira Neves, and Miguel Correia, “The Middleware Architecture of MAFTIA: A Blueprint,” Technical Report DI/FCUL TR 00-6, Department of Computer Science, University of Lisbon, 2000
[10] Miguel Castro and Barbara Liskov, “Practical Byzantine Fault Tolerance,” Third Symposium on Operating Systems Design and Implementation (OSDI ’99), 1999
[11] Miguel Castro and Barbara Liskov, “Authenticated Byzantine Fault Tolerance Without Public-Key Cryptography,” Technical Memo MIT/LCS/TM-589, MIT Laboratory for Computer Science, June 1999
[12] Kim Potter Kihlstrom, Louise E. Moser, and P. Michael Melliar-Smith, “The SecureRing Protocols for Securing Group Communication,” Proceedings of the 31st IEEE Hawaii International Conference on System Sciences, pp. 317-326, 1998
[13] Mark Hayden, “Ensemble Reference Manual,” Cornell University, 2001
[14] Peter Gutmann, “Cryptlib Security Toolkit,” April 2001
[15] Fred Schneider, “Implementing Fault-Tolerant Services Using the State Machine Approach: A Tutorial,” ACM Computing Surveys, Vol. 22, No. 4, 1990
[16] Kenneth P. Birman, Building Secure and Reliable Network Applications, Manning, 1996

Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 04:28:00 UTC from IEEE Xplore. Restrictions apply.