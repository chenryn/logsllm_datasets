# Extending the Java Virtual Machine to Enforce Fine-Grained Security Policies in Mobile Devices

**Authors:**
- Iulia Ion
- Boris Dragovic
- Bruno Crispo

**Affiliations:**
- Iulia Ion, Boris Dragovic: Create-Net, Trento, Italy
- Bruno Crispo: University of Trento, Italy

**Contact:**
- Email: [EMAIL]

**Date:**
- November 14, 2007

## Abstract

The growth of the mobile applications and services market is currently hindered by the lack of a flexible and reliable security infrastructure. The development and adoption of a new generation of mobile applications depend on the end user's ability to manage system security and control application behavior effectively. The virtual execution environment for mobile software and services should support the security needs of both users and applications. This paper proposes an extension to the security architecture of the Java Virtual Machine (JVM) for mobile systems, enabling fine-grained policy specification and runtime enforcement. Access control decisions are based on system state, application and system history data, as well as request-specific parameters. The prototype implementation, running on both desktops (as an emulator) and mobile devices, demonstrates high flexibility and security with excellent performance.

## 1. Introduction

Mobile computing and communication technology have advanced significantly over the past decade. New mobile devices with enhanced capabilities are frequently released, and modern smartphones now possess more computing power than PCs from 15 years ago. Consequently, rich mobile services such as email, schedulers, contact synchronization, and scaled-down versions of productivity software have become increasingly common, especially in the business sector. Market analysts predict substantial growth in the mobile services and application development market in the coming years.

However, the prevailing security model on mobile platforms lacks the flexibility required to support this market expansion. The current trust model is binary: trusted applications are granted all requested rights, while untrusted ones are completely locked out. To be considered trusted, an application must carry a valid certificate issued by the platform provider or network operator, which limits third-party developers' access to the market. Additionally, current security models do not support fine-grained, user-defined security policies, such as controlling the number of SMS messages sent or limiting an application's bandwidth usage.

This paper addresses these limitations by proposing an extended security architecture and policy model for mobile computing platforms. Our work focuses on the Java 2 Micro Edition (J2ME), one of the most widely used virtual machine execution environments for mobile devices. We introduce xJ2ME, an extended version of J2ME, which enables the runtime enforcement of more expressive and fine-grained security policies. Initial evaluations show no significant performance overheads. The main contributions of this paper are:

- Analysis of the limitations of the current J2ME and its inflexible security model.
- Proposal of fine-grained security policies for mobile devices and methods for their specification.
- Design of an extended J2ME security architecture to enforce fine-grained policies at runtime.
- Demonstration of the flexibility, portability, and excellent performance of the solution through a running prototype.

The rest of the paper is organized as follows: Section 2 provides a motivating example, Section 3 reviews related work, Section 4 gives an overview of the Java architecture and its security model, Section 5 describes our proposed solution, Section 6 introduces the policy language, Section 7 presents the implementation, Section 8 evaluates the prototype, and Section 9 concludes with future work.

## 2. Motivation

To illustrate the limitations of the existing security model for mobile applications and clarify the motivation for our work, consider the following scenario:

Alice is traveling in her new car, which is equipped with an infotainment system (GPS navigator, multimedia services, etc.) connected via a UMTS connection. As she enters Florence, her mobile phone detects a tourist guide service provided by the local tourist information office. If Alice allows her mobile phone to connect to the service and download the corresponding applet, the navigation system will display historical sites, restaurants, and wineries in the area, along with additional information.

However, the attestation service of her trusted computing platform does not recognize the applet's signature and sandboxes it, rendering it useless. Frustrated, Alice forces the platform to treat the applet as a trusted application and enjoys the tourist sites. Later, she discovers that the applet not only retrieved the necessary information but also downloaded numerous pictures, causing excessive and costly network bandwidth consumption. In areas without direct UMTS connectivity, the applet used the expensive Multimedia Messaging Service (MMS) to transfer information.

Although the technology for advanced use-cases is available, the lack of trust and security for mobile services makes complex applications impractical. The execution environment should allow users to control application behavior on a finer grain. Examples of such security policies include:
- Limiting SMS messages to specific phone numbers and capping daily costs.
- Restricting international calls and premium-rate data connections.
- Capping UMTS traffic per session.
- Setting maximum MMS messages per unit of time.

Our proposed solution not only allows users to define their own policies for each application but also provides fine-grained behavior control. We achieve this by defining a suitable policy model and extending the J2ME security architecture to support flexible runtime policy evaluation and enforcement.

## 3. Related Work

The two most widely deployed mobile execution environments are .NET and Java frameworks. .NET is supported only by Windows-based platforms, limiting the portability of applications. In contrast, Java applications are more portable.

In the .NET framework, application code is translated into Common Language Runtime (CLR) and executed under the security policies of the underlying operating system. The security policy is usually set by the service provider, and changing it requires a special agreement, effectively locking out small developers. The Windows Mobile Security Model has three permission tiers: Privileged, Normal, and Blocked. However, it offers no mechanisms for fine-grained access control.

In the Java framework, flexible security models have received considerable attention, but few efforts have targeted mobile platforms. Hashii et al. [2] introduced a dynamic security policy infrastructure for mobile programs, but they did not address resource constraints. Pandey et al. [3] used binary editing for fine-grained access control, but their approach targets server-side mobile programs and is not suitable for resource-constrained environments.

Bauer et al. [4] proposed the Polymer language and system, which supports the definition and composition of complex runtime security policies. However, Polymer requires bytecode rewriting, which is too resource-intensive for mobile platforms. Paal [5] and Ghosh and Swaminatha [6] have examined the security capabilities and risks in mobile e-commerce, but they do not propose solutions.

With Java 2 Standard Edition, alternative Security Managers can be used, but the J2ME security architecture is not extensible and does not support this functionality. No work has been done on fine-grained security policy specification and monitoring for J2ME.

We discuss policy enforcement through runtime monitoring, which leaves the target application intact and imposes no significant performance overheads. Alternative approaches, such as static code analysis and inline reference monitors, are either insufficient for dynamic, context-dependent behavior or require modifications to the target application.

## 4. Java Security Architecture

### 4.1 Java Architecture Overview

Java technologies are divided into three editions: Enterprise Edition (J2EE), Standard Edition (J2SE), and Micro Edition (J2ME). Each edition caters to different deployment platforms. J2EE supports multi-tier enterprise applications, J2SE provides for basic Java applications, and J2ME is targeted at resource-constrained environments like PDAs and mobile phones. At the bottom of each edition lies a Virtual Machine runtime environmentâ€”JVM for J2EE and J2SE, and KVM and Card VM for highly constrained platforms.

J2ME defines configurations and profiles to support various target platforms. The two main configurations are Connected Device Configuration (CDC) and Connected Limited Device Configuration (CLDC). CDC targets high-end mobile devices, while CLDC is aimed at highly constrained consumer devices. The layer above CLDC is the Mobile Information Device Profile (MIDP), which defines API libraries for developing specific types of applications. Applications running on top of MIDP are called MIDlets, and they are bundled in MIDlet suites, consisting of a JAR file and a Java Application Descriptor (JAD) file.

### 4.2 J2SE Security Architecture

The fundamental concept in the Java security architecture is the sandbox, which represents an execution environment with strict, policy-based resource access control and strong isolation properties. Code executing within a sandbox is associated with a protection domain, which determines the permission set granted to the application.

Protection domains and permissions are the basic elements of the Java 2 security architecture. Protection domains allow groups of classes and instances to be associated with a set of permissions to resources on the host platform. Permissions specify whether access to a JVM resource is granted or denied. The Java security policy defines protection domains for the Java runtime environment, and the policy file entries specifying permissions are referred to as grant entries. J2SE users and administrators can fully configure the policy file, including defining permissions and domains.

The trust model in Java 2 distinguishes between trusted and untrusted applications. Trusted applications are code stored on the local file system and generally run unrestricted, though they may also be associated with a policy. Untrusted applications (applets and remote code) are always subject to the security policy. Since JDK 1.1, remote applications with verified signatures are considered trusted.

### 4.3 J2ME Security Architecture

Due to the limited capabilities of devices running J2ME, the security architecture has been simplified. While this solves resource consumption issues, it results in a less flexible and more restrictive security model. The J2ME security architecture does not support custom Security Managers, and users cannot extend or customize predefined security policies. This paper addresses these limitations by extending the J2ME security architecture to support fine-grained, user-defined security policies.