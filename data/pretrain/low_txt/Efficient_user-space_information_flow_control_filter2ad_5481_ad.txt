### References

1. **Gérard Boudol**. *Secure Information Flow as a Safety Property*. In *Formal Aspects in Security and Trust*, edited by Pierpaolo Degano, Joshua D. Guttman, and Fabio Martinelli. Volume 5491 of *Lecture Notes in Computer Science*, pages 20–34. Springer, 2008.

2. **Deepak Chandra and Michael Franz**. *Fine-Grained Information Flow Analysis and Enforcement in a Java Virtual Machine*. Pages 463–475, December 2007.

3. **Stephen Chong and Andrew C. Myers**. *Security Policies for Downgrading*. In *CCS '04: Proceedings of the 11th ACM Conference on Computer and Communications Security*, pages 198–209. New York, NY, USA, 2004. ACM.

4. **Dorothy E. Denning**. *A Lattice Model of Secure Information Flow*. *Communications of the ACM*, 19(5):236–243, 1976.

5. **Dorothy E. Denning and Peter J. Denning**. *Certification of Programs for Secure Information Flow*. *Communications of the ACM*, 20(7):504–513, 1977.

6. **Brendan Eich**. *Narcissus – JS Implemented in JS*. Available at: http://mxr.mozilla.org/mozilla/source/js/narcissus/.

7. **J. S. Fenton**. *Memoryless Subsystems*. *The Computer Journal*, 17(2):143–147, 1974.

8. **Robert Bruce Findler**. *Behavioral Software Contracts*. PhD thesis, Rice University, 2002.

9. **Cédric Fournet and Tamara Rezk**. *Cryptographically Sound Implementations for Typed Information-Flow Security*. In *Symposium on Principles of Programming Languages*, pages 323–335, 2008.

10. **Andreas Gal, Brendan Eich, Mike Shaver, David Anderson, Blake Kaplan, Graydon Hoare, David Mandelin, Boris Zbarsky, Jason Orendorff, Michael Bebenita, Mason Chang, Michael Franz, Edwin Smith, Rick Reitmaier, and Mohammad Haghighat**. *Trace-Based Just-In-Time Type Specialization for Dynamic Languages*. In *Conference on Programming Language Design and Implementation*, 2009.

11. **Joseph A. Goguen and Jose Meseguer**. *Security Policies and Security Models*. *IEEE Symposium on Security and Privacy*, 0:11, 1982.

12. **Kathryn E. Gray, Robert Bruce Findler, and Matthew Flatt**. *Fine-Grained Interoperability through Mirrors and Contracts*. In *OOPSLA '05: Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications*, pages 231–245, 2005.

13. **Vivek Haldar, Deepak Chandra, and Michael Franz**. *Dynamic Taint Propagation for Java*. In *ACSAC*, pages 303–311. IEEE Computer Society, 2005.

14. **Nevin Heintze and Jon G. Riecke**. *The SLAM Calculus: Programming with Secrecy and Integrity*. In *Symposium on Principles of Programming Languages*, pages 365–377, 1998.

15. **Dave King, Boniface Hicks, Michael Hicks, and Trent Jaeger**. *Implicit Flows: Can’t Live with ‘Em, Can’t Live Without ‘Em*. In *International Conference on Information Systems Security*, pages 56–70, 2008.

16. **Monica S. Lam, Michael Martin, V. Benjamin Livshits, and John Whaley**. *Securing Web Applications with Static and Dynamic Information Flow Tracking*. In *ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation*, edited by Robert Glück and Oege de Moor, pages 3–12. ACM, 2008.

17. **Gurvan Le Guernic, Anindya Banerjee, Thomas Jensen, and David Schmidt**. *Automata-Based Confidentiality Monitoring*. 2006. URL: http://hal.inria.fr/inria-00130210/en/.

18. **Pasquale Malacaria and Han Chen**. *Lagrange Multipliers and Maximum Information Leakage in Different Observational Models*. In *ACM SIGPLAN Workshop on Programming Languages and Analysis for Security*, pages 135–146, 2008.

19. **John McLean**. *Proving Noninterference and Functional Correctness Using Traces*. *Journal of Computer Security*, 1(1):37–58, 1992.

20. **Andrew C. Myers**. *JFlow: Practical Mostly-Static Information Flow Control*. In *Symposium on Principles of Programming Languages*, pages 228–241, 1999.

21. **Andrew C. Myers and Barbara Liskov**. *A Decentralized Model for Information Flow Control*. In *Symposium on Operating System Principles*, pages 129–142, 1997.

22. **Kevin R. O’Neill, Michael R. Clarkson, and Stephen Chong**. *Information-Flow Security for Interactive Programs*. In *IEEE Computer Security Foundations Workshop*, pages 190–201. IEEE Computer Society, 2006.

23. **François Pottier and Vincent Simonet**. *Information Flow Inference for ML*. *Transactions on Programming Languages and Systems*, 25(1):117–158, 2003.

24. **Andrei Sabelfeld and Andrew C. Myers**. *Language-Based Information-Flow Security*. *Selected Areas in Communications, IEEE Journal on*, 21(1):5–19, January 2003.

25. **Tachio Terauchi and Alexander Aiken**. *Secure Information Flow as a Safety Problem*. In *SAS*, edited by Chris Hankin and Igor Siveroni, volume 3672 of *Lecture Notes in Computer Science*, pages 352–367. Springer, 2005.

26. **V. N. Venkatakrishnan, Wei Xu, Daniel C. DuVarney, and R. Sekar**. *Provably Correct Runtime Enforcement of Non-Interference Properties*. In *Information and Communications Security*, pages 332–351, 2006.

27. **Philipp Vogt, Florian Nentwich, Nenad Jovanovic, Engin Kirda, and Christopher Kruegel**. *Cross-Site Scripting Prevention with Dynamic Data Tainting and Static Analysis*. February 2007. URL: http://www.infosys.tuwien.ac.at/Staff/ek/papers/xss_prevention.pdf.

28. **Dennis Volpano, Cynthia Irvine, and Geoffrey Smith**. *A Sound Type System for Secure Flow Analysis*. *Journal of Computer Security*, 4(2-3):167–187, 1996.

29. **Stephan Arthur Zdancewic**. *Programming Languages for Information Security*. PhD thesis, Ithaca, NY, USA, 2002. Chair: Andrew C. Myers.

30. **Lantian Zheng and Andrew C. Myers**. *Securing Nonintrusive Web Encryption through Information Flow*. In *ACM SIGPLAN Workshop on Programming Languages and Analysis for Security*, pages 125–134, 2008.

### Theorem 2 (Non-Interference for Sparse Labeling)

**Restatement**: If 
\[ \sigma_1 \approx_H \sigma_2 \]
\[ \theta_1 \sim_{pc}^H \theta_2 \]
\[ \sigma_1, \theta_1, e \downarrow_{pc} \sigma' \]
\[ \sigma_2, \theta_2, e \downarrow_{pc} \sigma'' \]
\[ \sigma' \approx_H \sigma'' \]
\[ v_1 \sim_{pc}^H v_2 \]

**Proof**: By induction on the derivation \(\sigma_1, \theta_1, e \downarrow_{pc} \sigma', v_1\) and case analysis on the last rule used in that derivation. Note that any derivation via the [S-APP] rule can be derived via the [S-APP-SLOW] rule, and similarly for the other [. . . -SLOW] rules. We assume without loss of generality that both evaluations are via the [. . . -SLOW] rules whenever possible.

- **[S-CONST]**: Then \(e = c\) and \(\sigma' = \sigma_1\), \(\sigma'' = \sigma_2\), \(v_1 = v_2 = c\).

- **[S-VAR]**: Then \(e = x\) and \(\sigma' = \sigma_1\), \(\sigma'' = \sigma_2\), \(v_1 = \theta_1(x) \sim_{pc}^H \theta_2(x) = v_2\).

- **[S-FUN]**: Then \(e = \lambda x. e'\) and \(\sigma' = \sigma_1\), \(\sigma'' = \sigma_2\), \(v_1 = (\lambda x. e', \theta_1) \sim_{pc}^H (\lambda x. e', \theta_2) = v_2\).

- **[S-APP-SLOW]**: In this case, \(e = (e_a \, e_b)\). From the antecedents of this rule, we have:
  \[ \sigma_i, \theta_i, e_a \downarrow_{pc} \sigma''_i, \theta_i, e_b \downarrow_{pc} \sigma'''_i \]
  \[ \sigma''_i, \theta'_i, e'[x := v'_i] \downarrow_{pc} \sigma''_i, v''_i \]
  \[ v_i = \langle k_i \rangle_{pc} v''_i \]
  By induction:
  \[ \sigma''_1 \approx_H \sigma''_2 \]
  \[ \sigma'''_1 \approx_H \sigma'''_2 \]
  \[ (\lambda x. e_1)k_1 \sim_{pc}^H (\lambda x. e_2)k_2 \]
  \[ v''_1 \sim_{pc}^H v''_2 \]
  If \(k_1\) and \(k_2\) are both at least \(H\) (with respect to \(pc\)), then \(v_1 \sim_{pc}^H v_2\), since they both have label at least \(H\).
  By Lemma 10, \(\sigma''_1 \approx_H \sigma''_2\), and we need to conclude that \(\sigma' \approx_H \sigma''\).
  We know that \(\text{dom}(\sigma''_i) \supseteq \text{dom}(\sigma'''_i)\), since execution only allocates additional reference cells. Without loss of generality, we assume that the two executions allocate reference cells from disjoint parts of the address space, i.e.:
  \[ (\text{dom}(\sigma''_i) \setminus \text{dom}(\sigma'''_i)) \cap \text{dom}(\sigma''_{2-i}) = \emptyset \]
  Under this assumption, the only common addresses in \(\sigma''_1\) and \(\sigma''_2\) are also the common addresses in \(\sigma'''_1\) and \(\sigma'''_2\), and hence we have that \(\sigma' \approx_H \sigma''\).
  If \(k_1\) and \(k_2\) are not both at least \(H\) (with respect to \(pc\)), then \(\theta'_1 \sim_{pc}^H \theta'_2\), \(e_1 = e_2\), and \(k_1 = k_2\).
  By induction, \(\sigma''_1 \approx_H \sigma''_2\) and \(v''_1 \sim_{pc}^H v''_2\), and hence \(v_1 \sim_{pc}^H v_2\).

- **[S-PRIM-SLOW]**: This case holds via a similar argument.

- **[S-REF]**: In this case, \(e = \text{ref } e'\). Without loss of generality, we assume that both evaluations allocate at the same address \(a \notin \text{dom}(\sigma_1) \cup \text{dom}(\sigma_2)\), and so \(a = v_1 = v_2\).
  From the antecedents of this rule, we have:
  \[ \sigma_i, \theta_i, e' \downarrow_{pc} \sigma''_i, v'_i \]
  \[ \sigma' = \sigma''_i[a := v'_i] \]
  By induction, \(\sigma''_1 \approx_H \sigma''_2\) and \(v'_1 \sim_{pc}^H v'_2\), and hence \(\sigma' \approx_H \sigma''\).

- **[S-DEREF-SLOW]**: In this case, \(e = !e'\), and from the antecedents of this rule, we have:
  \[ \sigma_i, \theta_i, e' \downarrow_{pc} \sigma', v_i = \langle k_i \rangle_{pc} \sigma'(a) \]
  By induction, \(\sigma' \approx_H \sigma''\) and \(a k_1 \sim_{pc}^H a k_2\).
  If \(k_1\) and \(k_2\) are both at least \(H\) (with respect to \(pc\)), then \(v_1 \sim_{pc}^H v_2\), since they both have label at least \(H\).
  Otherwise, \(a_1 = a_2\) and \(k_1 = k_2\) and \(\sigma'(a) \sim_{k_1}^H \sigma''(a)\). By Lemma 9, \(\sigma'(a) \sim_{\text{label}(a)}^H \sigma''(a)\). By Lemma 7, \(\sigma'(a) \sim_{\text{label}(a)}^H \sigma''(a)\), and so by Lemma 8, \(v_1 \sim_{pc}^H v_2\).

- **[S-ASSIGN-SLOW]**: In this case, \(e = (e_a := e_b)\), and from the antecedents of this rule, we have:
  \[ \sigma_i, \theta_i, e_a \downarrow_{pc} \sigma''_i, \theta_i, e_b \downarrow_{pc} \sigma'''_i \]
  \[ m_i = \text{label}(a_i) \]
  \[ (pc \sqcap k_i) \sqsubseteq \text{label}_{m_i}(\sigma'''_i(a_i)) \]
  \[ \sigma' = \sigma'''_i[a_i := \langle pc \sqcap k_i \rangle_{m_i} v_i] \]
  By induction:
  \[ \sigma''_1 \approx_H \sigma''_2 \]
  \[ \sigma'''_1 \approx_H \sigma'''_2 \]
  \[ v_1 \sim_{pc}^H v_2 \]
  If \(a k_1 = a k_2\), then let \(l = m_1 = m_2\). By Lemma 8, \(\langle pc \rangle_l v_1 \sim_l \langle pc \rangle_l v_2\), and hence \(\sigma' \approx_H \sigma''\).
  Otherwise, \(H \sqsubseteq k_i \sqsubseteq \text{label}_{m_i}(\sigma'''_i(a_i))\). Hence \(\sigma' \approx_H \sigma''\).

This completes the proof.