### 5.4 Avoiding the Contamination Effect

When an update is initiated by process \( P \), at time \( a \), the Timely Computing Base (TCB) of \( P \) is informed of a new timed action that must terminate within a specified Time-to-Failure Detection (TTFD) interval to ensure the timing specification \( TA \). The TCB of \( P \) disseminates the TTFD specification to all other TCBs. Simultaneously, replicas \( RA \) and \( RB \) receive and process the update request. When \( RB \) completes the write operation, it issues an `endDistAction()` call (not shown in Figure 3), still before the deadline. The handler in \( RB \) will not be executed because the operation is completed on time.

However, if replica \( RA \) does not finish the operation within the specified TTFD interval, a timing failure occurs at time \( e \). The timed completeness property ensures that this failure will be detected by all TCBs within the maximum TTFD interval from \( e \), which is consistent with the application's assumed interval \( TA \).

The guaranteed and timely execution of the handler is the final step required to disable the inconsistent replica \( RA \). This handler can perform simple actions, such as changing the state of a variable in the server to prevent further queries from being processed. When process \( Q \) sends a query to replica \( RA \), it will no longer receive a response. Only the correct replica \( RB \) will respond to the query, ensuring that \( Q \) receives a valid reply.

Before concluding this section, it is important to note that this paper intentionally avoids focusing on implementation details or specific protocols for the TCB. These aspects are not necessary to understand the generic approach to timing fault tolerance introduced here. For more detailed information, readers can refer to several papers that address these practical and concrete issues [6, 4, 5].

### 5.5 Reintegration of Failed Replicas

To prevent system contamination, a late replica must be removed from the set of available replicas. However, if the faulty write interaction eventually terminates, the state of the affected replica will become consistent with the states of the other replicas [1]. This requires disabled replicas to continue receiving and processing updates until they become temporally consistent again.

Figure 4 illustrates the generic replica management using the TFD service interface. We argue that this reintegration procedure can be generalized with the availability of a timing failure detector. The transition from a temporally consistent to an inconsistent state is triggered by the detection of a timing failure. In Figure 4, two timed actions corresponding to write interactions performed by processes \( P \) and \( Q \) on a replica \( R \) are shown. Both actions incur timing failures (detected before \( TA \)), leading to periods of inconsistency until the actions finally terminate. The second write operation (W2) is delayed by the first one, causing a cascading inconsistency effect. The transition back to a consistent state is triggered by the indication of action termination, for example, through the `endDistAction()` TFD interface function.

### 6. Reviewing Related Work

Several works address various aspects of timing fault tolerance. We distinguish between techniques that prevent or avoid timing failures and those that allow failures to occur but provide means to detect and tolerate them. The former often involve resource availability, scheduling, allocation, and execution control strategies, which are part of synchronous system models. Our focus is on the latter, which require partially synchronous models.

From a system model perspective, timing fault tolerance requires explicit consideration of timing failures in the fault model to devise appropriate solutions. The fail-awareness concept [12] introduced in the Timed Asynchronous system model [10] is useful for designing timed services that are always aware of their timeliness and can switch to a safe or degraded mode upon a timing failure. Applying this paradigm in the context of the Timed Asynchronous model raises potentially difficult or unsolvable problems, particularly in constructing a useful timing failure detector for enforcing temporal consistency and coverage stability.

To our knowledge, the first work explicitly addressing timing fault tolerance using replication was presented in [1]. This work proposes a solution in the Quasi-Synchronous system model [22], based on a TFD service integrated with a group management system. The TFD observes messages among group members and detects timing failures, while the group management system uses timely information from the TFD to remove faulty replicas. Although not generic, this approach has advantages in efficiency due to the embedded communication semantics in the TFD/group management protocols.

In contrast, the work in [16] focuses on achieving adequate coverage for assumed timing bounds using a replicated server, but does not address server updates. The work in [17] considers server updates and allows specifying consistency requirements during operations, but still lacks the ability to specify timeliness constraints for updates. Our work is more generic, addressing both read and write interactions and showing how to maintain temporally consistent replicas despite timing failures.

### 7. Conclusions

This paper introduces a paradigm for generic timing fault tolerance with a replicated state machine. Unlike existing related work, which addresses the problem partially or with ad-hoc techniques, we reason in generic terms and identify fundamental requirements for a complete solution. We demonstrate how the TCB model provides an adequate framework for timing fault tolerance and describe the interface functions for solving contamination and coverage stability. A key aspect of our work is the definition of timed completeness and accuracy properties, which characterize the TCB timing failure detector.

We believe our work can serve as an important reference for future research in timing fault tolerance, particularly for studies requiring the use of timing failure detectors.

### References

[1] C. Almeida and P. Veríssimo. Using light-weight groups to handle timing failures in quasi-synchronous systems. In Proceedings of the 19th IEEE Real-Time Systems Symposium, pages 430–439, Madrid, Spain, Dec. 1998.

[2] K. P. Birman. Replication and fault tolerance in the ISIS system. In Proceedings of the 10th ACM Symposium on Operating Systems Principles, pages 79–86, Dec. 1985.

[3] A. Burns. A Framework for Building Real-time Responsive Systems. In Proceedings of the 1st International Workshop on Responsive Computer Systems, pages 6–9, Golfe-Juan, France, Oct. 1991. ONR/INRIA.

[4] A. Casimiro, P. Martins, and P. Veríssimo. How to Build a Timely Computing Base using Real-Time Linux. In Proc. of the 2000 IEEE Workshop on Factory Communication Systems, pages 127–134, Porto, Portugal, Sept. 2000.

[5] A. Casimiro, P. Martins, P. Veríssimo, and L. Rodrigues. Measuring distributed durations with stable errors. In Proceedings of the 22nd IEEE Real-Time Systems Symposium, pages 310–319, London, UK, Dec. 2001.

[6] A. Casimiro and P. Veríssimo. Timing failure detection with a Timely Computing Base. In Proceedings of the European Research Seminar on Advances in Distributed Systems, Madeira Island, Portugal, Apr. 1999.

[7] A. Casimiro and P. Veríssimo. Using the Timely Computing Base for dependable QoS adaptation. In Proceedings of the 20th IEEE Symposium on Reliable Distributed Systems, pages 208–217, New Orleans, USA, Oct. 2001.

[8] T. Chandra and S. Toueg. Unreliable failure detectors for reliable distributed systems. Journal of the ACM, 43(2):225–267, Mar. 1996.

[9] F. Cristian, H. Aghili, R. Strong, and D. Dolev. Atomic broadcast: From simple message diffusion to Byzantine agreement. Information and Computation, 118(1):158–179, Apr. 1995.

[10] F. Cristian and C. Fetzer. The timed asynchronous distributed system model. IEEE Transactions on Parallel and Distributed Systems, pages 642–657, June 1999.

[11] C. Fetzer and F. Cristian. A fail-aware datagram service. In Proc. of the 2nd Workshop on Fault-Tolerant Parallel and Distributed Systems, Geneva, Switzerland, Apr. 1997.

[12] C. Fetzer and F. Cristian. Fail-awareness: An approach to construct fail-safe applications. In Digest of Papers, The 27th Annual International Symposium on Fault-Tolerant Computing, pages 282–291, Seattle, Washington, USA, June 1997.

[13] F. Jahanian. Fault tolerance in embedded real-time systems. Lecture Notes in Computer Science, 774:237–249, 1994.

[14] H. Kopetz. Real-Time Systems. Kluwer Academic Publishers, 1997.

[15] H. Kopetz, R. Zainlinger, G. Fohler, H. Kantz, P. Puschner, and W. Schutz. An engineering approach towards hard real-time system design. Lecture Notes in Computer Science, 550:166–188, 1991.

[16] S. Krishnamurthy, W. Sanders, and M. Cukier. A dynamic replica selection algorithm for tolerating time faults in a replicated service. In Proceedings of the International Conference on Dependable Systems and Networks, pages 107–116, Goteborg, Sweden, June 2001.

[17] S. Krishnamurthy, W. Sanders, and M. Cukier. An adaptive framework for tunable consistency and timeliness using replication. In Proceedings of the International Conference on Dependable Systems and Networks, Washington D.C., USA, June 2002.

[18] D. Powell. Failure mode assumptions and assumption coverage. In Digest of Papers, The 22nd Annual International Symposium on Fault-Tolerant Computing, pages 386–395, Boston, USA, July 1992.

[19] F. B. Schneider. The state machine approach: A tutorial. In Fault–Tolerant Distributed Computing, Lecture Notes in Computer Science, pages 18–41, 1987.

[20] F. Torres-Rojas, M. Ahamad, and M. Raynal. Timed consistency for shared distributed objects. In Proceedings of the 18th Annual ACM Symposium on Principles of Distributed Computing, pages 163–172, Atlanta, Georgia, USA, 1999.

[21] P. Veríssimo. Ordering and timeliness requirements of dependable real-time programs. Journal of Real-Time Systems, 7(2):105–128, Sept. 1994.

[22] P. Veríssimo and C. Almeida. Quasi-synchronism: a step away from the traditional fault-tolerant real-time system models. Bulletin of the TCOS, 7(4):35–39, Winter 1995.

[23] P. Veríssimo and A. Casimiro. The Timely Computing Base model and architecture. Transactions on Computers - Special Issue on Asynchronous Real-Time Systems, 2002, To appear. A preliminary version of this document appeared as Technical Report DI/FCUL TR 99-2, Department of Computer Science, University of Lisboa, Apr 1999.

[24] P. Veríssimo, A. Casimiro, and C. Fetzer. The Timely Computing Base: Timely actions in the presence of uncertain timeliness. In Proceedings of the International Conference on Dependable Systems and Networks, pages 533–542, New York, USA, June 2000.

[25] P. Veríssimo and L. Rodrigues. Distributed Systems for System Architects. Kluwer Academic Publishers, 2001.

---

**Proceedings of the International Conference on Dependable Systems and Networks (DSN’02)  
0-7695-1597-5/02 $17.00 © 2002 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 04:22:41 UTC from IEEE Xplore. Restrictions apply.**