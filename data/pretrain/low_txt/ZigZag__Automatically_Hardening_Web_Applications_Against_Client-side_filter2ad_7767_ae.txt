### DOM-based XSS
DOM-based Cross-Site Scripting (XSS) is a security vulnerability that occurs when a web application includes untrusted data in the Document Object Model (DOM) without proper validation or sanitization. The system employs dynamic taint analysis to identify vulnerable program points and verifies them by generating exploits. DexterJS then infers benign DOM templates to create patches that can mitigate such exploits.

### JavaScript Code Instrumentation
Proxy-based instrumentation frameworks, such as those proposed in [23] and [14], have been used to enhance the security of JavaScript code. JavaScript can be considered self-modifying code because a running program can generate input code for its own execution. This characteristic makes complete instrumentation before execution impossible, as writes to the code cannot be fully covered. Therefore, programs must be instrumented before execution, and all subsequent writes to the program code must be processed through separate instrumentation steps.

### Anomaly Detection
Anomaly detection has found wide application in security research. For instance, Daikon [13] is a system that can infer likely invariants using machine learning at runtime. Daikon supports multiple programming languages and can also be applied to arbitrary data, such as CSV files. In ZigZag, we extended Daikon with new invariants specific to JavaScript applications for runtime enforcement.

DIDUCE [24] is another tool that instruments Java bytecode and builds hypotheses during execution. When violations to these hypotheses occur, they can either be relaxed or raise an alert. DIDUCE can help in tracking down bugs in programs semi-automatically.

### Manual Quantitative Testing
Given the complexity of interactions and functionality in web applications, we augmented automated tests with manual quantitative testing. Testers familiar with the websites used the instrumented version, and we performed live instrumentation using a proxy-based prototype.

For YouTube and Vimeo, testers browsed the sites and watched multiple videos, including pausing, resuming, and restarting at different positions. Facebook was tested by scrolling through several timelines and using the chat functionality in a group setting. Testers also posted to a timeline and deleted posts. For Google Docs, testers created and edited a document, closed it, and re-opened it. For d3.js, testers opened several example visualizations and verified that they ran correctly. Finally, testers sent and received emails with Gmail and live.com.

In all cases, no enforcement violations were detected when running the instrumented version of these web applications.

### Related Work
#### Client-side Validation Vulnerabilities
CSV vulnerabilities were first highlighted by Saxena et al. [3]. They proposed FLAX, a framework that combines dynamic taint analysis and fuzzing into taint-enhanced blackbox fuzzing. The system operates in two steps: translating JavaScript programs into a simplified intermediate language called JASIL, and then executing the JavaScript application to dynamically identify data flows from untrusted sources to critical sinks. These data flows are processed into small executable programs called acceptor slices, which are then fuzzed to find exploitable inputs.

Later, the same authors improved FLAX by replacing the dynamic taint analysis with a dynamic symbolic execution framework [4]. The goal remains to find unchecked data flows from inputs to critical sinks, though this method provides no completeness and can miss vulnerabilities.

The main difference between ZigZag and FLAX is that FLAX focuses on detecting vulnerabilities, while ZigZag aims to defend against unknown vulnerabilities.

#### ClearView
ClearView [25] uses a modified version of Daikon to create patches for high-availability binaries based on learned invariants. The system detects and prevents memory corruption by changing the program code at runtime. However, the embedded monitors do not extend to detecting errors in program logic.

#### Swaddler
Swaddler [10] addresses attacks on the workflow of PHP applications. It can detect attacks that do not produce external behavior by instrumenting the execution environment and generating models representative of benign runs. Swaddler operates in three modes: training, detection, and prevention. During training, profiles for each basic block are generated, and probability values are assigned to establish a level of "normality." In detection and prevention mode, an anomaly score is calculated based on the probability of the execution data being normal.

While Swaddler focuses on the server component, ZigZag characterizes client-side behavior and can protect against cross-domain attacks within browsers. ZigZag uses a dynamic level of granularity based on the types of sinks in the program, reducing enforcement overhead.

#### Client-side Policy Enforcement
ICESHIELD [26] is a policy enforcement tool that adds JavaScript code before other content, invoking it by the browser before other code is executed. ICESHIELD protects users from drive-by downloads and exploit websites. In contrast, ZigZag performs online invariant detection and prevents previously unknown attacks.

ConScript [27] allows developers to create fine-grained security policies. Conscript can generate rules from static analysis on the server and by inspecting dynamic behavior on the client. However, it requires modifications to the JavaScript engine, which ZigZag aims to avoid.

#### Content Security Policy (CSP)
CSP [29, 11] restricts JavaScript execution directly in the browser. If applied correctly, CSP can prevent significant classes of code injection in web applications. However, CSP does not defend against general CSV attacks, making it complementary to ZigZag. CSP can be highly useful in preventing code injection and protecting the integrity of ZigZag in the browser.

#### Web Standards
Barth et al. [30] made the HTML5 postMessage API more secure, but analysis suggests it is often used insecurely. Son et al. [9] showed that 84 of the top 10,000 websites were vulnerable to CSV attacks due to broken origin authentication or lack of authentication. Their proposed defenses rely on modifying websites or the browser.

In ZigZag, we aim for a fine-grained, automated, annotation-free approach that dynamically secures applications against unknown CSV attacks in an unmodified browser.

### Conclusion
Most websites rely on JavaScript to improve the user experience. With new HTML5 communication primitives like postMessage, inter-application communication in the browser is possible. However, these APIs are not subject to the same origin policy and can be vulnerable to CSV attacks due to software bugs. Server-side security measures are ineffective in detecting and preventing these client-side attacks.

ZigZag is an approach to automatically defend benign-but-buggy JavaScript applications against CSV attacks. It leverages dynamic analysis and anomaly detection to learn and enforce statistically-likely, security-relevant invariants. Based on these invariants, ZigZag generates assertions enforced at runtime. ZigZag's design inherently protects against unknown vulnerabilities by enforcing learned, benign behavior. Runtime enforcement is carried out only on the client-side code and does not require modifications to the browser.

ZigZag can be deployed by website operators or third parties. Website owners can secure their JavaScript applications by replacing them with a ZigZag-hardened version, protecting all users. Third parties can deploy ZigZag using a proxy that automatically hardens any website visited, protecting all users of the proxy.

We evaluated ZigZag using real-world web applications, including complex examples like online word processors and video portals. Our evaluation shows that ZigZag can successfully instrument complex applications and prevent attacks without impairing functionality. Additionally, it does not incur an unreasonable performance overhead, making it suitable for real-world usage.

### Acknowledgements
This work was supported by the Office of Naval Research (ONR), the Army Research Office (ARO), the Department of Homeland Security (DHS), the National Science Foundation (NSF), and SBA Research. We thank the anonymous reviewers for their helpful comments and the Marshall Plan Foundation for partial support.

### References
[1] Internet World Stats, “Usage and Population Statistics,” http://www.internetworldstats.com/stats.htm, 2013.
[2] N. Jovanovic, C. Kruegel, and E. Kirda, “Pixy: A Static Analysis Tool for Detecting Web Application Vulnerabilities (Short Paper),” in IEEE Symposium on Security and Privacy (Oakland), 2006.
[3] P. Saxena, S. Hanna, P. Poosankam, and D. Song, “FLAX: Systematic Discovery of Client-side Validation Vulnerabilities in Rich Web Applications,” in ISOC Network and Distributed System Security Symposium (NDSS), 2010.
[4] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, “A Symbolic Execution Framework for JavaScript,” in IEEE Symposium on Security and Privacy (Oakland), 2010.
[5] D. Crockford, “JSLint: The JavaScript Code Quality Tool,” April 2011, http://www.jslint.com/.
[6] M. Samuel, P. Saxena, and D. Song, “Context-sensitive Auto-sanitization in Web Templating Languages using Type Qualifiers,” in ACM Conference on Computer and Communications Security (CCS), 2011.
[7] M. S. Miller, M. Samuel, B. Laurie, I. Awad, and M. Stay, “Safe Active Content in Sanitized JavaScript,” Google, Inc., Tech. Rep., 2008.
[8] S. Maffeis and A. Taly, “Language-based Isolation of Untrusted JavaScript,” in IEEE Computer Security Foundations Symposium, 2009.
[9] S. Son and V. Shmatikov, “The Postman Always Rings Twice: Attacking and Defending postMessage in HTML5 Websites,” in ISOC Network and Distributed System Security Symposium (NDSS), 2013.
[10] M. Cova, D. Balzarotti, V. Felmetsger, and G. Vigna, “Swaddler: An Approach for the Anomaly-based Detection of State Violations in Web Applications,” in International Symposium on Recent Advances in Intrusion Detection (RAID), 2007.
[11] “Content Security Policy 1.1,” 2013. [Online]. Available: https://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-specification.dev.html
[12] G. F. Cretu, A. Stavrou, M. E. Locasto, S. J. Stolfo, and A. D. Keromytis, “Casting out Demons: Sanitizing Training Data for Anomaly Sensors,” in IEEE Symposium on Security and Privacy (Oakland), 2008.
[13] M. D. Ernst, J. H. Perkins, P. J. Guo, S. McCamant, C. Pacheco, M. S. Tschantz, and C. Xiao, “The Daikon System for Dynamic Detection of Likely Invariants,” Science of Computer Programming, 2007.
[14] H. Kikuchi, D. Yu, A. Chander, H. Inamura, and I. Serikov, “JavaScript Instrumentation in Practice,” in Asian Symposium on Programming Languages and Systems (APLAS), 2008.
[15] F. Groeneveld, A. Mesbah, and A. van Deursen, “Automatic Invariant Detection in Dynamic Web Applications,” Delft University of Technology, Tech. Rep., 2010.
[16] “Closure Compiler,” 2013. [Online]. Available: https://developers.google.com/closure/compiler
[17] “ctemplate - Powerful but simple template language for C++,” 2013. [Online]. Available: https://code.google.com/p/ctemplate/
[18] “Handlebars.js: Minimal Templating on Steroids,” 2007. [Online]. Available: http://handlebarsjs.com/
[19] “Squid Internet Object Cache,” http://www.squid-cache.org, 2005.
[20] A. Klein, “DOM Based Cross Site Scripting or XSS of the Third Kind,” Web Application Security Consortium, Articles, 2005.
[21] B. Stock, S. Lekies, T. Mueller, P. Spiegel, and M. Johns, “Precise Client-side Protection against DOM-based Cross-Site Scripting,” USENIX Security Symposium, 2014.
[22] I. Parameshwaran, E. Budianto, S. Shinde, H. Dang, A. Sadhu, and P. Saxena, “Auto-Patching DOM-based XSS At Scale,” Foundations of Software Engineering (FSE), 2015.
[23] D. Yu, A. Chander, N. Islam, and I. Serikov, “JavaScript Instrumentation for Browser Security,” in Principles of Programming Languages (POPL), 2007.
[24] S. Hangal and M. S. Lam, “Tracking Down Software Bugs Using Automatic Anomaly Detection,” in International Conference on Software Engineering (ICSE), 2002.
[25] J. H. Perkins, S. Kim, S. Larsen, S. Amaras-inghe, J. Bachrach, M. Carbin, C. Pacheco, F. Sherwood, S. Sidiroglou, G. Sullivan et al., “Automatically Patching Errors in Deployed Software,” in ACM Symposium on Operating Systems Principles (SIGOPS), 2009.
[26] M. Heiderich, T. Frosch, and T. Holz, “ICESHIELD: Detection and Mitigation of Malicious Websites with a Frozen DOM,” in International Symposium on Recent Advances in Intrusion Detection (RAID), 2011.
[27] L. A. Meyerovich and B. Livshits, “Conscript: Specifying and Enforcing Fine-grained Security Policies for JavaScript in the Browser,” in IEEE Symposium on Security and Privacy (Oakland), 2010.
[28] R. Chugh, J. A. Meister, R. Jhala, and S. Lerner, “Staged Information Flow for JavaScript,” in ACM Sigplan Notices, 2009.
[29] S. Stamm, B. Sterne, and G. Markham, “Reining in the Web with Content Security Policy,” in International Conference on World Wide Web (WWW), 2010.
[30] A. Barth, C. Jackson, and J. C. Mitchell, “Securing Frame Communication in Browsers,” Communications of the ACM, 2009.