# Fuzzing Linux with Xen
## DEF CON 29
### Tamas K Lengyel

---

**Disclaimer:**
- Performance may vary based on use, configuration, and other factors. For more information, visit [www.Intel.com/PerformanceIndex](http://www.Intel.com/PerformanceIndex).
- Performance results are based on testing as of the dates shown in configurations and may not reflect all publicly available updates.
- See the backup for configuration details. No product or component can be absolutely secure.
- This document does not grant any license (express or implied, by estoppel or otherwise) to any intellectual property rights.
- Intel does not control or audit third-party data. You should consult other sources to evaluate accuracy.
- Intel disclaims all express and implied warranties, including but not limited to the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade.
- Your costs and results may vary.
- Intel technologies may require enabled hardware, software, or service activation.
- © Intel Corporation. Intel, the Intel logo, and other Intel marks are trademarks of Intel Corporation or its subsidiaries. Other names and brands may be claimed as the property of others.

---

## Who Am I?
Tamas K Lengyel, @tklengyel

---

## tl;dr
- We fuzzed the device-facing input points of several Linux drivers.
- We developed new tools to achieve this.
- We open-sourced these tools.
- We discovered and fixed numerous bugs.
- This presentation will show you how we did it.

---

## Feedback Fuzzers
Feedback fuzzers are not just about feeding random input to your target. They:
- Monitor the target execution.
- Collect execution logs (coverage).
- Compare execution from run-to-run.
- Focus on new code paths when discovered.

### Determinism
- Feedback fuzzers require deterministic behavior.
- If the target code behaves differently between executions due to factors other than the fuzzer, the feedback will be noisy.

---

## Xen VM Forking
To add determinism to kernel-code execution:
- Reset vCPU registers and free copied pages for better speed.
- **Parent VM:**
  - Page X
  - Page Y
  - Page Z
- **Fork VM:**
  - Shared Page X
  - Copied Page Y
  - Shared Page Z

### VM Forking Speed
- VM fork creation time: ~745 μs (approximately 1300 VMs/s)
- VM fork reset time: ~111 μs (approximately 9000 resets/s)
- Measured on i5-8350U

---

## Xen VMI
Xen VM introspection is natively supported, allowing:
- Read/write/translate guest memory.
- Pause vCPU and get notifications in dom0 for various hardware events (e.g., CPUID, Int3, MTF, EPT faults, register writes).

---

## Xen VMtrace
- Upstreamed in Xen 4.15.
- In collaboration with CERT.pl and Citrix.
- Uses Intel® Processor Trace to record VM execution.
- The CPU stores execution information in memory with low overhead.
- Records only enough detail to allow for post-execution reconstruction.
- Can record the execution of the entire VM.

---

## Fuzzing on Xen
- **Parent VM:**
  - Magic CPUID
- **Fuzz VM:**
  - Add 0xCC
  - Read input from AFL
  - Write it to VM’s memory
  - Reset
  - Catch a breakpoint
  - Report crash
  - Catch Magic CPUID
  - Report no-crash
  - Neither: timeout
- **Analyze:**
  - Decode IPT log
  - Report coverage
- **Fork:**
  - Run
  - Fuzz

---

## More to Fuzzing
- Analysis
- Fuzzing
- Triaging

---

## DMA
- Memory made accessible to a device for fast I/O operations.
- IOMMU can restrict device access to only DMA pages.
- Finding where Linux reads from DMA isn’t trivial.
  - Use __iomem, be{16/32/64}_to_cpu, le{16/32/64}_to_cpu, dma_addr_t.
  - Cross-reference with ftrace output.

### Reading the Spec
- [Intel Extensible Host Controller Interface (USB XHCI)](https://www.intel.com/content/www/us/en/products/docs/io/universal-serial-bus/extensible-host-controler-interface-usb-xhci.html)

---

## Triaging
- Cannot simply "log in and gather logs."
  - No network
  - No disk
  - No console
- The dmesg buffer of Linux is in RAM.
  - We can extract it!

### Xen GDBSX
- Ships with Xen since 2009.
- Minimal gdb bridge.
- Build Linux with:
  - CONFIG_DEBUG_INFO=y
  - CONFIG_GDB_SCRIPTS=y
  - CONFIG_FRAME_POINTER=y
  - CONFIG_UNWINDER_FRAME_POINTER=y
  - CONFIG_RANDOMIZE_BASE=n

### Beyond Basic Triaging
- Gathering the dmesg log has been sufficient for most bugs.
- Not all bugs can be triaged this way.
- The sink may get triggered by code far away from the driver.

### Example
- Bug triggers in `net/core/dev.c`, not in IGB itself.

### Buggy Code vs. Fixed Code
- **Buggy Code:**
  - [Code snippet]
- **Fixed Code:**
  - [Code snippet]

### Bugs Found and Fixed
- 9 NULL-pointer dereferences
- 3 array index out-of-bounds
- 2 infinite loops in IRQ handler
- 2 user-memory accesses

### Doublefetch Detection
- Remove R/W EPT permission of DMA page.
- Byte-granularity.
- Look for page fault with read access at the same page and offset twice.
- Report crash to AFL.
- Initially thought to be rare, but it occurs frequently.
- Happens due to different bits used in the same byte.
- Stopping execution at the first detection is not practical.

### Mission Accomplished?
- Did we discover all DMA input points?
- Documenting all the bugs was time-consuming.
- Manually reviewing code has its limits.
- Let's do better!

### DMAMonitor
- Standalone EPT fault monitoring.
- Hooks function entry and return with int3.
- Logs all code sites that read from any DMA.

### Challenges
- Sometimes the data isn't used where DMA is accessed.
- Tracking data flow manually is error-prone and tedious.

### Full-VM Taint Analysis
- Tracks tainted data propagation in the kernel.
- Records kernel execution using VMtrace.
- Replays recorded instruction stream in Triton DBI’s taint engine.
- Checks where RIP gets tainted.
- Can find code locations affected by DMA input anywhere.

### Open-Source Code
- Released under MIT license.
- [GitHub Repository](https://github.com/intel/vmtaint)

### VM Transplantation
- Getting some targets working in a Xen VM can be challenging.
- Solution:
  - VM forks need only CPU state and memory.
  - Take a snapshot on QEMU/KVM/Simics.
  - Load it up on Xen.
  - Fuzz away!

### What's Next?
- Automation
- Capture system state using Intel® DCI.
- Fuzz BIOS/SMM.
- Fuzz bare-metal systems.
- Sandsifter ring0.
- Nested virtualization support.

### Things We Didn't Cover
- Fuzzing other operating systems.
- Fuzzing Xen.
- Fuzzing userspace.
- Fuzzing black-box binaries.
- Fuzzing malware.

### Thanks
- Special thanks to everyone who contributed and made this work possible!
- Intel IAGS & CCG, Google ChromeOS team, Citrix, CERT.pl, and the wider open-source security community.
- [GitHub Repositories](https://github.com/intel/kernel-fuzzer-for-xen-project)
- [GitHub Repositories](https://github.com/intel/vmtaint)

### Questions? Comments?
- @tklengyel