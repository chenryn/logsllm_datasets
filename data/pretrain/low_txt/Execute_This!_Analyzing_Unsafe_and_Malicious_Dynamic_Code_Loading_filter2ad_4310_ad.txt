### Analysis of Vulnerabilities in Top 50 Free Applications

**Vulnerability Distribution:**
- 10 (20%)
- 11 (22%)
- 24 (48%)
- 31 (62%)
- 2 (4%)
- 0
- 0
- 7 (14%)
- n/a
- 8 (16%)

**Comparison of Top 50 Free Applications:**
When comparing the top 50 free applications from May 2012 (Table II) with those from August 2013 (Table III), a concerning trend emerges. In November 2012, only 3 out of the top 50 applications were found to be vulnerable. By August 2013, this number had increased to 8 out of 50. All reported vulnerabilities were confirmed through manual analysis. Further investigation revealed that most vulnerabilities are due to the use of frameworks. For example, several top 50 applications utilize frameworks that allow testers to install beta versions of the applications. These frameworks download beta versions as APKs to the device's external storage, which is writable by any application with the appropriate permission. This makes it possible for any application on the device to replace the benign APK with malicious code.

**Key Findings:**
- Applications marked as vulnerable by our tool contain vulnerable code, but the tool does not guarantee that the code is executed on all devices and in the default configuration.
- Users must participate in developers' beta-testing programs for the applications to exhibit vulnerable behavior.
- Despite this, we found sufficient evidence that many applications are vulnerable even in the default configuration and on any device, as demonstrated by the sample exploits in Section V-B.

**Manual Analysis:**
We manually analyzed some of the current top 50 applications that use code-loading techniques but were not flagged as vulnerable by our tool (Table III). The detection tool is conservative in classifying applications as vulnerable, so the reported numbers can be interpreted as a lower bound. Three of the manually analyzed applications use a framework developed by a large application store provider and Android device manufacturer. These applications contain stub code to load the framework, which is installed as a separate application. The code identifies the application by its package name, making them potentially vulnerable to attacks similar to those described in Section V-B2, thus increasing the real number of vulnerabilities above the conservative estimate of our tool.

### Exploits Against Vulnerable Applications

**1. Self-Update of an Advertisement Framework:**
This example demonstrates a code injection attack against a benign application, specifically a game with between five and ten million installations on Google Play. The game includes an advertisement framework that updates itself via the Internet. When the application starts, it checks for new versions and downloads them if available. The connection uses HTTP instead of HTTPS, allowing an attacker to provide a bogus update. An attacker can tamper with DNS resolution or execute a man-in-the-middle attack to serve a custom file. The application does not verify the source of the downloaded code, only checking an MD5 hash for transmission errors. We provided a custom APK and matching MD5 hash, which the application loaded without detection. This exploit works against any application using the framework, and according to AppBrain, the framework is included in 0.78% of all applications on Google Play and 3.21% of the top 500 applications.

**2. Bootstrapping Mechanism of a Shared Framework:**
This exploit targets applications that load code locally without verifying its integrity. The target application, based on a framework by a well-known company in web and multimedia technologies, allows developers to create applications for multiple platforms. The Android version of the runtime is installed as a standalone application, and the loading code does not verify the integrity of the loaded application. We installed a custom application with the required package name and expected class on a test device. When launching an application based on the framework, it loads our application, executing our code. This exploit works against any application built on the framework up to the version published in June 2013. According to AppBrain, the framework is used in 2.13% of all applications on Google Play and 2.81% of the top 500 applications.

### Design of the Protection System

**High-Level Overview:**
The proposed protection system adds a mandatory verification mechanism to Android, ensuring that all code loaded by an application is approved by a trusted authority. Different application verifiers analyze applications according to custom criteria and issue signatures for benign applications. Users can choose which verifiers to trust, providing flexibility and security. This approach decouples application verification from application stores, ensuring equal security for all applications regardless of the store distributing them.

**Detecting Attempts to Load Code:**
In Java applications, externally loaded code must be loaded by the Java runtime environment, providing an opportunity to impose integrity checks. Our system modifies the Dalvik VM to check the integrity of code whenever an application requests it. This approach prevents applications from bypassing checks using reflection. Native code poses a challenge, but we detect and enforce integrity checks on native libraries by hooking the interface in Dalvik. Verification services are responsible for ensuring that the native-code part of an application does not load additional code.

By implementing these measures, we aim to mitigate the risks associated with dynamic code loading and enhance the overall security of Android applications.