### Optimized Text

To derive their state, participants need to access only a few recent full blocks and search for AnonBoot-related OP_RETURN transactions. The number of blocks required depends on the pulse length \( L_p \), the validity period of single peer advertisements, and the maximum lifespan of bootstrapped anonymity networks. Even if these services remain active indefinitely (as discussed in Section 5.2), new users can start synchronizing from recent blocks and discover older services in the background. After this initial synchronization, participants actively monitor the host blockchain for new AnonBoot messages. This overhead is negligible for Bitcoin, as new blocks are mined every ten minutes [48].

However, the potentially slow block creation interval introduces unavoidable delays in bootstrapping new anonymity services. Services are created only once a pulse’s spawn block has been mined (see Figure 5). For example, with a pulse length of \( L_p = 12 \) blocks and a negotiation phase of \( L_N = 3 \) blocks on Bitcoin, privacy peers have at most 30 minutes to solve their PoW puzzle, but in the worst case, users may have to wait up to 2 hours until their requested anonymity service starts bootstrapping. Despite this, our relevant use cases, such as shuffling networks and cryptocurrency tumblers, are sufficient to bootstrap a service. Scalability then depends on the upper-layer protocol used and is independent of AnonBoot.

Next, we briefly consider the costs associated with fees when privacy peers and users publish their OP_RETURN transactions to leverage Bitcoin’s consensus properties. As of March 8, 2020, the recommended fee is 6 satoshi per byte (1 satoshi = \(10^{-8} \) BTC) [17], and Bitcoin’s market price is around $9,067 [9]. Therefore, a peer advertisement currently costs an operator approximately $0.17. AnonBoot can amortize this cost through larger pulse lengths while keeping the negotiation phase, for example, over multiple days.

**Takeaway:** Our analysis shows that AnonBoot can bootstrap over 100 services from a peer repository of size 1,000, serving potentially thousands of users, and can scale well beyond this size with only a small impact on Bitcoin as its host blockchain.

### 8. Related Work

The bootstrapping problem and Sybil attacks are inherent in distributed protocols. In 2007, Knoll et al. [21] surveyed different approaches to finding entry points for established peer-to-peer networks, including bootstrapping nodes through a distributed host system like IRC [21]. Orthogonally, Levine et al. [25] reviewed approaches to mitigate Sybil attacks. Among these, only resource testing and recurring costs and fees are applicable to fully decentralized systems without further assumptions. Recurring costs, such as periodic PoW-based refreshments of eligibility, are a familiar building block in the field of blockchain sharding [22, 27, 53], where responsibilities to verify proposed transactions are distributed among full nodes over time to improve scalability. AnonBoot adapts this Sybil-resistant mechanism in the form of peer advertisements to securely bootstrap distributed anonymity services. In line with Knoll et al. [21], we publish these periodic advertisements through a public blockchain as AnonBoot’s host system and trust anchor. This choice reduces the coordination complexity in AnonBoot, as blockchains already offer a distributed means to reach a consensus of state.

Recently, Lee et al. [24] proposed that ISPs could provide privacy services, such as address hiding or VPN tunneling. This work is orthogonal to our approach, as AnonBoot bootstraps services without relying on a dedicated central operator. AnonBoot can also help users increase their privacy against the ISP itself. As one of its applications, AnonBoot realizes a decentralized directory service for anonymity networks like Tor. Similar contributions were made by other works, such as NISAN [36] or ShadowWalker [33]. However, while both proposals prevent adversarial bias, they do not feature AnonBoot’s protection against Sybil attacks. Furthermore, these approaches do not address the challenges of heterogeneous privacy peers, such as Tor nodes with different exit policies. AnonBoot introduces capabilities in its peer advertisements to overcome this shortcoming. While approaches to realize sticky data policies on how to handle user privacy [37] are related to our specification of peer capabilities, even highly compressed policies such as provided by CPPL [19] may exceed our space limitations, especially when relying on Bitcoin’s OP_RETURN transactions to operate AnonBoot. Although CPPL may facilitate simple peer capabilities, more complex instances, such as Tor relay descriptors, require manual capability abstractions.

**Figure 8:** AnonBoot scales to thousands of messages per pulse with only a small impact on Bitcoin as its exemplary host blockchain, even for constrained per-block capacities.

Anonymity networks are latency-tolerant and sometimes deliberately stretch their operation over time to further increase the level of achieved privacy [55]. If more timely service utilization is required, users can consider services valid for longer periods, thereby reducing the impact of the one-time overhead. In this case, users must trade off delays against security, as longer validity periods devalue the protection offered by periodic PoW puzzles.

Contrarily, local peer selection depends on individual user decisions and only requires knowing a recent valid state of the peer repository. Full synchronization up to the most recent pulse is desirable but not required. Users can instantly sample privacy peers based on their current state, ensuring that AnonBoot preserves the low-latency requirement of anonymity networks.

**Takeaway:** We conclude that AnonBoot (a) has low synchronization overhead, (b) introduces feasible latencies for bootstrapping anonymity services, and (c) supports instant local peer selection.

### 7.2 Small Blockchain Footprint and Low Costs

We now show that AnonBoot realizes lightweight service discovery (G2) by assessing its impact on the host blockchain. We measure the blockchain footprint of AnonBoot using Bitcoin’s regression test mode. As discussed in Section 4.2, the per-block capacity \( c \) helps to trade off how much transaction bandwidth AnonBoot consumes and the duration \( L_N \) of the negotiation phase.

In Figure 8, we illustrate how the minimal required \( L_N \) grows depending on the number of used AnonBoot messages and the capacity \( c \). On average, an OP_RETURN transaction for one peer advertisement or user request has a size of 307 bytes and a weight of 901 WU (weight units). Since the introduction of Segregated Witnesses, the notation of block weight (limit 4 million WU) has superseded the old measure of block size (limit 1 MB) [8]. For our measurements, we fill Bitcoin blocks while respecting the allowed capacity \( c \). Our results reveal that AnonBoot easily scales to large peer repositories and user bases with only a small footprint on Bitcoin. When using a per-block capacity of only 10%, AnonBoot can support up to 10,000 messages during a negotiation phase with \( L_N = 23 \).

Peer repositories of size 1,000, which are already sufficiently secure as demonstrated in Section 6.2, have a negligible impact on Bitcoin: For a small capacity of only 5% to account for Bitcoin’s low overall transaction throughput, the negotiation phase still concludes after \( L_N = 5 \) blocks with space for up to 109 user requests. We expect only a few user requests as a single request.

**Blockchain Footprint of AnonBoot:**
- **Per-Block Capacity:**
  - 5%
  - 10%
  - 25%
  - 50%
  - 100%

### 9. Conclusion

We introduced AnonBoot, a blockchain-based medium to securely bootstrap distributed anonymity services via established public blockchains, such as Bitcoin, as a trust anchor. All AnonBoot peers communicate through on-chain transactions, allowing them to derive the same local view of AnonBoot’s state by monitoring the host blockchain. Our design enables discovering peers to create Tor circuits and bootstrap shuffling networks and distributed cryptocurrency tumblers on demand. AnonBoot achieves its resilience against adversaries through two core mechanics: First, Sybil attacks are thwarted by forcing peers to periodically refresh their membership in a repository of eligible peers using a memory-bound, and thus fair, proof of work. Second, an adversary who joins this peer repository cannot bias the peer election for new anonymity services, as this election is based on user inputs and future blocks from the host blockchain.

The evaluation of our Bitcoin-based prototypic implementation of AnonBoot shows that public blockchains constitute a well-suited foundation for bootstrapping distributed systems: AnonBoot can easily maintain a peer repository consisting of 1,000 peers on top of Bitcoin, managing services for potentially thousands of users. These results indicate that AnonBoot can operate on most blockchains, even those with limited capabilities to store application-level data.

In the future, AnonBoot’s utility can be further increased by identifying novel use cases beyond anonymity services. AnonBoot can be used to bootstrap any distributed service, such as distributing trust in other domains via secure multiparty computation.

### Acknowledgments

This work was funded by the German Federal Ministry of Education and Research (BMBF) under funding reference numbers 16DHLQ013 and Z31 BMBF Digital Campus. The funding under reference number Z31 BMBF Digital Campus was provided by the German Academic Exchange Service (DAAD). The responsibility for the content of this publication lies with the authors. The authors thank Jöran Wiechert for his support with the prototype.

### References

[References section remains unchanged]

This optimized version aims to make the text more coherent, clear, and professional, while maintaining the original content and structure.