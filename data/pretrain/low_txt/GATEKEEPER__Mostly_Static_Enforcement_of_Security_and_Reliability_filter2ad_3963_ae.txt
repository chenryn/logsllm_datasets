### 1. Introduction to Runtime Overhead Assessment

We plan to fully assess our runtime overhead as part of future work. However, we do not anticipate it to be prohibitively high. The number of instrumentation points per widget is roughly proportional to the size and complexity of the widget. It is generally challenging to perform large-scale overhead measurements for highly interactive widgets.

To approximate the overhead, we have devised an experiment. As shown in Figure 19, for Live.com, the number of instrumentation points per file is 1.74, with an average file containing 105 lines (as depicted in Figure 15). This results in approximately 2% of all lines being instrumented on average.

### 2. Experimental Setup

To mimic this runtime check density, we generated a test script (Figure 20) with 100 field stores. The first two stores require runtime checking, while the remaining 98 are statically known. For Sidebar and Google widgets, we constructed similar test scripts with different densities of checks. Specifically, for Live, we use `index innerHTML` for one out of two rewritten cases. For Sidebase, we use it for 2 out of 3 cases, and for Google, we use it for 2 out of 4 cases. This represents a high frequency of `innerHTML` assignments.

We wrapped this code in a loop that runs 1,000 times to measure the overheads reliably and then took the median over several runs to account for noise. The baseline is the same test without any index or right-hand side checks. We observed overheads ranging from 40–73% across different instrumentation densities, as shown in Figure 19. The substantial runtime penalty is likely due to the invocation of the browser's relatively heavy-weight HTML parser on every HTML snippet.

### 3. Interpretation of Results

This experiment provides an approximate measure of the overhead that real programs are likely to experience. The numbers are encouraging, as they represent significantly smaller overheads (on the order of 6–40x) compared to tools like Caja [28].

### 4. Related Work

#### 4.1 Static Safety Checks

Much of the related work focuses on limiting attack vectors in JavaScript through type systems, language restrictions, and modifications to the browser or runtime. ADSafe and Facebook both implement static checking to ensure safety. ADSafe [13] disallows dynamic content and performs static checks to ensure JavaScript safety. Facebook uses FBJS [15], which restricts DOM access and prefixes variable names to prevent name clashes.

Designing a safe language subset is challenging. Until recently, writing anything but the simplest applications in AdSafe was difficult due to its static restrictions. Recent updates to AdSafe, including APIs for DOM access and sample widgets, are encouraging. While FBJS is expressive, it has been subject to well-publicized attacks that circumvent the isolation of the global object [2].

GATEKEEPER avoids the problem of proper language subset design by using whole program analysis. We do not attempt to prove that JavaScriptSAFE programs cannot pollute the global namespace for all programs. Instead, we analyze the entire program and its environment to check if this may happen for the input program. The use of static and points-to analysis for finding vulnerabilities and ensuring security properties has been explored for other languages such as C [6] and Java [23].

#### 4.2 Rewriting and Instrumentation

Instrumentation is a practical alternative to static language restrictions. Caja [29] and WebSandbox [25] limit JavaScript capabilities through runtime checks. Yu et al. [35] rewrite JavaScript based on a security policy and prove the correctness of their rewriting with operational semantics for a subset of JavaScript called CoreScript. BrowserShield [30] uses dynamic and recursive rewriting to ensure JavaScript and HTML safety.

Compared to these techniques, GATEKEEPER has two main advantages: 
1. As a mostly static analysis, GATEKEEPER places little runtime overhead burden on the user.
2. Sound static analysis may provide a more systematic way to reason about what code can do, especially in terms of security, reliability, and performance.

#### 4.3 Runtime and Browser Support

Current browser infrastructure and the HTML standard require a page to fully trust foreign JavaScript if it wants the JavaScript to interact with the site. One solution is to modify browsers and the HTML standard to include a richer security model that allows controlled access to the hosting page. MashupOS [18] proposes a new browser modeled after an OS, providing rich isolation between execution environments. Felt et al. [16] add a new HTML tag to label a `div` element as untrusted, limiting the actions of any JavaScript inside it.

#### 4.4 Typing and Analysis of JavaScript

A more useful type system in JavaScript could prevent errors or safety violations. Soft typing [8] might be a logical first step. Other work has focused on devising static type systems for JavaScript [4, 5, 31]. These works focus on subsets of JavaScript and provide sound type systems and semantics. GATEKEEPER uses pointer analysis to reason about the JavaScript program, allowing us to express more interesting security policies.

Chugh et al. [10] focus on staged analysis of JavaScript and finding information flow violations in client-side code. Their work supports dynamically loaded and generated JavaScript, which is valuable in the context of whole-program analysis.

### 5. Conclusions

This paper presents GATEKEEPER, a mostly static sound policy enforcement tool for JavaScript programs. GATEKEEPER is built on the first pointer analysis developed for JavaScript. To demonstrate its practicality, we describe nine representative security and reliability policies for JavaScript widgets. Statically checking these policies results in 1,341 verified warnings in 684 widgets, with 113 false positives affecting only two widgets.

Static analysis of JavaScript is key to enabling an environment where code from different parties can safely co-exist and interact. Our experience with analyzable JavaScript language subsets will inform the design of language restrictions in future versions of JavaScript, as illustrated by the `use strict` mode.

While our focus is on policy enforcement, the techniques outlined here are generally useful for tasks such as code optimization, rewriting, program understanding tools, and bug finding. We hope that GATEKEEPER paves the way for centrally-hosted software repositories to ensure the security and quality of third-party contributions.

### 6. Acknowledgments

We are grateful to Trishul Chilimbi, David Evans, Karthik Pattabiraman, Nikhil Swamy, and the anonymous reviewers for their feedback on this paper. We appreciate John Whaley’s help with bddbddb.

### 7. References

[1] A. V. Aho, M. Lam, R. Sethi, and J. D. Ullman. Compilers: Principles, Techniques, and Tools. Addison-Wesley, 2007.

[2] Ajaxian. Facebook JavaScript and security. http://ajaxian.com/archives/facebook-javascript-and-security, Aug. 2007.

[3] L. O. Andersen. Program analysis and specialization for the C programming language. Technical report, University of Copenhagen, 1994.

[4] C. Anderson and P. Giannini. Type checking for JavaScript. In WOOD 04, volume WOOD of ENTCS. Elsevier, 2004. http://www.binarylord.com/work/js0wood.pdf, 2004.

[5] C. Anderson, P. Giannini, and S. Drossopoulou. Towards type inference in JavaScript. In Proceedings of the European Conference on Object-Oriented Programming, pages 429–452, July 2005.

[6] D. Avots, M. Dalton, B. Livshits, and M. S. Lam. Improving software security with a C pointer analysis. In Proceedings of the International Conference on Software Engineering, pages 332–341, May 2005.

[7] T. Ball, E. Bounimova, B. Cook, V. Levin, J. Lichtenberg, C. McGarvey, B. Ondrusek, S. K. Rajamani, and A. Ustuner. Thorough static analysis of device drivers. In European Conference on Computer Systems, pages 73–85, 2006.

[8] R. Cartwright and M. Fagan. Soft typing. ACM SIGPLAN Notices, 39(4):412–428, 2004.

[9] B. Chess, Y. T. O’Neil, and J. West. JavaScript hijacking. www.fortifysoftware.com/servlet/downloads/public/JavaScript Hijacking.pdf, Mar. 2007.

[10] R. Chugh, J. A. Meister, R. Jhala, and S. Lerner. Staged information flow for JavaScript. In Proceedings of the Conference on Programming Language Design and Implementation, June 2009.

[11] D. Crockford. Globals are evil. http://yuiblog.com/blog/2006/06/01/global-domination/, June 2006.

[12] D. Crockford. JavaScript: the good parts. 2008.

[13] D. Crockford. AdSafe: Making JavaScript safe for advertising. http://www.adsafe.org, 2009.

[14] ECMA. Ecma-262: Ecma/tc39/2009/025, 5th edition, final draft. http://www.ecma-international.org/publications/files/drafts/tc39-2009-025.pdf, Apr. 2009.

[15] Facebook, Inc. Fbjs. http://wiki.developers.facebook.com/index.php/FBJS, 2007.

[16] A. Felt, P. Hooimeijer, D. Evans, and W. Weimer. Talking to strangers without taking their candy: isolating proxied content. In Proceedings of the Workshop on Social Network Systems, pages 25–30, 2008.

[17] Finjan Inc. Web security trends report. http://www.finjan.com/GetObject.aspx?ObjId=506.

[18] J. Howell, C. Jackson, H. J. Wang, and X. Fan. MashupOS: Operating system abstractions for client mashups. In Proceedings of the Workshop on Hot Topics in Operating Systems, May 2007.

[19] javascript-reference.info. JavaScript obfuscators review. http://javascript-reference.info/javascript-obfuscators-review.htm, 2008.

[20] E. Kıcıman and B. Livshits. AjaxScope: a platform for remotely monitoring the client-side behavior of Web 2.0 applications. In Proceedings of Symposium on Operating Systems Principles, Oct. 2007.

[21] M. S. Lam, J. Whaley, B. Livshits, M. C. Martin, D. Avots, M. Carbin, and C. Unkel. Context-sensitive program analysis as database queries. In Proceedings of the Symposium on Principles of Database Systems, June 2005.

[22] B. Livshits and S. Guarnieri. Gatekeeper: Mostly static enforcement of security and reliability policies for JavaScript code. Technical Report MSR-TR-2009-43, Microsoft Research, Feb. 2009.

[23] B. Livshits and M. S. Lam. Finding security errors in Java programs with static analysis. In Proceedings of the Usenix Security Symposium, pages 271–286, Aug. 2005.

[24] Microsoft Corporation. Static driver verifier. http://www.microsoft.com/whdc/devtools/tools/SDV.mspx, 2005.

[25] Microsoft Live Labs. Websandbox. http://websandbox.livelabs.com, 2008.

[26] Microsoft Live Labs. Quality of service (QoS) protections. http://websandbox.livelabs.com/documentation/use/qos.aspx, 2008.

[27] Microsoft Security Bulletin. Vulnerabilities in Windows gadgets could allow remote code execution (938123). http://www.microsoft.com/technet/security/Bulletin/MS07-048.mspx, 2007.

[28] M. S. Miller. Is it possible to mix ExtJS and google-caja to enhance security. http://extjs.com/forum/showthread.php?p=268731#post268731, Jan. 2009.

[29] M. S. Miller, M. Samuel, B. Laurie, I. Awad, and M. Stay. Caja: Safe active content in sanitized JavaScript. http://google-caja.googlecode.com/files/caja-2007.pdf, 2007.

[30] C. Reis, J. Dunagan, H. Wang, O. Dubrovsky, and S. Esmeir. BrowserShield: Vulnerability-driven filtering of dynamic HTML. In Proceedings of the Symposium on Operating Systems Design and Implementation, 2006.

[31] P. Thiemann. Towards a type system for analyzing JavaScript programs. 2005.

[32] J. Whaley, D. Avots, M. Carbin, and M. S. Lam. Using Datalog and binary decision diagrams for program analysis. In Proceedings of the Asian Symposium on Programming Languages and Systems, Nov. 2005.

[33] J. Whaley and M. S. Lam. Cloning-based context-sensitive pointer alias analysis using binary decision diagrams. In Proceedings of the Conference on Programming Language Design and Implementation, pages 131–144, June 2004.

[34] Windows Live. Windows live gadget developer checklist. http://dev.live.com/gadgets/sdk/docs/checklist.htm, 2008.

[35] D. Yu, A. Chander, N. Islam, and I. Serikov. JavaScript instrumentation for browser security. In Proceedings of Conference on Principles of Programming Languages, Jan. 2007.