Our dataset spans 42 different vendors and includes 1,403 distinct device models. Regarding the distribution of Software Development Kits (SDKs), our dataset covers the evolution of the Android system from version 2.3.3 to version 9, corresponding to SDK levels 10 through 28. The oldest image in our dataset dates back to 2010, while the most recent is from 2020. Figure 1 illustrates the distribution of our dataset by SDK level.

According to public statistics [22], our dataset is also diverse in terms of vendor coverage. Approximately half of the dataset consists of devices from major manufacturers such as Samsung, Huawei, LG, and Xiaomi. The remaining ROMs are from vendors with a market share of less than 4%, including Google, Lenovo, Mobicel, Motorola, Oppo, Realme, and Vivo.

As discussed in the previous section, our customization analysis requires comparing a given ROM against its "base image." To facilitate this, we created a set of 326 ROMs by compiling all AOSP versions (i.e., tags) that serve as the base image for at least one ROM in our dataset (as detailed in Section III-B). These 326 ROMs are not included in our statistical count.

To identify the tag of the AOSP base image, we primarily used the `ro.build.id` property for 88% (2,566) of the dataset. For 9% (261) of the ROMs, we combined information from the build date (`ro.build.date.utc`) with other values. For the remaining 2% (59) of the ROMs, we relied on the `ro.com.google.gmsversion` property, and for the last 23 ROMs, we used the `ro.build.description` value. It is important to note that all 2,907 ROMs in our dataset include apps from the Google Suite, indicating they have all obtained GMS certification from Google.

### V. Compliance

All ROMs in our dataset are branded as Android and contain apps from the Google Suite, implying they have obtained GMS certifications. Therefore, it is expected that they comply with the mandatory requirements of the Compatibility Definition Document (CDD).

System security has always been a critical aspect of the CDD, which has included a dedicated chapter on Security Model Compatibility since its first edition in 2009. Mandatory requirements are clearly marked as "must," and failing to implement them constitutes a clear violation of the CDD. Alternatively, features can be defined as strongly recommended, and not implementing them is not a strict violation but may still be flagged.

#### A. Kernel Configurations Compliance

For each of the 2,907 ROMs, we analyzed their Linux-based kernel binary to identify potential misconfigurations compared to the CDD's strict requirements. However, 262 ROMs did not contain the kernel binary and were excluded from our analysis.

For 249 of the remaining 2,645 kernels, we were unable to extract either the kernel configuration or the symbols from the kernel binary. This is because these kernels were compiled without the `CONFIG_IKCONFIG` and `CONFIG_MODULES` configurations, which must be enabled for kernels targeting Android 8.0 and higher. According to the Core Kernel Requirements [24] defined in the Vendor Test Suite (VTS) for Android 8.0 and higher, the configuration of these 249 kernels should violate and fail the tests. Out of these 249 kernels, 162 corresponded to Android versions â‰¥ 8.0. Thus, these 162 kernels are not compliant with Android, and these misconfigurations should have been detected by the VTS.

For the other 2,396 kernels, we retrieved the textual configuration from 561 kernels and the symbol table for the remaining. Identifying violations in kernels with available configurations is straightforward, as the CDD precisely indicates which configuration options must be used. For kernels where only the symbol table was available, we inferred specific compilation flags based on the symbols included within the binary (see Table VI in the Appendix for mappings between kernel configurations and symbols).

We conservatively marked a kernel as non-compliant if it did not implement any of the available options. For example, if a kernel adopted `CONFIG_CC_STACKPROTECTOR_STRONG` rather than `CONFIG_CC_STACKPROTECTOR_REGULAR`, we did not mark it as non-compliant, as the CDD requires the vendor to implement at least one of the two.

Our analysis found that 7.9% (190 out of 2,396) of the kernels (from 10 different vendors) violated the CDD for their specific Android version by not implementing one or more mandatory security requirements. The most common violation, found in 150 kernels, was the absence of kernel memory protections aimed at marking sensitive memory regions and sections as read-only or non-executable, which can be enabled with `CONFIG_DEBUG_RODATA` or `CONFIG_STRICT_KERNEL_RWX`.

Additionally, 10% (241 out of 2,396) of the kernels (from 10 vendors) did not implement one or more strongly recommended features. Specifically, 160 kernels did not enable `CONFIG_RANDOMIZE_BASE` (no Kernel Address Space Layout Randomization), meaning these kernels do not randomize their base address once loaded. Although these features are not mandatory, the VTS informs vendors if any strongly recommended features are missing. Thus, even though these vendors were warned about the lack of these features, they ignored the advice and did not include them in their final product.

Table II shows the evolution of violations across different SDK levels. The data indicate that the re-architecture introduced with Project Treble and the testing performed with the VTS are not sufficient to counter the problem of customization on Android from a kernel security perspective. Many kernels still do not comply with the directives imposed by Google and continue to release devices with kernels that do not meet the mandatory security specifications.

#### B. SELinux Compliance

For each Android version that supports SELinux, AOSP provides a standard policy that vendors can use as a base to build and customize their SELinux configuration. Starting from Android 4.3, Google introduced a strong requirement that all third-party vendors must adopt this new Mandatory Access Control system. The CDD mandates that third-party vendors must support SELinux in Permissive Mode. From Android 4.4, Google started to protect critical services with SELinux and required vendors to do the same: setting up SELinux in Enforcing Mode for the domains `installd`, `netd`, and `vold`. Starting from Android 5.0, vendors were required to set up SELinux in Enforcing Mode for all domains and not modify, omit, or replace certain AOSP-specific rules, known as neverallow rules.

To determine whether a ROM is compliant with the SELinux requirements, we followed a two-step process. First, we inspected the SELinux policy available in the ROM to check for violations related to Permissive Mode. Second, we compared the SELinux policies of the ROMs with the base policy provided in AOSP to identify any manipulation of the neverallow rules.

Out of the 2,907 ROMs, 1,090 did not contain a SELinux policy. Of these, 452 targeted an Android version lower than 4.3, so it was expected that they would not have a policy. We intersected the remaining ROMs with the results from the previous kernel analysis and identified 29 ROMs lacking `CONFIG_SECURITY_SELINUX`, for which it was expected that no SELinux configurations would be found.

The remaining 609 ROMs were further divided: for 167, we were unable to obtain the `boot.img`, and for 91, we could not extract either the kernel configuration or the symbol table, making it impossible to perform measurements on these ROMs.

Tables III and IV summarize the violations regarding the configuration of permissive domains in the SELinux policy and the definition of allowrules in contrast with neverallow rules defined in the AOSP SELinux base policy, respectively.