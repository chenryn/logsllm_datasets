### DSN 2010: Hendricks et al.

**Authorized licensed use limited to: Tsinghua University. Downloaded on March 18, 2021 at 14:03:40 UTC from IEEE Xplore. Restrictions apply.**

---

### 2010 IEEE/IFIP International Conference on Dependable Systems & Networks (DSN)

#### Figures and Descriptions

- **Figure 6: Throughput vs. Clients**
  - This figure shows the relationship between the number of clients and the throughput in kilo-operations per second (kOps/sec).

- **Figure 7: Latency vs. Throughput**
  - This figure illustrates the relationship between latency and throughput.

- **Figure 8: Throughput vs. Contention**
  - This figure compares the throughput with and without contention. The dashed lines represent throughput in a contention-free environment.

#### Experimental Setup and Results

- **Workload Characteristics:**
  - The workload consists of one or more Zzyzx operations plus some processing time. Each transaction is single-threaded.
  - Over 14 million metadata operations were extracted from NFS traces of the Harvard EECS workload on February 21, 2003 [11].
  - The Zzyzx system was able to use the log interface for 82% of the operations, while the remaining 18% were executed through Zyzzyva's read-only interface.

- **Performance Metrics:**
  - When all operations were executed through the read optimization, Zzyzx completed operations at a rate of 104.7 kOps/sec, whereas Zyzzyva completed operations at a rate of 64.8 kOps/sec.
  - Zzyzx provides a 1.6x higher throughput compared to Zyzzyva for this trace-based workload.

#### Additional Related Work

- **Byzantine Fault-Tolerant Replicated State Machines:**
  - Recent Byzantine fault-tolerant replicated state machine protocols build upon several years of prior research.
  - The Rampart toolkit implements an asynchronous Byzantine fault-tolerant replicated state machine [24].

- **Comparison with Other Protocols:**
  - Zzyzx, PBFT, and HQ each require 3f + 1 servers, where f is the number of faulty servers.
  - Farsite [2, 4, 9] uses a Byzantine fault-tolerant replicated state machine to manage metadata in a distributed file system, providing strong consistency guarantees.

- **Leasing Schemes:**
  - Leasing schemes do not provide the expected strong consistency guarantees, and choosing lease timeouts is challenging. A short timeout can increase scalability but may cause issues if the client is unreachable.

- **Scalability and Efficiency:**
  - Yin et al. [30] describe an architecture in which agreement on operation order is separated from operation execution, allowing for a modular framework.
  - Guerraoui et al. introduce a modular framework for Byzantine fault-tolerant replicated state machines, including the Quorum and Chain subprotocols [27].

#### Conclusion

- **Zzyzx Performance:**
  - Zzyzx delivers a factor of 2.2x to 2.9x higher throughput during concurrency-free and fault-free operation compared to the state-of-the-art Byzantine fault-tolerant replicated state machine protocols.
  - Unlike previous protocols, Zzyzx offers near-linear scaling of throughput as additional servers are added.

#### Acknowledgments

- We thank the members and companies of the CyLab Corporate Partners, including APC, Facebook, Google, Hewlett-Packard Labs, Hitachi, IBM, Intel, LSI, Microsoft Research, NEC Laboratories, NetApp, Oracle, Seagate, Symantec, VMware, and Yahoo! for their interest, feedback, and support.
- We also thank Ramakrishna Kotla et al. and Miguel Castro et al. for sharing source code for Zyzzyva and PBFT.

#### References

- [1] M. Abd-El-Malek, G. R. Ganger, G. R. Goodson, M. K. Reiter, and J. J. Wylie. Fault-scalable Byzantine fault-tolerant services. In Proc. SOSP 2005, pages 59-74.
- [2] A. Adya, W. J. Bolosky, M. Castro, G. Cermak, R. Chaiken, J. R. Douceur, J. Howell, J. R. Lorch, M. Theimer, and R. P. Wattenhofer. FARSITE: Federated, available, and reliable storage for an incompletely trusted environment. In Proc. OSDI 2002, pages 1-14.
- [3] M. G. Baker, J. H. Hartman, M. D. Kupfer, K. W. Shirriff, and J. K. Ousterhout. Measurements of a distributed file system. In Proc. SOSP 1991, pages 198-212.
- [4] W. J. Bolosky, J. R. Douceur, and J. Howell. The Farsite project: A retrospective. SIGOPS OSR, 41(2):17-26, 2007.
- [5] M. Burrows. The Chubby lock service for loosely-coupled distributed systems. In Proc. OSDI 2006, pages 335-350.
- [6] M. Castro. Practical Byzantine Fault Tolerance. PhD thesis, January 2001. MIT-LCS-TR-817.
- [7] M. Castro and B. Liskov. Practical Byzantine fault tolerance. In Proc. OSDI 1999, pages 173-186.
- [8] J. Cowling, D. Myers, B. Liskov, R. Rodrigues, and L. Shrira. HQ replication: A hybrid quorum protocol for Byzantine fault tolerance. In Proc. OSDI 2006, pages 177-190.
- [9] J. R. Douceur and J. Howell. Distributed systems. For example, the Farsite file system. In Proc. OSDI 2006, pages 321-334.
- [10] C. Dwork, N. Lynch, and L. Stockmeyer. Consensus in the presence of partial synchrony. J. ACM, 35(2):288-323, 1988.
- [11] D. Ellard and M. Seltzer. New NFS tracing tools and techniques for system analysis. In Proc. LISA 2003, pages 73-86.
- [12] M. J. Fischer, N. A. Lynch, and M. S. Paterson. Impossibility of distributed consensus with one faulty process. J. ACM, 32(2):374-382, 1985.
- [13] G. R. Goodson, J. J. Wylie, G. R. Ganger, and M. K. Reiter. Efficient Byzantine-tolerant erasure-coded storage. In Proc. DSN 2004, pages 135-144.
- [14] R. Guerraoui, N. Knezevic, V. Quema, and M. Vukolic. The next 700 BFT protocols. Technical Report 2008-008, EPFL.
- [15] J. Hendricks. Efficient Byzantine Fault Tolerance for Scalable Storage and Services. PhD thesis, July 2009. CMU-CS-09-146.
- [16] J. Hendricks, G. R. Ganger, and M. K. Reiter. Low-overhead Byzantine fault-tolerant storage. In Proc. SOSP 2007, pages 73-86.
- [17] M. P. Herlihy and J. M. Wing. Linearizability: A correctness condition for concurrent objects. ACM TOPLAS, 12(3):463-492, 1990.
- [18] J. Katcher. Postmark: A new file system benchmark. Technical Report TR3022, Network Appliance, October 1997.
- [19] K. P. Kihlstrom, L. E. Moser, P. M. Melliar-Smith, Y. Dolev, and H. Raynal. SecureRing: A secure group communication protocol. In Proc. HICSS 1998, pages 317-326.
- [20] R. Kotla, L. Alvisi, M. Dahlin, L. E. Moser, and P. M. Melliar-Smith. Zyzzyva: Speculative Byzantine fault tolerance. In Proc. SOSP 2007, pages 45-58.
- [21] R. Kotla and M. Dahlin. High throughput Byzantine fault tolerance. In Proc. DSN 2004, pages 575-584.
- [22] A. W. Leung, S. Pasupathy, G. Goodson, and E. L. Miller. Measurement and analysis of large-scale network file system workloads. In Proc. USENIX 2008 ATC, pages 213-226.
- [23] D. Malkhi, M. K. Reiter, and A. Wool. The load and availability of Byzantine quorum systems. SIAM J. Comp., 29(6):1889-1906, 2000.
- [24] M. K. Reiter. The Rampart toolkit for building high-integrity services. In Selected Papers from Int. Workshop on Theory and Practice in Dist. Systems, pages 99-110, 1995.
- [25] F. Schmuck and R. Haskin. GPFS: A shared-disk file system for large computing clusters. In Proc. FAST 2002, pages 231-244.
- [26] A. Singh, P. Maniatis, P. Druschel, and T. Roscoe. BFT protocols under fire. In Proc. NSDI 2008, pages 189-204.
- [27] A. Singh, P. Maniatis, P. Druschel, and T. Roscoe. Conflict-free quorum based BFT protocols. Technical Report TR-2007-2, Max Planck Institute for Software Systems.
- [28] S. Toueg. Randomized Byzantine agreements. In Proc. PODC 1984, pages 163-178.
- [29] X. Wang and H. Yu. How to break MD5 and other hash functions. In EUROCRYPT '05, pages 19-35.
- [30] J. Yin, J.-P. Martin, A. Venkataramani, L. Alvisi, and M. Dahlin. Separating agreement from execution for Byzantine fault tolerant services. In Proc. SOSP 2003, pages 253-267.

**Â©2010 IEEE**