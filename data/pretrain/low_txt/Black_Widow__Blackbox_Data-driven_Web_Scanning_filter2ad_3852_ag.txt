# Web Application Vulnerability Scanning: Black Widow Approach

## Introduction
This document discusses the challenges and solutions in modern web application vulnerability scanning, focusing on a novel approach called Black Widow. The method leverages three core pillars: navigation modeling, traversing, and tracking inter-state dependencies. We evaluate this approach against other scanners and discuss its effectiveness in detecting cross-site scripting (XSS) vulnerabilities.

## Unique Injections and Clustering
Out of the 25 unique injections found by all scanners, we also identified all 25. However, Arachni found a vulnerability by injecting a different parameter than we did. This does not constitute a unique vulnerability due to our clustering, which is explained in Section IV-D. On SCARF, input elements can be dynamically generated by adding more users, with input names like `1_name`, `2_name`, etc. Arachni managed to add multiple users by randomizing email addresses. Since our crawler focuses on consistency, we do not generate valid random email addresses and could therefore not add more than one user.

### Drawbacks and Solutions
The drawback is that it is easier to lose the state if too much randomness is used. A possible solution is to keep two sets of default values and test both when possible. However, using multiple users can result in mixing up the state between them and introduce a performance penalty as multiple submissions for each form would be required.

### w3af Scanner Findings
The w3af scanner found a reflected version of a vulnerable parameter that we considered to be stored. On SCARF, it was possible to get a direct reflection by submitting the same password and retype password in the user settings. Our scanner injected unique values into each field, resulting in an error without reflection, but the fields were still stored. Inter-state dependency analysis was used to detect these stored values when revisiting the user settings.

### Further Improvements
Further improvements include updating our method for determining safe requests and more robust function hooking. A machine learning approach, such as Mitch [27], could be used to determine if a request can be considered safe. The function hooking could be done by modifying the JavaScript engine instead of instrumenting JavaScript code.

## Vulnerability Exploitability
For the six new vulnerabilities, we further investigate the impact and exploitability. While all of these vulnerabilities were found using an admin account in the web application, the attacker does not necessarily need to be an admin. XSS payloads executed as the admin give a higher impact as the JavaScript runs with admin privileges. The attacker usually needs to convince the admin to click on a link or visit a malicious website, i.e., the attacker does not require any admin privileges. Although there might be an XSS vulnerability in the code, orthogonal mitigations such as CSRF tokens and CSP can decrease the exploitability.

### Specific Cases
- **HotCRP**: The attacker would have to guess a CSRF token, which is considered difficult.
- **PrestaShop**: Has a persistent secret in the URL which would have to be known by the attacker.
- **WordPress**: One vulnerability was a self-XSS, meaning the admin would need to be convinced to input our payload string, while the other one required a CSRF token.
- **osCommerce**: Required no CSRF tokens, making it both high impact and easy to exploit.

## Coordinated Disclosure
We have reported the vulnerabilities to the affected vendors, following the best practices of coordinated disclosure [28]. Specifically, we reported a total of six vulnerabilities to HotCRP, osCommerce, PrestaShop, and WordPress. So far, our reports have resulted in HotCRP patching their vulnerability [29]. A parallel disclosure for the same vulnerability was reported to PrestaShop and is now tracked as CVE-2020-5271 [30]. Due to the difficulty of exploitation, WordPress did not consider them vulnerabilities. However, the nearby event vulnerability is fixed in the latest version. We have not received any confirmation from osCommerce yet.

## Related Work
Automatic vulnerability scanning has been a popular topic due to its complexity and practical usefulness. This paper focuses on blackbox scanning, which requires no access to the application’s source code or any other input from developers. We have evaluated our approach with respect to both community-developed open-source tools [18], [16], [17] and academic blackbox scanners [8], [13]. There are also earlier works on vulnerability detection and scanning [31], [32], [33], [34], [11], [12]. While we focus on blackbox testing, there is also progress on whitebox security testing [35], [36], [37], [38], [39].

### Challenges in Detecting Stored XSS
Previous evaluations [15], [14], [40], [41], [42] show that detecting stored XSS is hard. It is not the exact payload that is the problem for scanners but rather crawling deep enough to find the injections and model the application to find the reflections. Similar to our findings, Parvez et al. [42] note that while some scanners were able to post comments to pictures in WackoPicko, something which requires multiple actions in sequence, none of them was able to inject a payload.

### Server-Side State
Enemy of the State [13] focuses on inferring the state of the server by using a heuristic method to compare how requests result in different links on pages. Black Widow instead takes the approach of analyzing the navigation methods to infer some state information. For example, if the previous edge in the navigation graph was a form submission, we would have to resubmit this form before continuing. This allows us to execute sequences of actions without fully inferring the server-side state.

### Client-Side State
j ¨Ak considers client-side events to improve exploration, but the support for events is limited, leaving out such events as form submission. Other scanners like Enemy of the State, w3af, and ZAP execute JavaScript but do not model the events. This limits their ability to explore the client-side state. As modern applications make heavy use of JavaScript, Black Widow offers full-fledged support of client-side events. In contrast to j ¨Ak, Black Widow models client-side events like any other navigation method, allowing us to chain them with other navigations such as form submissions.

### Tracking Data Dependencies
Tracking payloads is an important part of detecting stored XSS vulnerabilities. Some scanners, including Arachni, use a session-based ID in each payload. Since the ID is based on the session, this can lead to false positives as payloads are reused for different parameters. j ¨Ak and Enemy of the State use unique IDs for their payload but forget them on new pages. w3af uses unique payloads and remembers them across pages. ZAP uses a combination in which a unique ID is sent together with a generic payload but in separate requests. This works if both the ID and payload are stored on a page. In addition to using unique IDs for all our payloads, Black Widow incorporates the inter-state dependencies in the application to ensure that we can fuzz the correct input and output across different pages.

## Conclusion
We have highlighted key challenges for crawling and scanning the modern web. Based on these challenges, we have identified three core pillars for deep crawling and scanning: navigation modeling, traversing, and tracking inter-state dependencies. We have presented Black Widow, a novel approach to blackbox web application scanning that leverages these pillars by developing and combining augmented navigation graphs, workflow traversal, and inter-state data dependency analysis. To evaluate our approach, we have implemented it and tested it on 10 different web applications and against 7 other web application scanners. Our approach results in code coverage improvements ranging from 63% to 280% compared to other scanners across all tested applications. Across all tested web applications, our approach improved code coverage by between 6% and 62%, compared to the sum of all other scanners. When deployed to scan for cross-site scripting vulnerabilities, our approach has featured no false positives while uncovering more vulnerabilities than the other scanners, both in the reference applications (i.e., phpBB, SCARF, Vanilla, and WackoPicko) and in production software, including HotCRP, osCommerce, PrestaShop, and WordPress.

## Acknowledgment
We would like to thank Sebastian Lekies for inspiring discussions on the challenges of web scanning. We would also like to thank Nick Nikiforakis and the reviewers for their valuable feedback. This work was partially supported by the Swedish Foundation for Strategic Research (SSF) and the Swedish Research Council (VR).

## References
[1] Google, “Vulnerability Reward Program: 2019 Year in Review,” https://security.googleblog.com/2020/01/vulnerability-reward-program-2019-year.html, 2020.
[2] Facebook, “A Look Back at 2019 Bug Bounty Highlights,” https://www.facebook.com/notes/facebook-bug-bounty/a-look-back-at-2019-bug-bounty-highlights/3231769013503969/, 2020.
[3] The OWASP Foundation, “OWASP Top 10 - 2017,” https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf, 2017.
[4] S. Innovation, “Google Awards $1.2 Million in Bounties Just for XSS Bugs,” https://blog.securityinnovation.com/google-awards-1.2-million-in-bounties-just-for-xss-bugs, 2016.
[5] InfoSecurity, “XSS is Most Rewarding Bug Bounty as CSRF is Revived,” https://www.infosecurity-magazine.com/news/xss-bug-bounty-csrf-1-1-1-1/, 2019.
[6] Bugcrowd, “The State of Crowdsourced Security in 2019,” https://www.bugcrowd.com/, 2020.
[7] A. Petukhov and D. Kozlov, “Detecting security vulnerabilities in web applications using dynamic analysis with penetration testing,” Computing Systems Lab, Department of Computer Science, Moscow State University, pp. 1–120, 2008.
[8] G. Pellegrino, C. Tsch¨urtz, E. Bodden, and C. Rossow, “j ¨Ak: Using Dynamic Analysis to Crawl and Test Modern Web Applications,” in International Symposium on Recent Advances in Intrusion Detection. Springer, 2015, pp. 295–316.
[9] A. Mesbah, E. Bozdag, and A. Van Deursen, “Crawling Ajax by inferring user interface state changes,” in 2008 Eighth International Conference on Web Engineering. IEEE, 2008, pp. 122–134.
[10] C.-P. Bezemer, A. Mesbah, and A. van Deursen, “Automated security testing of web widget interactions,” in Proceedings of the 7th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering. ACM, 2009, pp. 81–90.
[11] F. Duchene, S. Rawat, J.-L. Richier, and R. Groz, “LigRE: Reverse-engineering of control and data flow models for black-box XSS detection,” in 2013 20th Working Conference on Reverse Engineering (WCRE). IEEE, 2013, pp. 252–261.
[12] ——, “KameleonFuzz: Evolutionary fuzzing for black-box XSS detection,” in Proceedings of the 4th ACM conference on Data and application security and privacy, 2014, pp. 37–48.
[13] A. Doupé, L. Cavedon, C. Kruegel, and G. Vigna, “Enemy of the State: A state-aware black-box web vulnerability scanner,” in USENIX Security Symposium 12, 2012, pp. 523–538.
[14] A. Doupé, M. Cova, and G. Vigna, “Why Johnny Can't Pentest: An analysis of black-box web vulnerability scanners,” in International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 2010, pp. 111–131.
[15] J. Bau, E. Bursztein, D. Gupta, and J. Mitchell, “State of the Art: Automated black-box web application vulnerability testing,” in 2010 IEEE Symposium on Security and Privacy. IEEE, 2010, pp. 332–345.
[16] A. Riancho, “w3af - Open Source Web Application Security Scanner,” 2007. [Online]. Available: https://w3af.org
[17] OWASP, “OWASP Zed Attack Proxy (ZAP),” 2020. [Online]. Available: https://owasp.org/www-project-zap/
[18] Sarosys LLC, “Framework - Arachni - Web Application Security Scanner,” 2019. [Online]. Available: https://www.arachni-scanner.com/features/framework/framework
[19] R. Fielding and J. Reschke, “Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content,” Internet Requests for Comments, RFC Editor, RFC 7231, June 2014. [Online]. Available: https://www.rfc-editor.org/rfc/rfc7231.txt
[20] D. Rethans, “Xdebug - Debugger and Profiler Tool for PHP,” 2019. [Online]. Available: https://xdebug.org/
[21] H. Niki, “Wget - GNU Project,” 2019. [Online]. Available: https://www.gnu.org/software/wget/
[22] M. Zalewski, “Skipfish,” 2015. [Online]. Available: https://code.google.com/p/skipfish/
[23] S. Idrissi, N. Berbiche, F. Guerouate, and M. Shibi, “Performance evaluation of web application security scanners for prevention and protection against vulnerabilities,” International Journal of Applied Engineering Research, vol. 12, no. 21, pp. 11 068–11 076, 2017.
[24] PortSwigger, “Burp Scanner - PortSwigger,” 2020. [Online]. Available: https://portswigger.net/burp/documentation/scanner
[25] A. Doupé, “WackoPicko,” 2018. [Online]. Available: https://github.com/adamdoupe/WackoPicko
[26] WHATWG, “HTML Standard,” 2019. [Online]. Available: https://html.spec.whatwg.org/multipage/forms.html#the-form-element
[27] S. Calzavara, M. Conti, R. Focardi, A. Rabitti, and G. Tolomei, “Mitch: A Machine Learning Approach to the Black-Box Detection of CSRF Vulnerabilities,” in 2019 IEEE European Symposium on Security and Privacy (EuroS&P). IEEE, 2019, pp. 528–543.
[28] Google, “Project Zero: Vulnerability Disclosure FAQ,” 2019. [Online]. Available: https://googleprojectzero.blogspot.com/p/vulnerability-disclosure-faq.html
[29] E. Kohler, “Correct missing quoting reported by Benjamin Eriksson at Chalmers,” https://github.com/kohler/hotcrp/commit/81b7ffee2c5bd465c82acf139cc064daacca845c, 2020.
[30] “CVE-2020-5271.” Available from MITRE, CVE-ID CVE-2020-5271, Apr. 20 2020. [Online]. Available: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5271
[31] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna, “SANER: Composing Static and Dynamic Analysis to Validate Sanitization in Web Applications,” in 2008 IEEE Symposium on Security and Privacy (SP 2008). IEEE, 2008, pp. 387–401.
[32] W. G. Halfond, S. R. Choudhary, and A. Orso, “Penetration Testing with Improved Input Vector Identification,” in 2009 International Conference on Software Testing Verification and Validation. IEEE, 2009, pp. 346–355.
[33] T. S. Rocha and E. Souto, “ETSSDetector: A Tool to Automatically Detect Cross-Site Scripting Vulnerabilities,” in 2014 IEEE 13th International Symposium on Network Computing and Applications, Aug 2014, pp. 306–309.
[34] S. Kals, E. Kirda, C. Kruegel, and N. Jovanovic, “SecuBat: A Web Vulnerability Scanner,” in Proceedings of the 15th International Conference on World Wide Web, 2006, pp. 247–256.
[35] V. Felmetsger, L. Cavedon, C. Kruegel, and G. Vigna, “Toward Automated Detection of Logic Vulnerabilities in Web Applications,” in USENIX Security Symposium, vol. 58, 2010.
[36] Y.-W. Huang, F. Yu, C. Hang, C.-H. Tsai, D.-T. Lee, and S.-Y. Kuo, “Securing Web Application Code by Static Analysis and Runtime Protection,” in Proceedings of the 13th International Conference on World Wide Web, 2004, pp. 40–52.
[37] N. Jovanovic, C. Kruegel, and E. Kirda, “Static Analysis for Detecting Taint-Style Vulnerabilities in Web Applications,” Journal of Computer Security, vol. 18, no. 5, pp. 861–907, 2010.
[38] X. Li, W. Yan, and Y. Xue, “Sentinel: Securing Database from Logic Flaws in Web Applications,” in Proceedings of the Second ACM Conference on Data and Application Security and Privacy, 2012, pp. 25–36.
[39] A. Vernotte, F. Dadeau, F. Lebeau, B. Legeard, F. Peureux, and F. Piat, “Efficient Detection of Multi-Step Cross-Site Scripting Vulnerabilities,” in Information Systems Security, A. Prakash and R. Shyamasundar, Eds. Cham: Springer International Publishing, 2014, pp. 358–377.
[40] L. Suto, “Analyzing the Accuracy and Time Costs of Web Application Security Scanners,” San Francisco, February, 2010.
[41] M. Vieira, N. Antunes, and H. Madeira, “Using Web Security Scanners to Detect Vulnerabilities in Web Services,” in 2009 IEEE/IFIP International Conference on Dependable Systems & Networks. IEEE, 2009, pp. 566–571.
[42] M. Parvez, P. Zavarsky, and N. Khoury, “Analysis of Effectiveness of Black-Box Web Application Scanners in Detection of Stored SQL Injection and Stored XSS Vulnerabilities,” in 2015 10th International Conference for Internet Technology and Secured Transactions (ICITST). IEEE, 2015, pp. 186–191.

## Appendix: Scanner Configuration
### 1. Arachni
```bash
arachni [url] --check=xss* --browser-cluster-pool-size=1 --plugin?autologin:url=[loginUrl],parameters="[userField]=[username]&[passField]=[password]",check="[logoutString]"
```

### 2. Black Widow
```bash
python3 crawl.py [url]
```

### 3. Enemy of the State
First, change the username and password in the web application to `scanner1` then run:
```bash
jython crawler2.py [url]
```

### 4. j ¨Ak
Update the `example.py` file with the URL and user data:
```python
url = [url]
user = User("[sessionName]", 0, url, login_data={"[userField]": "[username]", "[passField]": "[password]"}, session="ABC")
```

### 5. Skipfish
```bash
skipfish -uv -o [output] --auth-form [loginUrl] --auth-user-field [userField] --auth-pass-field [passField] --auth-user [username] --auth-pass [password] --auth-verify-url [verifyUrl] [url]
```

### 6. w3af
Use the following settings: generic and xss for the audit plugin, web spider for crawl plugin, and generic (with all credentials) for the auth plugin.

### 7. Wget
```bash
wget -rp -w 0 waitretry=0 -nd --delete-after --execute robots=off [url]
```

### 8. ZAP
Use the automated scan with both traditional spider and AJAX spider. In the Scan Progress window, deactivate everything that is not XSS. Change the credentials in the web application to the scanner’s default, i.e., ZAP.

---

**Note:** This document is authorized for licensed use limited to Tsinghua University. Downloaded on February 25, 2022, at 12:14:17 UTC from IEEE Xplore. Restrictions apply.