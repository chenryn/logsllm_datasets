### Possible Defenses and Suggested Actions

We recommend reporting the problem to CERT/CC for coordinated disclosure. Here is a summary of the responses from various CDNs:

- **Baidu**: Showed interest in the attacks and engaged in detailed discussions about the specifics. They reported having encountered real-world cases of forwarding-loop attacks, which led them to implement a self-defined loop detection header. However, they did not anticipate that interactions among CDNs could re-enable this attack.

- **Alibaba**: Discussed the details of the attacks and their potential consequences. They opted to use monitoring and rate-limiting as mitigation measures.

- **Tencent**: Considered the issue a high-risk vulnerability and acknowledged it as a significant problem for the CDN industry. They are internally assessing how to defend against it and thanked us for the report, providing a reward of approximately $300.

- **Fastly**: Acknowledged and discussed our report. They emphasized that both no-abort-forwarding and HTTP Streaming provide desirable performance properties, allowing them to optimize customer traffic. To defend against inter-CDN loops, they suggested that a unified, standard loop-detection header holds the most promise and are evaluating how to contribute to such an effort. In the meantime, they are also evaluating how to improve their existing loop-detection mechanisms. They thanked us and offered several T-shirts as a token of gratitude.

- **CDN77**: Thanked us for the report and informed us that they will change their system to not reset the Via header. They stated that no-abort-forwarding is an important performance feature for their CDN, so they are inclined to keep it. To defend against forwarding loops, they are considering implementing a constraint on forwarding destinations to mitigate intra-CDN loops. They are also willing to cooperate with other CDN providers to define a unified loop-detection header for mitigating inter-CDN loops.

- **Akamai, Azure (China), and CloudFront**: Acknowledged our report but provided no further comment to date.

- **Verizon (EdgeCast)**: Stated that this problem is valid and can be a significant danger to CDNs and the Internet in general. They are interested in working with other CDNs to define a unified loop-detection header.

### Possible Defenses and Mitigations

#### Unifying and Standardizing Loop-Detection Header
As we have presented, forwarding-loop attacks within one CDN can be completely defeated with loop-detection headers, a simple and clean solution. However, even if all CDNs adopt loop detection headers, the issue of forwarding loops across CDNs will remain if any CDN unintentionally provides ways for attackers to strip the loop-detection headers of other CDNs. Therefore, CDNs should agree upon a unified loop-detection header and prohibit disruptive operations on it. A possible candidate would be the Via header, which the current standard already requires nodes to add when forwarding/proxying HTTP requests [8]. The standard also states that proxies "SHOULD NOT" tamper with entries in the Via header set by different organizations.

Several CDN vendors view this approach as the most desirable solution and agreed that all CDNs should comply with the standard and not disrupt the Via header. CloudFlare is implementing a loop-detection mechanism using the Via header.

While this approach is conceptually simple, it requires considerable coordination efforts to be implemented and enforced. It also requires ongoing compliance testing to ensure prompt detection of gaps in deployment. In light of this, CDNs should also consider immediately adoptable mitigations, as follows:

#### Obfuscating Self-Defined Loop-Detection Headers
A lightweight mitigation is to implement a self-defined loop detection header in a way that resists stripping by "bad actors" (attackers setting up particular forwarding paths or rules). One approach would be to obfuscate the header by generating its name via encrypting a mix of a certain keyword and a random nonce, which is verifiable by decrypting and validating the presence of the keyword. Such headers will resist stripping by regular-expression-like WAF rules because the attacker will not know how to specify the header’s name. We have implemented this mitigation based on Nginx 1.8.0. However, it will not help if a CDN provides whitelist-based WAF rules (only propagate headers that match a specified set).

#### Monitoring and Rate-Limiting
Another mitigation CDNs could implement is some form of rate-limiting. For example, a CDN could monitor traffic volume or concurrent connections per source IP address or per customer, rejecting or downgrading subsequent requests from the same source/customer once their activities exceed predefined thresholds. A gracefully downgrading approach that differentiates requests forming forwarding loops and those of legitimate clients is to respond to potentially problematic requests with a 302 redirect, informing the initiator to try again later. While a normal client will usually follow the redirection automatically, measurements of our implementation confirm that this approach suffices to terminate forwarding loops because all CDNs we tested merely relay the 302 response back, rather than following the redirection.

CloudFlare informed us that they have implemented a limit on concurrent connections per source IP address and a performance downgrade similar to the returning-with-302 strategy once the source exceeds the threshold. However, they expressed concerns with the "greylisting" vulnerability that this strategy introduces: attackers triggering the threshold on IP addresses of one CDN to affect other customers chaining that CDN to CloudFlare. In general, a more fine-grained policy such as per-account rate-limiting could avoid this problem. However, it is worth noting that any form of rate-limiting can be evaded by sufficient planning by attackers. In the extreme case, a forwarding-loop attack could be launched so that attacking traffic comes from different IP addresses and attributed to different (bogus) customer accounts. Also, the returning-with-302 strategy will not work if the major attacking traffic comes from responses using the dam-flooding attack. Nevertheless, monitoring and rate-limiting could substantially raise the operational overhead of forwarding-loop attacks.

#### Constraint on Forwarding Destination
Another possible mitigation is to enforce a blacklist-like policy on forwarding destinations. For example, a CDN can reject a request if its forwarding destination belongs to another CDN. Such constraints could also be implemented with finer-grained conditions. In CloudFlare’s response to us, they mentioned not accepting a request if it comes from a CDN and goes to another. CDN77 also expressed interest in implementing blacklist-based mitigations. The downside of this approach is that it requires considerable efforts to maintain an accurate list of CDN IP addresses. It also discourages benign customers from chaining multiple CDNs, which has real-world utility [4].

### Related Work

#### CDN Loop Attacks and Their Prevention
The only material we know of that studied the problem of forwarding loops in CDNs is a blog post from the OpenCDN team [17]. They mention approaches for constructing loops in CDNs that lack loop-detection capabilities. Our work contributes further in this regard by broadly exploring the possibilities of such attacks, expanding their scope via self-loops, evading loop detection of one CDN by abusing features of other CDNs, construction of the dam-flooding attack, and comprehensive measurement of how forwarding-loop attacks could work in the real world.

Some publications discuss detecting internal forwarding loops inside a single CDN. Yao proposed a "Hop Counter" HTTP header to detect forwarding loops [23]. CoralCDN prevents internal loops by checking the "User-Agent" header [9]. However, these approaches do not consider that the undesired interactions among CDNs can provide opportunities to evade such defenses.

The Content Distribution Network Interconnection (CDNI) working group of the IETF works on standardizing how multiple CDNs can cooperate with each other [11], [18]. They have considered addressing potential loops in the request-routing process that determines the appropriate edge server using HTTP redirection or DNS CNAMEs among multiple CDNs [3]. However, they have yet to consider the problem of forwarding loops, which could occur when the edge server forwards the request to the original website. Our suggestion of unifying and standardizing on an HTTP header for forwarding-loop detection appears to fit within their scope.

#### Other CDN Security Issues
Prior work has examined other types of attacks and associated defenses relevant to CDNs. Triukose et al. proposed an attack that abuses the no-abort-forwarding of Akamai and Limelight to launch DoS attacks on their customers [22]. This behavior is also related to the effects of forwarding-loop attacks, and our measurements show that Akamai, among other CDNs, still uses no-abort-forwarding, which is vulnerable to Triukose et al.’s attack, and makes forwarding-loop attacks more effective, although Fastly and CDN77 explained that this is intended for performance consideration. Su et al. discussed several Akamai implementation considerations that attackers could exploit to degrade streaming services [21]. Lesniewski-Laas et al. proposed a solution called "SSL splitting" to protect the integrity of data served by untrusted proxies [10]. Michalakis et al. also studied the problem of content integrity in untrusted peer-to-peer CDNs and developed a system to ensure such integrity [15]. Levy et al. presented a system called "Stickler" to help website publishers guarantee the integrity of web content served to end users through CDNs [12]. Liang et al. investigated the authentication problem of deploying HTTPS in CDNs [13].

### Conclusion

We have presented how malicious customers can launch forwarding-loop attacks against CDNs, along with a comprehensive study of their practicality in the real world. The key issue is that features of one CDN may have unintentional and undesired interactions that can disrupt another CDN’s internal loop-prevention mechanisms. We believe that forwarding-loop attacks could pose severe threats to CDNs’ availability, and hope that our work will provide insight into these issues and help CDNs fully understand them. In the short term, we suggest that CDNs adopt one or more of the mitigation mechanisms discussed in the paper. In the longer term, we hope our work will motivate CDN vendors to address the root cause of the problem and possibly other potential problems caused by the lack of coordination among CDNs.

Finally, at a higher level, our work underscores the hazards that can arise when a networked system provides users with control over forwarding—particularly in a context that lacks a single point of administrative control, and thus allows forwarding manipulation by leveraging inconsistencies among policies and technical mechanisms used by different networking providers.

### Acknowledgments

We especially thank Jie Ma, Jinghui Feng, Tingting Li, and Haoting from Baidu’s CDN team for valuable discussions and authorization to test on their CDN platform. We also gratefully thank Nick Sullivan from CloudFlare, Daniel McCarney from Fastly, Tomas Kvasnicka from CDN77, Amir Khakpour from Verizon (EdgeCast), and Hanqing Wu from Alibaba for their helpful comments. We also thank the anonymous reviewers, and Zhou Li, Jianwei Zhuge, Kun Yang, Kun Du, Huiming Liu, Wei Liu, and Qin Chen for suggestions and feedback. This work was funded by Tsinghua National Laboratory for Information Science and Technology (TNList) Academic Exchange Foundation, National Natural Science Foundation of China (grant #: 61472215) and was also partially supported by the US National Science Foundation under grant CNS-1237265, and by generous support from Google and IBM. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of their employers or the funding agencies.

### References

[1] Akamai, “Facts & Figures,” http://www.akamai.com/html/about/facts_figures.htm, 2015, [Accessed Aug. 2015].

[2] A. Barbir, B. Cain, R. Nair, and O. Spatscheck, “Known Content Network (CN) Request-Routing Mechanisms,” IETF RFC 3568, 2003.

[3] T. Choi, Y. Seo, D. Kim, and K. Park, “CDNi Request Routing Redirection with Loop Prevention,” http://tools.ietf.org/html/draft-choi-cdni-req-routing-redir-loop-prevention-01, 2013, [Accessed Aug. 2015].

[4] CloudFlare, “Content Delivery Network: We’ve built the next-generation CDN,” https://www.cloudflare.com/features-cdn, [Accessed Aug. 2015].

[5] Fastly, “Adding or modifying headers on HTTP requests and responses,” https://docs.fastly.com/guides/basic-configuration/adding-or-modifying-headers-on-http-requests-and-responses, [Accessed Aug. 2015].

[6] R. Fielding, M. Nottingham, and J. Reschke, “Hypertext Transfer Protocol (HTTP/1.1): Caching,” IETF RFC 7234, 2014.

[7] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee, “Hypertext Transfer Protocol HTTP/1.1,” IETF RFC 2616, 1999.

[8] R. Fielding and J. Reschke, “Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing,” IETF RFC 7230, 2014.

[9] M. J. Freedman, “Experiences with CoralCDN: a five-year operational view,” in Proceedings of the 7th USENIX Conference on Networked Systems Design and Implementation (NSDI). USENIX Association, 2010.

[10] C. Lesniewski-Laas and M. F. Kaashoek, “SSL Splitting: Securely Serving Data from Untrusted Caches,” Computer Networks, vol. 48, no. 5, pp. 763–779, 2005.

[11] K. Leung and Y. Lee, “Content Distribution Network Interconnection (CDNI) Requirements,” IETF RFC 7337, 2014.

[12] A. Levy, H. Corrigan-Gibbs, and D. Boneh, “Stickler: Defending Against Malicious CDNs in an Unmodified Browser,” in WEB 2.0 SECURITY & PRIVACY.

[13] J. Liang, J. Jiang, H. Duan, K. Li, T. Wan, and J. Wu, “When HTTPS Meets CDN: A Case of Authentication in Delegated Service,” in Proceedings of the 35th IEEE Symposium on Security and Privacy (S&P). IEEE Computer Society, May 2014. IEEE, 2015.

[14] MaxCDN, “EdgeRules Features,” https://www.maxcdn.com/one/tutorial/edgerules-features/, [Accessed Aug. 2015].

[15] N. Michalakis, R. Soulé, and R. Grimm, “Ensuring Content Integrity for Untrusted Peer-to-Peer Content Distribution Networks,” in Proceedings of the 4th USENIX conference on Networked systems design & implementation (NSDI). USENIX Association, 2007, pp. 11–11.

[16] M. Nottingham, “Caching POST,” https://www.mnot.net/blog/2012/09/24/caching-post, 2012, [Accessed Aug. 2015].

[17] OpenCDN, “The Idea of Traffic Amplification Attacks,” http://drops.wooyun.org/papers/679, 2013, [Accessed Aug. 2015].

[18] L. Peterson, B. Davie, and R. van Brandenburg, “Framework for Content Distribution Network Interconnection (CDNI),” IETF RFC 7336, 2014.

[19] J. Roberts, “How does CloudFlare Handle HTTP Request Headers?” https://support.cloudflare.com/hc/en-us/articles/200170986-How-does-CloudFlare-handle-HTTP-Request-headers, 2015, [Accessed Aug. 2015].

[20] A.-J. Su, D. R. Choffnes, A. Kuzmanovic, and F. E. Bustamante, “Drafting behind akamai (travelocity-based detouring),” SIGCOMM Comput. Commun. Rev., vol. 36, no. 4, pp. 435–446, Aug. 2006. [Online]. Available: http://doi.acm.org/10.1145/1151659.1159962

[21] A.-J. Su and A. Kuzmanovic, “Thinning Akamai,” in Proceedings of the 8th ACM SIGCOMM conference on Internet measurement (IMC). ACM, 2008, pp. 29–42.

[22] S. Triukose, Z. Al-Qudah, and M. Rabinovich, “Content Delivery Networks: Protection or Threat?” in Computer Security–ESORICS 2009. Springer, 2009, pp. 371–389.

[23] Y. Xi, “Method and Device for Defending CDN Flow Amplification Attacks,” https://www.google.com/patents/CN103685253A?cl=en, 2013, [Accessed Aug. 2015].