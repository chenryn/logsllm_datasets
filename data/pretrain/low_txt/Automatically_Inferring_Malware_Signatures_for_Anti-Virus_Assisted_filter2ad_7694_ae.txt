### Full Disjunctive Normal Form of a Signature

The full disjunctive normal form (FDNF) of a signature is a logical representation that can capture complex relationships. However, the computational complexity of FDNF often makes it impractical for real-world applications. Our approach extends previous work by inferring more precise signatures in a computationally feasible manner. These signatures not only represent simple byte sequences but also express the relationships between them.

### Improving Signature-Based Systems

Another line of research has focused on enhancing traditional signature-based methods and developing alternative detection approaches. Christodorescu et al. [12] introduced a method to reverse malware obfuscations, which can be used as a preprocessing step for antivirus (AV) products. Filiol [15] proposed a signature matching scheme that limits black-box analysis of virus scanners. Christodorescu et al. [10] suggested moving away from simple byte-based signatures in favor of detection based on code semantics [50, 51].

Several researchers have explored the use of machine learning techniques for automatically generating detectors [e.g., 4, 13, 27, 28] and signatures [e.g., 19, 33, 40]. While some of these approaches offer excellent detection capabilities and runtime performance, the application of machine learning can introduce additional security challenges [17, 41, 48, 59], and addressing these issues remains an active area of research [7, 23, 61].

### Conclusions

Despite the availability of advanced detection techniques such as behavioral blocking and packer-agnostic unpacking, most antivirus products still rely on static signature matching as a fallback mechanism. This signature-based detection is effective and efficient when appropriate and up-to-date signatures are available. However, the widespread use of this method can also be exploited by attackers if they gain access to the signatures and use them to launch attacks.

We investigate this threat and analyze the feasibility of antivirus-assisted attacks, where signatures derived from malware samples are embedded into benign network communications. Using a novel method for deriving signatures from virus scanners, we show that a significant number of deployed signatures correspond to simple byte patterns that are not tied to specific file types or contexts. We then demonstrate how such poorly designed signatures can be exploited by an attacker. To illustrate this, we introduce the concept of malicious markers and present three scenarios in which an adversary can use these markers to remotely instruct a virus scanner to block or delete content, effectively turning the antivirus product into an ally behind defense lines.

While our study highlights that simple signature matching can be a vulnerability rather than a protection, the concept of defending against attacks directly at the end host remains promising. For this to be effective, the employed signatures need to incorporate context and semantics of the matched code to avoid side effects. Dynamic approaches and heuristics, which implicitly include these relationships, are thus advocated. We recommend further advancing the use of more sophisticated and precise detection methods in antivirus products.

### Acknowledgments

The authors gratefully acknowledge funding from the German Federal Ministry of Education and Research (BMBF) under the projects APT-Sweeper (FKZ 16KIS0307) and VAMOS (FKZ 16KIS0534).

### References

[1] A. V. Aho and M. J. Corasick. Efficient string matching: An aid to bibliographic search. Communications of the ACM, 18(6):80–82, 1975.

[2] S. Alvarez and T. Zoller. The death of AV defense in depth? Revisiting anti-virus software. Presentation at CanSecWest, 2008.

[3] J. Aycock. Computer Viruses and Malware. Springer, 2006.

[4] M. Bailey, J. Oberheide, J. Andersen, Z. M. Mao, F. Jahanian, and J. Nazario. Automated classification and analysis of internet malware. In Proc. of International Symposium on Recent Advances in Intrusion Detection (RAID), 2007.

[5] M. K. Base. Importing and exporting your mail. Mbox files, visited Feb. 2017. http://kb.mozillazine.org/Importing_and_exporting_your_mail#Mbox_files

[6] J. Blackthorne, A. Bulazel, A. Fasano, P. Biernat, and B. Yener. AVLeak: Fingerprinting antivirus emulators through black-box testing. In Proc. of USENIX Workshop on Offensive Technologies (WOOT), 2016.

[7] M. Brückner and T. Scheffer. Stackelberg games for adversarial prediction problems. In Proc. of International Conference on Knowledge Discovery and Data Mining (KDD), 2011.

[8] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha. Towards automatic generation of vulnerability-based signatures. In Proc. of IEEE Symposium on Security and Privacy, 2006.

[9] M. Christodorescu and S. Jha. Testing malware detectors. In Proc. of International Symposium on Software Testing and Analysis (ISSTA), 2004.

[10] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and R. E. Bryant. Semantics-aware malware detection. In Proc. of IEEE Symposium on Security and Privacy, 2005.

[11] M. Christodorescu, S. Jha, and C. Kruegel. Mining specifications of malicious behavior. In Proc. of European Software Engineering Conference (ESEC), 2007.

[12] M. Christodorescu, J. Kinder, S. Jha, S. Katzenbeisser, and H. Veith. Software transformations to improve malware detection. Journal in Computer Virology (JICV), 3(4):253–265, 2007.

[13] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert. Zozzle: Fast and precise in-browser JavaScript malware detection. In Proc. of USENIX Security Symposium, 2011.

[14] P. Ferrie. Anti-unpacker tricks 1. Virus Bulletin, 2008.

[15] E. Filiol. Malware pattern scanning schemes secure against black-box analysis. 2(1):35–50, 2016.

[16] A. Fishman and M. Marquis-Boire. Popular security software came under relentless NSA and GCHQ attacks. https://theintercept.com/2015/06/22/nsa-gchq-targeted-kaspersky, 2015, visited Feb. 2017.

[17] P. Fogla and W. Lee. Evading network anomaly detection systems: formal reasoning and practical techniques. In Proc. of ACM Conference on Computer and Communications Security (CCS), 2006.

[18] P. Fogla, M. Sharif, R. Perdisci, O. Kolesnikov, and W. Lee. Polymorphic blending attacks. In Proc. of USENIX Security Symposium, 2006.

[19] K. Griffin, S. Schneider, X. Hu, and T. Chiueh. Automatic generation of string signatures for malware detection. In Proc. of International Symposium on Recent Advances in Intrusion Detection (RAID), 2009.

[20] G. Gu, R. Perdisci, J. Zhang, and W. Lee. BotMiner: Clustering Analysis of Network Traffic for Protocol- and Structure-Independent Botnet Detection. In Proc. of USENIX Security Symposium, 2008.

[21] G. Gu, J. Zhang, and W. Lee. BotSniffer: Detecting Botnet Command and Control Channels in Network Traffic. In Proc. of Network and Distributed System Security Symposium (NDSS), 2008.

[22] D. Gusfield. Algorithms on strings, trees, and sequences. Cambridge University Press, 1997.

[23] L. Huang, A. D. Joseph, B. Nelson, B. I. P. Rubinstein, and J. D. Tygar. Adversarial machine learning. In Proc. of ACM Workshop on Artificial Intelligence and Security (AISEC), 2011.

[24] Intel Corporation. Intel® architecture instruction set extensions programming reference. Technical report, Intel Corporation, 2013.

[25] S. Jana and V. Shmatikov. Abusing file processing in malware detectors for fun and profit. In Proc. of IEEE Symposium on Security and Privacy, 2012.

[26] C. Jaquier and A. Busleiman. Fail2ban. http://www.fail2ban.org, visited Feb. 2017.

[27] E. Kirda, C. Kruegel, G. Banks, G. Vigna, and R. A. Kemmerer. Behavior-based spyware detection. In Proc. of USENIX Security Symposium, 2006.

[28] C. Kolbitsch, P. Comparetti, C. Kruegel, E. Kirda, X. Zhou, and X. Wang. Effective and efficient malware detection at the end host. In Proc. of USENIX Security Symposium, 2009.

[29] J. Koret. Breaking antivirus software. Presentation at SYSCAN, 2014.

[30] C. Kruegel, D. Balzarotti, W. Robertson, and G. Vigna. Improving signature testing through dynamic data flow analysis. In Proc. of Annual Computer Security Applications Conference (ACSAC), 2007.

[31] A. Lanzi, D. Balzarotti, C. Kruegel, M. Christodorescu, and E. Kirda. AccessMiner: Using system-centric models for malware protection. In Proc. of ACM Conference on Computer and Communications Security (CCS), 2010.

[32] V. I. Levenshtein. Binary codes capable of correcting deletions, insertions, and reversals. Doklady Akademii Nauk SSSR, 163(4):845–848, 1966.

[33] Z. Li, M. Sandhi, Y. Chen, M.-Y. Kao, and B. Chavez. Hamsa: fast signature generation for zero-day polymorphic worms with provable attack resilience. In Proc. of IEEE Symposium on Security and Privacy, 2006.

[34] C. Linn and S. Debray. Obfuscation of executable code to improve resistance to static disassembly. In Proc. of ACM Conference on Computer and Communications Security (CCS), 2003.

[35] B. Min and V. Varadharajan. Design, implementation and evaluation of a novel anti-virus parasitic malware. In Proc. of ACM Symposium on Applied Computing (SAC), 2015.

[36] V. Mohan and K. W. Hamlen. Frankenstein: Stitching malware from benign binaries. In Proc. of USENIX Workshop on Offensive Technologies (WOOT), 2012.

[37] A. Moser, C. Kruegel, and E. Kirda. Limits of static analysis for malware detection. In Proc. of Annual Computer Security Applications Conference (ACSAC), 2007.

[38] D. Mutz, C. Kruegel, W. Robertson, G. Vigna, and R. A. Kemmerer. Reverse engineering of network signatures. In Proc. of the AusCERT Asia Pacific Information Technology Security Conference, 2005.

[39] S. Needleman and C. Wunsch. A general method applicable to the search for similarities in the amino acid sequence of two proteins. Journal of Molecular Biology, 48:443–453, 1970.

[40] J. Newsome, B. Karp, and D. Song. Polygraph: Automatically generating signatures for polymorphic worms. In Proc. of IEEE Symposium on Security and Privacy, 2005.

[41] J. Newsome, B. Karp, and D. Song. Paragraph: Thwarting signature learning by training maliciously. In Proc. of International Symposium on Recent Advances in Intrusion Detection (RAID), 2006.

[42] T. Ormandy. Sophail: A critical analysis of sophos antivirus. In Proc. of Black Hat USA, 2011.

[43] T. Ormandy. Analysis and exploitation of an eset vulnerability. http://googleprojectzero.blogspot.de/2015/06/analysis-and-exploitation-of-eset.html, 2015, visited Feb. 2017.

[44] T. Ormandy. Kaspersky: Mo unpackers, mo problems. http://googleprojectzero.blogspot.de/2015/09/kaspersky-mo-unpackers-mo-problems.html, 2015, visited Feb. 2017.

[45] T. Ormandy. Fireeye exploitation: Project zero’s vulnerability of the beast. http://googleprojectzero.blogspot.de/2015/12/fireeye-exploitation-project-zeros.html, 2015, visited Feb. 2017.

[46] T. Ormandy. AVG: "Web TuneUP" extension multiple critical vulnerabilities. https://bugs.chromium.org/p/project-zero/issues/detail?id=675, 2015, visited Feb. 2017.

[47] T. Ormandy. Symantec/norton antivirus aspack remote heap/pool memory corruption vulnerability cve-2016-2208. https://bugs.chromium.org/p/project-zero/issues/detail?id=820, 2016, visited Feb. 2017.

[48] R. Perdisci, D. Dagon, W. Lee, P. Fogla, and M. Sharif. Misleading worm signature generators using deliberate noise injection. In Proc. of IEEE Symposium on Security and Privacy, 2006.

[49] S. Porst. How to really obfuscate your pdf malware. ReCon, 2010.

[50] M. D. Preda, M. Christodorescu, S. Jha, and S. Debray. A semantics-based approach to malware detection. In Proc. of ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), 2007.

[51] M. D. Preda, M. Christodorescu, S. Jha, and S. Debray. A semantics-based approach to malware detection. ACM Transactions on Programming Languages and Systems (TOPLAS), 30(5), 2008.

[52] V. Rastogi, Y. Chen, and X. Jiang. DroidChameleon: evaluating android anti-malware against transformation attacks. In Proc. of ACM Symposium on Information, Computer and Communications Security (ASIACCS), 2013.

[53] V. Rastogi, Y. Chen, and X. Jiang. Catch me if you can: Evaluating android anti-malware against transformation attacks. IEEE Transactions on Information Forensics and Security, 9(1):99–108, 2014.

[54] M. Reiter and T. Yen. Traffic aggregation for malware detection. In Proc. of Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA), 2008.

[55] S. Rubin, S. Jha, and B. P. Miller. Automatic generation and analysis of NIDS attacks. In Proc. of Annual Computer Security Applications Conference (ACSAC), 2004.

[56] S. Rubin, S. Jha, and B. P. Miller. Language-based generation and evaluation of NIDS signatures. In Proc. of IEEE Symposium on Security and Privacy, 2005.

[57] Sourcefire Vulnerability Research Team. Creating signatures for ClamAV. Technical report, Sourcefire Inc., 2015.

[58] P. Szor. The art of computer virus research and defense. Symantec Press, 2005.

[59] S. Venkataraman, A. Blum, and D. Song. Limits of learning-based signature generation with adversaries. In Proc. of Network and Distributed System Security Symposium (NDSS), 2008.

[60] G. Vigna, W. Robertson, and D. Balzarotti. Testing network-based intrusion detection signatures using mutant exploits. In Proc. of ACM Conference on Computer and Communications Security (CCS), 2004.

[61] N. Šrndić and P. Laskov. Practical evasion of a learning-based classifier: A case study. In Proc. of IEEE Symposium on Security and Privacy, 2014.

[62] B. Wiki. DOS/STONED incident. https://en.bitcoin.it/wiki/DOS/STONED_incident, visited Feb. 2017.

[63] J. Wolf. OMG WTF PDF. Presentation at Chaos Computer Congress, 2010.

[64] F. Xue. Attacking antivirus. In Proc. of Black Hat Europe, 2008.

[65] M. Zheng, P. P. C. Lee, and J. C. S. Lui. ADAM: an automatic and extensible platform to stress test android antivirus system. In Proc. of Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA), 2012.