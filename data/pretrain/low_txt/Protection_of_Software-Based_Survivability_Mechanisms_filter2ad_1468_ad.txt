### Branch Replacement and Code Growth

As illustrated in Figures 10 and 11, the replacement of branches led to an increase in the size of the executable. Go, a program with a high density of branches, exhibited the most significant code growth following our transformation. Specifically, when 80% of direct branches were replaced, the executable size for Go and Li increased by a factor of 3, while Compress saw a more modest increase of approximately 10%. This difference can be attributed to the fact that Compress contains fewer static branches, thereby limiting the potential for code expansion.

We believe these findings are representative of many programs. On average, replacing 50% of the branches is expected to result in a fourfold increase in execution speed, accompanied by a near doubling of the program's size.

### Object Size and Branch Replacement

The object size of the three benchmarks (Go, Li, and Compress) increased as the percentage of branch replacements grew (see Figures 10 and 11). For Go, which is particularly branch-intensive, the largest code growth was observed. When 80% of direct branches were replaced, the executable size for Go and Li increased by a factor of 3, while Compress experienced a roughly 10% increase. The lower number of static branches in Compress resulted in less potential for code growth.

### Future Improvements and Trade-offs

In our experiments, we employed a random algorithm to select which branches to transform. A future improvement would involve using a more intelligent approach to:
a) Identify regions of the program that require greater protection from static analysis.
b) Selectively transform less frequently executed branches to minimize performance penalties.

Balancing these two criteria will be essential for achieving the most effective solution.

### Performance and Precision of Static Analysis

In this experiment, we tested our techniques against existing analysis tools, including NPIC [13] and PAF [18]. Both tools implement inter-procedural, flow-sensitive algorithms and perform control-flow analysis once without further refinement.

PAF successfully analyzed small sample programs but failed to handle some larger programs in the SPEC benchmarks. The reasons for failure were inconclusive, possibly due to alias analysis difficulties or the inability to manage the size of the input programs. In the test cases where PAF succeeded, it reported the maximum possible number of aliases, indicating that any pointer variable could potentially be aliased to every variable on the left-hand side of an assignment statement. Due to the size of the test programs, there was negligible difference in pre- and post-transformation analysis time. Our technique of making data-flow and control-flow co-dependent presented a fundamental challenge that PAF could not overcome.

NPIC, which includes features like function-pointer analysis and iterative inter- and intra-procedural analysis, showed similar limitations. IBM no longer maintains and distributes NPIC, so our experience was limited to analytical experiments. These experiments revealed that NPIC achieved little accuracy when the analysis terminated. In one instance, NPIC indicated that the elements of a global array could contain multiple possible values, and this information was never refined, leading to unanalyzable computations involving the array elements.

### Conclusion

Protecting trusted software from untrustworthy hosts is crucial for critical functions in modern networks. This paper addresses a significant class of attacks based on static analysis of binary programs. We present a strategy to defeat such analysis by tightly coupling control flow and data flow, making precise data-flow analysis dependent on control-flow information. This approach significantly expands analysis time and reduces precision to useless levels. Theoretical bounds show that analyzing transformed programs is NP-hard.

We developed a practical implementation of this transformation in the form of a compiler for ANSI C, which makes several changes to the program source, including degenerating control flow, creating aliases, and introducing data-dependent branches. These transformations can be applied to any intermediate representation with explicit memory references.

Our proof-of-concept experiments on sample programs demonstrated that the transformed versions defeat currently available static-analysis tools. Although these results are not definitive, they indicate a promising approach to defeating static analysis. The described transformations also produce programs with a high level of code diversity, enhancing resilience to class attacks.

### Acknowledgments

The authors thank Dr. Jim Cohoon for insightful discussions. This work was partially sponsored by the Defense Advanced Research Projects Agency and Rome Laboratory, Air Force Materiel Command, USAF, under agreement number F30602-96-1-0314. The views and conclusions are those of the authors and do not necessarily represent the official policies or endorsements of the Defense Advanced Research Projects Agency, Rome Laboratory, or the U.S. Government.

### References

1. Aigner, G. et al. "The SUIF2 Compiler Infrastructure", Documentation of the Computer Systems Laboratory, Stanford University.
2. Aucsmith, D., "Tamper Resistant Software", Proceedings of the 1st Information Hiding Workshop, Cambridge, England, 1996.
3. Ball, T. and J. R. Larus. "Optimally Profiling and Tracing Programs", ACM Transactions on Programming Languages and Systems, Vol. 16, No. 4, July 1994, pp. 1319-1360.
4. Collberg, C., C. Thomborson, and D. Low, "Breaking Abstractions and Unstructuring Data Structures", IEEE International Conference on Computer Languages, Chicago, May 1998.
5. Collberg, C., C. Thomborson, and D. Low, "A Taxonomy of Obfuscating Transformations", Techreport 148, Department of Computer Science, University of Auckland, July 1997.
6. Forrest, S. and A. Soma, "Building Diverse Computer Systems", in the 1996 Proceedings of the Hot Topics of Operating Systems.
7. Hohl, F., "Time Limited Blackbox Security: Protecting Mobile Agents from Malicious Hosts", in Lecture Notes in Computer Science, vol. 1419, Mobile Agents and Security. Edited by G. Vigna. Springer-Verlag, 1998.
8. Hitunen, M. and R. D. Schlichting, "Adaptive Distributed and Fault-Tolerant Systems" International Journal of Computer Systems Science and Engineering, vol. 11, No. 5, pp. 125-133, September 1996.
9. Knight, J., K. Sullivan, M. Elder, and C. Wang, "Survivability Architectures: Issues and Approaches" in Proceedings: DARPA Information Survivability Conference and Exposition. IEEE Computer Society Press. pp. 157-171.
10. Larus, J., "Efficient Program Tracing", Computer, Vol. 26, No. 5, May 1993, pp. 52-61.
11. Muchnick, S., "Advanced Compiler Design Implementation", Morgan Kaufmann, 1997.
12. Myers, E., "A Precise Inter-procedural Data Flow Algorithm", in the conference record of the Eighth POPL. Williamsburg, VA. January, 1981. pp. 219-230.
13. Hind, M., M. Burke, P. Carini and J. Choi, "Inter-procedural Pointer Analysis", ACM Transactions on Programming Languages and Systems, Vol. 21, No. 4, July 1999, pp. 848-894.
14. Horwitz, S., "Precise flow-insensitive may-alias analysis is NP-Hard", ACM Transactions on Programming Languages and Systems, Vol. 19, No. 1, pp. 1-6.
15. Landi, W., "Interprocedural Aliasing in the Presence of Pointers", Ph.D. Dissertation, Rutgers University, 1992.
16. Landi, W., "Undecidability of Static Analysis", ACM Letters on Programming Languages and Systems, Vol. 1, No. 4, December 1992, pp. 323-337.
17. Landi, W. and B. Ryder, "A Safe Approximation Algorithm for Interprocedural Pointer Analysis", Techreport, Rutgers University, 1991.
18. The ProLangs Analysis Framework (PAF). Rutgers University. http://www.prolangs.rutgers.edu/~public
19. Rosen, B., "Data flow analysis for procedural languages", Journal of the ACM, Vol. 26, No. 2, pp. 322-344.
20. Sander, T., and C. Tschudin, "Protecting Mobile Agents Against Malicious Hosts", in the Proceedings of the 1998 IEEE Symposium on Research in Security and Privacy, Oakland, 1998.
21. Wang, C., "A Security Architecture for Survivability Mechanisms", Ph.D. Dissertation, October 2000, University of Virginia.
22. Wang, C., Hill, J., Knight, J., and Davidson, J. "Software Protection in Malicious Environments". CS Technical Report. CS-00-12. Department of Computer Science, University of Virginia.