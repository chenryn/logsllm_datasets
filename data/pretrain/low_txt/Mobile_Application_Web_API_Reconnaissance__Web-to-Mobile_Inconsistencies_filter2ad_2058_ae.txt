### Introduction

The proliferation of Internet-connected devices, such as home and office security systems, cars, classroom audio-visual equipment, and home appliances (e.g., thermostats, refrigerators, televisions), has made it possible to control these devices via mobile phones. However, this increased connectivity also highlights the critical need for securing the Web API endpoints of these devices against potential hijacking vulnerabilities.

### A. Defense Guidelines

In the modern era, web APIs have become a generic service that can scale to support multiple client platforms, including web and mobile applications. The enhanced capabilities of mobile devices have led some web service providers to defer validation logic to the clients, often overlooking subtle inconsistencies and vulnerabilities that may arise. Based on our findings, we propose the following guidelines:

- **Never Trust the Client:** Do not rely on client-side validation. The server must be at least as strict as the client in validating inputs.
- **Handle and Reject Input Properly:** The server should be prepared to handle and reject input regardless of the client, making no assumptions about the client's behavior.
- **Implement Authentication and Authorization Carefully:** Ensure that authentication and authorization logic are robustly implemented on the server side.
- **Test Client-Side Validation Thoroughly:** Ensure consistency between client-side and server-side validation logic. Tools like WARDroid can help identify potential inconsistencies.
- **Sanitize Data:** Both clients and servers should sanitize inbound and outbound data, especially when the data is used interchangeably on mobile and web clients.

While our focus has been on the issues arising from inconsistent input validation logic, addressing these problems will require a concerted effort and a paradigm shift.

### B. Limitations

- **Obfuscated Code:** Many real-world apps do not obfuscate their code, but some use tools like Proguard to rename identifiers, making reverse engineering more difficult. WARDroid does not handle obfuscated application code, though this is a planned feature for future work.
- **Native and JNI Code:** WARDroid does not analyze native code or Java Native Interface (JNI) code, which is outside our current scope.
- **State Changes:** WARDroid cannot reason about state changes and values that originate from previous API requests. Previous works, such as [21] and [18], propose methodologies to address this, and WARDroid could be retrofitted with this feature to improve accuracy.
- **WebViews:** WARDroid's analysis focuses on native mobile code and does not consider web API accesses facilitated through WebView-loaded JavaScript code in hybrid mobile apps. Our recent work identifies that over 90% of apps include at least one WebView, and we provide an approach for uncovering JavaScript Bridge functionality and semantics in hybrid mobile apps.
- **Authentication:** WARDroid cannot evaluate requests requiring user authentication unless test credentials are hardcoded into the request template. This is a common challenge in static analysis-based systems, necessitating some level of human intervention.

### C. Convergence of Web and Mobile

In today’s interconnected world, the web and mobile platforms share common ground in providing security and privacy. This work is inspired by previous research on the web platform, such as NoTamper [3] and Waptec [7], which address similar goals in the context of browser-based web applications. The integration of mobile and web into new complex systems, such as web service APIs, web-based operating system environments, and hybrid applications, presents a new frontier in security and privacy research.

### IX. Related Work

Our work builds on several previous studies in the area of program analysis on the Android framework, particularly using tools like Flowdroid [15] and Soot [11]. These tools have been applied to detect privacy leaks, malware, and other vulnerabilities. In this work, we use program analysis techniques to analyze a mobile application’s validation logic as a model of its backend server validation logic.

- **Web Application Analysis:** Our work is inspired by research into parameter tampering vulnerabilities in web applications. Tools like Waptec [7] and NoTamper [3] automatically identify and generate exploits for these vulnerabilities. Similarly, WARDroid analyzes inconsistencies in the loose coupling between mobile apps and their backend web API servers.
- **SIFON [27]:** Analyzes web APIs to determine the extent of oversharing of user information where the server sends unused information to the app. Other related works, such as Luo et al. [28] and NoFrak [29], address security issues arising from the use of WebView components.
- **Static Analysis:** Our work leverages various static analysis techniques and tools, which are scalable and achieve high code coverage. We use FlowDroid [15] to reconstruct and extend the inter-procedural control flow graph (ICFG) as an augmented program dependence graph.
- **Protocol Reverse Engineering:** Our work shares similarities with protocol reverse engineering [31], [32], but our goal is more aligned with [33], focusing on uncovering specific server-side vulnerabilities.
- **Input Generation and Symbolic Execution:** We use concepts from Intellidroid [34] and TriggerScope [35] to implement symbolic execution and solve constraints using Z3 libraries.
- **App Network Traffic:** Previous works analyze app network traffic, but our focus is on the network layer to fingerprint apps through raw packet-level inspection. FLOWR [36] and NetworkProfiler [37] are examples of such research.

### X. Conclusion

Modern mobile applications rely on web services for their functionality, but the disparate nature of mobile and web platforms can lead to input validation inconsistencies, causing serious security issues. We presented WARDroid, a framework that uses static program analysis and symbolic execution to model input validation logic between mobile apps and their remote web API servers. WARDroid extracts and validates web API logic implementation in mobile apps, uncovering inconsistencies that can expose significant vulnerabilities. Our analysis of 10,000 apps revealed a significant portion with web API hijacking opportunities, affecting millions of mobile app users. This problem is not limited to Android apps but extends to any client utilizing deployed web API services, including iOS, Windows, and web applications. This work highlights the existence and pervasiveness of this ongoing research problem and aims to motivate further research in this area.

### Acknowledgment

This material is based upon work supported in part by the National Science Foundation (NSF) under Grant numbers 1314823 and 1700544. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the NSF.

### References

[1] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee, “Hypertext transfer protocol–http/1.1,” Tech. Rep., 1999.

[2] “OWASP Mobile Threats,” https://www.owasp.org/index.php/Projects/OWASP_Mobile_Security_Project_-_Top_Ten_Mobile_Risks.

[3] P. Bisht, T. Hinrichs, N. Skrupsky, R. Bobrowicz, and V. Venkatakrishnan, “Notamper: automatic blackbox detection of parameter tampering opportunities in web applications,” in Proceedings of the 17th ACM conference on Computer and communications security. ACM, 2010, pp. 607–618.

[4] S. Stamm, B. Sterne, and G. Markham, “Reining in the web with content security policy,” in Proceedings of the 19th international conference on World wide web. ACM, 2010, pp. 921–930.

[5] K. Singh, A. Moshchuk, H. J. Wang, and W. Lee, “On the incoherencies in web browser access control policies,” in 2010 IEEE Symposium on Security and Privacy. IEEE, 2010, pp. 463–478.

[6] A. Mendoza, K. Singh, and G. Gu, “What is wrecking your data plan? a measurement study of mobile web overhead,” in Computer Communications (INFOCOM), 2015 IEEE Conference on. IEEE, 2015, pp. 2740–2748.

[7] P. Bisht, T. Hinrichs, N. Skrupsky, and V. Venkatakrishnan, “Waptec: whitebox analysis of web applications for parameter tampering exploit construction,” in Proceedings of the 18th ACM conference on Computer and communications security. ACM, 2011, pp. 575–586.

[8] A. Sudhodanan, A. Armando, R. Carbone, L. Compagna et al., “Attack patterns for black-box security testing of multi-party web applications.” in NDSS, 2016.

[9] A. Barth, C. Jackson, and J. C. Mitchell, “Robust defenses for cross-site request forgery,” in Proceedings of the 15th ACM conference on Computer and communications security. ACM, 2008, pp. 75–88.

[10] R. Vallee-Rai and L. J. Hendren, “Jimple: Simplifying java bytecode for analyses and transformations,” 1998.

[11] R. Vallée-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam, and V. Sundaresan, “Soot-a java bytecode optimization framework,” in Proceedings of the 1999 conference of the Centre for Advanced Studies on Collaborative research. IBM Press, 1999, p. 13.

[12] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth, “Taintdroid: an information-flow tracking system for realtime privacy monitoring on smartphones,” ACM Transactions on Computer Systems (TOCS), vol. 32, no. 2, p. 5, 2014.

[13] L. De Moura and N. Bjørner, “Z3: An efficient smt solver,” Tools and Algorithms for the Construction and Analysis of Systems, pp. 337–340, 2008.

[14] S. Arzt, S. Rasthofer, and E. Bodden, “Susi: A tool for the fully automated classification and categorization of android sources and sinks,” University of Darmstadt, Tech. Rep. TUDCS-2013-0114, 2013.

[15] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel, “Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps,” Acm Sigplan Notices, vol. 49, no. 6, pp. 259–269, 2014.

[16] J. C. King, “Symbolic execution and program testing,” Communications of the ACM, vol. 19, no. 7, pp. 385–394, 1976.

[17] Y. Zheng, X. Zhang, and V. Ganesh, “Z3-str: A z3-based string solver for web application analysis,” in Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering. ACM, 2013, pp. 114–124.

[18] H. Choi, J. Kim, H. Hong, Y. Kim, J. Lee, and D. Han, “Extractocol: Automatic extraction of application-level protocol behaviors for android applications,” ACM SIGCOMM Computer Communication Review, vol. 45, no. 4, pp. 593–594, 2015.

[19] G. Yang, A. Mendoza, J. Zhang, and G. Gu, “Precisely and scalably vetting javascript bridge in android hybrid apps,” in Proceedings of The 20th International Symposium on Research on Attacks, Intrusions and Defenses (RAID’17), September 2017.

[20] Y. Cao, Y. Fratantonio, A. Bianchi, M. Egele, C. Kruegel, G. Vigna, and Y. Chen, “Edgeminer: Automatically detecting implicit control flow transitions through the android framework.” in NDSS, 2015.

[21] S. Rasthofer, S. Arzt, M. Miltenberger, and E. Bodden, “Harvesting runtime values in android applications that feature anti-analysis techniques,” 2016.

[22] R. Wang, S. Chen, X. Wang, and S. Qadeer, “How to shop for free online–security analysis of cashier-as-a-service based web stores,” in Security and Privacy (SP), 2011 IEEE Symposium on. IEEE, 2011, pp. 465–480.

[23] K. Allix, T. F. Bissyandé, J. Klein, and Y. Le Traon, “Androzoo: Collecting millions of android apps for the research community,” in Mining Software Repositories (MSR), 2016 IEEE/ACM 13th Working Conference on. IEEE, 2016, pp. 468–471.

[24] “Appbrain android statistics,” https://www.appbrain.com//.

[25] N. Viennot, E. Garcia, and J. Nieh, “A measurement study of google play,” in ACM SIGMETRICS Performance Evaluation Review, vol. 42, no. 1. ACM, 2014, pp. 221–233.

[26] E. Lafortune et al., “Proguard,” http://proguard.sourceforge.net, 2004.

[27] W. Koch, A. Chaabane, M. Egele, W. Robertson, and E. Kirda, “Semi-automated discovery of server-based information oversharing vulnerabilities in android applications,” in Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, 2017, pp. 147–157.

[28] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin, “Attacks on webview in the android system,” in Proceedings of the 27th Annual Computer Security Applications Conference. ACM, 2011, pp. 343–352.

[29] S. Pooryousef and M. Amini, “Fine-grained access control for hybrid mobile applications in android using restricted paths,” in Information Security and Cryptology (ISCISC), 2016 13th International Iranian Society of Cryptology Conference on. IEEE, 2016, pp. 85–90.

[30] C. Zuo and Z. Lin, “Smartgen: Exposing server urls of mobile apps with selective symbolic execution,” in Proceedings of the 26th International Conference on World Wide Web. International World Wide Web Conferences Steering Committee, 2017, pp. 867–876.

[31] J. Caballero, P. Poosankam, C. Kreibich, and D. Song, “Dispatcher: Enabling active botnet infiltration using automatic protocol reverse-engineering,” in Proceedings of the 16th ACM conference on Computer and communications security. ACM, 2009, pp. 621–634.

[32] P. M. Comparetti, G. Wondracek, C. Kruegel, and E. Kirda, “Prospex: Protocol specification extraction,” in Security and Privacy, 2009 30th IEEE Symposium on. IEEE, 2009, pp. 110–125.

[33] G. Pellegrino and D. Balzarotti, “Toward black-box detection of logic flaws in web applications.” in NDSS, 2014.

[34] M. Y. Wong and D. Lie, “Intellidroid: A targeted input generator for the dynamic analysis of android malware,” in Proceedings of the Annual Symposium on Network and Distributed System Security (NDSS), 2016.

[35] Y. Fratantonio, A. Bianchi, W. Robertson, E. Kirda, C. Kruegel, and G. Vigna, “Triggerscope: Towards detecting logic bombs in android applications,” in Security and Privacy (SP), 2016 IEEE Symposium on. IEEE, 2016, pp. 377–396.

[36] Q. Xu, T. Andrews, Y. Liao, S. Miskovic, Z. M. Mao, M. Baldi, and A. Nucci, “Flowr: a self-learning system for classifying mobile application traffic,” ACM SIGMETRICS Performance Evaluation Review, vol. 42, no. 1, pp. 569–570, 2014.

[37] S. Dai, A. Tongaonkar, X. Wang, A. Nucci, and D. Song, “Networkprofiler: Towards automatic fingerprinting of android apps,” in INFOCOM, 2013 Proceedings IEEE. IEEE, 2013, pp. 809–817.