### Redirecting the User to the Subject Service

The final step in this process involves exchanging an "access code" for a token with the wESO service, followed by issuing an access token for the subject service (refer to Appendix D for more details). These modifications amount to 122 lines of JavaScript code. The confirmation screen was implemented using a 45-line Jade template. Similar to the authorization strategies discussed in Section 6.1, all changes are localized. The OAuth 2.0 flow we modify is typically implemented once per service but can be invoked with different scopes to delegate access to various sets of APIs and operations.

### Case Studies

We describe Web ESOs that track situations inspired by the examples in Section 2: "allow access but log the operation," "allow access only when the user is not at home," and "allow access only when the user is in the room." For each situation and ESO, we specify:
1. The return values of `get_id`.
2. The protected APIs used by the ESO.
3. ESO configuration values.
4. Its offline behavior and the behavior of `is_active`.

We have implemented the first two ESOs, which track common situations. The third ESO, while not commonly available in IoT frameworks, still has interesting use cases.

Appendix C also describes an alternative ESO for detecting the "user is away" situation using Nest and SmartThings presence sensors, and two ESOs for notifying the user via (a) push notifications, and (b) push notifications and blinking SmartThings lights.

#### Logging Accesses to a Google Drive Spreadsheet

**Identity Values:**
- `situation_name: logAction`
- `ESO_description: "Log access operations to a Google Drive spreadsheet."`

**Protected APIs and Configuration:**
- This ESO uses Google Drive with the scope `spreadsheets`.
- It is configured with the name of the spreadsheet and the sheet to use.

**Behavior:**
- `is_active(s, a)` logs `s`'s access to `a` with a timestamp and returns "active" only if the log operation succeeds (it is "fail-safe").
- **Use Cases:** In Section 2.2, we explain why this is a particularly useful ESO.
- **Delay Induced by Logging:** We extended the setting from Section 6.2 with this ESO to measure the delay in access operations due to the ESO constraint. When performed from our campus network, the logging operation takes about 0.5 seconds (averaged over 60 requests).

#### Home/Away Detection Using Android Geofencing

**Identity Values:**
- `situation_name: HomeAway`
- `ESO_description: "Home presence detection using phone geolocation."`

**Protected APIs and Configuration:**
- The user must install an Android app that uses location services.
- The app requires the `ACCESS_FINE_LOCATION` and `WAKE_LOCK` permissions, the latter to prevent the CPU from entering sleep mode when handling location updates.
- The user configures the location of their home in the app.

**Behavior:**
- The Android app uses the geofencing API [18] to track if the user is in close proximity to their home (a location configured by the user).
- It registers a listener ("pending intent") with the geofencing server on the device for the event of the user coming within 600 feet of their home coordinates.
- On server updates, the ESO backend is updated via HTTP (see Figure 6.3).
- `is_active(s, a)` returns true when the app indicates that the user is away.

#### Family Member in the Room Using OpenCV Face Detection and Recognition

**Identity Values:**
- `situation_name: PersonDetector`
- `ESO_description: "Apply a face classifier to captured video to detect when specific family members are in the room."`

**Protected APIs and Configuration:**
- Requires an OAuth 2.0 access token to the Nest Camera, with access scope `camera_read`.
- Configuring the ESO includes supplying several images of family members to train the classifier.

**Behavior:**
- First, identify a face in the camera feed using OpenCV’s face detection API.
- Then, use the classifier trained to identify faces of family members.
- `is_active(s, a)` returns "active" when a family member is present.
- **Use Cases:** For example, a home monitoring camera can be used to record nannies, cleaning personnel, delivery personnel [59], and any untrusted person around the house, but only when a trusted family member is not in the room. It could also detect children in the room and revoke access from a videoconferencing app (see Section 2.2).

### Related Work

#### Access Control in Appified Environments

Many proposals for tightening security policies in appified environments make assumptions about the apps’ structure or runtime. Some build on language-specific static analyses [3, 4, 24, 27, 33, 42] or dynamic analyses in Android’s Dalvik/Art virtual machine [23, 33, 52] to detect and prevent unwanted information flows. Static analysis has been suggested for SmartThings as well [11]. Other works employ Android’s inter-process communication and/or kernel access monitors to mitigate collusion and confused deputy attacks [7, 8, 10, 21, 26] for mandatory access control [10, 60] and information flow control (IFC) [36, 40, 69]. For SmartThings, runtime monitoring-based IFC [29] and data provenance collection [71] have been considered. Other approaches monitor the kernel [10, 60].

NLP-based approaches have been proposed to infer the desired policy from the app-market descriptions for Android [50] and SmartThings [68] apps.

Wijesekera et al. [72] found that subdividing dynamically granted permissions according to the runtime information (e.g., “is the app in the background?”) can sometimes be effective in balancing fine granularity of permissions and the need to prompt the user. PmP [13] follows this approach but focuses on informing the users about access requests from third-party libraries. Wijesekera et al. [73] use even finer-grained permissions but offload some of the decisions to machine learning classifiers. In the IoT domain, ContexIoT [41] subdivides dynamically granted permissions for SmartThings SmartApps according to the app’s control flow and the source of the data used in permission-protected operations.

In IoT, however, apps (subjects) are typically entirely external to the access-control system, which thus cannot monitor their execution. Their code is often proprietary, and they are not built in a specific programming framework or distributed through a centralized app market that can facilitate inspection and vetting.

#### Situational Access Control

Dating back to the early 2000s, multiple papers suggested designs for role-based access control (RBAC) systems that add explicit situation-dependent constraints to policies. These are specific to the RBAC setting [17, 49, 51] and most require situation tracking to run locally [5, 44, 51, 75, 76].

Explicit situation-dependent constraints for Android have been proposed in CRePE [16], MOSES [56], FlaskDroid [9], Shebaro et al. [57], and Apex [46]. Policy rules are activated and de-activated dynamically by configurable detectors (“context detectors” in CRePE and MOSES, “dynamic constraints” in Apex, “context providers” in FlaskDroid and Shebaro et al.). These approaches all assume that situation tracking is done on the Android platform and using its capabilities. In particular, they define situational predicates using Android sensors. In CRePE, authorized third parties activate situations via SMS. In FlaskDroid, trackers are special plugins running on the Android framework API. None of these approaches support the encapsulation and segregation required for the IoT situation trackers (see Section 1.1).

For IoT, Yu et al. [74] argue for monitoring access requests and enforcing situational policies at the network level rather than on the devices. This is complementary to our ESO-based approach.

#### Other Attacks and Defenses in IoT Frameworks

Many works focus on IoT security issues other than access control. Fernandes et al. [28] found flaws in the SmartThings app security model that lead to overprivilege and demonstrated the resulting attacks. Apthorpe et al. [1] analyze devices’ encrypted traffic and suggest defenses. Simpson et al. [58] propose a hub-based system for detecting and preventing vulnerability exploitation in IoT devices. FACT [45] detects "functionalities" that devices and resources support, isolates them from one another, and enforces functionality-level rules. Subratovich et al. [66] show how IFTTT configuration can introduce non-intuitive, unexpected information flows, and that users often define and use recipes that not only enable but also automate and streamline privacy and integrity violations. DTAP [30] offers provenance verification for triggers in trigger-action platforms (such as IFTTT) while substantially reducing their required privileges.

#### Delegated Access Control

Constrained bearer-credential protocols such as SPKI/SDSI [22] and Macaroons [6] are complementary to ESOs. They can be used as alternative enforcement modes that query ESOs in delegation-based systems, as discussed in Section 3.2.

### Conclusion

We identified a fundamental problem with situational access control in today’s IoT: situation tracking is entangled with the enforcement of access-control policies. This leads to overprivileging, inefficiency, and inability to enforce common policies. The root cause is the design of existing IoT access-control frameworks, which view IoT as a centralized platform similar to a smartphone app framework. We proposed and implemented environmental situation oracles (ESOs) as a simple and generic solution suitable for access control at all layers of the IoT software stack. We concretely demonstrated the benefits of ESOs with prototypes for the resource layer and Web-services layer of the IoT stack.

### Acknowledgements

Roei Schuster and Eran Tromer are members of the Check Point Institute for Information Security. This work was also supported by the Blavatnik Interdisciplinary Cyber Research Center (ICRC); DARPA and ARO under Contract #W911NF-15-C-0236; Israeli Ministry of Science and Technology; Leona M. & Harry B. Helmsley Charitable Trust; Schmidt Sciences; and NSF awards 1423306, 1445424, 1611770, and 1612872. Thanks to Tom Tytunovich for sharing his expertise in Web backend technologies.

### References

[1] Noah Apthorpe, Dillon Reisman, Srikanth Sundaresan, Arvind Narayanan, and Nick Feamster. Spying on the Smart Home: Privacy Attacks and Defenses on Encrypted IoT Traffic. arXiv preprint arXiv:1708.05044 2017.

[2] Stefan-Ciprian Arseni, Simona Halunga, Octavian Fratu, Alexandru Vulpe, and George Suciu. Analysis of the Security Solutions Implemented in Current Internet of Things Platforms. In IEEE Grid, Cloud & High Performance Computing in Science (ROLCG) 2015.

[3] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014. FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps. ACM SIGPLAN Notices 49, 6 (2014), 259–269.

[4] Leonid Batyuk, Markus Herpich, Seyit Ahmet Camtepe, Karsten Raddatz, Aubrey-Derrick Schmidt, and Sahin Albayrak. Using Static Analysis for Automatic Assessment and Mitigation of Unwanted and Malicious Activities within Android Applications. In Malicious and Unwanted Software (MALWARE) 2011.

[5] Rafae Bhatti, Elisa Bertino, and Arif Ghafoor. 2005. A Trust-based Context-aware Access Control Model for Web-services. Distributed and Parallel Databases 18, 1 (2005), 83–105.

[6] Arnar Birgisson, Joe Gibbs Politz, Ulfar Erlingsson, Ankur Taly, Michael Vrable, and Mark Lentczner. Macaroons: Cookies with Contextual Caveats for Decentralized Authorization in the Cloud. In Network and Distributed System Security Symposium (NDSS) 2014.

[7] Sven Bugiel, Lucas Davi, Alexandra Dmitrienko, Thomas Fischer, and Ahmad-Reza Sadeghi. XmAndroid: A New Android Evolution to Mitigate Privilege Escalation Attacks. Technische Universität Darmstadt, Technical Report TR-2011-04 2011.

[8] Sven Bugiel, Lucas Davi, Alexandra Dmitrienko, Thomas Fischer, Ahmad-Reza Sadeghi, and Bhargava Shastry. Towards Taming Privilege-Escalation Attacks on Android. In Network and Distributed System Security Symposium (NDSS) 2012.

[9] Sven Bugiel, Stephan Heuser, and Ahmad-Reza Sadeghi. Flexible and Fine-grained Mandatory Access Control on Android for Diverse Security and Privacy Policies. In USENIX Security Symposium 2013.

[10] Sven Bugiel, Stephan Heuser, and Ahmad-Reza Sadeghi. Towards a Framework for Android Security Modules: Extending SE Android Type Enforcement to Android Middleware. Technische Universität Darmstadt, Technical Report TUD-CS-2012-0231 2012.

[11] Z Berkay Celik, Leonardo Babun, Amit K Sikder, Hidayet Aksu, Gang Tan, Patrick McDaniel, and A Selcuk Uluagac. Sensitive Information Tracking in Commodity IoT. arXiv preprint arXiv:1802.08307 2018.

[12] Eric Y Chen, Yutong Pei, Shuo Chen, Yuan Tian, Robert Kotcher, and Patrick Tague. OAuth Demystified for Mobile Application Developers. In ACM Conference on Computer and Communications Security (CCS) 2014.

[13] Saksham Chitkara, Nishad Gothoskar, Suhas Harish, Jason I Hong, and Yuvraj Agarwal. Does this App Really Need My Location?: Context-Aware Privacy Management for Smartphones. Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies (IMWUT) 2017.

[14] SmartThings Community. 2016. Fix for Android Presence Arrival Problems. https://community.smartthings.com/t/fix-for-android-presence-arrival-problems/61021. (2016). Accessed: Jan 2018.

[15] SmartThings Community. 2018. The Many Ways of Detecting Presence. https://community.smartthings.com/t/faq-the-many-ways-of-detecting-presence/51563. (2018). Accessed: Jan 2018.

[16] Mauro Conti, Vu Thien Nga Nguyen, and Bruno Crispo. CRePE: Context-Related Policy Enforcement for Android. In Information Security Conference (ISC) 2010.

[17] Michael J Covington, Wende Long, Srividhya Srinivasan, Anind K Dev, Mustaque Ahamad, and Gregory D Abowd. Securing Context-aware Applications Using Environment Roles. In ACM Symposium on Access Control Models and Technologies (SACMAT) 2001.

[18] Android Developer. 2018. Android Geofencing API. https://developer.android.com/training/location/geofencing.html. (2018). Accessed: March 2018.

[19] Android Developer. 2018. Permissions in Android 6.0. https://developer.android.com/training/permissions/usage-notes.html. (2018). Accessed: Feb 2018.

[20] Facebook Developers. 2018. Facebook Permissions. https://developers.facebook.com/docs/facebook-login/permissions/. (2018). Accessed: 2018-01-08.

[21] Michael Dietz, Shashi Shekhar, Yuliy Pisetsky, Anhei Shu, and Dan S Wallach. QUIRE: Lightweight Provenance for Smart Phone Operating Systems. In USENIX Security Symposium 2011.

[22] Carl M Ellison. 2011. SPKI. In Encyclopedia of Cryptography and Security. Springer, 1243–1245.

[23] William Enck, Peter Gilbert, Seungyeop Han, Vasant Tendulkar, Byung-Gon Chun, Landon P Cox, Jaeyeon Jung, Patrick McDaniel, and Anmol N Sheth. TaintDroid: An Information-flow Tracking System for Realtime Privacy Monitoring on Smartphones. ACM Transactions on Computer Systems (TOCS) 2014.

[24] William Enck, Damien Octeau, Patrick D McDaniel, and Swarat Chaudhuri. A Study of Android Application Security. In USENIX Security Symposium 2011.

[25] Adrienne Porter Felt, Elizabeth Ha, Serge Egelman, Ariel Haney, Erika Chin, and David Wagner. Android Permissions: User Attention, Comprehension, and Behavior. In ACM Symposium on Usable Privacy and Security (SOUPS) 2012.

[26] Adrienne Porter Felt, Helen J Wang, Alexander Moshchuk, Steve Hanna, and Erika Chin. Permission Re-Delegation: Attacks and Defenses. In USENIX Security Symposium 2011.

[27] Yu Feng, Saswat Anand, Isil Dillig, and Alex Aiken. Apposcopy: Semantics-based Detection of Android Malware Through Static Analysis. In ACM International Symposium on Foundations of Software Engineering (SIGSOFT) 2014.

[28] Earlence Fernandes, Jaeyeon Jung, and Atul Prakash. Security Analysis of Emerging Smart Home Applications. In IEEE Symposium on Security and Privacy 2016.

[29] Earlence Fernandes, Justin Paupore, Amir Rahmati, Daniel Simionato, Mauro Conti, and Atul Prakash. FlowFence: Practical Data Protection for Emerging IoT Application Frameworks. In USENIX Security Symposium 2016.

[30] Earlence Fernandes, Amir Rahmati, Jaeyeon Jung, and Atul Prakash. Decentralized Action Integrity for Trigger-Action IoT Platforms. In Network and Distributed System Security Symposium (NDSS) 2018.

[31] Earlence Fernandes, Amir Rahmati, Jaeyeon Jung, and Atul Prakash. Decoupled-IFTTT: Constraining Privilege in Trigger-Action Platforms for the Internet of Things. arXiv preprint arXiv:1707.00405 2017.

[32] Earlence Fernandes, Amir Rahmati, Jaeyeon Jung, and Atul Prakash. Security Implications of Permission Models in Smart-Home Application Frameworks. IEEE Symposium on Security and Privacy 2017.

[33] Michael I Gordon, Deokhwan Kim, Jeff H Perkins, Limei Gilham, Nguyen Nguyen, and Martin C Rinard. Information Flow Analysis of Android Applications in DroidSafe. In Network and Distributed System Security Symposium (NDSS) 2015.

[34] The Guardian. 2017. BBC Interviewee Interrupted by His Children on Air. https://www.theguardian.com/media/video/2017/mar/10/bbc-correspondent-interrupted-by-his-children-live-on-air-video. (2017). Accessed: Jan 2018.

[35] Weijia He, Maximilian Golla, Roshni Padhi, Jordan Ofek, Markus Dürmuth, Earlence Fernandes, and Blase Ur. Rethinking Access Control and Authentication