### Introduction

Cross-site Scripting (XSS) attacks in web applications have garnered significant attention in recent years, with a wide range of research focused on detecting and mitigating injected JavaScript [43]. Various methods have been developed to protect users from XSS, including detection mechanisms [23, 40, 30, 39] and educational initiatives for developers [31, 11]. The prevalence of XSS attacks has led major browsers like Microsoft Internet Explorer 8 and Google Chrome to incorporate XSS-detection features, even if the visited web application does not actively protect itself [8, 33].

### Insecure Use of Flash Functionality

The problem of performing XSS attacks through insecure Flash API methods was first highlighted by Jagdale [17], who provided examples of vulnerable ActionScript code. Jagdale's study found that out of the first 200 SWF files returned by a Google search for "filetype:swf inurl:clickTag," 120 were vulnerable. Additionally, many tools that automatically generate SWFs, including those by Adobe, were producing applications susceptible to XSS attacks. Bailey [6] confirmed Jagdale's findings and provided examples of high-profile websites hosting SWFs vulnerable to Remote File Inclusion (RFI) attacks, which could be exploited for XSS.

### Tools for Detecting Flash Vulnerabilities

Several tools have been developed to detect vulnerabilities in Flash applications. **SWFScan** [15] decompiles a Flash application and performs static analysis to identify hardcoded URLs, passwords, insecure cross-domain permissions, and coding practices that may lead to XSS. **SWFIntruder** [36] is a semi-automatic tool that tests for XSS vulnerabilities in Flash applications.

### FlashOver: Automated Vulnerability Discovery

**FlashOver** stands out from earlier work as it is the first system capable of discovering "zero-day" vulnerabilities in a fully automated manner without relying on naming conventions or user guidance. While FlashOver may miss some vulnerabilities due to incomplete static analysis, it produces no false positives, as any reported vulnerability is only flagged if it has been successfully exploited.

### Insecure Cross-Domain Policies

Another security issue in the Flash platform is the existence of insecure cross-domain policies. The Flash plugin can conduct cross-domain requests, bypassing the Same-Origin policy enforced in JavaScript. To mitigate this, websites must place a cross-domain policy file in their root directory, specifying which domains can be accessed and in what ways. Recent studies [25, 20, 26] have found that many websites deploy insecure cross-domain policies, making their users vulnerable to impersonation attacks simply by visiting a malicious website.

### Automated Detection Systems

In recent years, researchers have developed various blackbox and whitebox systems to automatically detect vulnerabilities in web applications. These systems, while less precise than human analysts, can process data much faster and track dependencies across multiple files. For example:

- **Balduzzi et al.** [7] presented a system that automatically discovers clickjacking attacks using an instrumented Firefox browser.
- **Bisht et al.** [9] developed NoTamper, which detects vulnerabilities that allow HTTP parameter tampering.
- **Ford et al.** [14] proposed OdoSwiff, a system to detect malicious Flash ads through a combination of static and dynamic analysis.
- **Jovanovic et al.** [22], **Xie et al.** [42], and **Wassermann et al.** [41] use static analysis to identify potential flaws leading to XSS, SQL injections, and command injection attacks.
- **Sun et al.** [38] use static analysis to infer intended access control in web applications and detect access control errors.

### Conclusion

The continuous innovation in the World Wide Web has made the browser a preferred platform for delivering content-rich applications. The Flash platform by Adobe plays a crucial role in modern websites but is also part of the attack surface, targeting users and their browsers. This paper analyzes the implications of incorrect assumptions in the Flash platform and introduces FlashOver, the first fully automated system for discovering XSS vulnerabilities in Flash. Using a combination of static and dynamic analysis, FlashOver identifies vulnerabilities in real-life Flash objects. Our results show that a significant number of high-valued websites host Flash applications vulnerable to XSS, underscoring the importance of this attack vector. We hope our work will raise awareness of insecure coding practices among Rich Internet Application developers.

### Acknowledgments

We would like to thank our shepherd, Dieter Gollmann, and the anonymous reviewers for their insightful comments. This research is partially funded by the Interuniversity Attraction Poles Programme Belgian State, Belgian Science Policy, the IBBT, the Research Fund K.U.Leuven, the B-CCENTRE, and the EU-funded FP7 projects NESSoS and WebSand.

### References

[1] Adobe. About naming variables.  
[2] Adobe. ActionScript 3.0 - Controlling access to scripts in a host web page.  
[3] Adobe. Creating more secure SWF web applications.  
[4] Flash Player | Adobe Flash Player 11 | Overview.  
[5] Alexa - Top Internet Sites.  
[6] M. Bailey. Neat, new, and ridiculous flash hacks. In BlackHat DC, 2010.  
[7] M. Balduzzi, M. Egele, E. Kirda, D. Balzarotti, and C. Kruegel. A solution for the automated detection of clickjacking attacks. In Proceedings of the 5th ACM Symposium on Information, Computer and Communications Security, ASIACCS ’10, pages 135–144, 2010.  
[8] A. Barth. Chromium Blog: Security in Depth: New Security Features.  
[9] P. Bisht, T. Hinrichs, N. Skrupsky, R. Bobrowicz, and V. N. Venkatakrishnan. Notamper: automatic blackbox detection of parameter tampering opportunities in web applications. In Proceedings of the 17th ACM conference on Computer and communications security, CCS ’10, pages 607–618, New York, NY, USA, 2010. ACM.  
[10] D. Blazakis. Interpreter exploitation. In Proceedings of the 4th Usenix Workshop on Offensive Technologies (WOOT), 2010.  
[11] W. A. S. Consortium. Web Hacking Incident Database.  
[12] M. Egele, P. Wurzinger, C. Kruegel, and E. Kirda. Defending browsers against drive-by downloads: Mitigating heap-spraying code injection attacks. In Proceedings of the 6th International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, DIMVA ’09, pages 88–106, Berlin, Heidelberg, 2009. Springer-Verlag.  
[13] Pc penetration | statistics | adobe flash platform runtimes.  
[14] S. Ford, M. Cova, C. Kruegel, and G. Vigna. Analyzing and detecting malicious flash advertisements. In Proceedings of the 2009 Annual Computer Security Applications Conference, ACSAC ’09, pages 363–372, Washington, DC, USA, 2009. IEEE Computer Society.  
[15] Hewlett-Packard Development Company. SWFScan.  
[16] HTML5.  
[17] P. Jagdale. Blinded by flash: Widespread security risks flash developers don't see. In BlackHat DC, 2009.  
[18] M. Jakobsson, P. Finn, and N. Johnson. Why and How to Perform Fraud Experiments. Security & Privacy, IEEE, 6(2):66–68, March-April 2008.  
[19] M. Jakobsson and J. Ratkiewicz. Designing ethical phishing experiments: a study of (ROT13) rOnl query features. In 15th International Conference on World Wide Web (WWW), 2006.  
[20] D. Jang, A. Venkataraman, G. M. Swaka, and H. Shacham. Analyzing the Cross-domain Policies of Flash Applications. In Proceedings of the 5th Workshop on Web 2.0 Security and Privacy (W2SP), 2011.  
[21] JoMo-kun. m0j0.j0j0 Guide to IIS Hacking.  
[22] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A static analysis tool for detecting web application vulnerabilities (short paper). In Proceedings of the IEEE Symposium on Security and Privacy, pages 258–263, 2006.  
[23] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes: A Client-Side Solution for Mitigating Cross Site Scripting Attacks. In Security Track of the 21st ACM Symposium on Applied Computing (SAC 2006), April 2006.  
[24] I. Kogan. no|wrap.be - flare.  
[25] G. Kontaxis, D. Antoniades, I. Polakis, and E. P. Markatos. An empirical study on the security of cross-domain policies in rich internet applications. In Proceedings of the 4th European Workshop on Systems Security (EUROSEC), 2011.  
[26] S. Lekies, M. Johns, and W. Tighzert. The state of the cross-domain nation. In Proceedings of the 5th Workshop on Web 2.0 Security and Privacy (W2SP), 2011.  
[27] Microsoft Silverlight.  
[28] Microsoft. Security in Silverlight.  
[29] N. Nikiforakis, M. Balduzzi, S. Van Acker, W. Joosen, and D. Balzarotti. Exposing the lack of privacy in file hosting services. In Proceedings of the 4th USENIX conference on Large-scale exploits and emergent threats, LEET’11, Berkeley, CA, USA, 2011. USENIX Association.  
[30] N. Nikiforakis, W. Meert, Y. Younan, M. Johns, and W. Joosen. SessionShield: Lightweight Protection against Session Hijacking. In Proceedings of the 3rd International Symposium on Engineering Secure Software and Systems (ESSoS), 2011.  
[31] OWASP Top 10 Web Application Security Risks.  
[32] Rich internet application (RIA) market share.  
[33] D. Ross. IE8 security part IV: The XSS filter.  
[34] C. Shiflett. Cross-Site Request Forgeries.  
[35] Sothink SWF Decompiler.  
[36] Stefano Di Paola. SWFIntruder.  
[37] C. Stoll. The internet? bah!  
[38] F. Sun, L. Xu, and Z. Su. Static detection of access control vulnerabilities in web applications. In Proceedings of the 20th Usenix Security Symposium, 2011.  
[39] M. Van Gundy and H. Chen. Noncespaces: Using Randomization to Enforce Information Flow Tracking and Thwart Cross-Site Scripting Attacks. In Proceedings of the 16th Network and Distributed System Security Symposium (NDSS). The Internet Society, Feb. 2009.  
[40] P. Vogt, F. Nentwich, N. Jovanovic, C. Kruegel, E. Kirda, and G. Vigna. Cross Site Scripting Prevention with Dynamic Data Tainting and Static Analysis. In Proceedings of the 14th Annual Network and Distributed System Security Symposium (NDSS ’07), 2007.  
[41] G. Wassermann and Z. Su. Sound and precise analysis of web applications for injection vulnerabilities. In Proceedings of the 2007 ACM SIGPLAN conference on Programming language design and implementation, PLDI ’07, pages 32–41, New York, NY, USA, 2007. ACM.  
[42] Y. Xie and A. Aiken. Static detection of security vulnerabilities in scripting languages. In Proceedings of the 15th conference on USENIX Security Symposium - Volume 15, Berkeley, CA, USA, 2006. USENIX Association.  
[43] The Cross-site Scripting FAQ.