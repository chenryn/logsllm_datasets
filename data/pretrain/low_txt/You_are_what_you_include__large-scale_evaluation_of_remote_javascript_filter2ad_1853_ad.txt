### In a.js, a Function `myalert` is Defined

In the file `a.js`, a function named `myalert` is defined, which passes its arguments to the `window.alert()` function. Suppose `b.js` then calls `myalert()`. When this function is executed, the wrapped `window.alert()` function is invoked. At this point, the stack trace will include both `a.js` and `b.js`, indicating that both files are involved in the call to `window.alert()`, a potentially sensitive function. This implies that both files can be held responsible for the access. These accesses can be straightforwardly transformed into profiles, which can then be utilized by coarse-grained sandboxing systems.

### Experiment with Top 100 Most-Included JavaScript Files

Using the aforementioned setup, we visited web pages that included the top 100 most-included JavaScript files and monitored their access to sensitive JavaScript methods and DOM/BOM properties. The results, presented in Table 7, indicate that the majority of these files read and write cookies, make calls to `document.write()`, and dynamically evaluate code from strings. Newer APIs, such as `localStorage`, `sessionStorage`, and `Geolocation`, are rarely used, likely due to their relatively recent implementation in modern web browsers.

### Challenges for Coarse-Grained Sandboxing

The results show that, for a large portion of the included scripts, it would be impossible for a coarse-grained sandboxing system to differentiate between benign and malicious scripts based solely on their usage of cookie functionality. For example, a remotely-included benign script that needs to access cookies to read and write identifiers for user tracking can be substituted for a malicious script that leaks the including site’s session identifiers. Both scripts access the same set of resources, but the second one has the potential to fully compromise the script-including site.

It is also important to note that, due to the use of dynamic analysis and the fact that some code paths of the executed scripts may not have been followed, our results represent lower bounds of the scripts' access to resources. In other words, the tracked scripts may need access to more resources to fully execute.

Overall, our results highlight that even in the presence of a coarse-grained sandboxing system that forbids unexpected accesses to JavaScript and browser resources, an attacker could still abuse the access already whitelisted in the attacked script's profile. This means that, regardless of their complexity, fine-grained profiles would be required in the majority of cases. We believe this result motivates further research in fine-grained sandboxing and specifically in the automatic generation of correct script profiles.

### Using Local Copies to Avoid Malicious Script Inclusions

Another way for websites to avoid the risk of malicious script inclusions is by not including any remote scripts. To achieve this, a site needs to create local copies of remote JavaScript resources and then use these copies in their script inclusions. Creating a local copy separates the security of the remote site from the script-including one, allowing the latter to be unaffected by a future compromise of the former. However, this shifts the burden of updates to the developer of the script-including site, who must verify and create a new local copy of the remote JavaScript library whenever a new version is made available.

To quantify the overhead of this manual procedure on the developer of a script-including web application, we tracked the updates of the top 1,000 most-included scripts over the period of one week. This experiment was conducted four months after our large-scale crawling experiment, and some URLs were no longer pointing to valid scripts. More precisely, out of the top 1,000 scripts, we successfully downloaded 803. We started by downloading this set three consecutive times within the same hour and comparing the three versions of each script. If a downloaded script was different all three times, we assumed that the changes were not due to actual updates of the library, such as bug fixes or the addition of new functionality, but due to the embedding of constantly-changing data, such as random tokens, dates, and execution times. From this experiment, we found that 3.99% of our set of JavaScript scripts seem to embed such data and thus appear to be constantly modified. For the rest of the experiment, we stopped tracking these scripts and focused on the ones that were identical all three times.

Over a period of one week, 10.21% of the monitored scripts were modified. Of the modified scripts, 6.97% were modified once, 1.86% were modified twice, and 1.36% were modified three or more times. This shows that while some scripts undergo modifications more than once a week, 96.76% are modified at most once. We believe that the weekly manual inspection of a script’s modified code is an acceptable tradeoff between increased maintenance time and increased security of the script-including web application. At the same time, a developer who currently utilizes frequently-modified remote JavaScript libraries might consider substituting these libraries for others with comparable functionality and less frequent modifications.

### Related Work

#### Measurement Studies

To the best of our knowledge, there has been no study of remote JavaScript inclusions and their implications that is of comparable breadth to our work. Yue and Wang conducted the first measurement study of insecure JavaScript practices on the web [30]. Using a set of 6,805 homepages of popular sites, they counted the sites that include remote JavaScript files, use the `eval` function, and add more information to the DOM of a page using `document.write`. Contrastingly, in our study, we crawled more than 3 million pages of the top 10,000 popular web sites, allowing us to capture five hundred times more inclusions and record behavior that is not necessarily present on a site’s homepage. Moreover, instead of treating all remote inclusions as uniformly dangerous, we attempt to characterize the quality of their providers so that more trustworthy JavaScript providers can be utilized when a remote inclusion is unavoidable.

Richards et al. [23] and Ratanaworabhan et al. [20] studied the dynamic behavior of popular JavaScript libraries and compared their findings with common usage assumptions of the JavaScript language and the functionality tested by common benchmarks. However, this was done without particular focus on the security features of the language. Richards et al. [22] separately studied the use of `eval` in popular web sites.

Ocariza et al. [13] performed an empirical study of JavaScript errors in the top 100 Alexa sites. Seeking to quantify the reliability of JavaScript code in popular web applications, they recorded errors falling into four categories: "Permission Denied," "Null Exception," "Undefined Symbol," and "Syntax Error." Additionally, the authors showed that in some cases, the errors were non-deterministic and depended on factors such as the speed of a user’s interaction with the web application. The authors did not encounter any of the new types of vulnerabilities we described in Section 4, probably due to the limited size of their study.

#### Limiting Available JavaScript Functionality

Based on the characterization of used functionality, included JavaScript files could be executed in a restricted environment that only offers the required subset of functionality. As we showed in Section 5.1, a fine-grained sandboxing system is necessary because of the inability of coarse-grained sandboxes to differentiate between legitimate and malicious access to resources.

**BrowserShield [21]** is a server-side rewriting technique that replaces certain JavaScript functions with safe equivalents. These safe equivalents are implemented in the "bshield" object, introduced through the BrowserShield JavaScript libraries and injected into each page. BrowserShield uses a proxy to inject its code into a web page.

**Self-Protecting JavaScript [19, 15]** is a client-side wrapping technique that applies wrappers around JavaScript functions without requiring any browser modifications. The wrapping code and policies are provided by the server and are executed first, ensuring a clean environment to start from.

**ConScript [16]** allows the enforcement of fine-grained security policies for JavaScript in the browser. The approach is similar to self-protecting JavaScript, except that ConScript modifies the browser to ensure that an attacker cannot abuse the browser-specific DOM implementation to find an unprotected access path.

**WebJail [27]** is a client-side security architecture that enforces secure composition policies specified by a web-mashup integrator on third-party web-mashup components. Inspired by ConScript, WebJail modifies the Mozilla Firefox browser and JavaScript engine to enforce these secure composition policies inside the browser.

The new "sandbox" attribute of the `iframe` element in HTML5 [10] provides a way to limit JavaScript functionality, but it is very coarse-grained. It only supports limited restrictions, and as far as JavaScript APIs are concerned, it only supports completely enabling or disabling JavaScript.

**ADJail [26]** is geared toward securely isolating ads from a hosting page for confidentiality and integrity purposes while maintaining usability. The ad is loaded on a shadow page that contains only those elements of the hosting page to which the web developer wishes the ad to have access. Changes to the shadow page are replicated to the hosting page if those changes conform to the specified policy. Likewise, user actions on the hosting page are mimicked to the shadow page if allowed by the policy.

**FlowFox [7]** uses the related technique of secure multi-execution [8] to execute arbitrary included scripts with strong guarantees that these scripts cannot break a specified confidentiality policy.

**Content Security Policy (CSP) [25]** is a mechanism that allows web application developers to specify from which locations their web application is allowed to load additional resources. Using CSP, a web application could be limited to only load JavaScript files from a specific set of third-party locations. In the case of typos in the URL, a CSP policy not containing that same typo will prevent a JavaScript file from being loaded from that mistyped URL. Cases where a JavaScript-hosting site has been compromised and is serving malicious JavaScript, however, will not be stopped by CSP.

**AdSentry [9]** is a confinement solution for JavaScript-based advertisement scripts. It consists of a shadow JavaScript engine used to execute untrusted JavaScript advertisements. Instead of having direct access to the DOM and sensitive functions, access from the shadow JavaScript engine is mediated by an access control policy enforcement subsystem.

### Conclusion

Websites that include JavaScript from remote sources in different administrative domains open themselves to attacks in which malicious JavaScript is sent to unsuspecting users, possibly with severe consequences. In this paper, we extensively evaluated the JavaScript remote inclusion phenomenon, analyzing it from different points of view. We first determined how common it is to include remote JavaScript code among the most popular websites on the Internet. We then provided an empirical evaluation of the quality-of-maintenance of these "code providers," according to a number of indicators. The results of our experiments show that indeed there is a considerable number of high-profile websites that include JavaScript code from external sources that are not taking all the necessary security-related precautions and thus could be compromised by a determined attacker. As a by-product of our experiments, we identified several attacks that can be carried out by exploiting failures in the configuration and provision of JavaScript code inclusions. Our findings shed some light into the JavaScript code provider infrastructure and the risks associated with trusting external parties in implementing web applications.

### Acknowledgments

We want to thank our shepherd Ben Livshits and the anonymous reviewers for their valuable comments. For KU Leuven, this research was done with the financial support from the Prevention against Crime Programme of the European Union, the IBBT, the Research Fund KU Leuven, and the EU-funded FP7 projects NESSoS and WebSand. For UCSB, this work was supported by the Office of Naval Research (ONR) under Grant N000140911042, the National Science Foundation (NSF) under grants CNS-0845559 and CNS-0905537.

### References

[1] Apache.org. https://blogs.apache.org/infra/entry/apache_org_04_09_2010.
[2] Qtip compromised. https://github.com/Craga89/qTip2/issues/286.
[3] SSL Labs Server Rating Guide. https://www.ssllabs.com/downloads/SSL_Server_Rating_Guide_2009.pdf.
[4] Wayback Machine. http://archive.org.
[5] Alexa - Top sites on the Web. http://www.alexa.com/topsites.
[6] M. Balduzzi, M. Egele, E. Kirda, D. Balzarotti, and C. Kruegel. A solution for the automated detection of clickjacking attacks. In Proceedings of the 5th ACM Symposium on Information, Computer and Communications Security, ASIACCS '10, pages 135–144, 2010.
[7] W. De Groef, D. Devriese, N. Nikiforakis, and F. Piessens. FlowFox: a Web Browser with Flexible and Precise Information Flow Control. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2012.
[8] D. Devriese and F. Piessens. Noninterference Through Secure Multi-Execution. In Proceedings of the IEEE Symposium on Security and Privacy, pages 109–124, 2010.
[9] X. Dong, M. Tran, Z. Liang, and X. Jiang. AdSentry: comprehensive and flexible confinement of JavaScript-based advertisements. In Proceedings of the 27th Annual Computer Security Applications Conference, ACSAC '11, pages 297–306, New York, NY, USA, 2011. ACM.
[10] I. Hickson and D. Hyatt. HTML 5 Working Draft - The sandbox Attribute. http://www.w3.org/TR/html5/the-iframe-element.html#attr-iframe-sandbox, June 2010.
[11] S. Hisao. Tiny HTTP Proxy in Python. http://www.okisoft.co.jp/esc/python/proxy/.
[12] P. C. Industry. (Approved Scanning Vendor) Program Guide. https://www.pcisecuritystandards.org/pdfs/asv_program_guide_v1.0.pdf.
[13] F. O. Jr., K. Pattabiraman, and B. Zorn. JavaScript errors in the wild: An empirical study. In Proceedings of the 22nd International Symposium on Software Reliability Engineering (ISSRE), pages 100–109, 2011.
[14] C. Kolbitsch, B. Livshits, B. Zorn, and C. Seifert. Rozzle: De-cloaking internet malware. In IEEE Symposium on Security and Privacy, May 2012.
[15] J. Magazinius, P. Phung, and D. Sands. Safe wrappers and sane policies for self-protecting JavaScript. In The 15th Nordic Conf. in Secure IT Systems. Springer Verlag, 2010.
[16] L. Meyerovich and B. Livshits. ConScript: Specifying and enforcing fine-grained security policies for JavaScript in the browser. In IEEE Symposium on Security and Privacy, May 2010.
[17] T. Moore and B. Edelman. Measuring the perpetrators and funders of typosquatting. In Proceedings of the 14th international conference on Financial Cryptography and Data Security, FC'10, pages 175–191, Berlin, Heidelberg, 2010. Springer-Verlag.
[18] OWASP. "Cross-site scripting (XSS)." https://www.owasp.org/index.php/XSS.
[19] P. H. Phung, D. Sands, and A. Chudnov. Lightweight self-protecting JavaScript. In Proceedings of the 4th International Symposium on Information, Computer, and Communications Security, ASIACCS '09, pages 47–60, New York, NY, USA, 2009. ACM.
[20] P. Ratanaworabhan, B. Livshits, and B. G. Zorn. JSMeter: Comparing the behavior of JavaScript benchmarks with real web applications. In Proceedings of the 2010 USENIX conference on Web application development, WebApps'10, pages 3–3, Berkeley, CA, USA, 2010. USENIX Association.
[21] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir. BrowserShield: Vulnerability-driven filtering of dynamic HTML. In OSDI '06: Proceedings of the 7th symposium on Operating Systems Design and Implementation, pages 61–74, Berkeley, CA, USA, 2006. USENIX Association.
[24] D. Ross. IE8 Security Part IV: The XSS Filter. http://blogs.msdn.com/b/ie/archive/2008/07/02/ie8-security-part-iv-the-xss-filter.aspx.
[25] S. Stamm, B. Sterne, and G. Markham. Reining in the web with content security policy. In Proceedings of the 19th International Conference on World Wide Web, WWW '10, pages 921–930, New York, NY, USA, 2010. ACM.
[26] M. Ter Louw, K. T. Ganesh, and V. Venkatakrishnan. AdJail: Practical Enforcement of Confidentiality and Integrity Policies on Web Advertisements. In Proceedings of the 19th USENIX Security Symposium, Aug. 2010.
[27] S. Van Acker, P. De Ryck, L. Desmet, F. Piessens, and W. Joosen. WebJail: Least-privilege integration of third-party components in web mashups. In Proceedings of the 27th Annual Computer Security Applications Conference, ACSAC '11, pages 307–316, New York, NY, USA, 2011. ACM.
[28] Y.-M. Wang, D. Beck, J. Wang, C. Verbowski, and B. Daniels. Strider Typo-Patrol: Discovery and analysis of systematic typo-squatting. In Proceedings of the 2nd conference on Steps to Reducing Unwanted Traffic on the Internet - Volume 2, SRUTI'06, pages 5–5, Berkeley, CA, USA, 2006. USENIX Association.
[29] XSSed | Cross Site Scripting (XSS) attacks and archive. http://xssed.com/
[22] G. Richards, C. Hammer, B. Burg, and J. Vitek. The eval that men do: A large-scale study of the use of eval in JavaScript applications. In Proceedings of the 25th European conference on Object-oriented programming, ECOOP'11, pages 52–78, Berlin, Heidelberg, 2011. Springer-Verlag.
[30] C. Yue and H. Wang. Characterizing insecure JavaScript practices on the web. In Proceedings of the 18th international conference on World wide web, WWW '09, pages 961–970, New York, NY, USA, 2009. ACM.
[23] G. Richards, S. Lebresne, B. Burg, and J. Vitek. An analysis of the dynamic behavior of JavaScript programs. In Proceedings of the 2010 ACM SIGPLAN conference on Programming language design and implementation, PLDI '10, pages 1–12, New York, NY, USA, 2010. ACM.
[31] K. Zetter. Google Hack Attack Was Ultra Sophisticated, New Details Show. http://www.wired.com/threatlevel/2010/01/operation-aurora/.
[32] Zone-H: Unrestricted information. http://zone-h.org/.