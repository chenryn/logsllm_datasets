### Application Version-Checking Harness

In response to versioning challenges, the team developed an application version-checking harness. This harness checks the database version upon user login and automatically runs scripts to update the database (if necessary) to align with the current version of the application. The changes to enable this capability were implemented in the presentation layer and business/data layers, including the ability to detect the database state upon login. This self-initiating update approach enhances availability by allowing updates without taking down the application server.

**Initial Tactic Assessment:**
- **Tactic:** Login-initiated version monitoring
- **Condition Monitoring:** The usage focuses on updating the database rather than handling faults or failures.
- **Variation:** The ability to bring the database to the correct version is a variation of the Availability tactic, State Resynchronization.

### Load Balancing and Auto-Scaling

To support scalability, the team added load balancing and auto-scaling capabilities. These features monitor and manage average load cycles, allowing worker components to grab jobs as they become available or start more workers if needed. This approach supports automated scaling up and down.

**Initial Tactic Assessment:**
- **Tactic:** Load balancing
- **Performance Tactics:** Maintain Multiple Copies and Increase Available Resources

### Project C: Financial Application Sales Portal

Project C is a financial application sales portal with a distributed set of services. The front end is built using Java Server Faces, and the backend uses a Microsoft SQL server database. Initially, the middle tier leveraged web services, but it was later re-architected to use Enterprise JavaBeans (EJBs) instead.

#### Design Decisions for Project C

1. **Removing Web Services and Collapsing the Middle Tier:**
   - **Challenge:** Version synchronization between the application and web services, latency issues, and complex deployment configurations.
   - **Solution:** Web services for data access were removed and rewritten as EJBs, effectively collapsing the middle tier.
   - **Benefits:** 
     - Eliminated marshaling and un-marshaling of XML and middle-tier transformation.
     - Simplified deployment by deploying the entire application as one file (one version).
     - Reduced the need for separate management of application and middle-tier servers.
     - Improved testing by eliminating the need to set up and use web services.
   - **Initial Tactic Assessment:** This change is an instance of the Performance tactic, Reduce Overhead. It also simplifies deployment and reduces complexity, potentially impacting modifiability.

2. **Parameterization:**
   - **Usage:** Parameterization allows for changing content such as branding, messages, and marketing text.
   - **Benefit:** Avoids the use of static variables for easier testing.
   - **Initial Tactic Assessment:** Use of Parameterization and Configuration Files are subtactics/variations of the Modifiability tactic, Defer Binding Time.

3. **Load Balancer:**
   - **Usage:** Provides active and passive redundancy.
   - **Benefit:** Allows for "blue-green switching" during deployments, ensuring users can be redirected to a working server if there are issues with the new release.
   - **Initial Tactic Assessment:** Leverages the Performance tactic, Maintain Multiple Copies, and the Availability tactic, Active Redundancy.

4. **Bundle and Rollback Feature and Data Layer Change:**
   - **Tool:** RedGate for deploying database SQL changes.
   - **Approach:** Database scripts are checked in, and the SQL is automatically run against the database by the build tool.
   - **Benefit:** Allows simultaneous rollback of application features and database changes.
   - **Initial Tactic Assessment:** Leverages the Availability tactic, Rollback.

### Deployability Tactics Strawman Tree

Figure 1 presents a straw-man deployability tactics tree derived from the raw data in Section III.B. Most of the tactics captured in the interview data crosscut existing tactic trees. While it is premature to definitively classify these tactics, our initial assessment based on the collected data provides a starting point for validation through further research.

### Discussion

In addition to architectural decisions and tactics, all three projects employed other critical enablers, including practices and tool/environment support. For example:
- **Project A:** Created an automated database script to minimize update time during database release.
- **Project B:** Leveraged automated deployment scripting, configuration management tools (e.g., Chef), and virtualized environment generation tools (e.g., Vagrant).
- **Project C:** Used RedGate for bundling and deploying database SQL changes with a feature.

These examples raise an interesting topic: the blurring lines between the application and supporting infrastructure. Traditionally, infrastructure and tools have been considered external to the system. However, the significant impact of deployment support on the infrastructure and network suggests that these components should be reconsidered as part of a combined ecosystem.

### Conclusion

This work explores the hypothesis that architecture contributes to achieving continuous delivery and deployability goals. The concrete tactics captured in this paper provide a start toward validating this hypothesis. Key takeaways include:
- Many key decisions made by the projects were architectural.
- Several tactics were employed, with some new variants, and many crosscutting existing Quality Attribute tactics.
- Important trade-offs were made to reduce deployment time, complexity, and overhead, highlighting the need for clear stakeholder priorities and visibility of trade-offs.

### Acknowledgments

We acknowledge Salient Federal Solutions for their technical contribution to this paper.

### References

[1] J. Humble and D. Farley, Continuous Delivery. Boston, MA: Addison Wesley, 2010.
[2] D. Feitelson, E. Frachtenberg, and K. Beck, “Development and deployment at Facebook,” IEEE Internet Computing, vol. 17, no. 4, pp. 8-17, 2013.
[3] S. Bang, S. Chung, Y. Choh, and M. Dupuis, “A grounded theory analysis of modern web applications: knowledge, skills, and abilities for DevOps,” Proc. 2nd Annual Conf. Research in Information Technology, pp. 61-62, 2013.
[4] P. Kruchten, R. L. Nord, and I. Ozkaya, “Technical debt: from metaphor to theory and practice,” IEEE Software, vol. 29, no. 6, pp. 18-21, 2012.
[5] F. Bachmann, R. L. Nord, and I. Ozkaya, “Architectural tactics to support rapid and agile stability,” CrossTalk: The Journal of Defense Software Engineering, vol. 25, no. 3, pp. 20-25, 2012.
[6] L. Bass, P. Clements, and R. Kazman, Software Architecture in Practice, 3rd ed. Boston, MA: Addison-Wesley, 2012.
[7] M. Mäntyla, F. Khomh, B. Adams, E. Engström, and K. Petersen, “On rapid releases and software testing,” Proc. 29th IEEE Intl. Conf. Software Maintenance (ICSM), pp. 20-22, 2013.
[8] F. Khomh, T. Dhaliwal, Y. Zou, and B. Adams, “Do faster releases improve software quality? An empirical case study of Mozilla Firefox,” Proc. Working Conf. Mining Software Repositories (MSR), pp. 179-188, 2012.
[9] L. Bass, R. Jeffery, H. Wada, I. Weber, and L. Zhu, “Eliciting operations requirements for applications.” Presented at the International Workshop on Release Engineering, 2013.
[10] D. Cukier, “DevOps patterns to scale web applications using cloud services,” Proc. 2013 Companion Publication for Conf. Systems, Programming, and Applications: Software for Humanity, pp. 143-152, 2013.
[11] D. Spinellis, “Don’t install software by hand,” IEEE Software, vol. 29, no. 4, pp. 86-87, 2012.
[12] D. Spinellis, “Package management systems,” IEEE Software, vol. 29, no. 2, pp. 84-86, 2012.
[13] S. Hosono, J. He, X. Liu, L. Li, H. Huang, and S. Yoshino, “Fast development platforms and methods for cloud applications,” Proc. 2011 IEEE Asia-Pacific Services Computing Conf., APSCC 2011, pp. 94-101, 2011.
[14] A. Schaefer, M. Reichenbach, and D. Fey, “Continuous integration and automation for DevOps,” Lecture Notes in Electrical Engineering, vol. 170 LNEE, pp. 345-358, 2013.
[15] K. Gohil, N. Alapati, and S. Joglekar, “Towards behavior driven operations (BDOps),” IET Seminar Digest, Proc. 3rd Intl. Conf. Advances in Recent Technologies in Communication and Computing, pp. 262-264, 2011.