### Optimized Text

**Dynamic Boundary and T-Table Disalignment:**

Each time the process is initiated, a different boundary is established. By restarting the victim application, we can generate arbitrary disalignments of T-tables. These disaligned T-tables reduce the key space to an average of 20 bits, and in specific disalignments, full-key recovery is possible without any brute-force computation [51, 53]. In our observations, T-tables were never aligned. Based on the first-round attack matrix in Figure 11, the expected number of encryptions required to identify a key byte is 1.81 · 128. Therefore, full key recovery is achievable after 1.81 · 128 · 16 = 3707 encryptions by monitoring a single address during each encryption.

**Real-World Cross-Core Attack on Bouncy Castle:**

If the attacker cannot share a targeted memory region with the victim, Prime+Probe can be used instead of Evict+Reload or Flush+Reload. This is applicable for dynamically generated data or private memory of another process. Figure 12 illustrates the Prime+Probe histogram for cache hits and misses. We observe a higher execution time when the victim accesses a congruent memory location. Thus, Prime+Probe can be used for a real-world cross-core attack on Bouncy Castle and also exploits disaligned T-tables as mentioned above.

**Figure 13: Excerpt of the Attack on Bouncy Castle’s AES Using Prime+Probe:**

In a preprocessing step, the attacker identifies the cache sets to be attacked by performing random encryptions and searching for active cache sets. Recall that the cache set (index) is derived directly from the physical address on ARM, where the lowest n bits determine the offset within a 2n-byte cache line, and the next s bits determine one of the 2s cache sets. Therefore, we only need to find a few cache sets where a T-table maps to in order to identify all cache sets required for the attack. On x86, the replacement policy facilitates this attack and allows deducing the number of ways that have been replaced in a specific cache set [43]. On ARM, the random replacement policy makes Prime+Probe more challenging due to less predictable cache line replacements. To launch a Prime+Probe attack, we apply the eviction strategy and the crafted reaccess patterns described in Section 3.2. Figure 13 shows an excerpt of the cache template matrix resulting from a Prime+Probe attack on one T-table. For each combination of plaintext byte and offset, we performed 100,000 encryptions for illustration. Monitoring a single address is sufficient to obtain the upper 4 bits of \( s_i \) and, thus, the upper 4 bits of \( k_i = s_i \oplus p_i \). Compared to the Evict+Reload attack, Prime+Probe requires three times as many measurements to achieve the same accuracy. Nevertheless, our results show that Prime+Probe attacks are feasible on ARM CPUs, similar to Intel CPUs.

**Spying on TrustZone Code Execution:**

ARM TrustZone is a hardware-based security technology built into ARM CPUs to provide a secure execution environment [4]. This trusted execution environment is isolated from the normal world using hardware support. TrustZone is used for various purposes, such as a hardware-backed credential store, emulating secure elements for payment applications, digital rights management, verified boot, and kernel integrity measurements. The services are provided by trustlets, which run in the secure world.

Since the secure monitor can only be called from the supervisor context, the kernel provides an interface for userspace to interact with the TrustZone. On the Alcatel One Touch Pop 2, the TrustZone is accessible through a device driver called QSEECOM (Qualcomm Secure Execution Environment Communication) and a library `libQSEEComAPI.so`. The key master trustlet on the Alcatel One Touch Pop 2 provides an interface to generate hardware-backed RSA keys, which can then be used inside the TrustZone to sign and verify signatures.

Our observations indicate that a Prime+Probe attack on the TrustZone is not significantly different from a Prime+Probe attack on any application in the normal world. However, without access to the source code of the TrustZone OS or any trustlet, we conducted simple attacks. We demonstrated that Prime+Probe can distinguish whether a provided key is valid or not. While this might also be observable through the overall execution time, our results show that the TrustZone isolation does not protect against cache attacks from the normal world, and any trustlet can be attacked.

We evaluated cache profiles for multiple valid and invalid keys. Figure 14 shows the mean squared error over two runs for different valid keys and one invalid key compared to the average of valid keys. We performed Prime+Probe before and after the invocation of the corresponding trustlet, i.e., prime before the invocation and probe afterwards. A clear difference is observed in some sets (cache sets 250–320) used during signature generation with a valid key. These cache profiles are reproducible and can be used to distinguish between valid and invalid keys in the TrustZone, indicating that the secure world leaks information to the non-secure world.

On the Samsung Galaxy S6, the TrustZone flushes the cache when entering or leaving the trusted world. However, by performing a Prime+Probe attack in parallel, i.e., multiple times while the trustlet performs the corresponding computations, the same attack can be mounted. More sophisticated attacks could be possible through reverse engineering these trustlets.

**Countermeasures:**

Although our attacks exploit hardware weaknesses, software-based countermeasures could mitigate such attacks. We use unprotected access to system information available on all Android versions. The operating system cannot prevent access to timing information, but other information supplied by the operating system that facilitates these attacks could be restricted. For instance, we use `/proc/pid/` to retrieve information about any other process on the device, e.g., `/proc/pid/pagemap` to resolve virtual addresses to physical addresses. Despite restrictions on `/proc/pid/pagemap` and `/proc/self/pagemap` in Linux in early 2015, the Android kernel still allows access to these resources. Given the immediately applicable attacks we presented, we stress the urgency to merge the corresponding patches into the Android kernel. Furthermore, we use `/proc/pid/maps` to determine shared objects mapped into the address space of a victim. Restricting access to `procfs` to specific privileges or permissions would make attacks harder. We recommend this for both the Linux kernel and Android.

We also exploit the fact that access to shared libraries, as well as DEX and ART optimized program binaries, is only partially restricted at the file system level. While we cannot retrieve a directory listing of `/data/dalvik-cache/`, all files are readable by any process or Android application. We recommend allowing read access to these files exclusively to their respective owners to prevent Evict+Reload, Flush+Reload, and Flush+Flush attacks through these shared files.

To prevent cache attacks against AES T-tables, hardware instructions should be used. If this is not an option, a software-only bit-sliced implementation must be employed, especially when disalignment is possible, as in Java. Since OpenSSL 1.0.2, a bit-sliced implementation is available for devices capable of the ARM NEON instruction set and dedicated AES instructions on ARMv8-A devices. Cryptographic algorithms can also be protected using cache partitioning [34]. However, cache partitioning comes with a performance impact and cannot prevent all attacks, as the number of cache partitions is limited. We responsibly disclosed our attacks and proposed countermeasures to Google and other development groups prior to the publication of our attacks. Google applied upstream patches preventing access to `/proc/pid/pagemap` in early 2016 and recommended installing the security update in March 2016 [15].

**Conclusion:**

In this work, we demonstrated the most powerful cross-core cache attacks—Prime+Probe, Flush+Reload, Evict+Reload, and Flush+Flush—on default-configured, unmodified Android smartphones. These attacks do not require any permissions or privileges. To enable these attacks in real-world scenarios, we systematically solved all challenges that previously prevented highly accurate cache attacks on ARM. Our attacks are the first cross-core and cross-CPU attacks on ARM CPUs. Furthermore, our attack techniques provide high resolution and high accuracy, allowing the monitoring of singular events such as touch and swipe actions on the screen, touch actions on the soft keyboard, and inter-keystroke timings. Additionally, we showed that efficient state-of-the-art key-recovery attacks can be mounted against the default AES implementation in the Java Bouncy Castle crypto provider, and that cache activity in the ARM TrustZone can be monitored from the normal world. The presented example attacks are not exhaustive, and launching our proposed attacks against other libraries and apps will reveal numerous further exploitable information leaks. Our attacks are applicable to hundreds of millions of off-the-shelf smartphones, as they all have very similar, if not identical, hardware. This is particularly concerning since smartphones have become the most important personal computing devices, and our techniques significantly broaden the scope and impact of cache attacks.

**Acknowledgment:**

We would like to thank our anonymous reviewers for their valuable comments and suggestions. This work was supported by the EU Horizon 2020 programme under GA No. 644052 (HEC-TOR), the EU FP7 programme under GA No. 610436 (MATTHEW), and the Austrian Research Promotion Agency (FFG) under grant number 845579 (MEMSEC).

**References:**

[1] ANDROID OPEN SOURCE PROJECT. Configuring ART. https://source.android.com/devices/tech/dalvik/configure.html, Nov. 2015. Retrieved on November 10, 2015.

[2] APPTORNADO. AppBrain - Android library statistics - SpongyCastle - BouncyCastle for Android. http://www.appbrain.com/stats/libraries/details/spongycastle/spongy-castle-bouncy-castle-for-android, June 2016. Retrieved on June 6, 2016.

[3] ARM LIMITED. ARM Architecture Reference Manual. ARMv7-A and ARMv7-R edition. ARM Limited, 2012.

[4] ARM LIMITED. ARM Architecture Reference Manual ARMv8. ARM Limited, 2013.

[5] ARM LIMITED. ARM Cortex-A57 MPCore Processor Technical Reference Manual r1p0. ARM Limited, 2013.

[6] ARM LIMITED. ARM Cortex-A53 MPCore Processor Technical Reference Manual r0p3. ARM Limited, 2014.

[7] AVIV, A. J., SAPP, B., BLAZE, M., AND SMITH, J. M. Practicality of Accelerometer Side Channels on Smartphones. In Annual Computer Security Applications Conference – ACSAC (2012), ACM, pp. 41–50.

[8] BENGER, N., VAN DE POL, J., SMART, N. P., AND YAROM, Y. "Ooh Aah... Just a Little Bit": A Small Amount of Side Channel Can Go a Long Way. In Cryptographic Hardware and Embedded Systems – CHES (2014), vol. 8731 of LNCS, Springer, pp. 75–92.

[9] BERNSTEIN, D. J. Cache-Timing Attacks on AES, 2004. URL: http://cr.yp.to/papers.html#cachetiming.

[10] BOGDANOV, A., EISENBARTH, T., PAAR, C., AND WIENECKE, M. Differential Cache-Collision Timing Attacks on AES with Application to Embedded CPUs. In Topics in Cryptology – CT-RSA (2010), vol. 5985 of LNCS, Springer, pp. 235–251.

[11] CAI, L., AND CHEN, H. TouchLogger: Inferring Keystrokes on Touch Screen from Smartphone Motion. In USENIX Workshop on Hot Topics in Security – HotSec (2011), USENIX Association.

[12] CAI, L., AND CHEN, H. On the Practicality of Motion-Based Keystroke Inference Attack. In Trust and Trustworthy Computing – TRUST (2012), vol. 7344 of LNCS, Springer, pp. 273–290.

[13] GALLAIS, J., KIZHVATOV, I., AND TUNSTALL, M. Improved Trace-Driven Cache-Collision Attacks against Embedded AES Implementations. In Workshop on Information Security Applications – WISA (2010), vol. 6513 of LNCS, Springer, pp. 243–257.

[14] GALLAIS, J.-F., AND KIZHVATOV, I. Error-Tolerance in Trace-Driven Cache Collision Attacks. In COSADE (2011), pp. 222–232.

[15] GOOGLE INC. Nexus Security Bulletin - March 2016. https://source.android.com/security/bulletin/2016-03-01.html, Mar. 2016. Retrieved on June 6, 2016.

[16] GRUSS, D., BIDNER, D., AND MANGARD, S. Practical Memory Deduplication Attacks in Sandboxed JavaScript. In European Symposium on Research – ESORICS (2015), vol. 9326 of LNCS, Springer, pp. 108–122.

[17] GRUSS, D., MAURICE, C., AND MANGARD, S. Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript. In DIMVA’16 (2016).

[18] GRUSS, D., MAURICE, C., WAGNER, K., AND MANGARD, S. Flush+Flush: A Fast and Stealthy Cache Attack. In DIMVA’16 (2016).

[19] GRUSS, D., SPREITZER, R., AND MANGARD, S. Cache Template Attacks: Automating Attacks on Inclusive Last-Level Caches. In USENIX Security Symposium (2015), USENIX Association, pp. 897–912.

[20] GUERON, S. White Paper: Intel Advanced Encryption Standard (AES) Instructions Set, 2010. URL: https://software.intel.com/file/24917.

[21] GULLASCH, D., BANGERTER, E., AND KRENN, S. Cache Games – Bringing Access-Based Cache Attacks on AES to Practice. In IEEE Symposium on Security and Privacy – S&P (2011), IEEE Computer Society, pp. 490–505.

[22] GÜLMEZOGLU, B., INCI, M. S., APECECHEA, G. I., EISENBARTH, T., AND SUNAR, B. A Faster and More Realistic Flush+Reload Attack on AES. In Constructive Side-Channel Analysis and Secure Design – COSADE (2015), vol. 9064 of LNCS, Springer, pp. 111–126.

[23] HUND, R., WILLEMS, C., AND HOLZ, T. Practical Timing Side Channel Attacks against Kernel Space ASLR. In IEEE Symposium on Security and Privacy – S&P (2013), IEEE, pp. 191–205.

[24] IRAZOQUI, G., EISENBARTH, T., AND SUNAR, B. S$A: A Shared Cache Attack that Works Across Cores and Defies VM Sandboxing – and its Application to AES. In IEEE Symposium on Security and Privacy – S&P (2015), IEEE Computer Society.

[25] IRAZOQUI, G., EISENBARTH, T., AND SUNAR, B. Cross Processor Cache Attacks. In ACM Computer and Communications Security – ASIACCS (2016), ACM, pp. 353–364.

[26] IRAZOQUI, G., INCI, M. S., EISENBARTH, T., AND SUNAR, B. Wait a Minute! A fast, Cross-VM Attack on AES. In Research in Attacks, Intrusions and Defenses Symposium – RAID (2014), vol. 8688 of LNCS, Springer, pp. 299–319.

[27] IRAZOQUI, G., INCI, M. S., EISENBARTH, T., AND SUNAR, B. Know Thy Neighbor: Crypto Library Detection in Cloud. Privacy Enhancing Technologies 1, 1 (2015), 25–40.

[28] IRAZOQUI, G., INCI, M. S., EISENBARTH, T., AND SUNAR, B. Lucky 13 Strikes Back. In ACM Computer and Communications Security – ASIACCS (2015), ACM, pp. 85–96.

[29] KÄSPER, E., AND SCHWABE, P. Faster and Timing-Attack Resistant AES-GCM. In Cryptographic Hardware and Embedded Systems – CHES (2009), vol. 5747 of LNCS, Springer, pp. 1–17.

[30] KELSEY, J., SCHNEIER, B., WAGNER, D., AND HALL, C. Side Channel Cryptanalysis of Product Ciphers. Journal of Computer Security 8, 2/3 (2000), 141–158.

[31] KOCHER, P. C. Timing Attacks on Implementations of Diffie-Hellman, RSA, DSS, and Other Systems. In Advances in Cryptology – CRYPTO (1996), vol. 1109 of LNCS, Springer, pp. 104–113.

[32] KÖNIGHOFER, R. A Fast and Cache-Timing Resistant Implementation of the AES. In Topics in Cryptology – CT-RSA (2008), vol. 4964 of LNCS, Springer, pp. 187–202.

[33] LAL SHIMPI, ANANDTECH. Answered by the Experts: ARM’s Cortex A53 Lead Architect, Peter Greenhalgh. http://www.anandtech.com/show/7591/answered-by-the-experts-arms-cortex-a53-lead-architect-peter-greenhalgh, Dec. 2013. Retrieved on November 10, 2015.

[34] LIU, F., GE, Q., YAROM, Y., MCKEEN, F., ROZAS, C. V., HEISER, G., AND LEE, R. B. CATalyst: Defeating Last-Level Cache Side Channel Attacks in Cloud Computing. In IEEE International Symposium on High Performance Computer Architecture – HPCA (2016), IEEE Computer Society, pp. 406–418.

[35] LIU, F., YAROM, Y., GE, Q., HEISER, G., AND LEE, R. B. Last-Level Cache Side-Channel Attacks are Practical. In IEEE Symposium on Security and Privacy – SP (2015), IEEE Computer Society, pp. 605–622.

[36] MARFORIO, C., RITZDORF, H., FRANCILLON, A., AND CAPKUN, S. Analysis of the Communication Between Colluding Applications on Modern Smartphones. In Annual Computer Security Applications Conference – ACSAC (2012), ACM, pp. 51–60.

[37] MAURICE, C., NEUMANN, C., HEEN, O., AND FRANCILLON, A. C5: Cross-Cores Cache Covert Channel. In Detection of Intrusions and Malware, and Vulnerability Assessment – DIMVA (2015), vol. 9148 of LNCS, Springer, pp. 46–64.

[38] MAURICE, C., SCOUARNEC, N. L., NEUMANN, C., HEEN, O., AND FRANCILLON, A. Reverse Engineering Intel Last-Level Cache Complex Addressing Using Performance Counters. In Research in Attacks, Intrusions, and Defenses – RAID (2015), vol. 9404 of LNCS, Springer, pp. 48–65.

[39] MILUZZO, E., VARSHAVSKY, A., BALAKRISHNAN, S., AND CHOUDHURY, R. R. Tapprints: Your Finger Taps Have Fingerprints. In Mobile Systems, Applications, and Services – MobiSys (2012), ACM, pp. 323–336.

[40] NEVE, M. Cache-based Vulnerabilities and SPAM Analysis. PhD thesis, UCL, 2006.

[41] NEVE, M., SEIFERT, J., AND WANG, Z. A Refined Look at Bernstein’s AES Side-Channel Analysis. In ACM Computer and Communications Security – ASIACCS (2006), ACM, p. 369.

[42] OREN, Y., KEMERLIS, V. P., SETHUMADHAVAN, S., AND KEROMYTIS, A. D. The Spy in the Sandbox: Practical Cache Attacks in JavaScript and their Implications. In Conference on Computer and Communications Security – CCS (2015), ACM, pp. 1406–1418.

[43] OSVIK, D. A., SHAMIR, A., AND TROMER, E. Cache Attacks and Countermeasures: The Case of AES. In Topics in Cryptology – CT-RSA (2006), vol. 3860 of LNCS, Springer, pp. 1–20.

[44] PAGE, D. Theoretical Use of Cache Memory as a Cryptanalytic Side-Channel. IACR Cryptology ePrint Archive 2002/169.

[45] PERCIVAL, C. Cache Missing for Fun and Profit, 2005. URL: http://daemonology.net/hyperthreading-considered-harmful/.

[46] REBEIRO, C., SELVAKUMAR, A. D., AND DEVI, A. S. L. Bitslice Implementation of AES. In Cryptology and Network Security – CANS (2006), vol. 4301 of LNCS, Springer, pp. 203–212.

[47] SAVAS, E., AND YILMAZ, C. A Generic Method for the Analysis of a Class of Cache Attacks: A Case Study for AES. Comput. J. 58, 10 (2015), 2716–2737.

[48] SCHLEGEL, R., ZHANG, K., ZHOU, X., INTWALA, M., KAPADIA, A., AND WANG, X. Soundcomber: A Stealthy and Context-Aware Sound Trojan for Smartphones. In Network and Distributed System Security Symposium – NDSS (2011), The Internet Society.

[49] SPREITZER, R. PIN Skimming: Exploiting the Ambient-Light Sensor in Mobile Devices. In Security and Privacy in Smartphones & Mobile Devices – SPSM@CCS (2014), ACM, pp. 51–62.

[50] SPREITZER, R., AND GÉRARD, B. Towards More Practical Time-Driven Cache Attacks. In Information Security Theory and Practice – WISTP (2014), vol. 8501 of LNCS, Springer, pp. 24–39.

[51] SPREITZER, R., AND PLOS, T. Cache-Access Pattern Attack on Disaligned AES T-Tables. In Constructive Side-Channel Analysis and Secure Design – COSADE (2013), vol. 7864 of LNCS, Springer, pp. 200–214.

[52] SPREITZER, R., AND PLOS, T. On the Applicability of Time-Driven Cache Attacks on Mobile Devices. In Network and System Security – NSS (2013), vol. 7873 of LNCS, Springer, pp. 656–662.

[53] TAKAHASHI, J., FUKUNAGA, T., AOKI, K., AND FUJI, H. Highly Accurate Key Extraction Method for Access-Driven Cache Attacks Using Correlation Coefficient. In Australasian Conference Information Security and Privacy – ACISP (2013), vol. 7959 of LNCS, Springer, pp. 286–301.

[54] TROMER, E., OSVIK, D. A., AND SHAMIR, A. Efficient Cache Attacks on AES, and Countermeasures. Journal Cryptology 23, 1 (2010), 37–71.

[55] TSUNOO, Y., SAITO, T., SUZAKI, T., SHIGERI, M., AND MIYAUCHI, H. Cryptanalysis of DES Implemented on Computers with Cache. In Cryptographic Hardware and Embedded Systems – CHES (2003), vol. 2779 of LNCS, Springer, pp. 62–76.

[56] VAN DE POL, J., SMART, N. P., AND YAROM, Y. Just a Little Bit More. In Topics in Cryptology – CT-RSA (2015), vol. 9048 of LNCS, Springer, pp. 3–21.

[57] WEISS, M., HEINZ, B., AND STUMPF, F. A Cache Timing Attack on AES in Virtualization Environments. In Financial Cryptography and Data Security – FC (2012), vol. 7397 of LNCS, Springer, pp. 314–328.

[58] WEISS, M., WEGGENMANN, B., AUGUST, M., AND SIGL, G. On Cache Timing Attacks Considering Multi-core Aspects in Virtualized Embedded Systems. In Trusted Systems – INTRUST (2014), vol. 9473 of LNCS, Springer, pp. 151–167.

[59] XU, Z., BAI, K., AND ZHU, S. TapLogger: Inferring User Inputs on Smartphone Touchscreens Using On-board Motion Sensors. In Security and Privacy in Wireless and Mobile Networks – WISEC (2012), ACM, pp. 113–124.

[60] YAROM, Y., AND FALKNER, K. FLUSH+RELOAD: A High Resolution, Low Noise, L3 Cache Side-Channel Attack. In USENIX Security Symposium (2014), USENIX Association, pp. 719–732.

[61] ZHANG, K., AND WANG, X. Peeping Tom in the Neighborhood: Keystroke Eavesdropping on Multi-User Systems. In USENIX Security Symposium (2009), USENIX Association, pp. 17–32.