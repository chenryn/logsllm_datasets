### Isolation and Security (Audit, Redirect, Mirror, Quarantine)

#### Figure 5: System Components
#### Figure 7: Data Plane

**Status Message and Virtual Interface Status Reporting:**
The status message and the equivalent status of a virtual interface are seamlessly reported to the controller. As a safeguard, a fingerprint of the key used to sign the package may be sent to the PBS CONTROLLER for application validation. This helps in identifying possible duplicate identifiers that may arise from the extraction of application-level information.

**Data Plane:**
The Data Plane is the forwarding fabric that manages fine-grained flows within PBS-DROID. It maintains flow tables containing flow rules, which enforce access control logic as illustrated in Figure 7. The internal bridge (Layer-2 interface) is linked to the local network stack and includes both physical and virtual interfaces to capture Layer-2 frames. When an interface receives packets, the Data Plane checks the flow table for matching flow entries. If a match is found, it executes the corresponding actions (e.g., forwarding, dropping, or sending to the controller). If no match is found, a new flow request message is sent to the controller for further decision-making.

We use two types of flow tables to store flow entries: one in user space and the other in kernel space. The kernel space table supports fast match lookups via a kernel cache, while the user space table allows full match lookups using a proactive tuple space search.

**Application-Aware Flows:**
In addition to normal packet processing from a physical network interface, an additional mechanism is required to handle application-aware flows through application-specific virtual interfaces. This is necessary because packets from an application must be hooked before they reach Layer-2 and then forwarded to the corresponding virtual interface. We utilize netfilter to hook packets after the local network stack completes packet processing. The netfilter hook is installed inside the Data Plane, and packets are captured at the NF POST ROUTING level. When a packet is hooked, we extract a UID from the socket buffer (struct sk_buff) and look up a matching package name and UID. The packet is then forwarded to its mapped virtual interface through a mapper generated in the Data Plane via the abstraction layer. This operation is performed by redirecting the netdev pointer of sk_buff in the kernel module. This mechanism enables faster and more efficient forwarding of application packets to the virtual interface compared to using standard user-space network commands like `ip` and `route`.

**Reverse Direction:**
The reverse direction, where packets travel from the network interface to an app, is managed by the controller using a flow rule.

### Enabling Fine-Grained Access Control

To provide application-aware flow control with Layer-2 granularity, we introduce an Abstraction Layer and Data Plane, as shown in Figure 5. The Abstraction Layer serves two roles:
1. Collecting application-level semantics for the PBS CONTROLLER.
2. Adopting application-level control logic from the PBS CONTROLLER.

For application-level semantics, we obtain a user identifier (UID) and a package name for each application on a device, extracted from the Android PackageManager at the framework layer, as shown in Figure 6. The UID identifies application flows, as flow-connection-information is not correlated with other unique identification information. The package name identifies an application by name but is a long character string. To avoid performance degradation, we use a hashing mechanism to convert the string to an unsigned integer. The UID and package name hash are then sent to the Data Plane for further processing.

Upon receiving the arbiter message containing the UID and package name hash, the Data Plane creates an internal virtual interface using another hash value calculated from the concatenation of the UID and package name hash. The virtual interface is added to the bridge of the datapath using standard Linux functions. This ensures that the bridge-registered virtual network interface name uniquely ties the Android package name and the Linux network stack connection flow. When the status of an application changes, the App Status Checker sends the state change to the Data Plane, and the status is interpreted for the corresponding virtual interface.

This abstraction scheme allows us to treat an application-specific virtual interface as a normal network port easily. Application attributes are informed to the controller during a secure connection handshake through a Port-App ID Translator.

### Enforcing Dynamic Context-Aware Policy

The Management Plane facilitates enterprise policy storage, device context update lookup, and communication with the PBS CONTROLLER. It consists of three components on the mobile device: Policy Engine, Arbiter, and Control Channel.

**Policy Engine:**
The Policy Engine maintains an administrator-defined policy table on the mobile device. Entries in the table are composed by the PBS CONTROLLER from our High-Level Policy Language. Each entry consists of three parts: predicates, actions, and a match field. Predicates are a set of multiple conditions separated by conjunctions, e.g., "time is noon and location is building A." Actions are associated with flow rules for policy enforcement, such as modifying the corresponding flow rule or packet header fields in the Data Plane to redirect, mirror, or quarantine the flow. The match field is used to identify the policy associated with the flow rule and can include wildcards to associate multiple flows with a single common/global policy entry, saving space in the policy table.

**Arbiter:**
The Arbiter retrieves Android device context in real time by listening to predefined PBS-DROID relevant events (Table II). It monitors device-specific context updates and sends them to the Policy Engine. When a policy entry predicate is satisfied with a context event, the corresponding policy action is carried out. The Arbiter also triggers the Policy Engine to notify the PBS CONTROLLER of device contexts according to the policy via the control channel.

**Control Channel:**
The control channel facilitates secure communication between the Management Plane and the PBS CONTROLLER, secured via SSL/TLS. It serves two purposes:
1. Basic OpenFlow protocol messages, such as flow rule updates and controller decision queries.
2. Processing our policy protocol (Table I) for bi-directional communication between the controller and PBS-DROID for policy management. The protocol borrows from OpenFlow, utilizing two existing OF messages and adding four new PBS-specific messages.

### PBS CONTROLLER

The PBS CONTROLLER provides a central programmable interface to the network administrator. Our controller design involves extending an existing SDN controller with new features.

**Network Programmability:**
The controller provides functions via Northbound APIs for network-flow and policy management. These API function calls are coded into the BYOD application in the controller implementation language (e.g., Java). The resulting application allows for real-time modification and enforcement of network policies and actions when loaded by the controller. The power of this application lies in its ability to use the controller APIs with high-level language features, enabling administrators to create sophisticated and dynamic network policy enforcement applications.

**Components of PBS CONTROLLER:**
1. **OF Channel:** Establishes a secure channel to PBS-DROID.
2. **Core:** Contains Flow Manager and Policy Manager to handle flows and policies.
3. **Admin:** Includes an enterprise policy storage database, Statistics/Context Trigger to manage device information, statistics, and contexts, as well as controller BYOD policy applications.

Figure 9 illustrates the flow diagram and interfaces of the PBS CONTROLLER, showing the interaction between the Data Plane, Management Plane, and the controller components.

### Events Tracked by PBS-DROID Arbiter

- **Application and NIC Status Changes:** When applications and NICs are started or stopped.
- **Device Location Changes:** When a device enters or leaves a specific area according to the policy.

This comprehensive approach ensures robust and flexible management of network policies and application flows, providing a seamless and secure environment for BYOD devices.