### Table VIII: Application of Our Classifier on a Real-World Dataset Used by ABP for Circumvention Monitoring

We applied our classifier to a real-world dataset used by Adblock Plus (ABP) for circumvention monitoring. The results are presented in this section. For instances classified as "No CV" (no circumvention), we sampled from the predicted set to achieve a 95% confidence level with a 5% margin of error.

### Keyword Detection for Circumvention Providers

To detect the presence of circumvention (CV) providers, we utilized specific keywords found in the page source or HTTP response headers. For example:
- **ExoClick** can be detected by the keywords "exoclick" and "exoloader" in the page source.
- **AdDefend**, **AdThrive**, and **MobiAds** can be identified by the keywords "addefend," "adthrive," and "mobiads," respectively.
- **Publica** can be detected by the key "publica user id" in the HTTP response Set-Cookie header.
- **Yandex** can be identified by the custom DOM tag "."

In total, we used seven keywords to identify the presence of six different CV providers listed in Table VI.

### Limitations of Keyword Detection

The presence of these keywords does not always indicate successful circumvention. It could also mean that the circumvention attempt failed or was not even attempted (e.g., dormant code). Therefore, these heuristics cannot replace CV-INSPECTOR for detecting sites that circumvent adblockers.

### Taxonomy of Circumvention Approaches

We characterized the obfuscation approaches used by different CV providers into full and partial obfuscation:
- **Web Request Obfuscation**:
  - **Full Obfuscation**: Use of randomized URLs, including subdomains and paths.
  - **Partial Obfuscation**: Use of first-party subdomains.
- **DOM Obfuscation**:
  - **Full Obfuscation**: Use of non-standard DOM structures, such as deeply nested elements or randomized tag attributes.
  - **Partial Obfuscation**: Only randomized tag attributes with simple DOM structures.

### Comparison of Obfuscation Techniques

- **ExoClick and AdDefend** use inlined JavaScript (JS) to implement their circumvention logic, which is difficult to block without affecting other page functionality.
- **AdThrive** redirects through several domains before fetching the JS that implements their circumvention logic.
- **ExoClick and AdDefend** serve their ad resources under first-party domains, making them hard to distinguish from legitimate content.
- **AdThrive** fetches ads in iframes using rotating third-party domains, subdomains, and randomized IDs.
- **ExoClick** uses a simpler ad structure (a hyperlink with two div children) and obfuscates the ad image by serving it with CSS background-image.
- **AdDefend** employs a nested DOM structure with obfuscated IDs, while **Yandex** uses nested non-standard tags with obfuscated class names.

### Performance of CV-INSPECTOR

We analyzed CV-INSPECTOR's performance in detecting different CV providers by matching each detected instance in Table VI with our deployment results on Tranco-20K sites from Table V. CV-INSPECTOR achieved good precision in detecting popular CV providers. For AdDefend and MobiAds, we used "N/A" to denote insufficient data.

### B. Monitoring Circumvention for Sites of Interest

#### Continuous Monitoring of ACVL

As discussed in Section III-B, the Anti-Circumvention Violation List (ACVL) is updated frequently to combat the ongoing battle between adblockers and circumvention providers. Filter list authors focus on "sites of interest" and must continuously monitor them to ensure the effectiveness of the filter list. This process requires significant human effort.

#### Automated Monitoring with CV-INSPECTOR

CV-INSPECTOR can automate the monitoring of whether the ACVL is effective in countering circumvention. We use the same approach as in Figure 6 but include the ACVL in addition to the EasyList (EL) when crawling a site with an adblocker. We evaluated two datasets:
1. **GTP Dataset**: Contains all sites that successfully circumvented the adblocker in our ground truth (GT).
2. **Adblock Plus Monitoring Dataset**: Contains 360 sites that ABP continuously monitors for circumvention activity to update filter rules.

##### 1. Monitoring Sites in GTP

We used CV-INSPECTOR to classify 700 sites from the GT dataset that originated from the ACVL and successfully circumvented the adblocker. CV-INSPECTOR detected 244 sites as "CV" with 91% precision and 465 sites as "No CV" with 89% precision. This indicates that more than one-third of the sites with relevant filter rules in the ACVL can still circumvent adblockers. We suggest periodic use of CV-INSPECTOR (e.g., every hour) to monitor these sites.

##### 2. Monitoring Sites from ABP

We applied CV-INSPECTOR to 360 sites manually monitored by the ABP team. Out of these, 5 sites were detected as "CV" and 355 as "No CV" with high precision. This shows that even closely monitored sites can successfully circumvent the adblocker. CV-INSPECTOR saved up to 98% of the work for ACVL curators by correctly predicting 188 out of 190 sites.

### VI. Discussion and Future Directions

#### Summary

This paper studies the emerging threat of circumvention services that help publishers bypass adblockers and re-inject ads. CV services are sophisticated, opaque, and exploit fundamental weaknesses in adblockers' design and the open-source nature of anti-CV community efforts. CV-INSPECTOR is a methodology for automatically crawling sites and accurately detecting circumvention. It serves as an automation tool for filter list curators, reducing human labeling efforts by 98%.

#### Open Source Tools

We plan to make CV-INSPECTOR available to the community, including the labeled dataset, crawling instrumentation, and trained classifier.

#### Limitations

- **Differential Analysis**: Relies on differences between "No Adblocker" and "With Adblocker" cases. If there are no actual differences, CV-INSPECTOR may not detect circumvention.
- **User Interaction**: Only considers circumvention that appears without user interaction.

#### Future Directions

- **Filter Rule Generation**: Automate the generation of filter rules based on differential analysis.
- **Feature Engineering**: Improve existing features and consider new features, especially from JavaScript.
- **Robustness**: Evaluate the robustness of CV-INSPECTOR against evolving obfuscation techniques.

### Acknowledgements

This work is supported in part by NSF Awards 1815666, 1715152, 1815131, and 1954224. We thank Sooel Son, the NDSS reviewers, UCI undergraduate students Qingchuan Yang and Yiyu Qian, and eyeo for providing the Adblock Plus Monitoring dataset and insights on circumvention.