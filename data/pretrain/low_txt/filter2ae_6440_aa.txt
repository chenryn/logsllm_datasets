**译者：知道创宇404实验室翻译组**  
**原文链接：**

## 前言
2020年7月，NVISO检测到一组恶意Excel文档（也称为“maldocs”），这些文档通过VBA激活的电子表格传播恶意软件。尽管我们曾见过类似的恶意VBA代码和有效载荷，但创建这些Excel文档的方法引起了我们的特别关注。

攻击者使用了一种技术，可以在不依赖Microsoft Office的情况下创建带有宏的Excel工作簿。这种特定的技术使得这些文档在检测率上通常低于标准maldocs。

本文将概述这些恶意文档的生成方式，并简要描述观察到的有效载荷。最后，我们将提供一些建议和危害指标，以帮助组织防范此类攻击。

## 主要发现
- 恶意的Microsoft Office文档是使用EPPlus软件而不是Microsoft Office Excel创建的。这些文档可能与典型的Excel文档有所不同，因此可能会引起注意。
- NVISO基于上传到VirusTotal等服务的有限数量文件以及整个活动中有效载荷传递的相似性，以中等可信度评估该活动是由单一攻击者执行的。
- 截至本文发布之日，观察到的有效载荷大多数是所谓的信息窃取者，其目的是从浏览器、电子邮件客户端等获取密码。
- 这些文件中的有效载荷仅在混淆和伪装方面有所发展。

## 分析
以下分析分为两个部分，分别涉及感染链中的特定环节。

### 恶意文件分析
在之前的文章中，我们讨论了“VBA清除”技术[[1]](https://blog.nviso.eu/2020/02/25/evidence-of-vba-purging-found-in-malicious-documents/
"[\[1\]]")，该技术可以从VBA项目中删除已编译的VBA代码，从而降低防病毒产品的初始检测率。最初，我们认为这些文档是使用Excel创建后经过VBA清除的。然而，进一步研究发现，这些文档实际上是使用.NET库创建的，该库生成Office Open XML（OOXML）电子表格。

EPPlus就是这样一种工具，它可以独立于Microsoft Office创建Office文档。多年来，我们也一直在使用EPPlus为红队和渗透测试人员创建恶意文档。当我们注意到这些maldocs没有编译的VBA代码且缺少Office元数据时，我们很快想到了EPPlus。

#### OOXML文件格式
OOXML是一种开放包装约定（OPC）格式，主要包含ZIP容器内的XML文件，也可能包含二进制文件（如图片）。它由Microsoft在Office 2007版本中首次引入。OOXML电子表格使用扩展名.xlsx和.xlsm（用于带有宏的电子表格）。

#### EPPlus特性
EPPlus创建的VBA项目不包含已编译的VBA代码，因为创建编译VBA代码的算法是Microsoft专有的。我们检测到的第一个恶意文档是在2020年6月22日创建的，在接下来的两个月里，我们发现了超过200个恶意文档。最近几周，攻击者的活动频率有所增加，有时每天会出现10多个新的恶意文档。

![图1-每天观察到的独特maldocs](图1-每天观察到的独特maldocs)

在两个月内发现的maldocs具有许多与Microsoft Office创建的文档不同的属性，这表明它们是使用独立于Microsoft Excel的工具创建的。尽管我们没有攻击者使用的具体工具副本，但这些恶意文档的属性使我们确信它们是使用EPPlus创建的。

EPPlus的一些关键特性包括但不限于：
- **功能强大且用途广泛**：不仅可以创建包含VBA项目的电子表格，还可以对项目进行密码保护和/或数字签名。它不依赖于Microsoft Office，也可以在Mono（跨平台开源.NET框架）上运行。
- **ZIP日期**：对于使用Microsoft Office创建（或编辑）的文档，ZIP文件中的时间戳始终为1980-01-01 00:00:00（DOSDATE为0x0021，DOSTIME为0x0000）。而使用EPPlus创建的OOXML文件具有与文档创建时间相对应的时间戳，时间戳之间可能相差2秒。
- **额外的ZIP记录**：Microsoft Office创建的OOXML文件包含三种ZIP记录类型。而EPPlus创建的文件包含四种ZIP记录类型，每个ZIP文件记录后还包括一个ZIP数据描述记录。
- **缺少Office文档元数据**：使用Microsoft Office创建的OOXML文档包含元数据（如作者、标题等），存储在docProps文件夹中的XML文件中。默认情况下，使用EPPlus创建的文档没有这些元数据。
- **已清除VBA**：通过Microsoft Office创建的VBA项目包含OLE文件（vbaProject.bin），其中包含已编译的VBA代码和压缩的VBA源代码。而使用EPPlus创建的文档不包含已编译的VBA代码，仅包含压缩的VBA源代码。

#### VBA源代码特性
我们还观察到了一些VBA源代码的特性，这些特性提示使用了基于EPPlus之类的库。攻击者使用的VBA源代码有两个变体，有些变体使用PowerShell下载有效载荷，其他变体则使用纯VBA代码。所有这些变体都包含一个调用程序，参数是一个带有URL的字符串（BASE64或十六进制编码）。例如（十六进制示例）：`Loader"68 74 74 70…"`

请注意，函数名称和参数之间没有空格字符：Loader与“ 68 74 74 70…”之间没有空格。这表明VBA代码不是通过Office中的VBA EDI输入的，因为当输入这样的语句时，VBA EDI会自动添加一个空格字符。缺少此空格字符说明该代码不是通过VBA EDI输入的，而是可能通过EPPlus之类的库输入的。

为了说明这些差异，我们使用EPPlus库和内部工具之一（ExcelVBA）创建了一个示例。我们使用ExcelVBA工具在文本文件vba.txt中创建了一个vba.xlsm文件，并显示了其某些属性。

![图6 – NVISO使用EPPlus库创建的XLSM文件](图6 – NVISO使用EPPLUS库创建的XLSM文件)

![图7 –运行oledump.py显示该文档是使用EPPlus库创建的](图7 –运行oledump.py显示该文档是使用EPPlus库创建的)

一些恶意文档包含使用EPPlus Wiki上的示例代码创建的对象。我们通过以下示例（此广告系列中的第一个文档）进行说明：

- **文件名**：扫描顺序列表.xlsm
- **MD5**：8857fae198acd87f7581c7ef7227c34d
- **SHA256**：8a863b5f154e1ddba695453fdd0f5b83d9d555bae6cf377963c9009c9fa6c9be
- **文件大小**：5.77 KB（5911字节）
- **最早内容修改**：2020-06-04

该文档包含一个名为`VBASampleRect`的drawing1.xml对象（圆角矩形）。

![图8 – maldoc的zipdump](图8 – maldoc的zipdump)

![图9 –选择drawing1.xml对象显示名称](图9 –选择drawing1.xml对象显示名称)

这是使用EPPlus Wiki [[2]](https://github.com/EPPlusSoftware/EPPlus/wiki/VBA "EPPlus Wiki")上的示例代码创建的。

![图10 – EPPlus示例代码，清楚地显示了相似之处](图10 – EPPlus示例代码，清楚地显示了相似之处)

值得注意的是，我们观察到的所有恶意文档的VBA项目均受密码保护。有趣的是，VBA代码本身未经编码/加密，而是以明文形式存储（尽管经过压缩）[[3]](https://blog.didierstevens.com/2020/07/20/cracking-vba-project-passwords/ "Cracking VBA Project Passwords")。当打开具有受密码保护的VBA项目的文档时，VBA宏将在没有密码的情况下执行：用户不需要提供密码。仅在VBA编辑器中需要密码。