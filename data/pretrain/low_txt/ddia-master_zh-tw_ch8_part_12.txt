### 分布式系统中的部分失效及其容错机制

**部分失效（partial failure）** 是分布式系统的决定性特征之一。在软件尝试与其他节点进行交互时，可能会遇到各种问题，如操作失败、响应延迟或无响应（最终超时）。为了使分布式系统在某些组件出现故障的情况下仍能继续运行，我们需要在软件中构建针对部分失效的容错机制。

#### 检测错误
容错的第一步是检测错误，但这一过程本身也颇具挑战。大多数系统缺乏准确检测节点是否故障的机制，因此许多分布式算法依赖于**超时**来判断远程节点是否可用。然而，超时无法区分网络故障和节点故障，并且可变的网络延迟有时会导致节点被错误地怀疑为故障。此外，节点可能处于降级状态，例如由于驱动程序错误，千兆网卡的吞吐量突然下降到1 Kb/s【94】。这种“跛行”节点比完全失效的节点更难处理。

#### 容错机制
一旦检测到故障，实现系统的容错也非常复杂。在分布式系统中，不存在全局变量、共享内存或共同知识等共享状态。节点甚至无法就当前时间达成一致。信息从一个节点传递到另一个节点的唯一方式是通过不可靠的网络。重大决策不能由单个节点安全完成，因此需要一种协议来从其他节点获取帮助，并争取达到法定人数以达成共识。

对于习惯于在理想化的单机环境中编写软件的开发者来说，转向分布式系统的现实可能会感到震惊。如果能够在单台计算机上解决问题，分布式系统工程师通常认为这个问题是平凡的【5】。单台计算机现在确实可以做很多事情【95】。如果可以避免开启潘多拉的盒子，将所有东西放在一台机器上通常是值得的。

然而，正如在[第二部分](part-ii.md)的介绍中所讨论的那样，可伸缩性并不是使用分布式系统的唯一原因。容错和低延迟（通过将数据放置在靠近用户的位置）也是重要的目标，而这些目标无法用单个节点实现。

#### 不可靠的网络与时钟
本章还探讨了网络、时钟和进程的不可靠性是否是不可避免的自然规律。我们发现，虽然可以通过提供硬实时响应保证和有限延迟来提高网络可靠性，但这非常昂贵且导致硬件资源利用率降低。大多数非关键安全系统会选择**便宜而不可靠**的方案，而不是**昂贵且可靠**的方案。

超级计算机采用可靠的组件，当组件发生故障时必须完全停止并重新启动。相比之下，分布式系统可以在服务层面不中断的情况下永久运行，因为所有的错误和维护都可以在节点级别进行处理——至少理论上如此。（实际上，如果一个错误的配置变更被应用到所有节点，仍然会使分布式系统瘫痪）。

本章主要讨论了存在的问题，描绘了一幅黯淡的前景。在[下一章](ch9.md)中，我们将继续讨论解决方案，并探讨一些旨在解决分布式系统中所有问题的算法。

## 参考文献
1. Mark Cavage: "Just No Getting Around It: You’re Building a Distributed System," *ACM Queue*, volume 11, number 4, pages 80-89, April 2013. [doi:10.1145/2466486.2482856](http://dx.doi.org/10.1145/2466486.2482856)
2. Jay Kreps: "Getting Real About Distributed System Reliability," *blog.empathybox.com*, March 19, 2012.
3. Sydney Padua: *The Thrilling Adventures of Lovelace and Babbage: The (Mostly) True Story of the First Computer*. Particular Books, April ISBN: 978-0-141-98151-2
4. Coda Hale: "You Can’t Sacrifice Partition Tolerance," *codahale.com*, October 7, 2010.
5. Jeff Hodges: "Notes on Distributed Systems for Young Bloods," *somethingsimilar.com*, January 14, 2013.
... （其余参考文献略）