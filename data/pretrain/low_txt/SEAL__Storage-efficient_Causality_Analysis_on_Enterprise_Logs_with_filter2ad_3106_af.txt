### References

1. **Knowledge Discovery and Data Mining**. Pages 1755–1764, 2016.

2. **Emaad Manzoor, Sadegh M Milajerdi, and Leman Akoglu**. *Fast Memory-efficient Anomaly Detection in Streaming Heterogeneous Graphs*. In SIGKDD, pages 1035–1044, New York, New York, USA, 2016. ACM Press.

3. **Hossein Maserrat and Jian Pei**. *Neighbor Query Friendly Compression of Social Networks*. In Proceedings of the 16th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, pages 533–542, 2010.

4. **Microsoft**. *Event Tracing for Windows (ETW)*. [Online]. Available: https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/event-tracing-for-windows--etw-, 2017.

5. **Sadegh M Milajerdi, Birhanu Eshete, Rigel Gjomemo, and Venkat N Venkatakrishnan**. *Propatrol: Attack Investigation via Extracted High-level Tasks*. In International Conference on Information Systems Security, pages 107–126. Springer, 2018.

6. **Sadegh M Milajerdi, Birhanu Eshete, Rigel Gjomemo, and VN Venkatakrishnan**. *Poirot: Aligning Attack Behavior with Kernel Audit Records for Cyber Threat Hunting*. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, pages 1795–1812, 2019.

7. **Sadegh M Milajerdi, Rigel Gjomemo, Birhanu Eshete, R Sekar, and VN Venkatakrishnan**. *Holmes: Real-time APT Detection Through Correlation of Suspicious Information Flows*. In 2019 IEEE Symposium on Security and Privacy (SP), pages 1137–1152. IEEE, 2019.

8. **Jeffrey Mogul, Balachander Krishnamurthy, Fred Douglis, Anja Feldmann, Yaron Goland, Arthur van Hoff, and D Hellerstein**. *Delta Encoding in HTTP*. IETF, January, 65, 2002.

9. **Hung Nguyen, Radoslav Ivanov, Linh TX Phan, Oleg Sokolsky, James Weimer, and Insup Lee**. *Logsafe: Secure and Scalable Data Logger for IoT Devices*. In 2018 IEEE/ACM Third International Conference on Internet-of-Things Design and Implementation (IoTDI), pages 141–152. IEEE, 2018.

10. **Patrick E O’Neil**. *Model 204 Architecture and Performance*. In International Workshop on High Performance Transaction Systems, pages 39–59. Springer, 1987.

11. **Alina Oprea, Zhou Li, Robin Norris, and Kevin Bowers**. *MADE: Security Analytics for Enterprise Threat Detection*. In Proceedings of the 34th Annual Computer Security Applications Conference, pages 124–136, 2018.

12. **Alina Oprea, Zhou Li, Ting-Fang Yen, Sang H Chin, and Sumayah Alrwais**. *Detection of Early-Stage Enterprise Infection by Mining Large-Scale Log Data*. In 2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, pages 45–56. IEEE, 2015.

13. **Riccardo Paccagnella, Pubali Datta, Wajih Ul Hassan, Adam Bates, Christopher W Fletcher, Andrew Miller, and Dave Tian**. *Custos: Practical Tamper-Evident Auditing of Operating Systems Using Trusted Execution*. In Proc. of the Symposium on Network and Distributed System Security (NDSS), 2020.

14. **Thomas Pasquier, Xueyuan Han, Mark Goldstein, Thomas Moyer, David Eyers, Margo Seltzer, and Jean Bacon**. *Practical Whole-System Provenance Capture*. In Proceedings of the 2017 Symposium on Cloud Computing, pages 405–418, 2017.

15. **Thomas Pasquier, Xueyuan Han, Thomas Moyer, Adam Bates, Olivier Hermant, David Eyers, Jean Bacon, and Margo Seltzer**. *Runtime Analysis of Whole-System Provenance*. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, pages 1601–1616, 2018.

16. **Kexin Pei, Zhongshu Gu, Brendan Saltaformaggio, Shiqing Ma, Fei Wang, Zhiwei Zhang, Luo Si, Xiangyu Zhang, and Dongyan Xu**. *Hercule: Attack Story Reconstruction via Community Discovery on Correlated Log Graph*. In Proceedings of the 32nd Annual Conference on Computer Security Applications, pages 583–595, 2016.

17. **Vijayshankar Raman and Garret Swart**. *How to Wring a Table Dry: Entropy Compression of Relations and Querying of Compressed Relations*. In Proceedings of the 32nd International Conference on Very Large Data Bases, pages 858–869, 2006.

18. **Redhat**. *Chapter 7: System Auditing*. [Online]. Available: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security_guide/chap-system_auditing, 2019.

19. **Omid Setayeshfar, Christian Adkins, Matthew Jones, Kyu Hyung Lee, and Prashant Doshi**. *Graalf: Supporting Graphical Analysis of Audit Logs for Forensics*. arXiv preprint arXiv:1909.00902, 2019.

20. **Carlton Shepherd, Raja Naeem Akram, and Konstantinos Markantonakis**. *Emlog: Tamper-Resistant System Logging for Constrained Devices with TEEs*. In IFIP International Conference on Information Security Theory and Practice, pages 75–92. Springer, 2017.

21. **Xiaokui Shu, Frederico Araujo, Douglas L Schales, Marc Ph Stoecklin, Jiyong Jang, Heqing Huang, and Josyula R Rao**. *Threat Intelligence Computing*. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, pages 1883–1898, 2018.

22. **Sriranjani Sitaraman and Subbarayan Venkatesan**. *Forensic Analysis of File System Intrusions Using Improved Backtracking*. In Third IEEE International Workshop on Information Assurance (IWIA’05), pages 154–163. IEEE, 2005.

23. **Michał Stabno and Robert Wrembel**. *RLH: Bitmap Compression Technique Based on Run-Length and Huffman Encoding*. Information Systems, 34(4-5):400–414, 2009.

24. **Mike Stonebraker, Daniel J Abadi, Adam Batkin, Xuedong Chen, Mitch Cherniack, Miguel Ferreira, Edmond Lau, Amerson Lin, Sam Madden, Elizabeth O’Neil, et al.** *C-Store: A Column-Oriented DBMS*. In Making Databases Work: The Pragmatic Wisdom of Michael Stonebraker, pages 491–518. 2018.

25. **Yujuan Tan, Hong Jiang, Dan Feng, Lei Tian, and Zhichao Yan**. *CabDedupe: A Causality-Based Deduplication Performance Booster for Cloud Backup Services*. In 2011 IEEE International Parallel & Distributed Processing Symposium, pages 1266–1277. IEEE, 2011.

26. **Yutao Tang, Ding Li, Zhichun Li, Mu Zhang, Kangkook Jee, Xusheng Xiao, Zhenyu Wu, Junghwan Rhee, Fengyuan Xu, and Qun Li**. *NodeMerge: Template-Based Efficient Data Reduction for Big-Data Causality Analysis*. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, pages 1324–1337. ACM, 2018.

27. **Trustwave**. *Trustwave Global Security Report*, 2015.

28. **J Uthayakumar, T Vengattaraman, and P Dhavachelvan**. *A Survey on Data Compression Techniques: From the Perspective of Data Quality, Coding Schemes, Data Type, and Applications*. Journal of King Saud University-Computer and Information Sciences, 2018.

29. **Phani Vadrevu, Jienan Liu, Bo Li, Babak Rahbarinia, Kyu Hyung Lee, and Roberto Perdisci**. *Enabling Reconstruction of Attacks on Users via Efficient Browsing Snapshots*. In NDSS, 2017.

30. **Fei Wang, Yonghwi Kwon, Shiqing Ma, Xiangyu Zhang, and Dongyan Xu**. *LProv: Practical Library-Aware Provenance Tracing*. In Proceedings of the 34th Annual Computer Security Applications Conference, pages 605–617, 2018.

31. **Kesheng Wu, Ekow J Otoo, and Arie Shoshani**. *Optimizing Bitmap Indices with Efficient Compression*. ACM Transactions on Database Systems (TODS), 31(1):1–38, 2006.

32. **Zhang Xu, Zhenyu Wu, Zhichun Li, Kangkook Jee, Junghwan Rhee, Xusheng Xiao, Fengyuan Xu, Haining Wang, and Guofei Jiang**. *High Fidelity Data Reduction for Big Data Security Dependency Analyses*. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pages 504–516. ACM, 2016.

33. **Ting-Fang Yen, Alina Oprea, Kaan Onarlioglu, Todd Leetham, William Robertson, Ari Juels, and Engin Kirda**. *Beehive: Large-Scale Log Analysis for Detecting Suspicious Activity in Enterprise Networks*. In Proceedings of the 29th Annual Computer Security Applications Conference, pages 199–208, 2013.

### A. Compression Ratio as a Function of Average Degrees

In this section, we derive explicit expressions for the compression ratio. We show that the compressed graph size is always smaller than the original size, though new vertices might be introduced.

In a dependency graph \( G = (V, E) \), the number of vertices (nodes) is denoted by \( n = |V| \), and the number of edges is denoted by \( m = |E| \). Recall that the edges are directed, and multiple edges (repeated edges) may exist from one node to another. For node \( v \in V \), let its number of parent nodes be \( p_v \), and its number of incoming edges be \( m_v \). We have \( m = \sum_{v \in V} m_v \). Moreover, denote by \( p = \sum_{v \in V} p_v \) the total number of parent nodes for all nodes in \( V \). Therefore, \( p \) represents the number of edges of \( G \) after removing repeated ones.

Let \( G_{\text{undirected}} \) denote the undirected graph which is identical to \( G \) except that edge directions are removed. Let \( G_{\text{simple}} \) denote the simple graph obtained by removing the edge directions and the repeated edges from \( G \). The average degree of the graph \( G_{\text{undirected}} \) is denoted by \( d_{\text{avg}} \). Then,

\[
d_{\text{avg}} = \frac{2 \sum_{v \in V} m_v}{n} = \frac{2m}{n}.
\]

The average degree of \( G_{\text{simple}} \) is denoted by \( p_{\text{avg}} \), which is

\[
p_{\text{avg}} = \frac{2 \sum_{v \in V} p_v}{n} = \frac{2p}{n}.
\]

Denote by \( S_{\text{event}}, S_{\text{node}} \) the event and node sizes before compression, and by \( S'_{\text{event}}, S'_{\text{node}} \) the sizes after compression. They can be calculated by:

\[
S_{\text{event}} = \sum_{v \in V} m_v C_{\text{event}},
\]
\[
S'_{\text{event}} = \sum_{v \in V : m_v > 1} \left( C_{\text{event}} + 2m_v C_{\Delta} \right) + \sum_{v \in V : m_v = 1} C_{\text{event}},
\]
\[
S_{\text{node}} = n C_{\text{node}},
\]
\[
S'_{\text{node}} = n C_{\text{node}} + \text{size\_map}.
\]

Here, \( C_{\text{event}} = 105 \) (measured in bytes) is the size of all attributes of an event in the uncompressed format. In our database, \( C_{\text{event}} \) includes the sizes of `starttime`, `endtime`, `agentid`, etc. \( C_{\Delta} \) is the delta-encoded data and separator size for each time entry, and the factor 2 reflects that two time attributes are recorded for every event. For most of the cases we have observed, \( C_{\Delta} \leq 4 \) bytes. \( C_{\text{node}} \) is the size of one node entry in the uncompressed format, including the size of `nodeid`, `nodename`, etc. Finally, `size_map` is the node map shown in Table 2, and can be expressed as

\[
\text{size\_map} = \sum_{v \in V} \text{CID}(p_v + 1).
\]

Here, `CID` = 4 is the constant size required for each `nodeid`.

The above size parameters depend on the particular database attributes, and to allow for an arbitrary database design, we use the general expressions instead of the particular sizes. In our experiments, \( S_{\text{node}} \) and \( S'_{\text{node}} \) take a negligible fraction of the total storage. As a result, we ignore the node sizes in the following calculations. However, an exact calculation can be carried out if the node size is comparable to the event size.

The difference between the original size and the compressed size is:

\[
S_{\text{event}} - S'_{\text{event}} = \sum_{v \in V : m_v > 1} \left( m_v (C_{\text{event}} - 2 C_{\Delta}) - C_{\text{event}} \right).
\]

It is obvious that the compressed size is always smaller than the original size if \( C_{\text{event}} > 2 C_{\Delta} \), which is true in our deployment. The compression ratio can be expressed as

\[
\text{ratio} = \frac{S_{\text{event}}}{S'_{\text{event}}} = \frac{\sum_{v \in V} m_v C_{\text{event}}}{\sum_{v \in V} \left( C_{\text{event}} + 2 m_v C_{\Delta} \right)} = \frac{m C_{\text{event}}}{n C_{\text{event}} + 2 m C_{\Delta}} = \frac{d_{\text{avg}} C_{\text{event}}}{2 C_{\text{event}} + 2 d_{\text{avg}} C_{\Delta}}.
\]

### B. Average Degree Estimator Evaluation

We measure the performance of the compression ratio (or average degree) estimator on our dataset following Algorithm 2. We run the algorithm on 8 chunks, each containing \( 10^6 \) events. For each chunk, 20 independent trials are conducted. The parameters are chosen to be \( \theta = 10 \), \( p_{\text{jump}} = 0.1 \), such that the estimation error is minimized for the chunks in the experiment. We measure the mean squared error (MSE) between the estimated average degree \( \hat{d} \) and the true average degree \( d_{\text{avg}} \), averaged over all trials and all chunks in the experiment. The results are shown in Figure 10. The MSE value has an obvious drop as the sample size percentage grows up to 5% and quickly converges when the samples cover half of the whole trunk. We then set 5% as the sample size.

Figure 10 also shows that our method has better accuracy compared to the naive estimator, which estimates \( d_{\text{avg}} \) by directly calculating the average degrees of uniformly sampled nodes.

Equation (14) holds because we remove the condition \( m_v > 1 \) in the denominator, and thus we obtain a lower bound on the ratio. In Equation (16), we multiply the numerator and the denominator by \( \frac{2}{n} \) and used Equation (4). If the node size is also included, the ratio will also depend on \( p_{\text{avg}} \) defined in Equation (5).

**Remark:**
1. Let us call the dependency graph "incompressible" if its compression ratio is lower than a given threshold. It is often unacceptable to compress graphs that are incompressible. Therefore, our estimated compression ratio is a lower bound of the exact ratio (e.g., the inequality of Equation (14)).
2. The discussion in Section 3.6 assumes that the node map size is negligible. If it is not, we also need to estimate \( p_{\text{avg}} \). Note that \( p_{\text{avg}} \) corresponds to the average degree of the simple graph \( G_{\text{simple}} \), one can simply apply Algorithm 2 to \( H = G_{\text{simple}} \).

### Figure 10: Mean Squared Error (MSE) of Estimated Average Degree

The y-axis is the mean squared error distance between the estimated average degree from the sampled data and the true average degree, averaged over all trials and all chunks in the experiment. The x-axis is the percentage of the sample.

![Mean Squared Error (MSE) of Estimated Average Degree](https://example.com/figure10.png)

---

This optimized version of your text is more structured, clear, and professional. It includes proper formatting and a coherent flow, making it easier to read and understand.