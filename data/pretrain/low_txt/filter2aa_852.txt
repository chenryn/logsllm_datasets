# Web Application Firewall (WAF) Implementation

## Presenter: OuTian
- **Current Position:** Security Consultant at Dunyang Technology
- **Expertise:**
  - Penetration Testing and Subsequent Security Planning
  - Incident Response and Forensic Analysis

## Introduction
### Abstract
- The increasing severity of web application attacks poses a significant threat, yet many domestic enterprises still rely on traditional firewalls and Intrusion Prevention Systems (IPS). This session will provide an in-depth overview of the functionality and implementation of Web Application Firewalls (WAFs).

## Agenda
1. **Introduction to WAF**
2. **General Web Vulnerabilities**
3. **Functions of WAF**
4. **Implementation**
5. **Common Questions**
6. **Evasion Techniques**
7. **Conclusion**
8. **Q & A**

## 1. Introduction to WAF
- **What is WAF?**
  - A WAF is an intermediary device placed between a web client and a web server. It analyzes Layer-7 (OSI model) messages to detect and block security policy violations, thereby protecting the web server from attacks.
  
- **Why WAF?**
  - According to Gartner, 70% of successful malicious attacks target web applications. Traditional security devices are often ineffective against these threats.

- **Vendors:**
  - Breach
  - Citrix
  - F5
  - Imperva
  - NetContinuum
  - WebScurity

- **Structure:**
  - **Host-Based:**
    - Web Server Module/Plugin
    - Special Program Compiler
  - **Network-Based:**
    - Appliance
    - Deployment as Reverse Proxy or In-Line Mode
    - SSL Handshaking and Traffic Monitoring

- **WAF vs. Network Firewall:**
  - **WAF:**
    - Protects at Layer 7
    - Checks HTTP/HTTPS data
    - Blocks traffic with malicious attacks
    - Decrypts HTTPS packets
    - Inspects HTTP/HTML
  - **Network Firewall:**
    - Protects at Layer 3
    - Checks IP and port
    - Allows HTTP/HTTPS traffic even if it contains malicious content
    - Cannot decrypt HTTPS packets
    - No action on HTTP/HTML

- **WAF vs. IDS/IPS:**
  - **WAF:**
    - Positive Security Model
    - Behavior Modeling
    - Full SSL decryption
    - Tracks cookies and forms
  - **IDS/IPS:**
    - Negative Security Model
    - Signature-based detection
    - Typically no SSL decryption
    - No checks on cookies and forms

## 2. General Web Vulnerabilities
- **Design Errors:**
  - Buffer Overflow
  - SQL Injection
  - Cross-Site Scripting (XSS)
  - Arbitrary File Inclusion
  - Code Injection
  - Command Injection
  - Directory Traversal

- **Logic Design Errors:**
  - Cookie Poisoning
  - Parameter Tampering
  - Session Mismanagement
  - Upload File Mis-handling
  - Information Disclosure
  - Weak Authentication

- **OWASP Top 10 (2007):**
  - Cross-Site Scripting (XSS)
  - Injection Flaws
  - Malicious File Execution
  - Insecure Direct Object Reference
  - Cross-Site Request Forgery (CSRF)
  - Information Leakage and Improper Error Handling
  - Broken Authentication and Session Management
  - Insecure Cryptographic Storage
  - Insecure Communications
  - Failure to Restrict URL Access

- **Examples:**
  - **SQL Injection Example:**
    - [Insert Example]
  - **Cross-Site Scripting Example:**
    - [Insert Example]
  - **Arbitrary File Inclusion Example:**
    - [Insert Example]

## 3. Functions of WAF
- **Input Validation:**
  - URL
  - Buffer Overflow
  - Form Field Consistency
  - Form Field Format
  - Cookie Consistency
  - SQL Injection
  - Cross-Site Scripting
- **Output Checks:**
  - [Details]

- **URL:**
  - Check Allowed URL Resources
  - Deny Certain File Extensions (e.g., .phps, .inc, .sql, .core, .exe, .log)

- **Buffer Overflow:**
  - Limit Maximum Length of Data
  - Apply to URL, Headers, Cookies, POST Parameters, and POST Data

- **Form Field Consistency:**
  - Avoid Parameter Tampering
  - Track Form Field Content (e.g., Select, Radio Button, Checkbox, Hidden Value)

- **Cookie Consistency:**
  - Prevent Cookie Poisoning
  - Track Set-Cookie from the Web Server to Detect Modifications

- **Field Format:**
  - User Input: GET/POST/Headers/Cookies
  - Use Regular Expressions for Positive Checks (e.g., uid, username, id)

- **SQL Injection:**
  - Negative Check: Scan for Suspicious Characters and Syntax (e.g., 'select', 'delete', 'union')

- **Cross-Site Scripting:**
  - Negative Check: Scan for Client-Side Script/HTML Injection (e.g., `<script>`, `</script>`)

## 4. Implementation
- **Apache:**
  - **Mod_security:**
    - Open Source Project: http://www.modsecurity.org/
    - Embedded in Apache Web Server
    - Inexpensive and Easy to Deploy
    - Requires Installation and Configuration on Each Web Server
  - **Features:**
    - Input Validation for All Client Data
    - Output Checks
    - Buffer Overflow Protection
    - Flexible Rule Engine (Regular Expression Based)
    - Different Policies for Different Applications
    - Anti-Evasion Built-In
    - Upload File Interception and Real-Time Validation
    - Encoding Validation
    - Various Actions on Attack Detection (Log, Alert, Block, Call Scripts)

- **Basic Configuration Concept:**
  - WHEN: Matched URL/Header/Client/Time
  - DO: Check Data
  - THEN: Deny/Pass/Redirect/Execute/Chain Rules

- **Configuration Examples:**
  - **Avoid SQL Injection:**
    - `SecRule ARGS "(insert|select|update|delete)" deny`
  - **Avoid HTML Tags Injection:**
    - `SecRule ARGS "<script>" deny`
  - **Avoid Directory Traversal:**
    - `SecRule "\.\./" deny`

- **Mod_proxy:**
  - **Mod_proxy_http:**
    - Proxies HTTP Requests
  - **Mod_proxy_connect:**
    - Handles CONNECT HTTP Method
  - **Mod_proxy_balancer:**
    - Load Balancing for Server Farms
  - **Mod_proxy_ajp:**
    - Supports Apache JServ Protocol
  - **Mod_proxy_ftp:**
    - Supports FTP Sites

- **Mod_cache:**
  - **Mod_file_cache:**
    - Reduces Server Load Using File Handle and Memory Mapping
  - **Mod_disk_cache:**
    - Implements Disk-Based Cache
  - **Mod_mem_cache:**
    - Caches Open File Descriptors and Objects in Heap Storage

## 5. Common Questions
- **Real Client IP:**
  - **Environment:**
    - Client IP: w.x.y.z
    - WAF External IP: a.b.c.d
    - WAF Internal IP: 192.168.0.254
    - Web Server IP: 192.168.0.1
    - Domain Name: www.abc.com => a.b.c.d
  - **Solution:**
    - Web Application: Rewrite to Fetch Real IP from HTTP Header
    - Web Server Logs:
      - **Apache:** LogFormat/Module
      - **Tomcat:** Log Pattern
      - **IIS:** IIS Filter

- **Sticky Client:**
  - **Issue:**
    - If Web Servers Store Data in Sessions on Local Disks, L4 Devices Must "Sticky" the Client to the Same Server.
  - **Solution:**
    - Set L4 Devices to Sticky Client by Recognizing Other Data (e.g., Cookies: PHPSESSID, JSESSIONID, ASPSSSID)
    - Insert Another Cookie for Sticky

## 6. Evasion Techniques
- **Simple Evasion:**
  - Mixed Characters
  - Character Escaping
  - Whitespace

- **Path Obfuscation:**
  - Self-Referencing Directories
  - Double Slashes
  - Path Traversal
  - Windows Folder Separator

- **URL Encoding:**
  - Path Encoding
  - Parameter Encoding

- **Unicode Encoding:**
  - Overlong Characters
  - Unicode Encoding

- **Null-Byte Attacks:**
  - Null Byte (0x00) for String Termination
  - Some Checks Stop When Found Null Byte

## 7. Conclusion
- **Key Points:**
  - WAFs are highly effective in defending against web attacks.
  - Proper configuration is crucial for optimal protection.
  - Open-source WAF solutions are cost-effective but require self-management.
  - No solution can guarantee 100% perfect protection.

- **Final Thoughts:**
  - While WAFs are complex to configure, they are essential for modern web security. 

## 8. Q & A
- **Questions and Answers:**
  - [Open for Audience Questions]