### Optimized Text

#### Calculated Paths and Model Evaluation
Pre-calculated paths between entities facilitate a rapid evaluation of the entire model. The insertion and removal of temporary response actions, which are currently under examination, into the model is a critical step. This operation must be performed every time the impact of a new response action needs to be calculated. For the actual impact evaluation, the pre-calculated paths are utilized. This approach allows for the consideration of only the effects of firewall rules and the availability of resources, making local optimization (i.e., finding the best response action among a set of alternatives) highly efficient.

#### Global Optimization
Finding a globally optimal response configuration is more challenging. It requires an exhaustive search of all possible combinations of alternatives in the response history, which includes all response actions suggested by the Intrusion Response System (IRS). Although this search can be optimized, it remains a computationally expensive operation, with the number of possibilities increasing exponentially with the length of the response history (as shown in Figure 5).

**Figure 5: Response History and Globally Optimal Response Configuration**
- **Alt. 1**
  - 1
  - 2
- **Alt. 2**
  - 1
  - 2
- **Alt. 3**
  - 1
  - ...
- **Optimal Response Configuration**
  - **Alt. 1**
    - N
  - **Alt. 2**
    - N
  - **Alt. 3**
    - N
  - **Alt. 4**
    - N
  - **Alt. 1**
    - N+1
  - **Alt. 2**
    - N+1
  - **Alt. 3**
    - N+1

#### Performance Results
We conducted performance measurements to validate our theoretical results. The execution times of various tasks performed by our prototype evaluation engine were determined. We used a model with 35 resources that were heavily interdependent, with dependency trees reaching a depth of up to eight. These resources were distributed across five subnets. We evaluated the impact of thirteen different response actions, each consisting of up to ten firewall rule changes, user account modifications, and process status adjustments.

- **Average number of alternatives per test:** 2.5384
- **Performance measurements (Table 1) collected on a Pentium III machine with 550 MHz and 512 MB RAM:**
  - **Insertion and deletion:** 0.0255 ms
  - **Complete entity capability evaluation:** 0.915 ms
  - **Global optimization step:** 34.358 s

The results demonstrate that evaluating different response actions can be done quickly. This efficiency is due to the modeling of only crucial resources and the use of optimized data structures during the evaluation process. While complete entity capability evaluation is suitable for real-time response, a full global optimization may take longer, depending on the length of the response history and the number of alternative response actions. This is because a long history of response actions leads to an explosion in the number of sequences that need to be tried. However, real-time performance is not required for this task. Even if the model takes a minute to find a globally optimal response configuration, the result is still beneficial. Security must be prioritized first, and then usability can be improved.

#### Conclusion and Future Work
We have presented a network model and an evaluation function that can be consulted by an intrusion response component to determine the response action with the minimal negative impact on deployed network resources and their users. The effects of 'severe' responses and their impact on system usability can be estimated.

Our proposed network model considers network topology, firewall rules, services, and users, supporting dependencies both within the network and to and from external users. This allows us to determine the costs of disabling crucial resources in a response function. The evaluation mechanism, particularly the variant that determines the best action among a set of alternatives, exhibits good performance properties.

Future work will extend the network model and cost functions. Instead of deriving the capability of an entity from static dependency weights on various services, more sophisticated functions could be utilized. Typically, penalty costs are not constants but functions of time, and our model could be extended to reflect this. Efforts will also focus on improving the global optimization step, which is currently computationally expensive due to the exhaustive search. Techniques such as priority queues and dynamic programming may help speed up this process.

#### Appendix
**References**
- [1] D. Anderson, T. Frivold, A. Tamaru, and A. Valdes. Next Generation Intrusion Detection Expert System (NIDES). SRI International, 1994.
- [2] C. A. Carver, J. M. D. Hill, and U. W. Pooch. Limiting Uncertainty in Intrusion Response. In Proceedings of the 2001 IEEE Workshop on Information Assurance and Security, United States Military Academy, West Point, June 2001.
- [3] F. Cohen. Simulating Cyber Attacks, Defenses, and Consequences. http://all.net/journal/ntb/simulate/simulate.html, May 1999.
- [4] D. Denning. An intrusion-detection model. In IEEE Symposium on Security and Privacy, pages 118–131, Oakland, USA, 1986.
- [5] L. Eschenauer. Imsafe. http://imsafe.sourceforge.net, 2001.
- [6] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff. A sense of self for Unix processes. In Proceedings of the 1996 IEEE Symposium on Research in Security and Privacy, pages 120–128. IEEE Computer Society Press, 1996.
- [7] C. Krügel, T. Toth, and C. Kerer. Service specific anomaly detection for network intrusion detection. In Symposium on Applied Computing (SAC). ACM Scientific Press, March 2002.
- [8] P. G. Neumann and P. A. Porras. Experience with emerald to date. In 1st USENIX Workshop on Intrusion Detection and Network Monitoring, pages 73–80, Santa Clara, California, USA, April 1999.
- [9] P. A. Porras and P. G. Neumann. Emerald: Event monitoring enabling responses to anomalous live disturbances. In Proceedings of the 20th NIS Security Conference, October 1997.
- [10] M. Roesch. Snort - lightweight intrusion detection for networks. In USENIX Lisa 99, 1999.
- [11] D. Sterne, K. Djahandari, B. Wilson, B. Babson, D. Schnackenberg, H. Holliday, and T. Reid. Autonomic Response to Distributed Denial of Service Attacks. In Proceedings of 4th International Symposium, RAID 2001, Davis, CA, USA, October 2001.
- [12] G. Vigna, S. Eckmann, and R. A. Kemmerer. The STAT Tool Suite. In Proceedings of DISCEX 2000, Hilton Head, South Carolina, January 2000. IEEE Computer Society Press.
- [13] G. Vigna and R. A. Kemmerer. NetSTAT: A Network-based Intrusion Detection System. In 14th Annual Computer Security Applications Conference, December 1998.
- [14] G. Vigna and R. A. Kemmerer. NetSTAT: A Network-based Intrusion Detection System. Journal of Computer Security, 7(1):37–71, 1999.
- [15] G. B. White, E. A. Fisch, and U. W. Pooch. Cooperating security managers: A peer-based intrusion detection system. IEEE Network, pages 20–23, January/February 1996.

**Model Language Grammar**
- **Resource:**
  - **Header:**
    - **Type:**
    - **Locations:**
    - **Requires:**
    - **Properties:**
      - **Attribute = Value**
- **Example:**
  - **Network Model:**
    - DNS is service at 132.100.98.11 53 udp { processName="bind"; };
    - HTTP is service at 132.100.98.15 80, at 132.100.101.4 80 { processName="httpd"; };
    - NFS is service at 132.100.100.4 2049 { processName="nfsd"; };
    - anne is user at 132.100.100.27 { cost=5000; } requires (DNS at 132.100.98.11 53 udp 0.4) and (NFS at 132.100.100.4 2049 0.4 and HTTP at 132.100.101.4 80 0.2));
    - customer is user at !132.100.0.0/255.255.0.0 tcp { cost= 100000; } requires (HTTP at 132.100.101.4 80 1.0 or HTTP at 132.100.98.15 80 1.0 );

**Routing Entries and Firewall Rules:**
- **Subnet *.98:**
  - 132.100.98.1 132.100.98.0 0.0.0.0 255.255.255.0 eth1;
  - 132.100.99.16 132.100.99.0 0.0.0.0 255.255.255.0 eth0;
  - 132.100.98.1 0.0.0.0 132.100.99.1 255.255.255.0;

- **Subnet *.99:**
  - 132.100.99.1 132.100.99.0 0.0.0.0 255.255.255.0 eth0;
  - 132.100.99.1 0.0.0.0 132.101.27.1 255.255.255.0;
  - 132.100.98.1 132.100.98.0 0.0.0.0 255.255.255.0 eth1;
  - 132.100.101.1 132.100.100.0 132.100.101.79 255.255.255.0;
  - 132.101.27.34 132.101.27.0 external 0.0.0.0 255.255.255.0 eth3;

- **Subnet *.100:**
  - 132.100.100.1 132.100.100.0 0.0.0.0 255.255.255.0 eth1;
  - 132.100.100.1 0.0.0.0 132.100.101.1 255.255.255.0;
  - 132.100.101.14 132.100.101.0 0.0.0.0 255.255.255.0 eth0;

- **Subnet *.101:**
  - 132.100.101.1 132.100.101.0 0.0.0.0 255.255.255.0 eth0;
  - 132.100.100.27 132.100.100.0 0.0.0.0 255.255.255.0 eth1;
  - 132.100.99.34 132.100.99.0 0.0.0.0 255.255.255.0 eth2;
  - 132.100.101.79 0.0.0.0 132.100.99.1 255.255.255.0;

**Response Actions:**
- **First Response Action:**
  - **Alternative 1-A:**
    - Insert firewall rule at 132.100.101.1: fw forward -i eth2 -j deny;
  - **Alternative 1-B:**
    - Insert firewall rule at 132.100.99.1: fw forward -sourceIP !132.100.0.0 -sourceNm 255.255.0.0 -destIP 132.100.100.0 -destNm 255.255.255.0 -j deny;
    - Insert firewall rule at 132.100.99.1: fw forward -sourceIP !132.100.0.0 -sourceNm 255.255.0.0 -destIP 132.100.101.0 -destNm 255.255.255.0 -j deny;

- **Second Response Action:**
  - **Alternative 2-A:**
    - Insert firewall rule at 132.100.99.1: fw forward -destIP 132.100.98.0 -destNm 255.255.255.0 -j deny;

Initially, the response configuration does not contain any firewall rules (for simplicity). An Intrusion Detection (ID) system detects an attack coming from the Internet towards the machine 132.100.101.4, which is running the HTTP server. The IRS identifies two ways to protect this server (labeled Alternative 1-A and Alternative 1-B). The IRS requests the evaluation function to calculate the effects of both response actions.

- **Alternative 1-A:**
  - The capability of the user Anne is reduced because she will not be able to access the DNS server anymore, leading to a penalty cost of 2000. The capability of the Customer is not reduced because they can use one of two alternative HTTP servers. The total penalty cost for this alternative is 2000.

- **Alternative 1-B:**
  - The capability of both the Customer and Anne is not reduced, resulting in a total penalty cost of 0.0. Therefore, the IRS will choose this variant because it has a lower penalty value.

The ID system then detects another attack in the network 132.100.98.0/24, for which the IRS finds only one response action (Alternative 2-A). As there are no alternatives to this response action, the optimal choice can be determined easily. Unfortunately, together with Alternative 1-B, the capability of the Customer drops to 0.0, resulting in a total penalty cost of 100,000 for this variant.

If Alternatives 1-A and 2-A had been chosen, the total penalty cost would have been only 2000. This underscores the importance of global optimization. Note that the reconfiguration will not change the security but will increase the availability of important services.