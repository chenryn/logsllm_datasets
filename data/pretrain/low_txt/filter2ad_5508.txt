# Title: SecTag: A Multi-Policy Supported Secure Web Tag Framework

## Authors:
Ruixuan Li, Meng Dong, Bin Liu, Jianfeng Lu, Xiaopu Ma, Kai Li  
Emails: {mengdong, bliu9, lujianfeng, xpma}@smail.hust.edu.cn  
Institution: School of Computer Science and Technology, Huazhong University of Science and Technology, Wuhan, Hubei 430074, China

## Abstract
Traditional web application development often faces the challenge of tight coupling between access control logic and business logic. This makes it difficult to configure and modify access control policies after deployment. In this demonstration, we present SecTag, a multi-policy supported secure web tag framework, designed to address this issue. We define a series of general-purpose secure attributes for fine-grained access control in the web presentation layer and design high-interactive secure tags that encapsulate security features to provide reusable components for web development. A running example is provided to demonstrate the effectiveness of the proposed framework.

## Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Access Controls; D.2.9 [Software Engineering]: Management—Software Configuration Management

## General Terms
Security, Management

## 1. Introduction
Web-based enterprise-level applications have seen significant growth over the past decade. While businesses and individuals enjoy rich data and information services through various web applications, the need for fine-grained access control to protect sensitive content and important resources within web pages has become increasingly urgent [1]. Traditional access control module development in web systems often lacks fine-grained and multi-policy support, and suffers from tight coupling between access control logic and business logic. It is challenging to reconfigure or modify access control policies after system deployment. Therefore, it is crucial to provide a development framework that supports multi-policy authorization, component reusability, multiple views, and high interaction.

In this demonstration, we introduce SecTag, a multi-policy supported secure web tag framework, designed to create secure and fine-grained web resource protection. The framework is built on a core secure tag library that implements a tag-based fine-grained access control model. SecTag provides easy configuration and multi-policy support for secure tag components, which can be managed through a visual interface in the web presentation layer. Our main contributions are:

1. **Reusable Framework**: A framework to help developers create secure, fine-grained, and multi-policy-supported web resource protection.
2. **General-Purpose Secure Attributes**: A set of attributes that meet the demands of fine-grained access control in the web presentation layer.
3. **High-Interactive Secure Tags**: A collection of tags that encapsulate security features, providing reusable components for web development.

The source code and program guide for SecTag can be downloaded from [here](http://code.google.com/p/sectag/).

## 2. Design of SecTag

### 2.1 Framework of SecTag
Our goal is to design and implement a lightweight, basic framework for SecTag that can easily integrate with the traditional Model-View-Controller (MVC) architecture. Using SecTag, fine-grained access control policies can be configured through a visual interface without modifying any code. Most general access control logics can be encapsulated as secure tags, reducing development and maintenance efforts. Figure 1 illustrates the architecture of the SecTag framework.

**Core Components:**
- **Business/Model Dispatcher (BMD)**: Implements the request/response scheduling logic of the web framework.
- **Secure View Proxy (SVP)**: Generates the final response by binding secure data according to user attributes, ensuring different result views based on security configurations.
- **Secure Tag Library (STL)**: Contains a set of secure tags for fine-grained access control.

**Workflow:**
1. An initial request reaches the Servlet container and passes through a standard filter chain.
2. The preprocessing filter initializes the secure context. If the user is not authenticated, a login page is returned.
3. After authentication, the preprocessing filter initializes the user's secure context based on the secure policy configuration.
4. BMD calls the Model/View Mapper (MVM) to determine if the Secure View Resolver (SVR) should be invoked.
5. SVP retrieves secure policy information from the Secure Policy Configuration Manager (SPCM), which reads from `sec-config.xml`.
6. SVR traverses the document tree and calls the Secure Tag Renderer (STR) for each secure tag.
7. STR determines the final presentation and renders the local secure view based on the user's authorization attributes and secure policies.
8. SVP filters out data that the user wants to shield before binding the data model.
9. The view, encapsulating secure data with all rendered secure tags, is returned to the client browser.

### 2.2 Design of Policy Configuration
SecTag uses XML to describe policy rules in `sec-config.xml`, where fine-grained permissions are configured. Based on actual secure applications, tag rendering can be divided into three states: normal, view-only, and unavailable. For example, the `submit` tag can be in one of these states (Figure 2).

**Categories of Tags:**
- **UI Display Tags**: Control visibility and availability, such as displaying buttons and editable text.
- **Data Access Control Tags**: Dynamically render data lists, filtering out inaccessible data for the user.

**Policy Configuration Structure:**
- **Default Settings**: Specify default authorization settings, including the access control model (e.g., RBAC, MAC, DAC) and display status (normal, view-only, unavailable).
- **Policies**: Each policy has a unique name and can set its own mode and access attributes. Policies contain specific rules, which describe access control information and specify the display status for data items.

An example of a policy configuration is shown in Figure 4, where SQL statements or class methods can be injected to load dynamic data for policy analysis.

### 2.3 Design of Secure Tags
We extend traditional web tags to support secure attributes by binding them to policies configured in `sec-config.xml`. We use the FreeMarker template engine to dynamically render tags, allowing different users to see different views based on their permissions. The architecture of the Secure Tag Subsystem (STS) is shown in Figure 5.

**Components of Secure Tags:**
1. **Secure Tag Definition (STD)**: Described in `sectag.tld`, includes tag names, supporting classes, and attribute descriptions. Attributes include traditional HTML attributes and an extended secure attribute, `policy`, which binds an access control policy.
2. **Secure Tag Component (STC)**: Analyzes tags based on `sectag.tld` definitions, initializes STC objects, and calls the Secure View Renderer (SVR) to make authorization decisions. STC binds to the Secure Tag Data Model (STDM) and selects the appropriate Secure Tag Template Engine (STTE) for rendering.
3. **Secure Tag Template Engine (STTE)**: Uses FreeMarker to create different result views based on access requests and permissions.
4. **Secure Tag Template (STT)**: Separates application and view, allowing different HTML views to be generated.
5. **Secure Tag Data Model (STDM)**: Describes tag data with access control. The original data list is filtered by the Secure Data Filter Subsystem (SDFS) before rendering, generating a secure data view.

## 3. Example of SecTag
Consider the `select` tag, which receives data. By binding the `policy` attribute of the `select` tag to policy `p` configured in `sec-config.xml` (Figure 4), and describing user identity as (username, role, level), we can demonstrate the rendering results. For example, with user profiles (Tom, SuperAdmin, L6), (Lucy, User, L4), and (John, Casualuser, L2), the rendering results are shown in Figure 6 (a), (b), and (c). Tom can select all data items, Lucy can only view them, and John can select some items normally, view others, and find the rest unavailable.

## 4. Conclusions
In this demonstration, we developed SecTag, a reusable secure development framework, to solve the problem of tight coupling between access control and business logic. It assists developers in achieving fine-grained and multi-policy authorization management for web resource protection.

## Acknowledgements
This work is supported by the National Natural Science Foundation of China under Grants 60873225, 60773191, and 70771043.

## References
[1] G. Hsieh, K. Foster, G. Emamali, G. Patrick, L. Marvel: Using XACML for Embedded and Fine-Grained Access Control Policy. International Conference on Availability, Reliability and Security, 462-468, 2009.
[2] E. Damiani, S. Paraboschi, S. Vimercati, P. Samarati: A Fine-Grained Access Control System for XML Documents. ACM Trans. on Information and System Security, 5(2): 169-202, 2002.