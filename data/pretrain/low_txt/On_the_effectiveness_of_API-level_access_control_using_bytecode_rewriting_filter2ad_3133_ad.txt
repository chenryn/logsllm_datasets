### Other Research on Modifying the Android OS

Several studies have modified the Android operating system to monitor data flow, detect data leakage, and identify permission exploits [15, 18, 20, 28]. TISSA, for example, modified the Android OS to provide fine-grained protection of personal information [28]. TaintDroid performs taint analysis on applications to check for privacy leaks [15]. Hornyack et al. modified the Android OS to replace private data with dummy data when it is offered to applications [18]. Their approach also blocks network transmissions if they contain data that should not be sent. The main drawbacks of modifying the OS include a lack of flexibility and the need to update the phones.

### Bytecode Rewriting for Other Purposes

Some works use bytecode rewriting to instrument Android applications, although not specifically for enforcing API-level access control. For instance, Adsplit used bytecode rewriting to remove advertisement components and redirect them to another advertisement service [25]. Another study [23] used bytecode rewriting to bind applications to a fake Market app instead of the genuine one, enabling attacks on Google In-App Billing.

### Conclusion and Future Work

API-level access control using bytecode rewriting is a common technique in existing work to provide fine-grained access control in Android. To fully understand the security of this technique, we conducted a systematic study on its effectiveness. We identified several new attacks, all of which are fixable. Our work highlights the need for more static analysis and dynamic checking to achieve effective API-level access control using bytecode rewriting.

### Example Attack: Geolocation App

Note that `android.os.ServiceManager` is hidden in the Android framework, meaning the compiler would throw an error if an application tries to invoke any of its methods. However, at runtime, `android.os.ServiceManager` is already loaded by the Dalvik Virtual Machine (DVM) when the application starts. A malicious application can cheat the compiler by writing a dummy `android.os.ServiceManager` to overcome compile-time errors.

The method `my.location.LocMgr.getLastKnownLocation` has a different signature compared to `android.location.LocationManager.getLastKnownLocation`. This allows a malicious application to bypass the access control checks of current bytecode rewriters. Figure 10 demonstrates how the last known location can be successfully retrieved by the application, even though the location is in New York City.

### Recommendations

This problem is not difficult to fix. The easiest solution is to apply API-level access control to `android.os.ServiceManager`'s `getService` API, so that application Java code cannot use this API to get system services. It is rare for generic applications to need to create custom clients for system services, as rich Android APIs are already provided for such communications. If blocking this API is not desirable, we can apply bytecode rewriting to `android.os.Binder`.

### Related Work

#### Fine-Grained Access Control Using Bytecode Rewriting

Several researchers have proposed implementing fine-grained access control using bytecode rewriting on the Android platform [11, 14, 19, 22]. I-ARM embeds In-App Reference Monitors into Android applications [14], interposing security policies on all security-sensitive API calls via bytecode instrumentation. Other works [11, 19, 22] place Reference Monitors in other Android services and substitute calls to API methods with calls to other services. These works remove all assigned permissions from the applications and reassign them with fine-grained permissions, delegating the execution of all security-sensitive APIs to the services. In-vivo uses a different approach, using services to check whether an application can invoke sensitive API calls; if approved, the API executions still take place inside the application [11]. Some researchers have proposed similar work for fine-grained access control using bytecode rewriting for the Java platform [12, 16, 24].

### References

[1] Android Developer. http://www.developer.android.com/about/versions/android-4.0.3.html.
[2] Android Reverse Engineering Honeynet Project. http://www.honeynet.org/node/783.
[3] Binder. http://www.developer.android.com/reference/andrdoid/os/Binder.html.
[4] Bytecode for the Dalvik VM. http://www.source.android.com/tech/dalvik-bytecode.html.
[5] CommonsWare Camera Application. http://github.com/commonsguy/cw-omnibus.
[6] JNI Tips. http://www.developers.android.com/guide/practices/jni.html.
[7] Naming a Package. http://www.docs.oracle.com/javase/tutorial/package/namingpkgs.html.
[8] smali: An Assembler/Disassembler for Android’s DEX Format. http://www.code.google.com/p/smali.
[9] SWI Handlers. http://www.infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0040d/Cacdfeci.html.
[10] Android Binder: Android Interprocess Communication. 2011.
[11] A. Bartel, J. Klein, K. Allix, Y. Traon, and M. Monperrus. Improving Privacy on Android Smartphones through In-Vivo Bytecode Instrumentation. CoRR, abs/1208.4536, 2012.
[12] A. Chander, J. C. Mitchell, and I. Shin. Mobile Code Security by Java Bytecode Instrumentation. Pages 1027–1040, 2001.
[13] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing Inter-Application Communication in Android. In Proceedings of the 9th International Conference on Mobile System, Application, and Services, 2011.
[14] B. Davis, B. Sanders, A. Khodaverdian, and H. Chen. I-ARM-Droid: A Rewriting Framework for In-App Reference Monitors for Android Applications. In IEEE Mobile Security Technologies, 2012.
[15] W. Enck, P. Gilbert, B. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: An Information-Flow Tracking System for Real-Time Privacy Monitoring on Smartphones. In Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation, pp. 1-6, 2010.
[16] U. Erlingsson. The Inlined Reference Monitor Approach to Security Policy Enforcement. 2004.
[17] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android Permissions Demystified. In Proceedings of the 18th ACM Conference on Computer and Communication Security, 2011.
[18] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. "These Aren’t the Droids You’re Looking For": Retrofitting Android to Protect Data from Imperious Applications. In Proceedings of the 18th ACM Conference on Computer and Communication Security, 2011.
[19] J. Jeon, K. K. Micinski, and J. A. Vaughan. Dr. Android and Mr. Hide: Fine-Grained Security Policies on Unmodified Android. Technical Report, Department of Computer Science, University of Maryland, 2011.
[20] M. Nauman, S. Khan, and X. Zhang. Apex: Extending Android Permission Model and Enforcement with User-Defined Runtime Constraints. In Proceedings of the 5th ACM Symposium on Information, Computer, and Communications Security, 2010.
[21] D. Poo, D. Kiong, and S. Ashok. Object-Oriented Programming and Java, 2nd Edition. 2007.
[22] N. Reddy, J. Jeon, J. Vaughan, T. Millstein, and J. Foster. Application-Centric Security Policies on Unmodified Android. UCLA Computer Science Department, Technical Report, 2011.
[23] D. Reynaud, E. C. R. Shin, T. R. Magrino, E. X. Wu, and D. Song. FreeMarket: Shopping for Free in Android Applications. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security, 2012.
[24] A. Rudys and D. S. Wallach. Enforcing Java Run-Time Properties Using Bytecode Rewriting. 2002.
[25] S. Shekhar, M. Dietz, and D. S. Wallach. AdSplit: Separating Smartphone Advertising from Applications. CoRR, abs/102.4030, 2012.
[26] R. Xu, H. Saidi, and R. Anderson. Aurasium: Practical Policy Enforcement for Android Applications. In Proceedings of the 21st USENIX Security Symposium, 2012.
[27] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, You, Get Off of My Market: Detection of Malicious Apps in Official and Alternative Android Markets. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security, 2012.
[28] Y. Zhou, X. Zhang, X. Jiang, and V. Freeh. Taming Information-Stealing Smartphone Applications (on Android). Trust and Trustworthy Computing, pp. 93-107, 2011.

### Appendix

#### A. Libraries Not Preloaded

The following are shared native libraries provided by the Android platform, stored under the directory `/system/lib`. The default class loader is not aware of their existence, and applications can reload them during runtime. If bytecode rewriting places any access control on Java native APIs to restrict applications' access to these native library functions, the access control can be bypassed using our attacks.

- `libETC1.so`
- `libFFTEm.so`
- `libOpenglSystemCommon.so`
- `libGLESv1_enc.so`
- `libSR_AudioIn.so`
- `libGLESv2_dbg.so`
- `libEGL.so`
- `libGLESv1_CM.so`
- `libGLESv2.so`
- `libOpenSLES.so`
- `libRS.so`
- `libWnnEngDic.so`
- `libWnnJpnDic.so`
- `lib_renderControl_enc.so`
- `libandroid_runtime.so`
- `libaudioeffect_jni.so`
- `libbcc.so`
- `libbcinfo.so`
- `libbcc.so.sha1`
- `libbinder.so`
- `libandroid.so`
- `libandroid_servers.so`
- `libaudioflinger.so`
- `libc_malloc_debug_leak.so`
- `libcamera_client.so`
- `libclcore.bc`
- `libctest.so`
- `libdefcontainer_jni.so`
- `libgui.so`
- `libhardware_legacy.so`
- `libhwui.so`
- `libicuuc.so`
- `libjnigraphics.so`
- `libnfc_ndef.so`
- `libpixelflinger.so`
- `libpowermanager.so`
- `libfilterfw.so`
- `libdvm.so`
- `libnativehelper.so`
- `libemoji.so`
- `libexpat.so`
- `libjni_latinime.so`
- `liblog.so`
- `libmedia.so`
- `libdl.so`
- `libdrm1_jni.so`
- `libc.so`
- `libc_malloc_debug_qemu.so`
- `libcameraservice.so`
- `libcrypto.so`
- `libcutils.so`
- `libdiskconfig.so`
- `libdrm1.so`
- `libdrmframework.so`
- `libeffects.so`
- `libexif.so`
- `libext4_utils.so`
- `libfilterpack_imageproc.so`
- `libgabi++.so`
- `libhardware.so`
- `libharfbuzz.so`
- `libicui18n.so`
- `libinput.so`
- `libjni_mosaic.so`
- `libjpeg.so`
- `libm.so`
- `libmediaplayerservice.so`
- `libmtp.so`
- `libnetutils.so`
- `libpagemap.so`
- `libpower.so`
- `libreference-ril.so`
- `libsensorservice.so`
- `libsonivox.so`
- `libsqlite.so`
- `libsrec_jni.so`
- `libstagefright.so`
- `libstagefright_amrnb_common.so`
- `libstagefright_foundation.so`
- `libstagefright_omx.so`
- `libstagefright_soft_aacdec.so`
- `libstagefright_soft_amrdec.so`
- `libstagefright_soft_g711dec.so`
- `libstagefright_yuv.so`
- `libstdc++.so`
- `libsurfaceflinger.so`
- `libsurfaceflinger_client.so`
- `libsystem_server.so`
- `libsysutils.so`
- `libttscompat.so`
- `libttspico.so`
- `libui.so`
- `libutils.so`
- `libvorbisidec.so`
- `libwebrtc_audio_preprocessing.so`
- `libwilhelm.so`
- `libwpa_client.so`
- `libril.so`
- `libskia.so`
- `libwnndict.so`
- `libz.so`
- `libthread_db.so`
- `libstlport.so`
- `libusbhost.so`
- `libvariablespeed.so`
- `libspeexresampler.so`
- `libsqlite_jni.so`
- `libssl.so`

#### B. Classes Linked to android_runtime

The following are Android framework Java classes that link to the native library functions in the `android_runtime` library. If an API-level access control is placed upon these classes to restrict applications' access to their linked native library functions, our attacks can bypass this access control by directly invoking those native library functions.

- `/android/debug/JNITest`
- `/com/android/internal/os/RuntimeInit`
- `/android/os/SystemClock`
- `/android/util/EventLog`
- `/android/util/Log`
- `/android/util/FloatMath`
- `/android/text/format/Time`
- `/android/pim/EventRecurrence`
- `/android/content/AssetManager`
- `/android/security/Md5MessageDigest`
- `/android/text/AndroidCharacter`
- `/android/text/AndroidBidi`
- `/android/text/KeyCharacterMap`
- `/android/os/Process`
- `/android/os/Binder`
- `/android/view/Display`
- `/android/nio/utils`
- `/android/graphics/PixelFormat`
- `/android/graphics/Graphics`
- `/android/view/Surface`
- `/android/view/ViewRoot`
- `/com/google/android/gles/jni/EGLImpl`
- `/com/google/android/gles/jni/GLImpl`
- `/android/opengl/jni/GLES10`
- `/android/opengl/jni/GLES20`
- `/android/graphics/Bitmap`
- `/android/graphics/BitmapFactory`
- `/android/graphics/BitmapRegionDecoder`
- `/android/graphics/Camera`
- `/android/graphics/Canvas`
- `/android/graphics/ColorFilter`
- `/android/graphics/DrawFilter`
- `/android/graphics/Interpolator`
- `/android/graphics/LayerRasterizer`
- `/android/graphics/MaskFilter`
- `/android/graphics/Matrix`
- `/android/graphics/Movie`
- `/android/graphics/NinePatch`
- `/android/graphics/Paint`
- `/android/graphics/PorterDuff`
- `/android/graphics/Rasterizer`
- `/android/graphics/Region`
- `/android/graphics/Shader`
- `/android/graphics/Typeface`
- `/android/graphics/Xfermode`
- `/android/graphics/YuvImage`
- `/com/android/internal/graphics/NativeUtils`
- `/android/database/CursorWindow`
- `/android/database/SQLiteCompiledSql`
- `/android/database/SQLiteDatabase`
- `/android/database/SQLiteDebug`
- `/android/database/SQLiteProgram`
- `/android/database/SQLiteQuery`
- `/android/database/SQLiteStatement`
- `/android/os/Debug`
- `/android/os/FileObserver`
- `/android/os/FileUtils`
- `/android/os/MessageQueue`
- `/android/os/ParcelFileDescriptor`
- `/android/os/Power`
- `/android/os/StatFs`
- `/android/os/SystemProperties`
- `/android/os/UEventObserver`
- `/android/net/LocalSocketImpl`
- `/android/net/NetworkUtils`
- `/android/net/TrafficStats`
- `/android/net/wifi/WifiManager`
- `/android/nfc/NdefMessage`
- `/android/nfc/NdefRecord`
- `/android/os/MemoryFile`
- `/com/android/internal/os/ZygoteInit`
- `/android/hardware/Camera`
- `/android/hardware/SensorManager`
- `/android/media/AudioRecord`
- `/android/media/AudioSystem`
- `/android/media/AudioTrack`
- `/android/media/ToneGenerator`
- `/android/opengl/classes`
- `/android/bluetooth/HeadsetBase`
- `/android/bluetooth/BluetoothAudioGateway`
- `/android/bluetooth/BluetoothSocket`
- `/android/bluetooth/ScoSocket`
- `/android/server/BluetoothService`
- `/android/server/BluetoothEventLoop`
- `/android/server/BluetoothA2dpService`
- `/android/server/Watchdog`
- `/android/message/digest/sha1`
- `/android/ddm/DdmHandleNativeHeap`
- `/android/backup/BackupDataOutput`
- `/android/backup/FileBackupHelperBase`
- `/android/backup/BackupHelperDispatcher`
- `/android/content/res/ObbScanner`
- `/android/content/res/Configuration`