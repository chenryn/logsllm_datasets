### Secure Function Definition Language (SDFL) and FairPlay Systems

Secure Function Definition Language (SDFL) is a domain-specific language designed for secure computation. A compiler translates SDFL programs into one-pass Boolean circuits, which can be securely evaluated using the protocol suggested by [31]. Initially, as described in [23], the FairPlay system supported only secure two-party computations written in SDFL 1. This system served as the foundation for the development of the FairPlayMP system [6], which extends support to multi-party computations written in SFDL 2. Some circuit optimization techniques for FairPlay are presented in [28].

### Other Compilers and Frameworks

There are other compilers, such as those in [12, 32], that produce safe code for a program according to an information flow policy in a distributed environment. However, these do not allow for specifying any secure computation and offer no secure implementation for the resulting information flow.

FairPlay and FairPlayMP are examples of systems that describe the ideal functionality of a secure computation, i.e., what needs to be implemented by the protocol. The responsibility of finding the ideal protocol lies with the compiler. To the best of our knowledge, we present the first technique that automatically optimizes such programs.

### Protocol Description Specification

Next to FairPlay and its specification of the ideal functionality, there are several secure computation implementations where the programmer can provide hints to the compiler on how to optimize. In the Secure Multiparty Computation Language (SMCL) [25], the programmer specifies the ideal functionality but may also specify the visibility of variables as secret, private, or public. This is similar to our (party-specific) labels, but we infer the labels automatically via program analysis, thus not burdening the programmer. The TASTY compiler and its TASTYL language [17] allow implementing mixed-protocol solutions using Yao’s protocol and (additively) homomorphic encryption. The programmer can specify which protocol to use for each operation, leading to more efficient and provably secure protocols. The VIFF framework [10] extends the Python language using a library, offering primitives for secure computation, but the protocol description is up to the programmer. The Sharemind framework [8] provides an interpreter for an assembler-like language, requiring the programmer to specify the protocol description using provided primitives. The L1 system [30] allows specifying protocol descriptions with many primitives, including Yao’s protocol and homomorphic encryption, and offers a library for network communication.

All these languages, compilers, or frameworks allow the programmer to at least partially specify how the protocol is implemented, leading to more efficient protocols but placing an additional burden on the programmer. In this paper, we take a different approach. We use program analysis to infer the optimal protocol from the ideal functionality, though our techniques can also be combined with programmer-specified optimizations. To the best of our knowledge, we present the first fully automatic technique for this purpose.

### Examples

We use several optimized protocols as examples. Our running example, the median computation by Aggarwal et al. [1], was one of the first instances of a (hand-)optimized secure computation protocol. Our optimization technique was able to slightly exceed the manual optimization. Oblivious transfer (OT) is a well-known primitive in cryptography. 1-out-of-2 OT was introduced by Even et al. [11]. Our optimization did not improve the programming language specification for OT, which is good because it shows our optimization is safe. Kilian has shown that cryptography can be founded on OT [19]. This indicates that our optimization technique cannot optimize the cryptographic implementation, which is not surprising since it only considers the ideal functionality. There are several (cryptographically) optimized protocols for OT, e.g., [13, 22, 24].

Our last example is joint lot size computation as a weighted average, introduced in [27]. It demonstrates the wide range of applications for secure computation. Our optimization technique matched the manual optimization when the program was appropriately structured.

### Conclusions

We have presented the first technique to automatically optimize a secure computation program. Our program analysis infers what a party knows from input and output, using this information to perform several computations locally instead of as a secure protocol. Using the median computation example, we showed that our optimization technique can match and even exceed manual optimizations. Our implementation compiled and executed an SFDL program as per Aggarwal et al.’s protocol.

As the performers of an automated analysis related to Aggarwal et al.’s protocol, we make a few comments. First, our analysis confirms the protocol's security, crafted carefully to be safe, and resulted in a slightly more revealing protocol than the manually designed one. Second, our analysis shows that the protocol is very slightly inefficient. We conclude, and it is easy to verify manually, that the last comparison can also be implemented as a Yao’s millionaire’s protocol. Aggarwal et al. recommend using a minimum computation that outputs the minimum element, which is slightly less efficient but avoids sending the output by one party. Our compiled protocol is therefore slightly more efficient.

### Future Work

For future work, we see two open problems. First, our analysis works on protocols secure in the semi-honest model, and we would like to extend this to the malicious model. One can adapt the compiler from the semi-honest to the malicious model by Goldreich [14], but this could be too inefficient. Second, our prototypical implementation uses the ModLeanTab theorem prover [5]. We can compile the median example in about one minute, but most of the time is spent proving theorems. A more efficient algorithm that scales to large programs and possibly avoids theorem proving is desirable.

### Acknowledgements

We are grateful to Axel Schröpfer for implementing the L1 examples and performing the experiments, and to Achim Brucker and Marcel Jünemann for implementing SSA and the transformation.

### References

[1] G. Aggarwal, N. Mishra, and B. Pinkas. Secure computation of the k-th ranked element. In EUROCRYPT’04: Advances in Cryptology, 2004.
[2] R. Agrawal and R. Srikant. Privacy-preserving data mining. ACM SIGMOD Record, 29(2), 2000.
[3] A. Banerjee. A joint economic-lot-size model for buyer and supplier. Decision Sciences, 17, 1986.
[4] D. Beaver, S. Micali, and P. Rogaway. The round complexity of secure protocols. In STOC’90: Proceedings of the 22nd ACM Symposium on Theory of Computing, 1990.
[5] B. Beckert and R. Gore. In CADE’98: Proceedings of the International Conference on Automated Deduction, 1998.
[6] A. Ben-David, N. Nisan, and B. Pinkas. FairplayMP: a system for secure multi-party computation. In CCS’08: Proceedings of the 15th ACM Conference on Computer and Communications Security, 2008.
[7] M. Ben-Or, S. Goldwasser, and A. Wigderson. Completeness theorems for non-cryptographic fault-tolerant distributed computation. In STOC’88: Proceedings of the 20th ACM Symposium on Theory of Computing, 1988.
[8] D. Bogdanov, S. Laur, and J. Willemson. Sharemind: a framework for fast privacy-preserving computations. In ESORICS’08: Proceedings of the 13th European Symposium on Research in Computer Security, 2008.
[9] R. Cytron, J. Ferrante, B. K. Rosen, M. N. Wegman, and F. K. Zadeck. Efficiently computing static single assignment form and the control dependence graph. ACM Transactions Programming Languages and Systems, 13(4), 1991.
[10] I. Damgård, M. Geisler, M. Krøigaard, and J. B. Nielsen. Asynchronous multiparty computation: theory and implementation. In PKC’09: Proceedings of the 12th International Conference on Practice and Theory in Public Key Cryptography, 2009.
[11] S. Even, O. Goldreich, and A. Lempel. A randomized protocol for signing contracts. Communications of the ACM, 28(8), 1985.
[12] C. Fournet, G. L. Guernic, and T. Rezk. A security-preserving compiler for distributed programs: from information-flow policies to cryptographic mechanisms. In CCS’09: Proceedings of the 16th ACM Conference on Computer and Communications Security, 2009.
[13] C. Gentry and Z. Ramzan. Single-database private information retrieval with constant communication rate. In ICALP’05: Proceedings of the 32nd International Colloquium on Automata, Languages and Programming, 2005.
[20] S. Kripke. A semantic analysis of modal logic I: normal modal propositional calculi. Zeitschrift für Mathematische Logik und Grundlagen der Mathematik, 9, 1963.
[21] Y. Lindell and B. Pinkas. Privacy-preserving data mining. In CRYPTO’00: Advances in Cryptology, 2000.
[22] H. Lipmaa. An oblivious transfer protocol with log-squared communication. In ISC’05: Proceedings of the 8th International Conference on Information Security, 2005.
[23] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay—a secure two-party computation system. In Proceedings of the 13th USENIX Security Symposium, 2004.
[24] M. Naor and B. Pinkas. Efficient oblivious transfer protocols. In SODA’01: Proceedings of the 12th ACM-SIAM Symposium on Discrete Algorithms, 2001.
[25] J. D. Nielsen and M. I. Schwartzbach. A domain-specific programming language for secure multiparty computation. In PLAS’07: Proceedings of the ACM Workshop on Programming Languages and Analysis for Security, 2007.
[26] A. Paus, A.-R. Sadeghi, and T. Schneider. Practical secure evaluation of semi-private functions. In ACNS’09: Proceedings of the 7th International Conference on Applied Cryptography and Network Security, 2009.
[27] R. Pibernik, Y. Zhang, F. Kerschbaum, and A. Schröpfer. Secure collaborative supply chain planning and inverse optimization - the JELS model. European Journal of Operational Research, 208(1), 2011.
[14] O. Goldreich. Foundations of Cryptography, volume 2. Cambridge University Press, 2004.
[28] B. Pinkas, T. Schneider, N. P. Smart, and S. C. Williams. Secure two-party computation is practical. In ASIACRYPT’09: Advances in Cryptology, 2009.
[15] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game. In STOC’87: Proceedings of the 19th ACM Symposium on Theory of Computing, 1987.
[16] J. Y. Halpern. Reasoning about knowledge: a survey. In D. M. Gabbay, C. J. Hogger, and J. A. Robinson, editors, Handbook of Logic in Artificial Intelligence and Logic Programming, volume 4. Oxford University Press, 1995.
[17] W. Henecka, S. Kögl, A.-R. Sadeghi, T. Schneider, and I. Wehrenberg. TASTY: tool for automating secure two-party computations. In CCS’10: Proceedings of the 17th ACM Conference on Computer and Communications Security, 2010.
[18] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster secure two-party computation using garbled circuits. In Proceedings of the 20th USENIX Security Symposium, 2011.
[19] J. Kilian. Founding cryptography on oblivious transfer. In STOC’88: Proceedings of the 20th ACM Symposium on Theory of Computing, 1988.
[30] A. Schröpfer, F. Kerschbaum, and G. Müller. L1 – an intermediate language for mixed-protocol secure computation. In COMPSAC’11: Proceedings of the 35th IEEE Computer Software and Applications Conference, 2011.
[31] A. C.-C. Yao. How to generate and exchange secrets. In FOCS’86: Proceedings of the 27th IEEE Symposium on Foundations of Computer Science, 1986.
[32] S. Zdancewic, L. Zheng, N. Nystrom, and A. C. Myers. Untrusted hosts and confidentiality: secure program partitioning. In SOSP’01: Proceedings of the 18th ACM Symposium on Operating System Principles, 2001.

### Appendix

#### Median Example

**Assumptions:**
- Trace of world W1:
- Inference in world W1:
- Trace of world W2:
- Inference in world W2:
- Trace of world W3:
- Inference in world W3:
- Trace of world W4:
- Inference in world W4:

**Kin.alice.x, Kin.alice.y, Kout.alice, Klt in.alice.x in.alice.y, Klt in.bob.x in.bob.y**

- **W1 (cid:15) a = true**
- **W1 (cid:15) b = A2**
- **W1 (cid:15) c = B**
- **W1 (cid:15) d = true**
- **W1 (cid:15) out.alice = A2**
- **d = true**
- **out.alice**
- **b**
- **b = A2 K(b = A2 ⇒ a = true)**
- **W1 (cid:15) a**

- **W2 (cid:15) a = false**
- **W2 (cid:15) b = A1**
- **W2 (cid:15) c = B**
- **W2 (cid:15) d = true**
- **W2 (cid:15) out.alice = A1**
- **d = true**
- **out.alice**
- **b**
- **b = A1 K(b = A1 ⇒ a = false)**
- **W2 (cid:15) a**

- **W3 (cid:15) a = true**
- **W3 (cid:15) b = A2**
- **W3 (cid:15) c = B**
- **W3 (cid:15) d = false**
- **W3 (cid:15) out.alice = B**
- **d = false**
- **out.alice**
- **a = true**
- **c**
- **in.alice.x**
- **in.bob.x**
- **W3 (cid:15) a**

- **W4 (cid:15) a = false**
- **W4 (cid:15) b = A1**
- **W4 (cid:15) c = B**
- **W4 (cid:15) d = false**
- **W4 (cid:15) out.alice = B**
- **out.alice**
- **out.alice = B K(out.alice = B ⇒ d = false)**
- **d**
- **d = false**
- **a = false**
- **lt c b**
- **lt in.bob.x in.bob.y**
- **lt in.bob.y in.alice.x**
- **a = false**
- **lt c in.alice.x**
- **lt in.bob.x in.alice.x**
- **W4 (cid:15) a**

**Global inference:**
- **W1 (cid:15) a, W2 (cid:15) a, W3 (cid:15) a, W4 (cid:15) a**
- **Ka**