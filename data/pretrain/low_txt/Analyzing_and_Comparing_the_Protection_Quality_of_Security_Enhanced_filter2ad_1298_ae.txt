### Server Edition and SELinux Reference Policy

The Server Edition utilizes a version of the SELinux reference policy. Furthermore, the most recent version of the SELinux reference policy is more stringent compared to the policy included with Ubuntu 8.04.

### Attack Graphs for Fedora 8 with SELinux

**Figure 17** illustrates the host attack graph for a remote attacker attempting to install a rootkit in Fedora 8 with SELinux. The vulnerability surface cannot be directly compared with that of Ubuntu 8.04 (as shown in **Figure 12**) due to the presence of unique attack paths in each distribution.

Assuming all programs are equal, the vulnerability surface of Fedora 8/SELinux is smaller. This is because there is only one length-1 minimal attack path and 13 length-2 minimal attack paths in Fedora 8/SELinux, whereas Ubuntu 8.04/SELinux has 6 length-1 minimal attack paths and 97 length-2 minimal attack paths.

### SUSE Linux Enterprise Server 10 (SLES 10) with AppArmor

We have analyzed the vulnerability surface of SUSE Linux Enterprise Server 10 (SLES 10) with AppArmor protection. To maintain consistency with the services in Ubuntu 8.04, some default services in SLES 10, such as `slpd` and `zmd`, were disabled.

**Figure 19** shows the host attack graph for a remote attacker aiming to install a rootkit in SLES 10 with AppArmor. The vulnerability surfaces of SLES 10/AppArmor and Ubuntu 8.04/AppArmor are not directly comparable due to their different exposed vulnerabilities.

### Common and Unique Attack Paths

Common attack paths include `sshd` and `rpc.mountd` (NFS mount daemon). Unique paths in Ubuntu 8.04 involve `apache2`, `mysqld`, and `named` because these programs are not confined. In SLES 10, the unique path involves `cupsd` since it is not confined. Additionally, `sshd` contributes to unique paths in SLES 10 due to the presence of more installed shells.

For a remote attacker to plant a strong Trojan horse, the host attack graph for SLES 10 is identical to the graph for installing a rootkit. For a local attacker to install a rootkit, the host attack graph for SLES 10 is shown in **Figure 20**. There are 10 common attack paths due to unconstrained setuid root programs, 9 unique attack paths for Ubuntu 8.04, and 20 unique attack paths for SLES 10.

### Importance of Considering DAC Policy

Our approach considers both MAC and DAC policies. If only the MAC policy (e.g., SELinux policy) is considered, the results may be inaccurate. **Figure 21** shows the host attack graph for a remote attacker installing a rootkit, considering only the SELinux policy. Compared to the graph that includes both DAC and MAC policies (**Figure 12**), we observe additional length-1 attack paths: `/sbin/portmap`, `/sbin/rpc.statd`, `/usr/sbin/mysqld`, `/usr/sbin/named`, and `/sbin/dhclient`. These are not accurate, as compromising `mysqld` (running with uid 110 and unconfined_t) does not allow loading a kernel module without further exploitation.

### Performance Evaluation

In our experiments, the targeted operating systems (Ubuntu, Fedora, and SUSE Linux) were installed in virtual machines using VMware. The host attack graph generation and analysis were performed on a laptop with an Intel(R) Pentium(R) M processor 1.80GHz and 1GB of memory, using the swi-prolog 5.6.14 engine.

The fact collector's running time was less than 10 minutes for every test case, and the host attack graph generation and analysis took less than 10 minutes for each test case.

### Conclusions

This paper proposes an approach to analyze and compare the protection quality offered by different Mandatory Access Control (MAC) mechanisms in security-enhanced operating systems. Our analysis is based on security policy, system state, and configuration. We developed a tool to generate the host attack graph for given attack scenarios and proposed using the vulnerability surface to measure system protection quality. We evaluated our approach by analyzing and comparing SELinux and AppArmor in several Linux distributions.

### Acknowledgements

This work is supported by NSF CNS-0448204 (CAREER: Access Control Policy Verification Through Security Analysis And Insider Threat Assessment) and CERIAS sponsors. We also thank the anonymous reviewers for NDSS and Crispin Cowan for valuable comments that significantly improved the paper.

### References

1. Apparmor application security for Linux. <http://www.novell.com/linux/security/apparmor/>
2. Apparmor development. <http://developer.novell.com/wiki/index.php/Apparmor>
3. SELinux for distributions. <http://selinux.sourceforge.net>
4. D. E. Bell and L. J. LaPadula. Secure computer systems: Unified exposition and Multics interpretation. Technical Report ESD-TR-75-306, Mitre Corporation, Mar. 1976.
5. C. Cowan, S. Beattie, G. Kroah-Hartman, C. Pu, P. Wagle, and V. D. Gligor. Subdomain: Harmonious server security. In Proceedings of the 14th Conference on Systems Administration (LISA 2000), pages 355–368, Dec. 2000.
6. T. Fraser. LOMAC: Low water-mark integrity protection for COTS environments. In Proc. IEEE Symposium on Security and Privacy, May 2000.
7. T. Fraser. LOMAC: MAC you can live with. In Proceedings of the FREENIX Track: USENIX Annual Technical Conference, June 2001.
8. J. D. Guttman, A. L. Herzog, J. D. Ramsdell, and C. W. Skorupka. Verifying information flow goals in security-enhanced Linux. Journal of Computer Security, 13(1):115–134, 2005.
9. B. Hicks, S. Rueda, L. S. Clair, T. Jaeger, and P. D. McDaniel. A logical specification and analysis for SELinux MLS policy. In SACMAT, pages 91–100, 2007.
10. S. Hinrichs and P. Naldurg. Attack-based domain transition analysis. In Annual Security Enhanced Linux Symposium, 2006.
11. M. Howard. Mitigate security risks by minimizing the code you expose to untrusted users. MSDN Magazine, November 2004.
12. M. Howard, J. Pincus, and J. M. Wing. Measuring relative attack surfaces. In Proceedings of Workshop on Advanced Developments in Software and Systems Security, December 2003.
13. T. Jaeger, R. Sailer, and X. Zhang. Analyzing integrity protection in the SELinux example policy. In Proceedings of the 12th USENIX Security Symposium, pages 59–74, August 2003.
14. T. Jaeger, X. Zhang, and F. Cacheda. Policy management using access control spaces. ACM Trans. Inf. Syst. Secur., 6(3):327–364, 2003.
15. A. Leitner. Novell and Red Hat security experts face off on AppArmor and SELinux counterpoint. Linux Magazine, (69), 2006.
16. N. Li, Z. Mao, and H. Chen. Usable mandatory integrity protection for operating systems. In Proc. IEEE Symposium on Security and Privacy, May 2007.
17. P. K. Manadhata, K. M. C. Tan, R. A. Maxion, and J. M. Wing. An approach to measuring a system’s attack surface. Technical Report CMU-CS-07-146, CMU, August 2007.
18. P. Naldurg, S. Schwoon, S. K. Rajamani, and J. Lambert. NETRA: Seeing through access control. In FMSE, pages 55–66, 2006.
19. NSA. Security enhanced Linux. <http://www.nsa.gov/selinux/>
20. X. Ou, W. F. Boyer, and M. A. McQueen. A scalable approach to attack graph generation. In Proceedings of the 13th ACM conference on Computer and communications security, pages 336–345, New York, NY, USA, 2006. ACM.
21. B. Sarna-Starosta and S. D. Stoller. Policy analysis for security-enhanced Linux. In Proceedings of the 2004 Workshop on Issues in the Theory of Security (WITS), pages 1–12, April 2004.
22. O. Sheyner, J. Haines, S. Jha, R. Lippmann, and J. M. Wing. Automated generation and analysis of attack graphs. In Proceedings of the 2002 IEEE Symposium on Security and Privacy, page 273, Washington, DC, USA, 2002. IEEE Computer Society.
23. S. Smalley, C. Vance, and W. Salamon. Implementing SELinux as a Linux security module. Technical Report 01-043, NAI Labs, December 2001.
24. Tresys technology, tools for SELinux. Available at <http://oss.tresys.com/projects/setools>.
25. G. Zanin and L. V. Mancini. Towards a formal model for security policies specification and validation in the SELinux system. In Proc. ACM Symposium on Access Control Models and Technologies (SACMAT), pages 136–145, 2004.