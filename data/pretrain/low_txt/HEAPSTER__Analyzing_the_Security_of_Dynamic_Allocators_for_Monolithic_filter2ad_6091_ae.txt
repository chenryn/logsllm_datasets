### K1
- **Total Samples**: 340
- **Objective**: Correctly identify `malloc` as a pointer source, similar to the ground-truth dataset.
- **Pointer Sources**:
  - `memcpy` identified in 237 blobs.
  - `memset` identified in 80 blobs.
  - `strlen` and `strncpy` each identified in 3 blobs.
- **HML Analysis**:
  - **Allocator Identification Step**:
    - **Memory Usage**: Average of 4.5GB, median of 2.2GB.
    - **Time Consumption**: Average of 2.4 hours, median of 1 hour.
  - **Timeouts**: Only 17 samples were terminated due to timeouts, but no memory limits were exhausted.

### Comparison with Ground-Truth Dataset
- **Firmware Images**:
  - Wild dataset images are larger on average.
  - HEAPSTER performed better (in terms of average and median numbers) on the wild dataset.
  - Detailed statistics are provided in Appendix D, Table V.
- **Constraints**:
  - The `malloc` parameter and the pointer to `free` have an average of 2.3 (median of 2) more constraints than the closest competitor.
- **Heap Global Variables**:
  - All firmware images use packed heap global variables.
- **Heap Growth Direction**:
  - In all but 5 samples, the heap grows towards higher addresses.

### HML Classification
- **Dataset Categorization**:
  - Classified using categories described by Wen et al. [59].
  - Results in Appendix B, Table III.
  - HMLs are used across various categories: Wearable (83 blobs), Sensors (24), and Medical Devices (22).

### Coarse-Grained Clustering
- **Clusters Identified**:
  - 10 different implementations labeled as clusters D to M.
  - Cluster D (115 blobs), E (93 blobs), F (51 blobs).
  - Cluster E is the same as A, and J is the same as B.
  - 8 new HML implementations in the wild dataset.
- **Visualization**:
  - Graph in Appendix F shows the identified coarse-grained clusters.

### Fine-Grained Clustering
- **Identified Variants**:
  - 32 HML variants.
  - Cluster E has the most variants (12), suggesting popularity among different tool-chains.
- **No Overlaps**:
  - No overlaps found between E-A and J-B variants.

### HML Security Evaluation
- **Testing**:
  - 32 HMLs tested, one per variant.
  - Randomly selected representative firmware for each variant.
- **PoC Testing**:
  - On average, 2k PoCs per HML with a 10-minute time constraint.
  - Each HML analyzed in less than 3 hours, total analysis time of 36 hours.
- **PoV Verification**:
  - PoVs checked with a 5-minute time limit.
  - False positives re-evaluated to find another PoV.
- **Results**:
  - All tested HMLs vulnerable to Overlapping Chunks and Restricted Write.
  - Heap inline metadata without safety measures makes heap overflow primitives very effective.
  - Summary in Table II.

### HML Identification: False Negatives
- **Similarity Match**:
  - Coarse-grained clustering detected 85 additional blobs.
  - 69 blobs matched known fine-grained clusters, 16 required further attention.
- **Imperfect Match**:
  - Manual investigation revealed that 16 blobs belonged to existing fine-grained clusters.
  - Increased the number of firmware images with HML to 338.
- **Package Name**:
  - Grouped firmware images by Android package names.
  - Identified 40 firmware images without HML, 17 were false negatives, 23 were true negatives.
- **Random Sampling**:
  - 50 randomly selected firmware images.
  - 46 true negatives, 2 out-of-scope allocators, 2 false negatives.
- **False Negatives Reasons**:
  - Failure to identify allocator functions (40 blobs).
  - Failure to detect working allocator-deallocator pairs (29 blobs).
  - Steps 6 and 7 did not terminate for 8 and 9 firmware images, respectively.

### Security Impact of Vulnerabilities in HML for Applications
- **Threat Model**:
  - Attacker controls input data via peripherals (e.g., Bluetooth, WiFi, serial interface, sensors).
  - Focus on paths connecting MMIO read functions to `malloc` or `free`.
- **Automated Vulnerable Candidate Selection**:
  - Static technique based on reaching definitions.
  - 54 blobs identified for further manual analysis.
- **Manual Investigation**:
  - Identified four firmware images with integer overflow bugs.
  - Confirmed vulnerabilities through a real device (STM32-NucleoF401RE board with X-NUCLEO-IDW01M1 Wi-Fi Module).

### Discussion and Limitations
- **Loading Firmware**:
  - Precision depends on CFG, function boundaries, and callgraph.
  - Challenges in building precise CFGs for firmware blobs.
- **Firmware Emulation**:
  - Uses an emulator to lift assembly into IR.
  - Quality depends on the precision and correctness of the emulator.
- **Basic Function Identification**:
  - Found at least one basic function in 762 monolithic firmware images.
  - Potential issues with inlined or missing basic functions.
- **Pointer Source Identification**:
  - Uses angrâ€™s reaching definitions (RD) framework.
  - RD has no support for dynamic memory locations.
- **Heap Initialization**:
  - Uninitialized heap global variables can be accessed during `malloc` and `free`.
  - Attempts to initialize uninitialized memory with zero.

### Related Work
- **HEAPSTER vs. Membrush**:
  - Both aim to detect custom allocators in binaries.
  - Membrush uses binary instrumentation and full program execution.
  - HEAPSTER focuses on monolithic firmware images, while Membrush targets desktop binaries.
- **Heap Management Library Security**:
  - Various approaches to analyze heap allocator security.
  - HEAPSTER leverages and modifies work done by Eckert et al. [24].
- **IoT Vulnerabilities**:
  - Numerous research works on IoT device and firmware security.
  - None focus on heap management libraries in monolithic firmware.
- **Re-hosting Solutions**:
  - Re-hosting and precise code execution of firmware code is still an open problem.
  - Proposed solutions include automatic re-hosting and hardware-in-the-loop systems.

### Conclusions
- **HEAPSTER**:
  - Automatically identifies and tests the security of HMLs in monolithic firmware images.
  - First attempt at analyzing the security of dynamic memory allocators in monolithic firmware.
  - Evaluated on 819 real-world monolithic firmware images.
  - Discovered 11 different heap implementation families and 48 variations.
  - All identified HMLs affected by multiple classes of heap vulnerabilities.
  - Highlights the need for guidelines and security-vetted libraries in embedded systems.

### Acknowledgements
- **Support**:
  - Funded by Office of Naval Research (ONR), DHS, and DARPA.
  - U.S. Government authorized to reproduce and distribute reprints.