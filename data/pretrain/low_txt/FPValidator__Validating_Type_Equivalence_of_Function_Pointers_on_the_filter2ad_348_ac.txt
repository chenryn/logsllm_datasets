### C. Security Analysis

FPValidator implements L3 function pointer validation, which ensures the equivalence between the point-to type and the target type of function pointers. By using FPValidator, all function entry attacks that violate this type equivalence can be detected. To bypass FPValidator, an adversary must find a vulnerability that allows them to tamper with a function pointer of the desired type. Consequently, the likelihood of a successful attack is significantly lower compared to L1 or L2 validation.

The effectiveness of FPValidator relies on the integrity of the validation code and type information, both of which are integrated into ELF files. As long as the code segment and type information remain uncompromised, the validation mechanism cannot be circumvented. Since these segments do not change after being loaded, the memory they reside in is marked as read-only during execution. This allows for easy verification of their integrity by lower-level software using cryptographic hash functions. For example, the OS kernel can verify the integrity of applications by calculating the hashes of the code segment and type information and comparing them with trusted values. Similarly, the OS kernel itself can be verified by a virtual machine monitor, and the lowest-level software can be verified by hardware solutions such as those proposed by the Trusted Computing Group (TCG) [20].

### D. The L4 Validation

If the compromised function pointer and the abused function are type equivalent, the attack will not be detected by L3 validation. In such cases, L4 validation is required. L4 validation necessitates a precise set of possible targets for each function pointer. Given these sets, L4 validation can be easily implemented in FPValidator by replacing the type information with the sets and checking whether the target address is included in the set, rather than performing type matching.

However, identifying these precise sets poses several challenges. If developers are responsible for providing all valid entry sets, it can be a tedious and error-prone task. Additionally, it is often impossible to list all entries at the development stage, as some functions may be implemented by third parties and loaded at runtime. Some solutions, such as Inlined CFI and WIT, attempt to determine precise sets via static analysis [21], [22], but their results are still constrained by the limitations of static analysis.

### V. RELATED WORK

Manipulating function pointers is a common attack method. Several solutions have been proposed to counter such attacks. We compare FPValidator with several closely related solutions.

- **Control-Flow Integrity (CFI)**: CFI is a safety property ensuring that a program's execution follows paths of its Control-Flow Graph (CFG) determined in advance. Abadi et al. proposed Inlined CFI [5], which instruments each indirect branch to validate its target according to a statically obtained CFG. However, such a CFG can be imprecise, leading to conservative implementations where a call instruction may invoke any function to avoid false positives.
  
- **WIT**: WIT enforces CFI through compilation-stage instrumentation. Function pointers and functions are labeled with colors based on static points-to analysis. A validation code fragment is inserted before indirect calls to check if the function pointer and target function have the same color. Due to the imprecision of points-to analysis, all functions might have the same color to avoid false positives [6].
  
- **State-Based CFI (SBCFI)**: Petroni et al. proposed SBCFI [4], a virtual machine-based method that periodically validates global function pointer variables of OS kernels. However, this method only addresses persistent attacks, and attacks completed within a period could evade detection.
  
- **Program Shepherding**: Program Shepherding [3] validates indirect branches by dynamic binary translation. The validation code is inserted by a dynamic translator, such as Dynamo, into a code block before execution. It checks the targets of indirect branches using a hash table containing all valid entries.
  
- **Non-Executable Memory (NE-Memory)**: Solutions like Exec Shield [24] and Openwall Linux patch [25] mark certain memory regions (e.g., stack and heap) as non-executable, typically requiring hardware support [26]. This prevents malicious code injected into these regions from being executed, even if an adversary has manipulated function pointers to target it. e-NeXSh uses a software approach to create an "effectively" non-executable stack and heap [27].

A comparison of these solutions with FPValidator is shown in Table II. Instrumentation-based validation is generally harder to bypass, while monitoring-based methods offer more flexibility. NE-Memory achieves similar goals to instrumentation-based validation but through a different approach. Inlined CFI, Shepherding, and NE-Memory operate at the binary level and handle all indirect branches, including those from switch statements. FPValidator and WIT validate all indirect calls whose targets may change dynamically. SBCFI only validates global variables, making it ineffective against attacks on local variables and function pointer expressions. The validation levels and detectable attacks for these solutions are listed in Table II.

Some solutions aim to protect function pointers from malicious modification. For instance, PointGuard [29] encrypts pointers before writing and decrypts them before reading. Libsafe [30] and LibsafePlus [31] provide safe versions of exploitable library functions, while Stack-smashing protector (SSP) [32] rearranges local variables. However, these solutions are not foolproof. For example, PointGuard can be circumvented in some cases, as shown in Figure 7, where an adversary can modify `parm` through buffer overflow, propagating the modification to `fp` at line 9.

To enhance security, combining protection and validation of function pointers can provide stronger defenses.

### VI. CONCLUSION

Function pointers are frequently attacked at runtime to execute malicious code. Therefore, validating their values on the fly is crucial. Existing solutions, however, often lack the strictness needed to detect function entry attacks. 

In this paper, we propose FPValidator, a new solution that dynamically validates the type equivalence of function pointers and target functions, capable of detecting all function entry attacks that manipulate function pointers to invoke incompatible functions. The validation code is inserted by a compilation-stage instrumentation mechanism, imposing no additional burden on developers. We integrated FPValidator into GCC, and our evaluation shows that it is both effective and efficient.

Currently, we use C as the example language, but FPValidator can also be applied to other statically-typed languages. C++, with its more complex type system, is a potential future application for FPValidator.

### REFERENCES

[1] J. Pincus and B. Baker, “Beyond Stack Smashing: Recent Advances in Exploiting Buffer Overruns,” IEEE Security & Privacy, vol. 2, no. 4, pp. 20 – 27, 2004.

[2] M. Castro, M. Costa, and T. Harris, “Securing software by enforcing data-flow integrity,” in the 7th Symposium on Operating Systems Design and Implementation, Seattle, Washington, 2006, pp. 147 – 160.

[3] V. Kiriansky, D. Bruening, and S. Amarasinghe, “Secure Execution via Program Shepherding,” in 11th USENIX Security Symposium. San Francisco, California: USENIX Association, 2002, pp. 191 – 206.

[4] J. Nick L. Petroni and M. Hicks, “Automated Detection of Persistent Kernel Control-Flow Attacks,” in the 14th ACM Conference on Computer and Communications Security (CCS’07). Alexandria, Virginia, USA: ACM, 2007, pp. 103 – 115.

[5] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-Flow Integrity,” in the 12th ACM Conference on Computer and Communications Security (CCS’05), Alexandria, VA, USA, 2005, pp. 340 – 353.

[6] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro, “Preventing Memory Error Exploits with WIT,” in SP ’08: Proceedings of the 2008 IEEE Symposium on Security and Privacy (sp 2008). Washington, DC, USA: IEEE Computer Society, 2008, pp. 263–277.

[7] L. O. Andersen, “Program analysis and specialization for the C programming language,” Ph.D. dissertation, 1994.

[8] M. Hind, “Pointer Analysis: Haven’t We Solved This Problem Yet?” in PASTE ’01: Proceedings of the 2001 ACM SIGPLAN-SIGSOFT workshop on Program analysis for software tools and engineering. New York, NY, USA: ACM, 2001, pp. 54–61.

[9] C. Chambers, D. Ungar, and E. Lee, “An Efficient Implementation of Self, A Dynamically-Typed Object-Oriented Language Based On Prototypes,” ACM SIGPLAN Notices, vol. 24, no. 10, pp. 49–70, 1989.

[10] M. Chang, M. Bebenita, A. Yermolovich, and A. Gal, “Efficient Just-In-Time Execution of Dynamically Typed Languages Via Code Specialization Using Precise Runtime Type Inference,” Donald Bren School of Information and Computer Science, University of California, Irvine, Tech. Rep., 2007.

[11] C. Flanagan, “Hybrid Type Checking,” in the 33rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, Charleston, South Carolina, USA, 2006, pp. 245 – 256.

[12] S. Fagorzi and E. Zucca, “A Calculus of Components with Dynamic Type-Checking,” Electronic Notes in Theoretical Computer Science (ENTCS), vol. 182, pp. 73 – 90, 2007.

[13] R. B. Findler and M. Felleisen, “Contracts for Higher-order Functions,” ACM SIGPLAN Notices, vol. 37, no. 9, pp. 48 – 59, 2002.

[14] U. Erlingsson, “Low-Level Software Security: Attacks and Defenses,” in Foundations of Security Analysis and Design IV, LNCS 4677/2007. Springer Berlin, 2007, pp. 92–134.

[15] A. V. Aho, M. S. Lam, R. Sethi, and J. D. Ullman, Compilers: Principles, Techniques, and Tools 2nd. Addison-Wesley, 2006.

[16] A. M. Zaremski and J. M. Wing, “Signature Matching: A Tool for Using Software Libraries,” ACM Transactions on Software Engineering and Methodology, vol. 4, no. 2, pp. 146 – 170, 1995.

[17] M. V. Aponte and R. D. Cosmo, “Type Isomorphisms for Module Signatures,” in the 8th International Symposium on Programming Languages: Implementations, Logics, and Programs. Springer-Verlag, 1996, pp. 334 – 346.

[18] S. Jha, J. Palsberg, and T. Zhao, “Efficient Type Matching,” in the 5th International Conference on Foundations of Software Science and Computation Structures. Springer-Verlag, 2002, pp. 187–204.

[19] Wikibooks, “GNU C Compiler Internals,” 2008. [Online]. Available: http://en.wikibooks.org/wiki/GNU_C_Compiler_Internals

[20] TCG, “TCG Specification Architecture Overview,” August 2007.

[21] D. Liang and M. J. Harrold, “Efficient Points-to Analysis for Whole-program Analysis,” in ESEC/FSE-7: Proceedings of the 7th European software engineering conference held jointly with the 7th ACM SIGSOFT international symposium on Foundations of software engineering. London, UK: Springer-Verlag, 1999, pp. 199–215.

[22] N. Heintze and O. Tardieu, “Ultra-fast Aliasing Analysis Using CLA: A Million Lines of C code in a Second,” SIGPLAN Notices, vol. 36, no. 5, pp. 254–263, 2001.

[23] V. Bala, E. Duesterwald, and S. Banerjia, “Dynamo: A Transparent Dynamic Optimization System,” in the ACM SIGPLAN 2000 Conference On Programming Language Design And Implementation. Vancouver, British Columbia, Canada: ACM Press, 2000, pp. 1 – 12.

[24] “Exec Shield. http://people.redhat.com/mingo/exec-shield.”

[25] “Linux kernel patch from the Openwall Project. http://www.openwall.com/linux/.”

[26] “Intel 64 and IA-32 Architectures Software Developer’s Manual,” November 2007.

[27] G. S. Kc and A. D. Keromytis, “e-NeXSh: Achieving an Effectively Non-Executable Stack and Heap via System-Call Policing,” in the 21st Annual Computer Security Applications Conference (ACSAC’05), 2005, pp. 286 – 302.

[28] C. Cifuentes and M. V. Emmerik, “Recovery of Jump Table Case Statements from Binary Code,” Science of Computer Programming, vol. 40, no. 2-3, pp. 171 – 188, 2001.

[29] C. Cowan, S. Beattie, J. Johansen, and P. Wagle, “PointGuard: Protecting Pointers from Buffer Overflow Vulnerabilities,” in the 12th USENIX Security Symposium, 2003, pp. 91 – 104.

[30] A. Baratloo, T. Tsai, and N. Singh, “Libsafe: Protecting Critical Elements of Stacks,” December 25 1999.

[31] K. Avijit, P. Gupta, and D. Gupta, “TIED, LibsafePlus: Tools for Runtime Buffer Overflow Protection,” in the 13th USENIX Security Symposium, 2004.

[32] H. Etoh, “GCC Extension for Protecting Applications from Stack-smashing Attacks (ProPolice),” 2003. [Online]. Available: http://www.trl.ibm.com/projects/security/ssp/

---

This optimized text provides a clearer, more coherent, and professional presentation of the content.