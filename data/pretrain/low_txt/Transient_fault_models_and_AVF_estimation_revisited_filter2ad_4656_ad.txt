### Realistic SEU Model and Its Impact on AVF

#### 4.5 
- **Average Error**: 2.5x
- **Benchmarks**: adpcmc, adpcmd, bmath, dijkstra, fft, ffti, gsmt, gsmu, jpegc, jpegd, mad, patricia, string, susan

#### 1.7x
- **Average Error**: 1.7x
- **Benchmarks**: adpcmc, adpcmd, bmath, dijkstra, fft, ffti, gsmt, gsmu, jpegc, jpegd, mad, patricia, string, susan

**Figure 3.** Application of a realistic SEU model reveals further reduction in AVF compared to the bit-flip model. Each vertical bar corresponds to 1000 fault injection experiments. Each bubble over each pair of vertical bars shows the error factor for each benchmark.

### 2-Bit Upset Fault Injection Experiments

#### 35% Difference
- **Average % Difference**: 35%
- **Benchmarks**: adpcmc, adpcmd, bmath, dijkstra, fft, ffti, gsmt, gsmu, jpegc, jpegd, mad, patricia, string, susan

#### 19.8% Difference
- **Average % Difference**: 19.8%
- **Benchmarks**: adpcmc, adpcmd, bmath, dijkstra, fft, ffti, gsmt, gsmu, jpegc, jpegd, mad, patricia, string, susan

**Figure 4.** Results of 2-bit upset fault injection experiments.
- **(a) Integer Register File**: Average % difference is 35%, and between IBU and 2BU-vert is 85.4%.
- **(b) Reorder Buffer**: Average % difference is 19.8%, and between IBU and 2BU-vert is 29%.

### Residual Vulnerability with SEC Codes

**Figure 5.** Average difference between AVF computed using conventional single-point fault model and the new model according to Equation 4 is 24.11%. Black bars show the residual vulnerability of the fault model when a SEC code is used. Results shown for experiments on the integer register file.

### ACE Analysis vs. Fault Injection

**Figure 6.** ACE-analysis estimate of AVF (using residence times, according to Equation 2) compared to that obtained from fault injection for various benchmarks for the integer register file. Each curve obtained from fault injection corresponds to 50,000 fault runs. Average factor of error is 6.6x.

### Discussion and Conclusions

Current soft-error vulnerability estimation methods, including aggressive technology scaling, suffer from two main drawbacks:
1. **Spatial and Multi-bit Effects**: Not accounting for these effects leads to inaccurate vulnerability estimation.
2. **ACE Analyses**: These yield loose upper bounds, which, while conservative, can lead to wasted resources and sub-optimal designs.

This paper presents a probabilistic framework that can be used in conjunction with fault injection to model and assess the vulnerability of architectures implemented using current and future technologies. The framework provides a more accurate estimate of vulnerability, significantly less than the conservative upper bound. This information is crucial for making decisions about the degree of fault tolerance needed to meet reliability requirements.

### Acknowledgements

The authors thank Sudhanva Gurumurthi, Michael Waterman, and Jeanne Dion of the USNRC for their reviews and suggestions. They also thank the anonymous reviewers for their valuable feedback.

### References

1. A. Aggarwal and M. Franklin. Energy Efficient Asymmetric Ported Register Files. Int'l Conf. on Computer Design, pages 2-7, 2003.
2. H. Ando, R. Kan, Y. Tosaka, K. Takahisa, and K. Hatanaka. Validation of Hardware Error Recovery Mechanisms for the SPARC64 V Microprocessor. Dep. Systems & Networks, pages 62-69, June 2008.
3. J. Arlat, A. Costes, Y. Crouzet, J. C. Laprie, and D. Powell. Fault Injection and Dependability Evaluation of Fault-Tolerant Systems. IEEE Trans. on Comp., 42(8):913-923, 1993.
4. A. Biswas, P. Racunas, R. Cheveresan, J. Emer, S. Mukherjee, and R. Rangan. Computing Architectural Vulnerability Factors for Address-Based Structures. Int'l Sym. on Comp. Arch., pages 532-543, June 2005.
5. A. Biswas, P. Racunas, J. Emer, and S. Mukherjee. Computing Accurate AVFs using ACE Analysis on Perf. Models: a Rebuttal. IEEE Comp. Arch. Letters, 7(1):21-24, 2008.
6. G. Georgakos, P. Huber, M. Ostermayr, E. Amirante, and F. Ruckerbauer. Investigation of Increased Multi-Bit Failure Rate Due to Neutron Induced SEU in Advanced Embedded SRAMs. IEEE Sym. on VLSI Circuits, pages 80-81, June 2007.
7. M. Guthaus, J. Ringenberg, D. Ernst, T. Austin, T. Mudge, and R. Brown. MiBench: A Free, Commercially Representative Embedded Benchmark Suite. Int'l Workshop on Workload Characterization, pages 3-14, 2001.
8. P. Hazucha, C. Svensson, and S. Wender. Cosmic-Ray Soft Error Rate Characterization of a Standard 0.6-µM CMOS Process. IEEE Journal of Solid-State Circuits, 35:1422-1429, October 2000.
9. J. D. C. Little. A Proof for the Queuing Formula: L = λW. Operations Research, 9(3):383-387, 1961.
10. J. Maiz, S. Hareland, K. Zhang, and P. Armstrong. Characterization of multi-bit soft error events in advanced SRAMs. IEEE International Electron Devices Meeting, pages 21.4.1-21.4.4, December 2003.
11. S. S. Mukherjee, J. Emer, T. Fossum, and S. K. Reinhardt. Cache Scrubbing in Microprocessors: Myth or Necessity? Pacific Rim Int'l Sym. on Dep. Comp., pages 37-42, 2004.
12. S. S. Mukherjee, C. Weaver, J. Emer, S. K. Reinhardt, and T. Austin. A Systematic Methodology to Compute the Architectural Vulnerability Factors for a High-Performance Microprocessor. Int'l Symposium on Microarchitecture, pages 29-40, 2003.
13. K. Osada, K. Yamaguchi, Y. Saitoh, and T. Kawahara. SRAM Immunity to Cosmic-Ray-Induced Multierrors Based on Analysis of an Induced Parasitic Bipolar Effect. IEEE Journal of Solid-State Circuits, 39(5):827-833, May 2004.
14. G. A. Reis, J. Chang, N. Vachharajani, R. Rangan, D. I. August, and S. S. Mukherjee. Software-Controlled Fault Tolerance and Code Optimization. ACM Transactions on Architecture and Code Optimization, 2(4):366-396, 2005.
15. N. J. Wang, A. Mahesri, and S. J. Patel. Examining ACE Analysis Reliability Estimates Using Fault-Injection. SIGARCH Comp. Arch. News, 35(2):460-469, 2007.
16. M. Yourst. PTLsim: A Cycle Accurate Full System x86-64 Simulator. Int'l Sym. on Microarchitectural Systems and Software, pages 23-34, 2007.

**Copyright Notice:**
978-1-4244-7501-8/10/$26.00 ©2010 IEEE

**Authorized Use:**
Limited to Tsinghua University. Downloaded on March 18, 2021, at 14:00:46 UTC from IEEE Xplore. Restrictions apply.