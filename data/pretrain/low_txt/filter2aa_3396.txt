# Blowing up the Celly: Building Your Own SMS/MMS Fuzzer

## Presenters
- **Brian Gorenc**
  - **Employer:** Hewlett-Packard (HP)
  - **Organization:** HP Security Research, Zero Day Initiative
  - **Role:** Manager, Vulnerability Research
  - **Responsibilities:**
    - Organizing Pwn2Own Hacking Competition
    - Verifying EIP == 0x41414141
  - **Free Time:**
    - Following code paths that don’t lead to vulnerabilities
  - **Twitter:** @MaliciousInput, @thezdi

- **Matt Molinyawe**
  - **Employer:** Hewlett-Packard (HP)
  - **Organization:** HP Security Research, Zero Day Initiative
  - **Role:** Security Researcher
  - **Responsibilities:**
    - Enjoying funny and awesome proof of concepts
    - Measuring productivity in hours of YouTube watched
    - Process Janitor – Make exploits shine and not crash
    - Calc Connoisseur
  - **Free Time:**
    - DJ Manila Ice – Two-time United States Finalist DJ
    - Scratched on 2014 Pwnie-nominated song “Security Kate”
    - Beat Contra using only the laser without death
    - Beat QWOP
    - Martial Arts
  - **Twitter:** @djmanilaice

## Agenda
1. Introduction
2. Bug Hunting
3. Testing Environment
4. Live Demonstration
5. Key Takeaways

## Introduction
Fuzzing SMS/MMS is an intriguing topic due to the always-on nature of mobile technology, limited inline defenses, and limited update capabilities. Each researcher may approach the problem differently, often developing their own fuzzer with mutation logic. This presentation aims to demonstrate approaches to get started in phone fuzzing, using Android as the reference device for research and demonstration.

## Messaging Services
### Short Message Service (SMS)
- **Specification:** 3GPP TS 23.040
- **Technology:** Store and forward
- **Character Sets:** Supports various character sets and extended messages

### Multimedia Messaging Service (MMS)
- **Specifications:** Maintained by Open Mobile Alliance
- **Features:** Enables the transfer of audio, video, and pictures
- **Infrastructure:** Messages are forwarded through the Multimedia Messaging Service Center

### Commercial Mobile Alert System (CMAS)
- **Purpose:** Distribution of text-based alert messages
- **Types:**
  - Presidential Alerts
  - Imminent Threats
  - AMBER Alerts
- **Opt-out:** Cannot opt out of Presidential Alerts

## File Formats
### Audio
- "audio/aac", "audio/amr", "audio/imelody", "audio/mid", "audio/midi", "audio/mp3", "audio/mpeg3", "audio/mpeg", "audio/mpg", "audio/mp4", "audio/x-mid", "audio/x-midi", "audio/x-mp3", "audio/x-mpeg3", "audio/x-mpeg", "audio/x-mpg", "audio/3gpp", "audio/x-wav", "application/ogg"

### Video
- "video/3gpp", "video/3gpp2", "video/h263", "video/mp4"

### Pictures
- "image/jpeg", "image/jpg", "image/gif", "image/vnd.wap.wbmp", "image/png", "image/x-ms-bmp"

### Others
- "text/x-vCalendar", "text/x-vCard"

### Finding File Format Candidates
- [GitHub Example](https://github.com/klinker41/android-smsmms/blob/master/src/com/google/android/mms/ContentType.java)
- Download AOSP: [Source.Android.com](http://source.android.com)
- Source from Samsung: [OpenSource.Samsung.com](http://opensource.samsung.com/reception.do)
- Search for MIME types, image/, audio/, and video/ formats

## Fuzzing Framework
### Fuzzing Seeds
- [LibAV Samples](https://samples.libav.org/)
- [MPlayerHQ Samples](http://samples.mplayerhq.hu/)

### Mutation Libraries
- **Creating vCards and vCalendars:**
  - [vObject Library](http://vobject.skyhouseconsulting.com/)
  - [vObject on PyPI](https://pypi.python.org/pypi/vobject)
- **Fuzzing PDU Formats:**
  - [smspdu on PyPI](https://pypi.python.org/pypi/smspdu/)

### Fuzzing Libraries
- **Hachoir:**
  - [Hachoir Home](https://bitbucket.org/haypo/hachoir/wiki/Home)
- **Radamsa:**
  - [Oulun Yliopisto Radamsa](https://www.ee.oulu.fi/research/ouspg/Radamsa)
  - [Google Code Radamsa](https://code.google.com/p/ouspg/wiki/Radamsa)

### Crash Triaging
- Easy to create a custom gdb wrapper and develop a web app with a database backend to distribute the load.

## Testing Environment
### Virtual Lab and Configuration
#### Android Emulation
- **Ease of Use:** [Android Developer SDK](http://developer.android.com/sdk)
- **Creating Virtual ARM Devices:**
  - `android create avd –n MyDeviceName –t android-19 –b default/armeabi-v7a`
  - Use the UI with: `android avd`
  - Write scripts to generate AVDs and power them on.

#### iOS Emulation
- No default messaging app on the emulator, but you can still open multimedia files.

#### Windows Phone Emulation
- **SDK Download:** [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk)

### Android Emulator Options
- **Android SDK:**
  - Test with several API versions (ARM and x86 images)
  - Emulations tend to be slow
- **Genymotion:**
  - Fast x86 Virtualbox Virtual Machines
  - User-friendly interface
  - Available at [Genymotion.com](http://genymotion.com)

### Debugging
- **Attaching a Debugger to the Virtual Device:**
  - **On the Android Virtual Device:**
    - Shell into the device
    - Run `gdbserver :5039 –attach 1234`
    - Forward traffic to a TCP port: `adb forward tcp:5039 tcp:5039`
  - **On the Host Machine:**
    - Download Android NDK: [Developer.Android.com](http://developer.android.com/tools/sdk/ndk/index.html)
    - Run a prebuilt GDB: `arm-linux-androideabi-gdb`
    - Run the following command in the debug session: `target remote :5039`
    - Attach, control, and catch output of the debugger with Python.
    - Push debugger output to a web app or database.

### Scripting/Automation for Emulators
- **SMS Fuzzing on Emulators:**
  - Send PDU formatted messages with `send pdu` over the telnet channel
  - Initial failures with MMS led to eventual success
  - Back up MMS messages using EasyBackup
  - Manipulate `mmssms.db` (SQLite database) to create MMS messages
- **Automate with Python and SQLite3:**
  - Save clean `mmssms.db` and compare with changed database
  - Use `adb pull` and `adb push` to manage the database
  - Alter tables: `pdu`, `addr`, `part`, `canonical_addresses`, and `threads`
  - Automate with Python and SQLite3
  - Use Monkeyrunner for automation: [Developer.Android.com](http://developer.android.com/tools/help/monkeyrunner_concepts.html)

## Real-World Lab and Configuration
### Hardware
- **RX/TX:**
  - Universal Software Radio Peripheral (USRP)
  - BladeRF
  - RangeNetworks Device
- **Emissions Control:**
  - RF Enclosure

### Software
- **OpenBTS:** [OpenBTS.org](http://www.openbts.org/)
- **Base Station Information:** [OpenBSC.Osmocom.org](http://openbsc.osmocom.org/trac)
- **NanoBTS:** [NanoBTS Wiki](http://openbsc.osmocom.org/trac/wiki/nanoBTS)

### Setting Up OpenBTS
- **Build and Install:**
  - [RangeNetworks GitHub](https://github.com/RangeNetworks/dev/wiki)
  - Used Ubuntu 12.04 32-bit on a VM
  - Built with `--with-uhd` (Ettus N210 USRP)
  - UHD Drivers: [Ettus Code](http://code.ettus.com/redmine/ettus/projects/uhd/wiki/UHD_Linux)
  - Commands: `uhd_find_device`, `uhd_usrp_probe`

### USRP/Antennas/Cabling
- **USRP N210 Kit:** $1,717.00
- **WBX-40 USRP Daughterboard:** $480.00
- **GPS-Disciplined Oscillator Kit:** $758.00
- **SMA-to-SMA Cable Assembly:** $30.00
- **VERT900 Vertical Antenna Dualband:** $35.00
- **Total:** $3,020.00

### Cell Phones and SIMs
- **Unlocked Phones:** ~$500
- **Pre-paid SIMs:** ~$10-$20
- **Micro SIM Cutter Tool:** ~$5
- **Total:** ~$550

### RF Enclosure and Accessories
- **STE3000FAV:** $2,495.00
- **SMA Feedthrough Connectors**
- **DB9 10 PF and DB9 100 PF Connectors**
- **USB, RJ45 Adapter Kits**
- **Total:** $3,096.00

### Connecting to the USRP on Android
- **Commands and Setup:**
  - `uhd_find_device`
  - `uhd_usrp_probe`

### Time to Blow Up the Celly
- **Messaging from Within the RF Enclosure:**
  - Start OpenBTS
  - Check devices connected: `tmsis`
  - Send messages with OpenBTS

## Live Demonstrations
- **Emulator Crash Video:**
  - Showcases the process of crashing the emulator and debugging the issue.

## Key Takeaways
- **Attractive Targets:**
  - Filled with personal information and corporate secrets
  - Process information without user interaction
  - Handle a large number of legacy formats
- **Decreasing Barrier to Entry:**
  - Leverage emulation provided by OS developers
  - Physical hardware becoming cheaper
  - Popularity of software-defined radio increasing
- **Leverage Previous Lessons:**
  - Similar to fuzzing desktop apps to find bugs in MMS data handlers
  - Break through the mystique of cell phone research

## Thank You
- **Contact Information:**
  - Brian Gorenc: @MaliciousInput, @thezdi
  - Matt Molinyawe: @djmanilaice

© Copyright 2014 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.