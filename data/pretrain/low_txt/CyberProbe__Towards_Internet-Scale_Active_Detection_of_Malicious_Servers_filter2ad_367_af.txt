### Summary of Actions and Precautions

We have removed 106,000 IP addresses from the whitelist. Additionally, we have limited the probing rate of our horizontal scanners to 60,000 packets per second (pps), which is well below their maximum capacity. To ensure that our generated fingerprints do not contain any malicious content, we manually vet them before scanning. We also collaborate with system administrators to minimize the impact on the local network, such as bypassing firewalls and intrusion detection systems (IDS) and promptly addressing any complaints.

### Application-Layer Probing

No prior literature provides detailed guidance on performing application-layer probing of malicious servers. Our HTTP probing is not intended to be malicious; it simply sends a request, which we have manually vetted, and collects a response from the target server. However, these requests may mimic those of malicious families and often request non-existent resources from web servers. This behavior can be flagged as suspicious or malicious by server owners or trigger loosely configured IDSes. Out of the 11 virtual machines (VMs) we use for HTTP probing, 2 were suspended for "malicious" behavior. We did not receive warnings from the providers but discovered the suspensions when attempting to access the instances. Additionally, we received 3 emails warning us that our VMs might have been compromised.

The majority of complaints come from web honeypots that do not advertise their IP addresses and consider any incoming traffic as malicious. Less frequently, server owners suspect that our scanner hosts are infected or attacking them. When providers inform us of their IP ranges, we avoid further probing those ranges.

### Data Privacy and Security

It is important to note that our scanning does not collect or publicize any sensitive information from remote networks.

### Future Improvements

#### Completeness
Our current implementation is not guaranteed to find all servers in a family's infrastructure. There are two main reasons for this:
1. **Fingerprint Generation Limitations**: For some families, we cannot generate fingerprints (e.g., if their traffic cannot be replayed) or can only generate fingerprints for certain types of servers (e.g., command and control (C&C) servers but not web servers).
2. **Scanning Capacity**: We have limited scanning capacity and cannot run all fingerprints for a family simultaneously. Reusing the results of horizontal scans makes our probing more polite but reduces coverage over time.

#### Complex Protocol Semantics
One limitation of our fingerprint generation approach is that a replayed request may fail to elicit a response from a remote server, especially if the request requires specific semantic information, such as a checksum of the sender’s IP address or encryption using the IP address as an initialization vector. Prior work has extracted such information from binary implementations of protocols. For cases where a binary is available, such as with malware, we plan to integrate binary analysis techniques into our approach.

#### Shared Hosting
Web hosting services like shared hosting and content delivery networks (CDNs) involve multiple domains on the same IP address. The web server requires the Host header to route the request, which is problematic for our scanning since we do not know the hosted domains. However, malicious servers rarely use shared hosting services because they are managed, and the content is typically installed by the web server owner. We could leverage passive DNS databases to identify domains hosted on an IP address, but challenges include the limited coverage of such databases and the large number of queries needed for a complete scan.

#### Identifiable Probes
When we receive complaints about our probing, we ask the reporters for their IP ranges and remove them from the whitelist. Some reporters may not want to disclose their IP ranges, especially if they run web honeypots. In such cases, we could embed a secret in our probes and disclose it to selected parties. For example, we could fix the secret used to compute the sequence number of our TCP probes and reveal it to reporters so they can verify if a received probe was sent by CyberProbe. Whenever the secret is updated, we would need to notify all reporters.

### Related Work

#### Active Probing
Active probing has been proposed for various purposes, including identifying differences between TCP implementations, OS identification, and tracking specific devices. Most relevant to our work are active probing techniques for detecting network-based malware. For instance, BotProbe actively injects commands into IRC channels to identify bots, while PeerPress uses active probing to detect P2P malware. CyberProbe differs in that it can detect any type of application listening on the network and focuses on external networks at an Internet scale. Unlike BotProbe, CyberProbe does not need to inject traffic into existing connections. Our fingerprint generation leverages network traffic rather than binary analysis, making it scalable for large quantities of malware.

#### Fingerprint/Signature Generation
Prior work includes automatically generating OS and DNS fingerprints from network traffic. CyberProbe follows a similar high-level approach but proposes a novel adversarial fingerprint generation technique. It reuses previously observed requests, reducing the traffic sent to training servers and producing inconspicuous probes. CyberProbe also uses network signatures for classification, eliminating the need for a specific fingerprint matching component.

#### Scanning
Internet-wide scanning has been used for security applications, such as identifying vulnerable SSH servers, finding DNS servers with incorrect resolutions, and detecting weak cryptographic keys in network devices. Our work aims to identify malicious servers. We are influenced by Leonard et al.'s work on maximizing politeness in Internet-wide horizontal scans. While techniques like Zmap can speed up scanning, our goal is to identify malicious servers, and we currently cap the scan speed for good citizenship.

### Conclusion

In this paper, we propose a novel active probing approach for detecting malicious servers and compromised hosts. Our approach sends probes to remote hosts and examines their responses to determine if they are malicious. Compared to existing defenses, it is fast, cost-effective, easy to deploy, and achieves Internet scale. It identifies different types of malicious servers, such as C&C servers, exploit servers, payment servers, and click redirectors, as well as malware that listens for incoming traffic, such as P2P bots.

We have implemented our approach in a tool called CyberProbe, which uses a novel adversarial fingerprint generation technique and three scanners. We have used CyberProbe to build fingerprints for 13 malicious families, identifying 151 malicious servers and 7,881 P2P bots through 24 localized and Internet-wide scans. Of these servers, 75% are unknown to four databases of malicious servers, indicating that CyberProbe can achieve up to four times better coverage than existing techniques. Our results also reveal that cybercriminals often host multiple servers on the same provider to amortize setup costs.

### Acknowledgements

We are grateful to the Network Security teams at Texas A&M University and the IMDEA Software Institute for their discussions and professional handling of this work. We also thank the people behind VirusTotal, URLQuery, VxVault, and Malware Domain List for making their information publicly available.

This research was partially supported by NSF (Grant No. CNS-0954096) and AFOSR (Grant No. FA9550-13-1-0077). Partial support was also provided by the European Union through Grant FP7-ICT No. 256980 and the EIT-ICT Labs CADENCE project, by the SoftNet-CM project, and by the Spanish Government through Grant TIN2012-39391-C04-01 and a Juan de la Cierva Fellowship for Juan Caballero.

All opinions, findings, and conclusions or recommendations expressed herein are those of the authors and do not necessarily reflect the views of the sponsors.

### References

[1] M. I. Abouelhoda, S. Kurtz, and E. Ohlebusch. Replacing suffix trees with enhanced suffix arrays. Journal of Discrete Algorithms, 2(1), 2004.
[2] Alexa - the web information company. http://www.alexa.com/.
[3] D. Benoit and A. Trudel. World’s first web census. International Journal of Web Information System, 3, 2007.
[4] Tracking cyber crime: Inside the fakeav business. http://www.xylibox.com/2011/06/tracking-cyber-crime-inside-fakeav.html.
[5] The missing link - some lights on urausy affiliate. http://malware.dontneedcoffee.com/2013/05/the-missing-link-some-lights-on-urausy.html.
[6] Blackhole exploit kit v2 on the rise. http://research.zscaler.com/2012/10/blackhole-exploit-kit-v2-on-rise.html.
[7] J. Caballero, S. Venkataraman, P. Poosankam, M. G. Kang, D. Song, and A. Blum. FIG: Automatic fingerprint generation. In Network and Distributed System Security Symposium, San Diego, CA, February 2007.
[8] J. Caballero, H. Yin, Z. Liang, and D. Song. Polyglot: Automatic extraction of protocol message format using dynamic binary analysis. In ACM Conference on Computer and Communications Security, Alexandria, VA, October 2007.
[9] D. E. Comer and J. C. Lin. Probing TCP implementations. In USENIX Summer Technical Conference, Boston, MA, June 1994.
[10] Collection of pcap files from malware analysis. http://contagiodump.blogspot.com.es/2013/04/collection-of-pcap-files-from-malware.html/.
[11] D. Dagon, C. Lee, W. Lee, and N. Provos. Corrupted DNS resolution paths: The rise of a malicious resolution authority. In Network and Distributed System Security Symposium, San Diego, CA, February 2008.
[12] D. Dittrich. So you want to take over a botnet... In USENIX Workshop on Large-Scale Exploits and Emergent Threats, San Jose, CA, April 2012.
[13] H. Dreger, A. Feldmann, M. Mai, V. Paxson, and R. Sommer. Dynamic application-layer protocol analysis for network intrusion detection. In USENIX Security Symposium, Vancouver, Canada, July 2006.
[14] Z. Durumeric, E. Wustrow, and J. A. Halderman. ZMap: Fast internet-wide scanning and its security applications. In USENIX Security Symposium, Washington, D.C., August 2013.
[15] P. Eckersley. How unique is your web browser? In Privacy Enhancing Technologies Symposium, Berlin, Germany, July 2010.
[16] Fpdns. http://www.rfc.se/fpdns/.
[17] Fyodor. Remote OS detection via TCP/IP stack fingerprinting, December 1998. http://www.phrack.com/phrack/51/P51-11.
[18] G. Gu, V. Yegneswaran, P. Porras, J. Stoll, and W. Lee. Active botnet probing to identify obscure command and control channels. In Annual Computer Security Applications Conference, Honolulu, HI, December 2009.
[19] P. Haffner, S. Sen, O. Spatscheck, and D. Wang. ACAS: Automated construction of application signatures. In ACM Workshop on Mining network data, Philadelphia, PA, October 2005.
[20] N. Heninger, Z. Durumeric, E. Wustrow, and J. Halderman. Mining your Ps and Qs: Detection of widespread weak keys in network devices. In USENIX Security Symposium, Bellevue, WA, August 2012.
[21] HTML::Similarity. http://search.cpan.org/~xern/HTML-Similarity-0.2.0/lib/HTML/Similarity.pm/.
[22] J. P. John, A. Moshchuk, S. D. Gribble, and A. Krishnamurthy. Studying spamming botnets using BotLab. In Symposium on Networked System Design and Implementation, Boston, MA, April 2009.
[23] H.-A. Kim and B. Karp. Autograph: Toward automated, distributed worm signature detection. In USENIX Security Symposium, San Diego, CA, August 2004.
[24] D. E. Knuth. The Art Of Computer Programming, Volume 2 (3rd Ed.): Seminumerical Algorithms. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 1997.
[25] T. Kohno, A. Broido, and K. Claffy. Remote physical device fingerprinting. In IEEE Symposium on Security and Privacy, Oakland, CA, May 2005.
[26] C. Kreibich and J. Crowcroft. Honeycomb - creating intrusion detection signatures using honeypots. In Workshop on Hot Topics in Networks, Boston, MA, November 2003.
[27] C. Kreibich, N. Weaver, C. Kanich, W. Cui, and V. Paxson. GQ: Practical containment for measuring modern malware systems. In Internet Measurement Conference, Berlin, Germany, November 2011.
[28] D. Leonard and D. Loguinov. Demystifying service discovery: Implementing an internet-wide scanner. In Internet Measurement Conference, Melbourne, Victoria, Australia, November 2010.
[29] Z. Li, M. Sanghi, B. Chavez, Y. Chen, and M.-Y. Kao. Hamsa: Fast signature generation for zero-day polymorphic worms with provable attack resilience. In IEEE Symposium on Security and Privacy, Oakland, CA, May 2006.
[30] Libevent. http://libevent.org/.
[31] Tcpdump/libpcap. http://www.tcpdump.org/.
[32] Z. Lin, X. Jiang, D. Xu, and X. Zhang. Automatic protocol format reverse engineering through context-aware monitored execution. In Network and Distributed System Security Symposium, San Diego, CA, February 2008.
[33] The Malicia Project. http://malicia-project.com/.
[34] M. Marquis-Boire, B. Marczak, C. Guarnieri, and J. Scott-Railton. For their eyes only: The commercialization of digital spying. https://citizenlab.org/2013/04/for-their-eyes-only-2/.
[35] Malware Domain List. http://malwaredomainlist.com/.
[36] A. Nappa, M. Z. Rafique, and J. Caballero. Driving in the cloud: An analysis of drive-by download operations and abuse reporting. In SIG SIDAR Conference on Detection of Intrusions and Malware & Vulnerability Assessment, Berlin, Germany, July 2013.
[37] Nessus. http://www.nessus.org/.
[38] J. Newsome, B. Karp, and D. Song. Polygraph: Automatically generating signatures for polymorphic worms. In IEEE Symposium on Security and Privacy, Oakland, CA, May 2005.
[39] Nmap. http://www.insecure.org.
[40] R. Perdisci, W. Lee, and N. Feamster. Behavioral clustering of HTTP-based malware and signature generation using malicious network traces. In Symposium on Networked System Design and Implementation, San Jose, CA, April 2010.
[41] N. Provos and P. Honeyman. ScanSSH - scanning the internet for SSH servers. Technical Report CITI TR 01-13, University of Michigan, October 2001.
[42] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose. All your iframes point to us. In USENIX Security Symposium, San Jose, CA, July 2008.
[43] M. Z. Rafique and J. Caballero. FIRMA: Malware clustering and network signature generation with mixed network behaviors. In International Symposium on Recent Advances in Intrusion Detection, St. Lucia, October 2013.
[44] K. Rieck, G. Schwenk, T. Limmer, T. Holz, and P. Laskov. Botzilla: Detecting the phoning home of malicious software. In ACM Symposium on Applied Computing, 2010.
[45] L. Rizzo. Netmap: A novel framework for fast packet I/O. In USENIX Annual Technical Conference, Boston, MA, June 2012.
[46] University of Oregon Route Views Project. http://www.routeviews.org/.
[47] Google Safe Browsing. https://developers.google.com/safe-browsing/.
[48] Shoutcast. http://www.shoutcast.com/.
[49] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated worm fingerprinting. In Symposium on Operating System Design and Implementation, San Francisco, CA, December 2004.
[50] Snort. http://www.snort.org/.
[51] S. Staniford, V. Paxson, and N. Weaver. How to 0wn the internet in your spare time. In USENIX Security Symposium, San Francisco, CA, August 2002.
[52] B. Stone-Gross, M. Cova, L. Cavallaro, B. Gilbert, M. Szydlowski, R. Kemmerer, C. Kruegel, and G. Vigna. Your botnet is my botnet: Analysis of a botnet takeover. In ACM Conference on Computer and Communications Security, Chicago, IL, November 2009.
[53] Suricata. http://suricata-ids.org/.
[54] URLQuery. http://urlquery.net/.
[55] VirusShare. http://virusshare.com/.
[56] VirusTotal. http://www.virustotal.com/.
[57] M. Vrable, J. Ma, J. Chen, D. Moore, E. Vandekieft, A. C. Snoeren, G. M. Voelker, and S. Savage. Scalability, fidelity, and containment in the Potemkin virtual honeyfarm. In Symposium on Operating Systems Principles, Brighton, United Kingdom, October 2005.
[58] VxVault. http://vxvault.siri-urz.net.
[59] R. J. Walls, B. N. Levine, M. Liberatore, and C. Shields. Effective digital forensics research is investigator-centric. In USENIX Workshop on Hot Topics in Security, San Francisco, CA, August 2011.
[60] K. Wang, G. Cretu, and S. J. Stolfo. Anomalous payload-based worm detection and signature generation. In International Symposium on Recent Advances in Intrusion Detection, Seattle, WA, September 2005.
[61] Y.-M. Wang, D. Beck, X. Jiang, R. Roussev, C. Verbowski, S. Chen, and S. King. Automated web patrol with Strider Honeymonkeys: Finding web sites that exploit browser vulnerabilities. In Network and Distributed System Security Symposium, San Diego, CA, February 2006.
[62] J. Wyke. The ZeroAccess botnet: Mining and fraud for massive financial gain, September 2012. http://www.sophos.com/en-us/why-sophos/our-people/technical-papers/zeroaccess-botnet.asp:x.
[63] Z. Xu, L. Chen, G. Gu, and C. Kruegel. PeerPress: Utilizing enemies’ P2P strength against them. In ACM Conference on Computer and Communications Security, Raleigh, NC, October 2012.
[64] V. Yegneswaran, J. T. Giffin, P. Barford, and S. Jha. An architecture for generating semantics-aware signatures. In USENIX Security Symposium, Baltimore, MD, July 2005.