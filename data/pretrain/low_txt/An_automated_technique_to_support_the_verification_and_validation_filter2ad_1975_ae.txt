### Derivation and Analysis of Formulas Using Daikon and Traviando

#### Introduction
This section details the derivation and analysis of formulas using Daikon and Traviando on a set of traces. We obtained 1,815 formulas, which we will categorize and discuss to illustrate our experiences.

#### Type 1: Discrete Values and Bounds
- **Daikon**: Produces a discrete set of values for all state variables in the tagged bot submodel. For example, it generates upper bounds for 15 variables and lower and upper bounds for 3 variables.
- **Traviando**: Produces lower and upper bounds for the total number of active propagation bots in the botnet submodel. It also generates absolute and relative bounds for all 33 variables.

#### Type 2: Monotonicity
- **Daikon and Traviando**: Do not recognize monotonicity in this model. However, combining bounds of type 1 raises the question of what happens when a bound is reached. If a bound is reached, the value of that variable must remain constant for the rest of the simulation run.

#### Type 3: Invariants
- **Daikon**: Obtains invariants such as weighted sums, e.g., the total number of initial bot infections is the sum of those at Botnet and TaggedBot.
- **Traviando**: Generates invariants for the tagged bot submodel and the botnet submodel, limiting the number of tagged bots to one and the number of bots in the botnet to \(2^{31} - 1\). The model includes state variables that give the total number of bots in a particular state.

#### Type 4, 5, and 6: State Transformation and Relations
- **Daikon**: Recognizes relationships between preconditions and postconditions for state transformations. For example, it generates inequalities like \(x \leq y\) or \(x' = y\).
- **Traviando**: Generates relations for state transformations, but does not check the resulting state. It recognizes the strength of equations and value sets for combinations of variables.

#### Type 7: Action-Specific Formulas
- **Daikon**: Does not contribute to this type of formula.
- **Traviando**: Generates an average of 8.3 possible actions. For example, it models that a propagation bot can go into sleep mode, return to active mode, or be identified and removed.

#### Runtime Verification
- **Performance Impact**:
  - Monitoring 1,815 Daikon-generated formulas resulted in a slowdown by a factor of 41.
  - Monitoring 1983 Traviando-generated formulas resulted in a slowdown by a factor of 62.
  - Unless future improvements in trace data communication and evaluation reduce this overhead, runtime verification can only be applied to short simulation experiments.

#### Conclusion
We presented an approach to derive a formal specification from a set of finite simulation traces. This set of properties, mainly safety properties, contributes to the documentation and validation of the functional behavior of a stochastic model. The generated formulas can be used for runtime verification and regression testing of modified models.

#### Acknowledgements
We thank the reviewers for their valuable feedback and the James Monroe Scholars Fellowship program of the College of William and Mary for providing funding for this undergraduate research project.

#### References
[1] O. Balci. Quality assessment, verification, and validation of modeling and simulation applications. In Proc. of the 2004 Winter Simulation Conference, pages 122-129. IEEE, 2004.

[2] A. Baliga, V. Ganapathy, and L. Iftode. Automatic inference and enforcement of kernel data structure invariants. Computer Security Applications Con!, 0:77-86, 2008.

[3] A. Bauer, M. Leucker, and C. Schallhart. Monitoring of real-time properties. In S. Arun-Kumar and N. Garg, editors, F SITCS, volume 4337 of LNCS, pages 260-272. Springer, 2006.

[4] A. Bauer, M. Leucker, and C. Schallhart. The good, the bad, and the ugly, but how ugly is ugly? In O. Sokolsky and S. Tasiran, editors, RV, volume 4839 of LNCS, pages 126-138. Springer, 2007.

[5] A. Bauer, M. Leucker, and C. Schallhart. Runtime verification for LTL and TLTL. Technical report, TUM-I0724, TU Miinchen, 2007.

[6] N. Benes, L. Brim, I. Cema, J. Sochor, P. Verkova, and B. Zimmerova. Partial order reduction for state/event LTL. In M. Leuschel and H. Wehrheim, editors, IFM 2009, volume 5423 of LNCS, pages 307-321. Springer, 2009.

[7] S. Bensalem and D. Peled, editors. Runtime Verification, 9th Int. Workshop, RV 2009, France, 2009., volume 5779 of LNCS. Springer, 2009.

[8] L. Bodrog, G. Horvath, S. Racz, and M. Telek. A tool support for automatic analysis based on the tagged customer approach. In QEST, pages 323-332. IEEE CS, 2006.

[9] S. Chaki, E. Clarke, J. Ouaknine, N. Sharygina, and N. Sinha. State/event-based software model checking. In E. Boiten, J. Derrick, and G. Smith, editors, IFM 2004, volume 2999 of LNCS, pages 128-147. Springer, 2004.

[10] D. D. Deavours, G. Clark, T. Courtney, D. Daly, S. Derisavi, J. M. Doyle, W. H. Sanders, and P. G. Webster. The Mobius framework and its implementation. IEEE TSE, 28(10):956-969, 2002.

[11] N. Dinesh, A. K. Joshi, I. Lee, and O. Sokolsky. Checking traces for regulatory conformance. In M. Leucker, editor, RV, volume 5289 of LNCS, pages 86-103. Springer, 2008.

[12] M. D. Ernst, J. H. Perkins, P. J. Guo, S. McCamant, C. Pacheco, M. S. Tschantz, and C. Xiao. The Daikon system for dynamic detection of likely invariants. Sci. Comput. Program., 69(1-3):35-45, 2007.

[13] P. Kemper. Recovering model invariants from simulation traces with Petri net analysis techniques. In Winter Simulation Conference. ACM, 2009.

[14] P. Kemper. Report generation for simulation traces with Traviando. In DSN, pages 347-352. IEEE CS, 2009.

[15] P. Kemper and C. Tepper. Automated trace analysis of discrete event system models. IEEE TSE, 35,2: 195-208, 2009.

[16] M. Kim, M. Viswanathan, S. Kannan, I. Lee, and O. Sokolsky. Java-MaC: A run-time assurance approach for Java programs. Formal Methods in System Design, 24(2):129-155, 2004.

[17] M. Leucker and C. Schallhart. A brief account of runtime verification. J. Log. Algebr. Program., 78(5):293-303, 2009.

[18] O. Mondragon, A. Q. Gates, S. Roach, H. Mendoza, and O. Sokolsky. Generating properties for runtime monitoring from software specification patterns. Int. Software Engi. and Knowledge Engineering, 2007.

[19] G. Rosu, W. Schulte, and T.-F. Serbanuta. Runtime verification of C memory safety. In Bensalem and Peled [7], pages 132-151.

[20] E. V. Ruitenbeek and W. H. Sanders. Modeling peer-to-peer botnets. In QEST, pages 307-316. IEEE CS, 2008.

[21] S. Sahoo, M.-L. Li, P. Ramachandran, S. Adve, V. Adve, and Y. Zhou. Using likely program invariants to detect hardware errors. In DSN. IEEE CS, 2008.

[22] R. G. Sargent. Verification and validation of simulation models. In Winter Simulation Conference, pages 157-169. ACM, 2008.

[23] W. Zhou, O. Sokolsky, B. T. Loo, and I. Lee. DMaC: Distributed monitoring and checking. In Bensalem and Peled [7], pages 184-201.

978-1-4244-7501-8/10/$26.00 Â©2010 IEEE
DSN 2010: Klock & Kemper
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18, 2021 at 14:04:17 UTC from IEEE Xplore. Restrictions apply.