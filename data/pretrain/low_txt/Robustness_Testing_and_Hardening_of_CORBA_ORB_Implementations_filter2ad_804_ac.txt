# Robustness Failure Protection for Object Reference Data Types

## 4.4 Robustness Failure Protection for Object Reference Data Types

We propose a probe technique that is flexible and can be easily implemented by ORB (Object Request Broker) vendors to protect against a large class of robustness failures, particularly those caused by invalid and uninitialized object and pseudo-object references. A probe function is designed to determine the validity of a parameter value. The key characteristics of a probe function are:

- **Sensitivity**: The ability to distinguish between valid and invalid values.
- **Non-intrusiveness**: Ensuring that the parameter value and program state remain unchanged after the check.
- **Robustness**: Avoiding the introduction of additional robustness failures.

The probe function should also be lightweight to minimize performance overhead, although there may be a trade-off between sensitivity and performance.

### Implementation in omniORB

We found that omniORB 2.8 and 3.0 provide a foundation for a simple probe technique. Each object and pseudo-object data type in omniORB is assigned an undocumented sequence number called `PR-magic`. This "magic" number is unique for each data type and serves as an identity mark. When an instance of an object or pseudo-object data type is correctly set up, the constructor initializes a member variable `pd-magic` with the correct `PR-magic` value. This variable is set to "invalid" by the destructor when the reference is freed. Therefore, a valid reference will contain the correct `PR-magic` value during its lifetime. If `pd-magic` does not contain the correct value, the reference is invalid.

### Limitations and Enhancements

Unfortunately, the functionality provided by omniORB is not robust enough for our purposes. For many invalid object references in our test set, the `PR-is-valid()` check triggers a robustness failure by attempting to read the `PR-magic` value from an illegal memory address. Additionally, `PR-is-valid()` cannot detect NULL object references.

To create a more sensitive, robust, and non-intrusive probe functionality, we refined the `PR-is-valid()` method by adding a call to `CORBA::is_nil()`, which is a specialized NULL object reference checking method defined in the CORBA standard. We also added necessary signal-handling code to make the checking procedure more robust. A signal triggered while accessing the parameter value indicates that an invalid parameter value has been detected. A multi-threaded checking scheme could be used instead of signal handling, but it would likely have higher performance costs without significant optimization.

### Experimental Results

We conducted initial experiments to study the effectiveness of this method. From our CORBA 2.1 operation test set, we selected eight operations that use object or pseudo-object references as parameters. We implemented a simple protection-code generator to automatically generate protection code suitable for some parameter types.

1. **NULL-Checking Experiment**: Conducted to check for NULL references.
2. **PR-is-valid() Checking Code**: Generated and added to the target module.
3. **Signal Handler Installation**: Installed to handle robustness failures.

The results, tested on omniORB 2.8 using the Linux platform, show that the protection scheme is effective. For the eight functions tested, all thread aborts, formerly 37.77% of the test cases, were successfully eliminated. However, without necessary signal-handling mechanisms, `CORBA::is_nil()` and `PR-is-valid()` checking introduced additional robustness failures.

### Performance Overhead

Performance overhead was measured by running the target operation 5,000,000 times with the probe functionality turned on or off, and calculating the difference in average execution times. Valid parameter values were used to measure performance under normal conditions. The probe function takes from 4.77 ps to 10.49 ps to execute, which is 26 times the execution time for a simple `CORBA::is_nil()` operation and as low as 7% for a complex `object-to-string()` operation. Although probe functions incur overhead, it is likely negligible in real CORBA programs because probes are static methods declared and run locally, and the bottleneck on CORBA platforms is usually the marshalling, unmarshalling, and communication of data and methods over the network.

### Future Work

Future work will include extending this method to protect against non-object data types with minimal or no compiler support. Similar methods might be standardized and generated as part of stub code by the CORBA IDL compiler, allowing users to selectively protect their custom data types.

## 5. Related Work

Most previous work comparing ORB implementations has focused on measuring and optimizing ORB performance. Studies have measured latency and throughput, identified major overhead sources, and compared various ORBs in terms of robustness. Fault injection studies have examined distributed object behavior under real and simulated failure scenarios. Efforts to build fault-tolerant CORBA applications, services, and middleware have also been made, such as the Fault-Tolerant CORBA Standard, which aims to eliminate single-point failures.

## 6. Conclusions

In this paper, we introduced a methodology to test and measure the exception-handling robustness of CORBA ORB implementations using Ballista. We ported Ballista testing clients to work with ORBs and tested two major versions of three ORB implementations on two operating systems for several CORBA 2.1 standard operations. Our approach enables us to evaluate the robustness of specific ORB implementations, compare different ORB implementations, and enhance the robustness of a specific ORB implementation.

Testing for exceptional parameter value handling capabilities revealed normalized average robustness failure rates ranging from 26% to 42%. These results suggest that users must pay close attention to ORB robustness issues when building critical applications on CORBA-based systems. To improve ORB robustness, we proposed a probe technique that checks for the presence of a special value stored in data structures upon initialization. A prototype implementation using capabilities already built into omniORB demonstrated that this approach can effectively eliminate robustness failures for some data types.

Future work includes expanding robustness testing to include CORBA servers and creating a wider variety of techniques for robustness improvement of CORBA data types.

## 7. Acknowledgments

The authors would like to thank Chia-Yen Shih and Christof Fetzer from AT&T Labs for their support. This work was funded primarily by AT&T Labs - Research. The Ballista project is supported in part by DARPA (contract DABT63-96-C-0064).

## 8. References

[1] P. Emerald Chung, Woei-Jyh Lee, Joanne Shih, Shalini Yajnik, and Yennun Huang, “Fault-Injection Experiments for Distributed Objects”, Proceedings of the International Symposium on Distributed Objects and Applications, Edinburgh, United Kingdom, September 5-7, 1999.

[2] Distributed Systems Research Group, “CORBA Comparison Project”, http://nenya.ms.mff.cuni.cz/thegroup/COMP. Accessed June 10, 2000.

[3] Kimberly Femsler and Philip Koopman, “Robustness Testing of A Distributed Simulation Backplane”, Proceedings of ISSRE 99, Boca Raton, Florida, November 1-4, 1999.

[4] Aniruddha Gokhale and Douglas Schmidt, “Evaluating CORBA Latency and Scalability Over High-speed ATM Networks”, Proceedings of ICDCS 97, Baltimore, MD, May 27-30, 1997.

[5] IEEE Computer Society, “IEEE Standard Glossary of Software Engineering Terminology (IEEE Std 610.12-1990)”, Dec. 10, 1990.

[6] IEEE Computer Society, “IEEE Standard for Information Technology - Portable Operating System Interface (POSIX) - Part 1: System Application Program Interface (API) - Amendment 1: Real-time Extension [C Language] (IEEE Std 1003.1b-1993)”, 1994.

[7] Inprise Corporation, “VisiBroker for C++ Reference, Version 4.0”, 2000.

[8] IONA Technologies PLC, “Orbix 2000 Programmer’s Reference”, March 2000.

[9] Philip Koopman & John DeVale, “The Exception Handling Effectiveness of POSIX Operating Systems”, IEEE Transactions on Software Engineering, September 2000.

[10] Philip Koopman and John DeVale, “Comparing the Robustness of POSIX Operating Systems”, Proceedings of FTCS 29, Madison, Wisconsin, June 15-18, 1999.

[11] Sai-Lai Lo and David Riddoch, “The omniORB2 version 2.8 User’s Guide”, AT&T Laboratories Cambridge, July 1, 1999.

[12] Silvano Maffeis, “A Fault-Tolerant CORBA Name Server”, Proceedings of the 1996 IEEE Symposium on Reliable Distributed Systems. Niagara-on-the-Lake, Canada: IEEE, October 1996.

[13] L. Moser, P. Melliar-Smith, and P. Narasimhan, “A Fault Tolerance Framework for CORBA”. Proceedings of FTCS 29, Madison, Wisconsin, June 15-18, 1999.

[14] S. Nimmagadda, C. Liyanaarachchi, A. Gopinath, D. Niehaus, and A. Kaushal, “Performance Patterns: Automated Scenario Based ORB Performance Evaluation”, Proceedings of COOTS 99, San Diego, California, May 3-7, 1999.

[15] Object Management Group, “The OMG’s site for CORBA and UML success stories”, http://www.corba.org/success.htm. Accessed June 22, 2000.

[16] Object Management Group, “Fault Tolerant CORBA standard”, http://www.omg.org/cgi-bin/doc?orbos/2000-01-19. October, 1999. Accessed June 19, 2000.

[17] Object Management Group, “Space Domain Task Force”, http://www.omg.org/homepages/space/index.htm. Accessed Dec 5, 2000.

[18] Object Management Group, “The Common Object Request Broker: Architecture and Specification”, August, 1997.

[19] Saib S.H., “Executable Assertions - An Aid To Reliable Software”, 11th Asilomar Conference on Circuits Systems and Computers, pp. 277-281, 1978.

[20] J. Schonwalder, S. Garg, Y. Huang, A. P. A. van Moorsel, and S. Yajnik, “A Management Interface for Distributed Fault Tolerance CORBA Services”, Proceedings of the IEEE 3rd International Workshop on System Management, Newport, RI, April 1998.

[21] Kent Wilken & Timothy Kong, “Concurrent Detection of Software and Hardware Data-Access Faults”, IEEE Transactions on Computers, VOL. 46, No. 4, April 1997.

Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021 at 04:01:43 UTC from IEEE Xplore. Restrictions apply.