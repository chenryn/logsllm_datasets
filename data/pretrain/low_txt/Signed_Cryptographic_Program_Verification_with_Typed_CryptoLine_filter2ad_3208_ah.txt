### Experimental Setup and Results

To demonstrate the usability of our tools, we conducted experiments on two different machines: a MacBook Pro and a dedicated Linux server. The results are summarized in Table 5. We extracted GCC 8.1.0 gimple code from C functions in NaCl 20110221, wolfSSL 3.15.5, Bitcoin 0.17.0.1, OpenSSL 1.1.1, and BoringSSL (master branch with git commit hash f36c3ad).

**Machine Specifications:**
- **M1:** MacBook Pro running OS X 10.11.6, equipped with a dual-core 2.7GHz CPU and 16GB RAM.
- **M2:** Linux server running Ubuntu 16.04.5 LTS, equipped with two octa-core 3.20GHz CPUs and 1024GB RAM.

**SMT Solvers and Computer Algebra System:**
- SMT solvers: Boolector 3.0.0 and MathSAT 5.5.4
- Computer Algebra System: Singular 4.1.1

**Table Columns:**
- **LIR:** Number of gimple statements
- **LCL:** Number of CryptoLine instructions
- **D:** Number of manually translated CryptoLine instructions
- **P:** Number of annotated assert and assume instructions
- **TR:** Time (in seconds) for checking safety and range properties
- **MR:** Peak memory usage (in MB) for checking safety and range properties
- **TA:** Time (in seconds) for checking algebraic properties
- **MA:** Peak memory usage (in MB) for checking algebraic properties
- **OOM:** Out of memory
- **OOT:** Out of time (greater than 86400 seconds)

### Verification Results

Our experiments show that almost all functions can be verified on a laptop within 15 minutes. Specifically, the C implementations of the Montgomery ladder step for Curve25519 in OpenSSL and BoringSSL were verified in 13 and 10 minutes, respectively. When using a dedicated server, the verification times reduced to 5 and 4 minutes, respectively.

- **Automatic Verification:** 25 functions were checked without any manual translation or annotation.
- **Semi-Automatic Verification:** 39 functions (25 + 14) required less than 10% manual translation (column D).

Although our technique is not fully automatic, it requires minimal human intervention.

### Verified Functions

We have verified 82 C functions implementing field and group operations for cryptographic primitives in five cryptography libraries:
- **NaCl [23]**
- **wolfSSL [26]**
- **Bitcoin [19]**
- **OpenSSL [24]**
- **BoringSSL [9, 11]**

**Notable Implementations:**
- The 32-bit C implementation in wolfSSL’s Curve25519 is also found in OpenSSL and LibreSSL [21].
- The secp256k1 cryptography library in Bitcoin is used by other cryptocurrencies, including Ethereum [20], Zcash [27], Ripple [25], and Litecoin [22].

### Specific Verification Details

- **Curve25519 (Z2255−19):** Implemented in NaCl, wolfSSL, OpenSSL, and BoringSSL. Our verification exposed a potential missing carry in NaCl 20110221, which we reported. The BoringSSL implementation, synthesized by Fiat-Crypto [9], was verifiably correct at the C source level. Vector statements in the optimized sequential implementation of the Montgomery ladder step were found to be correct after vectorization.
- **secp256k1 (Z2256−232−29−28−27−26−24−1):** 24 C functions for various field and group operations were verified.
- **NIST Curves (P224, P256, P521):** Field operations over different fields (Z2224−296+1, Z2256−2224+2192+296−1, and Z2521−1, respectively) were verified in OpenSSL.

To the best of our knowledge, this is the first verification result for cryptographic programs in NaCl, wolfSSL, and Bitcoin.

### Acknowledgments

The authors would like to thank the anonymous referees for their valuable comments and suggestions. This work is supported by:
- Academia Sinica under Grant Numbers AS-IA-104-M01 and AS-TP-106-M06
- Ministry of Science and Technology of Taiwan under Grant Numbers 105-2221-E-001-014-MY3, 107-2221-E-001-004, 108-2221-E-001-009-MY2, 108-2221-E-001-010-MY3
- National Natural Science Foundation of China under Grant Numbers 61802259 and 61836005

### References

[1] Reynald Affeldt. 2013. On construction of a library of formally verified low-level arithmetic functions. Innovations in Systems and Software Engineering 9, 2 (2013), 59–77.

[2] Reynald Affeldt and Nicolas Marti. 2007. An Approach to Formal Verification of Arithmetic Functions in Assembly. In Advances in Computer Science (LNCS), Mitsu Okada and Ichiro Satoh (Eds.), Vol. 4435. Springer, Heidelberg Dordrecht London New York, 346–360.

[3] Reynald Affeldt, David Nowak, and Kiyoshi Yamada. 2012. Certifying assembly with formal security proofs: The case of BBS. Science of Computer Programming 77, 10–11 (2012), 1058–1074.

[4] José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, Arthur Blot, Benjamin Grégoire, Vincent Laporte, Tiago Oliveira, Hugo Pacheco, Benedikt Schmidt, and Pierre-Yves Strub. 2017. Jasmin: High-Assurance and High-Speed Cryptography. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, New York, NY, USA, 1807–1823.

[5] Andrew W. Appel. 2015. Verification of a Cryptographic Primitive: SHA-256. ACM Transactions on Programming Languages and Systems 37, 2 (2015), 7:1–7:31.

[6] Lennart Beringer, Adam Petcher, Katherine Q. Ye, and Andrew W. Appel. 2015. Verified Correctness and Security of OpenSSL HMAC. In USENIX Security Symposium 2015. USENIX Association, 207–221.

[7] B. Bond, C. Hawblitzel, M. Kapritsos, K. R. M. Leino, J. R. Lorch, B. Parno, A. Rane, S. Setty, and L. Thompson. 2017. Vale: Verifying High-Performance Cryptographic Assembly Code. In USENIX Security Symposium 2017. USENIX Association, 917–934.

[8] Yu-Fang Chen, Chang-Hong Hsu, Hsin-Hung Lin, Peter Schwabe, Ming-Hsien Tsai, Bow-Yaw Wang, Bo-Yin Yang, and Shang-Yi Yang. 2014. Verifying Curve25519 Software. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, Gail-Joon Ahn, Moti Yung, and Ninghui Li (Eds.). ACM, New York, NY, USA, 299–309.

[9] A. Erbsen, J. Philipoom, J. Gross, R. Sloan, and A. Chlipala. 2019. Simple High-Level Code for Cryptographic Arithmetic - With Proofs, Without Compromises. In 2019 IEEE Symposium on Security and Privacy. IEEE Computer Society, Los Alamitos, CA, USA.

[10] Aymeric Fromherz, Nick Giannarakis, Chris Hawblitzel, Bryan Parno, Aseem Rastogi, and Nikhil Swamy. 2019. A Verified, Efficient Embedding of a Verifiable Assembly Language. In 46th ACM SIGPLAN Symposium on Principles of Programming Languages. ACM, New York, NY, USA, 63:1–63:30.

[11] Google. 2019. BoringSSL. https://boringssl.googlesource.com/boringssl/.

[12] Carl A. Gunter. 1993. Semantics of Programming Languages: Structures and Techniques. The MIT Press, Cambridge, MA, USA.

[13] Charles Antony Richard Hoare. 1969. An axiomatic basis for computer programming. Commun. ACM 12, 10 (1969), 576–580.

[14] Jiaxiang Liu, Xiaomu Shi, Ming-Hsien Tsai, Bow-Yaw Wang, and Bo-Yin Yang. 2019. Verifying Arithmetic in Cryptographic C Programs. In 34th IEEE/ACM International Conference on Automated Software Engineering, Julia Lawall and Darko Marinov (Eds.). IEEE, San Diego, CA, USA.

[15] John C. Mitchell. 1996. Foundations for Programming Languages. The MIT Press, Cambridge, MA, USA.

[16] Magnus O. Myreen and Gregorio Curello. 2013. Proof Pearl: A Verified Bignum Implementation in x86-64 Machine Code. In Certified Programs and Proofs (LNCS), Vol. 8307. Springer, Heidelberg Dordrecht London New York, 66–81.

[17] Magnus O. Myreen and Michael J. C. Gordon. 2007. Hoare Logic for Realistically Modelled Machine Code. In International Conference on Tools and Algorithms for the Construction and Analysis of Systems (LNCS), Orna Grumberg and Michael Huth (Eds.), Vol. 4424. Springer, Heidelberg Dordrecht London New York, 568–582.

[18] Andy Polyakov, Ming-Hsien Tsai, Bow-Yaw Wang, and Bo-Yin Yang. 2018. Verifying Arithmetic Assembly Programs in Cryptographic Primitives (Invited Talk). In 29th International Conference on Concurrency Theory (LIPIcs), Sven Schewe and Lijun Zhang (Eds.), Vol. 118. Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik, Beijing, China, 4:1–4:16.

[19] The Bitcoin Developers. 2019. Bitcoin Source Code. https://github.com/bitcoin/

[20] The Ethereum Developers. 2019. Ethereum Source Code. https://github.com/ethereum/go-ethereum

[21] The LibreSSL Developers. 2019. LibreSSL. https://www.libressl.org/

[22] The Litecoin Developers. 2019. Litecoin Source Code. https://github.com/litecoin-project/litecoin

[23] The NaCl Developers. 2011. NaCl: Networking and Cryptography library. https://nacl.cr.yp.to/

[24] The OpenSSL Developers. 2019. OpenSSL. https://www.openssl.org/

[25] The Ripple Developers. 2019. Ripple Source Code. https://github.com/ripple/rippled

[26] The wolfSSL Developers. 2019. wolfSSL Source Code. https://github.com/wolfSSL/wolfssl

[27] The Zcash Developers. 2019. Zcash Source Code. https://github.com/zcash/zcash

[28] Ming-Hsien Tsai, Bow-Yaw Wang, and Bo-Yin Yang. 2017. Certified Verification of Algebraic Properties on Low-Level Mathematical Constructs in Cryptographic Programs. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, David Evans, Tal Malkin, and Dongyan Xu (Eds.). ACM, New York, NY, USA, 1973–1987.

[29] Katherine Q. Ye, Matthew Green, Naphat Sanguansin, Lennart Beringer, Adam Petcher, and Andrew W. Appel. 2017. Verified Correctness and Security of mbedTLS HMAC-DRBG. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, New York, NY, USA, 2007–2020.

[30] Jean Karim Zinzindohoué, Karthikeyan Bhargavan, Jonathan Protzenko, and Benjamin Beurdouche. 2017. HACL*: A Verified Modern Cryptographic Library. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, New York, NY, USA, 1789–1806.