### Malformed Requests and SEM Availability

Malformed requests can render a Signature Enabling Module (SEM) unavailable to legitimate users.

### SAS Signatures vs. Other Mediated or Multi-Party Signature Methods

Unlike other mediated or multi-party signature methods (such as mRSA or 2-party DSA), SAS signatures are not compatible with any other basic signature type. In other words, SAS signatures are not transparent to verifiers. Therefore, all potential verifiers must use the SAS verification method.

### Switching Between Different SEMs in SAS

Switching between different SEMs in SAS is possible but neither easy nor elegant. One approach is to have multiple SAS certificates, each for a distinct SEM. Another approach is to use an online hand-over of a SAS certificate between two SEMs. Neither solution is particularly attractive due to the difficulty of replicating a stateful server. For example, in mRSA, a user can switch among SEMs transparently because the SEM is stateless.

### State Retention in SAS

SAS involves ongoing state retention for regular users and SEMs. This burden is particularly heavy for SEMs, which must keep complete signature histories for all users served. Users can periodically offload their state, but SEMs cannot.

### Acknowledgements

We thank Dan Boneh for useful discussions, Ignacio Solis for early prototyping of the SAS library, and Yongdae Kim for comments on the draft of this paper. We also gratefully acknowledge the anonymous referees whose comments greatly improved the final version of this paper.

### References

[1] M. Myers, R. Ankney, A. Malpani, S. Galperin, and C. Adams, “RFC2560: Internet public key infrastructure online certificate status protocol - OCSP,” June 1999.

[2] N. Asokan, G. Tsudik, and M. Waidner, “Server-supported signatures,” Journal of Computer Security, vol. 5, no. 1, 1997.

[3] R. C. Merkle, “A digital signature based on a conventional encryption function,” in Advances in Cryptology – CRYPTO ’87 (C. Pomerance, ed.), no. 293 in Lecture Notes in Computer Science, (Santa Barbara, CA, USA), pp. 369–378, Springer-Verlag, Berlin Germany, Aug. 1988.

[4] D. Boneh, X. Ding, G. Tsudik, and B. Wong, “Instantaneous revocation of security capabilities,” in Proceedings of USENIX Security Symposium 2001, Aug. 2001.

[5] P. MacKenzie and M. K. Reiter, “Networked cryptographic devices resilient to capture,” in Proceedings of the 2001 IEEE Symposium on Security and Privacy, pp. 12–25, May 2001.

[6] P. MacKenzie and M. K. Reiter, “Two-party generation of DSA signatures,” in Advances in Cryptology – CRYPTO ’01 (J. Kilian, ed.), no. 2139 in Lecture Notes in Computer Science, pp. 137–154, Springer-Verlag, Berlin Germany, Aug. 2001.

[7] R. Ganesan, “Augmenting Kerberos with public-key cryptography,” in Symposium on Network and Distributed Systems Security (T. Mayfield, ed.), (San Diego, California), Internet Society, Feb. 1995.

[8] C. Boyd, “Digital multisignatures,” Cryptography and Coding, pp. 241–246, 1989.

[9] Y. Desmedt and Y. Frankel, “Threshold cryptosystems,” in Advances in Cryptology – CRYPTO ’89 (G. Brassard, ed.), no. 435 in Lecture Notes in Computer Science, (Santa Barbara, CA, USA), pp. 307–315, Springer-Verlag, Berlin Germany, Aug. 1990.

[10] O. Goldreich, “Secure multi-party computation (working draft),” 1998.

[11] B. Schneier, Applied Cryptography: Protocols, Algorithms, and Source Code in C. John Wiley & Sons, Inc, 1996.

[12] L. Lamport, “Password authentication with insecure communication,” Communications of the ACM, vol. 24, pp. 770–772, Nov. 1981.

[13] R. L. Rivest, A. Shamir, and L. M. Adleman, “A method for obtaining digital signatures and public-key cryptosystems,” Journal of the ACM, vol. 21, pp. 120–126, Feb. 1978.

[14] M. Bellare, R. Canetti, and H. Krawczyk, “Keying hash functions for message authentication,” in Advances in Cryptology – CRYPTO ’96 (N. Koblitz, ed.), no. 1109 in Lecture Notes in Computer Science, pp. 1–15, Springer-Verlag, Berlin Germany, 1996.

[15] S. Boeyen, T. Howes, and P. Richard, “RFC 2559: Internet X.509 public key infrastructure operational protocols - LDAPv2,” 1999.

[16] C. Adams, P. Cain, D. Pinkas, and R. Zuccherato, “Internet X.509 public key infrastructure time stamp protocol (TSP), draft-ietf-pkix-time-stamp-15.txt,” May 2001.

[17] S. Micali, “Enhanced certificate revocation system,” Tech. Rep. TM-542b, MIT/LCS, May 1996.

[18] “SAS plug-in web page,” available at: http://sconce.ics.uci.edu/sucses/.

[19] “Qualcomm Eudora mailer,” available at: http://www.eudora.com.

[20] R. Laboratories, “Cryptographic message syntax standard,” Public Key Cryptography Standards 7, RSA Laboratories, Redwood City, CA, USA, 1993. Available at URL: ftp://ftp.rsa.com/pub/pkcs/. 1993.

[21] R. Housley, W. Ford, W. Polk, and D. Solo, “RFC 2459: Internet X.509 public key infrastructure certificate and CRL profile,” Jan. 1999.

### Appendix A: SAS Implementation Details

#### A.1 SAS Signature Format

The well-known PKCS#7 [20] standard defines a general cryptographic message syntax for digital signatures. In it, `SignerInfo` includes an optional set of signed attributes and an optional set of unsigned attributes. This flexibility allows us to easily extend the PKCS#7 signature syntax to accommodate SAS signatures. A SAS signature can be viewed as a regular public key signature with an appended extra value, i.e., the hash pre-image.

The format changes involve new requirements for `authenticatedAttributes` and `unauthenticatedAttributes` of the `SignerInfo` field. In a SAS signature, `SignerInfo` is the same as in plain PKCS#7, except:

- **`authenticatedAttributes`**: This field is mandatory, not optional. It must contain, at a minimum, two more attributes aside from those set in PKCS#7:
  - **SAS issuer sn**: `IssuerAndSerialNumber` – specifies the SAS client’s certificate by issuer name and issuer-specific serial number.
  - **SAS signed token index**: `INTEGER` – specifies the SAS client's one-time signature index (counter).
  - **SAS signed token value**: `OCTET STRING` – specifies the SAS client's one-time public key.

- **`unauthenticatedAttributes`**: This field is mandatory, not optional. It must contain:
  - **SAS preimage token value**: `OCTET STRING` – specifies the SAS user’s one-time hash pre-image of the signed token specified in `SAS signed token value`. This attribute is unsigned and is inserted by the user when the SEM’s half-signature is received and verified.

Because of format compatibility, a SAS signature can be shipped as a normal PKCS#7 signature. However, the verification method is different. The normal PKCS#7 verification routines can only verify the SEM half-signature (i.e., RSA public key signature). The extra step in (light) verification of a SAS signature is the comparison of the `SAS preimage token value` and the hash of the `SAS signed token value`.

#### A.2 SAS Certificate

To support SAS attributes, we extended X509v3 handling [21] in the popular OpenSSL library [22]. In addition to the usual X509v3 fields, a SAS certificate also certifies the following:

- **SASHashType**: `DigestAlgorithmIdentifier` – identifies the hash algorithm used in generating the hash chain.
- **SASPublicKeyIdentifier**: `OCTET STRING` – specifies the SAS root key in the hash-chain.
- **SASPublicKeyPara**: `INTEGER` – length of the hash-chain.
- **SASServerName**: `STRING` – SEM’s host name. This field indicates the location of SEM and has no security meaning.
- **SASSerialNumber**: `INTEGER` – SEM’s certificate serial number. (Here it is assumed that the SEM and the user share the same CA.)

#### A.3 Eudora Plug-in Details

We implemented the SAS plug-in as two email translators defined in Eudora’s plug-in API [19]. Specifically, SAS signing is a Q4-Transmission translator, and SAS verification is an On-Display translator.

- **SAS signing translator**: Invoked when Eudora is ready to send an email and is fed with the entire email message, including its MIME header. When the SAS signature protocol terminates, the whole SAS signature in PKCS#7 format is appended to the email body as an attachment with the MIME subtype `x.SAS-signature`.

- **SAS verification translator**: Called when Eudora is about to display a SAS-signed email. As in traditional signature verification, a certificate chain must be at hand. Our plug-in allows users to specify the root CA certificate, assuming the SEM and the SAS client share the same certificate issuer. It is easy to build a chain by extracting the SEM and client’s certificate from the PKCS#7 signature. If the signature is invalid, an error message window is popped up while the original email body is still displayed. Since SAS signature verification is different from normal S/MIME, non-Eudora applications, like Netscape or Outlook, cannot verify it without a special verification program. We provide such a stand-alone tool.

### Appendix B: Related Work on Certificate Revocation

#### CRLs and ∆-CRLs

Certificate Revocation Lists (CRLs) are the most common way to handle certificate revocation. The Validation Authority (VA) periodically posts a signed list of all revoked certificates. These lists are placed on designated servers called CRL distribution points. Since these lists can get quite long, a VA may alternatively post a signed ∆-CRL, which only contains the list of revoked certificates since the last CRL was issued. When verifying a signature on a message, the verifier checks that, at the time the signature was issued, the signer’s certificate was not on the CRL.

#### OCSP

The Online Certificate Status Protocol (OCSP) [1] improves on CRLs by avoiding the transmission of long CRLs to every user and by providing more timely revocation information. The VA sends back a signed response indicating whether the specified certificate is currently revoked. When verifying a signature, the verifier sends an OCSP (certificate status request) query to the VA to check if the enclosed certificate is currently valid. The VA answers with a signed response indicating the certificate’s revocation status. Note that OCSP prevents one from implementing stronger semantics: it is impossible to ask an OCSP VA whether a certificate was valid at some time in the past.

#### Certiﬁcate Revocation Trees

Kocher [23] suggested an improvement over OCSP. Since the VA is a global service, it must be sufficiently replicated to handle the load of all validation queries. This means the VA’s signing key must be replicated across many servers, which is either insecure or expensive (VA servers typically use tamper-resistance to protect the VA’s signing key). Kocher’s idea is to have a single highly secure VA periodically post a signed CRL-like data structure to many insecure VA servers. Users then query these insecure VA servers. The data structure (CRT) proposed by Kocher is a hash tree where the leaves are the currently revoked certificates sorted by serial number. The root of the hash tree is signed by the VA. A user wishing to validate a certificate issues a query to the closest VA server. Any insecure VA can produce a convincing proof that the certificate is (or is not) on the CRT. If n certificates are currently revoked, the length of the proof is O(log n). In contrast, the length of the validity proof in OCSP is O(1).

#### Skip-lists and 2-3 Trees

One problem with CRTs is that, every time a certificate is revoked, the entire CRT must be recomputed and distributed in its entirety to the various VA servers. A data structure allowing for dynamic updates would solve this problem since the secure VA would only need to send small updates to the data structure along with a signature on the new root of the structure. Both 2-3 trees proposed by Naor and Nissim [24] and skip-lists proposed by Goodrich [25] are natural data structures for this purpose. Additional data structures were proposed in [26]. When a total of n certificates are already revoked and k new certificates must be revoked during the current time period, the size of the update message to the VA servers is O(k log n) (as opposed to O(n) with CRTs). The proof of certificate’s validity is O(log n), the same as with CRTs.