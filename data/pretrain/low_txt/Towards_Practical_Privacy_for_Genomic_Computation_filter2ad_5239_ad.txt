### Recall of Grid Structure and Performance Analysis

Recall that in this protocol, a grid structure is employed (refer to Section 3.5). Using Protocol 3, we successfully addressed problem instances of significant size. Here, we present measurements for a problem instance of size (200, 200). Table 1 summarizes the results for various grid sizes. The performance steadily improves up to a grid size of 20 but begins to decline slightly beyond that point.

Despite the overall decrease in performance, further increases in the grid size lead to a slight reduction in network bandwidth requirements, which in turn reduces the number of round trips. Therefore, even larger grid sizes may be suitable for environments with limited network bandwidth. With a grid size of 20, Protocol 3 requires approximately the same amount of time for an instance of size (200, 200) as Protocol 2 does for an instance of size (25, 25).

### Smith-Waterman Algorithm Performance

Figure 6 illustrates the timing measurements for the three protocols. For Protocols 1 and 3, the computation time scales with the size of the score matrix, which is \( |\Sigma|^2 \). For example, the bytes transferred over the network when aligning protein sequences using BLOSUM62 are approximately 40 times those required for simple edit distance of the same problem size. This is due to the use of additional gates in the Yao circuit, which encode each value of the score function.

### Comparison of Edit Distance Protocols

Figure 5 provides timing measurements (in minutes and seconds) comparing the edit distance Protocols 1, 2, and 3. The protocol by Atallah et al. [1] could not complete problems of size (20, 20) and (25, 25) within the 3-minute cutoff for this experiment.

Protocol 2's performance scales with the alphabet size \( |\Sigma| \). For very large alphabets with hundreds of symbols, Protocol 2 is the best choice because embedding the entire matrix into a Yao circuit becomes prohibitively expensive.

### Conclusion

We have presented several privacy-preserving protocols for computing on genomic data, including calculating the edit distance and Smith-Waterman similarity scores between genome sequences. Our implementation was evaluated on real problem instances involving the alignment of protein sequences, demonstrating that its performance is manageable even for substantial problem sizes. These techniques can be generalized to other dynamic programming algorithms and are expected to find applications in other contexts, such as hierarchical clustering algorithms that use edit distance as a metric.

Our protocols represent an initial step towards practical methods for achieving privacy in genomic computation. In our solutions, cryptographic security comes at a significant cost in terms of computation and communication. Developing more efficient, yet provably secure, techniques for collaborative computation on genome sequences remains an important challenge for future research.

### References

[1] M. Atallah, F. Kerschbaum, and W. Du. Secure and private sequence comparisons. In WPES, 2003.
[2] A. Bateman, E. Birney, L. Cerruti, R. Durbin, L. Etwiller, S. R. Eddy, S. Griffiths-Jones, K. L. Howe, M. Marshall, and E. L. Sonnhammer. The Pfam protein families database. Nucleic Acids Res, 30(1):276–280, January 2002.
[3] J. Brickell, D. Porter, V. Shmatikov, and E. Witchel. Privacy-preserving remote diagnostics. In CCS, 2007.
[4] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein. Introduction to Algorithms. MIT Press and McGraw-Hill, 2001.
[5] L. Cranor, M. Langheinrich, M. Marchiori, M. Presler-Marshall, and J. Reagle. The Platform for Privacy Preferences 1.0 (P3P1.0) Specification. W3C Recommendation, 16 April 2002.
[6] L. F. Cranor. Internet privacy. Communications of the ACM, 42(2):28–38, 1999.
[7] S. R. Eddy. Where did the BLOSUM62 alignment score matrix come from? Nat Biotechnol, 22(8):1035–1036, August 2004.
[8] M. Fedoruk. Mapping the Icelandic genome. http://www.scq.ubc.ca/?p=381, 2003.
[9] J. Feigenbaum, B. Pinkas, R. Ryger, and F. Saint-Jean. Secure computation of surveys. In EU Workshop on Secure Multiparty Protocols, 2004.
[10] M. Freedman, K. Nissim, and B. Pinkas. Efficient private matching and set intersection. In EUROCRYPT, 2004.
[11] Genomic Privacy Project. http://privacy.cs.cmu.edu/dataprivacy/projects/genetic/, 2004.
[12] I. Goldberg, D. Wagner, and E. Brewer. Privacy-enhancing technologies for the Internet. In COMPCON, 1997.
[13] O. Goldreich. Foundations of Cryptography: Volume II Basic Applications. Cambridge University Press, 2004.
[14] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game. In STOC, 1987.
[15] D. Gusfield. Algorithms on Strings, Trees, and Sequences. Cambridge University Press, 1997.
[16] HapMap. International HapMap project. http://
[17] S. Jarecki and V. Shmatikov. Efficient two-party secure computation on committed inputs. In EUROCRYPT, 2007.
[18] K. Kurosawa and W. Ogata. Bit-slice auction circuit. In ESORICS, 2002.
[19] H.-Y. Lin and W.-G. Tzeng. An efficient solution to the millionaires’ problem based on homomorphic encryption. In ACNS, 2005.
[20] Y. Lindell and B. Pinkas. Privacy preserving data mining. Journal of Cryptology, 15(3), 2002.
[21] Y. Lindell and B. Pinkas. A proof of Yao’s protocol for secure two-party computation. http://eprint.iacr.org/2004/175, 2004.
[22] M. Naor and B. Pinkas. Efficient oblivious transfer protocols. In SODA, 2001.