### Introduction to Malware and Vulnerability Analysis in Industrial Control Systems

Govil et al. [10] present a series of malware for Programmable Logic Controllers (PLCs) written in IEC61131-3 ladder logic, designed to conceal the malicious code from human analysis. McLaughlin [16, 17] developed an automated system to analyze compromised targets and dynamically generate malicious PLC programs. Klick et al. [13] demonstrated how network programming features in PLC languages can be misused to create a network proxy, enabling lateral movement by leveraging the primitives exposed by these languages. Unlike these works, which primarily focus on the abuse of PLC programming languages, our research addresses the specific challenges posed by robot-specific industrial languages and how robotics programs developed in such languages can be analyzed for vulnerabilities and potential abuses.

### Taint Analysis and Dataflow Analysis

The use of static program-analysis techniques to identify vulnerabilities is a well-studied field. In particular, we employ dataflow analysis, a robust technique that originated in the 1970s [12] and has been widely applied to various security problems, such as automatically finding vulnerabilities in web applications [11], detecting privacy leaks in mobile applications [8], and identifying mobile ransomware [4]. General-purpose programming languages benefit from advanced data-flow analysis tools like FlowDroid for Android [5] and Phasar for C/C++ applications [23]. A recent, notable example is Joern [27], which generates a property graph stored in a graph-oriented database, facilitating efficient mining of sensitive patterns that may lead to vulnerabilities.

### Program Analysis for Industrial Languages

Analysis tools for Industrial Control System (ICS) logic have primarily been developed for quality assurance or to extract safety-related properties. Cortesi et al. [7] focus on program verification for robotic software, providing an overview of various static analysis techniques, including model checking and data flow analysis. Zhang et al. [28] analyze the logic of PLCs and FANUC robot code to extract invariants for software testing, specifically focusing on the points of interaction between IRPL code and PLCs to identify safety-critical conditions. Our approach, however, aims to characterize the entire dataflow of a task program to find insecure patterns. Similar to our tool, Mandal et al. [14, 15] use static code analysis techniques, including dataflow analysis on the Control Flow Graph (CFG), to analyze task programs in a multi-language fashion (including ABB RAPID and IEC 61131-3 PLC languages). However, their focus is on checking conformance to coding standards and detecting common programming mistakes (e.g., infinite loops, division by zero) that can result in safety violations or generic faults, without considering resource access, which is crucial for security.

In summary, none of the related work considers the security risks associated with the fact that (1) task programs are no longer isolated, (2) they include powerful, security-sensitive primitives that offer connectivity between robots and the outside world, and (3) they lack resource isolation. To the best of our knowledge, we are the first to apply security-oriented static program-analysis techniques to Industrial Robot Programming Languages (IRPLs) and successfully detect vulnerabilities in real-world robotics programs.

### Conclusion

In this paper, we investigated the potential security risks introduced by robotic programs developed in IRPLs. We analyzed the languages of eight leading industrial vendors, highlighting the presence of sensitive primitives that can be misused or lead to vulnerabilities, and provided concrete examples. We also introduced a prototype source code static analyzer. Using this analyzer, we demonstrated that unsafe patterns exist in publicly available programs to varying extents and proposed the tool for analyzing and vetting task programs (e.g., before commissioning or distribution). Future work will extend the capabilities of our analyzer in two key areas: supporting other programming languages, possibly beyond the scope of robotics, such as those used for Computer Numerical Control (CNC) machines, and introducing context-sensitive data flow analysis to support additional features offered by IRPLs, such as interrupt-driven control flow.

### Acknowledgments

The authors would like to thank Martino Vittone for his contributions to an early prototype of the analyzer. This research was partially funded by a research grant from Politecnico di Milano, received from Trend Micro Inc., and also received funding from the European Union’s Horizon 2020 research and innovation program under the Marie Skłodowska-Curie grant agreement No.: 690972.

### References

[1] ABB. 2010. Technical reference manual. RAPID Instructions, Functions, and Data types.
[2] ABB. 2019. RobotStudio Apps. https://robotapps.robotstudio.com
[3] Tanya M. Anandan. 2019. ROS-Industrial for Real-World Solutions. https://www.robotics.org/content-detail.cfm/Industrial-Robotics-Industry-Insights/ROS-Industrial-for-Real-World-Solutions/content_id/7919
[4] Nicoló Andronio, Stefano Zanero, and Federico Maggi. 2015. Heldroid: Dissecting and detecting mobile ransomware. In International Symposium on Recent Advances in Intrusion Detection. Springer, Cham, 382–404.
[5] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014. FlowDroid: Precise Context, Flow, Field, Object-Sensitive and Lifecycle-Aware Taint Analysis for Android Apps. In Proc. 35th ACM SIGPLAN Conference on Programming Language Design and Implementation (Edinburgh, United Kingdom) (PLDI ’14). Association for Computing Machinery, New York, NY, USA, 259–269. https://doi.org/10.1145/2594291.2594299
[6] Geoffrey Biggs and Bruce MacDonald. 2003. A survey of robot programming systems. In Proc. Australasian conference on robotics and automation. 1–3.
[7] Agostino Cortesi, Pietro Ferrara, and Nabendu Chaki. 2013. Static analysis techniques for robotics software verification. In IEEE ISR 2013. IEEE, Seoul, 1–6.
[8] Manuel Egele, Christopher Kruegel, Engin Kirda, and Giovanni Vigna. 2011. PiOS: Detecting Privacy Leaks in iOS Applications. In NDSS. 177–183.
[9] Sam Francis. 2016. Universal Robots launches app store and developer program. https://roboticsandautomationnews.com/2016/06/21/universal-robots-launches-app-store-and-developer-program/5856/
[10] Naman Govil, Anand Agrawal, and Nils Ole Tippenhauer. 2017. On ladder logic bombs in industrial control systems. In Computer Security. Springer, 110–126.
[11] Nenad Jovanovic, Christopher Kruegel, and Engin Kirda. 2006. Pixy: A static analysis tool for detecting web application vulnerabilities. In 2006 IEEE Symposium on Security and Privacy (S&P’06). IEEE, 6–pp.
[12] Gary A. Kildall. 1973. A Unified Approach to Global Program Optimization. In Proc. 1st Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages (Boston, Massachusetts) (POPL ’73). ACM, New York, NY, USA, 194–206. https://doi.org/10.1145/512927.512945
[13] Johannes Klick, Stephan Lau, Daniel Marzin, Jan-Ole Malchow, and Volker Roth. 2015. Internet-facing PLCs—a new back orifice. Blackhat USA (2015), 22–26.
[14] Avijit Mandal, Raoul Jetley, Meenakshi D’Souza, and Sreeja Nair. 2017. A static analyzer for Industrial robotic applications. In 2017 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW). IEEE, 24–27.
[15] Avijit Mandal, Devina Mohan, Raoul Jetley, Sreeja Nair, and Meenakshi D’Souza. 2018. A generic static analysis framework for domain-specific languages. In 2018 IEEE 23rd Intl. Conf. on Emerging Technologies and Factory Automation (ETFA), Vol. 1. IEEE, 27–34.
[16] Stephen McLaughlin. 2011. On Dynamic Malware Payloads Aimed at Programmable Logic Controllers. In Proc. 6th USENIX Conference on Hot Topics in Security (San Francisco, CA) (HotSec’11). USENIX Association, Berkeley, CA, USA, 10–10. http://dl.acm.org/citation.cfm?id=2028040.2028050
[17] Stephen McLaughlin and Patrick McDaniel. 2012. SABOT: Specification-based payload generation for programmable logic controllers. In Proc. 2012 ACM conference on Computer and communications security. ACM, 439–449.
[18] Marcello Pogliani, Davide Quarta, Mario Polino, Martino Vittone, Federico Maggi, and Stefano Zanero. 2019. Security of controlled manufacturing systems in the connected factory: the case of industrial robots. Journal of Computer Virology and Hacking Techniques 15, 3 (01 Sep 2019), 161–175. https://doi.org/10.1007/s11416-019-00329-8
[19] Davide Quarta, Marcello Pogliani, Mario Polino, Federico Maggi, Andrea Maria Zanchettin, and Stefano Zanero. 2017. An Experimental Security Analysis of an Industrial Robot Controller. In 2017 IEEE Symposium on Security and Privacy (SP). 268–286. https://doi.org/10.1109/SP.2017.20
[20] Market Research Reports. 2019. World’s Top 10 Industrial Robot Manufacturers. https://www.marketresearchreports.com/blog/2019/05/08/world%E2%80%99s-top-10-industrial-robot-manufacturers
[21] Thomas Reps, Susan Horwitz, and Mooly Sagiv. 1995. Precise interprocedural dataflow analysis via graph reachability. In Proc. 22nd ACM SIGPLAN-SIGACT symposium on Principles of programming languages. ACM, 49–61.
[22] RobotShop. 2019. RobotShop App Store. https://www.robotshop.com/en/robot-app-store.html
[23] Philipp Dominik Schubert, Ben Hermann, and Eric Bodden. 2019. PhASAR: An Inter-procedural Static Analysis Framework for C/C++. In Intl. Conf. on Tools and Algorithms for the Construction and Analysis of Systems. Springer, 393–410.
[24] Joseph Slowik. 2019. Evolution of ICS Attacks and the Prospects for Future Disruptive Events. https://dragos.com/wp-content/uploads/Evolution-of-ICS-Attacks-and-the-Prospects-for-Future-Disruptive-Events-Joseph-Slowik-1.pdf
[25] Universal Robots Support. [n.d.]. XML-RPC communication - 16326. https://www.universal-robots.com/how-tos-and-faqs/how-to/ur-how-tos/xml-rpc-communication-16326/
[26] Tommi Unruh, Bhargava Shastry, Malte Skoruppa, Federico Maggi, Konrad Rieck, Jean-Pierre Seifert, and Fabian Yamaguchi. 2017. Leveraging Flawed Tutorials for Seeding Large-Scale Web Vulnerability Discovery. In 11th USENIX Workshop on Offensive Technologies (WOOT 17). USENIX Association, Vancouver, BC.
[27] Fabian Yamaguchi, Nico Golde, Daniel Arp, and Konrad Rieck. 2014. Modeling and discovering vulnerabilities with code property graphs. In 2014 IEEE Symposium on Security and Privacy. IEEE, 590–604.
[28] Mu Zhang, James Moyne, Z Morley Mao, Chien-Ying Chen, Bin-Chou Kao, Yassine Qamsane, Yuru Shao, Yikai Lin, Elaine Shi, Sibin Mohan, et al. 2019. Towards Automated Safety Vetting of PLC Code in Real-World Plants. In Towards Automated Safety Vetting of PLC Code in Real-World Plants. IEEE, 0.

### Appendix: Example Task Programs

This appendix provides excerpts from two vulnerable programs. Both programs allow commanding the robot's movement from the network, thus presenting a "network → movement" vulnerability class.

```plaintext
MODULE GBS (SYSMODULE)
! -- network adapter: https://git.cs.lth.se/mathias/GBS_Robotstudio/
VAR socketdev server_socket;
VAR socketdev client_socket;
VAR num IN_CMD_ID;
! ...
VAR intnum intnumNailer;
VAR intnum intSensorYOK;
VAR intnum intSensorXOK;
!...
; ROS-I KUKA adapter: https://github.com/ros-industrial/kuka_experimental
def kuka_eki_hw_interface() ; main function
decl axis joint_pos_tgt
decl int elements_read
bas(#initmov, 0)
eki_hw_iface_init()
joint_pos_tgt = $axis_act_meas
ptp joint_pos_tgt
$advance = 5
loop ; main loop
elements_read = eki_hw_iface_get(joint_pos_tgt)
ptp joint_pos_tgt c_ptp
endloop
end
PROC GBSReadCommand() ! read command from network
def eki_hw_iface_init() ; initialize network interface
VAR num counter := 1;
IN_PARAMS_NUM := readNumberFromSocket();
IN_CMD_ID := readNumberFromSocket();
WHILE counter <= IN_PARAMS_NUM DO
IN_PARAMS{counter} := readNumberFromSocket();
counter := counter + 1;
ENDWHILE
!set the command status to error and no params
OUT_STATUS := STATUS_OK;
OUT_PARAMS_NUM := 0;
ENDPROC
decl eki_status eki_ret
global interrupt decl 15 when
$flag[1]==false do eki_hw_iface_reset()
interrupt on 15
global interrupt decl 16
when $timer_flag[1]==true do eki_hw_iface_send()
interrupt on 16
wait sec 0.012
$timer[1] = -200
$timer_stop[1] = false
eki_ret = eki_init("EkiHwInterface")
eki_ret = eki_open("EkiHwInterface")
PROC GBSExecCommand() ! execute movement command
end
TEST IN_CMD_ID
CASE CMD_READ_PTP: READ_PTP;
CASE CMD_MOVE_PTP: ! ...
ENDTEST
OUT_STATUS := STATUS_OK;
ENDPROC
! ...
PROC rRunGBS() ! main loop
WHILE TRUE DO
TEST GBS_STATUS
CASE 0:
IF (GBSNeedConnection()) THEN
GBSConnectSocket;
ENDIF
! ...
CASE 1:
GBS_STATUS := 2;
GBSExecCommand;
GBSDisconnectSocket;
! ...
! ...
DEFAULT:
ENDTEST
ENDWHILE
ERROR
GBS_STATUS:=0;
GBSDisconnectSocket;
ENDPROC
FUNC num readNumberFromSocket() ! parse number from raw socket
VAR num nval;
VAR rawbytes raw_data;
SocketReceive client_socket \RawData :=
raw_data
ReadNoOfBytes:=4\Time:=WAIT_MAX;
UnpackRawBytes raw_data \Network, 1, nval \Float4;
return nval;
! ...
ENDFUNC
PROC writeNumberToSocket(num nval) ! write number to raw socket
! ...
ENDPROC
! ...
ENDMODULE
def eki_hw_iface_send() ; write data to network socket
decl eki_status eki_ret
decl real vel_percent
if $flag[1] then
eki_ret = eki_setreal(
"EkiHwInterface",
"RobotState/Pos/@A1",
$axis_act_meas.a1)
eki_ret = eki_setreal(
"EkiHwInterface",
"RobotState/Pos/@A2",
$axis_act_meas.a2)
; ...
if $flag[1] then
eki_ret = eki_send(
"EkiHwInterface",
"RobotState")
endif
endif
; ...
end
deffct int eki_hw_iface_available() ; check if there is data form network
decl eki_status eki_ret
; ...
eki_ret = eki_checkbuffer(
"EkiHwInterface", "RobotCommand/Pos/@A1")
return eki_ret.buff
endfct
deffct int eki_hw_iface_get(joint_pos_cmd :out) ; read data from network
decl eki_status eki_ret
decl axis joint_pos_cmd
;...
eki_ret = eki_checkbuffer(
"EkiHwInterface", "RobotCommand/Pos/@A1")
if eki_ret.buff <= 0 then
return 0
endif
; ...
return 1
endfct
```

This concludes the optimized version of your text. If you need further adjustments or have any specific requirements, please let me know.