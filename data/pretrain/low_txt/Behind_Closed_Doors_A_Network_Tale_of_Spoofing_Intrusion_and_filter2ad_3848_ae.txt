We enabled Windows DNS on various versions of Windows Server, including 2003, 2003 R2, 2008, 2008 R2, 2012, 2012 R2, 2016, and 2019. Each DNS server was configured to handle recursive queries, and we issued 10,000 queries with unique query names to each server. We then observed the source ports associated with the queries leaving each server instance for the authoritative DNS server, which was also in our lab.

### Observations

- **Linux Kernel Versions**: All Linux kernel versions selected source ports randomly from a contiguous set of values ranging from 32768 to 61000, providing a pool of 28,232 ports.
- **FreeBSD**: All versions of FreeBSD consistently used the ephemeral port range designated by the Internet Assigned Numbers Authority (IANA), which spans from 49152 to 65535, providing a pool of 16,383 ports.
- **Windows DNS (2008 R2 and Later)**: These versions consistently allocated ports from a pool of 2,500 ports, always within the IANA range, but with three caveats:
  - The start and end values of the pool were determined at server startup and thus varied across running instances.
  - The pool consisted of a contiguous set of ports, except if the pool started in the highest 2,499 ports of the IANA range, it would wrap to the bottom of the IANA range.
  - We observed that BIND 9.11 installed on Windows Server (post 2008) selects from the full range of unprivileged ports (i.e., 1024–65535).

### Additional Analysis Points

- Only operating systems that allocated ephemeral source ports randomly could be applied to our model. Therefore, Windows DNS 2003, 2003 R2, and 2008, which used a single source port, were excluded from our analysis.
- There is a significant discrepancy between the size of the ephemeral port pool used by BIND 9.11 (64,511) and that used by Windows DNS (2,500) when each is installed on Windows Server. This allows us to uniquely identify Windows Server when it is running Windows DNS software.

### Simulation and Range Calculation

To simulate the 10 follow-up queries used to calculate the source port range for the Internet resolvers, we divided the 10,000 queries from each DNS resolver implementation into samples of size 10. We then calculated the range of the source ports for each sample, yielding 1,000 sample ranges for each DNS software. However, for Windows systems, special consideration was needed. If the pool appropriated by a running Windows DNS server instance "wrapped" around the maximum value and was split across the high and low values of the IANA range, the 10 ports in a sample could be divided among the two non-contiguous parts of the pool, leading to a computed range nearly 14,000 higher than expected.

### Adjustment Algorithm for Windows DNS Ports

We applied the following algorithm to adjust the ports from Windows DNS to make the range comparable:

- Let \( s = 2500 \) represent the size of the Windows DNS port pool.
- Let \( i_{\text{min}} = 49152 \) and \( i_{\text{max}} = 65535 \) represent the minimum and maximum port values in the IANA pool, respectively.
- Let \( R_{\text{low}} = [i_{\text{min}}, i_{\text{min}} + s - 1) \) and \( R_{\text{high}} = (i_{\text{max}} - (s - 1), i_{\text{max}}] \) represent the low and high wrap regions of the IANA range.
- Let \( P_n \) represent the set of source ports observed from resolver \( r \).

An adjustment was made to the ports in \( P_n \) if:
1. All ports in \( P_n \) were either in \( R_{\text{low}} \) or \( R_{\text{high}} \).
2. At least one port in \( P_n \) was in \( R_{\text{low}} \).
3. At least one port in \( P_n \) was in \( R_{\text{high}} \).

If all these conditions hold, then for all ports in \( P_n \) that were also in \( R_{\text{low}} \), the port value was increased by \( i_{\text{max}} - i_{\text{min}} \). This adjustment effectively treated ports split across a high range and a low range as if the range were contiguous.

### Histogram and Beta Distribution Curves

Figure 3a shows a histogram of the ranges observed for the 10-query samples from our controlled experiment. In addition to the samples from the three OSes, we included the results of a DNS server configuration where ports were selected from a pool spanning 1023 through 65535, labeled "Full Port Range." The Beta distribution curves corresponding to the pool size for each OS overlay the histogram, demonstrating the match between theoretical and empirical results. Each curve was shifted by the minimum observed range from a given pool and scaled by the difference between the maximum and minimum observed ranges from that pool.

### Classification Accuracy

Each row in Table 4 shows a low and high value for the source port range, with three ranges labeled with an OS. The port range cutoff between FreeBSD and Linux (16,331) was optimized to minimize classification error, such that only 0.05% of FreeBSD and 3.5% of Linux systems would be misclassified. Similarly, the port range cutoff between Linux and "Full Port Range" (28,222) was optimized to ensure only 0.35% of those collective systems would be misclassified. All other range cutoffs were selected to achieve 99.9% classification accuracy.

### Application to Follow-Up Queries

We applied the port range cutoffs from our model to the port ranges observed in connection with our follow-up queries. We adjusted the port values for resolvers identified as Windows according to the previously described algorithm. The resulting histogram is shown in Figure 3b, with the Beta distribution curves overlaying the empirical results. The trends in range are clearly identifiable as peaks in the histogram, similar to the results of the controlled experiment (Figure 3a).

### Summary of Reachable IP Targets

Table 4 shows the number of DNS resolvers at target IP addresses that fall between the source port range cutoffs associated with each OS. Using this breakdown, 13,692 (4.6%) were identified as having an ephemeral source port range matching that of Windows Server. While p0f was unable to classify a large fraction of DNS resolvers, it provided additional confidence in our identification of Windows systems. Of the resolvers identified by source port range as Windows, 12,118 (89%) were also identified by p0f as Windows. Port ranges matching pool sizes for Linux and FreeBSD accounted for 89,495 (30%) and 11,462 (3.8%) of resolvers, respectively.

### Open Resolvers and Security Posture

Table 4 shows that nearly half of the resolvers with a source port range of 0 were open—exploitable even without spoofing! However, considering the 1,802 ASes affected by vulnerable resolver configurations, 1,708 (95%) included at least one closed resolver. For these networks, the lack of DSAV exposes the vulnerability of an otherwise unreachable system.

Remarkably, the largest concentration of open resolvers were categorized as Windows OS, both by source port range and p0f. In fact, out of the 13,692 resolvers identified as Windows systems by source port range, 12,179 (89%) were open and just 1,513 (11%) were closed. The exact cause of this high correlation is unclear, but we noted that the default configuration for Windows DNS 2012, 2016, and 2019 was "open." Additionally, the occurrence is not isolated; Windows systems (by source port range) running open resolvers were found in 3,063 ASes—5.0% of all those tested.

### Full Port Range

While the "Full Port Range" category of resolvers exhibits the best security posture in terms of randomness, it leaves a void in our analysis. Possible explanations include:
1. Operating systems other than those examined in this work.
2. DNS software that uses a pool of ephemeral ports other than the OS defaults.

### DNS Software-Specific Behavior

To further examine DNS software-specific behavior with respect to source port allocation, we installed the following DNS resolver implementations on our instance of Ubuntu 19.10: BIND versions 9.5.0, 9.5.2, 9.6.3, 9.7.7, 9.8.8, 9.9.13, 9.10.8, 9.11.16, 9.12.4, 9.13.7, 9.14.11, 9.15.8, and 9.16.0 (the latest release for each major version); Knot Resolver version 3.2.1; Unbound version 1.9.0; and PowerDNS Recursor version 4.2.0. We issued 10,000 recursive DNS queries to each software installation and examined the source ports used. There were three general trends:
1. Random selection from the default pool designated by the OS.
2. Random selection from the full range of unprivileged ports (i.e., 1024 - 65535).
3. Use of a single source port or random selection from a small set of source ports.

The full breakdown is summarized in Table 5. If we relate these empirical findings back to our analysis of reachable resolvers, the "Full Port Range" part of the histograms in Figure 3b might be any of the DNS resolver implementations that use the maximum source port range, like BIND 9.5.2. We cannot empirically narrow down software version or OS more succinctly when the full range of unprivileged ports is observed.

### Forwarding

Further surveillance of an internal system allows us to trivially determine if it issues queries to DNS authoritative servers directly or forwards its queries to upstream DNS resolvers. This might add value to an adversary if the upstream networks are vulnerable. We made this assessment by comparing the source IP address (i.e., the client) querying our authoritative DNS servers against the target IP address embedded in the query name. Because the DNS zone associated with the query names used in our experiment was dual-stack, we relied on the IPv4- and IPv6-only queries (Section 3.5) to make this comparison.

Of the 506,822 IPv4 and 47,978 IPv6 resolvers that resolved our follow-up queries, 269,509 (53%) of IPv4 and 40,631 (85%) of IPv6 addresses queried our authoritative servers directly; 240,491 (47%) of IPv4 targets and 7,566 (16%) of IPv6 targets forwarded our queries to a different address. We note that 3,178 IPv4 and 219 IPv6 targets were found to be in both categories—that is, they forwarded at least one query and issued at least one query directly.

### Local System Infiltration

In addition to the knowledge we gained regarding the lack of DSAV at networks, we learned something about internal systems (and their OSes) that were similarly vulnerable. Two of the spoofed sources used in our experiment were sources that should never originate from outside the system that receives them: destination-as-source and loopback (see Section 3.3). Considering IPv4 and IPv6 collectively, 123,592 IP targets were reached by destination-as-source queries, and 107 were reached by loopback queries (see Table 3). Using the OS instances and DNS server installations used in Section 5.3, we tested whether these spoofed-source queries reached the DNS service running in user space. Our findings are summarized in Table 6.

Destination-as-source packets were accepted universally by all OSes! For Linux-based OSes, only the IPv6 variant was accepted.