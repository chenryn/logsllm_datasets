### A. Fault Propagation in TTP/C

In the two scenarios described, an error in a faulty node (Node B) causes the non-faulty node (Node A) to terminate its operation. This violates the fault hypothesis of the TTP/C protocol. The development of the acknowledgment algorithm was a flawed design decision, as it allows a single-bit flip (a type of fault that should be tolerated by TTP/C in both bus and star configurations) to propagate.

In general, no design decisions in the TTP/C protocol should allow the operation of a correct node to depend on information from a single node, whether faulty or not, if the goal is to ensure the system's operation remains unaffected by a faulty node. This principle applies not only to TTP/C but to all fault-tolerant systems aiming to tolerate single-node faults.

### Detailed Analysis of Experiments

A detailed analysis of the experiments revealed that the described scenario occurred in the bus topology, but the monitoring system in the bus configuration failed to detect it. Monitoring tasks are handled by the host controller of each node, relying on error interrupts triggered by the communication controller to monitor state changes. In this error propagation scenario, the node with the faulty node (under test) as a successor terminates its operation without generating any error interrupt, as it was not correctly implemented. Thus, this case went undetected during the SWIFI experiments in the bus topology. The error propagation was later detected using a special monitoring node connected to the central guardian, which records all state transitions and frame statuses of all nodes in each slot.

Moreover, the SWIFI experiments presented in this paper demonstrate that SWFI is an effective technique for both validation and verification purposes.

### 6.3 TTA Star Validation with Heavy-Ion Fault Injection

The same TTA cluster configuration using a star topology, as used in the SWIFI experiments, was subjected to heavy-ion radiation. Experiments were conducted on a regular node. Upon self-detection of an error, the node under test performs a software reset, reintegrates, and continues operation. If the node starts consuming more current than specified due to a single event latch-up, the power supply unit disconnects the node. These experiments can be destructive to the target system, with one latch-up observed in every 6 to 10 errors.

In this series of experiments, three cases of error propagation were observed (Table 4). The log files from the monitoring system showed that the experiment scenarios were similar to those described in Section 6.2. Since the location of the fault injection cannot be precisely determined, the exact cause of the error propagation could not be identified. However, the number of error propagations in the star topology was significantly lower compared to the bus topology, with no SOS, reintegration, or babbling idiot failures observed.

**Table 4: Heavy-Ion Experiments in the Star Topology**

| Number of Exp. | SOS | Reintegration | Asymmetric | Babbling Idiot |
|----------------|-----|---------------|-------------|-----------------|
| 9800           | 0   | 0.00%         | 3           | 0.03%           | 0   | 0.00%         |

### 6.4 Experiments with Modified TTP/C Protocol

The TTP/C-C1 protocol code was modified such that when a node is acknowledged in only one channel, it acts as if the transmission was acknowledged (self-confidence). This modification, aimed at avoiding the error propagation scenario described in Section 6.2, does not affect the properties of the TTP/C protocol. The SWIFI experiments from the previous campaign (Section 6.1) were repeated. As shown in Table 5, no error propagation was observed during the execution of these experiments.

**Table 5: SWIFI Experiment Results with Star Topology**

| Target Unit | Experiments | Error Propagations | SOS | Reintegration | Asymmetric | Babbling Idiot |
|-------------|-------------|--------------------|-----|---------------|-------------|-----------------|
| TTP/C-C1    | HW Registers | 34,000             | Instruction Memory | 507,744      | 0             | 0               | 0               | 0               |

Since the error propagations observed in the heavy-ion experiments are related to the topology, the experiments with heavy ions were repeated with an increased number of trials to reach a certain level of confidence. As shown in Table 6, no error propagation was observed during the execution of the heavy-ion experiments. In the bus topology, an arbitrary node failure causes error propagation, but in the star configuration, arbitrary node failures are isolated (or corrected—SOS cases) by the central bus guardian. Therefore, extending the fault hypothesis of the TTA to tolerate arbitrary failures in a star topology is justified.

**Table 6: Heavy-Ion Experiments in the Star Topology**

| Number of Exp. | SOS | Reintegration | Asymmetric | Babbling Idiot |
|----------------|-----|---------------|-------------|-----------------|
| 26,600         | 0   | 0.00%         | 0           | 0.00%           | 0   | 0.00%         |

### Conclusion

Fault injection experiments have shown that error propagations caused by message failures in time-triggered systems can be avoided by implementing error detection mechanisms in a separate FCR from the message sender. The design error in the TTP/C microcode, detected by SWIFI experiments, confirms that this claim is valid only if the principle of self-confidence is considered during system design.

Experiments were performed in a regular node of the TTA system with a star topology, not in the star nodes. Since the star nodes are replicated, a fault in one star node is assumed not to affect the operation of the second star node, maintaining communication among normal nodes. This assumption needs to be validated through fault injection, which is part of future work.

### 7. Final Remarks

In the TTA system with a bus topology and the TTP/C-C1 version of the communication controller, the sender and timing failure detector subsystems are not clearly separated into two FCRs. They share the same clock synchronization algorithm, power supply, and silicon die, allowing a single fault to affect both subsystems. This led to several cases of error propagation during software injection experiments. Despite this, the TTP/C error detection mechanisms detected the errors, and the system took recovery actions via restart.

In the configuration with a central guardian, which performs signal reshaping in the time and value domains, the sender subsystem and the timing failure detector are in separate FCRs. This resolves the error propagation issues observed in the bus topology. A prototype FPGA implementation of the central guardian is being validated using heavy-ion and software-implemented fault injection experiments. Results show that the assumptions about the fault isolation capabilities of the central guardian are justified. No error propagation was observed in a TTA system with a star topology, indicating that a star topology is a highly feasible solution for high dependability requirements.

Additionally, a design error in the TTP/C protocol microcode for the TTP/C-C1 version of the communication controller was detected and corrected. From this case, a design rule is defined: the operation of a correct computer node in a distributed fault-tolerant system should not depend on information received from only one node if the goal is to guarantee that the system's operation should not be affected by an arbitrarily faulty node. To avoid error propagation in distributed fault-tolerant systems, the message sender unit and the error detection mechanism unit must be implemented in separate FCRs. Fault injection experiments confirm this, provided the design rule is followed.

### 8. Acknowledgments

This paper is partly supported by the EU IST projects FIT and Next TTA. The authors would like to thank Mattias Persson for supervising the heavy-ion fault injection experiments and Prof. Hermann Kopetz for his valuable comments on earlier versions of this paper.

### 9. References

[1] A. Ademaj, “Slightly-Off-Specification Failures in the IEEE Time-Triggered Architecture,” Seventh Annual International Workshop on High-Level Design Validation and Test (HLDVT’02), Cannes, France, October 2002.

[2] A. Ademaj, “Assessment of Error Detection Mechanisms of the Time-Triggered Architecture Using Software Implemented Fault Injection,” Fourth European Dependable Computing Conference (EDCC-4), Toulouse, France, October 2002.

[3] G. Bauer, H. Kopetz, and W. Steiner, “The Central Guardian Approach to Enforce Fault Isolation in the Time-Triggered Architecture,” Proceedings of the 6th International Symposium on Autonomous Decentralized Systems, Pisa, Italy, April 2003.

[4] G. Bauer, H. Kopetz, and P. Puschner, “Assumption Coverage under Different Failure Modes in the Time-Triggered Architecture,” Proceedings of the 7th IEEE International Conference on Emerging Technologies and Factory Automation, Antibes – Juan les Pins, France, October 2001.

[5] C. Constatinescu, “Impact of Deep Submicron Technology on Dependability of VLSI Circuits,” Proceedings of the International Conference of Dependable Systems and Networks (DSN02), Washington D.C., USA, June 2002.

[6] FIT official web page: http://www.cti.ac.at/fit, 2002.

[7] L.M. Kaufmann, S. Bhide, and B.W. Johnson, “Modeling of Common-Mode Failures in Digital Embedded Systems,” Proceedings of the Reliability and Maintainability Symposium 2000, Los Angeles, USA.

[8] H. Kopetz, G. Bauer, and S. Poledna, “Tolerating Arbitrary Node Failures in the Time-Triggered Architecture,” Document number 2001-01-0677, SAE 2001 World Congress, Detroit, MI, March 2001.

[9] H. Kopetz, “The Time-Triggered Architecture,” Proceedings of the First International Symposium on Object-Oriented Real-Time Distributed Computing (ISORC 98), Kyoto, Japan, April 1998, pp. 22-29.

[10] H. Kopetz et al., TTP/C Protocol, TTTech Computertechnik AG, 1999. http://www.Ttpforum.org.

[11] H. Kopetz, “Fault Containment and Error Detection in TTP/C and FlexRay,” Technical Report 39/2002, Vienna University of Technology, Real-Time System Group. www.vmars.tuwien.ac.at.

[12] L. Lamport, R. Shostak, and M. Pease, “The Byzantine Generals Problem,” ACM Transactions on Programming Languages and Systems, vol. 4, issue 3, pp. 382-401, 1982.

[13] T. Ringler and J. Steiner, “Increasing System Safety for by-wire Applications in Vehicles by using a Time Triggered Architecture,” SAFECOMP, 17th Int. Conf. on Computer Safety, Reliability and Security, 1998.

[14] J. Rushby, “Systematic Formal Verification for Fault-Tolerant Time-Triggered Algorithms,” IEEE Transactions on Software Engineering, 25(5), pp. 651-660, September 1999.

[15] Austria Micro Systems (AMS), TTP/C-C1 Communication Controller Data Sheet, Available at http://www.tttech.com.

[16] H. Sivencrona, P. Johannessen, and J. Torin, “Protocol Membership Agreement in Distributed Communication System—A Question of Brittleness,” (2002-01-0108), SAE World Congress, Cobo Center, Detroit, Michigan, USA, March 2003.

[17] C. Temple, “Avoiding the Babbling-Idiot Failure in a Time-Triggered Communication System,” Proceedings of the 28th Annual International Symposium on Fault-Tolerant Computing (FTCS-28), June 1998.