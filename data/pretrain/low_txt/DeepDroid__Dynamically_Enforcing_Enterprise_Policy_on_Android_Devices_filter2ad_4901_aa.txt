# DeepDroid: Dynamically Enforcing Enterprise Policy on Android Devices

## Authors
Xueqiang Wang<sup>∗†</sup>, Kun Sun<sup>‡</sup>, Yuewu Wang<sup>∗</sup>, and Jiwu Jing<sup>∗</sup>

- <sup>∗</sup> Data Assurance and Communication Security Research Center, Institute of Information Engineering, Chinese Academy of Sciences
  - {wangxueqiang, ywwang, jing}@is.ac.cn
- <sup>†</sup> University of Chinese Academy of Sciences
- <sup>‡</sup> Department of Computer Science, College of William and Mary

### Abstract
The increasing trend of company employees using mobile devices to access corporate assets necessitates robust security measures. While enterprise apps are controlled, personal apps from untrusted sources may also be installed. To secure the business environment, enterprises require policy enforcement for system resource access by these apps. However, Android, which holds 81.9% of the mobile market, provides limited interfaces for such enforcement. This paper introduces DeepDroid, a dynamic security policy enforcement scheme for Android devices. Unlike existing methods, DeepDroid uses dynamic memory instrumentation on a few critical system processes without modifying firmware. It can be deployed on various Android versions and devices, and it enforces fine-grained policies based on context information extracted from Binder interception. Our prototype demonstrates that DeepDroid effectively enforces enterprise policies with minimal performance overhead.

### I. Introduction
An increasing number of employees use mobile devices in the workplace, often connecting to enterprise resources. According to a 2013 Cisco survey, 51% of end users rely on smartphones for daily business activities. This trend is expected to continue, influencing the design and usage of mobile devices in enterprise environments. As the lines between personal and professional use blur, enterprises demand secure and robust mobile device management to protect their assets. For example, in buildings where audio recording is prohibited, microphones should be disabled when users enter and re-enabled upon exit.

Android, with an 81% market share, only offers an "all-or-nothing" permission model, allowing users to either accept all permissions requested by an app or decline installation. Post-installation, the app has continuous access to approved resources. Although Android 4.3 introduced "App Ops" for runtime permission configuration, this feature was removed in Android 4.4.2 due to user configuration burden and its impact on the advertising market. SEAndroid, while evolving to provide flexible mandatory access control (MAC) in the Linux kernel, is not fully integrated into Android middleware and is unavailable on older Android versions.

Google's Device Administration APIs, introduced in Android 2.2, offer limited functionality and vary across Android releases. The Mobile Device Management (MDM) concept, though well-established, often relies on proprietary solutions like Samsung Knox, which is exclusive to Samsung devices.

In this paper, we propose DeepDroid, a dynamic, fine-grained security policy enforcement mechanism for Android devices. By applying dynamic memory instrumentation to a small number of critical system processes, DeepDroid can enforce enterprise-level permissions. It hooks the system server process to act as a centralized controller and tracks the zygote process to authorize native code access. Additionally, it intercepts Binder interactions for detailed app request information, enabling fine-grained access control.

DeepDroid requires root privileges, which are typically available in corporate settings where companies customize device software before distribution. Since it does not modify the Android middleware or Linux kernel, it imposes minimal customization burdens on vendors.

### Key Contributions
- **Portability:** DeepDroid can be easily ported to various Android versions and devices with minimal changes.
- **Fine-Grained Control:** It supports detailed control over each app, including temporal and spatial constraints.
- **Minimal Impact:** Only a few critical processes are instrumented, resulting in negligible performance overhead and easy deactivation.
- **Evaluation:** We developed a prototype and tested it on multiple Android devices and versions, demonstrating its effectiveness and efficiency.

### III. Goals, Challenges, and Assumptions
**Goals:**
- **Portability:** Easily deployable on various Android versions and devices.
- **Fine Granularity:** Support detailed service and resource access control for individual apps.
- **Trustworthiness:** Ensure complete enforcement of access control policies.
- **Ease of Use:** Prompt activation and deactivation based on policy settings with minimal performance impact.

**Challenges:**
- Ensuring compatibility across different Android versions and devices.
- Implementing fine-grained control without significant performance overhead.
- Protecting against malicious apps that bypass permission checks.

**Assumptions:**
- Root privileges are available from OEMs.
- Enterprise administrators are trusted.
- Keying material for communication protection is secure.
- The Android OS kernel is trustworthy and cannot be compromised by malicious apps.

### IV. DeepDroid System Architecture
DeepDroid consists of two main components: the Enterprise Policy Center and DeepDroid On-device.

#### A. Enterprise Policy Center
The Enterprise Policy Center includes three modules:
- **Authentication Module:** Authenticates mobile devices and shares temporary secret keys.
- **Policy Repository:** Provides policy rules based on security requirements and user roles.
- **Monitoring Module:** Continuously reports device status for logging and auditing.

#### B. DeepDroid On-device
DeepDroid On-device dynamically instruments critical system processes to enforce policies. It hooks the system server and zygote processes, intercepts Binder interactions, and enforces fine-grained access control based on context information.

### Table II: Binder Resource Accessing Interfaces
| Resource | Process | Service | Function Code |
|----------|---------|---------|---------------|
| IMEI     | phone   | iphonesubinfo | getDeviceInfo (1) |
| Phone #  | phone   | iphonesubinfo | getLine1Number (5) |
| Location | system server | location | getLastKnownLocation (17) |
| Contacts | system server | activity | getContentProvider (29) |
| Camera   | mediaserver | media.camera | connect (3) |
| Account  | system server | account | getAccounts (4) |
| SMS/MMS | phone   | isms | sendText (5) |

### Conclusion
DeepDroid addresses the need for dynamic and fine-grained security policy enforcement on Android devices. By leveraging dynamic memory instrumentation and process tracing, it provides a portable, flexible, and efficient solution with minimal performance overhead. Our evaluation confirms its effectiveness across various Android devices and versions.