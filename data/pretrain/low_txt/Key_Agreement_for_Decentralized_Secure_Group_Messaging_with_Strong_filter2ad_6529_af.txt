In this paper, we present a method for enabling secure group messaging with robust security guarantees, including end-to-end encryption, forward secrecy, and post-compromise security, in a decentralized and asynchronous environment. While the basic concept of transmitting secrets over two-party secure channels is straightforward, achieving our objectives requires careful design, particularly to ensure that all group members receive the same keys when users are added concurrently with other group members performing post-compromise security (PCS) updates.

Centralized protocols typically manage these challenges by sequencing all updates through a semi-trusted server or consensus protocol. However, centralization is often undesirable in settings such as anonymous communication (mix networks), mesh networks, mobile ad-hoc networks, and peer-to-peer systems. By avoiding centralization, our protocol can be deployed on any type of network, regardless of its topology. Even during network partitions, any subset of group members who can physically exchange messages can continue to communicate, update keys, and add or remove group members as usual. This enhances the protocol's robustness and resistance to censorship, compared to approaches that rely on a single point of failure, such as a server, which can be targeted by denial-of-service attacks.

The primary drawback of our protocol is that group membership operations and PCS key updates have a computational and network traffic cost of \( \mathcal{O}(n) \) for a group with \( n \) members. In contrast, the centralized Messaging Layer Security (MLS) protocol requires only one broadcast message of size \( \mathcal{O}(\log n) \) for the same operations [5]. We demonstrate in Section 8 that our \( \mathcal{O}(n) \) cost is acceptable even for groups with over 100 members.

Beyond the scope of this paper, there are many open problems and interesting directions for future work, especially addressing the limitations discussed in Section 2.1.

### Acknowledgments
We thank Giulia Fanti, Heather Miller, Justin Raizes, Katriel Cohn-Gordon, Mansoor Ahmed-Rengers, and Herb Caudill for their valuable feedback on various drafts of this work. We also extend our gratitude to the anonymous referees for their numerous helpful suggestions. Matthew Weidner is supported by a Churchill Scholarship from the Winston Churchill Foundation of the USA and an NDSEG Fellowship sponsored by the US Office of Naval Research. Martin Kleppmann is supported by a Leverhulme Trust Early Career Fellowship, the Isaac Newton Trust, Nokia Bell Labs, and crowdfunding supporters including Ably, Adrià Arcarons, Chet Corcos, Macrometa, Mintter, David Pollak, RelationalAI, SoftwareMill, Talent Formation Network, and Adam Wiggins. Daniel Hugenroth is supported by a Nokia Bell Labs Scholarship and the Cambridge European Trust. Alastair R. Beresford is partially supported by EPSRC [grant number EP/M020320/1]. The opinions, findings, and conclusions or recommendations expressed are those of the authors and do not necessarily reflect those of any of the funders.

### References
[1] Martin R. Albrecht, Jorge Blasco, Rikke Bjerg Jensen, and Lenka Mareková. 2021. Mesh Messaging in Large-Scale Protests: Breaking Bridgefy. In Cryptographers’ Track at the RSA Conference. Springer, 375–398. https://doi.org/10.1007/978-3-030-75539-3_16

[2] Joël Alwen, Sandro Coretti, and Yevgeniy Dodis. 2019. The Double Ratchet: Security Notions, Proofs, and Modularization for the Signal Protocol. In Advances in Cryptology – EUROCRYPT 2019. Springer, 129–158. Full version: https://eprint.iacr.org/2018/1037

[3] Joël Alwen, Sandro Coretti, Yevgeniy Dodis, and Yiannis Tselekounis. 2020. Security Analysis and Improvements for the IETF MLS Standard for Group Messaging. In Advances in Cryptology – CRYPTO 2020, Daniele Micciancio and Thomas Ristenpart (Eds.). Springer International Publishing, Cham, 248–277. Full version: https://eprint.iacr.org/2019/1189

[4] Jacob Aron and Aviva Rutkin. 2017. Hong Kong protesters use a mesh network to organise. New Scientist (Sept. 2017). https://www.newscientist.com/article/dn26285-hong-kong-protesters-use-a-mesh-network-to-organise/ Archived at https://perma.cc/VKH7-KE9K

[5] Richard Barnes, Benjamin Beurdouche, Jon Millican, Emad Omara, Katriel Cohn-Gordon, and Raphael Robert. 2020. The Messaging Layer Security (MLS) Protocol. Internet-Draft draft-ietf-mls-protocol-11. Internet Engineering Task Force. https://datatracker.ietf.org/doc/html/draft-ietf-mls-protocol-11 Work in Progress.

[6] Mihir Bellare, Asha Camper Singh, Joseph Jaeger, Maya Nyayapati, and Igors Stepanovs. 2017. Ratcheted Encryption and Key Exchange: The Security of Messaging. In Advances in Cryptology – CRYPTO 2017. Springer, 619–650. Full version: https://eprint.iacr.org/2016/1028

[7] Daniel J Bernstein. 2006. Curve25519: New Diffie-Hellman Speed Records. In 9th International Conference on Theory and Practice in Public-Key Cryptography (PKC). Springer, 207–228. https://doi.org/10.1007/11745853_14

[8] Karthikeyan Bhargavan, Richard Barnes, and Eric Rescorla. 2018. TreeKEM: Asynchronous Decentralized Key Management for Large Dynamic Groups. Messaging Layer Security mailing list. https://mailarchive.ietf.org/arch/msg/mls/v1CY0jFAOVOHokB4DtNqS__tX1o

[9] Alexander Bienstock, Yevgeniy Dodis, and Paul Rösler. 2020. On the Price of Concurrency in Group Ratcheting Protocols. In Theory of Cryptography, Rafael Pass and Krzysztof Pietrzak (Eds.). Springer International Publishing, Cham, 198–228. Full version: https://eprint.iacr.org/2020/1171

[10] Simon Blöchinger and Richard von Seck. 2021. Survey of Mesh Networking Messengers. Technical Report. TU Munich Seminar IITM. https://doi.org/10.2313/NET-2021-05-1_01

[11] Bernadette Charron-Bost. 1991. Concerning the size of logical clocks in distributed systems. Inf. Proc. Letters 39, 1 (July 1991), 11–16. https://doi.org/10.1016/0020-0190(91)90055-M

[12] Katriel Cohn-Gordon. 2018. Trivial DoS by a malicious client. https://github.com/mlswg/mls-protocol/issues/21

[13] K. Cohn-Gordon, C. Cremers, B. Dowling, L. Garratt, and D. Stebila. 2017. A Formal Security Analysis of the Signal Messaging Protocol. In 2017 IEEE European Symposium on Security and Privacy (EuroS&P). 451–466. https://doi.org/10.1109/EuroSP.2017.27

[14] Katriel Cohn-Gordon, Cas Cremers, and Luke Garratt. 2016. On Post-Compromise Security. In 29th IEEE Computer Security Foundations Symposium (CSF). IEEE, 164–178. https://doi.org/10.1109/CSF.2016.19

[15] Cas Cremers, Britta Hale, and Konrad Kohbrok. 2019. Efficient Post-Compromise Security Beyond One Group. Cryptology ePrint Archive, Report 2019/477. https://eprint.iacr.org/2019/477

[16] Roger Dingledine, Nick Mathewson, and Paul Syverson. 2004. Tor: The Second-Generation Onion Router. Technical Report ADA465464. Naval Research Laboratory, Washington DC.

[17] F. Betül Durak and Serge Vaudenay. 2019. Bidirectional Asynchronous Ratcheted Key Agreement with Linear Complexity. In Advances in Information and Computer Security. Springer, 343–362. Full version: https://eprint.iacr.org/2018/889

[18] C. J. Fidge. 1988. Timestamps in message-passing systems that preserve the partial ordering. Proceedings of the 11th Australian Computer Science Conference 10, 1 (1988), 56–66.

[19] Seth Gilbert and Nancy A Lynch. 2002. Brewer’s conjecture and the feasibility of consistent, available, partition-tolerant web services. ACM SIGACT News 33, 2 (June 2002), 51–59. https://doi.org/10.1145/564585.564601

[20] Mojtaba Hosseini, Dewan Tanvir Ahmed, Shervin Shirmohammadi, and Nicolas D. Georganas. 2007. A survey of application-layer multicast protocols. IEEE Communications Surveys & Tutorials 9, 3 (Sept. 2007), 58–74. https://doi.org/10.1109/comst.2007.4317616

[21] Florian Jacob, Luca Becker, Jan Grashöfer, and Hannes Hartenstein. 2020. Matrix Decomposition: Analysis of an Access Control Approach on Transaction-Based DAGs without Finality. In Proceedings of the 25th ACM Symposium on Access Control Models and Technologies (Barcelona, Spain) (SACMAT ’20). Association for Computing Machinery, New York, NY, USA, 81–92. https://doi.org/10.1145/3381991.3395399

[22] Joseph Jaeger and Igors Stepanovs. 2018. Optimal Channel Security Against Fine-Grained State Compromise: The Safety of Messaging. In CRYPTO 2018. Springer, 33–62. Full version: https://eprint.iacr.org/2018/553

[23] Daniel Jost, Ueli Maurer, and Marta Mularczyk. 2019. Efficient Ratcheting: Almost-Optimal Guarantees for Secure Messaging. In EUROCRYPT 2019. 159–188. Full version: https://eprint.iacr.org/2018/954.pdf

[24] Martin Kleppmann and Heidi Howard. 2020. Byzantine Eventual Consistency and the Fundamental Limits of Peer-to-Peer Databases. CoRR abs/2012.00472 (2020). arXiv:2012.00472 https://arxiv.org/abs/2012.00472

[25] Hugo Krawczyk. 2010. Cryptographic Extraction and Key Derivation: The HKDF Scheme. In CRYPTO 2010. Springer, 631–648. https://doi.org/10.1007/978-3-642-14623-7_34

[26] Hugo Krawczyk and Pasi Eronen. 2010. HMAC-based Extract-and-Expand Key Derivation Function (HKDF). RFC 5869. https://doi.org/10.17487/RFC5869

[27] João Leitão, José Pereira, and Luís Rodrigues. 2009. Gossip-Based Broadcast. In Handbook of Peer-to-Peer Networking. Springer, 831–860. https://doi.org/10.1007/978-0-387-09751-0_29

[28] Moxie Marlinspike and Trevor Perrin. 2016. The X3DH Key Agreement Protocol. Technical Report Revision 1. https://www.signal.org/docs/specifications/x3dh/ Archived at https://perma.cc/633M-J2WM

[29] Matrix.org Foundation. 2019. End-to-End Encryption implementation guide. https://matrix.org/docs/guides/end-to-end-encryption-implementation-guide Archived at https://perma.cc/75RC-HS9B

[30] Friedemann Mattern. 1989. Virtual Time and Global States of Distributed Systems. In Parallel & Distributed Algorithms. North-Holland, 215–226.

[31] Emad Omara, Benjamin Beurdouche, Eric Rescorla, Srinivas Inguva, Albert Kwon, and Alan Duric. 2020. The Messaging Layer Security (MLS) Architecture. Internet-Draft draft-ietf-mls-architecture-05. Internet Engineering Task Force. https://datatracker.ietf.org/doc/html/draft-ietf-mls-architecture-05 Work in Progress.

[32] Trevor Perrin and Moxie Marlinspike. 2016. The Double Ratchet Algorithm. Technical Report Revision 1. https://signal.org/docs/specifications/doubleratchet/ Archived at https://perma.cc/AJL9-MBSB

[33] Ania M Piotrowska, Jamie Hayes, Tariq Elahi, Sebastian Meiser, and George Danezis. 2017. The Loopix Anonymity System. In USENIX Security Symposium.

[34] Bertram Poettering and Paul Rösler. 2018. Towards Bidirectional Ratcheted Key Exchange. In CRYPTO 2018. Springer, 3–32. https://doi.org/10.1007/978-3-319-96884-1_1 Full version: https://eprint.iacr.org/2018/296

[35] Nuno M. Preguiça, Carlos Baquero, and Marc Shapiro. 2018. Conflict-free Replicated Data Types (CRDTs). CoRR abs/1805.06358 (2018). arXiv:1805.06358 http://arxiv.org/abs/1805.06358

[36] Paul Rösler, Christian Mainka, and Jörg Schwenk. 2018. More is Less: On the End-to-End Security of Group Chats in Signal, WhatsApp, and Threema. In 2018 IEEE EuroS&P. 415–429. https://doi.org/10.1109/EuroSP.2018.00036

[37] Marc Shapiro, Nuno Preguiça, Carlos Baquero, and Marek Zawirski. 2011. Conflict-Free Replicated Data Types. In 13th International Symposium on Stabilization, Safety, and Security of Distributed Systems. 386–400. https://doi.org/10.1007/978-3-642-24550-3_29

[38] Lokman Tsui. 2015. The coming colonization of Hong Kong cyberspace: government responses to the use of new technologies by the umbrella movement. Chinese J. Comm 8, 4 (2015), 1–9. https://doi.org/10.1080/17544750.2015.1058834

[39] Nik Unger, Sergej Dechand, Joseph Bonneau, Sascha Fahl, Henning Perl, Ian Goldberg, and Matthew Smith. 2015. SoK: Secure Messaging. In 2015 IEEE Symposium on Security and Privacy (S&P). IEEE, 232–249. https://doi.org/10.1109/SP.2015.22

[40] Richard van der Hoff. 2019. Megolm group ratchet. https://gitlab.matrix.org/matrix-org/olm/-/blob/efd17631b16d1271a029e0af8f7d8e5ae795cc5d/docs/megolm.md

[41] Matthew Weidner. 2019. Group Messaging for Secure Asynchronous Collaboration. Master’s thesis. University of Cambridge, Cambridge, UK. http://mattweidner.com/acs-dissertation.pdf Archived at https://perma.cc/XA8S-BHFN

[42] Matthew Weidner, Martin Kleppmann, Daniel Hugenroth, and Alastair R. Beresford. 2020. Key Agreement for Decentralized Secure Group Messaging with Strong Security Guarantees. Cryptology ePrint Archive, Report 2020/1281. https://eprint.iacr.org/2020/1281

[43] WhatsApp. 2017. WhatsApp Encryption Overview. https://www.whatsapp.com/security/WhatsApp-Security-Whitepaper.pdf Archived at https://perma.cc/QD7M-GPG5

### A Security Game for DCGKA
The correctness and security of a DCGKA scheme are formally captured by the security game illustrated in Figure 8, with additional predicates defined in Figure 9. The game definition and our description are based on the CGKA version introduced by Alwen et al. [3, §3.2].

The game is a key indistinguishability game, parameterized by the random bit \( b \), which determines whether challenges return actual update secrets or random values. The adversary's goal is to guess \( b \).

DGM denotes the DGM scheme we use to determine group membership. We assume DGM has the usual sequential semantics for create, add, and remove messages from the sender's perspective, and we assume that a user can initially be added to the group only by an add message for that user. However, to make the game definition as general as possible, we do not require each ID added to the group to be unique, and we do not impose restrictions on re-adding previous users. In particular, a user may be removed and re-added, possibly indirectly (e.g., due to a remove message "undoing" a concurrent remove), or added multiple times concurrently.

The relation \( \prec \) denotes the causal order on messages, as defined in Section 5.1.

**Initialization.** The `init` oracle sets up the game and all the variables needed to track the execution. The random bit \( b \) is used for real-or-random challenges. The dictionary \( \gamma \) keeps track of all users' states, while `counter[ID]` stores the number of messages sent so far by `ID`. These counters are never reset, unlike the variable `ctr` in the CGKA security game, which is reset with each CGKA epoch. `controlMsgs[ID, c]` stores the \( c \)-th control message generated by `ID`, while `directMsgs[ID, c, ID′]` stores the corresponding direct message intended for `ID′`. Corresponding to `controlMsgs[ID, c]`, `I[ID, c]` stores the update secret output by the sender, `needsResponse[ID, c]` stores whether recipients are required to return an acknowledgment when processing `controlMsgs[ID, c]` (i.e., it is an output of create, add, remove, or update), and `challenged[ID, c]` stores whether `I[ID, c]` has been challenged or revealed by the adversary. Additionally, for each user `ID′`, `delivered[ID, c, ID′]` indicates whether `controlMsgs[ID, c]` has been delivered to `ID′`. Finally, if `controlMsgs[ID, c]` is an add message for a user `ID′`, then `addTarget[ID, c]` is `ID′`, else it is \( \epsilon \). Both `controlMsgs` and `directMsgs` are marked public, indicating they are readable by the adversary.

**Group Creation.** The `create-group` oracle causes `ID0` to create a group with members `ID0, ..., IDn`. It requires that no previous messages have been sent, i.e., the game has just started (if the `require` statement fails, the game aborts and the adversary loses). To avoid trivial protocols that do not output any update secrets, `create` must output a non-\( \epsilon \) control message and update secret; if not, we reveal \( b \) to the adversary, indicated by the keyword `win`. We store the returned messages and update secret, increment the sender's counter, and mark the message as delivered to its sender. Here, `directMsgs[ID0, 1] ← dmsgs` means `directMsgs[ID0, 1, ID′] ← dmsg` for each pair `(ID′, dmsg) ∈ dmsgs`. To avoid trivial protocols, we set `needsResponse[ID0, 1] ← true`, ensuring that other group members will output response messages.

```plaintext
init
b ←$ {0, 1}
∀ID : γ[ID] ← init(ID)
counter[·] ← 0
public controlMsgs[·, ·] ← ε
public directMsgs[·, ·, ·] ← ε
I[·, ·] ← ε
needsResponse[·, ·] ← false
challenged[·, ·] ← false
delivered[·, ·, ·] ← false
addTarget[·, ·] ← ε

reveal(ID, c)
require I[ID, c] ≠ ε
require ¬challenged[ID, c]
challenged[ID, c] ← true
return I[ID, c]

challenge(ID, c)
require I[ID, c] ≠ ε
require ¬challenged[ID, c]
I0 ← I[ID, c]
I1 ←$ KGen()
challenged[ID, c] ← true
return Ib

compromise(ID)
return γ[ID]

create-group(ID0, {ID1, . . . , IDn})
1 : require controlMsgs is empty
2 : require ID0 ∉ {ID1, . . . , IDn }
3 : (γ[ID0], control, dmsgs, I) ← create(γ[ID0], ID1, . . . , IDn)
4 : if control = ε ∨ I = ε then win
5 : controlMsgs[ID0, 1] ← control
6 : directMsgs[ID0, 1] ← dmsgs
7 : needsResponse[ID0, 1] ← true
8 : delivered[ID0, 1, ID0] ← true
9 : I[ID0, 1] ← I
10 : counter[ID0] ← 1

add-user(ID, ID′)
require valid-member(ID) ∧ ID ≠ ID′
1 : c ← ++counter[ID]
2 : (γ[ID], control, dmsgs, I) ← add(γ[ID], ID′)
3 : if control = ε ∨ I = ε then win
4 : controlMsgs[ID, c] ← control
5 : directMsgs[ID, c] ← dmsgs
6 : needsResponse[ID, c] ← true
7 : delivered[ID, c, ID] ← true
8 : I[ID, c] ← I
```

This structured and detailed approach ensures clarity and coherence in the presentation of the DCGKA security game.