### Introduction
Our work builds most directly on offline/online Private Information Retrieval (PIR) protocols [27, 69], where the client fetches some information about the database in an offline phase to improve online performance. Under appropriate "public-key assumptions" [31], it is possible [19, 59] to construct PIR schemes in which the client communicates with only a single database server.

Sion and Carbunar [78] raise the question of whether single-server PIR schemes can ever be more efficient (in terms of total time) than the naive PIR scheme, where the client downloads the entire database. Olumofin and Goldberg [67] argue that modern lattice-based protocols can indeed outperform trivial PIR protocols. Recent work has refined single-server lattice-based schemes using batch-PIR techniques, resulting in relatively efficient single-server PIR schemes [2, 3, 4, 5]. While these schemes are more expensive due to their reliance on public-key primitives, they are invaluable in settings where multiple servers are unavailable.

Previous work has applied PIR to various domains, including private media consumption [46], eCommerce [49], and private messaging [5].

### Conclusion
With Checklist, a client can check a string against a server-side blocklist without revealing the string to the server. Checklist significantly reduces communication and storage compared to a baseline scheme where the client downloads and maintains a local copy of the entire blocklist. Our new offline/online PIR scheme further reduces the server-side cost of Checklist compared to previous PIR schemes. We hope that Checklist will lead to further improvements in practical PIR systems and encourage the large-scale deployment of privacy-preserving blocklist systems in major web browsers.

### Acknowledgements
We gratefully acknowledge Dan Boneh for his advice and support throughout this project. Eric Rescorla first brought these privacy concerns with Safe Browsing to our attention and asked whether PIR schemes could ever be fast enough to address them. We thank Kostis Kaffes for very helpful conversations on our experimental evaluation. Krzysztof Pietrzak suggested a technique to improve the efficiency of our earlier PIR scheme [27], which was instrumental in developing the results of Section 4. Elaine Shi kindly pointed us to related work on dynamic data structures. A team at Google, including Alex Wozniak, Emily Stark, Rui Wang, Nathan Parker, and Varun Khaneja, answered many of our questions about the internals of the Safe Browsing service. Finally, we thank the USENIX Security reviewers and our shepherd, Ian Goldberg, for extensive feedback and suggestions on how to improve the paper.

This work was funded by NSF, DARPA, a grant from ONR, the Simons Foundation, a Facebook research award, a Google research award, and a Google Cloud Platform research-credits award. Opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of DARPA.

---

### References
[1] Source code for Checklist. Available at: https://github.com/dimakogan/checklist.

[2] Carlos Aguilar-Melchor, Joris Barrier, Laurent Fousse, and Marc-Olivier Killijian. XPIR: Private information retrieval for everyone. PoPETs, 2016(2):155–174, 2016.

[3] Asra Ali, Tancrède Lepoint, Sarvar Patel, Mariana Raykova, Phillipp Schoppmann, Karn Seth, and Kevin Yeo. Communication-computation trade-offs in PIR. Cryptology ePrint Archive, Report 2019/1483, 2019.

[4] Sebastian Angel, Hao Chen, Kim Laine, and Srinath T. V. Setty. PIR with compressed queries and amortized query processing. In IEEE Symposium on Security and Privacy, 2018.

[5] Sebastian Angel and Srinath Setty. Unobservable communication over fully untrusted infrastructure. In SOSP, 2016.

[6] Adam Back. Hashcash – a denial of service counter-measure. August 2002.

[7] Amos Beimel, Yuval Ishai, and Tal Malkin. Reducing the servers' computation in private information retrieval: PIR with preprocessing. In CRYPTO, 2000.

[8] Amos Beimel, Yuval Ishai, and Tal Malkin. Reducing the servers' computation in private information retrieval: PIR with preprocessing. J. Cryptol., 17(2):125–151, 2004.

[9] Simon Bell and Peter Komisarczuk. An analysis of phishing blacklists: Google Safe Browsing, OpenPhish, and PhishTank. In Proceedings of the Australasian Computer Science Week, ACSW, 2020.

[10] Jon Louis Bentley and James B. Saxe. Decomposable searching problems I: static-to-dynamic transformation. J. Algorithms, 1(4):301–358, 1980.

[11] Burton H. Bloom. Space/time trade-offs in hash coding with allowable errors. Communications of the ACM, 13(7):422–426, 1970.

[12] Dan Boneh, Sam Kim, and Hart William Montgomery. Private puncturable PRFs from standard lattice assumptions. In EUROCRYPT, 2017.

[13] Dan Boneh and Brent Waters. Constrained pseudorandom functions and their applications. In ASIACRYPT, 2013.

[14] Elette Boyle, Niv Gilboa, and Yuval Ishai. Function secret sharing. In EUROCRYPT, 2015.

[15] Elette Boyle, Niv Gilboa, and Yuval Ishai. Function secret sharing: Improvements and extensions. In CCS, 2016.

[16] Elette Boyle, Shafi Goldwasser, and Ioana Ivan. Functional signatures and pseudorandom functions. In PKC, 2014.

[17] Taha Broach. Apple proxies Google Safe Browsing for privacy. https://the8-bit.com/apple-proxies-google-safe-browsing-privacy/, 2021.

[18] Andrei Broder and Michael Mitzenmacher. Network applications of bloom filters: A survey. Internet mathematics, 1(4):485–509, 2004.

[19] Christian Cachin, Silvio Micali, and Markus Stadler. Computationally private information retrieval with polylogarithmic communication. In EUROCRYPT, 1999.

[20] Nishanth Chandran, Bhavana Kanukurthi, and Rafail Ostrovsky. Locally updatable and locally decodable codes. In TCC, 2014.

[21] Hao Chen, Zhicong Huang, Kim Laine, and Peter Rindal. Labeled PSI from fully homomorphic encryption with malicious security. In CCS, 2018.

[22] Hao Chen, Kim Laine, and Peter Rindal. Fast private set intersection from homomorphic encryption. In CCS, 2017.

[23] Benny Chor, Niv Gilboa, and Moni Naor. Private information retrieval by keywords. Cryptology ePrint Archive, Report 1998/003, 1998.

[24] Benny Chor, Oded Goldreich, Eyal Kushilevitz, and Madhu Sudan. Private information retrieval. In FOCS, 1995.

[25] Benny Chor, Oded Goldreich, Eyal Kushilevitz, and Madhu Sudan. Private information retrieval. J. ACM, 45(6):965–982, 1998.

[26] ClamAV. ClamAV Documentation: File hash signatures. https://www.clamav.net/documents/file-hash-signatures.

[27] Henry Corrigan-Gibbs and Dmitry Kogan. Private information retrieval with sublinear online time. In EUROCRYPT, 2020.

[28] Helei Cui, Yajin Zhou, Cong Wang, Xinyu Wang, Yuefeng Du, and Qian Wang. PPSB: An open and flexible platform for privacy-preserving Safe Browsing. IEEE Transactions on Dependable and Secure Computing, 2019.

[29] Casey Devet, Ian Goldberg, and Nadia Heninger. Optimally robust private information retrieval. In USENIX Security, 2012.

[30] Giovanni Di Crescenzo, Yuval Ishai, and Rafail Ostrovsky. Universal service-providers for private information retrieval. J. Cryptol., 14(1):37–74, 2001.

[31] Giovanni Di Crescenzo, Tal Malkin, and Rafail Ostrovsky. Single database private information retrieval implies oblivious transfer. In EUROCRYPT, 2000.

[32] Zeev Dvir and Sivakanth Gopi. 2-server PIR with subpolynomial communication. J. ACM, 63(4):39:1–39:15, 2016.

[33] Cynthia Dwork and Moni Naor. Pricing via processing or combatting junk mail. In CRYPTO, 1992.

[34] Cynthia Dwork and Aaron Roth. The algorithmic foundations of differential privacy. Foundations and Trends in Theoretical Computer Science, 9(3-4):211–407, 2014.

[35] Klim Efremenko. 3-query locally decodable codes of subexponential length. SIAM J. Comput., 41(6):1694–1703, 2012.

[36] Michael J. Freedman, Yuval Ishai, Benny Pinkas, and Omer Reingold. Keyword search and oblivious pseudorandom functions. In TCC, 2005.

[37] William Gasarch. A survey on private information retrieval. Bulletin of the EATCS, 82(72-107):113, 2004.

[38] Thomas Gerbet, Amrit Kumar, and Cédric Lauradoux. A privacy analysis of Google and Yandex Safe Browsing. In IEEE/IFIP International Conference on Dependable Systems and Networks, DSN, 2016.

[39] Niv Gilboa and Yuval Ishai. Distributed point functions and their applications. In EUROCRYPT, 2014.

[40] Ian Goldberg. Improving the robustness of private information retrieval. In IEEE Symposium on Security and Privacy, 2007.

[41] Oded Goldreich and Rafail Ostrovsky. Software protection and simulation on oblivious RAMs. J. ACM, 43(3):431–473, 1996.

[42] Google. Compression in Safe Browsing APIs (v4). https://developers.google.com/safe-browsing/v4/compression.

[43] Google. Safe Browsing APIs (v4). https://developers.google.com/safe-browsing/v4.

[44] Google. Safe Browsing transparency report. https://transparencyreport.google.com/safe-browsing/overview.

[45] Matthew Green. How safe is Apple’s Safe Browsing? https://blog.cryptographyengineering.com/2019/10/13/dear-apple-safe-browsing-might-not-be-that-safe/, 2019.

[46] Trinabh Gupta, Natacha Crooks, Whitney Mulhern, Srinath Setty, Lorenzo Alvisi, and Michael Walfish. Scalable and private media consumption with Popcorn. In NSDI, 2016.

[47] Syed Mahbub Hafiz and Ryan Henry. A bit more than a bit is more than a bit better: Faster (essentially) optimal-rate many-server PIR. 2019.

[48] Ryan Henry. Polynomial batch codes for efficient IT-PIR. PoPETs, 2016(4):202–218, 2016.

[49] Ryan Henry, Femi Olumofin, and Ian Goldberg. Practical PIR for electronic commerce. In CCS, 2011.

[50] Susan Hohenberger, Venkata Koppula, and Brent Waters. Adaptively secure puncturable pseudorandom functions in the standard model. In ASIACRYPT, 2015.

[51] Troy Hunt. Have I been pwned. https://haveibeenpwned.com.

[52] Internet Storm Center. SSL CRL activity. https://isc.sans.edu/crls.html.

[53] Yuval Ishai, Eyal Kushilevitz, Rafail Ostrovsky, and Amit Sahai. Batch codes and their applications. In STOC, 2004.

[54] J. C. Jones. CRLite part 4: Infrastructure design. https://blog.mozilla.org/security/2020/12/01/crlite-part-4-infrastructure-design/, December 2020.

[55] Daniel Kales. Go DPF library. https://github.com/dkales/dpf-go, 2019.

[56] Aggelos Kiayias, Stavros Papadopoulos, Nikos Triandopoulos, and Thomas Zacharias. Delegatable pseudorandom functions and applications. In CCS, 2013.

[57] Scott Knight. Syspolicyd internals. https://knight.sc/reverse%20engineering/2019/02/20/syspolicyd-internals.html, February 2019.

[58] Dmitry Kogan and Henry Corrigan-Gibbs. Private blocklist lookups with Checklist (full version). Cryptology ePrint Archive, Report 2021/345, 2021.

[59] Eyal Kushilevitz and Rafail Ostrovsky. Replication is not needed: Single database, computationally-private information retrieval. In FOCS, 1997.

[60] Adam Langley. CRL set tools. https://github.com/agl/crlset-tools.

[61] James Larisch, David Choffnes, Dave Levin, Bruce M Maggs, Alan Mislove, and Christo Wilson. CRLite: A scalable system for pushing all TLS revocations to all browsers. In IEEE Symposium on Security and Privacy, 2017.

[62] Kristin Lauter, Sreekanth Kannepalli, Kim Laine, and Radames Cruz Moreno. Password Monitor: Safeguarding passwords in Microsoft Edge. https://www.microsoft.com/en-us/research/blog/password-monitor-safeguarding-passwords-in-microsoft-edge/, January 2021.

[63] Lucy Li, Bijeeta Pal, Junade Ali, Nick Sullivan, Rahul Chatterjee, and Thomas Ristenpart. Protocols for checking compromised credentials. In CCS, 2019.

[64] Wouter Lueks and Ian Goldberg. Sublinear scaling for multi-client private information retrieval. In Financial Cryptography, 2015.

[65] Andrés Cecilia Luque. Apple is sending a request to their servers for every piece of software you run on your Mac. https://medium.com/@acecilia/apple-is-sending-a-request-to-their-servers-for-every-piece-of-software-you-run-on-your-mac-b0bb509eee65, May 2020.

[66] Mozilla. Firefox for Android—releases. https://github.com/mozilla-mobile/fenix/releases.

[67] Femi Olumofin and Ian Goldberg. Revisiting the computational practicality of private information retrieval. In Financial Cryptography, 2011.

[68] Charalampos Papamanthou, Roberto Tamassia, and Nikos Triandopoulos. Authenticated hash tables based on cryptographic accumulators. Algorithmica, 74(2):664–712, 2016.

[69] Sarvar Patel, Giuseppe Persiano, and Kevin Yeo. Private stateful information retrieval. In CCS, 2018.

[70] Ben Perez. How safe browsing fails to protect user privacy. https://blog.trailofbits.com/2019/10/30/how-safe-browsing-fails-to-protect-user-privacy/, 2019.

[71] Benny Pinkas, Mike Rosulek, Ni Trieu, and Avishay Yanai. Spot-light: Lightweight private set intersection from sparse OT extension. In CRYPTO, 2019.

[72] Ania M. Piotrowska, Jamie Hayes, Nethanel Gelernter, George Danezis, and Amir Herzberg. Annotify: A private notification service. In WPES, 2017.

[73] Peter Rindal and Mike Rosulek. Malicious-secure private set intersection via dual execution. In CCS, 2017.

[74] Amit Sahai and Brent Waters. How to use indistinguishability obfuscation: deniable encryption, and more. In STOC, 2014.

[75] Aaron Schulman, Dave Levin, and Neil Spring. RevCast: Fast, private certificate revocation over FM radio. In CCS, 2014.

[76] Elaine Shi, Waqar Aqeel, Balakrishnan Chandrasekaran, and Bruce Maggs. Puncturable pseudorandom sets and private information retrieval with polylogarithmic bandwidth and sublinear time. Cryptology ePrint Archive, Report 2020/1592, 2020.

[77] Elaine Shi, Emil Stefanov, and Charalampos Papamanthou. Practical dynamic proofs of retrievability. In CCS, 2013.

[78] Radu Sion and Bogdan Carbunar. On the practicality of private information retrieval. In NDSS, 2007.

[79] Trevor Smith, Luke Dickinson, and Kent Seamons. Let's revoke: Scalable global certificate revocation. In NDSS, 2020.

[80] John Solis and Gene Tsudik. Simple and flexible revocation checking with privacy. In International Workshop on Privacy Enhancing Technologies, 2006.

[81] Emil Stefanov, Charalampos Papamanthou, and Elaine Shi. Practical dynamic searchable encryption with small leakage. In NDSS, 2014.

[82] Kurt Thomas, Jennifer Pullman, Kevin Yeo, Ananth Raghunathan, Patrick Gage Kelley, Luca Invernizzi, Borbala Benko, Tadek Pietraszek, Sarvar Patel, Dan Boneh, and Elie Bursztein. Protecting accounts from credential stuffing with password breach alerting. In USENIX Security, 2019.

[83] Raphael R. Toledo, George Danezis, and Ian Goldberg. Lower-cost 𝜖-private information retrieval. PoPETs, 2016(4):184–201, 2016.

[84] Ke Coby Wang and Michael K. Reiter. Detecting stuffing of a user’s credentials at her own accounts. In USENIX Security, 2020.

[85] Sergey Yekhanin. Towards 3-query locally decodable codes of subexponential length. J. ACM, 55(1):1:1–1:16, 2008.

---

**USENIX Association**
**30th USENIX Security Symposium**