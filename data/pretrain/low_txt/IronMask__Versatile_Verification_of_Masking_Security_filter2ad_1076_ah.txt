### Relationship Between Leakage and Secrets

Eldib, Wang, and Schaumont [26] extended the verification of higher-order targets using a concept similar to non-interference. However, their model counting approach is limited by its complexity, making it suitable only for small masking orders.

Barthe et al. [5] formalized the connection between the security of masked implementations and probabilistic non-interference. Their method overcomes the combinatorial explosion of observation sets for high orders. The resulting tool, maskVerif, can verify reasonable circuits at reasonable masking orders. After several improvements in recent years [6], [3], maskVerif now includes the verification of most probing-like security notions for different leakage models, including the robust probing model in the presence of glitches. Its extension into scVerif [19] captures more advanced hardware side effects [8]. In the same line of work, checkMasks [22] offers the same functionalities with a broader scope (e.g., verification of Boolean to Arithmetic masking conversion) and polynomial-time verification on selected gadgets. Zhang et al. [35] use abstraction-refinement techniques to improve scalability and precision with their tool SCInfer, although its complexity remains significant. Bordes and Karpman [18] also enhance accuracy by eliminating false negatives.

### Parallel Work on Probing Security

Rebecca [17] was designed to verify probing security in the presence of glitches directly on Verilog implementations, preceding similar improvements on maskVerif for handling hardware implementations. Coco [28] further extends this to check masked software implementations, considering any possible architectural side effects. It analyzes CPU designs as hardware circuits and investigates all potential leaks of several shares. SILVER [32] provides the verification of classical probing-like security properties for hardware implementations with a complete method based on the analysis of probability distributions.

### Recent Developments in Random Probing Model

In recent years, the community has made significant efforts to provide designs in the more realistic random probing model, as seen in [1], [25], [2], [13], [16], [19]. The random probing expandability (RPE) approach developed in [13] currently offers the best complexity for achieving arbitrary random probing security with a constant (and quantifiable) leakage probability. VRAPS [13] was the first tool to verify random probing properties, followed by STRAPS [19], which provides a probabilistic mode to boost performance but still lacks a complete verification method since it uses a set of verification rules from maskVerif, which are not complete by construction.

### Compilation-Based Approaches

While existing verification tools struggle to scale to higher orders or larger algorithms, a complementary approach involves compiling programs that are secure by design using the composition security properties of certain gadgets. This is exemplified by maskComp [6], which tackles the composition problem by introducing (S)NI notions. The compiler is based on standard t-SNI gadgets (built from the ISW scheme [31]) and inserts t-SNI refresh gadgets at carefully chosen locations to ensure the entire implementation is t-NI. This was further improved in tightPROVE [15] and tornado [14], which rely on the same gadgets and insert t-SNI refresh gadgets only when necessary for the circuit to be t-probing secure.

### Conclusion

In this paper, we introduce IronMask, a new tool for the formal verification of masking security. Our tool is versatile, supporting the verification of many probing and random probing security, composition, and expandability notions. We introduce a new algebraic characterization for quadratic gadgets with non-linear randomness, which notably captures multiplication gadgets refreshing their inputs. From this characterization, we design a complete verification method that produces comprehensive results, free from false positives. We provide a detailed description of the algorithms, data structures, and optimizations composing our tool. Additionally, we introduce a constructive method for the exhaustive enumeration of so-called incompressible failure tuples, which provides speed-up in specific cases (e.g., RPS and NI notions).

We have implemented and benchmarked IronMask in C, which will be made open source. For standard probing security notions (NI, SNI), IronMask performs comparably to existing high-performance tools (maskVerif & matverif), while providing complete results for quadratic gadgets with non-linear randomness. It is also significantly faster than SILVER, the only other tool providing complete results for these gadgets. For random probing security notions (RPC, RPE), our tool is several orders of magnitude faster and complete compared to the previous tool VRAPS. These completeness and increased performance allow us to report tighter and better bounds for RPE masking gadgets, improving the tolerated leakage probability of state-of-the-art random probing secure compilers.

### Acknowledgment

This work is partly supported by the French FUI-AAP25 VeriSiCC project.

### References

[1] Miklós Ajtai. Secure computation with information leaking to an adversary. In Lance Fortnow and Salil P. Vadhan, editors, 43rd ACM STOC, pages 715–724. ACM Press, June 2011.

[2] Prabhanjan Ananth, Yuval Ishai, and Amit Sahai. Private circuits: A modular approach. In Hovav Shacham and Alexandra Boldyreva, editors, CRYPTO 2018, Part III, volume 10993 of LNCS, pages 427–455. Springer, Heidelberg, August 2018.

[3] Gilles Barthe, Sonia Belaïd, Gaëtan Cassiers, Pierre-Alain Fouque, Benjamin Grégoire, and François-Xavier Standaert. maskVerif: Automated verification of higher-order masking in the presence of physical defaults. In Kazue Sako, Steve Schneider, and Peter Y. A. Ryan, editors, ESORICS 2019, Part I, volume 11735 of LNCS, pages 300–318. Springer, Heidelberg, September 2019.

[4] Gilles Barthe, Sonia Belaïd, François Dupressoir, Pierre-Alain Fouque, Benjamin Grégoire, François-Xavier Standaert, and Pierre-Yves Strub. Improved parallel mask refreshing algorithms: generic solutions with parametrized non-interference and automated optimizations. J. Cryptogr. Eng., 10(1):17–26, 2020.

[5] Gilles Barthe, Sonia Belaïd, François Dupressoir, Pierre-Alain Fouque, Benjamin Grégoire, and Pierre-Yves Strub. Verified proofs of higher-order masking. In Elisabeth Oswald and Marc Fischlin, editors, EUROCRYPT 2015, Part I, volume 9056 of LNCS, pages 457–485. Springer, Heidelberg, April 2015.

[6] Gilles Barthe, Sonia Belaïd, François Dupressoir, Pierre-Alain Fouque, Benjamin Grégoire, Pierre-Yves Strub, and Rébecca Zucchini. Strong non-interference and type-directed higher-order masking. In Edgar R. Weippl, Stefan Katzenbeisser, Christopher Kruegel, Andrew C. Myers, and Shai Halevi, editors, ACM CCS 2016, pages 116–129. ACM Press, October 2016.

[7] Gilles Barthe, François Dupressoir, Sebastian Faust, Benjamin Grégoire, simple-parallel leakage implementations of masking schemes and the bounded moment model. In Jean-Sébastien Coron and Jesper Buus Nielsen, editors, EUROCRYPT 2017, Part I, volume 10210 of LNCS, pages 535–566. Springer, Heidelberg, April / May 2017.

[8] Gilles Barthe, Marc Gourjon, Benjamin Grégoire, Maximilian Orlt, Clara Paglialonga, and Lars Porth. Masking in fine-grained leakage models: Construction, implementation, and verification. IACR TCHES, 2021(2):189–228, 2021. https://tches.iacr.org/index.php/TCHES/article/view/8792.

[9] Alberto Battistello, Jean-Sébastien Coron, Emmanuel Prouff, and Rina Zeitoun. Horizontal side-channel attacks and countermeasures on the ISW masking scheme. In Benedikt Gierlichs and Axel Y. Poschmann, editors, CHES 2016, volume 9813 of LNCS, pages 23–39. Springer, Heidelberg, August 2016.

[10] Ali Galip Bayrak, Francesco Regazzoni, David Novo, and Paolo Ienne. Sleuth: Automated verification of software power analysis countermeasures. In Guido Bertoni and Jean-Sébastien Coron, editors, CHES 2013, volume 8086 of LNCS, pages 293–310. Springer, Heidelberg, August 2013.

[11] Sonia Belaïd, Fabrice Benhamouda, Alain Passelègue, Emmanuel Prouff, Adrian Thillard, and Damien Vergnaud. Randomness complexity of private circuits for multiplication. In Marc Fischlin and Jean-Sébastien Coron, editors, EUROCRYPT 2016, Part II, volume 9666 of LNCS, pages 616–648. Springer, Heidelberg, May 2016.

[12] Sonia Belaïd, Fabrice Benhamouda, Alain Passelègue, Emmanuel Prouff, Adrian Thillard, and Damien Vergnaud. Private multiplication over finite fields. In Jonathan Katz and Hovav Shacham, editors, CRYPTO 2017, Part III, volume 10403 of LNCS, pages 397–426. Springer, Heidelberg, August 2017.

[13] Sonia Belaïd, Jean-Sébastien Coron, Emmanuel Prouff, Matthieu Rivain, and Abdul Rahman Taleb. Random probing security: Verification, composition, expansion, and new constructions. In Daniele Micciancio and Thomas Ristenpart, editors, CRYPTO 2020, Part I, volume 12170 of LNCS, pages 339–368. Springer, Heidelberg, August 2020.

[14] Sonia Belaïd, Pierre-Évariste Dagand, Darius Mercadier, Matthieu Rivain, and Raphaël Wintersdorff. Tornado: Automatic generation of probing-secure masked bitsliced implementations. In Anne Canteaut and Yuval Ishai, editors, EUROCRYPT 2020, Part III, volume 12107 of LNCS, pages 311–341. Springer, Heidelberg, May 2020.

[15] Sonia Belaïd, Dahmun Goudarzi, and Matthieu Rivain. Tight private circuits: Achieving probing security with the least refreshing. In Thomas Peyrin and Steven Galbraith, editors, ASIACRYPT 2018, Part II, volume 11273 of LNCS, pages 343–372. Springer, Heidelberg, December 2018.

[16] Sonia Belaïd, Matthieu Rivain, and Abdul Rahman Taleb. On the power of expansion: More efficient constructions in the random probing model. In Anne Canteaut and François-Xavier Standaert, editors, EUROCRYPT 2021, Part II, volume 12697 of LNCS, pages 313–343. Springer, Heidelberg, October 2021.

[17] Roderick Bloem, Hannes Groß, Rinat Iusupov, Bettina Könighofer, Stefan Mangard, and Johannes Winter. Formal verification of masked hardware implementations in the presence of glitches. In Jesper Buus Nielsen and Vincent Rijmen, editors, EUROCRYPT 2018, Part II, volume 10821 of LNCS, pages 321–353. Springer, Heidelberg, April / May 2018.

[18] Nicolas Bordes and Pierre Karpman. Fast verification of masking schemes in characteristic two. In Anne Canteaut and François-Xavier Standaert, editors, EUROCRYPT 2021, Part II, volume 12697 of LNCS, pages 283–312. Springer, Heidelberg, October 2021.

[19] Gaëtan Cassiers, Sebastian Faust, Maximilian Orlt, and François-Xavier Standaert. Towards tight random probing security. In Tal Malkin and Chris Peikert, editors, CRYPTO 2021, Part III, volume 12827 of LNCS, pages 185–214, Virtual Event, August 2021. Springer, Heidelberg.

[20] Gaëtan Cassiers and François-Xavier Standaert. Trivially and efficiently composing masked gadgets with probe isolating non-interference. IEEE Trans. Inf. Forensics Secur., 15:2542–2555, 2020.

[21] Suresh Chari, Charanjit S. Jutla, Josyula R. Rao, and Pankaj Rohatgi. Towards sound approaches to counteract power-analysis attacks. In Michael J. Wiener, editor, CRYPTO’99, volume 1666 of LNCS, pages 398–412. Springer, Heidelberg, August 1999.

[22] Jean-Sébastien Coron. Formal verification of side-channel countermeasures via elementary circuit transformations. In Bart Preneel and Frederik Vercauteren, editors, ACNS 18, volume 10892 of LNCS, pages 65–82. Springer, Heidelberg, July 2018.

[23] Jean-Sébastien Coron, Emmanuel Prouff, Matthieu Rivain, and Thomas Roche. Higher-order side channel security and mask refreshing. In Shiho Moriai, editor, FSE 2013, volume 8424 of LNCS, pages 410–424. Springer, Heidelberg, March 2014.

[24] Thomas De Cnudde, Oscar Reparaz, Begül Bilgin, Svetla Nikova, Ventzislav Nikov, and Vincent Rijmen. Masking AES with d+1 shares in hardware. In Benedikt Gierlichs and Axel Y. Poschmann, editors, CHES 2016, volume 9813 of LNCS, pages 194–212. Springer, Heidelberg, August 2016.

[25] Alexandre Duc, Stefan Dziembowski, and Sebastian Faust. Unifying leakage models: From probing attacks to noisy leakage. In Phong Q. Nguyen and Elisabeth Oswald, editors, EUROCRYPT 2014, volume 8441 of LNCS, pages 423–440. Springer, Heidelberg, May 2014.

[26] Hassan Eldib, Chao Wang, and Patrick Schaumont. Formal verification of software countermeasures against side-channel attacks. ACM Trans. Softw. Eng. Methodol., 24(2):11:1–11:24, 2014.

[27] Sebastian Faust, Vincent Grosso, Santos Merino Del Pozo, Clara Paglialonga, and François-Xavier Standaert. Composable masking schemes in the presence of physical defaults & the robust probing model. IACR TCHES, 2018(3):89–120, 2018. https://tches.iacr.org/index.php/TCHES/article/view/7270.

[28] Barbara Gigerl, Vedad Hadzic, Robert Primas, Stefan Mangard, and Roderick Bloem. Coco: Co-design and co-verification of masked software implementations on CPUs. IACR Cryptol. ePrint Arch., 2020:1294, 2020.

[29] Louis Goubin and Jacques Patarin. DES and differential power analysis (the “duplication” method). In Çetin Kaya Koç and Christof Paar, editors, CHES’99, volume 1717 of LNCS, pages 158–172. Springer, Heidelberg, August 1999.

[30] Dahmun Goudarzi and Matthieu Rivain. How fast can higher-order masking be in software? In Jean-Sébastien Coron and Jesper Buus Nielsen, editors, EUROCRYPT 2017, Part I, volume 10210 of LNCS, pages 567–597. Springer, Heidelberg, April / May 2017.

[31] Yuval Ishai, Amit Sahai, and David Wagner. Private circuits: Securing hardware against probing attacks. In Dan Boneh, editor, CRYPTO 2003, volume 2729 of LNCS, pages 463–481. Springer, Heidelberg, August 2003.

[32] David Knichel, Pascal Sasdrich, and Amir Moradi. SILVER - statistical independence and leakage verification. In Shiho Moriai and Huaxiong Wang, editors, ASIACRYPT 2020, Part I, volume 12491 of LNCS, pages 787–816. Springer, Heidelberg, December 2020.

[33] Andrew Moss, Elisabeth Oswald, Dan Page, and Michael Tunstall. Compiler assisted masking. In Emmanuel Prouff and Patrick Schaumont, editors, CHES 2012, volume 7428 of LNCS, pages 58–75. Springer, Heidelberg, September 2012.

[34] Emmanuel Prouff and Matthieu Rivain. Masking against side-channel attacks: A formal security proof. In Thomas Johansson and Phong Q. Nguyen, editors, EUROCRYPT 2013, volume 7881 of LNCS, pages 142–159. Springer, Heidelberg, May 2013.

[35] Jun Zhang, Pengfei Gao, Fu Song, and Chao Wang. SCInfer: Refinement-based verification of software countermeasures against side-channel attacks. In Hana Chockler and Georg Weissenbacher, editors, Computer Aided Verification - 30th International Conference, CAV 2018, Held as Part of the Federated Logic Conference, FloC 2018, Oxford, UK, July 14-17, 2018, Proceedings, Part II, volume 10982 of Lecture Notes in Computer Science, pages 157–177. Springer, 2018.

### Supplementary Material

#### Proof of Lemma 2

**Proof.** The proof follows the different steps of the method described above. All the statements hold from Lemma 1 except that the sets \( I_1 \) and \( I_2 \) are necessary and sufficient for a perfect simulation of \( \mathcal{P} \). We prove this statement hereafter.

For any random distributions \( D_{\mathbf{x}_1} \) and \( D_{\mathbf{x}_2} \) over \( \mathbb{K}^n \), we denote \( D_{\mathcal{P}} \) the distribution induced on \( \mathcal{P} \) by picking \( \mathbf{x}_1 \leftarrow D_{\mathbf{x}_1} \), \( \mathbf{x}_2 \leftarrow D_{\mathbf{x}_2} \), \( \mathbf{r}_1 \leftarrow \mathbb{K}^{\rho_1} \), and \( \mathbf{r}_2 \leftarrow \mathbb{K}^{\rho_2} \). Then \( I_1 \) and \( I_2 \) are the minimal sets such that for any distributions \( D_{\mathbf{x}_1} \) and \( D_{\mathbf{x}_2} \), there exists a probabilistic algorithm \( S \) (the simulator) which, given \( \mathbf{x}_1|_{I_1} \) and \( \mathbf{x}_1|_{I_2} \), outputs a tuple \( \mathcal{P} \) that is i.i.d. as \( D_{\mathcal{P}} \) w.r.t. the random draw \( \mathbf{x}_1 \leftarrow D_{\mathbf{x}_1} \), \( \mathbf{x}_2 \leftarrow D_{\mathbf{x}_2} \), and the random coins of \( S \).

**Direction 1: The sets \( (I_1, I_2) \) are necessary to simulate \( \mathcal{P} \).**

Here, we need to perfectly simulate the distribution of \( \mathcal{P} \) given the random samplings \( \mathbf{x}_1 \leftarrow D_{\mathbf{x}_1} \), \( \mathbf{x}_2 \leftarrow D_{\mathbf{x}_2} \), \( \mathbf{r}_1 \leftarrow \mathbb{K}^{\rho_1} \), and \( \mathbf{r}_2 \leftarrow \mathbb{K}^{\rho_2} \) for any distributions \( D_{\mathbf{x}_1} \) and \( D_{\mathbf{x}_2} \) over \( \mathbb{K}^n \). Let us consider the uniform distribution for \( D_{\mathbf{x}_1} \). The first \( m \) coordinates of \( \mathcal{P} \) (i.e., the expressions of the form (8)) can be written as \( \mathcal{P}_{[m]} = ((\mathbf{u} \cdot \mathbf{h}_{p_1}(\mathbf{x}_1)), \ldots, (\mathbf{u} \cdot \mathbf{h}_{p_m}(\mathbf{x}_1))) \), where \( \mathbf{u} \) is a vector uniformly sampled on \( \mathbb{K}^{n+\rho_1} \). Recall that the \( \mathbf{h}_{p_i}(\mathbf{x}_1) \) coordinates are expressions of the form (6) w.r.t. \( (\mathbf{x}_2, \mathbf{r}_2) \).

Given the values taken by the \( \mathbf{h}_{p_i}(\mathbf{x}_1) \), we can have different distributions for \( \mathcal{P}_{[m]} \). A particular case is the distribution \( \mathcal{P}_{[m]} = \mathbf{0} \) with probability 1, which appears if and only if \( \mathbf{h}_{p_1}(\mathbf{x}_1) = \cdots = \mathbf{h}_{p_m}(\mathbf{x}_1) = \mathbf{0} \). To evaluate the probability of outputting \( \mathcal{P}_{[m]} = \mathbf{0} \) (which must be exact for a perfect simulation), the simulator must evaluate the probability that \( \mathbf{h}_{p_1}(\mathbf{x}_1) = \cdots = \mathbf{h}_{p_m}(\mathbf{x}_1) = \mathbf{0} \), which must be further conditioned on the remaining expressions \( p_i \) of the form (6) w.r.t. \( (\mathbf{x}_2, \mathbf{r}_2) \) (i.e., the probes on \( R_2 \)). This precisely means solving the linear system obtained from the expressions in \( \mathcal{P}_2 \), which can be done by Gaussian elimination w.r.t. the \( \mathbf{r}_2 \) variables (just as what is actually performed by step 4 of the verification method). The resulting equations without \( \mathbf{r}_2 \) variables imply some linear constraints on some of the shares.