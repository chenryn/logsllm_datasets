### Abstract Model
To fully test all the features of our integrated framework, we need to create an abstract model. We have chosen the PBK (Purpose-Built Keys) protocol for this case study because a standard Internet Draft specification document is available for it [25]. Additionally, one of the past versions (revision 6) of the protocol was found to be defective by the AVISPA project team [26].

### 5.1 Analysis
For this case study, we used CSP/Casper and AVISPA. In the case of the latter method, our formal model was created independently from the one prepared by the AVISPA project team in their experiments. The specifications for both AVISPA and CSP/Casper were developed based on a shared UML model, following the analytical procedure and formalization rules included in the framework. One of the UML diagrams modeling the protocol, which shows the protocol dynamics, is presented in Figure 12.

The Purpose-Built Keys (PBK) protocol aims to guarantee the authentication of the origin of the Request sent from the Initiator to the Responder. For each protocol session, the Initiator generates a fresh public/secret key pair and uses the secret key to sign the Request sent in the second message. The public part of the key pair is transmitted to the Responder in the first message. It is crucial that this first transmission reaches the Responder reliably (ensuring message integrity and authentication of origin), as there is no other way to bind the key to the Initiator’s identity. This requirement is explicitly stated in the protocol specification and is reflected in the assumption A_secure_initialization in our model, as well as a special stereotype for the first protocol message. After the Request is sent, there is an additional Challenge-Response exchange to confirm that the originating agent is indeed the holder of the private key sent during the initialization.

### 5.2 Results
This protocol has an anomaly that could potentially become a vulnerability. The issue arises from messages three and four. The Responder is expected to sign the Challenge, which is chosen arbitrarily by the Initiator. This violates the “don’t sign random strings of bits” rule of protocol design. An intruder can exploit this by using an unsuspecting honest agent as an oracle, providing them with a faked Request to sign as a seemingly “random” challenge. The intruder can then use the signed faked Request in another session, thus violating the authentication of origin.

We attempted to rediscover this attack using CSP/Casper and AVISPA. The first result was that this protocol cannot be successfully analyzed using CSP/Casper. This became apparent during the formalization phase when it was clear that the authentication of origin requirement cannot be expressed in Casper’s language, which only supports entity authentication. Entity authentication is too restrictive for this protocol and would result in finding “dummy” attacks.

AVISPA, on the other hand, offers greater flexibility in verifying security goals, and we managed to rediscover the attack using this formal method. However, the attack is successful only due to a type flaw between messages two and four. The original Internet Draft specification states that “If replay protection is necessary, a nonce value (...) or timestamp may be included with the operation request.” [25]. This means the attack can only be successful if we assume the Request is sent without a nonce and model the protocol accordingly. We included the A_request_is_signed_without_nonce assumption in the analysis report and also put it in the model shown in Figure 12. This additional information allows us to trace back the reason for the attack to a modeling decision made earlier in the process, even before formalization. This assumption was not explicitly given by the AVISPA project team that analyzed this protocol.

### Summary
We managed to rediscover the attack through independent modeling and analysis. The problems encountered with CSP/Casper highlight the importance of having a diverse set of formal methods available in any given project. The example of an important assumption present in the PBK protocol model demonstrates the added value offered by assumption traceability.

### 6. Conclusions
This paper introduces a framework that integrates object and formal modeling to support the analysis of security protocols. The framework uses extended UML (by means of stereotyping and profiling) for object modeling and several formal model checking methods. The transition between UML models and formal specifications is facilitated by using a set of UML modeling patterns and formalization rules. The process of modeling and analysis is well supported by existing tools, such as UML CASE tools and others depending on the formal methods applied: AVISPA, Casper compiler, FDR model checker, or AutoFocus.

The framework encompasses a formalized analytical procedure that guides users through a sequence of well-defined steps. The process is supported by a set of documentation templates and patterns, with particular attention to identifying and documenting the security objectives and all the assumptions that condition the results of the analyses. We found that explicit and comprehensive documentation of all identified assumptions (including their motivation, rationale, and possible consequences) together with easy-to-understand UML models was very effective in two areas: establishing communication between the analysts and the protocol designers, and tracing back all the analytical decisions made throughout the procedure.

The biggest challenge in applying the framework is the size and complexity of formal models for industry security protocols, such as the one analyzed in the distributed digital signatures case study. Our experience in analyzing the protocol with FOCUS and CSP/Casper (results reported in [22]) indicates that it involves specialized techniques for managing complexity, such as proving smaller properties first and applying the outcomes to simplify the main model. This requires extensive experience with protocol analysis and expert knowledge of the tools. Our framework is not a “push-button” technology. However, the more complex the analysis process becomes, the greater the value of having a system for controlling the focus and scope of formal modeling and for documenting and communicating the results.

In the near future, we plan further development of the framework and running more case studies, possibly with additional formal techniques. We are also developing a software tool to support the workflow of our analytical procedure and assist with managing all the artifacts created during the analysis.

### References
[1] C. Fidge, “A Survey of Verification Techniques for Security Protocols Technical Report 01-22”, Software Verification Research Centre, School of Information Technology, The University of Queensland, 2001.
[2] R. Anderson, “Security Engineering”, Wiley, ISBN: 0-471-38922-6, 2001.
[3] C. A. Meadows, “Formal Verification of Cryptographic Protocols: A Survey”, ASIACRYPT: Advances in Cryptology, 1995.
[4] M. Burrows, M. Abadi, R. Needham, “A logic of authentication. Technical Report TR 39”, Digital Equipment Corporation, February 1989.
[5] L. Paulson, “The inductive approach to verifying cryptographic protocols”, University of Cambridge Computer Laboratory, December 1998.
[6] A. Armando, D. Basin, Y. Boichut, Y. Chevalier, L. Compagna, J. Cuellar, P. Hankes Drielsma, P.C. Heám, O. Kouchnarenko, J. Mantovani, S. Mödersheim, D. von Oheimb, M. Rusinowitch, J. Santiago, M. Turuani, L. Viganò, L. Vigneron, “The Avispa Tool for the automated validation of internet security protocols and applications”, Computer Aided Verification, LNCS 3576, 2005.
[7] F. J. Thayer, J.C. Herzog, J.D. Guttman, “Strand spaces: Why is a security protocol correct?”, Proceedings of 1998 IEEE Symposium on Security and Privacy, 1998.
[8] A.W. Roscoe, “The Theory and Practice of Concurrency”, Prentice-Hall, International Series in Computer Science, ISBN 0-13-674409-5, 1998.
[9] B. Broy, F. Dederichs, M. Fuchs, T.F. Gritzner, R. Weber, “The Design of Distributed Systems – An Introduction to FOCUS”, SFB-Report 342/2-2/92 A, Technical University of Munich, 1993.
[10] M. Abadi, A. D. Gordon, “A calculus for cryptographic protocols: The Spi Calculus”, In Proceedings of the 4th ACM Conference on Computer and Communications Security, ACM Press, 1997.
[11] L. Vigneron, “Specification Languages for Internet Security Protocols”, Workshop on Automated Validation of Internet Security Protocols and Applications, 2004.
[12] J. M. Bruel, “Integrating Formal and Informal Specification Techniques. Why? How?”, Second IEEE Workshop on Industrial Strength Formal Specification Techniques, 1998.
[13] J. M. Bruel, R. B. France, “Transforming UML models to Formal Specifications”, International Conference on the Unified Modelling Language (UML): Beyond the Notation, 1998.
[14] E. Boiten, M. Bujorianu, “Exploring UML Refinement through Unification”, Critical Systems Development with UML - Proceedings of the UML'03 workshop, number TUM-I0323, pages 47-62, Technische Universitat Munchen, September 2003.
[15] J. Jurjens, “Secure Systems Development with UML”, Springer, ISBN: 3-540-00701-6, 2004.
[16] CASENET, European Union 5th Framework Program project, IST-2001-32446.
[17] J. Rumbaugh, I. Jacobson, G. Booch, “The Unified Modelling Language Reference Manual (2nd Edition)”, Addison-Wesley, 2005.
[18] S. Johnston, “Rational UML Profile for business modeling”, IBM Corp. whitepaper, 2004.
[19] B. Selic, “Unified Modeling Language version 2.0”, IBM Corp. whitepaper, 2005.
[20] W. Chocianowicz, J. Pejas, A. Rucinski, “The Proposal of Protocol for Electronic Signature Creation in Public Environment”, in Enhanced Methods in Computer Security, Biometric and Artificial Intelligence Systems, Kluwer Academic Publishers, ISBN 1-4020-7776-9, 2005.
[21] W. Chocianowicz, W. Mackow, A. Skrobek, P. Sukiennik, J. Pejas, Project No. 6 T11 2003 C/0 6280 – Technical Report 7: “Design and implementation of an universal module for reliable presentation of a document to be signed or verified”, Szczecin University of Technology, 2004.
[22] M. Olszewski, “A Model-based Approach to Analysis of Security Protocols – A Case Study”, Proceedings of the Technologies for Homeland Security and Safety Conference, Poland, 2005.
[23] J. Jurjens, G. Wimmel, “Formally Testing Fail-Safety of Electronic Purse Protocols”, 2001.
[24] J. Grunbauer, H. Hollmann, J. Jurjens, G. Wimmel, “Modelling and Verification of Layered Security Protocols: A Bank Application”, Computer Safety, Reliability, and Security, 22nd International Conference SAFECOMP, 2003.
[25] S. Bradner, A. Mankin, J. Schiller, "A Framework for Purpose-Built Keys (PBK)", IETF Internet-Draft: draft-bradner-pbk-frame-06.txt, 2003.
[26] The AVISPA Library of protocols, http://www.avispa-project.org/, AVISPA project: IST-2001-39252.