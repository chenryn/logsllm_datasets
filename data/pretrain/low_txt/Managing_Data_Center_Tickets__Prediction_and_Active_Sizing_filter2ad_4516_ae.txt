### Figure 12: Overtime Plots of CPU Utilization for VMs on Nodes 2, 3, and 4, with and without Resizing

- **Time (hour)**
  - 0
  - 1
  - 2
  - 3
  - 4
  - 5
- **CPU Utilization (%)**
  - 100
  - 80
  - 60
  - 40
  - 20
  - 0

**Figure 12** shows the overtime plots of CPU utilization for VMs located on Nodes 2, 3, and 4, both with and without resizing. The x-axis represents time in hours, and the y-axis represents CPU utilization as a percentage.

### Performance Comparison for Wiki-One and Wiki-Two

- **Mean Response Time (ms)**
  - 800
  - 640
  - 480
  - 320
  - 160
  - 0
- **Throughput (requests/sec)**
  - 50
  - 40
  - 30
  - 20
  - 10
  - 0

**Figure 13** compares the performance of wiki-one and wiki-two, both in their original state and after resizing with ATM. The x-axis represents mean response time in milliseconds, and the y-axis represents throughput in requests per second.

- **Wiki-One**
  - Mean response time with resizing decreases by 20% (from 582 ms to 454 ms).
  - Throughputs are maintained at almost the same levels.
- **Wiki-Two**
  - Throughput increases by more than 20% (from 14 to 17 requests/sec).
  - Response time increases by 7% (from 915 ms to 979 ms).

This suggests that with ATM, the servers can fully serve the offered load, maintain good performance values, and keep the number of tickets to a minimum, demonstrating the ultimate goal of ATM.

### Related Work

Ticketing systems are widely used to improve system dependability, addressing issues such as slow responsiveness, failures [4], software bugs [21, 22], and system misconfigurations [23]. Prior research in ticketing systems has focused on two main directions:

1. **System Management for Concurrency and Data-Intensive Systems:**
   - Software concurrency [21]
   - Database systems [3]
   - Distributed data-intensive systems [24]

2. **Automatic Detection Systems:**
   - Leveraging rich correlations between configuration entries to detect different types of tickets, bugs [22], and software misconfigurations [23].

Machine learning has been used for automating ticket resolution recommendations [25, 26, 9]. To the best of our knowledge, there are no proactive methodologies for preventing ticket issuance, with the exception of models for database reconfiguration [27]. The proposed ATM policy fills this gap by not only deriving management insights for usage ticket patterns but also by developing novel prediction and ticket avoidance strategies using VM resizing.

### Time Series Prediction and Analysis

Time series prediction and analysis have been viewed as an excellent way to develop proactive system management policies [28, 29]. Temporal models such as ARIMA models [10] have been widely used to predict time series with strong seasonality. Sophisticated neural network models show promise in capturing highly irregular time series, albeit at the cost of long training overheads [30]. Time series clustering aims to explore spatial dependencies, either through their original series (e.g., DTW [12]) or extracted features (e.g., moments [11]).

ATM combines spatial and temporal models to contain the cost of neural network training and scales well for very large numbers of time series.

### Virtualization Technology

Virtualization technology has become the industry standard, offering great opportunities to multiplex physical resources over a large number of VMs. There are two ways to change the efficiency of resource multiplex ratios:

1. **Sizing Virtual Resource Capacities [31]:**
   - Incurs less system overhead compared to dynamic consolidation.

2. **Dynamic Consolidation of VMs [32]:**
   - Effective in taking advantage of the time variability of workloads [33].
   - Overhead of migrating VMs can reduce performance benefits.

A central question in multiplexing resources is how to strike a good tradeoff between fairness and performance for workloads, such as latency [34] and throughput [35]. Fairness-driven policies, such as max-min fairness, proportional fairness, and bottleneck resource fairness [36], have been proposed for various system components, including storage systems [35] and networks [37]. The sizing algorithm proposed in ATM differs from related work by its objective to reduce the number of usage tickets. While max-min fairness also reduces the number of tickets, it cannot achieve this as effectively as ATM since ticket reduction is a side-effect rather than a main focus.

### Concluding Remarks

We presented ATM, a methodology to achieve efficient VM resizing to reduce VM usage tickets issued in production data centers. We have shown the effectiveness of ATM in predicting usage series in production data centers by exploiting spatial usage patterns of co-located VMs within the same box and by using detailed prediction of a small subset of the usage series, allowing the methodology to scale well. This prediction drives the development of a VM resizing policy that is effective on a production trace and a working prototype. In future work, we intend to use ATM’s prediction abilities to drive online dynamic workload management.

### Acknowledgment

The research presented in this paper has been supported by NSF grant CCF-1218758, EU commission FP7 GENiC project (Grant Agreement No. 608826), and the Swiss National Science Foundation (project 200021 141002).

### References

[1] Y. Liang, Y. Zhang et al., “Bluegene/l failure analysis and prediction models,” in Proceedings of the 36th IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), pp. 425–434. IEEE, 2006.

[2] I. Giurgiu, J. Bogojeska et al., “Analysis of labor efforts and their impact factors to solve server incidents in datacenters,” in Proceedings of the 14th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing (CCGrid), pp. 424–433. IEEE, 2014.

[3] I. Giurgiu, A.-D. Almasi, and D. Wiesmann, “Do you know how to configure your enterprise relational database to reduce incidents?” in Proceedings of IFIP/IEEE International Symposium on Integrated Network Management (IM), pp. 339–347. IEEE, 2015.

[4] R. Birke, I. Giurgiu et al., “Failure analysis of virtual and physical machines: patterns, causes and characteristics,” in Proceedings of the 44th IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), pp. 1–12. IEEE, 2014.

[5] R. Birke, A. Podzimek et al., “State-of-the-practice in data center virtualization: toward a better understanding of VM usage,” in Proceedings of the 43rd IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), pp. 1–12. IEEE, 2013.

[6] R. Birke, M. Bjoerkqvist et al., “(Big) data in a virtualized world: volume, velocity, and variety in cloud datacenters,” in Proceedings of the 12th USENIX Conference on File and Storage Technologies (FAST), pp. 177–189. USENIX, 2014.

[7] J. Xue, F. Yan et al., “PRACTISE: robust prediction of data center time series,” in Proceedings of the 11th International Conference on Network and Service Management (CNSM), pp. 126–134. IEEE, 2015.

[Online]. Available: https://www.mediawiki.org/wiki/

[8] MediaWiki. MediaWiki. [Online]. Available: https://www.mediawiki.org/wiki/

[9] M. M. Botezatu, J. Bogojeska et al., “Multi-view incident ticket clustering for optimal ticket dispatching,” in Proceedings of the 21st ACM International Conference on Knowledge Discovery and Data Mining (SIGKDD), pp. 1711–1720. ACM, 2015.

[10] C. Chatfield, The analysis of time series: an introduction. CRC press, 2013.

[11] B. D. Fulcher and N. S. Jones, “Highly comparative feature-based time-series classification,” IEEE Transactions on Knowledge and Data Engineering, vol. 26, no. 12, pp. 3026–3037, 2014.

[12] D. J. Berndt and J. Clifford, “Using dynamic time warping to find patterns in time series.” in KDD workshop, vol. 10, no. 16, pp. 359–370, 1994.

[13] L. Rokach and O. Maimon, “Clustering methods,” in Data mining and knowledge discovery handbook. Springer, 2005, pp. 321–352.

[14] P. J. Rousseeuw, “Silhouettes: a graphical aid to the interpretation and validation of cluster analysis,” Journal of Computational and Applied Mathematics, vol. 20, pp. 53–65, 1987.

[15] M. Kutner, C. Nachtsheim, and J. Neter, Applied Linear Regression Models. McGraw-Hill Education, 2004.

[16] L. Tassiulas and S. Sarkar, “Maxmin fair scheduling in wireless networks,” in Proceedings of the 21st IEEE International Conference on Computer Communications (INFOCOM), vol. 2, pp. 763–772. IEEE, 2002.

[17] A. Ghodsi, M. Zaharia et al., “Dominant resource fairness: fair allocation of multiple resource types,” in Proceedings of the 8th USENIX Symposium on Networked Systems Design and Implementation (NSDI), pp. 323–336. USENIX, 2011.

[18] CPLEX Optimizer. [Online]. Available: http://www-01.ibm.com/software/commerce/optimization/cplex-optimizer/index.html

[19] D. Pisinger, “A minimal algorithm for the multiple-choice knapsack problem,” European Journal of Operational Research, vol. 83, no. 2, pp. 394–410, 1995.

[20] CGROUPS. Documentation/cgroups/cgroups.txt. [Online]. Available: https://www.kernel.org/doc/

[21] S. Lu, S. Park et al., “Learning from mistakes: a comprehensive study on real-world concurrency bug characteristics,” in Proceedings of the 13th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), pp. 329–339. ACM, 2008.

[22] A. Nistor, P.-C. Chang et al., “Caramel: detecting and fixing performance problems that have non-intrusive fixes,” in Proceedings of the 37th International Conference on Software Engineering (ICSE), pp. 902–912. IEEE, 2015.

[23] J. Zhang, L. Renganarayana et al., “Encore: exploiting system environment and correlation information for misconfiguration detection,” ACM SIGPLAN Notices, vol. 49, no. 4, pp. 687–700, 2014.

[24] D. Yuan, Y. Luo et al., “Simple testing can prevent most critical failures: an analysis of production failures in distributed data-intensive systems,” in Proceedings of the 11th USENIX Symposium on Operating Systems Design and Implementation (OSDI), pp. 249–265. USENIX, 2014.

[25] W. Zhou, L. Tang et al., “Resolution recommendation for event tickets in service management,” in Proceedings of IFIP/IEEE International Symposium on Integrated Network Management (IM), pp. 287–295. IEEE, 2015.

[26] Q. Shao, Y. Chen et al., “Easyticket: a ticket routing recommendation engine for enterprise problem resolution,” Proceedings of the VLDB Endowment, vol. 1, no. 2, pp. 1436–1439, 2008.

[27] I. Giurgiu, M. Botezatu, and D. Wiesmann, “Comprehensible models for reconfiguring enterprise relational databases to avoid incidents,” in Proceedings of the 24th ACM International Conference on Information and Knowledge Management (CIKM), pp. 1371–1380. ACM, 2015.

[28] N. Tran and D. A. Reed, “Automatic ARIMA time series modeling for adaptive I/O prefetching,” IEEE Transactions on Parallel Distributed Systems, vol. 15, no. 4, pp. 362–377, 2004.

[29] Z. Zhuang, H. Ramachandra et al., “Capacity planning and headroom analysis for taming database replication latency: experiences with LinkedIn internet traffic,” in Proceedings of the 6th ACM/SPEC International Conference on Performance Engineering (ICPE), pp. 39–50. ACM, 2015.

[30] R. Livni, S. Shalev-Shwartz, and O. Shamir, “On the computational efficiency of training neural networks,” in Proceedings of the 28th Conference on Neural Information Processing Systems (NIPS), pp. 855–863, 2014.

[31] S. Spinner, N. Herbst et al., “Proactive memory scaling of virtualized applications,” in Proceedings of the 8th IEEE International Conference on Cloud Computing (CLOUD), pp. 277–284. IEEE, 2015.

[32] M. Wang, X. Meng, and L. Zhang, “Consolidating virtual machines with dynamic bandwidth demand in data centers,” in Proceedings of the 30th IEEE International Conference on Computer Communications (INFOCOM), pp. 71–75. IEEE, 2011.

[33] C. Delimitrou and C. Kozyrakis, “Quasar: resource-efficient and QoS-aware cluster management,” in Proceedings of the 19th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), pp. 127–144. ACM, 2014.

[34] A. Gulati, A. Merchant, and P. J. Varman, “pClock: an arrival curve based approach for QoS guarantees in shared storage systems,” in Proceedings of the 33rd ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems, pp. 13–24. ACM, 2007.

[35] H. Wang and P. Varman, “Balancing fairness and efficiency in tiered storage systems with bottleneck-aware allocation,” in Proceedings of the 12th USENIX Conference on File and Storage Technologies (FAST), pp. 229–242. USENIX, 2014.

[36] T. Bonald and J. Roberts, “Multi-resource fairness: objectives, algorithms and performance,” in Proceedings of the 41st ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems, pp. 31–42. ACM, 2015.

[37] A. Sridharan and B. Krishnamachari, “Maximizing network utilization with max–min fairness in wireless sensor networks,” Wireless Networks, vol. 15, no. 5, pp. 585–600, 2009.