### Executing Arbitrary Syscalls

Further research is required to design and validate ECALL/OCALL interfaces, particularly to avoid API-level attacks that may arise from overly permissive OCALLs or through confused deputy [22] and Iago attacks [11]. Generally, enclave-to-host communication should not be considered asymmetric (as in the kernel's syscall interface) but as part of a mutually distrusted API where both parties distrust each other. Mutual distrust is a key principle in designing secure web APIs. Since enclave malware poses similar threats to web applications, there is an overlap in defense strategies [43]. Specifically, input validation or sanitization [43, Section V5] can help prevent Iago-style attacks, while verification of the logical execution flow [43, Section V11] can mitigate confused deputy attacks.

### Closing Side Channels

Several side-channel attacks have been demonstrated against benign SGX enclaves [7, 19, 34, 41, 59, 63]. Additionally, malicious enclaves themselves can mount side-channel attacks [21, 53, 54]. Although this is not the primary focus of our work, SGXJail mitigates a variety of side-channel attacks that exploit host application memory. For example, it prevents Flush+Reload on shared host libraries, Prime+Probe using host application arrays [54], Rowhammer attacks from within enclaves [21], and TSX-based address probing [53].

### Conclusion

While secure enclave technology like Intel SGX is designed to enhance system security, it can also be misused to shield malware inside enclaves. Research on potential enclave malware is still in its early stages, and practical defense mechanisms are largely non-existent. In this work, we identified the root cause of enclave malware as insufficient enclave-to-host isolation and proposed (H)SGXJail as a comprehensive defense against a wide range of enclave malware threats. (H)SGXJail enforces mutual isolation between host applications and enclaves, protecting applications from potentially misbehaving or malicious third-party enclaves. Our proof-of-concept implementation shows zero overhead for pure enclave computation and less than 3% for realistic workloads. SGXJail is tightly integrated into the SGX SDK and can be used out-of-the-box. Furthermore, we propose HSGXJail, which provides enclave confinement using Intel MPK with minimal extensions to the SGX specification at virtually no cost. We believe HSGXJail should be immediately rolled out via a microcode update to SGX-enabled CPUs to proactively enable our SGX malware defense. However, support for MPK is still limited; although some server CPUs support MPK [64], it is unclear when x86-based desktop CPUs will follow suit.

Beyond defending against enclave malware, (H)SGXJail opens up new use cases for Intel SGX and similar isolation technologies. For instance, (H)SGXJail can serve as a lightweight and secure sandboxing mechanism for browser site isolation or plugin management, where third-party code has proven to be both potentially malicious and security-critical.

### Acknowledgements

This project received funding from the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation programme (grant agreement No 681402). It was also supported by the Austrian Research Promotion Agency (FFG) via the K-project DeSS-net, funded in the context of COMET – Competence Centers for Excellent Technologies by BMVIT, BMWFW, Styria, and Carinthia. Additional funding was provided by a generous gift from Intel. The opinions, findings, and conclusions expressed in this paper are those of the authors and do not necessarily reflect the views of the funding parties.

### References

[1] Martín Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti. Control-Flow Integrity. In CCS, 2005.
[2] Erick Bauman and Zhiqiang Lin. A Case for Protecting Computer Games with SGX. In Workshop on System Software for Trusted Execution, 2016.
[3] Andrew Baumann, Marcus Peinado, and Galen Hunt. Shielding Applications from an Untrusted Cloud with Haven. ACM Transactions on Computer Systems, 2015.
[4] Andrea Bittau, Adam Belay, Ali Mashtizadeh, David Mazières, and Dan Boneh. Hacking Blind. In S&P, 2014.
[11] Stephen Checkoway and Hovav Shacham. Iago Attacks: Why the System Call API is a Bad Untrusted RPC Interface. In ASPLOS, 2013.
[12] Tzi-cker Chiueh and Fu-Hau Hsu. RAD: A Compile-Time Solution to Buffer Overflow Attacks. In International Conference on Distributed Computing Systems, 2001.
[13] Victor Costan and Srinivas Devadas. Intel SGX Explained. 2016.
[14] Crispan Cowan, Calton Pu, Dave Maier, Jonathan Walpole, Peat Bakke, Steve Beattie, Aaron Grier, Perry Wagle, Qian Zhang, and Heather Hinton. StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks. In USENIX Security, 1998.
[15] Stephen Crane, Christopher Liebchen, Andrei Homescu, Lucas Davi, Per Larsen, Ahmad-Reza Sadeghi, Stefan Brunthaler, and Michael Franz. Readactor: Practical Code Randomization Resilient to Memory Disclosure. In S&P, 2015.
[16] Shaun Davenport and Richard Ford. SGX: The Good, the Bad and the Downright Ugly, January 2014. URL: https://www.virusbulletin.com/virusbulletin/2014/01/sgx-good-bad-and-downright-ugly.
[17] Anders T Gjerdrum, Robert Pettersen, Håvard D Johansen, and Dag Johansen. Performance of Trusted Computing in Cloud Infrastructures with Intel SGX. In International Conference on Cloud Computing and Services Science, 2017.
[18] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and Georgios Portokalidis. Out of Control: Overcoming Control-Flow Integrity. In S&P, 2014.
[19] Johannes Götzfried, Moritz Eckert, Sebastian Schinzel, and Tilo Müller. Cache Attacks on Intel SGX. In EuroSec, 2017.
[20] Daniel Gruss, Dave Hansen, and Brendan Gregg. Kernel Isolation: From an Academic Idea to an Efficient Patch for Every Computer. USENIX ;login, 2018.
[21] Daniel Gruss, Moritz Lipp, Michael Schwarz, Daniel Genkin, Jonas Juffinger, Sioli O’Connell, Wolfgang Schoechl, and Yuval Yarom. Another Flip in the Wall of Rowhammer Defenses. In S&P, 2018.
[22] Norman Hardy. The Confused Deputy (or Why Capabilities Might Have Been Invented). Operating Systems Review, 22(4):36–38, 1988.
[23] Tyler Hunt, Zhiting Zhu, Yuanzhong Xu, Simon Peter, and Emmett Witchel. Ryoan: A Distributed Sandbox for Untrusted Computation on Secret Data. In Usenix OSDI, 2016.
[24] Intel. Intel Software Guard Extensions SSL. URL: https://github.com/intel/intel-sgx-ssl.
[25] Intel. Intel Software Guard Extensions SDK for Linux OS Developer Reference, May 2016. Rev 1.5.
[26] Intel. Intel® 64 and IA-32 Architectures Software Developer's Manual, Volume 3 (3A, 3B & 3C): System Programming Guide. (325384), 2016.
[27] Intel. Control-Flow Enforcement Technology Preview, June 2017. Revision 2.0.
[28] Kyriakos K. Ispoglou, Bader AlBassam, Trent Jaeger, and Mathias Payer. Block-Oriented Programming: Automating Data-Only Attacks. In CCS, 2018.
[29] Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye Lee, Donghyuk Lee, Chris Wilkerson, Konrad Lai, and Onur Mutlu. Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors. In ISCA, 2014.
[30] Klaudia Krawiecka, Arseny Kurnikov, Andrew Paverd, Mohammad Mannan, and N Asokan. Protecting Web Passwords from Rogue Servers Using Trusted Execution Environments. arXiv:1709.01261, 2017.
[31] Volodymyr Kuznetsov, László Szekeres, Mathias Payer, George Candea, R Sekar, and Dawn Song. Code-Pointer Integrity. In OSDI, 2014.
[32] Bingchen Lan, Yan Li, Hao Sun, Chao Su, Yao Liu, and Qingkai Zeng. Loop-Oriented Programming: A New Code Reuse Attack to Bypass Modern Defenses. In IEEE Trustcom/BigDataSE/ISPA, 2015.
[33] Jaehyuk Lee, Jinsoo Jang, Yeongjin Jang, Nohyun Kwak, Yeseul Choi, Changho Choi, Taesoo Kim, Marcus Peinado, and Brent Byunghoon Kang. Hacking in Darkness: Return-Oriented Programming Against Secure Enclaves. In USENIX Security, 2017.
[34] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim, and Marcus Peinado. Inferring Fine-Grained Control Flow Inside SGX Enclaves with Branch Shadowing. In USENIX Security Symposium, 2017.
[35] Xueping Liang, Sachin Shetty, Deepak Tosh, Charles Kamhoua, Kevin Kwiat, and Laurent Njilla. Provchain: A Blockchain-Based Data Provenance Architecture in Cloud Environment with Enhanced Privacy and Availability. In International Symposium on Cluster, Cloud and Grid Computing, 2017.
[36] Linux Kernel. SECure COMPuting with Filters, 2017. URL: https://www.kernel.org/doc/Documentation/prctl/seccomp_filter.txt.
[37] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. Meltdown: Reading Kernel Memory from User Space. In USENIX Security Symposium, 2018.
[38] Marion Marschalek. The Wolf in SGX Clothing. Bluehat IL, January 2018.
[39] Ali José Mashtizadeh, Andrea Bittau, Dan Boneh, and David Mazières. CCFI: Cryptographically Enforced Control-Flow Integrity. In CCS, 2015.
[40] Dirk Merkel. Docker: Lightweight Linux Containers for Consistent Development and Deployment. Linux Journal, 2014.
[41] Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisenbarth. CacheZoom: How SGX Amplifies the Power of Cache Attacks. In CHES, 2017.
[42] Nicolas Bacca. Soft Launching Ledger SGX Enclave, 2017. URL: https://www.ledger.fr/2017/05/22/soft-launching-ledger-sgx-enclave/.
[43] OWASP. OWASP Application Security Verification Standard 4.0, 2019.
[44] Vasilis Pappas, Michalis Polychronakis, and Angelos D. Keromytis. Smashing the Gadgets: Hindering Return-Oriented Programming Using In-Place Code Randomization. In S&P, 2012.
[45] PaX Team. Address Space Layout Randomization (ASLR), 2003. URL: http://pax.grsecurity.net/docs/aslr.txt.
[46] PaX Team. RAP: RIP ROP. Hackers to Hackers Conference, 2015.
[47] Charlie Reis. Mitigating Spectre with Site Isolation. URL: https://security.googleblog.com/2018/07/mitigating-spectre-with-site-isolation.html.
[48] Joanna Rutkowska. Thoughts on Intel’s Upcoming Software Guard Extensions (Part 2), 2013. URL: http://theinvisiblethings.blogspot.com/2013/09/.
[49] Jerome H. Saltzer and Michael D. Schroeder. The Protection of Information in Computer Systems. Proceedings of the IEEE, 63(9):1278–1308, 1975.
[50] Felix Schuster, Manuel Costa, Cédric Fournet, Christos Gkantsidis, Marcus Peinado, Gloria Mainar-Ruiz, and Mark Russinovich. VC3: Trustworthy Data Analytics in the Cloud Using SGX. In S&P, 2015.
[51] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza Sadeghi, and Thorsten Holz. Counterfeit Object-Oriented Programming: On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In S&P, 2015.
[52] Michael Schwarz, Daniel Gruss, Moritz Lipp, Clémentine Maurice, Thomas Schuster, Anders Fogh, and Stefan Mangard. Automated Detection, Exploitation, and Elimination of Double-Fetch Bugs Using Modern CPU Features. AsiaCCS, 2018.
[53] Michael Schwarz, Samuel Weiser, and Daniel Gruss. Practical Enclave Malware with Intel SGX. In DIMVA, 2019.
[54] Michael Schwarz, Samuel Weiser, Daniel Gruss, Clémentine Maurice, and Stefan Mangard. Malware Guard Extension: Using SGX to Conceal Cache Attacks. In DIMVA, 2017.
[55] Hovav Shacham. The Geometry of Innocent Flesh on the Bone: Return-Into-Libc Without Function Calls (on the x86). In CCS, 2007.
[56] László Szekeres, Mathias Payer, Tao Wei, and Dawn Song. SoK: Eternal War in Memory. In S&P, 2013.
[57] Adrian Tang, Simha Sethumadhavan, and Salvatore Stolfo. Heisenbyte: Thwarting Memory Disclosure Attacks Using Destructive Code Reads. In CCS, 2015.
[58] Pengfei Wang, Kai Lu, Gen Li, and Xu Zhou. A Survey of the Double-Fetch Vulnerabilities. Concurrency and Computation: Practice and Experience, 30(6), 2018.
[59] Wenhao Wang, Guoxing Chen, Xiaorui Pan, Yinqian Zhang, XiaoFeng Wang, Vincent Bindschaedler, Haixu Tang, and Carl A Gunter. Leaky Cauldron on the Dark Land: Understanding Memory Side-Channel Hazards in SGX. In CCS, 2017.
[60] Nico Weichbrodt, Anil Kurmus, Peter Pietzuch, and Rüdiger Kapitza. AsyncShock: Exploiting Synchronization Bugs in Intel SGX Enclaves. In ESORICS, 2016.
[61] Ofer Weisse, Valeria Bertacco, and Todd M. Austin. Regaining Lost Cycles with HotCalls: A Fast Interface for SGX Secure Enclaves. In ISCA, 2017.
[62] Jan Werner, George Baltas, Rob Dallara, Nathan Otterness, Kevin Z Snow, Fabian Monrose, and Michalis Polychronakis. No-Execute-After-Read: Preventing Code Disclosure in Commodity Software. In AsiaCCS, 2016.
[63] Y. Xu, W. Cui, and M. Peinado. Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems. In S&P, May 2015.
[64] Mingwei Zhang. XOM-Switch, 2019. URL: https://github.com/intel/xom-switch.