### Theorem 5.1

**Theorem 5.1.** Suppose the underlying signature scheme is existentially unforgeable against chosen message attacks. The protocol \(\Pi(i, C)\) in the \(F_{\text{L}}(\Delta)(C)\)-hybrid model emulates the ideal functionality \(F_{\text{L}}(\Delta)(1, C)\) against environments from class \(E_{\text{res}}\) for every set of contract codes \(C\) and every \(\Delta \in \mathbb{N}\).

### Virtual State Channels

As mentioned in Section 2, our technique allows the creation of virtual state channels of arbitrary length through recursive use of the state channel functionality. Specifically, a protocol for constructing state channels of length up to \(i\) will work in a model with access to an ideal functionality for constructing state channels of length up to \(i-1\). More formally, for every \(i > 1\), we construct a protocol \(\Pi(i, C)\) that realizes the ideal functionality \(F_{\text{L}}(\Delta)(i-1, C')\) in the \((i-1, C')\)-hybrid world. Here, \(C'\) is a set of contract codes defined as \(C' := C \cup \text{VSCC}_i(C)\), where \(\text{VSCC}_i(C)\) is a contract code, which we call the virtual state channel contract, that allows the creation of a virtual state channel of length \(i\) in which contract instances with codes from the set \(C\) can be opened. Thus, the hybrid ideal functionality \(F_{\text{L}}(\Delta)(i-1, C')\) allows the creation of state channels that can serve as subchannels of a virtual channel of length \(i\).

In brief, the hybrid ideal functionality is used by the parties of the protocol \(\Pi(i, C)\) as follows: if a party receives a message regarding a state channel of length \(j < i\), this message is forwarded to the hybrid ideal functionality \(F_{\text{L}}(\Delta)(i-1, C')\). This process continues recursively until the base case of a state channel of length 1 is reached. The hybrid ideal functionality is thus used to emulate the behavior of a state channel of length \(i\) by leveraging the functionality of state channels of length \(i-1\).

By applying this composition recursively, we get a construction for \(\Pi(i, C)\) in the \(F_{\(\text{L}\)}(\Delta)(\hat{C})\)-hybrid model, where \(\hat{C}\) is the result of applying the equation \(C := C \cup \text{VSCC}_i(C)\) recursively \(i\) times. See Figure 5 for an example when \(i = 3\).

\[ F_{\text{ch}}(3, C) \sim \Pi(3, C) \]
\[ F_{\text{ch}}(2, C') \sim \Pi(2, C') \]
\[ F_{\text{ch}}(1, C'') \sim \Pi(1, C'') \]
\[ F_{\text{scc}}(C'') \]

**Figure 5:** Our modular approach. Above, \(F_{\text{ch}} := F_{\text{L}}(\Delta)\), \(C' := C \cup \text{VSCC}_3(C)\), and \(C'' := C' \cup \text{VSCC}_2(C')\).

### Conclusion

We have demonstrated how to build general state channel networks, allowing for state channels of arbitrary length in which arbitrary contracts can be opened and executed off-chain. Our modular approach enables a recursive construction of state channels (i.e., a virtual channel of length \(i\) is built on top of two state channels of length \(\lceil i/2 \rceil\)), significantly simplifying the description of our construction. All protocols were proven to be secure in the global UC model, and their optimistic time complexity is independent of the channel length. In the pessimistic case, when malicious parties try to delay the protocol execution, the time complexity of our construction is linear in the channel length. We did not aim to optimize the pessimistic time complexity of our protocols, as this would complicate their description. A more fine-grained timing analysis, which would reduce the constants in the pessimistic time complexity, and corresponding optimization of our state channel protocol are highly recommended before implementation. Another open question is whether virtual state channels with time complexity independent of the channel length could be designed (e.g., using techniques from [24]).

### Incentivizing Intermediaries

An important practical question is why a party would want to become an intermediary in a virtual state channel. Although our construction guarantees that an honest intermediary will never lose coins, the fact that an intermediary must lock coins for the entire lifetime of the virtual channel makes this role unattractive. This problem can be addressed by adding the concept of service fees to our construction. For example, both Alice and Bob could lock additional coins in the VSCC contract instance each opens in their channel with Ingrid during the virtual state channel creation. Specifically, to create a virtual state channel \(\gamma\), Alice would lock \(\gamma.\text{cash}(A) + \text{serviceFee}\) coins in the channel \(\alpha\) she has with Ingrid, and Bob would lock \(\gamma.\text{cash}(B) + \text{serviceFee}\) coins in the channel \(\beta\) he has with Ingrid. During the closure of \(\gamma\) (assuming it was successfully created), the service fee would be unlocked from the VSCC contract instances in favor of Ingrid in both channels \(\alpha\) and \(\beta\).

### Suitable Contract Codes – A Cautionary Note

We would like to highlight a subtle issue that users of future real-life implementations need to be aware of. As discussed in Section 3.2, the security guarantees provided to the end-users of a state channel are strongly dependent on the code of the contract instance that is opened in the state channel. In principle, this is the same as in the case of standard contracts on the ledger, but there are several additional aspects to consider when designing contract codes for state channels. Recall that all coins locked in a contract instance when the underlying virtual state channel is closed are assigned to the intermediary of the channel. Therefore, it is crucial that a contract instance is terminated by any end-user before the validity of the underlying virtual state channel expires. Another important point to keep in mind is that although our construction guarantees that end-users of a state channel can execute a contract instance in any round and on any contract function, it might take (in the pessimistic case) up to \(\text{TimeExeReq}(i)\) rounds before the other party is notified about the execution and \(\text{TimeExe}(i)\) rounds before the execution takes place (where \(i\) denotes the length of the state channel). Thus, compared to the contract deployment directly on the blockchain, the notification and execution delay might be longer.

### Acknowledgments

This work has been supported by the Polish National Science Centre grant 2014/13/B/ST6/03540 and by the German Research Foundation (DFG) as part of project S7 within the CRC 1119 CROSSING and by the Emmy Noether Program FA 1320/1-1. We thank Jeff Coleman for several useful comments and, in particular, for pointing out a weakness of an earlier version of our protocol when taking fees into account.

### References

[1] 2017. Update from the Raiden team on development progress, announcement of raidEX. (Feb. 2017). https://tinyurl.com/z2snp9e.
[2] 2018. Bitcoin Wiki: Payment Channels. (2018). https://en.bitcoin.it/wiki/Payment_channels.
[3] 2018. Bitcoin Wiki: Scalability. (last visited May 2018). https://en.bitcoin.it/wiki/Nanopayments.
[4] 2018. Counterfactual. (2018). https://counterfactual.com/.
[5] Ian Allison. 2016. Ethereum’s Vitalik Buterin explains how state channels address privacy and scalability. (July 2016).
[6] Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, and Lukasz Mazurek. 2014. Secure Multiparty Computations on Bitcoin. In 2014 IEEE Symposium on Security and Privacy. IEEE Computer Society Press, Berkeley, CA, USA, 443–458. https://doi.org/10.1109/SP.2014.35
[7] Iddo Bentov and Ranjit Kumaresan. 2014. How to Use Bitcoin to Design Fair Protocols. In Advances in Cryptology – CRYPTO 2014, Part II (Lecture Notes in Computer Science), Juan A. Garay and Rosario Gennaro (Eds.), Vol. 8617. Springer, Heidelberg, Germany, Santa Barbara, CA, USA, 421–439. https://doi.org/10.1007/978-3-662-44381-1_24
[8] Iddo Bentov, Ranjit Kumaresan, and Andrew Miller. 2017. Instantaneous Decentralized Poker. In Advances in Cryptology – ASIACRYPT 2017, Tsuyoshi Takagi and Thomas Peyrin (Eds.). Springer International Publishing, Cham, 410–440.
[9] Ran Canetti. 2001. Universally Composable Security: A New Paradigm for Cryptographic Protocols. In 42nd Annual Symposium on Foundations of Computer Science. IEEE Computer Society Press, Las Vegas, NV, USA, 136–145.
[10] Ran Canetti, Yevgeniy Dodis, Rafael Pass, and Shabsi Walfish. 2007. Universally Composable Security with Global Setup. In TCC 2007: 4th Theory of Cryptography Conference (Lecture Notes in Computer Science), Salil P. Vadhan (Ed.), Vol. 4392. Springer, Heidelberg, Germany, Amsterdam, The Netherlands, 61–85.
[11] Christian Decker and Roger Wattenhofer. 2015. A Fast and Scalable Payment Network with Bitcoin Duplex Micropayment Channels. Springer International Publishing, Cham, 3–18. https://doi.org/10.1007/978-3-319-21741-3_1
[12] Stefan Dziembowski, Lisa Eckey, Sebastian Faust, and Daniel Malinowski. 2017. Perun: Virtual Payment Hubs over Cryptographic Currencies. (2017), 635 pages. http://eprint.iacr.org/2017/635 conference version accepted to the 40th IEEE Symposium on Security and Privacy (IEEE S&P) 2019.
[13] Stefan Dziembowski, Sebastian Faust, and Kristina Hostakova. 2018. Foundations of State Channel Networks. Cryptology ePrint Archive, Report 2018/320. (2018). https://eprint.iacr.org/2018/320 Full version of this paper.
[14] Oded Goldreich. 2006. Foundations of Cryptography: Volume 1. Cambridge University Press, New York, NY, USA.
[15] Dennis Hofheinz and Joern Mueller-Quade. 2004. A Synchronous Model for Multi-Party Computation and the Incompleteness of Oblivious Transfer. Cryptology ePrint Archive, Report 2004/016. (2004). http://eprint.iacr.org/2004/016.
[16] Yael Tauman Kalai, Yehuda Lindell, and Manoj Prabhakaran. 2007. Concurrent Composition of Secure Protocols in the Timing Model. Journal of Cryptology 20, 4 (Oct. 2007), 431–492.
[17] Jonathan Katz and Yehuda Lindell. 2007. Introduction to Modern Cryptography (Chapman & Hall/Crc Cryptography and Network Security Series). Chapman & Hall/CRC.
[18] Jonathan Katz, Ueli Maurer, Björn Tackmann, and Vassilis Zikas. 2013. Universally Composable Synchronous Computation. In TCC 2013: 10th Theory of Cryptography Conference (Lecture Notes in Computer Science), Amit Sahai (Ed.), Vol. 7785. Springer, Heidelberg, Germany, Tokyo, Japan, 477–498. https://doi.org/10.1007/978-3-642-36594-2_27
[19] Rami Khalil and Arthur Gervais. 2017. Revive: Rebalancing Off-Blockchain Payment Networks. In ACM CCS 17: 24th Conference on Computer and Communications Security, Bhavani M. Thuraisingham, David Evans, Tal Malkin, and Dongyan Xu (Eds.). ACM Press, Dallas, TX, USA, 439–453.
[20] Joshua Lind, Ittay Eyal, Florian Kelbert, Oded Naor, Peter R. Pietzuch, and Emin Gün Sirer. 2017. Teechain: Scalable Blockchain Payments using Trusted Execution Environments. CoRR abs/1707.05454 (2017). arXiv:1707.05454 http://arxiv.org/abs/1707.05454
[21] Giulio Malavolta, Pedro Moreno-Sanchez, Aniket Kate, Matteo Maffei, and Srivatsan Ravi. 2017. Concurrency and Privacy with Payment-Channel Networks. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, CCS 2017, Dallas, TX, USA, October 30 - November 03, 2017. 455–471.
[22] Patrick McCorry, Surya Bakshi, Iddo Bentov, Andrew Miller, and Sarah Meiklejohn. 2018. Pisa: Arbitration Outsourcing for State Channels. IACR Cryptology ePrint Archive 2018 (2018), 582. https://eprint.iacr.org/2018/582
[23] Silvio Micali and Ronald L. Rivest. 2002. Micropayments Revisited. In Topics in Cryptology – CT-RSA 2002 (Lecture Notes in Computer Science), Bart Preneel (Ed.), Vol. 2271. Springer, Heidelberg, Germany, San Jose, CA, USA, 149–163.
[24] Andrew Miller, Iddo Bentov, Ranjit Kumaresan, and Patrick McCorry. 2017. Sprites: Payment Channels that Go Faster than Lightning. CoRR abs/1702.05812 (2017). http://arxiv.org/abs/1702.05812
[25] Satoshi Nakamoto. 2009. Bitcoin: A Peer-to-Peer Electronic Cash System. (2009). http://bitcoin.org/bitcoin.pdf.
[26] Jesper Buus Nielsen. 2003. On Protocol Security in the Cryptographic Model. (2003).
[27] Olaoluwa Osuntokun. 2018. Hardening Lightning. BPASE. (2018). https://cyber.stanford.edu/sites/default/files/hardening_lightning_updated.pdf
[28] Rafael Pass and Abhi Shelat. 2015. Micropayments for Decentralized Currencies. In ACM CCS 15: 22nd Conference on Computer and Communications Security, Indrajit Ray, Ninghui Li, and Christopher Kruegel: (Eds.). ACM Press, Denver, CO, USA, 207–218.
[29] Joseph Poon and Thaddeus Dryja. 2016. The Bitcoin Lightning Network: Scalable Off-Chain Instant Payments. (Jan. 2016). Draft version 0.5.9.2, available at https://lightning.network/lightning-network-paper.pdf.
[30] Ronald L. Rivest. 1997. Electronic Lottery Tickets as Micropayments. In FC’97: 1st International Conference on Financial Cryptography (Lecture Notes in Computer Science), Rafael Hirschfeld (Ed.), Vol. 1318. Springer, Heidelberg, Germany, Anguilla, British West Indies, 307–314.
[31] Stefanie Roos, Pedro Moreno-Sanchez, Aniket Kate, and Ian Goldberg. 2017. Settling Payments Fast and Private: Efficient Decentralized Routing for Path-Based Transactions. CoRR abs/1709.05748 (2017). arXiv:1709.05748 http://arxiv.org/abs/1709.05748
[32] David Siegel. 2016. Understanding The DAO Attack. (Jun 2016). CoinDesk, http://www.coindesk.com/understanding-dao-hack-journalists/.
[33] David Wheeler. 1997. Transactions Using Bets. In Proceedings of the International Workshop on Security Protocols. Springer-Verlag, London, UK, UK, 89–92. http://dl.acm.org/citation.cfm?id=647214.720381
[34] Gavin Wood. 2014. Ethereum: A Secure Decentralised Generalised Transaction Ledger. (2014). http://gavwood.com/paper.pdf.

### Outline of the Protocol

In this section, we provide an outline of our ledger and virtual state channel construction. The complete formal specification appears in the full version of this paper [13].

#### A.1 Protocol for Ledger State Channels

We start with a high-level description of the sub-protocols for opening, maintaining, and closing ledger state channels.