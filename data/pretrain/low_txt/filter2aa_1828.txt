# Presentation: Stamping Out Hash Corruption and Cracking All the Things

## Presenters
- **Ryan Reynolds**
  - Manager, Crowe Horwath
  - Penetration Tester
  - Twitter: @reynoldsrb
- **Jonathan Claudius**
  - SpiderLabs Security Researcher, Trustwave
  - Vulnerability Research
  - Twitter: @claudijd

## Overview
- **Windows Hash Extraction**
- **Story of Our Findings**
- **Mechanics of Windows Hash Extraction**
- **A Different Approach**
- **Why Are All the Tools Broken?**
- **Demonstration**
- **Patches**

## Goals of Getting Hashes
- **Privilege Escalation**
- **Password Analysis**
- **Forensic Investigations**

## Windows Password Hashes
- **Types of Hashes:**
  - **LM (LAN Manager)**
    - Old hashing algorithm with security flaws.
    - Case insensitive, broken into two components.
  - **NTLM (NT LAN Manager)**
    - Newer hashing algorithm with security flaws.
    - Not salted but case sensitive.

- **Methods to Get Hashes:**
  - **Injection via LSASS**
    - Reads hashes from memory.
  - **Registry Reading via SAM/SYSTEM**
    - Reads hashes from local registry hives.

## Story Time
### Failed Attempt 1
- **Social Engineering Engagement**
  - Gained physical access to a bank workstation.
  - Dumped hashes but failed to crack them using John the Ripper and Rainbow Tables.

### Failed Attempt 2
- **Internal Penetration Assessment**
  - Exploited a missing patch to gain shell access.
  - Dumped hashes but failed to crack them using Rainbow Tables and Pass the Hash (PTH).

### Example Hashes
- **Via Registry (Metasploit)**
  - LM: 4500a2115ce8e23a99303f760ba6cc96
  - NTLM: 5c0bd165cea577e98fa92308f996cf45
- **Via Injection (PwDump6)**
  - LM: aad3b435b51404eeaad3b435b51404ee
  - NTLM: 5f1bec25dd42d41183d0f450bf9b1d6b

## Where Do Hashes Live?
- **HKLM\SAM**
  - Stores security information for each user, including hash data.
- **HKLM\SYSTEM**
  - Stores the SYSKEY, which "salts" the SAM information for security purposes.

### What the Registry Looks Like
- **HKLM\SAM\SAM\domains\account\users\**
  - Users: 000001F4, 000001F5, etc.

### Data Inside These Values
- For each user, there are two values:
  - **“F” – Binary Data**
    - Last Logon, Account Expires, Password Expiry, etc.
  - **“V” – Binary Data**
    - Username, LM Hash Data, NT Hash Data, etc.

### A Closer Look at Raw Data
- **Raw Data with LM & NTLM Data**
  - ...0000AAAAAAAA0000BBBBBBBB00000...
- **Raw Data with just NTLM Hash Data**
  - ...00000000BBBBBBBB0000000000000...

### Registry Extraction Tools
- Metasploit Hashdump Script
- Creddump
- Samdump2
- Cain and Abel
- Pwdump7
- FGDump 3.0
- Others

## Current Parsing Logic
- **LM & NTLM**
- **NTLM**
- **None**
- **OFFSET**
- **HASH DATA**
- **If size > 40 bytes?**
- **Else If size > 20 bytes?**
- **Else**

## The “Flaw”
- **Example Hashes:**
  - Via Registry (Metasploit)
    - LM: 4500a2115ce8e23a99303f760ba6cc96
    - NTLM: 5c0bd165cea577e98fa92308f996cf45
  - Via Injection (PwDump6)
    - LM: aad3b435b51404eeaad3b435b51404ee
    - NTLM: 5f1bec25dd42d41183d0f450bf9b1d6b

- **Root Cause:**
  - By following Microsoft best practices, such as setting password history and disabling LM hashes, we can avoid this issue.

- **How Often Does This Occur?**
  - Newer OSs (Windows Vista and newer) do not store LM by default.
  - LM can be disabled by a proactive sysadmin.
  - Password histories can be set through Group Policy Objects (GPOs).

## In an Ideal World
- We would want to:
  - Check if LM exists.
  - Check if NTLM exists.
  - Parse correct hash data 100% of the time.

### A Different Approach
- **“V” Hash 4 Byte Headers for LM & NTLM**
  - 0x4 (4 bytes) = Hash Not Present (false)
  - 0x14 (20 bytes) = Hash Present (true)
  - No more guessing!

- **New Parsing Logic:**
  - **LM & NTLM**
  - **NTLM**
  - **None**
  - **OFFSET**
  - **HASH DATA**
  - **If LM.exists? && NTLM.exists?**
  - **Else If NTLM.exists?**
  - **Else**

## Why Are All the Tools Broken?
- **Tool Timeline:**
  - **Samdump2 v. 1.0.1** (3/28/04)
  - **Cain & Abel v. 2.7.4** (7/9/05)
  - **Creddump v. 0.1** (2/20/08)
  - **MSF Hashdump** (12/30/09)
  - **FGDump v. 3.0** (11/9/11)
  - **Pwdump7 v. 7.1** (3/10/10)
  - **Samdump2 v. 1.1.1** (11/21/07)
  - **Pwdump v. 1** (3/24/1997)

- **Takeaway:**
  - Reverse engineering is hard.
  - Exhaustive testing is time-consuming.
  - Leveraging code is helpful.
  - Fully reusing code is not always good.
  - Open source allows others to learn and help fix issues.

## Demonstration
- [Insert Demonstration Here]

## Patches
- **Affected Tools:**
  - **Creddump**: Yes
  - **Metasploit’s Hashdump Script**: Yes
  - **L0phtcrack**: Working with Author(s)
  - **Pwdump7**: Working with Author(s)
  - **FGDump 3.0**: Working with Author(s)
  - **Samdump2**: Fixed in v 1.1.1
  - **Cain & Abel**: Working with Author(s)

## Questions?
- [Open the floor for questions]