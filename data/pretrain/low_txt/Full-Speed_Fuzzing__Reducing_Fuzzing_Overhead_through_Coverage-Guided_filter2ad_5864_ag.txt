### Coverage-Guided Tracing for Fuzzing Optimization

Coverage-increasing test cases can be identified by tracing the coverage of all existing test cases. While such methods reduce the number of test cases required to generate a coverage-increasing test case, they also result in a higher rate of discarded test cases. However, the performance improvements achieved through coverage-guided tracing outweigh these drawbacks.

### System Scalability

System scalability is another key area of research aimed at enhancing fuzzing. For example, AFL (American Fuzzy Lop) uses a fork-server execution model to avoid the overhead associated with repetitive `execve()` calls [50]. Xu et al. [61] further improved the performance of AFL and libFuzzer by developing several fuzzer-agnostic operating primitives. Additionally, distributed fuzzing has gained popularity, with Google's ClusterFuzz [72]—the backbone of OSS-Fuzz [3]—allocating more resources to fuzzing by parallelizing across thousands of virtual machines. These efforts, which aim to improve the performance of all fuzzers, complement other fuzzing optimizations, such as coverage-guided tracing.

### Conclusion

Coverage-guided tracing leverages the fact that coverage-increasing test cases are rare in fuzzing. This method involves modifying target binaries so that they self-report when a test case produces new coverage. Although our results show that the additional steps involved in coverage-guided tracing (running the modified binary, tracing, and unmodifying based on new coverage) are twice as expensive as tracing alone, the ability to execute test cases at native speed, combined with the low rate of coverage-increasing test cases, results in significant overhead reductions. Specifically, we observed overhead reductions of up to 1300% and 70% for black-box and white-box binaries, respectively. When applied to hybrid fuzzing, coverage-guided tracing achieves 616% and 79% more test case executions than black-box and white-box tracing-based hybrid fuzzing, respectively. Given that tracing consumes over 90% of the total time spent fuzzing—even for fuzzers focused on test case generation—reductions in tracing time have a substantial impact on overall fuzzing performance.

From a broader perspective, our results highlight the potential advantages of identifying and leveraging asymmetries inherent in fuzzing. Fuzzing relies on executing many test cases in the hope of finding a small subset that increases coverage or causes crashes. Despite recent attempts to reduce the number of discarded test cases, they remain the common case. Another opportunity lies in the fact that much of the code itself is uninteresting but must be executed to reach the interesting parts. Therefore, we envision a future where faster-than-full-speed execution is possible by finding ways to skip other "uninteresting" but common aspects of fuzzing.

### Acknowledgment

We would like to thank our reviewers for their valuable feedback, which helped us improve this paper. We also extend our gratitude to Xiaozhu Meng from the Dyninst project and Insu Yun from the QSYM project for their assistance in utilizing their software in our implementations. Lastly, we thank Michal Zalewski for providing guidance on the inner workings of AFL. This work was supported by the National Science Foundation under Grant No. 1650540.

### References

[1] "CVE Details: The ultimate security vulnerability datasource," Tech. Rep., 2018. [Online]. Available: https://www.cvedetails.com/vulnerabilities-by-types.php

[2] E. P. Bounimova, "Billions and Billions of Constraints: Whitebox Fuzz Testing in Production," Tech. Rep., 2012. [Online]. Available: https://www.microsoft.com/en-us/research/publication/billions-and-billions-of-constraints-whitebox-fuzz-testing-in-production/

[3] K. Serebryany, "OSS-Fuzz - Google’s continuous fuzzing service for open source software," in USENIX Security Symposium, ser. USENIX, 2017.

[4] R. Swiecki, "honggfuzz," 2018. [Online]. Available: http://honggfuzz.com/

[5] M. Zalewski, "American fuzzy lop," 2017. [Online]. Available: http://lcamtuf.coredump.cx/afl/

[6] K. Serebryany, "Continuous fuzzing with libfuzzer and addresssanitizer," in IEEE Cybersecurity Development Conference, ser. SecDev, 2016, pp. 157–157.

[7] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and H. Bos, "VUzzer: Application-aware Evolutionary Fuzzing," in Network and Distributed System Security Symposium, ser. NDSS, 2017.

[8] M. Böhm, V.-T. Pham, and A. Roychoudhury, "Coverage-based Greybox Fuzzing As Markov Chain," in ACM SIGSAC Conference on Computer and Communications Security, ser. CCS, 2016, pp. 1032–1043.

[9] Y. Li, B. Chen, M. Chandramohan, S.-W. Lin, Y. Liu, and A. Tiu, "Steelix: Program-state Based Binary Fuzzing," in ACM Joint Meeting on Foundations of Software Engineering, ser. ESEC/FSE, 2017, pp. 627–637.

[10] talos vulndev, "AFL-Dyninst," 2018. [Online]. Available: https://github.com/talos-vulndev/afl-dyninst

[11] S. Schumilo, C. Aschermann, R. Gawlik, S. Schinzel, and T. Holz, "kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels," in USENIX Security Symposium, ser. USENIX, 2017, pp. 167–182.

[12] G. Zhang, X. Zhou, Y. Luo, X. Wu, and E. Min, "PTfuzz: Guided Fuzzing with Processor Trace Feedback," IEEE Access, vol. 6, pp. 37 302–37 313, 2018.

[13] M. Security, "Dharma: A generation-based, context-free grammar fuzzer." 2018. [Online]. Available: https://github.com/MozillaSecurity/dharma

[14] J. Johnson, "gramfuzz," 2018. [Online]. Available: https://github.com/d0c-s4vage/gramfuzz

[15] M. Eddington, "Peach fuzzing platform," 2018. [Online]. Available: https://www.peach.tech/products/peach-fuzzer/

[16] T. Wang, T. Wei, G. Gu, and W. Zou, "TaintScope: A Checksum-Aware Directed Fuzzing Tool for Automatic Software Vulnerability Detection," in IEEE Symposium on Security and Privacy, ser. Oakland, 2010, pp. 497–512.

[17] M. Vuagnoux, "Autodafe, an Act of Software Torture," 2006. [Online]. Available: http://autodafe.sourceforge.net/

[18] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta, Y. Shoshitaishvili, C. Kruegel, and G. Vigna, "Driller: Augmenting Fuzzing Through Selective Symbolic Execution," in Network and Distributed System Security Symposium, ser. NDSS, 2016, pp. 2–16.

[19] I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim, "QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing," in USENIX Security Symposium, ser. USENIX, 2018.

[20] C. Cadar, D. Dunbar, D. R. Engler, and others, "KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs." in USENIX Symposium on Operating Systems Design and Implementation, ser. OSDI, 2008, pp. 209–224.

[21] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, "Unleashing mayhem on binary code," in IEEE Symposium on Security and Privacy, ser. Oakland, 2012, pp. 380–394.

[22] V. Chipounov, V. Kuznetsov, and G. Candea, "S2E: A platform for in-vivo multi-path analysis of software systems," in ACM SIGPLAN International Conference on Architectural Support for Programming Languages and Operating Systems, ser. ASPLOS, 2011, pp. 265–278.

[23] P. Godefroid, M. Y. Levin, and D. Molnar, "SAGE: whitebox fuzzing for security testing," Queue, vol. 10, no. 1, p. 20, 2012.

[24] J. Hertz and T. Newsham, "ProjectTriforce: AFL/QEMU fuzzing with full-system emulation." 2017. [Online]. Available: https://github.com/nccgroup/TriforceAFL

[25] "Dyninst API," 2018. [Online]. Available: https://dyninst.org/dyninst

[26] S. Nagy and M. Hicks, "FoRTE-FuzzBench: FoRTE-Research’s fuzzing benchmarks," 2019. [Online]. Available: https://github.com/FoRTE-Research/FoRTE-FuzzBench

[27] ——, "afl-fid: A suite of AFL modifications for fixed input dataset experiments," 2019. [Online]. Available: https://github.com/FoRTE-Research/afl-fid

[28] ——, "UnTracer-AFL: An AFL implementation with UnTracer (our coverage-guided tracer)," 2019. [Online]. Available: https://github.com/FoRTE-Research/UnTracer-AFL

[29] P. Godefroid, A. Kiezun, and M. Y. Levin, "Grammar-based whitebox fuzzing," in ACM SIGPLAN Conference on Programming Language Design and Implementation, ser. PLDI, 2008, pp. 206–215.

[30] M. Sutton, A. Greene, and P. Amini, Fuzzing: brute force vulnerability discovery. Pearson Education, 2007.

[31] M. Böhm, V.-T. Pham, M.-D. Nguyen, and A. Roychoudhury, "Directed Greybox Fuzzing," in ACM SIGSAC Conference on Computer and Communications Security, ser. CCS, 2017, pp. 2329–2344.

[32] V. Ganesh, T. Leek, and M. Rinard, "Taint-based directed whitebox fuzzing," in International Conference on Software Engineering, ser. ICSE, 2009, pp. 474–484.

[33] P. Godefroid, M. Y. Levin, D. A. Molnar, and others, "Automated whitebox fuzz testing." in Network and Distributed System Security Symposium, ser. NDSS, 2008, pp. 151–166.

[34] S. Gan, C. Zhang, X. Qin, X. Tu, K. Li, Z. Pei, and Z. Chen, "CollAFL: Path Sensitive Fuzzing," in IEEE Symposium on Security and Privacy, ser. Oakland, 2018, pp. 660–677.

[35] Intel, "Intel Processor Trace Tools," 2017. [Online]. Available: https://software.intel.com/en-us/node/721535

[36] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood, "Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation," in ACM SIGPLAN Conference on Programming Language Design and Implementation, ser. PLDI, 2005, pp. 190–200.

[37] A. Nikolic, "Guided Fuzzing And Binary Blobs," Information Security Symposium (Fsec), 2016. [Online]. Available: https://www.youtube.com/watch?v=zQb-QT7tiFQ

[38] J. L. Gustafson, "Reevaluating Amdahl’s law," Communications of the ACM, vol. 31, no. 5, pp. 532–533, 1988.

[39] P. Chen and H. Chen, "Angora: efficient fuzzing by principled search," in IEEE Symposium on Security and Privacy, ser. Oakland, 2018.

[40] Shellphish, "ShellPhuzz," 2018. [Online]. Available: https://github.com/shellphish/fuzzer

[41] "DARPA Cyber Grand Challenge," 2018. [Online]. Available: https://github.com/cybergrandchallenge

[42] Y. Shoshitaishvili, "CGC Binaries: Compiled CGC binaries for experimentation purposes." 2017. [Online]. Available: https://github.com/zardus/cgc-bins

[43] J. Kinder, F. Zuleger, and H. Veith, "An abstract interpretation-based framework for control flow reconstruction from binaries," in International Workshop on Verification, Model Checking, and Abstract Interpretation, ser. VMCAI, 2009, pp. 214–228.

[44] H. Theiling, "Extracting safe and precise control flow from binaries," in IEEE International Conference on Real-Time Systems and Applications, ser. RCTSA, 2000, pp. 23–30.

[45] D. Kästner and S. Wilhelm, "Generic control flow reconstruction from assembly code," in ACM SIGPLAN/SIGBED International Conference on Languages, Compilers, Tools and Theory for Embedded Systems, ser. LCTES, 2002, pp. 46–55.

[46] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino, A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna, "SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis," in IEEE Symposium on Security and Privacy, ser. Oakland, 2016.

[47] H. Peng, Y. Shoshitaishvili, and M. Payer, "T-Fuzz: fuzzing by program transformation," in IEEE Symposium on Security and Privacy, ser. Oakland, 2018.

[48] C. Lemieux, R. Padhye, K. Sen, and D. Song, "PerfFuzz: Automatically Generating Pathological Inputs," in ACM SIGSOFT International Symposium on Software Testing and Analysis, ser. ISSTA, 2018, p. 12.

[49] J. Wang, B. Chen, L. Wei, and Y. Liu, "Skyfire: Data-Driven Seed Generation for Fuzzing," in IEEE Symposium on Security and Privacy, ser. Oakland, 2017.

[50] M. Zalewski, "Fuzzing random programs without execve()," 2014. [Online]. Available: http://lcamtuf.blogspot.com/2014/10/fuzzing-binaries-without-execve.html

[51] R. Stallman, R. Pesch, S. Shebs, and others, "Debugging with GDB," Free Software Foundation, vol. 675, 1988.

[52] A. Brown and G. Wilson, "The Architecture of Open Source Applications: Elegance, Evolution, and a Few Fearless Hacks," vol. 1, 2012.

[53] J. Keniston, P. S. Panchamukhi, and M. Hiramatsu, "Kernel probes (kprobes)," Documentation provided with the Linux kernel sources (v2.6.29), 2016.

[54] M. Hiramatsu and S. Oshima, "Djprobe–Kernel probing with the smallest overhead," in Linux Symposium, ser. Linux Symposium, 2007, p. 189.

[55] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe, J. Lind, D. Muthukumaran, D. O’keeffe, M. Stillwell, and others, "SCONE: Secure Linux Containers with Intel SGX." in USENIX Symposium on Operating Systems Design and Implementation, ser. OSDI, 2016, pp. 689–703.

[56] M. Rash, "afl-cve: A collection of vulnerabilities discovered by the AFL fuzzer," 2017. [Online]. Available: https://github.com/mrash/afl-cve

[57] Google, "fuzzer-test-suite: Set of tests for fuzzing engines," 2018. [Online]. Available: https://github.com/google/fuzzer-test-suite

[58] M. Zalewski, "afl-users > Re: 'FidgetyAFL' implemented in 2.31b," 2016. [Online]. Available: goo.gl/zmcvZf

[59] G. Klees, A. Ruef, B. Cooper, S. Wei, and M. Hicks, "Evaluating Fuzz Testing," in ACM SIGSAC Conference on Computer and Communications Security, ser. CCS, 2018.

[60] A. Vargha and H. D. Delaney, "A Critique and Improvement of the CL Common Language Effect Size Statistics of McGraw and Wong," Journal of Educational and Behavioral Statistics, vol. 25, no. 2, pp. 101–132, 2000.

[61] W. Xu, S. Kashyap, C. Min, and T. Kim, "Designing New Operating Primitives to Improve Fuzzing Performance," in ACM SIGSAC Conference on Computer and Communications Security, ser. CCS, 2017.

[62] S. S. Muchnick, Advanced compiler design implementation. Morgan Kaufmann, 1997.

[63] "SanitizerCoverage: Clang 7 documentation," 2018. [Online]. Available: https://clang.llvm.org/docs/SanitizerCoverage.html

[64] W. H. Hawkins, J. D. Hiser, M. Co, A. Nguyen-Tuong, and J. W. Davidson, "Zipr: Efficient Static Binary Rewriting for Security," in IEEE/IFIP International Conference on Dependable Systems and Networks, ser. DSN, 2017.

[65] R. Wang, Y. Shoshitaishvili, A. Bianchi, A. Machiry, J. Grosen, P. Grosen, C. Kruegel, and G. Vigna, "Ramblr: Making Reassembly Great Again," in Network and Distributed System Security Symposium, ser. NDSS, 2017, pp. 2–15.

[66] S. Wang, P. Wang, and D. Wu, "Reassembleable Disassembling," in USENIX Security Symposium, ser. USENIX Sec, 2015, pp. 627–642. [Online]. Available: https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/wang-shuai

[67] A. R. Bernat and B. P. Miller, "Anywhere, Any-time Binary Instrumentation," in ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools, ser. PASTE, 2011, pp. 9–16.

[68] J. Lopez, L. Babun, H. Aksu, and A. S. Uluagac, "A Survey on Function and System Call Hooking Approaches," Journal of Hardware and Systems Security, vol. 1, no. 2, pp. 114–136, 2017.

[69] B. Dolan-Gavitt, P. Hulin, E. Kirda, T. Leek, A. Mambretti, W. Robertson, F. Ulrich, and R. Whelan, "Lava: Large-scale automated vulnerability addition," in IEEE Symposium on Security and Privacy, ser. Oakland, 2016, pp. 110–121.

[70] "laf-intel: Circumventing Fuzzing Roadblocks with Compiler Transformations," 2016. [Online]. Available: https://lafintel.wordpress.com/

[71] U. Kargén and N. Shahmehri, "Turning Programs Against Each Other: High Coverage Fuzz-testing Using Binary-code Mutation and Dynamic Slicing," in ACM Joint Meeting on Foundations of Software Engineering, ser. ESEC/FSE, 2015, pp. 782–792.

[72] Google, "ClusterFuzz," 2018. [Online]. Available: https://github.com/google/oss-fuzz/blob/master/docs/clusterfuzz.md