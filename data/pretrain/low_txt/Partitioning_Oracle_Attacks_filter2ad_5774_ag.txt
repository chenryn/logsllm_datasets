# References

[25] Michael J. Freedman, Yuval Ishai, Benny Pinkas, and Omer Reingold. Keyword search and oblivious pseudo-random functions. In *TCC*, 2005.

[40] Michael Jones and Joe Hildebrand. JSON web encryption (JWE). Internet Requests for Comments, RFC 7516, 2015.

[26] Christina Garman, Matthew Green, Gabriel Kaptchuk, Ian Miers, and Michael Rushanan. Dancing on the lip of the volcano: Chosen ciphertext attacks on Apple iMessage. In *USENIX Security*, 2016.

[27] Craig Gentry, Philip MacKenzie, and Zulfiqar Ramzan. A method for making password-based key exchange resilient to server compromise. In *CRYPTO*, 2006.

[28] go-shadowsocks2. https://github.com/shadowsocks/go-shadowsocks2, 2020.

[29] Paul Grubbs, Jiahui Lu, and Thomas Ristenpart. Message franking via committing authenticated encryption. In *CRYPTO*, 2017.

[30] Shay Gueron, Adam Langley, and Yehuda Lindell. AES-GCM-SIV: Nonce Misuse-Resistant Authenticated Encryption. RFC 8452, 2019.

[31] Dan Harkins. Dragonfly key exchange (RFC 7664), 2015. https://tools.ietf.org/html/rfc7664.

[32] Dan Harkins, Dave Carrel, et al. The internet key exchange (IKE). Technical report, RFC 2409, November 1998.

[33] S. Hartman and L. Zhu. A generalized framework for Kerberos pre-authentication. In *RFC 6113*, 2011.

[34] Heimdal. https://github.com/heimdal/heimdal, 2020.

[35] L. Howard. AEAD encryption types for Kerberos. Draft-howard-gssapi-aead-00, 2015. https://tools.ietf.org/html/draft-howard-gssapi-aead-00.

[36] L. Howard. GSS-API: AEAD modes for Kerberos. Draft-howard-gssapi-aead-00, 2015. https://tools.ietf.org/html/draft-howard-gssapi-aead-00.

[37] David P. Jablon. Strong password-only authenticated key exchange. *ACM SIGCOMM Computer Communication Review*, 26(5):5–26, 1996.

[38] Stanislaw Jarecki, Hugo Krawczyk, and Jiayu Xu. OPAQUE: An asymmetric PAKE protocol secure against pre-computation attacks. In *EUROCRYPT*, 2018.

[39] Stanislaw Jarecki and Xiaomin Liu. Efficient oblivious pseudorandom function with applications to adaptive OT and secure computation of set intersection. In *TCC*, 2009.

[41] Antoine Joux. Multicollisions in iterated hash functions. In *CRYPTO*, 2004. Application to cascaded constructions.

[42] Burt Kaliski. PKCS5: Password-based cryptography specification version 2.0. Technical report, IETF, 2000.

[43] Charlie Kaufman, Paul Hoffman, Yoav Nir, Pasi Eronen, and Tero Kivinen. Internet key exchange protocol version 2 (IKEv2). Technical report, RFC 5996, September 2010.

[44] Richard E. Korf. A complete anytime algorithm for number partitioning. *Artificial Intelligence*, 106(2):181–203, 1998.

[45] Hugo Krawczyk. Cryptographic extraction and key derivation: The HKDF scheme. In *CRYPTO*, 2010.

[46] Hugo Krawczyk. The OPAQUE asymmetric PAKE protocol. Technical report, Internet-Draft draft-krawczyk-cfrg-opaque-03. Internet Engineering Task Force, 2019.

[47] Hugo Krawczyk. The OPAQUE asymmetric PAKE protocol. Technical report, Internet-Draft draft-krawczyk-cfrg-opaque-05. Internet Engineering Task Force, 2019.

[48] Fredrik Kuivinen. opaque. https://github.com/frekui/opaque, 2018.

[49] Marcus Leech, Matt Ganis, Y. Lee, Ron Kuris, David Koblas, and L. Jones. RFC1928: Socks protocol version 5, 1996.

[50] Gaëtan Leurent. Message freedom in MD4 and MD5 collisions: Application to APOP. In *FSE*, 2007.

[51] Kevin Lewi and François Garillot. opaque-ke. https://github.com/novifinancial/opaque-ke, 2020.

[52] Libsodium. https://github.com/jedisct1/libsodium, 2020.

[53] George Lyon. Opaque. https://github.com/GeorgeLyon/Opaque, 2019.

[54] Gordon Fyodor Lyon. *Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning*. Insecure, 2009.

[55] Philip MacKenzie. On the security of the SPEKE password-authenticated key exchange protocol. IACR ePrint, 2001. https://eprint.iacr.org/2001/057.

[56] Stefan Marsiske. libsphinx. https://github.com/stef/libsphinx, 2018.

[57] David McGrew and Kenny Paterson. Authenticated encryption with AES-CBC and HMAC-SHA. Technical report, Internet-Draft draft-mcgrew-aead-aes-cbc-hmac-sha2-05. Internet Engineering Task Force, 2014.

[58] David McGrew and John Viega. The Galois/Counter mode of operation (GCM). Submission to NIST Modes of Operation Process, 2004.

[59] David A. McGrew and John Viega. The security and performance of the Galois/Counter Mode (GCM) of operation. In *INDOCRYPT*, 2004.

[60] Payman Mohassel. A closer look at anonymity and robustness in encryption schemes. In *ASIACRYPT*, 2010.

[61] M. Ember Mou. Opaque. https://github.com/mmou/threshold-OPAQUE/, 2019.

[62] Jigsaw Outline Shadowsocks server. https://getoutline.org/en/home, 2020.

[63] Bijeeta Pal, Tal Daniel, Rahul Chatterjee, and Thomas Ristenpart. Beyond credential stuffing: Password similarity models using neural networks. In *IEEE S&P*, 2019.

[64] PyCryptodome. https://pypi.org/project/pycryptodome/, 2020.

[65] Martin Raab and Angelika Steger. "Balls into bins" — a simple and tight analysis. In *RANDOM*, 1998.

[66] Chad Retz. gopaque. https://github.com/cretz/gopaque, 2019.

[67] Phillip Rogaway. Nonce-based symmetric encryption. In *FSE*, 2004.

[68] Phillip Rogaway and Thomas Shrimpton. A provable-security treatment of the key-wrap problem. In *EUROCRYPT* (edited by Serge Vaudenay), 2006.

[69] Eyal Ronen, Kenneth G. Paterson, and Adi Shamir. Pseudo constant time implementations of TLS are only pseudo secure. In *CCS*, 2018.

[70] Yu Sasaki, Lei Wang, Kazuo Ohta, and Noboru Kunihiro. Security of MD5 challenge and response: Extension of APOP password recovery attack. In *CT-RSA*, 2008.

[71] Sophie Schmieg. Invisible salamanders in AES-GCM-SIV. https://keymaterial.net/2020/09/07/invisible-salamanders-in-aes-gcm-siv/, 2020.

[72] Shadowsocks server. https://github.com/shadowsocks/shadowsocks, 2020.

[73] Shadowsocks. https://shadowsocks.org/en/index.html, 2020.

[74] SIP004: Support for AEADs implemented by large libraries. https://github.com/shadowsocks/shadowsocks-org/issues/30, 2017.

[75] SIP006: Getting rid of key derivation once and for all. https://github.com/shadowsocks/shadowsocks-org/issues/35, 2017.

[76] Nick Sullivan, Hugo Krawczyk, Owen Friel, and Richard Barnes. Usage of OPAQUE with TLS 1.3. Technical report, Internet-Draft draft-sullivan-tls-opaque-00. Internet Engineering Task Force, 2019.

[77] The Sage Developers. SageMath, the Sage Mathematics Software System (Version 9.0). https://www.sagemath.org, 2020.

[78] Meltem Sönmez Turan, Elaine Barker, William Burr, and Lily Chen. Recommendation for password-based key derivation part 1: Storage applications. NIST Special Publication 800-132, 2010.

[79] Filippo Valsorda and Ben Cartwright-Cox. age. https://github.com/FiloSottile/age, 2019.

[80] Mathy Vanhoef and Eyal Ronen. Dragonblood: Analyzing the Dragonfly handshake of WPA3 and EAP-pwd. In *IEEE S&P*, 2020.

[81] Serge Vaudenay. Security flaws induced by CBC padding—applications to SSL, IPSEC, WTLS... In *EUROCRYPT*, 2002.

[82] Mark N. Wegman and Larry Carter. New hash functions and their use in authentication and set equality. *Journal of Computer and System Sciences*, 22(3):265–279, 1981.

[83] Philipp Winter and Stefan Lindskog. How the Great Firewall of China is blocking Tor. In *USENIX FOCI*, 2012.

[84] Thomas D. Wu. The secure remote password protocol. In *NDSS*, 1998.

[85] Tim Wu. SRP-6: Improvements and refinements to the secure remote password protocol. Technical report, Submission to the IEEE P1363 Working Group, 2002.

## A.2 Authenticated Key Exchange and PSKs

We survey several other protocols that may be vulnerable to partitioning oracle attacks. Actual exploitability will depend on implementation and deployment details.

### A.1 Password-based and Hybrid Encryption

**Kerberos.** Two recent internet-drafts suggested the inclusion of AES-GCM and ChaCha20/Poly1305 as available encryption types in Kerberos [35] and GSS-API [36]. These drafts have not been adopted as RFCs, but the Heimdal library [34] implemented the GSS-API draft. Using these non-committing AE schemes in Kerberos would enable a partitioning oracle attack on Kerberos’s encrypted timestamp preauthentication [33], leading to client password recovery. For space reasons, we defer the details to the full version.

**Age File Encryption Tool.** Age is a file encryption CLI tool [79] that has a password-based encryption mode. The mode is a KEM-DEM scheme: it uses a password-derived key with ChaCha20/Poly1305 to encapsulate a file key, then computes an HMAC over the KEM (and some metadata) with a key derived from the file key, and then encrypts the plaintext using the file key with ChaCha20/Poly1305. The ciphertext is the KEM and metadata, followed by the HMAC, and then the DEM. This scheme could be vulnerable to a partitioning oracle attack. Observe that there are three ways for decryption to fail: (1) KEM decryption fails, (2) the HMAC check fails, or (3) DEM decryption fails. If failures (1) and (2) are distinguishable, using a multi-colliding ChaCha20/Poly1305 ciphertext as a KEM could let an attacker check multiple passwords in one decryption. Before we reported this issue, the age implementation did not limit the KEM ciphertext length, thereby allowing key multi-collisions for large key sets.

**JavaScript Object Signing and Encryption (JOSE).** JOSE is a set of standards for encrypting and authenticating authorization data, such as cookies and access control information. One part of JOSE, the JSON Web Encryption (JWE) standard [40], specifies password-based encryption modes that may be vulnerable to an attack similar to the one on Age described above. We defer the details to the full version.

**Hybrid Public-Key Encryption (HPKE).** Recently, the IETF has been evaluating a new standard for hybrid public-key encryption, HPKE [10]. It uses an ECIES-like KEM to derive a DEM key, which is used to encrypt the message. HPKE only supports AES-GCM and ChaCha20/Poly1305 DEMs. It supports a pre-shared secret key (PSK) sender authentication mode by mixing the PSK into the AEAD key derivation. The draft permits short PSKs but says the scheme is not suitable for use with passwords. If decryption failures are observable to the sender, a partitioning oracle attack can recover the PSK. We defer the details to the full version.

Many widely-used authenticated key exchange (AKE) protocols support PSK authentication. Prominent examples include TLS, the Internet Key Exchange (IKE) used in IPSec, WiFi security protocols like WEP and WPA, WireGuard, and many more. Support for low-entropy PSKs varies between protocols, but none disallows them completely. Next, we show that partitioning oracle attacks resulting in PSK recovery could arise on the legacy IKEv1 protocol. Our attack does not extend to more modern AKEs used in IPSec or TLS.

**Internet Key Exchange (IKE) v1 PSK.** IKEv1 [32] is the first version of the IPSec protocol suite’s handshake protocol and is officially deprecated in favor of version 2 [43], but it is still supported and used for compatibility with legacy devices. The IKEv1 handshake has three full rounds between the client (called the initiator in IKEv1 parlance) and the server (responder), comprising six messages. After the first two rounds, the client and server have established the shared DH value for the session, but have not yet authenticated each other. Authentication occurs in the fifth and sixth protocol messages; these are the first to be encrypted. The fifth message authenticates the client to the server.

In PSK mode, the client derives the encryption and authentication keys \(K_e\) and \(K_a\) for the fifth message by computing a PRF, keyed via the PSK, on the shared DH value. Then, it computes the "authentication payload," a hash of the transcript keyed with \(K_a\), encrypts the payload with plain CBC and \(K_a\), and sends the resulting ciphertext to the server. The server re-derives the keys using the shared DH value and the PSK, decrypts the CBC ciphertext, and checks the authentication payload. If this check passes, the server crafts and sends the sixth message to authenticate itself to the client.

Because the server has to decrypt the client’s message with a PSK-derived key before authenticating the client, a partitioning oracle attack is theoretically possible. An adversary can initiate an IKEv1 handshake and use the fifth protocol message as a splitting value input to the oracle, and use the server’s response as the oracle’s output. If the server’s responses are different for authentication payload check failure versus other kinds of failures (e.g., packet parsing vulnerabilities), PSK extraction is possible. We have not surveyed IKEv1 implementations or found examples of vulnerable servers; as such, this attack is purely theoretical.

**Other AKEs.** IKEv1’s successor, IKEv2, is not vulnerable because of a change to the key schedule. If a PSK was reused or correlated across both IKEv1 and IKEv2, a partitioning oracle on IKEv1 would allow the IKEv2 PSK to be recovered. We do not know of any settings where this happens, but prior work showed that RSA keys were reused across IKEv1 and IKEv2 in many implementations [24]. We examined the new PSK mode in TLS 1.3; it is not vulnerable. For space reasons, we defer an extended discussion to the full version.