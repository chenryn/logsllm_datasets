### 4.3. File Size Considerations

The actual file sizes on the intercepted file system and the file sizes reported to the upper levels of the system, including the user-mode API, may differ. This discrepancy arises from two primary reasons:

1. **Object Label Maintenance**: For administrative purposes, an in-line object label must be maintained to identify the data object (file). While file systems like NTFS support multiple data streams, which could handle this more elegantly, removable media (e.g., FAT floppy disks) and network file systems (e.g., NFS servers) do not. Therefore, a more cumbersome in-line mechanism is necessary.

2. **Encryption Padding**: If encryption is used, the algorithms may require padding to a certain byte multiple. The end of this padding must also be stored in-line.

These changes in file size (due to the object label and padding) should not be exposed to the upper levels of the driver and executive architecture. Consequently, the file system filter driver must adjust the file size reported by the underlying file systems in IRPs such as `IRP_MJ_QUERY_INFORMATION` (for obtaining size) and `IRP_MJ_SET_INFORMATION` (for adjusting file length). Similar adjustments are needed for `IRP_MJ_DIRECTORY_CONTROL` and `IRP_MJ_QUERY_DIRECTORY` requests.

The padding and object label information are stored at the end of the file on the lower-level file system. This approach avoids complications with memory-mapped files and continuous offset adjustments that would be necessary if the information were stored as a header. Otherwise, page-sized requests from upper levels would straddle page boundaries, leading to significant performance penalties. To the file systems below the filter driver, the data appears as the contents of an ordinary file.

### 4.4. Information Gathering and Processing

**File Locking and Access Control:**
The filter driver must also handle file locking by applications. Since it may need to modify the file due to actions from upper layers, a "locking key" must be known to access such files. Therefore, `IRP_MJ_LOCK_CONTROL` requests must be intercepted.

**Processing of `IRP_MJ_CREATE` Requests:**
The `IRP_MJ_CREATE` request is critical and is issued when a file is accessed for the first time (not just for file creation) by an upper-level function. During this process, several bookkeeping tasks can be performed, such as reading the object label (if present) at the end of the file. Based on the object label, the file is classified within the internal bookkeeping mechanisms, along with other relevant information (e.g., shared files or memory maps). Further processing, such as transparent en/decryption, is determined based on the security policy provided by the associated driver. The information gathered in this step is referenced in any subsequent processing of the file, as gathering the necessary information again, especially during paging operations, would be impractical and inefficient.

**Processing of `IRP_MJ_CLEANUP` and `IRP_MJ_CLOSE` Requests:**
- **`IRP_MJ_CLEANUP`**: This request typically precedes the closing of a file. If the object label needs to be changed or if the file size has changed, the new object label is written during the processing of this IRP.
- **`IRP_MJ_CLOSE`**: This request must be processed to release the internal bookkeeping data structures associated with the file.

This information gathering mechanism can be triggered implicitly by opening files and querying the filter driver from the central policy enforcement mechanism. Additionally, explicit functions, such as calculating signatures over applications, can be triggered at the kernel level without interactions with user-level components.

### 4.5. Selective Use of Enforcement Mechanisms

Even though the enforcement mechanisms are loaded early during the boot process, some files in Microsoft Windows NT (e.g., `ntldr.exe`, `ntdetect.com`, and `pagefile.sys`) must be processed before the driver becomes active. These files must not have an object label and should not be encrypted. However, other processing, such as signature verification, which does not involve intrusive changes to the files, is still possible.

**Exclusion of Certain Files:**
- **Paging Files**: These files generally should not be encrypted due to performance reasons. Depending on the threat model, it might be acceptable to wipe the paging files on each orderly system shutdown.
- **Security Policy Exclusions**: The security policy might dictate that certain files, directories, or even entire volumes are not subjected to labeling and encryption. For this exclusion mechanism to work, the full names of the files must be kept at hand. Since Microsoft Windows NT stores the device identity separately from the path, the filter driver must maintain a translation table to minimize overhead during lookup comparisons.

**Handling Removable Media:**
An additional complication arises with removable media. Simply querying the root directory without a medium being present would result in an error condition. Instead, an undocumented function for querying the properties of symbolic links is used, as the "drive letters" in Windows NT are implemented as symbolic links.

### 5. Related Work

Early work on segregating policy decisions from enforcement was conducted at UCLA [17] and in the LOCK project [11]. The DTOS project also addressed this concept [7] using a Mach microkernel architecture.

Using an encrypted file system is a transparent mechanism for enforcing a security policy, regardless of who has access to the physical file system, without placing an undue burden on users. This has been recognized in both research [1, 6, 20] and commercial implementations (e.g., Microsoft EFS, SoftWinter SeNTry). However, the goal of these implementations was mainly to provide individual users (or small groups) a convenient mechanism for encrypting their personal data and protecting it from other users.

**Alternative Approaches:**
- **Full Media Encryption**: Some commercial vendors encrypt entire media, providing protection against theft but with limited compatibility and a lack of support for storage accessed via non-intercepted interfaces (e.g., network file systems).
- **Pass-Through Filter Drivers**: An example of a pass-through filter driver for monitoring file system activity on Microsoft Windows NT 4.0 was described in [9], and third-party information on file system drivers and filter drivers is available in [8].

### 6. Conclusions and Future Work

We have presented a mechanism for enforcing security policies at the file system level, retrofitted onto the Microsoft Windows NT family of operating systems. This mechanism enables the enforcement of a security policy without requiring modifications to applications and only limited changes in user behavior. It was developed without needing access to the source code or making modifications to the host operating system.

While this mechanism can be used for file system encryption and access control, it becomes fully operational when tightly integrated with other security policy enforcement components and a mechanism for ensuring consistent enforcement throughout a distributed system.

**Future Work:**
- **Integration and Scalability**: Our future work will focus on the tight integration of individual policy enforcement modules and providing scalability to ensure the system can be deployed in very large networks (up to 100,000 nodes).
- **Policy Expressiveness**: Another area of research is the realization of a policy mechanism with sufficient expressiveness to model complex security models and specific requirements.

### References

[1] M. Blaze. A Cryptographic File System for Unix. Technical report, AT&T Bell Labs, Nov. 1993.

[2] T. Fraser, L. Badger, and M. Feldman. Hardening COTS Software with Generic Software Wrappers. In Proceedings of the 1999 Conference on Security and Privacy (S & P ’99), pages 2–16, Los Alamitos, CA, May 9–12 1999. IEEE Press.

[3] R. Goldenberg and S. Saravanan. Open VMS AXP Internals and Data Structures: Version 1.5. Digital Press, Maynard, MA, USA, 1994.

[4] B. Goodheart and J. Cox. The Magic Garden Explained: The Internals of Unix System V Release 4. Prentice Hall, Englewood Cliffs, NJ, USA, 1994.

[5] P. A. Loscocco, S. D. Smalley, P. A. Muckelbauer, R. C. Taylor, S. J. Turner, and J. F. Farrell. The Inevitability of Failure: The Flawed Assumption of Security in Modern Computing Environments. In Proceedings of the 21st National Information Systems Security Conference, Crystal City, VA, pages 303–314, Oct. 1998.

[6] E. Mauriello. TCFS: Transparent Cryptographic File System. Linux Journal, 40, Aug. 1997.

[7] S. E. Minear. Providing policy control over object operations in a Mach based system. In USENIX, editor, 5th USENIX UNIX Security Symposium, June 5–7, 1995. Salt Lake City, UT, pages 141–155, Berkeley, CA, USA, June 1995. USENIX.

[8] R. Nagar. Windows NT File System Internals: A Developer’s Guide. O’Reilly & Associates, Sebastopol, CA, USA, 1997.

[9] M. Russinovich and B. Cogswell. Examining the Windows NT Filesystem. Dr. Dobb’s Journal of Software Tools, 22(2):42–50, Feb. 1997.

[10] O. S. Saydjari, J. M. Beckman, and J. R. Leaman. Locking Computers Securely. In Proc. 10th NIST-NCSC National Computer Security Conference, pages 129–141, 1987.

[11] O. S. Saydjari, J. M. Beckman, and J. R. Leaman. LOCK trek: Navigating uncharted space. In Proc. IEEE Symposium on Security and Privacy, pages 167–175, 1989.

[12] O. S. Saydjari, S. J. Turner, D. E. Peele, J. F. Farrell, P. A. Loscocco, W. Kutz, and G. L. Bock. Synergy: A distributed, microkernel-based security architecture. Technical Report version 1.0, National Security Agency, Ft. George G. Meade, MD, Nov. 1993.

[13] E. J. Sebes. Overview of the architecture of Distributed Trusted Mach. In USENIX, editor, Proceedings of the USENIX Mach Symposium: November 20–22, 1991, Monterey, California, USA, pages 251–262, Berkeley, CA, USA, 1991. USENIX Association.

[14] D. Solomon. Inside Windows NT. Microsoft Press, Bellevue, WA, USA, 2nd edition, 1998.

[15] D. Solomon and M. Russinovich. Inside Windows 2000. Microsoft Press, Bellevue, WA, USA, 3rd edition, 2000.

[16] R. Spencer, S. Smalley, P. Loscocco, M. Hibler, D. Andersen, and J. Lepreau. The Flask security architecture: System support for diverse security policies. In 8th USENIX Security Symposium, pages 123–139, Washington, D.C., USA, Aug. 1999. USENIX.

[17] B. J. Walker, R. A. Kemmerer, and G. J. Popek. Specification and Verification of the UCLA Unix Security Kernel. In Proceedings of the 7th ACM Symposium on Operating Systems Principles (SOSP), pages 64–65, 1979.

[18] S. Wolthusen. Enforcing Security Policies using Externally Controlled Reference Monitors. Submitted for publication.

[19] S. Wolthusen. Layered multipoint network defense and security policy enforcement. In Proceedings from the Second Annual IEEE SMC Information Assurance Workshop, United States Military Academy, West Point, NY, pages 100–108, June 2001.

[20] E. Zadok, I. Badulescu, and A. Shender. Extending File Systems Using Stackable Templates. In Proceedings of the 1999 USENIX Annual Technical Conference (USENIX-99), pages 57–70, Berkeley, CA, June 6–11 1999. USENIX Association.