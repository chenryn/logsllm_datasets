### Optimized Text

The search time in our system is influenced by the prior deletion of documents, which, in the worst case, may result in an O(N) search overhead. For workloads that are heavily focused on deletions, we propose QOS (Quasi-Optimal Search), a highly efficient DSE (Dynamic Searchable Encryption) scheme that significantly improves upon previous quasi-optimal DSE schemes by several orders of magnitude. In many practical scenarios, SDd (a different DSE scheme) might be a better choice than QOS. However, QOS represents a significant step towards achieving optimal search performance, as it introduces only a logarithmic overhead compared to the optimal search time. Our experimental results show that for workloads with more than 80% deletions, QOS becomes the preferred option.

### Future Work
One potential direction for future research is the development of forward and backward private schemes that achieve optimal search time, ideally without relying on oblivious primitives and with minimal client storage requirements.

### Acknowledgements
This work was partially supported by NSF awards #1514261 and #1652259, the National Institute of Standards and Technology, and the Hong Kong RGC grant ECS-26208318. We extend our gratitude to Jeremiah Blocki for his guidance and to the anonymous reviewers for their valuable feedback and suggestions.

### References
[1] "Crimes 2001 to present (City of Chicago). https://data.cityofchicago.org/public-safety/crimes-2001-to-present/ijzp-q8t2."
[2] "Pixek app. https://pixek.io/."
[3] "TPC-H Benchmark. http://www.tpc.org/tpch."
[4] "OpenSSL: The Open Source Toolkit for SSL/TLS, 2003. https://www.openssl.org/."

[5] G. Amjad, S. Kamara, and T. Moataz, "Forward and Backward Private Searchable Encryption with SGX," in EuroSec, 2019.
[6] G. Asharov, I. Komargodski, W. Lin, K. Nayak, and E. Shi, "Optorama: Optimal Oblivious RAM," IACR, 2018.
[7] G. Asharov, M. Naor, G. Segev, and I. Shahaf, "Searchable Symmetric Encryption: Optimal Locality in Linear Space via Two-Dimensional Balanced Allocations," in STOC, 2016.
[8] D. Boneh and B. Waters, "Constrained Pseudorandom Functions and Their Applications," in ASIACRYPT, 2013.
[9] R. Bost, "Sofos: Forward Secure Searchable Encryption," in CCS, 2016.
[10] R. Bost, B. Minaud, and O. Ohrimenko, "Forward and Backward Private Searchable Encryption from Constrained Cryptographic Primitives," in CCS, 2017.
[11] E. Boyle, S. Goldwasser, and I. Ivan, "Functional Signatures and Pseudorandom Functions," in PKC, 2014.
[12] D. Cash, J. Jaeger, S. Jarecki, C. Jutla, H. Krawczyk, M. Rosu, and M. Steiner, "Dynamic Searchable Encryption in Very-Large Databases: Data Structures and Implementation," in NDSS, 2014.
[13] D. Cash, S. Jarecki, C. Jutla, H. Krawczyk, M.-C. Roşu, and M. Steiner, "Highly-Scalable Searchable Symmetric Encryption with Support for Boolean Queries," in CRYPTO, 2013.
[14] D. Cash and S. Tessaro, "The Locality of Searchable Symmetric Encryption," in EUROCRYPT, 2014.
[15] Y.-C. Chang and M. Mitzenmacher, "Privacy Preserving Keyword Searches on Remote Encrypted Data," in ACNS, 2005.
[16] Y. Chang and M. Mitzenmacher, "Privacy Preserving Keyword Searches on Remote Encrypted Data," in ACNS 2005, 2005.
[17] M. Chase and S. Kamara, "Structured Encryption and Controlled Disclosure," in ASIACRYPT, 2010.
[18] S. Chaudhuri and U. Dayal, "An Overview of Data Warehousing and OLAP Technology," SIGMOD, 1997.
[19] R. Curtmola, J. Garay, S. Kamara, and R. Ostrovsky, "Searchable Symmetric Encryption: Improved Definitions and Efficient Constructions," in CCS, 2006.
[20] I. Demertzis, D. Papadopoulos, and C. Papamanthou, "Searchable Encryption with Optimal Locality: Achieving Sublogarithmic Read Efficiency," in CRYPTO, 2018.
[21] I. Demertzis, S. Papadopoulos, O. Papapetrou, A. Deligiannakis, M. Garofalakis, and C. Papamanthou, "Practical Private Range Search in Depth," TODS, 2018.
[22] I. Demertzis, S. Papadopoulos, O. Papapetrou, A. Deligiannakis, and M. N. Garofalakis, "Practical Private Range Search Revisited," in SIGMOD, 2016.
[23] I. Demertzis and C. Papamanthou, "Fast Searchable Encryption with Tunable Locality," in SIGMOD, 2017.
[24] I. Demertzis, R. Talapatra, and C. Papamanthou, "Efficient Searchable Encryption through Compression," PVLDB, 2018.
[25] M. Etemad, A. Küpçü, C. Papamanthou, and D. Evans, "Efficient Dynamic Searchable Encryption with Forward Privacy," PETS, 2018.
[26] S. Faber, S. Jarecki, H. Krawczyk, Q. Nguyen, M. Roşu, and M. Steiner, "Rich Queries on Encrypted Data: Beyond Exact Matches," in ESORICS, 2015.
[27] S. Garg, P. Mohassel, and C. Papamanthou, "TWORAM: Efficient Oblivious RAM in Two Rounds with Applications to Searchable Encryption," in CRYPTO, 2016.
[28] J. Ghareh Chamani, "Implementation of QOS, SDA, and SDD," https://github.com/jgharehchamani/Small-Client-SSE, 2019.
[29] J. Ghareh Chamani, D. Papadopoulos, C. Papamanthou, and R. Jalili, "New Constructions for Forward and Backward Private Symmetric Searchable Encryption," in CCS, 2018.
[30] J. Ghaareh Chamani, "Implementation of Mitra, Orion, Horus, Fides, and Diana Del," https://github.com/jgharehchamani/SSE, 2018.
[31] O. Goldreich, S. Goldwasser, and S. Micali, "On the Cryptographic Applications of Random Functions," in CRYPTO, 1984.
[32] F. Hahn and F. Kerschbaum, "Searchable Encryption with Secure and Efficient Updates," in CCS, 2014.
[33] A. Hamlin, A. Shelat, M. Weiss, and D. Wichs, "Multi-Key Searchable Encryption, Revisited," in PKC, 2018.
[34] S. Kamara and T. Moataz, "Boolean Searchable Symmetric Encryption with Worst-Case Sub-Linear Complexity," in EUROCRYPT, 2017.
[35] S. Kamara and T. Moataz, "SQL on Structurally-Encrypted Databases," in ASIACRYPT, 2018.
[36] S. Kamara and C. Papamanthou, "Parallel and Dynamic Searchable Symmetric Encryption," in FC 2013, 2013.
[37] S. Kamara, C. Papamanthou, and T. Roeder, "Dynamic Searchable Symmetric Encryption," in CCS, 2012.
[38] A. Kiayias, S. Papadopoulos, N. Triandopoulos, and T. Zacharias, "Delegatable Pseudorandom Functions and Applications," in CCS, 2013.
[39] K. S. Kim, M. Kim, D. Lee, J. H. Park, and W.-H. Kim, "Forward Secure Dynamic Searchable Symmetric Encryption with Efficient Updates," in CCS, 2017.
[40] R. W. F. Lai and S. S. M. Chow, "Forward-Secure Searchable Encryption on Labeled Bipartite Graphs," in ACNS, 2017.
[41] X. Meng, S. Kamara, K. Nissim, and G. Kollios, "GRECS: Graph Encryption for Approximate Shortest Distance Queries," in CCS, 2015.
[42] T. Midorikawa, A. Tachikawa, and A. Kanaoka, "Helping Johnny to Search: Encrypted Search on Webmail System," in AsiaJCIS, 2018.
[43] I. Miers and P. Mohassel, "IO-DSSE: Scaling Dynamic Searchable Encryption to Millions of Indexes By Improving Locality," in NDSS, 2017.
[44] M. Naveed, M. Prabhakaran, and C. A. Gunter, "Dynamic Searchable Encryption via Blind Storage," in IEEE SP 2014, 2014, pp. 639–654.
[45] M. H. Overmars, *The Design of Dynamic Data Structures*, ser. Lecture Notes in Computer Science. Springer, 1983.
[46] M. H. Overmars and J. van Leeuwen, "Worst-Case Optimal Insertion and Deletion Methods for Decomposable Searching Problems," Inf. Process. Lett., 1981.
[47] S. Patel, G. Persiano, M. Raykova, and K. Yeo, "Panorama: Oblivious RAM with Logarithmic Overhead," in FOCS 2018, 2018.
[48] D. S. Roche, A. J. Aviv, and S. G. Choi, "A Practical Oblivious Map Data Structure with Secure Deletion and History Independence," in IEEE SP, 2016.
[49] C. V. Rompay, R. Molva, and M. Önen, "Multi-User Searchable Encryption in the Cloud," in ISC 2015, 2015.
[50] C. V. Rompay, R. Molva, and M. Önen, "Secure and Scalable Multi-User Searchable Encryption," in SCC Workshop, 2018.
[51] D. X. Song, D. Wagner, and A. Perrig, "Practical Techniques for Searches on Encrypted Data," in SP, 2000.
[52] E. Stefanov, C. Papamanthou, and E. Shi, "Practical Dynamic Searchable Encryption with Small Leakage," in NDSS, 2014.
[53] E. Stefanov, M. Van Dijk, E. Shi, C. Fletcher, L. Ren, X. Yu, and S. Devadas, "Path ORAM: An Extremely Simple Oblivious RAM Protocol," in CCS, 2013.
[54] S.-F. Sun, X. Yuan, J. K. Liu, R. Steinfeld, A. Sakzad, V. Vo, and S. Nepal, "Practical Backward-Secure Searchable Encryption from Symmetric Puncturable Encryption," in CCS, 2018.
[55] X. S. Wang, K. Nayak, C. Liu, T. Chan, E. Shi, E. Stefanov, and Y. Huang, "Oblivious Data Structures," in CCS, 2014.
[56] Y. Zhang, J. Katz, and C. Papamanthou, "All Your Queries Are Belong to Us: The Power of File-Injection Attacks on Searchable Encryption," in USENIX 2016.

### Appendix
**Figure 13** shows the RealSSE and IdealSSE games for the DSE security definition 1.

The original PiBas scheme used a different key for each word, generated pseudorandomly from a master secret key. During a search, this key was sent to the server, who could decrypt the entries and return the indexes. To achieve a result-hiding scheme (necessary for backward privacy), we modify the scheme as follows: all entries are encrypted with the same key. During a search, the server returns the encrypted values, and the client decrypts them locally. The modified scheme is detailed in **Figure 12**. It is adaptively secure in the random oracle model with setup leakage |DB| and search leakage |DB(w)|. The random oracle assumption can be removed without affecting the scheme's efficiency by replacing H with a PRF F and having the client send all PRF evaluations in a "streaming" manner until a stop message is sent by the server (see [12] for details).

**Figure 12: Static Searchable Encryption PiBas [12]**

**Theorem 1:** Assuming SE is an adaptively-secure, result-hiding static searchable encryption scheme, SDa is an adaptively-secure DSE according to Definition 1, with LU pdt(op, w, id) = ⊥ and LSrch(w) = Updates(w).

**Proof:** The proof is straightforward, given the existence of a simulator SimSE = {SimInitSE, SimSearchSE}. SimInit returns an empty vector EDB and initializes an update counter upd = 0. During each update, SimUpdate computes j as the least significant zero bit position of upd, runs a new instance Sim(j)SE on input 2j, and sends the result to the adversary. It also terminates currently running instances of SimInit(i)SE for i = 0, . . . , j−1, and increments upd. During a search for w, let upd be the current update counter. SimSearch receives as input Updates(w). It then initializes values t0, . . . , t(cid:98)log upd(cid:99) to 0. For each entry u ∈ Updates(w), it computes i as the index in which the update with timestamp u was stored (determined by upd, u) and increments ti by one. Finally, for j = 0, . . . ,(cid:98)log upd(cid:99), it runs SimSearch(j)SE on input tj, and sends all the outputs to the adversary. Assuming SE is secure and result-hiding, the simulator Sim executes SimInit(j)SE, SimSearch(j)SE, and ensures the security of the scheme.

**RealSSE Game:**
```plaintext
b ← RealSSE
Adv (λ, q):
1: N ← Adv(1λ)
2: (K, σ0, EDB0) ← Initialize(1λ, N )
3: for k = 1 to q do
4:   (typek, idk, wk) ← Adv(1λ, EDB0, t1, . . . , tk−1)
5:   if typek = search then
```

This optimized version aims to make the text clearer, more coherent, and professionally formatted.