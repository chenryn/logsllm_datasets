### Preparation and Transmission of Upstream Messages

On the server side, the API `checkin` is used to generate a secret key and send it to the app. The `store_regid` function handles the registration ID from the app, while `secure_message` prepares the message before handing it over to the connection server. This section evaluates the effectiveness of these mechanisms in defending against attacks through GCM and their performance impact.

#### Effectiveness

We tested the app against all GCM-related attacks described in Sections 3 and 4. Despite the underlying GCM vulnerabilities, which allowed an adversary to hijack the app’s registration ID and bind it to an attack device or inject messages, our app effectively defended against these attacks. Specifically, all messages from the adversary were identified through the authenticated encryption scheme and dropped by the `onReceiveMessage` function. Additionally, through random probing, the app server quickly detected the attack based on the GCM authentication problem (Section 3.1) because the adversary could not produce the correct response and was unable to perform a Man-in-the-Middle (MitM) attack.

A more complex scenario involved the misbinding attack using `PendingIntent` (Section 4.2). In this case, the adversary could communicate with the target app and relay challenges from the server. However, the adversary had to continuously do this to avoid detection. Once the adversary stopped, our app server quickly identified the issue after sending a few messages, as observed in our experiments.

| **Baseline** | **Secomp** | **Delay (ms)** |
|--------------|------------|----------------|
| **Send Message** | 2.88 / 10.33 | 6.63 / 11.05 | 3.75 / 4.28 |
| **Receive Message** | 0 / 0 | 3.63 / 4.87 | 3.63 / 4.87 |

**Table 4: Performance of Secomp (tested 200 times).**  
Note: In the baseline, the receiving method delivers a message instantly. For Secomp, a small overhead is introduced for decrypting the message, checking its integrity, and restoring the data.

#### Performance

We measured the performance of the app by comparing it with a baseline version using unprotected GCM SDKs. Our evaluation focused on the delay caused by receiving and sending messages. The registration process is identical to the baseline, as our current design combines key exchange with cookie setting and does not incur additional costs. As shown in Table 4, the overheads caused by sending and receiving messages are low (within 10 ms per message), primarily due to AES (Galois/Counter Mode) encryption and decryption (with a message size of 256 bytes). In Appendix A, we present measurements of this cost for different message sizes.

### Discussion

Our security analysis of push-messaging services reveals critical security weaknesses in popular services like GCM and ADM, enabling unauthorized parties to lock out legitimate users, wipe data, silently install/uninstall apps, and steal sensitive messages. Given the complexity of these services, we believe that our findings are just the tip of the iceberg. We have only inspected the cloud-device link and on-device link, and have not yet examined interactions between connection servers and the developer’s app server, or how the app server directly communicates with the developers’ apps. Even for the "links" we studied, our research is incomplete, missing important services such as Apple Push Notification Service. Further research is needed to better understand the security risks in push messaging services and mobile clouds.

On the defense side, our current implementation of Secomp is preliminary. We built our SDKs as a wrapper around the GCM SDKs, making it easy for developers to integrate them into their apps with minimal API adjustments. However, this approach makes our toolkit less general, requiring new implementations for different services. We are considering other options, including a design that allows developers to build secure communication into their apps regardless of the push-messaging service they use.

### Related Work

**Mobile Cloud Security:** Cloud computing has been used to protect mobile devices, including malware scanning and dynamic app analysis. However, adversaries also abuse push-messaging services as command and control channels for botnets. Little has been done to understand and mitigate the weaknesses in existing mobile cloud services, particularly in push messaging.

**Security Implications of Android IPC:** Extensive studies have been conducted on the security of Android Inter-Process Communication (IPC), including intent broadcasting and service invocation. Known vulnerabilities include permission re-delegation problems and data leaks in content providers. While these issues can be related to known IPC vulnerabilities, they often do not directly reveal sensitive user information. Our work demonstrates how to use the `PendingIntent` object to collect confidential data and inject security-critical commands, highlighting the serious security risk associated with this common practice.

**Authentication in Web Applications:** Authentication mechanisms in web applications have been extensively studied, revealing logic flaws in single-sign-on systems. New techniques have been developed to mitigate these threats. Our research is the first to address authentication issues in mobile clouds, particularly in push-messaging services, which authenticate apps without user intervention, making the process more challenging to analyze.

### Conclusion

In this paper, we present the first security analysis of popular push-messaging services, showing that they are highly error-prone, allowing unauthorized parties to bind target apps to attack devices or inject arbitrary messages. These issues affect many popular apps, posing serious security threats to billions of Android users. The problems stem from weak server-side authentication, access control, and insecure use of IPC channels and `PendingIntent`. To mitigate these threats, we designed and implemented a new technique that establishes an end-to-end secure channel on top of existing push-messaging services.

Given the critical role of push-messaging services in the mobile ecosystem, we expect further research to deepen our understanding of their security implications and improve our technique to safeguard such channels.

### Acknowledgments

We thank Manoj Prabhakaran for useful discussions about the cryptographic solution. This project is supported in part by the National Science Foundation (CNS-1017782, 1117106, 1223477, and 1223495). Authors from Peking University are supported in part by the National Development and Reform Commission (NDRC) under the Project “Guidelines for protecting personal information.”

### References

[1] adb logcat. http://developer.android.com/tools/help/logcat.html.
[2] Android Device Manager. https://www.google.com/android/devicemanager.
[3] Android Security Acknowledgements. https://source.android.com/devices/tech/security/acknowledgements.html.
[4] Baksmali. https://code.google.com/p/smali/.
[5] Cybercriminals use Google Cloud Messaging to control malware on Android devices. http://www.pcworld.com/article/2046642/cybercriminals-use-google-cloud-messaging-service-to-control-malware-on-android-devices.html.
[6] Dex2jar. http://code.google.com/p/dex2jar/.
[7] Google Cloud Messaging for Android. http://developer.android.com/google/gcm/index.html.
[8] Google I/O 2013. http://www.zdnet.com/io-2013-more-than-half-of-apps-in-google-play-now-use-cloud-messaging-7000015511/.
[9] JD-GUI. http://jd.benow.ca/.
[10] Kindle Fire’s market share. http://www.geekwire.com/2013/kindle-fire-scorching-android-tablet-market-33-share/.
[11] Mallory. https://intrepidusgroup.com/insight/mallory/.
[12] mitmproxy. http://mitmproxy.org/.
[13] Sina. http://www.sina.com.cn/.
[14] Sina Weibo. https://play.google.com/store/apps/details?id=com.sina.weibo.
[15] Supporting materials. https://sites.google.com/site/cloudmsging/.
[16] UrbanAirship. http://urbanairship.com/.

[17] A. Armando, R. Carbone, L. Compagna, J. Cuéllar, G. Pellegrino, and A. Sorniotti. An authentication flaw in browser-based single sign-on protocols: Impact and remediations. Computers & Security, 33:41–58, 2013.
[18] G. Bai, J. Lei, G. Meng, S. S. Venkatraman, P. Saxena, J. Sun, Y. Liu, and J. S. Dong. Authscan: Automatic extraction of web authentication protocols from implementations. In Network and Distributed System Security Symposium, 2013.
[19] C. Bansal, K. Bhargavan, and S. Maffeis. Discovering concrete attacks on website authorization by formal analysis. In Computer Security Foundations Symposium (CSF), 2012 IEEE 25th, pages 247–262. IEEE, 2012.
[20] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and B. Shastry. Towards taming privilege-escalation attacks on Android. In 19th Annual Network & Distributed System Security Symposium (NDSS), volume 17, pages 18–25, 2012.
[21] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing inter-application communication in Android. In Proceedings of the 9th international conference on Mobile systems, applications, and services, pages 239–252. ACM, 2011.
[22] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach. Quire: Lightweight provenance for smart phone operating systems. In USENIX Security Symposium, 2011.
[23] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A study of Android application security. In USENIX Security Symposium, 2011.
[24] W. Enck, M. Ongtang, P. D. McDaniel, et al. Understanding Android security. IEEE Security & Privacy, 7(1):50–57, 2009.
[25] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission re-delegation: Attacks and defenses. In USENIX Security Symposium, 2011.
[26] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic detection of capability leaks in stock Android smartphones. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security, 2012.
[27] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: statically vetting Android apps for component hijacking vulnerabilities. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 229–240. ACM, 2012.
[28] J. Oberheide, K. Veeraraghavan, E. Cooke, J. Flinn, and F. Jahanian. Virtualized in-cloud security services for mobile devices. In Proceedings of the First Workshop on Virtualization in Mobile Computing, pages 31–35. ACM, 2008.
[29] G. Portokalidis, P. Homburg, K. Anagnostakis, and H. Bos. Paranoid Android: versatile protection for smartphones. In Proceedings of the 26th Annual Computer Security Applications Conference, pages 347–356. ACM, 2010.
[30] S.-T. Sun and K. Beznosov. The devil is in the (implementation) details: an empirical analysis of OAuth SSO systems. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 378–390. ACM, 2012.
[31] R. Wang, S. Chen, and X. Wang. Signing me onto your accounts through Facebook and Google: A traffic-guided security study of commercially deployed single-sign-on web services. In Security and Privacy (SP), 2012 IEEE Symposium on, pages 365–379. IEEE, 2012.
[32] R. Wang, L. Xing, X. Wang, and S. Chen. Unauthorized origin crossing on mobile platforms: Threats and mitigation. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, pages 635–646. ACM, 2013.
[33] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The impact of vendor customizations on Android security. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, pages 623–634. ACM, 2013.
[34] L. Xing, Y. Chen, X. Wang, and S. Chen. Integuard: Toward automatic protection of third-party web service integrations. In 20th Annual Network and Distributed System Security Symposium, NDSS, pages 24–27, 2013.
[35] S. Zhao, P. P. Lee, J. Lui, X. Guan, X. Ma, and J. Tao. Cloud-based push-styled mobile botnets: a case study of exploiting the cloud to device messaging service. In Proceedings of the 28th Annual Computer Security Applications Conference, pages 119–128. ACM, 2012.
[36] Y. Zhou and X. Jiang. Detecting passive content leaks and pollution in Android applications. In Proceedings of the 20th Annual Symposium on Network and Distributed System Security, 2013.

### Appendix A: Cost of Performing Encryption on Mobile Devices

Given the limited battery and computational power of mobile devices, we measured the cost of performing encryption and decryption. Figure 5 shows the cost for different message lengths, with each length tested 1024 times to calculate the mean value. For a message of 4096 bytes (the maximum allowed by GCM), it takes less than 10 ms using AES in Galois/Counter Mode on a Nexus 7 with a Quad-core 1.5 GHz Krait CPU.

**Figure 5: Average cost of performing encryption and decryption on a mobile device.**

```
Time (ms)
Message Length (byte)  |  AES Galois/Counter Mode Encryption/Decryption cost on Nexus 7
encryption
decryption
0  1  2  3  4  5  6  7  8  9  10
0  512  1024  1536  2048  2560  3072  3584  4096
```

This figure illustrates the average time taken for encryption and decryption operations on a mobile device.