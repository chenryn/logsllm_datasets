### Optimized Text

#### Model Architecture
Our model is composed of multiple layers, including pooling and fully connected layers. We employed a probabilistic grid search similar to the one used earlier, but with an enhanced capability to actively tune both hyper-parameters and model layers for better performance. Under cross-validation and a 75%/25% train/test split, our results are presented in Figure 1, which illustrates the high-level architecture of memory extraction, pre-processing, feature selection, and model evaluation. Figure 2 shows the average pre-processing time for benign (left) and malicious (right) memory snapshots.

#### Pre-Processing and Feature Selection
After completing the snapshot extraction phase, we explored various approaches to represent the memory snapshots without relying on domain-specific knowledge of the operating system. This task posed several challenges, particularly in data storage and the derivation of statistical and numerical features from binary data that are comprehensive enough to uniquely identify each class of snapshots, whether benign or malicious. In addition to extracting features in vector form per sample, we generated images for use in a Convolutional Neural Network (CNN) and byte sequences for a Recurrent Neural Network (RNN) with Long Short-Term Memory (LSTM) cells. Our goal was to eliminate the need for expert knowledge by leveraging modern machine learning techniques to learn from the data after providing adequate feature representations.

As shown in Figure 1, for each malicious or benign snapshot, we applied two additional transformations before generating representations: (1) removal of null-bytes in the images, reducing the snapshot size by over half, and (2) application of MemScrimper [1] to deduplicate the snapshots based on a reference snapshot (0% image for malicious snapshots and the clean state of the VM for benign snapshots). Following these steps, we extracted images of various sizes (1000x1000, 2500x2500, and 5000x5000) by condensing the entire binary matrix, achieved by averaging every n bytes, where n depends on the original size of the snapshot. A sample of these images is depicted in the architecture diagram in Figure 1. We also generated condensed raw byte sequences.

#### Results
We evaluated our approach using a variety of traditional machine learning algorithms, including Decision Trees, Logistic Regression, Random Forest, Stochastic Gradient Descent (SGD), and Support Vector Machines (SVM). The results, as shown in Table 2, were obtained from running 9,000 deduplicated memory captures with a 25% train/test split. The mean test scores (accuracy) and fit times for these algorithms are provided, along with the false positive rates (FPR).

For the CNN, we achieved an accuracy of 98% over 50 epochs when using the largest size of images generated based on non-condensed memory snapshots. Due to the low sample size, we implemented rigorous data augmentation aligned with best practices in the Keras deep learning library, enhancing the generality of the model during training. Although the full image representation showed strong accuracy, the null-byte-removed and MemScrimper representations performed less well. Future work will include training and testing on more samples, which our experimental infrastructure continues to extract from benign and malicious host testbeds.

#### Related Work
Our work is most closely related to the research by Nataraj et al. and Kamundala et al. [6, 7], who focused on representing malware executables as images. Subsequent studies extended this approach to other forms of malware, including Android samples [4] and traffic flows of active malware [13]. Our work differs significantly in that it considers the entire memory snapshot of a device containing malware's trail in volatile memory.

Similarly, the DeepMem system by Song et al. [11], which will be presented at CCS 2018, uses graph-based deep learning to locate domain-specific data in memory snapshots. While both systems share similar datasets, our approach does not require a specific representation of the data in the snapshot, instead leveraging an array of statistical and numerical features independent of any inherent structure.

#### Conclusion and Future Work
In this paper, we present, to the best of our knowledge, the first steps towards an OS and architecture-independent malware detection system. We utilized a range of pre-processing techniques, domain-unaware feature selection, and a suite of machine learning algorithms. Our system, which captures memory snapshots compromised by malware and a novel benign memory snapshot dataset, achieved over 98% accuracy with a low false-positive rate for most traditional machine learning algorithms and similar results for a more complex, image-based CNN architecture.

Future work includes:
1. Continuing to collect more samples from our distributed infrastructure for analysis.
2. Evaluating the performance of our models and pre-processing time for memory snapshots larger than 1 GB.
3. Presenting results from an upcoming deployment of our models on real-world IT infrastructure at several pilot sites.
4. Demonstrating similar results on a dataset of compromised and benign Mac and Linux memory snapshots, creating benign and compromised datasets for each.
5. Including an evaluation of LSTMs and RNNs for this task, both on binary sequences and feature vectors.
6. Attempting to correlate a compromised snapshot’s feature vector of statistical metrics back to the OS-specific cause for the sample to be flagged as malicious.

#### References
[1] Michael Brengel and Christian Rossow. 2018. MemScrimper - Time- and Space-Efficient Storage of Malware Sandbox Memory Dumps. DIMVA (2018).
[2] Endcase. 2018. Encase Forensic. https://www.guidancesoftware.com/
[3] Google. 2018. Rekall Forensics. http://rekall-forensic.com
[4] TT Huang and Kao HY. 2017. R2-D2: Color-Inspired Convolutional Neural Network (CNN)-Based Android Malware Detection. arxiv.org (2017).
[5] IBM, Ponemon Institute. 2018. Cost of Data Breach Study. https://www.ibm.com/security/data-breach
[6] Espoir K Kamundala and Chang Hoon Kim. 2018. CNN Model to Classify Malware Using Image Features. KIISE Transactions on Computing Practices 24, 5 (2018), 256–261.
[7] Lakshmanan Nataraj, Sreejith Karthikeyan, Gregoire Jacob, and BS Manjunath. 2011. Malware Images: Visualization and Automatic Classification. In Proceedings of the 8th International Symposium on Visualization for Cyber Security. ACM, 4.
[8] Giorgio Severi, Tim Leek, and Brendan Dolan-Gavitt. 2018. Malrec - Compact Full-Trace Malware Recording for Retrospective Deep Analysis. DIMVA (2018).
[9] Karen Simonyan and Andrew Zisserman. 2015. Very Deep Convolutional Networks for Large-Scale Image Recognition. International Conference on Learning Representations (ICLR) (2015).
[10] Jared M Smith, Elliot Greenlee, and Aaron Ferber. 2017. DEMO: Akatosh - Automated Cyber Incident Verification and Impact Analysis. CCS (2017), 2463–2465.
[11] Wei Song, Heng Yin, Chang Liu, and Dawn Song. 2018. DeepMem: Learning Graph Neural Network Models for Fast and Robust Memory Forensic Analysis. ACM Conference on Computer and Communications Security (CCS) (2018).
[12] The Volatility Foundation. 2018. https://www.volatilityfoundation.org
[13] W Wang, M Zhu, X Zeng, and Ye X. 2017. Malware Traffic Classification Using Convolutional Neural Network for Representation Learning. IEEE International Conference on Information Networking (ICOIN) (2017).