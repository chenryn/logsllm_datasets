### Throughput Definition and Comparison

Throughput is defined as \( \frac{D}{T} \), where \( D \) represents the size of the delivered data, and \( T \) denotes the total running time for both parties during the "deliver" phase. Our statistical results are presented in Figure 6.

For ZKCP, the system runs out of memory when the data size exceeds 4 KB. For a 2 KB data size, ZKCP's throughput reaches approximately 22 B/s. In contrast, ZKCPlus achieves a throughput of 2278 B/s for the same 2 KB data, which is 104 times higher than that of ZKCP. It is important to note that the throughput of ZKCPlus scales logarithmically with the data size, due to the most computationally expensive operation, multi-scalar multiplication, having a computational complexity of \( O\left(\frac{n}{\log n}\right) \).

### Prover Efficiency of CP-NIZK Argument

To better illustrate the prover efficiency of our CP-NIZK argument compared to the zkSNARK used by ZKCP, we replaced the MiMC block cipher in ZKCPlus with the same encryption scheme used by ZKCP, specifically a stream cipher constructed by running a SHA256-based pseudo-random function in CTR mode. This modified implementation of ZKCPlus is denoted as "ZKCPlus-SHA256." We then encrypted data of varying sizes and measured the proving time for the encryption subroutine in both ZKCP and ZKCPlus-SHA256. For a fair comparison, ZKCPlus-SHA256 was run using a single thread.

Due to the limitations of ZKCP, we were only able to collect statistics for data sizes smaller than 4 KB. As shown in Figure 7, under the same encryption scheme, the prover of ZKCPlus-SHA256 remains more efficient than that of ZKCP. The trend of proving time with respect to data size for both protocols roughly conforms to the computational complexity of multi-scalar multiplication, \( O\left(\frac{n}{\log n}\right) \). However, the constant factor for ZKCPlus-SHA256 is significantly smaller. A linear fit indicates that ZKCPlus-SHA256 has a constant that is approximately 13 times smaller than that of ZKCP, suggesting that our CP-NIZK argument is an order of magnitude faster in proving time compared to the zkSNARK scheme adopted by ZKCP. (As previously mentioned, the differences in the underlying multi-scalar multiplication implementations account for only a 0.8-1.4× difference, which is negligible.)

### Performance of ZKCPlus Applications

#### Pay to CNN Model

We evaluated the "pay to CNN model" application on two neural network models: a simple 3-layer CNN for handwritten digit recognition and a well-known deep CNN, VGG16 [50], for image classification. The 3-layer CNN consists of one convolutional layer with ReLU activation and 2×2 max pooling with a stride size of 2, followed by two fully-connected layers. We trained this model on the MNIST dataset [40] with an input size of 28×28 and a total of 8,620 parameters. The VGG16 model is far more complex, comprising thirteen convolutional layers and three fully-connected layers. We trained the VGG16 model on the CIFAR-10 dataset [37] with a 32×32 input size and up to 14,991,946 parameters. Both models use fixed-point arithmetic.

After training the models on a server, we measured the running time and communication cost for both the server and the client during the "validate" and "deliver" phases for trading the models. For simplicity, we present the statistics for one test image case. In practice, the buyer may challenge the seller with several test images during the "validate" phase.

As shown in Table 5, for the 3-layer CNN, both phases complete within 1 second for either the server or the client, incurring only 51.35 KB and 211.47 KB of communication cost, respectively. For the VGG16 network, which involves about fifteen million parameters, it takes the seller 6.15 minutes and the buyer 56.97 seconds to prove/verify an inference process on one test image. In the subsequent "deliver" phase, it takes the seller 6.13 minutes and the buyer 18.50 seconds to generate/verify the proof of delivery for all fifteen million parameters. The proof size in the "validate" phase is about 80.71 KB, and the ciphertext and proof of delivery in the "deliver" phase are less than 300 MB.

Our CP-NIZK argument demonstrates significant advancements in verifiable inference computation for CNNs. Previous studies [41] have evaluated the Groth16 zkSNARK scheme on the LeNet-5 [39] CNN, which has sixty thousand parameters. On a machine with a 3.4 GHz CPU and 32 GB of memory, it took about 1.5 hours to generate an 11 GB CRS and 45 minutes to prove an inference process. In contrast, for a much larger model with 250 times more parameters, ZKCPlus can prove an inference process in 7.5 times less time, with negligible setup time and CRS size.

#### Pay to SQL Query

We constructed a database storing a table of 100,000 31-byte strings and measured the performance of the "pay to SQL query" application on trading a subset of the strings that contain a specific 5-byte substring. The statistics are listed in Table 6.

In the "validate" phase, the seller executes the "SELECT" query and constructs an argument for the selection process. It takes the seller about 8.67 seconds to build the proof for the selection query over all 100,000 records, and the buyer 0.77 seconds to verify it, with less than 1 MB of communication cost. There are 402 entries selected, and in the "deliver" phase, it takes both parties less than 1 second to generate/verify the proof of delivery, with less than 100 KB of communication cost.

### Related Work

#### Blockchain-based Fair-Exchange Protocols

It is widely recognized that without additional assumptions, fair exchange is unachievable without a trusted third party [45]. The emergence of blockchain networks like Bitcoin and Ethereum offers a potential solution, where participants can place their trust in decentralized networks instead of centralized third parties [21, 23, 51, 52].

The ZKCP [43] protocol is a pioneering work in achieving fairness between two trustless parties, using blockchain-based scripts as the arbiter for the exchange. However, it faces issues of low practicality and scalability. Another notable fair-exchange protocol based on blockchain, FairSwap [23], aims to reduce the computational cost for participants by avoiding heavy zero-knowledge proofs. Instead, it uses a lightweight proof of misbehavior, allowing a cheated buyer to issue a dispute to the arbiter (smart contract) with the misbehavior proof to restore fairness. While this provides "weak" fairness [3, 45] compared to ZKCP and ZKCPlus, the on-chain gas cost for verifying a misbehavior proof scales with the proof size, severely limiting its practicality and scalability. In contrast, ZKCP and ZKCPlus offer \( O(1) \) on-chain gas cost.

#### Zero-Knowledge Proofs

The field of zero-knowledge proofs [30] is rapidly evolving, with many efficient protocols and systems emerging in recent years. These can be categorized by their underlying techniques, such as pairing-based succinct NIZK argument of knowledge (zkSNARK) schemes [17, 26, 27, 32, 42, 46, 55], discrete logarithm-based proofs [10, 11, 31, 49, 53], interactive oracle proofs [5, 6, 18, 57], MPC-in-the-head-based proofs [2, 15, 28, 34, 35], and others. They rely on different security assumptions and offer different trade-offs between prover time, verifier time, and proof size. The original ZKCP design used pairing-based arguments [7, 46]. To avoid the problematic trusted setup phase, we switched to discrete logarithm-based schemes that require only public setup. Our construction draws heavily on the techniques proposed by [31].

We built our argument for data-parallel computations on top of R1CS, an extension of quadratic arithmetic programs [27]. An alternative is the GKR protocol [19, 29], which offers asymptotically optimal prover time for data-parallel computations. Several GKR protocol-based argument schemes [53, 55, 57] have been developed. Traditionally, this approach assumes layered arithmetic circuits, which limits its applicability. Recently, [56] demonstrated how to remove this restriction, making GKR-based arguments a promising direction for future exploration. By incorporating their prover efficiency, we may further enhance ZKCPlus's throughput.

Another interesting direction involves interactive oracle proofs. There are several ready-made protocols for both R1CS [5, 6, 18] and the GKR protocol [57]. These use lightweight cryptographic primitives (mainly collision-resistant hash functions) and feature high prover efficiency, full transparency, and plausible post-quantum security. Their main disadvantage is relatively large proof size, which is not a significant issue for ZKCPlus.

### Conclusion

In this paper, we propose ZKCPlus, a practical and flexible fair-exchange protocol that optimizes and extends ZKCP. We observed that ZKCP incurs a problematic trusted setup phase and heavy proving overhead, making it impractical for complex data validations. Therefore, we designed a prover-efficient CP-NIZK argument for data-parallel computations, requiring only public setup. This argument eliminates the costly setup phase and, combined with circuit-friendly cryptographic primitives, significantly reduces the seller's proving overhead. Its composable nature allows the protocol to validate complex predicates in a flexible, modular manner. Our evaluations show that ZKCPlus significantly outperforms ZKCP, with a much lighter setup phase and higher overall throughput. We also demonstrate that ZKCPlus can be used to build applications of practical interest.

### Acknowledgements

This work was supported by donations from the Nervos Foundation and HashKey, the National Natural Science Foundation of China under Grants 61772308, 61972224, and U1736209, and the BNRist Network and Software Security Research Program under Grants BNR2019TD01004 and BNR2019RC01009. Yupeng Zhang is supported by DARPA under Contract No. HR001120C0087. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of DARPA.

### References

[1] Martin R Albrecht, Lorenzo Grassi, Christian Rechberger, Arnab Roy, and Tyge Tiessen. 2016. MiMC: Efficient Encryption and Cryptographic Hashing with Minimal Multiplicative Complexity. In Advances in Cryptology-ASIACRYPT 2016-22nd International Conference on the Theory and Application of Cryptology and Information Security, Hanoi, Vietnam, December 4-8, 2016, Proceedings, Part I. 191–219.

[2] Scott Ames, Carmit Hazay, Yuval Ishai, and Muthuramakrishnan Venkitasubramaniam. 2017. Ligero: Lightweight sublinear arguments without a trusted setup. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2087–2104.

[3] N Asokan. 1998. Fairness in electronic commerce. (1998).

[4] Mihir Bellare and Phillip Rogaway. 1993. Random oracles are practical: a paradigm for designing efficient protocols. 1st ACM Conference on Computer and Communications Security November 1993 (1993), 62–73.

[5] Eli Ben-Sasson, Iddo Bentov, Yinon Horesh, and Michael Riabzev. 2018. Scalable, transparent, and post-quantum secure computational integrity. IACR Cryptology ePrint Archive 2018 (2018), 46.

[6] Eli Ben-Sasson, Alessandro Chiesa, Michael Riabzev, Nicholas Spooner, Madars Virza, and Nicholas P Ward. 2019. Aurora: Transparent succinct arguments for R1CS. In Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 103–128.

[7] Eli Ben-Sasson, Alessandro Chiesa, Eran Tromer, and Madars Virza. 2014. Succinct non-interactive zero knowledge for a von Neumann architecture. In 23rd {USENIX} Security Symposium ({USENIX} Security 14). 781–796.

[8] Sean Bowe. 2016. pay-to-sudoku. http://diyhpl.us/~bryan/papers2/bitcoin/zkcp3.

[9] Sean Bowe. 2016. pay-to-sudoku. https://github.com/zcash-hackworks/pay-to-pdf.sudoku.

[10] Sean Bowe, Jack Grigg, and Daira Hopwood. 2019. Halo: Recursive Proof Composition without a Trusted Setup. IACR Cryptol. ePrint Arch. 2019 (2019), 1021.

[11] Benedikt Bünz, Jonathan Bootle, Dan Boneh, Andrew Poelstra, Pieter Wuille, and Greg Maxwell. 2018. Bulletproofs: Short proofs for confidential transactions and more. In 2018 IEEE Symposium on Security and Privacy (SP). IEEE, 315–334.

[12] Matteo Campanelli, Dario Fiore, and Anaïs Querol. 2019. Legosnark: Modular design and composition of succinct zero-knowledge proofs. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security. 2075–2092.

[13] Matteo Campanelli, Rosario Gennaro, Steven Goldfeder, and Luca Nizzardo. 2017. Zero-knowledge contingent payments revisited: Attacks and payments for services. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 229–243.

[14] Ran Canetti, Yehuda Lindell, Rafail Ostrovsky, and Amit Sahai. 2002. Universally composable two-party and multi-party secure computation. In Proceedings of the thiry-fourth annual ACM symposium on Theory of computing. 494–503.

[15] Melissa Chase, David Derler, Steven Goldfeder, Claudio Orlandi, Sebastian Ramacher, Christian Rechberger, Daniel Slamanig, and Greg Zaverucha. 2017. Post-quantum zero-knowledge and signatures from symmetric-key primitives. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 1825–1842.

[16] Melissa Chase, Chaya Ganesh, and Payman Mohassel. 2016. Efficient zero-knowledge proof of algebraic and non-algebraic statements with applications to privacy preserving credentials. In Annual International Cryptology Conference. Springer, 499–530.

[17] Alessandro Chiesa, Yuncong Hu, Mary Maller, Pratyush Mishra, Noah Vesely, and Nicholas Ward. 2020. Marlin: Preprocessing zksnarks with universal and updatable SRS. In Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 738–768.

[18] Alessandro Chiesa, Dev Ojha, and Nicholas Spooner. 2020. Fractal: Post-quantum and transparent recursive proofs from holography. In Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 769–793.

[19] Graham Cormode, Michael Mitzenmacher, and Justin Thaler. 2012. Practical verified computation with streaming interactive proofs. In Proceedings of the 3rd Innovations in Theoretical Computer Science Conference. 90–112.

[20] John D’Arcy, Anat Hovav, and Dennis Galletta. 2009. User awareness of security countermeasures and its impact on information systems misuse: A deterrence approach. Information systems research 20, 1 (2009), 79–98.

[21] Sergi Delgado-Segura, Cristina Pérez-Solà, Guillermo Navarro-Arribas, and Jordi Herrera-Joancomartí. 2017. A fair protocol for data trading based on Bitcoin transactions. Future Generation Computer Systems (2017).

[22] Kevin Dooley. 2001. Designing Large Scale Lans: Help for Network Designers. "O’Reilly Media, Inc."

[23] Stefan Dziembowski, Lisa Eckey, and Sebastian Faust. 2018. Fairswap: How to fairly exchange digital goods. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 967–984.

[24] Amos Fiat and Adi Shamir. 1986. How to prove yourself: Practical solutions to identification and signature problems. In Conference on the Theory and Application of Cryptographic Techniques. Springer, 186–194.

[25] Georg Fuchsbauer. 2019. WI is not enough: Zero-knowledge contingent (service) payments revisited. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security. 49–62.

[26] Ariel Gabizon and Zachary J Williamson. 2019. PLONK: Permutations over Lagrange-bases for Oecumenical Noninteractive arguments of Knowledge. (2019).

[27] Rosario Gennaro, Craig Gentry, Bryan Parno, and Mariana Raykova. 2013. Quadratic span programs and succinct NIZKs without PCPs. In Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 626–645.

[28] Irene Giacomelli, Jesper Madsen, and Claudio Orlandi. 2016. Zkboo: Faster zero-knowledge for boolean circuits. In 25th USENIX Security Symposium (USENIX Security 16). 1069–1083.

[29] Shafi Goldwasser, Yael Tauman Kalai, and Guy N Rothblum. 2015. Delegating computation: interactive proofs for muggles. Journal of the ACM (JACM) 62, 4 (2015), 27.

[30] Shafi Goldwasser, Silvio Micali, and Charles Rackoff. 1989. The knowledge complexity of interactive proof systems. SIAM Journal on computing 18, 1 (1989), 186–208.

[31] Jens Groth. 2009. Linear algebra with sub-linear zero-knowledge arguments. In Annual International Cryptology Conference. Springer, 192–208.

[32] Jens Groth. 2016. On the size of pairing-based non-interactive arguments. In Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 305–326.

[33] herumi. 2015. mcl library. https://github.com/herumi/mcl.

[34] Yuval Ishai, Eyal Kushilevitz, Rafail Ostrovsky, and Amit Sahai. 2007. Zero-knowledge from secure multiparty computation. In Proceedings of the thirty-ninth annual ACM symposium on Theory of computing. ACM, 21–30.

[35] Yuval Ishai, Manoj Prabhakaran, and Amit Sahai. 2008. Founding cryptography on oblivious transfer–efficiently. In Annual International Cryptology Conference. Springer, 572–591.

[36] Thomas Jakobsen and Lars R. Knudsen. 1997. The Interpolation Attack on Block Ciphers. In Fast Software Encryption, 4th International Workshop, FSE ’97, Haifa, Israel, January 20-22, 1997, Proceedings (Lecture Notes in Computer Science, Vol. 1267), Eli Biham (Ed.). Springer, 28–40. https://doi.org/10.1007/BFb0052332

[37] Alex Krizhevsky, Geoffrey Hinton, et al. 2009. Learning multiple layers of features from tiny images. (2009).

[38] Scipr Lab. 2012. libsnark. https://github.com/scipr-lab/libsnark.

[39] Yann LeCun, Léon Bottou, Yoshua Bengio, and Patrick Haffner. 1998. Gradient-based learning applied to document recognition. Proc. IEEE 86, 11 (1998), 2278–2324.

[40] Yann LeCun, Léon Bottou, Yoshua Bengio, and Patrick Haffner. 1998. Gradient-based learning applied to document recognition. Proc. IEEE 86, 11 (1998), 2278–2324.

[41] Seunghwa Lee, Hankyung Ko, Jihye Kim, and Hyunok Oh. 2020. vCNN: Verifiable Convolutional Neural Network. IACR Cryptol. ePrint Arch. 2020 (2020), 584.

[42] Mary Maller, Sean Bowe, Markulf Kohlweiss, and Sarah Meiklejohn. 2019. Sonic: Zero-knowledge SNARKs from linear-size universal and updatable structured reference strings. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security. 2111–2128.

[43] Gregory Maxwell. 2011. Zero Knowledge Contingent Payment. https://en.bitcoin.it/wiki/Zero_Knowledge_Contingent_Payment.

[44] Satoshi Nakamoto et al. 2008. Bitcoin: A peer-to-peer electronic cash system.

[45] Henning Pagnia and Felix C Gärtner. 1999. On the impossibility of fair exchange without a trusted third party. Technical Report. Technical Report TUD-BS-1999-02, Darmstadt University of Technology.

[46] Bryan Parno, Jon Howell, Craig Gentry, and Mariana Raykova. 2013. Pinocchio: Nearly practical verifiable computation. In 2013 IEEE Symposium on Security and Privacy. IEEE, 238–252.

[47] Torben Pryds Pedersen. 1991. Non-interactive and information-theoretic secure verifiable secret sharing. In Annual International Cryptology Conference. Springer, 129–140.

[48] Nicholas Pippenger. 1980. On the evaluation of powers and monomials. SIAM J. Comput. 9, 2 (1980), 230–250.

[49] Srinath Setty. 2020. Spartan: Efficient and general-purpose zkSNARKs without trusted setup. In Annual International Cryptology Conference. Springer, 704–737.

[50] Karen Simonyan and Andrew Zisserman. 2014. Very deep convolutional networks for large-scale image recognition. arXiv preprint arXiv:1409.1556 (2014).

[51] Peter Todd and Amir Taaki. 2014. Paypub: Trustless payments for information publishing on bitcoin. Github Project.

[52] Florian Tramer, Fan Zhang, Huang Lin, Jean-Pierre Hubaux, Ari Juels, and Elaine Shi. 2017. Sealed-glass proofs: Using transparent enclaves to prove and sell knowledge. In 2017 IEEE European Symposium on Security and Privacy (EuroS&P). IEEE, 19–34.