### 314
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021 at 09:59:55 UTC from IEEE Xplore. Restrictions apply.**

Due to space constraints, we only present the True Positive (TP) curves for call traces v5, v6, and v7 in Figures 5, 6, and 7, respectively. All algorithms perform poorly with call trace v5 because the inter-arrival times of SPIT and non-SPIT calls are identical. This diminishes the usefulness of the time since the last call from the same caller and call frequency (features 9 and 16 in Section 4.2). Additionally, the number of SPIT calls in call trace v5 is reduced to 45 (compared to 212 in v4), further degrading clustering quality and detection accuracy. Figure 8 summarizes the TP rates for eMPCK across the four call traces, indicating the salience of differences between SPIT and non-SPIT calls. The easiest call trace to classify is v4, followed by v6 and v7, with v5 being the most challenging. In v5, SPIT calls are almost indistinguishable from short-duration non-SPIT calls.

Error bars (±1 standard deviation) for eMPCK are shown in Figure 2 and omitted in subsequent figures for clarity. Generally, errors decrease as the ratio of user feedback increases. For call traces v4, v6, and v7, the error is less than ±5% when the user feedback ratio exceeds 0.1. However, for call trace v5, the error can be as high as ±25% at a 0.1 feedback ratio.

### 315
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021 at 09:59:55 UTC from IEEE Xplore. Restrictions apply.**

### 5.4 Scalability of Execution Time

In this experiment, we compare the running times of MPCK and eMPCK by varying the number of call data points, using call trace v7. For MPCK, exact optimizations are applied without loss of accuracy, such as re-evaluating the maximally separated points only when the A matrix changes. The results are based on code compiled with MS VC++ 8.0, running on Windows XP with an Intel E6400 2.13 GHz CPU.

As shown in Figure 11, MPCK exhibits non-linear growth in running time as the number of call data points increases (error bars are ±1 standard deviation). In contrast, eMPCK shows linear growth in running time. MPCK takes significantly longer to run, up to 15 times longer for a batch of 400 calls. Table 1 shows the number of iterations to convergence, where eMPCK generally requires fewer iterations. The running time advantage of eMPCK is due to both fewer iterations and lower per-iteration running time. For call trace v5, the similarity between SPIT and non-SPIT calls renders the initialization of Ah ineffective, resulting in roughly equal iteration counts for both algorithms.

| Algorithm | v4 | v5 | v6 | v7 | Average |
|-----------|----|----|----|----|---------|
| MPCK      | 6.94 | 7.80 | 7.81 | 6.94 | 7.37    |
| eMPCK     | 3.98 | 7.83 | 5.38 | 4.7  | 5.47    |

### 5.5 Effect of Noise in User Feedback

We evaluated the algorithms with various noise levels in user feedback. A noise level of c means that a fraction c of the user feedback is false, i.e., a SPIT call is reported as non-SPIT and vice versa. The user feedback ratio is fixed at 0.3, and the results are shown for call trace v6. As the noise level increases, the true positive rate decreases (Figure 9). The false positive rates (Figure 10) indicate that pMPCK is unusable at all noise levels, while other algorithms remain usable at low noise levels. Beyond a noise level of 0.5, eMPCK's performance drops below that of MPCK due to the design of the detection predicate (Section 4.4.2). At noise levels of 0.2 or below, eMPCK maintains both true positive and true negative rates above 0.8.

### 316
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021 at 09:59:55 UTC from IEEE Xplore. Restrictions apply.**

### 5.6 Evaluation with Noise and Feedback Ratio

We evaluate all four proposed algorithms with respect to the four call traces, considering the combined effect of user feedback proportion and noise level. The results are shown in Figures 12, 13, and 14, where the Z-axis represents the difference between the True Positive (TP) and False Positive (FP) rates. If TP-FP is greater than zero, the detection provides more correct results than incorrect ones, indicating a valid operating point. Due to page length limitations, we show 3D plots only for call trace v6. Generally, fixing the noise level, the TP-FP value peaks and then decreases as the feedback ratio varies from 0 to 1. With accurate user feedback, even a low feedback ratio yields good performance for MPCK and eMPCK. pMPCK, however, performs well only with nearly perfect user feedback for most calls.

To quantify overall detection quality, we define the volume metric based on the integral (Equation 6). In the ideal case where TP-FP is maintained at 1, the volume will be 0.9. Table 2 shows the volume for each combination of algorithm and call trace. Call trace v5 has the lowest volume, indicating the worst performance for all algorithms. On average, eMPCK performs best, followed by eMPCK (Multi Class), MPCK, and pMPCK.

\[
\text{Volume} = \int_{0}^{1} \int_{0}^{1} (TP - FP) \, df \, dn
\]

| Algorithm | v4 | v5 | v6 | v7 | Average |
|-----------|----|----|----|----|---------|
| MPCK      | 0.048 | -0.595 | -0.319 | -0.388 | -0.314 |
| eMPCK (Multi Class) | 0.068 | -0.590 | -0.330 | -0.402 | -0.314 |
| eMPCK     | 0.042 | -0.577 | -0.272 | -0.340 | -0.287 |
| pMPCK     | 0.015 | -0.596 | -0.371 | -0.411 | -0.341 |

### 6. Conclusion

In this paper, we propose a new approach for detecting SPIT calls in a VoIP environment. We map each phone call into a data point based on an extendable set of call features derived from signaling and media protocols, converting the problem into a data classification task. We apply semi-supervised clustering, allowing for optional user feedback for more accurate classification. We introduce a new algorithm, eMPCK-Means, based on MPCK-Means, which provides linear time performance with the number of calls. eMPCK-Means includes a pre-metrics-update step, achieving high (>90%) detection true positive rates with less than 10% user feedback data points for three of the four call traces. We found it challenging to achieve high detection accuracy based solely on features available in the call establishment phase. The pMPCK algorithm performs well only with accurate user feedback for a majority of calls.

### 7. References

[1] VOIPSA, "VoIP Threat Taxonomy," 2008.
[2] Y. S. Wu, S. Bagchi, S. Garg, and N. Singh, "SCIDIVE: a stateful and cross protocol intrusion detection architecture for voice-over-IP environments," in DSN, 2004, pp. 433-442.
[3] H. Sengar, D. Wijesekera, H. Wang, and S. Jajodia, "VoIP Intrusion Detection Through Interacting Protocol State Machines," in DSN, 2006, pp. 393-402.
[4] C. J. J. Rosenberg, "RFC 5039 : The Session Initiation Protocol (SIP) and Spam," 2008.
[5] D. Shin, J. Ahn, and C. Shim, "Progressive Multi Gray-Leveling: A Voice Spam Protection Algorithm," IEEE Network, vol. 20, pp. 18-24, 2006.
[6] M. Bilenko, S. Basu, and R. J. Mooney, "Integrating constraints and metric learning in semi-supervised clustering," in ICML, 2004, pp. 81-88.
[7] J. Quittek, S. Niccolini, S. Tartarelli, M. Stiemerling, M. Brunner, and T. Ewald, "Detecting SPIT Calls by Checking Human Communication Patterns," in ICC, 2007, pp. 1979-1984.
[8] R. MacIntosh and D. Vinokurov, "Detection and mitigation of spam in IP telephony networks using signaling protocol analysis," in IEEE/Sarnoff Symposium on Advances in Wired and Wireless Communication, 2005, pp. 49-52.
[9] P. Kolan and R. Dantu, "Socio-technical defense against voice spamming," ACM Transactions on Autonomous and Adaptive Systems (TAAS), vol. 2, 2007.
[10] J. MacQueen, "Some methods for classification and analysis of multivariate observations," in the Fifth Berkeley Symposium on Mathematical Statistics and Probability, 1967, p. 14.
[11] P. Haider, U. Brefeld, and T. Scheffer, "Supervised clustering of streaming data for email batch detection," in ICML, 2007, pp. 345-352.
[12] M. Sasaki and H. Shinnou, "Spam Detection Using Text Clustering," in International Conference on Cyberworlds, 2005.
[13] C. J. C. Burges, "A tutorial on support vector machines for pattern recognition," Data Mining and Knowledge Discovery, vol. 2, pp. 121-167, 1998.
[14] G. Druck, C. Pal, A. McCallum, and X. Zhu, "Semi-supervised classification with hybrid generative/discriminative methods," in KDD, 2007, pp. 280-289.
[15] K. Bennett and A. Demiriz, "Semi-supervised support vector machines," Advances in Neural Information processing systems, pp. 368-374, 1999.
[16] J. Rosenberg, "RFC 3261 - SIP: Session Initiation Protocol," 2002.
[17] H. Schulzrinne, "RFC 1889 - RTP: A Transport Protocol for Real-Time Applications," 1996.
[18] N. Grira, M. Crucianu, and N. Boujemaa, "Unsupervised and Semi-supervised Clustering: a Brief Survey," A Review of Machine Learning Techniques for Processing Multimedia Content, Report of the MUSCLE European Network of Excellence (FP6), 2004.
[19] T. Finley and T. Joachims, "Supervised clustering with support vector machines," in ICML, 2005, pp. 217-224.
[20] voip-info.org, "Asterisk SIP Media Path."