### 5.2 Other Zero-day Vulnerabilities

Every year, Symantec analysts prepare the "Internet Security Threats Report" (ISTR), which details new threats, vulnerabilities, and malware trends. This report includes information about zero-day vulnerabilities identified during the previous year. According to the ISTR reports from 2008 to 2011, a total of 31 zero-day vulnerabilities were identified: 9 in 2008, 12 in 2009, 14 in 2010, and 8 in 2011 [33-37]. Our automated method discovered, on average, 3 previously unknown zero-day vulnerabilities and 2 zero-day vulnerabilities from the list reported by Symantec each year. However, our method was unable to identify an average of 8 known zero-day vulnerabilities per year.

#### Figure 7: Time Before Vulnerabilities Disclosed Between 2008-2011 Started Being Exploited in the Field

The histograms group the exploitation lag in 3-month increments after disclosure, and the red rug indicates the lag for each exploited vulnerability. Zero-day attacks are excluded from this figure.

To understand why our method missed 24 zero-day vulnerabilities reported in the ISTR, we conducted a manual analysis of their characteristics, such as being used in highly targeted attacks or employing polymorphism. This study highlights the following limitations of our method:

- **Web Attacks**: Anti-virus telemetry only records detections of host-based attacks. To detect web-based attacks, such as cross-site scripting, we would need to analyze network-based intrusion-detection data. While Symantec's intrusion detection products provide some of this data, it is not straightforward to correlate it with binary reputation data. For example, our method did not detect CVE-2011-2107 and CVE-2011-3765 because these vulnerabilities are exploited in web attacks.
  
- **Polymorphic Malware**: If the exploit files created for zero-day vulnerabilities are polymorphic, the file hashes may differ in the anti-virus telemetry and binary reputation data. Most of the zero-day exploits we could not identify were polymorphic, such as CVE-2010-0806, CVE-2010-3654, and CVE-2009-1537.

- **Non-executable Exploits**: In recent years, exploits have been embedded in non-executable files like PDFs, DOCs, and XLSXs. Symantec's anti-virus products can detect such malware, and the anti-virus telemetry contains records for these detections. However, the binary reputation data only tracks executable files. Since we use binary reputation data to approximate attack start dates, we cannot detect zero-day vulnerabilities exploited by non-executable files. One potential workaround is to link exploits in non-executable files with the executables dropped once the exploit is successful, using dynamic analysis results. Unfortunately, dynamic analysis data for non-executable files was only available starting in late 2011, providing limited benefits. A representative example is CVE-2011-0609, which was exploited in the RSA attack [27].

- **Targeted Attacks**: Zero-day vulnerabilities are often exploited in targeted attacks [37]. These attacks target a limited number of organizations holding sensitive information, so most consumers are not exposed to them. Even though we analyzed binary reputation data collected from 11 million hosts, this may not be sufficient to identify highly targeted zero-day attacks.

### 6. Discussion

Zero-day attacks are challenging to prevent because they exploit unknown vulnerabilities for which there are no patches or signatures. As long as software has bugs and developing exploits for new vulnerabilities remains profitable, we will continue to face zero-day attacks. Our study found that 60% of the zero-day vulnerabilities we identified were previously unknown, suggesting that there may be many more zero-day attacks than previously thoughtâ€”perhaps more than twice as many. Reputation-based technologies, which assign scores to files based on their prevalence and other factors [9], can help single out rare events like zero-day attacks and reduce the effectiveness of exploits.

The large fraction of new zero-day vulnerabilities we identified also underscores the difficulty of detecting these attacks through manual analysis, given the current volume of cyber attacks. Automated methods, such as the one proposed in this paper, facilitate the systematic study of these threats. For example, our method allows us to measure the duration of zero-day attacks (Figure 4). While the average duration is approximately 10 months, the fact that all but one of the vulnerabilities disclosed after 2010 remained unknown for more than 16 months suggests that we may be underestimating the duration of zero-day attacks, as our data only goes back to February 2008. Future automated techniques will enable faster detection of zero-day attacks, but this will require mechanisms for organizations to share information about suspected targeted attacks with the security community.

Our findings also contribute to the ongoing debate on the benefits of full disclosure policies. This policy is based on the premise that public disclosure, rather than private reporting to vendors, provides an incentive for faster patching. The debate is ongoing [2, 6, 30, 31], but most participants agree that disclosing vulnerabilities increases the volume of attacks. The supporters of full disclosure argue that this increase provides a meaningful incentive for patching. However, there is disagreement about whether the trade-off between a high volume of attacks and faster patching is beneficial overall. For example, Schneier suggested that to mitigate the risk of disclosure, we should either patch all vulnerable hosts immediately or limit the information available about the vulnerability [29]. Ozment et al. concluded that disclosing information about vulnerabilities improves system security [22], while Rescorla et al. found less strong evidence [26]. Arora et al. [4] and Cavusoglu et al. [8] used game theory to analyze the impact of full disclosure and reached opposite conclusions about whether patches would follow disclosures.

The root cause of these disagreements lies in the difficulty of quantifying the real-world impact of vulnerability disclosures and patch releases without comprehensive field data. Our study shows that the disclosure of zero-day vulnerabilities significantly increases the risk for end-users, as the volume of attacks can increase by up to five orders of magnitude. Vendors prioritize which vulnerabilities to patch, giving more urgency to those that are disclosed or about to be disclosed. For example, 80% of the 2007 vulnerabilities were discovered more than 30 days before the disclosure date [12]. Additionally, users often delay deploying patches, even when they are available. Anecdotal evidence suggests that attackers adapt their strategies to expected disclosures. For example, the Witty worm was released less than 48 hours after the vulnerability it exploited was disclosed, raising suspicions that the attacker waited until the patch was imminent [40]. The exploit file used in the 2011 RSA attack was sent to 15 different organizations in the two weeks leading to the vulnerability's disclosure, in an attempt to maximize exploitation before it was patched [17]. Early disclosure reduces the value of zero-day vulnerabilities, as some fees for new exploits are paid in installments, with subsequent payments depending on the lack of a patch [15]. Further research is needed to quantify these aspects of the full disclosure trade-off, such as measuring how quickly vulnerable hosts are patched in the field following disclosures. Like our study of zero-day attacks, answering these questions will require empirical studies at scale using comprehensive field data.

### 7. Conclusion

Zero-day attacks have been discussed for decades, but no study has yet measured the duration and prevalence of these attacks in the real world before the disclosure of the corresponding vulnerabilities. We take a first step in this direction by analyzing field data collected from 11 million Windows hosts over four years. The key idea in our study is to identify executable files linked to exploits of known vulnerabilities. By searching for these files in a dataset with historical records of files downloaded on end-hosts worldwide, we systematically identify zero-day attacks and analyze their evolution over time.

We identified 18 vulnerabilities exploited in the wild before their disclosure, of which 11 were not previously known to have been employed in zero-day attacks. Zero-day attacks last on average 312 days, and up to 30 months, and typically affect few hosts. However, high-profile attacks like Conficker and Stuxnet, which we detected on hundreds of thousands and millions of hosts, respectively, are exceptions. After the disclosure of zero-day vulnerabilities, the volume of attacks exploiting them increases by up to five orders of magnitude. These findings have important implications for future security technologies and public policy.

### Acknowledgments

We thank Jonathan McCune and Michael Hicks for stimulating discussions on the topic of zero-day attacks. We also thank Marc Dacier for his early feedback on our results and the anonymous CCS reviewers for their constructive feedback. Finally, this research would not have been possible without the WINE platform, built and made available to the research community by Symantec. Our results can be reproduced using the reference dataset WINE 2012-003, archived in the WINE infrastructure.

### 8. References

[1] Adobe Systems Incorporated. Security bulletins and advisories. http://www.adobe.com/support/security/, 2012.
[2] R. Anderson and T. Moore. The economics of information security. In Science, vol. 314, no. 5799, 2006.
[3] W. A. Arbaugh, W. L. Fithen, and J. McHugh. Windows of vulnerability: A case study analysis. IEEE Computer, 33(12), December 2000.
[4] A. Arora, R. Krishnan, A. Nandkumar, R. Telang, and Y. Yang. Impact of vulnerability disclosure and patch availability - an empirical analysis. In Workshop on the Economics of Information Security (WEIS 2004), 2004.
[5] S. Beattie, S. Arnold, C. Cowan, P. Wagle, and C. Wright. Timing the application of security patches for optimal uptime. In Large Installation System Administration Conference, pages 233â€“242, Philadelphia, PA, Nov 2002.
[6] J. Bollinger. Economies of disclosure. In SIGCAS Comput. Soc., 2004.
[7] D. Brumley, P. Poosankam, D. X. Song, and J. Zheng. Automatic patch-based exploit generation is possible: Techniques and implications. In IEEE Symposium on Security and Privacy, pages 143â€“157, Oakland, CA, May 2008.
[8] H. C. H. Cavusoglu and S. Raghunathan. Emerging issues in responsible vulnerability disclosure. In Workshop on Information Technology and Systems, 2004.
[9] D. H. P. Chau, C. Nachenberg, J. Wilhelm, A. Wright, and C. Faloutsos. Polonium : Tera-scale graph mining for malware detection. In SIAM International Conference on Data Mining (SDM), Mesa, AZ, April 2011.
[10] CVE. A dictionary of publicly known information security vulnerabilities and exposures. http://cve.mitre.org/, 2012.
[11] N. Falliere, L. Oâ€™Murchu, and E. Chien. W32.stuxnet dossier. http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/w32_stuxnet_dossier.pdf, February 2011.
[12] S. Frei. Security Econometrics: The Dynamics of (In)Security. PhD thesis, ETH ZÃ¼rich, 2009.
[13] S. Frei. End-Point Security Failures, Insight gained from Secunia PSI scans. Predict Workshop, February 2011.
[14] Google Inc. Pwnium: rewards for exploits, February 2012. http://blog.chromium.org/2012/02/pwnium-rewards-for-exploits.html.
[15] A. Greenberg. Shopping for zero-days: A price list for hackersâ€™ secret software exploits. Forbes, 23 March 2012. http://www.forbes.com/sites/andygreenberg/2012/03/23/shopping-for-zero-days-an-price-list-for-hackers-secret-software-exploits/.
[16] A. Lelli. The Trojan.Hydraq incident: Analysis of the Aurora 0-day exploit. http://www.symantec.com/connect/blogs/trojanhydraq-incident-analysis-aurora-0-day-exploit, 25 January 2010.
[17] R. McMillan. RSA spearphish attack may have hit US defense organizations. PC World, 8 September 2011. http://www.pcworld.com/businesscenter/article/239728/rsa_spearphish_attack_may_have_hit_us_defense_organizations.html.
[18] M. A. McQueen, T. A. McQueen, W. F. Boyer, and M. R. Chaffin. Empirical estimates and observations of 0day vulnerabilities. In Hawaii International Conference on System Sciences, 2009.
[19] Microsoft. Microsoft security bulletins. http://technet.microsoft.com/en-us/security/bulletin, 2012.
[20] C. Miller. The legitimate vulnerability market: Inside the secretive world of 0-day exploit sales. In Workshop on the Economics of Information Security, Pittsburgh, PA, June 2007.
[21] OSVDB. The open source vulnerability database. http://www.osvdb.org/, 2012.
[22] A. Ozment and S. E. Schechter. Milk or wine: does software security improve with age? In 15th conference on USENIX Security Symposium, 2006.
[23] P. Porras, H. Saidi, and V. Yegneswaran. An analysis of Confickerâ€™s logic and rendezvous points. http://mtc.sri.com/Conficker/, 2009.
[24] Qualys, Inc. The laws of vulnerabilities 2.0. http://www.qualys.com/docs/Laws_2.0.pdf, July 2009.
[25] T. DumitraÈ™ and D. Shou. Toward a standard benchmark for computer security research: The Worldwide Intelligence Network Environment (WINE). In EuroSys BADGERS Workshop, Salzburg, Austria, Apr 2011.
[26] E. Rescorla. Is finding security holes a good idea? In IEEE Security and Privacy, 2005.
[27] U. Rivner. Anatomy of an attack, 1 April 2011. http://blogs.rsa.com/rivner/anatomy-of-an-attack/ Retrieved on 19 April 2012.
[28] SANS Institute. Top cyber security risks - zero-day vulnerability trends. http://www.sans.org/top-cyber-security-risks/zero-day.php, 2009.
[29] B. Schneier. Cryptogram September 2000 - full disclosure and the window of exposure. http://www.schneier.com/crypto-gram-0009.html, 2000.
[30] B. Schneier. Locks and full disclosure. In IEEE Security and Privacy, 2003.
[31] B. Schneier. The nonsecurity of secrecy. In Commun. ACM, 2004.
[32] M. Shahzad, M. Z. Shafiq, and A. X. Liu. A large scale exploratory analysis of software vulnerability life cycles. In Proceedings of the 2012 International Conference on Software Engineering, 2012.
[33] Symantec Corporation. Symantec global Internet security threat report, volume 13. http://eval.symantec.com/mktginfo/enterprise/white_papers/b-whitepaper_internet_security_threat_report_xiii_04-2008.en-us.pdf, April 2008.
[34] Symantec Corporation. Symantec global Internet security threat report, volume 14. http://eval.symantec.com/mktginfo/enterprise/white_papers/b-whitepaper_internet_security_threat_report_xv_04-2010.en-us.pdf, April 2009.
[35] Symantec Corporation. Symantec global Internet security threat report, volume 15. http://msisac.cisecurity.org/resources/reports/documents/SymantecInternetSecurityThreatReport2010.pdf, April 2010.
[36] Symantec Corporation. Symantec Internet security threat report, volume 16, April 2011.
[37] Symantec Corporation. Symantec Internet security threat report, volume 17. http://www.symantec.com/threatreport/, April 2012.
[38] Symantec Corporation. Symantec threat explorer. http://www.symantec.com/security_response/threatexplorer/azlisting.jsp, 2012.
[39] Symantec.cloud. February 2011 intelligence report. http://www.messagelabs.com/mlireport/MLI_2011_02_February_FINAL-en.PDF, 2011.
[40] N. Weaver and D. Ellis. Reflections on Witty: Analyzing the attacker. ;login: The USENIX Magazine, 29(3):34â€“37, June 2004.