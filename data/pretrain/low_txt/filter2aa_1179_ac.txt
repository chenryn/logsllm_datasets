### Effective Information Updates and Security Measures

To ensure the system operates effectively, clients should regularly download new information. However, it is advisable to wait for a specified time threshold (e.g., one hour) before utilizing any newly published nodes. Additionally, generating dummy traffic to older nodes can help mitigate trickle attacks.

Directory servers compile node availability and performance data by sending traffic through MIXes in their directories. This process can be similar to current ping servers [27], but future enhancements may include more sophisticated and attack-resistant reputation metrics. Even with these measures, vulnerabilities remain: an adversary performing traffic analysis could gain more traffic by achieving a high reputation [14]. To defend against such attacks, we can construct paths from a sufficiently large pool of nodes [16] to limit the probability that an adversary will control an entire path. Balancing the provision of accurate and timely information with the prevention of adversarial manipulation remains a challenge.

### Nym Management and Single-Use Reply Blocks

Current nymservers, such as nym.alias.net [28], maintain pairs of (mailbox, reply block) to enable users to receive mail without revealing their identities. When mail arrives, the nymserver attaches the payload to the associated reply block and sends it into the MIX-net. These nymservers use the Type I remailer network, which allows for persistent or long-lived nyms. The MIX network does not drop replayed messages, so the reply blocks can be reused. Reply block management is simpler in this model, as users only need to replace a reply block when one of the nodes it uses stops functioning.

In contrast, the Mixminion design protects against replay attacks by discarding messages with repeated headers, necessitating single-use reply blocks. Several approaches can be used to build nymservers with single-use reply blocks:

1. **Stock of Reply Blocks**: Nymservers keep a stock of reply blocks for each mailbox and use one for each incoming message. As long as the pseudonym owner keeps the nymserver well-stocked, no messages will be lost. However, it is difficult for the user to determine how many new reply blocks to send, and an attacker could perform a denial-of-service attack by flooding the mailbox to exhaust the available reply blocks.

2. **IMAP/POP-Inspired Protocol**: Messages arrive and queue at the nymserver, and the user periodically checks the status of their mail and sends a sufficient batch of reply blocks. In this case, the nymserver does not need to store any reply blocks. While the flooding attack still applies, it is similar to flooding a standard IMAP or POP mailbox, and typical defenses (such as allowing the user to delete mails at the server or specify which mails to download) are effective. The user can send a set of indices to the server after successfully receiving some messages, indicating which ones can now be deleted.

### Legal and Security Implications

The two designs have different legal and security implications:
- **First Design**: No mail is stored on the server, but valid reply blocks must be kept.
- **Second Design**: More secure because the server does not store reply blocks, but it creates more liability as the server retains mail until it is retrieved. The pseudonym owner could provide a public key for the nymserver to immediately encrypt incoming messages, limiting the time the nymserver holds plaintext messages.

The best implementation depends on the preferences and situations of the volunteers running the nymservers. Ideally, there will be enough volunteers to allow users to choose the model that makes them most comfortable.

### Maintaining Anonymity Sets

#### Transmitting Large Files with Mixminion

Using Mixminion as a transport layer for higher-level applications, such as anonymous publication systems [15], requires addressing several challenges, particularly for large file transfers. Alice, wanting to send a large file to Bob, must send multiple Mixminion messages. Conventional wisdom suggests using different paths for each message, but an adversary controlling any of the paths could learn her identity. Using the same path for all messages might better preserve unlinkability, but a passive adversary could still observe the flow of messages. Honest nodes must effectively hide message streams to counter these attacks. The multiple-message tagging attacks described in Section 3.5 further complicate the situation.

A compromise approach involves selecting a small number of paths and using them together. However, if messages are sent simultaneously, effective cover traffic schemes are essential for maintaining security. Similar issues arise when a pseudonym owner downloads mail from a nymserver.

#### Batching Strategy and Network Structure

A MIX-net design groups messages into batches and selects paths, affecting the level of anonymity provided [3]. Ideal anonymity would mean an attacker gains no information about the linkage between messages entering and leaving the network, except for the maximum time between them, equal to the maximum network latency.

Protocols like Mixmaster, which use random delays, do not achieve this ideal. If the maximum latency is \( t \), the anonymity set of a message leaving the network may be much smaller than all messages that entered over time \( t \). Mixmaster, being asynchronous and using free routes, is vulnerable to the attacks described in [7]. We propose a synchronous batching strategy, which seems to prevent these attacks and improves the trade-off between latency and anonymity.

The network has a fixed batch period, \( t_{\text{batch}} \), related to the maximum desired latency (typically 3–6 hours). Messages entering during each batch period are queued until the next period begins. They are then sent synchronously, at a rate of one hop per hop period. All paths are a fixed length \( \ell \) hops, ensuring that messages introduced in a given batch progress in lock-step and are transmitted to their final destinations \( \ell \) hop periods later. Each subheader specifies the hop period, preventing delays by an attacker.

The latency ranges from \( \ell \times t_{\text{hop}} \) to \( t_{\text{batch}} + \ell \times t_{\text{hop}} \), depending on when the message is submitted. Typically, \( t_{\text{hop}} \) is much smaller than \( t_{\text{batch}} \).

### References

1. Anonymous. From a trickle to a flood: Active attacks on several mix types. Submitted to Information Hiding Workshop 2002.
2. Adam Back, Ulf Møller, and Anton Stiglic. Traffic analysis attacks and trade-offs in anonymity providing systems. Proceedings of the Information Hiding Workshop 2001.
3. Oliver Berthold, Hannes Federrath, and Stefan Kopsell. Web MIXes: A system for anonymous and unobservable Internet access. In Designing Privacy Enhancing Technologies, LNCS Vol. 2009, pages 115–129. Springer-Verlag, 2000.
4. Oliver Berthold and Heinrich Langos. Dummy traffic against long-term intersection attacks. In Privacy Enhancing Technologies 2002. Springer-Verlag, 2002.
5. Oliver Berthold, Andreas Pfitzmann, and Ronny Standtke. The disadvantages of free MIX routes and how to overcome them. In Designing Privacy Enhancing Technologies, LNCS Vol. 2009, pages 30–45. Springer-Verlag, 2000.
6. Daniel Bleichenbacher and Anand Desai. A construction of a super-pseudorandom cipher. Manuscript.
7. David Chaum. Untraceable electronic mail, return addresses, and digital pseudonyms. Communications of the ACM, 4(2), February 1982.
8. Lance Cottrell. Mixmaster and remailer attacks.
9. M. Crispin. Internet Message Access Protocol — Version 4rev1. IETF RFC 2060, December 1996.
10. Yvo Desmedt and Kaoru Kurosawa. How to break a practical MIX and design a new one. In Advances in Cryptology - EUROCRYPT 2000, LNCS Vol. 1803. Springer-Verlag, 2000.
11. T. Dierks and C. Allen. The TLS Protocol — Version 1.0. IETF RFC 2246, January 1999.
12. Roger Dingledine, Michael J. Freedman, David Hopwood, and David Molnar. A Reputation System to Increase MIX-net Reliability. Proceedings of the Information Hiding Workshop 2001.
13. Roger Dingledine, Michael J. Freedman, and David Molnar. The free haven project: Distributed anonymous storage service. In Workshop on Design Issues in Anonymity and Unobservability, July 2000.
14. Roger Dingledine and Paul Syverson. Reliable MIX Cascade Networks through Reputation. Proceedings of Financial Cryptography 2002.
15. Electronic Frontiers Georgia (EFGA). Anonymous remailer information.
16. D. Goldschlag, M. Reed, and P. Syverson. Onion routing for anonymous and private internet connections. Communications of the ACM, 42(2):39–41, 1999.
17. C. Gulcu and G. Tsudik. Mixing E-mail with Babel. In Network and Distributed Security Symposium - NDSS ’96. IEEE, 1996.
18. J. Helsingius. anon.penet.fi press release.
19. Markus Jakobsson. Flash Mixing. In Principles of Distributed Computing - PODC ’99. ACM, 1999.
20. Anja Jerichow, Jan Müller, Andreas Pfitzmann, Birgit Pfitzmann, and Michael Waidner. Real-Time MIXes: A bandwidth-efficient anonymity protocol. IEEE Journal on Selected Areas in Communications 1998.
21. D. Kesdogan, M. Egner, and T. Büschkes. Stop-and-go MIXes providing probabilistic anonymity in an open system. In Information Hiding Workshop 1998, LNCS Vol. 1525. Springer Verlag, 1998.
22. Michael Luby and Charles Rackoff. How to construct pseudorandom permutations from pseudorandom functions. SIAM Journal on Computing, 17(2):373–386, 1988.
23. Tal Malkin. Private Information Retrieval. PhD thesis, MIT, 2000.
24. Tim May. Description of early remailer history. E-mail archived at.
25. Tim May. Description of Levien’s pinging service.
26. David Mazières and M. Frans Kaashoek. The design, implementation and operation of an email pseudonym server.
27. M. Mitomo and K. Kurosawa. Attack for Flash MIX. In Advances in Cryptology - ASIACRYPT 2000, LNCS Vol. 1976. Springer-Verlag, 2000.
28. Mixminion. Mixminion: a type III anonymous remailer.
29. Mixminion. Type III (Mixminion) MIX protocol specifications.
30. Ulf Møller and Lance Cottrell. Mixmaster Protocol — Version 2. Unfinished draft, January 2000.
31. J. Myers and M. Rose. Post Office Protocol — Version 3. IETF RFC 1939 (also STD0053), May 1996.
32. C. Andrew Neff. A verifiable secret shuffle and its application to e-voting. In P. Samarati, editor, 8th ACM Conference on Computer and Communications Security (CCS-8), pages 116–125. ACM Press, November 2001.
33. M. Ohkubo and M. Abe. A Length-Invariant Hybrid MIX. In Advances in Cryptology - ASIACRYPT 2000, LNCS Vol. 1976. Springer-Verlag, 2000.
34. J. Postel. Simple Mail Transfer Protocol. IETF RFC 2821 (also STD0010), August 1982.
35. Charles Rackoff and Daniel R. Simon. Cryptographic defense against traffic analysis. In ACM Symposium on Theory of Computing, pages 672–681, 1993.
36. J. Raymond. Traffic analysis: Protocols, attacks, design issues, and open problems. In Workshop on Design Issues in Anonymity and Unobservability, pages 10–29, July 2000.
37. RProcess. Potato Software.
38. Zero Knowledge Systems. Freedom version 2 white papers.
39. Paul Syverson, Michael Reed, and David Goldschlag. Onion Routing access configurations. In DARPA Information Survivability Conference and Exposition (DISCEX 2000), volume 1, pages 34–40. IEEE CS Press, 2000.