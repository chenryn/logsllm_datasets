### Performance Analysis

The performance of the tools is similar when given 1 second per expression. Syntia, CVC4, and STOKE-synth fail to find any solutions with 1 hour per expression, even for BP1. In fact, Syntia, even with 12 hours per expression, only succeeds in 1 out of 15 cases for BP1.

### Conclusion

Semantically complex handlers are effective against black-box deobfuscation. While high-complexity handlers have a cost similar to strong Mixed Boolean-Arithmetic (MBA) encodings, medium-complexity handlers offer robust protection at a more reasonable cost.

### Discussion

Our protection can be bypassed if an attacker focuses on the correct combinations of handlers rather than on the individual handlers themselves. To mitigate this, complex handlers can be duplicated, as in VMProtect (see Section 7.2), to make pattern recognition more challenging.

### Merged Handlers

We now examine another protection method based on conditional expressions and the merging of existing handlers. Although block merging has long been known to thwart human reversers, we demonstrate that it is highly effective against black-box attacks. For simplicity, our merged handlers are written using explicit if-then-else (ITE) operators, but these conditions do not necessarily involve conditional branching (see Figure 8). Therefore, we assume that the attacker perceives merged handlers as a single code fragment.

```c
// if (c == cst) then h1(a, b, c) else h2(a, b, c);
int32_t res = c - cst;
res = ( -(( res ^ ( res >> 31) ) - ( res >> 31) ) >> 31) & 1;
return h1(a, b, c) * (1 - res) + res * h2(a, b, c);
```

**Figure 8: Example of a branch-less condition**

### Datasets

We introduce five datasets, each containing 20 expressions. Dataset 1 includes expressions with one ITE exposing two basic handlers (e.g., +, -, ×, ∧, ∨, ⊕). Dataset 2 contains expressions with two nested ITEs exposing three basic handlers, and so on. Conditions are equality checks against consecutive constant values (0, 1, 2, etc.). For example, dataset 2 includes the following expression:

\[ \text{ITE}(z = 0, x + y, \text{ITE}(z = 1, x - y, x \times y)) \]

**Datasets available at: [GitHub](https://github.com/binsec/xyntia)**

### Scenarios

Adding conditionals introduces additional challenges:
1. The grammar must be expressive enough to handle conditions.
2. The sampling phase must be efficient enough to cover all possible behaviors.

Thus, we consider the following scenarios:

- **Utopian**: The synthesizer learns expressions over the MBA set of operators, extended with an \(\text{ITE}(\star = 0, \star, \star)\) operator. Sampling is done so that all branches are traversed equally. This scenario, which favors the attacker, shows that merged handlers are always effective.
- **MBA + ITE**: A more realistic scenario where the attacker does not know how to sample initially, but the grammar fits the expressions perfectly.
- **MBA + Shifts**: Xyntia does not sample inputs uniformly, does not consider ITE operators, but allows shifts to represent branch-less conditions.
- **Default**: The default version of the synthesizer.

In all scenarios, appropriate constant values are added to the grammar. For example, to synthesize the equation above, 0 and 1 are added.

### Evaluation

Figure 9 presents Xyntia's results on the five datasets. As expected, the Utopian scenario is where Xyntia performs best, though it cannot handle more than three nested ITEs. In more realistic scenarios, Xyntia struggles even more. Results for Syntia, CVC4, and STOKE-synth confirm this, with no solutions found for two or more nested ITEs. Note that the overhead here is minimal and depends only on the number of merged handlers.

**Figure 9: Merged handlers: Xyntia (timeout=60s)**

### Conclusion

Merged handlers are extremely powerful against black-box synthesis. Even in the ideal sampling scenario, black-box methods cannot retrieve the semantics of expressions with more than three nested conditionals, while the runtime overhead remains minimal.

### Discussion

Symbolic methods, such as symbolic execution, are unaffected by these protections because they track the succession of handlers and know which sub-parts of merged handlers are executed. To counter this, our anti-black-box protections can be combined with lightweight anti-symbolic protections (e.g., [25, 35]).

### Related Work

**Black-box Deobfuscation**: Blazytko et al.'s work [7] has been extensively discussed. We extend their experimental evaluation, generalize, and improve their approach: Xyntia with 1 second per expression finds twice as many expressions as Syntia with 600 seconds per expression, some of which Syntia cannot find within 12 hours.

**White- and Greybox Deobfuscation**: Recent works leverage whitebox symbolic methods for deobfuscation ("symbolic deobfuscation") [5, 10, 22, 28, 30, 36]. However, they are sensitive to code complexity, and efficient countermeasures are now available [12, 25, 26, 37], while Xyntia is immune to them (Section 7.1). David et al. [16] recently proposed QSynth, a greybox deobfuscation method combining I/O relationship caching (blackbox) and incremental reasoning along the target expression (whitebox). Yet, QSynth is sensitive to massive syntactic obfuscation where Xyntia is not (cf. Section 6). Furthermore, QSynth works on a simple grammar, and it is unclear whether its caching technique would scale to larger grammars like those of Xyntia and Syntia.

**Program Synthesis**: Program synthesis aims to find a function from a specification, which can be formal, in natural language, or as I/O relations. There are three main families of program synthesis methods [20]:
- **Enumerative search**: Enumerates all programs starting from the simplest, pruning incoherent snippets, and returning the first code meeting the specification.
- **Constraint solving**: Encodes the skeleton of the target program as a first-order satisfiability problem and uses an SMT solver to infer an implementation meeting the specification.
- **Stochastic methods**: Traverse the search space randomly, hoping to find a program consistent with the specification.

Contrary to these, we aim to solve the deobfuscation problem in a fully black-box way, not relying on the obfuscated code or an estimation of the result size.

### Conclusion

Black-box deobfuscation is a promising research area. This article deepens the state of search-based black-box deobfuscation in three directions:
1. We define a novel generic framework for search-based black-box deobfuscation, encompassing prior works such as Syntia, and advocate the use of S-metaheuristics.
2. We design Xyntia, a new search-based black-box deobfuscator, which significantly outperforms Syntia in terms of success rate while maintaining its good properties.
3. We propose the first two protections tailored against search-based black-box deobfuscation, completely preventing Xyntia and Syntia attacks at a reasonable cost.

We hope these results will help better understand search-based deobfuscation and lead to further progress in the field.

### Acknowledgements

This research was supported by the Agence National de la Recherche under grant ANR-20-CE25-0009-TAVA.

### References

[1] Rajeev Alur, Rastislav Bodík, Garvit Juniwal, Milo M. K. Martin, Mukund Raghothaman, Sanjit A. Seshia, Rishabh Singh, Armando Solar-Lezama, Emina Torlak, and Abhishek Udupa. 2013. Syntax-guided synthesis. In Formal Methods in Computer-Aided Design, FMCAD 2013, Portland, OR, USA, October 20-23, 2013. IEEE.

[2] Rajeev Alur, Dana Fisman, Saswat Padhi, Rishabh Singh, and Abhishek Udupa. 2019. SyGuS-Comp 2018: Results and Analysis. (2019). http://arxiv.org/abs/1904.07146

[3] Sebastian Banescu, Christian S. Collberg, Vijay Ganesh, Zack Newsham, and Alexander Pretschner. 2016. Code obfuscation against symbolic execution attacks. In Annual Conference on Computer Security Applications, ACSAC 2016.

[4] Boaz Barak, Oded Goldreich, Russell Impagliazzo, Steven Rudich, Amit Sahai, Salil Vadhan, and Ke Yang. 2012. On the (im) possibility of obfuscating programs. Journal of the ACM (JACM) (2012).

[5] Sébastien Bardin, Robin David, and Jean-Yves Marion. 2017. Backward-Bounded DSE: Targeting Infeasibility Questions on Obfuscated Codes. In 2017 IEEE Symposium on Security and Privacy, SP 2017, San Jose, CA, USA, May 22-26, 2017.

[6] Clark Barrett, Christopher L. Conway, Morgan Deters, Liana Hadarean, Dejan Jovanović, Tim King, Andrew Reynolds, and Cesare Tinelli. 2011. CVC4. In Proceedings of the 23rd International Conference on Computer Aided Verification (CAV ’11), Ganesh Gopalakrishnan and Shaz Qadeer (Eds.). Springer. http://www.cs.stanford.edu/~barrett/pubs/BCD+11.pdf

[7] Tim Blazytko, Moritz Contag, Cornelius Aschermann, and Thorsten Holz. 2017. Syntia: Synthesizing the Semantics of Obfuscated Code. In Usenix Security.

[8] Tim Blazytko, Moritz Contag, Cornelius Aschermann, and Thorsten Holz. 2018. Syntia: Breaking State-of-the-Art Binary Code Obfuscation via Program Synthesis. Black Hat Asia (2018).

[9] Cameron B Browne, Edward Powley, Daniel Whitehouse, Simon M Lucas, Peter I Cowling, Philipp Rohlfshagen, Stephen Tavener, Diego Perez, Spyridon Samothrakis, and Simon Colton. 2012. A survey of Monte Carlo tree search methods. IEEE Transactions on Computational Intelligence and AI in games (2012).

[10] David Brumley, Cody Hartwig, Zhenkai Liang, James Newsome, Dawn Xiaodong Song, and Heng Yin. 2008. Automatically Identifying Trigger-based Behavior in Malware. In Botnet Detection: Countering the Largest Security Threat. Springer.

[11] C. Collberg, S. Martin, J. Myers, and B. Zimmerman. [n. d.]. The Tigress C Diversifier/Obfuscator. http://tigress.cs.arizona.edu/

[12] Christian Collberg and Jasvir Nagra. 2009. Surreptitious Software: Obfuscation, Watermarking, and Tamperproofing for Software Protection.

[13] Christian Collberg, Clark Thomborson, and Douglas Low. 1997. A taxonomy of obfuscating transformations.

[14] Christian Collberg, Clark Thomborson, and Douglas Low. 1998. Manufacturing cheap, resilient, and stealthy opaque constructs. In Proceedings of the 25th ACM SIGPLAN-SIGACT symposium on Principles of programming languages.

[15] Robin David, Sébastien Bardin, Thanh Dinh Ta, Laurent Mounier, Josselin Feist, Marie-Laure Potet, and Jean-Yves Marion. 2016. BINSEC/SE: A dynamic symbolic execution toolkit for binary-level analysis. In 2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER). IEEE.

[16] Robin David, Luigi Coniglio, and Mariano Ceccato. 2020. QSynth—A Program Synthesis Based Approach for Binary Code Deobfuscation. In BAR 2020 Workshop.

[17] Leonardo De Moura and Nikolaj Bjørner. 2008. Z3: An efficient SMT solver. In International conference on Tools and Algorithms for the Construction and Analysis of Systems. Springer.

[18] Ninon Eyrolles, Louis Goubin, and Marion Videau. 2016. Defeating MBA-based Obfuscation. In Proceedings of the 2016 ACM Workshop on Software PROtection, SPRO@CCS 2016, Vienna, Austria, October 24-28, 2016.

[19] Nicolas Falliere, Patrick Fitzgerald, and Eric Chien. 2009. Inside the jaws of trojan. clampi. Technical report, Symantec Corporation (2009).

[20] Sumit Gulwani, Oleksandr Polozov, Rishabh Singh, et al. 2017. Program synthesis. Foundations and Trends® in Programming Languages (2017).

[21] Susmit Jha, Sumit Gulwani, Sanjit A Seshia, and Ashish Tiwari. 2010. Oracle-guided component-based program synthesis. In 2010 ACM/IEEE 32nd International Conference on Software Engineering. IEEE.

[22] Johannes Kinder. 2012. Towards Static Analysis of Virtualization-Obfuscated Binaries. In 19th Working Conference on Reverse Engineering, WCRE.

[23] Xavier Leroy, Damien Doligez, Alain Frisch, Jacques Garrigue, Didier Rémy, and Jérôme Vouillon. 2020. The OCaml system release 4.10. https://caml.inria.fr/pub/docs/manual-ocaml/

[24] Helena Ramalhinho Lourenço, Olivier C Martin, and Thomas Stützle. 2019. Iterated local search: Framework and applications. In Handbook of metaheuristics. Springer.

[25] Mathilde Ollivier, Sébastien Bardin, Richard Bonichon, and Jean-Yves Marion. 2019. How to kill symbolic deobfuscation for free (or: unleashing the potential of path-oriented protections). In Proceedings of the 35th Annual Computer Security Applications Conference.

[26] Mathilde Ollivier, Sébastien Bardin, Richard Bonichon, and Jean-Yves Marion. 2019. Obfuscation: where are we in anti-DSE protections? (a first attempt). In Proceedings of the 9th Workshop on Software Security, Protection, and Reverse Engineering.

[27] Oreans Technologies. 2020. Themida – Advanced Windows Software Protection System. http://oreans.com/themida.php.

[28] Jonathan Salwan, Sébastien Bardin, and Marie-Laure Potet. 2018. Symbolic deobfuscation: from virtualized code back to the original. In 5th Conference on Detection of Intrusions and malware & Vulnerability Assessment (DIMVA).

[29] Eric Schkufza, Rahul Sharma, and Alex Aiken. 2013. Stochastic superoptimization. ACM SIGARCH Computer Architecture News (2013).

[30] Sebastian Schrittwieser, Stefan Katzenbeisser, Johannes Kinder, Georg Merzdovnik, and Edgar Weippl. 2016. Protecting Software Through Obfuscation: Can It Keep Pace with Progress in Code Analysis? ACM Comput. Surv. (2016).

[31] Jon Stephens, Babak Yadegari, Christian S. Collberg, Saumya Debray, and Carlos Scheidegger. 2018. Probabilistic Obfuscation Through Covert Channels. In 2018 IEEE European Symposium on Security and Privacy, EuroS&P 2018.

[32] El-Ghazali Talbi. 2009. Metaheuristics: From Design to Implementation. Wiley Publishing.

[33] Tora. [n. d.]. Devirtualizing FinSpy. http://linuxch.org/poc2012/Tora,DevirtualizingFinSpy.pdf

[34] VM Protect Software. 2020. VMProtect Software Protection. http://vmpsoft.com.

[35] Babak Yadegari and Saumya Debray. 2015. Symbolic Execution of Obfuscated Code. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. Association for Computing Machinery.

[36] Babak Yadegari, Brian Johannesmeyer, Ben Whitely, and Saumya Debray. 2015. A Generic Approach to Automatic Deobfuscation of Executable Code. In Symposium on Security and Privacy, SP.

[37] Yongxin Zhou, Alec Main, Yuan X. Gu, and Harold Johnson. 2007. Information Hiding in Software with Mixed Boolean-arithmetic Transforms. In Proceedings of the 8th International Conference on Information Security Applications (WISA’07). Springer-Verlag.