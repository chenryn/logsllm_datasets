# Dreambot与ISFB的前世今生
##### 译文声明
本文是翻译文章，原作者为Jerome Cruz，原文发布于www.fortinet.com。译文仅供参考，具体内容及含义以原文为准。

## 一、引言
近期，我们收到了一份已编译并打包好的恶意软件样本。经分析发现，该样本中包含了一个Dreambot/Ursnif版本的木马，其汇编日期为2017年10月10日，这表明现有的Dreambot版本可能采用了全新的dropper打包方式。  
从过去几年泄露的一些Gozi、ISFB和Mirai等僵尸网络的源代码来看，这个新版本可能是其中某一个的变种。  
Dreambot源自ISFB（首次观察到的时间为2006年），而后者又使用了2000年的Ursnif代码。这些木马家族之间共享着二十年前创建的一些代码。大部分代码被重用，仅有少量改动。  
泄露的ISFB 2013木马中包含了大量关于如何构建和配置僵尸网络的文档以及大多数组件的源码。接下来我们将对其进行详细分析。

## 二、ISFB Bot 2013概述
在泄露的样本中，有一个名为readme.txt的文件（俄语编写），详细描述了ISFB的功能。根据该文档，ISFB是一个旨在嗅探和操纵受害者计算机上HTTP流量的僵尸程序。它主要执行以下三个任务：接收配置、请求命令，并将数据和文件发送回CnC服务器。  
具体来说，ISFB可以接受如下配置指令：
- **NEWGRAB** – 将网页上的指定文字替换为另一段文字。
- **SCREENSHOT** – 截取指定页面的屏幕截图。
- **PROCESS** – 当受害者请求某个配置页面时，重定向至另一个页面。例如，访问特定Twitter用户页面的请求会被重定向到不同的Twitter用户页面。
- **FILE** – 操作文件系统。
- **HIDDEN** – 执行隐藏操作。
- **POST** – 发送POST请求。
- **VIDEO** – 录制视频。
上述所有配置项的具体细节可以在泄露源代码中的Format.txt文件中找到。

此外，ISFB还支持一些额外的命令，如：
- **GET_CERTS** – 导出并发送存储在Windows系统中的证书。
- **GET_COOKIES** – 从Firefox、Internet Explorer和Flash SOL文件收集Cookie，将其与其目录结构一起打包并发送到服务器。
- **CLR_COOKIES** – 从Firefox、Internet Explorer和Flash SOL文件中删除Cookie。
更多命令列表详见readme.txt文件。

### Dreambot 2017概述
除了ISFB的主要功能外，Dreambot还通过TOR网络连接到CnC服务器，并对用于请求配置的URL进行了修改。后续我们会对此进行深入分析。

## 三、ISFB 2013架构
ISFB bot代码库由两大部分组成：Dropper和针对32位及64位机器的bot客户端DLL。
- **Dropper** 是泄漏源码中的Crm.exe文件，它包含打包后的DLL映像。它将这些DLL复制到系统文件夹，并通过AppCertDLLs注册表项或自动运行注册表项来注册它们，然后注入到explorer.exe进程和所有正在运行的Web浏览器中。
- **Bot客户端DLL** 被Dropper注入到explorer.exe和任何正在运行的浏览器中，例如Chrome、IE和Firefox。根据readme.txt中的说明，bot DLL的职责分为“解析器”和“服务器”两部分。
  - **解析器** 在受感染的浏览器中运行，拦截HTTP请求并向服务器发送命令、配置文件和数据。
  - **服务器** 在explorer.exe中执行文件操作、启动程序和更新操作。

### 编译和打包
为了编译ISFB bot DLL并将它们打包到dropper中，恶意软件作者使用了一个名为FJ.exe的程序。该程序首先通过将client32.dll和client64.dll文件与apLib（可选）包装在一起，然后附加到文件中。最终输出到installer.exe。
ISFB使用了“连接文件”（或“FJ”），这些_FJ_ADDON_DESCRIPTOR被插入在PE头后面，在所有剩余的PE段头之后，留下0x28字节的空隙。泄露的Gozi-ISFB源代码展示了_ADDON_DESCRIPTOR结构和ADDON_MAGIC定义：

```c
#define ADDON_MAGIC 'FJ'
typedef struct _ADDON_DESCRIPTOR {
    USHORT Magic; // addon_MAGIC值
    USHORT NumberHashes; // 名称散列数组
    ULONG ImageRva; // 填充图像的RVA
    ULONG ImageSize; // 图像大小
    ULONG ImageId; // 图像名称的CRC32
    ULONG Flags; // 添加标志
    ULONG Hash[0];
} ADDON_DESCRIPTOR, *PADDON_DESCRIPTOR;
```

要检索指向加入数据的指针，只需将ImageRVA添加到恶意软件的图像基址即可。这样，数据就会被追加到文件的末尾。

### Dreambot 2017架构
Dreambot的体系结构大致符合ISFB的原型。但在注入代码后，explorer.exe会向CnC发出请求。另一个变化是，新的dropper将自己的副本放入%AppData%下的随机命名文件夹中。bot DLL不会被丢弃，而是直接注入内存。

### 编译并打包Dreambot 2017
Dreambot使用了一个新的“连接”程序，使用‘J1’而不是‘FJ’，并采用以下结构：

```c
typedef struct {
    DWORD j1_magic;
    DWORD flags; // 填充aplib
    DWORD crc32_name;
    DWORD addr;
    DWORD size;
} isfb_fj_elem;
```

该结构与_FJ_ADDON_DESCRIPTOR非常相似，但字段顺序有所调整。尽管采用了新的结构，其功能仍然是获取FJ插件数据。Maciej Kotowicz在其论文《ISFB，Still Live and Kicking》中详细介绍了这种新结构及其从2016年样本中解析出来的静态配置INI。感兴趣的读者可以参考该论文附录中的反编译伪代码。

## 四、ISFB URL请求字符串
ISFB请求参数的原型可以在泄漏源代码中的cschar.h文件中找到。例如：

```c
#define szRequestFmt_src \
_T("soft=1&version=%u&user=%08x%08x%08x%08x&server=%u&id=%u&crc=%x")
```

### Dreambot 2017 URL请求
（此处应补充具体的URL请求格式）

## 展望2018及未来
我相信这个僵尸网络工具包平台将继续发展，其代码库将纳入更多成员。无论其如何变化，我们都将制定更好的对策，提高跟踪和防御此僵尸网络的能力。

感谢Margarette Joven对这个样本以及关于dropper和packers的研究。

## IOC
87dec0ca98327e49b326c2d44bc35e5b5ecc5a733cdbb16aeca7cba9471a098e