### 2.1 Aho-Corasick Example

Consider the Deterministic Finite Automaton (DFA) shown in Figure 1. The algorithm starts in state 0. Each time a new byte is read, a state transition occurs. If the current state is 0 and the next byte is 'Q', the algorithm transitions to state 36 and continues processing the next byte. Depending on the next byte, the following transitions occur:
- If the byte is 'Q', 'h', or 't', the new state will be 36, 37, or 43, respectively.
- If the byte is none of the above, the algorithm returns to state 0.

This process continues until the entire input is processed. For each byte in the packet, a single state transition is made, even if the new state is the same as the old state. Some states are designated as output states, indicating that a specific pattern has been matched. For example, reaching state 35 signifies that the input data contains the string 'hws2'.

The DFA in Figure 1 can simultaneously match five different patterns, which are listed below the figure. These patterns are chosen for illustrative purposes, but the first four also represent the signatures of the Slammer worm [1]. This worm was able to rapidly infect susceptible hosts by exploiting a buffer overflow in Microsoft SQL Server, allowing it to execute code on remote hosts. The fifth pattern was added to demonstrate the handling of overlapping patterns and has no additional significance.

For an input stream consisting of the characters "XYZQQhsockfA", the state transitions would be: 0, 0, 0, 36, 36, 37, 38, 39, 40, 41, 42, and 0. The underlined states (output states) indicate that the patterns "Qhsoc" and "Qhsockf" have been matched. By making a single transition per byte, all patterns contained in the packet are identified.

### DFA State Transitions

Below are the state transitions for the DFA:

- **State 0, 32, 35, 42, 50:**
  - 'Q' : 36
  - 'h' : 1
  - 't' : 43

- **State 1:**
  - '.' : 2
  - 'Q' : 36
  - 'h' : 1
  - 't' : 43
  - 'w' : 33

- **State 2:**
  - 'Q' : 36
  - 'd' : 3
  - 'h' : 1
  - 't' : 43

- **State 3:**
  - 'Q' : 36
  - 'h' : 1
  - 'l' : 4
  - 't' : 43

- **State 4:**
  - 'Q' : 36
  - 'h' : 1
  - 'l' : 5
  - 't' : 43

- **State 5:**
  - 'Q' : 36
  - 'h' : 6
  - 't' : 43

- **State 6:**
  - '.' : 2
  - 'Q' : 36
  - 'e' : 7
  - 'h' : 1
  - 't' : 43
  - 'w' : 33

- **State 7:**
  - 'Q' : 36
  - 'h' : 1
  - 'l' : 8
  - 't' : 43

- **State 8:**
  - '3' : 9
  - 'Q' : 36
  - 'h' : 1
  - 't' : 43

- **State 9:**
  - '2' : 10
  - 'Q' : 36
  - 'h' : 1
  - 't' : 43

- **State 10:**
  - 'Q' : 36
  - 'h' : 11
  - 't' : 43

- **State 11:**
  - '.' : 2
  - 'Q' : 36
  - 'h' : 1
  - 'k' : 12
  - 't' : 43
  - 'w' : 33

- **State 12:**
  - 'Q' : 36
  - 'e' : 13
  - 'h' : 1
  - 't' : 43

- **State 13:**
  - 'Q' : 36
  - 'h' : 1
  - 'r' : 14
  - 't' : 43

- **State 14:**
  - 'Q' : 36
  - 'h' : 1
  - 'n' : 15
  - 't' : 43

- **State 15:**
  - 'Q' : 16
  - 'h' : 1
  - 't' : 43

- **State 16:**
  - 'Q' : 36
  - 'h' : 17
  - 't' : 43

- **State 17:**
  - '.' : 2
  - 'Q' : 36
  - 'h' : 1
  - 'o' : 18
  - 's' : 38
  - 't' : 43
  - 'w' : 33

- **State 18:**
  - 'Q' : 36
  - 'h' : 1
  - 't' : 43
  - 'u' : 19

- **State 19:**
  - 'Q' : 36
  - 'h' : 1
  - 'n' : 20
  - 't' : 43

- **State 20:**
  - 'Q' : 36
  - 'h' : 1
  - 't' : 21

- **State 21:**
  - 'Q' : 36
  - 'h' : 22
  - 'o' : 44
  - 't' : 43

- **State 22:**
  - '.' : 2
  - 'Q' : 36
  - 'h' : 1
  - 'i' : 23
  - 't' : 43
  - 'w' : 33

- **State 23:**
  - 'Q' : 36
  - 'c' : 24
  - 'h' : 1
  - 't' : 43

- **State 24:**
  - 'Q' : 36
  - 'h' : 1
  - 'k' : 25
  - 't' : 43

- **State 25:**
  - 'C' : 26
  - 'Q' : 36
  - 'h' : 1
  - 't' : 43

- **State 26:**
  - 'Q' : 36
  - 'h' : 27
  - 't' : 43

- **State 27:**
  - '.' : 2
  - 'G' : 28
  - 'Q' : 36
  - 'h' : 1
  - 't' : 43
  - 'w' : 33

- **State 28:**
  - 'Q' : 36
  - 'e' : 29
  - 'h' : 1
  - 't' : 43

- **State 29:**
  - 'Q' : 36
  - 'h' : 1
  - 't' : 30

- **State 30:**
  - 'Q' : 36
  - 'T' : 31
  - 'h' : 1
  - 'o' : 44
  - 't' : 43

- **State 31:**
  - 'Q' : 36
  - 'f' : 32
  - 'h' : 1
  - 't' : 43

- **State 33:**
  - 'Q' : 36
  - 'h' : 1
  - 's' : 34
  - 't' : 43

- **State 34:**
  - '2' : 35
  - 'Q' : 36
  - 'h' : 1
  - 't' : 43

- **State 36:**
  - 'Q' : 36
  - 'h' : 37
  - 't' : 43

- **State 37:**
  - '.' : 2
  - 'Q' : 36
  - 'h' : 1
  - 's' : 38
  - 't' : 43
  - 'w' : 33

- **State 38:**
  - 'Q' : 36
  - 'h' : 1
  - 'o' : 39
  - 't' : 43

- **State 39:**
  - 'Q' : 36
  - 'c' : 40
  - 'h' : 1
  - 't' : 43

- **State 40:**
  - 'Q' : 36
  - 'h' : 1
  - 'k' : 41
  - 't' : 43

- **State 41:**
  - 'Q' : 36
  - 'f' : 42
  - 'h' : 1
  - 't' : 43

- **State 43:**
  - 'Q' : 36
  - 'h' : 1
  - 'o' : 44
  - 't' : 43

- **State 44:**

This detailed state transition table ensures that the DFA can efficiently match multiple patterns in a single pass through the input data.