### Recent Research on Exploit-Based Signatures and Vulnerability-Specific Protection Techniques

Recent work [39] questions the long-term effectiveness of exploit-based signatures. Meanwhile, research on vulnerability-specific protection techniques [11, 7, 18] explores methods to counteract exploits. Countering attacks and malicious code is a challenging problem. Spinellis [37] demonstrated that identifying bounded-length metamorphic viruses is NP-complete by reducing the problem to one of graph isomorphism. Additionally, Fogla et al. [17] showed that detecting polymorphic blending attacks is also an NP-complete problem.

### Traffic Content Analysis

Snort [36] is a widely deployed open-source signature-based detector. A significant amount of research [22, 35, 28, 24, 44, 43, 25, 2] has focused on automatically generating exploit signatures. Most of these systems either analyze the content or characteristics of network traffic or instrument the host to identify malicious input. Host-based approaches filter traffic through an instrumented version of the application to detect malicious code. Once confirmed, the malicious code is dissected to dynamically generate a signature to prevent similar future attacks.

Abstract Payload Execution (APE) [38] treats packet content as machine instructions, similar to SigFree [42]. Instruction decoding of packets can identify the sled, or sequence of instructions in an exploit designed to guide the program counter to the exploit code. Krugel et al. [23] detect polymorphic worms by learning a control flow graph for the worm binary. Convergent static analysis [8] aims to reveal the control flow of a random sequence of bytes.

Statistical content anomaly detection is another research area. PayL [40] models the 1-gram distributions of normal traffic using the Mahalanobis distance to gauge the normality of incoming packets. Anagram [21] caches known benign n-grams extracted from normal content in a fast hash map and compares ratios of seen and unseen grams to determine normality.

### Countering Polymorphism

Despite differences between instances of their encoded forms, the underlying idea is to capture the characteristics of the vulnerability, such as a conjunction of equivalence relations on the set of jump addresses leading to the vulnerability. Cui et al. [12] combine data-flow analysis and protocol or data format parsing to construct network or file system level "data patches" to filter input instances related to a particular vulnerability.

Brumley et al. [7] provide an initial exploration of the theoretical foundations of vulnerability-based signatures. These signatures help classify an entire set of exploit inputs rather than a specific instance. Crandall et al. [11] discuss the difficulty of generating high-quality vulnerability signatures through an empirical study of polymorphic and metamorphic malware. They present a vulnerability model that explicitly considers that malware can be arbitrarily mutated, outlining the challenge of identifying enough features of an exploit to generalize about a specific vulnerability. For example, critical features of an exploit may only exist in a few or relatively small number of input tokens. If the attacked application uses a binary protocol, telltale byte values indicating an attack may be common or otherwise unextraordinary. The Slammer exploit, for instance, essentially contains a single "flag" value of 0x4. For other protocols, detecting that the exploit contained the string "HTTP" or some URL typically does not provide enough evidence to block arbitrary requests. If it does, our analysis indicates that such exploits can be arbitrarily mutated, thus vastly increasing the signature database and the processing time for benign traffic.

One way to counter the presence of the engine proposed in Section 3 is to use an anomaly detection (AD) sensor to shunt suspect traffic (i.e., traffic that does not match normal or whitelisted content) to a heavily instrumented replica to confirm the sensor’s initial classification. Anagnostakis et al. [2] propose such an architecture, called a "shadow honeypot." A shadow honeypot is an instrumented replica host that shares state with a production application and receives copies of messages sent to a production application, which a network anomaly detection component deems abnormal. If the shadow confirms the attack, it creates a network filter for that attack and provides positive confirmation to the anomaly detector. If the detector misclassifies the traffic, the only impact will be slower processing of the request (since the shadow shares full state with the production application). The intuition behind this approach is that the normal content model for a site or organization is regular and well-defined relative to the almost random distribution representative of possible polymorphic exploit instances. If content deemed normal is put on the fast path for service and content deemed abnormal is shunted to a heavily protected copy for vetting, then we can reliably detect exploit variants without heavily impacting the service of most normal requests.

Since network traffic may look similar across sites, pre-trained blending attacks, such as those explored in Section 3, pose a real threat. Future statistical IDS techniques should take measures to hide the profiles of normal content from the attacker. If we can force the attacker to guess where to aim his attack, we might turn the complexity of n-space to our favor.

### Conclusions

Our empirical results demonstrate the difficulty of modeling polymorphic behavior. We briefly summarized the achievements of the shellcoder community in making their code polymorphic and examined ways to improve these techniques. We presented analytical methods to assess the capabilities of polymorphic engines and applied them to some state-of-the-art engines. We explained why signature-based modeling works in some cases and confirmed that the viability of such approaches matches the intuitive belief that polymorphism will eventually defeat these methodologies. The strategy of modeling malicious behavior leads to an unending arms race with an attacker. Alternatively, whitelisting normal content or behavior patterns (perhaps in randomized ways to defend against blending attacks) might ultimately be safer than blacklisting arbitrary and highly varied malicious behavior or content.

### References

[1] ALEPH0NE. Smashing the Stack for Fun and Profit. Phrack 7, 49-14 (1996).

[2] ANAGNOSTAKIS, K. G., SIDIROGLOU, S., AKRITIDIS, P., XINIDIS, K., MARKATOS, E., AND KEROMYTIS, A. D. Detecting Targeted Attacks Using Shadow Honeypots. In Proceedings of the 14th USENIX Security Symposium (August 2005).

[3] BARATLOO, A., SINGH, N., AND TSAI, T. Transparent Run-Time Defense Against Stack Smashing Attacks. In Proceedings of the USENIX Annual Technical Conference (June 2000).

[4] BARRANTES, E. G., ACKLEY, D. H., FORREST, S., PALMER, T. S., STEFANOVIC, D., AND ZOVI, D. D. Randomized Instruction Set Emulation to Disrupt Binary Code Injection Attacks. In Proceedings of the 10th ACM Conference on Computer and Communications Security (CCS) (October 2003).

[5] BHATKAR, S., DUVARNEY, D. C., AND SEKAR, R. Address Obfuscation: an Efficient Approach to Combat a Broad Range of Memory Error Exploits. In Proceedings of the 12th USENIX Security Symposium (August 2003), pp. 105-120.

[6] BIONDI, P. Shellforge Project, 2006. http://www.secdev.org/projects/shellforge/.

[7] BRUMLEY, D., NEWSOME, J., SONG, D., WANG, H., AND JHA, S. Towards Automatic Generation of Vulnerability-Based Signatures. In Proceedings of the IEEE Symposium on Security and Privacy (2006).

[8] CHINCHANI, R., AND BERG, E. V. D. A Fast Static Analysis Approach to Detect Exploit Code Inside Network Flows. In Proceedings of the 8th International Symposium on Recent Advances in Intrusion Detection (RAID) (September 2005), pp. 284-304.

[9] COSTA, M., CROWCROFT, J., CASTRO, M., AND ROWSTRON, A. Vigilante: End-to-End Containment of Internet Worms. In Proceedings of the Symposium on Systems and Operating Systems Principles (SOSP) (October 2005).

[10] COWAN, C., PU, C., MAIER, D., HINTON, H., WALPOLE, J., BAKKE, P., BEATTIE, S., GRIER, A., WAGLE, P., AND ZHANG, Q. Stackguard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks. In Proceedings of the USENIX Security Symposium (1998).

[11] CRANDALL, J. R., SU, Z., WU, S. F., AND CHONG, F. T. On Deriving Unknown Vulnerabilities from Zero-Day Polymorphic and Metamorphic Worm Exploits. In Proceedings of the 12th ACM Conference on Computer and Communications Security (CCS) (November 2005).

[12] CUI, W., PEINADO, M., WANG, H. J., AND LOCASTO, M. E. ShieldGen: Automated Data Patch Generation for Unknown Vulnerabilities with Informed Probing. In Proceedings of the IEEE Symposium on Security and Privacy (May 2007).

[13] DETRISTAN, T., ULENSPIEGEL, T., MALCOM, Y., AND VON UNDERDUK, M. S. Polymorphic Shellcode Engine Using Spectrum Analysis. Phrack 11, 61-9 (2003).

[14] EREN, S. Smashing the Kernel Stack for Fun and Profit. Phrack 11, 60-6 (2003).

[15] ETOH, J. GCC Extension for Protecting Applications From Stack-smashing Attacks. In http://www.trl.ibm.com/projects/security/ssp (June 2000).

[16] FERRIE, P., AND SZ ¤OR, P. Zmist Opportunities. http://pferrie.tripod.com/papers/zmist.pdf, 2005.

[17] FOGLA, P., AND LEE, W. Evading network anomaly detection systems: Formal reasoning and practical techniques. In Proceedings of the 13th ACM Conference on Computer and Communications Security (CCS) (2006), pp. 59-68.

[18] JOSHI, A., KING, S. T., DUNLAP, G. W., AND CHEN, P. M. Detecting Past and Present Intrusions through Vulnerability-Specific Predicates. In Proceedings of the Symposium on Systems and Operating Systems Principles (SOSP) (October 2005).

[19] K2. ADMmutate documentation, 2003. http://www.ktwo.ca/ADMmutate-0.8.4.tar.gz.

[20] KC, G. S., KEROMYTIS, A. D., AND PREVELAKIS, V. Countering Code-Injection Attacks With Instruction-Set Randomization. In Proceedings of the 10th ACM Conference on Computer and Communications Security (CCS) (October 2003), pp. 272-280.

[21] KE WANG, JANAK J. PAREKH, S. J. S. Anagram: A Content Anomaly Detector Resistant To Mimicry Attack. In Proceedings of the 9th International Symposium on Recent Advances in Intrusion Detection (RAID) (2006).

[22] KIM, H.-A., AND KARP, B. Autograph: Toward Automated, Distributed Worm Signature Detection. In Proceedings of the USENIX Security Conference (2004).

[23] KRUGEL, C., KIRDA, E., MUTZ, D., ROBERTSON, W., AND VIGNA, G. Polymorphic Worm Detection Using Structural Information of Executables. In Proceedings of the 8th International Symposium on Recent Advances in Intrusion Detection (RAID) (September 2005), pp. 207-226.

[24] LIANG, Z., AND SEKAR, R. Fast and Automated Generation of Attack Signatures: A Basis for Building Self-Protecting Servers. In Proceedings of the 12th ACM Conference on Computer and Communications Security (CCS) (November 2005).

[25] LOCASTO, M. E., WANG, K., KEROMYTIS, A. D., AND STOLFO, S. J. FLIPS: Hybrid Adaptive Intrusion Prevention. In Proceedings of the 8th International Symposium on Recent Advances in Intrusion Detection (RAID) (September 2005), pp. 82-101.

[26] METASPLOIT DEVELOPMENT TEAM. Metasploit Project, 2006. http://www.metasploit.com.

[27] NETHERCOTE, N., AND SEWARD, J. Valgrind: A Program Supervision Framework. In Electronic Notes in Theoretical Computer Science (2003), vol. 89.

[28] NEWSOME, J., KARP, B., AND SONG, D. Polygraph: Automatically Generating Signatures for Polymorphic Worms. In Proceedings of the IEEE Symposium on Security and Privacy (May 2005).

[29] NEWSOME, J., AND SONG, D. Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software. In Proceedings of the 12th Symposium on Network and Distributed System Security (NDSS) (February 2005).

[30] OBSCOU. Building IA32 'Unicode-Proof' Shellcodes. Phrack 11, 61-11 (2003).

[31] POLYCHRONAKIS, M., ANAGNOSTAKIS, K. G., AND MARKATOS, E. P. Network-level polymorhpic shellcode detection using emulation. In Detection of Intrusions and Malware and Vulnerability Assessment (DIMVA) (2006).

[32] RIX. Writing IA-32 Alphanumeric Shellcodes. Phrack 11, 57-15 (2001).

[33] RUSSELL, S., AND NORVIG, P. Artificial Intelligence: A Modern Approach. Prentice Hall, 2002.

[34] SIDIROGLOU, S., GIOVANIDIS, G., AND KEROMYTIS, A. D. A Dynamic Mechanism for Recovering from Buffer Overflow Attacks. In Proceedings of the 8th Information Security Conference (ISC) (September 2005), pp. 1-15.

[35] SINGH, S., ESTAN, C., VARGHESE, G., AND SAVAGE, S. Automated Worm Fingerprinting. In Proceedings of Symposium on Operating Systems Design and Implementation (OSDI) (2004).

[36] SNORT DEVELOPMENT TEAM. Snort Project. http://www.snort.org/.

[37] SPINELLIS, D. Reliable identification of bounded-length viruses is NP-complete. IEEE Transactions on Information Theory 49, 1 (January 2003), 280-284.

[38] TOTH, T., AND KRUEGEL, C. Accurate Buffer Overflow Detection via Abstract Payload Execution. In Proceedings of the 5th International Symposium on Recent Advances in Intrusion Detection (RAID) (October 2002), pp. 274-291.

[39] WANG, H. J., GUO, C., SIMON, D. R., AND ZUGENMAIER, A. Shield: Vulnerability-Driven Network Filters for Preventing Known Vulnerability Exploits. In Proceedings of the ACM SIGCOMM Conference (August 2004), pp. 193-204.

[40] WANG, K., CRETU, G., AND STOLFO, S. J. Anomalous Payload-based Worm Detection and Signature Generation. In Proceedings of the 8th International Symposium on Recent Advances in Intrusion Detection (RAID) (September 2005), pp. 227-246.

[41] WANG, K., AND STOLFO, S. J. Anomalous Payload-based Network Intrusion Detection. In Proceedings of the 7th International Symposium on Recent Advances in Intrusion Detection (RAID) (September 2004), pp. 203-222.

[42] WANG, X., PAN, C.-C., LIU, P., AND ZHU, S. SigFree: A Signature-free Buffer Overflow Attack Blocker. In Proceedings of the 15th USENIX Security Symposium (2006), pp. 225-240.

[43] XU, J., NING, P., KIL, C., ZHAI, Y., AND BOOKHOLT, C. Automatic Diagnosis and Response to Memory Corruption Vulnerabilities. In Proceedings of the 12th ACM Conference on Computer and Communications Security (CCS) (November 2005).

[44] YEGNESWARAN, V., GIFFIN, J. T., BARFORD, P., AND JHA, S. An Architecture for Generating Semantics-Aware Signatures. In Proceedings of the 14th USENIX Security Symposium (2005).