# Enabling Secure VM-vTPM Migration in Private Clouds

**Authors:**
- Boris Danev
- Ramya Jayaram Masti
- Ghassan Karame
- Srdjan Capkun

**Contact:**
{bdanev, rmasti, karameg, capkuns}@inf.ethz.ch

**Affiliation:**
Department of Computer Science, ETH Zurich, Switzerland

## Abstract

The integration of Trusted Computing (TC) technologies into virtualized environments enables hardware-based protection of private information and the detection of malicious software. However, this integration requires the virtualization of the Trusted Platform Module (TPM) through virtual TPMs (vTPMs). A key challenge is to ensure that vTPM virtualization does not impede classical platform processes such as virtual machine (VM) migration.

In this work, we address the problem of enabling secure migration of vTPM-based VMs in private clouds. We detail the requirements for a secure VM-vTPM migration solution in private virtualized environments and propose a vTPM key structure suitable for VM-vTPM migration. Leveraging this structure, we construct a secure VM-vTPM migration protocol that provides stronger security guarantees compared to existing solutions. We evaluate the feasibility of our scheme through an implementation on the Xen hypervisor, demonstrating its direct integration with existing hypervisors. Our Xen-based implementation is available as open-source software. Finally, we discuss how our scheme can be extended to support live-migration of vTPM-based VMs.

## 1. Introduction

Trusted Computing (TC) [1] provides hardware and software support for secure storage and software integrity protection. Its integration into virtualized computing systems [2] enhances the security of data and applications by providing hardware-based protection of sensitive information and detecting malicious software. However, this integration raises challenges, particularly in virtualizing the TPM, which is the hardware root of trust providing secure storage and cryptographic operations.

Typically, there is one TPM per hardware platform, and its functionality must be efficiently shared among VMs. This is achieved through vTPMs, which mimic the interface and functionality of the hardware TPM. A significant challenge is to create vTPMs that comply with TPM specifications without hindering VM migration.

Several vTPM realizations have been proposed [4â€“7], but issues remain regarding their application to VM-vTPM migration. Current schemes either increase dependence on Privacy CA [4, 7, 8] or violate TPM usage restrictions [5]. To our knowledge, no secure VM-vTPM migration protocol has been implemented.

In this work, we address the problem of enabling secure vTPM-based VM (VM-vTPM) migration in private cloud environments. We first extend and detail the requirements for a secure VM-vTPM migration protocol. We then discuss the implications of current vTPM key hierarchy designs on the efficiency and performance of VM-vTPM migration. Based on these observations, we propose a novel vTPM key hierarchy that introduces an intermediate layer of keys between the TPM and vTPM, providing a logical separation of vTPM keys according to their usage in the VM. This hierarchy also enables vTPM key migration while minimizing dependence on Privacy CA.

We propose and analyze a secure VM-vTPM migration protocol that leverages our vTPM key hierarchy. Our protocol provides stronger security guarantees compared to existing solutions. We implement a preliminary Xen-based prototype and evaluate its performance, demonstrating that our solution can be directly integrated with the open-source hypervisor Xen [9]. Our implementation is open source and available for download at [10]. Finally, we discuss how our scheme can be extended to support live-migration of vTPM-based VMs.

To the best of our knowledge, this work is the first to explicitly define the requirements, propose a suitable vTPM key hierarchy, and design and implement a complete VM-vTPM migration protocol.

## 2. Problem and Security Requirements

### 2.1 System Model

We consider a setting where a cloud provider \( P \) owns several virtualized servers equipped with physical TPMs and wishes to securely migrate VMs among these servers, e.g., for load balancing. Each VM interfaces with the physical TPM through a vTPM (see Section 3.1 for details). We assume that vTPMs do not contain hardware or hypervisor configuration information, which is obtained by querying the TPM. Similarly, the hardware TPM does not include any VM-specific information, allowing vTPM migration.

We assume \( P \) wants to migrate a VM from a source server \( S \) to a destination server \( D \). Both \( S \) and \( D \) are equipped with public/private key pairs stored in their respective TPMs. During migration, the VM can be suspended on \( S \), transferred to \( D \), and then resumed on \( D \).

### 2.2 Attacker Model

We assume the presence of an attacker \( A \) who can eavesdrop, modify, insert, or delete messages in the network. \( A \) aims to abuse the migration protocol to gain benefits, such as starting her own VM or acquiring information about the transferred VM. \( A \) can exploit software vulnerabilities of remote servers but does not have physical access to any server managed by \( P \). We assume \( A \) is computationally bounded and cannot forge signatures or break authentication schemes without the correct credentials.

### 2.3 Requirements for Secure VM-vTPM Migration Protocols

#### Requirement 1: VM-vTPM Confidentiality and Integrity

An untrusted entity should not be able to learn meaningful information about the VM-vTPM during migration, including suspension, transfer, and resumption. Any modification to the VM-vTPM during migration should be detectable.

#### Requirement 2: Initiation Authenticity

Only authorized entities, such as \( P \), should be allowed to initiate the VM-vTPM migration process. This prevents DoS attacks and collocation attacks, where an attacker places the target VM on the same physical server as another VM it controls, creating a covert channel.

#### Requirement 3: Preserving the Trust Chain

Only trusted servers should receive correct VMs. Specifically:
- Trusted servers should not hold incorrect VMs-vTPMs.
- Untrusted servers should not acquire correct VMs-vTPMs.

Ensuring the integrity of the software hosted on both \( S \) and \( D \) before migration is crucial. A correct VM running in a trusted environment should not be transferred to a compromised server, and a trusted server should not accept an incorrect VM.

## 3. A Secure VM-vTPM Migration Protocol

### 3.1 vTPM Key Hierarchy

The vTPM key hierarchy should provide the same functionality as the original TPM key hierarchy, allowing proof of authenticity, attestation, and secure storage [16]. It should also comply with TPM key usage restrictions and introduce minimal overhead during VM-vTPM migration.

We propose a novel vTPM key hierarchy that introduces an intermediate layer of keys between the TPM and vTPM, providing a logical separation of vTPM keys according to their usage in the VM. This hierarchy enables vTPM key migration while minimizing dependence on Privacy CA.

### 3.2 Secure VM-vTPM Migration Protocol

We outline an efficient solution that enables secure VM-vTPM migration. Our protocol leverages the proposed vTPM key hierarchy to provide stronger security guarantees. We implement a preliminary Xen-based prototype and evaluate its performance, demonstrating that our solution can be directly integrated with the open-source hypervisor Xen [9]. Our implementation is open source and available for download at [10].

## 4. Feasibility Study and Performance Evaluation

We present a feasibility study and preliminary performance results from a prototype implementation using the Xen hypervisor. Our implementation demonstrates that our secure VM-vTPM migration solution can be directly integrated with Xen. The performance evaluation shows that our protocol is efficient and practical for use in real-world scenarios.

## 5. Related Work

We overview related work in the field of secure VM migration, including vTPM migration. While prior work has addressed different aspects of secure VM migration, to the best of our knowledge, this work is the first to explicitly define the requirements, propose a suitable vTPM key hierarchy, and design and implement a complete VM-vTPM migration protocol.

## 6. Conclusion

In this paper, we address the problem of enabling secure migration of vTPM-based VMs in private clouds. We detail the requirements for a secure VM-vTPM migration solution, propose a vTPM key hierarchy, and construct a secure VM-vTPM migration protocol. Our implementation on the Xen hypervisor demonstrates the feasibility and efficiency of our solution. Future work will focus on extending our scheme to support live-migration of vTPM-based VMs.