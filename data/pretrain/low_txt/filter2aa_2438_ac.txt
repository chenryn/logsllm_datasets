# 65 - Shells

## Shells
- **Count**: 0
- **Scan Time**: 1h37m23s
- **Response Code**: 200 OK

## No Changes in Discoveries
- All points discovered per baseline.
- **Information Points**: 79
- **Vulnerabilities**: 65
- **Shells**: 0

## Scan Time
- **Time**: 9h56m55s
- **Notes**: Lots more to check.

### Response: 404 Not Found
- **Observations**:
  - Less to scan, less to find.
  - False negatives.
  - **Information Points**: 44 (-35)
  - **Vulnerabilities**: 37 (-28)
  - **Scan Time**: 7m13s
  - Much quicker scan.
  - Fewer paths traversed.

### Response: 500 Server Error
- **Observations**:
  - Server Error == OMG VULN!
  - False positives+++
  - **Information Points**: 9540 (+9461)
  - **Vulnerabilities**: 9526 (+9461)

### Random Status Codes
- **Multiple Test Runs**:
  - All tests produced false positives++.
  - **Average Information Points**: 619 (+540)
  - **Average Vulnerabilities**: 550 (+485)
  - **Average Scan Time**: 11m37s
  - Quicker scans.
  - High variance in scan times.

### Scan Times
- **First Scan**: 10h3m35s
- **Second Scan**: 0h0m4s
- **Third Scan**: 16h47m41s

## Slowing Attackers Down
### What Does Your WAF Really Do?
- **Attack Detection**:
  - Block / Return error (e.g., 403, 500, etc.)
  - Profit???

### Why?
- Browsers and scanners often do not handle certain status codes well, especially the 1XX codes.
- **LaBrea Tarpit** (Tim Liston, 2001):
  - Designed to slow the spread of Code Red.
  - Slows down scans/attackers.
  - [More info](http://labrea.sourceforge.net)

### HTTP Tarpit Scenario
- **WAF Actions**:
  - Detects scan/attack.
  - Adds source IP to "naughty" list.
  - Rewrites all responses from the server.
  - Uses 100|101|102 status codes (random).
  - 204|304 might also be useful (no content).

### Let's Do Some Science!*
- *Science not included.

### vs. the HTTP TARPIT
- **NIKTO**:
  - **Baseline**: 2m18s, 18 findings
  - **HTTP Tarpit**: 14h33m2s, 10 findings
- **W3AF**:
  - **Baseline**: 1h37m23s, 65 findings
  - **HTTP Tarpit**: 18m10s, 0 findings
- **SKIPFISH**:
  - **Baseline**: 18m10s, 2519 low, 2522 medium, 12 high
  - **HTTP Tarpit**: 05s, 0 low, 0 medium, 3 high
- **ACUNETIX**:
  - **Baseline**: 1h19m, 1104 info, 30 low, 32 medium, 24 high
  - **HTTP Tarpit**: 33m, 3 info, 3 low, 3 medium, 1 high

### HTTP Tarpit Results
- **Observations**:
  - Slowed down scans (nikto): 340x longer.
  - Other tools gave up quicker.
  - Unreliable/aborted scans.
  - Up to 100% fewer findings.
  - *Not scientifically sound* ;)

### Blocking Successful Exploitation
- **Objective**: Make it hard to find vulnerabilities and time-consuming for attackers.
- **Question**: How often does Metasploit reference status codes?
  - `rgrep -E 'res[p|ponse]?\.code' *` â†’ 958
  - *Not scientifically sound* ;)
  - **Example Code**:
    ```ruby
    if (res.code = 300)
      case res.code
      when 401
        print_warning("Warning: The web site asked for authentication: #{res.headers['WWW-Authenticate'] || res.headers['Authentication']}")
      end
      fail_with(Exploit::Failure::Unknown, "Upload failed on #{path_tmp} [#{res.code} #{res.message}]")
    end
    ```
  - **Conclusion**: No match, no shell.

## Review
- **Using Status Codes to Our Benefit**:
  - Fun and useful.
  - Browsers can be quirky.
  - Scanners/attack toolkits are sometimes set in their ways.
  - Take the easy route; easy to fool.
  - WAFs need to be more offensive about their defense.
  - More than just blocking a request.
  - Even with a snazzy message, hacking back is bad.
  - Slowing down known attacks is good.
  - Making life harder for skiddies is priceless.
  - Current tools are much the same as APT (Adequate Persistent Threat).
  - Only as advanced as they need to be.
  - Because screwing with sk1dd13s is fun!

### Implementation
- **Generic Implementation**:
  - **PHP (the lowest common denominator)**:
    - `auto-prepend-file`
    - Limited to resources PHP handles.
  - **MITMdump**:
    - MITMproxy == memory hog.
    - Reverse proxy mode.
  - **Usable Implementation**:
    - **Nginx as reverse proxy**:
      - Requires: ngx_lua.
      - `ngx.status = XXX`.
      - Bugs in non-git version (203, 305, 306, 414, 505, 506 return nil).
      - [Config Example](https://github.com/ChrisJohnRiley/Random_Code/blob/master/nginx/nginx.conf)
  - **Ease of Adoption**:
    - Implement into mod-security.
    - Not a simple task.
    - Already discussed many times.
    - Help wanted ;).

### Countering This Research
- **Less Reliance on Status Codes**:
  - More reliance on content/headers.
  - **Pros**:
    - Better matching/intelligence.
  - **Cons**:
    - Slower (regex matching).
    - More resource-intensive.

### Questions?
- **Code/Scripts Available**:
  - [GitHub Repository](http://github.com/ChrisJohnRiley/Random_Code)

Thank you for coming!
- **Contact**:
  - [c22.cc](http://c22.cc)
  - @ChrisJohnRiley
  - PI:EMAIL