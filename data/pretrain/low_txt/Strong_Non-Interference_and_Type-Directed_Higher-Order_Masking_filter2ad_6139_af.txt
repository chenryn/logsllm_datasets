### Rivain [30]
The noisy leakage model is significantly more complex, making security proofs for masked algorithms considerably more challenging and difficult to verify. Duc, Dziembowski, and Faust [17] demonstrate that proving probing security can provide an estimate of the practical (noisy leakage) security of a masked algorithm. Duc, Faust, and Standaert [18] empirically show that some factors in Duc et al.'s bound [17] are likely proof artifacts, but the remaining factors, particularly those involving the size of the circuit, appear to be tight. Intuitively, Duc et al. [18] show that the probing security order indicates the smallest order moment of the distribution over leakage traces that contains information about the secret, while the size of the circuit the adversary can probe reflects the ease of evaluating higher-order moments.

### Composition, Region, and Stateful Probing
This observation highlights the importance of considering more powerful probing adversaries that can place \( t \) probes in each of several (pre-determined) regions of an algorithm (the \( t \)-region probing model). For instance, each core gadget (field operations and mask refreshing operations) could be designated as a separate region, as in [17]. More recently, Andrychowicz, Dziembowski, and Faust [1] introduced a more general notion of a region whose size must be linear in the security parameter (and masking order), and they presented a mask refreshing gadget that is linear in size and fulfills, in the probing model, the reconstructibility and re-randomization properties from Faust et al. [21].

### Reconstructibility and Re-randomization
A gadget is \( t \)-reconstructible if any \( t \) of its positions can be simulated using only its (shared) inputs and outputs. A gadget is re-randomizing if its output encoding is uniform and \( t \)-wise independent, even if its input encoding is completely known. Our SNI (Strong Non-Interference) notion combines both considerations: a gadget is \( t \)-SNI if any \( t \) of its positions can be simulated using only its (shared) inputs, and if its output encoding is uniform and \( (t - d) \)-wise independent even if \( d \) shares of each of its inputs are known (for all \( d \) such that \( 0 \leq d < t \)).

Expressed this way, it is clear that SNI is slightly weaker than "reconstructible and re-randomizable" in the probing model. This allows us to automatically verify that a gadget is SNI for some fixed \( t \), whereas reconstructibility and re-randomization are more complex. Additionally, the ability to combine the use of SNI and weaker (NI or affine) gadgets in a fine-grained manner enables more precise verification of the security of large algorithms in models where the adversary can place \( t \) probes in the entire algorithm. We leave a formal investigation of the relation between SNI and "reconstructibility and re-randomization" as future work.

### Composition Results
Based on reconstructibility and re-randomization, Faust et al. [21,1] prove elegant and powerful composition results that apply in the more powerful region probing and stateful probing models [24], where the adversary may (adaptively) place \( t \) probes in each region (or in each subsequent iteration) of the algorithm. Our SNI notion also enables composition in these two models: it is straightforward to see that any two \( 2t \)-SNI algorithms (our regions) can be composed securely when the adversary can place \( t \) probes in each. Further, our composition techniques support elegant constructions that ensure compositional security proofs in the region and stateful probing models without doubling the number of shares computations are carried out on (instead, simply doubling the number of shares at region boundaries). We provide details of these robust composition results in Appendix D. Depending on the size of the regions considered, these robust composition results may bring significant performance gains in terms of randomness and time complexity.

### Automated Verification
Finally, our notion of SNI and the automated verification techniques presented allow efficient, precise, and automated verification of \( t \)-SNI within each region, an issue not addressed by the works of Faust et al. [21,1].

### Existing Masking Transformations
Ishai, Sahai, and Wagner [24] and others [17,1] propose simple masking transformations that turn unprotected algorithms (or Boolean or arithmetic circuits) into protected masked algorithms. Ishai, Sahai, and Wagner [24] forgo the use of mask refreshing gadgets by doubling the number of shares on which masked computations occur, with a quadratic impact on performance and randomness complexity. Faust et al. [17,1] rely on ensuring that all gadgets used in the masked algorithm are reconstructible and re-randomizing, which guarantees security in a stronger probing model but incurs a greater loss of performance. By contrast, our transformation aims to determine whether a mask refreshing operation is required to ensure security in the probing model, and our core contributions (the notion of SNI and the type-checker) support composition in stronger probing models while still allowing precise security proofs within regions.

### Coron's Schemes
Coron [12] proposes schemes for masking lookups at secret or sensitive indices in public tables. We have not investigated whether the proposed algorithms are SNI or simply NI, and whether establishing these properties can be done by adapting our type system or if it should be done differently (either as a direct proof or using the checker from Section 7). We note that part of Coron's result, specifically that using RefreshIter\(_{2t+1}\) between each query to the masked S-box supports security in the stateful probing model, is subsumed and improved by the robust composition results described in the full version.

### Security Analysis and Multi-Party Computation
The security analysis of masking schemes in the \( t \)-probing model is connected to techniques from multi-party computation, as explored in parallel lines of research by threshold implementations [28,9]. Higher-order threshold implementations face similar security issues due to composition, although they offer additional protection against practical considerations not captured in standard probing models, such as glitches. We believe that the results discussed here are applicable to the compositional security analysis of threshold implementations but leave a formal investigation of these links as future work.

### Refining SNI
We now discuss some limitations of our current implementation and potential avenues for future theoretical work that may yield significant practical improvements.

#### Algorithm 6: Semi-Public Modular Addition in GF(2)^k
```python
function AddPub(x, y)
    w := x (cid:12) y
    a := x ⊕ y
    u := w (cid:28) 1
    for i = 2 to k − 1 do
        a' := RefreshM(a)
        ua := u (cid:12) a'
        u := ua ⊕ w
        u := u (cid:28) 1
    z := a ⊕ u
    return z
```
(6a) Masked algorithm produced by our tool

```python
function AddPub(x, y)
    w := x (cid:12) y
    a := x ⊕ y
    w := RefreshM(w)
    u := w (cid:28) 1
    for i = 2 to k − 1 do
        ua := u (cid:12) a
        u := ua ⊕ w
        u := u (cid:28) 1
    z := a ⊕ u
    return z
```
(6b) Masked algorithm produced by hand

### Keccak and Loop Handling
First, we discuss the case of Keccak, for which algorithm transformation is prohibitively expensive. This issue arises from our handling of static for loops: our tool unrolls them to perform type-checking and rolls them back up afterward if possible (otherwise leaving them unrolled in the final algorithm). For smaller algorithms, this is not a problem, but unrolling all 24 rounds of Keccak-f, along with all the loops internal to each iteration, yields a very large program that is then backtracked over each time a mask refreshing operation is inserted. Refining our non-interference notions to multi-output gadgets and algorithms would allow us to significantly improve our tool's handling of loops and high-level composition, while gaining a better understanding of probing security in such scenarios. This improved understanding may, in turn, help inform the design of primitives that are easier to protect against higher-order probing.

### Greedy Policy for Mask Refreshing
Second, we discuss our greedy policy for the insertion of mask refreshing algorithms. In our experiments, we consider a version of the linear-time modular addition algorithm [14] whose second argument is a public (non-shared) value (e.g., a round counter, as in Speck). We show its code, as produced by our masking transformer, in Gadget 6a, and display a hand-masked variant in Gadget 6b, slightly abusing notations by denoting simple gadgets with the symbol typically used for their unprotected versions. Notice that the variable \( w \) is used once per loop iteration, and our tool refreshes each of them, while it is sufficient to mask only the first one. Improving our gadget selection algorithm to detect and implement this optimization—and others—would be an interesting avenue for future work, potentially enhancing our understanding of the effect of compiler optimizations on security.

### Acknowledgements
The work presented here was supported by projects S2013/ICE-2731 N-GREENS Software-CM, ANR-10-SEGI-015 PRINCE, ANR-14-CE28-0015 BRUTUS, and ONR Grants N000141210914 and N000141512750, as well as FP7 Marie Curie Actions-COFUND 291803.

### References
1. Marcin Andrychowicz, Stefan Dziembowski, and Sebastian Faust. Circuit compilers with \( O(1/\log(n)) \) leakage rate. In EUROCRYPT 2016, LNCS, pages 586–615. Springer, Heidelberg, 2016.
2. Josep Balasch, Benedikt Gierlichs, Vincent Grosso, Oscar Reparaz, and François-Xavier Standaert. On the cost of lazy engineering for masked software implementations. In Proceedings of the Smart Card Research and Advanced Application Conference (CARDIS), volume 8968 of LNCS, pages 64–81. Springer, Heidelberg, November 2014.
3. Kshitij Bansal, Andrew Reynolds, Clark Barrett, and Cesare Tinelli. A new decision procedure for finite sets and cardinality constraints in SMT. In Proceedings of the 8th International Joint Conference on Automated Reasoning (IJCAR), volume 9706 of LNCS, pages 82–98, June 2016.
4. Gilles Barthe, Sonia Belaïd, François Dupressoir, Pierre-Alain Fouque, Benjamin Grégoire, and Pierre-Yves Strub. Verified proofs of higher-order masking. In Elisabeth Oswald and Marc Fischlin, editors, EUROCRYPT 2015, Part I, volume 9056 of LNCS, pages 457–485. Springer, Heidelberg, April 2015.
5. Gilles Barthe, François Dupressoir, Benjamin Grégoire, César Kunz, Benedikt Schmidt, and Pierre-Yves Strub. EasyCrypt: A tutorial. In Foundations of Security Analysis and Design VII - FOSAD 2012/2013 Tutorial Lectures, pages 146–166, 2013.
6. Alberto Battistello, Jean-Sébastien Coron, Emmanuel Prouff, and Rina Zeitoun. Horizontal side-channel attacks and countermeasures on the ISW masking scheme. In CHES 2016, LNCS, pages 23–29. Springer, Heidelberg, 2016.
7. Ali Galip Bayrak, Francesco Regazzoni, David Novo, and Paolo Ienne. Sleuth: Automated verification of software power analysis countermeasures. In Guido Bertoni and Jean-Sébastien Coron, editors, CHES 2013, volume 8086 of LNCS, pages 293–310. Springer, Heidelberg, August 2013.
8. Sonia Belaïd, Fabrice Benhamouda, Alain Passelègue, Emmanuel Prouff, Adrian Thillard, and Damien Vergnaud. Randomness complexity of private circuits for multiplication. In EUROCRYPT 2016, LNCS, pages 616–648. Springer, Heidelberg, 2016.
9. Begül Bilgin, Benedikt Gierlichs, Svetla Nikova, Ventzislav Nikov, and Vincent Rijmen. Higher-order threshold implementations. In Palash Sarkar and Tetsu Iwata, editors, ASIACRYPT 2014, Part II, volume 8874 of LNCS, pages 326–343. Springer, Heidelberg, December 2014.
10. Claude Carlet, Emmanuel Prouff, Matthieu Rivain, and Thomas Roche. Algebraic decomposition for probing security. In Rosario Gennaro and Matthew J. B. Robshaw, editors, CRYPTO 2015, Part I, volume 9215 of LNCS, pages 742–763. Springer, Heidelberg, August 2015.
11. Suresh Chari, Charanjit S. Jutla, Josyula R. Rao, and Pankaj Rohatgi. Towards sound approaches to counteract power-analysis attacks. In Michael J. Wiener, editor, CRYPTO’99, volume 1666 of LNCS, pages 398–412. Springer, Heidelberg, August 1999.
12. Jean-Sébastien Coron. Higher order masking of look-up tables. In Phong Q. Nguyen and Elisabeth Oswald, editors, EUROCRYPT 2014, volume 8441 of LNCS, pages 441–458. Springer, Heidelberg, May 2014.
13. Jean-Sébastien Coron, Johann Großschädl, Mehdi Tibouchi, and Praveen Kumar Vadnala. Conversion from arithmetic to Boolean masking with logarithmic complexity. In Gregor Leander, editor, FSE 2015, volume 9054 of LNCS, pages 130–149. Springer, Heidelberg, March 2015.
14. Jean-Sébastien Coron, Johann Großschädl, and Praveen Kumar Vadnala. Secure conversion between Boolean and arithmetic masking of any order. In Lejla Batina and Matthew Robshaw, editors, CHES 2014, volume 8731 of LNCS, pages 188–205. Springer, Heidelberg, September 2014.
15. Jean-Sébastien Coron, Emmanuel Prouff, Matthieu Rivain, and Thomas Roche. Higher-order side channel security and mask refreshing. In Shiho Moriai, editor, FSE 2013, volume 8424 of LNCS, pages 410–424. Springer, Heidelberg, March 2014.
16. Jean-Sébastien Coron, Aurélien Greuet, Emmanuel Prouff, and Rina Zeitoun. Faster evaluation of S-boxes via common shares. In CHES 2016, LNCS, pages 498–514. Springer, Heidelberg, 2016.
17. Alexandre Duc, Stefan Dziembowski, and Sebastian Faust. Unifying leakage models: From probing attacks to noisy leakage. In Phong Q. Nguyen and Elisabeth Oswald, editors, EUROCRYPT 2014, volume 8441 of LNCS, pages 423–440. Springer, Heidelberg, May 2014.
18. Alexandre Duc, Sebastian Faust, and François-Xavier Standaert. Making masking security proofs concrete - or how to evaluate the security of any leaking device. In Elisabeth Oswald and Marc Fischlin, editors, EUROCRYPT 2015, Part I, volume 9056 of LNCS, pages 401–429. Springer, Heidelberg, April 2015.
19. Hassan Eldib and Chao Wang. Synthesis of masking countermeasures against side channel attacks. In Proceedings of the 26th International Conference on Computer Aided Verification, pages 114–130, 2014.
20. Hassan Eldib, Chao Wang, and Patrick Schaumont. SMT-based verification of software countermeasures against side-channel attacks. In Proceedings of the 20th International Conference on Tools and Algorithms for the Construction and Analysis of Systems, pages 62–77, 2014.
21. Sebastian Faust, Tal Rabin, Leonid Reyzin, Eran Tromer, and Vinod Vaikuntanathan. Protecting circuits from leakage: the computationally-bounded and noisy cases. In Henri Gilbert, editor, EUROCRYPT 2010, volume 6110 of LNCS, pages 135–156. Springer, Heidelberg, May 2010.
22. Louis Goubin and Jacques Patarin. DES and differential power analysis (the “duplication” method). In Çetin Kaya Koç and Christof Paar, editors, CHES’99, volume 1717 of LNCS, pages 158–172. Springer, Heidelberg, August 1999.
23. Dahmun Goudarzi and Matthieu Rivain. How fast can higher-order masking be in software? Cryptology ePrint Archive, Report 2016/264, 2016. http://eprint.iacr.org/.
24. Yuval Ishai, Amit Sahai, and David Wagner. Private circuits: Securing hardware against probing attacks. In Dan Boneh, editor, CRYPTO 2003, volume 2729 of LNCS, pages 463–481. Springer, Heidelberg, August 2003.
25. Paul C. Kocher, Joshua Jaffe, and Benjamin Jun. Differential power analysis. In Michael J. Wiener, editor, CRYPTO’99, volume 1666 of LNCS, pages 388–397. Springer, Heidelberg, August 1999.
26. Thomas Walker Lynch. Binary adders, 1996.
27. Andrew Moss, Elisabeth Oswald, Dan Page, and Michael Tunstall. Compiler assisted masking. In Emmanuel Prouff and Patrick Schaumont, editors, CHES 2012, volume 7428 of LNCS, pages 58–75. Springer, Heidelberg, September 2012.
28. Svetla Nikova, Vincent Rijmen, and Martin Schläffer. Secure hardware implementation of