### Embedding Node Location in IDs to Enhance Security

The proposed security mechanism involves embedding the location of a node into its ID, thereby preventing a compromised node from falsely claiming a different location. This scheme assumes that a sensor node will not be compromised before it acquires its coordinates via GPS after deployment. Given this assumption, we can adapt the Blundo scheme [4] as follows:

1. **Pre-Deployment Phase:**
   - The key server pre-loads each node \( u \) with a bivariate polynomial \( f(x, y) \) of degree \( k \) for both \( x \) and \( y \). This is different from the original Blundo scheme, which uses \( f(u, y) \).

2. **Post-Deployment Phase:**
   - After deployment, node \( u \) generates a new ID \( u' \), which combines its original ID \( u \) and its GPS coordinates (e.g., by concatenating them or hashing the concatenation into a shorter ID).
   - Node \( u \) then evaluates \( f(u', y) \) and erases \( f(x, y) \). This ensures that if the node is compromised later, it will not reveal any information about the polynomials held by other nodes.

3. **Key Establishment:**
   - When two nodes want to establish a pairwise key, they must provide authentic information about their locations.
   - Based on the coordinates and the default transmission range, they can determine the minimum number of hops between them.
   - If the base station broadcasts its own coordinates, every node can roughly determine the direction of the path it is on.

### Adversary Constraints

- A compromised node located between a non-compromised node \( u \) and the base station, or more than \( t \) hops away from \( u \), cannot be used to lower the association of node \( u \).
- Typically, a compromised node can only deceive one non-compromised node, so the upper bound for such deception is \( t \) or slightly larger.

### Performance Considerations

- Although this variation is effective at preventing false data injection attacks, we do not consider \( t \) as the upper bound due to performance constraints:
  - Each node \( u \) needs to store \( k^2 + 1 \) coefficients for \( f(x, y) \).
  - It needs to compute \( k^2 + k \) modular multiplications.
  - Exchanging coordinates may consume a significant portion of the bandwidth.
- To balance security and performance, we only apply this in the least resource-constrained scenarios.

### Other Security Issues

- A compromised but undetected node can always drop or alter packets passing through it. The only solution is to detect and bypass the compromised node.
- Compromise detection in sensor networks is challenging due to their unattended nature.
- Our scheme meets the security requirement that the impact of a node compromise must be localized to facilitate later detection. A compromised node can only attack locally and on its own behalf, increasing the risk of detection.

### Computational and Communication Overheads

#### Computational Cost

- **Pairwise Key Establishment:**
  - Two nodes need to establish a multi-hop pairwise key using an id-based scheme [3, 4, 6, 14, 15].
  - For example, in the Blundo scheme, a node computes \( k \) modular multiplications and \( k \) modular additions for a polynomial of degree \( k \).
  - With \( k = 100 \), the computational cost is about \( \frac{1}{10000} \) of creating an RSA signature, similar to AES encryption.

- **Report Authentication:**
  - A cluster node computes three MACs for one report: one with its individual key, one with a pairwise key shared with its association node, and one with the pairwise key shared with its cluster head.
  - An en-route node computes four MACs: it verifies one pairwise MAC from its lower association, generates one for its upper association, and verifies and generates MACs for its downstream and upstream neighbors.
  - Despite the additional MACs, the energy savings from early false data filtering justify the extra computational cost.

#### Communication Cost

- **Report Overhead:**
  - Each authentic report contains one compressed MAC and \( t + 1 \) pairwise MACs.
  - The size of the compressed MAC is critical for security, while the size of pairwise MACs can be smaller to balance performance and security.
  - For example, with 4-byte pairwise MACs and \( t = 3 \), the overhead is 4 bytes, providing stronger security than standard hop-by-hop authentication.

- **Association Discovery and Maintenance:**
  - During path changes, a node adds its ID to beaconing messages, contributing to communication overhead based on path dynamics.

### Related Work

- **µTESLA** [17]: Provides base station broadcast authentication using one-way key chains and delayed key disclosure.
- **Local Broadcast Authentication** [19]: Robust against outsider attacks but vulnerable to insider attacks.
- **Secure Hop-by-Hop Data Aggregation** [9]: Works with one compromised node.
- **SEF** [18]: Statistical en-route detection scheme that drops 80-90% of false reports within 10 forwarding hops.
- **SIA** [16]: Secure information aggregation scheme focusing on query result accuracy, while our scheme focuses on report authenticity and early false data filtering.

### Conclusion and Future Work

- We presented an authentication scheme to prevent false data injection attacks in sensor networks, ensuring that the base station can detect false reports when no more than \( t \) nodes are compromised.
- Our scheme guarantees that \( t \) colluding compromised sensors can deceive at most \( B \) non-compromised nodes, where \( B \) is \( O(t^2) \) in the worst case.
- Recent improvements allow detection of false data within one hop, albeit with additional computational overhead.
- Future work includes studying the use of interleaved hop-by-hop authentication for sensor network routing and data collection protocols, and adapting the scheme for mobile data sinks.

### Acknowledgements

We thank Fan Ye, Jing Deng, Leijun Huang, Sankardas Roy, and the anonymous reviewers for their valuable contributions and feedback.

### References

[1] M. Bellare, R. Guerin, and P. Rogaway. XOR MACs: New Methods for Message Authentication Using Finite Pseudo-random Functions. in Proc. of Crypto’95.
[2] S. Basagni, K. Herrin, E. Rosti, D. Bruschi. Secure Pebblenets. In Proc. of MobiHoc 2001.
[3] R. Blom. An Optimal Class of Symmetric Key Generation Systems. Advances in Cryptology, EUROCRYPT’84, LNCS 209, 335-338, 1984.
[4] C. Blundo, A. Santis, A. Herzberg, S. Kutten, U. Vaccaro, and M. Yung. Perfectly-secure key distribution for dynamic conferences. LNCS 740, pages 471-486, 1993.
[5] H. Chan, A. Perrig, and D. Song. Random Key Predistribution Schemes for Sensor Networks. In Proc. of the IEEE Security and Privacy Symposium 2003, May 2003.
[6] W. Du, J. Deng, Y. Han, and P. Varshney. A Pairwise Key Pre-distribution Scheme for Wireless Sensor Networks. In Proc. of 10th ACM Conference on Computer and Communications Security (CCS), Washington DC, October 27-31, 2003.
[7] L. Eschenauer and V. Gligor. A Key-Management Scheme for Distributed Sensor Networks. In Proc. of 9th ACM Conference on Computer and Communications Security (CCS), Washington DC, 2002.
[8] O. Goldreich, S. Goldwasser, and S. Micali. How to Construct Random Functions. Journal of the ACM, Vol. 33, No. 4, 1986, pp 210-217.
[9] L. Hu and D. Evans. Secure aggregation for wireless networks. In Workshop on Security and Assurance in Ad hoc Networks. Jan. 2003.
[10] J. Hill, R. Szewczyk, A. Woo, S. Hollar, D. Culler, and K. Pister. System architecture directions for networked sensors. In Proc. of ASPLOS IX, 2000.
[11] B. Karp and H. Kung. GPSR: A Geographic Hash Table for Data-Centric Storage. In Proc. of ACM International Workshop on Wireless Sensor Networks and Applications, Sept. 2000.
[12] C. Karlof and D. Wagner. Secure Routing in Sensor Networks: Attacks and Countermeasures. In Proc. of First IEEE Workshop on Sensor Network Protocols and Applications, May 2003.
[13] L. Lamport. Password authentication with insecure communication. Communications of the ACM, 24(11):770-772, Nov., 1981.
[14] D. Liu and P. Ning. Location-Based Pairwise Key Establishments for Static Sensor Networks. In 2003 ACM Workshop on Security in Ad Hoc and Sensor Networks (SASN ’03), October 2003.
[15] D. Liu and P. Ning. Establishing Pairwise Keys in Distributed Sensor Networks. In Proc. of the 10th ACM Conference on Computer and Communications Security (CCS ’03), Washington D.C., October, 2003.
[16] B. Przydatek, D. Song, and A. Perrig. SIA: Secure Information Aggregation in Sensor Networks. In Proc. of ACM SenSys 2003.
[17] A. Perrig, R. Szewczyk, V. Wen, D. Culler, and J. Tygar. SPINS: Security Protocols for Sensor Networks. In Proc. of Seventh Annual ACM International Conference on Mobile Computing and Networks(Mobicom 2001), Rome Italy, July 2001.
[18] F. Ye, H. Luo, S. Lu, and L. Zhang. Statistical En-route Detection and Filtering of Injected False Data in Sensor Networks. To appear in Proc. of IEEE INFOCOM 2004.
[19] S. Zhu, S. Setia and S. Jajodia. LEAP: Efficient Security Mechanisms for Large-Scale Distributed Sensor Networks. In Proc. of the 10th ACM Conference on Computer and Communications Security (CCS ’03), Washington D.C., October, 2003.