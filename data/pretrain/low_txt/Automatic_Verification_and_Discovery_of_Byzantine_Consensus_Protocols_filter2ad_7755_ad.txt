### Optimized Text

Not all correct OTC (Optimistically Terminating Consensus) algorithms are listed; I have omitted those that can be derived from others by permuting the set of processes and those that are dominated by other algorithms. A set \( T \) is dominated by \( T' \) if every OT condition in \( T \) is dominated by some condition in \( T' \). All considered OTCs (X, C, k) have \( k \leq 3 \).

In a normal round, processes wait for the coordinator's proposal to propose to the OTC (Figure 2). However, in the first round, processes can directly propose their values to the OTC (Figure 9) [30]. This integration of the first step into the OTC allows for multi-coordinator algorithms and justifies the distinction between X and C in OT (X, C, k). As with the Validity property of Consensus, the valid(x) predicate in the first-round OTC can assume all processes to be honest. Therefore, for the first round, valid(x) becomes true once a process receives one event (x: pi), making Permanent Validity easily satisfied. All OTCs presented in this section are first-round OTCs to which processes propose directly; complete Consensus algorithms can be constructed as shown in [30].

#### Crash-Stop Scenarios

**3 Processes with 1 Failure:**
- **Failure Set (F):** {∅, {p1}, {p2}, {p3}}
- **Message Set (M):** {∅}

The generated OTC algorithms correspond to the following sets of OT conditions (X, C, k):
1. ({{p1, p2}, {p1, p2}, 1}, {{p1}, {p1, p2}, 2}, {{p1}, {p1, p3}, 2})
2. ({{p1, p2}, {p1, p2}, 1}, {{p1, p3}, {p1, p3}, 2}, {{p2, p3}, {p2, p3}, 2})

These can be depicted as (Section 2.4):
- n = 3
- 4 failures
- 5 algs tested
- 1 found
- 0.03 sec

The first algorithm decides in two steps if the leader \( p1 \) and a majority of processes are correct. It also decides in one step if \( p1 \) and \( p2 \) propose the same value. Such an algorithm was presented in [9] for general \( n \).

The second algorithm decides if two processes propose the same value; in one step if the processes are \( p1 \) and \( p2 \), and in two steps otherwise. If all processes are correct but propose different values, this algorithm will not decide. Subsequent sections exclude such algorithms by requiring at least one OT (X, C, k) to have \( X = \{p1\} \).

**4 Processes with 1 Failure:**
- **Generated OTCs:**
  - Both algorithms decide in two steps if the leader \( p1 \) and at least one other process are correct.
  - The first decides in one step if \( p1 \) and \( p2 \) propose the same value.
  - The second decides if at least three processes, including \( p1 \), propose the same value.

This protocol can sometimes decide even if two processes are faulty, though we assume at most one failure. In practice, the algorithm might not need to wait for responses from some slow but formally correct processes.

**5 Processes with 2 Failures:**
- **Generated OTCs:**
  - Both decide in two steps if a majority of processes, including the leader, are correct.
  - The first additionally decides in one step if \( p1, p2, p3 \) propose the same value.
  - The other decides if at least four processes, including \( p1 \), propose the same value.

#### Byzantine Scenarios

**4 Processes with 1 Failure:**
- **Algorithm by Castro and Liskov [3]:** Decides in three steps if the leader \( p1 \) is correct and at most one other process is faulty. Later papers observed [6, 30] that if all processes are correct, the decision can be made in two steps.

Seven OTCs were generated, two of which extend the above protocol. These algorithms can also decide in two steps in some runs with one process faulty and two processes proposing the same value.

**5 Processes with 1 Failure:**
- **Generated Variants:**
  - The first three OT conditions correspond to the 4-process algorithm [3], deciding if the leader \( p1 \) is correct and at most one of \( p1, ..., p4 \) is faulty; \( p5 \) is ignored.
  - The next four conditions decide in two steps if at most one process is faulty (not \( p1 \)).
  - The algorithm can sometimes decide if two processes propose the same value and at most two are faulty or slow.

### Conclusion

This paper presents a method for automatic verification and discovery of low-latency Consensus protocols through model checking. The main challenge is the enormous size of the state and solution spaces. The method reduces the state space by focusing on the latency-determining first round, ignoring the order of messages in this round, and distinguishing between state-modifying actions and state-preserving predicates. Monotonicity of the predicates and verified properties allows the use of a Tarski-style fixpoint algorithm, resulting in exponential verification speed-up.

While no groundbreaking protocols were discovered, the method generated interesting improvements to existing algorithms, particularly combinations of fast one-step protocols and resilient leader-based algorithms. Automated protocol design is a promising paradigm that can complement traditional manual processes, allowing for quick analysis of intricate interplays and discovery of subtle errors and improvements, especially in custom failure models with malicious participants. From a theoretical perspective, generated protocols and counterexample states provide insights for general n-process protocols and lower bounds.

### References

[1] Y. Bar-David and G. Taubenfeld. Automatic discovery of Mutual Exclusion algorithms. In Proc. of the 17th Int. Symposium on Distributed Computing, 2003.
[2] M. Burrows, M. Abadi, and R. Needham. A logic of authentication. ACM Transactions on Computer Systems, 8(1):18–36, 1990.
[3] M. Castro and B. Liskov. Practical Byzantine fault tolerance. In Proceedings of the Third Symposium on Operating Systems Design and Implementation, pages 173–186, New Orleans, Louisiana, Feb. 1999.
[4] T. D. Chandra, V. Hadzilacos, and S. Toueg. The weakest failure detector for solving Consensus. Journal of the ACM, 43(4):685–722, 1996.
[5] E. M. Clarke, S. Jha, and W. Marrero. Verifying security protocols with Brutus. ACM Trans. on Software Engineering and Methodology, 9(4):443–487, 2000.
[6] P. Dutta, R. Guerraoui, and M. Vukolic. Asynchronous Byzantine Consensus: Complexity, resilience and authentication. TR 200479, EPFL, Sept. 2004.
[7] E. Gafni and L. Lamport. Disk Paxos. In Int. Symposium on Distributed Computing, pp. 330–344, 2000.
[8] J. Gray and L. Lamport. Consensus on Transaction Commit. TR 2003-96, Microsoft, Jan. 2004.
[9] R. Guerraoui and M. Raynal. The information structure of indulgent Consensus. TR 1531, IRISA, 2003.
[10] R. Guerraoui, M. Hurfin, A. Mostefaoui, R. Oliveira, M. Raynal, and A. Schiper. Consensus in asynchronous distributed systems: A concise guided tour. In LNCS 1752, pages 33–47. Springer, 2000.
[11] M. P. Herlihy. Impossibility and universality results for wait-free synchronization. In Proc. of the 7th Annual ACM Symposium on Principles of Distributed Computing, pages 276–290, New York, USA, 1988.
[12] P. Kellomaki. An annotated specification of the Consensus protocol of Paxos using superposition in PVS. TR 36, Tampere University of Technology, 2004.
[13] L. Lamport. Paxos made simple. ACM SIGACT News, 32(4):18–25, December 2001.
[14] L. Lamport. Specifying systems: the TLA+ language and tools for hardware and software engineers. Addison-Wesley Professional, 2002.
[15] L. Lamport. Fast Paxos. Technical Report MSR-TR-2005-112, Microsoft Research (MSR), July 2005.
[16] L. Lamport. The part-time parliament. ACM Transactions on Computer Systems, 16(2):133–169, 1998.
[17] G. Lowe. Breaking and fixing the Needham-Schroeder public-key protocol using FDR. In Proc. of the 2nd Int. Workshop on Tools and Algorithms for Construction and Analysis of Systems, pp. 147–166, UK, 1996.
[18] J. C. Mitchell, M. Mitchell, and U. Stern. Automated analysis of cryptographic protocols using Murφ. In Proc. of the 1997 Symposium on Security and Privacy, pages 141–153, Washington, DC, USA, 1997.
[19] A. Mostefaoui and M. Raynal. Solving Consensus using Chandra-Toueg’s unreliable failure detectors: A general quorum-based approach. In Proceedings of the 13th International Symposium on Distributed Computing, pages 49–63, London, UK, 1999.
[20] L. C. Paulson. The inductive approach to verifying cryptographic protocols. Journal of Computer Security, 6:85–128, 1998.
[21] Pogosyants, Segala, and Lynch. Verification of the randomized Consensus algorithm of Aspnes and Herlihy: A case study. DISTCOMP, 13, 2000.
[22] R. D. Prisco, B. W. Lampson, and N. A. Lynch. Revisiting the Paxos algorithm. In Workshop on Distributed Algorithms, pages 111–125, 1997.
[23] M. Raynal. Consensus in synchronous systems: a concise guided tour. TR 1497, IRISA, Jul 2002.
[24] A. Schiper. Early Consensus in an asynchronous system with a weak failure detector. Distributed Computing, 10(3):149–157, Apr. 1997.
[25] A. Tarski. A fixed point theorem and its applications. Pacific Journal of Mathematics, pages 285–309, 1955.
[26] T. Tsuchiya and A. Schiper. Model Checking of Consensus Algorithms. Technical report, EPFL, 2006.
[27] T. N. Win and M. D. Ernst. Verifying distributed algorithms via dynamic analysis and theorem proving. TR 841, MIT Lab for Computer Science, May 2002.
[28] T. N. Win, M. D. Ernst, S. J. Garland, D. Kirli, and N. Lynch. Using simulated execution in verifying distributed algorithms. Software Tools for Technology Transfer, 6(1):67–76, July 2004.
[29] P. Zielinski. Minimizing latency of agreement protocols. PhD thesis, Computer Laboratory, University of Cambridge, UK, 2006. TR 667.
[30] P. Zielinski. Optimistically Terminating Consensus. In Proc. of the 5th Int. Symposium on Parallel and Distributed Computing, Timisoara, Romania, July 2006.