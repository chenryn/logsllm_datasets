# Dan Hubbard: VP of Security Research

## Perpetual Beta = Live Testing = Trouble
- **Airline Terminals using Active Script**
- **Start : Middle : End**

### Wait, the Web has version numbers?
- **Web Two Dot UH-OH or Exploit 2.0**
- **Introduction to HoneyJax**
  - Definitions
  - Reasons for deploying them
  - Types: Passive, Active, and Passive-Aggressive HoneyJax
  - Reporting data from accounts
  - Disclosure for website vulnerabilities
  - Legal aspects / Grab Bag

### Conclusion
- One of these things is not like the other
- It's a bird, is it a plane, no, it's Web 2.0: 80% of the top 20 websites have Web 2.0 "philosophies" (Source: O’REILLY)

## XML HTTP Request
- When Microsoft introduced XMLHttpRequest in Internet Explorer 5, it enabled browser-side JavaScript to communicate with the web server in the background without requiring a new web page to be displayed. This innovation made it possible to develop more fluid and responsive web applications. Mozilla, Apple (Safari), and Opera soon followed suit.

## Several dozen *very* loosely defined standards mashed together
- At the heart of it all are JavaScript and XML.

### Web “Two Dot Uh-Oh”
- **Losing control of your destiny: User-Created Content**
- **Who do you trust: Social Networks**
- **Unattended Installs and Code Injection: R.S.S.**
- **Mushy Peas: Mash-ups**
- **ANY ANY PORT 80: Security is often the last to know**
- **But I have a firewall: It's about the information, not the network**
- **If I told you to jump off a bridge…: It's just so easy, and being Web 2.0 is cool**

### Threats: User-Created Content
- **Property owner gives/leases space to user**
- **400 million+ pages change dramatically in real-time**
- **Content stripping is done but very difficult to enforce (JavaScript obfuscation deluxe)**
- **Easy to test for vulnerabilities, little disclosure: Can you say "Web-borne Worms"?**
- **Allow dynamic/graphic content (JavaScript, QuickTime, MOV)**
- **Trust within user networks**
- **Many-to-many communication platform**
- **User-created content: Hidden IFRAME with WMF, CSS auth page phishing, Wikipedia Trojan**
- **Social Networks (1 account: 70M views ~2M "friends")**
  - Interlinking of hundreds of millions of users
  - Communication platform, not just content
  - "Email is so year 2000"
  - More contacts = better site/success
  - One "friend" can infect millions through their network
  - One account compromise can be used to gain user trust
  - **"My network is bigger than yours"**
  - It's not just about entertainment. Business colleagues, networking with associates, recruiting, etc., are gaining popularity

### Sidebar: Unattended Installations (Can they happen?)
- **RSS: Meta-Feeds**
- **RSS: Pulling data every X seconds**

## Introduction to HoneyJax
- **HoneyPots, HoneyClients, and HoneyJax**
  - **HoneyPots**: Emulate OS and application behavior
  - **HoneyClients**: Emulate client application behavior
  - **HoneyJax**: Emulate user accounts, profiles, and web social networks. Can also emulate user behavior

### Reasons for Deploying HoneyJax
- **95% of all blog comments are spam (Source: Akismet)**
- **SPAM -> PORN -> Phishing -> Malicious Code**
- **One new weapon in the arsenal to help research Web 2.0 threats**
- **The threat landscape is changing, and research needs to evolve with it**
- **Can be used by web property owners**
- **Assist in:**
  - Tracking and trending attacks, attackers, predators
  - Escalation to abuse or security departments of property owners
  - Tracking common techniques
  - Collecting samples of binary code for detection/protection
  - Collecting URLs and script code for detection/protection
  - Monitoring outbreaks (more Web worms are coming)

### Types of HoneyJax
- **Passive HoneyJax**: Accounts in Web 2.0 space that do not lure users to add them to their network.
- **Active HoneyJax**: Accounts and bots in Web 2.0 space designed to join networks actively and solicit users to join theirs and reply to requests.
- **Passive-Aggressive HoneyJax**: Accounts designed to lure users to visit them through their characteristics (e.g., porn, baby boomers looking for friends, music bands, common interest groups, popular merchandise, contests).

### Reporting and Forensics
- **HoneyJax accounts should be set up to send email or SMS when new attempts to access the account are detected.**
- **Spiders/bots should connect to HoneyJax accounts and fingerprint content looking for changes. Ensure dynamic content changes by the host are accounted for. All changes should be kept and stored.**
- **Data should be mined for URLs that are dropped.**
- **Content should be analyzed from the mined data.**
- **Binaries should be sandboxed, etc.**
- **JavaScript should be run through a decoder and tested.**
- **HTML code should be tested for candidates to send to the sandbox.**
- **Report information to vendors, web property owners, etc.**

### The Law and Terms and Conditions
- **Check with your legal team before deploying honey technologies.**
- **Review Acceptable Use Policies/Terms and Conditions.**
- **Be wary of "commercial" software that allows you to manage profiles, add friends, etc.**

### Disclosure of Website Vulnerabilities
- **Website security must be taken more seriously.**
- **Massive problems with sites not being patched, configured incorrectly, allowing bad data, and serving as conduits for others.**
- **Cross-site scripting, open redirectors, allowing binary file posts, not scanning uploaded files, poor script filtering are all big problems.**
- **PHP BB, SQL, old web servers, and old OS are too common.**
- **Tracking issues:**
  - **No version numbers: Consider timestamps, examples, and hashes.**
  - **No reporting: Security departments must field reports on websites and do more testing/re-testing.**
  - **Change controls: Force security into the process.**
  - **No public credit: MS and Google started doing this; others should follow.**
  - **Property owners: Get to know who is in your backyard.**
  - **Consider a web owner area on OSVDB.**

### Grab Bag
- **What if there is a reference in one of my HoneyJax but the site is down?**
  - **Query search engines for link references and cached pages.**
  - **Check the age of the domain.**
  - **History of the site hosted malcode/phishing in the past.**
  - **Who registered it?**
  - **Where is the IP located?**
  - **Who are its neighbors?**

- **My boss told me that I need to make our website "Web 2.0." Should I?**
  - **Get the security team involved. Ensure they approve all design, implementation, and have a reproducible security testing process, mitigation techniques, and incident reporting and handling.**

### Conclusion
- **Don't run with scissors: Before deploying Web 2.0, be educated on the risks.**
- **If you must have user-created content: Filter, filter, filter, pen-test, pen-test, report, update.**
- **If you are a security researcher: Advanced JavaScript may not be as cool as ASM, but it's powerful. Live it, learn it, you don't have to love it.**
- **The good, the bad, and the ugly: There is a lot of good, productive, useful Web 2.0 functionality. But with functionality comes security risk. Security standards, policies, and practices must balance the scales with functionality. It's not too late!**

- **Contact: dhubbard@websense.com**