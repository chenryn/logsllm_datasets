### Isolated Trusted Applications on Low-End Embedded Processors

Various approaches have been proposed for isolating trusted applications on low-end embedded processors. However, these methods often rely on CPU architectures that are not commonly found in end-user devices. In contrast, SANCTUARY is based on the widely used ARM architecture.

### B. Secure Software Architectures

**Komodo** aims to enhance software isolation between TrustZone applications in the secure world by employing a hardened, formally verified microkernel as the secure-world OS [18]. Komodo replaces existing microkernels, such as MobiCore [7], and does not support legacy systems.

**Hypervisor-based approaches**, like vTZ [28], AppSec [46], Terra [21], InkTag [26], TrustVisor [37], and MiniBox [35], provide isolation through virtualization. These methods have several drawbacks:
1. Their TCB (Trusted Computing Base) includes a relatively large hypervisor.
2. They block the use of virtualization for non-security purposes.
3. They require additional hardware to protect against Direct Memory Access (DMA) attacks.
4. They negatively impact the performance of the OS.

SANCTUARY, on the other hand, does not rely on virtualization and can be used in conjunction with a hypervisor. Cho et al. [13] attempt to mitigate the impact on the OS by activating the hypervisor on-demand, ensuring that the OS is only affected when sensitive code is executed. In SANCTUARY, the performance of the OS remains unaffected even when sensitive code runs in parallel, as no hypervisor is running underneath the normal-world OS.

**Other approaches** aim to minimize the normal-world TCB by protecting the non-secure kernel. For example, TZ-RKP [10] and SPROBES [22] both protect the LOS (Linux Operating System) kernel by instrumenting critical functionality to trap into the secure world, where the call is filtered. However, as demonstrated by the Towelroot exploit [27], such mechanisms can be circumvented. KENALI [48] uses data-flow integrity to enforce policies of the LOS kernel’s access control system, while SKEE [9] aims to detect attacks against the kernel by providing an isolated execution environment at the kernel’s privilege level, running a kernel monitor. Unlike these, SANCTUARY does not require the kernel to be trusted to guarantee isolated execution and also protects the LOS kernel from potentially malicious SAs (Secure Applications).

**Flicker [38] and TrustICE [51]** provide temporal isolation, meaning they cannot isolate systems where TEEs (Trusted Execution Environments) run in parallel with untrusted software. This limits their applicability on today's multi-core systems. With temporal isolation, the entire system must be suspended, including the hibernation of the LOS and all applications. The TEE then executes exclusively on the system, and only after it has terminated, the normal system can be restored and continue execution. Flicker uses Intel’s Trusted Execution Technology (TXT) to reset the system to a trusted execution state at runtime. TrustICE is conceptually similar but uses the secure world to reset the normal world to a trusted state. In TrustICE, TA (Trusted Application) binaries are stored in TrustZone memory. When a TEE starts, the LOS is suspended, and the binaries are copied to normal-world memory for execution. After the TEE finishes, the LOS is restored by the secure world. During execution, TrustICE provides only one-way isolation and operates in kernel mode, allowing malicious TAs to manipulate normal-world software, such as compromising the LOS. 

In contrast, SANCTUARY provides spatial isolation, enabling the parallel execution of untrusted code with one or multiple TEE instances. Furthermore, SANCTUARY offers hardware-enforced two-way isolation and restricts SAs to user-mode execution, thereby protecting systems from malicious SAs, which is crucial for practical deployment.

### IX. Conclusion

We presented SANCTUARY, a novel security architecture that extends the TrustZone software ecosystem with user-space enclaves. SANCTUARY provides hardware-enforced two-way isolation, eliminating the need to trust or vet the code of SAs, as malicious SAs cannot have more power than normal user-space applications.

SANCTUARY leverages bus master identity filtering introduced in ARM’s latest memory controller design, allowing the parallel isolation of individual CPU cores for executing security-sensitive code without negatively affecting the user experience. Our performance evaluations for our proof-of-concept implementation show low latencies for typical use cases, making SANCTUARY highly practical.

### Acknowledgments

This work was co-funded by the DFG (projects P3 and S2 within CRC 1119 CROSSING, and HWSec), the German Federal Ministry of Education and Research (BMBF), the Hessen State Ministry for Higher Education, Research, and the Arts (HMWK) within CRISP, and the Intel Collaborative Research Institute for Collaborative Autonomous & Resilient Systems (ICRI-CARS).

### References

[1] "OP-TEE," https://www.op-tee.org/.

[2] I. Anati, S. Gueron, S. P. Johnson, and V. R. Scarlata, “Innovative Technology for CPU Based Attestation and Sealing,” in Workshop on Hardware and Architectural Support for Security and Privacy (HASP). ACM, 2013.

[3] ARM Limited, “ARM Cortex-A Series Programmer’s Guide for ARMv8-A,” http://infocenter.arm.com/help/topic/com.arm.doc.den0024a/DEN0024A_v8_architecture_PG.pdf.

[4] ——, “GlobalPlatform TEE & ARM TrustZone technology: Building security into your platform,” https://pdfs.semanticscholar.org/presentation/7b94/63d58a2d4ec9724c5933419be6f08754ce86.pdf.

[5] ——, “Security technology: building a secure system using TrustZone technology,” http://infocenter.arm.com/help/topic/com.arm.doc.prd29-genc-009492c/PRD29-GENC-009492C_trustzone_security_whitepaper.pdf, 2008.

[6] ——, “CoreLink TrustZone Address Space Controller TZC-380,” http://infocenter.arm.com/help/topic/com.arm.doc.ddi0431c/DDI0431C_tzasc_tzc380_r0p1_trm.pdf, 2010.

[7] ——, “Giesecke & Devrient and ARM Protect Mobile Applications From Data Theft,” https://www.arm.com/about/newsroom/26718.php, 2010.

[8] ——, “ARM CoreLink TZC-400 TrustZone Address Space Controller,” http://infocenter.arm.com/help/topic/com.arm.doc.ddi0504c/DDI0504C_tzc400_r0p1_trm.pdf, 2013.

[9] A. Azab, K. Swidowski, R. Bhutkar, J. Ma, W. Shen, R. Wang, and P. Ning, “Skee: A lightweight secure kernel-level execution environment for ARM,” in 23rd Annual Network and Distributed System Security Symposium, ser. NDSS, 2016.

[10] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh, J. Ma, and W. Shen, “Hypervision across worlds: Real-time kernel protection from the ARM TrustZone secure world,” in ACM SIGSAC Conference on Computer and Communications Security, ser. CCS, 2014.

[11] S. S. Bhat, “Interaction of suspend code (s3) with the CPU hotplug infrastructure,” https://www.kernel.org/doc/Documentation/power/suspend-and-cpuhotplug.txt, 2014.

[35] Y. Li, J. McCune, J. Newsome, A. Perrig, B. Baker, and W. Drewry, “Minibox: A two-way sandbox for x86 native code,” in 2014 USENIX Annual Technical Conference (USENIX ATC 14), 2014.

[36] J. M., “Intel Software Guard Extensions Remote Attestation End-to-End Example,” https://software.intel.com/en-us/articles/intel-software-guard-extensions-remote-attestation-end-to-end-example, 2018.

[37] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig, “Trustvisor: Efficient TCB reduction and attestation,” in Security and Privacy (SP), 2010 IEEE Symposium on, 2010.

[38] J. M. McCune, B. J. Parno, A. Perrig, M. K. Reiter, and H. Isozaki, “Flicker: An execution infrastructure for TCB minimization,” in ACM SIGOPS Operating Systems Review, 2008.

[39] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shaﬁ, V. Shanbhogue, and U. R. Savagaonkar, “Innovative Instructions and Software Model for Isolated Execution,” in Workshop on Hardware and Architectural Support for Security and Privacy (HASP). ACM, 2013.

[40] M. Meeker, “Internet trends 2015,” Glokalde, vol. 1, no. 3, 2015.

[41] J. Noorman, P. Agten, W. Daniels, R. Strackx, A. Van Herrewege, C. Huygens, B. Preneel, I. Verbauwhede, and F. Piessens, “Sancus: Low-cost trustworthy extensible networked devices with a zero-software trusted computing base,” in 22nd USENIX Security symposium, 2013.

[42] J. Noorman, J. V. Bulck, J. T. Mühlberg, F. Piessens, P. Maene, B. Preneel, I. Verbauwhede, J. Götzfried, T. Müller, and F. Freiling, “Sancus 2.0: A low-cost security architecture for IoT Devices,” ACM Transactions on Privacy and Security (TOPS), vol. 20, no. 3, p. 7, 2017.

[43] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks and countermeasures: the case of AES,” in RSA Conference, 2006.

[44] Project Zero, “Lifting the hyper visor,” https://googleprojectzero.blogspot.de/2017/02/lifting-hyper-visor-bypassing-samsungs.html, 2017.

[45] ——, “Trust issues: Exploiting trustzone tees,” https://googleprojectzero.blogspot.com/2017/07/trust-issues-exploiting-trustzone-tees.html, 2017.

[46] J. Ren, Y. Qi, Y. Dai, X. Wang, and Y. Shi, “Appsec: A safe execution environment for security-sensitive applications,” in Proceedings of the 11th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments, ser. VEE, 2015.

[47] D. Shen, “Exploiting trustzone on android,” https://www.blackhat.com/docs/us-15/materials/us-15-Shen-Attacking-Your-Trusted-Core-Exploiting-Trustzone-On-Android-wp.pdf, 2015.

[48] C. Song, B. Lee, K. Lu, W. R. Harris, T. Kim, and W. Lee, “Enforcing kernel security invariants with data flow integrity,” in 23rd Annual Network and Distributed System Security Symposium, ser. NDSS, 2016.

[49] N. Stephens, “Behind the pwn of a trustzone,” https://www.slideshare.net/GeekPwnKeen/nick-stephenshow-does-someone-unlock-your-phone-with-nose, 2016.

[50] R. Strackx, F. Piessens, and B. Preneel, “Efficient isolation of trusted subsystems in embedded systems,” in Security and Privacy in Communication Networks, 2010.

[51] H. Sun, K. Sun, Y. Wang, J. Jing, and H. Wang, “Trustice: Hardware-assisted isolated computing environments on mobile devices,” in Proceedings of the 2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, 2015.

[52] Tencent, “Defeating samsung knox with zero privilege,” https://www.blackhat.com/docs/us-17/thursday/us-17-Shen-Defeating-Samsung-KNOX-With-Zero-Privilege-wp.pdf, 2017.

[53] Y. Yarom and K. Falkner, “Flush+reload: A high resolution, low noise, L3 cache side-channel attack.” in USENIX Security Symposium, 2014.

[12] K. Braden, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen, and A.-R. Sadeghi, “Leakage-resilient layout randomization for mobile devices,” in Annual Network and Distributed System Security Symposium, ser. NDSS, 2016.

[13] Y. Cho, J. Shin, D. Kwon, M. Ham, Y. Kim, and Y. Paek, “Hardware-assisted on-demand hypervisor activation for efficient security-critical code execution on mobile devices,” in USENIX Annual Technical Conference (USENIX ATC), 2016.

[14] V. Costan, I. A. Lebedev, and S. Devadas, “Sanctum: Minimal Hardware Extensions for Strong Software Isolation.” in USENIX Security Symposium, 2016.

[15] Dan Rosenberg, “Reflections on trusting trustzone,” https://www.blackhat.com/docs/us-14/materials/us-14-Rosenberg-Reflections-on-Trusting-TrustZone.pdf, 2014.

[16] L. Davi, A. Dmitrienko, S. Nürnberger, and A. Sadeghi, “Gadge me if you can: secure and efficient ad-hoc instruction-level randomization for x86 and ARM,” in 8th ACM Symposium on Information, Computer and Communications Security, ser. ASIACCS, 2013.

[17] J.-E. Ekberg, K. Kostiainen, and N. Asokan, “The untapped potential of trusted execution environments on mobile devices,” IEEE Security & Privacy, 2014.

[18] A. Ferraiuolo, A. Baumann, C. Hawblitzel, and B. Parno, “Komodo: Using verification to disentangle secure-enclave hardware from software,” in Proceedings of the 26th Symposium on Operating Systems Principles, ser. SOSP, 2017.

[19] Gal Beniamini, “Qsee privilege escalation vulnerability,” http://bits-please.blogspot.de/2015/08/full-trustzone-exploit-for-msm8974.html, 2015.

[20] ——, “Qsee privilege escalation vulnerability,” http://bits-please.blogspot.com/2016/05/qsee-privilege-escalation-vulnerability.html, 2016.

[21] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh, “Terra: A virtual machine-based platform for trusted computing,” in Proceedings of the Nineteenth ACM Symposium on Operating Systems Principles, ser. SOSP, 2003.

[22] X. Ge, H. Vijayakumar, and T. Jaeger, “SPROBES: Enforcing kernel code integrity on the TrustZone architecture,” in Mobile Security Technologies, ser. MoST, 2014.

[23] Global Platform, “TEE management framework (version 1.0),” https://www.globalplatform.org/specificationform.asp?fid=7866, 2016.

[24] Google, “Zircon micro kernel,” https://fuchsia.googlesource.com/zircon.

[25] M. Hoekstra, R. Lal, P. Pappachan, V. Phegade, and J. Del Cuvillo, “Using Innovative Instructions to Create Trustworthy Software Solutions,” in Workshop on Hardware and Architectural Support for Security and Privacy (HASP). ACM, 2013.

[26] O. S. Hofmann, S. Kim, A. M. Dunn, M. Z. Lee, and E. Witchel, “Inktag: Secure applications on an untrusted operating system,” in Proceedings of the Eighteenth International Conference on Architectural Support for Programming Languages and Operating Systems, ser. ASPLOS, 2013.

[27] G. Hotz, “Towelroot android root exploit,” https://towelroot.com/, 2014.

[28] Z. Hua, J. Gu, Y. Xia, H. Chen, B. Zang, and H. Guan, “vTZ: Virtualizing ARM TrustZone,” in 26th USENIX Security Symposium (USENIX Security 17), 2017.

[29] W. Huang, V. Rudchenko, H. Shuang, Z. Huang, and D. Lie, “Pearl-TEE: Supporting Untrusted Applications in TrustZone,” 2018.

[30] IETF, “TOTP: Time-based One-Time Password Algorithm - RFC6238,” https://tools.ietf.org/html/rfc6238, 2011.

[31] Intel, “Intel Software Guard Extensions Programming Reference,” https://software.intel.com/sites/default/files/managed/48/88/329298-002.pdf, 2014.

[32] C. Josh Thomas, Nathan Keltner, “Reflections on trusting trustzone,” https://pacsec.jp/psj14/PSJ2014_Josh_PacSec2014-v1.pdf, 2014.

[33] P. Kocher, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom, “Spectre attacks: Exploiting speculative execution,” ArXiv e-prints.

[34] P. Koeberl, S. Schulz, A.-R. Sadeghi, and V. Varadharajan, “Trustlite: A security architecture for tiny embedded devices,” in Proceedings of the 15th International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom), 2016.