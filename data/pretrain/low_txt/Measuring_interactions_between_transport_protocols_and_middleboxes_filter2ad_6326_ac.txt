### Handling IP Options in TCP SYN Packets

**Figure 1: Handling IP Options in TCP SYN Packets**

Figure 1 illustrates the behavior of TCP connections when different IP options are included in the associated SYN packets. For each attempted connection, there are three possible outcomes:
1. No connection established.
2. Connection established with the IP option ignored.
3. IP option accepted.

As shown in Figure 1, in many cases, no connection was established when the Record Route or Timestamp options were included in the SYN packet. When IP Option X is included in the SYN segment, the connection failed to establish for over 70% of the tested web servers. This indicates significant challenges for the deployment of new IP options in the Internet.

### Behavior of IP Options in Established Connections

Most IP options are typically included in the first packet (e.g., the TCP SYN packet) in the communication between end hosts. We conducted an additional test to assess the behavior when IP Option X is placed in data packets in the middle of an established connection. For each established connection, TBIT classifies the outcome as either "success" or "broken connection." A "success" indicates that the server successfully delivered its data regardless of the IP option insertion. A "broken connection" indicates that the insertion of the IP option forced the connection to be idle for at least 12 seconds, which we define as a "broken" connection.

We performed two sets of tests: one with and one without the insertion of Option X. The connection failure rate across both sets of tests was roughly 3%. In the tests without IP options, nearly 6% of the connections were "broken" for some reason. When inserting IP Option X into the middle of the transfer, 44% of the connections were broken, indicating a significant issue with using IP options mid-connection.

### TCP Options

Next, we examine potential issues when TCP options are employed. TCP options are more commonly used than IP options. For example, TCP uses the timestamp option [14] for several purposes, including taking round-trip time measurements more frequently than once per round-trip time, for the Protection Against Wrapped Sequences [14] algorithm, and for detecting spurious timeouts [18].

However, middleboxes along the network path can interfere with the use of TCP options, often in an attempt to thwart attackers trying to fingerprint hosts. Network mapping tools like NMAP (Network Mapper) use information from TCP options to gather host information, a process known as fingerprinting. Countermeasures, such as fingerprint scrubbers [29], attempt to block fingerprinting by inspecting and minimally manipulating the traffic stream. One strategy used by fingerprint scrubbers is to reorder TCP options in the TCP header, placing any unknown options after all other options.

The TCP options test checks whether sites reject connections negotiating specific or unknown TCP options, or drop packets encountered in the middle of the stream that contain those options. Our tests indicate a connection failure rate of about 0.2% in all scenarios. Option Y is ignored in the remainder of the connections. The timestamp option is ignored by approximately 15% of the servers, but the connection is otherwise fine. The reason for ignoring the timestamp option is not visible to TBIT, but it could be due to a middlebox stripping or mangling the option or the web server not supporting timestamps.

Next, we assessed the use of options in the middle of a TCP connection by establishing a connection without TCP options and then using the Timestamp option or Option Y on a data packet in the middle of the connection. The connection failure rate for both options was roughly 3%, indicating that sending unknown options midstream is not problematic for most web servers.

### Additional Results

In addition to the measurements presented in this paper, we executed additional tests to detect and quantify the presence of various algorithms and parameters in the web server's TCP implementations [21]. Here, we summarize several of the results to provide researchers with guidance for constructing models for their simulation and emulation studies. The tests that produce these results are similar to those outlined in [23].

- **NewReno Loss Recovery**: When not using selective acknowledgments (SACK) [19] (e.g., because of non-SACK-capable receivers), roughly 75% of the web servers we classified used NewReno loss recovery [13]. This suggests that studies involving only the Reno TCP variant should be discouraged.
- **SACK Support**: Nearly 70% of web servers advertise themselves as SACK capable. Of the servers that advertise SACK support, over 95% make some use of the SACK information sent by the web client.
- **SACK Block Generation**: More than 95% of the web servers that advertise SACK support correctly generate SACK blocks when data sent by the client is missing.
- **Initial Congestion Window**: RFC 3390 [5] allows a TCP to use an initial congestion window of 1â€“4 segments, depending on their size. We found that 42% of the web servers in our dataset used an initial congestion window of 1 segment, while 54% used an initial window of 2 segments. Less than 3% of the web servers used 3 or 4 segment initial congestion windows. We noted initial congestion window values as large as 129 segments (in small proportions of the servers).

Additionally, we have results regarding TCP's use of Limited Transmit, Appropriate Byte Counting, Congestion Window Validation, Window Scale Option, Minimum RTO, Minimum MSS, and the Deployment of D-SACK (Duplicate SACK). We also have measurement strategies for detecting middleboxes that perform TTL-rewriting and for detecting the effects of reordering on transport protocols. Another component of our work uses packet traces from near a set of web servers to assess the client-side deployment of various end-host algorithms and protocol mechanisms.

### Conclusions and Future Work

The contribution of this work is to illustrate the ways that the performance of protocol mechanisms in the Internet differs from theory. The insights gathered from our measurements involving the interactions between TCP and middleboxes along the network path are summarized in Table 5.

There are many important TCP behaviors that we have not examined in our tests, and new TCP mechanisms are continually being proposed, standardized, and deployed (e.g., High-Speed TCP [12]). Assessing their deployment, characteristics, and behaviors in the context of the evolving Internet architecture is a useful area for future work.

Another extension of this work is exploring the behavior of TCP in alternate applications (e.g., peer-to-peer systems, email, web caching, etc.). An interesting area for future investigation is using TBIT-like tools for performance evaluation, such as comparing the performance of servers using various initial congestion window values or servers with and without SACK-based loss recovery. Developing techniques for conducting this kind of performance comparison in a solid and meaningful way (and detecting when such a comparison is not meaningful) is a rich area for future investigation. Furthermore, performing tests from multiple vantage points would be an interesting extension for detecting differences in behavior among multiple paths, which may point to middleboxes in some paths.

As new transport protocols such as SCTP and DCCP begin to be deployed, another area for future work will be to construct tools to monitor the behavior, deployment, and characteristics of these protocols in the Internet.

While we examined some ways that middleboxes interfere with TCP communications, a key open question is assessing how middleboxes affect the performance of transport protocols or applications. One middlebox that clearly affects TCP performance is the Performance Enhancing Proxies (PEPs) [7] that break single TCP connections into two connections, potentially changing end-to-end behavior. While [4] presents some results in this general area, additional active tests may be useful to investigate this further.

### Interactions with Routers or Middleboxes

| Section | Behavior | Possible Interactions with Routers or Middleboxes |
|---------|----------|--------------------------------------------------|
| 4.1     | ECN      | Advertising ECN prevents connection setup for a small (and diminishing) set of hosts. |
| 4.2     | PMTUD    | Less than half of the web servers successfully complete Path MTU Discovery. PMTUD is attempted but fails for one-sixth of the web servers. |
| 4.3     | IP Options | For roughly one-third of the web servers, no connection is established when the client includes an IP Record Route or Timestamp option in the TCP SYN packet. For most servers, no connection is established when the client includes an unknown IP Option. |
| 4.4     | TCP Options | The use of TCP options does not interfere with connection establishment. Few problems were detected with known and unknown TCP options included in data packets in mid-stream. |

Finally, a completely different kind of test that could benefit from the active probing approach outlined in this paper would be one to detect the presence or absence of Active Queue Management mechanisms at the congested link along a path. To some extent, this can be done with passive tests, by looking at the pattern of round-trip times before and after a packet drop. However, active tests may be much more powerful, by allowing the researcher to send short runs of back-to-back packets, as well as potentially problematic, in attempting to induce transient congestion in the network.

### Acknowledgments

Orion Hodson assisted with our TBIT measurements. Sourabh Ladha and the anonymous reviewers gave us detailed and useful feedback. This material is based in part upon work supported by the National Science Foundation under Grant Nos. 0205519 and 0230921. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.

### References

[1] NLANR Web Caching project. http://www.ircache.net/.

[2] PMTU Black Hole Detection Algorithm Change for Windows NT 3.51. Microsoft Knowledge Base Article - 136970.

[3] Mark Allman. A Web Serverâ€™s View of the Transport Layer. Computer Communications Review, 30(5):10â€“20, October 2000.

[4] Mark Allman. On the Performance of Middleboxes. In ACM SIGCOMM/USENIX Internet Measurement Conference, pages 307â€“312, October 2003.

[5] Mark Allman, Sally Floyd, and Craig Partridge. Increasing TCPâ€™s Initial Window, October 2002. RFC 3390.

[6] Mark Allman and Vern Paxson. On Estimating End-to-End Network Path Properties. pages 229â€“240, 1999.

[7] John Border, Markku Kojo, Jim Griner, Gabriel Montenegro, and Zach Shelby. Performance Enhancing Proxies Intended to Mitigate Link-Related Degradations, June 2001. RFC 3135.

[8] Douglas E. Comer and John C. Lin. Probing TCP Implementations. In USENIX Summer 1994 Conference, 1994.

[9] Wesley Eddy, Shawn Ostermann, and Mark Allman. New Techniques for Making Transport Protocols Robust to Corruption-Based Loss. January 2004. Under submission.

[10] S. Floyd. Inappropriate TCP Resets Considered Harmful, 2002. RFC 3360.

[11] Sally Floyd. Tools for Bandwidth Estimation. Web page, URL â€˜http://www.icir.org/models/tools.htmlâ€™.

[12] Sally Floyd. HighSpeed TCP for Large Congestion Windows, December 2003. RFC 3649.

[13] Sally Floyd, Tom Henderson, and Andrei Gurtov. The NewReno Modification to TCPâ€™s Fast Recovery Algorithm, April 2004. RFC 3782.

[14] V. Jacobson, R. Barden, and D. Borman. TCP Extensions for High Performance, May 1992. RFC 1323.

[15] Amit Jain and Sally Floyd. Quick-Start for TCP and IP, 2002. Internet-Draft draft-amit-quick-start-02.txt, expired, URL: http://www.icir.org/floyd/papers/draft-amit-quick-start-02.txt.

[16] Christopher Kent and Jeffrey Mogul. Fragmentation Considered Harmful. In ACM SIGCOMM, October 1987.

[17] Kevin Lahey. TCP Problems with Path MTU Discovery, September 2000. RFC 2923.

[18] R. Ludwig and M. Meyer. The Eifel Detection Algorithm for TCP, 2003. RFC 3522.

[19] Matt Mathis, Jamshid Mahdavi, Sally Floyd, and Allyn Romanow. TCP Selective Acknowledgement Options, October 1996. RFC 2018.

[20] Jack McCann, Steve Deering, and Jeffrey C. Mogul. Path MTU Discovery for IP version 6, August 1996. RFC 1981.

[21] Alberto Medina, Mark Allman, and Sally Floyd. Measuring the Evolution of Transport Protocols in the Internet, 2004. URL http://www.icir.org/tbit/.

[22] Jeffrey C. Mogul and Steve Deering. Path MTU Discovery, November 1990. RFC 1191.

[23] Jitendra Padhye and Sally Floyd. Identifying the TCP Behavior of Web Servers. In ACM SIGCOMM, August 2001.

[24] Vern Paxson. Automated Packet Trace Analysis of TCP Implementations. In ACM SIGCOMM, September 1997.

[25] Vern Paxson. End-to-End Internet Packet Dynamics. In ACM SIGCOMM, September 1997.

[26] Jon Postel. Transmission Control Protocol, September 1981. RFC 793.

[27] K.K. Ramakrishnan, Sally Floyd, and David Black. The Addition of Explicit Congestion Notification (ECN) to IP, September 2001. RFC 3168.

[28] J.H. Saltzer, D.P. Reed, and David Clark. End-to-End Arguments in System Design. In Proceedings of the Second International Conference on Distributed Computing Systems, pages 509â€“512, August 1981.

[29] Matthew Smart, G. Robert Malan, and Farnam Jahanian. Defeating TCP/IP Stack Fingerprinting. In 9th USENIX Security Symposium, pages 229â€“240, 2000.