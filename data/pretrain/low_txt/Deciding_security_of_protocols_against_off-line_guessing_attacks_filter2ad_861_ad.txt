### Rules and Constraints

We consider rules of the form \( \forall \beta. M \vdash t \) that are intuitively subsumed by existing rules \( \forall \beta_i. M_i \vdash t_i \) and existing constraints \( X_j \vdash? x_j \), provided that a new equation is added to \( \Psi \). The last two technical conditions in the premises ensure the completeness of the Discard rule when it is applied eagerly.

### Control on Transformation Rules

To make precise the control on transformation rules, we specify which sequences of rules need to be considered by the algorithm. For simplicity, we assume that the unification procedure tries to match its second argument against the first one whenever possible. In other words, \( \text{mgu}(t, l) = \sigma \) whenever \( \text{var}(t) \cap \text{var}(l) = \emptyset \) and \( t = l\sigma \). The choice of arity \( a_m + 1 \) rather than \( a_m \) for Context and Relate is only to ensure that the Coalesce rule substitutes these fresh second-order variables in priority.

Let \( \Sigma \) be an intruder constraint system. A sequence of transformations (derivation) \( \Sigma \Rightarrow^* \Sigma' \) by the rules of Table 2 is standard if it has the following structure:

- If \( \Sigma_1 \) occurs before \( \Sigma_2 \) in the derivation, with \( \Sigma_i = \Phi_i; \Psi_i; C_i; \sigma_i; N_i \), and both constraint systems are pre-solved and saturated for the last four rules (Discard, Clean-1, Clean-2, and Generalize), then \( \Phi_1; \Psi_1; C_1; \sigma_1 \neq \Phi_2; \Psi_2; C_2; \sigma_2 \).
- Rules Narrowing-1, Narrowing-2, Constrain, Context, and Relate are always followed by a maximal sequence of Project, Imitate, and Coalesce. If a pre-solved form is reached, then the sequence continues with maximal sequences of Discard, Clean-1, Clean-2, and Generalize, in this order.

### Main Theorem

**Theorem 2.** Standard derivations form a sound, complete, effective, and finitely branching (up to renaming) transformation system. Moreover, there exists no infinite standard derivation.

We deduce the decision result of Theorem 1 using König's Lemma and Proposition 1. The proofs of soundness and completeness follow the same structure as previously. For rules Narrowing-1, Narrowing-2, and Context, the fact that \( r\sigma \) may be added to \( N \) is justified by the following property of subterm rewriting systems: if \( f(t_1, \ldots, t_n) = l\mu \) for some rewriting rule \( l \rightarrow r \in R \), and all the \( t_1, \ldots, t_n \) are \( R \)-reduced, then \( r\mu \) is reduced. This property, together with the convergence of \( R \), implies the completeness of standard derivations.

### Proof of Termination

Due to the constraints on narrowing positions, the rules Narrowing-1 and Narrowing-2 terminate independently from the other rules. Similarly, the rule Constrain, as well as the last four rules of Table 2, also terminate. Let \( \Sigma_0 \Rightarrow^* \Sigma \) be a standard derivation such that \( \Sigma \) is pre-solved and saturated for Discard, Clean-1, Clean-2, and Generalize. Let \( e\sigma \) be the composition of all the substitutions applied during the derivation. We prove that each deducible term \( t \) in \( \Sigma \) is of the form \( t_0 e\sigma \), where \( t_0 \) is a subterm of a term \( t_0 \) intuitively the narrowed version of a deducible term in \( \Sigma_0 \), now in \( N \). (More precisely, \( t_0 \) is the value corresponding to an initial term in \( \Phi_0 \) after it was added to \( N \), as the system was pre-solved again for the first time.) Thanks to the Discard rule, the number of rules in \( \Phi \) exploitable by Context and Relate is bounded, and we deduce the termination for the whole set of rules.

### Conclusion

In this work, we described a class of second-order E-unification problems and provided a terminating procedure to decide their satisfiability and equivalence, in the case where the equational theory \( E \) is presented by a convergent subterm rewriting system. This decision result is interesting in itself as it is not implied by previous work in the area, e.g., [16, 21, 17].

A major application, for which these constraint systems were intended, is the security of cryptographic protocols against offline guessing attacks. No previous decision results existed for such properties, in any case, not using the recent general definition of Corin et al. [10]. Using our main result, we recovered the decidability of trace properties and proved the decidability of security against offline guessing attacks for a bounded number of sessions.

As future work, we foresee applying our notion of equivalence between symbolic traces to other security properties, such as strong secrecy and resistance to online guessing attacks. On the long term, an interesting avenue would be to extend our result to equational theories involving algebraic properties such as associativity-commutativity, XOR, or homomorphism.

### Acknowledgments

We are very grateful to Véronique Cortier, Florent Jacquemard, and Stéphanie Delaune for helpful discussions, and to Jean Goubault-Larrecq, Steve Kremer, and the anonymous referees for useful comments. This work was partially supported by the RNTL project PROUVÉ and the ACI-SI Rossignol.

### References

[1] M. Abadi and V. Cortier. Deciding knowledge in security protocols under equational theories. In Proc. 31st International Colloquium on Automata, Languages and Programming (ICALP’04), volume 3142 of LNCS, pages 46–58, 2004.
[2] M. Abadi and V. Cortier. Deciding knowledge in security protocols under (many more) equational theories. In Proc. 18th IEEE Computer Security Foundations Workshop (CSFW’05), pages 62–76, 2005.
[3] M. Abadi and C. Fournet. Mobile values, new names, and secure communications. In Proc. 28th Annual ACM Symposium on Principles of Programming Languages (POPL’01), pages 104–115, 2001.
[4] M. Baudet. Deciding security of protocols against offline guessing attacks (extended version). Technical report, LSV, 2005. Available at http://www.lsv.ens-cachan.fr/~baudet.
[5] B. Blanchet. Personal web page. http://www.di.ens.fr/~blanchet.
[6] B. Blanchet. Automatic proof of strong secrecy for security protocols. In Proc. 25th IEEE Symposium on Security and Privacy (SSP’04), pages 86–100, 2004.
[7] B. Blanchet, M. Abadi, and C. Fournet. Automated verification of selected equivalences for security protocols. In Proc. 20th IEEE Symposium on Logic in Computer Science (LICS’05), pages 331–340, 2005.
[8] Y. Chevalier, R. Küsters, M. Rusinowitch, and M. Turuani. Deciding the security of protocols with Diffie-Hellman exponentiation and products in exponents. In Proc. 23rd Conference on Foundations of Software Technology and Theoretical Computer Science (FST–TCS’03), volume 2914 of LNCS, pages 124–135, 2003.
[9] E. Cohen. Proving protocols safe from guessing. In Proc. Foundations of Computer Security (FCS’02), pages 85–92, 2002.
[10] R. Corin, J. Doumen, and S. Etalle. Analysing password protocol security against offline dictionary attacks. In Proc. 2nd International Workshop on Security Issues with Petri Nets and other Computational Models (WISP’04), volume 121 of ENTCS, pages 47–63, 2005.
[11] R. Corin, S. Malladi, J. Alves-Foss, and S. Etalle. Guess what? Here is a new tool that finds some new guessing attacks. In Proc. Workshop on Issues in the Theory of Security (WITS’03), pages 62–71, 2003.
[12] S. Delaune and F. Jacquemard. A decision procedure for the verification of security protocols with explicit destructors. In Proc. 11th ACM Conference on Computer and Communications Security (CCS’04), pages 278–287, 2004.
[13] S. Delaune and F. Jacquemard. A theory of dictionary attacks and its complexity. In Proc. 17th IEEE Computer Security Foundations Workshop (CSFW’04), pages 2–15, 2004.
[14] D. Dolev and A. C. Yao. On the security of public key protocols. IEEE Transactions on Information Theory, IT-29(12):198–208, 1983.
[15] L. Gong, M. A. Lomas, R. M. Needham, and J. H. Saltzer. Protecting poorly chosen secrets from guessing attacks. IEEE Journal on Selected Areas in Communications, 11(5):648–656, 1993.
[16] J.-P. Jouannaud and C. Kirchner. Solving equations in abstract algebras: A rule-based survey of unification. In J.-L. Lassez and G. Plotkin, editors, Computational Logic: Essays in Honor of Alan Robinson, pages 257–321. MIT Press, 1991.
[17] J. Levy and M. Veanes. On the undecidability of second-order unification. Information and Computation, 159(1-2):125–150, 2000.
[18] G. Lowe. Analysing protocols subject to guessing attacks. Journal of Computer Security, 12(1):83–98, 2004.
[19] J. K. Millen and V. Shmatikov. Constraint solving for bounded-process cryptographic protocol analysis. In Proc. 8th ACM Conference on Computer and Communications Security (CCS’01), pages 166–175, 2001.
[20] J. K. Millen and V. Shmatikov. Symbolic protocol analysis with products and Diffie-Hellman exponentiation. In Proc. 16th IEEE Computer Security Foundations Workshop (CSFW’03), pages 47–61, 2003.
[21] W. Snyder and J. H. Gallier. Higher-order unification revisited. Journal of Symbolic Computations, 8:101–140, 1989.

### Transformation Rules for Convergent Rewriting Systems

**Project**
- \( \mu = \text{mgu}(t, f(t_1, \ldots, t_n)) \)
- \( \rho \) is a fresh renaming such that \( \text{dom}(\rho) \subseteq \text{var}(M) \) and \( \forall Y \in \text{var}(M\rho), \text{ar}(Y) \leq \text{ar}(X) \)
- \( X \notin \text{var}(M) \)
- \( \forall w_i \in \text{par}(M), i \leq \text{ar}(X) \)
- \( \Phi \cup \{\forall \beta. M \vdash t\}; \Psi; C \vdash {X \vdash? f(t_1, \ldots, t_n)}; \sigma \Rightarrow (\Phi \cup \{\forall \beta. M \vdash t\}; \Psi; C; \sigma)\{X \mapsto M\rho\}\rho\mu \)

**Imitate**
- \( f \in F_{\text{pub}} \)
- \( X_1, \ldots, X_n \) are fresh second-order variables with \( \text{ar}(X_i) = \text{ar}(X) \)
- \( \Phi; \Psi; C \vdash {X \vdash? f(t_1, \ldots, t_n)}; \sigma \Rightarrow (\Phi; \Psi; C \cup \{X_1 \vdash? t_1, \ldots, X_n \vdash? t_n\}; \sigma)\{X \mapsto f(X_1, \ldots, X_n)\} \)

**Coalesce**
- \( \Phi; \Psi; C \vdash {X_1 \vdash? x, X_2 \vdash? x}; \sigma \Rightarrow (\Phi; \Psi; C \cup \{X_1 \vdash? x\}; \sigma)\{X_2 \mapsto X_1\} \)
- \( \text{ar}(X_1) \leq \text{ar}(X_2) \)

**Narrowing-1**
- \( l \rightarrow r \) is a fresh rule from \( R \)
- \( t|p \notin X \)
- \( \mu = \text{mgu}(t|p, l) \)
- \( \Phi \vdash \{\forall \beta. M \vdash t\}; \Psi; C; \sigma \Rightarrow (\Phi \cup \{\forall \beta. M \vdash t[p := r]\}; \Psi; C; \sigma)\mu \)

**Narrowing-2**
- \( l \rightarrow r \) is a fresh rule from \( R \)
- \( \mu = \text{mgu}((t_1 =?_R t_2)|p, l) \)
- \( \Phi; \Psi; C \vdash {t_1 =?_R t_2}; \sigma \Rightarrow (\Phi; \Psi; C \vdash {(t_1 =?_R t_2)[p := r]}; \sigma)\mu \)
- \( (t_1 =?_R t_2)|p \notin X \)

**Constrain**
- \( \mu = \text{mgu}(t_1, t_2) \)
- \( \Phi; \Psi; C \vdash {t_1 =?_R t_2}; \sigma \Rightarrow (\Phi; \Psi; C; \sigma)\mu \)

**Context**
- \( l \rightarrow r \) is a fresh rule from \( R \)
- \( \Phi; \Psi; C; \sigma \Rightarrow \Phi \cup \{X \vdash r\}; \Psi; C \cup \{X \vdash? l\}; \sigma \)
- \( X \) is a fresh second-order variable of arity \( a_m \)

**Relate**
- \( \Phi \cup \{\forall \beta. M \vdash t\}; \Psi; C; \sigma \Rightarrow \Phi \cup \{\forall \beta. M \vdash t\}; \Psi \cup \{\forall \beta. X ./ M\}; C \cup \{X \vdash? t\}; \sigma \)
- \( X \) is a fresh second-order variable of arity \( a_m \)

### Transformation Rules for Convergent Subterm Rewriting Systems

**Project**
- \( \mu = \text{mgu}(t, f(t_1, \ldots, t_n)) \)
- \( \rho \) is a fresh renaming such that \( \text{dom}(\rho) \subseteq \text{var}(M) \) and \( \forall Y \in \text{var}(M\rho), \text{ar}(Y) \leq \text{ar}(X) \)
- \( X \notin \text{var}(M) \)
- \( \forall w_i \in \text{par}(M), i \leq \text{ar}(X) \)
- \( \Phi \cup \{\forall \beta. M \vdash t\}; \Psi; C \vdash {X \vdash? f(t_1, \ldots, t_n)}; \sigma; N \Rightarrow (\Phi \cup \{\forall \beta. M \vdash t\}; \Psi; C; \sigma; N \cup \{t\})\{X \mapsto M\rho\}\rho\mu \)

**Narrowing-1**
- \( l \rightarrow r \) is a fresh rule from \( R \)
- \( t|p \notin X \cup \text{st}(N) \)
- \( \mu = \text{mgu}(t|p, l) \)
- \( \Phi \vdash \{\forall \beta. M \vdash t\}; \Psi; C; \sigma; N \Rightarrow (\Phi \cup \{\forall \beta. M \vdash t[p := r]\}; \Psi; C; \sigma; N \cup \{r\})\mu \)

**Narrowing-2**
- \( l \rightarrow r \) is a fresh rule from \( R \)
- \( \mu = \text{mgu}((t_1 =?_R t_2)|p, l) \)
- \( \Phi; \Psi; C \vdash {t_1 =?_R t_2}; \sigma; N \Rightarrow (\Phi; \Psi; C \vdash {(t_1 =?_R t_2)[p := r]}; \sigma; N \cup \{r\})\mu \)
- \( (t_1 =?_R t_2)|p \notin X \cup \text{st}(N) \)

**Constrain**
- \( \mu = \text{mgu}(t_1, t_2) \)
- \( \Phi; \Psi; C \vdash {t_1 =?_R t_2}; \sigma; N \Rightarrow (\Phi; \Psi; C; \sigma; N \cup \{t_1\})\mu \)

**Context**
- \( l \rightarrow r \) is a fresh rule from \( R \)
- \( \Phi; \Psi; C; \sigma; N \Rightarrow \Phi \cup \{X \vdash r\}; \Psi; C \cup \{X \vdash? l\}; \sigma; N \cup \{r\} \)
- \( X \) is a fresh second-order variable of arity \( a_m + 1 \)

**Relate**
- \( \Phi \cup \{\forall \beta. M \vdash t\}; \Psi; C; \sigma; N \Rightarrow \Phi \cup \{\forall \beta. M \vdash t\}; \Psi \cup \{\forall \beta. X ./ M\}; C \cup \{X \vdash? t\}; \sigma; N \cup \{t\} \)
- \( X \) is a fresh second-order variable of arity \( a_m + 1 \)

**Discard**
- \( t, t_1, \ldots, t_n \in \text{st}(N) \)
- \( t = C[t_1, \ldots, t_n, x_1, \ldots, x_m] \)
- \( \forall \beta_1. M_1 \vdash t_1, \ldots, \forall \beta_n. M_n \vdash t_n \in \Phi \)
- \( \max\{j \mid w_j \in \text{par}(M_1, \ldots, M_n)\} \leq \max\{j \mid w_j \in \text{par}(M)\} \)
- \( \forall Y \in \text{var}(\forall \beta_1, \ldots, \beta_n. C[M_1, \ldots, M_n, X_1, \ldots, X_m]), \)
  - \( X_1 \vdash? x_1, \ldots, X_m \vdash? x_m \in C \)
  - Either \( Y \in \text{var}(\forall \beta. M) \) or \( \text{ar}(Y) < \max\{j \mid w_j \in \text{par}(M)\} \)
- \( \Phi \vdash \{\forall \beta. M \vdash t\}; \Psi; C; \sigma; N \Rightarrow \Phi; \Psi \cup \{\forall \beta_1, \ldots, \beta_n. C[M_1, \ldots, M_n, X_1, \ldots, X_m] ./ M\}; C; \sigma; N \)

**Clean-1**
- \( x \notin \text{var}(\Phi; C; \sigma) \)
- \( \Phi; \Psi; C \vdash {X \vdash? x}; \sigma; N \Rightarrow \Phi; \Psi; C; \sigma; N \)

**Clean-2**
- \( v \notin Y \)
- \( \Phi; \Psi; C; \sigma \vdash {v \mapsto T}; N \Rightarrow \Phi; \Psi; C; \sigma; N \)

**Generalize**
- \( \Phi; \Psi; C; \sigma; N \Rightarrow \{\forall X. \forall \beta. M \vdash t \mid \forall \beta. M \vdash t \in \Phi\}; \{\forall X. \forall \beta. M ./ N \mid \forall \beta. M ./ N \in \Psi\}; C; \sigma; N \)
- \( X \in \text{var}(\Phi) \cup \text{var}(\Psi) - \text{var}(C) - \text{var}(\sigma) - Y \)

Each of the last five rules additionally requires its left-hand constraint system to be pre-solved, that is, saturated for the first three rules. Each of the last four rules requires its left-hand constraint system to be pre-solved and saturated for the higher rules in this group.