### 4.2 Memory Usage

The next part of the evaluation examines CPOL's memory consumption in relation to the number of users, roles, policies, memberships, and cache entries in the system. Memory usage is particularly important because CPOL is an in-memory system. The tests in this section were conducted on the privacy enforcement implementation of CPOL.

Although `State`, `Condition`, `AccessToken`, and `CacheCondition` objects have application-specific definitions, their sizes primarily affect rules and cache entries. Figure 8 shows a comparison of request times between KeyNote and CPOL.

### 4. Evaluation

In this section, we evaluate CPOL’s performance by measuring query processing time, memory usage, and its ability to handle requests from a simulated location infrastructure. For these experiments, we configured CPOL, KeyNote, and a MySQL database to handle privacy requests from a location sensing network. All tests were run on the same computer, which had an AMD Athlon™ XP 2200 processor and 512 MB of RAM.

#### 4.1 Individual Requests

For the first part of the evaluation, we compared individual request times from CPOL, KeyNote, and MySQL. Each system was initialized with `n` users, where `n` varied from 1 to 1000. The requests were made by one user requesting access to another user's location. No roles were used since they are not supported by KeyNote. In all three systems, each entity's rule set was populated with ten rules, with each rule granting access to one other randomly selected user. These rules also had the following conditions:
1. Time must be "Monday through Friday 9 AM to 5 PM."
2. The authorizer must be on one of two floors in a particular building but not in one of two specific rooms.

In KeyNote, the access conditions were stored in the "Condition:" clause. In CPOL, they were set directly inside the `Condition` object.

Figure 9 shows the amount of memory consumed per item for users/entities, roles, role memberships, access rules, and cache entries. These five items are similar in size, with membership entries being the largest and cache entries the smallest. Memberships take up more space because a two-way mapping is maintained for easy role management and quick lookup at request time. Cache entries are smaller than other objects because they are stored in a more compact format.

Using the sizes in Figure 9, a location privacy system with 500 MB of available memory, where each user has ten access rules and is a member of ten roles (totaling 10,000 roles), can support approximately 500,000 entities with a 2,000,000 entry cache. This number could be increased slightly by optimizing CPOL’s data structures for space. However, memory was not a bottleneck when evaluating privacy requests for large numbers of users.

#### 4.3 Privacy Request Workload

For the final step of the evaluation, we used CPOL to process a simulated workload of privacy queries in a location-aware environment. The challenge was to create a suitable workload, given that the technology is not yet widely deployed. GSTD is a general-purpose movement generator [15] that uses randomly moving points to represent objects, creating chaotic behavior. While useful in some applications, it does not realistically represent typical human movement. Special-purpose generation algorithms, such as those for vehicle traffic [3] and fishing boat movement [12], also do not accurately model human movement within buildings.

Instead of aimlessly walking around, people follow fixed schedules that include classes, lab time, meetings, etc., and tend to stay in one place during scheduled events. To evaluate CPOL, we needed a movement generation algorithm that accounted for these factors. Accurately modeling human movement is crucial for evaluating the effectiveness of caching.

For these reasons, we created a new movement generation algorithm that uses semi-random scheduling. The simulator is designed for a university environment, where users move between classrooms, labs, offices, bathrooms, and vending machines. During initialization, the simulator fills classroom schedules with different "courses." Users "enroll" using a target number of credits. Throughout the week, users enter and leave the building through random exits, attending class and spending time in offices, labs, and other locations. The amount of time spent in the building outside of class is determined by a target number of hours.

To better understand how many hours students typically spend in class, offices, labs, or other locations, we interviewed thirty potential users. We also asked about their personal privacy preferences and the services they would be interested in using. The main uses of location information were looking up friends or associates ("Show person A"), querying information about nearby users ("Show people in this room"), and general building-wide requests ("Show everyone in this building") to find empty computer labs or quiet study places. The last type of query was optimized by allowing users to request access as a role member, such as "student," instead of as an individual. This way, the database backend only needs to query every user once per time step for all requesters. The service usage information was applied to the simulator, which generated requests based on frequency of use and the percentage of people who said they would run each query. Finally, each person's privacy preferences were reflected in CPOL by creating access lists and friend roles based on the interview answers.

After CPOL was initialized with individual privacy preferences, it read requests from a simulator output file. This file contained requests from users in one building of average size (with four lecture halls and four classrooms, where 1000 students attended class throughout the week). To test CPOL’s maximum capacity, the requests and users from the single building were replicated multiple times, modeling a campus-wide workload. The location update rate varied from one to thirty seconds. For each update rate, the number of buildings was continually increased until CPOL was unable to process all the queries for a simulation step before it was over.

We also ran the same experiment on a MySQL server and KeyNote. The results from CPOL and MySQL are shown in Figure 10. KeyNote is not included because it was unable to process queries for users in a single building in 30 seconds. MySQL was also unable to handle requests in real-time for 1000 users with sample times of less than 10 seconds. With a thirty-second sample rate, MySQL was able to handle requests for approximately 5,000 users, while CPOL was able to handle approximately 300,000, sixty times more than MySQL.

### 5. Conclusion and Future Work

Traditionally, performance has not been a major focus in the design of policy systems. However, emerging applications require policies to be evaluated with low latency and high throughput. CPOL provides a good solution for such applications, offering greater expressiveness than KeyNote and much better throughput. During evaluation, we found that CPOL could process a single request two to three orders of magnitude faster than a similar database solution and four to five orders of magnitude faster than KeyNote, depending on the expected cache hit rate.

To test a more realistic workload, CPOL was set up to enforce privacy constraints for location-aware services. Using a generator that modeled people moving in a university building, CPOL was able to handle requests from approximately 300,000 users in real-time with a thirty-second sample rate, while a MySQL database was only able to support 5,000 and KeyNote was too slow to do real-time processing for even 1,000 users.

In the future, we plan to expand CPOL to support distribution across multiple machines. The request load could be split among a group of policy evaluation engines, allowing for even greater scalability. Additionally, we hope to use CPOL for policy management in other application domains and explore the integration of different GUI front-ends for easy policy management.

### Acknowledgements

Kevin Borders and Atul Prakash were funded in part by a grant from the Intel Corporation. The equipment for the research was funded by the National Science Foundation under grants 0303587 and 0325332. We thank our colleague, Professor Jignesh Patel, for discussions on database research in the area of privacy and on continuous queries on spatial data.

### References

[1] M. Blaze, J. Feigenbaum, J. Ioannidis, and A. D. Keromytis. The KeyNote Trust Management System Version 2. Internet RFC 2704, September 1999.
[2] M. Blaze, J. Feigenbaum, and M. Strauss. Compliance Checking in the PolicyMaker Trust Management System. In Proceedings of the Financial Cryptography Conference, Lecture Notes in Computer Science, vol. 1465, pages 254-274. Springer, 1998.
[3] T. Brinkhoff. A Framework for Generating Network-Based Moving Objects. GeoInformatica, Vol. 6, No. 2, 153-180, 2002.
[4] N. Damianou, N. Dulay, E. Lupu, and M. Sloman. The Ponder Policy Specification Language. In Morris Sloman, editor, Proceedings of Policy Workshop, 2001, Bristol UK, January 2001.
[5] D. Ferraiolo and R. Kuhn. Role-based access control. In Proceedings of 15th NIST-NCSC National Computer Security Conference. Baltimore, MD. pp. 554–563, October 1992.
[6] B. Gedik and L. Liu. Mobieyes: Distributed Processing of Continuously Moving Queries on Moving Objects in a Mobile System. In Proceedings of the 9th Conference on Extended Database Technology (EDBT 2004), Heraklion-Crete, Greece, March 2004.
[7] J. Hong and J. Landay. An Architecture for Privacy-Sensitive Ubiquitous Computing. In Proceedings of the Second International Conference on Mobile Systems, Applications, and Services (Mobisys 2004). Boston, MA. pp. 177-189, 2004.
[8] S. Lederer, C. Beckmann, A. Dey, and J. Mankoff. Managing Personal Information Disclosure in Ubiquitous Computing Environments. University of California, Berkeley, Computer Science Division, Technical Report UCB-CSD-03-1257, July 2003.
[9] M. Mokbel, X. Xiong, and W. Aref. SINA: Scalable Incremental Processing of Continuous Queries in Spatio-temporal Databases. In Proceedings of the ACM SIGMOD Conference on Management of Data, Paris, France, pp. 623-634, 2004.
[10] MySQL, Inc. The MySQL Database Manager. http://www.mysql.org, 2004.
[11] L. Opyrchal, A. Prakash, A. Agrawal, "Designing a Publish-Subscribe Substrate for Privacy/Security in Pervasive Environments." In First Workshop on Pervasive Security, Privacy and Trust (PSPT), Boston, MA, August 2004.
[12] J. Saglio and J. Moreira. Oporto: A Realistic Scenario Generator for Moving Objects. GeoInformatica, Vol. 5, No. 1, 71-93, 2001.
[13] M. Spreitzer and M. Theimer. Providing Location Information in a Ubiquitous Computing Environment. In Proceedings of Fourteenth ACM Symposium on Operating System Principles. Asheville, NC: ACM Press, December 1993.
[14] Y. Tao and D. Papadias. Spatial Queries in Dynamic Environments. ACM Transactions on Databases Systems (TODS), 28(2): 101-139, 2003.
[15] Y. Theodoridis, J. Silva, and M. Nascimento. On the Generation of Spatio-Temporal Datasets. In Proceedings SSD, 1999.