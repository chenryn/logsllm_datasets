### 4.2. Performance

We evaluated the performance of Sabre by integrating it with SpiderMonkey in Firefox 2.0.0.9. The test platform was a 2.33 GHz Intel Core2 Duo machine running Ubuntu 7.10 with 3 GB of RAM. We used the SunSpider and V8 JavaScript benchmark suites to assess Sabre's performance, averaging the results over ten runs.

With the V8 suite, a Sabre-enabled browser reported a mean score of 29.16, compared to 97.91 for an unmodified browser, resulting in an overhead of 2.36×. In the SunSpider suite, the overhead was 6.1×. We identified that this higher overhead in SunSpider was due to three specific benchmarks: 3d-morph, access-nsieve, and bitops-nsieve-bits. Excluding these benchmarks, Sabre’s overhead with SunSpider was reduced to 1.6×. Despite these overheads, the browser's performance during normal web browsing, including JavaScript-heavy pages like Google Maps and Street View, remained acceptable.

The primary reason for the high runtime overhead is that Sabre monitors the provenance of each JavaScript bytecode instruction to determine if it originates from a JSE (to set the Boolean flag in the security label, as described in Section 3.3). This monitoring is crucial because code included in overlays (distributed with JSEs) is integrated into the browser core and can be executed at any time. If such overlays are verified to be benign, these checks can be disabled. When we disabled this check, the overhead was reduced to 77% and 42% for the V8 and SunSpider suites, respectively. Ongoing efforts by Eich et al. [23, 24] to track information flow in JavaScript also incur similar overheads (20%-70%).

### 5. Related Work

#### Browser Extension Security

Previous work [22, 30, 31] has developed techniques to identify spyware behavior in untrusted browser extensions, particularly in plugins and BHOs, which are distributed as binary executables. These approaches rely on whole-system information flow tracking [22] and monitoring plugin/browser interactions [30]. Like prior work [30, 31], Sabre also monitors JSE/browser interactions but enhances this with information on the sensitivity and integrity of JavaScript objects. As illustrated in Section 4, this information is crucial for JSEs because several benign JSEs interact with the browser in a manner similar to malicious JSEs. SpyShield [31] additionally offers containment by enforcing policies on data accesses by untrusted plugins; such techniques can complement Sabre to contain malicious JSEs. Similar to prior work [22], Sabre performs information flow tracking, but does so at the JavaScript level within the browser, which eases action attribution and integration with the browser. Recent work has explored techniques to sandbox browser extensions [26], but these are currently applicable only to extensions such as plugins and BHOs, which are distributed as binary executables.

#### JavaScript Information Flow

Ter-Louw et al. [41] were the first to address the security of JSEs. However, their approach, based on monitoring XPCOM calls, is coarse-grained and can result in both false positives and negatives. Netscape Navigator 3.0 first proposed using data tainting to detect confidentiality-violating JavaScript code [16]. Vogt et al. [42] applied this idea to detect cross-site scripting attacks. More recently, Austin et al. [17] have proposed dynamic taint tracking techniques for JavaScript, showing promising results, though on smaller benchmarks.

There is a rich literature on information flow tracking for both web applications and executable code, which we do not survey here. Although we leverage the JavaScript label propagation rules developed in prior work, analyzing information flow in JSEs poses additional challenges. Specifically, Sabre precisely tracks cross-domain information flows and provides support for fine-grained declassification or endorsement of flows. To our knowledge, prior work on JavaScript information flow tracking has not needed or incorporated such support.

#### JavaScript Sandboxing

Early work by Hallaraker and Vigna [29] proposed XPCOM-level monitoring to sandbox JavaScript code. Recent work on sandboxing JavaScript has focused on confining untrusted third-party code included in web pages as widgets and advertisements. Notable efforts include Adsafe [1], Caja [33], and FBJS [2], which perform rewriting to restrict the JavaScript constructs allowed in code included in web pages. While such techniques may be used to secure JSEs, they may also restrict their functionality.

BrowserShield [36], CoreScript [47], Phung et al. [34], and Erlingsson et al. [25] proposed using JavaScript instrumentation to ensure compliance with site-specific security policies. Such techniques can enforce access control policies on a JSE’s access to sensitive browser data. While this approach can constrain malicious JSEs, it is unclear whether it will also protect against exploits targeting vulnerable JSEs (e.g., those discussed in Section 2).

Chugh et al. [20] and Yip et al. [46] have proposed sandboxing third-party JavaScript executing on web pages. In contrast, Sabre sandboxes JSEs, which execute with more privileges and interact with more browser subsystems. In addition to the above work on JavaScript sandboxing, recent research has investigated static analysis techniques for JavaScript code [32], particularly to ensure compliance with site-specific policies and to maintain the integrity of client-side JavaScript code in web applications [28]. We plan to explore whether Sabre can leverage similar static analysis techniques to reduce the runtime overhead of information flow tracking for JSEs. However, performing such analysis may be challenging for obfuscated JSEs and those containing a large number of dynamic code generation constructs, such as `eval`.

### 6. Conclusion

This paper presents Sabre, an in-browser information flow tracker that detects confidentiality and integrity violations in JSEs, whether due to malicious functionality or exploitable vulnerabilities in JSE code.

In future work, we plan to improve Sabre's performance by exploring static analysis of JavaScript code. For example, static analysis can create summaries of JavaScript code fragments that do not contain complex constructs (e.g., `eval`). These summaries record how the labels of objects accessed by the fragments are modified. Sabre can use these summaries to update labels when the fragment is executed, thereby avoiding the need to propagate security labels for each bytecode instruction.

### Acknowledgements

We thank Jan Jajalla for his help with experiments, members of DiscoLab, and the anonymous reviewers for their comments. This work was supported by NSF awards 0831268, 0915394, and 0931992.

### References

[1] AdSafe: Making JavaScript safe for advertising. http://www.adsafe.org.
[2] FBJS: Facebook developers wiki. http://wiki.developers.facebook.com/index.php/FBJS.
[3] Firebug: Web development evolved. http://getfirebug.com.
[4] Firefox Add-ons. http://addons.mozilla.org.
[5] Greasemonkey: The weblog about Greasemonkey. http://www.greasespot.net.
[6] Internet Explorer 8. http://www.microsoft.com/windows/internet-explorer.
[7] Mozilla.org XPCOM. http://www.mozilla.org/projects/xpcom.
[8] NoScript—JavaScript blocker for a safer Firefox experience. http://noscript.net.
[9] Signed scripts in Mozilla: JavaScript privileges. http://www.mozilla.org/projects/security/components/signed-scripts.html.
[10] XML user interface language (XUL) project. http://www.mozilla.org/projects/xul.
[11] FormSpy: McAfee Avert Labs, July 2006. http://vil.nai.com/vil/content/v140256.htm.
[12] Mozilla Firefox Firebug extension—Cross-zone scripting vulnerability, April 2007. http://www.xssed.org/advisory/33.
[13] FFsniFF: Firefox sniffer, June 2008. http://azurit.elbiahosting.sk/ffsniff.
[14] Firefox add-ons infecting users with trojans, May 2008. http://www.webmasterworld.com/firefox_browser/3644576.htm.
[15] Trojan.PWS.ChromeInject.B, Nov 2008. http://www.bitdefender.com/VIRUS-1000451-en--Trojan.PWS.ChromeInject.B.html.
[16] Netscape Navigator 3.0. Using data tainting for security. http://www.aisystech.com/resources/advtopic.htm.
[17] T. Austin and C. Flanagan. Efficient purely-dynamic information flow analysis. In ACM PLAS, June 2009.
[18] P. Beaucamps and D. Reynaud. Malicious Firefox extensions. In Symp. Sur La Securite Des Technologies De L’Information Et Des Communications, June 2008.
[19] L. Cavallaro, P. Saxena, and R. Sekar. On the limits of information flow techniques for malware analysis and containment. In DIMVA, July 2008.
[20] R. Chugh, J. Meister, R. Jhala, and S. Lerner. Staged information flow for JavaScript. In PLDI, June 2009.
[21] M. Dhawan and V. Ganapathy. Analyzing information flow in JavaScript-based browser extensions. Technical Report DCS-TR-648, Rutgers University, April 2009.
[22] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song. Dynamic spyware analysis. In USENIX Annual Technical, June 2007.
[23] B. Eich. Better security for JavaScript, March 2009. Dagstuhl Seminar 09141: Web Application Security.
[24] B. Eich. JavaScript security: Let’s fix it, May 2009. Web 2.0 Security and Privacy Workshop.
[25] U. Erlingsson, Y. Xie, and B. Livshits. End-to-end web application security. In HotOS, May 2007.
[26] B. Yee et al. Native Client: A sandbox for portable, untrusted x86 native code. In IEEE S&P, May 2009.
[27] C. Grier, S. Tang, and S. T. King. Secure web browsing with the OP web browser. In IEEE S&P, May 2008.
[28] A. Guha, S. Krishnamurthi, and T. Jim. Using static analysis for Ajax intrusion detection. In WWW, April 2009.
[29] O. Hallaraker and G. Vigna. Detecting malicious JavaScript code in Mozilla. In 10th IEEE Conf. on Engineering Complex Computer Systems, June 2005.
[30] E. Kirda, C. Kruegel, G. Banks, G. Vigna, and R. Kemmerer. Behavior-based spyware detection. In USENIX Security, August 2006.
[31] Z. Li, X. Wang, and J. Y. Choi. SpyShield: Preserving privacy from spy add-ons. In RAID, September 2007.
[32] B. Livshits and S. Guarnieri. Gatekeeper: Mostly static enforcement of security and reliability policies for JavaScript code. Technical Report MSR-TR-2009-16, Microsoft Research, 2009.
[33] M. S. Miller, M. Samuel, B. Laurie, I. Awad, and M. Stay. Caja: Safe active content in sanitized JavaScript, June 2008.
[34] P. H. Phung, D. Sands, and A. Chudnov. Lightweight self-protecting JavaScript. In ASIACCS, March 2009.
[35] M. Pilgrim. Greasemonkey for secure data over insecure networks/sites, July 2005. http://mozdev.org/pipermail/greasemonkey/2005-July/003994.html.
[36] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir. BrowserShield: Vulnerability-driven filtering of dynamic HTML. In ACM/USENIX OSDI, November 2006.
[37] B. Ross, C. Jackson, N. Miyake, D. Boneh, and J. C. Mitchell. Stronger password authentication using browser extensions. In USENIX Security, August 2005.
[38] J. Ruderman. The same-origin policy, August 2001. http://www.mozilla.org/projects/security/components/same-origin.html.
[39] Secunia Advisory SA24743/CVE-2007-1878/CVE-2007-1947. Mozilla Firefox Firebug extension two cross-context scripting vulnerabilities.
[40] Secunia Advisory SA30284. FireFTP extension for Firefox directory traversal vulnerability.
[41] M. Ter-Louw, J. S. Lim, and V. N. Venkatakrishnan. Enhancing web browser security against malware extensions. Journal of Computer Virology, 4(3), August 2008.
[42] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. Cross-site scripting prevention with dynamic data tainting and static analysis. In NDSS, February 2007.
[43] D. Wagner and P. Soto. Mimicry attacks on host-based intrusion detection systems. In ACM CCS, November 2002.
[44] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choudhury, and H. Venter. The multi-principal OS construction of the Gazelle web browser. Technical Report MSR-TR-2009-16, Microsoft Research, February 2009.
[45] S. Willison. Understanding the Greasemonkey vulnerability, July 2005. http://simonwillison.net/2005/Jul/20/vulnerability.
[46] A. Yip, N. Narula, M. Krohn, and R. Morris. Privacy-preserving browser-side scripting with bflow. In EuroSys, April 2009.
[47] D. Yu, A. Chander, N. Islam, and I. Serikov. JavaScript instrumentation for browser security. In ACM POPL, January 2007.