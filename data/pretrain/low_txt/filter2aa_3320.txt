# Crypto for Hackers Workshop

## Overview
- **Author:** Eijah
- **Version:** v1.00
- **Date:** August 7th, 2015

### About the Author
- **Founder**
- **Programmer**
- **Hacker**

## Prerequisites
- **Laptop**
- **Operating System:**
  - Linux (gcc 4.7)
  - Windows (MSVC 2013)
- **Libraries:**
  - **Crypto++**: Download from [www.cryptopp.com](http://www.cryptopp.com/)
  - **Boost 1_58_0**: Download from [www.boost.org](http://www.boost.org/)
- **Workshop Files**: Available at [www.demonsaw.com](http://www.demonsaw.com/)
- **Qmake**: Download from [www.qt.io](http://www.qt.io/)
  - *Optional to create your own Makefiles*
- **Jom**: Download from [www.qt.io](http://www.qt.io/)
  - *Required for Windows, as it does not support `make -j 4`*

## Lesson 0 – Overview
- **C++ 11**
- **Boost**
- **Crypto++**
- **Demoncrypt**
- **8 Examples with Boost ASIO**
- **Download & Configure**

### Lesson 0 – Workshop Files
- **Download** the `workshop.zip` file from the downloads page at [www.demonsaw.com](http://www.demonsaw.com/).
- **Create** a directory named `defcon23`.
- **Extract** the files into the `defcon23` directory.

### Lesson 0 – Boost
- **Download** Boost 1_58_0 from [http://sourceforge.net/projects/boost/files/boost/1.58.0/](http://sourceforge.net/projects/boost/files/boost/1.58.0/).
- **Extract** the files into the `defcon23` directory.
- **Navigate** to the `boost_1_58_0` directory.
- **Run** the `bootstrap` script.
- **Build** Boost using the following command:
  ```sh
  bjam --layout=system threading=multi runtime-link=static link=static variant=debug architecture=x86 address-model=64 --with-system
  ```
- **Copy** the contents of `boost/libs` into the `defcon23/lib` directory.

### Lesson 0 – Crypto++
- **Download** Crypto++ 5.6.2 from [http://www.cryptopp.com/#download](http://www.cryptopp.com/#download).
- **Extract** the files into the `defcon23/cryptopp` directory.

## Lesson 1 – Caesar’s Cipher
- **Reference**: [Wikipedia - Caesar Cipher](https://en.wikipedia.org/wiki/Caesar_cipher)
- **Implement** the Caesar's Cipher algorithm.
- **Send** a random string to a buddy's machine.
- **Write** code that will crack the cipher and display the plaintext data.

## Lesson 2 – Hash
- **Reference**: [Wikipedia - Cryptographic Hash Function](https://en.wikipedia.org/wiki/Cryptographic_hash_function)
- **Experiment** with different hash algorithms (MD5, SHA1, SHA256, etc.).
- **Print** out a variety of hashes from command-line input.
- **Use** the `security/hex` class to better format the output.
- **Send** a message and its hash digest across the network.
- **Discuss** security concerns with this approach.
- **Simulate** a Man-in-the-Middle (MITM) attack.
- **Add** a salt to your hash.

## Lesson 3 – HMAC
- **Reference**: [Wikipedia - Hash-based Message Authentication Code (HMAC)](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code)
- **Experiment** with different HMAC algorithms.
- **Print** out a variety of MACs from command-line input.
- **Use** the `security/hex` class to better format the output.
- **Send** a message and its MAC across the network.
- **Discuss** security concerns with this approach.
- **Simulate** a MITM attack.

## Lesson 4 – Cipher
- **Reference**: [Wikipedia - Cipher](https://en.wikipedia.org/wiki/Cipher)
- **Experiment** with some AES candidate ciphers.
- **Use** different key sizes (128, 192, 256 bits).
- **Generate** a key size of a specific length, e.g., 128 bits.
- **Experiment** with other ciphers available in `block_cipher.h`.
- **Experiment** with the Initialization Vector (IV).
- **Discuss** real-world uses of the IV.
- **Send** an encrypted message and its MAC across the network.
- **Discuss** security concerns with this approach.
- **Simulate** a MITM attack.
- **Evaluate** the safety of this approach from hackers.
- **Discuss** additional steps to prevent mischief.

## Lesson 5 – PBKDF
- **Reference**: [Wikipedia - PBKDF2](https://en.wikipedia.org/wiki/PBKDF2)
- **Experiment** with different PBKDF functions (see `pbkdf.h`).
- **Use** different passphrases, iterations, and salts.
- **Discuss** how PBKDF helps derive useful cipher keys.
- **Send** an encrypted message over the network.
- **Discuss** security and usability concerns with this approach.

## Lesson 6 – Diffie-Hellman
- **Reference**: [Wikipedia - Diffie-Hellman Key Exchange](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)
- **Generate** a base, prime, and public key.
- **Send** this data to the server.
- **Read** the response data.
- **Extract** the server's public key.
- **Update** the DH object with the server's data.
- **Generate** a shared key (this is super secret).
- **Use** the shared key to send an encrypted message across the network.
- **Decide** on a method to convert the DH shared key into a valid AES key (128, 192, or 256 bits).
- **Encrypt** a message and send it to the server.

## Lesson 7 – Social Crypto
- **Introduction**: Social Crypto is a new model of security designed specifically for groups and individuals.
- **Features**:
  - Infrastructure agnostic
  - Built on traditional security foundations
  - Leverages symmetric and asymmetric keys
- **Principle**: Individuals and groups share common knowledge and experiences, which are used as sources of entropy to derive complex signatures.
- **RNG**: Uses networks (e.g., the Internet) as a universal and constantly changing Random Number Generator (RNG) to create deterministic and reproducible bits.

## Lesson 8 – AACS
- **Background**: The author may (or may not) have hacked AACS a few years ago.
- **Objective**: Hack AACS together.
- **Binary File**: Includes 3 AACS Device Keys (in a grand parent, parent, and child AES-G3 Left Branch relationship) hidden within the data.
- **Alignment**: Each possible key is aligned to 16-byte offsets.
- **Task**:
  - Implement the AES-G3 routine.
  - Recover the keys.
  - Determine the hierarchical relationship.
- **Note**: If the author did hack AACS, you might be using some of the actual code from that time.

## Summary
- **Thank You**: For believing in the Right to Share.
- **Demonsaw Promise**:
  - 100% free
  - No ads
  - No installs
  - No malware
  - No bundled software
  - No logging
  - No tracking
  - No bullshit
- **Your Continued Support**:
  - Suggestions
  - Bug fixes
  - Beta testing
- **One Person Can Make a Difference**:
  - Contact via email or Twitter
- **The Best is Yet to Come**

## Questions?

## Contact Information
- **Website**: [www.demonsaw.com](http://www.demonsaw.com/)
- **Email**: PI:EMAIL
- **Twitter**: @demon_saw
- **Author**: Eijah