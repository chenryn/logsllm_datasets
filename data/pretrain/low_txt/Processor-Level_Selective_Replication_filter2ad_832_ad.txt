### 5.3.4 Instruction Error Injection Results

The following figures and data illustrate the results of instruction error injection, showing the percentage of fail-silence violations and program hangs when different types of replication mechanisms are employed.

**Figure 6: Instruction Error Injection Results**

| Configuration | Exception Raised in Same Instruction | Replication Detection |
|---------------|---------------------------------------|-----------------------|
| Full Duplication | 59.0% | 28.3% |
| Selective Replication (SELREP) | 5.9% | 50.9% |
| Randomized Replication | 2.0% | 62.5% |
| Baseline | 0.0% | 71.2% |

**Figure 7: Fail-Silence Violations and Program Hangs for Instruction Errors**

| Configuration | Fail Silence Violation | Program Hang |
|---------------|------------------------|---------------|
| Full Duplication | 14.5% | 10.4% |
| SELREP | 3.8% | 4.3% |
| Randomized Replication | 1.7% | 1.2% |
| Baseline | 0.6% | 0.1% |

**Discussion:**
- **Full Duplication** is effective in preventing most fail-silence violations and program hangs. However, if the register field of a load instruction in one of the replicas is corrupted, the data may be loaded into an incorrect register, leading to a fail-silence violation.
- **Selective Replication (SELREP)** performs better than randomized replication but worse than full duplication in detecting both fail-silence violations and program hangs.
- **Randomized Replication** has the lowest detection rates, indicating it is less effective compared to the other methods.

### 5.3.5 Error Coverage for Data Errors

**Table 3: Fault Injection Results for Data Injection**

| Configuration | Activated | Not Manifested | Replication Detection | Exception Raised in Different Instruction | Program Hang | Fail Silence Violation | Benign Error Detection |
|---------------|-----------|----------------|-----------------------|-------------------------------------------|--------------|-----------------------|------------------------|
| FULLREP | 477 | 0.0% | 100.0% | 0.0% | 0.0% | 0.0% | 100.0% |
| SELREP | 477 | 3.0% | 97.4% | 1.6% | 0.1% | 0.9% | 93.8% |
| Baseline | 490 | 44.6% | 0.0% | 72.2% | 2.3% | 25.5% | 0.0% |

**Discussion:**
- **FULLREP** detects all data errors because it replicates all instructions and votes on the result of each replicated instruction.
- **Selective Replication (SELREP)**, despite replicating only a small fraction of instructions, detects about 97% of all data errors. However, it decreases the detection of benign errors by more than 6% compared to FULLREP.
- **Baseline** configuration shows that many errors are not detected, leading to a higher rate of fail-silence violations and program hangs.

### 6. Related Work

Replicated execution for fault detection and tolerance has been extensively studied at both the application and hardware levels. Some notable approaches include:

- **Error Detection Using Duplicated Instructions (EDDI)** [2]: This method duplicates original instructions with different registers and variables, increasing the code size and reducing the instruction supply bandwidth.
- **IBM G5 Processor** [10]: Provides duplicate I- and E-units for duplicate execution, restricted to a single-issue processor with 35% hardware overhead.
- **Simultaneous Redundant Threading (SRT)**: Only checks instructions with side effects visible beyond the processor core. Extended in SRTR to include recovery [4].
- **DIVA Design** [3]: An aggressive out-of-order superscalar processor with redundancy.
- **Microprocessor-Based Introspection (MBI)** [12]: Achieves time redundancy by scheduling redundant execution during idle cycles, reporting up to 30% performance overhead.
- **SLICK** [14]: An SRT-based approach for partial replication, similar to our goals but using a multi-threaded architecture.

**Key Differences:**
- Previous techniques provide dynamic replication configuration, while our approach does not require such flexibility.
- Our method requires providing an interface to the application and extending the processor pipeline to support selective replication.

### 7. Conclusions and Future Work

In this paper, we have demonstrated an approach to selectively replicate sensitive sections of code to enhance application reliability, rather than replicating the entire application. The results show that with about 59% less overhead than full duplication, we can detect 97% of data errors and 87% of instruction errors. Selective replication also reduces the detection of benign errors by 17.8% compared to full duplication.

**Future Work:**
- Enhancements to the compiler to automatically insert CHECK instructions.
- Hardware synthesis of the selective replication technique and its implementation on an FPGA.

### Acknowledgements

This work was supported in part by National Science Foundation (NSF) grants CNS-0406351 and CNS-0524695, the Gigascale Systems Research Center (GSRC/MARCO), Motorola Corporation as part of the Motorola Center for Communications (UIUC), and Intel Corporation.

### References

[1] R. K. Iyer, N. Nakka, Z. T. Kalbarczyk, and S. Mitra, “Recent advances and new avenues in hardware-level reliability support,” IEEE MICRO, vol. 25, no. 6, pp. 18-29, Nov.-Dec. 2005.

[2] N. Oh, P.P. Shirvani, and E.J. McCluskey, “Error detection by duplicated instructions in super-scalar processors,” IEEE Transactions on Reliability, vol. 51(1), pp. 63-75, Mar. 2002.

[3] C. Weaver and T. Austin. “A fault tolerant approach to microprocessor design,” in Proc. of the Intl. Conf. on Dependable Systems and Networks 2001, pp. 411-420.

[4] T. Vijaykumar, I. Pomeranz, and K. Cheng, “Transient fault recovery using simultaneous multithreading,” in Proceedings of the 29th Intl. Symposium. on Computer Architecture (ISCA) May 2002, pp. 87-98.

[5] J. Ray, J. C. Hoe, and B. Falsafi, “Dual use of superscalar datapath for transient-fault detection and recovery,” in Proceedings of 34th MICRO, Austin, Texas, Dec. 2001, pp. 214-224.

[6] N. J. Wang, J. Quek, T. M. Rafacz, and S. J. Patel, “Characterizing the effects of transient faults on a high-performance processor pipeline,” in Proc. Intl. Conf. on Dependable Systems and Networks (DSN), 2004, pp. 61-70.

[7] G. Saggese, A. Vetteth, Z. T. Kalbarcyzk, and R. K. Iyer, “Microprocessor Sensitivity to Failures: Control vs. Execution and Combinational vs. Sequential Logic,” in Proc. Intl. Conf. Dependable Systems and Networks (DSN), 2005, pp. 760-769.

[8] K. Pattabiraman, Z. T. Kalbarczyk, and R. K. Iyer, “Application-based metrics for strategic placement of detectors,” in Proc. of Int. Symp. Pacific Rim Dependable Computing (PRDC), 2005, pp. 8-15.

[9] M. Hiller, A. Jhumka, and N. Suri, “On the placement of software mechanisms for detection of data errors,” in Proc. Intl. Conference on Dependable Systems and Networks (DSN), 2002, pp. 135-144.

[10] T. Slegel, et al. “IBM’s S/390 G5 microprocessor design,” IEEE Micro, vol. 19(2), pp. 12–23, 1999.

[11] S. K. Reinhardt and S. S. Mukherjee, “Transient fault detection via simultaneous multithreading,” in Proceedings of the Twenty-Seventh Inlt. Symp. on Computer Architecture (ISCA), June 2000, pp. 25-36.

[12] M. A. Qureshi, O. Mutlu, and Y. N. Patt, “Microarchitecture-based introspection: A technique for transient-fault tolerance in microprocessors,” in Proceedings of Intl. Conference on Dependable Systems and Networks (DSN), June 2005, pp. 434-443.

[13] N. Nakka. “Reliability and Security Engine: A Processor-level framework for Application-Aware detection and recovery,” PhD dissertation, Department of Electrical and Computer Engineering, University of Illinois at Urban-Champaign, USA, 2006.

[14] A. Parashar, A. Sivasubramaniam, S. Gurumurthi. “SlicK: slice-based locality exploitation for efficient redundant multithreading,” in Proc. of the 12th Intl. Conf. on Architecture, Programming Lang. and Operating Systems (ASPLOS), 2006.

[15] Mark Weiser, “Program slicing,” in 5th International Conference on Software Engineering (ICSE), 1981.

[16] H. Agrawal, and J. R. Horgan. “Dynamic program slicing,” in the ACM SIGPLAN Conference on Prog. Lang. Design and Impl.(PLDI) ‘90, White Plains, New York, pp. 246-256.

[17] D. Burger and T. M. Austin, “The SimpleScalar tool set, version 2.0,” University of Wisconsin-Madison, Technical Report CS-1342, June 1997.

[18] N. Nakka, J. Xu, Z. Kalbarczyk, R. K. Iyer, “An Architectural Framework for Providing Reliability and Security Support,” in Proc. of Intl. Conf. Dependable Systems and Networks (DSN) 2004, pp. 585-594.

[19] R. Chillarege. “Orthogonal defect classification,” In Handbook of Software Reliability and System Reliability, M. R. Lyu, Ed. McGraw-Hill, NJ, 359-400.

[20] F. Tip, "A Survey of Program Slicing Techniques," Journal of Programming Languages, Vol.3, No.3, pp.121-189, September, 1995.