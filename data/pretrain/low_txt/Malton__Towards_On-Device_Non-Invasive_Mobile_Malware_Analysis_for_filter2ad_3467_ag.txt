### Funding Acknowledgements

This work is partially supported by the following grants:
- Hong Kong GRF (Nos. PolyU 5389/13E, 152279/16E)
- Hong Kong RGC Project (No. CityU C1008-16G)
- HKPolyU Research Grants (Nos. G-UA3X, G-YBJX)
- Shenzhen City Science and Technology R&D Fund (No. JCYJ20150630115257892)
- National Natural Science Foundation of China (Nos. 61402080, 61602371)
- US National Science Foundation (NSF) under Grant Nos. 0954096 and 1314823

The opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the NSF.

### References

1. **Cloc: Count lines of code.**  
   <https://goo.gl/Buhrk9>

2. **Dalvik bytecode.**  
   <https://goo.gl/pSf6as>

3. **The history of xxshenqi and the future of SMS phishing.**  
   <https://goo.gl/6Ds8NF>

4. **Logcat command-line tool.**  
   <https://goo.gl/Y9aRYM>

5. **Ltrace.**  
   <https://goo.gl/rtSTXM>

6. **Strace.**  
   <https://goo.gl/twBJ1e>

7. **Sysfs.**  
   <https://goo.gl/mQx8J2>

8. **Cf-bench.**  
   <https://goo.gl/9jWW1U>, 2016.

9. **Zjdroid.**  
   <https://goo.gl/Xjg3WL>, 2016.

10. **A. Abraham, R. Andriatsimandeﬁtra, A. Brunelat, J. Lalande, and V. Tong.**  
    "Grodddroid: a gorilla for triggering malicious behaviors."  
    In Proc. MALWARE, 2015.

11. **V. Afonso, A. dBianchi, Y. Fratantonio, A. Doupé, M. Polino, P. de Geus, C. Kruegel, and G. Vigna.**  
    "Going native: Using a large-scale analysis of Android apps to create a practical native-code sandboxing policy."  
    In NDSS, 2016.

12. **V. Afonso, M. de Amorim, A. Grégio, G. Junquera, and P. de Geus.**  
    "Identifying Android malware using dynamically obtained features."  
    Journal of Computer Virology and Hacking Techniques, 11(1), 2015.

13. **S. Alam, Z. Qu, R. Riley, Y. Chen, and V. Rastogi.**  
    "Droidnative: Semantic-based detection of Android native code malware."  
    Computers & Security, 65, 2017.

14. **M. Alzaylaee, S. Yerima, and S. Sezer.**  
    "Emulator vs real phone: Android malware detection using machine learning."  
    In Proc. ACM IWSPA, 2017.

15. **S. Anand, M. Naik, M. Harrold, and H. Yang.**  
    "Automated concolic testing of smartphone apps."  
    In Proc. FSE, 2012.

16. **S. Anand, C. Păsăreanu, and W. Visser.**  
    "JPFCSE: A symbolic execution extension to Java Pathfinder."  
    In Proc. TACAS, 2007.

17. **R. Andriatsimandeﬁtra and V. Tong.**  
    "Capturing Android malware behavior using system flow graph."  
    In Proc. NSS, 2014.

18. **D. Arp, M. Spreitzenbarth, M. Hubner, H. Gascon, K. Rieck, and C. Siemens.**  
    "Drebin: Effective and explainable detection of Android malware in your pocket."  
    In Proc. NDSS, 2014.

19. **E. Athanasopoulos, V. Kemerlis, G. Portokalidis, and A. Keromytis.**  
    "Nacldroid: Native code isolation for Android applications."  
    In Proc. ESORICS, 2016.

20. **M. Backes, S. Bugiel, C. Hammer, O. Schranz, and P. von Styp-Rekowsky.**  
    "Boxify: Full-fledged app sandboxing for stock Android."  
    In Proc. USENIX Security, 2015.

21. **M. Backes, S. Bugiel, O. Schranz, P. von Styp-Rekowsky, and S. Weisgerber.**  
    "Artist: The Android runtime instrumentation and security toolkit."  
    arXiv preprint arXiv:1607.06619, 2016.

22. **M. Backes, S. Gerling, C. Hammer, M. Maffei, and P. von Styp-Rekowsky.**  
    "Appguard: Enforcing user requirements on Android apps."  
    In Proc. TACAS, 2013.

23. **P. Berthome, T. Fecherolle, N. Guilloteau, and J. Lalande.**  
    "Repackaging Android applications for auditing access to private data."  
    In Proc. ARES, 2012.

24. **A. Bianchi, Y. Fratantonio, C. Kruegel, and G. Vigna.**  
    "Njas: Sandboxing unmodified applications in non-rooted devices running stock Android."  
    In Proc. SPSM, 2015.

25. **C. Cadar, D. Dunbar, and D. Engler.**  
    "Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs."  
    In Proc. OSDI, 2008.

26. **S. Cha, T. Avgerinos, A. Rebert, and D. Brumley.**  
    "Unleashing mayhem on binary code."  
    In Proc. IEEE SP, 2012.

27. **T. Chen, X. Zhang, S. Guo, H. Li, and Y. Wu.**  
    "State of the art: Dynamic symbolic execution for automated test generation."  
    Future Generation Computer Systems, 29(7), 2013.

28. **T. Chen, X. Zhang, X. Ji, C. Zhu, Y. Bai, and Y. Wu.**  
    "Test generation for embedded executables via concolic execution in a real environment."  
    IEEE Transactions on Reliability, 64(1), 2015.

29. **M. Conti, V. Nguyen, and B. Crispo.**  
    "Crepe: Context-related policy enforcement for Android."  
    In Proc. ICIS, 2010.

30. **V. Costamagna and C. Zheng.**  
    "Artdroid: A virtual-method hooking framework on Android ART runtime."  
    In Proc. ESSoS Workshop IMPS, 2016.

31. **S. Dai, T. Wei, and W. Zou.**  
    "Droidlogger: Reveal suspicious behavior of Android applications via instrumentation."  
    In Proc. ICCCT, 2012.

32. **B. Davis, B. Sanders, A. Khodaverdian, and H. Chen.**  
    "I-ARM-Droid: A rewriting framework for in-app reference monitors for Android applications."  
    Mobile Security Technologies, 2012.

33. **L. De Moura and N. Bjørner.**  
    "Z3: An efficient SMT solver."  
    In Proc. TACAS, 2008.

34. **A. Desnos and P. Lantz.**  
    "Droidbox: An Android application sandbox for dynamic analysis."  
    <https://goo.gl/iWYL9B>, 2014.

35. **G. Dini, F. Martinelli, A. Saracino, and D. Sgandurra.**  
    "Madam: A multi-level anomaly detector for Android malware."  
    In Proc. MMM-ACNS, 2012.

36. **T. Dong and M. Zhang.**  
    "Five ways Android malware is becoming more resilient."  
    <https://goo.gl/7ZPWnJ>, 2016.

37. **D. Earl and B. VonHoldt.**  
    "Structure harvester: A website and program for visualizing structure output and implementing the Evanno method."  
    Conservation Genetics Resources, 4(2), 2012.

38. **W. Enck, P. Gilbert, B. Chun, L. Cox, J. Jung, P. McDaniel, and A. Sheth.**  
    "Taintdroid: An information-flow tracking system for real-time privacy monitoring on smartphones."  
    In Proc. USENIX OSDI, 2010.

39. **W. Enck, P. Gilbert, S. Han, V. Tendulkar, B. Chun, L. Cox, J. Jung, P. McDaniel, and A. Sheth.**  
    "Taintdroid: An information-flow tracking system for real-time privacy monitoring on smartphones."  
    ACM Transactions on Computer Systems, 32(2), 2014.

40. **Y. Fratantonio, A. Bianchi, W. Robertson, E. Kirda, C. Kruegel, and G. Vigna.**  
    "Triggerscope: Towards detecting logic bombs in Android applications."  
    In Proc. IEEE SP, 2016.

41. **S. Hao, B. Liu, S. Nath, W. Halfond, and R. Govindan.**  
    "Puma: Programmable UI-automation for large-scale dynamic analysis of mobile apps."  
    In Proc. MobiSys, 2014.

42. **E. Hughes.**  
    "Java-basic datatypes."  
    <https://goo.gl/3R3BM9>.

43. **C. Jeon, W. Kim, B. Kim, and Y. Cho.**  
    "Enhancing security enforcement on unmodified Android."  
    In Proc. SAC, 2013.

44. **Y. Jing, Z. Zhao, G. Ahn, and H. Hu.**  
    "Morpheus: Automatically generating heuristics to detect Android emulators."  
    In Proc. ACSAC, 2014.

45. **M. Kang, S. McCamant, P. Poosankam, and D. Song.**  
    "DTA++: Dynamic taint analysis with targeted control-flow propagation."  
    In Proc. NDSS, 2011.

46. **M. Karami, M. Elsabagh, P. Najafiborazjani, and A. Stavrou.**  
    "Behavioral analysis of Android applications using automated instrumentation."  
    In Proc. SERE-C, 2013.

47. **D. Kirat and G. Vigna.**  
    "Malgene: Automatic extraction of malware analysis evasion signature."  
    In Proc. ACM CCS, 2015.

48. **Y. Lin, Y. Lai, C. Chen, and H. Tsai.**  
    "Identifying Android malicious repackaged applications by thread-grained system call sequences."  
    Computers & Security, 39, 2013.

49. **M. Lindorfer, M. Neugschwandtner, and C. Platzer.**  
    "Marvin: Efficient and comprehensive mobile app classification through static and dynamic analysis."  
    In Proc. COMPSAC, 2015.

50. **M. Lindorfer, M. Neugschwandtner, L. Weichselbaum, Y. Fratantonio, V. Van Der Veen, and C. Platzer.**  
    "Andrubis–1,000,000 apps later: A view on current Android malware behaviors."  
    In Proc. Workshop BADGERS, 2014.

51. **K. Lu, Z. Li, V. P. Kemerlis, Z. Wu, L. Lu, C. Zheng, Z. Qian, W. Lee, and G. Jiang.**  
    "Checking more and alerting less: Detecting privacy leakages via enhanced data-flow analysis and peer voting."  
    In Proc. NDSS.

52. **S. Malek, N. Esfahani, T. Kacem, R. Mahmood, N. Mirzaei, and A. Stavrou.**  
    "A framework for automated security testing of Android applications on the cloud."  
    In Proc. SERE-C, 2012.

53. **N. Nethercote and J. Seward.**  
    "Valgrind: A framework for heavyweight dynamic binary instrumentation."  
    In Proc. ACM PLDI, 2007.

54. **X. Pan, Y. Zhongyang, Z. Xin, B. Mao, and H. Huang.**  
    "Defensor: Lightweight and efficient security-enhanced framework for Android."  
    In Proc. TrustCom, 2014.

55. **F. Peng, Z. Deng, X. Zhang, D. Xu, Z. Lin, and Z. Su.**  
    "X-Force: Force-executing binary programs for security applications."  
    In Proc. USENIX Security, 2014.

56. **T. Petsas, G. Voyatzis, E. Athanasopoulos, M. Polychronakis, and S. Ioannidis.**  
    "Rage against the virtual machine: Hindering dynamic analysis of Android malware."  
    In Proc. ACM EuroSys, 2014.

57. **QEMU.**  
    <https://goo.gl/EUgpkB>.

58. **C. Qian, X. Luo, Y. Le, and G. Gu.**  
    "Vulhunter: Toward discovering vulnerabilities in Android applications."  
    IEEE Micro, 35(1), 2015.

59. **C. Qian, X. Luo, Y. Shao, and A. Chan.**  
    "On tracking information flows through JNI in Android applications."  
    In Proc. IEEE/IFIP DSN, 2014.

60. **S. Rasthofer, S. Arzt, E. Lovat, and E. Bodden.**  
    "Droidforce: Enforcing complex, data-centric, system-wide policies in Android."  
    In Proc. ARES, 2014.

61. **S. Rasthofer, S. Arzt, M. Miltenberger, and E. Bodden.**  
    "Harvesting runtime values in Android applications that feature anti-analysis techniques."  
    In Proc. NDSS, 2016.

62. **V. Rastogi, Y. Chen, and W. Enck.**  
    "Appsplayground: Automatic security analysis of smartphone applications."  
    In Proc. CODASPY, 2013.

63. **A. Sadeghi, H. Bagheri, J. Garcia, and S. Malek.**  
    "A taxonomy and qualitative comparison of program analysis techniques for security assessment of Android software."  
    IEEE Transactions on Software Engineering, 43(6), 2016.

64. **S. Sakamoto, K. Okuda, R. Nakatsuka, and T. Yamauchi.**  
    "Droidtrack: Tracking and visualizing information diffusion for preventing information leakage on Android."  
    Journal of Internet Services and Information Security, 4(2), 2014.

65. **D. Schreckling, J. Köstler, and M. Schaff.**  
    "Kynoid: Real-time enforcement of fine-grained, user-defined, and data-centric security policies for Android."  
    Information Security Technical Report, 17(3), 2013.

66. **J. Schütte, R. Fedler, and D. Titze.**  
    "Condroid: Targeted dynamic analysis of Android applications."  
    In Proc. AINA, 2015.

67. **J. Schütte, D. Titze, and J. De Fuentes.**  
    "Appcaulk: Data leak prevention by injecting targeted taint tracking into Android apps."  
    In Proc. TrustCom, 2014.

68. **M. Spreitzenbarth, F. Freiling, F. Echtler, T. Schreck, and J. Hoffmann.**  
    "Mobile-sandbox: Having a deeper look into Android applications."  
    In Proc. SAC, 2013.

69. **M. Sun, J. Lui, and Y. Zhou.**  
    "Blender: Self-randomizing address space layout for Android apps."  
    In Proc. RAID, 2016.

70. **M. Sun and G. Tan.**  
    "Nativeguard: Protecting Android applications from third-party native libraries."  
    In Proc. ACM WiSec, 2014.

71. **M. Sun, T. Wei, and J. Lui.**  
    "Taintart: A practical multi-level information-flow tracking system for Android runtime."  
    In Proc. ACM CCS, 2016.

72. **K. Tam, A. Feizollah, N. Anuar, R. Salleh, and L. Cavallaro.**  
    "The evolution of Android malware and Android analysis techniques."  
    ACM Computing Surveys, 49(4), 2017.

73. **K. Tam, S. Khan, A. Fattori, and L. Cavallaro.**  
    "Copperdroid: Automatic reconstruction of Android malware behaviors."  
    In Proc. NDSS, 2015.

74. **T. Vidas and N. Christin.**  
    "Evading Android runtime analysis via sandbox detection."  
    In Proc. ACM ASIACCS, 2014.

75. **X. Wang, K. Sun, Y. Wang, and J. Jing.**  
    "Deepdroid: Dynamically enforcing enterprise policy on Android devices."  
    In Proc. NDSS, 2015.

76. **X. Wei, L. Gomez, I. Neamtiu, and M. Faloutsos.**  
    "Profiledroid: Multi-layer profiling of Android applications."  
    In Proc. MobiCom, 2012.

77. **Z. Wei and D. Lie.**  
    "Lazytainter: Memory-efficient taint tracking in managed runtimes."  
    In Proc. SPSM, 2014.

78. **W. Wu and S. Hung.**  
    "Droiddolphin: A dynamic Android malware detection framework using big data and machine learning."  
    In Proc. RACS, 2014.

79. **M. Xia, L. Gong, Y. Lyu, Z. Qi, and X. Liu.**  
    "Effective real-time Android application auditing."  
    In Proc. IEEE SP, 2015.

80. **M. Xu, C. Song, Y. Ji, M. Shih, K. Lu, C. Zheng, R. Duan, Y. Jang, B. Lee, C. Qian, S. Lee, and T. Kim.**  
    "Toward engineering a secure Android ecosystem: A survey of existing techniques."  
    ACM Computing Surveys, 49(2), 2016.

81. **R. Xu, H. Saïdi, and R. Anderson.**  
    "Aurasium: Practical policy enforcement for Android applications."  
    In Proc. USENIX Security, 2012.

82. **L. Xue, X. Luo, L. Yu, S. Wang, and D. Wu.**  
    "Adaptive unpacking of Android apps."  
    In Proc. ICSE, 2017.

83. **L. Yan and H. Yin.**  
    "Droidscope: Seamlessly reconstructing OS and Dalvik semantic views for dynamic Android malware analysis."  
    In Proc. USENIX Security, 2012.

84. **C. Yang, G. Yang, A. Gehani, V. Yegneswaran, D. Tariq, and G. Gu.**  
    "Using provenance patterns to vet sensitive behaviors in Android apps."  
    In Proc. SecureComm, 2015.

85. **W. Yang, Y. Zhang, J. Li, J. Shu, B. Li, W. Hu, and D. Gu.**  
    "Appspear: Bytecode decrypting and dex reassembling for packed Android malware."  
    In Proc. RAID, 2015.

86. **Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang.**  
    "Appintent: Analyzing sensitive data transmission in Android for privacy leakage detection."  
    In Proc. ACM CCS, 2013.

87. **M. Zhang and H. Yin.**  
    "Efficient, context-aware privacy leakage confinement for Android applications without firmware modding."  
    In Proc. ASIACCS, 2014.

88. **Y. Zhang, X. Luo, and H. Yin.**  
    "Dexhunter: Toward extracting hidden code from packed Android applications."  
    In Proc. ESORICS, 2015.

89. **Y. Zhang, M. Yang, B. Xu, Z. Yang, G. Gu, P. Ning, X. S. Wang, and B. Zang.**  
    "Vetting undesirable behaviors in Android apps with permission use analysis."  
    In Proc. ACM CCS, 2013.

90. **S. Zhao, X. Li, G. Xu, L. Zhang, and Z. Feng.**  
    "Attack tree based Android malware detection with hybrid analysis."  
    In Proc. TrustCom, 2014.

91. **M. Zheng, M. Sun, and J. Lui.**  
    "Droidtrace: A ptrace-based Android dynamic analysis system with forward execution capability."  
    In Proc. IEEE IWCMC, 2014.

92. **Y. Zhou and X. Jiang.**  
    "Dissecting Android malware: Characterization and evolution."  
    In Proc. IEEE SP, 2012.