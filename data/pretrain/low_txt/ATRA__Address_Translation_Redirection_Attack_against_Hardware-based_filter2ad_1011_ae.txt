### Address Translation Redirection Attack (ATRA) and Its Implications

#### Context and Mechanism
The Control Register 3 (CR3) that contains the address of the relocated Page Global Directory (PGD) will be replaced with the unmodified, saved CR3 value, which is stored in a memory region protected by the monitor. This action causes the Register-bound ATRA effect to disappear before the target kernel object's Physical Address (PA) of Process A's PGDPA Copy of A’s PGD, Process A, Process B, and Time PA of B’s PGDPA Copy of B’s PGD are inspected. During a context switch, the CR3 value is updated, and upon entering kernel mode, the PA is inspected. 

Hypercheck has described an ATRA-like issue as a "copy-and-change" attack, demonstrating how well-known IDTR hooking attacks can be detected. Previous works on hypervisor-based Virtual Machine Introspection (VMI) have acknowledged the potential for ATRA-like monitoring evasion attacks. Sharif et al. [19] noted that any code with kernel privileges could relocate a page table by modifying the CR3 register value. Payne et al. [2] claimed that relocating the dispatcher component of their monitoring scheme would require significant effort, as it is in a 4MB page with Windows XP kernel components. Although the possibility of ATRA-like attacks has been mentioned in prior studies [2, 19], there has not been a practical implementation and evaluation of ATRA's effectiveness. We highlight that ATRA might also affect hypervisor-based VMI tools, and we hope that the mitigation strategies (described in Section 4) are considered in the design of future VMI tools. Further discussion is provided in Appendix A.2.

#### Conclusion
We presented the Address Translation Redirection Attack (ATRA), which exploits limitations in existing hardware-based external monitors to completely circumvent all current monitoring schemes. We implemented two types of ATRA: (i) Memory-bound ATRA and (ii) Register-bound ATRA. To illustrate the severity of the attack, we provided a set of possible ATRA mitigations and demonstrated that ATRA can bypass all such countermeasures, including theoretical ones.

In our implementation, we successfully manipulated the address translation mechanism in the Linux kernel without altering the memory regions monitored by hardware-based external monitors. Our benchmarks showed that ATRA does not induce any noticeable performance degradation in the operating system. As long as the limitation of hardware-based external monitors remains unresolved, any future advancements in their monitoring capabilities will be ineffective. We hope this work will encourage researchers to design more trustworthy hardware-based external monitors, addressing the ATRA mitigation challenges presented in this paper.

#### Acknowledgements
This research was supported by the Ministry of Trade, Industry and Energy (MOTIE), Korea, under the Brain Scouting Program (HB609-12-3002) by the National IT Promotion Agency (NIPA). This research is also based on work supported by the Software R&D Center, Samsung Electronics.

#### References
[1] Z. Wang, X. Jiang, W. Cui, and P. Ning, “Countering kernel rootkits with lightweight hook protection,” in Proceedings of the 16th ACM conference on Computer and communications security, ser. CCS ’09, 2009, pp. 545–554.
[2] B. D. Payne, M. Carbone, M. Sharif, and W. Lee, “Lares: An architecture for secure active monitoring using virtualization,” in Proceedings of the 2008 IEEE Symposium on Security and Privacy, ser. SP ’08. Washington, DC, USA: IEEE Computer Society, pp. 233–247.
[3] O. S. Hofmann, A. M. Dunn, S. Kim, I. Roy, and E. Witchel, “Ensuring operating system kernel integrity with osck,” in Proceedings of the sixteenth international conference on Architectural support for programming languages and operating systems, ser. ASPLOS ’11. New York, NY, USA: ACM, pp. 279–290.
[4] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “Secvisor: a tiny hypervisor to provide lifetime kernel code integrity for commodity OSes,” in Proceedings of twenty-first ACM SIGOPS symposium on Operating systems principles, ser. SOSP ’07. New York, NY, USA: ACM, pp. 335–350.
[5] N. L. Petroni, Jr. and M. Hicks, “Automated detection of persistent kernel control-flow attacks,” in Proceedings of the 14th ACM conference on Computer and communications security, ser. CCS ’07. New York, NY, USA: ACM, pp. 103–115.
[6] X. Jiang, X. Wang, and D. Xu, “Stealthy malware detection through VMM-based ‘out-of-the-box’ semantic view reconstruction,” in Proceedings of the 14th ACM conference on Computer and communications security, ser. CCS ’07, 2007, pp. 128–138.
[7] N. L. Petroni, Jr., T. Fraser, J. Molina, and W. A. Arbaugh, “Copilot - a coprocessor-based kernel runtime integrity monitor,” in Proceedings of the 13th conference on USENIX Security Symposium - Volume 13, ser. SSYM’04. Berkeley, CA, USA: USENIX Association, pp. 13–13.
[8] H. Moon, H. Lee, J. Lee, K. Kim, Y. Paek, and B. B. Kang, “Vigilare: toward snoop-based kernel integrity monitor,” in Proceedings of the 2012 ACM conference on Computer and communications security, ser. CCS ’12. New York, NY, USA: ACM, pp. 28–37.
[9] H. Lee, H. Moon, D. Jang, K. Kim, J. Lee, Y. Paek, and B. B. Kang, “Ki-mon: a hardware-assisted event-triggered monitoring platform for mutable kernel object,” in Proceedings of the 22nd USENIX conference on Security, ser. SEC’13, 2013, pp. 511–526.
[10] Z. Liu, J. Lee, J. Zeng, Y. Wen, Z. Lin, and W. Shi, “CPU transparent protection of OS kernel and hypervisor integrity with programmable DRAM,” in Proceedings of the 40th Annual International Symposium on Computer Architecture, ser. ISCA ’13, 2013, pp. 392–403.
[11] Y. Kinebuchi, S. Butt, V. Ganapathy, L. Iftode, and T. Nakajima, “Monitoring integrity using limited local memory,” Information Forensics and Security, IEEE Transactions on, vol. 8, no. 7, pp. 1230–1242, 2013.
[12] A. T. Rafal Wojtczuk, Joanna Rutkowska. Xen 0wning trilogy.
[13] Xen: Security vulnerabilities. [Online]. Available: http://www.cvedetails.com/vulnerability-list/vendor\ id-6276/XEN.html
[14] VMware: Vulnerability statistics. [Online]. Available: http://www.cvedetails.com/vendor/252/VMware.html
[15] Vulnerability report: Xen 3.x. [Online]. Available: http://secunia.com/advisories/product/15863
[16] Vulnerability report: VMware ESX Server 3.x.
[17] J. Wang, A. Stavrou, and A. Ghosh, “Hypercheck: A hardware-assisted integrity monitor,” in Recent Advances in Intrusion Detection, ser. Lecture Notes in Computer Science, S. Jha, R. Sommer, and C. Kreibich, Eds. Springer Berlin / Heidelberg, pp. 158–177, 10.1007/978-3-642-15512-3-9.
[18] S. Jin and J. Huh, “Secure MMU: Architectural support for memory isolation among virtual machines,” in Dependable Systems and Networks Workshops (DSN-W), 2011 IEEE/IFIP 41st International Conference on, 2011, pp. 217–222.
[19] M. I. Sharif, W. Lee, W. Cui, and A. Lanzi, “Secure in-VM monitoring using hardware virtualization,” in Proceedings of the 16th ACM conference on Computer and communications security, ser. CCS ’09, 2009, pp. 477–487.
[20] J. D. McCalpin, “Memory bandwidth and machine balance in current high performance computers,” IEEE Computer Society Technical Committee on Computer Architecture (TCCA) Newsletter, pp. 19–25, Dec. 1995.
[21] Byte-UnixBench: A Unix benchmark suite. [Online]. Available: http://code.google.com/p/byte-unixbench/
[22] Intel 64 and IA-32 Architectures Software Developer’s Manual, INTEL, Aug 2012.
[23] D. P. Bovet and M. Cesati, Understanding the Linux Kernel, 2nd ed. O’Reilly and Associates, Dec. 2002.
[24] IDT hooking. [Online]. Available: http://resources.infosecinstitute.com/hooking-idt/
[25] The LXR project. [Online]. Available: http://lxr.sourceforge.net/en/index.shtml
[26] Stealth. The Adore Rootkit version 0.42. [Online]. Available: http://teso.scene.at/releases.php
[27] System calls and rootkits. [Online]. Available: http://lwn.net/Articles/297500/

#### Appendix A.2: Hypervisor-based Virtual Machine Introspection
Several studies have explored hypervisor-based Virtual Machine Introspection (VMI) for protecting OS kernels from untrusted code, such as rootkits. These VMI schemes can be classified into two approaches based on their objectives:

1. **Behavior Detection and Analysis**: Prior works on detecting and analyzing rootkit behaviors by extracting semantics of kernel objects [3, 6, 28–32] emulate the Memory Management Unit (MMU) for virtual address translation. Such MMU emulations use the page table of either the guest OS or hypervisor to retrieve the corresponding host-physical address of the object.

2. **Code and Data Protection**: Prior studies on protecting the code and data of the OS kernel [1, 2, 4, 19, 33, 34] utilize the hypervisor's page protection mechanism.

We hypothesize that ATRA can affect some hypervisor-based VMI tools under certain circumstances. For example, ATRA might evade the monitoring of VMI tools that depend on the guest page table for virtual-to-physical translation of the monitored objects, especially if they do not monitor the CR3 register [6, 30]. The monitor would not be aware of the relocated page tables and would reference the unused old page tables. However, if the guest page table walking starts from the monitored context's CR3 value, ATRA might be detected.

VMI tools built on hypervisors that employ Shadow Page Tables (SPT) have the necessary capabilities to implement countermeasures against ATRA. Specifically, these hypervisors can trap register changes, and SPT operates by write-protecting the guest page tables and trapping all modification attempts. We emphasize that VMI tools should consider countermeasures against ATRA for reliable introspection. On the other hand, a new memory virtualization technology, often referred to as Nested Paging, has emerged to reduce the performance overhead of SPT. Nested Paging, also known as Extended Page Tables (EPT) in Intel's terminology and Nested Page Tables (NPT) in AMD's, allows the guest kernel to modify its page tables. While the removal of write-protection in guest page tables might make ATRA mitigation more challenging, further investigation is necessary.

[28] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Giffin, and W. Lee, “Virtuoso: Narrowing the semantic gap in virtual machine introspection,” in Security and Privacy (SP), 2011 IEEE Symposium on, 2011, pp. 297–312.
[29] J. Rhee, R. Riley, D. Xu, and X. Jiang, “Kernel malware analysis with un-tampered and temporal views of dynamic kernel memory,” in Proceedings of the 13th international conference on Recent advances in intrusion detection, ser. RAID’10, 2010, pp. 178–197.
[30] B. Payne, M. de Carbone, and W. Lee, “Secure and flexible monitoring of virtual machines,” in Computer Security Applications Conference, 2007. ACSAC 2007. Twenty-Third Annual, 2007, pp. 385–397.
[31] A. Lanzi, M. I. Sharif, and W. Lee, “K-tracer: A system for extracting kernel malware behavior.” in 16th Symposium on Network and Distributed System Security, ser. NDSS ’09, 2009.
[32] Y. Fu and Z. Lin, “Space traveling across VM: Automatically bridging the semantic gap in virtual machine introspection via online kernel data redirection,” in Security and Privacy (SP), 2012 IEEE Symposium on, 2012, pp. 586–600.
[33] A. Srivastava and J. Giffin, “Efficient protection of kernel data structures via object partitioning,” in Proceedings of the 28th Annual Computer Security Applications Conference, ser. ACSAC ’12, 2012, pp. 429–438.
[34] M. Grace, Z. Wang, D. Srinivasan, J. Li, X. Jiang, Z. Liang, and S. Liakh, “Transparent protection of commodity OS kernels using hardware virtualization,” in Security and Privacy in Communication Networks. Springer, 2010, pp. 162–180.

#### Appendix A.1: ATRA-Enabled Rootkit Examples
**System Call Table (SCT) Hooking Rootkit**:
System call table hooking is a common type of rootkit attack [27]. If a rootkit manipulates the system call table, it can achieve various malicious activities, such as bypassing antivirus software and hiding its existence from the process list. Specifically, to hide its own process information, it needs to manipulate related system calls used for retrieving process information. The process status reporting tool, such as `ps`, reads the `/proc` directory to retrieve PIDs of all processes running in the system. By hijacking the `read` system call, the attacker can hide information about its own process by deleting its PID from the retrieved result.

One might think that system call table manipulation can be easily mitigated by making the system call table immutable after the system's boot process, and this immutable memory region can be protected by hardware-based external monitors. However, we implemented a rootkit with ATRA that successfully manipulates the system call table without involving any changes in protected memory regions, subverting the naive defense mechanism. In our implementation, it first launches ATRA on the system call table and then hooks the `sys_getuid` and `sys_geteuid` system call entries into its internal function. Similarly, the rootkit can manipulate other kernel status information, such as network connection and file system information.

**Loadable Kernel Module (LKM) Hiding Rootkit**:
The LKM hiding technique, as shown in Adore-NG [26], is another typical real-world rootkit example. A rootkit can achieve this attack by removing metadata from the doubly linked list of kernel modules while keeping the actual data in memory. The LKM hiding rootkit can hide a kernel module from reporting tools such as `lsmod`.

Hardware-based external monitors capable of tracing dynamic kernel data structures can detect this attack. However, by launching LKM hiding with ATRA, this event becomes invisible to the monitor. We implemented an LKM hiding rootkit with ATRA, which manipulates the linked list of the `struct module` kernel data structure containing metadata of inserted kernel modules. In our implementation, the rootkit launches ATRA for the targeted `struct module` kernel data structure object, leading the subsequent LKM hiding attack to occur outside the view of the monitor.