### 1. Introduction

In this section, we discuss the security implications of improperly protected TLS private keys and the potential for more powerful attacks with elevated privileges. We assume that gaining root access on the appliance is significantly more difficult than compromising low-privileged accounts. It is important to note that, in most cases, the appliance is a standard Linux or Windows system with specialized software or kernel modifications, leading to a large trusted code base (TCB).

### 2. Related Work

Several recent studies have focused on TLS interception, certificate validation, and forged TLS certificates. Below, we provide a brief review of the most relevant work.

#### Interception

- **Jarmoc [41]**: Uncovered several TLS vulnerabilities in the certificate validation process of four network appliances using a test framework with seven validation checks.
- **Dormann [6, 17]**: Used badssl.com’s tests to identify vulnerabilities in two network appliances, revealing flaws in certificate validation and acceptance of insecure TLS parameters. Dormann also compiled a list of potentially affected software and hardware appliances.
- **Carnavalet and Mannan [32]**: Proposed an extensive framework for analyzing client-end TLS intercepting applications, such as antivirus and parental control software. They analyzed 14 applications under Windows 7, uncovering major flaws including pre-generated certificates, faulty certificate validation, insecure private key protection, improper TLS parameter mapping, and vulnerabilities to known TLS attacks.
- **Durumeric et al. [35]**: Extended the analysis to include five TLS proxies under Mac OS and 12 network appliances. They found that TLS proxies under Mac OS introduce more flaws compared to their Windows counterparts. They also demonstrated that web servers can detect TLS interception through HTTP User-Agent headers and protocol fingerprinting.
- **US-CERT [22]**: Published an alert in March 2017 to raise awareness about the dangers of TLS interception and its impact.
- **Ruoti et al. [44]**: Conducted a survey of 1,976 individuals regarding their opinions on TLS inspection. Over 60% of respondents had a negative view of TLS inspection, citing malicious hackers and governments as primary concerns.

#### Certificate Scans

- **Huang et al. [40]**: Analyzed over three million real-world TLS connections to Facebook, finding that approximately 0.2% used forged certificates, primarily due to antivirus software, network appliances, and malware.
- **O’Neill et al. [42]**: Analyzed over 15 million real-world TLS connections using Google AdWords campaigns. They found that nearly 0.4% of the TLS connections were intercepted by TLS proxies, mostly by antivirus products and network appliances, with the highest interception rates in France and Romania. Some Issuer Organization fields in the certificates matched names of malware, such as 'Sendori, Inc', 'Web-MakerPlus Ltd', and 'IopFailZeroAccessCreate'.

#### Certificate Validation

- **Fahl et al. [36]**: Analyzed 13,500 free Android apps for MITM vulnerabilities, finding that 8% contained potentially vulnerable TLS modules. Manual inspection of 100 apps revealed that 41 were susceptible to MITM attacks, capturing credentials for widely used commercial and social websites like Google, Facebook, Twitter, PayPal, and several banks. The attacks exploited flaws in the certificate validation process, where many apps ignored the chain of trust and accepted self-signed certificates.
- **Georgiev et al. [37]**: Demonstrated that several widely used applications and development libraries, such as Amazon’s EC2 Java library, Amazon and PayPal’s SDK, osCommerce, and Java web services, suffered from certificate validation vulnerabilities, leading to generic MITM attacks. These vulnerabilities were attributed to poorly designed APIs, such as JSSE and OpenSSL.
- **Brubaker et al. [30]**: Developed an automated approach for testing the certificate validation modules of well-known TLS implementations. They scanned the Internet for servers with port 443 open using ZMap [25], collected available certificates, and permuted the certificate parameters to create 8 million Frankencerts. Using these, they found over 200 discrepancies in commonly used TLS implementations like OpenSSL, GnuTLS, and NSS.
- **He et al. [38]**: Designed an automated static analysis tool for analyzing TLS libraries and applications, evaluating Ubuntu 12.04 TLS packages and discovering 27 zero-day TLS vulnerabilities related to faulty certificate/hostname validation.
- **Sivakorn et al. [45]**: Proposed a black-box hostname verification testing framework for TLS libraries and applications, evaluating the hostnames accepted by seven TLS libraries and applications and finding eight violations, including invalid hostname characters, incorrect null character parsing, and incorrect wildcard parsing.
- **Chau et al. [31]**: Used a symbolic execution approach to test the certificate validation process of nine TLS libraries, comparing them to RFC 5280 [39]. They found 48 instances of noncompliance, with libraries ignoring several X509 certificate parameters, such as pathLenConstraint, keyUsage, extKeyUsage, and 'notBefore' validity dates.

#### Comparison

The most closely related work is by Durumeric et al. [35], which focuses on fingerprinting TLS interception and providing a brief security measurement for several HTTPS proxies. In contrast, our work develops an extensive framework dedicated to analyzing TLS interception on network appliances. While Durumeric et al. checked the highest TLS version supported by a target proxy, we examine all supported versions and their respective mappings to the client side. Our certificate validation tests are more comprehensive, including 32 distinct tests. We also include new tests, such as checking the content of the CA trusted store, examining the security of private signing keys, and validating pre-generated root certificates.

### 3. Proposed Framework

In this section, we present the setup and architecture of the proposed framework, along with the major components and tests included.

#### 3.1 Test Setup/Architecture

Our framework consists of three virtual machines: a client, a web server, and a TLS intercepting network appliance (Figure 1). 

- **Client Machine (Windows 7 SP1)**: Located behind the network appliance, updated with all available Windows updates, and equipped with up-to-date Mozilla Firefox, Google Chrome, and Internet Explorer 11. The TLS proxy’s root certificate is inserted into the client’s trusted root stores (both Windows and Mozilla).
- **Web Server (Apache under Ubuntu 16.04)**: Configured to accept HTTP requests on port 80 and HTTPS requests on port 443, with all port 80 requests redirected to port 443. Initially configured to accept all TLS/SSL protocol versions and cipher suites. The server name is set to apache.host, and faulty certificates are generated using OpenSSL and served from the Apache web server. The patched howsmyssl.com code [10] is also hosted here.
- **Network Appliance**: Available as a trial version from the vendor’s website, with a pre-configured OS. Configured to intercept TLS traffic as a transparent or explicit proxy, depending on the available modules. Transparent proxies are prioritized as they do not require client-side network configuration. Services such as firewall and URL filtering are disabled to avoid interferences. Root CA certificates corresponding to our faulty test certificates are injected into the trusted stores of the network appliances.

A local DNS entry for apache.host is set up on the client, web server, and network appliance machines. This ensures the correct mapping of the test server’s domain name to its IP address.

#### 3.2 CA Trusted Store

To inject custom root CA certificates into the TLS proxy's trusted store, we first locate the store. If the appliance allows adding custom root CAs via its user interface, the process is straightforward. Otherwise, we attempt to gain command-line access through SSH. If SSH is unavailable, we mount the virtual disk image on a separate Linux machine, search the filesystem for digital certificates, and delete the content of each file while trying to access regular websites from the client. When an "untrusted issuer" warning appears, we identify the exact location of the trusted store.

We then inject the custom crafted root certificates into the trusted CA stores. We also parse the certificates to identify expired ones, short key lengths (e.g., RSA-512 and RSA-1024), and root CA certificates from issuers no longer trusted by major browser/OS vendors. Our list includes China Internet Network Information Center (CNNIC [4]), TÜRKTRUST [19], ANSSI [16], woSign [5], Smartcom [5], and Diginotar [3].

#### 3.3 TLS Version Mapping

To test SSL/TLS version acceptance and parameter mapping, we alter the Apache web server’s configuration. We use a valid certificate whose root CA certificate is imported into the client’s trusted stores. We then force one TLS version after another at the web server and visit the web server from the client, documenting the observed versions in the browser’s HTTPS connection information. This methodology allows us to analyze the behavior of the proxy regarding each SSL/TLS version: whether it blocks, allows, or alters the version in the client-to-proxy HTTPS connection.

#### 3.4 Certificate Parameters Mapping

We check if the proxy-to-server certificate parameters are mapped or mirrored to the client-to-proxy certificate parameters, focusing on signature hashing algorithms, certificate key lengths, and EV/DV status.

- **Signature Hashing Algorithms**: We craft multiple valid certificates with different secure hash algorithms (SHA-256, SHA-384, SHA-512) and import their root CA certificates into the client’s trusted stores. We load each certificate and its private key into the web server and visit the web page from the browser, tracking the signature algorithms used in the certificates generated by the TLS proxy.
- **Certificate Key Lengths**: We craft multiple certificates with different key sizes (RSA-2048, RSA-3072, RSA-4096) and import their root CA certificates into the client’s trusted stores. We load each certificate and its private key into the web server and visit the web page from the browser, checking the key length used for the client-to-proxy server certificate generated by the TLS proxy.
- **EV Certificates**: We rely on Twitter’s website to study the network appliance’s behavior regarding EV certificates. We visit twitter.com on the client machine and check the client-to-proxy certificate displayed by the browser. TLS proxies can identify the presence of EV certificates by parsing the content and locating the CA/browser forum’s EV OID: 2.23.140.1.1 [7].

#### 3.5 Cipher Suites

We examine the cipher suites offered by the TLS proxy in the proxy-to-server TLS connection using publicly hosted TLS testing suites, such as howsmyssl.com and the Qualys client test [18]. If the mentioned web pages are not filtered, we use Wireshark to capture the TLS packets and inspect the Client Hello message initiated by the proxy to locate the list of ciphers offered. We compare the list of ciphers offered by the proxy to the list offered by the browsers, learning if the TLS proxy performs cipher suite mirroring or uses a hard-coded list. We also parse the list of ciphers offered by the proxy for weak and insecure ciphers that could lead to vulnerable TLS connections.

#### 3.6 Known TLS Attacks

We test TLS proxies for vulnerabilities against well-known TLS attacks, including BEAST, CRIME, FREAK, Logjam, and Insecure Renegotiation. We use the Qualys SSL Client Test [18] to confirm if the TLS proxy is patched against FREAK, Logjam, and Insecure Renegotiation, and check if TLS compression is enabled, which could result in a possible CRIME attack. For the BEAST attack, we use howsmyssl.com [10] with modifications from Carnavalet and Mannan’s [32] to test proxies supporting TLS 1.2 and 1.1.

#### 3.7 Crafting Faulty Certificates

We use OpenSSL to craft invalid test certificates, specifying apache.host as the Common Name (CN), except for the wrong CN test. Each certificate is deployed on our Apache web server, and the HTTPS web page is requested from the proxied client to observe the TLS proxy’s behavior when exposed to faulty certificates. If a connection is allowed, we consider the proxy at fault. If the proxy replaces the faulty certificate with a valid one, leaving no way for a prudent client to detect the faulty remote certificate, we consider this a serious vulnerability. If the proxy passes the unmodified certificate and relies on client applications to react appropriately, we still consider the proxy at fault because allowing plain, invalid certificates is unjustified, and not all TLS client applications are up-to-date enough to detect the faulty certificates.

When the certificate’s chain of trust contains intermediate certificates, we place the leaf certificate and intermediate certificates at the web server, appending the intermediate certificates’ public keys after the server leaf certificate in SSLCertificateFile. We inject the issuing CA certificates of the crafted certificates into the TLS proxy’s trusted store for all tests, except for the unknown issuer test and the fake GeoTrust test.

The list of invalid certificate validation tests we used (detailed in Appendix A) is compiled from several sources, including [31, 32, 39]:

- **Self-signed Certificate**: A leaf certificate whose issuer is itself.
- **Signature Mismatch**: A leaf certificate with a tempered signature.
- **Fake GeoTrust**: A leaf certificate without an Authority Key Identifier, and whose untrusted issuer has the same subject name as the GeoTrust root CA.
- **Wrong CN**: A leaf certificate with a CN not matching apache.host.
- **Unknown Issuer**: A leaf certificate with an untrusted issuer.
- **Non-CA Intermediate**: An intermediate certificate with the CA basic constraint parameter set to be false.
- **X509v1 Intermediate**: An intermediate X509v1 certificate with no CA basic constraint parameter.
- **Invalid pathLenConstraint**: An intermediate certificate with a pathLenConstraint of 0 issuing another intermediate certificate.
- **Bad Name Constraint Intermediate**: An intermediate certificate constrained for a different domain issues a leaf certificate for apache.host.
- **Unknown Critical X509v3 Extension**: A leaf certificate with an unknown certificate extension object identifier (OID), set to critical.
- **Malformed Extension Values**: A leaf certificate with an atypical value for a certificate extension.
- **Revoked**: A leaf certificate issued by a revoked issuer.
- **Expired Leaf, Intermediate, and Root**: Three tests with either an expired leaf, intermediate, or root certificate.
- **Not Yet Valid Leaf, Intermediate, and Root**: Three tests with either a leaf, intermediate, or root certificate that is not yet valid.
- **Wrong keyUsage in Leaf and Root**: Two tests with invalid keyUsage parameters for a root and a leaf certificate.
- **Wrong extKeyUsage in Leaf and Root**: Two tests with invalid extKeyUsage parameters for a root and a leaf certificate.
- **Short Key Length in Root and Leaf**: Multiple tests using short key lengths.