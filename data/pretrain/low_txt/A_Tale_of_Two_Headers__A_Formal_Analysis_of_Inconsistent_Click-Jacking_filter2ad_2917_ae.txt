### Behavior of the Proxy

The proxy operates as follows:

1. **Consolidation of XFO Headers:**
   - If multiple `X-Frame-Options` (XFO) headers are present in the response `r`, they are first consolidated into a single XFO header, with the directives listed in a comma-separated format.

2. **Normalization of XFO Header:**
   - After consolidation, the response `r` is guaranteed to contain exactly one XFO header. If this header contains a comma-separated list of directives, it is replaced by a single directive that enforces the same security restrictions as the conjunction of the original directives. This normalization is always possible due to the simplification rules outlined in Table 8.

3. **Attachment of CSP Header:**
   - The proxy then attaches a new Content Security Policy (CSP) header to `r` that enforces the same framing control restrictions as the sanitized XFO header. This is straightforward because CSP is more expressive than XFO and does not conflict with other CSP headers that may be present in `r`. When multiple CSP headers are sent, their conjunction is enforced, and no additional `frame-ancestors` directive is added.

### Handling CSP Headers with `frame-ancestors` Directive

If the response `r` contains CSP headers with a `frame-ancestors` directive, the proxy behaves as follows:

1. **Removal of XFO Headers:**
   - All XFO headers in `r` are removed.

2. **Computation of Union of Source Expressions:**
   - The proxy computes the union of the source expressions whitelisted in all the `frame-ancestors` directives contained in the CSP headers of `r`.

3. **Determination of XFO Directive:**
   - If CSP denies framing, `r` is extended with an XFO header containing the `DENY` directive.
   - If CSP allows only same-origin framing, `r` is extended with an XFO header containing the `SAMEORIGIN` directive.
   - Otherwise, the proxy checks if the `Referer` header of `r` contains a URL whitelisted by any of the source expressions identified in step 2:
     - If the `Referer` header contains a whitelisted URL, `r` is extended with an XFO header containing an `ALLOW-FROM` directive set to the origin of the `Referer` header.
     - If the `Referer` header is absent or does not contain a whitelisted URL, the XFO header is set to `DENY`.
   - If `r` lacks the `Referer` header, the proxy conservatively sets the XFO header to `DENY`.

### Consistency of Framing Control Policies

The proxy ensures the consistency of framing control policies across the set of tested browsers by equating the security guarantees of XFO and CSP (up to double framing). Although Opera Mini does not support CSP or `ALLOW-FROM`, the proxy still manages to rectify its limitations:
- If the `Referer` of the request is set to a whitelisted URL, the proxy sets XFO to the corresponding `ALLOW-FROM` directive, which is ignored by Opera Mini, allowing framing.
- Otherwise, the proxy sets XFO to `DENY`, preventing the page from being framed.

### Prioritization of CSP over XFO

In our design, we prioritize CSP headers over XFO headers when both are present, as CSP is the preferred method for enforcing framing control in modern browsers. This occasionally results in the proxy relaxing security restrictions beyond the least privilege. For example, if a page sets XFO to `DENY` and CSP allows same-origin framing, XFO will be relaxed to `SAMEORIGIN`. However, this is sensible from a security perspective, as modern browsers already allow same-origin framing. Our dataset supports this, showing only 13 policies where XFO was tighter than CSP and CSP was configured insecurely (see Table 7).

### Impact of Referrer-Policy

The `Referer` header may be stripped when controlled through the `Referrer-Policy` [16], which would disable the possibility of performing `Referer` sniffing in the proxy. However, `Referrer-Policy` is only supported in browsers that also support the `frame-ancestors` directive of CSP. Since the proxy relies on `Referer` sniffing only in the presence of `frame-ancestors`, the `DENY` directive placed in the absence of the `Referer` header would be overridden by CSP in all cases.

After implementing our proxy, we tested it against the full set of test cases in Section 4.2, confirming that the proxy behaves as expected and enforces the same security restrictions across the entire pool of browsers.

### Related Work

#### CSP and XFO for Framing Control
- **Luo et al. (2019)**: Studied the evolution of mobile browsers and their support for client-side security mechanisms, documenting the interplay between CSP and XFO. They noted that some mobile browsers did not prioritize CSP over XFO in the past.
- **Roth et al. (2019)**: Analyzed the evolution of CSP from 2012 to 2018, indicating that CSP has become more popular as a protection mechanism against click-jacking. They evaluated the dangers of inconsistent support for `ALLOW-FROM` and CSP in different browsers.

Our work extends these studies by:
- Formally defining the problem of inconsistencies in framing control policies.
- Focusing on both desktop and mobile browsers, exposing many new and unreported dangerous implementations of the underspecified XFO header.
- Performing an in-depth analysis of root causes of inconsistencies, their security implications, and potential countermeasures.
- Implementing and releasing a server-side proxy designed to retrofit security in existing web applications.

#### Click-Jacking Protection and Attacks
- **Rydstedt et al. (2010)**: Studied the usage of frame-busting scripts in the Alexa Top 500 sites, showing that JavaScript-based mechanisms were trivial to bypass.
- **Balduzzi et al. (2010)**: Built a system to detect click-jacking based on the assumption that elements should not overlap when clicked.
- **Lekies et al. (2012)**: Highlighted techniques for bypassing existing defenses and showed the shortcomings of XFO for fine-grained framing control.
- **Huang et al. (2012)**: Proposed INCONTEXT, a system where applications could mark specific elements as sensitive, protecting them from forced clicks.
- **Akhawe et al. (2014)**: Generalized click-jacking to perceptual UI attacks, showing how users could be tricked into clicking unwanted elements while seemingly playing a benign game.

#### Inconsistencies in Web Security
- **Singh et al. (2010)**: Studied access control policies, particularly parts of the Same Origin Policy (SOP), and found inconsistencies in existing web browsers.
- **Schwenk et al. (2017)**: Exposed dangerous inconsistencies in modern browsers.
- **Hothersall-Thomas et al. (2015)**: Proposed automated testing to catch bugs in client-side security mechanisms.
- **Chen et al. (2016)**: Investigated the handling of multiple `Host` headers in CDNs and origin servers, showing differences in understanding the requested host.
- **Nguyen et al. (2019)**: Showed that inconsistencies in allowed header lengths or control characters could lead to cache-poisoned Denial of Service attacks.
- **Kettle (2019)**: Demonstrated HTTP Desync attacks using multiple `Content-Length` headers and conflicting `Transfer-Encoding`.

#### Inconsistent Adoption of Security Mechanisms
- **Mendoza et al. (2018)**: Studied the inconsistent adoption of security mechanisms in the mobile and desktop versions of the same website, showing that the insecurity of a mobile site could be exploited to target the desktop site.

### Conclusion

In this paper, we presented the first comprehensive analysis of inconsistencies in framing control policies. Our investigation was based on a formal framework, which led to the implementation of a real-world policy analyzer called FRAMECHECK. Our analysis of 10,000 websites from the Tranco list showed that around 10% of distinct framing control policies are inconsistent and often provide no protection to at least one browser. We proposed countermeasures, including recommendations for web developers and browser vendors, and implemented a server-side proxy to retrofit security in existing web applications. We are currently disclosing the security issues found to affected browser vendors and site operators.

### Future Work

- Extend the analysis to uncover inconsistencies between the desktop and mobile versions of the same website.
- Generalize the formal framework to other client-side security mechanisms.
- Conduct a systematic analysis of the compatibility impact of proposed countermeasures, requiring collaboration with browser vendors.

### Acknowledgements

We thank the reviewers for their advice and Adam Doup√© for his guidance. We also thank Alexander Fink for discussions on the proxy's network traffic interception.

### References

[1] Akhawe, D., He, W., Li, Z., Moazzezi, R., & Song, D. (2014). Clickjacking revisited: A perceptual view of UI security. In USENIX WOOT.

[2] Balduzzi, M., Egele, M., Kirda, E., Balzarotti, D., & Kruegel, C. (2010). A solution for the automated detection of clickjacking attacks. In AsiaCCS.

[3] Bugliesi, M., Calzavara, S., Focardi, R., & Khan, W. (2015). Cookiext: Patching the browser against session hijacking attacks. Journal of Computer Security, 23(4).

[4] Calzavara, S., Rabitti, A., & Bugliesi, M. (2018). Semantics-based analysis of content security policy deployment. TWEB, 12(2).

[5] Chen, J., Jiang, J., Duan, H., Weaver, N., Wan, T., & Paxson, V. (2016). Host of troubles: Multiple host ambiguities in HTTP implementations. In CCS. ACM.

[6] Hothersall-Thomas, C., Maffeis, S., & Novakovic, C. (2015). Browseraudit: Automated testing of browser security features. In ISSTA.

[7] Huang, L.-S., Moshchuk, A., Wang, H. J., Schecter, S., & Jackson, C. (2012). Clickjacking: Attacks and defenses. In USENIX Security.

[8] Internet Engineering Task Force. (n.d.). Hypertext transfer protocol (HTTP/1.1): Message syntax and routing. Retrieved from https://tools.ietf.org/html/rfc7230.

[9] Internet Engineering Task Force. (n.d.). HTTP header field x-frame-options. Retrieved from https://tools.ietf.org/html/rfc7034.

[10] Kettle, J. (n.d.). HTTP Desync Attacks: Reborn. Online Smuggling Request. Retrieved from https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn.

[11] Kranch, M., & Bonneau, J. (2015). Upgrading HTTPS in mid-air: An empirical study of strict transport security and key pinning. In NDSS.

[12] Lekies, S., Heiderich, M., Appelt, D., Holz, T., & Johns, M. (2012). On the fragility and limitations of current browser-provided clickjacking protection schemes. In USENIX WOOT.

[13] Weichselbaum, L., & Spagnuolo, M. (n.d.). CSP - A Successful Mess Between Hardening and Mitigation. Retrieved from https://static.sched.com/hosted_files/locomocosec2019/db/CSP%20-%20A%20Successful%20Mess%20Between%20Hardening%20and%20Mitigation%20%281%29.pdf.

[14] Luo, M., Laperdrix, P., Honarmand, N., & Nikiforakis, N. (2019). Time does not heal all wounds: A longitudinal analysis of security-mechanism support in mobile browsers. In NDSS.

[15] Mendoza, A., Chinprutthiwong, P., & Gu, G. (2018). Uncovering HTTP header inconsistencies and the impact on desktop/mobile websites. In WWW.

[16] Mozilla Developer Network. (n.d.). Referrer-Policy. Retrieved from https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy.

[17] Nguyen, H. V., Lo Iacono, L., & Federrath, H. (2019). Your cache has fallen: Cache-poisoned denial-of-service attack. In CCS.

[18] Le Pochat, V., Van Goethem, T., Tajalizadehkhoob, S., Korczynski, M., & Joosen, W. (2019). Tranco: A research-oriented top sites ranking hardened against manipulation. In NDSS.

[19] Roth, S., Barron, T., Calzavara, S., Nikiforakis, N., & Stock, B. (2020). Complex Security Policy? ‚Äì A Longitudinal Analysis of Deployed Content Security Policies. In NDSS.

[20] Rydstedt, G., Bursztein, E., Boneh, D., & Jackson, C. (2010). Busting frame busting: A study of clickjacking vulnerabilities on popular sites. In W2SP.

[21] Schwenk, J., Niemietz, M., & Mainka, C. (2017). Same-origin policy: Evaluation in modern browsers. In USENIX Security.

[22] Singh, K., Moshchuk, A., Wang, H. J., & Lee, W. (2010). On the incoherencies in web browser access control policies. In IEEE S&P.

[23] Stock, B., Johns, M., Steffens, M., & Backes, M. (2017). How the web tangled itself: Uncovering the history of client-side web (in)security. In USENIX Security.

[24] Van Goethem, T., Chen, P., Nikiforakis, N., Desmet, L., & Joosen, W. (2014). Large-scale security analysis of the web: Challenges and findings. In TRUST.

[25] Weichselbaum, L., Spagnuolo, M., Lekies, S., & Janc, A. (2016). CSP is dead, long live csp! on the insecurity of whitelists and the future of content security policy. In CCS.