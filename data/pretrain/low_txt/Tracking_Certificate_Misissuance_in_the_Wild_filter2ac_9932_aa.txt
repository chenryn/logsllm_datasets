# Tracking Certificate Misissuance in the Wild

**Authors:**
- Deepak Kumar
- Zhengping Wang
- Matthew Hyder
- Joseph Dickinson
- Gabrielle Beck
- David Adrian
- Joshua Mason
- Zakir Durumeric
- J. Alex Halderman
- Michael Bailey

**Affiliations:**
- University of Illinois Urbana-Champaign
- University of Michigan
- Stanford University

**Conference:**
2018 IEEE Symposium on Security and Privacy

## Abstract
Certificate Authorities (CAs) frequently make mechanical errors when issuing certificates. To quantify these errors, we introduce ZLint, a certificate linter that codifies the policies set forth by the CA/Browser Forum Baseline Requirements and RFC 5280, which can be tested in isolation. We applied ZLint to browser-trusted certificates in Censys and systematically analyzed how well CAs construct certificates. Our findings indicate that the number of errors has drastically reduced since 2012. In 2017, only 0.02% of certificates contained errors. However, this improvement is largely due to a few large authorities that consistently issue correct certificates. A long tail of small authorities still regularly issues non-conformant certificates. We further find that issuing certificates with errors is correlated with other types of mismanagement and, for large authorities, browser action. Drawing on our analysis, we conclude with a discussion on how the community can best use lint data to identify authorities with concerning organizational practices and ensure the long-term health of the Web PKI.

## 1. Introduction
HTTPS relies on a supporting public key infrastructure (PKI) composed of hundreds of certificate authorities (CAs) that verify the identities of websites and issue digital certificates. To ensure compatibility between browsers and HTTPS-enabled websites, standards bodies like the IETF and CA/Browser Forum have developed policies governing the construction of digital certificates. Unfortunately, there is a long history of CAs failing to adhere to these standards due to both implementation errors and indifference. In this paper, we systematically analyze the errors CAs make when constructing certificates and consider whether these errors can predict more serious problems.

We begin by dissecting the policies set forth by RFC 5280 and the CA/Browser Forum Baseline Requirements. We find that many aspects of certificate construction can be checked in isolation, and we codify these requirements into a set of 220 lints. We introduce and release ZLint, a Go-based linting framework that implements these checks and provides structured data on certificate construction and standards adherence.

To quantify misissuance (i.e., certificates with errors) in the Web PKI, we run ZLint on the 240 million browser-trusted certificates in Censys. We find that misissuance is low in aggregate, with only 0.02% of certificates violating one of the two standards in 2017; 3.3% do not adhere to community best practices. This is a significant improvement from 2012 when more than 12% of certificates contained errors and nearly one-third violated community recommendations. However, while the global misissuance rate is low, this is predominantly due to a handful of large authorities that consistently issue certificates without error. The three largest CAs by organization—Let’s Encrypt, Comodo, and cPanel—signed 80% of the certificates in our dataset and have near-zero misissuance rates. Let’s Encrypt, the largest CA by number of certificates issued, has an exceptionally low incident rate, with only 13 out of 37 million certificates containing errors and none having warnings.

The bulk of misissuance is due to two classes of authorities. The first class is mid-sized authorities that make a variety of errors in a small percentage of their certificates. The second class is a long tail of small authorities that make the same errors in every issued certificate. Nearly half of the organizations in our dataset misissue more than 10% of certificates, and eighteen have made errors in every certificate. More than half of the errors and warnings in ZLint are triggered at least once. Most often, authorities fail to fully populate the Subject Alternative Names extension, encode the wrong type of data in the extension, or include invalid DNS names. Beyond individual certificates, we find that many organizations struggle to properly maintain OCSP/CRL responders. During our three-week test period, the OCSP responders for 73 organizations (10%) failed every health check.

Next, to determine whether lint data can predict more serious issues, we investigate the correlation between the organizations that issue certificates containing errors, OCSP/CRL endpoint uptime, and browser removal. We find a weak correlation between the organizations that issue certificates with errors and OCSP availability. For authorities that have issued more than 100K certificates, there is a moderate to strong correlation between ZLint-identified misissuance and browser removal. Surprisingly, while there is discussion about large CAs with high error profiles, there is no correlation between the small authorities making errors and discussion in the community (e.g., in the Mozilla Developer Security Policy mailing list).

Our results indicate that large authorities are making progress in correctly issuing certificates. However, there remains a long tail of small authorities that fail to follow community standards and misissue most certificates. Most of these small authorities are not being actively discussed. By shedding light on these practices, we hope to motivate the community to investigate struggling authorities and prompt discussion on whether lint data can be systemically used to help prevent future PKI incidents. Finally, by releasing ZLint, we aim to help certificate authorities avoid making errors in the future.

## 2. Background
HTTPS and TLS depend on a supporting public key infrastructure (PKI). The Web PKI that supports HTTPS on the public Internet consists of hundreds of certificate authorities (CAs)—organizations that user agents like browsers trust to verify the identities of websites and provide digital certificates. More than 400 organizations, ranging from commercial CAs to academic institutions, controlled browser-trusted signing certificates in 2013. The Web PKI was historically opaque, as certificates and their issuers were often unknown until found in the wild. However, repeated compromise and anecdotes of negligence led to increased scrutiny and community initiatives to publicly log known certificates, analyze CA behavior, establish technical standards, and distrust abusive organizations.

### 2.1. Certificate Transparency Logs
Certificate Transparency (CT) is a Google-initiated effort to maintain public, cryptographically-verifiable ledgers of all browser-trusted certificates. Originally started in 2013, CT logs initially contained certificates found primarily through Google web crawls and Internet-wide scanning. Since then, several large authorities (e.g., Let’s Encrypt and Symantec) have started logging certificates at the time of issuance. In 2017, Google Chrome announced plans to require CT logging for browser trust, and other browsers are expected to follow. As a result, public certificate transparency servers have become a de facto data source for monitoring the PKI.

### 2.2. Internet-Wide Scanning
Research groups began using Internet-wide scanning to identify trusted certificate authorities and publish datasets of known certificates. These scans helped to identify the widespread delegation of signing credentials and uncover abuse. While much of the community now relies on CT servers for data, Vandersloot et al. recently found that the combination of CT and Internet-wide scanning provides the most comprehensive perspective of the PKI. For our study, we use Censys, which aggregates certificates from publicly known CT servers and IPv4 scans of common protocols.

### 2.3. CA/Browser Forum
The CA/Browser Forum is a voluntary consortium of certificate authorities, browsers, and other PKI participants. The forum maintains several binding technical guidelines. In June 2007, the CA/Browser Forum published their first standard, Guidelines for the Issuance and Management of Extended Validation (EV) Certificates, which outlines the expectations associated with issuing EV certificates. In 2011, the Forum established a second standard, Baseline Requirements for the Issuance and Management of Publicly-Trusted Certificates, colloquially referred to as the Baseline Requirements or BRs. The CA/B Forum Baseline Requirements are binding for all member organizations and apply to certificates issued for web authentication. This enforcement is often performed by participating web browsers.

### 2.4. Common CA Database (CCADB)
The Common CA Database (CCADB) is a Mozilla-led effort to establish a public database of trusted certificate authorities. As part of its root store policy, Mozilla requires that roots submit unconstrained intermediates to CCADB. We use CCADB to help identify the owners of signing certificates.

### 2.5. Mozilla Developer Security Policy Mailing List
The Mozilla Developer Security Policy (MDSP) mailing list is the primary public forum for discussing the Mozilla Root Program. It has become a de facto location for community members to disclose PKI issues and for browsers to solicit feedback from both CAs and the broader community. We use MDSP to identify which certificate authorities are being actively discussed.

Increased transparency has led browsers to distrust several authorities over the past three years. Chrome and Firefox distrusted WoSign and StartCom after they were found issuing backdated SHA-1 certificates. PROCERT was distrusted in 2017 after multiple incidents of misissuance. Chrome announced plans in 2017 to gradually distrust Symantec roots after a long history of problems.

### 2.6. Terminology
- **Subscriber Certificate:** Subscriber certificates are provided to end customers. In the web PKI, they are typically used to identify a website to a user agent. They are not CA certificates.
- **Root Certificate:** A root certificate is the type of CA certificate shipped in a user agent’s root store and acts as the trust anchor in the PKI.
- **Intermediate Certificate:** Intermediates are a type of CA certificate signed by a trust anchor. Authorities typically sign subscriber certificates using an intermediate instead of their root certificate. In some situations, trust anchors will provide an intermediate certificate to a third-party organization to sign their own certificates.
- **Organization:** Many authorities use multiple intermediate CA certificates for signing subscriber certificates. To group these intermediate certificates together, we rely on the Organization field that CAs generally include in certificate subjects. When we refer to organizations in this work, we are referencing this field.
- **Business Owner:** This is the business entity responsible for each intermediate in our dataset. A public record of business owners is operated by Mozilla as part of the Common CA Database (CCADB).
- **NSS Root Store:** Mozilla Network Security Services (NSS) is the cryptographic library used by Firefox for performing TLS handshakes. The NSS root store contains the set of trust anchors trusted by Firefox.

## 3. ZLint: A Certificate Linter
To programmatically detect flaws in certificates, we built ZLint—a linter that checks a certificate for conformance with RFC 5280 and the CA/B Forum Baseline Requirements. We manually dissected the two standards and built a set of standalone lints that check a certificate for problems in isolation. We note that the Baseline Requirements standardize many aspects of issuance that cannot be verified in an isolated environment. For example, it is not possible to determine whether the destination domain was correctly validated. ZLint consists of 220 lints and has 95% coverage of certificate-related BR clauses and 90% of RFC clauses.

Lints can be one of several severity levels, including NOTICE, WARNING, and ERROR, which correspond to varying requirement levels in standards documents. For example, the failure to adhere to an RFC MUST clause maps to an ERROR, and disregarding a SHOULD clause maps to a WARNING. ZLint does not contain any warning or error lints that do not correspond to a specific RFC or BR clause. We label any certificate containing an error as misissued. For an example, consider the following clause from BR §7.1.1: "Certificates MUST be of type X.509 v3." In this situation, we would produce an error (and consider the certificate misissued) if it is any other X.509 version. We show the corresponding lint in Code Block 1.

```go
func (l *InvalidCertificateVersion) Execute(cert *x509.Certificate) *LintResult {
    if cert.Version != 3 {
        return &LintResult{Status: Error}
    }
    return &LintResult{Status: Pass}
}

func init() {
    RegisterLint(&Lint{
        Name: "e_invalid_certificate_version",
        Description: "Certificates MUST be of type X.509 v3",
        Source: CABFBaselineRequirements,
        Citation: "CABF BR 7.1.1",
        EffectiveDate: util.CABV130Date,
        Lint: &InvalidCertificateVersion{},
    })
}
```

Code Block 1: Example Lint—Lints are self-contained Go functions that check for adherence with technical standards. This lint checks that a certificate uses the correct X.509 version.

While RFC 5280 is a static document, the Baseline Requirements continually evolve. New requirements typically are not retroactive, and as a result, not all BR clauses apply to every certificate. To ensure that we fairly grade historical certificates, we additionally encode an "effective date" in each lint and do not use it to score certificates issued prior to that date.

ZLint is not the first certificate linter. We were inspired by certlint, which was released by Peter Bowen in early 2016 and has been used to uncover numerous PKI issues. Several other linters have since started in parallel, including X.509 Lint and GlobalSign certlint. There are several architectural differences between ZLint and certlint. First, because we use ZLint to grade authorities, we only include lints that are directly based on a published standard (i.e., RFC 5280 and CA/B Forum BRs). We do not include other community best practices as warnings or errors. Second, we restrict lints to their effective periods. Third, instead of producing text-based errors, ZLint produces structured data that can be used for analysis. Fourth, we implemented ZLint as a standalone Go library. ZLint can validate 327K certificates per core hour, a 2235% speedup over certlint, which can process 14K certificates per hour. We hope that by implementing ZLint in a performant language, we can encourage CAs to integrate linters into their issuance processes.

We have released ZLint under the Apache 2.0 license, and it has been integrated into the two leading certificate search engines, crt.sh and Censys. The Censys Team has agreed to provide long-term maintenance for the project, and we have already begun to see contributions from several popular certificate authorities.

## 4. Misissuance Today
We characterize misissuance by running ZLint on NSS-trusted certificates in Censys. Unless specified otherwise, the numbers we present in this work are for the certificates that were valid on July 23, 2017. In total, our dataset contains 61 million current certificates and 170 million historically trusted certificates. These certificates were signed by 1320 CA certificates, 618 organizations, and 64 CCADB business owners. ZLint has been integrated into Censys, and the data we use in this paper can be found in the normal Censys certificate dataset.

### 4.1. A Long Tail of Misissuance
There is a small amount of aggregate misissuance in 2017. Only 0.02% of certificates contain errors (i.e., are misissued), while 3.3% have warnings. This represents a significant improvement from 2012, when more than 12% of certificates contained errors. Although the aggregate misissuance rate is low, this is largely due to a small number of large authorities consistently producing well-constructed certificates. Three authorities—Let’s Encrypt, Comodo, and cPanel—signed 80% of the certificates in our dataset and have near-zero misissuance rates. Let’s Encrypt, the largest CA by number of certificates issued, has an exceptionally low incident rate, with only 13 out of 37 million certificates containing errors and none having warnings.

The bulk of misissuance is due to two classes of authorities. The first class is mid-sized authorities that make a variety of errors in a small percentage of their certificates. The second class is a long tail of small authorities that make the same errors in every issued certificate. Nearly half of the organizations in our dataset misissue more than 10% of certificates, and eighteen have made errors in every certificate. More than half of the errors and warnings in ZLint are triggered at least once. Most often, authorities fail to fully populate the Subject Alternative Names extension, encode the wrong type of data in the extension, or include invalid DNS names. Beyond individual certificates, we find that many organizations struggle to properly maintain OCSP/CRL responders. During our three-week test period, the OCSP responders for 73 organizations (10%) failed every health check.

### 4.2. Correlation with Other Issues
To determine whether lint data can predict more serious issues, we investigate the correlation between the organizations that issue certificates containing errors, OCSP/CRL endpoint uptime, and browser removal. We find a weak correlation between the organizations that issue certificates with errors and OCSP availability. For authorities that have issued more than 100K certificates, there is a moderate to strong correlation between ZLint-identified misissuance and browser removal. Surprisingly, while there is discussion about large CAs with high error profiles, there is no correlation between the small authorities making errors and discussion in the community (e.g., in the Mozilla Developer Security Policy mailing list).

Our results indicate that large authorities are making progress in correctly issuing certificates. However, there remains a long tail of small authorities that fail to follow community standards and misissue most certificates. Most of these small authorities are not being actively discussed. By shedding light on these practices, we hope to motivate the community to investigate struggling authorities and prompt discussion on whether lint data can be systemically used to help prevent future PKI incidents. Finally, by releasing ZLint, we aim to help certificate authorities avoid making errors in the future.