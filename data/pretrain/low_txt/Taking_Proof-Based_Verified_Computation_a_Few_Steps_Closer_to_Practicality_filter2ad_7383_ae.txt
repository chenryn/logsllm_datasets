### 6.3 Scalability of the Parallel Implementation

To demonstrate the scalability of GINGER’s parallelization, we conducted experiments using multiple CPU cores, GPUs, and distributed machines. We measured the end-to-end latency as observed by the verifier. The results, summarized in Figure 10, show that in most cases, the speedup is nearly linear.

### 7 Related Work

A significant body of research has achieved two of our goals: it is general-purpose and practical, but often relies on strong assumptions about the servers, such as trusted hardware. Additionally, there is extensive work on protocols for special-purpose computations. While this work is valuable, it is orthogonal to our efforts. For a comprehensive survey, see [45]. In this paper, we focus on approaches that are both general-purpose and unconditional.

#### Homomorphic Encryption and Secure Multi-Party Protocols

Homomorphic encryption (which allows computation over ciphertext) and secure multi-party protocols (where participants compute over private data, revealing only the result [34, 39, 52]) provide privacy guarantees. These can be extended for verifiable computation. For example, the Boneh-Goh-Nissim homomorphic cryptosystem [18] can evaluate circuits, Groth uses homomorphic commitments to produce zero-knowledge argument protocols [33], and Applebaum et al. use secure multi-party protocols for verifying computations [4]. Gentry’s fully homomorphic encryption [27] has led to protocols for verifiable non-interactive computation [20, 24, 26]. Despite significant improvements [28, 42, 47], the costs of hiding inputs and other expenses prevent these schemes from being practical, even by our relaxed standards.

#### PCPs, Argument Systems, and Interactive Proofs

Applying proof systems to verifiable computation is common in theoretical computer science [5–7, 10, 15, 32, 37, 38, 41], and the asymptotic performance continues to improve [13, 14, 22, 43]. However, much of this work has not focused on building practical systems.

Recently, researchers have started exploring the practical applications of these theories for verified outsourced computation. Ben-Sasson et al. [12] investigate when PCP protocols might be beneficial for outsourcing. They also study improved reductions to constraints from a RAM model of computation [11]. Gennaro et al. [25] provide a new characterization of NP to offer asymptotically efficient arguments without using PCPs.

To our knowledge, only two research groups have made serious efforts toward practical systems. Our previous work [44, 45] built upon the efficient argument system of Ishai et al. [35]. In contrast, Cormode, Mitzenmacher, and Thaler [21] (CMT) built upon the protocol of Goldwasser et al. [31], and a follow-up effort studied a GPU-based parallel implementation [49].

#### Comparison of GINGER and CMT [21, 49]

We compared three different implementations: CMT-native, CMT-GMP, and GINGER. CMT-native refers to the code and configuration released by Thaler et al. [49], which works over a small field, exploiting highly efficient machine arithmetic but limiting input sizes unrealistically (see Section 4.1). CMT-GMP is a modified version using the GMP library for multi-precision arithmetic, allowing more realistic computation sizes and rational numbers.

Figure 11 compares the amortized CPU and network costs for m × m matrix multiplication. CMT incurs a significant penalty when moving from native to GMP, reflecting the transition to realistic problem sizes. Comparing CMT-GMP and GINGER, the network and prover costs are similar, although CMT's network costs reflect high fixed overhead for their circuit. The per-instance verifier costs are also similar, but GINGER benefits from batch verification, which CMT does not need.

Qualitatively, CMT does not require cryptography, has better asymptotic prover and network costs, and for some computations, the verifier does not need batching to gain from outsourcing [49]. However, CMT applies to a smaller set of computations; if the computation is not efficiently parallelizable or does not naturally map to arithmetic circuits (e.g., it includes order comparisons or conditionality), CMT may be inapplicable or inefficient. Ultimately, GINGER and CMT should be complementary, as incorporating the constraint formalism with batching [48] could ease or eliminate some of CMT's restrictions.

### 8 Summary and Conclusion

This paper contributes to the emerging field of practical PCP-based systems for unconditional verifiable computation. GINGER combines theoretical refinements (reducing query costs and network overhead), a general computational model (including fractions and standard program constructs) with a compiler, and a massively parallel implementation that leverages modern hardware. These advancements bring us closer to a deployable system. However, challenges remain: the verifier's efficiency depends on special hardware, the prover's costs are still high, and looping cannot yet be handled concisely.

### Acknowledgments

We thank Edmund L. Wong for his detailed feedback, which significantly clarified this paper. Yuval Ishai, Mike Lee, Bryan Parno, Mark Silberstein, Chung-chieh (Ken) Shan, Sara L. Su, Justin Thaler, and the anonymous reviewers provided valuable comments that improved the draft. The Texas Advanced Computing Center (TACC) at UT supplied computing resources. We also thank Jane-Ellen Long of USENIX for her good nature and inexhaustible patience. This research was supported by AFOSR grant FA9550-10-1-0073 and NSF grants 1055057 and 1040083.

Our code and experimental configurations are available at http://www.cs.utexas.edu/pepper.

### References

[1] CUDA (http://developer.nvidia.com/what-cuda).
[2] Open MPI (http://www.open-mpi.org).
[3] PAPI: Performance Application Programming Interface.
[4] B. Applebaum, Y. Ishai, and E. Kushilevitz. From secrecy to soundness: efficient verification via secure computation. In ICALP, 2010.
[5] S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. Proof verification and the hardness of approximation problems. J. of the ACM, 45(3):501–555, May 1998.
[6] S. Arora and S. Safra. Probabilistic checking of proofs: a new characterization of NP. J. of the ACM, 45(1):70–122, Jan. 1998.
[7] L. Babai, L. Fortnow, L. A. Levin, and M. Szegedy. Checking computations in polylogarithmic time. In STOC, 1991.
[8] M. Bellare, D. Coppersmith, J. Håstad, M. Kiwi, and M. Sudan. Linearity testing in characteristic two. IEEE Transactions on Information Theory, 42(6):1781–1795, Nov. 1996.
[9] M. Bellare, S. Goldwasser, C. Lund, and A. Russell. Efficient probabilistically checkable proofs and applications to approximations. In STOC, 1993.
[10] M. Ben-Or, S. Goldwasser, J. Kilian, and A. Wigderson. Multi-prover interactive proofs: how to remove intractability assumptions. In STOC, 1988.
[11] E. Ben-Sasson, A. Chiesa, D. Genkin, and E. Tromer. Fast reductions from RAMs to delegatable succinct constraint satisfaction problems. Feb. 2012. Cryptology eprint 071.
[12] E. Ben-Sasson, A. Chiesa, D. Genkin, and E. Tromer. On the concrete-efficiency threshold of probabilistically-checkable proofs. ECCC, (045), Apr. 2012.
[13] E. Ben-Sasson, O. Goldreich, P. Harsha, M. Sudan, and S. Vadhan. Robust PCPs of proximity, shorter PCPs and applications to coding. SIAM J. on Comp., 36(4):889–974, Dec. 2006.
[14] E. Ben-Sasson and M. Sudan. Short PCPs with polylog query complexity. SIAM J. on Comp., 38(2):551–607, May 2008.
[15] M. Blum and S. Kannan. Designing programs that check their work. J. of the ACM, 42(1):269–291, 1995.
[16] M. Blum, M. Luby, and R. Rubinfeld. Self-testing/correcting with applications to numerical problems. J. of Comp. and Sys. Sciences, 47(3):549–595, Dec. 1993.
[17] D. Boneh and D. M. Freeman. Homomorphic signatures for polynomial functions. In EUROCRYPT, 2011.
[18] D. Boneh, E. J. Goh, and K. Nissim. Evaluating 2-DNF formulas on ciphertexts. In TCC, 2005.
[19] G. Brassard, D. Chaum, and C. Crépeau. Minimum disclosure proofs of knowledge. J. of Comp. and Sys. Sciences, 37(2):156–189, 1988.
[20] K.-M. Chung, Y. Kalai, and S. Vadhan. Improved delegation of computation using fully homomorphic encryption. In CRYPTO, 2010.
[21] G. Cormode, M. Mitzenmacher, and J. Thaler. Practical verified computation with streaming interactive proofs. In ITCS, 2012.
[22] I. Dinur. The PCP theorem by gap amplification. J. of the ACM, 54(3), June 2007.
[23] T. ElGamal. A public key cryptosystem and a signature scheme based on discrete logarithms. IEEE Transactions on Information Theory, 31:469–472, 1985.
[24] R. Gennaro, C. Gentry, and B. Parno. Non-interactive verifiable computing: Outsourcing computation to untrusted workers. In CRYPTO, 2010.
[25] R. Gennaro, C. Gentry, B. Parno, and M. Raykova. Quadratic span programs and succinct NIZKs without PCPs. Apr. 2012. Cryptology eprint 215.
[26] R. Gennaro and D. Wichs. Fully homomorphic message authenticators. May 2012. Cryptology eprint 290.
[27] C. Gentry. A fully homomorphic encryption scheme. PhD thesis, Stanford University, 2009.
[28] C. Gentry, S. Halevi, and N. Smart. Homomorphic evaluation of the AES circuit. In CRYPTO, 2012.
[29] D. Goldberg. What every computer scientist should know about floating-point arithmetic. ACM Computing Surveys, 23(1):5–48, Mar. 1991.
[30] O. Goldreich. Foundations of Cryptography: II Basic Applications. Cambridge University Press, 2004.
[31] S. Goldwasser, Y. T. Kalai, and G. N. Rothblum. Delegating computation: Interactive proofs for muggles. In STOC, 2008.
[32] S. Goldwasser, S. Micali, and C. Rackoff. The knowledge complexity of interactive proof systems. SIAM J. on Comp., 18(1):186–208, 1989.
[33] J. Groth. Linear algebra with sub-linear zero-knowledge arguments. In CRYPTO, 2009.
[34] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster secure two-party computation using garbled circuits. In USENIX Security, 2011.
[35] Y. Ishai, E. Kushilevitz, and R. Ostrovsky. Efficient arguments without short PCPs. In Conference on Computational Complexity (CCC), 2007.
[36] K. Jang, S. Han, S. Han, S. Moon, and K. Park. SSLShader: Cheap SSL acceleration with commodity processors. In NSDI, 2011.