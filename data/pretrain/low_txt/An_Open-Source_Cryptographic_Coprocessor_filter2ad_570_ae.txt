### Accelerator Vendors and Moore’s Law

According to a derivation of Moore’s Law, Intel can produce faster and cheaper processors than most other companies. Consequently, investing significant effort into designing an Application-Specific Integrated Circuit (ASIC) for a cryptographic accelerator is risky. This is because, in addition to the inherent flexibility issues associated with ASICs, such designs are likely to be outpaced by general-purpose CPUs within a few years. This problem is exemplified by several products currently marketed as crypto hardware accelerators, which, when enabled, actually slow down performance.

### Optimal Price/Performance Tradeoff

For pure acceleration purposes, the optimal price/performance tradeoff appears to be using a daughterboard populated with a collection of inexpensive CPUs, each attached to a small amount of memory and just enough glue logic to support the CPU. This approach, used by nCipher in their SSL accelerators, involves a cluster of ARM CPUs. The mode of operation for this CPU farm would involve the crypto coprocessor halting the CPUs, loading the control firmware (a basic protected-mode kernel and the necessary code for the required bignum operations) into the memory, and then restarting the CPUs to run as special-purpose engines.

For x86 CPUs, there are several minimal open-source protected-mode kernels originally designed as DOS extenders for games programming. These kernels ignore virtual memory, page protection, and other complexities, running the CPU as if it were a very fast 32-bit real-mode 8086. By using a processor like a K6-2 3D/333 (currently priced around $35), which contains 32+32K of onboard cache, the control code can be initially loaded from slow, cheap external memory but will execute from the cache at full CPU speed thereafter. Each dedicated bignum unit should be capable of approximately 200 512-bit RSA operations per second at a cost of around $100 each.

### Disadvantages of Commodity x86 CPUs

Unfortunately, using commodity x86 CPUs has several disadvantages:
1. **Configuration Requirements**: These CPUs are designed for systems with specific configurations (e.g., SDRAM, PCI, AGP busses, and a 64-bit bus interface). Using them with a single cheap 8-bit memory chip requires substantial glue logic to simulate the expected control signals.
2. **Power Consumption and Heat Dissipation**: These CPUs consume significant power and dissipate a large amount of heat, with current drains of 10-15A and dissipation rates of 20-40W being common for low-end processors. Adding more CPUs to improve performance exacerbates these issues, overwhelming the power supplies and enclosures designed for embedded controllers.

### Digital Signal Processors (DSPs)

An alternative solution is offered by digital signal processors (DSPs), which require minimal external circuitry. Many newer DSPs contain sufficient onboard memory to hold all data and control code, and do not expect sophisticated external control logic. DSPs are optimized for embedded signal-processing tasks, making them ideal for use as accelerators. A typical configuration includes two 32-bit single-cycle multiply-accumulate (MAC) units, providing the most common basic operation used in bignum calculations. The ADSP-21160 is a particularly suitable choice, consuming only 2 watts and supporting up to six DSPs in a cluster, providing an aggregate 3,600 MFLOPS processing power. This setup is currently under consideration and may be the subject of future research.

### Additional Functionality

In addition to pure acceleration, a PC104 add-on card can handle other functions, such as a hardware random number generator (RNG). The standard entropy-polling RNG used by cryptlib is less effective in an embedded environment. A typical RNG would utilize multiple physical randomness sources (e.g., thermal noise in semiconductor junctions) fed into a Schmitt trigger, with the output mixed into the standard cryptlib RNG. Multiple independent sources ensure that even if one fails, others will still provide entropy, and feeding the RNG output into the cryptlib PRNG removes any possible bias.

Another function the add-on card can perform is to serve as a more general I/O channel, providing the user with more information (e.g., via an LCD display) about what they are authorizing.

### Conclusion

This paper presents a design for an inexpensive, general-purpose crypto coprocessor capable of keeping cryptographic keys and operations safe, even in the presence of malicious software on the host. Extended security functionality is provided through trusted I/O channels to the coprocessor. While the coprocessor's processing power is sufficient for most purposes, it can be augmented with additional modules based on DSPs to match the performance of more expensive commercial equivalents. The open-source nature of the design and the use of commercial off-the-shelf (COTS) components allow anyone to verify the security of the implementation and obtain a coprocessor in any required location by assembling the hardware and software components at their final destination.

### Acknowledgements

The author would like to thank Paul Karger, Sean Smith, Brian Oblivion, Jon Tidswell, Steve Weingart, Chris Zimman, and the referees for their feedback and comments on this paper.

### References

[1] “Inside Windows NT”, Helen Custer, Microsoft Press, 1993.
[2] “Playing Hide and Seek with Stored Keys”, Nicko van Someren and Adi Shamir, 22 September 1998, presented at Financial Cryptography 1999.
[3] Eric Heimburg, “Monitoring System Events by Subclassing the Shell”, Windows Developers Journal, Vol.9, No.2 (February 1998), p.35.
[4] “Windows NT System-Call Hooking”, Mark Russinovich and Bryce Cogswell, Dr.Dobbs Journal, January 1997, p.42.
[5] “In Memory Patching”, Stone / UCF & F4CG, 1998
[6] “A *REAL* NT Rootkit, Patching the NT Kernel”, Greg Hoglund, Phrack, Vol.9, Issue 55.
[7] “Securing Java and ActiveX”, Ted Julian, Forrester Report, Network Strategies, Vol.12, No.7 (June 1998).
[8] “Death, Taxes, and Imperfect Software: Surviving the Inevitable”, Crispin Cowan and Castor Fu, Proceedings of the ACM New Security Paradigms Workshop‘98, September 1998.
[9] “User Friendly, 6 March 1998”, Illiad, 6 March 1998, http://www.userfriendly.org/cartoons/archives/98mar/19980306.html.
[10] “The Inevitability of Failure: The Flawed Assumption of Security in Modern Computing Environments”, Peter Loscocco, Stephen Smalley, Patrick Muckelbauer, Ruth Taylor, S.Jeff Turner, and John Farrell, Proceedings of the 21st National Information Systems Security Conference, October 1998.
[11] “The Importance of High Assurance Computers for Command, Control, Communications, and Intelligence Systems”, W. Shockley, R. Schell, and M.Thompson, Proceedings of the 4th Aerospace Computer Security Applications Conference, December 1988, p.331.
[12] Jeff Schiller, quoted in Communications of the ACM, Vol.42, No.9 (September 1999), p.10.
[13] “Software Security in an Internet World: An Executive Summary”, Timothy Shimeall and John McDermott, IEEE Software, Vol.16, No.4 (July/August 1999), p.58.
[14] “Formal Methods and Testing: Why the State-of-the-Art is Not the State-of-the-Practice”, David Rosenblum, ACM SIGSOFT Software Engineering Notes, Vol21, No.4 (July 1996), p.64.
[15] “How to bypass those pesky firewalls”, Mark Jackson, in Risks Digest, Vol.20, No.1, 1 October 1998.
[16] “FIPS PUB 46, Data Encryption Standard”, National Institute of Standards and Technology, 22 January 1988.
[17] “Federal Standard 1027, Telecommunications’ General Security Requirements for Equipment Using the Data Encryption Standard”, National Bureau of Standards, 14 April 1982.
[18] “FIPS PUB 46-2, Data Encryption Standard”, National Institute of Standards and Technology, 30 December 1993.
[19] “Security Requirements for Cryptographic Modules”, National Institute of Standards and Technology, 11 January 1994.
[20] “Building a High-Performance Programmable, Secure Coprocessor”, Sean Smith and Steve Weingart, Computer Networks and ISDN Systems, Issue 31 (April 1999), p.831.
[21] “Fortezza Program Overview, Version 4.0a”, National Security Agency, February 1996.
[22] “iButton Home Page”, http://www.ibutton.com.
[23] “A Tentative Approach to Constructing Tamper-Resistant Software”, Masahiro Mambo, Takanori Murayama, and Eiji Okamoto, Proceedings of the ACM New Security Paradigms Workshop‘97, September 1997.
[24] “Common Data Security Architecture”, Intel Corporation, 2 May 1996.
[25] “The Giant Black Book of Computer Viruses (2nd ed)”, Mark Ludwig, American Eagle Publications, 1998.
[26] “Understanding and Managing Polymorphic Viruses”, Symantec Corporation, 1996.
[27] “Fravia’s Page of Reverse Engineering”, http://www.fravia.org.
[28] “Phrozen Crew Official Site”, http://www.phrozencrew.com/index2.htm.
[29] “Stone’s Webnote”, http://www.users.one.se/~stone/.
[30] “Common Security: CDSA and CSSM, Version 2”, CAE specification, The Open Group, November 1999.
[31] “Common Security Protocol (CSP)”, ACP 120, 8 July 1998.
[32] “Cryptographic API’s”, Dieter Gollman, Cryptography: Policy and Algorithms, Springer-Verlag Lecture Notes in Computer Science No.1029, July 1995, p.290.
[33] “The VMEbus Handbook”, VMEbus International Trade Association, 1989.
[34] “PC/104 Specification, Version 2.3”, PC/104 Consortium, June 1996.
[35] “PC/104-Plus Specification, Version 1.1”, PC/104 Consortium, June 1997.
[36] “EZ Dos Web Site”, http://members.aol.com/RedHtLinux/.
[37] “The FreeDOS Project”, http://www.freedos.org.
[38] “OpenDOS Unofficial Home Page”, http://www.deltasoft.com/opendos.htm.
[39] “PicoBSD, the Small BSD”, http://www.freebsd.org/~picobsd/picobsd.html.
[40] “Embedded Linux”, http://www.linuxembedded.com/.
[41] “DiskOnChip 2000: MD2200, MD2201 Data Sheet, Rev.2.3”, M-Systems Inc, May 1999.
[42] “Secure Deletion of Data from Magnetic and Solid-State Memory”, Peter Gutmann, Proceedings of the 6th Usenix Security Symposium, July 1996.
[43] “The Design of a Cryptographic Security Architecture”, Peter Gutmann, Proceedings of the 8th Usenix Security Symposium, August 1999.
[44] “IEEE Std.1284-1994: Standard Signaling Method for a Bi-Directional Parallel Peripheral Interface for Personal Computers”, IEEE, March 1994.
[45] “PCI-ISA Passive Backplane: PICMG 1.0 R2.0”, PCI Industrial Computer Manufacturers Group, 10 October 1994.
[46] “Wer ist der befugte Vierte? Geheimdienste unterwandern den Schutz von Verschlüsselungsgeräten”, Der Spiegel, No.36, 1996, p.206.
[47] “Verschlüsselt: Der Fall Hans Buehler”, Res Strehle, Werd Verlag, Zurich, 1994.
[48] “No Such Agency, Part 4: Rigging the Game”, Scott Shane and Tom Bowman, The Baltimore Sun, 4 December 1995, p.9.
[49] “A Retrospective on the VAX VMM Security Kernel”, Paul Karger, Mary Ellen Zurko, Douglas Bonin, Andrew Mason, and Clifford Kahn, IEEE Transactions on Software Engineering, Vol.17, No.11 (November 1991), p1147.
[50] “The Design and Analysis of Graphical Passwords”, Ian Jermyn, Alain Mayer, Fabian Monrose, Michael Reiter, and Aviel Rubin, Proceedings of the 8th Usenix Security Symposium, August 1999.
[51] “Design and Verification of Secure Systems”, John Rushby, ACM Operating Systems Review, Vol.15, No.5 (December 1981), p12.
[52] “Proof of Separability — a verification technique for a class of security kernels”, John Rushby, Proceedings of the 5th International Symposium on Programming, Springer-Verlag Lecture Notes in Computer Science No.137 (April 1982), p.352.
[53] “Pijnenburg Product Specification: Large Number Modular Arithmetic Coprocessor, Version 1.04”, Pijnenburg Custom Chips B.V., 12 March 1998.
[54] “Modular Exponentiation on Reconfigurable Hardware”, Thomas Blum, MSc thesis, Worcester Polytechnic Institute, 8 April 1999.
[55] “XC4000XLA/XV Field Programmable Gate Arrays, v1.3”, Xilinx, Inc, 18 October 1999.
[56] “Apache e-Commerce Solutions”, Mark Cox and Geoff Thorpe, ApacheCon 2000, March 2000.
[57] nCipher, http://www.ncipher.com.
[58] “ADSP-21160 SHARC DSP Hardware Reference”, Analog Devices Inc, November 1999.
[59] “Software Generation of Practically Strong Random Numbers”, Peter Gutmann, Proceedings of the 7th Usenix Security Symposium, January 1998.