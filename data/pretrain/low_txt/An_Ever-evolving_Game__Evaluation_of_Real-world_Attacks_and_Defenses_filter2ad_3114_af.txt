### Communication and Data Science, and Engineering Research

**Center of Cyber Security Auditing and Monitoring, Ministry of Education, China**

This work was partially supported by the National Science Foundation (NSF) grants CNS-18-54000 and CNS-18-54001. The views and conclusions presented in this document are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the NSF.

### References

1. **TheDarkDAO Contract**  
   - URL: [Etherscan](https://etherscan.io/address/0x304a554a310C7e546dfe434669C62820b7D83490)  
   - Year: 2016

2. **WithdrawDAO Contract**  
   - URL: [Etherscan](https://etherscan.io/address/0xbf4ed7b27f1d666546e30d74d50d173d20bca754)  
   - Year: 2016

3. **ChooseWHGReturnAddress Contract**  
   - URL: [Etherscan](https://etherscan.io/address/0x3abe5285ED57c8b028D62D30c456cA9eb3E74105)  
   - Year: 2017

4. **Ethereum Known Attacks**  
   - URL: [Consensys GitHub](https://consensys.github.io/smart-contract-best-practices/known_attacks/)  
   - Year: 2017

5. **Manticore**  
   - URL: [Trail of Bits GitHub](https://github.com/trailofbits/manticore)  
   - Year: 2017

6. **Parity Wallet Multi-Sig Library Vulnerability**  
   - URL: [Parity Blog](https://www.parity.io/security-alert-2/)  
   - Year: 2017

7. **Analyzing the First Token Harvest Event in Blockchain**  
   - URL: [Seebug Paper](https://paper.seebug.org/646/)  
   - Year: 2018

8. **FoMo3Dlong Contract**  
   - URL: [Etherscan](https://etherscan.io/address/0xa62142888aba8370742be823c1782d17a0389da1)  
   - Year: 2018

9. **Mythril**  
   - URL: [ConsenSys GitHub](https://github.com/ConsenSys/mythril)  
   - Year: 2018

10. **A Redundant SafeMath Implementation to Make Your Contract Unsafe!**  
    - URL: [PeckShield Blog](https://blog.peckshield.com/2018/08/14/unsafemath/)  
    - Year: 2018

11. **CoinGecko**  
    - URL: [CoinGecko](https://www.coingecko.com)  
    - Year: 2019

12. **Ethereum in BigQuery: A Public Dataset for Smart Contract Analytics**  
    - URL: [Google Cloud Blog](https://cloud.google.com/blog/products/data-analytics/ethereum-bigquery-public-dataset-smart-contract-analytics)  
    - Year: 2019

13. **Etherscan**  
    - URL: [Etherscan](https://etherscan.io)  
    - Year: 2019

14. **Fleiss’ Kappa**  
    - URL: [Wikipedia](https://en.wikipedia.org/wiki/Fleiss%27_kappa)  
    - Year: 2019

15. **Fuzzing**  
    - URL: [Wikipedia](https://en.wikipedia.org/wiki/Fuzzing)  
    - Year: 2019

16. **HoneyBadger Dataset**  
    - URL: [GitHub](https://github.com/christoftorres/HoneyBadger/tree/master/results/evaluation)  
    - Year: 2019

17. **LLVM IR**  
    - URL: [LLVM Documentation](https://llvm.org/docs/LangRef.html#introduction)  
    - Year: 2019

18. **OpenZeppelin Contracts**  
    - URL: [GitHub](https://github.com/OpenZeppelin/openzeppelin-contracts)  
    - Year: 2019

19. **Replay Attack**  
    - URL: [Wikipedia](https://en.wikipedia.org/wiki/Replay_attack)  
    - Year: 2019

20. **Solidity Programming Language: Error Handling**  
    - URL: [Solidity Docs](https://solidity.readthedocs.io/en/v0.5.11/control-structures.html?highlight=require#error-handling-assert-require-revert-and-exceptions)  
    - Year: 2019

21. **Formal Verification of Smart Contracts: Short Paper**  
    - Authors: Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cédric Fournet, Anitha Gollamudi, Georges Gonthier, Nadim Kobeissi, Natalia Kulatova, Aseem Rastogi, Thomas Sibut-Pinote, Nikhil Swamy, et al.  
    - Conference: 2016 ACM Workshop on Programming Languages and Analysis for Security  
    - Year: 2016

22. **Enter the Hydra: Towards Principled Bug Bounties and Exploit-Resistant Smart Contracts**  
    - Authors: Lorenz Breindenbach, Phil Daian, Florian Tramèr, and Ari Juels  
    - Conference: 27th USENIX Security Symposium (USENIX Security 18)  
    - Pages: 1335–1352  
    - Year: 2018

23. **Vandal: A Scalable Security Analysis Framework for Smart Contracts**  
    - Authors: Lexi Brent, Anton Jurisevic, Michael Kong, Eric Liu, François Gauthier, Vincent Gramoli, Ralph Holz, and Bernhard Scholz  
    - Preprint: arXiv:1809.03981  
    - Year: 2018

24. **DAO Fork**  
    - Author: Vitalik Buterin  
    - URL: [Ethereum Blog](https://blog.ethereum.org/2016/07/20/hard-fork-completed/)  
    - Year: 2016

25. **Under-Optimized Smart Contracts Devour Your Money**  
    - Authors: Ting Chen, Xiaoqi Li, Xiapu Luo, and Xiaosong Zhang  
    - Conference: 2017 IEEE 24th International Conference on Software Analysis, Evolution and Reengineering (SANER)  
    - Year: 2017

26. **Step by Step Towards Creating a Safe Smart Contract: Lessons and Insights from a Cryptocurrency Lab**  
    - Authors: Kevin Delmolino, Mitchell Arnett, Ahmed Kosba, Andrew Miller, and Elaine Shi  
    - Conference: International Conference on Financial Cryptography and Data Security  
    - Pages: 79–94  
    - Publisher: Springer  
    - Year: 2016

27. **MadMax: Surviving Out-of-Gas Conditions in Ethereum Smart Contracts**  
    - Authors: Neville Grech, Michael Kong, Anton Jurisevic, Lexi Brent, Bernhard Scholz, and Yannis Smaragdakis  
    - Conference: The ACM SIGPLAN conference on Systems, Programming, Languages and Applications: Software for Humanity (OOPSLA’18)  
    - Year: 2018

28. **ContractFuzzer: Fuzzing Smart Contracts for Vulnerability Detection**  
    - Authors: Bo Jiang, Ye Liu, and WK Chan  
    - Conference: Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (ASE’18)  
    - Year: 2018

29. **Zeus: Analyzing Safety of Smart Contracts**  
    - Authors: Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh Sharma  
    - Conference: 25th Annual Network and Distributed System Security Symposium (NDSS’18)  
    - Year: 2018

30. **Teether: Gnawing at Ethereum to Automatically Exploit Smart Contracts**  
    - Authors: Johannes Krupp and Christian Rossow  
    - Conference: 27th USENIX Security Symposium (USENIX Security’18)  
    - Year: 2018

31. **Making Smart Contracts Smarter**  
    - Authors: Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas Hobor  
    - Conference: Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS’16)  
    - Year: 2016

32. **Smashing Ethereum Smart Contracts for Fun and Real Profit**  
    - Author: Bernhard Mueller  
    - Conference: 9th Annual HITB Security Conference (HITBSecConf)  
    - Year: 2018

33. **Finding the Greedy, Prodigal, and Suicidal Contracts at Scale**  
    - Authors: Ivica Nikolić, Aashish Kolluri, Ilya Sergey, Prateek Saxena, and Aquinas Hobor  
    - Conference: Proceedings of the 34th Annual Computer Security Applications Conference (ACSAC’18)  
    - Year: 2018

34. **The Parity Wallet Hack Explained**  
    - Author: Santiago Palladino  
    - URL: [OpenZeppelin Blog](https://blog.openzeppelin.com/on-the-parity-wallet-multisig-hack-405a8c12e8f7/)  
    - Year: 2017

35. **Smart Contract Vulnerabilities: Does Anyone Care?**  
    - Authors: Daniel Perez and Benjamin Livshits  
    - Preprint: arXiv:1902.06710  
    - Year: 2019

36. **Sereum: Protecting Existing Smart Contracts Against Re-entrancy Attacks**  
    - Authors: Michael Rodler, Wenting Li, Ghassan O Karame, and Lucas Davi  
    - Conference: 26th Annual Network and Distributed System Security Symposium (NDSS’19)  
    - Year: 2019

37. **Hacking the Hackers: Honeypots on Ethereum Network**  
    - Author: Alex Sherbachev  
    - URL: [Hacker Noon](https://hackernoon.com/hacking-the-hackers-honeypots-on-ethereum-network-5baa35a13577)  
    - Year: 2018

38. **Dissecting an Ethereum Honeypot**  
    - Author: Alex Sherbuck  
    - URL: [Medium](https://medium.com/coinmonks/dissecting-an-ethereum-honey-pot-7102d7def5e0)  
    - Year: 2018

39. **SmartCheck: Static Analysis of Ethereum Smart Contracts**  
    - Authors: Sergei Tikhomirov, Ekaterina Voskresenskaya, Ivan Ivanitskiy, Ramil Takhaviev, Evgeny Marchenko, and Yaroslav Alexandrov  
    - Conference: 2018 IEEE/ACM 1st International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB’18)  
    - Year: 2018

### Appendix: Zero-day Vulnerable Contract Examples

In the appendix, we describe several example zero-day vulnerable contracts in each attack category.

#### A.1 Zero-day Reentrancy Contract

```solidity
contract InstaDice {
    function payoutPreviousRoll() public returns (bool _success) {
        ...
        _finalizePreviousRoll(_user, _stats);
        stats.totalWon = _stats.totalWon;
        ...
    }

    function _finalizePreviousRoll(User memory _user, Stats memory _stats) private {
        ...
        require(msg.sender.call.value(_user.r_payout)());
        _stats.totalWon += _user.r_payout;
        ...
    }
}
```

**Figure 9: A zero-day reentrancy contract.**

We show the source code of one zero-day reentrancy in Figure 9. The vulnerability is located at Line 13, which has to be triggered through a cross-function call from the public interface `payoutPreviousRoll` to the private `_finalizePreviousRoll`. Therefore, neither Oyente nor ZEUS can detect this cross-function vulnerability. Additionally, the state update is via a member variable of the function parameter `_stats` at Line 14. Therefore, Securify and Mythril cannot detect the vulnerability.

#### A.2 Zero-day Integer Overflow Contract

```solidity
contract PausableToken is StandardToken, Pausable {
    function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {
        uint cnt = _receivers.length;
        uint256 amount = uint256(cnt) * _value;
        require(cnt > 0 && cnt <= 10 && balances[msg.sender] >= amount);
        balances[msg.sender] = balances[msg.sender].sub(amount);
        for (uint i = 0; i < cnt; i++) {
            balances[_receivers[i]] = balances[_receivers[i]].add(_value);
        }
        TransferBatch(msg.sender, _receivers, _value);
        return true;
    }
}
```

**Figure 10: A zero-day integer overflow contract.**

We show the source code of one zero-day integer overflow in Figure 10. The vulnerability is located at Line 6, where the contract adopts a vulnerable multiplication operation, regardless of the deployment of SafeMath functions at Lines 10 and 12. Mythril and ZEUS fail to find the vulnerability because their analysis cannot reach the `batchTransfer` function.

#### A.3 Zero-day Honeypot Contract

```solidity
contract Honeypot {
    address owner;
    uint refundTime;
    uint ownerTime;

    function () payable {
        if (now >= refundTime && now <= ownerTime) {
            if (owner.send(this.balance)) {
                selfdestruct(owner);
            }
        }
    }
}
```

**Figure 11: A zero-day honeypot contract.**

Figure 11 shows a new class of honeypots that attract users to deposit ethers and then refund them. The contract only leaves a one-minute time window for withdrawing, which is hard to satisfy due to the inaccurate timestamp determined by miners. We observed that the contract owner withdrew all the ethers at 7:50 in October 2011.

### B. List of Function Signatures

In this section, we list all the function signatures used by our result analysis of identifying token transfers in Table 9.

| Result Type | Sensitive Function Signature |
|-------------|------------------------------|
| token_transfer | `transfer(address,uint256)`<br>`transferFrom(address,address,uint256)`<br>`transferMulti(address[],uint256[])`<br>`transferProxy(address,address,uint256,uint256,uint8,bytes32,bytes32)`<br>`batchTransfer(address[],uint256)`<br>`batchTransfers(address[],uint256[])`<br>`multiTransfer(address[],uint256[])` |
| owner_change | `setOwner(address)`<br>`initWallet(address[],uint256,uint256)`<br>`transferOwnership(address)`<br>`changeOwner(address)`<br>`addOwner(address)` |

**Table 9: Sensitive functions related to each result type.**

- `token_transfer`:
  - `transfer(address,uint256)`
  - `transferFrom(address,address,uint256)`
  - `transferMulti(address[],uint256[])`
  - `transferProxy(address,address,uint256,uint256,uint8,bytes32,bytes32)`
  - `batchTransfer(address[],uint256)`
  - `batchTransfers(address[],uint256[])`
  - `multiTransfer(address[],uint256[])`

- `owner_change`:
  - `setOwner(address)`
  - `initWallet(address[],uint256,uint256)`
  - `transferOwnership(address)`
  - `changeOwner(address)`
  - `addOwner(address)`

- **Function Hashes**:
  - `transfer(address,uint256)`: `0xa9059cbb`
  - `transferFrom(address,address,uint256)`: `0x23b872dd`
  - `transferMulti(address[],uint256[])`: `0x35bce6e4`
  - `transferProxy(address,address,uint256,uint256,uint8,bytes32,bytes32)`: `0xeb502d45`
  - `batchTransfer(address[],uint256)`: `0x83f12fec`
  - `batchTransfers(address[],uint256[])`: `0x3badca25`
  - `multiTransfer(address[],uint256[])`: `0x1e89d545`
  - `setOwner(address)`: `0x13af4035`
  - `initWallet(address[],uint256,uint256)`: `0xe46dcfeb`
  - `transferOwnership(address)`: `0xf2fde38b`
  - `changeOwner(address)`: `0xa6f9dae1`
  - `addOwner(address)`: `0x7065cb48`