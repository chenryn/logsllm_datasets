### Throughput and Parallelism in Fuzzing

**Throughput** is defined as the number of inputs that can be tested within a given period. One of the most straightforward methods to enhance fuzzing throughput is by improving parallelism. For instance, **ClusterFuzz** [36] utilizes a cluster of machines to increase fuzzing throughput. However, as noted by Xu et al. [74], running multiple fuzzing instances in parallel does not scale well on commodity operating systems with multiple cores. To address this, they proposed new operating system primitives. Another approach to improve parallelism is through the use of **SIMD (Single Instruction, Multiple Data)** instructions for data parallelization [25]. The main challenge with data parallelization is handling conditional branches, which often limit the effectiveness of data parallelism [24] by disabling deviated data lanes.

**JIGSAW** leverages both multi-core and SIMD to enhance parallelism. Compared to existing solutions, JIGSAW's approach is more scalable across multiple cores due to fewer synchronization bottlenecks. Additionally, it is more efficient in utilizing data parallelism because the JIT-compiled functions do not contain conditional branches.

### Conclusion

In this paper, we present a novel design to improve search throughput in automated test generation. Our approach is based on the insight that searching for satisfiable inputs is more efficient and scalable when using path constraints rather than the entire original program. Evaluation results show that our method achieves a search throughput several orders of magnitude higher than state-of-the-art fuzzers, leading to significant improvements in branch flipping rate and end-to-end coverage-guided testing.

### Acknowledgments

This work is supported, in part, by the National Science Foundation under Grant Nos. 2046026 and 2133487, and the Office of Naval Research under Award No. N00014-17-1-2893. The opinions, findings, conclusions, or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

### References

[1] Dave Aitel. An introduction to spike, the fuzzer creation kit. Presentation slides, 2002.

[2] Cornelius Aschermann, Sergej Schumilo, Tim Blazytko, Robert Gawlik, and Thorsten Holz. REDQUEEN: Fuzzing with input-to-state correspondence. In Annual Network and Distributed System Security Symposium (NDSS), 2019.

[3] Domagoj Babić, Stefan Bucur, Yaohui Chen, Franjo Ivančić, Tim King, Markus Kusano, Caroline Lemieux, László Szekeres, and Wei Wang. Fudge: Fuzz driver generation at scale. In ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE), 2019.

[4] Clark Barrett, Christopher L. Conway, Morgan Deters, Liana Hadarean, Dejan Jovanović, Tim King, Andrew Reynolds, and Cesare Tinelli. CVC4. In International Conference on Computer Aided Verification (CAV), pages 171–177. Springer, 2011.

[5] Marcel Böhme and Brandon Falk. Fuzzing: On the exponential cost of vulnerability discovery. In ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE), 2020.

[6] Marcel Böhme, Valentin Manes, and Sang Kil Cha. Boosting fuzzer efficiency: An information theoretic perspective. In ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE), 2020.

[7] Marcel Böhme, Van-Thuan Pham, Manh-Dung Nguyen, and Abhik Roychoudhury. Directed greybox fuzzing. In ACM Conference on Computer and Communications Security (CCS), 2017.

[8] Marcel Böhme, Van-Thuan Pham, and Abhik Roychoudhury. Coverage-based greybox fuzzing as Markov chain. In ACM Conference on Computer and Communications Security (CCS), 2016.

[9] Luca Borzacchiello, Emilio Coppa, and Camil Demetrescu. Fuzzing symbolic expressions. In International Conference on Software Engineering (ICSE), 2021.

[10] Luca Borzacchiello, Emilio Coppa, and Camil Demetrescu. Fuzzolic: Mixing fuzzing and concolic execution. Computers & Security, page 102368, 2021.

[11] Ella Bounimova, Patrice Godefroid, and David Molnar. Billions and billions of constraints: Whitebox fuzz testing in production. In International Conference on Software Engineering (ICSE), 2013.

[12] Cristian Cadar, Daniel Dunbar, and Dawson R. Engler. KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs. In USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2008.

[13] Cristian Cadar, Vijay Ganesh, Peter M. Pawlowski, David L. Dill, and Dawson R. Engler. EXE: Automatically generating inputs of death. In ACM Conference on Computer and Communications Security (CCS), 2006.

[14] Cristian Cadar and Koushik Sen. Symbolic execution for software testing: Three decades later. Communications of the ACM, 56(2):82–90, 2013.

[15] Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert, and David Brumley. Unleashing mayhem on binary code. In IEEE Symposium on Security and Privacy (Oakland), 2012.

[16] Sang Kil Cha, Maverick Woo, and David Brumley. Program-adaptive mutational fuzzing. In IEEE Symposium on Security and Privacy (Oakland), 2015.

[17] Peng Chen and Hao Chen. Angora: Efficient fuzzing by principled search. In IEEE Symposium on Security and Privacy (Oakland), 2018.

[18] Peng Chen, Jianzhong Liu, and Hao Chen. Matryoshka: Fuzzing deeply nested branches. In ACM Conference on Computer and Communications Security (CCS), 2019.

[19] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. S2E: A platform for in-vivo multi-path analysis of software systems. In ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2011.

[20] Jaeseung Choi, Joonun Jang, Choongwoo Han, and Sang Kil Cha. Grey-box concolic testing on binary code. In International Conference on Software Engineering (ICSE), 2019.

[21] Leonardo De Moura and Nikolaj Bjørner. Z3: An efficient SMT solver. In International Conference on Tools and Algorithms for the Construction and Analysis of Systems, 2008.

[22] Bruno Dutertre. Yices 2.2. In International Conference on Computer Aided Verification (CAV). Springer, 2014.

[23] Michael Eddington. Peach fuzzer platform. http://www.peachfuzzer.com/products/peach-platform/, 2011.

[24] Brandon Falk. How conditional branches work in vectorized emulation. https://gamozolabs.github.io/fuzzing/2019/10/07/vectorized_emulation_condbranch.html, 2018.

[25] Brandon Falk. Vectorized emulation: Hardware accelerated taint tracking at 2 trillion instructions per second. https://gamozolabs.github.io/fuzzing/2018/10/14/vectorized_emulation.html, 2018.

[26] Andrea Fioraldi, Dominik Maier, Heiko Eißfeldt, and Marc Heuse. AFL++: Combining incremental steps of fuzzing research. In USENIX Workshop on Offensive Technologies (WOOT), 2020.

[27] Shuitao Gan, Chao Zhang, Peng Chen, Bodong Zhao, Xiaojun Qin, Dong Wu, and Zuoning Chen. Greyone: Data flow sensitive fuzzing. In USENIX Security Symposium (Security), 2019.

[28] Shuitao Gan, Chao Zhang, Xiaojun Qin, Xuwen Tu, Kang Li, Zhongyu Pei, and Zuoning Chen. Collafl: Path sensitive fuzzing. In IEEE Symposium on Security and Privacy (Oakland), 2018.

[29] Vijay Ganesh and David L. Dill. A decision procedure for bit-vectors and arrays. In International Conference on Computer Aided Verification (CAV), 2007.

[30] Patrice Godefroid, Adam Kiezun, and Michael Y. Levin. Grammar-based whitebox fuzzing. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2008.

[31] Patrice Godefroid, Nils Klarlund, and Koushik Sen. DART: Directed automated random testing. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2005.

[32] Patrice Godefroid, Michael Y. Levin, and David A. Molnar. Automated whitebox fuzz testing. In Annual Network and Distributed System Security Symposium (NDSS), 2008.

[33] Patrice Godefroid, Hila Peleg, and Rishabh Singh. Learn&Fuzz: Machine learning for input fuzzing. In IEEE/ACM International Conference on Automated Software Engineering (ASE), 2017.

[34] Google. TCMalloc. https://github.com/google/tcmalloc.

[35] Google. honggfuzz. https://github.com/google/honggfuzz, 2010.

[36] Google. Fuzzing for security. https://blog.chromium.org/2012/04/fuzzing-for-security.html, 2012.

[37] Google. FuzzBench: Fuzzer benchmarking as a service. https://google.github.io/fuzzbench/, 2020.

[38] Heike Hofmann, Karen Kafadar, and Hadley Wickham. Letter-value plots: Boxplots for large data. Technical report, had.co.nz, 2011.

[39] Kyriakos Ispoglou, Daniel Austin, Vishwath Mohan, and Mathias Payer. FuzzGen: Automatic fuzzer generation. In USENIX Security Symposium (Security), 2020.

[40] M. Ammar Ben Khadra, Dominik Stoffel, and Wolfgang Kunz. gosat: Floating-point satisfiability as global optimization. In Formal Methods in Computer Aided Design (FMCAD), 2017.

[41] lafintel. Circumventing fuzzing roadblocks with compiler transformations. https://lafintel.wordpress.com/, 2016.

[42] Caroline Lemieux, Rohan Padhye, Koushik Sen, and Dawn Song. PerfFuzz: Automatically generating pathological inputs. In International Symposium on Software Testing and Analysis (ISSTA), 2018.

[43] Caroline Lemieux and Koushik Sen. FairFuzz: A targeted mutation strategy for increasing greybox fuzz testing coverage. In IEEE/ACM International Conference on Automated Software Engineering (ASE), 2018.

[44] Yuekang Li, Bihuan Chen, Mahinthan Chandramohan, Shang-Wei Lin, Yang Liu, and Alwen Tiu. Steelix: Program-state based binary fuzzing. In ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE), 2017.

[45] Daniel Liew, Cristian Cadar, Alastair F. Donaldson, and J. Ryan Stinnett. Just fuzz it: Solving floating-point constraints using coverage-guided fuzzing. In ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE), 2019.

[46] Valentin J. M. Manès, Soomin Kim, and Sang Kil Cha. Ankou: Guiding grey-box fuzzing towards combinatorial difference. In International Conference on Software Engineering (ICSE), 2020.

[47] Barton P. Miller, Louis Fredriksen, and Bryan So. An empirical study of the reliability of Unix utilities. Communications of the ACM, 33(12):32–44, 1990.

[48] Aina Niemetz and Mathias Preiner. Bitwuzla at the SMT-COMP 2020. CoRR, abs/2006.01621, 2020.

[49] Aina Niemetz and Mathias Preiner. Bitwuzla at the SMT-COMP 2021. https://smt-comp.github.io/2021/system-descriptions/Bitwuzla.pdf, 2021.

[50] Aina Niemetz, Mathias Preiner, and Armin Biere. Boolector 2.0. J. Satisf. Boolean Model. Comput., 9(1):53–58, 2014.

[51] Rohan Padhye, Caroline Lemieux, Koushik Sen, Mike Papadakis, and Yves Le Traon. Semantic fuzzing with Zest. In International Symposium on Software Testing and Analysis (ISSTA), 2019.

[52] Rohan Padhye, Caroline Lemieux, Koushik Sen, Laurent Simon, and Hayawardh Vijayakumar. FuzzFactory: Domain-specific fuzzing with waypoints. In Annual ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA), 2019.

[53] Awanish Pandey, Phani Raj Goutham Kotcharlakota, and Subhajit Roy. Deferred concretization in symbolic execution via fuzzing. In International Symposium on Software Testing and Analysis (ISSTA), 2019.

[54] Hui Peng, Yan Shoshitaishvili, and Mathias Payer. T-Fuzz: Fuzzing by program transformation. In IEEE Symposium on Security and Privacy (Oakland), 2018.

[55] Theofilos Petsios, Jason Zhao, Angelos D. Keromytis, and Suman Jana. SlowFuzz: Automated domain-independent detection of algorithmic complexity vulnerabilities. In ACM Conference on Computer and Communications Security (CCS), 2017.

[56] Sebastian Poeplau and Aurélien Francillon. Symbolic execution with SymCC: Don't interpret, compile! In USENIX Security Symposium (Security), 2020.

[57] Sebastian Poeplau and Aurélien Francillon. SymQEMU: Compilation-based symbolic execution for binaries. In Annual Network and Distributed System Security Symposium (NDSS), 2021.

[58] LLVM Project. LLVM Language Reference Manual. https://llvm.org/docs/LangRef.html.

[59] Mohit Rajpal, William Blum, and Rishabh Singh. Not all bytes are equal: Neural byte sieve for fuzzing. arXiv preprint arXiv:1711.04596, 2017.

[60] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida, and Herbert Bos. VUZZER: Application-aware evolutionary fuzzing. In Annual Network and Distributed System Security Symposium (NDSS), 2017.

[61] Jesse Ruderman. Introducing jsfunfuzz. http://www.squarefree.com/2007/08/02/introducing-jsfunfuzz/, 2007.

[62] Sergej Schumilo, Cornelius Aschermann, Ali Abbasi, Simon Wörner, and Thorsten Holz. Nyx: Greybox hypervisor fuzzing using fast snapshots and affine types. In 30th USENIX Security Symposium (USENIX Security 21), 2021.

[63] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and Thorsten Holz. kAFL: Hardware-assisted feedback fuzzing for OS kernels. In USENIX Security Symposium (Security), 2017.

[64] Koushik Sen, Darko Marinov, and Gul Agha. CUTE: A concolic unit testing engine for C. In ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE), 2005.

[65] Kosta Serebryany. Continuous fuzzing with libFuzzer and AddressSanitizer. In IEEE Cybersecurity Development (SecDev). IEEE, 2016.

[66] Dongdong She, Kexin Pei, Dave Epstein, Junfeng Yang, Baishakhi Ray, and Suman Jana. NEUZZ: Efficient fuzzing with neural program learning. In IEEE Symposium on Security and Privacy (Oakland), 2019.

[67] Shiqi Shen, Shweta Shinde, Soundarya Ramesh, Abhik Roychoudhury, and Prateek Saxena. Neuro-symbolic execution: Augmenting symbolic execution with neural constraints. In Annual Network and Distributed System Security Symposium (NDSS), 2019.

[68] László Szekeres. Memory corruption mitigation via software hardening and bug-finding. PhD thesis, Stony Brook University, 2017.

[69] Dmitry Vyukov. Syzkaller: An unsupervised, coverage-guided kernel fuzzer, 2019.

[70] Daimeng Wang, Zheng Zhang, Hang Zhang, Zhiyun Qian, Srikanth V. Krishnamurthy, and Nael Abu-Ghazaleh. SyzVegas: Beating kernel fuzzing odds with reinforcement learning. In USENIX Security Symposium (Security), 2021.

[71] Jinghan Wang, Chengyu Song, and Heng Yin. Reinforcement learning-based hierarchical seed scheduling for greybox fuzzing. In Annual Network and Distributed System Security Symposium (NDSS), 2021.

[72] Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. Skyfire: Data-driven seed generation for fuzzing. In IEEE Symposium on Security and Privacy (Oakland), 2017.

[73] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou. TaintScope: A checksum-aware directed fuzzing tool for automatic software vulnerability detection. In IEEE Symposium on Security and Privacy (Oakland), 2010.

[74] Wen Xu, Sanidhya Kashyap, Changwoo Min, and Taesoo Kim. Designing new operating primitives to improve fuzzing performance. In ACM Conference on Computer and Communications Security (CCS), 2017.

[75] Wei You, Xueqiang Wang, Shiqing Ma, Jianjun Huang, Xiangyu Zhang, XiaoFeng Wang, and Bin Liang. Profuzzer: On-the-fly input type probing for better zero-day vulnerability discovery. In IEEE Symposium on Security and Privacy (Oakland), 2019.

[76] Tai Yue, Pengfei Wang, Yong Tang, Enze Wang, Bo Yu, Kai Lu, and Xu Zhou. EcoFuzz: Adaptive energy-saving greybox fuzzing as a variant of the adversarial multi-armed bandit. In USENIX Security Symposium (Security), 2020.

[77] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim. QSYM: A practical concolic execution engine tailored for hybrid fuzzing. In USENIX Security Symposium (Security), 2018.

[78] Michal Zalewski. American Fuzzy Lop. (2014). http://lcamtuf.coredump.cx/afl, 2014.

[79] Yaowen Zheng, Ali Davanian, Heng Yin, Chengyu Song, Hongsong Zhu, and Limin Sun. Firm-AFL: High-throughput greybox fuzzing of IoT firmware via augmented process emulation. In USENIX Security Symposium (Security), 2019.

### Appendix

This section includes additional results from the FuzzBench experiment. The full report can be retrieved at https://anonysp2022.github.io/.