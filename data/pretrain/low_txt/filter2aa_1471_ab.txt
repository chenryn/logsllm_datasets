### NTFS Recovery Support

**Design:**
- **Metadata Logging:** 
  - **Log File Service:** Describes the mechanisms for managing log files.
  - **Log Record Types:** Explains the different types of log records used in NTFS.

**Recovery:**
- **Analysis Pass:** The initial phase where the system analyzes the log file to determine the state of the file system.
- **Redo Pass:** Applies the transactions that were not yet committed to the file system.
- **Undo Pass:** Rolls back any uncommitted transactions to ensure consistency.

**NTFS Bad-Cluster Recovery:**
- **Self-Healing:** Automatic detection and repair of bad clusters.
- **Online Check-Disk and Fast Repair:** Tools for checking and repairing the file system without taking it offline.

**Encrypted File System (EFS):**
- **Encrypting a File for the First Time:** Steps and considerations for encrypting a file.
- **The Decryption Process:** How EFS decrypts files.
- **Backing Up Encrypted Files:** Best practices for backing up encrypted data.
- **Copying Encrypted Files:** Considerations when copying encrypted files.
- **BitLocker Encryption Offload:** Offloading encryption tasks to improve performance.
- **Online Encryption Support:** Enabling encryption on live, mounted volumes.

**Direct Access (DAX) Disks:**
- **DAX Driver Model:** The architecture and design of DAX drivers.
- **DAX Volumes:** Characteristics and management of DAX volumes.
- **Cached and Noncached I/O in DAX Volumes:** How I/O operations are handled in DAX volumes.
- **Mapping of Executable Images:** Techniques for mapping executable images in DAX volumes.
- **Block Volumes:** Overview of block volumes and their role in DAX.
- **File System Filter Drivers and DAX:** Integration of file system filter drivers with DAX.
- **Flushing DAX Mode I/Os:** Methods for ensuring data integrity during I/O operations.
- **Large and Huge Pages Support:** Enhancements for handling large memory pages.
- **Virtual PM Disks and Storage Spaces Support:** Support for virtual persistent memory disks and storage spaces.

### Resilient File System (ReFS)

**Minstore Architecture:**
- **B+ Tree Physical Layout:** Structure and organization of B+ trees in ReFS.
- **Allocators:** Mechanisms for managing and allocating storage.
- **Page Table:** Description of the page table and its role in ReFS.

**Minstore I/O:**
- **ReFS Architecture:** Overall design and structure of ReFS.
- **ReFS On-Disk Structure:** Details of the on-disk format and organization.
- **Object IDs:** Use and management of object identifiers in ReFS.

**Security and Change Journal:**
- **ReFS Advanced Features:** Overview of advanced features in ReFS.
- **File’s Block Cloning (Snapshot Support) and Sparse VDL:** Techniques for efficient data cloning and sparse volume data layout.
- **ReFS Write-Through:** Ensuring data is written directly to the disk.
- **ReFS Recovery Support:** Mechanisms for recovering from file system errors.
- **Leak Detection:** Tools and methods for detecting and addressing memory leaks.

**Shingled Magnetic Recording (SMR) Volumes:**
- **ReFS Support for Tiered Volumes and SMR:** Integration of ReFS with tiered storage and SMR volumes.
- **Container Compaction:** Techniques for optimizing storage usage.
- **Compression and Ghosting:** Methods for compressing data and managing ghosted files.

### Storage Spaces

**Spaces Internal Architecture:**
- **Services Provided by Spaces:** Overview of the services and features provided by Storage Spaces.

### Chapter 12: Startup and Shutdown

**Boot Process:**
- **UEFI Boot:** Explanation of the UEFI boot process.
- **BIOS Boot Process:** Description of the legacy BIOS boot process.
- **Secure Boot:** Security features for ensuring a trusted boot environment.
- **Windows Boot Manager:** Role and functionality of the Windows Boot Manager.
- **Boot Menu:** Options and configurations available in the boot menu.
- **Launching a Boot Application:** Steps for launching a boot application.
- **Measured Boot:** Techniques for verifying the integrity of the boot process.
- **Trusted Execution:** Ensuring the execution environment is secure.
- **Windows OS Loader:** Detailed explanation of the Windows OS Loader.
- **Booting from iSCSI:** Procedures for booting from an iSCSI target.
- **Hypervisor Loader:** Role and functionality of the hypervisor loader.
- **VSM Startup Policy:** Policies for Virtual Secure Mode (VSM) startup.
- **Secure Launch:** Ensuring a secure launch of the operating system.
- **Initializing the Kernel and Executive Subsystems:** Steps for initializing the kernel and executive subsystems.
- **Kernel Initialization Phase 1:** Initial steps in kernel initialization.
- **Smss, Csrss, and Wininit:** Roles and functions of these critical processes.
- **ReadyBoot:** Features and benefits of ReadyBoot.
- **Images that Start Automatically:** List and description of automatically started images.

**Shutdown:**
- **Hibernation and Fast Startup:** Explanation of hibernation and fast startup features.
- **Windows Recovery Environment (WinRE):** Overview of the Windows Recovery Environment.
- **Safe Mode:** Description and use cases for Safe Mode.
- **Driver Loading in Safe Mode:** How drivers are loaded in Safe Mode.
- **Safe-Mode-Aware User Programs:** Programs that can detect and adapt to Safe Mode.
- **Boot Status File:** Information and use of the boot status file.

### Contents of Windows Internals, Seventh Edition, Part 1
- **Index**
- **About the Authors**

**Andrea Allievi:**
- A system-level developer and security research engineer with over 15 years of experience.
- Graduated from the University of Milano-Bicocca in 2010 with a bachelor’s degree in computer science.
- Developed a 64-bit Master Boot Record (MBR) Bootkit as part of his thesis.
- Specializes in operating systems internals, from kernel-level code to user-mode code.
- Designed the first UEFI Bootkit and multiple PatchGuard bypasses.
- Author of tools for removing malware and advanced persistent threats.
- Worked at TgSoft, Saferbytes, and Talos group of Cisco Systems Inc.
- Joined Microsoft in 2016 as a security research engineer in the Microsoft Threat Intelligence Center (MSTIC).
- Since January 2018, has been a senior core OS engineer in the Kernel Security Core team, developing new features like Retpoline and Speculation Mitigations.
- Active in the security research community, authoring technical articles and speaking at conferences such as Recon and Microsoft BlueHat.

**Alex Ionescu:**
- Vice President of Endpoint Engineering at CrowdStrike, Inc.
- World-class security architect and consultant expert in low-level system software, kernel development, security training, and reverse engineering.
- Contributed to the repair of numerous critical security vulnerabilities in the Windows kernel.
- Lead kernel developer for ReactOS, an open-source Windows clone.
- Worked at Apple on the iOS kernel, boot loader, and drivers.
- Founder of Winsider Seminars & Solutions, Inc., specializing in low-level system software, reverse engineering, and security training.
- Active in the community, offering Windows Internals training, support, and resources.

### Foreword

**Mark Russinovich:**
- Azure Chief Technology Officer and Technical Fellow at Microsoft.
- Recognized the world-changing nature of Windows NT 3.1 upon its release in 1993.
- Co-authored "Inside Windows 2000" with Dave Solomon, adding new chapters based on his "NT Internals" column.
- Brought in Alex Ionescu for the fifth edition, covering Windows XP and Windows Vista.
- Moved to Azure, limiting his time for the seventh edition.
- Andrea Allievi stepped in to complete Part 2, adding new content on Hyper-V, ReFS, DAX, and more.
- Endorsed the book as authoritative, clear, and comprehensive.

### Introduction

**Windows Internals, Seventh Edition, Part 2:**
- Intended for advanced computer professionals (developers, security researchers, and system administrators).
- Focuses on the core components of Microsoft Windows 10 (up to and including the May 2021 Update, 21H1) and Windows Server (from Server 2016 up to Server 2022).
- Benefits:
  - Developers: Better understanding of design choices, improved debugging skills, and enhanced application development.
  - System Administrators: Improved troubleshooting and performance management.
  - Security Researchers: Insights into potential misbehavior and security features.

### History of the Book

- **First Edition (1992):** "Inside Windows NT" by Helen Custer.
- **Second Edition (1998):** "Inside Windows NT, Second Edition" by David Solomon, updated to cover Windows NT 4.0.
- **Third Edition (2000):** "Inside Windows 2000, Third Edition" by David Solomon and Mark Russinovich, added new topics and covered kernel changes.
- **Fourth Edition (2004):** "Windows Internals, Fourth Edition" for Windows XP and Windows Server 2003, added content for IT professionals.
- **Fifth Edition (2009):** Updated for Windows Vista and Windows Server 2008, with Alex Ionescu as a new co-author.
- **Sixth Edition (2012):** Split into two parts due to length, fully updated for Windows 7 and Windows Server 2008 R2.
- **Seventh Edition (2017):** Refactored chapters for better cohesion, with Pavel Yosifovich joining as a co-author.

### Changes in Part 2

- **New Content:**
  - Hyper-V
  - ReFS and DAX
  - Expansive updates on system and management mechanisms.
- **Fully Updated:**
  - Covers the latest public build of Windows 10, Version 2103 (May 2021 Update / 21H1).
  - Includes Windows Server 2019 and 2022.
  - Prepares readers for Windows 11.

### Hands-On Experiments

- **Tools and Techniques:**
  - Kernel debugger
  - SysInternals tools
  - Custom tools developed for the book.
- **EXPERIMENT Sections:**
  - Steps for trying out tools and techniques to gain hands-on experience with Windows internals.

### Topics Not Covered

- **Exclusions:**
  - COM+
  - Microsoft .NET Framework
  - User, programming, and system administration guides.

### Warning and Caveat

- **Undocumented Behavior:**
  - This book describes undocumented behavior of the internal workings of Windows, which may change in future versions.