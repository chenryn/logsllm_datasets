# PTrix: Efficient Hardware-Assisted Fuzzing for COTS Binaries

## Table 4: Vulnerabilities Discovered by PTrix

PTrix triggered 19,000 unique exceptions, including crashes and hangs, as measured by AFL. We manually analyzed a subset of these exceptions and confirmed 35 new vulnerabilities. Among these, 25 are memory corruption vulnerabilities, and 10 are Denial-of-Service (DoS) flaws that can lead to endless computation or resource exhaustion. For the identified vulnerabilities, 11 CVE numbers have been assigned. We are in communication with the developers for patches, and upon their availability, we will disclose the details of these vulnerabilities.

### Analysis of Vulnerabilities

Upon closer inspection of the results, we observed that the discovery of certain vulnerabilities was indeed facilitated by our new feedback mechanism. Of the 10 DoS vulnerabilities, 9 were due to recursive calls or deep loops, following the same pattern as the example shown in Figure 6. As explained in Section 3, QEMU-AFL is unlikely to catch such issues. For the memory corruption vulnerabilities, although most of them occur in execution spaces that QEMU-AFL would also likely cover, we identified one case that could only be discovered using our new feedback. Below, we detail this memory corruption case and a DoS vulnerability (the other DoS vulnerabilities share the same pattern).

#### Stack Overflow/Exhaustion in c++filt
The `c++filt` tool, shipped with binutils-2.29, can experience stack exhaustion when processing a long sequence of "F" characters. Each "F" leads to a recursive call chain involving functions such as `demangle_nested_args`, `demangle_args`, `do_arg`, and `do_type`. The stack frames of these recursive functions gradually consume the entire stack, leading to a stack overflow.

#### Integer Overflow in objdump
In `objdump` from binutils-2.29, an integer overflow can occur, leading to memory corruption. Specifically, `objdump` uses `qsort` to sort an array, with the array size specified by the return value of `bfd_canonicalize_dynamic_reloc`. When an exception occurs, `bfd_canonicalize_dynamic_reloc` may return -1, but this is ignored by `objdump`. Consequently, `qsort` incorrectly casts -1 to the largest unsigned value, which is then used as the array size, causing out-of-bounds memory accesses. The logic in `bfd_canonicalize_dynamic_reloc` is similar to that shown in Figure 5a. Due to reasons similar to those explained in Section 3, QEMU-AFL cannot make `bfd_canonicalize_dynamic_reloc` return -1.

## Discussion

### Limitations and Future Directions

#### Path Explosion
PTrix implements a gray-box fuzzing scheme with path-sensitive feedback, which can lead to the problem of path explosion. This means the fuzzer may explore a large number of paths and produce an extremely large corpus, potentially exhausting the available bitmap entries used to record coverage. To mitigate this, PTrix incorporates the technique of descending path sensitivity, which favors the prefix of an execution path and suppresses long paths, preventing the generation of a large corpus and avoiding localized code regions.

#### Generality
PTrix leverages Processor Trace (PT) to trace the target program, but PT is currently only available on x86 platforms. However, we believe this does not limit the generality of PTrix's design philosophy. Hardware tracing has become a common feature in major architectures, such as ARM, which includes the Embedded Trace Macrocell (ETM) for runtime tracing. ETM, like PT, can trace instructions with minimal performance impact and provides a rich set of configuration options. Therefore, PTrix can be ported to other platforms without significant modifications to its design.

## Related Work

### Binary-Compatible Coverage-Based Fuzzing
Coverage-based fuzzing requires feedback from the target program, which is challenging when only a binary is available. Various approaches have been explored:

#### Fuzzing with Dynamic Instrumentation
Dynamic instrumentation solutions [3, 6, 7, 24] dynamically translate binary code, allowing the fuzzer to intercept and collect coverage information. However, this approach significantly slows down the fuzzing process. The fastest tool in this category, QEMU-AFL, reportedly introduces 2 to 5 times the overhead.

#### Hardware-Assisted Fuzzing
Motivated by the inefficiency of dynamic instrumentation, hardware-assisted fuzzing techniques have been proposed [38]. Similar to PTrix, Honggfuzz [5] and kAFL [29] use Intel PT to efficiently collect execution traces. However, these systems do not fully exploit PT's potential. Honggfuzz trades off detailed coverage for execution throughput, while kAFL and PTFuzz spend too much bandwidth on reconstructing the execution flow from PT traces.

### Improvements in Coverage-Based Fuzzing

#### Seed Generation
Many programs process highly structured files over different stages, making it difficult for randomly generated inputs to reach the core logic. Skyfire [35] and Godefroid et al. [17, 26] generate more targeted seeds based on a priori knowledge about the inputs, improving the effectiveness of fuzzing.

#### Fuzzing Scheduling
When there are many seeds in the input queue, the strategy for selecting seeds is critical. AFL [22] uses a round-robin scheduling algorithm that prefers seeds bringing new edge coverage and taking less time to run. Böhme et al. [11] propose prioritizing inputs that follow less frequently visited paths, significantly accelerating code coverage and bug discovery.

#### Coverage Guidance
Providing more informative coverage guidance is a new trend in fuzz-testing. CollAFL [15] reduces path collisions by providing more sensitive feedback, and recent works [13, 31] introduce context-aware branch coverage to guide the fuzzer. PTrix aims to provide higher-level path guidance, enhancing its fuzzing throughput.

## Conclusion

We present PTrix, a binary-compatible fuzz-testing tool designed to take full advantage of Intel Processor Trace. PTrix demonstrates that new hardware features can significantly accelerate binary-only fuzzing through parallel trace parsing and a PT-friendly feedback mechanism. PTrix has identified 35 new software bugs in well-tested programs, with 11 CVEs assigned thus far.

## Acknowledgments

The authors thank the anonymous reviewers for their constructive comments. This project was supported by the National Science Foundation (Grants CNS-1718459, CNS-1748334, CNS-1718459) and the Army Research Office (Grant W911NF-17-1-0039). The opinions, findings, and conclusions expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

## References

[1] Intel. 2013. Intel Processor Trace. https://software.intel.com/en-us/blogs/2013/09/18/processor-tracing.
[2] ianare. 2013. Sample images for testing Exif metadata retrieval. https://github.com/ianare/exif-samples.
[3] lcamtuf. 2014. AFL technical details. http://lcamtuf.coredump.cx/afl/technical_details.txt.
[4] lcamtuf. 2014. Fuzzing random programs without execve(). https://lcamtuf.blogspot.com/2014/10/fuzzing-binaries-without-execve.html.
[5] honggfuzz. 2015. Honggfuzz. http://honggfuzz.com.
[6] vrtadmin. 2016. AFL-dyninst. https://github.com/vrtadmin/moow/tree/master/afl-dyninst.
[7] nccgroup. 2016. Project Triforce: Run AFL on Everything! https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2016/june/project-triforce-run-afl-on-everything/.
[8] Recon. 2017. Harnessing Intel Processor Trace on Windows for fuzzing and dynamic analysis. https://recon.cx/2017/brussels/talks/intel_processor_trace.html.
[9] Bellard, F. 2005. QEMU, a Fast and Portable Dynamic Translator. In Proceedings of the Annual Conference on USENIX Annual Technical Conference (USENIX ATC). USENIX Association.
[10] Böhme, M., Pham, V.-T., Nguyen, M.-D., and Roychoudhury, A. 2017. Directed greybox fuzzing. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM.
[11] Böhme, M., Pham, V.-T., and Roychoudhury, A. 2016. Coverage-based greybox fuzzing as markov chain. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM.
[12] Böck, H. 2014. The Fuzzing Project - apps. https://fuzzing-project.org/software.html.
[13] Chen, P. and Chen, H. 2018. Angora: Efficient Fuzzing by Principled Search. arXiv preprint arXiv:1803.01307 (2018).
[14] Chen, Y., Li, P., Xu, J., Guo, S., Zhou, R., Zhang, Y., Wei, T., and Lu, L. 2020. SAVIOR: Towards Bug-Driven Hybrid Testing. In To appear in the 2020 IEEE Symposium on Security and Privacy (SP). IEEE.
[15] Gan, S., Zhang, C., Qin, X., Tu, X., Li, K., Pei, Z., and Chen, Z. 2018. CollAFL: Path Sensitive Fuzzing. In 2018 IEEE Symposium on Security and Privacy (SP). IEEE.
[16] Ge, X., Cui, W., and Jaeger, T. 2017. Griffin: Guarding control flows using intel processor trace. In Proceedings of the Twenty-Second International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS). ACM.
[17] Godefroid, P., Kiezun, A., and Levin, M. Y. 2008. Grammar-based Whitebox Fuzzing. In Proceedings of the 29th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI). ACM.
[18] Godefroid, P., Levin, M. Y., and Molnar, D. 2012. SAGE: Whitebox Fuzzing for Security Testing. Queue 10, 1, Article 20 (Jan. 2012), 8 pages.
[19] Henke, C., Schmoll, C., and Zseby, T. 2008. Empirical Evaluation of Hash Functions for Multipoint Measurements. SIGCOMM Comput. Commun. Rev. 38, 3 (July 2008), 39–50.
[20] Klees, G., Ruef, A., Cooper, B., Wei, S., and Hicks, M. 2018. Evaluating Fuzz Testing. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM.
[21] Geeknik Labs. 2016. Fuzzing Perl: A Tale of Two American Fuzzy Lops. http://www.geeknik.net/71nvhf1fp.
[22] lcamtuf. 2005. american fuzzy lop. http://lcamtuf.coredump.cx/afl/.
[23] Lemieux, C. and Sen, K. 2017. FairFuzz: Targeting Rare Branches to Rapidly Increase Greybox Fuzz Testing Coverage. CoRR abs/1709.07101 (2017).
[24] Li, Y., Chen, B., Chandramohan, M., Lin, S.-W., Liu, Y., and Tiu, A. 2017. Steelix: program-state based binary fuzzing. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (FSE). ACM.
[25] Peng, H., Shoshitaishvili, Y., and Payer, M. 2018. T-Fuzz: fuzzing by program transformation. In 2018 IEEE Symposium on Security and Privacy (SP). IEEE.
[26] Pham, V.-T., Böhme, M., and Roychoudhury, A. 2016. Model-based Whitebox Fuzzing for Program Binaries. In Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering (ASE). ACM.
[27] Rawat, S., Jain, V., Kumar, A., Cojocar, L., Giuffrida, C., and Bos, H. 2017. Vuzzer: Application-aware evolutionary fuzzing. In Proceedings of the Network and Distributed System Security Symposium (NDSS).
[28] Rebert, A., Cha, S. K., Avgerinos, T., Foote, J., Warren, D., Grieco, G., and Brumley, D. 2014. Optimizing Seed Selection for Fuzzing. In Proceedings of the 23rd USENIX Conference on Security Symposium (USENIX Security). USENIX Association.
[29] Schumilo, S., Aschermann, C., Gawlik, R., Schinzel, S., and Holz, T. 2017. kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels. In Proceedings of the 26rd USENIX Conference on Security Symposium (USENIX Security). USENIX Association.
[30] Seltzer, M. I. and Yigit, O. 1991. A New Hashing Package for UNIX.. In USENIX Winter. USENIX.
[31] Seo, H. and Kim, S. 2014. How we get there: A context-guided search strategy in concolic testing. In Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE). ACM.
[32] Shoshitaishvili, Y., Wang, R., Salls, C., Stephens, N., Polino, M., Dutcher, A., Grosen, J., Feng, S., Hauser, C., Kruegel, C., and Vigna, G. 2016. SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis. In Proceedings of the 2016 IEEE Symposium on Security and Privacy (SP). IEEE.
[33] Stephens, N., Grosen, J., Salls, C., Dutcher, A., Wang, R., Corbetta, J., Shoshitaishvili, Y., Kruegel, C., and Vigna, G. 2016. Driller: Augmenting Fuzzing Through Selective Symbolic Execution.. In Proceedings of the Network and Distributed System Security Symposium (NDSS).
[34] Szekeres, L. 2017. Memory corruption mitigation via hardening and testing. Ph.D. Dissertation. Stony Brook University.
[35] Wang, J., Chen, B., Wei, L., and Liu, Y. 2017. Skyfire: Data-driven seed generation for fuzzing. In Proceedings of the 2017 IEEE Symposium on Security and Privacy (SP). IEEE.
[36] Woo, M., Cha, S. K., Gottlieb, S., and Brumley, D. 2013. Scheduling black-box mutational fuzzing. In Proceedings of the 2013 ACM SIGSAC conference on Computer and Communications Security (CCS). ACM.
[37] Xu, W., Kashyap, S., Min, C., and Kim, T. 2017. Designing New Operating Primitives to Improve Fuzzing Performance. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM.
[38] Zhang, G., Zhou, X., Luo, Y., Wu, X., and Min, E. 2018. PTfuzz: Guided Fuzzing with Processor Trace Feedback. IEEE Access (2018).

## Supplementary Figures and Evaluation Data

### Figure 9: CDF of Call Chains Triggered by Different Fuzzing Techniques
- **PTrix (Solid Line)**
- **QEMU-AFL (Dash Line)**

#### CDF of Call Chains for Different Tools
- **cxxfilt**: 0-100, lengths 1-15
- **png**: 0-100, lengths 1-15
- **jpeg**: 0-100, lengths 2-14
- **exif**: 0-100, lengths 2-43
- **xml-lint**: 0-100, lengths 0-70
- **perl**: 0-100, lengths 1-19
- **nm**: 0-100, lengths 2-4
- **objdump**: 0-100, lengths 2-20
- **mupdf**: 0-100, lengths 3-43

---

This optimized version of the text is more structured, clear, and professional, with improved readability and coherence.