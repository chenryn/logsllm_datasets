Certainly! Here is the optimized and more professional version of the provided text:

---

### Standards and Verification

There are established standards, such as Algorithm A.2.3 for Verifiable Canonical Generation of the Generator \( g \) from NIST FIPS 186-4 [65]. It would be valuable to formally prove that the commitment parameters were generated correctly. However, under the most basic security assumptions, this task appears trivial, and no superior security notation is currently known to the authors.

### Future Work

Another promising area for future research involves using an interactive theorem prover, such as CakeML, which provides formal guarantees for the extracted code down to the machine code level. This approach could enhance the robustness and reliability of cryptographic protocols.

### References

[1] S. Goldwasser, S. Micali, and C. Rackoff, “The knowledge complexity of interactive proof-systems (extended abstract),” in STOC. ACM, 1985, pp. 291–304.
[2] R. Cramer, “Modular design of secure yet practical cryptographic protocols,” 1997.
[3] D. Chaum, “Untraceable electronic mail, return addresses, and digital pseudonyms,” Commun. ACM, vol. 24, no. 2, pp. 84–88, 1981.
[4] C. A. Neff, “A Verifiable Secret Shuffle and its Application to E-Voting,” in 8th ACM Conference on Computer and Communications Security (CCS 2001), M. K. Reiter and P. Samarati, Eds. ACM, 2001, pp. 116–125.
[5] J. Furukawa and K. Sako, “An Efficient Scheme for Proving a Shuffle,” in Advances in Cryptology - CRYPTO 2001, 21st Annual International Cryptology Conference, Proceedings, ser. Lecture Notes in Computer Science, J. Kilian, Ed., vol. 2139. Springer, 2001, pp. 368–387.
[6] M. Jakobsson, A. Juels, and R. L. Rivest, “Making Mix Nets Robust for Electronic Voting by Randomized Partial Checking,” in Proceedings of the 11th USENIX Security Symposium, San Francisco, CA, USA, August 5-9, 2002, 2002, pp. 339–353.
[7] D. Wikström, “A Sender Verifiable Mix-Net and a New Proof of a Shuffle,” in Advances in Cryptology - ASIACRYPT 2005, 11th International Conference on the Theory and Application of Cryptology and Information Security, Chennai, India, December 4-8, 2005, Proceedings, 2005, pp. 273–292.
[8] S. Khazaei, T. Moran, and D. Wikström, “A Mix-Net from Any CCA2 Secure Cryptosystem,” in Advances in Cryptology - ASIACRYPT 2012 - 18th International Conference on the Theory and Application of Cryptology and Information Security, Proceedings, ser. Lecture Notes in Computer Science, X. Wang and K. Sako, Eds., vol. 7658. Springer, 2012, pp. 607–625.
[9] B. Schneier, Applied Cryptography - Protocols, Algorithms, and Source Code in C, 2nd Edition. Wiley, 1996.
[10] R. Küsters, J. Müller, E. Scapin, and T. Truderung, “sElect: A Lightweight Verifiable Remote Voting System,” in IEEE 29th Computer Security Foundations Symposium, CSF 2016, Lisbon, Portugal, June 27 - July 1, 2016, 2016, pp. 341–354.
[11] C. Hébant, D. H. Phan, and D. Pointcheval, “Linearly-Homomorphic Signatures and Scalable Mix-Nets,” IACR Cryptology ePrint Archive, vol. 2019, p. 547, 2019.
[12] D. Wikström and J. Groth, “An Adaptively Secure Mix-Net Without Erasures,” in Automata, Languages and Programming, 33rd International Colloquium, ICALP 2006, Venice, Italy, July 10-14, 2006, Proceedings, Part II, 2006, pp. 276–287.
[13] D. Wikström, “A Commitment-Consistent Proof of a Shuffle,” in Information Security and Privacy, 14th Australasian Conference, ACISP 2009, Brisbane, Australia, July 1-3, 2009, Proceedings, 2009, pp. 407–421.
[14] B. Adida and D. Wikström, “Offline/Online Mixing,” in Automata, Languages and Programming, 34th International Colloquium, ICALP 2007, Wroclaw, Poland, July 9-13, 2007, Proceedings, 2007, pp. 484–495.
[15] ——, “How to Shuffle in Public,” in Theory of Cryptography, 4th Theory of Cryptography Conference, TCC 2007, Amsterdam, The Netherlands, February 21-24, 2007, Proceedings, 2007, pp. 555–574.
[16] B. Terelius and D. Wikström, “Proofs of Restricted Shuffles,” in Progress in Cryptology - AFRICACRYPT 2010, Third International Conference on Cryptology in Africa, ser. Lecture Notes in Computer Science, D. J. Bernstein and T. Lange, Eds., vol. 6055. Springer, 2010, pp. 100–113.
[17] D. Wikström, “A Universally Composable Mix-Net,” in Theory of Cryptography, First Theory of Cryptography Conference, TCC 2004, Proceedings, ser. Lecture Notes in Computer Science, M. Naor, Ed., vol. 2951. Springer, 2004, pp. 317–335.
[18] S. Bayer and J. Groth, “Efficient Zero-Knowledge Argument for Correctness of a Shuffle,” in Advances in Cryptology - EUROCRYPT 2012 - 31st Annual International Conference on the Theory and Applications of Cryptographic Techniques, ser. Lecture Notes in Computer Science, D. Pointcheval and T. Johansson, Eds., vol. 7237. Springer, 2012, pp. 263–280.
[19] P. Fauzi, H. Lipmaa, J. Siim, and M. Zajac, “An Efficient Pairing-Based Shuffle Argument,” in Advances in Cryptology - ASIACRYPT 2017 - 23rd International Conference on the Theory and Applications of Cryptology and Information Security, Hong Kong, China, December 3-7, 2017, Proceedings, Part II, 2017, pp. 97–127.
[20] P. Fauzi and H. Lipmaa, “Efficient Culpably Sound NIZK Shuffle Argument Without Random Oracles,” in Topics in Cryptology - CT-RSA 2016 - The Cryptographers’ Track at the RSA Conference 2016, San Francisco, CA, USA, February 29 - March 4, 2016, Proceedings, 2016, pp. 200–216.
[21] P. Fauzi, H. Lipmaa, and M. Zajac, “A Shuffle Argument Secure in the Generic Model,” in Advances in Cryptology - ASIACRYPT 2016 - 22nd International Conference on the Theory and Application of Cryptology and Information Security, Hanoi, Vietnam, December 4-8, 2016, Proceedings, Part II, 2016, pp. 841–872.
[22] H. Lipmaa and B. Zhang, “A More Efficient Computationally Sound Non-Interactive Zero-Knowledge Shuffle Argument,” in Security and Cryptography for Networks - 8th International Conference, SCN 2012, Amalfi, Italy, September 5-7, 2012. Proceedings, 2012, pp. 477–502.
[23] D. Wikström, “Five Practical Attacks for ‘Optimistic Mixing for Exit-Polls’,” in Selected Areas in Cryptography, ser. Lecture Notes in Computer Science, vol. 3006. Springer, 2003, pp. 160–175.
[24] S. Khazaei, B. Terelius, and D. Wikström, “Cryptanalysis of a universally verifiable efficient re-encryption mixnet,” in EVT/WOTE. USENIX Association, 2012.
[25] S. Khazaei and D. Wikström, “Randomized partial checking revisited,” in CT-RSA, ser. Lecture Notes in Computer Science, vol. 7779. Springer, 2013, pp. 115–128.
[26] R. Küsters, T. Truderung, and A. Vogt, “Formal Analysis of Chaumian Mix Nets with Randomized Partial Checking,” in 2014 IEEE Symposium on Security and Privacy, SP 2014, Berkeley, CA, USA, May 18-21, 2014, 2014, pp. 343–358.
[27] R. Küsters and T. Truderung, “Security Analysis of Re-Encryption RPC Mix Nets,” in IEEE European Symposium on Security and Privacy, EuroS&P 2016, Saarbrücken, Germany, March 21-24, 2016, 2016, pp. 227–242.
[28] T. Haines and J. Mueller, “Sok: Techniques for verifiable mix nets,” Cryptology ePrint Archive, Report 2020/490, 2020, https://eprint.iacr.org/2020/490.
[29] C. Park, K. Itoh, and K. Kurosawa, “Efficient anonymous channel and all/nothing election scheme,” in EUROCRYPT, 1993.
[30] E. Fujisaki and T. Okamoto, “Statistical zero knowledge protocols to prove modular polynomial relations,” in CRYPTO, ser. Lecture Notes in Computer Science, vol. 1294. Springer, 1997, pp. 16–30.
[31] D. Wikström, “Verificatum,” https://github.com/verificatum/verificatum-vcr, 2018.
[32] T. state of Geneva, “CHvote,” https://github.com/republique-et-canton-de-geneve/chvote-protocol-poc, 2018.
[33] A. Fiat and A. Shamir, “How to prove yourself: Practical solutions to identification and signature problems,” in CRYPTO, ser. Lecture Notes in Computer Science, vol. 263. Springer, 1986, pp. 186–194.
[34] D. Bernhard, O. Pereira, and B. Warinschi, “How not to prove yourself: Pitfalls of the Fiat-Shamir heuristic and applications to Helios,” in ASIACRYPT, ser. Lecture Notes in Computer Science, vol. 7658. Springer, 2012, pp. 626–643.
[35] R. L. Rivest, “On the notion of ‘software independence’ in voting systems,” Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences, vol. 366, no. 1881, pp. 3759–3767, 2008.
[36] T. Haines, S. J. Lewis, O. Pereira, and V. Teague, “How not to prove your election outcome,” in 2020 IEEE Symposium on Security and Privacy, SP 2020, San Jose, CA, USA, May 17-21, 2020, A. Oprea and H. Shacham, Eds. IEEE, 2020, pp. 784–800.
[37] R. Haenni, “Swiss post public intrusion test: undetectable attack against vote integrity and secrecy (2019),” 2019.
[38] J. A. Halderman and V. Teague, “The New South Wales iVote system: Security failures and verification flaws in a live online election,” in International Conference on E-Voting and Identity. Springer, 2015, pp. 35–53.
[39] S. Heiberg and J. Willemson, “Verifiable internet voting in Estonia,” in EVOTE. IEEE, 2014, pp. 1–8.
[40] D. Springall, T. Finkenauer, Z. Durumeric, J. Kitcat, H. Hursti, M. MacAlpine, and J. A. Halderman, “Security analysis of the Estonian internet voting system,” in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2014, pp. 703–715.
[41] D. Bernhard, V. Cortier, O. Pereira, B. Smyth, and B. Warinschi, “Adapting Helios for provable ballot privacy,” in Computer Security - ESORICS 2011 - 16th European Symposium on Research in Computer Security, Leuven, Belgium, September 12-14, 2011. Proceedings, ser. Lecture Notes in Computer Science, V. Atluri and C. Díaz, Eds., vol. 6879. Springer, 2011, pp. 335–354. [Online]. Available: http://dx.doi.org/10.1007/978-3-642-23822-2_19
[42] V. Cortier and B. Smyth, “Attacking and fixing Helios: An analysis of ballot secrecy,” Journal of Computer Security, vol. 21, no. 1, pp. 89–148, 2013.
[43] B. Adida, “Helios: Web-based open-audit voting,” in USENIX Security Symposium, P. C. van Oorschot, Ed. USENIX Association, 2008, pp. 335–348.
[44] P. Gaudry, “Breaking the encryption scheme of the Moscow internet voting system,” CoRR, vol. abs/1908.05127, 2019.
[45] K. Gjøsteen, “The Norwegian internet voting protocol,” in VOTE-ID, ser. Lecture Notes in Computer Science, vol. 7187. Springer, 2011, pp. 1–18.
[46] T. Haines, R. Gore, and B. Sharma, “Did you mix me? formally verifying verifiable mix nets in electronic voting,” Cryptology ePrint Archive, Report 2020/1114, 2020, https://eprint.iacr.org/2020/1114.
[47] Y. Bertot, P. Castéran, G. Huet, and C. Paulin-Mohring, Interactive theorem proving and program development : Coq’Art : the calculus of inductive constructions, ser. Texts in theoretical computer science. Springer, 2004.
[48] G. Barthe, B. Grégoire, and S. Zanella Béguelin, “Formal Certification of Code-Based Cryptographic Proofs,” in 36th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL 2009). ACM, 2009, pp. 90–101.
[49] T. Haines, R. Goré, and M. Tiwari, “Verified verifiers for verifying elections,” in Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, CCS 2019, London, UK, November 11-15, 2019, L. Cavallaro, J. Kinder, X. Wang, and J. Katz, Eds. ACM, 2019, pp. 685–702. [Online]. Available: https://doi.org/10.1145/3319535.3354247
[50] S. Delaune, M. Ryan, and B. Smyth, “Automatic verification of privacy properties in the applied Pi calculus,” in IFIPTM, ser. IFIP Advances in Information and Communication Technology, vol. 263. Springer, 2008, pp. 263–278.
[51] B. Smyth, M. Ryan, S. Kremer, and M. Kourjieh, “Towards automatic analysis of election verifiability properties,” in ARSPA-WITS, ser. Lecture Notes in Computer Science, vol. 6186. Springer, 2010, pp. 146–163.
[52] A. Bruni, E. Drewsen, and C. Schürmann, “Towards a mechanized proof of Selene receipt-freeness and vote-privacy,” in E-VOTE-ID, ser. Lecture Notes in Computer Science, vol. 10615. Springer, 2017, pp. 110–126.
[53] W. Jamroga, M. Knapik, and D. Kurpiewski, “Model checking the SELENE e-voting protocol in multi-agent logics,” in E-Vote-ID, ser. Lecture Notes in Computer Science, vol. 11143. Springer, 2018, pp. 100–116.
[54] V. Cortier, C. C. Dragan, F. Dupressoir, and B. Warinschi, “Machine-checked proofs for electronic voting: Privacy and verifiability for Belenios,” in CSF. IEEE Computer Society, 2018, pp. 298–312.
[55] P. Chaidos, V. Cortier, G. Fuchsbauer, and D. Galindo, “BeleniosRF: A Non-interactive Receipt-Free Electronic Voting Scheme,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, Vienna, Austria, October 24-28, 2016, 2016, pp. 1614–1625.
[56] G. Barthe, D. Hedin, S. Z. Béguelin, B. Grégoire, and S. Heraud, “A machine-checked formalization of sigma-protocols,” in CSF. IEEE Computer Society, 2010, pp. 246–260.
[57] J. B. Almeida, E. Bangerter, M. Barbosa, S. Krenn, A. Sadeghi, and T. Schneider, “A certifying compiler for zero-knowledge proofs of knowledge based on sigma-protocols,” in Computer Security - ESORICS 2010, 15th European Symposium on Research in Computer Security, Athens, Greece, September 20-22, 2010. Proceedings, 2010, pp. 151–167. [Online]. Available: https://doi.org/10.1007/978-3-642-15497-3_10
[58] J. B. Almeida, M. Barbosa, E. Bangerter, G. Barthe, S. Krenn, and S. Z. Béguelin, “Full proof cryptography: verifiable compilation of efficient zero-knowledge protocols,” in the ACM Conference on Computer and Communications Security, CCS’12, Raleigh, NC, USA, October 16-18, 2012, 2012, pp. 488–500. [Online]. Available: https://doi.org/10.1145/2382196.2382249
[59] T. P. Pedersen, “Non-interactive and information-theoretic secure verifiable secret sharing,” in Advances in Cryptology - CRYPTO ’91, 11th Annual International Cryptology Conference, Santa Barbara, California, USA, August 11-15, 1991, Proceedings, ser. Lecture Notes in Computer Science, J. Feigenbaum, Ed., vol. 576. Springer, 1991, pp. 129–140.
[60] M. Bellare and O. Goldreich, “On defining proofs of knowledge,” in CRYPTO, ser. Lecture Notes in Computer Science, vol. 740. Springer, 1992, pp. 390–420.
[61] I. Damgård, “On Σ-protocols,” 2002.
[62] P. Paillier, “Public-key cryptosystems based on composite degree residuosity classes,” in Advances in cryptology EUROCRYPT 99. Springer, 1999, pp. 223–238.
[63] D. Wikström, “Special Soundness Revisited,” IACR Cryptology ePrint Archive, vol. 2018, p. 1157, 2018.
[64] E. Cuvelier, O. Pereira, and T. Peters, “Election Verifiability or Ballot Privacy: Do We Need to Choose?” in Computer Security - ESORICS 2013 - 18th European Symposium on Research in Computer Security, Egham, UK, September 9-13, 2013. Proceedings, 2013, pp. 481–498. [Online]. Available: http://dx.doi.org/10.1007/978-3-642-40203-6_27
[65] P. FIPS, “186-4: Federal information processing standards publication. Digital Signature Standard (DSS),” Information Technology Laboratory, National Institute of Standards and Technology (NIST), Gaithersburg, MD, pp. 20 899–8900, 2013.
[66] L. Nguyen, R. Safavi-Naini, and K. Kurosawa, “Verifiable shuffles: A formal model and a Paillier-based efficient construction with provable security,” in ACNS, ser. Lecture Notes in Computer Science, vol. 3089. Springer, 2004, pp. 61–75.

### Acknowledgements

We wish to thank Gilles Barthe and the reviewers for their helpful comments, which significantly improved the quality of this manuscript. We are also grateful to Di Long Li for assisting us in installing Verificatum. Thomas Haines acknowledges the support of the Luxembourg National Research Fund (FNR) and the Research Council of Norway for the joint project SURCVS.

### Appendix A: Coq Source Code

Our code is available at: https://github.com/gerlion/secure-e-voting-with-coq.

### Appendix B: Additional Coq Code

For completeness, we provide some additional Coq code referred to in the body of the paper. For the complete code, please refer to the repository in Appendix A.

```coq
Module Type VectorSpaceModuleSameGroup
  (Group: GroupSig) (Ring: RingSig) (Field: FieldSig)
  (M: ModuleSig Group Ring)(VS: VectorSpaceSig Group Field).
  Export Group.
  Export M.
  Export VS.
  Parameter op3 : Ring.F -> Field.F -> Ring.F.
  Axiom RopInv: forall a, op3 a (Field.Finv Fone) = Ring.Finv a.
  Axiom RopFZero: forall x, op3 x Fzero = Ring.Fzero.
  Axiom RopRZero: forall x, op3 Ring.Fzero x = Ring.Fzero.
  Axiom RopDistRadd: forall x y z, op3 (Ring.Fadd x y) z = Ring.Fadd (op3 x z) (op3 y z).
  Axiom RopDistFadd: forall (r s : F) (x : Ring.F), op3 x (Fadd r s) = Ring.Fadd (op3 x r) (op3 x s).
  Axiom RopDistFmul: forall x y z, op3 (op3 x y) z = op3 x (Fmul y z).
  Axiom RaddInv: forall (a : Ring.F)(b : F), (Ring.Fadd (op3 a b) (op3 a (Finv b))) = Ring.Fzero.
End VectorSpaceModuleSameGroup.
```

---

This version is more structured, clear, and professional, making it easier to read and understand.