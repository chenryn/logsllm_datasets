### Web Browser and COM Functions

As previously mentioned, the monitoring of web browser activities is achieved by recording the invocation of COM functions provided by the IWebBrowser2 interface. To compile a list of suspicious COM functions, we analyzed this interface for functions that allow a browser extension to obtain information about the page or the location a user is visiting. The complete list is shown in Figure 3.

Of particular interest is the `get_Document()` method, which provides an `IHTMLDocument2` pointer to the Document Object Model (DOM) object of the web page being displayed. Using this pointer, a Browser Helper Object (BHO) or toolbar can modify the page or extract information from its source.

### Dynamic Analysis and False Positives

Using the list of suspicious COM functions, dynamic analysis classifies a sample as spyware if at least one invocation of a suspicious function is observed in response to events. Unfortunately, this approach also results in a higher number of false positives. This is because several legitimate browser extensions interact with the browser in response to events. For example, the Lost Goggles toolbar requests a pointer to the DOM object of a loaded page to integrate thumbnails into search results returned by Google.

In our characterization of spyware, we define a malicious component as one that both monitors user behavior and leaks this information to the environment. Therefore, we expect the lowest number of false positives when combining dynamic and static analysis techniques. This is confirmed by the detection results shown in Table 1 for Strategy 5. Compared to the results delivered by static analysis alone, the misclassification of benign samples like Spybot and T-Online is avoided. Although these browser extensions might invoke a `WriteFile` API call in response to an event, dynamic analysis confirms that they do not monitor user behavior by calling any of the suspicious COM functions. Microgarden is also correctly classified as benign, as it uses timers but does not access any relevant information in response to events. On the other hand, Airoboform and P3P Client are still classified as spyware because, in addition to suspicious API calls, they request the location of loaded pages via the `get_LocationURL()` function. These BHOs indeed monitor surfing behavior and store (possibly sensitive) user information in files.

### Performance Analysis

Table 2 shows the various execution times for each step in the analysis on a 1.7 GHz Pentium M processor with 1 GB of RAM. The execution time for dynamic analysis may be slower than expected due to the need to run the possibly malicious code in a virtual environment, which can significantly degrade machine performance. The execution time for static analysis is split into two parts: disassembly and Control Flow Graph (CFG) creation, and the analysis of a single event. We consider these performance measures acceptable for a prototype analysis tool, noting that running times could be significantly improved with optimization.

### API Call Blacklist Derivation

Until now, we have been using lists of suspicious Windows API calls and COM functions generated a priori. An alternative method, discussed in Section 4, is to generate these lists automatically. By applying our approach to both a set of known benign and malicious samples, we can cross-reference the resulting sets of calls made in response to browser events to identify calls frequently observed in spyware but never in benign BHOs or toolbars.

The major benefit of automatic list generation is that it eliminates the need to generate a list of suspicious calls a priori. Over time, as more samples are collected and analyzed, the list will become more refined, eliminating calls that appear only in malicious samples by chance and revealing new functions not previously considered. These results are useful even when using a pre-generated list, as they can update the "suspicious function" list with new calls as they begin to be utilized by spyware.

Figure 4 shows an excerpt of where the Windows API list we generated a priori and the list we generated automatically converged, as well as some additional malicious API calls discovered. These lists match up well with our initial intuition. New calls, such as `CreateToolHelp32Snapshot`, which takes a snapshot of the processes currently running on a system and should not be called in response to browser events, can be added to the list of possibly malicious calls. The results indicate that our static list does a good job of detecting spyware, while our generated list can further improve detection results as spyware authors adapt to evade detection.

However, automated list generation has its drawbacks. For example, we might remove calls that represent possible malicious intent. When applied to our evaluation set, the `WriteFile` function would be disregarded as a common call, reducing false positives but potentially increasing false negatives.

### Conclusions and Future Work

Spyware is becoming a substantial threat to networks, both in terms of resource consumption and user privacy violations. Current anti-spyware tools predominantly use signature-based techniques, which can be easily evaded through obfuscation.

In this paper, we present a novel characterization for a popular class of spyware, specifically those components based on Browser Helper Objects (BHOs) or toolbars developed for Microsoft’s Internet Explorer. This characterization is based on the observation that a spyware component first obtains sensitive information from the browser and then leaks the collected data to the outside environment. We developed a prototype detection tool based on our characterization that uses a combination of dynamic and static analysis to identify the browser COM functions and Windows API calls invoked in response to browsing events. Based on this information, we can identify an entire class of spyware, making our approach more powerful than standard signature-based techniques. Additionally, our technique provides forensic analysts with detailed information about the behavior of unknown browser helper objects and toolbars.

Our approach was evaluated on a large test set of spyware and benign browser extensions. The results demonstrate that the approach effectively identifies the behavior of spyware programs without any a priori knowledge of the programs' binary structure, significantly raising the bar for malware authors who want to evade detection.

Future work will focus on extending our approach to spyware programs that do not rely on the Browser Helper Object or toolbar interfaces to monitor user behavior. We also plan to enhance our characterization with more sophisticated data-flow analysis to characterize the type of information accessed and leaked by the spyware program. This would enable a tool to provide an assessment of the level of "maliciousness" of a spyware program.

### Acknowledgments

This research was supported by the Austrian Science Foundation (FWF), under grant No. P18157, the Secure Business Austria competence center, the U.S. Army Research Office, under agreement DAAD19-01-1-0484, and by the National Science Foundation, under grants CCR-0238492 and CCR-0524853.

### References

[1] A hidden menace. The Economist, June 2004.
[2] Ad-Aware. http://www.lavasoftusa.com/software/adaware/, 2005.
[3] Steven D. Gribble Alexander Moshchuk, Tanya Bragin, and Henry M. Levy. A Crawler-Based Study of Spyware on the Web. In Proceedings of the Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, February 2006.
[4] M. Christodorescu and S. Jha. Testing Malware Detectors. In Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2004), pages 34–44, Boston, MA, July 2004.
[5] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and R.E. Bryant. Semantics-Aware Malware Detection. In Proceedings of the 2005 IEEE Symposium on Security and Privacy (Oakland 2005), Oakland, CA, USA, May 2005.
[6] Data Rescure. IDA Pro: Disassembler and Debugger. http://www.datarescue.com/idabase/, 2005.
[7] Earthlink and Webroot Release Second SpyAudit Report. http://www.earthlink.net/about/press/pr_spyAuditReport/, June 2004.
[8] Aaron Hackworth. Spyware. US-CERT publication, 2005.
[9] Jan Hertsens and Wayne Porter. Anatomy of a Drive-By Install- Even on Firefox. http://www.spywareguide.com/articles/anatomy_of_a_drive_by_install__72.%html, 2006.
[10] Galen Hunt and Doug Brubacher. Detours: Binary Interception of Win32 Functions. In Proceedings of the 3rd USENIX Windows NT Symposium, pages 135–144, Seattle, WA, 1999.
[11] C. Kruegel, W. Robertson, and G. Vigna. Detecting Kernel-Level Rootkits Through Binary Analysis. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), pages 91–100, Tucson, AZ, December 2004.
[12] C. Kruegel, F. Valeur, W. Robertson, and G. Vigna. Static Analysis of Obfuscated Binaries. In Proceedings of the Usenix Security Symposium, 2004.
[13] C. Linn and S. Debray. Obfuscation of Executable Code to Improve Resistance to Static Disassembly. In ACM Conference on Computer and Communications Security (CCS), 2003.
[14] Microsoft. Windows AntiSpyware (Beta): Analysis approach and categories. http://www.microsoft.com/athome/security/spyware/software/isv/analysis.mspx, March 2005.
[15] Known Vulnerabilities in Mozilla Products. http://www.mozilla.org/projects/security/known-vulnerabilities.html, 2006.
[16] M. Oberhumer and L. Molnar. UPX: Ultimate Packer for eXecutables. http://upx.sourceforge.net/, 2004.
[17] V. Paxson. Bro: A System for Detecting Network Intruders in Real-Time. In Proceedings of the 7th USENIX Security Symposium, San Antonio, TX, January 1998.
[18] M. Pietrek. Peering Inside the PE: A Tour of the Win32 Portable Executable File Format. Microsoft Systems Journal, March 1994.
[19] M. Roesch. Snort - Lightweight Intrusion Detection for Networks. In Proceedings of the USENIX LISA '99 Conference, Seattle, WA, November 1999.
[20] S. Saroiu, S.D. Gribble, and H.M. Levy. Measurement and Analysis of Spyware in a University Environment. In Proceedings of the ACM/USENIX Symposium on Networked Systems Design and Implementation (NSDI), San Francisco, CA, March 2004.
[21] S. Schreiber. Undocumented Windows 2000 Secrets: A Programmer’s Cookbook. Addison-Wesley Professional, 2001.
[22] Spybot Search & Destroy. http://www.safer-networking.org/, 2005.
[23] R. Thompson. Why Spyware Poses Multiple Threats to Security. Communications of the ACM, 48(8), August 2005.
[24] Y. Wang, R. Roussev, C. Verbowski, A. Johnson, M. Wu, Y. Huang, and S. Kuo. Gatekeeper: Monitoring Auto-Start Extensibility Points (ASEPs) for Spyware Management. In Proceedings of the Large Installation System Administration Conference (LISA), Atlanta, GA, November 2004. USENIX.
[25] S. Williams and C. Kindel. The Component Object Model: A Technical Overview. Microsoft Technical Report, October 1994.
[26] Onload XPI installs should be blocked by default. https://bugzilla.mozilla.org/show_bug.cgi?id=238684, 2004.