### (b) Backbone

**Figure 11: Configuration Minimization.**

The backbone network, which primarily serves the coastal regions of the USA, employs multiple filters to ensure robust and secure routing. These filters include:
- Preventing bogons (private address space) from being advertised by external neighbors.
- Prohibiting customers from providing transit to other large networks.
- Restricting traversing providers through peers.

In the datacenter network, routers run BGP using private AS numbers and peer with each other and the backbone network via eBGP. When announcing prefixes to the backbone network, routers aggregate some prefix blocks, keep others internal, and attach communities to certain prefixes that should not traverse beyond a specific geographic region. The datacenter networks also have policies that prevent certain prefixes from being announced beyond a particular tier in the datacenter hierarchy.

### 7.2 Expressiveness

We successfully translated all network policies into Propane and verified with the operators that our translation preserved the intended semantics. For the backbone network, an additional policy not present in the original document was added based on operator feedback. Propane ensured policy compliance under all possible failure scenarios for both the datacenter and backbone networks.

Excluding lines for definitions like prefix and customer groups or prefix ownership constraints (due to confidentiality), the routing policies for Propane were 43 lines for the backbone network and 31 lines for the datacenter networks.

### 7.3 Compilation Time

We studied the compilation time for both policies as a function of network size. Despite the fixed topology and size of the networks, we explored the impact of size because the policies are network-wide and the compiler takes the topology as input.

For the datacenter network, we used fat tree topologies of varying sizes, assigned a /24 prefix to each ToR switch, and randomly mapped prefixes to different types of prefix groups with distinct routing policies. For the backbone network, since all routers connect via iBGP, we explored different full iBGP mesh sizes and randomly mapped neighboring networks to routers.

All experiments were conducted on an 8-core, 3.6 GHz Intel Xeon processor running Windows 7. Figure 10 shows the compilation times for datacenter and backbone networks of different sizes. We measured the mean compilation time per prefix predicate, as the compiler operates on each predicate in parallel. At their largest sizes, the per-predicate compilation time was approximately 10 seconds for the datacenter network and 45 seconds for the backbone network.

Compilation for the largest datacenter took less than 9 minutes in total. For the backbone network, the number of predicates remained relatively fixed as the topology size increased, and the total compilation time was less than 3 minutes. The inclusion of more preferences and neighboring ASes in the backbone policy increased the size of the resulting PGIR, leading to longer construction and minimization times.

Algorithm 1 for inferring Regret-Free preferences was efficient, taking only a small fraction of the total running time. PGIR minimization was the most expensive phase, but it could be limited to a fixed number of iterations for large networks. Both policies could be compiled successfully without minimization.

### 7.4 Configuration Size

Figure 11 shows the size of the compiled ABGP policies as a function of the topology size. The naive translation of PGIR to ABGP generates extremely large ABGP policies by default. To mitigate this, the compiler performs ABGP configuration minimization during and after the PGIR to ABGP translation phase. Minimization was highly effective, reducing the size of the policies to a small fraction of their non-minimized counterparts.

Even minimized configurations were hundreds or thousands of lines per router. For the backbone network, the size of Propane configurations was similar to actual BGP configurations, though qualitative differences exist. We did not have actual configurations for the datacenter network, as they are dynamically generated from templates.

### 7.5 Propane vs. Operator Configurations

Propane-generated configurations differ from those written by operators in several ways:

1. **Preferences among neighboring ASes**: Operators use community values to tag incoming routes according to preference, which is then used at other border routers to influence decisions. Propane achieves the same result using a different BGP mechanism.
2. **Route Propagation**: Operators use the no-export community to prevent routes from leaking beyond a certain tier of the datacenter, while Propane selectively imports the route only below the tier.
3. **Propagation of Specific Routes**: Operators prevent unneeded propagation of more-specific route announcements from a less-preferred neighboring AS based on out-of-band knowledge about the topology, whereas Propane propagates these advertisements.
4. **Community Values**: Operators use a layer of indirection for community values, using community groups and re-writing values, to implement policies in a more maintainable manner. Propane uses flat communities.
5. **BGP Regular Expression Filters**: Operators use BGP regular expression filters to enforce certain invariants independent of any particular prefix, while Propane enforces these invariants per prefix.

We are investigating whether these differences matter to operators and, if necessary, how to reduce them.

### 8. Related Work

Our work builds on four main areas of prior research:

#### SDN Languages
Propane was heavily influenced by SDN programming languages such as NetKAT, Merlin, FatTire, and path queries. These languages use regular expressions to describe paths through a network and predicates to classify packets. Propane is more expressive, allowing users to specify preferences among paths and generating distributed implementations that tolerate any number of faults. Unlike FatTire, which generates data plane rules upfront, Propane relies on distributed control plane mechanisms to react to faults, avoiding additional memory costs.

#### Configuration Automation
Many practitioners use configuration templates to ensure consistency across similar devices. Configuration languages like RPSL, YANG, and Netconf allow operators to express routing policies in a vendor-neutral way. However, these solutions remain low-level, requiring operators to specify exact local preferences. Propane, on the other hand, guarantees that high-level intent is satisfied.

#### Configuration Analysis
Researchers have tried to tackle the problem of configuring network devices by analyzing existing router configurations and reporting errors or inconsistencies. Our research complements these efforts by using higher-level languages and a "correct-by-construction" methodology to eliminate bugs.

#### Configuration Synthesis
ConfiAssure is another system designed to help users define and debug low-level router configurations. It handles a wide range of protocols and concerns. In contrast, Propane offers compact, higher-level abstractions customized for our domain, such as regular paths, and domain-specific analyses, such as failure safety analysis.

### 9. Conclusions

We introduced Propane, a language and compiler for implementing network-wide policies using a distributed set of devices running BGP. Propane allows operators to describe their policy through high-level constraints on the shape and relative preferences of paths for different types of traffic. The resulting BGP configurations are guaranteed to implement the centralized policy in a distributed fashion, regardless of network failures. Applying Propane to real-world networks demonstrated its expressiveness and scalability.

### Acknowledgments

We thank R. Aditya, George Chen, and Lihua Yuan for feedback on the work and the SIGCOMM reviewers for comments on the paper. This work is supported in part by the National Science Foundation awards CNS-1161595 and CNS-1111520, as well as a gift from Cisco.

### 10. References

[1] M. Al-Fares, A. Loukissas, and A. Vahdat. A scalable, commodity data center network architecture. In SIGCOMM, August 2008.

[2] C. Alaettinoglu, C. Villamizar, E. Gerich, D. Kessens, D. Meyer, T. Bates, D. Karrenberg, and M. Terpstra. Routing policy specification language (RPSL). RFC 2622, RFC Editor, June 1999. http://www.rfc-editor.org/rfc/rfc2622.txt.

[3] C. J. Anderson, N. Foster, A. Guha, J.-B. Jeannin, D. Kozen, C. Schlesinger, and D. Walker. NetKAT: Semantic foundations for networks. In POPL, January 2014.

[4] M. Anderson. Time warner cable says outages largely resolved. http://www.seattletimes.com/business/time-warner-cable-says-outages-largely-resolved, August 2014.

[5] P. Berde, M. Gerola, J. Hart, Y. Higuchi, M. Kobayashi, T. Koide, B. Lantz, B. O’Connor, P. Radoslavov, W. Snow, and G. Parulkar. ONOS: Towards an open, distributed SDN OS. In HotSDN, August 2014.

[6] News and press | BGPMon. http://www.bgpmon.net/news-and-events/.

[7] M. Bjorklund. YANG - a data modeling language for the network configuration protocol (NETCONF). RFC 6020, RFC Editor, October 2010. http://www.rfc-editor.org/rfc/rfc6020.txt.

[8] M. Casado, M. J. Freedman, J. Pettit, J. Luo, N. McKeown, and S. Shenker. Ethane: Taking control of the enterprise. In SIGCOMM, August 2007.

[9] R. Enns, M. Bjorklund, J. Schoenwaelder, and A. Bierman. Network configuration protocol (NETCONF). RFC 6241, RFC Editor, June 2011. http://www.rfc-editor.org/rfc/rfc6241.txt.

[10] N. Feamster and H. Balakrishnan. Detecting BGP configuration faults with static analysis. In NSDI, May 2005.

[11] N. Feamster, J. Winick, and J. Rexford. A model of BGP routing for network engineering. In SIGMETRICS, June 2004.

[12] A. Fogel, S. Fung, L. Pedrosa, M. Walraed-Sullivan, R. Govindan, R. Mahajan, and T. Millstein. A general approach to network configuration analysis. In NSDI, March 2015.

[13] N. Foster, M. J. Freedman, A. Guha, R. Harrison, N. P. Katta, C. Monsanto, J. Reich, M. Reitblatt, J. Rexford, C. Schlesinger, A. Story, and D. Walker. Languages for software-defined networks. IEEE Communications Magazine, 51(2):128–134, February 2013.

[14] W. Gelade and F. Neven. Succinctness of the complement and intersection of regular expressions. ACM Trans. Comput. Logic, 13(1):4:1–4:19, January 2012.

[15] A. Gember-Jacobson, R. Viswanathan, A. Akella, and R. Mahajan. Fast control plane analysis using an abstract representation. In SIGCOMM, August 2016.

[16] P. Gill, N. Jain, and N. Nagappan. Understanding network failures in data centers: Measurement, analysis, and implications. In SIGCOMM, August 2011.

[17] T. G. Griffin and G. Wilfong. On the correctness of IBGP configuration. In SIGCOMM, August 2002.

[18] Hatch – create and share configurations. http://www.hatchconfigs.com/.

[19] P. Lapukhov, A. Premji, and J. Mitchell. Use of BGP for routing in large-scale data centers. Internet draft, August 2015.

[20] F. Le, G. G. Xie, and H. Zhang. On route aggregation. In CoNEXT, December 2011.

[21] T. Lengauer and R. Tarjan. A fast algorithm for finding dominators in a flowgraph. In TOPLAS, July 1979.

[22] R. Mahajan, D. Wetherall, and T. Anderson. Understanding BGP misconﬁguration. In SIGCOMM, August 2002.

[23] J. McCauley, A. Panda, M. Casado, T. Koponen, and S. Shenker. Extending SDN to large-scale networks. In Open Networking Summit, April 2013.

[24] S. Narain. Network configuration management via model finding. In LISA, December 2005.

[25] S. Narain, G. Levin, S. Malik, and V. Kaul. Declarative infrastructure configuration synthesis and debugging. Journal of Network Systems Management, 16(3):235–258, October 2008.

[26] S. Narain, R. Talpade, and G. Levin. Guide to Reliable Internet Services and Applications, chapter Network Configuration Validation. Springer, 2010.

[27] S. Narayana, M. Tahmasbi, J. Rexford, and D. Walker. Compiling path queries. In NSDI, March 2016.

[28] S. Owens, J. Reppy, and A. Turon. Regular-expression derivatives re-examined. In J. Funct. Program., March 2009.

[29] M. Reitblatt, M. Canini, N. Foster, and A. Guha. FatTire: Declarative fault tolerance for software defined networks. In HotSDN, August 2013.

[30] R. Soulé, S. Basu, P. J. Marandi, F. Pedone, R. Kleinberg, E. G. Sirer, and N. Foster. Merlin: A language for provisioning network resources. In CoNEXT, December 2014.

[31] Configuration templates | thwack. https://thwack.solarwinds.com/search.jspa?q=configuration+templates.

[32] K. Weitz, D. Woos, E. Torlak, M. D. Ernst, A. Krishnamurthy, and Z. Tatlock. Formal semantics and automated verification for the border gateway protocol. In NetPL, March 2016.