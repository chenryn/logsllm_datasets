### Scalability and Efficiency of Fluorescence

Fluorescence is designed to be highly scalable, as it examines and summarizes Virtual Machines (VMs) in parallel across multiple VM hosts. The central server processes only the fingerprints, rather than full memory snapshots, which significantly reduces the data load. Additionally, the feature-alignment and analysis algorithms are specifically optimized for speed. Our results show that Fluorescence can analyze a herd of 200 VMs in approximately 60-80 minutes. For even faster analysis, large herds can be divided into smaller subherds.

### Acknowledgments

We would like to express our gratitude to VirusTotal and VirusShare for providing us with malware samples. We also thank T. Roy from CodeMachine Inc. for sharing his expertise on Windows rootkits and Mingbo Zhang at Rutgers University for assisting us with debugging our Windows kernel-memory-pinning driver. We are grateful to the anonymous RAID reviewers and our shepherd, Andrea Lanzi, for their valuable comments and assistance in improving this paper. This work was supported by the National Science Foundation under Grant Numbers 1314945 and 1642158.

### References

1. Ighor Augusto. Reptile Rootkit. Commit b0a2d0f, April 2018. URL: <https://github.com/f0rb1dd3n/Reptile>.
2. Rishi Bhargava and David P. Reese, Jr. System and method for passive threat detection using virtual memory inspection. U.S. Patent 9,594,881 B2, March 14, 2017.
3. Antonio Bianchi, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna. Blacksheep: Detecting compromised hosts in homogeneous crowds. In Proc. CCS, pages 341–352, October 2012. doi: 10.1145/2382196.2382234.
4. Bill Blunden. The Rootkit Arsenal: Escape and Evasion in the Dark Corners of the System. Jones & Bartlett Learning, 2009. ISBN 978-1598220612.
5. Michael Boelen, John Horne, et al. The Rootkit Hunter project. Release 1.4.6, February 2018. URL: <http://rkhunter.sourceforge.net/>.
6. Ed Bukoski, Brian Moyles, and Mike McGarr. How we build code at Netflix. Netflix Technology Blog, March 9, 2016. URL: <https://medium.com/netflix-techblog/how-we-build-code-at-netflix-c5d9bd727f15>.
7. Yuriy Bulygin, Mikhail Gorobets, Andrew Furtak, and Alex Bazhaniuk. Fractured Backbone: Breaking modern OS defenses with firmware attacks. Presentation at Black Hat USA, July 2017. URL: <https://youtu.be/ryKy9LvmSIs>.
8. Chen Chen, Darius Suciu, and Radu Sion. POSTER: KXRay: Introspecting the kernel for rootkit timing footprints. In Proc. CCS, pages 1781–1783, October 2016. doi: 10.1145/2976749.2989053.
9. Amit Dang, Preet Mohinder, and Vivek Srivastava. System and method for kernel rootkit protection in a hypervisor environment. U.S. Patent 9,069,586 B2, June 30, 2015.
10. Michael D. Ernst, Jeff H. Perkins, Philip J. Guo, Stephen McCamant, Carlos Pacheco, Matthew S. Tschantz, and Chen Xiao. The Daikon system for dynamic detection of likely invariants. Science of Computer Programming, 69(1–3):35–45, December 2007. doi: 10.1016/j.scico.2007.01.015.
11. Martin Ester, Hans-Peter Kriegel, Jörg Sander, and Xiaowei Xu. A density-based algorithm for discovering clusters in large spatial databases with noise. In Proc. KDD, pages 226–231, August 1996. URL: <http://www.aaai.org/Library/KDD/1996/kdd96-037.php>.
12. Nicolas Falliere, Liam O. Murchu, and Eric Chien. W32.Stuxnet dossier. White paper, version 1.4, Symantec Corporation, February 2011. URL: <https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/w32_stuxnet_dossier.pdf>.
13. Scott Field. An introduction to kernel patch protection. MSDN Blog, August 12, 2006. URL: <https://blogs.msdn.microsoft.com/windowsvistasecurity/2006/08/12/an-introduction-to-kernel-patch-protection/>.
14. Francesco Gadaleta, Nick Nikiforakis, Jan Tobias Mühlberg, and Wouter Joosen. HyperForce: Hypervisor-enforced execution of security-critical code. In Dimitris Gritzalis, Steven Furnell, and Marianthi Theoharidou, editors, Information Security and Privacy Research: SEC 2012, volume 376 of IFIP Advances in Information and Communication Technology, pages 126–137. Springer, June 2012. doi: 10.1007/978-3-642-30436-1_11.
15. GMER. GMER - rootkit detector and remover, 2016. URL: <http://www.gmer.net/>.
16. Kent Griffin, Scott Schneider, Xin Hu, and Tzi-Cker Chiueh. Automatic generation of string signatures for malware detection. In Engin Kirda, Somesh Jha, and Davide Balzarotti, editors, Recent Advances in Intrusion Detection: RAID 2009, volume 5758 of Lecture Notes in Computer Science, pages 101–120. Springer, September 2009. doi: 10.1007/978-3-642-04342-0_6.
17. Ted Hudek and Cymoki. Driver signing. Microsoft Windows documentation, April 2017. URL: <https://docs.microsoft.com/en-us/windows-hardware/drivers/install/driver-signing>.
18. The Kernel Development Community. BPF type format (BTF), 2019. URL: <https://www.kernel.org/doc/html/latest/bpf/btf.html>.
19. Clemens Kolbitsch, Paolo Milani Comparetti, Christopher Kruegel, Engin Kirda, Xiaoyong Zhou, and Xiaofeng Wang. Effective and efficient malware detection at the end host. In Proc. USENIX Security, pages 351–366, August 2009. URL: <https://www.usenix.org/legacy/events/sec09/tech/full_papers/kolbitsch.pdf>.
20. Jesse Kornblum. Identifying almost identical files using context triggered piecewise hashing. Digital Investigation, 3(Supplement):91–97, September 2006. doi: 10.1016/j.diin.2006.06.015.
21. Jesse D. Kornblum. Exploiting the rootkit paradox with Windows memory analysis. International Journal of Digital Evidence, 5(1):1–5, Fall 2006. URL: <http://www.utica.edu/academic/institutes/ecii/publications/articles/EFE2FC4D-0B11-BC08-AD2958256F5E68F1.pdf>.
22. Andrea Lanzi, Monirul Sharif, and Wenke Lee. K-Tracer: A system for extracting kernel malware behavior. In Proc. NDSS, February 2009. URL: <https://www.ndss-symposium.org/ndss2009/k-tracer-system-extracting-kernel-malware-behavior/>.
23. Tamas K. Lengyel, Steve Maresca, Bryan D. Payne, George D. Webster, Sebastian Vogl, and Aggelos Kiayias. Scalability, fidelity, and stealth in the DRAKVUF dynamic malware analysis system. In Proc. ACSAC, pages 386–395, December 2014. doi: 10.1145/2664243.2664252.
24. Zhichun Li, Manan Sanghi, Yan Chen, Ming-Yang Kao, and Brian Chavez. Hamsa: Fast signature generation for zero-day polymorphic worms with provable attack resilience. In Proc. IEEE S&P, pages 32–46, 2006. doi: 10.1109/SP.2006.18.
25. Zhiqiang Lin, Junghwan Rhee, Xiangyu Zhang, Dongyan Xu, and Xuxian Jiang. SigGraph: Brute force scanning of kernel data structure instances using graph-based signatures. In Proc. NDSS, February 2011. URL: <https://www.ndss-symposium.org/ndss2011/siggraph-brute-force-scanning-of-kernel-data-structure-instances-using-graph-based-signatures/>.
26. Victor Ramos Mello. Diamorphine rootkit. Commit ba97922, March 2018. URL: <https://github.com/m0nad/Diamorphine>.
27. Forest Monsen and Kevin Glisson. Netflix Cloud Security SIRT releases Diffy: A differencing engine for digital forensics in the cloud. Netflix Technology Blog, July 17, 2018. URL: <https://medium.com/netflix-techblog/netflix-sirt-releases-diffy-a-differencing-engine-for-digital-forensics-in-the-cloud-37b71abd2698>.
28. Nelson Murilo and Klaus Steding-Jessen. Chkrootkit. Version 0.52, March 2017. URL: <http://www.chkrootkit.org/>.
29. nurupo. Nurupo rootkit. Commit 78faabd, December 2017. URL: <https://github.com/nurupo/rootkit>.
30. Rajendra Patil and Chirag Modi. An exhaustive survey on security concerns and solutions at different components of virtualization. ACM Comput. Surv., 52(1):12:1–12:38, February 2019. doi: 10.1145/3287306.
31. Bryan D. Payne, Tamas K. Lengyel, Steven Maresca, Antony Saba, et al. LibVMI: Simplified virtual machine introspection. Version 0.12.0, April 2018. URL: <https://github.com/libvmi/libvmi>.
32. Nick L. Petroni, Jr., Timothy Fraser, AAron Walters, and William A. Arbaugh. An architecture for specification-based detection of semantic integrity violations in kernel dynamic data. In Proc. USENIX Security, pages 289–304, July/August 2006. URL: <https://www.usenix.org/legacy/events/sec06/tech/petroni.html>.
33. Nguyen Anh Quynh. Capstone disassembly framework. Version 3.0.5-rc2, March 2017. URL: <https://github.com/aquynh/capstone>.
34. Jayakrishnan Ramalingam. Rootkit monitoring agent built into an operating system kernel. U.S. Patent 8,539,584, September 17, 2013.
35. Junghwan Rhee, Ryan Riley, Zhiqiang Lin, Xuxian Jiang, and Dongyan Xu. Data-centric OS kernel malware characterization. IEEE Trans. on Information Forensics and Security, 9(1):72–87, January 2014. doi: 10.1109/TIFS.2013.2291964.
36. Ryan Riley, Xuxian Jiang, and Dongyan Xu. Multi-aspect profiling of kernel rootkit behavior. In Proc. EuroSys, pages 47–60, April 2009. doi: 10.1145/1519065.1519072.
37. T. Roy. Personal communication, October 2016.
38. Mark Russinovich. RootkitRevealer v1.71. Microsoft Windows documentation, November 2006. URL: <https://docs.microsoft.com/en-us/sysinternals/downloads/rootkit-revealer>.
39. Dan Sullivan. Beyond the hype: Advanced persistent threats. White paper, 2011. URL: <https://www.realtimepublishers.com/book.php?id=197>.
40. Symantec Corporation. Advanced persistent threats: A Symantec perspective. White paper, 2011. URL: <https://www.symantec.com/content/en/us/enterprise/white_papers/b-advanced_persistent_threats_WP_21215957.en-us.pdf>.
41. Gianfranco Tonello. Bootkits are not dead. Pitou is back! January 2018. URL: <https://www.tgsoft.it/english/news_archivio_eng.asp?id=884>.
42. Trend Micro Inc. OSSEC, open source host-based intrusion detection system, 2019. URL: <https://github.com/ossec/ossec-hids>.
43. Brian White, Jay Lepreau, Leigh Stoller, Robert Ricci, Shashi Guruprasad, Mac Newbold, Mike Hibler, Chad Barb, and Abhijeet Joglekar. An integrated experimental environment for distributed systems and networks. In Proc. OSDI, pages 255–270, December 2002. URL: <https://www.usenix.org/legacy/event/osdi02/tech/white.html>.
44. Heng Yin, Zhenkai Liang, and Dawn Song. HookFinder: Identifying and understanding malware hooking behaviors. In Proc. NDSS, February 2008. URL: <https://www.ndss-symposium.org/ndss2008/hookfinder-identifying-and-understanding-malware-hooking-behaviors/>.
45. Matthew D. Zeiler. ADADELTA: An adaptive learning rate method. arXiv preprint arXiv:1212.5701, December 2012. URL: <https://arxiv.org/abs/1212.5701>.

---

This revised version aims to improve clarity, coherence, and professionalism. If you have any specific sections or details you would like further refined, please let me know.