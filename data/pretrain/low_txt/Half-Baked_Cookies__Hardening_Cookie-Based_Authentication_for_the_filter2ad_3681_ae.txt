### 7.2 Dealing with More Complex Websites

Every website is unique, and as a result, Newton may not perform flawlessly on every site. In this section, we discuss specific instances where Newton encountered issues.

#### 7.2.1 Authentication Based on Username Visibility

Newton determines whether a combination of authentication cookies (auth-cookies) results in a successful login by checking if the username is visible on the site. However, in some cases, the absence of certain auth-cookies can cause the web service to take more time to load or prompt the user for additional input. For example, PayPal attempts to reset missing auth-cookies, and Netflix asks for additional verification. In such scenarios, Newton may incorrectly conclude that the client failed to authenticate, leading to false positives (i.e., incorrectly identifying a set of cookies as auth-cookies).

As discussed in Section 4.2, Newton considers the entire search space of cookie combinations, ensuring no false negatives. However, the lack of usernames on some pages during a test sequence can result in false positives. For instance, Stack Overflow does not display the username even when the user is logged in. Some of these issues can be mitigated with heuristics, such as waiting longer for the page to load or looking for other page features. In some cases, manual auditing may be necessary.

#### 7.2.2 Large Number of Auth-Cookies

Some websites, like Bank of America, have a large number of auth-cookies. Newton identified 28 auth-cookies on Bank of America but was unable to identify the complete set within a reasonable time. Despite this, Newton determined that the `SMSESSION` cookie is necessary for authentication. This cookie has both the `Secure` and `HttpOnly` attributes, indicating that Bank of America's auth-cookies are secure.

#### 7.2.3 Complicated Authentication Mechanisms

Some websites have more complex authentication mechanisms that can challenge Newton’s heuristics. For example, Newton assumes that all authentication tokens are client-side auth-cookies. However, in rare cases (e.g., Grubhub), some sites maintain the user’s login status on the server. When the user logs out, the login state is maintained on the server side, even though all cookies are still present. In such cases, Newton might mistakenly conclude that the user remains logged in. Additionally, some sites may have multiple auth-cookie combinations, each determining different levels of site access. These are currently edge cases, but if such approaches become more common, future research may need to expand on Newton’s techniques.

### 8 Related Work

At the time, only single authentication cookies were used, and many of the recommendations from earlier work are now commonplace. However, the rise of complex web applications and authentication mechanisms necessitates a re-evaluation of client authentication. The Open Web Application Security Project (OWASP) has established security guidelines recognizing the importance of this problem and acknowledging that simply setting `Secure` and `HttpOnly` flags on cookies is not sufficient for securing auth-cookies in many web applications [25]. Other projects have explored the security and privacy risks of exposed auth-cookies [7, 26, 30].

Existing browser-based security extensions attempt to protect a user’s auth-cookies by setting the `HttpOnly` and `Secure` flags and preventing these cookies from being accidentally passed to other domains [6, 8, 10, 22, 28]. All of these extensions rely on accurate mechanisms for computing the auth-cookies for a site; Newton can provide this capability. Various other systems (e.g., SessionShield [22], ZAN [28]) have attempted to identify the cookies that serve as session identifiers, but, unlike Newton, none of these systems can identify auth-cookies. HTTPSEverywhere is a Chrome extension that forces traffic over HTTPS whenever possible [11], which may not always protect auth-cookies and may also hamper performance.

Concurrent work by Calzavara et al. has developed a supervised learning algorithm to identify auth-cookies for different sites [8]. Their approach uses a method similar to that described in Section 4.2 to compute auth-cookies for user accounts in a controlled lab setting. Using these sets of auth-cookies, the algorithm attempts to learn various features of auth-cookies to enable automatic detection on other sites. This work differs from ours in several important ways:

1. **Scalability**: The approach does not scale to general users and websites because training the algorithm requires usernames and passwords, and it can only estimate the auth-cookies of unknown websites. Unlike Newton, it cannot predict the exact auth-cookie combination for a previously unknown site when running on a user’s machine.
2. **Performance and Accuracy**: Newton detects different auth-cookie combinations for different services in the same domain and computes auth-cookies "in the field" on arbitrary websites, rather than in the lab on a limited set of sites. Newton’s performance optimizations allow it to run in the user’s browser as a Chrome extension, enabling it to gather more data from more users. This makes Newton more scalable, accurate, and robust to changes in auth-cookie features over time.

Web applications can be sandboxed to prevent third-party JavaScript libraries from leaking users’ information [16, 29]; these systems solve a more general problem and require changes to underlying JavaScript engines. Other approaches to add cryptographic properties to cookies [9, 13, 20] complement our recommendations.

Nearly 13 years ago, Fu et al. examined the use of cookies for client authentication on the web and uncovered various vulnerabilities [13]. Since then, the web has become increasingly complex.

### 9 Conclusion

The increasing complexity of cookie-based authentication mechanisms on modern websites exposes clients to new vulnerabilities. Websites have become so intricate that it may be difficult for users, website administrators, or web application programmers to determine which cookies are responsible for authenticating a client to different parts of a website, let alone whether a website’s auth-cookie mechanisms are vulnerable to attack. Website designers and web application programmers need better tools to evaluate site security and recommendations for best practices for securing these cookies.

To address these needs, we have developed a general algorithm to discover all auth-cookie combinations that will permit a user to access a site for any service on a particular website, including sub-services offered from the same website or domain (e.g., Amazon Web Services vs. Amazon Shopping, Google Mail vs. YouTube). We have implemented this algorithm as a Chrome browser extension, Newton, which can discover auth-cookie combinations for a website without any prior knowledge about the website or the user. Our analysis of 45 popular websites revealed security vulnerabilities in auth-cookie combinations on 29 sites that could be exploited by relatively weak attackers. We used the case studies of vulnerabilities to offer specific recommendations that could significantly improve website security with relatively little additional effort.

We are planning a public release of Newton. Crowdsourcing data about auth-cookie mechanisms can ultimately help both users and web developers quickly identify and eradicate vulnerabilities in auth-cookies. We believe that Newton will be particularly useful to users who access the network via untrusted access points (e.g., in hotels, coffee shops, and other public places). In these scenarios, Newton might ultimately take a more proactive role in protecting auth-cookies by ensuring that sensitive auth-cookies are not unnecessarily passed in the clear and possibly even proactively setting secure flags on sensitive cookies in the auth-cookie combinations. Newton could also be useful for helping users recover from attacks such as the recent Heartbleed attack [14], which allowed an attacker to steal auth-cookies even if the client sent them via HTTPS. As web authentication continues to become more complex, tools like Newton will increasingly valuable to users, web programmers, and website administrators.

### References

[1] Advisory: Weak RNG in PHP session ID generation leads to session hijacking. http://seclists.org/fulldisclosure/2010/Mar/519. (Cited on page 12.)

[2] Unsafe cookies leave WordPress accounts open to hijacking, 2-factor bypass. Ars Technica. http://goo.gl/B1qLF7, May 2014. (Cited on page 1.)

[3] D. Atkins and R. Austein. Threat Analysis of the Domain Name System (DNS). Internet Engineering Task Force, Aug. 2004. RFC 3833. (Cited on page 4.)

[4] A. Barth. HTTP State Management Mechanism. Internet Engineering Task Force, Apr. 2011. RFC 6265. (Cited on page 5.)

[5] A. Barth. The Web Origin Concept. Internet Engineering Task Force, Dec. 2011. RFC 6454. (Cited on page 3.)

[6] M. Bugliesi, S. Calzavara, R. Focardi, and W. Khan. Automatic and robust client-side protection for cookie-based sessions. In International Symposium on Engineering Secure Software and Systems. ESSoS’14, 2014. (Cited on page 14.)

[7] E. Butler. A Firefox extension that demonstrates HTTP session hijacking attacks. http://codebutler.github.io/firesheep/, 2010. (Cited on page 14.)

[8] S. Calzavara, G. Tolomei, M. Bugliesi, and S. Orlando. Quite a mess in my cookie jar!: Leveraging machine learning to protect web authentication. In Proceedings of the 23rd International Conference on World Wide Web, WWW ’14, pages 189–200, Republic and Canton of Geneva, Switzerland, 2014. International World Wide Web Conferences Steering Committee. (Cited on page 14.)

[9] I. Dacosta, S. Chakradeo, M. Ahamad, and P. Traynor. One-time cookies: Preventing session hijacking attacks with stateless authentication tokens. volume 12, pages 1:1–1:24, New York, NY, USA, July 2012. ACM. (Cited on page 14.)

[10] P. De Ryck, N. Nikiforakis, L. Desmet, F. Piessens, and W. Joosen. Serene: Self-reliant client-side protection against session fixation. In Proceedings of the 12th IFIP WG 6.1 International Conference on Distributed Applications and Interoperable Systems, DAIS’12, pages 59–72, Berlin, Heidelberg, 2012. Springer-Verlag. (Cited on page 14.)

[11] HTTPS Everywhere. https://www.eff.org/https-everywhere. Electronic Frontier Foundation. (Cited on page 14.)

[12] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee. Hyptertext Transfer Protocol – HTTP/1.1. Internet Engineering Task Force, June 1999. RFC 2616. (Cited on page 13.)

[13] K. Fu, E. Sit, K. Smith, and N. Feamster. Dos and don’ts of client authentication on the Web. In Proc. 10th USENIX Security Symposium, Washington, DC, Aug. 2001. (Cited on pages 1, 10, and 14.)

[14] Hijacking user sessions with the Heartbleed vulnerability. https://www.mattslifebytes.com/?p=533. (Cited on page 14.)

[15] J. Hodges, C. Jackson, and A. Barth. HTTP Strict Transport Security (HSTS). Internet Engineering Task Force, Nov. 2012. RFC 6797. (Cited on page 5.)

[16] L. Ingram and M. Walﬁsh. Treehouse: JavaScript sandboxes to help web developers help themselves. In USENIX Annual Technical Conference. USENIX ATC 2012, 2012. (Cited on page 14.)

[17] Internet Explorer Web Platform and Status. http://status.modern.ie/httpstricttransportsecurityhsts. (Cited on page 5.)

[18] ISP Advertisement Injection. http://zmhenkel.blogspot.com/2013/03/isp-advertisement-injection-cma.html. (Cited on page 4.)

[19] C. Jackson and A. Barth. Forcehttps: Protecting high-security web sites from network attacks. In Proceedings of the 17th International Conference on World Wide Web, WWW ’08, pages 525–534, New York, NY, USA, 2008. ACM. (Cited on page 4.)

[20] A. Liu, J. Kovacs, C.-T. Huang, and M. Gouda. A secure cookie protocol. In Proceedings of the 14th IEEE International Conference on Computer Communications and Networks. ICCCN-05, 2005. (Cited on page 14.)

[21] N. Nikiforakis, L. Invernizzi, A. Kapravelos, S. Van Acker, W. Joosen, C. Kruegel, F. Piessens, and G. Vigna. You are what you include: Large-scale evaluation of remote JavaScript inclusions. In Proceedings of the 2012 ACM Conference on Computer and Communications Security, CCS ’12, pages 736–747, New York, NY, USA, 2012. ACM. (Cited on page 4.)

[22] N. Nikiforakis, W. Meert, Y. Younan, M. Johns, and W. Joosen. Sessionshield: Lightweight protection against session hijacking. In Proceedings of the Third International Conference on Engineering Secure Software and Systems, ESSoS’11, pages 87–100, Berlin, Heidelberg, 2011. Springer-Verlag. (Cited on page 14.)

[23] OWASP. OWASP Top 10 Application Security Risks - 2010. https://www.owasp.org/index.php/Top_10_2010-Main, 2010. (Cited on page 4.)

[24] OWASP: Double Submit Cookies. http://goo.gl/qmW7o5. (Cited on page 4.)

[25] Testing for cookies attributes. https://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002). (Cited on page 14.)

[26] F. Roesner, T. Kohno, and D. Wetherall. Detecting and defending against third-party tracking on the web. In 9th USENIX Symposium on Networked Systems Design and Implementation. NSDI 2012, 2012. (Cited on page 14.)

[27] SSL Pulse: Survey of the Most Popular Web Sites. the SSL Implementation of the trustworthiestinternet.org/ssl-pulse/. (Cited on page 5.)

[28] S. Tang, N. Dautenhahn, and S. T. King. Fortifying web-based applications automatically. In Proceedings of the 18th ACM Conference on Computer and Communications Security, CCS ’11, pages 615–626, New York, NY, USA, 2011. ACM. (Cited on page 14.)

[29] J. Terrace, S. R. Beard, and N. P. K. Katta. JavaScript in JavaScript (js.js): Sandboxing third-party scripts. In Proceedings of USENIX Conference on Web Application Development. WebApps ’12, 2012. (Cited on page 14.)

[30] R. J. Walls, S. S. Clark, and B. N. Levine. Functional privacy or why cookies are better with milk. In Proceedings of the 7th USENIX Workshop on Hot Topics in Security, HotSec ’12, Bellevue, WA, Aug. 2012. (Cited on page 14.)