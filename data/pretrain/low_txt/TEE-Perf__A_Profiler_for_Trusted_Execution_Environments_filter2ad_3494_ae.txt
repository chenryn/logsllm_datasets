### Figure 6: Flame Graphs for Intel SPDK Running Inside Intel SGX Enclave

**Figure 6** shows Flame Graphs for Intel SPDK running inside an Intel SGX enclave, plotted using TEE-PERF. The top graph represents the unoptimized version of SPDK, while the bottom graph shows the optimized version.

### Memory Access Optimization
To minimize remote memory accesses, techniques such as thread or page pinning can be employed. However, both MemProf and Memphis rely on hardware-specific counters, such as instruction-based sampling (IBS), and are tightly integrated with Linux perf to identify memory accesses. In contrast, TEE-PERF does not require any architecture- or platform-specific counters and is specifically designed for trusted execution environments (TEEs).

### Causal Profiling
Coz [14] introduced causal profiling to locate optimization opportunities in concurrent applications. The key idea in Coz is to slow down the execution to simulate the effect of virtually speeding up a code section, thereby identifying causal relationships between concurrently executing code segments. Like Coz, TEE-PERF targets unmodified multi-threaded applications. However, TEE-PERF is designed for profiling applications running inside TEEs, and it does not rely on Linux perf for collecting program counter and user-space call stack information. This makes our approach completely platform-independent.

### Data Provenance
Inspector [29] proposed a data provenance library for unmodified multithreaded applications to provide detailed information about thread schedules and memory accesses. Inspector relies on Linux perf and Intel Processor Trace (Intel PT) to provide these performance statistics. In contrast, TEE-PERF does not require Intel PT for tracing execution.

### Profilers for Distributed Systems
Profilers for distributed systems, such as Conductor [35], Fay [15], and Sieve [30], aim to provide detailed overviews of performance bottlenecks in applications. These profilers target distributed systems and are orthogonal to our work, which focuses on single-node systems, particularly those running inside TEEs.

### Conclusion
In this paper, we presented TEE-PERF, an architecture- and platform-independent profiler for TEEs. TEE-PERF supports unmodified multithreaded applications without relying on TEE-specific hardware counters or platform-specific kernel features. It also supports accurate method-level profiling without employing instruction pointer sampling. We have implemented TEE-PERF with an easy-to-use interface and integrated it with Flame Graphs to visualize performance bottlenecks. Our experimental evaluation, based on a multithreaded benchmark suite and real-world applications, shows that TEE-PERF incurs low profiling overheads while providing accurate profile measurements compared to perf.

### Software Availability
TEE-PERF, along with the entire experimental setup, is available at: https://github.com/mbailleu/tee-perf

### Acknowledgements
We thank anonymous reviewers and our shepherd Sara Bouchenak for their helpful comments. This work was supported by the European Union's Horizon 2020 research and innovation program under grant agreement 645011 (SERECA), Huawei Research, and the UK Research Institute in Secure Hardware and Embedded Systems (RISE).

### References
1. **Flame Graphs**: http://www.brendangregg.com/flamegraphs
2. **GDB: The GNU Project Debugger**: https://www.gnu.org/software/gdb/
3. **GNU gprof**: https://sourceware.org/binutils/docs/gprof/
4. **Intel DPDK**: http://dpdk.org/
5. **Intel VTune Amplifier**: https://software.intel.com/en-us/vtune
6. **perf: Linux profiling with performance counters**: https://perf.wiki.kernel.org/index.php/Main_Page
7. **RocksDB Benchmarking Tool**: https://github.com/facebook/rocksdb/wiki/Benchmarking-tools
8. **AMD Secure Encrypted Virtualization (SEV)**: https://developer.amd.com/sev/
9. **ARM TrustZone Technology**: http://infocenter.arm.com/help/topic/com.arm.doc.prd29-genc-009492c/PRD29-GENC-009492C_trustzone_security_whitepaper.pdf
10. **SCONE: Secure Linux Containers with Intel SGX**: S. Arnautov et al., Proceedings of the 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2016.
11. **SPEICHER: Securing LSM-based Key-Value Stores Using Shielded Execution**: M. Bailleu et al., 17th USENIX Conference on File and Storage Technologies (FAST), 2019.
12. **Shielding Applications from an Untrusted Cloud with Haven**: A. Baumann et al., Proceedings of the 11th USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2014.
13. **Intel SGX Explained**: V. Costan and S. Devadas, 2016.
14. **Coz: Finding Code That Counts with Causal Profiling**: C. Curtsinger and E. D. Berger, Proceedings of the 25th Symposium on Operating Systems Principles (SOSP), 2015.
15. **Fay: Extensible Distributed Tracing from Kernels to Clusters**: U. Erlingsson et al., Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles (SOSP), 2011.
16. **Performance of Trusted Computing in Cloud Infrastructures with Intel SGX**: A. T. Gjerdrum et al., International Conference on Cloud Computing and Services Science (CLOSER), 2017.
17. **Intel Software Guard Extensions SDK for Linux OS**: https://download.01.org/intel-sgx/linux-1.8/docs/Intel_SGX_SDK_Developer_Reference_Linux_1.8_Open_Source.pdf
18. **Intel Storage Performance Development Kit**: http://www.spdk.io
19. **PESOS: Policy Enhanced Secure Object Store**: R. Krahn et al., Proceedings of the Thirteenth EuroSys Conference (EuroSys), 2018.
20. **SGXBOUNDS: Memory Safety for Intel SGX**: D. Kuvaiskii et al., 2018.
21. **Memprof: A Memory Profiler for NUMA Multicore Systems**: R. Lachaize et al., Proceedings of the USENIX Conference on Annual Technical Conference (USENIX ATC), 2012.
22. **Memphis: Finding and Fixing NUMA-Related Performance Problems on Multi-Core Platforms**: C. McCurdy and J. S. Vetter, IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS), 2010.
23. **FEX: A Software Systems Evaluator**: O. Oleksenko et al., 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), 2017.
24. **Eleos: ExitLess OS Services for SGX Enclaves**: M. Orenbach et al., Proceedings of the 12th ACM European ACM Conference in Computer Systems (EuroSys), 2017.
25. **Evaluating MapReduce for Multi-Core and Multiprocessor Systems**: C. Ranger et al., Proceedings of the IEEE 13th International Symposium on High Performance Computer Architecture (HPCA), 2007.
26. **Keystone Open-source Secure Hardware Enclave**: https://keystone-enclave.org/
27. **RocksDB â€” A Persistent Key-Value Store**: https://rocksdb.org/
28. **PANOPLY: Low-TCB Linux Applications with SGX Enclaves**: S. Shinde et al., Proceedings of the Network and Distributed System Security Symposium (NDSS), 2017.
29. **INSPECTOR: Data Provenance Using Intel Processor Trace (PT)**: J. Thalheim et al., 2016 IEEE 36th International Conference on Distributed Computing Systems (ICDCS), 2016.
30. **Sieve: Actionable Insights from Monitored Metrics in Distributed Systems**: J. Thalheim et al., Proceedings of the 18th ACM/IFIP/USENIX Middleware Conference (Middleware), 2017.
31. **ShieldBox: Secure Middleboxes Using Shielded Execution**: B. Trach et al., Proceedings of the ACM SIGCOMM Symposium on SDN Research (SOSR), 2018.
32. **Likwid: A Lightweight Performance-Oriented Tool Suite for x86 Multicore Environments**: J. Treibig et al., Proceedings of the 2010 39th International Conference on Parallel Processing Workshops (ICPPW), 2010.
33. **Graphene-SGX: A Practical Library OS for Unmodified Applications on SGX**: C.-C. Tsai et al., Proceedings of the USENIX Annual Technical Conference (USENIX ATC), 2017.
34. **sgx-perf: A Performance Analysis Tool for Intel SGX Enclaves**: N. Weichbrodt et al., Proceedings of the ACM/IFIP/USENIX International Conference on Middleware (Middleware), 2018.
35. **Orchestrating the Deployment of Computations in the Cloud with Conductor**: A. Wieder et al., Presented as part of the 9th USENIX Symposium on Networked Systems Design and Implementation (NSDI), 2012.