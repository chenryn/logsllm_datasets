### Enhanced Access Management with Pseudonym-Based Authentication

The access management system has been enhanced with a pseudonym-based authentication mechanism. Upon successful verification of the user's credentials during the authentication process, each user is assigned a randomly generated pseudonym.

### Group Key Management and Secure Data Distribution

The management of group keys, which are used for encrypting data traffic and ensuring confidential and authenticated distribution of group management information, is handled using standard secure group techniques. These techniques leverage the group topology, such as the one-to-many scheme described in [21]. For example, an internet learning application uses a one-to-many scheme for large, dynamic groups during lectures and a many-to-few scheme for written exams. Additionally, the addressing schemes used for group members must be pseudonym-aware to maintain anonymity.

### Network Infrastructure for Anonymity

To ensure that users remain unknown to both outsiders and the group, we need to add the necessary network infrastructure, specifically the SAM (Secure Anonymous Multicast) servers. The SAM servers join the group on behalf of users who wish to remain anonymous. These servers are treated as regular group members and participate in the chosen group key management technique. However, the actual group members, who are anonymized, receive secure group communication through the SAM server. This setup utilizes the SNAP (Secure Nonlocal Anonymizing Protocol) architecture, as described in [12], which provides user administration and persona generation services. Importantly, this architecture protects users from malicious observers in their local environment by ensuring secure transmission between the SAM server and the user.

### Enhanced SNAP Server Components

The enhanced SNAP server for secure and anonymous multicast includes several components:
- **User Administration**: Manages user identities and pseudonyms.
- **Persona Generator**: Generates and manages pseudonyms.
- **HTTP(S) Proxy**: Facilitates secure web browsing.
- **SMTP Server**: Supports secure email communication.
- **Key Management**: Organizes and manages keys for secure multicast groups.
- **Authorization Administration**: Manages authorization credentials.
- **Anonymous Multicast Server**: Handles the distribution of multicasted data.
- **General Purpose Store-and-Forward Server**: Provides additional storage and forwarding capabilities.

### Implications of SNAP Architecture

The use of the SNAP architecture in the simplified secure multicast framework has several implications:
1. **Key Management**: The new SAM server, derived from the SNAP server, must be able to join a secure multicast group. A key management component is included to organize the keys used in every secure multicast group it participates in.
2. **Credential Administration**: The SAM server must manage the keys and credentials provided by users to join a group, including the administration of keys and authorization credentials.
3. **Data Distribution**: The SAM server should distribute received multicasted data to entitled users and send user data, encrypted and/or signed with the correct keys, to the targeted secure multicast group.

### Special Cases

#### Degenerated Cases
We distinguish between two degenerated cases:
1. **Only Anonymous Participants**: A secure multicast group with only anonymous participants and no normal members.
2. **Only Normal Users**: A secure multicast group with only normal users, where no member can claim to know that there are only normal members. This case is equivalent to a standard secure multicast group, except that only a collusion of all members could reveal this fact.

Both cases do not require changes to the building blocks and are handled as "normal" distributed scenarios.

#### Merge of Unicast Connections
If a SAM server reaches a critical number of users subscribed to the same secure multicast group, it may include these users in a second secure multicast group. This second group will only include users with the required technology to join a secure multicast group. For this case, the anonymous multicast server in the SAM server is extended with a dummy traffic generating engine, commonly used in mixes (see Section 2).

#### Certifications
A special access management scheme is included to allow for fair, semi-blinded examinations. Certified pseudonyms are introduced for students. The protocol for a student S who desires to take a semi-blinded examination from examiner E is as follows:
1. **Check Eligibility**: S checks if E allows for semi-blinded examinations in the digitally signed course description.
2. **Request Certification**: If allowed, S requests a certification of his pseudonym P from the certification authority of the university, proving that the pseudonym P is bound to his real identity by his SAM server.
3. **Join Group**: S joins the examination group anonymously through the indicated SAM server at the time of the exam.
4. **Grading and Forwarding**: E grades the signed performance of P and forwards the grade to the certification authority and the pseudonymous user P.

### Evaluation

#### Scalability of the SAM Framework
The SAM server, previously referred to as a single server per local environment, can consist of a network of SAM servers for scalability and to reduce the trust required. Techniques such as Onion Routing or the Freedom network (Section 2) are employed.

#### Complexity Analysis
The additional costs for the SAM architecture arise from two improvements on a typical group architecture:
1. **Introduction of Anonymity Mechanisms**: Ensures user privacy.
2. **Usage of Secure Group Communication**: Heavily dependent on the group key management scheme.

The communication costs for the most frequent operations in centralized and distributed, tree-based approaches are shown in Table 4. The specific configuration should be carefully chosen based on the expected group topology.

#### Resistance to Attacks
The resistance of the SAM framework to defined attacks depends on the exact configuration used. A near-ideal setup uses SAM servers organized as in the onion routing approach with pseudonym-based authentication and dummy traffic generation. The SAM servers will also handle traditional SNAP server traffic, such as emails, web browsing, and other TCP-based traffic.

### Conclusions

In summary, the SAM framework provides an environment for anonymous group communication derived from a general-purpose and application-independent secure multicast framework built on state-of-the-art technology. The exact composition of the framework is configurable by the application, allowing for hybrid authentication mechanisms. The use of a network of SAM servers for scalability reduces the trust required in individual servers and ensures local anonymity.

Further research will focus on:
1. Analyzing the behavior of different applications in the SAM framework with respect to selected authentication methods and group management techniques.
2. Quantitatively evaluating the different components concerning performance and usability.
3. Theoretically assessing the degrees of anonymity and pseudonymity achieved with respect to defined attacks.

### References

[1] W. Fenner, “Internet group management protocol, version 2,” RFC 2236, November 1997.
[2] Anton Ballardie and John Crowcroft, “Multicast-specific security threats and counter-measures,” in Proceedings of ISOC Symposium on Network and Distributed System Security, San Diego, CA, USA, February 1995.
[3] Lakshminath R. Dondeti, Sarit Mukherjee, and Ashok Samal, “Survey and comparison of secure group communication protocols,” 2000.
[4] Matthew J. Moyer, Josyula R. Rao, and Pankaj Rohatgi, “A survey of security issues in multicast communications,” IEEE Network, November/December 1999.
[5] Andreas Pfitzmann, Dienstintegrierende Kommunikationsnetze mit teilnehmerüberprüfbarer Datenschutz, Ph.D. thesis, Universität Karlsruhe, Deutschland, Informatik-Fachberichte 234, Springer Verlag, 1990.
[6] David Chaum, “The dining cryptographers problem: Unconditional sender and recipient untraceability,” Journal of Cryptology, pp. 65–75, 1988.
[7] David L. Chaum, “Untraceable electronic mail, return addresses, and digital pseudonyms,” Communications of the ACM, vol. 24, no. 2, February 1981.
[8] Eran Gabber, Phillip B. Gibbons, David M. Kristol, Yossi Matias, and Alain Mayer, “On secure and pseudonymous client-relationships with multiple servers,” ACM Transactions on Information and System Security (TISSEC), November 1999.
[9] Michael K. Reiter and Aviel D. Rubin, “Crowds: Anonymity for web transactions,” ACM Transactions on Information and System Security, vol. 1, no. 1, November 1998.
[10] Ian Goldberg and David Wagner, “TAZ Servers and the Rewebber Network: Enabling Anonymous Publishing on the World Wide Web,” First Monday, vol. 3, no. 4, April 1998.
[11] Thomas Demuth and Andreas Rieke, “Securing the Anonymity of Content Providers in the World Wide Web,” in Proceedings of SPIE’99, San José, CA, USA, January 1999, vol. 3657, pp. 494–502.
[12] Nathalie Weiler and Bernhard Plattner, “Secure Anonymous Protocols for Local and Multicast Environments,” Technical Report 73, TIK, ETH Zürich, Switzerland, October 2000.
[13] Michael G. Reed, Paul F. Syverson, and David M. Goldschlag, “Anonymous connections and onion routing,” Journal on Selected Areas in Communications, vol. 16, no. 4, May 1998.
[14] Ian Goldberg and Adam Shostack, “Freedom Network 1.0 Architecture and Protocols,” White Paper, http://www.freedom.net/info/freedompapers/index.html, November 1999.
[15] Clay Shields and Brian N. Levine, “A protocol for anonymous communicastion over the internet,” in Proceedings of the 7th ACM Conference on Computer and Communication Security (CCS’2000), Athens, Greece, November 2000.
[16] S. Mittra, “Iolus: A framework for scalable secure multicasting,” in Proceedings of ACM SIGCOMM ’97, Cannes, France, September 1997, pp. 277–288.
[17] David Balenson and David McGrew amd Alan T. Sherman, “Key management for large dynamic groups: One-way function trees and amortized initialization,” Internet Draft draft-irtf-smug-groupkeymagmt-oft-00.txt, August 2000.
[18] Ohad Rodeh, Kenneth P. Birman, and Danny Dolev, “Optimized group rekey for group communication systems,” in Proceedings of Network and Distributed System Security Symposium (NDSS’00), San Diego, CA, USA, February 2000.
[19] Yongdae Kim, Adrian Perrig, and Gene Tsudik, “Simple and fault-tolerant key agreement for dynamic collaborative groups,” in 7th ACM Conference on Computer and Communication Security, November 2000.
[20] Germano Caronni, Dan Sun, Marcel Waldvogel, Nathalie Weiler, and Bernhard Plattner, “The VersaKey Framework: Versatile Group Key Management,” IEEE Journal on Selected Areas in Communications, Special Issue on Middleware, September 1999.
[21] Nathalie Weiler, “SEMSOMM - A Scalable Multiple Encryption Scheme for One-To-Many Multicast,” in Proceedings of the IEEE 10th International Workshop on Enabling Technologies: Infrastructure for Collaborative Enterprises (WET ICE ’01), June 2001.