# TCPDump and LibPCAP
- **Wireshark**: A network protocol analyzer that uses LibPCAP for packet capture.
- **Active Network Capture and Analysis**: Techniques for capturing and analyzing network traffic in real-time.

# Canape
- **Canape Core**: A networking library for building custom tools for protocol analysis and exploitation.

# Network Security Tools
- **Mallory**: A tool for man-in-the-middle (MITM) attacks.
- **Hping**: A command-line tool for sending custom TCP/IP packets.
- **Netcat**: A versatile networking utility for reading from and writing to network connections.
- **Nmap**: A network scanning and security auditing tool.

# Web Application Testing
- **Burp Suite**: A comprehensive platform for web application security testing.
- **Zed Attack Proxy (ZAP)**: An open-source web application security scanner.
- **Mitmproxy**: An interactive HTTPS proxy for intercepting, inspecting, modifying, and replaying web traffic.

# Fuzzing, Packet Generation, and Vulnerability Exploitation Frameworks
- **American Fuzzy Lop (AFL)**: A security-oriented fuzzer.
- **Kali Linux**: A Linux distribution specifically designed for digital forensics and penetration testing.
- **Metasploit Framework**: A powerful framework for developing, testing, and executing exploit code.
- **Scapy**: A Python-based interactive packet manipulation program and library.
- **Sulley**: A fuzzing and audit tool for finding and exploiting security vulnerabilities.

# Network Spoofing and Redirection
- **DNSMasq**: A lightweight DNS forwarder and DHCP server.
- **Ettercap**: A comprehensive suite for man-in-the-middle attacks on LAN.

# Executable Reverse Engineering
- **Java Decompiler (JD)**: A decompiler for Java class files.
- **IDA Pro**: A popular disassembler and debugger.
- **Hopper**: A reverse engineering tool for macOS and Linux.
- **ILSpy**: A .NET assembly browser and decompiler.
- **.NET Reflector**: A .NET decompiler and assembly browser.

## Index

## Foreword
When I first met James Forshaw, I was working in what *Popular Science* described in 2007 as one of the top ten worst jobs in science: a "Microsoft Security Grunt." This broad-swath label was used for anyone working in the Microsoft Security Response Center (MSRC). Our jobs were ranked worse than "whale-feces researcher" but somehow better than "elephant vasectomist," a list so infamous among those of us who suffered in Redmond, WA, that we made t-shirts. The relentless drumbeat of incoming security bug reports in Microsoft products defined our work.

It was at MSRC that James, with his keen and creative eye for the uncommon and overlooked, first caught my attention as a security strategist. James authored some of the most interesting security bug reports, a significant achievement considering the MSRC received upwards of 200,000 security bug reports per year from security researchers. James not only found simple bugs but also identified architecture-level issues in the .NET framework. While these issues were harder to address with a simple patch, they were much more valuable to Microsoft and its customers.

Fast-forward to the creation of Microsoft’s first bug bounty programs, which I started in June 2013. We had three programs in that initial batch, promising to pay security researchers like James cash for reporting the most serious bugs to Microsoft. I knew that for these programs to prove their efficacy, we needed high-quality security bugs. There was no guarantee that the bug finders would come, as we were competing for some of the world's most skilled bug hunters. Nation-states and criminals had well-established markets for bugs and exploits, and Microsoft was relying on the finders who were already submitting 200,000 bug reports per year for free. The bounties were designed to focus the attention of friendly, altruistic bug hunters on the problems Microsoft needed the most help eradicating.

So, I called on James and a few others, counting on them to deliver. For these first Microsoft bug bounties, we wanted vulnerabilities for Internet Explorer (IE) 11 beta and new exploitation techniques. The latter bounty, known as the Mitigation Bypass Bounty, was worth $100,000 at the time.

I remember sitting with James over a beer in London, trying to get him excited about looking for IE bugs. He cautioned me not to expect much, as he had never focused on browser security before. Nevertheless, James turned in four unique sandbox escapes for IE 11 beta—four. These sandbox escapes were in areas of the IE code that our internal teams and external penetration testers had all missed. Sandbox escapes are essential for making other bugs more reliably exploitable. James earned bounties for all four bugs, plus an extra $5,000 bonus. Looking back, I probably should have given him an extra $50,000. Not bad for a bug hunter who had never looked at web browser security before.

Just a few months later, I called James from outside a Microsoft cafeteria on a brisk autumn day, absolutely breathless, to tell him that he had just made history. His entry for the Mitigation Bypass Bounty for $100,000 had been accepted. James Forshaw had found a unique new way to bypass all the platform defenses using architecture-level flaws in the latest operating system and won the very first $100,000 bounty from Microsoft.

On that phone call, he joked about me handing him a comically-huge novelty check onstage at Microsoft’s internal BlueHat conference. I sent the marketing department a note, and "James and the Giant Check" became part of Microsoft and internet history forever.

What I am certain readers will gain in the following pages of this book are pieces of James’s unparalleled brilliance—the same brilliance I saw in his bug reports years ago. There are few security researchers who can find bugs in one advanced technology, and even fewer who can do so consistently across multiple technologies. Then there are people like James Forshaw, who can focus on deeper architecture issues with a surgeon’s precision. I hope that those reading this book, and any future book by James, treat it like a practical guide to spark that same brilliance and creativity in their own work.

In a bug bounty meeting at Microsoft, when the IE team members were shaking their heads, wondering how they could have missed some of the bugs James reported, I stated simply, "James can see the Lady in the Red Dress, as well as the code that rendered her, in the Matrix." All of those around the table accepted this explanation for the kind of mind at work in James. He could bend any spoon; and by studying his work, if you have an open mind, then so might you.

For all the bug finders in the world, here is your bar, and it is high. For all the untold numbers of security grunts in the world, may all your bug reports be as interesting and valuable as those supplied by the one and only James Forshaw.

Katie Moussouris
Founder and CEO, Luta Security
October 2017

## Acknowledgments
I’d like to thank you for reading my book; I hope you find it enlightening and of practical use. I’m grateful for the contributions from many different people.

I must start by thanking my lovely wife Huayi, who made sure I stuck to writing even if I really didn’t want to. Through her encouragement, I finished it in only four years; without her, it might have taken two, but it wouldn’t have been as much fun.

Of course, I definitely wouldn’t be here today without my amazing parents. Their love and encouragement led me to become a widely recognized computer security researcher and published author. They bought the family a computer—an Atari 400—when I was young, and they were instrumental in starting my interest in computers and software development. I can’t thank them enough for giving me all my opportunities.

Acting as a great counterpoint to my computer nerdiness was my oldest friend, Sam Shearon. Always the more confident and outgoing person and an incredible artist, he made me see a different side to life.

Throughout my career, there have been many colleagues and friends who have made major contributions to my achievements. I must highlight Richard Neal, a good friend and sometimes line manager who gave me the opportunity to find an interest in computer security, a skill set that suited my mindset.

I also can’t forget Mike Jordon, who convinced me to start working at Context Information Security in the UK. Along with owners Alex Church and Mark Raeburn, they gave me the time to do impactful security research, build my skills in network protocol analysis, and develop tools such as Canape. This experience of attacking real-world, and typically completely bespoke, network protocols is what much of the content of this book is based on.

I must thank Katie Moussouris for convincing me to go for the Microsoft Mitigation Bypass Bounty, raising my profile massively in the information security world, and, of course, for giving me a giant novelty check for $100,000 for my troubles.

My increased profile didn’t go amiss when the team for Google Project Zero—a group of world-leading security researchers with the goal of making the platforms that we all rely on more secure—was being set up. Will Harris mentioned me to the current head of the team, Chris Evans, who convinced me to interview, and soon I was a Googler. Being a member of such an excellent team makes me proud.

Finally, I must thank Bill, Laurel, and Liz at No Starch Press for having the patience to wait for me to finish this book and for giving me solid advice on how to tackle it. I hope that they, and you, are happy with the final result.

## Introduction
When first introduced, the technology that allowed devices to connect to a network was exclusive to large companies and governments. Today, most people carry a fully networked computing device in their pocket, and with the rise of the Internet of Things (IoT), you can add devices such as your fridge and home’s security system to this interconnected world. The security of these connected devices is therefore increasingly important. Although you might not be too concerned about someone disclosing the details of how many yogurts you buy, if your smartphone is compromised over the same network as your fridge, you could lose all your personal and financial information to a malicious attacker.

This book is named *Attacking Network Protocols* because to find security vulnerabilities in a network-connected device, you need to adopt the mindset of the attacker who wants to exploit those weaknesses. Network protocols communicate with other devices on a network, and because these protocols must be exposed to a public network and often don’t undergo the same level of scrutiny as other components of a device, they’re an obvious attack target.

### Why Read This Book?
Many books discuss network traffic capture for diagnostics and basic network analysis, but they don’t focus on the security aspects of the protocols they capture. What makes this book different is that it focuses on analyzing custom protocols to find security vulnerabilities. This book is for those who are interested in analyzing and attacking network protocols but don’t know where to start. The chapters will guide you through learning techniques to capture network traffic, performing analysis of the protocols, and discovering and exploiting security vulnerabilities. The book provides background information on networking and network security, as well as practical examples of protocols to analyze. Whether you want to attack network protocols to report security vulnerabilities to an application’s vendor or just want to know how your latest IoT device communicates, you’ll find several topics of interest.

### What’s in This Book?
This book contains a mix of theoretical and practical chapters. For the practical chapters, I’ve developed and made available a networking library called Canape Core, which you can use to build your own tools for protocol analysis and exploitation. I’ve also provided an example networked application called SuperFunkyChat, which implements a user-to-user chat protocol. By following the discussions in the chapters, you can use the example application to learn the skills of protocol analysis and attack the sample network protocols.

Here is a brief breakdown of each chapter:

- **Chapter 1: The Basics of Networking**
  - This chapter describes the basics of computer networking with a particular focus on TCP/IP, which forms the basis of application-level network protocols. Subsequent chapters assume that you have a good grasp of the network basics. This chapter also introduces the approach I use to model application protocols. The model breaks down the application protocol into flexible layers and abstracts complex technical detail, allowing you to focus on the bespoke parts of the protocol you’re analyzing.

- **Chapter 2: Capturing Application Traffic**
  - This chapter introduces the concepts of passive and active capture of network traffic and is the first chapter to use the Canape Core network libraries for practical tasks.

- **Chapter 3: Network Protocol Structures**
  - This chapter contains details of the internal structures that are common across network protocols, such as the representation of numbers or human-readable text. When you’re analyzing captured network traffic, you can use this knowledge to quickly identify common structures, speeding up your analysis.

- **Chapter 4: Advanced Application Traffic Capture**
  - This chapter explores a number of more advanced capture techniques that complement the examples in Chapter 2. The advanced capture techniques include configuring Network Address Translation to redirect traffic of interest and spoofing the address resolution protocol.

- **Chapter 5: Analysis from the Wire**
  - This chapter introduces methods for analyzing captured network traffic using the passive and active techniques described in Chapter 2. In this chapter, we begin using the SuperFunkyChat application to generate example traffic.

- **Chapter 6: Application Reverse Engineering**
  - This chapter describes techniques for reverse engineering network-connected programs. Reverse engineering allows you to analyze a protocol without needing to capture example traffic. These methods also help to identify how custom encryption or obfuscation is implemented so you can better analyze traffic you’ve captured.

- **Chapter 7: Network Protocol Security**
  - This chapter provides background information on techniques and cryptographic algorithms used to secure network protocols. Protecting the contents of network traffic from disclosure or tampering as it travels over public networks is of the utmost importance for network protocol security.

- **Chapter 8: Implementing the Network Protocol**
  - This chapter explains techniques for implementing the application network protocol in your own code so you can test the protocol’s behavior to find security weaknesses.

- **Chapter 9: The Root Causes of Vulnerabilities**
  - This chapter describes common security vulnerabilities you’ll encounter in a network protocol. When you understand the root causes of vulnerabilities, you can more easily identify them during analysis.

- **Chapter 10: Finding and Exploiting Security Vulnerabilities**
  - This chapter describes processes for finding security vulnerabilities based on the root causes in Chapter 9 and demonstrates a number of ways of exploiting them, including developing your own shell code and bypassing exploit mitigations through return-oriented programming.

- **Appendix: Network Protocol Analysis Toolkit**
  - In the appendix, you’ll find descriptions of some of the tools I commonly use when performing network protocol analysis. Many of the tools are described briefly in the main body of the text as well.

### How to Use This Book
If you want to start with a refresher on the basics of networking, read Chapter 1 first. When you’re familiar with the basics, proceed to Chapters 2, 3, and 5 for practical experience in capturing network traffic and learning the network protocol analysis process. With the knowledge of the principles of network traffic capture and analysis, you can then move on to Chapters 7 through 10 for practical information on how to find and exploit security vulnerabilities in these protocols. Chapters 4 and 6 contain more advanced information about additional capture techniques and application reverse engineering, so you can read them after you’ve read the other chapters if you prefer.

For the practical examples, you’ll need to install .NET Core (https://www.microsoft.com/net/core/), which is a cross-platform version of the .NET runtime from Microsoft that works on Windows, Linux, and macOS. You can then download releases for Canape Core from https://github.com/tyranid/CANAPE.Core/releases/ and SuperFunkyChat from https://github.com/tyranid/ExampleChatApplication/releases/; both use .NET Core as the runtime. Links to each site are available with the book’s resources at https://www.nostarch.com/networkprotocols/.

To execute the example Canape Core scripts, you’ll need to use the CANAPE.Cli application, which will be in the release package downloaded from the Canape Core GitHub repository. Execute the script with the following command line, replacing `script.csx` with the name of the script you want to execute:
```bash
dotnet exec CANAPE.Cli.dll script.csx
```
All example listings for the practical chapters as well as packet captures are available on the book’s page at https://www.nostarch.com/networkprotocols/. It’s best to download these example listings before you begin so you can follow the practical chapters without having to enter a large amount of source code manually.

### Contact Me
I’m always interested in receiving feedback, both positive and negative, on my work, and this book is no exception. You can email me at attacking.network.protocols@gmail.com. You can also follow me on Twitter @tiraniddo or subscribe to my blog at https://tyranidslair.blogspot.com/ where I post some of my latest advanced security research.

## Chapter 1: The Basics of Networking
To attack network protocols, you need to understand the basics of computer networking. The more you understand how common networks are built and function, the easier it will be to apply that knowledge to capturing, analyzing, and exploiting new protocols. Throughout this chapter, I’ll introduce basic network concepts you’ll encounter every day when you’re analyzing network protocols. I’ll also lay the groundwork for a way to think about network protocols, making it easier to find previously unknown security issues during your analysis.

### Network Architecture and Protocols
Let’s start by reviewing some basic networking terminology and asking the fundamental question: what is a network? A network is a set of two or more computers connected together to share information. It’s common to refer to each connected device as a node on the network to make the description applicable to a wider range of devices. Figure 1-1 shows a very simple example.

**Figure 1-1: A simple network of three nodes**

The figure shows three nodes connected with a common network. Each node might have a different operating system or hardware. But as long as each node follows a set of rules, or network protocol, it can communicate with the other nodes on the network. To communicate correctly, all nodes on a network must understand the same network protocol.

A network protocol serves many functions, including one or more of the following:
- **Maintaining session state**: Protocols typically implement mechanisms to create new connections and terminate existing connections.
- **Identifying nodes through addressing**: Data must be transmitted to the correct node.