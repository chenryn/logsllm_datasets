### References

1. Critical Infrastructure Protection Vigilance. (2011). SCADA Security Evaporates in Texas. Retrieved from https://ciip.wordpress.com/tag/scada-incidents/.

2. Downs, J.J., and Vogel, E.F. (1993). A Plant-Wide Industrial Process Control Problem. *Computers & Chemical Engineering*, 17(3), 245-255.

3. Dragos. (2017). TRISIS Malware: Analysis of Safety System Targeted Malware. Retrieved from https://dragos.com/wp-content/uploads/TRISIS-01.pdf.

4. Falliere, N., Murchu, L.O., and Chien, E. (2011). W32.Stuxnet Dossier. White paper, Symantec Corp., Security Response.

5. Feng, C., Li, T., Zhu, Z., and Chana, D. (2017). A Deep Learning-Based Framework for Conducting Stealthy Attacks in Industrial Control Systems. arXiv:cs.CR/1709.06397.

6. Formby, D., Srinivasan, P., Leonard, A.M., Rogers, J.D., and Beyah, R.A. (2016). Who’s in Control of Your Control System? Device Fingerprinting for Cyber-Physical Systems. The Internet Society.

7. Garcia, L., Brasser, F., Hazar Cintuglu, M., Sadeghi, A., Mohammed, O.A., and Zonouz, S.A. (2017). Hey, My Malware Knows Physics! Attacking PLCs with Physical Model Aware Rootkit. In *NDSS*.

8. Golnaraghi, F., and Kuo, B.C. (2009). *Automatic Control Systems* (9th ed.). Wiley.

9. Govil, N., Agrawal, A., and Tippenhauer, N.O. (2018). On Ladder Logic Bombs in Industrial Control Systems. Springer International Publishing, 110-126.

10. Hadžiosmanović, D., Sommer, R., Zambon, E., and Hartel, P.H. (2014). Through the Eye of the PLC: Semantic Security Monitoring for Industrial Processes. In *Proceedings of the 30th ACSAC (ACSAC '14)*, 126-135.

11. Huang, Y., Esmalifalak, M., Nguyen, H., Zheng, R., Han, Z., Li, H., and Song, L. (2013). Bad Data Injection in Smart Grid: Attack and Defense Mechanisms. *IEEE Communications Magazine*, 51(1), 27-33.

12. Kaspersky. (2017). ICS Cybersecurity: A View from the Field. Retrieved from https://www.kaspersky.com/blog/ics-report-2017/16967/.

13. Keliris, A., and Maniatakos, M. (2019). ICSREF: A Framework for Automated Reverse Engineering of Industrial Control Systems Binaries. In *NDSS*.

14. Keliris, A., Salehghaffari, H., Cairl, B., Krishnamurthy, P., Maniatakos, M., and Khorrami, F. (2016). Machine Learning-Based Defense Against Process-Aware Attacks on Industrial Control Systems. In *2016 IEEE International Test Conference (ITC)*.

15. Konstantinou, C., Sazos, M., and Maniatakos, M. (2016). Attacking the Smart Grid Using Public Information. In *2016 17th Latin-American Test Symposium (LATS)*, 105-110. DOI: 10.1109/LATW.2016.7483348.

16. Kowsari, K., Meimandi, H., Mendu, S., Barnes, T., and Brown, D. (2019). Text Classification Algorithms: A Survey. *Information*, 10(4), 150.

17. Krotofil, M. (2017). Evil Bubbles. Retrieved from https://www.blackhat.com/us-17/briefings/schedule/#evil-bubbles-or-how-to-deliver-attack-payload-via-the-physics-of-the-process-7689.

18. Krotofil, M., and Larsen, J. (2015). Rocking the Pocket Book: Hacking Chemical Plants for Competition and Extortion. Retrieved from https://www.blackhat.com/docs/us-15/materials/us-15-Krotofil-Rocking-The-Pocket-Book-Hacking-Chemical-Plant-For-Competition-And-Extortion-wp.pdf.

19. Krotofil, M., Larsen, J., and Gollmann, D. (2015). The Process Matters: Ensuring Data Veracity in Cyber-Physical Systems. In *Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security (ASIA CCS '15)*, 133-144. DOI: 10.1145/2714576.2714599.

20. Lee, R.M., Assante, M.J., and Conway, T. (2016). Analysis of the Cyber Attack on the Ukrainian Power Grid. *SANS Industrial Control Systems*, 23.

21. Liu, Y., Ning, P., and Reiter, M.K. (2009). False Data Injection Attacks Against State Estimation in Electric Power Grids. In *Proceedings of the 16th ACM CCS*.

22. Matherly, J. (2019). SHODAN. Retrieved from https://www.shodan.io/.

23. Mathur, A.P., and Tippenhauer, N.O. (2016). SWaT: A Water Treatment Testbed for Research and Training on ICS Security. In *2016 International Workshop on Cyber-physical Systems for Smart Water Networks (CySWater)*, 31-36.

24. McLaughlin, S. (2011). On Dynamic Malware Payloads Aimed at Programmable Logic Controllers. In *Proceedings of the 6th USENIX Conference on Hot Topics in Security (HotSec'11)*, 10-10.

25. McLaughlin, S., and McDaniel, P. (2012). SABOT: Specification-Based Payload Generation for Programmable Logic Controllers. In *Proceedings of the 2012 ACM CCS (CCS '12)*, 439-449.

26. Department of Homeland Security. (n.d.). Critical Infrastructure Sectors. Retrieved from https://www.dhs.gov/cisa/critical-infrastructure-sectors.

27. Rajput, P.H.N., Rajput, P., Sazos, M., and Maniatakos, M. (2019). Process-Aware Cyberattacks for Thermal Desalination Plants. In *Proceedings of the 2019 ACM Asia Conference on Computer and Communications Security (Asia CCS '19)*, 441-452. DOI: 10.1145/3321705.3329805.

28. SANS Institute. (2014). German Steel Mill Cyber Attack. Retrieved from https://ics.sans.org/media/ICS-CPPE-case-Study-2-German-Steelworks_Facility.pdf.

29. SANS Institute. (2016). The Impact of Dragonfly Malware on Industrial Control Systems. Retrieved from https://www.sans.org/reading-room/whitepapers/ICS/impact-dragonfly-malware-industrial-control-systems-36672.

30. Sarkar, E., Alkindi, Y., and Maniatakos, M. (2020). Backdoor Suppression in Neural Networks Using Input Fuzzing and Majority Voting. *IEEE Design & Test*. DOI: 10.1109/MDAT.2020.2968275.

31. Sharif, M., Bhagavatula, S., Bauer, L., and Reiter, M.K. (2016). Accessorize to a Crime: Real and Stealthy Attacks on State-of-the-Art Face Recognition. In *Proceedings of the 2016 ACM CCS (CCS '16)*, 1528-1540.

32. Shoukry, Y., Martin, P., Yona, Y., Diggavi, S., and Srivastava, M. (2015). PyCRA: Physical Challenge-Response Authentication for Active Sensors Under Spoofing Attacks. In *Proceedings of the 22nd ACM CCS (CCS '15)*, 1004-1015.

33. Song, C., and Shmatikov, V. (2018). Fooling OCR Systems with Adversarial Text Images. arXiv:cs.LG/1802.05385.

34. Srivastava, N., Hinton, G., Krizhevsky, A., Sutskever, I., and Salakhutdinov, R. (2014). Dropout: A Simple Way to Prevent Neural Networks from Overfitting. *Journal of Machine Learning Research*, 15, 1929-1958.

35. Stouffer, K.A., Falco, J.A., and Scarfone, K.A. (2011). SP 800-82. *Guide to Industrial Control Systems (ICS) Security: Supervisory Control and Data Acquisition (SCADA) Systems, Distributed Control Systems (DCS), and Other Control System Configurations Such As Programmable Logic Controllers (PLC)*. Technical Report. Gaithersburg, MD, United States.

36. Urbina, D.I., Giraldo, J., Cardenas, A.A., Valente, J., Faisal, M., Tippenhauer, N.O., Ruths, J., Candell, R., and Sandberg, H. (2016). Survey and New Directions for Physics-Based Attack Detection in Control Systems. US Department of Commerce, NIST.

37. Urbina, D.I., Giraldo, J.A., Cardenas, A.A., Tippenhauer, N.O., Valente, J., Faisal, M., Ruths, J., Candell, R., and Sandberg, H. (2016). Limiting the Impact of Stealthy Attacks on Industrial Control Systems. In *Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS '16)*, 1092-1105. DOI: 10.1145/2976749.2978388.

38. Winnicki, A.R., Krotofil, M., and Gollmann, D. (2017). Cyber-Physical System Discovery: Reverse Engineering Physical Processes. In *Proceedings of the 3rd ACM Workshop on Cyber-Physical System Security (CPSS '17)*, 3-14.

39. Yardley, T. (2008). SCADA: Issues, Vulnerabilities, and Future Directions. Retrieved from https://www.usenix.org/system/files/login/articles/258-yardley.pdf.

40. Younis, M.B., and Frey, G. (2006). UML-Based Approach for the Re-Engineering of PLC Programs. In *IECON 2006 - 32nd Annual Conference on IEEE Industrial Electronics*, 3691-3696.

41. Zonouz, S., Rrushi, J., and McLaughlin, S. (2014). Detecting Industrial Control Malware Using Automated PLC Code Analytics. *IEEE Security & Privacy*.

### Appendix

#### A. Construction of Dataset

In this work, we propose to fingerprint a process based on an HMI screenshot. However, a collection of HMI screenshots is not available as a public database. To facilitate the method of fingerprinting using machine learning (ML), we collected diverse images belonging to various Critical Infrastructure (CI) sectors. The Cyber + Infrastructure unit of the Department of Homeland Security, which is responsible for protecting CI from cyber and physical attacks, enlists 16 different sectors for categorization of functionalities, threats, and vulnerabilities [34]. This section describes the methodology followed in the collection of the dataset.

**A.1 Collection of HMI Screenshots**

We leveraged publicly available data on the internet. Some vendors advertise their products and share screenshots of their HMIs, and some utilities advertise their projects by sharing pictures of installed CI devices and SCADA systems. A variation of the second case was used by Stuxnet to find information about Iranian Nuclear Power Plants. We used search engines like Google and Bing to find such images. A Python package called `google_images_download` was used along with `chromedriver` to download images in bulk. Once a few viable images were found, more images were found using the image search option in these search engines. The following search strings were used:

- **Name of each sector**: Each sector was searched by adding keywords like ‘scada’, ‘hmi’, and ‘human machine interface’ using the `google_images_download` package. For example, chemical sector images were searched for with ‘chemical hmi scada human machine interface’ as the search string. Each space in the search string is interpreted as ‘+’, and thus, all combinations were searched using the API. We set the download limit to 1000 per sector, but many images faced download errors due to broken links, unknown file types, or URL errors. We expected a total of 16,000 images, but around 6,300 images were downloaded using this method.
- **Popular vendor names and their product names**: We targeted five popular CI vendors: Siemens, General Electric, ABB, Schneider Electric, Yokogawa, and their corresponding SCADA software. Search strings included ‘SIMATIC WINCC’ from Siemens, ‘iFix’ from General Electric, ‘Wonderware’ from Invensys (now Schneider Electric). Apart from SCADA, we also searched for products that had HMI interfaces, such as iRIO PLC from Schneider Electric Telecontrol, which runs a software called xFlow with a web interface.
- **Utilities**: We also looked at select utilities for some countries, such as ‘National Thermal Power Corporation’ or ‘Saudi Arabia Desalination.’
- **Random search**: Standalone search strings like ‘Scada’, ‘HMI’, ‘Distributed Control System’, and ‘PLC interface’ were used for collecting more images.

Using search engines, we downloaded more than 10,000 images, but not all images were useful. Many images were cartoons, depicted SCADA/HMI in concept, or were different images of the words ‘SCADA’ and ‘HMI’. We cleaned the dataset for usable images and found that less than 5% of the images were actual HMI screenshots. The usable dataset after cleaning resulted in 500 images belonging to different sectors.

In our second methodology, we used Shodan [30], a search engine that finds IoT devices on the internet. We used Shodan Images, a dedicated API in Shodan that looks for images in IoTs, to search for screenshots in Industrial Control Systems (ICS) (search string: ‘screenshot.label:ics’). As an exhaustive search, we also looked for images running VNC service (search string: ‘has_screenshot:true RFB’). Most of the screenshots were login screens, and 21 images were usable for constructing our dataset.

**A.2 Image Annotation**

Only three sectors—Chemical Sector, Water and Wastewater Management Sector, and Energy Sector—had more than 100 usable HMI images. Since a small number of images in a sector would bias the algorithm, we chose these three sectors for classification. We performed manual labeling of data following the steps listed below:

- **Visual inspection**: Presence of key elements like water tanks, common chemical names, electrical switches, and connections are strongly indicative of the sector a process belongs to.
- **Visiting websites and collecting metadata**: Visiting the source of the image reveals more information about the image. Other metadata used for classifying images included filenames, descriptions, language, and location. We also used the metadata downloaded using `google_images_download` to help in classification.
- **Subcomponents of a sector**: Critical infrastructure sectors are composed of smaller processes. For example, power consumption of a chemical plant may be considered a critical process of its own. In our method of image annotation, we classify a screenshot based on the contents of the screenshot, even though it may be part of another CI sector, because the adversary is interested in learning about the current system they were able to hack.

**A.3 Image Metadata for Reconnaissance**

This subsection focuses on the information obtained from the images. This is done to exhaustively characterize our dataset. We keep track of the meta-information collected while constructing the dataset. We collected the data downloaded as metadata using the `google_images_download` Python library. The ‘description’ section of the images revealed precise plant information. For example, one image description was “Stainless Steel HMI Solution for Food and Beverages Industry.” Although this particular image was not used in this work due to resolution issues, similar descriptions, available for images used for machine learning, helped in image annotation.

We also searched for this information on Shodan to see if these images verifiably correspond to IoTs on the internet. For example, if a city is revealed from the metadata with some common CI vendor names, we searched for the combination of city and vendor with ICS ports like 502, 2404, which correspond to two common protocols used in ICS, Modbus, and IEC 104. Using metadata from images, we could learn more about CIs deployed in various places in the world.

### B. ICS Fingerprinting

**B.1 Process Classification Using HMI Screenshots**

In Section 4.4.2, we discussed how ICSREF could be used to fingerprint a particular function block, which could be a PLC control loop. In this section, we consider the attack scenario where continuous screenshots of the HMI could be taken to build a time-series of all the variables being monitored in the HMI. Using this time-series, we demonstrate a possible way of automatically fingerprinting the infected loop by considering the time-series as a signature for that process variable. Note that there cannot be a machine learning model that can classify a process variable in this way across all sectors in all plants. Therefore, this methodology of reconnaissance depends on the plant attacked and is not generalizable according to our definition in Section 3. For example, a process variable pressure may have a time series with an average of 2800 kPa and 1000 kPa for different kinds of ICS plants, and we cannot universally make a time-series representative of pressure in this way. Thus, this method of process variable identification is dependent on the attacked plant. In this methodology, the reconnaissance tool identifies common process variable names from the HMI using OCR and builds time-series for them.

As mentioned in the setup, each of the control (PID) loops may be considered to be controlled by a PLC, which in turn, may be monitored by the HMI. Here, we collected data from the TE model from the inputs of the PID loops, emulating the collection of data from the inputs of the PLC. Each of these inputs are the process variables of the plant, considering the feedback value coming to the PLC (Fig. 5). We built time-series for those process variables to train a Naive Bayes Classifier. Our aim was to fingerprint all the independent loops of the MATLAB model. We found that 16 out of 18 loops were directly interacting with the measured variables. We collected data for 60 hours of operation, amounting to 900 data points for every PID loop. Further, we split the data into time-series consisting of 30 data points and calculated the average values of the time-series for the 16 different measured variables. We used 80% of the dataset for training and the rest as a test set to evaluate the efficiency of the classifier. Our aim was to identify each of the PID loops with high accuracy using the corresponding time-series. The test accuracy for all 16 PID loops was 91.67%. Thus, from this machine-learning-based reconnaissance, we were able to fingerprint a particular loop, thus, a process variable, and further assess the vulnerability of a particular loop towards successful fingerprinting and attack.

**B.2 Sector Classification Using PLC Binaries**

We performed experiments to show the efficacy of using PLC FB/FBs and strings for sector classification. We used the same dataset of binaries. Using FB/FBs, we achieved an accuracy of 33%, which attested to the fact that a process FB/FB cannot be used to fingerprint ICS sectors. After data cleansing and string translation, we trained machine learning models with these strings to classify binaries into the sectors shown in Table 6. Our results showed that this method is ineffective for classifying the binary with an accuracy of 33.33%. Since the PLC string-based classification model performed poorly for ICS sector classification, we performed another experiment leveraging transfer learning to classify the PLC binaries obtained from the field without adding any binary-specific information to the machine learning model. The machine learning model predicted that 84.21% of the binaries belong to the energy sector. On manual analysis, we found that many binaries contain processes in the energy sector, namely boiler control and temperature control, and the accuracy was found to be slightly better. This was a preliminary experiment, but this concept may be used for more robust reconnaissance.

**B.3 ICS Device Fingerprinting**

ICS attack literature has also focused on fingerprinting vendors or specific devices to enable attack vectors to be tailored according to the device [14]. In this work, we target generalized attack vectors that can be aided with device-level fingerprinting for successful infection.

### C. Other Process-Aware Attacks

**C.1 Oscillatory Perturbation Attack**

We performed oscillatory perturbations on plant production (Fig. 8). Production was chosen as the process variable for this attack because we wanted to experiment with attacks that do not directly leverage the modeled dynamics. The objective of these stealthier attacks is to create malicious physical dynamics that are not part of plant performance metrics and thus are undetectable by any threshold. For our first attack, we chose the alarm thresholds as follows: upper limit 25 kg/hr and lower limit 20 kg/hr. The payload generated an attack that oscillated the production between 23 kg/hr and 20 kg/hr. The second attack was more aggressive, and the alarm thresholds in production were chosen to be between 15 kg/hr and 30 kg/hr. This resulted in oscillations of production between 16 kg/hr and 30 kg/hr. The oscillatory perturbations can be further increased with further change in \( K_P \), but then the system would be driven into an unstable region of operation (i.e., the exponential increase of oscillations).

**C.2 Physically Configurable Attack Trigger Time**

From Fig. 7, we see that the attacked pressure values settle at different times for different payloads. Here, we chose another process variable to specifically perform this attack. We performed the stable perturbation attack with physically configurable trigger time on production. We chose production to perform this attack because a decrease in production causes direct losses to ICS. The trigger times for such explosive attacks were chosen between 0 and 40 hours. As can be seen from Fig. 9, the payload was able to find various trigger times at 4, 10, and 36 hours after infection. Thus, if an adversary chooses to cause explosive attacks to ICS plants, this completely physical attack may be used to cause damage after they escape.