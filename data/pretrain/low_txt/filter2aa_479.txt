# Criminal Charges Not Pursued: Hacking PKI

**Presenter:** Mike Zusman, Principal Consultant  
**Contact:** PI:EMAIL  
**Source:** From StartCom Critical Event Report - [Link](https://blog.startcom.org/?p=161)  
**Acknowledgment:** Special thanks to StartCom for quickly addressing the bug I discovered. These individuals genuinely care about PKI.

---

## Outline
1. **Introduction – The Basics**
2. **CA Domain Validation Mechanisms**
3. **Certificate Provisioning Process**
4. **Web Application Attacks**
5. **Client-Side Countermeasures**
6. **CA Countermeasures**
7. **Closing**

---

### 1. Introduction – SSL vs. SSL PKI
- **SSL Protocol**: A robust encryption protocol, though implementation-specific bugs can occur (e.g., Debian PRNG, Microsoft SSL PCT Overflow in 2004).
- **SSL PKI**: Provides third-party trust through:
  - Site validation
  - Code signing
  - Personal certificates

### 2. Introduction – Threat Modeling SSL PKI
- **Threats to SSL PKI**:
  - Exploitation of third-party trust
  - DNS ownership
  - Data theft with minimal trace
  - Targeted attacks (e.g., SSL VPN)
  - As software vendors improve security, endpoints become harder to attack
  - Ethical considerations and the fun factor of hacking

### 3. Introduction – Why Hack PKI?
- **Exploit Third-Party Trust**: By owning the DNS, attackers can steal data with minimal trace.
- **Targeted Attacks**: SSL VPNs are a prime target.
- **Software Security**: If software vendors enhance security, endpoints will be more difficult to compromise.
- **Ethical Hacking**: It is both challenging and enjoyable.

### 4. Introduction – PKI’s Low-Hanging Fruit
- **Certification Authority Web Sites**:
  - Access to private keys is controlled by web application logic.
  - Web applications are notoriously hard to secure, creating an ironic situation where security providers themselves may be insecure.
  - The challenge: How can you secure the internet over the internet?

### 5. Introduction – Soft Targets
- **Insecure Certificate Authorities**:
  - Examples include COMODO and THAWTE, both vulnerable to cross-site scripting (XSS).

### 6. Domain Validation
- **CAs Need to Verify Authorization**:
  - Techniques: Phone and email authentication, relying on secret codes.
  - Attack Vectors: Insecure protocols and poor application logic.
  - Delivery of shared secrets: Over the phone or via email, both with potential vulnerabilities.

### 7. Certificate Provisioning Process
- **Automation and Security**:
  - CAs aim to reduce overhead and make certificate acquisition easier, but this can lead to less trustworthy certificates.
  - Case Studies:
    - **Chosen Prefix Collisions**: Weaknesses in MD5 and predictable serial numbers.
    - **No Validation**: Comodo disabling validation led to the issuance of a rogue certificate for mozilla.org.
  - Blacklisting: CAs use blacklists to protect sensitive domains, but this approach has limitations.

### 8. Real CA Attacks
- **Insecure Direct Object Reference**:
  - Used to bypass StartCom domain validation.
  - Common in CAs that offer domain validation via email.
- **Information Leakage**:
  - Bypassed domain validation with THAWTE.
  - Post-Mortem: Staff, website, and email vulnerabilities were identified.

### 9. Using DV Certificates to Spoof EV
- **Mixed Content Policies**:
  - Do not distinguish between DV and EV SSL.
  - SSL Rebinding attacks can allow for EV Man-in-the-Middle (MITM) attacks with only a valid DV certificate.
  - Browsers struggle with CA’s “tiers of trust.”

### 10. Client-Side Countermeasures
- **White Listing Public Keys**:
  - Perspectives Plugin (not perfect).
  - Client-side proxies for white listing are a better option.

### 11. Recommendations for CAs
- **OWASP Resources**:
  - Free materials and donation options.
  - Web App Security 101: Inventory and assess web applications.
  - Penetration testing and source code review.

### 12. Thank You
- **Contact Information**: PI:EMAIL
- **Additional Resources**: More SSL proxy code and documentation on my blog - [Link](http://schmoil.blogspot.com)

---

**Intrepidus Group, Inc. © 2008**