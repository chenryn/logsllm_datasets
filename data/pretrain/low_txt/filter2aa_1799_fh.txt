### Boot Manager and BCD Library Options

#### Boot Manager Display Order
- **toolsdisplayorder (TOOLS_DISPLAY_ORDER)**
  - **Definition**: Specifies the display order list for the Boot Manager’s tools.
- **bootsequence (BOOT_SEQUENCE)**
  - **Definition**: Defines the one-time boot sequence.
- **default (DEFAULT_OBJECT)**
  - **Type**: GUID
  - **Definition**: The default boot entry to launch.
- **customactions (CUSTOM_ACTIONS_LIST)**
  - **Definition**: Defines custom actions to be taken when a specific keyboard sequence is entered.
- **processcustomactionsfirst (PROCESS_CUSTOM_ACTIONS_FIRST)**
  - **Type**: Boolean
  - **Definition**: Specifies whether the Boot Manager should run custom actions before the boot sequence.

- **bcddevice (BCD_DEVICE)**
  - **Type**: GUID
  - **Definition**: Device ID of where the BCD store is located.

#### BCD Library Options for Boot Applications
- **hiberboot (HIBERBOOT)**
  - **Type**: Boolean
  - **Definition**: Indicates whether this boot was a hybrid boot.
- **fverecoveryurl (FVE_RECOVERY_URL)**
  - **Type**: String
  - **Definition**: Specifies the BitLocker recovery URL string.
- **fverecoverymessage (FVE_RECOVERY_MESSAGE)**
  - **Type**: String
  - **Definition**: Specifies the BitLocker recovery message string.
- **flightedbootmgr (BOOT_FLIGHT_BOOTMGR)**
  - **Type**: Boolean
  - **Definition**: Specifies whether execution should proceed through a flighted Bootmgr.

**Note**: All Windows Boot Manager BCD element codes start with `BCDE_BOOTMGR_TYPE`, but this prefix has been omitted due to space constraints.

#### Table 12-3: BCD Library Options for Boot Applications (Valid for All Object Types)

- **advancedoptions (DISPLAY_ADVANCED_OPTIONS)**
  - **Type**: Boolean
  - **Definition**: If `false`, executes the default behavior of launching the auto-recovery command boot entry when the boot fails; otherwise, displays the boot error and offers the user the advanced boot option menu associated with the boot entry. This is equivalent to pressing F8.
- **avoidlowmemory (AVOID_LOW_PHYSICAL_MEMORY)**
  - **Type**: Integer
  - **Definition**: Forces physical addresses below the specified value to be avoided by the boot loader as much as possible. Sometimes required on legacy devices (such as ISA) where only memory below 16 MB is usable or visible.
- **badmemoryaccess (ALLOW_BAD_MEMORY_ACCESS)**
  - **Type**: Boolean
  - **Definition**: Forces usage of memory pages in the Bad Page List.
- **badmemorylist (BAD_MEMORY_LIST)**
  - **Type**: Array of page frame numbers (PFNs)
  - **Definition**: Specifies a list of physical pages on the system that are known to be bad because of faulty RAM.
- **baudrate (DEBUGGER_BAUDRATE)**
  - **Type**: Baud rate in bps
  - **Definition**: Specifies an override for the default baud rate (19200) at which a remote kernel debugger host will connect through a serial port.
- **bootdebug (DEBUGGER_ENABLED)**
  - **Type**: Boolean
  - **Definition**: Enables remote boot debugging for the boot loader. With this option enabled, you can use Kd.exe or Windbg.exe to connect to the boot loader.
- **bootems (EMS_ENABLED)**
  - **Type**: Boolean
  - **Definition**: Causes Windows to enable Emergency Management Services (EMS) for boot applications, which reports boot information and accepts system management commands through a serial port.
- **busparams (DEBUGGER_BUS_PARAMETERS)**
  - **Type**: String
  - **Definition**: If a physical PCI debugging device is used to provide kernel debugging, specifies the PCI bus, function, and device number (or the ACPI DBG table index) for the device.
- **channel (DEBUGGER_1394_CHANNEL)**
  - **Type**: Channel between 0 and 62
  - **Definition**: Used in conjunction with IEEE 1394 to specify the channel through which kernel debugging communications will flow.

- **configaccesspolicy (CONFIG_ACCESS_POLICY)**
  - **Type**: Default, DisallowMmConfig
  - **Definition**: Configures whether the system uses memory-mapped I/O to access the PCI manufacturer’s configuration space or falls back to using the HAL’s I/O port access routines. Can sometimes be helpful in solving platform device problems.
- **debugaddress (DEBUGGER_PORT_ADDRESS)**
  - **Type**: Hardware address
  - **Definition**: Specifies the hardware address of the serial (COM) port used for debugging.
- **debugport (DEBUGGER_PORT_NUMBER)**
  - **Type**: COM port number
  - **Definition**: Specifies an override for the default serial port (usually COM2 on systems with at least two serial ports) to which a remote kernel debugger host is connected.
- **debugstart (DEBUGGER_START_POLICY)**
  - **Type**: Active, AutoEnable, Disable
  - **Definition**: Specifies settings for the debugger when kernel debugging is enabled. `AutoEnable` enables the debugger when a breakpoint or kernel exception, including kernel crashes, occurs.
- **debugtype (DEBUGGER_TYPE)**
  - **Type**: Serial, 1394, USB, or Net
  - **Definition**: Specifies whether kernel debugging will be communicated through a serial, FireWire (IEEE 1394), USB, or Ethernet port. (The default is serial.)
- **hostip (DEBUGGER_NET_HOST_IP)**
  - **Type**: IP address
  - **Definition**: Specifies the target IP address to connect to when the kernel debugger is enabled through Ethernet.
- **port (DEBUGGER_NET_PORT)**
  - **Type**: Integer
  - **Definition**: Specifies the target port number to connect to when the kernel debugger is enabled through Ethernet.
- **key (DEBUGGER_NET_KEY)**
  - **Type**: String
  - **Definition**: Specifies the encryption key used for encrypting debugger packets while using the kernel Debugger through Ethernet.
- **emsbaudrate (EMS_BAUDRATE)**
  - **Type**: Baud rate in bps
  - **Definition**: Specifies the baud rate to use for EMS.
- **emsport (EMS_PORT_NUMBER)**
  - **Type**: COM port number
  - **Definition**: Specifies the serial (COM) port to use for EMS.
- **extendedinput (CONSOLE_EXTENDED_INPUT)**
  - **Type**: Boolean
  - **Definition**: Enables boot applications to leverage BIOS support for extended console input.
- **keyringaddress (FVE_KEYRING_ADDRESS)**
  - **Type**: Physical address
  - **Definition**: Specifies the physical address where the BitLocker key ring is located.
- **firstmegabytepolicy (FIRST_MEGABYTE_POLICY)**
  - **Type**: UseNone, UseAll, UsePrivate
  - **Definition**: Specifies how the low 1 MB of physical memory is consumed by the HAL to mitigate corruptions by the BIOS during power transitions.
- **fontpath (FONT_PATH)**
  - **Type**: String
  - **Definition**: Specifies the path of the OEM font that should be used by the boot application.
- **graphicsmodedisabled (GRAPHICS_MODE_DISABLED)**
  - **Type**: Boolean
  - **Definition**: Disables graphics mode for boot applications.
- **graphicsresolution (GRAPHICS_RESOLUTION)**
  - **Type**: Resolution
  - **Definition**: Sets the graphics resolution for boot applications.
- **initialconsoleinput (INITIAL_CONSOLE_INPUT)**
  - **Type**: Boolean
  - **Definition**: Specifies an initial character that the system inserts into the PC/AT keyboard input buffer.
- **integrityservices (SI_POLICY)**
  - **Type**: Default, Disable, Enable
  - **Definition**: Enables or disables code integrity services, which are used by Kernel Mode Code Signing. Default is Enabled.
- **locale (PREFERRED_LOCALE)**
  - **Type**: Localization string
  - **Definition**: Sets the locale for the boot application (such as EN-US).
- **noumex (DEBUGGER_IGNORE_USERMODE_EXCEPTIONS)**
  - **Type**: Boolean
  - **Definition**: Disables user-mode exceptions when kernel debugging is enabled. If you experience system hangs (freezes) when booting in debugging mode, try enabling this option.
- **recoveryenabled (AUTO_RECOVERY_ENABLED)**
  - **Type**: Boolean
  - **Definition**: Enables the recovery sequence, if any. Used by fresh installations of Windows to present the Windows PE-based Startup And Recovery interface.
- **recoverysequence (RECOVERY_SEQUENCE)**
  - **Type**: List
  - **Definition**: Defines the recovery sequence.
- **relocatephysical (RELOCATE_PHYSICAL_MEMORY)**
  - **Type**: Physical address
  - **Definition**: Specifies the physical address to which memory should be relocated.

This structured format provides a clear and organized overview of the Boot Manager and BCD library options, making it easier to understand and reference.