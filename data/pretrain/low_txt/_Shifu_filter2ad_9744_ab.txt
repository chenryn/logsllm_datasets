### 自定义PE加载器
该自定义PE加载器首先通过扫描exploit injector文件的“MZ”标识符来获取shellcode的结尾。具体代码如下：
```assembly
00077174   jmp short 00077178
00077176   pop eax
00077177   retn
00077178   call 00077176
```

接下来，通过自定义的`GetProcAddress()`函数获取`VirtualAllocEx()`函数的地址。使用`VirtualAllocEx()`分配内存空间，并将exploit injector节信息以适当的内存对齐方式写入该内存。然后进行必要的地址重定位调整、API函数地址重新解析和IAT（Import Address Table）重新填充。最后，shellcode跳转到新创建的exploit injector DLL的入口点。

### Exploit Injector
Exploit injector首先创建字符串“kernel32.dll”、“LoadLibrary”和“GetProcAddress”。随后搜索kernel32.dll模块地址，并获取`LoadLibrary()`和`GetProcAddress()`的地址。利用这些函数重建exploit injector的IAT。尽管这个功能已经在second stage injector中完成，但其具体目的尚不清楚。接着，使用`CreateThread()`创建一个新的线程。

新线程调用`IsWow64Process()`以确定是x86还是x64版本的利用文件需要被写入内存。在利用文件的开始处写入“MZ”，并创建一个名为“WaitEventX”的事件供后续使用。最终调用主利用加载函数。

主利用加载函数搜索以下趋势安全软件进程：
- `uiSeAgnt.exe`
- `PtSessionAgent.exe`
- `PwmSvc.exe`
- `coreServiceShell.exe`

如果找到其中一个进程，则创建一个挂起的`wuauclt.exe`。否则，创建一个挂起的`svchost.exe`。在这两种情况下，都使用命令行参数“-k netsvc”，但仅适用于`svchost.exe`。需要注意的是，在安装了x64版本的趋势安全软件的情况下，此功能总是会失败。因为在x64进程中调用`CreateToolhelp32Snapshot()`会导致`ERROR_PARTIAL_COPY`错误，并且没有权限访问趋势进程。

接下来，使用`CreateFileMapping()`和`MapViewOfFile()`将x86或x64的利用文件映射到内存中，并填充利用字节。最终，使用`ZwMapViewOfSection()`将节映射到挂起的`svchost.exe`或`wuauclt.exe`进程中。如果系统版本为5.2（Windows Server 2003 和 Windows XP 64位版本），则直接退出。然后，创建两个内存空间并将shellcode写入内存。第一个混淆的shellcode调用第二个shellcode，最后调用`ResumeThread()`恢复挂起的进程并执行利用。

### Second Stage Injector
Second stage injector验证利用是否成功，通过检查完整性等级是否保持为`SECURITY_MANDATORY_LOW_RID`。如果成功提权至`SECURITY_MANDATORY_SYSTEM_RID`，则继续注入main payload。如果利用失败，它将尝试使用`cmd.exe`和`runas.exe`运行自身以获取SYSTEM权限。

### Atom字符串的创建
Second stage injector创建一个atom并检查全局atom表，以判断Shifu是否已经运行。首先，调用`ExpandEnvironmentStrings()`函数获取Windows版本和处理器数量，例如在单处理器的Windows 7上结果为“Windows_NT_1”。然后，使用`RtlComputeCrc32()`计算四个CRC32哈希值，初始值分别为：
- `0xFFFFFFFF`
- `0xEEEEEEEE`
- `0xAAAAAAAA`
- `0x77777777`

对于字符串“Windows_NT_1”，哈希结果如下：
- `0x395693AE`
- `0xB24495D2`
- `0xF39F86E1`
- `0xBAE0B5C8`

每个CRC哈希的最后一个字节以DWORD形式存储在栈上：
- `0xAE000000`
- `0xD2000000`
- `0xE1000000`
- `0xC8000000`

字节序列为：
- `AE 00 00 00 D2 00 00 00 E1 00 00 00 C8 00 00 00`

使用`snprintf()`将前8个字节转换为ASCII字符串，结果为“ae000000d2000000”。最后，调用`GlobalFindAtom()`检查是否存在，如果不存在则调用`GlobalAddAtom()`添加。

### 命令行参数
Second stage injector有两个命令行参数，但只有一个有效：
- `-crypt-test`：显示一个包含“It work’s!”的消息框。
- `-vm-test`：无功能。

### 反分析技巧
#### 反Sandboxie和Avast
Shifu在其进程中调用`GetModuleHandleA()`检查`snxhk.dll`（Avast）或`sbiedll.dll`（Sandboxie）是否存在，如果存在则调用`Sleep()`永久休眠。

#### 进程名检测
枚举运行的进程名，转换为小写并计算CRC32哈希值，与以下列表比较：
- `0x99DD4432` – ?
- `0x1F413C1F` – vmwaretray.exe
- `0x6D3323D9` – vmusrvc.exe
- `0x3BFFF885` – vmsrvc.exe
- `0x64340DCE` – ?
- `0x63C54474` – vboxtray.exe
- `0x2B05B17D` – ?
- `0xF725433E` – ?
- `0x77AE10F7` – ?
- `0xCE7D304E` – dumpcap.exe
- `0xAF2015F2` – ollydbg.exe
- `0x31FD677C` – importrec.exe
- `0x6E9AD238` – petools.exe
- `0xE90ACC42` – idag.exe
- `0x4231F0AD` – sysanalyzer.exe
- `0xD20981E0` – sniff_hit.exe
- `0xCCEA165E` – scktool.exe
- `0xFCA978AC` – proc_analyzer.exe
- `0x46FA37FB` – hookexplorer.exe
- `0xEEBF618A` – multi_pot.exe
- `0x06AAAE60` – idaq.exe
- `0x5BA9B1FE` – procmon.exe
- `0x3CE2BEF3` – regmon.exe
- `0xA945E459` – procexp.exe
- `0x877A154B` – peid.exe
- `0x33495995` – autoruns.exe
- `0x68684B33` – autorunsc.exe
- `0xB4364A7A` – ?
- `0x9305F80D` – imul.exe
- `0xC4AAED42` – emul.exe
- `0x14078D5B` – apispy.exe
- `0x7E3DF4F6` – ?
- `0xD3B48D5B` – hookanaapp.exe
- `0x332FD095` – fortitracer.exe
- `0x2D6A6921` – ?
- `0x2AAA273B` – joeboxserver.exe
- `0x777BE06C` – joeboxcontrol.exe
- `0x954B35E8` – ?
- `0x870E13A2` – ?

#### 文件名检测
Shifu检查以下文件或文件夹是否存在，如果存在则调用`Sleep()`永久休眠：
- `c:samplepos.exe`
- `c:analysissandboxstarter.exe`
- `c:analysis`
- `c:insidetm`
- `c:windowssystem32driversvmmouse.sys`
- `c:windowssystem32driversvmhgfs.sys`
- `c:windowssystem32driversvboxmouse.sys`
- `c:iDEFENSE`
- `c:popupkiller.exe`
- `c:toolsexecute.exe`
- `c:Perl`
- `c:Python27`

#### 调试器检测
调用`IsDebuggerPresent()`检查调试器是否存在，并调用`ZwQueryInformationSystem()`检查`ProcessDebugPort`和`ProcessDebugObjectHandle`。如果检测到调试器，则调用`Sleep()`永久休眠。

#### Wireshark检测
调用`CreateFile()`尝试打开`\\.NPF_NdisWanIp`，如果成功则调用`Sleep()`永久休眠。

#### 自我检验
检查自己的名字长度，如果超过30个字符则调用`Sleep()`永久休眠。同时，使用CRC32哈希值检查自己的进程名：
- `0xE84126B8` – sample.exe
- `0x0A84E285` – ?
- `0x3C164BED` – ?
- `0xC19DADCE` – ?
- `0xA07ACEDD` – ?
- `0xD254F323` – ?
- `0xF3C4E556` – ?
- `0xF8782263` – ?
- `0xCA96016D` – ?

此外，检查自己的进程中是否有来自GFI沙箱的模块：
- `api_log.dll`
- `dir_watch.dll`
- `pstorec.dll`

#### 未知的反分析技巧
使用了一个未知目的的技巧。获取`Process32NextW()`函数的地址，前五个字节与序列`0x33C0C22080`比较：
- `33C0` – XOR EAX, EAX
- `C2 0800` – RETN 8

这些代码只能在32位的Windows XP中使用，因为Unicode版本的函数可能尚未实现。如果检测到该代码序列，则调用`Sleep()`永久休眠。

#### Windows域名校验
使用`NetServerGetinfo()`和`NetWkstaGetInfo()`检查计算机工作组名是否为“WORKGROUP”或“HOME”。如果不是，则永久休眠。接下来，检查是否为“ANALYSERS”，如果是则永久休眠。

#### 计算机和用户名校验
使用`GetComputerName()`和`GetUserName()`获取计算机名和用户名，并检查是否为以下字符串之一：
- `SANDBOX`
- `FORTINET`
- `VIRUS`
- `MALWARE`
- `MALNETVM`

如果发现其中之一，则永久休眠。

#### 进程结束特征
Second stage injector枚举所有运行的进程，将名称转换为小写，并计算CRC32哈希值：
- `0xD2EFC6C4` – python.exe
- `0xE185BD8C` – pythonw.exe
- `0xDE1BACD2` – perl.exe
- `0xF2EAA55E` – autoit3.exe
- `0xB8BED542` – ?

如果匹配到任何一个，则尝试打开进程并结束进程。如果失败，则尝试使用`ZwClose`关闭进程的主窗口句柄。然后以所有权限打开进程，使用`ZwUnmapViewOfSection()`卸载它。最后，关闭被卸载进程的主窗口句柄。

### Main Payload解密、解压和注入
为了对main payload进行解密，second stage injector从`.rsrc`节获取解密算法所需的数据。使用修改版的RC4算法，之前获得的值与256字节数组中的每个字节异或。加密后的数组用于解密位于`.tls`节的main payload。解密后的main payload还使用aPlib库进行了压缩。

如果原始加载器作为中等级或高等级的进程运行，则再次调用计算atom字符串的方法。这次只使用4个字节创建字符串，例如“ae000000”。接下来，计算哈希值并通过从`0x0`到`0xFF`与另一个256字节的数组异或。这个加密的字符串再次用于加密和解密main payload。为了持久性，加密数据被写入注册表键`HKCUsoftwaremicrosoftwindows`，例如`f4e64d63`。同时，“ae000000”也被创建并用空字符串和原始加载器的路径填充。最后，临时加密的main payload再次被解密。

接下来，main payload在内存中被解压。然后，以与父进程相同的完整性级别创建一个挂起的`svchost.exe`（x86）。Main payload被映射到进程中，并修改掉“MZ”。恢复`svchost`进程后，main payload被执行。最后，在`%TEMP%`文件夹中创建一个批处理文件。

### Main Payload 分析
Main payload的模块IAT函数与`0xFF`异或加密，使得静态分析更加困难。`.data`节中的重要字符串也与`0x8D`异或加密。解密后的字符串包括：
- `AddMandatoryAce`
- `ADVAPI`
- `Advapi32.dlladvapi32.dllws2_32.dll`
- `WPUCloseEvent`
- `WPUCloseSocketHandleWPUCreateEvent`
- `WPUCreateSocketHandle`
- `WPUFDIsSet`
- `WPUGetProviderPath`
- `WPUModifyIFSHandle`
- `WPUPostMessage`
- `WPUQueryBlockingCallbackWPUQuerySocketHandleContext`
- `WPUQueueApc`
- `WPUResetEvent`
- `WPUSetEvent`
- `WPUOpenCurrentThreadWPUCloseThread`
- `WSPStartup`
- `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/echo > %1rndel %0`
- `rundll32.exe shell32.dll, ShellExec_RunDLL %s`
- `software\microsoft\windows\currentversion\run`
- `Microsoft\Microsoft AntimalwareSoftware\Coranti`
- `Software\risingSoftware\TrendMicroSoftware\Symantec`
- `Software\ComodoGroup`
- `Software\Network Associates\TVD`
- `Software\Data Fellows\F-SecureSoftware\Eset\Nod`
- `Software\Softed\ViGUARD`
- `Software\Zone Labs\ZoneAlarm`
- `Software\Avg`
- `Software\VBA32`
- `Software\Doctor WebSoftware\G DataSoftware\Avira`
- `Software\AVAST Software\Avast`
- `Software\KasperskyLab\protected`
- `Software\Bitdefender`
- `Software\Panda SoftwareSoftware\Sophos.bat|$$$}rstuvwxyz{$$$$$$$>?@ABCDEFGHIJKLMNOPQRSTUVW$$$$$$XYZ[\]^_`abcdefghijklmnop
- `q`
- `\\.\%C:`
- `conhost`
- `CreateProcessInternalW`
- `ConvertStringSecurityDescriptorToSecurityDescriptorWContent-Type: application/x-www-form-urlencodedrn`
- `Content-Type: multipart/form-data; boundary=---------------------------%srn`
- `Host: %srn%d.%d.%d.%d`
- `%d.%d.%d.%d.%x`
- `%temp%\debug_file.txt`
- `[%u][%s:%s:%u][0x%x;0x%x] %sDnsFlushResolverCache`
- `\*.*`
- `dnsapi.dll`
- `DnsGetCacheDataTable.dll.exedownload.windowsupdate.com`
- `vk.com`
- `yandex.ru`
- `HTTP/1.1https://http://%s`
- `IsWow64Process`
- `kernel`
- `kernel32.dllLdrGetProcedureAddress`
- `Microsoft`
- `NtAllocateVirtualMemory`
- `CLOSED`
- `LAST_ACKTIME_WAIT`
- `DELETE_TCB`
- `LISTEN`
- `SYN_SENTSYN_RCVDESTAB`
- `FIN_WAIT1`
- `FIN_WAIT2`
- `CLOSE_WAIT`
- `CLOSING`
- `TCPt%s:%dt%s:%dt%sn`
- `netstatnPrototLocal addresstRemote addresstStaten`
- `ntdll.dll`
- `NtResumeProcess`
- `NtSuspendProcess\\?\globalroot\systemroot\system32\drivers\null.sys`
- `NtWriteVirtualMemoryopenRegisterApplicationRestart`
- `RtlCreateUserThread`
- `ResetSR`
- `RtlComputeCrc32`
- `rundll32SeDebugPrivilegeSystemDrive`
- `\StringFileInfo\%04x%04x\ProductName`