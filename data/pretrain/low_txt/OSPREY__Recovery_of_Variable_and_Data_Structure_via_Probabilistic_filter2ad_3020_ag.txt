以下是经过优化后的参考文献列表，使其更加清晰、连贯和专业：

---

**参考文献**

[1] Balakrishnan, G., & Reps, T. (2019). Wysinwyx: What you see is not what you execute. *ACM Transactions on Programming Languages and Systems (TOPLAS)*, 32(6), 1–84.

[2] Balakrishnan, G., & Reps, T. (2010). Wysinwyx: What you see is not what you execute. *ACM Transactions on Programming Languages and Systems (TOPLAS)*, 32(6), 1–84.

[3] National Security Agency. (2019). Nationalsecurityagency/ghidra. [Online]. Available: https://github.com/NationalSecurityAgency/ghidra/blob/master/Ghidra/Features/Decompiler/ghidra_scripts/CreateStructure.java#L25

[4] De Cristofaro, E., Bohli, J.-M., & Westhoff, D. (2009). Fair: Fuzzy-based aggregation providing in-network resilience for real-time wireless sensor networks. In *Proceedings of the Second ACM Conference on Wireless Network Security* (pp. 253–260).

[5] Rawat, S., Jain, V., Kumar, A., Cojocar, L., Giuffrida, C., & Bos, H. (2017). Vuzzer: Application-aware evolutionary fuzzing. In *NDSS*, vol. 17 (pp. 1–14).

[6] Peng, H., Shoshitaishvili, Y., & Payer, M. (2018). T-fuzz: Fuzzing by program transformation. In *2018 IEEE Symposium on Security and Privacy (SP)* (pp. 697–710). IEEE.

[7] American fuzzy lop (AFL). (2020). [Online]. Available: http://lcamtuf.coredump.cx/afl

[8] She, D., Pei, K., Epstein, D., Yang, J., Ray, B., & Jana, S. (2019). NEUZZ: Efficient fuzzing with neural program smoothing. In *2019 IEEE Symposium on Security and Privacy, SP 2019, San Francisco, CA, USA, May 19-23, 2019* (pp. 803–817).

[9] Cadar, C., Dunbar, D., & Engler, D. R. (2008). KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs. In *8th USENIX Symposium on Operating Systems Design and Implementation, OSDI 2008, December 8-10, 2008, San Diego, California, USA, Proceedings* (pp. 209–224).

[10] Ge, X., Taneja, K., Xie, T., & Tillmann, N. (2011). Dyta: Dynamic symbolic execution guided with static verification results. In *Proceedings of the 33rd International Conference on Software Engineering, ICSE 2011, Waikiki, Honolulu, HI, USA, May 21-28, 2011* (pp. 992–994). ACM.

[11] Chen, J., Hu, W., Zhang, L., Hao, D., Khurshid, S., & Zhang, L. (2018). Learning to accelerate symbolic execution via code transformation. In *32nd European Conference on Object-Oriented Programming, ECOOP 2018, July 16-21, 2018, Amsterdam, The Netherlands, ser. LIPIcs, T. D. Millstein, Ed.*, vol. 109 (pp. 6:1–6:27). Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik.

[12] Person, S., Yang, G., Rungta, N., & Khurshid, S. (2011). Directed incremental symbolic execution. *ACM SIGPLAN Notices*, 46(6), 504–515.

[13] Chipounov, V., Kuznetsov, V., & Candea, G. (2011). S2E: A platform for in-vivo multi-path analysis of software systems. In *Proceedings of the 16th International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS 2011, Newport Beach, CA, USA, March 5-11, 2011* (pp. 265–278).

[14] Livshits, B., Nori, A. V., Rajamani, S. K., & Banerjee, A. (2009). Merlin: Specification inference for explicit information flow problems. *ACM Sigplan Notices*, 44(6), 75–86.

[15] Miller, K., Kwon, Y., Sun, Y., Zhang, Z., Zhang, X., & Lin, Z. (2019). Probabilistic disassembly. In *2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)* (pp. 1187–1198). IEEE.

[16] Khadra, M. A. B., Stoffel, D., & Kunz, W. (2016). Speculative disassembly of binary code. In *2016 International Conference on Compilers, Architectures, and Synthesis of Embedded Systems (CASES)* (pp. 1–10). IEEE.

[17] Kruegel, C., Robertson, W., Valeur, F., & Vigna, G. (2004). Static disassembly of obfuscated binaries. In *USENIX Security Symposium, vol. 13* (pp. 18–18).

[18] Popa, M. (2012). Binary code disassembly for reverse engineering. *Journal of Mobile, Embedded and Distributed Systems*, 4(4), 233–248.

[19] Flores-Montoya, A., & Schulte, E. (2020). Datalog disassembly. In *29th {USENIX} Security Symposium ({USENIX} Security 20)*.

[20] Loeliger, H.-A., Dauwels, J., Hu, J., Korl, S., Ping, L., & Kschischang, F. R. (2007). The factor graph approach to model-based signal processing. *Proceedings of the IEEE*, 95(6), 1295–1322.

[21] Beckman, N. E., & Nori, A. V. (2011). Probabilistic, modular and scalable inference of typestate specifications. In *Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation* (pp. 211–221).

[22] Xu, Z., Zhang, X., Chen, L., Pei, K., & Xu, B. (2016). Python probabilistic type inference with natural language support. In *Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering* (pp. 607–618).

[23] Kremenek, T., Twohey, P., Back, G., Ng, A., & Engler, D. (2006). From uncertainty to belief: Inferring the specification within. In *Proceedings of the 7th Symposium on Operating Systems Design and Implementation* (pp. 161–176).

[24] Yedidia, J. S., Freeman, W. T., & Weiss, Y. (2001). Generalized belief propagation. In *Advances in Neural Information Processing Systems* (pp. 689–695).

[25] Felzenszwalb, P. F., & Huttenlocher, D. P. (2006). Efficient belief propagation for early vision. *International Journal of Computer Vision*, 70(1), 41–54.

[26] Murphy, K., Weiss, Y., & Jordan, M. I. (2013). Loopy belief propagation for approximate inference: An empirical study. *arXiv preprint arXiv:1301.6725*.

[27] Kahle, D., Savitsky, T., Schnelle, S., & Cevher, V. (2008). Junction tree algorithm. *Stat*, 631.

[28] GNU Project. (2019). Coreutils. [Online]. Available: https://www.gnu.org/software/coreutils/

[29] Brumley, D., Jager, I., Avgerinos, T., & Schwartz, E. J. (2011). BAP: A binary analysis platform. In *International Conference on Computer Aided Verification* (pp. 463–469). Springer.

[30] Andriesse, D., Chen, X., Van Der Veen, V., Slowinska, A., & Bos, H. (2016). An in-depth analysis of disassembly on full-scale x86/x64 binaries. In *25th {USENIX} Security Symposium ({USENIX} Security 16)* (pp. 583–600).

[31] Purdue University. (2020). Osprey. [Online]. Available: https://www.cs.purdue.edu/homes/zhan3299/proj/osprey

[32] Wikipedia. (2020). F1 score. [Online]. Available: https://en.wikipedia.org/wiki/F1_score

[33] Serebryany, K., Bruening, D., Potapenko, A., & Vyukov, D. (2012). AddressSanitizer: A fast address sanity checker. In *Presented as part of the 2012 {USENIX} Annual Technical Conference ({USENIX}{ATC} 12)* (pp. 309–318).

[34] Dinesh, S. (2019). Retrowrite: Statically instrumenting COTS binaries for fuzzing and sanitization. Ph.D. dissertation, Purdue University Graduate School.

[35] National Vulnerability Database. (2019). CVE-2019-12802. [Online]. Available: https://nvd.nist.gov/vuln/detail/CVE-2019-12802

[36] Lee, J., Avgerinos, T., & Brumley, D. (2011). TIE: Principled reverse engineering of types in binary programs. In *Proceedings of the Network and Distributed System Security Symposium, NDSS 2011, San Diego, California, USA, 6th February - 9th February 2011*.

[37] Sutter, B. D., Bus, B. D., Bosschere, K. D., Keyngnaert, P., & Demoen, B. (2000). On the static analysis of indirect control transfers in binaries. In *Proceedings of the International Conference on Parallel and Distributed Processing Techniques and Applications, PDPTA 2000, June 24-29, 2000, Las Vegas, Nevada, USA*.

[38] Theiling, H. (2000). Extracting safe and precise control flow from binaries. In *7th International Workshop on Real-Time Computing and Applications Symposium (RTCSA 2000), 12-14 December 2000, Cheju Island, South Korea* (pp. 23–30).

[39] Slowinska, A., Stancescu, T., & Bos, H. (2011). Howard: A dynamic excavator for reverse engineering data structures. In *Proceedings of the Network and Distributed System Security Symposium, NDSS 2011, San Diego, California, USA, 6th February - 9th February 2011*.

[40] Kolbitsch, C., Holz, T., Kruegel, C., & Kirda, E. (2010). Inspector gadget: Automated extraction of proprietary gadgets from malware binaries. In *31st IEEE Symposium on Security and Privacy, S&P 2010, 16-19 May 2010, Berkeley/Oakland, California, USA* (pp. 29–44).

[41] Nguyen, M. H., Nguyen, T. B., Quan, T. T., & Ogawa, M. (2013). A hybrid approach for control flow graph construction from binary code. In *20th Asia-Pacific Software Engineering Conference, APSEC 2013, Ratchathewi, Bangkok, Thailand, December 2-5, 2013 - Volume 2* (pp. 159–164).

[42] He, W., Golla, M., Padhi, R., Ofek, J., Dürmuth, M., Fernandes, E., & Ur, B. (2018). Rethinking access control and authentication for the home internet of things (IoT). In *27th {USENIX} Security Symposium ({USENIX} Security 18)* (pp. 255–272).

[43] Gustafson, E., Muench, M., Spensky, C., Redini, N., Machiry, A., Fratantonio, Y., Balzarotti, D., Francillon, A., Choe, Y. R., Kruegel, C., et al. (2019). Toward the analysis of embedded firmware through automated rehosting. In *22nd International Symposium on Research in Attacks, Intrusions and Defenses ({RAID} 2019)* (pp. 135–150).

[44] Hernandez, G., Fowze, F., Tian, D., Yavuz, T., & Butler, K. R. (2017). FirmUSB: Vetting USB device firmware using domain informed symbolic execution. In *Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security* (pp. 2245–2262).

[45] Jansen, K., Schäfer, M., Moser, D., Lenders, V., Pöpper, C., & Schmitt, J. (2018). Crowd-GPS-Sec: Leveraging crowdsourcing to detect and localize GPS spoofing attacks. In *2018 IEEE Symposium on Security and Privacy (SP)* (pp. 1018–1031). IEEE.

[46] Freed, D., Havron, S., Tseng, E., Gallardo, A., Chatterjee, R., Ristenpart, T., & Dell, N. (2019). "Is my phone hacked?" Analyzing clinical computer security interventions with survivors of intimate partner violence. *Proceedings of the ACM on Human-Computer Interaction*, 3(CSCW), 1–24.

[47] Cho, H., Zhang, P., Kim, D., Park, J., Lee, C.-H., Zhao, Z., Doupé, A., & Ahn, G.-J. (2018). Prime+Count: Novel Cross-world Covert Channels on ARM TrustZone. In *Proceedings of the Annual Computer Security Applications Conference (ACSAC)*, Dec. 2018.

[48] Kocher, P., Horn, J., Fogh, A., Genkin, D., Gruss, D., Haas, W., Hamburg, M., Lipp, M., Mangard, S., Prescher, T., et al. (2019). Spectre attacks: Exploiting speculative execution. In *2019 IEEE Symposium on Security and Privacy (SP)* (pp. 1–19). IEEE.

[49] Reina, A., Fattori, A., Pagani, F., Cavallaro, L., & Bruschi, D. (2012). When hardware meets software: A bulletproof solution to forensic memory acquisition. In *Proceedings of the 28th Annual Computer Security Applications Conference* (pp. 79–88).

[50] Schwarz, M., & Fogh, A. (2016). DRAMA: How your DRAM becomes a security problem.

[51] Demetrio, L., Biggio, B., Lagorio, G., Roli, F., & Armando, A. (2019). Explaining vulnerabilities of deep learning to adversarial malware binaries. *arXiv preprint arXiv:1901.03583*.

[52] Schwarz, M., Gruss, D., Lipp, M., Maurice, C., Schuster, T., Fogh, A., & Mangard, S. (2018). Automated detection, exploitation, and elimination of double-fetch bugs using modern CPU features. In *Proceedings of the 2018 on Asia Conference on Computer and Communications Security* (pp. 587–600).

[53] Lee, H., Song, C., & Kang, B. B. (2018). Lord of the x86 rings: A portable user mode privilege separation architecture on x86. In *Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security* (pp. 1441–1454).

[54] Andriesse, D., Chen, X., van der Veen, V., Slowinska, A., & Bos, H. (2016). An in-depth analysis of disassembly on full-scale x86/x64 binaries. In *25th USENIX Security Symposium, USENIX Security 16, Austin, TX, USA, August 10-12, 2016* (pp. 583–600).

[55] Geldenhuys, J., Dwyer, M. B., & Visser, W. (2012). Probabilistic symbolic execution. In *International Symposium on Software Testing and Analysis, ISSTA 2012, Minneapolis, MN, USA, July 15-20, 2012* (pp. 166–176).

[56] Borges, M., Filieri, A., d’Amorim, M., & Pasareanu, C. S. (2015). Iterative distribution-aware sampling for probabilistic symbolic execution. In *Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2015, Bergamo, Italy, August 30 - September 4, 2015* (pp. 866–877).

[57] Kwiatkowska, M. Z., Norman, G., & Parker, D. (2011). PRISM 4.0: Verification of probabilistic real-time systems. In *Computer Aided Verification - 23rd International Conference, CAV 2011, Snowbird, UT, USA, July 14-20, 2011. Proceedings* (pp. 585–591).

[58] Filieri, A., Ghezzi, C., & Tamburrelli, G. (2011). Run-time efficient probabilistic model checking. In *Proceedings of the 33rd International Conference on Software Engineering, ICSE 2011, Waikiki, Honolulu, HI, USA, May 21-28, 2011* (pp. 341–350).

[59] Donaldson, A. F., Miller, A., & Parker, D. (2009). Language-level symmetry reduction for probabilistic model checking. In *QEST 2009, Sixth International Conference on the Quantitative Evaluation of Systems, Budapest, Hungary, 13-16 September 2009* (pp. 289–298).

[60] Miller, K. A., Kwon, Y., Sun, Y., Zhang, Z., Zhang, X., & Lin, Z. (2019). Probabilistic disassembly. In *Proceedings of the 41st International Conference on Software Engineering, ICSE 2019, Montreal, QC, Canada, May 25-31, 2019* (pp. 1187–1198).

[61] Xu, Z., Zhang, X., Chen, L., Pei, K., & Xu, B. (2016). Python probabilistic type inference with natural language support. In *Proceedings of the 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2016, Seattle, WA, USA, November 13-18, 2016* (pp. 607–618).

[62] Xie, T., Tillmann, N., De Halleux, J., & Schulte, W. (2009). Fitness-guided path exploration in dynamic symbolic execution. In *2009 IEEE/IFIP International Conference on Dependable Systems & Networks* (pp. 359–368). IEEE.

[63] Peng, F., Deng, Z., Zhang, X., Xu, D., Lin, Z., & Su, Z. (2014). X-Force: Force-executing binary programs for security applications. In *Proceedings of the 23rd USENIX Security Symposium, San Diego, CA, USA, August 20-22, 2014* (pp. 829–844).

[64] You, W., Zhang, Z., Kwon, Y., Aafer, Y., Peng, F., Shi, Y., Harmon, C., & Zhang, X. (2020). PMP: Cost-effective forced execution with probabilistic memory pre-planning. In *2020 IEEE Symposium on Security and Privacy (SP)* (pp. 381–398).

[65] Aho, A. V., & Ullman, J. D. (1977). *Principles of Compiler Design*. Addison-Wesley.

[66] Lattner, C., & Adve, V. (2004). LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation. In *Proceedings of the 2004 International Symposium on Code Generation and Optimization (CGO’04), Palo Alto, California, Mar 2004*.

[67] Intel Corporation. (2012). Pin - a dynamic binary instrumentation tool. [Online]. Available: https://software.intel.com/content/www/us/en/develop/articles/pin-a-dynamic-binary-instrumentation-tool.html

[68] Zhao, P., & Amaral, J. N. (2005). Function outlining and partial inlining. In *17th International Symposium on Computer Architecture and High Performance Computing (SBAC-PAD’05)* (pp. 101–108).

[69] Wikipedia. (2020). Fortune (Unix). [Online]. Available: https://en.wikipedia.org/wiki/Fortune_(Unix)

---

**附录**

**A. 现有技术的局限性**

Howard [14] 也是基于动态分析的技术。它通过启发式方法改进了 REWARDS，以解决冲突的结果。例如，它更倾向于具有字段的数据结构，而不是单一的标量变量。因此，128 位浮点值复制的问题得到了更好的处理。

---

希望这些优化能够使您的文本更加清晰、连贯和专业。如果有任何进一步的需求或修改，请告诉我！