---
title: Materialized Views Policies
description: This article provides an in-depth look at the policies applicable to materialized views in Azure Data Explorer.
ms.reviewer: yifats
ms.topic: reference
ms.date: 04/30/2023
---

# Materialized Views Policies

This document outlines the various policies that can be configured for materialized views in Azure Data Explorer. These policies help manage data retention, caching, partitioning, and security, ensuring optimal performance and data integrity.

## Retention and Caching Policy

Materialized views in Azure Data Explorer inherit the [retention policy](../retention-policy.md) and [caching policy](../cache-policy.md) from their parent database by default. These policies can be customized using [retention policy management commands](../show-table-retention-policy-command.md) and [caching policy management commands](../show-table-cache-policy-command.md).

### Key Points:
- **Retention and Caching Policies**: These policies are applied only to the *materialized part* of the materialized view. For a detailed explanation of the *materialized part* and *delta part*, refer to [how materialized views work](materialized-view-overview.md#how-materialized-views-work).
- **Caching Example**: If a materialized view has a caching policy set to 7 days (7d), but its source table has a caching policy of 0 days (0d), queries on the materialized view may still result in disk misses due to the involvement of the source table's *delta part*.
- **Retention Policy Independence**: The retention policy of the materialized view is independent of the source table's retention policy. It is recommended to set a minimum retention policy of a few days on the source table, with recoverability enabled, to facilitate quick recovery and diagnostics.
- **Zero Retention Policy**: A zero retention policy on the source table is not supported.
- **Extent Creation Time**: Both the retention and caching policies depend on the extent creation time, which is determined by the last update of a record in the materialized view.

> [!NOTE]
> The materialization process aims to minimize updates to the materialized part of the view. For instance, in a `take_any(*)` aggregation, new records with the same group-by keys will not be re-ingested, and the retention policy will be based on the earliest ingested record.

## Partitioning Policy

A [partitioning policy](../partitioning-policy.md) can be configured for a materialized view. This is particularly useful when most or all queries filter by one of the materialized view's group-by keys, such as in multi-tenant solutions where the tenant identifier (e.g., `tenantId`, `customerId`) is a key.

### Key Points:
- **Partitioning Policy Configuration**: Use [partitioning policy commands](../show-table-partitioning-policy-command.md) to modify the partitioning policy of a materialized view.
- **Impact on Extents**: Adding a partitioning policy increases the number of extents in the materialized view, leading to more "work" for the materialization process. For more details, see the extents rebuild process in [how materialized views work](materialized-view-overview.md#how-materialized-views-work).

## Row Level Security Policy

A [row level security policy](../row-level-security-policy.md) can be applied to a materialized view, with certain limitations:

### Key Points:
- **Applicable Aggregations**: The policy can be applied to materialized views using `arg_max()`, `arg_min()`, or `take_any()` aggregation functions, or when the row level security query references the group-by keys of the materialized view.
- **Policy Application Scope**: The policy is applied only to the *materialized part* of the view. If the same policy is not defined on the source table, querying the materialized view may return records that should be hidden by the policy.
- **Consistent Policy Definition**: It is recommended to define the same row level security policy on both the source table and the materialized view, especially for `arg_max()`, `arg_min()`, and `take_any()` aggregations.
- **Error Handling**: Defining a row level security policy on the source table without a corresponding policy on the materialized view will result in an error. To mitigate this, either define the policy on the materialized view or use the `allowMaterializedViewsWithoutRowLevelSecurity` property in the alter policy command. For example:
  ```kusto
  .alter table SourceTable policy row_level_security enable with (allowMaterializedViewsWithoutRowLevelSecurity=true) "RLS_function"
  ```

For more information on configuring a row level security policy, see [row_level_security policy commands](../show-table-row-level-security-policy-command.md).

---

This document provides a comprehensive guide to managing policies for materialized views in Azure Data Explorer, ensuring efficient and secure data handling.