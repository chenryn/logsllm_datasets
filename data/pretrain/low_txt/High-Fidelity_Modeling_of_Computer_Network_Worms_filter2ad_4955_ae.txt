### Packet-Level Modeling and Network Dynamics

Packet-level modeling is essential for capturing many network dynamics and characteristics. This method accounts for a wide range of network behaviors and applications, but it often requires aggregate methods to accommodate the complexity. Emulations, both traditional and constructive, enhance the fidelity of packet-level models by incorporating actual systems into simulated scenarios. However, packet-level simulations are limited in fidelity by the amount of detail included in their models. Emulations, on the other hand, are limited in scalability due to the need for real-time execution to keep up with their real-system components. In scenarios demanding higher levels of fidelity at large scales, alternative methods are necessary.

For example, packet-level simulations generally do not model operating system effects such as process scheduling delays. Other details, like root exploits in worm behavior, are extremely difficult to model at a fine level of detail. Despite these challenges, researchers would greatly benefit from the ability to capture full system effects at large scales. The combination of high fidelity and large scale cannot be achieved by existing packet-level or emulation methods. Additionally, modeling at this level of detail involves prohibitively expensive development efforts, which can approach the effort required to build the real systems themselves.

### Virtualization Technology

Virtualization is an approach that allows a software system designed for one platform to execute on a different platform. For instance, while the Linux operating system (OS) is originally designed to run directly on native hardware, virtualization technology enables it to run on top of another "host" OS. The host system provides a virtual platform layer to make the hosted system oblivious to the changed environment. Virtualization technology is gaining significant attention, with many systems being virtualized. It is now possible to boot multiple Windows OS instances as processes hosted by another Windows OS instance, and similar capabilities exist for Linux and other systems. With optimizations, virtualized systems can achieve acceptable performance.

### High-Fidelity Models and Virtualization

In the context of high-fidelity computer worm modeling, virtualization technology can resolve the traditional conflict between scalability and fidelity. Imagine an internet that operates on virtual (simulation) clocks rather than real-time clocks. Such a network retains the highest fidelity level and is decoupled from real-time constraints. This virtual network can be achieved by modeling network links and routers using traditional packet-level (parallel/distributed) network simulators. End-hosts are modeled as real systems with full-featured operating systems and file systems, but they are executed in virtualized environments. Unlike emulation systems where end-hosts run on real hardware, virtualized end-hosts are under the control of a virtual host, allowing them to be controlled at will. Since the network is executed as a simulation, its execution is also controllable.

Two key issues remain: communication and timing. Network communication can be managed by converting packet exchanges into simulation time-stamped events. Timing, however, is more complex. To fully virtualize the entire set of network and end-hosts, it is necessary to synchronize their execution with simulation time. Without proper synchronization, the system would face the original real-time execution constraint of emulation systems. Instead, time advances are carefully controlled by the simulation clock. When a virtual OS instance queries the hardware clock value, the host OS supplies the simulation clock value. Elapsed time is estimated using techniques like Direct Execution. The simulation clock is synchronized across parallel network simulators and virtual system hosts using standard parallel/distributed discrete event simulation techniques. The net effect is that all components of the entire system are lifted away from real-time and placed on a controllable virtual timeline.

### Related Work

Recent emulation efforts are moving towards virtualization. For example, Netbed/EmuLab has added support for virtual nodes to multiplex more than one end-host or router on the same physical resource. Our work differs in that we aim to virtualize the entire system, including end-hosts and routers. This involves remapping the real-time of virtualized end-hosts to simulation time synchronized with the network (routers). In existing emulation/live methods, end-hosts are paced by real-time, whether they are multiplexed or not. Due to this requirement and other factors, existing methods are typically difficult to scale beyond a few hundred end-hosts.

### Implementation Systems

A range of virtualization alternatives is becoming available for production use, and any level of virtualization (processor, OS sandbox/jail, etc.) can be chosen. User Mode Linux can host multiple Linux instances as processes. Revirt is an optimized Linux virtualization system with very low overheads. Other examples include the VMware virtual machine framework and the SIMICS virtual processor-simulator, both of which can boot unmodified OSs. Any of these platforms can be used to achieve full system virtualization. When integrated with parallel packet-level network simulators, unprecedented levels of fidelity combined with arbitrary scalability for computer worm modeling are enabled. While virtualized systems can incur significant memory and runtime overheads, they represent the only choice when absolute scalability and high-fidelity are essential.

### Conclusions and Future Work

Current worm and network security modeling are done at either low fidelity or low scale. Few models can simulate the effects of worms on networks with complex topologies in sufficient detail to capture effects like congestion. Recent advances in packet-level network simulations have enabled the possibility of modeling worms at increased fidelity. We have demonstrated this by developing packet-level worm models and performing some of the largest packet-level simulations of worm propagation to date. Using these models, we are investigating the validation of results from epidemic models, especially for pathological malware like Warhol worms.

We have also created a unique ability to interface simulated nodes with real nodes, allowing us to test actual defense installations with large-scale simulated attacks. As an application of this approach, we can subject actual honeypot installations to large-scale packet-level models of worm propagation. We are exploring the use of this system to test defenses such as automated patching of infected hosts.

For the highest levels of modeling fidelity, such as those employing full-fledged OS functionality on end-hosts, we propose an approach using a fully virtualized system. In this direction, we are exploring the use of User Mode Linux to run entire Linux instances in large-scale worm experiments.

### Acknowledgements

This work has been supported in part by DARPA contract N66001-00-1-8934. We would like to thank Dr. Richard Fujimoto for his support and Ram Kumar Gandhapuneni for initiating the million-node TCP scenario execution.

### References

[1] A. Vahdat, et al., "Scalability and Accuracy in a Large-Scale Network Emulator," Operating System Design and Implementation (OSDI), 2002.
[2] B. White, et al., "An Integrated Experimental Environment for Distributed Systems and Networks," Fifth Symposium on Operating Systems Design and Implementation, 2002.
[3] R. Durst, et al., "Testing and evaluating computer intrusion detection systems," in Communications of the ACM, vol. 42, 1999, pp. 53-61.
[4] DETER-Project, "Cyber Defense Technology Experimental Research (DETER) Network", 2004/05/31, www.isi.edu/deter/.
[5] G. F. Riley, et al., "A Federated Approach to Distributed Network Simulation," ACM Transactions on Modeling and Computer Simulation, vol. 14, pp. 116-148, 2004.
[6] B. K. Szymanski, Y. Liu, and R. Gupta, "Parallel Network Simulation under Distributed Genesis," 17th Workshop on Parallel and Distributed Simulation, 2003.
[7] K. S. Perumalla, et al., "Scalable RTI-based Parallel Simulation of Networks," Workshop on Parallel and Distributed Simulation, 2003.
[8] R. M. Fujimoto, et al., "Large-Scale Network Simulation -- How Big?  How Fast?," IEEE/ACM International Symposium on Modeling, Analysis and Simulation of Computer Telecommunication Systems (MASCOTS), 2003.
[9] C. Kiddle, et al., "Hybrid Packet/Fluid Flow Network Simulation," IEEE/ACM Workshop on Parallel and Distributed Simulation (PADS), 2003.
[10] Y. Guo, W. Gong, and D. Towsley, "Time-Stepped Hybrid Simulation for Large Scale Networks," INFOCOM, 2000.
[11] S. Staniford, V. Paxson, and N. Weaver, "How to Own the Internet in Your Spare Time," USENIX Security Symposium, 2002.
[12] M. Liljenstam, et al., "A Mixed Abstraction Level Simulation Model of Large-scale Internet Worm Infestations," International Symposium on Modeling, Analysis and Simulation of Computer and Telecommunication Systems (MASCOTS), 2002.
[13] D. Nicol, M. Liljenstam, and J. Liu, "Multiscale Modeling and Simulation of Worm Effects on the Internet Routing Infrastructure," International Conference on Modeling Techniques and Tools for Computer Performance Evaluation (Performance TOOLS), 2003.
[14] A. Hussain, J. Heidemann, and C. Papadopoulos, "A framework for classifying denial of service attacks," Applications, technologies, architectures, and protocols for computer communications, 2003.
[15] C. C. Zou, et al., "Monitoring and Early Warning for Internet Worms," ACM Conference on Computer and Communication Security (CCS), 2003.
[16] G. F. Riley, "The Georgia Tech Network Simulator (GTNetS)", 2004/05/31, www.ece.gatech.edu/research/labs/MANIACS/GTNetS/.
[17] G. F. Riley, "PDNS - Parallel/Distributed NS", 2004/05/31, www.cc.gatech.edu/computing/compass/pdns/.
[18] D. Nicol and J. Liu, "Dartmouth Scalable Simulation Framework (DaSSF)", 2004/05/31, http://www.cs.dartmouth.edu/~jasonliu/projects/ssf/.
[19] Monirul Islam and George F. Riley, Personal Communication.
[20] K. S. Perumalla, et al., "Experiences Applying Parallel and Interoperable Network Simulation Techniques in On-Line Simulations of Military Networks," 16th Workshop on Parallel and Distributed Simulation, 2002.
[21] J. Zhou, et al., "MAYA: Integrating hybrid network modeling to the physical world," ACM Transactions on Modeling and Computer Simulation, vol. 14, pp. 149-169, 2004.
[22] N. Provos, "A Virtual Honeypot Framework," USENIX Security Symposium, 2004.
[23] N. Provos, "Developments of the Honeyd Virtual Honeypot", 2004/05/31, http://www.honeyd.org.
[24] Honeypots.Net, "Honeypots, Intrusion Detection, Incident Response", 2004/05/31, http://www.honeypots.net.
[25] R. Russell, "Netfilter: Firewalling, NAT and Packet-Mangling for Linux 2.4", 2002/09/20, www.netfilter.org.
[26] R. M. Fujimoto, "Parallel Discrete Event Simulation," Communications of the ACM, vol. 33, pp. 30-53, 1990.
[27] P. Dickens, P. Heidelberger, and D. M. Nicol, "Parallelized Direct Execution Simulation of Message-Passing Programs," IEEE Transactions on Parallel and Distributed Systems, vol. 7, pp. 1090-1105, 1996.
[28] S. Guruprasad, et al., "Scaling Network Emulation with Multiplexed Virtual Resources," SIGCOMM 2003 (Poster Abstracts), 2003.