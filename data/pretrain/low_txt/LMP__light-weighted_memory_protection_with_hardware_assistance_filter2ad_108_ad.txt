### kBouncer and ROPecker: Heuristic Mitigation of ROP Attacks

kBouncer [26] utilizes the Last Branch Record (LBR) x86 register, which stores recent branches executed by the CPU. It validates whether the return address points to an instruction following a call instruction, thus providing a heuristic mitigation against Return-Oriented Programming (ROP) attacks. Similarly, ROPecker [6] employs the LBR register and a similar policy, but it also incorporates static analysis to speculate future program execution. This additional layer of defense aims to prevent the execution of ROP gadgets, although it is still vulnerable to bypasses [12].

### ROPGuard: Protecting Against Heap-Based ROP Payloads

ROPGuard [16] proposes checking if the stack pointer points to a memory address outside the stack, thereby preventing ROP attackers from executing payloads on the heap. However, adversaries can still modify the stack pointer before the target function is called, rendering this approach vulnerable. These defenses are also susceptible to attacks that leverage hooks and hide malicious code within non-control data [36], especially if critical memory regions are not protected at runtime.

### O-CFI: Randomization and MPX for Control-Flow Integrity

O-CFI [25] explores randomization to conceal the program's control-flow graph and uses Intel's Memory Protection Extensions (MPX) for bound-checking branch instructions. Despite these measures, O-CFI remains a coarse-grained Control-Flow Integrity (CFI) method, providing only probabilistic security guarantees because it does not fully protect function return addresses.

### Our Approach: LMP

Our Lightweight Memory Protection (LMP) approach adheres to the original CFI policy for backward-edge protection, ensuring that every function return address points to the correct caller. For forward-edge CFI protection, VTV [34] identifies that over 90% of indirect calls are virtual calls and aims to protect Virtual Tables (VTables) from being hijacked. VTrust [40] and VTable Interleaving [3] improve VTV's performance without requiring a global class hierarchy, effectively preventing VTable hijacking attacks. Our LMP system does not provide forward-edge CFI protection, but it can be easily integrated with the mentioned approaches by applying patches to the LMP-enabled compiler, thus enabling full CFI protection.

### CFI Variants and Security Targets

Various CFI variants have been proposed with different security objectives. Original CFI techniques have been used for software-based fault isolation (S-FI) [39]. XFI [14] leverages debugging information in Windows PDB files to defend against ROP attacks. Data-Flow Integrity (DFI) [4] follows a CFI approach to prevent non-control data attacks. HyperSafe [38] offers fine-grained CFI protection, maintaining a target table for indirect branches to ensure hypervisor control-flow integrity.

### Code-Pointer Integrity (CPI)

Code-Pointer Integrity (CPI) [23] divides process memory into safe and regular regions. Through static analysis, memory objects with pointers, including code and data pointers, are placed in the safe region to protect against illegal tampering. However, CPI's safe memory region is not well-protected, as noted in [15]. The core idea of LMP is to protect the memory region where shadow stacks are located. We use new hardware features for fast memory boundary checking to ensure effective and efficient protection of the allocated shadow stack region.

### Hardware-Based CFI Approaches

Recent hardware-based CFI approaches, such as HCFI [8] and HAFIX [11], have been implemented on customized FPGA boards or SPARC embedded systems. In contrast, LMP is the first system with hardware-assisted memory protection compatible with commercially available CPUs and other hardware. Intel's Control-Flow Enforcement Technology (CET) [21] introduces a new exception class (#CP) and the ENDBRANCH ISA instruction to mark legal targets for indirect branches. CET also uses hardware protections to limit access to the shadow stack, but as it was recently announced, we cannot yet evaluate its overhead compared to LMP.

### Conclusion

Memory protection is crucial for defending against memory corruption attacks. Without proper protection of the shadow stack, CFI approaches are generally insecure. Our work proposes a lightweight memory protection system to prevent tampering with return addresses in the shadow stack. By leveraging recent MPX hardware features, our approach ensures low overhead while allowing only legal accesses to the protected region. Future work will focus on extending LMP protection to forward edges and exploring the possibility of applying LMP without recompilation, such as using binary rewriting for shadow stack functions.

### Acknowledgements

We would like to thank Professor Ding Yuan, Mariana D’Angelo, Michelle Wong, Beom Heyn Kim, Afshar Ganjali, Sukwon Oh, Diego Bravo Velasquez, and Peter Sun for their valuable feedback. We also thank the anonymous reviewers for their comments and help in improving the quality of this paper. This research was supported by an NSERC Discovery Grant.

### References

[1] Abadi, M., Budiu, M., Erlingsson, U., and Ligatti, J. Control-ﬂow integrity. In Proceedings of the 12th ACM Conference on Computer and Communications Security (Alexandria, Virginia, 2005).

[2] Andersen, S., and Abella, V. Data execution prevention. https://technet.microsoft.com/en-us/library/bb457155.aspx, 2004. Last accessed: 2016-09-01.

[3] Bounov, D., Kici, R. G., and Lerner, S. Protecting C++ dynamic dispatch through VTable interleaving. In Proceedings of the 23rd Annual Networked & Distributed System Security Symposium (NDSS) (San Diego, California, 2016).

[4] Castro, M., Costa, M., and Harris, T. Securing software by enforcing data-ﬂow integrity. In Proceedings of the 7th Symposium on Operating Systems Design and Implementation (Seattle, Washington, 2006).

[5] Checkoway, S., Davi, L., Dmitrienko, A., Sadeghi, A.-R., Shacham, H., and Winandy, M. Return-oriented programming without returns. In Proceedings of the 17th ACM Conference on Computer and Communications Security (Chicago, Illinois, 2010).

[6] Cheng, Y., Zhou, Z., Yu, M., Ding, X., and Deng, R. ROPecker: A generic and practical approach for defending against rop attacks. In Proceedings of the 21st Annual Networked & Distributed System Security Symposium (NDSS) (San Diego, California, 2014).

[7] Chiueh, T.-C., and Hsu, F.-H. RAD: A compile-time solution to buffer overflow attacks. In Proceedings of the 21st International Conference on Distributed Computing Systems (Washington, DC, 2001).

[8] Christoulakis, N., Christou, G., Athanasopoulos, E., and Ioannidis, S. HCFI: Hardware-enforced control-ﬂow integrity. In Proceedings of the 6th ACM Conference on Data and Application Security and Privacy (2016).

[9] Criswell, J., Dautenhahn, N., and Adve, V. Virtual Ghost: Protecting applications from hostile operating systems. In Proceedings of the 19th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS) (Salt Lake City, Utah, 2014).

[10] Dang, T. H., Maniatis, P., and Wagner, D. The performance cost of shadow stacks and stack canaries. In Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security (Singapore, 2015).

[11] Davi, L., Hanreich, M., Paul, D., Sadeghi, A.-R., Koeberl, P., Sullivan, D., Arias, O., and Jin, Y. HAFIX: Hardware-assisted ﬂow integrity extension. In Proceedings of the 52nd Annual Design Automation Conference (2015).

[12] Davi, L., Sadeghi, A.-R., Lehmann, D., and Monrose, F. Stitching the gadgets: On the ineﬀectiveness of coarse-grained control-ﬂow integrity protection. In Proceedings of the 35th IEEE Symposium on Security and Privacy (San Jose, California, 2014).

[13] Durumeric, Z., Kasten, J., Adrian, D., Halderman, J. A., Bailey, M., Li, F., Weaver, N., Amann, J., Beekman, J., Payer, M., and Paxson, V. The matter of heartbleed. In Proceedings of the 2014 Conference on Internet Measurement Conference (Vancouver, BC, Canada, 2014).

[14] Erlingsson, U., Abadi, M., Vrable, M., Budiu, M., and Necula, G. C. XFI: Software guards for system address spaces. In Proceedings of the 7th Symposium on Operating Systems Design and Implementation (Seattle, Washington, 2006).

[15] Evans, I., Fingeret, S., Gonzalez, J., Otgonbaatar, U., Tang, T., Shrobe, H., Sidiroglou-Douskos, S., Rinard, M., and Okhravi, H. Missing the point(er): On the eﬀectiveness of code pointer integrity. In Proceedings of the 36th IEEE Symposium on Security and Privacy (San Jose, California, 2015).

[16] Fratri´c, I. ROPGuard: Runtime prevention of return-oriented programming attacks. http://www.ieee.hr/download/repository/Ivan Fratric.pdf, 2012. Last accessed: 2016-09-01.

[17] Ganesh, K. Pointer checker: Easily catch out-of-bounds memory accesses. https://software.intel.com/sites/products/parallelmag/singlearticles/issue11/7080 2 IN ParallelMag Issue11 Pointer Checker.pdf. Last accessed: 2016-09-01.

[18] G¨oktas, E., Athanasopoulos, E., Bos, H., and Portokalidis, G. Out of control: Overcoming control-ﬂow integrity. In Proceedings of the 35th IEEE Symposium on Security and Privacy (San Jose, California, 2014).

[19] Hu, H., Shinde, S., Sendroiu, A., Chua, Z. L., Saxena, P., and Liang, Z. Data-oriented programming: On the expressiveness of non-control data attacks. In Proceedings of the 37th IEEE Symposium on Security and Privacy (San Jose, California, 2016).

[20] Hund, R., Willems, C., and Holz, T. Practical timing side channel attacks against kernel space ASLR. In Proceedings of the 34th IEEE Symposium on Security and Privacy (Washington, D.C., 2013).

[21] Intel. Control-ﬂow enforcement technology preview, Document Number: 334525-001, Revision 1.0. https://software.intel.com/sites/default/files/managed/4d/2a/control-ﬂow-enforcement-technology-preview.pdf, June 2016. Last accessed: 2016-09-01.

[22] Kil, C., Jim, J., Bookholt, C., Xu, J., and Ning, P. Address space layout permutation (ASLP): Towards fine-grained randomization of commodity software. In Proceedings of Computer Security Applications Conference (ASAC) (Miami Beach, Florida, 2006).

[23] Kuznetsov, V., Szekeres, L., Payer, M., Candea, G., Sekar, R., and Song, D. Code-pointer integrity. In Proceedings of the 11th USENIX Symposium on Operating Systems Design and Implementation (Broomﬁeld, Colorado, 2014).

[24] Liu, L., Han, J., Gao, D., Jing, J., and Zha, D. Launching return-oriented programming attacks against randomized relocatable executables. In Proceedings of the 10th International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom) (Changsha, China, 2011).

[25] Mohan, V., Larsen, P., Brunthaler, S., Hamlen, K. W., and Franz, M. Opaque control-ﬂow integrity. In Proceedings of the 22nd Annual Networked & Distributed System Security Symposium (NDSS) (San Diego, California, 2015).

[26] Pappas, V., Polychronakis, M., and Keromytis, A. D. Transparent ROP exploit mitigation using indirect branch tracing. In Proceedings of the 22nd USENIX Security Symposium (Washington, D.C., 2013).

[27] PaX-Team. PaX ASLR (address space layout randomization). http://pax.grsecurity.net/docs/aslr.txt, 2003. Last accessed: 2016-09-01.

[28] Pincus, J., and Baker, B. Beyond stack smashing: recent advances in exploiting buffer overruns. IEEE Journal of Security and Privacy 2, 4 (July 2004), 20–27.

[29] Roemer, R., Buchanan, E., Shacham, H., and Savage, S. Return-oriented programming: Systems, languages, and applications. ACM Transaction on Information and System Security 15, 1 (March 2012), 2:1–2:34.

[30] Seibert, J., Okhravi, H., and S¨oderstr¨om, E. Information leaks without memory disclosures: Remote side channel attacks on diversified code. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (2014).

[31] Shacham, H., Page, M., Pfaff, B., Goh, E.-J., Modadugu, N., and Boneh, D. On the effectiveness of address-space randomization. In Proceedings of the 11th ACM Conference on Computer and Communications Security (Washington, D.C., 2004).

[32] Snow, K. Z., Monrose, F., Davi, L., Dmitrienko, A., Liebchen, C., and Sadeghi, A.-R. Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization. In Proceedings of the 34th IEEE Symposium on Security and Privacy (Washington, D.C., 2013).

[33] Strackx, R., Younan, Y., Philippaerts, P., Piessens, F., Lachmund, S., and Walter, T. Breaking the memory secrecy assumption. In Proceedings of the Second European Workshop on System Security (2009).

[34] Tice, C., Roeder, T., Collingbourne, P., Checkoway, S., Erlingsson, U., Lozano, L., and Pike, G. Enforcing forward-edge control-ﬂow integrity in GCC & LLVM. In Proceedings of the 23rd USENIX Security Symposium (San Diego, California, 2014).

[35] Tran, M., Etheridge, M., Bletsch, T., Jiang, X., Freeh, V., and Ning, P. On the expressiveness of return-into-libc attacks. In Proceedings of the 14th International Conference on Recent Advances in Intrusion Detection (Menlo Park, California, 2011).

[36] Vogl, S., Gawlik, R., Garmany, B., Kittel, T., Pfoh, J., Eckert, C., and Holz, T. Dynamic hooks: Hiding control flow changes within non-control data. In Proceedings of the 23rd USENIX Security Symposium (San Diego, California, 2014).

[37] Wahbe, R., Lucco, S., Anderson, T. E., and Graham, S. L. Efficient software-based fault isolation. SIGOPS Operating System Review 27, 5 (Dec. 1993), 203–216.

[38] Wang, Z., and Jiang, X. HyperSafe: A lightweight approach to provide lifetime hypervisor control-ﬂow integrity. In Proceedings of the 31st IEEE Symposium on Security and Privacy (San Jose, California, 2010).

[39] Zeng, B., Tan, G., and Morrisett, G. Combining control-ﬂow integrity and static analysis for efficient and validated data sandboxing. In Proceedings of the 18th ACM Conference on Computer and Communications Security (Chicago, Illinois, 2011).

[40] Zhang, C., Carr, S. A., Li, T., Ding, Y., Song, C., Payer, M., and Song, D. VTrust: Regaining trust on virtual calls. In Proceedings of the 23rd Annual Networked & Distributed System Security Symposium (NDSS) (San Diego, California, 2016).