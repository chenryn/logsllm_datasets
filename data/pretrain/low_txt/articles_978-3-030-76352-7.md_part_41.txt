### References

1. Akcay, S., Atapour-Abarghouei, A., Breckon, T.P.: GANomaly: Semi-supervised anomaly detection via adversarial training. In: Jawahar, C.V., Li, H., Mori, G., Schindler, K. (eds.) ACCV 2018. LNCS, vol. 11363, pp. 622–637. Springer, Cham (2019). https://doi.org/10.1007/978-3-030-20893-6_39
2. Andrea, K., Shevlyakov, G., Smirnov, P.: Detection of outliers with boxplots. (2013)
3. Chandola, V., Banerjee, A., Kumar, V.: Anomaly detection: a survey. ACM Comput. Surv. (CSUR) 41(3), 1–58 (2009)
4. Dang, Y., Lin, Q., Huang, P.: AIOps: Real-world challenges and research innovations. In: 2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion), pp. 4–5. IEEE (2019)
5. Doersch, C.: Tutorial on variational autoencoders. arXiv preprint arXiv:1606.05908 (2016)
6. Gao, J., Song, X., Wen, Q., Wang, P., Sun, L., Xu, H.: RobustTAD: Robust time series anomaly detection via decomposition and convolutional neural networks. arXiv preprint arXiv:2002.09545 (2020)
7. Gulenko, A.: Autonomic self-healing in cloud computing platforms (2020)
8. Hochenbaum, J., Vallis, O.S., Kejariwal, A.: Automatic anomaly detection in the cloud via statistical learning. arXiv preprint arXiv:1704.07706 (2017)
9. Laptev, N., Yosinski, J., Li, L.E., Smyl, S.: Time-series extreme event forecasting with neural networks at Uber. In: International Conference on Machine Learning, vol. 34, pp. 1–5 (2017)
10. Liu, D., Zhao, Y., Xu, H., Sun, Y., Pei, D., Luo, J., Jing, X., Feng, M.: Opprentice: Towards practical and automatic anomaly detection through machine learning. In: Proceedings of the 2015 Internet Measurement Conference, pp. 211–224 (2015)
11. Lu, W., Ghorbani, A.A.: Network anomaly detection based on wavelet analysis. EURASIP J. Adv. Signal Process. 2009, 1–16 (2008)
12. Mahimkar, A., et al.: Rapid detection of maintenance-induced changes in service performance. In: Proceedings of the Seventh Conference on Emerging Networking Experiments and Technologies, pp. 1–12 (2011)
13. Masood, A., Hashmi, A.: AIOps: Predictive analytics & machine learning in operations. Cognitive Computing Recipes, pp. 359–382. Apress, Berkeley, CA (2019). https://doi.org/10.1007/978-1-4842-4106-6_7
14. Ren, H., et al.: Time-series anomaly detection service at Microsoft. In: Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining, pp. 3009–3017 (2019)
15. Rosner, B.: Percentage points for a generalized ESD many-outlier procedure. Technometrics 25(2), 165–172 (1983)
16. Salinas, D., Flunkert, V., Gasthaus, J., Januschowski, T.: Deepar: Probabilistic forecasting with autoregressive recurrent networks. Int. J. Forecast. 36(3), 1181–1191 (2020)
17. Shipmon, D.T., Gurevitch, J.M., Piselli, P.M., Edwards, S.T.: Time series anomaly detection: Detection of anomalous drops with limited features and sparse examples in noisy highly periodic data. arXiv preprint arXiv:1708.03665 (2017)
18. Taylor, S.J., Letham, B.: Forecasting at scale. Am. Stat. 72(1), 37–45 (2018)
19. Vercruyssen, V., Meert, W., Davis, J.: Transfer learning for anomaly detection through localized and unsupervised instance selection. In: The Thirty-Fourth AAAI Conference on Artificial Intelligence, AAAI 2020, pp. 6054–6061. AAAI Press (2020)
20. Walker, M., Dovoedo, Y., Chakraborti, S., Hilton, C.: An improved boxplot for univariate data. Am. Stat. 72(4), 348–353 (2018)
21. Wei, L., Kumar, N., Lolla, V.N., Keogh, E.J., Lonardi, S., Ratanamahatana, C.A.: Assumption-free anomaly detection in time series. SSDBM 5, 237–242 (2005)
22. White, G., Clarke, S.: Short-term QoS forecasting at the edge for reliable service applications. IEEE Transactions on Services Computing (2020)
23. Yeh, C.C.M., Zhu, Y., Ulanova, L., Begum, N., Ding, Y., Dau, H.A., Silva, D.F., Mueen, A., Keogh, E.: Matrix profile I: All pairs similarity joins for time series: A unifying view that includes motifs, discords, and shapelets. In: 2016 IEEE 16th International Conference on Data Mining (ICDM), pp. 1317–1322. IEEE (2016)
24. Zhang, Y., Ge, Z., Greenberg, A., Roughan, M.: Network anomography. In: Proceedings of the 5th ACM SIGCOMM Conference on Internet Measurement, pp. 30–30 (2005)

### Software Reliability Engineering for Resilient Cloud Operations

**Michael R. Lyu and Yuxin Su**  
The Chinese University of Hong Kong, Hong Kong, China  
{lyu, yxsu}@cse.cuhk.edu.hk

#### Abstract
In the last decade, cloud environments have become the most sophisticated software systems. Due to the inevitable occurrences of failures, software reliability engineering is a top priority for cloud developers and maintainers. This essay introduces several frameworks to provide resilient cloud operations from different development phases, ranging from fault prevention before deployment to fault removal at runtime.

#### Keywords
Software reliability engineering, Resilient cloud operation, Fault prevention, Fault removal

#### 1. Introduction
In recent years, IT enterprises have drastically increased the development of their applications and services on cloud computing platforms, such as search engines, instant messaging apps, and online shopping. As cloud systems continue to grow in complexity and volume, cloud failures become inevitable and critical, leading to service interruptions or performance degradation. Proper management of cloud failures can significantly impact company revenue and customer satisfaction. For example, a downtime in Amazon in 2017 led to a loss of over 150 million US dollars. Therefore, the reliability of modern software is of paramount importance. We have identified several critical challenges commonly seen in industrial cloud systems and provide a general roadmap from fault prevention to fault removal to improve cloud reliability through resilient operations. First, as cloud systems undergo continuous feature upgrades and system evolution, the statistical properties of system monitoring data may change. Hence, a fast and effective fault prevention mechanism for the source code and cloud service interfaces is crucial. However, fault prevention alone cannot guarantee perfect cloud services without runtime bugs or errors. Fault removal mechanisms are essential after cloud deployment.

#### 2. Fault Prevention for Cloud Services
In this section, we introduce fault prevention before the deployment of cloud services. We aim to detect buggy code while the service is under development and discuss testing approaches to verify the correctness of cloud services before actual deployment.

##### 2.1 RESTful API Testing
Most industrial-scale cloud services are programmatically accessed through Representational State Transfer (REST) APIs, which have become a clear trend as a composable paradigm for creating and integrating cloud software. One key benefit of RESTful APIs is a systematic approach to software logic modeling, leveraged by the growing usage of standardized cloud software stacks. The OpenAPI Specification (OAS) has gradually become the de-facto standard for describing RESTful APIs from a functional perspective. Adequate testing of stateful cloud services via OAS is difficult and costly. Failures generated by complex stateful interactions can have a high impact on customers but are hard to replicate.

To address the testing problem automatically would certainly increase the reliability of cloud services. Fuzzing is a widely adopted approach to find bugs in software by feeding a variety of test inputs. RESTler [1] first performs a lightweight static analysis on the API specification of a target cloud service and detects dependencies among test inputs. However, the automatically-generated fake paths limit the combinatorial explosion of the fuzzing space due to the lack of feedback about grammar. To effectively induce the fuzzers to focus on fake paths, we consider maintaining a resource pool that stores a sufficient number of fake paths to affect the fuzzing policy. Various mechanisms for RESTful API testing based on this direction will be investigated and evaluated.

##### 2.2 Software Defect Prediction
To improve software reliability, software defect prediction is utilized to assist developers in finding potential bugs and allocating their testing efforts. Traditional defect prediction studies mainly focus on designing hand-crafted features, which are input into machine learning classifiers to identify defective code. However, these hand-crafted features often fail to capture the semantic and structural information of programs, which is important for modeling program functionality and can lead to more accurate defect prediction. Software defect prediction involves building classifiers to predict code areas that potentially contain defects, using information such as code complexity and change history. The prediction results (i.e., buggy code areas) can place warnings for code reviewers and allocate their efforts. The code areas could be files, changes, or methods.

In this essay, we introduce a framework called Defect Prediction via Convolutional Neural Network (DP-CNN) [4], which leverages deep learning for effective feature generation. We evaluate our method on seven open-source projects in terms of F-measure in defect prediction. The experimental results show that, on average, DP-CNN improves the state-of-the-art method by 12%.

#### 3. Fault Removal after Deployment
In this section, we introduce several fault removal approaches from different perspectives, such as log analysis, emerging incident detection, and fault localization.

##### 3.1 Automated Log Mining for Fault Management
Logs are semi-structured text generated by logging statements in software source code. In recent decades, logs generated from cloud services have become imperative in the reliability assurance mechanism of cloud systems because they are often the only data available that traces cloud runtime information.

This essay presents a general overview of log mining techniques, including how to automate and assist the writing of logging statements and how to employ logs to detect anomalies, predict failures, and facilitate diagnosis [3]. Traditional log analysis, which is mainly based on ad-hoc domain knowledge or manually constructed and maintained rules, is inefficient and ineffective for cloud systems due to their large scale and high complexity. This brings three major challenges to modern log analysis for cloud services:
1. The quality of logging statements varies widely because developers from different groups write them based on their own domain knowledge and ad-hoc designs.
2. Log mining based on manual rules is impractical due to the large volume of logs generated in a short time.
3. Due to the wide adoption of the DevOps software development concept, new software versions often appear frequently, and corresponding logging statements update frequently as well.

To address these challenges, we introduce several works on automated rule construction and critical information extraction.

##### 3.2 Automatic Emerging Incident Mining from Discussion
When a high-damage incident occurs in a cloud system, developers and maintainers generate an incident ticket or establish a war room to discuss potential reasons and possible solutions to fix the incident. Timely and precise detection of emerging bugs or errors is crucial for providing resilient cloud services. However, the tremendous quantities of discussion comments, along with their imprecise and noisy descriptions, increase the difficulty of accurately identifying newly-appearing issues. In this essay, we introduce an automated framework called IDEA [2] to identify new issues based on maintainers' discussions. IDEA takes the discussions of different incident tickets or war rooms about the same target as input. To track topic variations over discussions, Adaptively Online Latent Dirichlet Allocation (AOLDA) is employed to generate discussion-sensitive topic distributions. The emerging topics are then identified based on typical anomaly detection methods. Finally, IDEA visualizes the variations of different issues along with discussions and highlights the emerging ones for better understanding.

##### 3.3 Fault Localization from Structural Information
A critical research direction in cloud computing is the defense against inevitable cloud failures and their prevention from causing service interruptions or service degradation. We have identified two critical challenges commonly seen in industrial cloud systems:
1. There is currently a lack of means to incorporate expert knowledge into the training of automated detection models when diagnosing failures for large-scale cloud systems.
2. Although the dependencies of cloud services/resources can provide rich information for tracking the cascading effects of cloud failures, they have not been explicitly considered in existing root cause analysis methods.

To address these challenges, we introduce a resilient cloud systems framework by incorporating structural information and knowledge about the cloud systems. Our goal is to comprehensively improve the reliability of cloud systems and services. Specifically, the framework consists of an end-to-end pipeline of software reliability engineering, including anomaly detection, failure diagnosis, and fault localization. Anomaly detection looks for system patterns that do not conform to normal behaviors, such as high CPU usage or low throughput. We propose a log-based anomaly detection model that can quickly learn unprecedented log patterns in an online manner and dynamically adapt to concept drift caused by system evolution. Failure diagnosis aims to find the most significant problems directly induced by failures, such as abnormal Key Performance Indicators (KPIs). We introduce an adaptive failure diagnosis algorithm with a human-in-the-loop strategy for efficient model training. Lastly, fault localization locates the root cause of a failure, such as a failed microservice or device. We also develop a novel fault localization technique for microservice architecture using dependency-aware collaborative filtering. Experimental evaluations will be conducted on this end-to-end framework regarding its effectiveness in providing resilient cloud operations.

### References
1. Atlidakis, V., Godefroid, P., Polishchuk, M.: RESTler: Stateful REST API fuzzing. In: Proceedings of the 41st International Conference on Software Engineering, ICSE 2019 (2019)
2. Gao, C., Zeng, J., Lyu, M.R., King, I.: Online app review analysis for identifying emerging issues. In: Proceedings of the 40th International Conference on Software Engineering, ICSE (2018)
3. He, S., Zhu, J., He, P., Lyu, M.R.: Experience report: System log analysis for anomaly detection. In: Proceedings of the 27th IEEE International Symposium on Software Reliability Engineering (ISSRE) (2016)
4. Li, J., He, P., Zhu, J., Lyu, M.R.: Software defect prediction via convolutional neural network. In: Proceedings of IEEE International Conference on Software Quality, Reliability and Security (QRS)

### AI-Enabled Process Automation (AI-PA 2020)
#### Introduction to the 1st International Workshop on AI-enabled Process Automation (AI-PA 2020)
The 1st International Workshop on AI-enabled Process Automation (AI-PA 2020) was held as one of the workshops of the 18th International Conference on Service-Oriented Computing (ICSOC 2020). The AI-PA workshop aims to provide a forum for researchers and professionals interested in Artificial Intelligence (AI)-enabled Business Processes and Services, and in understanding, envisioning, and discussing the opportunities and challenges of intelligent Process Automation, Process Data Analytics, and providing Cognitive Assistants for knowledge workers. Recognizing the broad scope of potential areas of interest, the workshop was organized into four themes:

- **Theme 1: Artificial Intelligence (AI), Services, and Processes**
- **Theme 2: Big Data, Services, and Processes**
- **Theme 3: Smart Entities, Services, and Processes**
- **Theme 4: Industry Applications**

The papers selected for presentation and publication in this volume showcase fresh and innovative contributions in these areas.