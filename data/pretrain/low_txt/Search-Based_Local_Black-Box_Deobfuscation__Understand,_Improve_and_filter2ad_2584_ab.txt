# Figures and Captions

**Figure 1: Distance Evolution of Syntia and Enumerative MCTS**
- **Y-Axis (Distance):** 0, 200, 400, 600, 800, 1000, 1200, 1400, 1600
- **X-Axis (# Iterations):** 0, 2000, 4000, 6000, 8000, 10000, 12000
- **Legend:** 
  - Syntia
  - Enumerative MCTS
- **Note:** The figure shows the distance evolution for both Syntia and enumerative MCTS, indicating the successful synthesis of expressions.

**Figure 2: Success Rate of Syntia vs. Xyntia Depending on Timeout**
- **Y-Axis (Success Rate %):** 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100
- **X-Axis (Timeout in seconds):** 1, 10, 60, 600
- **Legend:**
  - Syntia
  - Xyntia
- **Note:** The figure compares the success rates of Syntia and Xyntia under different timeout conditions.

# Related Work

### Blackbox Deobfuscation
The pioneering work by Blazytko et al. [6] introduced Syntia, a tool that simplifies obfuscated code blocks using only observed input-output relations. Our work builds upon their experimental evaluation, generalizes, and improves their approach. Specifically, Xyntia, with a 1-second per expression limit, finds twice as many expressions as Syntia, which has a 600-second per expression limit. Additionally, Xyntia can find some expressions that Syntia cannot within a 12-hour timeframe.

### White- and Greybox Deobfuscation
Recent works have leveraged whitebox symbolic methods for deobfuscation, often referred to as "symbolic deobfuscation" [4, 9, 17, 22, 24, 29]. However, these methods are sensitive to code complexity, and efficient countermeasures are available [11, 19, 20, 30]. In contrast, Xyntia is immune to such countermeasures. David et al. [14] recently proposed QSynth, a greybox deobfuscation method that combines I/O relationship caching (blackbox) and incremental reasoning along the target expression (whitebox). While QSynth is effective, it is sensitive to massive syntactic obfuscation, a challenge that Xyntia overcomes. Furthermore, QSynth operates on a simple grammar, and it is unclear whether its caching technique would scale to more complex grammars like those used by Xyntia and Syntia.

### Program Synthesis
Program synthesis aims to find a function from a given specification, which can be provided formally, in natural language, or as I/O relations. There are three main families of program synthesis methods [15]: enumerative, constraint solving, and stochastic. 

- **Enumerative Search:** This method systematically enumerates all possible programs starting from the simplest, pruning those inconsistent with the specification, and returning the first valid program. We compare our approach to CVC4 [5], the winner of the SyGus '19 syntax-guided synthesis competition [2], and show that our method is more suitable for deobfuscation.
- **Constraint Solving Methods:** These methods encode the target program's skeleton as a first-order satisfiability problem and use an SMT solver to infer an implementation that meets the specification. However, they are less efficient than enumerative and stochastic methods [1].
- **Stochastic Methods:** These methods randomly traverse the search space to find a program consistent with the specification. Unlike these methods, we solve the deobfuscation problem in a fully blackbox manner, without relying on the obfuscated code or estimating the result size.

# Conclusion

Blackbox deobfuscation is a promising and relatively unexplored research area. This article advances the state of search-based blackbox deobfuscation in three directions:

1. **Framework Definition:** We define a novel generic framework for search-based blackbox deobfuscation, encompassing prior works like Syntia. We identify that the search space underlying code deobfuscation is too unstable for simulation-based methods and advocate the use of S-metaheuristics.
2. **Xyntia Design:** We leverage our framework to design Xyntia, a new search-based blackbox deobfuscator. Xyntia significantly outperforms Syntia in terms of success rate while maintaining its good properties. Notably, Xyntia is completely immune to the most recent protections.
3. **Anti-Deobfuscation Methods:** We propose the first two anti-search-based blackbox deobfuscation methods, which effectively prevent attacks by Xyntia and Syntia at a reasonable cost.

# References

[1] Rajeev Alur, Rastislav Bodík, Garvit Juniwal, Milo M. K. Martin, Mukund Raghothaman, Sanjit A. Seshia, Rishabh Singh, Armando Solar-Lezama, Emina Torlak, and Abhishek Udupa. 2013. Syntax-guided synthesis. In Formal Methods in Computer-Aided Design, FMCAD 2013, Portland, OR, USA, October 20-23, 2013. IEEE.

[2] Rajeev Alur, Dana Fisman, Saswat Padhi, Rishabh Singh, and Abhishek Udupa. 2019. SyGuS-Comp 2018: Results and Analysis. (2019). http://arxiv.org/abs/1904.07146

[3] Sebastian Banescu, Christian S. Collberg, Vijay Ganesh, Zack Newsham, and Alexander Pretschner. 2016. Code obfuscation against symbolic execution attacks. In Annual Conference on Computer Security Applications, ACSAC 2016.

[4] Sébastien Bardin, Robin David, and Jean-Yves Marion. 2017. Backward-Bounded DSE: Targeting Infeasibility Questions on Obfuscated Codes. In 2017 IEEE Symposium on Security and Privacy, SP 2017, San Jose, CA, USA, May 22-26, 2017.

[5] Clark Barrett, Christopher L. Conway, Morgan Deters, Liana Hadarean, Dejan Jovanović, Tim King, Andrew Reynolds, and Cesare Tinelli. 2011. CVC4. In Proceedings of the 23rd International Conference on Computer Aided Verification (CAV ’11), Ganesh Gopalakrishnan and Shaz Qadeer (Eds.). Springer.

[6] Tim Blazytko, Moritz Contag, Cornelius Aschermann, and Thorsten Holz. 2017. Syntia: Synthesizing the Semantics of Obfuscated Code. In Usenix Security.

[7] Tim Blazytko, Moritz Contag, Cornelius Aschermann, and Thorsten Holz. 2018. Syntia: Breaking State-of-the-Art Binary Code Obfuscation via Program Synthesis. Black Hat Asia (2018).

[8] Cameron B. Browne, Edward Powley, Daniel Whitehouse, Simon M. Lucas, Peter I. Cowling, Philipp Rohlfshagen, Stephen Tavener, Diego Perez, Spyridon Samothrakis, and Simon Colton. 2012. A survey of Monte Carlo tree search methods. IEEE Transactions on Computational Intelligence and AI in Games (2012).

[9] David Brumley, Cody Hartwig, Zhenkai Liang, James Newsome, Dawn Xiaodong Song, and Heng Yin. 2008. Automatically Identifying Trigger-based Behavior in Malware. In Botnet Detection: Countering the Largest Security Threat. Springer.

[10] C. Collberg, S. Martin, J. Myers, and B. Zimmerman. [n.d.]. The Tigress C Diversifier/Obfuscator. http://tigress.cs.arizona.edu/

[11] Christian Collberg and Jasvir Nagra. 2009. Surreptitious Software: Obfuscation, Watermarking, and Tamperproofing for Software Protection.

[12] Christian Collberg, Clark Thomborson, and Douglas Low. 1997. A taxonomy of obfuscating transformations.

[13] Christian Collberg, Clark Thomborson, and Douglas Low. 1998. Manufacturing cheap, resilient, and stealthy opaque constructs. In Proceedings of the 25th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages.

[14] Robin David, Luigi Coniglio, and Mariano Ceccato. 2020. QSynth—A Program Synthesis Based Approach for Binary Code Deobfuscation. In BAR 2020 Workshop.

[15] Sumit Gulwani, Oleksandr Polozov, Rishabh Singh, et al. 2017. Program synthesis. Foundations and Trends® in Programming Languages (2017).

[16] Susmit Jha, Sumit Gulwani, Sanjit A. Seshia, and Ashish Tiwari. 2010. Oracle-guided component-based program synthesis. In 2010 ACM/IEEE 32nd International Conference on Software Engineering. IEEE.

[17] Johannes Kinder. 2012. Towards Static Analysis of Virtualization-Obfuscated Binaries. In 19th Working Conference on Reverse Engineering, WCRE.

[18] Helena Ramalhinho Lourenço, Olivier C. Martin, and Thomas Stützle. 2019. Iterated local search: Framework and applications. In Handbook of Metaheuristics. Springer.

[19] Mathilde Ollivier, Sébastien Bardin, Richard Bonichon, and Jean-Yves Marion. 2019. How to kill symbolic deobfuscation for free (or: unleashing the potential of path-oriented protections). In Proceedings of the 35th Annual Computer Security Applications Conference.

[20] Mathilde Ollivier, Sébastien Bardin, Richard Bonichon, and Jean-Yves Marion. 2019. Obfuscation: where are we in anti-DSE protections? (a first attempt). In Proceedings of the 9th Workshop on Software Security, Protection, and Reverse Engineering.

[21] Oreans Technologies. 2020. Themida—Advanced Windows Software Protection System. http://oreans.com/themida.php.

[22] Jonathan Salwan, Sébastien Bardin, and Marie-Laure Potet. 2018. Symbolic deobfuscation: from virtualized code back to the original. In 5th Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA).

[23] Eric Schkufza, Rahul Sharma, and Alex Aiken. 2013. Stochastic superoptimization. ACM SIGARCH Computer Architecture News (2013).

[24] Sebastian Schrittwieser, Stefan Katzenbeisser, Johannes Kinder, Georg Merzdovnik, and Edgar Weippl. 2016. Protecting Software Through Obfuscation: Can It Keep Pace with Progress in Code Analysis? ACM Comput. Surv. (2016).

[25] Jon Stephens, Babak Yadegari, Christian S. Collberg, Saumya Debray, and Carlos Scheidegger. 2018. Probabilistic Obfuscation Through Covert Channels. In 2018 IEEE European Symposium on Security and Privacy, EuroS&P 2018.

[26] El-Ghazali Talbi. 2009. Metaheuristics: From Design to Implementation. Wiley Publishing.

[27] VM Protect Software. 2020. VMProtect Software Protection. http://vmpsoft.com.

[28] Babak Yadegari and Saumya Debray. 2015. Symbolic Execution of Obfuscated Code. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. Association for Computing Machinery.

[29] Babak Yadegari, Brian Johannesmeyer, Ben Whitely, and Saumya Debray. 2015. A Generic Approach to Automatic Deobfuscation of Executable Code. In Symposium on Security and Privacy, SP.

[30] Yongxin Zhou, Alec Main, Yuan X. Gu, and Harold Johnson. 2007. Information Hiding in Software with Mixed Boolean-arithmetic Transforms. In Proceedings of the 8th International Conference on Information Security Applications (WISA’07). Springer-Verlag.

---

This revised version provides a clearer, more coherent, and professional presentation of the content.