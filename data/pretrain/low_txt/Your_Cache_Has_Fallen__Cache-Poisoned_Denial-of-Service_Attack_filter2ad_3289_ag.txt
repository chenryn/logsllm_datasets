### Caches and CPDoS Vulnerability

Caches are susceptible to Cache-Poisoned Denial-of-Service (CPDoS) attacks if they store and reuse error pages. Web caching systems such as Stackpath, CDNSun, KeyCDN, and G-Core Labs are not affected by CPDoS attacks because these CDNs do not cache error messages. Similarly, Apache HTTPD, Nginx, and Squid, when used as intermediate caches without involving other vulnerable web caching systems, are also immune to CPDoS attacks.

### Conditions for CPDoS Attacks

CPDoS attacks are feasible only when a vulnerable web caching system does not contain a fresh copy of the resource being targeted. If a shared cache maintains and reuses a stored fresh response for recurring requests, a malicious request cannot poison the intermediary. The web caching system will serve all requests to the target resource, and none of the requests will be forwarded to the origin server until the freshness lifetime expires. Therefore, an attacker must wait until the cached content is stale before attempting to trigger an error page.

The most straightforward way to determine the expiration time is by checking the `Expires` header, which indicates the absolute expiration date. If the response lacks an `Expires` header or if the expiration time is overridden by the `max-age` or `s-maxage` directives, the `Age` header can be used. The `Age` header specifies the number of seconds the response has been in the cache. By subtracting the `Age` value from the `max-age` or `s-maxage` value, the relative expiration time of the cached response can be calculated.

If the cached response is expired, the attacker's request must be the first to reach the origin server to trigger an error page. To increase the likelihood of being the first, automated requests can be sent at one-second intervals just before the response is set to expire. This technique was successfully applied to attack all twelve vulnerable websites in our spot check experiment. Regularly sending requests at one-second intervals is also useful for cached responses that do not contain any expiration time information, i.e., resources that are implicitly cached. In such cases, the attacker needs to send automated requests until one of them is forwarded to the origin server. Automated requests with a one-second interval are generally not considered harmful, even over a long period, as health check requests can have the same interval. We tested this technique on several CDNs, including those with WAFs and DDoS protections. Since we used only a single client to perform the attack, none of the CDNs detected the malicious requests.

### Web Application Configurations

Many web applications configure the proxy cache or CDN to serve the entire website, meaning all resources, including dynamic pages and static files, are processed by the cache. To exclude dynamic pages from being implicitly cached, content providers include `no-store` or `max-age=0` in the response header, ensuring each request is forwarded to the origin server. If a vulnerable cache is used in conjunction with a vulnerable server-side HTTP implementation, these resources can be attacked without waiting or automating requests. A single malicious request is sufficient to paralyze the target resource, as each request is forwarded to the origin server. Examples of vulnerable websites that configure the CDN to serve all resources include marines.com, ethereum.org, and nasa.gov.

Some web applications configure the cache to store and reuse responses for specific URL paths, such as static files in the JavaScript or images directory. Other URL paths are not cached at all. Many content providers maintain subdomains (e.g., static.example.org) or specific domains for static files served via a cache. In these cases, only resources within the cached URL paths or the specific domain can be affected. To determine whether a response traverses a cache, an attacker can inspect the response headers. For example, the `Age` response header indicates that a cache is utilized. The main website of IKEA (ikea.com) does not use CloudFront or any other vulnerable HTTP implementations, suggesting it is likely not vulnerable to CPDoS attacks. However, IKEA uses a specific domain (fw.ota.homesmart.ikea.net) in conjunction with CloudFront to host update files for their Internet of Things devices.

### Limitations of CPDoS Attacks

Another important limitation of CPDoS attacks is that most web caching systems, except Fastly, cache error pages for only a few minutes or seconds. Fastly stores and reuses error pages for one hour. Once this time span elapses, the first benign request to the target resource is forwarded to the origin server and refreshed. To extend the duration of CPDoS attacks, malicious clients can resend harmful requests at fixed intervals.

### Responsible Disclosure

All discovered vulnerabilities were reported to the HTTP implementation vendors and cache providers on February 19, 2019. We worked closely with these organizations to support them in eliminating the detected threats. We did not notify the website owners directly but left it to the contacted entities to inform their customers.

**Amazon Web Services (AWS):** We reported this issue to the AWS Security team, who confirmed the vulnerabilities on CloudFront. The AWS Security team stopped caching error pages with the status code 400 Bad Request by default. However, it took over three months to fix our CPDoS reports. The overall disclosure process was characterized by one-way communication. We periodically asked for updates without receiving much information. We only learned about the changed default caching policy by checking the revision history of their documentation hosted on GitHub. Thus, we have limited information on the time required to resolve the reported CPDoS vulnerability, despite asking explicitly. We assume this delay was due to the large number of affected users they had to test after implementing countermeasures. Amazon suggests users deploy an AWS WAF in front of the corresponding CloudFront instance, allowing the definition of rules to drop malicious requests before they reach the origin server.

**Microsoft:** Microsoft was able to reproduce the reported issues and published an update to mitigate the vulnerability. They assigned this case to CVE-2019-0941, published in June 2019.

**Play 1:** The developers of Play 1 confirmed the reported issues and provided a security patch that limits the impact of the `X-HTTP-Method-Override` header. The security patch is included in versions 1.5.3 and 1.4.6. Older versions are not maintained by this security patch. Web applications using older versions of Play 1 should update to the newest versions to mitigate CPDoS attacks.

**Flask:** We reported the HMO attack to the developer team of Flask multiple times but have not received any response. We assume that Flask-based web applications are still vulnerable to CPDoS.

### Discussion

Using malformed requests to damage web applications is a well-known threat. Request header size limits and blocking meta characters are vital means of protection against known cache poisoning attacks and other DoS attacks such as request header buffer overflow and ReDoS. Many security guidelines, including the documentation of Apache HTTPD, OWASP, and the HTTP standard, recommend blocking oversized headers and meta characters in headers. CPDoS attacks aim to beat these security mechanisms with their own weapons. HHO and HMC CPDoS attacks intentionally send a request with an oversized header or harmful meta character to get blocked by an error page, which will be cached. It is interesting to note that CDN services, which claim to be effective against DoS and especially DDoS attacks, fail when it comes to CPDoS.

According to our experiment results, most of the presented attack vectors are only feasible when CloudFront is deployed as the underlying CDN, as it is the only analyzed cache that illicitly stores the error code 400 Bad Request. Such non-conformance is the main reason for HHO and HMC attacks. The other major issue for both attacks is that the cache forwards oversized headers and requests with harmful meta characters. Violations of the HTTP standard and implementation issues are also the main reasons for many other cache-related vulnerabilities, including request smuggling, host of troubles, response splitting, and web deception attacks. The HMO CPDoS attack, however, is a vulnerability that does not exploit any implementation issues or violations of the HTTP standard. The `X-HTTP-Method-Override` header or similar headers are legitimate auxiliaries to tunnel HTTP methods not supported by WAFs or web browsers. Play 1 and Flask return the error code 404 Not Found or 405 Method Not Allowed when an unsupported action in the `X-HTTP-Method-Override` header is received. Both error messages are allowed to be cached according to RFC 7231. Akamai, CDN77, Fastly, Cloudflare, CloudFront, and Varnish follow this policy and cache such error codes. If these web caching systems are used in combination with one of the mentioned web frameworks, these combinations have an actual risk of falling victim to CPDoS attacks, even though they are in conformance with the HTTP standard and do not have any implementation issues. Therefore, the HMO CPDoS attack can be considered a new kind of cache poisoning attack that does not exploit any implementation issues or RFC violations. This shows that CPDoS attacks do not always result from programming mistakes or unintentional violations of specification policies but can also be the exploit of the conflict between two legitimate concepts. In the case of HMO CPDoS attacks, this conflict refers to the usage of method overriding headers and the caching of allowed error messages.

Even though we did not detect attack vectors in other web caching systems and HTTP implementations, this does not mean that other constellations are not vulnerable to CPDoS attacks. As shown in Table 1, eight of fifteen tested web caching systems do store error pages, and some even cache error pages that are not allowed. If an attacker can initiate other error pages or even cacheable error codes at the target URL, they may affect other web caching systems and HTTP implementations with CPDoS attacks. James Kettle, for instance, discovered two other forms of CPDoS attacks, which are successful due to specific implementation issues of the corresponding web application. The first CPDoS attack utilized the `X-Forwarded-Port` header. This header usually informs the endpoint about the port that the client uses to connect to the intermediate system, which operates in front of the origin server. In the revealed attack, the cached response contained a redirect. A DoS was caused by the user’s browser trying to follow the cached redirect and timing out. The second attack was able to create a DoS at www.tesla.com due to a faulty WAF configuration. Tesla configured their WAF to block certain strings used by other cache poison attacks. Unfortunately, requests with such strings were blocked by a 403 Forbidden error page, which was also cached. This shows that HMO, HHO, and HMC are not the only variations of CPDoS attacks. There are certainly many other ways to provoke an error page on the origin server. To the best of our knowledge and according to our experiences in developing web applications, it is not unlikely to provoke a 500 Internal Server Error status code or other 5xx errors in real-world web applications and services. Akamai and Cloudflare do cache 5xx error codes. At this point, we did not find a way to provoke such error messages in our experiments.

Moreover, we need to consider that contemporary web applications and distributed systems, in particular, are usually layered. That is, they often utilize other intermediate components such as load balancers, WAFs, or other security gateways located between the cache and the endpoint. Such middleboxes or middleware may provide other request header size limits, meta character handling, or header overriding features. Such systems may also react to malicious requests with error codes that could be cached.

### Countermeasures

The most intuitive and effective countermeasure against CPDoS attacks is to exclude error pages from being cached. However, content providers that exclude cacheable error codes such as 404 Not Found need to consider that this setting may impair performance and scalability. There are two ways to exclude error pages from being cached. The first approach is to configure the web caching systems to omit the storage of error responses. Akamai, CDN77, CloudFront, Fastly, and Varnish provide options to do so. Content providers can also add the `no-store` directive to the `Cache-Control` response header, which prohibits all caches from storing the content. According to our evaluation, all tested web caching systems, except CloudFront, honored the `no-store` keyword in error pages and still do so. At the time of our experiments in February 2019, CloudFront cached error pages for five minutes by default, even when `no-store` was included in the error response header. The only way to avoid storing error pages in CloudFront was to disable each error code from caching via the CDN’s configuration interface. Fortunately, AWS changed the behavior of caching error pages after our CPDoS reporting. One important change is that 400 Bad Request error pages are not cached by default anymore. CloudFront only caches 400 Bad Request error messages if they include a `max-age` or `s-maxage` control directive.

As mentioned before, the disobeyance of the HTTP standard in terms of ignoring control directives is the main cause of many cache-related vulnerabilities. Besides considering cache-related control directives, web caching systems must only store error codes permitted by the HTTP standard. Status codes such as 400 Bad Request are not allowed to be cached, as this error message is dedicated to a request that is malformed or invalid. Other error codes such as 404 Not Found, 405 Method Not Allowed, or 410 Gone can be cached, as they provide error information valid for all clients. Additionally, HTTP implementations must use the appropriate status code for the corresponding error case. Table 3 shows that almost all tested systems return the status code 400 Bad Request for an oversized request header. IIS even replies with the cacheable 404 Not Found error code when a limit for a specific request header is exceeded. Both error messages are not appropriate for requests exceeding the header size limit. According to the HTTP standard, the appropriate error code is 431 Request Header Fields Too Large. Such error information is not stored and reused by any of the tested web caching systems. To test the compliance and behavior of caches, we recommend using the cache testing tool of Nguyen et al. [31] or Mark Nottingham [33].

Another very effective countermeasure against CPDoS attacks is the use of WAFs. Many CDNs provide the option to enable WAFs to protect web applications against malicious requests. To avoid CPDoS attacks, content providers can configure the WAF to explicitly block oversized requests, requests with meta characters, or malicious headers. Using WAFs is, however, only effective if the WAF is implemented in the cache or in front of the cache, so that harmful requests can be eliminated before they are forwarded to the origin server. The experiments in Section 5 and the CPDoS attack of James Kettle on www.tesla.com [20] show that WAFs integrated at the origin server, such as ModSecurity, do not help against CPDoS attacks. Requests blocked by a WAF at the origin can still trigger an error page that is stored by the cache.

Moreover, we recommend adding a subsection to the "Security Considerations" section of RFC 7230 [12] to discuss the consequences of non-compliance with the protocol specification to avoid HHO, HMC, and other web cache poisoning attacks. The "Security Considerations" section of RFC 7230 mentions cache-poisoning attacks, including response splitting and request smuggling. However, the standard only makes recommendations related to these two specific attacks. The specification does not mention that the source of many cache-related attacks lies in violations of the standard. An additional description would increase developers' awareness of compliance with the specifications. HMO attacks, on the other hand, cannot be avoided by complying with the standard, as they are based on non-standard means, such as the `X-HTTP-Method-Override` header. To avoid HMO attacks while maintaining scalability, content providers do not need to exclude the 404 Not Found and 405 Method Not Allowed error codes from caching. Here, vulnerable web frameworks must follow the approach of Symfony, Laravel, and the plugins of Django and Express.js. These HTTP implementations support method overriding headers but only consider changing the action when the method in the request line is POST. By this, a 404 Not Found error page cannot be triggered by a malicious GET request, as method overriding headers are ignored. When trying to poison the cache with a POST request with a method override header including GET, the returning response is not stored by any tested cache. The use of non-standard headers is a general approach to conduct other cache-poisoning attacks, as described by James Kettle [22]. It is the responsibility of HTTP implementations to carefully integrate non-standard headers to avoid such attacks. To analyze the impact of standardized or non-standard headers in respect to caches, developers and software testers can use, e.g., the testing tools of Nguyen et al. [31] and Mark Nottingham [33].

### Conclusion and Outlook

Vulnerabilities stemming from the semantic gap result in serious security threats. Distributed systems are especially prone to such attacks as they are composed of distinct layers. Their existence is a major prerequisite for the different interpretation of an object, in this case, the application messages floating through intermediaries.

In this paper, we extended the known vulnerabilities rooted in a semantic gap by introducing a class of new attacks, "Cache-Poisoned Denial-of-Service (CPDoS)." We systematically studied how to provoke errors during request processing on an origin server and the case in which error responses get stored and distributed by caching systems. We introduced three concrete CPDoS attack variations caused by the inconsistent treatment of the HTTP method override header, header size limits, and the parsing of meta characters. We showed the practical relevance by identifying the amount of available web caching systems that are vulnerable to CPDoS. The consequences can be severe, as one simple request is sufficient to paralyze a victim website within a large geographical region (see Figure 8 in Appendix B). Depending on the resource that is being blocked by an error page, the web page or web service can be disabled piecemeal (see Figure 6 in Appendix A).

According to our experiments, 11% of the DoD web sites, 30% of the Alexa Top 500 websites, and 16% of the URLs in the analyzed HTTP Archive data set are potentially vulnerable to CPDoS attacks. These cached contents include mission-critical firmware and update files. Considering the fact that modern distributed applications often follow the Microservices [29] and Service-Oriented Architecture (SOA) [10] design principles, where services are implemented with different programming languages and operated by distinct entities, more semantic gap vulnerabilities may appear in the future. Hence, a more in-depth understanding of such vulnerabilities needs to be gathered to develop robust safeguards that do not depend on particular implementation and concatenation of system layers.

### Acknowledgment

First of all, we would like to thank all reviewers for their thoughtful remarks and comments. Moreover, we would especially like to thank Shuo Chen and James Kettle for their feedback and suggestions. Finally, we appreciated the disclosure processes with the AWS-Security team, the Microsoft Security Response Center, and the Play Framework development team.

This work has been funded by the German Federal Ministry of Education and Research within the funding program "Forschung an Fachhochschulen" (contract no. 13FH016IX6).

### References

[1] Amazon. 2019. How CloudFront Processes and Caches HTTP 4xx and 5xx Status Codes from Your Origin. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HTTPStatusCodes.html

[2] Apache HTTP Server Project. 2019. Security Tips. https://httpd.apache.org/docs/trunk/misc/security_tips.html

[3] G. Barish and K. Obraczke. 2000. World Wide Web caching: trends and techniques. IEEE Communications Magazine 38, 5 (2000), 178–184. https://doi.org/10.1109/35.841844

[4] M. Belshe, R. Peon, and M. Thomson. 2015. Hypertext Transfer Protocol Version 2 (HTTP/2). RFC 7540. IETF. https://tools.ietf.org/html/rfc7540

[5] T. Bray. 2016. An HTTP Status Code to Report Legal Obstacles. RFC 7725. IETF. https://tools.ietf.org/html/rfc7725

[6] A. Chatiron. 2019. Define allowed methods used in 'X-HTTP-Method-Override'. https://github.com/playframework/play1/issues/1300

[7] J. Chen, J. Jiang, H. Duan, N. Weaver, T. Wan, and V. Paxson. 2016. Host of Troubles: Multiple Host Ambiguities in HTTP Implementations. In 23rd ACM SIGSAC Conference on Computer and Communications Security (CCS). https://doi.org/10.1145/2976749.2978394

[8] G. Clemm and J. Whitehead J. Crawford, J. Reschke. 2010. Binding Extensions to Web Distributed Authoring and Versioning (WebDAV). RFC 5842. IETF. https://tools.ietf.org/html/rfc5842

[9] L. Dusseault. 2007. HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV). RFC 4918. IETF. https://tools.ietf.org/html/rfc4918

[10] T. Erl. 2007. SOA Principles of Service Design. Prentice Hall PTR.

[11] R. Fielding, M. Nottingham, and J. Reschke. 2014. Hypertext Transfer Protocol (HTTP/1.1): Caching. RFC 7234. IETF. https://tools.ietf.org/html/rfc7234

[12] R. Fielding and J. Reschke. 2014. Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing. RFC 7230. IETF. https://tools.ietf.org/html/rfc7230

[13] R. Fielding and J. Reschke. 2014. Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content. RFC 7231. IETF. https://tools.ietf.org/html/rfc7231

[14] Flask. 2010. Adding HTTP Method Overrides. http://flask.pocoo.org/docs/1.0/patterns/methodoverrides/

[15] O. Gil. 2017. WEB CACHE DECEPTION ATTACK. In Blackhat USA. https://blogs.akamai.com/2017/03/on-web-cache-deception-attacks.html

[16] K. Holtman and A. Mutz. 1998. Transparent Content Negotiation in HTTP. RFC 2295. IETF. https://tools.ietf.org/html/rfc2295

[17] IEEE Spectrum. 2018. Interactive: The Top Programming Languages 2018. https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2018

[18] Suman Jana and Vitaly Shmatikov. 2012. Abusing File Processing in Malware Detectors for Fun and Profit. In 33rd IEEE Symposium on Security and Privacy. 80–94. https://doi.org/10.1109/SP.2012.15

[19] Y. Jia, Y. Chen, X. Dong, P. Saxena, J. Mao, and Z. Liang. 2015. Man-in-the-browser-cache. Computers and Security 55, C (2015), 62–80. https://doi.org/10.1016/j.cose.2015.07.004

[20] J. Kettle. 2018. Bypassing Web Cache Poisoning Countermeasures. https://portswigger.net/blog/practical-web-cache-poisoning

[21] J. Kettle. 2018. Denial of service via cache poisoning. https://hackerone.com/reports/409370

[22] J. Kettle. 2018. Practical Web Cache Poisoning. In Blackhat USA.

[23] A. Klein. 2004. Divide and Conquer - HTTP Response Splitting, Web Cache Poisoning Attacks, and Related Topics. White Paper. Sanctum, Inc. https://dl.packetstormsecurity.net/papers/general/whitepaper_httpresponse.pdf

[24] C. Linhart, A. Klein, R. Heled, and S. Orrin. 2005. HTTP REQUEST SMUGGLING. http://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf

[25] L. Masinter. 1998. Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0). RFC 2324. IETF. https://tools.ietf.org/html/rfc2324

[26] NATIONAL VULNERABILITY DATABASE. 2010. CVE-2010-2730 Detail. CVE 2010-2730. Nist. https://nvd.nist.gov/vuln/detail/CVE-2010-2730

[27] NATIONAL VULNERABILITY DATABASE. 2019. CVE-2019-0941 Detail. CVE 2019-0941. Nist. https://nvd.nist.gov/vuln/detail/CVE-2019-0941

[28] Netcraft. 2019. January 2019 Web Server Survey. https://news.netcraft.com/archives/2019/01/24/january-2019-web-server-survey.html

[29] S. Newman. 2015. Building microservices: designing fine-grained systems. O’Reilly.

[30] H. V. Nguyen, L. Lo Iacono, and H. Federrath. 2018. Systematic Analysis of Web Browser Caches. In 2nd International Conference on Web Studies (WS). https://doi.org/10.1145/3240431.3240443

[31] H. V. Nguyen, L. Lo Iacono, and H. Federrath. 2019. Mind the Cache: Large-Scale Analysis of Web Caching. In 34th ACM/SIGAPP Symposium on Applied Computing (SAC). https://doi.org/10.1145/3297280.3297526

[32] H. Nielsen and S. Lawrence. 2000. An HTTP Extension Framework. RFC 2774. IETF. https://tools.ietf.org/html/rfc2774

[33] M. Nottingham. 2019. HTTP Caching Tests. https://cache-tests.fyi/

[34] M. Nottingham and R. Fielding. 2012. Additional HTTP Status Codes. RFC 6585. IETF. https://tools.ietf.org/html/rfc6585

[35] OWASP. 2017. Denial of Service Cheat Sheet. https://www.owasp.org/index.php/Denial_of_Service_Cheat_Sheet#Mitigation_3:_Limit_length_and_size

[36] L. Richardson and S. Ruby. 2008. RESTful web services. O’Reilly Media, Inc.

[37] J. Somorovsky, M. Heiderich, M. Jensen, J. Schwenk, N. Gruschka, and L. Lo Iacono. 2011. All Your Clouds Are Belong to Us: Security Analysis of Cloud Management Interfaces. In 3rd ACM Workshop on Cloud Computing Security Workshop. ACM, New York, NY, USA, 3–14. https://doi.org/10.1145/2046660.2046664

[38] C.-A. Staicu and M. Pradel. 2018. Freezing the Web: A Study of ReDoS Vulnerabilities in JavaScript-based Web Servers. In 27th USENIX Conference on Security Symposium (USENIX Security). USENIX Association, Berkeley, CA, USA, 361–376. http://dl.acm.org/citation.cfm?id=3277203.3277231

[39] S. Triukosea, Z. Al-Qudad, and M. Rabinovich. 2009. Content Delivery Networks: Protection or Threat?. In 14th European Symposium on Research in Computer Security (ESORICS). https://doi.org/10.1007/978-3-642-04444-1_23

### Appendix A: Illustrative Examples of CPDoS Attack

#### A.1 Ethereum-website
Figure 6: These screenshots show the start page of the website ethereum.org and how parts as well as the whole page are rendered inaccessible due to a successful CPDoS attack. More specifically, this website has been vulnerable to HHO CPDoS.

#### A.2 Marines-website
Figure 7: These two screenshots show the start page of the website marines.com before (a) and after (b) a successful CPDoS attack. More specifically, this website has been vulnerable to HHO CPDoS.

### Appendix B: CPDoS Attack Spread

Legend:
- None-affected region,
- Affected region,
- Attacker,
- Origin server

(a)
(b)

Figure 8: Affected CDN regions when sending a CPDoS attack from (a) Frankfurt, Germany, and (b) Northern Virginia, USA, to a victim origin server in Cologne, Germany.