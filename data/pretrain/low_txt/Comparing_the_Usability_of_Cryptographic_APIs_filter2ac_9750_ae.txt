### Table XII: Usability Analysis of Cryptographic Libraries

In Table XII, we present the usability findings for several cryptographic libraries. Our analysis indicates that M2Crypto and Keyczar are significantly less usable compared to the baseline PyCrypto. Conversely, PyNaCl is significantly more usable. As expected, participants in the symmetric condition reported higher usability than those in the asymmetric condition.

The final model shows that having a security background and prior exposure to the assigned library were both associated with a significant increase in usability. While previous use of the library was associated with a slight increase in usability, this trend was not statistically significant, likely due to the small sample size (only 18 participants had used their assigned library before). Python experience was included in the final model but did not emerge as a significant covariate. The model did not include any interactions between the library and encryption mode.

### Additional Usability Questions and Scores

We compiled additional usability questions, based on prior work as described in Section III-G, into a score out of 100 points. The results from these questions were similar to the System Usability Scale (SUS) scores, and the two were significantly correlated (Kendall’s τ = 0.65, p < 0.001). Using Cronbach’s alpha, we determined that the scale’s internal reliability was high (α = 0.98).

### Table XIII: Linear Regression Model for Usability Scores

Table XIII presents the results of a linear regression examining the scores on our cognitive-dimension-based scale. As in the previous analysis, M2Crypto and Keyczar performed significantly worse than PyCrypto. However, cryptography.io was significantly better than PyCrypto, while PyNaCl was better but not significantly so. Higher scores were again correlated with symmetric tasks and prior exposure to the assigned library. Previous use of the library was correlated with higher scores, but not significantly, likely due to the small sample size. Security background was included in the final model but was not significant; Python experience and interactions between the library and encryption mode were not included in the final model.

### Documentation Quality

Participants' responses to questions about API documentation indicated that Keyczar and M2Crypto have significant issues with their documentation. Participants consistently reported that they found neither helpful explanations nor code examples in the documentation, and that they had to spend a lot of time reading the documentation before they could solve the tasks. Overall, they found the documentation for Keyczar and M2Crypto to be unhelpful, which corresponded to their feedback that the tasks were not straightforward to implement.

In contrast, participants working with cryptography.io praised the documentation, with one participant calling a tutorial "amazing!" and another stating that the OpenSSL documentation made them "want to jump off a cliff." Another participant found the documentation initially confusing but eventually got the hang of it.

### Individual Task Analysis

Success in solving the tasks varied across libraries and individual tasks, as illustrated in Figure 5. We analyze these results for trends rather than statistical significance to avoid diluting our statistical power by testing the same results in multiple ways.

Encryption tasks were the easiest, with symmetric participants achieving 85.2% functional success, and 70.1% of those rated secure. Asymmetric encryption tasks were 72.0% functional, with 78.8% of those rated secure. The most challenging task overall was certificate validation, with only 22.4% of asymmetric participants providing a functional solution, and none of these solutions were secure. Key generation tasks fell in the middle.

### Security Errors in Symmetric Cryptography

We also examined the types of security errors made by participants. In symmetric cryptography, M2Crypto and PyCrypto allowed developers to choose an encryption algorithm. All 11 PyCrypto participants selected DES (an insecure algorithm), while no M2Crypto participants chose an insecure algorithm. This discrepancy may be due to the first Google results for "m2crypto encryption" providing AES code snippets, whereas the first results for "pycrypto encryption" provided DES code snippets.

Similarly, allowing developers to pick modes of operation resulted in many vulnerabilities. PyCrypto participants often chose the insecure ECB mode or did not specify a mode at all (ECB being the default). They frequently cited blog posts and Stack Overflow posts containing insecure code snippets as their information sources. PyCrypto participants also used static IVs more frequently, corresponding to the lack of emphasis on random IVs in the documentation.

### Key Derivation and Storage

PyCrypto participants were most likely to fail to use any key derivation function, possibly because the documentation uses a plain string for an encryption key. PyNaCl and PyCrypto participants often used an insecure custom key derivation function, such as a simple hash function for key stretching. In contrast, cryptography.io participants performed well, likely due to the well-documented PBKDF2 function. However, cryptography.io users frequently picked static salts for PBKDF2, even though the documentation example uses a random salt.

Storing encryption keys in plaintext was common across all libraries.

### Discussion and Conclusion

Our results suggest that usability and security are deeply interconnected. Simplified libraries generally produced more secure results, validating the belief that simplicity promotes security. However, even simplified libraries did not entirely solve the security problem, with security success rates below 80% in most conditions. This gap highlights the need for improved features and documentation.

Documentation quality is critical. Poor documentation, as seen in PyCrypto, led participants to seek help from unvetted sources, often resulting in insecure solutions. In contrast, the excellent code examples in PyNaCl and the cryptography.io "recipes" layer contributed to high security success rates.

For future library design, we recommend focusing on simplifying APIs, choosing secure defaults, and treating documentation quality as a first-class requirement. Additionally, libraries should support a broad range of potential tasks and provide ready-to-use APIs for holistic, application-level tasks. Further research is needed to design and evaluate libraries that meet these goals, and existing libraries can be improved through better documentation, secure defaults, and warnings for insecure parameters.

### Acknowledgments

We thank Mary Theofanos, Julie Haney, Jason Suagee, and the anonymous reviewers for their feedback. We also thank Marius Steffens and Birk Blechschmidt for testing the infrastructure, Matt Bradley and Andrea Dragan for help with multi-institution ethics approvals, and all our participants for their contributions. This work was supported in part by the German Ministry for Education and Research (BMBF) and the U.S. Department of Commerce, National Institute for Standards and Technology.

### References

[1] Amnesty International USA, “Encryption - A Matter of Human Rights,” 2016.
[Online]. Available: https://www.amnestyusa.org/sites/default/files/encryption - a matter of human rights - pol 40-3682-2016.pdf

[2] R. J. Anderson, “Why cryptosystems fail,” Communications of the ACM, vol. 37, 1994.

[3] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and V. Shmatikov, “The most dangerous code in the world: validating SSL certificates in non-browser software,” in Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS 2012). ACM, 2012.

[4] B. Reaves, N. Scaife, A. Bates, P. Traynor, and K. R. Butler, “Mo(bile) money, mo(bile) problems: analysis of branchless banking applications in the developing world,” in Proceedings of the 24th USENIX Security Symposium (USENIX Security 2015). USENIX Association, 2015.

[5] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, “An empirical study of cryptographic misuse in Android applications,” in Proceedings of the 2013 ACM SIGSAC Conference on Computer and Communications Security (CCS 2013). ACM, 2013.

[6] S. Fahl, M. Harbach, T. Muders, M. Smith, and U. Sander, “Helping Johnny 2.0 to encrypt his Facebook conversations,” in Proceedings of the Eighth Symposium on Usable Privacy and Security (SOUPS 2012). ACM, 2012.

[7] J. Viega, M. Messier, and P. Chandra, Network Security with OpenSSL. O’Reilly Media, 2002.

[8] “Cryptography.io.” [Online]. Available: https://cryptography.io

[9] D. J. Bernstein, T. Lange, and P. Schwabe, “The security impact of a new cryptographic library,” in Proceedings of the 2nd International Conference on Cryptology and Information Security in Latin America (LATINCRYPT 2012). Springer-Verlag, 2012.

[10] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner, B. Freisleben, and M. Smith, “Why Eve and Mallory love Android: an analysis of Android SSL (in)security,” in Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS 2012). ACM, 2012.

[11] L. Onwuzurike and E. De Cristofaro, “Danger is My Middle Name: Experimenting with SSL Vulnerabilities in Android Apps,” arXiv.org, 2015.

[12] M. Oltrogge, Y. Acar, S. Dechand, M. Smith, and S. Fahl, “To pin or not to pin—helping app developers bullet proof their TLS connections,” in Proceedings of the 24th USENIX Security Symposium (USENIX Security 2015). USENIX Association, 2015.

[13] H. Perl, S. Fahl, and M. Smith, “You won’t be needing these any more: On removing unused certificates from trust stores,” in Proceedings of 18th International Conference on Financial Cryptography and Data Security (FC 2014). Springer Berlin Heidelberg, 2014.

[14] Y. Acar, M. Backes, S. Bugiel, S. Fahl, P. McDaniel, and M. Smith, “SoK: Lessons Learned from Android Security Research for Appified Software Platforms,” in Proceedings of the 37th IEEE Symposium on Security and Privacy (SP 2016), 2016.

[15] S. Fahl, M. Harbach, M. Oltrogge, T. Muders, and M. Smith, “Hey, you, get off of my clipboard,” in Proceedings on Financial Cryptography and Data Security (FC 2013). Springer, 2013.

[16] S. Fahl, M. Harbach, H. Perl, M. Koetter, and M. Smith, “Rethinking SSL development in an appified world,” in Proceedings of the 2013 ACM SIGSAC Conference on Computer and Communications Security (CCS 2013). ACM, 2013.

[17] D. Lazar, H. Chen, X. Wang, and N. Zeldovich, “Why does cryptographic software fail?” in Proceedings of the 5th Asia-Pacific Workshop on Systems. ACM, 2014.

[18] S. Nadi, S. Krüger, M. Mezini, and E. Bodden, “‘Jumping Through Hoops’: Why do Java Developers Struggle With Cryptography APIs?” in Proceedings of the 37th International Conference on Software Engineering (ICSE 2016), 2016.

[19] Y. Acar, M. Backes, S. Fahl, D. Kim, M. L. Mazurek, and C. Stransky, “You Get Where You’re Looking For: The Impact of Information Sources on Code Security,” in Proceedings of the 37th IEEE Symposium on Symposium on Security and Privacy (SP 2016), 2016.

[20] S. Arzt, S. Nadi, K. Ali, E. Bodden, and S. Erdweg, “Towards secure integration of cryptographic software,” in Proceedings of the 2015 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software (Onward! 2015), 2015.

[21] S. Indela, M. Kulkarni, K. Nayak, and T. Dumitra, “Helping Johnny encrypt: Toward semantic interfaces for cryptographic frameworks,” in Proceedings of the 2016 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software (Onward! 2016), 2016.

[22] B. A. Myers and J. Stylos, “Improving API usability,” Communications