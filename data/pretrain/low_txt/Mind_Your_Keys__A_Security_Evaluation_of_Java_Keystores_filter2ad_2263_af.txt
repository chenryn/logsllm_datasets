### Changes Committed to the Development Repository for Version 1.59

The following changes have been committed to the development repository and will be included in version 1.59:

- **BCFKS**: The iteration count has been increased to 51,200 for both confidentiality and integrity.
- **BCPKCS12**: The iteration count has been raised to 51,200 for confidentiality and 102,400 for integrity.

### Improved Security Guarantees

Table II outlines the enhanced security guarantees provided by keystore implementations following the fixes released by Oracle and Bouncy Castle. Additionally, Figure 4 presents the updated results of brute-force resistance benchmarks, reflecting the improved key derivation function (KDF) parameters. 

- **JCEKS and BCFKS**: These keystores now offer the best resistance to offline brute-force attacks on the confidentiality password. However, JCEKS still provides the weakest integrity mechanism. If the same password is used for both key encryption and keystore integrity, the increased protection level can be easily compromised by attacking the weaker integrity mechanism.
- **PKCS12**: Both the confidentiality and integrity mechanisms have been updated in PKCS12, which is now the default keystore in Java 9. This keystore offers a significantly higher security level compared to the previous release.

### Conclusion

In this paper, we have conducted a thorough analysis of seven keystore implementations from the Oracle JDK and the Bouncy Castle library. We described the cryptographic mechanisms used to ensure standard security properties, including protection against offline attacks. Our analysis revealed that several implementations use non-standard mechanisms, which can drastically speed up the brute-forcing of keystore passwords. We also reported new and previously unpublished attacks and defined a precise threat model under which these attacks may occur. These attacks range from breaking the confidentiality of stored keys to arbitrary code execution on remote systems and denial of service. We demonstrated how a keystore can potentially be weaponized by an attacker to spread malware.

We reported the identified security flaws to Oracle and Bouncy Castle. Most issues in the Oracle JDK were fixed in the October 2017 Critical Patch Update [44], following CVE IDs [37], [38]. Similarly, Bouncy Castle developers committed changes to address several problems discussed in this paper.

Following our analysis and the subsequent fixes, it is evident that the security offered by JKS, the default keystore in Java 8 and previous releases, is inadequate. Its improved version, JCEKS, still uses a broken integrity mechanism. For these reasons, we support Oracle's decision to switch to PKCS12 as the default keystore type in the recent Java 9 release. After the updates, PKCS12 is quite solid, although certificate protection remains weak and key encryption relies on legacy cryptographic primitives.

Keystores are the standard way to store and manage cryptographic keys and certificates in Java applications. There is a lack of in-depth analysis of keystore implementations in the literature, and the documentation does not provide sufficient information for developers to make informed choices. Alternatives provided by Bouncy Castle have been found to be less susceptible to attacks. Among the analyzed keystores, the updated BCFKS version sets the standard from a security standpoint. It relies on modern algorithms, uses adequate cryptographic parameters, and provides protection against introspection of keystore contents. Moreover, the development version of Bouncy Castle includes preliminary support for scrypt [45], [46] in BCFKS, a memory-hard function that requires a significant amount of RAM. Given the steady nature of keystore files, we argue that, in addition to approved standard functions, it would be advisable to consider future-proof cryptographic primitives to enhance resistance against parallelized attacks [18], [20].

### Acknowledgments

The authors would like to thank Stefano Calzavara and the anonymous reviewers for their valuable comments and suggestions, which helped improve the quality of the paper.

This work was partially supported by CINI Cybersecurity National Laboratory within the project FilieraSicura: Securing the Supply Chain of Domestic Critical Infrastructures from Cyber Attacks (www.filiereasicura.it), funded by CISCO Systems Inc. and Leonardo SpA.

### References

[1] “Android Studio User Guide: Sign Your App.” [Online]. Available: https://developer.android.com/studio/publish/app-signing.html
[2] “WebLogic Integration 7.0: Configuring the Keystore.” [Online]. Available: http://docs.oracle.com/cd/E13214_01/wli/docs70/b2bsecur/keystore.htm
[3] “Vulnerability Note VU#576313,” 2015. [Online]. Available: https://www.kb.cert.org/vuls/id/576313
[4] “Java Cryptography Architecture (JCA) Reference Guide,” 2016. [Online]. Available: https://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html
[5] “JDK 7 Documentation: Security Enhancements,” 2016. [Online]. Available: https://docs.oracle.com/javase/8/docs/technotes/guides/security/enhancements-7.html
[6] “Apache Tomcat SSL/TLS Configuration,” 2017. [Online]. Available: https://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html
[7] “JDK 9 Early Access Release Notes,” 2017. [Online]. Available: http://jdk.java.net/9/release-notes
[8] “Spring Crypto Utils Documentation: Keystore,” 2017. [Online]. Available: http://springcryptoutils.com/keystore.html
[9] “Update and Deprecation of TDEA,” 2017. [Online]. Available: https://beta.csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA
[10] M. Abadi and B. Warinschi, “Password-Based Encryption Analyzed,” in Proceedings of the 32nd International Colloquium on Automata, Languages and Programming, ICALP 2005, 2005, pp. 664–676.
[11] Apple inc., “iOS Security Guide,” Tech. Rep., 03 2017. [Online]. Available: https://www.apple.com/business/docs/iOS_Security_Guide.pdf
[12] R. Bardou, R. Focardi, Y. Kawamoto, L. Simionato, G. Steel, and J. Tsay, “Efficient Padding Oracle Attacks on Cryptographic Hardware,” in Proceedings of the 32nd Annual Cryptology Conference on Advances in Cryptology, CRYPTO 2012, 2012, pp. 608–625.
[13] E. Barker, “Guideline for Using Cryptographic Standards in the Federal Government: Cryptographic Mechanisms,” http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-175B.pdf, August 2016.
[14] E. Barker and A. Roginsky, “Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths (Rev. 1),” http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf, November 2015.
[15] M. Bellare, T. Ristenpart, and S. Tessaro, “Multi-instance Security and Its Application to Password-Based Cryptography,” in Proceedings of the 32nd Annual Cryptology Conference on Advances in Cryptology, CRYPTO 2012, 2012, pp. 312–329.
[16] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud, C. Fournet, M. Kohlweiss, A. Pironti, P. Strub, and J. K. Zinzindohoue, “A Messy State of the Union: Taming the Composite State Machines of TLS,” in Proceedings of the 36th IEEE Symposium on Security and Privacy, S&P 2015, 2015, pp. 535–552.
[17] K. Bhargavan and G. Leurent, “On the Practical (In-)Security of 64-bit Block Ciphers: Collision Attacks on HTTP over TLS and OpenVPN,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, CCS 2016, 2016, pp. 456–467. [Online]. Available: http://doi.acm.org/10.1145/2976749.2978423
[18] A. Biryukov, D. Dinu, and D. Khovratovich, “Argon2: New Generation of Memory-Hard Functions for Password Hashing and Other Applications,” in Proceedings of the 1st IEEE European Symposium on Security and Privacy, EuroS&P 2016, 2016.
[19] D. Bleichenbacher, “Chosen Ciphertext Attacks Against Protocols Based on the RSA Encryption Standard PKCS #1,” in Proceedings of the 18th Annual International Cryptology Conference on Advances in Cryptology, CRYPTO ’98, 1998, pp. 1–12.
[20] D. Boneh, H. Corrigan-Gibbs, and S. Schechter, “Balloon Hashing: A Memory-Hard Function Providing Provable Protection Against Sequential Attacks,” in Proceedings of the 22nd Annual International Conference on the Theory and Applications of Cryptology and Information Security, ASIACRYPT 2016, 2016.
[21] W. E. Burr, D. F. Dodson, E. M. Newton, R. A. Perlner, W. T. Polk, S. Gupta, E. A. Nabbus, U. D. of Commerce, N. I. of Standards, and Technology, Electronic Authentication Guideline: Recommendations of the National Institute of Standards and Technology - Special Publication 800-63-1, 2012.
[22] R. Clayton and M. Bond, “Experience Using a Low-Cost FPGA Design to Crack DES Keys,” in Proceedings of the 4th International Workshop on Cryptographic Hardware and Embedded Systems, CHES 2002, 2002, pp. 579–592.
[23] J. Clulow, “On the Security of PKCS#11,” in Proceedings of the 5th International Workshop on Cryptographic Hardware and Embedded Systems, CHES 2003, 2003, pp. 411–425.
[24] T. Cooijmans, J. de Ruiter, and E. Poll, “Analysis of Secure Key Storage Solutions on Android,” in Proceedings of the 4th ACM Workshop on Security and Privacy in Smartphones & Mobile Devices, SPSM 2014, 2014, pp. 11–20.
[25] Cryptosense S.A., “Mighty Aphrodite Dark Secrets of the Java Keystore,” 2016. [Online]. Available: https://cryptosense.com/mighty-aphrodite-dark-secrets-of-the-java-keystore/
[26] Y. Dodis, T. Ristenpart, and T. Shrimpton, “Salvaging Merkle-Damgård for Practical Applications,” in Proceedings of the 28th Annual International Conference on the Theory and Applications of Cryptographic Techniques, EUROCRYPT 2009, 2009, pp. 371–388.
[27] P. Gasti and K. B. Rasmussen, “On the Security of Password Manager Database Formats,” in Proceedings of the 17th European Symposium on Research in Computer Security, ESORICS 2012, 2012, pp. 770–787.
[28] P. A. Grassi, J. L. Fenton, E. M. Newton, R. A. Perlner, A. R. Regenscheid, W. E. Burr, J. P. Richer, N. B. Lefkovitz, J. M. Danker, Y. Choong, K. K. Greene, and M. F. Theofanos, “Digital Identity Guidelines: Authentication and Lifecycle Management,” https://pages.nist.gov/800-63-3/sp800-63b.html#sec5, 2017.
[29] P. Gutmann, “Lessons Learned in Implementing and Deploying Crypto Software,” in Proceedings of the 11th USENIX Security Symposium, 2002, pp. 315–325. [Online]. Available: http://dl.acm.org/citation.cfm?id=647253.720291
[30] J. P. Kaps and C. Paar, “Fast DES Implementations for FPGAs and Its Application to a Universal Key-Search Machine,” in Proceedings of the 5th Annual International Workshop in Selected Areas in Cryptography, SAC’98, 1999, pp. 234–247.
[31] P. G. Kelley, S. Komanduri, M. L. Mazurek, R. Shay, T. Vidas, L. Bauer, N. Christin, L. F. Cranor, and J. Lopez, “Guess Again (and Again and Again): Measuring Password Strength by Simulating Password-Cracking Algorithms,” in Proceedings of the 33rd IEEE Symposium on Security and Privacy, S&P 2012, 2012, pp. 523–537.
[32] J. Kelsey, B. Schneier, C. Hall, and D. Wagner, “Secure Applications of Low-Entropy Keys,” in Proceedings of the 1st International Workshop on Information Security, ISW ’97, 1997, pp. 121–134.
[33] Z. Li, W. He, D. Akhawe, and D. Song, “The Emperor’s New Password Manager: Security Analysis of Web-based Password Managers,” in Proceedings of the 23rd USENIX Security Symposium, 2014, pp. 465–479.
[34] I. Magaki, M. Khazraee, L. V. Gutierrez, and M. B. Taylor, “ASIC Clouds: Specializing the Datacenter,” in Proceedings of the 43rd International Symposium on Computer Architecture, ISCA 2016, 2016, pp. 178–190.
[35] MITRE, “CVE-2012-4929: CRIME attack,” http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4929, September 2012.
[36] MITRE, “CVE-2014-0160: Heartbleed bug,” http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0160, December 2013.
[37] MITRE, “CVE-2017-10345,” http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-10345, October 2017.
[38] MITRE, “CVE-2017-10356,” http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-10356, October 2017.
[39] K. Moriarty, B. Kaliski, J. Jonsson, and A. Rusch, “PKCS#1: RSA Cryptography Specifications (Version 2.2),” https://www.ietf.org/rfc/rfc8017.txt, November 2016.
[40] K. Moriarty, B. Kaliski, and A. Rusch, “PKCS#5: Password-Based Cryptography Specification (Version 2.1),” https://www.ietf.org/rfc/rfc8018.txt, January 2017.
[41] P. Oechslin, “Making a Faster Cryptanalytic Time-Memory Trade-Off,” in Proceedings of the 23rd Annual International Cryptology Conference on Advances in Cryptology, CRYPTO 2003, 2003, pp. 617–630.
[42] Oracle Corporation, “Java Cryptography Architecture, Standard Algorithm Name Documentation for JDK 8,” http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyStore, 2014.
[43] Oracle Corporation, Private communication, October 2017.
[44] Oracle Corporation, “Critical Patch Updates, Security Alerts and Third Party Bulletin,” October 2017. [Online]. Available: http://www.oracle.com/technetwork/security-advisory/cpuoct2017-3236626.html
[45] C. Percival, “Stronger Key Derivation via Sequential Memory-Hard Functions,” May 2009.
[46] C. Percival and S. Josefsson, “The scrypt Password-Based Key Derivation Function,” https://tools.ietf.org/html/rfc7914, August 2016.
[47] RSA Laboratories, “PKCS#12: Personal Information Exchange Syntax Standard (Version 1.0),” June 1999.
[48] RSA Laboratories, “PKCS#11 v2.30: Cryptographic Token Interface Standard,” April 2009.
[49] RSA Laboratories, “PKCS#12: Personal Information Exchange Syntax Standard (Version 1.1),” October 2012.
[50] M. Sabt and J. Traoré, “Breaking into the KeyStore: A Practical Forgery Attack Against Android KeyStore,” in Proceedings of the 21st European Symposium on Research in Computer Security (ESORICS 2016), Part II, 2016, pp. 531–548.
[51] B. Schneier, Applied Cryptography (2nd Ed.): Protocols, Algorithms, and Source Code in C. John Wiley & Sons, Inc., 1995.
[52] M. S. Turan, E. Barker, W. Burr, and L. Chen, “Recommendation for Password-Based Key Derivation. Part 1: Storage Applications,” http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf, December 2010.
[53] A. Vassilev, “Annex A: Approved Security Functions for FIPS PUB 140-2, Security Requirements for Cryptographic Modules,” http://csrc.nist.gov/publications/fips/fips140-2/fips1402annexa.pdf, April 2016.
[54] S. Vaudenay, “Security Flaws Induced by CBC Padding - Applications to SSL, IPSEC, WTLS ...” in Proceedings of the 21st International Conference on the Theory and Applications of Cryptographic Techniques Advances in Cryptology, EUROCRYPT 2002, 2002, pp. 534–546.
[55] M. Weir, S. Aggarwal, M. Collins, and H. Stern, “Testing Metrics for Password Creation Policies by Attacking Large Sets of Revealed Passwords,” in Proceedings of the 17th ACM Conference on Computer and Communications Security, CCS 2010, 2010, pp. 162–175.
[56] F. F. Yao and Y. L. Yin, “Design and Analysis of Password-Based Key Derivation Functions,” IEEE Transactions on Information Theory, vol. 51, no. 9, pp. 3292–3297, 2005.
[57] Y. Zhang, F. Monrose, and M. K. Reiter, “The Security of Modern Password Expiration: An Algorithmic Framework and Empirical Analysis,” in Proceedings of the 17th ACM Conference on Computer and Communications Security, CCS 2010, 2010.