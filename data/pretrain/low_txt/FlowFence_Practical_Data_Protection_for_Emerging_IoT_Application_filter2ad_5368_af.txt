### References

1. **Apple Inc.**  
   *Apple TV Memory Specifications.*  
   [https://developer.apple.com/library/tvos/documentation/General/Conceptual/AppleTV_PG/index.html#//apple_ref/doc/uid/TP40015241-CH12-SW1](https://developer.apple.com/library/tvos/documentation/General/Conceptual/AppleTV_PG/index.html#//apple_ref/doc/uid/TP40015241-CH12-SW1)  
   June 2016.  
   Accessed: [Date].

2. **Apple Inc.**  
   *HomeKit.*  
   [http://www.apple.com/ios/homekit/](http://www.apple.com/ios/homekit/)  
   Accessed: October 2015.

3. **Arzt, S., Rasthofer, S., Fritz, C., Bodden, E., Bartel, A., Klein, J., Le Traon, Y., Octeau, D., and McDaniel, P.**  
   *Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps.*  
   In *ACM Symposium on Programming Language Design and Implementation (PLDI)* (2014).

4. **Backes, M., Bugiel, S., and Gerling, S.**  
   *Scippa: System-centric IPC provenance on Android.*  
   In *Proceedings of the 30th Annual Computer Security Applications Conference* (2014).

5. **Behrang Fouladi and Sahand Ghanoun.**  
   *Honey, I’m Home!! Hacking ZWave Home Automation Systems.*  
   Black Hat USA, 2013.

6. **Busold, C., Heuser, S., Rios, J., Sadeghi, A.-R., and Asokan, N.**  
   *Smart and secure cross-device apps for the Internet of Advanced Things.*  
   In *Financial Cryptography and Data Security (FC)* (2015).

7. **Card, S. K., Robertson, G. G., and Mackinlay, J. D.**  
   *The information visualizer, an information workspace.*  
   In *SIGCHI Conference on Human Factors in Computing Systems* (1991).

8. **Carlini, N., Felt, A. P., and Wagner, D.**  
   *An evaluation of the Google Chrome extension security architecture.*  
   In *21st USENIX Security Symposium (USENIX Security 12)* (2012).

9. **Cheng, W., Ports, D. R., Schultz, D., Popic, V., Blankstein, A., Cowling, J., Curtis, D., Shrira, L., and Liskov, B.**  
   *Abstractions for usable information flow control in Aeolus.*  
   In *USENIX ATC* (2012).

10. **Conti, M., Crispo, B., Fernandes, E., and ZhauNIAROVICH, Y.**  
    *Crêpe: A system for enforcing fine-grained context-related policies on Android.*  
    *TIFS* (2012).

11. **Denning, T., Kohno, T., and Levy, H. M.**  
    *Computer security and the modern home.*  
    *Communications of ACM* (2013).

12. **Efstathopoulos, P., Krohn, M., VandeBogart, S., Frey, C., Ziegler, D., Kohler, E., Mazières, D., Kaashoek, F., and Morris, R.**  
    *Labels and event processes in the Asbestos operating system.*  
    In *SOSP* (2005).

13. **Enck, W., Gilbert, P., Chun, B.-G., Cox, L. P., Jung, J., McDaniel, P., and Sheth, A. N.**  
    *TaintDroid: An information-flow tracking system for real-time privacy monitoring on smartphones.*  
    In *OSDI* (2010).

14. **Enck, W., Ongtang, M., and McDaniel, P.**  
    *On lightweight mobile phone application certification.*  
    In *ACM SIGSAC Conference on Computer and Communications Security (CCS)* (2009).

15. **Ernst, M. D., Just, R., Millstein, S., Dietl, W., Pernsteiner, S., Roesner, F., Koscher, K., Barros, P. B., Bhoraskar, R., Han, S., Vines, P., and Wu, E. X.**  
    *Collaborative verification of information flow for a high-assurance app store.*  
    In *ACM SIGSAC Conference on Computer and Communications Security (CCS)* (2014).

16. **Felt, A. P., Chin, E., Hanna, S., Song, D., and Wagner, D.**  
    *Android permissions demystified.*  
    In *ACM SIGSAC Conference on Computer and Communications Security (CCS)* (2011).

17. **Felt, A. P., Egelman, S., Finifter, M., Akhawe, D., and Wagner, D.**  
    *How to ask for permission.*  
    In *USENIX Conference on Hot Topics in Security (HotSec)* (2012).

18. **Felt, A. P., Egelman, S., and Wagner, D.**  
    *I’ve got 99 problems, but vibration ain’t one: A survey of smartphone users’ concerns.*  
    In *Proceedings of the Second ACM Workshop on Security and Privacy in Smartphones and Mobile Devices* (2012).

19. **Felt, A. P., Ha, E., Egelman, S., Haney, A., Chin, E., and Wagner, D.**  
    *Android permissions: User attention, comprehension, and behavior.*  
    In *Proceedings of the Eighth Symposium on Usable Privacy and Security (SOUPS)* (2012).

20. **Fernandes, E., Jung, J., and Prakash, A.**  
    *Security analysis of emerging smart home applications.*  
    In *IEEE Symposium on Security and Privacy (S&P)* (2016).

21. **Fisher, D.**  
    *Pair of Bugs Open Honeywell Home Controllers Up to Easy Hacks.*  
    [https://threatpost.com/pair-of-bugs-open-honeywell-home-controllers-up-to-easy-hacks/113965/](https://threatpost.com/pair-of-bugs-open-honeywell-home-controllers-up-to-easy-hacks/113965/)  
    Accessed: October 2015.

22. **Giffin, D. B., Levy, A., Stefan, D., Terei, D., Mazières, D., Mitchell, J. C., and Russo, A.**  
    *Hails: Protecting data privacy in untrusted web applications.*  
    In *OSDI* (2012).

23. **Google.**  
    *Project Brillo.*  
    [https://developers.google.com/brillo/](https://developers.google.com/brillo/)  
    Accessed: October 2015.

24. **Google.**  
    *Project Weave.*  
    [https://developers.google.com/weave/](https://developers.google.com/weave/)  
    Accessed: October 2015.

25. **Google Android.**  
    *Requesting Permissions at Run-time.*  
    [http://developer.android.com/training/permissions/requesting.html](http://developer.android.com/training/permissions/requesting.html)  
    Accessed: February 2016.

26. **Google Developers.**  
    *Google Fit Developer Documentation.*  
    [https://developers.google.com/fit/](https://developers.google.com/fit/)  
    Accessed: February 2016.

27. **Google Nest.**  
    *How much bandwidth will Nest cam use?*  
    [https://nest.com/support/article/How-much-bandwidth-will-Nest-Cam-use](https://nest.com/support/article/How-much-bandwidth-will-Nest-Cam-use)  
    Accessed: June 2016.

28. **Hachman, M.**  
    *Want to unlock your door with your face? Windows 10 for IoT Core promises to do just that.*  
    [http://www.pcworld.com/article/2962330/internet-of-things/want-to-unlock-your-door-with-your-face-windows-10-for-iot-core-promises-to-do-just-that.html](http://www.pcworld.com/article/2962330/internet-of-things/want-to-unlock-your-door-with-your-face-windows-10-for-iot-core-promises-to-do-just-that.html)  
    Accessed: February 2016.

29. **Helsedahl, A.**  
    *A Hacker’s-Eye View of the Internet of Things.*  
    [http://recode.net/2015/04/07/a-hackers-eye-view-of-the-internet-of-things/](http://recode.net/2015/04/07/a-hackers-eye-view-of-the-internet-of-things/)  
    Accessed: October 2015.

30. **Heule, S., Rifkin, D., Russo, A., and Stefan, D.**  
    *The most dangerous code in the browser.*  
    In *15th Workshop on Hot Topics in Operating Systems (HotOS XV)* (Kartause Ittingen, Switzerland, May 2015), USENIX Association.

31. **Hritcu, C., Greenberg, M., Karel, B., Pierce, B. C., and Morrisett, G.**  
    *All your ifcexception are belong to us.*  
    In *Proceedings of the 2013 IEEE Symposium on Security and Privacy (SP)* (2013).

32. **Hritcu, C., Greenberg, M., Karel, B., Pierce, B. C., and Morrisett, G.**  
    *All your ifcexception are belong to us.*  
    In *Security and Privacy (SP), 2013 IEEE Symposium on* (2013), IEEE.

33. **Jana, S., Molnar, D., Moshchuk, A., Dunn, A., Livshits, B., Wang, H. J., and Ofek, E.**  
    *Enabling fine-grained permissions for augmented reality applications with recognizers.*  
    In *USENIX Security Symposium* (2013).

34. **Jana, S., Narayanan, A., and Shmatikov, V.**  
    *A Scanner Darkly: Protecting User Privacy from Perceptual Applications.*  
    In *IEEE Symposium on Security and Privacy (S&P)* (2013).

35. **Jia, L., Aljuraidan, J., Fragkaki, E., Bauer, L., Stroucken, M., Fukushima, K., Kiyomoto, S., and Miyake, Y.**  
    *Run-time enforcement of information-flow properties on Android.*  
    In *European Symposium on Research in Computer Security* (2013).

36. **Krohn, M., Yip, A., Brodsky, M., Cliffer, N., Kaashoek, M. F., Kohler, E., and Morris, R.**  
    *Information flow control for standard OS abstractions.*  
    In *SOSP* (2007).

37. **Lee, S., Wong, E. L., Goel, D., Dahlin, M., and Shmatikov, V.**  
    *Box: A platform for privacy-preserving apps.*  
    In *NSDI* (2013).

38. **Lomas, N.**  
    *Critical Flaw Identified in ZigBee Smart Home Devices.*  
    [http://techcrunch.com/2015/08/07/critical-flaw-identified-in-zigbee-smart-home-devices/](http://techcrunch.com/2015/08/07/critical-flaw-identified-in-zigbee-smart-home-devices/)  
    Accessed: October 2015.

39. **Myers, A. C.**  
    *JFlow: Practical mostly-static information flow control.*  
    In *SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL)* (1999).

40. **Nadkarni, A., and Enck, W.**  
    *Preventing accidental data disclosure in modern operating systems.*  
    In *Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security* (2013), ACM.

41. **Pansarasa, J.**  
    *Lights-After-Dark SmartThings App.*  
    [https://github.com/jpansarasa/SmartThings/blob/master/smartapps/elasticdev/lights-after-dark.src/lights-after-dark.groovy](https://github.com/jpansarasa/SmartThings/blob/master/smartapps/elasticdev/lights-after-dark.src/lights-after-dark.groovy)  
    Accessed: February 2016.

42. **Paupore, J., Fernandes, E., Prakash, A., Roy, S., and Ou, X.**  
    *Practical always-on taint tracking on mobile devices.*  
    In *USENIX Workshop on Hot Topics in Operating Systems (HotOS)* (2015).

43. **Rahmati, A., and Madhyastha, H. V.**  
    *Context-specific access control: Conforming permissions with user expectations.*  
    In *ACM Workshop on Security and Privacy in Smartphones & Mobile Devices (SPSM)* (2015).

44. **Roesner, F., and Kohno, T.**  
    *Securing embedded user interfaces: Android and beyond.*  
    In *USENIX Security Symposium* (2013).

45. **Roesner, F., Kohno, T., Moshchuk, A., Parno, B., Wang, H. J., and Cowan, C.**  
    *User-driven access control: Rethinking permission granting in modern operating systems.*  
    In *IEEE S&P* (2012).

46. **Roy, I., Porter, D. E., Bond, M. D., McKinley, K. S., and Witchel, E.**  
    *Laminar: Practical fine-grained decentralized information flow control.*  
    In *PLDI* (2009).

47. **Russello, G., Conti, M., Crispo, B., and Fernandes, E.**  
    *Moses: Supporting operation modes on smartphones.*  
    In *ACM Symposium on Access Control Models and Technologies (SACMAT)* (2012).

48. **Ruwase, O., Gibbons, P. B., Mowry, T. C., Ramachandran, V., Chen, S., Kozuch, M., and Ryan, M.**  
    *Parallelizing dynamic information flow tracking.*  
    In *Proceedings of the Twentieth Annual Symposium on Parallelism in Algorithms and Architectures* (2008).

49. **Samsung.**  
    *SmartThings.*  
    [http://www.smartthings.com/](http://www.smartthings.com/)  
    Accessed: November 2015.

50. **Samsung SmartThings.**  
    *Samsung SmartThings Memory Specifications.*  
    [https://community.smartthings.com/t/the-next-generation-of-smartthings-is-here/21521](https://community.smartthings.com/t/the-next-generation-of-smartthings-is-here/21521)  
    Accessed: June 2016.

51. **Samsung SmartThings.**  
    *SmartThings Capabilities Reference.*  
    [http://docs.smartthings.com/en/latest/capabilities-reference.html](http://docs.smartthings.com/en/latest/capabilities-reference.html)  
    Accessed: February 2016.

52. **Samsung SmartThings.**  
    *What happens if I lose my internet connection or the power goes out?*  
    [https://support.smartthings.com/hc/en-us/articles/205956960-What-happens-if-the-power-goes-out-or-I-lose-my-internet-connection-](https://support.smartthings.com/hc/en-us/articles/205956960-What-happens-if-the-power-goes-out-or-I-lose-my-internet-connection-)  
    Accessed: May 2016.

53. **Sarwar, G., Mehani, O., Boreli, R., and Kaafar, M. A.**  
    *On the effectiveness of dynamic taint analysis for protecting against private information leaks on Android-based devices.*  
    In *International Conference on Security and Cryptography (SECRYPT)* (2013).

54. **Schwartz, E. J., Avgerinos, T., and Brumley, D.**  
    *All you ever wanted to know about dynamic taint analysis and forward symbolic execution (but might have been afraid to ask).*  
    In *IEEE Symposium on Security and Privacy (S&P)* (2010).

55. **Stefan, D., Russo, A., Buiras, P., Levy, A., Mitchell, J. C., and Mazières, D.**  
    *Addressing covert termination and timing channels in concurrent information flow systems.*  
    In *ACM SIGPLAN Notices* (2012).

56. **Stefan, D., Russo, A., Mitchell, J. C., and Mazières, D.**  
    *Flexible dynamic information flow control in Haskell.*  
    In *Haskell Symposium* (September 2011), ACM SIGPLAN.

57. **Stefan, D., Yang, E. Z., Marchenko, P., Russo, A., Herman, D., Karp, B., and Mazières, D.**  
    *Protecting users by confining JavaScript with COWL.*  
    In *OSDI* (2014).

58. **Templeman, R., Rahman, Z., Crandall, D., and Kapadia, A.**  
    *PlaceRaider: Virtual theft in physical spaces with smartphones.*  
    In *ISOC Network and Distributed System Security Symposium (NDSS)* (2013).

59. **Vachharajani, N., Bridges, M. J., Chang, J., Rangan, R., Ottoni, G., Blome, J. A., Reis, G. A., Vachharajani, M., and August, D. I.**  
    *Rifle: An architectural framework for user-centric information-flow security.*  
    In *Microarchitecture, 2004. MICRO-37 2004. 37th International Symposium on* (2004).

60. **Wei, F., Roy, S., Ou, X., and Robby.**  
    *Amandroid: A precise and general inter-component data flow analysis framework for security vetting of Android apps.*  
    In *ACM SIGSAC Conference on Computer and Communications Security (CCS)* (2014).

61. **Wetherell, J.**  
    *Android Heart Rate Monitor App.*  
    [https://github.com/phishman3579/android-heart-rate-monitor](https://github.com/phishman3579/android-heart-rate-monitor)  
    Accessed: February 2016.

62. **Xu, Y., Hunt, T., Kwon, Y., Georgiev, M., Shmatikov, V., and Witchel, E.**  
    *Earp: Principled storage, sharing, and protection for mobile apps.*  
    In *NSDI* (2016).

63. **Xu, Y., and Witchel, E.**  
    *Maxoid: Transparently confining mobile applications with custom views of state.*  
    In *Proceedings of the Tenth European Conference on Computer Systems* (2015), ACM.

64. **Yoon, M.-K., Salajegheh, N., Chen, Y., and Christodorescu, M.**  
    *PIFT: Predictive Information Flow Tracking.*  
    In *21st International Conference on Architectural Support for Programming Languages and Operating Systems* (2016).

65. **Zeldovich, N., Boyd-Wickizer, S., Kohler, E., and Mazières, D.**  
    *Making information flow explicit in HiStar.*  
    In *OSDI* (2006).

66. **Zhang, D., Askarov, A., and Myers, A. C.**  
    *Predictive mitigation of timing channels in interactive systems.*  
    In *ACM SIGSAC Conference on Computer and Communications Security (CCS)* (2011).

67. **Zhou, Y., and Jiang, X.**  
    *Dissecting Android malware: Characterization and evolution.*  
    In *IEEE S&P* (2012).

### Appendix A: FlowFence API

We summarize the object-oriented FlowFence API for developers in Table 4. There are two kinds of API: QM-management and Within-QM.

#### QM-management API
Developers use the QM-management API to request loading QMs into sandboxes, make QM calls, and receive opaque handles as return values. The primary data types are `QM` and `Handle`.

- **Data Types:**
  - `QM`: Represents a reference to a loaded QM.
  - `Handle`: Represents an opaque handle created by FlowFence as a return value of a QM.

- **API:**
  - `QM ctor = resolveCtor(T)`: Resolve the constructor for QM `T` and return a reference to it.
  - `QM m = resolveM(retType, T, methStr, [paramTypes])`: Resolve an instance/static method of a QM, loading the QM into a sandbox if necessary.
  - `Handle ret = QM.call([argList])`: Call a method on a loaded QM and return an opaque handle as the result.
  - `subscribeEventChannel(appID, QM, channelName)`: Subscribe to a channel for updates and register a QM to be executed automatically whenever new data is placed on the channel.

#### Within-QM API
The Within-QM API is available to QMs while they are executing within a sandbox. Currently, FlowFence has two data types available for QMs: `KVStore` and `Trusted API`.

- **Data Types:**
  - `KVStore`: Provides methods to interact with the Key-Value Store.
  - `Trusted API`: Offers facilities like network communication, logging, and smart home control (our prototype has a bridge to SmartThings).

- **API:**
  - `KVStore kvs = getKVStore(appID, name)`: Get a reference to a named KVStore.
  - `kvs.put(key, value, taint label)`: Put a (key, value) pair into the KVStore along with a taint label. Any existing taint of the calling QM will be automatically associated with the value’s final set of taint labels.
  - `T value = kvs.get(key)`: Get the value of type `T` corresponding to the specified key and taint the QM with the appropriate set of taint labels.
  - `getTrustedAPI(apiName).invoke([params])`: Call a Trusted API method to declassify sensitive data.
  - `getChannel(chanName).fireEvent(taint label, [params])`: Fire an event with parameters, specifying a taint label. Any existing taint labels of the calling QM will be added automatically.

#### Semantics
- **Opaque Handle**: Data is stored in the Trusted Service, with its taint labels.
- **Reference to a QM**: A reference to a QM of type `T`, on which developers can issue method calls.
- **Resolve Constructor**: Resolve the constructor for QM `T` and return a reference to it.
- **Resolve Method**: Resolve an instance/static method of a QM, loading the QM into a sandbox if necessary.
- **Call Method**: Call a method on a loaded QM and return an opaque handle as the result.
- **Subscribe to Channel**: Subscribe to a channel for updates and register a QM to be executed automatically whenever new data is placed on the channel.
- **Key-Value Store**: Provides methods to interact with the Key-Value Store.
- **Get KVStore**: Get a reference to a named KVStore.
- **Put KVStore**: Put a (key, value) pair into the KVStore along with a taint label.
- **Get KVStore**: Get the value of type `T` corresponding to the specified key and taint the QM with the appropriate set of taint labels.
- **Call Trusted API**: Call a Trusted API method to declassify sensitive data.
- **Fire Event**: Fire an event with parameters, specifying a taint label.

**Table 4: FlowFence API Summary**
- **QM-management data types and API** are only available to the untrusted portion of an app that does not operate with sensitive data.
- **Within-QM data types and API** are available only to QMs.