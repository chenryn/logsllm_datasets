### 7. Conclusion

Failure detection is a fundamental abstraction for fault-tolerant distributed systems. However, the binary model of classical failure detectors limits the development of failure detection as a generic service because it combines monitoring and interpretation. The accrual failure detectors presented in this paper decouple these two tasks by outputing a suspicion level rather than a binary value, allowing applications to interpret this value. Ideally, monitoring is performed by a single service running on each machine, while the interpretation of the suspicion level is left to each application process. This service can be implemented as a daemon, a linked library, or a kernel service, depending on the desired tradeoff between intrusiveness and performance.

This paper provides a rigorous definition for accrual failure detectors that is compatible with the seminal work of Chandra and Toueg [7]. Specifically, we present important conditions for the suspicion level under which an accrual failure detector (♦P_ac) is computationally equivalent to an eventually perfect binary failure detector (i.e., of class ♦P). This equivalence is significant because it demonstrates that accrual failure detectors do not introduce additional synchrony assumptions compared to their binary counterparts. However, equivalence does not imply that accrual failure detectors cannot be more efficient or expressive. In fact, we extensively argue the architectural advantages of accrual failure detectors and present usage patterns that are challenging to handle with a binary failure detector.

We have also outlined four different ways to implement accrual failure detectors and discussed their respective advantages. This is not an exhaustive list, and there is room for developing many other implementations in the future.

### Acknowledgments

The example discussed in the introduction was kindly suggested to us by Francisco V. Brasileiro. The authors are also grateful to the following individuals for their insightful comments and suggestions: Adel Cherif, Matti Hiltunen, Michel Raynal, Robbert van Renesse, Richard D. Schlichting, Yoichi Shinoda, Makoto Takizawa, and Paulo Veríssimo.

### References

[1] M. Aguilera, W. Chen, and S. Toueg. Using the heartbeat failure detector for quiescent reliable communication and consensus in partitionable networks. Theor. Comput. Science, 220(1):3–30, June 1999.
[2] M. Aguilera, C. Delporte-Gallet, H. Fauconnier, and S. Toueg. Thrifty generic broadcast. In M. Herlihy, editor, Proc. 14th Intl. Symp. on Distributed Computing (DISC’00), LNCS 1914, pages 268–282, Oct. 2000.
[3] M. Bertier, O. Marin, and P. Sens. Implementation and performance evaluation of an adaptable failure detector. In Proc. IEEE Intl. Conf. on Dependable Systems and Networks (DSN’02), pages 354–363, June 2002.
[4] M. Bertier, O. Marin, and P. Sens. Performance analysis of a hierarchical failure detector. In Proc. IEEE Intl. Conf. on Dependable Systems and Networks (DSN’03), pages 635–644, June 2003.
[5] A. Bondavalli, S. Chiaradonna, F. Di Giandomenico, and F. Grandoni. Discriminating fault rate and persistency to improve fault treatment. In Proc. 27th Intl. Symp. on Fault-Tolerant Computing (FTCS-27), pages 354–362, June 1997.
[6] T. Chandra, V. Hadzilacos, and S. Toueg. The weakest failure detector for solving consensus. J. ACM, 43(4):685–722, July 1996.
[7] T. Chandra and S. Toueg. Unreliable failure detectors for reliable distributed systems. J. ACM, 43(2):225–267, 1996.
[8] W. Chen, S. Toueg, and M. Aguilera. On the quality of service of failure detectors. IEEE Trans. on Computers, 51(5):561–580, May 2002.
[9] F. Chu. Reducing Ω to ♦W. Inf. Process. Lett., 67(6):289–293, Sept. 1998.
[10] W. Cirne, F. Brasileiro, J. Sauvé, N. Andrade, et al. Grid computing for Bag-of-Tasks applications. In Proc. 3rd IFIP Conf. on E-Commerce, E-Business and E-Government, Sept. 2003.
[11] F. Cosquer, L. Rodrigues, and P. Veríssimo. Using tailored failure suspectors to support distributed cooperative applications. In Proc. 7th IASTED Intl. Conf. on Parallel and Distributed Computing and Systems (PDCS’95), pages 352–356, Oct. 1995.
[12] X. Défago, P. Urbán, N. Hayashibara, and T. Katayama. On accrual failure detectors. RR IS-RR-2004-11, JAIST, Ishikawa, Japan, May 2004.
[13] J. Dunagan, N. Harvey, M. Jones, D. Kostic, et al. FUSE: Lightweight guaranteed distributed failure notification. In Proc. 6th Symp. on Operating Systems Design and Implementation (OSDI’04), Dec. 2004.
[14] C. Dwork, N. A. Lynch, and L. Stockmeyer. Consensus in the presence of partial synchrony. J. ACM, 35(2):288–323, Apr. 1988.
[15] R. Ekwall, A. Schiper, and P. Urbán. Token-based atomic broadcast using unreliable failure detectors. In Proc. 23nd IEEE Intl. Symp. on Reliable Distributed Systems (SRDS’04), pages 52–65, Oct. 2004.
[16] P. Felber, X. Défago, R. Guerraoui, and P. Oser. Failure detectors as first-class objects. In Proc. 1st Intl. Symp. on Distributed-Objects and Applications (DOA’99), pages 132–141, Sept. 1999.
[17] C. Fetzer, M. Raynal, and F. Tronel. An adaptive failure detection protocol. In Proc. 8th IEEE Pacific Rim Symp. on Dependable Computing (PRDC’01), pages 146–153, Dec. 2001.
[18] R. Friedman. Fuzzy group membership. In A. Schiper, A. Shvartsman, H. Weatherspoon, and B. Y. Zhao, editors, Future Directions in Distributed Computing, LNCS 2584, pages 114–118, Jan. 2003. Position paper.
[19] R. Friedman and G. Tcharny. Evaluating failure detection in mobile ad-hoc networks. TR CS-2003-06, Technion, Israel, Oct. 2003.
[20] R. Friedman and G. Tcharny. Stability detection in mobile ad-hoc networks. TR CS-2003-12, Technion, Israel, Nov. 2003.
[21] N. Hayashibara. Accrual Failure Detectors. PhD thesis, JAIST, Ishikawa, Japan, June 2004.
[22] N. Hayashibara, X. Défago, and T. Katayama. Flexible failure detection with κ-fd. RR IS-RR-2004-006, JAIST, Ishikawa, Japan, Feb. 2004.
[23] N. Hayashibara, X. Défago, R. Yared, and T. Katayama. The ϕ accrual failure detector. In Proc. 23nd IEEE Intl. Symp. on Reliable Distributed Systems (SRDS’04), pages 66–78, Oct. 2004.
[24] M. Hurfin, A. Mostéfaoui, and M. Raynal. A versatile family of consensus protocols based on Chandra-Toueg’s unreliable failure detectors. IEEE Trans. on Computers, 51(4):395–408, Apr. 2002.
[25] A. Mostéfaoui, E. Mourgaya, and M. Raynal. Asynchronous implementation of failure detectors. In Proc. IEEE Intl. Conf. on Dependable Systems and Networks (DSN’03), pages 351–360, June 2003.
[26] A. Mostéfaoui, D. Powell, and M. Raynal. A hybrid approach for building eventually accurate failure detectors. In Proc. 10th IEEE Pacific Rim Intl. Symp. on Dependable Computing (PRDC), pages 57–65, Mar. 2004.
[27] A. Mostéfaoui, M. Raynal, and C. Travers. Crash-resilient time-free eventual leadership. TR, IRISA, Rennes, France, Apr. 2004.
[28] L. Sampaio, F. Brasileiro, W. Cirne, and J. Figueiredo. How bad are wrong suspicions? Towards adaptive distributed protocols. In Proc. IEEE Intl. Conf. on Dependable Systems and Networks (DSN’03), pages 551–560, June 2003.
[29] R. van Renesse, Y. Minsky, and M. Hayden. A gossip-style failure detection service. In N. Davies, K. Raymond, and J. Seitz, editors, Middleware’98, pages 55–70, The Lake District, UK, 1998.

### Appendix

This appendix presents technical details that are not essential to convey the ideas presented in the paper but are important to justify the correctness of the argumentation (e.g., complete proofs of the theorems).

#### A.1 Proof for the Transformation from Accrual (♦P_ac) to Binary (♦P)

**Lemma 7 (Strong Completeness)**  
Given an accrual failure detector \( D_{ac} \) of class \( \Diamond P_{ac} \), Algorithm 1 satisfies the property of Strong Completeness.

**Proof:**  
Strong completeness requires that every faulty process is eventually suspected forever by every correct process. Consider a faulty process \( p \) and some correct process \( q \) that monitors \( p \). We must show that there is a time after which \( p \) is permanently suspected by \( q \).

Consider the system after stabilization, i.e., when \( sl_{qp} \) is increasing and increases by at least once every \( Q \) consecutive queries for some positive \( Q \). We first show that there is a last T-transition (if T-transitions occur at all). We show this by proving that no more than \( Q \) T-transitions may occur after stabilization. Suppose that stabilization and \( Q \) T-transitions have already occurred. As the run length for trusting \( L_{trust} \) increases by one at each T-transition, \( L_{trust} > Q \) forever. As only run lengths shorter than \( Q \) will ever appear, the condition \( l > L_{trust} \) will never hold. Moreover, as \( sl_{qp} \) is monotonously increasing, \( sl > L_{trust} \) will never hold again.

Now, consider a time after which both stabilization and the last T-transition have occurred. If \( p \) is suspected at this time, it will be suspected forever, and the proof is complete. If \( p \) is trusted at this time, an S-transition will occur, as \( sl_{qp} \) goes to infinity, and thus \( sl > SL_{susp} \) will eventually hold forever, whatever the value of \( SL_{susp} \) may be. After the S-transition, \( p \) will be suspected forever, and the proof is complete. \(\blacksquare\)

**Lemma 8 (Eventual Strong Accuracy)**  
Given an accrual failure detector \( D_{ac} \) of class \( \Diamond P_{ac} \), Algorithm 1 satisfies the property of Eventual Strong Accuracy.

**Proof:**  
Eventual strong accuracy requires that, after some time, no correct process is suspected by a correct process. We prove the lemma by considering two correct processes \( p \) and \( q \) chosen arbitrarily, and such that \( q \) monitors \( p \). We must show that there is a time after which \( p \) is never suspected. We can rely on the existence of a bound \( SL_{max} \) on the suspicion level \( sl_{qp} \).

We first show that there is a last S-transition (if S-transitions occur at all). We show this by proving that no more than \( \lfloor SL_{max} / \Delta \rfloor \) S-transitions occur, where \( \Delta \) is the resolution of the suspicion level (see Definition 1). Suppose that \( \lfloor SL_{max} / \Delta \rfloor \) S-transitions have already occurred. As \( S_{susp} \) increases by at least \( \Delta \) upon every S-transition, \( SL_{susp} \geq SL_{max} \), and hence \( sl > SL_{susp} \) will never hold again. We have shown that the condition to trigger an S-suspicion will never hold again.

Now, consider the system after the last S-transition (or any time if no S-transition occurs). If \( p \) is trusted at this time, it will be trusted forever. If \( p \) is suspected at this time, a T-transition will occur, as we show below. After the T-transition, \( p \) will be trusted forever, and the proof is complete.

We must now prove that a T-transition occurs. Let \( s_i \) denote the value that \( s \) takes during the \( i \)-th query. If the sequence \( s_i \) is not monotonously increasing, the condition \( sl < L_{trust} \) will hold at least once, and thus a T-transition occurs. As \( p \) and \( q \) were chosen arbitrarily, we have shown that Eventual Strong Accuracy holds. \(\blacksquare\)

**Theorem 9**  
Algorithm 1 transforms an accrual failure detector of class \( \Diamond P_{ac} \) into one of class \( \Diamond P \).

**Proof:**  
Follows from Lemma 7 (Strong completeness) and Lemma 8 (Eventual strong accuracy). \(\blacksquare\)

#### A.2 Proof for the Transformation from Binary (♦P) to Accrual (♦P_ac)

**Lemma 10 (Accruement)**  
Given a binary failure detector \( D \) of class \( \Diamond P \), Algorithm 2 satisfies the property of Accruement (Prop. 1).

**Proof:**  
Consider a faulty process \( p \) and a correct process \( q \). Since \( p \) is faulty, \( D \) ensures that \( p \) is eventually suspected permanently (Strong completeness). Consider the system after the last S-transition (or from the start if \( p \) is never trusted). \( sl_{qp}(t) \) is obviously increasing by \( \Delta \) upon every query. We have thus shown that Accruement holds. \(\blacksquare\)

**Lemma 11 (Upper Bound)**  
Given a binary failure detector \( D \) of class \( \Diamond P \), Algorithm 2 satisfies the property of Upper Bound (Prop. 2).

**Proof:**  
Consider two correct processes \( p \) and \( q \). Since \( p \) is correct, \( D \) ensures that \( p \) is eventually trusted permanently (Strong eventual accuracy). Consider a point in time after the last T-transition (or any time if \( p \) is never suspected). Every query after this point in time returns 0. A suitable upper bound for \( sl_{qp} \) is thus the highest suspicion level returned up to this point in time. We have thus shown that Upper Bound holds. \(\blacksquare\)

**Theorem 12**  
Algorithm 2 transforms \( \Diamond P \) into \( \Diamond P_{ac} \).

**Proof:**  
Follows directly from Lemma 10 (Accruement) and Lemma 11 (Upper Bound). \(\blacksquare\)

#### A.3 Proofs for the Theorems about Quality of Service

In this section, we present the proofs for the theorems in Section 4.4. We start by presenting Algorithm 3, an unambiguous description of the failure detector \( D_0^T \) (where \( T \) is a threshold function).

```plaintext
status := trust
```