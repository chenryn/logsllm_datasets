### Table 1: Account Information Available Through Social Snapshots Compared with Facebook’s Download Functionality

Our third-party application fetches Facebook elements of a given account and stores them as separate JSON files. Each JSON file corresponds to a specific request, and the filenames follow a consistent format. The first part of the filename is the ID of an API object, and the second part specifies the requested connection detail. For example, “123456789~friends.request” contains all friends of the object with ID 123456789, formatted as a JSON object.

To improve performance, our application is configured not to download any videos or photos directly through the Graph API. Instead, it collects direct links to photos, which are then downloaded during the analysis phase by the digital image forensics module. Once the third-party application has finished fetching account data, it creates a tarball containing the social snapshot data.

### Fetching Contact Details and Overcoming Challenges

The social snapshot client was adapted to fetch contact details of given user profiles and automatically add our third-party application to a target account. One particular challenge we faced was reliably obtaining the list of friends for a given target account. This was complicated by the changing layout of friend lists and Facebook's practice of displaying only a random subset of friends at any given time. We overcame this by fetching the friend list through our third-party application and sending the profile links back to the client. The client generates requests for each friend of the target user and sends them to a Selenium server, which automates a Mozilla Firefox browser. The responses from the automated web browser are parsed by the client, and contact information is extracted using XPath queries. The client then creates a CSV file containing the contact information of all users.

We deployed our client application in a virtual machine running a standard Ubuntu Desktop with a patched Selenium server. Our social snapshot analysis module implements parsers for both the fetched JSON Graph API requests and the CSV contact details. The analysis module merges the results from the social snapshot client and the third-party application into a single database, implemented in Java.

### Digital Image Forensics Module

We extended our digital image forensics module to automatically search for photo links within a social snapshot and download them from Facebook's content distribution network. The hijack module, which strips cookies from a monitored network connection, did not require any Facebook-specific modifications.

### Test Subjects and Setting

We recruited human volunteers via email, providing detailed experiment instructions and a briefing on how their personal information would be stored and analyzed. Volunteers were informed about the ethical considerations: no Facebook account data would be modified, and the social snapshots would be stored in an encrypted file container. Personal information would not be shared with third parties or published. The invitation was sent to researchers and students in computer science, and 25 people consented to temporarily provide access to their Facebook accounts. Volunteers temporarily reset their Facebook account credentials, which we used to create a social snapshot of their accounts. After creating the social snapshot, we instructed the test group to reset their account passwords.

### Configuration and Prioritization

Our third-party social snapshot application was configured to fetch an extensive account snapshot. We found that 350 simultaneous API requests provided the best performance. The application was configured to fetch the following elements recursively:

- **Highest Priority (priority = 3):** inbox, outbox, friends, home, feed, photos, albums, statuses
- **Medium Priority (priority = 2):** tagged, notes, posts, links, groups, videos, events
- **Lowest Priority (priority = 1):** activities, interests, music, books, movies, television, likes

These priority settings ensure that important information is fetched first. Elements with highest and medium priority are fetched with a depth of 2, while those with the lowest priority are gathered with a depth of 1. This means that a social snapshot includes, for example, a user's friend's groups, tagged pictures, and links, but not pictures or comments from their favorite television series. These settings imply that not only the target's account is fully fetched, but also social data on the target's friends is collected.

### Performance Results

Figure 3 illustrates the time required by our third-party social snapshot application to snapshot the test accounts through the Graph API. On average, the application required 12.79 minutes, with an average transfer rate of 93.1 kB per second.

**Figure 3: Required Time and Transfer Rate of Our Social Snapshot Third-Party Application**

The time required for crawling contact details with our automated web browser is outlined in Figure 4. Test accounts were crawled within 14 minutes on average, with an average elapsed time of 3.4 seconds per user profile page.

**Figure 4: Time Required for Crawling Contact Details with Social Snapshot Client and Automated Web Browser**

### Completeness of Social Snapshots

As illustrated in Figure 5, our third-party application found and fetched an average of 9,802 Facebook account elements per test subject. The storage size of the fetched JSON files averaged 72.29 MB. Listing 1 shows an anonymized example of the fetched Facebook account elements, representing the basic information of a user "John Doe" formatted as a JSON object.

**Listing 1: Example of Collected JSON Element**
```json
{
  "id": "12345678",
  "name": "John Doe",
  "first_name": "John",
  "last_name": "Doe",
  "link": "http://www.facebook.com/johndoe",
  "username": "johndoe",
  "birthday": "04/01/1975",
  "hometown": {
    "id": "",
    "name": null
  },
  "quotes": "social snapshot your account!.",
  "gender": "male",
  "email": "johndoe@example.com",
  "timezone": 2,
  "locale": "en_US",
  "verified": true,
  "updated_time": "2011-05-15T13:05:19+0000"
}
```

We used our analysis module to verify the integrity of the collected snapshots, confirming that every entry in the fetched contact details CSV files had corresponding entries in the retrieved JSON files, and that no invalid responses were received through the Graph API. We also implemented a mechanism to parse image-based email addresses by fetching higher resolution versions of the images and using GNU Ocrad to resolve them into text.

Compared to data collected via the standard web interface, our social snapshot contains additional information tokens, such as exact creation timestamps. We used our image forensic module to download all unique photos in the highest available resolution, resulting in an average of 3,250 files or 225.28 MB per test account.

**Figure 5: Account Elements Fetched Through Social Snapshot Third-Party Application**

**Figure 6: Additional Contact Details Crawled with Social Snapshot Client and Automated Web Browser**

### Indicative Cookie Authentication Experiments

We performed indicative experiments to verify our cookie authentication method on Facebook. Both non-persistent and persistent cookie authentication were tested. Persistent cookies are valid for 30 days on Facebook. We successfully tested our social snapshot tool with the hijack module on non-persistent users over an unencrypted test WiFi network and validated our application with persistent cookies extracted from web browser profile files. In one test setting, we observed up to 50 valid social networking sessions within one hour on our university campus WiFi.

### Forensic Analysis of Social Snapshots

Collected social snapshots enable the forensic analysis of social network activity of specific users and their online peers. Since the entire content of a user's social networking account, including exact timestamps, is collected, timelines can be easily generated. Social snapshots offer a valuable source for further investigations. For example, collected email addresses can be used to identify users on other online platforms, and media data can be matched with evidence from traditional forensic images.

**Figure 7: Example Timeline Created from Collected Social Snapshot**

Figure 7 shows an example of a generated timeline for a fictitious forensic investigation on the "Dalton Gang." The gang is suspected of committing an aggravated bank robbery between 8:00 AM and 8:30 AM on January 13, 2011. All four gang members have an alibi, claiming they were on a joint getaway with their families. Bob Dalton, the head of the gang, presents a group photo posted on Facebook on the day of the robbery. To validate the posting, five close friends of Bob gave consent for their social networking accounts to be snapshotted. While the posted group photo correctly showed up with the specified date in all five social snapshots, an interesting post from Bob Dalton’s wife was collected in two of the snapshots. The post, dated one week before the robbery, read, "Off to the beach, for our family group picture. Hehe."

Investigators began to suspect that the alibi picture had been taken a week beforehand to fabricate an alibi. Unaware to Bob's brother, Grat Dalton, investigators snapshotted his account using the hijack module during his daily Internet browsing, exploiting an insecure WiFi connection. Analyzing Grat’s social snapshot, investigators noticed private messages exchanged with Bob on the day of the robbery. The first message, sent at 3:20:32 PM, read, "Grat, That was almost too easy today... we should start thinking on how to spend all the Benjamins:-). Greetings, Bob." In the second message, Grat replied at 6:27:12 PM, "Yeah, almost too easy:-) Great idea with the group picture at the beach btw, that will cause them some serious teeth gnashing."

With this further evidence of a possible false alibi, investigators performed a house search on Bob Dalton’s home. While the search did not reveal any stolen money, Bob Dalton’s personal computer was seized. Among the digital documents and images, investigators found a valid Facebook authentication cookie on Bob’s forensic image. Using the extracted authentication cookie, the investigator created a social snapshot of Bob’s social networking account and compared it with Grat’s social snapshot.