### Strong and Expressive Confidentiality and Integrity Policies

Many of the applications' security requirements can be expressed as security labels, which are enforced by the Jif 3.0 compiler.

As language-based information-flow control (IFC) matures and IFC tools become more robust and useful, we anticipate that writing and understanding programs with IFC will become easier. This work represents a significant step towards the broader adoption of IFC by providing a framework in which practical applications can be designed, implemented, and deployed. The Jif 3.0 compiler, runtime system, and the SIF (Secure Information Flow) framework are all publicly available.

### Acknowledgments

We thank Nate Nystrom, Lantian Zheng, Xin Qi, and Jed Liu for their valuable suggestions. This research was supported in part by NSF awards 0430161 and 0627649, an Alfred P. Sloan Research Fellowship, and by TRUST (The Team for Research in Ubiquitous Secure Technology) and AF-TRUST (Air Force Team for Research in Ubiquitous Secure Technology for GIG/NCES). These organizations receive support from the NSF (award 0424422), AFOSR (FA9550-06-1-0244), Cisco, British Telecom, ESCHER, HP, IBM, iCAST, Intel, Microsoft, ORNL, Pirelli, Qualcomm, Sun, Symantec, Telecom Italia, and United Technologies.

### References

1. Johan Agat. "Transforming out timing leaks." In Proc. 27th ACM Symp. on Principles of Programming Languages (POPL), January 2000.
2. Aslan Askarov and Andrei Sabelfeld. "Security-typed languages for implementation of cryptographic protocols: A case study." In Proc. 10th European Symposium on Research in Computer Security (ESORICS), September 2005.
3. Godmar Back, Wilson C. Hsieh, and Jay Lepreau. "Processes in KaffeOS: Isolation, resource management, and sharing in Java." In Proc. 4th Symposium on Operating Systems Design and Implementation. USENIX, October 2000.
4. John Barnes. "High Integrity Software: The SPARK Approach to Safety and Security." Addison Wesley, April 2003.
5. Stephen Chong and Andrew C. Myers. "Decentralized robustness." In Proc. 19th IEEE Computer Security Foundations Workshop, July 2006.
6. Lap chung Lam and Tzi cker Chiueh. "A general dynamic information flow tracking framework for security applications." In Proc. 22nd Annual Computer Security Applications Conference (ACSAC 2006), December 2006.
7. Danny Coward and Yutaka Yoshida. "Java Servlet Specification, Version 2.4," November 2003. JSR-000154.
8. Dorothy E. Denning and Peter J. Denning. "Certification of programs for secure information flow." Comm. of the ACM, 20(7), July 1977.
9. Petros Efstathopoulos, Maxwell Krohn, Steve VanDeBogart, Cliff Frey, David Ziegler, Eddie Kohler, David Mazières, Frans Kaashoek, and Robert Morris. "Labels and event processes in the Asbestos operating system." In Proc. 20th ACM Symp. on Operating System Principles (SOSP), October 2005.
10. T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. "Terra: A virtual machine based platform for trusted computing." In Proc. 19th ACM Symp. on Operating System Principles (SOSP), 2003.
11. W. Halfond and A. Orso. "AMNESIA: Analysis and monitoring for neutralizing SQL-injection attacks." In Proc. International Conference on Automated Software Engineering (ASE’05), pages 174–183, November 2005.
12. Chris Hawblitzel, Chi-Chao Chang, Grzegorz Czajkowski, Deyu Hu, and Thorsten von Eicken. "Implementing multiple protection domains in Java." In Proc. 1998 USENIX Annual Technical Conference, June 1998.
13. Boniface Hicks, Kiyan Ahmadizadeh, and Patrick McDaniel. "Understanding practical application development in security-typed languages." In 22nd Annual Computer Security Applications Conference (ACSAC), Miami, FL, December 2006.
14. Yao-Wen Huang, Fang Yu, Christian Hang, Chung-Hung Tsai, Der-Tsai Lee, and Sy-Yen Kuo. "Securing web application code by static analysis and runtime protection." In Proc. 13th International Conference on World Wide Web. ACM Press, 2004.
15. N. Jovanovic, C. Kruegel, and E. Kirda. "Pixy: A static analysis tool for detecting web application vulnerabilities." In Proc. IEEE Symposium on Security and Privacy, May 2006.
16. Butler Lampson, Martín Abadi, Michael Burrows, and Edward Wobber. "Authentication in distributed systems: Theory and practice." In Proc. 13th ACM Symp. on Operating System Principles (SOSP), October 1991. Operating System Review, 25(5).
17. Gary T. Leavens, K. Rustan M. Leino, Erik Poll, Clyde Ruby, and Bart Jacobs. "JML: notations and tools supporting detailed design in Java." In OOPSLA 2000 Companion, pages 105–106, Minneapolis, Minnesota, 2000.
18. Peng Li and Steve Zdancewic. "Practical information-flow control in web-based information systems." In Proc. 18th IEEE Computer Security Foundations Workshop, 2005.
19. V. Livshits and M. Lam. "Finding security vulnerabilities in Java applications with static analysis." In Proc. 14th USENIX Security Symposium (USENIX’05), pages 271–286, August 2005.
20. Peter Loscocco and Stephen Smalley. "Integrating flexible support for security policies into the Linux operating system." In Proc. FREENIX Track: 2001 USENIX Annual Technical Conference, 2001.
21. Andrew C. Myers. "JFlow: Practical mostly-static information flow control." In Proc. 26th ACM Symp. on Principles of Programming Languages (POPL), January 1999.
22. Andrew C. Myers and Barbara Liskov. "Protecting privacy using the decentralized label model." ACM Transactions on Software Engineering and Methodology, 9(4), October 2000.
23. Andrew C. Myers, Andrei Sabelfeld, and Steve Zdancewic. "Enforcing robust declassification." In Proc. 17th IEEE Computer Security Foundations Workshop, June 2004.
24. Andrew C. Myers, Lantian Zheng, Steve Zdancewic, Stephen Chong, and Nathaniel Nystrom. "Jif: Java information flow." Software release, at http://www.cs.cornell.edu/jif, July 2001–.
25. A. Nguyen-Tuong, S. Guarneri, D. Greene, and D. Evans. "Automatically hardening web applications using precise tainting." In Proc. 20th International Information Security Conference, pages 372–382, May 2005.
26. François Pottier and Sylvain Conchon. "Information flow inference for free." In Proc. 5th ACM SIGPLAN International Conference on Functional Programming (ICFP), 2000.
27. François Pottier and Vincent Simonet. "Information flow inference for ML." In Proc. 29th ACM Symp. on Principles of Programming Languages (POPL), 2002.
28. Andrei Sabelfeld and Andrew C. Myers. "Language-based information-flow security." IEEE Journal on Selected Areas in Communications, 21(1), January 2003.
29. Andrei Sabelfeld and David Sands. "Dimensions and principles of declassification." In Proc. 18th IEEE Computer Security Foundations Workshop, June 2005.
30. Arvind Seshadri, Mark Luk, Elaine Shi, Adrian Perrig, Leendert van Doorn, and Pradeep Khosla. "Pioneer: Verifying integrity and guaranteeing execution of code on legacy platforms." In Proc. 20th ACM Symp. on Operating System Principles (SOSP), pages 1–15, October 2005.
31. Geoffrey Smith. "A new type system for secure information flow." In Proc. 14th IEEE Computer Security Foundations Workshop. IEEE Computer Society Press, June 2001.
32. Nikhil Swamy, Michael Hicks, Stephen Tse, and Steve Zdancewic. "Managing policy updates in security-typed languages." In Proc. 19th IEEE Computer Security Foundations Workshop, pages 202–216, July 2006.
33. Symantec Internet Security Threat Report, Volume IX. Symantec Corporation, March 2006.
34. Trusted Computing Group. "TCG TPM Specification Version 1.2 Revision 94, March 2006."
35. Stephen Tse and Steve Zdancewic. "Designing a security-typed language with certificate-based declassification." In Proc. 14th European Symposium on Programming, 2005.
36. Dennis Volpano and Geoffrey Smith. "A type-based approach to program security." In Proc. 7th International Joint Conference on the Theory and Practice of Software Development, 1997.
37. Yichen Xie and Alex Aiken. "Static detection of security vulnerabilities in scripting languages." In Proc. 15th USENIX Security Conference, July 2006.
38. Wei Xu, Sandeep Bhatkar, and R. Sekar. "Taint-enhanced policy enforcement: A practical approach to defeat a wide range of attacks." In 15th USENIX Security Symposium, August 2006.
39. Wei Xu, V.N. Venkatakrishnan, R. Sekar, and I.V. Ramakrishnan. "A framework for building privacy-conscious composite web services." In 4th IEEE International Conference on Web Services (ICWS’06), September 2006.
40. Steve Zdancewic and Andrew C. Myers. "Robust declassification." In Proc. 14th IEEE Computer Security Foundations Workshop, pages 15–23, June 2001.
41. Nickolai Zeldovich, Silas Boyd-Wickizer, Eddie Kohler, and David Mazières. "Making information flow explicit in HiStar." In Proc. 21st ACM Symp. on Operating System Principles (SOSP), November 2006.
42. Lantian Zheng and Andrew C. Myers. "Dynamic security labels and noninterference." In Proc. 2nd Workshop on Formal Aspects in Security and Trust, IFIP TC1 WG1.7. Springer, August 2004.

### Case Studies: Downgrading in Functional Scenarios

#### CDIS Application

- **Error Composing Message**: If an error occurs during message composition (e.g., leaving the Subject field empty), the user is redirected to the message composition page. This downgraded information flow reveals minimal details about the message data.
- **Message Approval**: When a reviewer approves a message, they downgrade their confidentiality restriction. Once all reviewers have approved the message, the recipient can view it.
- **Database Access**: Database access is performed with the authority of the principal `CDISApp`. There are 11 functional downgrades for database accesses, releasing information from `CDISApp` to the user.
- **Delegation to `CDISRoot`**: All users delegate authority to a root user, `CDISRoot`, for operations affecting all users. This delegation requires user endorsement.

#### User Library

- **Unsuccessful Login**: When a user enters an incorrect password on the login page, they are returned to the login page with an error message. This information release about the password is acceptable.
- **Successful Login**: Upon successful login, the user learns that the password was correct. This information flow is secure.
- **Delegation to Session Principal**: When a user logs in, they delegate authority to the session principal using a closure. The decision to authorize the delegation closure must be declassified.
- **Retrieving Users from the Database**: When selecting one or more users, information must be retrieved from the database and returned to the caller of the "Select User(s)" page. This transfer requires a total of 3 functional downgrades during user selection.
- **Error Selecting User(s)**: If a user makes an error on the "Select User(s)" page (e.g., no user ID entered), they are returned to the same page. Since this page is a reusable component, its label is set conservatively. A declassification is needed for the error message, from the conservative label to the actual label used for a given page invocation.

#### Calendar Application

- **Update Session State with Date to Display**: The display date must be trusted by the session principal. The date input by the user is trusted by the user but must be endorsed by the session principal before it is stored in the session state.
- **Update Session State with Which User's Calendar to Display**: Similarly, the user selects a calendar to display. This downgrade ensures that the session principal's authority is required to update the session state.
- **Fresh ID for New Event**: A new event requires a fresh unique ID. The unique ID may act as a covert channel, revealing information about the order in which events are created. Since IDs are generated randomly, downgrading the fresh ID is secure.
- **Update and Retrieve Info from Database**: When information needs to be updated in the database (e.g., editing an event) or retrieved (e.g., fetching user details or events), information must be transferred between the current user and the application principal `CalApp`. There are 10 such functional downgrades for different database accesses.
- **Go to View/Edit Event Page**: An event's name is displayed as a hyperlink to the "View Event" or "Edit Event" page, depending on the user's permissions. Since the link contains the event's name, the information gained by invoking the "View/Edit Event" action is at least as restrictive as the event detail's label. This reveals little about which event is being viewed or edited.
- **Error Editing Event**: If a user makes an error while editing an event (e.g., end time before start time), they are sent back to the "Edit Event" page. Similar to the "Go to View/Edit Event" downgrade, this reveals minimal information about the data input.
- **Changing Attendees or Viewers of an Event**: When a user edits an event and changes the attendees or viewers, the labels to enforce on the event time and details change. This requires a downgrade.
- **Delegation to `CalRoot`**: All users delegate their authority to a root user, `CalRoot`, whose authority is needed to perform operations affecting all users. This requires endorsement from each user.

---

This optimized version aims to improve clarity, coherence, and professionalism, making the text more accessible and structured.