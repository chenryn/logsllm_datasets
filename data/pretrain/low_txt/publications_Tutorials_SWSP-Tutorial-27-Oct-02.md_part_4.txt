# City Forrest

## Temporal-Entity
- **Time-Point**: {absolute_time}
- **Time Domain**: {year, month, day}
- **Date Time**: {hour, minute, second}
- **Event**: Calendar-Date
  - **Day of the Week**
  - **Month of the Year**
- **Scientific-Event**: {millisecond}

## Ontologies-based Approaches
Ontologies-based approaches have been suggested as a solution for information integration that achieves interoperability (Kashyap and Sheth 1994; Uschold and Gruninger 1996).

### Shared Ontologies
- **Commitment to Shared Ontology**: Autonomous systems must commit to a shared ontology.
- **Challenges**: Compromises are difficult to maintain when new concepts are added (Rodríguez and Egenhofer 2002).
- **Costs**: Constructing a shared ontology is costly and often impractical.

### Non-Shared Ontologies
- **Distributed Infrastructure**: The Web's distributed nature makes it unreasonable to expect all systems to commit to shared ontologies.
- **Autonomous Systems**: Use non-shared ontologies, requiring integration and mapping of these ontologies.

## The Semantic Web
- **Definition**: "The Semantic Web is an extension of the current web in which information is given well-defined meaning, better enabling computers and people to work in cooperation." (Tim Berners-Lee, James Hendler, and Ora Lassila, Scientific American, May 2001)
- **Machine-Readability vs. Machine-Understandability**: The Web is machine-readable but not machine-understandable.

### Benefits of Semantics
- **Improved Search Engines**: Better understanding of page content.
- **Accuracy**: More precise searches with additional information aiding precision.
- **Automation**: Facilitates automated searches by reducing the need for manual "weeding" of results.
- **Web Service Integration**: Enhances the integration of multiple Web services.

## Mapping Interfaces with Ontological Concepts
- **Data Classes Ontologies**:
  - **Time-Ontology**:
    - **Date**: {City {...}, byte day, Temporal-Entity, XML Schema, byte month, int year}
    - **Duration**: {...}
    - **Time-Point**: {absolute_time}
    - **Interval Domain**: {year, month, day, hour, minute, second}
    - **Calendar-Date**: Event
      - **Day of the Week**
      - **Month of the Year**
    - **Scientific-Event**: {millisecond}
  - **Local Ontology**: Name
  - **Coordinates**: {x, y}
  - **Area**: {name}
  - **Get Conference Information**: City Forrest

## Building Ontologies with Semantic Languages
- **Precision**: Ontologies must allow precise descriptions of data objects associated with Web service interfaces.
- **Features**:
  - **DAML+OIL**: Data types, cardinality constraints, etc.
  - **RDFS**: Classes, inheritance, etc.
  - **RDF**: Nodes, relations, etc.

## Tools for Ontologies
- **Ontology Editors**:
  - **Protégé** (Stanford)
  - **OilEd** (Manchester)
  - **OntoEdit** (Karlsruhe)
- **Ontology Integration Tools**:
  - **Chimera** (Stanford)
- **Reasoning Services**:
  - **FaCT** (used by OilEd)
  - **SiLri** (Karlsruhe)

## RDF (Resource Description Framework)
- **Basic Features**:
  - Provides basic ontological primitives.
  - An XML application.
  - Uses a formal model.
  - Basis for "The Semantic Web".
- **Data Model**:
  - **RDF Triples**: Assert facts about resources.
  - **Directed Labeled Graphs**: Represent properties and values.
  - **Model Elements**: Resources, statements, properties, and values.

### Example
- **DC:Title**: "RDF – The Basics"
- **Document_1**:
  - **DC:Creator**: "PAauuthl Moril_le1r"
  - **CARD:Affiliation**: "UGE, Inc."
  - **CARD:Email**: "PI:EMAIL"
  - **CARD:Name**: "John Miller"

### Syntax Example
```xml
<rdf:Description rdf:about="Document_1">
  <dc:title>RDF - The Basics</dc:title>
  <dc:creator>John Miller</dc:creator>
  <card:email>PI:EMAIL</card:email>
  <card:affiliation>UGE, Inc.</card:affiliation>
</rdf:Description>
```

### Summary
- **General-Purpose Framework**: Provides structured, machine-understandable metadata for the Web.
- **Model for Describing Resources**: Provides basic ontological primitives.
- **Basis for "The Semantic Web"**: RDF is fundamental to the Semantic Web.

## RDF Schema (RDFS)
- **Extending RDF**:
  - **Classes**: Inheritance between classes.
  - **Range**: No cardinality restrictions on properties.
  - **Basic Datatypes**: Only includes 'literals' (set of all strings).
  - **Enumeration of Property Values**: Not supported.

## DAML+OIL
- **Extending RDFS**:
  - **Result of Fusion**: DAML (DARPA Markup Language) and OIL (Ontology Inference Layer).
  - **Semantic Markup Language**: Builds on RDF and RDFS, extending with richer modeling primitives.
  - **Properties**:
    - **Object Properties**
    - **Datatype Properties**
  - **Cardinality**: minCardinality, maxCardinality, cardinality.
  - **Basic Datatypes**: Refer to the XMLSchema URI.
  - **Enumeration**: Supported.

## Web Service QoS Specification
- **Operational Metrics**: Allow the analysis and computation processes of QoS.
- **Design**: Processes can be designed according to QoS objectives and requirements.
- **Efficiency**: Organizations can translate their strategies into processes more efficiently.

### DAML-S and QoS
- **QoS Model**: DAML-S does not provide a QoS model for automatic computation of Web processes.
- **Developed Model**: A theoretical model for the automatic computation of workflow QoS based on tasks QoS metrics (Cardoso et al., 2002a, Cardoso et al., 2002b).
- **Ontology**: Developed for specifying QoS metrics for tasks and Web services.
- **Discovery**: Allows for the discovery of Web services based on operational metrics.

## Web Service Flow Language (WSFL)
- **IBM's XML Language**: For describing Web Services Composition.
- **Extensions**: Can include QoS specifications such as time, cost, and reliability.
- **Constructs**:
  - **QoS Specification**: (time, cost, reliability)
  - **Activity Elements**
  - **Message Elements**
  - **Service Provider Elements**
  - **Conditional Branching**
  - **Control Link Elements**
  - **Data Routing**
  - **Data Link Elements**

## BPEL4WS (Business Process Execution Language for Web Services)
- **Introduction**:
  - **Process Modeling Language**: Developed by IBM, Microsoft, and BEA.
  - **Version 1.0**: Released on July 31, 2002.
  - **Merging of XLANG and WSFL**: Built on top of WSDL.
  - **References**: Port types contained in WSDL documents.
- **Specifications**:
  - **WS-Coordination**: Describes how services can use pre-defined coordination contexts.
  - **WS-Transaction**: Provides a framework for incorporating transactional semantics into coordinated activities.

### Language Features
- **Block-Structured Programming**: Allows recursive blocks but restricts definitions and declarations to the top level.
- **Activities**: Basic components of a process definition.
- **Structured Activities**: Prescribe the order of activities (sequence, switch, while, flow, pick).
- **Data Containers**: Can be referred to in routing logic and expressions.
- **Fault Handling**: Similar to common programming languages like Java.
- **Compensation Handler**: Enables compensatory activities in the event of actions that cannot be explicitly undone.
- **No Nested Process Definition**.

### Example
- **WSDL Definitions**: Messages, portType, roles.
- **Process**:
  - **Concurrency and Synchronization**: Provided by the flow construct.
  - **Sequential Execution**: Activities executed sequentially.

This document provides a comprehensive overview of various aspects related to the Semantic Web, ontologies, and Web service specifications, ensuring clarity and coherence in the presentation of the information.