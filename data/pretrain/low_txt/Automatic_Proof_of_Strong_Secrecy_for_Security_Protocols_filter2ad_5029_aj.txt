### Treatment of Equations

We have extended our technique to handle cryptographic primitives defined by equations. For instance, the Diffie-Hellman key agreement can be modeled using two constructors, \( \text{E} \) and \( \text{F} \), with the equation:
\[ \text{E}(x, \text{F}(y)) = \text{E}(y, \text{F}(x)) \]
We encode these equations using destructors, as described in [15]. For example, the above equation can be modeled by having a destructor \( \text{D} \) defined as:
\[ \text{D}(\text{E}(x, \text{F}(y))) = \text{E}(y, \text{F}(x)) \]
and
\[ \text{D}(\text{E}(x, y)) = \text{E}(x, y) \]
This encoding is sound for strong secrecy. However, this technique is limited to relatively simple equations; more complex ones could be handled using unification modulo the equational theory.

### Experimental Results

The verifier automatically confirms that the protocol from Section 2 preserves the strong secrecy of \( x \). As additional small examples, we consider variants of this protocol. If we add a message \( \text{M}_2' \): \( c_2' = \text{Enc}_k(m) \), the verifier identifies an attack against the strong secrecy of \( x \) and \( k \). Specifically, it finds that \( m \) is derivable, and the derivation of \( m \) describes an attack, which may generally be a false attack due to our approximations. In this case, however, it is a real attack. An attacker can test whether \( x = k \) by comparing the ciphertexts \( \text{Enc}_x(m) \) and \( \text{Enc}_k(m) \).

In contrast, if we replace shared-key encryption with probabilistic shared-key encryption, the verifier now shows that the protocol preserves the strong secrecy of \( x \) and \( k \). If we modify messages \( \text{M}_2 \) and \( \text{M}_2' \) to \( \text{Enc}_{\text{key}}(m) \oplus x \) and \( \text{Enc}_{\text{key}}(m) \oplus k \) respectively, the verifier confirms that the protocol maintains the strong secrecy of \( x \) and \( k \), both with deterministic and probabilistic shared-key encryption. This is because the ciphertexts are always different, even when \( x = k \).

We have also proven strong secrecy results for the protocols of Otway-Rees [38], Yahalom [21], and Skeme [32]. The total runtime for these tests is less than 2 seconds on an Intel Xeon 1.7 GHz.

### Case Study: JFK Protocol

As a more substantial example, we have proven properties of the JFK protocol [11], which is proposed as a replacement for IKE, the key exchange protocol of IPsec. The protocol allows an initiator \( A \) to establish a security association (including a session key) with a responder \( B \). We used the techniques described in this paper to prove identity protection properties of JFK. The protocol has two variants, JFKi and JFKr, which differ in their properties:

1. **JFKi**: Guarantees that an active attacker cannot determine the identity of the initiator when it only accepts connections from honest principals. We show the observational equivalence of configurations where two initiators \( A_1 \) and \( A_2 \) have their secret keys among \( s_1 \) and \( s_2 \) (so their public keys, identified with their identities, are among \( \text{pub}(s_1) \) and \( \text{pub}(s_2) \)). Therefore, an adversary cannot distinguish between a configuration where an initiator uses \( s_1 \) and one where it uses \( s_2 \), and it cannot tell if two initiators use the same secret key. Technically, using the extension from Section 6, we show:
   \[ \text{pub}(s_1) \cdot \text{pub}(s_2) \cdot P \approx \text{pub}(s_1) \cdot \text{pub}(s_2) \cdot P' \]
   where \( P \) models the protocol, and \( \sigma \) and \( \sigma' \) map the variables \( s_1 \) and \( s_2 \) to elements of \( \{s_1, s_2\} \).

   Importantly, the attacker knows all public keys of the principals but does not know which ones the principals actually use. This property cannot be adequately approximated by standard secrecy properties.

2. **JFKr**: Protects the identity of responders against active attacks. We show the observational equivalence of configurations where two responders \( B_1 \) and \( B_2 \) have their secret keys among \( s_1 \) and \( s_2 \). Additionally, JFKr protects all identities against passive attacks. Thus, we show the observational equivalence of configurations where two responders and two initiators can have their secret keys among \( s_1, \ldots, s_4 \), and the attacker can listen but not send messages.

These configurations include other responders and initiators with other keys. For simplicity, in JFKi, all initiators (resp. in JFKr, all responders) accept connections only from honest principals. These tests took 2 seconds for JFKi and 1 minute 30 seconds for JFKr on an Intel Xeon 1.7 GHz. The case study of the JFK protocol was conducted in collaboration with Martín Abadi and Cédric Fournet [4].

The verifier is available at [http://www.di.ens.fr/˜blanchet/crypto-eng.html](http://www.di.ens.fr/˜blanchet/crypto-eng.html), and more information on the study of the JFK protocol is available at [http://www.di.ens.fr/˜blanchet/crypto/jfk.html](http://www.di.ens.fr/˜blanchet/crypto/jfk.html).

### Conclusion

This work provides an efficient, automatic technique for proving a particular case of observational equivalence for cryptographic protocols, specifically strong secrecy. It is much more flexible than previous approaches and has been useful in the analysis of real protocols like JFK.

For future work, it would be interesting to verify more general classes of process equivalences, as they can formalize a wide variety of security properties. This, however, is a challenging task, especially when the equivalent processes have different structures.

### Acknowledgments

We would like to thank Martín Abadi, Jérôme Feret, David Monniaux, Andrew Myers, and the anonymous reviewers for their valuable comments on this work.

### References

[1] M. Abadi. Secrecy by Typing in Security Protocols. In Theoretical Aspects of Computer Software, volume 1281 of LNCS, pages 611–638. Springer, 1997.

[2] M. Abadi. Security Protocols and their Properties. In Foundations of Secure Computation, NATO Science Series, pages 39–60. IOS Press, 2000. Volume for the 20th International Summer School on Foundations of Secure Computation, held in Marktoberdorf, Germany (1999).

[3] M. Abadi and B. Blanchet. Analyzing Security Protocols with Secrecy Types and Logic Programs. In 29th ACM Symposium on Principles of Programming Languages (POPL’02), pages 33–44, Jan. 2002.

[4] M. Abadi, B. Blanchet, and C. Fournet. Just Fast Keying in the Pi Calculus. In Programming Languages and Systems: 13th European Symposium on Programming (ESOP’04), LNCS. Springer, Mar. 2004.

[5] M. Abadi and C. Fournet. Mobile Values, New Names, and Secure Communication. In 28th ACM Symposium on Principles of Programming Languages (POPL’01), pages 104–115, Jan. 2001.

[6] M. Abadi and A. D. Gordon. A Bisimulation Method for Cryptographic Protocols. Nordic Journal of Computing, 5(4):267–303, Winter 1998.

[7] M. Abadi and A. D. Gordon. A Calculus for Cryptographic Protocols: The Spi Calculus. Information and Computation, 148(1):1–70, Jan. 1999.

[8] M. Abadi and J. Jürjens. Formal Eavesdropping and its Computational Interpretation. In Theoretical Aspects of Computer Software (TACS’01), volume 2215 of LNCS, pages 82–94. Springer, Oct. 2001.

[9] M. Abadi and R. Needham. Prudent Engineering Practice for Cryptographic Protocols. IEEE Transactions on Software Engineering, 22(1):6–15, Jan. 1996.

[10] M. Abadi and P. Rogaway. Reconciling Two Views of Cryptography (The Computational Soundness of Formal Encryption).