**注意：cgroup是一组进程。**

接下来，我们将讨论“Device controller for cgroups (CGROUP_DEVICE)”（Cgroup的设备控制器）。控制组（cgroup）是一种用于控制资源使用的特性。“yes”选项允许设备cgroup的白名单使用open和mknod系统调用（后者用于创建文件系统节点）。

下一个问题“Cpuset support (CPUSETS)”（CPU分组支持）询问内核是否可以创建和管理CPU分组。此功能允许管理员在单个系统上动态分配各组内存节点，并指定任务在这些内存节点上运行。这通常应用于SMP（对称多处理）和NUMA（非统一内存访问）系统中。对于这个问题，我的选择是“no”。

**提示：如果我没有明确指出所选的选项，则默认为预设选项。**

关于“Simple CPU accounting cgroup subsystem (CGROUP_CPUACCT)”（简单的CPU统计cgroup子系统），启用它会生成一个资源控制器来监控某个cgroup内的独立任务的CPU使用情况。我选择了“no”。

“Resource counters (RESOURCE_COUNTERS)”使控制器能够统计cgroup的独立资源使用情况。对此，我也选择了“no”。

接着，“Enable perf_event per-cpu per-container group (cgroup) monitoring (CGROUP_PERF)”（启用每个CPU、每个容器组的perf_event监控）允许开发者扩展每个CPU的模式，使其能专门监控特定cgroup组中的线程。这个功能我没有开启。

在“Group CPU Scheduler”（CPU分组调度器）部分，已经回答了如下两个问题：
- “Group CPU scheduler (CGROUP_SCHED)”（CPU分组调度器）
- “Group scheduling for SCHED_OTHER (FAIR_GROUP_SCHED)”（SCHED_OTHER分组调度）

其中一个问题“CPU bandwidth provisioning for FAIR_GROUP_SCHED (CFS_BANDWIDTH)”（CPU带宽分配）询问内核是否允许用户设置公平组调度器内执行的任务的CPU带宽限制。没有设定限制的组将被视为不受约束并可以无限制地运行。

**注意：并非所有内核选项都在这里列出。提及这些组仅是为了便于阅读，并突出显示新引入或重要的部分。理解全部分组不是必需的。分组有助于通过图形工具配置内核，从而帮助开发者更轻松地找到特定设置。**

若想让用户能够分配CPU带宽给任务组，可以选择回答“Group scheduling for SCHED_RR/FIFO (RT_GROUP_SCHED)”（SCHED_RR/FIFO分组调度）为“yes”。

“Block IO controller (BLK_CGROUP)”（阻塞IO控制器）的问题涉及如何通过CFQ IO调度器分配磁盘带宽给任务组。BIO在块级上的限制逻辑利用块IO控制器提供设备上的IO速率上限。

还有一个调试相关的问题“Enable Block IO controller debugging (DEBUG_BLK_CGROUP)”（启用阻塞IO控制器的调试），询问是否开启块IO控制器的调试。为了构建一个精简的内核，建议禁用该特性。

为了在内核中启用检查点和还原功能，“Checkpoint/restore support (CHECKPOINT_RESTORE)”（检查点及还原支持）可被设置为“yes”。然而，为了降低负载，我选择了“n”。启用该功能会增加额外的进程控制代码以设置进程的代码段、数据段以及堆大小，并添加一些新的程序入口。

紧接着是命名空间的支持配置。命名空间是一个标识符集合。例如，/usr/lib/python3/dist-packages/re.py 是一个标识符，而 /usr/lib/python3/dist-packages/ 则是一个命名空间，re.py 在该命名空间下具有本地名称。

第一个命名空间问题是“Namespaces support (NAMESPACES)”，询问是否启用命名空间。启用后，可以在不同的命名空间中使用相同的PID（进程ID），否则PID不会重复。

“UTS namespace (UTS_NS)”问题则询问是否允许UTS命名空间内的任务在uname()系统调用中看到不同的信息。uname()系统调用提供了查看机器和操作系统信息的功能。

启用“IPC namespace (IPC_NS)”可以让同一命名空间内的任务与其他命名空间内的相应IPC ID对象协同工作。

“PID Namespaces (PID_NS)”指的是进程ID命名空间，它使得不同进程在各自的PID命名空间中可以使用相同的PID。这是容器技术的一个基础组件。

启用“Network namespace (NET_NS)”可以让用户创建多个网络栈实例。

当“Automatic process group scheduling (SCHED_AUTOGROUP)”被启用时，它会自动填充并创建任务组以优化桌面应用程序的调度。它会将高资源占用的应用程序放置于其自身的任务组中，从而提升性能。

还有一个调试特性“Enable deprecated sysfs features to support old userspace tools (SYSFS_DEPRECATED)”（启用不推荐的sysfs功能来支持旧式的用户空间工具），除非有特殊需求，否则应禁用此功能。它询问是否启用sysfs，这是一个用于调试内核的虚拟文件系统。

由于当前配置需要，“Kernel->user space relay support (formerly relayfs) (RELAY)”（内核到用户空间的中继支持，即relayfs）已被设置为“yes”。同样，最好启用“Initial RAM filesystem and RAM disk (initramfs/initrd) support (BLK_DEV_INITRD)”（初始化内存文件系统和内存盘(initramfs/initrd)支持）。

用户会被问及initramfs源文件的位置。如果没有特别需求，请留空。

接下来，开发人员会被询问初始虚拟磁盘（Linux内核映像文件）支持的压缩格式。你可以根据需要启用以下任一或全部支持的压缩格式：
- Gzip压缩 (RD_GZIP)
- Bzip2压缩 (RD_BZIP2)
- LZMA压缩 (RD_LZMA)
- XZ压缩 (RD_XZ)
- LZO压缩 (RD_LZO)

此外，“Optimize for size (CC_OPTIMIZE_FOR_SIZE)”（优化大小）设置了编译选项。开发人员可以让编译器在编译时优化代码。我选择了“yes”。

如果用户希望进一步配置更多的内核特性，那么对于“Configure standard kernel features (expert users) (EXPERT)”（配置标准内核特性（专家级用户））这一问题，应该回答“yes”。

为了启用过时的16位UID系统调用封装器，可以选择将“Enable 16-bit UID system calls (UID16)”设置为“yes”。这样，系统调用就会使用16位UID。

推荐启用“Sysctl syscall support (SYSCTL_SYSCALL)”（sysctl系统调用支持）。这使得/proc/sys成为二进制路径的接口。

接下来的两个问题已经被预先回答为“yes”：
- “Load all symbols for debugging/ksymoops (KALLSYMS)”（载入所有调试符号）
- “Include all symbols in kallsyms (KALLSYMS_ALL)”（包括所有的kallsyms符号）

这些都是启用调试标志的选项。

下一步，开发者应该启用“Enable support for printk (PRINTK)”（printk支持），这会将内核消息输出到内核日志中。这对于诊断内核错误非常重要。但是，如果启用了这项支持，可能会让某些开发者看到这些错误信息，因此可以根据实际需求决定是否启用。

除非有必要，开发者可以禁用“BUG() support (BUG)”（BUG支持）。禁用此项将不支持WARN信息和BUG信息，从而减小内核体积。

---
via: 
译者：[geekpi](https://github.com/geekpi) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](http://linux.cn/) 荣誉推出