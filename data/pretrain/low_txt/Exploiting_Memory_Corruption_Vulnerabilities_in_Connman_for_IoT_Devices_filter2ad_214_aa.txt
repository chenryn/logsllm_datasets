# Title: Exploiting Memory Corruption Vulnerabilities in Connman for IoT Devices

# Authors:
- K. Virgil English
- Islam Obaidat
- Meera Sridhar

# Conference:
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)

# Abstract
In recent years, there has been a significant increase in attacks targeting consumer Internet-of-Things (IoT) devices. Many of these attacks exploit easily accessible vulnerabilities, such as weak default configurations. However, with the introduction of new laws and regulations aimed at reducing such vulnerabilities, attackers are likely to shift their focus to more sophisticated exploits. Memory corruption vulnerabilities, which allow attackers to gain full control over a system, are a major concern. Numerous memory corruption vulnerabilities have already been identified in IoT firmware.

This paper presents an approach for exploiting stack-based buffer overflow vulnerabilities in IoT firmware, enabling remote device hijacking. We demonstrate this approach by exploiting a common network software application, Connman, which is widely used in IoT devices such as Samsung smart TVs. Our experiments include crashing and executing arbitrary code in a controlled environment, bypassing standard software defenses like W⊕X and ASLR, and installing publicly available IoT firmware on a Raspberry Pi. The results highlight the ease with which an adversary can control IoT devices.

# Introduction
Vulnerabilities in consumer IoT devices are becoming increasingly prevalent [1–7]. Factors such as low power consumption, cost constraints, and the need for rapid time-to-market often lead to the deployment of IoT devices with inadequate security [8–12]. While research efforts have focused on IoT system and network security solutions [4, 13, 14], a NIST report indicates that 77% of all reported vulnerabilities are in software applications, not in operating systems or networks [15].

Recent studies show a growing prevalence of memory corruption vulnerabilities in IoT devices, largely due to the widespread use of the C language, which is highly susceptible to such vulnerabilities [16–19]. Buffer overflow attacks, particularly stack-based buffer overflows, are among the most dangerous [20, 21].

In this paper, we present a series of proof-of-concept (PoC) exploits for a known stack-based buffer overflow vulnerability (CVE-2017-12865) in Connman, an open-source lightweight network connection manager used in many IoT devices, including Nest thermostats, NAO robots, and Samsung smart devices. This vulnerability exists within the DNS proxy module of Connman, allowing a crafted DNS response to cause denial-of-service (DoS) or remote code execution (RCE).

We first conduct PoC exploits in a controlled environment using virtual machines running Ubuntu 16.04 LTS (x86) and Ubuntu Mate 16.04 LTS (ARMv7). We use gdb to construct attacks that bypass different levels of memory protection defenses, such as Writable XOR Executable (W⊕X) and Address Space Layout Randomization (ASLR). We then extend our experiments to a non-controlled environment by installing publicly available IoT firmware on a Raspberry Pi and using a Wi-Fi Pineapple to simulate a man-in-the-middle attack.

Our main contributions include:
- Constructing a series of PoC exploits for a known stack-based buffer overflow vulnerability in Connman.
- Developing exploits for Connman running on x86 and ARMv7, under different levels of memory protection techniques.
- Demonstrating the feasibility of these exploits in non-controlled environments against IoT devices equipped with Connman.

Our experiments show that it is relatively easy for adversaries to exploit these vulnerabilities, even when standard countermeasures like W⊕X and ASLR are in place. We hope this study will raise awareness of these issues and lead to the development of more robust defenses.

# Overview
### Connman
Connman [23] is an open-source network management daemon designed for Linux embedded devices. It supports various network types, including Wi-Fi, Ethernet, cellular, and Bluetooth, using plugins like oFono and Bluez. Its modular design allows it to be used in parts or as a whole, making it suitable for IoT devices. Connman is widely used in smart devices and operating systems, such as Nest thermostats, NAO robots, and Samsung smart devices.

### Vulnerability
CVE-2017-12865 [22] is a stack-based buffer overflow vulnerability in the DNS proxy feature of Connman 1.34 and earlier. The vulnerability arises from the `parse_response` function in `dnsproxy.c`, which uses a buffer `name` to expand compressed DNS names. The `get_name` function calls `memcpy` without proper length checking, leading to potential buffer overflows. The pre-defined limit of the `name` buffer is 1024 bytes. A crafted DNS response exceeding this limit can overwrite adjacent memory, leading to DoS or RCE attacks.

The vulnerability was patched in Connman version 1.35, but all prior versions (1.34 and below) remain vulnerable. Several embedded operating systems, including Yocto, OpenELEC, and Tizen OS, still use vulnerable versions of Connman.

# Experiments
We conducted a series of PoC exploits to demonstrate the vulnerability. An attacker-controlled DNS server can exploit the vulnerability by sending crafted messages to execute a DoS attack. We created a simple DNS server to act as a proxy for Connman's DNS requests. When Connman decompresses and adds the message to the `name` buffer, the application crashes if the message exceeds the buffer size.

We performed six attacks using three protection levels: no protections, W⊕X enabled, and W⊕X with ASLR enabled. These attacks were conducted on two architectures: Intel x86 running Ubuntu 16.04 and ARMv7 running Ubuntu Mate on a Raspberry Pi 3 Model B v1.2.

Each exploit construction presented its own set of challenges, which we discuss in the following sections. Our experiments show that unpatched versions of the vulnerability are susceptible to attack, regardless of the OS-level protections in place.

# Experimental Setup
The goal of our experiments was to interrupt the flow of Connman and spawn a root shell. All code was written in Python. Due to the nature of the vulnerability, all exploits had to be sent over DNS responses, specifically Type A responses with lengths greater than the `name` buffer size.

# Conclusion
Our study demonstrates the ease with which adversaries can exploit memory corruption vulnerabilities in IoT devices, even when standard countermeasures are in place. We hope this work will raise awareness and lead to the development of more robust defenses in the IoT ecosystem.

# References
[1]–[49] (References listed here)