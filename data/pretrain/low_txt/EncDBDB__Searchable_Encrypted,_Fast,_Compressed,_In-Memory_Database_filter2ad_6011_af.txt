### Encrypted Databases and Their Implementation

#### TEE-Based Solutions
- **StealthDB [7]** and **Always Encrypted [73]** are characterized by their minimal enclave size, as they only place the execution of individual operators (e.g., comparison and equality checks) within a Trusted Execution Environment (TEE). This approach requires only minor modifications to the application, such as replacing plaintext operations with protected ones. However, this method can lead to significant information leakage, as an attacker can infer the results of each comparison operation.
- **Concerto [74]** leverages a TEE to secure a key-value store, but it focuses solely on integrity without addressing confidentiality. Additionally, it does not support protected range queries.

#### Software-Only, Encrypted Databases
- Some software-only, encrypted databases utilize property-preserving encryption for efficient search [4], [5]. Each database functionality necessitates its own encryption scheme, which incurs additional storage overhead. For example, deterministic encryption [63] supports equality selects, while Order-Preserving Encryption (OPE) [75], [76], [61], [77] enables range queries. However, practical attacks on property-preserving encryption have been demonstrated [64], [60], [78], [68], [66]. While some encrypted dictionaries in EncDBDB are vulnerable to these attacks, data owners can choose a security level that meets their requirements without sacrificing functionality. EncDBDB handles both equality and range queries with a single encryption scheme, resulting in minimal performance and storage overhead.
- Other software-only, encrypted databases that support range queries have been proposed, but they either leak additional information about the queried range or return false positives [79]. Some solutions suggest splitting the server into two non-colluding parties [80] or require multiple rounds [81]. EncDBDB, however, does not impose any of these restrictions.

### Conclusion
In this paper, we introduce EncDBDB, a concept for an encrypted, fast, compressed, in-memory database that supports analytic queries on large datasets using a TEE. EncDBDB offers nine encrypted dictionaries with distinct trade-offs between security, performance, and storage efficiency. Even with no frequency leakage and bounded order leakage, EncDBDB can execute range queries on datasets with millions of encrypted entries within milliseconds. If some frequency leakage is acceptable, the compressed encrypted data requires less space than an uncompressed plaintext column. Moreover, the Trusted Computing Base (TCB) of EncDBDB consists of only 1129 lines of code, exposing a small attack surface.

### References
[1] C. Gentry, “Fully Homomorphic Encryption Using Ideal Lattices,” in Proceedings of the ACM Symposium on Theory of Computing, ser. STOC, 2009.
[2] J. Coron, A. Mandal, D. Naccache, and M. Tibouchi, “Fully Homomorphic Encryption over the Integers with Shorter Public Keys,” in Proceedings of the Annual International Cryptology Conference, ser. CRYPTO, 2011.
[3] C. Gentry, S. Halevi, and N. P. Smart, “Homomorphic Evaluation of the AES Circuit,” in Proceedings of the Annual International Cryptology Conference, ser. CRYPTO, 2012.
[4] R. A. Popa, C. M. S. Redfield, N. Zeldovich, and H. Balakrishnan, “CryptDB: Protecting Confidentiality with Encrypted Query Processing,” in Proceedings of the ACM Symposium on Operating Systems Principles, ser. SOSP, 2011.
[5] S. Tu, M. F. Kaashoek, S. Madden, and N. Zeldovich, “Processing Analytical Queries over Encrypted Data,” in Proceedings of the International Conference on Very Large Data Bases, ser. VLDB, 2013.
[6] S. Eskandarian and M. Zaharia, “ObliDB: Oblivious Query Processing using Hardware Enclaves,” in Proceedings of the International Conference on Very Large Data Bases, ser. VLDB, 2019.
[7] D. Vinayagamurthy, A. Gribov, and S. Gorbunov, “StealthDB: a Scalable Encrypted Database with Full SQL Query Support,” Proceedings on Privacy Enhancing Technologies, 2019.
[8] A. Baumann, M. Peinado, and G. Hunt, “Shielding Applications from an Untrusted Cloud with Haven,” in Proceedings of the USENIX Symposium on Operating Systems Design and Implementation, ser. OSDI, 2014.
[9] C. Priebe, K. Vaswani, and M. Costa, “EnclaveDB: A Secure Database using SGX,” in Proceedings of the IEEE Symposium on Security and Privacy, ser. S&P, 2018.
[10] D. J. Abadi, P. Boncz, S. Harizopoulos, S. Idreos, and S. Madden, “The Design and Implementation of Modern Column-Oriented Database Systems,” Foundations and Trends® in Databases, 2013.
[11] P. A. Boncz and M. L. Kersten, “MIL primitives for querying a fragmented world,” The VLDB Journal, 1999.
[12] G. P. Copeland and S. N. Khoshafian, “A Decomposition Storage Model,” in Proceedings of the ACM International Conference on Management of Data, ser. SIGMOD, 1985.
[13] D. J. DeWitt, R. H. Katz, F. Olken, L. D. Shapiro, M. R. Stonebraker, and D. A. Wood, “Implementation Techniques for Main Memory Database Systems,” in Proceedings of the ACM International Conference on Management of Data, ser. SIGMOD, 1984.
[14] H. Garcia-Molina and K. Salem, “Main Memory Database Systems: An Overview,” IEEE Transactions on knowledge and data engineering, 1992.
[15] P.-Å. Larson and J. Levandoski, “Modern Main-Memory Database Systems,” Proceedings of the VLDB Endowment, 2016.
[16] D. J. Abadi, S. Madden, and M. Ferreira, “Integrating Compression and Execution in Column-Oriented Database Systems,” in Proceedings of the ACM International Conference on Management of Data, ser. SIGMOD, 2006.
[17] T. Willhalm, N. Popovici, Y. Boshmaf, H. Plattner, A. Zeier, and J. Schaffner, “SIMD-Scan: Ultra Fast in-Memory Table Scan Using On-Chip Vector Processing Units,” Proceedings of the VLDB Endowment, 2009.
[18] P. A. Boncz, M. L. Kersten, and S. Manegold, “Breaking the Memory Wall in MonetDB,” Communications of the ACM, 2008.
[19] SAP America, Inc. (2020) SAP HANA — In-Memory Database. [Online]. Available: https://www.sap.com/products/hana.html
[20] Oracle. (2020) In-Memory Database — Oracle. [Online]. Available: https://www.oracle.com/database/technologies/in-memory.html
[21] S. Idreos, F. Groffen, N. Nes, S. Manegold, K. S. Mullender, and M. L. Kersten, “MonetDB: Two Decades of Research in Column-oriented Database Architectures,” IEEE Data Engineering Bulletin, 2012.
[22] M. Stonebraker, D. J. Abadi, A. Batkin, X. Chen, M. Cherniack, M. Ferreira, E. Lau, A. Lin, S. Madden, E. O’Neil et al., “C-store: A Column-Oriented DBMS,” in Proceedings of the International Conference on Very Large Data Bases, ser. VLDB, 2005.
[23] I. Müller, C. Ratsch, and F. Faerber, “Adaptive String Dictionary Compression in In-Memory Column-Store Database Systems,” in Proceedings of the International Conference on Extending Database Technology, ser. EDBT, 2014.
[24] I. Anati, S. Gueron, S. P. Johnson, and V. R. Scarlata, “Innovative Technology for CPU Based Attestation and Sealing,” in Proceedings of the Workshop on Hardware and Architectural Support for Security and Privacy, ser. HASP, 2013.
[25] V. Costan and S. Devadas, “Intel SGX Explained,” IACR Cryptology ePrint Archive, Report 2016/086, 2016.
[26] M. Hoekstra, R. Lal, P. Pappachan, V. Phegade, and J. Del Cuvillo, “Using Innovative Instructions to Create Trustworthy Software Solutions,” in Proceedings of the Workshop on Hardware and Architectural Support for Security and Privacy, ser. HASP, 2013.
[27] Intel. (2014) Intel® Software Guard Extensions Programming Reference. [Online]. Available: https://software.intel.com/sites/default/files/managed/48/88/329298-002.pdf
[28] Intel Corporation. (2015) Intel® Software Guard Extensions (Intel® SGX). [Online]. Available: https://software.intel.com/sites/default/files/332680-002.pdf
[29] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shafi, V. Shanbhogue, and U. R. Savagaonkar, “Innovative Instructions and Software Model for Isolated Execution,” in Proceedings of the Workshop on Hardware and Architectural Support for Security and Privacy, ser. HASP, 2013.
[30] J. Katz and Y. Lindell, Introduction to Modern Cryptography, 2nd ed. CRC press, 2015.
[31] G. Chen, S. Chen, Y. Xiao, Y. Zhang, Z. Lin, and T. H. Lai, “SGXPectre: Stealing Intel Secrets from SGX Enclaves via Speculative Execution,” in Proceedings of the IEEE European Symposium on Security and Privacy, ser. EuroS&P, 2019.
[32] J. Van Bulck, M. Minkin, O. Weisse, D. Genkin, B. Kasikci, F. Piessens, M. Silberstein, T. F. Wenisch, Y. Yarom, and R. Strackx, “Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution,” in Proceedings of the USENIX Security Symposium, ser. USENIX Security, 2018.
[33] M. Schwarz, M. Lipp, D. Moghimi, J. Van Bulck, J. Stecklina, T. Prescher, and D. Gruss, “ZombieLoad: Cross-Privilege-Boundary Data Sampling,” in Proceedings of the ACM SIGSAC Conference on Computer and Communications Security, ser. CCS, 2019.
[34] S. van Schaik, M. Minkin, A. Kwong, D. Genkin, and Y. Yarom. (2020) CacheOut: Leaking Data on Intel CPUs via Cache Evictions. [Online]. Available: https://cacheoutattack.com/
[35] F. Brasser, U. Müller, A. Dmitrienko, K. Kostiainen, S. Capkun, and A. Sadeghi, “Software Grand Exposure: SGX Cache Attacks Are Practical,” in Proceedings of the USENIX Conference on Offensive Technologies, ser. WOOT, 2017.
[36] N. Weichbrodt, A. Kurmus, P. Pietzuch, and R. Kapitza, “AsyncShock: Exploiting Synchronisation Bugs in Intel SGX Enclaves,” in Proceedings of the European Symposium on Research in Computer Security, ser. ESORICS, 2016.
[37] Y. Xu, W. Cui, and M. Peinado, “Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems,” in Proceedings of the IEEE Symposium on Security and Privacy, ser. S&P, 2015.
[38] M. Schwarz, S. Weiser, D. Gruss, C. Maurice, and S. Mangard, “Malware Guard Extension: Using SGX to Conceal Cache Attacks,” in Proceedings of the International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, ser. DIMVA, 2017.
[39] M. Schwarz, S. Weiser, and D. Gruss, “Practical Enclave Malware with Intel SGX,” in Proceedings of the International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, ser. DIMVA, 2019.
[40] Intel. (2019) Intel® Software Guard Extensions Trusted Computing Base Recovery. [Online]. Available: https://software.intel.com/sites/default/files/managed/01/7b/Intel-SGX-Trusted-Computing-Base-Recovery.pdf
[41] S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena, “Preventing Page Faults from Telling Your Secrets,” in Proceedings of the ACM on Asia Conference on Computer and Communications Security, ser. ASIACCS, 2016.
[42] S. Chen, X. Zhang, M. K. Reiter, and Y. Zhang, “Detecting Privileged Side-Channel Attacks in Shielded Execution with Déjà Vu,” in Proceedings of the ACM on Asia Conference on Computer and Communications Security, ser. ASIACCS, 2017.
[43] D. Gruss, J. Lettner, F. Schuster, O. Ohrimenko, I. Haller, and M. Costa, “Strong and Efficient Cache Side-Channel Protection using Hardware Transactional Memory,” in Proceedings of the USENIX Security Symposium, ser. USENIX Security, 2017.
[66] P. Grubbs, M. Lacharite, B. Minaud, and K. G. Paterson, “Pump up the Volume: Practical Database Reconstruction from Volume Leakage on Range Queries,” in Proceedings of the ACM Conference on Computer and Communications Security, ser. CCS, 2018.
[67] Z. Gui, O. Johnson, and B. Warinschi, “Encrypted Databases: New Volume Attacks against Range Queries,” in Proceedings of the ACM Conference on Computer and Communications Security, ser. CCS, 2019.
[68] G. Kellaris, G. Kollios, K. Nissim, and A. O’Neill, “Generic Attacks on Secure Outsourced Databases,” in Proceedings of the ACM SIGSAC Conference on Computer and Communications Security, ser. CCS, 2016.
[69] Y. Lu, “Privacy-Preserving Logarithmic-time Search on Encrypted Data in Cloud,” in Proceedings of the Network and Distributed System Security Symposium, ser. NDSS, 2012.
[70] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe, J. Lind, D. Muthukumaran, D. O’Keeffe, M. L. Stillwell, D. Goltzsche, D. Eyers, R. Kapitza, P. Pietzuch, and C. Fetzer, “SCONE: Secure Linux Containers with Intel SGX,” in Proceedings of the USENIX Symposium on Operating Systems Design and Implementation, ser. OSDI, 2016.
[71] V. Sartakov, N. Weichbrodt, S. Krieter, T. Leich, and R. Kapitza, “STANlite–a database engine for secure data processing at rack-scale level,” in Proceedings of the IEEE International Conference on Cloud Engineering, ser. IC2E, 2018.
[72] B. Fuhry, R. Bahmani, F. Brasser, F. Hahn, F. Kerschbaum, and A. Sadeghi, “HardIDX: Practical and Secure Index with SGX,” in Proceedings of the IFIP Annual Conference on Data and Applications Security and Privacy, ser. DBSec, 2017.
[73] P. Antonopoulos, A. Arasu, K. D. Singh, K. Eguro, N. Gupta, R. Jain, R. Kaushik, H. Kodavalla, D. Kossmann, N. Ogg et al., “Azure SQL Database Always Encrypted,” in Proceedings of the ACM International Conference on Management of Data, ser. SIGMOD, 2020.
[74] A. Arasu, K. Eguro, R. Kaushik, D. Kossmann, P. Meng, V. Pandey, and R. Ramamurthy, “Concerto: A High Concurrency Key-Value Store with Integrity,” in Proceedings of the ACM International Conference on Management of Data, ser. SIGMOD, 2017.
[75] R. Agrawal, J. Kiernan, R. Srikant, and Y. Xu, “Order Preserving Encryption for Numeric Data,” in Proceedings of the ACM International Conference on Management of Data, ser. SIGMOD, 2004.
[76] A. Boldyreva, N. Chenette, Y. Lee, and A. O’Neill, “Order-Preserving Symmetric Encryption,” in Proceedings of the Annual International Conference on the Theory and Applications of Cryptographic Techniques, ser. EUROCRYPT, 2009.
[77] F. Kerschbaum and A. Schröpfer, “Optimal Average-Complexity Ideal-Security Order-Preserving Encryption,” in Proceedings of the ACM Conference on Computer and Communications Security, ser. CCS, 2014.
[78] M.-S. Lacharité, B. Minaud, and K. G. Paterson, “Improved Reconstruction Attacks on Encrypted Data Using Range Query Leakage,” in Proceedings of the IEEE Symposium on Security and Privacy, ser. S&P, 2018.
[79] S. Faber, S. Jarecki, H. Krawczyk, Q. Nguyen, M. Rosu, and M. Steiner, “Rich Queries on Encrypted Data: Beyond Exact Matches,” in Proceedings of the European Symposium on Research in Computer Security, ser. ESORICS, 2015.
[80] V. Pappas, F. Krell, B. Vo, V. Kolesnikov, T. Malkin, S. G. Choi, W. George, A. Keromytis, and S. Bellovin, “Blind Seer: A Scalable Private DBMS,” in Proceedings of the Symposium on Security and Privacy, ser. S&P, 2014.
[81] M. Egorov and M. Wilkison, “ZeroDB white paper,” arXiv.org, arXiv:1602.07168, 2016.
[44] J. Laski and W. Stanley, Software Verification and Analysis: An Integrated, Hands-On Approach. Springer Science & Business Media, 2009.
[45] S. Matetic, M. Ahmed, K. Kostiainen, A. Dhar, D. Sommer, A. Gervais, A. Juels, and S. Capkun, “ROTE: Rollback Protection for Trusted Execution,” in Proceedings of the USENIX Security Symposium, ser. USENIX Security, 2017.
[46] M. Brandenburger, C. Cachin, M. Lorenz, and R. Kapitza, “Rollback and Forking Detection for Trusted Execution Environments using Lightweight Collective Memory,” in Proceedings of the Annual IEEE/IFIP International Conference on Dependable Systems and Networks, ser. DSN, 2017.
[47] F. Kerschbaum and A. Tueno, “An Efficiently Searchable Encrypted Data Structure for Range Queries,” in Proceedings of the European Symposium on Research in Computer Security, ser. ESORICS, 2019.
[48] D. Pouliot, S. Griffy, and C. V. Wright, “The Strength of Weak Randomization: Efficiently Searchable Encryption with Minimal Leakage,” IACR Cryptology ePrint Archive, Report 2017/1098, 2017.
[49] S. Krastnikov, F. Kerschbaum, and D. Stebila, “Efficient Oblivious Database Joins,” arXiv.org, arXiv:2003.09481, 2020.
[50] S. Harizopoulos, V. Liang, D. J. Abadi, and S. Madden, “Performance Tradeoffs in Read-Optimized Databases,” in Proceedings of the International Conference on Very Large Data Bases, ser. VLDB, 2006.
[51] F. Färber, N. May, W. Lehner, P. Große, I. Müller, H. Rauhe, and J. Dees, “The SAP HANA Database – An Architecture Overview,” IEEE Data Engineering Bulletin, 2012.
[52] F. Hübner, J. Böse, J. Krüger, C. Tosun, A. Zeier, and H. Plattner, “A cost-aware strategy for merging differential stores in column-oriented in-memory DBMS,” in Proceedings of the International Workshop on Business Intelligence for the Real-Time Enterprise, ser. BIRTE, 2011.
[53] S. Sasy, S. Gorbunov, and C. W. Fletcher, “ZeroTrace: Oblivious Memory Primitives from Intel SGX,” in Proceedings of the Network and Distributed System Security Symposium, ser. NDSS, 2018.
[54] W. Zheng, A. Dave, J. G. Beekman, R. A. Popa, J. E. Gonzalez, and I. Stoica, “Opaque: An Oblivious and Encrypted Distributed Analytics Platform,” in Proceedings of the USENIX Symposium on Networked Systems Design and Implementation, ser. NSDI, 2017.
[55] P. A. Boncz, M. Zukowski, and N. Nes, “MonetDB/X100: Hyper-Pipelining Query Execution,” in Proceedings of the Conference on Innovative Data Systems, ser. CIDR, 2005.
[56] M. J. Parreira Pereira, “Tools and Techniques for the Verification of Modular Stateful Code,” Ph.D. dissertation, Université Paris-Saclay (ComUE), 2018.
[57] M. Lindgren, “Practical Verification of Stateful Embedded C Code using Finite State Machines and VCC,” 2020.
[58] D. Boneh, K. Lewi, M. Raykova, A. Sahai, M. Zhandry, and J. Zimmerman, “Semantically Secure Order-Revealing Encryption: Multi-input Functional Encryption Without Obfuscation,” in Proceedings of the Annual International Conference on the Theory and Applications of Cryptographic Techniques, ser. EUROCRYPT, 2015.
[59] V. Bindschaedler, P. Grubbs, D. Cash, T. Ristenpart, and V. Shmatikov, “The Tao of Inference in Privacy-Protected Databases,” in Proceedings of the International Conference on Very Large Data Bases, ser. VLDB, 2018.
[60] P. Grubbs, K. Sekniqi, V. Bindschaedler, M. Naveed, and T. Ristenpart, “Leakage-Abuse Attacks against Order-Revealing Encryption,” in Proceedings of the Symposium on Security and Privacy, ser. S&P, 2017.
[61] A. Boldyreva, N. Chenette, and A. O’Neill, “Order-Preserving Encryption Revisited: Improved Security Analysis and Alternative Solutions,” in Proceedings of the Annual International Cryptology Conference, ser. CRYPTO, 2011.
[62] C. Mavroforakis, N. Chenette, A. O’Neill, G. Kollios, and R. Canetti, “Modular Order-Preserving Encryption, Revisited,” in Proceedings of the ACM International Conference on Management of Data, ser. SIGMOD, 2015.
[63] M. Bellare, A. Boldyreva, and A. O’Neill, “Deterministic and Efficiently Searchable Encryption,” in Proceedings of the Annual International Cryptology Conference, ser. CRYPTO, 2007.
[64] M. Naveed, S. Kamara, and C. V. Wright, “Inference Attacks on Property-Preserving Encrypted Databases,” in Proceedings of the ACM Conference on Computer and Communications Security, ser. CCS, 2015.
[65] F. Kerschbaum, “Frequency-Hiding Order-Preserving Encryption,” in Proceedings of the ACM SIGSAC Conference on Computer and Communications Security, ser. CCS, 2015.