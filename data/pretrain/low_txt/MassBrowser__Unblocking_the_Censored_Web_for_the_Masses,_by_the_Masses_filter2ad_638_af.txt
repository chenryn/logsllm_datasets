# References and Implementation Details

## References

1. **Ten Ways to Discover Tor Bridges**
   - [Tor Project Blog](https://blog.torproject.org/blog/research-problems-ten-ways-discover-tor-bridges)

2. **Django Web Framework**
   - [Django Project](https://www.djangoproject.com/)

3. **Electron Framework**
   - [Electron.js](https://electronjs.org/)

4. **Evading Censorship with Browser-Based Proxies**
   - D. Fifield, N. Hardison, J. Ellithorpe, E. Stark, D. Boneh, R. Dingledine, and P. Porras, in *Privacy Enhancing Technologies*, Springer, 2012.

5. **Blocking-Resistant Communication through Domain Fronting**
   - D. Fifield, C. Lan, R. Hynes, P. Wegmann, and V. Paxson, in *Privacy Enhancing Technologies*, 2015.

6. **Where can I find an up-to-date list of free US proxies?**
   - [Quora](https://www.quora.com/Where-can-I-find-an-up-to-date-list-of-free-US-proxies)

7. **FlashProxy**
   - [Stanford University](http://crypto.stanford.edu/flashproxy/)

8. **Freedom on the Net 2017**
   - [Freedom House](https://freedomhouse.org/sites/default/files/FOTN_2017_Final.pdf), 2017.

9. **Cover Your ACKs: Pitfalls of Covert Channel Censorship Circumvention**
   - J. Geddes, M. Schuchard, and N. Hopper, in *ACM CCS*, 2013.

10. **Defeat Internet Censorship: Overview of Advanced Technologies and Products**
    - [Internet Freedom Archive](http://www.internetfreedom.org/archive/Defeat%20Internet%20Censorship%20White%20Paper.pdf), 2007.

11. **GoAgent Proxy**
    - [Google Code](https://code.google.com/p/goagent/)

12. **Google disables domain fronting capability used to evade censors**
    - [Ars Technica](https://arstechnica.com/information-technology/2018/04/google-disables-domain-fronting-capability-used-to-evade-censors/), 2018.

13. **GreatFire Analyzer**
    - [GreatFire](https://en.greatfire.org/analyzer)

14. **Games without Frontiers: Investigating Video Games as a Covert Channel**
    - B. Hahn, R. Nithyanand, P. Gill, and R. Johnson, in *European Security and Privacy (EuroS&P)*.

15. **CacheBrowser: Bypassing Chinese Censorship without Proxies Using Cached Content**
    - J. Holowczak and A. Houmansadr, in *ACM CCS*, 2015.

16. **The Parrot Is Dead: Observing Unobservable Network Communications**
    - A. Houmansadr, C. Brubaker, and V. Shmatikov, in *IEEE Security and Privacy (S&P)*, 2013.

17. **Cirripede: Circumvention Infrastructure Using Router Redirection with Plausible Deniability**
    - A. Houmansadr, G. Nguyen, M. Caesar, and N. Borisov, in *ACM CCS*, 2011.

18. **I Want My Voice to Be Heard: IP over Voice-over-IP for Unobservable Censorship Circumvention**
    - A. Houmansadr, T. Riedl, N. Borisov, and A. Singer, in *NDSS*, 2013.

19. **No Direction Home: The True Cost of Routing Around Decoys**
    - A. Houmansadr, E. Wong, and V. Shmatikov, in *NDSS*, 2014.

20. **SWEET: Serving the Web by Exploiting Email Tunnels**
    - A. Houmansadr, W. Zhou, M. Caesar, and N. Borisov, in *Privacy Enhancing Technologies*, 2013.

21. **Iran Reportedly Blocking Encrypted Internet Traffic**
    - [Ars Technica](http://arstechnica.com/tech-policy/2012/02/iran-reportedly-blocking-encrypted-internet-traffic/)

22. **How Iran Censors The Internet**
    - [Popular Science](http://www.popsci.com/technology/article/2013-03/how-iran-censors-internet-infographic)

23. **Decoy Routing: Toward Unblockable Internet Communication**
    - J. Karlin, D. Ellard, A. Jackson, C. Jones, G. Lauer, D. Mankins, and W. Strayer, in *FOCI*, 2011.

24. **SoK: Making Sense of Censorship Resistance Systems**
    - S. Khattak, T. Elahi, L. Simon, C. Swanson, S. Murdoch, and I. Goldberg, in *Privacy Enhancing Technologies*, 2016.

25. **Lantern**
    - [Get Lantern](https://getlantern.org/)

26. **A Taxonomy of Internet Censorship and Anti-Censorship**
    - C. Leberknight, M. Chiang, H. Poor, and F. Wong, [Princeton University](http://www.princeton.edu/~chiangm/anticensorship.pdf), 2010.

27. **Fighting Censorship with Algorithms**
    - M. Mahdian, in *Fun with Algorithms*, 2010.

28. **Traversal Using Relays around NAT (TURN): Relay Extensions to Session Traversal Utilities for NAT (STUN)**
    - P. Matthews, R. Mahy, and J. Rosenberg, 2010.

29. **CovertCast: Using Live Streaming to Evade Internet Censorship**
    - R. McPherson, A. Houmansadr, and V. Shmatikov, in *Privacy Enhancing Technologies*, 2016.

30. **meek Pluggable Transport**
    - [Tor Project Wiki](https://trac.torproject.org/projects/tor/wiki/doc/meek)

31. **Summary of meek’s costs, March 2017**
    - [Tor Project Mailing List](https://lists.torproject.org/pipermail/tor-project/2017-April/001097.html)

32. **SkypeMorph: Protocol Obfuscation for Tor Bridges**
    - H. Moghaddam, B. Li, M. Derakhshani, and I. Goldberg, in *ACM CCS*, 2012.

33. **Enemy At the Gateways: Censorship-Resilient Proxy Distribution Using Game Theory**
    - M. Nasr, S. Farhang, A. Houmansadr, and J. Grossklags, in *NDSS*, 2019.

34. **GAME OF DECOYS: Optimal Decoy Routing Through Game Theory**
    - M. Nasr and A. Houmansadr, in *ACM CCS*, ACM, 2016.

35. **The Waterfall of Liberty: Decoy Routing Circumvention that Resists Routing Attacks**
    - M. Nasr, H. Zolfaghari, and A. Houmansadr, in *ACM CCS*, 2017.

36. **ICLab: A Global, Longitudinal Internet Censorship Measurement Platform**
    - A. Niaki, S. Cho, Z. Weinberg, N. Hoang, A. Razaghpanah, N. Christin, and P. Gill, *IEEE Security & Privacy*, 2020.

37. **VPN Gate: A Volunteer-Organized Public VPN Relay System with Blocking Resistance for Bypassing Government Censorship Firewalls**
    - D. Nobori and Y. Shinjo, in *NSDI*, 2014.

38. **A Simple Obfuscating Proxy**
    - [Tor Project](https://www.torproject.org/projects/obfsproxy.html.en)

39. **Toward Continual Measurement of Global Network-Level Censorship**
    - P. Pearce, R. Ensafi, F. Li, N. Feamster, and V. Paxson, *IEEE Security & Privacy*, vol. 16, no. 1, 2018.

40. **Global Measurement of DNS Manipulation**
    - P. Pearce, B. Jones, F. Li, R. Ensafi, N. Feamster, N. Weaver, and V. Paxson, in *USENIX Security*, 2017.

41. **A Glance Through the VPN Looking Glass: IPv6 Leakage and DNS Hijacking in Commercial VPN Clients**
    - V. Perta, M. Barbera, G. Tyson, H. Haddadi, and A. Mei, *Proceedings on Privacy Enhancing Technologies*, vol. 2015, no. 1, 2015.

42. **Pluggable Transports for Tor**
    - [Tor Project](https://www.torproject.org/docs/pluggable-transports.html.en)

43. **Psiphon**
    - [Psiphon](http://psiphon.ca/)

44. **The Transport Layer Security (TLS) Protocol Version 1.3**
    - E. Rescorla, RFC 8446, Tech. Rep., August 2018.

45. **Encrypted Server Name Indication for TLS 1.3**
    - E. Rescorla, K. Oku, N. Sullivan, and C. Wood, *Internet-Draft draft-ietf-tls-esni-04*, July 2019, work in progress. [Online]. Available: [IETF Draft](https://datatracker.ietf.org/doc/html/draft-ietf-tls-esni-04)

46. **How Governments Have Tried to Block Tor**
    - [Tor Project](https://svn.torproject.org/svn/projects/presentations/slides-28c3.pdf)

47. **Routing Around Decoys**
    - M. Schuchard, J. Geddes, C. Thompson, and N. Hopper, in *ACM CCS*, 2012.

48. **Snowflake Pluggable Transport**
    - [GitHub](https://github.com/keroserene/snowflake)

49. **Tor Metrics**
    - [Tor Project](https://metrics.torproject.org/)

50. **SoK: Towards Grounding Censorship Circumvention in Empiricism**
    - M. Tschantz, S. Afroz, V. Paxson et al., in *IEEE Security and Privacy (S&P)*.

51. **Ultrasurf**
    - [UltraReach](http://www.ultrareach.com)

52. **uProxy**
    - [uProxy](https://www.uproxy.org/)

53. **uProxy’s Shadowsocks Version**
    - [GitHub](https://github.com/uProxy)

54. **uProxy’s WebRTC Version**
    - [GitHub](https://github.com/UWNetworksLab/uproxy-p2p)

55. **Rook: Using Video Games as a Low-Bandwidth Censorship-Resistant Communication Platform**
    - P. Vines and T. Kohno, in *ACM Workshop on Privacy in the Electronic Society*. ACM, 2015.

56. **How Does Your VPN Speed Measure Against Other VPNs in China?**
    - [GreatFire](https://cc.greatfire.org/en)

57. **Top 110 Free Proxy Sites – Best Free Proxy Servers List 2017**
    - [AllTechBuzz](https://www.alltechbuzz.net/top-best-free-proxy-sites-servers-2016/)

58. **SoftEther VPN User Forum: VPN Gate Servers Blocked in China**
    - [SoftEther Forum](http://forum.vpngate.net/viewtopic.php?f=11&t=42498)

59. **SoftEther VPN User Forum: Can Not Be Used In China**
    - [SoftEther Forum](http://forum.vpngate.net/viewtopic.php?f=11&t=38298)

60. **VPNGate: VPN Server List**
    - [VPNGate](http://www.vpngate.net/en/)

61. **Seeing Through Network-Protocol Obfuscation**
    - L. Wang, K. Dyer, A. Akella, T. Ristenpart, and T. Shrimpton, in *ACM CCS*, 2015.

62. **CensorSpoofer: Asymmetric Communication Using IP Spoofing for Censorship-Resistant Web Browsing**
    - Q. Wang, X. Gong, G. Nguyen, A. Houmansadr, and N. Borisov, in *ACM CCS*, 2012.

63. **StegoTorus: A Camouflage Proxy for the Tor Anonymity System**
    - Z. Weinberg, J. Wang, V. Yegneswaran, L. Briesemeister, S. Cheung, F. Wang, and D. Boneh, in *ACM CCS*, 2012.

64. **Knock Knock Knockin’ on Bridges’ Doors**
    - T. Wilde, [Tor Project Blog](https://blog.torproject.org/blog/knock-knock-knockin-bridges-doors), 2012.

65. **Session Traversal Utilities for NAT (STUN)**
    - D. Wing, P. Matthews, R. Mahy, and J. Rosenberg, 2008.

66. **How the Great Firewall of China Is Blocking Tor**
    - P. Winter and S. Lindskog, in *FOCI*, 2012.

67. **VPN Usage Around the World**
    - J. Wolff, [Global Web Index](https://cdn2.hubspot.net/hubfs/304927/Downloads/VPN-Usage-Around-the-World-Infographic.pdf), 2017.

68. **The Internet Censor’s Dilemma**
    - J. Wolff, [TinyURL](http://tiny.cc/vfm0iz), March 2018.

69. **Telex: Anticensorship in the Network Infrastructure**
    - E. Wustrow, S. Wolchok, I. Goldberg, and J. Halderman, in *USENIX Security*, 2011.

70. **Practical Censorship Evasion Leveraging Content Delivery Networks**
    - H. Zolfaghari and A. Houmansadr, in *ACM CCS*. ACM, 2016.

## Appendix: MassBrowser's Implementation Details

### A. MassBrowser’s Implementation Details

We have fully implemented MassBrowser as an end-user software, and it is currently in the beta release state with early-adopters from around the world evaluating it. Joining our system is currently invitation-based only, and we expect to open the project to the public soon (pending code review by a third-party organization). Our current implementation of MassBrowser supports Mac, Windows, and Linux operating systems. We have hosted an anonymized version of our code at [MassBrowser GitHub](https://massbrowser.cs.umass.edu). Below are the details of our system implementation.

#### 1. The Operator Server

MassBrowser’s Operator is a suite of backend services essential for the reliable operation of MassBrowser, including strategic pairing of clients and proxies, monitoring the reachability and health of various parts of the system, and measuring the performance of MassBrowser in censored countries. We only use our own clients to perform our measurements. The Operator is primarily coded in Python using the Django web framework (approximately 10,000 lines of code). We have hosted our Operator server on Amazon CloudFront CDN, making it a domain-fronted service that cannot be blocked. The Operator’s API is accessible through both standard HTTP requests and WebSockets, though we refrain from using WebSocket connections for Clients to prevent introducing protocol fingerprints.

The Operator maintains a database of supported websites along with per-region censorship and CacheBrowsing information for all domains in the websites. To do so, the Operator has a probing component that regularly crawls the supported websites to identify domains and update its information.

We have taken various measures to ensure the scalability and reliability of our backend services. Specifically, we run multiple redundant servers for each component of the Operator, and our 24/7 health monitoring system makes regular assessments of the status of system services, sending email notifications in case of issues.

Finally, we have implemented a management console (see Figure 9) allowing us to manually monitor and configure different components of the system.

#### 2. Buddy Software

Our Buddy software is coded in JavaScript ES6 using NodeJS with a graphical user interface developed with the Electron framework (approximately 50,000 lines of code). In addition to the GUI interface, our Buddy software is also available as a command-line application for expert volunteers. The Buddy actively maintains a WebSocket connection to the Operator and will be notified of newly created sessions on this channel.

The Buddy software allows volunteers to have full transparency and control over their desired settings, including bandwidth limits, destination whitelists, and Client blacklists (see Figure 5 for a snapshot of a Buddy volunteer configuring her destination whitelists through the GUI). The Buddy software runs with minimal interference from the user, able to run in the background while providing an easily accessible switch for disabling the Buddy’s activities on the user's demand.

#### 3. Client Software

We have implemented our Client software with NodeJS and an Electron-based GUI (approximately 50,000 lines of code). A client application, such as a web browser, can connect to the Client software via a SOCKS proxy. On the first run, the Client software will walk the user through a setup wizard to assist them in configuring their preferred browsers to use MassBrowser. The current implementation of Client software provides a setup wizard to guide the client through connecting their web browser with MassBrowser (see Figure 10).

The MassBrowser Client software requires visibility into each individual request, even when encrypted with TLS. In the normal case, the proxied TLS requests would not be visible to the Client software since it does not own the website certificates. To enable the interception of TLS connections by the Client, the setup wizard adds a locally created root certificate to the client’s browser during the initial setup. Note that the root certificate does not leave the client’s computer, ensuring security as long as the client does not share the certificate with others (see Figure 10 for how the user is informed during the setup). The Client uses this certificate to "locally" man-in-the-middle MassBrowser’s TLS connections to perform load optimizations like CacheBrowsing.

In addition to the client setup wizard, we have implemented a client browser bundle for clients. The bundle comes with a pre-configured, customized Firefox browser, ready to use out of the box (see Figure 11 for a snapshot of the browser bundle).

---

**Figures:**

- **Figure 9:** Our management console
- **Figure 10:** The Client setup wizard to connect the client’s web browser to MassBrowser
- **Figure 11:** The Client browser bundle with a pre-configured Firefox browser, ready to use out of the box.