---
**作者：Artem Sapegin**  
**类别：观点**  
**评论数据：**  
- **日期：2017-02-10 10:25:54**  
  - **留言：** 最重要的是，去看那本《提问的艺术》
  - **IP地址：** 183.240.22.86
  - **用户名：** 来自广东东莞的 Chrome 56.0|GNU/Linux 用户

**统计信息：**
- **评论数：** 1
- **收藏次数：** 3
- **点赞数：** 0
- **分享次数：** 0
- **浏览量：** 8428

**发布日期：** 2017-02-08 09:02:00  
**编辑推荐：** 是  
**摘要：** 本文结合了我的个人经历和对新一年的期望。我热切希望表达自己的想法，并期待在下方的评论区看到您的建议。  
**原文链接：** https://medium.freecodecamp.com/what-to-learn-in-2017-if-youre-a-frontend-developer-b6cfef46effd#.ss9xbwrew  
**ID：** 8183  
**是否翻译：** 是  
**大图：** /data/attachment/album/201702/08/090049y9y99imzi9w9cyld.jpeg  
**永久链接：** /article-8183-1.html  
**图片：** /data/attachment/album/201702/08/090049y9y99imzi9w9cyld.jpeg.thumb.jpg  
**相关文章：** []  
**审阅者：** 无  
**选择器：** 无  
**总结：** 本文结合了我的个人经历和对新一年的期望。我热切希望表达自己的想法，并期待在下方的评论区看到您的建议。  
**标签：** 设计, 前端  
**缩略图：** 否  
**标题：** 前端开发者，2017 年你应该学习什么  
**标题图片：** 是  
**译者：** GHLandy  
**更新日期：** 2017-02-08 09:02:00
---

![](/data/attachment/album/201702/08/090049y9y99imzi9w9cyld.jpeg)

在当今快节奏的技术生态中，我们往往倾向于尝试最新的发明并在网络上进行激烈的讨论。虽然这无可厚非，但我们应该放慢脚步，深入理解那些不会轻易改变的基本知识。这样不仅能提高我们的工作质量和创造的价值，还能帮助我们更快地理解和使用新工具。

本文融合了我的个人经历以及对新一年的希冀。我热切希望表达自己的想法，并期待在下方的评论区看到您的建议。

### 学习如何编写可读性高的代码

大多数时候，我们的工作是维护现有代码，而不是编写新代码。这意味着你阅读代码的时间会比编写代码的时间多得多。因此，你需要优化代码以方便其他程序员阅读，而不仅仅是解释器。

以下是我推荐的三本书，按难度递增顺序排列：
- Dustin Boswell 的《编写可读代码的艺术》（The Art of Readable Code）
- Robert C. Martin 的《代码整洁之道》（Clean Code: A Handbook of Agile Software Craftsmanship）
- Steve McConnell 的《代码大全》（Code Complete: A Practical Handbook of Software Construction）

![](/data/attachment/album/201702/08/090110m49qkzziwfgzbezj.jpeg)

### 深入学习 JavaScript

如今，每周都会出现一个新的 JavaScript 框架，声称比旧框架更好。很多人倾向于花时间学习这些框架，因为这比学习 JavaScript 本身要容易得多。但如果你不了解框架的工作原理，请立即停止使用它，直到你能够理解这些工具为止。

- 可以从 [Kyle Simpson](https://medium.com/u/5dccb9bb4625) 的 [你所不知道的 JavaScript](https://github.com/getify/You-Dont-Know-JS) 系列开始，这个系列可以在线免费阅读。
- [Eric Elliott](https://medium.com/u/c359511de780) 列出的一个长长的 [2017 年：JavaScript 的学习目标](https://medium.com/javascript-scene/top-javascript-frameworks-topics-to-learn-in-2017-700a397b711#.zhnbn4rvg)。
- [Henrique Alves](https://medium.com/u/b6c3841651ac) 列出的 [进行响应式开发之前必须了解的事情](http://alves.im/blog/before-dive-into-react.html)（实际上就是一个知识框架）。
- Mike Pennisi 的 [JavaScript 开发者：注意你的语言](https://bocoup.com/weblog/javascript-developers-watch-your-language) —— 了解 ECMAScript 新特性的 TC-39 发展过程。

### 学习函数式编程

多年来，我们一直期待着 JavaScript 引入类，但当真正引入后，我们却不想再使用类了，而是更喜欢使用函数。我们甚至使用函数来编写 HTML (JSX)。

- Kyle Simpson 的 [轻量级函数式 JavaScript](https://github.com/getify/Functional-Light-JS)。
- Frisby 教授的 [函数式编程完全指南](https://github.com/MostlyAdequate/mostly-adequate-guide) 和 [在线免费课程](https://egghead.io/courses/professor-frisby-introduces-composable-functional-javascript)。

![](/data/attachment/album/201702/08/090130vwwmxx761bbdwrrr.jpeg)

### 学习设计基础知识

作为前端开发者，我们比生态系统中的任何人都更接近用户，甚至可能比设计师还要接近。如果设计师需要检查你还原到屏幕上的每一个像素，那么你可能做错了某些事情。

- [David Kadavy](https://medium.com/u/5377a93ef640) 的《黑客设计》（Design for Hackers）或对应的 [免费课程](http://designforhackers.com/)。
- [Tracy Osborn](https://medium.com/u/e611097a5bd4) 的讲座：[为非设计人员的设计知识](https://youtu.be/ZbrzdMaumNk)。
- [Nathan Barry](https://medium.com/u/ac3090433602) 的 《Web 应用设计》（Design of Web Applications）。
- [Jason Santa Maria](https://medium.com/u/8eddcb9e4ac4) 的 《Web 页面设计》（On Web Typography）。
- Alan Cooper 的 《交互设计之路：让高科技产品回归人性》（The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity）。
- 两篇关于 UI 动画的文章：[如何使用动画来提高 UX](http://babich.biz/how-to-use-animation-to-improve-ux/)、[过渡界面](https://medium.com/@pasql/transitional-interfaces-926eb80d64e3#.igcwawszz)。

### 学习如何与人协作

有些人更喜欢通过编程与计算机交互，而不是与人交流。不幸的是，这种做法并不理想。基本上，我们无法完全独立工作：我们需要与其他开发者、设计师和项目经理——有时甚至是用户——交换意见。这是一个艰巨的任务，但如果你想真正理解自己在做什么以及为什么这么做，这是非常重要的，因为这正是我们工作的价值所在。

- [John Sonmez](https://medium.com/u/56e8cba02b) 的《软技能：代码之外的生存指南》（Soft Skills: The software developer’s life manual）。
- Robert C. Martin 的《代码整洁之道：程序员的职业素养》（The Clean Coder: A Code of Conduct for Professional Programmers）。
- Jim Camp 的 《从零开始：专业人士不想让你了解的谈判工具》（Start with No: The Negotiating Tools that the Pros Don’t Want You to Know）。

![](/data/attachment/album/201702/08/090152u00pcdprrz67trhr.jpeg)

### 学习如何为用户编写代码

大部分与同事或其他人的交流是以文本形式进行的：需求描述和评论、代码注释、Git 提交、即时聊天消息、电子邮件、推文、博客等。想象一下，人们需要花费多少时间来阅读和理解所有这些内容。如果你能写得更清楚、简洁，将大大提高工作效率。

- William Zinsserd 的《写作法宝 : 非虚构写作指南》（On Writing Well: The Classic Guide to Writing Nonfiction）。
- William Strunk 和 E. B. White 的《英文写作指南》（The Elements of Style）。
- [奥威尔写作规则](http://www.economist.com/blogs/prospero/2013/07/george-orwell-writing)。
- 俄文：很好的 [Glavred 课程](http://maximilyahov.ru/glvrd-pro/)。

### 学习以前的计算机科学智慧

前端开发已经不仅仅局限于简单的下拉菜单，它变得前所未有的复杂。随着问题复杂度的增加，“JavaScript 疲惫症”也随之而来。这意味着现在需要学习过去几十年非前端开发者积累的知识精华。这也是我最想听到您推荐的内容。

以下是我个人的推荐：
- Coursera 的 《学习像计算机科学家那样思考方式》（Learn To Think Like A Computer Scientist）。
- [DHH](https://medium.com/u/54bcbf647830) 的 [对我意义非凡的五本书](https://signalvnoise.com/posts/3375-the-five-programming-books-that-meant-most-to-me)。

---

读完本文，您有什么建议呢？在新的一年里，您又想学习些什么呢？

---

**作者简介：**
Web 开发者，充满激情的摄影爱好者，crazy dogs 的主人。

**译者简介：**
[GHLandy](http://GHLandy.com) —— 欲得之，则为之奋斗 (If you want it, work for it.)。

---

**原文链接：**  
作者：[Artem Sapegin](https://medium.freecodecamp.com/@sapegin)  
译者：[GHLandy](https://github.com/GHLandy)  
校对：[bestony](https://github.com/bestony)  
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出

---