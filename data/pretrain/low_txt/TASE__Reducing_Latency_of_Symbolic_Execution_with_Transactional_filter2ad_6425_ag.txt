### Path of Delivering Client Messages to the Server

This section outlines a method for delivering client messages to the server, serving as an inline defense against client exploits. This approach does not require prior knowledge of server vulnerabilities.

### Acknowledgments

We extend our gratitude to our shepherd, Hamed Okhravi, and the anonymous reviewers for their constructive feedback. This research was partially supported by grant N00014-17-1-2369 from the U.S. Office of Naval Research.

### References

1. **J. M. Allen**  
   "OS and Application Fingerprinting Techniques"  
   *SANS Institute*  
   [Link](https://www.sans.org/reading-room/whitepapers/tools/os-application-fingerprinting-techniques-1891)  
   (September 2007)

2. **S. Anand, P. Godefroid, and N. Tillmann**  
   "Demand-Driven Compositional Symbolic Execution"  
   *14th International Conference on Tools and Algorithms for the Construction and Analysis of Systems*  
   LNCS, vol. 4963, pp. 367–381  
   (March 2008)

3. **Apple Corporation**  
   "Enabling the malloc Debugging Features"  
   [Link](https://developer.apple.com/library/archive/documentation/Performance/Conceptual/ManagingMemory/Articles/MallocDebug.html)  
   (April 23, 2013)

4. **F. Bellard**  
   "QEMU: A Fast and Portable Dynamic Translator"  
   *USENIX Annual Technical Conference, FREENIX Track*  
   pp. 41–46  
   (April 2005)

5. **D. Bethea, R. A. Cochran, and M. K. Reiter**  
   "Server-Side Verification of Client Behavior in Online Games"  
   *ACM Transactions on Information and System Security*  
   vol. 14  
   (December 4)

6. **E. Bosman, A. Slowinska, and H. Bos**  
   "Minemu: The World’s Fastest Taint Tracker"  
   *Recent Advances in Intrusion Detection, 14th International Symposium*  
   LNCS, vol. 6961, pp. 1–20  
   (September 2011)

7. **R. S. Boyer, B. Elspas, and K. N. Levitt**  
   "SELECT – A Formal System for Testing and Debugging Programs by Symbolic Execution"  
   *International Conference on Reliable Software*  
   pp. 234–245  
   (1975)

8. **D. Bruening and Q. Zhao**  
   "Practical Memory Checking with Dr. Memory"  
   *9th IEEE/ACM International Symposium on Code Generation and Optimization*  
   pp. 213–223  
   (April 2011)

9. **D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha**  
   "Towards Automatic Generation of Vulnerability-Based Signatures"  
   *IEEE Symposium on Security and Privacy*  
   (May 2006)

10. **C. Cadar, D. Dunbar, and D. Engler**  
    "KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs"  
    *8th USENIX Symposium on Operating Systems Design and Implementation*  
    (December 2008)

11. **C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R. Engler**  
    "EXE: Automatically Generating Inputs of Death"  
    *ACM Conference on Computer and Communications Security*  
    (October 2006)

12. **C. Cadar and K. Sen**  
    "Symbolic Execution for Software Testing: Three Decades Later"  
    *Communications of the ACM*  
    vol. 56, no. 2, pp. 82–90  
    (February 2013)

13. **S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley**  
    "Unleashing Mayhem on Binary Code"  
    *IEEE Symposium on Security and Privacy*  
    pp. 380–394  
    (May 2012)

14. **S. Chen, X. Zhang, M. K. Reiter, and Y. Zhang**  
    "Detecting Privileged Side-Channel Attacks in Shielded Execution with Déjà Vu"  
    *12th ACM Asia Conference on Computer and Communications Security*  
    pp. 7–18  
    (April 2017)

15. **W. Cheng, Q. Zhao, B. Yu, and S. Hiroshige**  
    "TaintTrace: Efficient Flow Tracing with Dynamic Binary Rewriting"  
    *11th IEEE Symposium on Computers and Communications*  
    (June 2006)

16. **A. Chi, R. A. Cochran, M. Nesfield, M. K. Reiter, and C. Sturton**  
    "A System to Verify Network Behavior of Known Cryptographic Clients"  
    *14th USENIX Symposium on Networked Systems Design and Implementation*  
    p. 177–195  
    (March 2017)

17. **V. Chipounov, V. Kunetsov, and G. Candea**  
    "The S2E Platform: Design, Implementation, and Applications"  
    *ACM Transactions on Computer Systems*  
    vol. 30, no. 1  
    (February 2012)

18. **V. Chipounov, V. Kuznetsov, and G. Candea**  
    "S2E: A Platform for In-Vivo Multi-Path Analysis of Software Systems"  
    *16th International Conference on Architectural Support for Programming Languages and Operating Systems*  
    pp. 265–278  
    (2011)

19. **R. A. Cochran and M. K. Reiter**  
    "Toward Online Verification of Client Behavior in Distributed Applications"  
    *20th ISOC Network and Distributed System Security Symposium*  
    (February 2013)

20. **M. Costa, M. Castro, L. Zhou, L. Zhang, and M. Peinado**  
    "Bouncer: Securing Software by Blocking Bad Input"  
    *21st ACM Symposium on Operating Systems Principles*  
    (October 2007)

21. **C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang**  
    "StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks"  
    *7th USENIX Security Symposium*  
    (January 1998)

22. **C. Disselkoen, D. Kohlbrenner, L. Porter, and D. Tullsen**  
    "PRIME+ABORT: A Timer-Free High-Precision L3 Cache Attack Using Intel TSX"  
    *26th USENIX Security Symposium*  
    pp. 51–67  
    (2007)

23. **DUMA – Detect Unintended Memory Access**  
    [Link](http://duma.sourceforge.net)  
    (Accessed: July 25, 2020)

24. **fork(2)**  
    *Linux Programmer's Manual*  
    [Link](http://man7.org/linux/man-pages/man2/fork.2.html)  
    (September 15, 2017)

25. **P. Godefroid, N. Klarlund, and K. Sen**  
    "DART: Directed Automated Random Testing"  
    *ACM Conference on Programming Language Design and Implementation*  
    pp. 213–223  
    (June 2005)

26. **P. Godefroid, M. Leving, and D. Molnar**  
    "SAGE: Whitebox Fuzzing for Security Testing"  
    *Communications of the ACM*  
    vol. 55, no. 3, pp. 40–44

27. **M. Herlihy and J. Moss**  
    "Transactional Memory: Architectural Support for Lock-Free Data Structures"  
    *20th International Symposium on Computer Architecture*  
    pp. 289–300  
    (1993)

28. **Intel 64 and IA-32 Architectures Software Developer’s Manual**  
    *Intel*  
    (October 2019)

29. **J. C. King**  
    "Symbolic Execution and Program Testing"  
    *Communications of the ACM*  
    vol. 19, no. 7, pp. 385–394  
    (1976)

30. **A. Kleen**  
    "TSX Anti Patterns in Lock Elision Code"  
    [Link](https://software.intel.com/en-us/articles/tsx-anti-patterns-in-lock-elision-code)  
    (March 26, 2014)

31. **C. Kruegel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna**  
    "Automating Mimicry Attacks Using Static Binary Analysis"  
    *14th USENIX Security Symposium*  
    pp. 161–176  
    (July 2005)

32. **C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood**  
    "Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation"  
    *26th ACM Conference on Programming Language Design and Implementation*  
    (June 2005)

33. **P. Maene, J. Götzfried, R. de Clercq, T. Müller, F. Freiling, and I. Verbauwhede**  
    "Hardware-Based Trusted Computing Architectures for Isolation and Attestation"  
    *IEEE Transactions on Computers*  
    vol. 67, no. 3  
    (March 2018)

34. **Microsoft Corporation**  
    "GFlags and PageHeap"  
    [Link](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/gflags-and-pageheap)  
    (May 23, 2017)

35. **D. Milushev, W. Beck, and D. Clarke**  
    "Noninterference via Symbolic Execution"  
    *Formal Techniques for Distributed Systems*  
    (2012)

36. **D. Monniaux**  
    "A Survey of Satisfiability Modulo Theory"  
    *18th International Workshop on Computer Algebra in Scientific Computing*  
    LNCS, vol. 9890, pp. 401–425  
    (2016)

37. **N. Nethercote and J. Seward**  
    "How to Shadow Every Byte of Memory Used by a Program"  
    *3rd International Conference on Virtual Execution Environments*  
    pp. 65–74  
    (June 2007)

38. **J. Newsome and D. Song**  
    "Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software"  
    *ISOC Network and Distributed System Security Symposium*  
    (February 2005)

39. **S. Poeplau and A. Francillon**  
    "Symbolic Execution with SymCC: Don’t Interpret, Compile!"  
    *29th USENIX Security Symposium*  
    pp. 181–198  
    (August 2020)

40. **C. S. Păsăreanu, P. Mehlitz, D. Bushnell, K. Gundy-Burlet, M. Lowry, S. Person, and M. Pape**  
    "Combining Unit-Level Symbolic Execution and System-Level Concrete Execution for Testing NASA Software"  
    *International Symposium on Software Testing and Analysis*  
    pp. 15–26  
    (July 2008)

41. **C. S. Păsăreanu, Q. S. Phan, and P. Malacaria**  
    "Multi-Run Side-Channel Analysis Using Symbolic Execution and Max-SMT"  
    *29th IEEE Computer Security Foundations Symposium*  
    pp. 387–400  
    (2016)

42. **F. Qin, C. Wang, Z. Li, H. Kim, Y. Zhou, and Y. Wu**  
    "LIFT: A Low-Overhead Practical Information Flow Tracking System for Detecting Security Attacks"  
    *39th IEEE/ACM International Symposium on Microarchitecture*  
    (December 2006)

43. **K. Sen, D. Marinov, and G. Agha**  
    "CUTE: A Concolic Unit Testing Engine for C"  
    *13th International Symposium on the Foundations of Software Engineering*  
    (September 2005)

44. **K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov**  
    "AddressSanitizer: A Fast Address Sanity Checker"  
    *USENIX Annual Technical Conference*  
    (June 2012)

45. **M.-W. Shih, S. Lee, T. Kim, and M. Peinado**  
    "T-SGX: Eradicating Controlled-Channel Attacks Against Enclave Programs"  
    *ISOC Network and Distributed System Security Symposium*  
    (February 2017)

46. **Y. Shoshitaishvili, R. Wang, C. Hauser, C. Kruegel, and G. Vigna**  
    "Firmalice – Automatic Detection of Authentication Bypass Vulnerabilities in Binary Firmware"  
    *ISOC Network and Distributed System Security Symposium*  
    (February 2015)

47. **S. Sidiroglou, G. Giovanidis, and A. D. Keromytis**  
    "A Dynamic Mechanism for Recovering from Buffer Overflow Attacks"  
    *8th International Conference on Information Security*  
    LNCS, vol. 3650, pp. 1–15  
    (September 2005)

48. **M. Soos, K. Nohl, and C. Castelluccia**  
    "Extending SAT Solvers to Cryptographic Problems"  
    *12th International Conference on Theory and Applications of Satisfiability Testing*  
    LNCS, vol. 5584, pp. 244–257  
    (2009)

49. **N. Tillmann and J. D. Halleux**  
    "Pex: White Box Test Generation for .NET"  
    *2nd International Conference on Tests and Proofs*  
    pp. 134–153  
    (2008)

50. **W. Visser, C. S. Păsăreanu, and S. Khurshid**  
    "Test Input Generation with Java PathFinder"  
    *SIGSOFT Software Engineering Notes*  
    vol. 29, pp. 97–107  
    (July 2004)

51. **R. Wang, X. Wang, Z. Li, H. Tang, M. K. Reiter, and Z. Dong**  
    "Privacy-Preserving Genomic Computation Through Program Specialization"  
    *16th ACM Conference on Computer and Communications Security*  
    (November 2009)

52. **J. Yang, C. Sar, P. Twohey, C. Cadar, and D. Engler**  
    "Automatically Generating Malicious Disks Using Symbolic Execution"  
    *IEEE Symposium on Security and Privacy*  
    (May 2006)

53. **J. Yeongjin, S. Lee, and T. Kim**  
    "Breaking Kernel Address Space Layout Randomization with Intel TSX"  
    *ACM Conference on Computer and Communications Security*  
    pp. 380–392  
    (2016)

54. **D. Yuan, H. Mai, W. Xiong, L. Tan, Y. Zhou, and S. Pasupathy**  
    "SherLog: Error Diagnosis by Connecting Clues from Run-Time Logs"  
    *15th International Conference on Architectural Support for Programming Languages and Operating Systems*  
    pp. 143–154  
    (March 2010)

55. **I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim**  
    "QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing"  
    *27th USENIX Security Symposium*  
    (August 2018)

56. **C. Zamfir and G. Candea**  
    "Execution Synthesis: A Technique for Automated Software Debugging"  
    *5th European Conference on Computer Systems*  
    pp. 321–334  
    (April 2010)

57. **Z. Zhou, Z. Qian, M. K. Reiter, and Y. Zhang**  
    "Static Evaluation of Noninterference Using Approximate Model Counting"  
    *39th IEEE Symposium on Security and Privacy*  
    pp. 514–528  
    (May 2018)

### Appendix

In this appendix, we profile the process count and memory usage of client behavioral verification using TASE. Figure 7 shows the process counts and memory usage involved in verifying 21 TLS sessions using the optimized configuration. The data reported in this figure was gathered by running the `top` command on the verification computer, with 3-second snapshot intervals, while verification was being performed.

**Figure 7: Resource Usage on Verifier Computer During Verification of 21 TLS Connections (Optimized Configuration)**

(a) Running and sleeping processes
(b) Memory usage

**Figure 7a** shows the "running" and "sleeping" processes on the platform during the verification, as a function of time. Most of the processes on the computer were unrelated to verification; i.e., over 200 processes were sleeping on the computer before verification began. However, the growth in the process count once verification began was due to processes involved in verification. Importantly, the number of these processes remained relatively stable after an initial spike, indicating that the rate of forking new verification processes was roughly matched by the rate at which they exited.

**Figure 7b** illustrates the memory usage on the computer, which grew very slowly after an initial spike and never exceeded 3.6GB. This graph highlights the benefit of leveraging copy-on-write page sharing, particularly in sharing the binary representation of LLVM instructions across all processes. Memory usage has not been a limiting factor for us to date, and thus, it has not drawn our focus. We expect that with a concerted effort, we can further reduce this memory footprint.

![](path_to_figure_7a)
![](path_to_figure_7b)

**Note:** Replace `path_to_figure_7a` and `path_to_figure_7b` with the actual paths to the figures.