### BPEL4WS vs. DAML-S: Comparison

**BPEL4WS and DAML-S Overview**

- **BPEL4WS (Business Process Execution Language for Web Services)** is closely related to the ServiceModel (Process Model) component of **DAML-S (DARPA Agent Markup Language - Services)**.
- **DAML-S** defines preconditions and effects, enabling the representation of side effects of Web services. This facilitates better reasoning about the composition of services.
- **DAML-S** classes provide a richer representation of services, allowing reasoning based on inheritance and other relationships with other DAML-S classes.

**DAML-S Capabilities**

- The **ServiceProfile** and **ServiceModel** in DAML-S provide sufficient information for automated discovery, composition, and execution of services based on well-defined descriptions of inputs, outputs, preconditions, effects, and process models.

**BPEL4WS Capabilities**

- **BPEL4WS** has complex semantics for determining whether an activity actually happens in a block.
- It defines mechanisms for catching and handling faults and setting compensation handlers.
- **BPEL4WS** includes **WS-Coordination** and **WS-Transaction** to provide a context for predefined transactional semantics.

### References

- [DAML-S Services](http://www.daml.org/services/)
- [IBM DeveloperWorks: BPEL](http://www-106.ibm.com/developerworks/webservices/library/ws-bpel/)
- [DAML+OIL Index](http://www.daml.org/2001/03/daml+oil-index)
- [IBM DeveloperWorks: WS-Coordination](http://www-106.ibm.com/developerworks/webservices/library/ws-coor/)
- [IBM DeveloperWorks: WS-Transaction](http://www-106.ibm.com/developerworks/webservices/library/ws-transpec/)
- [Stanford KSL: DAML-S and BPEL](http://www.ksl.stanford.edu/projects/DAML/Webservices/DAMLS-BPEL.html)

### The Composition Process

**Definitions**

- **Grounded Tasks (GT):** Traditional workflow tasks and Web service tasks already associated with a process and its realization.
- **Service Template (ST):** A template created by the designer to indicate the intention to extend the functionality of a process by adding a Web service.

**Integration Example**

- **Get Conference Information:** A grounded task that provides conference details.
- **Hotel Reservation:** A service template that can be replaced with a specific service object (SO) to integrate into the process.
- **Get User Information:** Another grounded task that retrieves user data.

### Steps in the Composition Process

1. **Creation of ST:** Once a service template is created, it is sent to the Web service discovery module.
2. **Discovery of SO:** The discovery module uses the ST to find appropriate Web services and returns a ranked set of service object (SO) references based on their similarity to the ST.
3. **Selection of SO:** The designer selects the most suitable SO to meet the objectives.
4. **Data Mapping:** A set of data mappings is presented to the designer, suggesting possible interconnections between the newly added task interfaces and the grounded task interfaces.

### Structure of ST and SO

- **Service Template (ST):**
  - Name
  - Textual description
  - Operational metrics
  - Set of output parameters from grounded tasks
  - Set of input parameters from grounded tasks

- **Service Object (SO):**
  - Name
  - Textual description
  - Operational metrics
  - Set of output parameters
  - Set of input parameters

### The Match Function

**Overview**

- The match function is a key operation in the Web service discovery and integration process.
- It finds correspondences between a service template (ST) and a service object (SO).

**Types of Similarity Evaluated**

- **Syntactic Similarity:** Based on service names and descriptions.
- **Operational Similarity:** Based on the metrics specified in the QoS model.
- **Semantic Similarity:** Based on the semantic information to evaluate the similarity of concepts defining ST and SO interfaces.

**Syntactic Similarity Calculation**

- Syntactic similarity is calculated using the service names and descriptions.
- Additional fields can be compared, but only syntactic information is considered at this stage.

**Operational Similarity Calculation**

- Operational similarity is calculated based on the QoS metrics such as time, cost, and reliability.
- The purpose is to determine how close two Web services are based on their operational capabilities.

**Semantic Similarity Calculation**

- Semantic similarity evaluates the similarity of concepts that define ST and SO interfaces.
- Two main cases are considered:
  - Concepts defined with the same ontology.
  - Concepts defined in different ontologies.

**Integration Using Bipartite Graphs**

- For each interface to integrate, a bipartite graph is constructed with a bipartition (b(O, I)).
- Each edge has a weight representing semantic similarity.
- The optimal matching is then computed to evaluate the degree of integration.

### System Architecture

- **Web Server:** Manages the registry and service management.
- **Workflow Management System:** Handles the service objects and templates.
- **Registry and Search Engine:** Facilitate the discovery and advertisement of services.

### Discovery and Integration

- **Query Results:** After finding a set of Web services, the process is composed.
- **Performance Analysis:** Techniques such as time analysis, load analysis, and process execution monitoring are used to evaluate the performance of the composed process.
- **Simulation:** Used as an alternative technique for performance estimation when real-world tests are not feasible.

### References

- Berners-Lee, T. (2001). Keynote presentation on web services and the future of the web. Software Development Expo 2001 Visionary Keynote.
- Bussler, C. (1998). Workflow Instance Scheduling with Project Management Tools. 9th Workshop on Database and Expert Systems Applications DEXA'98.
- Casati, F., Shan, M.-C., & Georgakopoulos, D. (2001). E-Services - Guest editorial. The VLDB Journal 10(1).
- Fensel, D., & Bussler, C. (2002). The Web Service Modeling Framework. Vrije Universiteit Amsterdam (VU) and Oracle Corporation.
- Kashyap, V., & Sheth, A. (1996). Schematic and Semantic Similarities between Database Objects: A Context-based Approach. Very Large Data Bases (VLDB) Journal 5(4).
- Kochut, K. J., Sheth, A. P., & Miller, J. A. (1999). ORBWork: A CORBA-Based Fully Distributed, Scalable and Dynamic Workflow Enactment Service for METEOR.
- Miller, J. A., Cardoso, J. S., & Silver, G. (2002). Using Simulation to Facilitate Effective Workflow Adaptation. Proceedings of the 35th Annual Simulation Symposium (ANSS'02).
- Miller, J. A., Nair, R., Zhang, Z., & Zhao, H. (1997). JSIM: A Java-Based Simulation and Animation Environment. Proceedings of the 30th Annual Simulation Symposium.
- Miller, J. A., Palaniswami, D., Sheth, A. P., Kochut, K. J., & Singh, H. (1998). WebWork: METEOR2's Web-based Workflow Management System. Journal of Intelligence Information Management Systems: Integrating Artificial Intelligence and Database Technologies (JIIS) 10(2).
- Miller, J. A., Seila, A. F., & Xiang, X. (2000). The JSIM Web-Based Simulation Environment. Future Generation Computer Systems: Special Issue on Web-Based Modeling and Simulation 17(2).
- Paolucci, M., Kawamura, T., Payne, T. R., & Sycara, K. (2002). Semantic Matching of Web Services Capabilities. Proceedings of the 1st International Semantic Web Conference (ISWC2002).
- Rodr√≠guez, A., & Egenhofer, M. (2002). Determining Semantic Similarity Among Entity Classes from Different Ontologies. IEEE Transactions on Knowledge and Data Engineering (in press).
- Shegalov, G., Gillmann, M., & Weikum, G. (2001). XML-enabled workflow management for e-services across heterogeneous platforms. The VLDB Journal 10(1).
- Sycara, K., Lu, J., Klusch, M., & Widoff, S. (1999). Matchmaking Among Heterogeneous Agents on the Internet. Proceedings AAAI Spring Symposium on Intelligent Agents in Cyberspace.
- Uschold, M., & Gruninger, M. (1996). Ontologies: Principles, methods and applications. Knowledge Engineering Review 11(2).
- W3C RDF Home Page: http://www.w3.org/RDF/

### Process and Quality of Service

**Introduction**

- Organizations operating in modern markets, such as e-commerce, require QoS management.
- QoS management is indispensable for organizations striving to achieve a higher degree of service quality and efficiency.