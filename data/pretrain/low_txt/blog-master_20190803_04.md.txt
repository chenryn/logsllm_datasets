## PostgreSQL PostGIS 3: ST_AsGeoJSON(record) - Not Just ST_AsGeoJSON(geo)

### 作者
digoal

### 日期
2019-08-03

### 标签
PostgreSQL, PostGIS, GeoJSON, Record, Feature, Geometry

---

## 背景
原文链接：[PostGIS 3: GeoJSON and ST_AsGeoJSON](https://info.crunchydata.com/blog/postgis-3-geojson-st-asgeojson)

GeoJSON 是一种用于服务器与客户端之间传输地理数据的格式，其规范定义请参考 [RFC 7946](https://tools.ietf.org/html/rfc7946)。

```plaintext
   2.  GeoJSON Text  . . . . . . . . . . . . . . . . . . . . . . . .   6  
   3.  GeoJSON Object  . . . . . . . . . . . . . . . . . . . . . . .   6  
     3.1.  Geometry Object . . . . . . . . . . . . . . . . . . . . .   7  
       3.1.1.  Position  . . . . . . . . . . . . . . . . . . . . . .   7  
       3.1.2.  Point . . . . . . . . . . . . . . . . . . . . . . . .   8  
       3.1.3.  MultiPoint  . . . . . . . . . . . . . . . . . . . . .   8  
       3.1.4.  LineString  . . . . . . . . . . . . . . . . . . . . .   8  
       3.1.5.  MultiLineString . . . . . . . . . . . . . . . . . . .   8  
       3.1.6.  Polygon . . . . . . . . . . . . . . . . . . . . . . .   9  
       3.1.7.  MultiPolygon  . . . . . . . . . . . . . . . . . . . .   9  
       3.1.8.  GeometryCollection  . . . . . . . . . . . . . . . . .   9  
       3.1.9.  Antimeridian Cutting  . . . . . . . . . . . . . . . .  10  
       3.1.10. Uncertainty and Precision . . . . . . . . . . . . . .  11  
     3.2.  Feature Object  . . . . . . . . . . . . . . . . . . . . .  11  
     3.3.  FeatureCollection Object  . . . . . . . . . . . . . . . .   
```

在 PostGIS 3 之前，`ST_AsGeoJSON` 函数仅支持几何类型（geometry）输入，构造 GeoJSON 格式较为复杂。参考文档：[ST_AsGeoJSON (PostGIS 2.5)](http://postgis.net/docs/manual-2.5/ST_AsGeoJSON.html)

```sql
text ST_AsGeoJSON(geometry geom, integer maxdecimaldigits=15, integer options=0);
text ST_AsGeoJSON(geography geog, integer maxdecimaldigits=15, integer options=0);

-- 示例
SELECT row_to_json(fc)
FROM (
    SELECT
        'FeatureCollection' AS "type",
        array_to_json(array_agg(f)) AS "features"
    FROM (
        SELECT
            'Feature' AS "type",
            ST_AsGeoJSON(ST_Transform(way, 4326), 6)::json AS "geometry",
            (SELECT json_strip_nulls(row_to_json(t))
             FROM (SELECT osm_id, "natural", place) t
            ) AS "properties"
        FROM planet_osm_point
        WHERE "natural" IS NOT NULL OR place IS NOT NULL
        LIMIT 10
    ) f
) fc;
```

输出示例：
```json
{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "geometry": { "type": "Point", "coordinates": [23.569251, 51.541599] },
      "properties": { "osm_id": 3424148658, "place": "locality" }
    },
    ...
  ]
}
```

在 PostGIS 3 中，`ST_AsGeoJSON` 支持记录（record）输入，默认将第一列作为几何类型，其余列的内容合并到 `properties` 中。参考文档：[ST_AsGeoJSON (PostGIS 3)](http://postgis.net/docs/manual-dev/ST_AsGeoJSON.html)

```sql
text ST_AsGeoJSON(record feature, text geomcolumnname, integer maxdecimaldigits=15, boolean pretty_bool=false);

-- 示例
SELECT ST_AsGeoJSON(subq.*) AS geojson
FROM (
  SELECT ST_Centroid(geom), type, admin
  FROM countries
  WHERE name = 'Canada'
) AS subq;
```

输出示例：
```json
{
  "type": "Feature",
  "geometry": { "type": "Point", "coordinates": [-98.2939042718784, 61.3764628013483] },
  "properties": { "type": "Sovereign country", "admin": "Canada" }
}
```

构建 `FeatureCollection` 的示例：
```sql
SELECT json_build_object(
    'type', 'FeatureCollection',
    'features', json_agg(ST_AsGeoJSON(t.*)::json)
)
FROM (VALUES
  (1, 'one', 'POINT(1 1)'::geometry),
  (2, 'two', 'POINT(2 2)'),
  (3, 'three', 'POINT(3 3)')
) AS t(id, name, geom);
```

输出示例：
```json
{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "geometry": { "type": "Point", "coordinates": [1, 1] },
      "properties": { "id": 1, "name": "one" }
    },
    ...
  ]
}
```

获取 `Features` 作为记录的示例：
```sql
SELECT ST_AsGeoJSON(t.*)
FROM (VALUES
  (1, 'one', 'POINT(1 1)'::geometry),
  (2, 'two', 'POINT(2 2)'),
  (3, 'three', 'POINT(3 3)')
) AS t(id, name, geom);
```

输出示例：
```json
{
  "type": "Feature",
  "geometry": { "type": "Point", "coordinates": [1, 1] },
  "properties": { "id": 1, "name": "one" }
}
...
```

## 参考
- [PostGIS 3: GeoJSON and ST_AsGeoJSON](https://info.crunchydata.com/blog/postgis-3-geojson-st-asgeojson)
- [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76)
- [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity)
- [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118)
- [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md)
- [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity)
- [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al)
- [关于德哥](https://github.com/digoal/blog/blob/master/me/readme.md)

![德哥的微信二维码](../pic/digoal_weixin.jpg)