# Principles of Policy in Secure Groups

**Authors:**
- Hugh Harney
- Andrea Colgrove
- Patrick D. McDaniel

## Abstract
Security policies are increasingly being used to specify complex entity relationships. When defining group security, policy must encompass the entire security context, making it more complex than traditional peer-to-peer communication. Group policies convey information about associations that are broader and more abstract than their pairwise counterparts. This paper identifies and illustrates the universal requirements of secure group policies and evaluates the adherence of the Group Security Association Key Management Protocol (GSAKMP) to these principles.

## 1. Introduction
The widespread use of distributed resources on the Internet has strained existing network infrastructures. Until recently, applications and services were designed for environments spanning a few administrative domains with relatively static user communities. However, the proliferation of new forms of communication has invalidated many of the basic assumptions upon which these systems were built. Consequently, the design of these systems, particularly their security, has come under considerable scrutiny.

One approach to addressing the requirements of emerging applications and services is the use of policy. Through policy, a system can address the (sometimes conflicting) needs of all communication participants in real time. Each session occurs within the context of a shared policy that defines the acceptable behavior and requirements of its participants. Thus, rather than relying solely on system designers or network administrators to define service behavior, the interests of all parties are considered at the point of communication.

This paper examines several principles for constructing secure group communication policies. We define a group security policy as a statement of all security-relevant parameters and facilities used to implement the group. This definition aligns with the view of policy as directing group behavior, specifying which entities are allowed to participate, and which mechanisms will be used to achieve mission-critical goals. Note that this definition is not limited to electronically distributed statements; policy often results from system design and configuration.

We do not attempt to propose a formal analysis of group systems. Instead, we aim to identify universal requirements of policy management in secure groups. In developing these requirements, we investigate where known and accepted principles of secure system construction and analysis, originally developed for peer-to-peer communication, are applicable to groups.

Secure groups protect content through the application of cryptographic methods on shared secrets. There are two primary approaches to establishing and maintaining these secrets: collaborative group management and authorized download of group data. Collaborative groups build trust by including all members in security-relevant actions, but management costs grow with group size, making them suitable for small groups with moderate to high communication and computational resources. Authorized download groups, on the other hand, delegate security functions to trusted entities, which enforce the group policy and distribute session keys. These groups are appropriate for larger or more dynamic groups, provided members trust the stated authorities.

Much of the work relevant to security policy in group communication systems falls into two categories: trust management systems and policy-directed secure group communication systems. Trust management systems provide a well-defined and provably correct framework for specifying and evaluating policy, but enforcement is largely outside their scope. Policy-directed secure group communication systems allow the definition and implementation of policies for security mechanisms, but it is not immediately clear that the distribution and composition of these policies always result in a secure group.

We aim to reconcile existing policy approaches by studying the requirements of groups. Systems require the correct specification, distribution, evaluation, and enforcement of policy to be secure. Incomplete specification or incorrect implementation of any one of these processes can lead to an insecure solution.

The principles described in the following section guided the design of the Group Security Association Key Management Protocol (GSAKMP) architecture. The analysis of GSAKMP seeks to show that GSAKMP groups not only enforce a given policy but do so consistently and securely. GSAKMP defines an architecture and protocol for implementing secure multicast groups, focusing on the definition, evaluation, and enforcement of group policy. The physical manifestation of a group policy in GSAKMP is a policy token, a highly flexible data structure used to define the behavior of a group. The token includes over 150 different fields supporting a wide range of policies and mechanisms, allowing groups with varying abilities and requirements to be defined.

The remainder of this paper is organized as follows:
- Section 2 develops a definition and set of universal principles for the specification and subsequent use of policy in secure groups.
- Section 3 evaluates the compliance of GSAKMP with these policy principles.
- Section 4 reviews several works relevant to the definition and implementation of group security policy.
- Section 5 concludes the paper.

## 2. Group Security Policy
This section considers the requirements of policy management in secure group communication systems. A set of principles derived from these requirements is developed and illustrated. We begin by defining secure groups and their policies.

### 2.1. Secure Groups and Policy
A secure group, as depicted in Figure 1, is a collection of cooperating entities operating under a shared security policy. Each group contains a group controller from which keying material logically emanates. Groups can be organized into logical subgroups, with distinct entities serving as subgroup controllers. Group members may join, leave, or become compromised at any time during the session.

We define the participants of a group as follows:
- **Group Owner (GO):** Also known as the policy issuer, the GO specifies the group security policy.
- **Group Controller (GC):** The GC acts as a key dissemination and access control authority, enforcing group access control policy by creating and distributing group keying material to authorized entities and initiating rekeying and member ejection as events dictate.
- **Subordinate Group Controller (SGC):** A subordinate controller performs all group controller functions except for session key creation.
- **Member (M):** The group member is the consumer of the group keying material, verifying the policy as correct and enforcing the authorization policies as defined by the policy specification.

Throughout, we assume that members and controllers are mutually trusted, meaning entities receiving a policy accept and enforce the authenticated policy as directed by its specification. However, compromised members may diverge from the specification arbitrarily. We assert that entities external to the group and compromised members may intercept, modify, or prevent messages from being delivered.

Many other, more complicated, models of groups exist, such as those that converge on a single policy through negotiation or assume members are untrusted. For brevity, we defer discussion of these groups. However, many of the principles identified in the following section are applicable to these groups.

Each policy is initially stated as sets of conditional statements defining the possible authorizations and mechanisms used to implement a group. The conditional statements indicate environment-specific constraints and requirements of potential sessions. The group owner creates the initial policy. An instantiation of the policy results from the leader's evaluation of the conditional policy statements, defining the security-relevant properties of the group. Some aspects of the group policy are implicitly defined, resulting from system design and configuration. Whether explicitly or implicitly defined, any group must specify the following:

- **Identification:** Each participant and group must be unambiguously identified. Failure to correctly identify the group policies, messages, and participants can lead to incorrect and insecure operation.
- **Authorization:** A group policy must identify the entities allowed to perform protected actions. Group authorization partially determines the trust embodied by the group.
- **Access Control:** Allowable access to group actions must be stated by policy. An access control policy defines a mapping between the authorized parties and secure actions in the group, and indirectly, the permissions for group information. Table 1 presents the set of group security-relevant actions.
- **Mechanism:** Each policy must state how the security requirements of the group are to be addressed, including the identification of the approaches used to achieve security guarantees and the parameters of their operation. Thus, a mechanism policy defines the provisioning of group software and often the operation of its component protocols.
- **Verification:** Each policy must present evidence of its validity. The means by which the origin, integrity, and freshness of the policy are asserted (e.g., via digital signature) must be known by each group member prior to its acquisition.

### 2.2. Principles of Group Policy
The direct application of policy approaches used in peer communication is unlikely to meet the needs of groups due to fundamental differences between peer and group policies. Group policy conveys information about an association that is greater and more abstract than its pairwise counterpart. The following text identifies and illustrates universal principles resulting from our analysis of group and peer communication policies.

**Principle 1: Enforcement of group policy must be consistent across a group.**
While it may evolve over the course of a session, the group requires a singular policy definition. This implies a shared view of the participants and the security of application content. Failure to operate under the same security context can lead to vulnerable or incompatible solutions. Similarly, policy implicitly requires trust among the membership. Each member trusts that all participants have been admitted and enforce the policy specification correctly. If a consistent view of policy cannot be established, members will have no way to infer this trust. We have identified two facets of policy consistency: mechanism equivalence and synchronization.

Two mechanisms are equivalent if they implement the same service (e.g., data confidentiality) and the security of the mechanisms is not qualitatively different. For example, Figure 2 describes a group implementing a confidentiality policy. Subgroup A implements confidentiality using a strong data encryption algorithm. A cryptographic gateway exists in both Subgroup A and a second Subgroup B. Subgroup B contains mobile devices with limited computing resources. The gateway translates all communication between the strong algorithm implemented by Subgroup A to a weaker algorithm implemented by the mobile devices in Subgroup B. Clearly, an adversary attempting to uncover group content will mount an attack against data transmitted under the weaker algorithm. Thus, for this group, the confidentiality is only as strong as provided by the weaker algorithm. Because the algorithms are not equivalent, the security is compromised.