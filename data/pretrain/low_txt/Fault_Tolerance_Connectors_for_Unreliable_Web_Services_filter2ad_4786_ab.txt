### Connector Virtual Machine and Platform Management

The platform is responsible for managing available connectors and facilitating their connections between clients and web service (WS) providers through the Management Service. A key component of the IWSD (Integrated Web Service Delivery) platform is the Health Monitoring service, which collects all error reports generated during connector execution.

To ensure high dependability, conventional techniques, as described in [6], can be employed, although this is beyond the scope of this paper. Our implementation was based on a duplex hardware and software (HW & SW) architecture for the experiments conducted.

### Replication and Equivalent Services

Recovery mechanisms rely on the availability of service replicas on the internet. For example, Amazon's web service has six replicas located in the US, Japan, France, Canada, Germany, and the UK. Identifying identical replicas is not always feasible, but similar services can be used to perform recovery or at least provide a degraded mode of operation.

The internet offers new opportunities for resource redundancy. Current research on ontologies, such as the "Web Semantic" approach, aims to identify and classify these resources more easily [7, 8].

We consider two types of services for implementing recovery mechanisms:
1. **Identical Services**: These services share a unique WSDL document but have different access points (e.g., replicas for Amazon). Although they follow the same input-output request format, their implementations may differ, helping to tolerate transient and design faults. Switching to a different replica can be done if one fails.
2. **Equivalent Services**: These services have different WSDL documents but fulfill a similar specification (possibly a degraded version). To leverage equivalent services, we introduce the concept of Abstract Web Services (AWS).

### Definition of Abstract Web Service (AWS)

An AWS is an abstraction of several similar services and is defined by a WSDL document. The connector associated with an AWS must convert abstract requests to concrete requests and vice versa for responses. The interface of each abstract operation is designed to:
- Minimize the data required to call real services.
- Maximize the data obtained from real services.

#### Formal Definitions and Notations

- **Concrete Operation**: A real WS operation where a valid request `Req` is associated with a response `Resp`.
- **Interface of an Operation**: The interface includes a set of input/output parameters. `Input_Interface(Op)` contains the input parameters, and `Output_Interface(Op)` contains the output parameters for the operation `Op`.

From these definitions, we infer the notion of an "abstract operation," which forms the basis of an abstract service. An abstract service is a collection of abstract operations, and specific translation functions are necessary to map abstract operations to concrete ones.

- **Abstract Operation**: A virtual WS operation where a valid abstract request `ReqAbs` is associated with a response `RespAbs` such that:
  - Any parameter of a concrete operation belonging to a target service replica can be derived from an abstract request.
  - All parameters of the abstract response can be derived from the responses of concrete operations provided by replicas.

- **Mapping Function**: A function that translates a request targeting an abstract operation into a request targeting a concrete operation and vice versa for responses. We denote `ReqMap` for translating an abstract request to a concrete request and `RespMap` for translating a concrete response to an abstract response.

### Equivalence Relations

An equivalence relation `R` is a semantic relationship between two sets of parameters. Even if syntactically different, two parameters can represent the same information semantically. Equivalence relations are established when the semantics of concrete parameters of one operation can be derived from those of another.

**Example:**
- **Service A**: Selects a computer based on qualitative parameters like type, price range, and screen size.
- **Service B**: Searches by brand and type.
- **Service C**: Searches by composition and included parts.

The minimal input interface for an abstract selection operation includes:
- Brand
- Type
- Screen type
- Identification (for authentication)

These parameters can generate requests for all concrete interfaces:
- Brand and type can directly call Service B.
- Equivalence relations n째1, n째2, and n째4 can generate parameters for Service A.
- Equivalence relation n째3 can generate input data for Service C.

In this example, the "identification" parameter of Service A is private and cannot be reached by any equivalence relation, making it a de facto member of the input interface of the abstract operation.

### Generation of Abstract Operations

The goal is to automate the creation of abstract operations (input and output interfaces) from user-defined equivalence relations. It is crucial to avoid inconsistencies by ensuring that an equivalence relation does not lead to a parameter already obtained using a previous relation.

**Algorithm:**
1. Initialize `ResultSet` with `RootSet` (parameters not reachable by any equivalence relation).
2. For each parameter `p` in `RootSet`:
   - Compute the transitive closure of parameters reachable from `p`, excluding those already in `ResultSet`.
   - Add the new parameters to `ResultSet`.

At the end of the loop, `ResultSet` contains the parameters of the Input Interface of the AWS.

**Example:**
- `RootSet = {b, d}`
- Starting from `{b}`, reach `{c, e}` and then `{f, g, a}`.
- Starting from `{d}`, reach `{h}` (but exclude `{g}` as it is already in `ResultSet`).

Thus, the final `ResultSet` is `{b, d, h}`. Different `RootSet` orders can yield multiple valid interfaces.

Recent works [9-11] have also addressed the matching of WS operations, helping users find equivalence relations and simplify the creation of abstract web service interfaces.

### Recovery Strategies

Recovery strategies are defined using built-in functions that implement both passive and active replication for stateless and stateful services. The `RecoveryStrategy` section of the connector allows the user to select an appropriate replication strategy for a target service. The selection depends on the assumptions made about the service's behavior and the desired level of fault tolerance.