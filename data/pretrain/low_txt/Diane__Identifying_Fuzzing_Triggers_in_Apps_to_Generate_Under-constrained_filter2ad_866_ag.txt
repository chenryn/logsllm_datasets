以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 参考文献

1. “Jtag debugging,” https://blog.attify.com/hack-iot-device/.
2. “Jtag fuse and protection using a trusted execution environment,” http://www.freepatentsonline.com/9021585.html.
3. “Jtag fuse flow,” https://e2e.ti.com/support/microcontrollers/msp430/f/166/t/18936?JTAG-FUSE-BLOW.
4. “Katyusha rest and soap fuzzer,” https://github.com/lpredova/Katyusha.
5. “UFuzz, or Universal Plug and Fuzz, is an automatic UPnP fuzzing tool.” https://github.com/phikshun/ufuzz.
6. “Web services fuzzing tool for http and soap,” https://sourceforge.net/projects/wsfuzzer/files/.
7. “Debugging Bluetooth With An Android App,” https://blog.bluetooth.com/debugging-bluetooth-with-an-android-app, 2016.
8. V. Afonso, A. Bianchi, Y. Fratantonio, A. Doupé, M. Polino, P. de Geus, C. Kruegel, and G. Vigna, “Going native: Using a large-scale analysis of android apps to create a practical native-code sandboxing policy,” in *The Network and Distributed System Security Symposium*, 2016, pp. 1–15.
9. O. Alrawi, C. Lever, M. Antonakakis, and F. Monrose, “Sok: Security evaluation of home-based iot deployments,” in *Proceedings of the IEEE Symposium on Security and Privacy*, 2019.
10. Ben Herzberg, Dima Bekerman, Igal Zeifman, “Breaking Down Mirai: An IoT DDoS Botnet Analysis,” https://www.incapsula.com/blog/malware-analysis-mirai-ddos-botnet.html.
11. M. Böhme, V.-T. Pham, M.-D. Nguyen, and A. Roychoudhury, “Directed greybox fuzzing,” in *Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security*. ACM, 2017, pp. 2329–2344.
12. M. Böhme, V.-T. Pham, and A. Roychoudhury, “Coverage-based greybox fuzzing as Markov chain,” in *Proceedings of the 2016 ACM Conference on Computer and Communications Security*, ser. CCS ’16. New York, NY, USA: ACM, 2016, pp. 1032–1043. [Online]. Available: http://doi.acm.org/10.1145/2976749.2978428
13. R. M. Bolle, J. H. Connell, and N. K. Ratha, “System and method for liveness authentication using an augmented challenge/response scheme,” Feb. 1 2005, US Patent 6,851,051.
14. C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R. Engler, “EXE: Automatically generating inputs of death,” in *Proceedings of the 2006 ACM Conference on Computer and Communications Security*, ser. CCS ’06. New York, NY, USA: ACM, 2006, pp. 322–335. [Online]. Available: http://doi.acm.org/10.1145/1180405.1180445
15. G. Campana, “Fuzzgrind: Un outil de fuzzing automatique,” Actes du, pp. 213–229, 2009.
16. D. D. Chen, M. Woo, D. Brumley, and M. Egele, “Towards automated dynamic analysis for Linux-based embedded firmware.” in *NDSS*, 2016.
17. J. Chen, W. Diao, Q. Zhao, C. Zuo, Z. Lin, X. Wang, W. C. Lau, M. Sun, R. Yang, and K. Zhang, “IoTFuzzer: Discovering memory corruptions in IoT through app-based fuzzing,” in *Proc. of the ISOC Network and Distributed System Security Symposium (NDSS)*, 2018.
18. P. Chen and H. Chen, “Angora: Efficient fuzzing by principled search,” arXiv preprint arXiv:1803.01307, 2018.
19. Chris Brook, “TRAVEL ROUTERS, NAS DEVICES AMONG EASILY HACKED IOT DEVICES,” https://threatpost.com/travel-routers-nas-devices-among-easily-hacked-iot-devices/124877/.
20. P. M. Comparetti, G. Wondracek, C. Kruegel, and E. Kirda, “Prospex: Protocol specification extraction,” in *Proceedings of the 2009 IEEE Symposium on Security and Privacy*, ser. SP ’09. Washington, DC, USA: IEEE Computer Society, 2009, pp. 110–125. [Online]. Available: http://dx.doi.org/10.1109/SP.2009.14
21. A. Continella, Y. Fratantonio, M. Lindorfer, A. Puccetti, A. Zand, C. Kruegel, and G. Vigna, “Obfuscation-resilient privacy leak detection for mobile apps through differential analysis,” in *Proceedings of the ISOC Network and Distributed System Security Symposium (NDSS)*, San Diego, CA, February 2017.
22. J. Corina, A. Machiry, C. Salls, Y. Shoshitaishvili, S. Hao, C. Kruegel, and G. Vigna, “Difuze: Interface aware fuzzing for kernel drivers,” in *Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security*. ACM, 2017, pp. 2123–2138.
23. A. Costin, J. Zaddach, A. Francillon, D. Balzarotti, and S. Antipolis, “A large-scale analysis of the security of embedded firmwares.” in *USENIX Security Symposium*, 2014, pp. 95–110.
24. D. Davidson, B. Moench, T. Ristenpart, and S. Jha, “Fie on firmware: Finding vulnerabilities in embedded systems using symbolic execution,” in *USENIX Security Symposium*, 2013, pp. 463–478.
25. K. Dewey, J. Roesch, and B. Hardekopf, “Fuzzing the Rust typechecker using CLP(T),” in *Proceedings of the 2015 IEEE/ACM International Conference on Automated Software Engineering*, ser. ASE ’15. Washington, DC, USA: IEEE Computer Society, 2015, pp. 482–493. [Online]. Available: http://dx.doi.org/10.1109/ASE.2015.65
26. W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth, “Taintdroid: An information-flow tracking system for real-time privacy monitoring on smartphones,” *ACM Transactions on Computer Systems (TOCS)*, vol. 32, no. 2, p. 5, 2014.
27. S. Gan, C. Zhang, X. Qin, X. Tu, K. Li, Z. Pei, and Z. Chen, “CollaFL: Path sensitive fuzzing,” in *2018 IEEE Symposium on Security and Privacy (SP)*. IEEE, 2018, pp. 679–696.
28. V. Ganesh, T. Leek, and M. Rinard, “Taint-based directed whitebox fuzzing,” in *Proceedings of the 2009 International Conference on Software Engineering*, ser. ICSE ’09. Washington, DC, USA: IEEE Computer Society, 2009, pp. 474–484. [Online]. Available: http://dx.doi.org/10.1109/ICSE.2009.5070546
29. P. Godefroid, A. Kiezun, and M. Y. Levin, “Grammar-based whitebox fuzzing,” in *Proceedings of the 2008 ACM SIGPLAN Conference on Programming Language Design and Implementation*, ser. PLDI ’08. New York, NY, USA: ACM, 2008, pp. 206–215. [Online]. Available: http://doi.acm.org/10.1145/1375581.1375607
30. P. Godefroid, N. Klarlund, and K. Sen, “DART: Directed automated random testing,” in *Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation*, ser. PLDI ’05. New York, NY, USA: ACM, 2005, pp. 213–223. [Online]. Available: http://doi.acm.org/10.1145/1065010.1065036
31. P. Godefroid, M. Y. Levin, D. A. Molnar et al., “Automated whitebox fuzz testing.” in *Proceedings of the 2008 Symposium on Network and Distributed System Security*, ser. NDSS ’08, San Diego, CA, USA, 2008.
32. L. Gomez, I. Neamtiu, T. Azim, and T. Millstein, “RERAN: Timing-and touch-sensitive record and replay for Android,” in *Proceedings of the 2013 International Conference on Software Engineering*. IEEE Press, 2013, pp. 72–81.
33. G. Grieco, M. Ceresa, and P. Buiras, “QuickFuzz: An automatic random fuzzer for common file formats,” in *Proceedings of the 2016 International Symposium on Haskell*, ser. Haskell ’16. New York, NY, USA: ACM, 2016, pp. 13–20. [Online]. Available: http://doi.acm.org/10.1145/2976002.2976017
34. Z. Gui, H. Shu, and J. Yang, “FirmNano: Toward IoT firmware fuzzing through augmented virtual execution,” in *2020 IEEE 11th International Conference on Software Engineering and Service Science (ICSESS)*, 2020, pp. 290–294.
35. E. Gustafson, M. Muench, C. Spensky, N. Redini, A. Machiry, Y. Fratantonio, D. Balzarotti, A. Francillon, Y. R. Choe, C. Kruegel, and G. Vigna, “Toward the analysis of embedded firmware through automated re-hosting,” in *22nd International Symposium on Research in Attacks, Intrusions and Defenses (RAID 2019)*. Chaoyang District, Beijing: USENIX Association, Sep. 2019, pp. 135–150. [Online]. Available: https://www.usenix.org/conference/raid2019/presentation/gustafson
36. I. Haller, A. Slowinska, M. Neugschwandtner, and H. Bos, “Dowser: A guided fuzzer to find buffer overflow vulnerabilities,” in *Proceedings of the 2013 USENIX Security Symposium*, ser. SEC ’13, Washington, DC, USA, 2013, pp. 49–64.
37. H. Han and S. K. Cha, “IMF: Inferred model-based fuzzer,” in *Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security*. ACM, 2017, pp. 2345–2358.
38. C. Holler, K. Herzig, and A. Zeller, “Fuzzing with code fragments.” in *Proceedings of the 2012 USENIX Security Symposium*, ser. SEC ’12, Bellevue, WA, USA, 2012, pp. 445–458.
39. K. Ispoglou, D. Austin, V. Mohan, and M. Payer, “FuzzGen: Automatic fuzzer generation,” in *29th USENIX Security Symposium (USENIX Security 20)*. Boston, MA: USENIX Association, Aug. 2020. [Online]. Available: https://www.usenix.org/conference/usenixsecurity20/presentation/ispoglou
40. James Lyne, “Uncovering a CCTV Camera,” https://www.rsaconference.com/videos/demo-uncovering-iot-vulnerabilities-in-a-cctv-camera.
41. L. Jost, “Entropy and diversity,” *Oikos*, vol. 113, no. 2, pp. 363–375, 2006.
42. D. M. Junior, L. Melo, H. Lu, M. d’Amorim, and A. Prakash, “Beware of the app! On the vulnerability surface of smart devices through their companion apps,” arXiv preprint arXiv:1901.10062, 2019.
43. C. Kolias, G. Kambourakis, A. Stavrou, and J. Voas, “DDoS in the IoT: Mirai and other botnets,” *Computer*, vol. 50, no. 7, pp. 80–84, 2017.
44. K. Koscher, T. Kohno, and D. Molnar, “Surrogates: Enabling near-real-time dynamic analyses of embedded systems.” in *WOOT*, 2015.
45. D. Kumar, K. Shen, B. Case, D. Garg, G. Alperovich, D. Kuznetsov, R. Gupta, and Z. Durumeric, “All things considered: An analysis of IoT devices on home networks,” in *28th USENIX Security Symposium (USENIX Security 19)*, 2019, pp. 1169–1185.
46. V. Le, C. Sun, and Z. Su, “Finding deep compiler bugs via guided stochastic program mutation,” in *Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications*, ser. OOPSLA ’15. New York, NY, USA: ACM, 2015, pp. 386–399. [Online]. Available: http://doi.acm.org/10.1145/2814270.2814319
47. K. Lee, Y. Lee, H. Lee, and K. Yim, “A brief review on JTAG security,” in *2016 10th International Conference on Innovative Mobile and Internet Services in Ubiquitous Computing (IMIS)*, July 2016, pp. 486–490.
48. C. Lemieux and K. Sen, “FairFuzz: Targeting rare branches to rapidly increase greybox fuzz testing coverage,” CoRR, vol. abs/1709.07101, 2017. [Online]. Available: http://arxiv.org/abs/1709.07101
49. Y. Li, B. Chen, M. Chandramohan, S.-W. Lin, Y. Liu, and A. Tiu, “Steelix: Program-state based binary fuzzing,” in *Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering*, ser. ESEC/FSE 2017. New York, NY, USA: ACM, 2017, pp. 627–637. [Online]. Available: http://doi.acm.org/10.1145/3106237.3106295
50. Z. Lin, X. Zhang, and D. Xu, “Automatic reverse engineering of data structures from binary execution,” in *Proceedings of the 2010 Annual Information Security Symposium*, ser. CERIAS ’10. West Lafayette, IN: CERIAS - Purdue University, 2010, pp. 5:1–5:1. [Online]. Available: http://dl.acm.org/citation.cfm?id=2788959.2788964
51. Lucian Constantin, “Hackers found 47 new vulnerabilities in 23 IoT devices at DEFCON,” https://www.csoonline.com/article/3119765/security/hackers-found-47-new-vulnerabilities-in-23-iot-devices-at-def-con.html.
52. B. P. Miller, L. Fredriksen, and B. So, “An empirical study of the reliability of UNIX utilities,” *Commun. ACM*, vol. 33, no. 12, pp. 32–44, Dec. 1990. [Online]. Available: http://doi.acm.org/10.1145/96267.96279
53. M. Muench, J. Stijohann, F. Kargl, A. Francillon, and D. Balzarotti, “What you corrupt is not what you crash: Challenges in fuzzing embedded devices,” in *NDSS 2018, Network and Distributed Systems Security Symposium*, 18-21 February 2018, San Diego, CA, USA, San Diego, UNITED STATES, 02 2018. [Online]. Available: http://www.eurecom.fr/publication/5417
54. M. Neugschwandtner, P. Milani Comparetti, I. Haller, and H. Bos, “The Borg: Nanoprobing binaries for buffer overreads,” in *Proceedings of the 2015 ACM Conference on Data and Application Security and Privacy*, ser. CODASPY ’15. New York, NY, USA: ACM, 2015, pp. 87–97. [Online]. Available: http://doi.acm.org/10.1145/2699026.2699098
55. F. Nielson, H. Riis Nielson, and C. Hankin, *Principles of Program Analysis*, 01 1999.
56. A. Nordrum, “The internet of fewer things [news],” *IEEE Spectrum*, vol. 53, no. 10, pp. 12–13, 2016.
57. J. Palsberg and M. I. Schwartzbach, *Object-oriented type inference*. ACM, 1991, vol. 26, no. 11.
58. Peach, “The Peach Fuzzer,” 2017, http://www.peachfuzzer.com/.
59. H. Peng, Y. Shoshitaishvili, and M. Payer, “T-Fuzz: Fuzzing by program transformation,” in *Proceedings of the IEEE Symposium on Security and Privacy (S&P)*, 2018.
60. P. Pokorny and M. Royal, “Dumb fuzzing in practice,” 2012.
61. S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and H. Bos, “VUZZER: Application-aware evolutionary fuzzing,” in *Proceedings of the Network and Distributed System Security Symposium (NDSS)*, 2017.
62. N. Redini, A. Machiry, R. Wang, C. Spensky, A. Continella, Y. Shoshitaishvili, C. Kruegel, and G. Vigna, “Karonte: Detecting insecure multi-binary interactions in embedded firmware,” in *Proceedings of the IEEE Symposium on Security and Privacy (S&P)*, May 2020.
63. Y. Shoshitaishvili, R. Wang, C. Hauser, C. Kruegel, and G. Vigna, “Firmalice: Automatic detection of authentication bypass vulnerabilities in binary firmware.” in *NDSS*, 2015.
64. M. Smith, M. Helmi, and J. Miller, “Comparison of approaches to use existing architectural features in embedded processors to achieve hardware-assisted test insertion,” *Proceedings Work-in-Progress Session*, 2010.
65. P. Srivastava, H. Peng, J. Li, H. Okhravi, H. Shrobe, and M. Payer, “FirmFuzz: Automated IoT Firmware Introspection and Analysis,” in *Proc. ACM CCS Workshop on IoT Security and Privacy (IoT S&P)*, 2019.
66. N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta, Y. Shoshitaishvili, C. Kruegel, and G. Vigna, “Driller: Augmenting fuzzing through selective symbolic execution,” in *Proceedings of the 2016 Network and Distributed System Security Symposium*, ser. NDSS ’16, San Diego, CA, USA, 2016.
67. M. Sun, T. Wei, and J. Lui, “TaintArt: A practical multi-level information-flow tracking system for Android runtime,” in *Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security*. ACM, 2016, pp. 331–342.
68. R. Vallée-Rai, E. Gagnon, L. Hendren, P. Lam, P. Pominville, and V. Sundaresan, “Optimizing Java bytecode using the Soot framework: Is it feasible?” in *International conference on compiler construction*. Springer, 2000, pp. 18–34.
69. J. Wang, B. Chen, L. Wei, and Y. Liu, “SkyFire: Data-driven seed generation for fuzzing,” in *2017 IEEE Symposium on Security and Privacy (SP)*, May 2017, pp. 579–594.
70. T. Wang, T. Wei, G. Gu, and W. Zou, “TaintScope: A checksum-aware directed fuzzing tool for automatic software vulnerability detection,” in *Proceedings of the 2010 IEEE Symposium on Security and Privacy*, ser. SP ’10. San Jose, CA, USA: IEEE, 2010, pp. 497–512.
71. X. Wang, Y. Sun, S. Nanda, and X. Wang, “Looking from the mirror: Evaluating IoT device security through mobile companion apps,” in *28th USENIX Security Symposium (USENIX Security 19)*. Santa Clara, CA: USENIX Association, Aug. 2019, pp. 1151–1167. [Online]. Available: https://www.usenix.org/conference/usenixsecurity19/presentation/wang-xueqiang
72. Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace, “ReFormat: Automatic reverse engineering of encrypted messages,” in *Computer Security – ESORICS 2009*, M. Backes and P. Ning, Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2009, pp. 200–215.
73. Z. Wang, Y. Zhang, and Q. Liu, “RPFuzzer: A framework for discovering router protocols vulnerabilities based on fuzzing.” *KSII Transactions on Internet & Information Systems*, vol. 7, no. 8, 2013.
74. H. Wen, Q. Zhao, Q. A. Chen, and Z. Lin, “Automated Cross-Platform Reverse Engineering of CAN Bus Commands From Mobile Apps,” in *Proceedings of the ISOC Network and Distributed System Security Symposium (NDSS)*, 2020.
75. T. Wilson, “Evaluation of fuzzing as a test method for an embedded system,” 2018.
76. J. Zaddach, L. Bruno, A. Francillon, and D. Balzarotti, “Avatar: A framework to support dynamic security analysis of embedded systems’ firmwares.” in *NDSS*, 2014.
77. M. Zalewski., “American fuzzy lop,” 2017, http://lcamtuf.coredump.cx/afl/technical_details.txt.
78. Q. Zhao, C. Zuo, D.-G. Brendan, G. Pellegrino, and Z. Lin, “Automatic uncovering of hidden behaviors from input validation in mobile apps,” 2020.
79. Y. Zheng, A. Davanian, H. Yin, C. Song, H. Zhu, and L. Sun, “Firm-AFL: High-throughput greybox fuzzing of IoT firmware via augmented process emulation,” in *28th USENIX Security Symposium (USENIX Security 19)*. Santa Clara, CA: USENIX Association, Aug. 2019, pp. 1099–1114. [Online]. Available: https://www.usenix.org/conference/usenixsecurity19/presentation/zheng
80. W. Zhou, Y. Jia, Y. Yao, L. Zhu, L. Guan, Y. Mao, P. Liu, and Y. Zhang, “Discovering and understanding the security hazards in the interactions between IoT devices, mobile apps, and clouds on smart home platforms,” in *28th USENIX Security Symposium (USENIX Security 19)*. Santa Clara, CA: USENIX Association, Aug. 2019, pp. 1133–1150. [Online]. Available: https://www.usenix.org/conference/usenixsecurity19/presentation/zhou

---

### 附录

在本附录中，我们提供了关于DIANE不同组件的技术细节。我们用大约4,500行Python代码实现了DIANE，遵循图2所示的高级架构。DIANE基于pysoot实现，该工具利用Soot [76] 将伴侣应用的字节码转换为中间表示。目前，DIANE仅处理Android应用程序。

#### A. 静态分析

为了在伴侣应用中找到初始的`sendMessage`候选函数，我们分析其内部表示。具体来说，我们选择所有包含对本地方法（具有`native`属性）或Android框架中已知实现网络I/O操作的方法（例如，`java.net.*`、`javax.net.*` 或 `android.net.*`）调用的函数。

通过应用这些规则，我们获得了一个函数列表，当这些函数被调用时，可能会向物联网设备发送网络消息。

#### B. 动态分析

##### APK 仪表化

为了挂钩并模糊测试APK中的方法，我们使用了Frida [8]。更具体地说，每个方法都被挂钩，并动态修改以包括额外的代码。注入的额外代码用于启用方法参数和使用的类字段的模糊测试，并提取必要的信息，如方法调用的时间戳及其参数的内容。

##### 网络拦截

DIANE 在运行时拦截伴侣应用生成的网络流量。DIANE 支持拦截通过WiFi和蓝牙接口发送的流量。需要注意的是，我们的方法独立于具体的网络介质，只需要被动地观察通信通道而无需访问交换数据的内容。对于通过WiFi传输的流量，DIANE 利用路由器和工具tcpdump捕获从智能手机发送到物联网设备的数据包，过滤IP地址。通过蓝牙接口传输的流量则使用Android调试功能Bluetooth HCI snoop进行捕获 [15]。除非另有说明，我们使用“网络活动”一词来同时指代WiFi和蓝牙网络流量。

##### 模糊测试对象

DIANE 对原始变量（例如，`int`、`float`）和类实例进行模糊测试。为此，我们使用pysoot检索所考虑类实例的类定义，并对类型为原始或已知（例如，`java.lang.String`）的每个字段进行模糊测试。

#### C. 混合分析

##### 模糊测试触发器识别细节

为了实现第三节中描述的模糊测试触发器算法，我们在pysoot之上实现了一个静态反向切片器。理论上，给定变量的反向切片可能遍历任意数量的函数。因此，为了使我们的分析可管理，我们的反向切片器算法采用了保守的方法。

相反，如果`v`是一个类对象，我们使用pysoot检索其类定义，并考虑每个类型为原始或已知的字段变量`vc`。对于所有这些字段变量，我们按上述方法计算它们的熵，并根据`v`所属的生存集将它们添加到`Lif`集或`Lof`集中。

具体来说，在计算变量`v`的反向切片时，我们的反向切片器最多遍历`N`个连续的函数调用（我们在实验中将`N`设置为5），并在未跟随函数调用时过近似数据依赖关系。例如，如果一个函数调用将`v`作为其参数之一，并且没有跟随该函数调用，我们假设`v`与所有其他参数都有数据依赖关系。尽管这种方法可能导致我们的静态分析阶段产生假阳性结果，但它不会影响我们工具的性能，因为正如第三节所述，我们使用动态分析来验证静态分析的结果。

为了构建数据转换函数支配树，如第三节所述，我们首先需要构建伴侣应用的调用图。为此，我们执行过程内类型推断 [65] 来确定方法调用的对象的可能动态类型。当这失败时，我们将可能的目标过度近似为其静态类型的子类。

##### 熵计算细节

为了找到数据转换函数，DIANE 需要计算函数作用域`f`中的每个变量`v`在生存集`Lif`和`Lof`中的熵。为此，如果`v`是原始变量（例如，`int`），或已知类型（即`String`、`Integer`、`Float` 和 `Double`），我们将其包含的数据转换为其字节表示，并计算该字节序列的香农熵。请注意，熵是在整个字节序列上计算的，而不是单独考虑单个字节。

---

希望这些优化能帮助你更好地理解和引用这些文献。