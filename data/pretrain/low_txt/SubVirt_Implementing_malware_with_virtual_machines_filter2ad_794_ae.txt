### Abstract

We investigated the design and implementation of Virtual Machine-Based Rootkits (VMBRs), which utilize Virtual Machine Monitors (VMMs) to provide attackers with enhanced control over compromised systems. Our research demonstrated how VMBRs can be leveraged to implement malicious services that remain completely hidden from the target system, facilitating the development of general-purpose malicious services. To evaluate this new malware threat, we developed two proof-of-concept VMBRs, which we used to subvert Windows XP and Linux target systems. We also implemented four example malicious services.

### Introduction

In addition to evaluating the VMBR threat, we explored techniques for detecting VMBRs. The most effective method for detection is to control a layer beneath the VMBR, such as through bootable CD-ROMs, secure VMMs, or secure hardware. Detection from software running above the VMM is also possible, but the high level of control VMBRs have over such software turns this into an arms race where the VMBR has a fundamental advantage.

### Disadvantages of VMBRs

Despite their advantages, VMBRs have several disadvantages compared to traditional forms of malware. They typically require more state, are more difficult to install, need a reboot before they can run, and have a greater impact on the overall system. While VMBRs offer greater control over the compromised system, the cost of this higher level of control may not justify their use in all malicious applications.

### Viability and Threat

Despite these shortcomings, we believe that VMBRs are a viable and likely threat. Virtual-machine monitors are widely available from both open-source communities and commercial vendors. We successfully built VMBRs based on two available virtual-machine monitors, including one for which source code was not available. On today’s x86 systems, VMBRs can run a target OS with minimal visual differences or performance effects, making them difficult to detect. In fact, one of the authors inadvertently used a machine infected by our proof-of-concept VMBR without realizing it was compromised.

### Acknowledgments

We thank the anonymous reviewers and our shepherd, Steve Gribble, for their valuable suggestions that helped improve this paper. We also thank Peter Biddle, Brandon Baker, and Eric Traut for providing valuable insights and discussions on this topic. Additionally, we would like to thank Rick Rashid, Ted Wobber, Butler Lampson, and Paul Barham for their feedback on early versions of this paper. This research was supported in part by National Science Foundation grants CCR-0098229 and CCR-0219085, ARDA grant NBCHC030104, Intel Corporation, and Microsoft.

### References

[1] VMware Virtual Machine Technology. Technical report, VMware, Inc., September 2000.
[2] AMD platform for trustworthy computing. In WinHEC, September 2003.
[3] Advanced Configuration and Power Interface Specification, September 2004. http://www.acpi.info/DOWNLOADS/ACPIspec30.pdf.
[4] Installing VMware Tools, November 2005. http://www.vmware.com/support/ws5/doc/new guest tools ws.html.
[5] ttylinux, 2006. http://www.minimalinux.org/ttylinux/showpage.php?pid=1.
[6] Advanced Micro Devices Inc. BIOS and Kernel Developer’s Guide for AMD Athlon 64 and AMD Opteron Processors, April 2004.
[7] Advanced Micro Devices Inc. AMD Pacifica Virtualization Technology, March 2005. http://enterprise.amd.com/downloadables/Pacific.ppt.
[8] K. G. Anagnostakis, S. Sidiroglou, P. Akritidis, K. Xinidis, E. Markatos, and A. D. Keromytis. Detecting Targeted Attacks Using Shadow Honeypots. In Proceedings of the 2004 USENIX Security Symposium, August 2005.
[9] W. A. Arbaugh, D. J. Farber, and J. M. Smith. A Secure and Reliable Bootstrap Architecture. In Proceedings of 1997 IEEE Symposium on Computer Security and Privacy, pages 65–71, 1997.
[10] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt, and A. Warfield. Xen and the Art of Virtualization. In Proceedings of the 2003 Symposium on Operating Systems Principles, October 2003.
[11] J. Butler and G. Hoglund. VICE—Catch the Hookers! Black Hat USA, July 2004. http://www.blackhat.com/presentations/bh-usa-04/bh-us-04-butler/bh-us-04-butler.pdf.
[12] J. Butler, J. L. Undercoffer, and J. Pinkston. Hidden Processes: The Implication for Intrusion Detection. In Proceedings of the 2003 Workshop on Information Assurance, pages 116–12, June 2003.
[13] P. M. Chen and B. D. Noble. When Virtual is Better Than Real. In Proceedings of the 2001 Workshop on Hot Topics in Operating Systems (HotOS), pages 133–138, May 2001.
[14] G. W. Dunlap, S. T. King, S. Cinar, M. Basrai, and P. M. Chen. ReVirt: Enabling Intrusion Analysis Through Virtual-Machine Logging and Replay. In Proceedings of the 2002 Symposium on Operating Systems Design and Implementation (OSDI), pages 211–224, December 2002.
[15] B. Ford, M. Hibler, J. Lepreau, P. Tullmann, G. Back, and S. Clawson. Microkernels Meet Recursive Virtual Machines. In Proceedings of the 1996 Symposium on Operating Systems Design and Implementation (OSDI), October 1996.
[16] Fuzen Op. The FU Rootkit. http://www.rootkit.com/project.php?id=12.
[17] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. Terra: A Virtual Machine-Based Platform for Trusted Computing. In Proceedings of the 2003 Symposium on Operating Systems Principles, October 2003.
[18] T. Garfinkel and M. Rosenblum. A Virtual Machine Introspection Based Architecture for Intrusion Detection. In Proceedings of the 2003 Network and Distributed System Security Symposium (NDSS), February 2003.
[19] R. Goldberg. Architectural Principles for Virtual Computer Systems. PhD thesis, Harvard University, February 1973.
[20] R. P. Goldberg. Survey of Virtual Machine Research. IEEE Computer, pages 34–45, June 1974.
[23] J. S. Heidemann and G. J. Popek. File-System Development with Stackable Layers. ACM Transactions on Computer Systems, 12(1):58–89, February 1994.
[24] G. Hoglund and J. Butler. Rootkits: Subverting the Windows Kernel. Addison-Wesley, 2005.
[25] Intel Corp. LaGrande Technology Architectural Overview, 2003.
[26] X. Jiang and D. Xu. Collapsar: A VM-Based Architecture for Network Attack Detention Center. In Proceedings of the 2004 USENIX Security Symposium, August 2004.
[27] A. Joshi, S. T. King, G. W. Dunlap, and P. M. Chen. Detecting Past and Present Intrusions Through Vulnerability-Specific Predicates. In Proceedings of the 2005 Symposium on Operating Systems Principles (SOSP), pages 91–104, October 2005.
[28] R. Kennell and L. H. Jamieson. Establishing the Genuineness of Remote Computer Systems. In Proceedings of the 12th USENIX Security Symposium, August 2003.
[29] G. H. Kim and E. H. Spafford. The Design and Implementation of Tripwire: A File System Integrity Checker. In Proceedings of 1994 ACM Conference on Computer and Communications Security (CCS), pages 18–29, November 1994.
[30] S. T. King, G. W. Dunlap, and P. M. Chen. Debugging Operating Systems with Time-Traveling Virtual Machines. In Proceedings of the 2005 USENIX Technical Conference, pages 1–15, April 2005.
[31] K. Lawton. Running Multiple Operating Systems Concurrently on an IA32 PC Using Virtualization Techniques, 1999. http://plex86.org/research/paper.txt.
[32] J. LeVasseur, V. Uhlig, J. Stoess, and S. Gotz. Unmodified Device Driver Reuse and Improved System Dependability via Virtual Machines. In Proceedings of the 2004 Symposium on Operating Systems Design and Implementation (OSDI), December 2004.
[33] R. Meushaw and D. Simard. NetTop: Commercial Technology in High Assurance Applications. Tech Trend Notes: Preview of Tomorrow’s Information Technologies, 9(4), September 2000.
[34] Microsoft Corp. Microsoft Virtual PC 2004 Technical Overview, 2005. http://www.microsoft.com/windows/virtualpc/evaluation/techoverview.mspx.
[35] Microsoft Corp. Windows Preinstallation Environment Overview, 2005. http://www.microsoft.com/whdc/system/winpreinst/WindowsPE_over.mspx.
[36] J. Nick L. Petroni, T. Fraser, J. Molina, and W. A. Arbaugh. Copilot–A Coprocessor-Based Kernel Runtime Integrity Monitor. In Proceedings of the 2004 USENIX Security Symposium, August 2004.
[37] G. J. Popek and R. P. Goldberg. Formal Requirements for Virtualizable Third Generation Architectures. Communications of the ACM, 17(7):412–421, July 1974.
[21] D. Gollmann. Computer Security, 2nd edition. John Wiley and Sons, Inc., January 2006.
[22] Halflife. Abuse of the Linux Kernel for Fun and Profit. Phrack, 7(50), April 1997.
[38] J. Rutkowska. Red Pill... or How to Detect VMM Using (Almost) One CPU Instruction, 2005. http://invisiblethings.org/papers/redpill.html.
[39] J. Rutkowska. Detecting Windows Server Compromises. Security Conference, HivenCon, November 2003. http://www.invisiblethings.org/papers/hivercon03 joanna.ppt.
[40] C. P. Sapuntzakis, R. Chandra, B. Pfaff, J. Chow, M. S. Lam, and M. Rosenblum. Optimizing the Migration of Virtual Computers. In Proceedings of the 2002 Symposium on Operating Systems Design and Implementation, December 2002.
[41] sd and devik. Linux On-the-Fly Kernel Patching Without LKM. Phrack, 11(58), December 2001.
[42] A. Seshadri, M. Luk, E. Shi, A. Perrig, L. van Doorn, and P. Khosla. Pioneer: Verifying Integrity and Guaranteeing Execution of Code on Legacy Platforms. In Proceedings of ACM Symposium on Operating Systems Principles (SOSP), pages 1–16, 2005.
[43] S. Sparks and J. Butler. Shadow Walker: Raising The Bar For Windows Rootkit Detection. Phrack, 11(63), August 2005.
[44] J. Sugerman, G. Venkitachalam, and B.-H. Lim. Virtualizing I/O Devices on VMware Workstation’s Hosted Virtual Machine Monitor. In Proceedings of the 2001 USENIX Technical Conference, June 2001.
[45] R. Uhlig, G. Neiger, D. Rodgers, A. L. Santoni, F. C. M. Martins, A. V. Anderson, S. M. Bennett, A. Kagi, F. H. Leung, and L. Smith. Intel Virtualization Technology. IEEE Computer, 38(5):48–56, May 2005.
[46] M. Vrable, J. Ma, J. Chen, D. Moore, E. Vandekieft, A. Snoeren, G. Voelker, and S. Savage. Scalability, Fidelity, and Containment in the Potemkin Virtual Honeyfarm. In Proceedings of the 2005 Symposium on Operating Systems Principles, October 2005.
[47] C. A. Waldspurger. Memory Resource Management in VMware ESX Server. In Proceedings of the 2002 Symposium on Operating Systems Design and Implementation (OSDI), December 2002.
[48] Y.-M. Wang, D. Beck, B. Vo, R. Roussev, and C. Verbowski. Detecting Stealth Software with Strider GhostBuster. In Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN), June 2005.
[49] A. Whitaker, R. S. Cox, and S. D. Gribble. Configuration Debugging as Search: Finding the Needle in the Haystack. In Proceedings of the 2004 Symposium on Operating Systems Design and Implementation (OSDI), December 2004.

---

This version of the text is more structured, coherent, and professional, with clear headings and improved flow.