### References

1. **Buzzword?-mapping research on security in DevOps.**
   - In *2016 11th International Conference on Availability, Reliability and Security (ARES)*. IEEE, 542–547.

2. **Nguyen, D. C., Derr, E., Backes, M., & Bugiel, S. (2019).**
   - *Short Text, Large Effect: Measuring the Impact of User Reviews on Android App Security & Privacy*.
   - In *2019 IEEE Symposium on Security and Privacy (SP)*, Vol. 00. 155–169.
   - https://doi.org/10.1109/SP.2019.00012

3. **Nguyen, D. C., Wermke, D., Acar, Y., Backes, M., Weir, C., & Fahl, S. (2017).**
   - *A Stitch in Time: Supporting Android Developers in Writing Secure Code*.
   - In *Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (CCS '17)*. ACM, New York, NY, USA, 1065–1077.
   - https://doi.org/10.1145/3133956.3133977

4. **Ogawa, H., Takimoto, E., Mouri, K., & Saito, S. (2018).**
   - *User-Side Updating of Third-Party Libraries for Android Applications*.
   - In *2018 Sixth International Symposium on Computing and Networking Workshops (CANDARW)*. IEEE, 452–458.

5. **Poeplau, S., Fratantonio, Y., Bianchi, A., Kruegel, C., & Vigna, G. (2014).**
   - *Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications*.
   - In *NDSS 2014*, Vol. 14. 23–26.

6. **Rahaman, S., Xiao, Y., Afrose, S., Shaon, F., Tian, K., Frantz, M., Kantarcioglu, M., & Yao, D. (Daphne) (2019).**
   - *CryptoGuard: High Precision Detection of Cryptographic Vulnerabilities in Massive-sized Java Projects*.
   - In *Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security (CCS '19)*. ACM, 2455–2472.
   - https://doi.org/10.1145/3319535.3345659

7. **Shuai, S., Guowei, D., Tao, G., Tianchang, Y., & Chenjie, S. (2014).**
   - *Modelling Analysis and Auto-detection of Cryptographic Misuse in Android Applications*.
   - In *2014 IEEE 12th International Conference on Dependable, Autonomic and Secure Computing*. 75–80.
   - https://doi.org/10.1109/DASC.2014.22

8. **Stevens, R., Gibler, C., Crussell, J., Erickson, J., & Chen, H. (2012).**
   - *Investigating user privacy in Android ad libraries*.
   - In *Workshop on Mobile Security Technologies (MoST)*, Vol. 10.

9. **Vallée-Rai, R., Gagnon, E., Hendren, L., Lam, P., Pominville, P., & Sundaresan, V. (2000).**
   - *Optimizing Java bytecode using the Soot framework: Is it feasible?*.
   - In *International conference on compiler construction*. Springer, 18–34.

10. **Watanabe, T., Akiyama, M., Kanei, F., Shioji, E., Takata, Y., Sun, B., Ishi, Y., Shibahara, T., Yagi, T., & Mori, T. (2017).**
    - *Understanding the Origins of Mobile App Vulnerabilities: A Large-scale Measurement Study of Free and Paid Apps*.
    - In *Proceedings of the 14th International Conference on Mining Software Repositories (MSR '17)*. IEEE Press, Piscataway, NJ, USA, 14–24.
    - https://doi.org/10.1109/MSR.2017.23

11. **Zhang, J., Beresford, A. R., & Kollmann, S. A. (2019).**
    - *LibID: Reliable Identification of Obfuscated Third-Party Android Libraries*.
    - In *Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2019)*. Association for Computing Machinery, New York, NY, USA, 55–65.
    - https://doi.org/10.1145/3293882.3330563

### Survey Questions

#### A.1 App Development

**Q1: How do you prefer getting update notifications? [Multiple Choice]**
- Yellow highlighting on the dependency version
- Pop up when new versions are available, with “Ignore” option
- When I build/compile my project?
- Other [Free Text]

**Q2: Based on which criteria do you usually pick a library for your projects? [Multiple Choice]**
- Popularity
- Ease of use
- Functionality
- Security
- Other

**Q3: Have you developed any third-party libraries? [Yes/No]**
- Yes: Which library is that? [Free Text]
- No

**Q4: How would you rate the security (whether a given version has security vulnerabilities) of libraries you decide to include in your projects? [Single Choice]**
- 1-5

**Q5: Did you notice any highlights regarding outdated library versions in your app’s Gradle files? [Single Choice]**
- Yes
- No
- I don’t know

**Q6: Where do you reach out for help while solving programming tasks that relate to third-party libraries? [Multiple Choice]**
- StackOverflow
- Search engines
- Third party library’s website
- Other [Free Text]

#### A.2 Up2Dep Usage

**Q7: How did you get to know Up2Dep? [Multiple Choice]**
- Friends, colleagues
- IntelliJ IDEA/Android Studio repository
- Twitter
- Android Developer Conference
- Other

**Q8: Which features of Up2Dep do you find useful? (Screenshots are included for each feature)**
- Compatibility check (compatible version vs. latest version)
- Insecure version check
- Crypto API misuse check
- Show dependencies and alternative API suggestions
- Other [Free Text]

**Q9: Since you started using Up2Dep, how many outdated libraries have you updated?**
- 0
- 1
- More than 2
- Other [Free Text]

#### A.3 Up2Dep Usability - SUS Questions

**Q10: For each of the following statements, how strongly do you agree or disagree (Strongly Disagree, Disagree, Neutral, Agree, Strongly Agree)?**

- I think that I would like to use Up2Dep frequently.
- I found Up2Dep unnecessarily complex.
- I thought Up2Dep was easy to use.
- I think that I would need the support of a technical person to be able to use Up2Dep.
- I found the various functions of Up2Dep were well integrated.
- I thought there was too much inconsistency in Up2Dep.
- I would imagine that most people would learn to use Up2Dep very quickly.
- I found Up2Dep very cumbersome to use.
- I felt very confident using Up2Dep.
- I needed to learn a lot of things before I could get going with Up2Dep.

#### A.4 Demographic

**Q11: How many years have you been programming in Android?**
- Less than 1 year
- Around 2 years
- Around 3 years
- More than 3 years

**Q12: How old are you?**
- 18–30
- 31-40
- 41-50
- >50
- No answer

**Q13: What is your gender?**
- Male
- Female
- No answer

**Q14: How many apps have you developed so far?**
- 1
- 2
- More than 2
- 0

**Q15: Do you have an IT-Security background?**
- Yes
- No

**Q16: Where are you from? [Free Text]**

### Background

#### B.1 Gradle Build Tool in Android Studio

Android Studio uses the Gradle Build Tool as an Android Studio plugin to automate and manage the app build process. The Gradle build system simplifies the inclusion of internal and external libraries as dependencies. In our work, we focus on libraries included via central repositories, as local binary dependencies (e.g., manually downloaded jar files) lack exact version information and introduce uncertainty.

**Listing 1: Declaring External Dependencies in Android Projects**

```java
ext.supportVersion = "25.3.1"

dependencies {
    implementation 'com.example:magic:1.2.1'
    // or
    implementation(group: 'com.example', name: 'magic', version: '1.2.2')
    
    // Dependencies using variable as version string
    implementation "com.android.support:support-v4:$supportVersion"
    implementation "com.android.support:appcompat-v7:$supportVersion"
}
```

#### B.2 Android Studio Plugin

Android Studio is based on JetBrains' IntelliJ IDEA. To develop an Android Studio plugin, one needs to create an IntelliJ IDEA plugin targeting Android Studio. The IntelliJ platform provides tools for static code analysis, such as inspections, which help developers identify potential problems in the source code. These inspections can detect probable bugs, dead code, performance issues, and coding practices.

Code inspection in Android Studio leverages the Program Structure Interface (PSI) to analyze source code files. PSI parses files and creates syntactic and semantic code models, enabling efficient static code analysis. There are two main program structure interfaces in IntelliJ IDEA: `PsiFile` and `PsiElement`. `PsiFile` represents the content of a code file as a hierarchy of elements, while `PsiElements` explore the internal structure of the project's source code.

To perform code inspection and quick-fixes, one can extend the `InspectionProfileEntry` class to build a `PsiElementVisitor` that traverses all `PsiElements` in a `PsiFile`. Each `PsiElement` corresponds to a keyword, variable, or operation in a particular language. For example, to update a dependency in the `build.gradle` file, a new `PsiElement` representing a newer version is created and replaces the existing `PsiElement` for the outdated library version.

### Figures and Tables

**Figure 7: Invitation to our online survey inside Android Studio.**

**Table 1: Participant Demographics of Online Survey.**

| Age       | Gender   | Location  | Programming Experience (years) | Apps Developed | IT-Security Background |
|-----------|----------|-----------|--------------------------------|----------------|------------------------|
| 18-30     | No answer| Europe    | 3                              | >2             | Yes                    |
| 31-40     | Male     | Asia      | >2                             | 2              | No                     |
| 41-50     | No answer| Other     | 1                              | 1              | No                     |
| >50       | Male     | No answer | 0                              | 0              | Yes                    |

**Figure 8: Up2Dep warns against using an insecure library version (with publicly disclosed vulnerability).**

**Figure 9: Up2Dep warns against re-using a cryptographic API misuse in a library.**

**Figure 10: Up2Dep shows how developers can migrate their project dependencies to the latest version when incompatibility between library versions occurs, i.e., the return type of method load has changed from `RequestBuilder` to `RequestCreator`.**

**Figure 11: Up2Dep warns against an outdated library.**

**Figure 12: Up2Dep provides different options to update an outdated library version.**

---

This revised version improves the clarity, coherence, and professionalism of the text. It also ensures that the references, survey questions, and background information are well-organized and easy to understand.