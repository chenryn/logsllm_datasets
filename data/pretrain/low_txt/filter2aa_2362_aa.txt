# Fuzzing for Software Security Testing and Quality Assurance

For a comprehensive list of related Artech House titles, please refer to the back of this book.

## Title
Fuzzing for Software Security Testing and Quality Assurance

## Authors
- Ari Takanen
- Jared DeMott
- Charlie Miller

## Publisher
Artech House, Inc.
- Website: [artechhouse.com](http://artechhouse.com)

## Library of Congress Cataloging-in-Publication Data
A catalog record for this book is available from the U.S. Library of Congress.

## British Library Cataloguing in Publication Data
A catalogue record for this book is available from the British Library.

## ISBN
- ISBN 13: 978-1-59693-214-2

## Cover Design
- Designed by Igor Valdman

## Copyright
- © 2008 ARTECH HOUSE, INC.
- 685 Canton Street, Norwood, MA 02062
- All rights reserved. Printed and bound in the United States of America.

### Reproduction Notice
No part of this book may be reproduced or utilized in any form or by any means, electronic or mechanical, including photocopying, recording, or by any information storage and retrieval system, without permission in writing from the publisher.

### Trademark Information
All terms mentioned in this book that are known to be trademarks or service marks have been appropriately capitalized. Artech House cannot attest to the accuracy of this information. Use of a term in this book should not be regarded as affecting the validity of any trademark or service mark.

### Print Run
10 9 8 7 6 5 4 3 2 1

### Dedication
This book is dedicated to our families and friends, and to all quality assurance specialists and security experts who are willing to share their knowledge and expertise to enable others to learn and improve their skills.

## Contents
- **Foreword** - xv
- **Preface** - xix
- **Acknowledgments** - xxi
- **Chapter 1: Introduction**
  - 1.1 Software Security
    - 1.1.1 Security Incident
    - 1.1.2 Disclosure Processes
    - 1.1.3 Attack Surfaces and Attack Vectors
    - 1.1.4 Reasons Behind Security Mistakes
    - 1.1.5 Proactive Security
    - 1.1.6 Security Requirements
  - 1.2 Software Quality
    - 1.2.1 Cost-Benefit of Quality
    - 1.2.2 Target of Test
    - 1.2.3 Testing Purposes
    - 1.2.4 Structural Testing
    - 1.2.5 Functional Testing
    - 1.2.6 Code Auditing
  - 1.3 Fuzzing
    - 1.3.1 Brief History of Fuzzing
    - 1.3.2 Fuzzing Overview
    - 1.3.3 Vulnerabilities Found with Fuzzing
    - 1.3.4 Fuzzer Types
    - 1.3.5 Logical Structure of a Fuzzer
    - 1.3.6 Fuzzing Process
    - 1.3.7 Fuzzing Frameworks and Test Suites
    - 1.3.8 Fuzzing and the Enterprise
  - 1.4 Book Goals and Layout
- **Chapter 2: Software Vulnerability Analysis**
  - 2.1 Purpose of Vulnerability Analysis
    - 2.1.1 Security and Vulnerability Scanners
  - 2.2 People Conducting Vulnerability Analysis
    - 2.2.1 Hackers
    - 2.2.2 Vulnerability Analysts or Security Researchers
    - 2.2.3 Penetration Testers
    - 2.2.4 Software Security Testers
    - 2.2.5 IT Security
  - 2.3 Target Software
  - 2.4 Basic Bug Categories
    - 2.4.1 Memory Corruption Errors
    - 2.4.2 Web Applications
    - 2.4.3 Brute Force Login
    - 2.4.4 Race Conditions
    - 2.4.5 Denials of Service
    - 2.4.6 Session Hijacking
    - 2.4.7 Man in the Middle
    - 2.4.8 Cryptographic Attacks
  - 2.5 Bug Hunting Techniques
    - 2.5.1 Reverse Engineering
    - 2.5.2 Source Code Auditing
  - 2.6 Fuzzing
    - 2.6.1 Basic Terms
    - 2.6.2 Hostile Data
    - 2.6.3 Number of Tests
  - 2.7 Defenses
    - 2.7.1 Why Fuzzing Works
    - 2.7.2 Defensive Coding
    - 2.7.3 Input Verification
    - 2.7.4 Hardware Overflow Protection
    - 2.7.5 Software Overflow Protection
  - 2.8 Summary
- **Chapter 3: Quality Assurance and Testing**
  - 3.1 Quality Assurance and Security
    - 3.1.1 Security in Software Development
    - 3.1.2 Security Defects
  - 3.2 Measuring Quality
    - 3.2.1 Quality Is About Validation of Features
    - 3.2.2 Quality Is About Finding Defects
    - 3.2.3 Quality Is a Feedback Loop to Development
    - 3.2.4 Quality Brings Visibility to the Development Process
    - 3.2.5 End Users’ Perspective
  - 3.3 Testing for Quality
    - 3.3.1 V-Model
    - 3.3.2 Testing on the Developer’s Desktop
    - 3.3.3 Testing the Design
  - 3.4 Main Categories of Testing
    - 3.4.1 Validation Testing Versus Defect Testing
    - 3.4.2 Structural Versus Functional Testing
  - 3.5 White-Box Testing
    - 3.5.1 Making the Code Readable
    - 3.5.2 Inspections and Reviews
    - 3.5.3 Code Auditing
  - 3.6 Black-Box Testing
    - 3.6.1 Software Interfaces
    - 3.6.2 Test Targets
    - 3.6.3 Fuzz Testing as a Profession
  - 3.7 Purposes of Black-Box Testing
    - 3.7.1 Conformance Testing
    - 3.7.2 Interoperability Testing
    - 3.7.3 Performance Testing
    - 3.7.4 Robustness Testing
  - 3.8 Testing Metrics
    - 3.8.1 Specification Coverage
    - 3.8.2 Input Space Coverage
    - 3.8.3 Interface Coverage
    - 3.8.4 Code Coverage
  - 3.9 Black-Box Testing Techniques for Security
    - 3.9.1 Load Testing
    - 3.9.2 Stress Testing
    - 3.9.3 Security Scanners

This revised version ensures clarity, coherence, and professionalism, making it easier for readers to navigate and understand the content.