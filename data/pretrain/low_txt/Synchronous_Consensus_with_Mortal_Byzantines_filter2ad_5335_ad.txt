### Optimized Text

#### Symmetric and Asymmetric Faults
The assumption that the system can detect all types of faults, as discussed in previous sections, may be overly optimistic. Specifically, detecting symmetric faults requires a deep understanding of the correctness of message contents, which may exceed the capabilities of a simple monitor. Therefore, it is important to also consider systems where only asymmetric faults are lethal, while symmetric faults are non-lethal.

#### Non-Lethal Failure Model
The non-lethal failure model is formally distinct from the mortal Byzantine model described in Sections 3 to 5. Under this model, faulty processes can remain active indefinitely if they do not exhibit two-faced behavior (i.e., sending different values to different processes in the same round). However, if a faulty process does engage in two-faced behavior, it must crash within a fixed number of rounds. We will demonstrate that \( n > 2t \) is both necessary and sufficient to solve consensus under these conditions.

**Lemma 7.1.** Under models (O) or (R), if all communication is conducted via \( \text{ft\_fme}(v) \) and symmetric faults are non-lethal, then if two correct processes deliver messages \( m \) and \( m' \) respectively in any round \( r \), it follows that \( m = m' \).

**Proof.** From Lemma 6.4, we know that if all faults are lethal, a faulty process can appear as having send omission faults or as being crashed. Assume that correct processes \( p \) and \( q \) both deliver a value for a faulty process \( p_f \). Since asymmetric faults are still lethal, \( p \) and \( q \) must have received \( k = x + y + 1 \) equal values \( \text{rcvpropp}[p_f] \) and \( \text{rcvpropq}[p_f] \), and \( \text{rcvpropp}[p_f] = \text{rcvpropq}[p_f] \). However, because symmetric faults are now non-lethal, the values delivered by the correct processes may be value-faulty. Some correct processes may not deliver a value for \( p_f \) at all.

This lemma confirms that faulty processes can only appear as crashed, send omission faulty, symmetric faulty, or a combination of send omission and symmetric faulty.

**Theorem 7.2.** There is no algorithm that can solve consensus in the presence of \( t \geq n/2 \) symmetric faulty processes.

**Proof.** The proof is omitted as it closely follows the proof of Theorem 5.3, which did not require two-faced behavior to derive the result.

**Corollary 7.3.** If symmetric faults are non-lethal, achieving consensus with at most \( t \) faulty processes requires at least \( n > 2t \) processes.

#### Algorithm 3: Synchronous, Mortal Byzantine Tolerant Consensus
**Code for processes (for process \( p \)):**

1. **Variables:**
   - \( v_p \in \{0, 1\} \) // current value
   - \( r_p \leftarrow 0 \) // current round
   - \( \text{rcvpropp}[i] \in \{0, 1, \bot\} \) // value received from \( i \), \( 1 \leq i \leq n \), in the current round
   - \( \text{decision}_p \in \{0, 1\} \) // decision value

2. **Algorithm:**
   - \( r_p \leftarrow r_p + 1 \)
   - \( \text{ft\_fme}(v_p) \)
   - For all \( i \in \Pi \):
     - Repeat:
       - If \( i \) sends \( v_i \):
         - \( \text{rcvpropp}[i] \leftarrow v_i \)
       - Else:
         - \( \text{rcvpropp}[i] \leftarrow \bot \)
     - Until \( r_p = x \cdot t + 1 \)
   - Decide \( v_p \)
   - Halt
   - If \( |\{i : \text{rcvpropp}[i] = 0\}| > |\{i : \text{rcvpropp}[i] = 1\}| \):
     - \( v_p = 0 \)
   - Else if \( |\{i : \text{rcvpropp}[i] = 0\}| < |\{i : \text{rcvpropp}[i] = 1\}| \):
     - \( v_p = 1 \)
   - Else:
     - \( v_p = \min\{\text{rcvpropp}[i]\} \)

#### Further Considerations
In general, it should be possible to develop more efficient solutions (e.g., regarding synchrony assumptions or the required number of processes) by replacing the static fault model with one where the behavior of faulty processes converges towards a benign fault. We have considered the extreme case where faulty processes may start with the most general failure mode (Byzantine) and eventually converge to a very benign fault, such as crashing. We have also explored intermediate models where processes may exhibit a certain (bounded) number of faults without ever crashing, but if they exceed this bound, they crash within a known number of rounds. In these cases, \( n > t \) is necessary and sufficient to solve consensus. If only asymmetric faults count towards the bound, the \( n > 2t \) result cannot be improved. Many other forms of such trajectories may be useful in applications or may naturally occur in certain components.

#### References
[1] M. Abd-El-Malek, G. R. Granger, G. R. Goodson, M. K. Reiter, and J. J. Wylie. Fault-scalable Byzantine fault-tolerant services. In 20th ACM Symposium on Operating Systems Principles (SOSP’05), pages 59–74, Oct. 23–26, 2005.

[2] M. K. Aguilera, C. Delporte-Gallet, H. Fauconnier, and S. Toueg. Consensus with Byzantine failures and little system synchrony. In Proceedings of the International Conference on Dependable Systems and Networks (DSN’06), pages 147–155, 2006.

[3] E. Anceaume, C. Delporte-Gallet, H. Fauconnier, M. Hurfin, and G. Le Lann. Designing modular services in the scattered Byzantine failure model. In 3rd International Symposium on Parallel and Distributed Computing (ISPDC 2004), pages 262–269. IEEE Computer Society, 2004.

[4] H. Attiya and J. Welch. Distributed Computing. John Wiley & Sons, 2nd edition, 2004.

[5] M. H. Azadmanesh and R. M. Kieckhafer. New hybrid fault models for asynchronous approximate agreement. IEEE Transactions on Computers, 45(4):439–449, 1996.

[6] M. Biely. An optimal Byzantine agreement algorithm with arbitrary node and link failures. In Proc. 15th Annual IASTED International Conference on Parallel and Distributed Computing and Systems (PDCS’03), pages 146–151, Marina Del Rey, California, USA, Nov. 3–5, 2003.

[7] M. Biely. On the optimal resilience for omissive process and link faults. Private communication, 2005.

[8] M. Castro and B. Liskov. Practical Byzantine fault tolerance. In 3rd Symposium on Operating Systems Design and Implementation, Feb. 1999.

[9] B. Charron-Bost and A. Schiper. Uniform consensus is harder than consensus. J. Algorithms, 51(1):15–37, 2004.

[10] M. Correia, N. F. Neves, L. C. Lung, and P. Veríssimo. Low complexity Byzantine-resilient consensus. Distributed Computing, 17:237–249, 2005.

[11] M. Correia, N. F. Neves, and P. Veríssimo. From consensus to atomic broadcast: Time-free Byzantine-resistant protocols without signatures. The Computer Journal, 49(1):82–96, 2006.

[12] C. Delporte-Gallet, H. Fauconnier, S. L. Horn, and S. Toueg. Fast fault-tolerant agreement algorithms. In PODC ’05: Proceedings of the twenty-fourth annual ACM SIGACT-SIGOPS symposium on Principles of distributed computing, pages 169–178, New York, NY, USA, 2005. ACM Press.

37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007