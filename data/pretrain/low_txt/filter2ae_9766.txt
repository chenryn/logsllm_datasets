# 【技术分享】如何利用D-Link高端路由器构建僵尸网络

#### 译文声明
本文为翻译文章，原文来源：embedi.com  
原文地址：[链接]  
译文仅供参考，具体内容及含义以原文为准。  
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)  
预估稿费：200RMB  
投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿

## 一、前言
在本文中，我们将探讨D-Link高端路由器中存在的几个安全漏洞。受影响的路由器型号包括：
- **DIR890L**
- **DIR885L**
- **DIR895L**
- **其他DIR8xx系列的D-Link路由器**

这些设备使用相同的代码库，这为攻击者提供了一个机会，可以将它们一起纳入僵尸网络中。我们还对Mirai的编译脚本进行了修改，成功将其移植到这些设备上。

此外，我们将简要介绍与开发者沟通的过程（尽管未取得实质性进展，这些漏洞仍然存在）。这三个漏洞中，有两个与cgibin相关（负责生成路由管理页面的主要CGI文件），另一个与系统恢复有关。

## 二、窃取登录名和密码
一句话概括：**只需一个HTTP请求，攻击者就能获取登录名及密码**。

我们发现的第一个漏洞位于`phpcgi`中。`phpcgi`是`cgibin`的一个符号链接，负责处理对`.php`、`.asp`以及`.txt`页面的请求。`phpcgi`会解析通过URL、HTTP头或POST请求正文发送的数据。解析完成后，它会创建一个长字符串，该字符串随后被分解为多个键值对（key-value pairs），包括`$GET`、`$POST`、`$SERVER`字典以及其他PHP脚本变量。如果用户未经授权，`AUTHORIZED_GROUP`变量会被设置为-1。

从安全角度来看，这种解析过程存在一些问题。每个键值对的编码形式为：`TYPEKEY=VALUE`，其中`TYPE`指代的是`GET`、`POST`、`SERVER`或其他值。编码完成后，键值对后会跟上换行符`\n`。

通过POST请求，我们可以使用`SomeValue%3dAUTHORIZED_GROUP=1`这个字符串来实现添加值的目的。这个字符串会被设备解析为`_GET_SomeKey=SomeValuenAUTHORIZED_GROUP=1`，从而允许我们以授权用户身份运行脚本（尽管可运行脚本的数量有限）。

向`http://192.168.0.1/getcfg.php`地址发送请求并添加`SERVICES=DEVICE.ACOUNT`键值对后，我们可以调用`/htdocs/webinc/getcfg/DEVICE.ACCOUNT.xml.php`脚本，迫使路由器返回登录名及密码信息。

从设备代码中可以看出，攻击者可以运行位于`/htdocs/webinc/getcfg`目录中的脚本。该目录包含一个`DEVICE.ACCOUNT.xml.php`脚本，可以为攻击者提供大量敏感信息，如设备的登录名及密码等。

换句话说，如果攻击者向`http://192.168.0.1/getcfg.php`发送请求，并添加`SERVICES=DEVICE.ACOUNT`键值对，设备在响应页面中就会包含相应的登录名及密码信息。

获得这些信息已经足够，例如，攻击者可以使用登录凭证将自制的恶意固件刷入设备中。

读者可以访问[此链接](https://github.com/embedi/DIR8xx_PoC/blob/master/phpcgi.py)查看完整的PoC代码。

## 三、获取设备的超级用户权限（从RCE到Root）
一句话概括：**只需一个HTTP请求，攻击者就能获得设备的root shell**。

第二个漏洞是一个栈溢出漏洞，与[HNAP](https://en.wikipedia.org/wiki/Home_Network_Administration_Protocol)（家庭网络管理协议）的执行错误有关。

如果想要使用该协议发送消息，攻击者需要向`http://192.168.0.1/HNAP1/`页面发送请求，并在`SOAPACTION`头部中指定请求类型。设备对授权请求的处理过程存在漏洞。设备会使用`http://purenetworks.com/HNAP1/Login`值来调用授权函数。攻击者可以在请求正文中指定其他键值对（如`Action`、`Username`、`LoginPassword`和`Captcha`），随后设备会使用HTML标签对这些值进行编码。

主要问题在于提取键值对的函数。设备在栈上使用了一个大小为0x400字节的缓冲区用于提取键值对，然而，攻击者可以使用`strncpy`函数发送高达0x10000字节的数据，导致栈溢出。精心构造后，`strncpy`不仅会溢出当前的栈，还会溢出调用函数栈，因为“dest”变量最多能存储0x80个字节的数据，而攻击者输入的值可达0x400个字节。

此外，当函数退出时，R0寄存器中存在一个指向该字符串的指针。因此，攻击者可以指定一组sh命令，将返回地址修改为“system”函数。经过这些步骤，设备已处于攻击者的掌控之下。

读者可以访问[此链接](https://github.com/embedi/DIR8xx_PoC/blob/master/hnap.py)查看完整的PoC代码。

## 四、在恢复模式中更新固件
一句话概括：**只需一次重启，你就拥有root权限**。

第三个漏洞在于，当路由器启动时，会启动一个用于恢复模式的Web服务器，持续几秒钟。如果未授权的攻击者通过以太网线连接到设备上，他们就可以抓住这个机会，利用该服务器更新设备固件。

为了利用这个漏洞，攻击者唯一要做的就是重启目标设备。重启设备的方法有很多，攻击者可以使用上面提到的漏洞完成重启，也可以向`jcpd`服务发送“EXEC REBOOT SYSTEM”命令完成重启。`jcpd`服务通过19541端口向本地网络提供服务，攻击者无需认证即可访问该服务，并且设备没有提供关闭该服务的任何选项，是非常完美的操作目标。为了完全控制目标设备，攻击者需要将自制的固件上传到设备中。

读者可以访问[此链接](https://github.com/embedi/DIR8xx_PoC/blob/master/recovery.py)查看完整的PoC代码。

## 五、时间线
这里我想提一下我们与D-Link安全团队的沟通过程，时间线如下：

- **2017年4月26日**：我们将HNAP协议漏洞通知开发者。
- **2017年4月28日**：D-Link员工回复称已在beta版固件中修复了这个漏洞，可以从[support.dlink.com](http://support.dlink.com)下载相应固件。（注：D-Link主页上没有固件下载这一栏）
- **2017年4月28日 - 5月3日**：我们分析了D-Link在回复中提到的那个固件版本，发现我们通知开发者的某个漏洞仍然没有被修复。
- **2017年5月3日 - 5月9日**：我们发现了固件中的另一个漏洞，通知D-Link并询问前一个漏洞的修复情况。他们回复称漏洞的检测、修复以及评估需要一段时间。
- **2017年6月1日**：我们将漏洞信息通知CERT，收到的回复如下：
  > “向您问候并诚挚感谢您提交的漏洞报告。经过审查后，我们决定不处理该漏洞报告。我们建议您继续与厂商沟通，再公开这些漏洞信息。”

- **2017年6月2日**：D-Link沉默了将近一个月，因此我们决定采取一些行动。我们警告D-Link，如果他们对这些漏洞放任不管，我们会向公众披露这些漏洞。
- **2017年6月6日**：D-Link在回复中提到了他们的漏洞响应过程，发送了一个beta版固件，在固件中修复了`phpcgi`漏洞。然而之前提交给D-Link的另一个漏洞仍然被开发者忽视了（可能D-Link安全团队仍然坚信他们已经在beta版固件中修复了这个漏洞）。
- 我们再一次就未修复的漏洞联系D-Link。果不其然，我们没有得到任何回复。我们从开发者那边得到的最后一条回复如下：
  > “首先向您问候，
  > 我们的研发团队正在研究您的漏洞报告。在理清漏洞来源、提供解决方案及确定问题范围（我们需要确定漏洞影响的具体型号）之前，我们通常不会讨论具体的进展情况。
  > 本周初我们应该会发布一些更新包。
  > 关于您的研究工作我无法提供任何进展信息。一旦我们修复漏洞后，我们会在[support.dlink.com](http://support.dlink.com)上公布经过第三方认证的具体信息。
  > 正如您看到的那样，通常情况下，漏洞的修复周期为好几个星期。经过验证后，我们会以beta版形式向公众提供固件，在公布RC版之前，我们还需要经过较长的质检周期。完整的发布周期通常需要90天。
  > 如果您选择早点公布漏洞报告，请向我们提供具体的URL地址。因为如果您希望该漏洞得到一个CVE编号，我们需要具体的报告作为参考。”

- 8月中旬，我们访问[support.dlink.com](http://support.dlink.com)，发现开发者上传了同一个beta版固件，该固件中仍有两个漏洞未修复。

因此，我们的结论为：
- D-Link只在DIR890L路由器中修复了一个漏洞，其他设备仍然处于不安全状态。
- 开发者完全忽视了其他两个漏洞。

只能说，干得漂亮，D-Link！