### Clients and False Negatives
We have 19 clients, with the solution being a two-step process: (a) ranking candidate cases based on their uncertainty, and (b) manually examining the most uncertain cases. As shown in Figure 11, the number of false negative cases decreases rapidly as we examine candidate cases in order of their uncertainty. For instance, after checking approximately 550 cases, the number of false negative cases was already below 10.

### Manual Investigation of Top-Ranked Destinations
We conducted a manual investigation of the top 50 destinations classified as malicious. This involved a comprehensive search for any indications on security intelligence platforms or threat reports, such as VirusTotal, McAfee Site Advisor, CleanMX, and IBM X-Force Exchange. For 48 out of the 50 (96%) top-ranked destinations, we found clear evidence of malicious activity. Most of these were reported for distributing malware or adware (e.g., Trojan-Downloader.Win32.Genome, Trojan.Semnager, etc.) or Android APK files exploiting vulnerabilities. For some destinations, 20 or more unique source identifiers (i.e., MAC addresses) were observed, amounting to 93 distinct clients in the confirmed top 50. The beaconing periods detected in the top 50 varied greatly, ranging from 30 seconds to 929 seconds (see Table V).

### Further Investigation and False Positives
During further investigation of the top 100 destinations reported as malicious, we identified a few false positives. One destination, api.echoenabled.com, had dozens of clients and was related to "HTTPS Everywhere," a browser plugin from the Electronic Frontier Foundation (EFF). Some other destinations were associated with ad networks. Additionally, we found some truly legitimate cases, such as sports, news, and music streaming websites (e.g., 2015.ausopen.com, kdfc.web-playlist.org), which presumably updated content regularly and were used by users over longer periods. These were not filtered by our initial whitelisting mechanisms.

### Top 5 Cases in 10-Day Trace
| Rank | Domain Name                  | Smallest Period | Clients |
|------|------------------------------|-----------------|---------|
| 1    | setup.poiio[..]rew.com        | 180 seconds     | 1       |
| 2    | setup.ghwr8[..]vsh.com        | 180 seconds     | 1       |
| 3    | cuoxxscrhhv[..]igp.com        | 63 seconds      | 3       |
| 4    | akkixiodzmf[..]asp.com        | 63 seconds      | 1       |
| 5    | vzsjfnjwchf[..]hxa.com        | 1242 seconds    | 1       |

### Daily Analysis (10-Day Trace)
The same parameters as in Section VIII-B2 were applied to the 10-day trace collected in October 2013. In this trace, we were aware of several confirmed positives related to botnet infections due to the ZeuS.Zbot malware [22]. For a total of 828 communication pairs, the traffic conditions indicated suspicious beaconing behavior, which can be broken down into 412 unique destinations and 696 unique clients. Among the cases, we manually investigated the 5 top-ranked destinations. Using public threat intelligence portals, we confirmed that the domains (see Table VI) were related to malware activity: beaconing of Zeus.Zbot (top 1 and 2), and beaconing of ZeroAccess (top 3, 4, and 5).

### Related Work
Botnets and recent advanced threats are often orchestrated through Command and Control (C&C) infrastructures. Many approaches have been proposed to detect botnets through network traffic analysis. For example, BotHunter [11] identified a typical bot infection lifecycle by monitoring network traffic, such as scanning and exploit downloads. BotSniffer [12] leveraged temporal and spatial correlation and similarity between multiple infected hosts to detect botnet activities. JackStraws [14] augmented network behavior graphs with host-based information to provide a more complete picture and capture potential C&C traffic. A similar idea was leveraged in [26] for botnet detection. Giroire et al. [10] proposed using temporal persistence to detect covert botnet traffic. Tegeler et al. [24] developed BotFinder, which applied machine learning algorithms to various temporal features (e.g., interval lists, FFT) and built models on known botnet samples. AsSadhan and Moura [3] analyzed control plane traffic looking for periodic behavior that might indicate the presence of botnets. Despite the similarity of using temporal features to detect suspicious network activities, the major difference is that our work does not require known training data sets or models of botnet behavior. Moreover, our focus is on reducing false positives and ensuring the practicality of the system, e.g., daily operation in a large enterprise network. Many of our design choices (e.g., filtering, ranking, and investigation) are derived from analysts' feedback.

### Periodicity Detection
Periodicity detection has also become a popular topic in the data mining and database research communities because it can be used to capture the evolution of data over time. Earlier work focused on mining frequent patterns in time series, such as [13], with the goal of finding patterns that appeared at least min sup times. Later research addressed the problem of automatic periodicity detection. For example, Elfeky et al. [8] proposed an efficient convolution method to detect periodicity. More recently, Rasheed et al. [19] proposed a periodicity mining method in time series databases using suffix trees, which was noise-resilient and ran in quadratic time in the worst case. Elfeky et al. [9] used time warping techniques to accommodate insertion or deletion noises in the time series data, achieving O(n^2) complexity. Vlachos et al. [25] combined frequency analysis and autocorrelation to design a non-parametric method for accurate periodicity detection. Due to its lower computational cost (O(n log n)), BAYWATCH adapted Vlachos' approach and scaled it to be practical for a massive amount of network traffic.

### Discussion
In addition to web proxy logs, BAYWATCH is applicable to other data sources such as DNS, NetFlow, or firewall logs. The core of the methodology, the time series analysis, relies on the activity summary of a communication pair, including a source, a destination, and request time intervals. In our preliminary experiments on NetFlow and DNS, we identified numerous suspicious beaconing behaviors; however, we omit the results here due to space limitations. In DNS, challenges with detecting beaconing include regional DNS servers seeing aggregated behaviors of local DNS servers rather than end hosts, and not seeing every DNS query due to caching. NetFlow only provides connection-level information, i.e., no domain names or additional content information.

BAYWATCH operates iteratively at three time scales (daily, weekly, monthly), allowing it to detect less-frequent beaconing (e.g., 24-hour periodicity) as well as highly-frequent beaconing (e.g., minute-level periodicity). Although BAYWATCH is designed to be robust against data noise, adversaries may still evade detection by employing purely random behavior. However, this may be impractical due to the substantial maintenance cost imposed on adversaries. For example, it is unpredictable when infected hosts will call back, and there is no guarantee when their commands or updates will be conveyed to the botnets.

We systematically evaluated the noise tolerance of our beaconing detection algorithm with synthetic data sets by injecting various noises. However, measuring the detection accuracy (distinction between legitimate and malicious beaconing) at a large scale on real-world data is challenging due to the lack of ground truth. Since security analysts face the same challenge, our filtering approach to reduce the workload and output a prioritization list proved to be beneficial.

### Conclusions
In this paper, we proposed BAYWATCH, a robust and scalable methodology to identify stealthy beaconing behavior from passive network traffic monitoring. Our experimental results with both synthetic data and 35TB of real-world logs demonstrated robustness against real-world perturbations, scalability to millions of connections per day, and accuracy in detecting malicious beaconing.

### Acknowledgments
We would like to thank the anonymous referees and Doug Kimelman for their valuable suggestions and helpful comments.

### References
[1] Alexa Internet, Inc. Does Alexa have a list of its top-ranked websites? https://support.alexa.com/hc/en-us/articles/200449834-Does-Alexa-have-a-list-of-its-top-ranked-websites-.
[2] Arbor Networks. Twitter-based botnet command channel, August 2009. https://asert.arbornetworks.com/twitter-based-botnet-command-channel/.
[3] B. AsSadhan and J. M. Moura. An efficient method to detect periodic behavior in botnet traffic by analyzing control plane traffic. Journal of Advanced Research, 5(4):435 – 448, 2014.
[4] B. Bencsáth, G. Pék, L. Buttyán, and M. Félegyházi. Duqu: A Stuxnet-like malware found in the wild, October 2011. http://www.crysys.hu/publications/files/bencsathPBF11duqu.pdf.
[5] L. Breiman. Random forests. Mach. Learn., 45(1):5–32, Oct. 2001.
[6] K. Burton. The Conficker Worm, 2010. https://www.sans.org/security-resources/malwarefaq/conficker-worm.php.
[7] J. Dean and S. Ghemawat. MapReduce: Simplified Data Processing on Large Clusters. Commun. ACM, 51(1):107–113, Jan. 2008.
[8] M. G. Elfeky, W. G. Aref, and A. K. Elmagarmid. Periodicity detection in time series databases. Knowledge and Data Engineering, IEEE Transactions on, 17(7):875–887, 2005.
[9] M. G. Elfeky, W. G. Aref, and A. K. Elmagarmid. Warp: time warping for periodicity detection. In Data Mining, Fifth IEEE International Conference on, pages 8–pp. IEEE, 2005.
[10] F. Giroire, J. Chandrashekar, N. Taft, E. M. Schooler, and D. Papagiannaki. Exploiting temporal persistence to detect covert botnet channels. In Proceedings of Recent Advances in Intrusion Detection (RAID), 2009.
[11] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee. Bothunter: Detecting malware infection through IDS-driven dialog correlation. In Proceedings of 16th USENIX Security Symposium, 2007.
[12] G. Gu, J. Zhang, and W. Lee. BotSniffer: Detecting botnet command and control channels in network traffic. In Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS’08), February 2008.
[13] J. Han, G. Dong, and Y. Yin. Efficient mining of partial periodic patterns in time series database. In Data Engineering, 1999. Proceedings., 15th International Conference on, pages 106–115. IEEE, 1999.
[14] G. Jacob, R. Hund, C. Kruegel, and T. Holz. JACKSTRAWS: Picking Command and Control Connections from Bot Traffic. In Proceedings of the 20th USENIX Conference on Security (SEC ’11), 2011.
[15] Kaspersky Lab Global Research and Analysis Team. The Epic Turla Operation: Solving some of the mysteries of Snake/Uroboros, August 2014. https://securelist.com/files/2014/08/KL_Epic_Turla_Technical_Appendix_20140806.pdf.
[16] Kaspersky Labs. The Epic Snake: Unraveling the mysteries of the Turla cyber-espionage campaign, August 2014. http://www.kaspersky.com/about/news/virus/2014/Unraveling-mysteries-of-Turla-cyber-espionage-campaign.
[17] B. Krebs. Sources: Target Investigating Data Breach. Krebs on Security, December 2013. http://krebsonsecurity.com/2013/12/sources-target-investigating-data-breach/.
[18] Mandiant. APT1 – Exposing One of China’s Cyber Espionage Units, February 2013. http://intelreport.mandiant.com/Mandiant_APT1_Report.pdf.
[19] F. Rasheed, M. Alshalalfa, and R. Alhajj. Efficient periodicity mining in time series databases using suffix trees. Knowledge and Data Engineering, IEEE Transactions on, 23(1):79–94, 2011.
[20] A. Rassokhin and D. Oleksyuk. TDSS botnet: full disclosure, March 2012. http://nobunkum.ru/analytics/en-tdss-botnet.
[21] RSA FraudAction Research Labs. Anatomy of an Attack, April 2011. https://blogs.rsa.com/anatomy-of-an-attack/.
[22] Symantec. Trojan.Zbot, January 2010. http://www.symantec.com/security_response/writeup.jsp?docid=2010-011016-3514-99&tabid=2.
[23] Symantec Security Response. Regin: Top-tier espionage tool enables stealthy surveillance, November 2014. http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/regin-analysis.pdf.
[24] F. Tegeler, X. Fu, G. Vigna, and C. Kruegel. Botfinder: Finding bots in network traffic without deep packet inspection. In Proceedings of the 8th International Conference on Emerging Networking Experiments and Technologies (CoNEXT), 2012.
[25] M. Vlachos, S. Y. Philip, and V. Castelli. On periodicity detection and structural periodic similarity. In Proceedings of SIAM International Conference on Data Mining (SDM), 2005.
[26] Y. Zeng, X. Hu, and K. G. Shin. Detection of botnets using combined host- and network-level information. In IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), 2010.
[27] K. Zetter. Sony Got Hacked Hard: What We Know and Don’t Know So Far. Wired, December 2014. http://www.wired.com/2014/12/sony-hack-what-we-know/.