### Measures to Protect the Exposure Platform and Ongoing API Services

We implemented measures to ensure that neither the exposure platform nor the ongoing API services for other verticals or users were compromised. Specifically, we:

- Applied a clear, methodical testing strategy instead of random penetration or function testing.
- Avoided noisy attacks such as Denial of Service (DoS) or brute-force attacks.

### Design Risks in IoT Service Platforms

#### 1. Access Control, Authentication, and Data Exposure
- **Forged Access:**
  - The process to obtain access to IoT service platforms is vulnerable to social engineering attacks.
  - An attacker can register using a forged company (tax) ID and a spoofed email address, which many providers do not verify rigorously.
  - The attacker can receive SIM cards at a private (arbitrary) address and gain access to service APIs.
  - Once in, the attacker can masquerade as a legitimate company/industry and perform limitless API operations and probing to find vulnerabilities.
  - Many platforms lack rate limits, strict monitoring, and logging facilities, which further aids the attacker.
  - **Fix:** Implement a strict Know Your Customer (KYC) procedure for both providers and operators.

- **Username and Password Policy for API Authentication:**
  - Password creation, update, and management often do not comply with GSMA guidelines.
  - Weak passwords (e.g., "root," "admin," "iotadministrator") are allowed.
  - Some platforms restrict dictionary passwords during account creation but allow them during password updates.
  - **Fix:** Comply with best password practices. For example:
    - `asdf1234`, `qwer1234`, `qwerty1234` → weak passwords, not allowed
    - `1qaz2wsx` → top 100 weak password
    - `iotadmin1` → Set password error: This is similar to a commonly used password
    - `iotuser1` → Set password error: Add another word or two. Uncommon words are better.
    - `iotuser10`, `Password1234`, `Administrator1` → allowed

- **Token Management:**
  - Several platforms do not use OAuth-based token generation.
  - Static API tokens that do not expire should be revoked for every API user.
  - Tokens should expire within 24 hours to 1 week.
  - **Fix:** Use standard OAuth and JSON Web Tokens (JWT) for authorization.

- **Lack of Rate Limiting for API Requests:**
  - Only 2 out of 9 platforms have rate limits for API requests.
  - Testing involved sending 250/500 valid GET/POST requests in a short period from the same IP address and user account.
  - No backoff period or IP ban was observed from the API gateway.
  - **Fix:** Implement rate limiting policies with random/exponential back-off timers.

- **Private Identifiers Used Inside IoT Domain:**
  - ICCID, IMEI, and IMSI are exposed outside the 3GPP domain (can be SUPI in 5G).
  - These identifiers are used to access/indicate SIM cards and IoT devices, which is convenient for developers and API users.
  - This violates 3GPP privacy requirements for Machine Type Communications (MTC) using exposure services and enables user/device enumeration.
  - **Fix:** Use an identifier like the General Purpose Subscriber Identifier (GPSI) or other custom identifiers. Avoid linking to any identifiers used over the radio interface.

- **Verbose Error Messages:**
  - Easy user enumeration via probing with IMSI, ICCID, or IMEI.
  - Attackers can determine existing and non-existing IMSIs from different API error responses.
  - **Fix:** Provide generic error messages, such as "unauthorized."

- **Internal Software Information Exposed:**
  - Database software information (e.g., Couchbase, JBoss) and platform deployment details (e.g., cloud provider) are exposed via error messages.
  - Deprecated TLS versions (e.g., TLS v1.0, v1.2) are negotiable.
  - **Fix:** Implement configuration control and reduce exposure.

- **Internal Node Exposure:**
  - APIs leak core network elements/gateway, exposing internal SSH ports/interfaces.
  - Attackers can launch brute-force attacks on internal IoT nodes.
  - **Fix:** Implement configuration control and reduce exposure.

- **Malware Propagation Inside User Plane:**
  - Malicious data (e.g., popular malware and binaries) can be sent via SMS and IP payloads.
  - No spam detection filters are in place.
  - **Fix:** Implement spam and malware detection filters.

### Vulnerabilities in IoT Service Platforms

- **Broken Authorization While Sending Downlink Message:**
  - IP addresses are not validated for the `/ping` API.
  - An attacker can insert a victim's IP address in the `/ping` API request and send it to the IoT device.
  - **Impact:** Increased data consumption, billing, battery drain, and potential DoS.
  - **Fix:** Implement strict authorization checks for every API parameter/object level.

- **Private Details of SIM and Customer Exposed Over Webhook:**
  - Private information (e.g., billing details, subscriber plan, PIN, PUK) is exposed when sending SMS via API.
  - **Fix:** Use only HTTPS webhooks and eliminate sending SIM card private info to customers over the Internet.

- **Access Control Misconfiguration:**
  - Sensitive data (e.g., SGSN IP address) is visible to API users in restricted profiles.
  - Discrepancies between API documentation and software implementation.
  - **Fix:** Ensure that sensitive data is accessible only to administrators.

- **Script Injection:**
  - High probability for code execution attacks due to parameters accepting tampered and malicious inputs.
  - **Fix:** Implement strict input sanitization for each parameter.

- **XSS Execution:**
  - Code injection via the Alias parameter, which can be shared between platforms and lead to code execution.
  - **Fix:** Implement strict input sanitization and authorization checks.

### Responsible Disclosure

- We responsibly disclosed our findings to the affected IoT service providers and operators.
- Positive acknowledgments and confirmation of vulnerabilities were received, along with appreciation for our efforts to enhance security.
- Operators confirmed that our testing methods did not cause any damage to their services and infrastructure.
- Three of the tested service providers indicated that the injection vulnerabilities discovered in our findings remained hidden during their internal penetration testing exercises.
- We do not disclose any API or provider/operator names.

### Summary of Security Analysis

- OAuth and TLS are used in the majority of platforms (5/9), but not all.
- Only 2 out of 9 IoT platforms are not affected by serious vulnerabilities and API risks.
- IMSI is exposed outside the 3GPP network, and the same practice may apply to 5G IMSI (SUPI).
- Lack of rate limits and strong password policies.
- Internal software information and core network IP addresses are exposed.
- Authorization vulnerabilities can compromise IoT devices and the network.
- Script/code injection vulnerabilities are found in many platforms and missed during internal pen-testing.
- SMS and IP content inspection are not present in mobile and IoT networks.
- Attackers can easily obtain access to IoT service platforms and service APIs with a forged identity.

### Security Measures

- **KYC:** Implement strict Know Your Customer checks before issuing access to IoT service platforms.
- **Customized API Design:** Limit the number of APIs available for each use-case or business partner to reduce the attack surface.
- **Reduced Data Exposure:**
  - Replace private identifiers like IMSI and SUPI with random identifiers.
  - Ensure that information sent over webhooks, in API responses, and error messages is minimized.
- **Rate Limits:** Make rate limits mandatory and use smart algorithms to detect malicious behavior.
- **Strict Input Validation and Sanitization:** Validate and sanitize each parameter taken as input from the user.
- **Analytics-Based Security:** Include logging and real-time monitoring.

### Key Takeaways

- **Identity and Access Control:** Opening new doors on mobile networks requires strict identity and access control, and a zero-trust approach.
- **Standard Mechanisms:** Standard OAuth and TLS mechanisms alone are not sufficient for full security.
- **Insecure API Design/Configuration:** Insecure API design and configuration pose a risk to mobile core and IoT devices.
- **Telecom Exposure API Risks:** Application logic flaws in telecom exposure APIs require rigorous, application-specific tests (not just general API security scanners).
- **Security-by-Design:** Firewalls alone are not enough; security-by-design and testing in CI/CD pipelines are essential.
- **Telecom API Top 10:** A list of the top 10 security risks for telecom APIs would help developers and operators understand the security challenges.

### Questions? Concerns? Comments?

Feel free to reach out to me at [Your Email Address].