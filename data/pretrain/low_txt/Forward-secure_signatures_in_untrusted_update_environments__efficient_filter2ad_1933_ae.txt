### Line 5: Keygen and Update Operations

Since `DecK` is not involved in calls to `Keygen0`, `Keygen1`, `Sign0`, or `Update0`, the remaining operations of `Keygen` are carried out as in the real game. The initial "encrypted" private key `EncSK0` for period 0 in `FSS-UU` is given to the adversary `F`, who starts making queries.

#### Update Queries
Since `DecK` is not involved in update operations, the adversary `A` can perfectly answer update queries as in the proof of Theorem 4.1.

#### Signing Queries
At any period \( t \), the adversary `F` may query `A` to sign a message \( M \). To answer such a request, `A` can always compute \( \sigma_0 \) (the certificate for \( \Sigma_{UU} \)) herself, as she knows the private key `SK0` of \( \Sigma_0 \) from the key generation stage. To obtain \( \sigma_1 \) (which is a signature on the augmented message \( M || PK \)), she triggers the recursive signing algorithm `Sign1` and follows its specification until entering the last step of the recursion (when \( T = 1 \)). At this point, `A` must query her challenger `C` to obtain a multi-signature \( \sigma' \) with respect to her challenge public key \( \tilde{pk} \) and another public key \( pk \) for which she knows the matching secret key \( sk \) that she chose herself during the recursive key generation of an instance of `FSS-UU` without revealing it when the update oracle was queried to enter epoch \( \lfloor t / T1 \rfloor \).

This sub-key \( sk \) of `EncSK` allows `A` to play the role of a malicious party in her interaction with `C`. The resulting signature \( \sigma' \) completes the recursion and allows her to obtain \( (\sigma_1, PK') \), finishing the signature generation.

### Forgery
Eventually, `F` is expected to produce a forgery \( \sigma' = ((PK_1'), t') \) on a message \( M' \) for some period \( t' \) during which \( M' \) was not queried for a signature.

Let `SEEN` denote the set of public key components for \( \Sigma_{UU} \) that `F` happens to observe within outputs of signing queries. If \( PK_1' \notin SEEN \), the inner multi-signature of \( \sigma_1' \) (which consists of a 2-party signature, a public key \( pk \), and \( O(\log T1) \) hash values) is a 2-party signature on a new message \( M' || PK_1' || t' || (t' \mod T1) \) with respect to the challenge public key \( \tilde{pk} \) and some other public key \( pk \) for which `A` may not know the corresponding secret key \( sk \). However, this suffices to break the unforgeability of 2MS in the plain public key model, where `A` is not required to know or reveal the private keys of maliciously generated public keys.

If \( PK_1' \in SEEN \), \( \sigma_1' \) necessarily contains a multi-signature on message \( M' || PK_1' || t' || (t' \mod T1) \) (that was not previously queried since the pair \( (M', t') \) was not involved in a signing query from `F`) with respect to public keys \( \tilde{pk} \) and a public key \( pk \) of known secret key \( sk \), which also implies a breach in the security of 2MS.

### Theorem 4.5
**Theorem 4.5.** Assuming the security of the underlying 2MS scheme in the plain public key model and the forward-security of \( \Sigma_0 \) in the sense of Bellare-Miner, the `FSS-UU` composition is forward-secure in the sense of Definition 1. Specifically, for a product scheme over \( T0 \cdot T1 \) periods, a forward security adversary `F` has at most advantage:

\[
\text{Adv}_{FS}(F) \leq \text{Adv}_{FS}(F_0) + T0 \cdot T1 \cdot \text{Adv}_{MS}(F_{MS})
\]

after \( q_s \) and \( q_u \) signing and update queries within time \( t' \leq \max\{t_0 - q_s \cdot t_{Sng}^{MS} - T0 \cdot T1 \cdot t_{Kg}^{MS}, t_1 - q_s \cdot t_{Sng}^{MS} - T0 \cdot (T1 \cdot t_{Kg}^{MS} + t_{Sgn}^{FS})\} \),

where \( t_{Sgn}^{FS} \) and \( t_{Kg}^{FS} \) respectively denote the time complexities of signing and key generation algorithms in \( \Sigma_0 \), \( t_{Kg}^{MS} \) and \( t_{Sng}^{MS} \) stand for these costs in 2MS, while \( \text{Adv}_{FS}(F_0) \) and \( \text{Adv}_{MS}(F_{MS}) \) denote maximal advantages of a forward security adversary \( F_0 \) against \( \Sigma_0 \) and a forger \( F_{MS} \) against the 2MS scheme.

**Proof.** The result stems from the proof of Theorem 4 in [28]. As in Theorem 4.2, it suffices to observe that `FSS-UU` schemes become traditional forward-secure signatures when the adversary knows `DecK` as in Definition 1 and that `FSS-UU` systems with one period can be implemented by 2-party multi-signatures in the plain public key model.

### Extending MMM
Recall that Malkin et al. [28] generically obtain forward-secure signatures from any digital signatures by suitably integrating their sum and product compositions. The salient property of the construction is that it does not require knowing the number of time periods at key generation time and allows for schemes with (virtually) unbounded lifetime: the only theoretical bound on the number of periods is exponential in security parameters of underlying symmetric primitives (i.e., a pseudorandom generator and a collision-resistant hash function) and thus essentially impossible to reach in practice. In all metrics, the MMM scheme never exceeds a complexity that mildly (i.e., logarithmically) depends on the number of periods elapsed so far.

In a nutshell, the construction is a product composition \( \Sigma_0 \otimes \Sigma_1 \) where epochs use instances of a FSS scheme \( \Sigma_1 \) with increasingly large numbers of periods, which allows for a complexity growing as time elapses instead of depending on a maximal number of stages. During epoch \( j \), the product scheme uses an instance of \( \Sigma_1 \) with \( 2^j \) periods (obtained by \( j \) iterations of the sum composition). If \( \lambda \) is the security parameter of underlying symmetric primitives, the product involves \( \lambda \) epochs (i.e., a scheme \( \Sigma_0 \) with \( \lambda \) periods resulting from the sum composition applied \( \log \lambda \) times) so that \( \sum_{j=0}^{\lambda-1} 2^j = 2^\lambda - 1 \) is the theoretical overall number of stages, far beyond the needs of any practical application.

From an efficiency perspective, resulting signatures at time period \( t \) consist of only two digital signatures, two public keys, and \( \log \lambda + \log t \) hash values (more precisely, \( \log \lambda \) of them stem from the sum composition producing \( \Sigma_0 \) and the remaining \( \log t \) hash values pertain to a second sum composition at epoch \( j = O(\log t) \) of the product). Signature generation only requires computing a digital signature, and verification entails verifying 2 digital signatures as well as \( \log \lambda + \log t \) hash operations. Public keys only consist of a hash value, while private keys logarithmically grow as time goes by (their length is \( O(\lambda + (\log \lambda + \log t)\lambda) \) bits). When amortized (we refer to [28] for more details), the cost of an update operation at period \( t \) is given by \( O(\lambda^2 \lambda + \lambda^2 \log t) \), and the complexity of the key generation algorithm only depends on security parameters \( \lambda \) and \( \lambda \).

By integrating our modified sum and product compositions of sections 4.1 and 4.2 in the same way, we can obtain a forward-secure signature with untrusted updates enjoying identical performance. We first construct a regular FSS scheme \( \Sigma_0 \) with \( \lambda \) periods using the original sum composition [28]. Then, we obtain a "twisted product" by using an instance of \( \Sigma_{UU} \) with \( 2^j \) periods at epoch \( j \). Each instance of \( \Sigma_{UU} \) corresponds to any 2-party multi-signature in the plain public key model. The Schnorr-based [34] construction of [7] is a good candidate, as are its alternative implementations based on RSA [20], factoring [18, 31], or the Decision Diffie-Hellman assumption [24]. As mentioned in [7], unrestricted aggregate signatures put forth in [6] also give rise to multi-signatures in the plain public key model that can be used here as well.

Again, several trade-offs are possible. For instance, the regular FSS scheme \( \Sigma_0 \) in our "twisted product" can be a number-theoretic signature such as the one of Itkis-Reyzin [22] instantiated over \( \lambda \) periods (recall that \( \lambda \) is the security parameter of a symmetric primitive and is thus relatively small with respect to realistic numbers of periods \( T \)). This removes the need for including \( \log \lambda \) hash values in signatures while avoiding linear key generation and updates from the first version of [22]. Of course, the same idea applies to the original MMM system as well.

Our full construction currently applies to only a handful of schemes. Also, the only known examples [7, 6] of multi-signatures in the plain public key model rely on the random oracle methodology [5]. To date, it turns out that we can only take full advantage of the MMM construction with random-oracle-using signatures. However, security proofs of our modified sum and product compositions do not rely on random oracles. We thus believe that our extension of MMM is an additional incentive to seek after standard model realizations of multi-signatures in the plain public key model.

### Conclusion
In this paper, we described new constructions of forward-secure signatures with the untrusted update property recently put forth in [12]. Our generic construction from any forward-secure signature is very simple but induces size and computational overheads. By extending the very efficient MMM sum-product composition, however, we obtain a number of schemes based on various non-pairing-related computational assumptions and featuring very attractive performance. This resolves an open problem raised in [12] that called for efficient implementations of untrusted updates in existing forward-secure signatures found in the literature.

When applied to the recently suggested multi-signatures of Bellare-Neven [7], our extension of MMM notably provides `FSS-UU` schemes with a practically unbounded number of time periods. It does not introduce additional random oracle assumptions either. Currently known instantiations of these new "unbounded" systems rely on random oracles only because the underlying multi-signatures do.

### References
[1] M. Abdalla, S. K. Miner, C. Namprempre. Forward-Secure Threshold Signature Schemes. In CT-RSA, pp. 441–456, 2001.
[2] M. Abdalla, L. Reyzin. A New Forward-Secure Digital Signature Scheme. In ASIACRYPT, pp. 116–129, 2000.
[3] R. Anderson. Two Remarks on Public Key Cryptology. Invited lecture, ACM CCS, 1997.
[4] M. Bellare, S. Miner. A Forward-Secure Digital Signature Scheme. In CRYPTO, pp. 431–448, 1999.
[5] M. Bellare, P. Rogaway. Random oracles are practical: A paradigm for designing efficient protocols. In ACM CCS, pp. 62–73, 1993.
[6] M. Bellare, C. Namprempre, G. Neven. Unrestricted Aggregate Signatures. In ICALP, pp. 411–422, 2007.
[7] M. Bellare, G. Neven. Multi-signatures in the plain public-Key model and a general forking lemma. In ACM CCS, pp. 390–399, 2006.
[8] M. Bellare, B. Yee. Forward-Security in Private-Key Cryptography. In CT-RSA, pp. 1–18, 2003.
[9] A. Boldyreva. Efficient Threshold Signature, Multisignature and Blind Signature Schemes Based on the Gap-Diffie-Hellman-group Signature Scheme. In PKC, pp. 31–46, 2003.
[10] D. Boneh, X. Boyen, E.-J. Goh. Hierarchical Identity Based Encryption with Constant Size Ciphertext. In EUROCRYPT, pp. 440–456, 2005.
[11] D. Boneh, B. Lynn, and H. Shacham. Short signatures from the Weil pairing. In ASIACRYPT, pp. 514–532, 2001.
[12] X. Boyen, H. Shacham, E. Shen, B. Waters. Forward-Secure Signatures with Untrusted Update. In ACM CCS, pp. 191–200, 2006.
[13] R. Canetti, S. Halevi, J. Katz. A Forward Secure Public Key Encryption Scheme. In EUROCRYPT, pp. 254–271, 2003.
[14] E. Cronin, S. Jamin, T. Malkin, P. McDaniel. On the Performance, Feasibility and Use of Forward-Secure Signatures. In ACM CCS, pp. 131–144, 2003.
[15] Y. Dodis, J. Katz, S. Xu, M. Yung. Key-Insulated Public Key Cryptosystems. In EUROCRYPT’02, pp. 65–82, 2002.
[16] Y. Dodis, J. Katz, S. Xu, M. Yung. Strong key-insulated signature schemes. In PKC, pp. 130–144, 2003.
[17] Y. Dodis, L. Reyzin. Breaking and repairing optimistic fair exchange from PODC 2003. In Digital Rights Management Workshop 2003, pp. 47–54, 2003.
[18] A. Fiat and A. Shamir. How to prove yourself: Practical Solutions to Identification and Signature Problems. In CRYPTO, pp. 186–194, 1986.
[19] S. Goldwasser, S. Micali, R. Rivest. A Digital Signature Scheme Secure Against Adaptive Chosen-Message Attacks. SIAM J. Comput. 17(2), pp. 281–308, 1988.
[20] L. Guillou, J.-J. Quisquater. A “paradoxical” identity-based signature scheme resulting from zero-knowledge. In CRYPTO, pp. 216–231, 1988.
[21] K. Itakura, K. Nakamura. A Public Key Cryptosystem Suitable for Digital Multisignatures. In NEC Research & Development, 71:1–8, 1983.
[22] G. Itkis, L. Reyzin. Forward-Secure Signatures with Optimal Signing and Verifying. In CRYPTO, pp. 332–354, 2001.
[23] G. Itkis, L. Reyzin. SiBIR: Signer-Base Intrusion-Resilient Signatures. In CRYPTO, pp. 499–514, 2002.
[24] J. Katz, N. Wang. Efficiency Improvements for Signature Schemes with Tight Security Reductions. In ACM CCS, pp. 155–164, 2003.
[25] H. Krawczyk. Simple Forward-Secure Signatures from any Signature Scheme. ACM CCS, pp. 108-115, 2000.
[26] A. Kozlov, L. Reyzin. Forward-Secure Signatures with Fast Key Update. In SCN, pp. 241–256, 2002.
[27] S. Lu, R. Ostrovsky, A. Sahai, H. Shacham, B. Waters. Sequential Aggregate Signatures and Multisignatures Without Random Oracles. In EUROCRYPT, pp. 465–485, 2006.
[28] T. Malkin, D. Micciancio, S. K. Miner. Efficient Generic Forward-Secure Signatures with an Unbounded Number Of Time Periods. In EUROCRYPT, pp. 400–417, 2002.
[29] R. Merkle. A Digital Signature Based on a Conventional Encryption Function. In CRYPTO, pp. 369–378, 1988.
[30] S. Micali, K. Ohta, L. Reyzin. Accountable-subgroup multisignatures. ACM CCS, pp. 245–254, 2001.
[31] H. Ong and C. P. Schnorr. Fast signature generation with a Fiat-Shamir like scheme. In EUROCRYPT, pp. 432–440, 1990.
[32] D. Pointcheval and J. Stern. Security proofs for signature schemes. In EUROCRYPT, pp. 387–398, 1996.
[33] J. Rompel. One-Way Functions are Necessary and Sufficient for Secure Signatures. In STOC, pp. 387–394, 1990.
[34] C. P. Schnorr. Efficient identification and signatures for smart cards. In CRYPTO, pp. 239–252, 1989.
[35] D. Song. Practical Forward-Secure Group Signature Schemes. ACM CCS, pp. 225–234, 2001.
[36] B. Waters. Efficient Identity-Based Encryption Without Random Oracles. In EUROCRYPT, pp. 114–127, 2005.