### Optimized Text

In our study, we demonstrated that BayesDroid [42] is similar to TaintDroid but specifically addresses the issue of partial information leaks. BayesDroid compares tainted data from a private information source to a network sink and employs probabilistic reasoning to classify the leak based on the similarity between the data at both points. While these approaches track data flow only within the Dalvik VM, other methods, such as DroidScope [47] and CopperDroid [41], perform full system emulation to inspect both Dalvik and native code for malware analysis. The recent TaintART extends TaintDroid to native code [40]. However, taint analysis approaches remain vulnerable to apps deliberately disrupting data flow. For example, ScrubDroid [36] discusses how dynamic taint analysis systems can be defeated by exploiting control dependencies (which related approaches typically do not track) or by writing and reading values through system commands or the file system.

More recently, research has focused on detecting privacy leaks at the network level, often through network traffic redirection using a virtual private network (VPN) tunnel. Tools like PrivacyGuard [39], AntMonitor [24], and Haystack [34] analyze traffic on-device using Android’s built-in `VPNService` but rely on hardcoded identifiers or simple text searches. Liu et al. [27] inspect network traffic at the ISP level, identifying private information leaks using keys generated from manual analysis and regular expressions. Encryption and obfuscation are outside the scope of their analysis, as the authors assume these are primarily concerns for malware. ReCon [35] is another VPN-based approach that uses a machine learning classifier to identify leaks and can handle simple obfuscation. Ultimately, its effectiveness depends on the training data, which can come from manual analysis and dynamic taint analysis tools. It could benefit from a technique like AGRIGENTO to address more complex obfuscation techniques.

Information leakage is not a new problem and is not unique to Android apps. Related work on desktop applications has focused on identifying accidental leaks of private information through differential analysis at the process level. TightLip [49] and Croft et al. [10] perform differential analysis on the output of two processes: one with access to private data and one without. Both consider timestamp-related information and random seeds as sources of non-determinism and share them between processes. Their primary goal is to prevent the accidental leakage of sensitive files, rather than obfuscated content. TightLip checks if the system call sequences and arguments diverge when the private input changes and raises an alarm if the output is sent to a network sink. In contrast, Croft et al. only allow the output of the process without access to private information to leave the internal company network. Privacy Oracle [23] is related to AGRIGENTO, as it identifies privacy leaks based on divergences in network traffic when private input sources are modified. However, it mainly addresses non-determinism at the OS level (using deterministic executions with OS snapshots) and does not consider non-determinism in network traffic. It cannot handle random tokens or encryption and produces false positives when messages in network flows are reordered between executions.

Shu et al. [37] propose a sequence alignment algorithm for detecting obfuscated leaks in files and network traffic, assigning scores based on the amount of private information they contain. While this approach focuses on obfuscated leaks, it does not address intentional or malicious leaks and only considers character replacement, string insertion, and data truncation.

In contrast to related work, we are the first to address the topic of obfuscation of privacy leaks to deal with adversaries—apps or ad libraries actively trying to hide their information leaks. Our evaluation shows that this is a realistic threat scenario and a common practice among popular mobile apps and ad libraries.

### Conclusion

We have shown that while many different approaches have been developed to detect privacy leaks in mobile apps, it remains relatively easy for app and ad library developers to hide their information leaks using various types of encoding, formatting, and cryptographic algorithms. This paper introduces AGRIGENTO, a new approach that is resilient to such obfuscations and, in fact, to any arbitrary transformation performed on the private information before it is leaked. AGRIGENTO works by performing differential black-box analysis on Android apps. We discussed the key challenges related to the non-determinism inherent in mobile app network traffic.

A key insight of this work is that non-determinism in network traffic can often be explained and removed. This observation allowed us to develop novel techniques to address the various sources of non-determinism and to conservatively flag any deviations in the network traffic as potential privacy leaks. In our evaluation on 1,004 Android apps, we showed that AGRIGENTO can detect privacy leaks that state-of-the-art approaches cannot, while incurring only a small number of false positives. We also identified interesting cases of custom and complex obfuscation techniques used by popular ad libraries to exfiltrate data without being detected by other approaches.

### Acknowledgements

We would like to thank our reviewers and our shepherd Matt Fredrikson for their valuable comments and input to improve our paper. We would also like to thank Jingjing Ren for her help comparing against ReCon, as well as Antonio Bianchi and David Choffnes for their insightful feedback. This work was supported in part by the MIUR FACE Project No. RBFR13AJFT. This material is also based upon work supported by the NSF under Award No. CNS-1408632, by SBA Research, and a Security, Privacy and Anti-Abuse award from Google. Any opinions, findings, and conclusions or recommendations expressed in this publication are those of the authors and do not necessarily reflect the views of the NSF, SBA Research, or Google. This material is also based on research sponsored by DARPA under agreement number FA8750-15-2-0084. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of DARPA or the U.S. Government.

### References

[1] “JustTrustMe,” https://github.com/Fuzion24/JustTrustMe.
[2] “mitmproxy,” https://mitmproxy.org.
[3] “UI/Application Exerciser Monkey,” https://developer.android.com/studio/test/monkey.html.
[4] “Xposed framework,” http://repo.xposed.info.
[5] V. Afonso, A. Bianchi, Y. Fratantonio, A. Doupe, M. Polino, P. de Geus, C. Kruegel, and G. Vigna, “Going Native: Using a Large-Scale Analysis of Android Apps to Create a Practical Native-Code Sandboxing Policy,” in Proc. of the ISOC Network and Distributed System Security Symposium (NDSS), 2016.
[6] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel, “FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps,” in Proc. of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2014.
[7] M. Beddoe, “The Protocol Informatics Project,” http://www.4tphi.net/~awalters/PI/PI.html, 2004.
[8] J. Bell and G. Kaiser, “Phosphor: Illuminating Dynamic Data Flow in Commodity JVMs,” in Proc. of the ACM International Conference on Object Oriented Programming Systems Languages and Applications (OOPSLA), 2014.
[9] Y. Cao, Y. Fratantonio, A. Bianchi, M. Egele, C. Kruegel, G. Vigna, and Y. Chen, “EdgeMiner: Automatically Detecting Implicit Control Flow Transitions through the Android Framework,” in Proc. of the ISOC Network and Distributed System Security Symposium (NDSS), 2015.
[10] J. Croft and M. Caesar, “Towards Practical Avoidance of Information Leakage in Enterprise Networks,” in Proc. of the USENIX Conference on Hot Topics in Security (HotSec), 2011.
[11] S. Dai, A. Tongaonkar, X. Wang, A. Nucci, and D. Song, “NetworkProfiler: Towards Automatic Fingerprinting of Android Apps,” in Proc. of the IEEE International Conference on Computer Communications (INFOCOM), 2013.
[12] G. Eisenhaur, M. N. Gagnon, T. Demir, and N. Daswani, “Mobile Malware Madness, and How to Cap the Mad Hatters. A Preliminary Look at Mitigating Mobile Malware,” in Black Hat USA (BH-US), 2011.
[13] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth, “TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones,” in Proc. of the USENIX Conference on Operating Systems Design and Implementation (OSDI), 2010.
[14] Federal Trade Commission, “FTC Approves Final Order Settling Charges Against Flashlight App Creator,” https://www.ftc.gov/news-events/press-releases/2014/04/ftc-approves-final-order-settling-charges-against-flashlight-app, April 2014.
[15] ——, “Two App Developers Settle FTC Charges They Violated Children’s Online Privacy Protection Act,” https://www.ftc.gov/news-events/press-releases/2015/12/two-app-developers-settle-ftc-charges-they-violated-childrens, December 2015.
[16] ——, “Mobile Advertising Network InMobi Settles FTC Charges It Tracked Hundreds of Millions of Consumers’ Locations Without Permission,” https://www.ftc.gov/news-events/press-releases/2016/06/mobile-advertising-network-inmobi-settles-ftc-charges-it-tracked, June 2016.
[17] P. Ferrara, O. Tripp, and M. Pistoia, “MorphDroid: Fine-grained Privacy Verification,” in Proc. of the Annual Computer Security Applications Conference (ACSAC), 2015.
[18] M. N. Gagnon, “Hashing IMEI numbers does not protect privacy,” http://blog.dasient.com/2011/07/hashing-imei-numbers-does-not-protect.html, 2011.
[19] C. Gibler, J. Crussell, J. Erickson, and H. Chen, “AndroidLeaks: Automatically Detecting Potential Privacy Leaks in Android Applications on a Large Scale,” in Proc. of the International Conference on Trust and Trustworthy Computing (TRUST), 2012.
[20] L. Gomez, I. Neamtiu, T. Azim, and T. Millstein, “RERAN: Timing-and Touch-Sensitive Record and Replay for Android,” in Proc. of the International Conference on Software Engineering (ICSE), 2013.
[21] Google, “AdMob Behavioral Policies,” https://support.google.com/admob/answer/2753860?hl=en, 2016.
[22] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall, “‘These Aren’t the Droids You’re Looking For’: Retrofitting Android to Protect Data from Imperious Applications,” in Proc. of the ACM Conference on Computer and Communications Security (CCS), 2011.
[23] J. Jung, A. Sheth, B. Greenstein, D. Wetherall, G. Maganis, and T. Kohno, “Privacy Oracle: A System for Finding Application Leaks with Black Box Differential Testing,” in Proc. of the ACM Conference on Computer and Communications Security (CCS), 2008.
[24] A. Le, J. Varmarken, S. Langhoff, A. Shuba, M. Gjoka, and A. Markopoulou, “AntMonitor: A System for Monitoring from Mobile Devices,” in Proc. of the ACM SIGCOMM Workshop on Crowdsourcing and Crowdsharing of Big Internet Data (C2BID), 2015.
[25] L. Li, A. Bartel, T. F. Bissyandé, J. Klein, Y. Le Traon, S. Arzt, S. Rasthofer, E. Bodden, D. Octeau, and P. McDaniel, “IccTA: Detecting Inter-Component Privacy Leaks in Android Apps,” in Proc. of the International Conference on Software Engineering (ICSE), 2015.
[26] M. Lindorfer, M. Neugschwandtner, L. Weichselbaum, Y. Fratantonio, V. van der Veen, and C. Platzer, “Andrubis - 1,000,000 Apps Later: A View on Current Android Malware Behaviors,” in Proc. of the International Workshop on Building Analysis Datasets and Gathering Experience Returns for Security (BADGERS), 2014.
[27] Y. Liu, H. H. Song, I. Bermudez, A. Mislove, M. Baldi, and A. Tongaonkar, “Identifying Personal Information in Internet Traffic,” in Proc. of the ACM Conference on Online Social Networks (COSN), 2015.
[28] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin, “Attacks on WebView in the Android System,” in Proc. of the Annual Computer Security Applications Conference (ACSAC), 2011.
[29] S. B. Needleman and C. D. Wunsch, “A General Method Applicable to Search for Similarities in Amino Acid Sequence of Two Proteins,” Journal of Molecular Biology, vol. 48, no. 3, pp. 443–453, 1970.
[30] T. Petsas, G. Voyatzis, E. Athanasopoulos, M. Polychronakis, and S. Ioannidis, “Rage Against the Virtual Machine: Hindering Dynamic Analysis of Android Malware,” in Proc. of the European Workshop on System Security (EuroSec), 2014.
[31] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna, “Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications,” 2014.
[32] V. Rastogi, Y. Chen, and W. Enck, “AppsPlayground: Automatic Security Analysis of Smartphone Applications,” in Proc. of the ACM Conference on Data and Application Security and Privacy (CODASPY), 2013.
[33] V. Rastogi, Z. Qu, J. McClurg, Y. Cao, Y. Chen, W. Zhu, and W. Chen, “Uranine: Real-time Privacy Leakage Monitoring without System Modification for Android,” in Proc. of the International Conference on Security and Privacy in Communication Networks (SecureComm), 2015.
[34] A. Razaghpanah, N. Vallina-Rodriguez, S. Sundaresan, C. Kreibich, P. Gill, M. Allman, and V. Paxson, “Haystack: In Situ Mobile Traffic Analysis in User Space,” arXiv preprint arXiv:1510.01419, 2015.
[35] J. Ren, A. Rao, M. Lindorfer, A. Legout, and D. Choffnes, “ReCon: Revealing and Controlling PII Leaks in Mobile Network Traffic,” in Proc. of the International Conference on Mobile Systems, Applications and Services (MobiSys), 2016.
[36] G. Sarwar, O. Mehani, R. Boreli, and M. A. Kaafar, “On the Effectiveness of Dynamic Taint Analysis for Protecting Against Private Information Leaks on Android-based Devices,” in Proc. of the International Conference on Security and Cryptography (SECRYPT), 2013.
[37] X. Shu, J. Zhang, D. D. Yao, and W. C. Feng, “Fast Detection of Transformed Data Leaks,” IEEE Transactions on Information Forensics and Security, vol. 11, no. 3, pp. 528–542, March 2016.
[38] R. Slavin, X. Wang, M. B. Hosseini, J. Hester, R. Krishnan, J. Bhatia, T. D. Breaux, and J. Niu, “Toward a Framework for Detecting Privacy Policy Violations in Android Application Code,” in Proc. of the International Conference on Software Engineering (ICSE), 2016.
[39] Y. Song and U. Hengartner, “PrivacyGuard: A VPN-based Platform to Detect Information Leakage on Android Devices,” in Proc. of the Annual ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM), 2015.
[40] M. Sun, T. Wei, and L. John, “TaintART: A Practical Multi-level Information-Flow Tracking System for Android RunTime,” in Proc. of the ACM Conference on Computer and Communications Security (CCS), 2016.
[41] K. Tam, S. J. Khan, A. Fattori, and L. Cavallaro, “CopperDroid: Automatic Reconstruction of Android Malware Behaviors,” in Proc. of the ISOC Network and Distributed System Security Symposium (NDSS), 2015.
[42] O. Tripp and J. Rubin, “A Bayesian Approach to Privacy Enforcement in Smartphones,” in Proc. of the USENIX Security Symposium, 2014.
[43] T. Vidas and N. Christin, “Evading Android Runtime Analysis via Sandbox Detection,” in Proc. of the ACM Symposium on Information, Computer and Communications Security (ASIACCS), 2014.
[44] F. Wei, S. Roy, X. Ou, and Robby, “Amandroid: A Precise and General Inter-component Data Flow Analysis Framework for Security Vetting of Android Apps,” in Proc. of the ACM Conference on Computer and Communications Security (CCS), 2014.
[45] G. Wondracek, P. Milani Comparetti, C. Kruegel, and E. Kirda, “Automatic Network Protocol Analysis,” in Proc. of the ISOC Network and Distributed System Security Symposium (NDSS), 2008.
[46] M. Xia, L. Gong, Y. Lyu, Z. Qi, and X. Liu, “Effective Real-time Android Application Auditing,” in Proc. of the IEEE Symposium on Security and Privacy (S&P), 2015.
[47] L. K. Yan and H. Yin, “DroidScope: Seamlessly Reconstructing the OS and Dalvik Semantic Views for Dynamic Android Malware Analysis,” in Proc. of the USENIX Security Symposium, 2012.
[48] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang, “AppIntent: Analyzing Sensitive Data Transmission in Android for Privacy Leakage Detection,” in Proc. of the ACM Conference on Computer and Communications Security (CCS), 2013.
[49] A. R. Yumerefendi, B. Mickle, and L. P. Cox, “TightLip: Keeping Applications from Spilling the Beans,” in Proc. of the USENIX Symposium on Networked Systems Design and Implementation (NSDI), 2007.
[50] C. Zuo, W. Wang, R. Wang, and Z. Lin, “Automatic Forgery of Cryptographically Consistent Messages to Identify Security Vulnerabilities in Mobile Services,” in Proc. of the ISOC Network and Distributed System Security Symposium (NDSS), 2016.