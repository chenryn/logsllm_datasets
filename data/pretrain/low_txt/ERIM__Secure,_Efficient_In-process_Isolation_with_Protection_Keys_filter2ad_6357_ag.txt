### Figure 3c Analysis

Figure 3c illustrates the throughput of NGINX when using lightweight contexts (lwCs) and emulated Enhanced Restricted Instruction Memory (ERIM), compared to a baseline without any protection. The results show that with lwCs, the throughput never exceeds 80% of the baseline, and for small files, where the switch rate is high, the throughput drops below 50%. In contrast, the throughput with emulated ERIM remains within 95% of the baseline for all file sizes.

In terms of switch rates, lwCs incur a cost of 10.5-18.3% for 100,000 switches per second across different file sizes. The actual ERIM switch overhead, as measured in a similar experiment in Section 6.2, is no more than 0.44% across all file sizes, which is two orders of magnitude lower than that of lwCs.

### Memory Safety (WebAssembly)

Finally, we compare the overheads of ERIM to those of full memory safety on untrusted code, specifically through the use of WebAssembly [21]. WebAssembly is a memory-safe, low-level language supported natively by all major web browsers and is expected to replace existing Software Fault Isolation (SFI) techniques like Native Client in the Chrome web browser.

We re-compiled the (untrusted) SQLite library to WebAssembly using emscripten v1.37.37's WebAssembly backend [5] and ran it within Node.js, which supports the language. According to the tests in Table 5, the overhead of using WebAssembly varies from 81% to 193%, which is one to two orders of magnitude higher than ERIM’s overhead.

### Emulating ERIM’s Switch Cost

To emulate ERIM’s switch cost when comparing to VMFUNC and lwCs, we needed to simulate the cost of a WRPKRU instruction, which is not natively supported in the environments of those experiments. We achieved this by using XOR instructions to consume the appropriate number of CPU cycles, followed by RDTSCP, which causes a pipeline stall and prevents instruction re-ordering. Specifically, we executed a loop five times with the following sequence: `xor eax, ecx; xor ecx, eax; xor eax, ecx`, followed by a single RDTSCP after the loop.

To validate the emulation, we re-ran the SPEC CPU 2006 benchmark with CPI/CPS (Section 6.4) after replacing actual WRPKRU instructions with the emulation sequence. In each individual test, the difference in overhead between actual ERIM and the emulation was below 2%. It is important to note that perfectly precise emulation is impossible, as emulation cannot exactly reproduce the effects of WRPKRU on the execution pipeline (WRPKRU must prevent the reordering of loads and stores with respect to itself). Depending on the specific benchmark, our emulation slightly over- or underestimates the actual performance impact of WRPKRU. We also observed that emulations of WRPKRU using LFENCE or MFENCE (the latter suggested by [30]) in place of RDTSCP incurred too little or too much overhead, respectively.

### Conclusion

By leveraging the recent Intel Memory Protection Keys (MPK) ISA extension and simple binary inspection, ERIM provides hardware-enforced isolation with an overhead of less than 1% for every 100,000 switches per second between components on current Intel CPUs, and almost no overhead on execution within a component. ERIM’s switch cost is up to two orders of magnitude lower than that of kernel page-table-based isolation and up to 3-5x lower than that of VMFUNC-based isolation. For VMFUNC, virtualization can cause additional overhead on syscalls and page table walks. ERIM’s overall overhead is lower than that of isolation based on memory bounds checks (with Intel MPX), even at switch rates of the order of 10^6/s. Additionally, such techniques require control-flow integrity to provide strong security, which has its own overhead. ERIM’s comparative advantage is particularly significant for applications that switch very rapidly and spend a non-trivial fraction of time in untrusted code.

### Acknowledgements

We thank the anonymous reviewers, our shepherd Tom Ritter, Bobby Bhattacharjee, and Mathias Payer for their feedback, which helped improve this paper. This work was supported in part by the European Research Council (ERC Synergy imPACT 610150) and the German Science Foundation (DFG CRC 1223).

### References

[1] https://www.sqlite.org.
[2] https://nodejs.org.
[3] https://httpd.apache.org/docs/2.4/programs/ab.html.
[4] https://www.sqlite.org/testing.html.
[5] https://github.com/kripken/emscripten.
[6] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. Control-flow integrity. In Proceedings of ACM SIGSAC Conference on Computer and Communications Security (CCS), 2005.
[7] ARM Limited. Developer guide: ARM memory domains. http://infocenter.arm.com/help/, 2001.
[8] ARM Limited. ARM Security Technology. http://infocenter.arm.com/help/topic/com.arm.doc.prd29-genc-009492c/PRD29-GENC-009492C_trustzone_security_whitepaper.pdf, 2009.
[9] Adam Belay, Andrea Bittau, Ali Mashtizadeh, David Terei, David Mezières, and Christos Kozyrakis. Dune: Safe user-level access to privileged CPU features. In Proceedings of USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2012.
[10] Andrea Bittau and Petr Marchenko. Wedge: Splitting applications into reduced-privilege compartments. In Proceedings of Networked System Design and Implementation (NSDI), 2008.
[11] Nathan Burow, Xinping Zhang, and Mathias Payer. SoK: Shining Light On Shadow Stacks. In Proceedings of IEEE Symposium on Security and Privacy (Oakland), 2019.
[12] Scott A. Carr and Mathias Payer. Datashield: Configurable data confidentiality and integrity. In Proceedings of ACM ASIA Conference on Computer and Communications Security (AsiaCCS), 2017.
[13] Yaohui Chen, Sebassujeen Reymondjohnson, Fine-Zhichuang Sun, and Long Lu. Grained Execution Units with Private Memory. In Proceedings of IEEE Symposium on Security and Privacy (Oakland), 2016.
[14] Nathan Dautenhahn, Theodoros Kasampalis, Will Dietz, John Criswell, and Vikram Adve. Nested kernel: An operating system architecture for intra-kernel privilege separation. In Proceedings of ACM Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2015.
[15] Dyninst. Dyninst: An application program interface (API) for runtime code generation. http://www.dyninst.org.
[16] Isaac Evans, Sam Fingeret, Julian Gonzalez, Ulziibayar Otgonbaatar, Tiffany Tang, Howard Shrobe, Stelios Sidiroglou-Douskos, Martin Rinard, and Hamed Okhravi. Missing the point(er): On the effectiveness of code pointer integrity. In Proceedings of IEEE Symposium on Security and Privacy (Oakland), 2015.
[17] Tommaso Frassetto, David Gens, Christopher Liebchen, and Ahmad-Reza Sadeghi. JITGuard: Hardening just-in-time compilers with SGX. In Proceedings of ACM SIGSAC Conference on Computer and Communications Security (CCS), 2017.
[18] Tommaso Frassetto, Patrick Jauernig, Christopher Liebchen, and Ahmad-Reza Sadeghi. IMIX: In-process memory isolation extension. In Proceedings of USENIX Security Symposium, 2018.
[19] Enes Göktas, Robert Gawlik, Benjamin Kollenda, Elias Athanasopoulos, Georgios Portokalidis, Cristiano Giuffrida, and Herbert Bos. Undermining Information Hiding (and What to Do about It). In Proceedings of USENIX Security Symposium, 2016.
[20] Le Guan, Jingqiang Lin, Bo Luo, Jiwu Jing, and Jing Wang. Protecting private keys against memory disclosure attacks using hardware transactional memory. In Proceedings of IEEE Symposium on Security and Privacy (Oakland), 2015.
[21] Andreas Haas, Andreas Rossberg, Derek L. Schuff, Ben L. Titzer, Michael Holman, Dan Gohman, Luke Wagner, Alon Zakai, and J. F. Bastien. Bringing the web up to speed with WebAssembly. In Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2017.
[22] Mohammad Hedayati, Spyridoula Gravani, Ethan Johnson, John Criswell, Michael Scott, Kai Shen, and Mike Marty. Hodor: Intra-Process Isolation for High-Throughput Data Plane Libraries. In Proceedings of USENIX Annual Technical Conference (ATC), 2019.
[23] Andrei Homescu, Stefan Brunthaler, Per Larsen, and Michael Franz. librando: Transparent Code Randomization for Just-in-Time Compilers. In Proceedings of ACM SIGSAC Conference on Computer and Communications Security (CCS), 2013.
[24] Terry Ching-Hsiang Hsu, Kevin Hoffman, Patrick Eugster, and Mathias Payer. Enforcing least privilege memory views for multithreaded applications. In Proceedings of ACM SIGSAC Conference on Computer and Communications Security (CCS), 2016.
[25] Ralf Hund, Carsten Willems, and Thorsten Holz. Practical timing side channel attacks against kernel space ASLR. In Proceedings of IEEE Symposium on Security and Privacy (Oakland), 2013.
[26] Intel Corporation. Memory Protection Extensions (Intel MPX). https://software.intel.com/en-us/isa-extensions/intel-mpx.
[27] Intel Corporation. Software Guard Extensions Programming Reference. https://software.intel.com/sites/default/files/managed/48/88/329298-002.pdf, 2014.
[28] Intel Corporation. Intel(R) 64 and IA-32 Architectures Software Developer’s Manual, 2016. https://software.intel.com/en-us/articles/intel-sdm.
[29] Kernel.org. SECure COMPuting with filters. https://www.kernel.org/doc/Documentation/prctl/seccomp_filter.txt, 2017.
[30] Koen Koning, Xi Chen, Herbert Bos, Cristiano Giuffrida, and Elias Athanasopoulos. No Need to Hide: Protecting Safe Regions on Commodity Hardware. In Proceedings of ACM European Conference on Computer Systems (EuroSys), 2017.
[31] Volodymyr Kuznetsov, László Szekeres, and Mathias Payer. Code-pointer integrity. In Proceedings of USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2014.
[32] Hojoon Lee, Chihyun Song, and Brent Byunghoon Kang. Lord of the x86 rings: A portable user mode privilege separation architecture on x86. In Proceedings of ACM SIGSAC Conference on Computer and Communications Security (CCS), 2018.
[33] James Litton, Anjo Vahldiek-Oberwagner, Eslam Elnikety, Deepak Garg, Bobby Bhattacharjee, and Peter Druschel. Light-Weight Contexts: An OS Abstraction for Safety and Performance. In Proceedings of USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2016.
[34] Yutao Liu, Tianyu Zhou, Kexin Chen, Haibo Chen, and Yubin Xia. Thwarting Memory Disclosure with Efficient Hypervisor-enforced Intra-domain Isolation. In Proceedings of ACM SIGSAC Conference on Computer and Communications Security (CCS), 2015.
[35] Kangjie Lu, Chengyu Song, Byoungyoung Lee, Simon P. Chung, Taesoo Kim, and Wenke Lee. ASLR-Guard: Stopping Address Space Leakage for Code Reuse Attacks. In Proceedings of ACM SIGSAC Conference on Computer and Communications Security (CCS), 2015.
[36] Jonathan M. McCune, Yanlin Li, Ning Qu, Zongwei Zhou, Anupam Datta, Virgil Gligor, and Adrian Perrig. Trustvisor: Efficient TCB reduction and attestation. In Proceedings of IEEE Symposium on Security and Privacy (Oakland), 2010.
[37] MITRE. CVE-2014-0160. https://nvd.nist.gov/vuln/detail/CVE-2014-0160, 2014.
[38] Lucian Mogosanu, Ashay Rane, and Nathan Dautenhahn. MicroStache: A Lightweight Execution Context for In-Process Safe Region Isolation. In Proceedings of International Symposium on Research in Attacks, Intrusions, and Defenses (RAID), 2018.
[39] Angelos Oikonomopoulos, Elias Athanasopoulos, Herbert Bos, and Cristiano Giuffrida. Poking Holes in Information Hiding. In Proceedings of USENIX Security Symposium, 2016.
[40] Oleksii Oleksenko, Dmitrii Kuvaiskii, Pramod Bhatotia, Pascal Felber, and Christof Fetzer. Intel MPX Explained: A Cross-layer Analysis of the Intel MPX System Stack. In Proceedings of ACM SIGMETRICS Conference on Measurement and Analysis of Computing Systems (ACM Sigmetrics), 2018.
[41] Soyeon Park, Sangho Lee, Wen Xu, Hyungon Moon, and Taesoo Kim. libmpk: Software abstraction for Intel Memory Protection Keys (Intel MPK). In Proceedings of USENIX Annual Technical Conference (ATC), 2019.
[42] David Sehr, Robert Muth, Cliff Biffle, Victor Khimenko, Egor Pasko, Karl Schimpf, Bennet Yee, and Brad Chen. Adapting software fault isolation to contemporary CPU architectures. In Proceedings of USENIX Security Symposium, 2010.
[43] Hovav Shacham, Matthew Page, Ben Pfaff, Eu-Jin Goh, Nagendra Modadugu, and Dan Boneh. On the effectiveness of address-space randomization. In Proceedings of ACM SIGSAC Conference on Computer and Communications Security (CCS), 2004.
[44] Monirul I. Sharif, Wenke Lee, Weidong Cui, and Andrea Lanzi. Secure in-VM monitoring using hardware virtualization. In Proceedings of ACM SIGSAC Conference on Computer and Communications Security (CCS), 2009.
[45] Lei Shi, Yuming Wu, Yubin Xia, Nathan Dautenhahn, Haibo Chen, Binyu Zang, Haibing Guan, and Jinming Li. Deconstructing Xen. In Proceedings of Network and Distributed System Security Symposium (NDSS), 2017.
[46] The Clang Team. Clang 5 documentation: Safestack. http://clang.llvm.org/docs/SafeStack.html, 2017.
[47] Robert Wahbe, Steven Lucco, Thomas E. Anderson, and Susan L. Graham. Efficient software-based fault isolation. In Proceedings of ACM Symposium on Operating Systems Principles (SOSP), 1993.
[48] Wikimedia Foundation. Static HTML dump. http://dumps.wikimedia.org/, 2008.
[49] Wikimedia Foundation. Page view statistics April 2012. http://dumps.wikimedia.org/other/pagecounts-raw/2012/2012-04/, 2012.
[50] Chris Wright, Crispin Cowan, Stephen Smalley, James Morris, and Greg Kroah-Hartman. Linux security modules: General security support for the Linux kernel. In Proceedings of USENIX Security Symposium, 2002.