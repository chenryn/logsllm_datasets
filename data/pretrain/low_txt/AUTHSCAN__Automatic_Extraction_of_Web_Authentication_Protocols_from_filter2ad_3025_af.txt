### Verification Time and Protocol Size

In our case studies, the verification time for ProVerif was consistently within one minute. This indicates that the security-relevant parts of the generated protocols are typically small. We observed that additional source code reduces the number of iterations in our blackbox fuzzing step. For instance, in BrowserID, the availability of client-side code results in fewer fuzzing iterations (20-30 rounds) compared to other SSO protocols (30-500 rounds, as shown in Table 2, sixth column). Our data also shows that AUTHSCAN’s protocol extraction step is sufficient to identify flaws even when much of the protocol implementation is unavailable, as demonstrated in the Facebook case.

### Redundant Data Reduction

When querying off-the-shelf verification tools like ProVerif, it is crucial to remove redundant terms to improve scalability. As shown in Table 2, AUTHSCAN finds that more than 80% of messages and over 50% of HTTP parameters are irrelevant to the protocol, and it successfully filters them out. This demonstrates the utility of an automatic tool in constructing models from complex implementation details. Additionally, this reduction significantly decreases the verification time. For BrowserID, ProVerif does not terminate within one hour if all communication terms are retained. In summary, we find that AUTHSCAN offers promising scalability for real-world security protocol implementations.

### Related Work

#### Protocol Specification & Verification

Security protocol verification has been extensively studied in the literature. Various logics and calculi have been proposed to formally specify security protocols and properties, such as BAN logic [13, 21], WL model [44], and Spi-calculus [12]. Several automatic verification tools, including Athena [37], ProVerif [18], Murphi [34], and AVISPA [10], have been developed to check the correctness of security protocols. These works focus on verifying high-level specifications of security protocols. In contrast, our approach focuses on extracting high-level protocol specifications from implementations.

#### Protocol Extraction

Research on automatically extracting models from protocol implementations is most relevant to our work. Lie et al. [30] proposed a method to automatically extract specifications from protocol code using program slicing, verified by the Murphi tool. Aizatulin et al. [14] used symbolic execution for model extraction. These works extract protocol specifications from source code, while our approach does not assume the availability of source code and employs blackbox fuzzing to infer semantics when the source code is not available.

#### Security Analysis on SSO Protocols

Extensive research has been conducted to manually analyze the security of SSO protocols. By reverse engineering client implementations, Hanna et al. [27] revealed that some SSO protocols, including Facebook Connect and Google Friend Connect, use the cross-domain communication channel (postMessage) insecurely. E. Tsyrklevich and V. Tsyrklevich [40] demonstrated several attacks, such as CSRF, against the OpenID protocol. Wang et al. [42] conducted a field study on commercially deployed web SSO systems and discovered eight serious logic flaws in notable IDPs and SPs. Xing et al. [45] attempted to protect integrators for their integration of third-party SSO web services.

Formal analysis approaches have also been used to analyze the security of SSO protocols. Miculan and Urban [33] manually extracted the specification of the Facebook Connect Protocol from exchanged HTTP messages, modeled it in HLSPL, and checked it using AVISPA. Bansal et al. [17] used applied pi-calculus and ProVerif to analyze the OAuth 2.0 protocol, focusing on constructing concrete attacks from attack traces and building the WebSpi library to map attack traces to website actions. Sun et al. [39] manually extracted the OpenID 2.0 implementation in HLPSL, verified the model using AVISPA, and found CSRF attacks. Most formal analysis approaches model protocols manually based on documentation or specifications and consider only network attack models. For example, there have been several formal analyses of SAML SSO protocols [16, 26, 28]. In contrast, AUTHSCAN identifies security flaws in implementations.

### Conclusion

We present AUTHSCAN, an end-to-end platform to automatically recover authentication protocol specifications from their implementations. AUTHSCAN has successfully detected seven security vulnerabilities in real-world applications. Our techniques require no prior knowledge of the protocol specifications and rely on a small set of practical assumptions. We hope further research will lead to tools that can recover and check complex security protocols at the lowest level of their implementation details.

### Acknowledgments

We thank our shepherd Venkat Venkatakrishnan and the anonymous reviewers for their insightful comments to improve this manuscript. We also thank Matthew Finifter, Joel Weinberger, Jun Pang, Yacin Nadji, Joseph Hong, Bodhisatta Roy, and Mayank Dhiman for their helpful feedback and comments. This research is partially supported by research grant R-252-000-495-133 from the Ministry of Education, Singapore, for the projects "Automatic Checking and Verification of Security Protocol Implementations" and "Research and Development in the Formal Verification of System Design and Implementation."

### References

[1] AUTHSCAN. https://sites.google.com/site/ndss2013/
[2] BrowserID. https://wiki.mozilla.org/Identity/BrowserID
[3] Facebook Connect Authentication. http://developers.facebook.com/docs/authentication/
[4] Node.js Manual & Documentation v0.8.14. http://nodejs.org/api/crypto.html
[5] What is OpenID. http://openid.net/get-an-openid/what-is-openid/
[6] Windows Live Messenger Connect, Version 4.1. http://msdn.microsoft.com/en-us/library/ff749458.aspx
[7] Facebook Connect Used By 250 Million People Per Month. http://allfacebook.com/facebook-connect-used-by-250-million-people-per-month b25501, Dec. 8, 2010.
[8] Security Vulnerability Allegedly Discovered in Dropbox Client. http://news.softpedia.com/news/Design-Security-Flaw-Allegedly-Discovered-in-Dropbox-Client-194427.shtml, Apr. 11, 2011.
[9] Mozilla jwcrypto. https://github.com/mozilla/jwcrypto, May 13, 2012.
[10] The AVISPA project homepage. http://www.avispa-project.org/, May 13, 2012.
[11] Wolfram alpha. http://www.wolframalpha.com/, May 13, 2012.
[12] M. Abadi and A. D. Gordon. A Calculus for Cryptographic Protocols: The spi Calculus. Information and Computation, 148(1):1–70, 1999.
[13] M. Abadi and M. R. Tuttle. A Semantics for A Logic of Authentication (Extended Abstract). In PODC, pages 201–216, 1991.
[14] M. Aizatulin, A. D. Gordon, and J. Jürjens. Extracting and Verifying Cryptographic Models from C Protocol Code by Symbolic Execution. In CCS, pages 331–340, 2011.
[15] D. Akhawe, A. Barth, P. E. Lam, J. Mitchell, and D. Song. Towards a Formal Foundation of Web Security. In CSF, pages 290–304, 2010.
[16] A. Armando, R. Carbone, L. Compagna, J. Cuellar, and L. Tobarra. Formal Analysis of SAML 2.0 Web Browser Single Sign-On: Breaking the SAML-based Single Sign-On for Google Apps. In FMSE, pages 1–10, 2008.
[17] C. Bansal, K. Bhargavan, and S. Maffeis. Discovering Concrete Attacks on Website Authorization by Formal Analysis. In CSF, pages 247–262, 2012.
[18] B. Blanchet. An Efficient Cryptographic Protocol Verifier Based on Prolog Rules. In CSFW, pages 82–96, 2001.
[19] B. Blanchet. Computationally Sound Mechanized Proofs of Correspondence Assertions. In CSF, pages 97–111, 2007.
[20] B. Blanchet and A. Chaudhuri. Automated Formal Analysis of a Protocol for Secure File Sharing on Untrusted Storage. In S&P, pages 417–431, 2008.
[21] M. Burrows, M. Abadi, and R. Needham. A Logic of Authentication. ACM Transactions On Computer Systems, 8:18–36, 1990.
[22] C. J. Cremers. The Scyther Tool: Verification, Falsification, and Analysis of Security Protocols. In CAV, pages 414–418, 2008.
[23] G. Delzanno and P. Ganty. Automatic Verification of Time Sensitive Cryptographic Protocols. In TACAS, pages 342–356, 2004.
[24] D. Dolev and A. Yao. On the Security of Public Key Protocols. IEEE Transactions on Information Theory, 29:198–208, 1983.
[25] D. E. Hammer-Lahav and D. Hardt. The OAuth2.0 Authorization Protocol. 2011. IETF Internet Draft.
[26] T. Gross. Security Analysis of the SAML Single Sign-On Browser/Artifact Profile. In ACSAC, pages 298 – 307, 2003.
[27] S. Hanna, E. C. R. Shinz, D. Akhawe, A. Boehmz, P. Saxena, and D. Song. The Emperor’s New API: On the (In)Secure Usage of New Client Side Primitives. In W2SP, 2010.
[28] S. M. Hansen, J. Skriver, and H. R. Nielson. Using Static Analysis to Validate the SAML Single Sign-On Protocol. In WITS, pages 27–40, 2005.
[29] S. Juraj, M. Andreas, S. Jörg, K. Marco, and J. Meiko. On Breaking SAML: Be Whoever You Want to Be. In USENIX Security, 2012.
[30] D. Lie, A. Chou, D. Engler, and D. L. Dill. A Simple Method for Extracting Models for Protocol Code. In ISCA, pages 192–203, 2001.
[31] G. Lowe. Breaking and Fixing the Needham-Schroeder Public-Key Protocol Using FDR. In TACAS, pages 147–166, 1996.
[32] G. Lowe. A Hierarchy of Authentication Specifications. In CSFW, pages 31–43, 1997.
[33] M. Miculan and C. Urban. Formal Analysis of Facebook Connect Single Sign-On Authentication Protocol. In SOFSEM, pages 99–116, 2011.
[34] J. C. Mitchell, M. Mitchell, and U. Stern. Automated Analysis of Cryptographic Protocols Using Murphi. pages 141–151. IEEE Computer Society Press, 1997.
[35] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song. A Symbolic Execution Framework for JavaScript. In S&P, pages 513–528, 2010.
[36] P. Saxena, S. Hanna, P. Poosankam, and D. Song. FLAX: Systematic Discovery of Client-side Validation Vulnerabilities in Rich Web Applications. In NDSS, 2010.
[37] D. X. Song. Athena: A New Efficient Automatic Checker for Security Protocol Analysis. In CSFW, pages 192–202, 1999.
[38] J. Sun, Y. Liu, J. S. Dong, and J. Pang. PAT: Towards Flexible Verification under Fairness. In CAV, pages 709–714, 2009.
[39] S.-T. Sun, K. Hawkey, and K. Beznosov. Systematically Breaking and Fixing OpenID Security: Formal Analysis, Semi-Automated Empirical Evaluation, and Practical Countermeasures. Computers & Security, 31:465–483, 2012.
[40] E. Tsyrklevich and V. Tsyrklevich. Single Sign-On for the Internet: A Security Story. In BlackHat, July 2007.
[41] D. Wagner and B. Schneier. Analysis of the SSL 3.0 protocol. In WOEC, volume 2, pages 29–40, 1996.
[42] R. Wang, S. Chen, and X. Wang. Signing Me onto Your Accounts through Facebook and Google: a Traffic-Guided Security Study of Commercially Deployed Single-Sign-On Web Services. In S&P, pages 365–379, 2012.
[43] T. Wang, T. Wei, G. Gu, and W. Zou. TaintScope: A Checksum-Aware Directed Fuzzing Tool for Automatic Software Vulnerability Detection. In S&P, May 2010.
[44] T. Y. C. Woo and S. S. Lam. A Semantic Model for Authentication Protocols. In S&P, pages 178–194, 1993.
[45] L. Xing, Y. Chen, X. Wang, and S. Chen. InteGuard: Toward Automatic Protection of Third-Party Web Service Integrations. In NDSS, 2013.

### Appendix A: Termination of Algorithm 1

We informally argue why Algorithm 1 terminates. First, since AUTHSCAN uses only one trace \( t \) as the basis to generate the \( \text{ProSet} \), which has a fixed number of local protocols and free variables, the newly generated traces in the fuzzing step do not generate new local protocols and variables but infer more TML terms over these variables and add new actions. Second, for each HTTP data, AUTHSCAN generates two probes: one where the data is removed and the other where the data is mutated. Thus, for a message containing \( N \) HTTP data elements, only \( 2N \) probes are generated. Third, after each iteration (steps 4-9), the number of inferred variables is monotonically non-increasing; we can only remove certain variables as redundant data. Finally, by bounding the nesting function depth and the number of traces in \( \text{trPool} \), all searches and fuzzing operate over a finite state and must terminate.

### Appendix B: Protocol Extraction

#### B.1 Extracting BrowserID Protocol

In this section, we detail the process of analyzing myfavoritebeer.org to demonstrate how AUTHSCAN extracts a model from the implementation. As shown in Figure 5, the traces captured by AUTHSCAN are listed in the first two columns, and the corresponding TML statements inferred are placed in the third column.

- **From Message (4)**: Through white-box analysis, AUTHSCAN infers that `spkUser` and `spkUser-1` are an asymmetric key pair generated by the function `generateKeypair()`.
- **From Message (2)**: AUTHSCAN infers the HTTP parameter `csrf` as a nonce. It also associates the user name (USER) and password (PWD) to represent that they should be matching.
- **From Message (5)**: The HTTP parameter `cert` is encoded as a JSON Web Token (JWT) with each segment separated by a period (`.`) and encoded with Base64 encoding (as described in Section 4.2). When applying the signature verification algorithm RSA over one of the segments (the brute-force search as discussed in Section 4.2), AUTHSCAN figures out the structure and content of the JWT.