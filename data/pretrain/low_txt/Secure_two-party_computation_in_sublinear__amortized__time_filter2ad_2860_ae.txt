### Figure 6: Single ORAM Lookup Times for Different Database Sizes and Item Data Lengths

- **Database Sizes:**
  - 65,536
  - 131,072
  - 262,144
  - 524,288

- **Item Data Size (bits):**
  - 128
  - 256
  - 512
  - 1024
  - 2048

- **Lookup Times (in milliseconds):**
  - 160
  - 140
  - 120
  - 100
  - 80
  - 60
  - 40
  - 20
  - 0

### 5.2 Discussion

#### Memory Constraints
Memory is the primary limitation in scaling the computation to larger values of \( N \). For a linear scan, the circuit description size exceeds 23 gigabytes with 850 million wires when \( N = 2^{19} \) and data elements are 512 bits. The pipelining technique by Huang et al. [10] reduces the need for parties to store all 23 gigabytes in RAM. However, the client still stores an 80-bit secret key for each wire, and the server stores two, requiring 8.5 gigabytes for the client and 17 gigabytes for the server. This memory requirement far exceeds the data itself, which is only 512N = 33 megabytes.

In contrast, our protocol's largest circuit for \( N = 2^{19} \) and data size 512 bits is less than 50 megabytes, containing about 1 million wires. Each level of the data storage has a factor of \( 4 \log N \) overhead (with a bucket size of \( 2 \log N \)), so the server storage for the top level alone is more than \( 40,000N = 2.5 \) gigabytes. This explains why we encountered issues during pre-processing. To handle larger scales, we need to improve memory management while inserting elements into the ORAM structure.

#### Pre-processing
We have not calculated the time required for secure pre-processing. In our experiments, we populated the ORAM structure by randomly placing items in the trees, which is insecure as the server knows the item locations. A secure method would involve interactive insertion, such as performing the "write" protocol inside a secure computation for each item. Estimating the time to insert \( 2^{16} \) elements of 512 bits each, using 13 seconds per write operation, would take almost 20 days. We leave the problem of finding a more efficient method for data insertion to future work. One approach could be to start with smaller structures and double their size securely as insertion progresses. Our pre-processing is fully secure in a three-party model, where the database owner pre-processes the data and transfers it to a semi-honest third party for secure computation.

#### The Recursion Parameter
In our experiments, we set \( r = 16 \), meaning each item in tree \( i > 1 \) stores the leaf nodes of 16 items from tree \( i - 1 \). This parameter can be adjusted, potentially impacting performance. We investigated the choice of recursion depth, and Table 1 shows that the best performance occurs when the bottom level, which requires a linear scan, holds fewer than \( 2^{12} \) items. Further recursion beyond this point does not significantly improve performance.

| DB Size | 2 Trees | 3 Trees | 4 Trees | 5 Trees |
|---------|---------|---------|---------|---------|
| \( 2^{20} \) | 35 | 20 | 12.5 | 14 |
| \( 2^{19} \) | 11.5 | 9.5 | 12.5 | 12.5 |
| \( 2^{18} \) | 9.5 | 13 | - | - |

- **Bottom Level Items:**
  - \( 2^{N-4i+4} \) for \( i \) trees.

#### Counting Gates
Let \( N \) be the number of elements, \( d \) the length of each element, and \( B \) the bucket size of each node. We calculate the number of non-XOR gates in the garbled circuits of our ORAM operations. For the top-level tree, a lookup checks \( \log N \) nodes along the path to the leaf associated with the searched item. Each node contains \( B \) elements of size \( \log N + d \). We use approximately 1 non-XOR gate for each, resulting in \( B \log N (\log N + d) \) non-free gates for a single lookup. The eviction process scans \( 2 \log N \) nodes, requiring \( 6B \log N (\log N + d) \) non-free gates, totaling \( 7B \log N (\log N + d) \) non-free gates for each ORAM operation in the top-level tree. Lower-level trees have fewer elements, but the top-level tree dominates the computation. Table 2 provides concrete numbers for different database sizes with \( B = 2 \log N \) and \( d = 512 \).

| DB Size | XOR Gates | Non-free Gates | Wires |
|---------|-----------|----------------|-------|
| \( 2^{20} \) | 19,159,883 | 3,730,546 | 44,039,222 |
| \( 2^{19} \) | 16,519,818 | 3,166,420 | 37,656,448 |
| \( 2^{18} \) | 14,219,281 | 2,700,966 | 30,941,947 |
| \( 2^{17} \) | 12,185,264 | 2,302,208 | 27,366,108 |
| \( 2^{16} \) | 10,377,527 | 1,954,042 | 23,655,368 |

### 6. Using Other ORAM Schemes
In our protocol, we instantiated and optimized our generic construction using the tree-based ORAM scheme from [19]. However, other oblivious RAM schemes, such as those involving pseudorandom shuffling and Cuckoo hashing, were considered but found to be more complex in the context of two-party computation. For example, Goldreich and Ostrovsky's ORAM [7] uses a pseudorandom function (PRF) for address mapping and a joint shuffling procedure, both of which are inefficient in secure two-party computation. More recent ORAM solutions [18, 8, 9, 13] rely on cuckoo hashing, which also involves PRF computations and building cuckoo graphs, leading to prohibitive performance hits.

### 7. Conclusion
Our work presents efficient protocols for secure two-party computation, achieving only a small polylogarithmic overhead over the running time of the insecure version. This is a significant asymptotic improvement over traditional generic secure computation techniques, which inherently impose at least linear overhead. Our protocols rely on any underlying oblivious RAM and generic two-party computation protocols. We implemented a protocol that performs a single access to a database of \( 2^{18} \) elements, outperforming basic secure computation by a factor of 60 and improving binary search running time by three-fold. Our work also highlights the implementation details of ORAM and secure computation.

### Acknowledgments
This work was supported in part by NSF and DARPA.

### References
[1] D. Beaver. Precomputing oblivious transfer. In Advances in Cryptology — Crypto ’95, volume 963 of LNCS, pages 97–109. Springer, 1995.
[2] S.G. Choi, J. Katz, R. Kumaresan, and H.-S. Zhou. On the security of the free-XOR technique. In 9th Theory of Cryptography Conference — TCC 2012, volume 7194 of LNCS, pages 39–53. Springer, 2012.
[3] I. Damgård, S. Meldgaard, and J. B. Nielsen. Perfectly secure oblivious RAM without random oracles. In 8th Theory of Cryptography Conference — TCC 2011, volume 6597 of LNCS, pages 144–163. Springer, 2011.
[4] S. Even, O. Goldreich, and A. Lempel. A randomized protocol for signing contracts. Comm. ACM, 28(6):637–647, 1985.
[5] O. Goldreich. Foundations of Cryptography. Volume I: Basic Tools. Cambridge University Press, 2001.
[6] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game, or a completeness theorem for protocols with honest majority. In 19th Annual ACM Symposium on Theory of Computing (STOC), pages 218–229. ACM Press, 1987.
[7] O. Goldreich and R. Ostrovsky. Software protection and simulation on oblivious RAMs. J. ACM, 43(3):431–473, 1996.
[8] M. T. Goodrich and M. Mitzenmacher. Privacy-preserving access of outsourced data via oblivious RAM simulation. In 38th Intl. Colloquium on Automata, Languages, and Programming (ICALP), Part II, volume 6756 of LNCS, pages 576–587. Springer, 2011.
[9] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and R. Tamassia. Privacy-preserving group data access via stateless oblivious RAM simulation. In 22nd Annual ACM-SIAM Symposium on Discrete Algorithms (SODA), pages 157–167. ACM-SIAM, 2011.
[10] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster secure two-party computation using garbled circuits. In 20th USENIX Security Symposium, 2011.
[11] Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Extending oblivious transfers efficiently. In Advances in Cryptology — Crypto 2003, volume 2729 of LNCS, pages 145–161. Springer, 2003.
[12] V. Kolesnikov and T. Schneider. Improved garbled circuit: Free XOR gates and applications. In 35th Intl. Colloquium on Automata, Languages, and Programming (ICALP), Part II, volume 5126 of LNCS, pages 486–498. Springer, 2008.
[13] E. Kushilevitz, S. Lu, and R. Ostrovsky. On the (in)security of hash-based oblivious RAM and a new balancing scheme. In 23rd Annual ACM-SIAM Symposium on Discrete Algorithms (SODA), pages 143–156. ACM-SIAM, 2012.
[14] Y. Lindell and B. Pinkas. A proof of security of Yao’s protocol for two-party computation. Journal of Cryptology, 22(2):161–188, 2009.
[15] L. Malka and J. Katz. VMCrypt — modular software architecture for scalable secure computation. Available at http://eprint.iacr.org/2010/584.
[16] M. Naor and B. Pinkas. Efficient oblivious transfer protocols. In 12th Annual ACM-SIAM Symposium on Discrete Algorithms (SODA), pages 448–457. ACM-SIAM, 2001.
[17] R. Ostrovsky and V. Shoup. Private information storage. In 29th Annual ACM Symposium on Theory of Computing (STOC), pages 294–303. ACM Press, May 1997.
[18] B. Pinkas and T. Reinman. Oblivious RAM revisited. In Advances in Cryptology — Crypto 2010, volume 6223 of LNCS, pages 502–519. Springer, 2010.
[19] E. Shi, T.-H. H. Chan, E. Stefanov, and M. Li. Oblivious RAM with o((log n)3) worst-case cost. In Advances in Cryptology — Asiacrypt 2011, volume 7073 of LNCS, pages 197–214. Springer, 2011.
[20] E. Stefanov, E. Shi, and D. Song. Towards practical oblivious RAM. In NDSS. The Internet Society, 2012.
[21] P. Williams and R. Sion. Usable PIR. In NDSS. The Internet Society, 2008.
[22] P. Williams, R. Sion, and B. Carbunar. Building castles out of mud: practical access pattern privacy and correctness on untrusted storage. In 15th ACM Conf. on Computer and Communications Security (CCS), pages 139–148. ACM Press, 2008.
[23] A. C.-C. Yao. How to generate and exchange secrets. In 27th Annual Symposium on Foundations of Computer Science (FOCS), pages 162–167. IEEE, 1986.