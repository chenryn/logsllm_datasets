### 7.3 实际应用中的受保护代码

为了检验实际应用中受保护的代码，我们选择了10个流行的编码PHP应用程序。这些应用程序的详细信息见表5。每个编码器所评估的软件数量是根据编码器的流行程度来选择的。总共，我们在3,942个受保护的PHP文件中恢复了超过1百万行的实际代码（RELOC）。对于某些应用程序，启用了字节码优化，这在解码优化后的结构时导致了一些错误。这些错误非常具体，不能泛化。因此，我们的原型实现需要改进以实现更精确的重构。然而，诸如花括号错位等代码嵌套错误并不会妨碍对恢复的源代码的完全理解，也不会妨碍获取敏感信息（如加密密钥）或检测安全漏洞。以下是我们的一些发现。由于语料库庞大，只能分析其中的一部分代码。

**许可系统**：在所有10个分析的应用程序中，主要使用保护措施来隐藏许可系统。它可以限制应用程序的使用时间（7个应用）、用户数量（5个应用）、域名或MAC地址（4个应用）、软件版本（3个应用），或者限制试用版的功能（5个应用）。通过反编译受保护的源代码，我们可以揭示使用的密钥和算法。例如，我们能够恢复PHP-Cart（MD5 salt）、HelpSpot（RC4）、gSales（SHA1 salt）和Mailborder（AES 128bit）中用于验证或解密许可证数据的静态密钥。在NagiosFusion中，我们发现了一个自定义的解码算法，用于从许可证密钥推断安装的限制。反编译这些敏感源代码不仅允许伪造有效的运行环境和许可证，还可以完全删除这些检查。

**漏洞**：此外，我们在反编译的源代码中发现了关键的安全漏洞，并在原始受保护的应用程序中得到了确认。例如，我们在HelpSpot和scriptcase中发现了多个路径遍历漏洞，这些漏洞允许远程检索服务器上的任何文件；在HelpSpot、xt:Commerce和gSales中发现了多个SQL注入漏洞，这些漏洞允许从数据库中提取敏感数据。我们认为这些漏洞之所以未被发现，是因为源代码不可用。关于这一点是否对供应商或攻击者更有利存在争议[18,28]。虽然有些漏洞也可以在没有源代码的情况下被发现，但一些漏洞在黑盒场景下难以利用，例如在Mailborder中发现的二阶文件包含漏洞[5]，或在xt:Commerce、PHP-Cart和HelpSpot中发现的PHP对象注入漏洞[6]。显然，供应商不应依赖源代码保护工具来假设安全问题未被发现。我们已将所有识别的问题负责任地报告给相应的供应商。

**Pingbacks和后门**：除了漏洞外，我们还查找了受保护应用程序中的可疑功能。我们发现了一些相对无害的pingback功能，例如在xt:Commerce中，该功能会向基于SOAP的Web服务发送有关安装环境和许可证的信息。虽然这可以用于检查更新，但它也是观察活跃安装的好方法。更严重的是，xt:Commerce还会通过HTTP以明文形式将其用户的PayPal API凭据发送到其服务器。Precurio会收集应用程序服务器和所有者的信息，并在ionCube许可证与服务器不匹配或过期时，通过CURL请求将其发送到Precurio网站。然而，我们还在Precurio中发现了一个奇怪的漏洞。以下三行代码确定请求路径是否为文件，如果是，则输出其内容。因此，通过请求例如`/index.php/index.php`这样的URL，服务器会泄露`index.php`文件的PHP源代码。
```php
$filename = $root . '/public/' . $_SERVER['PATH_INFO'];
if (is_file($filename)) {
    echo file_get_contents($filename);
}
```
此外，这段代码允许从Precurio的Web目录中检索任何文件，包括用户文件和许可证文件。另外，我们发现Precurio中的`ErrorController`实现了`downloadAction`。因此，通过URL`/error/download`，Precurio团队以及任何其他远程用户都可以下载Precurio安装的日志文件，从而泄露详细的堆栈跟踪和异常信息。我们已经将这两个问题告知了Precurio。

### 7 相关工作

软件系统的混淆技术在实践中被用来增加逆向工程的成本，例如在数字版权管理系统[27]或知识产权保护的背景下。因此，在过去的几年中，开发了许多不同类型的混淆技术，其中大多数集中在二进制可执行文件上（例如[3,11,15,21]）。所谓的可执行打包器实现了不同的混淆和加密策略来保护给定的二进制文件。需要注意的是，混淆技术也常被对手用来阻碍恶意软件样本的分析。为了应对这些策略，开发了几种自动化去混淆的方法[4,16,20,29]，并且我们观察到了一场持续的技术竞赛。

类似的混淆策略也被用来保护PHP源代码，商业工具可用于实施这些策略。据我们所知，目前还没有关于PHP混淆的学术研究。我们的工作最接近于Esser [8]的一个演讲，他提供了PHP源代码加密的概述以及如何恢复源代码的想法。Saher在一个演讲中介绍了一些关于ionCube的逆向工程技术细节[17]。我们逆向工程了三个最流行的PHP代码保护产品，并提供了它们内部结构的详细信息，以及一个反编译方法。

静态和动态代码分析技术可以检测安全漏洞，这是一个重要的研究领域。我们通过展示如何访问受保护的PHP代码以便进行分析，补充了这一领域。在其他领域，通过逆向工程和二进制插桩技术已经破解了混淆/保护机制（例如[27]），我们展示了针对PHP混淆工具的类似攻击也是可行的。

### 8 结论

本文评估并记录了当前可用的PHP源代码IP保护工具所提供的保护水平。我们研究了三个最受欢迎的编码器的内部结构，并通过概念验证实现演示了对共享弱点的攻击。结果表明，我们的反编译器能够恢复96%的受保护PHP代码，使攻击者能够破解许可证系统、识别先前未知的漏洞和后门。因此，我们认为目前可用的编码器产品不是合适的知识产权保护解决方案，需要更复杂的混淆方法来更好地保护PHP源代码。

**伦理考量**：我们想澄清，我们的工作并不是出于非法活动的目的，例如侵犯版权或服务器入侵，也不是为了方便他人进行这些活动。因此，我们不会发布我们的反编译工具，并且已经负责任地向供应商报告了所有检测到的漏洞。此外，我们只展示了分析产品的关键见解，故意省略了具体细节，而提供的密钥和常量可能会发生变化。因此，我们认为攻击者仍然需要付出巨大的逆向工程努力才能重现我们对最新编码器的攻击。相反，我们希望我们的研究有助于构建更好的编码器，使其不受我们攻击的影响，并推动技术的发展。

### 参考文献

1. Brumley, D., Lee, J., Schwartz, E.J., Woo, M.: A native x86 decompilation using semantics-preserving structural analysis and iterative control-flow structuring. In: USENIX Security Symposium (2013)
2. Cifuentes, C.: Reverse compilation techniques. Ph.D. thesis, Queensland University of Technology (1994)
3. Collberg, C., Thomborson, C., Low, D.: A taxonomy of obfuscating transformations. Technical report, University of Auckland, New Zealand (1997)
4. Coogan, K., Lu, G., Debray, S.: Deobfuscation of virtualization-obfuscated software: a semantics-based approach. In: ACM Conference on Computer and Communications Security (CCS), pp. 275–284 (2011)
5. Dahse, J., Holz, T.: Static detection of second-order vulnerabilities in web applications. In: USENIX Security Symposium (2014)
6. Dahse, J., Krein, N., Holz, T.: Code reuse attacks in PHP: automated POP chain generation. In: ACM Conference on Computer and Communications Security (CCS) (2014)
7. Egele, M., Scholte, T., Kirda, E., Kruegel, C.: A survey on automated dynamic malware analysis techniques and tools. ACM Comput. Surv. 44(2), 1–42 (2008)
8. Esser, S.: Vulnerability Discovery in Closed Source/Bytecode Encrypted PHP Applications. Power of Community (2008)
9. ionCube Ltd. ionCube PHP Encoder. https://www.ioncube.com/php-encoder.php?page=features, May 2015
10. Ivanov, I.: API Hooking Revealed. The Code Project (2002)
11. Linn, C., Debray, S.: Obfuscation of executable code to improve resistance to static disassembly. In: ACM Conference on Computer and Communications Security (CCS) (2003)
12. Miecznikowski, J., Hendren, L.: Decompiling Java bytecode: problems, traps and pitfalls. In: Nigel Horspool, R. (ed.) CC 2002. LNCS, vol. 2304, pp. 111–127. Springer, Heidelberg (2002)
13. Nielson, F., Nielson, H.R., Hankin, C.: Principles of Program Analysis. Springer, New York (1999)
14. phpSHIELD. About phpSHIELD. PHP Encoder by SourceGuardian. https://www.phpshield.com/about.html, May 2015
15. Popov, I.V., Debray, S.K., Andrews, G.R.: Binary obfuscation using signals. In: USENIX Security Symposium (2007)
16. Royal, P., Halpin, M., Dagon, D., Edmonds, R., Lee, W.: PolyUnpack: automating the hidden-code extraction of unpack-executing malware. In: Annual Computer Security Applications Conference (ACSAC) (2006)
17. Saher, M.: Stealing from thieves: breaking IonCube VM to RE exploit kits. Black-Hat Abu Dhabi (2012)
18. Schryen, G., Kadura, R.: Open source vs. closed source software: towards measuring security. In: ACM Symposium on Applied Computing (SAC) (2009)
19. Schwartz, E.J., Avgerinos, T., Brumley, D.: All you ever wanted to know about dynamic taint analysis and forward symbolic execution (but might have been afraid to ask). In: IEEE Symposium on Security and Privacy (S&P) (2010)
20. Sharif, M., Lanzi, A., Giffin, J., Lee, W.: Automatic reverse engineering of malware emulators. In: IEEE Symposium on Security and Privacy (S&P) (2009)
21. Sharif, M.I., Lanzi, A., Giffin, J.T., Lee, W.: Impeding malware analysis using conditional code obfuscation. In: Symposium on Network and Distributed System Security (NDSS) (2008)
22. SourceGuardian Ltd. PHP Encoder Features. https://www.sourceguardian.com/protect-php-features.html, May 2015
23. The PHP Group. List of Parser Tokens. http://php.net/tokens, May 2015
24. The PHP Group. Tokenizer. http://php.net/tokenizer, May 2015
25. The PHP Group. Zend API: Hacking the Core of PHP. http://php.net/manual/en/internals2.ze1.zendapi.php, May 2015
26. The PHP Group. Zend Engine 2 Opcodes. http://php.net/manual/internals2.opcodes.php, May 2015
27. Wang, R., Shoshitaishvili, Y., Kruegel, C., Vigna, G.: Steal this movie: automatically bypassing DRM protection in streaming media services. In: USENIX Security Symposium (2013)
28. Witten, B., Landwehr, C., Caloyannides, M.: Does open source improve system security? IEEE Softw. 18(5), 57–61 (2001)
29. Yadegari, B., Johannesmeyer, B., Whitely, B., Debray, S.: A generic approach to automatic deobfuscation of executable code. In: IEEE Symposium on Security and Privacy (S&P) (2015)
30. Zend Technologies Ltd. PHP Obfuscator, PHP Encoder & PHP Encryption from Zend Guard. http://www.zend.com/products/guard, May 2015