# Are We Done Yet? Our Journey to Fight Against Memory-Safety Bugs

**Author:** Taesoo Kim  
**Affiliation:** Georgia Institute of Technology and Samsung Research

## Biography
Taesoo Kim is an Associate Professor in the School of Cybersecurity and Privacy and the School of Computer Science at Georgia Tech. He also serves as the director of the Georgia Tech Systems Software and Security Center (GTS3). During his sabbatical year, he works as a Vice President at Samsung Research, leading the development of a Rust-based operating system for a secure element. He has received numerous awards, including the NSF CAREER Award (2018), the Internet Defense Prize (2015), and several best paper awards, including USENIX Security'18 and EuroSys'17. He holds a BS from KAIST (2009), an SM (2011), and a Ph.D. (2014) from MIT.

## Acknowledgements
His research has been supported, in part, by the following grants and gifts:
- NSF Awards: CNS-1563848 and CNS-1749711
- ONR Grants: N00014-18-1-2662, N00014-15-1-2162, and N00014-17-1-2895
- DARPA Grants: AIMEE HR00112090034 and SocialCyber HR00112190087
- ETRI IITP/KEIT: [2014-3-00035]
- Gifts from: Facebook, Mozilla, Intel, VMware, and Google

## References
1. MSRC, Microsoft. "A Proactive Approach to More Secure Code."  
   <https://msrc-blog.microsoft.com/2019/07/16/a-proactive-approach-to-more-secure-code/>
   
2. The Chromium Projects, Google. "Memory Safety."  
   <https://www.chromium.org/Home/chromium-security/memory-safety>
   
3. Yechan Bae, Youngsuk Kim, Ammar Askar, Jungwon Lim, and Taesoo Kim. "Rudra: Finding Memory Safety Bugs in Rust at the Ecosystem Scale." In Proceedings of the 28th ACM Symposium on Operating Systems Principles (SOSP 2021), Virtual, October 2021.

## Abstract
Memory-safety issues have long been a significant concern for security practitioners. According to reports from Microsoft [1] and Google [2], memory-safety bugs still account for 70% of exploited vulnerabilities in complex, real-world programs such as operating systems and web browsers. Despite this, both academics and practitioners have made substantial efforts to address these issues. Advances in automatic techniques like fuzzing and sanitizers have revolutionized the way we manage memory safety bugs. However, the rapid growth of new software often outpaces the adoption of these promising techniques, leaving many legacy programs vulnerable.

In this talk, I will share our group's journey in combating memory-safety bugs. The term "our" is important because all research is conducted in collaboration with the brightest hackers at SSLab at Georgia Tech. First, I will discuss our research agenda in the realm of memory safety, which includes binary exploitation, program analysis, fuzzing, symbolic execution, and security education. Second, I will share our experiences participating in competitions such as the DARPA CGC, DEFCON CTF, and pwn2own. Third, I will present our group's future direction: the development of a promising new memory- and thread-safe language called Rust. Finally, I will conclude with a projection based on our recent work on finding bugs in Rust packages [3]: like COVID-19, memory-safety bugs are likely to remain a challenge for the next decade or more.

## CCS Concepts/ACM Classifiers
- Security and privacy
  - Software and application security
    - Software security engineering

## Author Keywords
- Memory-safety bugs
- Exploitation
- Fuzzing
- Rust

## Permission
Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for third-party components of this work must be honored. For all other uses, contact the Owner/Author(s).

## Conference Information
CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea.  
© 2021 Copyright is held by the owner/author(s).  
ACM ISBN 978-1-4503-8454-4/21/11.  
<https://doi.org/10.1145/3460120.3482788>  
Keynote Talk, CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea