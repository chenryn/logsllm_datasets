# Title: Why Eve and Mallory Still Love Android: Revisiting TLS (In)Security in Android Applications

## Authors:
- Marten Oltrogge, CISPA Helmholtz Center for Information Security
- Nicolas Huaman, Leibniz University Hannover
- Sabrina Amft, Leibniz University Hannover
- Yasemin Acar, Leibniz University Hannover
- Michael Backes, CISPA Helmholtz Center for Information Security
- Sascha Fahl, Leibniz University Hannover

## Abstract
Android applications have a long history of being vulnerable to man-in-the-middle (MitM) attacks due to insecure custom TLS certificate validation implementations. To address this, Google introduced the Network Security Configuration (NSC), a configuration-based approach to enhance the security of custom certificate validation logic, and implemented safeguards in Google Play to block insecure applications.

In this paper, we conduct a large-scale, in-depth investigation into the effectiveness of these countermeasures. First, we analyze the security of 99,212 NSC settings files in 1,335,322 Google Play apps using static code and manual analysis techniques. We find that 88.87% of the apps with custom NSC settings downgrade security compared to the default settings, and only 0.67% implement certificate pinning. Second, we test Google Play’s protection mechanisms by attempting to publish apps vulnerable to MitM attacks. Contrary to Google's official statements, we found that Google Play does not effectively block such vulnerable apps. Finally, we perform a static code analysis of 15,000 apps and find that 5,511 recently published apps still contain vulnerable certificate validation code.

Overall, we attribute these issues to insufficient support for developers, unclear documentation of security risks, and inadequate security checks for vulnerable applications in Google Play.

## 1. Introduction
The security of Android applications has been a subject of extensive research [35], significantly influenced by the seminal work of Enck et al. in 2011 [52]. Numerous studies have shown that developers struggle with implementing various Android security mechanisms correctly [46, 50–52, 73, 78]. The number of users affected by vulnerabilities in Android applications is in the billions [31].

While developers face many security challenges, the security of custom TLS certificate validation has been a critical issue since 2012 [54, 56] and remains a contentious topic [47, 48, 56, 58, 74, 76, 77, 84, 85]. This problem extends beyond Android and is a broader issue in secure programming [38, 42, 69]. Researchers have proposed various countermeasures, focusing on simplifying the implementation of non-standard TLS certificate validation, such as certificate or public key pinning, and the secure use of self-signed certificates for development [56, 74, 85].

Google has also taken steps to address this issue, introducing countermeasures and new mechanisms for developers in Android and adding further security policies and safeguards to Google Play (Table 1). Their goal was to establish safer defaults, such as enforcing TLS for all network connections and blocking vulnerable apps and updates from Google Play.

A significant change was introduced in Android 7 (2016): the Network Security Configuration (NSC) [19], which allows developers to implement custom certificate validation logic using an XML configuration file, rather than requiring custom code. Additionally, Google Play announced new security policies and safeguards in 2016 and 2017 [66–68], prohibiting new apps and updates from including insecure certificate validation logic.

Despite these efforts, the efficacy and success of these measures have not been thoroughly investigated. Incidents, such as the 2019 vulnerability in Google's official Gmail app for Android, illustrate that NSC is not a guarantee for secure certificate validation. This vulnerability, which allowed MitM attacks via user-installed CAs, affected 43% of the Android ecosystem [39].

The primary objective of this work is to evaluate the current state of TLS certificate validation security in Android apps. To our knowledge, this is the first large-scale, in-depth evaluation of the success of Android's NSC approach, combined with an analysis of the new security policies and safeguards in Google Play. We also revisit the security of custom certificate validation implementations in Android apps, as previously studied by Fahl et al. [54].

Our contributions include:
- **NSC Adoption and Security**: We measure the adoption of NSC in 1,335,322 free current Android apps from Google Play and find that 99,212 apps include custom NSC settings. Our evaluation shows that more than 88.87% of these apps weaken security by downgrading safe defaults, while only 0.67% implement certificate pinning.
- **Efficacy of Google Play Safeguards**: We conduct multiple experiments to assess the efficacy of Google Play's TLS security policies and safeguards. We find that Google Play only catches trivial insecure certificate validation code but still accepts most of the dangerous code identified in previous work [54, 58]. Out of 15,000 current Android apps, more than 5,511 contain custom certificate validation code vulnerable to MitM attacks.
- **Discussion and Recommendations**: Based on our findings, we provide a detailed discussion of the successes and failures of the NSC approach and Google Play's security policies and safeguards. We offer recommendations to improve TLS certificate validation security in future Android versions.

## 2. Background on TLS and Android
TLS is the most widely deployed network protocol for securing communication channels between clients and servers [36, 82, 83]. It provides confidentiality, integrity, and authenticity for information shared between network endpoints and can prevent active and passive MitM attacks. While mutual authentication for clients and servers is supported, in most cases, only the server's identity is verified. A server is considered trustworthy if its certificate is issued by a trusted certificate authority (CA) for the correct hostname and is still valid [43].

Modern operating systems, including Android, include a pre-installed list of trusted root CA certificates. As of June 2020, this list contains 138 entries [4]. While Android correctly validates TLS certificates signed by one of these 138 CAs by default, developers may choose to create their own validation logic for various reasons, such as using a custom CA [54]. Before the introduction of NSC, developers had to implement custom certificate validation logic using Android APIs [14, 30, 32], which often led to vulnerabilities [54, 58], such as failing to correctly implement practices like certificate pinning or leaving custom code intended for debugging in production code.

To mitigate these threats, Google introduced significant changes for X.509 certificate validation, categorized into the introduction and updates of NSC and security policy changes and safeguards in Google Play. Table 1 provides a chronological overview of important changes.

### 2.1 Network Security Configuration (NSC)
With the release of Android 7, Google introduced the Network Security Configuration (NSC) [19]. NSC supports certificate pinning, custom CA certificates, and debugging flags, both globally for all network connections or for specific domains [19].

#### Cleartext Traffic Support
This flag can be used to enforce HTTPS or allow HTTP for network connections. Developers can make global or domain-specific configurations. Starting with Android 9, cleartext traffic via HTTP is not permitted by default anymore [45]. Instead, HTTPS is used by default [63]. Developers can set the `cleartextTrafficPermitted` flag if they want to enable HTTP (Listing 3 in the Appendix) [21]. Alternatively, developers can configure cleartext traffic support in the application manifest by setting the `android:usesCleartextTraffic` attribute [6]. Since Android 9, the value is `true` by default, but it is only honored if no NSC file is provided by the developer.

#### Certificate Pinning
This feature allows developers to implement certificate pinning [53]. Connections can only be established if at least one certificate from the server's certificate chain matches any of the registered pins. Unlike before Android 7, developers do not need to write custom Android code. They need to specify expected pinning information inside `<pin-set>` tags within the `<base-config>` environment.

#### Custom Trust Anchors
This feature allows developers to customize the set of trusted CA certificates, such as distrusting pre-installed system CA certificates, introducing additional CA certificates, or allowing user-installed CA certificates.