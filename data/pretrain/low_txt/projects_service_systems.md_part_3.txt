### Dynamic Time-Based Fingerprinting and Automated Diagnosis
- **Dynamic Time-Based Fingerprinting**: This technique is used to detect timeouts by analyzing the time-based behavior of system components.
- **Position and Negative Fingerprints**: These fingerprints are used for automated diagnosis and localization of user commands, providing a detailed analysis of command execution and potential issues.

### Open Source and Python Dependencies
- **Open Source and Python**: We aim to rely as much as possible on open source technologies and Python. For a comprehensive list of Python frameworks, libraries, and resources, refer to [awesome-python](https://github.com/vinta/awesome-python).

### Fault Injection
- **Fault Injection Technologies (FIT)**: FITs are methods to demonstrate software robustness and fault tolerance by injecting faults to test internal components. 
  - **Reference**: Domenico Cotroneo and Henrique Madeira. [Introduction to Software Fault Injection](http://link.springer.com/chapter/10.1007/978-88-470-2772-5_1). In Domenico Cotroneo, editor, *Innovative Technologies for Dependable OTS-Based Critical Systems*, pages 1–15. Springer Milan, 2013.
  - **Survey**: Haissam Ziade, Rafic A Ayoubi, Raoul Velazco, et al. *A survey on fault injection techniques*. Int. Arab J. Inf. Technol., 1(2):171–186, 2004.

#### Graph-Based Approaches
- **Towards a Fault-Resilient Cloud Management Stack**: The authors use execution graphs to monitor and observe the processing of external requests. Instrumentation is done between OpenStack and the hypervisor, database, REST, HTTP, and AMQP. Server-crash faults are injected by killing relevant service processes via systemd.
- **HANSEL: Diagnosing Faults in OpenStack**: The authors intercept AMQP and REST messages to reconstruct an execution graph. Network monitoring agents are required at each node in the OpenStack deployment. One challenge is transaction stitching to reconstruct full transactions and recreate the execution graph.

#### String-Based Approach
- **Toward Achieving Operational Excellence in a Cloud**: The authors rely on operating system-level information to build message traces by observing system events such as SEND or RECV system calls. These events are monitored per thread. Message sequences are converted into strings and compared using an edit distance function. High distances indicate possible anomalies.

#### Tools and Frameworks
- **DICE Fault Injection Tool**: A tool to generate faults within Virtual Machines. Currently under development.
- **Lineage-Driven Fault Injection**: By Peter Alvaro, Joshua Rosen, and Joseph M. Hellerstein, UC Berkeley, SIGMOD '15.
- **New Functional Testing in etcd**: CoreOS uses a fault-injection framework to simulate common failure cases in etcd.
- **LinkedIn's Nurse System**: LinkedIn simulates data center failures and measures their effects. The Nurse system is a workflow engine that defines tasks for automatic recovery from failures.
- **Resilience and Reliability on AWS**: A book by Jurg Vliet, providing motivation and examples on the importance of reliability, including code examples for monitoring Redis or MongoDB.
- **Microsoft's Resilience Modeling and Analysis Methodology**: An approach adapted from Failure Mode and Effects Analysis (FMEA) to improve resilience.
- **Cloudera's Fault Injection**: Cloudera uses fault-injection tools and elastic-partitioning techniques for continuous improvement and verification of their Hadoop ecosystem (CDH).
- **OpenStack Reliability Testing**: An abstract methodology for high-availability testing and analysis of OpenStack clusters.

### Anomaly Detection
- **Process-Based Approach**: In *Experience report: Anomaly detection of cloud application operations using log and cloud metric correlation analysis* (2015), the authors detect anomalies by correlating data and events from logs and metrics generated by Amazon AWS.
- **Path-Based Approach**: In patents US20140136692 and US9069668, the authors inject faults into the transaction path and detect writing actions to a log. When a failure occurs, the path is marked as problematic.
- **Generic Approaches**: Techniques such as Fault Tree Analysis (FTA), Root Cause Analysis (RCA), Failure Mode and Effects Analysis (FMEA), Cause–Effect Graphs, Ishikawa Diagram, and Five Whys.

### Distributed Tracing
- **Component-Based Monitoring**: Traditional solutions like Cloudwatch, Ceilometer, and Nagios focus on component-based monitoring, collecting detailed information on system statistics.
- **Cross-Component Monitoring (Tracing)**: To address the limitations of component-based monitoring, cross-component tracing solutions were developed to trace the path of events and method calls at runtime.
  - **X-Trace (Berkeley)**: Outputs task graphs based on Lamport’s happens-before relation.
  - **Magpie (Microsoft)**: Infers traces by combining event logs and constructs a probabilistic workload model.
  - **Dapper (Google)**: Focuses on library and middleware modifications to track execution across async callbacks and RPCs.
  - **HTrace (Cloudera)**: A Java-based tracing framework for distributed systems.
  - **Zipkin (Twitter)**: Helps gather timing data for troubleshooting latency in microservice architectures.
  - **Jaeger (Uber)**: Similar to Dapper and Zipkin, Jaeger provides tracing capabilities.
  - **OpenTracing**: An open standard for distributed tracing, addressing instrumentation standardization.
  - **Facebook's Mystery Machine**: A tool for understanding and optimizing the performance of large-scale distributed systems.

### Monitoring
- **Eliot (Python Library)**: A logging library for complex distributed systems.
- **Airbnb's Monitoring Setup**: Uses Logstash, Statsd, NewRelic, Datadog, and their own open-sourced configuration-as-code alerting framework.
- **RefStack**: Provides a Tempest wrapper to verify the interoperability of OpenStack clouds.

### Literature
- **Software Fault Injection** by Jeffrey M. Voas and Gary McGraw.
- **Patterns of Resilience** by Uwe Friedrichsen.
- **Site Reliability Engineering: How Google Runs Production Systems** by Betsy Beyer, Chris Jones, Jennifer Petoff, and Niall Richard Murphy.
- **How Complex Systems Fail** by Richard I. Cook, MD Cognitive Technologies Laboratory, University of Chicago (2000).

### Service Systems
- **Service Description Languages (USDL Family)**: Linked USDL (Unified Service Description Language) enables describing business, software, or real-world services using computer-readable and understandable specifications.
- **Service System Modeling (LSS USDL Language)**: LSS-USDL explores the development of lightweight semantic models to capture the essence of service systems.
- **Service Analytics (Using Process Mining)**: Analyzing large logs from IT service provisioning to find human behavior patterns.
- **Service Networks (Using Social Network Principles)**: Studying the role of networks in service-based economies.

### Publications
- **Georgia Kapitsaki, Josef Ioannou, Jorge Cardoso, Carlos Pedrinaci, "Linked USDL Privacy: Describing Privacy Policies for Service"**, IEEE International Conference on Web Services (ICWS), 2018.
- **José María García, Pablo Fernández, Carlos Pedrinaci, Manuel Resinas, Jorge Cardoso, Antonio Ruiz-Cortés, "Modeling Service Level Agreements with Linked USDL Agreement"**, IEEE Transactions on Services Computing, 2017.
- **José María García, Carlos Pedrinaci, Manuel Resinas, Jorge Cardoso, Pablo Fernández, Antonio Ruiz-Cortés, "Linked USDL Agreement: Effectively Sharing Semantic Service Level Agreements on the Web"**, IEEE International Conference on Web Services (ICWS), 2015.
- **Jorge Cardoso and Carlos Pedrinaci, "Evolution and Overview of Linked USDL"**, 6th International Conference Exploring Services Science (IESS), 2015.
- **Cardoso, J., R Mans, PR da Cunha, W van der Aalst, H Berthold, "A framework for next generation e-health systems and services"**, Proc. Amer. Conf. Inf. Syst. (AMCIS), 2015.
- **Pedrinaci, C.; Cardoso, J. and Leidig, T., "Linked USDL: A Vocabulary for Web-scale Service Trading"**, 11th Extended Semantic Web Conference (ESWC), 2014.
- **Cardoso, J.; Binz, T.; Breitenbucher, Uwe; Kopp, O. and Leymann, F., "Cloud Computing Automation: Integrating USDL and TOSCA"**, 25th Conference on Advanced Information Systems Engineering (CAiSE), 2013.
- **Jorge Cardoso, Ricardo Lopes, and Geert Poels, "Conceptual Frameworks"**, in *Service Systems: Concepts, Modeling, and Programming*, Springer, 2014.
- **Jorge Cardoso, Ricardo Lopes, and Geert Poels, "The LSS-USDL Model"**, in *Service Systems: Concepts, Modeling, and Programming*, Springer, 2014.

### Semantic Domain System
- **Semantic Domain System (SDS)**: A system similar to DNS, where each company manages its own concepts and can browse other companies' concept definitions.

### Semantic B2B Integration
- **B2B Integration**: Automates and integrates business processes and interactions between companies using XML as the de facto standard for data representation.

### JXML2OWL
- **JXML2OWL**: A framework to assist in the semantic data integration process, supporting mappings and transformations from XML to a common global model defined by an ontology using OWL.

### Business Process Quality Metrics
- **Business Process Quality Metrics**: Surveying findings from neighboring disciplines to develop quality metrics, with empirical validations through controlled experiments.

### Other Projects
- **Process Control-Flow Analysis**
- **Semantic Dynamic Packaging (POSI/EIA/56164/2004)**
- **DME Web Site Development**: José Nelson Alves e Duarte Abreu.
- **Poseidon**: A tool for semi-automatic process design, Jose Miguel Rodrigues de Freitas and Luis Roberto Fernandes Faria.
- **Web Services over Peer-to-Peer Infrastructure**: Martinho da Silva Correia.
- **Quality of Service Management for METEOR Workflow Management System**: University of Georgia, GA, USA.
- **Semantic e-Workflow Composition for METEOR Workflow Management System**: University of Georgia, GA, USA.
- **MARATHON Workflow Management System**: Jorge Cardoso and Christoph Bussler, Boeing Company, 1999.
- **SketchPad**: CCG/ZGDV - Centro de Computação Gráfica and IGD/Darmstadt, Germany.
- **DiagLactato 2.0**: An expert system for healthcare, 1994.
- **CUCo - Comunicar Utilizando o Computador**: Projecto Minerva, Universidade de Coimbra, 1994.
- **Puzzle Quiz**: Projecto Minerva, Universidade de Coimbra, 1992.
- **Task Game**: Projecto Minerva, Universidade de Coimbra, 1991.