### Experimental Setup and Results

The experiments were conducted on a Pentium III, 1GB Linux machine. The results are presented in Figure 5. Full bounds checking, similar to the original JK system, imposes significant performance overhead on most programs. For instance, the enscript application experiences an 11-times slowdown, while ssh experiences a 12-times slowdown when instrumented with full bounds checking. Limiting the bounds-checking to strings significantly improves the performance for most programs. The instrumentation imposes an overhead of less than 26% for 14 of the programs. However, the slowdown remains significant for Apache (1.6X), enscript (1.9X), gnupg (1.8X), hypermail (2.3X), monkey (1.8X), and pgp4pine (1.6X). These programs involve significant string processing, which limits the effectiveness of our optimization. Fortunately, known compiler optimizations can be applied to eliminate redundant bounds checks in loops, thereby reducing the performance penalty [15]. Static analysis techniques can also be incorporated to reduce the portion of code that requires instrumentation [9].

### Performance Tests

- **Response Time:**
  - 15,000 TCP connections at a rate of 90 per second.
  - 3,000 TCP connections at a rate of 50 per second.

- **Latency:**
  - 126MB file transfer using scp via the network loopback interface.
  - 1.5MB file download.
  - 126MB file transfer via the network loopback interface.

- **Programs and Tests:**
  - **Apache-1.3.24:** Response time to 15K TCP connections.
  - **monkey-0.7.1:** Response time to 3K TCP connections.
  - **openssh-3.2.2p1:** Latency of 126MB file transfer using scp.
  - **OpenSSL-0.9.7b:** Time to sign and verify 2048-bit keys using RSA.
  - **pgp4pine-1.76:** Time to decrypt a 1MB file.
  - **polymorph-0.40:** Time to convert names of 100 files to Unix-style (lowercase) names.
  - **WsMp3-0.0.10:** Latency of downloading a 1.5MB file.
  - **wu-ftpd-2.6.1:** Latency of 126MB file transfer via the network loopback interface.

Figure 4 provides a detailed description of the performance tests.

### Related Work

A considerable amount of work has been performed on mitigating buffer overflow problems using either static or dynamic analysis. Comparative studies of these techniques have also been carried out [14, 28, 33, 34]. In this section, we review different works in each category.

#### 5.1. Static Analysis Approaches

- **Wagner et al.** developed a system for detecting buffer overflows in C programs statically [31]. Their approach treats C strings as an abstract data type accessed through library routines and models buffers as pairs of integer ranges (size and current length). The detection problem is formulated as an integer constraint problem. By trading precision for scalability, their tool gives both false positives and false negatives but found known and unknown security vulnerabilities in Sendmail 8.7.5.
  
- **Larochelle and Evans** [22] presented a lightweight annotation-assisted static analysis based on LCLint [13]. This technique exploits information provided in programmers' semantic comments to detect likely buffer overflow vulnerabilities. Their tool is neither sound nor complete.
  
- **Sagiv et al.** presented C String Static Verifier (CSSV), a tool that statically detects string manipulation errors with the aid of procedure summaries [11]. CSSV is sound and handles all C language constructs such as structures and multilevel pointers. Its disadvantages are that it generates false alarms and imposes the extra burden of writing procedure summaries.

#### 5.2. Dynamic Analysis Approaches

- **StackGuard** by Cowan et al. is an extension to the GNU C compiler that tackles stack smashing attacks by inserting a canary word just before the return address on the stack [10]. If the return address is overwritten, the canary value is modified, and the program is halted if the canary was altered. Bulba and Kil3r present techniques for bypassing StackGuard [6]. Our tool is not susceptible to these techniques.
  
- **ProPolice** by Etoh and Yoda is another extension to the GNU C compiler that protects against stack smashing attacks [12]. Similar to StackGuard, ProPolice protects the return address with a guard value. Additionally, stack-allocated variables are rearranged so that local char buffers are at a higher address (below the guard value) than other local variables and pointers. ProPolice offers no protection against other forms of buffer overflow attacks, which our tool does.
  
- **StackShield** is also an extension to the GNU C compiler that protects the return address against stack smashing attacks [30]. It stores a copy of the return address in a safe place on entering a function and restores it before returning. Techniques to bypass StackShield are presented by Bulba and Kil3r [6]. Our tool is impervious to these techniques and thus offers better protection.
  
- **Baratloo et al.** presented two complementary techniques for foiling stack smashing attacks that attempt to corrupt the return address [2]. The techniques are implemented as dynamically loaded libraries, Libsafe and Libverify. Libsafe replaces vulnerable C library functions with safe implementations. Libverify implements a return address verification scheme similar to StackGuard; however, it works on executables and does not require recompilation of source code, making it applicable to legacy code. A combination of both tools is ineffective against overflows caused by dereferencing out-of-bounds addresses, which our tool correctly detects.
  
- **Lhee and Chapin** presented a buffer overflow detection technique using array bounds checking [23]. In their scheme, object files are augmented with type information about static and automatic buffers used for range checking. Their technique does not guard against overflows caused by erroneous pointer arithmetic, making it an impractical solution. Our tool offers this protection.
  
- **Haugh and Bishop** presented STOBO, an instrumentation tool that aids in the detection of buffer overflow vulnerabilities due to the use of C library functions during testing [16]. STOBO keeps track of memory buffer lengths, checks if they satisfy certain conditions when used as arguments to library functions, and issues warnings when buffer overflows may occur. STOBO finds vulnerabilities even when test data does not trigger an overflow. However, it only detects vulnerabilities due to the use of library functions and generates false alarms.

#### 5.3. Combination of Static and Dynamic Analysis

- **Necula et al.** presented a program transformation tool (CCured) that adds memory safety guarantees to C programs [24, 9]. CCured first attempts to statically verify the absence of memory errors by enforcing a strong type system. It then inserts run-time checks to handle portions of the code for which static verification is insufficient. CCured is incompatible with complex C code, requiring manual intervention in the form of annotations and source code changes. Our tool is fully automatic and compatible with complex C code.
  
- **Cyclone** by Jim et al. is a safe dialect of C that prevents memory errors using static analysis and runtime checks, similar to CCured [17]. Cyclone changes pointer representation and is therefore incompatible with legacy code. Source code changes are required to make Cyclone work with real-life programs.
  
- **Kiriansky et al.** presented program shepherding, a technique that monitors control flow transfers during program execution to enforce a security policy [21, 20]. Program shepherding builds a custom security policy for the target program using automatic static and dynamic analyses. Buffer overflow attacks are prevented because a successful attack would require a control flow transfer that violates the security policy. This technique was implemented in the DynamoRIO dynamic code modification system [3, 4]. The system works on unmodified native binaries and requires no special hardware or operating system support. However, it does not support self-modifying code.

### Conclusions

We presented CRED, a practical dynamic buffer overflow detector for C programs. Our solution is built upon Jones and Kellyâ€™s technique of tracking the referent object of each pointer. Compared to the previous system, our solution does not break existing codes that compute with out-of-bound addresses and is significantly more efficient by limiting the buffer overrun checks to strings.

Our experimental results demonstrate the compatibility of our technique with commonly used programs and its effectiveness in detecting buffer overrun attacks in vulnerable programs. The overheads experienced range from 1% to 130%, depending on the use of strings in the application. These numbers are significantly better than previously published results on dynamic bounds checking. Further improvement in performance is possible using known techniques for optimizing bounds checking [15], and using static verification to reduce the portion of code that requires instrumentation [9].

### Acknowledgements

We thank Herman ten Brugge, John Wilander, and members of the open source development community for their assistance throughout this project. We also thank David Heine, David Brumley, Constantine Sapuntzakis, Andrew Myers, and the anonymous reviewers for their helpful comments on this paper.

### References

[References are listed as in the original text, with appropriate citations and links.]

This revised version aims to provide a clear, coherent, and professional presentation of the experimental setup, results, and related work.