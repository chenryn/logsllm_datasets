### Play Safeguards Successfully
The `android-async-http` library, version 1.4.9, included a vulnerable `TrustManager`. Despite this, our experiments passed without warnings, similar to previous tests.

### Insecure Apps in Google Play
#### 5.5 Replication of Previous Studies
Motivated by our earlier experiments and prior research [70, 75, 80, 86], we replicated a study conducted by Fahl et al. in 2012 [54]. We replaced the outdated MalloDroid tool [54] with the more recent CryptoGuard [80], released in 2019. CryptoGuard is capable of detecting cryptographic vulnerabilities, including vulnerable certificate validation logic in both Java programs and Android apps.

We analyzed a random set of 15,000 Android apps using CryptoGuard. Since CryptoGuard does not perform reachability analyses, we cannot determine if the vulnerable code is actually executed. Additionally, we cannot distinguish between developer code and third-party library code. Following Rahaman et al. [80], we terminated app processing after 10 minutes, which may have skipped the analysis of more complex apps.

Overall, we found:
- 2,232 (14.8%) apps with vulnerable `HostnameVerifier` implementations.
- 5,202 (34.7%) apps with vulnerable `TrustManager` implementations.
- 5,511 (36.7%) apps with both vulnerabilities, resulting in a total of 36.7% vulnerable apps.

These results align with the findings of Fahl et al. [54] and Georgiev et al. [58], indicating that Google Play's security checks for TLS are insufficient.

### 6 Limitations
Our work has several limitations:
- **Android App Crawler**: The crawler used to download apps operates on a best-effort basis. We seeded it with a list of popular free Google Play applications and recursively downloaded similar apps. Although we identified 1,335,322 free apps updated after Android 7, we cannot guarantee that all free apps were captured. Our crawler was deployed at a German university, leading to geographic restrictions that prevented the download of 77,676 apps. Additionally, 264,249 apps were removed from Google Play between metadata crawling and APK downloads.
- **NSC Analysis**: We identified 99,212 apps with custom NSC files, but could not analyze 2,812 due to obfuscation. Our analysis of HTTP(S) origins and certification data might be limited as we downloaded HTTPS certificates from Germany. Server configurations may have changed over time, affecting the relevance of NSC file contents. Furthermore, there is no distinction between main application and library configurations in NSC files, which also applies to our static code analysis.

### 7 Discussion
In this section, we discuss key takeaways and lessons learned from our analysis of TLS certificate validation security in 1,335,322 free Android applications from Google Play. We compare the state of certificate validation security in Android in 2020 with results reported in 2012 [54, 58].

#### Positive and Disappointing Trends
- **Positive Measures**: Android has implemented several measures to address security vulnerabilities related to certificate validation, including the introduction of NSC, default enforcement of HTTPS in apps targeting Android 9 or higher, and Google Play safeguards introduced in 2016 and 2017.
- **Disappointing Findings**: Despite these measures, our results show that further security improvements are needed. Custom NSC configurations often lead to security downgrades, and the use of pinning remains low.

#### Customization is Harmful
- **Manual Configuration**: Developers who manually configure NSC files for TLS certificate validation often compromise security. Our results mirror those of Fahl et al. [54] and Georgiev et al. [58], showing that custom implementations frequently turn off certificate validation.
- **Downgraded Security**: Out of 99,212 apps with custom NSC files, 88,174 (88.87%) had configurations that downgraded security, primarily by re-enabling HTTP traffic. This is often unnecessary as many remote servers support HTTPS.
- **Debug Configurations**: Developers still deploy debug configurations in production apps, leaving users at risk. Additionally, 8.67% of apps with custom NSC settings allow user-installed CAs, which can be exploited in man-in-the-middle attacks [77].

#### Pinning is Still an Issue
- **Low Adoption**: Despite simplified implementation via NSC files, only 0.67% of the apps we investigated use the pinning feature. This suggests that complexity is not the only barrier to adoption.
- **Misconfigurations**: Our findings confirm the low occurrence of pinning in NSC files and unintentional misconfigurations, as reported by Possemato and Fratantonio [79].

#### NSC Implementation is Error-Prone
- **Faulty Configurations**: We detected several faulty and insecure NSC configurations, such as using URLs instead of domain names, which can render pinning non-functional.
- **Insufficient Support**: These issues stem from insufficient documentation and lack of support in Android Studio. Better IDE support, as suggested by Nguyen et al. [73], could significantly improve app security.

#### Google Play Safeguards are Insufficient
- **Vulnerable Apps**: Despite announced safeguards, we were able to publish simple but vulnerable implementations of `TrustManager`, `HostnameVerifier`, and `WebViewClient` to Google Play. Static code analysis also revealed that many newly released apps still contain vulnerable implementations.
- **Recommendations**: We recommend that Google Play integrate state-of-the-art vulnerability detection mechanisms, such as CryptoGuard [80] or LibScout [41], to detect and block vulnerable apps.

### 8 Conclusion
This paper continues the research on the state of TLS certificate validation in Android apps. While new secure defaults have improved HTTPS adoption and made man-in-the-middle attacks harder, NSC is often used to degrade security by undermining safe defaults. Additionally, Google Play's safeguards for preventing vulnerable TLS implementations do not work as expected. Overall, our results confirm that customization is often harmful to an application's security.

### Acknowledgements
We thank the anonymous reviewers and particularly Professor Adwait Nadkarni of the College of William and Mary for their significant contributions. This research was partially funded by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under Germany’s Excellence Strategy - EXC 2092 CASA – 390781972).

### References
[1] An Asynchronous HTTP Library for Android. https://github.com/android-async-http/android-async-http (visited on 09/22/2020).
[2] Android 7.0 unable to capture https packets. https://www.cnblogs.com/0616--ataozhijia/p/9766682.html (visited on 09/22/2020).
[3] Android 8: Cleartext HTTP traffic not permitted. https://stackoverflow.com/questions/45940861/android-8-cleartext-http-traffic-not-permitted (visited on 09/22/2020).
[4] Android Root CAs. https://android.googlesource.com/platform/system/ca-certificates/+/master/files/ (visited on 09/22/2020).
[5] Android WebView setCertiﬁcate issues SSL problems. https://stackoverflow.com/questions/6511434/android-webview-setcertificate-issues-ssl-problems/57951506#57951506 (visited on 09/22/2020).
[6] | Android Developers. https://developer.android.com/guide/topics/manifest/application-element#usesCleartextTraffic (visited on 09/22/2020).
[7] Application Crash Reports for Android. https://github.com/ACRA/acra (visited on 09/22/2020).
[8] CertiﬁcatePinner. https://square.github.io/okhttp/3.x/okhttp/okhttp3/CertificatePinner.html (visited on 09/22/2020).
[9] Charles Web Debugging Proxy • HTTP Monitor / HTTP Proxy. https://www.charlesproxy.com/ (visited on 09/22/2020).
[10] Debug your app | Android Developers. https://developer.android.com/studio/debug (visited on 09/22/2020).
[11] Get Started with the MoPub SDK for Android. https://developers.mopub.com/publishers/android/get-started/#step-4-add-a-network-security-configuration-file (visited on 09/22/2020).
[12] Google Play Blocker: Unsafe SSL TrustManager Defined #1260. https://github.com/android-async-http/android-async-http/issues/1260 (visited on 09/22/2020).
[13] Google play python API. https://github.com/NoMore201/googleplay-api (visited on 09/22/2020).
[14] HostnameVeriﬁer. https://developer.android.com/reference/kotlin/javax/net/ssl/HostnameVerifier (visited on 09/22/2020).
[15] Java android - upload apk and google play security alert. https://stackoverflow.com/questions/43847629/java-android-uplaud-apk-and-google-play-security-alert (visited on 09/22/2020).
[16] Java android. Google play security alert for insecure TrustManager. https://stackoverflow.com/questions/43777599/java-android-google-play-security-alert-for-insecure-trustmanager (visited on 09/22/2020).