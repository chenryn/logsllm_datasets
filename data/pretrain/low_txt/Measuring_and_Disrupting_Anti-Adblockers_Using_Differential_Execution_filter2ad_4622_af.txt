### Module Selection and Randomness

The selection of modules must be guided by an underlying source of randomness, such as system clocks or external network packets. If we can force a specific random source in every run, the random selection becomes deterministic. For example, a random coin flip can be made deterministic. This is similar to virtual machine replay, where all external non-deterministic factors are recorded and replayed to ensure the VM's deterministic behavior. In summary, we argue that these two types of randomization do not pose a fundamental threat to our differential analysis.

### Robustness of Anti-Adblocker Evasion

Equipped with the results of differential analysis, we have demonstrated the effectiveness of JavaScript rewrite and API hooking-based solutions. These methods are part of the ongoing arms race between adblockers and anti-adblockers. For JavaScript rewriting, it is generally difficult to estimate and contain the effects of any code changes, which can hinder real-world deployment. Additionally, JavaScript rewriting cannot be performed in a browser extension, further limiting its utility. 

On the other hand, API hooking, as discussed in §VI-B, is much more precise and closer to the root cause, making it less likely to induce unwanted side effects. The main challenge with this approach is the need to discover the exact DOM elements checked during adblock detection, which may require further program analysis. We leave this as future work.

### Fundamental Limitations

Both approaches share a fundamental limitation related to the randomization of webpage or JavaScript content. Unlike the controlled environment of anti-adblocker detection, where we can force the same page/script and ensure deterministic execution (as discussed earlier), anti-adblocker evasion occurs in real users' browsers, where we may not be able to control randomization. For instance, if different pages/scripts are loaded each time, there is no fixed content to learn from offline, and each user may receive a unique version that has never been observed before. Such frequent randomizations can degrade web performance by effectively disabling caching and penalizing users who do not use adblockers.

Behavior randomization, where the same script randomly selects anti-adblocking modules during different runs, is slightly easier to handle. In this case, since all users receive the same script, it is possible to identify the parts of the code responsible for the random selection and force the outcome of that random selection to eliminate this source of non-determinism.

### Conclusions

We presented a differential execution analysis approach to discover anti-adblockers. Our insight is that websites equipped with anti-adblockers exhibit different execution traces when visited by a browser with and without an adblocker. Using this approach, our system can unveil many more (up to 52×) anti-adblocking websites and scripts than previously reported. Moreover, since our approach pinpoints the exact branch statements and conditions involved in adblocker detection, we can steer execution away from the anti-adblocking code through JavaScript rewriting or hide the presence of adblockers through API hooking. Our system can bypass most anti-adblockers without causing any site functionality breakage (except one with JavaScript rewriting).

We anticipate an escalation in the technological battle between adblockers and anti-adblockers, at least in the short term. For security and privacy-conscious users, it is crucial that adblockers keep pace with anti-adblockers. The increasing popularity of adblocking has already led to various reform efforts within the online advertising industry to improve ads (e.g., Coalition for Better Ads [5], Acceptable Ads Committee [2]) and even alternate monetization models (e.g., Google Contributor [6], Brave Payments [4]). However, to maintain pressure on publishers and advertisers in the long term, it is essential that adblockers keep up in the rapidly escalating technological arms race. Our work represents an important step in this direction.

### Acknowledgment

We would like to thank the anonymous reviewers for their valuable feedback on this paper. This work is supported in part by the National Science Foundation under grant numbers 1719147, 1715152, 1664315, and by a seed grant from the Data Transparency Lab (DTL).

### References

[1] “A Publishers Guide To Counter-Ad Blocking Technology,” https://adexchanger.com/platforms/a-publishers-guide-to-counter-ad-blocking-technology/.

[2] “Acceptable Ads Committee,” https://acceptableads.com/en/committee/.

[3] “AdBlock for Chrome Now Hides Facebook and Blocks More Ads On More Sites,” https://blog.getadblock.com/adblock-for-chrome-now-hides-facebook-ads-and-blocks-more-ads-on-more-sites-f5918ebc43c6.

[4] “Brave Payments,” https://brave.com/publishers/.

[5] “Coalition for Better Ads,” https://www.betterads.org/.

[6] “Google Contributor,” https://contributor.google.com/v/beta.

[7] “Google’s Inbuilt Ad-Blocker Comes To Chrome Canary,” https://techviral.net/googles-inbuilt-ad-blocker-comes-chrome/.

[8] “Introducing ES2015 Proxies,” https://developers.google.com/web/updates/2016/02/es2015-proxies.

[9] “Manifest - Web Accessible Resources,” https://developer.chrome.com/extensions/manifest/web-accessible-resources.

[10] “Blocking Taboola ads,” https://adblockplus.org/forum/viewtopic.php?t=20747, 2014.

[11] “Anti-Adblock Killer List,” https://github.com/reek/anti-adblock-killer/blob/master/anti-adblock-killer-filters.txt, 2015.

[12] “Native Advertising: A Guide for Businesses,” https://www.ftc.gov/tips-advice/business-center/guidance/native-advertising-guide-businesses, 2015.

[13] “Facebook Will Force Advertising on Ad-Blocking Users,” https://www.wsj.com/articles/facebook-will-force-advertising-on-ad-blocking-users-1470751204, 2016.

[14] “The Rise of the Anti-Ad Blockers,” https://www.wsj.com/articles/the-rise-of-the-anti-ad-blockers-1465805039, 2016.

[15] “AdBlock,” https://getadblock.com/, 2017.

[16] “Adblock Forum,” https://forums.lanik.us, 2017.

[17] “Adblock Allow Non-Intrusive Advertising,” https://easylist-downloads.adblockplus.org/exceptionrules.txt, 2017.

[18] “Adblock Warning Removal List,” https://easylist-downloads.adblockplus.org/antiadblockfilters.txt, 2017.

[19] “Error.prototype.stack,” https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack, 2017.

[20] “Forum Section Content About False Blocking,” https://forums.lanik.us/viewforum.php?f=64&sid=acd4dfc10ed86e1bc7e29d5f482fd8c7, 2017.

[21] “Generate, parse, and enhance JavaScript stack traces in all web browsers,” https://github.com/stacktracejs/stacktrace.js, 2017.

[22] “Google v8,” https://developers.google.com/v8/, 2017.

[23] “mitmproxy,” https://mitmproxy.org/, 2017.

[24] “PageFair,” https://pagefair.com/, 2017.

[25] “The Chromium Projects,” https://www.chromium.org/Home, 2017.

[26] “The Global State of Adblock 2017 Report. PageFair,” https://pagefair.com/downloads/2017/01/PageFair-2017-Adblock-Report.pdf, 2017.

[27] “YourAdChoices,” https://youradchoices.com/, 2017.

[28] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert, “ZOZZLE: Fast and Precise In-Browser JavaScript Malware Detection,” in USENIX Security Symposium, 2011.

[29] Digital-Advertising-Blog, “What tracking pixels are and why they matter to your next digital ad campaign,” http://www.digitaland.tv/blog/what-is-tracking-pixel-ht/, 2017.

[30] S. Englehardt and A. Narayanan, “Online tracking: A 1-million-site measurement and analysis,” in ACM Conference on Computer and Communications Security (CCS). ACM, 2016.

[31] D. Gugelmann, M. Happe, B. Ager, and V. Lenders, “An automated approach for complementing ad blockers blacklists,” Proceedings on Privacy Enhancing Technology (PETS) 2015, 2015.

[32] S. Guha, B. Cheng, and P. Francis, “Privad: Practical privacy in online advertising,” in NSDI, 2011.

[33] X. Hu, A. Prakash, J. Wang, R. Zhou, Y. Cheng, and H. Yin, “Semantics-preserving dissection of JavaScript exploits via dynamic JS-binary analysis,” in Proceedings of the 19th Symposium on Research in Attacks, Intrusions and Defense (RAID’16), Sep. 2016.

[34] M. Ikram, H. J. Asghar, M. A. Kaafar, A. Mahanti, and B. Krishanmurthy, “Towards seamless tracking-free web: Improved detection of trackers via one-class learning,” in Proceedings on Privacy Enhancing Technology (PETS), 2017.

[35] U. Iqbal, Z. Shafiq, and Z. Qian, “The ad wars: Retrospective measurement and analysis of anti-adblock filter lists,” in Proceedings of the ACM Internet Measurement Conference (IMC), 2017.

[36] N. M. Johnson, J. Caballero, K. Z. Chen, S. McCamant, P. Poosankam, D. Reynaud, and D. Song, “Differential slicing: Identifying causal execution differences for security applications,” in Proceedings of the 2011 IEEE Symposium on Security and Privacy, ser. SP ’11, 2011.

[37] A. Kapravelos, Y. Shoshitaishvili, M. Cova, C. Kruegel, and G. Vigna, “Revolver: An Automated Approach to the Detection of Evasive Web-based Malware,” in USENIX Security Symposium, 2013.

[38] K. Kim, I. L. Kim, C. H. Kim, Y. Kwon, Y. Zheng, X. Zhang, and D. Xu, “J-force: Forced execution on JavaScript,” in Proceedings of the 26th International Conference on World Wide Web, ser. WWW ’17, 2017.

[39] A. Lerner, A. K. Simpson, T. Kohno, and F. Roesner, “Internet Jones and the Raiders of the Lost Trackers: An Archaeological Study of Web Tracking from 1996 to 2016,” in Proceedings of USENIX Security, 2016.

[40] M. Malloy, M. McNamara, A. Cahn, and P. Barford, “Ad blockers: Global prevalence and impact,” in ACM Internet Measurement Conference (IMC), 2016.

[41] H. Metwalley, S. Traverso, M. Mellia, S. Miskovic, and M. Baldi, “The Online Tracking Horde: A View from Passive Measurements,” in Traffic Monitoring and Analysis, 2015.

[42] M. H. Mughees, Z. Qian, and Z. Shafiq, “A first look at ad-block detection: A new arms race on the web,” Proceedings on Privacy Enhancing Technology (PETS), 2017.