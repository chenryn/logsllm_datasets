以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 参考文献

[1] "Return-into-libc without Function Calls (on the x86)," in ACM Conference on Computer and Communications Security (CCS), 2007.

[2] H. Bojinov, D. Boneh, R. Cannings, and I. Malchev, "Address Space Randomization for Mobile Devices," in ACM Conference on Wireless Network Security (WiSec), 2011.

[3] M. Russinovich, "Inside the Windows Vista Kernel: Part 3," http://technet.microsoft.com/en-us/magazine/2007.04.vistakernel.aspx, 2007.

[4] Charles Miller, Dion Blazakis, Dino Dai Zovi, Stefan Esser, Vincenzo Iozzo, and Ralf-Philipp Weinmann, *iOS Hacker’s Handbook*. John Wiley & Sons, Inc., 2012, p. 211.

[5] V. P. Kemerlis, G. Portokalidis, and A. D. Keromytis, "kGuard: Lightweight Kernel Protection Against return-to-user Attacks," in USENIX Security Symposium, 2012.

[6] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum, "Enhanced Operating System Security through Efficient and Fine-Grained Address Space Randomization," in USENIX Security Symposium, 2012.

[7] T. Durden, "Bypassing PaX ASLR Protection," Phrack Magazine, vol. 59, no. 9, 2002.

[8] R. Strackx, Y. Younan, P. Philippaerts, F. Piessens, S. Lachmund, and T. Walter, "Breaking the Memory Secrecy Assumption," in European Workshop on System Security (EuroSec), 2009.

[9] M. Jurczyk, "Windows Security Hardening Through Kernel Address Protection," http://j00ru.vexillium.org/?p=1038, 2011.

[10] P. Akritidis, "Cling: A Memory Allocator to Mitigate Dangling Pointers," in USENIX Security Symposium, 2010.

[11] P. Akritidis, M. Costa, M. Castro, and S. Hand, "Baggy Bounds Checking: An Efficient and Backwards-Compatible Defense against Out-of-Bounds Errors," in USENIX Security Symposium, 2009.

[12] H. Shacham, M. Page, B. Paff, E. Jin Goh, N. Modadugu, and D. Boneh, "On the Effectiveness of Address-Space Randomization," in ACM Conference on Computer and Communications Security (CCS), 2004.

[13] K. Mowery, S. Keelveedhi, and H. Shacham, "Are AES x86 Cache Timing Attacks Still Feasible?" in ACM Cloud Computing Security Workshop (CCSW), 2012.

[14] O. Acıiçmez, B. B. Brumley, and P. Grabher, "New Results on Instruction Cache Attacks," in Workshop on Cryptographic Hardware and Embedded Systems (CHES), 2010.

[15] D. Gullasch, E. Bangerter, and S. Krenn, "Cache Games – Bringing Access-Based Cache Attacks on AES to Practice," in IEEE Symposium on Security and Privacy, 2011.

[16] E. Tromer, D. A. Osvik, and A. Shamir, "Efficient Cache Attacks on AES, and Countermeasures," J. Cryptol., vol. 23, no. 2, Jan. 2010.

[17] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning, "Address Space Layout Permutation (ASLP): Towards Fine-Grained Randomization of Commodity Software," in Annual Computer Security Applications Conference (ACSAC), 2006.

[18] A. Chou, J. Yang, B. Chelf, S. Hallem, and D. Engler, "An Empirical Study of Operating Systems Errors," in ACM Symposium on Operating Systems Principles (SOSP), 2001.

[19] M. M. Swift, B. N. Bershad, and H. M. Levy, "Improving the Reliability of Commodity Operating Systems," ACM Trans. Comput. Syst., vol. 23, no. 1, 2005.

[20] W. A.-K. Abu-Sufah, "Improving the Performance of Virtual Memory Computers," Ph.D. dissertation, University of Illinois at Urbana-Champaign, 1979.

[21] Intel Corporation, "Intel® 64 and IA-32 Architectures Software Developer's Manual," 2007, http://www.intel.com/products/processor/manuals/index.htm.

[22] Intel, "Paging-Structure Caches, TLBs, and Invalidation," http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html.

[23] John L. Hennessy and David A. Patterson, *Computer Architecture: A Quantitative Approach*. Elsevier, Inc., 2012, p. 118.

[24] D. Levinthal, "Performance Analysis Guide for Intel® Xeon® 5500 and Core™ i7 Processors," http://software.intel.com/sites/products/collateral/hpc/vtune/performance-analysis-guide.pdf.

[25] Invisible Things Lab, "From Slides to Silicon in 3 Years!" http://theinvisiblethings.blogspot.de/2011/06/from-slides-to-silicon-in-3-years.html, 2011.

[26] R. Hund, T. Holz, and F. C. Freiling, "Return-Oriented Rootkits: Bypassing Kernel Code Integrity Protection Mechanisms," in USENIX Security Symposium, 2009.

[27] E. J. Schwartz, T. Avgerinos, and D. Brumley, "Q: Exploit hardening made easy," in USENIX Security Symposium, 2011.

[28] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum, "Enhanced Operating System Security Through Efficient and Fine-Grained Address Space Randomization," in Proceedings of the 21st USENIX conference on Security symposium, ser. Security'12. USENIX Association, 2012.

[29] J. Aas, "Understanding the Linux 2.6.8.1 CPU Scheduler," http://joshaas.net/linux/linux-cpu-scheduler.pdf, 2005.

[30] Microsoft, "Description of Performance Options in Windows," http://support.microsoft.com/kb/259025/en-us, 2007.

[31] M. Basseville and I. V. Nikiforov, *Detection of Abrupt Changes: Theory and Application*. Prentice-Hall, 1993.

[32] P. C. Kocher, "Timing Attacks on Implementations of Diffie-Hellman, RSA, DSS, and Other Systems," in International Cryptology Conference (CRYPTO), 1996.

[33] M. Weiss, B. Heinz, and F. Stumpf, "A cache timing attack on AES in virtualization environments," in Financial Cryptography and Data Security (FC), 2012.

[34] O. Acıiçmez, "Yet another MicroArchitectural Attack: Exploiting I-Cache," in ACM Workshop on Computer Security Architecture (CSAW), 2007.

[35] O. Acıiçmez, W. Schindler, and Ç. Kaya Koç, "Improving Brumley and Boneh timing attack on unprotected SSL implementations," in ACM Conference on Computer and Communications Security (CCS), 2005.

[36] D. Brumley and D. Boneh, "Remote Timing Attacks are Practical," in USENIX Security Symposium, 2003.

[37] D. X. Song, D. Wagner, and X. Tian, "Timing Analysis of Keystrokes and Timing Attacks on SSH," in USENIX Security Symposium, 2001.

[38] S. Chen, R. Wang, X. Wang, and K. Zhang, "Side-Channel Leaks in Web Applications: A Reality Today, a Challenge Tomorrow," in IEEE Symposium on Security and Privacy, 2010.

[39] E. W. Felten and M. A. Schneider, "Timing Attacks on Web Privacy," in ACM Conference on Computer and Communications Security (CCS), 2000.

[40] C. V. Wright, L. Ballard, S. E. Coull, F. Monrose, and G. M. Masson, "Spot Me if You Can: Uncovering Spoken Phrases in Encrypted VoIP Conversations," in IEEE Symposium on Security and Privacy, 2008.

[41] A. M. White, A. R. Matthews, K. Z. Snow, and F. Monrose, "Phonotactic Reconstruction of Encrypted VoIP Conversations: Hookt on Fon-iks," in IEEE Symposium on Security and Privacy, 2011.

[42] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage, "Hey, you, get off of my cloud: exploring information leakage in third-party compute clouds," in ACM Conference on Computer and Communications Security (CCS), 2009.

[43] Y. Zhang, A. Juels, A. Oprea, and M. K. Reiter, "HomeAlone: Co-residency detection in the cloud via side-channel analysis," in IEEE Symposium on Security and Privacy, 2011.

[44] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, "Cross-VM Side Channels and Their Use to Extract Private Keys," in ACM Conference on Computer and Communications Security (CCS), 2012.

[45] J. Bonneau and I. Mironov, "Cache-Collision Timing Attacks Against AES," in Cryptographic Hardware and Embedded Systems (CHES), 2006.

[46] C. Percival, "Cache Missing for Fun and Profit," http://www.daemonology.net/hyperthreading-considered-harmful/, 2005.

### 附录 A：地址解析

图8展示了在PAE系统上常规页（上部）和大页（下部）的地址解析。请注意，在第一种情况下，生成的PTE指向一个单一的帧。在第二种情况下，PDE指向一组相邻帧中的第一个，这些帧的总和与大页大小相同。

### 附录 B：双重页错误

图9显示了在Intel i7-870（Bloomfield）处理器上的双重页错误测量结果。使用简单的阈值来区分已分配和未分配的页面是不可行的，因为这会导致大量的误判结果。在图10的放大视图中，可以看到仍然可以区分已分配和未分配的页面。注意，该图使用线条而不是点来强调从高到低值（或反之亦然）的转换。因此，我们在此情况下使用变化点检测（CPD）算法 [40]。

---

希望这些改进能帮助您更好地理解和使用这些参考文献。