### File Upload and Key Distribution
To begin, the file is uploaded to the server, and the encryption key is distributed to authorized users. NEXUS ensures that encryption keys never leave the enclave boundary, which simplifies revocation. Revoking a user's access is as straightforward as re-encrypting the metadata with a new key. For example, if a user is revoked from a directory containing the SFLD workload, NEXUS will need to re-encrypt and update approximately 95KB of metadata for 10MB of file data (since access control is stored in the dirnode). In contrast, for the LFSD workload, the metadata payload reduces to 3.2KB for 3.2GB of file data.

### Takeaway Discussion
Our evaluation results demonstrate NEXUS's ability to meet the demands of standard user workloads. While our approach introduces additional overheads, these are primarily encountered during metadata modification operations, which generally do not fall on the critical path for most personal data workloads. Interactive programs experience less than a 2x performance degradation, which we believe is acceptable for the majority of users. Additionally, NEXUS is designed to operate within a multi-user environment that offers standard file sharing capabilities. Although our evaluation was conducted on a single machine, we document the costs of providing sharing as follows:
1. **Asynchronous Rootkey Exchange** (Section IV-B): Requires a single file write.
2. **Adding/Removing Users** (Section IV-C): Similar to revocation, requiring a single metadata update.
3. **Policy Enforcement** (Section IV-C): Scales with the number of ACL entries, but its cost is dominated by the initial metadata fetch.

### Related Work
#### SGX-Enabled Storage
Since its release, SGX has generated considerable research aimed at achieving secure remote storage [18, 16, 17, 27, 39, 40, 41]. PESOS [18] enforces custom server-side access control on top of untrusted storage, but its prototype requires a LibOS [42], which significantly impacts the TCB. ZeroTrace [17] and OBLIVIATE [16] use ORAM protocols to protect file contents and access patterns from the server, but they do not consider file sharing. These solutions require server-side SGX support, limiting their applicability in personal cloud storage settings. NEXUS circumvents this by running the enclave on the client. SGX-FS [41] is an enclave-protected userspace filesystem, but it does not provide sharing capabilities.

IBBE-SGX [43] proposes a computationally efficient IBBE scheme [44] for scalable access control. However, unlike NEXUS, its access control model restricts all group membership operations to an administrator.

#### Cryptographic Filesystems
Cryptographic filesystems [10, 11, 12, 14] have been proposed as a flexible solution for secure data sharing by encrypting user files before uploading them to the server. Unfortunately, pure encryption techniques face issues with bulk file re-encryption on user revocation, leading to significant performance overheads even with modest access policy updates [15]. Mitigating schemes such as lazy encryption [45] and proxy re-encryption [46] have been proposed, but concerns remain about their practical performance in real-world environments. By having the NEXUS enclave mediate access to all encryption keys, we offer superior user key management and eliminate the need for bulk file re-encryption on policy updates.

### Conclusions
The protection of user data on cloud storage remains an active research area. Existing works either require substantial changes to server/client or impose severe data management burdens on the user. We presented NEXUS, a stackable filesystem that protects files on untrusted storage while providing secure file sharing under fine-grained access control. NEXUS is a performant and practical solution: it requires no server-side changes and imposes minimal key management on users. NEXUS uses an SGX enclave to encrypt file contents on the client and attaches metadata to ensure the encryption keys are enclave-bound. Access control is enforced at each user’s local machine, and file sharing is enabled using SGX remote attestation. Our prototype, implemented on top of AFS, achieves good performance on file I/O operations and incurs modest overheads on workloads involving bulk metadata.

### Acknowledgements
This work was supported in part by the National Science Foundation under awards CNS–1704139 and CNS–1253204.

### References
[1] Business Insider. Google Drive now hosts more than 2 trillion files. http://www.businessinsider.com/2-trillion-files-google-drive-exec-prabhakar-raghavan-2017-5, 2017.

[2] Dropbox. Celebrating half a billion users. https://blogs.dropbox.com/dropbox/2016/03/500-million/, 2016.

[3] SC Media. Data breach exposes about 4 million Time Warner Cable customer records. https://www.scmagazine.com/data-breach-exposes-about-4-million-time-warner-cable-customer-records/article/686592/, 2017.

[4] CNBC. Credit reporting firm Equifax says data breach could potentially affect 143 million US consumers. https://www.cnbc.com/2017/09/07/credit-reporting-firm-equifax-says-cybersecurity-incident-could-potentially-affect-143-million-us-consumers.html, 2017.

[5] ZDNet. Yet another trove of sensitive US voter records has leaked. http://www.zdnet.com/article/yet-another-trove-of-sensitive-of-us-voter-records-has-leaked/, 2017.

[6] Dropbox Terms of Service. https://www.dropbox.com/terms, 04 2018.

[7] Google Terms of Service. https://policies.google.com/terms, 2017 10.

[8] Microsoft Services Agreement. https://www.microsoft.com/en-us/servicesagreement, 2018.

[9] Privacy Rights ClearingHouse. Data Breaches. https://www.privacyrights.org/data-breaches, 2017.

[10] Eu-Jin Goh, Hovav Shacham, Nagendra Modadugu, and Dan Boneh. SiRiUS: Securing Remote Untrusted Storage. In NDSS, volume 3, pages 131–145, 2003.

[11] Aniello Castiglione, Luigi Catuogno, Aniello Del Sorbo, Ugo Fiore, and Francesco Palmieri. A secure file sharing service for distributed computing environments. The Journal of Supercomputing, 67, 2014.

[12] Erel Geron and Avishai Wool. CRUST: Cryptographic Remote Untrusted Storage without Public Keys. International Journal of Information Security, 8(5):357–377, 2009.

[13] Ethan Miller, Darrell Long, William Freeman, and Benjamin Reed. Strong security for distributed file systems. In IEEE International Conference on Performance, Computing, and Communications., pages 34–40. IEEE, 2001.

[14] Atul Adya, William J Bolosky, Miguel Castro, Gerald Cermak, Ronnie Chaiken, John R Douceur, Jon Howell, Jacob R Lorch, Marvin Theimer, and Roger P Wattenhofer. FARSITE: Federated, available, and reliable storage for an incompletely trusted environment. ACM SIGOPS Operating Systems Review, 36, 2002.

[15] William C Garrison, Adam Shull, Steven Myers, and Adam J Lee. On the practicality of cryptographically enforcing dynamic access control policies in the cloud. In Security and Privacy (SP), 2016 IEEE Symposium on, pages 819–838. IEEE, 2016.

[16] Adil Ahmad, Kyungtae Kim, Muhammad Ihsanulhaq Sarfaraz, and Byoungyoung Lee. OBLIVIATE: A Data Oblivious Filesystem for Intel SGX. In 25th Annual Network and Distributed System Security Symposium, NDSS 2018, San Diego, California, USA, February 18-21, 2018, 2018.

[17] Sajin Sasy, Sergey Gorbunov, and Christopher W. Fletcher. ZeroTrace: Oblivious Memory Primitives from Intel SGX. In 25th Annual Network and Distributed System Security Symposium, NDSS 2018, San Diego, California, USA, February 18-21, 2018, 2018.

[18] Robert Krahn, Bohdan Trach, Anjo Vahldiek-Oberwagner, Thomas Knauth, Pramod Bhatotia, and Christof Fetzer. PESOS: Policy Enhanced Secure Object Store. In Proceedings of the Thirteenth EuroSys Conference, EuroSys ’18, pages 25:1–25:17, New York, NY, USA, 2018. ACM.

[19] Intel Software Guard Extensions Programming Reference, 2017. https://software.intel.com/en-us/sgx-sdk.

[20] The OpenAFS Foundation, Inc. http://www.openafs.org/, 2018.

[21] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent Scarlata. Innovative technology for CPU based attestation and sealing. In Proceedings of the 2nd international workshop on hardware and architectural support for security and privacy, volume 13, 2013.

[22] David Goltzsche, Signe Rüsch, Manuel Nieke, Sébastien Vaucher, Nico Weichbrodt, Valerio Schiavoni, Pierre-Louis Aublin, Paolo Cosa, Christof Fetzer, Pascal Felber, et al. Endbox: Scalable middlebox functions using client-side trusted execution. In 2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), pages 386–397. IEEE, 2018.

[23] Bijun Li, Nico Weichbrodt, Johannes Behl, Pierre-Louis Aublin, Tobias Distler, and Rüdiger Kapitza. Troxy: Transparent access to Byzantine fault-tolerant systems. In 2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), pages 59–70. IEEE, 2018.

[24] Mark Russinovich. Azure confidential computing. https://azure.microsoft.com/en-us/blog/azure-confidential-computing/, 5 2018.

[25] Tyler Hunt, Zhiting Zhu, Yuanzhong Xu, Simon Peter, and Emmett Witchel. Ryoan: a distributed sandbox for untrusted computation on secret data. In 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI 16), 2016.

[26] Seong Min Kim, Juhyeng Han, Jaehyeong Ha, Taesoo Kim, and Dongsu Han. Enhancing Security and Privacy of Tor’s Ecosystem by Using Trusted Execution Environments. In NSDI, pages 145–161, 2017.

[27] Pierre-Louis Aublin, Florian Kelbert, Dan O’Keeffe, Divya Muthukumaran, Christian Priebe, Joshua Lind, Robert Krahn, Christof Fetzer, David Eyers, and Peter Pietzuch. LibSEAL: Revealing Service Integrity Violations Using Trusted Execution. In Proceedings of the Thirteenth EuroSys Conference, EuroSys ’18, pages 24:1–24:15, New York, NY, USA, 2018. ACM.

[28] Mahesh Kallahalla, Erik Riedel, Ram Swaminathan, Qian Wang, and Kevin Fu. Plutus: Scalable secure file sharing on untrusted storage. In Fast, volume 3, 2003.

[29] Shay Gueron and Yehuda Lindell. GCM-SIV: Full nonce misuse-resistant authenticated encryption at under one cycle per byte. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, 2015.

[30] Ittai Anati, Frank McKeen, Shay Gueron, H Haitao, Simon Johnson, Rebekah Leslie-Hurd, Harish Patil, Carlos Rozas, and Hisham Shaﬁ. Intel software guard extensions (Intel SGX). In Tutorial at International Symposium on Computer Architecture (ISCA), 2015.

[31] SSL Library mbed TLS / PolarSSL. https://tls.mbed.org/, mar 2019.

[32] Shay Gueron, Adam Langley, and Yehuda Lindell. AES-GCM-SIV implementations. https://github.com/Shay-Gueron/AES-GCM-SIV/, 2018.

[33] Yu-Yuan Chen, Pramod A Jamkhedkar, and Ruby B Lee. A software-hardware architecture for self-protecting data. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 14–27. ACM, 2012.

[34] David Mazieres and Dennis Shasha. Building secure file systems out of Byzantine storage. In Proceedings of the twenty-first annual symposium on Principles of distributed computing, pages 108–117. ACM, 2002.

[35] Jinyuan Li, Maxwell N Krohn, David Mazieres, and Dennis E Shasha. Secure Untrusted Data Repository (SUNDR). In OSDI, volume 4, pages 9–9, 2004.

[36] Intel. Intel(R) Software Guard Extensions for Linux* OS. https://github.com/intel/linux-sgx, 2018.

[37] LevelDB. https://www.leveldb.org, 2018.

[38] SQLite. SQLite Home Page. https://www.sqlite.org, 2018.

[39] S. Shinde, S. Wang, P. Yuan, A. Hobor, A. Roychoudhury, and P. Saxena. BesFS: Mechanized Proof of an Iago-Safe Filesystem for Enclaves. ArXiv e-prints, July 2018.

[40] Ju Chen Yuzhe (Richard) Tang. LPAD: Building Secure Enclave Storage using Authenticated Log-Structured Merge Trees. Cryptology ePrint Archive, Report 2016/1063, 2016. https://eprint.iacr.org/2016/1063.

[41] Dorian Burihabwa, Pascal Felber, Hugues Mercier, and Valerio Schiavoni. SGX-FS: Hardening a File System in User-Space with Intel SGX. In 2018 IEEE International Conference on Cloud Computing Technology and Science (CloudCom), pages 67–72. IEEE, 2018.

[42] Chia-Che Tsai, Donald E Porter, and Mona Vij. Graphene-SGX: A practical library OS for unmodified applications on SGX. In 2017 USENIX ATC, 2017.

[43] Stefan Contiu, Rafael Pires, Sébastien Vaucher, Marcelo Pasin, Pascal Felber, and Laurent Réveillère. IBBE-SGX: Cryptographic Group Access Control Using Trusted Execution Environments. 2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), pages 207–218, 2018.

[44] Cécile Delerablée. Identity-based broadcast encryption with constant size ciphertexts and private keys. In ASIACRYPT, 2007.

[45] Michael Backes, Christian Cachin, and Alina Oprea. Lazy revocation in cryptographic file systems. In Security in Storage Workshop, 2005. SISW’05. Third IEEE International, pages 11–pp. IEEE, 2005.

[46] Zhiguang Qin, Hu Xiong, Shikun Wu, and Jennifer Batamuliza. A survey of proxy re-encryption for secure data sharing in cloud computing. IEEE Transactions on Services Computing, 2016.