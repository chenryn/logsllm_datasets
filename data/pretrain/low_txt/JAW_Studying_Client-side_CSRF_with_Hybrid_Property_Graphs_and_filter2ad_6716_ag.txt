### Notices, 2016

#### References

[39] A. Czeskis, A. Moshchuk, T. Kohno, and H. J. Wang. "Lightweight Server Support for Browser-Based CSRF Protection." *Proceedings of the International Conference on World Wide Web*, 2013.

[40] A. Doupé, L. Cavedon, C. Kruegel, and G. Vigna. "Enemy of the State: A State-Aware Black-Box Web Vulnerability Scanner." *USENIX Security*, 2012.

[41] J. Ferrante, K. J. Ottenstein, and J. D. Warren. "The Program Dependence Graph and Its Use in Optimization." *ACM Transactions on Programming Languages and Systems*, 1987.

[42] K. Gallaba, A. Mesbah, and I. Beschastnikh. "Don't Call Us, We'll Call You: Characterizing Callbacks in JavaScript." *Proceedings of the 2015 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement*, 2015.

[43] S. Guarnieri and B. Livshits. "GULFSTREAM: Staged Static Analysis for Streaming JavaScript Applications." *Proceedings of the USENIX conference on Web application development*, 2010.

[44] B. Hackett, S. Lebresne, B. Burg, and J. Vitek. "Fast and Precise Hybrid Type Inference for JavaScript." *PLDI*, 2012.

[45] N. Hardy. "The Confused Deputy: (or Why Capabilities Might Have Been Invented)." *ACM SIGOPS Operating Systems Review*, 1988.

[46] S. H. Jensen, P. A. Jonsson, and A. Møller. "Remedying the Eval that Men Do." *Proceedings of ISSTA*, 2012.

[47] S. H. Jensen, M. Madsen, and A. Møller. "Modeling the HTML DOM and Browser API in Static Analysis of JavaScript Web Applications." *Proceedings of the ESEC/FSE*, 2011.

[48] S. H. Jensen, M. Madsen, and A. Møller. "Modeling the HTML DOM and Browser API in Static Analysis of JavaScript Web Applications." *Proceedings of the ESEC/FSE*, pages 59–69, 2011.

[49] S. H. Jensen, A. Møller, and P. Thiemann. "Type Analysis for JavaScript." *Proceedings of the 16th International Symposium on Static Analysis*, 2009.

[50] S. H. Jensen, A. Møller, and P. Thiemann. "Interprocedural Analysis with Lazy Propagation." *International Static Analysis Symposium, Lecture Notes in Computer Science, vol 6337*. Springer, Berlin, Heidelberg, 2010.

[51] M. Johns. "The Three Faces of CSRF." Talk at the DeepSec2007 Conference. 2007. https://deepsec.net/archive/2007.deepsec.net/speakers/index.html#martin-johns.

[52] M. Johns and J. Winter. "RequestRodeo: Client Side Protection Against Session Riding." 2006. https://www.owasp.org/images/4/42/RequestRodeo-MartinJohns.pdf.

[53] N. Jovanovic, E. Kirda, and C. Kruegel. "Preventing Cross-Site Request Forgery Attacks." *SecureComm*, 2006.

[54] J. Jueckstock and A. Kapravelos. "VisibleV8: In-Browser Monitoring of JavaScript in the Wild." *Proceedings of the ACM IMC*, 2019.

[55] K. Käfer. "Cross-Site Request Forgery." *Hasso-Plattner-Institut*.

[57] D. A. Kinloch and M. Munro. "Understanding C Programs Using the Combined C Graph Representation." *Proceedings of the International Conference on Software Maintenance*, 1994.

[58] M. S. Lam, R. S. Avaya, and J. D. Ullman. "Compilers: Principles, Techniques, and Tools (2nd Edition)." *Addison-Wesley Longman Publishing Co., Inc.*, Boston, MA, USA, 2006. ISBN 0321486811.

[59] T. Lauinger, A. Chaabane, S. Arshad, W. Robertson, C. Wilson, and E. Kirda. "Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web." *NDSS 2017*, 2017.

[60] S. Lekies, B. Stock, and M. Johns. "25 Million Flows Later: Large-Scale Detection of DOM-Based XSS." *CCS*, 2013.

[61] M. Madsen, B. Livshits, and M. Fanning. "Practical Static Analysis of JavaScript Applications in the Presence of Frameworks and Libraries." *Proceedings of the ESEC/FSE*, 2013.

[62] M. Madsen and A. Møller. "Sparse Dataflow Analysis with Pointers and Reachability." *Technical Report, International Static Analysis Symposium, Lecture Notes in Computer Science, vol 8723*. Springer, Cham, 2014.

[56] F. Kerschbaum. "Simple Cross-Site Attack Prevention." *SecureComm*, 2007.

---

### 30th USENIX Security Symposium
**USENIX Association**

### Additional JAW Details

#### A.1 JAW Semantic Types

**Figure 6: Average time required for JAW to construct and analyze a hybrid property graph categorized by lines of code (LoC).**

| Description | Example of Use | Type |
|-------------|----------------|------|
| Window URL | `window.location.hash` | WIN.LOC |
| Cookie | `doc.cookie` | DOM.COOKIES |
| Local Storage | `doc.localStorage` | LOCAL-STORAGE |
| Session Storage | `doc.sessionStorage` | SESSION-STORAGE |
| PostMessage | `addEventListener(evt, h)` | POST-MESSAGE |
| Window Name | `window.name` | WIN.NAME |
| Document Referrer | `doc.referrer` | DOC.REFERRER |
| DOM Attribute | `doc.getElementById('x').value` | DOM.READ |
| Client-Side Request | `XMLHttpRequest` | REQ |
| Event Dispatch | `el.triggerHandler(evt)` | E-DISPATCH |
| Handler Registration | `el.on(evt, h)` | E-REGISTER |
| Function Input/Output | `function(i){return o = g(i);}` | o ← i |
| Function Input/Output | `function(i){if(cond(i)) return o;}` | o ~ i |

**Table 4: List of semantic types supported by JAW.** These types are assigned to constructs representing input sources of a web application, functions that send HTTP requests, dispatch or register events, and functions with inputs/outputs.

#### A.2 Library Detection

JAW relies on Library Detector [13] to identify the JavaScript libraries used inside a web page. It is used as a bundled script injected by Selenium [15]. Library Detector has a series of pre-defined checks (i.e., usage indicator functions) for each JavaScript library it supports. It searches for known library signatures inside the execution environment by applying the usage indicator functions. For example, global variables set on the Window object by a library are an indicator of the usage of that library. It returns the list of libraries used in the web page. At the time of writing this paper, Library Detector provides support for the detection of 114 different library scripts, including jQuery, React, Angular, and Prototype.

### Additional Evaluation Details

#### B.1 Testbed (Alphabetically Ordered)

This appendix contains the complete list of the web applications and their versions in our testbed:

- AbanteCart 1.2.16
- Akeneo 3.2.26
- Alfresco Community 201911
- Apache Airflow UI 1.10.8
- Axelor 5.3.0
- Bonita 7.6
- CMS Made Simple 2.2.14
- CanvasLMS 2020.01.01.05
- CiviCRM 5.25.0
- CKAN 2.8.0
- Collabtive 3.1
- Composr 10.0.30
- Concrete5 8.5.2
- Coppermine 1.6.08
- Cotonti 0.9.19
- Diaspora 0.7.13.0
- Discourse 2.4.5
- DokuWiki 20180422c
- Dolibarr 11.0.4
- DreamFactory 4.2.2
- Drupal 8.8.6
- ELK 7.6.0
- ERP-Next 12.9.3
- EspoCRM 5.9.1
- FatFreeCRM 0.18.1
- Fluentd UI 1.10.3
- Ghost 3.17.1
- Gitlab CE 13.0.3
- Grafana 6.5.2
- Horde Groupware Webmail 5.2.22
- JFrog Artifactory Open Source 6.19.1
- JasperReports 7.5.0
- Jenkins 2.204.1
- JetBrains YouTrack 2019.3.62973
- Joomla 3.9.18
- Kibana 7.5.1
- Kong Admin UI 0.4.1
- Kubeapps 1.9.0
- Let's Chat 0.4.8
- Liferay 7.2.1
- LimeSurvey 4.2.5
- Live Helper Chat 3.27
- LotusCMS 3.0.5
- Magento 2.3.5
- Mahara 19.10.1
- Mantis 2.24.1
- Matomo 3.13.1
- Mattermost 5.14.0
- Mautic 2.16.2
- MediaWiki 1.34.1
- Moalyss 7.3.0.0
- Modx 2.7.3pl
- Moodle 3.8.3
- MyBB Forum 1.8.22
- Neos 5.2.0
- OXID eShop 6.2.1
- Odoo 13.0.20200515
- Open Atrium 2.646
- Open edX ironwood.2.8
- OpenCart 3.0.3.2
- OpenProject 10.5.1
- Openfire 4.4.4.1
- OrangeHRM 4.4
- OroCRM 4.1.4
- Osclass 3.9.0
- Parse Server 4.2.0
- ParseDashboard 2.0.5
- Phabricator 2020.21
- Pimcore 6.6.4
- Plone 5.2.1
- Pootle 2.8.2
- PrestaShop 1.7.6.2
- ProcessMaker Community 3.3.6
- ProcessWire 3.0.148
- Prometheus 2.18.1
- Publify 9.1.0
- Re:dash 8.0.0
- Redmine 4.1.1
- Report Server Community 3.1.1.6020
- Report Server Enterprise 3.1.1.6020
- ResourceSpace 9.2.14719
- ReviewBoard 3.0.17
- Roundcube 1.4.5
- SEO Panel 4.3.0
- Shopware 6.1.0
- Silverstripe 4.5.2
- Simple Machines Forum 2.0.17
- SonarQube 8.2.0.32929
- Spree 4.1.6
- SugarCRM 6.5.13
- SuiteCRM 7.1.1
- TestLink 1.9.20
- Tiki Wiki CMS Groupware 21
- Tiny Tiny RSS 202006
- Trac 1.5.1
- Typo3 10.4.3
- Weblate 4.0.3
- Webmail Pro PHP 8.3.20
- WordPress 5.4.1
- Xoops 2.5.10
- Zurmo 3.2.7
- eXo Platform 5.3.0
- ownCloud 10.4.1
- phpBB 3.3.0
- phpList 3.5.4
- phpMyAdmin 5.0.1

#### B.2 Run-time Performance of JAW

We deployed the web applications under evaluation on a desktop computer (running macOS Mojave 10.14.3 on an Intel Core i5 with 2.4 GHz, 16 GB RAM, and an SSD), and performed the data collection step (§4.1). We let JAW run for a maximum of 24 hours on each web application, although after a few hours, the data collection module typically does not find any new URLs. Then, we imported the collected data onto our own server (running Ubuntu 18.04 on an Intel(R) Xeon(R) CPU E5-2695 v4 with 2.10 GHz and 72 cores, 252 GB RAM), and instantiated JAW with the data to find client-side CSRF vulnerabilities. We logged all processing times for throughput evaluation. Figure 6 depicts the average processing time for each tool component to construct and analyze a hybrid property graph (HPG).

As shown in the figure, the processing time increases as the lines of code (LoC) grow. The least time-consuming operations are AST and intra-procedural CFG construction. JAW also incurs a preparation delay to import the constructed property graph into a Neo4j database, which typically lasts around 8-11 seconds based on the LoC. The most time-consuming operation is the semantic type propagation.

---

**USENIX Association**
**30th USENIX Security Symposium**