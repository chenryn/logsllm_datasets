### 1978

An adversary is provided with a complete transcript (of sufficient length) that allows it to function as a probabilistic predicate, evaluating each application transcript as either "good" or "bad."

Since each user induces a distribution over application transcripts, this adversarial judgment can be extended to users. Informally, we say that an adversary accepts a user if it judges the user’s traffic as "bad" with sufficiently low probability, and rejects the user otherwise. A statement of passive security thus provides two interpretations:
1. An adversary that accepts User0 will also accept User1 with the covert channel.
2. An adversary that rejects User1 with the covert channel will also reject User0.

Security arguments for the systems discussed in this paper often rely on empirical evidence that the proposed scheme produces traffic which is difficult to distinguish—using known analysis techniques that an adversary could deploy—from typical (i.e., expected or unremarkable) traffic in the target deployment environment. In this context, User0 represents a typical user; that is, a user who generates application traffic commonly observed in the environment. Applying our two interpretations, this implies that the adversary must either accept some usage of the covert channel or incur a heavy cost in disrupting innocent users of the application.

We conclude by noting that the prominent role of user models in hiding covert channels has recently gained more attention. A notable example is OUStralopithecus [28], which borrows techniques from bot detection research to build a generic user simulator that drives an ABCC.

### B. Discussion and Caveats

As discussed in the Introduction, we caution the reader in interpreting our security notion. Specifically, Definition 9 targets an abstraction of a network covert channel, and even if this abstraction is secure, the system itself (due to implementation choices, etc.) may still be vulnerable. Thus, we view a proof of security for a system with respect to our notion as an important and necessary first step, but insufficient for demonstrating the security of any real-world deployment. The actual capabilities of real-world adversaries (e.g., large-scale network censors) are a subject of ongoing study [29, 30, 31, 32], and this brings up a particular cautionary note: depending on one’s perspective, our security notion could be viewed as both too strong and too weak.

The strength of the notion comes from its requirement that a secure ABCC produce a network traffic profile indistinguishable from the reference profile, implying that the adversary is observing and analyzing traffic while maintaining state for the entire connection. While it seems plausible that an adversary could devote such resources to any given connection, it is clearly unreasonable for even a state-level censor to apply this level of scrutiny to every connection.

Many, perhaps most, network covert channels do not even attempt to meet such a security goal, yet some are widely used and generally effective in avoiding detection and blocking. Some systems acknowledge their insecurity relative to such an adversary but assert that this is an unlikely attack vector due to the required resources [33].

On the other hand, Definition 9 could also be viewed as too weak since it does not capture active adversaries, particularly those that engage in commonly observed anti-circumvention tactics such as active probing [34]. Thus, one could argue that it does not target real-world censors. We agree and view our passive security notion as an initial step towards developing an active security notion, which we leave for future work.

Despite substantial progress in characterizing how these adversaries work in practice, much remains unknown, and there are no clear limits on what techniques may be used in the future. Given that one cannot know in advance the precise scenario in which a network covert channel may be deployed, we believe targeting the strongest feasible adversary is the right approach. This aligns with a key principle in developing security notions across cryptography: limit the assumptions placed on the adversary to develop a notion with the broadest applicability.

### VI. Characterizing Secure Constructions

We are now set to characterize common ABCC design patterns and identify the assumptions necessary for achieving pcc security. We are primarily interested in application channels that employ a secure channel for network transport, denoted as App[SC] in the following. Section VII-A provides a generic way to build such an App[SC] by composing a "plaintext" application channel App with a secure channel SC in a straightforward manner. ABCCs designed for such secured application-channels are generally believed to provide better security and are more widely used in real deployments.

Loosely speaking, knowing that a network transport employs a secure channel allows Embedwire (in particular) to focus only on the "shape" of the traffic it sends to the network, relative to the shape of the traffic the application Source would send. It also allows us to cleanly separate the contributions of wc and ws to the distinguishability of overt and covert traffic. More generally, we can analyze generic wire-only and user-only constructions without appealing to the specific realizations of the component algorithms of the ABCC.

For ABCCs built for plaintext application channels, clean reasoning about generic constructions seems considerably more difficult. In this setting, how one instantiates the ABCC matters far more than when a secure channel can be relied upon to hide the particular bits on the wire and to (effectively) flatten the distribution over network messages. As such, we do not present generic constructions or formal security theorems for these classes of ABCCs. Nonetheless, the tools we develop here help us make principled, informal security statements about the security of "plaintext" ABCCs.

Table I provides an overview of some concrete schemes discussed in §II and maps each scheme to its corresponding architecture as discussed below.

### A. Traffic Matching

For applications that use a secure channel for message transport, our intuition tells us that an eavesdropping adversary learns nothing but the shape of each message sequence. Of course, the mere use of a secure channel does not guarantee that a covert channel is secure, because the covert channel may induce unique or unusual patterns of application traffic that are easily distinguished.

In Figure 4, we present the covert shape (cs) and overt shape (os) oracles, which capture this intuition as variants of the cc and oc experiments, respectively, where both wc and ws are randomized (each bit is replaced with the value of a coin flip) before being returned in the query response. This allows us to define a notion that precisely captures the change in traffic patterns produced in the presence of the covert channel.

**Definition 11 (Traffic-Shape Indistinguishability)**: Fix application channel App, user User, App-based covert channel Π, and environment context ξ. Let CS be the game instantiated by ExpcsApp,User,Π,ξ and let OS be the game instantiated by ExposApp,User,Π,ξ. For a fixed adversary A, define the traffic-shape advantage as
\[ \text{Advts}_{\text{App,User,Π,ξ}}(A) = \Delta(\text{CS}, \text{OS}). \]
We say that ABCC Π is (t, q, µ, ϵ)-shape-indistinguishable relative to App, User, and ξ if, for all A ∈ A(t, q, µ), the traffic-shape advantage is bounded from above by ϵ.

**Remark**: One could also model the "shape" of each sequence through unary encoding; we choose to randomize the bits as it simplifies the technical analysis for, e.g., ABCCs that utilize a secure channel indistinguishable from random bits.

With this definition, we observe that the (fixed-User) pcc-advantage can be written as
\[ \Delta(\text{CC}, \text{OC}) = \Delta(\text{CC}, \text{CS}) + \Delta(\text{CS}, \text{OS}) + \Delta(\text{OS}, \text{OC}) \]
where the middle term on the right side is the traffic-shape advantage, and in the case of ABCCs over stream-based channels, the first and last terms can be bounded by straightforward reductions to the IND-CPFA security (Definition 3) of the channel. In §VII-B, we use this equality to establish a theorem statement about the security of secure transport ABCCs that employ non-trivial user-side embedding.

### B. Traffic Replacement and Recovery

ABCCs that employ non-trivial wire-side embeddings have finer control over both the client and server traffic observed by the adversary, as Embedwire directly outputs wc and Extractwire can provide carefully chosen inputs to Sink to influence the ws it produces in response. By working on the wire side of the application, Embedwire learns the exact shape of the traffic and can substantially alter the underlying messages while preserving this shape. The key challenge here is ensuring that Extractwire can "undo" the alterations made by Embedwire.