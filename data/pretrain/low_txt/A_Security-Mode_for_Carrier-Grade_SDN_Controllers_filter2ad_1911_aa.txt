# A Security-Mode for Carrier-Grade SDN Controllers

**Authors:**
- Changhoon Yoon
- Seungwon Shin
- Phillip A. Porras
- Vinod Yegneswaran
- Heedo Kang
- Martin W. Fong
- Brian O'Connor
- Thomas Vachuska

## Abstract
The management of modern networks is increasingly influenced by software-defined networks (SDNs). This trend is reflected in the growing availability of innovative SDN-based switches, controllers, and applications. Several commercial and open-source SDN operating systems (NOS) have been introduced, including distributed controller frameworks like Open Network Operating System (ONOS) and OpenDaylight (ODL), which are designed for large, carrier-grade networks. These frameworks are characterized by their elastic cluster controller architecture, network virtualization support, and modular design. Given their flexibility, extensive feature set, and collaborative community support, they serve as attractive platforms for a wide range of third-party distributed network management applications.

This paper identifies common security requirements for policy enforcement in distributed controller environments. We present the design of a network application permission-enforcement model and an integrated security subsystem (SM-ONOS) for managing distributed applications running on an ONOS controller. We discuss the underlying motivations for these security extensions and their implications for securely managing large-scale SDNs. Our performance assessments demonstrate that the security-mode extension imposes reasonable overheads, ranging from 5% to 20% for clusters of 1 to 7 nodes.

## ACM Reference Format
Changhoon Yoon, Seungwon Shin, Phillip A. Porras, Vinod Yegneswaran, Heedo Kang, Martin W. Fong, Brian O'Connor, and Thomas Vachuska. 2017. A Security-Mode for Carrier-Grade SDN Controllers. In Proceedings of ACSAC 2017. ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3134600.3134603

## 1. Introduction
The advent of software-defined network operating systems (NOS) began with the introduction of the first OpenFlow controller, NOX [10]. Since then, many NOSs have been proposed and implemented to overcome the limitations of their predecessors. For example, Beacon [7] improved developer productivity and runtime performance, while ONIX [14] addressed scalability issues in SDNs through a distributed NOS architecture. Today, ONOS [4] and OpenDaylight (ODL) [2] are among the most popular and advanced open-source NOS projects, offering high scalability, reliability, and extensibility.

In this paper, we introduce a new security subsystem designed to enhance the security of distributed, carrier-grade NOSs such as ONOS and ODL. These security extensions provide an administrative permission enforcement service to impose access constraints on each distributed SDN application hosted on the NOS. Previous efforts to ensure non-interference in SDNs include network-slicing approaches [3, 25] and application compartmentalization [12, 23, 24]. Unlike these, our work focuses on large-scale SDNs with hundreds of switches, where a single logical controller is instantiated across multiple virtual instances. We address this challenge by adopting a fundamentally different approach, which we validate can be scalably enforced in a modern, large-scale, distributed SDN control framework.

Specifically, our proposed security extensions enable the NOSs to enforce two types of access control policies: developer-specified policies and NOS operator-specified policies. Developer-specified policies enumerate the bundle authority type, application services, and per-service APIs required by the application at runtime. These permissions are specified within the application configuration manifest, allowing the operator to evaluate exactly which services and APIs an application may use when deployed.

Operator-specified policies allow a network administrator to compartmentalize an SDN applicationâ€™s access to certain segments of the network topology or to impose network header criteria constraints to limit the type of traffic the application can manage. For operator-specified policies, we introduce two new permission mechanisms: topology permissions and header-space permissions. Topology permissions impose constraints on which portions of the global network topology graph (i.e., which network devices) an application may access at runtime. This enables the NOS operator to partition the authority of applications into virtual subnetworks. Header-space permissions enable the operator to constrain applications to a subset of traffic that matches specific header-space criteria.

To evaluate the effectiveness of our security subsystem, we implement Security-Mode ONOS (SM-ONOS). Section 5 discusses the implementation solutions to overcome the challenges in extending ONOS to support application permission enforcement. Specifically, we propose a scheme for security policy expression of SDN applications. The specification is designed to be both intuitive, so that NOS operators can use it to evaluate the privilege requirements of an SDN application, and highly inclusive to fully constrain the application behavior. We also introduce an SDN application vetting mechanism that ensures NOS operators have reviewed and approved the security policy before the actual activation of the SDN application in a distributed NOS environment. Finally, we introduce a new capability for per-app network access control in a distributed NOS environment. In Section 7, we assess the effectiveness of SM-ONOS by presenting three practical use-cases and measuring key performance characteristics, such as its impact on flow mod installation throughput.

This paper provides several research contributions:
- We present the design of several application-layer security extensions for emerging distributed (carrier-grade) OpenFlow-based NOSs, such as ONOS and ODL. While SDN application security mediation has been explored in prior work on smaller-scale networks, here we propose pragmatic privilege enforcement mechanisms for networks with hundreds of switches and physically distributed topologies.
- We introduce the concept of the SDN application security manifest, addressing two fundamental challenges in administering networks with third-party SDN applications: 1) existing NOSs offer no mechanisms to compare SDN applications against their privilege requirements, and 2) NOS administrators have no current methods to restrain application privilege usage within a target deployment.
- We present an implementation of our security extensions within one of the top distributed, carrier-grade, OpenFlow NOSs: ONOS. We refer to our implementation as SM-ONOS, which is now integrated as a new open-source subsystem within the ONOS distribution package. We describe various use cases and deployment scenarios for SM-ONOS.
- We examine the performance overhead of SM-ONOS, including its performance characteristics in distributed WAN topologies with up to seven distributed network locations. We also explore optimizations such as permission-check caching to further enhance the scalability of our security extensions.

## 2. Background
In this section, we discuss key aspects of SDN and the most popular open-source NOSs available today: ONOS (Open Network Operating System) and ODL (OpenDaylight), both of which employ the OSGi (Open Services Gateway initiative) framework.

### 2.1 Open SDN
Since its emergence, SDN has matured to become an effective and viable networking technology, gradually supplanting legacy network infrastructures. The success of SDN can be attributed to academic research, open-source community development, and industry partnerships. These efforts have led to the development of protocol standards like OpenFlow [18] and a suite of SDN controllers [2, 4].

Furthermore, SDN controllers now publish Northbound APIs, allowing independent developers to write useful SDN applications. These open APIs accelerate innovation and encourage wider adoption of SDN technology. In the case of ONOS and ODL, many developers from the open-source community and partner companies have contributed a number of useful SDN applications. These cutting-edge SDN controllers support hot deployment of applications to ensure continuous and flexible network service provisioning. While these capabilities invigorate the SDN application ecosystem, they also introduce new security issues, as discussed in Section 3.

### 2.2 OSGi and Open-Source NOS Projects
ONOS and ODL are two popular open-source NOSs built on the OSGi framework, which is often referred to as a dynamic module system. OSGi [21] allows for the dynamic installation, uninstallation, start, and stop of modules (or OSGi bundles) without shutting down the entire system, providing a reliable infrastructure for NOSs. In addition to dynamic configurability, OSGi also facilitates the establishment of a modular architecture, enhancing architectural coherence, testability, and maintainability. Major NOS vendors (e.g., Brocade, Cisco, Ericsson, HP) have built commercial NOS products based on both ONOS and ODL.

OSGi includes an optional security layer based on the Java 2 security architecture. Within the OSGi service platform, a code unit can be authenticated based on the (download) location of the OSGi bundle. Since OSGi manages its special protection domain, or bundle location, it provides dedicated services for managing permissions associated with the authenticated unit of code. For example, the Permission Admin service allows the management of security policies by granting permissions to OSGi bundles based on their full location strings. Although the framework security is an optional layer, the Felix OSGi framework project implements the security layer as a subproject of the Felix project [27].

## 3. Motivating Challenges
A key incentive for the adoption of any NOS in the competitive SDN landscape is the extent to which it hosts a diverse range of active network application projects. However, a wide selection of third-party network applications raises a significant vetting challenge for NOS operators: how to select an effective combination of network applications that can coexist in a secure and stable manner? The central goal of this paper is to offer a distributed NOS security service that addresses this concern. We break down this challenge into the following concerns:

### How to Compare SDN Application Privilege Requirements?
An SDN ecosystem with a diverse set of third-party applications increases the need for efficient application vetting with respect to the services and functions each candidate application requires. One approach to application vetting is for the NOS operator to conduct a pre-deployment source-code review to evaluate whether the services and functions performed by an application are reasonable, given the target object. However, conducting a code review is not only a daunting task but is also prone to human error and may be hindered by obfuscated code. Thus, we desire a mechanism that allows SDN application developers to express which services and API permissions are necessary for the application to function. Such an application manifest should provide an efficient means for administrative review and the ability for the administrator to adjust the manifest to disable unnecessary functions.

Even when an SDN application is thoroughly inspected and deployed to the network, there is still a possibility that the application may execute functions not part of the inspected manifest. If the manifest is incomplete, accesses not explicitly granted at deployment time should be denied.

### How to Avoid Application Conflicts in Large Network Topologies?
SDN applications have the potential to conflict and interfere with other applications as they each work to manage the global network topology. ONOS, for example, employs a distributed architecture that instantiates both the ONOS stack and applications across multiple physically distributed servers, allowing it to scale across wide area networks or other segmented topologies. Each ONOS instance, referred to as a node, operates an instance of each deployed SDN application, and all applications share a common access to the global network topology. Currently, NOSs lack mechanisms to constrain applications to specific sub-portions of the global topology (i.e., each application instance within each node has the ability to fully access the global topology). Even if an SDN application is designed specifically to provide management for a target subnetwork, it operates unconstrained and can alter other portions of the topology.

The ONOS project will soon introduce a virtual network abstraction to address some of these issues.