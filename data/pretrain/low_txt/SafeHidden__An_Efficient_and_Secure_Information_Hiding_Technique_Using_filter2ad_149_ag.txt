### USENIX Association
28th USENIX Security Symposium    1253

#### Thread-Private Memory Mechanism for Enhanced Security
To enhance security, a new thread-private memory mechanism is proposed to isolate thread-local safe areas. This mechanism prevents adversaries from reducing the randomization entropy through thread spraying. Additionally, it randomizes the safe areas after a TLB (Translation Lookaside Buffer) miss event to thwart cache-based side-channel attacks. Experimental results demonstrate that our prototype not only successfully mitigates all existing attacks but also incurs minimal performance overhead.

#### Acknowledgments
We are grateful to our shepherd, Mathias Payer, for his guidance in finalizing this paper. We also thank the anonymous reviewers for their insightful suggestions and comments. This research is supported by the National High Technology Research and Development Program of China under grant 2016QY07X1406 and the National Natural Science Foundation of China (NSFC) under grant U1736208. Pen-Chung Yew is supported by the National Science Foundation under grant CNS-1514444. Yinqian Zhang is partially supported by gifts from Intel and the DFINITY Foundation.

#### References
1. **Kernel Page-Table Isolation**  
   https://www.kernel.org/doc/html/latest/x86/pti.html

2. **Intel Corporation**  
   *Intel 64 and IA-32 Architectures Software Developer’s Manual*  

3. **ABADI, M., BUDIU, M., ERLINGSSON, U., AND LIGATTI, J.**  
   Control-Flow Integrity. In Proceedings of the 12th ACM Conference on Computer and Communications Security (CCS '05), ACM.

4. **BACKES, M., AND N ¨URNBERGER, S.**  
   Oxymoron: Making Fine-Grained Memory Randomization Practical by Allowing Code Sharing. In Proceedings of the 23rd USENIX Security Symposium, San Diego, CA, USA, August 20-22, 2014.

5. **BASU, A., GANDHI, J., CHANG, J., HILL, M. D., AND SWIFT, M. M.**  
   Efficient Virtual Memory for Big Memory Servers. SIGARCH Comput. Archit. News (2013).

6. **BHATTACHARJEE, A.**  
   Large-Reach Memory Management Unit Caches. In Proceedings of the 46th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO-46), 2013.

7. **BITTAU, A., MARCHENKO, P., HANDLEY, M., AND KARP, B.**  
   Wedge: Splitting Applications into Reduced-Privilege Compartments. In the 5th USENIX Symposium on Networked Systems Design and Implementation (2008).

8. **BUROW, N., MCKEE, D., CARR, S. A., AND PAYER, M.**  
   CFIxx: Object Type Integrity for C++. In NDSS 2018.

9. **CHEN, S., ZHANG, X., REITER, M. K., AND ZHANG, Y.**  
   Detecting Privileged Side-Channel Attacks in Shielded Execution with Déjà Vu. In Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security (ASIA CCS '17).

10. **CHEN, X., BOS, H., AND GIUFFRIDA, C.**  
    CodeArmor: Virtualizing the Code Space to Counter Disclosure Attacks. In 2017 IEEE European Symposium on Security and Privacy.

11. **CHEN, Y., REYMONDJOHNSON, S., SUN, Z., AND LU, L.**  
    Shreds: Fine-Grained Execution Units with Private Memory. In IEEE Symposium on Security and Privacy (2016).

12. **CRANE, S., LARSEN, P., BRUNTHALER, S., AND FRANZ, M.**  
    Booby Trapping Software. In NSPW (2013), ACM, pp. 95–106.

13. **CRANE, S., LIEBCHEN, C., HOMESCU, A., DAVI, L., LARSEN, P., SADEGHI, A. R., BRUNTHALER, S., AND FRANZ, M.**  
    Readactor: Practical Code Randomization Resilient to Memory Disclosure. In 2015 IEEE Symposium on Security and Privacy.

14. **CRANE, S. J., VOLCKAERT, S., SCHUSTER, F., LIEBCHEN, C., LARSEN, P., DAVI, L., SADEGHI, A.-R., HOLZ, T., DE SUTTER, B., AND FRANZ, M.**  
    It’s a Trap: Table Randomization and Protection Against Function-Reuse Attacks. In ACM SIGSAC Conference on Computer and Communications Security (2015).

15. **DAVI, L., LIEBCHEN, C., SADEGHI, A., SNOW, K. Z., AND MONROSE, F.**  
    Isomeron: Code Randomization Resilient to (Just-In-Time) Return-Oriented Programming. In 22nd Annual Network and Distributed System Security Symposium (NDSS 2015).

16. **FRASSETTO, T., JAUERNIG, P., LIEBCHEN, C., AND SADEGHI, A.-R.**  
    IMIX: In-Process Memory Isolation Extension. In 27th USENIX Security Symposium.

17. **GANDHI, J., BASU, A., HILL, M. D., AND SWIFT, M. M.**  
    Badgertrap: A Tool to Instrument x86-64 TLB Misses. SIGARCH Comput. Archit. News (2014).

18. **GARFINKEL, T., PFAFF, B., CHOW, J., ROSENBLUM, M., AND BONEH, D.**  
    Terra: A Virtual Machine-Based Platform for Trusted Computing. In Proceedings of the Nineteenth ACM Symposium on Operating Systems Principles (SOSP '03).

19. **GAWLIK, R., KOLLENDA, B., KOPPE, P., GARMA NY, B., AND HOLZ, T.**  
    Enabling Client-Side Crash-Resistance to Overcome Diversification and Information Hiding. In 23rd Annual Network and Distributed System Security Symposium (NDSS 2016).

20. **GÖKTAS, E., GAWLIK, R., KOLLENDA, B., ATHANASOPOULOS, E., PORTOKALIDIS, G., GIUFFRIDA, C., AND BOS, H.**  
    Undermining Information Hiding (and What to Do About It). In 25th USENIX Security Symposium.

21. **GRAS, B., RAZAVI, K., BOS, H., AND GIUFFRIDA, C.**  
    Translation Leak-Aside Buffer: Defeating Cache Side-Channel Protections with TLB Attacks. In 27th USENIX Security Symposium (USENIX Security 18).

22. **GRAS, B., RAZAVI, K., BOSMAN, E., BOS, H., AND GIUFFRIDA, C.**  
    ASLR on the Line: Practical Cache Attacks on the MMU. In NDSS (2017).

23. **GUAN, L., LIN, J., LUO, B., JING, J., AND WANG, J.**  
    Protecting Private Keys Against Memory Disclosure Attacks Using Hardware Transactional Memory. In 2015 IEEE Symposium on Security and Privacy.

24. **HOFMANN, O. S., KIM, S., DUNN, A. M., LEE, M. Z., AND WITCHEL, E.**  
    InkTag: Secure Applications on an Untrusted Operating System. In Conference on Architectural Support for Programming Languages and Operating Systems (2013).

25. **HSU, T. C.-H., HOFFMAN, K., EUGSTER, P., AND PAYER, M.**  
    Enforcing Least Privilege Memory Views for Multithreaded Applications. In the 2016 ACM Conference on Computer and Communications Security.

26. **JAMES E. SMITH AND RAVI NAIR.**  
    *Virtual Machines - Versatile Platforms for Systems and Processes*. Elsevier, 2005.

27. **JANG, Y., LEE, S., AND KIM, T.**  
    Breaking Kernel Address Space Layout Randomization with Intel TSX. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security.

28. **KOCHER, P., GENKIN, D., GRUSS, D., HAAS, W., HAMBURG, M., LIPP, M., MANGARD, S., PRESCHER, T., SCHWARZ, M., AND YAROM, Y.**  
    Spectre Attacks: Exploiting Speculative Execution. CoRR abs/1801.01203 (2018).

29. **KONING, K., CHEN, X., BOS, H., GIUFFRIDA, C., AND ATHANASOPOULOS, E.**  
    No Need to Hide: Protecting Safe Regions on Commodity Hardware. In the Twelfth European Conference on Computer Systems (2017).

30. **KUZNETSOV, V., SZEKERES, L., PAYER, M., CANDEA, G., SEKAR, R., AND SONG, D.**  
    Code-Pointer Integrity. In the 11th USENIX Conference on Operating Systems Design and Implementation (2014).

31. **LAADAN, O., VIENNOT, N., AND NIEH, J.**  
    Transparent, Lightweight Application Execution Replay on Commodity Multiprocessor Operating Systems. In Proceedings of the ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems (SIGMETRICS '10).

32. **LIPP, M., SCHWARZ, M., GRUSS, D., PRESCHER, T., HAAS, W., FOGH, A., HORN, J., MANGARD, S., KOCHER, P., GENKIN, D., YAROM, Y., AND HAMBURG, M.**  
    Meltdown: Reading Kernel Memory from User Space. In 27th USENIX Security Symposium (USENIX Security 18) (2018).

33. **LIU, Y., XIA, Y., GUAN, H., ZANG, B., AND CHEN, H.**  
    Concurrent and Consistent Virtual Machine Introspection with Hardware Transactional Memory. In IEEE 20th International Symposium on High Performance Computer Architecture (HPCA'14) (2014).

34. **LIU, Y., ZHOU, T., CHEN, K., CHEN, H., AND XIA, Y.**  
    Thwarting Memory Disclosure with Efficient Hypervisor-Enforced Intra-Domain Isolation. In the 22nd ACM SIGSAC Conference on Computer and Communications Security (2015).

35. **LU, K., LEE, W., NÜRNBERGER, S., AND BACKES, M.**  
    How to Make ASLR Win the Clone Wars: Runtime Re-Randomization. In 23rd Annual Network and Distributed System Security Symposium (NDSS 2016).

36. **LU, K., SONG, C., LEE, B., CHUNG, S. P., KIM, T., AND LEE, W.**  
    ASLR-Guard: Stopping Address Space Leakage for Code Reuse Attacks. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS '15).

37. **MASHTIZADEH, A. J., BITTAU, A., BONEH, D., AND MAZIÈRES, D.**  
    CCFI: Cryptographically Enforced Control Flow Integrity. In ACM Conference on Computer and Communications Security (2015), ACM.

38. **MERRIFIELD, T., AND TAHERI, H. R.**  
    Performance Implications of Extended Page Tables on Virtualized x86 Processors. In Proceedings of the 12th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments (VEE '16).

39. **MOGOSANU, L., RANE, A., AND DAUTENHAHN, N.**  
    Microstache: A Lightweight Execution Context for In-Process Safe Region Isolation. In RAID (2018).

40. **MOHAN, V., LARSEN, P., BRUNTHALER, S., HAMLEN, K. W., AND FRANZ, M.**  
    Opaque Control-Flow Integrity. In 22nd Annual Network and Distributed System Security Symposium (NDSS 2015).

41. **NATHAN BUROW, X. Z., AND PAYER, M.**  
    Shining Light on Shadow Stacks. In 2019 IEEE Symposium on Security and Privacy (2019).

42. **NIU, B., AND TAN, G.**  
    Per-Input Control-Flow Integrity. In the 22nd ACM SIGSAC Conference on Computer and Communications Security (2015).

43. **OIKONOMOPOULOS, A., ATHANASOPOULOS, E., BOS, H., AND GIUFFRIDA, C.**  
    Poking Holes in Information Hiding. In 25th USENIX Security Symposium.

44. **OSVIK, D. A., SHAMIR, A., AND TROMER, E.**  
    Cache Attacks and Countermeasures: The Case of AES. In 6th Cryptographers’ Track at the RSA Conference on Topics in Cryptology (2006).

45. **ROGLIA, G. F., MARTIGNONI, L., PALEARI, R., AND BRUSCHI, D.**  
    Surgically Returning to Randomized lib(c). In ACSAC (2009).

46. **SCHAÏK, S. V., RAZAVI, K., GRAS, B., BOS, H., AND GIUFFRIDA, C.**  
    Revanc: A Framework for Reverse Engineering Hardware Page Table Caches. In European Workshop on Systems Security (2017).

47. **SHACHAM, H., PAGE, M., PFAFF, B., GOH, E.-J., MODADUGU, N., AND BONEH, D.**  
    On the Effectiveness of Address-Space Randomization. In the 11th ACM Conference on Computer and Communications Security (2004).

48. **SHIH, M.-W., LEE, S., KIM, T., AND PEINADO, M.**  
    T-SGX: Eradicating Controlled-Channel Attacks Against Enclave Programs. In NDSS (2017).

49. **SNOW, K. Z., MONROSE, F., DMITRIENKO, A., LIEBCHEN, C., AND SADEGHI, A. R.**  
    Just-In-Time Code Reuse: On the Effectiveness of Fine-Grained Address Space Layout Randomization. In Security and Privacy 2013 (2013).

50. **TA-MIN, R., LITTY, L., AND LIE, D.**  
    Splitting Interfaces: Making Trust Between Applications and Operating Systems Configurable. In the 7th Symposium on Operating Systems Design and Implementation (2006).

51. **TANG, A., SETHUMADHAVAN, S., AND STOLFO, S. J.**  
    Heisenbyte: Thwarting Memory Disclosure Attacks Using Destructive Code Reads. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (2015).

52. **VAHLDIEK-OBERWAGNER, A., ELNIKETY, E., DUARTE, N. O., GARG, D., AND DRUSCHEL, P.**  
    ERIM: Secure and Efficient In-Process Isolation with Memory Protection Keys. ArXiv e-prints (2018).

53. **VAN DER VEEN, V., ANDRIESSE, D., GÖKTAS, E., GRAS, B., SAMBUC, L., SLOWINSKA, A., BOS, H., AND GIUFFRIDA, C.**  
    Practical Context-Sensitive CFI. In Proceedings of the 22nd Conference on Computer and Communications Security (CCS'15).

54. **VUSEC.**  
    Reverse Engineering Page Table Caches in Your Processor, 2017. https://github.com/vusec/revanc.

55. **WAHBE, R., LUCCO, S., ANDERSON, T. E., AND GRAHAM, S. L.**  
    Efficient Software-Based Fault Isolation. In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles (1993).

56. **WANG, X., ZANG, J., WANG, Z., LUO, Y., AND LI, X.**  
    Selective Hardware/Software Memory Virtualization. In the 7th ACM Conference on Virtual Execution Environments (2011).

57. **WANG, Z., WU, C., LI, J., LAI, Y., ZHANG, X., HSU, W.-C., AND CHENG, Y.**  
    Reranz: A Light-Weight Virtual Machine to Mitigate Memory Disclosure Attacks. In the 13th ACM Conference on Virtual Execution Environments (2017).

58. **WERNER, J., BALTAS, G., DALLARA, R., OTTERNES, N., SNOW, K. Z., MONROSE, F., AND POLYCHRONAKIS, M.**  
    No-Execute-After-Read: Preventing Code Disclosure in Commodity Software. In Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security (ASIA CCS '16).

59. **WILLIAMS-KING, D., GOBIESKI, G., WILLIAMS-KING, K., BLAKE, J. P., YUAN, X., COLP, P., ZHENG, M., KEMERLIS, V. P., YANG, J., AND AIELLO, W.**  
    Shuffler: Fast and Deployable Continuous Code Re-Randomization. In 12th USENIX Conference on Operating Systems Design and Implementation.

60. **ZHANG, C., WEI, T., CHEN, Z., DUAN, L., SZEKERES, L., MCCAMANT, S., SONG, D., AND ZOU, W.**  
    Practical Control Flow Integrity and Randomization for Binary Executables. In IEEE Symposium on Security and Privacy (2013).

61. **ZHANG, M., AND SEKAR, R.**  
    Control Flow and Code Integrity for COTS Binaries: An Effective Defense Against Real-World ROP Attacks. In the 31st Annual Computer Security Applications Conference (2015).

---

### USENIX Association
28th USENIX Security Symposium    1256