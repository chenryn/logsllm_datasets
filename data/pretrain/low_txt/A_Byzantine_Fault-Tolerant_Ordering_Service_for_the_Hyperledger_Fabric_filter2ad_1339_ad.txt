# BFT Ordering Service for Hyperledger Fabric: Design, Implementation, and Evaluation

## Abstract
This paper describes the design, implementation, and evaluation of a Byzantine Fault Tolerant (BFT) ordering service for Hyperledger Fabric using the BFT-SMART replication library. The experimental evaluation shows that peak throughput is limited by either the rate at which block signatures are generated or the rate of envelopes ordered by the total order protocol. For smaller envelope sizes, increasing the block size while decreasing the signature generation rate can yield higher throughput. Even with large block sizes, the ordering service achieves a sustained throughput of approximately 2200 transactions/second, significantly outperforming Ethereum and Bitcoin.

## 1. Introduction
Blockchain technology, initially introduced by Bitcoin to solve the double-spending problem in permissionless peer-to-peer networks, has gained traction in various industries. Permissioned blockchains, such as those used in enterprise settings, require efficient and secure ordering services. This paper presents a BFT ordering service for Hyperledger Fabric, leveraging the BFT-SMART replication library.

## 2. Experimental Results
### 2.1 Latency Analysis
Figure 7 shows the latency results for a geo-distributed micro-benchmark with a block size of 100 envelopes. WHEAT consistently exhibits lower latency than BFT-SMART across all frontends, always below 500 milliseconds and up to 45% less. Envelope size has a modest impact on latency, with a difference of no more than 61 milliseconds between 4k and 400k bytes blocks. However, frontend placement significantly affects latency, with differences of over 90 milliseconds between Virginia (weighted Vmax) and São Paulo (weighted Vmin), and 120 milliseconds between São Paulo and Oregon.

### 2.2 Throughput Analysis
Throughput is bound by the rate of block signature generation or the rate of envelope ordering. For smaller envelope sizes, increasing the block size and reducing the signature generation rate can improve throughput. With 32 receivers and a cluster of 10 nodes, the service achieves a sustained throughput of approximately 2200 transactions/second, more than twice Ethereum's theoretical peak and vastly superior to Bitcoin's peak.

## 3. Possible Improvements on Fabric
### 3.1 Signature Generation
Fabric expects each block to contain two signatures, one for integrity and another to bind transactions to an execution context. This can lead to performance penalties, especially with small transactions and few frontends. Our implementation produces a single signature per block, which is sufficient for integrity protection. We recommend removing the second signature to enhance performance.

### 3.2 Block Assembly and Append Methods
Fabric is better suited for crash-only ordering services like Kafka, which generate a stream of envelopes rather than blocks. In our case, ordering nodes locally assemble blocks and produce signatures, which are then appended to the local ledger. We had to augment Fabric to support receiving pre-signed blocks and appending them to the chain, as the existing methods do not provide additional protection in a Byzantine fault scenario.

### 3.3 Inter-Process Communication
We use UNIX sockets for communication between the Fabric process (Go) and BFT-SMART (Java). This adds overhead that could be mitigated with a Go wrapper for BFT-SMART or by enhancing the Fabric Java SDK to handle client requests directly.

### 3.4 Reconfiguration Support
BFT-SMART natively supports view reconfiguration, allowing our ordering service to fully support reconfiguration of ordering nodes. However, this does not extend to the set of frontends, particularly the Fabric Go process. To support reconfiguration, Fabric needs to be augmented to transfer the ledger between these processes.

## 4. Related Work
Permissioned blockchain platforms include Chain, Tendermint, Kadena, and Symbiont Assembly. A recent survey [3] compares these protocols and highlights BFT-SMART as a prominent candidate. Services built on BFT-SMART, such as SieveQ, focus on robustness against DoS attacks and recovery of faulty replicas, while our service focuses on block generation for Fabric.

## 5. Conclusion
This paper presents a BFT ordering service for Hyperledger Fabric using BFT-SMART. Our experimental evaluation demonstrates high throughput and low latency, even in geo-replicated settings. Future work includes further optimizations and enhancements to the Fabric codebase.

## 6. Acknowledgment
This work was supported by an IBM Faculty Award, FCT through the LASIGE Research Unit and the IRCoC project, and the European Commission through the H2020 SUPERCLOUD project.

## 7. References
[1] M. Vukolić, “The quest for scalable blockchain fabric: Proof-of-work vs. BFT replication,” in Open Problems in Network Security - IFIP WG 11.4 International Workshop, Zurich, Switzerland, 2015.
[2] M. Castro and B. Liskov, “Practical Byzantine fault tolerance and proactive recovery,” ACM Transactions on Computer Systems, vol. 20, no. 4, pp. 398–461, 2002.
[3] C. Cachin and M. Vukolic, “Blockchain consensus protocol in the wild (invited paper),” in Proceedings of 31th International Symposium on Distributed Computing, Vienna, Austria, 2017.
[4] E. Androulaki et al., “Hyperledger fabric: A distributed operating system for permissioned blockchains,” in Proceedings of the 13th ACM SIGOPS European Conference on Computer Systems, Porto, Portugal, 2018.
[5] A. Bessani, J. Sousa, and E. Alchieri, “State machine replication for the masses with BFT-SMART,” in Proceedings of the 44th IEEE/IFIP International Conference on Dependable Systems and Networks, Atlanta, GA, USA, 2014.
[6] J. Sousa and A. Bessani, “Separating the WHEAT from the chaff: An empirical design for geo-replicated state machines,” in Proceedings of the IEEE 34th Symposium on Reliable Distributed Systems, Montreal, Quebec, Canada, 2015.
[7] A. Miller et al., “The honey badger of BFT protocols,” in Proceedings of the 2016 ACM Conference on Computer and Communications Security, Vienna, Austria, 2016.
[8] P. Hunt et al., “Zookeeper: Wait-free coordination for internet-scale services,” in Proceedings of the 2010 USENIX Annual Technical Conference, Boston, MA, USA, 2010.
[9] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2009. [Online]. Available: http://bitcoin.org/bitcoin.pdf
[10] G. Wood, “Ethereum: A secure decentralised generalised transaction ledger,” 2015. [Online]. Available: http://gavwood.com/Paper.pdf
[11] J. Garay, A. Kiayias, and N. Leonardos, “The bitcoin backbone protocol: Analysis and applications,” in Proceedings of the 34th Annual International Conference on the Theory and Applications of Cryptographic Techniques, Sofia, Bulgaria, 2015.
[12] A. Back, “Hashcash - a denial of service counter-measure,” 2002. [Online]. Available: http://www.hashcash.org/papers/hashcash.pdf
[13] C. Dwork and M. Naor, “Pricing via processing or combatting junk mail,” in Proceedings of the 12th Annual International Cryptology Conference on Advances in Cryptology, London, UK, 1993.
[14] E. Buchman, “Tendermint: Byzantine fault tolerance in the age of blockchains,” Master’s thesis, University of Guelph, 2016.
[15] W. Martino, “Kadena: The first scalable, high-performance private blockchain,” 2016. [Online]. Available: http://kadena.io/docs/Kadena-ConsensusWhitePaper-Aug2016.pdf
[16] N. Szabo, “Smart contracts: Building blocks for digital markets,” EX-TROPY: The Journal of Transhumanist Thought, no. 16, 1996.
[17] J. Sousa and A. Bessani, “From Byzantine consensus to BFT state machine replication: A latency-optimal transformation,” in Proceedings of the 9th European Dependable Computing Conference, Sibiu, Romania, 2012.
[18] D. Gifford, “Weighted voting for replicated data,” in Proceedings of the 7th ACM SIGOPS Symposium on Operating Systems Principles, Pacific Grove, CA, USA, 1979.
[19] D. B. Johnson and A. J. Menezes, “Elliptic curve DSA (ECSDA): An enhanced DSA,” in Proceedings of the 7th Conference on USENIX Security Symposium - Volume 7, Berkeley, CA, USA, 1998.
[20] C. Y. da Silva Costa and E. A. P. Alchier, “Diversity on state machine replication,” in Proceedings of the 32nd IEEE International Conference on Advanced Information Networking and Applications, Kraków, Poland, 2018.
[21] “Chain protocol whitepaper,” 2014. [Online]. Available: https://chain.com/docs/1.2/protocol/papers/whitepaper
[22] D. Ongaro and J. Ousterhout, “In search of an understandable consensus algorithm,” in 2014 USENIX Annual Technical Conference, Philadelphia, PA, USA, 2014.
[23] C. Copeland and H. Zhong, “Tangaroa: a Byzantine fault tolerant raft,” [Online]. Available: http://www.scs.stanford.edu/14au-cs244b/labs/projects/copeland_zhong.pdf
[24] M. Garcia, N. Neves, and A. Bessani, “SieveQ: A layered BFT protection system for critical services,” IEEE Transactions on Dependable and Secure Computing (accepted for publication), 2016.
[25] V. Buterin, “Ethereum platform review: Opportunities and challenges for private and consortium blockchains,” 2016. [Online]. Available: http://r3cev.com