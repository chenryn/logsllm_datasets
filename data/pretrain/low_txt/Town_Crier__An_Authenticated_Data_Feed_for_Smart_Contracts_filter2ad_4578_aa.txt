# Title: Town Crier: An Authenticated Data Feed for Smart Contracts

## Authors:
- Fan Zhang, Cornell University, IC3†
- Ethan Cecchetti, Cornell University, IC3†
- Kyle Croman, Cornell University, IC3†
- Ari Juels, IC3†, Cornell Tech, Jacobs Institute
- Elaine Shi, Cornell University, IC3†

†Initiative for CryptoCurrencies and Contracts

## Abstract
Smart contracts are autonomous programs that execute on blockchains. Their key applications, such as financial instruments, require them to consume data from external sources, such as stock quotes. Trustworthy data feeds that support a wide range of data requests are thus critical for smart contract ecosystems.

We present Town Crier (TC), an authenticated data feed system. TC acts as a bridge between smart contracts and existing, trusted HTTPS-enabled websites. It combines a blockchain front end with a trusted hardware back end to scrape HTTPS-enabled websites and serve source-authenticated data to relying smart contracts.

TC also supports confidentiality by enabling private data requests with encrypted parameters. Additionally, it allows secure use of user credentials to scrape access-controlled online data sources. We describe TC's design principles and architecture, and report on an implementation using Intel's Software Guard Extensions (SGX) to provide data to the Ethereum smart contract system. We formally model TC and define and prove its basic security properties in the Universal Composibility (UC) framework. Our results include definitions and techniques related to resource consumption (Ethereum’s "gas" fee system) and Trusted Computing Base (TCB) minimization. We also report on experiments with three example applications.

We plan to launch TC soon as an online public service.

**Keywords:** Authenticated Data Feeds, Smart Contracts, Trusted Hardware, Intel SGX, Ethereum, Bitcoin

## 1. Introduction
Smart contracts are computer programs that autonomously execute the terms of a contract. They have been envisioned as a way to make legal agreements more precise, pervasive, and efficiently executable. Nick Szabo, who popularized the term "smart contract" in a seminal 1994 essay, provided an example of a smart contract that enforces car loan payments. If the car owner fails to make timely payments, the smart contract could programmatically revoke physical access and return control of the car to the bank.

Cryptocurrencies like Bitcoin provide key technical underpinnings for smart contracts, including direct control of money by programs and fair, automated code execution through decentralized consensus mechanisms. The recently launched Ethereum supports Turing-complete code, enabling fully expressive self-enforcing decentralized smart contracts. However, compelling applications of smart contracts, such as financial instruments, require access to real-world state and events. Data feeds (or oracles) aim to meet this need by serving data requests from other contracts. While some data feeds exist for Ethereum, they provide no assurance of correctly relaying data beyond the reputation of their operators. HTTPS connections to trustworthy websites could be a solution, but smart contracts lack network access, and HTTPS does not digitally sign data for out-of-band verification. The lack of a substantive ecosystem of trustworthy data feeds is often cited as a critical obstacle to the evolution of Ethereum and decentralized smart contracts.

### Town Crier
We introduce Town Crier (TC), a system that provides an authenticated data feed (ADF) for smart contracts. TC acts as a high-trust bridge between existing HTTPS-enabled data websites and the Ethereum blockchain. It retrieves website data and serves it to relying contracts on the blockchain as concise pieces of data (datagrams). TC uses a combination of Intel's Software Guard Extensions (SGX) and a smart-contract front end. The core functionality is executed as a trusted piece of code in an SGX enclave, which protects against malicious processes and the OS and can attest to a remote client that the client is interacting with a legitimate, SGX-backed instance of the TC code.

The smart-contract front end of Town Crier responds to requests from contracts on the blockchain with attestations of the following form:
"Datagram X specified by parameters params is served by an HTTPS-enabled website Y during a specified time frame T."

A relying contract can verify the correctness of X in such a datagram, assuming trust only in the security of SGX, the published TC code, and the validity of source data in the specified interval of time.

Another critical barrier to smart contract adoption is the lack of confidentiality in today's ecosystems; all blockchain state is publicly visible, and existing data feeds publicly expose requests. TC provides confidentiality by supporting private datagram requests, where the parameters are encrypted under a TC public key for ingestion in TC’s SGX enclave, concealing them on the blockchain. TC also supports custom datagram requests, which securely access the online resources of requesters (e.g., online accounts) by ingesting encrypted user credentials, permitting TC to securely retrieve access-controlled data.

We designed and implemented TC as a complete, highly scalable, end-to-end system that offers formal security guarantees at the cryptographic protocol level. TC runs on real, SGX-enabled hosts, as opposed to emulators. We plan to launch a version of TC as an open-source, production service atop Ethereum, pending the near-future availability of the Intel Attestation Service (IAS), which is needed to verify SGX attestations.

### Technical Challenges
Smart contracts execute in an adversarial environment where parties can reap financial gains by subverting the contracts or services on which they rely. Formal security is thus vitally important. We adopt a rigorous approach to the design of Town Crier by modeling it in the Universal Composibility (UC) framework, building on previous work to achieve a formal model that spans a blockchain and trusted hardware. We formally define and prove that TC achieves the basic property of datagram authenticity—informally, that TC faithfully relays current data from a target website. We additionally prove fair expenditure for an honest requester, informally that the fee paid by a user contract calling TC is at most a small amount to cover the operating costs of the TC service, even if the TC host is malicious.

Another contribution of our work is introducing and showing how to achieve two key security properties: gas sustainability and TCB code minimization within a new TCB model created by TC’s combination of a blockchain with SGX. Because of the high resource costs of decentralized code execution and the risk of application-layer denial-of-service (DoS) attacks, Ethereum includes an accounting resource called gas to pay for execution costs. Informally, gas sustainability means that an Ethereum service never runs out of gas, a general and fundamental availability property. We give a formal definition of gas sustainability applicable to any Ethereum service and prove that TC satisfies it.

We believe that the combination of blockchains with SGX introduced in our work will prove to be a powerful and general way to achieve confidentiality in smart contract systems and network them with off-chain systems. This new security paradigm, however, introduces a hybridized TCB that spans components with different trust models. We introduce techniques for using such a hybridized TCB securely while minimizing the TCB code size. In TC, we show how to avoid constructing an authenticated channel from the blockchain to the enclave—bloating the enclave with an Ethereum client—by instead authenticating enclave outputs on the blockchain. We also show how to minimize on-chain signature-verification code. These techniques are general; they apply to any use of a similar hybridized TCB.

Other interesting smaller challenges arise in the design of TC. One is the deployment of TLS in an enclave. Enclaves lack networking capabilities, so TLS code must be carefully partitioned between the enclave and untrusted host environment. Another is hedging against the risk of compromise of a website or single SGX instance, which we accomplish with various modes of majority voting: among multiple websites offering the same piece of data (e.g., stock price) or among multiple SGX platforms.

### Applications and Performance
We believe that TC can spur the deployment of a rich spectrum of smart contracts that are hard to realize in the existing Ethereum ecosystem. We explore three examples that demonstrate TC’s capabilities:
1. A financial derivative (cash-settled put option) that consumes stock ticker data.
2. A flight insurance contract that relies on private data requests about flight cancellations.
3. A contract for the sale of virtual goods and online games (via Steam Marketplace) for Ether, the Ethereum currency, using custom data requests to access user accounts.

Our experiments with these three applications show that TC is highly scalable. Running on just a single SGX host, TC achieves throughputs of 15-65 tx/sec. TC is easily parallelized across many hosts, as separate TC hosts can serve requests with no interdependency. For comparison, Ethereum handles less than 1 tx/sec today, and recent work suggests that Bitcoin can scale safely to no more than 26 tx/sec with reparameterization. For these same applications, experimental response times for datagram requests range from 192-1309 ms—much less than an Ethereum block interval (12 seconds on average). These results suggest that a few SGX-enabled hosts can support TC data feed rates well beyond the global transaction rate of a modern decentralized blockchain.

### Contributions
- We introduce and report on an end-to-end implementation of Town Crier, an authenticated data feed system that addresses critical barriers to the adoption of decentralized smart contracts. TC combines a smart-contract front end in Ethereum and an SGX-based trusted hardware back end to: (1) Serve authenticated data to smart contracts without a trusted service operator and (2) Support private and custom data requests, enabling encrypted requests and secure use of access-controlled, off-chain data sources. We plan to launch a version of TC soon as an open-source service.
- We formally analyze the security of TC within the Universal Composibility (UC) framework, defining functionalities to represent both on-chain and off-chain components. We formally define and prove the basic properties of datagram authenticity and fair expenditure as well as gas sustainability, a fundamental availability property for any Ethereum service.
- We introduce a hybridized TCB spanning the blockchain and an SGX enclave, a powerful new paradigm of trustworthy system composition. We present generic techniques that help shrink the TCB code size within this model as well as techniques to hedge against individual SGX platform compromises.
- We explore three TC applications that show TC’s ability to support a rich range of services well beyond those in Ethereum today. Experiments with these applications also show that TC can easily meet the latency and throughput requirements of modern decentralized blockchains.

Due to space constraints, a number of details on formalism, proofs, implementation, and applications are relegated to the paper appendices with pointers in the paper body. Appendices may be found in the supplementary materials.

## 2. Background
In this section, we provide basic background on the main technologies TC incorporates, namely SGX, TLS/HTTPS, and smart contracts.

### SGX
Intel's Software Guard Extensions (SGX) is a set of new instructions that confer hardware protections on user-level code. SGX enables process execution in a protected address space known as an enclave. The enclave protects the confidentiality and integrity of the process from certain forms of hardware attack and other software on the same host, including the operating system.

An enclave process cannot make system calls but can read and write memory outside the enclave region. Thus, isolated execution in SGX may be viewed in terms of an ideal model in which a process is guaranteed to execute correctly and with perfect confidentiality, but relies on a (potentially malicious) operating system for network and file-system access. SGX allows a remote system to verify the software in an enclave and communicate securely with it. When an enclave is created, the CPU produces a hash of its initial state known as a measurement. The software in the enclave may, at a later time, request a report that includes a measurement and supplementary data provided by the process, such as a public key. The report is digitally signed using a hardware-protected key to produce a proof that the measured software is running in an SGX-protected enclave. This proof, known as a quote, can be verified by a remote system, while the process-provided public key can be used by the remote system to establish a secure channel with the enclave or verify signed data it emits. We use the generic term attestation to refer to a quote, and denote it by `att`. We assume that a trustworthy measurement of the code for the enclave component of TC is available to any client that wishes to verify an attestation. SGX signs quotes using a group signature scheme called EPID, which is significant in our design of Town Crier, as EPID is a proprietary signature scheme not supported natively in Ethereum. SGX additionally provides a trusted time source via the function `sgx_get_trusted_time`.

### TLS/HTTPS
We assume basic familiarity with TLS and HTTPS (HTTP over TLS). TC exploits an important feature of HTTPS, namely that it can be partitioned into interoperable layers: an HTTP layer interacting with web servers, a TLS layer handling handshakes and secure communication, and a TCP layer providing reliable data stream.

### Smart Contracts
While TC can in principle support any smart-contract system, we focus in this paper on its use in Ethereum. A smart contract in Ethereum is represented as a contract account, endowed with code, a currency balance, and persistent memory in the form of a key/value store. A contract accepts messages as inputs to any of its functions, and the execution of these functions can modify the contract's state and perform actions such as transferring funds.