### Potential Impact of Feature Addition Attacks on Classification Algorithms

In this section, we analyze the potential impact of feature addition attacks on various classification algorithms deployed in our system. 

#### Decision Tree Classifier
To evade a decision tree classifier, an attacker must modify a malicious file to change the decision path, resulting in a false negative. The attacker first inspects the decision tree to identify the specific decision that leads to a terminal node classifying the file as malicious. The attacker then backtracks along this path to find the first non-terminal node that, if the test is positive, leads directly to a benign terminal node. The test is positive if a certain feature exists in the file (binary embedding) or if a feature count exceeds a threshold (count embedding). In such cases, the attacker can add the required feature to the file, forcing the decision tree to misclassify it. If the feature cannot be easily added due to strict PDF structure constraints, the attacker can search for another suitable feature. If no direct path to a benign terminal node is found, the attacker can still modify the file, insert a new feature, and repeat the process. This attack can be automated, and we have empirically verified its effectiveness by adding a previously non-existent feature to a real-world malicious PDF sample, causing our decision tree to misclassify it. Using random forests instead of single decision trees increases the computational complexity for the attacker but does not fundamentally solve the problem.

#### Linear SVM
For a linear SVM, the decision function is given by \( y(x) = w^\top x - \rho \), where \( w \) and \( \rho \) are model parameters, and the attacker controls the input vector \( x \). The attacker's goal is to change the prediction from positive to negative. For count embedding, this can be achieved by selecting the dimension \( j \) with the most negative weight \( w_j \) and inserting \( \bar{x}_j \) content chunks corresponding to feature \( j \) such that \( y(x) \) becomes negative. Simple algebra shows that \( \bar{x}_j = \frac{y(x) - \rho}{w_j} \). We have successfully verified this evasion attack in practice. If the most negative feature cannot be inserted or can only be inserted once, the attacker can use the feature with the second most negative weight, and so on. For binary embedding, the attacker must insert multiple features, but this is a minor practical constraint.

#### SVM with RBF Kernel
Evading an SVM with an RBF kernel is fundamentally more challenging than in the linear case due to the nonlinearity of the radial basis function, which makes the task of modifying the input vector a nonconvex optimization problem. The strategy that worked for the linear SVM did not work for the RBF SVM. As a more potent strategy, we attempted a mimicry attack by masquerading malicious files to look benign. This was done by copying all features of a benign file into a malicious one. To verify the efficacy of this strategy, we randomly sampled 5,000 malicious and 5,000 benign training files, trained an RBF SVM, and then classified another 5,000 malicious and 5,000 benign test files. The benign file classified with the greatest distance from the separating hyperplane (i.e., the one most confidently classified as benign) was chosen as the camouflage. We copied all features of this file to the 5,000 malicious feature vectors in the test set. The number of false negatives increased from 28 to 30, indicating that the strongest conceivable mimicry attack added only 2 misclassifications out of 5,000 examples (0.025%). For the linear SVM in the same setting, the mimicry attack decreased detection accuracy to about 50%. This experiment demonstrates the strong resistance of RBF SVMs to mimicry attacks.

### Discussion
The experimental evaluation and analysis of potential evasion techniques clearly demonstrate that the structure of PDF documents has strong discriminative power for detecting malicious documents. This finding is surprising given that structural differences are a side-effect of the presence of malicious content. Although, in principle, attackers may find ways to camouflage malicious content within a benign structure, our experiments with several evasion strategies suggest that this task is more difficult than expected. The most aggressive evasion strategy we tested was successful for only 0.025% of malicious examples against an off-the-shelf nonlinear SVM classifier with the RBF kernel using binary embedding. We do not yet have a rigorous mathematical explanation for this robustness, but our intuition suggests that the main difficulty for the attacker lies in the fact that the input features under their control (i.e., the structural elements of a PDF document) are only loosely related to the true features used by the classifier. The space of true features is "hidden behind" a complex nonlinear transformation, making it mathematically hard to invert. This observation is supported by the fact that the same attack against a linear classifier with binary embedding had a 50% success rate, indicating that the robustness of the RBF classifier is rooted in its nonlinear transformation.

### Conclusions
We have proposed a novel method for detecting malicious PDF files based on the underlying structural properties of benign and malicious PDF files. By focusing on structure rather than content, our method avoids dealing with expressive PDF obfuscation techniques, JavaScript interpretation, and dynamic execution, while maintaining high throughput and robustness. Experimental evaluation has demonstrated excellent performance in both laboratory and operational settings on a large dataset of around 660,000 benign and malicious PDF files. Our method compares favorably to recent related work (PJSCAN, MDSCAN, SHELLOS, and MALWARE SLAYER) and is effective against novel attacks, maintaining high detection accuracy even on real PDF malware first seen more than two months after the classification model was created. A 10-week operational deployment in real-world conditions with weekly retraining has shown excellent performance, although it also highlighted the difficulty in handling sudden changes in attack patterns. Future work will focus on improving performance on strongly nonstationary data.

### References
[1] P. Akritidis, E. Markatos, M. Polychronakis, and K. Anagnostakis. STRIDE: Polymorphic sled detection through instruction sequence analysis. In 20th International Conference on Information Security, pages 375–392, 2005.
[2] M. Barreno, B. Nelson, A. Joseph, and J. Tygar. The security of machine learning. Machine Learning, 81(2):121–148, 2010.
[3] M. Barreno, B. Nelson, R. Sears, A. Joseph, and J. Tygar. Can machine learning be secure? In ACM Symposium on Information, Computer and Communication Security, pages 16–25, 2006.
[4] C. M. Bishop. Pattern Recognition and Machine Learning. Springer, 2007.
[5] L. Breiman, J. Friedman, J. Olshen, and C. Stone. Classification and Regression Trees. Wadsworth, 1984.
[6] D. Canali, M. Cova, G. Vigna, and C. Kruegel. Prophiler: a fast filter for the large-scale detection of malicious web pages. In International Conference on World Wide Web (WWW), pages 197–206, 2011.
[7] W. Cohen. Fast effective rule induction. In International Conference on Machine Learning (ICML), pages 115–123, 1995.
[8] C. Cortes and V. Vapnik. Support vector networks. Machine Learning, 20:273–297, 1995.
[9] M. Cova, C. Kruegel, and G. Vigna. Detection and analysis of drive-by-download attacks and malicious JavaScript code. In International Conference on World Wide Web (WWW), pages 281–290, 2010.
[10] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert. ZOZZLE: Fast and precise in-browser JavaScript malware detection. In USENIX Security Symposium, pages 33–48, 2011.
[11] M. Engelberth, C. Willems, and H. T. MalOffice – analysis of various application data files. In Virus Bulletin International Conference, 2009.
[12] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee. BotHunter: Detecting malware infection through IDS-driven dialog correlation. In USENIX Security Symposium, pages 167–182, 2007.
[13] Google warns of using Adobe Reader - particularly on Linux. http://www.h-online.com/open/news/item/Google-warns-of-using-Adobe-Reader-particularly-on-Linux-1668153.html.
[14] T. Hastie, R. Tibshirani, and J. Friedman. The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Springer series in statistics. Springer, New York, N.Y., 2009. 2nd edition.
[15] Vorsicht bei angeblicher telekom-onlinerechnung. http://heise.de/-1545909.
[16] S. Jana and V. Shmatikov. Abusing file processing in malware detectors for fun and profit. In IEEE Symposium on Security and Privacy, pages 80–94, 2012.
[17] S. Kaplan, B. Livshits, B. Zorn, C. Siefert, and C. Cursinger. “nofus: Automatically detecting” + string.fromcharcode(32) + “obfuscated ”.tolowercase() + “JavaScript code”. Technical report, Microsoft Research, 2011.
[18] P. Laskov and M. Kloft. A framework for quantitative security analysis of machine learning. In Proceedings of the 2nd ACM Workshop on AISec, pages 1–4, Nov. 2009.
[19] P. Laskov and N. Šrndić. Static detection of malicious JavaScript-bearing PDF documents. In Annual Computer Security Applications Conference (ACSAC), pages 373–382, 2011.
[20] W. Lee, S. Stolfo, and K. Mok. A data mining framework for building intrusion detection models. In IEEE Symposium on Security and Privacy, pages 120–132, 1999.
[21] W.-J. Li, S. Stolfo, A. Stavrou, E. Androulaki, and A. Keromytis. A study of malcode-bearing documents. In Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA), pages 231–250, 2007.
[22] M. Mahoney and P. Chan. Learning rules for anomaly detection of hostile network traffic. In International Conference on Data Mining (ICDM), 2003.
[23] D. Maiorca, G. Giacinto, and I. Corona. A pattern recognition system for malicious PDF files detection. Pages 510–524, 2012.
[24] T. V. Overveldt, C. Kruegel, and G. Vigna. FlashDetect: ActionScript 3 malware detection. In Recent Advances in Intrusion Detection (RAID), pages 274–293, 2012.
[25] PDF Reference. http://www.adobe.com/devnet/pdf/pdf_reference.html, 2008.
[26] M. Polychronakis, K. Anagnostakis, and E. Markatos. Comprehensive shellcode detection using runtime heuristics. In Annual Computer Security Applications Conference (ACSAC), pages 287–296, 2010.
[27] N. Provos, P. Mavrommatis, M. Abu Rajab, and F. Monrose. All your iFRAMEs point to us. In USENIX Security Symposium, pages 1–16, 2008.
[28] J. Quinlan. C4.5: Programs for Machine Learning. Morgan Kaufmann, 1992.
[29] Blackhole crimeware kit spike. Sophos fakeAV Conficker/. Threat drives web. http://www.theregister.co.uk/2012/01/26/drives-web.
[30] K. Rieck, T. Holz, K. Willems, P. Düssel, and P. Laskov. Learning and classification of malware behavior. In Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA), 5th International Conference, pages 108–125, July 2008.
[31] K. Rieck, T. Krüger, and A. Dewald. Cujo: Efficient detection and prevention of drive-by-download attacks. In Annual Computer Security Applications Conference (ACSAC), pages 31–39, 2010.
[32] Z. Shafiq, S. Khayam, and M. Farooq. Embedded malware detection using Markov n-grams. In Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA), pages 88–107, 2008.
[33] C. Smutz and A. Stavrou. Malicious PDF detection using metadata and structural features. In Annual Computer Security Applications Conference (ACSAC), 2012. To appear.
[34] K. Z. Snow, S. Krishnan, F. Monrose, and N. Provos. ShellOS: Enabling fast detection and forensic analysis of code injection attacks. In USENIX Security Symposium, 2011.
[35] PDF malware writers keep targeting vulnerability. http://www.symantec.com/connect/blogs/pdf-malware-writers-keep-targeting-vulnerability.
[36] T. Tóth and C. Kruegel. Accurate buffer overflow detection via abstract payload execution. In Recent Advances in Intrusion Detection (RAID), pages 274–291, 2002.
[37] Z. Tzermias, G. Sykiotakis, M. Polychronakis, and E. Markatos. Combining static and dynamic analysis for the detection of malicious documents. In European Workshop on System Security (EuroSec), 2011.
[38] C. Willems, T. Holz, and F. Freiling. CWSandbox: Towards automated dynamic binary analysis. IEEE Security and Privacy, 5(2):32–39, 2007.