### Figure 10: Code Generation Variations for Six Selected Distributions (n = 125,000)

The S99* distribution uses the same base distribution but at a different rate. As described in Section 4, when the total number of edges generated by the left and right nodes do not match, edges are added to or subtracted from random nodes until they do match. Consequently, even a regular distribution, when used at an incorrect rate, can generate a wide variety of graphs. Interestingly, this distribution produces better codes for the wrong rate, both in the best and median cases, compared to the rate for which it was designed. Additionally, this regular graph, which theoretically should achieve an asymptotic overhead factor of 3 [Sho99], actually achieves a much better factor for both rates. For example, with R = 2, the overhead factor is 1.45, and for R = 0.68731, it is 1.

### Distributions RU03 and U03

The next two distributions, RU03 and U03, are designed for Gallager graphs with a rate of 1/2. RU03 is right-regular, meaning all right-hand nodes have the same number of incoming edges, a desirable property that simplifies code analysis and distribution generation [Sho99, RU03]. U03 is nearly right-regular. Both distributions generate codes with a large performance spread; however, their medians are very close to their minimum values. This means that one does not need to generate many codes to find one that performs optimally or near-optimally.

### IRA Graphs and Two-Level Systematic Codes

The distribution for IRA graphs is also right-regular but has less desirable generation properties, with a very large range of overhead factors and a high median. The last distribution, for two-level systematic codes, has nodes with an exceptionally large range of cardinalities—over a million for left nodes (although with n = 125,000, the range is reduced to 32,769), and over 30,000 for right nodes. Despite this, its range of overhead factors is smaller than R03, although still significant.

### Summary and Challenges

While more distributions can be displayed, the key takeaway remains the same: some distributions yield good codes with only a few iterations of code generation, while others require more time. Clearly, multiple instances of codes must be generated to find one that performs well for given values of n and m.

**Challenge to the Community:** A practical measure of how quickly a distribution yields good codes should be developed. While distributions like R03 for IRA graphs and L97A for systematic graphs produce excellent codes, they do so only in rare cases, making them difficult to utilize.

### Question 5: Comparison with Reed-Solomon Coding

The Digital Fountain authors have shown that Tornado codes outperform Reed-Solomon codes for R = 1/2 and large n [BLMR98]. On the other hand, the implementers of OceanStore, a highly distributed file system, selected Reed-Solomon coding for their erasure-based archival service, using small values of n and a rate of 1/4 [RWE+01]. In between these extremes, there is a gray area, exacerbated by the fact that the literature on LDPC codes is heavy on theory and light on practice.

**Simulation Results:**

We present results from a basic simulation where timings of wide-area downloads to a client (Dell Precision 330, with an Intel Pentium 4 processor) on a wireless network were combined with timings of the processor reconstructing blocks using both LDPC codes and a public-domain implementation of Reed-Solomon codes [Pla03]. These timings were used to calculate the average time to download a 1 GB file using Reed-Solomon coding and three types of LDPC codes. The results are plotted in Figure 11.

For each value of n, the file is broken into n equal-sized blocks, and the appropriate number of coding blocks is calculated. We then use our timings and best LDPC codes to calculate the average download times, assuming the downloaded blocks arrive in random order. Results are plotted for all n ≤ 150, including the "perfect" download time without coding or erasures.

**Key Observations:**

- For all rates, Reed-Solomon coding outperforms LDPC codes for small values of n (n < 36 for R = 1/3, n < 26 for R = 1/2, and n < 12 for R = 2/3). This is due to the perfect overhead factor of Reed-Solomon codes.
- However, Reed-Solomon coding's performance deteriorates rapidly due to expensive arithmetic operations and O(n^3) matrix inversion.
- Among LDPC codes, systematic codes outperform IRA codes, which in turn outperform Gallager codes. This is because the underlying graphs have fewer edges—the Gallager graphs have m more left nodes, and IRA graphs have an extra 2m - 1 edges for accumulator nodes.

**Conclusion:**

As download speeds improve, rates increase, and n increases, LDPC codes significantly outperform Reed-Solomon codes. Conversely, for small n and slow download speeds, Reed-Solomon coding can outperform LDPC codes.

**Challenge to the Community:**

The simulation used simple equations based on average values. A more thorough analysis is needed, either through actual data downloads on a wide-area network or using download traces. Additionally, Cauchy Reed-Solomon coding [BKK+95] should be evaluated, as it performs arithmetic operations in GF(2^1) for all values of n and m.

### References

[ASE92] N. Alon, J. W. Spencer, and P. Erdos. The Probabilistic Method. John Wiley & Sons, New York, 1992.

[AW03] M. S. Allen and R. Wolski. The Livny and Plank-Beck Problems: Studies in data movement on the computational grid. In SC2003.

[BKK+95] J. Blomer et al. An XOR-based erasure-resilient coding scheme. Tech. Rep. TR-95-048, Int. Computer Science Inst., August 1995.

[BLM99] J. W. Byers et al. Accessing multiple mirror sites in parallel: Using tornado codes to speed up downloads. In IEEE INFOCOM, 1999.

[BLMR98] J. Byers, M. Luby et al. A digital fountain approach to reliable distribution of bulk data. In ACM SIGCOMM ’98, pages 56–67, 1998.

[BM93] W. A. Burkhard and J. Menon. Disk array storage system reliability. In 23rd Int. Symp. on Fault-Tolerant Comp., pages 432–441, 1993.

[CLG+94] P. M. Chen et al. RAID: High-performance, reliable secondary storage. ACM Computing Surveys, 26(2):145–185, June 1994.

[Gal63] R. G. Gallager. Low-Density Parity-Check Codes. MIT Press, Cambridge, MA, 1963.

[JKM00] H. Jin, A. Khandekar, and R. McEliece. Irregular repeat-accumulate codes. In 2nd Int. Symp. on Turbo codes and Related Topics, 2000.

[KBC+00] J. Kubiatowicz et al. Oceanstore: An architecture for global-scale persistent storage. In Proceedings of ACM ASPLOS. Nov. 2000.

[LMS+97] M. Luby, M. Mitzenmacher, A. Shokrollahi, D. Spielman, and V. Stemann. Practical loss-resilient codes. In 29th Annual ACM Symposium on Theory of Computing, pages 150–159, 1997.

[LS00] W. Litwin and T. Schwarz. LH*RS: a high-availability scalable distributed data structure using Reed Solomon codes. In 2000 ACM SIGMOD, pages 237–248, 2000.

[Lub02] M. Luby. LT codes. In IEEE Symp. on Found. of Comp. Sci., 2002.

[McE00] R. J. McEliece. Achieving the Shannon Limit: A progress report. Plenary Talk, 38th Allerton Conference, October 2000.

[Pla03] J. S. Plank. GFLIB - C procedures for Galois Field arithmetic and Reed-Solomon coding. http://www.cs.utk.edu/~plank/plank/gflib/index.html, 2003.

[PT03] J. S. Plank and M. G. Thomason. On the practical use of LDPC erasure codes for distributed storage applications. Technical Report CS-03-510, University of Tennessee, September 2003.

[RWE+01] S. Rhea et al. Maintenance-free global data storage. IEEE Internet Computing, 5(5):40–49, 2001.

[RU03] M. A. Shokrollahi. New sequences of linear time erasure codes approaching the channel capacity. In Proceedings of AAECC-13, Lecture Notes in CS 1719, pages 65–76, New York, 1999. Springer-Verlag.

[Sho99] M. A. Shokrollahi. Codes and graphs. Lecture Notes in Computer Science, 1770, 2000.

[Sho00] A. Shokrollahi. Raptor codes. Technical Report DR2003-06-001, Digital Fountain, 2003.

[SS00] M. A. Shokrollahi and R. Storn. Design of efficient erasure codes with differential evolution. In IEEE Int. Symp. on Infor. Theory, 2000.

[Tuf83] E. R. Tufte. The Visual Display of Quantitative Information. Graphics Press, Cheshire, Connecticut, 1983.

[Urb03] R. Urbanke et al. LdcpOpt - a fast and accurate degree distribution optimizer for LPDC ensembles. http://lthcwww.epfl.ch/research/ldpcopt/index.php, 2003.

[WK02] H. Weatherspoon and J. Kubiatowicz. Erasure coding vs. replication: A quantitative comparison. 1st Int. Work. on Peer-to-Peer Sys., 2002.

[WK03] S. B. Wicker and S. Kim. Fundamentals of Codes, Graphs, and Iterative Decoding. Kluwer Academic Publishers, Norwell, MA, 2003.

[ZL02] Z. Zhang and Q. Lian. Reperasure: Replication protocol using erasure-code in peer-to-peer storage network. In 21st IEEE Symposium on Reliable Distributed Systems (SRDS’02), pages 330–339, October 2002.