### Energy per Bit Analysis

As noted in prior work [12], racetrack errors occur only during shifts. Consequently, the more frequently the racetrack is used (i.e., shifted), the higher the likelihood of errors. The exact probability of a single shift incurring an error is not well-documented. Previous studies [12] have estimated these probabilities using models and simulations, but empirical data is currently lacking. Therefore, we tested GreenFlag across a wide range of single shift error probabilities, from \(10^{-9}\) to \(10^{-7}\). We also accounted for double shift errors, which depend on the length of the codeword.

We define failure as the occurrence of silent data corruption (SDC), where three or more shift errors occur while reading a single codeword. We then analytically calculated the probability of failure per extended codeword, considering both single and multiple shift errors within the same codeword. However, we did not account for bandwidth demand, assuming there is always a demand for exactly one extended codeword.

Figure 13 presents the failure probability per extended codeword for different GreenFlag codes and various single shift error rates. The y-axis values are in decreasing order. We observed that the failure probability increases linearly with the codeword length.

### Mean Time to Failure (MTTF)

To calculate the overall MTTF across all tracks, we need to know the frequency of shift operations. We assumed different shift intensities representing peak bandwidths for memory technologies such as DDR3, SSDs, and 3D-DRAM. The MTTF can be calculated as:

\[ \text{MTTF} = \frac{1}{\text{Shift Error Rate}} \times 3.154 \times 10^7 \]

where \(3.154 \times 10^7\) is the number of seconds in one year. For very high shift error probabilities (greater than \(10^{-9}\)), it is challenging to achieve a 10-year MTTF goal. Figure 14 shows the MTTF for GreenFlag(64,57,6) and GreenFlag(32,26,6) at different bandwidths. For lower error probabilities, MTTFs well beyond 10 years can be achieved. Overall, Figure 14 can be used to extrapolate MTTFs for any single shift error probability and serves as a guideline for designing reliable memory systems based on racetrack memory.

### Prior Work

Previous research on handling shift errors in racetrack memory [12, 13, 32] has employed additional read/write ports to access multiple bits simultaneously. These extra ports preclude the use of denser 3D racetrack layouts but enable the detection and correction of multiple shift errors. HiFi [12] and its extended work [32] address bit deletions by adding pattern bits at both edges of each track and additional read/write ports. The main idea is to read the pattern in parallel with the data bits. If the pattern does not match expectations, bits are shifted in reverse, and the memory is re-read to recover the correct bits. As bits are shifted during consecutive reads, some pattern bits are "shifted out" of the track, effectively getting deleted. Thus, for every shift in the racetrack, one data bit and two pattern bits are read, and a new pattern bit is written.

Chee et al. [13] propose placing multiple ports with a specific number of domains between consecutive ports. They encode the data so that shift errors can be detected by observing differences when reading the same data from two nearby ports. This approach, however, ignores the fact that domains can be virtually deleted if shifted out of the track, which can happen as domains move from the first to the second port.

There is also prior work on the use of Varshamov-Tenengolts codes [33] to correct segmented errors in deletion and insertion channels, where either deletions or insertions (but not both) could occur. This model is more restrictive than racetrack memory, where both deletions and insertions can happen. Additionally, if we input \(n\) bits, the output would be a sequence of length \(n'\), from which we can deduce the number of shift errors. This differs from racetrack memory, where the memory controller must always provide the desired number of bits, regardless of whether an error occurs. In this work, exhaustive search is used to find codewords of a given length, making implementation infeasible.

Furthermore, there is prior work on utilizing racetrack memory to design caches and memory systems [3, 30, 34], but none of these studies consider system fault tolerance.

### Conclusion

We presented GreenFlag, the first error tolerance scheme for 3D racetrack memory. GreenFlag combines a novel construction for Varshamov-Tenengolts codes with specially crafted delimiter bits to detect, categorize, and correct shift errors. We also designed and synthesized hardware for encoding and decoding to estimate latency and energy overheads and analyze the viability of racetrack memory for different levels of the memory hierarchy. Based on current technology, fault-tolerant 3D racetrack memory appears to be a promising option for main memory and storage but not for caches.

### Acknowledgments

This material is based on work supported by the National Science Foundation under grants CCF-142-1177 and CCF-171-7602.

### References

[1] S. Mittal, “A survey of techniques for architecting processor components using domain wall memory,” ACM Journal on Emerging Technologies in Computing Systems, 2016, no. 2, p.29.

[2] L. Thomas, S.-H. Yang, K.-S. Ryu, B. Hughes, C. Rettner, D.-S. Wang, C.-H. Tsai, K.-H. Shen, and S. S. Parkin, “Racetrack memory: a high-performance, low-cost, non-volatile memory based on magnetic domain walls,” in IEEE International Electron Devices Meeting (IEDM), pp. 24–2, 2011.

[3] Z. Sun, W. Wu, and H. Li, “Cross-layer racetrack memory design for ultra-high density and low power consumption,” in 50th ACM/EDAC/IEEE Design Automation Conference (DAC), pp. 1–6, 2013.

[4] S. Parkin and S.-H. Yang, “Memory on the racetrack,” Nature nanotechnology, vol. 10, no. 3, pp. 195–198, 2015.

[5] S. S. Parkin, M. Hayashi, and L. Thomas, “Magnetic domain-wall racetrack memory,” Science, vol. 320, no. 5873, pp. 190–194, 2008.

[6] M. K. Qureshi, “Pay-as-you-go: low-overhead hard-error correction for phase change memories,” in the 44th Annual IEEE/ACM International Symposium on Microarchitecture, pp. 318–328, 2011.

[7] Y. Zhang, W. Zhao, D. Ravelosona, J.-O. Klein, J. Kim, and C. Chappert, “Perpendicular-magnetic-anisotropy cofeb racetrack memory,” Journal of Applied Physics, vol. 111, no. 9, p. 093925, 2012.

[8] J. J. Yang, D. B. Strukov, and D. R. Stewart, “Memristive devices for computing,” Nature nanotechnology, vol. 8, no. 1, pp. 13–24, 2013.

[9] M. Hayashi, L. Thomas, R. Moriya, C. Rettner, and S. S. Parkin, “Current-controlled magnetic domain-wall nanowire shift register,” Science, vol. 320, no. 5873, pp. 209–211, 2008.

[10] W. Zhao, Y. Zhang, H. Trinh, J. Klein, C. Chappert, R. Mantovan, A. Lamperti, R. Cowburn, T. Trypiniotis, M. Klaui, et al., “Magnetic domain-wall racetrack memory for high density and fast data storage,” in Solid-State and Integrated Circuit Technology (ICSICT), 2012 IEEE 11th International Conference on, pp. 1–4, 2012.

[11] Y.P. Ivanov, A. Chuvilin, S. Lopatin, and J. Kosel, "Modulated magnetic nanowires for controlling domain wall motion: toward 3D magnetic memories," ACS NANO, 10(5), pp.5326-5332, 2016.

[12] C. Zhang, G. Sun, X. Zhang, W. Zhang, W. Zhao, T. Wang, Y. Liang, Y. Liu, Y. Wang, and J. Shu, “Hi-Fi playback: Tolerating position errors in shift operations of racetrack memory,” in Proceedings of ACM/IEEE 42nd Annual International Symposium on Computer Architecture (ISCA), pp. 694–706, 2015.

[13] Y. M. Chee, H. M. Kiah, A. Vardy, V. K. Vu, and E. Yaakobi, “Coding for racetrack memories,” arXiv preprint arXiv:1701.06874, 2017.

[14] R. R. Varshamov and G. M. Tenengolts, “Codes which correct single asymmetric errors,” Avtomatika i Telemekhanika (in Russian), vol. 26, no. 2, pp. 288–292, 1965.

[15] M. Hirofumi, H. Fukuzawa, A. Kikitsu, and Y. Fukuzumi, "Magnetic Memory Device and Method of Magnetic Domain Wall Motion," U.S. Patent 8,792,271, issued July 29, 2014.

[16] D. Sanz-Hernández, R.F. Hamans, J.W. Liao, A. Welbourne, R. Lavrijsen, and A. Fernández-Pacheco, "Fabrication, detection and operation of a three-dimensional nanomagnetic conduit," arXiv preprint arXiv:1706.03710.

[17] N. J. Sloane, “On single-deletion-correcting codes,” Codes and Designs, pp. 273–291, 2002.

[18] R. G. Gallager, “Sequential decoding for binary channels with noise and synchronization errors,” tech. rep., DTIC Document, 1961.

[19] R. L. Dobrushin, “Shannon’s theorems for channels with synchronization errors,” Problemy Peredachi Informatsii, vol. 3, no. 4, pp. 18–36, 1967.

[20] S. N. Diggavi and M. Grossglauser, “On transmission over deletion channels,” in the Annual Allerton Conference on Communication Control and Computing, vol. 39, pp. 573–582, 2001.

[21] A. Kavcic and R. Motwani, “Insertion/deletion channels: Reduced-state lower bounds on channel capacities,” in IEEE International Symposium on Information Theory, pp. 229–229, 2004.

[22] S. Diggavi, M. Mitzenmacher, and H. Pfister, “Capacity upper bounds for deletion channels,” in Proceedings of the International Symposium on Information Theory (ISIT), pp. 1716–1720, 2007.

[23] M. Mitzenmacher, “A survey of results for deletion channels and related synchronization channels,” Probability Surveys, vol. 6, pp. 1–33, 2009.

[24] J. Ullman, “On the capabilities of codes to correct synchronization errors,” IEEE Transactions on Information Theory, vol. 13, no. 1, pp. 95–105, 1967.

[25] G. Tenengolts, “Nonbinary codes, correcting single deletion or insertion (corresp.),” IEEE Transactions on Information Theory, vol. 30, no. 5, pp. 766–769, 1984.

[26] F. Palunˇci´c, K. A. Abdel-Ghaffar, and H. C. Ferreira, “Insertion/deletion detecting codes and the boundary problem,” IEEE Transactions on Information Theory, vol. 59, no. 9, pp. 5935–5943, 2013.

[27] G. Mappouras, A. Vahid, R. Calderbank, and D. J. Sorin, "Support Material for GreenFlag: Protecting 3D-Racetrack Memory from Shift Errors," https://www.dropbox.com/s/o3pf0emvsa8onpp/Racetrack_DSN_19_Support_Material.pdf?dl=0, accessed: 2019-3-8.

[28] V. I. Levenshtein, “Binary codes capable of correcting deletions, insertions and reversals,” in Soviet physics doklady, vol. 10, p. 707, 1966.

[29] V. Levenshtein, “Binary codes capable of correcting spurious insertions and deletions of ones,” Problems of Information Transmission, vol. 1, no. 1, pp. 8–17, 1965.

[30] R. Venkatesan, S.G. Ramasubramanian, S. Venkataramani, K. Roy, and A. Raghunathan, "Stag: Spintronic-Tape Architecture for GPGPU Cache Hierarchies," in International Symposium on Computer Architecture (ISCA), ACM/IEEE, pp. 253-264, 2014.

[31] C. Zhang, G. Sun, W. Zhang, F. Mi, H. Li, and W. Zhao, "Quantitative modeling of racetrack memory, a tradeoff among area, performance, and power," in 20th Asia and South Pacific Design Automation Conference (ASP-DAC), pp. 100-105, 2015.

[32] X. Wang, C. Zhang, X. Zhang, and G. Sun, "np-ECC: Nonadjacent Position Error Correction Code For Racetrack Memory," in International Symposium on Nanoscale Architectures (NANOARCH), pp. 23-24, IEEE, 2016.

[33] Z. Liu and M. Mitzenmacher, “Codes for deletion and insertion channels with segmented errors,” IEEE Transactions on Information Theory, vol. 56, no. 1, pp. 224–232, 2010.

[34] R. Venkatesan, V. Kozhikkottu, C. Augustine, A. Raychowdhury, K. Roy, and A. Raghunathan, “TapeCache: a high density, energy efficient cache based on domain wall memory,” in ACM/IEEE international symposium on Low power electronics and design, pp. 185–190, 2012.