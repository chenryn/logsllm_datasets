### Methodology and Results

The results of our methodology have been integrated into a modified version of the `kern_check` program. This enhanced version is now capable of detecting both types of kernel-level rootkits that we previously discussed, including the SuckIT rootkit.

### 5. Methods to Detect and Classify Kernel-Level Rootkits

We have reviewed various existing programs designed to detect rootkits. These tools may indicate the presence of a rootkit on a target system but often fail to specify the exact type of rootkit. We have developed a new methodology to detect the presence of kernel-level rootkits that redirect the System Call Table. Our approach is also effective in detecting rootkits that modify the System Call Table. Preliminary research suggests that this methodology works with the Linux 2.6 kernel, where existing methods may not be effective. We anticipate that this methodology can be extended to other operating systems as well.

#### 5.1 Checking the System Call Table against the /boot/System.map File

The technique of comparing the System Call Table in kernel memory with the `/boot/System.map` file has already been proposed. The `kern_check` program, part of the Samhain suite, uses this method to detect kernel-level rootkits. However, `kern_check` fails to detect SuckIT rootkits and other recent rootkits on newer versions of the Linux kernel.

Our analysis of the SuckIT rootkit revealed a key difference in its functionality. SuckIT overwrites a location in kernel memory that contains the address of the system call table. It achieves this by querying a specific processor register to find the entry point address for the system call table and then overwrites this address with the address of a new, malicious system call table. We provide a detailed analysis of SuckIT's operation in the appendix of this paper.

This process results in a redirected system call table address, a new system call table, and some new malicious system calls. We propose using the same method that SuckIT employs to query the processor and retrieve the address of the system call table. By comparing this address with the one stored in the `/boot/System.map` file, we can detect if the address has been altered by a rootkit like SuckIT. If the addresses differ, a more detailed check of the system call table in kernel memory can be performed to identify discrepancies between the addresses in the system call table and those in the `/boot/System.map` file.

If the `/boot/System.map` file is up-to-date, differences between it and the system call table in kernel memory indicate that the system calls are being redirected, suggesting the presence of a rootkit. A preliminary signature can be established based on the number of redirected system calls. If two different kernel-level rootkits change a different number of system calls, they can be distinguished. If they change the same system calls, a more detailed analysis can be conducted to find additional differences.

Even without the rootkit source code, we can still identify differences using tools like `kdb` or by copying segments of kernel memory through `/dev/kmem` and analyzing the data offline. `kdb` can be used to examine the machine code of the malicious system calls, and disassembly can be performed manually or through `kdb`.

In summary, our methodology allows us to detect the redirection of the system call table. While a hacker could potentially develop a rootkit that provides false information about the system call table entry point, we are currently unaware of any such rootkit.

The following figure shows the results of running the modified `kern_check` program on a system infected with the SuckIT rootkit.

**Figure 5 - Modified kern_check Results**

These results align with our analysis of the SuckIT source code. SuckIT creates 25 new malicious system calls that subvert the original system calls and redirects system call table references to the new system call table in kernel memory. The first line of the `kern_check` output shows the address of the new system call table (kaddr = cc1e8000), which differs from the address in the `/boot/System.map` file. This indicates that the system is infected with a rootkit.

Even without the SuckIT source code, this methodology can detect a kernel-level rootkit targeting system calls. If the address retrieved by `kern_check` matches the `/boot/System.map` address but the addresses of specific system calls differ, a rootkit that modifies the system call table is present. If the addresses do not match, a rootkit that redirects the system call table is present.

The `/boot/System.map` file is created when a Linux kernel is compiled and should remain consistent for all installations of that kernel on a particular architecture. If this file is not available, debugging becomes difficult, but a copy can be obtained for standard Linux installations. For custom installations, a copy of the `/boot/System.map` file should be made when the system is first built.

A customized `kern_check` program can be built for a specific system, incorporating the `/boot/System.map` file. This program would need to be rebuilt each time a new kernel is installed. The modified `kern_check` program, available under the GPL license, can be found at: [http://users.ece.gatech.edu/~owen/research](http://users.ece.gatech.edu/~owen/research).

#### 5.2 Analysis of the zk Kernel-Level Rootkit

We applied our methodology to another rootkit, the zk rootkit developed by zaRwT@zaRwt.net. The documentation for zk states that many features, including patching of the kernel, were borrowed from SuckIT. Therefore, we expected that zk could be detected using our methods. However, the documentation mentions additional features not present in SuckIT, leading us to believe that zk is a modification of SuckIT.

**Figure 6 - SuckIT Install and Uninstall**

We set up two systems running the Linux 2.14.18 kernel to compare SuckIT and zk. We successfully installed and uninstalled SuckIT, as indicated by the `kern_check` program. We then installed zk and observed that it modified the same 25 system calls as SuckIT. However, we were unable to uninstall zk, indicating a difference between the two rootkits.

**Figure 7 - zk Uninstall**

To uninstall zk, a password was required, which was not mentioned in the documentation. We identified the password 'kill me' in the `client.c` file. Using this password, we successfully uninstalled zk.

**Figure 8 - Uninstall Password for zk Rootkit**

By having both rootkits installed, we can continue to identify differences. The string 'kill me' can be used as a signature to detect instances of the zk rootkit. Other potential signatures can be identified similarly.

### 6. Conclusion

We have presented a methodology to detect and classify kernel-level rootkits that redirect the system call table. The mathematical framework helps determine if an identified rootkit is an existing rootkit, a modification, or a new rootkit. A true binary or kernel rootkit should maintain the original functionality of the replaced program plus added capabilities introduced by the rootkit developer. These added capabilities can be used to characterize the rootkit.

We conducted an in-depth analysis of the SuckIT rootkit and demonstrated the shortcomings of current GPL tools. Our work resulted in a methodology to detect kernel-level rootkits that attack the system call table in kernel memory. We applied this methodology to two specific rootkits, detecting their presence and identifying similarities and differences. This methodology will help system administrators and the security community respond more quickly to new kernel rootkit exploits.

### References

[1] H. Thimbleby, S. Anderson, P. Cairns, “A Framework for Modeling Trojans and Computer Virus Infections,” The Computer Journal, vol. 41, no.7, pp. 444-458, 1998.
[2] E. Cole, Hackers Beware, Indianapolis, IN: New Riders, 2002, pp. 548-553.
[3] D. Dettrich, (2002, Jan 5) “Root Kits” and hiding files/directories/processes after a break-in, [http://staff.washington.edu/dittrich/misc/faqs/rootkits.faq](http://staff.washington.edu/dittrich/misc/faqs/rootkits.faq).
[4] E. Skoudis, Counter Hack, Upper Saddle River, NJ: Prentice Hall PTR, 2002, p. 434.
[5] A. Silberschatz, P. Galvin, G. Gagne, Applied Operating System Concepts, New York, NY: John Wiley & Sons, 2003, p. 626.
[6] Samhain Labs, The Basics– Subverting the Kernel, [http://la-samha.de/library/rootkits/basics.html](http://la-samha.de/library/rootkits/basics.html), July 2003.
[7] F. Cohen, “Computer Viruses,” Computers & Security, 6(1), pp. 22-35, 1987.
[8] [http://vx.netlux.org/lib/static/vdat/epvirlib.htm](http://vx.netlux.org/lib/static/vdat/epvirlib.htm), Aug 2003.
[9] Samhain Labs, Detecting Kernel Rootkits, [http://la-samha.de/library/rootkits/detect.html](http://la-samha.de/library/rootkits/detect.html), July 2003.
[10] S. Northcut, L. Zeltser, S. Winters, K. Kent Fredericks, R. Ritchey, Inside Network Perimeter Security, Indianapolis, IN: New Riders, 2003, pp. 283-286.
[11] R. Lehti, “The Aide Manual,” [www.cs.tut.fi/~rammer/aide/manual.html](www.cs.tut.fi/~rammer/aide/manual.html), Sep 2002.
[12] [http://www.chkrootkit.org](http://www.chkrootkit.org).
[13] Samhain Labs (email, 27 Jan 2003).
[14] s.d., devik, Linux-on-the-fly kernel patching without LKM, [http://www.phrack.org/phrack/58/p58-0x07](http://www.phrack.org/phrack/58/p58-0x07), 12 Dec 2002.
[15] D. Bovet, M. Cesati, Understanding the Linux Kernel, Sebastopol, CA: O’Reilly & Associates, 2003, pp. 304-306.
[16] [http://www.intel.com/design/intarch/techinfo/pentium/instrrefs.htm#96030](http://www.intel.com/design/intarch/techinfo/pentium/instrrefs.htm#96030), Jul 2003.
[17] [http://www.intel.com/design/intarch/techinfo/pentium](http://www.intel.com/design/intarch/techinfo/pentium), Jun 2003.
[18] D. Bovet, M. Cesati, Understanding the Linux Kernel, Sebastopol, CA: O’Reilly & Associates, 2003, p. 255.
[19] J. Levine, J. Grizzard, P. Hutto, H. Owen, An Analysis of a Kernel Level Rootkit (knark), unpublished.
[20] [http://www.chkrootkit.org](http://www.chkrootkit.org).