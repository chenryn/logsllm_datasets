### About Me
- **Liar! Macs have no viruses!**
- **[ OS X Kernel Rootkits ]-**
- **Don't take me too seriously, I fuzz the Human brain!**
- **The capitalist "pig" degrees: Economics & MBA.**
- **Worked for the evil banking system!**
- **Security Researcher at COSEINC.**
- **"Famous" blogger.**
- **Wannabe rootkits book writer.**
- **Love a secondary curvy road and a 911.**

### Introduction
- **OS X Kernel Rootkits:**
  - Ideas to improve them.
  - Sample applications.
  - Raise awareness and interest in this area.

### Today's Subject
- **Reaching uid=0 is your problem!**
- **Startup and persistency (APT) are also challenges.**
- **Finding necessary bugs should be easier.**
- **Less research and audits lead to more bugs.**
- **Main target: Mountain Lion.**
- **Also works with Mavericks (tested with DP1).**

### Assumptions
- **OS X rootkits are a rare "species."**
- **Interesting hardware rootkits (Dino's Vitriol and Snare's EFI) but no full code available.**
- **Commercial rootkits: Crisis from Hacking Team and possibly FinFisher (iOS, not OS X).**
- **Crisis is particularly bad.**
- **Not many detection tools available.**

### Current State of the “Art”
- **Many interesting kernel symbols are not exported.**
- **Some are available in Unsupported & Private KPIs.**
- **Not acceptable for stable rootkits.**
- **Solving kernel symbols from a kernel extension is possible since Lion.**
- **Not in Snow Leopard and previous versions.**

### Problem #1
- **__LINKEDIT segment contains symbol info.**
- **Zeroed up to Snow Leopard.**
- **OS.X/Crisis solves symbols in userland and sends them to the kernel rootkit.**

### Simple Idea
- **Read the kernel image from disk and process its symbols.**
- **The kernel does this every time a new process starts.**
- **Possible to implement with stable KPI functions.**
- **Kernel ASLR slide is easy to obtain in this scenario.**

### Virtual File System (VFS)
- **Read and write any file using VFS functions.**
- **Using only KPI symbols.**
- **Recipe for success:**
  - Vnode.
  - VFS context.
  - Data buffer.
  - UIO structure/buffer.

### Idea #1
- **How to obtain the vnode information:**
  - `vnode_lookup(const char* path, int flags, vnode_t *vpp, vfs_context_t ctx)` converts a path into a vnode.
  - Apple takes care of the context for us.
  - Still works in Mavericks DP1!

- **Data buffer:**
  - Statically allocated.
  - Dynamically, using one of the many kernel functions: `kalloc`, `kmem_alloc`, `OSMalloc`, `IOMalloc`, `MALLOC`, `_MALLOC`.
  - __LINKEDIT size is around 1Mb.

- **UIO buffer:**
  - Use `uio_create` and `uio_addiov`.
  - Both are available in BSD KPI.

- **Recipe for success:**
  - Vnode of `/mach_kernel`.
  - VFS context.
  - Data buffer.
  - UIO structure/buffer.
  - We can finally read the kernel from disk…

- **Reading from the filesystem:**
  - `VNOP_READ(vnode_t vp, struct io* uio, int ioflag, vfs_context_t ctx)` calls down to a filesystem to read file data.
  - Apple takes care of the VFS context.
  - If the call was successful, the buffer will contain data.
  - To write, use `VNOP_WRITE`.

- **To solve the symbols, we just need to read the Mach-O header and extract some information:**
  - __TEXT segment address (to find KASLR).
  - __LINKEDIT segment offset and size.
  - Symbols and strings tables offset and size from LC_SYMTAB command.

- **Read __LINKEDIT into a buffer (~1Mb).**
- **Process it and solve immediately all the symbols we (might) need.**
- **Or just solve symbols when required to obfuscate things a little.**
- **Don't forget that KASLR slide must be added to the retrieved values.**

- **To compute the KASLR value, find out the base address of the running kernel.**
  - Using IDT or a kernel function address and then lookup Mach-O magic value backwards.
  - Compute the __TEXT address difference to the value extracted from the disk image.
  - Or use some other method you might have.

- **We are able to read and write any file.**
- **For now, the kernel is the interesting target.**
- **We can solve any available symbol - function or variable, exported or not in KPIs.**
- **Compatible with all OS X versions.**

### Checkpoint #1
- **Many interesting functions & variables are static.**
- **Cross references not available (IDA spoils us!).**
- **Hex search is not very reliable.**
- **Internal kernel structures fields offsets, such as proc and task.**

### Problem #2
- **Integrate a disassembler in the rootkit!**
  - Tested with diStorm, my personal favorite.
  - Works great.
  - Be careful with some inline data.
  - One second to disassemble the kernel.
  - In a single straightforward sweep.

### Idea #2
- **Ability to search for static functions, variables, and structure fields.**
- **We still depend on patterns.**
- **These are more common between all versions.**
- **Possibility to hook calls by searching references and modifying the offsets.**

### Checkpoint #2
- **We can have full control of the kernel.**
- **Everything can be dynamic.**
- **Stable and future-proof rootkits.**

### Future Considerations
- **Can Apple close the VFS door?**
  - That would probably break legit products that use them.
- **We still have the disassemblers.**
- **Kernel anti-disassembly?**
- **Imagination is the limit!**

### Practical Applications
- **Executing userland code.**
- **Playing with DTrace’s syscall provider & Volatility.**
- **Zombie rootkits.**
- **Additional applications in the SyScan slides and Phrack paper (whenever it comes out).**

### Userland Commands
- **It can be useful to execute userland binaries from the rootkit or inject code into them.**
- **Many different possibilities exist:**
  - Modify binary (at disk or runtime).
  - Inject shellcode.
  - Inject a library.
  - Etc.
- **This particular one uses last year's Boubou trick.**
- **Not the most efficient but fun.**

- **Kill a process controlled by launchd.**
- **Intercept the respawn.**
- **Inject a dynamic library into its Mach-O header.**
- **Dyld will load the library, solve symbols, and execute the library's constructor.**
- **Do whatever we want!**

### Requirements
- **Write to userland memory from kernel.**
  - Easiest solution is to use `vm_map_write_user`.
  - `vm_map_write_user(vm_map_t map, void *src_p, vm_map_address_t dst_addr, vm_size_t size);`
  - "Copy out data from a kernel space into space in the destination map. The space must already exist in the destination map."

- **Map parameter is the map field from the task structure.**
  - `proc` and `task` structures are linked via `void *`.
  - Use `proc_find(int pid)` to retrieve `proc` struct.
  - Or `proc_task(proc_t p)`.
  - Check `kern_proc.c` from XNU source.

- **The remaining parameters are buffer to write from, destination address, and buffer size.**

- **Kernel location to intercept & execute the injection:**
  - Find a kernel function within the new process creation workflow.
  - Hook it with our function responsible for modifying the target's header.
  - We are looking for a specific process, so new `proc` structure fields must be already set.
  - Vnode information can also be used.

- **There's a function called `proc_resetregister`.**
  - Located near the end, so almost everything is ready to pass control to dyld.
  - Easy to rip and hook!
  - Have a look at Hydra (github.com/gdbinit/hydra).

- **Modified Mach-O header:**
  - Very easy to do.
  - Check last year's HiTCON slides.
  - OS.X/Boubou source code (https://github.com/gdbinit/osx_boubou).

- **Dyld must read modified header:**
  - Adding a new library to the header is equivalent to `DYLD_INSERT_LIBRARIES` (LD_PRELOAD).
  - Kernel passes control to dyld.
  - Then dyld to target's entrypoint.
  - Dyld needs to read the Mach-O header.
  - If the header is modified before dyld's control, we can inject a library (or change entrypoint and so on).