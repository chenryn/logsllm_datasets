### Criticality Analysis in Sorting Algorithms

#### Introduction
This section presents an analysis of the criticality structures in various sorting algorithms, focusing on how different error measures and background error rates influence these structures. The study aims to highlight the potential for strategic deployment of computational armoring based on the identified criticalities.

#### Observations from the Data
- **Max Displacement Error vs. Positional Error**: Comparing the bottom graph with the positional error, it is evident that the structure of the max displacement error is similar to that of the positional error. However, as the number of background errors increases, the structure of the max displacement error deteriorates more rapidly.
- **Criticality Structures and Error Measures**: The strict correctness error measure is a special case. Using quick sort, we measured comparison criticality using both normalized positional error and inversions error. 
  - **Positional Error Criticality**: The first \( N = 52 \) comparisons have significantly higher criticalities than the rest. This is because the initial comparisons are crucial for dividing the list into top and bottom halves. A faulty comparison here can place an item approximately \( N/2 \) positions away from its correct position.
  - **Inversions Error Criticality**: The first \( N \) comparisons have lower criticalities. Misplaced items tend to move towards the center, adding only a single inversion even with multiple faults.
  
#### Algorithm-Specific Criticality
- **Bubble Sort**: Bubble sort, with its \( O(N^2) \) comparisons, exhibits smaller criticalities compared to other algorithms. The criticality structure becomes more apparent at higher background error rates. The last \( N \) comparisons are the most critical, and there is a periodic structure of length \( N \) throughout the execution, indicating increased criticality in the second half of each pass.
- **Merge Sort and Quick Sort**: Both algorithms show structures related to the input size \( N = 52 \). Quick sort has high criticality in the first \( N \) comparisons, while merge sort shows high criticality in the last \( N \) comparisons. Bubble sort exhibits a periodic oscillation of length \( N \).

#### Future Work and Conclusions
- **Future Directions**: We plan to apply the concept of criticality to other problems and algorithms, particularly those traditionally approached with strict correctness. Additionally, we aim to investigate additional fault modes to help hardware designers minimize computational damage by triaging and shaping faults.
- **Analytical Predictions**: The observed relationships between input size and criticality suggest the possibility of developing analytical or extrapolated predictions of comparison criticality.
- **Key Findings**: The introduction of criticality and graduated error measures in traditional sorting algorithms revealed previously unseen criticality structures. These structures vary significantly with the chosen error measure and persist even as background failures increase.

#### References
1. K. Ferreira, J. Stearley, J. H. Laros III, R. Oldfield, K. Pedretti, R. Brightwell, R. Riesen, P. G. Bridges, and D. Arnold, “Evaluating the viability of process replication reliability for exascale systems,” in Proceedings of 2011 International Conference for High Performance Computing, Networking, Storage and Analysis. ACM, 2011, p. 44.
2. D. H. Ackley, “Beyond efficiency,” Communications of the ACM, vol. 56, no. 10, pp. 38–40, 2013.
3. 2013 43rd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), Budapest, Hungary, June 24-27, 2013. IEEE, 2013.
4. A. Avižienis, “Fault-tolerance and fault-intolerance: Complementary approaches to reliable computing,” SIGPLAN Not., vol. 10, no. 6, pp. 458–464, Apr. 1975. [Online]. Available: http://doi.acm.org/10.1145/390016.808469
5. S. K. Reinhardt and S. S. Mukherjee, “Transient fault detection via simultaneous multithreading,” in ACM SIGARCH Computer Architecture News, vol. 28, no. 2. ACM, 2000, pp. 25–36.
6. T. Vijaykumar, I. Pomeranz, and K. Cheng, “Transient-fault recovery using simultaneous multithreading,” ACM SIGARCH Computer Architecture News, vol. 30, no. 2, pp. 87–98, 2002.
7. M. Gomaa, C. Scarbrough, T. Vijaykumar, and I. Pomeranz, “Transient-fault recovery for chip multiprocessors,” in Computer Architecture, 2003. Proceedings. 30th Annual International Symposium on. IEEE, 2003, pp. 98–109.
8. J. Ray, J. C. Hoe, and B. Falsafi, “Dual use of superscalar datapath for transient-fault detection and recovery,” in Microarchitecture, 2001. MICRO-34. Proceedings. 34th ACM/IEEE International Symposium on. IEEE, 2001, pp. 214–224.
9. G. A. Reis, J. Chang, N. Vachharajani, R. Rangan, and D. I. August, “Swift: Software implemented fault tolerance,” in Proceedings of the international symposium on Code generation and optimization. IEEE Computer Society, 2005, pp. 243–254.
10. P. P. Shirvani, N. R. Saxena, and E. J. McCluskey, “Software-implemented EDAC protection against SEUs,” Reliability, IEEE Transactions on, vol. 49, no. 3, pp. 273–284, 2000.
11. N. Oh, P. P. Shirvani, and E. J. McCluskey, “Error detection by duplicated instructions in super-scalar processors,” Reliability, IEEE Transactions on, vol. 51, no. 1, pp. 63–75, 2002.
12. R. Venkatasubramanian, J. P. Hayes, and B. T. Murray, “Low-cost online fault detection using control flow assertions,” in On-Line Testing Symposium, 2003. IOLTS 2003. 9th IEEE. IEEE, 2003, pp. 137–143.
13. J. F. Meyer, “On evaluating the performability of degradable computing systems,” Computers, IEEE Transactions on, vol. 100, no. 8, pp. 720–731, 1980.
14. R. Ghosh, K. S. Trivedi, V. K. Naik, and D. S. Kim, “End-to-end performability analysis for infrastructure-as-a-service cloud: An interacting stochastic models approach,” in Dependable Computing (PRDC), 2010 IEEE 16th Pacific Rim International Symposium on. IEEE, 2010, pp. 125–132.
15. J. P. Sterbenz, E. K. Çetinkaya, M. A. Hameed, A. Jabbar, S. Qian, and J. P. Rohrer, “Evaluation of network resilience, survivability, and disruption tolerance: Analysis, topology generation, simulation, and experimentation,” Telecommunication systems, vol. 52, no. 2, pp. 705–736, 2013.
16. J. Elliott, M. Hoemmen, and F. Mueller, “Resilience in numerical methods: A position on fault models and methodologies,” arXiv preprint arXiv:1401.3013, 2014.
17. K. V. Palem, L. N. Chakrapani, Z. M. Kedem, A. Lingamneni, and K. K. Muntimadugu, “Sustaining Moore’s law in embedded computing through probabilistic and approximate design: Retrospects and prospects,” in Proceedings of the 2009 international conference on Compilers, architecture, and synthesis for embedded systems. ACM, 2009, pp. 1–10.
18. V. K. Chippa, S. T. Chakradhar, K. Roy, and A. Raghunathan, “Analysis and characterization of inherent application resilience for approximate computing,” in Proceedings of the 50th Annual Design Automation Conference. ACM, 2013, p. 113.
19. N. Nethercote and J. Seward, “Valgrind: A framework for heavyweight dynamic binary instrumentation,” ACM Sigplan Notices, vol. 42, no. 6, pp. 89–100, 2007.
20. J. Sloan, D. Kesler, R. Kumar, and A. Rahimi, “A numerical optimization-based methodology for application robustification: Transforming applications for error tolerance,” in Dependable Systems and Networks (DSN), 2010 IEEE/IFIP International Conference on. IEEE, 2010, pp. 161–170.
21. V. Estivill-Castro and D. Wood, “A survey of adaptive sorting algorithms,” ACM Computing Surveys (CSUR), vol. 24, no. 4, pp. 441–476, 1992.
22. R. E. Lyons and W. Vanderkulk, “The use of triple-modular redundancy to improve computer reliability,” IBM J. Res. Dev., vol. 6, no. 2, pp. 200–209, Apr. 1962. [Online]. Available: http://dx.doi.org/10.1147/rd.62.0200
23. J. von Neumann, “The general and logical theory of automata,” in Cerebral Mechanisms in Behaviour: the Hixon Symposium (1948), L. A. Jeffress, Ed. Wiley, 1951, pp. 15–19, also appears as pages 302–306 in A.H. Taub, editor, John von Neumann Collected Works: Volume V – Design of Computers, Theory of Automata and Numerical Analysis, Pergamon Press, 1963.

---

This revised version provides a clearer, more coherent, and professional presentation of the original text.