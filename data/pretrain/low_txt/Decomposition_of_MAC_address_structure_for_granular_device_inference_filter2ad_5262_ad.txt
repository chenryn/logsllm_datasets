### 4.4 Validation on Known Device Dataset

As a second method of validation, we evaluate our fingerprinting technique against a set of known, ground-truth devices. We collected 140 Apple and 139 Samsung devices and manually obtained their Layer-2 addresses from their settings menus. The devices span various types (phones, TVs, tablets), life cycles (2007-2016), and operating systems (iOS 1-9.3, Android OS 1.5-6.0). Although our dataset is smaller than the CRAWDAD Sapienza corpus, it provides definitive ground-truth without relying on WPS-based device types. Specifically, the Apple devices allow us to evaluate the effectiveness of mDNS-derived allocations in our database.

Using the technique described in §3.3, we predict each device's manufacturer and model and compare these predictions against the true values. Additionally, we record the number of matching bytes for the lexicographically closest match in our database, along with the protocol (WPS or mDNS) that provides the closest match.

Table 7 presents our inference precision, recall, and F-score (the harmonic mean of precision and recall). Precision measures the correctness of our predictions, while recall measures the ability of our model to make a prediction. In cases where there is no three-byte match, we fail to make any inference. Notably, we did not correctly identify any iOS 7.0 devices. This discrepancy is significant but easily explained: the iOS model derivation process relies on the inclusion of a `dns.txt` key-value pair within the mDNS packet, which is only sent by models running iOS 8.0 or later.

Most devices that are either incorrectly identified or produce no match at the base OUI level are due to a lack of observations in our passive data collection. For example, we have no iPad Pros in our dataset, and thus no insight into their allocation structure, as depicted in Table 8.

For an arbitrary MAC address queried against our database, we define the match offset as the absolute difference between the (n + 1)th byte of the test MAC address and the closest database match, where both MAC addresses match through n bytes (n ≥ 3). We observe that the accuracy of the result increases as the offset of the match decreases. For instance, in Table 8, the three iPad Mini 4 devices have a three-byte (OUI) match with corresponding high offset values (in decimal: 104, 186, 94). The highest offset value of any successfully inferred iPad model is 31.

Compared to our Sapienza validation test, which contains a large percentage (approximately 60%) of Samsung devices, we achieve lower overall accuracy. For Samsung models common to the time period of the Sapienza CRAWDAD collection (Galaxy S4 and earlier), our fingerprinting performance is similar. We attribute the accuracy difference to recent trends in the use of WPS and mDNS by Samsung devices. For older models (circa 2013), our dataset includes 630 WPS Samsung devices, and only 30 Galaxy S5 or newer. An additional 250 Samsung devices transmit the WPS fields only while using a locally assigned MAC address.

To examine the benefit of increased data collection, we plot the successes and failures for the Sapienza CRAWDAD dataset and our own Apple and Samsung devices according to the density of the inferred block in which they fall. If a test MAC address falls within an inferred block of size 2048 and 64 instances of the block’s model within this range, we say the block has a density of 0.03125. Conversely, if a test MAC address falls outside of a block, we say the inferred block has a density of 0.

Figure 10 displays the CDFs of the block densities for our correct and incorrect model inferences. Only 45% of Sapienza correct inferences fall outside of a model block from our database, but are closer to the edge of a block of the correct model than an incorrect model. Conversely, 55% of correct inferences fall inside a block of nontrivial density. Of the Sapienza CRAWDAD MAC addresses for which we made incorrect model inferences, 85% fall outside of any block and hence have a block density of 0. Figure 10 also shows the CDF of the block densities of our correct Apple inferences. Less than 40% of correct Apple inferences fall outside a block, while the majority have densities between \(2 \times 10^{-6}\) and \(8 \times 10^{-6}\). We do not plot our incorrect Apple inferences for our known devices, as only one incorrect inference was made with a nonzero density.

Overall, our results demonstrate that when a MAC address falls inside a block, a higher density indicates an increased likelihood that our guess will be correct.

### 4.5 Cross-Validation

Finally, we conduct a 5-fold cross-validation using our own dataset to evaluate the effectiveness of our closest match methodology. We partition both our WPS and Apple mDNS collections into five randomly chosen sets of equal size. For all MAC addresses in each set, we find the closest matching MAC address in any of the other four sets by both simple distance (interpreting MAC addresses as 48-bit integers) and lexicographical distance. Each set is used once as validation (test) data against the remaining four sets (training); we then compute the arithmetic mean of the accuracies across the five folds.

The WPS 5-fold cross-validation yields an average accuracy of 90.95% using lexicographical distance and 91.16% with simple distance. The simple distance closest match strategy outperforms the lexicographical distance, though only by 0.2%, suggesting that some manufacturers may prefer allocating MAC address blocks across 4-byte boundaries rather than assigning "prefixes" to individual models. This cross-validation accuracy represents an approximately 10% improvement over the accuracy we obtain when testing our model against the older and geographically distant CRAWDAD Sapienza dataset in §4.3, demonstrating the utility in obtaining as many disparate training samples as possible.

Our Apple mDNS 5-fold cross-validation also yields an improvement over the performance of our model using our set of ground-truth devices. With the simple distance closest match metric, we correctly identify the iOS 8.0+ or OS X (iOS 7 and below do not include model-identifying information in mDNS messages) device with an average accuracy of 88.16% across all five validation folds. The lexicographical closest matching method is accurate 88.20% of the time. Both methods represent a 3% improvement over our validation using the set of Apple devices for which we were able to obtain ground-truth.

### 5. Conclusions

Our data suggests that MAC address assignment policies are non-random—vendors of smartphones, tablets, APs, and IoT devices allocate contiguous blocks from their OUIs to individual device models. However, we find no "standard" MAC address allocation strategy. While Apple OUIs are divided into several large chunks for a small number of devices, other manufacturers (e.g., LG and Cisco) allocate small blocks to a larger number of device models.

Our rich dataset, consisting of over two billion 802.11 frames and approximately 3,000 OUIs, allows us to make device model granular predictions for unknown MAC addresses. Our inferences not only improve the granularity of MAC-based fingerprinting but also show that allocation policies are sufficiently varied and complex, causing simple fingerprinting techniques to be inaccurate. For instance, we discover devices that span multiple OUIs and single OUIs that contain devices from multiple vendors—up to seven different manufacturers (§4.2.4).

To validate our ability to form model-level predictions, we test our inferences against a ground-truth set of 279 devices, achieving an F-score of 0.85 to 0.91 for Apple devices (depending on specific model) and an F-score of 0.61 to 0.77 for Samsung devices. We then evaluate our inferences against a public corpus of 802.11 probe requests. In this third-party dataset, collected on a different continent than our own corpus, we achieve 81% accuracy, with most errors being relatively close, i.e., due to re-branded carrier-defined model names.

### 5.1 Future Work

We leave four items for further investigation:

1. During our 802.11 data collection, we observed several link-layer discovery protocols leaking manufacturers and models. These protocols, including Cisco Discovery Protocol (CDP), MicroTik Network Discovery Protocol (MNDP), and others, could provide the basis for an analogous MAC to device model mapping for wired infrastructure.
2. We hypothesize that MAC addresses can provide a geographic indication of where the wireless device was purchased or originated. With continued data collection, we hope to provide insight into the locality of particular ranges of addresses within an OUI. Such a "geo-distribution" of MAC addresses and models could provide valuable analytics to industry and government, allowing the inference of the region of the world devices (and their owners, by proxy) are from. We also conjecture that MAC addresses are likely assigned in a sequential manner (or semi-sequential, accounting for Bluetooth MAC address assignment) within device model blocks, indicating a relative manufacture date.
3. Our findings naturally raise the question of how one might evade model-level fingerprinting. Not only can the MAC address be spoofed, but an adversary might attempt to poison our mapping database by advertising inaccurate data in WPS management frames or mDNS packets. Future work should consider ways to make the inferred address mappings more robust to such attacks.
4. Finally, we encourage manufacturers to adopt a more fine-grained allocation of MAC addresses to particular devices. As seen in §4.2.2 and §4.2.3, the smaller the allocated ranges of MAC addresses are to individual models, the more complex and difficult it is to infer the structure of an OUI, thereby decreasing the inference power of our database.

### Acknowledgments

We thank Adam Aviv, Mark Gondree, Travis Mayberry, and Justin Rohrer for early feedback. This work was supported in part by NSF grant CNS-1213155. Views and conclusions are those of the authors and should not be interpreted as representing the official policies or position of the U.S. government.

### 6. References

[1] Deviceatlas. May 2016. http://deviceatlas.com.
[2] Fingerbank. Sept. 2016. https://fingerbank.inverse.ca.
[3] Udger. May 2016. http://udger.com.
[4] Wireless Universal Resource File (WURFL), May 2016. http://wurfl.sourceforge.io.
[5] D. E. 3rd and J. Abley. IANA Considerations and IETF Protocol and Documentation Usage for IEEE 802 Parameters. RFC 7042 (Best Current Practice), Oct. 2013.
[6] M. V. Barbera, A. Epasto, A. Mei, S. Kosta, V. C. Perta, and J. Stefa. CRAWDAD Dataset Sapienza/Probe-Requests. http://crawdad.org/sapienza/probe-requests/20130910, Sept. 2013.
[7] S. Checkoway, D. McCoy, B. Kantor, D. Anderson, H. Shacham, S. Savage, K. Koscher, A. Czeskis, F. Roesner, T. Kohno, et al. Comprehensive Experimental Analyses of Automotive Attack Surfaces. In USENIX Security Symposium, 2011.
[8] L. C. C. Desmond, C. C. Yuan, T. C. Pheng, and R. S. Lee. Identifying Unique Devices through Wireless Fingerprinting. In Proc. ACM WiSec, 2008.
[9] C. V. Dr. Charlie Miller. Remote Exploitation of an Unaltered Passenger Vehicle, Aug. 2015. http://illmatics.com/Remote%20Car%20Hacking.pdf.
[10] D. Evans. The Internet of Things: How the Next Evolution of the Internet is Changing Everything, Apr. 2011. http://www.cisco.com/c/dam/en_us/about/ac79/docs/innov/IoT_IBSG_0411FINAL.pdf.
[11] J. Franklin, D. McCoy, P. Tabriz, V. Neagoe, J. V. Randwyk, and D. Sicker. Passive Data Link Layer 802.11 Wireless Device Driver Fingerprinting. In Proc. 15th USENIX Security Symposium, 2006.
[12] T. Hupperich, D. Maiorca, M. Kührer, T. Holz, and G. Giacinto. On the Robustness of Mobile Device Fingerprinting: Can Mobile Users Escape Modern Web-Tracking Mechanisms? In Proc of Annual Computer Security Applications Conference, 2015.
[13] IEEE. OUI Public Listing. http://standards.ieee.org/develop/regauth/oui/oui.txt.
[14] iOS Device Database Wiki, May 2016.
[15] B. Konings, C. Bachmaier, F. Schaub, and M. Weber. Device Names in the Wild: Investigating Privacy Risks of Zero Configuration Networking. In IEEE 14th International Conference on Mobile Data Management, 2013.
[16] M. W. L. Schauer and P. Marcus. Estimating Crowd Densities and Pedestrian Flows using Wi-Fi and Bluetooth. In Proceedings of the International Conference on Mobile and Ubiquitous Systems: Computing, Networking and Services, 2014.
[17] J. Lee. Using Guided Missiles in Drive-Bys. DEFCON-17, 2009. https://www.defcon.org/images/defcon-17/dc-17-presentations/defcon-17-egypt-guided-missiles-metasploit.pdf.
[18] Libelium. Meshlium Xtreme Technical Guide v5.9, May 2016. http://www.libelium.com/development/meshlium/documentation/meshlium-technical-guide.pdf.
[19] A. D. Luzio and J. S. A. Mei. Mind Your Probes: De-Anonymization of Large Crowds through Smartphone WiFi Probe Requests. In IEEE INFOCOM, 2016.
[20] J. Martin, D. Rhame, R. Beverly, and J. McEachen. Correlating GSM and 802.11 Hardware Identifiers. In IEEE Military Communications Conference, 2013.
[21] B. O. Models, May 2016. Chimeratool [Online]. Available: https://chimeratool.com/help/How-to-Unlock-OS10-Blackberry.
[22] J. Oliver. glasshole.sh, July 2014. https://julianoliver.com/output/log-2014-05-30-20-52.
[23] J. Oliver. Cyborgunplug, Mar. 2016. https://github.com/JulianOliver/CyborgUnplug.
[24] S. Cheshire, M. Krochmal. DNS-Based Service Discovery. RFC 6763, Feb. 2013.
[25] L. Vaas. Nordstrom Tracking Customer Movement via Smartphones’ WiFi Sniffing, 2013. https://nakedsecurity.sophos.com/2013/05/09/nordstrom-tracking-customer-smartphones-wifi-sniffing/.
[26] L. Vaas. Businesses are Building Shopper Profiles Based on Sniffing Phones’ WiFi, 2014. https://nakedsecurity.sophos.com/2014/01/16/businesses-are-building-shopper-profiles-based-on-sniffing-phones-wifi/.
[27] M. Vanhoef, C. Matte, M. Cunche, L. Cardoso, and F. Piessens. Why MAC Address Randomization is not Enough: An Analysis of Wi-Fi Network Discovery Mechanisms. In ACM AsiaCCS, 2016.
[28] R. H. Weber. Internet of Things–New Security and Privacy Challenges. Computer Law & Security Review, 26(1):23–30, 2010.
[29] Wi-Fi Alliance. Wi-Fi Peer-to-Peer Services (P2Ps) Technical Specification (for Wi-Fi Direct Services Certification). Wi-Fi Alliance Document, 2014.