### References

1. **C. Cowan, S. Beattie, J. Johansen, and P. Wagle.** *Point-Guard: Protecting Pointers From Buffer Overflow Vulnerabilities.* In *Proceedings of the 12th USENIX Security Symposium*, pages 91–104, August 2003.

2. **C. Cowan, C. Pu, D. Maier, H. Hinton, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang.** *StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks.* In *Proceedings of the 7th USENIX Security Symposium*, January 1998.

3. **Edward Ray.** *SANS Malware FAQ: MS-SQL Slam.* Available at: [http://www.sans.org/resources/malwarefaq/ms-sql-exploit.php](http://www.sans.org/resources/malwarefaq/ms-sql-exploit.php).

4. **eEye Digital Security.** *ANALYSIS: Sasser Worm.* Available at: [http://www.eeye.com/html/Research/Advisories/AD20040501.html](http://www.eeye.com/html/Research/Advisories/AD20040501.html).

5. **J. Etoh.** *GCC Extension for Protecting Applications from Stack-Smashing Attacks.* Available at: [http://www.trl.ibm.com/projects/security/ssp](http://www.trl.ibm.com/projects/security/ssp), June 2000.

6. **H. H. Feng, J. T. Griffin, Y. Huang, S. Jha, W. Lee, and B. P. Miller.** *Formalizing Sensitivity in Static Analysis for Intrusion Detection.* In *Proceedings of the IEEE Symposium on Security and Privacy*, Oakland, CA, May 2004.

7. **H. H. Feng, O. M. Kolesnikov, P. Fogla, W. Lee, and W. Gong.** *Anomaly Detection Using Call Stack Information.* In *Proceedings of the IEEE Symposium on Security and Privacy*, Oakland, CA, May 2003.

8. **M. Frantzen and M. Shuey.** *StackGhost: Hardware Facilitated Stack Protection.* In *Proceedings of the USENIX Security Symposium*, pages 55–66, August 2001.

9. **D. Gao, M. K. Reiter, and D. Song.** *On Gray-Box Program Tracking for Anomaly Detection.* In *Proceedings of the 13th USENIX Security Symposium*, pages 103–118, August 2004.

10. **L. Garber.** *New Chips Stop Buffer Overflow Attacks.* *IEEE Computer*, 37(10):28, October 2004.

11. **T. Garfinkel, B. Pfaff, and M. Rosenblum.** *Ostia: A Delegating Architecture for Secure System Call Interposition.* In *Proceedings of the 11th Network and Distributed System Security Symposium (NDSS)*, pages 187–201, February 2004.

12. **T. Garfinkel and M. Rosenblum.** *A Virtual Machine Introspection Based Architecture for Intrusion Detection.* In *Proceedings of the 10th Network and Distributed System Security Symposium (NDSS)*, pages 191–206, February 2003.

13. **J. Griffin, S. Jha, and B. P. Miller.** *Efficient Context-Sensitive Intrusion Detection.* In *Proceedings of the 11th Network and Distributed System Security Symposium (NDSS)*, 2004.

14. **S. A. Hofmeyr, S. Forrest, and A. Somayaji.** *Intrusion Detection Using Sequences of System Calls.* *Journal of Computer Security*, 6(3):151–180, 1998.

15. **R. W. M. Jones and P. H. J. Kelly.** *Backwards-Compatible Bounds Checking for Arrays and Pointers in C Programs.* In *Third International Workshop on Automated Debugging*, 1997.

16. **P. A. Karger.** *Using Registers to Optimize Cross-Domain Call Performance.* In *Third International Conference on Architectural Support for Programming Languages and Operating Systems*, pages 194–204, 1989.

17. **G. S. Kc, S. A. Edwards, G. E. Kaiser, and A. Keromytis.** *CASPER: Compiler-Assisted Securing of Programs at Runtime.* Technical Report TR CUCS-025-02, Columbia University, New York, NY, November 2002.

18. **G. S. Kc, A. D. Keromytis, and V. Prevelakis.** *Countering Code-Injection Attacks With Instruction-Set Randomization.* In *Proceedings of the ACM Computer and Communications Security (CCS) Conference*, pages 272–280, October 2003.

19. **J. King.** *Symbolic Execution and Program Testing.* *Communications of the ACM*, 19(7), 1976.

20. **V. Kiriansky, D. Bruening, and S. Amarasinghe.** *Secure Execution via Program Shepherding.* In *Proceedings of the 11th USENIX Security Symposium*, pages 191–205, August 2002.

21. **C. Kruegel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna.** *Automating Mimicry Attacks Using Static Binary Analysis.* In *Proceedings of the 14th USENIX Security Symposium*, July 2005.

22. **L. C. Lam and T. Chiueh.** *Automatic Extraction of Accurate Application-Specific Sandboxing Policy.* In *Proceedings of the International Symposium on Recent Advances in Intrusion Detection (RAID)*, pages 1–20, September 2004.

23. **W. Lee, S. Stolfo, and P. Chan.** *Learning Patterns from Unix Process Execution Traces for Intrusion Detection.* In *Proceedings of the AAAI97 Workshop on AI Methods in Fraud and Risk Management*, 1997.

24. **K. Lhee and S. J. Chapin.** *Type-Assisted Dynamic Buffer Overflow Detection.* In *Proceedings of the 11th USENIX Security Symposium*, pages 81–90, August 2002.

25. **C. M. Linn, M. Rajagopalan, S. Baker, C. Collberg, S. K. Debray, and J. H. Hartman.** *Protecting Against Unexpected System Calls.* In *Proceedings of the 14th USENIX Security Symposium*, July 2005.

26. **G. C. Necula, S. McPeak, and W. Weimer.** *CCured: Type-Safe Retrofitting of Legacy Code.* In *Proceedings of the Principles of Programming Languages (PoPL)*, January 2002.

27. **M. Prasad and T. Chiueh.** *A Binary Rewriting Defense Against Stack-Based Buffer Overflow Attacks.* In *Proceedings of the USENIX Annual Technical Conference*, pages 211–224, June 2003.

28. **V. Prevelakis and D. Spinellis.** *Sandboxing Applications.* In *Proceedings of the USENIX Technical Annual Conference, Freenix Track*, pages 119–126, June 2001.

29. **N. Provos.** *Improving Host Security with System Call Policies.* In *Proceedings of the 12th USENIX Security Symposium*, pages 257–272, August 2003.

30. **J. Rabek, R. Khazan, S. Lewandowski, and R. Cunningham.** *Detection of Injected, Dynamically Generated and Obfuscated Malicious Code.* In *Proceedings of the Workshop on Rapid Malcode (WORM)*, 2003.

31. **O. Ruwase and M. S. Lam.** *A Practical Dynamic Buffer Overflow Detector.* In *Proceedings of the 11th Network and Distributed System Security Symposium (NDSS)*, pages 159–169, February 2004.

32. **B. Schwarz, S. K. Debray, and G. R. Andrews.** *PLTO: A Link-Time Optimizer for the Intel IA-32 Architecture.* In *Proceedings of the 2001 Workshop on Binary Translation (WBT-2001)*, 2001.

33. **R. Sekar, M. Bendre, D. Dhurjati, and P. Bollineni.** *A Fast Automaton-Based Method for Detecting Anomalous Program Behaviors.* In *Proceedings of the IEEE Symposium on Security and Privacy*, Oakland, CA, 2001.

34. **H. Shacham, M. Page, B. Pfaff, E. Goh, N. Modadugu, and D. Boneh.** *On the Effectiveness of Address-Space Randomization.* In *Proceedings of the ACM Conference on Computer and Communications Security (CCS)*, pages 298–307, October 2004.

35. **Solar Designer.** *Openwall: Non-Executable Stack Patch.* Available at: [http://www.openwall.com/linux](http://www.openwall.com/linux).

36. **Tool Interface Standards Committee.** *Executable and Linking Format (ELF) Specification*, May 1995.

37. **Vendicator.** *Stack Shield.* Available at: [http://www.angelfire.com/sk/stackshield](http://www.angelfire.com/sk/stackshield).

38. **D. Wagner and D. Dean.** *Intrusion Detection via Static Analysis.* In *Proceedings of the IEEE Symposium on Security and Privacy*, pages 156–169, Oakland, CA, 2001.

39. **D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken.** *A First Step towards Automated Detection of Buffer Overrun Vulnerabilities.* In *Proceedings of the 7th Network and Distributed System Security Symposium (NDSS)*, pages 3–17, February 2000.

40. **D. Wagner and P. Soto.** *Mimicry Attacks on Host-Based Intrusion Detection Systems.* In *Proceedings of the Ninth ACM Conference on Computer and Communications Security*, 2002.

41. **D. S. Wallach and E. W. Felten.** *Understanding Java Stack Inspection.* In *Proceedings of the 1996 IEEE Symposium on Research in Security and Privacy*, pages 52–63, May 1998.

42. **C. Warrender, S. Forrest, and B. A. Pearlmutter.** *Detecting Intrusions Using System Calls: Alternative Data Models.* In *IEEE Symposium on Security and Privacy*, pages 133–145, 1999.

43. **A. Wespi, M. Dacier, and H. Debar.** *Intrusion Detection Using Variable-Length Audit Trail Patterns.* In *Proceedings of the 3rd International Workshop on the Recent Advances in Intrusion Detection (RAID)*, 2000.

44. **J. Wilander and M. Kamkar.** *A Comparison of Publicly Available Tools for Dynamic Intrusion Prevention.* In *Proceedings of the 10th Network and Distributed System Security Symposium (NDSS)*, pages 123–130, February 2003.

45. **H. Xu, W. Du, and S. J. Chapin.** *Context Sensitive Anomaly Monitoring of Process Control Flow to Detect Mimicry Attacks and Impossible Paths.* In *Proceedings of the International Symposium on Recent Advances in Intrusion Detection (RAID)*, pages 21–38, September 2004.

### Appendix

#### Figures

**Figures 8, 9, 10, and 11** demonstrate declining average execution time for system calls in our extended micro-benchmark tests, and indicate that the overhead due to e-NeXSh is in the range of 3–8% per invocation.

**Figure 8. Micro-benchmark results: open.**

- **Iterations:**
  - open-none
  - open-enx

**Figure 9. Micro-benchmark results: mprotect.**

- **Iterations:**
  - mprotect-none
  - mprotect-enx

**Figure 10. Micro-benchmark results: connect.**

- **Iterations:**
  - connect-none
  - connect-enx

**Figure 11. Micro-benchmark results: socket.**

- **Iterations:**
  - socket-none
  - socket-enx

---

**Note:** The figures and their corresponding data are presented in a clear and consistent format, showing the performance metrics for different system calls with and without e-NeXSh.

---

**Authorized Use:**
- **Licensed to:** Tsinghua University
- **Downloaded on:** March 25, 2021 at 12:11:32 UTC from IEEE Xplore
- **Restrictions apply.**

**Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005)**
- **ISSN:** 1063-9527/05
- **Price:** $20.00
- **Copyright:** © 2005 IEEE