# Table 1: List of Test Applications
Type abbreviations: (S)tack overflow, (H)eap overflow, and (F)ormat string.

## http.c

```c
119: int read_header(int sid)
120: {
121: 
122:     char line[2048];
    char *pTemp;
...
127:     do {
128:         memset(line, 0, sizeof(line));
129:         sgets(line, sizeof(line)-1, conn[sid].socket);
130:         striprn(line);
...
```

## server.c

```c
202: int sgets(char *buffer, int max, int fd)
203: {
...
209:     conn[sid].atime = time((time_t*)0);
210:     while (nout_headdone = 1; ...
...
151:     strncpy(conn[sid].dat->in_Connection, (char *)&line + 12, sizeof(conn[sid].dat->in_Connection) - 1);
152:     if (strncasecmp(line, "Content-Length: ", 16) == 0) 
        conn[sid].dat->in_ContentLength = atoi((char *)&line + 16);
153:     if (strncasecmp(line, "Cookie: ", 8) == 0)
...
169:     if (conn[sid].dat->in_ContentLength > in_ContentLength + 1024, sizeof(char)) {
170:         if (conn[sid].PostData == NULL) {
...
/* Reading beyond PostContentLength is required for IE5.5 and NS6 (HTTP 1.1) */
98: do {
99:     rc = recv(conn[sid].socket, pPostData, 1024, 0);
100:     if (rc == -1) {
...
```

### Memory Region
- **Type:** Heap
- **Taint**
- **Corruption Point**

**Figure 6: A graphical representation of the vulnerability in Null HTTP**

## Incomplete Library Specification
Our testing allowed us to observe certain properties of the C library that require a more expressive specification than our current implementation uses. For example, `strtok(char *str, char *delim)` tokenizes a given string. Subsequent calls with a `NULL` argument are not included in the write set (WS) of the original string, leading to memory writes being interpreted as illegal during debugging.

Certain library functions modify global variables as side effects. For instance, `getopt` returns the argument through the global variable `optarg`. The function call statements are not in `optarg`'s WS, causing false positives during debugging. Another example is `errno`, which is used to return error numbers throughout the C library.

Some library functions return pointers to global variables hidden from the client program using `attribute-hidden`. Examples include `getdatetime`, `gmtime` in `time.h`, and `gethostbyaddr`, `gethostbyname` in `socket.h`. When the returned value is assigned to a program variable, MemSherlock fails to find a corresponding `MemoryRegion` and raises a false alarm.

False positives due to library functions can be prevented by using a more expressive library specification.

### Struct Pointers
MemSherlock relies on type information as little as possible. However, struct pointers are one of the few instances where MemSherlock requires type information supplied through flagging the variable. This allows the debugger to determine if the pointer is pointing to a field or the entire struct. Two of our test applications use `void *` type pointers to refer to struct variables using explicit type casting. When the struct variable is modified through this pointer, MemSherlock raises an error upon the modification of the second and later fields. These false positives can be prevented by checking for such type casting during static analysis and communicating this information to the debugger either through the input file or client calls at debugging time.

## False Negative Analysis
The MemSherlock debugging agent is implemented as a Valgrind skin. Unfortunately, Valgrind cannot trace into kernel instructions, so our current implementation cannot detect memory region modifications done by kernel instructions. This is different from system calls, which are handled successfully.

While experimenting with Prozzilla, we noticed that `vfprintf` makes a call to `mempcpy`, which is identical to `memcpy` except that it returns the destination pointer instead of the number of bytes copied. When copying large chunks of memory that span multiple virtual memory pages, `mempcpy` uses kernel functions to modify the page table. The current implementation of MemSherlock's debugging agent cannot see such memory writes and fails to detect the memory corruption.

It is easy to prevent such false negatives by writing wrappers for library functions that modify memory without using client program instructions. Newer versions of Valgrind support wrapper functions that can intercept calls to library functions. Such a wrapper function would check if the write is legitimate before the actual call to the library is made and perform any pointer-related assignments once the function returns.

Although we have not encountered other false negatives during our experiments, we are aware that the current implementation can cause several types of false negatives. The most obvious one is the use of structs within arrays or unions. Since we currently handle such memory regions as single blocks, we cannot distinguish writes to individual fields. For arrays, it is possible to subdivide the memory region and monitor each element, but this can degrade performance. Using compressed data structures could solve this problem, but due to time limitations, we did not include this functionality in our proof-of-concept implementation.

Another type of false negative can occur with chained dereferencing expressions like `var[i].field[j] = some_exp`. `SrcRewrite` converts the l-value into a temporary variable `temp = var[i].field`. Our current implementation fails to detect an illegal write when the index `i` is out of bounds. Bounds checking on these indices can remove the possibility of false negatives. Inserting bounds checking for arrays can be done during source code rewriting, and for heap buffers, the bounds checking can be deferred to the debugger via client calls.

Ideally, we would perform fine-grained monitoring on library regions as well. However, in our current implementation, we treat dynamically linked libraries as grey boxes, defined only by their specifications. Even though this could potentially cause a false negative, an attack exploiting this shortcoming would have to modify library data alone to succeed.

## Related Work
MemSherlock is closely related to intrusion detection systems that perform memory-level monitoring, such as Minos [6] and TaintCheck [20]. These systems can detect the improper use of tainted data by tracking the propagation of untrusted data. MemSherlock also incorporates taint tracking but relies on different detection mechanisms, providing vulnerability information that Minos and TaintCheck cannot offer.

Brumley et al. [1] recently investigated the automatic generation of vulnerability-based signatures, requiring the specification of vulnerability points and conditions. Newsome et al. proposed self-hardening programs [9], which can remove vulnerabilities from the program to make it immune to exploits. MemSherlock can complement these approaches by providing vulnerability information.

Address space randomization techniques, such as PaX ASLR [21], TRR [28], and ASLP [10], have been proposed to detect memory corruption attacks. These approaches can trigger the MemSherlock debugging phase. Network-based IDSs, such as [11, 12, 24], can automatically generate signatures for unknown attacks but do not provide vulnerability information. IPSs relying on such syntactic signatures have been shown to be vulnerable to attacks [26].

## Conclusion and Future Work
In this paper, we presented the development of MemSherlock, a security debugging tool that can identify unknown memory corruption vulnerabilities automatically upon detecting malicious payloads. MemSherlock provides critical information for unknown memory corruption vulnerabilities, including the corruption point in the source code, the slice of source code that helps the malicious input reach the corruption point, and a description of how the malicious input exploits the unknown vulnerability. We evaluated MemSherlock with 11 real-world applications that have buffer overflow, heap overflow, and format string vulnerabilities. Our results demonstrated that MemSherlock is a useful tool for facilitating the vulnerability analysis process.

Our future work will focus on improving the implementation of MemSherlock to address its limitations, such as the inability to deal with assembly code and the coarse-grained monitoring of memory regions allocated by shared libraries. We will also improve the automated analysis and presentation of the analysis results to make them more intuitive and easier to use.

## References
[1] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha. Towards automatic generation of vulnerability-based signatures. In Proceedings of the IEEE Symposium on Security and Privacy, May 2006.
[2] H. Chen, D. Dean, and D. Wagner. Model checking one million lines of C code. In Proceedings of the 11th Annual Network and Distributed System Security Symposium (NDSS), February 2004.
[3] H. Chen and D. Wagner. MOPS: An infrastructure for examining security properties of software. In Proceedings of the 9th ACM Conference on Computer and Communications Security (CCS’02), November 2002.
[4] S. Chen, J. Xu, and E. C. Sezer. Non-control-data attacks are realistic threats. In Proceedings of 14th USENIX Security Symposium, 2005.
[5] CodeSurfer. http://www.grammatech.com/products/codesurfer/.
[6] J. R. Crandall and F. T. Chong. Minos: Control data attack prevention orthogonal to memory model. In Proceedings of the 37th Annual IEEE/ACM International Symposium on Microarchitecture, pages 221–232, December 2004.
[7] J. R. Crandall, Z. Su, S. F. Wu, and F. T. Chong. On deriving unknown vulnerabilities from zero-day polymorphic and metamorphic worm exploits. In Proceedings of the 13th ACM Conference on Computer and Communications Security, pages 235–248, 2005.
[8] H. Feng, J. Griffin, Y. Huang, S. Jha, W. Lee, and B. Miller. Formalizing sensitivity in static analysis for intrusion detection. In Proceedings of the 2004 IEEE Symposium on Security and Privacy, May 2004.
[9] D. S. James Newsome, David Brumley. Vulnerability-specific execution filtering for exploit prevention on commodity software. In Proceedings of the 13th Annual Network and Distributed System Security Symposium (NDSS ’06), Feb 2006.
[10] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. Address space layout permutation (ASLP): Towards fine-grained randomization of commodity software. In Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC ’06), pages 339–348, December 2006.
[11] H. Kim and B. Karp. Autograph: Toward automated, distributed worm signature detection. In Proceedings of the 13th USENIX Security Symposium, August 2004.
[12] C. Kreibich and J. Crowcroft. Honeycomb - creating intrusion detection signatures using honeypots. In Proceedings of the Second Workshop on Hot Topics in Networks (HotNets-II), November 2003.
[13] W. Landi. Undecidability of static analysis. ACM Letters on Programming Languages and Systems, 1(4):323–337, December 1992.
[14] D. Larochelle and D. Evans. Statically detecting likely buffer overflow vulnerabilities. In Proceedings of the 10th USENIX Security Symposium, August 2001.
[15] Z. Liang and R. Sekar. Fast and automated generation of attack signatures: A basis for building self-protecting servers. In Proceedings of the 13th ACM Conference on Computer and Communications Security, pages 213–222, 2005.
[16] Z. Liang and R. Sekar. Fast and automated generation of attack signatures: A basis for building self-protecting servers. In Proceedings of 12th ACM Conference on Computer and Communication Security (CCS ’05), pages 213–222, 2005.
[17] G. Necula, J. Condit, M. Harren, S. McPeak, and W. Weimer. CCured: Type-safe retrofitting of legacy software. ACM Transaction on Programming Languages and Systems, 27(3):477–526, May 2005.
[18] G. Necula, S. McPeak, and W. Weimer. CCured: Type-safe retrofitting of legacy software. In Proceedings of the 29th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages 128–139, 2002.
[19] N. Nethercote. Dynamic binary analysis and instrumentation, 2004. valgrind.org/docs/phd2004.pdf.
[20] J. Newsome and D. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proceedings of The 12th Annual Network and Distributed System Security Symposium (NDSS ’05), February 2005.
[21] PaX Team. http://pax.grsecurity.net/docs/aslr.txt.
[22] G. Ramalingam. The undecidability of aliasing. ACM Transactions on Programming Languages and Systems, 16(5):1467–1471, September 1994.
[23] S. Sidiroglou, M. Locasto, S. Boyd, and A. Keromytis. Building a reactive immune system for software services. In Proceedings of USENIX Annual Technical Conference, pages 149–161, April 2005.
[24] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated worm fingerprinting. In Proceedings of the 6th ACM/USENIX Symposium on Operating System Design and Implementation (OSDI), December 2004.
[25] A. Smirnov and T. Chiueh. DIRA: Automatic detection, identification, and repair of control-hijacking attacks. In Proceedings of The 12th Annual Network and Distributed System Security Symposium (NDSS ’05), February 2005.
[26] G. Vigna, W. Robertson, and D. Balzarotti. Testing network-based intrusion detection signatures using mutant exploits. In CCS ’04: Proceedings of the 11th ACM conference on Computer and communications security, pages 21–30, New York, NY, USA, 2004. ACM Press.
[27] H. Wang, C. Guo, D. Simon, and A. Zugenmaier. Shield: Vulnerability-driven network filters for preventing known vulnerability exploits. In Proceedings of ACM SIGCOMM, August 2004.
[28] J. Xu, Z. Kalbarczyk, and R. K. Iyer. Transparent runtime randomization for security. In Proceedings of 22nd Symposium on Reliable Distributed Systems - SRDS 2003, pages 260–269, 2003. IEEE Computer Society, Oct.
[29] J. Xu, P. Ning, C. Kil, Y. Zhai, and C. Bookhold. Automatic diagnosis and response to memory corruption vulnerabilities. In Proceedings of the 13th ACM Conference on Computer and Communications Security, pages 223–234, 2005.
[30] P. Zhou, W. Liu, L. Fei, S. Lu, F. Qin, Y. Zhou, S. Midkiff, and J. Torrellas. Accmon: Automatically detecting memory-related bugs via program counter-based invariants. In MICRO 37: Proceedings of the 37th annual International Symposium on Microarchitecture, pages 269–280, Washington, DC, USA, 2004. IEEE Computer Society.
[31] P. Zhou, F. Qin, W. Liu, Y. Zhou, and J. Torrellas. iWatcher: Efficient architectural support for software debugging. In Proceedings of the 31st International Symposium on Computer Architecture (ISCA), 2004.