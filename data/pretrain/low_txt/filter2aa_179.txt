# Blowing up the Celly: Building Your Own SMS/MMS Fuzzer

## Presenters
- **Brian Gorenc**
  - **Employer:** HP
  - **Organization:** HP Security Research, Zero Day Initiative
  - **Responsibilities:**
    - Manager, Vulnerability Research
    - Organizing Pwn2Own Hacking Competition
    - Verifying EIP == 0x41414141
  - **Free Time:**
    - Endlessly following code paths that don’t lead to vulnerabilities
  - **Twitter:** @MaliciousInput, @thezdi

- **Matt Molinyawe**
  - **Employer:** HP
  - **Organization:** HP Security Research, Zero Day Initiative
  - **Responsibilities:**
    - Security Researcher
    - Enjoying funny and awesome proof of concepts
    - Measuring productivity in hours of YouTube watched
    - Process Janitor – Make exploits shine and not crash
    - Calc Connoisseur
  - **Free Time:**
    - DJ Manila Ice – Two-time United States Finalist DJ
    - Beat Contra using only the laser without death
    - Beat QWOP
    - Martial Arts
  - **Twitter:** @djmanilaice

## Agenda
1. Introduction
2. Testing Environment
3. Bug Hunting
4. Live Demonstration
5. Key Takeaways

## Introduction
Fuzzing SMS/MMS is an intriguing topic due to the always-on nature of mobile technology and the limited inline defenses. Each researcher may approach the problem differently, often developing their own fuzzer with mutation logic. This talk aims to demonstrate various approaches to get started with phone fuzzing, using Android as the reference device for research and demonstration.

## Testing Environment

### Virtual Lab and Configuration
- **Android Emulation:**
  - Easy to set up: [http://developer.android.com/sdk](http://developer.android.com/sdk)
  - Create Virtual ARM devices:
    - `android create avd -n MyDeviceName -t android-19 -b default/armeabi-v7a`
    - Use the UI with: `android avd`
  - Write scripts to generate AVDs and power them on.

- **iOS Emulation:**
  - No default Messaging app on the emulator.

- **Windows Phone Emulation:**
  - SDK available at: [http://dev.windowsphone.com/en-us/downloadsdk](http://dev.windowsphone.com/en-us/downloadsdk)

### Android Emulator Options
- **Android SDK:**
  - Benefits of testing with several API versions (ARM and x86 images).
  - Emulations can be slow.

- **Genymotion:**
  - Fast x86 Virtualbox Virtual Machines.
  - User-friendly interface.
  - Available at: [genymotion.com](https://www.genymotion.com/)

### Debugging
- **Attaching a Debugger to the Virtual Device:**
  - On the Android Virtual Device:
    - Shell into the device.
    - Run `gdbserver` attached to the process `com.android.mms`:
      - `gdbserver :5039 --attach 1234`
    - Forward traffic to a TCP port:
      - `adb forward tcp:5039 tcp:5039`
  - On the host machine:
    - Download Android NDK: [http://developer.android.com/tools/sdk/ndk/index.html](http://developer.android.com/tools/sdk/ndk/index.html)
    - Run a prebuilt GDB, e.g., `arm-linux-androideabi-gdb`.
    - In the debug session, run: `target remote :5039`

- **Scripting/Automation for Emulators:**
  - **SMS Fuzzing:**
    - Send PDU formatted messages with `send pdu` over the telnet channel.
    - Initial failures with MMS can lead to success.
    - Backup MMSs using tools like EasyBackup.
    - Manipulate `mmssms.db` (SQLite database) without writing Java.

  - **MMS Fuzzing:**
    - Save a clean `mmssms.db` and compare with the changed database.
    - Use `adb pull` to retrieve the clean database, make changes, and push the new database.
    - Interesting directories:
      - `/data/data/com.android.providers.telephony/databases` (where `mmssms.db` is located)
      - `/data/data/com.android.providers.telephony/app_parts` (where attachments go)
    - Send MMS to a fake number by altering tables: `pdu`, `addr`, `part`, `canonical_addresses`, and `threads`.
    - Automate this with Python and SQLite3.
    - Push the altered `mmssms.db` back to the phone and set permissions to `radio:radio`.

  - **Monkeyrunner:**
    - Use for automating clicks and sending text.
    - Jython scriptable automation in SDK tools: [http://developer.android.com/tools/help/monkeyrunner_concepts.html](http://developer.android.com/tools/help/monkeyrunner_concepts.html)

## Real-World Lab and Configuration

### Hardware
- **RX/TX:**
  - Universal Software Radio Peripheral (USRP)
  - BladeRF
  - RangeNetworks Device
- **Emissions Control:**
  - RF Enclosure

### Software
- **OpenBTS:** [http://www.openbts.org/](http://www.openbts.org/)
- **Base Station Information:** [http://openbsc.osmocom.org/trac](http://openbsc.osmocom.org/trac)
- **NanoBTS:** [http://openbsc.osmocom.org/trac/wiki/nanoBTS](http://openbsc.osmocom.org/trac/wiki/nanoBTS)
- **Debugging Tools:** Usually come with the platform or are available for purchase.

### Cell Phones and Other Materials
- **Cell Phones:**
  - Choose your favorite cellphone target for fuzzing.
- **SIM Cards:**
  - Purchase from “big box” stores.

### Setting Up OpenBTS
- **Setup Instructions:**
  - [https://github.com/RangeNetworks/dev/wiki](https://github.com/RangeNetworks/dev/wiki)
  - Used Ubuntu 12.04 32-bit on a VM.
  - Build and find binaries for OpenBTS:
    - [https://wush.net/trac/rangepublic/wiki/BuildInstallRun](https://wush.net/trac/rangepublic/wiki/BuildInstallRun)
    - `svn co http://wush.net/svn/range/software/public`
    - Built with `--with-uhd` (Ettus N210 USRP).
  - UHD Drivers for Ettus N210 support:
    - [http://code.ettus.com/redmine/ettus/projects/uhd/wiki/UHD_Linux](http://code.ettus.com/redmine/ettus/projects/uhd/wiki/UHD_Linux)
    - Use commands: `uhd_find_device`, `uhd_usrp_probe`.

### USRP/Antennas/Cabling
- **Ettus N210 USRP:**
  - VERT900 Antennae
  - SMA Cable

### RF Enclosures
- **Ramsey STE3000FAV:**
  - [http://www.ramseytest.com/product.php?pid=10](http://www.ramseytest.com/product.php?pid=10)

### GSM Network Setup
- Set up a GSM network to mimic an AT&T network with the USRP in the enclosure.
  - `GSM.Identity.MCC` to 310
  - `GSM.Identity.MNC` to 410

### Bill of Materials
- **USRP and Accessories:**
  - USRP N210 Kit (782747-01): $1,717.00
  - WBX-40 USRP Daughterboard: $480.00
  - USRP GPS-Disciplined Oscillator Kit: $758.00
  - SMA-to-SMA Cable Assembly: $30.00
  - VERT900 Vertical Antenna Dualband: $35.00
  - Total: $3,020.00

- **Cell Phones and SIMs:**
  - Unlocked Phones: ~$500
  - Pre-paid SIMs: ~$10-$20
  - Micro SIM Cutter Tool: ~$5
  - Total: ~$550

- **RF Enclosure and Accessories:**
  - STE3000FAV: $2,495.00
  - SMA Feedthrough Connectors
  - DB9 10 PF and DB9 100 PF Connectors
  - USB, RJ45 Adapter Kits
  - Total: $3,096.00

## Connecting to the USRP on Android
- **Steps to connect and start fuzzing:**
  - Start up OpenBTS
  - Check devices connected with `tmsis`
  - Send messages with OpenBTS
  - Basic text messages

## Bug Hunting

### File Formats
- **Audio:**
  - "audio/aac", "audio/amr", "audio/imelody", "audio/mid", "audio/midi", "audio/mp3", "audio/mpeg3", "audio/mpeg", "audio/mpg", "audio/mp4", "audio/x-mid", "audio/x-midi", "audio/x-mp3", "audio/x-mpeg3", "audio/x-mpeg", "audio/x-mpg", "audio/3gpp", "audio/x-wav", "application/ogg"

- **Video:**
  - "video/3gpp", "video/3gpp2", "video/h263", "video/mp4"

- **Pictures:**
  - "image/jpeg", "image/jpg", "image/gif", "image/vnd.wap.wbmp", "image/png", "image/x-ms-bmp"

- **Others:**
  - "text/x-vCalendar", "text/x-vCard"

- **Easy File Format Candidates:**
  - [https://github.com/klinker41/android-smsmms/blob/master/src/com/google/android/mms/ContentType.java](https://github.com/klinker41/android-smsmms/blob/master/src/com/google/android/mms/ContentType.java)
  - Download AOSP: [http://source.android.com](http://source.android.com)
  - Source from Samsung: [http://opensource.samsung.com/reception.do](http://opensource.samsung.com/reception.do)
  - Search for MIME, image/, audio/, video/ using `rgrep`

### Fuzzing Framework
- **Fuzzing Seeds:**
  - [https://samples.libav.org/](https://samples.libav.org/)
  - [http://samples.mplayerhq.hu/](http://samples.mplayerhq.hu/)
  - Google file formats with `filetype:` operator

- **Mutation Libraries:**
  - Creating vCards and vCals:
    - [http://vobject.skyhouseconsulting.com/](http://vobject.skyhouseconsulting.com/)
    - [https://pypi.python.org/pypi/vobject](https://pypi.python.org/pypi/vobject)
  - Fuzzing PDU formats:
    - [https://pypi.python.org/pypi/smspdu/](https://pypi.python.org/pypi/smspdu/)

- **Fuzzing Libraries:**
  - Hachoir: [https://bitbucket.org/haypo/hachoir/wiki/Home](https://bitbucket.org/haypo/hachoir/wiki/Home)
  - Radamsa: 
    - [https://www.ee.oulu.fi/research/ouspg/Radamsa](https://www.ee.oulu.fi/research/ouspg/Radamsa)
    - [https://code.google.com/p/ouspg/wiki/Radamsa](https://code.google.com/p/ouspg/wiki/Radamsa)

- **Crash Triaging:**
  - Easy to roll your own GDB wrapper and create a web app with a database backend to distribute load.

## Live Demonstrations
- Video backups available.
- Pray to the Demo Gods!

## Key Takeaways
- **Attractive Targets:**
  - Filled with personal information and corporate secrets.
  - Process information without user interaction.
  - Handle large numbers of legacy formats.

- **Decreasing Barrier to Entry:**
  - Leverage emulation provided by OS developers.
  - Physical hardware becoming cheaper.
  - Popularity of software-defined radio increasing.
  - Leverage previous lessons learned.
  - Similar to fuzzing desktop apps to find bugs in MMS data handlers.
  - Break through the mystique of cell phone research.

## Thank You

© Copyright 2014 Hewlett-Packard Development Company, L.P. The information contained herein is subject to change without notice.