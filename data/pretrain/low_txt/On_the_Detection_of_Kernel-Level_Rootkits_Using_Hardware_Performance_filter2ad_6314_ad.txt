### Isolated Core and Bus Allocation
To ensure optimal performance, it is recommended to dedicate an isolated core or an isolated bus for that specific core.

### Profiling Benchmark
The profiling benchmark utilized in this work can largely be integrated into a practical detector. The benchmark would be executed periodically, with the captured HPC (Hardware Performance Counter) values then analyzed by the rootkit detector. While a rootkit could detect the benchmark's execution and disable its functionality before it runs, this would have the side effect of ensuring that the benchmark captures the actual, unmodified state (e.g., processes and network connections) of the system. 

If the rootkit detects the benchmark and continues to hide its presence, it can be detected using the HPC values. Conversely, if the rootkit disables its hiding techniques to evade HPC detection, the data collected by the benchmark will reveal the very elements the rootkit is trying to conceal, thereby allowing traditional detection methods to be effective.

### Evasion Techniques
The experiments conducted in this work were based on the assumption that the rootkit is unaware of the profiling method. However, can rootkits adapt to evade this technique using a mimicry attack? The answer depends on how the rootkit impacts the HPCs. If the HPC impacts are due to immutable factors, such as branches related to hooking, then evasion is unlikely. However, if the HPC impacts are simply a reflection of different code characteristics when infected, the rootkit author could modify their code to maintain a similar average HPC profile as normal OS code. This approach, however, would likely increase the number of instructions executed, making it susceptible to simpler detection methods, such as those employed by NumChecker.

While our experiments show that HPCs are effective for detecting rootkits that use hooking, the lack of significant HPCs from DKOM (Direct Kernel Object Manipulation) based kits suggests that HPCs are not a universal solution for rootkit detection. We hypothesize that other types of rootkits, such as those using return-oriented programming, may also evade this technique. However, it is encouraging to note that most rootkits employ hooking, and non-hooking attacks may not be as powerful.

### HPC Collection Methodology
In this work, we collected HPCs inside a virtual machine using Intel’s VTune, a tool designed to assist developers in optimizing their programs. Other works have developed custom HPC collection mechanisms or run directly on bare hardware. While the detection results indicate that HPC collection was effective, the question remains about the noise introduced by these various techniques. It would be interesting to benchmark different HPC collection methods to gauge their accuracy. It is also important to verify that HPC collection within a VM has similar accuracy to that on bare metal.

### Related Work
- **Demme et al. [6]**: Their initial results on rootkit detection were not promising. Our work, however, shows significantly higher accuracy. This difference can be attributed to the broader range of rootkits tested, including 100 variants of 5 real-world kernel rootkits and 5 synthetic rootkits.
- **NumChecker [29]**: A system that detects Linux rootkits by analyzing HPC deviations during kernel function execution. Unlike our machine learning-based approach, NumChecker manually selects HPCs for analysis.
- **Tang et al. [27]**: Use unsupervised machine learning to build profiles of normal application HPC patterns and detect deviations, focusing on user-level malware.
- **Ozsoy et al. [18]**: Propose the Malware Aware Processor (MAP), which uses micro-architectural events to detect user-level malware in hardware.
- **kBouncer [19]**: Uses last branch recording (LBR) to detect ROP (Return-Oriented Programming) code.
- **Other Works [4, 23, 32]**: Investigate the use of opcodes for malware detection.
- **Maurice et al. [15]**: Use HPCs to reverse engineer the last level cache, simplifying side-channel attacks.
- **Malone et al. [14]**: Design a method for using HPCs to provide integrity checking of running applications.

### Conclusion
This work provides a comprehensive analysis of the applicability of HPCs for detecting kernel rootkits. We extend and expand on the preliminary results found in Demme et al. [6], demonstrating that HPCs can detect rootkits with very high accuracy (>99%). Using machine learning, we identified the 16 most significant HPCs for detecting Windows 7 rootkits that use IRP and SSDT hooking. We also demonstrated that an SVM-based classifier can detect new, real-world rootkits despite being trained on a set of synthetic rootkits. This work lays the theoretical and practical foundations for building a fully functional, HPC-based rootkit detector.

### Acknowledgments
This paper was made possible by NPRP grants 4-1593-1-260 and 8-1474-2-626 from the Qatar National Research Fund (a member of Qatar Foundation). The statements made herein are solely the responsibility of the authors. We also thank Aisha Hasan and the reviewers for their helpful comments.

### References
[1] Intel R Software Guard Extensions Programming Reference, 2014. Accessed Apr. 2016 at https://software.intel.com/sites/default/files/managed/48/88/329298-002.pdf.
[2] S. Bandyopadhyay. A Study on Performance Monitoring Counters in x86-Architecture. Indian Statistical Institute, 2004.
[3] R. Berrendorf and H. Ziegler. PCL–the Performance Counter Library: A Common Interface to Access Hardware Performance Counters on Microprocessors, Version 1.3, 1998.
[4] D. Bilar. Opcodes as Predictor for Malware. International Journal of Electronic Security and Digital Forensics, 1(2):156–168, 2007.
[5] S. Browne, J. Dongarra, N. Garner, G. Ho, and P. Mucci. A Portable Programming Interface for Performance Evaluation on Modern Processors. International Journal of High Performance Computing Applications, 14(3):189–204, 2000.
[6] J. Demme, M. Maycock, J. Schmitz, A. Tang, A. Waksman, S. Sethumadhavan, and S. Stolfo. On the Feasibility of Online Malware Detection with Performance Counters. In Proceedings of the 40th Annual International Symposium on Computer Architecture (ISCA 2013), 2013.
[7] D. Evtyushkin, J. Elwell, M. Ozsoy, D. Ponomarev, N. A. Ghazaleh, and R. Riley. Iso-x: A flexible architecture for hardware-managed isolated execution. In 47th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO), pages 190–202. IEEE, 2014.
[8] M. Hall, E. Frank, G. Holmes, B. Pfahringer, P. Reutemann, and I. H. Witten. The WEKA Data Mining Software: An Update. ACM SIGKDD explorations newsletter, 11(1):10–18, 2009.
[9] G. Hoglund and J. Butler. Rootkits: Subverting the Windows kernel. Addison-Wesley Professional, 2006.
[10] R. Hund, T. Holz, and F. C. Freiling. Return-Oriented Rootkits: Bypassing Kernel Code Integrity Protection Mechanisms. In USENIX Security Symposium, pages 383–398, 2009.
[11] Intel Corporation. Intel VTune Amplifier 2015. https://software.intel.com/en-us/intel-vtune-amplifier-xe. Last accessed January 2016.
[12] K.-J. Lee and K. Skadron. Using Performance Counters for Runtime Temperature Sensing in High-Performance Processors. In Parallel and Distributed Processing Symposium, 2005. Proceedings. 19th IEEE International, pages 8–pp. IEEE, 2005.
[13] K. London, S. Moore, P. Mucci, K. Seymour, and R. Luczak. The PAPI Cross-Platform Interface to Hardware Performance Counters. In Department of Defense Users’ Group Conference Proceedings, pages 18–21, 2001.
[14] C. Malone, M. Zahran, and R. Karri. Are Hardware Performance Counters a Cost Effective Way for Integrity Checking of Programs. In Proceedings of the Sixth ACM Workshop on Scalable Trusted Computing, STC ’11, pages 71–76, New York, NY, USA, 2011. ACM.
[15] C. Maurice, N. Scouarnec, C. Neumann, O. Heen, and A. Francillon. Reverse Engineering Intel Last-Level Cache Complex Addressing Using Performance Counters. In Proceedings of the 18th International Symposium on Research in Attacks, Intrusions, and Defenses (RAID 2015), pages 48–65. Springer International Publishing, 2015.
[16] J. M. May. MPX: Software for Multiplexing Hardware Performance Counters in Multithreaded Programs. In Proceedings of the 15th International Parallel and Distributed Processing Symposium. IEEE, 2001.
[17] Microsoft Corporation. Introduction to File System Filter Drivers. https://msdn.microsoft.com/en-us/windows/hardware/drivers/ifs/introduction-to-file-system-filter-drivers. Last Accessed February 2017.
[18] M. Ozsoy, C. Donovick, I. Gorelik, N. Abu-Ghazaleh, and D. Ponomarev. Malware-Aware Processors: A Framework for Efficient Online Malware Detection. In IEEE 21st International Symposium on High Performance Computer Architecture (HPCA 2015), pages 651–661, 2015.
[19] V. Pappas, M. Polychronakis, and A. D. Keromytis. Transparent ROP Exploit Mitigation Using Indirect Branch Tracing. In USENIX Security, pages 447–462, 2013.
[20] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duchesnay. Scikit-learn: Machine Learning in Python. Journal of Machine Learning Research, 12:2825–2830, 2011.
[21] J. Rhee, R. Riley, D. Xu, and X. Jiang. Defeating Dynamic Data Kernel Rootkit Attacks via VMM-based Guest-Transparent Monitoring. In Proceedings of International Conference on Availability, Reliability and Security (ARES), pages 74–81. IEEE, 2009.
[22] R. Riley. A Framework for Prototyping and Testing Data-Only Rootkit Attacks. Computers and Security, 37(0):62 – 71, 2013.
[23] I. Santos, F. Brezo, J. Nieves, Y. K. Penya, B. Sanz, C. Laorden, and P. G. Bringas. IDEA: Opcode-sequence-based Malware Detection. In Engineering Secure Software and Systems, pages 35–43. Springer, 2010.
[24] H. Shacham. The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the x86). In Proceedings of the 14th ACM Conference on Computer and Communications Security, pages 552–561. ACM, 2007.
[25] K. Singh, M. Bhadauria, and S. A. McKee. Real Time Power Estimation and Thread Scheduling via Performance Counters. ACM SIGARCH Computer Architecture News, 37(2):46–55, 2009.
[26] B. Sprunt. The Basics of Performance-Monitoring Hardware. IEEE Micro, pages 64–71, 2002.
[27] A. Tang, S. Sethumadhavan, and S. J. Stolfo. Unsupervised Anomaly-Based Malware Detection Using Hardware Features. In Proceedings of Research in Attacks, Intrusions and Defenses (RAID 2014), 2014.
[28] VirusTotal. VirusTotal-Free Online Virus, Malware and URL Scanner. https://www.virustotal.com/. Last accessed February 2016.
[29] X. Wang and R. Karri. NumChecker: Detecting Kernel Control-Flow Modifying Rootkits by Using Hardware Performance Counters. In Design Automation Conference (DAC), 2013 50th ACM/EDAC/IEEE, pages 1–7. IEEE, 2013.
[30] Z. Wang, X. Jiang, W. Cui, and P. Ning. Countering Kernel Rootkits with Lightweight Hook Protection. In Proceedings of the 16th ACM Conference on Computer and Communications Security, CCS ’09, pages 545–554, New York, NY, USA, 2009. ACM.
[31] V. M. Weaver and S. McKee. Can Hardware Performance Counters be Trusted? In IEEE International Symposium on Workload Characterization (IISWC 2008), pages 141–150. IEEE, 2008.
[32] G. Yan, N. Brown, and D. Kong. Exploring Discriminatory Features for Automated Malware Classification. In Detection of Intrusions and Malware, and Vulnerability Assessment, pages 41–61. Springer, 2013.