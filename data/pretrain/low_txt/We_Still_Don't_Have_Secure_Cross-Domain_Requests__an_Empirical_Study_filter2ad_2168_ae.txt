# Optimized Text

## 9. Related Work

### 9.1 CORS Security Analysis
CORS (Cross-Origin Resource Sharing) is a relatively new web security mechanism. While some researchers have identified specific CORS security issues [44, 30, 18, 21, 20], none has provided a comprehensive and systematic analysis. Our work fills this gap by offering a thorough security evaluation of CORS in its design, implementation, and deployment.

Several researchers have noted individual cases of CORS-related security issues [44, 30]. For instance, Wilander opened an issue on GitHub [44], suggesting that the Fetch standard should restrict the `Accept`, `Accept-Language`, and `Content-Language` headers according to RFC 7231, as these headers could be exploited to deliver malicious payloads. Although Safari adopted his recommendation to limit the use of insecure values for these headers, the problem remains partially unsolved. Revay discovered that the relaxation of POST body format in the XMLHttpRequest API could lead to file upload CSRF [30]. We further demonstrated this threat with a real-world example.

In the past, there have been several studies on exploiting and mitigating cross-origin sending attacks [4, 9, 14]. Alcorn et al. developed the BeEF framework to exploit CSRF and HFPA vulnerabilities [4]. Barth et al. introduced the concept of login CSRF and proposed using the `Origin` header to mitigate such attacks [9]. De Ryck et al. presented a client-side countermeasure against CSRF attacks [14].

### 9.2 CORS Misconfiguration Issues
There are also known CORS misconfigurations and related studies [18, 21, 20, 26]. Gurt found a CORS configuration error in one of Facebook Messenger's domains, allowing any malicious website to read a victim’s chat information [18]. Kettle documented various CORS misconfigurations encountered during penetration testing [21]. Inspired by his work, we conducted a comprehensive study and measurement of CORS misconfigurations, analyzing their root causes. Johnson measured the reflecting origin misconfiguration in the Alexa top 1M sites [20], and Mller [26] evaluated different misconfigurations mentioned in Kettle’s work. Using a passive DNS database, we performed an in-depth evaluation of their unique subdomains and analyzed different CORS frameworks to understand these misconfigurations better.

### 9.3 Other Cross-Origin Problems
From a broader perspective, our work can be seen as an analysis of access control policies in the Web. Singh et al. studied inconsistent access control policies for different resources in web browsers, but did not include CORS [32]. Akhawe et al. proposed a formal model of web security and discovered new vulnerabilities using this model [3]. Schwenk et al. tested the Same-Origin Policy (SOP) for DOM across different browsers and found many inconsistencies [31]. Zheng et al. examined the SOP for cookies and identified various cookie-related security issues [45]. Son et al. studied the usage of `PostMessage`, a client-side cross-origin communication mechanism, on the Alexa top 10,000 websites and found many vulnerable instances [33].

## 10. Conclusion
We conducted an empirical security study on CORS, examining its specifications and implementations in both browsers and web frameworks. We discovered several new security issues. Through a large-scale measurement of CORS deployment in real-world websites, we found that 27.5% of all CORS-configured domains had insecure misconfigurations, indicating that CORS is not well-understood by developers. We analyzed the underlying reasons behind these issues and found that while some are due to developer negligence, many are rooted in the CORS protocol design and implementations. To address these problems, we proposed improvements and clarifications, some of which have been standardized in the latest CORS specification and adopted by major browsers. We also provide an open-source tool, CORScanner, to help web developers and security practitioners automatically evaluate whether a website is vulnerable to the misconfigurations we identified.

The reality of CORS security highlights the challenges in web security. As the Web continues to add new, often premature features, unexpected interactions create new security threats. Mitigating these threats requires new features, which, if not designed properly, introduce new risks. Backward compatibility further complicates the problem. We hope that the web community will take a more principled approach to security in future web protocol design and implementation.

## 11. Acknowledgments
We would like to thank our shepherd Devdatta Akhawe and the anonymous reviewers for their insightful comments. Special thanks to Yiming Gong and Man Hou from the 360 Network Security Research Lab for their generous help with PassiveDNS data. We are also grateful to Anne van Kesteren, Boris Zbarsky, and others from Firefox; Eric Lawrence, Yutaka Hirano, Mike West, and others from Google Chrome; Bernardo Stein from Microsoft; Deven from Apple; and Michael Ficarra from Shape Security for their valuable discussions and helpful comments. We also thank Brent Peckham from Nasdaq, Alexander Makarov from the Yii framework, and Mark Thomas from Tomcat for their feedback. This work was partially supported by the Joint Research Center of Tsinghua University and 360 Enterprise Security Group, and funded by the National Natural Science Foundation of China (grants #U1636204 and #61472215), the National Key Research and Development Program of China (#2017YFB0803202), the US National Science Foundation (grant #CNS-1237265), and by generous support from Google and IBM. The Fudan author is supported in part by the NSFC U1636204 and the National Program on Key Basic Research (NO. 2015CB358800). Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of their employers or the funding agencies.

**References:**
[1] 360, Q. Network security research lab at 360. http://netlab.360.com/, 2017. [accessed Feb-2018].
[2] 360, Q. Qihoo 360 technology co. ltd. http://www.360.cn/, 2017. [accessed Feb-2018].
[3] AKHAWE, D., BARTH, A., LAM, P. E., MITCHELL, J., AND SONG, D. Towards a formal foundation of web security. In Computer Security Foundations Symposium (CSF), 2010 23rd IEEE (2010), IEEE, pp. 290–304.
[4] ALCORN, W., FRICHOT, C., AND ORRU, M. The Browser Hacker’s Handbook. John Wiley & Sons, 2014.
[5] AYREY, D. Json api’s are automatically protected against csrf, and google almost took it away. https://github.com/dxa4481/CORS, 2017. [accessed Feb-2018].
[6] BARON, D. W3c proposed recommendation: Html5. https://groups.google.com/forum/#!msg/mozilla.dev.platform/BnY1261cNJo/MdkaT_EX6M0J, 2014. [accessed Feb-2018].
[7] BARON, D. Transition request: Proposed obsolete for cors. https://lists.w3.org/Archives/Public/public-webappsec/2017Aug/0010.html, 2017. [accessed Feb-2018].
[8] BARTH, A. Rfc 7231-the web origin concept. December 2011, 2011.
[9] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust defenses for cross-site request forgery. In Proceedings of the 15th ACM conference on Computer and communications security (2008), ACM, pp. 75–88.
[10] BATEMAN, A. Access-control-allow-origin: * and ascii-origin in ie8. https://lists.w3.org/Archives/Public/public-webapps/2009JanMar/0090.html, 2009. [accessed Feb-2018].
[11] CHEN, J. Cors security: Reflecting any origin header value when configured to * is dangerous. "https://bz.apache.org/bugzilla/show_bug.cgi?id=62343", 2018. [accessed Jun-2018].
[12] CHROME. Block afp ports. "https://chromium.googlesource.com/chromium/src/+/b8a8373b9d399a7fa84bd5732a3498c748dc7ac3", 2018. [accessed Jun-2018].
[13] CHROME. Block sub-resource loads from the web to private networks and localhost. "https://bugs.chromium.org/p/chromium/issues/detail?id=378566", 2018. [accessed Jun-2018].
[14] DE RYCK, P., DESMET, L., JOOSEN, W., AND PIESSENS, F. Automatic and precise client-side protection against csrf attacks. In European Symposium on Research in Computer Security (2011), Springer, pp. 100–116.
[15] FIREFOX. Block afp ports. "https://github.com/mozilla/gecko-dev/commit/8005b74540bea45f0266dc809c7274ab63e07d6a", 2018. [accessed Jun-2018].
[16] GROSSMAN, J. Advanced web attack techniques using gmail. http://blog.jeremiahgrossman.com/2006/01/advanced-web-attack-techniques-using.html, 2006. [accessed Feb-2018].
[17] GRGOIRE, N. Trying to hack redis via http requests. http://www.agarri.fr/kom/archives/2014/09/11/trying_to_hack_redis_via_http_requests/index.html, 2014. [accessed Feb-2018].
[18] GURT, Y. Critical issue opened private chats of facebook messenger users up to attackers. https://www.bugsec.com/news/facebook-originull/, 2013. [accessed Feb-2018].
[19] IPPOLITO, B. Remote json - jsonp. http://bob.ippoli.to/archives/2005/12/05/remote-json-jsonp/, 2005. [accessed Feb-2018].
[20] JOHNSON, E. Misconfigured cors, stealing user data from the alexa 1m. https://ejj.io/misconfigured-cors/, 2016. [accessed Feb-2018].
[21] KETTLE, J. Exploiting cors misconfigurations for bitcoins and bounties. http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html, 2016. [accessed Feb-2018].
[22] MAIL LISTS, W. PI:EMAIL mail archives. "https://lists.w3.org/Archives/Public/public-webapps/", 2018. [accessed Feb-2018].
[23] MIKE WEST, M. G. Same site. https://tools.ietf.org/html/draft-west-first-party-cookies-07, 2016. [accessed Feb-2018].
[24] MITRE. Cve-2014-6271. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271, 2014. [accessed Feb-2018].
[25] MITRE. Cve-2017-5638. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5638, 2017. [accessed Feb-2018].
[37] VAN KESTEREN, A., ET AL. Fetch. https://fetch.spec.whatwg.org/, 2011. [accessed Feb-2018].
[38] VAN KESTEREN, A., ET AL. Cross-origin resource sharing. W3C Recommendation 16 January 2014 (2014).
[39] VELA, E. sendbeacon let’s you send post requests with arbitrary content type. https://bugs.chromium.org/p/chromium/issues/detail?id=490015, 2015. [accessed Feb-2018].
[40] WHATWG. Web hypertext application technology working group. "https://whatwg.org/", 2018. [accessed Feb-2018].
[41] WIKIPEDIA. Apple filing protocol — Wikipedia, the free encyclopedia. "https://en.wikipedia.org/wiki/Apple_Filing_Protocol", 2018. [accessed Feb-2018].
[42] WIKIPEDIA. Cross-site request forgery — Wikipedia, the free encyclopedia. "https://en.wikipedia.org/wiki/Cross-site_request_forgery", 2018. [accessed Feb-2018].
[43] WIKIPEDIA. Cross-site scripting — Wikipedia, the free encyclopedia. "https://en.wikipedia.org/wiki/Cross-site_scripting", 2018. [accessed Feb-2018].
[44] WILANDER, J. Cors-safelisted request headers should be restricted according to rfc 7231. https://github.com/whatwg/fetch/issues/382, 2016. [accessed Feb-2018].
[45] ZHENG, X., JIANG, J., LIANG, J., DUAN, H.-X., CHEN, S., WAN, T., AND WEAVER, N. Cookies lack integrity: Real-world implications. In USENIX Security Symposium (2015), pp. 707–721.
[26] MÜLLER, J. CORS misconfigurations on a large scale. https://web-in-security.blogspot.com/2017/07/cors-misconfigurations-on-large-scale.html, 2017. [accessed Feb-2018].
[27] OWASP. Owasp top 10 security issues. https://www.owasp.org/index.php/Top_10_2007, 2007. [accessed Feb-2018].
[28] POPESCU, P. Practical jsonp injection. https://securitycafe.ro/2017/01/18/practical-jsonp-injection/, 2017. [accessed Feb-2018].
[29] RESCHKE, J., AND FIELDING, R. Rfc 7231-hypertext transfer protocol (http/1.1): Semantics and content. June 2014, 2014.
[30] REVAY, G. Here it is, the file upload csrf. http://gerionsecurity.com/2013/04/here-it-is-the-file-upload-csrf/, 2013. [accessed Feb-2018].
[31] SCHWENK, J., NIEMIETZ, M., AND MAINKA, C. Same-origin policy: Evaluation in modern browsers. In USENIX Security Symposium (2017).
[32] SINGH, K., MOSHCHUK, A., WANG, H. J., AND LEE, W. On the incoherencies in web browser access control policies. In Security and Privacy (SP), 2010 IEEE Symposium on (2010), IEEE, pp. 463–478.
[33] SON, S., AND SHMATIKOV, V. The postman always rings twice: Attacking and defending postmessage in html5 websites. In Network and Distributed System Security Symposium (NDSS) (2013).
[34] STAMM, S., STERNE, B., AND MARKHAM, G. Reining in the web with content security policy. In Proceedings of the 19th international conference on World wide web (2010), ACM, pp. 921–930.
[35] TOPF, J. The html form protocol attack. http://www.remote.org/jochen/sec/hfpa/hfpa.pdf, 2001. [accessed Feb-2018].
[36] VAN KESTEREN, A., ET AL. Cross-origin resource sharing. W3C Working Draft 27 July 2010 (2010).

---

This optimized version aims to make the text more coherent, professional, and easier to read.