### Corpus Generation and Sanitization

- **Sanitization of Publicly Available Regression Tests:**
  During the corpus generation, publicly available regression tests are sanitized. This process involves patching or modifying several function calls to ensure that the test cases contain only valid JavaScript code. The aim is to eliminate function calls that are supported exclusively by specific engines or frameworks. Further improvements are necessary to guarantee that all processed test cases are correctly sanitized.

- **Template Corpus Creation:**
  In the corpus generation phase, a template corpus is created, which includes test cases that invoke callbacks at various locations. A technique is required to compare two test cases and determine if both use a callback at the same location. Currently, the fuzzer cannot identify during fuzzing whether a new test case marks a new callback location, as it lacks the capability to detect if such a test case already exists in the corpus. While the code snippet corpus uses coverage feedback to detect new files, the detection of new callback locations in the template corpus remains an open research question.

### Bibliography

1. B. Hawkes (Google Project Zero), "0day 'In the Wild'," 15 May 2019. [Online]. Available: <https://googleprojectzero.blogspot.com/p/0day.html>.

2. M. Miller, "Trends, Challenges, and Strategic Shifts in the Software Vulnerability Mitigation Landscape," in BlueHat IL 2019, 2019.

3. M. Shwartz, "Selling 0-days to Governments and Offensive Security Companies," BlackHat USA 2019, 2019.

4. M. Vervier, M. Orrù, B.-J. Wever, and E. Sesterhenn, "x41 Browser Security White Paper," 19 September 2017. [Online]. Available: <https://github.com/x41sec/browser-security-whitepaper-2017/blob/master/X41-Browser-Security-White-Paper.pdf>. [Accessed 11 October 2019].

5. M. Dr.-Ing. Heiderich, A. M. Inführ, F. B. Fäßler, N. M. Krein, M. Kinugawa, T.-C. B. Hong, D. B. Weißer, and P. Dr. Pustulka, "Cure53 Browser Security White Paper," 29 November 2017. [Online]. Available: <https://github.com/cure53/browser-sec-whitepaper/blob/master/browser-security-whitepaper.pdf>. [Accessed 11 October 2019].

6. T. Ritter and A. Grant, "Tor Project Research Engagement," 30 May 2014. [Online]. Available: <https://github.com/iSECPartners/publications/tree/master/reports/Tor%20Browser%20Bundle>. [Accessed 13 October 2019].

7. A. Burnett, "Forget the Sandbox Escape - Abusing Browsers from Code Execution," Tel Aviv: BlueHatIL 2020, 2020.

8. F. Zhen and L. Gengming, "The Most Secure Browser? Pwning Chrome from 2016 to 2019," Las Vegas: BlackHat USA 2019, 2019.

9. C. Rohlf, "Chrome Oilpan - Meta Data, Freelists and More," 07 August 2017. [Online]. Available: <https://struct.github.io/oilpan_metadata.html>. [Accessed 19 October 2019].

10. S. Park, W. Xu, I. Yun, D. Jang, and T. Kim, "Fuzzing JavaScript Engines with Aspect-preserving Mutation," In Proceedings of the 41st IEEE Symposium on Security and Privacy (S&P 2020), 05 May 2020.

11. V. J. Manès, H. Han, C. Han, S. K. Cha, M. Egele, E. J. Schwartz, and M. Woo, "The Art, Science, and Engineering of Fuzzing: A Survey," IEEE Transactions on Software Engineering, 2019.

12. M. Zalewski, "AFL - American Fuzzy Lop," [Online]. Available: <http://lcamtuf.coredump.cx/afl/>. [Accessed 24 September 2019].

13. M. Böhme, V.-T. Pham, and A. Roychoudhury, "Coverage-based Greybox Fuzzing as Markov Chain," CCS '16: Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pp. 1032–1043, 10 October 2016.

14. M. Heuse, H. Eißfeldt, and A. Fioraldi, "AFLplusplus," [Online]. Available: <https://github.com/AFLplusplus/AFLplusplus>. [Accessed 12 October 2019].

15. L. Chenyang, J. Shouling, Z. Chao, L. Yuwei, L. Wei-Han, S. Yu, and B. Raheem, "MOPT: Optimized Mutation Scheduling for Fuzzers," 28th USENIX Security Symposium (USENIX Security 19), pp. 1949-1966, 08 August 2019.

16. C.-C. Hsu, C.-Y. Wu, H.-C. Hsiao, and S.-K. Huang, "InsTrim: Lightweight Instrumentation for Coverage-guided Fuzzing," Workshop on Binary Analysis Research (BAR) 2018, 18 February 2018.

17. M. Böhme, M.-D. Nguyen, V.-T. Pham, and A. Roychoudhury, "Directed Greybox Fuzzing," CCS '17: Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, pp. 2329–2344, 10 October 2017.

18. S. Gan, C. Zhang, X. Qin, X. Tu, K. Li, Z. Pei, and Z. Chen, "CallAFL: Path Sensitive Fuzzing," 2018 IEEE Symposium on Security and Privacy (SP), pp. 679-696, 2018.

19. B. Dolan-Gavitt, P. Hulin, E. Kirda, T. Leek, A. Mambretti, W. Robertson, F. Ulrich, and R. Whelan, "LAVA: Large-scale Automated Vulnerability Addition," 2016 IEEE Symposium on Security and Privacy (SP), 22-26 May 2016.

20. A. Fasano, T. Leek, B. Dolan-Gavitt, and R. Sridhar, "Rode0day: Searching for Truth with a Bug-Finding Competition," 13 August 2018. [Online]. Available: <https://www.usenix.org/sites/default/files/conference/protected-files/woot18_slides_fasano.pdf>. [Accessed 12 October 2019].

21. B. Caswell, "Cyber Grand Challenge Corpus," 01 April 2017. [Online]. Available: <http://www.lungetech.com/cgc-corpus/>. [Accessed 13 October 2019].

22. S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, "Unleashing Mayhem on Binary Code," in 2012 IEEE Symposium on Security and Privacy, IEEE, 2012, pp. 380-394.

23. D. Brumley, I. Jager, T. Avgerinos, and E. J. Schwartz, "BAP: A Binary Analysis Platform," in Computer Aided Verification, Berlin, Heidelberg, Springer Berlin Heidelberg, 2011, pp. 463-469.

24. C. Cadar, D. Dunbar, and D. Engler, "KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs," OSDI'08: Proceedings of the 8th USENIX conference on Operating systems design and implementation, pp. 209–224, 12 December 2008.

25. V. Chipounov, V. Kuznetsov, and G. Candea, "S2E: A Platform for In-Vivo Multi-Path Analysis of Software Systems," ASPLOS XVI: Proceedings of the sixteenth international conference on Architectural support for programming languages and operating systems, pp. 265–278, 03 March 2011.

26. I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim, "QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing," in 27th USENIX Security Symposium (USENIX Security 18), Baltimore, MD, USENIX Association, 2018, pp. 745-761.

27. R. Brummayer and A. Biere, "Boolector: An Efficient SMT Solver for Bit-Vectors and Arrays," in Tools and Algorithms for the Construction and Analysis of Systems, Berlin, Heidelberg, Springer Berlin Heidelberg, 2009, pp. 174-177.

28. L. de M. Bruno Dutertre, "The YICES SMT Solver," 2006. [Online]. Available: <https://pdfs.semanticscholar.org/0e55/f506cbd6ecf3a44716cba7bc6f127904eaa8.pdf>. [Accessed 30 October 2019].

29. N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta, Y. Shoshitaishvili, C. Kruegel, and G. Vigna, "Driller: Augmenting Fuzzing Through Selective Symbolic Execution," in NDSS, 2016.

30. Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino, A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna, "SOK: (State of) The Art of War: Offensive Techniques in Binary Analysis," in 2016 IEEE Symposium on Security and Privacy (SP), IEEE, 2016, pp. 138-157.

31. T. Ormandy, "Making Software Dumber," 2011. [Online]. Available: <http://www.cse.iitd.ernet.in/~siy117527/sil765/readings/fuzzing_making_software_dumber.pdf>. [Accessed 13 October 2019].

32. M. Payer, Y. Shoshitaishvili, and H. Peng, "T-Fuzz: Fuzzing by Program Transformation," in 2018 IEEE Symposium on Security and Privacy (SP), 2018, pp. 697-710.

33. C. Aschermann, S. Schumilo, T. Blazytko, R. Gawlik, and T. Holz, "Redqueen: Fuzzing with Input-to-State Correspondence," in NDSS, 2019.

34. S. Bekrar, C. Bekrar, R. Groz, and L. Mounier, "A Taint-Based Approach for Smart Fuzzing," Proceedings - IEEE 5th International Conference on Software Testing, Verification and Validation, ICST 2012, 04 April 2012.

35. S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and H. Bos, "VUzzer: Application-Aware Evolutionary Fuzzing," in NDSS volume 17, 2017, pp. 1-14.

36. W. Xu, S. Kashyap, C. Min, and T. Kim, "Designing New Operating Primitives to Improve Fuzzing Performance," CCS '17: Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, pp. 2313–2328, 03 November 2017.

37. I. Fratric, "The Great DOM Fuzz-off of 2017," 09 September 2017. [Online]. Available: <https://googleprojectzero.blogspot.com/2017/09/the-great-dom-fuzz-off-of-2017.html>. [Accessed 14 October 2019].

38. R. Hodován, Á. Kiss, and T. Hyimóthy, "Grammarinator: A Grammar-Based Open Source Fuzzer," Proceedings of the 9th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation, pp. 45–48, 11 November 2018.

39. S. Groß, "FuzzIL: Coverage Guided Fuzzing for JavaScript Engines," TU Braunschweig: Master's thesis, 2018.

40. K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov, "AddressSanitizer: A Fast Address Sanity Checker," in USENIX Annual Technical Conference, 2012.

41. E. Stepanov and K. Serebryany, "MemorySanitizer: Fast Detector of Uninitialized Memory Use in C++," in 2015 IEEE/ACM International Symposium on Code Generation and Optimization (CGO), 2015, pp. 46-55.

42. M. Conti, S. Crane, T. Frassetto, A. Homescu, G. Koppen, P. Larsen, C. Liebchen, M. Perry, and A.-R. Sadeghi, "SelfRando: Securing the Tor Browser against De-anonymization Exploits," Proceedings on Privacy Enhancing Technologies, 02 February 2016.

43. M. Moroz and K. Serebryany, "Guided In-Process Fuzzing of Chrome Components," 05 August 2016. [Online]. Available: <https://security.googleblog.com/2016/08/guided-in-process-fuzzing-of-chrome.html>. [Accessed 19 October 2019].

44. C. Evans, M. Moore, and T. Ormandy, "Fuzzing at Scale," 12 August 2011. [Online]. Available: <https://security.googleblog.com/2011/08/fuzzing-at-scale.html>. [Accessed 19 October 2019].

45. K. Serebryany, "Sanitize, Fuzz, and Harden Your C++ Code," in USENIX Association, San Francisco, CA, 2016.

46. O. Chang, A. Arya, K. Serebryany, and J. Armour, "OSS-Fuzz: Five Months Later, and Rewarding Projects," 05 May 2017. [Online]. Available: <https://opensource.googleblog.com/2017/05/oss-fuzz-five-months-later-and.html>. [Accessed 19 October 2019].

47. Google, "OSS-Fuzz," [Online]. Available: <https://google.github.io/oss-fuzz/>. [Accessed 19 October 2019].

48. S. F. Abrar, "Haha v8 Engine Go Brrrrr," AirGap2020.11, 2020.

49. G. Klees, A. Ruef, B. Cooper, S. Wei, and M. Hicks, "Evaluating Fuzz Testing," CCS '18: Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, pp. 2123–2138, 01 November 2018.

### List of Figures

- **Figure 1:** Sample report result of FuzzBench; A lower score is better; source: .................................................... 15
- **Figure 2:** Garbage collection in v8, source: ............................................................................................................. 32
- **Figure 3:** Map transition tree leading to the vulnerability ........................................................................................... 43
- **Figure 4:** Exploitation of the type confusion .............................................................................................................. 44
- **Figure 5:** Precision loss in JavaScript ......................................................................................................................... 77
- **Figure 6:** Sea-of-nodes of a non-vulnerable version of the code .............................................................................. 90
- **Figure 7:** Sea-of-nodes for vulnerable code ............................................................................................................... 91
- **Figure 8:** Phases of corpus generation ....................................................................................................................... 109
- **Figure 9:** Corpus coverage at different stages .......................................................................................................... 118

### List of Abbreviations

- **APT:** Advanced Persistent Threat
- **ASAN:** Address Sanitizer. A sanitizer supported by modern compilers which helps in finding bugs. Other sanitizers include MSAN (memory sanitizer) and UBSAN (undefined behavior sanitizer).
- **ASLR:** Address Space Layout Randomization
- **CSP:** Content Security Policy
- **DOM:** Document Object Model
- **IL:** Intermediate Language
- **IR:** Intermediate Representation
- **JIT:** Just-In-Time (compilation). JavaScript engines compile frequently used code using a JIT compiler.
- **Map:** The map of an object stores the structure and type of its properties. Synonyms include shape or hidden class of an object.
- **NaN:** Not-a-Number
- **OOB:** Out-of-Bounds (memory access) (vulnerability)
- **PoC:** Proof-of-Concept
- **SMI:** Small Integer
- **SMT:** Satisfiability Modulo Theories
- **SOP:** Same-Origin Policy
- **UAF:** Use-After-Free (vulnerability)
- **VM:** Virtual Machine
- **XSS:** Cross-Site Scripting (vulnerability)