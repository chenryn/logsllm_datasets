### DeepLog: Anomaly Detection and Diagnosis in System Logs

#### Introduction
DeepLog is a general-purpose framework for online log anomaly detection and diagnosis, utilizing a deep neural network (DNN) approach. It can identify abnormal time durations in the creation of virtual machine (VM) instances. For example, if the elapsed time between log key 53 ("VM Started") and its previous log key 52 ("Creating image") is significantly longer than usual, it suggests that the VM creation process took an unusually long time. Further investigation may reveal that this delay was caused by slow network speed from the control node to the compute node.

#### Related Work
System event logs are essential for debugging and tracking system status. However, their diverse and freeform nature makes analytics challenging. Various log mining tools have been developed, many of which use rule-based approaches [7, 15, 28, 29, 31, 32, 40, 41]. These methods, while accurate, are limited to specific application scenarios and require domain expertise. For instance:
- **Beehive** [41] clusters and organizes historical logs to aid in problem identification.
- **LogCluster** [19] helps in future problem identification by clustering and organizing historical logs.
- **Stitch** [45] extracts different levels of identifiers from system logs and provides a web interface for monitoring session progress and locating performance issues.

These tools are primarily used for diagnosis after an anomaly has been detected and are not designed for anomaly detection itself.

#### Conclusion
This paper introduces DeepLog, a DNN-based framework for online log anomaly detection and diagnosis. DeepLog learns and encodes entire log messages, including timestamps, log keys, and parameter values, and performs anomaly detection at the per log entry level. It can separate different tasks from a log file and construct a workflow model for each task using both deep learning (LSTM) and classic mining (density clustering) techniques, enabling effective anomaly diagnosis. By incorporating user feedback, DeepLog supports online updates and training of its LSTM models, allowing it to adapt to new execution patterns. Extensive evaluations on large system logs have demonstrated the superior effectiveness of DeepLog compared to previous methods.

#### Future Work
Future work includes:
- Incorporating other types of recurrent neural networks (RNNs) into DeepLog to test their efficiency.
- Integrating log data from different applications and systems to perform more comprehensive system diagnosis, such as identifying a MySQL database failure caused by a disk failure reflected in a separate system log.

#### Acknowledgment
The authors thank the anonymous reviewers for their valuable comments and the support from NSF grants 1314945 and 1514520. Feifei Li is also supported in part by NSFC grant 61729202. We appreciate the helpful discussions and feedback from all members of the TCloud project and the Flux group, especially Cai (Richard) Li, for his valuable input on BROP attack.

#### References
[1] VAST Challenge 2011. 2011. MC2 - Computer Networking Operations. (2011). h(cid:138)p://hcil2.cs.umd.edu/newvarepository/VAST%20Challenge%202011/challenges/MC2%20-%20Computer%20Networking%20Operations/ [Online; accessed 08-May-2017].

[2] Martín Abadi, Paul Barham, Jianmin Chen, Zhifeng Chen, Andy Davis, Jeffrey Dean, Matthieu Devin, Sanjay Ghemawat, Geoffrey Irving, Michael Isard, and others. 2016. TensorFlow: A system for large-scale machine learning. In Proc. USENIX Symposium on Operating Systems Design and Implementation (OSDI). 264–285.

[3] Yoshua Bengio, Réjean Ducharme, Pascal Vincent, and Christian Jauvin. 2003. A neural probabilistic language model. Journal of Machine Learning Research 3, Feb (2003), 1137–1155.

[4] Ivan Beschastnikh, Yuriy Brun, Michael D. Ernst, and Arvind Krishnamurthy. 2014. Inferring models of concurrent systems from logs of their behavior with CSight. In Proc. International Conference on Software Engineering (ICSE). 468–479.

[5] Andrea Bittau, Adam Belay, Ali Mashtizadeh, David Mazières, and Dan Boneh. 2014. Hacking blind. In Security and Privacy (SP), 2014 IEEE Symposium on. IEEE, 227–242.

[6] François Chollet. 2015. Keras. h(cid:138)p://github.com/fchollet/keras. (2015). [Online; accessed 08-May-2017].

[7] Marcello Cinque, Domenico Cotroneo, and Antonio Pecchia. 2013. Event logs for the analysis of software failures: A rule-based approach. IEEE Transactions on Software Engineering (TSE) (2013), 806–821.

[8] Andrew M. Dai and Quoc V. Le. 2015. Semi-supervised sequence learning. In Proc. Neural Information Processing Systems Conference (NIPS). 3079–3087.

[9] Min Du and Feifei Li. 2016. SPELL: Streaming Parsing of System Event Logs. In Proc. IEEE International Conference on Data Mining (ICDM). 859–864.

[10] Min Du and Feifei Li. 2017. ATOM: Efficient Tracking, Monitoring, and Orchestration of Cloud Resources. IEEE Transactions on Parallel and Distributed Systems (2017).

[11] Qiang Fu, Jian-Guang Lou, Yi Wang, and Jiang Li. 2009. Execution anomaly detection in distributed systems through unstructured log analysis. In Proc. IEEE International Conference on Data Mining (ICDM). 149–158.

[12] Yoav Goldberg. 2016. A primer on neural network models for natural language processing. Journal of Artificial Intelligence Research 57 (2016), 345–420.

[13] Ian Goodfellow, Yoshua Bengio, and Aaron Courville. 2016. Deep Learning. MIT Press. h(cid:138)p://www.deeplearningbook.org.

[14] Hossein Hamooni, Biplob Debnath, Jianwu Xu, Hui Zhang, Guofei Jiang, and Abdullah Mueen. 2016. LogMine: Fast Pattern Recognition for Log Analytics. In Proc. Conference on Information and Knowledge Management (CIKM). 1573–1582.

[15] Stephen E. Hansen and E. Todd Atkins. 1993. Automated System Monitoring and Notification with Swatch. In Proc. Large Installation System Administration Conference (LISA). 145–152.

[16] Pinjia He, Jieming Zhu, Shilin He, Jian Li, and Michael R. Lyu. 2016. An evaluation study on log parsing and its use in log mining. In Proc. International Conference on Dependable Systems and Networks (DSN). 654–661.

[17] Shilin He, Jieming Zhu, Pinjia He, and Michael R. Lyu. 2016. Experience Report: System Log Analysis for Anomaly Detection. In Proc. International Symposium on Software Reliability Engineering (ISSRE). 207–218.

[18] Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long short-term memory. Neural Computation (1997), 1735–1780.

[19] Qingwei Lin, Hongyu Zhang, Jian-Guang Lou, Yu Zhang, and Xuewei Chen. 2016. Log clustering based problem identification for online service systems. In Proc. International Conference on Software Engineering (ICSE). 102–111.

[20] Chaochun Liu, Huan Sun, Nan Du, Shulong Tan, Hongliang Fei, Wei Fan, Tao Yang, Hao Wu, Yaliang Li, and Chenwei Zhang. 2016. Augmented LSTM Framework to Construct Medical Self-diagnosis Android. In Proc. IEEE International Conference on Data Mining (ICDM). 251–260.

[21] Jian-Guang Lou, Qiang Fu, Shengqi Yang, Jiang Li, and Bin Wu. 2010. Mining program workflow from interleaved traces. In Proc. ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (SIGKDD).

[22] Jian-Guang Lou, Qiang Fu, Shengqi Yang, Ye Xu, and Jiang Li. 2010. Mining Invariants from Console Logs for System Problem Detection. In Proc. USENIX Annual Technical Conference (ATC). 231–244.

[23] Adetokunbo AO Makanju, A. Nur Zincir-Heywood, and Evangelos E. Milios. 2009. Clustering event logs using iterative partitioning. In Proc. ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (SIGKDD). 1255–1264.

[24] Christopher D. Manning and Hinrich Schütze. 1999. Foundations of Statistical Natural Language Processing. MIT Press.

[25] Tomas Mikolov, Martin Karafiát, Lukas Burget, Jan Černocký, and Sanjeev Khudanpur. 2010. Recurrent neural network based language model. In Interspeech, Vol. 2. 3.

[26] Karthik Nagaraj, Charles Killian, and Jennifer Neville. 2012. Structured comparative analysis of systems logs to diagnose performance problems. In Proc. USENIX Symposium on Networked Systems Design and Implementation (NSDI). 26–26.

[27] Christopher Olah. 2015. Understanding LSTM Networks. (2015). h(cid:138)p://colah.github.io/posts/2015-08-Understanding-LSTMs [Online; accessed 16-May-2017].

[28] Alina Oprea, Zhou Li, Ting-Fang Yen, Sang H. Chin, and Sumayah Alrwais. 2015. Detection of early-stage enterprise infection by mining large-scale log data. In Proc. International Conference on Dependable Systems and Networks (DSN). 45–56.

[29] James E. Preweck. 2003. Analyzing cluster log files using Logsurfer. In Proc. Annual Conference on Linux Clusters.

[30] Robert Ricci, Eric Eide, and The CloudLab Team. 2014. Introducing CloudLab: Scientific Infrastructure for Advancing Cloud Architectures and Applications. USENIX ;login: 39, 6 (Dec. 2014). h(cid:138)ps://www.usenix.org/publications/login/dec14/ricci.

[31] John P. Rouillard. 2004. Real-time Log File Analysis Using the Simple Event Correlator (SEC). In Proc. Large Installation System Administration Conference (LISA). 133–150.

[32] Sudip Roy, Arnd Christian König, Igor Dvorkin, and Manish Kumar. 2015. PerfAugur: Robust diagnostics for performance anomalies in cloud services. In Proc. IEEE International Conference on Data Engineering (ICDE). IEEE, 1167–1178.

[33] Elastic Stack. 2017. The Open Source Elastic Stack. (2017). h(cid:138)ps://www.elastic.co/products [Online; accessed 16-May-2017].

[34] Martin Sundermeyer, Ralf Schlüter, and Hermann Ney. 2012. LSTM Neural Networks for Language Modeling. In Interspeech. 194–197.

[35] Ilya Sutskever, Oriol Vinyals, and Quoc V. Le. 2014. Sequence to sequence learning with neural networks. In Proc. Neural Information Processing Systems Conference (NIPS). 3104–3112.

[36] Liang Tang and Tao Li. 2010. LogTree: A framework for generating system events from raw textual logs. In Proc. IEEE International Conference on Data Mining (ICDM). 491–500.

[37] Liang Tang, Tao Li, and Chang-Shing Perng. 2011. LogSig: Generating system events from raw textual logs. In Proc. Conference on Information and Knowledge Management (CIKM). 785–794.

[38] Wei Xu, Ling Huang, Armando Fox, David Patterson, and Michael Jordan. 2009. Online system problem detection by mining patterns of console logs. In Proc. IEEE International Conference on Data Mining (ICDM). 588–597.

[39] Wei Xu, Ling Huang, Armando Fox, David Patterson, and Michael I. Jordan. 2009. Detecting large-scale system problems by mining console logs. In Proc. ACM Symposium on Operating Systems Principles (SOSP). 117–132.

[40] Kenji Yamanishi and Yuko Maruyama. 2015. Dynamic syslog mining for network failure monitoring. In Proc. ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (SIGKDD). 499–508.

[41] Ting-Fang Yen, Alina Oprea, Kaan Onarlioglu, Todd Leetham, William Robertson, Ari Juels, and Engin Kirda. 2013. Beehive: Large-scale log analysis for detecting suspicious activity in enterprise networks. In Proc. International Conference on Dependable Systems and Networks (ACSAC). 199–208.

[42] Xiao Yu, Pallavi Joshi, Jianwu Xu, Guoliang Jin, Hui Zhang, and Guofei Jiang. 2016. CloudSeer: Workflow Monitoring of Cloud Infrastructures via Interleaved Logs. In Proc. ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS). 489–502.

[43] Ding Yuan, Haohui Mai, Weiwei Xiong, Lin Tan, Yuanyuan Zhou, and Shankar Pasupathy. 2010. SherLog: Error diagnosis by connecting clues from run-time logs. In ACM SIGARCH Computer Architecture News. ACM, 143–154.

[44] Ke Zhang, Jianwu Xu, Martin Renqiang Min, Guofei Jiang, Konstantinos Pelechrinis, and Hui Zhang. 2016. Automated IT system failure prediction: A deep learning approach. In Proc. IEEE International Conference on Big Data (IEEE BigData). 1291–1300.

[45] Xu Zhao, Kirk Rodrigues, Yu Luo, Ding Yuan, and Michael Stumm. 2016. Non-intrusive performance profiling for entire software stacks based on the flow reconstruction principle. In Proc. USENIX Symposium on Operating Systems Design and Implementation (OSDI). 603–618.