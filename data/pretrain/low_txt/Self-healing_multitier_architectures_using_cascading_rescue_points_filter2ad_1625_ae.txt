### I/O Intensive Operations and Request Volume

In I/O-intensive scenarios, where a greater volume of data must be transferred per request, the number of requests arriving at the server tends to decrease.

### 6. Related Work

#### 6.1 Software Self-Healing

The use of Rescue Points (RPs) for software self-healing was first proposed in the ASSURE system [30]. In ASSURE, RPs are automatically identified and selected using kernel-level checkpoint-restart, powered by Zap [20] and input fuzzing. The RPs are deployed in a modified operating system that features the Zap virtual execution environment. Unlike our approach, ASSURE requires modifications to the OS for deploying RPs and ignores system calls. However, the RP identification component of ASSURE can be integrated with our work.

Selective Transactional Emulation (STEM) [31] is another speculative recovery technique that identifies the function where an error occurs. STEM could also assist in identifying RPs. It requires access to the source code to analyze errors and does not support multithreaded applications. Similarly, failure-oblivious computing [29] uses a modified compiler to inject code that detects and corrects invalid memory writes by virtually extending the target buffer. This method is robust against buffer overflow errors but incurs significant performance overhead, ranging from 80% to 500% for various applications. Additionally, it requires recompilation of the target applications and does not handle failures due to other types of bugs, such as null pointer dereferences.

Rebooting techniques [34, 13, 9] focus on restoring the system to a clean state rather than attempting recovery. Program restart is a lengthier process than recovery, leading to substantial application downtime and more frequent data loss. Micro-rebooting aims to accelerate this process by restarting only parts of the system, but it requires a complete rewrite of applications to compartmentalize failures. These techniques cannot recover from deterministic bugs and restart all execution threads of a given application. Checkpoint-restart techniques [6, 17] are similar to rebooting but restart from a checkpoint, reducing downtime. However, they still do not handle deterministic bugs or those triggered maliciously (e.g., DoS attacks).

Checkpoint-restart has also been combined with running multiple versions of programs [6]. This approach assumes that not all versions will be prone to the same error, but it introduces prohibitive costs for most applications, as multiple versions need to be maintained and run concurrently.

Other works have focused on reducing the time from bug discovery to patch generation by automatically generating and applying patches [24, 19, 35]. Unfortunately, automatically applying patches is not very practical due to the risk of introducing additional errors during patching or altering program behavior.

#### 6.2 Coordinated Checkpointing

Our work is also loosely related to research in coordinated checkpointing for distributed systems. Bhargava et al. [5] present a checkpoint algorithm for distributed systems where each process takes checkpoints independently. To recover, a two-phase rollback algorithm determines which processes need to roll back and to which checkpoint. This optimistic algorithm performs well when errors are infrequent.

Independent checkpoint algorithms benefit from requiring no coordination between members of a distributed system but may suffer from the "domino effect" [36], where multiple members keep rolling back to previously taken checkpoints, leading to unnecessary delays.

Sistla et al. [32] propose algorithms based on asynchronous message logging of incoming messages from individual members of a distributed system. Similar to our approach, they piggyback tags in exchanged messages to determine the rollback point and the messages that need to be replayed. In our proposal, we interleave signaling data in the communications and utilize existing out-of-band (OOB) signaling mechanisms provided by TCP and the OS.

### 7. Conclusion

We introduced Cascading Rescue Points (CRPs), a new mechanism for performing software self-healing in multitier architectures. Our approach enables communicating applications to checkpoint in a loosely coordinated manner, ensuring that recovery does not lead to inconsistent states between applications. We intercept existing connections and encapsulate application data using our CRP protocol to notify remote peers to roll back. We also exploit TCP's OOB signaling to quickly signal peers to stop checkpointing when no faults occur. We implemented a prototype tool that can apply CRPs to binary-only software and evaluated it using the Apache and MySQL servers. Our results show that it successfully allows them to recover from otherwise fatal errors, with a performance overhead ranging from 4.54% to 71.96% in the tested applications.

### 8. References

[1] H. Agrawal, R. A. DeMillo, and E. H. Spafford. Debugging with dynamic slicing and backtracking. Software Practice and Experience, 23:589–616, 1993.

[2] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro. Preventing memory error exploits with WIT. In Proc. of the Symposium on Security and Privacy, pages 263–277, May 2008.

[3] A. Arora, R. Krishnan, R. Telang, and Y. Yang. An empirical analysis of software vendors’ patch release behavior: Impact of vulnerability disclosure. Information Systems Research, 21(1):115–132, 2010.

[4] A. Bessey, K. Block, B. Chelf, A. Chou, B. Fulton, S. Hallem, C. Henri-Gros, A. Kamsky, S. McPeak, and D. Engler. A few billion lines of code later: using static analysis to find bugs in the real world. Commun. ACM, 53:66–75, February 2010.

[5] B. Bhargava and S. Lian. Independent checkpointing and concurrent rollback for recovery in distributed systems—an optimistic approach. In Proc. of the 7th Symposium on Reliable Distributed Systems, pages 3–12, October 1998.

[6] T. C. Bressoud and F. B. Schneider. Hypervisor-based fault tolerance. In Proc. of the 15th ACM symposium on Operating systems principles (SOSP), pages 1–11, 1995.

[7] B. Buck and J. K. Hollingsworth. An API for runtime code patching. Int. J. High Perform. Comput. Appl., 14:317–329, November 2000.

[8] C. Cadar, D. Dunbar, and D. Engler. KLEE: unassisted and automatic generation of high-coverage tests for complex systems programs. In Proc. of the 8th OSDI, pages 209–224, 2008.

[9] G. Candea and A. Fox. Crash-only software. In Proc. of the 9th Workshop on Hot Topics in Operating Systems (HotOS IX), May 2003.

[10] J. Etoh. GCC extension for protecting applications from stack-smashing attacks. http://www.trl.ibm.com/projects/security/ssp/.

[11] M. Hicks and S. Nettles. Dynamic software updating. ACM Trans. Program. Lang. Syst., 27:1049–1096, November 2005.

[12] M. Howard. A look inside the security development lifecycle at Microsoft. MSDN Magazine – http://msdn.microsoft.com/en-us/magazine/cc163705.aspx, November 2005.

[13] Y. Huang, C. Kintala, N. Kolettis, and N. Fulton. Software rejuvenation: Analysis, module, and applications. In Proc. of the 25th International Symposium on Fault-Tolerant Computing (FTCS), page 381, 1995.

[14] InformationWeek. Windows Home Server bug could lead to data loss. http://informationweek.com/news/205205974, December 2007.

[15] V. P. Kemerlis, G. Portokalidis, K. Jee, and A. D. Keromytis. libdft: Practical dynamic data flow tracking for commodity systems. In Proc. of the 8th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments (VEE), March 2012.

[16] A. D. Keromytis. Characterizing self-healing software systems. In Proc. of the 4th MMM-ACNS, September 2007.

[17] S. T. King, G. W. Dunlap, and P. M. Chen. Debugging operating systems with time-traveling virtual machines. In Proc. of the USENIX Annual Technical Conference, 2005.

[18] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: Building customized program analysis tools with dynamic instrumentation. In Proc. of the 2005 PLDI, pages 190–200, June 2005.

[19] K. Makris and K. D. Ryu. Dynamic and adaptive updates of non-quiescent subsystems in commodity operating system kernels. In Proc. of the 2nd EuroSys, pages 327–340, March 2007.

[20] S. Osman, D. Subhraveti, G. Su, and J. Nieh. The design and implementation of Zap: a system for migrating computing environments. In Proc. of the 5th OSDI, pages 361–376, December 2002.

[21] V. Pappas, M. Polychronakis, and A. D. Keromytis. Smashing the gadgets: Hindering return-oriented programming using in-place code randomization. In Proceedings of the 33rd IEEE Symposium on Security & Privacy (S&P), 2012.

[22] PaX Project. Address space layout randomization, Mar 2003. http://pageexec.virtualave.net/docs/aslr.txt.

[23] PCWorld. Amazon EC2 outage shows risks of cloud. http://www.pcworld.com/businesscenter/article/226199/amazon_ec2_outage_shows_risks_of_cloud.html, April 2011.

[24] J. H. Perkins, S. Kim, S. Larsen, S. Amarasinghe, J. Bachrach, M. Carbin, C. Pacheco, F. Sherwood, S. Sidiroglou, G. Sullivan, W.-F. Wong, Y. Zibin, M. D. Ernst, and M. Rinard. Automatically patching errors in deployed software. In Proc. of the ACM SIGOPS 22nd symposium on Operating systems principles, pages 87–102, 2009.

[25] J. S. Plank, M. Beck, G. Kingsley, and K. Li. Libckpt: transparent checkpointing under Unix. In Proceedings of the USENIX 1995 Technical Conference Proceedings, TCON’95, pages 18–18, Berkeley, CA, USA, 1995. USENIX Association.

[26] P. Porras, H. Saidi, and V. Yegneswaran. Conficker C analysis. Technical report, SRI International, 2009.

[27] G. Portokalidis and A. D. Keromytis. Fast and practical instruction-set randomization for commodity systems. In Proc. of the 2010 Annual Computer Security Applications Conference (ACSAC), December 2010.

[28] G. Portokalidis and A. D. Keromytis. REASSURE: A self-contained mechanism for healing software using rescue points. In Proc. of the 6th International Workshop in Security (IWSEC), pages 16–32, November 2011.

[29] M. Rinard, C. Cadar, D. Dumitran, D. Roy, T. Leu, and J. W. Beebee. Enhancing server availability and security through failure-oblivious computing. In Proc. of the 6th OSDI, December 2004.

[30] S. Sidiroglou, O. Laadan, C. Perez, N. Viennot, J. Nieh, and A. D. Keromytis. ASSURE: automatic software self-healing using rescue points. In Proc. of the 14th ASPLOS, pages 37–48, 2009.

[31] S. Sidiroglou, M. E. Locasto, S. W. Boyd, and A. D. Keromytis. Building a reactive immune system for software services. In Proc. of the 2005 USENIX ATC, April 2005.

[32] A. P. Sistla and J. L. Welch. Efficient distributed recovery using message logging. In Proc. of the 8th annual ACM Symposium on Principles of distributed computing (PODC), pages 223–238, 1989.

[33] W. R. Stevens, B. Fenner, and A. M. Rudoff. Chapter 24. Out-of-Band Data. In UNIX Network Programming Volume 1, Third Edition: The Sockets Networking API. Addison Wesley, 2003.

[34] M. Sullivan and R. Chillarege. Software defects and their impact on system availability—a study of field failures in operating systems. In Digest of Papers., 21st International Symposium on Fault Tolerant Computing (FTCS-21), pages 2–9, 1991.

[35] M. Susskraut and C. Fetzer. Automatically finding and patching bad error handling. In Proc. of the Sixth European Dependable Computing Conference, pages 13–22, 2006.

[36] K. Venkatesh, T. Radhakrishnan, and H. Li. Optimal checkpointing and local recording for domino-free rollback recovery. Inf. Process. Lett., 25:295–304, July 1987.

[37] C. Weiss, R. Premraj, T. Zimmermann, and A. Zeller. How long will it take to fix this bug? In Proc. of the 4th International Workshop on Mining Software Repositories (MSR), 2007.