### Context Switches and Proxy Transparency

Context switching between different processes, as well as between user code and kernel code, can introduce performance overhead. Additionally, most proxies are not transparent to their users, which means that one end of a TCP connection may mistake the proxy for its communication counterpart. This lack of transparency can lead to several issues:

1. **Security Vulnerability**: The proxy's identity is exposed, making it a direct target for malicious users.
2. **IP-Based Applications**: Tools like bandwidth management and trusted hosts, which rely on IP addresses, may malfunction because they see the proxy's address instead of the real source.
3. **Network Disruption**: A malicious user within a proxied network could disable access to external servers by causing the firewall to block the proxy's IP address.

### Traffic Normalization and Security Enhancements

Smart et al. [21] proposed a method called "fingerprint scrubber" to normalize traffic and eliminate personal styles (e.g., initial sequence numbers, window sizes) and ambiguities, thereby blocking OS fingerprinting. Similarly, the "traffic normalizer" [22] synchronizes the TCP connection state between a Network Intrusion Detection System (NIDS) and a protected host, thwarting attempts to bypass NIDS detection. These methods introduce minimal overhead and effectively block powerful OS fingerprinting tools like NMAP.

However, there are still some unresolved issues:

1. **TTL Field Modification**: Altering the Time-to-Live (TTL) field can result in invalid packets circulating in the network.
2. **Incomplete Normalization**: Some exploration traffic, such as SYN flood attacks, cannot be fully normalized. For example, an attacker can send multiple forged SYN packets to deduce the target system's OS type.
3. **Incompatibility with SYN Cookies**: Both methods are incompatible with SYN cookies, a tool used to mitigate SYN flood attacks. SYN cookies encode connection state information in the initial sequence numbers of SYN/ACK packets. Under a SYN flood attack, the normalizer may run out of memory while the protected host remains functional due to SYN cookies.

### Detecting Buffer Overflow Attacks

Toth and Kruegel [30] developed a method to detect sequences of NOP instructions, known as "sledge," in packet content. Their approach disassembles the packet to identify execution paths. However, if an attacker crafts packets with numerous short execution paths, the method may fail to detect DoS/DDoS attacks.

Buttercup [25] uses addresses as hints to detect buffer overflow attacks. By studying the targeted program and its vulnerable functions, Buttercup identifies a small range of possible addresses that could be used in an attack. This method simplifies the signatures of known attacks but does not account for unknown buffer overflow attacks.

### Conclusion and Future Work

In this paper, we advocate for a centralized TCP/IP architecture, where the only visible TCP/IP stack is on the organization's CTCP router. This architecture can effectively stop OS fingerprinting and port scanning, facilitating the deployment of solutions to vulnerabilities and providing a flexible platform for developing honeypots.

**Future Work:**
- Improve the algorithm for detecting buffer overflow attacks by applying runtime binary disassembly to suspicious packets.
- Enhance the honeypot to interact with attackers beyond the initial three-way handshake, simulating the service without actually running the service daemon.

### References

[1] Fyodor, “The Art of Port Scanning,” 1997.
[2] Oﬁr Arkin, “Network Scanning Techniques,” http://www.publicom.co.il, 1999
[3] Fyodor, “Remote OS Detection via TCP/IP Stack Fingerprinting,” http://www.insecure.org/nmap/nmap-fingerprinting-article.html
[4] Orﬁn Arkin, “ICMP usage in scanning,” http://www.sys-security.com/html/projects/icmp.html.
[5] Jose Nazario, “Passive Fingerprinting using Network Client Applications,” 2000, http://www.crimelabs.net/docs/passive.html
[6] Franck Veysset, Olivier Courtay, Olivier Heen, “New Tool and Technique for Remote Operating System Fingerprinting,” Intranode Software Technologies, April 2002.
[7] Fyodor, “Exploit world! Master Index for ALL Exploits,” http://www.insecure.org/sploits/all.html
[8] Prashant Pradhan, Tzi-cker Chiueh, Anindya Neogi, “Aggregate TCP Congestion Control Using Multiple Network Probing,” ICDCS 2000.
[9] Stuart Staniford, Vern Paxson, Nicholas Weaver, “How to Own the Internet in Your Spare Time,” Proceedings of the 11th USENIX Security Symposium, 2002.
[10] Nadav Har’El, “Bug in Nonlocal-bind (Transparent Proxy)?,” http://www.cs.helsinki.fi/linux/linux-kernel/2001-22/0678.html.
[11] Alexey Kuznetsov, “Re: Bug in Nonlocal-bind (Transparent Proxy)?,” http://search.luky.org/linux-kernel.2001/msg32060.html.
[12] Wolfgang Zekoll, “tcpproxy - Generic TCP/IP Proxy,” http://www.quietsche-entchen.de/software/tcpproxy.html.
[13] Thomas Toth, Christopher Kruegel, “Accurate Buffer Overflow Detection via Abstract Payload Execution,” Distributed Systems Group, Technical University Vienna, Austria, RAID 2002.
[14] D. Ditzel and R. McLellan, “Register Allocation for Free: The C Machine Stack Cache,” Proc. of the Symp. on Architectural Support for Programming Languages and Operating Systems, pp. 48 - 56, March 1982.
[15] Sangyeun Cho, Pen-Chung Yew, Gyungho Lee, “Decoupling local variable accesses in a wide-issue superscalar processor,” Pro. of the 26th annual international symposium on Computer architecture, Georgia, United States, 1999.
[16] CERT, “Statistical Weaknesses in TCP/IP Initial Sequence Numbers,” http://www.cert.org/advisories/CA-2001-09.html
[17] Laurent Joncheray, “Simple Active Attack Against TCP,” 5th USENIX UNIX Security Symposium, June 1995.
[18] route—daemon9, “JUGGERNAUT,” Volume 7, Issue 50, Phrack magazine.
[19] Pavel Krauz, “HUNT Project.” 1.5 - bug fix release. 30th May 2000. URL: http://lin.fsid.cvut.cz/kra/index.html (9th February, 2001)
[20] Embyte, “gspoof,” http://gspoof.sourceforge.net/
[21] Sandeep Grover, “Buffer Overflow Attacks and Their Countermeasures,” Linux Journal, March 10, 2003.
[22] Deokjo Jeon, “Understanding DDoS Attacks, Tools and Free Anti-tools with Recommendation,” http://www.sans.org/infosecFAQ/threats/Understanding_ddos.htm.
[23] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, Q. Zhang, and H. Hinton, “StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks,” in Proceedings of 7th USENIX Security Conference, San Antonio, Texas, Jan. 1998
[24] Tzi-cker Chiueh and Fu-Hau Hsu, “RAD: A Compiler Time Solution to Buffer Overflow Attacks,” Proceeding of ICDCS 2001, Arizon USA, April 2001
[25] Nergal, “The Advanced Return-into-Lib(c) Exploits,” Volume 10, Issue 58, Phrack.
[26] Sandeep Bhatkar, Daniel C. DuVarney, and R. Sekar, “Address Obfuscation: An Efficient Approach to Combat a Broad Range of Memory Error Exploits,” 12th USENIX Security Symposium, Washington, DC, August 2003.
[27] Honeynet Project team, “Honeynet Project,” http://www.honeynet.org.
[28] Daniel P. Bovet, Marco Cesati, “Understanding the Linux Kernel, 2nd edition,” O’Reilly, Dec 2002.
[29] Permeo, “SOCKS Overview,” http://www.socks.permeo.com/AboutSOCKS/SOCKSOverview.asp.
[30] Mark Grennan, “Firewall and Proxy Server HOWTO,” http://www.tldp.org/HOWTO/Firewall-HOWTO.html#toc11
[31] Gopinath K. N. Kernel Support for Building Network Firewalls Based on the Paradigm of Selective Inspection of Packets at Application Level, Thesis, Indian Institute of Technology, Kanpur April 1999.
[32] Inferno Nettverk, “Dante,” http://www.inet.no/dante/.
[33] Matthew Smart, G. Robert Malan, Farnam Jahanian, “Defeating TCP/IP Stack Fingerprinting,” USENIX Security Symposium, Aug. 2000.
[34] Mark Handley, Vern Paxson, and Christian Kreibich, “Network Intrusion Detection: Evasion, Traffic Normalization, and End-to-End Protocol Semantics,” Proc. USENIX Security Symposium 2001.
[35] Trusted Information Systems, “TIS Firewall Toolkit,” http://www.tis.com
[36] Daniel Kiracofe, “Transparent Proxy with Linux and Squid Mini-HOWTO,” http://en.tldp.org/HOWTO/Transparent-Proxy.html.
[37] A. Pasupulati, J. Coit, K. Levitt, S.F. Wu, S.H. Li, R.C. Kuo, and K.P. Fan, “Buttercup: On Network-based Detection of Polymorphic Buffer Overflow Vulnerabilities,” Network Operations and Management Symposium 2004 (NOMS 2004).

Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04)  
1063-9527/04 $ 20.00 IEEE