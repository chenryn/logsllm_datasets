### 4.5.2. Exclusive Mode
Cozilets can operate in an exclusive mode to prevent any untrusted applets from starting during the execution of an encapsulated applet. Although this mode may not prevent the execution of untrusted applets that were already running before the cozilet started, it generally enhances the security of the cozilet.

Exclusive mode leverages class loading and defining restriction mechanisms in Sun Java VM implementations [4]. The class loading restriction mechanism prevents untrusted classes from loading any class within specific packages defined by the security property "package.access" (default value: "sun."). This mechanism uses stack inspection at class loading. The class defining restriction mechanism prevents untrusted classes from defining any class within specific packages defined by the security property "package.definition" (default value: ""). This mechanism also uses stack inspection at class definition.

When a cozilet starts, it sets the value "java.,javax.,sun.,com.,org.,netscape.,sunw." for both of these security properties. This simple yet effective measure prevents attacking applets from starting because they cannot load essential applet classes, such as `java.applet.Applet`. Attacking applets cannot modify these security properties due to the stack inspection mechanism.

While exclusive mode may not prevent the execution of attacking applets that were already running, it can prevent browser script code from accessing encapsulated applets, as JRE typically treats script code as untrusted. Despite these limitations, we recommend using exclusive mode for enhanced security.

### 4.5.3. Encapsulation of Local Applet Components
Applets typically consist of remote JAR files deployed on a web server and specified in an archive attribute. However, some applets require users to install local components on their local disk to reduce network traffic or for use as common system components. Cozilets support the encapsulation of such local components to some extent.

Local applet components include local JAR files and native libraries. These are usually unsigned but installed in directories accessible by the common system class loader (referred to as a system path) and treated as system classes with full permissions or system native libraries.

The cozi-format file can include the installed paths of these components in the cozilet properties. The cozi-loader uses these paths to locate the components. Additionally, the cozi-format file can include hash values of the local components as constant fields in `CoziletData` (Section 3.2.2). The cozi-loader verifies the integrity of local applet components using these hash values. This encapsulation is performed by the cozilet generator.

It is important to note that local JAR files should be unsigned. Signed JAR files can be obtained and misused by attackers. The Cozilet mechanism ensures the integrity of local JAR files and native libraries. Local JAR files and native libraries should be moved to paths other than system paths to prevent abuse. While moving them may affect the transparency of encapsulation, it is strongly recommended.

### 5. Discussion
In this section, we discuss the issue in a more general manner, rather than focusing on the detailed mechanisms of the Java applet environment described in the previous sections. To prevent malicious recomposition attacks, all components of an applet (or any mobile code program) must be securely deployed (e.g., identified and composed) on the client-side and then isolated from other components.

For secure deployment of applets in current Java VM implementations, the `APPLET` tag in an HTML document plays a critical role, determining which JAR file is loaded and executed. However, current VMs do not consider the trustworthiness of the `APPLET` tag. Our approach addresses this weakness through two mechanisms: applet-document binding ensures the origin of the HTML document containing the `APPLET` tag, and digitally signed cozilet properties securely identify additional JAR files to be deployed.

Secure deployment is crucial not only for applets but also for other componentized mobile code technologies. Sun's Java Web Start [18] is a runtime environment for network-launchable Java applications. Although it is not a perfect substitute for applets due to limited interaction with web browsers, it is more secure. Malicious deployment can be prevented by digitally signing a JNLP file, which corresponds to an `APPLET` tag for an applet. A Web Start application is considered "signed" if all JAR files specified in its JNLP file are signed by a single signer. These features make malicious recomposition attacks difficult.

Microsoft recommends ActiveX control programmers use SiteLock [1], a mechanism similar to applet-document binding. The Microsoft .NET Framework provides LinkDemand [17], which prevents trusted assemblies from being accessed by malicious assemblies. It would be preferable for Java VM to support such a secure deployment scheme for applets in the future. Until then, our approach provides an alternative way to protect signed applets without modifying the VM.

Isolation is also important. Our approach uses class-loader-based isolation, which can be easily implemented on existing Java VMs. It isolates the namespace of classes, except for system classes shared among the JRE. In some cases, an attacking applet can obtain a reference to an instance of a class unique to a victim applet as a type of its superclass, such as `java.applet.Applet` or `java.lang.Object`, potentially causing a security breach. While the cozilet takes measures to prevent the leakage of object references, complete prevention is challenging.

Isolation is a general challenge not only for preventing the abuse of trusted applets but also for ensuring the reliability of general Java programs. For example, a Java-based application server needs to isolate each application running on it to prevent applications from affecting each other or the server. Much work has aimed at realizing not only class-loader-based isolation but also the isolation of heap memory, native code memory, and other JRE resources [7][8][9]. JSR-121 Application Isolation API [7] is being standardized through the Java Community Process. Stronger isolation mechanisms are preferable for more reliable protection of trusted applets.

### 6. Related Work
Our approach is transparent to both target signed applets and current Java VM implementations. We are not aware of any other groups taking a similar approach at present.

Isolation, as explained in Section 5, is an effective way to protect trusted applets. However, current approaches [7][8][9] are not transparent to users because they require modifications to installed Java VM implementations. Other non-Java applications have been reported. Alcatraz [6] forces untrusted applications' insecure execution in Linux to be committed by users. SoftwarePot [5] is an application encapsulation approach that prevents malicious behavior by encapsulated untrusted applications based on security policies specified by users in Solaris and Linux. However, these approaches do not aim to prevent the abuse of trusted programs.

There are guidelines available that describe problems and rule-of-thumb countermeasures. "Securing Java" [2] suggests programmers to be cautious of twelve anti-patterns in developing secure applets. Sun has published the Security Code Guidelines [4] and "Inside Java 2 Platform Security" [3], which describe various security guidelines for Java. Auditing tools based on these guidelines have been released or announced [10][11][12]. However, it is difficult for most developers to understand and prevent all attacks, as these attacks are skillfully designed by attackers.

### 7. Summary
We have developed the Cozilet mechanism to prevent malicious recomposition attacks, which pose a serious threat to trusted applets, such as signed applets. In our mechanism, the cozilet generator encapsulates a target signed applet into a special signed applet, a cozilet, in an indecomposable cozi-format. The cozilet employs two protection mechanisms: class-loader-based isolation and applet-document binding.

Upon execution, the cozilet isolates the classes and resources of the encapsulated applet by assigning a special class loader, the cozi-loader, unique to the applet. It also checks if the HTML document was downloaded from a trusted website to ensure no attackers have deployed it on their sites.

The cozilet can be executed instead of the target applet. When invoked by the JRE, it applies the above protection mechanisms to the encapsulated applet and switches itself with the applet. After switching, the encapsulated applet can run normally. The mechanism can easily protect both future and currently used applets, as it is transparent to both the target applets and current Java VM implementations. We will apply this mechanism to significant applets used in critical systems, such as e-commerce or e-government systems.

### 8. References
[1] “SiteLock Template 1.04 for ActiveX Controls”, Microsoft Developer Network.
[2] G. McGraw and E. W. Felten, “Securing Java: Getting Down to Business with Mobile Code”, Wiley, 1999.
[3] L. Gong, G. Ellison, and M. Dageforde, “Inside Java 2 Platform Security: Architecture, API Design, and Implementation, 2/E”, Addison-Wesley, 2003.
[4] “Security Code Guidelines”, Sun Microsystems, Inc., 2000.
[5] K. Kato and Y. Oyama, “SoftwarePot: An Encapsulated Transferable File System for Secure Software Circulation”, Springer-Verlag, February 2003.
[6] Z. Liang, V.N. Venkatakrishnan and R. Sekar, “Isolated Program Execution: An Application Transparent Approach for Executing Untrusted Programs”, ACSAC'03, Las Vegas, December 2003.
[7] “JSR 121: Application Isolation API Specification”, Java Community Process.
[8] “The Barcelona Project”, Sun Microsystems, Inc.
[9] “The Janos Project”, The Flux Research Group.
[10] J. Viega, et al, “Statically Scanning Java Code: Finding Security Vulnerabilities,” IEEE Software 17(5), 2000.
[11] M. Curphey, “codespy”, January 7th 2004.
[12] “SIMPLIA/JF Kiyacker”, Fujitsu Limited, October 20th 2003.
[13] “Java Archive (JAR) Features”, Sun Microsystems, Inc.
[14] L. Gong, M. Mueller, H. Prafullchandra, and R. Schemers., “Going beyond the sandbox: An overview of the new security architecture in the java development kit 1.2”, USENIX Symposium on Internet Technologies and Systems, 1997.
[15] “J2SE 1.4.2 API Documentation”, Sun Microsystems, Inc.
[16] “jarsigner - JAR Signing and Verification Tool”, Sun Microsystems, Inc.
[17] “.NET Framework Developer’s Guide - Link Demands”, Microsoft Developer Network.
[18] “Java Network Launching Protocol & API Specification (JSR-56) Version 1.0.1”, Sun Microsystems, Inc.