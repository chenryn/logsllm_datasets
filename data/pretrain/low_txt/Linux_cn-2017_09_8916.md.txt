---
**作者**: Jim Bird  
**分类**: 观点  
**评论数据**: 无  
**统计信息**:
  - 评论数: 0
  - 收藏次数: 2
  - 点赞数: 0
  - 分享次数: 0
  - 浏览量: 9610
**发布日期**: 2017-09-29 09:15:31  
**编辑推荐**: 否  
**摘要**: 虽然系统可以持续运行多年，但特定代码行的生命周期通常较短。通过各种迭代寻求解决方案时，代码可能只存在几个月、几天甚至几分钟。  
**来源链接**: https://dzone.com/articles/dont-waste-time-writing  
**文章ID**: 8916  
**是否精选**: 是  
**大图**: /data/attachment/album/201709/29/091515zsj4k68bgb61tbtn.jpg  
**永久链接**: /article-8916-1.html  
**缩略图**: /data/attachment/album/201709/29/091515zsj4k68bgb61tbtn.jpg.thumb.jpg  
**相关文章**: 无  
**审阅者**: 无  
**选择器**: 无  
**总结**: 虽然系统可以持续运行多年，但特定代码行的生命周期通常较短。通过各种迭代寻求解决方案时，代码可能只存在几个月、几天甚至几分钟。  
**标签**:
  - 编程
  - 代码
**是否缩略图**: 否  
**标题**: 不要浪费时间写完美的代码  
**是否带标题图片**: 是  
**译者**: geekpi  
**更新日期**: 2017-09-29 09:15:31
---

![](/data/attachment/album/201709/29/091515zsj4k68bgb61tbtn.jpg)

尽管系统可以运行长达几十年，但特定代码行的生命周期却往往较短。在通过各种方法不断迭代寻找解决方案的过程中，这些代码可能仅存续几个月、几天甚至几分钟。

### 某些代码比其他代码更重要

通过对[代码随时间变化的研究](http://www.youtube.com/watch?v=0eAhzJ_KM-Q)，Michael Feathers 发现了[代码库中的冥曲线](http://swreflections.blogspot.ca/2012/10/bad-things-happen-to-good-code.html)。每个系统都包含大量一次性编写且永不改变的代码。然而，少量重要的代码会经历多次变更、重构或重写。

随着你在某个系统、问题领域或架构方法中积累更多经验，你将更容易识别和预测哪些代码会频繁更改，哪些代码则几乎不变：哪些代码是重要的，哪些则是次要的。

### 我们应该追求完美代码吗？

我们知道应当编写[干净的代码](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882)，使其一致、清晰且尽可能简单。有些人将其推向极致，强迫自己写出[美丽](http://www.makinggoodsoftware.com/2011/03/27/the-obsession-with-beautiful-code-the-refactor-syndrome/)、优雅、近乎[完美](http://stackoverflow.com/questions/1196405/how-to-keep-yourself-from-perfectionism-when-coding)的代码，并[痴迷于重构](http://programmers.stackexchange.com/questions/43506/is-it-bad-to-have-an-obsessive-refactoring-disorder)，纠结每一个细节。

然而，如果代码只写一次且从不更改，或者在另一个极端下，它一直都在变化，那么像试图撰写完美的需求文档或进行完美的前期设计一样，追求完美的代码难道不是既浪费又不必要的（而且也不可能实现）吗？

> “你无法写出完美的软件。感到受伤了吗？不必如此。接受这个事实，拥抱它，庆祝它。因为完美的软件并不存在。在计算机的短暂历史中，没有人曾写出过完美的软件。你不可能成为第一个。除非你接受这一点，否则最终只会浪费时间和精力追逐一个不可能的梦想。”
>
> —— Andrew Hunt，《务实的程序员: 从熟练工到大师》

一次性编写的代码不需要美观优雅，但它必须正确且易于理解——因为在系统的整个生命周期内，即使不会更改的代码也可能被多次阅读。它不需要紧凑——只要保持整洁即可。代码中允许一定程度的[复制粘贴](http://swreflections.blogspot.com/2012/03/is-copy-and-paste-programming-really.html)和其他小调整。这些代码永远不需要打磨，即使周围的其他代码正在更改，它们也不需要重构（除非你需要修改）。这些都是不值得花费额外时间的代码。

对于那些经常更改的代码呢？纠结于代码风格和提出最优雅的解决方案是浪费时间，因为这段代码可能会再次更改，甚至在几天或几周内重写。因此，每次进行更改时，都会[痴迷重构](http://programmers.stackexchange.com/questions/43506/is-it-bad-to-have-an-obsessive-refactoring-disorder)代码，或者没有重构没有改变的代码，因为它可能会更好。代码总是可以更好。但这并不重要。

重要的是：代码是否完成了预期的功能——它是正确的、可用的和高效的吗？它能否[处理错误和不良数据](http://swreflections.blogspot.com/2012/03/defensive-programming-being-just-enough.html)而不会崩溃——或者至少能够[安全地失败](https://buildsecurityin.us-cert.gov/articles/knowledge/principles/failing-securely)？调试容易吗？更改是否容易且安全？这些都不是美的主观方面。这些是成功与失败之间的实际差异。

### 务实编码与重构

精益开发的核心思想是：不要浪费时间在不重要的事情上。这提醒我们如何编写代码以及如何重构、审查和测试代码。

为了完成工作，只需[重构你需要的部分](http://swreflections.blogspot.com/2012/04/what-refactoring-is-and-what-it-isnt.html)——Martin Fowler 称之为[机会主义重构](http://martinfowler.com/articles/workflowsOfRefactoring/)（理解、清理、[童子军规则](http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule)）和[准备性重构](http://martinfowler.com/articles/workflowsOfRefactoring/)。只需使更改更加容易和安全，无需更多。如果你不更改那些代码，那么它并不会如看起来的那么重要。

在代码审查中，只关注[重要的事情](http://randomthoughtsonjavaprogramming.blogspot.com/2014/08/building-real-software-dont-waste-time.html)。代码是否正确？有防御机制吗？是否安全？你能理解吗？更改是否安全？

忽略代码风格（除非代码风格变得难以理解）。让IDE处理代码格式化。不要争论代码是否“更面向对象”。只要它有意义，是否遵循某种模式并不重要。无论你喜欢与否都没有关系。是否有更好的方式做到这一点并不重要——除非你在指导新接触该平台或语言的人，并且需要在代码审查中提供部分指导。

编写测试很重要。测试应涵盖主要流程和重要的异常情况。测试让你用最少的工作获得最多的信息和最大的信心。无论是[广泛的覆盖测试](http://swreflections.blogspot.com/2012/08/whats-better-big-fat-tests-or-little.html)还是小型针对性测试都不重要，只要一直在做这项工作，在编写代码之前或之后编写测试也无关紧要。

### （不仅仅是）代码无关

建筑和工程方面的隐喻对软件从未有效。我们不是设计和建造几年或几代人基本不变的桥梁或摩天大楼。我们构建的是更具弹性和抽象性、更为短暂的东西。代码是为了被修改而写的——这就是为什么它被称为“软件”。

> “经过五年的使用和修改，成功的软件程序的源码通常完全认不出它原来的样子，而一个成功的建筑物五年后几乎没有变化。”
>
> —— Kevin Tate，《可持续软件开发》

我们需要将代码视为我们工作的临时产物：

> “有时候面对更重要的事情时，我们会迷信代码。我们经常有一个错觉，认为卖出的产品的价值在于代码，但实际上可能是对该问题领域的了解、设计难题的进展甚至是客户反馈。”
>
> —— Dan Grover，《代码与创造性破坏》

迭代开发教会我们体验和检验我们的工作成果——我们是否解决了问题，如果没有，我们学到了什么，我们如何改进？软件构建永无止境。即使设计和代码是正确的，它们也可能只在一段时间内正确，直到环境要求再次更改或替换为更好的东西。

我们需要编写好的代码：代码可以理解、正确、安全和可靠。我们需要重构和审查它，并编写有用的测试，同时知道其中一些或所有代码可能会很快被抛弃，或者永远不会被查看，或者根本不会被使用。我们需要认识到，我们的一些工作必然会被浪费，并为此优化。做需要做的事情，仅此而已。不要浪费时间尝试编写完美的代码。

---

**作者简介**:

Jim Bird  
我是一名经验丰富的软件开发经理、项目经理和CTO，专注于软件开发和维护、软件质量和安全性方面的困难问题。在过去15年中，我一直在管理建立全球证券交易所和投资银行电子交易平台的团队。我对小团队在可靠性、性能和适应性极限下的高质量、安全系统的构建特别感兴趣。

---

**原文作者**: [Jim Bird](https://dzone.com/users/722527/jim.bird.html)  
**译者**: [geekpi](https://github.com/geekpi)  
**校对**: [wxy](https://github.com/wxy)  
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出。