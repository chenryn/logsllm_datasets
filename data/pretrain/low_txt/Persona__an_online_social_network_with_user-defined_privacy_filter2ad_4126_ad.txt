### Sharing and Collaboration

A user may not want to share her data with friends, but she would be willing to share it with her doctor. In cases where a patient has multiple doctors, it can be beneficial for these healthcare providers to collaborate in a centralized location. From a technical standpoint, this application is similar to Doc. However, these applications are uniquely available on Persona because they handle sensitive and private data.

### 5. Implementation

Our Persona implementation includes two Persona applications (a storage service and a customizable Doc application) and a browser extension for viewing encrypted pages and managing keys.

#### 5.1 Storage Service Application

The Persona storage service application is an XML-RPC server built using PHP and Apache, with a MySQL database backend. This service implements the storage API described in Section 4.1.

#### 5.2 Doc Application

We have implemented a Doc application (as described in Section 4.2) using PHP with a MySQL backend for storing metadata. Based on the Doc, we also developed Profile and Wall applications.

- **Profile Application**: This application provides an interface for users to add data to their profiles and view others' profiles. The profile metadata, stored in a MySQL database, consists of references to encrypted profile data items. Only the registered user can write to their own Doc Page.
  
- **Wall Application**: Structurally similar to the Profile, the Wall application allows other users to write to the Doc as well. Users can post new items and reply to existing ones. The Wall application constructs the Wall Doc metadata file, threading posts and replies. As with all applications, the posts and references themselves are stored on other storage services, and the Wall application operates using item references only.

#### 5.3 Browser Extension

Users interact with Persona through a Firefox extension. This extension leverages the XPCOM framework in the Mozilla Build Environment to access OpenSSL and cpabe [2] libraries for cryptographic operations. The extension enables users to:
- Register with applications
- Encrypt data to groups
- Resolve data references
- Decrypt data using appropriate keys
- Facilitate out-of-band public-key exchange

The browser extension is a trusted component in Persona and is, in fact, the only one. It implements a secure keystore where users upload their private and public keys. The extension is provided with a list of public keys corresponding to the user's contacts, which are also stored (encrypted with the user's public key) on a storage service. When a user uses a new browser, the extension initializes with the user’s private key and a reference to the user’s permanent keystore, then downloads all other keys from the storage service.

When an encrypted Persona page is loaded, the extension processes the elements on the page and replaces them inline if necessary. There are two main types of replacement:
- **Data Reference Resolution**: The extension parses item references, fetches the items from storage services, decrypts the items, and verifies any signatures. All data is signed by the creator and verified if the signer’s key is known. Data resolution is recursive: encrypted data may contain references to more encrypted data.
- **Replacement of Special Tags**: To maintain privacy, users may not want to share their list of contacts (public keys) with applications. Instead, this list is kept encrypted with the user’s public key on a storage service, which the extension downloads upon initialization. The extension recognizes a "friend-form" tag sent by an application and replaces it with a drop-down box containing a list of the user’s contacts. This feature is used in the Profile application to allow users to view their contacts' profiles.

The extension also allows users to encrypt data to groups. It replaces embedded forms with a text box for entering private data. When the submit button is pressed, the extension prompts the user for a policy under which to encrypt the data, performs the encryption, publishes symmetric keys as necessary, stores the encrypted data on the user’s storage service, and replaces the form data with a reference to the encrypted data item.

**Caching**: To reduce latency, the extension caches various keys and contact information. This includes:
- User-created keys: RSA public key (137 bytes for 1024-bit moduli), RSA private key (680 bytes), APK (888 bytes), and AMSK (156 bytes).
- For each friend: storage service information, RSA public key, and APK.
- ASK (size varies: 407 bytes for one attribute and 266 bytes for each additional attribute) created for that friend, along with the attributes associated with the ASK.
- For each policy, whether created by the user or a friend, the extension caches the RSA keypair and the symmetric key.

This caching and recycling of symmetric keys allow the extension to pay the cost of ABE decryption only when encountering an item encrypted using a new key reference. This will occur when the encryption uses a new policy (corresponding to a new group) or an existing policy with a new symmetric key. Common operations do not require expensive ABE operations.

#### 5.4 Integrating Persona with Facebook

Current deployments of Online Social Networks (OSNs) highlight their undeniable popularity. It is unrealistic to assume that Persona (or another privacy-enabled network) will replace existing OSNs. Instead, we expect users to migrate personal information onto private networks while continuing to use existing OSNs for public data.

We have designed Persona to interoperate with existing OSNs, and our prototype integrates with Facebook. Persona applications are accessible as Facebook applications and can interact with Facebook’s API, providing privacy-enabled applications through the familiar Facebook interface. Conversely, existing Facebook applications can be made Persona-aware on a per-application basis. Users protect their private data by storing it on Persona storage services rather than on Facebook; only fellow Persona users will be able to access the data, and only if they are given the necessary keys and access rights.

**Using Persona Applications within Facebook**:
- Users log in to Persona by authenticating to the browser extension, which then decrypts and encrypts data transparently, and then log in to Facebook as usual.
- A Facebook-aware Persona application functions like any third-party Facebook application and can be selected for use as any other Facebook application. Unlike other applications, Persona applications use markup interpreted by the Persona browser extension and are aware of data references.
- Traditional Facebook applications can communicate with users by sending notifications, displaying items on the Facebook wall, and sending application invitations. The same facilities are available to Persona applications. We have implemented an abstract OSN interface that Persona applications use to access OSN APIs. While our design is general, our current implementation has only been tested with Facebook. Our Doc-based applications are accessible via Facebook as Facebook applications.

**Using Facebook Applications on Persona**:
- As users begin to use Persona, existing Facebook applications may want to provide Persona users with the ability to store private data. Minimally, each application must be ported to operate using Persona data references, though some applications that transform user data may require a complete rewrite. We discuss application porting in Section 8.

### 6. Evaluation

In this section, we quantify the processing and storage requirements of Persona and measure the time to render Persona-encrypted web pages. The key parameters of our evaluation are the sizes and number of distinct data elements that might be stored on a single Persona page. Each distinct element represents a request to a storage server and may, if the policy and associated key are unknown, also imply a request for a group key and its decryption with ABE. This process represents the performance cost of Persona. We estimate these parameters using Facebook as a model, combining real user profiles from Facebook with observations of application-provided limits on the number of items per page.

**User Profiles**:
- User profiles can contain hundreds of data items. We use profile data in our evaluation because it exposes the worst-case performance of Persona, where users must fetch and decrypt many individually encrypted data items. Our data is from a crawl of Facebook profiles gathered in January 2009, containing the HTML of the profile pages of 90,269 users in the New Orleans network. Of those pages, 65,324 pages contain visible profiles, and 39 pages had miscellaneous errors that left them unusable.
- We parse these Facebook profiles into data items that could be individually encrypted. First, we parse the document based on fields such as Name, Birthday, Activities, Interests, etc. We then decompose fields that contain multiple items separated by commas, bullet points, or line breaks. Under this decomposition, users can individually encrypt every TV show, book, and movie they enjoy, if they choose to do so.

**Figures**:
- Figure 1 (a) shows a CDF of the sizes of all data items.
- Figure 1 (b) shows a CDF of the maximum, 95th percentile, and average data item sizes on a per-profile basis.
- Figure 1 (c) presents a CDF of the number of data items per profile.

These figures provide a backdrop for the performance of Persona: the number of data items on a page determines the page load time.

#### 6.1 Desktop Performance

We evaluate our Persona implementation on a desktop computer using a 2.00 GHz processor and 2 GB of RAM. The desktop, storage service, and application server are connected through a router that introduces an artificial delay, chosen uniformly between 65ms and 85ms, on each packet. These values reflect high latencies observed by King [15] and represent a case where the storage service is far away from the user.

**Experiment Scenarios**:
- **Cool**: Represents Persona in its initial state, when group symmetric keys must be retrieved from a storage service and decrypted.
- **Warm**: Represents Persona usage in the steady state, when all symmetric keys associated with groups have been cached.

We repeat the cool experiment scenario three times, varying the number of user-defined groups between 1, 10, and 100. We run only one warm experiment scenario since no key fetches and no ABE decryptions are needed. In each data set, we randomly assign each data item to one of the user-defined groups.

**Figures**:
- Figure 2 (a) shows the total time needed, in seconds, to present Facebook profiles composed of encrypted data items.
- Figure 2 (b) shows the CDF of total time to load Facebook profiles.
- Figure 2 (c) shows the total time needed, in seconds, to decrypt encrypted data items in Facebook profiles in the cool data set with 100 groups. Note the difference in scale from (a).

For each Facebook profile, we first encrypt and store each of the data items in Persona. We then retrieve a page that contains references to all of these data items. In the cool data set, we asynchronously fetch the keys needed to decrypt all of the items in the page. In both cool and warm, we also asynchronously fetch the encrypted data items themselves. Once all keys and data items have been fetched, we decrypt the data items on the page, verify their signatures, and re-render the page.

**Page Load Time**:
- Page load times increase linearly with the number of elements. Figure 2 (a) shows how long it takes to download, decrypt, and display the profile page for each of our experiments, as a function of the number of data items on the page.
- Figure 2 (b) extrapolates the distribution of page load times per Facebook profile. The median page load time is 2.3 seconds, and the maximum is 13.7 seconds. Most pages consist of a few small entries, so most are loaded quickly. The cool data sets are comparable to the warm data set, indicating that retrieving keys is not too expensive. These times may also represent a worst case; if users aggregate their data more coarsely, there will be fewer data items, requiring fewer fetches and thus fewer round-trip times. Another possible improvement would be to cache commonly retrieved data items, but we have not performed this optimization.

**Encrypted Data Size**:
- Figures 3 and 4 show how much larger the encrypted data is for individual data items and entire profile pages, respectively. There is a substantial increase in the size of the stored data, affecting both the storage capacity of the storage services and the network resources required to transfer data. The storage services are inherently distributed, so they should be able to scale to support the needs of the system.

#### 6.2 Mobile Device ABE Performance

Mobile devices are increasingly used for limited access to OSNs. MySpace, Facebook, and LinkedIn [24] all have iPhone applications, and there are many Twitter and instant messaging clients. To provide a substitute, Persona must also be realizable on mobile devices. Enabling mobile devices with Persona-based security would enable users to:

- **Figure 3**: Total size of plaintext and stored (cipher-)**

[Note: The text ends abruptly here. If you have more content to include, please provide it, and I will continue to optimize it.]