# **漏洞概述**

此漏洞源于程序在处理Template对象时错误地使用了Form对象的函数，从而导致越界数据读取。该问题属于类型混淆漏洞的一种。攻击者可以通过构建特定的XML数据包（XDP）模板，并对XFA对象执行JavaScript操作，迫使Reader从Template对象的边界外读取数据。一旦成功，恶意代码将在沙盒渲染器进程中被执行。

# **漏洞细节**

### POC代码分析

通过解析POC文件中的PDF流（利用PdfStreamDumper工具），可以看到文件内包含的对象流。其中，第5个对象流是XML Data Package (XDP) 结构。XDP是由Adobe Systems开发的一种符合XML 1.0规范的文件格式，它允许将PDF内容或Adobe XML Forms Architecture (XFA) 资源封装在XML容器中。这种格式既可作为独立文档存在，也能嵌入到PDF文档中。

在第一个对象流中，XFA对象会执行一段JavaScript代码，这段代码首先将`sub1`添加为`xfa.template`对象，再将`sub2`添加为`xfa.form`对象，并随后将`sub2`附加至`sub1`上。XFA是一种专有的XML标准，用于增强Web表单的功能。它提供了基于模板的语法及一系列处理规则，使用户能够构建出具有交互性的表单。最后，JavaScript代码将`o2`的`presence`属性设置为`inactive`，这一操作会导致程序崩溃。

### 漏洞调试过程

- 将Windbg设为默认调试器并运行POC文件，当程序崩溃时Windbg会自动暂停。
- 在AcroForm.api模块中发现了异常，具体表现为ecx寄存器值异常，这直接导致了程序崩溃。
- 通过对栈进行回溯定位到了崩溃点所在的上层函数`AcroForm!PlugInMain+0x979f1`。反汇编显示ecx的值来源于`[eax+esi*8]`，而esi在这里仅作为一个偏移量且其值为零，因此ecx的实际值依赖于eax。进一步追踪发现eax是从`[edi+1d4]`处获取的。
- 经过检查后确认，`[edi+1d4]`位置存储的是主程序路径字符串的一部分；然而，在后续处理中这部分字符串被误当作指针来使用，这表明存在越界访问的风险。
- 当重新启动程序时观察到`[edi+1d4]`处的数据每次都有很大差异，说明这是一个未定义区域，每次访问的结果都是不可预测的。
- 使用heap命令查看相关内存分配情况后得知edi指向的空间大小为0x140字节。结合之前关于XFA结构的研究资料以及《SyScan360 _2016_ -_Pwning_Adobe_Reader_with_XFA》报告中提供的信息，可以确定这里保存的是一个XFA对象。
- 通过进一步分析和交叉引用找到了XFATemplateModelImpl类及其构造函数，并最终确定了Template对象与Form对象之间的尺寸差异（分别为0x140字节和0x270字节）。正是由于这种尺寸上的不匹配，才使得在尝试访问超过Template对象实际长度的位置时触发了越界读取错误。

# **参考资料**

- SyScan360 _2016_ -_Pwning_Adobe_Reader_with_XFA.pdf