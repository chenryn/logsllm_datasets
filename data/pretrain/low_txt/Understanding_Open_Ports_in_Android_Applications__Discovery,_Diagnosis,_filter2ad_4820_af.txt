### Android Static Analysis

Static analysis has been extensively used to understand the (in)security of Android applications. It has been applied in various areas, including malware analysis (e.g., [59], [68], [77], [85]), privacy leakage detection (e.g., [58], [60], [61]), and vulnerability discovery (e.g., [47], [63], [81], [82], [84], [87]).

Two notable analysis frameworks, FlowDroid [40] and Amandroid [76], have been developed to simplify tool development. For instance, OPAnalyzer [52] is built on Amandroid to track data flows between server sockets' `accept()` calls and potential sinks. However, it lacks a backward-style parameter tracking engine, which limits its ability to analyze open-port parameters. While there are other static tools for parameter analysis, they are not suitable for our problem due to specific limitations. For example, SAAF [51] does not provide a complete parameter representation, [86] lacks array handling, and [42] does not model relevant open port APIs.

To address these issues, we introduce the backward slicing graph and semantic-aware constant propagation. Our tool, OPTool, not only uncovers open-port parameters but is also the first static analysis tool capable of detecting open-port SDKs in Android applications.

### Conclusion

In this paper, we proposed the first comprehensive pipeline for open-port analysis in Android applications, aimed at systematically studying open ports and their associated threats. We deployed a novel crowdsourcing app on Google Play for ten months, which allowed us to observe the actual execution of open ports in 925 popular apps and 725 built-in apps. This crowdsourcing approach provided a more accurate view of the prevalence of open ports in Android apps, revealing that 15.3% of apps use open ports, compared to the previous estimate of 6.8%.

We then demonstrated the significant presence of SDK-introduced open ports and identified insecure open-port API usages through enhanced static analysis with open-port context and semantics. Additionally, we uncovered five vulnerability patterns in open ports and reported vulnerabilities in popular apps and widely-embedded SDKs. The feasibility of remote open-port attacks in today's networks and the effectiveness of denial-of-service attacks were also experimentally evaluated. Finally, we discussed mechanisms for different stakeholders to mitigate open-port threats.

### Acknowledgements

We thank all the anonymous reviewers for their valuable comments. This work is partially supported by the Singapore National Research Foundation under NCR Award Number NRF2014NCR-NCR001-012 and the National Natural Science Foundation of China (Grant No. U1636205).

### References

[1] "5G Carrier Grade Wi-Fi: Addressing the Needs for Uplink Throughput, Dense Deployments and Cellular-like Quality," http://tinyurl.com/5gNeedOfUplink.
[2] "AlarmManager," https://developer.android.com/reference/android/app/AlarmManager.html.
[3] "AlarmManager change since Android 4.4," https://developer.android.com/about/versions/android-4.4.html#BehaviorAlarms.
[4] "Alibaba AMap SDK," http://lbs.amap.com/api/android-sdk/summary.
[5] "Android Fragmentation Report August 2015," https://opensignal.com/reports/2015/08/android-fragmentation/.
[6] "Android Logcat," https://developer.android.com/reference/android/util/Log.html.
[7] "AndroidVideoCache," https://github.com/danikula/AndroidVideoCache.
[8] K. Allix, T. F. Bissyande, J. Klein, and Y. L. Traon, "AndroZoo: Collecting millions of Android apps for the research community," in Proc. ACM MSR, 2016.
[9] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Traon, D. Octeau, and P. McDaniel, "Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps," in Proc. ACM PLDI, 2014.
[10] M. Backes, S. Bugiel, and E. Derr, "Reliable third-party library detection in Android and its security applications," in Proc. ACM CCS, 2016.
[11] M. Backes, S. Bugiel, E. Derr, S. Gerling, and C. Hammer, "R-Droid: Leveraging Android app analysis with static slice optimization," in Proc. ACM AsiaCCS, 2016.
[12] R. Bonett, K. Kafl√©, K. Moran, A. Nadkarni, and D. Poshyvanyk, "Discovering flaws in security-focused static analysis tools for Android using systematic mutation," in Proc. USENIX Security, 2018.
[13] Y. Cao, Y. Fratantonio, A. Bianchi, M. Egele, C. Kruegel, G. Vigna, and Y. Chen, "EdgeMiner: Automatically detecting implicit control flow transitions through the Android framework," in Proc. ISOC NDSS, 2015.
[14] E. Chin, A. Felt, K. Greenwood, and D. Wagner, "Analyzing inter-application communication in Android," in Proc. ACM MobiSys, 2011.
[15] Y. Duan, M. Zhang, A. V. Bhaskar, H. Yin, X. Pan, T. Li, X. Wang, and X. Wang, "Things you may not know about Android (un)packers: A systematic study based on whole-system emulation," in Proc. ISOC NDSS, 2018.
[16] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, "An empirical study of cryptographic misuse in Android applications," in Proc. ACM CCS, 2013.
[17] M. Egele, C. Kruegel, E. Kirda, and G. Vigna, "PiOS: Detecting privacy leaks in iOS applications," in Proc. ISOC NDSS, 2011.
[18] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri, "A study of Android application security," in Proc. USENIX Security, 2011.
[19] M. Grace, W. Zhou, X. Jiang, and A. Sadeghi, "Unsafe exposure analysis of mobile in-app advertisements," in Proc. ACM WiSec, 2012.
[20] J. Hoffmann, M. Ussath, T. Holz, and M. Spreitzenbarth, "Slicing droids: Program slicing for smali code," in Proc. ACM SAC (Symposium on Applied Computing), 2013.
[21] Y. Jia, Q. Chen, Y. Lin, C. Kong, and Z. Mao, "Open doors for Bob and Mallory: Open port usage in Android apps and security implications," in Proc. IEEE EuroS&P, 2017.
[22] M. Johns, S. Lekies, and B. Stock, "ZMap: Fast Internet-wide scanning and its security applications," in Proc. USENIX Security, 2013.
[23] O. Lhotak and L. Hendren, "Scaling Java points-to analysis using Spark," in Proc. Springer Compiler Construction, 2003.
[24] L. Li, T. F. Bissyande, D. Octeau, and J. Klein, "DroidRA: Taming reflection to support whole-program analysis of Android apps," in Proc. ACM ISSTA, 2016.
[25] Z. Li, W. Wang, C. Wilson, J. Chen, C. Qian, T. Jung, L. Zhang, K. Liu, X. Li, and Y. Liu, "FBS-Radar: Uncovering fake base stations at scale in the wild," in Proc. ISOC NDSS, 2017.
[26] C. Lin, H. Li, X. Zhou, and X. Wang, "Screenmilker: How to milk your Android screen for secrets," in Proc. ISOC NDSS, 2014.
[27] K. Lu, Z. Li, V. P. Kemerlis, Z. Wu, L. Lu, C. Zheng, Z. Qian, W. Lee, and G. Jiang, "Checking more and alerting less: Detecting privacy leakages via enhanced data-flow analysis and peer voting," in Proc. ISOC NDSS, 2015.
[28] E. Mariconti, L. Onwuzurike, P. Andriotis, E. D. Cristofaro, G. Ross, and G. Stringhini, "MaMaDroid: Detecting Android malware by building markov chains of behavioral models," in Proc. ISOC NDSS, 2017.
[29] Y. Nan, M. Yang, Z. Yang, S. Zhou, G. Gu, and X. Wang, "UIPicker: User-input privacy identification in mobile applications," in Proc. USENIX Security, 2015.
[30] Y. Nan, Z. Yang, X. Wang, Y. Zhang, D. Zhu, and M. Yang, "Finding clues for your secrets: Semantics-driven, learning-based privacy discovery in mobile apps," in Proc. ISOC NDSS, 2018.
[31] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein, and Y. L. Traon, "Effective inter-component communication mapping in Android with Epicc: An essential step towards holistic security analysis," in Proc. USENIX Security, 2013.
[32] M. Oltrogge, E. Derr, C. Stransky, Y. Acar, S. Fahl, C. Rossow, G. Pellegrino, S. Bugiel, and M. Backes, "The rise of the citizen developer: Assessing the security impact of online app generators," in Proc. IEEE Symposium on Security and Privacy, 2018.
[33] T. Peng, C. Leckie, and K. Ramamohanarao, "Survey of network-based defense mechanisms countering the DoS and DDoS problems," in Proc. ACM CSUR, 2007.
[34] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna, "Execute this! analyzing unsafe and malicious dynamic code loading in Android applications," in Proc. ISOC NDSS, 2014.
[35] L. Qiu, Y. Wang, and J. Rubin, "Analyzing the Analyzers: FlowDroid/IccTA, AmanDroid, and DroidSafe," in Proc. ACM ISSTA, 2018.
[36] Z. Qu, S. Alam, Y. Chen, X. Zhou, W. Hong, and R. Riley, "DyDroid: Measuring dynamic code loading and its security implications in Android applications," in Proc. IEEE DSN, 2017.
[37] S. Rasthofer, S. Arzt, M. Miltenberger, and E. Bodden, "Harvesting runtime values in Android applications that feature anti-analysis techniques," in Proc. ISOC NDSS, 2016.
[38] A. Razaghpanah, R. Nithyanand, N. Vallina-Rodriguez, S. Sundaresan, M. Allman, C. Kreibich, and P. Gill, "Apps, trackers, privacy, and regulators: A global study of the mobile tracking ecosystem," in Proc. ISOC NDSS, 2018.
[39] J. Schiller, F. Turbak, H. Abelson, J. Dominguez, A. McKinney, J. Okerlund, and M. Friedman, "Live programming of mobile apps in App Inventor," in Proc. ACM Workshop on Programming for Mobile & Touch, 2014.
[40] Y. Shao, J. Ott, Y. J. Jia, Z. Qian, and Z. M. Mao, "The misuse of Android Unix domain sockets and security implications," in Proc. ACM CCS, 2016.
[41] D. Springall, Z. Durumeric, and J. A. Halderman, "FTP: The forgotten cloud," in Proc. IEEE DSN, 2016.
[42] R. Stevens, C. Gibler, J. Crussell, J. Erickson, and H. Chen, "Investigating user privacy in Android Ad libraries," in Proc. IEEE Mobile Security Technologies (MoST), 2012.
[43] X. Tang, Y. Lin, D. Wu, and D. Gao, "Towards dynamically monitoring Android applications on non-rooted devices in the wild," in Proc. ACM WiSec, 2018.
[44] N. Vallina-Rodriguez, S. Sundaresan, C. Kreibich, N. Weaver, and V. Paxson, "Beyond the radio: Illuminating the higher layers of mobile networks," in Proc. ACM MobiSys, 2015.
[45] F. Wei, S. Roy, X. Ou, and Robby, "Amandroid: A precise and general inter-component data flow analysis framework for security vetting of Android apps," in Proc. ACM CCS, 2014.
[46] M. Wong and D. Lie, "IntelliDroid: A targeted input generator for the dynamic analysis of Android malware," in Proc. ISOC NDSS, 2016.
[47] M. Y. Wong and D. Lie, "Tackling runtime-based obfuscation in Android with TIRO," in Proc. USENIX Security, 2018.
[48] D. Wu and R. K. C. Chang, "Indirect file leaks in mobile applications," in Proc. IEEE Mobile Security Technologies (MoST), 2015.
[49] D. Wu, R. K. C. Chang, W. Li, E. K. T. Cheng, and D. Gao, "MopEye: Opportunistic monitoring of per-app mobile network performance," in Proc. USENIX Annual Technical Conference, 2017.
[50] D. Wu, X. Liu, J. Xu, D. Lo, and D. Gao, "Measuring the declared SDK versions and their consistency with API calls in Android apps," in Proc. Conference on Wireless Algorithms, Systems, and Applications (WASA), 2017.
[51] D. Wu, X. Luo, and R. K. C. Chang, "A sink-driven approach to detecting exposed component vulnerabilities in Android apps," CoRR, vol. abs/1405.6282, 2014.
[52] L. Xing, X. Bai, N. Zhang, X. Wang, X. Liao, T. Li, and S.-M. Hu, "Staying secure and unprepared: Understanding and mitigating the security risks of Apple ZeroConf," in Proc. IEEE Symposium on Security and Privacy, 2016.
[53] G. Yang, J. Huang, G. Gu, and A. Mendoza, "Study and mitigation of origin stripping vulnerabilities in hybrid-postMessage enabled mobile applications," in Proc. IEEE Symposium on Security and Privacy, 2018.
[54] M. Zhang, Y. Duan, H. Yin, and Z. Zhao, "Semantics-aware Android malware classification using weighted contextual API dependency graphs," in Proc. ACM CCS, 2014.
[55] Y. Zhou, L. Wu, Z. Wang, and X. Jiang, "Harvesting developer credentials in Android apps," in Proc. ACM WiSec, 2015.
[56] C. Zuo, Z. Lin, and Y. Zhang, "Why does your data leak? uncovering the data leakage in cloud from mobile apps," in Proc. IEEE Symposium on Security and Privacy, 2019.