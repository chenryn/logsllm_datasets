### PowerShell 成为攻击工具的演变过程

PowerShell 是一个集成在所有受支持的 Windows 版本（Windows 7/Windows Server 2008 R2 及更高版本）中的命令行程序，它提供了强大的灵活性和功能来管理 Windows 系统。由于其卓越的能力，PowerShell 已逐渐成为攻击者青睐的工具之一。一旦攻击者能够在一个系统上运行代码，他们通常会选择执行 PowerShell 代码，因为这种代码可以在内存中运行，从而避开防病毒软件的检测。此外，攻击者还可以下载 PowerShell 脚本文件（.ps1）到磁盘中，并利用 PowerShell 的能力从网站下载并在内存中直接运行代码。

Dave Kennedy 和 Josh Kelley 在 DEF CON 18（2010 年）上讨论了如何利用 PowerShell 进行攻击。Matt Graeber 则开发了 PowerSploit 并在其博客上发表了一篇文章，详细介绍了为什么 PowerShell 是一个强大的攻击平台。自 2012 年 PowerSploit 发布以来，使用 PowerShell 作为攻击手段的趋势显著上升。大约一年后，Mimikatz 开始支持 PowerShell 调用（即 Invoke-Mimikatz），这进一步推动了 PowerShell 作为攻击工具的流行度。

### 攻击者的多种选择

尽管本文主要关注 PowerShell，但值得注意的是，攻击者还有许多其他选项可以选择。例如：

- 自定义可执行文件 (如 EXE 或 DLL)
- Windows 命令行工具（CMD）
- 远程桌面
- Sysinternals 工具集
- Windows 脚本宿主
- VBScript
- CScript
- JavaScript
- 批处理文件
- PowerShell

### PowerShell 的攻击能力

攻击者偏爱使用 PowerShell 的原因包括：

- 能够在内存中执行代码而无需写入磁盘。
- 可以从远程主机下载并执行代码。
- 直接调用 .NET 和 Windows API。
- 内置远程操作功能。
- CMD.exe 通常受到更多限制，而 PowerShell 不会。
- 大多数企业组织对 PowerShell 活动的关注较少。
- 许多端点安全产品缺乏可视化 PowerShell 活动的功能。

在客户端攻击中，攻击者经常利用以下 PowerShell 运行选项（通常是经过编码的命令，以绕过执行策略）：

- `WindowStyle Hidden`
- `NoProfile`
- `ExecutionPolicy Bypass`
- `File`
- `Command`
- `EncodedCommand`

### 现实世界中的 PowerShell 攻击工具

#### PowerSploit

**描述：** PowerSploit 是一个广泛使用的 PowerShell 后期漏洞利用框架。
**使用场景：** 信息探测、特权提升、凭证窃取、持久化。
**作者：** Matt Graeber (@Mattifestation) & Chris Campbell (@obscuresec)

常用 cmdlets 包括：
- `Invoke-DllInjection.ps1`
- `Invoke-Shellcode.ps1`
- `Invoke-WmiCommand.ps1`
- `Get-GPPPassword.ps1`
- `Get-Keystrokes.ps1`
- `Get-TimedScreenshot.ps1`
- `Get-VaultCredential.ps1`
- `Invoke-CredentialInjection.ps1`
- `Invoke-Mimikatz.ps1`
- `Invoke-NinjaCopy.ps1`
- `Invoke-TokenManipulation.ps1`
- `Out-Minidump.ps1`
- `VolumeShadowCopyTools.ps1`
- `Invoke-ReflectivePEInjection.ps1`

#### Invoke-Mimikatz

**功能特性：** 允许在 PowerShell 中执行 Mimikatz，实现凭证窃取和注入、伪造 Kerberos 票证等。
**使用场景：** 凭证窃取与重用、持久化。
**作者：** Joseph Bialek (@clymb3r)

#### PowerView

**描述：** 一款纯粹的 PowerShell 域/网络态势感知工具，现已成为 PowerSploit 的一部分。
**使用场景：** 信息探测。
**作者：** Will Harmjoy (@HarmJ0y)

常用 cmdlets 包括：
- `Get-NetUser`
- `Get-NetGroup`
- `Get-NetGroupMember`
- `Get-NetLocalGroup`
- `Get-NetSession`
- `Invoke-UserHunter`
- `Get-NetOU`
- `Find-GPOLocation`
- `Get-NetGPOGroup`
- `Get-ObjectACL`
- `Add-ObjectACL`
- `Invoke-ACLScanner`
- `Set-ADObject`
- `Invoke-DowngradeAccount`
- `Get-NetForest`
- `Get-NetForestTrust`
- `Get-NetForestDomain`
- `Get-NetDomainTrust`
- `Get-MapDomainTrust`

#### PowerUp

**描述：** 提供本地特权提升的一些方法，也是 PowerShell Empire 的一部分。
**使用场景：** 特权提升。
**作者：** Will Harmjoy (@harmj0y)

常用 cmdlets 包括：
- `Get-ServiceUnquoted`
- `Get-ServiceFilePermission`
- `Get-ServicePermission`
- `Invoke-ServiceAbuse`
- `Install-ServiceBinary`
- `Get-RegAutoLogon`
- `Get-VulnAutoRun`
- `Get-VulnSchTask`
- `Get-UnattendedInstallFile`
- `Get-WebConfig`
- `Get-ApplicationHost`
- `Get-RegAlwaysInstallElevated`

#### Nishang

**描述：** PowerShell 渗透测试工具。
**使用场景：** 信息探测、凭据窃取、特权提升、持久化。
**作者：** Nikhil Mitt (@nikhil_mitt)

常用 cmdlets 包括：
- `Get-Unconstrained`
- `Add-RegBackdoor`
- `Add-ScrnSaveBackdoor`
- `Gupt-Backdoor`
- `Invoke-ADSBackdoor`
- `Enabled-DuplicateToken`
- `Invoke-PsUaCme`
- `Remove-Update`
- `Check-VM`
- `Copy-VSS`
- `Get-Information`
- `Get-LSASecret`
- `Get-PassHashes`
- `Invoke-Mimikatz`
- `Show-TargetScreen`
- `Port-Scan`
- `Invoke-PoshRatHttp`
- `Invoke-PowerShellTCP`
- `Invoke-PowerShellWMI`
- `Add-Exfiltration`
- `Add-Persistence`
- `Do-Exfiltration`
- `Start-CaptureServer`

#### PowerShell Empire

**功能特性：**
- 基于 PowerShell 的远程控制木马
- Python 编写的服务端组件（Kali Linux）
- AES 加密的 C2 通信通道
- 从凭证数据库导出和跟踪凭证信息

**使用场景：** 提供前期漏洞利用的集成模块、信息探测、凭据窃取与重用、持久化。
**作者：** Will Schroeder (@harmj0y) & Justin Warner (@sixdub) & Matt Nelson (@enigma0x3)

模块包括：
- 代码执行
- 数据收集
- 凭据管理
- 数据泄露
- 漏洞利用
- 横向移动
- 管理
- 持久化
- 特权提升
- 侦察
- 情景感知
- 乐趣和恶作剧

常用 cmdlets 包括：
- `Invoke-DllInjection`
- `Invoke-ReflectivePEInjection`
- `Invoke-ShellCode`
- `Get-ChromeDump`
- `Get-ClipboardContents`
- `Get-FoxDump`
- `Get-IndexedItem`
- `Get-Keystrokes`
- `Get-Screenshot`
- `Invoke-Inveigh`
- `Invoke-NetRipper`
- `Invoke-NinjaCopy`
- `Out-Minidump`
- `Invoke-EgressCheck`
- `Invoke-PostExfil`
- `Invoke-PSInject`
- `Invoke-RunAs`
- `MailRaider`
- `New-HoneyHash`
- `Set-MacAttribute`
- `Get-VaultCredential`
- `Invoke-DCSync`
- `Invoke-Mimikatz`
- `Invoke-PowerDump`
- `Invoke-TokenManipulation`
- `Exploit-Jboss`
- `Invoke-ThunderStruck`
- `Invoke-VoiceTroll`
- `Set-Wallpaper`
- `Invoke-InveighRelay`
- `Invoke-PsExec`
- `Invoke-SSHCommand`
- `Get-SecurityPackages`
- `Install-SSP`
- `Invoke-BackdoorLNK`
- `PowerBreach`
- `Get-GPPPassword`
- `Get-SiteListPassword`
- `Get-System`
- `Invoke-BypassUAC`
- `Invoke-Tater`
- `Invoke-WScriptBypassUAC`
- `PowerUp`
- `PowerView`
- `Get-RickAstley`
- `Find-Fruit`
- `HTTP-Login`
- `Find-TrustedDocuments`
- `Get-ComputerDetails`
- `Get-SystemDNSServer`
- `Invoke-Paranoia`
- `Invoke-WinEnum`
- `Get-SPN`
- `Invoke-ARPScan`
- `Invoke-PortScan`
- `Invoke-ReverseDNSLookup`
- `Invoke-SMBScanner`

### PowerShell 攻击工具的使用

最好的 PowerShell 攻击工具无疑是 PowerShell Empire。你可以从 [GitHub](https://github.com/PowerShellEmpire/Empire/releases) 下载并解压 PowerShell Empire 的 ZIP 文件。解压后，你可以在 `data/module_source` 目录下查看 PS1 文件。

### PowerShell 并不只是 “PowerShell.exe”

简单地阻止对 `PowerShell.exe` 的访问并不是限制 PowerShell 执行的有效方法。实际上，PowerShell 是 Windows 系统的一个核心组件，存在于 `System.Management.Automation.dll` 动态链接库文件 (DLL) 中，并且可以通过多种方式实例化。例如，可以通过自定义的可执行文件启动 PowerShell 代码。

Justin Warner (@SixDub) 在 2014 年底发表了一篇关于如何启动受限的 `PowerShell.exe` 的文章（也称为 PowerPick）。由于 PowerShell 代码可以在不运行 `PowerShell.exe` 的情况下执行，因此仅限制 `PowerShell.exe` 的运行并不能有效阻止攻击。

有两个对立的观点：

- **限制 PowerShell：** 这种做法可以阻止一些潜在的攻击，但可能会影响依赖 PowerShell 的功能。
- **不限制 PowerShell：** 通过配置 AppLocker 和设置受限的语言模式等方法，可以更有效地限制攻击者执行 PowerShell 代码，而不必完全禁止 `PowerShell.exe` 的运行。

### 无需 `PowerShell.exe` 执行 PS 命令

在 PowerShell v2 中，引入了用于创建管道命令以及同步或异步调用运行空间内命令的方法。这种方法允许应用程序通过编程方式使用 Windows PowerShell 执行任务。

- 创建引用了 `System.Management.Automation.dll` 程序集的 C# 应用程序。
- 利用 Automation 程序集的功能执行 PowerShell 代码。
- 类似于 `PowerShell.exe` 的工作方式。

Lee Christensen 提出的非托管 PowerShell 方法是大多数 PowerShell 攻击工具在脱离 `powershell.exe` 的情况下执行 PowerShell 代码的基础。这种方法在非托管进程中启动 .NET，并在内存中加载和执行自定义的 C# 程序集。自 2016 年 3 月起，Metasploit 的 PowerShell 模块就采用了这种非托管 PowerShell 方法。

另一个使用非托管 PowerShell 的项目是 P0wnedShell，这是一个 "PowerShell 运行空间后期漏洞利用工具包"。它在 .NET 环境中运行 PowerShell 命令和函数，并包含了许多攻击工具，如 PowerSploit、PowerCat、Inveigh 和 Nishang 等，这些工具都封装在一个单一的可执行文件中。

这个项目还提供了一个简单的 PowerShell 攻击工具执行示例——“数字排序”，用于简单的执行 PS 攻击工具。我将其重命名为 "Calc.exe"，并发现当使用 Mimikatz 执行时，"Calc" 使用了超过 180 MB 的内存。

**参考来源：** adsecurity, 如需转载，请注明来源于嘶吼：[http://www.4hou.com/technology/3134.html](http://www.4hou.com/technology/3134.html)