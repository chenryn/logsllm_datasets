### 6. Discussion

Given that the Linux Security Modules (LSM) project was designed to meet the needs of a collection of independent security projects, it is not surprising that the resulting system exhibits some emergent properties. Many security models require a way to associate security attributes with system objects. To address this, LSM attaches security fields to various internal kernel objects, allowing modules to attach and reference these security attributes as needed.

Persistently binding security attributes to files is another desirable feature. This can be achieved seamlessly through extended attribute file system support, which enables security attributes to be bound to files on disk. However, supporting extended attributes is a complex issue, requiring both filesystem support and support in the Linux kernel's Virtual File System (VFS) layer. LSM mediates all VFS extended attribute functions, such as creating, listing, and deleting extended attributes. Despite this, extended attribute support is relatively new to the Linux kernel and is not well-supported in all filesystems. In cases where extended attribute support is missing, modules can use meta-files as an alternative [44, 29].

In designing a pluggable interface for security enhancements, one might consider completely modularizing all security policy decisions, moving all kernel logic concerning access control out of the kernel and into a default module. This approach has significant benefits, including the ability to provide authoritative hooks instead of restrictive ones, which would enable a broader variety of modules (see Section 3). However, we chose not to fully modularize all security decisions for pragmatic reasons. Current Linux access control decisions are not well-isolated in the kernel; they are intertwined with other error-checking and transformation logic. A patch to remove all access control logic from the kernel would be highly invasive and likely introduce security bugs, which would not be an ideal way to introduce LSM to the Linux community.

Therefore, we deferred complete modularization and implemented less invasive restrictive hooks, providing a minimally invasive patch for initial introduction into the Linux community. Once LSM is well-established, we may revisit this decision and propose a more radical modularization architecture.

Finally, in designing the LSM interface, we were acutely aware that LSM constitutes an API and must present a logically consistent view to the programmer. The LSM interface includes not only the set of hooks needed by the supported modules but also logical extensions of these hooks to ensure a regular and consistent interface. Where possible, special cases were generalized to eliminate exceptions.

### 7. Related Work

#### 7.1. Extensible Kernel Research

Over the past 20 years, there has been extensive research on extensible operating systems. Following the microkernel concept, which sought to componentize most kernel functionalities, there have been efforts to build more monolithic kernels that can be extended in various ways:

- **Exokernel** [16]: This was a logical extension of the microkernel concept. The base kernel provided no abstraction of physical devices, leaving this task to applications that needed the devices.
- **SPIN** [7]: This allowed modules to be loaded into the kernel while ensuring various safety properties. Modules were written in Modula-3 [35], which imposed strong type checking to prevent misbehavior outside the module's data structures. SPIN "spindles" were also subject to time constraints to prevent CPU monopolization. Spindles could register to "extend" or "specialize" kernel events, similar to how interrupts are handled.
- **SCOUT** [34]: Designed to facilitate continuous information flows (e.g., audio or video streams), SCOUT allowed CODEC stages to be composed into pipelines or graphs of appropriate components.
- **Synthetix** [38]: Aimed to allow applications to specialize the operating system to their transient needs. Specialization meant optimization with respect to "quasi-invariants": properties that hold true for a while but eventually become false. Quasi-invariants could be inferred from application behavior or specified using a declarative language [11, 43].

All these extension facilities provided some form of safety to limit the potential damage that an extension could impose on the rest of the system. For example, a multimedia application could extend the kernel to support better quality of service while limiting the extension to prevent accidental corruption of the operating system. The need for such safety is underscored by the instability of Microsoft Windows systems, often attributed to poorly written third-party device drivers running in kernel space.

In contrast, LSM imposes no restrictions on modules, which are typically written in C and have full, untyped access to the kernel's address space. The only restriction is that hooks are mostly of the "restrictive" form, making it more difficult to erroneously grant access. LSM primarily relies on programmer skill and root authority (only root can load a module). LSM can afford this weak module safety policy because LSM modules are intended to enforce security policies. Unlike generic kernel extensions, the system is entirely at the mercy of the security policy. An administrator who loads an LSM module must trust the module providers to be both well-intentioned and skilled, as bugs in a security policy engine can have catastrophic consequences. Further sanity checks on LSM modules are superfluous.

It should be noted that this aligns with the traditional view of Linux modules: loading modules into the kernel is a privileged operation, and care should be taken in writing and selecting kernel modules. LSM module developers are advised to be especially diligent, as LSM modules run with the full authority of all kernel code and are trusted to enforce security policies correctly. Third-party review of LSM modules' source code is recommended.

Finally, LSM is much less intrusive to the Linux kernel than the VFS (Virtual Filesystem) layer, which supports multiple filesystems. The VFS layer abstracts the features of most filesystems, allowing other parts of the kernel to access the filesystem without knowing its type. Anecdotally, the VFS layer is reported to be a complex structure of function pointers, making it difficult to debug. This difficulty partly explains why the Linux community prefers the LSM interface to be as minimally intrusive as possible.

#### 7.2. General Access Control Frameworks

The challenge of providing a highly general access control framework has been explored in the Generalized Framework for Access Control (GFAC) [1] and the Flask architecture [41]. These architectures have been implemented as patches for the Linux kernel by the RSBAC [37] and SELinux [29] projects. The Medusa [32] project has developed its own general access control framework [46] and implemented it in Linux. Domain and Type Enforcement (DTE) [4] provides support for configurable security policies and has also been implemented in Linux [23].

Like these prior projects, LSM aims to provide general support for access control in the Linux kernel. However, the goals for LSM differ, leading to corresponding differences in the LSM framework. Specifically, LSM emphasizes minimal impact on the base Linux kernel, separates capabilities logic, and supports security functionality as kernel modules. Additionally, since LSM aims to support a broad range of existing Linux security projects, it cannot impose a particular access control architecture like Flask or GFAC or a specific model like DTE. Instead, LSM exposes the kernel abstractions and operations to the security modules, allowing individual modules to implement their desired architecture or model. Similarly, LSM defers file labeling support to the module, introducing a new level of indirection for systems like SELinux or RSBAC, where the general access control architecture and file labeling support are encapsulated within the module rather than being directly integrated into the kernel.

### 8. Conclusions

The Linux kernel supports classical UNIX security policies and a partial implementation of the draft POSIX.1e "capabilities" standard, which is often inadequate. The combination of open-source code and broad popularity has made Linux a popular target for enhanced security projects. While many powerful security enhancements are available, they present a significant barrier to entry for users who are unable or unwilling to deploy custom kernels.

The Linux Security Modules (LSM) project aims to ease this barrier by providing a standard loadable module interface for security enhancements. We presented the motivation, design, and implementation of the LSM interface. LSM provides a rich enough interface to enable a wide variety of security modules while imposing minimal disturbance to the Linux source code and minimal performance overhead on the Linux kernel. Several robust security modules are already available for LSM.

LSM is currently implemented as a patch to the standard Linux kernel, with patches maintained for the latest versions of the 2.4 stable series and the 2.5 development series. The goal of the LSM project is for the patch to be adopted into the standard Linux kernel as part of the 2.5 development series and eventually into most Linux distributions.

### 9. Acknowledgements

This work has been supported in part by DARPA Contract N66001-00-C-8032 (Autonomix) and NSA Contract MDA904-01-C-0926 (SELinux). This work represents the views of the authors and does not necessarily represent the views of WireX, NAI, Intercode, or IBM. Thanks to all who have supported this work.

UNIX is a registered trademark of The Open Group in the United States and other countries. Linux is a trademark of Linus Torvalds. Other company, product, and service names may be trademarks or service marks of others.

### 10. Availability

[1] Marshall D. Abrams, Leonard J. LaPadula, Kenneth W. Eggers, and Ingrid M. Olson. A generalized framework for access control: An informal description. In Proceedings of the 13th National Computer Security Conference, pages 135–143, October 1990.

[2] J. Anderson. Computer Security Technology Planning Study. Report Technical Report ESD-TR-73-51, Air Force Elect. Systems Div., October 1972.

[3] Argus Systems. PitBull LX. http://www.argus-systems.com/product/white_paper/lx.

[4] L. Badger, D.F. Sterne, and et al. Practical Domain and Type Enforcement for UNIX. In Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, May 1995.

[5] Lee Badger, Daniel F. Sterne, David L. Sherman, Kenneth M. Walker, and Sheila A. Haghighat. A Domain and Type Enforcement UNIX Prototype. In Proceedings of the USENIX Security Conference, 1995.

[6] D. Baker. Fortresses built upon sand. In Proceedings of the New Security Paradigms Workshop, 1996.

[7] Brian N. Bershad, Stefan Savage, Przemysław Pardyak, Emin G¨un Sirer, Marc Fiuczynski, David Becker, Susan Eggers, and Craig Chambers. Extensibility, Safety and Performance in the SPIN Operating System. In Symposium on Operating Systems Principles (SOSP), Copper Mountain, Colorado, December 1995.

[8] M. Bishop and M. Digler. Checking for Race Conditions in File Accesses. Computing Systems, 9(2):131–152, Spring 1996. Also available at http://olympus.cs.ucdavis.edu/˜bishop/scriv/index.html.

[9] W.E. Boebert and R.Y. Kain. A Practical Alternative to Hierarchical Integrity Policies. In Proceedings of the 8th National Computer Security Conference, Gaithersburg, MD, 1985.

[10] Crispin Cowan, Steve Beattie, Calton Pu, Perry Wagle, and Virgil Gligor. SubDomain: Parsimonious Server Security. In USENIX 14th Systems Administration Conference (LISA), New Orleans, LA, December 2000.

[11] Crispin Cowan, Andrew Black, Charles Krasic, Calton Pu, Jonathan Walpole, Charles Consel, and Eugen-Nicolae Volanschi. Specialization Classes: An Object Framework for Specialization. In Proceedings of the Fifth International Workshop on Object-Orientation in Operating Systems (IWOOOS ’96), Seattle, WA, October 27-28 1996.

[12] “Solar Designer”. Non-Executable User Stack. http://www.openwall.com/linux/.

[13] Antony Edwards, Trent R. Jaeger, and Xiaolan Zhang. Verifying Authorization Hook Placement for the Linux Security Modules. Report RC22254, IBM T.J. Watson Research Center, December 2001. http://domino.watson.ibm.com/library/cyberdig.nsf/1e4115aea78b6e7c85256b3600%66f0d4/fd3bffacfd2bbd9385256b30005ec7ee?OpenDocument.

The LSM framework is maintained as a patch to the Linux kernel. The source code is freely available from http://lsm.immunix.org.

[14] Antony Edwards, Xiaolan Zhang, and Trent Jaeger. Using CQUAL for Static Analysis of Authorization Hook Placement. In USENIX Security Symposium, San Francisco, CA, August 2002.

[15] Nigel Edwards, Joubert Berger, and Tse Houng Choo. A Secure Linux Platform. In Proceedings of the 5th Annual Linux Showcase and Conference, November 2001.

[16] Dawson R. Engler, M. Frans Kaashoek, and James O’Toole Jr. Exokernel: An Operating System Architecture for Application-level Resource Management. In Symposium on Operating Systems Principles (SOSP), Copper Mountain, Colorado, December 1995.

[34] David Mosberger and Larry L. Peterson. Making Paths Explicit in the Scout Operating System. In Symposium on Operating Systems Design and Implementation (OSDI), pages 153–168, October 1996. http://www.cs.arizona.edu/scout/Papers/osdi96/.

[17] M. Abrams et al. Information Security: An Integrated Collection of Essays. IEEE Comp., 1995.

[35] Greg Nelson. System Programming in Modula-3. Prentice Hall, 1991.

[18] Tim Fraser, Lee Badger, and Mark Feldman. Hardening COTS Software with Generic Software Wrappers. In Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, May 1999.

[19] Timothy Fraser. LOMAC: Low Water-Mark Integrity Protection for COTS Environments. In Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, May 2000.

[20] Timothy Fraser. LOMAC: MAC You Can Live With. In Proceedings of the FREENIX Track, USENIX Annual Technical Conference, Boston, MA, June 2001.

[21] Virgil D. Gligor, Serban I Gavrila, and David Ferraiolo. On the Formal Definition of Separation-of-Duty Policies and their Composition. In Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, May 1998.

[36] Netfilter Core Team. The Netfilter Project: Packet Mangling for Linux 2.4, 1999. http://www.netfilter.org/.

[37] Amon Ott. The Rule Set Based Access Control (RSBAC) Linux Kernel Security Extension. In Proceedings of the 8th International Linux Kongress, November 2001.

[38] Calton Pu, Tito Autrey, Andrew Black, Charles Consel, Crispin Cowan, Jon Inouye, Lakshmi Kethana, Jonathan Walpole, and Ke Zhang. Optimistic Incremental Specialization: Streamlining a Commercial Operating System. In Symposium on Operating Systems Principles (SOSP), Copper Mountain, Colorado, December 1995.

[39] Jerome H. Saltzer and Michael D. Schroeder. The Protection of Information in Computer Systems. Proceedings of the IEEE, 63(9), November 1975.

[22] Andreas Grunbacher. Extended Attributes and Access Control Lists for Linux. World-wide web page available at http://acl.bestbits.at/, December 2001.

[40] Stephen Smalley, Timothy Fraser, and Chris Vance. Linux Security Modules: General Security Hooks for Linux. http://lsm.immunix.org/, September 2001.

[41] Ray Spencer, Stephen Smalley, Peter Loscocco, Mike Hibler, David Andersen, and Jay Lepreau. The Flask Security Architecture: System Support for Diverse Security Policies. In Proceedings of the Eighth USENIX Security Symposium, pages 123–139, August 1999.

[42] Winfried Trumper. Summary about POSIX.1e. http://wt.xpilot.org/publications/posix.1e, July 1999.

[43] Eugen N. Volanschi, Charles Consel, Gilles Muller, and Crispin Cowan. Declarative Specialization of Object-Oriented Programs. In Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications (OOPSLA’97), Atlanta, GA, October 1997.

[44] Robert N.M. Watson. TrustedBSD: Adding Trusted Operating System Features to FreeBSD. In Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference (FREENIX ’01), June 2001.

[45] WireX Communications. Linux Security Module. http://lsm.immunix.org/, April 2001.

[46] Marek Zelem and Milan Pikula. ZP Security Framework. http://medusa.fornax.sk/English/medusa-paper.ps.

[23] Serge Hallyn and Phil Kearns. Domain and Type Enforcement for Linux. In Proceedings of the 4th Annual Linux Showcase and Conference, October 2000.

[24] Jon Inouye, Ravindranath Konuru, Jonathan Walpole, and Bart Sears. The Effects of Virtually Addressed Caches on Virtual Memory Design & Performance. Operating Systems Review, 24(4):896–908, October 1992. Also published as OGI technical report CSE-92-010, ftp://cse.ogi.edu/pub/tech-reports/1992/92-010.ps.gz.

[25] SNARE. World-wide web page available at http://intersectalliance.com/projects/Snare/.

[26] Jay Lepreau, Bryan Ford, and Mike Hibler. The persistent relevance of the local operating system to global applications. In Proceedings of the ACM SIGOPS European Workshop, pages 133–140, September 1996.

[27] Linux Intrusion Detection System. World-wide web page available at http://www.lids.org.

[28] T. Linden. Operating System Structures to Support Security and Reliable Software. ACM Computing Surveys, 8(4), December 1976.

[29] Peter Loscocco and Stephen Smalley. Integrating Flexible Support for Security Policies into the Linux Operating System. In Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference (FREENIX ’01), June 2001.

[30] Peter A. Loscocco, Stephen D. Smalley, Patrick A. Muckelbauer, Ruth C. Taylor, S. Jeff Turner, and John F. Farrell. The Inevitability of Failure: The Flawed Assumption of Security in Modern Computing Environments. In Proceedings of the 21st National Information Systems Security Conference, pages 303–314, October 1998.

[31] Larry W. McVoy and Carl Staelin. lmbench: Portable Tools for Performance Analysis. In USENIX Annual Technical Conference, 1996. http://www.bitmover.com/lmbench/.

[32] Medusa. World-wide web page available at http://medusa.fornax.sk.

[33] Mindcraft. WebStone Standard Web Server Benchmark. http://www.mindcraft.com/webstone/.