### The Same Origin Policy and Its Verification

The Same-Origin Policy (SOP) [37] dictates the resources that a tab can access. For instance, a tab is allowed to load cross-domain images using an `<img>` tag but not via an `XMLHttpRequest`.

#### Challenges in Verifying SOP

Unfortunately, verifying this policy is not straightforward. Enforcing restrictions on how a resource may be used after it has been loaded (e.g., in an `<img>` tag versus as a JavaScript value) requires reasoning across abstraction boundaries. This means analyzing the complex and extensive implementation of the tab rather than treating it as a black box.

#### DOM Access and Frame-Based Protection

The SOP also restricts how JavaScript running in different frames on the same page can access the Document Object Model (DOM). We could formally reason about this aspect by making frames the basic protection domains in QUARK instead of tabs. To support this refined architecture, frames would own a rectangle of screen real estate, which they could subdivide and delegate to sub-frames. Communication between frames would be coordinated by the kernel, allowing us to formally guarantee that all frame access to the DOM conforms with the SOP.

#### Inter-Domain Cookie Isolation

We have formally proven inter-domain cookie isolation. Even this coarse guarantee prohibits a broad class of attacks, such as protecting all Google cookies from any non-Google tab. QUARK enforces restrictions on cookie access between subdomains using WebKit as unverified cookie handling code within our cookie processes. Formally proving finer-grained cookie policies in Coq would be possible and would not require significant changes to the kernel or proofs.

#### Limitations in Preventing Cookie Exfiltration

QUARK does not prevent all cookie exfiltration attacks. If a subframe can exploit the entire tab, it could steal the cookies of its top-level parent tab and leak the stolen cookies by encoding the information within the URL parameter of `GetURL` requests. This limitation arises because tabs are the principles in QUARK instead of frames. Refining QUARK so that frames themselves are the principles would address this problem.

#### Socket Security Policy

Our socket security policy prevents an important subset of cross-site request forgery (CSRF) attacks [9]. QUARK guarantees that a tab uses a `GetURL` message when requesting a resource from sites whose domain suffix doesn't match the tab's domain. Since our implementation of `GetURL` does not send cookies, the resources requested by a `GetURL` message are guaranteed to be publicly available and do not trigger any privileged actions on the server side. This prohibition prevents a large class of attacks, such as CSRF attacks against Amazon domains from non-Amazon domains. However, this policy cannot prevent CSRF attacks against sites sharing the same domain suffix with the tab, e.g., attacks from a tab on `www.ucsd.edu` against `cse.ucsd.edu`, since the tab on `www.ucsd.edu` can directly connect to `cse.ucsd.edu` using a socket and cookies on `cse.ucsd.edu` are also available to the tab.

### Compatibility Issues

QUARK enforces non-standard security policies that break compatibility with some web applications. For example, mashups do not work properly because a tab can only access cookies for its domain and subdomains. A subframe in a tab cannot properly access any page that needs user credentials identified by cookies if the subframe’s domain suffix does not match the tab’s domain. This limitation arises because tabs are the principles of QUARK, rather than subframes inside tabs. Unfortunately, tabs are too coarse-grained to properly support mashups while retaining our strong guarantees.

For the same reason, QUARK currently does not support third-party cookies. Third-party cookies have been considered a privacy-violating feature of the web, and there are even popular browser extensions to suppress them. However, many websites depend on third-party cookies for full functionality, and our current QUARK browser does not allow such cookies since they would violate our non-interference guarantees.

Finally, QUARK does not support communications like `postMessage` between tabs, as this would violate our tab non-interference guarantees.

Despite these incompatibilities, QUARK works well on various important sites such as Google Maps, Amazon, and Facebook, as they mostly comply with QUARK's security policies. Our hope is that in the future, QUARK will provide a foundation to explore these features within a formally verified setting. Specifically, adding these features will require future work in two broad directions: first, making frames the principles in QUARK instead of tabs, and second, implementing finer-grained policies to retain appropriate non-interference results in the face of these new features.

### Other Features and Future Work

There are several other features that QUARK does not currently support, such as local storage, file upload, browser cache, and browser history. However, we believe these are not fundamental limitations of our approach or QUARK's current design. Most of these features do not involve inter-tab communication. For cases where they do, one would need to refine the non-interference definition and theorems to allow for controlled flow of information.

### Lessons Learned

In this section, we discuss the lessons learned while developing QUARK and verifying its kernel in Coq. These guidelines could have substantially eased our efforts and may prove useful for future endeavors.

#### Formal Shim Verification

Our most essential technique was formal shim verification. This reduced the verification burden to proving a small browser kernel. Previous browsers like Chrome, OP, and Gazelle demonstrate the value of kernel-based architectures. OP further shows how this approach enables reasoning about a model of the browser. We take the next step and formally prove the actual browser implementation correct.

#### Modularity through Trace-Based Specification

We specified correct browser behavior in terms of traces and proved both that (1) the implementation satisfies the specification and (2) the specification implies our security properties. Splitting our verification into these two phases improved modularity by separating concerns. The first proof phase reasons using monads in Ynot to show that the trace-based specification correctly abstracts the implementation. The second proof phase only needs to reason about traces, substantially simplifying proofs.

This modularity aided us late in development when we proved address bar correctness (Theorem `dom_bar_correct` in Figure 7). Proving additional properties can be done with relatively little effort over the trace-based specification without having to reason about monads or other implementation details.

#### Implement Non-Verified Prototype First

Another effective approach was to write a non-verified version of the kernel code before verifying it. This allowed us to carefully design and debug the interfaces between components and to enable the right browsing functionality before starting the verification task.

#### Iterative Development

After failing to build and verify the browser in a single shot, we found that an iterative approach was much more effective. We started with a text-based browser, where the tab used lynx to generate a text-based version of QUARK. We then evolved this browser into a GUI-based version based on WebKit, but with no sockets or cookies. We added sockets and finally cookies. Throughout the iterations, we kept a working version of the kernel written in Python. For comparison, the Python kernel equivalent to the Coq version listed in Figure 8 is 305 lines of code.

#### Favor Ease of Reasoning

When forced to choose between adding complexity to the browser kernel or to the untrusted tab implementation, it was always better to keep the kernel as simple as possible. This helped manage the verification burden, which was the ultimate bottleneck in developing QUARK. Similarly, when faced with a choice between flexibility/extensibility of code and ease of reasoning, we found it best to aim for ease of reasoning.

### Conclusions

In this paper, we demonstrated how formal shim verification can be used to achieve strong security guarantees for a modern web browser using a mechanical proof assistant. We formally proved that our browser provides tab non-interference, cookie integrity and confidentiality, and address bar integrity and correctness. We detailed our design and verification techniques and showed that the resulting browser, QUARK, provides a modern browsing experience with performance comparable to the default WebKit browser. For future research, QUARK furnishes a framework to easily experiment with additional web policies without re-engineering an entire browser or formalizing all the details of its behavior from scratch.

### Acknowledgments

We thank Kirill Levchenko for many fruitful conversations regarding shim verification. We would also like to thank our shepherd, Anupam Datta, and the anonymous reviewers for helping us improve our paper.

### References

[1] http://gallium.inria.fr/~dargaye/mlcompcert.html.
[2] Chrome security hall of fame. http://dev.chromium.org/Home/chromium-security/hall-of-fame.
[3] Public suffix list. http://publicsuffix.org/.
[4] Pwn2own. http://en.wikipedia.org/wiki/Pwn2Own.
[5] AKHAWE, D., BARTH, A., LAMY, P. E., MITCHELL, J., AND SONG, D. Towards a formal foundation of web security. In Proceedings of CSF 2010 (July 2010), M. Backes and A. Myers, Eds., IEEE Computer Society, pp. 290–304.
[6] ANSEL, J., MARCHENKO, P., ERLINGSSON, ´U., TAYLOR, E., CHEN, B., SCHUFF, D. L., SEHR, D., BIFFLE, C., AND YEE, B. Language-independent sandboxing of just-in-time compilation and self-modifying code. In PLDI (2011), pp. 355–366.
[7] BALL, T., MAJUMDAR, R., MILLSTEIN, T., AND RAJAMANI, S. K. Automatic predicate abstraction of C programs. In Proceedings of the ACM SIGPLAN 2001 Conference on Programming Language Design and Implementation (Snowbird, Utah, June 2001).
[8] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust defenses for cross-site request forgery. In ACM Conference on Computer and Communications Security (2008), pp. 75–88.
[9] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust defenses for cross-site request forgery. In To appear at the 15th ACM Conference on Computer and Communications Security (CCS 2008) (2008).
[10] BARTH, A., JACKSON, C., REIS, C., AND THE GOOGLE CHROME TEAM. The security architecture of the Chromium browser. Tech. rep., Google, 2008.
[11] BOHANNON, A., PIERCE, B. C., SJÖBERG, V., WEIRICH, S., AND ZDANCEWIC, S. Reactive noninterference. In Proceedings of the 16th ACM conference on Computer and communications security (2009).
[12] CHEN, E. Y., BAU, J., REIS, C., BARTH, A., AND JACKSON, C. App isolation: get the security of multiple browsers with just one. In Proceedings of the 18th ACM conference on Computer and communications security (2011).
[13] CHEN, S., MESEGUER, J., SASSE, R., WANG, H. J., AND MIN WANG, Y. A systematic approach to uncover security flaws in GUI logic. In IEEE Symposium on Security and Privacy (2007).
[14] CHUGH, R., MEISTER, J. A., JHALA, R., AND LERNER, S. Staged information flow for JavaScript. In PLDI (2009).
[15] COOK, B., PODELSKI, A., AND RYBALCHENKO, A. Terminator: Beyond safety. In CAV (2006).
[16] DAS, M., LERNER, S., AND SEIGLE, M. ESP: Path-sensitive program verification in polynomial time. In PLDI (2002).
[17] GRIER, C., TANG, S., AND KING, S. T. Secure web browsing with the OP web browser. In IEEE Symposium on Security and Privacy (2008).
[18] HENZINGER, T. A., JHALA, R., MAJUMDAR, R., AND SUTRE, G. Lazy abstraction. In POPL (2002).
[19] HOWELL, J., JACKSON, C., WANG, H. J., AND FAN, X. MashupOS: operating system abstractions for client mashups. In HotOS (2007).
[20] HUANG, L.-S., WEINBERG, Z., EVANS, C., AND JACKSON, C. Protecting browsers from cross-origin CSS attacks. In ACM Conference on Computer and Communications Security (2010), pp. 619–629.
[21] JACKSON, C., AND BARTH, A. Beware of finer-grained origins. In In Web 2.0 Security and Privacy (W2SP 2008) (May 2008).
[22] JACKSON, C., BARTH, A., BORTZ, A., SHAO, W., AND BONEH, D. Protecting browsers from DNS rebinding attacks. In ACM Conference on Computer and Communications Security (2007), pp. 421–431.
[23] JANG, D., JHALA, R., LERNER, S., AND SHACHAM, H. An empirical study of privacy-violating information flows in JavaScript Web applications. In Proceedings of the ACM Conference Computer and Communications Security (CCS) (2010).
[24] JANG, D., TATLOCK, Z., AND LERNER, S. Establishing browser security guarantees through formal shim verification. Tech. rep., UC San Diego, 2012.
[25] JANG, D., VENKATARAMAN, A., SAWKA, G. M., AND SHACHAM, H. Analyzing the cross-domain policies of Flash applications. In In Web 2.0 Security and Privacy (W2SP 2011) (May 2011).
[26] JIM, T., SWAMY, N., AND HICKS, M. Defeating script injection attacks with browser-enforced embedded policies. In WWW (2007), pp. 601–610.
[27] KLEIN, G., ELPHINSTONE, K., HEISER, G., ANDRONICK, J., COCK, D., DERRIN, P., ELKADUWE, D., ENGELHARDT, K., KOLANSKI, R., NORRISH, M., SEWELL, T., TUCH, H., AND WINWOOD, S. seL4: formal verification of an OS kernel. In SOSP (2009).
[28] LEROY, X. Formal certification of a compiler back-end, or: programming a compiler with a proof assistant. In PLDI (2006).
[29] MALECHA, G., MORRISETT, G., SHINNAR, A., AND WISNESKY, R. Toward a verified relational database management system. In POPL (2010).
[30] MALECHA, G., MORRISETT, G., AND WISNESKY, R. Trace-based verification of imperative programs with I/O. J. Symb. Comput. 46 (February 2011), 95–118.
[31] MICKENS, J., AND DHAWAN, M. Atlantis: robust, extensible execution environments for web applications. In SOSP (2011), pp. 217–231.
[32] MORRISETT, G., TAN, G., TASSAROTTI, J., TRISTAN, J.-B., AND GAN, E. Rocksalt: Better, faster, stronger sfi for the x86. In PLDI (2012).
[33] NANEVSKI, A., MORRISETT, G., AND BIRKEDAL, L. Polymorphism and separation in Hoare type theory. In ICFP (2006).
[34] NANEVSKI, A., MORRISETT, G., SHINNAR, A., GOVEREAU, P., AND BIRKEDAL, L. Ynot: Dependent types for imperative programs. In ICFP (2008).
[35] PROVOS, N., FRIEDL, M., AND HONEYMAN, P. Preventing privilege escalation. In Proceedings of the 12th conference on USENIX Security Symposium - Volume 12 (2003), USENIX Association.
[36] RATANAWORABHAN, P., LIVSHITS, V. B., AND ZORN, B. G. Nozzle: A defense against heap-spraying code injection attacks. In USENIX Security Symposium (2009), pp. 169–186.
[37] RUDERMAN, J. The same origin policy, 2001. http://www.mozilla.org/projects/security/components/same-origin.html.
[38] SAXENA, P., AKHAWE, D., HANNA, S., MAO, F., MCCAMANT, S., AND SONG, D. A symbolic execution framework for JavaScript. In IEEE Symposium on Security and Privacy (2010), pp. 513–528.
[39] SINGH, K., MOSHCHUK, A., WANG, H. J., AND LEE, W. On the incoherencies in web browser access control policies. In IEEE Symposium on Security and Privacy (2010), pp. 463–478.
[40] STAMM, S., STERNE, B., AND MARKHAM, G. Reining in the web with content security policy. In Proceedings of the 19th international conference on World wide web (2010), WWW '10, pp. 921–930.
[41] TANG, S., MAI, H., AND KING, S. T. Trust and protection in the Illinois Browser Operating System. In OSDI (2010), pp. 17–32.
[42] WANG, H. J., GRIER, C., MOSHCHUK, A., KING, S. T., CHOUDHURY, P., AND VENTER, H. The multi-principal OS construction of the Gazelle web browser. Tech. Rep. MSR-TR-2009-16, MSR, 2009.
[43] YANG, X., CHEN, Y., EIDE, E., AND REGEHR, J. Finding and understanding bugs in C compilers. In PLDI (2011).
[44] YU, D., CHANDER, A., ISLAM, N., AND SERIKOV, I. JavaScript instrumentation for browser security. In POPL (2007), pp. 237–249.