### Potential for Mimicry Attacks
In theory, adversaries could launch mimicry attacks by embedding malicious code into seemingly benign graphs to evade our detection mechanism. This represents an intriguing research area that warrants serious consideration. However, evading detection based on high-level program semantics is non-trivial, and automating such evasion attacks is not straightforward. In contrast, existing low-level transformation attacks can be easily automated to generate numerous malware variants, which can bypass traditional antivirus (AV) scanners. DroidSIFT effectively counters such evasion attempts.

### Related Work
This section discusses prior work related to Android malware classification, detection, and graph-based program analysis.

#### Android Malware Classification
Many previous efforts have focused on automatically classifying Android malware using machine learning techniques. For instance, H. Peng et al. [27] proposed a permission-based classification approach and introduced probabilistic generative models to rank risks for Android apps. Juxtapp [19] used feature hashing on opcode sequences to detect malicious code reuse. DroidAPIMiner [5] extracted features at the API level and provided lightweight classifiers to defend against malware installations. DREBIN [6] took a hybrid approach, considering both Android permissions and sensitive APIs as malware features. It performed broad static analysis to extract feature sets from manifest files and bytecode programs, embedding these into a joint vector space. While these approaches are effective and computationally efficient, they rely on external symptoms and do not provide a complete interpretation of app behaviors. In contrast, DroidSIFT generates weighted contextual API dependency graphs to reflect essential behaviors more robustly.

#### Android Malware Detection and Program Analysis
Previous studies have focused on large-scale and lightweight detection of malicious or dangerous Android apps. DroidRanger [37] proposed permission-based footprinting and heuristics-based schemes to detect new samples of known malware families and identify behaviors of unknown malicious families. RiskRanker [18] developed an automated system to uncover dangerous app behaviors, such as root exploits, and assess potential security risks. Kirin [15] proposed a security service to certify apps based on predefined security specifications. WHYPER [26] leveraged Natural Language Processing to automate risk assessment by revealing discrepancies between application descriptions and their true functionalities. Other efforts, such as TaintDroid [13], DroidScope [32], and VetDroid [35], conducted dynamic taint analysis to detect suspicious behaviors during runtime. Ded [14], CHEX [23], AppSealer [33], Capper [34], PEG [10], and FlowDroid [7] used static dataflow analysis to identify dangerous code in Android apps. The effectiveness of these approaches depends on the quality of human-crafted detection patterns specific to certain dangerous or vulnerable behaviors.

#### Graph-Based Code Analysis
Graph-based code analysis has been well-studied for traditional client-server programs. Hu et al. [20] proposed two-level malware indexing to address the scalability of querying malware function-call graphs in databases. Kolbitsch et al. [21] performed dynamic analysis to extract program slices responsible for malicious information flow between system calls and then conducted model checking by matching the generated slices against unknown programs. Fredrikson et al. [16] presented an automated technique for extracting optimally discriminative specifications that uniquely identify a class of program, such as a malware family. Yamaguchi et al. [31] introduced a novel representation of source code, called a "code property graph," which merges concepts of classic program analysis (abstract syntax trees, control flow graphs, and program dependence graphs) into a joint data structure. Such a graph representation enables elegant modeling of common vulnerabilities. HI-CFG [9] inferred a hybrid information and control-flow graph from a binary instruction trace, enabling attack polymorphism. Compared to these approaches, the novelty of our work lies in the fact that our dependency graph generation needs to cope with Android programming paradigms. Gascon et al. [17] also extended graph-based malware analysis to the Android environment, but their detection was based on the structural similarity of call graphs, while DroidSIFT relies on more robust, high-level (API) program semantics.

### Conclusion
In this paper, we propose a novel, semantic-based approach for classifying Android malware via dependency graphs. To combat transformation attacks, we extract a weighted contextual API dependency graph to construct feature sets. To fight against malware variants and zero-day malware, we introduce graph similarity metrics to uncover homogeneous application behaviors while tolerating minor implementation differences. We implemented a prototype system, DroidSIFT, in 23,000 lines of Java code. Our evaluation using 2,200 malware samples and 13,500 benign samples shows that our signature detection correctly labels 93% of malware instances, and our anomaly detector detects zero-day malware with a relatively low false negative rate (2%) and false positive rate (5.15%).

### Acknowledgment
We would like to thank anonymous reviewers for their comments. This research was supported in part by NSF Grants #1018217 and #1054605, and McAfee Inc. Any opinions, findings, and conclusions made in this material are those of the authors and do not necessarily reflect the views of the funding agencies.

### References
[1] Android Malware Genome Project. http://www.malgenomeproject.org/.
[2] Soot: a Java Optimization Framework. http://www.sable.mcgill.ca/soot/.
[3] McAfee Labs Threats Report Fourth Quarter 2013. http://www.mcafee.com/us/resources/reports/rp-quarterly-threat-q4-2013.pdf, 2013.
[4] Number of Android Applications. http://www.appbrain.com/stats/number-of-android-apps, 2014.
[5] Y. Aafer, W. Du, and H. Yin. DroidAPIMiner: Mining API-Level Features for Robust Malware Detection in Android. In Proceedings of the 9th International Conference on Security and Privacy in Communication Networks (SecureComm’13), September 2013.
[6] D. Arp, M. Spreitzenbarth, M. Hübner, H. Gascon, and K. Rieck. Drebin: Efficient and Explainable Detection of Android Malware in Your Pocket. In Proceedings of the 21st Annual Network and Distributed System Security Symposium (NDSS’14), February 2014.
[7] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. le Traon, D. Octeau, and P. McDaniel. FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’14), June 2014.
[8] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie. PScout: Analyzing the Android Permission Specification. In Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS’12), October 2012.
[9] D. Caselden, A. Bazhanyuk, M. Payer, S. McCamant, and D. Song. HI-CFG: Construction by Binary Analysis, and Application to Attack Polymorphism. In Proceedings of the 18th European Symposium on Research in Computer Security (ESORICS’13), September 2013.
[10] K. Z. Chen, N. Johnson, V. D’Silva, S. Dai, K. MacNamara, T. Magrino, E. X. Wu, M. Rinard, and D. Song. Contextual Policy Enforcement in Android Applications with Permission Event Graphs. In Proceedings of the 20th Annual Network and Distributed System Security Symposium (NDSS’13), February 2013.
[11] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and R. E. Bryant. Semantics-Aware Malware Detection. In Proceedings of the 2005 IEEE Symposium on Security and Privacy (Oakland’05), May 2005.
[12] H. Dharmdasani. Android.HeHe: Malware Now Disconnects Phone Calls. http://www.fireeye.com/blog/technical/2014/01/android-hehe-malware-now-disconnects-phone-calls.html, 2014.
[13] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. In Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation (OSDI’10), October 2010.
[14] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A Study of Android Application Security. In Proceedings of the 20th Usenix Security Symposium, August 2011.
[15] W. Enck, M. Ongtang, and P. McDaniel. On Lightweight Mobile Phone Application Certification. In Proceedings of the 16th ACM Conference on Computer and Communications Security (CCS’09), November 2009.
[16] M. Fredrikson, S. Jha, M. Christodorescu, R. Sailer, and X. Yan. Synthesizing Near-Optimal Malware Specifications from Suspicious Behaviors. In Proceedings of the 2010 IEEE Symposium on Security and Privacy (Oakland’10), May 2010.
[17] H. Gascon, F. Yamaguchi, D. Arp, and K. Rieck. Structural Detection of Android Malware Using Embedded Call Graphs. In Proceedings of the 2013 ACM Workshop on Artificial Intelligence and Security (AISec’13), November 2013.
[18] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang. RiskRanker: Scalable and Accurate Zero-day Android Malware Detection. In Proceedings of the 10th International Conference on Mobile Systems, Applications and Services (MobiSys’12), June 2012.
[19] S. Hanna, L. Huang, E. Wu, S. Li, C. Chen, and D. Song. Juxtapp: A Scalable System for Detecting Code Reuse Among Android Applications. In Proceedings of the 9th International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA’12), July 2012.
[20] X. Hu, T.-c. Chiueh, and K. G. Shin. Large-scale Malware Indexing Using Function-call Graphs. In Proceedings of the 16th ACM Conference on Computer and Communications Security (CCS’09), November 2009.
[21] C. Kolbitsch, P. M. Comparetti, C. Kruegel, E. Kirda, X. Zhou, and X. Wang. Effective and Efficient Malware Detection at the End Host. In Proceedings of the 18th Conference on USENIX Security Symposium, August 2009.
[22] H. Lockheimer. Android and Security. http://googlemobile.blogspot.com/2012/02/android-and-security.html, 2012.
[23] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. CHEX: Statically Vetting Android Apps for Component Hijacking Vulnerabilities. In Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS’12), October 2012.
[24] J. Oberheide and C. Miller. Dissecting the Android Bouncer. SummerCon, 2012.
[25] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein, and Y. L. Traon. Effective Inter-Component Communication Mapping in Android with Epicc: An Essential Step Towards Holistic Security Analysis. In Proceedings of the 22nd USENIX Security Symposium, August 2013.
[26] R. Pandita, X. Xiao, W. Yang, W. Enck, and T. Xie. WHYPER: Towards Automating Risk Assessment of Mobile Applications. In Proceedings of the 22nd USENIX Conference on Security, August 2013.
[27] H. Peng, C. Gates, B. Sarma, N. Li, Y. Qi, R. Potharaju, C. Nita-Rotaru, and I. Molloy. Using Probabilistic Generative Models for Ranking Risks of Android Apps. In Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS’12), October 2012.
[28] V. Rastogi, Y. Chen, and X. Jiang. DroidChameleon: Evaluating Android Anti-malware against Transformation Attacks. In Proceedings of the 8th ACM Symposium on InformAtion, Computer and Communications Security (ASIACCS’13), May 2013.
[29] K. Riesen, S. Emmenegger, and H. Bunke. A Novel Software Toolkit for Graph Edit Distance Computation. In Proceedings of the 9th International Workshop on Graph Based Representations in Pattern Recognition, May 2013.
[30] S. J. Russell and P. Norvig. Artificial Intelligence: A Modern Approach. 2003.
[31] F. Yamaguchi, N. Golde, D. Arp, and K. Rieck. Modeling and Discovering Vulnerabilities with Code Property Graphs. In Proceedings of the 35th IEEE Symposium on Security and Privacy (Oakland’14), May 2014.
[32] L.-K. Yan and H. Yin. DroidScope: Seamlessly Reconstructing OS and Dalvik Semantic Views for Dynamic Android Malware Analysis. In Proceedings of the 21st USENIX Security Symposium, August 2012.
[33] M. Zhang and H. Yin. AppSealer: Automatic Generation of Vulnerability-Specific Patches for Preventing Component Hijacking Attacks in Android Applications. In Proceedings of the 21st Annual Network and Distributed System Security Symposium (NDSS’14), San Diego, CA, February 2014.
[34] M. Zhang and H. Yin. Efficient, Context-aware Privacy Leakage Confinement for Android Applications Without Firmware Modding. In Proceedings of the 9th ACM Symposium on Information, Computer and Communications Security (ASIACCS’14), 2014.
[35] Y. Zhang, M. Yang, B. Xu, Z. Yang, G. Gu, P. Ning, X. S. Wang, and B. Zang. Vetting Undesirable Behaviors in Android Apps with Permission Use Analysis. In Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS’13), November 2013.
[36] Y. Zhou and X. Jiang. Dissecting Android Malware: Characterization and Evolution. In Proceedings of the 33rd IEEE Symposium on Security and Privacy (Oakland’12), May 2012.
[37] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, You, Get Off of My Market: Detecting Malicious Apps in Official and Alternative Android Markets. In Proceedings of the 19th Annual Network and Distributed System Security Symposium (NDSS’12), February 2012.