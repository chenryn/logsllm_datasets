### 4.6.2 Real-World Applications

We selected three real-world applications from open-source GitHub projects: Long.js, Hyphenopoly.js, and FFmpeg. We conducted six experiments: three for Long.js, two for Hyphenopoly.js, and one for FFmpeg. Table 10 summarizes the experiment inputs, the sum of lines of code (LOCs) in HTML, JavaScript, and WebAssembly Text (WAT) files, the execution times of WebAssembly and JavaScript, and the ratio of WebAssembly to JavaScript execution times.

#### Long.js
We tested three operations using Long.js—multiplication, division, and remainder—in both WebAssembly and JavaScript. As shown in rows 1-3 of Table 10, WebAssembly outperformed JavaScript in all three experiments. Our manual inspection revealed that the JavaScript versions executed more instructions than the WebAssembly versions due to the different mechanisms for implementing 64-bit operations. The detailed count of arithmetic operations is provided in Appendix D.

#### Hyphenopoly.js
We evaluated Hyphenopoly.js in both WebAssembly and JavaScript using two input languages: English (en-us) and French (fr). Rows 4-5 of Table 10 indicate that WebAssembly and JavaScript have similar execution times, with WebAssembly being marginally faster. Our analysis shows that a significant portion of the time is spent on input and output operations, which are not optimized in WebAssembly.

#### FFmpeg
We measured the performance of FFmpeg in WebAssembly and JavaScript by converting a 296 MB MP4 video file to AVI. Row 6 of Table 10 demonstrates that WebAssembly executes significantly faster than JavaScript. This is because the WebAssembly implementation uses multiple WebWorkers to parallelize the conversion process, whereas the JavaScript implementation does not employ parallelization.

### 5. Limitations and Future Work

#### Threats to Validity
Our study is subject to several potential threats, including the representativeness of the chosen benchmarks and the generalizability of the results. According to [16, 70], WebAssembly was designed for a variety of applications, such as compression, cryptographic libraries, games, image processing, and numeric computation. In our experiments, we selected 41 widely used C benchmark programs that cover numeric computation, image processing, data compression, and cryptographic algorithms. While these programs represent common WebAssembly use cases, we did not include large standalone programs like games due to their complex source code and unsupported features that are incompatible with the Cheerp compiler. In the future, we plan to address these incompatibilities by modifying the compiler or refactoring the source programs.

Another threat concerns the generalization of performance results. The benchmarks were tested on three mainstream browsers: Google Chrome, Mozilla Firefox, and Microsoft Edge. These browsers are frequently updated, so the results may not reflect the current performance. To mitigate this, we ensured that the browser versions used were stable and released around the same time (December 2019).

#### Future Work
Based on our empirical findings, we propose several future directions:
1. **JIT Optimization**: We observed that JavaScript performance was significantly affected by JIT optimization, while WebAssembly showed no substantial improvement. This suggests that more effort should be directed towards optimizing WebAssembly code execution.
2. **Compiler Optimizations**: Our experiments revealed that certain compiler optimizations, such as -Ofast, did not perform as expected for WebAssembly. For example, -Ofast, which is intended to create the fastest target code, was slower than -Oz and -O1. This highlights the need for further research into designing new compiler optimization techniques for WebAssembly.

### 6. Related Work

#### WebAssembly Performance Measurement and Studies
Our work is closely related to previous studies on WebAssembly performance [43, 46, 48, 70, 77, 81]. For instance, [43] compared the performance of WebAssembly, asm.js, and native C implementations, while [48] focused on the performance comparison between WebAssembly and C programs. [81] studied WebAssembly performance for sparse matrix-vector multiplication, and [70] analyzed the prevalence of WebAssembly in the Alexa Top 1 Million Websites. Hilbig et al. [46] conducted an empirical study of 8,461 real-world WebAssembly binaries, analyzing their security properties, source languages, and use cases. To the best of our knowledge, our work is the first comprehensive study comparing the performance of both generic JavaScript and WebAssembly across diverse settings.

#### WebAssembly Analysis Tools, Protections, and Extensions
Prior works on WebAssembly analysis tools, protections, and extensions [28, 49, 53, 54, 71, 72, 78–80, 91] are also relevant. Wasabi [54] is a general-purpose framework for dynamically analyzing WebAssembly, and Lehmann et al. [53] examined how vulnerabilities in memory-unsafe source languages can be exploited in WebAssembly binaries. Swivel [71] introduced a new compiler framework to harden WebAssembly against Spectre attacks, and CT-wasm [91] proposed a type-driven, strict extension to WebAssembly for secure cryptographic algorithm implementations. MS-Wasm [28] extended WebAssembly to capture low-level C/C++ memory semantics at compile time.

#### Web Performance Measurement
Several prior works have focused on testing web page performance and analyzing JavaScript, PHP, and other web technologies [42, 55, 76, 82]. Additionally, our work is relevant to studies on the performance of operating systems, mobile applications, and virtual machines [3, 18, 19, 26, 45, 52, 56, 57, 60, 83, 92]. The closest previous work is [45], which compares WebAssembly and JavaScript on desktop and mobile devices. However, our study covers a broader range of applications and inputs, and tests on newer browser versions. Our results show that WebAssembly performs better on desktop Firefox, mobile Chrome, and mobile Edge, differing from the findings in [45].

#### Compiler Optimization Studies
[6] conducted a case study using the Intel Core 2 Duo processor to analyze the compiler optimizations required for high performance on modern processors. [51] used machine learning techniques to predict the best optimization flags for efficient program creation, and [13] researched the impact of compiler optimizations on high-level synthesis. In contrast, our study investigates the impact of compiler optimizations on the performance of compiled WebAssembly programs.

### 7. Conclusion
This paper presents the first systematic empirical study to understand the performance of WebAssembly applications alongside JavaScript. We performed measurements on various types of programs, including compiler-generated, manually-written, and real-world applications, under diverse settings. Our findings provide valuable insights for WebAssembly tooling developers to optimize performance. The data from our study is publicly available [2].

### 8. Acknowledgments
We thank the anonymous reviewers and our shepherd, Balakrishnan Chandrasekaran, for their constructive feedback. We greatly appreciate the time and effort spent by our shepherd and other reviewers in helping us improve our paper.

### References
[1] IEEE Standard for Floating-Point Arithmetic, 2019.
[2] Project Website. BenchmarkingWebAssembly. https://benchmarkingwasm.github.io/
[3] Aldeida Aleti, Catia Trubiani, André van Hoorn, and Pooyan Jamshidi. 2018. An efficient method for uncertainty propagation in robust software performance estimation. Journal of Systems and Software 138 (2018), 222–235.
[4] Android. 2020. Android Debug Bridge (adb). https://developer.android.com/studio/command-line/adb
[5] asm.js. 2020. asm.js - an extraordinarily optimizable, low-level subset of JavaScript. http://asmjs.org/
[6] Aart JC Bik, David L Kreitzer, and Xinmin Tian. 2008. A case study on compiler optimizations for the Intel® Core TM 2 Duo Processor. International Journal of Parallel Programming 36, 6 (2008), 571–591.
[7] Stack Overflow Contributor Blindman67. 2018. Why is WebAssembly function almost 300 times slower than the same JS function? https://stackoverflow.com/questions/48173979/why-is-webassembly-function-almost-300-time-slower-than-same-js-function
[8] Caligatio. 2021. Caligatio/jsSHA. https://github.com/Caligatio/jsSHA
[9] Winston Chen. 2018. Performance Testing Web Assembly vs JavaScript. https://medium.com/samsung-internet-dev/performance-testing-web-assembly-vs-javascript-e07506fd5875
[10] Clang. 2020. LLVM’s Analysis and Transform Passes. https://llvm.org/docs/Passes.html#argpromotion-promote-by-reference-arguments-to-scalars
[11] Lin Clark. 2018. Calls between JavaScript and WebAssembly are finally fast. https://hacks.mozilla.org/2018/10/calls-between-javascript-and-webassembly-are-finally-fast-%F0%9F%8E%89/
[12] Stack Overflow Contributor ColinE. 2017. Why is my WebAssembly function slower than the JavaScript equivalent? https://stackoverflow.com/questions/46331830/why-is-my-webassembly-function-slower-than-the-javascript-equivalent/46500236#46500236
[13] Jason Cong, Bin Liu, Raghu Prabhakar, and Peng Zhang. 2012. A study on the impact of compiler optimizations on high-level synthesis. In International Workshop on Languages and Compilers for Parallel Computing. Springer, 143–157.
[14] Emscripten Contributors. 2015. File System Overview — Emscripten 1.39.17 documentation. https://emscripten.org/docs/porting/files/file_systems_overview.html#file-system-overview
[15] Emscripten Contributors. 2020. Emscripten 1.39.4 documentation. https://emscripten.org/
[16] WebAssembly Contributors. 2020. WebAssembly Use Cases. https://webassembly.org/docs/use-cases/
[17] Netscape Communications Corporation and Inc. Sun Microsystems. 1995. Netscape and Sun Announce JavaScript, the Open, Cross-Platform Object Scripting Language for Enterprise Networks and the Internet. https://web.archive.org/web/20070916144913/http://wp.netscape.com/newsref/pr/newsrelease67.html
[18] Luis Cruz and Rui Abreu. 2017. Performance-based guidelines for energy-efficient mobile applications. In 2017 IEEE/ACM 4th International Conference on Mobile Software Engineering and Systems (MOBILESoft). IEEE, 46–57.
[19] Mariana Cunha and Nuno Laranjeiro. 2018. Assessing Containerized REST Services Performance in the Presence of Operator Faults. In 2018 14th European Dependable Computing Conference (EDCC). IEEE, 95–100.
[20] Damianociarla. 2021. Damianociarla/node-ffmpeg. https://github.com/damianociarla/node-ffmpeg
[21] Damianociarla. 2021. Damianociarla/node-ffmpeg/lib/ffmpeg.js. https://github.com/damianociarla/node-ffmpeg/blob/master/lib/ffmpeg.js
[22] DcodeIO. 2021. DcodeIO/Long.js. https://github.com/dcodeIO/Long.js/
[23] DcodeIO. 2021. Long.js Avoiding Overflow. https://github.com/dcodeIO/long.js/
[24] DcodeIO. 2021. Long.js JavaScript Source Code. https://github.com/dcodeIO/long.js/blob/master/src/long.js#L56-L59
[25] DcodeIO. 2021. Long.js WebAssembly Source Code. https://github.com/dcodeIO/long.js/blob/master/src/wasm.wat
[26] Giovanni Denaro, Andrea Polini, and Wolfgang Emmerich. 2004. Early performance testing of distributed software applications. In Proceedings of the 4th international workshop on Software and performance. 94–103.
[27] Mozilla developers. 2021. Bugzilla – Bug 37449 – llvm performs less inlining in -O3 than in -O2. https://bugs.llvm.org/show_bug.cgi?id=37449
[28] Craig Disselkoen, John Renner, Conrad Watt, Tal Garfinkel, Amit Levy, and Deian Stefan. 2019. Position Paper: Progressive Memory Safety for WebAssembly. In Proceedings of the 8th International Workshop on Hardware and Architectural Support for Security and Privacy (Phoenix, AZ, USA) (HASP ’19). Association for Computing Machinery, New York, NY, USA, Article 4, 8 pages. https://doi.org/10.1145/3337167.3337171
[29] MDN Web Docs. 2020. Compiling an Existing C Module to WebAssembly. https://developer.mozilla.org/en-US/docs/WebAssembly/existing_C_to_wasm
[30] Haas et al. 2017. Bringing the web up to speed with WebAssembly. In Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation. 185–200.
[31] Martín Abadi et al. 2015. TensorFlow: Large-Scale Machine Learning on Heterogeneous Systems. https://www.tensorflow.org/
[32] FFmpeg. 2021. FFmpeg. https://www.ffmpeg.org/
[33] ffmpegwasm. 2021. ffmpegwasm/ffmpeg.wasm. https://github.com/ffmpegwasm/ffmpeg.wasm
[34] ffmpegwasm. 2021. ffmpegwasm/ffmpeg.wasm/dist/ffmpeg.min.js. https://unpkg.com/@ffmpeg/ffmpeg@0.10.0/dist/ffmpeg.min.js
[35] Figma Inc. 2021. The collaborative interface design tool. https://www.figma.com/
[36] Free Software Foundation (FSF). 2020. GCC, the GNU Compiler Collection. https://gcc.gnu.org/
[37] Google. 2020. Google Chrome - Download the Fast, Secure Browser from Google. https://www.google.com/chrome/
[38] Google. 2020. V8 JavaScript Engine. https://v8.dev/
[39] WebAssembly Group. 2020. WebAssembly/design. https://github.com/WebAssembly/design/blob/master/FutureFeatures.md
[40] WebAssembly Community Group. 2020. Use Cases - WebAssembly. https://webassembly.org/docs/use-cases/
[41] Jakob Gruber. 2021. JIT-less V8. https://v8.dev/blog/jitless
[42] Antonio Guerriero, Raffaela Mirandola, Roberto Pietrantuono, and Stefano Russo. 2019. A Hybrid Framework for Web Services Reliability and Performance Assessment. In 2019 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW). IEEE, 185–192.
[43] Andreas Haas, Andreas Rossberg, Derek L. Schuff, Ben L. Titzer, Michael Holman, Dan Gohman, Luke Wagner, Alon Zakai, and JF Bastien. 2017. Bringing the Web up to Speed with WebAssembly. SIGPLAN Not. 52, 6 (June 2017), 185–200.
[44] Yuko Hara, Hiroyuki Tomiyama, Shinya Honda, and Hiroaki Takada. 2009. Proposal and quantitative analysis of the CHStone benchmark program suite for practical C-based high-level synthesis. Journal of Information Processing 17 (2009), 242–254.
[45] David Herrera, Hangfen Chen, Erick Lavoie, and Laurie Hendren. 2018. WebAssembly and JavaScript Challenge: Numerical program performance using modern browser technologies and devices. University of McGill, Montreal: QC, Technical report SABLE-TR-2018-2 (2018).
[46] Aaron Hilbig, Daniel Lehmann, and Michael Pradel. 2021. An Empirical Study of Real-World WebAssembly Binaries: Security, Languages, Use Cases. In Proceedings of the Web Conference 2021 (Ljubljana, Slovenia) (WWW ’21). Association for Computing Machinery, New York, NY, USA, 2696–2708. https://doi.org/10.1145/3442381.3450138
[47] Raymond Hill. 2019. gorhill/ublock. https://github.com/gorhill/uBlock
[48] Abhinav Jangda, Bobby Powers, Emery D Berger, and Arjun Guha. 2019. Not so fast: analyzing the performance of WebAssembly vs. native code. In 2019 {USENIX} Annual Technical Conference ({USENIX}{ATC} 19). 107–120.
[49] Evan Johnson, David Thien, Yousef Alhessi, Shravan Narayan, Fraser Brown, Sorin Lerner, Tyler McMullen, Stefan Savage, and Deian Stefan. 2021. Trust, but verify: SFI safety for native-compiled Wasm. In NDSS. Internet Society.
[50] Josdejong. 2021. Josdejong/mathjs. https://github.com/josdejong/mathjs
[51] Yuriy Kashnikov, Jean Christophe Beyler, and William Jalby. 2012. Compiler optimizations: Machine learning versus o3. In International Workshop on Languages and Compilers for Parallel Computing. Springer, 32–45.
[52] Heejin Kim, Byoungju Choi, and W Eric Wong. 2009. Performance testing of mobile applications at the unit test level. In 2009 Third IEEE International Conference on Secure Software Integration and Reliability Improvement. IEEE, 171–180.
[53] Daniel Lehmann, Johannes Kinder, and Michael Pradel. 2020. Everything Old is New Again: Binary Security of WebAssembly. In 29th USENIX Security Symposium (USENIX Security 20). USENIX Association, 217–234. https://www.usenix.org/conference/usenixsecurity20/presentation/lehmann
[54] Daniel Lehmann and Michael Pradel. 2018. Wasabi: A Framework for Dynamically Analyzing WebAssembly. CoRR abs/1808.10652 (2018). arXiv:1808.10652 http://arxiv.org/abs/1808.10652