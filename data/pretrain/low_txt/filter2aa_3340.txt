# The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.

## The Wide World of WAFs
**Speaker:** Ben Feinstein, CISSP GCFA  
**Organization:** SecureWorks Counter Threat Unit™  
**Event:** DEFCON 16  
**Date:** August 8, 2008

### Overview
- **Web Application Firewalls (WAFs)**
- **PCI Data Security Standard Requirement 6.6**
- **Why should you care?**
- **ModSecurity Concepts and Core Rules**
- **ModSecurity WAF Live Demos**
  - Reverse Proxy
  - Embedded
  - Content Injection in Response to Attack

### What’s In This Talk?
- Introduction to Web Application Firewalls (WAFs)
- ModSecurity: Basics and Features
- PCI DSS and Its Impact on WAF Adoption
- Key Concepts and Transformations in ModSecurity
- Deployment Scenarios and Live Demos
- Limitations and Future Trends in WAFs

### Web Application Firewalls (WAFs): The Basics
- **Definition:** A firewall that operates at the web application layer.
- **Form Factor:** Can be implemented as hardware or software.
- **Protocol Support:** Fluent in HTTP, HTTPS, XML, SOAP, XML-RPC, and WS-*.
- **Functionality:**
  - Normalizes and de-obfuscates traffic.
  - Detects and blocks attacks.
  - Rewrites and modifies requests and responses.

### ModSecurity: The Basics
- **Apache Module:** Dynamically loadable module for Apache.
- **Licensing:**
  - Community Edition: GPLv2
  - Commercial License
- **Creator:** Ivan Ristic
- **Commercialization:** Breach Security
- **Core Rules:** Released under GPLv2

### Why Should You Care?
- **PCI Compliance:** Driving the adoption of WAFs and web application vulnerability scanning.
- **Pentesters (QSAs):** Familiarity with WAFs is essential for evaluating and subverting them.
- **IT Security:** Deploying WAFs due to PCI requirements.
- **Blackhats:** Subverting WAFs for fun and profit.

### Meet the Payment Card Industry: Terminology
- **Acronyms:**
  - PCI: Payment Card Industry
  - PCI DSS: PCI Data Security Standard
  - PEDs: PIN Entry Devices
  - PA-DSS: Payment Application Data Security Standard
  - QSAs: Qualified Security Assessors
  - ASVs: Approved Scanning Vendors

### PCI Data Security Standard v1.1: The Basics
- **Key Requirements:**
  - Build and maintain a secure network.
  - Protect cardholder data.
  - Maintain a vulnerability management program.
  - Implement strong access control measures.
  - Regularly monitor and test networks.
  - Maintain an information security policy.

### PCI DSS Application / System Security: Requirement 6
- **R6.6:** Ensure that all web-facing applications are protected against known attacks by:
  - Reviewing custom application code for common vulnerabilities.
  - Installing an application layer firewall in front of web-facing applications.
- **Note:** This method was considered a best practice until June 30, 2008, after which it became a requirement.

### Implications of PCI DSS
- **Legal Liability:** Reassignment of legal liability.
- **Budget Justification:** Compliance rationale for larger IT security budgets.
- **Market Dynamics:** Potential race to the bottom for ASVs, driven by cost and quality considerations.

### ModSecurity Concepts
- **Virtual Patching / Just-In-Time Patching:**
  - Positive Security Model: Input Validation Envelope.
  - Negative Security Model: Enumerate the bad stuff.
  - Real-world challenges in achieving the "positive input validation envelope."

### More ModSecurity Concepts: Processing Phases
- **Phases:**
  - Request Headers
  - Request Body
  - Response Headers
  - Response Body
  - Logging / Action

### Transformations in ModSecurity
- **Transformations:**
  - Nested / Serial Execution
  - Replace Comments (e.g., SQLi)
  - URL Encode / Decode
  - Hex Encode / Decode
  - JavaScript Decode
  - HTML Entity Decode
  - Uppercase / Lowercase
  - MD5 / SHA1
  - Normalize Paths

### ModSecurity Core Rules
- **Protection Mechanisms:**
  - HTTP Protocol Protection (RFCs and defined policies)
  - Common Web Attack Protections (XSS, SQLi, CSRF, HTTP Response Splitting)
  - Automation Detection (bots, web crawlers, web scanners)
  - Trojan Protection
  - Server Error Hiding / DLP (Data Loss Prevention)

### ModSecurity Rule Language Keywords
- **Request Keywords:**
  - REQUEST_METHOD
  - REQUEST_URI
  - REQUEST_FILENAME
  - QUERY_STRING
  - REQUEST_HEADERS
  - REQUEST_BODY
- **Response Keywords:**
  - RESPONSE_STATUS
  - RESPONSE_BODY
  - RESPONSE_HEADERS
  - RESPONSE_CONTENT_TYPE
  - RESPONSE_CONTENT_LENGTH

### ModSecurity v2.5 Highlights
- **Content Injection:**
  - "prepend" and "append" directives
  - Example: Embedding Billy Hoffman's JS payloads in response to attacks.
- **Aho-Corasick Pattern Matching Algorithm:**
  - Improved performance for large sets of patterns.
- **Cached Transformations:**
  - GeoIP Lookup: Use as matching criteria in rules.

### More ModSecurity v2.5 Highlights
- **Credit Card Verification:**
  - @verifyCC rule operator with Luhn checksum algorithm.
- **PDF Universal XSS Protection:**
  - One-time use URI for PDFs to redirect visitors and flush malicious JS.
- **Full Lua Scripting:**
  - SecRuleScript directive for creating complex rules in Lua.

### ModSecurity Web App Firewall: Deployment Scenarios
- **Embedded:**
  - Installed within the Apache instance hosting the site.
- **Reverse Proxy:**
  - Uses Apache mod_proxy to redirect traffic through the WAF.
  - Supports DNS configuration and network-layer redirection.
  - Can be hosted in the cloud and supports Apache Virtual Hosts.

### Live Demos
- **Embedded Deployment:**
  - Site visitor and attacker scenarios.
- **Reverse Proxy Deployment:**
  - Traffic flow between the site visitor, WAF, and web server.
- **Content Injection:**
  - Injecting code snippets and hijacking JS functions.

### Limitations of WAFs
- **Insecure Session Handling:**
  - Transparent cookie encryption/decryption.
- **Business Logic Flaws:**
  - Difficult to detect and mitigate with automated tools.
- **WAFs as Tools, Not Silver Bullets:**
  - They have limitations and should be part of a broader security strategy.

### The Future of WAFs
- **Integration:**
  - Vendors adding WAF-like functionality to other security devices.
- **Malware Integration:**
  - WAF-like functionality being wrapped into malware.
- **Rogue / Malicious WAF Attacks:**
  - Potential attack vectors like WPAD-like attacks and WAF poisoning.
- **Bypass Vulnerabilities:**
  - Continued discovery and mitigation of WAF bypass vulnerabilities.

### Closing Thoughts
- **Thanks to DT, the Goons, and everyone who made DEFCON a reality this year!**
- **Greetz to DC404, Atlanta's DC Group!**
- **Speakers: dr.kaos, David Maynor, Scott Moulton, & Adam Bregenzer**
- **Special thanks to our very own Goon, dc0de!**

### Questions?
- **Contact:** PI:EMAIL

---

This optimized version aims to make the content more organized, clear, and professional, while maintaining the original information and structure.