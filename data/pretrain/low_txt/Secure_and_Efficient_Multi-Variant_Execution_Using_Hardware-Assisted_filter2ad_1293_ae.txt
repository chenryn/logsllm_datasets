### Performance Analysis

For the `vmcall` to the host, MvArmor adds approximately 300 extra cycles on top of Dune. Our microbenchmark results are consistent with those reported in the original Dune paper [28]. Since the `getpid` syscall is currently implemented in MvArmor’s backend, it does not require an expensive `vmcall`. This is reflected in the significantly reduced overhead compared to running Dune in passthrough mode (783 vs. 1,513 cycles), even with the additional MVX logic in place. This demonstrates that libOS-style optimizations are a viable strategy for improving MvArmor's performance in the future.

The `write` syscall involves a buffer argument, which first undergoes bounds checking in Dune and then requires copying in MvArmor’s monitor. For a small 5-byte buffer, Dune alone adds around 1,500 cycles, while MvArmor adds approximately 400 cycles for `/dev/null` and 800 cycles for filesystem operations. When writing to `/dev/null`, the kernel does not need to wait for I/O, unlike writes to the filesystem. Since the overheads added by Dune and MvArmor are fairly constant, the overall performance impact becomes less significant with more extensive I/O requests, such as those typically issued by server programs.

The `time` syscall, part of the vDSO, can be executed natively without a `syscall` instruction, but Dune remaps the vDSO to force traps into the monitor. While this approach introduces a non-trivial performance impact (around 1,050 cycles for Dune alone), it also allows MvArmor to monitor and modify the return value to ensure consistent variant behavior.

### Security Analysis

To evaluate the effectiveness of our variant generation strategy against memory errors, we present an analytical security analysis of different classes of exploits, drawing from real-world examples. An empirical evaluation of security against arbitrary existing exploits would trivially detect deviations (and thus attacks) in all cases. Therefore, we opted for an analytical approach similar to prior work on randomization-based solutions [48], [39].

First, memory error exploits that rely on absolute addresses are deterministically prevented by MvArmor’s non-overlapping address spaces across variants, regardless of the specific security policy deployed. These exploits can be used to mount various types of attacks, including modern code-reuse attacks [37], [41] and information disclosure attacks [8].

To illustrate the security guarantees provided by MvArmor, consider an exploit based on a real-world vulnerability (CVE-2004-0488). This vulnerability allows an attacker to mount a stack-based buffer overflow exploit against Apache httpd, corrupting a data pointer with an absolute address and enabling the attacker to read arbitrary memory values [8]. While this attack is effective against a single standalone variant (assuming the attacker can bypass ASLR [46] and disclose the intended absolute memory address), an attacker will not find a single absolute memory address valid across multiple variants running in parallel. This results in at least one protection fault, and MvArmor detects the attack.

Memory error exploits that rely on relative addresses are also deterministically prevented by MvArmor’s MVX-aware allocator design in the follower(s). These exploits can be used to mount various types of attacks, such as information disclosure/tampering and other non-control data attacks [40].

To exemplify the security guarantees provided by MvArmor for these classes of attacks, we consider two real-world exploits: one crafting relative memory read primitives and another crafting relative memory write primitives. We also speculate on an attacker using temporal vulnerabilities to demonstrate how MvArmor would probabilistically prevent more advanced attacks.

For the former case, consider an exploit based on the Heartbleed vulnerability in the OpenSSL library (CVE-2014-0160). The exploit overreads a buffer located on the heap to read security-sensitive data from other heap objects and eventually leak them over the network. With MvArmor, the attacker can only read data from the leader due to the non-overlapping offset spaces. Any attempt to read the object in the follower(s) would require reading a size larger than the leader’s heap, causing the leader to read past its heap and crash. Even if an attacker were to find, say, a use-after-free vulnerability to leak the same security-sensitive data, MvArmor would still probabilistically stop the attack. Since the data is leaked using standard I/O syscalls, MvArmor’s Information Disclosure security policy can immediately identify the divergent behavior of reading probabilistically different data from different objects in the leader and the followers (due to the different and randomized allocators, as well as type-safe reuse in the follower(s) increasing the gap), and thus still detect information disclosure.

For the latter case, consider an exploit based on another vulnerability in the OpenSSL library (CVE-2014-0195). The vulnerability allows an attacker issuing a long non-initial fragment to overflow a heap-allocated buffer and corrupt adjacent data. The exploit relies on this primitive to corrupt security-sensitive non-control data in other heap objects. With MvArmor, the attacker is forced to overflow more data to compensate for the inter-object gaps on the heap in the follower(s) and reach the intended security-sensitive data (e.g., UID) across all the variants. However, any attempt to “spray” this much data would again result in protection faults in at least one of the variants, as described earlier. Similarly, even if an attacker were to find, say, a use-after-free vulnerability to tamper with the same security-sensitive data, any write will likely result in different side effects across variants and probabilistically stop the attack.

Finally, since MvArmor captures deviations in external security-sensitive behavior by monitoring differences in syscall patterns, the detection guarantees provided against such attacks improve with the conservativeness of the security policy deployed. Note that when not deploying our most conservative security policy (Comprehensive), MvArmor may fail to detect some failed attack attempts immediately, but will still detect (and disallow) all the behavioral deviations induced by successful attack attempts that affect security policy-defined syscalls.

### Related Work

The concept of using software diversity to improve fault tolerance was first introduced by Aviˇzienis and Chen [58] in the 1970s. Their idea of N-version programming involved multiple teams of programmers implementing the same software, hoping bugs would be isolated to only one of the versions. This paradigm was later expanded to security applications [59]. In 2006, Cox et al. [23] introduced the idea of using automatically generated variants, rather than versions, to improve deployability. They also analyzed multiple monitoring strategies, such as syscalls (using a kernel module) and a network proxy, and several variant generation strategies, such as disjoint memory mappings and instruction set randomization. DieHard [27], also published in 2006, proposed a probabilistic memory safety solution including a “replicated mode.” While similar in spirit, MvArmor provides far better performance and security. Variant synchronization issues have been the focus of extensive research ever since [25], [24], [32], [31], [26].

Salamat et al. [24] describe other variant generation strategies in Orchestra, proposing a reversed stack in one variant to prevent stack smashing attacks. Orchestra relies on the `ptrace` API to interpose syscalls, similar to most existing MVX monitors [25], [32], [31], [26]. In 2015, Hosek and Cadar proposed Varan, which relies on static binary instrumentation to significantly improve MVX performance. Unlike MvArmor, Varan focuses on software reliability rather than security, similar to other MVX-like systems such as Tachyon [32] and Mx [22].

Varan’s event-streaming design shares similarities with MvArmor’s variant synchronization strategy, as both are based on a ring buffer design inspired by existing high-performance lock-free ring buffers [60], [61]. The key difference is that Varan’s event-streaming design is fully asynchronous and unable to support the synchronous detection policies employed by MvArmor’s design for security. Varan’s event-streaming architecture shares similarities with record-and-replay systems, in which the execution is continuously recorded into a log. This log can later be used to reexecute the application, locally or on a different machine, and optionally deploy additional checks during replay, for example, for security auditing purposes. An example in this category is Paranoid Android, a record-and-replay system that can efficiently deploy even heavyweight security analyses when replaying mobile apps’ execution in the cloud [62].

The idea of combining ASLR [5] with MVX, allowing for non-overlapping layouts to combat code-reuse (and other absolute address-based) attacks, was first proposed by Cox et al. [23]. MvArmor extends these techniques to build a new MVX-aware variant strategy that allows complementary per-variant allocators to control memory object allocation in a fine-grained way and effectively counter arbitrary memory error exploits that rely on both absolute and relative object locations. MvArmor could be complemented with other memory layout modification strategies, such as fine-grained randomization. Fine-grained randomization [39], [48] has been previously proposed as a comprehensive defense solution against arbitrary memory error exploits, but has proven to be ineffective on its own against modern information disclosure attacks that can bypass any form of ASLR altogether [46].

### Conclusion

In this paper, we presented a new design for secure yet efficient MVX systems. Our MVX monitor design leverages hardware-assisted process virtualization to securely and efficiently gain full control over the running program variants. We complemented our design with a new MVX-aware variant generation strategy, which improves the performance and security guarantees of all prior MVX proposals, resulting in a much more efficient and comprehensive defense solution. Our end-to-end design effectively combines the comprehensive protection against arbitrary memory error exploits provided by fine-grained ASLR strategies with the strong attack detection and disclosure-resistant guarantees provided by MVX.

We implemented our ideas in MvArmor, a new secure and efficient MVX system. MvArmor demonstrates that many of the performance and/or security limitations of existing MVX solutions are not fundamental and can be effectively addressed with a careful design. MvArmor’s policy-driven detection strategy can provide strong and flexible security guarantees at the cost of relatively low run-time overhead for such a comprehensive security solution. Even more surprisingly, MvArmor can match the performance of the fastest MVX implementation available while providing far stronger security. Finally, based on a design particularly amenable to optimizations, we believe our framework can provide new opportunities to further enhance the performance of MVX systems. To foster further research in the area and in support of open science, we are making our MvArmor prototype available as open source, available at http://github.com/vusec/mvarmor.

### Acknowledgements

We would like to thank the anonymous reviewers for their comments. This work was supported by the European Commission through project H2020 ICT-32-2014 “SHARCS” under Grant Agreement No. 644571 and by the Netherlands Organisation for Scientific Research through the NWO 639.023.309 VICI “Dowsing” project and the NWO “Re-Cover” project.

### References

[1] L. Szekeres, M. Payer, T. Wei, and D. Song, “Sok: Eternal war in memory,” in S&P, 2013.
[2] V. van der Veen, N. dutt Sharma, L. Cavallaro, and H. Bos, “Memory errors: the past, the present, and the future,” in RAID, 2012.
[3] Z. Durumeric, J. Kasten, D. Adrian, J. A. Halderman, M. Bailey, F. Li, N. Weaver, J. Amann, J. Beekman, M. Payer, and V. Paxson, “The matter of heartbleed,” in IMC, 2014.
[4] Microsoft, “A detailed description of the Data Execution Prevention (DEP) feature,” http://support.microsoft.com/kb/875352, 2006.
[5] PAX Team, “PAX Address Space Layout Randomization,” https://pax.grsecurity.net/docs/aslr.txt.
[6] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole, P. Bakke, S. Beattle, A. Grier, P. Wagle, and Q. Zhang, “StackGuard: automatic adaptive detection and prevention of buffer-overﬂow attacks,” in USENIX SEC, 1998.
[7] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazi`eres, and D. Boneh, “Hacking blind,” in S&P, 2014.
[8] J. Seibert, H. Okhravi, and E. S¨oderstr¨om, “Information leaks without memory disclosures: Remote side channel attacks on diversiﬁed code,” in CCS, 2014.
[9] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic, “SoftBound: Highly compatible and complete spatial memory safety for C,” in PLDI, 2009.
[10] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic, “CETS: Compiler enforced temporal safety for C,” in ISMM, 2010.
[37] H. Shacham, “The geometry of innocent ﬂesh on the bone: Return-into-libc without function calls (on the x86),” in CCS, 2007.
[11] D. Dhurjati and V. Adve, “Backwards-compatible array bounds checking for C with very low overhead,” in ICSE, 2006.
[12] P. Akritidis, M. Costa, M. Castro, and S. Hand, “Baggy bounds checking: An efﬁcient and backwards-compatible defense against out-of-bounds errors,” in USENIX SEC, 2009.
[13] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-ﬂow integrity: Principles, implementations, and applications,” ACM TISSEC, 2009.
[14] M. Zhang and R. Sekar, “Control ﬂow integrity for COTS binaries,” in USENIX SEC, 2013.
[15] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, ´U. Erlingsson, L. Lozano, and G. Pike, “Enforcing forward-edge control-ﬂow integrity in GCC & LLVM,” in USENIX SEC, 2014.
[16] M. Payer, A. Barresi, and T. R. Gross, “Fine-grained control-ﬂow integrity through binary hardening,” in DIMVA, 2015.
[17] V. van der Veen, E. G¨oktas¸, M. Contag, A. Pawloski, X. Chen, S. Rawat, H. Bos, T. Holz, E. Athanasopoulos, and C. Giuffrida, “A tough call: Mitigating advanced code-reuse attacks at the binary level practical context-sensitive CFI,” in S&P, 2016.
[18] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross, “Control-ﬂow bending: On the effectiveness of control-ﬂow integrity,” in USENIX SEC, 2015.
[19] E. G¨oktas, E. Athanasopoulos, H. Bos, and G. Portokalidis, “Out of control: overcoming control-ﬂow integrity,” in S&P, 2014.
[20] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose, “Stitching the gadgets: On the ineffectiveness of coarse-grained control-ﬂow integrity protection,” in USENIX SEC, 2014.
[21] N. Carlini and D. Wagner, “ROP is still dangerous: Breaking modern defenses,” in USENIX SEC, 2014.
[22] P. Hosek and C. Cadar, “VARAN the unbelievable: An efﬁcient N-variant execution framework,” in ASPLOS, 2015.
[23] B. Cox, D. Evans, A. Filipi, J. Rowanhill, W. Hu, J. Davidson, J. Knight, A. Nguyen-Tuong, and J. Hiser, “N-variant systems: a secretless framework for security through diversity,” in USENIX SEC, 2006.
[24] B. Salamat, T. Jackson, A. Gal, and M. Franz, “Orchestra: Intrusion detection using parallel execution and monitoring of program variants in user-space,” in EuroSys, 2009.
[25] D. Bruschi, L. Cavallaro, and A. Lanzi, “Diversiﬁed process replicae for defeating memory error exploits,” in IPCCC, 2007.
[26] S. Volckaert, B. De Sutter, T. De Baets, and K. De Bosschere, “GHUMVEE: efﬁcient, effective, and ﬂexible replication,” in FPS, 2012.
[27] E. D. Berger and B. G. Zorn, “DieHard: Probabilistic memory safety for unsafe languages,” in PLDI, 2006.
[28] A. Belay, A. Bittau, A. J. Mashtizadeh, D. Terei, D. Mazi`eres, and C. Kozyrakis, “Dune: Safe user-level access to privileged CPU features,” in OSDI, 2012.
[29] A. Belay, G. Prekas, A. Klimovic, S. Grossman, C. Kozyrakis, and E. Bugnion, “IX: A protected dataplane operating system for high throughput and low latency,” in OSDI, 2014.
[30] S. Peter, J. Li, I. Zhang, D. R. Ports, D. Woos, A. Krishnamurthy, T. Anderson, and T. Roscoe, “Arrakis: The operating system is the control plane,” in OSDI, 2014.
[31] P. Hosek and C. Cadar, “Safe software updates via multi-version execution,” in ICSE, 2013.
[32] M. Maurer and D. Brumley, “Tachyon: Tandem execution for efﬁcient live patch testing.” in USENIX SEC, 2012.
[33] N. Provos, “Improving host security with system call policies,” in USENIX SEC, 2003.
[34] B. Buck and J. K. Hollingsworth, “An API for runtime code patching,” International Journal of High Performance Computing Applications, 2000.
[35] D. Bruening, Q. Zhao, and S. Amarasinghe, “Transparent dynamic instrumentation,” in VEE, 2012.
[36] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham, “Efﬁcient software-based fault isolation,” in SOSP, 1993.
[38] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer, “Non-control-data attacks are realistic threats,” in USENIX SEC, 2005.
[39] S. Bhatkar, D. C. DuVarney, and R. Sekar, “Efﬁcient techniques for comprehensive protection from memory error exploits.” in USENIX SEC, 2005.
[40] H. Hu, Z. L. Chua, S. Adrian, P. Saxena, and Z. Liang, “Automatic generation of data-oriented exploits,” in USENIX SEC, 2015.
[41] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and T. Holz, “Counterfeit object-oriented programming,” in S&P, 2015.
[42] V. Pappas, M. Polychronakis, and A. D. Keromytis, “Transparent ROP exploit mitigation using indirect branch tracing,” in USENIX SEC, 2013.
[43] V. van der Veen, D. Andriesse, E. Goktas, B. Gras, L. Sambuc, A. Slowinska, H. Bos, and C. Giuffrida, “Practical context-sensitive CFI,” in CCS, 2015.
[44] L. Soares and M. Stumm, “FlexSC: Flexible system call scheduling with exception-less system calls,” in OSDI, 2010.
[45] https://wiki.ubuntu.com/Security/Features.
[46] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A.-R. Sadeghi, “Just-in-time code reuse: On the effectiveness of ﬁne-grained address space layout randomization,” in S&P, 2013.
[47] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song, “Code-pointer integrity,” in OSDI, 2014.
[48] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum, “Enhanced operating system security through efﬁcient and ﬁne-grained address space randomization.” in USENIX SEC, 2012.
[49] X. Chen, A. Slowinska, D. Andriesse, H. Bos, and C. Giuffrida, “Stackarmor: Comprehensive protection from stack-based memory error vulnerabilities for binaries,” in NDSS, 2015.
[50] D. Dhurjati and V. Adve, “Efﬁciently detecting all dangling pointer uses in production servers,” in DSN, 2006.
[51] P. Akritidis, “Cling: A memory allocator to mitigate dangling pointers.” in USENIX SEC, 2010.
[52] M. Olszewski, J. Ansel, and S. Amarasinghe, “Kendo: efﬁcient deterministic multithreading in software,” ASPLOS, 2009.
[53] A. Aviram, S.-C. Weng, S. Hu, and B. Ford, “Efﬁcient system-enforced deterministic parallelism,” in OSDI, 2010.
[54] J. Devietti, B. Lucia, L. Ceze, and M. Oskin, “DMP: deterministic shared memory multiprocessing,” in ASPLOS, 2009.
[55] J. Bonwick, “The slab allocator: An object-caching kernel memory allocator,” in USENIX Summer, 1994.
[56] J. Bonwick and J. Adams, “Magazines and Vmem: Extending the slab allocator to many CPUs and arbitrary resources,” in USENIX ATC, 2001.
[57] A. Jaleel, “Pin-based memory characterization of workloads using the SPEC CPU2000 and SPEC CPU2006 benchmark suites,” VSSAD Technical Report, 2007.
[58] A. Aviˇzienis and L. Chen, “On the implementation of N-version programming for software fault tolerance during execution,” in COMPSAC, 1977.
[59] M. K. Joseph and A. Aviˇzienis, “A fault tolerance approach to computer viruses,” in S&P, 1988.
[60] M. Thompson, D. Farley, M. Barker, P. Gee, and A. Stewart, “Disruptor: High performance alternative to bounded queues for exchanging data between concurrent threads,” Technical paper. LMAX, 2011.
[61] G. Portokalidis, P. Homburg, K. Anagnostakis, and H. Bos, “Paranoid android: versatile protection for smartphones,” in ACSAC, 2010.
[62] R. Nikolaev and G. Back, “VirtuOS: an operating system with kernel virtualization,” in SOSP, 2013.
[63] A. Baumann, D. Lee, P. Fonseca, L. Glendenning, J. R. Lorch, B. Bond, R. Olinsky, and G. C. Hunt, “Composing OS extensions safely and efﬁciently with Bascule,” in EuroSys, 2013.