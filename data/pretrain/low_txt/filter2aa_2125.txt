# It WISN't Me: Attacking Industrial Wireless Mesh Networks
## DEF CON 26
### Introduction
- **Erwin Paternotte**  
  Lead Security Consultant  
  @stokedsecurity
- **Mattijs van Ommeren**  
  Principal Security Consultant  
  @alcyonsecurity
- **Date**: 15.7.2018

## Previous Research
- **WirelessHART: A Security Analysis** by Max Duijsens (Master, 2015)  
  [Link](https://pure.tue.nl/ws/files/47038470/800499-1.pdf)
- **Attacking the Plant through WirelessHART** by Mattijs & Erwin (S4 Miami, 2016)  
  [Link](https://www.youtube.com/watch?v=AlEpgutwZvc)
- **Denial of Service Attacks on ICS Wireless Protocols** by Blake Johnson (S4 Miami, 2018)  
  Slides/video no longer available

**Wright’s Principle**: "Security does not improve until practical tools for exploration of the attack surface are made available."

## Industrial (r)evolution
### A Brief History of Control Systems
- **~1940**: Pneumatic Logic Systems (3 - 15 psi)
- **Mid 1950s**: Analog Current Loop (4 - 20 mA)
- **Mid 1980s**: Digital Protocols (HART, Fieldbus, Profibus)
- **Late 2000s**: Wireless Mesh Networks (WirelessHART, ISA 100.11a)

## Industrial Process Control Loop
[Insert relevant diagram or description]

## Introduction to WirelessHART
- Supports HART application layer
- Single encryption cipher/key length (AES CCM*)
- Based on Time Synced Mesh Protocol developed by Dust Networks
- Radio SoC exclusively provided by Dust Networks

## Introduction to ISA 100.11a
- Relies on several standards: 6LoWPAN/IPv6/UDP
- Ability to tunnel other protocols
- Vendor-neutral application layer
- Mainly developed by Nivis
- Generic 802.15.4 chips provided by multiple vendors (STM, NXP, Texas Instruments, OKI)

## WISN Topology
[Insert relevant diagram or description]

## Protocol Stacks
[Insert relevant diagram or description]

## Common Denominators
- 802.15.4 MAC layer at 2.4 GHz
- Time Slotted Channel Hopping to:
  - Minimize interference with other radio signals
  - Mitigate multipath fading
- Centralized network and security manager orchestrates communication between nodes
- Concluded that developing a common sniffer for both protocols should be possible

## WirelessHART & ISA100.11a Security
- **AES CCM* (CBC-MAC with counter mode)**
  - Network Layer (integrity only)
  - Transport Layer (encryption)
- **Join process**
  - Handshake with Network Manager
  - Shared secrets
  - Certificates (ISA100.11.a only)

## Keys Galore
### ISA100.11a
- Global Key – well-known
- K_open – well-known
- K_global – well-known
- Master Key – derived during provisioning
- D-Key – Hop-by-hop integrity
- T-KEY – End-to-end encryption

### WirelessHART
- Well-known Key – Advertisements
- Network Key – Hop-by-hop integrity
- Join Key – Join process
- Broadcast Session Key – End-to-end
- Unicast Session Key – End-to-end

### How to Obtain Key Material
- Default keys (documented, more or less)
- Sniffing (during OTA provisioning for ISA100.11a)
- Keys stored in device NVRAM (recoverable through JTAG/SPI, as demonstrated by our previous research)

## WirelessHART Default Keys
- 445553544E4554574F524B53524F434B – Multiple vendors (DUSTNETWORKSROCK)
- E090D6E2DADACE94C7E9C8D1E781D5ED – Pepperl+Fuchs
- 24924760000000000000000000000000 – Emerson
- 456E6472657373202B20486175736572 – Endress+Hauser

## Sniffer Hardware Selection
- **NXP BeeKit**
  - Single channel 802.15.4 with standard firmware (not open source), reached EOL
- **BeamLogic 802.15.4 Site Analyzer**
  - 16 channels simultaneously, no injection support, Basic Wireshark dissector, Expensive (~ $1300)
- **Atmel RZ Raven**
  - Single channel 802.15.4 with standard firmware, no free IDE (Atmel Studio n/a), reached EOL
- **NXP USB-KW41Z**
  - Single channel 802.15.4 with standard firmware (not open source)
  - Actively supported
  - Free IDE available
  - Powerful microcontroller (Cortex M0+)
  - PCB ready for external antenna (wardriving!)
  - Easy firmware flashing via USB mass storage (OpenSDA)
  - Documentation and examples, but with a few important omissions

## Demo 1: NXP Sniffer Application

## USB-KW41Z Host Communication
- Detected as virtual COM/UART port (Windows/Linux)
- Freescale Serial Communication Interface (FSCI) developed by NXP for communication between host and device firmware
- Host SDK for FSCI is available (with Python bindings)
- FSCI protocol is fairly well documented
- Allows direct communication with the USB-KW41Z without requiring the SDK to be installed

## USB-KW41Z Block Diagram
[Insert relevant diagram or description]

## Building the Toolset
- Extended the KillerBee framework with a driver for the USB-KW41Z
  - Captures 802.15.4 traffic into PCAP format
- Developed Scapy protocol support
  - Forges and injects packets
- Developed Wireshark dissectors for WirelessHART and ISA100.11a
  - Brings WISN packet viewing to the masses
  - Live capture and dissecting of WISN traffic on a single channel at a time

## Demo 2: Sniffing Traffic with KillerBee and Wireshark

## Theory: Time Slotted Channel Hopping

## Implementing Time Slotted Channel Hopping
- Both protocols require high-speed channel hopping via predefined, but different patterns.
- FSCI communication too slow to tune into time slots (10ms)
  - Solution: Implement channel hopping in firmware
- Two layers of encryption/authentication
  - Solution: Implement in host software (KillerBee)
- Ability to inject traffic
  - FSCI supports injection of arbitrary frames
  - Solution: Implement frame injection in KillerBee, add protocol support to Scapy for crafting packets

## Demo 3: Sniffing with Channel Hopping

## Unauthenticated Attacks
- Signal jamming through continuous power emission
- Concurrent packet transmission
- Join slot jamming
- Selective jamming transmitter communication
- Transmitting fake advertisements

## Demo 4: Join Slot Jamming

## Demo 5: Capturing the Join Process

## Authenticated Attacks
- Nonce exhaustion
  - Both protocols use a semi-predictable nonce counter to feed the AES CCM* algorithm
  - A device will reject a packet if a nonce value is lower than a previously received one
  - Spoofing a packet with a maximum nonce value causes legitimate packets to drop
  - Sending spoofed measurements to influence the process

## Conclusions
- Still a large unexplored attack surface due to the complexity of the protocols
- The released tools and research will fill this gap and enable security researchers to move forward in the field of WISN research
- Using WISN technology for process control and especially functional safety applications is probably not a good idea and should be reconsidered

## Future Research
- Expand tool with more theorized attacks
- Research forced rejoin triggers
- Mapping WISN locations (wardriving)
- Implementation-specific vulnerabilities (transmitters, gateways)

## Questions & Thank You
- GitHub: [nixu-corp](https://github.com/nixu-corp)
- Twitter: [@nixutigerteam](https://twitter.com/nixutigerteam)
- LinkedIn: [Nixu Oy](https://www.linkedin.com/company/nixu-oy)
- Website: [www.nixu.com](https://www.nixu.com)

**Date**: 15.7.2018