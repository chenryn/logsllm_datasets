# Title: Hubble: Transparent and Extensible Malware Analysis by Combining Hardware Virtualization and Software Emulation

## Authors:
- Lok-Kwong Yan†
- Manjukumar Jayachandra†
- Mu Zhang†
- Heng Yin†

†Syracuse University, ‡Air Force Research Laboratory

Emails: {loyan, mjayacha, muzhang, heyin}@syr.edu

## Abstract

Malware is increasingly employing sophisticated techniques to evade analysis. Specifically, anti-emulation tactics have been developed to thwart fine-grained dynamic analysis. Our evaluation of 150 real-world malware samples revealed that 14 could not be analyzed by any of three popular emulation-based tools: Anubis [1], CWSandbox [3], and TEMU [5]. These samples functioned normally in KVM using hardware virtualization but either crashed or exhibited no malicious behavior on the aforementioned analysis platforms. Evidently, while emulation-based malware analysis offers excellent instrumentation support, it lacks transparency.

In contrast, Ether [4] achieves ideal transparency by executing malicious code on bare metal hardware and intercepting and hiding in-guest changes via a hypervisor. However, Ether's lack of extensibility is a significant drawback, as it incurs a substantial performance penalty for instruction-level analysis. Our experiments show an approximately 3000-fold slowdown when enabling single-step execution, not to mention the additional heavy instrumentation required for in-depth malware analysis. Furthermore, implementing code instrumentation within a hypervisor (i.e., Ring -1) is far more challenging than within an emulator (i.e., Ring 3).

Thus, building an extensible and transparent malware analysis platform remains an unresolved problem. We address this challenge by combining hardware virtualization and software emulation. The core of our approach is precise heterogeneous replay: we record malware execution using hardware virtualization for transparency and then replay and analyze the execution using dynamic binary translation for flexibility and efficiency in in-depth analysis.

The concept of heterogeneous replay was first introduced and implemented in Aftersight [2], which records virtual machine execution from VMware and replays it in QEMU for heavyweight analyses (such as bug detection) on production workloads. Unlike Aftersight, our platform must operate in a malicious context, ensuring that the emulator accurately replays the execution recorded from the hardware virtualization platform, despite malware's attempts to detect any possible differences between the two systems.

We carefully categorize various operations and instructions and handle them appropriately to ensure precise replay. Specifically, we emulate basic integer-based instructions for efficiency, directly pass floating-point instructions to the FPU, and record and replay the remaining complex instructions, exceptions, interrupts, and device I/O. This design choice, assuming that integer-based instructions are easy to emulate correctly, achieves transparency, analysis efficiency, and extensibility.

We have implemented a prototype in KVM and TEMU. KVM has been modified to transparently record malware execution using hardware virtualization, and TEMU has been enhanced to precisely replay the execution via dynamic binary translation. With minimal changes, existing analysis plugins (such as taint analysis, unpacker, and tracing) function properly, achieving the benefits of transparency and greater analysis efficiency. Our experiments with the 14 real-world emulation-resistant malware samples demonstrate that our prototype can defeat emulation-resistant malware and conduct in-depth analysis with acceptable performance overhead.

## References
[1] Anubis: Analyzing Unknown Binaries. http://anubis.iseclab.org/.

[2] J. Chow, T. Garfinkel, and P. Chen. Decoupling dynamic program analysis from execution in virtual environments. In Proceedings of the 2008 Usenix Annual Technical Conference, June 2008.

[3] CWSandbox: Behavior-based Malware Analysis. http://mwanalysis.org/.

[4] A. Dinaburg, P. Royal, M. Sharif, and W. Lee. Ether: malware analysis via hardware virtualization extensions. In Proceedings of the 15th ACM Conference on Computer and Communications Security, pages 51–62, 2008.

[5] H. Yin and D. Song. TEMU: Binary code analysis via whole-system layered annotative execution. Technical Report UCB/EECS-2010-3, EECS Department, University of California, Berkeley, January 2010.