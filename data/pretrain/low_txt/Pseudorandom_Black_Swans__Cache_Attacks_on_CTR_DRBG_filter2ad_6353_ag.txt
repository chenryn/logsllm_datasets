以下是优化后的参考文献列表，使其更加清晰、连贯和专业：

1. Jungheim, H., 2019. "Random Number Generation." [Online] Available at: <https://henric.org/random/#nistrng>.

2. Kaliski, B., 1998. "PKCS #1: RSA Encryption Version 1.5." RFC 2313.

3. Kan, W., 2007. "Analysis of Underlying Assumptions in NIST DRBGs." IACR ePrint Archive, 2007/345.

4. Karimi, N., A.K. Kanuparthi, X. Wang, O. Sinanoglu, and R. Karri, 2015. "MAGIC: Malicious Aging in Circuits/Cores." ACM Transactions on Architecture and Code Optimization (TACO), vol. 12, no. 1, p. 5.

5. Kerry, C.F. and P.D. Gallagher, 2013. "FIPS PUB 186-4: Digital Signature Standard (DSS)."

6. Kim, Y., R. Daly, J. Kim, C. Fallin, J.H. Lee, D. Lee, C. Wilkerson, K. Lai, and O. Mutlu, 2014. "Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors." In ACM SIGARCH Computer Architecture News.

7. Klyubin, A., 2013. "Some SecureRandom Thoughts." [Online] Available at: <https://android-developers.googleblog.com/2013/08/some-securerandom-thoughts.html>.

8. Kocher, P., D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom, 2019. "Spectre Attacks: Exploiting Speculative Execution." In IEEE Security & Privacy (SP).

9. Kurmus, A., N. Ioannou, N. Papandreou, and T.P. Parnell, 2017. "From Random Block Corruption to Privilege Escalation: A Filesystem Attack Vector for Rowhammer-like Attacks." In Workshop on Offensive Technologies (WOOT).

10. Kwong, A., D. Genkin, D. Gruss, and Y. Yarom, 2020. "RAMBleed: Reading Bits in Memory Without Accessing Them." In IEEE Security & Privacy (SP).

11. Lee, S., M.-W. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado, 2016. "Inferring Fine-Grained Control Flow Inside SGX Enclaves with Branch Shadowing." In USENIX Security Symposium.

12. Leung, H.-T., 2019. "Redhat Bug 1150286 - RDRAND Instruction Fails After Resume on AMD CPU." [Online] Available at: <https://bugzilla.kernel.org/show_bug.cgi?id=85911>.

13. Lipp, M., M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh, J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg, 2018. "Meltdown: Reading Kernel Memory from User Space." In USENIX Security Symposium.

14. Michaelis, K., C. Meyer, and J. Schwenk, 2013. "Randomly Failed! The State of Randomness in Current Java Implementations." In CT-RSA.

15. Bellare, M. and P. Rogaway, 1998. "PSS: Provably Secure Encoding Method for Digital Signatures."

16. Moghimi, A., G. Irazoqui, and T. Eisenbarth, 2017. "CacheZoom: How SGX Amplifies Cache Attacks." In CHES.

17. Moriarty, K., B. Kaliski, J. Jonsson, and A. Rusch, 2016. "PKCS #1: RSA Cryptography Specifications Version 2.2." RFC 8017.

18. Mowery, K., S. Keelveedhi, and H. Shacham, 2012. "Are AES x86 Cache Timing Attacks Still Feasible?" In Cloud Computing Security Workshop (CCSW).

19. Neve, M. and J.-P. Seifert, 2007. "Advances on Access-Driven Cache Attacks on AES." In Selected Areas in Cryptography (SAC).

20. NIST, 2019. "Announcing Issuance of Federal Information Processing Standard (FIPS) 140-3, Security Requirements for Cryptographic Modules."

21. OpenSSL, 2018. "SSL/TLS Client." [Online] Available at: <https://wiki.openssl.org/index.php/SSL/TLS_Client>.

22. OpenSSL Software Failure for RSA 16K Modulus, 2016. [Online] Available at: <https://mta.openssl.org/pipermail/openssl-users/2016-July/004056.html>.

23. OpenSSL Software Foundation, 2013. "User Guide for the OpenSSL FIPS Object Module v2.0."

24. OpenSSL, 2015. "[openssl.org #4063] re: Client Hello Longer Than 214 Bytes Are Rejected." [Online] Available at: <https://mta.openssl.org/pipermail/openssl-dev/2015-September/002860.html>.

25. Osvik, D.A., A. Shamir, and E. Tromer, 2006. "Cache Attacks and Countermeasures: The Case of AES." In CT-RSA.

26. Percival, C., 2005. "Cache Missing for Fun and Profit." BSDCan.

27. Pereida García, C. and B.B. Brumley, 2017. "Constant-Time Callees with Variable-Time Callers." In USENIX Security Symposium.

28. Perlroth, N., 2013. "Government Announces Steps to Restore Confidence on Encryption Standards." [Online] Available at: <https://bits.blogs.nytimes.com/2013/09/10/government-announces-steps-to-restore-confidence-on-encryption-standards>.

29. Pessl, P., L. Groot Bruinderink, and Y. Yarom, 2017. "To BLISS-B or Not to Be: Attacking strongSwan's Implementation of Post-Quantum Signatures." In CCS.

30. Poddar, R., A. Datta, and C. Rebeiro, 2011. "A Cache Trace Attack on CAMELLIA." In InfoSecHiComNet.

31. Pornin, T., 2013. "Deterministic Usage of the Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA)." RFC 6979.

32. Quarkslab SAS, 2019. "OpenSSL Security Assessment." [Online] Available at: <https://ostif.org/wp-content/uploads/2019/01/18-04-720-REP_v1.2.pdf>.

33. Rescorla, E., 2018. "The Transport Layer Security (TLS) Protocol Version 1.3." RFC 8446.

34. Roche, T., V. Lomné, and K. Khalfallah, 2011. "Combined Fault and Side-Channel Attack on Protected Implementations of AES." In CARDIS.

35. Ronen, E., A. Shamir, A.O. Weingarten, and C. O’Flynn, 2018. "IoT Goes Nuclear: Creating a Zigbee Chain Reaction." In IEEE Security & Privacy (SP).

36. Ruhault, S., 2017. "SoK: Security Models for Pseudo-Random Number Generators." In Fast Software Encryption (FSE).

37. Shrimpton, T. and R.S. Terashima, 2016. "Salvaging Weak Security Bounds for Blockcipher-Based Constructions." In ASIACRYPT.

38. Shumow, D. and N. Ferguson, 2007. "On the Possibility of a Back Door in the NIST SP800-90 Dual EC PRNG." In CRYPTO.

39. Spreitzer, R. and T. Plos, 2013. "Cache-Access Pattern Attack on Disaligned AES T-Tables." In COSADE.

40. The OpenSSL Project, 2003. "OpenSSL: The Open Source Toolkit for SSL/TLS."

41. Tromer, E., D.A. Osvik, and A. Shamir, 2010. "Efficient Cache Attacks on AES, and Countermeasures." Journal of Cryptology, no. 1.

42. Van Bulck, J., F. Piessens, and R. Strackx, 2017. "SGX-Step." In SysTEX.

43. Van Bulck, J., M. Minkin, O. Weisse, D. Genkin, B. Kasikci, F. Piessens, M. Silberstein, T.F. Wenisch, Y. Yarom, and R. Strackx, 2018. "Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution." In USENIX Security Symposium.

44. Van Schaik, S., A. Milburn, S. Österlund, P. Frigo, G. Maisuradze, K. Razavi, H. Bos, and C. Giuffrida, 2019. "RIDL: Rogue In-Flight Data Load." In IEEE Security & Privacy (SP).

45. Vanhoef, M. and E. Ronen, 2020. "Dragonblood: A Security Analysis of WPA3’s SAE Handshake." In IEEE Security & Privacy (SP).

46. Wang, W., G. Chen, X. Pan, Y. Zhang, X. Wang, V. Bindschaedler, H. Tang, and C.A. Gunter, 2017. "Leaky Cauldron on the Dark Land: Understanding Memory Side-Channel Hazards in SGX." In CCS.

47. Weisse, O., J. Van Bulck, M. Minkin, D. Genkin, B. Kasikci, F. Piessens, M. Silberstein, R. Strackx, T.F. Wenisch, and Y. Yarom, 2018. "Foreshadow-NG: Breaking the Virtual Memory Abstraction with Transient Out-of-Order Execution."

48. Woodage, J. and D. Shumow, 2019. "An Analysis of the NIST SP 800-90A Standard." In EUROCRYPT.

49. Wtdrog, 2019. "Systemd Issue #11810 - Can’t Suspend Again After Suspending One Time." [Online] Available at: <https://github.com/systemd/systemd/issues/11810>.

50. Xiao, Y., M. Li, S. Chen, and Y. Zhang, 2017. "Stacco: Differentially Analyzing Side-Channel Traces for Detecting SSL/TLS Vulnerabilities in Secure Enclaves." In CCS.

51. Xu, Y., W. Cui, and M. Peinado, 2015. "Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems." In IEEE Security & Privacy (SP).

52. Yan, M., C. Fletcher, and J. Torrellas, 2018. "Cache Telepathy: Leveraging Shared Resource Attacks to Learn DNN Architectures." arXiv:1808.04761.

53. Yarom, Y. and N. Benger, 2014. "Recovering OpenSSL ECDSA Nonces Using the Flush+Reload Cache Side-Channel Attack." IACR ePrint Archive, 2014/140.

54. Yarom, Y. and K. Falkner, 2014. "FLUSH+RELOAD: A High Resolution, Low Noise, L3 Cache Side-Channel Attack." In USENIX Security Symposium.

55. Ye, K.Q., M. Green, N. Sanguansin, L. Beringer, A. Petcher, and A.W. Appel, 2017. "Verified Correctness and Security of mbedTLS HMAC-DRBG." In CCS.

56. Yilek, S., E. Rescorla, H. Shacham, B. Enright, and S. Savage, 2009. "When Private Keys Are Public." In IMC.

57. Zhang, F., 2018. "mbedtls-SGX." [Online] Available at: <https://github.com/bl4ck5un/mbedtls-SGX>.

58. Zhang, N., K. Sun, D. Shands, W. Lou, and Y.T. Hou, 2016. "TruSpy: Cache Side-Channel Information Leakage from the Secure World on ARM Devices." IACR ePrint Archive, 2016/980.

59. Zhang, Y., A. Juels, M.K. Reiter, and T. Ristenpart, 2014. "Cross-Tenant Side-Channel Attacks in PaaS Clouds." In CCS.

### 附录 A：缓存攻击细节

在本节中，我们将详细介绍我们的状态恢复攻击。在Osvik等人[64]的同步模型中，攻击者观察明文并能够在触发未知密钥加密之前立即探测缓存状态。攻击者还能够在每次加密后立即探测缓存状态。观察几次加密操作过程中AES第一轮引起的缓存访问模式足以恢复密钥[64]。

#### 攻击AES的最后一轮
在[10, 58, 64]的同步模型下，我们针对AES的最后一轮，攻击者观察到的是密文而不是明文。实现通常使用不同的T表进行最后一轮加密，这使我们能够独立于早期轮次的访问来测量最后一轮的表访问。设qi为T表中的第i个字节，ci为第i个密文字节，ki为最后一轮密钥的第i个字节。根据T表AES的定义，我们知道ci = T[qi] ⊕ ki，其中T是最后一轮的表。因此，攻击者可以通过观察ci并监测缓存访问来确定qi，从而解出密钥字节，得到ki = ci ⊕ T[qi]。

#### 处理缺失信息
虽然上述攻击在攻击者对qi和i有完美可见性时有效，但在实际系统中，攻击者无法直接观察到qi。相反，她识别出一组连续的字节（通常是64字节的缓存行），从而丢失了qi的一些最低有效位信息。在我们的机器上，每次访问对应于16个可能的qi值，因为每个最终T表字节存储四次，以4字节整数形式存在，每条缓存行中有16个这样的字节。此外，攻击者不知道i，因为她不知道哪个缓存访问产生了哪个密文字节。因此，为了获得候选密钥字节ki，攻击者必须从最后一轮访问的表索引中猜测qi的值，并且还要猜测qi中缺失的4位。由于我们预计在最后一轮中大约会访问11个不同的索引[58]，这导致每个ki大约有11 · 2^4 = 176个候选值，总共256个可能的候选值。然而，我们注意到，在多次独立加密不同明文但使用相同密钥的情况下，每个ki的正确值应该始终出现在候选列表中。相比之下，我们期望错误的候选值均匀分布。因此，如果攻击者看到大量的加密，她可以结合从它们获得的信息来检索AES密钥。设

\[ \text{hit}(q, j) = 
\begin{cases} 
1 & \text{如果在第j次跟踪中访问了第q条缓存行} \\
0 & \text{否则}
\end{cases}
\]

跟随[58]的方法，攻击者统计可能对应于每个可能密钥字节值k（从0x00到0xFF）的缓存命中次数，并将计数存储在表S中：

\[ S[i][k] = \sum_{j=0}^{n-1} \sum_{q=0}^{\lfloor \frac{m}{2^m} \rfloor - 1} \sum_{b=0}^{m-1} \text{hit}(q, j) \cdot \delta(T[2^m \cdot q + b] \oplus c_i = k) \]

其中\( \lfloor \frac{m}{2^m} \rfloor \)是缓存行的数量，m是每条缓存行的字节数，n是跟踪的数量。如[10, 58]所分析的那样，最后一轮密钥的第i个字节是使得S[i][k]最大化的k值。

#### 获取跟踪数据
我们描述如何对CTR_DRBG执行Flush+Reload攻击。首先回顾[58]中在V-B部分描述的攻击需要攻击者收集与加密操作产生的密文配对的缓存状态跟踪。

##### 匹配PRG输出
为了恢复AES密钥，攻击者必须将每个密文与其产生后但在下一个加密前的时间间隔内获取的跟踪相匹配。在[64]的同步模型中，攻击者直接触发加密操作，这种匹配是微不足道的。然而，在我们的设置中，请求随机字节会引发一系列快速的加密操作。如果攻击者的探测时间相对于一次加密操作来说较长，则攻击者不能轻松地交错探测。这一困难因加密操作持续时间因其他系统活动而变化，使得以等间隔探测的简单策略无法生成匹配的跟踪和密文对。

##### 计时器
为了使用[64]的同步设置分析，我们通过使用所谓的“计时器”来对齐跟踪和密文。