### Execution Environment for Safety-Critical Cyber-Physical Systems

**RT-TEE (Real-Time Trusted Execution Environment)** is designed to address one of the most fundamental needs of safety-critical cyber-physical systems: system availability. RT-TEE builds upon a minimized abstraction of hardware primitives, enabling the bootstrapping of availability. It leverages a newly designed two-layer, policy-based, event-driven hierarchical scheduler to provide real-time scheduling while minimizing the impact on the Trusted Computing Base (TCB).

To ensure I/O availability, we proposed and designed an I/O reference monitor that enforces both temporal (real-time) and spatial (security) policies on hardware/software interactions. To minimize the TCB impact due to I/O drivers, we introduced a combination of sandboxed, feature-rich, untrusted drivers and minimized, functionality-trusted, debloated drivers. We developed prototypes for both ARMv8-A and ARMv8-M platforms and validated the system on a real drone.

### Acknowledgment

We thank the anonymous reviewers for their constructive feedback, Yujie Wang and Ruide Zhang for their assistance in the implementation, and the US National Science Foundation for their support under grants ECCS-1646579, CNS-1837519, CNS-1916926, and CNS-2038995. This work was also supported by the Fullgraf Foundation.

**Authorized licensed use limited to: Tsinghua University. Downloaded on August 07, 2022, at 13:11:09 UTC from IEEE Xplore. Restrictions apply.**

### References

[1] “How many millions of lines of code does it take?.” https://xenproject.org/developers/teams/xen-hypervisor/. Accessed: 2019-09-01.
[2] G. Doll, “A smart way to drive ECU consolidation,” WindRiver, Tech. Rep., 2015.
[3] Intel, “ECU consolidation reduces vehicle costs, weight, and testing.”
[4] I. Astaburuaga et al., “Vulnerability analysis of AR.Drone 2.0, an embedded Linux system,” in CCWC, IEEE, 2019.
[5] “MAVLink vulnerability.” https://diydrones.com/profiles/blogs/hijacking-quadcopters-with-a-mavlink-exploit. Accessed: 2021-08-07.
[6] “Hackers remotely kill a Jeep on the highway with me in it.” https://www.wired.com/2015/07/hackers-remotely-kill-jeep-highway/.
[7] E. Deligne, “ARDrone corruption,” Journal in Computer Virology, 2012.
[8] “FTP system file access vulnerability on drone.” https://nvd.nist.gov/vuln/detail/CVE-2017-3209/. Accessed: 2021-08-07.
[9] “Busybox CVE-2017-16544.” https://nvd.nist.gov/vuln/detail/CVE-2017-16544. Accessed: 2021-08-07.
[10] Y. D. et al., “Holistic Control-Flow protection on Real-Time embedded systems with KAGE,” in Security, USENIX, 2022.
[11] A. A. Clements et al., “ACES: Automatic compartments for embedded systems,” in Security, USENIX, 2018.
[12] C. H. Kim et al., “Securing real-time microcontroller systems through customized memory view switching,” in NDSS, ISOC, 2018.
[13] A. Khan et al., “M2MON: Building an MMIO-based security reference monitor for unmanned vehicles,” in Security, USENIX, 2021.
[14] A. Abbasi et al., “Challenges in designing exploit mitigations for deeply embedded systems,” in EuroS&P, IEEE, 2019.
[15] “ARM Security Technology, Building a Secure System using TrustZone Technology,” April 2009.
[16] F. McKeen et al., “Innovative instructions and software model for isolated execution,” in ISCA, ACM/IEEE, 2013.
[17] V. Costan et al., “Sanctum: Minimal hardware extensions for strong software isolation,” in Security, USENIX, 2016.
[18] F. Brasser et al., “Tytan: Tiny trust anchor for tiny devices,” in DAC, ACM, 2015.
[19] A. Baumann et al., “Shielding applications from an untrusted cloud with Haven,” in OSDI, USENIX, 2014.
[20] A. M. Azab et al., “Hypervision across worlds: Real-time kernel protection from the ARM TrustZone secure world,” in CCS, ACM, 2014.
[21] “Open Portable Trusted Execution Environment.” https://www.op-tee.org/.
[22] “Trustonic TEE.” https://www.trustonic.com/technical-articles/what-is-a-trusted-execution-environment-tee/.
[23] “Huawei TEE.” https://www.commoncriteriaportal.org/files/epfiles/anssi-cible-cc-2020_67en.pdf.
[24] “NVIDIA TEE.” https://nv-tegra.nvidia.com/gitweb/?p=3rdparty/ote-partner/tlk.git;a=blob_plain;f=documentation/Tegra_BSP_for_Android_TLK_FOSS_Reference.pdf;hb=HEAD.
[25] “Android Trusty.” https://source.android.com/security/trusty.
[26] “Qualcomm TEE.” https://www.qualcomm.com/media/documents/files/guard-your-data-with-the-qualcomm-snapdragon-mobile-platform.pdf.
[27] M. Xu et al., “Dominance as a new trusted computing primitive for the Internet of Things,” in S&P, IEEE, 2019.
[28] F. Alder et al., “Aion: Enabling open systems through strong availability guarantees for enclaves,” in CCS, ACM, 2021.
[29] A. Thomas, S. Kaminsky, D. Lee, D. Song, and K. Asanovic, “ERTOS: Enclaves in real-time operating systems,” Woodstock, 2018.
[30] R. J. Masti et al., “Enabling trusted scheduling in embedded systems,” in ACSAC, IEEE, 2012.
[31] R. Mahfouzi et al., “Butterfly attack: Adversarial manipulation of temporal properties of cyber-physical systems,” in RTSS, IEEE, 2019.
[32] A. Li et al., “Chronos: Timing interference as a new attack vector on autonomous cyber-physical systems,” in CCS, ACM, 2021.
[33] S. Baruah et al., “Towards the design of certifiable mixed-criticality systems,” in RTAS, IEEE, 2010.
[34] A. Lyons et al., “Scheduling-context capabilities: A principled, lightweight operating-system mechanism for managing time,” in EuroSys, ACM, 2018.
[35] D. Lee, D. Kohlbrenner, S. Shinde, K. Asanović, and D. Song, “Keystone: An open framework for architecting trusted execution environments,” in EuroSys, ACM, 2020.
[36] P. Koeberl et al., “TrustLite: A security architecture for tiny embedded devices,” in EuroSys, ACM, 2014.
[37] C. L. Liu et al., “Scheduling algorithms for multiprogramming in a hard-real-time environment,” Journal of the ACM, 1973.
[38] T. Qin, P. Li, and S. Shen, “VINS-Mono: A robust and versatile monocular visual-inertial state estimator,” IEEE Transactions on Robotics.
[39] D. Kaplan et al., “AMD Memory Encryption,” White paper, 2016.
[40] E. Owusu et al., “OASIS: On achieving a sanctuary for integrity and secrecy on untrusted platforms,” in CCS, ACM, 2013.
[41] G. Dessouky et al., “CHASE: A configurable hardware-assisted security extension for real-time systems,” in ICCAD, IEEE/ACM, 2019.
[42] J. Noorman et al., “Sancus 2.0: A low-cost security architecture for IoT devices,” in TOPS, ACM, 2017.
[43] L. T. Phan et al., “CARTS: A tool for compositional analysis of real-time systems,” in SIGBED Review, ACM, 2011.
[44] R. Pan et al., “Predictable virtualization on memory protection unit-based microcontrollers,” in RTAS, IEEE, 2018.
[45] S. Pinto et al., “LTZVisor: TrustZone is the key,” in ECRTS, LIPIcs, 2019.
[46] R. I. Davis et al., “Hierarchical fixed priority preemptive scheduling,” in RTCSA, IEEE, 2019.
[47] “TrustZone implementation in Parrot Bebop drone.” https://wiki.paparazziuav.org/wiki/Bebop.
[48] “Navio2.” https://navio2.emlid.com/.
[49] A. Golchin et al., “Boomerang: Real-time I/O meets legacy systems,” in RTAS, IEEE, 2020.
[50] C. Li et al., “Prioritizing soft real-time network traffic in virtualized hosts based on Xen,” in RTAS, IEEE, 2015.
[51] “ArduPilot.” https://ardupilot.org.
[52] N. Zhang et al., “CASE: Cache-assisted secure execution on ARM processors,” in S&P, IEEE, 2016.
[53] F. Brasser et al., “Sanctuary: Arming TrustZone with user-space enclaves,” in NDSS, 2019.
[54] “ARM CCA.” https://developer.arm.com/architectures/architecture-security-features/confidential-computing.
[55] J. Noorman et al., “Sancus: Low-cost trustworthy extensible networked devices with a zero-software trusted computing base,” in Security, USENIX, 2013.
[56] S. Wan et al., “RusTEE: Developing memory-safe ARM TrustZone applications,” in ACSAC, IEEE, 2020.
[57] Z. Hua et al., “VTZ: Virtualizing ARM TrustZone,” in Security, USENIX, 2017.
[58] R. Bahmani et al., “CURE: A security architecture with customizable and resilient enclaves,” in Security, USENIX, 2021.
[59] L. Guo and F. X. Lin, “Minimal viable I/O drivers for TrustZone,” in ACSAC, IEEE, 2020.
[60] A. Dhar et al., “Protection: Root-of-trust for I/O in compromised platforms,” in NDSS, ISOC, 2020.
[61] Z. Zhou et al., “Building verifiable trusted path on commodity x86 computers,” in S&P, IEEE, 2012.
[62] M. Lentz et al., “SecCloak: ARM TrustZone-based mobile peripheral control,” in Mobisys, Applications, and Services, ACM, 2018.
[63] A. M. Azab et al., “SKEE: A lightweight secure kernel-level execution environment for ARM,” in NDSS, ISOC, 2016.
[64] J. Zhou et al., “Silhouette: Efficient protected shadow stacks for embedded systems,” in Security, USENIX, 2020.
[65] D. Kwon et al., “uXOM: Efficient execute-only memory on ARM Cortex-M,” in Security, USENIX, 2019.
[66] Z. Sun et al., “OAT: Attesting operation integrity of embedded devices,” in S&P, IEEE, 2020.
[67] S. Zhao et al., “SecTEE: A software-based approach to secure enclave architecture using TEE,” in CCS, ACM, 2019.
[68] S. Xi et al., “RT-Xen: Towards real-time hypervisor scheduling in Xen,” in EMSOFT, ACM, 2011.
[69] S. Pinto et al., “Virtualization on TrustZone-enabled microcontrollers? Voilà!” in RTAS, IEEE, 2019.
[70] D. de Niz et al., “Mixed-trust computing for real-time systems,” in RTCSA, IEEE, 2019.
[71] R. Quinonez et al., “SAVIOR: Securing autonomous vehicles with robust physical invariants,” in Security, USENIX, 2020.
[72] T. Abera et al., “C-FLAT: Control-flow attestation for embedded systems software,” in CCS, ACM, 2016.
[73] N. S. Almakhdhub et al., “μRAI: Securing embedded systems with return address integrity,” in NDSS, ISOC, 2020.
[74] A. A. Clements et al., “Protecting bare-metal embedded systems with privilege overlays,” in S&P, IEEE, 2017.
[75] R. J. Walls et al., “Control-flow integrity for real-time embedded systems,” in ECRTS, LIPIcs, 2019.
[76] T. Kim et al., “PASAN: Detecting peripheral access concurrency bugs within bare-metal embedded applications,” in Security, USENIX, 2021.
[77] “ARM CPU.” https://www.arm.com/products/silicon-ip-cpu.
[78] “SecureShield.” https://www.synopsys.com/designware-ip/processor-solutions/arc-secureshield-tech.html.
[79] “ARC-SEM.” https://www.synopsys.com/dw/doc.php/ds/cc/ARC_SEM_110_120D.pdf.
[80] C.-Y. Chen et al., “Indistinguishability prevents scheduler side channels in real-time systems,” in CCS, ACM, 2021.
[81] “BCM2835-ARM-Peripherals.” https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf.
[82] A. Vasudevan et al., “Design, implementation and verification of an extensible and modular hypervisor framework,” in S&P, IEEE, 2013.
[83] A. Tang et al., “CLKSCREW: Exposing the perils of security-oblivious energy management,” in Security, USENIX, 2017.

### Appendix A: Secure Timer Popularity

To understand the popularity of hardware secure timers, we surveyed the support of secure timers on two of the most popular embedded processor manufacturers, ARM and Synopsys, who occupy the majority of the embedded processor market shares [77], [78].

**ARM TrustZone:**
- **ARM Cortex-A:** Supports physical secure timers inside the CPU. We surveyed all ARM Cortex-A processors on the ARM product list [77], including A5, A7, A32, A34, A35, A53, A55, A65, A65AE, A72, A73, A75, A76, A76AE, A77, A78, A78AE, A78C, A710, and A510. All ARM Cortex-A processors clearly state secure physical timer support in their manuals, with a few exceptions. The A710 and A510, being ARMv9 CPUs, have incomplete documentation, and we were unable to confirm support. The earlier generation A32 and A5 CPUs also do not provide any concrete statement about support.
- **ARM Cortex-M:** The M23, M33, and M55 series, listed on the ARM official website [77], all support secure timers. Additionally, out of the nine SoCs recommended by ARM, six of them support secure timer peripherals.

**Synopsys SecureShield:**
- **EM Series:** All EM processors, including EM4, EM6, EM5D, EM7D, EM9D, EM11D, and EM22FS, have secure timer support according to their manuals.
- **SEM Series:** SEM processors have a watchdog timer that can be used to reset the processor or for other functionalities if desired when it expires [79].

### Appendix B: Realizing the Availability Hardware Abstract Layer on ARM Platforms

To take control of the platform, two key ARM features are used: the secure timer and the Fast Interrupt Request (FIQ). The secure timer is used to regain control at a specific time. For ARMv8-A (e.g., RPI3), we use the EL1 Secure Physical Timer. For ARMv8-M (e.g., LPC55S69), we use the CTimer, which offers different configuration registers for the normal and secure worlds. To prevent the normal world from interrupting, secure timer interrupts are routed to FIQ, which has higher priority than regular IRQ. A TrustZone-enabled Generic Interrupt Controller (GIC) allows all implemented interrupts to be individually defined as Secure or Non-secure through the Interrupt Security Registers set (ICDISRn) [45].

On the I/O front, peripherals are assigned to the secure world. On ARMv8-M platforms, the assignment of peripheral devices can be configured using SoC-specific controllers such as the Central Security Unit (CSU) in i.MX6 or the TrustZone Protection Controller (TZPC) in Xilinx Zynq-7100, among others [62]. While we were able to use the TrustZone features on NXP development boards to protect the peripherals, the Raspberry Pi 3, being an evaluation hardware platform, does not include secure boot or TZASC. Therefore, the I/O address configuration code is not active in our prototype for this platform.

For the physical passage of time, both the banked systick timer and the system counter in the generic timer system provide a non-mutable clock. Besides ARM TrustZone, many recently proposed TEE platforms [17], [28], [30], [18], [35] also provide the necessary hardware security primitives for RT-TEE.

### Appendix C: Case Study on Autonomous Drone

**RT-TEE** is designed to support different types of safety-critical real-time task deployments based on security and real-time policies. In the following, we will show how it can be used to protect ArduPilot, an autonomous drone controller.

**Case 1 – Flight Controller Protection:**
As shown in Figure 12, RT-TEE is used to protect the flight controller. Current commercial drones often install various third-party libraries to support different functionalities, such as video streaming and cartography, which may contain software vulnerabilities. In systems that can tolerate a large TCB, the entire flight controller can be placed in the secure world, protecting the safety-critical components from the rest of the system. From the I/O perspective, the peripherals used by the flight controller must be assigned to the secure world. Furthermore, each driver needs to be analyzed and transformed before deploying in the secure world.

**Case 2 – Fail-Safe Protection:**
As shown in Figure 12, in the second case, the objective is to ensure fail-safe operations, so only the fail-safe controller is protected. Fail-safe checkers periodically check the system status to ensure it is in a healthy condition. When the system state falls into a danger zone, a simple fail-safe default will be triggered to bring the system into safety. In this case study, we implemented the fail-safe checker along with a default fail-safe recovery landing procedure. All sensors and corresponding drivers used by the fail-safe controller are assigned and migrated to the secure world. Upon detection of a failure, the self-contained lander will take over the drone and land it.

### Appendix D: Evaluation on Different Physical Conditions

**Figure 14: Additional Control Performance with RT-TEE and Baseline w/o TEE**

- **(a) Different wind speed**
- **(b) Position difference**
- **(a) Roll command of Plane**
- **(b) Pitch command of Plane**
- **(c) Steering command of Rover**
- **(d) Throttle command of Rover**

### Appendix E: Additional Evaluation on Control Performance

To understand the potential impact of RT-TEE on different system controls across different CPS platforms, we conducted additional evaluations. For the plane, the roll command and pitch command were used to measure the control deviation. From Figure 14a and Figure 14b, we observe that the performance with RT-TEE and the baseline without TEE is almost identical. Similarly, in the rover experiment shown in Figure 14c and Figure 14d, where steering and throttle are used as metrics, the performance with RT-TEE and the baseline without TEE is also nearly identical.