### Table X: Top 5 Advertisers Terminating Our Revenue Chains, Broken Down per Injected Ad Domain

| Advertiser | Percentage of Synthetic Traffic |
|------------|---------------------------------|
| Sears      | 10%                             |
| Walmart    | 10%                             |
| Target     | 5%                              |
| Wayfair    | 4%                              |
| Overstock  | 4%                              |
| Others     | 68%                             |

#### Average Hops and Distinct Intermediaries

| Metric            | Sears | Walmart | Target | Wayfair | Overstock | Others |
|-------------------|-------|---------|--------|---------|-----------|--------|
| Avg Hops          | 3.3   | 2.9     | 2.9    | 5.1     | 4.3       | 3.8    |
| Distinct Intermediaries | 3   | 6       | 3      | 13      | 11        | 4,613  |

**Note:** The remaining set of over 3,000 advertisers is heavy-tailed, with the top 20 advertisers receiving 50% of advertising clicks.

### Impact on Major Brands

Sears and Walmart, which are impacted by all three top injected ad domains, receive 8–29% of our synthetic traffic from each injector. Other popular brands affected include eBay, Target, Wayfair, and Overstock—all online retailers specializing in consumer products. Our results highlight that major brands are negatively impacted by ad injection, though our current coverage is biased towards businesses whose product catalogs heavily overlap with Amazon, Walmart, and Google due to the popular product queries we evaluate.

### Awareness of Advertisers and Intermediaries

We examined the degree of information that advertisers and intermediaries receive about the provenance of ad traffic. To conduct this analysis, we automatically extracted encoded "affiliate IDs" embedded in each URL tied to injected ad traffic for the top five advertisers and intermediaries. These affiliate IDs indicate which ad network acquired traffic for which advertiser, facilitating payment and auditing in the ad ecosystem.

#### Key Findings

- **Advertisers:** All of the top five advertisers in our dataset have knowledge of their immediate ad relationships (e.g., the previous referrer in revenue chains). Beyond this, only one set of revenue chains includes more granular provenance information. For example, `target.com` and other brands who syndicate advertisements to `channelintelligence.com` are provided sub-syndication affiliate parameters such as "pronto df" and "pricegrabber df". These values reveal that traffic previously originated from `pronto.com` and `pricegrabber.com` before arriving at `channelintelligence.com`. Beyond this exception, we never find evidence that advertisers obtain finer-grained provenance information that could help them filter traffic deceptively sourced from ad injection. There is always at least one intermediary between the ad injector and advertiser that omits affiliate IDs tied to injectors.
  
- **Intermediaries:** The top intermediaries in our dataset show a different story. We find that intermediaries that share an immediate connection to ad injectors frequently assign a consistent affiliate ID that uniquely indicates an injection library. For some intermediaries, this affiliate ID even includes the injection library’s domain name. This consistent labeling suggests these early intermediaries have formal business relationships with ad injection entities or, at the very least, awareness of when traffic originates from an ad injector. As a result, programs like DealTime, PriceGrabber, and ShopZilla (detailed previously in Table IX) are best positioned to detect and disincentivize deceptively sourced ads. They serve as the single critical bottleneck before ad injection traffic enters the ad ecosystem and becomes indistinguishable from legitimate consumer interest.

Following our analysis, we have begun to reach out to these major intermediaries and the brands impacted by ad injection to alert them of the possibility of receiving ad injection traffic.

### Case Studies of Novel Ad Injectors

#### Superfish
Superfish is a VC-backed startup located in Palo Alto with research and development in Israel. The company reported earnings of $135K in 2010 and $35M in 2013. It focuses on visual search offerings, displaying advertisements for similar products as clients browse the web. Superfish runs its affiliate program via `similarproducts.net`, providing a single line of JavaScript that affiliates embed in browser traffic for drop-in monetization. The script supports injection into 16,925 websites, presenting additional product advertisements for each supported page. On Google, this yields a bar of images above organic search results. For Amazon, Superfish displays additional products at the bottom of the visible screen area. For other pages, Superfish displays ads as fly-in banners. The script sends a request to `superfish.com` along with parameters like `merchantName`, `documentTitle`, `pageUrl`, `language`, `country`, and `ip`. In response, `superfish.com` returns a list of images, prices, and URLs that the script then injects into the client’s DOM. Per our clickchain analysis, these ads are predominantly supported by `pgpartners.com`, `bizrate.com`, and `dealtime.com`.

#### Visadd
Visadd, registered at `visadd.com` under an anonymization service, rose in prominence from 0.5% of page views at the start of our measurement to 1.4% at the time of writing. Like other ad injectors, Visadd maintains a blacklist of properties it avoids tampering with, including `google.com`, `facebook.com`, and `ads.yahoo.com`. Outside these safe zones, the script scans for specific keywords in multiple languages. If found, the script fetches additional payloads to inject advertisements. Additionally, the script adds event listeners to every link on a page to remotely report user clicks and surfing behavior. When visiting the Visadd website, an option to uninstall the Visadd injector is available, but at the time of writing, it only calls a function `donothing(){};`.

#### Jsutils, Jscripts, & Webpagescripts
Not all ad injection scripts belong to a single identifiable company. We observe at least four scripts whose sole purpose is to provide drop-in support for several ad injectors simultaneously, referred to as meta-injectors. Examples in our dataset include `jsutils.net`, `jsutils.com`, `jscripts.org`, and `webpagescripts.net`. Each of these scripts delivers support for 17 distinct ad injection affiliate programs, including `jollywallet.com`, `tfxiq.com`, `visadd.com`, and `adultadworld.com`. These meta-injectors maximize the value of injected traffic by supporting both cost-per-click and cost-per-acquisition models. The presence of pornographic-oriented injection libraries makes up for other injection libraries that blacklist sexually explicit websites to adhere to commercial ad exchange policies. For instance, `tfxiq.com` is configured to fall back onto another round of intermediaries, including `adcash.com` and `viglink.com`, if its primary ad relationships fail to provide ad content. The end result is a browsing experience where ad injectors can profit regardless of user actions.

### Related Work

#### Fraud and Abuse in the Ad Ecosystem
Prior work has extensively explored the problem of outright fraud and abuse in ad networks, focusing on the evolution of botnets towards ad-related click fraud monetization and the impact of botnet interventions on abusive ad traffic. Other forms of abuse include the failures of current ad exchanges to detect distributed click fraud, the ability for compromised routers and opportunistic ISPs to inject ads into users’ traffic, and the market for impression fraud via ads hidden underneath other content or served in invisible windows. Researchers have proposed various solutions to detect fraudulent ad traffic, including bluff ads and anomaly detection. Future research should pay similar attention to the ad injection affiliate ecosystem, especially given the potential for malware authors to become affiliates and the possibility of ad injectors serving pop-under or hidden ads that defraud exchanges.

#### Malicious Advertisements
A related problem is the emergence of malicious advertisements that leverage ad traffic to fuel malware installs. Li et al. found that 1% of pages among the Alexa Top 90,000 served malicious advertisements. While Dong et al. proposed browser confinement schemes that allow publishers to load ads in restricted sandboxes, it falls on publishers to adopt such technologies, which are not yet readily available. Furthermore, while publishers can selectively source creatives from trustworthy ad exchanges to protect their brand, the presence of ad injectors in a user’s browsing session places all such discretion solely into the hands of the injector.

#### Detecting Website Content Modifications
Our approach for detecting ad injection draws on a history of proposed remote verification and enforcement techniques. Reis et al. proposed a technique for client-side verification of a webpage’s integrity called "web tripwires," which involves publishers including an additional piece of JavaScript in their webpages to check if the client-rendered DOM content matches what they expect. Both our and Reis’s solution contend with highly dynamic content and lack a trusted communication channel, making them vulnerable to adversaries with sufficient privileges. Seshadri et al. proposed a technique for untampered code execution on legacy systems, but whether such a technique can be extended to browser kernels to protect execution in the presence of malicious extensions remains an open challenge.

### Conclusion

In this paper, we presented a detailed investigation into the negative impact of ad injection and the ecosystem that supports it. We found that ad injection has entrenched itself as a cross-browser monetization platform, impacting more than 5% of unique daily IP addresses accessing Google—tens of millions of users around the globe. Injected ads arrive on a client’s machine through multiple unwanted and malicious vectors, with our measurements identifying 50,870 Chrome extensions and 34,407 Windows binaries, 38% and 17% of which are explicitly malicious. As part of our analysis, we alerted the Chrome Web Store of 192 deceptive ad injection extensions with 14 million users; the Chrome Web Store has since disabled the extensions. Finally, we determined that ad injectors ultimately derive a profit by delivering deceptively sourced traffic to over 3,000 brands. This traffic enters the ad ecosystem through a small bottleneck of e-commerce networks. We have since reached out and alerted the advertisers and intermediaries impacted by ad injectors.

In closing, we argue that there is no simple solution for combating deceptive ad injection. Intermediaries, website owners, and browser developers all share an important role. Specifically, the handful of e-commerce sites that share relationships with ad injectors are best positioned to prohibit deceptively sourced traffic and disincentivize the ad injection ecosystem as a whole. For example, Google’s ad exchanges expressly prohibit sourcing traffic from ads inserted into websites without the site owner’s consent. For website owners, developers can measure their own ad injection levels by executing our client-side measurement, or go one step further and prevent or revert DOM modifications produced by ad injectors. Equally important, if websites switched to HSTS, it would prevent network providers and HTTP-only binary proxies from intercepting and tampering with client traffic. Finally, browser developers must harden their environments against side-loading extensions or modifying the browser environment without user consent. Combined, these strategies represent a breadth of technical and financial countermeasures to combat deceptive ad injection.

### Acknowledgements

We thank Petr Marchenko and Aaseesh Marina for insightful feedback and support in developing our ad injection analysis pipeline. This work was supported in part by the National Science Foundation under grants 1213157, 1237265, and 1237076; by the Office of Naval Research MURI grant N000140911081 and N000141210165; by the U.S. Army Research Office MURI grant W911NF0910553; and by a gift from Google. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the sponsors.

### References

[1] Sumayah A Alrwais, Alexandre Gerber, Christopher W Dunn, Oliver Spatscheck, Minaxi Gupta, and Eric Osterweil. Dissecting Ghost Clicks: Ad Fraud via Misdirected Human Clicks. In Proceedings of the 28th Annual Computer Security Applications Conference, pages 21–30. ACM, 2012.

[2] Amazon. Best Sellers Amazon Best Sellers. http://www.amazon.com/Best-Sellers/zgbs, 2014.

[3] Adam Barth, Adrienne Porter Felt, Prateek Saxena, and Aaron Boodman. Protecting Browsers from Extension Vulnerabilities. In NDSS. Citeseer, 2010.

[4] Nico Black. Superfish Affiliate Summit East. https://www.linkedin.com/groups/Superfish-Affiliate-Summit-East-4376214.S.263442122, 2014.

[5] Juan Caballero, Pongsin Poosankam, Christian Kreibich, and Dawn Song. Dispatcher: Enabling Active Botnet Infiltration Using Automatic Protocol Reverse-Engineering. In Proceedings of the ACM Conference on Computer and Communications Security, Chicago, IL, November 2009.

[6] Chia Yuan Cho, Juan Caballero, Chris Grier, Vern Paxson, and Dawn Song. Insights From the Inside: A View of Botnet Management from Infiltration. In USENIX Workshop on Large-Scale Exploits and Emergent Threats (LEET), 2010.

[7] Devin Coldewey. Marriott Injection Ad Service. Puts An End To Shady Ad Injection Service. http://techcrunch.com/2012/04/09/marriott-puts-an-end-to-shady-ad-injection-service/, 2014.

[8] Neil Daswani and Michael Stoppelman. The Anatomy of Clickbot. A. In Proceedings of the first conference on First Workshop on Hot Topics in Understanding Botnets, 2007.

[9] Vacha Dave, Saikat Guha, and Yin Zhang. Measuring and fingerprinting click-spam in ad networks. In Proceedings of the ACM SIGCOMM 2012 conference on Applications, technologies, architectures, and protocols for computer communication, pages 175–186. ACM, 2012.

[10] Vacha Dave, Saikat Guha, and Yin Zhang. ViceROI: Catching Click-spam in Search Ad Networks. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, pages 765–776. ACM, 2013.

[11] Xinshu Dong, Minh Tran, Zhenkai Liang, and Xuxian Jiang. Ad-Sentry: Comprehensive and Flexible Confinement of JavaScript-based Advertisements. In Proceedings of the 27th Annual Computer Security Applications Conference, pages 297–306. ACM, 2011.

[12] DoubleClick. Google DoubleClick Ad Exchange (AdX) Seller Program Guidelines. http://www.google.com/doubleclick/adxseller/guidelines.html, 2014.

[13] George W. Dunlap, Samuel T. King, Sukru Cinar, Murtaza Basrai, and Peter M. Chen. ReVirt: Enabling Intrusion Analysis through Virtual-Machine Logging and Replay. In Proceedings of the 2002 Symposium on Operating Systems Design and Implementation (OSDI), pages 211–224, December 2002.

[14] Sean Ford, Marco Cova, Christopher Kruegel, and Giovanni Vigna. Analyzing and detecting malicious flash advertisements. In Computer Security Applications Conference, 2009. ACSAC’09. Annual, pages 363–372. IEEE, 2009.

[15] Hamed Haddadi. Fighting online click-fraud using bluff ads. ACM SIGCOMM Computer Communication Review, 40(2):21–25, 2010.

[16] Inc. Meet the 2014 Inc. 5000: America’s Fastest-Growing Private Companies. http://www.inc.com/profile/superfish, 2014.

[17] Ari Juels, Sid Stamm, and Markus Jakobsson. Combating click fraud via premium clicks. In USENIX Security, 2007.

[18] Alexandros Kapravelos, Chris Grier, Neha Chachra, Christopher Kruegel, Giovanni Vigna, and Vern Paxson. Hulk: Eliciting Malicious Behavior in Browser Extensions. In Proceedings of the 23rd Usenix Security Symposium, 2014.

[19] Erik Kay. Keeping chrome extensions simple. http://blog.chromium.org/2013/12/keeping-chrome-extensions-simple.html, 2013.

[20] Erik Kay. Protecting Chrome users from malicious extensions. http://chrome.blogspot.com/2014/05/protecting-chrome-users-from-malicious.html, 2014.

[21] David Kravets. Ad-injecting trojan targets Mac users on Safari, Firefox, and Chrome. http://arstechnica.com/apple/2013/03/ad-injecting-trojan-targets-mac-users-on-safari-firefox-and-chrome/, 2013.

[22] David Kravets. Comcast Wi-Fi serving self-promotional ads via JavaScript injection. http://arstechnica.com/tech-policy/2014/09/why-comcasts-javascript-ad-injections-threaten-security-net-neutrality/, 2014.

[23] Lenovo. Superfish Vulnerability. http://support.lenovo.com/us/en/product-security/superfish, February 2015.

[24] Zhou Li, Kehuan Zhang, Yinglian Xie, Fang Yu, and XiaoFeng Wang. Knowing your enemy: understanding and detecting malicious web advertising. In Proceedings of the 2012 ACM conference on Computer and Communications Security, pages 674–686. ACM, 2012.

[25] Brad Miller, Paul Pearce, Chris Grier, Christian Kreibich, and Vern Paxson. What’s clicking what? techniques and innovations of today’s clickbots. In Detection of Intrusions and Malware, and Vulnerability Assessment, pages 164–183. Springer, 2011.

[26] Paul Pearce, Vacha Dave, Chris Grier, Kirill Levchenko, Saikat Guha, Damon McCoy, Vern Paxson, Stefan Savage, and Geoffrey M Voelker. Characterizing Large-Scale Click Fraud in ZeroAccess. In Proceedings of the 21st ACM Conference on Computer and Communications Security (CCS), 2014.

[27] Niels Provos, Panayiotis Mavrommatis, Moheeb Abu Rajab, and Fabian Monrose. All your iFRAMEs point to us. In Proceedings of the 17th Usenix Security Symposium, 2008.

[28] Moheeb Abu Rajab, Lucas Ballard, Noé Lutz, Panayiotis Mavrommatis, and Niels Provos. CAMP: Content-Agnostic Malware Protection. In Symposium on Network and Distributed System Security (NDSS), 2013.

[29] Charles Reis, Steven D Gribble, Tadayoshi Kohno, and Nicholas C Weaver. Detecting In-Flight Page Changes with Web Tripwires. In Usenix Symposium on Networked Systems Design and Implementation (NSDI), 2008.

[30] Sambreel Holdings, LLC vs. Facebook, Inc. http://www.kotchen.com/Sambreel-v-Facebook/PI Declaration Miller.pdf, 2012.

[31] Arvind Seshadri, Mark Luk, Elaine Shi, Adrian Perrig, Leendert van Doorn, and Pradeep Khosla. Pioneer: Verifying Integrity and Guaranteeing Execution of Code on Legacy Platforms. In Proceedings of ACM Symposium on Operating Systems Principles (SOSP), 2005.

[32] Kevin Springborn and Paul Barford. Impression fraud in on-line advertising via pay-per-view networks. In 22nd USENIX Security Symposium, 2013.

[33] Brett Stone-Gross, Ryan Stevens, Apostolis Zarras, Richard Kemmerer, Chris Kruegel, and Giovanni Vigna. Understanding Fraudulent Activities in Online Ad Exchanges. In Proceedings of the 2011 ACM SIGCOMM conference on Internet measurement conference, pages 279–294. ACM, 2011.

[34] Nevena Vratonjic, Julien Freudiger, and Jean-Pierre Hubaux. Integrity of the web content: The case of online advertising. In CollSec, 2010.

[35] Walmart. Popular Products - Walmart. http://www.walmart.com/c/popular/, 2014.

[36] WC3. Content Security Policy 1.0. http://www.w3.org/TR/CSP/, 2012.