### For Over-the-Limit Transactions on Apple Pay Express Transit

Clearing the CVM bit in the TTQ (without modifying the CTQ) results in a failed transaction on the reader side. This indicates that the attack does not work against Apple Pay.

The attack described by Basin et al. [2] is a different approach to bypassing the CVM limit for plastic cards. It involves clearing the online PIN verification required bit and setting the CDCVM performed bit in the CTQ, thereby tricking the EMV reader into believing that CDCVM has been performed. Our Apple Pay Express Transit CVM limit escalation also targets the CTQ. However, in our case, the online PIN verification bit is not set. We target the CDCVM bit in the CTQ in two places: it first appears in the response to the GPO message (under tag 9F6C) and in a record template as part of the CARD (tag 9F69). The CDCVM bit must be set in both these EMV tags; otherwise, the transaction will fail.

### Side Note: Galloway Attack on Google Pay

We confirm that the Galloway attack still works against Google Pay (Pixel 5) two years after it was publicized [7]. However, the Basin et al. attack does not work against Google Pay. When an over-the-limit transaction amount and a set CVM bit in the TTQ are combined, the phone terminates the transaction after receiving the GPO message with the code 6986 (Command not allowed), and the CTQ is never sent. This suggests that Google detects and rejects any Visa transaction that requests authentication in the TTQ unless the phone has been unlocked. Unfortunately, Apple Pay lacks this defense.

### Formal Verification

To analyze these protocols, we use the Tamarin prover [18], a tool that supports symbolic/Dolev-Yao analysis [29], [30]. Tamarin models are transition systems over a multi-sorted term algebra, operating on the semantics of multiset rewriting logic [31]. Security properties can be expressed as lemmas about the labels on the rewrite rules. Tamarin can automatically prove that a security property holds or provide a counterexample, i.e., find an attack.

#### Verifying Visa in Apple & Samsung Pay

We use formal verification to show that our attack is exhibited on the EMV specification of Visa used inside an Apple Pay app but not inside the Samsung Pay app. We formally demonstrate that the proposed countermeasures to Apple and Visa stop the attack. Finally, we show that our attack cannot be completely mitigated by any/all of the countermeasures, i.e., it is still possible to relay to terminals that share the same MCC.

To account for a modular treatment of the countermeasures, e.g., Apple and Samsung Pay differing only in the answers to GPO commands based on the value inside this message, etc., the Tamarin file can be found in Mobile Visa.spthy in [9].

**Tamarin Model for Mobile Visa:**
- **Starting Point:** We used the Tamarin models for contactless Visa "plastic cards" by Basin et al. [2].
- **Model Features:**
  - Both EMV transaction-authorization modes ("DDA" with SDAD, used in mobile transport mode, and "EMV" without SDAD, used in non-transport mobile).
  - Transaction values above and below the limit ("high" vs. "low").
- **Extensions/Modifications:**
  - Terminals: A "Create_Terminal" rule creates terminals as either "transport" or "non-transport". Transport terminals can send "magic bytes" observed in TfL. Terminals can send "zero", "low", and "high" values.
  - Cards/Mobile Apps: Rules are created generically and modularly, with the same transition-rule applying to both behaviors wherever possible. A ComputeCVR rule implements the mobile-app logic of judging if CDCVM is needed based on the "magic bytes" received and the value sent in the GPO command.
  - Bank: Three transaction-processing rules account for different possible behaviors: (case1) the bank does not check the CVR and format values inside the IAD, (case2) the bank checks the CVR and format values but not against the MCC, and (case3) the bank checks all of the IAD, MCC, and transaction data.

**Verification:**
- Numerous sanity-check lemmas ensure that all and only faithful behaviors w.r.t. Apple/Samsung, transport/non-transport, and values are present.
- Lemmas proved/disproved:
  1. The Apple-Pay attack is found via falsifying the "all-traces" payment-security lemma1.a, where the bank does not check the IAD, and proving an "exist-trace" lemma1.b.
  2. Samsung Pay does not suffer from the mode-abusing payment attack (via proving an "all-traces" payment-security lemma2, quantifying over traces of Handset(’samsung’)).
  3. Either of our two countermeasures stops the Apple attack: the bank checking the CVR (lemma3) and the bank checking the MCC against the IAD-format (lemma4).
  4. It is still possible to relay a transaction from a transport terminal to another transport terminal if they share the same MCC (lemma5).

### Verifying Mastercard in Apple & Samsung Pay

We use Tamarin to verify that no similar attack is possible against express transit mode for Mastercard on Apple Pay. The Tamarin file can be found in Mobile Mastercard.spthy in [9].

**Model Features:**
- Based on the work of Basin et al. [2], we add:
  - A more detailed IAD that encodes if the device used user authentication (CDCVM) or not.
  - Devices may indicate in the AIP that the device supports CDCVM but might not use it.
  - Merchant Category Code (MCC).
- Experiments and conversations with Mastercard's security team indicate that all these values are checked.
- Simplifications: We only model Mastercard with a SDAD and consider two payment amounts, a low and a high value.

**Verification:**
- For uncompromised Mastercard Apple Pay devices, if the bank accepts a high transaction amount, the device must have used CDCVM user authentication.
- To show that the Visa Apple Pay attack is not possible against Mastercard, we demonstrate that the bank will only accept a non-CDCVM transaction from a terminal with a transport MCC code, limiting relay attacks to other transit terminals.

### Visa’s Level 1-Relay Protection

Visa’s solution relies on the inability of the attacker to change the UID of a card or mobile phone, referred to as L1SessionParameter, and the difficulty of relaying Level 1 messages due to their timing constraints. However, setting a desired UID on some mobile devices is possible if the device is rooted. This has been introduced in Android 4.4, allowing an app to emulate a card (or NFC tag) and talk directly to an NFC reader [33].

**Experiment:**
- We tested a rooted Nexus 5 phone running its stock firmware (Android 4.4) and CyanogenMod 14.1 (Android 7.1.1). On both versions, we successfully set any UID by editing the NFC configuration file.
- By building on the work of [26], we modified their Android relay apps to add an extra step before any EMV messages were exchanged. We ran the CardEmulator app on the Nexus 5 phone and used a Nokia 6 phone to run the TerminalEmulator app. A server forwards data between the apps.
- The complete set of steps for setting the UID on the phone takes approximately 181ms. After this, the EMV level relay can proceed as normal.

**Conclusion:**
- With this attack, we can break Visa’s relay protection protocol. The EMV reader will decrypt the L1SessionParameter, and it will match the UID of the phone. This is possible because we can set a phone’s UID as desired, and there is no round-trip timing measurement within Visa’s protocol.

### Level 1 and Level 3 Timing in EMV

We experimented with the reliability of timing at Level 1 and Level 3, and the feasibility of relaying at these levels. We tested several commercial EMV cards (Visa and Mastercard) and a prototype test PayPass-RRP card.

**Findings:**
- Level 1 exchanges are much faster and show less variation compared to Level 3.
- Level 3 variation in timing is considerable for all EMV cards tested, and more so for a proprietary card implementing a test version of PayPass-RRP.
- We propose a new Level 1 protocol for relay protection in EMV, which improves on both Visa’s and Mastercard’s current solutions for relay counteraction.

**Experimental Design:**
- We varied the yaw angle and distance between the card and reader to capture variations in contactless payments.
- We tested at angles of 0°, 45°, 90°, 135°, and 180°, and at distances of 5mm, 11.4mm, 21mm, 24mm, 27.4mm, and 30.6mm.
- We took 20 measurements for each physical configuration, making a total of 600 tests.

**Hardware/Software Setup:**
- We used an Advanced Card Systems ACR122u reader and a Proxmark to sniff the transaction and obtain full traces of the exchanges.

This comprehensive analysis and testing provide insights into the vulnerabilities and potential countermeasures for EMV-based contactless payment systems.