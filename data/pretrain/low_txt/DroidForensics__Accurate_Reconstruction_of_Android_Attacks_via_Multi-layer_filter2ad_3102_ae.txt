### Techniques for Monitoring User Activities

Techniques to monitor user activities, such as application installation and removal, web browser history, calendar, call logs, and contact lists, are essential for ensuring the security and integrity of mobile devices. 

### Android Taint Tracking

Dynamic taint tracking and information flow analysis techniques for Android, as proposed in various studies [31, 25, 65, 62], have been developed to detect information leaks and privilege escalation attacks. These approaches first assign tags to provenance sources (e.g., private data objects) and propagate these tags through each instruction based on dependencies captured during system execution. If a provenance tag reaches a sink node (e.g., an outgoing network socket or an SMS message), it indicates a potential leak of private information. However, taint tracking techniques typically require instruction-level monitoring, which can cause significant runtime overhead. They often necessitate emulator-based instrumentation platforms like QEMU [22]. Taint tracking primarily focuses on the data flow (what-provenance), whereas forensic analysis, including DroidForensics, captures both what- and how-provenance. Our system is designed for forensic logging and, compared to taint tracking, operates directly on real Android devices with lower runtime overhead.

### Other Android Analysis Techniques

#### Static Analysis
Static analysis techniques [47, 50, 34, 25, 20] can be used to understand the behavior of Android applications by analyzing APK or Java code to detect potentially malicious behaviors. These static techniques complement DroidForensics, as they can provide hints that enhance runtime forensic logging for potentially malicious code regions.

#### Memory Forensics
Android memory forensics techniques [60, 59, 19] aim to reconstruct the application or device states from a smartphone's memory image. The goal is to recover the current state of the device when the memory was dumped, allowing users to acquire important evidence such as photos, application UIs, or authentication credentials. DroidForensics complements these techniques by logging runtime behaviors to reconstruct the execution. Zhang et al. [67] proposed a machine learning approach to analyze network traffic on Android devices to detect stealthy malware activities.

### Recording-and-Replay Based Attack Forensics

Recording-and-replay based attack forensics are highly useful because they allow users to replay malicious executions multiple times. Recently, record-and-replay techniques for Android applications have been studied in the software engineering community to aid in application debugging [36, 39, 40, 55]. Tools like RERAN [36] and Mosaic [39] use Android SDKâ€™s `getevent` tool to capture low-level event streams, including graphical user interface (GUI) gestures (e.g., swipe, zoom, pinch, multi-touch) and sensor events. However, these tools do not support inputs from other devices such as GPS, microphone, or network, and they cannot record-and-replay sophisticated activities [33, 58, 23, 26]. VALERA [40] statically instruments APK files to capture Android API calls using a bytecode rewriting tool, but it does not support native code execution [61, 17, 56, 52] and dynamic code loading [54, 68, 32, 57]. Mobiplay [55] is a client-server-based recording and replay system where Android applications run on a server that emulates the exact same environment as the mobile phone, and the server transfers the GUI display to the mobile device for user interaction.

### Conclusion

In this paper, we presented DroidForensics, a multi-layer forensic logging technique for Android. DroidForensics captures important Android events from the Android API, Binder, and system call layers. The API logger collects information about Android API calls containing high-level semantics of an application. The Binder logger captures inter-process communications, representing causal relations between processes, and the system call logger efficiently monitors low-level system events. We also developed an easy-to-use interface for Android attack investigation, allowing users to compose SQL-like queries to inspect attacks, and DroidForensics provides causal graphs for iterative refinement of queries based on previous results.

Our experiments showed that DroidForensics has low runtime overhead (2.9% on average) and low space overhead (up to 168 MB over 24 hours) on Nexus 6 and Nexus 9 devices. We evaluated DroidForensics with 30 real-world Android malwares, and the results demonstrated its effectiveness in reconstructing Android attacks. Compatibility tests indicated that DroidForensics maintains the same level of compatibility as the original Android.

### Acknowledgment

We thank the anonymous reviewers for their insightful comments. This research was partially supported by the United States Air Force and Defense Advanced Research Agency (DARPA) under Contract No. FA8650-15-C-7562 and funds from the University of Cincinnati CECH. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of our sponsors.

### References

[1] 3dmark. https://www.futuremark.com/benchmarks/3dmark/android/.
[2] Android compatibility test suite (CTS). https://source.android.com/compatibility/cts/.
[3] Antutu. http://www.antutu.com/en/index.shtml.
[4] Auditdandroid. https://github.com/nwhusted/AuditdAndroid.
[5] Binder IPC mechanism. http://www.angryredplanet.com/~hackbod/openbinder/docs/html/BinderIPCMechanism.html.
[6] Contagio mobile. http://contagiominidump.blogspot.com.es/.
[7] Discomakr. https://play.google.com/store/apps/details?id=ch.ethz.disco.gino.androidbenchmarkaccessibilityrecorder&hl=en/.
[8] Dtrace. http://dtrace.org/blogs/.
[9] Errno - number of last error. http://man7.org/linux/man-pages/man3/errno.3.html.
[10] PCMark for Android. https://www.futuremark.com/benchmarks/pcmark-android/.
[11] Redhat Linux audit. https://people.redhat.com/sgrubb/audit/.
[12] Sysdig. http://www.sysdig.org/.
[13] Tabletmark. https://bapco.com/products/tabletmark/.
[14] Trojan:android/avpass.c. https://www.f-secure.com/v-descs/trojan_android_avpass_c.shtml.
[15] Using the Linux kernel tracepoints. https://www.kernel.org/doc/Documentation/trace/tracepoints.txt/.

[16] Y. Aafer, W. Du, and H. Yin. DroidAPIMiner: Mining API-level features for robust malware detection in Android. In SecureComm '13. 2013.
[17] V. Afonso, A. Bianchi, Y. Fratantonio, A. Doupe, M. Polino, P. de Geus, C. Kruegel, and G. Vigna. Going Native: Using a Large-Scale Analysis of Android Apps to Create a Practical Native-Code Sandboxing Policy. In NDSS '16.
[18] P. Ammann, S. Jajodia, and P. Liu. Recovery from Malicious Transactions. IEEE Trans. on Knowl. and Data Eng., 2002.
[19] D. Apostolopoulos, G. Marinakis, C. Ntantogian, and C. Xenakis. Discovering Authentication Credentials in Volatile Memory of Android Mobile Devices. In Collaborative, Trusted and Privacy-Aware e/m-Services, 2015.
[20] D. Arp, M. Spreitzenbarth, H. Malte, H. Gascon, and K. Rieck. Drebin: Effective and Explainable Detection of Android Malware in Your Pocket. In NDSS '14.
[21] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. FlowDroid: Precise Context, Flow, Field, Object-Sensitive and Lifecycle-Aware Taint Analysis for Android Apps. In PLDI '14.
[22] F. Bellard. QEMU, a Fast and Portable Dynamic Translator. In USENIX ATEC '05.
[23] A. Bianchi, J. Corbetta, L. Invernizzi, Y. Fratantonio, C. Kruegel, and G. Vigna. What the App Is That? Deception and Countermeasures in the Android User Interface. In S&P '15.
[24] K. D. Bowers, C. Hart, A. Juels, and N. Triandopoulos. PillarBox: Combating Next-Generation Malware with Fast Forward-Secure Logging. In RAID '14.
[25] Y. Cao, Y. Fratantonio, A. Bianchi, M. Egele, C. Kruegel, G. Vigna, and Y. Chen. EdgeMiner: Automatically Detecting Implicit Control Flow Transitions through the Android Framework. In NDSS '15.
[26] Q. A. Chen, Z. Qian, and Z. M. Mao. Peeking into Your App Without Actually Seeing It: UI State Inference and Novel Android Attacks. In Usenix Security '14.
[27] J. Chow, B. Pfaff, T. Garfinkel, K. Christopher, and M. Rosenblum. Understanding Data Lifetime via Whole System Simulation. In SSYM'04.
[28] CVE-2015-3864. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3864.
[29] D. Devecsery, M. Chow, X. Dou, J. Flinn, and P.M. Chen. Eidetic Systems. In OSDI '14.
[30] M. Dietz, A. Shu, and D. S. Wallach. Quire: Lightweight Provenance for Smart Phone Operating Systems. In Usenix Security '11.
[31] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. In OSDI'10.
[32] L. Falsina, Y. Fratantonio, S. Zanero, C. Kruegel, G. Vigna, and F. Maggi. Grab 'n Run: Secure and Practical Dynamic Code Loading for Android Applications. In ACSAC '15.
[33] E. Fernandes, Q. Chen, J. Paupore, G. J. Essl, A. Halderman, Z. M. Mao, and A. Prakash. Android UI Deception Revisited: Attacks and Defenses. In FC '16.
[34] Y. Fratantonio, A. Bianchi, W. Robertson, E. Kirda, C. Kruegel, and G. Vigna. Triggerscope: Towards Detecting Logic Bombs in Android Applications. In S&P '16.
[35] A. Goel, K. Po, K. Farhadi, Z. Li, and E. de Lara. The Taser Intrusion Recovery System. In SOSP '05.
[36] L. Gomez, I. Neamtiu, T. Azim, and T. Millstein. RERAN: Timing- and Touch-Sensitive Record and Replay for Android. In ICSE '13.
[37] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic Detection of Capability Leaks in Stock Android Smartphones. In NDSS '12.
[38] J. Grover. Android Forensics: Automated Data Collection and Reporting from a Mobile Device. Digit. Investig., 2013.
[39] M. Halpern, Y. Zhu, R. Peri, and V. J. Reddi. Mosaic: Cross-Platform User-Interaction Record and Replay for the Fragmented Android Ecosystem. In ISPASS '15.
[40] Y. Hu, T. Azim, and I. Neamtiu. Versatile Yet Lightweight Record-and-Replay for Android. In OOPSLA '15.
[41] X. Jiang, A. Walters, D. Xu, E. H. Spafford, F. Buchholz, and Y.-M. Wang. Provenance-Aware Tracing of Worm Break-In and Contaminations: A Process Coloring Approach. In ICDCS '06.
[42] T. Kim, X. Wang, N. Zeldovich, and M. F. Kaashoek. Intrusion Recovery Using Selective Re-Execution. In OSDI'10.
[43] S. T. King and P. M. Chen. Backtracking Intrusions. In SOSP '03.
[44] S. T. King, Z. M. Mao, D. G. Lucchetti, and P. M. Chen. Enriching Intrusion Alerts Through Multi-Host Causality. In NDSS '05.
[45] K. H. Lee, X. Zhang, and D. Xu. High Accuracy Attack Provenance via Binary-Based Execution Partition. In NDSS '13.
[46] K. H. Lee, X. Zhang, and D. Xu. LogGC: Garbage Collecting Audit Log. In CCS '13.
[47] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: Statically Vetting Android Apps for Component Hijacking Vulnerabilities. In CCS '12.
[48] S. Ma, K. H. Lee, C. H. Kim, J. Rhee, X. Zhang, and D. Xu. Accurate, Low Cost, and Instrumentation-Free Security Audit Logging for Windows. In ACSAC '15.
[49] S. Ma, X. Zhang, and D. Xu. ProTracer: Towards Practical Provenance Tracing by Alternating Between Logging and Tainting. In NDSS '16.
[50] C. Mann and A. Starostin. A Framework for Static Detection of Privacy Leaks in Android Applications. In SAC '12.
[51] G. A. Marson and B. Poettering. Practical Secure Logging: Seekable Sequential Key Generators. In ESORICS '13.
[52] C. Mulliner, W. Robertson, and E. Kirda. VirtualSwindle: An Automated Attack Against In-App Billing on Android. In AsiaCCS '14.
[53] J. Newsome and D. X. Song. Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software. In NDSS '05.
[54] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna. Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications. In NDSS '14.
[55] Z. Qin, Y. Tang, E. Novak, and Q. Li. MobiPlay: A Remote Execution Based Record-and-Replay Tool for Mobile Applications. In ICSE '16.
[56] V. Rastogi, Y. Chen, and X. Jiang. Catch Me If You Can: Evaluating Android Anti-Malware Against Transformation Attacks. Trans. Info. For. Sec., 2014.
[57] V. Rastogi, R. Shao, Y. Chen, X. Pan, S. Zou, and R. Riley. Are These Ads Safe: Detecting Hidden Attacks Through the Mobile App-Web Interfaces. In NDSS '16.
[58] C. Ren, Y. Zhang, H. Xue, T. Wei, and P. Liu. Towards Discovering and Understanding Task Hijacking in Android. In Usenix Security '15.
[59] B. Saltaformaggio, R. Bhatia, Z. Gu, X. Zhang, and D. Xu. Guitar: Piecing Together Android App GUIs from Memory Images. In CCS '15.
[60] B. Saltaformaggio, R. Bhatia, X. Zhang, D. Xu, and G. G. R. III. Screen After Previous Screens: Spatial-Temporal Recreation of Android App Displays from Memory Images. In Usenix Security '16.
[61] M. Sun and G. Tan. NativeGuard: Protecting Android Applications from Third-Party Native Libraries. In WiSec '14.
[62] M. Sun, T. Wei, and J. C.S.Lui. TaintART: A Practical Multi-Level Information-Flow Tracking System for Android Runtime. In CCS '16.
[63] K. Tam, S. J. Khan, A. Fattori, and L. Cavallaro. CopperDroid: Automatic Reconstruction of Android Malware Behaviors. In NDSS '15.
[64] F. Wei, S. Roy, X. Ou, and Robby. Amandroid: A Precise and General Inter-Component Data Flow Analysis Framework for Security Vetting of Android Apps. In CCS '14.
[65] M. Xia, L. Gong, Y. Lyu, Z. Qi, and X. Liu. Effective Real-Time Android Application Auditing. In S&P '15.
[66] L. K. Yan and H. Yin. DroidScope: Seamlessly Reconstructing the OS and Dalvik Semantic Views for Dynamic Android Malware Analysis. In Usenix Security '12.
[67] H. Zhang, D. D. Yao, and N. Ramakrishnan. Causality-Based Sensemaking of Network Traffic for Android Application Security. In AISec '16.
[68] Y. Zhauniarovich, M. Ahmad, O. Gadyatskaya, B. Crispo, and F. Massacci. Stadyna: Addressing the Problem of Dynamic Code Updates in the Security Analysis of Android Applications. In CODASPY '15.
[69] Y. Zhou and X. Jiang. Detecting Passive Content Leaks and Pollution in Android Applications. In NDSS '12.