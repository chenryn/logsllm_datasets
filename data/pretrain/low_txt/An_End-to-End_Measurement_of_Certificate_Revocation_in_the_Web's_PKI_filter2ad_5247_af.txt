### Optimized Text

#### Revoked Certificates and CRLSets
The focus is on the number of revoked certificates, which is relatively easy to determine, rather than the number of newly issued certificates, which is unknown and significantly larger. It's important to note that this does not account for the time required to push updated CRLSets to clients, which can extend the window of vulnerability.

**Figure 10: Vulnerability Duration Using CRLSets**
- **Description**: This figure illustrates the number of days clients are vulnerable to revoked certificates using CRLSets.
- **Observation**: Revoked certificates on covered CRLs are added quickly (within a day), but many are removed from the CRLSet well before they expire.

#### Bloom Filter-Based Revocation List
As a proof-of-concept, we analyze the characteristics of a Bloom Filter-based revocation list. Figure 11 examines the trade-offs between filter size \( m \), the number of revoked certificates inserted into the filter \( n \), and the false positive rate \( p \). The number of hash functions \( k \) is calculated using the optimal formula \( k = \left\lceil \frac{m}{n} \log 2 \right\rceil \).

**Figure 11: Comparison of Bloom Filters and CRLSets**
- **Advantages**: The grey region in the figure shows the minimum and maximum revocations covered by CRLSets over time. For the same maximum file size (256 KB), our Bloom Filter can store an order of magnitude more revocations with only a 1% false positive rate.
- **Example**: A 2 MB Bloom Filter can cover 1.7 million revocations at this false positive rate, representing 15% of all revocations across all CRLs in our dataset.

These results align with Langley's [25] examination of the suitability of Bloom Filters for distributing revocation information. Bloom Filters show significant promise as a mechanism for dramatically increasing the coverage of CRLSets at little cost to clients. Langley suggests that using a variant called Golomb Compressed Sets [17] may further reduce space requirements.

#### Summary
In summary, CRLSets have limited coverage, and their coverage of revoked certificates is diminishing over time. They are updated frequently but experience outages, leaving browsers vulnerable to unexpired revoked certificates. While CRLSets offer several benefits, developers have chosen to provide security for only a small fraction of sites to decrease the bandwidth required for disseminating revocation information, leaving the majority of popular sites uncovered.

### Related Work

#### SSL Certificate Ecosystem
There has been extensive research on the SSL certificate ecosystem, ranging from the contents of different browser/OS root stores [36, 50] to the trust relationships between CAs [14] and the patterns of certificates advertised by servers [22]. Durumeric et al. [14] briefly examine certificate revocation, and our work builds on theirs by examining the dynamics of revocation behavior, different revocation protocols, and the cost of obtaining revocation information.

Researchers have proposed ideas to reduce the level of trust placed in CAs. Significant recent work has focused on increasing the transparency of the SSL ecosystem [24, 29, 30, 39, 43], leading to better accountability. For example, the Certificate Transparency Project [29] introduces public logs to monitor all certificates issued by CAs. Others have proposed alternate architectures to the current CA-based system [9, 12, 47], often requiring modifications to both servers and clients. The DANE [47] proposal, for instance, allows the owner of a DNS domain to distribute their public keys via DNS itself, relying on DNSSEC to secure the binding.

#### Studying and Improving Revocations
There has been significant debate over the effectiveness of certificate revocation in practice [27, 28, 32], and researchers have attempted to improve the certificate revocation process and dissemination mechanisms. Proposals include very short certificate lifetimes [46], making revoking a certificate as easy as not renewing it. Schulman et al. [42] proposed a broadcast system that disseminates revocation data over FM radio.

Two recent security incidents (a Debian vulnerability and the Heartbleed bug) provided opportunities to study whether site operators who should revoke their certificates actually do so [13, 51, 52]. The results are disheartening, as only around 10% of vulnerable certificates were correctly revoked. Our work complements these studies by looking at a larger set of certificates over a longer period, investigating the burden of disseminating revocation information on CAs, and exploring when clients obtain this information.

#### Client-Side Certificate Validation
Much work has gone into understanding client-side behavior when creating SSL connections. Recent studies have shown that many non-browser software pieces do not correctly implement SSL checks, often due to misuse of SSL APIs [18, 19]. Others have shown that SSL libraries themselves are buggy [10]. Because browsers often ask users whether to proceed when the SSL connection is suspicious, other work has focused on how browsers present warnings and how users react [6, 7]. These results highlight the difficulty in correctly implementing SSL validation, and our results show that this situation is further complicated by browsers that decline to check revocation information at all.

The GRC browser revocation test [21] is similar to our "test suite," but ours is more comprehensive. As a result, our conclusions differ: while Firefox performed well on their test, we found that Firefox fails in other configurations of certificate chains/revocation protocols.

### Concluding Discussion

Certificate revocation is a necessary component of any PKI, but it comes with costs, both real and perceived. CAs carry the cost of disseminating revocation information, while browsers risk increased web page load times. In the trade-off between low communication overheads and security, both ends of certificate revocation (those who issue and those who fetch) are naturally tempted towards the former.

Indeed, the utility of revocations has been debated and doubted [28] by the security community, but these debates have largely depended on anecdotal CA and browser behavior. We have presented an empirical measurement of the options available to website administrators, CAs, and browsers in terms of the communication overhead costs they impose and the extent to which they are currently being employed.

Overall, our results show that there is extensive inaction regarding certificate revocation in today's Web PKI. While many certificates are revoked (over 8% of fresh certificates and almost 1% of alive certificates), many web browsers either fail to check certificate revocation information or soft-fail by accepting a certificate if revocation information is unavailable.

On the positive side, our results also demonstrate several clear paths to improvement. To reduce CRL sizes, CAs can maintain more, smaller CRLs. OCSP Stapling is a promising improvement, as it reduces CA bandwidth costs and web page load times. A more pervasive deployment of OCSP Stapling, at both websites and browsers, could lead to an immediate improvement in user security at little additional performance cost, particularly if the Multiple OCSP Staple Extension [37] were adopted.

Finally, a straightforward modification to CRLSets could increase their coverage by several orders of magnitude. From these results, we conclude that certificate revocation should not be given up on. It serves a critical yet overlooked role that, with proper support from all parties, can be achieved at a cost far outweighed by the benefits. Continued measurement and validation of future browsers will be of utmost importance, and to this end, we have made our data and browser test suite publicly available at http://www.sslresearch.org.

### Acknowledgments
We thank the anonymous reviewers for their helpful comments. This research was supported by NSF grants CNS-1054233, CNS-1409191, CNS-1319019, CNS-1421444, and CNS-1345284, by USAF award FA8750-14-2-0150, and by the NSA as part of a Science of Security lablet.

### References
[1] Network Security Services. Mozilla Developer Network, 2014. http://mzl.la/1DRKqGZ.
[2] CRLSets. The Chromium Projects, 2015. http://bit.ly/1JPsUeC.
[3] Network Stack. The Chromium Projects, 2015. http://bit.ly/1GYuMhE.
[4] B. Andrei and M. Michael. Network applications of bloom filters: A survey. Int. Math., 1(4), 2004.
[5] C. Arthur. DigiNotar SSL certificate hack amounts to cyberwar, says expert. The Guardian. http://www.theguardian.com/technology/2011/sep/05/diginotar-certificate-hack-cyberwar.
[6] D. Akhawe and A. P. Felt. Alice in Warningland: A Large-scale Field Study of Browser Security Warning Effectiveness. USENIX Security, 2013.
[7] D. Akhawe, B. Amann, M. Vallentin, and R. Sommer. Here’s My Cert, So Trust Me, Maybe?: Understanding TLS Errors on the Web. WWW, 2013.
[8] An Evaluation of the Effectiveness of Chrome’s CRLSets. Gibson Research Corporation. https://www.grc.com/revocation/crlsets.htm.
[9] A. Bates, J. Pletcher, T. Nichols, B. Hollembaek, and K. R.B. Butler. Forced Perspectives: Evaluating an SSL Trust Enhancement at Scale. IMC, 2014.
[10] C. Brubaker, S. Jana, B. Ray, S. Khurshid, and V. Shmatikov. Using Frankencerts for Automated Adversarial Testing of Certificate Validation in SSL/TLS Implementations. IEEE S&P, 2014.
[11] D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley, and W. Polk. Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile. RFC 5280, IETF, 2008.
[12] Convergence. http://convergence.io.
[13] Z. Durumeric, J. Kasten, D. Adrian, J. A. Halderman, M. Bailey, F. Li, N. Weaver, J. Amann, J. Beekman, M. Payer, and V. Paxson. The Matter of Heartbleed. IMC, 2014.
[27] A. Langley. Revocation still doesn’t work. 2014. https://www.imperialviolet.org/2014/04/29/revocationagain.html.
[28] A. Langley. No, don’t enable revocation checking. 2014. https://www.imperialviolet.org/2014/04/19/revchecking.html.
[29] B. Laurie, A. Langley, and E. Kasper. Certificate Transparency. 2013. https://tools.ietf.org/html/rfc6962.
[30] S. Matsumoto, P. Szalachowski, and A. Perrig. Deployment Challenges in Log-based PKI Enhancements. EuroSec, 2015.
[31] Mozilla piles on China’s SSL cert overlord: We don’t trust you either. http://bit.ly/1GBPwfG.
[32] NetCraft. How certificate revocation (doesn’t) work in practice. 2013. http://news.netcraft.com/archives/2013/05/13/how-certificate-revocation-doesnt-work-in-practice.html.
[33] NetCraft. OCSP Server Performance in April 2013. 2013. http://news.netcraft.com/archives/2013/05/23/ocsp-server-performance-in-april-2013.html.
[34] D. Olivier. ASN.1 communication between heterogeneous systems. Morgan Kaufmann, 2001.
[35] OS X Yosemite: List of available trusted root certificates. https://support.apple.com/en-us/HT202858.
[36] H. Perl, S. Fahl, and M. Smith. You Won’t Be Needing These Any More: On Removing Unused Certificates from Trust Stores. FC, 2014.
[37] Y. Pettersen. The Transport Layer Security (TLS) Multiple Certificate Status Request Extension. RFC 6961 (Proposed Standard), IETF, 2013.
[38] Qualys SSL Pulse. https://www.trustworthyinternet.org/ssl-pulse/.
[39] M. D. Ryan. Enhanced Certificate Transparency and End-to-End Encrypted Mail. NDSS, 2014.
[40] Rapid7 SSL Certificate Scans. https://scans.io/study/sonar.ssl.
[14] Z. Durumeric, J. Kasten, M. Bailey, and J. A. Halderman. Analysis of the HTTPS Certificate Ecosystem. IMC, 2013.
[15] C. Ellison and B. Schneier. Ten Risks of PKI: What You’re not Being Told about Public Key Infrastructure. Computer Security Journal, 16(1), 2000.
[16] EFF SSL Observatory. https://www.eff.org/observatory.
[17] P. Felix, S. Peter, and S. Johannes. Cache-, hash- and space-efficient bloom filters. Experimental Algorithms, Springer, 2007.
[18] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner, B. Freisleben, and M. Smith. Why Eve and Mallory Love Android: An Analysis of Android SSL (in)Security. CCS, 2012.
[19] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and V. Shmatikov. The Most Dangerous Code in the World: Validating SSL Certificates in Non-browser Software. CCS, 2012.
[20] P. Gutmann. Engineering Security. 2014. https://www.cs.auckland.ac.nz/~pgut001/pubs/book.pdf.
[41] Revoking Intermediate Certificates: Introducing OneCRL. Mozilla Security Blog. http://mzl.la/1zLFp7M.
[42] A. Schulman, D. Levin, and N. Spring. RevCast: Fast, Private Certificate Revocation over FM Radio. CCS, 2014.
[43] P. Szalachowski, S. Matsumoto, and A. Perrig. PoliCert: Secure and Flexible TLS Certificate Management. CCS, 2014.
[44] S. Santesson, M. Myers, R. Ankney, A. Malpani, S. Galperin, and C. Adams. X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP. RFC 6960 (Proposed Standard), IETF, 2013.
[45] StartSSL: Frequently Asked Questions. https://www.startssl.com/?app=25.
[46] E. Topalovic, B. Saeta, L.-S. Huang, C. Jackson, and D. Boneh. Towards Short-Lived Certificates. W2SP, 2012.
[47] The DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS) Protocol: TLSA. 2012. https://tools.ietf.org/html/rfc6698.
[48] Trustwave to escape 'death penalty' for SSL skeleton key. 2014. https://www.grc.com/revocation.htm.
[21] S. Gibson. Security Certificate Revocation Awareness Test. http://bit.ly/1RbPlNe.
[22] R. Holz, L. Braun, N. Kammenhuber, and G. Carle. The SSL Landscape – A Thorough Analysis of the X.509 PKI Using Active and Passive Measurements. IMC, 2011.
[23] ICSI SSL Notary. http://notary.icsi.berkeley.edu.
[24] T. H.-J. Kim, L.-S. Huang, A. Perring, C. Jackson, and V. Gligor. Accountable Key Infrastructure (AKI): A Proposal for a Public-key Validation Infrastructure. WWW, 2013.
[25] A. Langley. Smaller than Bloom filters. 2011. https://www.imperialviolet.org/2011/04/29/filters.html.
[26] A. Langley. Revocation checking and Chrome’s CRL. 2012. https://www.imperialviolet.org/2012/02/05/crlsets.html.
[49] University of Michigan Daily Full IPv4 HTTPS Handshakes. https://scans.io/series/https-full-ipv4.
[50] N. Vallina-Rodriguez, J. Amann, C. Kreibich, N. Weaver, and V. Paxson. A Tangled Mass: The Android Root Certificate Stores. CoNEXT, 2014.
[51] S. Yilek, E. Rescorla, H. Shacham, B. Enright, and S. Savage. When Private Keys Are Public: Results from the 2008 Debian OpenSSL Vulnerability. IMC, 2009.
[52] L. Zhang, D. Chooffnes, T. Dumitras, D. Levin, A. Mislove, A. Schulman, and C. Wilson. Analysis of SSL certificate reissues and revocations in the wake of Heartbleed. IMC, 2014.