## 前言
本文将详细介绍微软软件安全开发生命周期（SDL）的相关概念，并探讨遵循SDL过程中应执行的各种安全活动，特别是软件安全设计的原则。此外，还将深入介绍STRIDE威胁建模方法。

### SDL介绍
安全开发生命周期（SDL, Security Development Lifecycle）是微软提出的一种软件开发过程，旨在帮助开发人员构建更安全的软件，同时满足安全合规要求并降低开发成本。自2004年起，微软将SDL作为全公司的强制政策，其核心理念是在软件开发的每个阶段——从需求分析、设计、编码、测试到维护——都集成安全考虑。通过在各个阶段增加相应的安全活动，可以减少软件中的漏洞数量并将安全缺陷降至最低。SDL是一个侧重于软件开发的安全保证过程，目标是开发出安全的应用程序。

### SDL安全活动
SDL是一种管理模式，它在传统软件开发生命周期（SDLC）的各个阶段增加了必要的安全活动。这些安全活动在不同阶段有所不同，但每项活动即使单独执行也能对软件安全起到一定作用。缺乏特定的安全活动会对软件安全性产生负面影响。

我有幸参加过微软安全专家Michael Howard和Taha Mir关于SDL及威胁建模的培训。作为《软件安全开发生命周期》一书的作者，Michael Howard多次强调，安全培训是SDL的核心。由于软件的设计和编码主要由技术人员完成，因此大多数安全漏洞也是由他们引入的。因此，对开发过程中的技术人员进行安全培训至关重要。

在整个SDL周期中，除了安全培训外，还在软件发布后增加了安全应急响应活动。目前，国内许多公司已经具备了安全应急响应的能力，包括安全编码规范、代码审计、渗透测试等安全活动也已基本成熟。然而，在软件设计阶段的安全活动相对较少，仅有个别大型跨国企业拥有相关安全活动。根据微软的经验，软件安全问题很大一部分是由不安全的设计引起的。设计阶段的安全缺陷修复成本和时间都较高。STRIDE威胁建模的创始人之一Taha Mir曾表示，“safer applications begin with secure design”（安全应用从安全设计开始）。因此，微软SDL提出了若干核心的安全设计原则，并提供了多种方法如攻击面最小化和STRIDE威胁建模来辅助安全设计。

## 安全设计核心原则

### 攻击面最小化
攻击面是指程序中所有可被用户或其他程序访问的部分，这些部分容易成为恶意攻击者的目标。攻击面最小化是指尽量减少暴露给潜在攻击者的攻击面数量。软件产品的受攻击面包括代码、接口、服务和协议。安全人员在进行攻击面最小化时，首先需要对攻击面进行分析，主要包括：
- 降低默认执行的代码量
- 限制可访问代码的人员范围
- 限定可访问代码的人员身份
- 降低代码执行所需的权限

常见的攻击面分析技巧如下表所示：

### 基本隐私
在使用软件时，用户的个人信息不可避免地会被收集、使用甚至分发。企业有责任和义务建立保护措施，抵御敌对攻击行为，确保用户的基本隐私安全。隐私安全是建立可信任应用程序的关键因素。

在软件设计时，考虑用户基本隐私的必要性和意义在于：
- 履行法律规定和义务
- 增加客户的信赖
- 防止部署堵塞

对于特殊软件或全球性产品，设计人员需要明确软件的行为及目标人群，并考虑当地的法律法规，如美国儿童在线隐私保护法（COPPA）。企业在开发产品和服务时应制定明确的隐私准则，对获取和记录用户隐私数据的产品有明确的要求和指导建议。

提示：
- 只收集程序必需的隐私数据，并明确告知用户并征得同意。
- 微软对用户隐私数据如密码、口令等均需加密存储，最低要求是SHA256+salt，更高要求则使用PBKDF2算法。

### 权限最小化
如果应用程序或网站被攻击或破坏，权限最小化机制能够有效减少潜在损害。常见的权限最小化实践包括：
- 普通管理员/系统管理员等角色管理
- 文件只读权限/文件访问权限等访问控制
- 进程/服务以所需最小用户权限运行

在软件设计时，安全设计人员可以评估应用程序行为及功能所需的最低权限和访问级别，从而合理分配相应权限。如果程序在特定情况下需要较高级别的权限，也可以考虑特权赋予及释放的机制，以最小化损失。

提示：
- Windows系统中网络进程、本地服务、用户进程的权限较低且互相独立，分别为NETWORK SERVICE、LOCAL SERVICE、user权限。只有核心的重要进程才使用SYSTEM权限。
- 最新版本的Office程序打开不可信来源的文档时，默认为不可编辑，也不会执行代码。即使存在缓冲区溢出漏洞，也不会执行shellcode等恶意代码。