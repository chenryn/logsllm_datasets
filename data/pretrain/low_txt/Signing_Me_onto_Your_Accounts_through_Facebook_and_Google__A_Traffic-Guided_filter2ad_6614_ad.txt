### 优化后的文本

---

**图10：场景(B)中的Facebook+NYTimes追踪**

**漏洞与利用。** 我们需要验证上述识别的机会是否确实可被利用。这一次，情况比我们预想的要复杂得多。具体来说，我们通过将BRM1的所有参数设置为正常Facebook+NYTimes单点登录（SSO）追踪中的参数来进行测试。我们发现，尽管Facebook确实像在与NYTimes通信一样响应（即所有参数，包括`result`，都在BRM2中传递），但浏览器未能在BRM3中将这些参数传递给`http://Bob.com/login.php`，从而阻止了我们的攻击。这个测试清楚地表明，Facebook的内容在用户的浏览器中保护了秘密令牌`result`。

我们对网页内容的手动分析显示，这种保护来自于浏览器强制执行的同源策略，Facebook利用这一策略确保浏览器仅将秘密令牌从Facebook的域传递到授权方（如NYTimes）的域，而不是传递给`Bob.com`。Facebook为此目的使用的浏览器机制包括“postMessage”、“Adobe Flash”和“fragment”。依赖网站（如NYTimes.com或Bob.com）可以通过BRM1中的`transport`元素选择其中一种机制。图11展示了当使用Adobe Flash时的保护机制。

**图11：良性BRM3的完整视图**

浏览器通过四个步骤将秘密（即`result`元素）从Facebook传递给NYTimes。跨域通信发生在步骤(2)和(3)之间，在两个窗口之间进行，一个渲染NYTimes的内容，另一个渲染fbcdn.net的内容，后者隶属于Facebook。每个窗口都托管了一个Flash对象，分别标记为A和B。这两个对象都应在SSO过程中从fbcdn.net下载。这使得Flash A能够将秘密传递给Flash B，因为它们具有相同的来源（fbcdn.net）。只有当页面的域确实是NYTimes时，Flash B才会将秘密发送到其宿主页面的HTML DOM。我们上面提到的攻击被这种防御机制挫败，该机制看起来是逻辑安全的：Flash的同源策略确保只有当Flash B从fbcdn.net加载时才会传递秘密，这意味着Flash B只会将秘密传递给NYTimes，而不是其他域。

**让我们来看看对抗场景，其中宿主页面的域实际上是Bob.com，尽管它在BRM1中声明为NYTimes.com。为了绕过防御并在Alice的浏览器中获取秘密令牌，Bob必须找到一种方法，要么让Flash A将秘密令牌传递给从Bob.com网站下载的Flash，要么说服可信的Flash B（来自fbcdn.net）即使在其宿主页面是Bob.com而不是NYTimes.com时也发送令牌。换句话说，攻击此SSO的问题可以归结为以下两个问题之一：**

- 是否可以让来自fbcdn.net的Flash B将秘密传递给来自Bob.com的网页？
- 来自fbcdn.net的Flash A是否允许与来自Bob.com的Flash对象通信？

对于第一个问题，我们分析了来自fbcdn.net的Flash B的ActionScript，没有找到任何使其向非NYTimes页面发送秘密的方法。对于第二个问题，我们发现答案是肯定的，因为Adobe Flash有一种称为不可预测域通信的独特跨域模式：通过将来自Bob.com的Flash对象命名为带下划线前缀的形式（如“_foo”），Flash A可以与其通信，尽管该Flash来自不同的域。请注意，这个逻辑漏洞是通过关于Flash如何通信的领域知识发现的，这是我们攻击链上的最后一环。我们制作了一个演示[33]来展示这种攻击的工作方式：一旦Alice访问Bob.com而她已经登录到Facebook，Bob.com可以使用其Flash从Flash A获取秘密令牌，这使得Bob可以以Alice的身份登录NYTimes，并冒充NYTimes访问Alice的Facebook数据，如她的个人信息（例如出生日期）、状态更新等。

**我们与Facebook的沟通。** 因为问题出在Facebook方面，所有RP网站都受到同样的攻击，就像NYTimes一样。我们向Facebook报告了这一发现，并建议了一种修复方法。9天后，Facebook通过电子邮件确认了我们的发现，并在当天应用了我们建议的修复方法。Facebook在其面向安全研究人员的公共网页上对我们表示感谢[12]（在Facebook实施“漏洞赏金”货币奖励计划之前）。这一发现也在多个新闻报道中被提及，包括Computer World、The Register、eWeek等[33]。

### 4.3 JanRain

JanRain是一家为商业企业和网站提供社交登录和社交分享解决方案的知名提供商。它声称有超过35万个网站使用其Web SSO服务。其客户包括sears.com、nasdaq.com、savings.com等领先网站。其旗舰产品Janrain Engage将来自Google、Facebook、Twitter等主要身份提供商（IdP）的单独Web SSO服务打包成单一的Web SSO服务。通过使用这项服务，其客户可以同时采用这些SSO方案，从而避免逐一集成。这项服务不仅因其受欢迎程度而有趣，还因为它在Web SSO中扮演的独特角色：它是一个包装IdP服务，依赖于被包装的IdP进行认证。这可能使本已复杂的Web SSO系统更加复杂。

**分析结果。** 图12显示了当我们的测试服务器通过JanRain使用Google ID进行SSO时，BRM分析器生成的追踪。在详细讨论这个分析之前，有几个问题需要解释。首先，在我们的对抗场景中，IdP是不受Bob控制的一方，因此为了方便分析，我们将JanRain和Google视为一个单一的IdP方。其次，为了集成JanRain的服务，RP需要在JanRain注册一个唯一的应用程序名称（AppName）用于RP的Web应用程序，例如“RP-App”。然后，JanRain会为该应用程序创建一个子域RP-App.rpxnow.com（rpxnow.com是JanRain拥有的域名）。RP将使用这个子域与JanRain通信，以设置SSO过程的一组设置。JanRain服务器存储这些设置并通过一个句柄引用它们，在我们的分析中记为settingsHandle2。此外，在这个分析中，我们把AppName作为一个参数处理，尽管它是一个子域。例如，`http://AppName.rpxnow.com/a.php?foo&bar` 显示为：

    src=xxx  dst=http://IdP/a.php  
    Arguments: AppName & foo & bar 

图12描述了在这个复杂的SSO（通过JanRain使用Google ID登录）中的7个BRM。当用户想要登录到RP时，RP生成BRM1，通知IdP（即JanRain）其AppName以及此SSO的设置。这些设置包括：`openid_url`，用于激活Google ID认证的URL，以及`xdReceiver`和`token_url`，它们分别是BRM5和BRM7的`dst`元素。在图中，BRM2 - BRM4（用虚线括号包围）描述了Google ID认证的流量，如图8所示。在BRM4结束时，JanRain获取了用户的Google个人资料数据。BRM5 - BRM7将一个秘密令牌传递给RP，以便从JanRain检索个人资料数据。

**实际实现中，这个句柄在JanRain对Yahoo和Google的封装中被称为“discovery_token”，而在对Facebook的封装中被称为“_accelerator_session_id”。**

**BRM1: src=RP dst=http://!IdP/openid/start  
Arguments: AppName &  
  openid_url{http://IdP/account/o8/ud} &  
  xdReceiver{http://IdP/xdcomm?AppName}& 
  token_url{http://RP/finish-login} & 
  … & …  (other 2 elements )**

**BRM2:src=!IdP dst= http://IdP/account/o8/ud
Arguments: all Google ID’s arguments as shown in BRM1 
in Figure 8, in which openid.return_to is set to http: 
//IdP/openid/finish?AppName&settingsHandle**

**BRM3: Google ID’s traffic, similar to BRM2 in Figure 8.**

**BRM4:src=!IdP dst=http://!IdP/openid/finish
Arguments: AppName & settingsHandle[SEC] & 
AllOpenIDData (a pseudo element that we introduce for 
the sake of presentation simplicity. It represents all data 
returned from Google ID as in BRM3 in Figure 8)**

**BRM5: src=!IdP   dst=http://IdP/xdcomm 
Arguments: AppName &  redirectUrl {   
   http://IdP/redirect?AppName&loc[SEC]}**

**BRM6: src=IdP   dst=http://!IdP/redirect 
Arguments: AppName & loc[SEC]**

**BRM7: src=!IdP dst= http://RP/finish-login 
Arguments: token[SEC]**

**图12：集成JanRain并封装Google ID的良性流量**

我们进一步分析了三个对抗场景下的BRM。图13显示了场景(B)的结果，其中Bob冒充RP向IdP发起攻击。

**BRM1: src=Bob dst=http://!IdP/openid/start  
Arguments: AppName↓ & openid_url↓ &  
           xdReceiver ↓  & token_url ↓ & … & …**

**BRM2 – BRM4: (details omitted, see Figure 12)**

**BRM5: src=!IdP   dst=http://IdP/xdcomm↓ 
Arguments: AppName↓ &  redirectUrl {   
   http://IdP/redirect?AppName&loc[SEC]↑}**

**BRM6: src=IdP   dst=http://!IdP/redirect 
Arguments: AppName↓ & loc[SEC]↑**

**BRM7:src=!IdP  dst=http://Bob/finish-login↓ 
Arguments: token[SEC]↑**

**图13：对抗场景(B)**

我们可以很容易识别的一个机会是BRM1，其中Bob可以将`AppName`设置为目标RP的值，同时将`token_url`指向他自己的域。这将诱使JanRain从Google收集用户的个人资料数据，并将秘密令牌`token`发送给Bob，因为`token_url`作为BRM7的`dst`元素。

**漏洞与利用。** 为了理解这个机会是否真的有效，我们设置了一个服务器作为攻击的目标RP的模拟对象。测试揭示了JanRain也采取了一些保护措施。JanRain要求每个注册的应用程序提供一个白名单，以标识应用程序关联的域。例如，RP-App的白名单包括“RP-App.rpxnow.com”和“*.RP.com”。BRM1中的`token_url`需要在白名单上。在我们的测试中，BRM1的参数是`AppName="RP-App"`和`token_url="http://Bob.com/finish-login"`，JanRain发现这与白名单不一致（Bob.com不在RP-App的白名单上），因此停止了SSO。此外，我们发现即使我们暂时将Bob.com添加到模拟RP的白名单中以使BRM1成功（并在BRM1之后将其从白名单中移除），从BRM7获得的秘密令牌仍然无用。这是由于另一个针对白名单的检查：当一个网站使用令牌从JanRain检索Alice的Google ID个人资料时，JanRain发现有些不对劲：根据`token_URL`，令牌之前被发送给了Bob.com；因此Bob.com应该在RP的白名单上，但它不在。

鉴于白名单的保护，很明显BRM1中的`token_url`必须位于RP-App白名单中的域（例如`http://RP.com/finish-login`）。现在的问题是，BRM7中的`dst`正是`token_url`。换句话说，一旦`token_url`按照目标RP的白名单设置，Bob就无法让BRM7发送给他。这迫使我们回顾分析结果并尝试另一个机会。实际上，BRM5中的`dst`是从BRM1中的`xdReceiver`传播过来的，Bob似乎可以写入这个元素。如果他可以在不被发现的情况下更改这个元素（例如改为`http://Bob.com/xdcomm`），他就可以让JanRain将BRM5发送给他。BRM5也很重要，因为它包含另一个秘密`loc`。窃取`loc`的危害与窃取`token`相同。如果Bob获得了`loc`，他的攻击将会成功，因为`loc`是Bob唯一需要的秘密，以便使用自己的浏览器通过BRM6和BRM7获取Alice的会话。因此，我们认为通过BRM5窃取`loc`是一个可行的想法。

我们的测试显示了这个想法既令人鼓舞又充满挑战的一面。在挑战方面，我们发现JanRain还会检查BRM1中的`xdReceiver`是否与白名单一致。