# PathCutter: Severing the Self-Propagation Path of XSS JavaScript Worms in Social Web Networks

**Authors:**
- Yinzhi Cao, Northwestern Lab for Internet and Security Technology, Northwestern University, Evanston, IL
- Vinod Yegneswaran, SRI International, Menlo Park, CA
- Phillip A. Porras, SRI International, Menlo Park, CA
- Yan Chen, Northwestern Lab for Internet and Security Technology, Northwestern University, Evanston, IL

## 1. Introduction
- **Social Web Networks:**
  - Platforms where people share their perspectives, opinions, thoughts, and experiences.
  - Examples include Online Social Networks (OSNs), blogs, and social bookmarking sites.

- **XSS Worm Threat:**
  - The threat posed by Cross-Site Scripting (XSS) worms is severe.
  - First known worm: MySpace Samy (2005).
  - Increasing prevalence: Renren, Yamanner, etc.
  - Similar to viruses, they require human interaction to spread.
  - Characteristic: Rapid propagation.

- **Objective:**
  - Prevent the self-propagation of XSS worms.
  - Method: View separation and request authentication.

- **Impact:**
  - Number of infected clients after 20 hours (based on "Social Networks' XSS Worms" by Faghani et al.).

## 2. Roadmap
- Introduction
- Background
  - Attack Steps
  - XSS Taxonomy
- Related Work
- Our Approach
- Implementation
- Evaluation

## 3. Background
- **Attack Steps:**
  1. **Enticement and Exploitation:**
     - The attacker lures a user to a malicious page.
  2. **Privilege Escalation:**
     - The attacker gains higher privileges within the system.
  3. **Replication:**
     - The worm replicates itself on the victim's account.
  4. **Propagation:**
     - The worm spreads to other users.

- **Example:**
  - Samy’s page infects a benign user’s account.
  - The process repeats, infecting other users.

## 4. XSS Taxonomy
- **XSS Attacks:**
  - **Server-side XSS:**
    - Stored XSS
    - Reflected XSS
  - **Client-side XSS:**
    - Plugin XSS
    - Content Sniffing XSS
    - Java XSS
    - DOM-based XSS

- **Examples:**
  - MySpace Samy Worm
  - Yamanner Worm
  - Flash XSS
  - Renren Worm
  - SpaceFlash Worm
  - Experimental Worm

## 5. Related Work
- **Group One: Preventing XSS Vulnerabilities:**
  - Incomplete coverage (e.g., BluePrint, Plug-in Patches, Barth et al., Saxena et al.).

- **Group Two: Preventing XSS Worms:**
  - No early-stage prevention (e.g., Spectator, Xu et al.).
  - Not resistant to polymorphic worms (e.g., Sun et al.).

- **Our Goal:**
  - Prevent all XSS worms with early-stage prevention and resistance to polymorphic worms.

## 6. Our Approach
- **Key Concepts:**
  1. **Request Authentication:**
     - Ensuring that requests are from authorized sources.
  2. **View Separation:**
     - Isolating different views or pages to prevent cross-contamination.

- **Example:**
  - Blog A, Blog B, and Blog C are isolated.
  - Fine-grained isolation: Different pages within the same blog.
  - Techniques:
    - `iframe` tag with sandbox properties in HTML5.
    - Pseudodomain encapsulation (explained later).

- **Process:**
  - Download and modify a benign user’s account.
  - Enforce view separation.
  - Use request authentication to verify permissions.

## 7. Implementation
- **Implementation One (Server Modification):**
  - Prototype examples: WordPress, Elgg.
  - Dividing views: By blogs.
  - Permissions: Each view can only modify its own blog.

- **View Isolation for Server Modification:**
  - Isolating views at the client side using techniques like `iframe` sandboxing and pseudodomain encapsulation.

- **Implementation Two (Proxy):**
  - Details to be provided.

- **Case Study:**
  - Five real-world worms and two experimental worms (only two covered in the talk).

- **Performance:**
  - Performance metrics and analysis to be provided.

This revised version aims to provide a clear, coherent, and professional structure for the paper, ensuring that each section is well-defined and logically connected.