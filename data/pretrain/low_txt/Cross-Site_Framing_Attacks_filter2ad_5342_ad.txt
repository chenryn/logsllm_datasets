# 7. Defenses

## 7.1 Web-Service Defenses
In Section 7.1, we discuss existing and known defenses that can prevent the planting of evidence by web services, as discussed in Section 3. We then briefly summarize the risky browser features that allow attackers to hide the planting of evidence in Section 7.2. In Section 7.3, we address the main challenge of identifying framing files and present countermeasures.

### 7.1.1 Cross-Site Request Forgery (CSRF) Countermeasures
The framing attacks described in Section 3 exploit the fact that websites allow cross-site requests for seemingly harmless operations, such as search, which do not change the server state in a meaningful way. An obvious solution would be to prevent all cross-site requests using well-known CSRF countermeasures [11, 21, 29].

One popular defense is to identify the 'calling' third-party site using the Referer or Origin HTTP request headers. Another defense involves using unpredictable anti-CSRF tokens sent with the request from the webpage, which are then validated by the server. All the websites we tested use such tokens to protect against CSRF attacks for sensitive operations. Websites that intentionally allow some ('harmless') cross-site requests may at least maintain records of the fact that a request was received from a specific third-party domain.

### 7.1.2 Manipulating HTTP Headers
Despite the attacker controlling the content of HTTP requests, the browser controls their headers. Some of these headers contain indications of cross-site requests that the attacker may want to avoid.

#### Referer Header
The Referer header is attached by default to requests and indicates the URL where the request was initiated. However, this header is often omitted. For example, many companies strip this header in their network gateway to avoid information leakage. An attacker can easily test whether the Referer header is stripped by sending a cross-site request to a server they own. Furthermore, the attacker can cause the browser not to send a Referer header using standard techniques. For instance, if the third-party site is insecure (using HTTP rather than HTTPS), sending the request from a protected (HTTPS) framing site would not include the Referer header.

#### Origin Header
The introduction of the Origin header was motivated by the frequent omission of the Referer header and its privacy issues. The Origin header has similar functionality but only identifies the domain. Browsers that support the Origin header are expected to attach it to HTTP requests. However, we found that, as of version 37.0.2, Firefox and IE (version 11.0.18) do not attach the Origin header to POST requests sent via forms and targeted to hidden iframes. It is also possible to send GET requests from the IMG tag, such that only the Accept header might be seen as suspicious.

### 7.2 Dealing with Risky Browser Features
In Section 4, we discussed several browser features that allow hidden file downloads and browser history injection. The results of the experiment described in Section 4.2.1 show that automatic downloads can be used for effective framing attacks because users generally do not bother to delete downloaded files. Two countermeasures can improve the current situation:
1. Removing automatic download as the default option.
2. Adding a deletion option to the downloads bar so users can easily and permanently delete files without having to open the downloads folder.

To inject history into the browser, we suggested opening a website and immediately closing it. While it seems reasonable to allow opening a single window per click event, the ability to close windows might not be as obvious. We have no data on the extent of window closing, so it is difficult to claim that it should be completely blocked. However, it seems reasonable to block one window from closing another window that loads a page with a different origin. Similar to the X-Frame-Options header, which limits loading of web pages in an iframe, it is possible to set a new HTTP response header that will block or restrict pages from closing windows that arrive with a new header.

### 7.3 Blocking File Manipulations
In Section 4, we discussed framing using files saved by the browser in the cache and in the 'download' folder, and framing via the browser history. Later, in Section 5, we showed that other manipulations can be done to unlink the downloaded files from the browser. We believe that guarding against these threats may require a new defense mechanism, which we propose below.

#### Protection Against Framing Evidence
Protection against framing evidence on the computer should meet two challenges:
1. Overcoming cache browser poisoning that is done without leaving traces.
2. Preventing framing files from being left on the hard disk.

Preventing cross-site requests or the loading of web pages in iframes seems impractical. Changing the cache mechanism to save old requests and avoid covering traces would transform the cache into an advanced history feature, which is not ideal and might not prevent false evidence from being placed on the disk.

The crux of the framing by files is the lack of records showing details about the requests that initiated their creation. A simple solution with negligible overhead would be to save for each cache entry the details on how the request was generated. Specifically, saving the values of the Referer and Accept headers with each request seems sufficient to avoid such framing attacks based on our observations. This idea can also be used to protect against framing via files stored by the browser. By adding an indication of the relevant Referer and Accept headers, it is possible to distinguish between files downloaded intentionally by the user and files downloaded automatically by some site.

For cached files, this information should be kept together with the file itself. This can be done by creating a new special cache entry file format that wraps the current format together with the origin data. Attaching the origin data to each cached file makes it highly unlikely that traces of several cache entries on the disk would all have their origin fields missing. If an incriminating file is found on the disk, there would be a good chance that the information about how it was requested appears there as well.

However, for the attack described in Section 5.2, saving additional information about the way the file was created might not be sufficient, as that data might be overwritten by the attacker. A solution that overcomes this attack must ensure that the information about the source is linked to the framing file or, alternatively, destroys the framing file so it cannot be recovered by forensic investigators.

Solutions to the problem can be implemented either at the file system level or in the browser. We concentrate on browser-level solutions, as these are simpler and easier to deploy. The solution we offer uses wiping techniques.

#### Browser-Level Wiping
Wiping is a known technique for cleaning information from memory. Wiping is usually done by overwriting the data with zeros or random data. By completely wiping every overwritten file, it is impossible to plant floating files. To implement wiping at the browser level, the browser, about to overwrite a file A with a smaller file B, first overwrites A with a temporary file of the same length that contains only random data. Then, the temporary file is overwritten by B. Upon deleting a file from the cache, the browser should similarly wipe it from memory.

The overhead caused by wiping does not appear to be significant. This is mainly because:
1. Most of the files are small.
2. Wiping is done only on a relatively small fraction of file creation operations when a smaller file overwrites a larger file.

# 8. Conclusions
We discussed and presented the threat of remote framing attacks. We showed that it is easy to plant false pieces of evidence in the victim's computer, as well as in 'history' records kept by third-party websites, including many popular reputable websites. We also presented defenses that can be applied to browsers, websites, and forensic software.

We confirmed that the attacks are effective by testing 'framed computers' using popular forensic software and with the cooperation of forensic experts from ILITA and the Israel Police. In particular, the National Cyber Unit in the Israel Police informed us that they updated their forensic procedures following our findings and their experiments on machines that were 'framed' by our attacks.

Although this amount of evaluation and feedback is insufficient to draw definitive conclusions, we consider this an indication that the cross-site-planted, fake evidence could mislead forensic experts.

Framing is an interdisciplinary challenge, and it is our hope that this paper will help stimulate discussion and cooperation among experts in security, forensics, and legal, to understand this challenge and how it can best be met.

# 9. Acknowledgments
We would like to thank Yaniv Azani, Koby Furlaiter, and the National Cyber Unit of the National Crime Unit (Lahav 433) in the Israel Police, and Pini Cohen, Oren Butchmits, and the Computer Forensics Lab within the Department of Investigations in the Israeli Law, Information, and Technology Authority (ILITA) for their significant help in evaluating our findings. We also thank Hezi Moriel for his useful feedback. This research was supported by grants from the Ministry of Science and Technology, Israel, and from the Israeli Science Foundation.

# 10. References
[1] Tor2web: browse the anonymous internet. http://tor2web.org.
[2] Gmail CSRF Security Flaw. http://ajaxian.com/archives/gmail-csrf-security-flaw, 2007.
[3] M. Aguilar. If You Kill Someone, Donâ€™t Google How to Do It First. http://gizmodo.com/5916184/if-you-kill-someone-dont-google-how-to-do-it-first, June 2012.
[4] Alexa Web Information Company. Top Sites in United States (April 2015). http://www.alexa.com/topsites/countries/US.
[5] S. Antonatos, P. Akritidis, V. the Lam, and K. G. Anagnostakis. Puppetnets: Misusing Web Browsers as a Distributed Attack Infrastructure. ACM Transactions on Information and System Security, 12(2), 2008.
[6] AP. Framed for child porn - by a PC virus. Online. http://www.nbcnews.com/id/33778733#.U2AnaltLV.
[7] A. Barth, C. Jackson, and J. C. Mitchell. Robust defenses for cross-site request forgery. In Proceedings of the 15th ACM conference on Computer and communications security, pages 75â€“88. ACM, 2008.
[8] E. Casey. Digital evidence and computer crime: forensic science, computers, and the internet. Academic press, 2011.
[9] F. Cohen. Challenges to digital forensic evidence. Fred Cohen and Associates, 2008.
[10] D. . C. Court of Appeal, First District. The PEOPLE, Plaintiff and Respondent, v. Lee David HARBERT, Defendant and Appellant. http://caselaw.findlaw.com/ca-court-of-appeal/1089011.html, 2009.
[11] A. Czeskis, A. Moshchuk, T. Kohno, and H. J. Wang. Lightweight server support for browser-based CSRF protection. In Proceedings of the 22nd international conference on World Wide Web, pages 273â€“284. International World Wide Web Conferences Steering Committee, 2013.
[12] F. D. District Court of Appeal of Florida. Justin Mertis BARBER, Appellant, v. STATE of Florida, Appellee. http://caselaw.findlaw.com/fl-district-court-of-appeal/1164299.html, 2006.
[13] A. J. Ferguson. Fostering e-mail security awareness: The West Point Carronade. EDUCASE Quarterly, 2005.
[14] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee. Hypertext Transfer Protocol â€“ HTTP/1.1. RFC 2616 (Draft Standard), June 1999.
[15] N. Gelernter, Y. Grinstein, and A. Herzberg. Cross-Site Framing Attacks. Demos site. https://sites.google.com/site/framingattacks/.
[16] Y. Gilad, A. Herzberg, and H. Shulman. Off-path hacking: The illusion of challenge-response authentication. IEEE Security & Privacy, 12(5):68â€“77, 2014.
[17] Google. Incognito Mode (browse in private). https://support.google.com/chrome/answer/95464?hl=en.
[18] S. V. Hart, J. Ashcroft, and D. J. Daniels. Forensic examination of digital evidence: a guide for law enforcement. National Institute of Justice NIJ-US, Washington DC, USA, Tech. Rep. NCJ, 199408, 2004.
[19] D. Irani, M. Balduzzi, D. Balzarotti, E. Kirda, and C. Pu. Reverse social engineering attacks in online social networks. In Detection of intrusions and malware, and vulnerability assessment, pages 55â€“74. Springer, 2011.
[20] T. N. Jagatic, N. A. Johnson, M. Jakobsson, and F. Menczer. Social phishing. Communications of the ACM, 50(10):94â€“100, 2007.
[21] N. Jovanovic, E. Kirda, and C. Kruegel. Preventing cross-site request forgery attacks. In Securecomm and Workshops, 2006, pages 1â€“10. IEEE, 2006.
[22] S. Morris. Vincent Tabak â€˜researched killings and sentences after Joanna Yeatesâ€™s deathâ€™. http://www.theguardian.com/uk/2011/oct/19/vincent-tabak-joanna-yeates-death, October 2011.
[23] U. S. C. of Appeals. UNITED STATES of America, Plaintiff-Appellee, v. Matthew R. SCHUSTER, Defendant-Appellant. http://caselaw.findlaw.com/us-7th-circuit/1203561.html, October 2006.
[24] RIAA. Piracy Online - The Law. http://www.riaa.com/physicalpiracy.php?content_selector=piracy_online_the_law.
[25] A. Rocha, W. J. Scheirer, T. E. Boult, and S. Goldenstein. Vision of the unseen: Current trends and challenges in digital image and video forensics. ACM Comput. Surv, 43(4):26, 2011.
[26] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jackson. Busting frame busting: a study of clickjacking vulnerabilities at popular sites. IEEE Oakland Web, 2:6, 2010.
[27] M. Spencer. Sledgehammer and Ergenekon: Case studies in sophisticated digital forgery. In The United States Cyber Crime Conference, 2014.
[28] X. Xing, W. Meng, D. Doozan, A. C. Snoeren, N. Feamster, and W. Lee. Take this personally: attacks on personalized services. In Proceedings of the 22nd USENIX conference on Security, pages 671â€“686. USENIX Association, 2013.
[29] M. Zhou, P. Bisht, and V. Venkatakrishnan. Strengthening XSRF defenses for legacy web applications using whitebox analysis and transformation. In Information Systems Security, pages 96â€“110. Springer, 2011.