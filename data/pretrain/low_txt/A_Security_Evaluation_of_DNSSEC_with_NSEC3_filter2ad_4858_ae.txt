### Introduction to DNSSEC Vulnerabilities

Protocol vulnerabilities in DNSSEC (Domain Name System Security Extensions) can be exploited by an attacker to subvert a DNSSEC-protected domain, misleading existing stub resolvers and end-user software. This raises significant security concerns, as discussed in Section 6.3.

### Experimental Setup

For our experiment, we configured a server running BIND 9.6 to act as the authoritative DNSSEC zone for "bank.com." This zone contains:
- An A record for "www.bank.com."
- An opt-out NSEC3 record covering "attack1.bank.com."
- An insecure delegation to "attack2.bank.com" (named for illustrative purposes).

The server also hosts a legitimate web page at "www.bank.com," which sets both secure and insecure cookies with the domain "bank.com." Additionally, it hosts a third-party web page containing tags linked to "attack1.bank.com" and "attack2.bank.com."

We set up a user machine with web browsers, an OS stub resolver, and another BIND instance acting as a recursive DNSSEC resolver. The recursive resolver communicates with the stub resolver over the loopback interface. Finally, we configured an attacker machine capable of intercepting and injecting DNS traffic between the recursive resolver and the zone server.

### Exploit Details

#### Table 4: Forged Reply Packets from "bank.com" Zone Used in Cookie Theft Attack

| **Exploit** | **NSEC3 Opt-out** | **Insecure Delegation** | **Legitimate Reply** | **Forged Reply** |
|------------|-------------------|-------------------------|---------------------|------------------|
| **Signed RRs** | Opt-out NSEC3 covering "attack1.bank.com" | Unsigned Glue RRs | Signed RRs | Opt-out NSEC3 covering "attack1.bank.com" |
| **Unsigned Glue RRs** | "attack1.bank.com. NS ns.atk.com A 5.6.7.8" | "attack2.bank.com NS ns.a2.bank.com 5.6.7.8" | - | - |

Note: 5.6.7.8 is an IP address owned by the attackers.

### Man-in-the-Middle and Out-of-Path Attacks

While this scenario places the experimental attacker in a man-in-the-middle position, the only information used by the attacker from the intercepted DNSSEC request packet is the Transaction ID (TXID). Therefore, it is also possible to mount this attack via Kaminsky-style out-of-path means.

### 6.1 Attacking Name Insertion

In the first step of the exploit, the attacker attempts to poison the local recursive DNSSEC resolver by inserting an A record pointing to the attacker's server with a name suffix of "bank.com." This can be done using both the opt-out NSEC3 RR (creating an A RR for "attack1.bank.com") and the insecure delegation ("attack2.bank.com").

To initiate the resolution, the user must either type the name into the browser address bar or access a third-party page with an image hosted at "attack[12].bank.com." In real-world scenarios, this resolution may be triggered by phishing emails, tags on third-party sites, or other methods.

While the local recursive resolver queries the legitimate "bank.com." DNSSEC server, the attacking server sends a forged DNSSEC reply packet with a matching TXID to the local resolver, racing against the legitimate reply. Table 4 summarizes the forged reply packets.

Table 4 also demonstrates how the attack is feasible for an out-of-path attacker. The signed RRs used in the forged reply are public and available to the attacker by simply querying the "bank.com" DNSSEC zone. The only "secret" information copied from the request to the forged reply is the TXID. The attacker needs only to guess the TXID to execute this attack without man-in-the-middle capabilities. This implies that an out-of-path attacker can also mount a Kaminsky-style attack by requesting many bogus sub-names of "attack[12].bank.com" to create a birthday problem instance that matches the TXID.

In our experiment, the name-insertion attack succeeds whenever the forged reply packet arrives at the local resolver ahead of the legitimate reply. In both cases, an insecure delegation is created, causing the resolver to query the attacking server and accept the forged "attack[12].bank.com" A RR in its reply. This forged A RR also poisons the cache of the local server, so subsequent DNSSEC queries for "attack[12].bank.com" by users of the local resolver return the attack site address without requiring more injected attack packets.

### 6.2 Cookie Theft

Once false names have been inserted into the local DNSSEC resolver, the attacker utilizes browser policies governing the cookie "domain" setting. The policy specifies that non-secure cookies be sent in all HTTP requests made to sites that are sub-domains of the cookies' "domain" setting.

In our experiment, the attack website at "http://attack[12].bank.com," hosted on the attack server, receives in HTTP requests all legitimate non-secure cookies set with the domain "bank.com." The coarse-grain setting for the cookie domain required for this attack reflects common practice. For example, all cookies for PayPal are set with the domain "paypal.com," even when the actual web pages are served from "www.paypal.com."

After the name insertion on the local DNSSEC resolver, the cookie theft succeeds any time the user has active cookies set by "http://www.bank.com" and subsequently makes an HTTP request for any object (images, web pages, etc.) in the "attack[12].bank.com" domain. Even if the name insertion has not yet occurred, the HTTP request to "http://attack[12].bank.com" itself generates a predicate DNSSEC lookup, creating an opportunity for the spoofed name insertion. Both the name insertion and the cookie theft occur automatically after the single originating user action of visiting the attack site or a third-party site linking to the attack site. The cookie theft is very difficult for the user to detect, as the stolen payload is carried in a request to the attacker, allowing the attacker to return a visually benign object or make no response at all. Figure 5 illustrates the entire attack using NSEC3 opt-out.

To steal secure cookies, the user must open "https://attack[12].bank.com," as browser policy will only send secure cookies over HTTPS. This makes the attack slightly more difficult, as the attacker should not possess Certificate Authority-validated credentials for encrypting the HTTPS connection. In our experiment, this limitation was bypassed by the user clicking through a browser warning dialog stating incorrect credentials, for Opera and older versions of Firefox and Internet Explorer. The attacker in the wild may also use one of the CA-spoofing methods detailed during BlackHat USA 2009, where attackers obtain CA-validated credentials for a domain name containing a null character, such as "bank.com\0.attacker.com," that become valid for the domain name expressed before the null character due to faulty browser implementation. Using these certificates, stealing secure cookies becomes as simple as stealing non-secure ones.

### 6.3 Vulnerability Implications

Illegitimate name insertion can be used for cookie theft, as demonstrated. Pharming attacks, a form of phishing where an attacker's page is shown at an address that legitimately belongs to the victim domain, are also made possible by this vulnerability.

### 7. Security Advice and Conclusion

DNSSEC is a complex system with many options, some of which lead to security vulnerabilities. DNSSEC involves multiple participants, including domain administrators, software implementers, and ISPs. To ensure full security from the authoritative zone to the end-user while inter-operating with standard DNS, DNSSEC requires:

1. **DNSSEC adoption by the authoritative zone.**
2. **No use of NSEC3 opt-out and no insecure delegations in the authoritative zone.**
3. **All ancestor zones (root and TLD) to adopt DNSSEC and guarantee secure delegations at every step from the trust anchor to the authoritative zone.**
4. **DNSSEC adoption by the local recursive resolver.**
5. **A secure channel in the last-hop between the stub and recursive resolvers.**

We have experimentally demonstrated how a network attacker can exploit NSEC3 opt-out and insecure delegations to insert an illegitimate name into a DNSSEC zone. We have also shown the feasibility of such name-insertion attacks. To support incremental adoption, DNSSEC also requires indicators of DNS lookup security to be implemented in end-user interfaces.

It is clear that many parts of the DNS ecosystem need to participate in DNSSEC for anyone to benefit. Thus, browser and stub resolver integration is crucial. We hope the planned DNSSEC deployment of the root and TLD zones generates sufficient momentum towards adopting end-to-end DNS security.

We observe that several DNSSEC security loopholes, such as zone enumeration and NSEC3 opt-out, result from the desire to support offline signing of authenticated denial-of-existence. A better solution for authenticated denial-of-existence, whether through online signing of responses or a better cryptographically-based offline scheme, would lead to a more secure DNSSEC protocol.

### Recommendations

To conclude this study of DNSSEC security, we offer the following advice to eliminate the exploitability of the vulnerabilities uncovered:

- **For administrators running a DNSSEC server authoritative over a domain like 'bank.com.',** we advise that all NSEC3 records NOT use opt-out. Any insecure delegations from this zone should be made secure with the adoption of DNSSEC by the delegation-target zone to eliminate mechanisms for falsified name insertion and DNS-DNSSEC interoperability. To eliminate replay attacks, domain owners should not relinquish IP addresses until they are certain all RRSIGs for RRs pointing to these IP addresses have expired.
  
- **For website designers,** we urge a fine-grained cookie "domain" setting. Coarse-grained cookie "domain" settings can be utilized as an avenue for cookie theft via DNS name insertion. In our experiment, if the cookie domains were set to a finer grain that covers only the web pages that actually require these cookies, the attack scenario in Section 6 would have been prevented under DNSSEC, as it is impossible to forge records that prepend a subdomain to an existent name such as "www.bank.com."

- **For DNSSEC software implementers,** we emphasize the importance of resolver software logic to the security of DNSSEC. Our collected resolver software recommendations include:
  - Bound RR TTL lifetime on the signature validity period of all records forming the attestation chain to the trust anchor, not just the single RRSIG covering the RR.
  - Do not trust the header bits of DNSSEC reply packets. As a consequence, all resolvers must validate the content of DNSSEC reply packets themselves.
  - Build an attested cache only containing signed RRs with a full attestation chain to the trust anchor. Answers to user queries are only secure when formed entirely from the contents of this attested cache.
  - Use glue records only as indications of delegation and pointers to child zone server addresses, but not as data that can enter the attested cache.

- **For ISPs,** local recursive resolvers must request all DNSSEC RRs to be included in packets to prove RR integrity at the closest recursive resolver to the end-user. A secure channel between this recursive resolver and the end-user’s stub resolver is required to guarantee DNSSEC integrity all the way to the end-user.

- **For end-user software vendors, especially browsers,** we urge the development of user-interface elements indicating the security/insecurity of a DNSSEC lookup. We believe the adoption of the advice laid out in this section will lead to the best possible security practices for DNSSEC.

### References

- [1] RFC 2535. Domain Name System Security Extensions.
- [2] RFC 2845. Secret Key Transaction Authentication for DNS (TSIG).
- [3] RFC 2931. DNS Request and Transaction Signatures (SIG(0)s).
- [4] RFC 4033. DNS Security Introduction and Requirements.
- [5] RFC 4034. Resource Records for the DNS Security Extensions.
- [6] RFC 4035. Protocol Modifications for the DNS Security Extensions.
- [7] RFC 5155. DNS Security (DNSSEC) Hashed Authenticated Denial of Existence.
- [8] BIND Security Advisory. DNS Cache Poisoning Issue ('Kaminsky bug'). https://www.isc.org/sw/bind/forgery-resilience.php, 07/08/2008.
- [9] BIND Security Advisory. BIND 9 Cache Update from Additional Section. https://www.isc.org/node/504, 11/23/09.
- [10] Wikipedia Article. Birthday Problem. http://en.wikipedia.org/wiki/Birthday_problem.
- [11] Daniel Bernstein. Breaking DNSSEC. 3rd Usenix Workshop on Offensive Technologies, August 2009.
- [12] Microsoft Security Bulletin. Vulnerabilities in DNS Could Allow Spoofing (953230). http://www.microsoft.com/technet/security/Bulletin/ms08-037.mspx, 07/08/2008.
- [13] David Dill. The Murϕ Verification System. Computer Aided Verification, 8th International Conference, 1996.
- [14] Dan Kaminsky. It’s the End of the Cache as We Know It. BlackHat USA, August 2008.
- [15] Dan Kaminsky. Black Ops of PKI. BlackHat USA, August 2009.
- [16] Dan Kaminsky. DNS 2008 and the New (old) Nature of Critical Infrastructure. BlackHat DC, February 2009.
- [17] Robert Lemos. Poisoned DNS Servers Pop Up as ISPs Patch. http://www.securityfocus.com/news/11529.
- [18] Gavin Lowe. Breaking and Fixing the Needham-Schroeder Public-Key Protocol using CSP and FDR. In 2nd International Workshop on Tools and Algorithms for the Constructions and Analysis of Systems, 1996.
- [19] Moxie Marlinspike. More Tricks For Defeating SSL. BlackHat USA, August 2009.
- [20] John C. Mitchell, Vitaly Shmatikov, and Ulrich Stern. Finite-State Analysis of SSL 3.0. In Seventh USENIX Security Symposium, pages 201–216, 1998.
- [21] Erica Naone. The Flaw at the Heart of the Internet. Technology Review, November/December 2008.