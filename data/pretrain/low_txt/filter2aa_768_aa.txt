# 《软件调试》补编

- 1 –  
Copyright © 2009 ADVDBG.ORG All Rights Reserved

## 《软件调试》补编
作者：张银奎  
2009 年 1 月 12 日

- 2 –  
Copyright © 2009 ADVDBG.ORG All Rights Reserved

大多数程序员的技术水平不如黑客的主要原因是他们远不如黑客那样重视和擅长使用调试技术。

- 3 –  
Copyright © 2009 ADVDBG.ORG All Rights Reserved

### 前言
总的来说，今天的软件质量令人担忧，并且在一段时间内可能会继续恶化。这背后有许多原因，其中关键的一点是错误观念的广泛传播。以下是一些例子：

- “写代码很容易，不需要那么资深的人”，于是乎软件开发变成了蓝领工作，甚至“软件民工”被认为是性价比最高的选择。
- “我从来不调试我的程序，运行一下没有错误就可以了。” 这种态度导致许多软件在使用调试器检查时存在明显的问题。
- “XXX 很快呀”，甚至可以用它来写操作系统。然而，当一个应用程序启动需要超过5秒钟，硬盘灯疯狂闪烁时，用户恨不得尽快卸载它。
- “抓BUG完全是程序员自己的事。”但如果项目延期了，难道也是程序员的责任吗？
- “今天的硬盘空间大，CPU速度快，内存条便宜，软件大一些，多用些资源没关系。”

实际上，无论上层的应用程序还是底层的驱动或系统程序，都没有简单的软件。软件的特点决定了它需要像绣花一样精工细作。软件是给CPU运行的，让高速的CPU在指令流上奔跑可谓是一发千钧。糟糕的软件不仅浪费能源，还浪费时间，正如鲁迅先生所说，糟糕的软件每天都在图财害命。

如何才能使软件变得精细且准确无误呢？不仔细调试可以做到吗？

有些软件可以正常工作，但有时会出问题，而一旦出现问题，往往很难找到原因。在我在XXX做了一年多的开发后，对此深有体会。一次，我向一位在XXX工作多年的朋友询问：“在XXX上调试主要靠什么方法？”他的回答颇耐人寻味：“靠想！”“使劲想，然后加些PRINT语句，逐步缩小范围……”

多么好的程序员啊！

老雷  
2009 年元月

- 4 –  
Copyright © 2009 ADVDBG.ORG All Rights Reserved

## 《软件调试》书友活动获奖名单
整理和发布这份补编的主要目的是赠送给参加“2008《软件调试》以书会友”活动的朋友们。这次活动从2008年6月1日开始，截止日期为2008年12月31日。从6月11日Neilshu第一个参与，到12月31日23点47分Vito1997参与，共有22位朋友参加了这次活动，收到照片大约100幅。

参与这次活动的22位朋友是：
- Casechen
- Ccl
- ckj1234
- Coding
- Dbgsun
- Flyingdancex
- PI:EMAIL
- hnsy777
- KernelPanic
- Mabel
- Mybios
- Neilhsu
- Nightxie
- Pch
- s5689412
- shamexln
- speedingboy
- turboc
- Vito1997
- WANGyu
- xszhou1997
- yfliu

经过博文视点的周老师和《软件调试》这本书的编辑团队以及作者的认真评比，获奖结果如下：

- **一等奖**（一名）：Neilhsu  
  奖品：《奔腾 4 全录：IA32 处理器宗谱》（The Unabridged Pentium 4: IA32 Processor Genealogy）作者签名英文原版

- **二等奖**（两名）：mybios 和 nightxie  
  奖品：《深入解析 Windows 操作系统 第 4 版》

- **三等奖**（三名）：yfliu、WANGyu 和 shamexln  
  奖品：《Windows 用户态程序高效排错》

所有参加活动的朋友都获得纪念奖，奖品是电子版本的《补编》。

衷心感谢参加这次活动的所有朋友，愿我们的友谊永驻！

- 5 –  
Copyright © 2009 ADVDBG.ORG All Rights Reserved

### 目录
1. 补编内容 1 错误提示机制之消息框
   - 13.1 MessageBox
     - 13.1.1 MessageBoxEx
     - 13.1.2 MessageBoxTimeout
     - 13.1.3 MessageBoxWorker
     - 13.1.4 InternalDialogBox
     - 13.1.5 消息框选项（uType）
     - 13.1.6 返回值
     - 13.1.7 归纳

2. 补编内容 2 堆检查之实例分析
   - 23.16 实例分析
     - 23.16.1 FaultDll 和 FaultApp
     - 23.16.2 运行调试版本
     - 23.16.3 分析原因
     - 23.16.4 发布版本
     - 23.16.5 回放混乱过程
     - 23.16.6 思考

3. 补编内容 4 异常编译
   - 24.6 栈展开
     - 24.6.1 SehUnwind
     - 24.6.2 全局展开
     - 24.6.3 局部展开（Local Unwind）
   - 24.7 __try{}__finally 结构
   - 24.8 C++ 的 try{}catch 结构
     - 24.8.1 C++ 的异常处理
     - 24.8.2 C++ 异常处理的编译
   - 24.9 编译 throw 语句

4. 补编内容 5 调试符号详解
   - 25.9 EXE 和 Compiland 符号
     - 25.9.1 SymTagExe[1]
     - 25.9.2 SymTagCompiland[2]
     - 25.9.3 SymTagCompilandEnv[4]
     - 25.9.4 SymCompilandDetail[3]
   - 25.10 类型符号
     - 25.10.1 SymTagBaseType[16]
     - 25.10.2 SymTagUDT[11]
     - 25.10.3 SymTagBaseClass[18]
     - 25.10.4 SymTagEnum[12]
     - 25.10.5 SymTagPointerType[14]
     - 25.10.6 SymTagArrayType
     - 25.10.7 SymTagTypedef[17]
   - 25.11 函数符号
     - 25.11.1 SymTagFunctionType[13]
     - 25.11.2 SymTagFunctionArgType[13]
     - 25.11.3 SymTagFunction [5]
     - 25.11.4 SymTagFunctionStart[21]
     - 25.11.5 SymTagFunctionEnd[22]
     - 25.11.6 SymTagLabel[9]
   - 25.12 数据符号
     - 25.12.1 公共属性
     - 25.12.2 全局数据符号
     - 25.12.3 参数符号
     - 25.12.4 局部变量符号
   - 25.13 Thunk 及其符号
     - 25.13.1 DLL 技术中的 Thunk
     - 25.13.2 实现不同字长模块间调用的 Thunk
     - 25.13.3 启动线程的 Thunk
     - 25.13.4 Thunk 分类
     - 25.13.5 Thunk 符号

5. 补编内容 6 调试器标准
   - 28.9 JPDA 标准
     - 28.9.1 JPDA 概貌
     - 28.9.2 JDI
     - 28.9.3 JVM TI
     - 28.9.4 JDWP

6. 补编内容 7 WinDBG 内幕
   - 29.8 内核调试
     - 29.8.1 建立内核调试会话
     - 29.8.2 等待调试事件
     - 29.8.3 执行命令
     - 29.8.4 将调试目标中断到调试器
     - 29.8.5 本地内核调试
   - 29.9 远程用户态调试
     - 29.9.1 基本模型
     - 29.9.2 进程服务器
     - 29.9.3 连接进程服务器
     - 29.9.4 服务循环
     - 29.9.5 建立调试会话
     - 29.9.6 比较

7. 补编内容 8 WMI
   - 31.1 WBEM 简介
   - 31.2 CIM 和 MOF
     - 31.2.1 类和 Schema
     - 31.2.2 MOF
     - 31.2.3 WMI CIM Studio
     - 31.2.4 定义自己的类
   - 31.3 WMI 的架构和基础构件
     - 31.3.1 WMI 的架构
     - 31.3.2 WMI 的工作目录和文件
     - 31.3.3 CIM 对象管理器
     - 31.3.4 WMI 服务进程
     - 31.3.5 WMI 服务的请求和处理过程
   - 31.4 WMI 提供器
     - 31.4.1 Windows 系统的 WMI 提供器
     - 31.4.2 编写新的 WMI 提供器
     - 31.4.3 WMI 提供器进程
   - 31.5 WMI 应用程序
     - 31.5.1 通过 COM/DCOM 接口使用 WMI 服务
     - 31.5.2 WMI 脚本
     - 31.5.3 WQL
     - 31.5.4 WMI 代码生成器
     - 31.5.5 WMI ODBC 适配器

- 7 –  
Copyright © 2009 ADVDBG.ORG All Rights Reserved