### Reversibility of Administrative Operations

The reversing operation of `changeParameters(c((cid:126)s1), c((cid:126)s2))` is `changeParameters(c((cid:126)s2), c((cid:126)s1))`. Operations that do not have a reversing operation are typically destructive, such as deleting an object or revoking a permission (or role) from a role (or user).

### Requirement 5: Predictability

In the specification of UARBACP, the effects of administrative operations are straightforward and simple. There are no unexpected side effects. For example, the effects of grant (revoke) operations are simply adding (removing) a relationship to (from) the corresponding relations.

### Requirement 6: Using RBAC to Administer RBAC

In UARBACP, users and roles are treated in the same way as other objects. Permissions related to users and roles are administered in the same manner as permissions for other types of objects. UARBACP does not introduce any additional objects or relations for administration. The administration is unified within the RBAC system.

### Comparison of Models

We summarize the comparisons among the three existing models and the UARBAC family with respect to the six design requirements in Figure 5. Note that Oracle RBAC satisfies four requirements. It uses enumerating objects to define administrative domains, which does not scale well with a large number of roles. It also imposes two policy decisions in administering RBAC. 

1. **First Policy Decision**: Anyone can assign a role `x` to a user or a role, as long as they have admin privilege over `x`. This can lead to potential Denial of Service (DoS) attacks and does not enforce the principle of least privilege in large enterprises.
2. **Second Policy Decision**: A user must be a member of a role before they can administer it. This reduces flexibility in enforcing Separation of Duty (SoD) principles. For instance, one may want to separate the privilege of administering a role from the privilege of using a role. In UARBAC, this can be achieved by not giving an administrative user the empower permission over themselves.

The main innovations of UARBAC include:
- A flexible and scalable approach for defining administrative domains.
- Uniform handling of all objects.
- Extra control on granting permissions.

Some design decisions in UARBAC can also be viewed as policy decisions. For example, the "grant" permission over a role controls both the granting and revoking of the role, similar to the Oracle design. These decisions are guided by the six design requirements we have identified.

### Other Related Work

The papers most closely related to our work are the ARBAC series [21, 22, 23, 25, 19], the work by Crampton and Loizou [4, 5, 3], and the RBAC system in Oracle. These were discussed in detail in Sections 3 and 4, with a comparison provided in Section 5.4.

In the rest of this section, we briefly discuss other papers in the RBAC literature that are related to our work. The concept of roles was first introduced in the context of database security [27, 2] as a means to group permissions together to ease security administration. The term "Role-Based Access Control" was coined by Ferraiolo et al. [8, 7]. Sandhu et al. [24] developed the influential RBAC96 family of RBAC models. Nyanchama and Osborn developed the role-graph model [18]. Recently, a standard for RBAC has been proposed and adopted as an ANSI Standard [1, 9]. Parameterized roles have been used before in [10, 13], but not in the context of RBAC administration.

Using RBAC in enterprise settings and their administration have been studied in [6, 12, 11, 14, 26]. These papers report valuable experiences from deploying large RBAC systems in practice, even though they do not provide formal models for RBAC administration. Our model is largely inspired by these experiences. RBAC administration is also studied in [28, 29, 30]. Our work differs in that we adopt a principled-based approach and decouple administrative domains from the role hierarchies.

### Conclusions

We propose a principled approach to designing and analyzing administrative models for RBAC. We have identified six design requirements for administrative models of RBAC, motivated by three principles for designing security mechanisms: (1) flexibility and scalability, (2) psychological acceptability, and (3) economy of mechanism. We have used these requirements to analyze several approaches to RBAC administration, including ARBAC97, SARBAC, and the RBAC system in the Oracle DBMS. Based on these requirements and the lessons learned from analyzing existing approaches, we designed UARBAC, a new family of administrative models for RBAC that offers significant advantages over existing models.

### Acknowledgements

This work is supported by NSF CNS-0448204 (CAREER: Access Control Policy Verification Through Security Analysis And Insider Threat Assessment) and by sponsors of CERIAS. We thank Mahesh V. Tripunitara for helpful discussions and the anonymous reviewers for their valuable comments.

### References

[References listed as in the original text]

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.