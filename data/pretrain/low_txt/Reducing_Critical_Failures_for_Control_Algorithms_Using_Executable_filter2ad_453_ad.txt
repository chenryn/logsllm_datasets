### A Modified Algorithm with Executable Assertions and Best-Effort Recovery Mechanisms

Algorithm 11 presents a modified algorithm that incorporates executable assertions and best-effort recovery mechanisms. An executable assertion is a software-implemented check that verifies whether a variable meets the constraints specified in a given specification.

#### Results for the Modified PI Controller (Algorithm 11)

The results for the modified PI controller, as shown in Table 3, indicate that most of the undetected errors had no or minor impact on the controlled object. This is similar to the observations made for Algorithm 1, where 5.06% of all injected faults led to minor undetected wrong results.

#### Fault Injection Analysis

The fault injection analysis was conducted on the CPU, including state elements, and the results are summarized in Table 3. The table shows the distribution of different types of errors and their impact on the system. For example, 21.04% of the faults were address errors, 59.14% were data errors, and 29.30% were instruction errors. The undetected wrong results were categorized into severe and minor, with 5.45% of the faults leading to severe undetected wrong results and 13.83% leading to minor undetected wrong results.

#### Impact on the Controlled Object

The analysis revealed that 0.17% of the injected faults led to severe undetected wrong results, which were semi-permanent. This indicates that while the modified algorithm significantly reduces the number of severe undetected wrong results, further research is needed to develop more sophisticated assertions capable of detecting the remaining errors.

#### Example of Undetected Wrong Result

Figure 10 illustrates an example of an undetected wrong result. In this case, the controller output changed from a correct value of approximately 10 degrees to an incorrect value of 69 degrees at time \( t = 6 \). The assertions did not detect this error because the value was within the valid range (0.0 to 70.0). After about one second, the output stabilized, but the sequence was classified as a severe undetected wrong result that was semi-permanent.

### Comparison of Results for Algorithm 1 and Algorithm 11

Table 4 provides a detailed comparison of the undetected wrong results (value failures) for Algorithm 1 and Algorithm 11. The table shows that the percentage of severe value failures (permanent and semi-permanent) was reduced for Algorithm 11, while the percentage of minor value failures (transient and insignificant) increased. This is due to the best-effort recovery mechanisms in Algorithm 11, which detected many potential severe value failures, resulting in minor value failures instead. The total percentage of undetected wrong results is almost equal for both algorithms (5.02% for Algorithm 1 and 5.23% for Algorithm 11).

- **Permanent Value Failures**: 0.12% for Algorithm 1, 0% for Algorithm 11.
- **Semi-Permanent Value Failures**: 0.42% for Algorithm 1, 0.17% for Algorithm 11.
- **Total Severe Value Failures**: 0.54% for Algorithm 1, 0.17% for Algorithm 11.

Despite the smaller sample size for Algorithm 11 (2372 injected faults) compared to Algorithm 1 (9290 injected faults), the 95% confidence intervals indicate that the total percentage of severe value failures is lower for Algorithm 11.

### Conclusions

Our experiments have demonstrated that bit-flips inside a central processing unit executing an engine control program can cause critical failures, such as permanently locking the engine's throttle at full speed. These failures were caused by errors that escaped several hardware-implemented error detection mechanisms. Our fault injection experiments showed that 11% of the undetected errors leading to value failures seriously affected the control of the engine. By using software assertions and best-effort recovery mechanisms, we managed to reduce the percentage of critical failures to 3%. The control algorithm used in our experiments was a simple PI controller, indicating that software assertions combined with best-effort recovery can be very effective in reducing the number of critical failures for simple control algorithms. Future research will investigate the use of these techniques for multiple-input and multiple-output control algorithms, such as jet-engine controllers.

### Acknowledgements

We would like to thank Martin Fabian of the Department of Control Engineering at Chalmers University of Technology, and Stefan Asserhall and Thorbjorn Hult at Saab Ericsson Space for their valuable suggestions and technical assistance. This work was supported by the Swedish Agency for Strategic Research, the Swedish Network for Real-Time Research and Graduate Education (ARTES), the Swedish Foundation for Strategic Research (SSF), Vinnova, and Saab Ericsson.

### References

[1] Y.C. Yeh, "Dependability of the 777 Primary Flight Control System", in 5th IFIP Working Conference on Dependable Computing for Critical Applications (DCCA-5), pp. 3-17, (Urbana Champaign, IL, USA) Sep. 1995.

[2] J. von Neumann, "Probabilistic Logics and the Synthesis of Reliable Organisms from Unreliable Components", Automata Studies. Annals of Mathematical Studies, Princeton University Press, No. 34, pp. 43-98, 1956.

[3] L. Lamport, P.M. Melliar-Smith, "Byzantine Clock Synchronization", in Proc. Third ACM Symp. Principles of Distributed Computing, August 1984, pp. 68-84.

[4] R.M. Kieckhafer, C.J. Walter, A.M. Finn, P.M. Thambidurai, "The MAFr Architecture for Distributed Fault Tolerance", IEEE Transactions on Computers, vol. 37, no. 4, pp. 398-404, 1988.

[5] F. Cristian, "Understanding Fault-Tolerant Distributed Systems", Communications of ACM, Vol. 34, No. 2, 1991, pp. 56-78.

[6] J. Karlsson, P. Folkesson, J. Arlat, Y. Crouzet, G. Leber, J. Reisinger, "Application of Three Physical Fault Injection Techniques to the Experimental Assessment of the MARS Architecture", in 5th IFIP Working Conference on Dependable Computing for Critical Applications (DCCA-5). pp. 267-287, (Urbana Champaign, IL, USA) Sep. 1995.

[7] G.C. Messenger, "Collection of Charge on Junction Nodes From Ion Tracks". IEEE Trans. on Nuclear Science, Vol. NS-29, No. 6, Dec. 1982, pp. 2024-2031.

[8] K. Johansson, P. Dyreklev, B. Granbom, M.C. Calvet, S. Fourtine, O. Feuillatre, "In-Flight and Ground Testing of Single Event Upset Sensitivity in Static RAMS", IEEE Transaction on Nuclear Science, vol. 45, no. 3, June 1998, pp. 1628-1632.

[9] E. Normand, "Single Event Upset at Ground Level", IEEE Transaction on Nuclear Science, vol. 43, no. 6, December 1996, pp. 2142-2750.

[10] The Mathworks, Inc. "Using Simulink Version 3, Dynamic System Simulation for MATLAB" January 1999.

[11] Saab Ericsson Space AB, "Microprocessor Thor", Product Information, September 1993.

[12] P. Folkesson, S. Svensson, J. Karlsson, "A Comparison of Simulation Based and Scan Chain Implemented Fault Injection", in Proc. 28th Int. Symp. on Fault-Tolerant Computing (FTCS-28), pp. 284-293, (Munich, Germany) June 1998.

[13] J. Aidemark, J. Vinter, P. Folkesson, J. Karlsson, "GOOFI: Generic Object-Oriented Fault Injection tool", Proceedings International Conference on Dependable System and Networks, DSN 2001, Gothenburg, Sweden, July 2001.