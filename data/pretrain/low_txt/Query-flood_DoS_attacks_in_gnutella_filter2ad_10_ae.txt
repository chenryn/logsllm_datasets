### Figure 2: Damage vs. Distance from Malicious Node in a Cycle Topology

In summary, there are two types of damage caused by the malicious node: structural damage and flood damage.

1. **Structural Damage**: This occurs because a malicious node does not process or forward queries. When the malicious node is one hop away from the victim, the structural damage is 0.5, as the malicious node does not process any of the victim’s queries.

2. **Flood Damage**: This is caused by the traffic generated by the malicious node. When the malicious node is one hop away and a Proportional DS (Dynamic Scheduling) is used, there is flood damage at the good node that is one hop away. The good node cannot process all of the victim’s queries due to the malicious query traffic. In this case, the flood damage is 0.11.

### Figure 3: Damage Distribution for a Cycle with Weighted/Proportional IAS/DS

- **Damage Distribution**: The figure shows the distribution of damage based on the number of hops from the victim node. The damage is represented on the y-axis, and the number of hops is on the x-axis.
- **Key Points**:
  - At \( d = 1 \): Structural damage is 0.5, and flood damage is 0.11.
  - At \( d = 3 \), \( d = 5 \), and \( d = 7 \): The damage decreases as the distance increases.

### Figure 4: Damage Distribution for a Cycle with Fractional/Equal IAS/DS

- **Observation**: By switching from a Weighted/Proportional IAS/DS to a Fractional/Equal IAS/DS, we can avoid flood damage, leaving only structural damage.
- **Mechanism**: With the Equal DS policy, the good node that is one hop away processes one of the victim’s queries for each of the malicious node’s queries before using its remaining query bandwidth to service additional queries from the malicious node. Therefore, all of the victim’s queries are processed at the good node, and the only damage suffered one hop away is structural.

### Analysis of Damage Distribution

- **Good Policies**: The Fractional/Equal IAS/DS policies effectively contain flood damage.
- **Future Work**: Other mechanisms need to be developed to address structural damage. Detecting and disconnecting malicious nodes is essential for mitigating structural damage.

### Related Work

Most denial-of-service (DoS) research has focused on network-layer attacks [16, 33, 34, 22, 32, 7, 29, 8, 1, 19, 9, 18, 2, 38, 20]. Several proposals have been made to build IP Traceback mechanisms to manage network-layer DoS attacks, including [33] and [31].

- **Osokine's Q-Algorithm**: Proposed for solving traffic management problems in Gnutella, it could also address DoS attacks [21].
- **Rohrs' Simplified Version**: A simplified version of Osokine’s work implemented in the LimeWire Gnutella client [27]. No evaluation has been published for either proposal.

Some of the policies proposed for managing query floods are similar to those used in link scheduling, such as weighted fair queuing (WFQ) [40]. WFQ optimally allocates a fair share of link bandwidth with respect to weights. We could use WFQ to manage query flow in Gnutella nodes, but we would still need to decide on how to choose weights to minimize the damage from DoS attacks. The IASs (Input Allocation Strategies) used in our work can be viewed as choosing different weights for incoming query flows.

- **Security-Related Research in P2P**: Focused on providing anonymity to users [26, 6, 14] and ensuring fair resource allocation via micropayments or reputation schemes [15, 12, 25].
- **Other Research in P2P Systems**: Focused on efficient search, routing, and indexing [35, 24, 28, 39, 5, 4, 36, 37].

### Conclusion

Gnutella networks are highly susceptible to application-layer, flooding-based DoS attacks if good load balancing policies are not employed. In this paper, we have defined a model and metrics to measure the damage a malicious node can cause with query flooding. Through simulations on small representative networks, we determined how damage can be minimized with load balancing policies, how damage varies as a function of network topology, and how damage is distributed.

### References

[1] Cert advisory ca-2000-01 denial-of-service developments. http://www.cert.org/advisories/CA-2000-01.html, January 2000.
[2] Edward Amoroso. A policy model for denial of service. In Proc. Computer Security Foundations Workshop III, pages 110–114, Franconia, NH USA, June 1990. IEEE Computer Society Press.
[3] ICMP traceback messages. http://www.silicondefense.com/research/itrex/archive/tracing-papers/draft-bellovin-itrace-00.txt.
[4] Arturo Crespo and Hector Garcia-Molina. Routing indexes for peer-to-peer systems. Technical report, Stanford Univ., CS Dept., 2001.
[5] David Ratajczak, Dahlia Malkhi, Moni Naor. Viceroy: A scalable and dynamic lookup network. Proc. ACM PODC ’02, August 2002.
[6] R. Dingledine, M. Freedman, and D. Molnar. The free haven project: distributed anonymous storage service. Proc. of the Workshop on Design Issues in Anonymity and Unobservability, Berkeley, CA, USA. Springer: New York (2001).
[7] P. Ferguson and D. Senie. Network ingress filtering: Defeating denial of service attacks which employ IP source address spoofing. In IETF RFC 2267, 1998.
[8] Lee Garber. Denial-of-service attacks rip the internet. Computer, pages 12-17, April 2000.
[9] E.A. Hyden. Operating system support for quality of service. Ph.D. Thesis, University of Cambridge, 1994.
[10] Kazaa home page. http://www.kazaa.com/.
[11] Angelos D. Keromytis, Vishal Misra, and Dan Rubenstein. Secure overlay services. In Proc. of the ACM SIGCOMM Conference, August 2002.
[12] R. Lethin. Reputation. In Peer-to-peer: Harnessing the power of disruptive technologies. ed. Andy Oram, O’Reilly and Associates, March 2001.
[13] Limewire home page. http://www.limewire.com/.
[14] Aviel D. Rubin, Marc Waldman, and Lorrie Faith Cranor. Publius: A robust, tamper-evident, censorship-resistant, web publishing system. In Proc. 9th USENIX Security, August 2000.
[15] Mojo nation technical overview home page. http://www.mojonation.net/docs/technical_overview.shtml.
[16] D. Moore, G. Voelker, and S. Savage. Inferring internet denial of service activity. In Proc. 2001 USENIX Security, Washington D.C., August 2001.
[17] Morpheus home page. http://www.musiccity.com.
[18] R. M. Needham. Denial of service. In Proc. 1st ACM CCS, pg 151–153, Fairfax, Virginia, November 1993.
[19] Roger M. Needham. Denial of service: an example. Comm. of the ACM, 37(11):42–46, 1994.
[20] Peter G. Neumann. Inside risks: denial-of-service attacks. Comm. of the ACM, 43(4):136–136, 2000.
[21] Flow control algorithm for distributed 'broadcast-route' networks with reliable transport links. http://www.grouter.net/gnutella/flowcntl.htm.
[22] T. Ptacek and T. Newsham. Insertion, evasion, and denial of service: Eluding network intrusion detection. Technical report, Secure Networks, Inc., January 1998.
[23] N. Daswani and H. Garcia-Molina. Query-flood DoS Attacks in Gnutella Networks (Extended Version). Technical Report, Stanford Univ. CS Dept.
[24] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S. Shenker. A scalable content-addressable network. ACM SIGCOMM, 2001.
[25] Reputation technologies home page. http://reputation.com.
[26] R. Dingledine. The free haven project: Design and deployment of an anonymous secure data haven. MIT Masters Thesis May 2000.
[27] Sachrifc: Simple flow control for gnutella. http://www.limewire.com/developer/sachrifc.html.
[28] A. Rowstron, P. Druschel. Pastry: Scalable distributed object location and routing for large-scale peer-to-peer systems. In Proc. IFIP/ACM Middleware, Heidelberg, Germany, November 2001.
[29] C. L. Schuba, I. V. Krsul, M. G. Kuhn, E. H. Spafford, A. Sundaram, and D. Zamboni. Analysis of a denial of service attack on TCP. In Proc. 1997 IEEE Symposium on Security and Privacy, pages 208–223. IEEE Computer Society Press, May 1997.
[30] Ultrapeers: Another step towards gnutella scalability. http://groups.yahoo.com/group/the_gdf/files/Proposals/Ultrapeer/Ultrapeers.html.
[31] A. C. Snoeren, C. Partridge, L. A. Sanchez, C. E. Jones, F. Tchakountio, S. T. Kent, and W. T. Strayer. Hash-based IP traceback. In Proc. of the ACM SIGCOMM 2001 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication, August 2001.
[32] O. Spatscheck and L. L. Peterson. Defending against denial of service attacks in scout. In Operating Systems Design and Implementation, pages 59–72, 1999.
[33] A. Karlin, S. Savage, D. Wetherall, and T. Anderson. Network support for IP traceback. In ACM/IEEE Transactions on Networking, 9(3), June 2001.
[34] A. Karlin, S. Savage, D. Wetherall and T. Anderson. Practical network support for IP traceback. In Proc. 2000 ACM SIGCOMM Conference, Stockholm, Sweden, August 2000.
[35] I. Stoica, R. Morris, D. Karger, M. Kaashoek, and H. Balakrishnan. Chord: A scalable peer-to-peer lookup service for internet applications. Technical Report TR-819, MIT, March 2001.
[36] B. Yang and H. Garcia-Molina. Designing a super-peer network. Submitted for publication.
[37] Beverly Yang and Hector Garcia-Molina. Efficient search in peer-to-peer networks. Technical report, Stanford Univ., CS Dept., 2001.
[38] C. Yu and V. Gligor. A formal specification and verification method for the prevention of denial of service. In Proc. 1988 IEEE Symposium on Security and Privacy, pages 187–202, Oakland, CA. IEEE Computer Society Press, 1988.
[39] B. Zhao, J. Kubiatowicz, and A. Joseph. Tapestry: An infrastructure for fault-resilient wide-area location and routing. Technical Report UCB//CSD-01-1141, U. C. Berkeley, April 2001.
[40] L. Peterson and B. Davie. Computer Networks: A Systems Approach. Morgan Kaufman: SF (2000).

### Appendix

#### A. Optimal Rho Proof

**Theorem A.1. Optimal Rho (\(\hat{\rho}\)) for Symmetric Networks.**

Suppose that for all nodes \( j \in V \), \( c_j = C \) for some constant \( C > 0 \), \( |D(j, \tau)| = D \) for some constant \( D > 0 \), and all nodes have \(\rho\) set to the same value. Then, \(\hat{\rho} = \frac{1}{D + 1}\).

**Proof.**

Let \(\hat{\rho}\) be the setting of \(\rho\) that maximizes the total remote work. We assume that the local work processed at a node is exactly (and no less than) \(\rho C\). The maximum possible amount of remote work that can be processed at that node is \((1 - \rho)C\).

In the steady state, each node \( j \) is sent at most \( |\delta(j, i)| \rho C \) queries that were generated \( i \) time steps ago at a node that is \( i \) hops away, \( 1 \leq i \leq \tau \). Hence, the maximum total amount of work that may arrive at a node is \(\sum_{i=1}^{\tau} |\delta(j, i)| \rho C = |D(j, \tau)| \rho C = D \rho C\).

A node is said to be saturated if the amount of remote work it receives exceeds \((1 - \rho)C\). A node receives less than \( D \rho C \) remote work if some of the nodes that it receives work from are saturated.

No node can be saturated until the point when the maximum possible load \( D \rho C \) is greater than \((1 - \rho)C\), i.e., until \(\rho > \frac{1}{D + 1}\). Thus, if \(\rho < \frac{1}{D + 1}\), the remote work is limited by \((1 - \rho)C\), so \(\rho = \frac{1}{D + 1}\) is the optimal value.