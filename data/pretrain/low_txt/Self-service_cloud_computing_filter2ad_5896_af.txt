### SSC Model and Commodity Cloud Computing

The Secure Service Cloud (SSC) model is designed to closely resemble commodity cloud computing. Recent advancements in strengthening hypervisors against specific types of attacks [49] can also be applied to SSC, thereby enhancing the overall security of the platform.

### Administrative Domain vs. Hypervisor

In contrast to hypervisors, the administrative domain is more extensive and complex. It typically runs a complete operating system (OS) kernel, including device drivers and a user-space control toolstack. The hypervisor grants the administrative domain privileges to manage and manipulate client virtual machines (VMs). The complexity of the administrative domain has made it a frequent target for various attacks [10, 11, 12, 13, 14, 23].

### Addressing Threats to the Administrative Domain

To mitigate threats to the administrative domain, the research community has focused on the principle of separation of privilege, an approach that SSC also adopts. Murray et al. [33] disaggregated the administrative domain by isolating the functionality that builds new VMs into a separate VM. This domain builder has highly-specific functionality and a correspondingly small codebase, which, when combined with a library OS, enhances its robustness. Murray et al.’s design directly inspired the use of domB in SSC. Disaggregation is also advocated by Nova [47], and the Xoar project [9] extends this approach by "sharding" different parts of the administrative toolstack into a set of domains. Previous work has also considered separate domains to isolate device drivers [28], which are more prone to defects than the rest of the kernel.

### Unique Features of SSC

SSC aligns with these research efforts by aiming to reduce the privileges of Sdom0, which can no longer inspect the code, data, and computation of client VMs. However, SSC is unique in delegating administrative privileges to clients via Udom0. This feature allows clients to deploy custom services to monitor and control their own VMs.

### Comparison with CloudVisor

The CloudVisor project [52] leverages recent advances in nested virtualization technology to protect the security and privacy of client VMs from the administrative domain. In CloudVisor, a commodity hypervisor such as Xen runs atop a small, trusted, bare-metal hypervisor. This trusted hypervisor intercepts privileged operations from Xen and cryptographically protects the state of client VMs executing within Xen from its dom0 VM, providing only an encrypted view of a client VM’s memory.

#### Advantages and Disadvantages

- **Advantage of CloudVisor**: Its Trusted Computing Base (TCB) includes only the small, bare-metal hypervisor, comprising about 5.5KLOC, whereas SSC’s system-wide TCB includes the entire commodity hypervisor and domB. The use of cryptography allows CloudVisor to provide strong guarantees on client VM security and privacy.
- **Advantages of SSC**:
  1. **Flexibility**: SSC offers clients more flexible control over their own VMs. For example, CloudVisor's encrypted view of a client’s VM limits the implementation of many security introspection tools (e.g., memory introspection).
  2. **Performance**: Unlike CloudVisor, SSC does not rely on nested virtualization, which can impose overheads on client VMs due to the need for both the bare-metal and nested hypervisors to handle privileged operations.
  3. **Mutual Trust**: SSC’s Multi-Tenant Secure Domains (MTSDs) allow the cloud provider and clients to execute mutually-trusted services for regulatory compliance, a feature that is unclear whether CloudVisor can achieve.

### Comparison with Excalibur

The Excalibur system [40] operates under the same threat model as SSC and aims to prevent malicious cloud system administrators from accessing client data. It introduces a new abstraction called policy-sealed data, which allows encrypted client data to be decrypted only on nodes that satisfy a client-specified policy, such as those running the CloudVisor hypervisor or located in a particular geographic region. Excalibur includes a centralized monitor and new protocols to address TPM-related issues. However, Excalibur’s threat model excludes certain classes of attacks via the dom0 management interface, such as direct memory inspection, which SSC explicitly addresses. Future work could explore integrating concepts from SSC and Excalibur to combine the benefits of both systems.

### Extending VMM Functionality

There has been nearly a decade of research on novel services enabled by virtualization, starting with Chen and Noble’s seminal paper [6]. These include techniques for detecting security infections in client VMs [2, 7, 17], arbitrary rollback [16], and VM migration [8]. However, most of these techniques are implemented within the hypervisor or the administrative domain, requiring the cooperation of the cloud provider, which limits their impact.

SSC enables clients to deploy their own privileged services without requiring the cloud provider to do so. The primary advantage is that clients no longer need to expose their code and data to the cloud provider. At the same time, SSC’s MTSDs accommodate the need for cloud providers to ensure regulatory compliance and have some control over client VMs.

### Comparison with xCloud

The xCloud project [50, 51] also considers the problem of providing clients with flexible control over their VMs. The original position paper [50] advocated several approaches, including extending hypervisors, which may weaken hypervisor security. The full paper [51] describes XenBlanket, which realizes the vision of the xCloud project using nested virtualization. XenBlanket implements a "blanket" layer that allows clients to execute paravirtualized VMMs atop commodity cloud infrastructures. The key benefit of XenBlanket over SSC is that it provides clients the same level of control over their VMs as SSC but without modifying the hypervisor of the cloud infrastructure. However, unlike SSC, XenBlanket does not address the problem of protecting the security and privacy of client VMs from cloud administrators.

### Conclusions and Future Work

SSC is a new cloud computing model that improves client security and privacy and gives clients the flexibility to deploy privileged services on their own VMs. SSC introduces new abstractions and a supporting privilege model to achieve these goals. We integrated SSC with a commodity hypervisor (Xen) and presented case studies showing SSC’s benefits.

In the future, we plan to enhance SSC by factoring device drivers [28] and XenStore into their own domains [9]. We also plan to explore other novel services enabled by SDs. While our evaluation in Section 4 has primarily focused on SD-based security and systems services, we also plan to build network-based services using SDs. Individual cloud clients can leverage SDs to implement middleboxes, such as NIDS systems, firewalls, and traffic shapers, and to run performance-intensive network monitoring services. Such network-based services are currently under the control of cloud providers, and clients often have no say in configuring them. SDs therefore allow clients to enforce arbitrary network security and auditing policies without having to rely on cloud providers to deploy the corresponding services. Finally, we plan to address several of the issues discussed in Section 5 to make SSC a practical alternative to current cloud infrastructures.

### Acknowledgments

We thank the anonymous reviewers and our shepherd, Andrew D. Gordon, for their comments on the paper. This work was funded in part by NSF grants CNS-0831268, CNS-0915394, and CNS-0952128. Parts of this work were completed when the first two authors were at AT&T Research.

### References

[References listed as provided, with minor formatting adjustments for clarity and consistency]

This optimized version of the text is more structured, clear, and professional, making it easier to understand and follow.