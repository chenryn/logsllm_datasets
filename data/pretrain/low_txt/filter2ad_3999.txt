# Hardware-Assisted Memory Tracing on New SoCs Embedding FPGA Fabrics

**Authors:**
- Letitia W. Li
- Guillaume Duc
- Renaud Pacalet

**Institut Mines-Télécom**

## Abstract
This paper presents a hardware-assisted memory tracing solution for new System-on-Chips (SoCs) that integrate FPGA fabrics. The proposed method enhances the performance of memory tracing, which is crucial for malware analysis, debugging, and security.

## Introduction
### Memory Tracing
- **Applications:**
  - Analysis and categorization of malware
  - Debugging
  - Hardware support for improved performance

## SecBus Project
- **Objective:** To secure System-on-Chip (SoC) designs.
- **Threat Model:** An attacker can access the memory bus to external memory.
- **Platform:** A demonstration and validation platform for the proposed security measures.

## Platform
- **Hardware:** Xilinx Zynq-based Zedboard by Avnet

## AXI Protocol
- **Reference:** [AXI Reference Guide](http://www.xilinx.com/support/documentation/ip_documentation/axi_ref_guide/v13_4/ug761_axi_reference_guide.pdf)

## Implementation
- **Linux in Alternate Address Space (AAS):**
  - **Configuration:**
    - RAMdisk Image
    - Device Tree
    - Linux Kernel
  - **Entry Point:**
    - **Caching:**
      - `INSTR_CACHE_DISABLE`
      - `DATA_CACHE_DISABLE`
      - Flush cache
    - **L2 Cache:**
      - `FDT_HIGH`
      - Load Addresses

## Experiments
- **SSH Example:**
  - **Hexadecimal Data:**
    - 74: t
    - 65: e
    - 6C: l
    - 65: e
    - 63: c
    - 6F: o
    - 6D: m

- **Instruction and Data Flow:**
  - **Example 1:**
    - Instr A
    - Instr B
    - Data 1
    - ---
    - ---

  - **Example 2:**
    - Instr A
    - Instr B
    - Data 1
    - Data 1
    - ---
  
  - **Example 3:**
    - Instr A
    - Instr B
    - Data 1
    - ---
    - Instr A
  
  - **Example 4:**
    - Instr A
    - Instr B
    - Data 1
    - ---
    - Instr B
  
  - **Example 5:**
    - Instr A
    - Instr B
    - Data 1
    - Pass1
    - ---
    - Pass1
  
  - **Example 6:**
    - Instr A
    - Instr B
    - Data 1
    - Pass2
    - Pass1
    - ---
    - Pass2

- **Login Example:**
  - **BusyBox Implementation:**
    - String Compare
    - Result in r4
    - `mov r0, r4` → `mov r0, #1`

  - **Instruction and Data Flow:**
    - Instr A
    - Instr B
    - Data 1
    - `mov r0, r4`
    - W2
    - `mov r0, #1`
    - ---
    - ---
  
  - **Example 7:**
    - Instr A
    - Instr B
    - Data 1
    - `mov r0, r4`
    - W2
    - `mov r0, #1`
    - W2
    - `mov r0, r4`
  
  - **Example 8:**
    - Instr A
    - Instr B
    - Data 1
    - `mov r0, r4`
    - W2
    - `mov r0, #1`
    - W2
    - `mov r0, #1`

## Performance Evaluation
- **Benchmarks:**
  - **Dhrystone:**
    - Integer benchmark
    - Performance results:
      - AAS cache: ~1/21
      - RAS nocache: ~1/78
      - AAS nocache: ~1/78

  - **RAMspeed:**
    - Read/Write blocks
    - Performance results:
      - AAS cache: ~1/1.23
      - RAS nocache: ~1/1.23
      - AAS nocache: ~1/17
      - Block size (Kb): 1, 10, 100, 1000, 10000

## Memory Access Monitor 2.0
- **Features:**
  - Cache-Enabled
  - More Channels
  - Precise Capture
  - Multiple Injection Patterns

## SSH v2.0
- **State Machine:**
  - **State 0:**
    - Pattern: 0xAAAA
    - Mask: 0xFFFF
    - Action: None
    - Config: RADDR
    - Next State: 1
  - **State 1:**
    - Pattern: Instr 1
    - Mask: 0xFFFFFFFF
    - Action: None
    - Config: RDATA
    - Next State: 2
  - **State 2:**
    - Pattern: Instr 2
    - Mask: 0xFFFFFFFF
    - Action: None
    - Config: RDATA
    - Next State: 3
  - **State 3:**
    - Pattern: 0x0
    - Mask: 0xFFFFFFFF
    - Action: Capture
    - Config: RDATA
    - Next State: 0

- **Example State Transitions:**
  - 0xAAAA → 0xFFFF → None → RADDR → 1
  - Instr 1 → 0xFFFFFFFF → None → RDATA → 2
  - Instr 2 → 0xFFFFFFFF → None → RDATA → 3
  - 0x0 → 0xFFFFFFFF → Capture → RDATA → 0
  - 0x0 → 0xFFFFFFFF → Capture → RDATA → 0
  - 0xAAAA → 0xFFFF → None → RADDR → 1

## Conclusion
- **Key Points:**
  - Memory tracer implemented in FPGA
  - All memory accesses are visible
  - Demonstrates the vulnerability of unsecured buses

## Additional Resources
- **Download Our Work:**
  - [AxiBridge Wiki](https://secbus.telecom-paristech.fr/wiki/AxiBridge)
- **Questions?**

**Institut Mines-Télécom**
**ACSAC 2015**