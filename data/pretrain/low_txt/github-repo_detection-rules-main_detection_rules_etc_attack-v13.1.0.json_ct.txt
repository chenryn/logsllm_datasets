### Service Registry Permissions Weakness

**Description:**
Windows stores local service configuration information in the Registry under `HKLM\SYSTEM\CurrentControlSet\Services`. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters using tools such as the service controller (`sc.exe`), PowerShell, or `Reg`. Access to Registry keys is controlled through Access Control Lists (ACLs) and permissions.

If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries can change the service's `binPath/ImagePath` to point to a different executable under their control. When the service starts or is restarted, the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).

Adversaries may also alter Registry keys associated with service failure parameters (such as `FailureCommand`) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.

**Detection:**
- **Behavioral Analysis:** Monitor for changes to services that do not correlate with known software, patch cycles, etc. Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.
- **Tools:** Use tools like Sysinternals Autoruns to detect system changes that could be attempts at persistence, including listing current service information.
- **Logging and Monitoring:** Monitor processes and command-line arguments for actions that could be done to modify services. Additional logging may need to be configured to gather the appropriate data, especially for Windows system management tools such as Windows Management Instrumentation (WMI) and PowerShell.

**References:**
- [MSDN Registry Key Security](https://msdn.microsoft.com/library/windows/desktop/ms724878.aspx)
- [TrustedSignal Service Failure](https://trustedsignal.blogspot.com/2014/05/kansa-service-related-collectors-and.html)
- [Twitter Service Recovery Nov 2017](https://twitter.com/r0wdy_/status/936365549553991680)
- [TechNet Autoruns](https://technet.microsoft.com/en-us/sysinternals/bb963902)

---

### Compromised Virtual Private Servers (VPSs)

**Description:**
Adversaries may compromise third-party Virtual Private Servers (VPSs) to use during targeting. Various cloud service providers sell virtual machines/containers as a service. By compromising VPSs purchased by third-party entities, adversaries can make it difficult to physically tie back operations to themselves.

Compromising a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers as well as that added by the compromised third-party.

**Detection:**
- **Internet Scans:** Once adversaries have provisioned software on a compromised VPS, internet scans may reveal VPSs that adversaries have compromised. Look for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software.
- **Monitoring:** Detection efforts may focus on related stages of the adversary lifecycle, such as during Command and Control.

**References:**
- [NSA NCSC Turla OilRig](https://media.defense.gov/2019/Oct/18/2002197242/-1/-1/0/NSA_CSA_Turla_20191021%20ver%204%20-%20nsa.gov.pdf)
- [ThreatConnect Infrastructure Dec 2020](https://threatconnect.com/blog/infrastructure-research-hunting/)
- [Mandiant SCANdalous Jul 2020](https://www.mandiant.com/resources/scandalous-external-detection-using-network-scan-data-and-automation)
- [Koczwara Beacon Hunting Sep 2021](https://michaelkoczwara.medium.com/cobalt-strike-c2-hunting-with-shodan-c448d501a6e2)

---

### Reducing Cipher Strength

**Description:**
Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications. This can be achieved by modifying the key size used by the encryption software on a compromised network device. For example, adversaries can reduce the key size from hundreds or thousands of bytes to just a few bytes, significantly reducing the effort needed to decrypt the protected information without the key.

Adversaries may use specialized commands in a Network Device CLI introduced to the system through Modify System Image to change the configuration of the device.

**Detection:**
- **Behavioral Analysis:** There is no documented method for defenders to directly identify behaviors that reduce encryption key space. Detection efforts may be focused on closely related adversary behaviors, such as Modify System Image and Network Device CLI.
- **Vendor Support:** Some detection methods require vendor support to aid in investigation.

**References:**
- [Cisco Synful Knock Evolution](https://blogs.cisco.com/security/evolution-of-attacks-on-cisco-ios-devices)
- [Cisco Blog Legacy Device Attacks](https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954)

---

### Clearing Command History

**Description:**
In addition to clearing system logs, adversaries may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. On Linux and macOS, command histories can be accessed in a few different ways. When a user logs off a system, this information is flushed to a file in the user's home directory called `~/.bash_history`.

Adversaries may delete their commands from these logs by manually clearing the history (using `history -c`) or deleting the bash history file (`rm ~/.bash_history`). On Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the PSReadLine module. Adversaries may run the PowerShell command `Clear-History` to flush the entire command history from a current PowerShell session or delete the `ConsoleHost_history.txt` file.

**Detection:**
- **Log Analysis:** Monitor for suspicious modifications or deletion of `ConsoleHost_history.txt` and use of the `Clear-History` command.
- **User Authentication:** User authentication, especially via remote terminal services like SSH, without new entries in that user's `~/.bash_history` is suspicious.

**References:**
- [Sophos PowerShell command audit](https://community.sophos.com/products/intercept/early-access-program/f/live-discover-response-queries/121529/live-)
- [Microsoft PowerShell Command History](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_history?view=powershell-7)
- [US-CERT-TA18-106A](https://www.us-cert.gov/ncas/alerts/TA18-106A)
- [Sophos PowerShell Command History Forensics](https://community.sophos.com/products/malware/b/blog/posts/powershell-command-history-forensics)

---

### Indirect Command Execution

**Description:**
Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking `cmd`. For example, `Forfiles`, the Program Compatibility Assistant (`pcalua.exe`), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts.

**Detection:**
- **Process Monitoring:** Monitor and analyze logs from host-based detection mechanisms, such as Sysmon, for events such as process creations that include or are resulting from parameters associated with invoking programs/commands/files and/or spawning child processes/network connections.
- **Behavioral Analysis:** Detect processes and command-line arguments for actions that could be taken to perform indirect command execution.

**References:**
- [Evi1cg Forfiles Nov 2017](https://twitter.com/Evi1cg/status/935027922397573120)
- [RSA Forfiles Aug 2017](https://community.rsa.com/community/products/netwitness/blog/2017/08/14/are-you-looking-out-for-forfilesexe-if-you-are-watching-for-cmdexe)
- [VectorSec ForFiles Aug 2017](https://twitter.com/vector_sec/status/896049052642533376)

---

### Custom Cryptographic Protocol

**Description:**
Adversaries may use a custom cryptographic protocol or algorithm to hide command and control traffic. A simple scheme, such as XOR-ing the plaintext with a fixed key, will produce a very weak ciphertext. Custom encryption schemes may vary in sophistication. Analysis and reverse engineering of malware samples may be enough to discover the algorithm and encryption key used.

Some adversaries may also attempt to implement their own version of a well-known cryptographic algorithm instead of using a known implementation library, which may lead to unintentional errors.

**Detection:**
- **Traffic Analysis:** If malware uses custom encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.
- **Behavioral Analysis:** Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect when communications do not follow the expected protocol behavior for the port that is being used.

**References:**
- [F-Secure Cosmicduke](https://blog.f-secure.com/wp-content/uploads/2019/10/CosmicDuke.pdf)
- [Fidelis DarkComet](https://www.fidelissecurity.com/sites/default/files/FTA_1018_looking_at_the_sky_for_a_dark_comet.pdf)
- [University of Birmingham C2](https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf)

---

### Reverting Cloud Instance

**Description:**
Adversaries may revert changes made to a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.

Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage, including persistent, local, and/or ephemeral, with the ephemeral types often reset upon stop/restart of the VM.

**Detection:**
- **Centralized Logging:** Establish centralized logging of instance activity, which can be used to monitor and review system events even after reverting to a snapshot, rolling back changes, or changing persistence/type of storage.
- **Event Monitoring:** Monitor specifically for events related to snapshots and rollbacks and VM configuration changes, that are occurring outside of normal activity. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones.

**References:**
- [Tech Republic - Restore AWS Snapshots](https://www.techrepublic.com/blog/the-enterprise-cloud/backing-up-and-restoring-snapshots-on-amazon-ec2-machines/)
- [Google - Restore Cloud Snapshot](https://cloud.google.com/compute/docs/disks/restore-and-delete-snapshots)

---

### Replication Through Removable Media

**Description:**
Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.

Mobile devices may also be used to infect PCs with malware if connected via USB. When a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).

**Detection:**
- **File Access Monitoring:** Monitor file access on removable media. Detect processes that execute from removable media after it is mounted or when initiated by a user.
- **Behavioral Analysis:** If a remote access tool is used in this manner to move laterally, then additional actions are likely to occur after execution, such as opening network connections for Command and Control and system and network information Discovery.

**References:**
- [Windows Malware Infecting Android](https://www.computerworld.com/article/2486903/windows-malware-tries-to-infect-android-devices-connected-to-pcs.html)
- [iPhone Charging Cable Hack](https://techcrunch.com/2019/08/12/iphone-charging-cable-hack-computer-def-con/)
- [Exploiting Smartphone USB](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.226.3427&rep=rep1&type=pdf)

---

### Data from Local System

**Description:**
Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to exfiltration. Adversaries may do this using a Command and Scripting Interpreter, such as `cmd` as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.

**Detection:**
- **Process Monitoring:** Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data.
- **CLI Activity:** For network infrastructure devices, collect AAA logging to monitor `show` commands that view configuration files.

**References:**
- [show_run_config_cmd_cisco](https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/fundamentals/command/cf_command_ref/show_protocols_through_showmon.html#wp2760878733)
- [Mandiant APT41 Global Intrusion](https://www.mandiant.com/resources/apt41-initiates-global-intrusion-campaign-using-multiple-exploits)
- [US-CERT-TA18-106A](https://www.us-cert.gov/ncas/alerts/TA18-106A)

---

### Deobfuscate/Decode Files or Information

**Description:**
Adversaries may use obfuscated files or information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.

One such example is the use of `certutil` to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows `copy /b` command to reassemble binary fragments into a malicious payload.

**Detection:**
- **Script and Process Monitoring:** Detecting the action of deobfuscating or decoding files or information may be difficult depending on the implementation. If the functionality is contained within malware and uses the Windows API, then attempting to detect malicious behavior before or after the action may yield better results than attempting to perform analysis on loaded libraries or API calls.
- **Behavioral Analysis:** Perform process and command-line monitoring to detect potentially malicious behavior related to scripts and system utilities such as `certutil`.

**References:**
- [Volexity PowerDuke November 2016](https://www.volexity.com/blog/2016/11/09/powerduke-post-election-spear-phishing-campaigns-targeting-think-tanks-and-ngos/)
- [Malwarebytes Targeted Attack against Saudi Arabia](https://blog.malwarebytes.com/cybercrime/social-engineering-cybercrime/2017/03/new-targeted-attack-saudi-arabia-government/)
- [Carbon Black Obfuscation Sept 2016](https://www.carbonblack.com/2016/09/23/security-advisory-variants-well-known-adware-families-discovered-include-sophisticated-obfuscation-techniques-previously-associated-nation-state-attacks/)

---

### Outlook Rules

**Description:**
Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.

Once malicious rules have been added to the user’s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.

**Detection:**
- **PowerShell Script:** Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output.
- **MFCMapi:** This PowerShell script is ineffective in gathering rules with modified `PRPR_RULE_MSG_NAME` and `PR_RULE_MSG_PROVIDER` properties caused by adversaries using a Microsoft Exchange Server Messaging API Editor (MAPI Editor), so only examination with the Exchange Administration tool MFCMapi can reveal these mail forwarding rules.
- **SensePost NotRuler:** SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.

**References:**
- [SilentBreak Outlook Rules](https://silentbreaksecurity.com/malicious-outlook-rules/)
- [Microsoft Detect Outlook Forms](https://docs.microsoft.com/en-us/office365/securitycompliance/detect-and-remediate-outlook-rules-forms-attack)
- [Pfammatter - Hidden Inbox Rules](https://blog.compass-security.com/2018/09/hidden-inbox-rules-in-microsoft-exchange/)
- [SensePost NotRuler](https://github.com/sensepost/notruler)

---

### Impair Defenses

**Description:**
Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This involves impairing both preventative defenses, such as firewalls and anti-virus, and detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses and supplemental capabilities installed by users and administrators.

Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out of a computer or stopping it from being shut down. These restrictions can further enable malicious operations and the continued propagation of incidents.

**Detection:**
- **Process and Command-Line Monitoring:** Monitor processes and command-line arguments to see if security tools or logging services are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools.
- **Environment Variables and APIs:** Monitor environment variables and APIs that can be leveraged to disable security measures.

**References:**
- [Emotet shutdown](https://thedfirreport.com/2022/11/28/emotet-strikes-again-lnk-file-leads-to-domain-wide-ransomware/#:~:text=Don%E2%80%99t%20Sleep%20has%20the%20capability%20to%20keep%20the%20computer%20from%20being%20shutdown%20and%20the%20user%20from%20being%20signed%20off.%20This%20was%20likely%20done%20to%20ensure%20nothing%20will%20interfere%20with%20the%20propagation%20of%20the%20ransomware%20payload)

---

### Compromised Cloud Accounts

**Description:**
Adversaries may compromise cloud accounts that can be used during targeting. Adversaries can use compromised cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Compromising cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.

A variety of methods exist for compromising cloud accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, conducting Password Spraying attacks, or attempting to Steal Application Access Tokens. Prior to compromising cloud accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. In some cases, adversaries may target privileged service provider accounts with the intent of leveraging a Trusted Relationship between service providers and their customers.

**Detection:**
- **Behavioral Analysis:** Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (e.g., Transfer Data to Cloud Account).

**References:**
- [Awake Security C2 Cloud](https://awakesecurity.com/blog/threat-hunting-series-detecting-command-control-in-the-cloud/)
- [MSTIC Nobelium Oct 2021](https://www.microsoft.com/security/blog/2021/10/25/nobelium-targeting-delegated-administrative-privileges-to-facilitate-broader-attacks/)

---

### Compromised Email Accounts

**Description:**
Adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct Phishing for Information, Phishing, or large-scale spam email campaigns. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship with, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (e.g., Domains).

A variety of methods exist for compromising email accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, brute forcing credentials (e.g., password reuse from breach credential dumps), or paying employees, suppliers, or business partners for access to credentials. Prior to compromising email accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. Adversaries may target compromising well-known email accounts or domains from which malicious spam or Phishing emails may evade reputation-based email filtering rules.

**Detection:**
- **Behavioral Analysis:** Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (e.g., Phishing).

**References:**
- [AnonHBGary](https://arstechnica.com/tech-policy/2011/02/anonymous-speaks-the-inside-story-of-the-hbgary-hack/)
- [Microsoft DEV-0537](https://www.microsoft.com/security/blog/2022/03/22/dev-0537-criminal-actor-targeting-organizations-for-data-exfiltration-and-destruction/)

---

### Uploading Malware

**Description:**
Adversaries may upload malware to third-party or adversary-controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable Ingress Tool Transfer by placing it on an Internet-accessible web server.

Malware may be placed on infrastructure that was previously purchased/rented by the adversary or was otherwise compromised by them. Malware can also be staged on web services, such as GitHub or Pastebin, or hosted on the InterPlanetary File System (IPFS), where decentralized content storage makes the removal of malicious files difficult.

**Detection:**
- **Internet Scanning:** If infrastructure or patterns in malware have been previously identified, internet scanning may uncover when an adversary has staged malware to make it accessible for targeting.
- **Behavioral Analysis:** Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle, such as User Execution or Ingress Tool Transfer.

**References:**
- [Volexity Ocean Lotus November 2020](https://www.volexity.com/blog/2020/11/06/oceanlotus-extending-cyber-espionage-operations-through-fake-websites/)
- [Talos IPFS 2022](https://blog.talosintelligence.com/ipfs-abuse/)

---

### Supply Chain Compromise

**Description:**
Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.

Exploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited, this may also involve Exploitation for Defense Evasion.

If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via Escape to Host, or take advantage of weak identity and access management policies.

Adversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.

**Detection:**
- **Application Logs:** Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection.
- **Web Application Firewalls:** Web Application Firewalls may detect improper inputs attempting exploitation.

**References:**
- [NVD CVE-2016-6662](https://nvd.nist.gov/vuln/detail/CVE-2016-6662)
- [CIS Multiple SMB Vulnerabilities](https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-microsoft-windows-smb-server-could-allow-for-remote-code-execution/)
- [US-CERT TA18-106A Network Infrastructure Devices 2018](https://us-cert.cisa.gov/ncas/alerts/TA18-106A)
- [Cisco Blog Legacy Device Attacks](https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954)
- [NVD CVE-2014-7169](https://nvd.nist.gov/vuln/detail/CVE-2014-7169)
- [Mandiant Fortinet Zero Day](https://www.mandiant.com/resources/blog/fortinet-malware-ecosystem)
- [Wired Russia Cyberwar](https://www.wired.com/story/russia-ukraine-cyberattacks-mandiant/)

---

### Exploit Public-Facing Application

**Description:**
Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network.