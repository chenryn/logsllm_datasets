# Apache Solr Injection
## Presenter: Michael Stepankin (@artsploit)
### Event: DEF CON 27

### About the Presenter
- **Security Researcher at Veracode**
- **Web Application Security Specialist**
- **Focused on Enhancing Dynamic and Static Code Analysis**
- **Former Penetration Tester**
- **Has Not Reported SSL Ciphers**

### Introduction
This presentation covers a bug bounty experience and explores vulnerabilities in Apache Solr, a popular, high-performance, open-source enterprise search platform built on Apache Lucene. 

### What is Solr?
- **Apache Solr** is a widely-used, fast, and open-source enterprise search platform.
- **Written in Java** and available as open source.
- **Main Interface**: REST API.
- **Used by Major Companies**: AT&T, eBay, Netflix, Adobe, and more.

[Official Website](https://lucene.apache.org/solr/)

### Quick Start with Solr
```bash
$ ./bin/solr start -e dih
// Start Solr
// Add some data
// Search data
```

### Solr 101: Simple Query
- **Content-Type Requested**
- **More Complex Query**: 
  - **Local Parameter Name (Default Field)**
  - **Parser Type**
  - **Collection (Database) Name**
  - **Request Handler (select, update, config)**

### Example of a More Complex Query
- **Requested Fields (Columns)**
- **Subquery for Column 'similar'**
- **Requested Response Type**

### Common Solr Usage in Web Applications
- **Browser to Solr Communication**:
  - **User Input**: `/search?q=Apple`
  - **Solr Request**: `/solr/db/select?q=Apple&fl=id,name&rows=10`

### Solr Parameter Injection (HTTP Query Injection)
- **Example**:
  - **User Input**: `/search?q=Apple%26xxx=yyy%23`
  - **Solr Request**: `/solr/db/select?q=Apple&xxx=yyy#&fl=id,name&rows=10`

### Caveats of Solr Parameter Injection
- **Arbitrary Query Parameters Can Be Added**:
  - **Still Handled by the SearchHandler**
  - **Cannot Rewrite Collection Name**
  - **Solr Provides Some Special Parameters**

### Magic Parameters in Solr
- **Example**:
  ```http
  GET /solr/db/select?q=Apple&shards=http://127.0.0.1:8984/solr/db&qt=/config%23&stream.body={"set-property":{"xxx":"yyy"}}&isShard=true
  ```
  - **shards**: Forwards the request to the specified URL.
  - **qt**: Rewrites the query.
  - **stream.body**: Treated as a POST body.
  - **isShard**: Prevents body parsing during proxying.

### Exploitation Techniques
- **Collection Name Leak**
- **Update Another Collection**: Error thrown after the update.
- **Query Another Collection**: Rename columns to match the original collection.
- **JSON Response Rewriting**: `json.wrf` parameter acts like a JSONp callback.
- **XML Response Poisoning**: ValueAugmenterFactory adds a new field to every returned document.
- **XSS via Response Poisoning**: XmlTransformer inserts a valid XML fragment.

### Local Parameter Injection
- **Example**:
  - **Browser Input**: `/search?q={!dismax+xxx=yyy}Apple`
  - **Solr Request**: `/solr/db/select?q={!dismax+xxx=yyy}Apple&fl=id...`

### Known Since 2013
- **Only Parser Name and Local Parameters Can Be Specified**
- **XMLParser Vulnerability**: Allows XXE, enabling SSRF.

### CVE-2017-XXXX: XMLParser XXE
- **Allows SSRF**: All 'shards' magic works if only the 'q' parameter is controlled.

### Remote Code Execution (RCE)
- **Documentation Limited**
- **Java-Based**: Likely has XXE, Serialization, ScriptEngine, and Runtime.exec() vulnerabilities.

### CVE-2017-12629: RunExecutableListener RCE
- **Affected Versions**: 5.5x-5.5.4, 6x-6.6.3, 7x – 7.1
- **Requirements**: None

### Exploitation Steps
- **Add a New Query Listener**
- **Perform Any Update Operation**

### CVE-2019-0192: RCE via jmx.serviceUrl
- **Affected Versions**: 5x – 6x. In v7-8, JMX is ignored.
- **Requirements**: OOB connection or direct access.

### Exploitation via Deserialization
- **Start a Malicious RMI Server** serving ROME2 object payload on port 1617.
- **Trigger Solr Connection** to the malicious RMI server by setting the `jmx.serviceUrl` property.
- **RMI Server Responds** with a serialized object, triggering RCE on Solr.

### Exploitation via JMX
- **Create an Innocent rmiregistry**.
- **Trigger Solr Connection** to the rmiregistry by setting the `jmx.serviceUrl` property.
- **Connect to the Opened JMX Port** and create a malicious MBean.

### CVE-2019-0193: DataImportHandler RCE
- **Affected Versions**: 1.3 – 8.1.2
- **Requirements**: DataImportHandler enabled.
- **Example**: search.maven.org

### Conclusion
Thank you for your attention! For more details, please refer to the full whitepaper available at:
[GitHub Repository](https://github.com/veracode-research/solr-injection)