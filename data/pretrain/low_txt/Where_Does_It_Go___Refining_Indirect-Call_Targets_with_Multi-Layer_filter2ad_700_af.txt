### Indirect Call Target Refinement and C++ Virtual Function Resolution

#### Indirect Call Target Refinement
When the program source code is available, function-type information can be used to infer fine-grained targets for indirect calls (icalls). Each icall is restricted to one of the type-matched functions. Forward-edge Control-Flow Integrity (CFI) uses partial function type—specifically, the number of parameters—to confine icalls [46], while modular-CFI uses the complete function type for type matching [35]. A mixed solution attempts to infer function type information from the program binary and uses the argument number to match callers and callees [49].

Compared to these solutions, MLTA (Multi-Layer Type Analysis) leverages type information from multiple layers to significantly refine icall targets. Recent CFI solutions also use runtime information to restrict runtime control-flow transfers [13, 16, 22, 36, 48], which address a different problem scope—ensuring that a runtime target is valid. In contrast, MLTA aims to statically infer a complete set of targets for all icalls.

#### Resolving C++ Virtual Calls
Most related work on resolving C++ virtual functions relies on class hierarchy analysis to build the class hierarchy tree [19, 25, 39, 46, 54]. This means that each virtual call can divert the control flow to the function implemented in the current class or those in derived classes. Essentially, such approaches use an expanded single-layer type for finding targets. In comparison, MLTA uses types from multiple layers to further refine the targets, including only virtual functions in a derived class that are cast to a base class as valid targets.

### Conclusion
In this paper, we presented MLTA, a new approach that effectively refines indirect-call targets for both C and C++ programs. We implemented MLTA in a system called TypeDive. TypeDive uses independent types from different layers to dramatically refine the targets. It decouples types from data flows and is elastic to avoid false negatives. Evaluation results show that TypeDive can reduce 86%-98% more indirect-call targets than existing approaches based on function-type matching. We believe that TypeDive can significantly benefit existing static-analysis and system-hardening techniques. As an illustrative example, we used TypeDive to find 25 new missing-check and 10 new missing-initialization bugs in the Linux kernel.

### Acknowledgment
We thank the anonymous reviewers for their helpful feedback. Kangjie Lu was supported in part by the NSF award CNS-1815621. Hong Hu was supported in part by the ONR under grants N00014-17-1-2895 and N00014-18-1-2662. Any opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of NSF or ONR.

### References
[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-Flow Integrity. In Proceedings of the 12th ACM Conference on Computer and Communications Security (CCS), Alexandria, VA, Nov. 2005.
[2] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro. Preventing Memory Error Exploits with WIT. In Proceedings of the 29th IEEE Symposium on Security and Privacy (Oakland), Oakland, CA, May 2008.
[3] S. Biallas, M. C. Olesen, F. Cassez, and R. Huuck. PtrTracker: Pragmatic Pointer Analysis. In 2013 IEEE 13th International Working Conference on Source Code Analysis and Manipulation (SCAM), 2013.
[4] T. Bletsch, X. Jiang, and V. Freeh. Mitigating Code-Reuse Attacks with Control-Flow Locking. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2011.
[5] P. Boonstoppel, C. Cadar, and D. Engler. RWset: Attacking Path Explosion in Constraint-Based Test Generation. In Proceedings of the Theory and Practice of Software, 14th International Conference on Tools and Algorithms for the Construction and Analysis of Systems, TACAS’08/ETAPS’08, 2008.
[6] N. Burow, S. A. Carr, J. Nash, P. Larsen, M. Franz, S. Brunthaler, and M. Payer. Control-Flow Integrity: Precision, Security, and Performance. ACM Computing Surveys (CSUR), 50(1):16, 2017.
[7] C. Cadar, D. Dunbar, and D. Engler. KLEE: Unassisted and Automatic Generation of High-coverage Tests for Complex Systems Programs. In Proceedings of the 8th USENIX Symposium on Operating Systems Design and Implementation (OSDI), San Diego, CA, Dec. 2008.
[8] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross. Control-Flow Bending: On the Effectiveness of Control-Flow Integrity. In Proceedings of the 24th USENIX Security Symposium (Security), Washington, DC, Aug. 2015.
[9] M. Castro, M. Costa, and T. Harris. Securing Software by Enforcing Data-Flow Integrity. In Proceedings of the 7th USENIX Symposium on Operating Systems Design and Implementation (OSDI), Seattle, WA, Nov. 2006.
[10] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer. Non-Control-Data Attacks Are Realistic Threats. In Proceedings of the 14th USENIX Security Symposium (Security), Baltimore, MD, Aug. 2005.
[11] V. Chipounov, V. Kuznetsov, and G. Candea. S2E: A Platform for In Vivo Multi-Path Analysis of Software Systems. In Proceedings of the 16th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Newport Beach, CA, Mar. 2011.
[12] M. Conti, S. Crane, L. Davi, M. Franz, P. Larsen, M. Negro, C. Liebchen, M. Qunaibit, and A.-R. Sadeghi. Losing Control: On the Effectiveness of Control-Flow Integrity Under Stack Attacks. In Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS), Denver, Colorado, Oct. 2015.
[13] R. Ding, C. Qian, C. Song, B. Harris, T. Kim, and W. Lee. Efficient Protection of Path-Sensitive Control Security. In Proceedings of the 26th USENIX Security Symposium (Security), Vancouver, BC, Canada, Aug. 2017.
[14] R. M. Farkhani, S. Jafari, S. Arshad, W. Robertson, E. Kirda, and H. Okhravi. On the Effectiveness of Type-Based Control Flow Integrity. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2018.
[15] X. Ge, N. Talele, M. Payer, and T. Jaeger. Fine-Grained Control-Flow Integrity for Kernel Software. In 2016 IEEE European Symposium on Security and Privacy (EuroS&P), pages 179–194. IEEE, 2016.
[16] X. Ge, W. Cui, and T. Jaeger. GRIFFIN: Guarding Control Flows Using Intel Processor Trace. In Proceedings of the 22nd ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Xi’an, China, Apr. 2017.
[17] E. Göktas, E. Athanasopoulos, H. Bos, and G. Portokalidis. Out of Control: Overcoming Control-Flow Integrity. In Proceedings of the 35th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May 2014.
[18] Google. syzkaller - Kernel Fuzzer. https://github.com/google/syzkaller, 2019.
[19] I. Haller, E. Göktaş, E. Athanasopoulos, G. Portokalidis, and H. Bos. ShrinkWrap: VTable Protection without Loose Ends. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2015.
[20] H. Hu, Z. L. Chua, S. Adrian, P. Saxena, and Z. Liang. Automatic Generation of Data-Oriented Exploits. In Proceedings of the 24th USENIX Security Symposium (Security), Washington, DC, Aug. 2015.
[21] H. Hu, S. Shinde, S. Adrian, Z. L. Chua, P. Saxena, and Z. Liang. Data-Oriented Programming: On the Expressiveness of Non-control Data Attacks. In Proceedings of the 37th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May 2016.
[22] H. Hu, C. Qian, C. Yagemann, S. P. H. Chung, W. R. Harris, T. Kim, and W. Lee. Enforcing Unique Code Target Property for Control-Flow Integrity. In Proceedings of the 25th ACM Conference on Computer and Communications Security (CCS), Toronto, ON, Canada, Oct. 2018.
[23] K. K. Ispoglou, B. AlBassam, T. Jaeger, and M. Payer. Block Oriented Programming: Automating Data-Only Attacks. In Proceedings of the 25th ACM Conference on Computer and Communications Security (CCS), Toronto, ON, Canada, Oct. 2018.
[24] S. Jana, Y. J. Kang, S. Roth, and B. Ray. Automatically Detecting Error Handling Bugs Using Error Specifications. In Proceedings of the 25th USENIX Security Symposium (Security), Austin, TX, Aug. 2016.
[25] D. Jang, Z. Tatlock, and S. Lerner. SafeDispatch: Securing C++ Virtual Calls from Memory Corruption Attacks. In Proceedings of the 2014 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2014.
[26] Y. Kang, B. Ray, and S. Jana. APEx: Automated Inference of Error Specifications for C APIs. In Proceedings of the 31st IEEE/ACM International Conference on Computer and Communications Security (CCS), Denver, Colorado, Oct. 2015.
[49] V. van der Veen, E. Goktas, M. Contag, A. Pawlowski, X. Chen, S. Rawat, H. Bos, T. Holz, E. Athanasopoulos, and C. Giuffrida. A Tough Call: Mitigating Advanced Code-Reuse Attacks at the Binary Level. In Proceedings of the 37th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May 2016.
[50] M. Xu, C. Qian, K. Lu, M. Backes, and T. Kim. Precise and Scalable Detection of Double-Fetch Bugs in OS Kernels. In Proceedings of the 39th IEEE Symposium on Security and Privacy (Oakland), San Francisco, CA, May 2018.
[51] W. Xu, H. Moon, S. Kashyap, P.-N. Tseng, and T. Kim. Fuzzing File Systems via Two-Dimensional Input Space Exploration. In Proceedings of the 40th IEEE Symposium on Security and Privacy (Oakland), San Francisco, CA, May 2019.
[52] I. Yun, C. Min, X. Si, Y. Jang, T. Kim, and M. Naik. APISan: Sanitizing API Usages through Semantic Cross-checking. In Proceedings of the 25th USENIX Security Symposium (Security), Austin, TX, Aug. 2016.
[53] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou. Practical Control Flow Integrity and Randomization for Binary Executables. In Proceedings of the 34th IEEE Symposium on Security and Privacy (Oakland), San Francisco, CA, May 2013.
[54] C. Zhang, D. Song, S. A. Carr, M. Payer, T. Li, Y. Ding, and C. Song. VTrust: Regaining Trust on Virtual Calls. In Proceedings of the 2016 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2016.
[55] M. Zhang and R. Sekar. Control Flow Integrity for COTS Binaries. In Proceedings of the 24th USENIX Security Symposium (Security), Washington, DC, Aug. 2015.

### Appendix: New Missing-Check Bugs
| Subsystem | File | Function | Variable | Source Code |
|-----------|------|----------|----------|-------------|
| [net] | cfg80211.c | mwifiex_cfg80211_connect | sme | devm_kzalloc() |
| [firmware] | edd.c | edd_show_mbr_signature | edev | devm_kzalloc() |
| [char] | tpm_infineon.c | static int tpm_inf_recv | count | regmap_write_bits() |
| [dma] | omap-dma.c | omap_dma_prep_dma_cyclic | period_len | regmap_update_bits() |
| [treewide] | se.c | st21nfca_connectivity_event_received | transaction | i2c_smbus_write_byte_data() |
| [gpio] | gpio-aspeed.c | aspeed_gpio_probe | gpio->offset_timer | i2c_smbus_write_byte_data() |
| [media] | tda18250.c | tda18250_set_params | ret | usb_autopm_get_interface() |
| [clk] | gcc-ipq4019.c | clk_cpu_div_set_rate | ret | kmalloc_array() |
| [ASoC] | cs35l34.c | cs35l34_sdin_event | ret | wait_for_completion_timeout() |
| [rtc] | rtc-rx8010.c | rx8010_set_time | ret | wait_for_completion_timeout() |
| [mfd] | tps65010.c | tps65010_work | status | mtd_device_register() |
| [treewide] | realtek_cr.c | rts51x_invoke_transport | ret | usb_submit_urb() |
| [nfp] | lag_conf.c | nfp_fl_lag_do_work | acti_netdevs | usb_submit_urb() |
| [scsi] | mptscsih.c | mptscsih_IssueTaskMgmt | timeleft | usb_submit_urb() |
| [misc] | tifm_7xx1.c | tifm_7xx1_resume | timeout | usb_submit_urb() |
| [Input] | usbtouchscreen.c | nexio_read_data | result | nla_nest_start() |
| [USB] | iuu_phoenix.c | iuu_rxcmd | result | nla_nest_start() |
| [USB] | iuu_phoenix.c | read_rxcmd_callback | result | dma_pool_create() |
| [USB] | iuu_phoenix.c | iuu_status_callback | result | usb_submit_urb() |
| [USB] | kobil_sct.c | kobil_open | attr | usb_submit_urb() |
| [USB] | kobil_sct.c | kobil_write | nla_reply | usb_submit_urb() |
| [net/ncsi] | ncsi-netlink.c | ncsi_pkg_info_all_nl | fsl_chan->tcd_pool | usb_submit_urb() |
| [netfilter] | conntrack.c | ovs_ct_limit_cmd_get | err | usb_submit_urb() |
| [dmaengine] | fsl-edma-common.c | fsl_edma_prep_slave_sg | retval | usb_submit_urb() |
| [mtd] | generic.c | generic_onenand_probe | retval | usb_submit_urb() |

**Table 6: New missing-check bugs found with TypeDive.** Each row shows one missing-check bug, including the subsystem it belongs to, the file name, the function where the missing check is located, the variable that requires an extra check, and the source code from which the variable originates (either as an argument or a return value from another function).

---

This version of the text is more structured and coherent, with clear headings and a well-organized table. The language has been refined for clarity and professionalism.