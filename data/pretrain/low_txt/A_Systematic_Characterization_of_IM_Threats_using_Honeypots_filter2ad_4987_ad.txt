### Analysis of Attackers' Behavior and Strategies

It is improbable to assume that all compromised accounts were "cleaned up." This cautious behavior on the part of the attackers suggests a deliberate strategy. With 55% of the compromised accounts sending up to 4 URLs and 75% sending fewer than 20, it is evident that one of the strategies attackers follow is to avoid aggressive spamming behaviors to prevent raising suspicions among the contacts of the compromised accounts. Aggressive spamming could alert the user, leading to the disinfection of the account or machine. However, this cautious behavior could also be attributed to technical reasons. If the attack is propagated through a worm that infects the client, a low rate of propagation would be used to avoid triggering antivirus or intrusion detection systems.

Additionally, approximately 12% of the attackers sent at least 100 URLs to our decoy accounts. This aggressive strategy of massively dispatching spam messages indicates a category of attackers who do not try to remain beneath a certain threshold. This can also be attributed to technical reasons. Among the top ten compromised accounts that sent the largest number of URLs, we found all the victim accounts whose credentials we had entered in phishing sites. Therefore, the attackers use tools to send messages from these compromised accounts without relying on worms that infect the IM client software. Thus, we can recognize a second, more aggressive strategy where stealthy propagation rates are not necessary. Finally, it is interesting to note that attackers send URLs from all categories, as well as malware, and do not focus on one specific type.

### Real-Case Evaluation

We were interested in investigating the potential effectiveness of an IM attack campaign. To do so, we decided to launch our own benign campaign targeting the contacts of one of our honeypots. Two factors were considered: localization and the context of the conversation. Several users might become suspicious if we sent them messages not in their native language. We queried the profile pages of most of the contacts we had, but unfortunately, we could not retrieve country information for most of them, so we decided not to localize the messages. The second factor was whether a conversation would take place before sending the URL. A message containing a URL without any prior conversation might get flagged as suspicious immediately.

Nonetheless, we decided to launch a simple spam campaign imitating the ones caught by HoneyBuddy, which would not provide biased results. We logged into one of our honeypot accounts and sent the following message to the online contacts: "Hey! Check this out: http://mygallery.webhop.net/gallery1/photo1.jpg". The URL pointed to a web server controlled by us and redirected the user to a webpage that asked the user to download a (benign) executable. The executable was a harmless program that just requested another URL from our own web server, allowing us to track if and when a user actually executed the file. Each online contact was contacted only once during the experiment.

The results of the campaign are summarized in Figure 14. The bottom series plots the timestamps when the message was sent to an online user. The middle series plots the timestamps when a contact visited the URL contained in the sent message and downloaded the executable. The top series displays the timestamps when a contact actually ran the downloaded executable. During our campaign, we sent 231 messages. 27 unique users (11.6%) visited the URL and downloaded the file, while 9 of them (4%) executed the downloaded file. We repeated the same experiment with two other accounts, and the results were almost the same.

### MyIMhoneypot: A Detection Service

In this section, we present an overview of existing defense measures and propose a service for the early detection of attacks targeting instant messaging networks. The existing defense mechanisms deployed by instant messaging service providers and other vendors are insufficient for protecting users from the threats presented in Section 3. Anti-virus products that scan files received from instant messaging file transfers fail to identify all malware used by IM attackers, as shown by our findings. Anti-virus vendors could provide more up-to-date signatures for IM malware by deploying HoneyBuddy for the early collection of such malware. Furthermore, as shown in Section 5.5, anti-virus products designed to protect users from phishing attacks fail to detect 87% of the malicious URLs collected by our infrastructure. Pop-up messages from IM client software that alert users of phishing, triggered by all messages that contain a URL even if it is benign, are ineffective since users tend to ignore warnings that are presented even for well-known benign URLs. We propose that IM clients should correlate received URLs with blacklists and alert users only when they belong to malicious domains.

We present our client-side mechanism that is orthogonal to existing defense mechanisms: myIMhoneypot, an early detection service that can inform users if their accounts or IM clients have been compromised. IM attacks try to spread through the victim's contact list by sending either URLs or files to the victim's friends. Any user who wants to check if her account is compromised can register with the myIMhoneypot service. Upon registration, the service creates a unique IM honeypot account (e.g., a new MSN account that will be used as a decoy account) and informs the user to add that honeypot account to her contact list. As the user will never start a conversation with the honeypot account, but an IM attacker will (with great probability), the user can check if something is wrong by visiting the website of the service and checking the conversation logs with her unique honeypot account. If there are entries in the conversation log of her decoy account, like the example in Figure 15, then there is a strong indication that her IM client or credentials have been compromised.

The reason a unique IM account must be created per user is twofold. First, if the service has only one or a few honeypot accounts, they can be easily blacklisted (recall that anyone can subscribe to the service, including attackers). The attacker should not be able to distinguish whether a contact is a decoy account or not. The service creates accounts with human-like nicknames. Second, the attacker can try to hack into the service’s accounts once she knows the user is a subscriber. Using a unique honeypot per user makes the attacker’s life much harder. The attacker cannot correlate common friends across accounts and has to try to compromise all the accounts in the user’s contact list. Even if she does that, most IM services (at least MSN and AIM) do not keep conversation logs at the server side, so she cannot find her spam messages in the logs of decoy accounts.

The myIMhoneypot service has a limitation. For each registered user, a new IM account must be created to be used as a decoy. This process involves solving CAPTCHAs, which prevents us from making it completely automatic. Although we could claim that myIMhoneypot is a legal case for laundering CAPTCHAs, we did not implement it for obvious reasons. For the time being, we have to manually create decoy accounts. However, we propose that this service should be implemented by each IM provider as a means of protection for its users. We implemented a prototype of myIMhoneypot for the MSN platform, called myMSNhoneypot, which can be found at [www.honeyathome.org/imhoneypot].

### Conclusions

In this paper, we propose HoneyBuddy, an active honeypot infrastructure designed to detect malicious activities in instant messaging services. HoneyBuddy automatically finds user accounts that belong to a supported IM service and adds them to its contact list. Our system monitors decoy accounts for incoming messages and file transfers, and extracts suspicious executables and URLs. The suspicious data gathered by HoneyBuddy is correlated with existing blacklists and malware collection center databases. Despite the simplicity of our system, deployment for the MSN service showed that 93% of the identified phishing domains were not listed by popular blacklist mechanisms, and 87% of all malicious URLs were incorrectly flagged as safe by a commercial "web-safety" product. Furthermore, 21% of collected malware samples were also not listed by other infrastructures.

These findings confirm that existing security measures of instant messaging services are insufficient and indicate the effectiveness of our system as a complementary detection infrastructure. We further inspected the top-level domains that host the phishing URLs and found that they translate to a very small number of IP addresses, suggesting the existence of a large network of collaborating attackers. On the other hand, domains that distribute malware do not follow the same tactics and translate to a different set of IP addresses. We located domains that belong to fast-flux networks in both cases, but they are more common in the case of phishing domains, which have a higher probability of being blacklisted.

Based on the results from the analysis of the IM attacks we caught, we provided a profile of the attackers and their spamming strategies. An interesting aspect of IM attacks that could not be measured by our infrastructure was how successful an MSN phishing campaign can be. To get an estimation, we deployed our own benign campaign and found that almost 12% of the users followed the URL and 4% ran the executable it redirected to.

We also deployed myMSNhoneypot, a prototype implementation of a service that is open to the public and creates dedicated IM honeypots for users. This service provides an early alerting mechanism for users whose IM accounts or clients are compromised. It provides decoy accounts for users that register with the service to add to their contact list. A message from the user to a decoy account is an indication that the user’s credentials or IM client are compromised, as the user would never initiate a conversation with the decoy contact. We propose this type of service to be adopted and deployed by instant messaging vendors. Finally, we offer a service where users can submit a URL and receive a report indicating if the top-level domain has been classified as dangerous.

### Acknowledgments

This work was supported in part by the project CyberScope, funded by the Greek Secretariat for Research and Technology under contract number PENED 03ED440. We thank the anonymous reviewers for their valuable comments. Iasonas Polakis, Thanasis Petsas, and Evangelos P. Markatos are also with the University of Crete.

### References

[1] Anubis: Analyzing unknown binaries. http://anubis.iseclab.org/.

[2] AQABA Search Engine Demographics. http://www.aqaba-sem.com/search_ed.htm/.

[3] AutoIt. http://www.autoitscript.com/autoit3/index.shtml/.

[4] BuddyFetch. http://buddyfetch.com/.

[5] CAPTCHA: Telling Humans and Computers Apart Automatically. https://captcha.net/.

[6] Crowbar. http://simile.mit.edu/wiki/Crowbar.

[7] Europe surpasses North America in instant messenger users, ComScore study reveals. http://www.comscore.com/press/release.asp?press=800.

[8] Google Safe Browsing API. http://code.google.com/apis/safebrowsing/.

[9] H1N1 Shortcut Malware. http://www.f-secure.com/weblog/archives/00001738.html.

[10] MessengerFinder, Find people online. http://messengerfinder.com/.

[11] MSN Messenger. http://messenger.live.com/.

[12] MSN Polygamy. http://www.softpedia.com/get/Internet/Chat/Instant-Messaging/MSN-Messenger-7-8-Polygamy.shtml/.

[13] Norton Safe Web from Symantec. http://safeweb.norton.com/.

[14] nslookup. http://en.wikipedia.org/wiki/Nslookup.

[15] Pidgin, the universal chat client. http://www.pidgin.im/.

[16] PlanetLab, an open platform for developing, deploying, and accessing planetary-scale services. http://www.planet-lab.org.

[17] Scraping Facebook email addresses. http://kudanai.blogspot.com/2008/10/scraping-facebook-email-addresses.html.

[18] Skype Fast Facts, Q4 2008. http://ebayinkblog.com/wp-content/uploads/2009/01/skype-fast-facts-q4-08.pdf.

[19] Spam Archive. http://untroubled.org/spam/.

[20] The State of Spam: A Monthly Report, August 2007. http://www.symantec.com/avcenter/reference/Symantec_Spam_Report_-_August_2007.pdf.

[21] StopBadware Blog: China Hosts Majority of Badware Sites. http://blog.stopbadware.org/2008/06/24/china-hosts-majority-of-badware-sites.

[22] SURBL. http://www.surbl.org.

[23] Symantec. http://www.symantec.com/index.jsp.

[24] Urlblacklist.com. http://www.urlblacklist.com/.

[25] VirusTotal, online virus and malware scan. http://www.virustotal.com/.

[26] Vulnerability in PNG Processing Could Allow Remote Code Execution. http://www.microsoft.com/technet/security/bulletin/MS05-009.msp

[27] W32.Bropia. http://www.symantec.com/security_response/writeup.jsp?docid=2005-012013-2855-99&tabid=2.

[28] N. Hindocha. Threats to Instant Messaging. Symantec Security Response, 2003.

[29] J. Leskovec and E. Horvitz. Planetary-Scale Views on a Large Instant-Messaging Network. In Proceedings of WWW 2008, April 2008.

[30] Z. Liu and D. Lee. Coping with Instant Messaging Worms - Statistical Modeling and Analysis. Pages 194–199, June 2007.

[31] Z. Liu, W. Lin, N. Li, and D. Lee. Detecting and Filtering Instant Messaging Spam - A Global and Personalized Approach. Pages 19–24, Nov. 2005.

[32] Z. Liu, G. Shu, N. Li, and D. Lee. Defending Against Instant Messaging Worms. In Proceedings of IEEE GLOBECOM 2006, Pages 1–6, 2006.

[33] M. Mannan and P. Van Oorschot. Secure Public Instant Messaging: A Survey. In Proceedings of the 2nd Annual Conference on Privacy, Security and Trust (PST04), Pages 69–77.

[34] G. Portokalidis, A. Slowinska, and H. Bos. Argos: An Emulator for Fingerprinting Zero-Day Attacks. In Proceedings of ACM SIGOPS Eurosys 2006, April 2006.

[35] H. Project. Know Your Enemy: Learning About Security Threats. Pearson Education, Inc., 2004.

[36] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose. All Your Iframes Point to Us. In SS’08: Proceedings of the 17th Conference on Security Symposium, Pages 1–15, Berkeley, CA, USA, 2008. USENIX Association.

[37] A. Trivedi, P. Judge, and S. Krasser. Analyzing Network and Content Characteristics of SPIM Using Honeypots. In Proceedings of the 3rd USENIX SRUTI, 2007.

[38] M. Williamson, A. Parry, and A. Byde. Virus Throttling for Instant Messaging. In Virus Bulletin Conference, Pages 38–4, 2004.

[39] M. Xie, Z. Wu, and H. Wang. HoneyIM: Fast Detection and Suppression of Instant Messaging Malware in Enterprise-Like Networks. In Proceedings of the 2007 Annual Computer Security Applications Conference (ACSAC07).