Iodine leveraged constraint-based static analysis to achieve forward recovery. To optimize the tracking, Iodine inserted monitoring points exclusively at statements that could alter the taint state of variables during the fast-path execution. However, if the execution probabilities of the fast and slow paths are equal in the program being analyzed, or if the profiling of whether a path is fast or slow is inaccurate, this approach offers no advantages. In such cases, it may even incur significant overheads due to frequent path switching and recovery operations.

Current hybrid analysis methods, including DTA, retain several dynamic single-step taint tracking instructions. These methods only demonstrate advantages in specific scenarios. The proposed FSAFlow differs from these approaches by completely separating the slow, one-by-one tracking logic from the dynamic operations within a program. This separation ensures continuous efficiency for Android privacy protection through path monitoring.

Hybrid Analysis (HA) also has many practical applications. For instance, as a vulnerability protection tool, DynPTA [67] uses scoped byte-level DTA to narrow the range of objects identified for static pointer analysis. DynPTA specifically optimizes DTA for loop optimizations related to array accesses. Based on the results of the pointer analysis, selective data is encrypted to prevent external attacks from exploiting pointer misuse vulnerabilities to access sensitive data. FSAFlow, on the other hand, aims to optimize taint tracking performance and further prevent untrusted programs from actively leaking private information.

### VII. CONCLUSION

FSAFlow, a novel approach, is proposed to perform hybrid analysis for privacy protection, addressing the key overhead issues associated with DTA. The core concept of FSAFlow is to completely separate the one-by-one tracking logic from the program execution and to control tracking based on the path rather than the taint. FSAFlow manages the path state using Finite State Automata (FSA). Since the state transition of the path primarily depends on branch statements rather than all statements, FSAFlow operates efficiently. Theoretical and experimental analyses confirm the rationality and efficiency of FSAFlow.

### VIII. ACKNOWLEDGEMENTS

We would like to thank Herbert Bos and the anonymous reviewers for their insightful comments. This work is supported by the National Natural Science Foundation of China (No. 62176265).

### REFERENCES

[1] Z. B. Celik, E. Fernandes, E. Pauley, G. Tan, and P. McDaniel, “Program analysis of commodity IoT applications for security and privacy: challenges and opportunities,” *ACM Computing Surveys*, vol. 52, pp. 1-30, Sept. 2019.

[2] K. Chen, X. Wang, Y. Chen, P. Wang, Y. Lee, X. Wang et al., “Following Devil's Footprints: Cross-Platform Analysis of Potentially Harmful Libraries on Android and iOS,” *2016 IEEE Symposium on Security and Privacy (SP)*, San Jose, CA, USA, 2016, pp. 357-376.

[3] A. C. Myers and B. Liskov, “Protecting privacy using the decentralized label model,” *ACM Transactions on Software Engineering and Methodology*, vol. 9, pp. 1557-7392, Oct. 2000.

[4] V. P. Ranganath and J. Mitra, “Are free Android app security analysis tools effective in detecting known vulnerabilities?” *Empirical Software Engineering*, vol. 25, pp. 178-219, Jan. 2020.

[5] N. Vachharajani, M. J. Bridg, J. Cha, R. Ranga, G. Otton, J. A. Blome et al., “RIFLE: an architectural framework for user-centric information-flow security,” *37th International Symposium on Microarchitecture (MICRO-37'04)*, Portland, Oregon, 2004, pp. 243-254.

[6] Sufatrio, D. J. J. Tan, T. W. Chua, and V. L. L. Thing, “Securing Android: a survey, taxonomy, and challenges,” *ACM Computing Surveys*, vol. 47, pp. 1-45, July 2015.

[7] P. Faruki, A. Bharmal, V. Laxmi, V. Ganmoor, M. Singh Gaur, M. Conti, and M. Rajarajan, “Android security: a survey of issues, malware penetration, and defenses,” *IEEE Communications Surveys & Tutorials*, vol. 17, pp. 998-1022, Secondquarter 2015.

[8] Y. Nan, Z. Yang, X. Wang, Y. Zhang, D. Zhu, and M. Yang, “Finding clues for your secrets: semantics-driven, learning-based privacy discovery in mobile apps,” *in Proceedings of the Network and Distributed System Security Symposium (NDSS’18)*, 2018.

[9] S. Banerjee, D. Devecsery, P. M. Chen, and S. Narayanasamy, “Iodine: fast dynamic taint tracking using rollback-free optimistic hybrid analysis,” *2019 IEEE Symposium on Security and Privacy (SP)*, San Francisco, CA, USA, 2019, pp. 490-504.

[10] M. Zhang and H. Yin, “Efficient, Context-Aware Privacy Leakage Confinement for Android Applications without Firmware Modding,” *in Proceedings of the 9th ACM symposium on Information, computer and communications security (ASIA CCS '14)*, Kyoto, Japan, 2014, pp. 259-270.

[11] Y. J. Jia, Q. A. Chen, S. Wang, A. Rahmati, E. Fernandes, Z. M. Mao, and A. Prakash, “ContexIoT: Towards providing contextual integrity to appified IoT platforms,” *in Proceedings of the Network and Distributed Systems Symposium (NDSS’17)*, 2017.

[12] W. Xu, S. Bhatkar, and R. Sekar, “Taint-enhanced policy enforcement: a practical approach to defeat a wide range of attacks,” *in Proceedings of the 15th conference on USENIX Security Symposium (USENIX-SS'06)*, USA, 2006.

[13] Z. Wu, X. Chen, Z. Yang, and X. Du, “Reducing security risks of suspicious data and codes through a novel dynamic defense model,” *in IEEE Transactions on Information Forensics and Security*, vol. 14, pp. 2427-2440, Sept. 2019.

[14] P. Zong, T. Lv, D. Wang, Z. Deng, R. Liang, and K. Chen, “FuzzGuard: filtering out unreachable inputs in directed grey-box fuzzing through deep learning,” *in 29th USENIX Security Symposium*, 2020.

[15] D. She, Y. Chen, A. Shah, B. Ray, and S. Jana, “Neutaint: efficient dynamic taint analysis with neural networks,” *2020 IEEE Symposium on Security and Privacy (SP)*, San Francisco, CA, USA, 2020, pp. 1527-1543.

[16] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and D. Evans, “Automatically hardening web applications using precise tainting,” *IFIP International Information Security Conference*, Boston, MA, vol. 181, pp. 295-307, 2005.

[17] V. Ganesh, T. Leek, and M. Rinard, “Taint-based directed whitebox fuzzing,” *2009 IEEE 31st International Conference on Software Engineering*, Vancouver, BC, Canada, 2009, pp. 474-484.

[18] S. Lekies, B. Stock, and M. Johns, “25 million flows later: large-scale detection of DOM-based XSS,” *in Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security (CCS '13)*, New York, NY, USA, 2013, pp. 1193-1204.

[19] J. Newsome and D. Song, “Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software,” *in Proceedings of the Network and Distributed System Security Symposium (NDSS '05)*, 2005.

[20] O. Tripp, M. Pistoia, S. J. Fink, M. Sridharan, and O. Weisman, “TAJ: effective taint analysis of web applications,” *in Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '09)*, New York, NY, USA, 2009, pp. 87-97.

[21] Z. Wu, X. Chen, X. Du, and Z. Yang, “CDroid: practically implementation a formal-analyzed CIFC model on Android,” *Computers & Security*, vol. 78, pp. 231-244, 2018.

[22] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas, “Secure program execution via dynamic information flow tracking,” *in Proceedings of the 11th international conference on Architectural support for programming languages and operating systems (ASPLOS XI)*, New York, NY, USA, 2004, pp. 85-96.

[23] J. Kong, C. C. Zou, and H. Zhou, “Improving software security via runtime instruction-level taint checking,” *in Proceedings of the 1st workshop on Architectural and system support for improving software dependability (ASID '06)*, New York, NY, USA, 2006, pp. 18-24.

[24] W. G. J. Halfond, A. Orso, and P. Manolios, “Using positive tainting and syntax-aware evaluation to counter SQL injection attacks,” *in Proceedings of the 14th ACM SIGSOFT international symposium on Foundations of software engineering (SIGSOFT '06/FSE-14)*, New York, NY, USA, 2006, pp. 175-185.

[25] T. Pietraszek and C. V. Berghe, “Defending against injection attacks through context-sensitive string evaluation,” *Springer, Berlin, Heidelberg*, 2005, pp. 124-145.

[26] V. Haldar, D. Chandra, and M. Franz, “Dynamic taint propagation for Java,” *21st Annual Computer Security Applications Conference (ACSAC'05)*, Tucson, AZ, USA, 2005.

[27] P. Vogt, F. Nentwich, N. Jovanovic, and E. Kirda, “Cross site scripting prevention with dynamic data tainting and static analysis,” *in Proceedings of the Network and Distributed System Security Symposium (NDSS '07)*, 2007.

[28] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda, “Panorama: capturing system-wide information flow for malware detection and analysis,” *in Proceedings of the 14th ACM conference on Computer and communications security (CCS '07)*, New York, NY, USA, 2007, pp. 116-127.

[29] J. Caballero, P. Poosankam, S. McCamant, D. Babić, and D. Song, “Input generation via decomposition and re-stitching: finding bugs in Malware,” *in Proceedings of the 17th ACM conference on Computer and communications security (CCS '10)*, New York, NY, USA, 2010, pp. 413-425.

[30] W. Enck, P. Gilbert, B. G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth, “TaintDroid: an information flow tracking system for real-time privacy monitoring on smartphones,” *Communications of ACM*, vol. 57, pp. 99-106, March 2014.

[31] D. Zhu, J. Jung, D. Song, T. Kohno, and D. Wetherall, “TaintEraser: protecting sensitive data leaks using application-level taint tracking,” *ACM SIGOPS Operating Systems Review*, vol. 45, pp. 142-154, Feb. 2011.

[32] M. G. Kang, S. McCamant, P. Poosankam, and D. Song, “DTA++: Dynamic Taint Analysis with Targeted Control-Flow Propagation,” *in Proceedings of the Network and Distributed System Security Symposium (NDSS '11)*, 2011.

[33] J. Clause, W. Li, and A. Orso, “Dytan: a generic dynamic taint analysis framework,” *in Proceedings of the 2007 international symposium on Software testing and analysis (ISSTA '07)*, New York, NY, USA, 2007, pp. 196-206.

[34] T. Reps, S. Horwitz, and M. Sagiv, “Precise interprocedural dataflow analysis via graph reachability,” *in Proceedings of the 22nd ACM SIGPLAN-SIGACT symposium on Principles of programming languages (POPL '95)*, New York, NY, USA, 1995, pp. 49-61.

[35] W. Cheng, Qin Zhao, Bei Yu, and S. Hiroshige, “TaintTrace: efficient flow tracing with dynamic binary rewriting,” *11th IEEE Symposium on Computers and Communications (ISCC'06)*, Cagliari, Italy, 2006, pp. 749-754.

[36] J. Ming, D. Wu, J. Wang, G. Xiao, and P. Liu, “StraightTaint: decoupled offline symbolic taint analysis,” *2016 31st IEEE/ACM International Conference on Automated Software Engineering (ASE)*, Singapore, 2016, pp. 308-319.

[37] J. Ming, D. Wu, G. Xiao, J. Wang, and P. Liu, “TaintPipe: pipelined symbolic taint analysis,” *in Proceedings of the 24th USENIX Conference on Security Symposium (SEC'15)*, USA, 2015, pp. 65-80.

[38] J. Lee, I. Heo, Y. Lee, and Y. Paek, “Efficient dynamic information flow tracking on a processor with core debug interface,” *in Proceedings of the 52nd Annual Design Automation Conference (DAC '15)*, New York, NY, USA, 2015, pp. 1-6.

[39] G. Venkataramani, I. Doudalis, Y. Solihin, and M. Prvulovic, “FlexiTaint: a programmable accelerator for dynamic taint propagation,” *2008 IEEE 14th International Symposium on High Performance Computer Architecture*, Salt Lake City, UT, USA, 2008, pp. 173-184.

[40] S. Chen, M. Kozuch, T. Strigkos, B. Falsafi, P. B. Gibbons, T. C. Mowry et al., “Flexible hardware acceleration for instruction-grain program monitoring,” *2008 International Symposium on Computer Architecture*, Beijing, China, 2008, pp. 377-388.

[41] E. Bosman, A. Slowinska, and H. Bos, “Minemu: the world’s fastest taint tracker,” *Springer, Berlin, Heidelberg*, 2011.

[42] O. Ruwase, “Parallelizing dynamic information flow tracking,” *in Proceedings of the twentieth annual symposium on Parallelism in algorithms and architectures (SPAA '08)*, New York, NY, USA, 2008, pp. 35-45.

[43] InsecureBankv2. https://github.com/dineshshetty/Android-InsecureBankv2

[44] E. B. Nightingale, D. Peek, P. M. Chen, and J. Flinn, “Parallelizing security checks on commodity hardware,” *in Proceedings of the 13th international conference on Architectural support for programming languages and operating systems (ASPLOS XIII)*, New York, NY, USA, 2008, pp. 308-318.

[45] A. Quinn, D. Devecsery, P. M. Chen, and J. Flinn, “JetStream: cluster-scale parallelization of information flow queries,” *in Proceedings of the 12th USENIX conference on Operating Systems Design and Implementation (OSDI'16)*, USA, 2016, pp. 451-466.

[46] S. Ma, X. Zhang, and D. Xu, “ProTracer: towards practical provenance tracing by alternating between logging and tainting,” *in Proceedings of the Network and Distributed System Security Symposium (NDSS '16)*, 2016.

[47] F. Qin, C. Wang, Z. Li, H. Kim, Y. Zhou, and Y. Wu, “LIFT: a low-overhead practical information flow tracking system for detecting security attacks,” *2006 39th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO'06)*, Orlando, FL, USA, 2006, pp. 135-148.

[48] A. Ho, M. Fetterman, C. Clark, A. Warfield, and S. Hand, “Practical taint-based protection using demand emulation,” *in Proceedings of the 1st ACM SIGOPS/EuroSys European Conference on Computer Systems 2006 (EuroSys '06)*, New York, NY, USA, 2006, pp. 29-41.

[49] Y. Ji, S. Lee, E. Downing, W. Wang, M. Fazzini, T. Kim et al., “RAIN: refinable attack investigation with on-demand inter-process information flow tracking,” *in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (CCS '17)*, New York, NY, USA, 2017, pp. 377-390.

[50] G. Portokalidis and H. Bos, “Eudaemon: involuntary and on-demand emulation against zero-day exploits,” *in Proceedings of the 3rd ACM SIGOPS/EuroSys European Conference on Computer Systems 2008 (Eurosys '08)*, New York, NY, USA, 2008, pp. 287-299.

[51] S. Moore and S. Chong, “Static Analysis for Efficient Hybrid Information-Flow Control,” *2011 IEEE 24th Computer Security Foundations Symposium*, Cernay-la-Ville, France, 2011, pp. 146-160.

[52] K. Jee, G. Portokalidis, V. P. Kemerlis, S. Ghosh, and A. D. Keromytis, “A general approach for efficiently accelerating software-based dynamic data flow tracking on commodity hardware,” *in Proceedings of the Network and Distributed System Security Symposium (NDSS '12)*, 2012.

[53] E. Fernandes, J. Paupore, A. Rahmati, D. Simionato, M. Conti, and A. Prakash, “FlowFence: practical data protection for emerging IoT application frameworks,” *in Proceedings of the 25th USENIX Conference on Security Symposium (SEC'16)*, USA, 2016, pp. 531-548.

[54] M. Sun, T. Wei, and J. C.S. Lui, “TaintART: a practical multi-level information-flow tracking system for Android RunTime,” *in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS '16)*, New York, NY, USA, 2016, pp. 331-342.

[55] V. P. Kemerlis, G. Portokalidis, K. Jee, and A. D. Keromytis, “Libdft: practical dynamic data flow tracking for commodity systems,” *in Proceedings of the 8th ACM SIGPLAN/SIGOPS conference on Virtual Execution Environments (VEE '12)*, New York, NY, USA, 2012, pp. 121-132.

[56] Triton: A Dynamic Symbolic Execution Framework. SSTIC, 2015.

[57] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein et al., “FlowDroid: precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps,” *in Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '14)*, New York, NY, USA, 2014, pp. 259-269.

[58] Z. B. Celik, L. Babun, A. K. Sikder, H. Aksu, G. Tan, P. McDaniel, and A. S. Uluagac, “Sensitive information tracking in commodity IoT,” *in Proceedings of the USENIX Security Symposium*, 2018, pp. 1687-1704.

[59] F. Wei, S. Roy, X. Ou, and Robby, “Amandroid: a precise and general inter-component data flow analysis framework for security vetting of Android apps,” *in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (CCS '14)*, New York, NY, USA, 2014, pp. 1329-1341.

[60] D. Devecsery, P. M. Chen, J. Flinn, and S. Narayanasamy, “Optimistic hybrid analysis: accelerating dynamic analysis through predicated static analysis,” *in Proceedings of the Twenty-Third International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS '18)*, New York, NY, USA, 2018, pp. 348-362.

[61] W. Chang, B. Streiff, and C. Lin, “Efficient and extensible security enforcement using dynamic data flow analysis,” *in Proceedings of the 15th ACM conference on Computer and communications security (CCS '08)*, New York, NY, USA, 2008, pp. 39-50.

[62] P. Saxena, R. Sekar, and V. Puranik, “Efficient fine-grained binary instrumentation with applications to taint-tracking,” *in Proceedings of the 6th annual IEEE/ACM international symposium on Code generation and optimization (CGO '08)*, New York, NY, USA, 2008, pp. 74-83.

[63] L. Cavallaro, P. Saxena, and R. Sekar, “On the limits of information flow techniques for malware analysis and containment,” *in Proceedings of the International conference on Detection of Intrusions and Malware, and Vulnerability Assessment*, Berlin, Heidelberg, 2008, pp. 143-163.

[64] Asia Slowinska and Herbert Bos, “Pointless Tainting? Evaluating the Practicality of Pointer Tainting,” *in Proceedings of the 4th ACM European conference on Computer systems (EuroSys '09)*, New York, NY, USA, 2009, pp. 61-74.

[65] K. Jee, V. P. Kemerlis, A. D. Keromytis, and G. Portokalidis, “ShadowReplica: efficient parallelization of dynamic data flow tracking,” *in Proceedings of the 2013 ACM SIGSAC conference on Computer and communications security*, 2013, pp. 235-246.

[66] D. Arp, M. Spreitzenbarth, M. Hübner, H. Gascon, and K. Rieck, “Drebin: Effective and explainable detection of android malware in your pocket,” *in Proceedings of the 19th Annual Network and Distributed System Security Symposium (NDSS)*, 2014, pp. 1-15.

[67] T. Palit, J. F. Moon, F. Monrose, and M. Polychronakis, “DynPTA: Combining Static and Dynamic Analysis for Practical Selective Data Protection,” *in Proceedings of 2021 IEEE Symposium on Security and Privacy (SP)*, San Francisco, CA, US, 2021, pp. 1919-1937.

[68] J. Galea and D. Kroening, “The taint rabbit: Optimizing generic taint analysis with dynamic fast path generation,” *in Proceedings of the 15th ACM Asia Conference on Computer and Communications Security*, 2020, pp. 622-636.

[69] J. Zhang, C. Tian, and Z. Duan, “FastDroid: Efficient Taint Analysis for Android Applications,” *In 2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)*, 2019, pp. 236-237.

[70] X. Zhang, X. Wang, R. Slavin, and J. Niu, “ConDySTA: Context-Aware Dynamic Supplement to Static Taint Analysis,” *in Proceedings of 2021 IEEE Symposium on Security and Privacy (SP)*, San Francisco, CA, US, 2021, pp. 796-812.

Authorized licensed use limited to: Tsinghua University. Downloaded on August 07, 2022 at 13:12:26 UTC from IEEE Xplore. Restrictions apply.