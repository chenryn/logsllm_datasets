### 4.3. Security Enforcement
A proxy controls access to an object with the help of a prefixed representative object [13]. Access to the real object is only possible through the proxy. GAMMA protects data objects containing sensitive information by automatically generating proxy objects and returning them instead of the real object. Proxies offer the same routines as the real objects, ensuring that clients do not recognize any differences. Accessing these objects via the proxy directly invokes the access control mechanism. Since the real objects are stored in a separate space and can only be accessed through proxies, applications cannot bypass the access control mechanism. In fact, a client will never obtain a direct reference but a proxy that appears to be the real object.

### 4.4. Reflection
To provide GAMMA's flexibility, a mechanism for introspecting software objects at runtime is necessary. This is required for generating proxies and loading user-defined framework extensions (e.g., new access control models, data providers). The current implementation of GAMMA is realized using the Java language, which offers introspection, known as reflection. However, GAMMA's concept can be implemented in any other language or architecture (e.g., Microsoft .NET) where introspection facilities are available.

### 5. Example: Time Management
In this section, we present an example application that is simple yet incorporates comprehensive authorization requirements to demonstrate the benefits of the presented component framework. The sample application has been implemented as a vision demonstrator within the GAMMA project.

#### 5.1. Authorization Requirements
Figure 7 illustrates the authorization requirements of the time management application.

During each month, employees record their project hours into timetable objects. Each employee is the owner of their monthly timetable and should have full control over the object. Additionally, the employee should be allowed to grant access to their timetable to third parties if they choose (REQ1). Project managers should have read access to their employees' timetables (REQ2). At the end of each month, employees should finalize their timetables and lose write access. Rights granted to individual third parties should also be revoked. Project managers should be able to finalize their project reports using the timetables of their project members. Furthermore, full control of any timetable should be transferred to a secretary who balances accounts with customers (REQ3).

#### 5.2. Realization Using Multiple Access Control Models
This example highlights GAMMA's ability to work with two access control models simultaneously, i.e., a Discretionary Access Control (DAC) model and a Role-Based Access Control (RBAC) model, both using a closed-world assumption.

- **DAC**: An employee has full rights and can grant access to a third party.
- **RBAC**: A project manager has read access, and a secretary has full control.

Figure 8 illustrates the schematic combination of the two access control models. At the beginning of each month, an employee creates their timetable, which is an instance of a class derived from the secure object component. The employee automatically receives a special authorization "ownership," granting full access to the timetable. A time constraint is associated with the ownership authorization, restricting the employee's privileges to the current month. When the employee grants access to a third party, additional time-constrained authorizations are created, limiting the delegated access rights to the current month.

At the end of the month, when the timetable is given to the secretary, the ownership privilege and any rights granted to third parties are automatically disabled due to the time constraints. Simultaneously, some other persons, such as the project manager or the secretary, have access to the timetable based on appropriate roles. These roles are assigned to users, and authorizations are assigned to roles. However, these authorizations also have time constraints that complement the DAC authorizations' time constraints.

Using this approach, the validity period of access control models can be regulated. During the month, only rules specified in the DAC's authorization base are valid. At the end of the month, all these rules become invalid because their time constraints no longer allow access. However, the rules of the RBAC model become valid.

#### 5.3. Used/Extended Framework Components
The authorization requirements and realization approach mentioned above can be achieved with GAMMA by using and/or extending specific components of the framework.

First, a timetable business object is created by business application developers, which needs to be protected and thus derived from a secure object. Then, model providers must derive two concrete access control models: DAC and RBAC, specialized for the particular application. Framework architects may later decide to include the resulting access control model with the framework for future use. Application developers and model providers negotiate and derive the specific subjects to be used in the application, i.e., employees (as users) and roles. They also define concrete authorizations applicable to the scenario, such as ownership (full access and the right to grant access to third parties), read permission, write permission, and delete permission. Additionally, time constraints must be derived and automatically associated with authorizations to realize the temporal switch of access control models. Finally, model providers must implement concrete data provider objects if not already available for the specific backend systems.

### 6. Conclusions and Future Work
In this paper, we have presented GAMMA, a security framework supporting the development of multi-tier applications. It includes various components offering high-level security mechanisms, including different access control models that can be used concurrently and support for arbitrary constraints.

Based on our experience using GAMMA for several applications, we have identified the following major issues to address in the future:

1. **.NET Environment**: We aim to realize the framework for the .NET programming environment, which currently lacks convenient enforcement. This should be straightforward due to the language and architecture-independent design of the GAMMA framework.
2. **Additional Authentication Forms**: We will implement additional forms of authentication, particularly challenge-response methods, as the GAMMA prototype currently only provides password-based authentication.
3. **Multi-Level Security Models**: We will implement models such as the Bell-LaPadula model, as multi-level approaches can be useful in certain situations. This will also allow us to evaluate the spectrum of applicability of our canonical access control mechanism.
4. **XML-Based Security Standards**: Several standards bodies, including OASIS, IETF, and W3C, have proposed XML-based security standards. The most relevant for authorization and access controls are SAML and XACML, both driven by OASIS technical committees. Our architecture allows for the realization of dedicated security data providers for SAML or XACML, which we plan to do once stable specifications are available.

### References
[1] J.E. Dobson and B. Randell B, “Building Reliable Secure Computing Systems out of Unreliable Insecure Components,” Proc. 17th Annual Computer Security Applications Conference (ACSAC), New Orleans, Louisiana, USA, Dec. 10th –14th, 2001.

[2] M. Carey, H. Garcia-Molina, J. Hamilton, H. Pirahesh, and B. Thuraisingham, “Where are Our Promising Research Directions: Database Server, Middleware, or Applications?” Panel Discussion: Proc. 18th Int. IEEE Conf. on Data Engineering (ICDE), San Jose, CA, USA, Feb. 26th – March 1st, 2002.

[3] W. Essmayr, S. Probst, and E. Weippl, “Role-based Access Controls: Status, Dissemination, and Prospects for Generic Security Mechanisms,” to appear: Int. Journal of Electronic Commerce Research, Kluwer Academic Publishers.

[4] W. Essmayr, S. Probst, and E. Weippl, “A Comparison of Distributed Authorization Solutions,” Proc. 3rd Int. Conference on Information Integration and Web-based Applications & Services (IIWAS), Linz, Austria, Sep. 10th-12th, 2001.

[5] P. Ashley, and M. Vandequauver, “Intranet Security - The SESAME Approach,” Kluwer Academic Publishing, 1998.

[6] M.E. Zurko, R. Simon, and T. Sanfilippo, “A User-Centered, Modular Authorization Service Built on an RBAC Foundation,” Proc. IEEE Symposium on Security and Privacy, Berkeley, CA, USA, May 1999.

[7] M. Hauswirth, C. Kerer, and R. Kurmanowytsch, “A flexible and extensible security framework for Java code,” Proc. 9th International World Wide Web Conference, Amsterdam, May 2000.

[8] I. Welch, and R. Stroud, “Supporting Real World Security Models in Java,” Proc. 7th IEEE Workshop on Future Trends in Distributed Computing Systems, Tunisia, South Africa, December 1999.

[9] Sun Microsystems, “Java Security Architecture,” http://java.sun.com/j2se/1.4/docs/guide/security/spec/security-specTOC.fm.html (last accessed on May 31, 2002).

[10] E. Jendrock, S. Bodoff, D. Green, K. Haase, M. Pawlan, and B. Stearns, The J2EE Tutorial, ISBN 0-201-79168-4, Addison Wesley, 2002.

[11] Foundstone Inc., CORE Security Technologies, “Security in the Microsoft® .NET Framework,” http://www.foundstone.com/pdf/dotnet-security-framework.pdf (last accessed on May 31, 2002).

[12] R. Sandhu, D. Ferraiolo, and R. Kuhn, “The NIST Model for Role-Based Access Control: Towards A Unified Standard,” Proc. 5th ACM Workshop on Role-Based Access Control, July 2000.

[13] E. Gamma, R. Helm, R. Johnson, and J. Vlissides, Design Patterns, ISBN 0-201-63361-2, Addison-Wesley, 1995.

Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC 2002)
1063-9527/02 $17.00 © 2002 IEEE