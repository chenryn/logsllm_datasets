### Bit-Flip, Pulse, Delay, and Indetermination in Combinational Logic

**Bit-Flip, Pulse, Delay, and Indetermination:**
- **Bit-Flip:** A transient fault that changes the state of a single bit.
- **Pulse:** A brief, unintended signal that can cause temporary malfunctions.
- **Delay:** An increase in the propagation time of a signal.
- **Indetermination:** A situation where the output of a combinational logic is undefined or unpredictable.

**Flip-Flops (FFs) and Memory:**
- **Flip-Flops (FFs):** Used to store and transfer data in digital circuits.
- **Memory:** Refers to the storage elements in the system, such as FFs.

**Arithmetic Logic Unit (ALU):**
- **ALU:** The component of a CPU that performs arithmetic and logical operations.

**Figures:**
- **Figure 14:** Results from indetermination emulation into combinational logic.
- **Figure 15:** Results from delay emulation into combinational logic.

### Experimental Results and Comparison

The correctness of the results was studied by comparing them with those obtained using VFIT (cf. Table 3). Since VFIT requires the model to specify the delay of signals using generic clauses, and the selected model does not include any, the comparison for delay experiments could not be performed. For faults in combinational logic, Table 3 shows the results for the ALU unit, which is considered the most representative because it is purely combinational.

Both tools produced similar results, showing the same trend as the fault duration increased. The most notable differences were related to the injection of faults. According to these results, FADES not only demonstrates the feasibility of our approach but also opens an interesting and promising research domain for accurate dependability analysis of VLSI systems at lower temporal costs than traditional model-based fault injection techniques.

### Discussion

#### 7.1. Speed-Up

Although the execution time of the experiments with our experimental tool was sped up by an average factor of 15.66 (cf. Table 2), this acceleration may not seem sufficient to justify the use of FPGAs for building a prototype of the system under analysis, especially for small systems.

In the case of fault emulation using run-time reconfiguration, most of the execution time is spent on the fault injection process, while the workload execution takes a small fraction of this time. Classical model-based fault injection tools like VFIT spend most of the time executing the model on powerful CPUs, with a very short temporal overhead for fault injection. When executing simple models and/or short workloads, modern CPUs outperform FPGAs, making FPGA reconfiguration the bottleneck that limits speed-up.

The 8051 microcontroller used in the study utilized only 637 out of 24,576 flip-flops (FFs) and 5,310 out of 24,576 LUTs available in the Virtex 1000 FPGA. This explains why the speed-up was only in the range of one order of magnitude. We expect that more complex models and larger workloads would make our approach more effective in terms of execution time, requiring further research.

#### 7.2. Faults in Sequential Logic versus Faults in Combinational Logic

Modern systems tend to be fully synchronous, meaning a fault in combinational logic is unlikely to cause a failure unless it is captured by a sequential element. If a fault in combinational logic manifests as a bit-flip in sequential logic, why not inject bit-flips exclusively?

This reasoning might make sense when considering the injection of multiple bit-flips. A fault in a combinational path, which can drive many FFs, may lead to bit-flips in many of these FFs (cf. Table 4).

**Table 4:** Effects of the occurrence of pulses in combinational logic.

| Virtex-related Injection Point | Affected Register | Fault-Free Hex Value | Faulty Hex Value |
|--------------------------------|-------------------|----------------------|------------------|
| CLB(15, 40) slice 1, LUT F      | s_all_scon_out    | 2A                   | 30               |
| CLB(22, 39) slice 1, LUT G      | Mtridata_sram_data| 00                   | 97               |
| ...                             | ...               | ...                  | ...              |

A Virtex CLB contains two slices, each comprising two logic elements. Therefore, a fault in combinational logic could be emulated by injecting a multiple bit-flip in the related sequential logic. Although it might seem that injecting pulses, delays, and indeterminations in combinational logic is of little interest, it is valuable for determining the distribution of bit-flips depending on the affected combinational path. Since the combinational path will not equally affect each FF it drives, several experiments are necessary to determine how each fault model can be emulated by a multiple bit-flip. Thus, the injection of faults into combinational logic cannot be ignored.

#### 7.3. Benefits of Run-Time Reconfiguration for Fault Emulation

The main benefit of using FPGAs for fault emulation is the significant speed-up compared to other model-based fault injection techniques. Another technique, compile-time reconfiguration, uses FPGAs to accelerate experiment execution but requires a great amount of time to implement instrumented versions of the model. Run-time reconfiguration, although taking more time for FPGA reconfiguration, outperforms compile-time reconfiguration by requiring only one implementation, making it suitable for large systems.

Most model-based fault injection techniques have many requirements, such as the model being written in specific HDL languages like VHDL or Verilog. Our technique has just one requirement: it uses a synthesizable model of the system, which is not always easy to build. Currently, our implementation (JBits package and prototyping board) can only monitor the state of sequential elements, leading to a timing resolution of one clock cycle, which may not be precise enough for some systems. This is an open issue requiring further research.

Finally, the use of IP cores to build System-On-a-Chip (SoC) systems is of great interest. In this case, the user is provided with an already implemented core that can be integrated into other systems. Since no model is usually available, validation via model-based fault injection techniques is not possible. Our proposed technique works at a lower (implementation) level, allowing direct emulation of faults in IP cores with restricted controllability/observability.

### Conclusions and Future Work

This paper investigates the extent to which the occurrence of transient faults in HDL models can be emulated using FPGAs. It covers representative transient fault models such as bit-flip, pulse, delay, and indetermination, which have not been considered for fault emulation until now.

Several experiments were conducted using a prototype tool named FADES, and their results were compared to those obtained from a VHDL-based fault injection tool. The comparison showed that FADES not only emulates these faults properly but also outperforms the other tool by at least an order of magnitude. We expect that the emulation of complex models will provide even better speed-up factors.

In the near future, we plan to extend this framework to cover typical permanent faults such as shorts, open lines, bridging, and stuck-open faults. We will also focus on the occurrence of multiple bit-flips and faults affecting systems manufactured using FPGAs.

### Acknowledgments

This work has been supported by the Spanish MCYT project TEC 2005-05119/MIC.

### References

[1] C. Constantinescu, “Impact of Deep Submicron Technology on Dependability of VLSI Circuits,” IEEE Int. Conf. on Dependable Systems and Networks, USA, 2002, pp. 205–209.

[2] T. Karnik, P. Hazucha, and J. Patel, “Characterization of Soft Errors Caused by Single Event Upsets in CMOS Processes,” IEEE Trans. on Dependable and Secure Computing, vol. 1, no. 2, 2004, pp. 128–143.

[3] A. Benso, and P. Prinetto, Fault Injection Techniques and Tools for Embedded Systems Reliability Evaluation, Kluwer Academic Publishers, 2003.

[4] K.-T. Cheng, S.-Y. Huang, and W.-J. Dai, “Fault Emulation: A New Methodology for Fault Grading,” IEEE Trans on Computer-Aided Design of Integrated Circuits and Systems, vol.18, no. 10, 1999, pp. 1487–1495.

[5] P. Civera, et al., “New Techniques for Efficiently Assessing Reliability of SOCs,” Microelectronics Journal, vol. 34, no. 1, 2003, pp. 53–61.

[6] L. Antoni, L. Leveugle, and B. Fehér, “Using Run-Time Reconfiguration for Fault Injection Applications,” IEEE Trans. on Instrumentation and Measurement, vol. 52, no. 5, 2003, pp. 1468–1473.

[7] Fault Representativeness, Deliverable ETIE2 of the Dependability Benchmarking (DBench) Project, IST-2000-25425, 2002, online: http://www.laas.fr/DBench/ETIE2.pdf.

[8] B. L. Hutchings, and M. J. Wirthlin, “Implementation Approaches for Reconfigurable Logic Applications,” Int. Workshop on Field Programmable Logic and Applications, UK, 1995, pp. 293–302.

[9] Virtex-II Platform FPGAs: Complete Data Sheet, Xilinx Corp., DS031, v3.3, 2004.

[10] Stratix II Device Handbook, Volume 1, Altera Corp., SII5v1-2.1, 2005.

[11] Lattice ECP/EC Family Data Sheet, Version 01.3, Lattice Semiconductors, 2004.

[12] AT40KAL Series FPGA, Atmel Corp., 2818E-FPGA-1/04, 2004.

[13] D. de Andrés, et al., “Fast Run-Time Reconfiguration for SEU Injection,” 5th European Dependable Computing Conference, LNCS, vol. 3463, Hungary, 2005, pp. 230–245.

[14] L. Antoni, L. Leveugle, and B. Fehér, “Using Run-Time Reconfiguration for Fault Injection in Hardware Prototypes,” IEEE Int. Symp. on Defect and Fault Tolerance in VLSI Systems, Canada, 2002, pp. 245–253.

[15] A. Parreira, J. P. Teixeira, and M. Santos, “A Novel Approach to FPGA-Based Hardware Fault Modelling and Simulation,” Int. Workshop on Design and Diagnostics of Electronic Circuits and Systems, Poland, 2003, pp. 17–24.

[16] VirtexTM 2.5 V Field Programmable Gate Arrays: Complete Data Sheet, Xilinx Corp., DS003, 2002.

[17] RC1000 Functional Reference Manual, Celoxica Inc., RM-1140-0, 2001.

[18] S. Guccione, D. Levi, and P. Sundararajan, “JBits: A Java-based Interface for Reconfigurable Computing,” 2nd Annual Military and Aerospace Applications of Programmable Devices and Technologies Conference, USA, 1999.

[19] J. C. Baraza, et al., “A Prototype of a VHDL-based Fault Injection Tool: Description and Application,” Journal of Systems Architecture, vol. 47, no. 10, 2002, pp. 847–867.

[20] 8051 IP Core, version 1.4, Oregano Systems, 2004, available online at: http://www.oregano.at/ip/8051.htm.