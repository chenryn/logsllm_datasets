### 优化后的文本

#### b) 私有位和校验间接调用位的映射
此部分描述了用于写入私有位及读取校验间接调用位的过程。通过该映射写入的位是私有的，仅限当前进程访问。该映射的生命周期与进程一致，并在 `MiCfgInitializeProcess` 中进行设置。具体调用堆栈如下：
- **图12 – 调用堆栈**
基于上述调用堆栈，我们知道这一映射是在进程初始化时创建的。对于不同版本（如 Build 10.0.9926 和 6.4.9841），映射大小有所不同。对于 6.4.9841，映射大小根据用户模式空间大小计算，公式为 `size = User Mode Space Size >> 6`。而对于 10.0.9926，固定大小为 0x3000000。这些映射在整个进程生命周期中始终存在，其基址和长度存储在一个名为 `MI_CFG_BITMAP_INFO` 的结构体中。例如，在 6.4.9841 中，基址设为 0xC0802144；而在 10.0.9926 中，则为 0xC080214C。

稍后将详细讨论如何向映射空间写入私有位。以下是 `MI_CFG_BITMAP_INFO` 结构的大致布局：

#### 更新 CFGBitmap 的位
一旦 PE 映像的 RVA 列表准备好且 CFGBitmap 节已映射，即可将这些 RVA 翻译成 CFGBitmap 中的位。
- **图13 – 更新 CFGBitmap 的位**

此过程在不同场景下略有差异：
- 在 `ReloadImage/ReloadImageAgain` 中，使用 `MiUpdateCfgSystemWideBitmap` 函数写入共享模块（如 DLL）的位。
- 在进程初始化阶段，写入私有模块（如 EXE 文件）的位。
- 写入虚拟内存操作相关的位。
- 写入映像和数据段映射的位。

为了更好地理解这些过程，首先需要了解每个进程中 CFGBitmap 的两部分：共享部分和私有部分。`MiCfgBitMapSection` 是一个共享内存对象，包含了所有进程共用的 CFGBitmap 信息。当它被映射到每个进程的虚拟地址空间时，各进程看到的内容相同。共享模块（如 DLL）的信息会按照之前所述的方法写入共享部分。

然而，每个进程还需要一部分私有的 CFGBitmap 区域，以便独立地记录某些模块的信息（如 EXE 文件）。这部分内容不与其他进程共享。下图展示了这种通用情况下的布局。
- **图14 – MiCfgBitMapSection 中的共享部分及其私有节**

##### a) 共享模块的位写入
在 `ReloadImage/ReloadImageAgain` 操作期间，通过 `MiUpdateCfgSystemWideBitmap` 函数写入共享模块（如 DLL）的位。如前所述，在获取压缩的函数 RVA 列表并保存至 `_Control_Area` 结构之后（具体偏移量取决于系统版本），将调用 `MiSelectImageBase` 来确定最终的基址。然后，使用这个基址调用 `MiUpdateCfgSystemWideBitmap`。

`MiUpdateCfgSystemWideBitmap` 的主要任务是将压缩的 RVA 列表转换为 CFGBitmap 中对应的“1”位。该函数接受三个参数：
- 控制区域结构指针
- 映像基址
- 压缩的 RVA 列表指针

其核心逻辑包括：
- **图15 – MiUpdateCfgSystemWideBitmap 的主要逻辑**
  - 步骤 B: 将 CFGBitmap 共享内存映射到系统进程空间。这里并不映射整个共享内存，而是基于映像基址计算出相应的偏移量作为起始地址。转换公式为 `Bitmap Offset = Base Address >> 6`，并且映射大小等于映像大小右移 6 位。

##### b) 私有模块的位写入
在进程初始化阶段，针对私有模块（如 EXE 文件）的位写入通过 `MiCommitVadCfgBits` 实现，后者是一个调度函数。参考图 13 可知，它在特定条件下被调用。该函数负责在 VAD 描述的空间内写入位。关键步骤如下：
- **图16 – MiMarkPrivateImageCfgBits 函数处理私有模块位写入**

`MiMarkPrivateImageCfgBits` 函数专门用于向 CFG Bitmap 写入私有模块（EXE 等）的位信息。每当系统映射一个新的 EXE 节或启动新进程时，都会调用此函数。其输入参数包括：
- CFG 信息全局变量地址
- 映像空间的 VAD

主要逻辑涉及：
- **图17 – MiMarkPrivateImageCfgBits 的主要逻辑**
  - 步骤 A: 从关联的 `_Control_Area` 结构中获取压缩的 RVA 列表。
  - 步骤 C: 实现私有位的写入，确保只读属性。具体实现方法包括获取物理页帧号 (PFN)、分配空页表项 (PTE) 并填充物理地址等步骤，以确保私有位更新不会影响其他进程。

##### c) 虚拟内存操作的位写入
当进程执行虚拟内存操作时，可能会影响 CFGBitmap 中的位状态。这类情况下，同样会调用 `MiMarkPrivateImageCfgBits` 函数来处理。特别地：
- 对于 `NtAllocVirtualMemory` 函数，如果分配具有可执行权限的虚拟内存，则相应位会被设置为“1”。但若保护属性包含 `SEC_WRITECOMBINE`，则设置为“0”。
- 对于 `MiProtectVirtualMemory` 函数，改变虚拟内存保护属性为“可执行”也会导致相应位被置为“1”。

##### d) 映像和数据段映射的位写入
对于非共享映像节的映射，处理方式与前述类似。而对于共享映射，则由 `MiMarkPrivateImageCfgBits` 处理，遍历每一页并将地址转换为 CFGBitmap 中的偏移。根据是否已有原型 PTE 支持，决定是复制新的位信息还是保持现有信息不变。

以上所有步骤均发生在内核模式下。但在用户模式下，CFGBitmap 需要通过 `LdrpValidateUserCallTarget` 访问。当创建新进程时，NT 内核会调用 `PspPrepareSystemDllInitBlock` 函数，将 CFGBitmap 映射地址及其长度写入 `PspSystemDllInitBlock` 结构。用户模式可以通过硬编码的全局变量 `PspSystemDllInitBlock` 访问这些信息。

#### 安全检查与异常处理
当间接调用的目标地址在 CFGBitmap 中没有标记为“1”时，将触发控制流保护 (CFG)。此时，进程会采取行动处理异常，具体通过 `RtlpHandleInvalidUserCallTarget` 函数实现。该函数的主要流程包括验证 DEP 状态以及触发 int 29 中断，最终可能导致进程终止。

如果间接调用目标超出 CFGBitmap 范围，系统会抛出访问异常。此类异常将返回给用户模式处理函数 `KiUserExceptionDispatcher`，进而调用 `RTLDispatchException` 进行进一步处理。如果指令地址仍可访问 CFGBitmap，则继续调用 `RtlpHandleInvalidUserCallTarget`。

#### 自定义 CFGBitmap
进程还可以通过 `NtSetInformationVirtualMemory` 自定义其 CFGBitmap，实际功能由内核中的 `MiCfgMarkValidEntries` 实现。此函数接收缓冲区及长度作为参数，其中每个单元为 8 字节，前四个字节为目标地址，后四个字节指示应设置为“0”或“1”的标志。需要注意的是，自定义 CFGBitmap 仅对当前进程可见。

#### CFG 的弱点
尽管 CFG 提供了一定的安全保障，但仍存在一些潜在弱点：
- CFGBitmap 地址存储在用户模式可访问的位置，这构成了一定的安全风险。
- 如果主模块未启用 CFG，则即便加载了启用了 CFG 的模块，整个进程也不会受到保护。
- 当主模块禁用 DEP 时，即使间接调用目标不可靠，也可能绕过 CFG 检查。
- CFGBitmap 中每个位代表 8 字节内存，因此小于 8 字节的目标地址可能被视为有效。
- 动态生成的代码（如 JIT 技术产生的函数）不受 CFG 保护，因为 `NtAllocVirtualMemory` 会将所有分配的可执行内存标记为有效。不过，通过 `MiCfgMarkValidEntries` 自定义 CFGBitmap 或许能缓解这一问题。