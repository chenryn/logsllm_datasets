I initially posted a comment in issue #4936, but I believe it would be more appropriate to address this as a separate issue.

I fully support the rationale behind not having backing instances and references for stateless components. I aim to utilize pure stateless components whenever possible. However, I have encountered some challenges when it comes to testing these components.

For the most part, using the shallow renderer to render a stateless component has been sufficient. I can then make assertions on the expected props and children. To minimize redundancy, I abstract the shallow rendering process into a helper function.

When it comes to testing events, however, I need to take a different approach. If my component accepts an `onClick` prop, I must wrap it in a class component to access the DOM node and simulate the click event. Although this is manageable, I can still abstract the wrapping and rendering process into a helper function to reduce repetition.

I raise this point because I believe that better facilities within `TestUtils` for stateless components would be beneficial. Allowing `ReactDOM.findDOMNode` to work with stateless components might not be the ideal solution, as it could lead to misuse in regular application code. 

Would you be open to adding additional functions to `TestUtils` to simplify the testing of stateless components? Or am I introducing a code smell in my testing practices?

If you think that additional helper functions for stateless components in `TestUtils` would be valuable, I would be happy to create a pull request.