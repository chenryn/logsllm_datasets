### 5. Classification of Protocol Implementations and Attacks
As illustrated in Figure 3, we classify protocol implementations and attacks based on their characteristics and vulnerabilities.

### 6. Discussion and Related Work
The formalization of security protocols and the development of semantics for them have been a subject of extensive research since the early work of Carlsen [11]. Abadi [1] highlighted that the way principals check incoming messages is a crucial aspect often overlooked in protocol descriptions.

#### 6.1. Existing Approaches and Their Limitations
Many approaches have aimed to make these checks explicit, but they often suffer from ad hoc or case-by-case treatments, particularly for Dolev-Yao style primitives. 

- **Carlsen [11]**: Defined four primitive security-relevant internal actions that can be derived from protocol narrations. However, the `checkvalue` action, which requires type information for each word, is not always feasible.
- **Caleiro et al. [10]**: Enumerated rules to characterize a principal’s view of a message, allowing checks on "reachable" messages. The process is complex, involving concepts like analyzable positions and inner facial patterns.
- **Briais and Nestmann [9]**: Identified three types of checks that can be reduced to normal equality tests. They used Analysis and Synthesis rules to saturate knowledge sets, but these rules are specialized for the Dolev-Yao model, limiting their generalizability.
- **Other Works [28, 8]**: Discussed checks informally, without automating the process. Additionally, they only considered structured data, ignoring bit strings, which raises practical implementation issues.

A major drawback of these approaches is the lack of an intuitive and general justification for such checks in protocol narrations. It is unclear whether all necessary checks are properly identified. For example, Briais and Nestmann [9] claim to derive the maximum checks, but there is no consensus on what constitutes the maximum checks.

#### 6.2. Challenges in Message Interpretation
The main reason for the lack of intuitive justifications is the difficulty in understanding a principal's inability to interpret a message. In several works [17, 28, 5, 19], messages that cannot be interpreted with the principal’s knowledge are treated as "black-boxes." This simplification may lead to imprecise semantics, as it can miss relationships between messages, such as `hash(Nb)` and `Nb` in the ASW protocol.

In [10], the concepts of transparent and opaque messages resemble our notions of recognizable and unrecognizable terms. However, while a transparent message is recognizable, the reverse is not necessarily true. For instance, if Alice knows `{{Nb}Kbs}` and receives a message intended to be `Nb · Kbs`, the message `Nb · Kbs` is recognizable under the "perfect encryption" assumption [4], but it is not `{{Nb}Kbs}`-transparent by the definition in [10].

#### 6.3. Our Approach
Our work builds upon the concept of recognizability [24], which formalizes a principal’s ability or inability to verify a message. Although initially proposed for understanding type flaw attacks, this concept is similar to ours from a cognitive perspective. We extend this concept to provide a more fine-grained characterization of ambiguous terms.

The concept of static equivalence (on frames) in the applied pi calculus [3, 2] is similar to our operational equivalence (on markup term sets, Definition 3.2). However, we differentiate between unambiguous (ground term) and ambiguous (free variable) messages, whereas in static equivalence, all messages are ambiguous. The observational equivalence on processes corresponds to operational equivalence on strands.

Recently, Chevalier and Rusinowitch [13] related static equivalence to giving semantics to protocol narrations. This is the first result, to our knowledge, that ensures all possible checks are performed. However, it only allows equality checks, which does not support the implementation refinement we propose.

### 7. Conclusion and Future Work
In this paper, we provide a consensus view of security protocols that aligns with the attacker’s perspective. Specifically, we give ideal semantics to protocol narrations by rigorously examining a principal’s ability or inability to handle potentially ambiguous incoming messages. These semantics guide protocol implementations in two complementary ways:

1. **Prudent Implementation**: Deriving a prudent implementation that performs all necessary equality checks and prevents Type-III attacks.
2. **Refined Implementation**: Using Type-II attacks to further refine a prudent implementation by performing additional inequality checks.

This semi-automated refinement process bridges the gap between protocol design and verification.

#### 7.1. Limitations and Future Directions
There are three major limitations in this study:

1. **Modeling Principal’s Deduction Capabilities**: The accuracy of the semantics depends on how we model the principal’s deduction capabilities. Improper modeling may result in unrealistic semantics.
2. **Constraint Base Determination**: Questions about the existence and determination of a constraint base for a markup term set (Section 3.3) remain unanswered.
3. **Fresh Values Treatment**: Fresh values (e.g., nonces and timestamps) are treated as invariant data, which is unrealistic in practice, especially in multi-session protocols.

Future work will address these limitations by investigating the problem of finding and solving constraint bases under more general equational theories and introducing new events/nodes in extended strands to better handle fresh values.

### 8. References
[1] M. Abadi. Security protocols and their properties. In Foundations of Secure Computation, NATO Science Series, pages 39–60. IOS Press, 2000.

[2] M. Abadi and V. Cortier. Deciding knowledge in security protocols under equational theories. Theor. Comput. Sci., 367(1):2–32, 2006.

[3] M. Abadi and C. Fournet. Mobile values, new names, and secure communication. In POPL ’01: Proceedings of the 28th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, pages 104–115, New York, NY, USA, 2001. ACM.

[4] M. Abadi and M. R. Tuttle. A semantics for a logic of authentication (extended abstract). In Proceedings of the tenth annual ACM symposium on Principles of distributed computing, PODC ’91, pages 201–216, New York, NY, USA, 1991. ACM.

[5] A. Armando, D. A. Basin, M. Bouallagui, Y. Chevalier, L. Compagna, S. M¨odersheim, M. Rusinowitch, M. Turuani, L. Vigan`o, and L. Vigneron. The aviss security protocol analysis tool. In CAV ’02: Proceedings of the 14th International Conference on Computer Aided Verification, pages 349–353, London, UK, 2002. Springer-Verlag.

[6] N. Asokan, V. Shoup, and M. Waidner. Asynchronous protocols for optimistic fair exchange. In Security and Privacy, 1998. Proceedings. 1998 IEEE Symposium on, pages 86 –99, May 1998.

[7] B. Blanchet. Automatic verification of correspondences for security protocols. J. Comput. Secur., 17(4):363–434, 2009.

[8] C. Bodei, M. Buchholtz, P. Degano, F. Nielson, and H. R. Nielson. Static validation of security protocols. J. Comput. Secur., 13(3):347–390, 2005.

[9] S. Briais and U. Nestmann. A formal semantics for protocol narrations. Theor. Comput. Sci., 389(3):484–511, 2007.

[10] C. Caleiro, L. Vigan`o, and D. Basin. On the semantics of alice&bob specifications of security protocols. Theor. Comput. Sci., 367(1):88–122, 2006.

[11] U. Carlsen. Generating formal cryptographic protocol specifications. In Proceedings of the 1994 IEEE Symposium on Security and Privacy, SP ’94, pages 137–146, Washington, DC, USA, 1994. IEEE Computer Society.

[12] P. Ceelen, S. Mauw, and S. Radomirović. Chosen-name attacks: An overlooked class of type-flaw attacks. Electron. Notes Theor. Comput. Sci., 197:31–43, February 2008.

[13] Y. Chevalier and M. Rusinowitch. Compiling and securing cryptographic protocols. Inf. Process. Lett., 110(3):116–122, 2010.

[14] J. Clark and J. Jacob. A survey of authentication protocol literature: Version 1.0, 1997.

[15] R. Corin and S. Etalle. An improved constraint-based system for the verification of security protocols. In Proceedings of the 9th International Symposium on Static Analysis, pages 326–341, London, UK, 2002. Springer-Verlag.

[16] C. J. Cremers. Unbounded verification, falsification, and characterization of security protocols by pattern refinement. In CCS ’08: Proceedings of the 15th ACM conference on Computer and communications security, pages 119–128, New York, NY, USA, 2008. ACM.

[17] G. Denker and J. Millen. Capsl intermediate language. In Proceedings of the Workshop on Formal Methods and Security Protocols — FMSP, 1999.

[18] D. Dolev and A. Yao. On the security of public key protocols. Information Theory, IEEE Transactions on, 29(2):198–208, Mar 1983.

[19] A. Durante, R. Focardi, and R. Gorrieri. A compiler for analyzing cryptographic protocols using noninterference. ACM Trans. Softw. Eng. Methodol., 9(4):488–528, 2000.

[20] F. Fabrega, J. Herzog, and J. Guttman. Strand spaces: why is a security protocol correct? In Security and Privacy, 1998. Proceedings. 1998 IEEE Symposium on, pages 160 –171, May 1998.

[21] R. Fagin, J. Y. Halpern, Y. Moses, and M. Y. Vardi. Reasoning About Knowledge, volume 1 of MIT Press Books. The MIT Press, December 2003.

[22] J. D. Guttman and F. J. Thayer. Authentication tests and the structure of bundles. Theor. Comput. Sci.,

[23] Z. Li and W. Wang. Rethinking about type-flaw attacks. In GLOBECOM 2010, pages 1 –5, 2010.

[24] Z. Li and W. Wang. Deciding recognizability under dolev-yao intruder model. In M. Burmester, G. Tsudik, S. Magliveras, and I. Ilic, editors, Information Security, volume 6531 of Lecture Notes in Computer Science, pages 416–429. Springer Berlin / Heidelberg, 2011.

[25] G. Lowe. An attack on the needham-schroeder public-key authentication protocol. Inf. Process. Lett., 56:131–133, November 1995.

[26] G. Lowe. Breaking and fixing the needham-schroeder public-key protocol using fdr. In TACAs ’96, pages 147–166, 1996.

[27] G. Lowe. Some new attacks upon security protocols. In Proceedings of the 9th IEEE workshop on Computer Security Foundations, CSFW ’96, pages 162–, Washington, DC, USA, 1996. IEEE Computer Society.

[28] G. Lowe. Casper: a compiler for the analysis of security protocols. J. Comput. Secur., 6(1-2):53–84, 1998.

[29] J. Millen and V. Shmatikov. Constraint solving for bounded-process cryptographic protocol analysis. In CCS ’01: Proceedings of the 8th ACM conference on Computer and Communications Security, pages 166–175, New York, NY, USA, 2001. ACM.

[30] S. Modersheim. Algebraic properties in alice and bob notation. Availability, Reliability and Security, International Conference on, 0:433–440, 2009.

[31] R. M. Needham and M. D. Schroeder. Using encryption for authentication in large networks of computers. Commun. ACM, 21:993–999, December 1978.

[32] D. Otway and O. Rees. Efficient and timely mutual authentication. SIGOPS Oper. Syst. Rev., 21(1):8–10, 1987.

[33] J. Robinson. Handbook of Automated Reasoning (2 Volume Set). MIT Press, Cambridge, MA, USA, 2001.

[34] D. X. Song, S. Berezin, and A. Perrig. Athena: a novel approach to efficient automatic security protocol analysis. J. Comput. Secur., 9(1-2):47–74, 2001.