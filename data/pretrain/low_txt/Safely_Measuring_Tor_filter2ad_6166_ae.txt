### Summary of Client and Circuit Statistics

**Client IP Addresses:**
- **Unique Client IP Addresses:** The unique client IP addresses were recounted over 10-minute intervals for privacy reasons. Table 9 shows the mean inferred counts over all 10-minute intervals during a 4-day measurement period (576 intervals) along with confidence intervals (accounting for noise and sampling error).
- **Average Unique Clients:** We found that approximately 700,000 unique clients connect to the Tor network during an average 10-minute interval.
- **Comparison with Tor's Estimate:** Compared to Torâ€™s own estimate of about 1.75 million clients per day in May 2016 [4], this suggests that the client population turns over about 2.5 times a day.
- **Inactive Clients:** Surprisingly, about 130,000 clients have inactive circuits during an average 10 minutes.
- **Connections vs. Unique Clients:** We observed fewer connections from clients compared to the number of unique clients. This is because PrivCount only counts connections when they are closed, and any connections that did not close during our 4-day measurement period would not be counted.

**Exit Statistics:**
- **Circuit and Stream Statistics:** Our exit statistics focus on circuit and stream statistics to better understand Tor traffic. Table 10 shows the mean inferred counts over all 10-minute intervals during a 21-day exit measurement period (3024 intervals) along with confidence intervals (accounting for noise and sampling error).
- **Active Circuits:** We inferred that there are approximately 1.4 million active circuits used during an average 10 minutes, corresponding to between 2 and 3 active circuits per active client.
- **Inactive Circuits:** We found about the same number of inactive circuits as active circuits during an average 10 minutes, which is not surprising given the large number of inactive clients and the fact that some Tor circuits are preemptively generated for performance reasons but may never be used.
- **Web Traffic:** A majority of the active circuits carry web traffic, and an overwhelming majority of streams and stream data correspond to web traffic. On average, there are about 25 web streams per web circuit, and exit relays exchange an average of about 50 KiB with the destination for each such stream.
- **Other Traffic:** There are about 2 other streams per other circuit, and an average of about 150 KiB is exchanged with the destination per other stream.

### Histogram Statistics

- **Table 11:** The histogram statistics are shown in Table 11, which includes bin ranges and relative counts as percentages of the number of times the statistic fell within each bin range, along with 95% confidence intervals.
- **Web Streams per Circuit:** A majority of web streams per circuit have fewer than 7 streams. By comparison, HTTP Archive [5] reports that 23% of pages have less than 10 connections per page. One potential reason for the lower stream count may be that Tor Browser blocks JavaScript by default, preventing the loading of many embedded page objects.
- **Data Exchange:** Exit relays read less than 2 KiB and between 2 KiB and 16 KiB from 33% and 37% of web streams, respectively, while they read less than 2 KiB from 56% of other streams. Exit relays write less than 1 KiB to 77% of web streams and 46% of other streams.
- **Bytes Per Stream Ratio:** We measured the "Bytes Per Stream Ratio" using log2(bytes_written/bytes_read). The results indicate that exit relays are mostly reading from web streams, but a bimodal distribution exists for other streams where the exit relay writes more than reads for 12% of streams.
- **Stream Creation Time:** 68% of web streams on the same circuit were created within 1 second of one another, while other streams were more evenly dispersed across the bins we counted.

### Related Work

**Privacy-Preserving Data Aggregation:**
- **Existing Designs:** There are many designs for privacy-preserving data aggregation in networks [6, 9, 15, 25]. The most relevant and foundational work for our system is the PrivEx system of Elahi et al., which is designed specifically to gather statistics on Tor. PrivEx provides the S2 protocol, which we build on to create PrivCount, and the D2 protocol.
- **PrivCount Enhancements:** PrivCount expands on PrivEx-S2 in several ways to make it more flexible and practical. The modifications include multi-phase iterative measurement, an expanded privacy notion, optimal allocation of the privacy budget, and a composable security definition and proof. Our implementation is also more capable and reliable, with 29 new Tor statistics, resilience against node failure and reboots, and simpler configuration and setup.

**Measurement Studies:**
- **Previous Studies:** There have been few published studies measuring Tor network traffic characteristics. The 2008 study by McCoy et al. [23] and the study by Chaabane et al. [8] are notable, but they raised ethical and legal questions due to the collection and analysis of sensitive data.
- **PrivCount's Approach:** Privacy is a primary motivation for our work. PrivCount provides formal guarantees about security and privacy, and the only outputs from the measurement process are aggregated, noisy counts that are safe to share publicly.
- **Exit Policy Impact:** We found that a non-trivial shift in traffic type occurs when switching from the default exit policy to one that allows common file-sharing ports (Section 5).

### Conclusion

- **Key Findings:** We built on recent advancements in privacy-preserving aggregation to develop a Tor measurement system called PrivCount. We detailed the PrivCount protocol and provided formal arguments about its security and privacy properties. Among the measured statistics, we found that on average, 710,000 clients are connected to Tor at any given time, of which 550,000 (77%) are active.
- **Future Work:** Future work should consider taking measurements over longer time periods and with various exit policies to improve inference accuracy. Additional insights could be obtained by extending the set of collected statistics to include onion service statistics. More robust and secure methods for counting the client population over varying time periods without sacrificing privacy could allow for analysis of client churn.
- **Acknowledgments:** We thank the anonymous reviewers for their suggestions and feedback, and Tim Wilson-Brown, Tariq Elahi, David Goulet, and Micah Sherr for their assistance in running share keepers for our deployment. This work has been partially supported by DARPA, NSF, and DHS.

### References

[1] PrivCount source code. https://github.com/privcount/privcount.
[2] TC: A Tor control protocol (Version 1). https://gitweb.torproject.org/torspec.git/tree/control-spec.txt.
[3] Tor directory protocol, version 3. https://gitweb.torproject.org/torspec.git/plain/dir-spec.txt.
[4] Tor Metrics. https://metrics.torproject.org/.
[5] HTTP Archive. http://httparchive.org/, May 2016.
[6] BURKHART, M., STRASSER, M., MANY, D., AND DIMITROPOULOS, X. A. SEPIA: Privacy-preserving aggregation of multi-domain network events and statistics. In USENIX Security Symposium (2010).
[7] CANETTI, R. Universally composable security: A new paradigm for cryptographic protocols. In IEEE Symposium on Foundations of Computer Science (2001).
[8] CHAABANE, A., MANILS, P., AND KAAFAR, M. Digging into anonymous traffic: A deep analysis of the Tor anonymizing network. In IEEE Network and System Security (2010).
[9] CHEN, R., REZNICHENKO, A., FRANCIS, P., AND GEHRKE, J. Towards statistical queries over distributed private user data. In USENIX NSDI (2012).
[10] DINGLEDINE, R., MATHEWSON, N., AND SYVERSON, P. Tor: The second-generation onion router. In USENIX Security (2004).
[11] DWORK, C. Differential privacy. In International Colloquium on Automata, Languages and Programming (2006).
[12] DWORK, C., KENTHAPADI, K., MCSHERRY, F., MIRONOV, I., AND NAOR, M. Our data, ourselves: Privacy via distributed noise generation. In Eurocrypt.