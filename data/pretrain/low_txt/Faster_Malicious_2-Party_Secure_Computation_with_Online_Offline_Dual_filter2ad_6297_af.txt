### Performance in LAN and WAN Settings

In the Local Area Network (LAN) setting, 8 evaluations were performed in parallel, achieving an amortized time of 0.26 milliseconds per evaluation for a bucket size \( B = 2 \). A bucket size of 2 can be achieved by performing a modest number (e.g., \( N = 256 \)) of executions with \( \kappa_b = 20 \), or a very large number of executions with \( \kappa_b = 40 \).

In the Wide Area Network (WAN) setting, we observed a slightly decreased throughput, with an amortized time of 0.72 milliseconds per AES evaluation, providing 40-bit security.

### References

1. **Afshar, A., Mohassel, P., Pinkas, B., & Riva, B.**  
   *Non-interactive secure computation based on cut-and-choose.*  
   In *EUROCRYPT 2014* (May 2014), P. Q. Nguyen and E. Oswald, Eds., vol. 8441 of LNCS, Springer, Heidelberg, pp. 387–404.

2. **Beaver, D.**  
   *Precomputing oblivious transfer.*  
   In *CRYPTO'95* (Aug. 1995), D. Coppersmith, Ed., vol. 963 of LNCS, Springer, Heidelberg, pp. 97–109.

3. **Bellare, M., Hoang, V. T., Keelveedhi, S., & Rogaway, P.**  
   *Efficient garbling from a fixed-key block-cipher.*  
   In *2013 IEEE Symposium on Security and Privacy* (May 2013), IEEE Computer Society Press, pp. 478–492.

4. **Bellare, M., Hoang, V. T., & Rogaway, P.**  
   *Adaptively secure garbling with applications to one-time programs and secure outsourcing.*  
   In *ASIACRYPT 2012* (Dec. 2012), X. Wang and K. Sako, Eds., vol. 7658 of LNCS, Springer, Heidelberg, pp. 134–153.

5. **Bellare, M., Hoang, V. T., & Rogaway, P.**  
   *Foundations of garbled circuits.*  
   In *ACM CCS 12* (Oct. 2012), T. Yu, G. Danezis, and V. D. Gligor, Eds., ACM Press, pp. 784–796.

6. **Canetti, R.**  
   *Universally composable security: A new paradigm for cryptographic protocols.*  
   In *42nd FOCS* (Oct. 2001), IEEE Computer Society Press, pp. 136–145.

7. **Chou, T., & Orlandi, C.**  
   *The simplest protocol for oblivious transfer.*  
   In *Progress in Cryptology - LATINCRYPT 2015* (2015), K. E. Lauter and F. Rodríguez-Henríquez, Eds., vol. 9230 of Lecture Notes in Computer Science, Springer, pp. 40–58.

8. **Damgård, I., Lauritsen, R., & Toft, T.**  
   *An empirical study and some improvements of the MiniMac protocol for secure computation.*  
   Cryptology ePrint Archive, Report 2014/289, 2014.  
   [http://eprint.iacr.org/2014/289](http://eprint.iacr.org/2014/289)

9. **Damgård, I., Pastro, V., Smart, N. P., & Zakarias, S.**  
   *Multiparty computation from somewhat homomorphic encryption.*  
   In *CRYPTO 2012* (Aug. 2012), R. Safavi-Naini and R. Canetti, Eds., vol. 7417 of LNCS, Springer, Heidelberg, pp. 643–662.

10. **Damgård, I., & Zakarias, R. W.**  
    *Fast oblivious AES: a dedicated application of the MiniMac protocol.*  
    Cryptology ePrint Archive, Report 2015/989, 2015.  
    [http://eprint.iacr.org/2015/989](http://eprint.iacr.org/2015/989)

11. **Damgård, I., & Zakarias, S.**  
    *Constant-overhead secure computation of boolean circuits using preprocessing.*  
    In *TCC 2013* (Mar. 2013), A. Sahai, Ed., vol. 7785 of LNCS, Springer, Heidelberg, pp. 621–641.

12. **Frederiksen, T. K., Jakobsen, T. P., & Nielsen, J. B.**  
    *Faster maliciously secure two-party computation using the GPU.*  
    In *SCN 14* (Sept. 2014), M. Abdalla and R. D. Prisco, Eds., vol. 8642 of LNCS, Springer, Heidelberg, pp. 358–379.

13. **Huang, Y., Katz, J., & Evans, D.**  
    *Efficient secure two-party computation using symmetric cut-and-choose.*  
    In *CRYPTO 2013, Part II* (Aug. 2013), R. Canetti and J. A. Garay, Eds., vol. 8043 of LNCS, Springer, Heidelberg, pp. 18–35.

14. **Huang, Y., Katz, J., Kolesnikov, V., Kumaresan, R., & Malozemoff, A. J.**  
    *Amortizing garbled circuits.*  
    In *CRYPTO 2014, Part II* (Aug. 2014), J. A. Garay and R. Gennaro, Eds., vol. 8617 of LNCS, Springer, Heidelberg, pp. 458–475.

15. **Keller, M., Orsini, E., & Scholl, P.**  
    *Actively secure OT extension with optimal overhead.*  
    In *CRYPTO 2015, Part I* (Aug. 2015), R. Gennaro and M. J. B. Robshaw, Eds., vol. 9215 of LNCS, Springer, Heidelberg, pp. 724–741.

16. **Kolesnikov, V., Mohassel, P., Riva, B., & Rosulek, M.**  
    *Richer efficiency/security trade-offs in 2PC.*  
    In *TCC 2015, Part I* (Mar. 2015), Y. Dodis and J. B. Nielsen, Eds., vol. 9014 of LNCS, Springer, Heidelberg, pp. 229–259.

17. **Kolesnikov, V., & Schneider, T.**  
    *Improved garbled circuit: Free XOR gates and applications.*  
    In *ICALP 2008, Part II* (July 2008), L. Aceto, I. Damgård, L. A. Goldberg, M. M. Halldórsson, A. Ingólfsdóttir, and I. Walukiewicz, Eds., vol. 5126 of LNCS, Springer, Heidelberg, pp. 486–498.

18. **Kreuter, B., Shelat, A., & Shen, C.**  
    *Billion-gate secure computation with malicious adversaries.*  
    In *Proceedings of the 21st USENIX Security Symposium* (2012), T. Kohno, Ed., USENIX Association, pp. 285–300.

19. **Lindell, Y.**  
    *Fast cut-and-choose based protocols for malicious and covert adversaries.*  
    In *CRYPTO 2013, Part II* (Aug. 2013), R. Canetti and J. A. Garay, Eds., vol. 8043 of LNCS, Springer, Heidelberg, pp. 1–17.

20. **Lindell, Y., & Pinkas, B.**  
    *An efficient protocol for secure two-party computation in the presence of malicious adversaries.*  
    In *EUROCRYPT 2007* (May 2007), M. Naor, Ed., vol. 4515 of LNCS, Springer, Heidelberg, pp. 52–78.

21. **Lindell, Y., & Pinkas, B.**  
    *Secure two-party computation via cut-and-choose oblivious transfer.*  
    In *TCC 2011* (Mar. 2011), Y. Ishai, Ed., vol. 6597 of LNCS, Springer, Heidelberg, pp. 329–346.

22. **Lindell, Y., & Riva, B.**  
    *Cut-and-choose Yao-based secure computation in the online/offline and batch settings.*  
    In *CRYPTO 2014, Part II* (Aug. 2014), J. A. Garay and R. Gennaro, Eds., vol. 8617 of LNCS, Springer, Heidelberg, pp. 476–494.

23. **Lindell, Y., & Riva, B.**  
    *Blazing fast 2PC in the offline/online setting with security for malicious adversaries.*  
    In *Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security* (2015), I. Ray, N. Li, and C. Kruegel, Eds., ACM, pp. 579–590.

24. **Malkhi, D., Nisan, N., Pinkas, B., & Sella, Y.**  
    *Fairplay - secure two-party computation system.*  
    In *Proceedings of the 13th USENIX Security Symposium* (2004), M. Blaze, Ed., USENIX, pp. 287–302.

25. **Mohassel, P., & Franklin, M.**  
    *Efficiency trade-offs for malicious two-party computation.*  
    In *PKC 2006* (Apr. 2006), M. Yung, Y. Dodis, A. Kiayias, and T. Malkin, Eds., vol. 3958 of LNCS, Springer, Heidelberg, pp. 458–473.

26. **Mohassel, P., & Riva, B.**  
    *Garbled circuits checking garbled circuits: More efficient and secure two-party computation.*  
    In *CRYPTO 2013, Part II* (Aug. 2013), R. Canetti and J. A. Garay, Eds., vol. 8043 of LNCS, Springer, Heidelberg, pp. 36–53.

27. **Nielsen, J. B., Nordholt, P. S., Orlandi, C., & Burra, S. S.**  
    *A new approach to practical active-secure two-party computation.*  
    In *CRYPTO 2012* (Aug. 2012), R. Safavi-Naini and R. Canetti, Eds., vol. 7417 of LNCS, Springer, Heidelberg, pp. 681–700.

28. **Peikert, C., Vaikuntanathan, V., & Waters, B.**  
    *A framework for efficient and composable oblivious transfer.*  
    In *CRYPTO 2008* (Aug. 2008), D. Wagner, Ed., vol. 5157 of LNCS, Springer, Heidelberg, pp. 554–571.

29. **Pinkas, B., Schneider, T., Smart, N. P., & Williams, S. C.**  
    *Secure two-party computation is practical.*  
    In *ASIACRYPT 2009* (Dec. 2009), M. Matsui, Ed., vol. 5912 of LNCS, Springer, Heidelberg, pp. 250–267.

30. **Pinkas, B., Schneider, T., & Zohner, M.**  
    *Faster private set intersection based on OT extension.*  
    In *Proceedings of the 23rd USENIX Security Symposium* (2014), K. Fu and J. Jung, Eds., USENIX Association, pp. 797–812.

31. **Shelat, A., & Shen, C.-H.**  
    *Two-output secure computation with malicious adversaries.*  
    In *EUROCRYPT 2011* (May 2011), K. G. Paterson, Ed., vol. 6632 of LNCS, Springer, Heidelberg, pp. 386–405.

32. **Shelat, A., & Shen, C.-H.**  
    *Fast two-party secure computation with minimal assumptions.*  
    In *ACM CCS 13* (Nov. 2013), A.-R. Sadeghi, V. D. Gligor, and M. Yung, Eds., ACM Press, pp. 523–534.

33. **Smart, N.**  
    *Personal communication, November 2015.*

34. **Yao, A. C.-C.**  
    *Protocols for secure computations (extended abstract).*  
    In *23rd FOCS* (Nov. 1982), IEEE Computer Society Press, pp. 160–164.

35. **Zahur, S., Rosulek, M., & Evans, D.**  
    *Two halves make a whole - reducing data transfer in garbled circuits using half gates.*  
    In *EUROCRYPT 2015, Part II* (Apr. 2015), E. Oswald and M. Fischlin, Eds., vol. 9057 of LNCS, Springer, Heidelberg, pp. 220–250.

### A. Adaptively Secure Garbling Schemes

A garbling scheme consists of a tuple of algorithms \((Gb, En, Ev, De)\) with the following syntax and semantics. All algorithms accept a security parameter as implicit input.

- **Gb(f, d) → (F, e)**: Here, \( f \) is a Boolean circuit with \( m \) inputs and \( n \) outputs; \( d \) is an \( n \times 2 \) array of (output) wire labels; \( F \) is a garbled circuit; and \( e \) is an \( m \times 2 \) array of input wire labels.
  - By wire labels, we mean strings (i.e., elements of \(\{0,1\}^{\kappa_c}\)). We deviate from [5] in requiring the output wire labels \( d \) to be chosen by the caller of \( Gb \), rather than chosen by \( Gb \) itself. In the notation of [5], we assume that the scheme is projective in both its input and output encodings, meaning that \( e \) and \( d \) consist of two possible wire labels for each wire.

- **En(e, x) → X**: Takes an \( m \times 2 \) array of wire labels \( e \) and a plaintext input \( x \in \{0,1\}^m \) and outputs a garbled encoding \( X \) of \( x \). By assuming that the scheme is projective, we assume that \( X = (X_1, \ldots, X_m) \) where \( X_i = e[i, x_i] \).

- **Ev(F, X) → Y**: Takes a garbled circuit \( F \) and a garbled encoding \( X \) of an input, and returns a garbled encoding of the output \( Y \).

- **De(Y) → y**: We assume a way to decode a garbled output to a plaintext value. It is a deviation from [5] to allow this to be done without the decoding information \( d \). Rather, we may assume that the garbled outputs contain the plaintext value, say, as the last bit of each wire label.

Our correctness condition is that for the variables defined above, we have \( Ev(F, En(e, x)) = En(d, f(x)) \) and \( De(Ev(F, En(e, x))) = f(x) \) for all inputs \( x \) to the circuit \( f \). In other words, evaluating the garbled circuit should result in the garbled output that encodes \( f(x) \) under the encoding \( d \).

In our construction, an adversary sees the garbled circuit \( F \) first, then it receives some of the garbled inputs (corresponding to the \( k \)-probe matrix encoded inputs). Finally, in the online phase, it is allowed to choose the rest of its input to the circuit and receive the rest of the garbled inputs. Hence, our security game considers an adversary that can obtain the information in this order.

We overload the syntax of the encoding algorithm \( En \). Since \( En \) is projective, we write \( En(e, i, b) \) to denote the component \( e_{i,b} \)—that is, the garbled input for the \( i \)-th wire corresponding to truth value \( b \). Recall that we also garble a circuit with output wire labels \( d \) specified (rather than chosen by the \( Gb \) algorithm). Our security definition lets the adversary choose \( d \).

#### Definition 6
For a garbling scheme \((Gb, En, Ev, De)\), an interactive oracle program \( Adv \), and algorithms \( S = (S_0, S_1, S_2) \), we define the following two games/interactions:

- **G_real**:
  - Get \( f \) and \( d \) from \( Adv \)
  - \((F, e) \leftarrow Gb(f, d)\)
  - Give \( F \) to \( Adv \)
  - For \( i = 1 \) to \( m \):
    - Get \( x_i \) from \( Adv \)
    - \( X_i \leftarrow En(e, i, x_i) \)
    - Give \( X_i \) to \( Adv \)
  - \( Adv \) outputs a bit

- **G_ideal**:
  - Get \( f \) and \( d \) from \( Adv \)
  - \( F \leftarrow S_1(f) \)
  - Give \( F \) to \( Adv \)
  - For \( i = 1 \) to \( m-1 \):
    - Get \( x_i \) from \( Adv \)
    - \( X_i \leftarrow S_2(i) \)
    - Give \( X_i \) to \( Adv \)
  - Get \( x_m \) from \( Adv \)
  - \( y = f(x_1 \cdots x_m) \)
  - \( Y \leftarrow En(d, y) \)
  - \( X_m \leftarrow S_2(m, y, Y) \)
  - Give \( X_m \) to \( Adv \)
  - \( Adv \) outputs a bit

In \( G_ideal \), \( H \) is a random oracle. In \( G_ideal \), the tuple \( S = (S_0, S_1, S_2) \) shares state. All algorithms receive the security parameter as implicit input.

The garbling scheme is adaptively secure if there exists a simulator \( S \) such that for all polynomial-time adversaries \( Adv \), we have that:

\[ \left| \Pr[G_{Adv}^{real} \text{ outputs } 1] - \Pr[G_{Adv, S}^{ideal} \text{ outputs } 1] \right| \]

is negligible in the security parameter.

Note that in the \( G_ideal \) game, the simulator receives no information about the input \( x \) as it produces the garbled circuit \( F \) and all but one of the garbled input components. Finally, when producing the last garbled input component, the simulator learns \( f(x) \) and its garbled output encoding \( En(d, f(x)) \). In particular, the simulator receives no information about \( x \), so its outputs carry no information about \( x \) beyond \( f(x) \). The game also implies an authenticity property for garbled outputs of values other than \( f(x) \)—the simulator’s total output contains no information about the rest of the garbled outputs \( d \).

### Figure 9: Generic, Random-Oracle Transformation

In Figure 9, we describe a generic, random-oracle transformation from a standard (static-secure) garbling scheme to one with this flavor of adaptive security. The construction is quite similar to the transformations in [4], with some small changes. First, since we know in advance which order the adversary will request its garbled inputs, we include the random oracle nonce \( R \) in the last garbled input value (rather than secret-sharing across all garbled inputs). Second, since we garble a circuit with particular garbled output values in mind, we provide "translation values" that will map the garbled outputs of the static scheme to the desired ones. These translation values also involve the random oracle, so they can be equivocated by the simulator.

#### Theorem 7
If \((Gb, En, Ev, De, \hat{De})\) is a doubly-projective garbling scheme satisfying the (static) prv and aut properties of [5], then the scheme in Figure 9 satisfies the adaptive security notion of Definition 6 in the random oracle model.

The proof is very similar to analogous proofs in [4]. The main idea is that the simulator can choose the "masked" \(\hat{F}\) and \(\delta\) translation values upfront. Then it is only with negligible probability that an adversary will call the random oracle on the secret nonce \( R \), so the relevant parts of the oracle are still free to be programmed.