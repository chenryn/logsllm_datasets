These attacks are arguably the most dangerous speculation-based attacks, as they can bypass the compiler-inserted fences. Previous defense mechanisms either excluded these attacks from their threat models or implemented stringent limits on speculation, which significantly degraded performance. In contrast, SPECCFI offers comprehensive protection against these hazardous attacks with minimal impact on performance and low hardware complexity.

SPECCFI leverages Control-Flow Integrity (CFI), a technique previously explored for protecting against control-flow hijacking in committed instructions (even on non-speculative processors), as a defense against speculative execution attacks. Specifically, SPECCFI verifies the forward-edge CFI on the instructions in the speculative path, allowing speculation only if the CFI labels match, thereby defending against Spectre-BTB attacks. It also verifies the backward-edge using a unified shadow call stack, providing protection against Spectre-RSB attacks. Essentially, SPECCFI moves the CFI check to the decode stage of the pipeline, preventing the speculative execution of instructions unless they conform to the CFI annotations. For typical programs, this results in negligible performance degradation, as it only prevents speculation with mismatching CFI labels, which would likely result in misspeculation. By halting misspeculation, SPECCFI avoids cache pollution and other resource waste that typically occurs during misspeculation.

When combined with recent proposals to mitigate Spectre-PHT, SPECCFI is believed to effectively mitigate the threat from known speculative execution attacks. Moreover, it achieves this without sacrificing performance due to speculative execution and with minimal modifications to the processor pipeline.

**ACKNOWLEDGEMENTS**

This paper was partially supported by NPRP grant 8-1474-2-626 from the Qatar National Research Fund (a member of Qatar Foundation). The statements in the paper are solely the responsibility of the authors.

**REFERENCES**

[1] Altera de2-115 development and education board. https://www.altera.com/solutions/partners/partner-profile/terasic-inc-/board/altera-de2-115-development-and-education-board.html#overview, 2010.

[2] SPEC CPU2017 documentation. https://www.spec.org/cpu2017/Docs, 2017.

[3] Test suite extensions. https://llvm.org/docs/Proposals/TestSuite.html, 2019.

[4] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. Control-Flow Integrity. In ACM Conference on Computer and Communications Security (CCS), 2005.

[5] Advanced Micro Devices, Inc. Speculative Store Bypass Disable. https://developer.amd.com/wp-content/resources/124441_AMD64_SpeculativeStoreBypassDisable_Whitepaper_final.pdf, 2018.

[6] Advanced Micro Devices, Inc. Software Techniques for Managing Speculation on AMD Processors. https://developer.amd.com/wp-content/resources/90343-B_SoftwareTechniquesforManagingSpeculation_WP_7-18Update_FNL.pdf, 2018.

[7] Alejandro Cabrera Aldaya, Billy Bob Brumley, Sohaib ul Hassan, Cesar Pereida García, and Nicola Tuveri. Port Contention for Fun and Profit. Technical report, 2018. Available from https://eprint.iacr.org/2018/1060.pdf.

[8] Osman Aleksander. The ao486 project. https://github.com/alfikpl/ao486, 2014.

[9] ARM. Cache speculative side-channels. https://bugs.chromium.org/p/project-zero/issues/detail?id=1528, 2018.

[10] ARM. Vulnerability of speculative processors to cache timing side-channel mechanism. https://developer.arm.com/support/security-update, 2018.

[11] ARM Limited. Arm® A64 Instruction Set Architecture (00bet9), 2018.

[12] Fabrice Bellard. QEMU, a fast and portable dynamic translator. In USENIX Annual Technical Conference, volume 41, page 46, 2005.

[13] Atri Bhattacharyya, Alexandra Sandulescu, Matthias Neugschwandtner, Alessandro Sorniotti, Babak Falsafi, Mathias Payer, and Anil Kurnaz. Smotherspectre: Exploiting speculative execution through port contention. arXiv preprint arXiv:1903.01843, 2019.

[14] Nathan Burow, Scott A. Carr, Stefan Brunthaler, Mathias Payer, Joseph Nash, Per Larsen, and Michael Franz. Control-Flow Integrity: Precision, Security, and Performance. arXiv preprint arXiv:1602.04056, 2016.

[15] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin von Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss. A Systematic Evaluation of Transient Execution Attacks and Defenses. In USENIX Security Symposium, 2019.

[16] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R. Gross. Control-Flow Bending: On the Effectiveness of Control-Flow Integrity. In USENIX Security, 2015.

[17] Nicholas Carlini and David Wagner. ROP is Still Dangerous: Breaking Modern Defenses. In USENIX Security, 2014.

[18] Chandler Carruth. Mitigating speculative execution attacks in crypto. https://github.com/HACS-workshop/spectre-mitigations/blob/master/crypto_guidelines.md, 2018.

[19] Chandler Carruth. RFC: Speculative Load Hardening (A Spectre Variant 1 Mitigation). https://lists.llvm.org/pipermail/llvm-dev/2018-March/122085.html, 2018.

[20] Nick Christoulakis, George Christou, Elias Athanasopoulos, and Sotiris Ioannidis. HCFI: Hardware-Enforced Control-Flow Integrity. In ACM Conference on Data and Application Security and Privacy (CODASPY), 2016.

[21] Lucas Davi, Matthias Hanreich, Debayan Paul, Ahmad-Reza Sadeghi, Patrick Koeberl, Dean Sullivan, Orlando Arias, and Yier Jin. HA-FIX: Hardware-Assisted Flow Integrity Extension. In Design Automation Conference (DAC), 2015.

[22] Lucas Davi, Patrick Koeberl, and Ahmad-Reza Sadeghi. Hardware-Assisted Fine-Grained Control-Flow Integrity: Towards Efficient Protection of Embedded Systems Against Software Exploitation. In Design Automation Conference (DAC), 2014.

[23] Matthew Dillon. Clarifying the Spectre Mitigations. http://lists.dragonflybsd.org/pipermail/users/2018-January/335637.html, 2018.

[24] Ren Ding, Chenxiong Qian, Chengyu Song, Bill Harris, Taesoo Kim, and Wenke Lee. Efficient Protection of Path-Sensitive Control Security. In USENIX Security, 2017.

[25] Leonid Domnitser, Aamer Jaleel, Jason Loew, Nael Abu-Ghazaleh, and Dmitry Ponomarev. Non-Monopolizable Caches: Low-Complexity Mitigation of Cache Side-Channel Attacks. In ACM Transactions on Architecture and Code Optimization (TACO), 2012.

[26] Isaac Evans, Fan Long, Ulziibayar Otgonbaatar, Howard Shrobe, Martin Rinard, Hamed Okhravi, and Stelios Sidiroglou-Douskos. Control Jujutsu: On the Weaknesses of Fine-Grained Control-Flow Integrity. In ACM Conference on Computer and Communications Security (CCS), 2015.

[27] D. Evtyushkin, R. Riley, N. Abu-Ghazaleh, and D. Ponomarev. BranchScope: A New Side-Channel Attack on Directional Branch Predictor. In ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2018.

[28] Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh. Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR. In Proc. IEEE/ACM International Symposium on Microarchitecture (Micro), 2016.

[29] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and Georgios Portokalidis. Out of Control: Overcoming Control-Flow Integrity. In IEEE Symposium on Security and Privacy (Oakland), 2014.

[30] J. Horn. Speculative Execution, Variant 4: Speculative Store Bypass. https://bugs.chromium.org/p/project-zero/issues/detail?id=1528, 2018.

[31] Hong Hu, Chenxiong Qian, Carter Yagemann, Simon Pak Ho Chung, William R. Harris, Taesoo Kim, and Wenke Lee. Enforcing Unique Code Target Property for Control-Flow Integrity. In ACM Conference on Computer and Communications Security (CCS), 2018.

[32] Casen Hunger, Mikhail Kazdagli, Ankit Rawat, Alex Dimakis, Sriram Vishwanath, and Mohit Tiwari. Understanding Contention-Based Channels and Using Them for Defense. In IEEE Symposium on High Performance Computer Architecture (HPCA), 2015.

[33] Open Source Security Inc. Respectre: The State of the Art in Spectre Defenses. https://www.grsecurity.net/respectre_announce.php, 2018.

[34] Intel. Intel Analysis of Speculative Execution Side Channels. https://newsroom.intel.com/wp-content/uploads/sites/11/2018/01/Intel-Analysis-of-Speculative-Execution-Side-Channels.pdf, 2018.

[35] Intel. Retpoline: A Branch Target Injection Mitigation. https://software.intel.com/security-software-guidance/api-app/sites/default/files/Retpoline-A-Branch-Target-Injection-Mitigation.pdf, 2018.

[36] Intel. Speculative Execution Side Channel Mitigations. https://software.intel.com/security-software-guidance/api-app/sites/default/files/336996-Speculative-Execution-Side-Channel-Mitigations.pdf, 2018.

[37] Intel Corporation. Intel 64 and IA-32 Architectures Optimization Reference Manual. https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf, 2016.

[38] Intel Corporation. Control-Flow Enforcement Technology Preview. https://software.intel.com/sites/default/files/managed/4d/2a/control-flow-enforcement-technology-preview.pdf, 2017.

[39] Mehmet Kayaalp, Meltem Ozsoy, Nael Abu-Ghazaleh, and Dmitry Ponomarev. Branch Regulation: Low-Overhead Protection from Code Reuse Attacks. In International Symposium on Computer Architecture (ISCA), 2012.

[40] Khaled N. Khasawneh, Esmaeil Mohammadian Koruyeh, Chengyu Song, Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh. SafeSpec: Banishing the Spectre of a Meltdown with Leakage-Free Speculation. In Design Automation Conference (DAC), 2019.

[41] V. Kiriansky, I. Lebedev, S. Amarasinghe, S. Devadas, and J. Emer. DAWG: A Defense Against Cache Timing Attacks in Speculative Execution Processors. 2018.

[42] V. Kiriansky and C. Waldspurger. Speculative Buffer Overflows: Attacks and Defenses. arXiv preprint arXiv:1807.03757, 2018.

[43] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom. Spectre Attacks: Exploiting Speculative Execution. In IEEE Symposium on Security and Privacy (Oakland), 2019.

[44] Paul Kocher. Spectre Mitigations in Microsoft’s C/C++ Compiler. https://blogs.msdn.microsoft.com/vcblog/2018/01/15/spectre-mitigations-in-msvc/, 2018.

[45] E. Koruyeh, K. Khasawneh, C. Song, and N. Abu-Ghazaleh. Spectre Returns! Speculation Attacks Using the Return Stack Buffer. In USENIX Workshop on Offensive Technologies (WOOT), 2018.

[46] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh, J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg. Meltdown: Reading Kernel Memory from User Space. In USENIX Security Symposium (Security), 2018.

[47] G. Maisuradze and C. Rossow. ret2spec: Speculative Execution Using Return Stack Buffers. In ACM Conference on Computer and Communications Security (CCS), 2018.

[48] Stephen McCamant and Greg Morrisett. Evaluating SFI for a CISC Architecture. In USENIX Security Symposium, 2006.

[49] Microsoft. Spectre Mitigations in MSVC. https://blogs.msdn.microsoft.com/vcblog/2018/01/15/spectre-mitigations-in-msvc/, 2018.

[50] Marina Minkin, Daniel Moghimi, Moritz Lipp, Michael Schwarz, Jo Van Bulck, Daniel Genkin, Daniel Gruss, Berk Sunar, Frank Piessens, and Yuval Yarom. Fallout: Reading Kernel Writes from User Space. 2019.

[51] Hoda Naghibijouybari, Khaled N. Khasawneh, and Nael Abu-Ghazaleh. Constructing and Characterizing Covert Channels on GPGPUs. In IEEE/ACM International Symposium on Microarchitecture (MICRO), 2017.

[52] Hoda Naghibijouybari, Ajaya Neupane, Zhiyun Qian, and Nael Abu-Ghazaleh. Rendered Insecure: GPU Side-Channel Attacks Are Practical. In ACM SIGSAC Conference on Computer and Communications Security (CCS), 2018.

[53] Ben Niu and Gang Tan. Modular Control-Flow Integrity. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2014.

[54] Ben Niu and Gang Tan. Per-Input Control-Flow Integrity. In ACM Conference on Computer and Communications Security (CCS), 2015.

[55] Oleksii Oleksenko, Bohdan Trach, Tobias Reiher, Mark Silberstein, and Christof Fetzer. You Shall Not Bypass: Employing Data Dependencies to Prevent Bounds Check Bypass. arXiv preprint arXiv:1805.08506, 2018.

[56] A. Patel, F. Afram, and K. Ghose. MARSS-x86: A QEMU-Based Microarchitectural and Systems Simulator for x86 Multicore Processors. In Proc. of QUF, 2011.

[57] PAX Team. Future of PaX. https://pax.grsecurity.net/docs/pax-future.txt, 2002.

[58] PAX Team. RAP: RIP ROP. https://pax.grsecurity.net/docs/PaXTeam-H2HC15-RAP-RIP-ROP.pdf, 2015.

[59] Moinuddin K. Qureshi. CAESAR: Mitigating Conflict-Based Cache Attacks via Encrypted-Address and Remapping. In Proc. IEEE/ACM International Symposium on Microarchitecture (Micro), 2018.

[60] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza Sadeghi, and Thorsten Holz. Counterfeit Object-Oriented Programming: On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In IEEE Symposium on Security and Privacy, pages 745–762. IEEE, 2015.

[61] Michael Schwarz, Claudio Canella, Lukas Giner, and Daniel Gruss. Store-to-Leak Forwarding: Leaking Data on Meltdown-Resistant CPUs. arXiv preprint arXiv:1905.05725, 2019.

[62] Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian Stecklina, Thomas Prescher, and Daniel Gruss. Zombieload: Cross-Privilege-Boundary Data Sampling. arXiv preprint arXiv:1905.05726, 2019.

[63] Michael Schwarz, Robert Schilling, Florian Kargl, Moritz Lipp, Claudio Canella, and Daniel Gruss. CONTEXT: Leakage-Free Transient Execution. arXiv preprint arXiv:1905.09100, 2019.

[64] Michael Schwarz, Martin Schwarzl, Moritz Lipp, and Daniel Gruss. NetSpectre: Read Arbitrary Memory over Network. arXiv preprint arXiv:1807.10535, 2018.

[65] Hovav Shacham. The Geometry of Innocent Flesh on the Bone: Return-into-LIBC Without Function Calls (on the x86). In ACM Conference on Computer and Communications Security (CCS), 2007.

[66] J. Stecklina and T. Prescher. LazyFP: Leaking FPU Register State Using Microarchitectural Side-Channels. arXiv preprint arXiv:1806.07480, 2018.

[67] Mohammadkazem Taram, Ashish Venkat, and Dean Tullsen. Context-Sensitive Fencing: Securing Speculative Execution via Microcode Customization. In ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2019.

[68] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar Erlingsson, Luis Lozano, and Geoff Pike. Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM. In USENIX Security, 2014.

[69] P. Turner. Retpoline: A Software Construct for Preventing Branch-Target-Injection. https://support.google.com/faqs/answer/7625886, 2018.

[70] Jo Van B., M. Minkin, O. Weisse, D. Genkin, B. Kasikci, F. Piessens, M. Silberstein, T. F. Wenisch, Y. Yarom, and R. Strackx. Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution. In USENIX Security Symposium (Security), 2018.

[71] Victor van der Veen, Dennis Andriesse, Enes Göktas, Ben Gras, Lionel Sambuc, Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. Practical Context-Sensitive CFI. In ACM Conference on Computer and Communications Security (CCS), 2015.

[72] Victor van der Veen, Enes Göktas, Moritz Contag, Andre Pawoloski, Xi Chen, Sanjay Rawat, Herbert Bos, Thorsten Holz, Elias Athanasopoulos, and Cristiano Giuffrida. A Tough Call: Mitigating Advanced Code-Reuse Attacks at the Binary Level. In IEEE Symposium on Security and Privacy (Oakland), 2016.

[73] Stephan van Schaik, Alyssa Milburn, Sebastian Österlund, Pietro Frigo, Giorgi Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. RIDL: Rogue In-Flight Data Load. In IEEE Symposium on Security and Privacy (Oakland), May 2019.

[74] Guanhua Wang, Sudipta Chattopadhyay, Ivan Gotovchits, Tulika Mitra, and Abhik Roychoudhury. OO7: Low-Overhead Defense Against Spectre Attacks via Binary Analysis. arXiv preprint arXiv:1807.05843, 2018.

[75] Hua Wang, Yao Guo, and Xiangqun Chen. FPValidator: Validating Type Equivalence of Function Pointers on the Fly. In Annual Computer Security Applications Conference (ACSAC), 2009.

[76] O. Weisse, J. Van, M. Minkin, D. Genkin, B. Kasikci, F. Piessens, M. Silberstein, R. Strackx, T. Wenisch, and Y. Yarom. Foreshadow-NG: Breaking the Virtual Memory Abstraction with Transient Out-of-Order Execution. Technical report, 2018.

[77] M. Yan, J. Choi, D. Skarlatos, A. Morrison, C. Fletcher, and J. Torrellas. InvisiSpec: Making Speculative Execution Invisible in the Cache Hierarchy. In IEEE/ACM International Symposium on Microarchitecture (MICRO), 2018.

[78] Bennet Yee, David Sehr, Gregory Dardyk, J. Bradley Chen, Robert Muth, Tavis Ormandy, Shiki Okasaka, Neha Narula, and Nicholas Fullagar. Native Client: A Sandbox for Portable, Untrusted x86 Native Code. In IEEE Symposium on Security and Privacy, pages 79–93. IEEE, 2009.

[79] Tse-Yu Yeh and Yale N. Patt. Alternative Implementations of Two-Level Adaptive Branch Prediction. In ACM SIGARCH Computer Architecture News, volume 20, pages 124–134, 1992.

[80] M. T. Yourst. PTLSim: A Cycle-Accurate Full-System x86-64 Microarchitectural Simulator. In Proc. of ISPASS, 2007.

[81] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen McCamant, Dong Song, and Wei Zou. Practical Control-Flow Integrity and Randomization for Binary Executables. In IEEE Symposium on Security and Privacy (Oakland), 2013.

[82] Mingwei Zhang and R. Sekar. Control-Flow Integrity for COTS Binaries. In USENIX Security, 2013.