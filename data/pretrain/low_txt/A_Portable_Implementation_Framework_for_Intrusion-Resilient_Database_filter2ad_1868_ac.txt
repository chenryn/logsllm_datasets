### Adding Intrusion Resilience to Existing DBMSs

This paper presents a framework that enhances the intrusion resilience of existing Database Management Systems (DBMSs) without requiring any modifications to their internal structures. The framework has been successfully ported to three different DBMSs: Oracle, Sybase, and PostgreSQL. Additionally, we demonstrate that the performance overhead introduced by this portable approach is quite reasonable, ranging from 6% to 13% in a typical online transaction processing environment. This framework is one of the first, if not the first, portable and efficient implementations of intrusion resilience for DBMSs.

#### Performance Evaluation

Figure 4 illustrates the overhead of inter-transaction dependency tracking under different workloads. The left column shows the results for read-intensive transactions, while the right column shows the results for read/write-intensive transactions. The upper row corresponds to a large footprint case (W = 10 and low database cache hit ratio), and the lower row corresponds to a small footprint case (W = 1 and high database cache hit ratio).

- **Read-Intensive Transactions (W = 10)**
  - Local Connection
  - Network Connection
  - Oracle
  - Sybase
  - PostgreSQL

- **Read/Write-Intensive Transactions (W = 10)**
  - Local Connection
  - Network Connection
  - Oracle
  - Sybase
  - PostgreSQL

- **Read-Intensive Transactions (W = 1)**
  - Local Connection
  - Network Connection
  - Oracle
  - Sybase
  - PostgreSQL

- **Read/Write-Intensive Transactions (W = 1)**
  - Local Connection
  - Network Connection
  - Oracle
  - Sybase
  - PostgreSQL

#### Future Work

We are currently pursuing several directions to further enhance the framework:

1. **Interactive Database Damage Repair Tool**: We plan to develop a full-scale interactive tool that allows a Database Administrator (DBA) to interact with the transaction dependency graph through a graphical user interface (GUI). This tool will enable "what-if" analysis, making the damage repair process more flexible, accurate, and convenient.

2. **Transaction Dependency Tracking Appliance**: We aim to build an appliance that can be placed in front of a DBMS server to intercept and rewrite SQL queries without additional configuration. This appliance will minimize disruption to the existing IT infrastructure, providing a smoother migration path.

3. **Optimization of Query Rewriting Algorithms**: The current algorithms can be optimized to reduce tracking overhead. For example, placing the `tr_id` attribute in the middle of each row instead of at the ends can minimize additional logging penalties. Further, maintaining a `tr_id` attribute per attribute rather than per row can help minimize false sharing and support the suppression of false dependencies.

4. **Intrusion Detection Integration**: The current prototype does not support intrusion detection. We plan to develop a DBMS-specific intrusion detection tool and integrate it with the proposed intrusion resilience mechanism to form a comprehensive end-to-end database security solution.

#### Acknowledgements

This research is supported by NSF awards ACI-0083497, CCF-0342556, ACI-0234281, SCI-0401777, USENIX student research grants, and funding from Reuters Information Technology Inc., Computer Associates Inc., National Institute of Standards and Technologies, Siemens, and Rether Networks Inc.

#### References

1. Dhruv Pilania, Tzi-cker Chiueh, “Design, Implementation, and Evaluation of an Intrusion-Resilient Database System”, Technical Report TR-123, ECSL, Department of Computer Science, SUNY at Stony Brook.
2. Ningning Zhu, Tzi-cker Chiueh, “Design, Implementation, and Evaluation of Repairable File Service”, in Proc. of DSN 2003, June 2003.
3. Jay Wylie, Michael Bigrigg, John Strunk, Gregory Ganger, Han Kiliccote, Pradeep Khosla, “Survivable Information Storage Systems”, IEEE Computer, 2(1), August 2000, pp. 61–68.
4. J. Strunk, G. Goodson, M. Scheinholtz, Craig Soules, Gregory Ganger, “Self-Securing Storage: Protecting Data in Compromised Systems”, in Proc. of OSDI 2000, October 2000.
5. Tripwire Open Source Project, http://www.tripwire.org.
6. P. Ammann, S. Jajodia, P. Liu, “Recovery from Malicious Transactions”, IEEE Transactions on Knowledge and Data Engineering, Vol. 15, No. 5, 2002, pp. 1167–1185.
7. P. Liu, “Architectures for Intrusion Tolerant Database Systems”, in Proc. of 18th Annual Computer Security Applications Conference, December 2002, pp. 311-320.
8. P. Liu, “ITDB: An Attack Self-Healing Database System Prototype”, in Proc. of DISCEX 2003, Volume 2, April 2003, pp. 131–133.
9. M. Kifer, P. Lewis, A. Bernstein, Database and Transaction Processing: An Application Oriented Approach, Addison-Wesley, 2002.
10. P. A. Bernstein, V. Hadzilacos, and N. Goodman, Concurrency Control and Recovery in Database Systems, Addison-Wesley, 1987.
11. Tzi-cker Chiueh, Ningning Zhu, and Dhruv Pilania, “How to Repair a Compromised Information System Quickly”, Technical Report TR-135, ECSL, Department of Computer Science, SUNY at Stony Brook, January 2003.
12. TPC-C benchmark, http://www.tpc.org/tpcc/default.asp.
13. GraphViz — an open source graph drawing software, http://www.research.att.com/sw/tools/graphviz/.
14. Oracle9i LogMiner, http://otn.oracle.com/products/oracle9i/daily/oct25.html.
15. PostgreSQL, http://www.postgresql.org.
16. Sybase Adaptive Server Enterprise, http://www.sybase.com/products/databaseservers/ase.