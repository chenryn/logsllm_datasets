### Bridges and IP Address Flexibility

Bridges can easily change their IP addresses and ports without needing to redistribute contact information to clients or the BridgeDB. With SkypeMorph, a client only needs to know the bridge's Skype ID to establish a connection. This makes it significantly more challenging for censors to block bridges, even if they are discovered.

### Skype Protocol and Data Transmission

SkypeKit allows peers to exchange streaming data through the Skype network. However, this data might be relayed by other nodes in the network, which could impose an unwanted overhead on the Skype network. To avoid this, we chose not to use this feature of SkypeKit. In SkypeMorph, data is sent directly from the client to the bridge, disguised as Skype data but not transmitted over the Skype network.

### Attacks on SkypeMorph

To block a SkypeMorph bridge, a censor would need to either completely ban Skype communications or verify the presence of SkypeMorph on a remote Skype node. The latter is only possible if the censor already knows the IP address or Skype ID of the bridge, which we have excluded from our threat model. Additionally, while we do not aim to prevent threats that may arise if the content of a SkypeMorph handshake is disclosed by Skype, steganographic methods can still be used to hide the handshake within innocuous-looking messages.

The censoring authority can also run its own SkypeMorph bridges and distribute their descriptors to users. Although this is possible, users' privacy is not compromised because they still select their own relays and connect to the Tor network. Thus, the censor can only detect that a user is connected to its own instance of SkypeMorph.

### Experimental Results

**Figure 6:**
- **(a) Packet Size Distribution**
- **(b) Inter-Packet Delays Distribution**

We show the packet size and inter-packet delay distributions for Skype video, SkypeMorph, and Tor in (a) and (b), respectively.

**Table 1: Download Speed (Goodput), Network Bandwidth Used, and Overhead**

| Method                          | Goodput (KB/s)       | Network Bandwidth Used (KB/s) | Overhead (%) |
|---------------------------------|----------------------|-------------------------------|--------------|
| Normal Tor-over-TCP             | 200 ± 100            | 200 ± 100                     | 12% ± 1%     |
| SkypeMorph (Naïve Shaping)      | 33.9 ± 0.8           | 43.4 ± 0.8                    | 28% ± 2%     |
| SkypeMorph (Traffic Morphing)   | 34 ± 1               | 43.2 ± 0.8                    | 28% ± 3%     |

### SkypeMorph and Other Protocols

Our current implementation of SkypeMorph can imitate arbitrary encrypted protocols over UDP. The target protocol, Skype in our case, can be replaced by any encrypted protocol that uses UDP, provided that the distributions of packet sizes and inter-arrival times are available. The source protocol, Tor, can also be replaced by an arbitrary TCP protocol. If Traffic Morphing is used, the morphing matrix must be recalculated for each pair of source and target protocols based on their distributions. The current formulation of Traffic Morphing does not support higher-order statistics. However, if naïve traffic shaping is used, the system is independent of the source protocol and can mimic higher-order statistics.

### SkypeMorph Software

Our proof-of-concept implementation targets the Linux operating system. We plan to extend this work to support Windows and other platforms. The main obstacle is port redirection, which can be handled with native firewall support or by running Linux-based software on a Tor-aware home router. Additionally, as discussed in Section 4.4, we plan to experiment with using the audio and video encoders provided by Skype to better match Skype's packet size and timing patterns.

### Conclusions

We have presented SkypeMorph, a pluggable transport for Tor that disguises client-to-bridge connections as Skype video traffic. We present two methods to morph Tor streams into traffic with indistinguishable packet sizes and timings to Skype video. The first method uses naïve traffic shaping to emulate the target distribution, independent of the source distribution. The second method takes the source distribution into account, enhancing Wright et al.’s Traffic Morphing to also account for packet timings. Both methods have statistically similar performance, but the naïve traffic shaping method is much easier to implement, unaffected by a changing source distribution, and can match the higher-order patterns in Skype traffic. While our methods are effective at matching the desired distributions, they come at some cost in extra bandwidth used between the client and the bridge—but no more so than if an actual Skype video call were in progress. Our software is freely available and is easily adaptable to other encrypted UDP-based target protocols.

### Acknowledgements

The authors wish to thank George Kadianakis, Paul Syverson, and the anonymous reviewers for their helpful discussions and suggestions on how we can improve our work. We also thank NSERC, ORF, Mprime, and The Tor Project for funding this work.

### References

[1] Boost C++ Libraries. http://www.boost.org/. [Online; accessed April 2012].

[2] Does Skype use encryption? https://support.skype.com/en/faq/FA31/Does-Skype-use-encryption. [Online; accessed April 2012].

[3] Number of Skype users in 2010. http://about.skype.com/press/2011/05/microsoft_to_acquire_skype.html. [Online; accessed April 2012].

[4] Skype Software. http://skype.com. [Online; accessed April 2012].

[5] SkypeKit. http://developer.skype.com/public/skypekit. [Online; accessed April 2012].

[6] Tor BridgeDB. https://gitweb.torproject.org/bridgedb.git/tree. [Online; accessed April 2012].

[7] Ethiopian Government Bans Skype, Google Talk And All Other VoIP Services. http://techcrunch.com/2012/06/14/ethiopian-government-bans-skype-google-talk-and-all-other-voip-services/, 2012. [Online, accessed May 2012].

[8] Skype ban in the UAE could be lifted, as it is “purely a licensing matter.” http://thenextweb.com/me/2012/04/21/skype-ban-in-the-uae-could-be-lifted-as-it-is-purely-a-licensing-matter/, 2012. [Online, accessed May 2012].

[9] J. Appelbaum and N. Mathewson. Pluggable transports for circumvention. https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/180-pluggable-transport.txt. [Online; accessed April 2012].

[10] S. A. Baset and H. G. Schulzrinne. An Analysis of the Skype Peer-to-Peer Internet Telephony Protocol. In INFOCOM 2006. 25th IEEE International Conference on Computer Communications. Proceedings, pages 1–11, 2006.

[11] P. Biondi and F. Desclaux. Silver Needle in the Skype. BlackHat Europe, http://www.blackhat.com/presentations/bh-europe-06/bh-eu-06-biondi/bh-eu-06-biondi-up.pdf, March 2006. [Online; accessed April 2012].

[12] G. Bissias, M. Liberatore, D. Jensen, and B. Levine. Privacy Vulnerabilities in Encrypted HTTP Streams. In Privacy Enhancing Technologies, pages 1–11. 2006.

[13] D. Bonfiglio, M. Mellia, M. Meo, N. Ritacca, and D. Rossi. Tracking Down Skype Traffic. In INFOCOM 2008. 27th IEEE Conference on Computer Communications., pages 261 –265, 2008.

[14] D. Bonfiglio, M. Mellia, M. Meo, D. Rossi, and P. Tofanelli. Revealing Skype Traffic: When Randomness Plays with You. In Proceedings of the 2007 conference on Applications, technologies, architectures, and protocols for computer communications, SIGCOMM ’07, pages 37–48, 2007.

[15] S. Burnett, N. Feamster, and S. Vempala. Chipping away at censorship firewalls with user-generated content. In Proceedings of the 19th USENIX conference on Security, USENIX Security’10, 2010.

[16] R. Chandramouli and N. Memon. Analysis of LSB based image steganography techniques. In Proceedings of International Conference on Image Processing, volume 3, pages 1019 –1022, 2001.

[17] R. Dingledine. Research problems: Ten ways to discover Tor bridges. https://blog.torproject.org/blog/research-problems-ten-ways-discover-tor-bridges. [Online; accessed April 2012].

[18] R. Dingledine. Iran blocks Tor; Tor releases same-day fix. https://blog.torproject.org/blog/iran-blocks-tor-tor-releases-same-day-fix, Sept. 2011. [Online; accessed April 2012].

[19] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The Second-Generation Onion Router. In Proceedings of the 13th conference on USENIX Security Symposium, SSYM’04, pages 303–320, 2004.

[20] M. Dusi, M. Crotti, F. Gringoli, and L. Salgarelli. Tunnel Hunter: Detecting application-layer tunnels with statistical fingerprinting. Computer Networks, 53(1):81 – 97, 2009.

[21] M. Enev, S. Gupta, T. Kohno, and S. N. Patel. Televisions, video privacy, and powerline electromagnetic interference. In Proceedings of the 18th ACM conference on Computer and Communications Security, CCS ’11, pages 537–550, New York, NY, USA, 2011. ACM.

[22] N. Hopper, L. von Ahn, and J. Langford. Provably Secure Steganography. IEEE Transactions on Computers, 58(5):662 –676, 2009.

[23] A. Houmansadr, G. T. Nguyen, M. Caesar, and N. Borisov. Cirripede: Circumvention Infrastructure using Router Redirection with Plausible Deniability. In Proceedings of the 18th ACM conference on Computer and Communications Security, CCS ’11, pages 187–200, 2011.

[24] N. F. Johnson, Z. Duric, and S. Jajodia. Information hiding: Steganography and watermarking—attacks and countermeasures. Kluwer Academic Publishers, 2000.

[25] J. Karlin, D. Ellard, A. W. Jackson, C. E. Jones, G. Lauer, D. P. Mankins, and W. T. Strayer. Decoy Routing: Toward Unblockable Internet Communication. In Proceedings of the USENIX Workshop on Free and Open Communications on the Internet (FOCI 2011), August 2011.

[26] M. Krzywinski. Port knocking: Network authentication across closed ports. SysAdmin Magazine, 12(6):12–17, 2003.

[27] A. Langley. curve25519-donna. http://code.google.com/p/curve25519-donna/. [Online; accessed April 2012].

[28] C. S. Leberknight, M. Chiang, H. V. Poor, and F. Wong. A Taxonomy of Internet Censorship and Anti-Censorship. http://www.princeton.edu/~chiangm/anticensorship.pdf. [Online; accessed April 2012].

[29] M. Liberatore and B. N. Levine. Inferring the source of encrypted HTTP connections. In 13th ACM conference on Computer and Communications security, pages 255–263, 2006.

[30] N. Mathewson. The Tor Project, A simple obfuscating proxy. https://gitweb.torproject.org/obfsproxy.git. [Online; accessed April 2012].

[31] W. Mazurczyk, P. Szaga, and K. Szczypiorski. Using Transcoding for Hidden Communication in IP Telephony. ArXiv e-prints, Nov. 2011.

[32] J. McLachlan and N. Hopper. On the risks of serving whenever you surf: Vulnerabilities in Tor’s blocking resistance design. In Proceedings of the 8th ACM workshop on Privacy in the electronic society, WPES ’09, pages 31–40, 2009.

[33] H. Mohajeri Moghaddam, B. Li, M. Derakhshani, and I. Goldberg. SkypeMorph: Protocol Obfuscation for Tor Bridges. Technical Report CACR 2012-08, University of Waterloo, 2012.

[34] S. J. Murdoch. Moving Tor to a datagram transport. https://blog.torproject.org/blog/moving-tor-datagram-transport. [Online; accessed April 2012].

[35] NIST/SEMATECH. e-Handbook of Statistical Methods. http://www.itl.nist.gov/div898/handbook/index.htm. [Online; accessed April 2012].

[36] F. Petitcolas, R. Anderson, and M. Kuhn. Information Hiding - A Survey. Proceedings of the IEEE, special issue on protection of multimedia content, pages 1062 –1078, 1999.

[37] I. M. Program. Persian cyberspace report: internet blackouts across Iran;. http://iranmediaresearch.com/en/blog/101/12/02/09/840. [Online; accessed April 2012].

[38] T. S. Saponas, J. Lester, C. Hartung, S. Agarwal, and T. Kohno. Devices that tell on you: privacy trends in consumer ubiquitous computing. In Proceedings of 16th USENIX Security Symposium on USENIX Security Symposium, SS’07, pages 5:1–5:16, Berkeley, CA, USA, 2007. USENIX Association.

[39] G. J. Simmons. The Prisoners Problem and the Subliminal Channel. In Advances in Cryptology: CRYPTO 1983, pages 51–67. Springer, 1984.

[40] R. Smits, D. Jain, S. Pidcock, I. Goldberg, and U. Hengartner. BridgeSPA: Improving Tor bridges with Single Packet Authorization. In Proceedings of the 10th annual ACM workshop on Privacy in the Electronic Society, WPES ’11, pages 93–102, 2011.

[41] K. Suh, D. R. Figueiredo, J. Kurose, and D. Towsley. Characterizing and Detecting Skype-Relayed Traffic. In INFOCOM 2006. Proceedings of 25th IEEE International Conference on Computer Communications., 2006.

[42] The Tor Project. Tor Metrics Portal: Users. https://metrics.torproject.org/users.html, 2012. [Online, accessed July 2012].

[43] A. White, A. Matthews, K. Snow, and F. Monrose. Phonotactic Reconstruction of Encrypted VoIP Conversations: Hookt on fon-iks. In IEEE Symposium on Security and Privacy (SP), pages 3 –18, 2011.

[44] T. Wilde. Knock Knock Knockin’ on Bridges’ Doors. https://blog.torproject.org/blog/knock-knock-knockin-bridges-doors, Jan. 2012. [Online; accessed April 2012].

[45] P. Winter and S. Lindskog. How China Is Blocking Tor. Technical report, Karlstad University, 2012.

[46] C. Wright, L. Ballard, S. Coull, F. Monrose, and G. Masson. Spot Me if You Can: Uncovering Spoken Phrases in Encrypted VoIP Conversations. In IEEE Symposium on Security and Privacy (SP), pages 35 –49, 2008.

[47] C. Wright, S. Coull, and F. Monrose. Traffic Morphing: An efficient defense against statistical traffic analysis. In Proceedings of the Network and Distributed Security Symposium - NDSS ’09. IEEE, February 2009.

[48] C. V. Wright, L. Ballard, F. Monrose, and G. M. Masson. Language Identification of Encrypted VoIP Traffic: Alejandra y Roberto or Alice and Bob? In Proceedings of 16th USENIX Security Symposium, 2007.

[49] E. Wustrow, S. Wolchok, I. Goldberg, and J. A. Halderman. Telex: Anticensorship in the Network Infrastructure. In Proceedings of the 20th USENIX Security Symposium, 2011.