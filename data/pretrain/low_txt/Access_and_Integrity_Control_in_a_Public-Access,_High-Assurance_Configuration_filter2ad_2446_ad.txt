### 7.3 Server Compromise
It is, of course, possible for a repository server to be compromised. If the repository's private signing key is stolen, false content can be introduced into the repository or existing content can be destroyed. While OpenCM cannot eliminate this vulnerability, it does provide a means for recovery. Mutual replication between two repositories can ensure that deleted content is recoverable. An audit, although laborious, can determine what has been improperly changed, allowing it to be removed or recovered. Registry updates can then introduce a new signing key while preserving the repository's identity.

### 8. Future Plans
OpenCM is currently operational and has been in use in our lab for several months on a number of software projects. While it meets our needs for file-based development, there are several opportunities for future enhancements. The most pressing need is for a secure scripting language.

#### 8.1 Need for Secure Scripting
Scripting is needed in OpenCM for two primary reasons:
1. **Data Stream Transformations**: Various transformations on data streams can be performed during checkout and commit. It would be useful if these transformations could be implemented in a machine-independent way but outside of the OpenCM Trusted Computing Base (TCB), which is already quite large.
2. **Automatable Policies**: There are automatable consistency, access control, and process enforcement policies that we would like to embed in the tool. However, many of these policies are project-specific. Using a safe scripting language seems like a reasonable approach.

For this application, we are considering the integration of W7, a Scheme-derived security kernel created by Jonathan Rees [Ree96]. We are also considering the integration of a native implementation of the E capability-secure scripting language [MMF00], whose syntax may be more approachable for many users.

#### 8.2 Client for Workspace-Oriented Programming Languages
We are also interested in creating an OpenCM client for workspace-oriented programming languages, as has been done for VisualAge Java and SmallTalk.

### 9. Related Work

#### 9.1 Configuration Management Systems
There is a significant body of prior work on configuration management. As this paper focuses on access control, we will only briefly summarize it here. Interested readers may wish to examine the more detailed treatment in the original OpenCM paper [Sha02] or other surveys on this subject.

- **RCS and SCCS**: Provide file versioning and branching for individual files. Both offer locking mechanisms and limited access control on locks, which can be compromised by modifying the file. Neither provides configuration management or substantive archival access control features. They tie the client name of the object to its content, making them unsuitable for configuration management.
  
- **NUCM**: Uses an information architecture superficially similar to OpenCM [dHHW96]. NUCM "atoms" correspond roughly to OpenCM frozen objects, but atoms cannot reference other objects within the NUCM store. NUCM collections play a similar role to OpenCM mutables, but all NUCM collections are mutable. Attributes associated with atoms or collections can be modified independently, rendering every object in the repository mutable. NUCM does not provide significant support for archival access controls or replication.
  
- **Subversion**: A successor to CVS currently under development by Tigris.org [CS02]. Unlike CVS, Subversion provides first-class support for configurations. Like CVS, Subversion does not directly support replication. Its access control model is based on usernames and may not scale well across multi-organizational projects without centralized administration.
  
- **WebDAV**: The "Web Documents and Versioning" initiative aims to provide integrated document versioning for the web. It supports branching, versioning, and integration of multiple versions of a single file. When the OpenCM project started, WebDAV provided no mechanism for managing configurations, though several proposals were being evaluated. Given the current function of OpenCM, it could serve as an implementation vehicle for WebDAV.
  
- **BitKeeper**: Incorporates a design for repository replication and delta compression. To our knowledge, it does not incorporate adequate (i.e., cryptographic) provenance controls for high-assurance development. It also does not address the trusted path problem introduced by untrusted intermediaries in the software distribution chain.

#### 9.2 Other
- **Object Repositories**: Systems like Objectivity and ObjectStore are suitable as supporting systems for the OpenCM repository design, especially for distributed, single-image repository federations. Neither directly provides an access control mechanism similar to OpenCM.
  
- **Globally Unique Identifiers (GUIDs)**: Microsoft's GUIDs and Lotus Notes object identifiers are generated using strong random number generators. Miller et al.'s capability-secure scripting language E [MMF00] uses strong random numbers for secure object capabilities. The Droplets system [Clo98] by Tyler Close has adapted this idea to cryptographic capabilities encoded in URLs.
  
- **Xanadu Project**: Probably the first system to make a strong distinction between mutable and frozen objects (referred to as "works" and "editions"), leveraging this distinction for replication [SMTH91]. In hindsight, the information architecture of OpenCM draws heavily from Xanadu ideas. The OpenCM access control design is closely derived from the Xanadu Clubs architecture, originally conceived by Mark Miller.
  
- **Cryptographic Names**: OpenCM's use of cryptographic names was most directly influenced by Waterken, Inc.'s Droplets system [Clo98]. Related naming schemes are used in Lotus Notes and the GUID generation scheme of DCE.

### 10. Acknowledgements
The Xanadu Clubs architecture [SMTH91] was originally conceived by Mark Miller and subsequently refined by Jonathan Shapiro. Comments and feedback on this paper were provided by David Chizmadia, Mike Hilsdale, Mark Miller, Chris Riley, and Anshumal Sinha.

Mark Miller's diagnosis of the mutable substitution problem came at a critical and fortuitous moment before we shipped the first release. At a minimum, it saved us the embarrassment of an incompatible version 2 shipping weeks after version 1.

### 11. Conclusions
OpenCM supports the requirements of high-assurance development in an open-source environment. It uses cryptographic naming and authentication to achieve distributed, disconnected, access-controlled configuration management across multiple administrative domains and to provide strong integrity guarantees. OpenCM supports multi-organizational project teams through domain-agnostic cryptographic authentication and disconnected commit. It also provides delegation and strong provenance tracking.

While there are many interdependencies in the design, there are no overly complex algorithms or techniques in the system. The fundamental insight is that successful distribution and configuration management can be built on two primitive concepts—naming and identity—and that cryptographic hashes provide an elegant means to unify these concepts and provide a basis for integrity checks.

The OpenCM schema is not limited to configuration management applications. It is a general-purpose information model that provides wide-area, integrity-checked distribution and a naming system for online archival content. It is relatively neutral with respect to demands on the underlying storage system. The one serious "missing link" in the existing OpenCM architecture as a general-purpose content substrate is the absence of a self-assuring, eventually consistent collection mechanism; we believe we see a means to realize such collections. It is our plan to pursue the use of the underlying architecture for other information spaces.

The core OpenCM system, including command-line client, two local file system repository implementations, and remoting support, consists of 19,134 lines of code. Roughly 20% of this code is serialization support that could be automatically generated. In contrast, the corresponding CVS core is 52,055 lines (both sets of numbers omit the diff/merge, RCS, compression libraries, comments, and blank lines).

Despite its simplicity, OpenCM works reliably, efficiently, and effectively. It also provides greater functionality and performance than its predecessor. One of the significant surprises in this effort has been the degree to which a straightforward, naive implementation has proven to be reasonably efficient.

OpenCM was released at the USENIX 2002 conference. Software is available from the OpenCM website at http://www.opencm.org or the EROS project website at http://www.eros-os.org.

### References
- [Ber90] B. Berliner. CVS II: Parallelizing software development. In Proceedings of the USENIX Winter 1990 Technical Conference, pages 341–352, Berkeley, CA, 1990. USENIX Association.
- [Clo98] Tyler Close. Droplets, 1998.
- [CS02] Ben Collins-Sussman. The subversion project: Building a better cvs. The Linux Journal, February 2002.
- [DA99] T. Dierks and C. Allen. The TLS protocol version 1.0, January 1999. Internet RFC 2246.
- [Dav01] Don Davis. Defective sign & encrypt in S/MIME, PKCS7, MOSS, PEM, PGP, and XML. In Proc. 2001 USENIX Technical Conference, Boston, MA, June 2001. USENIX Association.
- [MT79] Robert Morris and Ken Thompson. Password security: A case history. CACM, 22(11):594–597, 1979.
- [Pol96] J. Polstra. Program source for cvsup, 1996.
- [Ree96] Jonathan A. Rees. A security kernel based on the lambda-calculus. Technical Report AIM-1564, 1996.
- [Sha02] Jonathan S. Shapiro. CPCMS: A configuration management system based on cryptographic names. In Proc. FREENIX Track of the 2002 USENIX Annual Technical Conference. USENIX Association, 2002.
- [dHHW96] A. Van der Hoek, D. Heimbigner, and A. Wolf. A generic peer-to-peer repository for distributed configuration management. In Proc. 18th International Conference on Software Engineering, Berlin, Germany, March 1996.
- [FK89] David C. Feldmeier and Philip R. Karn. UNIX password security - ten years later. In CRYPTO, pages 44–63, 1989.
- [Hal94] Neil M. Haller. The S/KEY one-time password system. In Proceedings of the Symposium on Network and Distributed System Security, pages 151–157, 1994.
- [ISO98] Common Criteria for Information Technology Security. International Standards Organization, 1998. International Standard ISO/IS 15408, Final Committee Draft, version 2.0.
- [MAM95] Daniel L. McDonald, Randall J. Atkinson, and Craig Metz. One time passwords in everything (opie): Experiences with building and using stronger authentication. In Proc. 5th USENIX Security Symposium, Salt Lake City, UT, 1995.
- [MMF00] Mark S. Miller, Chip Morningstar, and Bill Frantz. Capability-based financial instruments. In Proc. Financial Cryptography 2000, Anguila, BWI, 2000. Springer-Verlag.
- [SMTH91] Jonathan S. Shapiro, Mark Miller, Dean Tribble, and Chris Hibbert. The Xanadu Developer’s Guide. Palo Alto, CA, USA, 1991.
- [SSF99] Jonathan S. Shapiro, Jonathan M. Smith, and David J. Farber. EROS: A fast capability system. In Proc. 17th ACM Symposium on Operating Systems Principles, pages 170–185, Kiawah Island Resort, near Charleston, SC, USA, December 1999. ACM.
- [WG] E. James Whitehead, Jr. and Yaron Y. Goland. WebDAV: A network protocol for remote collaborative authoring on the web. In Proc. of the Sixth European Conf. on Computer Supported Cooperative Work (ECSCW’99), Copenhagen, Denmark, September 12-16, 1999, pages 291–310.
- [Wu99] Thomas Wu. A real-world analysis of kerberos password security. In Proc. 1999 Internet Society Network and Distributed System Security Symposium, February 1999.
- [Ylo96] Tatu Ylonen. SSH — secure login connections over the Internet. Pages 37–42, 1996.