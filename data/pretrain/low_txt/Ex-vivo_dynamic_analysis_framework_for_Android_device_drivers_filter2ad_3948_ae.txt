# Fuzzing Statistics

| Type of Bug               | Count (MSM Kernel) | Count (Xiaomi Kernel) |
|---------------------------|--------------------|-----------------------|
| Memory Read               | 1                  | 0                     |
| Memory Write              | 1                  | 4                     |
| Buffer Overflow           | 6                  | 0                     |
| Out-of-bound Index        | 6                  | 1                     |
| Unchecked User Pointer    | 1                  | 1                     |
| NULL Dereference          | 1                  | 1                     |
| ZERO_SIZE_PTR Deref.      | 1                  | 1                     |
| Buffer Overread           | 4                  | 4                     |
| False Positives           | 1                  | 12                    |
| **Total (excluding FP)**  | **17**             | **12**                |

### Table III: Fuzzing Statistics
- **Memory Read/Write Bugs**: Include bugs that allow for either arbitrary read/write or memory read/write below a certain address.

## E. Limitations

Our framework has three main limitations:
1. **Hardware Dependency**: Due to the lack of actual hardware, our framework is currently most suitable for system call analysis, where malicious input comes from userspace applications. It cannot reliably be used to find vulnerabilities that are exploitable by a malicious or compromised peripheral or an attacker who sends malicious input to the device.
2. **Interrupt and Bus Support**: Our current implementation does not support interrupts and only supports platform and I2C buses in the case of ARM32, and the platform bus in the case of ARM64.
3. **False Positives**: Evasion can produce false positives, which is usually not the case with fuzzing.

## VI. Related Work

- **Charm [29]**: Addresses the problem of missing peripherals by redirecting I/O calls to the actual physical device through USB. This approach requires porting the driver to a specific kernel version and having the physical device present. The time required for porting a driver varies between two days and two weeks for experienced developers. Our approach does not require driver porting or access to a physical device and can work with binary-only drivers.
- **Avatar [32]**: Similar to Charm but targets low-level embedded firmware such as hard drive firmware.
- **FIE [9]**: Analyzes self-contained barebone firmware for MSP430 microcontrollers using KLEE, a fully symbolic environment. It returns symbolic values or constants when the firmware accesses hardware through memory-mapped registers. This approach is suitable for small programs but not for Linux kernel drivers, which use a diverse set of kernel APIs and have many more peripherals.
- **Keil and Kolbitsch [12]**: Focus on testing WiFi drivers in QEMU by emulating an IEEE 802.11 device.
- **Periscope [24]**: Instruments DMA buffers inside the kernel to inject fuzzed data into WiFi drivers.
- **Ma [14]**: Develops emulated versions of USB devices and fuzzes drivers against these emulated devices.
- **Mueller [17]**: Uses a QEMU-provided virtual USB device.
- **Schumilo et al. [21]**: Use a USB redirection protocol to provide access to remote USB devices.
- **Patrick-Evans et al. [19]**: Develop an emulation of a generic USB device.

In contrast, our work targets a wider range of device drivers and does not require emulated or physical peripherals.

- **Triforce [11]**: A modified version of AFL that supports fuzzing using QEMU’s full system emulation for x64 architecture.
- **S2E [5]**: Allows for symbolic execution of the full kernel stack and is tightly coupled with the KLEE symbolic executor. Our approach supports ARM, deals with missing hardware, automatically recovers ioctl system call structures, and allows any userspace fuzzer or binary symbolic execution tool to be used.

- **DR. CHECKER [15], Coccinelle [27], and Coverity [1]**: Use static analysis to find bugs in Linux kernel drivers. Static analysis alleviates the need for peripherals but is imprecise and produces many false positives. Our goal is to enable dynamic analysis, providing capabilities such as coverage-guided fuzzing, symbolic execution, and interactive debugging. Dynamic analysis also provides concrete inputs for potential vulnerabilities, which can be mechanically tested on real devices.

- **Firmalice [23]**: Statically analyzes embedded binary firmware images and identifies authentication bypass vulnerabilities.
- **Firmadyne [3]**: Emulates user space applications extracted from embedded devices. Our focus is on dynamic analysis and kernel-level vulnerabilities.

## VII. Conclusion

The main challenge in ex-vivo dynamic analysis of device drivers is their software dependencies on the host kernel and hardware dependencies on the managed device. We observe that for many execution paths in drivers, these dependencies are superficial. For example, such paths may only depend on the ability to read a memory-mapped device register, not on the actual value returned. We hypothesize that evasion, where a specially constructed evasion kernel satisfies these dependencies, can be a solution.

To test this hypothesis, we developed an evasion kernel that can load and initialize platform device drivers and an EASIER tool that can extract and run these drivers as userspace processes. Using evasion, our kernel successfully initializes 48/62 (77%) of foreign platform drivers. EASIER triggers 21/26 (80%) vulnerabilities, showing that detailed porting or emulation is not necessary to find bugs. We fuzzed 32 drivers for a total of 715 hours and found 29 bugs, 12 of which are confirmed new. We conclude that evasion and EASIER make Android ex-vivo driver analysis possible without porting or hardware (real or emulated). These techniques are effective for discovering and analyzing vulnerabilities.

Our approach allows for dynamic analysis of Android drivers with high precision and without requiring physical or emulated devices. The ability to analyze drivers in userspace and without complex debugging interfaces or reflashing the device will help lower the bar for Android kernel driver analysis.

## VIII. Acknowledgements

This research was made possible with generous support from Telus Corporation and an NSERC CRD Grant 535902-18.

## References

[1] A. Bessey, K. Block, B. Chelf, A. Chou, B. Fulton, S. Hallem, C. Henri-Gros, A. Kamsky, S. McPeak, and D. Engler, “A few billion lines of code later: Using static analysis to find bugs in the real world,” Commun. ACM, vol. 53, no. 2, pp. 66–75, Feb. 2010.

[2] C. Cadar, D. Dunbar, and D. Engler, “Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs,” in Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation, ser. OSDI’08. Berkeley, CA, USA: USENIX Association, 2008, pp. 209–224. [Online]. Available: http://dl.acm.org/citation.cfm?id=1855741.1855756

[3] D. D. Chen, M. Woo, D. Brumley, and M. Egele, “Towards automated dynamic analysis for Linux-based embedded firmware,” in 23rd Annual Network and Distributed System Security Symposium, NDSS 2016, San Diego, California, USA, February 21-24, 2016. [Online]. Available: http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2017/09/towards-automated-dynamic-analysis-linux-based-embedded-firmware.pdf

[4] H. Chen, Y. Mao, X. Wang, D. Zhou, N. Zeldovich, and M. Frans Kaashoek, “Linux kernel vulnerabilities: State-of-the-art defenses and open problems,” Proceedings of the 2nd Asia-Pacific Workshop on Systems, APSys’11, 07 2011.

[5] V. Chipounov, V. Kuznetsov, and G. Candea, “S2e: A platform for in-vivo multi-path analysis of software systems,” in Proceedings of the Sixteenth International Conference on Architectural Support for Programming Languages and Operating Systems, ser. ASPLOS XVI. New York, NY, USA: ACM, 2011, pp. 265–278. [Online]. Available: http://doi.acm.org/10.1145/1950365.1950396

[6] A. Chou, J. Yang, B. Chelf, S. Hallem, and D. Engler, “An empirical study of operating systems errors,” in Proceedings of the Eighteenth ACM Symposium on Operating Systems Principles, ser. SOSP ’01. New York, NY, USA: ACM, 2001, pp. 73–88. [Online]. Available: http://doi.acm.org/10.1145/502034.502042

[7] C. Cimpanu. (2019) Android exploits now worth more than iOS exploits for the first time. [Online]. Available: https://www.zdnet.com/article/android-exploits-are-now-worth-more-than-ios-exploits-for-the-first-time

[8] J. Corina, A. Machiry, C. Salls, Y. Shoshitaishvili, S. Hao, C. Kruegel, and G. Vigna, “DIFUZE: Interface aware fuzzing for kernel drivers,” in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, 2017.

[9] D. Davidson, B. Moench, T. Ristenpart, and S. Jha, “FIE: Finding vulnerabilities in embedded systems using symbolic execution,” in 22nd USENIX Security Symposium, Washington, D.C.: USENIX, 2013, pp. 463–478. [Online]. Available: https://www.usenix.org/conference/usenixsecurity13/technical-sessions/paper/davidson

[10] D. Engler and D. Dunbar, “Under-constrained execution: Making automatic code destruction easy and scalable,” 01 2007, pp. 1–4.

[11] J. Hertz and T. Newsham. (2019) TriforceAFL: Qemu fuzzing with full-system emulation. [Online]. Available: https://github.com/nccgroup/TriforceAFL

[12] S. Keil and C. Kolbitsch, “Stateful fuzzing of wireless device drivers in an emulated environment,” 05 2019.

[13] K. Lu, M.-T. Walter, D. Pfaff, S. Nuernberger, W. Lee, and M. Backes, “Unleashing use-before-initialization vulnerabilities in the Linux kernel using targeted stack spraying,” 01 2017.

[14] Z. Ma. (2019) Massive scale USB device driver fuzz without device. [Online]. Available: https://www.slideshare.net/MSbluehat/bluehat-v17-massive-scale-usb-device-driver-fuzz-without-device

[15] A. Machiry, C. Spensky, J. Corina, N. Stephens, C. Kruegel, and G. Vigna, “DR. CHECKER: A soundy analysis for Linux kernel drivers,” in 26th USENIX Security Symposium (USENIX Security 17). Vancouver, BC: USENIX Association, 2017, pp. 1007–1024. [Online]. Available: https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/machiry

[16] Manticore. (2019) Symbolic execution tool. [Online]. Available: https://github.com/trailofbits/manticore

[17] N. Palix, G. Thomas, S. Saha, C. Calvès, J. Lawall, and G. Muller, “Faults in Linux: Ten years later,” in Proceedings of the Sixteenth International Conference on Architectural Support for Programming Languages and Operating Systems, ser. ASPLOS XVI. New York, NY, USA: ACM, 2011, pp. 305–318. [Online]. Available: http://doi.acm.org/10.1145/1950365.1950401

[18] J. Patrick-Evans, L. Cavallaro, and J. Kinder, “POTUS: Probing off-the-shelf USB drivers with fault injection,” in 11th USENIX Workshop on Offensive Technologies (WOOT 17). Vancouver, BC: USENIX Association, 2017. [Online]. Available: https://www.usenix.org/conference/woot17/workshop-program/presentation/patrick-evans

[19] S. Schumilo, C. Aschermann, R. Gawlik, S. Schinzel, and T. Holz, “kAFL: Hardware-assisted feedback fuzzing for OS kernels,” in 26th USENIX Security Symposium (USENIX Security 17). Vancouver, BC: USENIX Association, 2017, pp. 167–182. [Online]. Available: https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/schumilo

[20] S. Schumilo and R. Spenneberg. (2019) Don’t trust your USB! How to find bugs in USB device drivers. [Online]. Available: https://www.blackhat.com/docs/eu-14/materials/eu-14-Schumilo-Dont-Trust-Your-USB-How-To-Find-Bugs-In-USB-Device-Drivers-wp.pdf

[21] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov, “AddressSanitizer: A fast address sanity checker,” in Presented as part of the 2012 USENIX Annual Technical Conference (USENIX ATC 12), 2012, pp. 309–318.

[22] Y. Shoshitaishvili, R. Wang, C. Hauser, C. Kruegel, and G. Vigna, “Firmalice: Automatic detection of authentication bypass vulnerabilities in binary firmware.” Internet Society, 2015. [Online]. Available: http://dblp.uni-trier.de/db/conf/ndss/ndss2015.html#Shoshitaishvili15

[23] D. Song, F. Hetzelt, D. Das, C. Spensky, Y. Na, S. Volckaert, G. Vigna, C. Kruegel, J.-P. Seifert, and M. Franz, “Periscope: An effective probing and fuzzing framework for the hardware-OS boundary,” in 2019 Network and Distributed Systems Security Symposium (NDSS). Internet Society, 2019, pp. 1–15.

[24] C. Spensky, J. Stewart, A. Yerukhimovich, R. Shay, A. Trachtenberg, R. Housley, and R. K. Cunningham, “Sok: Privacy on mobile devices– its complicated,” Proceedings on Privacy Enhancing Technologies, vol. 2016, no. 3, pp. 96–116, 2016.

[25] J. V. Stoep. (2016) Android: protecting the kernel. [Online]. Available: https://events.static.linuxfound.org/sites/events/files/slides/Android-%20protecting%20the%20kernel.pdf

[26] H. Stuart, “Hunting bugs with Coccinelle,” Master’s Thesis, May 2008.

[27] Syzkaller. (2019) Kernel fuzzer. [Online]. Available: https://github.com/google/syzkaller