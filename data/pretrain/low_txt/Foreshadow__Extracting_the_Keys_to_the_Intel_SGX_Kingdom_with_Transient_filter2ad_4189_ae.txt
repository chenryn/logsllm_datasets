### Intel SGX Design and Remote Attestation

Intel Software Guard Extensions (SGX) includes a trusted Quoting Enclave (QE) [2,10] to validate local attestation reports and sign them with an asymmetric private key. The resulting signed attestation report, or quote, can be verified by a remote party using the corresponding public key.

Intel acts as a trusted third party in the attestation process. To address privacy concerns, the QE implements Intel’s Enhanced Privacy Identifier (EPID) [34] group signature scheme. An EPID group covers millions of CPUs of the same type (e.g., Core i3, i5, i7) and security version number. In fully anonymous mode, the cryptosystem ensures that remote parties can verify quotes from genuine SGX-enabled platforms without being able to track individual CPUs within a group or recognize previously verified platforms. In pseudonymous mode, remote verifiers can link different quotes from the same platform.

**Figure 6: SGX Quoting Enclave for Remote Attestation**

The complete SGX remote attestation procedure is outlined in Figure 6. The process begins with an initial platform configuration phase (A), where Intel deploys a dedicated Provisioning Enclave (PE) to request an EPID private key, referred to as the platform attestation key, from the remote Intel Provisioning Service. Upon receiving the attestation key, the PE derives an author-based provisioning seal key to securely store the long-term attestation key on untrusted storage (B).

For a successful enclave attestation, the remote verifier issues a challenge (1), and the enclave executes the `ereport` instruction to bind the challenge to its identity (2). The untrusted application context then forwards the local attestation report to the QE (3), which derives its report key to validate the report’s integrity (4). Next, the QE decrypts the platform attestation key received from system software using the provisioning seal key (5). The QE signs the local attestation report to convert it into a quote (6). Finally, upon receiving the attestation response, the remote verifier submits the quote to Intel’s Attestation Service for verification using the EPID group public key (7).

### Attack and Exploitation

Remote attestation, as implemented by the SGX Quoting Enclave, relies on two main pillars. First, the QE depends on the infallibility of SGX’s local attestation mechanism. If an attacker gains access to the QE’s report key, they can make the QE sign arbitrary enclave measurements, effectively turning the QE into a signing oracle.

Second, the QE relies on SGX’s sealing mechanism to securely store the asymmetric attestation key. If the platform provisioning seal key leaks, an attacker can obtain the long-term attestation key and directly sign rogue enclave reports. We exploited both these vulnerabilities to demonstrate how Foreshadow can adaptively dismantle different SGX primitives.

As with the Local Enclave (LE) attack illustrated in Figure 5, both our QE key extraction exploits target the `sgx_get_key` trusted runtime function. We constructed a carefully crafted page fault state machine to deterministically preempt the QE execution between the `egetkey` invocation and the key buffer being overwritten. Our final attack does not rely on advanced single-stepping or `eldu` prefetching techniques and achieves a 100% success rate in practice. Specifically, our exploit reliably extracts the full 128-bit report and provisioning seal keys from a single QE run suffering 14 page faults in total.

We validated the correctness of the extracted keys by fabricating bogus local attestation reports using a previously extracted QE report key and successfully ordering the genuine Intel QE to sign them. Alternatively, we created a rogue quoting service that uses the leaked platform provisioning seal key to obtain the long-term attestation key for signing. This allows an attacker to fabricate arbitrary remote attestation responses directly, without even executing the QE on the victim platform.

### Impact

The ability to spoof remote attestation responses has profound consequences. Attestation is typically the first step to establish a secure communication channel, such as via an authenticated Diffie-Hellman key exchange [2]. Using our rogue quoting service, a network-level adversary (e.g., the untrusted host application) can trivially establish a man-in-the-middle position to read and modify all traffic between a victim enclave and a remote party. All remotely provisioned secrets can now be intercepted without executing the victim enclave or requiring detailed knowledge of its internals, effectively rendering SGX-based DRM or privacy-preserving analytics [44, 50] applications useless.

Apart from confidentiality concerns, adversaries can also fabricate arbitrary remote SGX computation results. This observation rules out transparent, integrity-only enclaved execution paradigms [56] and directly threatens an emerging ecosystem of untrusted cloud environments [4] and innovative blockchain technologies [25].

Intel’s EPID [34] group signature scheme implemented by the QE exacerbates the situation. In fully anonymous mode, obtaining a single EPID private key suffices to forge signatures for the entire group containing millions of SGX-capable Intel CPUs. Alarmingly, this allows us to use the platform attestation key extracted from our lab machine to forge anonymous attestations for enclaves running on remote platforms we don’t even have code execution on. Fortunately, this does not hold for the officially recommended [34] pseudonymous mode, as remote stakeholders would recognize our fabricated quotes as coming from a different platform.

### Discussion and Mitigations

#### Impact of Our Findings

Concurrent research on transient execution attacks [15, 24, 36, 40, 42] has revealed fundamental flaws in the way current CPUs implement speculative out-of-order execution. So far, the focus of these attacks has been on breaching traditional kernel-level memory isolation barriers from an unprivileged user space process. Our work shows that Meltdown-type CPU vulnerabilities also apply to non-hierarchical intra-address space isolation, as provided by modern Intel x86 SGX technology. This finding has profound consequences for the development of adequate defenses. The widely-deployed software-only KAISER [19] defense falls short of protecting enclave programs against Foreshadow adversaries. Indeed, page table isolation mitigations are ruled out, as SGX explicitly distrusts the operating system kernel, and enclaves live within the address space of an untrusted host process.

We want to emphasize that Foreshadow exploits a microarchitectural implementation bug and does not undermine the architectural design of Intel SGX and TEEs in general. We strongly believe that the non-hierarchical protection model supported by these architectures is still as valuable as it was before. An important lesson from the recent wave of transient execution attacks, including Spectre, Meltdown, and Foreshadow, is that current processors exceed our levels of understanding [3, 47]. We therefore urge the research community to develop alternative hardware-software co-designs [11, 14], as well as inspectable open-source [47, 48] TEEs, in the hopes of making future vulnerabilities easier to identify, mitigate, and recover from.

#### Mitigation Strategies

State-of-the-art enclave side-channel hardening techniques [8, 9, 18, 52–54] offer little protection and cannot address the root causes of the Foreshadow attack. These defenses commonly rely on hardware transactional memory (TSX) support to detect suspicious page fault and interrupt rates in enclave mode, which only marginally increases the bar for Foreshadow attackers. First, not all SGX-capable processors are also shipped with TSX extensions, ruling out TSX-based hardening techniques for Intel’s critical Launch and Quoting Enclaves. Second, since the `egetkey` instruction is not allowed within a TSX transaction [27], adversaries can always interrupt a victim enclave unnoticed after key derivation to leak secrets (similar to Figure 5). Furthermore, while the high interrupt rates generated by SGX-Step would be easily recognized, stealthy exploits can limit the number of enclave preemptions, or HyperThreading-based Foreshadow variants can be executed concurrently from another logical core. Finally, we showed how to abuse SGX’s `eldu` instruction to extract enclaved memory secrets without even executing the victim enclave, effectively rendering any software-only defense strategy inherently insufficient.

Only Intel is in a unique position to patch hardware-level CPU vulnerabilities. They recently announced “silicon-based changes to future products that will directly address the Spectre and Meltdown threats in hardware [. . . ] later this year.” [37] Similarly, we expect Foreshadow to be directly addressed with silicon-based changes in future Intel processors. The SGX design [2] includes a notion of TCB recovery by including the CPU security version number in all measurements (Section 2.1). As such, future microcode updates could, in principle, mitigate Foreshadow on existing SGX-capable processors. In this respect, beta microcode updates [32] have recently been distributed to mitigate Spectre, but, at the time of this writing, no microcode patches have been released addressing Meltdown nor Foreshadow. Given the fundamental nature of out-of-order CPU pipeline optimizations, we expect it may not be feasible to directly address the Foreshadow/Meltdown access control race condition in microcode. Alternatively, based on our findings (see Appendix A) that Foreshadow requires enclave data to reside in the L1 cache, we envisage a hardware-software co-design mitigation strategy. Foreshadow-resistant enclaves should be guaranteed that (i) both logical cores in a HyperThreading setting execute within the same enclave [8,18,54], and (ii) the L1 cache is flushed upon each enclave exiting event [11].

### Related Work

Several recent studies investigate the attack surface for SGX enclaves. Existing attacks either exploit low-level memory safety vulnerabilities [38, 59] or abuse application-specific information leakage from side-channels. Importantly, in contrast to Foreshadow, all known attacks fall out of scope of Intel SGX’s threat model [28, 33] and can be effectively avoided by rewriting the victim enclave’s code to exclude such vulnerabilities.

Conventional microarchitectural side-channels [16] are, however, considerably amplified in the context of SGX’s strengthened attacker model. This point has been repeatedly demonstrated in the form of a steady stream of high-resolution PRIME+PROBE CPU cache [6,12,17,23,46,51] and branch prediction [13, 39] attacks against SGX enclaves. The additional capabilities of a root-level attacker have furthermore been leveraged to construct instruction-granular enclave interrupt primitives [57], and to exploit side-channel leakage from x86 memory paging [58, 60] and segmentation [22]. Unexpected side-channels can also arise at the application level. For example, we recently reported [30] a side-channel vulnerability in auto-generated edger8r code of the official Intel SGX SDK.

Concurrent research [7, 49] has demonstrated proof-of-concept Spectre-type speculation attacks against specially crafted SGX enclaves. Both attacks rely on executing vulnerable code within the victim enclave. Our attack, in contrast, does not require any specific code in the victim enclave and can even extract memory contents without ever executing the victim enclave. While existing work shows vulnerable gadgets exist in the SGX SDK [7], such Spectre-type attack surface can be mitigated by patching the SDK. Recent Intel microcode updates furthermore address Spectre-type attacks against SGX enclaves directly at the hardware level, by cleansing the CPU’s branch target buffer on every enclave entry/exit [7].

### Conclusion

We presented Foreshadow, an efficient transient execution attack that completely compromises the confidentiality guarantees pursued by contemporary Intel SGX technology. We contributed practical attacks against Intel’s trusted architectural enclaves, essentially dismantling SGX’s local and remote attestation guarantees as well. While, in the absence of a microcode patch, current SGX versions cannot maintain their hardware-level security guarantees, Foreshadow does assuredly not undermine the non-hierarchical protection model pursued by trusted execution environments, such as Intel SGX.

### Acknowledgments

This research was partially supported by the Research Fund KU Leuven, the Technion Hiroshi Fujiwara cyber security research center, the Israel cyber bureau, by NSF awards #1514261 and #1652259, the financial assistance award 70NANB15H328 from the U.S. Department of Commerce, National Institute of Standards and Technology, the 2017-2018 Rothschild Postdoctoral Fellowship, and the Defense Advanced Research Project Agency (DARPA) under Contract #FA8650-16-C-7622. Jo Van Bulck and Raoul Strackx are supported by a grant of the Research Foundation - Flanders (FWO).

### References

[1] ALVES, T., AND FELTON, D. Trustzone: Integrated hardware and software security. ARM white paper 3, 4 (2004), 18–24.

[2] ANATI, I., GUERON, S., JOHNSON, S., AND SCARLATA, V. Innovative technology for CPU based attestation and sealing. In Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy (2013), ACM.

[3] BAUMANN, A. Hardware is the new software. In Proceedings of the 16th Workshop on Hot Topics in Operating Systems (2017), ACM, pp. 132–137.

[4] BAUMANN, A., PEINADO, M., AND HUNT, G. Shielding applications from an untrusted cloud with Haven. In USENIX Symposium on Operating Systems Design and Implementation (2014).

[5] BRASSER, F., CAPKUN, S., DMITRIENKO, A., FRASSETTO, T., KOSTIAINEN, K., MÜLLER, U., AND SADEGHI, A.-R. Dr. sgx: Hardening sgx enclaves against cache attacks with data location randomization. arXiv preprint arXiv:1709.09917 (2017).

[6] BRASSER, F., MÜLLER, U., DMITRIENKO, A., KOSTIAINEN, K., CAPKUN, S., AND SADEGHI, A.-R. Software grand exposure: SGX cache attacks are practical. In 11th USENIX Workshop on Offensive Technologies (2017), WOOT ’17, USENIX Association.

[19] GRUSS, D., LIPP, M., SCHWARZ, M., FELLNER, R., MAURICE, C., AND MANGARD, S. Kaslr is dead: long live kaslr. In International Symposium on Engineering Secure Software and Systems (2017), Springer, pp. 161–176.

[20] GRUSS, D., MAURICE, C., FOGH, A., LIPP, M., AND MANGARD, S. Prefetch side-channel attacks: Bypassing smap and kernel aslr. In Proceedings of the 2016 ACM Conference on Computer and communications security (2016), ACM, pp. 368–379.

[21] GUERON, S. A memory encryption engine suitable for general purpose processors. IACR Cryptology ePrint Archive (2016), 204.

[22] GYSELINCK, J., VAN BULCK, J., PIESSENS, F., AND STRACKX, R. Off-limits: Abusing legacy x86 memory segmentation to spy on enclaved execution. In Publication at the 2018 International Symposium on Engineering Secure Software and Systems (ESSoS’18) (June 2018), LNCS, Springer. (in print).

[7] CHEN, G., CHEN, S., XIAO, Y., ZHANG, Y., LIN, Z., AND LAI, T. H. Sgxpectre attacks: Leaking enclave secrets via speculative execution. arXiv preprint arXiv:1802.09085 (2018).

[23] HÄHNEL, M., CUI, W., AND PEINADO, M. High-resolution side channels for untrusted operating systems. In 2017 USENIX Annual Technical Conference (2017), ATC ’17, USENIX Association.

[8] CHEN, G., WANG, W., CHEN, T., CHEN, S., ZHANG, Y., WANG, X., LAI, T.-H., AND LIN, D. Racing in hyperspace: Closing hyper-threading side channels on sgx with contrived data races. In Proceedings of the IEEE Symposium on Security and Privacy (2018), IEEE.

[9] CHEN, S., ZHANG, X., REITER, M. K., AND ZHANG, Y. Detecting privileged side-channel attacks in shielded execution with déjà vu. In Proceedings of the 2017 Asia Conference on Computer and Communications Security (2017), Asia CCS ’17, ACM, pp. 7–18.

[10] COSTAN, V., AND DEVADAS, S. Intel SGX explained. Cryptology ePrint Archive, Report 2016/086, 2016.

[11] COSTAN, V., LEBEDEV, I., AND DEVADAS, S. Sanctum: Minimal hardware extensions for strong software isolation. In Proceedings of the 25th USENIX Security Symposium (2016), USENIX Association.

[12] DALL, F., DE MICHELI, G., EISENBARTH, T., GENKIN, D., HENINGER, N., MOGHIMI, A., AND YAROM, Y. Cachequote: Efficiently recovering long-term secrets of sgx epid via cache attacks. IACR Transactions on Cryptographic Hardware and Embedded Systems 2018, 2 (2018), 171–191.