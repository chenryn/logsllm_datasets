### sMagick
#### 4.7 Case Study

In this section, we discuss two representative vulnerabilities found in the GraphicsMagick library and the CPython interpreter, respectively.

**GraphicsMagick:**
GraphicsMagick is a library derived from the ImageMagick image processing utility in November 2002. It is designed and implemented with security in mind, having been tested using Memcheck and Helgrind. Additionally, AddressSanitizer (ASAN), a mature redzone-based memory error detector, confirms its robustness against memory errors. Despite these measures, NLP-EYE detected six null pointer dereference vulnerabilities in the latest version of GraphicsMagick. An example is shown in Figure 5.

The function `MagickAllocateMemory` is intended to allocate memory. If the dynamic memory allocation fails and a null pointer is returned (Line 4 of File2), a segmentation fault will be triggered (Line 6 of File2).

To detect this vulnerability, a detector must recognize the customized memory allocation function `MagickAllocateMemory`, which is a macro definition for `MagickMalloc`. The implementation of `MagickMalloc` is defined in File1, where a customized memory allocation function `MallocFunc` is declared. NLP-EYE first identifies the macro definition `MagickAllocateMemory` in Line 4 of File2 and replaces it with its original function `MagicMalloc` from File1. After preprocessing and semantic extraction, NLP-EYE labels these functions as memory operation functions and locates any misuses. In contrast, other detection tools like MallocChecker cannot distinguish between these customized functions (`MallocFunc`, `MagicMalloc`, and `MagickAllocateMemory`) and thus fail to detect the flaw.

**CPython:**
Another example of a double-free vulnerability is shown in Figure 6, detected in the CPython interpreter. The function `PyMem_Free` in File1 is a memory deallocation function. If the variable `res` is -1, the variable `key` will be freed twice (Line 10 and Line 15 of File2). Surprisingly, this simple vulnerability was not found by either manual audits or automated source code analysis. According to feedback from CPython developers, the corresponding host function had been tested multiple times, yet the vulnerability persisted. This highlights the importance of identifying customized memory operation functions in memory corruption detection, an area where NLP-EYE excels.

### 5 Related Work

Previous efforts in vulnerability detection can be categorized into source code-based and binary code-based analyses.

#### 5.1 Source Code-based Analysis

Prior studies have detected vulnerabilities by applying program analysis on source code to extract pointer information and data dependencies. For instance, CRED [44] detects use-after-free vulnerabilities in C programs by extracting points-to information using a path-sensitive, demand-driven approach. To reduce false alarms, it employs spatio-temporal context reduction to construct precise use-after-free pairs. However, this method is time-consuming as it requires analyzing and memorizing every path in the source code.

Pinpoint [41] uses sparse value-flow analysis to identify vulnerabilities such as use-after-free and double-free, reducing the cost of data dependency analysis by first analyzing local data dependencies and then performing symbolic execution to capture non-local data dependencies and path conditions.

Other tools, like CBMC [28], a C bounded model checker, examine the safety of assertions under a given bound by translating them into a formula. If the formula satisfies any predefined violations, a violated assertion is identified. Coccinelle [29] finds specific bugs by comparing code with patterns written in Semantic Patch Language (SmPL).

For large-scale projects like the Linux kernel, DR. CHECKER [33] and K-Miner [24] are designed to be more efficient. DR. CHECKER uses a soundy approach based on program analysis to detect numerous classes of bugs in Linux kernel drivers. K-Miner sets up a virtual kernel environment and processes syscalls separately to find vulnerabilities.

These tools perform well for standard programming styles but struggle with customized functions, unlike NLP-EYE.

VulPecker [30] and VUDDY [27] detect vulnerabilities based on code similarity. VulPecker builds a vulnerability database using diff hunk features from vulnerable code and its corresponding patch. VUDDY abstracts and normalizes vulnerable functions to detect clones with modifications. However, similarity-based techniques require a large, learnable database.

#### 5.2 Binary Code-based Analysis

Binary code can also be analyzed to identify memory corruption vulnerabilities. Memory shadowing, used by tools like Dr.Memory [22], tracks memory status at runtime but consumes significant memory. Dr.Memory reduces memory consumption by encoding callstacks and identifying stack usage within heap memory. AddressSanitizer [40] minimizes memory consumption by creating a compact shadow memory with a 128-to-1 mapping, analyzing vulnerabilities on stack, heap, and global variables.

HOTracer [26] discovers heap overflow vulnerabilities by examining whether heap access operations can be controlled by an attacker. It accurately defines buffer overflows and uses a heuristic method to find memory allocation functions, achieving high accuracy in identifying memory allocation functions and detecting unknown overflows.

However, binary code-based analysis requires precise inputs to trigger memory operations, which can lead to false negatives due to incomplete code coverage.

### 6 Conclusion

We propose an NLP-based automated approach to detect memory corruption vulnerabilities. NLP-EYE, our detection tool, identifies null pointer dereference, use-after-free, and double-free vulnerabilities. The novelty of our approach lies in accurately retrieving function semantics using minimal function information (e.g., function prototypes and comments) rather than entire function implementations. NLP-EYE's NLP-based and type-based analyses enable accurate identification of memory operation functions. Our approach is adaptable, as NLP-EYE generates an adaptive corpus for different datasets by extracting comments from source code and handling various programming styles.

In future work, we plan to extend NLP-EYE to identify other types of vulnerabilities by adding additional reference functions. We have open-sourced NLP-EYE to help analysts and developers improve software security.

### 7 Acknowledgments

We thank the anonymous reviewers for their feedback and our shepherd, Dongpeng Xu, for his valuable comments. This work was supported by the General Program of National Natural Science Foundation of China (Grant No.61872237), the Key Program of National Natural Science Foundation of China (Grant No.U1636217), and the National Key Research and Development Program of China (Grant No.2016YFB0801200). Special thanks to Huawei Technologies, Inc. for the research grant, Ant Financial Services Group for support through the SJTU-AntFinancial joint Institute of FinTech Security, and Nanjing Turing Artificial Intelligence Institute for the internship program.

### References

[1] Clang Static Analyzer. http://clang-analyzer.llvm.org.
[2] Cppcheck. http://cppcheck.sourceforge.net.
[3] CPython. https://www.python.org.
[4] Git. https://git-scm.com.
[5] GNU Manuals Online. https://www.gnu.org/manual/manual.en.html.
[6] GnuTLS. https://www.gnutls.org.
[7] Google Web Trillion Word Corpus. http://googleresearch.blogspot.com/2006/08/all-our-n-gram-are-belong-to-you.html.
[8] GraphicsMagick. http://www.graphicsmagick.org.
[9] ImageMagick. https://www.imagemagick.org.
[10] Infer. https://fbinfer.com.
[11] LibTIFF. http://www.libtiff.org.
[12] Linux man pages online. http://man7.org/linux/man-pages/index.html.
[13] MallocChecker. https://clang-analyzer.llvm.org/.
[14] Microsoft: 70 percent of all security bugs are memory safety issues. https://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/.
[15] Python Wordsegment. https://pypi.org/project/wordsegment/.
[16] Stackoverflow. https://stackoverflow.com.
[17] Vim. https://www.vim.org.
[18] VisualCodeGrepper. https://github.com/nccgroup/VCG.
[19] Wikipedia. https://www.wikipedia.org.
[20] Windows 8 APIs References. https://docs.microsoft.com/en-us/windows/desktop/apiindex/windows-8-api-sets.
[21] Windows Driver API references. https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/.
[22] Bruening, Derek and Zhao, Qin. Practical Memory Checking with Dr. Memory. In Proceedings of the 9th Annual IEEE/ACM International Symposium on Code Generation and Optimization (CGO), 2011.
[23] Dinakar Dhurjati and Vikram Adve. Efficiently Detecting All Dangling Pointer Uses in Production Servers. In Proceedings of International Conference on Dependable Systems and Networks (DSN), 2006.
[24] David Gens, Simon Schmitt, Lucas Davi, and Ahmad-Reza Sadeghi. K-miner: Uncovering Memory Corruption in Linux. In Proceedings of 2018 Network and Distributed System Security Symposium (NDSS), 2018.
[25] Niranjan Hasabnis, Ashish Misra, and R Sekar. Lightweight Bounds Checking. In Proceedings of the Tenth International Symposium on Code Generation and Optimization (CGO), 2012.
[26] Xiangkun Jia, Chao Zhang, Purui Su, Yi Yang, Huafeng Huang, and Dengguo Feng. Towards Efficient Heap Overflow Discovery. In Proceedings of 26th USENIX Security Symposium USENIX Security (USENIX Security), 2017.
[27] Seulbae Kim, Seunghoon Woo, Heejo Lee, and Hakjoo Oh. VUDDY: A Scalable Approach for Vulnerable Code Clone Discovery. In Proceedings of 2017 IEEE Symposium on Security and Privacy (SP), 2017.
[28] Daniel Kroening and Michael Tautschnig. CBMC–C Bounded Model Checker. In Proceedings of International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS), 2014.
[29] Julia Lawall, Ben Laurie, Ren’e Rydhof Hansen, Nicolas Palix, and Gilles Muller. Finding Error Handling Bugs in OpenSSL Using Coccinelle. In Proceedings of 2010 European Dependable Computing Conference (EDCC), 2010.
[30] Zhen Li, Deqing Zou, Shouhuai Xu, Hai Jin, Hanchao Qi, and Jie Hu. VulPecker: an Automated Vulnerability Detection System Based on Code Similarity Analysis. In Proceedings of the 32nd Annual Conference on Computer Security Applications (ACSAC), 2016.
[31] Stanley B. Lippman. C++ Primer. 2012.
[32] Edward Loper and Steven Bird. NLTK: the Natural Language Toolkit. arXiv preprint cs/0205028, 2002.
[33] Aravind Machiry, Chad Spensky, Jake Corina, Nick Stephens, Christopher Kruegel, and Giovanni Vigna. DR.CHECKER: A Soundy Analysis for Linux Kernel Drivers. In Proceedings of 26th USENIX Security Symposium USENIX Security (USENIX Security), 2017.
[34] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. Efficient Estimation of word representations in Vector Space. arXiv preprint arXiv:1301.3781, 2013.
[35] Nicholas Nethercote and Julian Seward. Valgrind: a Framework for Heavyweight Dynamic Binary Instrumentation. In Proceedings of ACM Sigplan notices, 2007.
[36] Stephen Prata. C Primer Plus. 2014.
[37] Radim Rehurek and Petr Sojka. Software Framework for Topic Modelling with Large Corpora. In Proceedings of the LREC 2010 Workshop on New Challenges for NLP Frameworks (LREC), 2010.
[38] Edward J Schwartz, Cory F Cohen, Michael Duggan, Jeffrey Gennari, Jeffrey S Havrilla, and Charles Hines. Using Logic Programming to Recover C++ Classes and Methods from Compiled Executables. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS), 2018.
[39] Toby Segaran and Jeff Hammerbacher. Beautiful Data: the Stories Behind Elegant Data Solutions. 2009.
[40] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and Dmitriy Vyukov. AddressSanitizer: A Fast Address Sanity Checker. In Proceedings of the 2012 USENIX Annual Technical Conference (USENIX ATC), 2012.
[41] Qingkai Shi, Xiao Xiao, Rongxin Wu, Jinguo Zhou, Gang Fan, and Charles Zhang. Pinpoint: Fast and Precise Sparse Value Flow Analysis for Million Lines of Code. In Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2018.
[42] Yulei Sui and Jingling Xue. SVF: Interprocedural Static Value-Flow Analysis in LLVM. In Proceedings of the 25th international conference on compiler construction (CC), 2016.
[43] Erik Van Der Kouwe, Vinod Nigade, and Cristiano Giuffrida. Dangsan: Scalable Use-After-Free Detection. In Proceedings of the Twelfth European Conference on Computer Systems (EuroSys), 2017.
[44] Hua Yan, Yulei Sui, Shiping Chen, and Jingling Xue. Spatio-Temporal Context Reduction: a Pointer-Analysis-Based Static Approach for Detecting Use-After-Free Vulnerabilities. In Proceedings of 2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE), 2018.
[45] Li Yujian and Liu Bo. A Normalized Levenshtein Distance Metric. IEEE transactions on pattern analysis and machine intelligence (TPAMI), 2007.