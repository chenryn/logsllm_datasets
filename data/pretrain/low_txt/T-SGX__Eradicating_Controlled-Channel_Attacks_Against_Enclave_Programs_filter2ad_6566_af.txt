### T-SGX Limitations and Future Improvements

T-SGX is a compiler-based approach, which means it cannot protect libraries without source code. This limitation can be addressed if library developers apply T-SGX to their closed-source libraries. Additionally, we plan to enhance T-SGX to support binary instrumentation, thereby extending its protection capabilities.

Another significant limitation of T-SGX is its inability to support page-level swapping between enclave memory and main memory, a feature that Sanctum [11] provides. This lack of support can be problematic, especially in public cloud environments where limited enclave memory is shared with other processes. A potential solution is to swap the entire memory of an enclave program to the main memory. We intend to investigate the effectiveness of this approach in future work.

Furthermore, T-SGX does not support multithreaded enclave programs that use TSX for lock elision. However, this does not affect the program's functionality, as lock elision is an optional feature. Traditional locks can be used for synchronization between threads without any issues.

### Other Side-Channel Attacks

#### Cache Timing Attack
A cache timing attack by a malicious OS is a serious threat because the OS manages the virtual address mapping of every program [10]. To mitigate this, an enclave program needs to flush its private cache whenever the OS resumes its execution. With T-SGX, an enclave program can precisely determine when it is resumed by the OS, allowing it to flush its private cache at the appropriate time. However, this mitigation is insufficient against asynchronous cache timing attacks that exploit the last-level cache (LLC) [28, 39]. We plan to study methods to secure enclave programs from such attacks.

#### Memory Bus Snooping Attack
A memory bus snooping attack is a hardware-level threat. By monitoring memory bus traffic, a malicious peripheral device can identify which memory addresses are being accessed by the CPU, even though the memory contents are encrypted by SGX. To prevent this, SGX needs to implement software-level or hardware-level ORAM techniques [12, 38, 40, 49]. Additionally, minimizing the number of memory accesses through cache-based [8, 17, 18, 66] or register-based [15, 45] computations can further reduce the risk.

### Related Work

This section discusses several important studies related to T-SGX.

#### Trusted Execution Environments (TEEs)
Mainstream computing environments are complex and provide only limited assurance for confidentiality and integrity against various attacks, such as malware, kernel exploits, and malicious peripherals. Numerous researchers and companies have proposed TEEs to protect critical data and computations more effectively. TEEs do not trust the main OS, as it could be compromised, and are implemented in places the OS cannot control, such as trusted hypervisors or hardware. Examples include Overshadow [7], NOVA [57], TrustVisor [43], Cloud Terminal [42], InkTag [21], MiniBox [37], and Sego [33]. These systems use nested page tables or extended page table features of hardware-based virtualization to provide isolated memory for each trusted process or module. All interactions between a trusted process and the OS are managed by the trusted hypervisor. However, hypervisors are also vulnerable to various attacks [64]. Flicker [44] and TrustVisor [43] use trusted hardware (TPM [60]) to minimize the complexity of their TEE software. Widely-deployed hardware-based TEEs include ARM’s TrustZone [1], Intel’s TXT [16] and SGX [24], and Samsung’s KNOX [50]. Other proposed hardware-based TEE designs include TrInc [35], SICE [3], SecureSwitch [58], OASIS [47], TrustLite [32], and Sanctum [11].

#### OS Attacks Against TEEs
Despite TEEs being designed to protect user processes from a malicious OS, the latter can still attack these processes due to their dependency on the OS for system resources (e.g., storage, network). Iago attacks [6] exploit this limitation by manipulating the return value of system calls like `mmap()` to hijack control flow. Therefore, TEEs must carefully validate the return values of all system calls [21, 29]. Controlled-channel attacks [54, 65], which this paper focuses on, also rely on the OS managing system memory. AsyncShock [63] demonstrates that synchronization bugs, usually harmless in traditional environments, can allow an adversarial OS to compromise SGX enclaves.

#### SGX Applications
Among the various hardware-based TEEs, Intel SGX has received significant attention due to its widespread deployment (all Intel Skylake CPUs support it) and its ability to use almost the full unprivileged instruction set of the Intel CPU. Platforms like Haven [4], Graphene-SGX [61, 62], and SCONE [2] securely run unmodified applications in untrusted clouds using SGX. VC3 [51], M2R [12], and Ohrimenko et al. [46] use SGX for data analytics, MapReduce computations, and machine learning while ensuring confidentiality and integrity. Kim et al. [31], S-NFV [53], Pires et al. [48], and SecureKeeper [5] demonstrate how SGX can secure network services, content-based routing, and distributed computing. Moat [56] and CONFIDENTIAL [55] provide verification methodologies for enclave programs to check their security. OpenSGX [29] is an emulator for developing, debugging, and testing enclave programs. SGX-Shield [52] implements fine-grained address space layout randomization (ASLR) for SGX. Ryoan [22] introduces a distributed two-way sandbox to run untrusted enclave programs with sensitive user data while preventing information leakage.

### Conclusion

Intel SGX is considered one of the most promising TEE technologies. However, the controlled-channel attack [54, 65]—a noise-free side channel—has raised concerns about its security. This paper introduces T-SGX, a secure, efficient, and practical scheme for protecting enclave programs from controlled-channel attacks. T-SGX ensures that no page fault sequence is leaked to attackers and is significantly faster than the state-of-the-art scheme [54] without requiring manual developer effort or hardware modifications.

### Acknowledgment

We thank Byoungyoung Lee for constructive discussions, the anonymous reviewers for their helpful feedback, and GTISC lab members for their proofreading efforts. This research was supported by the NSF award DGE-1500084, CNS-1563848, CRI-1629851 ONR under grant N000141512162, DARPA TC program under contract No. DARPA FA8650-15-C-7556, and DARPA XD3 program under contract No. DARPA HR0011-16-C-0059, and ETRI MSIP/IITP[B0101-15-0644].

### References

[1] ARM, “Building a secure system using TrustZone technology,” Dec. 2008, pRD29-GENC-009492C.
[2] S. Arnautox, B. Tarch, F. Gregor, T. Knauth, A. Martin, C. Priebe, J. Lind, D. Muthukumaran, D. O’Keeffe, M. L. Stillwell, D. Goltzsche, D. Eyers, R. Kapitza, P. Pietzuch, and C. Fetzer, “SCONE: Secure Linux containers with Intel SGX,” in Proceedings of the 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI), Savannah, GA, Nov. 2016.
[3] A. M. Azab, P. Ning, and X. Zhang, “SICE: A hardware-level strongly isolated computing environment for x86 multi-core platforms,” in Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS), Chicago, Illinois, Oct. 2011.
[4] A. Baumann, M. Peinado, and G. Hunt, “Shielding applications from an untrusted cloud with Haven,” in Proceedings of the 11th USENIX Symposium on Operating Systems Design and Implementation (OSDI), Broomfield, Colorado, Oct. 2014.
[5] S. Brenner, C. Wulf, M. Lorenz, N. Weichbrodt, D. Goltzsche, C. Fetzer, P. Pietzuch, and R. Kapitza, “SecureKeeper: Confidential ZooKeeper using Intel SGX,” in Proceedings of the 16th Annual Middleware Conference (Middleware), 2016.
[6] S. Checkoway and H. Shacham, “Iago attacks: Why the system call API is a bad untrusted RPC interface,” in Proceedings of the 18th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Houston, TX, Mar. 2013.
[7] X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A. Waldspurger, D. Boneh, J. Dwoskin, and D. R. Ports, “Overshadow: A virtualization-based approach to retrofitting protection in commodity operating systems,” in Proceedings of the 13th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Seattle, WA, Mar. 2008.
[8] P. Colpa, J. Zhang, J. Gleeson, S. Suneja, E. de Lara, H. Raj, S. Saroiu, and A. Wolman, “Protecting data on smartphones and tablets from memory attacks,” in Proceedings of the 20th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Istanbul, Turkey, Mar. 2015.
[9] B. Coppens, I. Verbauwhede, K. D. Bosschere, and B. D. Sutter, “Practical mitigations for timing-based side-channel attacks on modern x86 processors,” in Proceedings of the 30th IEEE Symposium on Security and Privacy (Oakland), Oakland, CA, May 2009.
[10] V. Costan and S. Devadas, “Intel SGX explained,” Cryptology ePrint Archive, Report 2016/086, 2016, http://eprint.iacr.org/.
[11] V. Costan, I. Lebedev, and S. Devadas, “Sanctum: Minimal hardware extensions for strong software isolation,” in Proceedings of the 25th USENIX Security Symposium (Security), Austin, TX, Aug. 2016.
[12] T. T. A. Dinh, P. Saxena, E.-C. Cang, B. C. Ooi, and C. Zhang, “M2R: Enabling stronger privacy in MapReduce computation,” in Proceedings of the 24th USENIX Security Symposium (Security), Washington, DC, Aug. 2015.
[13] A. J. Feldman, W. P. Zeller, M. J. Freedman, and E. W. Felten, “SPORC: Group collaboration using untrusted cloud resources,” in Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation (OSDI), Vancouver, Canada, Oct. 2010.
[14] C. Gentry, “Fully homomorphic encryption using ideal lattices,” in Proceedings of the 41st Annual ACM Symposium on Theory of Computing (STOC), 2009.
[15] J. Götzfried and T. Müller, “Armored: CPU-bound encryption for Android-driven ARM devices,” in Proceedings of the 8th International Conference on Availability, Reliability and Security (ARES), 2013.
[16] J. Greene, “Intel trusted execution technology,” Intel Technology White Paper, 2012.
[17] L. Guan, J. Lin, B. Luo, and J. Jing, “Copker: Computing with private keys without RAM,” in Proceedings of the 2014 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2014.
[18] L. Guan, J. Lin, B. Luo, J. Jing, and J. Wang, “Protecting private keys against memory disclosure attacks using hardware transactional memory,” in Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May 2015.
[19] S. M. Hand, “Self-paging in the Nemesis operating system,” in Proceedings of the 3rd USENIX Symposium on Operating Systems Design and Implementation (OSDI), New Orleans, LA, Feb. 1999.
[20] M. Herlihy and J. Moss, “Transactional memory: Architectural support for lock-free data structures,” in Proceedings of the 20th ACM/IEEE International Symposium on Computer Architecture (ISCA), San Diego, CA, USA, 1993.
[21] O. S. Hofmann, S. Kim, A. M. Dunn, M. Z. Lee, and E. Witchel, “InkTag: Secure applications on an untrusted operating system,” in Proceedings of the 18th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Houston, TX, Mar. 2013.
[22] T. Hunt, Z. Zhu, Y. Xu, S. Peter, and E. Witchel, “Ryoan: A distributed sandbox for untrusted computation on secret data,” in Proceedings of the 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI), Savannah, GA, Nov. 2016.
[23] Intel, “Intel software guard extensions: Intel attestation service API,” https://software.intel.com/sites/default/files/managed/3d/c8/IAS_1_0_API_spec_1_1_Final.pdf.
[24] ——, “Intel software guard extensions programming reference (rev2),” Dec. 2015.
[25] ——, “Intel 64 and IA-32 architectures software developer’s manual,” Oct. 2014, 329298-002US.
[26] Intel, “SGX Tutorial, ISCA 2015,” http://sgxisca.weebly.com/, Jun. 2015.
[27] I. Ion, N. Sachdeva, P. Kumaraguru, and S. Čapkun, “Home is safer than the cloud!: Privacy concerns for consumer cloud storage,” in Proceedings of the Seventh Symposium on Usable Privacy and Security (SOUPS), Pittsburgh, Pennsylvania, 2011.
[28] G. Irazoqui, T. Eisenbarth, and B. Sunar, “S$A: A shared cache attack that works across cores and defies VM sandboxing—and its application to AES,” in Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May 2015.
[29] P. Jain, S. Desai, S. Kim, M.-W. Shih, J. Lee, C. Choi, Y. Shin, T. Kim, B. B. Kang, and D. Han, “OpenSGX: An open platform for SGX research,” in Proceedings of the 2016 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2016.
[30] S. Johnson, V. Scarlata, C. Rozas, E. Brickell, and F. Mckeen, “Intel software guard extensions: EPID provisioning and attestation services,” https://software.intel.com/en-us/blogs/2016/03/09/intel-sgx-epid-provisioning-and-attestation-services.
[31] S. Kim, Y. Shin, J. Ha, T. Kim, and D. Han, “A first step towards leveraging commodity trusted execution environments for network applications,” in Proceedings of the 14th ACM Workshop on Hot Topics in Networks (HotNets), Philadelphia, PA, Nov. 2015.
[32] P. Koeberl, S. Schulz, A.-R. Sadeghi, and V. Varadharajan, “TrustLite: A security architecture for tiny embedded devices,” in Proceedings of the 9th European Conference on Computer Systems (EuroSys), Amsterdam, The Netherlands, Apr. 2014.
[33] Y. Kwon, A. M. Dunn, M. Z. Lee, O. S. Hofmann, Y. Xu, and E. Witchel, “Sego: Pervasive trusted metadata for efficiently verified untrusted system services,” in Proceedings of the 21st ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Atlanta, GA, Apr. 2016.
[34] V. Leis, A. Kemper, and T. Neumann, “Exploiting hardware transactional memory in main-memory databases,” in Proceedings of the 30th IEEE International Conference on Data Engineering (ICDE), Chicago, IL, Mar.–Apr. 2014.
[35] D. Levin, J. R. Douceur, J. R. Lorch, and T. Moscibroda, “TrInc: Small trusted hardware for large distributed systems,” in Proceedings of the 6th USENIX Symposium on Networked Systems Design and Implementation (NSDI), Boston, MA, Apr. 2009.
[36] J. Li, M. Krohn, D. Mazières, , and D. Shasha, “Secure untrusted data repository (SUNDR),” in Proceedings of the 6th USENIX Symposium on Operating Systems Design and Implementation (OSDI), San Francisco, CA, Dec. 2004.
[37] Y. Li, J. McCune, J. Newsome, A. Perrig, B. Baker, and W. Drewry, “MiniBox: A two-way sandbox for x86 native code,” in Proceedings of the 2014 USENIX Annual Technical Conference (ATC), Philadelphia, PA, Jun. 2014.
[38] C. Liu, A. Harris, M. Maas, M. Hicks, M. Tiwari, and E. Shi, “GhostRider: A hardware-software system for memory trace oblivious computation,” in Proceedings of the 20th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Istanbul, Turkey, Mar. 2015.
[39] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-level cache side-channel attacks are practical,” in Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May 2015.
[40] M. Maas, E. Love, E. Stefanov, M. Tiwari, E. Shi, K. Asanović, J. Kubiatowicz, and D. Song, “PHANTOM: Practical oblivious computation in a secure processor,” in Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS), Berlin, Germany, Oct. 2013.
[41] P. Mahajan, S. Setty, S. Lee, A. Clement, L. Alvisi, M. Dahlin, and M. Walfish, “Depot: Cloud storage with minimal trust,” in Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation (OSDI), Vancouver, Canada, Oct. 2010.
[42] L. Martignoni, P. Poosankam, M. Zaharia, J. Han, S. McCamant, D. Song, V. Paxson, A. Perrig, S. Shenker, and I. Stoica, “Cloud Terminal: Secure access to sensitive applications from untrusted systems,” in Proceedings of the 2012 USENIX Annual Technical Conference (ATC), Boston, MA, Jun. 2012.
[43] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig, “TrustVisor: Efficient TCB reduction and attestation,” in Proceedings of the 31st IEEE Symposium on Security and Privacy (Oakland), Oakland, CA, May 2010.
[44] J. M. McCune, B. J. Parno, A. Perrig, M. K. Reiter, and H. Isozaki, “Flicker: An execution infrastructure for TCB minimization,” in Proceedings of the 3rd European Conference on Computer Systems (EuroSys), Glasgow, Scotland, Mar. 2008.
[45] T. Müller, F. C. Freiling, and A. Dewald, “TRESOR runs encryption securely outside RAM,” in Proceedings of the 20th USENIX Security Symposium (Security), San Francisco, CA, Aug. 2011.
[46] O. Ohrimenko, C. F. Manuel Costa, S. Nowozin, A. Mehta, F. Schuster, and K. Vaswani, “SGX-enabled oblivious machine learning,” in Proceedings of the 25th USENIX Security Symposium (Security), Austin, TX, Aug. 2016.
[47] E. Owusu, J. Guajardo, J. McCune, J. Newsome, A. Perrig, and A. Vasudevan, “OASIS: On achieving a sanctuary for integrity and secrecy on untrusted platforms,” in Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS), Berlin, Germany, Oct. 2013.
[48] R. Pires, M. Pasin, P. Felber, and C. Fetzer, “Secure content-based routing using Intel Software Guard Extensions,” in Proceedings of the 16th Annual Middleware Conference (Middleware), 2016.
[49] A. Rane, C. Lin, and M. Tiwari, “Raccoon: Closing digital side-channels through obfuscated execution,” in Proceedings of the 24th USENIX Security Symposium (Security), Washington, DC, Aug. 2015.
[50] Samsung, “White paper: An overview of Samsung KNOX,” 2013, enterprise Mobility Solutions.
[51] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-Ruiz, and M. Russinovich, “VC3: Trustworthy data analytics in the cloud using SGX,” in Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May 2015.
[52] J. Seo, B. Lee, S. Kim, M.-W. Shih, I. Shin, D. Han, and T. Kim, “SGX-Shield: Enabling address space layout randomization for SGX programs,” in Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb.–Mar. 2017.
[53] M.-W. Shih, M. Kumar, T. Kim, and A. Gavrilovska, “S-NFV: Securing NFV states by using SGX,” in Proceedings of the 1st ACM International Workshop on Security in SDN and NFV, New Orleans, LA, Mar. 2016.
[54] S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena, “Preventing your faults from telling your secrets,” in Proceedings of the 11th ACM Symposium on Information, Computer and Communications Security (ASIACCS), Xi’an, China, May–Jun. 2016.
[55] R. Sinha, M. Costa, A. Lal, N. P. Lopes, S. Rajamani, S. A. Seshia, and K. Vaswani, “A design and verification methodology for secure isolated regions,” in Proceedings of the 2016 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Santa Barbara, CA, Jun. 2016.
[56] R. Sinha, S. Rajamani, S. Seshia, and K. Vaswani, “Moat: Verifying confidentiality of enclave program,” in Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS), Denver, Colorado, Oct. 2015.
[57] U. Steinberg and B. Kauer, “NOVA: A microhypervisor-based secure virtualization architecture,” in Proceedings of the 5th European Conference on Computer Systems (EuroSys), Paris, France, Apr. 2010.
[58] K. Sun, J. Wang, F. Zhang, and A. Stavrou, “SecureSwitch: BIOS-assisted isolation and switch between trusted and untrusted commodity OSes,” in Proceedings of the 19th Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2012.
[59] H. Takabi, J. B. Joshi, and G.-J. Ahn, “Security and privacy challenges in cloud computing environments,” IEEE Security & Privacy, vol. 8, no. 6, pp. 24–31, 2010.
[60] Trusted Computing Group, “Trusted platform module (TPM) summary,” http://www.trustedcomputinggroup.org/trusted-platform-module-tpm-summary/.
[61] C.-C. Tsai, K. S. Arora, N. Bandi, B. Jain, W. Jannen, J. John, H. A. Kalodner, V. Kulkarni, D. Oliveira, and D. E. Porter, “Cooperation and security isolation of library OSes for multi-process applications,” in Proceedings of the 9th European Conference on Computer Systems (EuroSys), Amsterdam, The Netherlands, Apr. 2014.
[62] C.-C. Tsai and D. Porter, “Graphene / Graphene-SGX Library OS - a library OS for Linux multi-process applications, with Intel SGX support,” https://github.com/oscarlab/graphene.
[63] N. Weichbrodt, A. Kurmus, P. Pietzuch, and R. Kapitza, “AsyncShock: Exploiting synchronisation bugs in Intel SGX enclaves,” in Proceedings of the 21st European Symposium on Research in Computer Security (ESORICS), Crete, Greece, Sep. 2016.
[64] Xen, “Xen security advisories,” http://xenbits.xen.org/xsa/.
[65] Y. Xu, W. Cui, and M. Peinado, “Controlled-channel attacks: Deterministic side channels for untrusted operating systems,” in Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May 2015.
[66] N. Zhang, K. Sun, W. Lou, and Y. T. Hou, “CaSE: Cache-assisted secure execution on ARM processors,” in Proceedings of the 37th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May 2016.