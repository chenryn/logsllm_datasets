### Indirect Calls and Defenses Against Unsafe Copy Relocations

Virtual method calls in C++ programs are prevalent, and researchers have proposed various defenses to protect these dynamic calls. To evaluate the effectiveness of these defenses against unsafe copy relocations, we developed a simple exploitation test, as shown in Figure 12.

#### Test Program Overview

The test program consists of two parts:
1. **Library (A.hpp and A.cpp)**: Defines a class `A` with a virtual method.
2. **Executable (main.cpp)**: Allocates an instance of class `A` and invokes its virtual method. The executable hardcodes the symbol name for class `A`'s vtable (`_ZTV1A`) and performs an emulated memory corruption on the function pointer of the virtual method `A::a1` in the vtable.

#### Evaluation of CFI Defenses

We evaluated six Control-Flow Integrity (CFI) defenses and presented the results in Table III. These defenses were chosen because they apply to C++ programs on Linux. An effective defense must check both the vtable pointer and the actual function pointer in the vtable to defend against COOP (Counterfeit Object-Oriented Programming) and COREV (Copy Relocation Violation) attacks.

- **Three Defenses**: Vulnerable to unintended copy relocations due to their assumption that vtables are read-only and only check if the vtable pointer points to a valid vtable.
- **Interleaving [10]**: Currently does not support dynamic linking, so its vulnerability was evaluated based on the proposed instrumentation.
- **SafeDispatch [26]**: Proposes two instrumentations: one checks the virtual method target, and the other checks the vtable pointer. The latter is claimed to provide better security against COOP-style attacks but is vulnerable to COREV-based vtable corruption attacks.

### Implications on Other Platforms

Dynamic linking is enabled by default on major operating systems such as Windows and macOS. We evaluated the implications of COREV on the dynamic linking implementations on both platforms.

#### Windows

The Microsoft Visual C++ (MSVC) linker on Windows refuses to build the example program unless the external library variable is explicitly specified using the `__declspec(dllimport)` attribute. This removes the ambiguity and eliminates the need for copy relocations, thus making COREV inapplicable on Windows.

#### macOS

macOS handles the ambiguity by assuming all external variables are potentially from dynamic libraries, trading performance for safety. The compiler generates instructions for external variables, and accesses to library variables use the Global Offset Table (GOT) indirection. Consequently, copy relocations do not exist on macOS, and COREV does not affect it.

However, memory corruption over "read-only" data is still possible on macOS. The compiler allocates read-only data that requires runtime relocation from the `__DATA.__const` section, which is mapped as read-write at runtime. This design simplifies the implementation of the dynamic loader but weakens the security of applications by exposing memory corruption targets to adversaries.

### Affected Defenses

In this section, we evaluate how unsafe copy relocations affect current defenses.

#### Example: Format String (libow)

We identified a dynamic library (libow-3.1) that exports 22 format strings, causing three executables (owftpd, owserver, and owexternal) to copy them into writable memory at runtime. These format strings are used for debugging purposes. If an adversary corrupts the relocated format string and exploits a concurrency bug to cause a mutex lock operation to fail, they can potentially launch printf-oriented programming and achieve arbitrary code execution.

### Conclusion

Dynamic loading enables modularity and reduces the memory footprint of applications. However, due to the incomplete mapping between source-level primitives (like `extern const`) and imported/exported symbols on the ELF/binary level, memory protection information is inadvertently lost. When an executable references a read-only variable exported from a library, the dynamic loader relocates this variable into the writable `.bss` section, effectively stripping the `const` attribute. This enables an adversary to modify "read-only" variables when exploiting a memory corruption vulnerability, leading to the attack vector known as COREV.

This attack vector has existed for decades and is widespread, affecting 29,817 libraries and 6,399 programs, including ftp servers, apt-get, and gettext. An attacker can use COREV to escalate privileges, leveraging a memory corruption vulnerability to modify format strings, file names, vtables, code pointers, or other supposedly read-only data.

We discuss three possible mitigation strategies:
1. **Detection**: Analyzing binaries and libraries to detect the attack vector.
2. **Recompilation**: Mitigating the attack through recompilation, if possible.
3. **Toolchain Changes**: Modifying the toolchain to make the linker and loader aware of source-level permissions even for externally defined variables.

### Acknowledgements

We thank our shepherd, Engin Kirda, and the anonymous reviewers for their constructive feedback. This work was supported, in part, by the National Science Foundation under grants number CNS-1408880, CNS-1513783, and CNS-1657711, and by the Defense Advanced Research Projects Agency (DARPA) under agreement number N66001-13-2-4040.

### References

[1] libow-3.1. http://packages.ubuntu.com/xenial/libow-3.1-1.
[2] RELRO - a memory corruption mitigation technique. http://tk-blog.blogspot.com/2009/02/relro-not-so-well-known-memory.html.
[3] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-flow integrity,” in Proceedings of the 12th ACM conference on Computer and communications security. ACM, 2005, pp. 340–353.
[4] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “A theory of secure control flow,” in Proceedings of the 7th International Conference on Formal Methods and Software Engineering, ser. ICFEM’05, 2005.
[5] S. Andersen and V. Abella, “Data execution prevention. changes to functionality in microsoft windows xp service pack 2, part 3: Memory protection technologies,” 2004.
[6] S. V. Archives, “Wu-ftpd remote format string stack overwrite vulnerability,” 2008.
[7] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. Nürnberger, and J. Pewny, “You can run but you can’t read: Preventing disclosure exploits in executable code,” in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2014, pp. 1342–1353.
[8] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna, “Saner: Composing static and dynamic analysis to validate sanitization in web applications,” in IEEE Symposium on Security and Privacy (Oakland 2008). IEEE, 2008, pp. 387–401.
[9] M. Bishop and M. Digler, “Checking for race conditions in file accesses,” Computer Systems, vol. 9, no. 2, Spring 1996.
[10] D. Bounov, R. Kici, and S. Lerner, “Protecting c++ dynamic dispatch through vtable interleaving,” in Network and Distributed System Security Symposium (NDSS), 2016.
[11] N. Burow, S. A. Carr, J. Nash, P. Larsen, M. Franz, S. Brunthaler, and M. Payer, “Control-Flow Integrity: Precision, Security, and Performance,” ACM Computing Surveys, 2017.
[12] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross, “Control-flow bending: On the effectiveness of control-flow integrity,” in Proceedings of the 24th Usenix Security Symposium (USENIX Security), 2015.
[13] S. Chari, S. Halevi, and W. Venema, “Where do you want to go today? escalating privileges by pathname manipulation.” in Network and Distributed System Security Symposium (NDSS), 2010.
[14] C. Cowan, M. Barringer, S. Beattie, G. Kroah-Hartman, M. Frantzen, and J. Lokier, “Formatguard: Automatic protection from printf format string vulnerabilities.” in USENIX Security Symposium (USENIX Security), vol. 91. Washington, DC, 2001.
[15] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi, S. Brunthaler, and M. Franz, “Readactor: Practical code randomization resilient to memory disclosure,” in 2015 IEEE Symposium on Security and Privacy (S&P 2015), 18-20 May 2015, San Jose, California, USA, 2015.
[16] J. Criswell, N. Dautenhahn, and V. Adve, “KCoFI: Complete control-flow integrity for commodity operating system kernels,” in 2014 IEEE Symposium on Security and Privacy (SP). IEEE, 2014, pp. 292–307.
[17] CWE, “CWE-59: Improper Link Resolution Before File Access,” http://cwe.mitre.org/data/definitions/59.html.
[18] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose, “Stitching the gadgets: On the ineffectiveness of coarse-grained control-flow integrity protection,” in 23rd USENIX Security Symposium (USENIX Security). San Diego, CA: USENIX Association, Aug. 2014, pp. 401–416.
[19] U. Drepper, “How to write shared libraries,” Retrieved Jul, vol. 16, p. 2009, 2006.
[20] X. Ge, W. Cui, and T. Jaeger, “GRIFFIN: Guarding control flows using intel processor trace,” in Proceedings of the 22nd International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS). ACM, 2017.
[21] X. Ge, N. Talele, M. Payer, and T. Jaeger, “Fine-grained control-flow integrity for kernel software,” in IEEE European Symposium on Security and Privacy (EuroSP). IEEE, 2016.
[22] X. Ge, H. Vijayakumar, and T. Jaeger, “Sprobes: Enforcing kernel code integrity on the trustzone architecture,” in Proceedings of the 3rd IEEE Mobile Security Technologies Workshop (MoST 2014), May 2014.
[23] E. Goktas, E. Athanasopoulos, H. Bos, and G. Portokalidis, “Out of control: Overcoming control-flow integrity,” in Proceedings of the 35th IEEE Symposium on Security and Privacy, May 2014.
[24] N. Hardy, “The confused deputy,” Operating Systems Review, vol. 22, pp. 36–38, 1988.
[25] E. Hiroaki and Y. Kunikazu, “ProPolice: Improved stack-smashing attack detection,” IPSJ SIG Notes, pp. 181–188, 2001.
[26] D. Jang, Z. Tatlock, and S. Lerner, “Safedispatch: Securing c++ virtual calls from memory corruption attacks.” in Network and Distributed System Security Symposium (NDSS), 2014.
[27] J. Jelinek, “FORTIFY SOURCE,” https://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html, 2004.
[28] W. S. McPhee, “Operating system integrity in OS/VS2,” IBM Syst. J., 1974.
[29] B. Niu and G. Tan, “Modular control-flow integrity,” in Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation. ACM, 2014, p. 58.
[30] B. Niu and G. Tan, “RockJIT: Securing just-in-time compilation using modular control-flow integrity,” in Proceedings of the 2014 ACM SIGPLAN Conference on Computer and Communications Security. ACM, 2014, p. 58.
[31] B. Niu and G. Tan, “Per-input control-flow integrity,” in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 914–926.
[32] PaX Team, “Documentation for the PaX project - overall description,” https://pax.grsecurity.net/docs/pax.txt, 2008.
[33] M. Payer, “Too much PIE is bad for performance,” ETH Zurich Technical Report http://nebelwelt.net/publications/files/12TRpie.pdf, 2012.
[34] M. Payer, A. Barresi, and T. R. Gross, “Fine-grained control-flow integrity through binary hardening,” in Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 2015, pp. 144–164.
[35] M. Payer and T. R. Gross, “Protecting Applications Against TOCTTOU Races by User-Space Caching of File Metadata,” in VEE’12: Proc. 8th Int’l Conf. Virtual Execution Environments, 2012.
[36] A. Prakash, X. Hu, and H. Yin, “vfGuard: Strict protection for virtual function calls in cots c++ binaries.” in Network and Distributed System Security Symposium (NDSS), 2015.
[37] R. Roemer, E. Buchanan, H. Shacham, and S. Savage, “Return-oriented programming: Systems, languages, and applications,” ACM Transactions on Information and System Security (TISSEC), vol. 15, no. 1, p. 2, 2012.
[38] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and T. Holz, “Counterfeit object-oriented programming: On the difficulty of preventing code reuse attacks in C++ applications,” in 2015 IEEE Symposium on Security and Privacy (Oakland). IEEE, 2015, pp. 745–762.
[39] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “SecVisor: A tiny hypervisor to provide lifetime kernel code integrity for commodity OSes,” ACM SIGOPS Operating Systems Review, vol. 41, no. 6, pp. 335–350, 2007.
[40] (2003) Address Space Layout Randomization (ASLR). P. Team. http://pax.grsecurity.net/docs/aslr.txt.
[41] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson, L. Lozano, and G. Pike, “Enforcing forward-edge control-flow integrity in gcc & llvm,” in USENIX Security Symposium, 2014.
[42] H. Vijayakumar, X. Ge, M. Payer, and T. Jaeger, “JIGSAW: Protecting resource access by inferring programmer expectations,” in 23rd USENIX Security Symposium (USENIX Security), 2014, pp. 973–988.
[43] C. Zhang, S. A. Carr, T. Li, Y. Ding, C. Song, M. Payer, and D. Song, “VTrust: Regaining trust on virtual calls,” in Network and Distributed System Security Symposium (NDSS), 2016.
[44] C. Zhang, C. Song, K. Z. Chen, Z. Chen, and D. Song, “VTint: Protecting virtual function tables’ integrity.” in Network and Distributed System Security Symposium (NDSS), 2015.