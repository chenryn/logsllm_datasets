### 7.9 +208 -56 -976 -1876 157.4 39.2
- **Data Points**: 7.9, +208, -56, -976, -1876, 157.4, 39.2

### 355.4 +280 -124 -1068 -1465 0.005 0.0008
- **Data Points**: 355.4, +280, -124, -1068, -1465, 0.005, 0.0008

### 41.8 +28 -48 -988 -1020 314.7 64.5
- **Data Points**: 41.8, +28, -48, -988, -1020, 314.7, 64.5

### 35.4 +244 -52 -992 -1592 201.2 41.7
- **Data Points**: 35.4, +244, -52, -992, -1592, 201.2, 41.7

### 49.9 +256 +52 -848 -972 0.09 0.008
- **Data Points**: 49.9, +256, +52, -848, -972, 0.09, 0.008

### 29.7
- **Data Point**: 29.7

### 70 +428 -48 -992 -1824 74.2
- **Data Points**: 70, +428, -48, -992, -1824, 74.2

### 37.9 +112 +12 -924 -984 0.12
- **Data Points**: 37.9, +112, +12, -924, -984, 0.12

### 0.02
- **Data Point**: 0.02

### 21.5 +316 -52 -946 -1824 302.9 100.7
- **Data Points**: 21.5, +316, -52, -946, -1824, 302.9, 100.7

### 38.3 +60 -28 -928 -1012 0.11
- **Data Points**: 38.3, +60, -28, -928, -1012, 0.11

### 0.02
- **Data Point**: 0.02

### 8.9 +500 -48 -952 -1600 204.6 60.8
- **Data Points**: 8.9, +500, -48, -952, -1600, 204.6, 60.8

### 21.7 +280 -52 -968 -2000 333.5 101.9
- **Data Points**: 21.7, +280, -52, -968, -2000, 333.5, 101.9

### 14.9 +176 -40 -936 -1044 0.07 0.005
- **Data Points**: 14.9, +176, -40, -936, -1044, 0.07, 0.005

### 20.5 +88 -48 -948 -1328 15.6
- **Data Points**: 20.5, +88, -48, -948, -1328, 15.6

### 12.0 +16 -43 -940 -1001 0.61
- **Data Points**: 12.0, +16, -43, -940, -1001, 0.61

### 7.0
- **Data Point**: 7.0

### 0.02
- **Data Point**: 0.02

### 10800
- **Data Point**: 10800

### 400
- **Data Point**: 400

### 400
- **Data Point**: 400

### 10800
- **Data Point**: 10800

### 400
- **Data Point**: 400

### 400
- **Data Point**: 400

### 10800
- **Data Point**: 10800

### 400
- **Data Point**: 400

### 10800
- **Data Point**: 10800

### 400
- **Data Point**: 400

### 10800
- **Data Point**: 10800

### 400
- **Data Point**: 400

### 10800
- **Data Point**: 10800

### 10800
- **Data Point**: 10800

### 10800
- **Data Point**: 10800

### 4 Correcting Cyclic Timing Error
Having observed and quantified the cyclic timing error, we set out to devise a method for correcting it. The basetime is related to the time at which the router started, and router restarts in production networks are relatively rare events. Therefore, correct basetime information could be determined out-of-band via the router’s management interface (e.g., SNMP or the command line). However, this method has two disadvantages:
1. It requires the management interface of the router to be accessible to the measurement infrastructure, which is not always desirable.
2. Static out-of-band basetime determination ignores the drift of the real-time clock, which is included in each flow timestamp; this error would then need to be corrected in any event.

Therefore, we focused on generating a corrected basetime by estimating the true basetime from the derived basetime information. Our first attempt involved a simple robust maximum detector. The primary problem with this method is that it requires a high packet density; otherwise, it tends to "follow" downward-cycling derived basetimes into the cyclic error band. The problem also initially appeared to be suited to simple linear regression, but the widely variable density of derived basetimes within the cyclic error band ruled this method out.

We settled on a correction mechanism based on sliding density windows. Recalling the density diagram in Figure 2, we first take the set of derived basetimes for a specified "horizontal" (export time) interval, called the correction interval. We then slide a one-second "vertical" (derived basetime) interval over the correction interval and select the position for this interval that maximizes the derived basetime density within the rectangular correction window. The top (maximum derived basetime) of this window is then taken to be the corrected basetime. For source 513 on router A, the corrected basetime is shown as the top line in Figure 2.

### Data Points
- **400s**
- **800s**
- **10800s**
- **-800**
- **-1000**
- **-1200**
- **-1400**
- **-1600**
- **-1800**
- **-2000**
- **-2200**
- **-2400**

### Time [hours]
- **60**
- **61**
- **62**
- **63**
- **64**
- **65**
- **66**

### Packet Count
- **16000**
- **14000**
- **12000**
- **10000**
- **8000**
- **6000**
- **4000**
- **2000**

### Offset from Maximum Density [ms]
- **-1000**
- **-500**
- **0**
- **500**
- **1000**

### Figure 3. Illustrating Density-Window Basetime Correction
- **(a) Stability of corrected basetime varies with correction interval size**
- **(b) Density distributions within the correction window vary over time**

The correction interval is selected based on the density of derived basetimes for a given source, which is dependent on the traffic volume. In principle, it should be chosen to observe at least several wraparounds of the cyclic error. Figure 3(a) shows the effect of different correction intervals on the corrected basetime series, observing the effects of three different windows on correcting the relatively low-density source 0 of router C. Generally, longer correction intervals provide more stable and accurate corrections but require more processing and lead to longer delays in reporting corrected times during stream processing. For this study, we selected a 400-second window for higher density sources and a 10800-second (three-hour) window for lower density sources.

Figure 3(b) illustrates how this correction method works in the presence of variable density of derived basetimes. Here, we show the derived basetime density as a function of the position of the vertical interval for three different correction windows. Even though the density distributions differ greatly, the method leads to the same basetime correction.

### 4.1 Evaluation
To measure the effective accuracy of the cyclic error correction method, we compared exported flow timestamps to known flow timing. We placed a traffic-generating host on the measured network to send single-packet UDP flows to known hosts outside the network, chosen such that these flows would be routed across a known source on a known router in our collection infrastructure. We saved the injection time for each flow key and compared this to the timestamps on the flows exported via NetFlow, both with uncorrected derived basetimes and basetimes corrected using the method described above.

The CDF of the deviation from known timing of per-flow timestamps over 30 hours of data over 3-4 September 2010 for source 513 on router A are shown in Figure 4(a).

### Figure 4. Corrected and Uncorrected Flow Start Times
- **(a) Cisco**
- **(b) softflowd**

Here, we see that the flow timestamps calculated from uncorrected basetimes exhibit a uniform deviation of about 1s, caused mainly by the cyclic error in the basetime. If the cyclic error were the only remaining error in the data, we would expect the flow timestamps calculated using the corrected basetimes to exhibit no more than a few milliseconds of error to account for the one-way delay between the source and the router at which the flows were measured.

We see this in the softflowd data, as shown in 4(b). This demonstrates that our cyclic error correction method can completely eliminate the timing error introduced by the design of the NetFlow v9 protocol. However, even after applying corrected basetimes, there is an additional source of about 70ms of uniformly distributed error on Cisco routers. Further investigation shows this to be constant across sources and routers and independent of time, load, or other factors measured in this work. Therefore, we conclude that this error is implementation-specific and an unavoidable property of the packet or flow handling of this specific implementation, either within the metering process or between the metering and exporting processes.

### 5 Related Work
The question of the fidelity of data used in Internet measurement studies is well-addressed in the literature. The effects of sampling of packets (e.g., as in [4]) as well as flows (e.g., as in [5]) have been widely studied. However, these works tend to be theoretical, focusing more on the mathematical properties of the techniques used and the essential trade-off between overhead and utility than on the effects of specific implementations or protocols used in the collection of the data.

Sommer and Feldmann [6] examined the information loss associated with flow measurement as opposed to directly operating on packet data and found that for one particular application, TCP connection summary generation, flow data suffices "[using] large enough time intervals": an acknowledgment of the impact that flow timeouts and timing in general have on later analysis.

Paxson [7], in establishing a set of best practices for Internet measurement studies, classifies sources of error into precision, accuracy, and misconception. It discusses timing precision and accuracy and the need to consider and calibrate for measurement infrastructure-induced errors in source data sets. It advocates the export of metadata along with source data for measurement studies, a call we reiterate in our conclusions.

A closer antecedent for the present work is Cunha et al. [8], which provides a similar study of largely implementation-related artifacts in flow data produced by Juniper routers, which generated commonly-used datasets from Abilene and GEANT. These artifacts were related to timeout and flow cache expiry and had a destructive impact on the distribution of flow duration.

The IETF addressed various design issues with NetFlow v9 in the specification of the IPFIX protocol [9]. Crucially, IPFIX supports flexible timestamps from second to nanosecond resolution and allows the association of an absolute timestamp with every flow. As it does not mandate the export of potentially inconsistent timestamps in each message, it does not suffer from the cyclic error we present in this work. However, it does not necessarily address other sources of inaccuracy within the implementation of the metering or exporting process.

### 6 Conclusions
In seeking to maximize the timing precision available from data exported via Cisco NetFlow v9, we discovered and quantified a cyclic source of up to one second of error in flow timestamps, inherent in the design of the protocol. Correcting this cyclic error can improve the accuracy of NetFlow v9 data to millisecond-level. However, inaccuracy remains within the examined Cisco implementation, which we do not have sufficient information to correct, limiting our effective correction for our production dataset to one order of magnitude, for about 70ms accuracy.

The set of routers from which we receive NetFlow v9 data represents an admittedly small sample of deployed implementations. However, the cyclic error is a protocol issue and is therefore implementation-independent, and should affect NetFlow v9 export from any vendor. We note that an implementation built with an awareness of the cyclic error could avoid it by faking the system uptime and/or export timestamps to export real basetimes, but we did not observe this behavior in any examined NetFlow implementation.

In addition, we presume that similarities in NetFlow v9 metering and export process implementations could lead to implementation-specific sources of error similar to those we observed on Cisco devices in implementations from other vendors. These measurements are an area for future work. The guidance to take from our work in any case is this: researchers using NetFlow v9 data sets should not assume better than second-level accuracy unless employing a method for correcting cyclic basetime error such as the one we present here and should measure the residual error specific to their metering and exporting processes.

In this work, we were able to observe and correct timing error from the NetFlow v9 export packet headers, which is not apparent from an examination of flow data alone. This leads us to reiterate the call in [7] to export and maintain implementation-specific metadata alongside flow data used for research. Our experience in this work additionally indicates the wisdom of keeping measurement data in as "raw" a form as possible. While all flow data is theoretically the same and should be freely convertible among formats, this is not the case in practice: as we have shown, implementation matters.

### Acknowledgments
The authors would like to acknowledge SWITCH for providing the data used in this study. Thanks as well to the European Commission for its material support of this work through the DEMONS project (FP7-257315).

### References
1. Claise, B., Sadasivan, G., Valluri, V., Djernaes, M.: Cisco Systems NetFlow Services Export Version 9. RFC 3954 (Informational) (October 2004)
2. Trammell, B., Boschi, E.: Bidirectional Flow Export Using IP Flow Information Export (IPFIX). RFC 5103 (Proposed Standard) (January 2008)
3. Sadasivan, G., Brownlee, N., Claise, B., Quittek, J.: Architecture for IP Flow Information Export. RFC 5470 (Informational) (March 2009)
4. Brauckhoff, D., Salamatian, K., May, M.: A signal processing view on packet sampling and anomaly detection. In: Proceedings of INFOCOM 2010, San Diego, California, USA, pp. 713–721. IEEE, Los Alamitos (2010)
5. Choi, B.Y., Bhattacharyya, S.: Observations on Cisco sampled NetFlow. SIGMETRICS Perform. Eval. Rev. 33, 18–23 (2005)
6. Sommer, R., Feldmann, A.: NetFlow: information loss or win? In: Proceedings of IMW 2002, Marseille, France, pp. 173–174. ACM, New York (2002)
7. Paxson, V.: Strategies for sound internet measurement. In: Proceedings of IMC 2004, Taormina, Sicily, Italy, pp. 263–271. ACM, New York (2004)
8. Cunha, Í., Silveira, F., Oliveira, R., Teixeira, R., Diot, C.: Uncovering artifacts of flow measurement tools. In: Moon, S.B., Teixeira, R., Uhlig, S. (eds.) PAM 2009. LNCS, vol. 5448, pp. 187–196. Springer, Heidelberg (2009)
9. Claise, B.: Specification of the IP Flow Information Export (IPFIX) Protocol for the Exchange of IP Traffic Flow Information. RFC 5101 (Proposed Standard) (January 2008)