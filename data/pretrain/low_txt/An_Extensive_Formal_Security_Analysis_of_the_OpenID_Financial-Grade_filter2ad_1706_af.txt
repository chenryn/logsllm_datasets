### Integrity and Security Properties in FAPI

Integrity, along with other security properties, has been central to OAuth 2.0 and OpenID Connect [6], [7]. However, the Financial-grade API (FAPI) is designed to meet these properties under more robust adversarial conditions, utilizing various OAuth extensions. While our formulations of these properties are inspired by those for OAuth 2.0 and OpenID Connect, they have been adapted and extended for FAPI to address new requirements, such as the behavior of resource servers, which were not previously modeled. We also present our main theorem.

### Overview of Security Properties

We provide an overview of each security property, with a detailed explanation and formal definition for the authorization property. A proof sketch for the authorization property is included in Appendix D, while full details and proofs of all properties are available in our technical report [25].

#### 1. Authorization

**Informal Definition:**
For authorization, we require that an attacker cannot access resources belonging to an honest user (browser). More precisely, in any run \(\rho\) of a FAPI web system, if an honest resource server receives an access token associated with an honest client, an honest authorization server, and an honest user's identity, then the corresponding resource should not be accessible to the attacker in any way. This includes both direct access at the resource server and indirect access through a client.

**Formal Definitions:**

- **Definition 1 (Access Token Association):**
  Let \(c\) be a client with a client ID \(clientId\) issued by the authorization server \(as\), and let \(id \in ID_{as}\), where \(ID_{as}\) denotes the set of identities managed by \(as\). An access token \(t\) is associated with \(c\), \(as\), and \(id\) in state \(S\) of the configuration \((S, E, N)\) of a run \(\rho\) of a FAPI web system, if there exists a sequence \(s \in S(as).accessTokens\) such that:
  - \(s \equiv (id, clientId, t, r)\)
  - \(s \equiv (MTLS, id, clientId, t, key, rw)\)
  - \(s \equiv (OAUTB, id, clientId, t, key', rw)\)
  for some keys \(key\) and \(key'\).

  Intuitively, an access token \(t\) is associated with a client \(c\), authorization server \(as\), and user identity \(id\) if \(t\) was created by \(as\) for \(c\) and \(id\).

- **Definition 2 (Authorization Property):**
  The FAPI web system with a network attacker is secure with respect to authorization if, for every run \(\rho\) of the FAPI, every configuration \((S, E, N)\) in \(\rho\), every honest authorization server \(as \in AS\), every honest identity \(id \in ID_{as}\), every honest client \(c \in C\) with client ID \(clientId\) issued by \(as\), every honest resource server \(rs \in RS\) handling \(id\), and every access token \(t\) associated with \(c\), \(as\), and \(id\), it holds that:
  - If a resource access nonce \(r \in srs.wNonce[id]\) is contained in a response to a request \(m\) sent to \(rs\) with \(t \equiv m.header[Authorization]\), then \(r\) is not derivable from the attacker's knowledge in \(S\).

  In simpler terms, the authorization property ensures that if an honest resource server receives an access token associated with a client, authorization server, and user identity, the corresponding resource access is not provided to the attacker. Access to resources is modeled using nonces called resource access nonces. For each user identity, there are nonces representing read and write access. When a resource server receives an access token associated with a user from a client, it returns one of the resource access nonces to the client, which forwards it to the user's browser. The security property requires that the attacker does not obtain such a resource access nonce, ensuring no direct or indirect access to the resource.

  **Honest Participants:**
  - The authorization server, client, and resource server must be honest.
  - If any of these participants are controlled by the attacker, the attacker can trivially access the resources.

#### 2. Authentication

**Informal Definition:**
The authentication property states that an attacker should not be able to log in at a client under the identity of an honest user. More formally, in all runs \(\rho\) of a FAPI web system, if a client considers an honest user (browser) whose ID is governed by an honest authorization server to be logged in (indicated by a service token), then the adversary cannot obtain the service token.

#### 3. Session Integrity

**Session Integrity for Authorization for Web Server Clients with OAUTB:**
This property ensures that for all runs \(\rho\) of a FAPI web system, if an honest user can access the resource of some identity \(u\) (registered at AS \(as\)) through the honest web server client \(c\) using OAUTB, then:
1. The user started the flow at \(c\).
2. If \(as\) is honest, the user authenticated at \(as\) using the identity \(u\).

**Session Integrity for Authentication for Web Server Clients with OAUTB:**
Similarly, this property states that for all runs \(\rho\) of a FAPI web system, if an honest user is logged in at the honest client \(c\) under some identity \(u\) (registered at AS \(as\)), with \(c\) being a web server client using OAUTB, then:
1. The user started the flow at \(c\).
2. If \(as\) is honest, the user authenticated at \(as\) using the identity \(u\).

**Combined Session Integrity for Web Server Clients with OAUTB:**
This is the conjunction of the two session integrity properties.

### Main Theorem

**Theorem 1:**
Let FAPI be a FAPI web system with a network attacker. Then, FAPI is secure with respect to authorization and authentication. Furthermore, FAPI is secure with respect to session integrity for web server clients with OAUTB.

**Challenges:**
The FAPI web systems are designed to withstand strong attackers, which would break plain OAuth 2.0 and OpenID Connect. The various OAuth 2.0 security extensions used and combined in different ways in FAPI, which have not been formally analyzed before, make the proof challenging.

### Conclusion

In this paper, we performed the first formal analysis of an Open Banking API, specifically the OpenID Financial-grade API. Using the Web Infrastructure Model, we built a comprehensive model including all protocol participants (clients, authorization servers, and resource servers) and all important options in the FAPI. We defined precise security properties for the FAPI, including authorization, authentication, and session integrity. During the proof process, we identified several vulnerabilities and developed fixes, formally verifying the security of the fixed OpenID FAPI.

This work is significant due to the wide industry support for FAPI and its potential as a leading standard in open banking APIs. Financial-grade applications demand high security, making a thorough formal security analysis essential. Our work also provides the first analysis of various OAuth security extensions, including PKCE, OAuth mTLS, OAUTB, JARM, and JWS Client Assertions.

### Acknowledgements

This work was partially supported by Deutsche Forschungsgemeinschaft (DFG) through Grant KU 1434/10-2.

### References

[1] “Blurred Lines: How FinTech Is Shaping Financial Services,” 2016. PwC Global Fin-Tech Report.

[2] European Union, “DIRECTIVE (EU) 2015/2366 OF THE EUROPEAN PARLIAMENT AND OF THE COUNCIL.” https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:32015L2366&from=DE.

[3] S. T. Mnuchin and C. S. Phillips, “A Financial System That Creates Economic Opportunities – Nonbank Financials, Fintech, and Innovation.” https://home.treasury.gov/sites/default/files/2018-08/A-Financial-System-that-Creates-Economic-Opportunities---Nonbank-Financials-Fintech-and-Innovation_0.pdf.

[4] M. Leszcz, “The UK Open Banking Implementation Entity Adopts the OpenID Foundation Financial-Grade API (FAPI) Specification & Certification Program.” https://openid.net/2018/07/12/the-uk-open-banking-implementation-entity-adopts-the-openid-foundation-financial-grade-api-fapi-specification-certification-program/.

[5] OpenID Financial-grade API Working Group, “OpenID Foundation Financial-grade API (FAPI).” Aug. 23, 2018. https://bitbucket.org/openid/fapi/src/ceb0f829bc532e9c540efaa94f6f96d007371ca2/.

[6] D. Fett, R. Küsters, and G. Schmitz, “A Comprehensive Formal Security Analysis of OAuth 2.0,” in Proceedings of the 23nd ACM SIGSAC Conference on Computer and Communications Security (CCS 2016), pp. 1204–1215, ACM, 2016.

[7] D. Fett, R. Küsters, and G. Schmitz, “The Web SSO Standard OpenID Connect: In-Depth Formal Security Analysis and Security Guidelines,” in IEEE 30th Computer Security Foundations Symposium (CSF 2017), IEEE Computer Society, 2017.

[8] A. Kumar, “Using automated model analysis for reasoning about security of web protocols,” in Proceedings of the 28th Annual Computer Security Applications Conference on - ACSAC’12, Association for Computing Machinery (ACM), 2012.

[9] C. Bansal, K. Bhargavan, and S. Maffeis, “Discovering Concrete Attacks on Website Authorization by Formal Analysis,” in 25th IEEE Computer Security Foundations Symposium, CSF 2012 (S. Chong, ed.), pp. 247–262, IEEE Computer Society, 2012.

[10] C. Bansal, K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis, “Discovering Concrete Attacks on Website Authorization by Formal Analysis,” Journal of Computer Security, vol. 22, no. 4, pp. 601–657, 2014.

[11] R. Wang, Y. Zhou, S. Chen, S. Qadeer, D. Evans, and Y. Gurevich, “Explicating SDKs: Uncovering Assumptions Underlying Secure Authentication and Authorization,” in Proceedings of the 22th USENIX Security Symposium, Washington, DC, USA, August 14-16, 2013, pp. 399–314, USENIX Association, 2013.

[12] S. Pai, Y. Sharma, S. Kumar, R. M. Pai, and S. Singh, “Formal Verification of OAuth 2.0 Using Alloy Framework,” in CSNT ’11 Proceedings of the 2011 International Conference on Communication Systems and Network Technologies, pp. 655–659, Proceedings of the International Conference on Communication Systems and Network Technologies, 2011.

[13] S. Chari, C. S. Jutla, and A. Roy, “Universally Composable Security Analysis of OAuth v2.0,” IACR Cryptology ePrint Archive, vol. 2011, p. 526, 2011.

[14] S.-T. Sun and K. Beznosov, “The Devil is in the (Implementation) Details: An Empirical Analysis of OAuth SSO Systems,” in ACM Conference on Computer and Communications Security, CCS’12 (T. Yu, G. Danezis, and V. D. Gligor, eds.), pp. 378–390, ACM, 2012.

[15] W. Li and C. J. Mitchell, “Security issues in OAuth 2.0 SSO implementations,” in Information Security - 17th International Conference, ISC 2014, Hong Kong, China, October 12-14, 2014. Proceedings, pp. 529–541, 2014.

[16] R. Yang, G. Li, W. C. Lau, K. Zhang, and P. Hu, “Model-based Security Testing: An Empirical Study on OAuth 2.0 Implementations,” in Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security, AsiaCCS 2016, Xi’an, China, May 30 - June 3, 2016, pp. 651–662, ACM, 2016.

[17] E. Shernan, H. Carter, D. Tian, P. Traynor, and K. R. B. Butler, “More Guidelines Than Rules: CSRF Vulnerabilities from Noncompliant OAuth 2.0 Implementations,” in Detection of Intrusions and Malware, and Vulnerability Assessment - 12th International Conference, DIMVA 2015, Milan, Italy, July 9-10, 2015, Proceedings, vol. 9148 of Lecture Notes