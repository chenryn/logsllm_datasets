### Specific, Application-Aware Filters Expressed as Programs

Specific, application-aware filters are expressed as programs in a simple language. These programs closely mirror the state of the protected service, enabling more intelligent content filtering compared to simplistic payload string matching.

### HoneyStat: Virtual Machine-Based Detection

HoneyStat [13] runs sacrificial services within a virtual machine and monitors memory, disk, and network events to detect abnormal behavior. For certain types of attacks, such as buffer overflows, this method can generate highly accurate alerts with relatively few false positives and can detect zero-day worms. Although HoneyStat primarily protects against scanning worms, "active honeypot" techniques [58] can be employed to make it more difficult for automated attackers to differentiate between HoneyStats and real servers.

### Internet Motion Sensor: Distributed Blackhole Monitoring

The Internet Motion Sensor [9] is a distributed blackhole monitoring system designed to measure, characterize, and track Internet-based threats, including worms. Reference [12] explores various options for locating honeypots and correlating their findings, and their impact on the speed and accuracy of detecting worms and other attacks.

### Honeypots with Instrumented Software Services

Reference [35] proposes using honeypots with instrumented versions of software services to be protected, coupled with an automated patch-generation facility. This allows for quick (less than one minute) fixing of buffer overflow vulnerabilities, even against zero-day worms, but relies on the scanning behavior of worms.

### Buffer Overflow Payload Detection

Toth and Kruegel [48] propose a method to detect buffer overflow payloads, including previously unseen ones, by treating inputs received over the network as code fragments. They demonstrate that legitimate requests will contain relatively short sequences of valid x86 instruction opcodes, whereas attacks will contain long sequences. This mechanism is integrated into the Apache web server, resulting in a small performance degradation.

### HACQIT Architecture: Anomaly Detection and Response

The HACQIT architecture [16, 31, 29, 30] uses various sensors to detect new types of attacks against secure servers, which are accessed by a limited number of users at a time. Any deviation from expected or known behavior results in the potentially compromised server being taken offline. A sandboxed instance of the server is used for "clean room" analysis, comparing outputs from two different implementations of the service (e.g., Microsoft IIS and Apache web servers). Machine-learning techniques generalize attack features from observed instances, and content-based filtering is then applied either at the firewall or the end host to block inputs that may have resulted in attacks. The infected servers are subsequently restarted. Due to the feature-generalization approach, trivial variants of the attack are also caught by the filter.

### Network-Based Application Recognition (NBAR)

Cisco's Network-Based Application Recognition (NBAR) [2] allows routers to block TCP sessions based on the presence of specific strings in the TCP stream. This feature was used to block CodeRed probes without affecting regular web-server access. Porras et al. [27] argue that hybrid defenses using complementary techniques (such as connection throttling at the domain gateway and a peer-based coordination mechanism) can be much more effective against a wide variety of worms.

### DOMINO: Cooperative Intrusion Detection

DOMINO [57] is an overlay system for cooperative intrusion detection. The system is organized in two layers: a small core of trusted nodes and a larger collection of nodes connected to the core. Experimental analysis shows that a coordinated approach can provide early warning for large-scale attacks while reducing potential false alarms. Reference [59] describes an architecture and models for an early warning system where participating nodes/routers propagate alarm reports to a centralized site for analysis. The response to alerts is not addressed, and, similar to DOMINO, the use of a centralized collection and analysis facility is vulnerable to worms attacking the early warning infrastructure.

### Hardware-Based Solutions for Control-Transfer Attacks

Suh et al. [44] propose a hardware-based solution to thwart control-transfer attacks and restrict executable instructions by monitoring "tainted" input data. The operating system identifies tainted data, and if the processor detects the use of this data as a jump address or an executed instruction, it raises an exception. The authors do not address the issue of recovering program execution and suggest the immediate termination of the offending process. DIRA [37] is a technique for automatic detection, identification, and repair of control-hijacking attacks. This solution is implemented as a GCC compiler extension that adds heavy instrumentation to a program's source code, ensuring that corruption of state can be detected if control-sensitive data structures are overwritten. Unfortunately, the performance implications make it unsuitable as a front-line defense mechanism.

### Safe Execution Environment (SEE)

The Safe Execution Environment (SEE) [45] allows users to deploy and test untrusted software without fear of damaging their system. This is achieved by creating a virtual environment where the software has read access to real data, but all writes are local to the virtual environment. Users can inspect these changes and decide whether to commit them. We envision using this technique for unrolling the effects of filesystem changes in our system as part of our future work plans. A similar proposal [21] is presented for executing untrusted Java applets in a safe "playground" isolated from the user’s environment.

### Conclusion

We have described a novel approach to dealing with zero-day attacks by combining features found today in honeypots and anomaly detection systems. The main advantage of this architecture is providing system designers the ability to fine-tune systems with impunity, as any false positives (legitimate traffic) will be filtered by the underlying components. We have implemented this approach in an architecture called Shadow Honeypots, which employs an array of anomaly detectors to monitor and classify all traffic to a protected network. Traffic deemed anomalous is processed by a shadow honeypot, a protected, instrumented instance of the application we are trying to protect. Attacks against the shadow honeypot are detected and caught before they infect the state of the protected application. This enables the system to implement policies that trade off between performance and risk, retaining the capability to re-evaluate this trade-off effortlessly.

Preliminary performance experiments indicate that despite the considerable cost of processing suspicious traffic on our Shadow Honeypots and the overhead imposed by instrumentation, our system is capable of sustaining the overall workload of protecting services such as a web server farm and vulnerable web browsers. In the future, we expect to minimize the impact on performance by reducing the rate of false positives and tuning the AD heuristics using a feedback loop with the shadow honeypot. Our plans for future work also include evaluating different components and extending the performance evaluation.

### Acknowledgments

The work of K. Anagnostakis, P. Akritidis, K. Xinidis, and E. Markatos was supported in part by the GSRT project EAR (USA-022) funded by the Greek Secretariat for Research and Technology and by the IST project NoAH (011923) funded by the European Union. P. Akritidis and E. Markatos are also with the University of Crete.

### References

[1] i-Bench. http://www.veritest.com/benchmarks/i-bench/default.asp.
[2] Using Network-Based Application Recognition and Access Control Lists for Blocking the “Code Red” Worm at Network Ingress Points. Technical report, Cisco Systems, Inc.
[3] CERT Advisory CA-2001-19: ‘Code Red’ Worm Exploiting Buffer Overflow in IIS Indexing Service DLL. http://www.cert.org/advisories/CA-2001-19.html, July 2001.
[4] ApacheBench: A complete benchmarking and regression testing suite. http://freshmeat.net/projects/apachebench/, July 2003.
[5] CERT Advisory CA-2003-04: MS-SQL Server Worm. http://www.cert.org/advisories/CA-2003-04.html, January 2003.
[6] Microsoft Security Bulletin MS04-028: Buffer Overrun in JPEG Processing Could Allow Code Execution. http://www.microsoft.com/technet/security/bulletin/MS04-028.mspx, September 2004.
[7] US-CERT Technical Cyber Security Alert TA04-217A: Multiple Vulnerabilities in libpng. http://www.us-cert.gov/cas/techalerts/TA04-217A.html, August 2004.
[8] P. Akritidis, K. Anagnostakis, and E. P. Markatos. Efficient content-based fingerprinting of zero-day worms. In Proceedings of the IEEE International Conference on Communications (ICC), May 2005.
[9] M. Bailey, E. Cooke, F. Jahanian, J. Nazario, and D. Watson. The Internet Motion Sensor: A Distributed Blackhole Monitoring System. In Proceedings of the 12th ISOC Symposium on Network and Distributed Systems Security (SNDSS), pages 167–179, February 2005.
[10] M. Bhattacharyya, M. G. Schultz, E. Eskin, S. Hershkop, and S. J. Stolfo. MET: An Experimental System for Malicious Email Tracking. In Proceedings of the New Security Paradigms Workshop (NSPW), pages 1–12, September 2002.
[11] C. Clark, W. Lee, D. Schimmel, D. Contis, M. Kone, and A. Thomas. A Hardware Platform for Network Intrusion Detection and Prevention. In Proceedings of the 3rd Workshop on Network Processors and Applications (NP3), February 2004.
[12] E. Cook, M. Bailey, Z. M. Mao, and D. McPherson. Toward Understanding Distributed Blackhole Placement. In Proceedings of the ACM Workshop on Rapid Malcode (WORM), pages 54–64, October 2004.
[13] D. Dagon, X. Qin, G. Gu, W. Lee, J. Grizzard, J. Levine, and H. Owen. HoneyStat: Local Worm Detection Using Honeypots. In Proceedings of the 7th International Symposium on Recent Advances in Intrusion Detection (RAID), pages 39–58, October 2004.
[14] E. N. Elnozahy, L. Alvisi, Y.-M. Wang, and D. B. Johnson. A survey of rollback-recovery protocols in message-passing systems. ACM Comput. Surv., 34(3):375–408, 2002.
[15] J. Jung, V. Paxson, A. W. Berger, and H. Balakrishnan. Fast Portscan Detection Using Sequential Hypothesis Testing. In Proceedings of the IEEE Symposium on Security and Privacy, May 2004.
[16] J. E. Just, L. A. Clough, M. Danforth, K. N. Levitt, R. Maglich, J. C. Reynolds, and J. Rowe. Learning Unknown Attacks – A Start. In Proceedings of the 5th International Symposium on Recent Advances in Intrusion Detection (RAID), October 2002.
[17] H. Kim and B. Karp. Autograph: Toward Automated, Distributed Worm Signature Detection. In Proceedings of the 13th USENIX Security Symposium, pages 271–286, August 2004.
[18] C. Kruegel, F. Valeur, G. Vigna, and R. Kemmerer. Stateful Intrusion Detection for High-Speed Networks. In Proceedings of the IEEE Symposium on Security and Privacy, pages 285–294, May 2002.
[19] C. Kruegel and G. Vigna. Anomaly Detection of Web-based Attacks. In Proceedings of the 10th ACM Conference on Computer and Communications Security (CCS), pages 251–261, October 2003.
[20] J. G. Levine, J. B. Grizzard, and H. L. Owen. Using Honeynets to Protect Large Enterprise Networks. IEEE Security & Privacy, 2(6):73–75, November/December 2004.
[21] D. Malkhi and M. K. Reiter. Secure execution of java applets using a remote playground. IEEE Trans. Softw. Eng., 26(12):1197–1209, 2000.
[22] A. J. Malton. The Denotational Semantics of a Functional Tree-Manipulation Language. Computer Languages, 19(3):157–168, 1993.
[23] D. Moore, C. Shannon, G. Voelker, and S. Savage. Internet Quarantine: Requirements for Containing Self-Propagating Code. In Proceedings of the IEEE Infocom Conference, April 2003.
[24] J. Newsome and D. Dong. Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software. In Proceedings of the 12th ISOC Symposium on Network and Distributed System Security (SNDSS), pages 221–237, February 2005.
[25] A. Pasupulati, J. Coit, K. Levitt, S. F. Wu, S. H. Li, J. C. Kuo, and K. P. Fan. Buttercup: On Network-based Detection of Polymorphic Buffer Overflow Vulnerabilities. In Proceedings of the Network Operations and Management Symposium (NOMS), pages 235–248, vol. 1, April 2004.
[26] J. Pincus and B. Baker. Beyond Stack Smashing: Recent Advances in Exploiting Buffer Overflows. IEEE Security & Privacy, 2(4):20–27, July/August 2004.
[27] P. Porras, L. Briesemeister, K. Levitt, J. Rowe, and Y.-C. A. Ting. A Hybrid Quarantine Defense. In Proceedings of the ACM Workshop on Rapid Malcode (WORM), pages 73–82, October 2004.
[28] N. Provos. A Virtual Honeypot Framework. In Proceedings of the 13th USENIX Security Symposium, pages 1–14, August 2004.
[29] J. Reynolds, J. Just, E. Lawson, L. Clough, and R. Maglich. Online Intrusion Protection by Detecting Attacks with Diversity. In Proceedings of the 16th Annual IFIP 11.3 Working Conference on Data and Application Security Conference, April 2002.
[30] J. C. Reynolds, J. Just, L. Clough, and R. Maglich. On-Line Intrusion Detection and Attack Prevention Using Diversity, Generate-and-Test, and Generalization. In Proceedings of the 36th Annual Hawaii International Conference on System Sciences (HICSS), January 2003.
[31] J. C. Reynolds, J. Just, E. Lawson, L. Clough, and R. Maglich. The Design and Implementation of an Intrusion Tolerant System. In Proceedings of the International Conference on Dependable Systems and Networks (DSN), June 2002.
[32] M. Roesch. Snort: Lightweight intrusion detection for networks. In Proceedings of USENIX LISA, November 1999. (Software available from http://www.snort.org/)
[33] L. Schaelicke, T. Slabach, B. Moore, and C. Freeland. Characterizing the Performance of Network Intrusion Detection Sensors. In Proceedings of Recent Advances in Intrusion Detection (RAID), September 2003.
[35] S. Sidiroglou and A. D. Keromytis. A Network Worm Vaccine Architecture. In Proceedings of the IEEE Workshop on Enterprise Technologies: Infrastructure for Collaborative Enterprises (WET-ICE), Workshop on Enterprise Security, pages 220–225, June 2003.
[36] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated worm fingerprinting. In Proceedings of the 6th Symposium on Operating Systems Design & Implementation (OSDI), December 2004.
[37] A. Smirnov and T. Chiueh. DIRA: Automatic Detection, Identification, and Repair of Control-Hijacking Attacks. In Proceedings of the 12th ISOC Symposium on Network and Distributed System Security (SNDSS), February 2005.
[38] T. Spalink, S. Karlin, L. Peterson, and Y. Gottlieb. Building a Robust Software-Based Router Using Network Processors. In Proceedings of the 18th ACM Symposium on Operating Systems Principles (SOSP), pages 216–229, Chateau Lake Louise, Banff, Alberta, Canada, October 2001.
[39] D. Spinellis. Reliable identification of bounded-length viruses is NP-complete. IEEE Transactions on Information Theory, 49(1):280–284, January 2003.
[40] L. Spitzner. Honeypots: Tracking Hackers. Addison-Wesley, 2003.
[41] S. Staniford. Containment of Scanning Worms in Enterprise Networks. Journal of Computer Security, 2005. (to appear).
[42] S. Staniford, D. Moore, V. Paxson, and N. Weaver. The Top Speed of Flash Worms. In Proceedings of the ACM Workshop on Rapid Malcode (WORM), pages 33–42, October 2004.
[43] S. Staniford, V. Paxson, and N. Weaver. How to Own the Internet in Your Spare Time. In Proceedings of the 11th USENIX Security Symposium, pages 149–167, August 2002.
[44] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas. Secure program execution via dynamic information flow tracking. SIGOPS Operating Systems Review, 38(5):85–96, 2004.
[45] W. Sun, Z. Liang, R. Sekar, and V. N. Venkatakrishnan. One-way Isolation: An Effective Approach for Realizing Safe Execution Environments. In Proceedings of the 12th ISOC Symposium on Network and Distributed Systems Security (SNDSS), pages 265–278, February 2005.
[46] P. Szőr and P. Ferrie. Hunting for Metamorphic. Technical report, Symantec Corporation, June 2003.
[47] Top Layer Networks. http://www.toplayer.com.
[48] T. Tóth and C. Kruegel. Accurate Buffer Overflow Detection via Abstract Payload Execution. In Proceedings of the 5th Symposium on Recent Advances in Intrusion Detection (RAID), October 2002.
[49] T. Tóth and C. Kruegel. Connection-history Based Anomaly Detection. In Proceedings of the IEEE Workshop on Information Assurance and Security, June 2002.
[50] S. Venkataraman, D. Song, P. B. Gibbons, and A. Blum. New Streaming Algorithms for Fast Detection of Superspreaders. In Proceedings of the 12th ISOC Symposium on Network and Distributed Systems Security (SNDSS), pages 149–166, February 2005.
[34] S. E. Schechter, J. Jung, and A. W. Berger. Fast Detection of Scanning Worm Infections. In Proceedings of the 7th International Symposium on Recent Advances in Intrusion Detection (RAID), pages 59–81, October 2004.
[51] G. Vigna, W. Robertson, and D. Balzarotti. Testing Network-based Intrusion Detection Signatures Using Mutant Exploits. In Proceedings of the 11th ACM Conference on Computer and Communications Security (CCS), pages 21–30, October 2004.
[52] H. J. Wang, C. Guo, D. R. Simon, and A. Zugenmaier. Shield: Vulnerability-Driven Network Filters for Preventing Known Vulnerability Exploits. In Proceedings of the ACM SIGCOMM Conference, pages 193–204, August 2004.
[53] K. Wang and S. J. Stolfo. Anomalous Payload-based Network Intrusion Detection. In Proceedings of the 7th International Symposium on Recent Advanced in Intrusion Detection (RAID), pages 201–222, September 2004.
[54] N. Weaver, S. Staniford, and V. Paxson. Very Fast Containment of Scanning Worms. In Proceedings of the 13th USENIX Security Symposium, pages 29–44, August 2004.
[55] D. Whyte, E. Kranakis, and P. van Oorschot. DNS-based Detection of Scanning Worms in an Enterprise Network. In Proceedings of the 12th ISOC Symposium on Network and Distributed Systems Security (SNDSS), pages 181–195, February 2005.
[56] J. Wu, S. Vangala, L. Gao, and K. Kwiat. An Effective Architecture and Algorithm for Detecting Worms with Various Scan Techniques. In Proceedings of the ISOC Symposium on Network and Distributed System Security (SNDSS), pages 143–156, February 2004.
[57] V. Yegneswaran, P. Barford, and S. Jha. Global Intrusion Detection in the DOMINO Overlay System. In Proceedings of the ISOC Symposium on Network and Distributed System Security (SNDSS), February 2004.
[58] V. Yegneswaran, P. Barford, and D. Plonka. On the Design and Use of Internet Sinks for Network Abuse Monitoring. In Proceedings of the 7th International Symposium on Recent Advances in Intrusion Detection (RAID), pages 146–165, October 2004.
[59] C. C. Zou, L. Gao, W. Gong, and D. Towsley. Monitoring and Early Warning for Internet Worms. In Proceedings of the 10th ACM International Conference on Computer and Communications Security (CCS), pages 190–199, October 2003.