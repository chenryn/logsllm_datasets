以下是优化后的参考文献列表，使其更加清晰、连贯和专业：

1. Embleton, S., Sparks, S., & Zou, C. C. (2013). SMM rootkit: A new breed of OS-independent malware. *Security and Communication Networks*, 6(12), 1590–1605.
2. Fletcher, C. W., van Dijk, M., & Devadas, S. (2012). A Secure Processor Architecture for Encrypted Computation on Untrusted Programs. In *Proceedings of the Seventh ACM Workshop on Scalable Trusted Computing* (pp. 3–8). ACM.
3. Goguen, J. A., & Meseguer, J. (1982). Security Policies and Security Models. In *1982 IEEE Symposium on Security and Privacy* (pp. 11–20). Oakland, CA, USA.
4. Grawrock, D. (n.d.). Dynamics of a Trusted Platform: A building block approach. Intel.
5. Hawblitzel, C., Howell, J., Lorch, J. R., Narayan, A., Parno, B., Zhang, D., & Zill, B. (2014). Ironclad Apps: End-to-End Security via Automated Full-System Verification. In *Proceedings of the 11th USENIX Conference on Operating Systems Design and Implementation* (pp. 165–181).
6. Herlihy, M. P., & Wing, J. M. (1990). Linearizability: A Correctness Condition for Concurrent Objects. *ACM Transactions on Programming Languages and Systems*, 12(3), 463–492.
7. Hoekstra, M., Lal, R., Pappachan, P., Phegade, V., & Del Cuvillo, J. (2013). Using Innovative Instructions to Create Trustworthy Software Solutions. In *Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy (HASP)* (Vol. 13).
8. Intel. (n.d.). *Intel Software Guard Extensions Programming Reference*. Available at https://software.intel.com/sites/default/files/329298-001.pdf.
9. Irazoqui, G., Eisenbarth, T., & Sunar, B. (2015). S$A: A Shared Cache Attack That Works across Cores and Defies VM Sandboxing – and Its Application to AES. In *IEEE Symposium on Security and Privacy* (pp. 591–604).
10. Rutkowska, J. (n.d.). Red Pill... or how to detect VMM using (almost) one CPU instruction. GitHub. Retrieved from https://github.com/Cr4sh/ThinkPwn.git.
11. Klein, G., Elphinstone, K., Heiser, G., Andronick, J., Cock, D., Derrin, P., ... Winwood, S. (2009). seL4: Formal Verification of an OS Kernel. In *Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles (SOSP ’09)* (pp. 207–220). New York, USA.
12. Kocher, P. C. (1996). Timing Attacks on Implementations of Diffie-Hellman, RSA, DSS, and Other Systems. In *Proceedings of the 16th Annual International Cryptology Conference on Advances in Cryptology (CRYPTO ’96)* (pp. 104–113). London, UK: Springer-Verlag.
13. Lee, S., Shih, M., Gera, P., Kim, T., Kim, H., & Peinado, M. (2016). Inferring Fine-grained Control Flow Inside SGX Enclaves with Branch Shadowing. *CoRR*, abs/1611.06952.
14. Liu, F., & Lee, R. B. (n.d.). Random Fill Cache Architecture.
15. Leslie-Hurd, R., Caspi, D., & Fernandez, M. (2015). Verifying Linearizability of Intel® Software Guard Extensions. In *Computer Aided Verification - 27th International Conference (CAV 2015)* (pp. 144–160). San Francisco, CA, USA.
16. Li, X., Kashyap, V., Oberg, J. K., Tiwari, M., Rajarathinam, V. R., Kastner, R., ... Chong, F. T. (2014). Sapper: A Language for Hardware-Level Security Policy Enforcement. In *Architectural Support for Programming Languages and Operating Systems (ASPLOS ’14)* (pp. 97–112). Salt Lake City, UT, USA.
17. Li, X., Tiwari, M., Oberg, J., Kashyap, V., Chong, F. T., Sherwood, T., & Hardekopf, B. (2011). Caisson: A Hardware Description Language for Secure Information Flow. In *Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI 2011)* (pp. 109–120). San Jose, CA, USA.
18. Lie, D., Thekkath, C., Mitchell, M., Lincoln, P., Boneh, D., Mitchell, J., & Horowitz, M. (2000). Architectural support for copy and tamper resistant software. *ACM SIGPLAN Notices*, 35(11), 168–177.
19. Liu, F., Ge, Q., Yarom, Y., McKeen, F., Rozas, C., Heiser, G., & Lee, R. B. (2016). CATalyst: Defeating Last-Level Cache Side Channel Attacks in Cloud Computing. In *2016 IEEE International Symposium on High Performance Computer Architecture (HPCA)*.
20. Liu, F., Yarom, Y., Ge, Q., Heiser, G., & Lee, R. B. (2015). Last-Level Cache Side-Channel Attacks Are Practical. In *Proceedings of the 2015 IEEE Symposium on Security and Privacy* (pp. 605–622). Washington, DC, USA.
21. Maas, M., Love, E., Stefanov, E., Tiwari, M., Shi, E., Asanovic, K., ... Song, D. (2013). Phantom: Practical oblivious computation in a secure processor. In *Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security* (pp. 311–324). ACM.
22. McKeen, F., Alexandrovich, I., Berenzon, A., Rozas, C. V., Shafi, H., Shanbhogue, V., & Savagaonkar, U. R. (2013). Innovative Instructions and Software Model for Isolated Execution. *HASP*, 13(10).
23. McLean, J. (1992). Proving Noninterference and Functional Correctness Using Traces. *Journal of Computer Security*, 1, 37–58.
24. Moghimi, A., Irazoqui, G., & Eisenbarth, T. (2015). CacheZoom: How SGX Amplifies the Power of Cache Attacks. *CoRR*, abs/1502.07373.
25. Morrisett, G., Tan, G., Tassarotti, J., Tristan, J., & Gan, E. (2012). RockSalt: Better, Faster, Stronger SFI for the x86. In *ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’12)* (pp. 395–404). Beijing, China.
26. Murray, T., Matichuk, D., Brassil, M., Gammie, P., Bourke, T., Seefried, S., ... Klein, G. (2013). seL4: From General Purpose to a Proof of Information Flow Enforcement. In *Security and Privacy (SP), 2013 IEEE Symposium on* (pp. 415–429). IEEE.
27. Neugschwandtner, M., Platzer, C., Comparetti, P. M., & Bayer, U. (2010). dAnubis - Dynamic Device Driver Analysis Based on Virtual Machine Introspection. In *Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA 2010)* (pp. 41–60). Bonn, Germany.
28. Nipkow, T., Paulson, L. C., & Wenzel, M. (2002). *Isabelle/HOL: A Proof Assistant for Higher-Order Logic* (Vol. 2283). Springer Science & Business Media.
29. Noorman, J., Agten, P., Daniels, W., Strackx, R., Van Herrewege, A., Huygens, C., ... Piessens, F. (2013). Sancus: Low-cost Trustworthy Extensible Networked Devices with a Zero-software Trusted Computing Base. In *Proceedings of the 22Nd USENIX Conference on Security (SEC’13)* (pp. 479–494). Berkeley, CA, USA.
30. Ohrimenko, O., Schuster, F., Fournet, C., Mehta, A., Nowozin, S., Vaswani, K., & Costa, M. (2016). Oblivious Multi-Party Machine Learning on Trusted Processors. In *25th USENIX Security Symposium (USENIX Security 16)* (pp. 619–636). Austin, TX, USA.
31. Oren, Y., Kemerlis, V. P., Sethumadhavan, S., & Keromytis, A. D. (2015). The Spy in the Sandbox: Practical Cache Attacks in JavaScript. *CoRR*, abs/1502.07373.
32. Parno, B., Lorch, J. R., Douceur, J. R., Mickens, J., & McCune, J. M. (2011). Memoir: Practical State Continuity for Protected Modules. In *Proceedings of the 2011 IEEE Symposium on Security and Privacy (SP ’11)* (pp. 379–394). Washington, DC, USA.
33. Pass, R., Shi, E., & Tramèr, F. (2016). Formal Abstractions for Attested Execution Secure Processors. *IACR Cryptology ePrint Archive*, 2016(1027).
34. Patrignani, M., Agten, P., Strackx, R., Jacobs, B., Clarke, D., & Piessens, F. (2015). Secure Compilation to Protected Module Architectures. *ACM Trans. Program. Lang. Syst.*, 37(2), 6:1–6:50.
35. Patrignani, M., & Clarke, D. (2014). Fully Abstract Trace Semantics for Low-level Isolation Mechanisms. In *Symposium on Applied Computing (SAC 2014)* (pp. 1562–1569). Gyeongju, Republic of Korea.
36. Patrignani, M., & Clarke, D. (2015). Fully Abstract Trace Semantics for Protected Module Architectures. *Computer Languages, Systems & Structures*, 42, 22–45.
37. Roscoe, A. W. (1995). CSP and Determinism in Security Modelling. In *Proceedings of the 1995 IEEE Symposium on Security and Privacy* (pp. 114–127). Oakland, California, USA.
38. Rushby, J. M. (1982). Proof of Separability: A Verification Technique for a Class of Security Kernels. In *International Symposium on Programming, 5th Colloquium* (pp. 352–367). Torino, Italy.
39. Rutkowska, J. (n.d.). Security Challenges in Virtualized Environments.
40. Sabelfeld, A., & Myers, A. C. (2003). Language-Based Information-Flow Security. *IEEE Journal on Selected Areas in Communications*, 21(1), 5–19.
41. Schwarz, M., Weiser, S., Gruss, D., Maurice, C., & Mangard, S. (2017). Malware Guard Extension: Using SGX to Conceal Cache Attacks. *CoRR*, abs/1702.08719.
42. Seo, J., Lee, B., Kim, S., Shih, M.-W., Shin, I., Han, D., & Kim, T. (2017). SGX-Shield: Enabling Address Space Layout Randomization for SGX Programs. In *23nd Annual Network and Distributed System Security Symposium (NDSS 2017)*. San Diego, California, USA.
43. Shih, M.-W., Lee, S., Kim, T., & Peinado, M. (2017). T-SGX: Eradicating Controlled-Channel Attacks Against Enclave Programs. In *Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS)*. San Diego, CA, USA.
44. Shinde, S., Chua, Z. L., Narayanan, V., & Saxena, P. (2016). Preventing Page Faults from Telling Your Secrets. In *Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security (AsiaCCS 2016)* (pp. 317–328). Xi’an, China.
45. Sinha, R., Costa, M., Lal, A., Lopes, N. P., Rajamani, S. K., Seshia, S. A., & Vaswani, K. (2016). A Design and Verification Methodology for Secure Isolated Regions. In *Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI 2016)* (pp. 665–681). Santa Barbara, CA, USA.
46. Sinha, R., Rajamani, S. K., Seshia, S. A., & Vaswani, K. (2015). Moat: Verifying Confidentiality of Enclave Programs. In *Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security* (pp. 1169–1184). Denver, CO, USA.
47. Skolem, T. (1967). Logico-combinatorial Investigations in the Satisfiability or Provability of Mathematical Propositions: A Simplified Proof of a Theorem by L. Löwenheim and Generalizations of the Theorem. In *From Frege to Gödel. A Source Book in Mathematical Logic, 1879-1931* (pp. 252–263).
48. Smith, G., & Volpano, D. M. (1998). Secure Information Flow in a Multi-Threaded Imperative Language. In *POPL ’98, Proceedings of the 25th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages* (pp. 355–364). San Diego, CA, USA.
49. Strackx, R., & Piessens, F. (2012). Fides: Selectively Hardening Software Application Components Against Kernel-level or Process-level Malware. In *Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS ’12)* (pp. 2–13). New York, NY, USA.
50. Subramanyan, P., Sinha, R., Lebedev, I., Devadas, S., & Seshia, S. A. (n.d.). Models and Proofs for the Trusted Abstract Platform (TAP), Intel SGX and MIT Sanctum. GitHub. Retrieved from https://github.com/0tcb/TAP.
51. Suh, G. E., Clarke, D., Gassend, B., Van Dijk, M., & Devadas, S. (2003). AEGIS: Architecture for Tamper-Evident and Tamper-Resistant Processing. In *Proceedings of the 17th Annual International Conference on Supercomputing* (pp. 160–171). ACM.
52. Terauchi, T., & Aiken, A. (2005). Secure Information Flow as a Safety Problem. In *Static Analysis Symposium (SAS ’05)* (pp. 352–367). LNCS 3672.
53. Tromer, E., Osvik, D. A., & Shamir, A. (2010). Efficient Cache Attacks on AES, and Countermeasures. *J. Cryptology*, 23(1), 37–71.
54. Vijayaraghavan, M., Chlipala, A., Arvind, & Dave, N. (2015). Modular Deductive Verification of Multiprocessor Hardware Designs. In *Computer Aided Verification - 27th International Conference (CAV 2015)* (pp. 109–127). San Francisco, CA, USA.
55. Volpano, D., Irvine, C., & Smith, G. (1996). A Sound Type System for Secure Flow Analysis. *Journal of Computer Security*, 4(2-3), 167–187.
56. Waterman, A., Lee, Y., Avizienis, R., Patterson, D. A., & Asanović, K. (2016). The RISC-V Instruction Set Manual Volume II: Privileged Architecture Version 1.9.1. Technical Report UCB/EECS-2016-161, EECS Department, University of California, Berkeley.
57. Waterman, A., Lee, Y., Patterson, D. A., & Asanović, K. (2014). The RISC-V Instruction Set Manual, Volume I: User-Level ISA, Version 2.0. Technical Report UCB/EECS-2014-54, EECS Department, University of California, Berkeley.
58. Xu, Y., Cui, W., & Peinado, M. (2015). Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems. In *2015 IEEE Symposium on Security and Privacy (SP 2015)* (pp. 640–656). San Jose, CA, USA.
59. Yarom, Y., & Falkner, K. (2014). FLUSH+RELOAD: A High Resolution, Low Noise, L3 Cache Side-Channel Attack. In *Proceedings of the 23rd USENIX Security Symposium* (pp. 719–732). San Diego, CA, USA.
60. Zhang, D., Wang, Y., Suh, G. E., & Myers, A. C. (2015). A Hardware Design Language for Timing-Sensitive Information-Flow Security. In *Proceedings of the Twentieth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS ’15)* (pp. 503–516). Istanbul, Turkey.

### 符号表

| 符号 | 描述 |
| --- | --- |
| \( \mathbb{N} \) | 自然数。 |
| \( \mathbb{B} \) | 布尔值（\(\mathbb{B} = \{\text{true}, \text{false}\}\)）。 |
| \( \lambda x . \text{expr} \) | 参数为 \( x \) 的函数；计算表达式 \( \text{expr} \)。 |
| \( m[i] \) | 映射 \( m \) 中的第 \( i \) 个元素。 |
| \( \text{ite}(c, x, y) \) | 如果-则-否则操作符：如果 \( c \) 为真，则返回 \( x \)，否则返回 \( y \)。 |
| \( \text{rec.fld} \) | 记录 \( \text{rec} \) 中的字段 \( \text{fld} \)。 |
| \( \text{VA} \) | 虚拟地址。 |
| \( \text{PA} \) | 物理地址。 |
| \( \text{ACL} \) | 虚拟地址的权限（可读/可写/可执行等）。 |
| \( \text{Tag} \) | 缓存标签。 |
| \( \text{Eid} \) | 飞地“ID”的类型（整数/指针）。 |
| \( \text{EM} \) | 飞地元数据类型。 |
| \( \Sigma \) | 所有 TAP 状态的集合。 |
| \( ; \) | TAP 转换关系。 |
| \( \text{init} \) | TAP 初始状态。 |
| \( \sigma, \sigma_0, \sigma_1, \ldots \) | TAP 状态（\( \sigma \in \Sigma \)）。 |
| \( \sigma_i ; \sigma_j \) | 从状态 \( \sigma_i \) 转换到状态 \( \sigma_j \)。 |
| \( \pi, \pi_0, \pi_1, \ldots \) | TAP 的轨迹。 |
| \( \pi[0] \) | 轨迹 \( \pi \) 的初始状态。 |
| \( \pi[i] \) | 轨迹 \( \pi \) 中的第 \( i \) 个状态。 |
| \( \sigma(\text{expr}) \) | 在状态 \( \sigma \) 中评估表达式 \( \text{expr} \)。 |
| \( e, e_1, e_2, \ldots \) | 飞地程序。 |
| \( E_e(\sigma) \) | 平台状态 \( \sigma \) 中飞地 \( e \) 的状态。 |
| \( I_e(\sigma) \) | 平台状态 \( \sigma \) 中飞地 \( e \) 的输入。 |
| \( I_R(e)(\sigma) \) | 飞地 \( e \) 输入中的随机成分。 |
| \( I_U(e)(\sigma) \) | 飞地 \( e \) 输入中的不可信成分。 |
| \( O_e(\sigma) \) | 平台状态 \( \sigma \) 中飞地 \( e \) 的输出。 |
| \( A_e(\sigma) \) | 平台状态 \( \sigma \) 中对手的状态。 |
| \( I_P(\sigma) \) | 平台状态 \( \sigma \) 中的非确定性成分。 |
| \( \mu(e) \) | 飞地 \( e \) 的度量。 |
| \( \llbracket e \rrbracket \) | 飞地 \( e \) 的所有轨迹的集合。 |
| \( \text{m}[v]_{\text{PA}} \) | 虚拟地址 \( v \) 在虚拟到物理映射 \( m \) 中的物理地址。 |
| \( \text{valid}(\text{m}[v]) \) | 虚拟地址 \( v \) 是否在虚拟到物理映射 \( m \) 中映射到某个物理地址？ |
| \( \text{executable}(\text{m}[v]) \) | 虚拟地址 \( v \) 在虚拟到物理映射 \( m \) 中是否有执行权限？ |
| \( \Sigma_L \) | 所有实现状态的集合。 |
| \( ;_L \) | 实现转换关系。 |
| \( \text{init}_L \) | 实现初始状态。 |
| \( s, s_0, s_1, \ldots \) | 实现状态（\( s \in \Sigma_L \)）。 |
| \( s_i ;_L s_j \) | 从状态 \( s_i \) 转换到状态 \( s_j \)。 |
| \( m_1 || m_2 \) | \( m_1 \) 和 \( m_2 \) 的连接。 |
| \( \text{PK}_k \) | 公钥 \( k \)。 |
| \( \text{SK}_k \) | 私钥 \( k \)。 |
| \( \{m\}_{\text{SK}_k} \) | 消息 \( m \) 用密钥 \( \text{SK}_k \) 加密或签名。 |

希望这些改进使您的文本更加清晰、连贯和专业。