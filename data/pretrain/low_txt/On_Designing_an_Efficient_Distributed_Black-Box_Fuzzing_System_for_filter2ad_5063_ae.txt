### 修复情况
受影响的厂商，包括苹果、谷歌、OEM和电信运营商，均已修复了相关问题。这种方法符合负责任的披露最佳实践。

### 存储利用率
#### 3.3.5
表1展示了使用和不使用BSDiff进行1000个PNG文件模糊测试所需的时间对比。

通过牺牲一些存储空间，该方法仅导致轻微的模糊测试速度损失，因为每次模糊测试前都需要对文件进行修补。SFAT选择的小而优质的种子文件也有助于提高效率。在iOS设备上，修补一个包含1000个任务的数据包所需时间不到一分钟。然而，使用BSDiff修补的主要缺点是生成文件补丁时会消耗大量CPU时间和内存[23]。这一问题可以通过在高性能服务器上运行并行线程并在更多相同型号的移动设备上进行测试来缓解。

### 3.4 结果讨论
从我们的实验中发现，预处理模糊输入是一个值得考虑的权衡。在3.2.2小节中提到，花几秒钟进行预处理可以将重复测试的次数减少多达四倍。当然，这只有在处理大量测试用例时才是一个值得关注的问题。使用SFAT最大化RFC覆盖范围也有其优势。如3.2.1小节所述，原本不会导致崩溃的文件经过格式约束内的修改后，在目标设备上因修改后的位而引发崩溃。这只是众多示例中的一个，表明相比于盲目模糊测试，预先智能地构建输入确实能带来显著收益。另一方面，自动下载和分析的种子文件可能无法实现100%的代码覆盖率，如[14]所示。手动插入较少见的字段仍然是必要的。

FEET成功创建了能够产生大量崩溃的模糊任务。结合[11]中提出的黑盒模糊调度技术，可以选择基于较短周期的任务，并根据测量到的崩溃率分配权重以确定后续任务的选择概率。这样，我们可以在比单独使用FEET更快的时间内获得崩溃结果。

为了改进发现的漏洞种类，使用高熵的模糊操作（如位级操作）可能会提供更好的结果，例如zzuf[26]。

多台运行Android 4.0.4系统的设备崩溃数量相似，表明这些漏洞存在于Android AOSP级别，与设备制造商无关。

SOFT客户端对于浏览器可渲染格式的应用仍然不太容易扩展到新平台。对于在Web浏览器中可渲染的文件，移动客户端可以被简化很多。

尽管存储空间呈指数增长，但这种增长在一定程度上减缓了模糊测试的速度。然而，随着更多用户加入模糊测试实验，回报也会增加。

### 4. 相关工作
模糊测试的概念最初由Miller等人于1990年提出[27]。他们的目标是Unix工具。自此之后，许多研究致力于改进模糊测试的方法。然而，虽然移动操作系统基于Unix，但它们并不向普通用户提供命令行工具。随着IT领域的变化，新的数据格式将不断定义，现有的格式也将不断发展，所有这些都需要投入时间和精力来适应生成型模糊测试方法。因此，使用诸如变异比率、置信度指标和变异分布等概率启发式方法的技术，是我们首次尝试为盲模糊测试提供智能的方法之一。

Google[28]拥有足够的空间和资源来建立一个完全受控的模糊测试农场。然而，独立研究人员和小型实验室没有这样的奢侈条件。众包漏洞发现则对远程设备的控制有限。

CERT的BFF[29]是一种自动化系统，用于查找Linux和Mac OS X平台上运行的应用程序中的缺陷。它还集成了名为CERT Triage Tools的工具，该工具按严重性分类崩溃。BFF在同一系统上对其自身运行的应用程序进行模糊测试。它是单个程序的突变模糊器，使用一组种子文件和一系列变异比率进行模糊测试。它使用Multi-Armed-Bandit算法[32]在模糊测试活动中选择最佳的种子-比率对。由于共享空间，协调模糊测试、通过反馈调整配置以及使用系统工具（如GDB和Crashwrangler）捕获回溯变得更容易。此外，每个模糊输入都不会保留。对于每个新应用程序的测试，都会重新生成模糊器并重复测试周期。这引入了不必要的模糊生成时间和恶意文件的重复。此外，跨应用程序或设备测试的模糊输入之间也没有关联，这是分布式模糊测试提供的。尽管BFF作为一个框架是高效的，但它不适用于目标是移动设备且独立运行在模糊器之外的情况，且没有志愿者的管理权限。

自动利用生成[30]旨在自动找到应用程序中的漏洞并立即编写利用程序。他们在一个开源项目中测试了该工具，并发现了16个利用程序。他们使用源代码和二进制代码的预处理符号执行来生成利用公式[30]。这意味着他们需要访问源代码。在移动领域，我们知道这是不可能的。设备上的Android版本源代码未公开，因为它们包含专有代码。这一点在iOS上更为明显。即使源代码变得可访问，大型程序的规模也限制了手动分析的可能性。此外，随着移动操作系统实施地址空间随机化(ASLR)，符号执行方法也不再有效。

本文描述的优秀模糊配置选择方法类似于Woo等人[11]和Householder等人[21]的工作。前者研究如何在模糊测试活动中找到最多独特的漏洞。他们特别开发了一个分析框架，使用黑盒突变模糊测试的数学模型，将其建模为具有未知权重的WCCP过程，并使用No Free Lunch定理中的条件决定更好的在线算法。后者描述了一种黑盒模糊测试的工作流程和一种选择模糊参数以最大化独特应用错误数量的算法。他们展示了该算法的实现，用于发现几个以前未知的安全漏洞。

Robert等人[11]提出了一个通用的模糊配置调度问题模型，用于选择独立于模糊调度算法的种子文件。在我们的模糊测试工作中，模糊调度主要基于位置修改的知识。Woo等人[8]识别并测试了几种基于过去模糊测试结果的置信度指标，以选择下一次最佳的种子/程序对进行后续模糊测试活动。像我们的方法一样，它不使用有关目标和文件格式的信息。

我们可以采用CERT、Robert[11]和Woo[8]的方法来增强FEET，从而更快地预期崩溃。总之，模糊配置调度算法和置信度指标可以与修改位置的选择结合起来，以改进发现的独特漏洞数量。特别是，修改的位置可以作为参数来选择不同的种子文件或包含不同修改位置集合的模糊任务，基于先前的实验结果。

然而，这些相关工作都没有解决在分布式客户端-服务器模式下进行模糊测试时遇到的问题，如预生成模糊输入和减少存储开销。

### 5. 未来工作
这种模糊测试范式针对的是可下载内容，包括文档和多媒体格式，这些都是当今的“路过式”攻击的目标。然而，系统级组件还包括直接与操作系统通信的网络协议和USB I/O协议。未来的自愿模糊测试应扩展到这些目标。

MVDP使用字节或块级别的变异操作符。这些操作符可能提供了过于粗粒度的修改，专门针对某些数据格式的控制元素。未来的工作可以探索更多在比特级别操作的变异操作符，类似于BFF使用的zzuf[26]模糊器。

我们还在开发一种特制的网关设备，可以定期从STAMP获取新的崩溃信息。这些信息可以包括在特定目标设备上成功引起可利用崩溃的文件修改位置。修改信息可以映射到初始/种子文件，以推断出数据格式规范谓词的违反情况。随后进入的数据流如果匹配失败的谓词集，将在到达终端主机之前被网关设备拒绝。这个应用程序类似于设备上的反病毒应用程序，但它检查的是传入的文件而不是应用程序。该应用程序还可以通过提供挂钩来扩展，以便其他来源的信息可以提供已知的攻击签名。

### 6. 结论
MVDP设计用于克服互联网规模的自愿模糊测试的限制。我们使用FEET确保模糊文件的高度唯一性和均匀分布。我们设计了一种方法，以确保用于模糊测试的种子文件质量高且RFC覆盖全面。我们还开发了FEET，以告知我们最佳的模糊配置。STAMP和SOFT应用程序分别设计用于启用模糊分发和移动设备测试。CACE工具实现了从模糊测试中获得的崩溃中自动分箱独特漏洞。分析这些崩溃并将它们根据独特性、崩溃发生率和严重性可视化，使我们有更好的机会生成利用程序，以提高移动安全性。

### 7. 参考文献
[1] A. Imran, Chronic Dev Team Announces "Tool of Mass Exploitation", Install It Now To Help Community Find Exploits For Untethered Jailbreak redmonpie.com, November 27, 2011.
[2] J. Drake, Reversing and Auditing Android’s Proprietary Bits RECon, June, 2013.
[3] Michael Sutton, Adam Greene, and Pedram Amini. 2007. Fuzzing: Brute Force Vulnerability Discovery. Addison-Wesley Professional.
[4] Sophos Press Release: Users Weighed Down by Multiple Gadgets and Mobile Devices, New Sophos Survey Reveals March 18 2013, Sophos Ltd.
[5] National Cyber Awareness System - Vulnerability Summary for CVE-2012-0003 http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-0003
[6] National Cyber Awareness System - Vulnerability Summary for CVE-2013-0976: http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-0976
[7] National Cyber Awareness System - Vulnerability Summary for CVE-2013-1750 http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1750
[8] A. Rebert, S. K. Cha, T. Avgerinos, J. Foote, D. Warren, G. Grieco, D. Brumley. Optimising Seed Selection for fuzzing In Proc. 23rd USENIX Security Symposium, 2014.
[9] Graphics Interchange Format, Version 89a, W3C; 31 July 1990.
[10] H. C. Kim, Y. H. Choi, D. H. Lee. Efficient file fuzz testing using automated analysis of binary file format. Journal of Systems Architecture-Embedded Systems Design, vol. 57, no. 3, pages 259-268, 2011.
[11] Maverick Woo, Sang Kil Cha, Samantha Gottlieb, and David Brumley. 2013. Scheduling black-box mutational fuzzing. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security (CCS '13). ACM, New York, NY, USA, 511-522.
[12] Open-source software for volunteer computing and grid computing. https://boinc.berkeley.edu/
[13] SETI@home http://setiathome.ssl.berkeley.edu/
[14] C. Miller. How smart is intelligent fuzzing or - How stupid is dumb fuzzing? Independent Security Evaluators, August 3, 2007.
[15] Google Custom Search Engine. https://www.google.com/cse/
[16] Bing Search API. http://datamarket.azure.com/dataset/bing/search
[17] Hachoir Project. https://pypi.python.org/pypi/hachoir-core
[18] Information technology – Computer graphics and image processing – Portable Network Graphics (PNG): Functional specification. ISO/IEC 15948:2003 (E) W3C Recommendation 10 November 2003.
[19] Skia 2D graphics library - https://code.google.com/p/skia/
[20] Apple iOS ImageIO - https://developer.apple.com/library/ios/documentation/GraphicsImaging/Conceptual/ImageIOGuide
[21] A. D. Householder and J. M. Foote. Probability-Based Parameter Selection for Black-Box Fuzz Testing. Technical Report August, CERT, 2012
[22] !exploitable http://msecdbg.codeplex.com/
[23] Binary Diff Utility FreeBSD Man Pages
[24] Mac Developer Library: Apple Technical Note TN233, Accessing CrashWrangler to analyze crashes for security implications, March 2014
[25] (SIGSEGV), fault addr deadbaad https://groups.google.com/forum/#!topic/android-ndk/jQg6DM6-D6o
[26] C. Labs. zzuf: multi-purpose fuzzer. http://caca.zoy.org/wiki/zzuf.
[27] B. P. Miller, L. Fredriksen, and B. So. An Empirical Study of the Reliability of UNIX Utilities. Communications of the ACM, 33(12):32(44), 1990.
[28] Chris Evans, Matt Moore and Tavis Ormandy, Google Security Team: Fuzzing at scale http://googleonlinesecurity.blogspot.sg/2011/08/fuzzing-at-scale.html Friday, August 12, 2011
[29] Basic Fuzzing Framework. http://www.cert.org/vulnerability-analysis/tools/bff.cfm
[30] Thanassis Avgerinos, Sang Kil Cha, Alexandre Rebert, Edward J. Schwartz, Maverick Woo, and David Brumley. 2014. Automatic exploit generation. Commun. ACM 57, 2 (February 2014), 74-84.
[31] Hex-Rays IDA. https://www.hex-rays.com/products/ida/
[32] D. A. Berry and B. Fristedt. Bandit Problems: Sequential Allocation of Experiments. Chapman and Hall, 1985.