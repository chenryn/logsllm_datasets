### Reproduction of a Known Bug and Verification Time Analysis

We have successfully reproduced a known bug in an older version of the F25519 multiplication (fe25519r64 mul-1) using the corresponding Qhasm code `fe25519r64` and `fe25519`. A counterexample can be generated within seconds by specifying a pair of precondition and postcondition for the reduction phase. The verification time for squaring is less than that for multiplication due to two reasons:
1. Squaring is simpler and requires fewer low-level multiplication operations.
2. Multiplication is verified without the fourth heuristic, which will be introduced later in this section, whereas squaring is verified with this heuristic.

### Verification Results for Different Phases

The results for verifying the delayed carry phase of `mul25519`, a three-phase implementation of multiplication, are shown in the rows `mul25519-p2-1` and `mul25519-p2-2`. Adding an additional midcondition to the delayed carry phase reduces the verification time from 2723 minutes to 263 minutes. Generally, inserting more midconditions lowers the verification time but increases the manual effort required. Besides `mul25519` and the Qhasm code in the ladder step, we have also successfully verified:
1. A three-phase implementation of multiplication with addition (`muladd25519`).
2. Implementations of multiplication over different finite fields (`fe19119 mul`, `mul1271`, and `re15319`).

### Postconditions and Modular Congruence

All postconditions for the radix-264 representation are equalities. Since Boolector cannot verify modular congruence relations in the radix-264 representation, we establish these in Coq. In contrast, Boolector successfully verifies the modular congruence relation `Q51delay carry` for the radix-251 representation, simplifying our Coq proof. This is because we can further divide `P 51D` into smaller fragments, and a few extra carry bits not only reduce execution time but also verification time.

### Heuristics for Accelerating Verification

We have found several heuristics to be useful in accelerating verification. Without these, many cases would be unverifiable. The heuristics are as follows:

1. **Splitting Conjunctions of Postconditions**: Translate `(Q0) P (Q1 ∧ Q2)` to `(Q0) P (Q1)` and `(Q0) P (Q2)`. This reduced the verification time of the multiply phase of `mul25519` from one day to one minute.
2. **Delaying Bit-Width Extension**: For a formula `a = b * c` where `a` has 256 bits and `b, c` have 64 bits, extend `b` and `c` to 128 bits, compute the multiplication, and then extend the result to 256 bits.
3. **Matching Mathematical Operations**: The sequence of mathematical operations in annotations should match the sequence of operations in the program. For example, if a program calculates `r` by adding `19x0y2`, then `19x1y1`, and finally `19x2y0`, the annotation should be `r = (19x0y2 + 19x1y1) + 19x2y0`.
4. **Over-Approximating Specifications**: Automatically reduce logical variables and weaken preconditions to make specifications easier to prove. The validity of an over-approximated specification guarantees the validity of the original one, but not vice versa. This can be seen as program slicing with over-approximation.

### Future Work

Several avenues for future work include:
1. **Side-Channel Attack Resistance**: Develop verification approaches to ensure assembly implementations are resistant to side-channel attacks. Formal techniques for measuring worst-case execution time (WCET) could be a starting point.
2. **Automatic Midcondition Insertion**: Investigate techniques for automatic insertion of midconditions to increase the degree of automation. Tools for automatic assertion insertion, such as [25], may be relevant.
3. **Integrated Translator**: Enhance the translator to produce both Boolector specifications and Coq proof obligations from an annotated Qhasm file, making the file more self-contained. Develop Coq tactics to solve specific problems, such as modular congruence, to reduce human effort.

### References

[1] R. Affeldt. On construction of a library of formally verified low-level arithmetic functions. Innovations in Systems and Software Engineering, 9(2):59–77, 2013. [Link](https://staff.aist.go.jp/reynald.affeldt/documents/arilib-affeldt.pdf).

[2] R. Affeldt and N. Marti. An approach to formal verification of arithmetic functions in assembly. In M. Okada and I. Satoh, editors, Advances in Computer Science – ASIAN 2006, volume 4435 of Lecture Notes in Computer Science, pages 346–360. Springer-Verlag Berlin Heidelberg, 2007. [Link](https://staff.aist.go.jp/reynald.affeldt/documents/affeldt-asian2006.pdf).

[3] R. Affeldt, D. Nowak, and K. Yamada. Certifying assembly with formal security proofs: The case of BBS. Science of Computer Programming, 77(10–11):1058–1074, 2012. [Link](http://www.sciencedirect.com/science/article/pii/S0167642311001493).

[4] J. B. Almeida, M. Barbosa, G. Barthe, and F. Dupressoir. Certified computer-aided cryptography: efficient provably secure machine code from high-level implementations. In V. Gligor and M. Yung, editors, Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, pages 1217–1230. ACM New York, 2013. [Link](http://eprint.iacr.org/2013/316/).

[5] B. Alpern, M. N. Wegman, and F. K. Zadeck. Detecting equality of variables in programs. In ACM Symposium on Principles of Programming Languages – (POPL 1988), pages 1–11. ACM Press, 1988. [Link](http://courses.cs.washington.edu/courses/cse501/04wi/papers/alpern-popl88.pdf).

[6] R. Avanzi, H. Cohen, C. Doche, G. Frey, T. Lange, K. Nguyen, and F. Vercauteren. Handbook of Elliptic and Hyperelliptic Curve Cryptography. Chapman & Hall/CRC, 2006.

[7] E.-I. Bartzia. Formalisation des courbes elliptiques en Coq. Master’s thesis, Université de Vincennes-Saint Denis – Paris VIII, 2011. [Link](http://pierre-yves.strub.nu/research/ec/).

[8] A. G. Bayrak, F. Regazzoni, D. Novo, and P. Ienne. Sleuth: Automated verification of software power analysis countermeasures. In G. Bertoni and J.-S. Coron, editors, Cryptographic Hardware and Embedded Systems – CHES 2013, volume 8086 of Lecture Notes in Computer Science, pages 293–310. Springer-Verlag Berlin Heidelberg, 2013.

[9] D. J. Bernstein. qhasm: tools to help write high-speed software. [Link](http://cr.yp.to/qhasm.html).

[10] D. J. Bernstein. Supercop: System for unified performance evaluation related to cryptographic operations and primitives. [Link](http://bench.cr.yp.to/supercop.html). Published as part of ECRYPT II VAMPIRE Lab.

[11] D. J. Bernstein. Curve25519: new Diffie-Hellman speed records. In M. Yung, Y. Dodis, A. Kiayias, and T. Malkin, editors, Public Key Cryptography – PKC 2006, volume 3958 of Lecture Notes in Computer Science, pages 207–228. Springer-Verlag Berlin Heidelberg, 2006. [Link](http://cr.yp.to/papers.html#curve25519).

[12] D. J. Bernstein. Batch binary Edwards. In S. Halevi, editor, Advances in Cryptology – CRYPTO 2009, volume 5677 of Lecture Notes in Computer Science, pages 317–336. Springer-Verlag Berlin Heidelberg, 2009. [Link](http://cr.yp.to/papers.html#bbe).

[13] D. J. Bernstein, N. Duif, T. Lange, P. Schwabe, and B.-Y. Yang. High-speed high-security signatures. In B. Preneel and T. Takagi, editors, Cryptographic Hardware and Embedded Systems – CHES 2011, volume 6917 of Lecture Notes in Computer Science, pages 124–142. Springer-Verlag Berlin Heidelberg, 2011. See also full version [14].

[14] D. J. Bernstein, N. Duif, T. Lange, P. Schwabe, and B.-Y. Yang. High-speed high-security signatures. Journal of Cryptographic Engineering, 2(2):77–89, 2012. [Link](http://cryptojedi.org/papers/#ed25519), see also short version [13].

[15] D. J. Bernstein and T. L. (editors). eBACS: ECRYPT Benchmarking of Cryptographic Systems. [Link](http://bench.cr.yp.to) (accessed May 17, 2014).

[16] D. J. Bernstein and T. L. (editors). Explicit-formulas database. [Link](http://www.hyperelliptic.org/EFD/) (accessed May 17, 2014).

[17] D. J. Bernstein, W. Janssen, T. Lange, and P. Schwabe. TweetNaCl: A crypto library in 100 tweets, 2013. [Link](http://cryptojedi.org/papers/#tweetnacl).

[18] D. J. Bernstein, T. Lange, and P. Schwabe. The security impact of a new cryptographic library. In A. Hevia and G. Neven, editors, Progress in Cryptology – LATINCRYPT 2012, volume 7533 of Lecture Notes in Computer Science, pages 159–176. Springer-Verlag Berlin Heidelberg, 2012. [Link](http://cryptojedi.org/papers/#coolnacl).

[19] Y. Bertot and P. Castéran. Interactive Theorem Proving and Program Development Coq’Art: The Calculus of Inductive Constructions. EATCS. Springer, 2004.

[20] K. Bhargavan, A. Delignat-Lavaud, C. Fournet, M. Kohlweiss, A. Pironti, P.-Y. Strub, and S. Zanella-Béguelin. miTLS: A verified reference TLS implementation, 2014. [Link](http://www.mitls.org/wsgi/home).

[21] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and P.-Y. Strub. Implementing TLS with verified cryptographic security. In IEEE Symposium on Security and Privacy 2013, pages 445–459, 2013. Full version: [Link](http://www.mitls.org/downloads/miTLS-report.pdf).

[22] B. B. Brumley, M. Barbosa, D. Page, and F. Vercauteren. Practical realisation and elimination of an ECC-related software bug attack. In O. Dunkelman, editor, Topics in Cryptology – CT-RSA 2012, volume 7178 of Lecture Notes in Computer Science, pages 171–186. Springer-Verlag Berlin Heidelberg, 2012. [Link](http://eprint.iacr.org/2011/633).

[23] R. Brummayer and A. Biere. Boolector: An efficient SMT solver for bit-vectors and arrays. In S. Kowalewski and A. Philippou, editors, Tools and Algorithms for the Construction and Analysis of Systems – (TACAS 2009), volume 5505 of Lecture Notes in Computer Science, pages 174–177. Springer-Verlag Berlin Heidelberg, 2009. [Link](http://fmv.jku.at/papers/BrummayerBiere-TACAS09.pdf).

[24] C. Costello, H. Hisil, and B. Smith. Faster compact Diffie–Hellman: Endomorphisms on the x-line. In P. Q. Nguyen and E. Oswald, editors, Advances in Cryptology – EUROCRYPT 2014, volume 8441 of Lecture Notes in Computer Science, pages 183–200. Springer-Verlag Berlin Heidelberg, 2014. [Link](http://eprint.iacr.org/2013/692/).

[25] M. D. Ernst, J. H. Perkins, P. J. Guo, S. McCamant, C. Pacheco, M. S. Tschantz, and C. Xiao. The Daikon system for dynamic detection of likely invariants. Sci. Comput. Program., 69(1–3):35–45, 2007. [Link](http://pgbovine.net/publications/daikon-invariant-detector_SCP-2007.pdf).

[29] P. Longa and F. Sica. Four-dimensional Gallant-Lambert-Vanstone scalar multiplication. In X. Wang and K. Sako, editors, Advances in Cryptology – ASIACRYPT 2012, volume 7658 of Lecture Notes in Computer Science, pages 718–739. Springer-Verlag Berlin Heidelberg, 2012. [Link](https://eprint.iacr.org/2011/608).

[30] D. Molnar, M. Piotrowski, D. Schultz, and D. Wagner. The program counter security model: Automatic detection and removal of control-flow side channel attacks. In D. H. Won and S. Kim, editors, Information Security and Cryptology – ICISC 2005, volume 3935 of Lecture Notes in Computer Science, pages 156–168. Springer-Verlag Berlin Heidelberg, 2005. Full version at [Link](http://eprint.iacr.org/2005/368/).

[31] P. L. Montgomery. Speeding the Pollard and elliptic curve methods of factorization. Mathematics of Computation, 48(177):243–264, 1987. [Link](http://www.ams.org/journals/mcom/1987-48-177/S0025-5718-1987-0866113-7/S0025-5718-1987-0866113-7.pdf).

[32] M. O. Myreen and M. J. C. Gordon. Hoare logic for realistically modelled machine code. In O. Grumberg and M. Huth, editors, Tools and Algorithms for the Construction and Analysis of Systems, volume 4424 of Lecture Notes in Computer Science, pages 568–582. Springer-Verlag Berlin Heidelberg, 2007. [Link](http://www.cl.cam.ac.uk/~mom22/mc-hoare-logic.pdf).

[33] T. Oliveira, J. López, D. F. Aranha, and F. Rodríguez-Henríquez. Lambda coordinates for binary elliptic curves. In G. Bertoni and J.-S. Coron, editors, Cryptographic Hardware and Embedded Systems – CHES 2013, volume 8086 of Lecture Notes in Computer Science, pages 311–330. Springer-Verlag Berlin Heidelberg, 2013. [Link](http://eprint.iacr.org/2013/131/20130611:205154).

[34] S. Ragan. Bugcrowd launches funding drive to audit OpenSSL. News article on CSO, 2014. [Link](http://www.csoonline.com/article/2145020/security-industry/bugcrowd-launches-funding-drive-to-audit-openssl.html) (accessed May 17, 2014).

[35] B. K. Rosen, M. N. Wegman, and F. K. Zadeck. Global value numbers and redundant computations. In ACM Symposium on Principles of Programming Languages – (POPL 1988), pages 12–27. ACM Press, 1988. [Link](http://www.cs.wustl.edu/~cytron/cs531/Resources/Papers/valnum.pdf).

[26] M. Gordon. CryptVer project. [Link](http://www.cl.cam.ac.uk/~mjcg/proposals/CryptVer/).

[36] L. Théry and G. Hanrot. Primality proving with elliptic curves. In K. Schneider and J. Brandt, editors, Theorem Proving in Higher Order Logics, volume 4732 of Lecture Notes in Computer Science, pages 319–333. Springer-Verlag Berlin Heidelberg, 2007. [Link](http://hal.inria.fr/docs/00/14/06/58/PDF/paper.pdf).

[37] K. White and M. Green. IsTrueCryptAuditedYet? [Link](http://istruecryptauditedyet.com/) (accessed May 17, 2014).