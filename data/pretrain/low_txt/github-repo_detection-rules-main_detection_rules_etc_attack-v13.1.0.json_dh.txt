Certainly! Below is a more polished and coherent version of the provided text, with each section refined for clarity, coherence, and professionalism:

---

### 1. Component Object Model (COM) Hijacking

**Description:**
The Component Object Model (COM) is a system within Windows that enables interaction between software components through the operating system. Adversaries can exploit this system to insert malicious code that executes in place of legitimate software by hijacking COM references and relationships, thereby achieving persistence. This involves modifying the Windows Registry to replace a reference to a legitimate system component, which may cause the component to fail when executed. When the system component is executed through normal operations, the adversary's code will run instead.

**Detection:**
To detect COM hijacking, search for Registry references that have been replaced and monitor for Registry operations that change known binary paths to unknown ones. Although some third-party applications define user COM objects, the presence of objects in `HKEY_CURRENT_USER\Software\Classes\CLSID\` may be anomalous and should be investigated. Registry entries for existing COM objects typically change infrequently. If an entry with a known good path and binary is replaced or changed to an unusual value, it may indicate suspicious behavior and should be investigated. Additionally, if software DLL loads are collected and analyzed, any unusual DLL load correlated with a COM object Registry modification may indicate COM hijacking.

**References:**
- Microsoft. (n.d.). The Component Object Model. Retrieved August 18, 2016.
- G DATA. (2014, October). COM Object hijacking: the discreet way of persistence. Retrieved August 13, 2016.
- Ewing, P. & Strom, B. (2016, September 15). How to Hunt: Detecting Persistence & Evasion with the COM. Retrieved September 15, 2016.

### 2. Accessibility Features

**Description:**
Windows includes accessibility features that can be launched with key combinations before a user logs in. Adversaries can modify these programs to gain command prompt or backdoor access without logging in. Common accessibility programs include `sethc.exe` and `utilman.exe`.

Depending on the Windows version, adversaries may take advantage of these features in different ways. For example, on Windows XP and later, the program `utilman.exe` can be replaced with `cmd.exe`, allowing execution with SYSTEM privileges when the appropriate key combination is pressed at the login screen. On newer versions, a Registry key can be modified to configure `cmd.exe` as a "debugger" for the accessibility program, enabling execution with SYSTEM privileges.

**Detection:**
Monitor for changes to accessibility utility binaries or binary paths that do not correlate with known software, patch cycles, etc. Command line invocation of tools capable of modifying the Registry for associated keys are also suspicious. Utility arguments and the binaries themselves should be monitored for changes. Monitor Registry keys within `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options`.

**References:**
- Glyer, C., & Kazanciyan, R. (2012, August 20). The “Hikit” Rootkit: Advanced and Persistent Attack Techniques (Part 1). Retrieved June 6, 2016.
- Maldonado, D., & McGuffin, T. (2016, August 6). Sticky Keys to the Kingdom. Retrieved July 5, 2017.
- Tilbury, C. (2014, August 28). Registry Analysis with CrowdResponse. Retrieved November 12, 2014.

### 3. Exploitation for Credential Access

**Description:**
Adversaries may exploit software vulnerabilities to collect credentials. Exploitation occurs when an adversary takes advantage of a programming error to execute adversary-controlled code. Credentialing and authentication mechanisms may be targeted to gain access to useful credentials or circumvent the process to gain system access. An example is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.

**Detection:**
Detecting software exploitation can be challenging. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Look for abnormal behavior on the system, such as unusual files written to disk, evidence of Process Injection, or other unusual network traffic that may indicate additional tools transferred to the system.

**References:**
- Metcalf, S. (2015, May 03). Detecting Forged Kerberos Ticket (Golden Ticket & Silver Ticket) Use in Active Directory. Retrieved December 23, 2015.
- Microsoft. (2014, November 18). Vulnerability in Kerberos Could Allow Elevation of Privilege (3011780). Retrieved December 23, 2015.

### 4. Emond

**Description:**
Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond accepts events from various services, runs them through a simple rules engine, and takes action. The emond service will not launch if there is no file present in the `/private/var/db/emondClients` directory.

Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system startup or user authentication. This can escalate privileges from administrator to root, as the emond service is executed with root privileges by the Launch Daemon service.

**Detection:**
Monitor emond rules creation by checking for files created or modified in `/etc/emond.d/rules/` and `/private/var/db/emondClients`.

**References:**
- Reynolds, J. (2016, April 7). What is emond?. Retrieved September 10, 2019.
- Ross, C. (2018, January 17). Leveraging Emond on macOS For Persistence. Retrieved September 10, 2019.
- Stokes, P. (2019, June 17). HOW MALWARE PERSISTS ON MACOS. Retrieved September 10, 2019.

### 5. One-Way Communication

**Description:**
Adversaries may use an external web service to send commands to a compromised system without receiving return output over the web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Web service providers commonly use SSL/TLS encryption, providing added protection.

**Detection:**
Host data that can relate unknown or suspicious process activity using a network connection is important. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows. User behavior monitoring may help detect abnormal patterns of activity.

**References:**
- Gardiner, J., Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.

### 6. Gather Victim Network Information

**Description:**
Adversaries may gather information about the victim's networks, including administrative data and specifics regarding its topology and operations. This information can be gathered via active scanning, phishing, or accessible data sets.

**Detection:**
Much of this activity may have a high occurrence and false positive rate, making detection difficult. Detection efforts may focus on related stages of the adversary lifecycle, such as during Initial Access.

**References:**
- NTT America. (n.d.). Whois Lookup. Retrieved October 20, 2020.
- Hacker Target. (n.d.). DNS Dumpster. Retrieved October 20, 2020.
- CIRCL Computer Incident Response Center. (n.d.). Passive DNS. Retrieved October 20, 2020.

### 7. Exploitation of Remote Services

**Description:**
Adversaries may exploit remote services to gain unauthorized access to internal systems once inside a network. A common goal is lateral movement to enable access to a remote system. Adversaries may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Discovery or other methods.

**Detection:**
Detecting software exploitation can be difficult. Look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of processes. This could include suspicious files written to disk, evidence of Process Injection, or other unusual network traffic.

**References:**
- CIS. (2017, May 15). Multiple Vulnerabilities in Microsoft Windows SMB Server Could Allow for Remote Code Execution. Retrieved April 3, 2018.
- National Vulnerability Database. (2017, June 22). CVE-2017-0176 Detail. Retrieved April 3, 2018.
- National Vulnerability Database. (2017, February 2). CVE-2016-6662 Detail. Retrieved April 3, 2018.
- National Vulnerability Database. (2017, September 24). CVE-2014-7169 Detail. Retrieved April 3, 2018.

### 8. Parent PID Spoofing

**Description:**
Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, but the PPID can be explicitly assigned via the CreateProcess API call.

**Detection:**
Look for inconsistencies between the various fields that store PPID information. Monitor and analyze API calls to CreateProcess/CreateProcessA, specifically those from potentially malicious processes and with parameters explicitly assigning PPIDs.

**References:**
- Stevens, D. (2009, November 22). Quickpost: SelectMyParent or Playing With the Windows Process Tree. Retrieved June 3, 2019.
- Montemayor, D. et al. (2018, November 15). How User Account Control works. Retrieved June 3, 2019.
- Loh, I. (2018, December 21). Detecting Parent PID Spoofing. Retrieved June 3, 2019.
- Tafani-Dereeper, C. (2019, March 12). Building an Office macro to spoof parent processes and command line arguments. Retrieved June 3, 2019.
- Chester, A. (2017, November 20). Alternative methods of becoming SYSTEM. Retrieved June 4, 2019.
- Schofield, M. & Satran, M. (2018, May 30). Process Creation Flags. Retrieved June 4, 2019.
- Secuirtyinbits. (2019, May 14). Parent PID Spoofing (Stage 2) Ataware Ransomware Part 3. Retrieved June 6, 2019.

### 9. Keychain

**Description:**
Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features. The security command-line utility provides a way to manage these credentials. By default, the passphrase for the keychain is the user’s logon credentials.

**Detection:**
Unlocking the keychain and using passwords from it is a common process, so there is likely to be a lot of noise in any detection technique. Monitoring of system calls to the keychain can help determine if there is a suspicious process trying to access it.

**References:**
- Wikipedia. (n.d.). Keychain (software). Retrieved July 5, 2017.
- Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to DA, the OS X Way. Retrieved July 3, 2017.

### 10. Internal Spearphishing

**Description:**
Adversaries may use internal spearphishing to gain access to additional information or exploit other users within the same organization after they already have access to accounts or systems. Internal spearphishing is a multi-staged campaign where an email account is owned either by controlling the user's device with malware or by compromising the account credentials of the user.

**Detection:**
Network intrusion detection systems and email gateways usually do not scan internal email, but organizations can leverage journaling-based solutions or incorporate service-integrated solutions to help detect internal spearphishing campaigns.

**References:**
- Chris Taylor. (2017, October 5). When Phishing Starts from the Inside. Retrieved October 8, 2019.
- THE FINANCIAL TIMES. (2019, September 2). A sobering day. Retrieved October 8, 2019.

### 11. Sudo

**Description:**
The sudoers file, `/etc/sudoers`, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. Adversaries can take advantage of these configurations to execute commands as other users or spawn processes with higher privileges.

**Detection:**
On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo).

**References:**
- Thomas Reed. (2017, July 7). New OSX.Dok malware intercepts web traffic. Retrieved July 10, 2017.

### 12. Services File Permissions Weakness

**Description:**
Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions.

**Detection:**
Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.

**References:**
- Travis Smith, Tripwire.
- Stefan Kanthak.

### 13. Registry Run Keys / Startup Folder

**Description:**
Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the "run keys" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.

**Detection:**
Monitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence.

**References:**
- Arntz, P. (2016, March 30). Hiding in Plain Sight. Retrieved August 3, 2020.
- Microsoft. (2018, May 31). 32-bit and 64-bit Application Data in the Registry. Retrieved August 3, 2020.
- Microsoft. (n.d.). Run and RunOnce Registry Keys. Retrieved November 12, 2014.
- Moe, O. (2018, March 21). Persistence using RunOnceEx - Hidden from Autoruns.exe. Retrieved June 29, 2018.
- Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.

### 14. Trusted Relationship

**Description:**
Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third-party relationships abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.

**Detection:**
Establish monitoring for activity conducted by second and third-party providers and other trusted entities that may be leveraged as a means to gain access to the network. Depending on the type of relationship, an adversary may have access to significant amounts of information about the target before conducting an operation.

**References:**
- CISA. (n.d.). APTs Targeting IT Service Provider Customers. Retrieved November 16, 2020.
- Microsoft. (n.d.). Partners: Offer delegated administration. Retrieved May 27, 2022.

### 15. Cloud Account

**Description:**
Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.

**Detection:**
Collect usage logs from cloud user and administrator accounts to identify unusual activity in the creation of new accounts and assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins.

**References:**
- Ako-Adjei, K., Dickhaus, M., Baumgartner, P., Faigel, D., et. al.. (2019, October 8). About admin roles. Retrieved October 18, 2019.
- AWS. (n.d.). Creating an IAM User in Your AWS Account. Retrieved January 29, 2020.
- Google. (n.d.). Create Cloud Identity user accounts. Retrieved January 29, 2020.
- Microsoft. (2019, November 11). Add or delete users using Azure Active Directory. Retrieved January 30, 2020.
- Microsoft. (n.d.). Add Another Admin. Retrieved October 18, 2019.

### 16. Local Groups

**Description:**
Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.

**Detection:**
System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.

**References:**
- Harshal Tupsamudre, Qualys.
- Miriam Wiesner, @miriamxyra, Microsoft Security.

### 17. LC_MAIN Hijacking

**Description:**
This technique has been deprecated and should no longer be used. As of OS X 10.8, mach-O binaries introduced a new header called LC_MAIN that points to the binary’s entry point for execution. The entry point for a binary can be hijacked so that initial execution flows to a malicious addition and then goes back to the initial entry point, bypassing application whitelisting.

**Detection:**
Determining the original entry point for a binary is difficult, but checksum and signature verification is very possible. Modifying the LC_MAIN entry point or adding in an additional LC_MAIN entry point invalidates the signature for the file and can be detected. Collect running process information and compare against known applications to look for suspicious behavior.

**References:**
- Bit9 + Carbon Black Threat Research Team. (2015). 2015: The Most Prolific Year in History for OS X Malware. Retrieved July 8, 2017.
- Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.

### 18. Search Open Websites/Domains

**Description:**
Adversaries may search freely available websites and/or domains for information about victims that can be used during targeting. Information about victims may be available in various online sites, such as social media, news sites, or those hosting information about business operations.

**Detection:**
Much of this activity may have a very high occurrence and associated false positive rate, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.

**References:**
- Borges, E. (2019, March 5). Exploring Google Hacking Techniques. Retrieved October 20, 2020.
- Cyware Hacker News. (2019, October 2). How Hackers Exploit Social Media To Break Into Your Company. Retrieved October 20, 2020.
- Offensive Security. (n.d.). Google Hacking Database. Retrieved October 23, 2020.

### 19. Account Manipulation

**Description:**
Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies.

**Detection:**
Collect events that correlate with changes to account objects and/or permissions on systems and the domain. Monitor for modification of accounts in correlation with other suspicious activity. Changes may occur at unusual times or from unusual systems.

**References:**
- Franklin Smith, R. (n.d.). Windows Security Log Event ID 4670. Retrieved November 4, 2019.
- Lich, B., Miroshnikov, A. (2017, April 5). 4738(S): A user account was changed. Retrieved June 30, 2017.
- Warren, J. (2017, July 11). Manipulating User Passwords with Mimikatz. Retrieved December 4, 2017.
- Warren, J. (2017, June 22). lsadump::changentlm and lsadump::setntlm work, but generate Windows events #92. Retrieved December 4, 2017.

### 20. Mshta

**Description:**
Mshta.exe is a utility that executes Microsoft HTML Applications (HTA). HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. Adversaries can use mshta.exe to proxy execution of malicious .hta files and JavaScript or VBScript through a trusted Windows utility.

**Detection:**
Use process monitoring to monitor the execution and arguments of mshta.exe. Look for mshta.exe executing raw or obfuscated script within the command-line. Compare recent invocations of mshta.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity.

**References:**
- Wikipedia. (2017, October 14). HTML Application. Retrieved October 27, 2017.
- Microsoft. (n.d.). HTML Applications. Retrieved October 27, 2017.
- Gross, J. (2016, February 23). Operation Dust Storm. Retrieved December 22, 2021.
- McCammon, K. (2015, August 14). Microsoft HTML Application (HTA) Abuse, Part Deux. Retrieved October 27, 2017.
- Berry, A., Galang, L., Jiang, G., Leathery, J., Mohandas, R. (2017, April 11). CVE-2017-0199: In the Wild Attacks Leveraging HTA Handler. Retrieved October 27, 2017.
- Dove, A. (2016, March 23). Fileless Malware – A Behavioural Analysis Of Kovter Persistence. Retrieved December 5, 2017.
- Carr, N., et al. (2017, April 24). FIN7 Evolution and the Phishing LNK. Retrieved April 24, 2017.
- LOLBAS. (n.d.). Mshta.exe. Retrieved July 31, 2019.

### 21. Exfiltration Over Alternative Protocol

**Description:**
Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel.

**Detection:**
Analyze network data for uncommon data flows. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.

**References:**
- Gardiner, J., Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.
- Grunzweig, J. and Falcone, R.. (2016, October 4). OilRig Malware Campaign Updates Toolset and Expands Targets. Retrieved May 3, 2017.
- Phil Stokes. (2021, February 16). 20 Common Tools & Techniques Used by macOS Threat Actors & Malware. Retrieved August 23, 2021.

### 22. Kernel Modules and Extensions

**Description:**
Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. When used maliciously, LKMs can be a type of kernel-mode rootkit that run with the highest operating system privilege (Ring 0).

**Detection:**
Loading, unloading, and manipulating modules on Linux systems can be detected by monitoring for the following commands: modprobe, insmod, lsmod, rmmod, or modinfo. Many LKMs require Linux headers (specific to the target kernel) in order to compile properly.

**References:**
- Apple. (2019, May 3). Configuration Profile Reference. Retrieved September 23, 2021.
- Apple. (n.d.). Deprecated Kernel Extensions and System Extension Alternatives. Retrieved November 4, 2020.
- Apple. (n.d.). System and kernel extensions in macOS. Retrieved March 31, 2022.
- Augusto, I. (2018, March 8). Reptile - LMK Linux rootkit. Retrieved April 9, 2018.
- Case, A. (2012, October 10). Phalanx 2 Revealed: Using Volatility to Analyze an Advanced Linux Rootkit. Retrieved April 9, 2018.
- Chuvakin, A. (2003, February). An Overview of Rootkits. Retrieved April 6, 2018.
- Henderson, B. (2006, September 24). How To Insert And Remove LKMs. Retrieved April 9, 2018.
- Kurtz, G. (2012, November 19). HTTP iframe Injecting Linux Rootkit. Retrieved December 21, 2017.
- Mello, V. (2018, March 8). Diamorphine - LMK rootkit for Linux Kernels 2.6.x/3.x/4.x (x86 and x86_64). Retrieved April 9, 2018.
- Mikhail, K. (2014, October 16). The Ventir Trojan: assemble your MacOS spy. Retrieved April 6, 2018.
- Pikeralpha. (2017, August 29). User Approved Kernel Extension Loading…. Retrieved September 23, 2021.
- Pomerantz, O., Salzman, P. (2003, April 4). Modules vs Programs. Retrieved April 6, 2018.
- Pomerantz, O., Salzman, P.. (2003, April 4). The Linux Kernel Module Programming Guide. Retrieved April 6, 2018.
- Remillano, A., Urbanec, J. (2019, September 19). Skidmap Linux Malware Uses Rootkit Capabilities to Hide Cryptocurrency-Mining Payload. Retrieved June 4, 2020.
- Richard Purves. (2017, November 9). MDM and the Kextpocalypse. Retrieved September 23, 2021.
- Wardle, P. (2015, April). Malware Persistence on OS X Yosemite. Retrieved April 6, 2018.
- Wardle, P. (2017, September 8). High Sierra’s ‘Secure Kernel Extension Loading’ is Broken. Retrieved April 6, 2018.
- Wikipedia. (2018, March 17). Loadable kernel module. Retrieved April 9, 2018.

### 23. GUI Input Capture

**Description:**
Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task.

**Detection:**
Monitor process execution for unusual programs as well as malicious instances of Command and Scripting Interpreter that could be used to prompt users for credentials. Inspect and scrutinize input prompts for indicators of illegitimacy, such as non-traditional banners, text, timing, and/or sources.

**References:**
- Sergei Shevchenko. (2015, June 4). New Mac OS Malware Exploits Mackeeper. Retrieved July 3, 2017.
- Foss, G. (2014, October 3). Do You Trust Your Computer?. Retrieved December 17, 2018.
- Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware is hungry for credentials. Retrieved July 3, 2017.
- Johann Rehberger. (2021, April 18). Spoofing credential dialogs on macOS Linux and Windows. Retrieved August 19, 2021.
- Nelson, M. (2015, January 21). Phishing for Credentials: If you want it, just ask!. Retrieved December 17, 2018.

### 24. Pass the Ticket

**Description:**
Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system. Valid Kerberos tickets for valid accounts are captured by OS Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access.

**Detection:**
Audit all Kerberos authentication and credential use events and review for discrepancies. Unusual remote authentication events that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity.

**References:**
- Metcalf, S. (2014, November 22). Mimikatz and Active Directory Kerberos Attacks. Retrieved June 2, 2016.
- Deply, B. (2014, January 13). Pass the ticket. Retrieved June 2, 2016.
- Campbell, C. (2014). The Secret Life of Krbtgt. Retrieved December 4, 2014.
- Abolins, D., Boldea, C., Socha, K., Soria-Machado, M. (2016, April 26). Kerberos Golden Ticket Protection. Retrieved July 13, 2017.

---