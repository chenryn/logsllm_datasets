### Policy Management and Validation in System Development

During the system development, it was crucial to remove policies that were no longer relevant, which could otherwise result in "orphaned" policies. To mitigate this risk, we implemented a multi-faceted approach involving thorough validation, continuous monitoring, and daily coordination on development progress and concerns. Additionally, maintaining a single source for policies ensures that orphaned policies are generated only if the functionality is entirely removed, rather than due to missing changes in other areas.

#### Validation Support Tools

The validation support tools proved effective. The ADF connection specifications and dot diagrams provided clearer insights into the enforced policies compared to the JVM policies or the resulting ADF XML policies. Specifically, since the JVM policy author only filled in templates using variables, the actual values for some policy elements were not easily visible until the connection specification was generated.

#### Management Interfaces

We utilized various management interfaces to configure policies for DPASA. For JVM and SELinux, we used text-based configurations with common command-line tools. CSA and ADF, on the other hand, were GUI-based, but we avoided using ADF’s GUI for policy development. Instead, we used command-line tools like `m4` and `awk` to construct and translate the connection specification into an XML format, which could then be imported and assigned to hosts via ADF’s GUI. Unfortunately, CSA’s web-based interface, while user-friendly, was not as effective for integrating into a larger policy environment like DPASA. In the end, command-line support was indispensable for integrating these tools.

#### Lessons Learned

A key lesson was that policy construction should commence only after the system functions are reasonably stable. This can be achieved by either setting a broad initial policy and then fitting the system within it, or by developing the system with security in mind and creating a tight policy once the functionality is stable. Given our need to incrementally develop the system and adhere to a tight schedule, we chose the latter option. This was less of a concern for JVM policies, as they were maintained by developers and easily updated, or for ADF, which was nearly automatically generated from the JVM policy. However, SELinux was particularly sensitive to changes in process behavior. Developers had to be trained to relabel the file system and start authorized processes in the correct SELinux role, or functional tests for policy debugging would be ineffective. SELinux policy refinement required observing the system in permissive mode and collecting denial audits, but full testing in isolation was often impossible, as related applications needed to be running correctly as well. The constantly changing and challenging-to-test system significantly impeded policy development.

### Related Work

Several efforts have demonstrated the practicality of generating policies for multiple enforcement points from a single source, though they have primarily focused on identical or similar defenses at a single layer. These efforts suggest important goals for future work in DiD policy specification. For example, Guttman’s policy language for filtering routers allows for formal verification against desired security properties. If formal semantics were available for even a subset of our defense mechanisms, refinement theory could ensure that DiD is achieved. Bartal et al. introduced Firmato, a policy language for perimeter firewalls, which uses a graphical validation strategy. Their graphs, built directly from generated rules, provide more confidence than our approach, which bases graphs on the specification. Our graphs could be misleading if the graph generator and rule compiler do not share the same semantics. Other related work includes Bradley and Josang’s Mesmerize, a framework for managing network layer defenses, and Uribe and Cheung’s approach for coordinating firewall policy with network intrusion detection strategies. Service Grammars also provide a framework for simplifying configurations based on high-level, special-purpose languages.

Wool’s empirical evidence highlights the difficulty of writing even small security policies, showing that complexity directly affects the number of errors. DPASA, being moderately complex, was likely to have errors, necessitating methods to manage policy complexity.

### Conclusions

In DiD-enabled systems, constructing each policy in isolation is labor-intensive and error-prone. Generating all policies from a single specification, while advocated for specific defense layers, is even more labor-intensive and error-prone for DiD solutions due to the excessive detail required. We advocate a hybrid approach that encourages selective sharing of policy elements, maintains policy autonomy, fosters independence between policy authors, builds policies from observed failures, and integrates validation support for stakeholders. This approach minimizes the risk of exploitable vulnerabilities that could undermine the benefits of DiD.

The success of the resulting policies and their underlying defenses will be measured by their performance against a determined adversary. Preliminary results confirm that a carefully crafted DiD solution is a formidable defense, making such an approach both effective and practical.

### Acknowledgments

We wish to acknowledge the significant contributions of our "Blue" team colleagues at BBN Technologies (specifically Michael Atighetchi and Lyle Sudin), SRI International, Adventium Labs (specifically Richard O’Brien), and the University of Illinois at Urbana-Champaign, as well as the "White" and "Red" teams.

### References

[1] E. Al-Shaer and H. Hamed. Firewall policy advisor for anomaly detection and rule editing. In IEEE/IFIP Integrated Management IM’2003, 2003.
[2] E. Al-Shaer and H. Hamed. Management and translation of filtering security policies. In IEEE International Conference on Communications, 2003.
[3] E. Al-Shaer and H. Hamed. Discovery of policy anomalies in distributed firewalls. In IEEE INFOCOM’04, 2004.
[4] J. H. Allen. The CERT Guide To System and Network Security Practices. Addison Wesley Professional, 2001.
[5] M. Archer, E. Leonard, and M. Pradella. Analyzing security-enhanced Linux policy specifications. In Policies for Distributed Systems and Networks, 2003. Proceedings. POLICY 2003. IEEE 4th International Workshop on, pages 158-169, June 2003.
[6] M. Atighetchi, P. Rubel, P. Pal, J. Chong, and L. Sudin. Networking aspects in the 'DPASA' survivability architecture: An experience report. In The 4th IEEE International Symposium on Network Computing and Applications (IEEE NCA05), 2005.
[7] F. Baboescu and G. Varghese. Fast and scalable conflict detection for packet classifiers. Computer Networks, 42(6):717-735, 2003.
[8] Y. Bartal, A. Mayer, K. Nissim, and A. Wool. Firmato: A novel firewall management toolkit. ACM Trans. Comput. Syst., 22(4):381-420, 2004.
[9] D. Bradley and A. Josang. Mesmerize: An open framework for enterprise security management. In CRPIT ’32: Proceedings of the second workshop on Australasian information security, Data Mining and Web Intelligence, and Software Internationalisation. Australian Computer Society, Inc., 2004.
[10] J. Chong, P. Pal, M. Atigetchi, P. Rubel, and F. Webber. Survivability architecture of a mission critical system: The DPASA example. In Proceedings of the 21st Annual Computer Security Applications Conference. IEEE, 2005.
[11] M. G. Gouda and A. X. Liu. Firewall design: Consistency, completeness, and compactness. In Proceedings of the 24th International Conference on Distributed Computing Systems, 2004.
[12] J. Guttman, A. Herzog, J. Ramsdell, and C. Skorupka. Verifying information flow goals in security-enhanced Linux. Journal of Computer Security, 13(1):115-134, June 2005.
[13] J. D. Guttman. Filtering postures: Local enforcement for global policies. In IEEE Symposium on Security and Privacy, Oakland, CA, 1997. IEEE.
[14] A. Hari, S. Suri, and G. M. Parulkar. Detecting and resolving packet filter conflicts. In Proceedings of IEEE INFOCOM, 2000.
[15] T. Markham, L. Meredith, and C. Payne. Distributed embedded firewalls with virtual private groups. In DARPA Information Survivability Conference and Exposition, 2003, volume 2, pages 81-83, April 2003.
[16] C. Payne and T. Markham. Architecture and applications for a distributed embedded firewall. In 17th Annual Computer Security Applications Conference, December 2001.
[17] X. Qie and S. Narain. Using service grammar to diagnose BGP configuration errors. In LISA ’03: Proceedings of the 17th USENIX conference on System administration, pages 237-246, Berkeley, CA, USA, 2003. USENIX Association.
[18] D. Ryder, D. Levin, and J. Lowry. Defense in depth: A focus on protecting the endpoint clients from network attack. In Proceedings of the IEEE SMC Information Assurance Workshop, June 2002.
[19] T. Stang, F. Pourbayat, M. Burgess, G. Canright, K. Engo, and A. Weltzien. Archipelago: A network security analysis tool. In Proceedings of the 17th Large Installation Systems Administration Conference, 2003.
[20] T. E. Uribe and S. Cheung. Automatic analysis of firewall and network intrusion detection system configurations. In FMSE ’04: Proceedings of the 2004 ACM workshop on Formal methods in security engineering, pages 66-74, New York, NY, USA, 2004. ACM Press.
[21] A. Wool. A quantitative study of firewall configuration errors. Computer, 37(6):62-67, June 2004.
[22] G. Zanin and L. V. Mancini. Towards a formal model for security policies specification and validation in the SELinux system. In SACMAT ’04: Proceedings of the ninth ACM symposium on Access control models and technologies, pages 136-145, New York, NY, USA, 2004. ACM Press.