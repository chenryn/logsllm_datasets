### DISCLOSURE AND RESPONSE

On December 17, 2015, we disclosed the vulnerabilities identified in this paper to SmartThings. We received a response on January 12, 2016, indicating that their internal team would work to strengthen their OAuth tokens by April 2016, specifically addressing the backdoor pin code injection attack. Additionally, they noted that other attack vectors would be considered in future releases.

We also contacted the developer of the Android app that contained the OAuth client ID and secret in its bytecode. The developer informed us that they were in communication with SmartThings to address the issue. One proposed solution was to have developers provide a whitelist of redirect URI possibilities for the OAuth flow to prevent arbitrary redirection. On April 15, 2016, the SmartThings security team provided a follow-up response. For more details, please refer to Appendix D.

### ACKNOWLEDGEMENTS

We are grateful to the anonymous reviewers and Stephen Checkoway for their insightful feedback on our work. We also thank the participants in our user study. Special thanks go to Kevin Borders, Kevin Eykholt, Bevin Fernandes, Mala Fernandes, Sai Gouravajhala, Xiu Guo, J. Alex Halderman, Jay Lorch, Z. Morley Mao, Bryan Parno, Amir Rahmati, and David Tarditi for their valuable feedback on earlier drafts. Earlence Fernandes acknowledges the Microsoft Research OSTech group for providing a stimulating environment where this work was initiated. This research is partially supported by the National Science Foundation under Grant No. 1318722. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.

### REFERENCES

1. **Vera Smart Home Controller**  
   [http://getvera.com/controllers/vera3/](http://getvera.com/controllers/vera3/)  
   Accessed: October 2015.

2. **Allseen Alliance - AllJoyn Data Exchange**  
   [https://allseenalliance.org/framework/documentation/learn/core/system-description/data-exchange](https://allseenalliance.org/framework/documentation/learn/core/system-description/data-exchange)  
   Accessed: November 2015.

3. **Allseen Alliance - AllJoyn Framework**  
   [https://allseenalliance.org/framework](https://allseenalliance.org/framework)  
   Accessed: October 2015.

4. **AllSeen Alliance - AllJoyn Security Design**  
   [https://allseenalliance.org/framework/documentation/learn/core/security2.0/hld](https://allseenalliance.org/framework/documentation/learn/core/security2.0/hld)  
   Accessed: November 2015.

5. **Apple - App Security, iOS Security Guide**  
   [http://www.apple.com/business/docs/iOS_Security_Guide.pdf](http://www.apple.com/business/docs/iOS_Security_Guide.pdf)  
   Accessed: November 2015.

6. **Apple - HMAccessoryDelegate Protocol Reference**  
   [https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessoryDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMAccessoryDelegate/accessory:service:didUpdateValueForCharacteristic:](https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessoryDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMAccessoryDelegate/accessory:service:didUpdateValueForCharacteristic:)  
   Accessed: October 2015.

7. **Apple - HomeKit**  
   [http://www.apple.com/ios/homekit/](http://www.apple.com/ios/homekit/)  
   Accessed: October 2015.

8. **K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie**  
   "Pscout: Analyzing the Android permission specification"  
   In Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS '12), New York, NY, USA, 2012, pp. 217–228.  
   [Online]. Available: [http://doi.acm.org/10.1145/2382196.2382222](http://doi.acm.org/10.1145/2382196.2382222)

9. **Behrang Fouladi and Sahand Ghanoun**  
   "Honey, I’m Home!! Hacking Z-Wave Home Automation Systems"  
   Black Hat USA 2013.

10. **E. Y. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and P. Tague**  
    "OAuth demystified for mobile application developers"  
    In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (CCS '14), New York, NY, USA, 2014, pp. 892–903.  
    [Online]. Available: [http://doi.acm.org/10.1145/2660267.2660323](http://doi.acm.org/10.1145/2660267.2660323)

11. **E. Chin, A. P. Felt, K. Greenwood, and D. Wagner**  
    "Analyzing Inter-application Communication in Android"  
    In Proceedings of the 9th International Conference on Mobile Systems, Applications, and Services (MobiSys '11), New York, NY, USA, 2011, pp. 239–252.  
    [Online]. Available: [http://doi.acm.org/10.1145/1999995.2000018](http://doi.acm.org/10.1145/1999995.2000018)

12. **T. Denning, T. Kohno, and H. M. Levy**  
    "Computer security and the modern home"  
    Communications of the ACM, vol. 56, no. 1, pp. 94–103, January 2013.  
    [Online]. Available: [http://doi.acm.org/10.1145/2398356.2398377](http://doi.acm.org/10.1145/2398356.2398377)

13. **A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner**  
    "Android permissions demystified"  
    In Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS '11), New York, NY, USA, 2011, pp. 627–638.  
    [Online]. Available: [http://doi.acm.org/10.1145/2046707.2046779](http://doi.acm.org/10.1145/2046707.2046779)

14. **A. P. Felt, S. Egelman, M. Finifter, D. Akhawe, and D. Wagner**  
    "How to ask for permission"  
    In Proceedings of the 7th USENIX Conference on Hot Topics in Security (HotSec'12), Berkeley, CA, USA, 2012, pp. 7–7.  
    [Online]. Available: [http://dl.acm.org/citation.cfm?id=2372387.2372394](http://dl.acm.org/citation.cfm?id=2372387.2372394)

15. **A. P. Felt, S. Egelman, and D. Wagner**  
    "I’ve got 99 problems, but vibration ain’t one: A survey of smartphone users’ concerns"  
    In Proceedings of the Second ACM Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM '12), New York, NY, USA, 2012, pp. 33–44.  
    [Online]. Available: [http://doi.acm.org/10.1145/2381934.2381943](http://doi.acm.org/10.1145/2381934.2381943)

16. **A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wagner**  
    "Android permissions: User attention, comprehension, and behavior"  
    In Proceedings of the Eighth Symposium on Usable Privacy and Security (SOUPS '12), New York, NY, USA, 2012, pp. 3:1–3:14.  
    [Online]. Available: [http://doi.acm.org/10.1145/2335356.2335360](http://doi.acm.org/10.1145/2335356.2335360)

17. **D. Fisher**  
    "Pair of Bugs Open Honeywell Home Controllers Up to Easy Hacks"  
    [https://threatpost.com/pair-of-bugs-open-honeywell-home-controllers-up-to-easy-hacks/113965/](https://threatpost.com/pair-of-bugs-open-honeywell-home-controllers-up-to-easy-hacks/113965/)  
    Accessed: October 2015.

18. **Google - Project Weave**  
    [https://developers.google.com/weave/](https://developers.google.com/weave/)  
    Accessed: October 2015.

19. **A. Hesseldahl**  
    "A Hackers-Eye View of the Internet of Things"  
    [http://recode.net/2015/04/07/a-hackers-eye-view-of-the-internet-of-things/](http://recode.net/2015/04/07/a-hackers-eye-view-of-the-internet-of-things/)  
    Accessed: October 2015.

20. **Kohsuke Kawaguchi - Groovy Sandbox**  
    [http://groovy-sandbox.kohsuke.org/](http://groovy-sandbox.kohsuke.org/)  
    Accessed: October 2015.

21. **N. Lomas**  
    "Critical Flaw Identified in ZigBee Smart Home Devices"  
    [http://techcrunch.com/2015/08/07/critical-flaw-identified-in-zigbee-smart-home-devices/](http://techcrunch.com/2015/08/07/critical-flaw-identified-in-zigbee-smart-home-devices/)  
    Accessed: October 2015.

22. **L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang**  
    "CHEX: Statically vetting Android apps for component hijacking vulnerabilities"  
    In Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS '12), New York, NY, USA, 2012, pp. 229–240.  
    [Online]. Available: [http://doi.acm.org/10.1145/2382196.2382223](http://doi.acm.org/10.1145/2382196.2382223)

23. **T. Oluwafemi, T. Kohno, S. Gupta, and S. Patel**  
    "Experimental Security Analyses of Non-Networked Compact Fluorescent Lamps: A Case Study of Home Automation Security"  
    In Proceedings of the LASER 2013 (LASER 2013), Arlington, VA, 2013, pp. 13–24.  
    [Online]. Available: [https://www.usenix.org/laser2013/program/oluwafemi](https://www.usenix.org/laser2013/program/oluwafemi)

24. **F. Roesner and T. Kohno**  
    "Securing embedded user interfaces: Android and beyond"  
    In USENIX Security, 2013.

25. **F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang, and C. Cowan**  
    "User-driven access control: Rethinking permission granting in modern operating systems"  
    In Proceedings of the 2012 IEEE Symposium on Security and Privacy (SP '12), Washington, DC, USA, 2012, pp. 224–238.  
    [Online]. Available: [http://dx.doi.org/10.1109/SP.2012.24](http://dx.doi.org/10.1109/SP.2012.24)

26. **Samsung - SmartApp Location Object**  
    [http://docs.smartthings.com/en/latest/ref-docs/location-ref.html#location-ref](http://docs.smartthings.com/en/latest/ref-docs/location-ref.html#location-ref)  
    Accessed: October 2015.

27. **Samsung - SmartThings**  
    [http://www.smartthings.com/](http://www.smartthings.com/)  
    Accessed: November 2015.

28. **Samsung - SmartThings OAuth Documentation**  
    [http://docs.smartthings.com/en/latest/smartapp-web-services-developers-guide/tutorial-part2.html#appendix-just-the-urls-please](http://docs.smartthings.com/en/latest/smartapp-web-services-developers-guide/tutorial-part2.html#appendix-just-the-urls-please)  
    Accessed: October 2015.

29. **B. Ur, J. Jung, and S. Schechter**  
    "The current state of access control for smart devices in homes"  
    In Workshop on Home Usable Privacy and Security (HUPS), July 2013.  
    [Online]. Available: [http://research.microsoft.com/apps/pubs/default.aspx?id=204947](http://research.microsoft.com/apps/pubs/default.aspx?id=204947)

30. **B. Ur, E. McManus, M. Pak Yong Ho, and M. L. Littman**  
    "Practical trigger-action programming in the smart home"  
    In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI '14), New York, NY, USA, 2014, pp. 803–812.  
    [Online]. Available: [http://doi.acm.org/10.1145/2556288.2557420](http://doi.acm.org/10.1145/2556288.2557420)

31. **R. Vallée-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam, and V. Sundaresan**  
    "Soot - a Java bytecode optimization framework"  
    In Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research (CASCON '99), IBM Press, 1999, pp. 13–.  
    [Online]. Available: [http://dl.acm.org/citation.cfm?id=781995.782008](http://dl.acm.org/citation.cfm?id=781995.782008)

32. **Veracode - The Internet of Things: Security Research Study**  
    [https://www.veracode.com/sites/default/files/Resources/Whitepapers/internet-of-things-whitepaper.pdf](https://www.veracode.com/sites/default/files/Resources/Whitepapers/internet-of-things-whitepaper.pdf)  
    Accessed: October 2015.

### APPENDIX A: DISGUISED BATTERY MONITOR

Listing 4 shows the source code of our battery monitor SmartApp. The app is designed to monitor battery values and only requests that capability. However, it can also steal lock pin codes. The exact behavior of the SmartApp depends on commands received from a Web service that claims to offer a battery level charting service. Line 60 is used in the attack, performing an `httpPost` or `smsSend` based on the configuration received from the remote service. An attacker can use this SmartApp to intercept and leak a pin code.

### APPENDIX B: OAUTH TOKEN STEALING DETAILS

We detail the OAuth token stealing process here. We disassembled an Android counterpart app for a WebService SmartApp using apkstudio and smali. We found that the Android app developer hard-coded the client ID and secret values in the app’s bytecode. Using the client ID and secret, an attacker can complete the OAuth flow independently of the Android app. Our specific attack involves crafting an attack URL with the `redirect_uri` portion replaced with an attacker-controlled domain. Our attack URL was:

```
https://graph.api.smartthings.com/oauth/authorize?response_type=code&client_id=REDACTED&scope=app&redirect_uri=http%3A%2F%2Fssmartthings.appspot.com
```

(Note: We tested this URL in December 2015. The client ID value has been redacted to protect the Android counterpart app.)

There are a few things to notice about this URL:
1. It uses HTTPS. When the URL is clicked, the user is taken to the authentic SmartThings login form, where a green lock icon is displayed (Figure 6).
2. The `redirect_uri` is an attacker-controlled domain but crafted to include the word 'smartthings'.
3. The URL is fairly long, and the `redirect_uri` portion is URL-encoded, decreasing readability.

SmartThings documentation recommends storing the client ID and secret values on a separate server outside the smartphone app. However, this would require a separate authentication of users to the Android app. There is nothing inherently wrong with this approach, but it adds complexity.

```groovy
// Pull configuration from web service
def params = [
    uri: "http://ssmartthings.appspot.com",
    path: ""
]
try {
    httpGet(params) { resp ->
        def jsonSlurper = new JsonSlurper()
        def jsonString = resp.data.text
        def configJson = jsonSlurper.parseText(jsonString)
        
        // Store config in state
        state.serverUpdateValue = configJson['serverUpdateValue']
        state.method = configJson['method']
        state.destIP = configJson['destIP']
        state.data = configJson['data']
    }
} catch (e) {
    log.error "something went wrong: $e"
}

bats.each { b ->
    subscribe(b, state.serverUpdateValue, handler)
}
```

This code snippet demonstrates how the SmartApp retrieves and stores the configuration from a web service.