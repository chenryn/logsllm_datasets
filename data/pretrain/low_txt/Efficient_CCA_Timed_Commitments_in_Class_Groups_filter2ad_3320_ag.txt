### Security Parameters and Communication Size Costs

- **ùúÜ (bits)**
  - 112
  - 128
  - 112 (H)
  - 128 (H)

- **crs (kB)**
  - 1.24
  - 1.77
  - 0.47
  - 0.62

- **ùëê (kB)**
  - 667.88
  - 1276.94
  - 0.4
  - 0.52

- **ùúã (kB)**
  - 1721.34
  - 3213
  - 0.48
  - 0.64

For the computations, we used SHA3-256 to implement the random oracles H1 and H2, and SHAKE256 for H3.

### Communication Size Costs

Our time-lock puzzle \( Z \) consists of an element from \( C_l(\Delta_K) \) and one from \( C_l(\Delta_q) \). At the 112-bit (resp. 128-bit) security level, this totals 3208 bits (resp. 4166 bits). Using a recent compression technique [40], this can be reduced by a factor of 3/4. The sizes for our CCA timed-commitment are detailed in Table 1: \( c \) contains a puzzle \( Z \) along with ElGamal encryptions of the bits of the randomness used to create \( Z \) in both the class group \( G \) and the prime order group \( \tilde{G} \), and \( \pi \) is the NIZK proof.

A heuristic variant can significantly reduce these sizes. In this variant, we replace the complex NIZK proof with a sigma protocol that proves the well-formedness of the time-lock puzzle \( Z \), assuming straight-line extractability. Specifically, to prove that \( (Z_1, Z_2) = (G^r, \psi_q(H^r) \cdot F_m) \) relative to \( G \) and \( H \) for some \( r \) and \( m \), we adapt the proof from [25] that a CL ciphertext is well-formed to our fast variant, allowing direct extraction of the message \( m \). This reduces the size of the CRS as we do not need to define \( \tilde{G} \). Additionally, the size of \( c \) shrinks because we do not need to re-encrypt the randomness \( r \) bit by bit. The proof \( \pi \) now only contains the NIZK of well-formedness of a ciphertext under the fast variant of CL.

### Computation Time Costs

We set the parameter \( T = 2^{26} \), corresponding to a time-lock opening time of approximately 45 minutes for \( \lambda = 112 \) (resp. one hour for \( \lambda = 128 \)) on our local machine. This corresponds to the timing of \( TForceOp \). The running time of \( TSetup \) is dominated by the generation of the puzzle; the group generators \( CGGen \) and \( GGen \) take just a few seconds. The running times of \( TCom \) and \( TVfy \) do not depend on \( T \) and are dominated by the computation of a large number of exponentiations. These phases can be parallelized, reducing the running times by a factor of \( N \) using \( N \) threads. The corresponding benchmarks are in Table 2. Despite the complexity of our proven NIZK proof of well-formedness, the timings remain practical, especially with parallelization for \( TCom \) and \( TVfy \) and applications with large time-lock opening times. We also report running times for the heuristic version (lines (H)), where we achieve a highly efficient protocol. Table 3 shows timings with \( T = 2^{19} \), resulting in an opening time of around 5 seconds, confirming that \( TCom \) and \( TVfy \) are independent of \( T \).

### Parallelization

Our implementation uses only a single thread and is therefore non-optimized. We expect substantial performance improvements with optimizations. Independent exponentiations during commitment generation can be performed in parallel using several threads. For example, a workstation with two Dodeca Core processors can generate a 112-bit security commitment in 5 seconds using 48 threads. Further, there is significant room for improvement in the basic arithmetic in class groups, which is largely unexplored compared to finite fields.

### Conclusions

In this work, we constructed a timed commitment scheme with a transparent setup, homomorphic evaluation properties, and CCA security. Along the way, we introduced new technical tools, such as a homomorphic time-lock puzzle scheme over class groups and a new simulation-extractable NIZK proof of well-formedness, which may be of independent interest. As an application, we proposed a new distributed randomness generation protocol that satisfies many desirable efficiency and security properties. Future work will explore further applications of our randomness generation protocol and its integration into complex scenarios such as cryptocurrencies or blockchain consensus.

### Acknowledgements

We thank the anonymous reviewers for their comments in improving the work. This work was supported by the French ANR ALAMBIC project (ANR-16-CE39-0006) and partially supported by the Deutsche Forschungsgemeinschaft (DFG ‚Äì German Research Foundation) under 442893093, and by the state of Bavaria at the Nuremberg Campus of Technology (NCT).

### References

[1] Navid Alamati, Pedro Branco, Nico D√∂ttling, Sanjam Garg, Mohammad Haji-Abadi, and Sihang Pu. 2021. Laconic Private Set Intersection and Applications. Cryptology ePrint Archive, Report 2021/728. https://ia.cr/2021/728.

[2] Benny Applebaum, Yuval Ishai, and Eyal Kushilevitz. 2011. How to Garble Arithmetic Circuits. In 52nd FOCS, Rafail Ostrovsky (Ed.). IEEE Computer Society Press, Palm Springs, CA, USA, 120‚Äì129. https://doi.org/10.1109/FOCS.2011.40

[3] Carsten Baum, Bernardo David, Rafael Dowsley, Jesper Buus Nielsen, and Sabine Oechsner. 2020. TARDIS: A Foundation of Time-Lock Puzzles in UC. Cryptology ePrint Archive, Report 2020/537. https://eprint.iacr.org/2020/537.

[4] Eli Ben-Sasson, Iddo Bentov, Yinon Horesh, and Michael Riabzev. 2018. Scalable, Transparent, and Post-Quantum Secure Computational Integrity. Cryptology ePrint Archive, Report 2018/046. https://eprint.iacr.org/2018/046.

[5] Iddo Bentov, Ariel Gabizon, and David Zuckerman. 2016. Bitcoin Beacon. arXiv:1605.04559 [cs.CR].

[6] Jean-Fran√ßois Biasse, Michael J. Jacobson, and Alan K. Silvester. 2010. Security Estimates for Quadratic Field Based Cryptosystems. In ACISP 10 (LNCS, Vol. 6168), Ron Steinfeld and Philip Hawkes (Eds.). Springer, Heidelberg, Germany, Sydney, NSW, Australia, 233‚Äì247.

[7] Nir Bitansky, Shafi Goldwasser, Abhishek Jain, Omer Paneth, Vinod Vaikuntanathan, and Brent Waters. 2016. Time-Lock Puzzles from Randomized Encodings. In ITCS 2016, Madhu Sudan (Ed.). ACM, Cambridge, MA, USA, 345‚Äì356. https://doi.org/10.1145/2840728.2840745

[8] Manuel Blum. 1982. Coin Flipping by Telephone. In Proc. IEEE Spring COMPCOM.

[9] Manuel Blum, Paul Feldman, and Silvio Micali. 1988. Non-Interactive Zero-Knowledge and Its Applications (Extended Abstract). In 20th ACM STOC. ACM Press, Chicago, IL, USA, 103‚Äì112. https://doi.org/10.1145/62212.62222

[10] Alexandra Boldyreva and Daniele Micciancio (Eds.). 2019. CRYPTO 2019, Part I.

[11] Dan Boneh, Joseph Bonneau, Benedikt B√ºnz, and Ben Fisch. 2018. Verifiable Delay Functions. In CRYPTO 2018, Part I (LNCS, Vol. 10991), Hovav Shacham and Alexandra Boldyreva (Eds.). Springer, Heidelberg, Germany, Santa Barbara, CA, USA, 757‚Äì788. https://doi.org/10.1007/978-3-319-96884-1_25

[12] Dan Boneh, Benedikt B√ºnz, and Ben Fisch. 2019. Batching Techniques for Accumulators with Applications to IOPs and Stateless Blockchains, See [10], 561‚Äì586. https://doi.org/10.1007/978-3-030-26948-7_20

[13] Dan Boneh and Moni Naor. 2000. Timed Commitments. In CRYPTO 2000 (LNCS, Vol. 1880), Mihir Bellare (Ed.). Springer, Heidelberg, Germany, Santa Barbara, CA, USA, 236‚Äì254. https://doi.org/10.1007/3-540-44598-6_15

[14] Joseph Bonneau, Jeremy Clark, and Steven Goldfeder. 2015. On Bitcoin as a Public Randomness Source. Cryptology ePrint Archive, Report 2015/1015. https://eprint.iacr.org/2015/1015.

[15] Zvika Brakerski, Nico D√∂ttling, Sanjam Garg, and Giulio Malavolta. 2019. Leveraging Linear Decryption: Rate-1 Fully-Homomorphic Encryption and Time-Lock Puzzles. In TCC 2019, Part II (LNCS, Vol. 11892), Dennis Hofheinz and Alon Rosen (Eds.). Springer, Heidelberg, Germany, Nuremberg, Germany, 407‚Äì437. https://doi.org/10.1007/978-3-030-36033-7_16

[16] J. Buchmann and U. Vollmer. 2007. Binary Quadratic Forms. An Algorithmic Approach. Springer.

[17] Johannes Buchmann and Hugh C. Williams. 1988. A Key-Exchange System Based on Imaginary Quadratic Fields. Journal of Cryptology 1, 2 (June 1988), 107‚Äì118. https://doi.org/10.1007/BF02351719

[18] Benedikt B√ºnz, Ben Fisch, and Alan Szepieniec. 2020. Transparent SNARKs from DARK Compilers. In Advances in Cryptology ‚Äì EUROCRYPT 2020, Anne Canteaut and Yuval Ishai (Eds.). Springer International Publishing, Cham, 677‚Äì706.

[19] Benedikt B√ºnz, Ben Fisch, and Alan Szepieniec. 2020. Transparent SNARKs from DARK Compilers. In EUROCRYPT 2020, Part I (LNCS, Vol. 12105), Anne Canteaut and Yuval Ishai (Eds.). Springer, Heidelberg, Germany, Zagreb, Croatia, 677‚Äì706. https://doi.org/10.1007/978-3-030-45721-1_24

[20] Benedikt B√ºnz, Steven Goldfeder, and Joseph Bonneau. 2017. Proofs-of-Delay and Randomness Beacons in Ethereum.

[21] Jeffrey Burdges and Luca De Feo. 2020. Delay Encryption. Cryptology ePrint Archive, Report 2020/638. https://eprint.iacr.org/2020/638.

[22] Christian Cachin, Klaus Kursawe, and Victor Shoup. 2000. Random Oracles in Constantipole: Practical Asynchronous Byzantine Agreement Using Cryptography (Extended Abstract). In 19th ACM PODC, Gil Neiger (Ed.). ACM, Portland, OR, USA, 123‚Äì132. https://doi.org/10.1145/343477.343531

[23] Ignacio Cascudo and Bernardo David. 2017. SCRAPE: Scalable Randomness Attested by Public Entities. In ACNS 17 (LNCS, Vol. 10355), Dieter Gollmann, Atsuko Miyaji, and Hiroaki Kikuchi (Eds.). Springer, Heidelberg, Germany, Kanazawa, Japan, 537‚Äì556. https://doi.org/10.1007/978-3-319-61204-1_27

[24] Guilhem Castagnos, Dario Catalano, Fabien Laguillaumie, Federico Savasta, and