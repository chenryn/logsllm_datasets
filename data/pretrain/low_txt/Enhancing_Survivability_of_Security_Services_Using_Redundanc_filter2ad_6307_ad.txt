### Table 1. Roundtrip Times (in ms)

| 0.428 | 0.492 | 0.761 | 0.279 | 0.309 | 0.294 |
|---|---|---|---|---|---|
| Cost over IP 1 | Cost over Base I | I | I | 1 | n/a | n/a |
| 0.120 | 0.259 | 0.197 | 0.266 | 0.332 | 0.353 |
| 2.830 | 0.553 | 0.270 | 0.354 | 0.385 | 0.718 |
| 0.236 | 0.266 | 0.251 |

### Algorithmic and Implementation Constraints

Both algorithmic and property-based constraints, as well as implementation-specific constraints, are integral to the design of our Cactus-based prototype. **Algorithmic constraints** arise from the inherent nature of the properties being enforced or the algorithms used. For example, the non-repudiation micro-protocol requires the use of an authenticity micro-protocol based on public keys. Similarly, any micro-protocol that uses a key must either have the key provided at session creation or include a key distribution micro-protocol.

Other algorithmic constraints dictate the order in which various security algorithms are applied. For instance, all attack prevention micro-protocols should execute before privacy, integrity, or authenticity micro-protocols at the sender to ensure that the mechanisms used for attack prevention are protected from modification. Non-repudiation micro-protocols should be executed immediately before authentication at the receiver, ensuring that only the sender’s public key is required to later prove the message's origin. Additional ordering constraints are detailed elsewhere [1, 2]. A related issue, not addressed here but considered elsewhere, is the effectiveness of multiple encryption and custom security solutions [17, 24].

**Implementation constraints** result from the specific design of the SecComm micro-protocols. Compared to systems supporting linear or hierarchical composition models, the non-hierarchical model supported by Cactus introduces minimal implementation constraints on configurability. With Cactus, it is generally possible to implement independent service properties so that this independence is maintained in the micro-protocol realization. When extra constraints do arise, it is usually because making additional assumptions about the presence of other micro-protocols significantly simplifies the implementation.

In the current SecComm prototype, the only additional implementation constraint is that each integrity and replay prevention micro-protocol can be used at most once in a given configuration. For example, two instances of MDSIntegrity cannot be used together, while MDSIntegrity and SHAIntegrity can. This restriction results from the use of fixed message attribute names for each micro-protocol, which could be avoided by dynamically assigning attribute names at startup time.

### Related Work

Related work includes the general use of redundancy to enhance survivability, as well as research more directly related to secure communication. Redundancy has traditionally been used to improve file system fault tolerance, but different redundancy techniques have also been used to increase security or both fault tolerance and security. For example, cryptographic methods were used to store data on untrusted file servers [9], and data fragmentation and replication techniques have been used to prevent intruders from accessing, modifying, or destroying information [6, 8, 14]. Recent developments provide similar guarantees and also ensure the anonymity of the information publisher [3, 26]. Although none of this research is framed in terms of survivability, it can be viewed in that context.

Other approaches do not replicate data but introduce redundant detection components. Examples include Tripwire [15], which detects changes in files by maintaining checksums and periodically comparing the files against these checksums, and StackGuard [4], which detects buffer overflow attacks by storing a secret “canary” word in the stack and checking it upon function call return. Intrusion detection, in general, augments a system with a component that detects undesired behavior that would otherwise be allowed by the security mechanisms of the given system [5].

Work specifically related to SecComm can be divided into secure communication standards and other configurable secure communication services. Some degree of customization is supported in several recent standards. For example, IPsec allows a choice of security options, including message integrity and privacy using a selected cryptographic method [13]. It is also possible to apply multiple security methods to a given communication connection. TLS (Transport Level Security) [7] offers a choice of privacy (e.g., DES or RC4), integrity (e.g., keyed SHA or MD5), and optional message compression, but does not directly support the use of redundant methods. In general, SecComm offers more flexible options for using redundancy techniques to enhance the survivability of such services.

Configurable secure communication services have been implemented using various configuration frameworks, including the x-kernel [20], Ensemble [22], and the framework described in [19]. All these models allow arbitrary combinations of security components, but their structure is limiting compared to Cactus and would make it difficult to implement some of our more dynamic redundancy techniques. However, Antigone [16] has adopted an approach similar to Cactus, using micro-protocols and composite protocols to implement secure group communication with customizable policies, including rekeying and message security. To our knowledge, none of these projects have explored the use of redundancy techniques in security.

### Conclusions

This paper discusses the use of redundant techniques as a basis for improving the survivability of security services. While the idea of combining fault tolerance and security is not new, this paper promotes a more general application of redundancy techniques in different areas of security and introduces a convenient implementation platform for such techniques. Our approach can also be viewed as a way of artificially increasing the diversity of the system, which has been advocated elsewhere as a potential approach to improving survivability [23]. We also described SecComm, a security service that allows customization of security attributes at a fine-grain level. While similar in spirit to existing protocols such as IPsec and TLS, SecComm goes beyond these to support more attributes and more variants, all within a flexible and extensible implementation framework based on micro-protocols and events. The design also decouples to a large extent the security aspects and the communication aspects of the problem.

Future work will focus on using the Cactus framework to implement dynamically adaptable security services, where the security mechanisms are changed at runtime in reaction to changed security requirements (e.g., suspected intrusion) or changes in available resources. The Cactus framework makes it easy to activate and deactivate micro-protocols at runtime, and we have designed and implemented coordination mechanisms that allow adaptations across machines and across system layers to occur smoothly without interrupting normal operation. Our ultimate goal is to use this fine-grain configurability and fast adaptation ability as the basis for an inherently survivable system architecture that can automatically react to threats in the execution environment.

### Acknowledgments

Gary Wong implemented the Cactus framework used for the SecComm implementation. He also provided excellent comments and suggestions that improved the paper.

### References

1. M. Abadi and R. Needham. Prudent engineering practice for cryptographic protocols. IEEE Transactions on Software Engineering, 22(1):6-15, Jan 1996.
2. R. Anderson and R. Needham. Robustness principles for public key protocols. In Proceedings of Crypto’95, pages 236-247, 1995.
3. I. Clarke, O. Sandberg, B. Wiley, and T. Hong. Freenet: A distributed anonymous information storage and retrieval system. In Proceedings of the ISOC Workshop on Design Issues in Anonymity and Unobservability, Berkeley, CA, Jul 2000.
4. C. Cowan, P. Wagle, C. Pu, S. Beattie, and J. Walpole. Buffer overflows: Attacks and defenses for the vulnerability of the decade. In DARPA Information Survivability Conference and Exposition (DISCEX 2000), pages 119-129, Hilton Head, SC, Jan 2000.
5. D. Denning. An intrusion-detection model. IEEE Transactions on Software Engineering, SE-13(2):222-232, Feb 1987.
6. Y. Deswarte, J.-C. Fabre, J.-M. Fray, D. Powell, and P.-G. Ranea. Saturne: A distributed computing system which tolerates faults and intrusions. In Proceedings of the Workshop on Future Trends of Distributed Computing Systems, pages 329-338, Hong Kong, Sep 1990.
7. T. Dierks and C. Allen. The TLS protocol, version 1.0. RFC (Standards Track) 2246, Jan 1999.
8. J.-C. Fabre, Y. Deswarte, and B. Randell. Designing secure and reliable applications using fragmentation-redundancy-scattering: An object-oriented approach. In Proceedings of the 1st European Dependable Computing Conference, pages 21-38, Berlin, Germany, Oct 1994.
9. J. Fraga and D. Powell. A fault and intrusion-tolerant file system. In Proceedings of the IFIP 3rd International Conference on Computer Security, pages 203-218, Dublin, Ireland, 1985.
10. P. Gutmann. Cryptlib. Department of Computer Science, University of Auckland, 1998.
11. M. Hiltunen, R. Schlichting, X. Han, M. Cardozo, and R. Das. Real-time dependable channels: Customizing QoS attributes for distributed systems. IEEE Transactions on Parallel and Distributed Systems, 10(6):600-612, Jun 1999.
12. N. Hutchinson and L. Peterson. The x-kernel: An architecture for implementing network protocols. IEEE Transactions on Software Engineering, 17(1):64-76, Jan 1991.
13. S. Kent and R. Atkinson. Security architecture for the internet protocol. RFC (Standards Track) 2401, Nov 1998.
14. H. Kiliccote and P. Khosla. Borg: A scalable and secure distributed information system. In Proceedings of the Information Survivability Workshop 1998, pages 101-105, Orlando, FL, Oct 1998.
15. G. Kim and E. Spafford. The design and implementation of Tripwire: A file system integrity checker. In 2nd ACM Conference on Computer and Communications Security, pages 18-29, Fairfax, Virginia, Nov 1994.
16. P. McDaniel, A. Prakash, and P. Honeyman. Antigone: A flexible framework for secure group communication. In Proceedings of the 8th USENIX Security Symposium, pages 99-114, Aug 1999.
17. R. Merkle and M. Hellman. On the security of multiple encryption. Communications of the ACM, 24(7):465-467, Jul 1981.
18. A. Montz, D. Mosberger, S. O’Malley, L. Peterson, and T. Proebsting. Scout: A communications-oriented operating system. In Proceedings of the Hot OS, May 1995.
19. P. Nikander and A. Karila. A Java Beans component architecture for cryptographic protocols. In Proceedings of the 7th USENIX Security Symposium, San Antonio, TX, Jan 1998.
20. H. Orman, S. O’Malley, R. Schroeppel, and D. Schwartz. Paving the road to network security or the value of small cobblestones. In Proceedings of the 1994 Internet Society Symposium on Network and Distributed System Security, Feb 1994.
21. F. Reynolds. The OSF real-time micro-kernel. Technical report, OSF Research Institute, 1995.
22. O. Rodeh, K. Birman, M. Hayden, Z. Xiao, and D. Dolev. The architecture and performance of security protocols in the Ensemble group communication system. Technical Report TR98-1703, Department of Computer Science, Cornell University, Dec 1998.
23. F. Schneider, editor. Trust in Cyberspace. Committee on Information Systems Trustworthiness, National Research Council, National Academy Press, Washington, D.C., Sep 1998.
24. B. Schneier. Applied Cryptography. John Wiley & Sons, Inc., New York, 1994.
25. F. Travostino, E. Menze, and F. Reynolds. Paths: Programming with system resources in support of real-time distributed applications. In Proceedings of the IEEE Workshop on Object-Oriented Real-Time Dependable Systems, Feb 1996.
26. M. Waldman, A. Rubin, and L. Cranor. Publius: A robust, tamper-evident, censorship-resistant, web publishing system. In Proceedings of the 9th USENIX Security Symposium, pages 59-72, Aug 2000.