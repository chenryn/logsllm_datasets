### Optimized Text

#### IV. Challenges in Conducting Generic Turing Tests
If users are not familiar with Turing tests or have an unusually strong desire to join a channel, it becomes difficult to perform generic Turing tests on IRC or Meebo networks. This highlights that although P0 probing can be simple and effective (if users are educated), there is still a need for alternative and transparent techniques that do not require explicit user education, such as our P1-P5 techniques.

#### V. Policy Implications and Limitations

##### A. Policy Concerns
In some cases, there may be legal "bots," such as legitimate client-side programs or automatic scripts that build their application logic over chat protocols like IRC. For example, some chat bots [8] can also be detected by BotProbe. A possible solution is to whitelist these legitimate applications if they are critical and should not be disturbed (we expect such applications to be few). However, we believe that probing a pure chat bot is not critical, and the detection of such a chat bot is not considered a false positive. Furthermore, several heuristics can help differentiate these chat bots from real malicious bots. For instance, unlike malicious bots, chat bots are unlikely to generate activity responses (e.g., scan responses). Additionally, we can use group properties (similar to the group analysis in BotSniffer [14] and BotMiner [12]) to differentiate a malicious botnet, where clients in the same channel are mostly bots, from a normal human chat channel with mostly humans and very few chat bots.

Our active probe techniques might be controversial because they alter network flows to human users and may replay potentially malicious commands. In Section III, we discussed the tradeoff between detection accuracy and disturbance to human users, and various means to mitigate interference with legitimate chat sessions. We now consider the potential policy implications of replaying a "potentially malicious command packet." First, to minimize liability issues, only packets inbound to the local network should be tampered with by BotProbe. Second, this potentially malicious command has already been transmitted into our network and executed on the local host before our probing. Third, if the purpose of the command is information gathering (e.g., .sysinfo), then the first command-response likely leaks enough information, and further replays are unlikely to leak more information or cause additional harm. In summary, although controversial, we believe the benefits of actively probing suspicious sessions could outweigh the potential disturbances in many cases. A more formal study of cost-benefit analysis and risk assessment is needed, and we leave this as future work.

##### B. Limitations and Potential Solutions
As stated in Section II, BotProbe has clear assumptions that limit its application to a certain class of botnets using chatting-like C&C. Next, we describe some possible evasions, although we have not observed real examples yet, and discuss potential solutions.

- **Strong Encryption**: Active probing techniques cannot identify botnet C&C channels that use strong encryption schemes (e.g., SSH, SSL), making them resilient to replay attacks. Note, however, that existing passive perimeter monitoring strategies cannot detect such channels either, and most contemporary IRC bots avoid or use weak encryption/obfuscation schemes. At a minimum, BotProbe raises the bar and forces all botnets to adopt strongly encrypted communications. Arguably, using such strong encryption channels sometimes may actually expose them as suspicious and thus not desired by botmasters in some cases. We envision that combining both network- and host-based monitoring could be helpful in recognizing botnets using strong encryption, and we leave this as future work.
  
- **Timer-Based Evasions**: Knowledgeable adversaries could design bots with programmed timers that greatly delay the response time or limit the number of commands of the same type that can be issued to the bot within a certain time window. By using such timers, a bot can potentially evade our Single-Binary-Response-Hypothesis algorithm. However, this would also reduce the efficiency of the botnet because the botmaster cannot command the botnet promptly or repeat the same task for a certain time. Our potential solution against such an attack is to randomize the delay in command replays.

- **Stateful C&C Protocols**: Our P1 and P2 probing techniques assume a stateless C&C protocol, i.e., we can replay the observed command several times, and the bot always responds similarly to the same command. In the future, botmasters may create a stateful command processor that can detect duplicate commands, e.g., by using a timestamp or sequence number with every command sent, making simple replay ineffective. Most contemporary IRC botnet command-response protocols are stateless and deterministic. Additionally, our P0 probing can still work even in this evasion. To counter this possible future evasion, we describe a potential solution if there are multiple command-response rounds and multiple clients in the monitored network. Instead of replaying packets, we could intercept and modify chatting packets sent to subsequent clients using P4 and P5 probing techniques. By intentionally modifying the command sent to some clients while leaving commands to other clients untouched, we could measure the difference in response between messages, which would be analogous to replaying the command to the same client several times in an Interleaved-Binary-Response-Hypothesis test.

Finally, given the complex nature of botnets, a combination of different techniques (network- and host-based, passive and active) is probably necessary for future botnet detection. Although BotProbe is imperfect and limited, it has unique detection merits that contribute to multi-perspective botnet detection.

#### VI. Related Work
Several recent papers propose different approaches to the botnet detection problem. Livadas et al. [20], [27] proposed a machine-learning-based approach for botnet detection using general network-level traffic features of chat traffic protocols such as IRC. Karasaridis et al. [17] studied network flow-level detection of IRC botnet controllers for backbone networks. Ramachandran et al. [24] proposed using DNSBL counter-intelligence to find botnet members who generate spam. Rishi [10] is a signature-based IRC botnet detection system that tracks IRC bot nickname patterns. BotGraph [35] is a tool to detect botnet spamming attacks targeting major web email providers. Binkley and Singh [4] proposed combining IRC statistics and TCP work weight for detection of IRC-based botnets. Giroire et al. [9] proposed tracking the persistence of new connection destinations that are not already whitelisted to identify suspicious C&C destinations. Wurzinger et al. [32] proposed an automatic method to generate network-level botnet signatures/models based on the botnet command-response pattern. Yen and Reiter proposed TAMD [34], a system that detects centralized botnets by aggregating traffic that shares the same external destination, similar payload, and involves internal hosts with similar operating systems. BotHunter [13] is a passive bot detection system that uses IDS dialog correlation to associate IDS events with a bot infection dialog model. BotSniffer [14] and BotMiner [12] are two botnet detection systems that utilize horizontal correlation to perform spatio-temporal group analysis across multiple hosts. In [8], entropy and machine-learning-based approaches are proposed to detect chat bots (not botnet C&C). This work has a similar limitation in that it requires observing many chat messages before making a decision and is not suitable for detecting infrequent botnet C&C interactions. In summary, the aforementioned systems are all passive, and this paper describes several active botnet-probing techniques, which have unique advantages and can complement existing detection schemes.

Several other papers discuss various means to modify network traffic for security purposes. Protocol-scrubbing [31] techniques modify network flows transparently to remove ambiguities that can reveal implementation-specific details of a host’s operating system. Traffic normalization [15] is a technique to limit evasion opportunities by eliminating potential ambiguities before the traffic is seen by the IDS monitor. Kaleidoscope is an in-line system that protects honeynets by dynamically shuffling network address blocks [33]. These techniques need to process and then forward all packets sent to the network. In comparison, BotProbe needs to inject packets very rarely and affects only a very small number of flows.

We plan to investigate these new potential utilities of active techniques in the future.

#### VII. Acknowledgment
The authors would like to thank Jon Giffin, Nick Feamster, Roberto Perdisci, and Junjie Zhang for comments on an early version of this paper, and thank Mike Hunter for the help in the user study. This material is based upon work supported in part by the National Science Foundation under grants no. 0716570 and 0831300, the Army Research Office under Cyber-TA Grant no. W911NF-06-1-0316, the Department of Homeland Security under contract no. FA8750-08-2-0141, and the Office of Naval Research under grant no. N00014-09-1-1042 and N00014-09-1-0776. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation, the Army Research Office, the Department of Homeland Security, or the Office of Naval Research.

#### VIII. References
[1] Hi-performance protocol identification engine. http://hippie.ooﬂe.com/.
[2] Shadowserver. http://shadowserver.org.
[3] P. Barford and V. Yegneswaran. An inside look at botnets. Special Workshop on Malware Detection.
[4] J. R. Binkley and S. Singh. An algorithm for anomaly-based botnet detection. In Proceedings of USENIX Steps to Reducing Unwanted Traffic on the Internet Workshop (SRUTI), 2006.
[5] M. Collins, T. Shimeall, S. Faber, J. Janies, R. Weaver, M. D. Shon, and J. Kadane. Using uncleanliness to predict future botnet addresses. In Proceedings of the 2007 Internet Measurement Conference (IMC’07), 2007.
[6] Cyber-TA. Multi-perspective malware analysis. http://www.cyber-ta.org/releases/malware-analysis/public/.
[7] F. Freiling, T. Holz, and G. Wicherski. Botnet tracking: Exploring a root-cause methodology to prevent denial of service attacks. In Proceedings of ESORICS, 2005.
[8] S. Gianvecchio, M. Xie, Z. Wu, and H. Wang. Measurement and classification of humans and bots in internet chat. In Proceedings of the 17th USENIX Security Symposium (Security’08), 2008.
[9] F. Giroire, J. Chandrashekar, N. Taft, E. Schooler, and K. Papagiannaki. Exploiting temporal persistence to detect covert botnet channels. In 12th International Symposium on Recent Advances in Intrusion Detection (RAID’09), 2009.
[10] J. Goebel and T. Holz. Rishi: Identify bot contaminated hosts by IRC nickname evaluation. In USENIX Workshop on Hot Topics in Understanding Botnets (HotBots’07), 2007.
[25] M. Roesch. Snort - lightweight intrusion detection for networks. In Proceedings of USENIX LISA’99, 1999.
[26] SecureWorks. Bobax trojan analysis. http://www.secureworks.com/research/threats/bobax/.
[27] W. T. Strayer, R. Walsh, C. Livadas, and D. Lapsley. Detecting botnets with tight command and control. In 31st IEEE Conference on Local Computer Networks (LCN’06), 2006.
[28] A. Turing. Computing machinery and intelligence. In Mind Vol.59, 1950.
[29] L. von Ahn, M. Blum, N. Hopper, and J. Langford. CAPTCHA: Using hard AI problems for security. In Proceedings of Eurocrypt, pages 294–311, 2003.
[30] A. Wald. Sequential Analysis. Dover Publications, 2004.
[31] D. Watson, M. Smart, G. R. Malan, and F. Jahanian. Protocol scrubbing: Network security through transparent flow modification. IEEE/ACM Trans. Networking, 12(2):261–273, 2004.
[32] P. Wurzinger, L. Bilge, T. Holz, J. Goebel, C. Kruegel, and E. Kirda. Automatically generating models for botnet detection. In 14th European Symposium on Research in Computer Security (ESORICS’09), 2009.
[33] V. Yegneswaran, C. Alfeld, P. Barford, and J.-Y. Cai. Camouflaging honeynets. In Proceedings of IEEE Global Internet Symposium, 2007.
[34] T.-F. Yen and M. K. Reiter. Traffic aggregation for malware detection. In Proceedings of the Fifth GI International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA’08), 2008.
[35] Y. Zhao, Y. Xie, F. Yu, Q. Ke, Y. Yu, Y. Chen, and E. Gillum. Botgraph: large scale spamming botnet detection. In NSDI’09: Proceedings of the 6th USENIX symposium on Networked systems design and implementation, pages 321–334, Berkeley, CA, USA, 2009. USENIX Association.
[36] J. Zhuge, X. Han, J. Guo, W. Zou, T. Holz, and Y. Zhou. Characterizing the IRC-based botnet phenomenon. China Honeynet Technical Report, 2007.
[11] J. B. Grizzard, V. Sharma, C. Nunnery, B. B. Kang, and D. Dagon. Peer-to-peer botnets: Overview and case study. In USENIX Workshop on Hot Topics in Understanding Botnets (HotBots’07), 2007.
[12] G. Gu, R. Perdisci, J. Zhang, and W. Lee. BotMiner: Clustering analysis of network traffic for protocol- and structure-independent botnet detection. In Proceedings of the 17th USENIX Security Symposium (Security’08), 2008.
[13] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee. Bothunter: Detecting malware infection through IDS-driven dialog correlation. In 16th USENIX Security Symposium (Security’07), 2007.
[14] G. Gu, J. Zhang, and W. Lee. BotSniffer: Detecting botnet command and control channels in network traffic. In Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS’08), February 2008.
[15] M. Handley, V. Paxson, and C. Kreibich. Network intrusion detection: Evasion, traffic normalization, and end-to-end protocol semantics. In Proceedings of the 10th Conference on USENIX Security Symposium, Berkeley, CA, USA, 2001. USENIX Association.
[16] J. Jung, V. Paxson, A. W. Berger, and H. Balakrishnan. Fast portscan detection using sequential hypothesis testing. In IEEE Symposium on Security and Privacy 2004, Oakland, CA, May 2004.
[17] A. Karasaridis, B. Rexroad, and D. Hoeﬂin. Wide-scale botnet detection and characterization. In USENIX Hotbots’07, 2007.
[18] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F. Kaashoek. The click modular router. ACM Transactions on Computer Systems, 18(3):263–297, 2000.
[19] R. Lemos. Bot software looks to improve peerage. http://www.securityfocus.com/news/11390.
[20] C. Livadas, R. Walsh, D. Lapsley, and W. T. Strayer. Using machine learning techniques to identify botnet traffic. In 2nd IEEE LCN Workshop on Network Security (WoNS’2006), 2006.
[21] V. Paxson. BRO: A System for Detecting Network Intruders in Real Time. In Proceedings of the 7th USENIX Security Symposium, 1998.
[22] P. Porras, H. Saidi, and V. Yegneswaran. A foray into Conficker’s logic and rendezvous points. In 2nd Usenix Workshop on Large-Scale Exploits and Emergent Threats (LEET), 2009.
[23] M. Rajab, J. Zarfoss, F. Monrose, and A. Terzis. A multi-faceted approach to understanding the botnet phenomenon. In Proceedings of ACM SIGCOMM/USENIX Internet Measurement Conference, Brazil, October 2006.
[24] A. Ramachandran, N. Framster, and D. Dagon. Revealing botnet membership using DNSBL counter-intelligence. In 2nd USENIX Steps to Reducing Unwanted Traffic on the Internet (SRUTI), 2006.

#### IX. Conclusion and Future Work
We proposed the idea of using active probing techniques to detect botnet C&C communications that use chat-like protocols. By requiring the observation of at most one round of actual C&C interaction and then applying active probing, this approach, unlike existing passive approaches, can actively collect evidence and shorten the detection time. We have developed a hypothesis testing framework and a prototype system implementation that effectively separates deterministic botnet communication from human conversations, while providing control over false positives and detection rates. We validated our system on several contemporary malicious IRC bots and conducted an actual user study on around 100 users. Our experimental results, while preliminary, are encouraging. BotProbe is not intended to replace existing passive detection approaches but to complement them from a new perspective.

This work represents the first feasibility study of the use of active techniques in botnet detection; thus, we hope to inspire new thoughts and directions in the research community. While controversial and clearly limited, BotProbe has demonstrated its effectiveness in detecting a large portion of contemporary real-world botnets. In future work, we will study robust, practical, and less controversial extensions of active techniques and apply them to a more general class of botnet C&C detection (e.g., applicable to HTTP- and P2P-based botnets). In addition to detection, active techniques can be used for other purposes, e.g., server-side probing and injecting watermarks to trace the location of botmasters.