### Approach to Generate Collision-Inducing Configurations for Autonomous Driving Systems

[42] integrates dynamic physical models of the robot to generate physically valid yet stressful test cases. In contrast, SWARMFLAWFINDER targets swarm robotics, which is more complex than individual robots. [51] aims to find faults in a flocking algorithm of ground vehicle swarms using genetic algorithms (GA) [52]. However, these methods are not applicable to non-flocking swarm algorithms, which require more sophisticated definitions, such as fitness functions. Specifically, their fitness function focuses on handling flocking algorithms and considers splitting swarms as failures. In our paper, A3 dynamically forms and splits swarms to improve the efficiency of searching. Therefore, a perfectly fine mission of A3 can be considered a failure by their criteria. The concept of GA can be applied to SWARMFLAWFINDER.

### Formal Validation and Verification for Robotics Systems

Formal validation and verification for robotics systems have been extensively studied [53]–[58]. These approaches typically require fine-grained definitions of correct behaviors, often defined by domain experts. In contrast, SWARMFLAWFINDER only requires a high-level failure definition (e.g., 200% of typical deadline).

### Fuzz Testing

Fuzz testing has become widely used due to its effectiveness. Some studies aim to improve coverage-driven fuzzers [9]–[11], while others [1], [59]–[62] aim to retrieve more advanced information (e.g., code and data flow) to handle systems on new domains or platforms, or to improve input mutation strategies. Hybrid fuzzing techniques [1], [63], [64] have been proposed to increase testing coverage using both dynamic and symbolic execution. Traditional techniques that rely on obvious symptoms of program failures (e.g., segmentation faults) are ineffective for swarm robotics because traditional coverage metrics do not apply well. SWARMFLAWFINDER proposes and leverages the degree of causal contribution (instead of code coverage) to effectively guide the testing process.

### Fuzz Testing for Drones

Several fuzzers target drones [65]–[70], but they are designed to find vulnerabilities in a single drone, not in swarm robotics. Note that these fuzzers (for a single drone) can replace the adversarial drone in our approach and are complementary to our work. Existing fuzzers [65]–[70] try to find bugs in a target device’s software (e.g., firmware), assuming a stronger attack model than ours. Our threat model assumes no direct access to the drones. Additionally, existing fuzzers have a limited scope in the types of bugs they target. For example, [68]–[70] aim to detect general type bugs (e.g., buffer overflow), [67] can only detect limited types of misbehavior (e.g., input validation bugs), and [65] relies on substantial domain knowledge, which is not designed for swarm robotics. Others [66], [69], [70] focus on bugs related to specific environments, such as weak ports [66], MAVLink protocol [69], and WiFi [70]. In contrast, our approach can be used to detect a wide range of bugs in various swarm algorithms, unlike those existing specific environments, general type, and implementation-oriented bugs. Moreover, SWARMFLAWFINDER can detect logic flaws without requiring particular domain expertise in drone swarm fuzz testing, as we use DCC to abstract swarm behaviors.

### Attacks and Defenses for Drones

As drones gain more attention in research and industry, attacks [71]–[73] and defenses [74]–[80] of drones have become significant. There are testing tools [81] developed to run various known attacks (e.g., GPS spoofing, jamming, and acoustic attacks) against drones. Unlike previous work, which focuses on individual drones, SWARMFLAWFINDER focuses on finding logic flaws in drone swarm algorithms. To the best of our knowledge, this is the first work that finds logic flaws in swarm robotics algorithms.

### Conclusion

This paper develops a novel fuzz testing approach for swarm robotics, SWARMFLAWFINDER, to discover logic flaws in swarm algorithms. We propose a novel concept of the degree of causal contribution and use it as a feedback metric for fuzz testing. Our extensive evaluation with four swarm algorithms shows that SWARMFLAWFINDER is highly effective, finding 42 unique, previously unknown logic flaws (all confirmed by the developers). We release the code and data for future research.

### Acknowledgment

We thank the anonymous referees for their constructive feedback. The authors gratefully acknowledge the support of NSF #1916499, #1908021, and #1850392. This work was also supported by the Institute of Information & Communications Technology Planning & Evaluation (IITP) grant by the Korea government (MSIT) (No. 2021-0-01817, Development of Next-Generation Computing Techniques for Hyper-Composable Datacenters) and the Basic Science Research Program by the National Research Foundation of Korea (2021 R1F1A1049822). Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the sponsor.

### References

[1] V. J. M. Man`es, H. Han, C. Han, S. K. Cha, M. Egele, E. J. Schwartz, and M. Woo, “The art, science, and engineering of fuzzing: A survey,” IEEE Transactions on Software Engineering, 2019.

[2] Y. Wang, P. Jia, L. Liu, C. Huang, and Z. Liu, “A systematic review of fuzzing based on machine learning techniques,” PloS one, 2020.

[3] P. Wang, X. Zhou, K. Lu, T. Yue, and Y. Liu, “The progress, challenges, and perspectives of directed greybox fuzzing,” arXiv preprint arXiv:2005.11907, 2020.

[4] R. Agishev, “Adaptive Control of Swarm of Drones for Obstacle Avoidance,” Master’s thesis, Skolkovo Institute of Science and Technology, 2019.

[5] P. Henderson, M. Vertescher, D. Meger, and M. Coates, “Cost adaptation for robust decentralized swarm behavior,” in IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), IEEE, 2018.

[6] M. G. Cimino, M. Lega, M. Monaco, and G. Vaglini, “Adaptive exploration of a UAVs swarm for distributed targets detection and tracking,” in ICPRAM, 2019.

[7] P. Carnelli, “SwarmRoboticsSim,” 2017, https://github.com/pc0179/SwarmRoboticsSim.

[8] SwarmFlawFinder, “Project Website,” 2021, https://github.com/SwarmRoboticsSim/adswarm/src.

[9] Google, “syzkaller is an unsupervised, coverage-guided kernel fuzzer,” https://github.com/google/syzkaller, 2018.

[10] LLVM, “LibFuzzer: a library for coverage-guided fuzz testing,” https://llvm.org/docs/LibFuzzer.html, 2021.

[11] M. Zalewski, “American Fuzzy Lop,” http://lcamtuf.coredump.cx/afl.

[12] P. Godefroid, M. Y. Levin, D. A. Molnar et al., “Automated whitebox fuzz testing,” in Network and Distributed System Security Symposium (NDSS), 2008.

[13] R. Baldoni, E. Coppa, D. C. D’elia, C. Demetrescu, and I. Finocchi, “A survey of symbolic execution techniques,” ACM Computing Surveys (CSUR), 2018.

[14] B. Beizer, Black-box testing: techniques for functional testing of software and systems. John Wiley & Sons, Inc., 1995.

[15] A. F. Winfield, C. J. Harper, and J. Nembrini, “Towards dependable swarms and a new discipline of swarm engineering,” in International Workshop on Swarm Robotics. Springer, 2004.

[16] I. Sargeant and A. Tomlinson, “Modelling malicious entities in a robotic swarm,” in 2013 IEEE/AIAA 32nd Digital Avionics Systems Conference (DASC). IEEE, 2013.

[17] F. Higgins, A. Tomlinson, and K. M. Martin, “Threats to the swarm: Security considerations for swarm robotics,” International Journal on Advances in Security, 2009.

[18] C. Taylor, A. Siebold, and C. Nowzari, “On the effects of minimally invasive collision avoidance on an emergent behavior,” in International Conference on Swarm Intelligence. Springer, 2020.

[19] H. Hamann and H. Wörn, “A framework of space–time continuous models for algorithm design in swarm robotics,” Swarm Intelligence, 2008.

[20] C. Harper and A. Winfield, “Directlyapunov design - a synthesis procedure for motor schema using a second-order Lyapunov stability theorem,” in IEEE/RSJ International Conference on Intelligent Robots and Systems, 2002.

[21] A. J. Kerns, D. P. Shepard, J. A. Bhatti, and T. E. Humphreys, “Unmanned aircraft capture and control via GPS spoofing,” Journal of Field Robotics, 2014.

[22] S.-H. Seo, B.-H. Lee, S.-H. Im, and G.-I. Jee, “Effect of spoofing on unmanned aerial vehicle using counterfeited GPS signal,” Journal of Positioning, Navigation, and Timing, 2015.

[23] D. Lewis, Counterfactuals. Oxford: Blackwell Publishers, 1973.

[24] Y. Kwon, D. Kim, W. N. Sumner, K. Kim, B. Saltaformaggio, X. Zhang, and D. Xu, “LDX: Causality inference by lightweight dual execution,” in Proceedings of the 21st International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS’16).

[25] J. P. Lewis, “Fast normalized cross-correlation,” in Proceedings of the Vision Interface, 1995.

[26] L. Yu and V. Giurgiutiu, “Advanced signal processing for enhanced damage detection with embedded ultrasonics structural radar using piezoelectric wafer active sensors,” in Smart Structures & Systems – An International Journal of Mechatronics, Sensors, Monitoring, Control, Diagnosis, and Maintenance, 2005.

[27] D. M. Tsai and C. T. Lin, “The evaluation of normalized cross correlations for defect detection,” Pattern Recognition Letters, 2003.

[28] E. Rafajłowicz, M. Wnuk, and W. Rafajłowicz, “Local detection of defects from image sequences.” International Journal of Applied Mathematics & Computer Science, 2008.

[29] C. Howard, “Algorithms developed to make drone swarm move together,” 2020, https://github.com/choward1491/SwarmAlgorithms.

[30] T. Vicsek, “Autonomous mission control of drone flocks,” EOTVOS Lorand Tudomanyegetem Budapest Hungary, Tech. Rep., 2019.

[31] J. S. Huang, S. Ma, G. Li, O. W. Yang, and C. Shao, “An artificial swan formation using the Finsler measure in the dynamic window control,” Int J Swarm Evol Comput, 2020.

[32] B. Balázs, G. Vásárhelyi, and T. Vicsek, “Adaptive leadership overcomes persistence–responsivity trade-off in flocking,” Journal of the Royal Society Interface, 2020.

[33] L. Ma, W. Bao, X. Zhu, M. Wu, Y. Wang, Y. Ling, and W. Zhou, “O-flocking: Optimized flocking model on autonomous navigation for robotic swarm,” in International Conference on Swarm Intelligence, 2020.

[34] A. Wright, “swarmSimRescue,” 2014, https://github.com/aywrite/swarmSimRescue.

[35] J. Harwell and M. Gini, “Improved swarm engineering: Aligning intuition and analysis,” arXiv preprint arXiv:2012.04144, 2020.

[36] K. Patel, “optimization-wolf-search-algorithm,” 2017, https://github.com/bavalia/optimization-wolf-search-algorithm.

[37] R. Berg, “Zebro-Search-and-Rescue,” 2020, https://github.com/RobvandenBerg/Zebro-Search-and-Rescue.

[38] G. M. Fricke, J. P. Hecker, A. D. Griego, L. T. Tran, and M. E. Moses, “A distributed deterministic spiral search algorithm for swarms,” in 2016 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), 2016.

[39] C. Aguero, N. Koenig, I. Chen, H. Boyer, S. Peters, J. Hsu, B. Gerkey, S. Paepcke, J. Rivero, J. Manzo, E. Krotkov, and G. Pratt, “Inside the virtual robotics challenge: Simulating real-time robotic disaster response,” Automation Science and Engineering, IEEE Transactions on, 2015.

[40] A. Patelli and L. Mottola, “Model-based real-time testing of drone autopilots,” in Proceedings of the 2nd Workshop on Micro Aerial Vehicle Networks, Systems, and Applications for Civilian Use, 2016.

[41] M. Lindvall, A. Porter, G. Magnusson, and C. Schulze, “Metamorphic model-based testing of autonomous systems,” in Proceedings of the 2nd International Workshop on Metamorphic Testing, 2017.

[42] C. Hildebrandt, S. Elbaum, N. Bezzo, and M. B. Dwyer, “Feasible and stressful trajectory generation for mobile robots,” in Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA), 2020.

[43] S. Shah, D. Dey, C. Lovett, and A. Kapoor, “Airsim: High-fidelity visual and physical simulation for autonomous vehicles,” in Field and service robotics, 2018.

[44] D. Araiza-Illan, D. Western, A. G. Pipe, and K. Eder, “Systematic and realistic testing in simulation of control code for robots in collaborative human-robot interactions,” in Annual Conference Towards Autonomous Robotic Systems, 2016.

[45] C. Hutchison, M. Zizyte, P. E. Lanigan, D. Guttendorf, M. Wagner, C. Le Goues, and P. Koopman, “Robustness testing of autonomy software,” in IEEE/ACM 40th International Conference on Software Engineering: Software Engineering in Practice Track (ICSE-SEIP), 2018.

[46] A. Afzal, C. Le Goues, M. Hilton, and C. S. Timperley, “A study on challenges of testing robotic systems,” in IEEE 13th International Conference on Software Testing, Validation and Verification (ICST), 2020.

[47] C. S. Timperley, A. Afzal, D. S. Katz, J. M. Hernandez, and C. Le Goues, “Crashing simulated planes is cheap: Can simulation detect robotics bugs early?” in 2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST). IEEE, 2018, pp. 331–342.

[48] C. Nie and H. Leung, “A survey of combinatorial testing,” ACM Computing Surveys (CSUR), 2011.

[49] D. R. Kuhn, J. M. Higdon, J. F. Lawrence, R. N. Kacker, and Y. Lei, “Combinatorial methods for event sequence testing,” in 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation, 2012.

[50] A. Calò, P. Arcaini, S. Ali, F. Hauer, and F. Ishikawa, “Simultaneously searching and solving multiple avoidable collisions for testing autonomous driving systems,” in Proceedings of the 2020 Genetic and Evolutionary Computation Conference, 2020.

[51] H. Wei, J. Timmis, and R. Alexander, “Evolving test environments to identify faults in swarm robotics algorithms,” in IEEE Congress on Evolutionary Computation (CEC), 2017.

[52] M. Dorigo, V. Trianni, E. Şahin, R. Groß, T. H. Labella, G. Baldassarre, S. Nolfi, J.-L. Deneubourg, F. Mondada, D. Floreano et al., “Evolving self-organizing behaviors for a swarm-bot,” Autonomous Robots, 2004.

[53] S. Bensalem, L. de Silva, F. Ingrand, and R. Yan, “A verifiable and correct-by-construction controller for robot functional levels,” arXiv preprint arXiv:1309.0442, 2013.

[54] A. Desai, S. Qadeer, and S. A. Seshia, “Programming safe robotics systems: Challenges and advances,” in International Symposium on Leveraging Applications of Formal Methods. Springer, 2018.

[55] R. C. Cardoso, L. A. Dennis, M. Farrell, M. Fisher, and M. Luckcuck, “Towards compositional verification for modular robotic systems,” Electronic Proceedings in Theoretical Computer Science, 2020.

[56] X. Zheng, C. Julien, M. Kim, and S. Khurshid, “On the state of the art in verification and validation in cyber-physical systems,” The University of Texas at Austin, The Center for Advanced Research in Software Engineering, Tech. Rep. TR-ARiSE-2014-001, 2014.

[57] R. C. Cardoso, M. Farrell, M. Luckcuck, A. Ferrando, and M. Fisher, “Heterogeneous verification of an autonomous curiosity rover,” in NASA Formal Methods. Springer International Publishing, 2020.

[58] H. T. Dinh and T. Holvoet, “A framework for verifying autonomous robotic agents against environment assumptions,” in Advances in Practical Applications of Agents, Multi-Agent Systems, and Trustworthiness. The PAAMS Collection. Springer International Publishing, 2020.

[59] S. Österlund, K. Razavi, H. Bos, and C. Giuffrida, “Parmesan: Sanitizer-guided greybox fuzzing,” in 29th USENIX Security Symposium, 2020.

[60] J. Chen, W. Diao, Q. Zhao, C. Zuo, Z. Lin, X. Wang, W. C. Lau, M. Sun, R. Yang, and K. Zhang, “IoTFuzzer: Discovering Memory Corruptions in IoT Through App-based Fuzzing,” in Proceedings of the Network and Distributed System Security Symposium (NDSS), 2018.

[61] P. Fiterau-Brostean, B. Jonsson, R. Merget, J. de Ruiter, K. Sagonas, and J. Somorovsky, “Analysis of DTLS implementations using protocol state fuzzing,” in 29th USENIX Security Symposium, 2020.

[62] H. Kim, J. Lee, E. Lee, and Y. Kim, “Touching the untouchables: Dynamic security analysis of the LTE control plane,” in IEEE Symposium on Security and Privacy (SP), 2019.

[63] I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim, “QSYM: A practical concolic execution engine tailored for hybrid fuzzing,” in 27th USENIX Security Symposium, 2018.

[64] Y. Chen, P. Li, J. Xu, S. Guo, R. Zhou, Y. Zhang, T. Wei, and L. Lu, “SAVIOR: Towards bug-driven hybrid testing,” in IEEE Symposium on Security and Privacy (SP), 2020.

[65] H. Kim, M. O. Özmen, A. Bianchi, Z. B. Çelik, and D. Xu, “PGFuzz: Policy-guided fuzzing for robotic vehicles.”

[66] D. Rudo, D. Zeng et al., “Consumer UAV Cybersecurity Vulnerability Assessment Using Fuzzing Tests,” arXiv:2008.03621, 2020.

[67] T. Kim, C. H. Kim, J. Rhee, F. Fei, Z. Tu, G. Walkup, X. Zhang, X. Deng, and D. Xu, “RVFuzzer: Finding input validation bugs in robotic vehicles through control-guided testing,” in 28th USENIX Security Symposium, 2019.

[68] O. M. Alhawi, M. A. Mustafa, and L. C. Cordeiro, “Finding security vulnerabilities in unmanned aerial vehicles using software verification,” arXiv preprint arXiv:1906.11488, 2019.

[69] K. Domin, I. Symeonidis, and E. Marin, “Security analysis of the drone communication protocol: Fuzzing the MAVLink protocol,” 2016.

[70] M. Hooper, Y. Tian, R. Zhou, B. Cao, A. P. Lauf, L. Watkins, W. H. Robinson, and W. Alexis, “Securing commercial Wi-Fi-based UAVs from common security attacks,” in MILCOM 2016-2016 IEEE Military Communications Conference, 2016.

[71] J. Valente and A. A. Cardenas, “Understanding security threats in consumer drones through the lens of the Discovery Quadcopter family,” in Proceedings of the 2017 Workshop on Internet of Things Security and Privacy, 2017.

[72] Y. Son, H. Shin, D. Kim, Y. Park, J. Noh, K. Choi, J. Choi, and Y. Kim, “Rocking drones with intentional sound noise on gyroscopic sensors,” in 24th USENIX Security Symposium, 2015.

[73] I. Pustogarov, T. Ristenpart, and V. Shmatikov, “Using program analysis to synthesize sensor spoofing attacks,” in Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security. Association for Computing Machinery, 2017.

[74] H. Choi, W.-C. Lee, Y. Aafer, F. Fei, Z. Tu, X. Zhang, D. Xu, and X. Deng, “Detecting attacks against robotic vehicles: A control invariant approach,” in Proceedings of the ACM SIGSAC Conference on Computer and Communications Security (CCS), 2018.

[75] R. Quinonez, J. Giraldo, L. Salazar, E. Bauman, A. Cardenas, and Z. Lin, “SAVIOR: Securing autonomous vehicles with robust physical invariants,” in 29th USENIX Security Symposium, 2020.

[76] N. Moustafa and A. Jolfaei, “Autonomous detection of malicious events using machine learning models in drone networks,” in Proceedings of the 2nd ACM MobiCom Workshop on Drone Assisted Wireless Communications for 5G and Beyond, 2020.

[77] R. Mitchell and I.-R. Chen, “Adaptive intrusion detection of malicious unmanned air vehicles using behavior rule specifications,” IEEE Transactions on Systems, Man, and Cybernetics: Systems.

[78] R. R. Beck, A. Vijeev, and V. Ganapathy, “Privaros: A framework for privacy-compliant delivery drones,” in Proceedings of the ACM SIGSAC Conference on Computer and Communications Security (CCS).

[79] S.-J. Chung, A. A. Paranjape, P. Dames, S. Shen, and V. Kumar, “A survey on aerial swarm robotics,” IEEE Transactions on Robotics, 2018.

[80] A. A. Paranjape, S.-J. Chung, K. Kim, and D. H. Shim, “Robotic herding of a flock of birds using an unmanned aerial vehicle,” IEEE Transactions on Robotics, 2018.

[81] M. S. bin Mohammad Fadilah, V. Balachandran, P. Loh, and M. Chua, “DRAT: A drone attack tool for vulnerability assessment,” in Proceedings of the Tenth ACM Conference on Data and Application Security and Privacy, 2020.

[82] DARPA, “OFFensive Swarm-Enabled Tactics (OFFSET),” 2017, https://www.darpa.mil/program/offensive-swarm-enabled-tactics.