### Syscall Alignment and Feature Set of BinSim

The provided numbers and sequences appear to be part of a larger dataset or analysis. For clarity, I will focus on the textual content and provide a more coherent and professional version.

---

**Syscall Alignment and Feature Set of BinSim**

The execution differences are a critical aspect of our analysis. The concept of weakest precondition (WP) calculation was first explored by Dijkstra [20] for formal program verification. Brumley et al. [8] used WP to identify deviations in different binary implementations for error detection and fingerprint generation. Ansuman et al. [4] applied WP along with dynamic slicing to diagnose the root causes of observable program errors. BinSim's approach to dynamic slicing and WP calculation is inspired by Ansuman et al.'s work. However, we have customized our dynamic slicing algorithm to handle obfuscated binaries, which is more challenging than working with source code or benign programs. Additionally, we perform equivalence checking for WP, whereas Ansuman et al. conducted implication checking.

**Comparison with Related Work**

The most closely related backward slicing method to BinSim is the work by Coogan et al. [19]. Both methods aim to identify relevant instructions that affect system call arguments in an obfuscated execution trace, and both use value-based slicing and control dependency tracking. However, BinSim differs from Coogan et al.'s work in several ways:

1. **Obfuscation Resilience**: Coogan et al.'s approach is designed specifically for virtualization obfuscation. They evaluate the accuracy of backward slicing by comparing x86 instruction slicing pairs based on opcode syntax (e.g., `mov`, `add`, `lea`). This method is susceptible to syntactic differences introduced by instruction-level obfuscation [51]. Commercial virtualization obfuscators [52, 69] often include code mutation functionality, making Coogan et al.'s approach less resilient to other obfuscation techniques.

2. **Taint Analysis**: We utilize taint analysis to identify virtualization bytecode dispatchers, while Coogan et al. employ different heuristics.

3. **Cryptographic Functions**: Coogan et al. do not handle cryptographic functions, as encryption/decryption routines can significantly complicate their analysis.

4. **Evaluation Scope**: Coogan et al. evaluated their method on only six small programs, whereas BinSim undergoes extensive evaluation.

5. **Semantic Comparison**: After constructing sub-traces or sliced segments, Coogan et al. compare them syntactically, while BinSim uses weakest preconditions to compare them semantically.

**Binary Differencing**

Hunting for binary code differences is widely applied in software security. Tools like BinDiff [23] and DarunGrim [50] compare two functions using maximal control flow subgraph isomorphism and match similar basic blocks with heuristics. BinSlayer [7] improves upon BinDiff by matching bipartite graphs. dicovRE [22] extracts syntactical features to speed up control flow subgraph isomorphism. These approaches are effective for fast matching of similar binary patches but are vulnerable to sophisticated obfuscation methods.

Another line of work focuses on capturing semantic equivalence between executables. BinHunt [25] uses symbolic execution and theorem proving to match basic blocks with the same semantics. BinJuice [37] extracts semantic abstractions for basic blocks. Exposé [49] combines function-level syntactic heuristics with semantic detection. iBinHunt [43] is an inter-procedural path differencing tool that relies on multi-tag taint analysis to reduce possible basic block matches. Pewny et al. [54] use basic block semantic representation sampling to search for cross-architecture bugs. These tools, however, suffer from the "block-centric" limitation.

In contrast, BinSim can find equivalent instruction sequences across basic block boundaries. Egele et al. [21] proposed blanket execution to match similar functions in binaries using dynamic testing. However, blanket execution requires precise function scope identification, which is not always feasible for obfuscated binary code [42].

**Malware Dynamic Analysis**

Malware dynamic analysis techniques focus on analyzing the effects that a program has on the operating system. Compared to static analysis, dynamic analysis is less vulnerable to various code obfuscation methods [48]. Christodorescu et al. [14] proposed using data-flow dependencies among system calls as malware specifications, which are difficult to circumvent through random system call injection. Since then, there has been significant work on dynamic malware analysis, including clustering [6, 28] and detection [3, 12]. However, dynamic-only approaches may overlook conditional equivalence or subtle differences that do not affect system call arguments. Therefore, BinSim's hybrid approach is more accurate.

Dynamic slicing is also actively used in various malware analysis tasks. Examples include efficient malware behavior-based detection [36], extracting kernel malware behavior [38], generating vaccines for malware immunization [76], and identifying dormant malware functionality [18]. However, these tasks typically use standard dynamic slicing algorithms [1, 80], which are not designed for tracking data and control dependencies in highly obfuscated binaries, such as virtualization-obfuscated malware. As demonstrated in Section 4.2, performing dynamic slicing on obfuscated binaries is challenging. Thus, our method is beneficial and complementary to existing malware defense strategies.

**Conclusion**

We present a hybrid method combining dynamic analysis and symbolic execution to compare two binary execution traces, aiming to detect fine-grained relations. We introduce the concept of System Call Sliced Segments and rely on their Equivalence Checking to detect fine-grained semantic similarities. By integrating system call alignment, enhanced dynamic slicing, symbolic execution, and theorem proving, our method compares the semantics of instruction segments that impact observable behaviors. Compared to existing semantic-based binary differencing methods, our approach can capture similarities and differences across basic blocks and infer conditional equivalence. Our comparative evaluation demonstrates that BinSim is a compelling complement to software security analysis tasks.

**Acknowledgments**

We thank the Usenix Security anonymous reviewers and Michael Bailey for their valuable feedback. This research was supported in part by the National Science Foundation (NSF) under grants CCF-1320605 and CNS-1652790, and the Office of Naval Research (ONR) under grants N00014-16-1-2265 and N00014-16-1-2912. Jiang Ming was also supported by the University of Texas System STARs Program.

**References**

[1] Agrawal, H., and Horgan, J. R. Dynamic program slicing. ACM SIGPLAN Notices 25, 6 (1990), 246–256.
[2] Allievi, A., Unterbrink, H., and Mercer, W. CryptoWall 4 - the evolution continues. Cisco White Paper, 2016 May.
[3] Babić, D., Reynaud, D., and Song, D. Malware analysis with tree automata inference. In Proceedings of the 23rd Int. Conference on Computer Aided Verification (CAV’11) (2011).
[4] Banerjee, A., Roychoudhury, A., Harlie, J. A., and Liang, Z. Golden implementation driven software debugging. In Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE’10) (2010).
[5] Bao, T., Burkhet, J., Woo, M., Turner, R., and Brumley, D. ByteWeight: Learning to recognize functions in binary code. In Proceedings of the 23rd USENIX Conference on Security Symposium (2014).
[6] Bayer, U., Comparetti, P. M., Hlauschek, C., Kruegel, C., and Kirda, E. Scalable, behavior-based malware clustering. In Proceedings of the Network and Distributed System Security Symposium (NDSS’09) (2009).
[7] Bourquin, M., King, A., and Robbins, E. BinSlayer: Accurate comparison of binary executables. In Proceedings of the 2nd ACM SIGPLAN Program Protection and Reverse Engineering Workshop (PPREW ’13) (2013).
[8] Brumley, D., Caballero, J., Liang, Z., Newsome, J., and Song, D. Towards automatic discovery of deviations in binary implementations with applications to error detection and fingerprint generation. In Proceedings of the 16th USENIX Security Symposium (2007).
[9] Brumley, D., Poosankam, P., Song, D., and Zheng, J. Automatic patch-based exploit generation is possible: Techniques and implications. In Proceedings of the 2008 IEEE Symposium on Security and Privacy (S&P’08) (2008).
[10] Caballero, J., McCamant, S., Barth, A., and Song, D. Extracting models of security-sensitive operations using string-enhanced white-box exploration on binaries. Tech. rep., EECS Department, University of California, Berkeley, March 2009.
[11] Caballero, J., Poosankam, P., McCamant, S., Babić, D., and Song, D. Input generation via decomposition and re-stitching: Finding bugs in malware. In Proceedings of the 17th ACM Conference on Computer and Communications Security (CCS’10) (2010).
[12] Canali, D., Lanz, A., Balzarotti, D., Kruegel, C., Christodorescu, M., and Kirda, E. A quantitative study of accuracy in system call-based malware detection. In Proceedings of the 2012 International Symposium on Software Testing and Analysis (ISSTA’12) (2012).
[13] Chandramohan, M., Xue, Y., Xu, Z., Liu, Y., Cho, C. Y., and Kuan, T. H. B. BinGo: Cross-architecture cross-OS binary search. In Proceedings of the 2016 ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE’16) (2016).
[14] Christodorescu, M., Jha, S., and Kruegel, C. Mining specifications of malicious behavior. In Proceedings of the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on the foundations of software engineering (2007).
[15] Christodorescu, M., Jha, S., Seshia, S. A., Song, D., and Bryant, R. E. Semantics-aware malware detection. In Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) (2005).
[16] Collberg, C. The Tigress C diversifier/obfuscator. http://tigress.cs.arizona.edu/, last reviewed, 02/16/2017.
[17] Collberg, C., Thomborson, C., and Low, D. A taxonomy of obfuscating transformations. Tech. rep., The University of Auckland, 1997.
[18] Comparetti, P. M., Salvanesc, G., Kirda, E., Kolbitsch, C., Kruegel, C., and Zanero, S. Identifying dormant functionality in malware programs. In Proceedings of the 2010 IEEE Symposium on Security and Privacy (S&P’10) (2010).
[19] Coogan, K., Lu, G., and Debray, S. Deobfuscation of virtualization-obfuscated software. In Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS’11) (2011).
[20] Dijkstra, E. W. A Discipline of Programming, 1st ed. Prentice Hall PTR, 1997.
[21] Egele, M., Woo, M., Chapman, P., and Brumley, D. Blanket Execution: Dynamic similarity testing for program binaries and components. In 23rd USENIX Security Symposium (USENIX Security’14) (2014).
[22] Eschweiler, S., Yakdan, K., and Gerhards-Padilla, E. discovRE: Efficient cross-architecture identification of bugs in binary code. In Proceedings of the 23nd Annual Network and Distributed System Security Symposium (NDSS’16) (2016).
[23] Flake, H. Structural comparison of executable objects. In Proceedings of the 2004 GI International Conference on Detection of Intrusions & Malware, and Vulnerability Assessment (DIMVA’04) (2004).
[24] Ganesh, V., and Dill, D. L. A decision procedure for bit-vectors and arrays. In Proceedings of the 2007 International Conference in Computer Aided Verification (CAV’07) (2007).
[25] Gao, D., Reiter, M. K., and Song, D. BinHunt: Automatically finding semantic differences in binary programs. In Proceedings of the 10th International Conference on Information and Communications Security (ICICS’08) (2008).
[26] Godefroid, P., Levin, M. Y., and Molnar, D. Automated whitebox fuzz testing. In Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS’08) (2008).
[27] Gröbert, F., Willems, C., and Holz, T. Automated identification of cryptographic primitives in binary programs. In Proceedings of the 14th International Conference on Recent Advances in Intrusion Detection (RAID’11) (2011).
[28] Jang, J., Brumley, D., and Venkataraman, S. BitShred: feature hashing malware for scalable triage and semantic analysis. In Proceedings of the 18th ACM conference on Computer and communications security (CCS’11) (2011).
[29] Johnson, N. M., Caballero, J., Chen, K. Z., McCamant, S., Poosankam, P., Reynaud, D., and Song, D. Differential Slicing: Identifying causal execution differences for security applications. In Proceedings of the 2011 IEEE Symposium on Security and Privacy (S&P’11) (2011).
[30] Kang, M. G., Poosankam, P., and Yin, H. Renovo: A hidden code extractor for packed executables. In Proceedings of the 2007 ACM Workshop on Recurring Malcode (WORM ’07) (2007).
[31] Kawaguchi, M., Lahiri, S. K., and Rebelo, H. Conditional Equivalence. Tech. Rep. MSR-TR-2010-119, Microsoft Research, 2010.
[32] Kharraz, A., Arshad, S., Mulliner, C., Robertson, W. K., and Kirda, E. UNVEIL: A large-scale, automated approach to detecting ransomware. In Proceedings of the 25th USENIX Conference on Security Symposium (2016).
[33] Kharraz, A., Robertson, W., Balzarotti, D., Bilge, L., and Kirda, E. Cutting the Gordian Knot: A Look Under the Hood of Ransomware Attacks. In Proceedings of the 12th International Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA’15) (2015).
[34] Kirat, D., and Vigna, G. MalGene: Automatic extraction of malware analysis evasion signature. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS’15) (2015).
[35] Kirat, D., Vigna, G., and Kruegel, C. BareCloud: Bare-metal analysis-based evasive malware detection. In Proceedings of the 23rd USENIX Conference on Security Symposium (2014).
[36] Kolbitsch, C., Comparetti, P. M., Kruegel, C., Kirda, E., Zhou, X., and Wang, X. Effective and efficient malware detection at the end host. In Proceedings of the 18th USENIX Security Symposium (2009).
[37] Lakhotia, A., Preda, M. D., and Giacobazzi, R. Fast location of similar code fragments using semantic 'juice'. In Proceedings of the 2nd ACM SIGPLAN Program Protection and Reverse Engineering Workshop (PPREW’13) (2013).
[38] Lanzi, A., Sharif, M., and Lee, W. K-Tracer: A system for extracting kernel malware behavior. In Proceedings of the 16th Annual Network and Distributed System Security Symposium (NDSS09) (2009).
[39] Lindorfer, M., Di Federico, A., Maggi, F., Comparetti, P. M., and Zanero, S. Lines of malicious code: Insights into the malicious software industry. In Proceedings of the 28th Annual Computer Security Applications Conference