### Credential Management and Use-License Evaluation

The system securely acquires credentials and certificates from trusted entities, enabling it to obtain the necessary credentials. Additionally, it can cache these credentials for use in offline mode. The duration for which a cached attribute value is valid depends on whether it is persistent or volatile. The Policy Decision Point (PDP) of the peer or server then evaluates the specified Data Sharing Agreement (DSA) and user credentials to determine if a use-license can be issued to the user.

**Figure 5: Interactions to Obtain a Use License**

### Usage Control

**Figure 6: Interactions for Access Evaluation with a Valid Use-License**

To implement usage control, the PDP, DPOAPI, and the controlled application must implement listener interfaces to handle changes in monitored attributes. During access evaluation, if the policy granting access to the user requires monitoring, the PDP subscribes to the Policy Information Point (PIP) to receive notifications about changes in the monitored attributes. The PIP, in turn, subscribes to local or remote attribute authorities. In ad hoc mode, remote attribute authorities must be within the local network, and communication with them should be possible using opportunistic routing.

When a monitored attribute changes, the PIP sends an attribute changed event to the PDP. The PDP, being session-aware, tracks sessions that need re-evaluation when subscribed attributes change. It determines the sessions that must be re-evaluated and requests the DPOAPI to send access evaluation requests for those sessions. The DPOAPI retrieves the cached user credentials from the PIP and forwards the evaluation requests to the PDP. If the permissions returned by the PDP differ from the previous permissions, the DPOAPI sends a permission changed event to the application. The application is trusted to terminate ongoing accesses, and the DPOAPI will stop providing decrypted data if the user has lost all permissions.

Evaluating monitored conditions multiple times during an access session is efficient because communication between the Policy Enforcement Point (PEP) and PDP is local, and no additional network communication is required after an attribute changed event is received.

**Figure 6: Usage Control (a) Evaluation for a New Session and (b) Re-evaluation in an Ongoing Session**

### Implementation

We have implemented the UDSA (Usage-based Data Sharing Architecture) and tested it with two UDSA-aware applications. The PDP components were developed at Imperial College London, while the PEP and PIP components were developed at the European Microsoft Innovation Center (EMIC). The PDP component for end-user devices is a Java library, and the server-side PDP component is exposed as a Java web service. The DPOAPI and PIP components are implemented in C#. Interoperability between Java and C# components is achieved using JNBridge [12].

The two UDSA-aware applications demonstrate the architecture's use in different scenarios:
1. The first application provides secure access to XML documents containing incident information. The data-protection mechanism is flexible, allowing access restrictions to specific parts of the document based on the user’s location, role, and incident status. User location is determined using Wi-Fi tags (Aeroscout tags [3]), and the user’s identity and location credentials are issued by a security token service (STS) implemented with the Geneva Framework [8].
2. The second application provides secure access to sensitive scientific data in a typical enterprise scenario.

### Discussion

A pragmatic data sharing architecture for crisis management should allow responders to override security policies in high-risk situations, accompanied by the creation of an activity log for review. When users have complete privileges on their devices, trusted computing (TC) technology [24, 11] is necessary to ensure the secrecy of encryption keys and the integrity of the policy and enforcement infrastructure. TC provides hardware-based security, allowing only trusted software to access sealed data such as keys. However, in government agencies or large corporations, user privileges are often restricted and well-managed, making TC unnecessary. Security can be maintained by restricting user access to critical components.

Our architecture also allows end-users to freely redistribute protected data, but each recipient must obtain a use-license from a designated policy evaluation authority by presenting their credentials. UDSA uses an access revocation mechanism similar to IDSA. On use-license expiration, the PEP requires the user to renew the use-license to continue access, allowing trusted policy evaluation authorities to check for revocations.

### Conclusions

This paper presents an architecture for secure data sharing in crisis scenarios, using a flexible policy evaluation scheme that automates data sharing requests. This automation provides faster and more secure data sharing compared to manual practices. Usage control on disseminated data can be enforced without needing to connect to organizational infrastructures, as users can be evaluated within their local network. This makes the architecture suitable for users with intermittent connectivity.

We have shown that the UDSA architecture can be used in both reliable and unreliable network scenarios through distributed policy evaluation and establishing trust relationships using DSAs.

### References

[1] N. Adam, A. Kozanoglu, A. Paliwal, and B. Shaﬁq. Secure information sharing in a virtual multi-agency team environment. Electron. Notes Theor. Comput. Sci., 179:97–109, 2007.
[2] Adobe. A primer on electronic document security, 2004. White Paper. http://www.adobe.com/security/pdfs/acrobat live-cycle security wp.pdf Accessed 22-Sep-2009.
[3] Aeroscout. http://www.aeroscout.com/content/tags.
[4] M. J. Atallah, K. B. Frikken, and M. Blanton. Dynamic and efficient key management for access hierarchies. In CCS ’05: Proceedings of the 12th ACM conference on Computer and communications security, pages 190–202, New York, NY, USA, 2005. ACM.
[5] Authentica. Enterprise rights management for document protection, 2005. White Paper.
[6] J. Bethencourt, A. Sahai, and B. Waters. Ciphertext-policy attribute-based encryption. In SP ’07: Proceedings of the 2007 IEEE Symposium on Security and Privacy, pages 321–334, Washington, DC, USA, 2007. IEEE Computer Society.
[7] D. Boneh and M. Franklin. Identity based encryption from the Weil pairing. In Proc. 21st Annual Int. Cryptology Conference, pages 213–229, Santa Barbara, USA, 2001.
[8] M. L. Bustamante. A better approach for building claims-based WCF services. MSDN magazine, December 2008. http://msdn.microsoft.com/en-us/magazine/dd278426.aspx.
[9] M. Conti and S. Giordano. Multihop ad hoc networking: The reality. IEEE Communications Magazine, 45(4):88–95, April 2007.
[10] EMC. EMC Documentum Information Rights Management: Overview of technical architecture, 2006. White Paper.
[11] E. W. Felten. Understanding trusted computing: Will its benefits outweigh its drawbacks? IEEE Security and Privacy, 1(3):60–62, 2003.
[12] JNBridgePro. http://www.jnbridge.com/jnbpro.htm.
[13] Leeds Primary Care Trust. Appendix 3 - Example of an Information Sharing Agreement. In Leeds Interagency Protocol for Sharing Information, 2008. http://www.leedspct.nhs.uk/?pagepath=About Us/Information Sharing/Protocol. Accessed 10-Dec-2009.
[14] Liquid Machines. Liquid Machines and Microsoft Windows Rights Management Services (RMS): End-to-end Rights Management for the Enterprise, 2006. White Paper.
[15] Microsoft. Technical overview of Windows Rights Management Services for Windows Server 2003, 2005. White Paper. URL: download.microsoft.com/download/8/d/9/8d9dbf4a-3b0d-4ea1-905b-92c57086910b/RMSTechOver-view.doc.
[16] M.-C. Mont, S. Pearson, and P. Bramhall. Towards accountable management of identity and privacy: Sticky policies and enforceable tracing services. In DEXA Workshops, pages 377–382, 2003.
[17] J. Park and R. S. Sandhu. The UCONABC usage control model. ACM Trans. Inf. Syst. Secur., 7(1):128–174, 2004.
[18] J. Park, R. S. Sandhu, and J. Schifalacqua. Security architectures for controlled digital information dissemination. In 16th An. Computer Security Applications Conf. (ACSAC), pages 224–, New Orleans, USA, 2000. IEEE Computer Society.
[19] R. Ramanathan, R. Hansen, P. Basu, R. Rosales-Hain, and R. Krishnan. Prioritized epidemic routing for opportunistic networks. In Proc. of the 1st int. MobiSys Workshop on Mobile Opportunistic Networking (MobiOpp), pages 62–66, New York, USA, March 2007. ACM.
[20] A. Sahai and B. Waters. Fuzzy identity-based encryption. In 24th Int. Conf. on the Theory and Applications of Cryptographic (EUROCRYPT), volume 3494 of LNCS, pages 457–473. Springer, 2005.
[21] R. S. Sandhu, K. Ranganathan, and X. Zhang. Secure information sharing enabled by Trusted Computing and PEI models. In ASIA CCS, pages 2–12, 2006.
[22] E. Scalavino, V. Gowadia, and E. C. Lupu. PAES: Policy-based Authority Evaluation Scheme. In Proceedings of the 23rd Annual IFIP WG 11.3 Working Conference on Data and Applications Security XXIII, pages 268–282, Berlin, Heidelberg, 2009. Springer-Verlag.
[23] E. Scalavino, G. Russello, R. Ball, V. Gowadia, and E. C. Lupu. An Opportunistic Authority Evaluation Scheme for Data Security in Crisis Management Scenarios. In Proceedings of Asia CCS, 2010.
[24] S. Schoen. Trusted Computing: Promise and Risk, 2003. URL: http://www.eff.org/files/20031001 tc.pdf.
[25] A. Secure. Choosing an enterprise rights management system: Architectural approach, 2007. URL: www.windowsecurity.com/uplarticle/Authentication and Access Control/ERM-architectural-approaches.pdf.
[26] V. Swarup, L. Seligman, and A. Rosenthal. A data sharing agreement framework. In ICISS, pages 22–36, 2006.
[27] United Kingdom. Cabinet Office. Emergency preparedness guidance on part 1 of the Civil Contingencies Act 2004, non-statutory regulations and associated arrangements. URL: http://www.cabinetoffice.gov.uk/media/131903/emergprepﬁnal.pdf.
[28] A. Vahdat and D. Becker. Epidemic routing for partially connected ad hoc networks. Technical Report CS-2000-06, Duke University, April 2000.