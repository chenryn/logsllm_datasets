### Requiring Fully Qualified Domain Names (FQDNs) for Exchange Servers

When using the fully qualified domain name (FQDN) of an Exchange Server, unlike other servers in the domain, certificate authorities (CAs) often include the local name of the Exchange server. For certificates ending in `.local`, Active Directory forests are typically rooted in an FQDN. In cases where organizations have not registered an FQDN for their forest, Active Directory defaults to using the `.local` top-level domain (TLD).

Unfortunately, this practice does not provide adequate security against man-in-the-middle (MITM) attacks. It is relatively easy to obtain a certificate with the same locally scoped name as another organization. Since there is no identifiable owner for the domain, both certificates are equally valid, and the subsequent certificate can be used to impersonate the original organization.

### Adoption Trends

We observed a steady, linear increase in nearly all aspects of HTTPS adoption between June 2012 and April 2013, as shown in Figure 7. Notably, there was a 23.0% increase in the number of Alexa Top 1 Million domains serving trusted certificates and a 10.9% increase in the number of unique browser-trusted certificates found during each scan. During this period, the Netcraft Web survey reported only a 2.2% increase in the number of active sites that respond over HTTP [25]. Based on the Netcraft Survey, we found an 8.5% increase in the number of websites utilizing HTTPS, from 1.61% to 1.75%. This indicates that the increase in the number of certificates is not solely due to the growth of the Internet but also reflects an increase in the adoption of HTTPS by existing sites. Additionally, there was a 16.8% increase in the number of extended validation certificates, a 19.6% increase in the number of hosts serving HTTPS on port 443, and an 11.1% increase in the total number of TLS certificates.

The market share of each CA did not change drastically over the past year. In terms of the number of valid signed leaf certificates, Symantec grew by 6%, GoDaddy by 13%, and Comodo by 17%. During this time, there was a 10.9% increase in the global number of unique valid browser-trusted certificates. StartCom, a smaller authority based in Israel that offers free basic certificates, grew by 32% over the course of the year, from 2.17% to 2.56% market share. We plot the growth of the top authorities in Figure 8.

### Discussion

Analyzing the certificate authority ecosystem from a global perspective reveals several current practices that put the entire HTTPS ecosystem at risk. In this section, we discuss our observations and possible paths forward.

#### Ignoring Foundational Principles

The security community has several widely accepted best practices, such as the principle of least privilege and defense in depth. However, these guidelines are not being well applied within one of our most security-critical ecosystems. For instance, there are several technical practices already available for limiting the scope of a signing certificate, including setting name or path length constraints and distributing leaf certificates among a large number of intermediate certificates. There are clear cases for using these restrictions, but the vast majority of the time, CAs are not fully utilizing these options.

One example of how defense in depth successfully prevented compromise can be seen in the 1,400 signing certificates that were mis-issued to organizations in South Korea (Section 7.2). In this case, a path length constraint on a grandparent certificate prevented this error from becoming a massive vulnerability. To put this in context, if defense in depth had not been practiced, the erroneous action of a single certificate authority would have tripled the number of organizations controlling a valid signing certificate overnight. Unfortunately, while a path length constraint was in place for this particular situation, more than 40% of CA certificates do not have any constraints in place to prevent this type of error, and only a small handful use name constraints.

In a less fortunate example, Turktrust accidentally issued a signing certificate to one of its customers that ultimately signed a valid certificate for `*.google.com` (Section 7.3). If name or path constraints had been applied to Turktrust’s CA intermediate certificate, the incident could have been avoided or, at the very least, reduced in scope. In other situations, the risk associated with the compromise of a single signing certificate could be decreased by simply spreading issuance across multiple certificates (Section 5.3).

#### Standards and Working Groups

The CA/Browser Forum is a voluntary working group composed of certificate authorities and Internet browser software vendors. The group has recently attempted to resolve many of the security risks previously introduced by certificate authorities, and in November 2011, it adopted guidelines for certificate authorities [10] that address many of the concerns we raise.

However, with only 20% of the organizations controlling signing certificates being commercial certificate authorities and less than 25% of commercial authorities participating in the workgroup, there remains a disconnect. It is unclear how many organizations are aware of the existence of the baseline standard, but it is clear that a large number of organizations are either unaware or are choosing to ignore the forum’s baseline requirements. One example of this non-adherence can be seen in the agreement to cease the issuance of certificates containing internal server names and reserved IP addresses. Despite the ratification of this policy, more than 500 certificates containing internal server names and which expire after November 1, 2015, have been issued since July 1, 2012, by CA/B Forum members (Section 7.4).

Without any enforcement, members of the CA/Browser Forum have disregarded adopted policies, and we expect that other organizations are unaware of the standards. There is still work required from the security community to rein in these additional authorities and to follow up with members that are disregarding existing policies.

#### Browsers to Lead the Way

Web browser and operating system maintainers are in a unique position to set expectations for certificate authorities, and it is encouraging to see increasing dialogue in the CA/Browser Forum. However, browsers also have a responsibility to commit resources towards a healthier ecosystem. Many new, more secure technologies are dependent on support in common browsers and web servers. Without browser compatibility, certificate authorities lack incentive to adopt new, more secure options, regardless of support from the security community.

This can immediately be seen in the deployment of name constraints. We find that the vast majority of the CA certificates issued to non-CAs are used to issue certificates to a small number of domains and, as such, could appropriately be scoped using name constraints with little impact on day-to-day operations. Restricted scopes have been shown to greatly reduce the attack surface of the CA ecosystem [19], and with 80% of existing signing certificates belonging to organizations other than commercial certificate authorities, there is a clear and present need for name constraints (Section 5). However, Safari and Google Chrome on Mac OS do not currently support the critical server name constraint extension. As a result, any certificate signed using an appropriately scoped CA certificate with the extension marked as critical will be rejected on these platforms. Therefore, while there is community consensus on the value of server name constraints, progress will be slow until all browsers support the extension.

#### Failing to Recognize Cryptographic Reality

It is encouraging to find that over 95% of trusted leaf certificates and 95% of trusted signing certificates use NIST-recommended key sizes [6]. However, more than 50 root authorities continue to use 1024-bit RSA keys, the last of which expires in 2040—more than 20 years past the recommended use for a key of this size (Section 5.7). Authorities are not adequately considering the long-term consequences of authority certificates and need to anticipate what the cryptographic landscape will be in the future. Many of these root certificates were signed prior to guidelines against such long-lived CA certificates. However, today, we need to be working to resolve these past errors and preparing to remove now-inappropriate root CAs from browser root stores.

### Conclusion

In this work, we completed the largest known measurement study of the HTTPS certificate ecosystem by performing 110 comprehensive scans of the IPv4 HTTPS ecosystem over a 14-month period. We investigated the organizations that the HTTPS ecosystem depends on and identified several specific practices employed by certificate authorities that lead to a weakened public key infrastructure. We provided updated metrics on many aspects of HTTPS and certificate deployment along with adoption trends over the last year. Lastly, we discussed the high-level implications of our results and made several recommendations for strengthening the ecosystem. Our study shows that regular active scans provide detailed and temporally fine-grained visibility into this otherwise opaque area of security-critical infrastructure. We are publishing the data from our scans at https://httpsecosystem.org/ in the hope that it will assist other researchers in further investigating the HTTPS ecosystem.

### Acknowledgments

The authors thank the exceptional sysadmins at the University of Michigan for their help and support throughout this project. This research would not have been possible without Kevin Cheek, Chris Brenner, Laura Fink, Paul Howell, Don Winsor, and others from ITS, CAEN, and DCO. We thank the anonymous reviewers and our shepherd, Udi Weinsberg, for their insightful suggestions and comments. We also thank Brad Campbell, Peter Eckersley, Ralph Holz, Ben Laurie, Pat Pannuto, and Eric Wustrow. This work was supported in part by the Department of Homeland Security Science and Technology Directorate under contracts D08PC75388, FA8750-12-2-0314, and FA8750-12-2-0235; the National Science Foundation (NSF) under contracts CNS 1111699, CNS 091639, CNS 08311174, CNS 0751116, CNS 1330142, and CNS 1255153; and the Department of the Navy under contract N000.14-09-1-1042.

### References

[1] Alexa Top 1,000,000 Sites. http://s3.amazonaws.com/alexa-static/top-1m.csv.zip.
[2] Facts about ipsCA, April 2013. http://certs.ipsca.com/companyIPSipsCA/competitorssay.asp.
[3] WebTrust for Certification Authorities — SSL Baseline Requirements Audit Criteria v.1.1, Jan. 2013. http://www.webtrust.org/homepage-documents/item72056.pdf.
[4] D. Akhawe, B. Amann, M. Vallentin, and R. Sommer. Here’s my cert, so trust me, maybe? Understanding TLS errors on the web. In Proceedings of the 22nd international conference on the World Wide Web, pages 59–70, 2013.
[5] E. Barker, W. Barker, W. Burr, W. Polk, and M. Smid. Recommendation for Key Management - Part 1: General (Revision 3), 2012. http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57_part1_rev3_general.pdf.
[6] E. Barker and A. Roginsky. Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths, Jan. 2011. http://csrc.nist.gov/publications/nistpubs/800-131A/sp800-131A.pdf.
[7] L. Bello. DSA-1571-1 OpenSSL—Predictable random number generator, 2008. Debian Security Advisory. http://www.debian.org/security/2008/dsa-1571.
[8] S. Bhat. Gmail users in Iran hit by MITM Attacks, Aug. 2011. http://techie-buzz.com/tech-news/gmail-iran-hit-mitm.html.
[9] S. Blake-Wilson, M. Nystrom, D. Hopwood, J. Mikkelsen, and T. Wright. Transport Layer Security (TLS) Extensions. RFC 3546 (Proposed Standard), June 2003.
[10] CA/Browser Forum. Baseline Requirements for the Issuance and Management of Publicly-Trusted Certificates, v.1.1, Nov. 2011. https://www.cabforum.org/Baseline_Requirements_V1_1.pdf.
[11] D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley, and W. Polk. Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile. RFC 5280 (Proposed Standard), May 2008. Updated by RFC 6818.
[12] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.2. RFC 5246 (Proposed Standard), Aug. 2008. Updated by RFCs 5746, 5878, 6176.
[13] Z. Durumeric, E. Wustrow, and J. A. Halderman. ZMap: Fast Internet-wide scanning and its security applications. In Proceedings of the 22nd USENIX Security Symposium, Aug. 2013.
[14] P. Eckersley and J. Burns. An observatory for the SSLiverse. Talk at Defcon 18 (2010). https://www.eff.org/files/DefconSSLiverse.pdf.
[15] N. Heninger. Factoring as a service, Aug. 2013. Talk at CRYPTO Rump Session 2013. http://crypto.2013.rump.cr.yp.to/981774ce07e51813fd4466612a78601b.pdf.
[16] N. Heninger, Z. Durumeric, E. Wustrow, and J. A. Halderman. Mining your Ps and Qs: Detection of widespread weak keys in network devices. In 21st USENIX Security Symposium, Aug. 2012.
[17] R. Holz, L. Braun, N. Kammenhuber, and G. Carle. The SSL landscape: A thorough analysis of the X.509 PKI using active and passive measurements. In 11th ACM SIGCOMM conference on Internet measurement (IMC), 2011.
[18] R. Housley, W. Ford, W. Polk, and D. Solo. Internet X.509 public key infrastructure certificate and CRL profile. (2459), Jan. 2009.
[19] J. Kasten, E. Wustrow, and J. A. Halderman. Cage: Taming certificate authorities by inferring restricted scopes. In 17th International Conference on Financial Cryptography and Data Security (FC), 2013.
[20] T. Kleinjung, K. Aoki, J. Franke, A. Lenstra, E. Thomé, J. Bos, P. Gaudry, A. Kruppa, P. Montgomery, D. Osvik, et al. Factorization of a 768-bit RSA modulus. In Advances in Cryptology–CRYPTO 2010, pages 333–350. Springer, 2010.
[21] A. Langley. Enhancing digital certificate security. Google Online Security Blog, http://googleonlinesecurity.blogspot.com/2013/01/enhancing-digital-certificate-security.html, Jan. 2013.
[22] A. K. Lenstra, J. P. Hughes, M. Augier, J. W. Bos, T. Kleinjung, and C. Wachter. Ron was wrong, Whit is right. IACR Cryptology ePrint Archive, 2012:64, 2012.
[23] M. Marlinspike. SSL and the future of authenticity, Aug. 2011. Talk at BlackHat 2011. http://www.thoughtcrime.org/blog/ssl-and-the-future-of-authenticity/.
[24] N. Mathewson and N. Provos. libevent—An event notification library. http://libevent.org.
[25] Netcraft, Ltd. Web server survey. http://news.netcraft.com/archives/2013/05/03/may-2013-web-server-survey.html, May 2013.
[26] NetMarketShare. Desktop operating system market share, Apr. 2013. http://www.netmarketshare.com/operating-system-market-share.aspx.
[27] M. D. Network. Mozilla network security services (nss). http://www.mozilla.org/projects/security/pki/nss/.
[28] J. Nightingale. Comodo Certificate Issue – Follow Up, Mar. 2011. https://blog.mozilla.org/security/2011/03/25/comodo-certificate-issue-follow-up/.
[29] E. Rescorla. SSL and TLS: designing and building secure systems, volume 1. Addison-Wesley Reading, 2001.
[30] R. Richmond. Comodo fraud incident, Mar. 2011. http://www.comodo.com/Comodo-Fraud-Incident-2011-03-23.html.
[31] I. Ristic. Internet SSL survey 2010. Talk at BlackHat 2010. http://media.blackhat.com/bh-ad-10/Ristic/BlackHat-AD-2010-Ristic-Qualys-SSL-Survey-HTTP-Rating-Guide-slides.pdf.
[32] A. Sotirov, M. Stevens, J. Appelbaum, A. Lenstra, D. Molnar, D. A. Osvik, and B. de Weger. MD5 considered harmful today. http://www.win.tue.nl/hashclash/rogue-ca/.
[33] J. Viega, M. Messier, and P. Chandra. Network Security with OpenSSL: Cryptography for Secure Communications. O’Reilly, 2002.
[34] K. Wilson. Bug 523652 - IPS action items re IPS SERVIDORES root certificate, Nov. 2009. https://bugzilla.mozilla.org/show_bug.cgi?id=523652.
[35] S. Yilek, E. Rescorla, H. Shacham, B. Enright, and S. Savage. When private keys are public: results from the 2008 Debian OpenSSL vulnerability. In 2009 ACM SIGCOMM Internet Measurement Conference, pages 15–27.