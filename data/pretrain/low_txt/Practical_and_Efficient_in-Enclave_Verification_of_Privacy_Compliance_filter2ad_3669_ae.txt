### Data Confinement Technologies

Data confinement technologies ensure the confidentiality and integrity of untrusted code. Ryoan [9] and its subsequent work [74] provide a distributed sandbox by porting NaCl to the enclave environment, confining untrusted data-processing modules to prevent the leakage of user input data. However, Ryoan's overhead is significant (e.g., 100% on genomic data) and was evaluated using a software emulator for supporting SGXv2 instructions.

XFI [75] is a prominent unconventional PCC (Proof-Carrying Code) work based on SFI (Software Fault Isolation). It places a verifier at the OS level rather than within a TEE (Trusted Execution Environment). Our compiler-based generator is more efficient in providing forward-edge CFI (Control-Flow Integrity), and our runtime enforcement is simpler compared to traditional SFI methods such as inline reference monitors or dynamic binary translation [76], [77].

### Advantages of Our Design

Our design, DEFLECTION, offers several advantages over other state-of-the-art shielding runtimes like Occlum:

1. **Generality**: DEFLECTION is more general. Occlum's memory access checks rely on hardware (Intel MPX), which is no longer supported, significantly hindering its effectiveness.
2. **Efficiency**: DEFLECTION provides more efficient and simpler runtime enforcement.
3. **Compatibility**: DEFLECTION is designed to be more compatible with existing systems and does not depend on deprecated hardware features.

### Performance Evaluation

The performance of DEFLECTION is evaluated against baseline and other state-of-the-art solutions. The normalized processing time, throughput, and response time are key metrics used for comparison. The results show that DEFLECTION outperforms other solutions, especially in terms of normalized transfer rate and concurrency.

### References

[1] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shaﬁ, V. Shanbhogue, and U. R. Savagaonkar, “Innovative Instructions and Software Model for Isolated Execution.” HASP, vol. 10, no. 1, 2013.

[2] M. Russinovich, “Introducing Azure Confidential Computing,” Seattle, WA: Microsoft, 2017.

[3] “Google. Asylo,” 2019. [Online]. Available: https://asylo.dev/

[4] “Confidential Computing Consortium,” 2019. [Online]. Available: https://confidentialcomputing.io

[5] Z. Zhang, X. Ding, G. Tsudik, J. Cui, and Z. Li, “Presence Attestation: The Missing Link in Dynamic Trust Bootstrapping,” in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, 2017, pp. 89–102.

[6] C. Priebe, D. Muthukumaran, J. Lind, H. Zhu, S. Cui, V. A. Sartakov, and P. Pietzuch, “SGX-LKL: Securing the Host OS Interface for Trusted Execution,” arXiv preprint arXiv:1908.11143, 2019.

[7] Y. Shen, H. Tian, Y. Chen, K. Chen, R. Wang, Y. Xu, Y. Xia, and S. Yan, “Occlum: Secure and Efficient Multitasking Inside a Single Enclave of Intel SGX,” in Proceedings of the Twenty-Fifth International Conference on Architectural Support for Programming Languages and Operating Systems, 2020, pp. 955–970.

[8] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe, J. Lind, D. Muthukumaran, D. O’Keeffe, M. L. Stillwell, D. Goltzsche, D. Eyers, R. Kapitza, P. Pietzuch, and C. Fetzer, “SCONE: Secure Linux Containers with Intel SGX,” in 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI 16). USENIX Association, pp. 689–703.

[9] T. Hunt, Z. Zhu, Y. Xu, S. Peter, and E. Witchel, “Ryoan: A Distributed Sandbox for Untrusted Computation on Secret Data,” ACM Transactions on Computer Systems (TOCS), vol. 35, no. 4, p. 13, 2018.

[10] H. Wang, P. Wang, Y. Ding, M. Sun, Y. Jing, R. Duan, L. Li, Y. Zhang, T. Wei, and Z. Lin, “Towards Memory Safe Enclave Programming with Rust-SGX,” in Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, 2019, pp. 2333–2350.

[11] H. Wang, E. Bauman, V. Karande, Z. Lin, Y. Cheng, and Y. Zhang, “Running Language Interpreters Inside SGX: A Lightweight, Legacy-Compatible Script Code Hardening Approach,” in Proceedings of the 2019 ACM Asia Conference on Computer and Communications Security, 2019, pp. 114–121.

[12] T. Lazard, J. Götzfried, T. Müller, G. Santinelli, and V. Lefebvre, “TEEshift: Protecting Code Confidentiality by Selectively Shifting Functions into TEEs,” in Proceedings of the 3rd Workshop on System Software for Trusted Execution, 2018, pp. 14–19.

[13] J. Van Bulck, D. Oswald, E. Marin, A. Aldoseri, F. D. Garcia, and F. Piessens, “A Tale of Two Worlds: Assessing the Vulnerability of Enclave Shielding Runtimes,” in Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, 2019, pp. 1741–1758.

[14] G. C. Necula, “Proof-Carrying Code,” in Proceedings of the 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. ACM, 1997, pp. 106–119.

[15] F. B. Schneider, G. Morrisett, and R. Harper, “A Language-based Approach to Security,” in Informatics. Springer, 2001, pp. 86–101.

[16] C. Colby, P. Lee, G. C. Necula, F. Blau, M. Plesko, and K. Cline, “A Certifying Compiler for Java,” in ACM SIGPLAN Notices, vol. 35, no. 5. ACM, 2000, pp. 95–107.

[17] X. Leroy, “Formal Certification of a Compiler Back-End or: Programming a Compiler with a Proof Assistant,” in ACM SIGPLAN Notices, vol. 41, no. 1. ACM, 2006, pp. 42–54.

[18] H. Pirzadeh, D. Dubé, and A. Hamou-Lhadj, “An Extended Proof-Carrying Code Framework for Security Enforcement,” in Transactions on Computational Science XI. Springer, 2010, pp. 249–269.

[19] G. C. Necula and S. P. Rahul, “Oracle-based Checking of Untrusted Software,” in ACM SIGPLAN Notices, vol. 36, no. 3. ACM, 2001, pp. 142–154.

[20] R. Sinha, S. Rajamani, S. Seshia, and K. Vaswani, “Moat: Verifying Confidentiality of Enclave Programs,” in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 1169–1184.

[21] G. Morrisett, D. Walker, K. Crary, and N. Glew, “From System F to Typed Assembly Language,” ACM Transactions on Programming Languages and Systems (TOPLAS), vol. 21, no. 3, pp. 527–568, 1999.

[22] “Capstone - The Ultimate Disassembler,” http://www.capstone-engine.org/.

[23] “DEFLECTION,” https://github.com/StanPlatinum/Deflection.

[24] J. Lee, J. Jang, Y. Jang, N. Kwak, Y. Choi, C. Choi, T. Kim, M. Peinado, and B. B. Kang, “Hacking in Darkness: Return-Oriented Programming Against Secure Enclaves,” in 26th USENIX Security Symposium (USENIX Security 17), 2017, pp. 523–539.

[25] A. Biondo, M. Conti, L. Davi, T. Frassetto, and A.-R. Sadeghi, “The Guard’s Dilemma: Efficient Code-Reuse Attacks Against Intel SGX,” in 27th USENIX Security Symposium (USENIX Security 18), 2018, pp. 1213–1227.

[26] M. Schwarz, S. Weiser, and D. Gruss, “Practical Enclave Malware with Intel SGX,” in International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 2019, pp. 177–196.

[27] M. Schwarz, S. Weiser, D. Gruss, C. Maurice, and S. Mangard, “Malware Guard Extension: Using SGX to Conceal Cache Attacks,” in International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 2017, pp. 3–24.

[28] S. Lee, M.-W. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado, “Inferring Fine-Grained Control Flow Inside SGX Enclaves with Branch Shadowing,” in 26th USENIX Security Symposium (USENIX Security 17), 2017, pp. 557–574.

[29] B. Gras, K. Razavi, H. Bos, and C. Giuffrida, “Translation Leak-aside Buffer: Defeating Cache Side-Channel Protections with TLB Attacks,” in 27th USENIX Security Symposium (USENIX Security 18), 2018, pp. 955–972.

[30] Y. Xu, W. Cui, and M. Peinado, “Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems,” in 2015 IEEE Symposium on Security and Privacy. IEEE, 2015, pp. 640–656.

[31] P. V. Homeier and D. F. Martin, “A Mechanically Verified Verification Condition Generator,” The Computer Journal, vol. 38, no. 2, pp. 131–141, 1995.

[32] L. C. Paulson, “Isabelle: The Next 700 Theorem Provers,” arXiv preprint cs/9301106, 2000.

[33] L. De Moura and N. Bjørner, “Z3: An Efficient SMT Solver,” in International Conference on Tools and Algorithms for the Construction and Analysis of Systems. Springer, 2008, pp. 337–340.

[34] Y. Bertot and P. Castéran, Interactive Theorem Proving and Program Development: Coq'Art: The Calculus of Inductive Constructions. Springer Science & Business Media, 2013.

[35] A. W. Appel, N. Michael, A. Stump, and R. Virga, “A Trustworthy Proof Checker,” Journal of Automated Reasoning, vol. 31, no. 3-4, pp. 231–260, 2003.

[36] D. Brumley, I. Jager, T. Avgerinos, and E. J. Schwartz, “BAP: A Binary Analysis Platform,” in International Conference on Computer Aided Verification. Springer, 2011, pp. 463–469.

[37] A. W. Appel, “Foundational Proof-carrying Code,” in Proceedings 16th Annual IEEE Symposium on Logic in Computer Science. IEEE, 2001, pp. 247–256.

[38] Z. Wang, X. Ding, C. Pang, J. Guo, J. Zhu, and B. Mao, “To Detect Stack Buffer Overflow with Polymorphic Canaries,” in 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN). IEEE, 2018, pp. 243–254.

[39] W. Wang, G. Chen, X. Pan, Y. Zhang, X. Wang, V. Bindschaedler, H. Tang, and C. A. Gunter, “Leaky Cauldron on the Dark Land: Understanding Memory Side-Channel Hazards in SGX,” in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, 2017, pp. 2421–2434.

[40] G. Chen, W. Wang, T. Chen, S. Chen, Y. Zhang, X. Wang, T.-H. Lai, and D. Lin, “Racing in Hyperspace: Closing Hyper-Threading Side Channels on SGX with Contrived Data Races,” in 2018 IEEE Symposium on Security and Privacy (SP). IEEE, 2018, pp. 178–194.

[41] D. Gruss, J. Lettner, F. Schuster, O. Ohrimenko, I. Haller, and M. Costa, “Strong and Efficient Cache Side-Channel Protection Using Hardware Transactional Memory,” in 26th USENIX Security Symposium (USENIX Security 17), 2017, pp. 217–233.

[42] T. Knauth, M. Steiner, S. Chakrabarti, L. Lei, C. Xing, and M. Vij, “Integrating Remote Attestation with Transport Layer Security,” arXiv preprint arXiv:1801.05863, 2018.

[43] N. A. Quynh, “Capstone: Next-Gen Disassembly Framework,” Black Hat USA, 2014.

[44] “Occlum,” https://github.com/occlum/occlum.

[45] R. Sinha, M. Costa, A. Lal, N. P. Lopes, S. Rajamani, S. A. Seshia, and K. Vaswani, “A Design and Verification Methodology for Secure Isolated Regions,” in ACM SIGPLAN Notices, vol. 51, no. 6. ACM, 2016, pp. 665–681.

[46] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-Ruiz, and M. Russinovich, “VC3: Trustworthy Data Analytics in the Cloud Using SGX,” in 2015 IEEE Symposium on Security and Privacy. IEEE, 2015, pp. 38–54.

[47] “SGX nBench,” https://github.com/utds3lab/sgx-nbench.

[48] S. B. Needleman and C. D. Wunsch, “A General Method Applicable to the Search for Similarities in the Amino Acid Sequence of Two Proteins,” Journal of Molecular Biology, vol. 48, no. 3, pp. 443–453, 1970.

[49] “Fasta Format,” https://en.wikipedia.org/wiki/FASTA_format.

[50] “1000 Genomes Project,” https://en.wikipedia.org/wiki/1000_Genomes_Project.

[51] H. L. Jensen, “Using Neural Networks for Credit Scoring,” Managerial Finance, vol. 18, no. 6, pp. 15–26, 1992.

[52] “mbedTLS,” https://tls.mbed.org/.

[53] “Siege,” https://www.joedog.org/siege-home/.

[54] G. Doychev, B. Köpf, L. Mauborgne, and J. Reineke, “CacheAudit: A Tool for the Static Analysis of Cache Side Channels,” ACM Transactions on Information and System Security (TISSEC), vol. 18, no. 1, pp. 1–32, 2015.

[55] J. B. Almeida, M. Barbosa, G. Barthe, F. Dupressoir, and M. Emmi, “Verifying Constant-Time Implementations,” in 25th USENIX Security Symposium (USENIX Security 16), 2016, pp. 53–70.

[56] M.-W. Shih, S. Lee, T. Kim, and M. Peinado, “T-SGX: Eradicating Controlled-Channel Attacks Against Enclave Programs,” in NDSS, 2017.

[57] M. Wu, S. Guo, P. Schaumont, and C. Wang, “Eliminating Timing Side-Channel Leaks Using Program Repair,” in Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis, 2018, pp. 15–26.

[58] S. Wang, Y. Bao, X. Liu, P. Wang, D. Zhang, and D. Wu, “Identifying Cache-Based Side Channels Through Secret-Augmented Abstract Interpretation,” in 28th USENIX Security Symposium (USENIX Security 19), 2019, pp. 657–674.

[59] M. Orenbach, Y. Michalevsky, C. Fetzer, and M. Silberstein, “CoSMIX: A Compiler-based System for Secure Memory Instrumentation and Execution in Enclaves,” in 2019 USENIX Annual Technical Conference (USENIX ATC 19), 2019, pp. 555–570.

[60] F. Liu, H. Wu, and R. B. Lee, “Can Randomized Mapping Secure Instruction Caches from Side-Channel Attacks?” in Proceedings of the Fourth Workshop on Hardware and Architectural Support for Security and Privacy, 2015, pp. 1–8.

[61] S. Sasy, S. Gorbunov, and C. W. Fletcher, “ZeroTrace: Oblivious Memory Primitives from Intel SGX,” IACR Cryptol. ePrint Arch., vol. 2017, p. 549, 2017.

[62] A. Ahmad, B. Joe, Y. Xiao, Y. Zhang, I. Shin, and B. Lee, “Obfuscuro: A Commodity Obfuscation Engine on Intel SGX,” in NDSS, 2019.

[63] W. Liu, D. Gao, and M. K. Reiter, “On-Demand Time Blurring to Support Side-Channel Defense,” in European Symposium on Research in Computer Security. Springer, 2017, pp. 210–228.

[64] M. Orenbach, A. Baumann, and M. Silberstein, “Autarky: Closing Controlled Channels with Self-Paging Enclaves,” in Proceedings of the Fifteenth European Conference on Computer Systems, 2020, pp. 1–16.

[65] N. Weichbrodt, A. Kurmus, P. Pietzuch, and R. Kapitza, “AsyncShock: Exploiting Synchronization Bugs in Intel SGX Enclaves,” in European Symposium on Research in Computer Security. Springer, 2016, pp. 440–457.

[70] D. Tian, J. I. Choi, G. Hernandez, P. Traynor, and K. R. Butler, “A Practical Intel SGX Setting for Linux Containers in the Cloud,” in Proceedings of the Ninth ACM Conference on Data and Application Security and Privacy, 2019, pp. 255–266.

[66] X. Xu, M. Ghaffarinia, W. Wang, K. W. Hamlen, and Z. Lin, “CONFIRM: Evaluating Compatibility and Relevance of Control-Flow Integrity Protections for Modern Software,” in 28th USENIX Security Symposium (USENIX Security 19), 2019, pp. 1805–1821.

[67] C. DeLozier, K. Lakshminarayanan, G. Pokam, and J. Devietti, “Hurdle: Securing Jump Instructions Against Code Reuse Attacks,” in Proceedings of the Twenty-Fifth International Conference on Architectural Support for Programming Languages and Operating Systems, 2020, pp. 653–666.

[68] N. Burow, X. Zhang, and M. Payer, “SoK: Shining Light on Shadow Stacks,” in 2019 IEEE Symposium on Security and Privacy (SP). IEEE, 2019, pp. 985–999.

[69] N. Hynes, R. Cheng, and D. Song, “Efficient Deep Learning on Multi-Source Private Data,” arXiv preprint arXiv:1807.06689, 2018.

[71] S. Shinde, D. Le Tien, S. Tople, and P. Saxena, “Panoply: Low-TCB Linux Applications With SGX Enclaves.” in NDSS, 2017.

[72] K. Shanker, A. Joseph, and V. Ganapathy, “An Evaluation of Methods to Port Legacy Code to SGX Enclaves,” in Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, 2020, pp. 1077–1088.

[73] J. Jiang, X. Chen, T. Li, C. Wang, T. Shen, S. Zhao, H. Cui, C.-L. Wang, and F. Zhang, “Uranus: Simple, Efficient SGX Programming and Its Applications,” in Proceedings of the 15th ACM Asia Conference on Computer and Communications Security, 2020, pp. 826–840.

[74] T. Hunt, C. Song, R. Shokri, V. Shmatikov, and E. Witchel, “Chiron: Privacy-Preserving Machine Learning as a Service,” arXiv preprint arXiv:1803.05961, 2018.

[75] Ú. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. C. Necula, “XFI: Software Guards for System Address Spaces,” in Proceedings of the 7th Symposium on Operating Systems Design and Implementation. USENIX Association, 2006, pp. 75–88.

[76] Y. Zhou, X. Wang, Y. Chen, and Z. Wang, “ARMlock: Hardware-Based Fault Isolation for ARM,” in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, 2014, pp. 558–569.

[77] G. Tan, Principles and Implementation Techniques of Software-Based Fault Isolation. Now Publishers, 2017.

[78] K. A. Küçük, D. Grawrock, and A. Martin, “Managing Confidentiality Leaks Through Private Algorithms on Software Guard Extensions (SGX) Enclaves,” EURASIP Journal on Information Security, vol. 2019, no. 1, p. 14, 2019.

[79] R. Silva, P. Barbosa, and A. Brito, “DynSGX: A Privacy Preserving Toolset for Dynamically Loading Functions into Intel SGX Enclaves,” in 2017 IEEE International Conference on Cloud Computing Technology and Science (CloudCom). IEEE, 2017, pp. 314–321.

[80] E. Bauman, H. Wang, M. Zhang, and Z. Lin, “SgxElide: Enabling Enclave Code Secrecy via Self-Modification,” in Proceedings of the 2018 International Symposium on Code Generation and Optimization. ACM, 2018, pp. 75–86.

[81] M. Barnett, B.-Y. E. Chang, R. DeLine, B. Jacobs, and K. R. M. Leino, “Boogie: A Modular Reusable Verifier for Object-Oriented Programs,” in International Symposium on Formal Methods for Components and Objects. Springer, 2005, pp. 364–387.