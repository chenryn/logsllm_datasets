# Hacking Your Mini Cooper: Reverse Engineering CAN Messages on Passenger Automobiles

**Presenter: Jason Staggs**

- **Affiliation:** 
  - Graduate Research Assistant, Institute for Information Security (iSec)
  - Crash Reconstruction Research Consortium (TU-CRRC)
  - Cyber Security Analyst, TRUE Digital Security
- **Contact:** [www.isec.utulsa.edu](http://www.isec.utulsa.edu)

## Why Do We Hack Cars?

### Motivation and Context
- **Related Work:**
  - "Experimental Security Analysis of a Modern Automobile"
  - "Comprehensive Experimental Analyses of Automotive Attack Surfaces"
- **Understanding Vehicle Systems:**
  - The underlying CAN protocol and its components lack authentication and verification mechanisms.
  - Vehicle network security is still in its infancy.
- **Primary Goal:**
  - To prevent potential security breaches and ensure the safety and integrity of vehicle systems.

## Preventing Security Breaches

- **Objective:**
  - To avoid scenarios where unauthorized access to the vehicle's CAN bus can lead to dangerous or malicious outcomes.

## CAN Clock Project

- **Overview:**
  - A proof-of-concept project aimed at manipulating CAN nodes via the CAN network.
  - Focus: 2003 Mini Cooper.

## Vehicle Communication Networks

- **Common Protocols:**
  - **CAN (Controller Area Network):** Most widely used among manufacturers.
  - **FlexRay, LIN, MOST, J1850 (GM/Chrysler), J1939 (Heavy Trucks), J1708/J1587 (Phased out due to J1939).**
  - **Mandated Use:** By 2008, all US cars use CAN for EPA diagnostics.

## Interconnected Vehicle Networks

- **CAN Standard:**
  - Developed by Bosch in the 1980s.
  - Early adopters: European automotive manufacturers.
  - **Multi-master broadcast message system.**
  - **Standard Format:**
    - 11-bit message ID (2048 possible IDs).
    - Proprietary IDs for ECUs.
  - **Extended Format:**
    - 29-bit message ID (537 million possible IDs).
    - Extensively used by J1939.

## CAN Frame Structure

- **Components:**
  - **SOF (Start of Frame)**
  - **Identifier:** Unique identifier with priority.
  - **RTR (Remote Transmission Request)**
  - **IDE (Identifier Extension):** Distinguishes between standard and extended formats.
  - **DLC (Data Length Code):** Up to 8 bytes of data.
  - **CRC (Cyclic Redundant Checksum)**
  - **ACK (Acknowledge)**
  - **EOF (End of Frame)**
  - **IFS (Intermission Frame Space)**

## Electronic Control Units (ECUs)

- **Functions:**
  - **Safety Systems:**
    - Engine control unit
    - ABS braking system
    - Door locks
  - **Non-safety Critical Systems:**
    - Radio deck
    - HVAC system
  - **Programmable ECUs:**
    - Allow manufacturers to update firmware.
  - **Average Number of ECUs in a Modern Car:** ~70.

## Reverse Engineering CAN Messages

- **Objective:**
  - Manipulate CAN-enabled vehicle components (e.g., Instrument Cluster).
- **Challenge:**
  - Manufacturers do not publish detailed CAN message information.
- **Solution:**
  - **Visual Correlation:** Identifying patterns through physical system interactions.
  - **Fuzzing:** A method to test for vulnerabilities (caution advised).

### Data Collection

- **Test Run:**
  - Staged automotive collision (Mini Cooper vs. GMC Envoy).
  - Data capture duration: ~90 seconds.
  - **Result:** ~106,000 CAN message entries.

### Data Analysis

- **Unique CAN IDs:**
  - Only 15 unique CAN IDs identified.
  - **Example:**
    - **Message ID 0x153:** Vehicle Speed
    - **Plotting Data:**
      - Vehicle speed over time.
      - Identified as Byte 2 of the 0x153 message.

### Key Message IDs

- **Speedometer and Tachometer:**
  - **Methods:**
    - Plot data values vs. timestamp.
    - Fuzz data fields to observe changes.
  - **Identified IDs:**
    - **0x153 Byte 2:** Speedometer (Vehicle Speed)
    - **0x316 Byte 3:** Tachometer (Engine Speed)
    - **0x329:** Various indicator lights
    - **0x61A:** Controls messages on tachometer LED screen
    - **0x61F:** Tachometer and various indicator lights

## Building the CAN Clock and Network

- **Components:**
  - 18-gauge wire
  - 2 x 120-ohm terminating resistors
  - 12V DC power source
  - Arduino Uno microcontroller
  - CAN Bus Shield (MCP2515 CAN controller, MCP2551 CAN transceiver)
  - Mini Cooper Instrument Cluster
  - Real-time clock module (RTC)

### Proof of Concept

- **Arduino and CAN Controller Libraries:**
  - **MCP2515:** Communicates with CAN transceiver.
  - **SPI:** Used for communication between Arduino and CAN shield.
- **Modes of Operation:**
  - **Clock Mode:** Displays time.
  - **Demo Mode:** Demonstrates CAN message manipulation.

## Gaining Physical Access to the CAN Bus

- **Methods:**
  - **OBD2 Port:**
    - Direct access point.
  - **Tapping the CAN Bus:**
    - Under the hood.
    - Breaking a powered side view mirror.
  - **Cost-Effective Approach:**
    - Rogue Arduino CAN node for under $100.
  - **Potential Conspirators:**
    - Mechanics, car rentals, coworkers, family, friends, valets, ex-girlfriends, etc.

## Conclusion and Future Work

- **Improved Access Control:**
  - Between vehicle network components (ECU to ECU, OBD2 to ECU).
- **Network Security:**
  - Applying conventional NIPS and firewall methods to CAN.
  - Contextual message anomaly prevention.

## Additional Resources

- **TU Research:**
  - [iSec Website](http://isec.utulsa.edu/)
  - [TU-CRRC Website](http://tucrrc.utulsa.edu/) (Crash tests and research)
  - [CAN Clock Project](http://tucrrc.utulsa.edu/canclock/)
- **CAN Standards and Documentation:**
  - [CAN 2.0 Specification](http://esd.cs.ucr.edu/webres/can20.pdf)
  - [SAE Standards](http://www.sae.org/standards/)

## Questions?

- **Contact:**
  - Principal Investigator: [EMAIL]