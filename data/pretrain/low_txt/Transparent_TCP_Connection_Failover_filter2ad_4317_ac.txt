### TCP Failover Performance Analysis

We first measured the connection time from a client application to a redundant server and compared these times with the standard TCP connection time. To ensure accurate results, we ensured that the MAC addresses of all nodes were present in the ARP caches. If the MAC addresses are not cached, both the client and the router must run the ARP protocol, which adds approximately 300 milliseconds to the connection setup time. The ARP process affects both standard TCP and TCP Failover equally.

The median connection setup time for standard TCP is 294 milliseconds, with a maximum of 603 milliseconds. For TCP Failover, the median connection setup time is 505 milliseconds, with a maximum of 1193 milliseconds.

### Data Transfer Performance

Next, we measured the send and receive times for messages of varying lengths. Figure 3 shows the median time it takes for an application to send a message to an unreplicated server using standard TCP and to a replicated server using TCP Failover. The message length ranged from 64 bytes to 1 MByte.

It can be observed that the send time for messages up to 32 KBytes does not increase at the same rate as the send times for larger messages. This is due to the 64 KByte TCP send buffer. The send call returns when the application has passed the last byte to the stack, not when the last byte has been transmitted. The effect of the send buffer diminishes as the message size increases.

Similar results were obtained for server-to-client data transfer. In this case, the client application sends a 4-byte message to the server, and the server sends a reply message back to the client. Figure 4 shows the elapsed time between the client starting to send the 4-byte message and the client receiving the last byte of the server's reply. The size of the reply messages varies from 64 bytes to 1 MByte. The non-linearity in the standard TCP measurement is caused by collisions on the Ethernet, with the probability of acknowledgments colliding with data packets varying with message size.

### Send and Receive Rates

Figure 5 compares the send and receive rates between standard TCP and TCP Failover. These rates were measured by having a client send and receive data streams of 100 MBytes.

### FTP Performance

We used the File Transfer Protocol (FTP) to test TCP Failover with a real-world application. FTP allows a client to upload and download files from a remote site. The remote site runs an FTP server, which listens on port 21. An FTP client opens an ephemeral port (chosen by the operating system) and connects to the server’s FTP port. This connection is used to exchange control data. After the server verifies that the client is permitted to access the server’s file system, the client opens a server socket with an ephemeral port and informs the server of the chosen port number.

Every time the client initiates a data transfer (get or put), it sends a request to the server. The server opens a client socket on port 20 (FTP data) and connects to the client. The server and the client exchange the file content via the data connection. Once the transfer is complete, both sides terminate the data connection.

We connected an FTP client to the replicated FTP server via a wide-area network and transferred files of different sizes. Figure 6 lists the median send and receive rates as indicated by the FTP client.

As these results illustrate, measurements over a wide-area network are highly dependent on competing traffic and packet loss rates, leading to significant variations.

### Related Work

**TCP Splicing [13]**: A technique used to improve the performance and scalability of application-level gateways. Clients establish TCP connections to a dispatcher application, which selects an appropriate server to handle the client connection. The dispatcher modifies the TCP stack to forward all TCP packets directly to the selected server, eliminating further involvement until the connection is terminated.

**TCP Handoff [3]**: Removes the dispatcher by allowing the client to connect directly to one of the servers. If the initial server decides another server is better suited, it transfers the TCP connection state to the alternative server. This requires a special front-end layer-4 switch to route packets to the appropriate server.

**TCP Migration [12]**: A scheme that is transparent to the client application but requires modifications to both the client and server TCP layers. It allows the migration of the connection, initiated by the client or any of the servers, and supports geographically distributed servers. Only one server is connected to the client at any time, and multicasting or forwarding of client data is not possible.

**M-TCP [15]**: Moves a server’s TCP endpoint to a different location, migrating a limited amount of application state and synchronizing the application and TCP layer. It requires support from both the client and server TCP layers. The migration is initiated by the client, and both servers must be operational during the process, making it unsuitable for fault tolerance.

**HydraNet-FT [11]**: A fault-tolerant extension of the HydraNet infrastructure that replaces a single server with a group of replicated servers. It multicasts IP packets sent by the client to a set of replicated servers, requiring all traffic to go through a special redirector on an Internet router. The system supports atomic multicasting and can accommodate any transport protocol based on IP.

**Backup and Replay [2]**: Intercepts and logs all client-server TCP communication at a backup computer. When the server fails, the server application is restarted, and all stack activity is replayed. The backup node performs an IP takeover, taking over the role of the server node for the remaining lifetime of the connection. No modifications are required to the client TCP stack, the client application, or the server application.

**Semi-Active Replication [8]**: Replicates TCP server endpoints in a semi-active manner, similar to the TCP Failover approach. It puts the network interface of the secondary server into promiscuous mode and employs a leader/follower protocol to avoid inconsistent behavior. The system requires modifications to the server application and system libraries of the server and client hosts.

**Transparent Replication [5]**: Allows the transparent replication of servers that communicate with unreplicated clients via TCP. The secondary server taps into connections established between the primary server and the client using a promiscuous receive mode, with the client remaining unmodified.

**SwiFT [6, 7]**: Provides fault tolerance for user applications, including error detection and recovery, checkpointing, event logging and replay, communication error recovery, and IP packet rerouting. It provides a single IP image for a cluster of computers, with all traffic from clients sent to a dispatcher, which forwards the packets to one of the servers. Clients must run SwiFT client software to reestablish TCP connections if the server fails.

**Web Server Replication [1]**: A system to replicate web servers, implemented in user space using IP sockets. The backup proxy logs client requests and server replies, but suffers from poor performance due to context switches and protocol stack traversals.

### Conclusion

We have described TCP Failover, a protocol that enables the failover of a TCP server endpoint in a manner that is transparent to both the clients and the server application. In the event of a fault, TCP Failover migrates the TCP server endpoint from a primary server to a backup server by modifying the server’s TCP/IP stack. No modifications are required to the client’s TCP/IP stack, the client application, or the server application. The overhead is reasonable, given the complete transparency of the approach.

### References

[1] N. Aghdaie and Y. Tamir, "Client-transparent fault-tolerant Web service," Proceedings of the IEEE International Conference on Performance, Computing, and Communications, Phoenix, AZ (April 2001), pp. 209–216.

[2] L. Alvisi, T. C. Bressoud, A. El-Khashab, K. Marzullo, and D. Zagorodnov, "Wrapping server-side TCP to mask connection failures," Proceedings of INFOCOM 2001, Anchorage, AL (April 2001), pp. 329–337.

[3] M. Aron, D. Sanders, P. Druschel, and W. Zwaenepoel, "Scalable request distribution in cluster-based network servers," Proceedings of the USENIX 2000 Annual Technical Conference, San Diego, CA (June 2000), pp. 323–336.

[4] A. Bhide, E. N. Elnozahy, and S. P. Morgan, "A highly available network file server," Proceedings of the 1991 USENIX Winter Conference, Dallas, TX (January 1991), pp. 199–205.

[5] C. Fetzer and S. Mishra, "Transparent TCP/IP based replication," Proceedings of the IEEE International Symposium on Fault-tolerant Computing, Madison, WI (June 1999).

[6] H. Y. Huang and C. Kintala, "Software implemented fault tolerance," Proceedings of the IEEE Fault Tolerant Computing Symposium, Toulouse, France (June 1993), pp. 2–10.

[7] Y. Huang, P. E. Chung, C. Kintala, C.-Y. Wang, and D.-R. Liang, "NT-SwiFT: Software implemented fault tolerance on Windows NT," Proceedings of the USENIX Windows NT Symposium, Seattle, WA (August 1998).

[8] M. Orgiyan and C. Fetzer, "Tapping TCP streams," Proceedings of the IEEE International Symposium on Network Computing and Applications, Cambridge, MA (October 2001), pp. 278–289.

[9] J. B. Postel, "Transmission Control Protocol," RFC 793 (September 1981).

[10] J. B. Postel, "TCP maximum segment size and related topics," RFC 879 (November 1983).

[11] G. Shenoy, S. K. Satapati, and R. Bettati, "HydraNet-FT: Network support for dependable services," Proceedings of the IEEE International Conference on Distributed Computing Systems, Taipei, Taiwan (April 2000), pp. 699–706.

[12] A. C. Snoeren, D. G. Andersen, and H. Balakrishnan, "Fine-grained failover using connection migration," Proceedings of the USENIX Symposium on Internet Technologies and Systems, San Francisco, CA (March 2001), pp. 221–232.

[13] O. Spatscheck, J. S. Hansen, J. H. Hartman, and L. L. Peterson, "Optimizing TCP forwarder performance," IEEE/ACM Transactions on Networking, vol. 8, no. 2 (April 2000), pp. 146–157.

[14] W. R. Stevens, Unix Network Programming, vol. 1, 2nd edition, Prentice-Hall, Upper Saddle River, NJ (1998).

[15] F. Sultan, K. Srinivasan, D. Iyer, and L. Iftode, "Migratory TCP: Connection migration for service continuity in the Internet," Proceedings of the IEEE International Conference on Distributed Computing Systems, Vienna, Austria (July 2002), pp. 469–470.

Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE