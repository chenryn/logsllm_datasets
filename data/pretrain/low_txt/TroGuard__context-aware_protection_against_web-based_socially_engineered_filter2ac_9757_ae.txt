It seems that the text provided is a mix of special character codes and fragments of a technical paper. To help, I'll reconstruct and optimize the sections that are readable, assuming this is part of a research paper on TROGUARD, a system for detecting and mitigating trojan attacks. 

---

### 5.4 Application Classification Performance

During the application type learning phase, TROGUARD saved the collected data for the 100 applications in human-readable plain text files (totaling 40.5 GB). TROGUARD built five models using the meta-classifier Ensembles of Nested Dichotomies (END) in the Weka machine learning suite, based on the C4.5 decision tree classification algorithm. The algorithm can handle both continuous (numeric) and discrete (nominal) attributes. TROGUARD constructs the decision tree with a minimum of two instances per leaf. Additionally, TROGUARD uses one fold for reduced-error pruning and two extra folds for growing the tree.

Table 2 shows the performance results for the application classification engine. The total 81 attributes were distributed among four attribute sets. The second row indicates the time required for TROGUARD to complete the supervised learning and training phases using all of the application data logs. The first four columns show the time requirement for classification using a subset of attributes, and the last column reports the overall time required for creating trained models using all of the attributes. As shown, the training phase using all attributes takes less than one second, which is an acceptable duration for real-world deployment of the TROGUARD framework.

### 5.5 Performance Overhead

We studied the performance overhead of the data collection tool LTTng kernel tracer. The LTTng kernel tracer is a highly efficient tracing tool typically used by system developers to track down performance issues and debug problems in multi-process systems. The reported impact of LTTng on kernel operations, in terms of CPU cycles compared to a vanilla kernel, is less than 5% [2].

We measured the impact of TROGUARD's syscall interception engine on various aspects of system performance, including kernel CPU utilization, memory utilization, disk throughput, and network throughput. Additionally, we benchmarked the network throughput over loopback. Figure 10 shows the results. In our experiments, the maximum CPU overhead introduced by TROGUARD's kernel tracer was 20% for the calculator. The maximum memory overhead was 15% for running a video editor. The measured performance overhead for disk throughput ranged from 45% to 87%. The high disk operation overhead of TROGUARD is due to its logging activities to the system's disk in parallel. The network performance degradation ranged from 55% to 60%. It is noteworthy that these overheads are not permanent and diminish once TROGUARD reaches a conclusion on whether the running application is a trojan.

### 5.6 Behavioral Mimicry Attacks

One of the main challenges faced by behavioral-based detection solutions is their vulnerability to behavioral mimicry attacks. We evaluated how TROGUARD performs in terminating such attacks, where malicious applications try to mimic legitimate functionality while conducting malicious activities in the background. First, we describe a concrete case study to illustrate step-by-step how TROGUARD detects a sample trojan, the Freesweep game application, downloaded from a legitimate-looking malicious website. Next, we present our results on 50 other mimicry attack samples.

We obtained the Freesweep game application trojan payload using the Metasploit suite as a Ubuntu deb game package. The trojan package included the original game, the exploit payload, and a post-installation script that executed the exploitation script. Upon execution, the malicious payload opened a secret socket connection and created a reverse shell to connect back to an adversarial remote site.

We masqueraded a Softpedia web page to hold the malicious trojan game package, convincing the victim user to download, install, and run the game on her desktop computer. Once the victim clicked to download the package, TROGUARD's extension component noticed the download action request in the browser. TROGUARD analyzed the download website and correctly estimated the functionality class, i.e., game. The determined functionality class was shown to the user through a browser popup (similar to Figure 4) with the default option set to game. After the user's confirmation, TROGUARD switched to monitoring mode to trace and capture the application's execution footprint. Analysis of the logged data sets using the 100-application trained model resulted in most of the downloaded application's data points being classified as a calculator. Figure 12 shows the calculated probability values for each functionality class, i.e., the probability that the downloaded application belongs to a particular functionality class. The mismatch between the confirmed functionality and the expected class triggered TROGUARD to flag the application as suspicious.

### Usability and Accuracy

TROGUARD's design aims to be user-friendly, even for non-technical users. The browser extension uses terms familiar to users from popular download websites. The user only needs to confirm that the application class displayed by the browser extension matches the class they expected based on the download page. This design makes TROGUARD usable by a wide range of users. However, this belief needs to be validated through an actual usability study, which we intend to pursue in future work, pending IRB approval.

Is TROGUARD useful even if it is not absolutely accurate? Semi-automated detection of social engineering attacks using mostly system-level information remains a challenging problem, as indicated by their recent increasing popularity among attackers. TROGUARD introduces a new solution against web-based socially engineered trojan attacks by categorizing applications' functionality classes rather than individual applications. Additionally, as our implementation is not yet optimized, both the website analysis and application classification accuracies can be improved through parameter tuning and more advanced techniques, such as static executable analysis, to estimate the application's functionality class.

### 8. Conclusions

We presented TROGUARD, an effective system solution to protect client systems against web-based trojan attacks that use social engineering techniques to convince victims to willingly download and execute legitimate-looking malicious software. Our results over a large set of applications show that TROGUARD can effectively bridge the gap between high-level user perceptions and low-level system execution traces to block trojan intrusions efficiently under real-world adversarial situations.

### Acknowledgements

We appreciate the anonymous reviewers and thank our sponsor, the Office of Naval Research (Grant N000141210462).

### References

[1] Trojanhunter; available at www.trojanhunter.com, 2013.
[2] R. G. Anjoy and S. K. Chakraborty. Efficiency of LTTng as a kernel and userspace tracer on multicore environment. Technical report, 2010.
[3] S. Arlot and M. Lerasle. V-fold cross-validation and V-fold penalization in least-squares density estimation. 2012.
[4] U. Bayer, P. M. Comparetti, C. Hlauschek, C. Krügel, and E. Kirda. Scalable, behavior-based malware clustering. In NDSS. The Internet Society, 2009.
[5] U. Bayer, I. Habibi, D. Balzarotti, E. Kirda, and C. Kruegel. A view on current malware behaviors. In Proceedings of the 2nd USENIX conference on Large-scale exploits and emergent threats: botnets, spyware, worms, and more, LEET’09, pages 8–8, Berkeley, CA, USA, 2009. USENIX Association.
[6] N. Carlini, A. P. Felt, and D. Wagner. An evaluation of the Google Chrome extension security architecture. In Proceedings of the 21st USENIX conference on Security symposium, Security’12, pages 7–7, Berkeley, CA, USA, 2012. USENIX Association.
[7] M. Christodorescu, S. Jha, and C. Kruegel. Mining specifications of malicious behavior. In 6th joint meeting of the European Software Engineering Conference and the ACM SIGSOFT International Symposium on Foundations of Software Engineering, pages 5–14, 2007.
[8] S.-Y. Dai, Y. Fyodor, M.-W. Wu, Y. Huang, and S.-Y. Kuo. Holography: a behavior-based profiler for malware analysis. Software: Practice and Experience, 42(9):1107–1136, 2012.
[9] P. J. Denning and R. D. Riehle. The profession of IT is software engineering engineering? Communications of the ACM, 52(3):24–26, 2009.
[10] M. Desnoyers and M. Dagenais. The LTTng tracer: A low-impact performance and behavior monitor for GNU/Linux. In Proceedings of the 27th Annual ACM Symposium on Applied Computing, pages 354–359. ACM, 2012.
[11] L. Garber. Security, privacy, and policy roundup. IEEE Security & Privacy, pages 15–17, 2012.
[12] M. Hall, E. Frank, G. Holmes, B. Pfahringer, P. Reutemann, and I. H. Witten. The WEKA data mining software: an update. ACM SIGKDD Explorations Newsletter, 11(1):10–18, 2009.
[13] E. Kirda, C. Kruegel, G. Banks, G. Vigna, and R. A. Kemmerer. Behavior-based spyware detection. In Proceedings of the 15th conference on USENIX Security Symposium - Volume 15, USENIX-SS’06, Berkeley, CA, USA, 2006. USENIX Association.
[14] C. Kuo, F. Schneider, C. Jackson, D. Mountain, and T. Winograd. Google Safe Browsing. Project at Google Inc., June–August, 2005.
[15] A. Lanzi, D. Balzarotti, C. Kruegel, M. Christodorescu, and E. Kirda. AccessMiner: Using system-centric models for malware protection. In Proceedings of the 17th ACM conference on Computer and communications security, CCS ’10, pages 399–412, New York, NY, USA, 2010. ACM.
[16] T. Lee, J. J. Mody, Y. L. Lin, A. M. Marinescu, and A. A. Polyakov. Application behavioral classification, 06 2007.
[17] D. Lo, H. Cheng, J. Han, S.-C. Khoo, and C. Sun. Classification of software behaviors for failure detection: a discriminative pattern mining approach. In Proceedings of the 15th ACM SIGKDD international conference on Knowledge discovery and data mining, KDD ’09, pages 557–566, New York, NY, USA, 2009. ACM.
[18] L. Lu, V. Yegneswaran, P. Porras, and W. Lee. BLADE: An attack-agnostic approach for preventing drive-by malware infections. In Proceedings of the 17th ACM conference on Computer and communications security, CCS ’10, pages 440–450, New York, NY, USA, 2010. ACM.
[19] T. Malicious programs for Mac OS X. McAfee Antivirus Solution; available at http://www.securelist.com, 2012.
[20] D. Maynor. Metasploit Toolkit for Penetration Testing, Exploit Development, and Vulnerability Research. Syngress, 2007.
[21] McAfee. McAfee Antivirus Solution; available at http://www.mcafee.com, 2013.
[22] A. Moser, C. Kruegel, and E. Kirda. Exploring multiple execution paths for malware analysis. In Proceedings of the 2007 IEEE Symposium on Security and Privacy, SP ’07, pages 231–245, Washington, DC, USA, 2007. IEEE Computer Society.
[23] R. Naraine. Adobe: Beware of fake Flash downloads; available at http://www.zdnet.com, 2008.
[24] Y. Okazaki, I. Sato, and S. Goto. A new intrusion detection method based on process profiling. In Applications and the Internet, 2002. (SAINT 2002). Proceedings. 2002 Symposium on, pages 82–90, 2002.
[25] K. Rieck, T. Holz, C. Willems, P. Düssel, and P. Laskov. Learning and classification of malware behavior. In Proceedings of the 5th international conference on Detection of Intrusions and Malware, and Vulnerability Assessment, DIMVA ’08, pages 108–125, Berlin, Heidelberg, 2008. Springer-Verlag.
[26] K. Rieck, P. Trinius, C. Willems, and T. Holz. Automatic analysis of malware behavior using machine learning. J. Comput. Secur., 19(4):639–668, dec 2011.
[27] J. H. Saltzer and F. Kaashoek. Principles of computer system design: an introduction. Morgan Kaufmann Pub, 2009.
[28] R. Smith. An overview of the Tesseract OCR engine. In Proc. Ninth Int. Conference on Document Analysis and Recognition (ICDAR), pages 629–633, 2007.
[29] D. Toupin. Using tracing to diagnose or monitor systems. Software, IEEE, 28(1):87–91, 2011.
[30] Wikipedia. Computer keyboard — Wikipedia, the free encyclopedia, 2013.
[31] J. Zhang and R. J. Figueiredo. Application classification through monitoring and learning of resource consumption patterns. In Proceedings of the 20th international conference on Parallel and distributed processing, IPDPS’06, pages 144–144, Washington, DC, USA, 2006. IEEE Computer Society.
[32] E. Zini. A cute introduction to debtags. In Proceedings of the 5th annual Debian Conference, pages 59–74, 2005.

---

This should provide a clearer, more coherent, and professional version of the text. If you have any specific sections or additional details you'd like to include, please let me know!