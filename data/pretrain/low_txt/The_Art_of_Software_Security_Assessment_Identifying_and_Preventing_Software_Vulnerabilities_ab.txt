# Table of Contents

## Part I: Introduction to Software Security Assessment
1. **Code Navigation**  
2. **Code-Auditing Strategies**  
3. **Code-Auditing Tactics**  
4. **Code Auditor's Toolbox**  
5. **Case Study: OpenSSH**  
6. **Summary**  

## Part II: Software Vulnerabilities
### Chapter 5: Memory Corruption
- **Introduction**
- **Buffer Overflows**
- **Shellcode**
- **Protection Mechanisms**
- **Assessing Memory Corruption Impact**
- **Summary**

### Chapter 6: C Language Issues
- **Introduction**
- **C Language Background**
- **Data Storage Overview**
- **Arithmetic Boundary Conditions**
- **Type Conversions**
- **Type Conversion Vulnerabilities**
- **Operators**
- **Pointer Arithmetic**
- **Other C Nuances**
- **Summary**

### Chapter 7: Program Building Blocks
- **Introduction**
- **Auditing Variable Use**
- **Auditing Control Flow**
- **Auditing Functions**
- **Auditing Memory Management**
- **Summary**

### Chapter 8: Strings and Metacharacters
- **Introduction**
- **C String Handling**
- **Metacharacters**
- **Common Metacharacter Formats**
- **Metacharacter Filtering**
- **Character Sets and Unicode**
- **Summary**

### Chapter 9: UNIX I: Privileges and Files
- **Introduction**
- **UNIX 101**
- **Privilege Model**
- **Privilege Vulnerabilities**
- **File Security**
- **File Internals**
- **Links**
- **Race Conditions**
- **Temporary Files**
- **The Stdio File Interface**
- **Summary**

### Chapter 10: UNIX II: Processes
- **Introduction**
- **Processes**
- **Program Invocation**
- **Process Attributes**
- **Interprocess Communication**
- **Remote Procedure Calls**
- **Summary**

### Chapter 11: Windows I: Objects and the File System
- **Introduction**
- **Background**
- **Objects**
- **Sessions**
- **Security Descriptors**
- **Processes and Threads**
- **File Access**
- **The Registry**
- **Summary**

### Chapter 12: Windows II: Interprocess Communication
- **Introduction**
- **Windows IPC Security**
- **Window Messaging**
- **Pipes**
- **Mailslots**
- **Remote Procedure Calls**
- **COM**
- **Summary**

### Chapter 13: Synchronization and State
- **Introduction**
- **Synchronization Problems**
- **Process Synchronization**
- **Signals**
- **Threads**
- **Summary**

## Part III: Software Vulnerabilities in Practice
### Chapter 14: Network Protocols
- **Introduction**
- **Internet Protocol**
- **User Datagram Protocol**
- **Transmission Control Protocol**
- **Summary**

### Chapter 15: Firewalls
- **Introduction**
- **Overview of Firewalls**
- **Stateless Firewalls**
- **Simple Stateful Firewalls**
- **Stateful Inspection Firewalls**
- **Spoofing Attacks**
- **Summary**

### Chapter 16: Network Application Protocols
- **Introduction**
- **Auditing Application Protocols**
- **Hypertext Transfer Protocol**
- **Internet Security Association and Key Management Protocol**
- **Abstract Syntax Notation (ASN.1)**
- **Domain Name System**
- **Summary**

### Chapter 17: Web Applications
- **Introduction**
- **Web Technology Overview**
- **HTTP**
- **State and HTTP Authentication**
- **Architecture**
- **Problem Areas**
- **Common Vulnerabilities**
- **Harsh Realities of the Web**
- **Auditing Strategy**
- **Summary**

### Chapter 18: Web Technologies
- **Introduction**
- **Web Services and Service-Oriented Architecture**
- **Web Application Platforms**
- **CGI**
- **Perl**
- **PHP**
- **Java**
- **ASP**
- **ASP.NET**
- **Summary**

## Additional Sections
- **Bibliography**
- **Index**

## Copyright
Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations appear in this book, and the publisher was aware of a trademark claim, the designations have been printed with initial capital letters or in all capitals.

The authors and publisher have taken care in the preparation of this book, but make no expressed or implied warranty of any kind and assume no responsibility for errors or omissions. No liability is assumed for incidental or consequential damages in connection with or arising out of the use of the information or programs contained herein.

The publisher offers excellent discounts on this book when ordered in quantity for bulk purchases or special sales, which may include electronic versions and/or custom covers and content particular to your business, training goals, marketing focus, and branding interests. For more information, please contact:
- **U.S. Corporate and Government Sales: (800) 382-3419, PI:EMAIL**
- **International Sales: PI:EMAIL**

Visit us on the Web: [www.awprofessional.com](http://www.awprofessional.com)

Copyright © 2007 Pearson Education, Inc.  
All rights reserved. Printed in the United States of America. This publication is protected by copyright, and permission must be obtained from the publisher prior to any prohibited reproduction, storage in a retrieval system, or transmission in any form or by any means, electronic, mechanical, photocopying, recording, or likewise. For information regarding permissions, write to:
- **Pearson Education, Inc.**
- **Rights and Contracts Department**
- **75 Arlington Street, Suite 300**
- **Boston, MA 02116**
- **Fax: (617) 848-7047**

Text printed in the United States on recycled paper at Edwards Brothers in Ann Arbor, Michigan. First printing, November 2006

Library of Congress Cataloging-in-Publication Data  
Dowd, Mark.  
The Art of Software Security Assessment: Identifying and Preventing Software Vulnerabilities / Mark Dowd, John McDonald, and Justin Schuh.  
p. cm.  
ISBN 0-321-44442-6 (pbk. : alk. paper)  
1. Computer security. 2. Computer software—Development. 3. Computer networks—Security measures. I. McDonald, John, 1977- II. Schuh, Justin. III. Title.  
QA76.9.A25D75 2006  
005.8dc22  
2006023446

## About the Authors
- **Mark Dowd**: Principal security architect at McAfee, Inc., and an established expert in application security. He has identified and helped address critical flaws in various widely used software.
- **John McDonald**: Senior consultant with Neohapsis, specializing in advanced application security assessment. He has a strong background in security architecture and vulnerability research.
- **Justin Schuh**: Senior consultant with Neohapsis, leading the Application Security Practice. He has extensive experience in computer security activities at the Department of Defense (DoD) and related agencies.

## Preface
"If popular culture has taught us anything, it is that someday mankind must face and destroy the growing robot menace."  
— Daniel H. Wilson, *How to Survive a Robot Uprising*

In recent years, there have been significant advancements in computer security, particularly in the field of software vulnerabilities. While many books cover secure development and exploiting software, they often focus on prevention rather than identification. This book aims to bridge the gap between secure software development and practical post-implementation reviews, providing a systematic approach to finding and addressing vulnerabilities in existing applications.

### Prerequisites
This book is targeted at moderately experienced developers who are comfortable with at least one programming language, ideally C/C++. Some familiarity with Intel assembly is helpful, but not required. The material is platform-neutral, with specific coverage for common operating systems.

### How to Use This Book
The book is divided into three parts:
- **Part I: Introduction to Software Security Assessment** (Chapters 1-4): Introduces code auditing and its role in the software development process.
- **Part II: Software Vulnerabilities** (Chapters 5-13): Focuses on practical implementation review and identifying specific vulnerabilities.
- **Part III: Software Vulnerabilities in Practice** (Chapters 14-18): Applies the knowledge from Part II to real-world applications, including networking, firewalling technologies, and web technologies.

For the best understanding, read the book straight through at least once, paying attention to sidebars and notes. For focused reading, start with Part I and then branch out to the chapters relevant to your area of interest.