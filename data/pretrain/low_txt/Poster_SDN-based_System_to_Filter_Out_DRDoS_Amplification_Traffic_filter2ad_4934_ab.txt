### Victim IP and DNS Port Correspondence

All subsequent requests from the attacker (Step a, indicated by the blue arrow) will be blocked by the edge device. Consequently, these requests will not reach the vulnerable hosts (Step b) and will not be amplified.

The DRDoS Firewall Application installs a static rule on the SDN Forwarding Device to prevent blocking traffic directed to the Amplification Honeypot. This "proactive" rule is set with a higher priority than other rules issued by the DRDoS Firewall Application. This ensures that the honeypot can continue receiving attack packets to detect when the attack has ceased. Once the attack is over, the honeypot notifies the DRDoS Firewall Application to remove the corresponding firewall rule. Despite being whitelisted, the honeypot minimally participates in the attack initially due to its internal rate-limiting mechanisms, thus having a negligible impact on the victim.

### Prototype Details

We implemented our system prototype using the GNS3 network simulator [1]. GNS3 supports multiple emulators, including Dynamips, Qemu, Virtualbox, and VMWare virtual machines (VMs). However, in this work, we primarily rely on Docker containers. Docker containers run on the same host kernel, consuming significantly fewer system resources compared to traditional VMs. This allows researchers to emulate a larger number of devices. In this project, we created separate Docker images for the SDN Controller (and our DRDoS Firewall Application), the Amplification Honeypot, a vulnerable host, attacker and victim machines, and the SDN Forwarding Device.

Figure 3 presents a screenshot of our GNS3 test bed. Router RS serves as the network interconnection point, with routing rules connecting the ISP (10.1.x.x), attacker (10.2.x.x), and victim (10.3.x.x) networks. Our test bed is also connected to the Internet, necessitating the use of private IP address ranges for these networks. The Internet connection is required for the initial setup, such as downloading Docker images and Python packages necessary for our system to function. Open vSwitch (10.1.0.1) acts as the ISP edge device, protecting the network where the amplifiers (the honeypot with IP 10.1.0.4 and vulnerable hosts with IP 10.1.0.5) are located.

We use POX [4] as the SDN Controller. POX is widely adopted in the SDN community and implements the OpenFlow 1.0 specification [12], which is forward-compatible with newer OpenFlow standards. The DRDoS Firewall Application runs on top of POX and interacts with the SDN Forwarding Device.

### Attack Simulation

During the initial phase, the amplified responses will leave the ISP network and be detected on the victim's side. However, once the honeypot detects more packets from a particular IP address than a predefined threshold, it triggers an alert to the DRDoS Firewall Application. Subsequently, the amplified responses will no longer reach the victim’s machine. Despite this, the amplification requests remain observable by the honeypot due to a special static exclusion rule proactively added to the SDN rule table. Once the attack ceases, the DRDoS Firewall Application instructs the SDN Controller to remove the corresponding rule from the edge SDN Forwarding Device.

### Conclusion

In this paper, we present a novel approach to filter out amplification traffic from an ISP network. This approach leverages data collected from an amplification honeypot to derive filtering rules. While our prototype employs the SDN paradigm, other packet filtering methods, such as traditional firewalls or BGP Flowspec, can also be used in our approach.

### References

[1] [n.d.]. GNS3 | The Software that Empowers Network Professionals. https://www.gns3.com

[2] [n.d.]. How UK ISPs are charged for broadband - the cost of IPStream. Retrieved 03/20/2018 from https://community.plus.net/t5/Plusnet-Blogs/How-UK-ISPs-are-charged-for-broadband-the-cost-of-IPStream/ba-p/1314570

[3] [n.d.]. Open vSwitch. https://www.openvswitch.org

[4] [n.d.]. The POX Network Software Platform. https://github.com/noxrepo/pox

[5] Michael Aupetit, Yury Zhauniarovich, Giorgos Vasiliadis, Marc Dacier, and Yazan Boshmaf. 2016. Visualization of Actionable Knowledge to Mitigate DRDoS Attacks. In Proceedings of the IEEE Symposium on Visualization for Cyber Security. 1–8.

[6] Laure Berti-Equille and Yury Zhauniarovich. 2017. Profiling DRDoS Attacks with Data Analytics Pipeline. In Proceedings of the ACM Conference on Information and Knowledge Management. 1983–1986.

[7] Sam Kottler. 2018. February 28th DDoS Incident Report. https://githubengineering.com/ddos-incident-report/

[8] Lukas Krämer, Johannes Krupp, Daisuke Makita, Tomomi Nishizoe, Takashi Koide, katsunari Yoshioka, and Christian Rossow. 2015. AmpPot: Monitoring and Defending Against Amplification DDoS Attacks. In Proceedings of the International Symposium Research in Attacks, Intrusions, and Defenses. 615–636.

[9] Johannes Krupp, Michael Backes, and Christian Rossow. 2016. Identifying the Scan and Attack Infrastructures Behind Amplification DDoS Attacks. In Proceedings of the ACM SIGSAC Conference on Computer and Communications Security. 1426–1437.

[10] Johannes Krupp, Mohammad Karami, Christian Rossow, Damon McCoy, and Michael Backes. 2017. Linking Amplification DDoS Attacks to Booter Services. In Proceedings of the International Symposium Research in Attacks, Intrusions, and Defenses. 427–449.

[11] Jun Li, Skyler Berg, Mingwei Zhang, Peter Reiher, and Tao Wei. 2014. Drawbridge: Software-defined DDoS-resistant Traffic Engineering. In Proceedings of the ACM Conference on SIGCOMM. 591–592.

[12] N. McKeown, H. Balakrishnan T. Anderson, L. Peterson G. Parulkar, S. Shenker J. Rexford, and J. Turner. 2008. OpenFlow: Enabling Innovation in Campus Networks. ACM SIGCOMM Computer Communication Review 38, 2 (2008), 69–74.

[13] D. Senie P. Ferguson. 2000. Network Ingress Filtering: Defeating Denial of Service Attacks which Employ IP Source Address Spoofing. Technical Report. Internet Engineering Task Force. https://tools.ietf.org/html/rfc2827

[14] Rishikesh Sahay, Gregory Blanc, Zonghua Zhang, and Hervé Debar. 2015. Towards Autonomic DDoS Mitigation Using Software Defined Networking. In Proceedings of the NDSS Workshop on Security of Emerging Networking Technologies. Internet Society.

[15] A. Sardana, K. Kumar, and R. C. Joshi. 2007. Detection and Honeypot Based Redirection to Counter DDoS Attacks in ISP Domain. In Proceedings of the International Symposium on Information Assurance and Security. 191–196.

[16] Yury Zhauniarovich and Priyanka Dodia. 2019. Sorting the Garbage: Filtering Out DRDoS Amplification Traffic in ISP Networks. In Proceedings of the IEEE Conference on Network Softwarization. 142–150.

### Figure 3: GNS3 System Simulation Setup

Both the SDN Controller and the DRDoS Firewall Application are programs running on the same host (indicated by the blue rectangle in Figure 2).

We use AmpPot [8] as the Amplification Honeypot, developed by Lukas Krämer et al. It is widely adopted by the research community for analyzing DRDoS attacks [5, 6, 9, 10]. Unlike typical honeypots, which serve as easy and attractive targets, AmpPot mimics a service vulnerable to amplification attacks. For example, in Figure 1, AmpPot runs vulnerable DNS and NTP services, allowing it to collect information about amplification requests and identify victims’ IP addresses. AmpPot carefully participates in the attacks through several limiting mechanisms, ensuring that the victim receives only minimal amplified traffic, especially at the beginning of the attack. Currently, AmpPot can monitor 10 different UDP services vulnerable to amplification, but it can be extended to new services.

Upon receiving an attack start event from our modified AmpPot, the DRDoS Firewall Application uses the POX OpenFlow-compatible Southbound API to add a rule to the Open vSwitch [3], which we use as the SDN Forwarding Device. This rule blocks all packets with the specified source IP address and destination port, derived from the honeypot data. Adversaries often target entire subnetworks rather than single IP addresses. To address this, we added a feature to our DRDoS Firewall Application to block an entire subnetwork, leveraging the IP address partial match feature in POX.

### Demo Details

During the presentation, we will demonstrate our system interactively, showing how it helps Internet Service Providers filter out DRDoS traffic from their networks. Using the test bed shown in Figure 3, we will guide the audience through the steps of removing garbage traffic. We will describe the main network segments in our test bed, including the ISP, Attacker, and Victim subnetworks, and the key components within them. We will also provide details about the initial configuration steps. Then, we will simulate a DRDoS attack in our test bed, sending amplification requests from the attacker's machine to the amplifiers in the ISP network.