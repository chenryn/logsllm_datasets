### Table 1: Enclave Response Time and Profiling Breakdown

All times are in milliseconds. We conducted 500 experimental runs and report the following statistics: average (mean), proportion (%), maximum (tmax), minimum (tmin), and standard deviation (σt). The "Total" represents the end-to-end response time as defined in Enclave Response Time. Note that the sum of individual times may not exactly match the total due to minor unprofiled overhead.

### Throughput Analysis

The system's maximum throughput, with full block utilization, is approximately 7 transactions per second (tx/sec). To our knowledge, there is no comprehensive measurement study of the throughput bound for the Ethereum peer-to-peer network. Recent research [19] suggests that Bitcoin cannot scale beyond 26 tx/sec without a protocol redesign. Therefore, even with a limited number of hosts, TC can easily meet the data feed demands of future decentralized blockchains.

### Gas Costs

Currently, 1 gas unit costs 5 × 10^-8 Ether. At an exchange rate of $15 per Ether, $1 buys 1.3 million gas units. Below are the gas costs for the implementation components:

- **Deliver**: The callback-independent portion of Deliver costs about 35,000 gas (approximately $0.026), which sets the value of $G_{\text{min}}$. We set $G_{\text{max}} = 3,100,000$ gas ($2.33), as this is close to Ethereum’s maximum GASLIMIT.
- **Request**: The cost for executing Request is approximately 120,000 gas (about $0.09) plus 2,500 gas (approximately $0.0019) for every 32 bytes of request parameters.
- **Cancel**: The cost to execute Cancel is 62,500 gas (about $0.047), including the gas cost $G_{\text{cncl}}$ and the refund $G_{\emptyset}$ paid to TC if Deliver is called after Cancel.

The total callback-independent cost of acquiring a datagram from TC ranges from 11.9¢ (for CashSettledPut) to 12.9¢ (for SteamTrade). This variation is due to differing parameter lengths.

### Component-Compromise Resilience

For the CashSettledPut application, we implemented and evaluated two modes of majority voting:

1. **2-out-of-3 Majority Voting within the Enclave**:
   - Provides robustness against data-source compromise.
   - In our experiments, the enclave performed sequential scraping of current stock prices from Bloomberg, Google Finance, and Yahoo Finance. The enclave response time was approximately 1,743 (109) ms.
   - There is no change in gas cost, as voting is done inside the SGX enclave.
   - Future work will explore parallelizing SGX’s thread mechanism, considering security implications.

2. **2-out-of-3 Majority Voting within the Requester Contract**:
   - Provides robustness against SGX compromise.
   - We ran three instances of SGX enclaves, all scraping the same data source. The gas cost increased by a factor of 3 plus an additional 5.85¢.
   - For CashSettledPut, the cost would be 35.6¢ for Deliver without Cancel. The extra 5.85¢ covers the cost to store votes until a winner is known.

### Offline Measurements

Recall that an enclave requires a one-time setup operation involving attestation generation. Setting up the TC Enclave takes 49.5 (7.2) ms, and attestation generation takes 61.9 (10.7) ms, including 7.65 (0.97) ms for the report and 54.9 (10.3) ms for the quote.

Since `clock()` yields only relative time in SGX, TC’s absolute clock is calibrated using an externally provided wall-clock timestamp. A user can verify the correctness of the Enclave's absolute clock by requesting a digitally signed timestamp. This procedure is accurate to within its end-to-end latency. Our experiments show that the time between Relay transmission of a clock calibration request to the enclave and receipt of a response is 11.4 (1.9) ms, with 10.5 (1.9) ms for signing the timestamp. Additionally, the wide-area network roundtrip latency is rarely more than a few hundred milliseconds.

### Related Work

**Virtual Notary [6, 26]**: An early online data attestation service that verifies and digitally signs various user-requested "factoids" (web page contents, stock prices, etc.). It predates and does not interface with Ethereum.

**Data Feeds for Smart Contracts**: Examples include PriceFeed [3] and Oraclize.it [7]. Oraclize.it achieves distributed trust using TLSnotary [5], which digitally signs TLS session data. Unlike TC, Oraclize.it must serve data verbatim from a web session or API call, leading to superfluous data and inflated gas costs. These services rely on the reputations of their providers for data authenticity and cannot support private or custom datagrams. Alternative systems like SchellingCoin [13] and Augur [2] use prediction markets to decentralize trust, but this heavily relies on human input and limits their scope and data types.

**Research on Smart Contracts**: Despite an active developer community, research results are limited. Work includes off-chain contract execution for confidentiality [27] and exploration of randomness sources [11]. The only research involving data feeds explores criminal applications [25].

**SGX Research**: While still in its infancy, several pre-release papers have explored SGX, such as [8, 28, 30, 32, 38]. Researchers have demonstrated applications like enclave execution of legacy code [10] and use of SGX in distributed settings for map-reduce computations [32]. Some works have exposed security model shortcomings, including side-channel attacks [18, 33, 34].

### Future Work

We plan to develop TC further to incorporate additional features:

1. **Freeloading Protection**: Inspired by designated verifier proofs [24], we plan to deploy a mechanism to prevent "parasite contracts" that forward or resell datagrams from fee-based data feeds.
2. **Revocation Support**: We will integrate revocation checks for data source certificates using OCSP and for compromised SGX hosts using Intel’s Attestation Service (IAS).
3. **Hedging Against SGX Compromise**: Enhancements to reduce latency and gas costs for majority voting across SGX hosts and data sources.
4. **Updating TC’s Code**: We will investigate mechanisms to update TC’s code securely and efficiently.
5. **Generalized Custom Datagrams and Within-Enclave Smart-Contract Execution**: We aim to allow users to supply their own general-purpose code to TC, enabling more flexible and secure smart-contract execution.

### Conclusion

We introduced Town Crier (TC), an authenticated data feed for smart contracts designed to support Ethereum. Using Intel’s SGX trusted hardware, TC serves datagrams with high trustworthiness. We defined gas sustainability, a critical availability property for Ethereum services, and provided techniques to minimize the size of a hybrid TCB. We proved in a formal model that TC serves only data from authentic sources and showed that it is gas sustainable and minimizes costs for honest users. Experiments demonstrated TC’s practicality, cost-effectiveness, and flexibility for three example applications. Pending deployment of the Intel Attestation Service (IAS), we will make a version of TC freely available as a public service.

### Acknowledgements

This work is funded in part by NSF grants CNS-1314857, CNS-1330599, CNS-1453634, CNS-1518765, CNS-1514261, a Packard Fellowship, a Sloan Fellowship, Google Faculty Research Awards, and a VMWare Research Award. We also thank Andrew Miller and Gun Sirer for their valuable insights and comments.

### References

[1] http://coinmarketcap.com/currencies/ethereum
[2] Augur. http://www.augur.net/
[3] PriceFeed smart contract. Referenced Feb. 2016 at http://feed.ether.camp/
[4] Steam online gaming platform. http://store.steampowered.com/
[5] TLSnotary – a mechanism for independently audited HTTPS sessions. https://tlsnotary.org/TLSNotary.pdf, 10 Sept. 2014
[6] Cornell researchers unveil a virtual notary. Slashdot, 20 June 2013
[7] Oraclize: “The provably honest oracle service”. www.oraclize.it, Referenced Feb. 2016
[8] I. Anati, S. Gueron, and S. Johnson. Innovative technology for CPU based attestation and sealing. In Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy, 2013
[9] ARM Limited. mbedTLS (formerly known as PolarSSL). https://tls.mbed.org/
[10] A. Baumann, M. Peinado, and G. Hunt. Shielding Applications from an Untrusted Cloud with Haven. In OSDI, 2014
[11] J. Bonneau, J. Clark, and S. Goldfeder. On bitcoin as a public randomness source. https://eprint.iacr.org/2015/1015.pdf, 2015
[12] E. Brickell and J. Li. Enhanced Privacy ID from Bilinear Pairing. IACR Cryptology ePrint Archive, 2009:95, 2009
[13] V. Buterin. Schellingcoin: A minimal-trust universal data feed. https://blog.ethereum.org/2014/03/28/schellingcoin-a-minimal-trust-universal-data-feed/
[14] V. Buterin. Ethereum: A next-generation smart contract and decentralized application platform. https://github.com/ethereum/wiki/wiki/White-Paper, 2014
[15] R. Canetti. Universally composable security: A new paradigm for cryptographic protocols. In FOCS, 2001
[16] R. Canetti, Y. Dodis, R. Pass, and S. Walﬁsh. Universally composable security with global setup. In Theory of Cryptography, pages 61–85. Springer, 2007
[17] R. Canetti and T. Rabin. Universal composition with joint state. In CRYPTO, 2003
[18] V. Costan and S. Devadas. Intel sgx explained. Cryptology ePrint Archive, Report 2016/086, 2016. http://eprint.iacr.org/
[19] K. Croman, C. Decker, I. Eyal, A. E. Gencer, A. Juels, A. Kosba, A. Miller, P. Saxena, E. Shi, E. G. Sirer, D. Song, and R. Wattenhofer. On scaling decentralized blockchains (a position paper). In Bitcoin Workshop, 2016
[20] G. Greenspan. Why many smart contract use cases are simply impossible. http://www.coindesk.com/three-smart-contract-misconceptions/
[21] Intel Corporation. Intel Software Guard Extensions Programming Reference, 329298-002us edition, 2014
[22] Intel Corporation. Intel Software Guard Extensions Evaluation SDK User’s Guide for Windows* OS. https://software.intel.com/sites/products/sgx-sdk-users-guide-windows, 2015
[23] Intel Corporation. Intel Software Guard Extensions SDK. https://software.intel.com/en-us/sgx-sdk, 2015
[24] M. Jakobsson, K. Sako, and R. Impagliazzo. Designated verifier proofs and their applications. In Advances in Cryptology – EUROCRYPT ’96, pages 143–154. Springer, 2001
[25] A. Juels, A. Kosba, and E. Shi. The Ring of Gyges: Investigating the future of criminal smart contracts. Online manuscript, 2015
[26] A. Kelkar, J. Bernard, S. Joshi, S. Premkumar, and P. Varadharajan. Virtual Notary. http://virtual-notary.org/, 2016
[27] A. Kosba, A. Miller, E. Shi, Z. Wen, and C. Papamanthou. Hawk: The blockchain model of cryptography and privacy-preserving smart contracts. In IEEE Symposium on Security and Privacy, 2016
[28] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shaﬁ, V. Shanbhogue, and U. R. Savagaonkar. Innovative instructions and software model for isolated execution. In Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy, 2013
[29] S. Nakamoto. Bitcoin: A peer-to-peer electronic cash system. 2008
[30] V. Phegade and J. Del Cuvillo. Using innovative instructions to create trustworthy software solutions. In Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy, pages 1–1, New York, New York, USA, 2013. ACM Press
[31] X. Ruan. Platform Embedded Security Technology Revealed: Safeguarding the Future of Computing with Intel Embedded Security and Management Engine. Apress, 2014
[32] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-Ruiz, and M. Russinovich. VC3: Trustworthy data analytics in the cloud. In IEEE S& P, 2015
[33] E. Shi. Trusted hardware: Life, the composable university, and everything. Talk at the DIMACS Workshop on Cryptography and Big Data, 2015
[34] E. Shi, F. Zhang, R. Pass, S. Devadas, D. Song, and C. Liu. Trusted hardware: Life, the composable universe, and everything. Manuscript, 2015
[35] N. Szabo. Smart contracts. http://szabo.best.vwh.net/smart.contracts.html, 1994
[36] K. Torpey. The conceptual godfather of augur thinks the project will fail. CoinGecko, 5 Aug. 2015
[37] G. Wood. Ethereum: A secure decentralised generalised transaction ledger. Ethereum Project Yellow Paper, 2014
[38] Y. Xu, W. Cui, and M. Peinado. Controlled-channel attacks: Deterministic side channels for untrusted operating systems. In Security and Privacy (SP), 2015 IEEE Symposium on, pages 640–656, May 2015
[39] F. Zhang, E. Cecchetti, K. Croman, A. Juels, and E. Shi. Town crier: An authenticated data feed for smart contracts. Cryptology ePrint Archive, Report 2016/168, 2016. http://eprint.iacr.org/2016/168