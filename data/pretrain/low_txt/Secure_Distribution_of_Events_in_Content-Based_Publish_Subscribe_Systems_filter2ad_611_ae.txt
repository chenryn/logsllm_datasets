### Throughput and Caching Strategies

A build-up cache, which reuses previously cached keys to generate new keys, has a minimal impact on the number of encryptions required compared to a simple cache. However, it is more expensive in terms of search costs when locating entries that should be used to generate a new key.

### LKH Scheme Performance

The LKH (Logical Key Hierarchy) scheme outperformed the simple cache in random cases, despite requiring a fixed amount of storage for a given number of clients (e.g., 1999 individual and internal group keys for 1000 clients). However, it did not perform as well as clustering schemes. The LKH scheme can also be more costly in terms of search costs, as finding an optimal cover of LKH keys for a new subgroup typically requires more steps than searching a cluster-cache.

### Reduction in Encryptions

The reduction in the number of encryptions achieved by using a build-up cache or LKH scheme appears to be asymptotically a constant factor for the same size cache. A question arises: is it possible to reduce the number of encryptions to \(O(\log N)\) per event in the worst case, either by using multiple static LKH trees or a large cache? The answer appears to be no, unless the cache size is exponential in the number of clients. Since the internal nodes of an LKH tree can also be considered as cache entries, an exponential number of LKH trees would be required to reduce the worst-case bound on the number of encryptions to \(O(\log N)\) per event.

### Analysis of Cache Size

Suppose the cache size is \(S\). If we are allowed to pick at most \(p\) entries from the cache to form any subgroup, the maximum number of subgroups that can be formed from this cache is bounded by:

\[ p^S \]

Given \(N\) clients, there are \(2^N\) subgroups that need to be formed. Therefore, if each potential subgroup needs to be formed using at most \(p\) cache entries, the following must hold:

\[ p^S \geq 2^N \]

Thus,

\[ S \geq \frac{N \log 2}{\log p} \]

This result tells us that if \(p\) is any sublinear function of \(N\) (e.g., \(O(\ln N)\) or \(O(N^f)\)), the size of the cache must grow exponentially in \(N\) to guarantee that each event can be sent securely using at most \(p\) encryptions.

### Worst-Case Number of Encryptions

It appears that the worst-case number of encryptions for an event will need to be linear in \(N\) for reasonably sized caches. However, one can try to improve the constant of proportionality, as we have attempted in this paper. This result applies only if a new event needs to be encrypted individually using existing (potentially multiple) group keys. An open question is whether one can do better if one allows an event to be encrypted multiple times; e.g., send a message encrypted under both keys \(k_1\) and \(k_2\) to send the message to only those members who possess both \(k_1\) and \(k_2\). Another open question is whether sublinear amortized bounds can be achieved without exponential-size caches. We leave the analysis of these questions to future work.

### Conclusion and Future Work

There is a growing need for security solutions in content-based systems. This paper identifies the "secure end-point delivery" problem and explores several possible solutions. Our goal is to provide confidentiality when sending events from brokers to subscribers. In content-based systems, every event can potentially have a different set of interested subscribers, leading to \(2^N\) possible subsets, where \(N\) is the number of subscribers. With thousands of subscribers, it is infeasible to set up static security groups for every possible subset.

We explored various dynamic caching approaches. A simple solution is to encrypt each event separately for each interested subscriber, but this requires a large number of encryptions for large sets of subscribers. Our main goal is to reduce the number of encryptions required to preserve confidentiality while sending events only to interested subscribers. The number of encryptions is important because it directly affects message throughput.

All of our approaches use a dynamic caching scheme, where the broker and subscribers must cache subgroup keys. Each cache entry has a format \(KC = \{G, K\}\), where \(G\) identifies the set of subscribers belonging to a subgroup and \(K\) is a key associated with the subgroup. All secure communication intended for all subscribers in \(G\) can be encrypted using key \(K\).

Through theoretical analysis and simulation results, we show that our clustered and clustered-popular approaches perform better as cache size increases. Both cluster-based algorithms outperform LKH-based solutions in most cases. The clustered-popular algorithm performs especially well in the case of popular-set group distributions.

We also show that it is impossible to achieve sublinear encryption growth for a large class of algorithms, even with multiple LKH trees, without an exponential number of LKH trees or exponential-sized caches in the number of subscribers per broker.

Our results indicate that cluster-based algorithms can be a practical solution to the end-point delivery problem. They do not impose heavy overhead, as hash tables can be used for cache lookup. The cache size requirement on the subscriber side is also lower than that of simple or build-up cache algorithms. In the case of the clustered cache, each subscriber only needs \(C_k\) cache entries, where \(C\) is the total cache size at the broker, \(K\) is the number of clusters, and \(C_K\) is the size of one cluster part of the cache. If client resources are limited, a protocol for key request/exchange is needed for a subscriber to request appropriate keys from the broker.

We plan to investigate the effect of providing integrity and sender authentication on message throughput. Sender authentication in the context of content-based systems is a non-trivial problem. Throughout the paper, we assume that brokers are trusted, and every broker in the system has the ability to read every event. We are investigating the impact of non-universal broker trust on the design of algorithms.

### References

[ABH00] D. Arnold, J. Boot, M. Henderson, T. Phelps, and B. Segall. Elvin – Content-Addressed Messaging Client Protocol. Internet Draft, Network Working Group, 2000. Available from http://elvin.dstc.edu.au/download/internet-draft.txt.

[ASW00] M. Abdalla, Y. Shavitt, and A. Wool. Key Management for Restricted Multicast Using Broadcast Encryption. IEEE/ACM Transactions on Networking, 8(4), pp 443-454, August 2000.

[B93] K. Birman. The Process Group Approach to Reliable Distributed Computing. Communications of the ACM, 36(12):37-53, December 1993.

[B96] A. Ballardie. Scalable Multicast Key Distribution. Internet Engineering Task Force, May 1996. RFC 1949.

[BC94] C. Blundo and A. Cresti. Space requirements for broadcast encryption. In Advances in Cryptology – EUROCRYPT’94, LNCS 950, pp 287-298. Springer-Verlag, 1994.

[BCM99] Guruduth Banavar, Tushar Chandra, Bodhi Mukherjee, Jay Nagarajarao, Robert E. Strom, and Daniel C. Sturman. An Efficient Multicast Protocol for Content-Based Publish-Subscribe Systems. In International Conference on Distributed Computing Systems (ICDCS '99), June 1999.

[BD94] M. Burmester and Y. Desmedt. A secure and efficient conference key distribution system. In Advances in Cryptology – EUROCRYPT ’94, 1995.

[HM97b] H. Harney and C. Muckenhirn. Group Key Management (GKMP) Specification. Internet Engineering Task Force, July 1997. RFC 2093.

[BFMS98] C. Blundo, L. A. Frota Mattos, and D. R. Stinson. Generalized Beimel-Chor schemes for broadcast encryption and interactive key distribution. In Theoretical Computer Science, 200(1-2), pp 313-334, 1998.

[BW98] K. Becker and U. Wille. Communication complexity of group key distribution. In 5th ACM Conference on Computer and Communications Security, San Francisco, CA, November 1998.

[C98] Antonio Carzaniga. Architectures for an Event Notification Service Scalable to Wide-Area Networks. PhD thesis, Politecnico di Milano, December 1998. Available: http://www.cs.colorado.edu/~carzanig/papers.

[CDF] G. Cugola, E. DiNitto, and A. Fuggetta. The JEDI event-based infrastructure and its application to the development of the OPSS WFMS. Submitted to Transactions on Software Engineering.

[CDZ97] K. Calvert, M. Doar, and E. Zegura. Modeling Internet Topology. IEEE Communications Magazine, June, 1997.

[D89] S. Deering. Host Extensions for IP Multicasting. IETF RFC 1112, August 1989.

[GKP99] R. Gruber, B. Krishnamurthy, and E. Panagos. An Architecture of the READY Event Notification System. In Proceedings of the International Conference on Distributed Computing Systems 1999, Austin, TX, June 1999.

[HH99] Hugh Harney and Eric Harder. Group Secure Association Key Management Protocol (Draft). Internet Engineering Task Force, April 1999. draft-harney-sparta-gsakmp-sec-00.txt.

[HM97a] H. Harney and C. Muckenhirn. Group Key Management (GKMP) Architecture. Internet Engineering Task Force, July 1997. RFC 2094.

[ITW82] I. Ingemarsson, D. Tang, and C. Wong. A conference key distribution system. IEEE Transactions on Information Theory, vol. 28, no. 5, pp. 714-720, September 1982.

[IONA] IONA Corporation. OrbixTalk Fact Sheet. http://www.iona.com/products/messaging/talk/index.html.

[KPT00] Y. Kim, A. Perrig, and G. Tsudik. Simple and Fault-Tolerant Key Agreement for Dynamic Collaborative Groups. In Proceedings of 7th ACM Conference on Computer and Communication Security CCS 2000.

[KR95] B. Krishnamurthy and D. Rosenblum. Yeast: A general purpose event-action system. IEEE Transactions on Software Engineering, 21(10), October 1995.

[LS98] M. Luby and J. Staddon. Combinatorial bounds for broadcast encryption. In Advances in Cryptology – EUROCRYPT’98, LNCS 1403, pp 512-526, Espoo, Finland, 1998.

[M97] S. Mittra. Iolus: A Framework for Scalable Secure Multicasting. In Proceedings of ACM SIGCOMM '97, pages 277 - 278. ACM, September 1997.

[MPH99] P. McDaniel, A. Prakash, and P. Honeyman. Antigone: A Flexible Framework for Secure Group Communication. In Proceedings of the 8th USENIX Security Symposium, August 1999.

[MS97] M. Mansouri-Samani and M. Sloman. A Generalised Event Monitoring Language for Distributed Systems. EE/IOP/BCS Distributed Systems Engineering Journal, 4(2), June 1997.

[MS98] David A. McGrew and Alan T. Sherman. Key Establishment in Large Dynamic Groups Using One-Way Function Trees. TIS Report No. 0755, TIS Labs at Network Associates, Inc., Glenwood, MD, May 1998.

[TIBCO] TIBCO. TIB/Rendezvous White Paper. http://www.rv.tibco.com/whitepaper.html.

[VBM96] R. Van Renesse, K. Birman, and S. Maffeis. Horus: A Flexible Group Communication System. Communications of the ACM, 39(4):76 - 83, April 1996.

[WGL98] C. K. Wong, M. Gouda, and S. S. Lam. Secure Group Communication Using Key Graphs. In Proceedings of ACM SIGCOMM '98, pages 68 - 79. ACM, September 1998.

[WHA98] Debby M. Wallner, Eric J. Harder, and Ryan C. Agee. Key Management for Multicast: Issues and Architectures (Draft). Internet Engineering Task Force, September 1998. draft-wallner-key-arch-01.txt.

[WISEN98] Workshop on Internet Scale Event Notification. See http://www.ics.uci.edu/IRUS/wisen/wisen98 for details.

[WCS99] M. Waldvogel, G. Caronni, D. Sun, N. Weiler, and B. Plattner. The VersaKey Framework: Versatile Group Key Management. IEEE Journal on Selected Areas in Communications, 17(9), September 1999.

[YL00] Y. Yang and S. Lam. A Secure Key Management Protocol Communication Lower Bound. Technical Report TR2000-24, The University of Texas at Austin, Austin, TX, September 2000.

[ZCB96] E. Zegura, K. Calvert, and S. Bhattacharjee. How to Model an Internetwork. In Proceedings of IEEE Infocom '96, San Francisco, CA, April 1996.

[OAA00] L. Opyrchal, M. Astley, J. Auerbach, G. Banavar, R. Strom, and D. Sturman. Exploiting IP Multicast in Content-Based Publish-Subscribe Systems. In Proceedings of Middleware 2000, New York, April 2000.

[OMG] Object Management Group. Notification Service. http://www.omg.org/cgi-bin/doc?telecom/98-06-15

[P99] Adrian Perrig. Efficient Collaborative Key Management for Secure Autonomous Group Communication. In International Workshop on Cryptographic Techniques and E-Commerce (CrypTEC '99), 1999.

[Pub77] Federal Information Processing Standards Publication. Data Encryption Standard, 1997. National Bureau of Standards.

[R94] M. Reiter. Secure Agreement Protocols: Reliable and Atomic Group Multicast in Rampart. In Proceedings of 2nd ACM Conference on Computer and Communications Security, pages 68 - 80. ACM, November 1994.

[SA97] Bill Segall and David Arnold. Elvin has left the building: A publish/subscribe notification service with quenching. In Proceedings of AUUG97, Brisbane, Australia, September 1997.

[SAB00] B. Segall, D. Arnold, J. Boot, M. Henderson, and T. Phelps. Content Based Routing with Elvin4. To appear in Proceedings of AUUG2K, Canberra, Australia, June 2000.

[SSD88] D. Steer, L. Strawczynski, W. Diffie, and M. Wiener. A secure audio teleconference system. In Advances in Cryptology – CRYPTO '88, Santa Barbara, CA, August 1998.

[SvT98] D. R. Stinson and T. van Trung. Some new results on key distribution patterns and broadcast encryption. Designs, Codes and Cryptography, 14(3), pp261-279, 1998.

[STW00] M. Steiner, G. Tsudik, and M. Waidner. Key Agreement in Dynamic Peer Groups. IEEE Transactions on Parallel and Distributed Systems, 2000.

[SUN] Sun Microsystems. Java Message Service. http://java.sun.com/products/jms.