### Code Snippet Analysis and Explanation

#### Code Snippet
```c
if (err) {
    msg_name = address;
} else {
    m->msg_name = NULL;
    err = move_addr_to_kernel(m->msg_name, m->msg_namelen, address);
}
```

This code snippet is from `net/sys.c` and `net/core/iovec.c`. The condition `ψ ≡ ¬(mode = VERIFY_READ ∧ err)` ensures that `msg_name` is only modified under the guard `ψ`. While `ψ' ≡ false` is a sound choice for the must-modify guard, using a more precise guard `ψ` is crucial to prevent the analysis from concluding that `sys.msg_name` is a user pointer on entry to `sock_recvmsg`.

To enhance the alias analysis, we introduce a must-modify analysis that tracks the condition `ψ` under which a location is modified by the procedure. To maintain scalability, we use a special abstraction function, `αcorr`, to compute a conservative underapproximation of `ψ` as described in [5]. This approach significantly reduces the number of false alarms.

### Evaluation

#### Setup
We evaluated an implementation of the unchecked user pointer dereferences analysis using the Saturn program analysis framework [1]. The evaluation was conducted on the entire Linux 2.6.17.1 distribution built for the x86 architecture, which contains over 6.2 million lines of code, 91,543 procedures, 40,760 global variables, 14,794 composite types, and 35,317 initializers. Our implementation transformed 33,886 loops into tail-recursive procedures, and the abstract syntax trees were stored in several databases totaling 1.7 GB in size.

We ran the Saturn alias analysis to compute the memory model for each procedure, followed by our unchecked user pointer dereferences analysis. The analysis consists of two phases:
1. Determine which expressions in a procedure may evaluate to a user location.
2. Identify which of those expressions are not guarded by a check.

Decomposing the analysis into two phases enhances scalability by allowing the first phase to identify the minimum set of expressions that need to be tracked by the second phase.

Our analysis is compositional, with each procedure analyzed independently. We parallelized the implementation by distributing the analyses of individual procedures over a cluster of 25 nodes, each with 4 cores and 6 GB of memory. Each procedure was allotted 3 minutes before timing out. The implementation timed out on 154 procedures (0.17%), and the total running time of the unchecked user pointer dereferences analysis was 3.5 hours.

#### Results
A user pointer source is a pointer parameter to a system call, and a user pointer sink is a pointer dereference site. The Linux distribution we analyzed has 627 sources and 867,544 sinks. Our analysis discharged 616 out of 627 user pointer sources (98.2% of sources) and 851,686 of the 852,092 user pointer sinks (99.95% of sinks). There were 11 warnings on user pointer sources (1 source warning for approximately 560,000 lines of code) and 406 warnings on user pointer sinks (1 sink warning for approximately 15,000 lines of code), all of which can be resolved with 22 additional, simple annotations. False alarms were primarily due to interprocedural path insensitivity and imprecision in analyzing function pointers.

#### Interprocedural Path Insensitivity
The analysis is fully intraprocedurally path-sensitive but interprocedurally path-insensitive. Within a procedure, the analysis reasons about all branch correlations, but the context variable abstraction performed on the preliminary summary eliminates all path information in the final summary, preventing the analysis from correlating branches and return values across procedure boundaries. This caused the analysis to fail to discharge 5 user pointer sources and 265 user pointer sinks.

#### Function Pointers
Four user pointer sources and 130 user pointer sinks could not be discharged due to the coarse inference of function pointer targets by the alias analysis. For example, in `sys_nfsservctl` of `fs/nfsctl.c`, the function pointer `file->f_op->read` points to any read field from any instance of `struct file_operations` rather than only the instances that can actually be pointed to by the `file` returned by `do_open`.

#### Manual Summaries and Annotations
We manually summarized several commonly used assembly statements, such as inline assembly statements, to specify that they dereference their operands. We also summarized checker inline assembly statements and procedures like `range_ok`, `get_user`, `put_user`, `copy_from_user`, and `copy_to_user`.

Two annotations were used to restrict which locations are tracked as user at particular program points, increasing the precision of the analysis and preventing excessive tracking. These annotations were placed in `notifier_call_chain` and `HiSax_command` to refine the guard under which a particular location is tracked as being user with additional interprocedural, path-sensitive information.

### Conclusion
We presented a scalable and precise analysis for finite-state safety properties and reported on our experience in verifying the absence of unchecked user pointer dereferences in the Linux operating system. This analysis can be adapted to verify other important security properties.

### Acknowledgment
We thank Isil Dillig, Thomas Dillig, Brian Hackett, and Peter Hawkins for their comments on earlier drafts of this paper. This work was supported by NSF grants CCF-0430378 and NSF SA4899-10808PG-1 with additional support from DARPA.

### References
[1] A. Aiken, S. Bugrara, I. Dillig, T. Dillig, B. Hackett, and P. Hawkins. An Overview of the Saturn Project. In Proceeding of the 7th ACM Workshop on Program Analysis for Software Tools and Engineering, New York, NY, USA, 2007. ACM Press.

[2] T. Ball and S. K. Rajamani. The SLAM Project: Debugging System Software via Static Analysis. In Proceedings of the 29th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages 1–3, New York, NY, USA, 2002. ACM Press.

[3] B. Blanchet, P. Cousot, R. Cousot, J. Feret, L. Mauborgne, A. Mine, D. Monniaux, and X. Rival. Design and Implementation of a Special-Purpose Static Program Analyzer for Safety-Critical Real-Time Embedded Software. Pages 85–108, 2002.

[4] M. Das, S. Lerner, and M. Seigle. ESP: Path-sensitive Program Verification in Polynomial Time. In Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation, pages 57–68, New York, NY, USA, 2002. ACM Press.

[5] I. Dillig, T. Dillig, and A. Aiken. Static Error Detection Using Semantic Inconsistency Inference. In Proceedings of the ACM SIGPLAN 2007 Conference on Programming Language Design and Implementation, volume 42, pages 435–445, New York, NY, USA, 2007. ACM Press.

[6] N. Dor, S. Adams, M. Das, and Z. Yang. Software Validation via Scalable Path-sensitive Value Flow Analysis. In Proceedings of the ACM SIGSOFT 2004 International Symposium on Software Testing and Analysis, pages 12–22, New York, NY, USA, 2004. ACM Press.

[7] S. Fink, E. Yahav, N. Dor, G. Ramalingam, and E. Geay. Effective Typestate Verification in the Presence of Aliasing. In Proceedings of the 2006 International Symposium on Software Testing and Analysis, pages 133–144, New York, NY, USA, 2006. ACM Press.

[8] J. Foster, M. Fahndrich, and A. Aiken. A Theory of Type Qualifiers. In Proceedings of the ACM SIGPLAN 1999 Conference on Programming Language Design and Implementation, pages 192–203, New York, NY, USA, 1999. ACM Press.

[9] B. Hackett and A. Aiken. How is Aliasing Used in Systems Software? In Proceedings of the 14th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pages 69–80, New York, NY, USA, 2006. ACM Press.

[10] S. Hallem, B. Chelf, Y. Xie, and D. Engler. A System and Language for Building System-Specific, Static Analyses. In Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation, pages 69–82, New York, NY, USA, 2002. ACM Press.

[11] T. Henzinger, R. Jhala, R. Majumdar, and G. Sutre. Lazy Abstraction. In Proceedings of the 29th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages 58–70, New York, NY, USA, 2002. ACM Press.

[12] R. Johnson and D. Wagner. Finding User/Kernel Pointer Bugs with Type Inference. In Proceedings of the 13th USENIX Security Symposium, pages 119–134, 2004.

[13] R. E. Strom and S. Yemini. Typestate: A Programming Language Concept for Enhancing Software Reliability. Volume 12, pages 157–171, Piscataway, NJ, USA, 1986. IEEE Press.

[14] L. Torvalds. Sparse.

[15] Y. Xie and A. Aiken. Scalable Error Detection using Boolean Satisfiability. In Proceedings of the 32nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages 351–363, New York, NY, USA, 2005. ACM Press.

[16] J. Yang, T. Kremenek, Y. Xie, and D. Engler. MECA: An Extensible, Expressive System and Language for Statically Checking Security Properties. In Proceedings of the 32nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages 351–363, New York, NY, USA, 2005. ACM Press.