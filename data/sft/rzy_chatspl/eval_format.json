{"input": "", "instruction": "从_internal索引中查询字段提取平均耗时是否正常。求平均值必须先计算提取的次数总和、耗时的总和，然后用耗时总和除以次数总和。最后展示的时候只保留小数点后 4 位", "output": "_index:_internal tag:parser_stat  parser_stat.id:*  |stats sum(parser_stat.total) as total,sum(parser_stat.cost_us) as total_cost_us by parser_stat.name |eval avg_cost_ms = todouble(format(\"%.4f\",total_cost_us/total/1000))"}
{"input": "", "instruction": "从_internal索引中查询字段提取平均耗时是否正常。求平均值必须先计算提取的次数总和、耗时的总和，然后用耗时总和除以次数总和。最后展示的时候只保留小数点后 3 位", "output": "_index:_internal tag:parser_stat  parser_stat.id:*  |stats sum(parser_stat.total) as total,sum(parser_stat.cost_us) as total_cost_us by parser_stat.name |eval avg_cost_ms = todouble(format(\"%.3f\",total_cost_us/total/1000))"}
{"input": "", "instruction": "从_internal索引中查询字段提取平均耗时是否正常。求平均值必须先计算提取的次数总和、耗时的总和，然后用耗时总和除以次数总和。用小数点后 4 位的形式展示平均耗时，当平均耗时小于 1 毫秒时，认为状态是正常，否则是异常", "output": "_index:_internal tag:parser_stat  parser_stat.id:*  |stats sum(parser_stat.total) as total,sum(parser_stat.cost_us) as total_cost_us by parser_stat.name |eval avg_cost_ms = todouble(format(\"%.4f\",total_cost_us/total/1000)) |eval status=if(tonumber(avg_cost_ms)<1,\"正常\",\"异常\") |fields parser_stat.name,avg_cost_ms,status"}
{"input": "", "instruction": "从rzy_internal索引中查询字段提取平均耗时是否正常。求平均值必须先计算提取的次数总和、耗时的总和，然后用耗时总和除以次数总和。用小数点后 3 位的形式展示平均耗时，当平均耗时小于 5 毫秒时，认为状态是正常，否则是异常", "output": "_index:rzy_internal tag:parser_stat  parser_stat.id:*  |stats sum(parser_stat.total) as total,sum(parser_stat.cost_us) as total_cost_us by parser_stat.name |eval avg_cost_ms = todouble(format(\"%.3f\",total_cost_us/total/1000)) |eval status=if(tonumber(avg_cost_ms)<5,\"正常\",\"异常\") |fields parser_stat.name,avg_cost_ms,status"}
{"input": "", "instruction": "从_internal索引中查询字段提取平均耗时是否正常。求平均值必须先计算提取的次数总和、耗时的总和，然后用耗时总和除以次数总和。用小数点后 4 位的形式展示平均耗时，当平均耗时小于 1 毫秒时，认为状态是正常，否则是异常。只保留提取规则名称、平均耗时和状态三个字段展示", "output": "_index:_internal tag:parser_stat  parser_stat.id:*  |stats sum(parser_stat.total) as total,sum(parser_stat.cost_us) as total_cost_us by parser_stat.name |eval avg_cost_ms = todouble(format(\"%.4f\",total_cost_us/total/1000)) |eval status=if(tonumber(avg_cost_ms)<1,\"正常\",\"异常\") |fields parser_stat.name,avg_cost_ms,status"}
{"input": "", "instruction": "从rzy_internal索引中查询字段提取平均耗时是否正常。求平均值必须先计算提取的次数总和、耗时的总和，然后用耗时总和除以次数总和。用小数点后 3 位的形式展示平均耗时，当平均耗时小于 5 毫秒时，认为状态是正常，否则是异常。只保留提取规则名称、平均耗时和状态三个字段展示", "output": "_index:rzy_internal tag:parser_stat  parser_stat.id:*  |stats sum(parser_stat.total) as total,sum(parser_stat.cost_us) as total_cost_us by parser_stat.name |eval avg_cost_ms = todouble(format(\"%.3f\",total_cost_us/total/1000)) |eval status=if(tonumber(avg_cost_ms)<5,\"正常\",\"异常\") |fields parser_stat.name,avg_cost_ms,status"}
{"input": "从定时任务索引里统计来帐无应答交易，任务 id 为 43，将 msgcd 和 msgNa 用下划线拼接在一起，赋值给字段 msgcd。然后对 reqTime、msgid、msgcd 做分组统计，对 reqTime 转换为数值后做时间戳解析，时间格式为MM-dd HH:mm.ss.SSS。最后去掉 cnt 字段", "instruction": "查询农信银支付前置(mfe)系统数据，进行如下统计", "output": "_index:schedule schedule_id:43| eval msgcd=format(\"%s_%s\",msgcd,msgNa)| stats count() as cnt by reqTime,msgid,msgcd| eval reqTime=formatdate(tolong(reqTime),\"MM-dd HH:mm.ss.SSS\")| fields -cnt"}
{"input": "", "instruction": "将json.capacity.total.bytes结果换算成 TB，只保留小数点后 2 位", "output": "* |eval total=format(\"%.2f\",json.capacity.total.bytes/1024/1024/1024/1024)"}
{"input": "最近5分钟设备端口Speed占比。索引可用字段有：switchperf.devip,switchperf.ifindex,switchperf.value,switchperf.type。请仅使用需要的字段", "instruction": "网络设备接口数据数据，编写查询语句实现如下分析场景", "output": "starttime=\"now-5m\" endtime=\"now\" appname:switchperf AND switchperf.type:ifSpeed switchperf.value:>0| stats count() by switchperf.devip,switchperf.value | eval value=tolong(switchperf.value)| eval ifSpeed=format(\"%.0fMB\",value/1000000)"}
{"input": "按主机名和磁盘路径分组统计磁盘使用率，保留最高的五条记录", "instruction": "Windows主机运维监控指标数据，编写查询语句实现如下分析场景", "output": "appname:top_info_win_disk_io_stats \n\t| stats avg(json.percent_idle_time) as _avg by hostname,json.name | eval user_percent=format(\"%.2f%%\",(100-_avg)) | sort by user_percent | limit 5 "}
{"input": "", "instruction": "数据库主机磁盘使用率上个月的详细信息", "output": "starttime=\"-1M/M\" endtime=\"now/M\" appname:top_info_disk_stats tag:top_info json.disk.path:\"/\" AND * |stats max(json.disk.total) as total1,max(json.disk.used) as used1,max(json.disk.used_percent) as percent1 by ip,hostname,json.disk.path,json.disk.fstype |eval free1=total1-used1 |eval total=format(\"%.2fG\",total1/1024/1024/1024) |eval used=format(\"%.2fG\",used1/1024/1024/1024) |eval free=format(\"%.2fG\",free1/1024/1024/1024) |eval percent=format(\"%.2f%%\",percent1) |sort by  + ip "}
{"input": "算cpu最小使用率，保留小数点后两位", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:top_info_system_stats |stats min(json.cpu.idle_percent) as cnt|eval rate=todouble(format(\"%.2f\",(100-cnt)))"}
{"input": "内存最大使用率", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:top_info_system_stats |stats max(json.Mem.used_percent) as cnt|eval rate=todouble(format(\"%.2f\",cnt))"}
{"input": "磁盘最大使用率", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:top_info_disk_stats  | stats max(json.disk.used_percent) as percent1,max(json.disk.total) as total by json.disk.path |sort by total |limit 1|eval percent=todouble(format(\"%.2f\",percent1))"}
{"input": "进程占用CPU百分比TOP5", "instruction": "Linux主机运维监控指标数据，编写查询语句实现如下分析场景", "output": "appname:top_info_proc_stats \n\t| table json.pid,json.username,json.name,ip,json.cpu_percent | sort by json.cpu_percent | eval json.cpu_percent=format(\"%.2f%%\",json.cpu_percent) | limit 5 "}
{"input": "进程占用CPU百分比TOP5", "instruction": "Windows主机运维监控指标数据，编写查询语句实现如下分析场景", "output": "appname:top_info_win_proc_stats \n\t| table json.pid,json.username,json.name,ip,json.cpu_percent | sort by json.cpu_percent | eval json.cpu_percent=format(\"%.2f%%\",json.cpu_percent) | limit 5 "}
{"input": "172.16.0.2 10分钟内磁盘平均io", "instruction": "docker性能数据，编写查询语句实现如下分析场景", "output": "starttime=\"-10m\" appname:docker_metric tag:docker_metric_diskio AND (hostname:* AND ip:172.16.0.2 ) | stats count() as cnt by json.total |eval totals=todouble(json.total) | stats avg(totals)as a|eval b=format(\"%f次/s\",a)"}
{"input": "172.16.0.2 网络接收总量", "instruction": "docker性能数据，编写查询语句实现如下分析场景", "output": "appname:docker_metric tag:docker_metric_network AND (hostname:* AND ip:172.16.0.2 ) | stats count() as cnt by json.inbound.bytes | stats max(json.inbound.bytes) as incount |eval final=format(\"%.3fmb\",incount/1024/1024)"}
{"input": "172.16.0.2 网络平均传入速率", "instruction": "docker性能数据，编写查询语句实现如下分析场景", "output": "appname:docker_metric tag:docker_metric_network AND (hostname:* AND ip:172.16.0.2 ) | stats count() as cnt by json.in.bytes | eval a=todouble(json.in.bytes) |  stats avg(a) as inspeed|eval final=format(\"%.3fmb/s\",inspeed/1024/1024/60)"}
{"input": "172.16.0.2 网络平均传出速率", "instruction": "docker性能数据，编写查询语句实现如下分析场景", "output": "appname:docker_metric tag:docker_metric_network AND (hostname:* AND ip:172.16.0.2 ) | stats count() as cnt by json.out.bytes | eval a=todouble(json.out.bytes) |  stats avg(a) as outspeed|eval final=format(\"%.3fmb/s\",outspeed/1024/1024/60)"}
{"input": "172.16.0.2 网络发送总量", "instruction": "docker性能数据，编写查询语句实现如下分析场景", "output": "appname:docker_metric tag:docker_metric_network AND (hostname:* AND ip:172.16.0.2 ) | stats count() as cnt by json.outbound.bytes | stats max(json.outbound.bytes) as outcount |eval final=format(\"%.3fmb\",outcount/1024/1024)"}
{"input": "", "instruction": "我想问的是，这个主机的容器的入口流量最大是多少 MB？", "output": "appname:docker_metric tag:docker_metric_network AND (hostname:* AND ip:172.16.0.2 ) | stats count() as cnt by json.inbound.bytes | stats max(json.inbound.bytes) as incount |eval final=format(\"%.3fmb\",incount/1024/1024)"}
{"input": "", "instruction": "我想问的是系统的IO情况，比如磁盘读写速度和cpu利用率等信息。我希望能看到最近五分钟内每个硬盘的平均空闲时间以及总体的平均空闲时间，并以百分比显示。", "output": "appname:top_info_win_disk_io_stats  | stats avg(json.percent_idle_time) as _avg by hostname,json.name | eval user_percent=format(\"%.2f%%\",(100-_avg)) | sort by user_percent | limit 5 "}
{"input": "", "instruction": "我想问的是，系统的 CPU 使用率是多少吗？这个统计数据是从哪里来的呢？这是否和预期相符？", "output": "* AND appname:top_info_system_stats |stats min(json.cpu.idle_percent) as cnt|eval rate=todouble(format(\"%.2f\",(100-cnt)))"}
{"input": "", "instruction": "我想问的是，系统内存使用率最高的那个应用是哪一个？", "output": "* AND appname:top_info_system_stats |stats max(json.Mem.used_percent) as cnt|eval rate=todouble(format(\"%.2f\",cnt))"}
{"input": "", "instruction": "我想要知道系统中哪个分区使用率最高，并显示其占比为 xx%。请告诉我如何实现这个功能。", "output": "* AND appname:top_info_disk_stats  | stats max(json.disk.used_percent) as percent1,max(json.disk.total) as total by json.disk.path |sort by total |limit 1|eval percent=todouble(format(\"%.2f\",percent1))"}
{"input": "", "instruction": "我想问 CPU 使用率最高的前五个进程的信息。", "output": "appname:top_info_proc_stats  | table json.pid,json.username,json.name,ip,json.cpu_percent | sort by json.cpu_percent | eval json.cpu_percent=format(\"%.2f%%\",json.cpu_percent) | limit 5 "}
{"input": "", "instruction": "我想询问 CPU 使用率最高的五个进程的信息。", "output": "appname:top_info_win_proc_stats  | table json.pid,json.username,json.name,ip,json.cpu_percent | sort by json.cpu_percent | eval json.cpu_percent=format(\"%.2f%%\",json.cpu_percent) | limit 5 "}
{"input": "", "instruction": "我想要知道容器的网络流量情况，以及每个容器的平均入口带宽。", "output": "appname:docker_metric tag:docker_metric_network AND (hostname:* AND ip:172.16.0.2 ) | stats count() as cnt by json.in.bytes | eval a=todouble(json.in.bytes) |  stats avg(a) as inspeed|eval final=format(\"%.3fmb/s\",inspeed/1024/1024/60)"}
{"input": "", "instruction": "容器的磁盘IO使用情况和主机IP为172.16.0.2的信息。", "output": "starttime=\"-10m\" appname:docker_metric tag:docker_metric_diskio AND (hostname:* AND ip:172.16.0.2 ) | stats count() as cnt by json.total |eval totals=todouble(json.total) | stats avg(totals)as a|eval b=format(\"%f次/s\",a)"}
{"input": "直播花屏占比_1d。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒分析_24号数据数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_smpegts (stb_vixtel_smpegts.freezeTime:>0 AND stb_vixtel_smpegts.downloadTime:>0)\n|eval freezeTime=tolong(stb_vixtel_smpegts.freezeTime)|eval downloadTime=tolong(stb_vixtel_smpegts.downloadTime)\n| stats sum(freezeTime) as freezeTime1,sum(downloadTime) as downloadTime1 |eval liveFreezeRate=format(\"%.3f%%\",(freezeTime1/1000000)/downloadTime1)\n|fields ts,liveFreezeRate"}
{"input": "点播卡屏占比_1d。索引可用字段有：stb_vixtel_sotthas.district, stb_vixtel_sotthas.downloadTime, stb_vixtel_sotthas.freezeTime, stb_vixtel_sotthas.geo.city, stb_vixtel_sotthas.geo.province, stb_vixtel_sotthas.hasQoE, stb_vixtel_sotthas.programName, stb_vixtel_sotthas.stbId, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒分析_24号数据数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_sotthas (stb_vixtel_sotthas.freezeTime:>0 AND stb_vixtel_sotthas.downloadTime:>0)\n|eval freezeTime=tolong(stb_vixtel_sotthas.freezeTime)|eval downloadTime=tolong(stb_vixtel_sotthas.downloadTime)\n| stats sum(freezeTime) as freezeTime1,sum(downloadTime) as downloadTime1|eval vodFreezeRate=format(\"%.3f%%\",(freezeTime1/1000000)/downloadTime1)\n|fields vodFreezeRate"}
{"input": "单位时段整机上行平均速率。索引可用字段有：switchperf.devip, switchperf.ifindex, switchperf.type, switchperf.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "网络设备接口数据数据，编写查询语句实现如下分析场景", "output": "appname:switchperf AND switchperf.type:ifInOctets | stats max(switchperf.value) as _maxv,min(switchperf.value) as _minv,max(timestamp) as _maxt,min(timestamp) as _mint by switchperf.devip,switchperf.type,switchperf.ifindex | eval v=_maxv-_minv | eval t=_maxt-_mint | stats sum(v) as totalInOctets,avg(t) as timer | eval MBps=format(\"%.2fMB\",totalInOctets/timer/1000)"}
{"input": "单位时段整机下行数据包率。索引可用字段有：switchperf.devip, switchperf.ifindex, switchperf.type, switchperf.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "网络设备接口数据数据，编写查询语句实现如下分析场景", "output": "appname:switchperf AND (switchperf.type:ifOutUcastPkts OR switchperf.type:ifOutNUcastPkts) | stats max(switchperf.value) as _maxv,min(switchperf.value) as _minv,max(timestamp) as _maxt,min(timestamp) as _mint by switchperf.devip,switchperf.type,switchperf.ifindex | eval v=_maxv-_minv | eval t=_maxt-_mint | stats sum(v) as totalOutPkts,avg(t) as timer | eval Pkts=format(\"%.2fPkts\",totalOutPkts/timer*1000)"}
{"input": "单位时段整机下行平均速率。索引可用字段有：switchperf.devip, switchperf.ifindex, switchperf.type, switchperf.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "网络设备接口数据数据，编写查询语句实现如下分析场景", "output": "appname:switchperf AND switchperf.type:ifOutOctets | stats max(switchperf.value) as _maxv,min(switchperf.value) as _minv,max(timestamp) as _maxt,min(timestamp) as _mint by switchperf.devip,switchperf.type,switchperf.ifindex | eval v=_maxv-_minv | eval t=_maxt-_mint | stats sum(v) as totalInOctets,avg(t) as timer | eval MBps=format(\"%.2fMB\",totalInOctets/timer/1000)"}
{"input": "单位时段整机上行数据包率。索引可用字段有：switchperf.devip, switchperf.ifindex, switchperf.type, switchperf.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "网络设备接口数据数据，编写查询语句实现如下分析场景", "output": "appname:switchperf AND (switchperf.type:ifInUcastPkts OR switchperf.type:ifInNUcastPkts) | stats max(switchperf.value) as _maxv,min(switchperf.value) as _minv,max(timestamp) as _maxt,min(timestamp) as _mint by switchperf.devip,switchperf.type,switchperf.ifindex | eval v=_maxv-_minv | eval t=_maxt-_mint | stats sum(v) as totalInPkts,avg(t) as timer | eval InPkts=format(\"%.2fPkts\",totalInPkts/timer*1000)"}
{"input": "从 metrics 索引里搜索和统计手机应用在线时长，按分钟展示，取最近 20 条。索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "深信服上网行为审计数据，编写查询语句实现如下分析场景", "output": "_index:metrics access_control.metrics_name:mobiletime|stats sum(onlinetime) as sumtime by access_control.appname|eval min=format(\"%.1f\",sumtime/60)|sort by sumtime|limit 20"}
{"input": "从 metrics 索引里搜索和统计网站在线时长_分钟，取最近 20 条。索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "深信服上网行为审计数据，编写查询语句实现如下分析场景", "output": "_index:metrics access_control.metrics_name:webtime|stats sum(onlinetime) as sumtime by access_control.appname|eval min=format(\"%.1f\",sumtime/60)|sort by sumtime|limit 20"}
{"input": "从 metrics 索引里搜索和统计购物理财社交时长_分钟，展示最近 20 条。索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "深信服上网行为审计数据，编写查询语句实现如下分析场景", "output": "_index:metrics access_control.metrics_name:ShoppingFinancingSocialTime|stats sum(onlinetime) as sumtime by access_control.appname|eval min=format(\"%.1f\",sumtime/60)|sort by sumtime|limit 20"}
{"input": "核心系统，appname 叫cbv7。", "instruction": "查询某系统的成功率", "output": "appname:cbv7 tag:tuxedo cbv7.ErrorCode:* | eval fail=if(cbv7.ErrorCode==\"AAAAAAAAAA\",0,1) | stats sum(fail) as _fail,count() as _sum | eval health=format(\"%.2f%%\",(_sum-_fail)*100/_sum)"}
{"input": "柜面前端系统，appname 叫 ntfs，tag 叫 abs。", "instruction": "查询某系统的成功率", "output": "appname:ntfs tag:abs ntfs.ErrorCode:* | eval fail=if(ntfs.ErrorCode==\"AAAAAAAAAA\",0,1) | stats sum(fail) as _fail,count() as _sum | eval health=format(\"%.2f%%\",(_sum-_fail)*100/_sum)"}
{"input": "现代化支付系统，appname 为 cnap。索引可用字段有：cnap.ErrorCode, cnap.action, cnap.logId, cnap.respSysId, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "查询某系统的成功率", "output": "appname:cnap cnap.respSysId:CNAP AND cnap.action:SEND cnap.ErrorCode:* | eval fail=if(ntfs.ErrorCode==\"AAAAAAAAAA\",0,1) | stats sum(fail) as _fail,count() as _sum | eval health=format(\"%.2f%%\",(_sum-_fail)*100/_sum)"}
{"input": "核心系统，使用 appname 为 cbv7。", "instruction": "查询某系统的响应率", "output": "appname:cbv7 tag:tuxedo cbv7.respSysId:CBV7 | eval type=if(cbv7.action=\"request\",1,0) | stats sum(type) as _request,count() as _sum | eval rrate=format(\"%.2f\",(_sum-_request)*100/_request) | eval rrate=if(todouble(rrate)>=100,\"100%\",format(\"%.2f%%\",todouble(rrate)))"}
{"input": "现代化支付系统，appname 为 cnap。索引可用字段有：cnap.ErrorCode, cnap.action, cnap.logId, cnap.respSysId, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "查询某系统的响应率", "output": "appname:cnap cnap.respSysId:CNAP | eval type=if(cnap.action=\"RECEIVED\",1,0) | stats sum(type) as _request,count() as _sum | eval rrate=format(\"%.2f\",(_sum-_request)*100/_request) | eval rrate=if(todouble(rrate)>=100,\"100%\",format(\"%.2f%%\",todouble(rrate)))"}
{"input": "", "instruction": "vsphere_esxi宿主机CPU最大使用率", "output": "appname:vsphere tag:vsphere source:HostSystem* |dedup 1 host |eval cpu_percent=todouble(format(\"%.2f\",cpu.used.mhz/cpu.total.mhz)) |stats max(cpu_percent) as max_"}
{"input": "", "instruction": "vsphere_esxi存储最大使用率", "output": "appname:vsphere tag:vsphere source:Datastore* |stats max(capacity.used.pct) as max_ |eval max_=todouble(format(\"%.2f\",max_/100))"}
{"input": "", "instruction": "vsphere_esxi存储使用详情", "output": "appname:vsphere tag:vsphere source:Datastore* |dedup 1 name |eval capacity_total_GB=format(\"%.0f\",capacity.total.bytes/1024/1024/1024) |eval capacity_used_GB=format(\"%.0f\",capacity.used.bytes/1024/1024/1024) |eval capacity_free_GB=format(\"%.0f\",capacity.free.bytes/1024/1024/1024) |eval capacity_percent=capacity.used.pct+\"%\" |table  name,capacity_total_GB,capacity_used_GB,capacity_free_GB,capacity_percent |sort by +name "}
{"input": "", "instruction": "vsphere_esxi虚拟机内存最大使用率", "output": "appname:vsphere tag:vsphere source:VirtualMachine* |dedup 1 name |eval memory_total_MB=tolong(format(\"%.0f\",memory.total.guest.bytes/1024/1024)) |eval memory_free_MB=tolong(format(\"%.0f\",memory.free.guest.bytes/1024/1024)) |eval memory_used_MB=tolong(memory_total_MB-memory_free_MB) |eval memory_percent=todouble(format(\"%.2f\",memory_used_MB/memory_total_MB)) |stats max(memory_percent) as max_"}
{"input": "", "instruction": "vsphere_esxi虚拟机存储最大使用率", "output": "appname:vsphere tag:vsphere source:VirtualMachine* |dedup 1 name |eval storage_provisioned_MB=tolong(format(\"%.0f\",storage.provisioned.bytes/1024/1024)) |eval storage_used_MB=tolong(format(\"%.0f\",storage.used.bytes/1024/1024)) |eval storage_percent=todouble(format(\"%.2f\",storage_used_MB/storage_provisioned_MB)) |stats max(storage_percent) as max_"}
{"input": "", "instruction": "vsphere_esxi虚拟机内存使用详情", "output": "appname:vsphere tag:vsphere source:VirtualMachine* |dedup 1 name |eval memory_total_MB=tolong(format(\"%.0f\",memory.total.guest.bytes/1024/1024)) |eval memory_free_MB=tolong(format(\"%.0f\",memory.free.guest.bytes/1024/1024)) |eval memory_used_MB=tolong(memory_total_MB-memory_free_MB) |eval memory_percent=format(\"%.0f%%\",(memory_used_MB/memory_total_MB)*100) "}
{"input": "", "instruction": "vsphere_esxi宿主机内存最大使用率", "output": "appname:vsphere tag:vsphere source:HostSystem* |dedup 1 host |eval memory_total_GB=tolong(format(\"%.0f\",memory.total.bytes/1024/1024/1024)) |eval memory_free_GB=tolong(format(\"%.0f\",memory.free.bytes/1024/1024/1024)) |eval memory_used_GB=tolong(memory_total_GB-memory_free_GB) |eval memory_percent=todouble(format(\"%.2f\",memory_used_GB/memory_total_GB)) |stats max(memory_percent) as max_"}
{"input": "", "instruction": "vsphere_esxi宿主机CPU使用详情", "output": "appname:vsphere tag:vsphere source:HostSystem* |dedup 1 host |table  host,cpu.total.mhz,cpu.used.mhz,cpu.free.mhz |eval cpu_percent=format(\"%.0f%%\",(cpu.used.mhz/cpu.total.mhz)*100) |sort by +host "}
{"input": "", "instruction": "vsphere_esxi宿主机内存使用详情", "output": "appname:vsphere tag:vsphere source:HostSystem* |dedup 1 host |eval memory_total_GB=tolong(format(\"%.0f\",memory.total.bytes/1024/1024/1024)) |eval memory_free_GB=tolong(format(\"%.0f\",memory.free.bytes/1024/1024/1024)) |eval memory_used_GB=tolong(memory_total_GB-memory_free_GB) |eval memory_percent=format(\"%.0f%%\",(memory_used_GB/memory_total_GB)*100)"}
{"input": "", "instruction": "vsphere_esxi虚拟机存储使用详情", "output": "appname:vsphere tag:vsphere source:VirtualMachine* |dedup 1 name |eval storage_provisioned_MB=tolong(format(\"%.0f\",storage.provisioned.bytes/1024/1024)) |eval storage_used_MB=tolong(format(\"%.0f\",storage.used.bytes/1024/1024)) |eval storage_free_MB=tolong(storage_provisioned_MB-storage_used_MB) |eval storage_percent=format(\"%.0f%%\",(storage_used_MB/storage_provisioned_MB)*100) "}
{"input": "近一天聊天工具使用时长_分钟。索引可用字段有：loadbalancing.dst_ip, loadbalancing.level, loadbalancing.listenervs_ip, loadbalancing.msg, loadbalancing.querytype, loadbalancing.responsecode, loadbalancing.severity, loadbalancing.src.geo.province, loadbalancing.src_ip, loadbalancing.status, loadbalancing.type, loadbalancing.user, loadbalancing.username, loadblancing.status, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "深信服上网行为审计数据，编写查询语句实现如下分析场景", "output": "starttime=\"-1d\" _index:schedule schedule_name:chattime|stats sum(onlinetime) as sumtime by access_control.appname|eval min=format(\"%.1f\",sumtime/60)|sort by sumtime"}
{"input": "近一天_流媒体使用时长_分钟。索引可用字段有：loadbalancing.dst_ip, loadbalancing.level, loadbalancing.listenervs_ip, loadbalancing.msg, loadbalancing.querytype, loadbalancing.responsecode, loadbalancing.severity, loadbalancing.src.geo.province, loadbalancing.src_ip, loadbalancing.status, loadbalancing.type, loadbalancing.user, loadbalancing.username, loadblancing.status, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "深信服上网行为审计数据，编写查询语句实现如下分析场景", "output": "starttime=\"-1d\" _index:schedule schedule_name:TVtime|stats sum(onlinetime) as sumtime by access_control.appname|eval min=format(\"%.1f\",sumtime/60)|sort by sumtime"}
{"input": "近一天_游戏在线时长_分钟。索引可用字段有：loadbalancing.dst_ip, loadbalancing.level, loadbalancing.listenervs_ip, loadbalancing.msg, loadbalancing.querytype, loadbalancing.responsecode, loadbalancing.severity, loadbalancing.src.geo.province, loadbalancing.src_ip, loadbalancing.status, loadbalancing.type, loadbalancing.user, loadbalancing.username, loadblancing.status, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "深信服上网行为审计数据，编写查询语句实现如下分析场景", "output": "starttime=\"-1d\" _index:schedule schedule_name:gametime|stats sum(onlinetime) as sumtime by sangforAC.appname|eval min=format(\"%.1f\",sumtime/60)|sort by sumtime"}
{"input": "was_gc平均耗时ms。索引可用字段有：gc.beforeEden, gc.invocations, gc.stoptime, gc.totalnewgeneration, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "middle_ibm_was数据，编写查询语句实现如下分析场景", "output": "appname:gc tag:ibm_was  |stats avg(middleware.cost) as cnt | eval avgtime=format(\"%.2f\",cnt)"}
{"input": "was_full_gc平均耗时秒。索引可用字段有：gc.beforeEden, gc.invocations, gc.stoptime, gc.totalnewgeneration, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "middle_ibm_was数据，编写查询语句实现如下分析场景", "output": "appname:gc tag:ibm_was  middleware.type:global |stats avg(middleware.cost) as avg_cost|eval aaa=avg_cost/1000| eval avgtime=format(\"%.2f\",aaa)"}
{"input": "单位时段平均速率。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:inst_kpi_all | stats sum(lingcloud.data.totalRate) as cnt,max(timestamp) as max_,min(timestamp) as min_ | eval time=(max_-min_)/1000|eval avg_=format(\"%.2fMbps\",cnt/1024/1024/time)"}
{"input": "单位时段峰值速率。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:inst_kpi_all | stats max(lingcloud.data.peakBytesRate) as cnt|eval max_=format(\"%.2fGbps\",cnt/1024/1024/1024)"}
{"input": "单位时段流量总量。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_permin utc |stats sum(lingcloud.data.totalBytes) as cnt|eval sum_=format(\"%.2fGb\",cnt/1024/1024/1024)"}
{"input": "单位时段tcp连接成功率。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:inst_kpi_all | stats sum(lingcloud.data.successfulTcpConnNum) as cnt_succ,sum(lingcloud.data.failedTcpConnNum) as cnt_fail|eval rate=format(\"%.2f%%\",cnt_succ*100/(cnt_succ+cnt_fail))"}
{"input": "单位时段数据包率。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:inst_kpi_all | stats sum(lingcloud.data.totalPktsRate) as cnt,max(timestamp) as max_,min(timestamp) as min_ | eval time=(max_-min_)/1000|eval avg_=format(\"%.2fpps\",cnt/time)"}
{"input": "单位时段应用数据包率。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_list_all|stats avg(lingcloud.totalpkts) as cnt|eval avg_=format(\"%.2fpps\",cnt)"}
{"input": "单位时段应用并发连接数。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_list_all|stats sum(lingcloud.concurconnnum) as cnt1|eval cnt=format(\"%.0f个\",cnt1)"}
{"input": "单位时段应用平均流量速率。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_list_all|stats avg(lingcloud.totalbytes) as cnt|eval avg_=format(\"%.2fGb\",cnt/1024/1024/1024)"}
{"input": "单位时段应用tcp连接成功率。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_list_all|stats sum(lingcloud.successfultcpconnnum) as cnt_succ,sum(failedtcpconnnum) as cnt_fail|eval r=cnt_succ*100/(cnt_succ+cnt_fail)|eval rate=format(\"%.2f%%\",r)"}
{"input": "单位时段应用平均网络延时。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_list_all|stats avg(lingcloud.conntime) as cnt|eval avg_=format(\"%.2fus\",cnt)"}
{"input": "单位时段应用平均应用响应时间。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_list_all|stats avg(lingcloud.transresptime) as cnt|eval avg_=format(\"%.2fus\",cnt)"}
{"input": "toclient总流量。索引可用字段有：nta.Service_Name, nta.alert.action, nta.alert.category, nta.alert.metadata.former_category, nta.alert.severity, nta.alert.signature, nta.attack_name, nta.attack_type, nta.dest_ip, nta.dest_port, nta.dst.geo.city, nta.dst_ip, nta.dst_ip_city, nta.dst_port, nta.event_level, nta.event_name, nta.event_type, nta.flow.bytes_toclient, nta.flow.bytes_toserver, nta.kill_chain, nta.level, nta.login_user, nta.proto, nta.src.geo.city, nta.src.geo.country, nta.src.geo.province, nta.src_ip, nta.src_ip_city, nta.src_port, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "流量数据数据，编写查询语句实现如下分析场景", "output": "appname:nta AND tag:eve nta.src_ip:${src_ip} nta.dst_ip:${dst_ip} nta.dst_port:${dst_port} nta.proto:${proto}|stats sum(nta.flow.bytes_toclient) as cnt|eval sum_=format(\"%.2fGb\",cnt/1024/1024/1024)"}
{"input": "toserver总流量。索引可用字段有：nta.Service_Name, nta.alert.action, nta.alert.category, nta.alert.metadata.former_category, nta.alert.severity, nta.alert.signature, nta.attack_name, nta.attack_type, nta.dest_ip, nta.dest_port, nta.dst.geo.city, nta.dst_ip, nta.dst_ip_city, nta.dst_port, nta.event_level, nta.event_name, nta.event_type, nta.flow.bytes_toclient, nta.flow.bytes_toserver, nta.kill_chain, nta.level, nta.login_user, nta.proto, nta.src.geo.city, nta.src.geo.country, nta.src.geo.province, nta.src_ip, nta.src_ip_city, nta.src_port, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "流量数据数据，编写查询语句实现如下分析场景", "output": "appname:nta AND tag:eve nta.src_ip:${src_ip} nta.dst_ip:${dst_ip} nta.dst_port:${dst_port} nta.proto:${proto}|stats sum(nta.flow.bytes_toserver) as cnt|eval sum_=format(\"%.2fGb\",cnt/1024/1024/1024)"}
{"input": "toserver平均速率。索引可用字段有：nta.Service_Name, nta.alert.action, nta.alert.category, nta.alert.metadata.former_category, nta.alert.severity, nta.alert.signature, nta.attack_name, nta.attack_type, nta.dest_ip, nta.dest_port, nta.dst.geo.city, nta.dst_ip, nta.dst_ip_city, nta.dst_port, nta.event_level, nta.event_name, nta.event_type, nta.flow.bytes_toclient, nta.flow.bytes_toserver, nta.kill_chain, nta.level, nta.login_user, nta.proto, nta.src.geo.city, nta.src.geo.country, nta.src.geo.province, nta.src_ip, nta.src_ip_city, nta.src_port, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "流量数据数据，编写查询语句实现如下分析场景", "output": "appname:nta AND tag:eve  nta.src_ip:${src_ip} nta.dest_ip:${dst_ip} nta.dest_port:${dst_port} nta.proto:${proto}|stats sum(nta.flow.pkts_toserver) as cnt,max(timestamp) as max_,min(timestamp) as min_ | eval time=(max_-min_)/1000|eval avg_=format(\"%.2fMbps\",cnt/1024/1024/time/3600)"}
{"input": "toclient平均速率。索引可用字段有：nta.Service_Name, nta.alert.action, nta.alert.category, nta.alert.metadata.former_category, nta.alert.severity, nta.alert.signature, nta.attack_name, nta.attack_type, nta.dest_ip, nta.dest_port, nta.dst.geo.city, nta.dst_ip, nta.dst_ip_city, nta.dst_port, nta.event_level, nta.event_name, nta.event_type, nta.flow.bytes_toclient, nta.flow.bytes_toserver, nta.kill_chain, nta.level, nta.login_user, nta.proto, nta.src.geo.city, nta.src.geo.country, nta.src.geo.province, nta.src_ip, nta.src_ip_city, nta.src_port, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "流量数据数据，编写查询语句实现如下分析场景", "output": "appname:nta AND tag:eve  nta.src_ip:${src_ip} nta.dst_ip:${dst_ip} nta.dst_port:${dst_port} nta.proto:${proto}|stats sum(nta.flow.bytes_toclient) as cnt,max(timestamp) as max_,min(timestamp) as min_ | eval time=(max_-min_)/1000|eval avg_=format(\"%.2fMbps\",cnt/1024/1024/time/3600)"}
{"input": "核心交易耗时。", "instruction": "核心交易系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':ensemble ensemble.excute_time:*|eval excute_time=tolong(ensemble.excute_time)|stats avg(nexcute_time) as avg_|eval avg_=format(\"%.2f\",avg_)|eval aa=avg_+\"毫秒\""}
{"input": "网关平均耗时。", "instruction": "网关系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':connector |stats avg(connector.Service_execute_time) as avg_|eval avg_=format(\"%.2f\",avg_)|eval aa=avg_+\"毫秒\""}
{"input": "清算交易耗时。", "instruction": "清算系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':accounting accounting.excute_time:*|eval excute_time=tolong(accounting.excute_time)|stats avg(excute_time) as avg_|eval avg_=format(\"%.2f\",avg_)|eval aa=avg_+\"毫秒\""}
{"input": "最近一天上行流量。索引可用字段有：ac.ac_ip, ac.action, ac.ap_ip, ac.ap_name, ac.app, ac.app_name, ac.band, ac.client, ac.command, ac.dst_ip, ac.dst_port, ac.event_id, ac.event_name, ac.event_type, ac.kv.app_cat_name, ac.kv.log_level, ac.kv.receive_addr, ac.kv.send_addr, ac.kv.subject, ac.kv.term_device, ac.log_type, ac.mac_addr, ac.mnemonic, ac.msg.app, ac.msg.serv, ac.msg.tm_type, ac.msg.user, ac.operation, ac.policy, ac.request_url, ac.resource, ac.resource_type, ac.result, ac.src_ip, ac.src_mac, ac.ssid, ac.status, ac.time, ac.user, ac.user_agent, ac.user_name, ac.web_app, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "surfilter_ac数据，编写查询语句实现如下分析场景", "output": "starttime=\"-1d\" appname:ac tag:surfilter ac.event_type:statistic_traffic|eval up=tolong(ac.kv.up) | stats sum(up) as total_up|eval total=format(\"%.2fG\",total_up/1024/1024/1024)"}
{"input": "最近一天下行流量。索引可用字段有：ac.ac_ip, ac.action, ac.ap_ip, ac.ap_name, ac.app, ac.app_name, ac.band, ac.client, ac.command, ac.dst_ip, ac.dst_port, ac.event_id, ac.event_name, ac.event_type, ac.kv.app_cat_name, ac.kv.log_level, ac.kv.receive_addr, ac.kv.send_addr, ac.kv.subject, ac.kv.term_device, ac.log_type, ac.mac_addr, ac.mnemonic, ac.msg.app, ac.msg.serv, ac.msg.tm_type, ac.msg.user, ac.operation, ac.policy, ac.request_url, ac.resource, ac.resource_type, ac.result, ac.src_ip, ac.src_mac, ac.ssid, ac.status, ac.time, ac.user, ac.user_agent, ac.user_name, ac.web_app, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "surfilter_ac数据，编写查询语句实现如下分析场景", "output": "starttime=\"-1d\" appname:ac tag:surfilter ac.event_type:statistic_traffic|eval up=tolong(ac.kv.down) | stats sum(up) as total_|eval total=format(\"%.2fG\",total_/1024/1024/1024)"}
{"input": "", "instruction": "CDN 日志中，统计流量 top 10 的 IP，流量按 MB 展示", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 10 "}
{"input": "", "instruction": "CDN 日志中，top 10 的 IP 流量查询，流量按 MB 展示", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 10 "}
{"input": "", "instruction": "CDN 日志中，查询 top10 的 IP 流量，按 MB 计算", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 10 "}
{"input": "", "instruction": "CDN 日志中，统计流量 top 20 的 IP，流量按 MB 展示", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 20 "}
{"input": "", "instruction": "CDN 日志中，top 20 的 IP 流量查询，流量按 MB 显示", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 20 "}
{"input": "", "instruction": "CDN 日志中，查询 top20 的 IP 流量，按 MB 显示", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 20 "}
{"input": "", "instruction": "CDN 日志统计流量 top 100 的 IP，流量按 MB 计算画图", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 100 "}
{"input": "", "instruction": "CDN 日志top 100 的 IP 流量查询，流量按 MB 计算画图", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 100 "}
{"input": "", "instruction": "CDN 日志查询 top100 的 IP 流量，按 MB 计算并画图", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 100 "}
{"input": "", "instruction": "CDN 日志统计流量 top 50 的 IP，流量按 MB 计算画图", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 50 "}
{"input": "", "instruction": "CDN 日志top 50 的 IP 流量查询，流量按 MB 计算画图", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 50 "}
{"input": "", "instruction": "CDN 日志查询 top50 的 IP 流量，按 MB 计算并画图", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 50 "}
{"input": "索引可用字段有：middleware.Error_info, middleware.System_errinfo, middleware.System_errno, middleware.actconn, middleware.action, middleware.backend_queue, middleware.beconn, middleware.clientip, middleware.desc, middleware.dst_ip, middleware.error_level, middleware.error_no, middleware.event_name, middleware.event_type, middleware.feconn, middleware.func_no, middleware.geo.city, middleware.geo.isp, middleware.geo.province, middleware.http_hostname, middleware.http_method, middleware.http_referer, middleware.http_user_agent.browser, middleware.http_user_agent.os, middleware.level, middleware.message, middleware.method, middleware.middleware.nursery_free_after, middleware.module, middleware.msg, middleware.nursery_free_before, middleware.nursery_total, middleware.referer, middleware.referrer, middleware.req_time, middleware.request, middleware.request_method, middleware.request_path, middleware.request_status, middleware.response, middleware.response_code, middleware.retries, middleware.rsp, middleware.server, middleware.severity, middleware.src.geo.country, middleware.src.geo.isp, middleware.src_ip, middleware.src_ip.geo.city, middleware.srv_conn, middleware.srv_queue, middleware.status, middleware.subsystem, middleware.tc, middleware.tenure_free_after, middleware.tenure_free_before, middleware.thread, middleware.tt, middleware.tw, middleware.type, middleware.ua.browser, middleware.ua.device, middleware.ua.os, middleware.uri_query, middleware.uri_stem, middleware.url, middleware.zkmsg.zk_followers, middleware.zkmsg.zk_packets_received, middleware.zkmsg.zk_packets_sent, middleware.zkmsg.zk_server_state, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "IIS 服务器的url访问参数平均耗时最高top10", "output": "appname:middleware tag:iis (NOT middleware.uri_stem:*Date*) | stats avg(middleware.time_cost) as c1 by middleware.uri_query|sort by c1|eval c2 =format(\"%.1f\", c1)| limit 10"}
{"input": "", "instruction": "Linux操作系统审计昨天的CPU最大使用率指标", "output": "starttime=\"-1d/d\" endtime=\"now/d\" appname:top_info_system_stats | stats min(cpu.idle_percent) as _min by ip,hostname |eval _max=100-_min |sort by +ip |eval _max=format(\"%.2f%%\",_max) "}
{"input": "", "instruction": "Linux操作系统审计前7天的CPU平均使用率指标", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_system_stats | stats avg(cpu.idle_percent) as _avg by ip,hostname |eval _avg=100-_avg |sort by +ip |eval _avg=format(\"%.2f%%\",_avg) "}
{"input": "", "instruction": "Linux操作系统审计_最近七天的内存最大使用率指标", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_system_stats |stats max(Mem.used_percent) as _max by ip,hostname |sort by +ip |eval _max=format(\"%.2f%%\",_max)"}
{"input": "", "instruction": "Linux操作系统审计_最近 7 天的内存平均使用率指标", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_system_stats |stats avg(Mem.used_percent) as _avg by ip,hostname |sort by +ip |eval _avg=format(\"%.2f%%\",_avg)"}
{"input": "", "instruction": "Linux操作系统审计，前七天磁盘根目录最大使用率指标", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_disk_stats AND (disk.path:\"/\") |stats max(disk.used_percent) as value by ip,hostname |sort by +ip |eval value=format(\"%.2f%%\",value) "}
{"input": "", "instruction": "Linux操作系统审计，前七天磁盘根目录平均使用率指标", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_disk_stats AND disk.path:\"/\" |stats avg(disk.used_percent) as value by ip,hostname |sort by +ip |eval value=format(\"%.2f%%\",value) "}
{"input": "", "instruction": "Linux操作系统审计，前七天磁盘根目录读IO最大速率", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_disk_io_stats AND name:\"dm-0\" |stats max(io_stat.rkB_s) as value by ip,hostname |eval value=format(\"%.2fMB/s\",value/1024) |sort by +ip"}
{"input": "", "instruction": "Linux操作系统审计，前七天磁盘根目录写IO最大速率", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_disk_io_stats AND name:\"dm-0\" |stats max(io_stat.wkB_s) as value by ip,hostname |eval value=format(\"%.2fMB/s\",value/1024) |sort by +ip"}
{"input": "", "instruction": "Linux操作系统审计，前七天磁盘根目录UTIL最大速率", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_disk_io_stats AND name:\"dm-0\" |stats max(io_stat.util) as value by ip,hostname |eval value=format(\"%.2f%%\",value) |sort by +ip "}
{"input": "", "instruction": "Linux操作系统审计，前七天磁盘资源使用详情", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_disk_stats |stats max(disk.total) as total1,max(disk.used) as used1,max(disk.used_percent) as percent1 by ip,disk.path,disk.fstype |eval free1=total1-used1 |eval total=format(\"%.2fG\",total1/1024/1024/1024) |eval used=format(\"%.2fG\",used1/1024/1024/1024) |eval free=format(\"%.2fG\",free1/1024/1024/1024) |eval percent=format(\"%.2f%%\",percent1) "}
{"input": "", "instruction": "Linux操作系统审计最近 7 天磁盘inodes使用情况", "output": "starttime=\"-7d/d\" endtime=\"now\" appname:top_info_disk_stats |stats max(disk.inodes_total) as total,max(disk.inodes_used) as used,max(disk.inodes_used_percent) as percent by ip,disk.path,disk.fstype |eval free=total-used |eval percent=format(\"%.2f%%\",percent)"}
{"input": "url平均耗时最高top10。索引可用字段有：middleware.Error_info, middleware.System_errinfo, middleware.System_errno, middleware.actconn, middleware.action, middleware.backend_queue, middleware.beconn, middleware.clientip, middleware.desc, middleware.dst_ip, middleware.error_level, middleware.error_no, middleware.event_name, middleware.event_type, middleware.feconn, middleware.func_no, middleware.geo.city, middleware.geo.isp, middleware.geo.province, middleware.http_hostname, middleware.http_method, middleware.http_referer, middleware.http_user_agent.browser, middleware.http_user_agent.os, middleware.level, middleware.message, middleware.method, middleware.middleware.nursery_free_after, middleware.module, middleware.msg, middleware.nursery_free_before, middleware.nursery_total, middleware.referer, middleware.referrer, middleware.req_time, middleware.request, middleware.request_method, middleware.request_path, middleware.request_status, middleware.response, middleware.response_code, middleware.retries, middleware.rsp, middleware.server, middleware.severity, middleware.src.geo.country, middleware.src.geo.isp, middleware.src_ip, middleware.src_ip.geo.city, middleware.srv_conn, middleware.srv_queue, middleware.status, middleware.subsystem, middleware.tc, middleware.tenure_free_after, middleware.tenure_free_before, middleware.thread, middleware.tt, middleware.tw, middleware.type, middleware.ua.browser, middleware.ua.device, middleware.ua.os, middleware.uri_query, middleware.uri_stem, middleware.url, middleware.zkmsg.zk_followers, middleware.zkmsg.zk_packets_received, middleware.zkmsg.zk_packets_sent, middleware.zkmsg.zk_server_state, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "middleware_microsoft_iis数据，编写查询语句实现如下分析场景", "output": "appname:middleware tag:iis (NOT middleware.uri_stem:*Date*) | stats avg(middleware.time_cost) as c1 by middleware.uri_stem|sort by c1|eval c2 =format(\"%.1f\", c1)| limit 10"}
{"input": "url访问参数平均耗时最高top10。索引可用字段有：middleware.Error_info, middleware.System_errinfo, middleware.System_errno, middleware.actconn, middleware.action, middleware.backend_queue, middleware.beconn, middleware.clientip, middleware.desc, middleware.dst_ip, middleware.error_level, middleware.error_no, middleware.event_name, middleware.event_type, middleware.feconn, middleware.func_no, middleware.geo.city, middleware.geo.isp, middleware.geo.province, middleware.http_hostname, middleware.http_method, middleware.http_referer, middleware.http_user_agent.browser, middleware.http_user_agent.os, middleware.level, middleware.message, middleware.method, middleware.middleware.nursery_free_after, middleware.module, middleware.msg, middleware.nursery_free_before, middleware.nursery_total, middleware.referer, middleware.referrer, middleware.req_time, middleware.request, middleware.request_method, middleware.request_path, middleware.request_status, middleware.response, middleware.response_code, middleware.retries, middleware.rsp, middleware.server, middleware.severity, middleware.src.geo.country, middleware.src.geo.isp, middleware.src_ip, middleware.src_ip.geo.city, middleware.srv_conn, middleware.srv_queue, middleware.status, middleware.subsystem, middleware.tc, middleware.tenure_free_after, middleware.tenure_free_before, middleware.thread, middleware.tt, middleware.tw, middleware.type, middleware.ua.browser, middleware.ua.device, middleware.ua.os, middleware.uri_query, middleware.uri_stem, middleware.url, middleware.zkmsg.zk_followers, middleware.zkmsg.zk_packets_received, middleware.zkmsg.zk_packets_sent, middleware.zkmsg.zk_server_state, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "middleware_microsoft_iis数据，编写查询语句实现如下分析场景", "output": "appname:middleware tag:iis (NOT middleware.uri_stem:*Date*) | stats avg(middleware.time_cost) as c1 by middleware.uri_query|sort by c1|eval c2 =format(\"%.1f\", c1)| limit 10"}
{"input": "核心交易成功率，按交易响应码统计数量最多的就是成功交易，占比保留小数点后 2 位。索引可用字段有：dlp.action, dlp.actionType, dlp.channelType, dlp.corporateType, dlp.details, dlp.dst_user, dlp.file_name, dlp.hostname, dlp.login_user, dlp.msg, dlp.policyNames, dlp.recv_mail, dlp.send_mail, dlp.service, dlp.severityType, dlp.src.geo.country, dlp.src_ip, dlp.src_user, dlp.user, dlp.workModeType, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "核心交易系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':ensemble |top 1 ensemble.retCode|eval rate=format(\"%.2f\",percent)+\"%\""}
{"input": "清算交易成功率，按交易响应码统计数量最多的就是成功交易，占比保留小数点后 1 位。索引可用字段有：dlp.action, dlp.actionType, dlp.channelType, dlp.corporateType, dlp.details, dlp.dst_user, dlp.file_name, dlp.hostname, dlp.login_user, dlp.msg, dlp.policyNames, dlp.recv_mail, dlp.send_mail, dlp.service, dlp.severityType, dlp.src.geo.country, dlp.src_ip, dlp.src_user, dlp.user, dlp.workModeType, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "清算系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':accounting |top 1 accounting.info2.retCode|eval rate=format(\"%.1f\",percent)+\"%\""}
{"input": "绿盟waf阻断率。索引可用字段有：waf.action, waf.attack_name, waf.attack_type, waf.bytes_in, waf.cost, waf.cve_id, waf.dst_city, waf.dst_domain, waf.dst_ip, waf.dst_latitude, waf.dst_longitude, waf.dst_port, waf.error_msg, waf.event_level, waf.event_log_level, waf.event_name, waf.event_type, waf.http_method, waf.http_refer, waf.is_truncated, waf.kv.Evt_level, waf.kv.Evt_type, waf.kv.event_name, waf.kv.http_method, waf.kv.http_refer, waf.kv.http_url, waf.kv.msg, waf.kv.owasp_top, waf.kv.pri, waf.kv.severity_level, waf.kv.status, waf.kv.type, waf.level, waf.log_category, waf.message, waf.message.action, waf.message.event, waf.message.method, waf.message.policy, waf.message.src_ip.geo.ip, waf.message.src_ip.geo.province, waf.message.src_port, waf.message.status, waf.message.threaten, waf.method, waf.module, waf.msg.act, waf.msg.cs, waf.msg.policy_id, waf.msg.src.geo.country, waf.policy_name, waf.proto, waf.referer, waf.risk_level, waf.severity, waf.src.geo.city, waf.src.geo.country, waf.src.geo.ip, waf.src.geo.isp, waf.src.geo.latitude, waf.src.geo.longitude, waf.src.geo.province, waf.src_ip, waf.src_port, waf.status, waf.status_code, waf.threat_level, waf.time, waf.ua_browser, waf.ua_device, waf.ua_os, waf.uri, waf.url, waf.user_agent.browser, waf.user_agent.os, waf.website_name, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "绿盟waf日志数据，编写查询语句实现如下分析场景", "output": "( appname:waf tag:nsfocus ) AND ( waf.log_category:waf_log_websec) | eval status= if(waf.action==\"Block\",1,0)|stats count() as sum_,sum(status) as block_|eval x=format(\"%.2f\", todouble(block_/sum_))"}
{"input": "点播节目信息列表_top10。索引可用字段有：stb_vixtel_sotthas.district, stb_vixtel_sotthas.downloadTime, stb_vixtel_sotthas.freezeTime, stb_vixtel_sotthas.geo.city, stb_vixtel_sotthas.geo.province, stb_vixtel_sotthas.hasQoE, stb_vixtel_sotthas.programName, stb_vixtel_sotthas.stbId, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒分析_数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_sotthas stb_vixtel_sotthas.hasQoE:>=0 stb_vixtel_sotthas.freezeTime:>=0\nstb_vixtel_sotthas.downloadTime:>=0 NOT stb_vixtel_sotthas.programName:未知\n|eval hasQoE=todouble(stb_vixtel_sotthas.hasQoE)\n|eval freezeTime=todouble(stb_vixtel_sotthas.freezeTime)\n|eval downloadTime=todouble(stb_vixtel_sotthas.downloadTime)\n|eval freezeRate=(freezeTime/1000000)/downloadTime\n|stats count(stb_vixtel_sotthas.programName) as playCount,avg(hasQoE) as avg_hasQoE,avg(freezeRate) as avg_freezeRate by stb_vixtel_sotthas.programName\n|eval avg_freezeRate_1=format(\"%.2f%%\",avg_freezeRate)\n|eval avg_hasQoE_1=format(\"%.2f\",avg_hasQoE)\n|limit 10"}
{"input": "索引可用字段有：rzytv.cs_uri_stem, rzytv.sc_status, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "IIS 服务器的访问失败次数占百分比", "output": "appname:rzytv tag:iis rzytv.sc_status:*|eval failed=if(rzytv.sc_status>399,1,0) |stats count() as count_all,sum(failed) as count_failed |eval pe=todouble(format(\"%.2f\",count_failed*100/count_all))"}
{"input": "安恒waf事件阻断率。索引可用字段有：waf.action, waf.attack_name, waf.attack_type, waf.bytes_in, waf.cost, waf.cve_id, waf.dst_city, waf.dst_domain, waf.dst_ip, waf.dst_latitude, waf.dst_longitude, waf.dst_port, waf.error_msg, waf.event_level, waf.event_log_level, waf.event_name, waf.event_type, waf.http_method, waf.http_refer, waf.is_truncated, waf.kv.Evt_level, waf.kv.Evt_type, waf.kv.event_name, waf.kv.http_method, waf.kv.http_refer, waf.kv.http_url, waf.kv.msg, waf.kv.owasp_top, waf.kv.pri, waf.kv.severity_level, waf.kv.status, waf.kv.type, waf.level, waf.log_category, waf.message, waf.message.action, waf.message.event, waf.message.method, waf.message.policy, waf.message.src_ip.geo.ip, waf.message.src_ip.geo.province, waf.message.src_port, waf.message.status, waf.message.threaten, waf.method, waf.module, waf.msg.act, waf.msg.cs, waf.msg.policy_id, waf.msg.src.geo.country, waf.policy_name, waf.proto, waf.referer, waf.risk_level, waf.severity, waf.src.geo.city, waf.src.geo.country, waf.src.geo.ip, waf.src.geo.isp, waf.src.geo.latitude, waf.src.geo.longitude, waf.src.geo.province, waf.src_ip, waf.src_port, waf.status, waf.status_code, waf.threat_level, waf.time, waf.ua_browser, waf.ua_device, waf.ua_os, waf.uri, waf.url, waf.user_agent.browser, waf.user_agent.os, waf.website_name, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "安恒waf日志数据，编写查询语句实现如下分析场景", "output": " appname:waf tag:dbappsecurity  | eval status= if(waf.message.action==\"阻断\",1,0)|stats count() as sum_,sum(status) as block_|eval x=format(\"%.2f\", todouble(block_/sum_))"}
{"input": "访问失败次数占比。", "instruction": "pf_tomcat数据，编写查询语句实现如下分析场景", "output": "appname:pf_tomcat tomcat.status:*|eval status=tolong(tomcat.status)|eval failed=if(status>399,1,0)|stats count() as count_all,sum(failed) as count_failed|eval pe=todouble(format(\"%.2f\",count_failed*100/count_all))"}
{"input": "访问失败次数占百分比。", "instruction": "pf_nginx数据，编写查询语句实现如下分析场景", "output": "appname:pf_nginx nginx.status:*|eval status=tolong(nginx.status)|eval failed=if(status>399,1,0)|stats count() as count_all,sum(failed) as count_failed|eval pe=todouble(format(\"%.2f\",count_failed*100/count_all))"}
{"input": "访问失败次数占百分比。索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Apache日志数据，编写查询语句实现如下分析场景", "output": "appname:apache tag:access middleware.status:*|eval failed=if(middleware.status>399,1,0)|stats count() as count_all,sum(failed) as count_failed|eval pe=todouble(format(\"%.2f\",count_failed*100/count_all))"}
{"input": "访问失败次数占百分比。", "instruction": "webLogic日志数据，编写查询语句实现如下分析场景", "output": "appname:weblogic tag:access middleware.request_status:*\n|eval failed=if(tolong(middleware.request_status)>399,1,0)\n|stats count() as count_all,sum(failed) as count_failed\n|eval pe=todouble(format(\"%.3f\",count_failed/count_all))"}
{"input": "阻断率。索引可用字段有：waf.action, waf.attack_name, waf.attack_type, waf.bytes_in, waf.cost, waf.cve_id, waf.dst_city, waf.dst_domain, waf.dst_ip, waf.dst_latitude, waf.dst_longitude, waf.dst_port, waf.error_msg, waf.event_level, waf.event_log_level, waf.event_name, waf.event_type, waf.http_method, waf.http_refer, waf.is_truncated, waf.kv.Evt_level, waf.kv.Evt_type, waf.kv.event_name, waf.kv.http_method, waf.kv.http_refer, waf.kv.http_url, waf.kv.msg, waf.kv.owasp_top, waf.kv.pri, waf.kv.severity_level, waf.kv.status, waf.kv.type, waf.level, waf.log_category, waf.message, waf.message.action, waf.message.event, waf.message.method, waf.message.policy, waf.message.src_ip.geo.ip, waf.message.src_ip.geo.province, waf.message.src_port, waf.message.status, waf.message.threaten, waf.method, waf.module, waf.msg.act, waf.msg.cs, waf.msg.policy_id, waf.msg.src.geo.country, waf.policy_name, waf.proto, waf.referer, waf.risk_level, waf.severity, waf.src.geo.city, waf.src.geo.country, waf.src.geo.ip, waf.src.geo.isp, waf.src.geo.latitude, waf.src.geo.longitude, waf.src.geo.province, waf.src_ip, waf.src_port, waf.status, waf.status_code, waf.threat_level, waf.time, waf.ua_browser, waf.ua_device, waf.ua_os, waf.uri, waf.url, waf.user_agent.browser, waf.user_agent.os, waf.website_name, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "WAF_长亭数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:chatin| eval status= if(waf.action==\"deny\",1,0)|stats count() as sum_,sum(status) as block_|eval x=format(\"%.2f\", todouble(block_/sum_))"}
{"input": "阻断率。索引可用字段有：waf.action, waf.attack_name, waf.attack_type, waf.bytes_in, waf.cost, waf.cve_id, waf.dst_city, waf.dst_domain, waf.dst_ip, waf.dst_latitude, waf.dst_longitude, waf.dst_port, waf.error_msg, waf.event_level, waf.event_log_level, waf.event_name, waf.event_type, waf.http_method, waf.http_refer, waf.is_truncated, waf.kv.Evt_level, waf.kv.Evt_type, waf.kv.event_name, waf.kv.http_method, waf.kv.http_refer, waf.kv.http_url, waf.kv.msg, waf.kv.owasp_top, waf.kv.pri, waf.kv.severity_level, waf.kv.status, waf.kv.type, waf.level, waf.log_category, waf.message, waf.message.action, waf.message.event, waf.message.method, waf.message.policy, waf.message.src_ip.geo.ip, waf.message.src_ip.geo.province, waf.message.src_port, waf.message.status, waf.message.threaten, waf.method, waf.module, waf.msg.act, waf.msg.cs, waf.msg.policy_id, waf.msg.src.geo.country, waf.policy_name, waf.proto, waf.referer, waf.risk_level, waf.severity, waf.src.geo.city, waf.src.geo.country, waf.src.geo.ip, waf.src.geo.isp, waf.src.geo.latitude, waf.src.geo.longitude, waf.src.geo.province, waf.src_ip, waf.src_port, waf.status, waf.status_code, waf.threat_level, waf.time, waf.ua_browser, waf.ua_device, waf.ua_os, waf.uri, waf.url, waf.user_agent.browser, waf.user_agent.os, waf.website_name, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "WAF_绿盟数据，编写查询语句实现如下分析场景", "output": "( appname:waf tag:nsfocus ) AND ( waf.log_category:waf_log_websec) | eval status= if(waf.action==\"Block\",1,0)|stats count() as sum_,sum(status) as block_|eval x=format(\"%.2f\", todouble(block_/sum_))"}
{"input": "安恒waf阻断率，保留小数点后 2 位。索引可用字段有：waf.action, waf.attack_name, waf.attack_type, waf.bytes_in, waf.cost, waf.cve_id, waf.dst_city, waf.dst_domain, waf.dst_ip, waf.dst_latitude, waf.dst_longitude, waf.dst_port, waf.error_msg, waf.event_level, waf.event_log_level, waf.event_name, waf.event_type, waf.http_method, waf.http_refer, waf.is_truncated, waf.kv.Evt_level, waf.kv.Evt_type, waf.kv.event_name, waf.kv.http_method, waf.kv.http_refer, waf.kv.http_url, waf.kv.msg, waf.kv.owasp_top, waf.kv.pri, waf.kv.severity_level, waf.kv.status, waf.kv.type, waf.level, waf.log_category, waf.message, waf.message.action, waf.message.event, waf.message.method, waf.message.policy, waf.message.src_ip.geo.ip, waf.message.src_ip.geo.province, waf.message.src_port, waf.message.status, waf.message.threaten, waf.method, waf.module, waf.msg.act, waf.msg.cs, waf.msg.policy_id, waf.msg.src.geo.country, waf.policy_name, waf.proto, waf.referer, waf.risk_level, waf.severity, waf.src.geo.city, waf.src.geo.country, waf.src.geo.ip, waf.src.geo.isp, waf.src.geo.latitude, waf.src.geo.longitude, waf.src.geo.province, waf.src_ip, waf.src_port, waf.status, waf.status_code, waf.threat_level, waf.time, waf.ua_browser, waf.ua_device, waf.ua_os, waf.uri, waf.url, waf.user_agent.browser, waf.user_agent.os, waf.website_name, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "安恒waf日志数据，编写查询语句实现如下分析场景", "output": "( appname:waf tag:dbappsecurity )  | eval status= if(waf.action==\"阻断\",1,0)|stats count() as sum_,sum(status) as block_|eval x=format(\"%.2f\", todouble(block_/sum_))"}
{"input": "安恒waf阻断率，用 waf.action 值为阻断的日志量除以总日志量计算。索引可用字段有：waf.action, waf.attack_name, waf.attack_type, waf.bytes_in, waf.cost, waf.cve_id, waf.dst_city, waf.dst_domain, waf.dst_ip, waf.dst_latitude, waf.dst_longitude, waf.dst_port, waf.error_msg, waf.event_level, waf.event_log_level, waf.event_name, waf.event_type, waf.http_method, waf.http_refer, waf.is_truncated, waf.kv.Evt_level, waf.kv.Evt_type, waf.kv.event_name, waf.kv.http_method, waf.kv.http_refer, waf.kv.http_url, waf.kv.msg, waf.kv.owasp_top, waf.kv.pri, waf.kv.severity_level, waf.kv.status, waf.kv.type, waf.level, waf.log_category, waf.message, waf.message.action, waf.message.event, waf.message.method, waf.message.policy, waf.message.src_ip.geo.ip, waf.message.src_ip.geo.province, waf.message.src_port, waf.message.status, waf.message.threaten, waf.method, waf.module, waf.msg.act, waf.msg.cs, waf.msg.policy_id, waf.msg.src.geo.country, waf.policy_name, waf.proto, waf.referer, waf.risk_level, waf.severity, waf.src.geo.city, waf.src.geo.country, waf.src.geo.ip, waf.src.geo.isp, waf.src.geo.latitude, waf.src.geo.longitude, waf.src.geo.province, waf.src_ip, waf.src_port, waf.status, waf.status_code, waf.threat_level, waf.time, waf.ua_browser, waf.ua_device, waf.ua_os, waf.uri, waf.url, waf.user_agent.browser, waf.user_agent.os, waf.website_name, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "安恒waf日志数据，编写查询语句实现如下分析场景", "output": "( appname:waf tag:dbappsecurity )  | eval status= if(waf.action==\"阻断\",1,0)|stats count() as sum_,sum(status) as block_|eval x=format(\"%.2f\", todouble(block_/sum_))"}
{"input": "访问失败次数占百分比。索引可用字段有：waf.action, waf.attack_name, waf.attack_type, waf.bytes_in, waf.cost, waf.cve_id, waf.dst_city, waf.dst_domain, waf.dst_ip, waf.dst_latitude, waf.dst_longitude, waf.dst_port, waf.error_msg, waf.event_level, waf.event_log_level, waf.event_name, waf.event_type, waf.http_method, waf.http_refer, waf.is_truncated, waf.kv.Evt_level, waf.kv.Evt_type, waf.kv.event_name, waf.kv.http_method, waf.kv.http_refer, waf.kv.http_url, waf.kv.msg, waf.kv.owasp_top, waf.kv.pri, waf.kv.severity_level, waf.kv.status, waf.kv.type, waf.level, waf.log_category, waf.message, waf.message.action, waf.message.event, waf.message.method, waf.message.policy, waf.message.src_ip.geo.ip, waf.message.src_ip.geo.province, waf.message.src_port, waf.message.status, waf.message.threaten, waf.method, waf.module, waf.msg.act, waf.msg.cs, waf.msg.policy_id, waf.msg.src.geo.country, waf.policy_name, waf.proto, waf.referer, waf.risk_level, waf.severity, waf.src.geo.city, waf.src.geo.country, waf.src.geo.ip, waf.src.geo.isp, waf.src.geo.latitude, waf.src.geo.longitude, waf.src.geo.province, waf.src_ip, waf.src_port, waf.status, waf.status_code, waf.threat_level, waf.time, waf.ua_browser, waf.ua_device, waf.ua_os, waf.uri, waf.url, waf.user_agent.browser, waf.user_agent.os, waf.website_name, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "瑞数waf数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:river waf.status_code:*|eval failed=if(waf.status_code>399,1,0)|stats count() as count_all,sum(failed) as count_failed|eval pe=todouble(format(\"%.2f\",count_failed*100/count_all))"}
{"input": "1. 从mps日志中提取更新业务主表的日志，搜索具体的 seqNo 号码,取corpstatus、tradebusistep和busistatus字段；2. 统计每个更新请求的次数cnt,以及更新时间timestamp、企业状态corpstatus、交易步骤tradebusistep和业务状态busistatus；3. 将timestamp字段重命名为reqTime和respTime,表示更新请求时间和响应时间；4. 赋值发送系统send为MPS和接收方recver为数据库 ；5. 赋值交易编码tranCode为\"更新业务主表\" ；6. 格式化更新描述desc,包含企业状态、交易步骤和业务状态；7. 提取结果字段。", "instruction": "根据如下要求编写 SPL 语句分析 mps 日志", "output": "appname:mps seqNo:${seqNo} \"更新业务主表\"| stats count() as cnt by timestamp,busistatus,corpstatus,tradebusistep| eval reqTime=timestamp| eval respTime=timestamp| eval send=\"MPS\"| eval recver=\"数据库\"| eval tranCode=\"更新业务主表\"| eval desc=format(\"corpstatus:%s_tradebusistep:%s_busistatus:%s\",corpstatus,tradebusistep,busistatus)| fields reqTime,respTime,tranCode,send,recver,desc"}
{"input": "质差top10。索引可用字段有：stb_vixtel_sotthas.district, stb_vixtel_sotthas.downloadTime, stb_vixtel_sotthas.freezeTime, stb_vixtel_sotthas.geo.city, stb_vixtel_sotthas.geo.province, stb_vixtel_sotthas.hasQoE, stb_vixtel_sotthas.programName, stb_vixtel_sotthas.stbId, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒分析_数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_sotthas stb_vixtel_sotthas.hasQoE:>=0 stb_vixtel_sotthas.freezeTime:>=0\nstb_vixtel_sotthas.downloadTime:>=0 NOT stb_vixtel_sotthas.programName:未知\n|eval hasQoE=todouble(stb_vixtel_sotthas.hasQoE)\n|eval freezeTime=todouble(stb_vixtel_sotthas.freezeTime)\n|eval downloadTime=todouble(stb_vixtel_sotthas.downloadTime)\n|eval freezeRate=(freezeTime/1000000)/downloadTime\n|stats count(stb_vixtel_sotthas.programName) as playCount,avg(hasQoE) as avg_hasQoE,avg(freezeRate) as avg_freezeRate by stb_vixtel_sotthas.programName\n|eval avg_freezeRate_1=format(\"%.2f%%\",avg_freezeRate)\n|eval avg_hasQoE_1=format(\"%.2f\",avg_hasQoE)\n|sort by +avg_hasQoE_1|limit 10"}
{"input": "卡顿占比_top10。索引可用字段有：stb_vixtel_sotthas.district, stb_vixtel_sotthas.downloadTime, stb_vixtel_sotthas.freezeTime, stb_vixtel_sotthas.geo.city, stb_vixtel_sotthas.geo.province, stb_vixtel_sotthas.hasQoE, stb_vixtel_sotthas.programName, stb_vixtel_sotthas.stbId, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒分析_数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_sotthas stb_vixtel_sotthas.hasQoE:>=0 stb_vixtel_sotthas.freezeTime:>=0\nstb_vixtel_sotthas.downloadTime:>=0 NOT stb_vixtel_sotthas.programName:未知\n|eval hasQoE=todouble(stb_vixtel_sotthas.hasQoE)\n|eval freezeTime=todouble(stb_vixtel_sotthas.freezeTime)\n|eval downloadTime=todouble(stb_vixtel_sotthas.downloadTime)\n|eval freezeRate=(freezeTime/1000000)/downloadTime\n|stats count(stb_vixtel_sotthas.programName) as playCount,avg(hasQoE) as avg_hasQoE,avg(freezeRate) as avg_freezeRate by stb_vixtel_sotthas.programName|sort by avg_freezeRate\n|eval avg_freezeRate_1=format(\"%.2f%%\",avg_freezeRate)\n|eval avg_hasQoE_1=format(\"%.2f\",avg_hasQoE)\n|limit 10"}
{"input": "直播频道信息列表top10。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒分析_数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0\nstb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知\n|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)\n|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)\n|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)\n|stats count(stb_vixtel_smpegts.programName) as playCount,avg(avgMos) as avg_avgMos,avg(tsLostRate) as avg_tsLostRate,avg(avgThroughput) as avg_avgThroughput by stb_vixtel_smpegts.programName\n|eval avg_avgThroughput_1=format(\"%.2f\",avg_avgThroughput/1000000)\n|eval avg_avgMos_1=format(\"%.2f\",avg_avgMos)\n|eval avg_tsLostRate_1=format(\"%.2f\",avg_tsLostRate)\n|sort by playCount|limit 10"}
{"input": "TS丢包率高top10。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒分析_数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0\nstb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知\n|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)\n|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)\n|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)\n|stats count(stb_vixtel_smpegts.programName) as playCount,avg(tsLostRate) as avg_tsLostRate by stb_vixtel_smpegts.programName\n|eval avg_tsLostRate_1=format(\"%.3f\",avg_tsLostRate)\n|sort by avg_tsLostRate_1|limit 10"}
{"input": "热门直播频道top10。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒日志分析_实时数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0.000\nstb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知\n|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)\n|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)\n|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)\n|stats count(stb_vixtel_smpegts.programName) as playCount,avg(avgMos) as avg_avgMos,avg(tsLostRate) as avg_tsLostRate,avg(avgThroughput) as avg_avgThroughput by stb_vixtel_smpegts.programName\n|eval avg_avgThroughput_1=format(\"%.2f\",avg_avgThroughput/1000000)\n|eval avg_avgMos_1=format(\"%.2f\",avg_avgMos)\n|eval avg_tsLostRate_1=format(\"%.2f\",avg_tsLostRate)\n|sort by playCount|limit 10"}
{"input": "直播频道信息列表top10。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒日志分析_实时数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0.000\nstb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知\n|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)\n|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)\n|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)\n|eval freezeTime=todouble(stb_vixtel_smpegts.freezeTime)\n|eval downloadTime=todouble(stb_vixtel_smpegts.downloadTime)\n|eval liveFreezeRate=todouble((freezeTime/1000000)/downloadTime)\n|stats count(stb_vixtel_smpegts.programName) as playCount,avg(avgMos) as avg_avgMos,avg(tsLostRate) as avg_tsLostRate,avg(avgThroughput) as avg_avgThroughput,avg(liveFreezeRate) as avg_liveFreezeRate by stb_vixtel_smpegts.programName\n|eval avg_avgThroughput_1=format(\"%.2f\",avg_avgThroughput/1000000)\n|eval avg_avgMos_1=format(\"%.2f\",avg_avgMos)\n|eval avg_tsLostRate_1=format(\"%.2f\",avg_tsLostRate)\n|eval avg_liveFreezeRate_1=format(\"%.3f\",avg_liveFreezeRate)\n|sort by playCount|limit 10"}
{"input": "直播花屏占比高频道top10。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒日志分析_实时数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0.000\nstb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知\n|eval freezeTime=todouble(stb_vixtel_smpegts.freezeTime)\n|eval downloadTime=todouble(stb_vixtel_smpegts.downloadTime)\n|eval liveFreezeRate=todouble((freezeTime/1000000)/downloadTime)\n|stats count(stb_vixtel_smpegts.programName) as playCount,avg(liveFreezeRate) as avg_liveFreezeRate by stb_vixtel_smpegts.programName\n|eval avg_liveFreezeRate_1=format(\"%.3f\",avg_liveFreezeRate)\n|sort by avg_liveFreezeRate_1|limit 10"}
{"input": "直播节目信息列表top10。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒日志分析_实时数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0.000\nstb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知\n|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)\n|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)\n|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)\n|eval freezeTime=todouble(stb_vixtel_smpegts.freezeTime)\n|eval downloadTime=todouble(stb_vixtel_smpegts.downloadTime)\n|eval liveFreezeRate=todouble((freezeTime/1000000)/downloadTime)\n|stats count(stb_vixtel_smpegts.programName) as playCount,avg(avgMos) as avg_avgMos,avg(tsLostRate) as avg_tsLostRate,avg(avgThroughput) as avg_avgThroughput,avg(liveFreezeRate) as avg_liveFreezeRate by stb_vixtel_smpegts.programName\n|eval avg_avgThroughput_1=format(\"%.2f\",avg_avgThroughput/1000000)\n|eval avg_avgMos_1=format(\"%.2f\",avg_avgMos)\n|eval avg_tsLostRate_1=format(\"%.2f\",avg_tsLostRate)\n|eval avg_liveFreezeRate_1=format(\"%.3f\",avg_liveFreezeRate)\n|sort by playCount|limit 10"}
{"input": "点播节目信息列表top10。索引可用字段有：stb_vixtel_sotthas.district, stb_vixtel_sotthas.downloadTime, stb_vixtel_sotthas.freezeTime, stb_vixtel_sotthas.geo.city, stb_vixtel_sotthas.geo.province, stb_vixtel_sotthas.hasQoE, stb_vixtel_sotthas.programName, stb_vixtel_sotthas.stbId, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒日志分析_实时数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_sotthas stb_vixtel_sotthas.hasQoE:>=0 stb_vixtel_sotthas.freezeTime:>=0\nstb_vixtel_sotthas.downloadTime:>=0 NOT stb_vixtel_sotthas.programName:未知\n|eval hasQoE=todouble(stb_vixtel_sotthas.hasQoE)\n|eval freezeTime=todouble(stb_vixtel_sotthas.freezeTime)\n|eval downloadTime=todouble(stb_vixtel_sotthas.downloadTime)\n|eval freezeRate=(freezeTime/1000000)/downloadTime\n|stats count(stb_vixtel_sotthas.programName) as playCount,avg(hasQoE) as avg_hasQoE,avg(freezeRate) as avg_freezeRate by stb_vixtel_sotthas.programName\n|eval avg_freezeRate_1=format(\"%.2f\",avg_freezeRate)\n|eval avg_hasQoE_1=format(\"%.2f\",avg_hasQoE)\n|sort by playCount|limit 10"}
{"input": "用户体验质差top10。索引可用字段有：stb_vixtel_sotthas.district, stb_vixtel_sotthas.downloadTime, stb_vixtel_sotthas.freezeTime, stb_vixtel_sotthas.geo.city, stb_vixtel_sotthas.geo.province, stb_vixtel_sotthas.hasQoE, stb_vixtel_sotthas.programName, stb_vixtel_sotthas.stbId, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒日志分析_实时数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_sotthas stb_vixtel_sotthas.hasQoE:>=0 stb_vixtel_sotthas.freezeTime:>=0\nstb_vixtel_sotthas.downloadTime:>=0 NOT stb_vixtel_sotthas.programName:未知\n|eval hasQoE=todouble(stb_vixtel_sotthas.hasQoE)\n|eval freezeTime=todouble(stb_vixtel_sotthas.freezeTime)\n|eval downloadTime=todouble(stb_vixtel_sotthas.downloadTime)\n|eval freezeRate=(freezeTime/1000000)/downloadTime\n|stats count(stb_vixtel_sotthas.programName) as playCount,avg(hasQoE) as avg_hasQoE,avg(freezeRate) as avg_freezeRate by stb_vixtel_sotthas.programName\n|eval avg_freezeRate_1=format(\"%.2f%%\",avg_freezeRate)\n|eval avg_hasQoE_1=format(\"%.2f\",avg_hasQoE)\n|sort by +avg_hasQoE_1|limit 10"}
{"input": "卡顿占比top10。索引可用字段有：stb_vixtel_sotthas.district, stb_vixtel_sotthas.downloadTime, stb_vixtel_sotthas.freezeTime, stb_vixtel_sotthas.geo.city, stb_vixtel_sotthas.geo.province, stb_vixtel_sotthas.hasQoE, stb_vixtel_sotthas.programName, stb_vixtel_sotthas.stbId, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒日志分析_实时数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_sotthas stb_vixtel_sotthas.hasQoE:>=0 stb_vixtel_sotthas.freezeTime:>=0\nstb_vixtel_sotthas.downloadTime:>=0 NOT stb_vixtel_sotthas.programName:未知\n|eval hasQoE=todouble(stb_vixtel_sotthas.hasQoE)\n|eval freezeTime=todouble(stb_vixtel_sotthas.freezeTime)\n|eval downloadTime=todouble(stb_vixtel_sotthas.downloadTime)\n|eval freezeRate=(freezeTime/1000000)/downloadTime\n|stats count(stb_vixtel_sotthas.programName) as playCount,avg(hasQoE) as avg_hasQoE,avg(freezeRate) as avg_freezeRate by stb_vixtel_sotthas.programName|sort by avg_freezeRate\n|eval avg_freezeRate_1=format(\"%.2f%%\",avg_freezeRate)\n|eval avg_hasQoE_1=format(\"%.2f\",avg_hasQoE)\n|limit 10"}
{"input": "", "instruction": "我想问的是，有哪些应用在浪费用户的时间上有所改进吗？可以列举几个例子吗？", "output": "_index:metrics access_control.metrics_name:ShoppingFinancingSocialTime|stats sum(onlinetime) as sumtime by access_control.appname|eval min=format(\"%.1f\",sumtime/60)|sort by sumtime|limit 20"}
{"input": "索引可用字段有：middleware.Error_info, middleware.System_errinfo, middleware.System_errno, middleware.actconn, middleware.action, middleware.backend_queue, middleware.beconn, middleware.clientip, middleware.desc, middleware.dst_ip, middleware.error_level, middleware.error_no, middleware.event_name, middleware.event_type, middleware.feconn, middleware.func_no, middleware.geo.city, middleware.geo.isp, middleware.geo.province, middleware.http_hostname, middleware.http_method, middleware.http_referer, middleware.http_user_agent.browser, middleware.http_user_agent.os, middleware.level, middleware.message, middleware.method, middleware.middleware.nursery_free_after, middleware.module, middleware.msg, middleware.nursery_free_before, middleware.nursery_total, middleware.referer, middleware.referrer, middleware.req_time, middleware.request, middleware.request_method, middleware.request_path, middleware.request_status, middleware.response, middleware.response_code, middleware.retries, middleware.rsp, middleware.server, middleware.severity, middleware.src.geo.country, middleware.src.geo.isp, middleware.src_ip, middleware.src_ip.geo.city, middleware.srv_conn, middleware.srv_queue, middleware.status, middleware.subsystem, middleware.tc, middleware.tenure_free_after, middleware.tenure_free_before, middleware.thread, middleware.tt, middleware.tw, middleware.type, middleware.ua.browser, middleware.ua.device, middleware.ua.os, middleware.uri_query, middleware.uri_stem, middleware.url, middleware.zkmsg.zk_followers, middleware.zkmsg.zk_packets_received, middleware.zkmsg.zk_packets_sent, middleware.zkmsg.zk_server_state, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，哪个 URL 执行时间最长？并只显示前十名的结果。", "output": "appname:middleware tag:iis (NOT middleware.uri_stem:*Date*) | stats avg(middleware.time_cost) as c1 by middleware.uri_stem|sort by c1|eval c2 =format(\"%.1f\", c1)| limit 10"}
{"input": "索引可用字段有：waf.action, waf.attack_name, waf.attack_type, waf.bytes_in, waf.cost, waf.cve_id, waf.dst_city, waf.dst_domain, waf.dst_ip, waf.dst_latitude, waf.dst_longitude, waf.dst_port, waf.error_msg, waf.event_level, waf.event_log_level, waf.event_name, waf.event_type, waf.http_method, waf.http_refer, waf.is_truncated, waf.kv.Evt_level, waf.kv.Evt_type, waf.kv.event_name, waf.kv.http_method, waf.kv.http_refer, waf.kv.http_url, waf.kv.msg, waf.kv.owasp_top, waf.kv.pri, waf.kv.severity_level, waf.kv.status, waf.kv.type, waf.level, waf.log_category, waf.message, waf.message.action, waf.message.event, waf.message.method, waf.message.policy, waf.message.src_ip.geo.ip, waf.message.src_ip.geo.province, waf.message.src_port, waf.message.status, waf.message.threaten, waf.method, waf.module, waf.msg.act, waf.msg.cs, waf.msg.policy_id, waf.msg.src.geo.country, waf.policy_name, waf.proto, waf.referer, waf.risk_level, waf.severity, waf.src.geo.city, waf.src.geo.country, waf.src.geo.ip, waf.src.geo.isp, waf.src.geo.latitude, waf.src.geo.longitude, waf.src.geo.province, waf.src_ip, waf.src_port, waf.status, waf.status_code, waf.threat_level, waf.time, waf.ua_browser, waf.ua_device, waf.ua_os, waf.uri, waf.url, waf.user_agent.browser, waf.user_agent.os, waf.website_name, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，你做了哪些数据库安全审计呢？", "output": " appname:waf tag:dbappsecurity  | eval status= if(waf.message.action==\"阻断\",1,0)|stats count() as sum_,sum(status) as block_|eval x=format(\"%.2f\", todouble(block_/sum_))"}
{"input": "索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想询问的是内某台 STB（Set-top box）的视频质量如何：1. 查询该 STB 在上行链路上的平均码率、丢包率和播放时间等指标；2. 根据这些指标计算出相应的视频质量分数（如 MOS 或 SSIM），并将其与其他流进行比较；3. 对比不同程序的质量分数和观众数量，从而得出最受欢迎的电视节目或直播间。", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0stb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)|stats count(stb_vixtel_smpegts.programName) as playCount,avg(avgMos) as avg_avgMos,avg(tsLostRate) as avg_tsLostRate,avg(avgThroughput) as avg_avgThroughput by stb_vixtel_smpegts.programName|eval avg_avgThroughput_1=format(\"%.2f\",avg_avgThroughput/1000000)|eval avg_avgMos_1=format(\"%.2f\",avg_avgMos)|eval avg_tsLostRate_1=format(\"%.2f\",avg_tsLostRate)|sort by playCount|limit 10"}
{"input": "索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "哪些 TV Shows 和 Livestreams 是由 [STB] 用户观看的，它们的视频质量如何呢？", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0stb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)|stats count(stb_vixtel_smpegts.programName) as playCount,avg(avgMos) as avg_avgMos,avg(tsLostRate) as avg_tsLostRate,avg(avgThroughput) as avg_avgThroughput by stb_vixtel_smpegts.programName|eval avg_avgThroughput_1=format(\"%.2f\",avg_avgThroughput/1000000)|eval avg_avgMos_1=format(\"%.2f\",avg_avgMos)|eval avg_tsLostRate_1=format(\"%.2f\",avg_tsLostRate)|sort by playCount|limit 10"}
{"input": "索引可用字段有：stb_vixtel_sotthas.district, stb_vixtel_sotthas.downloadTime, stb_vixtel_sotthas.freezeTime, stb_vixtel_sotthas.geo.city, stb_vixtel_sotthas.geo.province, stb_vixtel_sotthas.hasQoE, stb_vixtel_sotthas.programName, stb_vixtel_sotthas.stbId, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，有没有哪些直播间出现过流畅度很差的情况呢？你能列出前十个吗？", "output": "appname:stb_vixtel_sotthas stb_vixtel_sotthas.hasQoE:>=0 stb_vixtel_sotthas.freezeTime:>=0stb_vixtel_sotthas.downloadTime:>=0 NOT stb_vixtel_sotthas.programName:未知|eval hasQoE=todouble(stb_vixtel_sotthas.hasQoE)|eval freezeTime=todouble(stb_vixtel_sotthas.freezeTime)|eval downloadTime=todouble(stb_vixtel_sotthas.downloadTime)|eval freezeRate=(freezeTime/1000000)/downloadTime|stats count(stb_vixtel_sotthas.programName) as playCount,avg(hasQoE) as avg_hasQoE,avg(freezeRate) as avg_freezeRate by stb_vixtel_sotthas.programName|eval avg_freezeRate_1=format(\"%.2f\",avg_freezeRate)|eval avg_hasQoE_1=format(\"%.2f\",avg_hasQoE)|sort by playCount|limit 10"}
{"input": "索引可用字段有：stb_vixtel_sotthas.district, stb_vixtel_sotthas.downloadTime, stb_vixtel_sotthas.freezeTime, stb_vixtel_sotthas.geo.city, stb_vixtel_sotthas.geo.province, stb_vixtel_sotthas.hasQoE, stb_vixtel_sotthas.programName, stb_vixtel_sotthas.stbId, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想知道最近一段时间的视频在线播放和流媒体缓存的时间以及总共的流量消耗情况。请帮忙生成相应的查询语句。", "output": "appname:stb_vixtel_sotthas (stb_vixtel_sotthas.freezeTime:>0 AND stb_vixtel_sotthas.downloadTime:>0)|eval freezeTime=tolong(stb_vixtel_sotthas.freezeTime)|eval downloadTime=tolong(stb_vixtel_sotthas.downloadTime)| stats sum(freezeTime) as freezeTime1,sum(downloadTime) as downloadTime1|eval vodFreezeRate=format(\"%.3f%%\",(freezeTime1/1000000)/downloadTime1)|fields vodFreezeRate"}
{"input": "索引可用字段有：switchperf.devip, switchperf.ifindex, switchperf.type, switchperf.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道某台服务器的网络流量情况，包括总共发送和接收的数据量以及平均处理时间。请帮我编写相应的日志易查询语句。", "output": "appname:switchperf AND switchperf.type:ifInOctets | stats max(switchperf.value) as _maxv,min(switchperf.value) as _minv,max(timestamp) as _maxt,min(timestamp) as _mint by switchperf.devip,switchperf.type,switchperf.ifindex | eval v=_maxv-_minv | eval t=_maxt-_mint | stats sum(v) as totalInOctets,avg(t) as timer | eval MBps=format(\"%.2fMB\",totalInOctets/timer/1000)"}
{"input": "索引可用字段有：switchperf.devip, switchperf.ifindex, switchperf.type, switchperf.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问如何使用日志易SPL（Search Processing Language）编写搜索查询。在这个示例中，我们首先从指定的索引和数据源类型检索符合条件的数据。然后，我们使用 `stats` 命令计算每个设备 IP、接口类型和接口索引下的最大值、最小值、最早时间和最新时间以及通过量和处理时间等统计信息。最后，我们将结果转换为 Mbps 并进行格式化显示。", "output": "appname:switchperf AND switchperf.type:ifOutOctets | stats max(switchperf.value) as _maxv,min(switchperf.value) as _minv,max(timestamp) as _maxt,min(timestamp) as _mint by switchperf.devip,switchperf.type,switchperf.ifindex | eval v=_maxv-_minv | eval t=_maxt-_mint | stats sum(v) as totalInOctets,avg(t) as timer | eval MBps=format(\"%.2fMB\",totalInOctets/timer/1000)"}
{"input": "索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想跟踪用户在线时长和访问频率，并找出其中最活跃的前 20 个应用。", "output": "_index:metrics access_control.metrics_name:mobiletime|stats sum(onlinetime) as sumtime by access_control.appname|eval min=format(\"%.1f\",sumtime/60)|sort by sumtime|limit 20"}
{"input": "索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想跟踪网站的访问时间和用户数量，并按总时长排序后显示前 20 个最长的访问页面。", "output": "_index:metrics access_control.metrics_name:webtime|stats sum(onlinetime) as sumtime by access_control.appname|eval min=format(\"%.1f\",sumtime/60)|sort by sumtime|limit 20"}
{"input": "", "instruction": "我想问的是 NTFS 文件系统的错误信息中有没有类似于 \"AAAAAAAAAA\" 的字符串出现过。如果有的话，失败次数和总共执行的次数分别是多少？并且计算出失败率是多少吗？最后输出一个字符串表示这个文件的健康程度（比如说“98.34%”）吗？", "output": "appname:ntfs tag:abs ntfs.ErrorCode:* | eval fail=if(ntfs.ErrorCode==\"AAAAAAAAAA\",0,1) | stats sum(fail) as _fail,count() as _sum | eval health=format(\"%.2f%%\",(_sum-_fail)*100/_sum)"}
{"input": "", "instruction": "我想要知道主机的CPU使用率最高的是哪台主机，请帮我把这些数据汇总一下。", "output": "appname:vsphere tag:vsphere source:HostSystem* |dedup 1 host |eval cpu_percent=todouble(format(\"%.2f\",cpu.used.mhz/cpu.total.mhz)) |stats max(cpu_percent) as max_"}
{"input": "", "instruction": "我的问题可能涉及到数据存储和虚拟化平台 vSphere 中关于性能监控的一些问题。我希望了解某一特定应用（appname）在某个数据存储设备（source：Datastore*）上的磁盘空间使用情况以及该设备上所有磁盘的最大可用容量百分比（max(capacity.used.pct)）。然后将这些信息以表格形式呈现并计算出总体平均利用率。", "output": "appname:vsphere tag:vsphere source:Datastore* |stats max(capacity.used.pct) as max_ |eval max_=todouble(format(\"%.2f\",max_/100))"}
{"input": "", "instruction": "我想问的是，在 vSphere 中，哪些虚拟机的存储空间占比最高？你可以把这些信息打印出来吗？如果可以的话，请按名称排序并返回前三名。", "output": "appname:vsphere tag:vsphere source:VirtualMachine* |dedup 1 name |eval storage_provisioned_MB=tolong(format(\"%.0f\",storage.provisioned.bytes/1024/1024)) |eval storage_used_MB=tolong(format(\"%.0f\",storage.used.bytes/1024/1024)) |eval storage_percent=todouble(format(\"%.2f\",storage_used_MB/storage_provisioned_MB)) |stats max(storage_percent) as max_"}
{"input": "", "instruction": "我想问有关 vSphere 应用的内存使用情况的信息，是这样吗？如果我的答案不完全符合你的需求，请您再次提问。", "output": "appname:vsphere tag:vsphere source:VirtualMachine* |dedup 1 name |eval memory_total_MB=tolong(format(\"%.0f\",memory.total.guest.bytes/1024/1024)) |eval memory_free_MB=tolong(format(\"%.0f\",memory.free.guest.bytes/1024/1024)) |eval memory_used_MB=tolong(memory_total_MB-memory_free_MB) |eval memory_percent=format(\"%.0f%%\",(memory_used_MB/memory_total_MB)*100) "}
{"input": "", "instruction": "我想要知道主机的内存使用情况，以及它占总内存的比例最高的是哪台主机。请帮我编写相应的 SPL 查询。", "output": "appname:vsphere tag:vsphere source:HostSystem* |dedup 1 host |eval memory_total_GB=tolong(format(\"%.0f\",memory.total.bytes/1024/1024/1024)) |eval memory_free_GB=tolong(format(\"%.0f\",memory.free.bytes/1024/1024/1024)) |eval memory_used_GB=tolong(memory_total_GB-memory_free_GB) |eval memory_percent=todouble(format(\"%.2f\",memory_used_GB/memory_total_GB)) |stats max(memory_percent) as max_"}
{"input": "", "instruction": "我想问如何编写日志易查询以获取 vSphere 中虚拟机的存储信息吗？", "output": "appname:vsphere tag:vsphere source:VirtualMachine* |dedup 1 name |eval storage_provisioned_MB=tolong(format(\"%.0f\",storage.provisioned.bytes/1024/1024)) |eval storage_used_MB=tolong(format(\"%.0f\",storage.used.bytes/1024/1024)) |eval storage_free_MB=tolong(storage_provisioned_MB-storage_used_MB) |eval storage_percent=format(\"%.0f%%\",(storage_used_MB/storage_provisioned_MB)*100) "}
{"input": "索引可用字段有：gc.beforeEden, gc.invocations, gc.stoptime, gc.totalnewgeneration, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "应用名称为“GC”，标签中包含“ibm_was”和“middleware.type”。通过对该应用的性能数据进行统计分析并将结果转换为每千美元的费用来获得答案。", "output": "appname:gc tag:ibm_was  middleware.type:global |stats avg(middleware.cost) as avg_cost|eval aaa=avg_cost/1000| eval avgtime=format(\"%.2f\",aaa)"}
{"input": "", "instruction": "我想要知道 LingCloud 在一段时间内的吞吐量情况和峰值情况。", "output": "appname:lingcloud AND tag:inst_kpi_all | stats sum(lingcloud.data.totalRate) as cnt,max(timestamp) as max_,min(timestamp) as min_ | eval time=(max_-min_)/1000|eval avg_=format(\"%.2fMbps\",cnt/1024/1024/time)"}
{"input": "", "instruction": "我想要知道 LingCloud 在最近一段时间内的网络吞吐量最大值是多少 Gbps。请告诉我这个数字。", "output": "appname:lingcloud AND tag:inst_kpi_all | stats max(lingcloud.data.peakBytesRate) as cnt|eval max_=format(\"%.2fGbps\",cnt/1024/1024/1024)"}
{"input": "", "instruction": "我想要知道 LingCloud 在运行过程中，TCP 连接的成功和失败数量有多少，以及这两种情况中哪一种更常见。", "output": "appname:lingcloud AND tag:inst_kpi_all | stats sum(lingcloud.data.successfulTcpConnNum) as cnt_succ,sum(lingcloud.data.failedTcpConnNum) as cnt_fail|eval rate=format(\"%.2f%%\",cnt_succ*100/(cnt_succ+cnt_fail))"}
{"input": "", "instruction": "我想要知道 LingCloud 服务的性能指标情况，包括吞吐量、响应时间等信息。", "output": "appname:lingcloud AND tag:inst_kpi_all | stats sum(lingcloud.data.totalPktsRate) as cnt,max(timestamp) as max_,min(timestamp) as min_ | eval time=(max_-min_)/1000|eval avg_=format(\"%.2fpps\",cnt/time)"}
{"input": "", "instruction": "我想问以下信息：其中`appname:lingcloud `表示要搜索的应用名为`lingcloud`，`tag:kpi_list_all|stats avg(lingcloud.totalbytes)`表示统计所有带有`kpi_list_all`标签且字段名为`lingcloud.totalbytes`的指标的平均值，最后一部分`eval avg_=format(\"%.2fGb\",cnt/1024/1024/1024)`表示将结果四舍五入到小数点后两位并以`GB`作为单位显示。", "output": "appname:lingcloud AND tag:kpi_list_all|stats avg(lingcloud.totalbytes) as cnt|eval avg_=format(\"%.2fGb\",cnt/1024/1024/1024)"}
{"input": "", "instruction": "我在询问的是最近一段时间内应用名为“lingcloud”且包含标签“kpi_list_all|stats sum(lingcloud.successfultcpconnnum) as cnt_succ,sum(failedtcpconnnum) as cnt_fail|eval r=cnt_succ*100/(cnt_succ+cnt_fail)|eval rate=format('%.2f%%',r)”的服务实例的成功和失败TCP连接数量之比以及该比例的精确到小数点后两位的百分制表示。", "output": "appname:lingcloud AND tag:kpi_list_all|stats sum(lingcloud.successfultcpconnnum) as cnt_succ,sum(failedtcpconnnum) as cnt_fail|eval r=cnt_succ*100/(cnt_succ+cnt_fail)|eval rate=format(\"%.2f%%\",r)"}
{"input": "", "instruction": "我想要知道 LingCloud 服务的平均连接时间", "output": "appname:lingcloud AND tag:kpi_list_all|stats avg(lingcloud.conntime) as cnt|eval avg_=format(\"%.2fus\",cnt)"}
{"input": "", "instruction": "我想要知道 LingCloud 在处理事务时平均需要花费多长时间。你可以告诉我这个统计吗？我还想知道这个结果有多精确。你可以给出这个数字的误差范围吗？", "output": "appname:lingcloud AND tag:kpi_list_all|stats avg(lingcloud.transresptime) as cnt|eval avg_=format(\"%.2fus\",cnt)"}
{"input": "索引可用字段有：waf.action, waf.attack_name, waf.attack_type, waf.bytes_in, waf.cost, waf.cve_id, waf.dst_city, waf.dst_domain, waf.dst_ip, waf.dst_latitude, waf.dst_longitude, waf.dst_port, waf.error_msg, waf.event_level, waf.event_log_level, waf.event_name, waf.event_type, waf.http_method, waf.http_refer, waf.is_truncated, waf.kv.Evt_level, waf.kv.Evt_type, waf.kv.event_name, waf.kv.http_method, waf.kv.http_refer, waf.kv.http_url, waf.kv.msg, waf.kv.owasp_top, waf.kv.pri, waf.kv.severity_level, waf.kv.status, waf.kv.type, waf.level, waf.log_category, waf.message, waf.message.action, waf.message.event, waf.message.method, waf.message.policy, waf.message.src_ip.geo.ip, waf.message.src_ip.geo.province, waf.message.src_port, waf.message.status, waf.message.threaten, waf.method, waf.module, waf.msg.act, waf.msg.cs, waf.msg.policy_id, waf.msg.src.geo.country, waf.policy_name, waf.proto, waf.referer, waf.risk_level, waf.severity, waf.src.geo.city, waf.src.geo.country, waf.src.geo.ip, waf.src.geo.isp, waf.src.geo.latitude, waf.src.geo.longitude, waf.src.geo.province, waf.src_ip, waf.src_port, waf.status, waf.status_code, waf.threat_level, waf.time, waf.ua_browser, waf.ua_device, waf.ua_os, waf.uri, waf.url, waf.user_agent.browser, waf.user_agent.os, waf.website_name, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道 MySQL 连接器的平均响应时间，并以毫秒为单位显示结果。请告诉我最近内有哪些应用使用了这个连接器，以及他们的平均响应时间是多少。", "output": "* AND  'appname':connector |stats avg(connector.Service_execute_time) as avg_|eval avg_=format(\"%.2f\",avg_)|eval aa=avg_+\"毫秒\""}
{"input": "索引可用字段有：waf.action, waf.attack_name, waf.attack_type, waf.bytes_in, waf.cost, waf.cve_id, waf.dst_city, waf.dst_domain, waf.dst_ip, waf.dst_latitude, waf.dst_longitude, waf.dst_port, waf.error_msg, waf.event_level, waf.event_log_level, waf.event_name, waf.event_type, waf.http_method, waf.http_refer, waf.is_truncated, waf.kv.Evt_level, waf.kv.Evt_type, waf.kv.event_name, waf.kv.http_method, waf.kv.http_refer, waf.kv.http_url, waf.kv.msg, waf.kv.owasp_top, waf.kv.pri, waf.kv.severity_level, waf.kv.status, waf.kv.type, waf.level, waf.log_category, waf.message, waf.message.action, waf.message.event, waf.message.method, waf.message.policy, waf.message.src_ip.geo.ip, waf.message.src_ip.geo.province, waf.message.src_port, waf.message.status, waf.message.threaten, waf.method, waf.module, waf.msg.act, waf.msg.cs, waf.msg.policy_id, waf.msg.src.geo.country, waf.policy_name, waf.proto, waf.referer, waf.risk_level, waf.severity, waf.src.geo.city, waf.src.geo.country, waf.src.geo.ip, waf.src.geo.isp, waf.src.geo.latitude, waf.src.geo.longitude, waf.src.geo.province, waf.src_ip, waf.src_port, waf.status, waf.status_code, waf.threat_level, waf.time, waf.ua_browser, waf.ua_device, waf.ua_os, waf.uri, waf.url, waf.user_agent.browser, waf.user_agent.os, waf.website_name, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "应用“Accounting”在执行过程中所用的平均时间（单位为毫秒）。", "output": "* AND  'appname':accounting accounting.excute_time:*|eval excute_time=tolong(accounting.excute_time)|stats avg(excute_time) as avg_|eval avg_=format(\"%.2f\",avg_)|eval aa=avg_+\"毫秒\""}
{"input": "", "instruction": "查询名为`cdn_log`的应用中的CDN请求数据，并按字节数对其进行排序，计算出总流量并将其格式化为带有千兆位符号的字符串，最后显示前十个IP地址和相应的流量。", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 10 "}
{"input": "", "instruction": "分析访问 CDN 服务的用户和他们下载的数据量。首先从名为 `cdn_log` 的应用中选择需要关注的信息，包括请求长度、CDN 服务器 IP 地址等信息；然后使用 stats 命令计算每个 CDN 服务器 IP 地址的总请求长度，并将其命名为 `bytes`；接着使用 sort 命令对结果进行排序，以便可以查看数据量最大的前 10 个记录；最后使用 eval 命令将字节大小转换为人类可读格式，并将结果保存在特定的字段中。", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 10 "}
{"input": "", "instruction": "我想问以下信息：> appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr | sort by bytes | eval traffic = format(\"%.2f Mb\", bytes / 1024 / 1024) | eval bytes = todouble(traffic) | fields cdn.remote_addr, traffic | limit 20这意味着寻找CDN服务器的IP地址和下载量（以兆字节为单位）之间的关系图表，并仅显示前20个最高下载量的IP地址。", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 20 "}
{"input": "", "instruction": "统计CDN服务器上的请求长度并按总字节进行排序，同时将结果转换为人类可读格式并显示前20个IP地址和相应的流量信息。", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 20 "}
{"input": "", "instruction": "我想问以下信息：从CDN服务器的访问日志中获取最近20个IP地址和下载流量（以兆字节为单位）的信息。它首先通过`appname:cdn_log`过滤出所有与内容分发网络有关的日志记录；然后使用`stats`子句计算每个远程 IP 地址的总下载流量并将其存储在变量`bytes`中；接着，使用`sort by bytes`对结果进行排序；最后，使用`eval`子句将流量转换为人类可读格式，并将结果存储在新列`traffic`中。最终，`fields`子句只选择包含IP地址和流量的字段，并限制结果数量为20条。", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 20 "}
{"input": "", "instruction": "我的问题可能涉及到CDN（内容分发网络）的使用情况和流量统计。我正在寻找从某些IP地址发送过来的最大下载量的文件或目录。", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 100 "}
{"input": "", "instruction": "请生成最近一小时的 CDN 请求流量排名前十名的 IP 和总流量。", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 100 "}
{"input": "", "instruction": "从CDN服务器上检索最近五十次访问量最大的IP地址和流量信息。它首先指定要分析的数据源为`cdn_log`，然后使用stats子句计算每个CDN节点的请求长度总和并将其存储在名为`bytes`的字段中。接着，它使用排序子句按字节大小对结果进行排序，并使用eval子句将流量转换为合适的格式，最后使用fields子句选择需要返回的列，包括CDN服务器 IP 地址和流量。", "output": "appname:cdn_log|stats sum(cdn.request_length) as bytes by cdn.remote_addr |sort by bytes|eval traffic=format(\"%.2fM\",bytes/1024/1024) |eval bytes=todouble(traffic)|fields cdn.remote_addr, traffic|limit 50 "}
{"input": "索引可用字段有：middleware.Error_info, middleware.System_errinfo, middleware.System_errno, middleware.actconn, middleware.action, middleware.backend_queue, middleware.beconn, middleware.clientip, middleware.desc, middleware.dst_ip, middleware.error_level, middleware.error_no, middleware.event_name, middleware.event_type, middleware.feconn, middleware.func_no, middleware.geo.city, middleware.geo.isp, middleware.geo.province, middleware.http_hostname, middleware.http_method, middleware.http_referer, middleware.http_user_agent.browser, middleware.http_user_agent.os, middleware.level, middleware.message, middleware.method, middleware.middleware.nursery_free_after, middleware.module, middleware.msg, middleware.nursery_free_before, middleware.nursery_total, middleware.referer, middleware.referrer, middleware.req_time, middleware.request, middleware.request_method, middleware.request_path, middleware.request_status, middleware.response, middleware.response_code, middleware.retries, middleware.rsp, middleware.server, middleware.severity, middleware.src.geo.country, middleware.src.geo.isp, middleware.src_ip, middleware.src_ip.geo.city, middleware.srv_conn, middleware.srv_queue, middleware.status, middleware.subsystem, middleware.tc, middleware.tenure_free_after, middleware.tenure_free_before, middleware.thread, middleware.tt, middleware.tw, middleware.type, middleware.ua.browser, middleware.ua.device, middleware.ua.os, middleware.uri_query, middleware.uri_stem, middleware.url, middleware.zkmsg.zk_followers, middleware.zkmsg.zk_packets_received, middleware.zkmsg.zk_packets_sent, middleware.zkmsg.zk_server_state, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我在询问关于某一应用的IIS访问性能数据，并希望获得该应用中每个URI的平均响应时间排名前十的结果。", "output": "appname:middleware tag:iis (NOT middleware.uri_stem:*Date*) | stats avg(middleware.time_cost) as c1 by middleware.uri_query|sort by c1|eval c2 =format(\"%.1f\", c1)| limit 10"}
{"input": "索引可用字段有：middleware.Error_info, middleware.System_errinfo, middleware.System_errno, middleware.actconn, middleware.action, middleware.backend_queue, middleware.beconn, middleware.clientip, middleware.desc, middleware.dst_ip, middleware.error_level, middleware.error_no, middleware.event_name, middleware.event_type, middleware.feconn, middleware.func_no, middleware.geo.city, middleware.geo.isp, middleware.geo.province, middleware.http_hostname, middleware.http_method, middleware.http_referer, middleware.http_user_agent.browser, middleware.http_user_agent.os, middleware.level, middleware.message, middleware.method, middleware.middleware.nursery_free_after, middleware.module, middleware.msg, middleware.nursery_free_before, middleware.nursery_total, middleware.referer, middleware.referrer, middleware.req_time, middleware.request, middleware.request_method, middleware.request_path, middleware.request_status, middleware.response, middleware.response_code, middleware.retries, middleware.rsp, middleware.server, middleware.severity, middleware.src.geo.country, middleware.src.geo.isp, middleware.src_ip, middleware.src_ip.geo.city, middleware.srv_conn, middleware.srv_queue, middleware.status, middleware.subsystem, middleware.tc, middleware.tenure_free_after, middleware.tenure_free_before, middleware.thread, middleware.tt, middleware.tw, middleware.type, middleware.ua.browser, middleware.ua.device, middleware.ua.os, middleware.uri_query, middleware.uri_stem, middleware.url, middleware.zkmsg.zk_followers, middleware.zkmsg.zk_packets_received, middleware.zkmsg.zk_packets_sent, middleware.zkmsg.zk_server_state, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "以下内容：这意味着寻找与应用名为“中间件”、标记为IIS的HTTP请求的响应时间最长的十个URI查询。", "output": "appname:middleware tag:iis (NOT middleware.uri_stem:*Date*) | stats avg(middleware.time_cost) as c1 by middleware.uri_query|sort by c1|eval c2 =format(\"%.1f\", c1)| limit 10"}
{"input": "索引可用字段有：waf.action, waf.attack_name, waf.attack_type, waf.bytes_in, waf.cost, waf.cve_id, waf.dst_city, waf.dst_domain, waf.dst_ip, waf.dst_latitude, waf.dst_longitude, waf.dst_port, waf.error_msg, waf.event_level, waf.event_log_level, waf.event_name, waf.event_type, waf.http_method, waf.http_refer, waf.is_truncated, waf.kv.Evt_level, waf.kv.Evt_type, waf.kv.event_name, waf.kv.http_method, waf.kv.http_refer, waf.kv.http_url, waf.kv.msg, waf.kv.owasp_top, waf.kv.pri, waf.kv.severity_level, waf.kv.status, waf.kv.type, waf.level, waf.log_category, waf.message, waf.message.action, waf.message.event, waf.message.method, waf.message.policy, waf.message.src_ip.geo.ip, waf.message.src_ip.geo.province, waf.message.src_port, waf.message.status, waf.message.threaten, waf.method, waf.module, waf.msg.act, waf.msg.cs, waf.msg.policy_id, waf.msg.src.geo.country, waf.policy_name, waf.proto, waf.referer, waf.risk_level, waf.severity, waf.src.geo.city, waf.src.geo.country, waf.src.geo.ip, waf.src.geo.isp, waf.src.geo.latitude, waf.src.geo.longitude, waf.src.geo.province, waf.src_ip, waf.src_port, waf.status, waf.status_code, waf.threat_level, waf.time, waf.ua_browser, waf.ua_device, waf.ua_os, waf.uri, waf.url, waf.user_agent.browser, waf.user_agent.os, waf.website_name, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "nsfocus WAF防火墙是否对攻击进行了拦截，计算百分比并保留小数点后两位。", "output": "( appname:waf tag:nsfocus ) AND ( waf.log_category:waf_log_websec) | eval status= if(waf.action==\"Block\",1,0)|stats count() as sum_,sum(status) as block_|eval x=format(\"%.2f\", todouble(block_/sum_))"}
{"input": "", "instruction": "我想询问关于 Nginx 服务器的状态和失败率的信息。我的意图为：1. 查询 Nginx 服务器上所有服务的运行状况；2. 根据响应码（status）将失败与成功分开计算；3. 对结果进行汇总并计算失败率（percentage）。", "output": "appname:pf_nginx nginx.status:*|eval status=tolong(nginx.status)|eval failed=if(status>399,1,0)|stats count() as count_all,sum(failed) as count_failed|eval pe=todouble(format(\"%.2f\",count_failed*100/count_all))"}
{"input": "", "instruction": "Nginx 服务在近期内有无故障？", "output": "appname:pf_nginx nginx.status:*|eval status=tolong(nginx.status)|eval failed=if(status>399,1,0)|stats count() as count_all,sum(failed) as count_failed|eval pe=todouble(format(\"%.2f\",count_failed*100/count_all))"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想询问的是关于 Apache web 服务器的访问日志中有关中间件状态的信息，其中包括失败和成功的数量以及失败率（percentage）", "output": "appname:apache tag:access middleware.status:*|eval failed=if(middleware.status>399,1,0)|stats count() as count_all,sum(failed) as count_failed|eval pe=todouble(format(\"%.2f\",count_failed*100/count_all))"}
{"input": "", "instruction": "我想问关于 WebLogic 应用的访问状态的信息，并且希望能够了解失败请求所占比例是否过高。", "output": "appname:weblogic tag:access middleware.request_status:*|eval failed=if(tolong(middleware.request_status)>399,1,0)|stats count() as count_all,sum(failed) as count_failed|eval pe=todouble(format(\"%.3f\",count_failed/count_all))"}
{"input": "索引可用字段有：waf.action, waf.attack_name, waf.attack_type, waf.bytes_in, waf.cost, waf.cve_id, waf.dst_city, waf.dst_domain, waf.dst_ip, waf.dst_latitude, waf.dst_longitude, waf.dst_port, waf.error_msg, waf.event_level, waf.event_log_level, waf.event_name, waf.event_type, waf.http_method, waf.http_refer, waf.is_truncated, waf.kv.Evt_level, waf.kv.Evt_type, waf.kv.event_name, waf.kv.http_method, waf.kv.http_refer, waf.kv.http_url, waf.kv.msg, waf.kv.owasp_top, waf.kv.pri, waf.kv.severity_level, waf.kv.status, waf.kv.type, waf.level, waf.log_category, waf.message, waf.message.action, waf.message.event, waf.message.method, waf.message.policy, waf.message.src_ip.geo.ip, waf.message.src_ip.geo.province, waf.message.src_port, waf.message.status, waf.message.threaten, waf.method, waf.module, waf.msg.act, waf.msg.cs, waf.msg.policy_id, waf.msg.src.geo.country, waf.policy_name, waf.proto, waf.referer, waf.risk_level, waf.severity, waf.src.geo.city, waf.src.geo.country, waf.src.geo.ip, waf.src.geo.isp, waf.src.geo.latitude, waf.src.geo.longitude, waf.src.geo.province, waf.src_ip, waf.src_port, waf.status, waf.status_code, waf.threat_level, waf.time, waf.ua_browser, waf.ua_device, waf.ua_os, waf.uri, waf.url, waf.user_agent.browser, waf.user_agent.os, waf.website_name, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想询问的是网站防火墙（WAF）的访问记录中有多少条记录的标签为“chatin”且状态为拒绝的访问，并计算被拦截比例。", "output": "appname:waf tag:chatin| eval status= if(waf.action==\"deny\",1,0)|stats count() as sum_,sum(status) as block_|eval x=format(\"%.2f\", todouble(block_/sum_))"}
{"input": "索引可用字段有：waf.action, waf.attack_name, waf.attack_type, waf.bytes_in, waf.cost, waf.cve_id, waf.dst_city, waf.dst_domain, waf.dst_ip, waf.dst_latitude, waf.dst_longitude, waf.dst_port, waf.error_msg, waf.event_level, waf.event_log_level, waf.event_name, waf.event_type, waf.http_method, waf.http_refer, waf.is_truncated, waf.kv.Evt_level, waf.kv.Evt_type, waf.kv.event_name, waf.kv.http_method, waf.kv.http_refer, waf.kv.http_url, waf.kv.msg, waf.kv.owasp_top, waf.kv.pri, waf.kv.severity_level, waf.kv.status, waf.kv.type, waf.level, waf.log_category, waf.message, waf.message.action, waf.message.event, waf.message.method, waf.message.policy, waf.message.src_ip.geo.ip, waf.message.src_ip.geo.province, waf.message.src_port, waf.message.status, waf.message.threaten, waf.method, waf.module, waf.msg.act, waf.msg.cs, waf.msg.policy_id, waf.msg.src.geo.country, waf.policy_name, waf.proto, waf.referer, waf.risk_level, waf.severity, waf.src.geo.city, waf.src.geo.country, waf.src.geo.ip, waf.src.geo.isp, waf.src.geo.latitude, waf.src.geo.longitude, waf.src.geo.province, waf.src_ip, waf.src_port, waf.status, waf.status_code, waf.threat_level, waf.time, waf.ua_browser, waf.ua_device, waf.ua_os, waf.uri, waf.url, waf.user_agent.browser, waf.user_agent.os, waf.website_name, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问有关某款网络安全产品的使用情况和效果？寻找关于“WAF”（Web应用防火墙）、标记为“dbappsecurity”的所有日志记录。此外，还要求计算所有访问被拒绝的比例并将其格式化为两位小数。", "output": "( appname:waf tag:dbappsecurity )  | eval status= if(waf.action==\"阻断\",1,0)|stats count() as sum_,sum(status) as block_|eval x=format(\"%.2f\", todouble(block_/sum_))"}
{"input": "索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想询问的是关于某视频直播平台的播放质量数据，具体来说就是：1. 查询该平台所有流名称为 `stb_vixtel_smpegts` 的录像文件；2. 根据这些录像文件的平均码率、丢包率和下载速度进行排序；3. 只显示前 10 个具有最低平均丢包率的流名称及其对应的平均丢包率值。", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0stb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)|stats count(stb_vixtel_smpegts.programName) as playCount,avg(tsLostRate) as avg_tsLostRate by stb_vixtel_smpegts.programName|eval avg_tsLostRate_1=format(\"%.3f\",avg_tsLostRate)|sort by avg_tsLostRate_1|limit 10"}
{"input": "索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问关于某视频直播平台的播放质量问题，其中包括流畅度和卡顿率等指标。", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0.000stb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知|eval freezeTime=todouble(stb_vixtel_smpegts.freezeTime)|eval downloadTime=todouble(stb_vixtel_smpegts.downloadTime)|eval liveFreezeRate=todouble((freezeTime/1000000)/downloadTime)|stats count(stb_vixtel_smpegts.programName) as playCount,avg(liveFreezeRate) as avg_liveFreezeRate by stb_vixtel_smpegts.programName|eval avg_liveFreezeRate_1=format(\"%.3f\",avg_liveFreezeRate)|sort by avg_liveFreezeRate_1|limit 10"}
{"input": "索引可用字段有：mysql.level, mysql.os_type, mysql.query_time, mysql.rows_examined, mysql.sql, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想询问在过去一天内，每个应用的总联机时间和最短联机时长是多少", "output": "starttime=\"-1d\" _index:schedule schedule_name:gametime|stats sum(onlinetime) as sumtime by sangforAC.appname|eval min=format(\"%.1f\",sumtime/60)|sort by sumtime"}
{"input": "索引可用字段有：ac.ac_ip, ac.action, ac.ap_ip, ac.ap_name, ac.app, ac.app_name, ac.band, ac.client, ac.command, ac.dst_ip, ac.dst_port, ac.event_id, ac.event_name, ac.event_type, ac.kv.app_cat_name, ac.kv.log_level, ac.kv.receive_addr, ac.kv.send_addr, ac.kv.subject, ac.kv.term_device, ac.log_type, ac.mac_addr, ac.mnemonic, ac.msg.app, ac.msg.serv, ac.msg.tm_type, ac.msg.user, ac.operation, ac.policy, ac.request_url, ac.resource, ac.resource_type, ac.result, ac.src_ip, ac.src_mac, ac.ssid, ac.status, ac.time, ac.user, ac.user_agent, ac.user_name, ac.web_app, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是最近一天的下载流量和总流量分别是多少？", "output": "starttime=\"-1d\" appname:ac tag:surfilter ac.event_type:statistic_traffic|eval up=tolong(ac.kv.down) | stats sum(up) as total_|eval total=format(\"%.2fG\",total_/1024/1024/1024)"}
{"input": "", "instruction": "我想问昨天的服务器 CPU 使用率最小值、主机名和 IP 地址以及该使用率与 100% 的比例等信息。", "output": "starttime=\"-1d/d\" endtime=\"now/d\" appname:top_info_system_stats | stats min(cpu.idle_percent) as _min by ip,hostname |eval _max=100-_min |sort by +ip |eval _max=format(\"%.2f%%\",_max) "}
{"input": "", "instruction": "我想要知道系统 CPU 使用率的平均值和各个 IP 和主机名的排序结果，但不想看到具体数值的原始数据，所以希望你把它们转换成百分比并以不同的颜色显示每个 IP 和主机名的排名。", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_system_stats | stats avg(cpu.idle_percent) as _avg by ip,hostname |eval _avg=100-_avg |sort by +ip |eval _avg=format(\"%.2f%%\",_avg) "}
{"input": "", "instruction": "我想问关于七天前到今天零点之前在各个主机上的内存使用率最高的情况，并以百分比形式列出结果。", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_system_stats |stats max(Mem.used_percent) as _max by ip,hostname |sort by +ip |eval _max=format(\"%.2f%%\",_max)"}
{"input": "", "instruction": "我想要知道最近一周系统内存使用率的平均值，并且按 IP 和主机名进行排序，并将结果格式化为两位小数。", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_system_stats |stats avg(Mem.used_percent) as _avg by ip,hostname |sort by +ip |eval _avg=format(\"%.2f%%\",_avg)"}
{"input": "", "instruction": "我想询问关于七天前到今天的主机上根目录（disk.path：“/”）磁盘空间利用率的平均值。", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_disk_stats AND disk.path:\"/\" |stats avg(disk.used_percent) as value by ip,hostname |sort by +ip |eval value=format(\"%.2f%%\",value) "}
{"input": "", "instruction": "我想问的是，最近一周内哪些主机的磁盘 I/O 使用率最高？你可以把结果打印出来吗？", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_disk_io_stats AND name:\"dm-0\" |stats max(io_stat.util) as value by ip,hostname |eval value=format(\"%.2f%%\",value) |sort by +ip "}
{"input": "", "instruction": "我想要知道过去一周内每个 IP 地址的磁盘使用情况中，每台主机上各个分区的最大 inodes_total、inodes_used 和 inodes_used_percent 值，并计算出剩余空间大小。", "output": "starttime=\"-7d/d\" endtime=\"now\" appname:top_info_disk_stats |stats max(disk.inodes_total) as total,max(disk.inodes_used) as used,max(disk.inodes_used_percent) as percent by ip,disk.path,disk.fstype |eval free=total-used |eval percent=format(\"%.2f%%\",percent)"}
