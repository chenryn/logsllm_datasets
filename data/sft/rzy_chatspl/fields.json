{"input": "top10交易耗时分析。搜索 level 为 T 或 D，且包含开始交易或结束交易的日志，根据 tranCode、seqNo和 交易类型 tranNa 字段分组统计时间戳的最大值最小值，相减得到单笔耗时，按耗时排序后，保留 seqNo、tranCode、tranNa 和 cost 字段。", "instruction": "查询农信银支付清算系统(mps)数据，进行如下统计", "output": "sourcetype:mps (level:T OR level:D) (\"结束交易\" OR \"开始交易\")| stats max(timestamp) as _max,min(timestamp) as _min by seqNo,tranCode,tranNa| eval cost=_max-_min| sort 10 by cost | fields seqNo,tranCode,tranNa,cost "}
{"input": "", "instruction": "查询主机性能数据，包括主机名、时间、ulimit 配置、cpu 核数和带宽，去掉统计的数量", "output": "tag:hosts_metrics * |stats count() as cnt by hosts,date,ulimit_config,cpu_num,eth |fields - cnt "}
{"input": "检索 UARG 类型日志，按ZZZZ,ip,USER,GROUP,COMM,FullCommand等字段分组统计，用 fields 命令保留ZZZZ、ip、USER、GROUP、COMM 和 FullCommand 字段。", "instruction": "查询农信银支付清算系统(mps)数据，进行如下统计", "output": "type:UARG tag:mps| stats count() as cnt by ZZZZ,ip,USER,GROUP,COMM,FullCommand | fields ZZZZ,ip,USER,GROUP,COMM,FullCommand"}
{"input": "", "instruction": "查询包含 EventCode 为 4624 或 4625 的日志记录，表示登录成功或失败，并按照登录状态分布计算占比", "output": "EventCode:4624 OR EventCode:4625 | stats count() as cnt by EventCode | rename EventCode as \"Login Status\" | eval 'Login Status'=case('Login Status'==\"4624\",\"Success\",'Login Status'==\"4625\",\"Failure\") | addtotals fieldname=\"Total\" | eval percent=tostring(round(cnt/Total*100,2))+\"%\" | fields - Total | sort by - percent"}
{"input": "", "instruction": "我想知道登录状态的情况。请告诉我成功和失败的比例是多少。计算比例时可以先计算总和作为分母，然后再去掉总和字段不展示。", "output": "EventCode:4624 OR EventCode:4625 | stats count() as cnt by EventCode | rename EventCode as \"Login Status\" | eval 'Login Status'=case('Login Status'==\"4624\",\"Success\",'Login Status'==\"4625\",\"Failure\") | addtotals fieldname=\"Total\" | eval percent=tostring(round(cnt/Total*100,2))+\"%\" | fields - Total | sort by - percent"}
{"input": "服务器用户明细，重命名json.user、linux.user为 user 字段，json.enable 为 enable 字段。当 enable 字段为空时， a 字段为 Yes，否则 a 字段为 enable 字段值。保留 appanme、ip、user 和 a 字段。", "instruction": "安全合规数据，编写查询语句实现如下分析场景", "output": "tag:user_info | rename json.user as user,linux.user as user,json.enable as enable |table  appname,ip,user,enable|eval a=if(empty(enable),\"Yes\",enable)| fields appname,ip,user,a"}
{"input": "攻击详情，列出时间、来源 IP、目的 IP、目的端口、攻击级别、攻击名称、描述、结果、解决方案", "instruction": "奇安信天眼数据，编写查询语句实现如下分析场景", "output": "appname:skyeye tag:qianxin | fields timestamp,skyeye.src_ip,skyeye.dst_ip,skyeye.dst_port,skyeye.json.level,skyeye.attack_name,skyeye.desc,skyeye.json.solution,skyeye.json.result"}
{"input": "主机密码策略详情", "instruction": "Windows_AD数据，编写查询语句实现如下分析场景", "output": "appname:windows tag:policy_info\n| rename json.MaximumPasswordAge as passwd_maxage, json.MinimumPasswordLength as passwd_min_length ,json.PasswordComplexity as passwd_complexity ,json.LockoutBadCount as lockout_count ,json.ResetLockoutCount as reset_lockout_count , json.LockoutDuration as lockout_time ,json.EnableGuestAccount  as enable_guest\n| table ip,appname,passwd_maxage,passwd_min_length,passwd_complexity,lockout_count,lockout_time,reset_lockout_count,enable_guest\n|eval a=if(empty(passwd_complexity),\"未启用\",passwd_complexity)\n|eval b=if(empty(lockout_count),\"未启用\",lockout_count)\n|eval c=if(empty(lockout_time),\"未启用\",lockout_time)\n| eval d=if(empty(enable_guest),\"未启用\",enable_guest)\n| fields ip,passwd_maxage,passwd_min_length,a,b,c,d"}
{"input": "账号启用情况，去掉json.字段名前缀，新建一个 a 字段，如果 enable 字段为空则赋值为 Yes，否则为 enable 字段值。保留 hostname、appname、ip 和 a 字段", "instruction": "Windows_AD数据，编写查询语句实现如下分析场景", "output": "appname:windows tag:user_info\n| rename json.* as * | eval a=if(empty(enable),\"Yes\",enable)\n| fields hostname,appname,ip,user,a"}
{"input": "操作系统用户密码更新列表。1. 从 user_info 标签数据中，按\"MMM dd, yyyy\"格式解析linux.pwd_change_lasttime字段值为time，按\"yyyy/MM/dd HH:mm:ss\"格式解析json.set_pwd_lasttime字段值为 time1；2. 将json.user或linux.user赋值为 user，time 或 time1 赋值为 lasttime；3. 计算 lasttime 和今天的时间差距，按天计，是否大于 180 天；4. 根据前一步的判断，拼成提示语，未过期则提示有效期还剩多少天，过期则提示已过期多少天，提示语赋值为 b 字段；5. 仅保留 appname、ip、user、lasttime、b 字段。", "instruction": "安全合规仪表盘数据，编写查询语句实现如下分析场景", "output": "tag:user_info \n|eval time=parsedate(linux.pwd_change_lasttime,\"MMM dd, yyyy\")  \n|eval time1=parsedate(json.set_pwd_lasttime,\"yyyy/MM/dd HH:mm:ss\") \n|eval user=coalesce(json.user, linux.user), lasttime=coalesce(time,time1)\n|eval a=180-ceil((now()-lasttime)/86400000)\n|eval b=if(a>0,\"密码有效期还有\"+a+\"天\",\"密码已过期\"+abs(a)+\"天\") \n| fields appname,ip,user,lasttime,b  "}
{"input": "虚拟机置备空间使用率", "instruction": "VMware_Esxi监控数据，编写查询语句实现如下分析场景", "output": "appname:vsphere tag:app2 source:VirtualMachine*   | stats last(json.storage.used.bytes) as storage by json.hostname,json.name,json.storage.provisioned.bytes | eval storages=todouble(format(\"%.3f\",100-((json.storage.provisioned.bytes-storage)/json.storage.provisioned.bytes * 100)))  | fields json.hostname,json.name ,storages|dedup json.hostname,json.name ,storages | sort by -storages "}
{"input": "虚拟机置备空间使用率", "instruction": "主中心Esxi监控数据，编写查询语句实现如下分析场景", "output": "appname:vsphere tag:dmz_master  source:VirtualMachine*   | stats last(json.storage.used.bytes) as storage by json.hostname,json.name,json.storage.provisioned.bytes | eval storages=todouble(format(\"%.3f\",100-((json.storage.provisioned.bytes-storage)/json.storage.provisioned.bytes * 100)))  | fields json.hostname,json.name ,storages|dedup json.hostname,json.name ,storages | sort by -storages "}
{"input": "虚拟机置备空间使用率", "instruction": "Esxi性能监控数据，编写查询语句实现如下分析场景", "output": "appname:vsphere tag:dmz_backup  source:VirtualMachine*   | stats last(json.storage.used.bytes) as storage by json.hostname,json.name,json.storage.provisioned.bytes | eval storages=todouble(format(\"%.3f\",100-((json.storage.provisioned.bytes-storage)/json.storage.provisioned.bytes * 100)))  | fields json.hostname,json.name ,storages|dedup json.hostname,json.name ,storages | sort by -storages "}
{"input": "账号密码策略详情。具体方法：1. 从 user_info 标签数据中，按\"MMM dd, yyyy\"格式解析windows.pwd_change_lasttime字段值为time，按\"yyyy/MM/dd HH:mm:ss\"格式解析json.set_pwd_lasttime字段值为 time1；2. 将json.user或windows.user赋值为 user，time 或 time1 赋值为 lasttime；3. 计算 lasttime 和今天的时间差距，按天计，是否大于 180 天；4. 根据前一步的判断，拼成提示语，未过期则提示有效期还剩多少天，过期则提示已过期多少天，提示语赋值为 b 字段；5. 仅保留 hostname、ip、user、lasttime、b 字段。", "instruction": "Windows_AD数据，编写查询语句实现如下分析场景", "output": "appname:windows tag:user_info \n|eval time=parsedate(windows.pwd_change_lasttime,\"MMM dd, yyyy\")  \n|eval time1=parsedate(json.set_pwd_lasttime,\"yyyy/MM/dd HH:mm:ss\") \n|eval user=coalesce(json.user, windows.user), lasttime=coalesce(time,time1)\n|eval a=180-ceil((now()-lasttime)/86400000)\n|eval b=if(a>0,\"密码有效期还有\"+a+\"天\",\"密码已过期\"+abs(a)+\"天\") \n| fields hostname,ip,user,lasttime,b "}
{"input": "数据库密码策略详情", "instruction": "安全合规数据，编写查询语句实现如下分析场景", "output": "tag:passwd_policy | rename json.RESOURCE_NAME as policy_name ,json.LIMIT as value,mysql.policy_name\tas policy_name,mysql.values as value | stats count() as cnt by appname,ip,policy_name,value | fields appname,ip,policy_name,value "}
{"input": "g400空间监控。具体方法如下：1. 先用appname:vsphere tag:app2 json.fstype:VMFS过滤出vsphere中fstype为VMFS的卷 2. 用stats count() by 分组,统计每个卷的容量信息,包括:json.name(卷名),json.capacity.total.bytes(总容量),json.capacity.provisioned.bytes(置备容量),json.capacity.used.bytes(使用容量),json.capacity.free.bytes(可用容量) 3. 用eval字段转换各个容量，格式化成TB 级再转换成double类型,以便后续计算。4. 计算出各个阈值容量,如:告警阈值=总容量*0.75，置备超额=置备容量-总容量，实际超警戒值=使用容量-告警阈值。5. 选出需要的字段,并重命名。6. 对卷名进行dedup去重，按置备容量降序排序。7. 最后输出的字段包括:卷名,总容量,置备容量,使用容量,可用容量,告警阈值,置备超额,实际超警戒值", "instruction": "VMware_Esxi监控数据，编写查询语句实现如下分析场景", "output": "appname:vsphere tag:app2 json.fstype:VMFS | stats count() by json.name,json.capacity.total.bytes,json.capacity.provisioned.bytes,json.capacity.used.bytes,json.capacity.free.bytes|eval total=format(\"%.2f\",json.capacity.total.bytes/1024/1024/1024/1024)|eval provisioned=format(\"%.2f\",json.capacity.provisioned.bytes/1024/1024/1024/1024)|eval used=format(\"%.2f\",json.capacity.used.bytes/1024/1024/1024/1024)|eval free=format(\"%.2f\",json.capacity.free.bytes/1024/1024/1024/1024) | eval total=todouble(total)| eval used=todouble(used)|eval provisioned=todouble(provisioned)|eval alert=format(\"%.3f\",total*0.75)|eval alert=todouble(alert)|eval provisi=format(\"%.3f\",provisioned-total)|eval alert_=format(\"%.3f\",used-alert)|fields json.name,total,provisioned,used,free,alert,provisi,alert_|dedup json.name |sort  by -provisioned| rename json.name as \"LUN名\",total as \"容量(T)\",provisioned as \"置备空间(T)\",\tused as \"实际使用(T)\",free as \"可用空间(T)\",\talert as \"告警数值\",provisi as \"置备超额\",alert_ as \"实际空间超警戒值\""}
{"input": "日立g200空间监控", "instruction": "主中心Esxi监控数据，编写查询语句实现如下分析场景", "output": "appname:vsphere tag:dmz_master source:Datastore* | stats count() by json.name,json.capacity.total.bytes,json.capacity.provisioned.bytes,json.capacity.used.bytes,json.capacity.free.bytes|eval total=format(\"%.2f\",json.capacity.total.bytes/1024/1024/1024/1024)|eval provisioned=format(\"%.2f\",json.capacity.provisioned.bytes/1024/1024/1024/1024)|eval used=format(\"%.2f\",json.capacity.used.bytes/1024/1024/1024/1024)|eval free=format(\"%.2f\",json.capacity.free.bytes/1024/1024/1024/1024) | eval total=todouble(total)| eval used=todouble(used)|eval provisioned=todouble(provisioned)|eval alert=format(\"%.3f\",total*0.75)|eval alert=todouble(alert)|eval provisi=format(\"%.3f\",provisioned-total)|eval alert_=format(\"%.3f\",used-alert)|fields json.name,total,provisioned,used,free,alert,provisi,alert_|dedup json.name |sort  by -provisioned"}
{"input": "曙光存储空间监控", "instruction": "Esxi性能监控数据，编写查询语句实现如下分析场景", "output": "appname:vsphere tag:dmz_backup json.fstype:VMFS| stats count() by json.name,json.capacity.total.bytes,json.capacity.provisioned.bytes,json.capacity.used.bytes,json.capacity.free.bytes|eval total=format(\"%.2f\",json.capacity.total.bytes/1024/1024/1024/1024)|eval provisioned=format(\"%.2f\",json.capacity.provisioned.bytes/1024/1024/1024/1024)|eval used=format(\"%.2f\",json.capacity.used.bytes/1024/1024/1024/1024)|eval free=format(\"%.2f\",json.capacity.free.bytes/1024/1024/1024/1024) | eval total=todouble(total)| eval used=todouble(used)|eval provisioned=todouble(provisioned)|eval alert=format(\"%.3f\",total*0.75)|eval alert=todouble(alert)|eval provisi=format(\"%.3f\",provisioned-total)|eval alert_=format(\"%.3f\",used-alert)|fields json.name,total,provisioned,used,free,alert,provisi,alert_|dedup json.name |sort  by -provisioned"}
{"input": "", "instruction": "我想问的是，我的密码在几天后就要过期了吗？", "output": "tag:user_info |eval time=parsedate(linux.pwd_change_lasttime,\"MMM dd, yyyy\")  |eval time1=parsedate(json.set_pwd_lasttime,\"yyyy/MM/dd HH:mm:ss\") |eval user=coalesce(json.user, linux.user), lasttime=coalesce(time,time1)|eval a=180-ceil((now()-lasttime)/86400000)|eval b=if(a>0,\"密码有效期还有\"+a+\"天\",\"密码已过期\"+abs(a)+\"天\") | fields appname,ip,user,lasttime,b "}
{"input": "", "instruction": "我想问的是，我的 Windows 用户信息在哪里呢？你能告诉我吗？我需要知道用户名称和密码更改的时间。", "output": "appname:windows tag:user_info |eval time=parsedate(windows.pwd_change_lasttime,\"MMM dd, yyyy\")  |eval time1=parsedate(json.set_pwd_lasttime,\"yyyy/MM/dd HH:mm:ss\") |eval user=coalesce(json.user, windows.user), lasttime=coalesce(time,time1)|eval a=180-ceil((now()-lasttime)/86400000)|eval b=if(a>0,\"密码有效期还有\"+a+\"天\",\"密码已过期\"+abs(a)+\"天\") | fields hostname,ip,user,lasttime,b "}
{"input": "", "instruction": "希望能够以表格形式展示 `appname`、`ip`、`user` 和 `enable` 四个字段的数据，并且将 `enable` 字段的值转换为 Yes/No 格式显示。", "output": "tag:user_info | rename json.user as user,linux.user as user,json.enable as enable |table  appname,ip,user,enable|eval a=if(empty(enable),\"Yes\",enable)| fields appname,ip,user,a"}
{"input": "", "instruction": "我想问一下最近有没有发生过类似于“源IP”和“目的IP”中出现的情况吗？如果有的话，那具体是什么类型的攻击呢？", "output": "appname:skyeye tag:qianxin|eval time=formatdate(timestamp,\"MM-dd HH:mm\")|table time,skyeye.src_ip,skyeye.dst_ip,skyeye.dst_port,skyeye.json.level,skyeye.attack_name,skyeye.desc,skyeye.json.solution,skyeye.json.result |fields time,skyeye.src_ip,skyeye.dst_ip,skyeye.dst_port,skyeye.json.level,skyeye.attack_name,skyeye.desc,skyeye.json.solution,skyeye.json.result "}
{"input": "", "instruction": "我想问的是 windows 下的组策略中有没有关于用户密码相关的信息，比如最大使用时长、最小长度等。你查到了这些信息吗？", "output": "appname:windows tag:policy_info| rename json.MaximumPasswordAge as passwd_maxage, json.MinimumPasswordLength as passwd_min_length,json.PasswordComplexity as passwd_complexity,json.LockoutBadCount as lockout_count,json.ResetLockoutCount as reset_lockout_count, json.LockoutDuration as lockout_time,json.EnableGuestAccount  as enable_guest| table ip,appname,passwd_maxage,passwd_min_length,passwd_complexity,lockout_count,lockout_time,reset_lockout_count,enable_guest|eval a=if(empty(passwd_complexity),\"未启用\",passwd_complexity)|eval b=if(empty(lockout_count),\"未启用\",lockout_count)|eval c=if(empty(lockout_time),\"未启用\",lockout_time)| eval d=if(empty(enable_guest),\"未启用\",enable_guest)| fields ip,passwd_maxage,passwd_min_length,a,b,c,d"}
{"input": "", "instruction": "我想要知道我的 Windows 用户信息，包括主机名、用户帐户状态（启用或禁用）和 IP 地址。请帮我编写相应的日志易查询。", "output": "appname:windows tag:user_info| rename json.* as * | eval a=if(empty(enable),\"Yes\",enable)| fields hostname,appname,ip,user,a"}
{"input": "", "instruction": "我想问关于 vSphere 中 appname 为 vsphere、tag 为 app2 和 source 以 VirtualMachine 开头的对象中存储空间已使用的情况吗？", "output": "appname:vsphere tag:app2 source:VirtualMachine*   | stats last(json.storage.used.bytes) as storage by json.hostname,json.name,json.storage.provisioned.bytes | eval storages=todouble(format(\"%.3f\",100-((json.storage.provisioned.bytes-storage)/json.storage.provisioned.bytes * 100)))  | fields json.hostname,json.name,storages|dedup json.hostname,json.name,storages | sort by -storages "}
{"input": "", "instruction": "我想问如何在VMware vCenter Server中查找虚拟机的存储空间利用率高于90%的情况并按降序排列结果。", "output": "appname:vsphere tag:dmz_backup  source:VirtualMachine*   | stats last(json.storage.used.bytes) as storage by json.hostname,json.name,json.storage.provisioned.bytes | eval storages=todouble(format(\"%.3f\",100-((json.storage.provisioned.bytes-storage)/json.storage.provisioned.bytes * 100)))  | fields json.hostname,json.name,storages|dedup json.hostname,json.name,storages | sort by -storages "}
{"input": "", "instruction": "询问 MySQL 服务器的密码策略信息，并将其汇总为表格格式返回给用户。", "output": "tag:passwd_policy | rename json.RESOURCE_NAME as policy_name,json.LIMIT as value,mysql.policy_name as policy_name,mysql.values as value | stats count() as cnt by appname,ip,policy_name,value | fields appname,ip,policy_name,value "}
{"input": "用户当前设置值_USER-参数。索引可用字段有：oracle.ACCOUNT_STATUS, oracle.ACTION, oracle.ACTION_NAME, oracle.BLOCK_CHANGES, oracle.CREATED, oracle.EVENT, oracle.EXECUTIONS, oracle.EXPIRY_DATE, oracle.FILE_COUNTS, oracle.FILE_SIZE, oracle.FREE_BYTES, oracle.GRANTED_ROLE, oracle.GRANTEE, oracle.HOST_NAME, oracle.INSTANCE_NAME, oracle.JOB, oracle.LAST_DATE, oracle.LIMIT, oracle.LOCK_DATE, oracle.LOGON_TIME, oracle.LOG_USER, oracle.MACHINE, oracle.NEXT_DATE, oracle.Name, oracle.ORACODE, oracle.OSUSER, oracle.PHYSICAL_READS, oracle.PROFILE, oracle.PROG, oracle.PROGRAM, oracle.RESOURCE_NAME, oracle.RESOURCE_TYPE, oracle.SID, oracle.SPID, oracle.SQL_ID, oracle.SQL_TEXT, oracle.STATUS, oracle.TABLESPACE_NAME, oracle.TERMINAL, oracle.TOTAL_BLOCKS, oracle.TOTAL_BYTES, oracle.TS_COUNTS, oracle.USED_BYTES, oracle.USED_SIZE, oracle.USERNAME, oracle.VALUE, oracle.WAIT_TIME, oracle.WHAT, oracle.action, oracle.conn_str.HOST, oracle.conn_str.SID, oracle.description, oracle.event, oracle.host, oracle.host_addr, oracle.logical_reads_M, oracle.login_user, oracle.msg, oracle.ora_code, oracle.osprivilege, oracle.physical_reads_M, oracle.policy, oracle.src_ip, oracle.status, oracle.tns_error, oracle.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Database_Oracle数据，编写查询语句实现如下分析场景", "output": "appname:oracle tag:user_profiles\n|stats count()  as ct by oracle.RESOURCE_NAME,oracle.RESOURCE_TYPE,oracle.LIMIT,oracle.PROFILE \n|sort by ct \n|fields oracle.RESOURCE_NAME,oracle.RESOURCE_TYPE,oracle.LIMIT,oracle.PROFILE"}
{"input": "热门前 10 名的直播频道，按频道统计和展示播放吞吐量，吞吐量以 MB 计，展示小数点后两位。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒分析_数据查询实现如下场景", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0\nstb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知\n|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)\n|stats avg(avgThroughput) as avg_avgThroughput by stb_vixtel_smpegts.programName\n|eval avg_avgThroughput_1=format(\"%.2f\",avg_avgThroughput/1000000)\n|sort by avg_avgThroughput_1|limit 10\n|fields stb_vixtel_smpegts.programName,avg_avgThroughput_1"}
{"input": "热门前 10 名的直播频道，按频道统计和展示卡顿率。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒分析_数据查询实现如下场景", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0\nstb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知\n|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)\n|stats avg(tsLostRate) as avg_tsLostRate by stb_vixtel_smpegts.programName\n|eval avg_tsLostRate_1=format(\"%.2f\",avg_tsLostRate)\n|sort by avg_tsLostRate_1|limit 10\n|fields stb_vixtel_smpegts.programName,avg_tsLostRate_1"}
{"input": "热门前 10 名的直播频道，按频道统计和展示MOS。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒分析_数据查询实现如下场景", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0\nstb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知\n|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)\n|stats avg(avgMos) as avg_avgMos by stb_vixtel_smpegts.programName\n|eval avg_avgMos_1=format(\"%.2f\",avg_avgMos)\n|sort by avg_avgMos_1 |limit 10\n|fields stb_vixtel_smpegts.programName,playCount"}
{"input": "攻击详情。索引可用字段有：apt.attack_type, apt.dst_ip, apt.dst_port, apt.event_name, apt.level, apt.src.geo.city, apt.src.geo.country, apt.src.geo.province, apt.src_ip, apt.status, apt.uri, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "安恒APT数据，编写查询语句实现如下分析场景", "output": "appname:apt tag:dbappsecurity apt.src_ip:* | table  apt.src_ip,apt.dst_ip,apt.dst_port,apt.attack_type,apt.event_name,apt.uri | eval dst=apt.dst_ip+\":\"+apt.dst_port | fields apt.src_ip,dst,apt.attack_type,apt.event_name,apt.uri "}
{"input": "安全策略触发详情。索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "华为防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:huawei firewall.src_ip:*\n|rename firewall.* as *\n|table time,src_ip,src_port,dst_ip,dst_port,'msg.应用',proto,'msg.安全策略','msg.配置文件',src.geo.city,dst.geo.city,'msg.虚拟系统'\n| eval src=src_ip+\":\"+src_port \n| eval dst=dst_ip+\":\"+dst_port \n|fields time,src,dst,'msg.应用',proto,'msg.安全策略','msg.配置文件',src.geo.city,dst.geo.city,'msg.虚拟系统'"}
{"input": "aofei_CDN各省运营商信息汇总表。非电信、联通、移动运营商都归入其他。。索引可用字段有：cdn.cdn_status, cdn.clientip.geo.city, cdn.clientip.geo.isp, cdn.domain, cdn.event_name, cdn.finished_body_response, cdn.geo.city, cdn.geo.country, cdn.geo.province, cdn.http_status, cdn.prefix_url, cdn.proto, cdn.remote_addr, cdn.request_domain, cdn.request_url, cdn.src_outside_ip, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "奥飞CDN数据数据，编写查询语句实现如下分析场景", "output": "appname:cdn tag:aofei cdn.geo.country:\"中国\" | eval stype=case(cdn.geo.isp == \"电信\", \"电信\", cdn.geo.isp == \"联通\", \"联通\", cdn.geo.isp == \"移动\", \"移动\",  default, \"其他\") | stats sum(cdn.body_size) as _sum by cdn.geo.province, stype | eval t = format( \"%.2f\", _sum / 1024 /1024 /1024)| sort by cdn.geo.province  | fields cdn.geo.province,stype,t "}
{"input": "审计本地文件重命名及U盘审计详情。", "instruction": "联软终端控制数据，编写查询语句实现如下分析场景", "output": "appname:leagsoft tag:tc \n| stats count() as cnt by tc.msg.kv.dttime,tc.msg.kv.strDevIP,tc.msg.kv.strSecPolicyName,tc.msg.kv.strSourceFile,tc.msg.kv.iOperateType,tc.msg.kv.iSourceFileSize \n|fields tc.msg.kv.dttime,tc.msg.kv.strDevIP,tc.msg.kv.strSecPolicyName,tc.msg.kv.strSourceFile,tc.msg.kv.iOperateType,tc.msg.kv.iSourceFileSize \n|rename tc.msg.kv.dttime as \"操作时间\",tc.msg.kv.strDevIP as \"操作机器ip\",tc.msg.kv.strSecPolicyName as \"触发的安全策略\",tc.msg.kv.strSourceFile as \"操作文件\",tc.msg.kv.iOperateType as \"操作类型\",tc.msg.kv.iSourceFileSize as \"操作文件大小\""}
{"input": "攻击事件详情。索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "华为防火墙日志数据，编写查询语句实现如下分析场景", "output": "(appname:firewall AND tag:huawei) (firewall.brief:ATTACK OR \"ATTACK\" OR \"IPS\" OR firewall.brief:*THREAT*)|stats count() as cnt by firewall.src_ip,firewall.dst_ip,firewall.dst_port,firewall.attack_name,firewall.message,firewall.level|eval dst=firewall.dst_ip+\":\"+firewall.dst_port | fields firewall.src_ip,dst,firewall.attack_name,firewall.message,firewall.level"}
{"input": "索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "errpt报错列表，包括报错时间、主机名、AIX 错误的级别、类型和资源名称等，展示报错数量最大的 10 条记录", "output": "appname:aix tag:errpt| stats count(hostname) as count_ by  hostname,aix.type_dec,timestamp,aix.class_dec,aix.resource_name |eval ts=formatdate(timestamp)|limit 10 |fields ts,hostname,aix.type_dec,aix.class_dec,aix.resource_name "}
{"input": "索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "errpt报错列表，包括报错时间、主机名、AIX 错误的级别、类型和资源名称等，展示报错数量最大的 5 条记录", "output": "appname:aix tag:errpt| stats count(hostname) as count_ by  hostname,aix.type_dec,timestamp,aix.class_dec,aix.resource_name |eval ts=formatdate(timestamp)|limit 5 |fields ts,hostname,aix.type_dec,aix.class_dec,aix.resource_name "}
{"input": "索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "errpt报错列表，包括报错时间、主机名、AIX 错误的级别、类型和资源名称等，展示报错数量最大的 50 条记录", "output": "appname:aix tag:errpt| stats count(hostname) as count_ by  hostname,aix.type_dec,timestamp,aix.class_dec,aix.resource_name |eval ts=formatdate(timestamp)|limit 50 |fields ts,hostname,aix.type_dec,aix.class_dec,aix.resource_name "}
{"input": "索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "errpt报错列表，包括报错时间、主机名、AIX 错误的级别、类型和资源名称等，展示报错数量最大的 20 条记录", "output": "appname:aix tag:errpt| stats count(hostname) as count_ by  hostname,aix.type_dec,timestamp,aix.class_dec,aix.resource_name |eval ts=formatdate(timestamp)|limit 20 |fields ts,hostname,aix.type_dec,aix.class_dec,aix.resource_name "}
{"input": "索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "errpt报错列表，包括报错时间、主机名、AIX 错误的级别、类型和资源名称等，展示报错数量最大的 100 条记录", "output": "appname:aix tag:errpt| stats count(hostname) as count_ by  hostname,aix.type_dec,timestamp,aix.class_dec,aix.resource_name |eval ts=formatdate(timestamp)|limit 100 |fields ts,hostname,aix.type_dec,aix.class_dec,aix.resource_name "}
{"input": "客户校验失败请求量最大的 10 笔交易详情。", "instruction": "通达信数据，编写查询语句实现如下分析场景", "output": "appname:tdx AND [[appname:tdx \"客户校验\" 失败 |stats count() by TDX.TRANSACTION_ID |limit 10| fields TDX.TRANSACTION_ID]]\n| eval time=formatdate(timestamp,\"yy-dd HH:mm:ss\")\n| fields time,TDX.BUSINESS_TYPE,TDX.REQUEST_TYPE,TDX.DEPARTMENT,TDX.CLIENT_IP,TDX.TDX_ID_XT_LOGINID,TDX.THREAD_ID,TDX.TDX_ID_RESULT"}
{"input": "普通委托失败请求量最大的 10 笔交易详情。", "instruction": "通达信数据，编写查询语句实现如下分析场景", "output": "appname:tdx AND [[appname:tdx \"委托\" 失败 |stats count() by TDX.TRANSACTION_ID |limit 10| fields TDX.TRANSACTION_ID]]\n| eval time=formatdate(timestamp,\"yy-dd HH:mm:ss\")\n| fields time,TDX.BUSINESS_TYPE,TDX.REQUEST_TYPE,TDX.DEPARTMENT,TDX.CLIENT_IP,TDX.TDX_ID_ZJZH,TDX.TDX_ID_KHXM,TDX.TDX_ID_ZQDM,TDX.TDX_ID_WTJG,TDX.TDX_ID_WTSL,TDX.TDX_ID_MMBZ,TDX.THREAD_ID,TDX.TDX_ID_RESULT"}
{"input": "委托撤单失败请求量最大的 10 笔交易详情。", "instruction": "通达信数据，编写查询语句实现如下分析场景", "output": "appname:tdx AND [[appname:tdx \"撤单\" 失败 |stats count() by TDX.TRANSACTION_ID |limit 10| fields TDX.TRANSACTION_ID]]\n| eval time=formatdate(timestamp,\"yy-dd HH:mm:ss\")\n| fields time,TDX.BUSINESS_TYPE,TDX.REQUEST_TYPE,TDX.DEPARTMENT,TDX.CLIENT_IP,TDX.TDX_ID_ZJZH,TDX.TDX_ID_KHXM,TDX.TDX_ID_ZQDM,TDX.TDX_ID_WTBH,TDX.TDX_ID_MMBZ,TDX.THREAD_ID,TDX.TDX_ID_RESULT\n"}
{"input": "银证转账失败请求量最大的 10 笔交易详情。", "instruction": "通达信数据，编写查询语句实现如下分析场景", "output": "appname:tdx AND [[appname:tdx \"银证\" 失败 |stats count() by TDX.TRANSACTION_ID |limit 10| fields TDX.TRANSACTION_ID]]\n| eval time=formatdate(timestamp,\"yy-dd HH:mm:ss\")\n| fields time,TDX.BUSINESS_TYPE,TDX.REQUEST_TYPE,TDX.DEPARTMENT,TDX.CLIENT_IP,TDX.TDX_ID_ZJZH,TDX.TDX_ID_KHXM,TDX_ID_YHZH,TDX.TDX_ID_ZZFX,TDX.TDX_ID_ZZJE,TDX.THREAD_ID,TDX.TDX_ID_RESULT"}
{"input": "", "instruction": "从rzyxj中查询主机性能数据", "output": "starttime=\"-1d/d\" endtime=\"now/d\" appname:rzyxj tag:manager_metrics hosts:* | stats count() as cnt  by  hosts,'os_mem_totalMB','os_mem_availablePercent','os_cpu_used','os_io_utils.\\/boot','os_disk_size_percent.\\/',hosts,'os_disk_size_percent.\\/data','os_disk_size_percent.\\/boot','os_io_utils.\\/','os_io_utils.\\/data','os_io_utils.\\/boot','os_net_in_KBps' | fields -cnt"}
{"input": "审计明细。索引可用字段有：oracle.ACCOUNT_STATUS, oracle.ACTION, oracle.ACTION_NAME, oracle.BLOCK_CHANGES, oracle.CREATED, oracle.EVENT, oracle.EXECUTIONS, oracle.EXPIRY_DATE, oracle.FILE_COUNTS, oracle.FILE_SIZE, oracle.FREE_BYTES, oracle.GRANTED_ROLE, oracle.GRANTEE, oracle.HOST_NAME, oracle.INSTANCE_NAME, oracle.JOB, oracle.LAST_DATE, oracle.LIMIT, oracle.LOCK_DATE, oracle.LOGON_TIME, oracle.LOG_USER, oracle.MACHINE, oracle.NEXT_DATE, oracle.Name, oracle.ORACODE, oracle.OSUSER, oracle.PHYSICAL_READS, oracle.PROFILE, oracle.PROG, oracle.PROGRAM, oracle.RESOURCE_NAME, oracle.RESOURCE_TYPE, oracle.SID, oracle.SPID, oracle.SQL_ID, oracle.SQL_TEXT, oracle.STATUS, oracle.TABLESPACE_NAME, oracle.TERMINAL, oracle.TOTAL_BLOCKS, oracle.TOTAL_BYTES, oracle.TS_COUNTS, oracle.USED_BYTES, oracle.USED_SIZE, oracle.USERNAME, oracle.VALUE, oracle.WAIT_TIME, oracle.WHAT, oracle.action, oracle.conn_str.HOST, oracle.conn_str.SID, oracle.description, oracle.event, oracle.host, oracle.host_addr, oracle.logical_reads_M, oracle.login_user, oracle.msg, oracle.ora_code, oracle.osprivilege, oracle.physical_reads_M, oracle.policy, oracle.src_ip, oracle.status, oracle.tns_error, oracle.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Database_Oracle数据，编写查询语句实现如下分析场景", "output": "appname:oracle tag:audit|stats count()   by  timestamp,audit.OSUSER,audit.USERNAME,audit.PROGRAM,audit.SQL_TEXT,audit.SQL_ID|eval '创建时间'=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\")|dedup 1  '创建时间',audit.SQL_ID,audit.OSUSER,audit.USERNAME,audit.PROGRAM,audit.SQL_TEXT|fields '创建时间',audit.SQL_ID,audit.OSUSER,audit.USERNAME,audit.PROGRAM,audit.SQL_TEXT|rename audit.* as *"}
{"input": "飞塔内网流量实时监测，分别统计来源 IP、目的 IP和目的端口的前 20 名。索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "防火墙_飞塔数据，编写查询语句实现如下分析场景", "output": "(appname:firewall tag:fortinet AND firewall.type:traffic AND firewall.dst.geo.country:private) \n| stats count() by  firewall.src_ip,firewall.dst_ip,firewall.dst_port\n|rename firewall.src_ip as from ,firewall.dst_ip as to\n|sort by 'count()' \n| limit 20\n|fields from,to,'count()'"}
{"input": "热门前 10 名的直播频道，按频道统计和展示播放次数。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒分析_数据查询实现如下场景", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0\nstb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知\n|stats count(stb_vixtel_smpegts.programName) as playCount by stb_vixtel_smpegts.programName\n|sort by playCount|limit 10\n|fields stb_vixtel_smpegts.programName,playCount\n|rename stb_vixtel_smpegts.programName as \"直播频道\"\n|rename playCount as \"播放次数\""}
{"input": "postgresql数据库慢日志明细前 50 条。索引可用字段有：postgresql.command_tag, postgresql.database, postgresql.duration, postgresql.error_severity, postgresql.ip, postgresql.sql_state_code, postgresql.stringmess, postgresql.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "postgresql日志数据，编写查询语句实现如下分析场景", "output": "appname:postgresql   postgresql.duration:* | eval ts1=formatdate(timestamp)| stats count() by ts1,postgresql.user,postgresql.database,postgresql.duration,postgresql.command_tag,postgresql.sql|sort by postgresql.duration|limit 50|fields ts1,postgresql.user,postgresql.database,postgresql.duration,postgresql.command_tag,postgresql.sql\n|rename ts1 as \"时间\"\n|rename postgresql.user as \"用户名\"\n|rename postgresql.database as \"实例\"\n|rename postgresql.duration as \"耗时(毫秒)\"\n|rename postgresql.command_tag as \"命令\"\n|rename postgresql.sql as \"sql语句\""}
{"input": "统计过去60分钟内,在bin路径下,执行过ps、gcc等13个命令的进程,按时间和命令分组统计每个时间段每个命令出现的次数。索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "linux日志数据，编写查询语句实现如下分析场景", "output": "starttime=\"-60m/m\" endtime=\"now\"((appname:linux tag:audit) OR (appname:linux linux.log_type:audit)) AND(\"bin/*\") AND (linux.command:\"ps\" OR linux.command:\"gcc\" OR linux.command:\"whoami\" OR linux.command:\"who\" OR linux.command:\"w\" OR linux.command:\"id\" OR linux.command:\"uname\" OR linux.command:\"nc\" OR linux.command:\"socat\" OR linux.command:\"wget\" OR linux.command:\"useradd\" OR linux.command:\"userdel\" OR linux.command:\"curl\" OR linux.command:\"mkfifo\" OR linux.command:\"adduser\" OR linux.command:\"ifconfig\") \n|eval time=formatdate(timestamp,\"MMM dd HH:mm\")\n| stats count() as cnt by time,linux.event_id,linux.event_detail.ppid,linux.event_detail.pid,linux.command\n| fields time,linux.event_id,linux.event_detail.ppid,linux.event_detail.pid,linux.command"}
{"input": "esxi内存占用top10进程，占用量指标按小数点后 2 位展示 Mb 单位。索引可用字段有：esxi.action, esxi.cpu, esxi.log_level, esxi.metric, esxi.pid, esxi.run_cmd, esxi.src_ip, esxi.sys_time, esxi.tags.host, esxi.user, esxi.user_agent, esxi.valude, esxi.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "VMware_Esxi监控数据，编写查询语句实现如下分析场景", "output": "appname:esxi hrSWRunPerfMem | stats count() by esxi.pid,esxi.valude| sort by esxi.valude |limit 10 |eval src_valude=tolong(esxi.valude )|eval Mb=src_valude/1024|eval last_valude=format(\"%.2f\",Mb)|fields esxi.pid,last_valude"}
{"input": "索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，哪些直播频道的播放吞吐量最高？", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0 stb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)|stats avg(avgThroughput) as avg_avgThroughput by stb_vixtel_smpegts.programName|eval avg_avgThroughput_1=format(\"%.2f\",avg_avgThroughput/1000000)|sort by avg_avgThroughput_1|limit 10|fields stb_vixtel_smpegts.programName,avg_avgThroughput_1"}
{"input": "索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，有没有哪些直播频道出现过比较高的卡顿率呢？可以列出前十个吗？", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0 stb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)|stats avg(tsLostRate) as avg_tsLostRate by stb_vixtel_smpegts.programName|eval avg_tsLostRate_1=format(\"%.2f\",avg_tsLostRate)|sort by avg_tsLostRate_1|limit 10|fields stb_vixtel_smpegts.programName,avg_tsLostRate_1"}
{"input": "索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，有哪些直播频道的质量比较高呢？可以给我排名前十的吗？", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0 stb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)|stats avg(avgMos) as avg_avgMos by stb_vixtel_smpegts.programName|eval avg_avgMos_1=format(\"%.2f\",avg_avgMos)|sort by avg_avgMos_1 |limit 10|fields stb_vixtel_smpegts.programName,playCount "}
{"input": "索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，我的服务器有几个报错吗？你可以把结果打印出来吗？", "output": "appname:aix tag:errpt| stats count(hostname) as count_ by  hostname,aix.type_dec,timestamp,aix.class_dec,aix.resource_name |eval ts=formatdate(timestamp)|limit 50 |fields ts,hostname,aix.type_dec,aix.class_dec,aix.resource_name "}
{"input": "", "instruction": "我想要知道发生过哪些异常交易，并且只显示十条记录。你能帮我吗？", "output": "appname:tdx AND [[appname:tdx \"银证\" 失败 |stats count() by TDX.TRANSACTION_ID |limit 10| fields TDX.TRANSACTION_ID]]| eval time=formatdate(timestamp,\"yy-dd HH:mm:ss\")| table time,TDX.BUSINESS_TYPE,TDX.REQUEST_TYPE,TDX.DEPARTMENT,TDX.CLIENT_IP,TDX.TDX_ID_ZJZH,TDX.TDX_ID_KHXM,TDX_ID_YHZH,TDX.TDX_ID_ZZFX,TDX.TDX_ID_ZZJE,TDX.THREAD_ID,TDX.TDX_ID_RESULT"}
{"input": "索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，有没有哪些直播频道在观众数量和质量上都比较高呢？可以列出十个吗？", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0stb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知|stats count(stb_vixtel_smpegts.programName) as playCount by stb_vixtel_smpegts.programName|sort by playCount|limit 10|fields stb_vixtel_smpegts.programName,playCount"}
{"input": "索引可用字段有：oracle.ACCOUNT_STATUS, oracle.ACTION, oracle.ACTION_NAME, oracle.BLOCK_CHANGES, oracle.CREATED, oracle.EVENT, oracle.EXECUTIONS, oracle.EXPIRY_DATE, oracle.FILE_COUNTS, oracle.FILE_SIZE, oracle.FREE_BYTES, oracle.GRANTED_ROLE, oracle.GRANTEE, oracle.HOST_NAME, oracle.INSTANCE_NAME, oracle.JOB, oracle.LAST_DATE, oracle.LIMIT, oracle.LOCK_DATE, oracle.LOGON_TIME, oracle.LOG_USER, oracle.MACHINE, oracle.NEXT_DATE, oracle.Name, oracle.ORACODE, oracle.OSUSER, oracle.PHYSICAL_READS, oracle.PROFILE, oracle.PROG, oracle.PROGRAM, oracle.RESOURCE_NAME, oracle.RESOURCE_TYPE, oracle.SID, oracle.SPID, oracle.SQL_ID, oracle.SQL_TEXT, oracle.STATUS, oracle.TABLESPACE_NAME, oracle.TERMINAL, oracle.TOTAL_BLOCKS, oracle.TOTAL_BYTES, oracle.TS_COUNTS, oracle.USED_BYTES, oracle.USED_SIZE, oracle.USERNAME, oracle.VALUE, oracle.WAIT_TIME, oracle.WHAT, oracle.action, oracle.conn_str.HOST, oracle.conn_str.SID, oracle.description, oracle.event, oracle.host, oracle.host_addr, oracle.logical_reads_M, oracle.login_user, oracle.msg, oracle.ora_code, oracle.osprivilege, oracle.physical_reads_M, oracle.policy, oracle.src_ip, oracle.status, oracle.tns_error, oracle.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，同一应用下有哪些用户的配置信息最多？可以按不同的维度进行统计和排序吗？", "output": "appname:oracle tag:user_profiles|stats count()  as ct by oracle.RESOURCE_NAME,oracle.RESOURCE_TYPE,oracle.LIMIT,oracle.PROFILE |sort by ct |fields oracle.RESOURCE_NAME,oracle.RESOURCE_TYPE,oracle.LIMIT,oracle.PROFILE"}
{"input": "索引可用字段有：cdn.cdn_status, cdn.clientip.geo.city, cdn.clientip.geo.isp, cdn.domain, cdn.event_name, cdn.finished_body_response, cdn.geo.city, cdn.geo.country, cdn.geo.province, cdn.http_status, cdn.prefix_url, cdn.proto, cdn.remote_addr, cdn.request_domain, cdn.request_url, cdn.src_outside_ip, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "不同地区的用户访问该CDN服务时所用的带宽总和有多大？", "output": "appname:cdn tag:aofei cdn.geo.country:\"中国\" | eval stype=case(cdn.geo.isp == \"电信\", \"电信\", cdn.geo.isp == \"联通\", \"联通\", cdn.geo.isp == \"移动\", \"移动\",  default, \"其他\") | stats sum(cdn.body_size) as _sum by cdn.geo.province, stype | eval t = format( \"%.2f\", _sum / 1024 /1024 /1024)| sort by cdn.geo.province  | fields cdn.geo.province,stype,t "}
{"input": "索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我在询问的是以下内容：这是一个使用日志易SPL（Search Processing Language）语法编写的搜索语句，它可以从指定的 Logstash 实例中检索最近 10 个小时内出现过的 AIX 系统错误事件的数量、发生的时间、错误等级、错误类别和相关资源名称等信息。", "output": "appname:aix tag:errpt| stats count(hostname) as count_ by  hostname,aix.type_dec,timestamp,aix.class_dec,aix.resource_name |eval ts=formatdate(timestamp)|limit 10 |fields ts,hostname,aix.type_dec,aix.class_dec,aix.resource_name "}
{"input": "", "instruction": "我正在查找交易所的‘tdx’应用的访问记录，其中包括业务类型、事件类型、营业部、客户端 IP、客户登录号、线程号以及请求结果等字段。", "output": "appname:tdx AND [[appname:tdx \"客户校验\" 失败 |stats count() by TDX.TRANSACTION_ID |limit 10| fields TDX.TRANSACTION_ID]]| eval time=formatdate(timestamp,\"yy-dd HH:mm:ss\")| table time,TDX.BUSINESS_TYPE,TDX.REQUEST_TYPE,TDX.DEPARTMENT,TDX.CLIENT_IP,TDX.TDX_ID_XT_LOGINID,TDX.THREAD_ID,TDX.TDX_ID_RESULT"}
{"input": "索引可用字段有：postgresql.command_tag, postgresql.database, postgresql.duration, postgresql.error_severity, postgresql.ip, postgresql.sql_state_code, postgresql.stringmess, postgresql.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，在过去一小时的内，哪些用户使用了 PostgreSQL 来执行了最多的 SQL 查询？以及这些查询花费的时间分别是多少？", "output": "appname:postgresql   postgresql.duration:* | eval ts1=formatdate(timestamp)| stats count() by ts1,postgresql.user,postgresql.database,postgresql.duration,postgresql.command_tag,postgresql.sql|sort by postgresql.duration|limit 50|fields ts1,postgresql.user,postgresql.database,postgresql.duration,postgresql.command_tag,postgresql.sql"}
{"input": "索引可用字段有：esxi.action, esxi.cpu, esxi.log_level, esxi.metric, esxi.pid, esxi.run_cmd, esxi.src_ip, esxi.sys_time, esxi.tags.host, esxi.user, esxi.user_agent, esxi.valude, esxi.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问关于 ESXi 主机上的进程运行性能和内存使用情况的信息：1. 使用 appname:esxi 来筛选出与 ESXi 相关的所有应用记录；2. 通过 HRSWRUNPERFMEM 命令获取每个进程的内存使用信息并统计数量；3. 根据 esxi.value 字段的值进行排序，并取 Top 10 个最高使用的进程；4. 将内存使用量转换为 MB 单位，并将结果存储在 last_valude 中；5. 以 fields 和 rename 子句将列名修改为 pid、内存占用（MB）这两个字段。", "output": "appname:esxi hrSWRunPerfMem | stats count() by esxi.pid,esxi.valude| sort by esxi.valude |limit 10 |eval src_valude=tolong(esxi.valude )|eval Mb=src_valude/1024|eval last_valude=format(\"%.2f\",Mb)|fields esxi.pid,last_valude|rename last_valude as \"内存占用/Mb\""}
{"input": "索引可用字段有：esxi.action, esxi.cpu, esxi.log_level, esxi.metric, esxi.pid, esxi.run_cmd, esxi.src_ip, esxi.sys_time, esxi.tags.host, esxi.user, esxi.user_agent, esxi.valude, esxi.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "ESXi 主机上哪些进程消耗了 the most memory?", "output": "appname:esxi hrSWRunPerfMem | stats count() by esxi.pid,esxi.valude| sort by esxi.valude |limit 10 |eval src_valude=tolong(esxi.valude )|eval Mb=src_valude/1024|eval last_valude=format(\"%.2f\",Mb)|fields esxi.pid,last_valude"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，上一个小时到现在为止，在服务器上有哪些进程使用了 ps、gcc、whoami、who、w、id、uname、nc、socat、wget、useradd、userdel、curl、mkfifo、adduser、ifconfig等命令？", "output": "starttime=\"-60m/m\" endtime=\"now\"((appname:linux tag:audit) OR (appname:linux linux.log_type:audit)) AND(\"bin/*\") AND (linux.command:\"ps\" OR linux.command:\"gcc\" OR linux.command:\"whoami\" OR linux.command:\"who\" OR linux.command:\"w\" OR linux.command:\"id\" OR linux.command:\"uname\" OR linux.command:\"nc\" OR linux.command:\"socat\" OR linux.command:\"wget\" OR linux.command:\"useradd\" OR linux.command:\"userdel\" OR linux.command:\"curl\" OR linux.command:\"mkfifo\" OR linux.command:\"adduser\" OR linux.command:\"ifconfig\") |eval time=formatdate(timestamp,\"MMM dd HH:mm\")| stats count() as cnt by time,linux.event_id,linux.event_detail.ppid,linux.event_detail.pid,linux.command| fields time,linux.event_id,linux.event_detail.ppid,linux.event_detail.pid,linux.command "}
{"input": "", "instruction": "关联 CDN 日志 和 nginx 日志，查询来自 223.74.12.16 的请求，列出其请求时间和请求 URL，保留原始字段名不变", "output": "(appname:nginx_log OR appname:cdn_log) AND (cdn.remote_addr:\"223.74.12.16\" OR nginx.real_ip.last:\"223.74.12.16\") |fields timestamp,cdn.request_url,nginx.request_raw.request_url"}
