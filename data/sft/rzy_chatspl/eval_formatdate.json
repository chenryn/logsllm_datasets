{"input": "", "instruction": "将时间戳转换为人类可读格式", "output": "* | eval mytime=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\")"}
{"input": "", "instruction": "linux_定时任务执行变更记录，表格列出时间、IP、执行信息。时间采用人类可读格式，执行信息格式为：\"主机{IP}出现修改情况，请注意\"", "output": "tag:crond type:crontab |table timestamp,ip |eval timestamp=formatdate(timestamp, \"yyyy-MM-dd HH:mm:ss\") |eval exec_msg=\"主机\"+ip+\"出现修改情况，请注意\""}
{"input": "", "instruction": "查看日志年份", "output": "* |eval year=formatdate(now(),\"yyyy\")"}
{"input": "", "instruction": "查看日志月份", "output": "* |eval month=formatdate(now(),\"MM\")"}
{"input": "告警明细", "instruction": "综合态势感知数据，编写查询语句实现如下分析场景", "output": "_index:monitor  issue_alert:true|eval time=formatdate(timestamp)|table time,alert_name,alert_level,total_hits"}
{"input": "告警明细", "instruction": "日志易告警监控-数据，编写查询语句实现如下分析场景", "output": "_index:monitor  issue_alert:true |eval time=formatdate(timestamp)|table time,alert_name,alert_level,total_hits|sort by time"}
{"input": "证书下载过程明细查询", "instruction": "网关_koal_ssl数据，编写查询语句实现如下分析场景", "output": "tag:koal_ssl ssl.alertgroup:CrlDownload  |sort by ssl.trans_id,timestamp|eval timestamp = formatdate(timestamp) |table timestamp,raw_message"}
{"input": "核心lis_错误明细", "instruction": "核心_bea数据，编写查询语句实现如下分析场景", "output": "tag:lis error|eval instance = coalesce(tomcat.instance,bea.instance,other.instance) |eval timestamp = formatdate(timestamp)| table timestamp,ip,instance,raw_message|sort by timestamp"}
{"input": "最新 20 条日志明细查询", "instruction": "网关_koal_ssl数据，编写查询语句实现如下分析场景", "output": "tag:koal_ssl |eval timestamp=formatdate(timestamp) |table timestamp,ssl.alertgroup,raw_message |limit 20 "}
{"input": "", "instruction": "最近一个月内Mysql数据库用户数量变更详情。从 schedule 索引中搜索预先统计好的 Mysql 数据库用户数量变革统计数据，转换时间戳格式为年月日。", "output": "starttime=\"-1M/M\" endtime=\"now\" _index:schedule schedule_name:Mysql数据库用户数量变更统计 (desc:用户增加 OR desc:用户删除)|eval date=formatdate(timestamp,\"yyyy-MM-dd\") "}
{"input": "从定时任务索引里统计来帐无应答交易，任务 id 为 43，将 msgcd 和 msgNa 用下划线拼接在一起，赋值给字段 msgcd。然后对 reqTime、msgid、msgcd 做分组统计，对 reqTime 转换为数值后做时间戳解析，时间格式为MM-dd HH:mm.ss.SSS。最后去掉 cnt 字段", "instruction": "查询农信银支付前置(mfe)系统数据，进行如下统计", "output": "_index:schedule schedule_id:43| eval msgcd=format(\"%s_%s\",msgcd,msgNa)| stats count() as cnt by reqTime,msgid,msgcd| eval reqTime=formatdate(tolong(reqTime),\"MM-dd HH:mm.ss.SSS\")| fields -cnt"}
{"input": "", "instruction": "我想要知道发生的告警情况，并按时间排序。请帮我把这些信息打印出来。", "output": "_index:monitor  issue_alert:true |eval time=formatdate(timestamp)|table time,alert_name,alert_level,total_hits|sort by time"}
{"input": "", "instruction": "我在询问 MySQL 数据库中关于“调度”主题下的某一天内发生的所有索引为 “schedule”、名称包含“ Mysql数据库用户数量变更统计 ”并且以降序排列的条目（即按时间从新到旧排序）的信息，其中包括创建或修改的时间戳和事件类型（增加或减少）。", "output": "starttime=\"-1M/M\" endtime=\"now\" _index:schedule schedule_name:Mysql数据库用户数量变更统计 (desc:用户增加 OR desc:用户删除)|eval date=formatdate(timestamp,\"yyyy-MM-dd\") "}
{"input": "登录失败日志明细", "instruction": "windows日志数据，编写查询语句实现如下分析场景", "output": "appname:windows json.username:${username}|eval time=formatdate(timestamp)|table time,json.username,json.event_data.IpAddress,raw_message"}
{"input": "windows错误日志明细 50 条", "instruction": "windows日志数据，编写查询语句实现如下分析场景", "output": "appname:windows tag:system  (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\")|eval time=formatdate(timestamp)|limit 50 |table time,ip,json.message.event"}
{"input": "", "instruction": "我想要知道发生的系统故障或者崩溃的信息，可以这样做：1. 使用 appname: windows 来筛选出属于 Windows 操作系统的日志；2. 使用 tag: system 以获取与系统相关的所有日志；3. 在搜索字段中加入一些常见的系统错误或故障关键词（比如 failed、err、error、errors、warn、warning、failure）以便更准确地找到目标信息；4. 将时间戳转换为人类可读的时间格式，使用 formatdate 函数实现；5. 对结果进行排序并限制数量显示最多 50 条记录即可。", "output": "appname:windows tag:system  (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\")|eval time=formatdate(timestamp)|limit 50 |table time,ip,json.message.event"}
{"input": "exchange追踪日志详情100条。索引可用字段有：exchange.client_hostname, exchange.clientip.geo.ip, exchange.dst.geo.city, exchange.dst.geo.country, exchange.dst_ip, exchange.event_id, exchange.message_subject, exchange.recipient_address, exchange.recipient_count, exchange.recipient_status, exchange.sender_address, exchange.server_hostname, exchange.source, exchange.src_ip, exchange.status, exchange.total_bytes, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "exchange日志数据，编写查询语句实现如下分析场景", "output": "appname:exchange tag:tracking |eval time= formatdate(timestamp)|limit 100|table time,exchange.event_id,exchange.source,exchange.message_subject,exchange.sender_address,exchange.recipient_address,exchange.clientip.geo.ip,exchange.client_hostname,exchange.dst_ip,exchange.server_hostname,exchange.recipient_status,exchange.total_bytes,exchange.recipient_count|limit 100"}
{"input": "用户主动上报数据，展示前 10 条。索引可用字段有：stb.area_code_dec, stb.kvmsg.UserId.area_code_dec, stb.kvmsg.cmd, stb.kvmsg.logtype_dec, stb.kvmsg.networktype_dec, stb.loss, stb.reporttype_dec, stb.user_account, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒自助服务系统数据，编写查询语句实现如下分析场景", "output": "appname:stb tag:userreport |eval time=formatdate(timestamp) |limit 10 "}
{"input": "", "instruction": "DDOS攻击数据上报(ADS)，时间戳格式人类可读，只保留时间和类型字段", "output": "appname:sdc AND pipeline:\"DDOS攻击数据上报(ADS)\"  |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\")  |fields time,type"}
{"input": "", "instruction": "病毒感染数据上报，时间格式可读，只保留时间和类型字段", "output": "appname:sdc AND pipeline:\"病毒感染数据上报\"  |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\")  |fields time,type"}
{"input": "", "instruction": "垃圾邮件总数数据上报，时间格式可读，只保留时间和类型字段", "output": "appname:sdc AND pipeline:\"垃圾邮件总数数据上报\"  |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\")  |fields time,type"}
{"input": "", "instruction": "网络攻击数据上报(IDS)，时间格式可读，只保留时间和类型字段", "output": "appname:sdc AND pipeline:\"网络攻击数据上报(IDS)\"  |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\")  |fields time,type"}
{"input": "", "instruction": "从rizhiyi中查询年份", "output": "appname:rizhiyi |eval year=tonumber(formatdate(now(),\"yyyy\")) |fields year"}
{"input": "", "instruction": "从rizhiyi中查询月份", "output": "appname:rizhiyi |eval month=tonumber(formatdate(now(),\"MM\")) |fields month"}
{"input": "", "instruction": "从rizhiyi中查询日期", "output": "appname:rizhiyi |eval day=tonumber(formatdate(now(),\"dd\")) "}
{"input": "", "instruction": "从rizhiyi中查询当前年月日", "output": "appname:rizhiyi |eval currentday=formatdate(now(),\"yyyy.MM.dd\")"}
{"input": "Redis最近两天高等级事件列表。索引可用字段有：redis.action, redis.level, redis.mem_fragmentation_ratio, redis.redis_version, redis.role, redis.total_system_memory_human, redis.type, redis.used_memory_peak_human, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "starttime=\"-2d\" appname:redis  AND redis.level:\"#\" |eval '级别'=\"Warning\" | eval time=formatdate(timestamp, \"MM-dd:HH:mm:ss\")| table time, ip, '级别', raw_message"}
{"input": "搜索来自 202.106.0.23 的Nginx访问错误日志详情，转换时间戳为HH:mm格式。索引可用字段有：nginx.bytes, nginx.clientip, nginx.event, nginx.geo.city, nginx.geo.isp, nginx.geo.province, nginx.method, nginx.real_ip.last, nginx.request_path, nginx.request_raw.request_url, nginx.request_time, nginx.src_ip, nginx.status, nginx.upstream, nginx.uri, nginx.user_agent.browser, nginx.user_agent.device, nginx.user_agent.os, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "中间件_nginx_数据，编写查询语句实现如下分析场景", "output": "appname:nginx tag:error nginx.src_ip:202.106.0.23|eval ts=formatdate(timestamp,\"HH:mm\")"}
{"input": "登录方式分布。索引可用字段有：vpn.action, vpn.actor.displayName, vpn.actype, vpn.app.upstream.host, vpn.app.upstream.port, vpn.app.web.request.url, vpn.auth_dst, vpn.dst.geo.city, vpn.dst.geo.country, vpn.dst.geo.ip, vpn.dst.geo.isp, vpn.dst.geo.latitude, vpn.dst.geo.longitude, vpn.dst.geo.province, vpn.dst_ip, vpn.dst_nt_host, vpn.dst_port, vpn.event_level, vpn.event_name, vpn.kv.dst.geo.country, vpn.kv.dst.geo.latitude, vpn.kv.dst.geo.longitude, vpn.kv.msg, vpn.kv.proto, vpn.kv.src.geo.city, vpn.kv.src.geo.country, vpn.kv.src.geo.latitude, vpn.kv.src.geo.longitude, vpn.kv.user, vpn.login_user, vpn.msg, vpn.msg.virtual_ip, vpn.proto, vpn.reason, vpn.resource_name, vpn.result, vpn.seconds, vpn.src._ip, vpn.src.geo.city, vpn.src.geo.country, vpn.src.geo.ip, vpn.src.geo.isp, vpn.src.geo.latitude, vpn.src.geo.longitude, vpn.src.geo.province, vpn.src_ip, vpn.src_ip.geo.city, vpn.src_ip.geo.country, vpn.src_port, vpn.state, vpn.target.displayName, vpn.time, vpn.transport, vpn.user, vpn.user_name, vpn.vpn.login_user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "vpn_softether数据，编写查询语句实现如下分析场景", "output": "appname:vpn tag:softether vpn.action:*  | eval time=formatdate(timestamp,\"HH:mm\") | stats dc(time) as cnt by 'vpn.msg.登录方式'"}
{"input": "认证类型。索引可用字段有：vpn.action, vpn.actor.displayName, vpn.actype, vpn.app.upstream.host, vpn.app.upstream.port, vpn.app.web.request.url, vpn.auth_dst, vpn.dst.geo.city, vpn.dst.geo.country, vpn.dst.geo.ip, vpn.dst.geo.isp, vpn.dst.geo.latitude, vpn.dst.geo.longitude, vpn.dst.geo.province, vpn.dst_ip, vpn.dst_nt_host, vpn.dst_port, vpn.event_level, vpn.event_name, vpn.kv.dst.geo.country, vpn.kv.dst.geo.latitude, vpn.kv.dst.geo.longitude, vpn.kv.msg, vpn.kv.proto, vpn.kv.src.geo.city, vpn.kv.src.geo.country, vpn.kv.src.geo.latitude, vpn.kv.src.geo.longitude, vpn.kv.user, vpn.login_user, vpn.msg, vpn.msg.virtual_ip, vpn.proto, vpn.reason, vpn.resource_name, vpn.result, vpn.seconds, vpn.src._ip, vpn.src.geo.city, vpn.src.geo.country, vpn.src.geo.ip, vpn.src.geo.isp, vpn.src.geo.latitude, vpn.src.geo.longitude, vpn.src.geo.province, vpn.src_ip, vpn.src_ip.geo.city, vpn.src_ip.geo.country, vpn.src_port, vpn.state, vpn.target.displayName, vpn.time, vpn.transport, vpn.user, vpn.user_name, vpn.vpn.login_user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "vpn_softether数据，编写查询语句实现如下分析场景", "output": "appname:vpn tag:softether vpn.action:*  | eval time=formatdate(timestamp,\"HH:mm\") | stats dc(time) as cnt by 'vpn.msg.认证类型'"}
{"input": "登录地区分布。索引可用字段有：vpn.action, vpn.actor.displayName, vpn.actype, vpn.app.upstream.host, vpn.app.upstream.port, vpn.app.web.request.url, vpn.auth_dst, vpn.dst.geo.city, vpn.dst.geo.country, vpn.dst.geo.ip, vpn.dst.geo.isp, vpn.dst.geo.latitude, vpn.dst.geo.longitude, vpn.dst.geo.province, vpn.dst_ip, vpn.dst_nt_host, vpn.dst_port, vpn.event_level, vpn.event_name, vpn.kv.dst.geo.country, vpn.kv.dst.geo.latitude, vpn.kv.dst.geo.longitude, vpn.kv.msg, vpn.kv.proto, vpn.kv.src.geo.city, vpn.kv.src.geo.country, vpn.kv.src.geo.latitude, vpn.kv.src.geo.longitude, vpn.kv.user, vpn.login_user, vpn.msg, vpn.msg.virtual_ip, vpn.proto, vpn.reason, vpn.resource_name, vpn.result, vpn.seconds, vpn.src._ip, vpn.src.geo.city, vpn.src.geo.country, vpn.src.geo.ip, vpn.src.geo.isp, vpn.src.geo.latitude, vpn.src.geo.longitude, vpn.src.geo.province, vpn.src_ip, vpn.src_ip.geo.city, vpn.src_ip.geo.country, vpn.src_port, vpn.state, vpn.target.displayName, vpn.time, vpn.transport, vpn.user, vpn.user_name, vpn.vpn.login_user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "vpn_softether数据，编写查询语句实现如下分析场景", "output": "appname:vpn tag:softether vpn.action:*  | eval time=formatdate(timestamp,\"HH:mm\") | stats dc(time) as cnt by vpn.src.geo.province,vpn.src.geo.city"}
{"input": "用户登录次数。索引可用字段有：vpn.action, vpn.actor.displayName, vpn.actype, vpn.app.upstream.host, vpn.app.upstream.port, vpn.app.web.request.url, vpn.auth_dst, vpn.dst.geo.city, vpn.dst.geo.country, vpn.dst.geo.ip, vpn.dst.geo.isp, vpn.dst.geo.latitude, vpn.dst.geo.longitude, vpn.dst.geo.province, vpn.dst_ip, vpn.dst_nt_host, vpn.dst_port, vpn.event_level, vpn.event_name, vpn.kv.dst.geo.country, vpn.kv.dst.geo.latitude, vpn.kv.dst.geo.longitude, vpn.kv.msg, vpn.kv.proto, vpn.kv.src.geo.city, vpn.kv.src.geo.country, vpn.kv.src.geo.latitude, vpn.kv.src.geo.longitude, vpn.kv.user, vpn.login_user, vpn.msg, vpn.msg.virtual_ip, vpn.proto, vpn.reason, vpn.resource_name, vpn.result, vpn.seconds, vpn.src._ip, vpn.src.geo.city, vpn.src.geo.country, vpn.src.geo.ip, vpn.src.geo.isp, vpn.src.geo.latitude, vpn.src.geo.longitude, vpn.src.geo.province, vpn.src_ip, vpn.src_ip.geo.city, vpn.src_ip.geo.country, vpn.src_port, vpn.state, vpn.target.displayName, vpn.time, vpn.transport, vpn.user, vpn.user_name, vpn.vpn.login_user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "vpn_softether数据，编写查询语句实现如下分析场景", "output": "appname:vpn tag:softether vpn.action:*  | eval time=formatdate(timestamp,\"HH:mm\") | stats dc(time) as cnt by vpn.user|sort by cnt"}
{"input": "查看来自192.168.1.141的kingdee访问错误详情日志，以HH:mm格式展示时间。", "instruction": "金蝶kingdee数据，编写查询语句实现如下分析场景", "output": "appname:kingdee tag:error middleware.src_ip:192.168.1.141 | eval ts=formatdate(timestamp,\"HH:mm\")"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "linux最新20条错误事件明细，表格形式展示时间、IP 地址、进程 ID、类型、事件内容，按时间排序并将时间戳改为人类可读格式", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.type,linux.msg|sort by time|limit 20"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "linux最新10条错误事件明细，表格形式展示时间、IP 地址、进程 ID、类型、事件内容，按时间排序并将时间戳改为人类可读格式", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.type,linux.msg|sort by time|limit 10"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "linux最新10条错误事件明细，表格形式展示时间、IP 地址、进程 ID、事件内容，按时间排序并将时间戳改为人类可读格式", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.msg|sort by time|limit 10"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "表格展示linux最新20条错误事件明细，时间戳要人类可读", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.type,linux.msg|sort by time|limit 20"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "表格展示linux最新100条错误事件明细，时间戳要人类可读", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.type,linux.msg|sort by time|limit 100"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "linux最新10条错误事件明细，包括时间、IP、进程号和日志原文", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.type,linux.msg|sort by time|limit 10"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "linux最新50条错误事件明细，包括时间、地址、进程号和消息体", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.type,linux.msg|sort by time|limit 50"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "linux最新5条错误事件明细", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.type,linux.msg|sort by time|limit 5"}
{"input": "", "instruction": "从rzyxt中查询License到期时间，将到期时间中的 T 标记和 Z 时区去掉，修改为人类可读格式", "output": "appname:rzyxt tag:license_info  |eval expired_timestamp=parsedate(mes.expired_timestamp,\"yyyy-MM-dd'T'HH:mm:ssZ\") |eval expired_timestamp=formatdate(expired_timestamp,\"yyyy-MM-dd HH:mm:ss\") |table expired_timestamp "}
{"input": "", "instruction": "从rzyxt中查询License到期时间的最近 1 次记录，按年月日时分秒格式展示 ISO8601 格式的到期时间", "output": "appname:rzyxt tag:license_info  |eval expired_timestamp=parsedate(mes.expired_timestamp,\"yyyy-MM-dd'T'HH:mm:ssZ\") |eval expired_timestamp=formatdate(expired_timestamp,\"yyyy-MM-dd HH:mm:ss\") |table expired_timestamp  |limit 1"}
{"input": "", "instruction": "从rzyxt中查询License到期时间的最近 5 次记录，解析 ISO8601 格式的到期时间并展示为 yyyy-MM-dd HH:mm:ss格式", "output": "appname:rzyxt tag:license_info  |eval expired_timestamp=parsedate(mes.expired_timestamp,\"yyyy-MM-dd'T'HH:mm:ssZ\") |eval expired_timestamp=formatdate(expired_timestamp,\"yyyy-MM-dd HH:mm:ss\") |table expired_timestamp  |limit 5"}
{"input": "", "instruction": "从rzyxt中查询License到期时间的最近 50 次记录", "output": "appname:rzyxt tag:license_info  |eval expired_timestamp=parsedate(mes.expired_timestamp,\"yyyy-MM-dd'T'HH:mm:ssZ\") |eval expired_timestamp=formatdate(expired_timestamp,\"yyyy-MM-dd HH:mm:ss\") |table expired_timestamp |limit 50"}
{"input": "", "instruction": "从rzyxt中查询License到期时间的最近 20 次记录", "output": "appname:rzyxt tag:license_info  |eval expired_timestamp=parsedate(mes.expired_timestamp,\"yyyy-MM-dd'T'HH:mm:ssZ\") |eval expired_timestamp=formatdate(expired_timestamp,\"yyyy-MM-dd HH:mm:ss\") |table expired_timestamp |limit 20"}
{"input": "错误日志明细 50 条。索引可用字段有：windows.EventData.Data, windows.IpAddress, windows.System.EventID.text, windows.System.Level, windows.System.Provider.Name, windows.event_type, windows.level, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "windows日志数据，编写查询语句实现如下分析场景", "output": " appname:windows AND tag:application  (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\") |limit 50|eval time=formatdate(timestamp)|table time,ip,raw_message"}
{"input": "IPS请求事件明细表，时间展示为时分秒格式，仅看 5 条。索引可用字段有：ips.action, ips.application, ips.attack_name, ips.attack_type, ips.block_reason, ips.cve, ips.dst.geo.city, ips.dst.geo.ip, ips.dst.geo.latitude, ips.dst.geo.longitude, ips.dst_ip, ips.dst_port, ips.event, ips.event_id, ips.event_level, ips.event_name, ips.inbound_interface, ips.inbound_zone, ips.level, ips.local, ips.msg.seclevel, ips.outbound_interface, ips.outbound_zone, ips.policy, ips.proto, ips.service, ips.severity, ips.src.geo.city, ips.src.geo.country, ips.src.geo.ip, ips.src.geo.latitude, ips.src.geo.longitude, ips.src.geo.province, ips.src_ip, ips.src_port, ips.url, ips.vendor_app, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "ips_nsfocus数据，编写查询语句实现如下分析场景", "output": "appname:ips tag:nsfocus  | eval time = formatdate(timestamp,\"HH:mm:ss\") | table time,ips.src.geo.ip,ips.src_port,ips.dst.geo.ip,ips.dst_port,ips.event_id,ips.event_name,ips.level,ips.proto,ips.local | limit 5 "}
{"input": "非 INFO 级别的错误日志，查看前 50 条。", "instruction": "zookeeper日志数据，编写查询语句实现如下分析场景", "output": "(appname:zookeeper tag:zookeeper_log) AND NOT middleware.level:INFO| limit 50|eval time=formatdate(timestamp)|table time,ip,raw_message"}
{"input": "前 100 条系统 sudo操作详情，展示用户名命令和 TTY 值。索引可用字段有：switch.IP, switch.action, switch.auth_method, switch.bandwidth, switch.brief, switch.cmd, switch.count, switch.desc, switch.desc.cmd, switch.desc.user, switch.describe, switch.ethernet, switch.event_type, switch.facility, switch.host, switch.host_ip, switch.interface_name, switch.ip, switch.kv.COMMAND, switch.kv.TTY, switch.kv.USER, switch.kvmsg.IpAddress, switch.kvmsg.UserName, switch.level, switch.log_message, switch.log_type, switch.login_method, switch.mode, switch.module, switch.port, switch.port_channel, switch.reason, switch.result, switch.severity, switch.speed, switch.src_ip, switch.src_mac, switch.state, switch.terminal, switch.time, switch.user, switch.vlan, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "arista交换机日志数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:arista   (NOT switch.severity:*) switch.module:sudo|eval time=formatdate(timestamp,\"MM-dd HH:mm\") | table time,switch.kv.USER,switch.kv.COMMAND,switch.kv.TTY  |limit 100"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Linux主机账号密码更改或重置事件，按小时统计每个 IP 和用户的次数", "output": "appname:linux event_name:密码修改事件 \"password changed for\" | eval hour=formatdate(timestamp,\"HH\") |stats count() as cnt  by hour,ip,user "}
{"input": "索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "aix使用终端直接登录列表_日报", "output": " appname:aix tag:last aix.type:vty*  | stats count(hostname) as count_ by hostname,aix.user,aix.type,timestamp   |eval ts=formatdate(timestamp)"}
{"input": "网神防火墙攻击明细。索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "网神数据，编写查询语句实现如下分析场景", "output": "((appname:firewall AND tag:legendsec) AND firewall.mod:ad)|eval time = formatdate(timestamp)|stats count() by  time,firewall.attack_name,firewall.sip,firewall.dip"}
{"input": "主机登录失败列表，按 hostname、aix.user、aix.type、aix.src_ip 和 timestamp 统计并展示表格，timestamp 转换为可读格式。", "instruction": "aix日志数据，编写查询语句实现如下分析场景", "output": "tag:failedlogin appname:aix| stats count(hostname) as count_ by hostname,aix.user,aix.type,aix.src_ip,timestamp \n|eval ts=formatdate(timestamp) "}
{"input": "SSH登录交换机事件数。索引可用字段有：switch.IP, switch.action, switch.auth_method, switch.bandwidth, switch.brief, switch.cmd, switch.count, switch.desc, switch.desc.cmd, switch.desc.user, switch.describe, switch.ethernet, switch.event_type, switch.facility, switch.host, switch.host_ip, switch.interface_name, switch.ip, switch.kv.COMMAND, switch.kv.TTY, switch.kv.USER, switch.kvmsg.IpAddress, switch.kvmsg.UserName, switch.level, switch.log_message, switch.log_type, switch.login_method, switch.mode, switch.module, switch.port, switch.port_channel, switch.reason, switch.result, switch.severity, switch.speed, switch.src_ip, switch.src_mac, switch.state, switch.terminal, switch.time, switch.user, switch.vlan, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "arista交换机日志数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:arista (NOT switch.severity:*)  sshd switch.src_ip:* |eval time=formatdate(timestamp,\"MM-dd HH:mm\") | stats count() as cnt "}
{"input": "ssh登录交换机源IP。索引可用字段有：switch.IP, switch.action, switch.auth_method, switch.bandwidth, switch.brief, switch.cmd, switch.count, switch.desc, switch.desc.cmd, switch.desc.user, switch.describe, switch.ethernet, switch.event_type, switch.facility, switch.host, switch.host_ip, switch.interface_name, switch.ip, switch.kv.COMMAND, switch.kv.TTY, switch.kv.USER, switch.kvmsg.IpAddress, switch.kvmsg.UserName, switch.level, switch.log_message, switch.log_type, switch.login_method, switch.mode, switch.module, switch.port, switch.port_channel, switch.reason, switch.result, switch.severity, switch.speed, switch.src_ip, switch.src_mac, switch.state, switch.terminal, switch.time, switch.user, switch.vlan, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "arista交换机日志数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:arista (NOT switch.severity:*)  sshd |eval time=formatdate(timestamp,\"MM-dd HH:mm\") | stats count() as cnt by switch.src_ip"}
{"input": "ssh登录用户占比。索引可用字段有：switch.IP, switch.action, switch.auth_method, switch.bandwidth, switch.brief, switch.cmd, switch.count, switch.desc, switch.desc.cmd, switch.desc.user, switch.describe, switch.ethernet, switch.event_type, switch.facility, switch.host, switch.host_ip, switch.interface_name, switch.ip, switch.kv.COMMAND, switch.kv.TTY, switch.kv.USER, switch.kvmsg.IpAddress, switch.kvmsg.UserName, switch.level, switch.log_message, switch.log_type, switch.login_method, switch.mode, switch.module, switch.port, switch.port_channel, switch.reason, switch.result, switch.severity, switch.speed, switch.src_ip, switch.src_mac, switch.state, switch.terminal, switch.time, switch.user, switch.vlan, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "arista交换机日志数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:arista (NOT switch.severity:*)  sshd |eval time=formatdate(timestamp,\"MM-dd HH:mm\") | stats count() as cnt by switch.user"}
{"input": "端口变化趋势。索引可用字段有：router.action, router.auth_result, router.device_name, router.error_msg, router.event_type, router.intf, router.intf_status, router.log_message, router.log_type, router.message, router.module, router.module_name, router.severity, router.src_ip, router.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "锐捷-路由器数据，编写查询语句实现如下分析场景", "output": "appname:router tag:ruijie router.module:LINEPROTO\n|eval time=formatdate(timestamp,\"MM-dd HH:mm\")|stats count() as cnt by time"}
{"input": "系统配置变更趋势。索引可用字段有：router.action, router.auth_result, router.device_name, router.error_msg, router.event_type, router.intf, router.intf_status, router.log_message, router.log_type, router.message, router.module, router.module_name, router.severity, router.src_ip, router.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "锐捷-路由器数据，编写查询语句实现如下分析场景", "output": "appname:router tag:ruijie router.action:CONFIG*\n|eval time=formatdate(timestamp,\"MM-dd HH:mm\")|stats count() as cnt by time"}
{"input": "errpt报错列表 10 条，时间戳改为人类可读格式。索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "aix日志数据，编写查询语句实现如下分析场景", "output": "appname:aix tag:errpt| stats count(hostname) as count_ by  hostname,aix.type_dec,timestamp,aix.class_dec,aix.resource_name\n|eval ts=formatdate(timestamp)|limit 10"}
{"input": "查看定时任务日志量前 20 的用户和命令行。索引可用字段有：switch.IP, switch.action, switch.auth_method, switch.bandwidth, switch.brief, switch.cmd, switch.count, switch.desc, switch.desc.cmd, switch.desc.user, switch.describe, switch.ethernet, switch.event_type, switch.facility, switch.host, switch.host_ip, switch.interface_name, switch.ip, switch.kv.COMMAND, switch.kv.TTY, switch.kv.USER, switch.kvmsg.IpAddress, switch.kvmsg.UserName, switch.level, switch.log_message, switch.log_type, switch.login_method, switch.mode, switch.module, switch.port, switch.port_channel, switch.reason, switch.result, switch.severity, switch.speed, switch.src_ip, switch.src_mac, switch.state, switch.terminal, switch.time, switch.user, switch.vlan, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "arista交换机日志数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:arista (NOT switch.severity:*)  crond |eval time=formatdate(timestamp,\"MM-dd HH:mm\") | stats count() as cnt by switch.user,switch.cmd |limit 20"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "最近 60 分钟内敏感命令监控", "output": "starttime=\"-60m/m\" endtime=\"now\"((appname:linux tag:audit) OR (appname:linux linux.log_type:audit)) AND(\"bin/*\") AND (linux.command:\"ps\" OR linux.command:\"gcc\" OR linux.command:\"whoami\" OR linux.command:\"who\" OR linux.command:\"w\" OR linux.command:\"id\" OR linux.command:\"uname\" OR linux.command:\"nc\" OR linux.command:\"socat\" OR linux.command:\"wget\" OR linux.command:\"useradd\" OR linux.command:\"userdel\" OR linux.command:\"curl\" OR linux.command:\"mkfifo\" OR linux.command:\"adduser\" OR linux.command:\"ifconfig\")  |eval time=formatdate(timestamp,\"MMM dd HH:mm\") | stats count() as cnt by time,linux.event_id,linux.event_detail.ppid,linux.event_detail.pid,linux.command "}
{"input": "索引可用字段有：vpn.action, vpn.actor.displayName, vpn.actype, vpn.app.upstream.host, vpn.app.upstream.port, vpn.app.web.request.url, vpn.auth_dst, vpn.dst.geo.city, vpn.dst.geo.country, vpn.dst.geo.ip, vpn.dst.geo.isp, vpn.dst.geo.latitude, vpn.dst.geo.longitude, vpn.dst.geo.province, vpn.dst_ip, vpn.dst_nt_host, vpn.dst_port, vpn.event_level, vpn.event_name, vpn.kv.dst.geo.country, vpn.kv.dst.geo.latitude, vpn.kv.dst.geo.longitude, vpn.kv.msg, vpn.kv.proto, vpn.kv.src.geo.city, vpn.kv.src.geo.country, vpn.kv.src.geo.latitude, vpn.kv.src.geo.longitude, vpn.kv.user, vpn.login_user, vpn.msg, vpn.msg.virtual_ip, vpn.proto, vpn.reason, vpn.resource_name, vpn.result, vpn.seconds, vpn.src._ip, vpn.src.geo.city, vpn.src.geo.country, vpn.src.geo.ip, vpn.src.geo.isp, vpn.src.geo.latitude, vpn.src.geo.longitude, vpn.src.geo.province, vpn.src_ip, vpn.src_ip.geo.city, vpn.src_ip.geo.country, vpn.src_port, vpn.state, vpn.target.displayName, vpn.time, vpn.transport, vpn.user, vpn.user_name, vpn.vpn.login_user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道有多少条记录的VPN认证类型是softether,并且包含了消息中含有\"认证类型\"这个词汇。", "output": "appname:vpn tag:softether vpn.action:*  | eval time=formatdate(timestamp,\"HH:mm\") | stats dc(time) as cnt by 'vpn.msg.认证类型'"}
{"input": "", "instruction": "我想要知道有关 rzyxt 应用的许可证信息，并且只显示过期时间在最近五天内的信息。请提供这些信息。", "output": "appname:rzyxt tag:license_info  |eval expired_timestamp=parsedate(mes.expired_timestamp,\"yyyy-MM-dd'T'HH:mm:ssZ\") |eval expired_timestamp=formatdate(expired_timestamp,\"yyyy-MM-dd HH:mm:ss\") |table expired_timestamp  |limit 5"}
{"input": "索引可用字段有：switch.IP, switch.action, switch.auth_method, switch.bandwidth, switch.brief, switch.cmd, switch.count, switch.desc, switch.desc.cmd, switch.desc.user, switch.describe, switch.ethernet, switch.event_type, switch.facility, switch.host, switch.host_ip, switch.interface_name, switch.ip, switch.kv.COMMAND, switch.kv.TTY, switch.kv.USER, switch.kvmsg.IpAddress, switch.kvmsg.UserName, switch.level, switch.log_message, switch.log_type, switch.login_method, switch.mode, switch.module, switch.port, switch.port_channel, switch.reason, switch.result, switch.severity, switch.speed, switch.src_ip, switch.src_mac, switch.state, switch.terminal, switch.time, switch.user, switch.vlan, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道在交换机上发生的 sudo 命令和用户、命令、终端的前一百条信息。", "output": "appname:switch tag:arista   (NOT switch.severity:*) switch.module:sudo|eval time=formatdate(timestamp,\"MM-dd HH:mm\") | table time,switch.kv.USER,switch.kv.COMMAND,switch.kv.TTY  |limit 100"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道有多少人在修改自己的密码，并且可以看到他们的IP和用户信息，", "output": "appname:linux event_name:密码修改事件 \"password changed for\" | eval hour=formatdate(timestamp,\"HH\") |stats count() as cnt  by hour,ip,user "}
{"input": "索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "有多少条记录来自 AIX 的虚拟终端（aix.type: vty *）。2. 分组依据是主机名、AIX 用户、AIX 类型和时间戳，并计算出每个分组中有多少条记录。3. 将结果中的时间戳格式化为人类可读的时间字符串", "output": " appname:aix tag:last aix.type:vty*  | stats count(hostname) as count_ by hostname,aix.user,aix.type,timestamp   |eval ts=formatdate(timestamp)"}
{"input": "索引可用字段有：router.action, router.auth_result, router.device_name, router.error_msg, router.event_type, router.intf, router.intf_status, router.log_message, router.log_type, router.message, router.module, router.module_name, router.severity, router.src_ip, router.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是有没有人在用这个软件的路由器吗", "output": "appname:router tag:ruijie router.module:LINEPROTO|eval time=formatdate(timestamp,\"MM-dd HH:mm\")|stats count() as cnt by time"}
{"input": "索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，有没有报警的主机数量和类型以及对应的时间戳、错误级别等信息吗？", "output": "appname:aix tag:errpt| stats count(hostname) as count_ by  hostname,aix.type_dec,timestamp,aix.class_dec,aix.resource_name|eval ts=formatdate(timestamp)|limit 10"}
{"input": "索引可用字段有：exchange.client_hostname, exchange.clientip.geo.ip, exchange.dst.geo.city, exchange.dst.geo.country, exchange.dst_ip, exchange.event_id, exchange.message_subject, exchange.recipient_address, exchange.recipient_count, exchange.recipient_status, exchange.sender_address, exchange.server_hostname, exchange.source, exchange.src_ip, exchange.status, exchange.total_bytes, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想对 Exchange Server 发送的邮件流量数据进行筛选和汇总。首先使用 `formatdate` 函数将时间戳转换为人类可读的时间格式，然后使用 `limit` 子句限制返回结果集中的行数为 100 行，最后使用 `table` 子句将 selected fields 添加到新表中并将结果限制为 100 行。", "output": "appname:exchange tag:tracking |eval time= formatdate(timestamp)|limit 100|table time,exchange.event_id,exchange.source,exchange.message_subject,exchange.sender_address,exchange.recipient_address,exchange.clientip.geo.ip,exchange.client_hostname,exchange.dst_ip,exchange.server_hostname,exchange.recipient_status,exchange.total_bytes,exchange.recipient_count|limit 100"}
{"input": "索引可用字段有：stb.area_code_dec, stb.kvmsg.UserId.area_code_dec, stb.kvmsg.cmd, stb.kvmsg.logtype_dec, stb.kvmsg.networktype_dec, stb.loss, stb.reporttype_dec, stb.user_account, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问以下内容：在 stb 应用中使用了 \"userreport\" 标记的最近十条记录，并将时间戳转换为人类可读格式。", "output": "appname:stb tag:userreport |eval time=formatdate(timestamp) |limit 10 "}
{"input": "", "instruction": "appname:openvpn 或 appname:wireguard，tag:softether 表示使用 SoftetherVPN 服务，而 vpn.action:* 表示该条日志中包含有关 VPN 消息或事件的信息。最后一行的stats命令用于对时间戳进行分组并计算每个分组内的数量，以便生成统计报告。", "output": "appname:vpn tag:softether vpn.action:*  | eval time=formatdate(timestamp,\"HH:mm\") | stats dc(time) as cnt by 'vpn.msg.登录方式'"}
{"input": "索引可用字段有：vpn.action, vpn.actor.displayName, vpn.actype, vpn.app.upstream.host, vpn.app.upstream.port, vpn.app.web.request.url, vpn.auth_dst, vpn.dst.geo.city, vpn.dst.geo.country, vpn.dst.geo.ip, vpn.dst.geo.isp, vpn.dst.geo.latitude, vpn.dst.geo.longitude, vpn.dst.geo.province, vpn.dst_ip, vpn.dst_nt_host, vpn.dst_port, vpn.event_level, vpn.event_name, vpn.kv.dst.geo.country, vpn.kv.dst.geo.latitude, vpn.kv.dst.geo.longitude, vpn.kv.msg, vpn.kv.proto, vpn.kv.src.geo.city, vpn.kv.src.geo.country, vpn.kv.src.geo.latitude, vpn.kv.src.geo.longitude, vpn.kv.user, vpn.login_user, vpn.msg, vpn.msg.virtual_ip, vpn.proto, vpn.reason, vpn.resource_name, vpn.result, vpn.seconds, vpn.src._ip, vpn.src.geo.city, vpn.src.geo.country, vpn.src.geo.ip, vpn.src.geo.isp, vpn.src.geo.latitude, vpn.src.geo.longitude, vpn.src.geo.province, vpn.src_ip, vpn.src_ip.geo.city, vpn.src_ip.geo.country, vpn.src_port, vpn.state, vpn.target.displayName, vpn.time, vpn.transport, vpn.user, vpn.user_name, vpn.vpn.login_user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是 softether VPN 服务的使用情况，每个用户按HH:mm统计操作时间的去重数分布，然后按数量排序。", "output": "appname:vpn tag:softether vpn.action:*  | eval time=formatdate(timestamp,\"HH:mm\") | stats dc(time) as cnt by vpn.user|sort by cnt"}
{"input": "索引可用字段有：windows.EventData.Data, windows.IpAddress, windows.System.EventID.text, windows.System.Level, windows.System.Provider.Name, windows.event_type, windows.level, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想询问最近在 Windows 上发生的应用故障或错误事件的最新五十个条目。您是否需要其他信息？", "output": " appname:windows AND tag:application  (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\") |limit 50|eval time=formatdate(timestamp)|table time,ip,raw_message"}
{"input": "索引可用字段有：ths_all.ANSTYPE, ths_all.GDZH, ths_all.funccn, ths_all.msg, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "同花顺交易请求记录明细表格", "output": "appname:ths_all tag:ths_all NOT (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.GDZH,ths_all.funccn"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问有关 Linux 系统中 appname 为 \"linux\" 和 tag 为 \"messages\" 的日志记录中的时间、IP地址、进程 ID、类型和消息的查询结果吗？", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.type,linux.msg|sort by time|limit 20"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问如何编写日志易查询以获取 Linux 系统上的最近十条信息记录。在这个查询中，我们使用 `index` 和 `sourcetype` 来指定要搜索的数据集，并将筛选器限制为包含 \"messages\" 的 `linux.tag`。然后，我们使用 `eval` 命令将时间戳转换为更易于阅读的时间格式，并将结果保存在新列中。接着，我们使用 `table` 命令将结果显示为表格，排除不需要的字段，并通过 `- _time` 指定不显示 `_time` 字段。最后，我们使用 `sort` 命令对结果进行排序，根据时间倒序排列，并使用 `limit` 命令限制返回的结果数量为 10。", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.type,linux.msg|sort by time|limit 10"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想询问的是 Linux 系统中 appname 为 \"linux\" 和 tag 为 \"messages\" 的所有记录的时间、IP地址、进程 ID（PID）和消息的列表，并按时间排序，只显示前 10条记录。", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.msg|sort by time|limit 10"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道我的系统上有哪些进程正在发送消息，并按时间排序。请告诉我最近的二十条信息。", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.type,linux.msg|sort by time|limit 20"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道最近一百条系统消息。请帮我把它们打印出来。", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.type,linux.msg|sort by time|limit 100"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "帮我查找最近十条关于 Linux 消息的记录，并按时间排序。", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.type,linux.msg|sort by time|limit 10"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要查一下我的 Linux 消息记录，最近五十条。请帮我把这些信息打印出来。", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.type,linux.msg|sort by time|limit 50"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道我的系统上有哪些进程正在发送和接收信息，以及他们之间的通信内容。请帮我生成相应的日志易查询语句。", "output": "appname:linux tag:messages |eval time=formatdate(timestamp)|table time,ip,linux.pid,linux.type,linux.msg|sort by time|limit 5"}
{"input": "", "instruction": "我想问的关于rzyxt的使用许可证信息，并且希望列出该软件的所有过期时间。", "output": "appname:rzyxt tag:license_info  |eval expired_timestamp=parsedate(mes.expired_timestamp,\"yyyy-MM-dd'T'HH:mm:ssZ\") |eval expired_timestamp=formatdate(expired_timestamp,\"yyyy-MM-dd HH:mm:ss\") |table expired_timestamp "}
{"input": "", "instruction": "我想询问程序的许可证信息以及其到期时间的信息。因此，我在询问以下内容：1. 该应用的名称为“RZYXT”。2. 此应用具有标记“license_info”的条目。3. 使用Eval函数将字符串“yyyy-MM-dd’T’HH:mm:ssZ”解析为日期格式。4. 使用Eval函数将此日期转换回字符串格式并显示在屏幕上。5. 将过期时间戳列出在表格中。6. 在表格后面添加限制条件，只显示前50行数据。", "output": "appname:rzyxt tag:license_info  |eval expired_timestamp=parsedate(mes.expired_timestamp,\"yyyy-MM-dd'T'HH:mm:ssZ\") |eval expired_timestamp=formatdate(expired_timestamp,\"yyyy-MM-dd HH:mm:ss\") |table expired_timestamp |limit 50"}
{"input": "", "instruction": "我想问的是，我的应用名称叫 rzyxt，并且有这个标签的证书信息过期时间最早是几号吗？", "output": "appname:rzyxt tag:license_info  |eval expired_timestamp=parsedate(mes.expired_timestamp,\"yyyy-MM-dd'T'HH:mm:ssZ\") |eval expired_timestamp=formatdate(expired_timestamp,\"yyyy-MM-dd HH:mm:ss\") |table expired_timestamp |limit 20"}
{"input": "索引可用字段有：windows.EventData.Data, windows.IpAddress, windows.System.EventID.text, windows.System.Level, windows.System.Provider.Name, windows.event_type, windows.level, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道最近五十次应用崩溃的情况和时间、IP地址以及发生崩溃的信息。", "output": " appname:windows AND tag:application  (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\") |limit 50|eval time=formatdate(timestamp)|table time,ip,raw_message"}
{"input": "索引可用字段有：ips.action, ips.application, ips.attack_name, ips.attack_type, ips.block_reason, ips.cve, ips.dst.geo.city, ips.dst.geo.ip, ips.dst.geo.latitude, ips.dst.geo.longitude, ips.dst_ip, ips.dst_port, ips.event, ips.event_id, ips.event_level, ips.event_name, ips.inbound_interface, ips.inbound_zone, ips.level, ips.local, ips.msg.seclevel, ips.outbound_interface, ips.outbound_zone, ips.policy, ips.proto, ips.service, ips.severity, ips.src.geo.city, ips.src.geo.country, ips.src.geo.ip, ips.src.geo.latitude, ips.src.geo.longitude, ips.src.geo.province, ips.src_ip, ips.src_port, ips.url, ips.vendor_app, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道绿盟 IPS的访问记录，它使用的是哪些IP地址和端口号，以及发生了什么事件。请提供最近五分钟的访问信息。", "output": "appname:ips tag:nsfocus  | eval time = formatdate(timestamp,\"HH:mm:ss\") | table time,ips.src.geo.ip,ips.src_port,ips.dst.geo.ip,ips.dst_port,ips.event_id,ips.event_name,ips.level,ips.proto,ips.local | limit 5 "}
{"input": "", "instruction": "我想要知道 Zookeeper 服务的运行状态和问题排查信息。同时，不要返回中间件级别为 INFO 或更高的信息。并且只显示最近 50 个条目。最后将时间戳转换成人类可读的时间格式并列出在一起。", "output": "(appname:zookeeper tag:zookeeper_log) AND NOT middleware.level:INFO| limit 50|eval time=formatdate(timestamp)|table time,ip,raw_message"}
{"input": "索引可用字段有：windows.EventData.Data, windows.IpAddress, windows.System.EventID.text, windows.System.Level, windows.System.Provider.Name, windows.event_type, windows.level, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "windows错误日志明细前 50 条", "output": " appname:windows AND tag:application  (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\") |limit 50|eval time=formatdate(timestamp)|table time,ip,raw_message"}
{"input": "", "instruction": "我想询问最近在AIX系统中出现过“失败登录”的情况吗？哪些用户最常使用哪个应用进行登录尝试，以及他们分别何时从何处进行登录等。", "output": "tag:failedlogin appname:aix| stats count(hostname) as count_ by hostname,aix.user,aix.type,aix.src_ip,timestamp |eval ts=formatdate(timestamp) "}
{"input": "索引可用字段有：switch.IP, switch.action, switch.auth_method, switch.bandwidth, switch.brief, switch.cmd, switch.count, switch.desc, switch.desc.cmd, switch.desc.user, switch.describe, switch.ethernet, switch.event_type, switch.facility, switch.host, switch.host_ip, switch.interface_name, switch.ip, switch.kv.COMMAND, switch.kv.TTY, switch.kv.USER, switch.kvmsg.IpAddress, switch.kvmsg.UserName, switch.level, switch.log_message, switch.log_type, switch.login_method, switch.mode, switch.module, switch.port, switch.port_channel, switch.reason, switch.result, switch.severity, switch.speed, switch.src_ip, switch.src_mac, switch.state, switch.terminal, switch.time, switch.user, switch.vlan, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道有多少台设备的ssh服务异常。", "output": "appname:switch tag:arista (NOT switch.severity:*)  sshd |eval time=formatdate(timestamp,\"MM-dd HH:mm\") | stats count() as cnt by switch.src_ip"}
{"input": "索引可用字段有：switch.IP, switch.action, switch.auth_method, switch.bandwidth, switch.brief, switch.cmd, switch.count, switch.desc, switch.desc.cmd, switch.desc.user, switch.describe, switch.ethernet, switch.event_type, switch.facility, switch.host, switch.host_ip, switch.interface_name, switch.ip, switch.kv.COMMAND, switch.kv.TTY, switch.kv.USER, switch.kvmsg.IpAddress, switch.kvmsg.UserName, switch.level, switch.log_message, switch.log_type, switch.login_method, switch.mode, switch.module, switch.port, switch.port_channel, switch.reason, switch.result, switch.severity, switch.speed, switch.src_ip, switch.src_mac, switch.state, switch.terminal, switch.time, switch.user, switch.vlan, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问用户在使用 Switch 应用（即 ONAP）登录到 Arista 设备的次数以及他们使用的 SSH 命令有哪些。", "output": "appname:switch tag:arista (NOT switch.severity:*)  sshd |eval time=formatdate(timestamp,\"MM-dd HH:mm\") | stats count() as cnt by switch.user"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，六十分钟之前到现在有多少条关于 Linux 下使用 auditd 审计的记录呢？这些记录中包含哪些事件的信息？", "output": "starttime=\"-60m/m\" endtime=\"now\"((appname:linux tag:audit) OR (appname:linux linux.log_type:audit)) AND(\"bin/*\") AND (linux.command:\"ps\" OR linux.command:\"gcc\" OR linux.command:\"whoami\" OR linux.command:\"who\" OR linux.command:\"w\" OR linux.command:\"id\" OR linux.command:\"uname\" OR linux.command:\"nc\" OR linux.command:\"socat\" OR linux.command:\"wget\" OR linux.command:\"useradd\" OR linux.command:\"userdel\" OR linux.command:\"curl\" OR linux.command:\"mkfifo\" OR linux.command:\"adduser\" OR linux.command:\"ifconfig\")  |eval time=formatdate(timestamp,\"MMM dd HH:mm\") | stats count() as cnt by time,linux.event_id,linux.event_detail.ppid,linux.event_detail.pid,linux.command "}
