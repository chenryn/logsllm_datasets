{"input": "", "instruction": "查询包含 Exception 关键字，且异常类型为 NullPointerException 或 IllegalArgumentException 的日志记录，并提取异常信息字段", "output": "Exception (NullPointerException OR IllegalArgumentException) | parse  \"(?<exception_message>.*)\""}
{"input": "", "instruction": "查询包含 Error 或 Warning 关键字，且错误类型为 OutOfMemoryError 或 StackOverflowError 的日志记录，并提取错误信息字段", "output": "(Error OR Warning) (OutOfMemoryError OR StackOverflowError) | parse  \"(?<error_message>.*)\""}
{"input": "", "instruction": "查找包含 SQL 注入攻击的日志", "output": "_index:web | parse field=uri \"(?i)\\b(union|select|drop|delete|update|insert)\\b\" "}
{"input": "", "instruction": "查找包含邮箱地址的日志，并提取邮箱地址为一个新字段", "output": "_index:_internal | parse  \"(?<email>\\w+@\\w+\\.\\w+)\""}
{"input": "", "instruction": "查找所有包含用户 ID 的日志并将其与用户表关联，显示用户的姓名和邮箱", "output": "* | parse \"(?<user_id>\\d+)\" | lookup name,email user_table.csv on user_id=user_id "}
{"input": "", "instruction": "查找所有包含异常堆栈的日志并提取异常类名和方法名", "output": "\"Exception in thread\" | parse  \"(?<exception>\\w+Exception)\" | parse \"at (?<method>\\w+\\.\\w+)\\(\""}
{"input": "", "instruction": "查找所有包含网络流量的日志并使用机器学习模型对其进行异常检测", "output": "\"network traffic\" | parse  \"bytes: (?<bytes>\\d+)\" | fit DensityFunction bytes"}
{"input": "", "instruction": "查找所有包含恶意软件的日志并显示恶意软件的类型和感染的主机数量", "output": "\"malware detected\" | parse  \"malware type: (?<malware_type>\\w+), infected hostname: (?<infected_hostname>\\w+)\" | stats dc(infected_hostname) as hostname_count by malware_type | sort by - hostname_count"}
{"input": "", "instruction": "查找所有包含敏感数据泄露的日志并显示泄露的数据类型和数量", "output": "\"data leak\" | parse  \"data type: (?<data_type>\\w+), data count: (?<data_count>\\d+)\" | stats sum(data_count) as total_count by data_type | sort by - total_count"}
{"input": "", "instruction": "查找所有包含 CPU 超负荷的日志并显示超负荷的主机和 CPU 利用率", "output": "\"CPU overload\" | parse  \"hostname: (?<hostname>\\w+), CPU usage: (?<cpu>\\d+)%\" | table hostname cpu"}
{"input": "", "instruction": "查找所有包含内存不足的日志并显示内存不足的主机和内存使用量", "output": "\"memory shortage\" | parse  \"hostname: (?<hostname>\\w+), memory used: (?<mem>\\d+) MB\" | table hostname mem"}
{"input": "", "instruction": "查找所有包含磁盘故障的日志并显示故障的主机和磁盘编号", "output": "\"disk failure\" | parse  \"hostname: (?<hostname>\\w+), disk number: (?<disk>\\d+)\" | table hostname disk"}
{"input": "", "instruction": "查找所有包含服务停止的日志并显示停止的服务名和停止的时间", "output": "\"service stopped\" | parse  \"service: (?<service>\\w+), stopped at: (?<time>.+)\" | table service time"}
{"input": "", "instruction": "查找所有包含网络延迟的日志并显示延迟的主机和延迟的时间", "output": "\"network latency\" | parse  \"hostname: (?<hostname>\\w+), latency: (?<latency>\\d+) ms\" | table hostname latency"}
{"input": "", "instruction": "查找所有包含 k8s 节点状态的日志并显示节点的名称和状态", "output": "\"k8s node status\" | parse  \"node: (?<node>\\w+), status: (?<status>\\w+)\" | table node status"}
{"input": "", "instruction": "查找所有包含 hadoop 作业运行的日志并显示作业的 ID 和运行的时间", "output": "\"hadoop job run\" | parse  \"job ID: (?<job_id>\\w+), run time: (?<run_time>\\d+) s\" | table job_id run_time"}
{"input": "", "instruction": "查找所有包含 openstack 虚拟机创建的日志并显示虚拟机的 ID 和创建的时间", "output": "\"openstack vm create\" | parse  \"vm ID: (?<vm_id>\\w+), create time: (?<create_time>.+)\" | table vm_id create_time"}
{"input": "", "instruction": "查找所有包含 k8s 容器重启的日志并显示容器的名称和重启的次数", "output": "\"k8s container restart\" | parse  \"container: (?<container>\\w+), restart count: (?<restart_count>\\d+)\" | table container restart_count"}
{"input": "", "instruction": "查找所有包含 hadoop 作业失败的日志并显示作业的 ID 和失败的原因", "output": "\"hadoop job fail\" | parse  \"job ID: (?<job_id>\\w+), fail reason: (?<fail_reason>.+)\" | table job_id fail_reason"}
{"input": "", "instruction": "从被访问设备名里移除主机域名", "output": "* | parse field=dest \"^(?<dest>.*?)[\\.|$]\""}
{"input": "慢查询长度，从日志原文中正则解析出数字内容到 len 字段，并转换为长整型，然后求最大值", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "tag:rds_slow | parse \"(?<len>\\d+)\" | eval slow_len=tolong(len) | stats max(slow_len) as slowlog_len"}
{"input": "AAA认证失败日志列表", "instruction": "防火墙_hillstone数据，编写查询语句实现如下分析场景", "output": "(* AAA 结果 失败) AND tag:hillstone |parse field=firewall.msg \"回复(?<AAA_module>\\w+)模块\\S+(?<AAA_user>\\S+)认证请求，结果：(?<AAA_result>.*)\" |table AAA_module,AAA_user,AAA_result"}
{"input": "新HAC登录成功人数", "instruction": "新HAC堡垒机审计数据，编写查询语句实现如下分析场景", "output": "tag:hac AND hac.worknotedetail:\"登录成功\"|parse \"操作人:(?<applyer>\\S+)\"|stats dc(applyer)"}
{"input": "", "instruction": "查找日志原文中所有包含 IP 地址的日志并将其转换为地理位置信息", "output": "* | parse  \"(?<ip>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\" | iplocation ip"}
{"input": "", "instruction": "查找原始日志中所有包含订单信息的日志并显示每个产品的销售额和利润率", "output": "\"order placed\" | parse  \"product: (?<product>\\w+), price: \\$(?<price>\\d+\\.\\d+), cost: \\$(?<cost>\\d+\\.\\d+)\" | eval revenue=price-cost | eval profit_margin=round(revenue/price*100,2) | stats sum(price) as sales, sum(revenue) as profit, avg(profit_margin) as margin by product | sort by - sales"}
{"input": "", "instruction": "查找原始日志里所有包含电子邮件的日志并使用正则表达式验证其格式是否正确", "output": "\"email\" | parse  \"email: (?<email>.+)\" | eval valid=match(email,\"^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$\")"}
{"input": "", "instruction": "查找原始日志里所有包含端口扫描的日志并显示扫描者的 IP 地址和扫描的端口数量", "output": "\"port scan\" | parse  \"source IP: (?<src_ip>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}), destination port: (?<dst_port>\\d+)\" | stats dc(dst_port) as port_dc by src_ip | sort by - port_dc"}
{"input": "", "instruction": "查找原始日志里所有包含 SQL 注入攻击的日志并显示攻击者的 IP 地址和攻击的 URL", "output": "\"' or 1=1\" OR \"--\" OR \"union select\" | parse  \"source IP: (?<src_ip>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}), URL: (?<url>.+)\" | table src_ip url"}
{"input": "", "instruction": "查找所有包含用户位置的日志并使用地图可视化显示用户分布情况", "output": "\"user location\" | parse  \"location: (?<location>.+)\" | geostats count() by location"}
{"input": "", "instruction": "获取 IP 地址前两段的子网统计", "output": "* | parse field=ip \"(?<subnet>\\d+\\.\\d+)+\\.\\d+\\.\\d+\" | stats count() by subnet"}
{"input": "", "instruction": "获取 IP 地址前三段的子网统计", "output": "* | parse field=ip \"(?<subnet>\\d+\\.\\d+\\.\\d+)\\.\\d+\" | stats count() by subnet"}
{"input": "AAA认证结果", "instruction": "防火墙_hillstone数据，编写查询语句实现如下分析场景", "output": "(* AAA 结果) AND tag:hillstone |parse field=firewall.msg \"回复(?<AAA_module>\\w+)模块\\S+(?<AAA_user>\\S+)认证请求，结果：(?<AAA_result>.*)\" |stats count() as total by AAA_result|rename AAA_result as \"认证结果\",total as  \"事件数量\""}
{"input": "AAA认证模块", "instruction": "防火墙_hillstone数据，编写查询语句实现如下分析场景", "output": "(* AAA 结果) AND tag:hillstone |parse field=firewall.msg \"回复(?<AAA_module>\\w+)模块\\S+(?<AAA_user>\\S+)认证请求，结果：(?<AAA_result>.*)\" |stats count() by AAA_module"}
{"input": "新HAC-复核完成详细信息", "instruction": "新HAC堡垒机审计数据，编写查询语句实现如下分析场景", "output": "\"复核\" | parse field=hac.det \"复核人(?<reviewer>\\w+)结束对用户(?<user>\\w+)的复核。\" | stats count()  as cnt by reviewer,user| rename reviewer as \"复核人\", user as \"被复核人\", cnt as \"次数\" "}
{"input": "", "instruction": "查找所有包含登录失败的日志并显示失败的原因和次数", "output": "\"login failed\" | parse  \"reason: (?<reason>.+)\" | stats count() by reason | sort by - count"}
{"input": "", "instruction": "查找日志原文中所有包含 SQL 注入攻击的日志并显示攻击者的 IP 地址和攻击次数", "output": "\"' or 1=1\" OR \"--\" OR \"union select\" | parse  \"(?<ip>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\" | stats count() by ip | sort by - count"}
{"input": "linux系统启动时间", "instruction": "linux审计数据，编写查询语句实现如下分析场景", "output": "tag:linux_boot | dedup 1 ip | parse field=raw_message \".*boot\\s+(?<boot_time>[^\\:]+\\:\\d+)\" | eval current_time=now() | eval dura=current_time-parsedate(boot_time,\"yyyy-MM-dd HH:mm\") | stats count() as cnt by ip,hostname,boot_time,dura | sort by +dura | eval hour=format(\"%.2f小时\",dura/(360000*24)) "}
{"input": "", "instruction": "1. 根据 `tag:linux_boot` 和 `dedup 1 ip` 过滤出需要处理的数据；2. 使用正则表达式解析字段 raw_message 中包含 boot_time 字符串并将其转换为时间格式；3. 对当前时间和 boot_time 进行计算得到 uptime（单位：毫秒）；4. 将 uptime 转换为天、小时、分钟等形式；5. 使用stats命令统计各IP地址、主机名、启动时间、运行时间等信息；6. 以 dura 为排序依据对结果集进行排序；7. 在每个记录后面追加运行时间的表示方式。", "output": "tag:linux_boot | dedup 1 ip | parse field=raw_message \".*boot\\s+(?<boot_time>[^\\:]+\\:\\d+)\" | eval current_time=now() | eval dura=current_time-parsedate(boot_time,\"yyyy-MM-dd HH:mm\") | stats count() as cnt by ip,hostname,boot_time,dura | sort by +dura | eval hour=format(\"%.2f小时\",dura/(360000*24)) "}
{"input": "", "instruction": "想知道在某些情况下，Java中的异常类有哪些，以及如何使用正则表达式从字符串中解析出这些异常类的消息。", "output": "Exception (NullPointerException OR IllegalArgumentException) | parse  \"(?<exception_message>.*)\""}
{"input": "", "instruction": "帮我做性能分析吧：我需要统计网络流量的大小分布情况，拟合成核函数？", "output": "\"network traffic\" | parse  \"bytes: (?<bytes>\\d+)\" | fit DensityFunction bytes"}
{"input": "", "instruction": "寻找具有恶意软件的主机名和它们所属的恶意软件类型的数据集，然后使用stats命令计算每个恶意软件类型的感染主机数量并使用sort命令以降序排列这些数据。", "output": "\"malware detected\" | parse  \"malware type: (?<malware_type>\\w+), infected hostname: (?<infected_hostname>\\w+)\" | stats dc(infected_hostname) as hostname_count by malware_type | sort by - hostname_count"}
{"input": "", "instruction": "我想问的是 Kubernetes 集群的节点状态是什么样的？。", "output": "\"k8s node status\" | parse  \"node: (?<node>\\w+), status: (?<status>\\w+)\" | table node status"}
{"input": "", "instruction": "我想问的是 Hadoop 集群上有没有正在运行的 MapReduce 作业，运行了多久？可以帮我检查一下吗？", "output": "\"hadoop job run\" | parse  \"job ID: (?<job_id>\\w+), run time: (?<run_time>\\d+) s\" | table job_id run_time"}
{"input": "", "instruction": "我想问的是 Kubernetes 中容器重启的次数和名称有哪些？", "output": "\"k8s container restart\" | parse  \"container: (?<container>\\w+), restart count: (?<restart_count>\\d+)\" | table container restart_count"}
{"input": "", "instruction": "找与“端口扫描”有关的信息", "output": "\"port scan\" | parse  \"source IP: (?<src_ip>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}), destination port: (?<dst_port>\\d+)\" | stats dc(dst_port) as port_dc by src_ip | sort by - port_dc"}
{"input": "", "instruction": "我想问的是，从哪些 IP 访问了网站？你能不能把这些 IP 按 B 类网段分组，并统计一下访问次数呢？", "output": "* | parse field=ip \"(?<subnet>\\d+\\.\\d+)+\\.\\d+\\.\\d+\" | stats count() by subnet"}
{"input": "数据库_mssql_登录失败源ip地址top10", "instruction": "数据库_mssql数据，编写查询语句实现如下分析场景", "output": "appname:windows json.source_name:MSSQLSERVER json.message.event:*登录失败 |parse field=json.event_data.param3 \"[^:]+:\\s+(?<src_ip>[^\\]]+)\"|top 10 src_ip"}
{"input": "", "instruction": "我想询问关于某台 Windows 系统的 MSSQL 服务在近期内发生了多少次登录失败事件以及这些失败事件中最常见的 IP 地址是哪个吗？", "output": "appname:windows json.source_name:MSSQLSERVER json.message.event:*登录失败 |parse field=json.event_data.param3 \"[^:]+:\\s+(?<src_ip>[^\\]]+)\"|top 10 src_ip"}
{"input": "磁盘异常详情。索引可用字段有：esxi.action, esxi.cpu, esxi.log_level, esxi.metric, esxi.pid, esxi.run_cmd, esxi.src_ip, esxi.sys_time, esxi.tags.host, esxi.user, esxi.user_agent, esxi.valude, esxi.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "esxi宿主机审计数据，编写查询语句实现如下分析场景", "output": "(appname:esxi AND tag:vobd)  deteriorated\n|parse field=esxi.messages \"^Device\\s(?<device>\\S+)\\s\" \n|rename esxi.* as * \n| table time,device,messages"}
{"input": "攻击详情，从 firewall.msg.攻击地址字段中正则提取出来源地址、来源端口、目的地址和目的端口，文本格式为srcip:scrport->dstip:dstport。。索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "华为防火墙日志数据，编写查询语句实现如下分析场景", "output": "(appname:firewall AND tag:huawei)  attack \n| parse field='firewall.msg.攻击地址' \"(?<src_ip>[^:]+):(?<src_port>\\d+)->(?<dst_ip>[^:]+):(?<dst_port>\\d+)\" "}
{"input": "索引可用字段有：syslog.resp_time, syslog.status, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "查询 syslog 日志中包含 error, fail 或 fatal 关键字的记录，并提取客户端 IP 地址字段", "output": "appname:syslog (error OR fail OR fatal) | parse  \"(?<client_ip>\\d+\\.\\d+\\.\\d+\\.\\d+)\""}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "从web 访问日志提取静态文件名", "output": "appname:apache | parse field=apache.request_path \".*/(?<filename>[^/]*)\\.(png|gif|jpg|css|js)\""}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "从url中提取参数为ip的value", "output": "appname:apache | parse field=apache.request_query \"ip=(?<ip_addr>.*?)(&|$)\""}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "提取URL中的参数username的值", "output": "appname:apache | parse field=apache.request_query \"username=(?<username>.*?)(&|$)\""}
{"input": "cisco_iso交换机状态为down的接口。索引可用字段有：switch.IP, switch.action, switch.auth_method, switch.bandwidth, switch.brief, switch.cmd, switch.count, switch.desc, switch.desc.cmd, switch.desc.user, switch.describe, switch.ethernet, switch.event_type, switch.facility, switch.host, switch.host_ip, switch.interface_name, switch.ip, switch.kv.COMMAND, switch.kv.TTY, switch.kv.USER, switch.kvmsg.IpAddress, switch.kvmsg.UserName, switch.level, switch.log_message, switch.log_type, switch.login_method, switch.mode, switch.module, switch.port, switch.port_channel, switch.reason, switch.result, switch.severity, switch.speed, switch.src_ip, switch.src_mac, switch.state, switch.terminal, switch.time, switch.user, switch.vlan, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "交换机_cisco_ios数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:cisco_ios  AND \"changed state to down\" |parse \".*Interface (?<interface>[^,]+), changed state to (?<state>\\w+)\"|table interface,state |rename interface as \"接口\",state as \"状态\""}
{"input": "堡垒机登陆列表UMA。索引可用字段有：fortress.action, fortress.dst_ip, fortress.facility, fortress.host_ip, fortress.input, fortress.ip, fortress.level, fortress.log_type, fortress.loginOK, fortress.login_user, fortress.message, fortress.msg.action, fortress.msg.adlg_type, fortress.msg.begin_time, fortress.msg.command, fortress.msg.date, fortress.msg.mode, fortress.msg.module, fortress.msg.session_guid, fortress.msg.src_ip, fortress.msg.srcip, fortress.msg.srvaddr, fortress.msg.system_user, fortress.msg.sysuser, fortress.node, fortress.protocol, fortress.reason, fortress.remote_addr, fortress.request_msg, fortress.result, fortress.secondary_user, fortress.server, fortress.severity, fortress.src_ip, fortress.src_port, fortress.status, fortress.system_user, fortress.type, fortress.user, fortress.user_agent, fortress.user_name, fortress.username, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "帕拉迪堡垒机数据，编写查询语句实现如下分析场景", "output": "( appname:fortress tag:pldsec ) \"BLJPri UMA\" type=login|parse \"result=(?<result>\\w+)\"|table fortress.msg.date,fortress.msg.sysuser,fortress.msg.srcip,fortress.msg.module,result|rename fortress.msg.date as time,fortress.msg.sysuser as \"堡垒机地址\",fortress.msg.module as \"登陆方式\",result  as \"登陆状态\""}
{"input": "最近 1 台设备的启动时间。索引可用字段有：switchperf.devip, switchperf.ifindex, switchperf.type, switchperf.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "网络设备接口数据数据，编写查询语句实现如下分析场景", "output": "appname:switchperf sysUpTimeInstance| limit 1 | parse field=switchperf.value \"\\(\\S+\\)(?<time>[\\S\\s]+)\"| table time"}
{"input": "", "instruction": "匹配IP地址并提取端口", "output": "appname:fw | parse \"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}:(?<port>\\d+)\" "}
{"input": "从 ip 字段中正则解析前三段数字为C 类网段，然后后面拼接一段.x作为c_ip，按 c_ip 统计 ip 的独立数。。索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Linux操作系统审计_主机资产统计", "output": "appname:linux  |parse field=ip \"(?<c_ip>\\d+.\\d+.\\d+)\" |eval c_ip=c_ip+\".x\"  |stats dc(ip) as cnt by c_ip "}
{"input": "各端口状态。索引可用字段有：ddos.attack_type, ddos.category, ddos.direction, ddos.dst.geo.latitude, ddos.dst.geo.longitude, ddos.dst_ip, ddos.event_type, ddos.load_per, ddos.men_per, ddos.portinfo, ddos.protected_ip, ddos.src.geo.city, ddos.src.geo.latitude, ddos.src.geo.longitude, ddos.src_ip, ddos.src_port, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "ads_nsfocus数据，编写查询语句实现如下分析场景", "output": "appname:ddos tag:nsfocus ddos.portinfo:* |mvexpand ddos.portinfo|parse field=ddos.portinfo \"(?<port>\\S+)\\s+(?<state>\\S+)\\s+(?<rx_kpps>\\S+)\\s+(?<tx_kpps>\\S+)\\s+(?<rx_mbps>\\S+)\\s+(?<tx_mbps>\\S+)\"|table port,state,rx_kpps,tx_kpps,rx_mbps,tx_mbps|rename port as \"端口\",state as \"状态\",rx_kpps as \"rx流量\",tx_kpps as \"tx流量\",rx_mbps as \"rx速率\",tx_mbps as \"tx速率\""}
{"input": "连接中断访问关系。搜索数据中CONN_TERMINATE操作，然后正则提取来源地址、来源端口、目的地址、目的端口。", "instruction": "CitrixNetscaler日志数据，编写查询语句实现如下分析场景", "output": "((* AND appname:citrix) AND tag:netscaler) AND 'netscaler.action':CONN_TERMINATE | parse field=netscaler.content.Source\t\"(?<srcip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<srcport>\\d+)\"\n|parse field=netscaler.content.Destination\t\"(?<dstip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<dstport>\\d+)\"\n|table srcip,srcport , dstip,dstport \n|rename srcip as \"源IP\",srcport as \"源端口\", dstip as \"目的IP\",dstport as \"目的端口\""}
{"input": "连接中断访问关系。搜索数据中CONN_DELINK操作，然后正则提取来源地址、来源端口、目的地址、目的端口。", "instruction": "CitrixNetscaler日志数据，编写查询语句实现如下分析场景", "output": "((* AND appname:citrix) AND tag:netscaler) AND 'netscaler.action':CONN_DELINK | parse field=netscaler.content.Source\t\"(?<srcip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<srcport>\\d+)\"\n|parse field=netscaler.content.Destination\t\"(?<dstip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<dstport>\\d+)\"\n|table srcip,srcport , dstip,dstport \n|rename srcip as \"源IP\",srcport as \"源端口\", dstip as \"目的IP\",dstport as \"目的端口\""}
{"input": "Inet端口耗尽。索引可用字段有：loadbalancing.dst_ip, loadbalancing.level, loadbalancing.listenervs_ip, loadbalancing.msg, loadbalancing.querytype, loadbalancing.responsecode, loadbalancing.severity, loadbalancing.src.geo.province, loadbalancing.src_ip, loadbalancing.status, loadbalancing.type, loadbalancing.user, loadbalancing.username, loadblancing.status, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "F5数据，编写查询语句实现如下分析场景", "output": "appname:loadbalancing tag:f5 AND loadbalancing.level:crit (Inet port exhaustion)|parse \"^(?:[^ \\n]* ){8}(?<msg>\\w+\\s+\\w+\\s+\\w+)\\s+on\\s+(?<src_ip>[^ ]+)\\s+to\\s+(?<dst_ip>[^ ]+)\"|eval time=formatdate(timestamp,\"yyyy/MM/dd HH:mm:ss\")|table time,src_ip,dst_ip,msg"}
{"input": "错误事件分布前 10 名。索引可用字段有：loadbalancing.dst_ip, loadbalancing.level, loadbalancing.listenervs_ip, loadbalancing.msg, loadbalancing.querytype, loadbalancing.responsecode, loadbalancing.severity, loadbalancing.src.geo.province, loadbalancing.src_ip, loadbalancing.status, loadbalancing.type, loadbalancing.user, loadbalancing.username, loadblancing.status, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "F5数据，编写查询语句实现如下分析场景", "output": "appname:loadbalancing tag:f5 AND loadbalancing.level:err|parse \"^(?:[^:\\n]*:){5}(?<msg>.+)\"|top 10 msg"}
{"input": "F5严重事件分布前 10 名。索引可用字段有：loadbalancing.dst_ip, loadbalancing.level, loadbalancing.listenervs_ip, loadbalancing.msg, loadbalancing.querytype, loadbalancing.responsecode, loadbalancing.severity, loadbalancing.src.geo.province, loadbalancing.src_ip, loadbalancing.status, loadbalancing.type, loadbalancing.user, loadbalancing.username, loadblancing.status, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "F5数据，编写查询语句实现如下分析场景", "output": "appname:loadbalancing tag:f5 AND loadbalancing.level:crit|parse \"^(?:[^:\\n]*:){5}(?<msg>.+)\"|top 10 msg"}
{"input": "卡顿节目前十名。索引可用字段有：stb.area_code_dec, stb.kvmsg.UserId.area_code_dec, stb.kvmsg.cmd, stb.kvmsg.logtype_dec, stb.kvmsg.networktype_dec, stb.loss, stb.reporttype_dec, stb.user_account, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "中数通STB数据，编写查询语句实现如下分析场景", "output": "appname:stb stb.kvmsg.cmd:lag|parse field=stb.kvmsg.MediaUrl \".*\\/(?<pro>\\S+)\"|top 10 pro"}
{"input": "播放丢帧节目前十名。索引可用字段有：stb.area_code_dec, stb.kvmsg.UserId.area_code_dec, stb.kvmsg.cmd, stb.kvmsg.logtype_dec, stb.kvmsg.networktype_dec, stb.loss, stb.reporttype_dec, stb.user_account, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "中数通STB数据，编写查询语句实现如下分析场景", "output": "appname:stb stb.kvmsg.cmd:frameMissing|parse field=stb.kvmsg.MediaUrl \".*\\/(?<pro>[^?]+)\"|top 10 pro"}
{"input": "资源异常节目前十名。索引可用字段有：stb.area_code_dec, stb.kvmsg.UserId.area_code_dec, stb.kvmsg.cmd, stb.kvmsg.logtype_dec, stb.kvmsg.networktype_dec, stb.loss, stb.reporttype_dec, stb.user_account, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "中数通STB数据，编写查询语句实现如下分析场景", "output": "appname:stb stb.kvmsg.cmd:resWarning|parse field=stb.kvmsg.MediaUrl \".*\\/(?<pro>[^?]+)\"|top 10 pro"}
{"input": "连接中断源IP地址TOP10。", "instruction": "CitrixNetscaler日志数据，编写查询语句实现如下分析场景", "output": "((* AND appname:citrix) AND tag:netscaler) AND 'netscaler.action':CONN_TERMINATE | parse field=netscaler.content.Source\t\"(?<srcip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<srcport>\\d+)\"\n|parse field=netscaler.content.Destination\t\"(?<dstip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<dstport>\\d+)\"\n|top 10 srcip"}
{"input": "连接中断目的IP地址TOP10。", "instruction": "CitrixNetscaler日志数据，编写查询语句实现如下分析场景", "output": "((* AND appname:citrix) AND tag:netscaler) AND 'netscaler.action':CONN_TERMINATE | parse field=netscaler.content.Source\t\"(?<srcip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<srcport>\\d+)\"\n|parse field=netscaler.content.Destination\t\"(?<dstip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<dstport>\\d+)\"\n|top 10 dstip"}
{"input": "连接中断源端口TOP10。", "instruction": "CitrixNetscaler日志数据，编写查询语句实现如下分析场景", "output": "((* AND appname:citrix) AND tag:netscaler) AND 'netscaler.action':CONN_TERMINATE | parse field=netscaler.content.Source\t\"(?<srcip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<srcport>\\d+)\"\n|parse field=netscaler.content.Destination\t\"(?<dstip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<dstport>\\d+)\"\n|top 10 srcport"}
{"input": "连接中断目的端口TOP10。", "instruction": "CitrixNetscaler日志数据，编写查询语句实现如下分析场景", "output": "((* AND appname:citrix) AND tag:netscaler) AND 'netscaler.action':CONN_TERMINATE | parse field=netscaler.content.Source\t\"(?<srcip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<srcport>\\d+)\"\n|parse field=netscaler.content.Destination\t\"(?<dstip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<dstport>\\d+)\"\n|top 10 dstport"}
{"input": "断链源端口TOP10。", "instruction": "CitrixNetscaler日志数据，编写查询语句实现如下分析场景", "output": "((* AND appname:citrix) AND tag:netscaler) AND 'netscaler.action':CONN_DELINK | parse field=netscaler.content.Source\t\"(?<srcip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<srcport>\\d+)\"\n|parse field=netscaler.content.Destination\t\"(?<dstip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<dstport>\\d+)\"\n|top 10 srcport"}
{"input": "断链源IP地址TOP10。", "instruction": "CitrixNetscaler日志数据，编写查询语句实现如下分析场景", "output": "((* AND appname:citrix) AND tag:netscaler) AND 'netscaler.action':CONN_DELINK | parse field=netscaler.content.Source\t\"(?<srcip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<srcport>\\d+)\"\n|parse field=netscaler.content.Destination\t\"(?<dstip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<dstport>\\d+)\"\n|top 10 srcip"}
{"input": "断链目的IP地址TOP10。", "instruction": "CitrixNetscaler日志数据，编写查询语句实现如下分析场景", "output": "((* AND appname:citrix) AND tag:netscaler) AND 'netscaler.action':CONN_DELINK | parse field=netscaler.content.Source\t\"(?<srcip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<srcport>\\d+)\"\n|parse field=netscaler.content.Destination\t\"(?<dstip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<dstport>\\d+)\"\n|top 10 dstip"}
{"input": "断链目的端口TOP10。", "instruction": "CitrixNetscaler日志数据，编写查询语句实现如下分析场景", "output": "((* AND appname:citrix) AND tag:netscaler) AND 'netscaler.action':CONN_DELINK | parse field=netscaler.content.Source\t\"(?<srcip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<srcport>\\d+)\"\n|parse field=netscaler.content.Destination\t\"(?<dstip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<dstport>\\d+)\"\n|top 10 dstport"}
{"input": "磁盘IO设备效率下降分布。索引可用字段有：esxi.action, esxi.cpu, esxi.log_level, esxi.metric, esxi.pid, esxi.run_cmd, esxi.src_ip, esxi.sys_time, esxi.tags.host, esxi.user, esxi.user_agent, esxi.valude, esxi.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "esxi宿主机审计数据，编写查询语句实现如下分析场景", "output": "(appname:esxi AND tag:vobd)  deteriorated|parse field=esxi.messages \"^Device\\s(?<device>\\S+)\\s\" |stats count() as cnt by device"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "URI中提取文件名后缀并统计各种类型的占比", "output": "appname:apache | parse field=apache.request_path \".*\\.(?<file_suffix>asp|jsp|php|aspx|html?|png|gif|jpe?g|css|js)\" | stats count() by file_suffix"}
{"input": "snmp客户端发生重启mac地址统计。索引可用字段有：switch.IP, switch.action, switch.auth_method, switch.bandwidth, switch.brief, switch.cmd, switch.count, switch.desc, switch.desc.cmd, switch.desc.user, switch.describe, switch.ethernet, switch.event_type, switch.facility, switch.host, switch.host_ip, switch.interface_name, switch.ip, switch.kv.COMMAND, switch.kv.TTY, switch.kv.USER, switch.kvmsg.IpAddress, switch.kvmsg.UserName, switch.level, switch.log_message, switch.log_type, switch.login_method, switch.mode, switch.module, switch.port, switch.port_channel, switch.reason, switch.result, switch.severity, switch.speed, switch.src_ip, switch.src_mac, switch.state, switch.terminal, switch.time, switch.user, switch.vlan, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "交换机_cisco_ios数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:cisco_ios  AND SNMP-5-COLDSTART |parse field= switch.log_message \".*host (?<host_mac>[^\\s]+)\\s+.*\" |stats count() by host_mac"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Linux多次使用无效用户登录主机", "output": "appname:linux tag:secure AND (\"Invalid user\")  |parse \".*user\\s+(?<user>\\S+) from (?<src_ip>\\d+.\\d+.\\d+.\\d+)\" |stats count() as cnt by src_ip,ip,user "}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Linux多次使用无效用户登录主机，按来源 IP、登录 IP 和用户名统计次数", "output": "appname:linux tag:secure AND (\"Invalid user\") |parse \".*user\\s+(?<user>\\S+) from (?<src_ip>\\d+.\\d+.\\d+.\\d+)\" |stats count() as cnt by src_ip,ip,user "}
{"input": "mysql操作占比。索引可用字段有：mysql.level, mysql.os_type, mysql.query_time, mysql.rows_examined, mysql.sql, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "mysql日志数据，编写查询语句实现如下分析场景", "output": "appname:mysql tag:mysql_query AND (\"Query\tselect\" OR \"Query\tinsert\" OR \"Query\tupdate\")| parse field=raw_message \"Query\\s+(?<action>\\S+)\"|eval query=case(action==\"SELECT\",\"select\",action==\"INSERT\",\"insert\",action==\"UPDATE\",\"update\",default,action) |stats count() as count_ by query"}
{"input": "登录结果分布占比。索引可用字段有：vpn.action, vpn.actor.displayName, vpn.actype, vpn.app.upstream.host, vpn.app.upstream.port, vpn.app.web.request.url, vpn.auth_dst, vpn.dst.geo.city, vpn.dst.geo.country, vpn.dst.geo.ip, vpn.dst.geo.isp, vpn.dst.geo.latitude, vpn.dst.geo.longitude, vpn.dst.geo.province, vpn.dst_ip, vpn.dst_nt_host, vpn.dst_port, vpn.event_level, vpn.event_name, vpn.kv.dst.geo.country, vpn.kv.dst.geo.latitude, vpn.kv.dst.geo.longitude, vpn.kv.msg, vpn.kv.proto, vpn.kv.src.geo.city, vpn.kv.src.geo.country, vpn.kv.src.geo.latitude, vpn.kv.src.geo.longitude, vpn.kv.user, vpn.login_user, vpn.msg, vpn.msg.virtual_ip, vpn.proto, vpn.reason, vpn.resource_name, vpn.result, vpn.seconds, vpn.src._ip, vpn.src.geo.city, vpn.src.geo.country, vpn.src.geo.ip, vpn.src.geo.isp, vpn.src.geo.latitude, vpn.src.geo.longitude, vpn.src.geo.province, vpn.src_ip, vpn.src_ip.geo.city, vpn.src_ip.geo.country, vpn.src_port, vpn.state, vpn.target.displayName, vpn.time, vpn.transport, vpn.user, vpn.user_name, vpn.vpn.login_user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "sslvpn日志数据，编写查询语句实现如下分析场景", "output": "appname:vpn tag:cisco vpn.user:* \"authentication\"|parse field=vpn.msg \"AAA user authentication (?<result>\\S+)\" |stats count() as cnt by result "}
{"input": "堡垒机_shterm_邮件发送状态。索引可用字段有：fortress.action, fortress.dst_ip, fortress.facility, fortress.host_ip, fortress.input, fortress.ip, fortress.level, fortress.log_type, fortress.loginOK, fortress.login_user, fortress.message, fortress.msg.action, fortress.msg.adlg_type, fortress.msg.begin_time, fortress.msg.command, fortress.msg.date, fortress.msg.mode, fortress.msg.module, fortress.msg.session_guid, fortress.msg.src_ip, fortress.msg.srcip, fortress.msg.srvaddr, fortress.msg.system_user, fortress.msg.sysuser, fortress.node, fortress.protocol, fortress.reason, fortress.remote_addr, fortress.request_msg, fortress.result, fortress.secondary_user, fortress.server, fortress.severity, fortress.src_ip, fortress.src_port, fortress.status, fortress.system_user, fortress.type, fortress.user, fortress.user_agent, fortress.user_name, fortress.username, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "堡垒机_shterm_数据，编写查询语句实现如下分析场景", "output": "appname:fortress tag:shterm fortress.type:postfix* status|parse field=fortress.msg \".*status=(?<send_status>\\S+)\"|stats count() as cnt by send_status\t"}
{"input": "堡垒机_shterm_邮件收件人情况。索引可用字段有：fortress.action, fortress.dst_ip, fortress.facility, fortress.host_ip, fortress.input, fortress.ip, fortress.level, fortress.log_type, fortress.loginOK, fortress.login_user, fortress.message, fortress.msg.action, fortress.msg.adlg_type, fortress.msg.begin_time, fortress.msg.command, fortress.msg.date, fortress.msg.mode, fortress.msg.module, fortress.msg.session_guid, fortress.msg.src_ip, fortress.msg.srcip, fortress.msg.srvaddr, fortress.msg.system_user, fortress.msg.sysuser, fortress.node, fortress.protocol, fortress.reason, fortress.remote_addr, fortress.request_msg, fortress.result, fortress.secondary_user, fortress.server, fortress.severity, fortress.src_ip, fortress.src_port, fortress.status, fortress.system_user, fortress.type, fortress.user, fortress.user_agent, fortress.user_name, fortress.username, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "堡垒机_shterm_数据，编写查询语句实现如下分析场景", "output": "appname:fortress tag:shterm fortress.type:postfix* to|parse field=fortress.msg \".*to=<(?<username>[^>]+)\"|stats count() as cnt by username"}
{"input": "堡垒机_shterm_邮件发件人情况。索引可用字段有：fortress.action, fortress.dst_ip, fortress.facility, fortress.host_ip, fortress.input, fortress.ip, fortress.level, fortress.log_type, fortress.loginOK, fortress.login_user, fortress.message, fortress.msg.action, fortress.msg.adlg_type, fortress.msg.begin_time, fortress.msg.command, fortress.msg.date, fortress.msg.mode, fortress.msg.module, fortress.msg.session_guid, fortress.msg.src_ip, fortress.msg.srcip, fortress.msg.srvaddr, fortress.msg.system_user, fortress.msg.sysuser, fortress.node, fortress.protocol, fortress.reason, fortress.remote_addr, fortress.request_msg, fortress.result, fortress.secondary_user, fortress.server, fortress.severity, fortress.src_ip, fortress.src_port, fortress.status, fortress.system_user, fortress.type, fortress.user, fortress.user_agent, fortress.user_name, fortress.username, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "堡垒机_shterm_数据，编写查询语句实现如下分析场景", "output": "appname:fortress tag:shterm fortress.type:postfix* from|parse field=fortress.msg \".*from=<(?<username>[^>]+)\"|stats count() as cnt by username"}
{"input": "业务类型。", "instruction": "zsns 应用的tomcat业务数据，编写查询语句实现如下分析场景", "output": "appname:zsns tomcat.event_type:*响应报文|parse field=tomcat.event_type \".*?GDP(?<business>.*?)响应报文\" |stats count() as cnt by business"}
{"input": "排名前 10 的高频事件原文。索引可用字段有：switch.IP, switch.action, switch.auth_method, switch.bandwidth, switch.brief, switch.cmd, switch.count, switch.desc, switch.desc.cmd, switch.desc.user, switch.describe, switch.ethernet, switch.event_type, switch.facility, switch.host, switch.host_ip, switch.interface_name, switch.ip, switch.kv.COMMAND, switch.kv.TTY, switch.kv.USER, switch.kvmsg.IpAddress, switch.kvmsg.UserName, switch.level, switch.log_message, switch.log_type, switch.login_method, switch.mode, switch.module, switch.port, switch.port_channel, switch.reason, switch.result, switch.severity, switch.speed, switch.src_ip, switch.src_mac, switch.state, switch.terminal, switch.time, switch.user, switch.vlan, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "交换机_华为数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:huawei |stats count() as cnt by switch.count| sort by switch.count | limit 10 | parse \".*\\:(?<msg>.*)\" | table msg,switch.count"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "询问 Linux 用户在某一天使用过的 IP 地址有多少个，并将其中的某个子网段作为列名进行统计。", "output": "appname:linux  |parse field=ip \"(?<c_ip>\\d+.\\d+.\\d+)\" |eval c_ip=c_ip+\".x\"  |stats dc(ip) as cnt by c_ip "}
{"input": "索引可用字段有：syslog.resp_time, syslog.status, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "帮我进行一些系统的监控和告警，所以寻找那些发生错误或失败的事件以及它们对应的客户端IP地址。", "output": "appname:syslog (error OR fail OR fatal) | parse  \"(?<client_ip>\\d+\\.\\d+\\.\\d+\\.\\d+)\""}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问如何根据给定的 Apache access log 查询出包含图片、CSS 和 JavaScript 文件的请求路径和文件名。", "output": "appname:apache | parse field=apache.request_path \".*/(?<filename>[^/]*)\\.(png|gif|jpg|css|js)\""}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道谁在访问我的网站，这是个很常见的需求啊！你能帮我把这个需求翻译成 SPL 查询吗？", "output": "appname:apache | parse field=apache.request_query \"ip=(?<ip_addr>.*?)(&|$)\""}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道有哪些开源的web框架可以用来做网站开发呢？你能帮我找一下吗？我想了解一下它们之间的区别和优劣比较", "output": "appname:apache | parse field=apache.request_query \"username=(?<username>.*?)(&|$)\""}
{"input": "索引可用字段有：switch.IP, switch.action, switch.auth_method, switch.bandwidth, switch.brief, switch.cmd, switch.count, switch.desc, switch.desc.cmd, switch.desc.user, switch.describe, switch.ethernet, switch.event_type, switch.facility, switch.host, switch.host_ip, switch.interface_name, switch.ip, switch.kv.COMMAND, switch.kv.TTY, switch.kv.USER, switch.kvmsg.IpAddress, switch.kvmsg.UserName, switch.level, switch.log_message, switch.log_type, switch.login_method, switch.mode, switch.module, switch.port, switch.port_channel, switch.reason, switch.result, switch.severity, switch.speed, switch.src_ip, switch.src_mac, switch.state, switch.terminal, switch.time, switch.user, switch.vlan, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Cisco交换机的某些端口状态发生了变化，具体哪些端口和状态，你能告诉我么？", "output": "appname:switch tag:cisco_ios  AND \"changed state to down\" |parse \".*Interface (?<interface>[^,]+), changed state to (?<state>\\w+)\"|table interface,state |rename interface as \"接口\",state as \"状态\""}
{"input": "索引可用字段有：switchperf.devip, switchperf.ifindex, switchperf.type, switchperf.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，在一段时间内，这个系统的 CPU 使用率有多高吗？可以列出前十名的进程和对应的 CPU 消耗吗？", "output": "appname:switchperf sysUpTimeInstance| limit 1 | parse field=switchperf.value \"\\(\\S+\\)(?<time>[\\S\\s]+)\"| table time"}
{"input": "", "instruction": "我想要知道关于Citrix NetScaler的连接解除的信息。请告诉我最近有哪些相关事件发生过。", "output": "((* AND appname:citrix) AND tag:netscaler) AND 'netscaler.action':CONN_DELINK | parse field=netscaler.content.Source \"(?<srcip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<srcport>\\d+)\"|parse field=netscaler.content.Destination \"(?<dstip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\:(?<dstport>\\d+)\"|table srcip,srcport, dstip,dstport |rename srcip as \"源IP\",srcport as \"源端口\", dstip as \"目的IP\",dstport as \"目的端口\""}
{"input": "索引可用字段有：loadbalancing.dst_ip, loadbalancing.level, loadbalancing.listenervs_ip, loadbalancing.msg, loadbalancing.querytype, loadbalancing.responsecode, loadbalancing.severity, loadbalancing.src.geo.province, loadbalancing.src_ip, loadbalancing.status, loadbalancing.type, loadbalancing.user, loadbalancing.username, loadblancing.status, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问有关 F5 Big-IP LTM 设备的应用负载平衡器中存在端口耗尽的问题吗？", "output": "appname:loadbalancing tag:f5 AND loadbalancing.level:crit (Inet port exhaustion)|parse \"^(?:[^ ]* ){8}(?<msg>\\w+\\s+\\w+\\s+\\w+)\\s+on\\s+(?<src_ip>[^ ]+)\\s+to\\s+(?<dst_ip>[^ ]+)\"|eval time=formatdate(timestamp,\"yyyy/MM/dd HH:mm:ss\")|table time,src_ip,dst_ip,msg"}
{"input": "索引可用字段有：loadbalancing.dst_ip, loadbalancing.level, loadbalancing.listenervs_ip, loadbalancing.msg, loadbalancing.querytype, loadbalancing.responsecode, loadbalancing.severity, loadbalancing.src.geo.province, loadbalancing.src_ip, loadbalancing.status, loadbalancing.type, loadbalancing.user, loadbalancing.username, loadblancing.status, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问有关 F5 Big-IP LTM 模块的应用 \"Load Balancing\" 的所有严重错误或警告消息的前十条记录。", "output": "appname:loadbalancing tag:f5 AND loadbalancing.level:crit|parse \"^(?:[^:]*:){5}(?<msg>.+)\"|top 10 msg"}
{"input": "", "instruction": "我想知道最近有没有人在使用 Citrix NetScaler 这款产品进行了连接终止的操作，并且记录了源 IP 和目的端口号。", "output": "((* AND appname:citrix) AND tag:netscaler) AND 'netscaler.action':CONN_TERMINATE | parse field=netscaler.content.Source \"(?<srcip>\\d+\\.\\d+\\.\\d+\\.\\d+):(?<srcport>\\d+)\"|parse field=netscaler.content.Destination \"(?<dstip>\\d+\\.\\d+\\.\\d+\\.\\d+):(?<dstport>\\d+)\"|top 10 dstport"}
{"input": "索引可用字段有：esxi.action, esxi.cpu, esxi.log_level, esxi.metric, esxi.pid, esxi.run_cmd, esxi.src_ip, esxi.sys_time, esxi.tags.host, esxi.user, esxi.user_agent, esxi.valude, esxi.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问有关ESXI主机设备状态的信息", "output": "(appname:esxi AND tag:vobd)  deteriorated|parse field=esxi.messages \"^Device\\s(?<device>\\S+)\\s\" |stats count() as cnt by device"}
{"input": "索引可用字段有：switch.IP, switch.action, switch.auth_method, switch.bandwidth, switch.brief, switch.cmd, switch.count, switch.desc, switch.desc.cmd, switch.desc.user, switch.describe, switch.ethernet, switch.event_type, switch.facility, switch.host, switch.host_ip, switch.interface_name, switch.ip, switch.kv.COMMAND, switch.kv.TTY, switch.kv.USER, switch.kvmsg.IpAddress, switch.kvmsg.UserName, switch.level, switch.log_message, switch.log_type, switch.login_method, switch.mode, switch.module, switch.port, switch.port_channel, switch.reason, switch.result, switch.severity, switch.speed, switch.src_ip, switch.src_mac, switch.state, switch.terminal, switch.time, switch.user, switch.vlan, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "帮我寻找某台 Cisco 交换机的 MAC 地址，并统计有多少次出现过这个 MAC 地址在系统启动时打印的信息中包含字样“SNMP-5-COLDSTART”。", "output": "appname:switch tag:cisco_ios  AND SNMP-5-COLDSTART |parse field= switch.log_message \".*host (?<host_mac>[^\\s]+)\\s+.*\" |stats count() by host_mac"}
{"input": "索引可用字段有：mysql.level, mysql.os_type, mysql.query_time, mysql.rows_examined, mysql.sql, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "mysql日志数据查询：sql各种操作类型占比", "output": "appname:mysql tag:mysql_query AND (\"Query select\" OR \"Query insert\" OR \"Query update\")| parse field=raw_message \"Query\\s+(?<action>\\S+)\" | eval query=case(action==\"SELECT\",\"select\",action==\"INSERT\",\"insert\",action==\"UPDATE\",\"update\",default,action) |stats count() as count_ by query"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想询问以下内容：在 Linux 系统中，通过 secure 标签筛选出包含“Invalid user”的记录，并统计每个源 IP、IP 和用户的数量。", "output": "appname:linux tag:secure AND (\"Invalid user\")  |parse \".*user\\s+(?<user>\\S+) from (?<src_ip>\\d+.\\d+.\\d+.\\d+)\" |stats count() as cnt by src_ip,ip,user "}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想询问 Linux 安全日志中，无效用户登录的来源地址、目标地址和账户名统计。账户名和来源地址需要从日志原文中提取。", "output": "appname:linux tag:secure AND (\"Invalid user\") |parse \".*user\\s+(?<user>\\S+) from (?<src_ip>\\d+.\\d+.\\d+.\\d+)\" |stats count() as cnt by src_ip,ip,user "}
{"input": "按每5分钟分桶统计正常包和丢包、错包的占比。索引可用字段有：switchperf.devip, switchperf.ifindex, switchperf.type, switchperf.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "网络设备接口数据数据，编写查询语句实现如下分析场景", "output": "appname:switchperf AND (switchperf.type:ifInErrors OR switchperf.type:ifOutErrors OR switchperf.type:ifInDiscards OR switchperf.type:ifOutDiscards OR switchperf.type:ifInUcastPkts OR switchperf.type:ifInNUcastPkts OR switchperf.type:ifOutNUcastPkts OR switchperf.type:ifOutUcastPkts)\n| bucket timestamp span=5m as ts | stats sum(switchperf.value) as _totalPkts by ts,switchperf.devip,switchperf.ifindex,switchperf.type  | sort by switchperf.ifindex,switchperf.type,+ts | autoregress _totalPkts as last_totalPkts p=1 | autoregress switchperf.ifindex as lastifindex p=1 | autoregress switchperf.type as lasttype p=1 | where\tswitchperf.ifindex==lastifindex| where\tswitchperf.type==lasttype | eval Pkts=case(_totalPkts-last_totalPkts<0,_totalPkts-last_totalPkts+4294967296,default,_totalPkts-last_totalPkts) | stats sum(Pkts) as Pkts by switchperf.devip,switchperf.type | parse field=switchperf.type \"[a-zA-Z]+(?<type>[A-Z]\\S+)\" | stats sum(Pkts) as Pkts by type | eval type=case(type==\"Pkts\",\"正常包数\",type==\"Discards\",\"丢弃包数\",type==\"Errors\",\"错误包数\")\n"}
{"input": "按每5分钟分桶统计正常包和丢包、错包实时趋势。索引可用字段有：switchperf.devip, switchperf.ifindex, switchperf.type, switchperf.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "网络设备接口数据数据，编写查询语句实现如下分析场景", "output": "appname:switchperf AND (switchperf.type:ifInErrors OR switchperf.type:ifOutErrors OR switchperf.type:ifInDiscards OR switchperf.type:ifOutDiscards OR switchperf.type:ifInUcastPkts OR switchperf.type:ifInNUcastPkts OR switchperf.type:ifOutNUcastPkts OR switchperf.type:ifOutUcastPkts)\n| bucket timestamp span=5m as ts | stats sum(switchperf.value) as _totalPkts by ts,switchperf.devip,switchperf.ifindex,switchperf.type  | sort by switchperf.ifindex,switchperf.type,+ts | autoregress _totalPkts as last_totalPkts p=1 | autoregress switchperf.ifindex as lastifindex p=1 | autoregress switchperf.type as lasttype p=1 | where\tswitchperf.ifindex==lastifindex| where\tswitchperf.type==lasttype | eval Pkts=case(_totalPkts-last_totalPkts<0,_totalPkts-last_totalPkts+4294967296,default,_totalPkts-last_totalPkts) | stats sum(Pkts) as Pkts by ts,switchperf.devip,switchperf.type | parse field=switchperf.type \"[a-zA-Z]+(?<type>[A-Z]\\S+)\" | eval type=case(type==\"Pkts\",\"正常包数\",type==\"Discards\",\"丢弃包数\",type==\"Errors\",\"错误包数\")\n"}
{"input": "过滤 mysql_query标签日志中 Query select, Query insert，Query update 关键字，从日志原文中正则解析 Query 后面的非空文本单词，命名为 action。然后以 action 分组，按每10分钟统计mysql操作类型的数量趋势。索引可用字段有：mysql.level, mysql.os_type, mysql.query_time, mysql.rows_examined, mysql.sql, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "mysql日志数据，编写查询语句实现如下分析场景", "output": "appname:mysql tag:mysql_query AND (\"Query\tselect\" OR \"Query\tinsert\" OR \"Query\tupdate\")| parse field=raw_message \"Query\\s+(?<action>\\S+)\" | bucket timestamp span=10m as ts|stats count() as count_ by action,ts"}
{"input": "按每30分钟分桶统计F5严重事件发生趋势。索引可用字段有：loadbalancing.dst_ip, loadbalancing.level, loadbalancing.listenervs_ip, loadbalancing.msg, loadbalancing.querytype, loadbalancing.responsecode, loadbalancing.severity, loadbalancing.src.geo.province, loadbalancing.src_ip, loadbalancing.status, loadbalancing.type, loadbalancing.user, loadbalancing.username, loadblancing.status, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "F5数据，编写查询语句实现如下分析场景", "output": "appname:loadbalancing tag:f5 AND loadbalancing.level:crit|parse \"^(?:[^:\\n]*:){5}(?<msg>.+)\"|bucket timestamp span=30m as ts|stats count() as ct by msg,ts|rename ct as \"事件数\""}
{"input": "按每5分钟分桶统计报错趋势分析。索引可用字段有：loadbalancing.dst_ip, loadbalancing.level, loadbalancing.listenervs_ip, loadbalancing.msg, loadbalancing.querytype, loadbalancing.responsecode, loadbalancing.severity, loadbalancing.src.geo.province, loadbalancing.src_ip, loadbalancing.status, loadbalancing.type, loadbalancing.user, loadbalancing.username, loadblancing.status, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "F5数据，编写查询语句实现如下分析场景", "output": "appname:loadbalancing tag:f5 AND loadbalancing.level:err|parse \"^(?:[^:\\n]*:){5}(?<msg>.+)\"|bucket timestamp span=5m as ts|stats count() as ct by msg,ts|rename ct as \"事件数\""}
{"input": "索引可用字段有：loadbalancing.dst_ip, loadbalancing.level, loadbalancing.listenervs_ip, loadbalancing.msg, loadbalancing.querytype, loadbalancing.responsecode, loadbalancing.severity, loadbalancing.src.geo.province, loadbalancing.src_ip, loadbalancing.status, loadbalancing.type, loadbalancing.user, loadbalancing.username, loadblancing.status, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我的问题可能涉及到网络流量的负载均衡和 F5 设备上的错误或解析问题：寻找在应用名为“appname”且包含标记“tag:f5”的日志中，出现负载平衡级别为“loadbalancing.level:err”或以“parse”开头并使用正则表达式“^(?:[^:]*:){5}(?<msg>.+)”进行解析时发生的错误消息数量统计信息（即事件数），并且将时间戳按分钟粒度拆分为五分钟的时间间隔，并将结果聚合为每个错误消息和时间间隔的事件数量统计信息。", "output": "appname:loadbalancing tag:f5 AND loadbalancing.level:err|parse \"^(?:[^:]*:){5}(?<msg>.+)\"|bucket timestamp span=5m as ts|stats count() as ct by msg,ts|rename ct as \"事件数\""}
{"input": "索引可用字段有：switchperf.devip, switchperf.ifindex, switchperf.type, switchperf.value, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，在五分钟内，这个交换机的哪个端口出错了或者丢失了数据包呢？", "output": "appname:switchperf AND (switchperf.type:ifInErrors OR switchperf.type:ifOutErrors OR switchperf.type:ifInDiscards OR switchperf.type:ifOutDiscards OR switchperf.type:ifInUcastPkts OR switchperf.type:ifInNUcastPkts OR switchperf.type:ifOutNUcastPkts OR switchperf.type:ifOutUcastPkts)| bucket timestamp span=5m as ts | stats sum(switchperf.value) as _totalPkts by ts,switchperf.devip,switchperf.ifindex,switchperf.type  | sort by switchperf.ifindex,switchperf.type,+ts | autoregress _totalPkts as last_totalPkts p=1 | autoregress switchperf.ifindex as lastifindex p=1 | autoregress switchperf.type as lasttype p=1 | where switchperf.ifindex==lastifindex| where switchperf.type==lasttype | eval Pkts=case(_totalPkts-last_totalPkts<0,_totalPkts-last_totalPkts+4294967296,default,_totalPkts-last_totalPkts) | stats sum(Pkts) as Pkts by ts,switchperf.devip,switchperf.type | parse field=switchperf.type \"[a-zA-Z]+(?<type>[A-Z]\\S+)\" | eval type=case(type==\"Pkts\",\"正常包数\",type==\"Discards\",\"丢弃包数\",type==\"Errors\",\"错误包数\")"}
{"input": "索引可用字段有：mysql.level, mysql.os_type, mysql.query_time, mysql.rows_examined, mysql.sql, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想跟踪 MySQL 查询活动，并按动作和时间间隔进行汇总。", "output": "appname:mysql tag:mysql_query AND (\"Query select\" OR \"Query insert\" OR \"Query update\")| parse field=raw_message \"Query\\s+(?<action>\\S+)\" | bucket timestamp span=10m as ts|stats count() as count_ by action,ts"}
{"input": "索引可用字段有：mysql.level, mysql.os_type, mysql.query_time, mysql.rows_examined, mysql.sql, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想知道你在做什么，所以我先向你展示一下最近一小时内的 MySQL 查询量情况", "output": "appname:mysql tag:mysql_query AND (\"Query select\" OR \"Query insert\" OR \"Query update\")| parse field=raw_message \"Query\\s+(?<action>\\S+)\"|eval query=case(action==\"SELECT\",\"select\",action==\"INSERT\",\"insert\",action==\"UPDATE\",\"update\",default,action) | bucket timestamp span=10m as ts|stats count() as count_ by query,ts|rename count_ as \"请求数量\""}
