{"input": "", "instruction": "vsphere_esxi宿主机CPU健康度", "output": "appname:vsphere tag:vsphere source:HostSystem* |stats dc(host) as _ct |appendcols [[ appname:vsphere tag:vsphere source:HostSystem* |dedup 1 host |eval cpu_percent=todouble(format(\"%.2f\",cpu.used.mhz/cpu.total.mhz)) |where cpu_percent > 0.9 |stats dc(host) as _dc  ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "vsphere_esxi宿主机内存健康度", "output": "appname:vsphere tag:vsphere source:HostSystem* |stats dc(host) as _ct |appendcols [[ appname:vsphere tag:vsphere source:HostSystem* |dedup 1 host |eval memory_total_GB=tolong(format(\"%.0f\",memory.total.bytes/1024/1024/1024)) |eval memory_free_GB=tolong(format(\"%.0f\",memory.free.bytes/1024/1024/1024)) |eval memory_used_GB=tolong(memory_total_GB-memory_free_GB) |eval memory_percent=todouble(format(\"%.2f\",memory_used_GB/memory_total_GB)) |where memory_percent > 0.9 |stats dc(host) as _dc ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct)) |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "vsphere_esxi虚拟机内存健康度", "output": "appname:vsphere tag:vsphere source:VirtualMachine* |stats dc(name) as _ct |appendcols [[ appname:vsphere tag:vsphere source:VirtualMachine* |dedup 1 name |eval memory_total_MB=tolong(format(\"%.0f\",memory.total.guest.bytes/1024/1024)) |eval memory_free_MB=tolong(format(\"%.0f\",memory.free.guest.bytes/1024/1024)) |eval memory_used_MB=tolong(memory_total_MB-memory_free_MB) |eval memory_percent=todouble(format(\"%.2f\",memory_used_MB/memory_total_MB)) |where memory_percent>0.9 |stats dc(name) as _dc  ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "vsphere_esxi虚拟机存储健康度", "output": "appname:vsphere tag:vsphere source:VirtualMachine* |stats dc(name) as _ct |appendcols [[ appname:vsphere tag:vsphere source:VirtualMachine* |dedup 1 name |eval storage_provisioned_MB=tolong(format(\"%.0f\",storage.provisioned.bytes/1024/1024)) |eval storage_used_MB=tolong(format(\"%.0f\",storage.used.bytes/1024/1024)) |eval storage_percent=todouble(format(\"%.2f\",storage_used_MB/storage_provisioned_MB)) |where storage_percent >0.9 |table name,storage_provisioned_MB,storage_used_MB,storage_percent |stats dc(name) as _dc  ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "先搜索 Accepted password for 日志，按ip,hostname,audit.msg.user,audit.msg.src_ip,audit.msg.src_port,audit.msg.pid,timestamp分组统计。然后搜索 sessin closed for 日志，按 ip,hostname,audit.msg.pid,audit.msg.user,timestamp统计结果，用ip,audit.msg.user,audit.msg.pid字段做关联两个查询的结果。将 closed 日志的时间命名为 logout_time，accepted 日志的时间命名为 login_time，二者相减，得到在线时间。最后将在线时间从毫秒转为分钟，登录时间和登出时间转为人类可读格式。创建新字段 status 并赋值为登录成功。接着，再搜索 Failed password for 日志，列出时间等信息，复制 status 为登录失败，也追加到结果中。索引可用字段有：audit.MACHINE, audit.OSUSER, audit.PROGRAM, audit.SQL_ID, audit.SQL_TEXT, audit.USERNAME, audit.command, audit.msg.cmd, audit.msg.command, audit.msg.exec_time, audit.msg.info, audit.msg.path, audit.msg.pid, audit.msg.pwd, audit.msg.rhost, audit.msg.ruser, audit.msg.ser, audit.msg.src_ip, audit.msg.src_port, audit.msg.user, audit.up_time, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "linux_当天ssh登录详情", "output": "starttime=\"now/d\" appname:audit  AND audit.msg.ser:sshd AND \"Accepted password for\" | stats count() as login by ip,hostname,audit.msg.user,audit.msg.src_ip,audit.msg.src_port,audit.msg.pid,timestamp  | rename timestamp as login_time  | sort by login_time | join type=left ip,audit.msg.user,audit.msg.pid  [[  appname:audit AND audit.msg.ser:sshd AND (\"session closed for\") | stats count() as logout by ip,hostname,audit.msg.pid,audit.msg.user,timestamp  | rename timestamp as logout_time  | sort by logout_time ]]  | eval dura=format(\"%.2f分钟\",(logout_time-login_time)/60000)  | eval login_time=formatdate(login_time)  | eval logout_time=formatdate(logout_time) | eval status=\"登录成功\"   | fields login_time,audit.msg.src_ip,audit.msg.user,hostname,ip,logout_time,dura,status | append [[ appname:audit  AND audit.msg.ser:sshd AND \"Failed password for\" | eval login_time=formatdate(timestamp)  | table login_time,audit.msg.src_ip,audit.msg.user,hostname,ip | eval status=\"登录失败\"   ]]"}
{"input": "", "instruction": "vCenter 服务器 CPU 使用率很高，有点烦人。能不能帮忙分析一下原因和建议处理方法吗？", "output": "appname:vsphere tag:vsphere source:HostSystem* |stats dc(host) as _ct |appendcols [[ appname:vsphere tag:vsphere source:HostSystem* |dedup 1 host |eval cpu_percent=todouble(format(\"%.2f\",cpu.used.mhz/cpu.total.mhz)) |where cpu_percent > 0.9 |stats dc(host) as _dc  ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "我想问的是主机的内存使用率是否过高", "output": "appname:vsphere tag:vsphere source:HostSystem* |stats dc(host) as _ct |appendcols [[ appname:vsphere tag:vsphere source:HostSystem* |dedup 1 host |eval memory_total_GB=tolong(format(\"%.0f\",memory.total.bytes/1024/1024/1024)) |eval memory_free_GB=tolong(format(\"%.0f\",memory.free.bytes/1024/1024/1024)) |eval memory_used_GB=tolong(memory_total_GB-memory_free_GB) |eval memory_percent=todouble(format(\"%.2f\",memory_used_GB/memory_total_GB)) |where memory_percent > 0.9 |stats dc(host) as _dc ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct)) |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "我想问的是，在 vCenter 中，有哪些 VirtualMachine 实例的内存使用率高达 90% 以上的主机吗？", "output": "appname:vsphere tag:vsphere source:VirtualMachine* |stats dc(name) as _ct |appendcols [[ appname:vsphere tag:vsphere source:VirtualMachine* |dedup 1 name |eval memory_total_MB=tolong(format(\"%.0f\",memory.total.guest.bytes/1024/1024)) |eval memory_free_MB=tolong(format(\"%.0f\",memory.free.guest.bytes/1024/1024)) |eval memory_used_MB=tolong(memory_total_MB-memory_free_MB) |eval memory_percent=todouble(format(\"%.2f\",memory_used_MB/memory_total_MB)) |where memory_percent>0.9 |stats dc(name) as _dc  ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "vsphere_esxi存储健康度", "output": "appname:vsphere tag:vsphere source:Datastore* |stats dc(name) as _ct |appendcols [[ appname:vsphere tag:vsphere source:Datastore* capacity.used.pct:>90 |stats dc(name) as _dc  ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "浪潮云宿主机内存健康度", "output": "appname:incloud_sphere tag:host |stats dc(host) as _ct |appendcols [[  appname:incloud_sphere tag:host  |dedup 1 host  |where memScore < 90  |stats dc(host) as _dc   ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "浪潮云宿主机存储健康度", "output": "appname:incloud_sphere tag:host |stats dc(host) as _ct |appendcols [[  appname:incloud_sphere tag:host  |dedup 1 host  |where storageScore < 90  |stats dc(host) as _dc  ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "浪潮云宿主机CPU健康度", "output": "appname:incloud_sphere tag:host |stats dc(host) as _ct |appendcols [[  appname:incloud_sphere tag:host  |dedup 1 host  |where cpuScore < 90  |stats dc(host) as _dc ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "浪潮云虚拟机内存健康度", "output": "appname:incloud_sphere tag:vm |stats dc(name) as _ct |appendcols [[  appname:incloud_sphere tag:vm  |dedup 1 host  |where memoryUsage > 90  |stats dc(name) as _dc ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "Linux操作系统审计昨天的主机CPU健康度", "output": "starttime=\"-1d/d\" endtime=\"now/d\" appname:top_info_system_stats | stats dc(ip) as _ct |appendcols [[ starttime=\"-1d/d\" endtime=\"now/d\" appname:top_info_system_stats  |stats min(cpu.idle_percent) as _min by ip |where _min <=10 |stats dc(ip) as _dc ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "计算近七天的 IP 去重数_ct和内存使用率大于 90 的 IP 去重数_dc，计算(_ct-_dc) / _ct的值即为内存健康度。", "instruction": "Linux操作系统审计_主机内存健康度", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_system_stats |stats dc(ip) as _ct |appendcols [[ starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_system_stats |stats max(Mem.used_percent) as _max by ip |where _max >=90 |stats dc(ip) as _dc ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "Linux操作系统审计_最近七天的主机磁盘健康度", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_disk_stats |stats dc(ip) as _ct |appendcols [[ starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_disk_stats AND (disk.path:\"/\" OR disk.path:\"/data\") |stats max(disk.used_percent) as _max by ip |where _max >=90 |stats dc(ip) as _dc ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "告诉我 vCenter 中所有数据存储的容量使用率超过 90% 的主机名和它们的总容量。", "output": "appname:vsphere tag:vsphere source:Datastore* |stats dc(name) as _ct |appendcols [[ appname:vsphere tag:vsphere source:Datastore* capacity.used.pct:>90 |stats dc(name) as _dc  ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "我想问的是，你们公司的某些主机在存储空间利用率方面存在问题，请帮忙分析一下原因和解决方案。", "output": "appname:incloud_sphere tag:host |stats dc(host) as _ct |appendcols [[  appname:incloud_sphere tag:host  |dedup 1 host  |where storageScore < 90  |stats dc(host) as _dc  ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "询问关于某云服务的运行状况和性能问题。我希望了解某个特定应用在某一虚拟机（VM）实例上是否存在内存使用率高于 90% 的情况，并计算出该 VM 实例的整体运行状况如何。", "output": "appname:incloud_sphere tag:vm |stats dc(name) as _ct |appendcols [[  appname:incloud_sphere tag:vm  |dedup 1 host  |where memoryUsage > 90  |stats dc(name) as _dc ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "我想问的是，系统 CPU 使用率低于 10% 的主机有多少台？而且这个比例和昨天相比有没有变化。", "output": "starttime=\"-1d/d\" endtime=\"now/d\" appname:top_info_system_stats | stats dc(ip) as _ct |appendcols [[ starttime=\"-1d/d\" endtime=\"now/d\" appname:top_info_system_stats  |stats min(cpu.idle_percent) as _min by ip |where _min <=10 |stats dc(ip) as _dc ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "我想问关于七天前到今天主机上的内存使用率超过90%的实例数量和比例。", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_system_stats |stats dc(ip) as _ct |appendcols [[ starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_system_stats |stats max(Mem.used_percent) as _max by ip |where _max >=90 |stats dc(ip) as _dc ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
{"input": "", "instruction": "我想要知道最近一周内有哪些应用使用了大量磁盘空间的主机IP地址和它们之间的健康值比例。", "output": "starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_disk_stats |stats dc(ip) as _ct |appendcols [[ starttime=\"-7d/d\" endtime=\"now/d\" appname:top_info_disk_stats AND (disk.path:\"/\" OR disk.path:\"/data\") |stats max(disk.used_percent) as _max by ip |where _max >=90 |stats dc(ip) as _dc ]] |eval health=todouble(format(\"%.3f\",abs(_ct-_dc)/_ct))"}
