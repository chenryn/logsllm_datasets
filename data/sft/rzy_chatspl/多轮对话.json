{"history": [], "instruction": "查询包含 ERROR 级别，且错误信息中包含 timeout 或 connection 关键字的日志记录：", "output": "ERROR (timeout OR connection)"}
{"history": [["查询包含 ERROR 级别，且错误信息中包含 timeout 或 connection 关键字的日志记录：", "ERROR (timeout OR connection)"]], "instruction": "只查看最近一小时内：", "output": "starttime=\"-1h\" ERROR (timeout OR connection)"}
{"history": [], "instruction": "查找包含错误或警告的日志：", "output": "ERROR OR WARN"}
{"history": [], "instruction": "查询今天来自青岛和济南的日志：", "output": "starttime=\"now/d\" (apache.geo.city:青岛 OR apache.geo.city:济南) "}
{"history": [["查询今天来自青岛和济南的日志：", "starttime=\"now/d\" (apache.geo.city:青岛 OR apache.geo.city:济南) "]], "instruction": "响应字节数大于 100KB 的", "output": "starttime=\"now/d\" (apache.geo.city:青岛 OR apache.geo.city:济南) AND (apache.resp_len:>102400)"}
{"history": [], "instruction": "锐捷交换机日志数据查询恶意攻击", "output": "tag:ruijie switch.module:NFPP* AND (switch.type:DOS_DETECTED OR switch.type:SCAN)"}
{"history": [], "instruction": "深信服上网行为审计邮件内容包含工资", "output": "tag:mail AND \"工资\""}
{"history": [["深信服上网行为审计邮件内容包含工资", "tag:mail AND \"工资\""]], "instruction": "加上薪资、薪酬、薪水这几个词", "output": "tag:mail AND (\"薪资\" OR \"薪酬\" OR \"薪水\" OR \"工资\")"}
{"history": [], "instruction": "深信服上网行为审计邮件内容包含机密", "output": "tag:mail AND \"机密\""}
{"history": [["深信服上网行为审计邮件内容包含机密", "tag:mail AND \"机密\""]], "instruction": "加上保密、秘密、敏感这几个词", "output": "tag:mail AND (\"保密\" OR \"秘密\" OR \"敏感\" OR \"机密\")"}
{"history": [], "instruction": "如何统计uid独立数", "output": "* | stats dc(uid)"}
{"history": [["如何统计uid独立数", "* | stats dc(uid)"]], "instruction": "使用dc统计不准", "output": " * | stats distinct(uid)"}
{"history": [["如何统计uid独立数", "* | stats dc(uid)"], ["使用dc统计不准", " * | stats distinct(uid)"]], "instruction": "介绍一下 dc() 函数的估算逻辑以及估算结果和精准值之间的差距？", "output": "好的。日志易查询的dc()函数使用了 HyperLogLog++ 算法。该算法可以基于字段值的哈希，以及一些属性配置来计算独立数，在低基数上有较好的准确率。它最大的优势是可以固定内存的使用，无论待统计字段是有数百亿还是数十亿个独立值，计算过程的内存使用量，仅取决于配置的精度。默认精度 1000 的情况下，估算结果和精准值的偏差大概在 1% 左右。注意：HyperLogLog++ 算法依赖于哈希的前导零，因此字段值的哈希分布情况对估算的精准度会有影响。请在无精准要求的 IT 运维场景中使用 dc() 函数，有精准要求的业务分析场景使用distinct()函数。"}
{"history": [["锐捷交换机日志数据查询恶意攻击", "tag:ruijie switch.module:NFPP* AND (switch.type:DOS_DETECTED OR switch.type:SCAN)"]], "instruction": "今天日志量的趋势", "output": "starttime=\"now/d\" endtime=\"now\" tag:ruijie switch.module:NFPP* AND (switch.type:DOS_DETECTED OR switch.type:SCAN) | bucket timestamp span = 30m as ts | stats count() by ts | eval time = formatdate(ts,\"HH:mm\")"}
{"history": [["锐捷交换机日志数据查询恶意攻击", "tag:ruijie switch.module:NFPP* AND (switch.type:DOS_DETECTED OR switch.type:SCAN)"], ["今天日志量的趋势", "starttime=\"now/d\" endtime=\"now\" tag:ruijie switch.module:NFPP* AND (switch.type:DOS_DETECTED OR switch.type:SCAN) | bucket timestamp span = 30m as ts | stats count() by ts | eval time = formatdate(ts,\"HH:mm\")"]], "instruction": "对比昨天", "output": " starttime=\"-1d/d\" endtime=\"now/d\" tag:ruijie switch.module:NFPP* AND (switch.type:DOS_DETECTED OR switch.type:SCAN) | bucket timestamp span = 30m as ts | stats count() by ts | eval time = formatdate(ts,\"HH:mm\")|eval line = \"yesterday\"| append [[ starttime=\"now/d\" endtime=\"now\" tag:ruijie switch.module:NFPP* AND (switch.type:DOS_DETECTED OR switch.type:SCAN) | bucket timestamp span = 30m as ts | stats count() by ts | eval time = formatdate(ts,\"HH:mm\")|eval line = \"today\"]]"}
{"history": [["深信服上网行为审计邮件内容包含工资", "tag:mail AND \"工资\""], ["加上薪资、薪酬、薪水这几个词", "tag:mail AND (\"薪资\" OR \"薪酬\" OR \"薪水\" OR \"工资\")"]], "instruction": "按每 6 小时统计日志量趋势", "output": "tag:mail AND (\"薪资\" OR \"薪酬\" OR \"薪水\" OR \"工资\")|bucket timestamp span=6h as ts|stats count() by ts"}
{"history": [["深信服上网行为审计邮件内容包含机密", "tag:mail AND \"机密\""], ["加上保密、秘密、敏感这几个词", "tag:mail AND (\"保密\" OR \"秘密\" OR \"敏感\" OR \"机密\")"]], "instruction": "按每 12 小时统计日志量趋势", "output": "tag:mail AND (\"保密\" OR \"秘密\" OR \"敏感\" OR \"机密\")|bucket timestamp span=12h as ts|stats count() by ts"}
{"history": [], "instruction": "查询包含 ping 或 pong 关键字的日志记录，并按照主机名分组统计：", "output": "(ping OR pong) | stats count() by hostname"}
{"history": [["查询包含 ping 或 pong 关键字的日志记录，并按照主机名分组统计：", "(ping OR pong) | stats count() by hostname"]], "instruction": "再返回去看里面主机名为 hostname3 或 hostname4 的日志：", "output": "(ping OR pong) (hostname:hostname3 OR hostname:hostname4)"}
{"history": [["查询包含 ping 或 pong 关键字的日志记录，并按照主机名分组统计：", "(ping OR pong) | stats count() by hostname"], ["再返回去看里面主机名为 hostname3 或 hostname4 的日志：", "(ping OR pong) (hostname:hostname3 OR hostname:hostname4)"]], "instruction": "按照时间分布显示折线图：", "output": "(ping OR pong) (hostname:hostname3 OR hostname:hostname4) | timechart count() by hostname"}
{"history": [["查找包含错误或警告的日志：", "ERROR OR WARN"]], "instruction": "按照日志级别和组件进行分组统计：", "output": "ERROR OR WARN | stats count() by log_level, component"}
{"history": [], "instruction": "华为交换机错误日志明细。索引可用字段有：switch.action,switch.auth_method,switch.bandwidth,switch.brief,switch.cmd,switch.count,switch.describe,switch.ethernet,switch.event_type,switch.facility,switch.host,switch.host_ip,switch.hostname,switch.interface_name,switch.level,switch.login_method,switch.mnemonic,switch.mode,switch.module,switch.port,switch.port_channel,switch.reason,switch.result,switch.severity,switch.speed,switch.src_ip,switch.src_mac,switch.state,switch.terminal,switch.time,switch.type,switch.user,switch.vlan,appname,tag,timestamp,hostname,ip,raw_message。请仅使用需要的字段", "output": "appname:switch tag:huawei AND (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault)|table timestamp,switch.module,switch.describe,raw_message"}
{"history": [["华为交换机错误日志明细。索引可用字段有：switch.action,switch.auth_method,switch.bandwidth,switch.brief,switch.cmd,switch.count,switch.describe,switch.ethernet,switch.event_type,switch.facility,switch.host,switch.host_ip,switch.hostname,switch.interface_name,switch.level,switch.login_method,switch.mnemonic,switch.mode,switch.module,switch.port,switch.port_channel,switch.reason,switch.result,switch.severity,switch.speed,switch.src_ip,switch.src_mac,switch.state,switch.terminal,switch.time,switch.type,switch.user,switch.vlan,appname,tag,timestamp,hostname,ip,raw_message。请仅使用需要的字段", "appname:switch tag:huawei AND (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault)|table timestamp,switch.module,switch.describe,raw_message"]], "instruction": "表头改用中文", "output": "appname:switch tag:huawei AND (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault)|table timestamp,switch.module,switch.describe,raw_message|rename time as \"时间\",switch.module as \"模块\",switch.describe as \"等级\",raw_message as \"原始日志\""}
{"history": [["华为交换机错误日志明细。索引可用字段有：switch.action,switch.auth_method,switch.bandwidth,switch.brief,switch.cmd,switch.count,switch.describe,switch.ethernet,switch.event_type,switch.facility,switch.host,switch.host_ip,switch.hostname,switch.interface_name,switch.level,switch.login_method,switch.mnemonic,switch.mode,switch.module,switch.port,switch.port_channel,switch.reason,switch.result,switch.severity,switch.speed,switch.src_ip,switch.src_mac,switch.state,switch.terminal,switch.time,switch.type,switch.user,switch.vlan,appname,tag,timestamp,hostname,ip,raw_message。请仅使用需要的字段", "appname:switch tag:huawei AND (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault)|table timestamp,switch.module,switch.describe,raw_message"], ["表头改用中文", "appname:switch tag:huawei AND (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault)|table timestamp,switch.module,switch.describe,raw_message|rename time as \"时间\",switch.module as \"模块\",switch.describe as \"等级\",raw_message as \"原始日志\""]], "instruction": "时间戳改成可读格式", "output": "appname:switch tag:huawei AND (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault)|eval time=formatdate(timestamp)|table time,switch.module,switch.describe,raw_message|rename time as \"时间\",switch.module as \"模块\",switch.describe as \"等级\",raw_message as \"原始日志\""}
{"history": [], "instruction": "飞塔防火墙warning日志量统计。索引可用字段有：firewall.action,firewall.app,firewall.apprisk,firewall.attack,firewall.attack_message,firewall.attack_type,firewall.brief,firewall.bytes_received,firewall.dst,firewall.dst_port,firewall.dst_zone,firewall.dup_add,firewall.end_time,firewall.event_name,firewall.event_type,firewall.facility,firewall.flow,firewall.grade,firewall.host,firewall.ingress_if,firewall.inpkt,firewall.interface,firewall.level,firewall.message_id,firewall.mnemonic,firewall.mod,firewall.module,firewall.op,firewall.outpkt,firewall.policy,firewall.policy_id,firewall.policyid,firewall.pri,firewall.proto,firewall.rcvd,firewall.rcvd_pkt,firewall.reason,firewall.receive_byte,firewall.recorder,firewall.result,firewall.rule,firewall.rule_name,firewall.send_byte,firewall.sent,firewall.sent_pkt,firewall.sentbyte,firewall.service,firewall.session_type,firewall.severity,firewall.severity_level,firewall.source,firewall.src,firewall.src_port,firewall.src_zone,firewall.start_time。请仅使用需要的字段", "output": "appname:firewall tag:fortinet firewall.level:warning | stats count() as cnt"}
{"history": [["飞塔防火墙warning日志量统计。索引可用字段有：firewall.action,firewall.app,firewall.apprisk,firewall.attack,firewall.attack_message,firewall.attack_type,firewall.brief,firewall.bytes_received,firewall.dst,firewall.dst_port,firewall.dst_zone,firewall.dup_add,firewall.end_time,firewall.event_name,firewall.event_type,firewall.facility,firewall.flow,firewall.grade,firewall.host,firewall.ingress_if,firewall.inpkt,firewall.interface,firewall.level,firewall.message_id,firewall.mnemonic,firewall.mod,firewall.module,firewall.op,firewall.outpkt,firewall.policy,firewall.policy_id,firewall.policyid,firewall.pri,firewall.proto,firewall.rcvd,firewall.rcvd_pkt,firewall.reason,firewall.receive_byte,firewall.recorder,firewall.result,firewall.rule,firewall.rule_name,firewall.send_byte,firewall.sent,firewall.sent_pkt,firewall.sentbyte,firewall.service,firewall.session_type,firewall.severity,firewall.severity_level,firewall.source,firewall.src,firewall.src_port,firewall.src_zone,firewall.start_time。请仅使用需要的字段", "appname:firewall tag:fortinet firewall.level:warning | stats count() as cnt"]], "instruction": "firewall.pri字段也要查", "output": "appname:firewall tag:fortinet firewall.level:warning OR firewall.pri:warning | stats count() as cnt"}
{"history": [["Windows_AD登录最频繁IP_top10", "appname:windows (json.event_id:4624 OR json.event_id:4625) NOT (json.src_ip:\"-\" OR json.username:SYSTEM)| stats count() as cnt by json.src_ip"]], "instruction": "改成user统计", "output": "appname:windows (json.event_id:4624 OR json.event_id:4625) NOT (json.src_ip:\"-\" OR json.username:SYSTEM)| stats count() as cnt by json.username| sort by cnt |limit 10"}
{"history": [["Windows_AD登录最频繁IP_top10", "appname:windows (json.event_id:4624 OR json.event_id:4625) NOT (json.src_ip:\"-\" OR json.username:SYSTEM)| stats count() as cnt by json.src_ip"], ["改成user统计", "appname:windows (json.event_id:4624 OR json.event_id:4625) NOT (json.src_ip:\"-\" OR json.username:SYSTEM)| stats count() as cnt by json.username| sort by cnt |limit 10"]], "instruction": "root账户的来源 IP 统计", "output": "appname:windows (json.event_id:4624 OR json.event_id:4625) NOT (json.src_ip:\"-\" OR json.username:SYSTEM) AND json.username:root | stats count() as cnt by json.src_ip"}
{"history": [["windows非工作时间用户登录明细", "* AND appname:windows AND (json.event_id:4624 OR json.event_id:4625 OR json.event_id:4648)|eval time=formatdate(timestamp)|eval hour = tolong(formatdate(timestamp,\"HH\"))|eval day = tolong(formatdate(timestamp,\"e\"))|where day >5 &&(hour <8 || hour >19)"]], "instruction": "按次数排行列出前十个账号", "output": "* AND appname:windows AND (json.event_id:4624 OR json.event_id:4625 OR json.event_id:4648) |eval time=formatdate(timestamp)|eval hour = tolong(formatdate(timestamp,\"HH\"))|eval day = tolong(formatdate(timestamp,\"e\"))|where day >5 &&(hour <8 || hour >19) |stats count() as ct by json.event_data.TargetUserName |sort by ct |limit 10"}
{"history": [], "instruction": "查询 syslog 日志中包含 error 关键字的记录：", "output": "appname:syslog error"}
{"history": [["查询 syslog 日志中包含 error 关键字的记录：", "appname:syslog error"]], "instruction": "还有 fail", "output": "appname:syslog (error OR fail)"}
{"history": [["查询 syslog 日志中包含 error 关键字的记录：", "appname:syslog error"], ["还有 fail", "appname:syslog (error OR fail)"]], "instruction": "再加上 fatal", "output": "appname:syslog (error OR fail OR fatal)"}
{"history": [["查询 syslog 日志中包含 error 关键字的记录：", "appname:syslog error"], ["还有 fail", "appname:syslog (error OR fail)"], ["再加上 fatal", "appname:syslog (error OR fail OR fatal)"]], "instruction": "具体看昨天的", "output": "starttime=\"now-1d/d\" endtime=\"now/d\" appname:syslog (error OR fail OR fatal)"}
{"history": [["查询 syslog 日志中包含 error 关键字的记录：", "appname:syslog error"], ["还有 fail", "appname:syslog (error OR fail)"], ["再加上 fatal", "appname:syslog (error OR fail OR fatal)"], ["具体看昨天的", "starttime=\"now-1d/d\" endtime=\"now/d\" appname:syslog (error OR fail OR fatal)"]], "instruction": "缩小到 8 点到 9 点之间", "output": "starttime=\"now-1d/d+8h\" endtime=\"now-1d/d+9h\" appname:syslog (error OR fail OR fatal)"}
{"history": [], "instruction": "查询 kafka 日志中包含 ERROR 关键字的日志记录：", "output": "appname:kafka ERROR"}
{"history": [["查询 kafka 日志中包含 ERROR 关键字的日志记录：", "appname:kafka ERROR"]], "instruction": "里面有 timeout 关键字的内容：", "output": "appname:kafka ERROR timeout"}
{"history": [["查询 kafka 日志中包含 ERROR 关键字的日志记录：", "appname:kafka ERROR"], ["里面有 timeout 关键字的内容：", "appname:kafka ERROR timeout"]], "instruction": " timeout 或 connection 都行：", "output": "appname:kafka ERROR (timeout OR connection)"}
{"history": [["查询 kafka 日志中包含 ERROR 关键字的日志记录：", "appname:kafka ERROR"], ["里面有 timeout 关键字的内容：", "appname:kafka ERROR timeout"], [" timeout 或 connection 都行：", "appname:kafka ERROR (timeout OR connection)"]], "instruction": "就最近五分钟内就行", "output": "starttime=\"-5m\" appname:kafka ERROR (timeout OR connection)"}
{"history": [], "instruction": "华为交换机数据，编写查询语句实现如下分析场景：登录成功方式TOP10分布", "output": "appname:switch tag:huawei  (switch.brief:LOGIN_OK OR \"succeeded in logging in\" OR switch.brief:LOGINOK) |top 10 switch.module"}
{"history": [["华为交换机数据，编写查询语句实现如下分析场景：登录成功方式TOP10分布", "appname:switch tag:huawei  (switch.brief:LOGIN_OK OR \"succeeded in logging in\" OR switch.brief:LOGINOK) |top 10 switch.module"]], "instruction": "登录成功的帐号分布", "output": "appname:switch tag:huawei  (switch.brief:LOGIN_OK OR \"succeeded in logging in\" OR switch.brief:LOGINOK) |top 10 switch.kvmsg.UserName"}
{"history": [], "instruction": "华为交换机数据，编写查询语句实现如下分析场景：登录失败方式top10分布", "output": "appname:switch tag:huawei (switch.brief:LOGINFAILED OR switch.brief: LOGINFAIL OR switch.brief:LOGINFAILED OR switch.brief:LOGIN_FAIL OR switch.brief:SNMP_FAIL OR switch.brief:SSH_FAIL) |top 10 switch.module"}
{"history": [["华为交换机数据，编写查询语句实现如下分析场景：登录失败方式top10分布", "appname:switch tag:huawei (switch.brief:LOGINFAILED OR switch.brief: LOGINFAIL OR switch.brief:LOGINFAILED OR switch.brief:LOGIN_FAIL OR switch.brief:SNMP_FAIL OR switch.brief:SSH_FAIL) |top 10 switch.module"]], "instruction": "登录失败最多的源主机", "output": "appname:switch tag:huawei (switch.brief:LOGINFAILED OR switch.brief: LOGINFAIL OR switch.brief:LOGINFAILED OR switch.brief:LOGIN_FAIL OR switch.brief:SNMP_FAIL OR switch.brief:SSH_FAIL) |top 1 switch.kvmsg.IpAddress"}
{"history": [], "instruction": "网络设备接口数据，编写查询语句实现如下分析场景：单位时段整机网络包进出方向总合统计", "output": "appname:switchperf AND (switchperf.type:ifInNUcastPkts OR switchperf.type:ifInUcastPkts OR switchperf.type:ifOutUcastPkts OR switchperf.type:ifOutNUcastPkts) | stats max(switchperf.value) as _max,min(switchperf.value) as _min by switchperf.devip,switchperf.type,switchperf.ifindex | eval totalpkts=_max-_min | stats sum(totalpkts) as _total"}
{"history": [["网络设备接口数据，编写查询语句实现如下分析场景：单位时段整机网络包进出方向总合统计", "appname:switchperf AND (switchperf.type:ifInNUcastPkts OR switchperf.type:ifInUcastPkts OR switchperf.type:ifOutUcastPkts OR switchperf.type:ifOutNUcastPkts) | stats max(switchperf.value) as _max,min(switchperf.value) as _min by switchperf.devip,switchperf.type,switchperf.ifindex | eval totalpkts=_max-_min | stats sum(totalpkts) as _total"]], "instruction": "错误包占比多少？", "output": "appname:switchperf AND (switchperf.type:ifInNUcastPkts OR switchperf.type:ifInUcastPkts OR switchperf.type:ifOutUcastPkts OR switchperf.type:ifOutNUcastPkts) | stats max(switchperf.value) as _max,min(switchperf.value) as _min by switchperf.devip,switchperf.type,switchperf.ifindex | eval totalpkts=_max-_min | stats sum(totalpkts) as _total| eval \n data=\"errors_ratio\"\n| join data  [[appname:switchperf AND (switchperf.type:ifInErrors OR switchperf.type:ifOutErrors) | stats max(switchperf.value) as _max,min(switchperf.value) as _min by switchperf.devip,switchperf.type,switchperf.ifindex | eval totalerrors=_max-_min | stats sum(totalerrors) as _errors| eval data=\"errors_ratio\"]] \n| eval errors_ratio=_errors/_total"}
{"history": [["网络设备接口数据，编写查询语句实现如下分析场景：单位时段整机网络包进出方向总合统计", "appname:switchperf AND (switchperf.type:ifInNUcastPkts OR switchperf.type:ifInUcastPkts OR switchperf.type:ifOutUcastPkts OR switchperf.type:ifOutNUcastPkts) | stats max(switchperf.value) as _max,min(switchperf.value) as _min by switchperf.devip,switchperf.type,switchperf.ifindex | eval totalpkts=_max-_min | stats sum(totalpkts) as _total"], ["错误包占比多少？", "appname:switchperf AND (switchperf.type:ifInNUcastPkts OR switchperf.type:ifInUcastPkts OR switchperf.type:ifOutUcastPkts OR switchperf.type:ifOutNUcastPkts) | stats max(switchperf.value) as _max,min(switchperf.value) as _min by switchperf.devip,switchperf.type,switchperf.ifindex | eval totalpkts=_max-_min | stats sum(totalpkts) as _total| eval \n data=\"errors_ratio\"\n| join data  [[appname:switchperf AND (switchperf.type:ifInErrors OR switchperf.type:ifOutErrors) | stats max(switchperf.value) as _max,min(switchperf.value) as _min by switchperf.devip,switchperf.type,switchperf.ifindex | eval totalerrors=_max-_min | stats sum(totalerrors) as _errors| eval data=\"errors_ratio\"]] \n| eval errors_ratio=_errors/_total"]], "instruction": "丢包占比又是多少？", "output": "appname:switchperf AND (switchperf.type:ifInNUcastPkts OR switchperf.type:ifInUcastPkts OR switchperf.type:ifOutUcastPkts OR switchperf.type:ifOutNUcastPkts) | stats max(switchperf.value) as _max,min(switchperf.value) as _min by switchperf.type,switchperf.ifindex | eval totalpkts=_max-_min | stats sum(totalpkts) as _total| eval data=\"discards_ratio\"\n| join data  [[appname:switchperf AND (switchperf.type:ifInDiscards OR switchperf.type:ifOutDiscards) | stats max(switchperf.value) as _max,min(switchperf.value) as _min by switchperf.type,switchperf.ifindex | eval totaldiscards=_max-_min | stats sum(totaldiscards) as _discards| eval data=\"discards_ratio\"]] \n| eval discards_ratio=_discards/_total"}
{"history": [], "instruction": "nginx 请求事件大于 3 秒的，按请求分组统计平均耗时", "output": "appname:nginx AND nginx.request_time:>3 | stats avg(nginx.request_time) by nginx.request_path "}
{"history": [["nginx 请求事件大于 3 秒的，按请求分组统计平均耗时", "appname:nginx AND nginx.request_time:>3 | stats avg(nginx.request_time) by nginx.request_path"]], "instruction": "最大值和最小值一起显示", "output": "appname:nginx AND nginx.request_time:>3 | stats avg(nginx.request_time), min(nginx.request_time), max(nginx.request_time) by nginx.request_path "}
{"history": [["根据以下直播域名计算 CDN 日志中直播业务的访客城市 top10 排名：live1.video.com, live2.video.com, live3.video.com", "appname:cdn AND (cdn.http_status:404 OR cdn.http_status:5?? OR cdn.http_status:403 OR cdn.http_status:200 OR cdn.http_status:206 )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) | top 10 cdn.geo.city"]], "instruction": "按分钟统计业务流量趋势", "output": "appname:cdn AND (cdn.http_status:404 OR cdn.http_status:5?? OR cdn.http_status:403 OR cdn.http_status:200 OR cdn.http_status:206 )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) | bucket timestamp span = 1m as ts |  stats sum(cdn.body_size) by ts, cdn.geo.city"}
{"history": [["根据以下直播域名计算 CDN 日志中直播业务的访客城市 top10 排名：live1.video.com, live2.video.com, live3.video.com", "appname:cdn AND (cdn.http_status:404 OR cdn.http_status:5?? OR cdn.http_status:403 OR cdn.http_status:200 OR cdn.http_status:206 )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) | top 10 cdn.geo.city"], ["按分钟统计业务流量趋势", "appname:cdn AND (cdn.http_status:404 OR cdn.http_status:5?? OR cdn.http_status:403 OR cdn.http_status:200 OR cdn.http_status:206 )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) | bucket timestamp span = 1m as ts |  stats sum(cdn.body_size) by ts, cdn.geo.city"]], "instruction": "只看错误状态的", "output": "appname:cdn AND (cdn.http_status:4?? OR cdn.http_status:5?? )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) | bucket timestamp span = 1m as ts |  stats sum(cdn.body_size) by ts, cdn.geo.city"}
{"history": [["根据以下直播域名计算 CDN 日志中直播业务的访客城市 top10 排名：live1.video.com, live2.video.com, live3.video.com", "appname:cdn AND (cdn.http_status:404 OR cdn.http_status:5?? OR cdn.http_status:403 OR cdn.http_status:200 OR cdn.http_status:206 )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) | top 10 cdn.geo.city"], ["按分钟统计业务流量趋势", "appname:cdn AND (cdn.http_status:404 OR cdn.http_status:5?? OR cdn.http_status:403 OR cdn.http_status:200 OR cdn.http_status:206 )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) | bucket timestamp span = 1m as ts |  stats sum(cdn.body_size) by ts, cdn.geo.city"], ["只看错误状态的", "appname:cdn AND (cdn.http_status:4?? OR cdn.http_status:5?? )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) | bucket timestamp span = 1m as ts |  stats sum(cdn.body_size) by ts, cdn.geo.city"]], "instruction": "改用运营商分组", "output": "appname:cdn AND (cdn.http_status:4?? OR cdn.http_status:5?? )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) | bucket timestamp span = 1m as ts |  stats sum(cdn.body_size) by ts, cdn.geo.isp"}
{"history": [], "instruction": "Linux操作系统审计日志：", "output": "appname:linux tag:secure"}
{"history": [["Linux操作系统审计日志：", "appname:linux tag:secure"]], "instruction": "只看加账号之类的：", "output": "appname:linux tag:secure (type:useradd OR type:passwd OR type:usermod OR type:groupadd OR type:gpasswd OR type:groupmod)"}
{"history": [["Linux操作系统审计日志：", "appname:linux tag:secure"], ["只看加账号之类的：", "appname:linux tag:secure (type:useradd OR type:passwd OR type:usermod OR type:groupadd OR type:gpasswd OR type:groupmod)"]], "instruction": "发生多少次？", "output": "appname:linux tag:secure (type:useradd OR type:passwd OR type:usermod OR type:groupadd OR type:gpasswd OR type:groupmod) |stats dc(pid) as cnt"}
{"history": [["Linux操作系统审计日志：", "appname:linux tag:secure"], ["只看加账号之类的：", "appname:linux tag:secure (type:useradd OR type:passwd OR type:usermod OR type:groupadd OR type:gpasswd OR type:groupmod)"], ["发生多少次？", "appname:linux tag:secure (type:useradd OR type:passwd OR type:usermod OR type:groupadd OR type:gpasswd OR type:groupmod) |stats dc(pid) as cnt"]], "instruction": "表格列出详细情况，时间(可读格式)、IP、操作类型，账号名等", "output": "appname:linux tag:secure (type:useradd OR type:passwd OR type:usermod OR type:groupadd OR type:gpasswd OR type:groupmod) |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\") |where !empty(user) |table time,ip,hostname,type,user |sort by +time |rename time as \"时间\",ip as \"IP地址\",hostname as \"主机名\",type as \"用户操作\",user as \"添加用户\""}
{"history": [], "instruction": "Linux操作系统审计敏感命令的执行：", "output": "appname:linux tag:audit AND (command:service* OR command:rm* OR command:export* OR command:kill*) "}
{"history": [], "instruction": "审计Linux主机敏感命令执行：", "output": "appname:linux tag:audit AND (command:service* OR command:rm* OR command:export* OR command:kill*)"}
{"history": [], "instruction": "aix错误事件明细：", "output": "appname:aix AND (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault)"}
{"history": [], "instruction": "windows非工作时间用户登录明细", "output": "* AND appname:windows AND (json.event_id:4624 OR json.event_id:4625 OR json.event_id:4648)|eval time=formatdate(timestamp)|eval hour = tolong(formatdate(timestamp,\"HH\"))|eval day = tolong(formatdate(timestamp,\"e\"))|where day >5 &&(hour <8 || hour >19)"}
{"history": [], "instruction": "windows错误日志明细前 50 条", "output": " appname:windows AND tag:application  (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\") |limit 50|eval time=formatdate(timestamp)|table time,ip,raw_message"}
{"history": [], "instruction": "根据以下直播域名计算 CDN 日志中直播业务的访客城市 top10 排名：live1.video.com, live2.video.com, live3.video.com", "output": "appname:cdn AND (cdn.http_status:404 OR cdn.http_status:5?? OR cdn.http_status:403 OR cdn.http_status:200 OR cdn.http_status:206 )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) | top 10 cdn.geo.city"}
{"history": [], "instruction": "windows系统错误日志", "output": "appname:pf_windows tag:system (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\")"}
{"history": [["windows系统错误日志", "appname:pf_windows tag:system (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\")"]], "instruction": "做成明细表格，包括 timestamp 可读格式时间、ip 地址和 windows.EventData.Data[].text 错误事件", "output": "appname:pf_windows tag:system (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\") |eval time=formatdate(timestamp)|table time,ip,windows.EventData.Data[].text|rename time as \"时间\",windows.EventData.Data[].text as \"错误事件\""}
{"history": [["windows系统错误日志", "appname:pf_windows tag:system (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\")"], ["做成明细表格，包括 timestamp 可读格式时间、ip 地址和 windows.EventData.Data[].text 错误事件", "appname:pf_windows tag:system (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\") |eval time=formatdate(timestamp)|table time,ip,windows.EventData.Data[].text|rename time as \"时间\",windows.EventData.Data[].text as \"错误事件\""]], "instruction": "只保留50 条", "output": "appname:pf_windows tag:system (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\") |eval time=formatdate(timestamp)|table time,ip,windows.EventData.Data[].text|rename time as \"时间\",windows.EventData.Data[].text as \"错误事件\" | limit 50"}
{"history": [], "instruction": "Aruba数据里需要关注的日志", "output": "appname:access_point AND tag:aruba AND (access_point.severity:EMERG  OR access_point.severity:ALERT OR access_point.severity:CRIT OR access_point.severity:ERRS)"}
{"history": [["Aruba数据里需要关注的日志", "appname:access_point AND tag:aruba AND (access_point.severity:EMERG  OR access_point.severity:ALERT OR access_point.severity:CRIT OR access_point.severity:ERRS)"]], "instruction": "只留下 50 条", "output": "appname:access_point AND tag:aruba AND (access_point.severity:EMERG  OR access_point.severity:ALERT OR access_point.severity:CRIT OR access_point.severity:ERRS) | limit 50"}
{"history": [], "instruction": "同花顺交易请求记录明细表格", "output": "appname:ths_all tag:ths_all NOT (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.GDZH,ths_all.funccn"}
{"history": [["同花顺交易请求记录明细表格", "appname:ths_all tag:ths_all NOT (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.GDZH,ths_all.funccn"]], "instruction": "加上返回记录的明细", "output": "appname:ths_all tag:ths_all NOT (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.GDZH,ths_all.funccn|eval line=\"请求\"\n |append\n [[\n appname:ths_all tag:ths_all  (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.ANSTYPE,ths_all.GDZH,ths_all.funccn,ths_all.msg\t|eval line=\"返回\"\n ]]"}
{"history": [["同花顺交易请求记录明细表格", "appname:ths_all tag:ths_all NOT (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.GDZH,ths_all.funccn"], ["加上返回记录的明细", "appname:ths_all tag:ths_all NOT (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.GDZH,ths_all.funccn|eval line=\"请求\"\n |append\n [[\n appname:ths_all tag:ths_all  (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.ANSTYPE,ths_all.GDZH,ths_all.funccn,ths_all.msg\t|eval line=\"返回\"\n ]]"]], "instruction": "根据ths_all.ANSTYPE值做判断，为 1 表示成功，为 0 表示失败。然后按时间排序", "output": "appname:ths_all tag:ths_all NOT (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.GDZH,ths_all.funccn|eval line=\"请求\"\n |append\n [[\n appname:ths_all tag:ths_all  (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.ANSTYPE,ths_all.GDZH,ths_all.funccn,ths_all.msg\t|eval line=\"返回\"\n ]]\n|eval bbb=case(ths_all.ANSTYPE==\"1\",\"成功\",ths_all.ANSTYPE==\"0\",\"失败\",default,\"\")\n|sort by +time\t|fields time,ths_all.GDZH,ths_all.funccn,bbb,line,ths_all.msg"}
{"history": [["同花顺交易请求记录明细表格", "appname:ths_all tag:ths_all NOT (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.GDZH,ths_all.funccn"], ["加上返回记录的明细", "appname:ths_all tag:ths_all NOT (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.GDZH,ths_all.funccn|eval line=\"请求\"\n |append\n [[\n appname:ths_all tag:ths_all  (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.ANSTYPE,ths_all.GDZH,ths_all.funccn,ths_all.msg\t|eval line=\"返回\"\n ]]"], ["根据ths_all.ANSTYPE值做判断，为 1 表示成功，为 0 表示失败。然后按时间排序", "appname:ths_all tag:ths_all NOT (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.GDZH,ths_all.funccn|eval line=\"请求\"\n |append\n [[\n appname:ths_all tag:ths_all  (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.ANSTYPE,ths_all.GDZH,ths_all.funccn,ths_all.msg\t|eval line=\"返回\"\n ]]\n|eval bbb=case(ths_all.ANSTYPE==\"1\",\"成功\",ths_all.ANSTYPE==\"0\",\"失败\",default,\"\")\n|sort by +time\t|fields time,ths_all.GDZH,ths_all.funccn,bbb,line,ths_all.msg"]], "instruction": "把表头分别重命名为时间、股东账号、功能类型、返回状态、返回内容、操作类型", "output": "appname:ths_all tag:ths_all NOT (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.GDZH,ths_all.funccn|eval line=\"请求\"\n |append\n [[\n appname:ths_all tag:ths_all  (ths_all.ANSTYPE:1 OR  ths_all.ANSTYPE:0)|eval time=formatdate(timestamp)| table time,ths_all.ANSTYPE,ths_all.GDZH,ths_all.funccn,ths_all.msg\t|eval line=\"返回\"\n ]]\n|eval bbb=case(ths_all.ANSTYPE==\"1\",\"成功\",ths_all.ANSTYPE==\"0\",\"失败\",default,\"\")\n|sort by +time\t|fields time,ths_all.GDZH,ths_all.funccn,bbb,line,ths_all.msg\n|rename time as \"时间\", ths_all.GDZH as \"股东账号\", ths_all.funccn as \"功能类型\", bbb as \"返回状态\", ths_all.msg as \"返回内容\", line as \"操作类型\""}
{"history": [], "instruction": "网御星云WAF数据查攻击日志", "output": "appname:waf tag:leadsec NOT (waf.Evt_level:非攻击事件 OR waf.kv.Evt_level:10) AND (NOT \"黑名单\" ) AND (waf.Evt_type:* OR waf.kv.Evt_type:*)"}
{"history": [["网御星云WAF数据查攻击日志", "appname:waf tag:leadsec NOT (waf.Evt_level:非攻击事件 OR waf.kv.Evt_level:10) AND (NOT \"黑名单\" ) AND (waf.Evt_type:* OR waf.kv.Evt_type:*)"]], "instruction": "去掉字段名前缀", "output": "appname:waf tag:leadsec NOT (waf.Evt_level:非攻击事件 OR waf.kv.Evt_level:10) AND (NOT \"黑名单\" ) AND (waf.Evt_type:* OR waf.kv.Evt_type:*)\n| rename waf.* as *,kv.* as *"}
{"history": [], "instruction": "Windows_AD登录最频繁IP_top10", "output": "appname:windows (json.event_id:4624 OR json.event_id:4625) NOT (json.src_ip:\"-\" OR json.username:SYSTEM)| top 10 json.src_ip"}
{"history": [], "instruction": "查 rizhiyi 应用日志", "output": "appname:rizhiyi"}
{"history": [["查 rizhiyi 应用日志", "appname:rizhiyi"]], "instruction": "现在取xxx和xxx2应用的", "output": "(appname:rizhiyi OR appname:xxx OR appname:xxx2)"}
{"history": [["华为交换机数据，编写查询语句实现如下分析场景：登录失败方式otop10分布", "appname:switch tag:huawei (switch.brief:LOGINFAILED OR switch.brief: LOGINFAIL OR switch.brief:LOGINFAILED OR switch.brief:LOGIN_FAIL OR switch.brief:SNMP_FAIL OR switch.brief:SSH_FAIL) |top 10 switch.module"], ["登录失败最多的源主机", "appname:switch tag:huawei (switch.brief:LOGINFAILED OR switch.brief: LOGINFAIL OR switch.brief:LOGINFAILED OR switch.brief:LOGIN_FAIL OR switch.brief:SNMP_FAIL OR switch.brief:SSH_FAIL) |top 1 switch.kvmsg.IpAddress"]], "instruction": "这台主机每小时的登录趋势", "output": "appname:switch tag:huawei (switch.brief:LOGINFAILED OR switch.brief: LOGINFAIL OR switch.brief:LOGINFAILED OR switch.brief:LOGIN_FAIL OR switch.brief:SNMP_FAIL OR switch.brief:SSH_FAIL) [[appname:switch tag:huawei (switch.brief:LOGINFAILED OR switch.brief: LOGINFAIL OR switch.brief:LOGINFAILED OR switch.brief:LOGIN_FAIL OR switch.brief:SNMP_FAIL OR switch.brief:SSH_FAIL) |top 1 switch.kvmsg.IpAddress|fields switch.kvmsg.IpAddress]] |bucket timestamp span=1h as ts|stats count() as count_ by ts"}
{"history": [["SEPM防病毒数据，编写查询语句实现如下分析场景：事件级别分类", "* appname:antivirus_gateway AND ( tag:symantec OR tag:symantec_app_c OR tag:symantec_risk )|stats count() by antivirus_gateway.event_level"]], "instruction": "最近24小时事件趋势变化", "output": "starttime=\"-24h\" * appname:antivirus_gateway AND ( tag:symantec OR tag:symantec_app_c OR tag:symantec_risk )| bucket timestamp span=30m as ts | stats count() by ts"}
{"history": [["SEPM防病毒数据，编写查询语句实现如下分析场景：事件级别分类", "* appname:antivirus_gateway AND ( tag:symantec OR tag:symantec_app_c OR tag:symantec_risk )|stats count() by antivirus_gateway.event_level"], ["最近24小时事件趋势变化", "starttime=\"-24h\" * appname:antivirus_gateway AND ( tag:symantec OR tag:symantec_app_c OR tag:symantec_risk )| bucket timestamp span=30m as ts | stats count() by ts"]], "instruction": "换成 10 分钟统计一次", "output": "starttime=\"-24h\" * appname:antivirus_gateway AND ( tag:symantec OR tag:symantec_app_c OR tag:symantec_risk )| bucket timestamp span=10m as ts | stats count() by ts"}
{"history": [], "instruction": "深信服零信任VPN数据，编写查询语句实现如下分析场景：最近一天登录失败趋势", "output": "appname:vpn tag:sangfor_0trust (vpn.event_name:auth OR vpn.event_name:login OR vpn.event_name:logout)  vpn.result:FAILED | bucket timestamp span=30m as ts | stats count() as cnt by ts"}
{"history": [["深信服零信任VPN数据，编写查询语句实现如下分析场景：最近一天登录失败趋势", "appname:vpn tag:sangfor_0trust (vpn.event_name:auth OR vpn.event_name:login OR vpn.event_name:logout)  vpn.result:FAILED | bucket timestamp span=30m as ts | stats count() as cnt by ts"]], "instruction": "最近3天趋势环比", "output": "starttime=\"now/d\" endtime=\"now\" appname:vpn tag:sangfor_0trust  (vpn.event_name:auth OR vpn.event_name:login OR vpn.event_name:logout) vpn.result:FAILED | bucket timestamp span=30m as ts\n|eval ts=formatdate(ts,\"HH:mm\")\n| stats count() as cnt by ts\n|eval line=\"今天\"\n|append [[\n\tstarttime=\"-1d/d\" endtime=\"now/d\" appname:vpn tag:sangfor_0trust  (vpn.event_name:auth OR vpn.event_name:login OR vpn.event_name:logout) vpn.result:FAILED | bucket timestamp span=30m as ts\n\t|eval ts=formatdate(ts,\"HH:mm\")\n\t| stats count() as cnt by ts\n\t|eval line=\"昨天\"\n]]\n|append [[\n\tstarttime=\"-2d/d\" endtime=\"-1d/d\" appname:vpn tag:sangfor_0trust (vpn.event_name:auth OR vpn.event_name:login OR vpn.event_name:logout) vpn.result:FAILED | bucket timestamp span=30m as ts\n\t|eval ts=formatdate(ts,\"HH:mm\")\n\t| stats count() as cnt by ts\n\t|eval line=\"前天\"\n]]"}
{"history": [["深信服零信任VPN数据，编写查询语句实现如下分析场景：最近一天登录失败趋势", "appname:vpn tag:sangfor_0trust (vpn.event_name:auth OR vpn.event_name:login OR vpn.event_name:logout)  vpn.result:FAILED | bucket timestamp span=30m as ts | stats count() as cnt by ts"], ["最近3天趋势环比", "starttime=\"now/d\" endtime=\"now\" appname:vpn tag:sangfor_0trust  (vpn.event_name:auth OR vpn.event_name:login OR vpn.event_name:logout) vpn.result:FAILED | bucket timestamp span=30m as ts\n|eval ts=formatdate(ts,\"HH:mm\")\n| stats count() as cnt by ts\n|eval line=\"今天\"\n|append [[\n\tstarttime=\"-1d/d\" endtime=\"now/d\" appname:vpn tag:sangfor_0trust  (vpn.event_name:auth OR vpn.event_name:login OR vpn.event_name:logout) vpn.result:FAILED | bucket timestamp span=30m as ts\n\t|eval ts=formatdate(ts,\"HH:mm\")\n\t| stats count() as cnt by ts\n\t|eval line=\"昨天\"\n]]\n|append [[\n\tstarttime=\"-2d/d\" endtime=\"-1d/d\" appname:vpn tag:sangfor_0trust (vpn.event_name:auth OR vpn.event_name:login OR vpn.event_name:logout) vpn.result:FAILED | bucket timestamp span=30m as ts\n\t|eval ts=formatdate(ts,\"HH:mm\")\n\t| stats count() as cnt by ts\n\t|eval line=\"前天\"\n]]"]], "instruction": "只看root 用户今天的情况", "output": "starttime=\"now/d\" endtime=\"now\" appname:vpn tag:sangfor_0trust (vpn.event_name:auth OR vpn.event_name:login OR vpn.event_name:logout) vpn.result:FAILED vpn.user_name:root | bucket timestamp span=30m as ts|stats count() as cnt by ts"}
{"history": [["查询 syslog 日志中包含 error 关键字的记录：", "appname:syslog error"], ["还有 fail", "appname:syslog (error OR fail)"], ["再加上 fatal", "appname:syslog (error OR fail OR fatal)"]], "instruction": "算最近一小时内的每个服务器的日志量", "output": "starttime=\"-1h\" appname:syslog (error OR fail OR fatal) | stats count() by hostname"}
{"history": [], "instruction": "SEPM防病毒数据，编写查询语句实现如下分析场景：事件级别分类", "output": "* appname:antivirus_gateway AND ( tag:symantec OR tag:symantec_app_c OR tag:symantec_risk )|stats count() by antivirus_gateway.event_level"}
{"history": [["aix错误事件明细：", "tag:syslog appname:aix AND (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault)"]], "instruction": "画日志量趋势图，30 分钟一个柱子：", "output": "appname:aix AND (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault)  |bucket timestamp span=30m as ts |stats count() by ts"}
{"history": [["mysql日志数据查询：sql各种操作类型占比", "appname:mysql tag:mysql_query AND (\"Query\tselect\" OR \"Query\tinsert\" OR \"Query\tupdate\")| parse field=raw_message \"Query\\s+(?<action>\\S+)\"|eval query=case(action==\"SELECT\",\"select\",action==\"INSERT\",\"insert\",action==\"UPDATE\",\"update\",default,action) |stats count() as count_ by query"]], "instruction": "按 10 分钟一个点统计数量趋势", "output": "appname:mysql tag:mysql_query AND (\"Query\tselect\" OR \"Query\tinsert\" OR \"Query\tupdate\")| parse field=raw_message \"Query\\s+(?<action>\\S+)\"|eval query=case(action==\"SELECT\",\"select\",action==\"INSERT\",\"insert\",action==\"UPDATE\",\"update\",default,action) | bucket timestamp span=10m as ts|stats count() as count_ by query,ts|rename count_ as \"请求数量\""}
{"history": [["windows错误日志明细前 50 条", " appname:windows AND tag:application  (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\") |limit 50|eval time=formatdate(timestamp)|table time,ip,raw_message"]], "instruction": "10 分钟一个点统计事件数趋势", "output": " appname:windows tag:system (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\")|bucket timestamp span=10m as ts |stats count() by ts"}
{"history": [], "instruction": "waf_imperva_高风险事件今天趋势", "output": "starttime=\"now/d\" endtime=\"now\"\nappname:waf AND tag:imperva AND (waf.level:High OR waf.level:\"高\")|bucket timestamp span=15m as ts |stats count() by ts\n|eval ts1=formatdate(ts,\"HHmm\")"}
{"history": [["waf_imperva_高风险事件今天趋势", "starttime=\"now/d\" endtime=\"now\"\nappname:waf AND tag:imperva AND (waf.level:High OR waf.level:\"高\")|bucket timestamp span=15m as ts |stats count() by ts\n|eval ts1=formatdate(ts,\"HHmm\")"]], "instruction": "和昨天对比", "output": "starttime=\"now/d\" endtime=\"now\"\nappname:waf AND tag:imperva AND (waf.level:High OR waf.level:\"高\")|bucket timestamp span=15m as ts |stats count() by ts\n|eval ts1=formatdate(ts,\"HHmm\")\n|eval line=\"今天\"\n|append \n[[starttime=\"-1d/d\" endtime=\"now/d\"\nappname:waf AND tag:imperva AND (waf.level:High OR waf.level:\"高\")|bucket timestamp span=15m as ts |stats count() by ts\n|eval ts1=formatdate(ts,\"HHmm\")\n|eval line=\"昨天\"\n]]"}
{"history": [["vmware虚拟机发生错误次数", "appname:vmware AND tag:* AND ('vmware.level':error OR vmware.level:ERROR )|stats count() as cnt"]], "instruction": "每小时次数趋势", "output": "appname:vmware AND tag:* AND ('vmware.level':error OR 'vmware.level':ERROR)|bucket timestamp span=1h as ts |stats count() by ts"}
{"history": [], "instruction": "今天kafka错误事件数量的趋势", "output": "starttime=\"now/d\" endtime=\"now\" (appname:kafka kafka.event_type:ERROR)|bucket timestamp span=1h as ts | stats count() by ts "}
{"history": [["今天kafka错误事件数量的趋势", "starttime=\"now/d\" endtime=\"now\" (appname:kafka kafka.event_type:ERROR)|bucket timestamp span=1h as ts | stats count() by ts"]], "instruction": "同比昨天", "output": "starttime=\"-1d/d\" endtime=\"now/d\" (appname:kafka kafka.event_type:ERROR)|bucket timestamp span=1h as ts | stats count() by ts |eval line=\"昨天\"]]|append [[starttime=\"now/d\" endtime=\"now\"(appname:kafka kafka.event_type:ERROR)|bucket timestamp span=1h as ts | stats count() by ts |eval line=\"今天\"]]"}
{"history": [["今天kafka错误事件数量的趋势", "starttime=\"now/d\" endtime=\"now\" (appname:kafka kafka.event_type:ERROR)|bucket timestamp span=1h as ts | stats count() by ts"], ["同比昨天", "starttime=\"-1d/d\" endtime=\"now/d\" (appname:kafka kafka.event_type:ERROR)|bucket timestamp span=1h as ts | stats count() by ts |eval line=\"昨天\"]]|append [[starttime=\"now/d\" endtime=\"now\"(appname:kafka kafka.event_type:ERROR)|bucket timestamp span=1h as ts | stats count() by ts |eval line=\"今天\"]]"]], "instruction": "再同比上周", "output": "starttime=\"-7d/d\" endtime=\"-6d/d\" (appname:kafka kafka.event_type:ERROR)|bucket timestamp span=1h as ts | stats count() by ts |eval line=\"上周\"|append[[starttime=\"-1d/d\" endtime=\"now/d\"(appname:kafka kafka.event_type:ERROR)|bucket timestamp span=1h as ts | stats count() by ts |eval line=\"昨天\"]]|append [[starttime=\"now/d\" endtime=\"now\"(appname:kafka kafka.event_type:ERROR)|bucket timestamp span=1h as ts | stats count() by ts |eval line=\"今天\"]]"}
{"history": [["windows系统错误日志", "appname:pf_windows tag:system (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\")"], ["做成明细表格，包括 timestamp 可读格式时间、ip 地址和 windows.EventData.Data[].text 错误事件", "appname:pf_windows tag:system (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\") |eval time=formatdate(timestamp)|table time,ip,windows.EventData.Data[].text|rename time as \"时间\",windows.EventData.Data[].text as \"错误事件\""], ["只保留50 条", "appname:pf_windows tag:system (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\") |eval time=formatdate(timestamp)|table time,ip,windows.EventData.Data[].text|rename time as \"时间\",windows.EventData.Data[].text as \"错误事件\" | limit 50"]], "instruction": "改成 10 分钟趋势图", "output": "appname:pf_windows tag:system (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\") |bucket timestamp span=10m as ts |stats count() as cnt by ts"}
{"history": [], "instruction": "同花顺请求量今天的趋势", "output": "starttime=\"now/d\" endtime=\"now\"\nappname:ths_all NOT  (ths_all.ANSTYPE:0 OR ths_all.ANSTYPE:1)|bucket timestamp span=20m as ts |stats count() by ts\n|eval ts1=formatdate(ts,\"HHmm\")\n|eval line=\"今天\""}
{"history": [["同花顺请求量今天的趋势", "starttime=\"now/d\" endtime=\"now\"\nappname:ths_all NOT  (ths_all.ANSTYPE:0 OR ths_all.ANSTYPE:1)|bucket timestamp span=20m as ts |stats count() by ts\n|eval ts1=formatdate(ts,\"HHmm\")\n|eval line=\"今天\""]], "instruction": "对比昨天", "output": "starttime=\"-1d/d\" endtime=\"now/d\"\nappname:ths_all NOT  (ths_all.ANSTYPE:0 OR ths_all.ANSTYPE:1) |bucket timestamp span=20m as ts |stats count() by ts\n|eval ts1=formatdate(ts,\"HHmm\")\n|eval line=\"昨天\"\n|append \n[[\nstarttime=\"now/d\" endtime=\"now\"\nappname:ths_all NOT  (ths_all.ANSTYPE:0 OR ths_all.ANSTYPE:1)|bucket timestamp span=20m as ts |stats count() by ts\n|eval ts1=formatdate(ts,\"HHmm\")\n|eval line=\"今天\"\n]]"}
{"history": [["同花顺请求量今天的趋势", "starttime=\"now/d\" endtime=\"now\"\nappname:ths_all NOT  (ths_all.ANSTYPE:0 OR ths_all.ANSTYPE:1)|bucket timestamp span=20m as ts |stats count() by ts\n|eval ts1=formatdate(ts,\"HHmm\")\n|eval line=\"今天\""], ["对比昨天", "starttime=\"-1d/d\" endtime=\"now/d\"\nappname:ths_all NOT  (ths_all.ANSTYPE:0 OR ths_all.ANSTYPE:1) |bucket timestamp span=20m as ts |stats count() by ts\n|eval ts1=formatdate(ts,\"HHmm\")\n|eval line=\"昨天\"\n|append \n[[\nstarttime=\"now/d\" endtime=\"now\"\nappname:ths_all NOT  (ths_all.ANSTYPE:0 OR ths_all.ANSTYPE:1)|bucket timestamp span=20m as ts |stats count() by ts\n|eval ts1=formatdate(ts,\"HHmm\")\n|eval line=\"今天\"\n]]"]], "instruction": "再对比前天", "output": "starttime=\"-2d/d\" endtime=\"-1d/d\"\nappname:ths_all NOT  (ths_all.ANSTYPE:0 OR ths_all.ANSTYPE:1) |bucket timestamp span=20m as ts |stats count() by ts\n|eval ts1=formatdate(ts,\"HHmm\")\n|eval line=\"前天\"\n|append \n[[starttime=\"-1d/d\" endtime=\"now/d\"\nappname:ths_all NOT  (ths_all.ANSTYPE:0 OR ths_all.ANSTYPE:1) |bucket timestamp span=20m as ts |stats count() by ts\n|eval ts1=formatdate(ts,\"HHmm\")\n|eval line=\"昨天\"\n]]\n|append \n[[\nstarttime=\"now/d\" endtime=\"now\"\nappname:ths_all NOT  (ths_all.ANSTYPE:0 OR ths_all.ANSTYPE:1)|bucket timestamp span=20m as ts |stats count() by ts\n|eval ts1=formatdate(ts,\"HHmm\")\n|eval line=\"今天\"\n]]"}
{"history": [], "instruction": "oracle数据库的ORA错误码日志量每5分钟统计趋势", "output": "appname:oracle oracle.ORACODE:ORA*  | bucket timestamp span=5m as ts| stats count() by ts,oracle.ORACODE"}
{"history": [["oracle数据库的ORA错误码日志量每5分钟统计趋势", "appname:oracle tag:alert oracle.ORACODE:ORA*  | bucket timestamp span=5m as ts| stats count() by ts,oracle.ORACODE"]], "instruction": "错误码占比饼图", "output": "appname:oracle tag:alert oracle.ORACODE:ORA* | chart rendertype=\"pie\" count() by oracle.ORACODE"}
{"history": [["Linux操作系统审计敏感命令的执行：", "appname:linux tag:audit AND (command:service* OR command:rm* OR command:export* OR command:kill*) "]], "instruction": "统计次数：", "output": "appname:linux tag:audit AND (command:service* OR command:rm* OR command:export* OR command:kill*)  |stats count() as cnt"}
{"history": [["Linux操作系统审计_主机敏感命令执行：", "appname:linux tag:audit AND (command:service* OR command:rm* OR command:export* OR command:kill*)"]], "instruction": "按 IP 和命令统计次数：", "output": "appname:linux tag:audit AND (command:service* OR command:rm* OR command:export* OR command:kill*)  |stats count() as cnt by ip,command |rename ip as \"IP地址\",command as \"敏感命令\",cnt as \"次数\""}
{"history": [], "instruction": "Linux服务器执行敏感命令：", "output": "appname:linux tag:secure (command:drop\\ * OR command:rm\\ -rf\\ * OR command:*rm\\ * OR command:sudo\\ userdel\\ * OR command:userdel\\ *  OR command:chmod\\ 777* OR command:*cat\\ /etc/shadow*) |stats count() as cnt by  sudouser,user,ip,command |mvcombine sep=\";\" command |eval command = split(command,\";\")"}
{"history": [["Linux服务器执行敏感命令：", "appname:linux tag:secure (command:drop\\ * OR command:rm\\ -rf\\ * OR command:*rm\\ * OR command:sudo\\ userdel     OR command:userdel\\ *  OR command:chmod\\ 777* OR command:*cat\\ /etc/shadow*) |stats count() as cnt by  sudouser,user,ip,command |mvcombine sep=\";\" command |eval command = split(command,\";\")"]], "instruction": "日志量统计", "output": "appname:linux tag:secure (command:drop\\ * OR command:rm\\ -rf\\ * OR command:*rm\\ * OR command:sudo\\ userdel\\ * OR command:userdel\\ *  OR command:chmod\\ 777* OR command:*cat\\ /etc/shadow*) |stats count() as cnt by  sudouser,user,ip,command |mvcombine sep=\";\" command |eval command = split(command,\";\")|stats count() as cnt"}
{"history": [["Linux服务器执行敏感命令：", "appname:linux tag:secure (command:drop\\ * OR command:rm\\ -rf\\ * OR command:*rm\\ * OR command:sudo\\ userdel     OR command:userdel\\ *  OR command:chmod\\ 777* OR command:*cat\\ /etc/shadow*) |stats count() as cnt by  sudouser,user,ip,command |mvcombine sep=\";\" command |eval command = split(command,\";\")"], ["日志量统计", "appname:linux tag:secure (command:drop\\ * OR command:rm\\ -rf\\ * OR command:*rm\\ * OR command:sudo\\ userdel\\ * OR command:userdel\\ *  OR command:chmod\\ 777* OR command:*cat\\ /etc/shadow*) |stats count() as cnt by  sudouser,user,ip,command |mvcombine sep=\";\" command |eval command = split(command,\";\")|stats count() as cnt"]], "instruction": "加一行密码修改事件的数量统计", "output": "appname:linux tag:secure (command:drop\\ * OR command:rm\\ -rf\\ * OR command:*rm\\ * OR command:sudo\\ userdel\\ * OR command:userdel\\ *  OR command:chmod\\ 777* OR command:*cat\\ /etc/shadow*) |stats count() as cnt by  sudouser,user,ip,command |mvcombine sep=\";\" command |eval command = split(command,\";\")|stats count() as cnt|eval type=\"Linux服务器执行敏感操作事件\"  |append [[ appname:linux event_name:密码修改事件 \"password changed for\"  |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\") |stats count() as cnt  by time,ip,user |stats count() as cnt |eval type=\"Linux主机账号密码更改或重置事件\"]]"}
{"history": [], "instruction": "堡垒机 10.200.0.79 和 10.200.0.80 以外成功登录的绕行堡垒机登录数量，按秒级时间和来源地址、登录地址、用户名等统计：", "output": "appname:linux tag:secure event_name:登录成功事件 |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\") |stats count() as cnt by time,src_ip,ip,type,user |where src_ip != \"10.200.0.79\" && linux.src_ip != \"10.200.0.80\" |stats count() as cnt |eval type=\"Linux主机绕行堡垒机登录事件\"]]"}
{"history": [["堡垒机 10.200.0.79 和 10.200.0.80 以外成功登录的绕行堡垒机登录数量，按秒级时间和来源地址、登录地址、用户名等统计：", "appname:linux tag:secure event_name:登录成功事件 |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\") |stats count() as cnt by time,src_ip,ip,type,user |where src_ip != \"10.200.0.79\" && linux.src_ip != \"10.200.0.80\" |stats count() as cnt |eval type=\"Linux主机绕行堡垒机登录事件\"]]"]], "instruction": "加上 3 次以上登录失败的数量统计", "output": "appname:linux tag:secure event_name:登录成功事件 |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\") |stats count() as cnt by time,src_ip,ip,type,user |where src_ip != \"10.200.0.79\" && linux.src_ip != \"10.200.0.80\" |stats count() as cnt |eval type=\"Linux主机绕行堡垒机登录事件\"]] |append [[ appname:linux tag:secure event_name:登录失败事件 \"Failed password for\"  |stats count() as cnt by src_ip,ip,user,type  |where cnt > 3 |stats count() as cnt |eval type=\"Linux主机被多次尝试错误口令登录事件\"]]"}
{"history": [["堡垒机 10.200.0.79 和 10.200.0.80 以外成功登录的绕行堡垒机登录数量,按秒级时间和来源地址、登录地址、用户名等统计：", "appname:linux tag:secure event_name:登录成功事件 |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\") |stats count() as cnt by time,src_ip,ip,type,user |where src_ip != \"10.200.0.79\" && linux.src_ip != \"10.200.0.80\" |stats count() as cnt |eval type=\"Linux主机绕行堡垒机登录事件\"]]"], ["加上 3 次以上登录失败的数量统计", "appname:linux tag:secure event_name:登录成功事件 |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\") |stats count() as cnt by time,src_ip,ip,type,user |where src_ip != \"10.200.0.79\" && linux.src_ip != \"10.200.0.80\" |stats count() as cnt |eval type=\"Linux主机绕行堡垒机登录事件\"]] |append [[ appname:linux tag:secure event_name:登录失败事件 \"Failed password for\"  |stats count() as cnt by src_ip,ip,user,type  |where cnt > 3 |stats count() as cnt |eval type=\"Linux主机被多次尝试错误口令登录事件\"]]"]], "instruction": "再加上无效用户登录事件的数量：", "output": "appname:linux tag:secure event_name:登录成功事件 |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\") |stats count() as cnt by time,src_ip,ip,type,user |where src_ip != \"10.200.0.79\" && linux.src_ip != \"10.200.0.80\" |stats count() as cnt |eval type=\"Linux主机绕行堡垒机登录事件\"]] |append [[ appname:linux tag:secure event_name:登录失败事件 \"Failed password for\"  |stats count() as cnt by src_ip,ip,user,type  |where cnt > 3 |stats count() as cnt |eval type=\"Linux主机被多次尝试错误口令登录事件\"]] |append [[ appname:linux tag:secure AND (\"Invalid user\")  |parse \".*user\\s+(?<user>\\S+) from (?<src_ip>\\d+.\\d+.\\d+.\\d+)\" |stats count() as cnt by src_ip,ip,user |stats count() as cnt  |eval type=\"Linux主机被多次使用无效用户登录主机\"]]"}
{"history": [], "instruction": "mysql日志数据查询：sql各种操作类型占比", "output": "appname:mysql tag:mysql_query AND (\"Query\tselect\" OR \"Query\tinsert\" OR \"Query\tupdate\")| parse field=raw_message \"Query\\s+(?<action>\\S+)\"|eval query=case(action==\"SELECT\",\"select\",action==\"INSERT\",\"insert\",action==\"UPDATE\",\"update\",default,action) |stats count() as count_ by query"}
{"history": [], "instruction": "根据以下直播域名计算 CDN 日志中直播业务节点的状态码和访问量：live1.video.com, live2.video.com, live3.video.com", "output": "appname:cdn AND (cdn.http_status:404 OR cdn.http_status:5?? OR cdn.http_status:403 OR cdn.http_status:200 OR cdn.http_status:206 )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) |  stats count() by hostname,cdn.http_status"}
{"history": [["根据以下直播域名计算 CDN 日志中直播业务节点的状态码和访问量：live1.video.com, live2.video.com, live3.video.com", "appname:cdn AND (cdn.http_status:404 OR cdn.http_status:5?? OR cdn.http_status:403 OR cdn.http_status:200 OR cdn.http_status:206 )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) |  stats count() by hostname,cdn.http_status"]], "instruction": "直播业务在全部 CDN 业务里的占比", "output": "appname:cdn AND (cdn.http_status:404 OR cdn.http_status:5?? OR cdn.http_status:403 OR cdn.http_status:200 OR cdn.http_status:206 )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) |  stats count() as _count_1 by hostname,cdn.http_status  | join type = left hostname [[ appname:cdn | stats count() as _count_2 by hostname ]] | eval percent = format(\"%.2f%%\", _count_1 / _count_2 * 100)"}
{"history": [["根据以下直播域名计算 CDN 日志中直播业务节点的状态码和访问量：live1.video.com, live2.video.com, live3.video.com", "appname:cdn AND (cdn.http_status:404 OR cdn.http_status:5?? OR cdn.http_status:403 OR cdn.http_status:200 OR cdn.http_status:206 )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) |  stats count() by hostname,cdn.http_status"], ["直播业务在全部 CDN 业务里的占比", "appname:cdn AND (cdn.http_status:404 OR cdn.http_status:5?? OR cdn.http_status:403 OR cdn.http_status:200 OR cdn.http_status:206 )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) |  stats count() as _count_1 by hostname,cdn.http_status  | join type = left hostname [[ appname:cdn | stats count() as _count_2 by hostname ]] | eval percent = format(\"%.2f%%\", _count_1 / _count_2 * 100)"]], "instruction": "把表头改成中文：节点名称、状态码、直播次数、访问次数、百分比", "output": "appname:cdn AND (cdn.http_status:404 OR cdn.http_status:5?? OR cdn.http_status:403 OR cdn.http_status:200 OR cdn.http_status:206 )  AND (cdn.domain:live1.video.com OR cdn.domain:live2.video.com OR cdn.domain:live3.video.com) |  stats count() as _count_1 by hostname,cdn.http_status  | join type = left hostname [[ appname:cdn | stats count() as _count_2 by hostname ]] | eval percent = format(\"%.2f%%\", _count_1 / _count_2 * 100) | rename appname as \"节点名称\", cdn.http_status as \"状态码\", _count_1 as \"直播次数\", _count_2 as \"访问次数\", percent as \"百分比\""}
{"history": [], "instruction": "vmware虚拟机发生错误次数", "output": "appname:vmware AND tag:* AND ('vmware.level':error OR vmware.level:ERROR )|stats count() as cnt"}
{"history": [], "instruction": "linux今日登录次数", "output": "appname:linux Authentication OR Accepted | stats count() as cnt"}
{"history": [["linux今日登录次数", "appname:linux Authentication OR Accepted | stats count() as cnt"]], "instruction": "失败次数也算", "output": "appname:linux  Authentication OR failure OR Accepted | stats count() as cnt"}
{"history": [], "instruction": "huawei_ac今日连接成功事件次数", "output": "appname:ac tag:huawei ac.result:success| stats count() as cnt"}
{"history": [["huawei_ac今日连接成功事件次数", "appname:ac tag:huawei ac.result:success| stats count() as cnt"]], "instruction": "还有首字母大写的 Success", "output": "appname:ac tag:huawei ac.result:Success OR ac.result:success| stats count() as cnt"}
{"history": [], "instruction": "linux日志里统计audit登录终端分布", "output": "((appname:linux tag:audit) OR (appname:linux linux.log_type:audit)) AND (USER_AUTH OR USER_LOGIN)|stats count() as cnt by linux.event_msg.terminal"}
{"history": [["linux日志里统计audit登录终端分布", "((appname:linux tag:audit) OR (appname:linux linux.log_type:audit)) AND (USER_AUTH OR USER_LOGIN)|stats count() as cnt by linux.event_msg.terminal"]], "instruction": "失败总次数", "output": "((appname:linux tag:audit) OR (appname:linux linux.log_type:audit) ) AND (USER_AUTH OR USER_LOGIN) AND linux.result:failed | stats count() as cnt"}
{"history": [["linux日志里统计audit登录终端分布", "((appname:linux tag:audit) OR (appname:linux linux.log_type:audit)) AND (USER_AUTH OR USER_LOGIN)|stats count() as cnt by linux.event_msg.terminal"], ["失败总次数", "((appname:linux tag:audit) OR (appname:linux linux.log_type:audit) ) AND (USER_AUTH OR USER_LOGIN) AND linux.result:failed | stats count() as cnt"]], "instruction": "来自哪些 IP", "output": "((appname:linux tag:audit) OR (appname:linux linux.log_type:audit) ) AND (USER_AUTH OR USER_LOGIN) AND linux.result:failed | stats count() as cnt by ip"}
{"history": [["网御星云WAF数据查攻击日志", "appname:waf tag:leadsec NOT (waf.Evt_level:非攻击事件 OR waf.kv.Evt_level:10) AND (NOT \"黑名单\" ) AND (waf.Evt_type:* OR waf.kv.Evt_type:*)"], ["去掉字段名前缀", "appname:waf tag:leadsec NOT (waf.Evt_level:非攻击事件 OR waf.kv.Evt_level:10) AND (NOT \"黑名单\" ) AND (waf.Evt_type:* OR waf.kv.Evt_type:*)\n| rename waf.* as *,kv.* as *"]], "instruction": "统计来源地理分布", "output": "appname:waf tag:leadsec NOT (waf.Evt_level:非攻击事件 OR waf.kv.Evt_level:10) AND (NOT \"黑名单\" ) AND (waf.Evt_type:* OR waf.kv.Evt_type:*)\n| rename waf.* as *,kv.* as *  \n| stats count() as cnt by src.geo.country,src.geo.province,src.geo.city"}
{"history": [], "instruction": "Esxi性能监控曙光存储空间。列出json.name名称和各种 bytes 字段", "output": "appname:vsphere tag:dmz_backup json.fstype:VMFS| stats count() by json.name,json.capacity.total.bytes,json.capacity.provisioned.bytes,json.capacity.used.bytes,json.capacity.free.bytes"}
{"history": [["Esxi性能监控曙光存储空间。列出json.name名称和各种 bytes 字段", "appname:vsphere tag:dmz_backup json.fstype:VMFS| stats count() by json.name,json.capacity.total.bytes,json.capacity.provisioned.bytes,json.capacity.used.bytes,json.capacity.free.bytes"]], "instruction": "将结果换算成 TB，只保留小数点后 2 位", "output": "appname:vsphere tag:dmz_backup json.fstype:VMFS| stats count() by json.name,json.capacity.total.bytes,json.capacity.provisioned.bytes,json.capacity.used.bytes,json.capacity.free.bytes|eval total=format(\"%.2f\",json.capacity.total.bytes/1024/1024/1024/1024)|eval provisioned=format(\"%.2f\",json.capacity.provisioned.bytes/1024/1024/1024/1024)|eval used=format(\"%.2f\",json.capacity.used.bytes/1024/1024/1024/1024)|eval free=format(\"%.2f\",json.capacity.free.bytes/1024/1024/1024/1024)"}
{"history": [["Esxi性能监控曙光存储空间。列出json.name名称和各种 bytes 字段", "appname:vsphere tag:dmz_backup json.fstype:VMFS| stats count() by json.name,json.capacity.total.bytes,json.capacity.provisioned.bytes,json.capacity.used.bytes,json.capacity.free.bytes"], ["将结果换算成 TB，只保留小数点后 2 位", "appname:vsphere tag:dmz_backup json.fstype:VMFS| stats count() by json.name,json.capacity.total.bytes,json.apacity.provisioned.bytes,json.capacity.used.bytes,json.capacity.free.bytes|eval total=format(\"%.2f\",json.capacity.total.bytes/1024/1024/1024/1024)|eval provisioned=format(\"%.2f\",json.capacity.provisioned.bytes/1024/1024/1024/1024)|eval used=format(\"%.2f\",json.capacity.used.bytes/1024/1024/1024/1024)|eval free=format(\"%.2f\",json.capacity.free.bytes/1024/1024/1024/1024)"]], "instruction": "设定 total总容量的 75% 为告警数值，对比实际使用是否超出告警值。对比 provisioned 置备空间是否超出总容量。列出各项数值。注意计算过程要转成浮点数运算", "output": "appname:vsphere tag:dmz_backup json.fstype:VMFS| stats count() by json.name,json.capacity.total.bytes,json.capacity.provisioned.bytes,json.capacity.used.bytes,json.capacity.free.bytes|eval total=format(\"%.2f\",json.capacity.total.bytes/1024/1024/1024/1024)|eval provisioned=format(\"%.2f\",json.capacity.provisioned.bytes/1024/1024/1024/1024)|eval used=format(\"%.2f\",json.capacity.used.bytes/1024/1024/1024/1024)|eval free=format(\"%.2f\",json.capacity.free.bytes/1024/1024/1024/1024) | eval total=todouble(total)| eval used=todouble(used)|eval provisioned=todouble(provisioned)|eval alert=format(\"%.3f\",total*0.75)|eval alert=todouble(alert)|eval provisi=format(\"%.3f\",provisioned-total)|eval alert_=format(\"%.3f\",used-alert)|fields json.name,total,provisioned,used,free,alert,provisi,alert_|dedup json.name |sort  by -provisioned| rename json.name as \"LUN名\",total as \"容量(T)\",provisioned as \"置备空间(T)\",\tused as \"实际使用(T)\",free as \"可用空间(T)\",\talert as \"告警数值\",provisi as \"置备超额\",alert_ as \"实际空间超警戒值\""}
{"history": [], "instruction": "防火墙错误日志", "output": "您的提问有些模糊，最好提供具体的防火墙品牌方便更好的生成错误关键字。\n一般地说，防火墙错误日志可以通过 `appname:firewall error` 语句来查询。但不同场景下的错误内容可能不一样，`error`只是字面意义上最接近的一种。"}
{"history": [["防火墙错误日志", "您的提问有些模糊，最好提供具体的防火墙品牌方便更好的生成错误关键字。\n一般地说，防火墙错误日志可以通过 `appname:firewall error` 语句来查询。但不同场景下的错误内容可能不一样，`error`只是字面意义上最接近的一种。"]], "instruction": "防火墙是绿盟的。", "output": "appname:firewall tag:nsfocus (\"user login faild,name or password error\" OR firewall.msg.result:失败)"}
{"history": [["防火墙错误日志", "您的提问有些模糊，最好提供具体的防火墙品牌方便更好的生成错误关键字。\n一般地说，防火墙错误日志可以通过 `appname:firewall error` 语句来查询。但不同场景下的错误内容可能不一样，`error`只是字面意义上最接近的一种。"], ["防火墙是绿盟的。", "appname:firewall tag:nsfocus (\"user login faild,name or password error\" OR firewall.msg.result:失败)"]], "instruction": "我说的错误指的是拒绝访问。不是用户登录失败", "output": "不好意思，让我重新修改一下查询语句，这次我们使用防火墙操作类型来过滤拒绝访问：\nappname:firewall tag:nsfocus firewall.msg.action:deny"}
{"history": [["防火墙错误日志", "您的提问有些模糊，最好提供具体的防火墙品牌方便更好的生成错误关键字。\n一般地说，防火墙错误日志可以通过 `appname:firewall error` 语句来查询。但不同场景下的错误内容可能不一样，`error`只是字面意义上最接近的一种。"], ["防火墙是绿盟的。", "appname:firewall tag:nsfocus (\"user login faild,name or password error\" OR firewall.msg.result:失败)"], ["我说的错误指的是拒绝访问。不是用户登录失败", "不好意思，让我重新修改一下查询语句，这次我们使用防火墙操作类型来过滤拒绝访问：\nappname:firewall tag:nsfocus firewall.msg.action:deny"]], "instruction": "除了 deny 可能还有 dropped 之类的。你直接排除掉 accept 操作就行了", "output": "好的，让我重新调整一下查询语句：\nappname:firewall tag:nsfocus NOT firewall.msg.action:accept"}
