{"input": "", "instruction": "查询包含 ping 或 pong 关键字，且主机名为 hostname3 或 hostname4 的日志记录，并按照时间分布显示折线图", "output": "(ping OR pong) (hostname:hostname3 OR hostname:hostname4) | timechart count()"}
{"input": "", "instruction": "查询包含 ping 或 pong 关键字，且主机名为 hostname3 或 hostname4 的日志记录，并按照主机显示分组折线图", "output": "(ping OR pong) (hostname:hostname3 OR hostname:hostname4) | timechart count() by hostname"}
{"input": "", "instruction": "查询包含 Error 或 Warning 关键字，且错误类型为 OutOfMemoryError 或 StackOverflowError 的日志记录，统计成折线图", "output": "(Error OR Warning) (OutOfMemoryError OR StackOverflowError) | timechart count()"}
{"input": "", "instruction": "查询包含 Query 关键字，且查询语句中包含 UPDATE 或 DELETE 子关键字的日志记录，统计成折线图", "output": "Query (UPDATE OR DELETE) | timechart count()"}
{"input": "", "instruction": "查询包含 login 或 logout 关键字的日志记录，并按照用户和时间分组画折线图", "output": "(login OR logout) | timechart count() by user"}
{"input": "", "instruction": "查询包含 java 或 python 关键字的日志记录，并按照关键字分布显示时间趋势图", "output": "(java OR python) | parse \"*(?<language>java|python)*\" | timechart count() by language"}
{"input": "", "instruction": "统计今日昨日对比", "output": "starttime=\"-1d/d\" endtime=\"+1d/d\" * | timechart span=1h count() as cnt | timewrap 1d"}
{"input": "", "instruction": "查找最近一天内每小时的平均响应时间", "output": " starttime=\"now-1d\" _index:web | timechart span=1h avg(response_time)"}
{"input": "", "instruction": "查找最近一周内每天的登录成功和失败次数", "output": " starttime=\"now-7d\" _index:auth | timechart span=1d count() by action"}
{"input": "", "instruction": "查找最近一天内每小时的平均响应时间，并显示小时数和响应时间", "output": " starttime=\"now-1d\" _index:web| timechart span=1h avg(response_time) | eval hour=parsedate(_time, \"HH\")"}
{"input": "", "instruction": "查找最近一天内每小时的最大、最小和平均响应时间，并显示小时数和响应时间", "output": " starttime=\"now-1d\" _index:web| timechart span=1h max(response_time) as max_t min(response_time) as min_t avg(response_time) as avg_t | eval hour=parsedate(_time, \"HH\")"}
{"input": "", "instruction": "查找原始日志里所有包含 CPU 利用率的日志并显示每个主机的 CPU 利用率随时间的变化趋势图", "output": "\"CPU usage\" | parse  \"CPU usage: (?<cpu>\\d+)%\" | timechart span=1m avg(cpu) by hostname"}
{"input": "", "instruction": "统计 k8s 集群里每小时重启的容器名称和重启的总次数", "output": "\"k8s container restart\" | parse  \"container: (?<container>\\w+), restart count: (?<restart_count>\\d+)\" | eval restart_count=tolong(restart_count) | timechart span=1h sum(restart_count) by container"}
{"input": "服务名：serviceA", "instruction": "查看今天某个服务的请求量随时间的变化趋势", "output": "starttime=\"now/d\" endtime=\"now\" service:serviceA | timechart span=1h count() as request_count"}
{"input": "服务名：serviceA", "instruction": "查看今天某个服务的响应时间随时间的变化趋势", "output": "starttime=\"now/d\" endtime=\"now\" service:serviceA | timechart span=1h avg(response_time) as avg_response_time"}
{"input": "服务名：serviceA", "instruction": "查看今天某个服务的错误率随时间的变化趋势", "output": "starttime=\"now/d\" endtime=\"now\" service:serviceA | timechart span=1h count(eval(status_code>=400)) as error_count count() as total_count | eval error_rate = error_count/total_count*100 "}
{"input": "服务名：serviceA", "instruction": "查看今天某个服务在不同机器上的请求量随时间的变化趋势", "output": "starttime=\"now/d\" endtime=\"now\" service:serviceA | timechart span=1h count() by hostname"}
{"input": "服务名：serviceA", "instruction": "查看今天某个服务在不同机器上的响应时间随时间的变化趋势", "output": "starttime=\"now/d\" endtime=\"now\" service:serviceA | timechart span=1h avg(response_time) by hostname"}
{"input": "服务名：serviceA", "instruction": "查看今天某个服务在不同机器上的错误率随时间的变化趋势", "output": "starttime=\"now/d\" endtime=\"now\" service:serviceA | timechart span=1h count(eval(status_code>=400)) as error_count count() as total_count by hostname | eval error_rate = error_count/total_count*100"}
{"input": "", "instruction": "我想问如何实现一天前的网站访问量趋势图表？", "output": " starttime=\"now-1d\" _index:web| timechart span=1h avg(response_time) | eval hour=parsedate(_time, \"HH\")"}
{"input": "", "instruction": "我想寻找关于某服务（serviceA）在过去一天内的平均响应时间的趋势。", "output": "starttime=\"now/d\" endtime=\"now\" service:serviceA | timechart span=1h avg(response_time) as avg_response_time"}
{"input": "", "instruction": "我想跟踪一位黑客，他在尝试入侵我的服务器，并窃取敏感数据。根据提供的信息，我的推测是以下内容：1. 这位黑客使用了两个不同的域名访问我的网站，分别为`hostname3`和`hostname4`。2. 在对我的服务器进行扫描时，他使用的命令是`ping`或`pong`。", "output": "(ping OR pong) (hostname:hostname3 OR hostname:hostname4) | timechart count() by hostname"}
{"input": "", "instruction": "帮我编写一个查询语句，用来统计用户登录和登出的时间分布情况。", "output": "(login OR logout) | timechart count() by user"}
{"input": "", "instruction": "我想询问日志易中一天前至今的网站访问数据中，每小时平均响应时间、最长和最短响应时间分别为多少。", "output": " starttime=\"now-1d\" _index:web| timechart span=1h max(response_time) as max_t min(response_time) as min_t avg(response_time) as avg_t | eval hour=parsedate(_time, \"HH\")"}
{"input": "", "instruction": "我想要知道在过去一天内，服务A的每台主机上的请求数量有多高。", "output": "starttime=\"now/d\" endtime=\"now\" service:serviceA | timechart span=1h count() by hostname"}
{"input": "", "instruction": "我想问的是 CPU 使用率在一分钟内的平均值和各主机上的使用情况。", "output": "\"CPU usage\" | parse  \"CPU usage: (?<cpu>\\d+)%\" | timechart span=1m avg(cpu) by hostname"}
{"input": "", "instruction": "我想询问一小时内的容器重启数量情况，按容器分组画趋势图", "output": "\"k8s container restart\" | parse  \"container: (?<container>\\w+), restart count: (?<restart_count>\\d+)\" | eval restart_count=tolong(restart_count) | timechart span=1h sum(restart_count) by container"}
{"input": "", "instruction": "我想知道昨天和今天有什么不一样的吗？", "output": "starttime=\"-1d/d\" endtime=\"+1d/d\" * | timechart span=1h count() as cnt | timewrap 1d"}
{"input": "", "instruction": "帮我分析最近一周用户的登录行为吗？是的，我需要知道他们在过去七天内做了哪些操作，并统计它们发生的次数。", "output": " starttime=\"now-7d\" _index:auth | timechart span=1d count() by action"}
{"input": "", "instruction": "我想询问的是最近一天内service:serviceA状态码大于 400 的错误率是什么趋势。", "output": "starttime=\"now-1d\" endtime=\"now\" service:serviceA | timechart span=1h count(eval(status_code>=400)) as error_count count() as total_count by hostname | eval error_rate = error_count/total_count*100"}
{"input": "网卡接收字节数趋势", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:top_info_system_stats |timechart avg(json.net.bytes_recv) as cnt "}
{"input": "内存使用率趋势", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:top_info_system_stats |timechart avg(json.Mem.used_percent) as cnt "}
{"input": "网卡发送字节数趋势", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:top_info_system_stats |timechart avg(json.net.bytes_sent) as cnt "}
{"input": "网卡异常趋势。从top_info_system_stats数据里分别获取json.net.dropin，json.dropout，json.net.errin和json.net.errout指标的趋势，统计值改为中文名称并 append 到一起", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:top_info_system_stats |timechart avg(json.net.dropin) as cnt |rename cnt as \"网卡丢包-入\" |append [[* AND appname:top_info_system_stats |timechart avg(json.net.dropout) as cnt |rename cnt as \"网卡丢包-出\"]]|append [[* AND appname:top_info_system_stats |timechart avg(json.net.errin) as cnt |rename cnt as \"网卡错包-入\"]] | append [[* AND appname:top_info_system_stats |timechart avg(json.net.errout) as cnt |rename cnt as \"网卡错包-出\"]]"}
{"input": "磁盘使用率趋势", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:top_info_disk_stats|timechart max(json.disk.used_percent) as percent by json.disk.path"}
{"input": "磁盘读io趋势", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:top_info_disk_io_stats|timechart max(json.io_stat.rkB_s) as rkB_s by json.name"}
{"input": "磁盘写io趋势", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:top_info_disk_io_stats|timechart max(json.io_stat.wkB_s) as wkB_s by json.name"}
{"input": "磁盘io操作所占的比例", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:top_info_disk_io_stats|timechart max(json.io_stat.util) as util by json.name"}
{"input": "用户登录趋势", "instruction": "日志易运营视图数据，编写查询语句实现如下分析场景", "output": "(* AND appname:yottaweb_audit_log) AND json.action:login|timechart count() as count_ by json.result "}
{"input": "cpu使用率趋势", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:top_info_system_stats | eval per=(100-json.cpu.idle_percent)/100|timechart avg(per) as cnt "}
{"input": "", "instruction": "如何计算应用 top_info_system_stats 在一天内的平均网络发送量。", "output": "* AND appname:top_info_system_stats |timechart avg(json.net.bytes_sent) as cnt "}
{"input": "", "instruction": "我想问的是，有多少人登录成功和失败了吗？你能不能把结果画成柱状图或者折线图呀？", "output": "(* AND appname:yottaweb_audit_log) AND json.action:login|timechart count() as count_ by json.result "}
{"input": "", "instruction": "我想询问有关内存使用指标的趋势情况。", "output": "* AND appname:top_info_system_stats |timechart avg(json.Mem.used_percent) as cnt "}
{"input": "", "instruction": "我想询问关于某应用的磁盘I/O统计信息的时间序列图表中，每秒读取的 kilobytes（ kB）数量的最大值以及按名称分组的结果。", "output": "* AND appname:top_info_disk_io_stats|timechart max(json.io_stat.rkB_s) as rkB_s by json.name"}
{"input": "", "instruction": "我想要知道系统中每个应用的磁盘IO吞吐量分布情况，并按分钟粒度进行统计。请帮我编写相应的查询语句。", "output": "* AND appname:top_info_disk_io_stats|timechart max(json.io_stat.wkB_s) as wkB_s by json.name"}
{"input": "", "instruction": "我想问的是 CPU 使用率和内存使用情况。", "output": "* AND appname:top_info_disk_io_stats|timechart max(json.io_stat.util) as util by json.name"}
{"input": "", "instruction": "我想询问系统 CPU 使用率的平均值和最大值，并且将结果存储在名为 `cnt` 的字段中。", "output": "* AND appname:top_info_system_stats | eval per=(100-json.cpu.idle_percent)/100|timechart avg(per) as cnt "}
{"input": "", "instruction": "我想问的是，在过去的60分钟、昨天同期和上周同期，这个系统的平均网络收发流量分别是多少？", "output": "starttime=\"-1h\" endtime=\"now\" appname:top_info_system_stats |timechart avg(json.net.bytes_recv) as cnt |rename cnt as \"网络接收字节数\" |eval line=\"最近1小时\"|eval time=formatdate(_time,\"HH:mm\") |append [[starttime=\"-1h-1d\" endtime=\"now-1d\" appname:top_info_system_stats |timechart avg(json.net.bytes_recv) as cnt |rename cnt as \"网络接收字节数\"  |eval line=\"昨天同期\"|eval time=formatdate(_time,\"HH:mm\") ]] |append [[starttime=\"-1h-7d\" endtime=\"now-7d\" appname:top_info_system_stats|timechart avg(json.net.bytes_recv) as cnt |rename cnt as \"网络接收字节数\"  |eval line=\"一周前同期\"|eval time=formatdate(_time,\"HH:mm\") ]]"}
{"input": "", "instruction": "我想问的是，CPU 使用率在过去一小时的、昨天和一周之前有什么不同吗？请告诉我这三天的 CPU 使用情况以及相应的时间点。", "output": "starttime=\"-1h\" endtime=\"now\" appname:top_info_system_stats | eval per=(100-json.cpu.idle_percent)/100|timechart avg(per) as cnt |rename cnt as \"cpu使用率\" |eval line=\"最近1小时\"|eval time=formatdate(_time,\"HH:mm\") |append [[starttime=\"-1h-1d\" endtime=\"now-1d\" appname:top_info_system_stats | eval per=(100-json.cpu.idle_percent)/100|timechart avg(per) as cnt |rename cnt as \"cpu使用率\" |eval line=\"昨天同期\"|eval time=formatdate(_time,\"HH:mm\") ]] |append [[starttime=\"-1h-7d\" endtime=\"now-7d\" appname:top_info_system_stats | eval per=(100-json.cpu.idle_percent)/100|timechart avg(per) as cnt |rename cnt as \"cpu使用率\" |eval line=\"一周前同期\"|eval time=formatdate(_time,\"HH:mm\") ]]"}
{"input": "", "instruction": "我想问的是，在过去的一个小时、七天和一周前同期的时间范围内，这个系统的平均网络数据包大小分别是多少？", "output": "starttime=\"-1h\" endtime=\"now\" appname:top_info_system_stats |timechart avg(json.net.bytes_sent) as cnt |rename cnt as \"网络发送节数\" |eval line=\"最近1小时\"|eval time=formatdate(_time,\"HH:mm\") |append [[starttime=\"-1h-1d\" endtime=\"now-1d\" appname:top_info_system_stats |timechart avg(json.net.bytes_sent) as cnt |rename cnt as \"网络发送节数\" |eval line=\"昨天同期\"|eval time=formatdate(_time,\"HH:mm\") ]] |append [[starttime=\"-1h-7d\" endtime=\"now-7d\" appname:top_info_system_stats|timechart avg(json.net.bytes_sent) as cnt |rename cnt as \"网络发送节数\"  |eval line=\"一周前同期\"|eval time=formatdate(_time,\"HH:mm\") ]]"}
{"input": "db2数据库日志事件量趋势。", "instruction": "DB2数据库日志数据，编写查询语句实现如下分析场景", "output": "appname:db2|timechart count() as cnt by hostname "}
{"input": "DB2数据库不同级别事件趋势。", "instruction": "DB2数据库日志数据，编写查询语句实现如下分析场景", "output": "appname:db2 |timechart count() by db2.level"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "每小时bandwidth 使用量", "output": "appname:apache | timechart span=1h sum(apache.resp_len)"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "从昨天开始,每小时页面访问次数", "output": "starttime=\"now-1d/d\" appname:apache | timechart span=1h count()"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "网站访问来源流量", "output": "appname:apache | timechart span=1d sum(apache.resp_len) by apache.referer"}
{"input": "", "instruction": "收到的TCP连接请求次数", "output": "_index:tcp appname:conn |timechart span=1h count() by action"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "每5分钟一次网站访问量", "output": "appname:apache | timechart span=5m count() by apache.domain"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "每小时HTTP状态码统计", "output": "appname:apache | timechart span=1h count() by apache.status "}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "按日期统计PV", "output": "appname:apache | timechart span=1h count() as PV"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "每小时访问次数前10的页面", "output": "appname:apache | timechart span=1h count(apache.request_path) as cnt by apache.request_path| sort by -cnt | head 10 "}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "每个站点每小时的带宽消耗", "output": "appname:apache | timechart span=1h  sum(apache.resp_len) as bandwidth by apache.domain| sort by -bandwidth"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "每天访问次数超过1000的IP列表", "output": "appname:apache | timechart  span=1d count(apache.clientip) as counts by apache.clientip| search counts>1000 | sort by -counts "}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "按小时统计不同状态码", "output": "appname:apache | timechart span=1h count(status) as cnt by status"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "每个站点历史平均响应时间", "output": "appname:apache | timechart span=1h  avg(apache.resp_time) by apache.domain"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "每天bandwith top 3 IP", "output": "appname:apache | timechart span=1d sum(apache.resp_len) as sum_bytes by apache.clientip | sort by -sum_bytes | head 3"}
{"input": "微投服务平均耗时。", "instruction": "微投日志数据，编写查询语句实现如下分析场景", "output": "(* AND appname:glory)  |timechart avg('glory.exectime')"}
{"input": "微投服务调用趋势图。", "instruction": "微投日志数据，编写查询语句实现如下分析场景", "output": "(* AND appname:glory) web请求开始 |timechart count()"}
{"input": "流量趋势byte。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_permin utc |timechart avg(lingcloud.data.totalBytes) as cnt|eval line=\"总流量\" |append [[appname:lingcloud AND tag:kpi_permin utc |timechart avg(lingcloud.data.totalClientBytes) as cnt|eval line=\"上行流量\"]] |append [[appname:lingcloud AND tag:kpi_permin utc |timechart avg(lingcloud.data.totalServerBytes) as cnt|eval line=\"下行流量\"]]"}
{"input": "带宽趋势bps。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_permin utc |timechart avg(lingcloud.data.totalClientRate) as cnt|eval line=\"上行带宽\" |append [[appname:lingcloud AND tag:kpi_permin utc |timechart avg(lingcloud.data.totalServerRate) as cnt|eval line=\"下行带宽\"]]"}
{"input": "网络延时趋势us。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_permin utc |timechart avg(lingcloud.data.RTT) as cnt|eval line=\"总网络延时\" |append [[appname:lingcloud AND tag:kpi_permin utc |timechart avg(lingcloud.data.clientConnTime) as cnt|eval line=\"上行网络延时\"]] |append [[appname:lingcloud AND tag:kpi_permin utc |timechart avg(lingcloud.data.serverConnTime) as cnt|eval line=\"下行网络延时\"]]"}
{"input": "应用响应时间趋势us。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_permin utc |timechart avg(lingcloud.data.transRespTime) as cnt"}
{"input": "应用kpi趋势。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_list_all | timechart avg(lingcloud.${kpi_list_all_zn_name}) as cnt"}
{"input": "流量趋势。索引可用字段有：nta.Service_Name, nta.alert.action, nta.alert.category, nta.alert.metadata.former_category, nta.alert.severity, nta.alert.signature, nta.attack_name, nta.attack_type, nta.dest_ip, nta.dest_port, nta.dst.geo.city, nta.dst_ip, nta.dst_ip_city, nta.dst_port, nta.event_level, nta.event_name, nta.event_type, nta.flow.bytes_toclient, nta.flow.bytes_toserver, nta.kill_chain, nta.level, nta.login_user, nta.proto, nta.src.geo.city, nta.src.geo.country, nta.src.geo.province, nta.src_ip, nta.src_ip_city, nta.src_port, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "流量数据，编写查询语句实现如下分析场景", "output": "appname:nta AND tag:eve  nta.src_ip:${src_ip} nta.dst_ip:${dst_ip} nta.dst_port:${dst_port} nta.proto:${proto}|eval total_=nta.flow.bytes_toserver+nta.flow.bytes_toclient|timechart avg(total_) as cnt|eval line=\"总流量\"|append [[appname:nta AND tag:eve  nta.src_ip:${src_ip} nta.dst_ip:${dst_ip}|timechart avg(nta.flow.bytes_toserver) as cnt|eval line=\"toserver流量\"]]|append [[appname:nta AND tag:eve  nta.src_ip:${src_ip} nta.dst_ip:${dst_ip}|timechart avg(nta.flow.bytes_toclient) as cnt|eval line=\"toclient流量\"]]"}
{"input": "h_数量基线_1天内账户登陆次数趋势。", "instruction": "hw_企业bg数据，编写查询语句实现如下分析场景", "output": "starttime=\"-1d\" appname:h_1 | timechart count() as cnt by h_1.user_name"}
{"input": "日志量趋势。", "instruction": "Aruba数据，编写查询语句实现如下分析场景", "output": "appname:access_point AND tag:aruba  |timechart count() as cnt by access_point.severity"}
{"input": "Xenserver_不同日志级别的变化趋势。索引可用字段有：tdp.net.dest_ip, tdp.net.dest_port, tdp.net.http.method, tdp.net.http.url, tdp.net.proto, tdp.net.src_ip, tdp.threat.name, tdp.threat.severity, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "CitrixXenserver日志数据，编写查询语句实现如下分析场景", "output": "(* AND tag:xenserver) AND 'appname':citrix | timechart count() by xenserver.severity\t\n"}
{"input": "Xenserver_日志变化趋势。索引可用字段有：tdp.net.dest_ip, tdp.net.dest_port, tdp.net.http.method, tdp.net.http.url, tdp.net.proto, tdp.net.src_ip, tdp.threat.name, tdp.threat.severity, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "CitrixXenserver日志数据，编写查询语句实现如下分析场景", "output": "(* AND tag:xenserver) AND 'appname':citrix | timechart count() "}
{"input": "Xenserver_错误日志的变化趋势。", "instruction": "CitrixXenserver日志数据，编写查询语句实现如下分析场景", "output": "((* AND tag:xenserver) AND appname:citrix) AND 'xenserver.severity':error | timechart count() "}
{"input": "不同协议日志变化趋势。", "instruction": "CitrixNetscaler日志数据，编写查询语句实现如下分析场景", "output": "(* AND appname:citrix) AND 'tag':netscaler | timechart count() by netscaler.protocal\t\n"}
{"input": "日志变化趋势。", "instruction": "CitrixNetscaler日志数据，编写查询语句实现如下分析场景", "output": "(* AND appname:citrix) AND 'tag':netscaler | timechart count() "}
{"input": "不同动作日志变化趋势。", "instruction": "CitrixNetscaler日志数据，编写查询语句实现如下分析场景", "output": "(* AND appname:citrix) AND 'tag':netscaler | timechart count() by netscaler.action\t\n\n"}
{"input": "平均字节数最高的 1 个分支机构，统计其上下行带宽的bps趋势。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_permin_site utc AND [[appname:lingcloud AND tag:kpi_permin_site utc |stats avg(lingcloud.data.totalBytes) as cnt by lingcloud.siteid|eval line=\"平均速率\"|sort by cnt|limit 1|fields lingcloud.siteid]] |timechart avg(lingcloud.data.totalClientRate) as cnt|eval line=\"上行带宽\" |append [[appname:lingcloud AND tag:kpi_permin_site utc AND [[appname:lingcloud AND tag:kpi_permin_site utc |stats avg(lingcloud.data.totalBytes) as cnt by lingcloud.siteid|eval line=\"平均速率\"|sort by cnt|limit 1|fields lingcloud.siteid]] |timechart avg(lingcloud.data.totalServerRate) as cnt|eval line=\"下行带宽\"]]"}
{"input": " 平均字节数最高的 1 个分支机构，统计其响应时间的趋势。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_permin_site utc AND [[appname:lingcloud AND tag:kpi_permin_site utc |stats avg(lingcloud.data.totalBytes) as cnt by lingcloud.siteid|eval line=\"平均速率\"|sort by cnt|limit 1|fields lingcloud.siteid]]|timechart avg(lingcloud.data.transRespTime) as cnt"}
{"input": "平均速率排名前 100 个分支机构的连接建立数及成功率。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_permin_site utc AND [[appname:lingcloud AND tag:kpi_permin_site utc |stats avg(lingcloud.data.totalBytes) as cnt by lingcloud.siteid|eval line=\"平均速率\"|sort by cnt|limit 100|fields lingcloud.siteid]]|timechart avg(lingcloud.data.successfulTcpConnNum) as cnt"}
{"input": "前 20  家分支机构应用速率。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_list_all AND [[appname:lingcloud AND tag:kpi_permin_site utc |stats avg(lingcloud.data.totalBytes) as cnt by lingcloud.siteid|sort by cnt|limit 20|fields lingcloud.siteid]] | timechart avg(lingcloud.totalbytes) as cnt"}
{"input": "", "instruction": "统计每天所有appname的日志量", "output": "* | timechart span=1d count() by appname"}
{"input": "_index:esb appname:esb esb.channel_id:* | timechart span=1s count()  as cnt | stats max(cnt) as cnt | map \"_index:esb appname:esb esb.channel_id:* | timechart span=1s count() as cnt | where cnt==$cnt$\" | eval time=formattime(_time)。", "instruction": "计算一天中最大交易量TPS 同时附带时间戳，使用以下 SPL 语句有什么优缺点？", "output": "使用 map 指令运行较慢"}
{"input": "_index:esb appname:esb esb.channel_id:* | timechart span=1s count()  as cnt | join cnt [[ _index:esb appname:esb esb.channel_id:* | timechart span=1s count() as cnt | stats max(cnt) as cnt | eval cnt=tolong(cnt) ]]  | eval time=formattime(_time)。", "instruction": "计算一天中最大交易量TPS 同时附带时间戳，使用以下 SPL 语句有什么优缺点？", "output": "使用 join 指令，要等待子查询执行，比较慢"}
{"input": "_index:esb appname:esb esb.channel_id:* | timechart span=1s count()  as cnt | eval x=cnt*100000000000000+_time | stats max(x) as x | eval x=tostring(tolong(x)) | parse field=x \"(?<x1>[0-9]*(?<x2>[0-9]{13})\" | eval cnt=tolong(x1), time=formatdate(tolong(x2))。", "instruction": "计算一天中最大交易量TPS 同时附带时间戳，使用以下 SPL 语句有什么优缺点？", "output": "这个语句利用了时间字段都是13位数字，将交易量拼接在时间字段左边，且拼接后生成的x字段的大小顺序和交易量大小顺序完全一致，这样再使用stats(max)得到最大的x字段同时具有交易量和时间信息，最后用parse拆分还原出交易量和时间即可，速度最快。但只有当两个字段都必须是数字才能做拼接。"}
{"input": "连接建立数及成功率-个。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_permin utc |timechart avg(lingcloud.data.successfulTcpConnNum) as cnt"}
{"input": "", "instruction": "我想问的是，有多少个访问点的性能低于预期，并且属于“Aruba”标签下的应用？", "output": "appname:access_point AND tag:aruba  |timechart count() as cnt by access_point.severity"}
{"input": "", "instruction": "我想问的是，在哪些站点的流量最高？可以给出前十名吗？并按流量大小从大到小排列", "output": "appname:lingcloud AND tag:kpi_list_all AND [[appname:lingcloud AND tag:kpi_permin_site utc |stats avg(lingcloud.data.totalBytes) as cnt by lingcloud.siteid|sort by cnt|limit 20|fields lingcloud.siteid]] | timechart avg(lingcloud.totalbytes) as cnt"}
{"input": "", "instruction": "我想要知道在 appname=db2 下，每分钟的主机数量分布情况。", "output": "appname:db2|timechart count() as cnt by hostname "}
{"input": "", "instruction": "我想在数据库 db2 的日志中按级别汇总计数，并返回结果。", "output": "appname:db2 |timechart count() by db2.level"}
{"input": "", "instruction": "“LingCloud”应用的性能数据，其中包含了两个度量指标：平均往返时间（RTT）和客户端连接时间以及服务器连接时间。", "output": "appname:lingcloud AND tag:kpi_permin utc |timechart avg(lingcloud.data.RTT) as cnt|eval line=\"总网络延时\" |append [[appname:lingcloud AND tag:kpi_permin utc |timechart avg(lingcloud.data.clientConnTime) as cnt|eval line=\"上行网络延时\"]] |append [[appname:lingcloud AND tag:kpi_permin utc |timechart avg(lingcloud.data.serverConnTime) as cnt|eval line=\"下行网络延时\"]]"}
{"input": "", "instruction": "我想问关于 LingCloud 的应用性能数据，其中包含了每分钟的事务响应时间的平均值？", "output": "appname:lingcloud AND tag:kpi_permin utc |timechart avg(lingcloud.data.transRespTime) as cnt"}
{"input": "", "instruction": "我想要知道在过去一小时内有多少错误的 XenServer 事件，并且它们是否与 Citrix 有关。", "output": "((* AND tag:xenserver) AND appname:citrix) AND 'xenserver.severity':error | timechart count() "}
{"input": "", "instruction": "我在询问的是最近一分钟的云监控数据中，某站点（lingcloud.siteid）的平均下载和上传速度以及该站点的最大下载和上传速度。", "output": "appname:lingcloud AND tag:kpi_permin_site utc AND [[appname:lingcloud AND tag:kpi_permin_site utc |stats avg(lingcloud.data.totalBytes) as cnt by lingcloud.siteid|eval line=\"平均速率\"|sort by cnt|limit 1|fields lingcloud.siteid]] |timechart avg(lingcloud.data.totalClientRate) as cnt|eval line=\"上行带宽\" |append [[appname:lingcloud AND tag:kpi_permin_site utc AND [[appname:lingcloud AND tag:kpi_permin_site utc |stats avg(lingcloud.data.totalBytes) as cnt by lingcloud.siteid|eval line=\"平均速率\"|sort by cnt|limit 1|fields lingcloud.siteid]] |timechart avg(lingcloud.data.totalServerRate) as cnt|eval line=\"下行带宽\"]]"}
{"input": "", "instruction": "我想问有关 LingCloud 的某些指标的信息，具体来说就是生成一张图表显示最近一小时内 LingCloud 服务的平均下载速度排名前十的站点信息。", "output": "appname:lingcloud AND tag:kpi_permin_site utc AND [[appname:lingcloud AND tag:kpi_permin_site utc |stats avg(lingcloud.data.totalBytes) as cnt by lingcloud.siteid|eval line=\"平均速率\"|sort by cnt|limit 100|fields lingcloud.siteid]]|timechart avg(lingcloud.data.successfulTcpConnNum) as cnt"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是最近一小时内访问过登录页面的 Apache 服务的平均响应时间是多少？请帮我修改一下查询语句。", "output": " starttime=\"now-1h\" appname:apache apache.request_path:\"/login\" | timechart avg(apache.resp_time) | timewrap 30m"}
{"input": "", "instruction": "我想问的是，昨天有多少用户使用了应用名为“h_1”的应用并进行了一次或多次访问？", "output": "starttime=\"-1d/d\" endtime=\"now/d\" appname:h_1 | timechart count() as cnt by h_1.user_name"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，每天有哪些页面链接访问了 Apache 服务，它的 resp_len 总和和 referer 是啥样子的统计数据。", "output": "appname:apache | timechart span=1d sum(apache.resp_len) by apache.referer"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道apache 用户访问量每小时有多少。", "output": "appname:apache | timechart span=1h count() as PV"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问如何使用日志易查询 Apache 访问日志中每天请求次数超过 1000 个的 IP 地址和相应的总数。1.打开日志易Web 界面并登录。2.在搜索框输入 `Apache` 以获取相关的预设搜索。3.点击右上角的加号以添加新搜索条件，选择 Time Range（时间范围）然后将其设置为最近一天或更长的时间段。4.在搜索框中输入 `count(apache.clientip)` 以获取每个客户端 IP 地址的请求数量。5.在搜索框中输入 `by apache.clientip` 以按客户端 IP 进行分组。6.在搜索框中输入 `search counts > 1000` 以筛选出每日请求次数大于 1000 的记录。7.在搜索框中输入 `sort by -counts` 以根据减少的请求数量对结果排序。", "output": "appname:apache | timechart  span=1d count(apache.clientip) as counts by apache.clientip| search counts>1000 | sort by -counts "}
{"input": "", "instruction": "帮我编写查询每个 AppName 在过去每天的数量统计。", "output": "* | timechart span=1d count() by appname"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，在每一小时内，Apache 服务的响应长度分别是多少？", "output": "appname:apache | timechart span=1h sum(apache.resp_len)"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问 Apache 服务在过去一天内每小时出现的次数。", "output": "starttime=\"now-1d/d\" appname:apache | timechart span=1h count()"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道在五分钟内有多少个请求访问过各个域名。", "output": "appname:apache | timechart span=5m count() by apache.domain"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我在询问关于 Apache 服务的状态和访问量的小时级信息。", "output": "appname:apache | timechart span=1h count() by apache.status "}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问以下信息：- 查询时间范围为每一个小时- 对 `apache` 服务的访问响应长度进行求和并将结果保存到变量 `bandwidth` 中- 根据 `apache.domain` 分组后对 `bandwidth` 字段的值进行排序，以降序排列", "output": "appname:apache | timechart span=1h  sum(apache.resp_len) as bandwidth by apache.domain| sort by -bandwidth"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道每个小时Apache的状态码分布情况。", "output": "appname:apache | timechart span=1h count(status) as cnt by status"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想知道网站的访问流量和用户分布情况。按天统计后取头三天", "output": "appname:apache | timechart span=1d sum(apache.resp_len) as sum_bytes by apache.clientip | sort by -sum_bytes | head 3"}
{"input": "今日上网时长趋势_小时", "instruction": "深信服上网行为审计数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" endtime=\"now\" tag:onlinetime|eval time=tolong(access_control.seconds)/3600|timechart span=1h  sum(time) as onlinetime"}
{"input": "CPU使用趋势AIX，按 1 分钟统计和绘制曲线图", "instruction": "查询农信银支付前置(mfe)系统数据，进行如下统计", "output": "type:CPU_ALL tag:mps | eval Sys_PCT=todouble(Sys_PCT) | eval User_PCT=todouble(User_PCT) | timechart span=1m avg(Sys_PCT) as Sys_PCT,avg(User_PCT) as User_PCT"}
{"input": "CPU使用趋势AIX，按 1 分钟统计趋势曲线图", "instruction": "查询银联前置(cupp)系统数据，进行如下统计", "output": "type:CPU_ALL tag:mps | eval Sys_PCT=todouble(Sys_PCT) | eval User_PCT=todouble(User_PCT) | timechart span=1m avg(Sys_PCT) as Sys_PCT,avg(User_PCT) as User_PCT"}
{"input": "mps交易量按小时进行趋势", "instruction": "查询农信银支付清算系统(mps)数据，进行如下统计", "output": "sourcetype:mps|timechart span=1h dc(seqNo)"}
{"input": "CPU使用趋势AIX，按小时进行趋势统计", "instruction": "查询农信银支付清算系统(mps)数据，进行如下统计", "output": "type:CPU_ALL tag:mps | eval Sys_PCT=todouble(Sys_PCT) | eval User_PCT=todouble(User_PCT) | timechart span=1h avg(Sys_PCT) as Sys_PCT,avg(User_PCT) as User_PCT"}
{"input": "按每30分钟分桶统计VPN登录趋势图", "instruction": "防火墙_hillstone数据，编写查询语句实现如下分析场景", "output": "(* VPN 登录) AND tag:hillstone |timechart span=30m  count()"}
{"input": "每6小时统计一次关键字_合同_邮件趋势", "instruction": "深信服上网行为审计数据，编写查询语句实现如下分析场景", "output": "tag:mail \"合同\"|timechart span=6h count()"}
{"input": "每6小时统计一次关键字_工资_邮件趋势", "instruction": "深信服上网行为审计数据，编写查询语句实现如下分析场景", "output": "tag:mail AND (\"薪资\" OR \"薪酬\" OR \"薪水\" OR \"工资\")|timechart span=6h count()"}
{"input": "每6小时统计一次关键字_机密_邮件趋势", "instruction": "深信服上网行为审计数据，编写查询语句实现如下分析场景", "output": "tag:mail AND (\"保密\" OR \"机密\" OR \"敏感\" OR \"秘密\")|timechart span=6h count()"}
{"input": "", "instruction": "通过以下步骤实现对邮箱数据进行分析：1. 根据“标签”和“主题”字段筛选出含有“保密”或“秘密”或“敏感”或“机密”三个词的电子邮件；2. 对筛选出的结果按时间段分组，并计算每个时间段内的电子邮件数量", "output": "tag:mail AND (\"保密\" OR \"秘密\" OR \"敏感\" OR \"机密\")|timechart span=12h count()"}
{"input": "按每小时分桶统计登录失败趋势", "instruction": "Windows_AD数据，编写查询语句实现如下分析场景", "output": "appname:windows   json.event_id:4625 NOT (json.username:*$ OR json.username:SYSTEM) | timechart span=1h count()"}
{"input": "按每30分钟分桶统计windows用户登录失败趋势", "instruction": "windows日志数据，编写查询语句实现如下分析场景", "output": " (appname:windows json.event_name:登录失败*)  |timechart span=30m  count()"}
{"input": "每10分钟统计上报用户数趋势。", "instruction": "机顶盒自助服务系统数据，编写查询语句实现如下分析场景", "output": "appname:stb tag:userreport|timechart as span=10m  dc(stb.user_account) as count_"}
{"input": "每10分钟统计ping耗时趋势。", "instruction": "机顶盒自助服务系统数据，编写查询语句实现如下分析场景", "output": "appname:stb tag:userreport|timechart span=10m  max(stb.maxtime) as max_"}
{"input": "按每小时分桶统计收发邮件大小平均趋势图。", "instruction": "exchange前端日志数据，编写查询语句实现如下分析场景", "output": "appname:exchange tag:front | timechart span=1h  avg(exchange.length) as length"}
{"input": "每10分钟统计Redis每秒处理命令次数趋势。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "appname:redis | timechart span=10m  avg(redis.instantaneous_ops_per_sec) as '每秒处理操作次数'"}
{"input": "每10分钟统计Redis的KeyMiss次数趋势图。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "appname:redis| timechart span=10m  avg(redis.keyspace_misses) as 'KeyMiss次数'"}
{"input": "每10分钟统计流量趋势图。", "instruction": "Thinkbus_Nginx用户访问数据，编写查询语句实现如下分析场景", "output": "appname:nginx|timechart span=10m  sum(middleware.length) as bytes"}
{"input": "每10分钟统计请求队列中等待平均耗时趋势。", "instruction": "haproxy日志数据，编写查询语句实现如下分析场景", "output": "appname:haproxy middleware.tw:* | timechart span=10m  avg(middleware.tw) as avg_"}
{"input": "每10分钟统计后端服务器建联平均耗时趋势。", "instruction": "haproxy日志数据，编写查询语句实现如下分析场景", "output": "appname:haproxy middleware.tc:* | timechart span=10m  avg(middleware.tc) as avg_"}
{"input": "每10分钟统计请求总平均耗时趋势。", "instruction": "haproxy日志数据，编写查询语句实现如下分析场景", "output": "appname:haproxy middleware.tt:* | timechart span=10m  avg(middleware.tt) as avg_"}
{"input": "按每分钟分桶统计Redis实际内存使用与物理内存占用。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "appname:redis  | timechart span=1m  avg(redis.used_memory_rss) as 'Redis物理内存占用', avg(redis.used_memory) as 'Redis实际使用内存'"}
{"input": "按每分钟分桶统计Redis的CPU占用率趋势图。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "appname:redis | timechart span=1m  avg(redis.used_cpu_sys) as CPU_SYS, avg(redis.used_cpu_user) as CPU_USER"}
{"input": "按每分钟分桶统计Redis客户端连接数和阻塞连接数。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "appname:redis  | timechart span=1m  avg(redis.connected_clients) as '客户端连接数', avg(redis.blocked_clients) as '阻塞客户端调用数'"}
{"input": "按每分钟分桶统计Redis实时Output速率MB每秒。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "appname:redis  | eval kbps=edis.instantaneous_input_kbps/1024| timechart span=1m avg(kbps) as '实时Output速率MB每秒'"}
{"input": "按每分钟分桶统计Redis实时Input速率MB每秒。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "appname:redis| eval kbps = redis.instantaneous_input_kbps/1024 | timechart span=1m avg(kbps) as '实时Input速率MB每秒'"}
{"input": "按每分钟分桶统计Redis被拒绝连接数趋势。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "appname:redis  | timechart span=1m  avg(redis.rejected_connections) as '被拒绝连接数趋势'"}
{"input": "按每分钟分桶统计今日访问耗时趋势。", "instruction": "middleware_microsoft_iis_数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:middleware tag:iis| timechart span=1m avg(middleware.time_cost) as avgcost"}
{"input": "按每分钟分桶统计活跃连接数。", "instruction": "zookeeper日志数据，编写查询语句实现如下分析场景", "output": "appname:zookeeper tag:zookeeper_health|timechart span=1m  max(middleware.zkmsg.zk_num_alive_connections)"}
{"input": "按每分钟分桶统计排队请求数量趋势。", "instruction": "zookeeper日志数据，编写查询语句实现如下分析场景", "output": "appname:zookeeper tag:zookeeper_health|timechart span=1m  max(middleware.zkmsg.zk_outstanding_requests)"}
{"input": "按每分钟分桶统计打开文件数量趋势。", "instruction": "zookeeper日志数据，编写查询语句实现如下分析场景", "output": "appname:zookeeper tag:zookeeper_health|timechart span=1m  max(middleware.zkmsg.zk_open_file_descriptor_count)"}
{"input": "按每分钟分桶统计节点数变化趋势。", "instruction": "zookeeper日志数据，编写查询语句实现如下分析场景", "output": "appname:zookeeper tag:zookeeper_health|timechart span=1m  max(middleware.zkmsg.zk_znode_count)"}
{"input": "按每30分钟分桶统计定时任务执行趋势。", "instruction": "symantec_mail_gateway数据，编写查询语句实现如下分析场景", "output": "(appname:mail_gateway AND tag:symantec)  mg.module:cron* OR mg.module:CRON* | timechart span=30m  dc(mg.command)"}
{"input": "按每30分钟分桶统计访问字节数最大值最小值和平均值的趋势。", "instruction": "loadbalancing_array数据，编写查询语句实现如下分析场景", "output": "(appname:loadbalancing AND tag:array ) |rename loadblancing.* as * | timechart span=30m min(sent_byte) as min_byte,max(sent_byte) as max_byte,avg(sent_byte) as avg_byte "}
{"input": "按每5分钟分桶统计mall_bus耗时平均值趋势。", "instruction": "mall_bus中间件业务数据，编写查询语句实现如下分析场景", "output": "appname:xdtx_mall_bus |timechart span=5m  avg(middleware.haoshi) as avg_haoshi"}
{"input": "按每5分钟分桶统计mall_bus耗时最小值的趋势分析。", "instruction": "mall_bus中间件业务数据，编写查询语句实现如下分析场景", "output": "appname:xdtx_mall_bus |timechart span=5m  min(middleware.haoshi) as min_haoshi"}
{"input": "按每5分钟分桶统计mall_bus耗时最大值趋势分析。", "instruction": "mall_bus中间件业务数据，编写查询语句实现如下分析场景", "output": "appname:xdtx_mall_bus |timechart span=5m  max(middleware.haoshi) as max_haoshi"}
{"input": "按每5分钟分桶统计流量趋势_5m。", "instruction": "haproxy日志数据，编写查询语句实现如下分析场景", "output": " appname:haproxy|timechart span=5m  avg(middleware.bytes) as avg_"}
{"input": "按每5分钟分桶统计网关交易耗时趋势。", "instruction": "网关系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':connector  connector.Service_execute_time:*|timechart span=5m  avg(connector.Service_execute_time) as avg_time"}
{"input": "", "instruction": "CDN 日志中，以域名为单位，时间颗粒度是1小时。统计全部访问IP总流量", "output": "appname:cdn_log|timechart span=1h  sum(cdn.request_length) as total"}
{"input": "", "instruction": "squid 日志中，以域名为单位，时间颗粒度是1天。统计全部访问IP总流量", "output": "appname:squid_log|timechart span=1d  sum(squid.request_length) as total"}
{"input": "", "instruction": "CDN 日志中，以域名为单位，时间颗粒度是5分钟。统计全部访问IP总流量", "output": "appname:cdn_log|timechart span=5m  sum(cdn.request_length) as total"}
{"input": "Redis当天流入网络流量趋势MB。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:redis | eval bytes = redis.total_net_input_bytes/1024/1024 | timechart avg(bytes) as '流入网络流量MB'"}
{"input": "Redis当天处理过的命令数趋势。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:redis  | timechart avg(redis.total_commands_processed) as '处理过的命令数趋势'"}
{"input": "Redis当天收到的总连接数趋势。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:redis| timechart avg(redis.total_connections_received) as '收到的总连接数趋势'"}
{"input": "Redis当天流出网络流量MB趋势。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:redis | eval bytes = redis.total_net_input_bytes/1024/1024  | timechart avg(bytes) as '总流出网络流量MB'"}
{"input": "最近30分钟接口平均处理时间。", "instruction": "Thinkbus接口访问数据，编写查询语句实现如下分析场景", "output": "starttime=\"-30m\" appname:thinkive_works_bus_date_log AND (middleware.action:\"完成处理\" OR middleware.action:\"执行时间过长\") |timechart avg(middleware.latency) as '接口平均处理时间'"}
{"input": "会话frontend最大并发连接数指标按 10 分钟统计趋势。", "instruction": "haproxy日志数据，编写查询语句实现如下分析场景", "output": "appname:haproxy middleware.feconn:* | timechart span=10m  max(middleware.feconn) as max_"}
{"input": "会话最大活跃并发连接数指标按 10 分钟统计趋势。", "instruction": "haproxy日志数据，编写查询语句实现如下分析场景", "output": "appname:haproxy middleware.srv_conn:* | timechart span=10m  max(middleware.srv_conn) as max_"}
{"input": "会话后端最大并发连接数指标按 10 分钟统计趋势。", "instruction": "haproxy日志数据，编写查询语句实现如下分析场景", "output": "appname:haproxy middleware.beconn:* | timechart span=10m  max(middleware.beconn) as max_"}
{"input": "会话进程最大并发连接数指标按 10 分钟统计趋势。", "instruction": "haproxy日志数据，编写查询语句实现如下分析场景", "output": "appname:haproxy middleware.actconn:* | timechart span=10m  max(middleware.actconn) as max_"}
{"input": "会话最大后端重试次数指标按 10 分钟统计趋势。", "instruction": "haproxy日志数据，编写查询语句实现如下分析场景", "output": "appname:haproxy middleware.retries:* | timechart span=10m  max(middleware.retries) as max_"}
{"input": "server端最大正在处理连接数指标按 10 分钟统计趋势。", "instruction": "haproxy日志数据，编写查询语句实现如下分析场景", "output": "appname:haproxy middleware.srv_queue:* | timechart span=10m  max(middleware.srv_queue) as max_"}
{"input": "后端队列最大正在处理连接数指标按 10 分钟统计趋势。", "instruction": "haproxy日志数据，编写查询语句实现如下分析场景", "output": "appname:haproxy middleware.backend_queue:* | timechart span=10m  max(middleware.backend_queue) as max_"}
{"input": "核心交易每 5 分钟平均耗时趋势。", "instruction": "核心交易系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':ensemble ensemble.excute_time:*|eval excute_time=tolong(ensemble.excute_time)|timechart span=5m  avg(excute_time) as avg_"}
{"input": "前50名用户在不同时间段(每 30 分钟分桶切割)登录趋势统计。", "instruction": "天融信防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:tos firewall.type:system firewall.op:login|timechart span=30m limit=50 count() by firewall.user"}
{"input": "top50用户按每 30 分钟趋势做登录事件数统计。", "instruction": "冠群防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:newdon firewall.type:system firewall.status:login|timechart span=30m limit=50 count() by firewall.user"}
{"input": "", "instruction": "squid 日志中，以域名为单位，时间颗粒度是1月。统计全部访问IP总流量", "output": "appname:squid_log|timechart span=1M  sum(squid.request_length) as total"}
{"input": "按每 1 分钟分组统计。", "instruction": "IIS 服务器的今日访问耗时趋势", "output": "starttime=\"now/d\" appname:middleware tag:iis| timechart span=1m avg(middleware.time_cost) as avgcost"}
{"input": "按每 1 小时分组统计。", "instruction": "vsphere_esxi存储最大使用率趋势", "output": "appname:vsphere tag:vsphere source:Datastore* |timechart span=1h  max(capacity.used.pct) as max_"}
{"input": "每10分钟统计访问量总趋势。", "instruction": "WAF_F5数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:f5  | timechart span=10m count()"}
{"input": "按每小时分桶统计事件趋势。", "instruction": "nsfocus_nids_数据，编写查询语句实现如下分析场景", "output": "appname:ids tag:nsfocus  | timechart span=1h  count()"}
{"input": "按每小时分桶统计内网访问外网趋势。", "instruction": "firewall_神州数码数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:dc   firewall.src.geo.city:private| timechart span=1h count()"}
{"input": "按每小时分桶统计非内网会话趋势。", "instruction": "firewall_神州数码数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:dc  NOT firewall.src.geo.city:private| timechart span=1h count()"}
{"input": "按每小时分桶统计攻击事件趋势。", "instruction": "firewall_神州数码数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:dc   firewall.event_level:Security| timechart span=1h count()"}
{"input": "按每小时分桶统计磁盘IO效率降低趋势。", "instruction": "esxi宿主机审计数据，编写查询语句实现如下分析场景", "output": "(appname:esxi AND tag:vobd)  deteriorated | timechart span=1h count()"}
{"input": "按每小时分桶统计定时任务执行趋势。", "instruction": "esxi宿主机审计数据，编写查询语句实现如下分析场景", "output": "appname:esxi crond|timechart span=1h count()"}
{"input": "按每小时分桶统计kernel告警趋势。", "instruction": "esxi宿主机审计数据，编写查询语句实现如下分析场景", "output": "(appname:esxi AND tag:vmkwarning)  \n|timechart span=1h stats count()"}
{"input": "按每30分钟分桶统计非工作时间操作监控。", "instruction": "交换机_华为数据，编写查询语句实现如下分析场景", "output": "(appname:switch tag:huawei switch.brief:CMDRECORD)  |timechart span=30m  count() as appname"}
{"input": "按每30分钟分桶统计访问量。", "instruction": "安全态势数据，编写查询语句实现如下分析场景", "output": "appname:middleware|timechart span=30m  count() as appname"}
{"input": "按每30分钟分桶统计h3c_imc_错误事件趋势。", "instruction": "h3c_imc_数据，编写查询语句实现如下分析场景", "output": "appname:imc  AND (imc.level:\"错误\" OR imc.event_level:3)|timechart span=30m count()"}
{"input": "按每30分钟分桶统计访问资源趋势。", "instruction": "Jumpserver堡垒机数据，编写查询语句实现如下分析场景", "output": "appname:fortress tag:jumpserver  fortress.log_type:host_session_log|timechart span=30m stats count()"}
{"input": "按每30分钟分桶统计威胁风险触发趋势。", "instruction": "HIDS_安全狗数据，编写查询语句实现如下分析场景", "output": "appname:hids tag:safedog hids.event_type:*Risk |timechart span=30m count()"}
{"input": "每20分钟统计一次客户登陆趋势，画成折线图。", "instruction": "通达信数据，编写查询语句实现如下分析场景", "output": "appname:tdx TDX \"登陆\" TDX.REQUEST_TYPE:*|timechart span=20m count()"}
{"input": "每10分钟统计故障上报趋势。", "instruction": "机顶盒自助服务系统数据，编写查询语句实现如下分析场景", "output": "appname:stb tag:userreport|timechart as span=10m count() as count_"}
{"input": "按每小时分桶统计事件趋势。", "instruction": "交换机_华为数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:huawei |timechart span=1h count() as count_"}
{"input": "按每小时分桶统计提权事件分布。", "instruction": "交换机_华为数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:huawei User changed level |timechart span=1h count() as count_"}
{"input": "按每小时分桶统计防火墙日志事件趋势。", "instruction": "网御星云防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:leadsec |timechart span=1h count()"}
{"input": "按每60分钟分桶统计PaloAlto_vpn登录趋势。", "instruction": "FirewallPaloAlto数据，编写查询语句实现如下分析场景", "output": "appname:firewall AND firewall.session_type:vpn |timechart span=60m  count() as total"}
{"input": "按每30分钟分桶统计PaloAlto_vpn登录趋势。", "instruction": "FirewallPaloAlto数据，编写查询语句实现如下分析场景", "output": "appname:firewall AND firewall.session_type:vpn |timechart span=30m  count() as total"}
{"input": "按每30分钟分桶统计今日登录失败趋势。", "instruction": "深信服VPN日志数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:vpn tag:sangfor (vpn.actype:login AND vpn.result:fail*)| timechart span=30m count()"}
{"input": "按每30分钟分桶统计攻击事件趋势变化。", "instruction": "防病毒_SEPM数据，编写查询语句实现如下分析场景", "output": "appname:antivirus_gateway tag:symantec SID|timechart span=30m count()"}
{"input": "按每30分钟分桶统计今日登录失败趋势。", "instruction": "Cisco_VPN日志数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:vpn tag:cisco (vpn.actype:login AND vpn.result:fail*)| timechart span=30m count()"}
{"input": "按每5分钟分桶统计用户实时访问量。", "instruction": "同花顺数据，编写查询语句实现如下分析场景", "output": "appname:THS THS.REQTYPE:1 AND THS.ANSTYPE:\" \" | timechart span=5m count()"}
{"input": "最近24小时事件趋势变化。", "instruction": "防病毒_SEPM数据，编写查询语句实现如下分析场景", "output": "starttime=\"-24h\" appname:antivirus_gateway AND ( tag:symantec OR tag:symantec_app_c OR tag:symantec_risk )| timechart count()"}
{"input": "最近一天登录失败趋势。", "instruction": "深信服零信任VPN数据，编写查询语句实现如下分析场景", "output": "starttime=\"-1d\" appname:vpn tag:sangfor_0trust (vpn.event_name:auth OR vpn.event_name:login OR vpn.event_name:logout)  vpn.result:FAILED | timechart count()"}
{"input": "天融信防火墙配置改动，按每 5 分钟统计日志数量趋势。", "instruction": "天融信防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall AND tag:topsec config |timechart span=5m count()"}
{"input": "按每 30 分钟分组统计。", "instruction": "今日登录失败趋势", "output": "starttime=\"now/d\" appname:vpn tag:sangfor (vpn.actype:login AND vpn.result:fail*)| timechart span=30m count()"}
{"input": "按每 30 分钟分组统计。", "instruction": "用户aaa登录趋势", "output": "appname:vpn vpn.login_user:\"aaa\" vpn.actype:login  | timechart span=30m count()"}
{"input": "按每 1 天分组统计。", "instruction": "db2数据库日志事件量趋势", "output": "appname:db2 |timechart span=1d  count()"}
{"input": "每6小时统计收发邮件量趋势。", "instruction": "exchange前端日志数据，编写查询语句实现如下分析场景", "output": "appname:exchange tag:front  | timechart span=6h  count()"}
{"input": "每10分钟统计udp监听数趋势。", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:process process.local_addr:* process.proto:udp |timechart span=10m  count()"}
{"input": "每10分钟统计windows应用事件趋势。", "instruction": "windows日志数据，编写查询语句实现如下分析场景", "output": " (appname:windows AND tag:application)  |timechart span=10m  count()"}
{"input": "每10分钟统计windows系统错误事件趋势。", "instruction": "windows日志数据，编写查询语句实现如下分析场景", "output": " appname:windows tag:system (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\")|timechart span=10m  count()"}
{"input": "每10分钟统计OracleListener_ListenerServiceUpdate时间趋势图。", "instruction": "Oracle数据，编写查询语句实现如下分析场景", "output": "appname:oracle tag:oracle_listener_log oracle.action:service_update| timechart span=10m  count()"}
{"input": "每10分钟统计OracleListener_客户端连接数趋势图。", "instruction": "Oracle数据，编写查询语句实现如下分析场景", "output": "appname:oracle tag:oracle_listener_log oracle.action:establish| timechart span=10m  count()"}
{"input": "每10分钟统计sslvpn登录趋势。", "instruction": "sslvpn日志数据，编写查询语句实现如下分析场景", "output": "appname:vpn tag:cisco  |timechart span=10m count()"}
{"input": "每10分钟统计数据库_oracle_ServiceUpdate时间趋势图。", "instruction": "数据库_oracle_数据，编写查询语句实现如下分析场景", "output": "(appname:oracle AND tag:listener) oracle.msg:*service_update*| timechart span=10m  count()"}
{"input": "每10分钟统计ips_juniper_事件趋势。", "instruction": "ips_juniper_数据，编写查询语句实现如下分析场景", "output": "appname:ips tag:juniper|timechart span=10m  count()"}
{"input": "每10分钟统计ids_snort_事件趋势。", "instruction": "ids_snort_数据，编写查询语句实现如下分析场景", "output": "appname:ids tag:snort|timechart span=10m count()"}
{"input": "每10分钟统计vpn_juniper_登录失败趋势。", "instruction": "vpn_juniper_数据，编写查询语句实现如下分析场景", "output": "appname:vpn tag:juniper vpn.action:failed|timechart span=10m  count()"}
{"input": "每10分钟统计vpn_juniper_事件趋势。", "instruction": "vpn_juniper_数据，编写查询语句实现如下分析场景", "output": "appname:vpn tag:juniper|timechart span=10m count()"}
{"input": "每10分钟统计vpn_juniper_用户登录成功趋势。", "instruction": "vpn_juniper_数据，编写查询语句实现如下分析场景", "output": "appname:vpn tag:juniper vpn.action:started|timechart span=10m  count()"}
{"input": "每10分钟统计堡垒机_shterm_事件趋势。", "instruction": "堡垒机_shterm_数据，编写查询语句实现如下分析场景", "output": "appname:fortress tag:shterm|timechart span=10m count()"}
{"input": "每10分钟统计堡垒机_fortess_邮件事件趋势。", "instruction": "堡垒机_shterm_数据，编写查询语句实现如下分析场景", "output": "appname:fortress tag:shterm fortress.type:postfix*|timechart span=10m count()"}
{"input": "每10分钟统计windows系统错误事件趋势。", "instruction": "pf_windows数据，编写查询语句实现如下分析场景", "output": "appname:pf_windows tag:system (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\") |timechart span=10m  count()"}
{"input": "每10分钟统计windows应用事件趋势。", "instruction": "pf_windows数据，编写查询语句实现如下分析场景", "output": "appname:pf_windows tag:application|timechart span=10m  count()"}
{"input": "每10分钟统计UV趋势图。", "instruction": "Thinkbus_Nginx用户访问数据，编写查询语句实现如下分析场景", "output": "appname:nginx|timechart span=10m count() as uv"}
{"input": "每10分钟统计安全事件趋势。", "instruction": "linux日志数据，编写查询语句实现如下分析场景", "output": "(appname:linux tag:secure) OR (appname:linux linux.log_type:auth)|timechart span=10m  count()"}
{"input": "每10分钟统计异常掉线趋势。", "instruction": "cisco无线AC数据，编写查询语句实现如下分析场景", "output": "appname:ac tag:cisco ac.event_id:445 OR ac.event_id:35160|timechart span=10m count()"}
{"input": "按每小时分桶统计cisco_nexus事件趋势。", "instruction": "交换机_cisco_nexus数据，编写查询语句实现如下分析场景", "output": "appname:switch AND tag:cisco_nexus |timechart span=1h count() as count_"}
{"input": "按每小时分桶统计cisco_ios事件趋势。", "instruction": "交换机_cisco_ios数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:cisco_ios   |timechart span=1h count() as count_"}
{"input": "按每小时分桶统计OracleRedoLog切换频率趋势。", "instruction": "Oracle数据，编写查询语句实现如下分析场景", "output": "appname:oracle tag:oracle_alert_log oracle.event:\"LGWR switch\" |timechart span=1h  count()"}
{"input": "按每小时分桶统计主机或应用访问趋势。", "instruction": "堡垒机_qizhi数据，编写查询语句实现如下分析场景", "output": "appname:fortress tag:shterm  (NOT fortress.type:*) AND (login) \n|timechart span=1h count() as total"}
{"input": "按每小时分桶统计绿盟waf总访问请求量趋势图。", "instruction": "绿盟waf日志数据，编写查询语句实现如下分析场景", "output": " (appname:waf tag:nsfocus)  |timechart span=1h  count() as appname"}
{"input": "按每小时分桶统计负载均衡_piolink_用户登录成功趋势。", "instruction": "负载均衡_piolink_数据，编写查询语句实现如下分析场景", "output": "appname:loadbalancing tag:piolink loadbalancing.status:opened| timechart span=1h  count()"}
{"input": "按每小时分桶统计负载均衡_piolink_用户登出趋势。", "instruction": "负载均衡_piolink_数据，编写查询语句实现如下分析场景", "output": "appname:loadbalancing tag:piolink loadbalancing.status:closed| timechart span=1h  count()"}
{"input": "按每小时分桶统计负载均衡_piolink_事件趋势。", "instruction": "负载均衡_piolink_数据，编写查询语句实现如下分析场景", "output": "appname:loadbalancing tag:piolink | timechart span=1h  count()"}
{"input": "按每小时分桶统计梭子鱼_waf_事件趋势。", "instruction": "WAF_梭子鱼数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:barracuda|timechart span=1h  count()"}
{"input": "按每小时分桶统计nginx错误日志趋势。", "instruction": "中间件_nginx_数据，编写查询语句实现如下分析场景", "output": "appname:nginx tag:error |timechart span=1h  count()"}
{"input": "按每小时分桶统计流量趋势。", "instruction": "nta_nsfocus_数据，编写查询语句实现如下分析场景", "output": "appname:nta tag:nsfocus | timechart span=1h  count()"}
{"input": "按每小时分桶统计novel_traffic事件量趋势。", "instruction": "firewall_novel_数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:novel firewall.event_type:traffic  | timechart span=1h count() as total"}
{"input": "按每小时分桶统计novel事件量趋势。", "instruction": "firewall_novel_数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:novel | timechart span=1h count() as total"}
{"input": "按每小时分桶统计发生错误事件趋势。", "instruction": "虚拟机_vmware_数据，编写查询语句实现如下分析场景", "output": "appname:vmware AND tag:*   AND ('vmware.level':error OR 'vmware.level':ERROR)|timechart span=1h  count()"}
{"input": "按每小时分桶统计vpn今日登录趋势。", "instruction": "安全态势数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:vpn Log in|timechart span=1h count()"}
{"input": "按每小时分桶统计今日登录趋势。", "instruction": "firewall_360wangshen_数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:firewall tag:360wangshen (login OR session)|timechart span=1h  count()"}
{"input": "按每小时分桶统计correlated_incidents高危事件趋势。", "instruction": "趋势tda数据，编写查询语句实现如下分析场景", "output": "appname:tda AND 'tag':correlated_incidents tda.level:高|timechart span=1h  count()"}
{"input": "按每小时分桶统计malicious_urls高危事件趋势。", "instruction": "趋势tda数据，编写查询语句实现如下分析场景", "output": "appname:tda AND 'tag':malicious_urls tda.level:高|timechart span=1h count()"}
{"input": "按每小时分桶统计threats高危事件趋势。", "instruction": "趋势tda数据，编写查询语句实现如下分析场景", "output": "appname:tda AND 'tag':threats tda.level:高|timechart span=1h  count()"}
{"input": "按每小时分桶统计tda事件趋势折线图。", "instruction": "亚信tda趋势发现日志数据，编写查询语句实现如下分析场景", "output": "appname:tda  | timechart span=1h count()"}
{"input": "按每小时分桶统计事件数折线图。", "instruction": "联软终端控制数据，编写查询语句实现如下分析场景", "output": "appname:leagsoft tag:tc |timechart span=1h count()"}
{"input": "按每小时分桶统计服务报错趋势。", "instruction": "bb_server数据，编写查询语句实现如下分析场景", "output": "appname:bb tag:services|timechart span=1h count()"}
{"input": "按每小时分桶统计访问趋势。", "instruction": "bb_server数据，编写查询语句实现如下分析场景", "output": "appname:bb tag:session|timechart span=1h count()"}
{"input": "按每小时分桶统计sqlerror趋势。", "instruction": "bb_server数据，编写查询语句实现如下分析场景", "output": "appname:bb tag:sqlerror |timechart span=1h count()"}
{"input": "按每小时分桶统计资源访问趋势时间折线。", "instruction": "圣博润堡垒机日志数据，编写查询语句实现如下分析场景", "output": "appname:fortress tag:sbr fortress.log_type:AUDIT_LOG | rename fortress.* as * |timechart span=1h  count()"}
{"input": "按每小时分桶统计受到威胁趋势。", "instruction": "officescan防毒墙数据，编写查询语句实现如下分析场景", "output": "appname:antivirus_gateway tag:officescan antivirus.threat_name:*|timechart span=1h count()"}
{"input": "按每小时分桶统计AP掉线趋势。", "instruction": "h3c无线AC数据，编写查询语句实现如下分析场景", "output": "appname:ac tag:h3c ac.mnemonic:*_AP_DOWN*|timechart span=1h count()"}
{"input": "按每小时分桶统计威胁事件趋势。", "instruction": "fireeye_nx数据，编写查询语句实现如下分析场景", "output": "(appname:nx AND tag:fireeye) |timechart span=1h count()"}
{"input": "按每小时分桶统计安恒waf总访问请求量趋势图。", "instruction": "安恒waf日志数据，编写查询语句实现如下分析场景", "output": "( appname:waf tag:dbappsecurity )  |timechart span=1h  count() as appname"}
{"input": "按每小时分桶统计攻击事件攻击趋势。", "instruction": "华为防火墙日志数据，编写查询语句实现如下分析场景", "output": "(appname:firewall AND tag:huawei) (firewall.brief:ATTACK OR \"ATTACK\" OR \"IPS\" OR firewall.brief:*THREAT*)   | timechart span=1h count()"}
{"input": "按每小时分桶统计kingdee错误日志趋势。", "instruction": "金蝶kingdee数据，编写查询语句实现如下分析场景", "output": "appname:kingdee tag:error |timechart span=1h  count()"}
{"input": "按每小时分桶统计请求量趋势。", "instruction": "zsns 应用的tomcat业务数据，编写查询语句实现如下分析场景", "output": "appname:zsns tomcat.event_type:*响应报文\n|timechart span=1h count()"}
{"input": "按每小时分桶统计ips_topsec_访问趋势。", "instruction": "ips_topsec数据，编写查询语句实现如下分析场景", "output": "appname:ips tag:topsec |timechart span=1h  count() as '访问量'"}
{"input": "按每分钟分桶统计出现错误趋势。", "instruction": "middle_ibm_was_数据，编写查询语句实现如下分析场景", "output": "appname:was tag:syserr|timechart span=1m  count() as tatol"}
{"input": "按每分钟分桶统计访问趋势。", "instruction": "vpn_fortinet_数据，编写查询语句实现如下分析场景", "output": "appname:vpn tag:fortinet | timechart span=1m  count()"}
{"input": "按每分钟分桶统计今日访问失败趋势。", "instruction": "middleware_microsoft_iis_数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" (appname:middleware AND tag:iis) middleware.status:>399 | timechart span=1m  count()"}
{"input": "按每30分钟分桶统计mysql错误日志趋势。", "instruction": "mysql日志数据，编写查询语句实现如下分析场景", "output": " (appname:mysql tag:mysql_error)  |timechart span=30m  count() as appname"}
{"input": "按每30分钟分桶统计mysql慢查询事件趋势。", "instruction": "mysql日志数据，编写查询语句实现如下分析场景", "output": " (appname:mysql tag:mysql_slow)  |timechart span=30m  count() as appname"}
{"input": "按每30分钟分桶统计mysql操作事件趋势。", "instruction": "mysql日志数据，编写查询语句实现如下分析场景", "output": " (appname:mysql tag:mysql_query)  |timechart span=30m  count() as appname"}
{"input": "按每30分钟分桶统计aix系统错误事件趋势。", "instruction": "aix日志数据，编写查询语句实现如下分析场景", "output": "(appname:aix AND (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault))  |timechart span=30m  count() as appname"}
{"input": "按每30分钟分桶统计CRON日志趋势图。", "instruction": "交换机_juniper数据，编写查询语句实现如下分析场景", "output": "((* AND appname:switch) AND tag:juniper) AND switch.module:\\/usr\\/sbin\\/cron |timechart span=30m count() as total"}
{"input": "按每30分钟分桶统计f5_vpn事件趋势。", "instruction": "F5数据，编写查询语句实现如下分析场景", "output": "appname:loadbalancing tag:f5 loadbalancing.src_ip:* *vpn* | timechart span=30m count()"}
{"input": "按每30分钟分桶统计防火墙日志量趋势图。", "instruction": "迪普防火墙日志数据，编写查询语句实现如下分析场景", "output": "(* AND appname:firewall) AND tag:dptech | timechart span=30m count() as total"}
{"input": "按每30分钟分桶统计防火墙_juniper事件变化趋势图。", "instruction": "防火墙_juniper数据，编写查询语句实现如下分析场景", "output": "(* AND appname:firewall) AND tag:juniper |timechart span=30m count() as total"}
{"input": "按每30分钟分桶统计堡垒机_qizhi_日志变化趋势图。", "instruction": "堡垒机_qizhi数据，编写查询语句实现如下分析场景", "output": " appname:fortress tag:shterm  | timechart span=30m count() as total"}
{"input": "按每30分钟分桶统计安恒waf总访问请求量趋势图。", "instruction": "安恒waf日志数据，编写查询语句实现如下分析场景", "output": " (appname:waf tag:dbappsecurity)  |timechart span=30m  count() as count_"}
{"input": "按每30分钟分桶统计今日登录失败趋势。", "instruction": "sslvpn日志数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:vpn tag:cisco vpn.user:* \"authentication\" \"failure\"|timechart span=30m count()"}
{"input": "按每30分钟分桶统计数据库_mssql_错误日志事件趋势。", "instruction": "数据库_mssql_数据，编写查询语句实现如下分析场景", "output": "appname:sqlserver tag:error |timechart span=30m  count() as total"}
{"input": "按每30分钟分桶统计firewall_juniper_事件变化趋势图。", "instruction": "firewall_juniper_数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:juniper |timechart span=30m count() as total"}
{"input": "按每30分钟分桶统计waf_yxlink_高等级事件趋势。", "instruction": "WAF_铱迅数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:yxlink waf.event_level:高|timechart span=30m  count()"}
{"input": "按每30分钟分桶统计waf_yxlink_waf事件趋势。", "instruction": "WAF_铱迅数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:yxlink |timechart span=30m count()"}
{"input": "按每30分钟分桶统计middleware_tomcat_访问量。", "instruction": "middleware_tomcat_数据，编写查询语句实现如下分析场景", "output": "appname:middleware tag:tomcat |timechart span=30m  count() as appname"}
{"input": "按每30分钟分桶统计事件趋势。", "instruction": "firewall_pix_数据，编写查询语句实现如下分析场景", "output": "appname:firewall AND tag:pix | timechart span=30m count() as total"}
{"input": "按每30分钟分桶统计事件数折线图。", "instruction": "websense_dlp_数据，编写查询语句实现如下分析场景", "output": "appname:dlp tag:websense|timechart span=30m  count()"}
{"input": "按每30分钟分桶统计ac连接趋势。", "instruction": "huawei_ac_数据，编写查询语句实现如下分析场景", "output": "appname:ac tag:huawei NOT ac.event_name:登录事件| timechart span=30m  count()"}
{"input": "按每30分钟分桶统计认证失败事件趋势。", "instruction": "cisco_acs_数据，编写查询语句实现如下分析场景", "output": "appname:acs tag:cisco acs.event_name:认证失败事件|timechart span=30m count()"}
{"input": "按每30分钟分桶统计root用户认证失败趋势。", "instruction": "cisco_acs_数据，编写查询语句实现如下分析场景", "output": "appname:acs tag:cisco acs.event_name:认证失败事件 acs.user:root |timechart span=30m count()"}
{"input": "按每30分钟分桶统计写入失败趋势。", "instruction": "cisco_acs_数据，编写查询语句实现如下分析场景", "output": "appname:acs tag:cisco acs.event_name:写入失败事件|timechart span=30m count()"}
{"input": "按每30分钟分桶统计认证成功趋势。", "instruction": "cisco_acs_数据，编写查询语句实现如下分析场景", "output": "appname:acs tag:cisco acs.event_name:认证成功事件 |timechart span=30m count()"}
{"input": "按每30分钟分桶统计windows事件趋势。", "instruction": "pf_windows数据，编写查询语句实现如下分析场景", "output": "appname:pf_windows |timechart span=30m count()"}
{"input": "按每30分钟分桶统计windows用户登录失败趋势。", "instruction": "pf_windows数据，编写查询语句实现如下分析场景", "output": "appname:pf_windows windows.System.EventID.text:4624|timechart span=30m  count()"}
{"input": "按每30分钟分桶统计访问量趋势。", "instruction": "pf_tomcat数据，编写查询语句实现如下分析场景", "output": "appname:pf_tomcat |timechart span=30m  count()"}
{"input": "按每30分钟分桶统计访问量趋势。", "instruction": "pf_nginx数据，编写查询语句实现如下分析场景", "output": " (appname:pf_nginx)  |timechart span=30m  count()"}
{"input": "按每30分钟分桶统计订单趋势。", "instruction": "pf_gateway数据，编写查询语句实现如下分析场景", "output": "appname:pf_gateway  |timechart span=30m count()"}
{"input": "按每30分钟分桶统计异常请求趋势。", "instruction": "haproxy日志数据，编写查询语句实现如下分析场景", "output": " (appname:haproxy (middleware.tw:<0 OR middleware.tc:<0))  |timechart span=30m  count()"}
{"input": "按每30分钟分桶统计访问量。", "instruction": "Apache日志数据，编写查询语句实现如下分析场景", "output": "appname:apache|timechart span=30m  count() as appname"}
{"input": "按每30分钟分桶统计h3c负载均衡_事件趋势。", "instruction": "h3c_负载均衡数据，编写查询语句实现如下分析场景", "output": "appname:loadbalancing tag:h3c | timechart span=30m count()"}
{"input": "按每30分钟分桶统计USG6650_访问趋势。", "instruction": "firewall_huawei_USG6650_数据，编写查询语句实现如下分析场景", "output": "appname:firewall AND tag:huawei_USG6650 | timechart span=30m  count()"}
{"input": "按每30分钟分桶统计事件趋势。", "instruction": "linux日志数据，编写查询语句实现如下分析场景", "output": "(appname:linux tag:messages)OR (appname:linux linux.log_type:messages) |timechart span=30m  count()"}
{"input": "按每30分钟分桶统计linux定时任务执行趋势。", "instruction": "linux日志数据，编写查询语句实现如下分析场景", "output": "(appname:linux tag:crond) OR (appname:linux \"CROND\")  |timechart span=30m  count()"}
{"input": "按每30分钟分桶统计vpn_leadsec_登录趋势。", "instruction": "vpn_leadsec_数据，编写查询语句实现如下分析场景", "output": "appname:vpn tag:leadsec_user  \n|timechart span=30m stats count()"}
{"input": "按每30分钟分桶统计ddos_fortinet_ddos事件趋势。", "instruction": "ddos_fortinet_数据，编写查询语句实现如下分析场景", "output": "appname:ddos |timechart span=30m count()"}
{"input": "按每30分钟分桶统计waf事件趋势。", "instruction": "WAF_网神数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:legendsec waf.module:WAF |timechart span=30m  count()"}
{"input": "按每30分钟分桶统计威胁发生趋势。", "instruction": "奇安信_威胁感知数据，编写查询语句实现如下分析场景", "output": "appname:threat tag:360 | timechart span=30m count()"}
{"input": "按每30分钟分桶统计访问失败趋势。", "instruction": "loadbalancing_array数据，编写查询语句实现如下分析场景", "output": "(appname:loadbalancing AND tag:array ) loadblancing.status:>399\n|timechart span=30m count()"}
{"input": "按每30分钟分桶统计访问趋势。", "instruction": "loadbalancing_array数据，编写查询语句实现如下分析场景", "output": "(appname:loadbalancing AND tag:array ) |timechart span=30m count()"}
{"input": "按每30分钟分桶统计ac被拒绝访问趋势。", "instruction": "冠群防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:newdon firewall.type:ac firewall.status:deny|timechart span=30m  count()"}
{"input": "按每30分钟分桶统计被拒绝访问趋势。", "instruction": "冠群防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:newdon firewall.type:pf firewall.msg:Reject | timechart span=30m  count()"}
{"input": "按每30分钟分桶统计访问量。", "instruction": "瑞数waf数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:river|timechart span=30m  count() as appname"}
{"input": "按每30分钟分桶统计coremail_扫描频率。", "instruction": "coremail数据，编写查询语句实现如下分析场景", "output": "appname:core tag:deliveragent mail.scan_result:* | timechart span=30m  count()"}
{"input": "按每5分钟分桶统计拒绝行为趋势。", "instruction": "深信服防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:sangfor firewall.action:拒绝|timechart span=5m  count()"}
{"input": "按每5分钟分桶统计启明星辰IDS事件趋势图。", "instruction": "启明星辰入侵检测系统日志数据，编写查询语句实现如下分析场景", "output": "appname:ids tag:venustech |timechart span=5m  count()"}
{"input": "按每5分钟分桶统计dns_bind9_dns查询记录趋势。", "instruction": "dns_bind9_数据，编写查询语句实现如下分析场景", "output": "appname:dns tag:bind9 dns.type:queries|timechart span=5m count()"}
{"input": "按每5分钟分桶统计mall_bus日志事件发生的趋势。", "instruction": "mall_bus中间件业务数据，编写查询语句实现如下分析场景", "output": "appname:xdtx_mall_bus | timechart span=5m  count()"}
{"input": "按每5分钟分桶统计网关交易成功趋势。", "instruction": "网关系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':connector connector.info2.retCode:000000 |timechart  span=5m count()"}
{"input": "按每5分钟分桶统计网关交易失败趋势。", "instruction": "网关系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':connector NOT connector.info2.retCode:000000 connector.info2.retCode:* |timechart  span=5m count()"}
{"input": "按每5分钟分桶统计股东校验请求趋势。", "instruction": "同花顺数据，编写查询语句实现如下分析场景", "output": "appname:ths AND THS.REQTYPE:1 AND THS.ANSTYPE:\" \" | timechart span=5m      count()"}
{"input": "按每5分钟分桶统计撤单请求趋势。", "instruction": "同花顺数据，编写查询语句实现如下分析场景", "output": "appname:ths THS.REQTYPE:4 THS.ANSTYPE:\" \"  | | timechart span=5m count()"}
{"input": "按每5分钟分桶统计实时请求趋势。", "instruction": "通达信数据，编写查询语句实现如下分析场景", "output": "appname:tdx  NOT 连接信息 \"功能请求\" | timechart span=5m count()"}
{"input": "按每5分钟分桶统计请求失败趋势。", "instruction": "通达信数据，编写查询语句实现如下分析场景", "output": "appname:tdx  NOT 连接信息 \"调用失败\" | timechart span=5m count()"}
{"input": "", "instruction": "IIS 服务器的今天访问趋势", "output": "starttime=\"now/d\" (appname:middleware tag:iis)  |timechart span=1m  count() as appname"}
{"input": "最近24小时日志数量变化。", "instruction": "交换机_juniper数据，编写查询语句实现如下分析场景", "output": "starttime=\"-24h\" (* AND appname:switch) AND tag:juniper |timechart count()"}
{"input": "f5日志量_最近一小时趋势。", "instruction": "f5_dns日志数据，编写查询语句实现如下分析场景", "output": "starttime=\"-1h\" appname:loadbalancing tag:f5  loadbalancing.severity:*| timechart count()"}
{"input": "Redis最近一天日志数量趋势。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "starttime=\"-1d\" appname: redis | timechart count()"}
{"input": "OracleAlertLog每10分钟粒度日志量趋势图。", "instruction": "Oracle数据，编写查询语句实现如下分析场景", "output": "appname:oracle tag:oracle_alert_log |timechart span=10m count()"}
{"input": "checkpoint事件趋势_最近一小时。", "instruction": "防火墙checkpoint日志数据，编写查询语句实现如下分析场景", "output": "starttime=\"-1h\" (* AND appname:firewall) AND tag:checkpoint  |timechart count()"}
{"input": "每小时dns解析次数。", "instruction": "ZDNS日志数据，编写查询语句实现如下分析场景", "output": "appname:dns tag:zdns |timechart span=1h count()"}
{"input": "数据库_oracle近两天内每十分钟发生的错误事件次数。", "instruction": "数据库_oracle_数据，编写查询语句实现如下分析场景", "output": "starttime=\"-2d\" endtime=\"now\" appname:oracle AND tag:alert |timechart span=10m  count() as cn"}
{"input": "梭子鱼_waf_每小时访问流量趋势。", "instruction": "WAF_梭子鱼数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:barracuda waf.bytes_in:* | eval value=tolong(waf.bytes_in) | timechart span=1h sum(value)"}
{"input": "今天访问趋势。", "instruction": "middleware_microsoft_iis_数据，编写查询语句实现如下分析场景", "output": "(appname:middleware tag:iis)  |timechart count()"}
{"input": "被拒绝访问趋势。", "instruction": "天融信防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:tos firewall.type:pf firewall.msg:Reject | timechart count()"}
{"input": "ac被拒绝访问趋势。", "instruction": "天融信防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:tos firewall.type:ac firewall.rule:deny|timechart count()"}
{"input": "按每 5 分钟统计告警事件趋势。", "instruction": "流量数据数据，编写查询语句实现如下分析场景", "output": "appname:nta tag:eve nta.event_type:alert nta.src_ip:192.168.0.100 nta.dst_ip:192.168.1.200 |timechart span=5m count()"}
{"input": "最近半小时接口调用趋势图_分钟粒度。", "instruction": "Thinkbus接口访问数据，编写查询语句实现如下分析场景", "output": "starttime=\"-30m\" appname:thinkive_works_bus_date_log AND middleware.action:\"开始处理\" |timechart span=1m count() as '每分钟调用数'"}
{"input": "请求量每 30 分钟趋势分析。", "instruction": "haproxy日志数据，编写查询语句实现如下分析场景", "output": " (appname:haproxy)  |timechart span=30m  count()"}
{"input": "tomcat_stdout_近一天访问量。", "instruction": "tomcat_stdout_数据，编写查询语句实现如下分析场景", "output": "starttime=\"-1d\" appname:tomcat tag:stdout |timechart count()"}
{"input": "核心交易量每 5 分钟趋势。", "instruction": "核心交易系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':ensemble ensemble.retCode:*|timechart span=5m count()"}
{"input": "事件触发数量趋势按小时画折线图。", "instruction": "联软终端控制数据，编写查询语句实现如下分析场景", "output": "appname:leagsoft tag:tc |timechart span=1h count()"}
{"input": "每小时大GC次数。", "instruction": "jdk_gc数据，编写查询语句实现如下分析场景", "output": "appname:gc AND \"CMS-initial-mark\"|timechart span=1h count()"}
{"input": "最近一天发现病毒趋势。", "instruction": "antivirus_ruixing数据，编写查询语句实现如下分析场景", "output": "starttime=\"-1d\" appname:antivirus tag:ruixing | timechart count()"}
{"input": "最近24小时事件趋势变化。", "instruction": "TrendMicro_antivirus数据，编写查询语句实现如下分析场景", "output": "starttime=\"-24h\" appname:antivirus tag:trendmicro | timechart count()"}
{"input": "攻击趋势。", "instruction": "奇安信天眼数据，编写查询语句实现如下分析场景", "output": "appname:skyeye tag:qianxin (NOT skyeye.log_type:log) |timechart count()"}
{"input": "近7天_招聘网站访问趋势。", "instruction": "surfilter_ac数据，编写查询语句实现如下分析场景", "output": "starttime=\"-7d\" appname:ac (ac.event_type:app_filter OR ac.event_type:other_app) AND ac.kv.app_cat_name:招聘资讯|timechart count()"}
{"input": "事件趋势图，每30 分钟计数一次。", "instruction": "arista交换机日志数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:arista switch.severity:*| timechart span = 30m count()"}
{"input": "梭子鱼_waf_每小时日志量趋势。", "instruction": "WAF_梭子鱼数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:barracuda|timechart span=1h count()"}
{"input": "梭子鱼_waf_每3小时访问流量趋势。", "instruction": "WAF_梭子鱼数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:barracuda waf.bytes_in:* |eval value=tolong(waf.bytes_in)| timechart span=3h sum(value)"}
{"input": "最近一天访问趋势。", "instruction": "nas_forescout数据，编写查询语句实现如下分析场景", "output": "starttime=\"-1d\" appname:nas tag:forescout| timechart count()"}
{"input": "近七天浏览招聘网站趋势。", "instruction": "奇安信AC数据，编写查询语句实现如下分析场景", "output": "starttime=\"-7d\" appname:ac tag:qianxin ac.log_type:* ac.web_app:*招聘* OR ac.web_app:*求职* \n| timechart count()"}
{"input": "最近24小时日志量趋势图。", "instruction": "华为防火墙日志数据，编写查询语句实现如下分析场景", "output": "starttime=\"-24h\" (* AND appname:firewall) AND tag:huawei |timechart count()"}
{"input": "192.168.1.2的事件数每 30 分钟统计趋势。", "instruction": "windows日志数据，编写查询语句实现如下分析场景", "output": "192.168.1.2 AND appname:windows | timechart span = 30m count()"}
{"input": "202.106.0.20的事件数每 10 分钟统计趋势。", "instruction": "windows日志数据，编写查询语句实现如下分析场景", "output": "202.106.0.20 AND appname:windows | timechart span = 10m count()"}
{"input": "114.114.114.114的事件数每 60 分钟统计趋势。", "instruction": "windows日志数据，编写查询语句实现如下分析场景", "output": "114.114.114.114 AND appname:windows | timechart span = 60m count()"}
{"input": "110.120.119.122的事件数每 1 小时统计趋势。", "instruction": "windows日志数据，编写查询语句实现如下分析场景", "output": "110.120.119.122 AND appname:windows | timechart span = 1h count()"}
{"input": "123.06.123.45的事件数每 2 小时统计趋势。", "instruction": "windows日志数据，编写查询语句实现如下分析场景", "output": "123.06.123.45 AND appname:windows | timechart span = 2h count()"}
{"input": "223.43.32.31的事件数每 12 小时统计趋势。", "instruction": "windows日志数据，编写查询语句实现如下分析场景", "output": "223.43.32.31 AND appname:windows | timechart span = 12h count()"}
{"input": "topsec_攻击趋势，每小时统计一次。", "instruction": "WAF_天融信数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:topsec AND waf.event_type:waf_attack| timechart span=1h  count()"}
{"input": "每 10 分钟统计访问量趋势。", "instruction": "ids_topsec数据，编写查询语句实现如下分析场景", "output": "appname:ids tag:topsec | timechart span=10m  count()"}
{"input": "核心交易量每 15 分钟趋势。", "instruction": "核心交易系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':ensemble ensemble.retCode:*|timechart span=15m count()"}
{"input": "按每 1 分钟分组统计。", "instruction": "IIS服务器的今日访问失败趋势", "output": "starttime=\"now/d\" (appname:middleware AND tag:iis) middleware.status:>399 | timechart span=1m count()"}
{"input": "按每 30 分钟分组统计。", "instruction": "linux定时任务执行趋势", "output": " (appname:linux tag:crond)  |timechart span=30m  count()"}
{"input": "按每 10 分钟分组统计。", "instruction": "linux安全事件趋势", "output": "appname:linux tag:secure|timechart span=10m  count()"}
{"input": "按每 30 分钟分组统计。", "instruction": "linux错误事件趋势", "output": "appname:linux tag:messages|timechart span=30m  count()"}
{"input": "按每 30 分钟分组统计。", "instruction": "Linux操作系统审计_linux系统错误事件趋势", "output": "appname:linux AND (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault) |timechart span=30m count()"}
{"input": "按每 30 分钟分组统计。", "instruction": "Linux操作系统审计_linux定时任务执行趋势", "output": "appname:linux tag:cron CROND |timechart span=30m count()"}
{"input": "按每 1 小时分组统计。", "instruction": "虚拟机_vmware_发生错误事件趋势", "output": "appname:vmware AND tag:*   AND ('vmware.level':error)|timechart span=1h count()"}
{"input": "按每 30 分钟分组统计。", "instruction": "aix系统错误事件趋势", "output": " (appname:aix AND (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault))  |timechart span=30m count()"}
{"input": "按每 15 秒分组统计。", "instruction": "带有 heka 标签的nginx日志中GET 方法的请求量趋势", "output": "(appname:nginx tag:heka GET)  |timechart span=15s  count()"}
{"input": "每 3 小时统计的jboss请求趋势。", "instruction": "jboss日志数据，编写查询语句实现如下分析场景", "output": " (appname:jboss)  |timechart span=3h count()"}
{"input": "每 3 小时统计一次jboss错误日志趋势。", "instruction": "jboss日志数据，编写查询语句实现如下分析场景", "output": " (appname:jboss AND (failed OR err OR error OR errors  OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR *exception ))  |timechart span=3h count()"}
{"input": "每6小时统计一次论坛发帖趋势。", "instruction": "深信服上网行为审计数据，编写查询语句实现如下分析场景", "output": "sangforAC.appname:发帖|timechart span=6h count()"}
{"input": "每20分钟统计一次阻断事件趋势，画折线图。", "instruction": "WAF_F5数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:f5 waf.is_truncated:truncated  |timechart span=20m count()"}
{"input": "每15分钟统计事件趋势。", "instruction": "symantec_dlp_数据，编写查询语句实现如下分析场景", "output": "appname:dlp tag:symantec |timechart span=15m count()"}
{"input": "每15分钟统计境外IP登录趋势。", "instruction": "HIDS_安全狗数据，编写查询语句实现如下分析场景", "output": "appname:hids tag:safedog  hids.event_type:remoteLogin NOT hids.country:中国| timechart span=15m count()"}
{"input": "", "instruction": "深信服零信任VPN数据，编写查询语句实现如下分析场景：最近一天登录失败趋势", "output": "starttime=\"-1d\" appname:vpn tag:sangfor_0trust (vpn.event_name:auth OR vpn.event_name:login OR vpn.event_name:logout)  vpn.result:FAILED | timechart span=30m count()"}
{"input": "", "instruction": "今天kafka错误事件数量的趋势", "output": "starttime=\"now/d\" endtime=\"now\" (appname:kafka kafka.event_type:ERROR)|timechart count()"}
{"input": "", "instruction": "1. 从应用 \"db2\" 中检索所有存储桶中的所有时间戳和相应的跨度为一天的数据点（即 \"span=1d\"）。将结果保存在变量中以供后续处理。2. 使用 stats 命令计算每个时间段内数据的数量并将其保存在名为 \"cnt\" 的列中。3. 根据需要筛选或排序结果。", "output": "appname:db2 |timechart span=1d count()"}
{"input": "", "instruction": "windows系统的系统日志中，包含“system”这个tag并且出现过以下关键词之一的日志，按时间分组后统计数量，每分钟统计一次。", "output": " appname:windows tag:system (failed OR err OR error OR errors OR warn OR warning OR failure OR wrong OR bad OR critical OR emerg OR emergency OR alert OR crit OR err OR segmentation OR fault OR \"错误\" OR \"失败\")|timechart span=1m count()"}
{"input": "", "instruction": "统计一天内某个应用名为`exchange`并且标签为`front`的请求数目和时间分布情况。", "output": "appname:exchange tag:front | timechart count()"}
{"input": "", "instruction": "应用名为 \"redis\"、时间分段大小为一分钟，聚合函数为平均值，统计 Redis 服务器的客户端连接数和阻塞客户端调用数两个指标。", "output": "appname:redis | timechart span=1m avg(redis.connected_clients) as '客户端连接数', avg(redis.blocked_clients) as '阻塞客户端调用数'"}
