{"input": "", "instruction": "将所有字段的名称改为小写", "output": "* | foreach * [[ eval <<FIELD>>=lower('<<FIELD>>') ]]"}
{"input": "", "instruction": "查询最近1条历史搜索耗时和结果数，根据耗时是否小于 100000 毫秒展示搜索状态为否或是", "output": "(tag:search_history AND schedule) AND 'spl.category':schedule spl.query:\"timestamp:*\" |table spl.search_cost,spl.result_count |limit 1|eval status=if(spl.search_cost<100000,\"否\",\"是\")|fields status"}
{"input": "", "instruction": "查询最近 10 条历史搜索耗时和结果数，根据耗时是否小于 200000 毫秒展示搜索状态为否或是", "output": "(tag:search_history AND schedule) AND 'spl.category':schedule spl.query:\"timestamp:*\" |table spl.search_cost,spl.result_count |limit 10|eval status=if(spl.search_cost<200000,\"否\",\"是\")|fields status"}
{"input": "", "instruction": "查询历史搜索耗时和结果数，根据耗时是否小于 300000 毫秒展示搜索状态为否或是", "output": "(tag:search_history AND schedule) AND 'spl.category':schedule spl.query:\"timestamp:*\" |table spl.search_cost,spl.result_count |eval status=if(spl.search_cost<300000,\"否\",\"是\")|fields status"}
{"input": "", "instruction": "查询最近 1 条历史搜索耗时和结果数，根据耗时是否小于 100 秒展示搜索状态为否或是", "output": "(tag:search_history AND schedule) AND 'spl.category':schedule spl.query:\"timestamp:*\" |table spl.search_cost,spl.result_count |limit 1|eval status=if(spl.search_cost<100000,\"否\",\"是\")"}
{"input": "", "instruction": "查询最近 20 条历史搜索耗时和结果数，根据耗时是否小于 300 秒展示搜索状态为否或是", "output": "(tag:search_history AND schedule) AND 'spl.category':schedule spl.query:\"timestamp:*\" |table spl.search_cost,spl.result_count |limit 20|eval status=if(spl.search_cost<300000,\"否\",\"是\")"}
{"input": "", "instruction": "查询历史搜索耗时和结果数，根据耗时是否小于 200 秒展示搜索状态为否或是", "output": "(tag:search_history AND schedule) AND 'spl.category':schedule spl.query:\"timestamp:*\" |table spl.search_cost,spl.result_count |eval status=if(spl.search_cost<200000,\"否\",\"是\")|fields status"}
{"input": "", "instruction": "查询历史搜索耗时和结果数，根据耗时是否大于 100 秒展示搜索状态为是或否", "output": "(tag:search_history AND schedule) AND 'spl.category':schedule spl.query:\"timestamp:*\" |table spl.search_cost,spl.result_count |eval status=if(spl.search_cost<100000,\"否\",\"是\")"}
{"input": "", "instruction": "查询最近 1 条搜索历史的耗时和结果数，根据耗时是否大于 200 秒展示搜索状态为是或否", "output": "(tag:search_history AND schedule) AND 'spl.category':schedule spl.query:\"timestamp:*\" |table spl.search_cost,spl.result_count |limit 1|eval status=if(spl.search_cost<200000,\"否\",\"是\")"}
{"input": "", "instruction": "查询最近 10 条搜索历史的耗时和结果数，根据耗时是否大于 300 秒展示搜索状态为是或否", "output": "(tag:search_history AND schedule) AND 'spl.category':schedule spl.query:\"timestamp:*\" |table spl.search_cost,spl.result_count |limit 10|eval status=if(spl.search_cost<300000,\"否\",\"是\")"}
{"input": "", "instruction": "now()函数使用示例", "output": "* | eval yesterday=relative_time(now(), \"-1d/d\")"}
{"input": "", "instruction": "从rzy_internal索引中查询字段提取规则是否正常", "output": "_index:rzy_internal tag:parser_stat  parser_stat.id:* |stats sum(parser_stat.total) as total|eval status=if(total>1,\"正常\",\"异常\") "}
{"input": "", "instruction": "从_internal索引中查询字段提取规则是否正常", "output": "_index:_internal tag:parser_stat  parser_stat.id:* |stats sum(parser_stat.total) as total|eval status=if(total>1,\"正常\",\"异常\") "}
{"input": "", "instruction": "从_internal索引中查询字段提取规则是否正常运行", "output": "_index:_internal tag:parser_stat  parser_stat.id:* |stats sum(parser_stat.total) as total|eval status=if(total>0,\"正常\",\"异常\") "}
{"input": "", "instruction": "从rzy_internal索引中查询字段提取规则是否正常运行", "output": "_index:rzy_internal tag:parser_stat  parser_stat.id:* |stats sum(parser_stat.total) as total|eval status=if(total>0,\"正常\",\"异常\") "}
{"input": "最大交易耗时分析。搜索 level 为 T 或 D，且包含开始交易或结束交易的日志，根据 tranCode 和 seqNo 分组统计时间戳的最大值最小值，相减得到单笔耗时，排序取最大值。", "instruction": "查询农信银支付清算系统(mps)数据，进行如下统计", "output": "sourcetype:mps (level:T OR level:D) (\"结束交易\" OR \"开始交易\")| stats max(timestamp) as _max,min(timestamp) as _min by seqNo,tranCode| eval cost=_max-_min| sort 1 by cost"}
{"input": "", "instruction": "我想查询这2天每个ip的日志，这个量有多少GB，怎么查？", "output": "_index:* * | |stats sum(raw_message_length) as cnt by ip |eval GB=cnt/1024/1024/1024"}
{"input": "epay_交易状态分布", "instruction": "支付聚合_epay数据，编写查询语句实现如下分析场景", "output": "tag:epay epay.action:应答 epay.response.responseTextMessage:*|eval result=case( epay.response.responseTextMessage==\"交易成功\",\"成功\",default,\"异常\" ) |stats count(*) by result"}
{"input": "服务名：serviceA", "instruction": "查看今天某个服务的错误率和错误类型", "output": "starttime=\"now/d\" endtime=\"now\" service:serviceA | stats count(eval(status_code>=400)) as error_count, count() as total_count | eval error_rate = error_count/total_count*100"}
{"input": "服务名：serviceA", "instruction": "查看今天某个服务在不同机器上的错误率和错误类型", "output": "starttime=\"now/d\" endtime=\"now\" service:serviceA | stats count(eval(status_code>=400)) as error_count, count() as total_count by hostname | eval error_rate = error_count/total_count*100"}
{"input": "主机 IP 为172.16.14.60", "instruction": "做一个监控，主机昨日一天未收到任何数据就告警", "output": "starttime=\"now/d-1d\" endtime=\"now\" ip:172.16.14.60 | stats count() as cnt | eval is_issue=if( cnt ==0,1,0)"}
{"input": "* AND tag:jxcbd2_tablespace | stats count() by oracle.TABLESPACE_NAME, oracle.USED_OF_MAX_PCT | sort by - oracle.USED_OF_MAX_PCT", "instruction": "以下语句有什么错误？", "output": "by后面的分组字段都会被视作字符串类型，对字符串类型进行 sort 会按照字母序，而不是数值，需要在 sort 之前重新转换为数值，改成这样： | eval p=todouble(oracle.USED_OF_MAX_PCT) | sort by - p"}
{"input": "核心lis_日志量在IP与实例的分布", "instruction": "核心_bea数据，编写查询语句实现如下分析场景", "output": "tag:lis |eval instance = coalesce(tomcat.instance,bea.instance,other.instance) |stats count() as tally  by ip, instance |sort by tally"}
{"input": "核心lis_IP与实例错误分布", "instruction": "核心_bea数据，编写查询语句实现如下分析场景", "output": "tag:lis error|eval instance = coalesce(tomcat.instance,bea.instance,other.instance)|stats count() as tally  by ip, instance |sort by tally"}
{"input": "", "instruction": "查找最近一月内访问量最高的国家和城市，并显示月份和访问量", "output": " starttime=\"now-1M\" _index:web | iplocation apache.clientip | stats count() as 'count' by Country, City | sort by -count | head 10 | eval month=parsedate(now(), \"MMM\") | table month, Country, City, count"}
{"input": "", "instruction": "计算日志按天按周的数量", "output": "* | stats count() as cnt by signature | eval days = 10| eval events_perShift = round(cnt / ((days * 24)/4),3)| eval events_perDay = round(cnt / days,2)| eval events_perWeek = round(cnt / (days / 7),2)| sort by - cnt| fields - cnt days| table signature events_perShift events_perDay events_perWeek| addcoltotals labelfield=signature label=Total"}
{"input": "", "instruction": "我想问最近一段时间内出现的 Tomcat、BEA WebLogic 和其他应用服务器实例的数量以及它们分别属于哪个 IP 地址，并按数量从高到低排序。", "output": "tag:lis error|eval instance = coalesce(tomcat.instance,bea.instance,other.instance)|stats count() as tally  by ip, instance |sort by tally"}
{"input": "", "instruction": "我想询问今天的服务状态中出现错误的数量和总访问量之比，并且将这个比例转换为百分数。", "output": "starttime=\"now/d\" endtime=\"now\" service:serviceA | stats count(eval(status_code>=400)) as error_count, count() as total_count | eval error_rate = error_count/total_count*100"}
{"input": "", "instruction": "我想要知道今天有多少请求失败了。", "output": "starttime=\"now/d\" endtime=\"now\" service:serviceA | stats count(eval(status_code>=400)) as error_count, count() as total_count by hostname | eval error_rate = error_count/total_count*100"}
{"input": "", "instruction": "我想询问的是某些特定 IP 在过去一天内是否进行了一次或多次访问", "output": "starttime=\"now/d-1d\" endtime=\"now\" ip:172.16.14.60 | stats count() as cnt | eval is_issue=if( cnt ==0,1,0)"}
{"input": "前 10 条AD登陆失败详情", "instruction": "AD日志数据，编写查询语句实现如下分析场景", "output": "appname:windows tag:security (json.event_id:4771 AND json.keywords:\"审核失败\") NOT json.event_data.TargetUserName:*$\n| stats count() as ct by json.event_data.TargetUserName,json.event_data.IpAddress,ip\n| sort by ct\n| eval user=json.event_data.TargetUserName\n| eval src=json.event_data.IpAddress\n| eval dest=ip\n| fields user,src,dest,ct\n| limit 10"}
{"input": "登录成功率", "instruction": "日志易运营视图数据，编写查询语句实现如下分析场景", "output": "(* AND appname:yottaweb_audit_log) AND json.action:login|eval result_ = if(json.result==\"success\",1,0)|stats sum(result_) as success,count() as sum_|eval rate =success/sum_"}
{"input": "最近cpu使用率指标", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:top_info_system_stats | limit 1 | eval per=(100-json.cpu.idle_percent)/100|table per"}
{"input": "docker_cpu平均使用率", "instruction": "docker性能数据，编写查询语句实现如下分析场景", "output": "appname:docker_metric tag:docker_metric_cpu AND (hostname:* AND ip:*)| stats count() as cnt by json.total.pct|eval a=todouble(json.total.pct) | stats avg(a) as cpupct"}
{"input": "docker_网络丢包率", "instruction": "docker性能数据，编写查询语句实现如下分析场景", "output": "appname:docker_metric tag:docker_metric_network AND (hostname:* AND ip:${ip}) | stats count() as cnt by json.in.dropped,json.out.dropped,json.inbound.packets,json.outbound.packets | eval drop=json.in.dropped+json.out.dropped|eval all=json.inbound.packets+json.outbound.packets| stats sum(all) as total ,sum(drop) as drop_total | eval drop_p=drop_total/total"}
{"input": "docker_网络错误数据包数量", "instruction": "docker性能数据，编写查询语句实现如下分析场景", "output": "appname:docker_metric tag:docker_metric_network AND (hostname:* AND ip:${ip}) | stats count() as cnt by json.outbound.errors,json.in.errors,json.out.errors,json.inbound.errors| eval error=json.outbound.errors+json.in.errors+json.out.errors+json.inbound.errors"}
{"input": "指定 IP 地址的网络错误数据包数量", "instruction": "docker性能数据，编写查询语句实现如下分析场景", "output": "appname:docker_metric tag:docker_metric_network AND (hostname:* AND ip:${ip}) | stats count() as cnt by json.outbound.errors,json.in.errors,json.out.errors,json.inbound.errors| eval error=json.outbound.errors+json.in.errors+json.out.errors+json.inbound.errors"}
{"input": "", "instruction": "我想跟踪一款名为“top_info_system_stats”的应用的性能数据，并计算其 CPU 使用率的百分比除以 100 以获得每秒的 CPU 活跃度。", "output": "* AND appname:top_info_system_stats | limit 1 | eval per=(100-json.cpu.idle_percent)/100|table per"}
{"input": "", "instruction": "我想问的是，在过去一小时内，容器的 CPU 使用率平均到底有多高吗？", "output": "appname:docker_metric tag:docker_metric_cpu AND (hostname:* AND ip:*)| stats count() as cnt by json.total.pct|eval a=todouble(json.total.pct) | stats avg(a) as cpupct"}
{"input": "", "instruction": "我想问有关 Docker 容器的网络流量统计信息", "output": "appname:docker_metric tag:docker_metric_network AND (hostname:* AND ip:${ip}) | stats count() as cnt by json.in.dropped,json.out.dropped,json.inbound.packets,json.outbound.packets | eval drop=json.in.dropped+json.out.dropped|eval all=json.inbound.packets+json.outbound.packets| stats sum(all) as total,sum(drop) as drop_total | eval drop_p=drop_total/total"}
{"input": "", "instruction": "跟踪该应用在 Docker 中发生的所有网络问题，包括出站错误、入站错误、发送错误和接收错误。", "output": "appname:docker_metric tag:docker_metric_network AND (hostname:* AND ip:${ip}) | stats count() as cnt by json.outbound.errors,json.in.errors,json.out.errors,json.inbound.errors| eval error=json.outbound.errors+json.in.errors+json.out.errors+json.inbound.errors"}
{"input": "内网访问外网关系图，包括源ip、目的IP、国家、城市，展示最近 20 条。", "instruction": "firewall_神州数码数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:dc   firewall.src.geo.city:private \n|stats count() as cnt by firewall.src_ip,firewall.dst_ip,firewall.dst.geo.country,firewall.dst.geo.city\n| eval dst=firewall.dst_ip+\"_\"+firewall.dst.geo.country+\"_\"+firewall.dst.geo.city\n|eval from=firewall.src_ip\n|eval to=dst\n|sort by cnt\n|limit 20\n|fields from,to,cnt"}
{"input": "各主机威胁总数，保留前 15 条。", "instruction": "HIDS_安全狗数据，编写查询语句实现如下分析场景", "output": "appname:hids tag:safedog  hids.event_type:risk |eval cnt=tolong(hids.riskCount)| stats sum(cnt) as cnt by hids.localIp|sort by cnt |limit 15"}
{"input": "", "instruction": "基于apache.referer判断输入方式", "output": "appname:apache | eval input_type=case(apache.referer == \"-\",\"direct\", contains(apache.referer, \"google.com\"),\"organic\", contains(apache.referer, \"bing.com\"),\"organic\", contains(apache.referer, \"baidu.com\"), \"organic\",default,\"social\")"}
{"input": "交易金额。", "instruction": "综合前置_gaps数据，编写查询语句实现如下分析场景", "output": "appname:gaps gaps.req.dkye:* |eval a = todouble(gaps.req.dkye) |stats sum(a) as tally "}
{"input": "飞塔内-外网流量实时监测，根据流量总和排名获取前 100 条内外网来源 IP 和目的 IP 的访问关系。", "instruction": "防火墙_飞塔数据，编写查询语句实现如下分析场景", "output": "(appname:firewall  tag:fortinet AND firewall.type:traffic AND firewall.src.geo.country:private) |eval sent=tolong(firewall.sentbyte) |stats sum(sent) as sum_  by  firewall.src_ip,firewall.dst_ip| sort by sum_ | limit 100"}
{"input": "", "instruction": "判断访问时间段是上午下午还是晚上", "output": "appname:apache | eval hour=parsedate(timestamp, \"H\") | eval time_segment=case(hour<6,\"night\",hour<12,\"morning\",hour<18,\"afternoon\",default,\"evening\")"}
{"input": "事件等级分布，展示前 10 条。", "instruction": "交换机_华为数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:huawei |eval r=switch.describe+\"_\"+switch.level|top 10 r"}
{"input": "", "instruction": "规范化Eventlog里的用户名", "output": "appname:wineventlog | eval user=lower(if(match(user,\".*\\\\.*\"), replace(user,\".*\\\\\",\"\"), user))"}
{"input": "", "instruction": "VPN日志分析", "output": "appname:VPN tag:array \"VPN: A new TCP tunnel has been established successfully\" |table time,user |eval desc=\"VPN: A new TCP tunnel has been established successfully\" "}
{"input": "", "instruction": "浪潮云宿主机数量", "output": "appname:incloud_sphere tag:host |stats dc(host) as cnt |eval cnt=tolong(cnt)"}
{"input": "", "instruction": "从rzyxt中查询Mysql当前连接数指标，最近一条的情况", "output": "appname:rzyxt tag:mysql_metrics   |eval mysql_connection_num=tolong(mysql_connection_num) |table mysql_connection_num |limit 1 "}
{"input": "", "instruction": "从manager中查询Mysql当前连接数指标，最近1条的情况", "output": "appname:manager tag:mysql_metrics   |eval mysql_connection_num=tolong(mysql_connection_num) |table mysql_connection_num |limit 1 "}
{"input": "", "instruction": "从promethus中查询Mysql当前连接数指标，最近100条的情况", "output": "appname:promethus tag:mysql_metrics   |eval mysql_connection_num=tolong(mysql_connection_num) |table mysql_connection_num |limit 100 "}
{"input": "", "instruction": "从promethus中查询Mysql当前连接数指标，最近10条的情况", "output": "appname:promethus tag:mysql_metrics   |eval mysql_connection_num=tolong(mysql_connection_num) |table mysql_connection_num |limit 10 "}
{"input": "", "instruction": "从promethus中查询Mysql当前连接数指标，最近50条的情况", "output": "appname:promethus tag:mysql_metrics   |eval mysql_connection_num=tolong(mysql_connection_num) |table mysql_connection_num |limit 50 "}
{"input": "", "instruction": "从manager中查询Mysql当前连接数指标，最近5条的情况", "output": "appname:manager tag:mysql_metrics   |eval mysql_connection_num=tolong(mysql_connection_num) |table mysql_connection_num |limit 5 "}
{"input": "", "instruction": "从ansible中查询ulimit配置，ulimit_config等于 655350 时，判定状态为正常，否则为异常", "output": "appname:ansible tag:ulimit_config |dedup 1 ip |table ip,ulimit_config |sort by +ip |eval status=if(ulimit_config==\"655350\",\"正常\",\"异常\") "}
{"input": "", "instruction": "从linux中查询ulimit配置，ulimit_config等于 65535 时，判定状态为正常，否则为异常", "output": "appname:linux tag:ulimit_config |dedup 1 ip |table ip,ulimit_config |sort by +ip |eval status=if(ulimit_config==\"65535\",\"正常\",\"异常\") "}
{"input": "", "instruction": "从puppet中查询ulimit配置，ulimit_config等于 65536 时，判定状态为正常，否则为异常", "output": "appname:puppet tag:ulimit_config |dedup 1 ip |table ip,ulimit_config |sort by +ip |eval status=if(ulimit_config==\"65536\",\"正常\",\"异常\") "}
{"input": "发送总流量前20的链接。", "instruction": "天融信防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:tos firewall.sent:*|eval sent=tolong(firewall.sent)|stats sum(sent) as sum_ by firewall.src_ip,firewall.dst_ip|sort by count_|limit 20"}
{"input": "发送总流量前20的链接。", "instruction": "冠群防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:newdon firewall.sent:*|eval sent=tolong(firewall.sent)|stats sum(sent) as sum_ by firewall.src_ip,firewall.dst_ip|sort by sum_|limit 20"}
{"input": "", "instruction": "查找有意义的用户登录事件，使用 case 函数转换 LogonType_decimal为类型文本，并将分别存在的远端和本地 IP 地址作为 IP4 字段展示，最终保留时间、用户名、登录类型、IP4、计算机名等列", "output": "ComputerName:* appname:\"UserLogonV8-v02\" NOT UserName:\"DWM*\" NOT UserName:\"UMFD*\" NOT LogonType_decimal:0 NOT LogonType_decimal:5 | eval logon_type = case(LogonType_decimal==2,\"Interactive\", LogonType_decimal==3,\"Network\", LogonType_decimal==4,\"BATCH\", LogonType_decimal==5,\"service\", LogonType_decimal==6,\"Proxy\", LogonType_decimal==7,\"Unlock\", LogonType_decimal==8,\"Network_Clearatext\", LogonType_decimal==9,\"New_credentials\", LogonType_decimal==10,\"Remote Interfactive\", LogonType_decimal==11,\"cached_interactive\", LogonType_decimal==12,\"cached_remote_interactive\", LogonType_decimal==13,\"Cached_unlock\", default,\"error\")| eval IP4 = coalesce(RemoteAddressIP4, LocalAddressIP4)| table timestamp UserName logon_type IP4 ComputerName"}
{"input": "", "instruction": "Linux操作系统审计_系统重启设备", "output": "appname:linux tag:boot |eval up_time1=case(len(up_time)==16,parsedate(up_time,\"yyyy-MM-dd HH:mm\"),len(up_time)==12,parsedate(up_time,\"MMM dd HH:mm\"))  |eval dura=tolong(abs(now()-up_time1)/1000/60)  |stats min(dura) as _min by ip,hostname,up_time "}
{"input": "平均阻塞耗时_单位毫秒_5min。", "instruction": "informix日志数据，编写查询语句实现如下分析场景", "output": "starttime=\"-5m/m\" endtime=\"now/m\"\nappname:informix tag:online_log informix.block_time:<100 |stats avg(informix.block_time) as avg_block_time |eval aaa=avg_block_time*1000"}
{"input": "was_full_gc平均耗时秒。", "instruction": "ibmjdk7_was_gc数据，编写查询语句实现如下分析场景", "output": "appname:gc tag:ibm_was  jvm_gc.type:global |stats avg(jvm_gc.cost) as avg_cost|eval aaa=avg_cost/1000"}
{"input": "清除成功率。", "instruction": "officescan防毒墙数据，编写查询语句实现如下分析场景", "output": "appname:antivirus_gateway tag:officescan antivirus.threat_name:* \n|eval result=if(antivirus.result==\"1\",1,0)\n|stats sum(result) as success,count() as cnt |eval all=success/cnt"}
{"input": "交易成功率。", "instruction": "zsns 应用的tomcat业务数据，编写查询语句实现如下分析场景", "output": "appname:zsns tomcat.event_type:*响应报文\ntomcat.event_type:*${type}*\n|eval succ=if(tomcat.service.head.rspCode == 200,1,0) | stats sum(succ) as success,count() as cnt |eval p=success/cnt"}
{"input": "tcp状态分布。将 proto 和 state 拼一起，然后统计top10。", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:process process.local_addr:* process.proto:tcp|eval t=process.proto+\"_\"+process.state | top 10 t"}
{"input": "进程udp连接数top10。", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "* AND appname:process process.local_addr:* process.proto:udp |eval t=process.pid+\"_\"+process.program_name|top 10 t"}
{"input": "进程tcp建立连接数top10。", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "appname:process process.local_addr:* process.proto:tcp process.state:ESTABLISHED |eval t=process.pid+\"_\"+process.program_name|top 10 t"}
{"input": "进程tcp监听数top10。", "instruction": "linux性能数据，编写查询语句实现如下分析场景", "output": "appname:process process.local_addr:* process.proto:tcp process.state:LISTEN |eval t=process.pid+\"_\"+process.program_name|top 10 t"}
{"input": "梭子鱼_waf_源ip访问流量top20。", "instruction": "WAF_梭子鱼数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:barracuda waf.bytes_in:*|eval value=tolong(waf.bytes_in)|stats sum(value) as len by waf.src_ip|sort by len|limit 20"}
{"input": "内部访问连接占比水球图，计算 dst.geo.country访问量排名第一的比例即为内部访问比例。将 percent 除以 100 转换为小数。。", "instruction": "Sonic防火墙数据，编写查询语句实现如下分析场景", "output": "(* AND appname:firewall) AND tag:sonicwall  | top 1 firewall.dst.geo.country\t| fields percent |eval percent=percent/100"}
{"input": "网关交易成功率，按交易响应码统计数量最多的就是成功交易，占比除以 100。", "instruction": "网关系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':connector |top 1 connector.info2.retCode|eval rate=percent/100"}
{"input": "梭子鱼_waf_源ip访问流量top10。", "instruction": "WAF_梭子鱼数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:barracuda waf.bytes_in:*|eval value=tolong(waf.bytes_in)|stats sum(value) as len by waf.src_ip|sort by len|limit 10"}
{"input": "", "instruction": "IIS 服务器的目的IP接收流量TOP10", "output": "appname:middleware tag:iis |eval out = tolong(middleware.bytes_out)|stats sum(out) as len by middleware.dst_ip|sort by len|limit 10"}
{"input": "", "instruction": "IIS 服务器的来源IP发送流量TOP10", "output": "appname:middleware tag:iis |eval in  = tolong(middleware.bytes_in)|stats sum(in) as len by middleware.src_ip|sort by len|limit 10"}
{"input": "来源IP发送流量TOP10。", "instruction": "middleware_microsoft_iis数据，编写查询语句实现如下分析场景", "output": "appname:middleware tag:iis |eval in  = tolong(middleware.bytes_in)|stats sum(in) as len by middleware.src_ip|sort by len|limit 10"}
{"input": "目的IP接收流量TOP10。", "instruction": "middleware_microsoft_iis数据，编写查询语句实现如下分析场景", "output": "appname:middleware tag:iis |eval out = tolong(middleware.bytes_out)|stats sum(out) as len by middleware.dst_ip|sort by len|limit 10"}
{"input": "连接流量TOP20。", "instruction": "天融信防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:tos firewall.sent:*|eval sent=tolong(firewall.sent)|stats sum(sent) as sum_ by firewall.src_ip,firewall.dst_ip|sort by count_|limit 20"}
{"input": "收包最多主机TOP10。", "instruction": "天融信防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:tos firewall.type:conn|eval inpkt=tolong(firewall.inpkt)|stats sum(inpkt) as sum_ by firewall.dst_ip|sort by sum_|limit 10"}
{"input": "接收字节数TOP10。", "instruction": "天融信防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:tos firewall.type:conn|eval rcvd=tolong(firewall.rcvd)|stats sum(rcvd) as sum_ by firewall.dst_ip|sort by sum_|limit 10"}
{"input": "发送字节量TOP10。", "instruction": "天融信防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:tos firewall.type:conn|eval sent=tolong(firewall.sent)|stats sum(sent) as sum_ by firewall.src_ip|sort by sum_|limit 10"}
{"input": "发包最多主机TOP10。", "instruction": "天融信防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:tos firewall.type:conn|eval outpkt=tolong(firewall.outpkt)|stats sum(outpkt) as sum_ by firewall.src_ip|sort by sum_|limit 10"}
{"input": "使用流量TOP20。", "instruction": "surfilter_ac数据，编写查询语句实现如下分析场景", "output": "appname:ac tag:surfilter ac.event_type:statistic_traffic\n|eval up=tolong(ac.kv.up)  |eval down=tolong(ac.kv.down) |eval all=up+down  \n|stats sum(all) as total_ by ac.app_name | sort by total_ | limit 20"}
{"input": "用户流量使用TOP20。", "instruction": "surfilter_ac数据，编写查询语句实现如下分析场景", "output": "appname:ac tag:surfilter ac.event_type:statistic_traffic\n|eval up=tolong(ac.kv.up)  |eval down=tolong(ac.kv.down) |eval all=up+down  \n|stats sum(all) as total_ by ac.user | sort by total_ | limit 20"}
{"input": "连接流量TOP20。", "instruction": "冠群防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:newdon firewall.sent:*|eval sent=tolong(firewall.sent)|stats sum(sent) as sum_ by firewall.src_ip,firewall.dst_ip|sort by sum_|limit 20"}
{"input": "接收字节数TOP10。", "instruction": "冠群防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:newdon firewall.type:conn OR firewall.type:traffic|eval rcvd=tolong(firewall.rcvd)|stats sum(rcvd) as sum_ by firewall.dst_ip|sort by sum_|limit 10"}
{"input": "收包最多主机TOP10。", "instruction": "冠群防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:newdon firewall.type:conn OR firewall.type:traffic firewall.rcvd_pkt:* |eval inpkt=tolong(firewall.rcvd_pkt)|stats sum(inpkt) as sum_ by firewall.dst_ip|sort by sum_|limit 10"}
{"input": "发包最多主机TOP10。", "instruction": "冠群防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:newdon firewall.type:conn  OR firewall.type:traffic firewall.rcvd_pkt:* |eval outpkt=tolong(firewall.sent_pkt)|stats sum(outpkt) as sum_ by firewall.src_ip|sort by sum_|limit 10"}
{"input": "发送字节量TOP10。", "instruction": "冠群防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:newdon firewall.type:conn OR firewall.type:traffic|eval sent=tolong(firewall.sent)|stats sum(sent) as sum_ by firewall.src_ip|sort by sum_|limit 10"}
{"input": "当日在线时长TOP10，过滤ac.action字段值为下线的日志，以 yyyy-MM-dd HH:mm:ss 格式解析 ac.time.stime和ac.time.etime后，二者相减得到单次在线时长 duration。然后按ac.src_ip分组统计duration 的和作为总时长sum_，从大到小排序，并取前 10 名。最后将总时长sum_按小时展示。", "instruction": "奇安信AC数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:ac tag:qianxin ac.log_type:auth ac.action:\"下线\" \n| eval st=parsedate(ac.time.stime,\"yyyy-MM-dd HH:mm:ss\") \n| eval et=parsedate(ac.time.etime,\"yyyy-MM-dd HH:mm:ss\")\n|eval duration=et-st | stats sum(duration) as sum_ by ac.src_ip | sort by sum_ | limit 10 | eval duration=sum_/1000/60/60"}
{"input": "", "instruction": "敏感命令", "output": "appname:linux  AND audit.msg.ser:shell_cmd AND (audit.msg.command:service* OR audit.msg.command:rm* OR audit.msg.command:export* OR audit.msg.command:kill*) | stats count() as error by ip | eval type=\"敏感命令\""}
{"input": "索引内可用字段为：audit.command,audit.staus,audit.dst,audit.status,audit.payload,audit.level,audit.src,audit.app,audit.rule,audit.data,audit.up,audit.msg,audit.rules,audit.alert,audit.database。请选择实际需要的字段使用。。", "instruction": "linux_疑似暴力破解", "output": "appname:audit AND (\"Failed password for\")   | eval src=case(audit.msg.ser==\"su-l\",audit.msg.ruser,audit.msg.ser==\"sshd\",audit.msg.src_ip)  | stats count() as fail by ip,hostname,audit.msg.ser,audit.msg.user,src "}
{"input": "", "instruction": "linux认证失败统计", "output": "appname:audit AND (\"Failed password for\"  OR \"authentication failure\") | eval src=case(audit.msg.ser==\"su-l\",audit.msg.ruser,audit.msg.ser==\"sshd\",audit.msg.src_ip) | stats count() as fail by ip,hostname,audit.msg.ser,audit.msg.user,src "}
{"input": "", "instruction": "linux越权审计", "output": "appname:audit AND audit.msg.ser:sudo | eval result=if(empty(audit.msg.result),\"success\",audit.msg.result) | stats count() as sudo by ip,hostname,audit.msg.user,audit.msg.pwd,audit.msg.command,result "}
{"input": "linux认证失败统计。", "instruction": "linux审计数据，编写查询语句实现如下分析场景", "output": "appname:audit AND (\"Failed password for\"  OR \"authentication failure\") | eval src=case(audit.msg.ser==\"su-l\",audit.msg.ruser,audit.msg.ser==\"sshd\",audit.msg.src_ip) | stats count() as fail by ip,hostname,audit.msg.ser,audit.msg.user,src "}
{"input": "linux越权审计。", "instruction": "linux审计数据，编写查询语句实现如下分析场景", "output": "appname:audit AND audit.msg.ser:sudo | eval result=if(empty(audit.msg.result),\"success\",audit.msg.result) | stats count() as sudo by ip,hostname,audit.msg.user,audit.msg.pwd,audit.msg.command,result "}
{"input": "首先将时间转换为小时字段，然后赋值一个 time_seg 字段，根据小时字段值的区间分别设置为不同的值，具体的说，当小于 6 时，time_seg 的值赋为 night，小于 12 时赋为 morning，小于 18 时赋为 afternoon，小于 24 时赋为 evening。接着创建 user_group 字段，内容是 apache.geo.country 和 time_seg 的值用下划线拼接起来。最后，按 user_group 分组统计日志数量、apache.resp_time的平均值、apache.resp_time 的 95 分位数。", "instruction": "基于时间段和IP，聚合用户行为", "output": "appname:apache | eval hour=parsedate(timestamp, \"H\") | eval time_seg=case(hour<6,\"night\",hour<12,\"morning\",hour<18,\"afternoon\",hour<24,\"evening\") | eval user_group = apache.geo.country+\"_\"+time_seg | stats count(), avg(apache.resp_time), pct(apache.resp_time, 95) by user_group"}
{"input": "", "instruction": "查询访问日志中get与post方法的比例", "output": "appname:apache | stats count() as total, count(eval(apache.method==\"GET\")) as cnt1, count(eval(apache.method==\"POST\")) as cnt2 |  eval get_pct=round(cnt1*100/total,2), post_pct=round(cnt2*100/total,2)"}
{"input": "健康度。", "instruction": "交换机_cisco_nexus数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:cisco_nexus | stats count() as count_ by switch.level | eval tmp=switch.level*count_/10|stats sum(tmp) as sum_|eval health=(10000-sum_)/10000"}
{"input": "", "instruction": "将appname、tag的值统计，并new一个desc字段，将appname和tag放入", "output": "*| stats count() as ts by appname,tag | eval desc=appname + \"可放入任何字符\"+tag"}
{"input": "Redis最近一天事件数级别分布。", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "starttime=\"-1d\" appname:redis  |eval level=case(redis.level==\"*\", \"Notice\", redis.level==\"#\", \"Warning\", default, \"Unknown\") |stats count() as '事件数' by level"}
{"input": "核心交易笔数。", "instruction": "核心交易系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':ensemble ensemble.trade_type:* |stats count() as cnt|eval aa=cnt+\"笔\""}
{"input": "清算交易笔数。", "instruction": "清算系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':accounting accounting.info2.retCode:* |stats count() as cnt|eval aa=cnt+\"笔\""}
{"input": "", "instruction": "从rzyxj中查询coredump文件检查", "output": "appname:rzyxj tag:beaver_coredump |dedup 1 ip |stats count() as cnt by ip,core_dump |eval status=if(core_dump==\"core\",\"正常\",\"异常\")"}
{"input": "健康度，计算规则是： 每个级别的分值=事件级别*对应数量/10；然后求各级别分值总和后，计算其和 800 的差值。", "instruction": "交换机_cisco_ios数据，编写查询语句实现如下分析场景", "output": "appname:switch tag:cisco_ios  | stats count() as count_ by switch.level | eval tmp=switch.level*count_/10 |stats sum(tmp) as sum_|eval health=(800-sum_)/1000"}
{"input": "获取前一分钟从 API 采集到的esxi运行时间指标，转换为天数。", "instruction": "VMware_Esxi监控数据，编写查询语句实现如下分析场景", "output": "starttime=\"-2m\" endtime=\"-1m\" appname:esxi tag:api esxi.metric:esxi.uptime  | stats count() by esxi.tags.host,esxi.value|eval time=tolong(esxi.value)| eval time_=time/3600/24|eval uptime=floor(time_)"}
{"input": "接入情况分布。", "instruction": "联软终端控制数据，编写查询语句实现如下分析场景", "output": "appname:leagsoft tag:tc | stats count() as cnt by tc.msg.kv.straccessfailedcode|eval result=if(tc.msg.kv.straccessfailedcode==\"0\",\"接入成功\",\"接入失败\")"}
{"input": "交易详情查询。", "instruction": "对银联前置(cupp)系统数据，进行如下统计", "output": "appname:cupp tag:swt (tranceno:${tranceno} OR msgid:${msgid} OR JYLS_FD_ACCTOUT:${acctout}) JYLS_FD_INFO5:* \"处理完成\"| eval rtncode=case(!empty(A9000439),A9000439,!empty(A9000028),A9000028,default,\"无\")| eval rtnmsg=case(!empty(A9000443),A9000443,!empty(A9000029),A9000029,!empty(rtnmsg),rtnmsg,default,\"无\")| eval A9001032=if(!empty(A9001032),A9001032,\"无\")| eval A9000189=if(!empty(A9000189),A9000189,\"无\")| stats count() as cnt by timestamp,msgid,trancode,tranceno,A9000189,A9001032,JYLS_FD_ACCTOUT,JYLS_FD_INFO5,rtncode,rtnmsg,cost "}
{"input": "冲正原交易。", "instruction": "查询银联前置(cupp)系统数据，进行如下统计", "output": "appname:cupp tag:swt ${TELLER_SNO} JYLS_FD_INFO5:* \"处理完成\"| eval rtncode=case(!empty(A9000439),A9000439,!empty(A9000028),A9000028,default,\"无\")| eval rtnmsg=case(!empty(A9000443),A9000443,!empty(A9000029),A9000029,!empty(rtnmsg),rtnmsg,default,\"无\")| eval A9001032=if(!empty(A9001032),A9001032,\"无\")| eval A9000189=if(!empty(A9000189),A9000189,\"无\")| stats count() as cnt by timestamp,msgid,trancode,tranceno,A9000189,A9001032,JYLS_FD_ACCTOUT,JYLS_FD_INFO5,rtncode,rtnmsg,cost "}
{"input": "借记来账异常结束详情(tranCode 为BUP03058)，搜索 step 值为 5，info 值为正常结束的日志，对 emesg 字段为空的内容填充为未知错误。根据 node、emesg 和 seqNo 分组统计，并将每行结果通过 map 命令传递给origrecver为402191009992的搜索子查询，按 msgid 和 node、emesg 分组统计，输出除 cnt 以外的其他字段。", "instruction": "查询农信银支付清算系统(mps)数据，进行如下统计", "output": "tranCode:BUP03058 step:5 info:正常结束| fillnull value=\"未知错误\" emesg| stats count() as cnt by node,emesg,seqNo|  map \"appname:mps seqNo:$seqNo$ msgid:* origrecver:402191009992| eval node=$node$| eval emesg=$emesg$| stats count() as cnt by msgid,node,emesg\"| fields -cnt"}
{"input": "贷记来账异常结束详情(tranCode 为BUP03059)，搜索 step 值为 5，info 值为正常结束的日志，对 emesg 字段为空的内容填充为未知错误。根据 node、emesg 和 seqNo 分组统计，并将每行结果通>过 map 命令传递给origrecver为402191009992的搜索子查询，按 msgid 和 node、emesg 分组统计，输出除 cnt 以外的其他字段。", "instruction": "查询农信银支付清算系统(mps)数据，进行如下统计", "output": "tranCode:BUP03059 step:5 info:正常结束| fillnull value=\"未知错误\" emesg| stats count() as cnt by node,emesg,seqNo|  map \"appname:mps seqNo:$seqNo$ msgid:* origrecver:402191009992| eval node=$node$| eval emesg=$emesg$| stats count() as cnt by msgid,node,emesg\"| fields -cnt"}
{"input": "疑似端口扫描_目的ip，展示前 10 名。", "instruction": "dell防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:dell \"scan detected\" | eval value = firewall.dst.geo.ip+\"_\"+firewall.dst.geo.city+\"_\"+firewall.dst.geo.isp|stats count() by value |limit 10"}
{"input": "疑似端口扫描_源ip，展示前 10 名。", "instruction": "dell防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:dell \"scan detected\" | eval value = firewall.src.geo.ip+\"_\"+firewall.src.geo.city+\"_\"+firewall.src.geo.isp|stats count() by value |limit 10"}
{"input": "丢弃事件目的ip占比前 10 名。", "instruction": "sonicwall防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:sonicwall (firewall.pri:1  OR firewall.pri:0) \"dropped\"|eval aaa=firewall.dst.geo.city+\"_\"+firewall.dst.geo.isp|stats count() as count_1 by firewall.dst.geo.ip,aaa|sort by count_1|limit 10"}
{"input": "丢弃事件源ip占比前 10 名。", "instruction": "sonicwall防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:sonicwall (firewall.pri:1  OR firewall.pri:0) \"dropped\"|eval aaa=firewall.src.geo.city+\"_\"+firewall.src.geo.isp|stats count() as count_1 by firewall.src.geo.ip,aaa|sort by count_1|limit 10"}
{"input": "扫描事件源ip占比前 10 名。", "instruction": "sonicwall防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:sonicwall (firewall.pri:1  OR firewall.pri:0) \"scan detected\"|eval aaa=firewall.src.geo.city+\"_\"+firewall.src.geo.isp|stats count() as count_1 by firewall.src.geo.ip,aaa|sort by count_1|limit 10"}
{"input": "扫描事件目的ip占比前 10 名。", "instruction": "sonicwall防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:sonicwall (firewall.pri:1  OR firewall.pri:0) \"scan detected\"|eval aaa=firewall.dst.geo.city+\"_\"+firewall.dst.geo.isp|stats count() as count_1 by firewall.dst.geo.ip,aaa|sort by count_1|limit 10"}
{"input": "拒绝源ip占比前 10 名。", "instruction": "sonicwall防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:sonicwall  \"denied\"|eval aaa=firewall.src.geo.city+\"_\"+firewall.src.geo.isp|stats count() as count_1 by firewall.src.geo.ip,aaa|sort by count_1|limit 10"}
{"input": "拒绝目的ip占比前 10 名。", "instruction": "sonicwall防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:sonicwall  \"denied\"|eval aaa=firewall.dst.geo.city+\"_\"+firewall.dst.geo.isp|stats count() as count_1 by firewall.dst.geo.ip,aaa|sort by count_1|limit 10"}
{"input": "业务请求返回失败占比。", "instruction": "同花顺日志数据，编写查询语句实现如下分析场景", "output": "appname:ths_all ths_all.ANSTYPE:0  NOT ths_all.msg:*.*  NOT ths_all.msg:*;*  NOT ths_all.msg:\"-\" NOT ths_all.msg:\":\"\n|eval aaa=tostring(ths_all.msg) \n|eval bbb=trim(aaa)\n| stats count() as ccc by bbb\n|sort by ccc"}
{"input": "丢弃信息或包_目的ip_top10。", "instruction": "dell防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:dell \"packet dropped\" | eval value = firewall.dst.geo.ip+\"_\"+firewall.dst.geo.city+\"_\"+firewall.dst.geo.isp|stats count() by value |limit 10"}
{"input": "丢弃信息或包的源ip_top10。", "instruction": "dell防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:dell \"packet dropped\" | eval value = firewall.src.geo.ip+\"_\"+firewall.src.geo.city+\"_\"+firewall.src.geo.isp|stats count()  by value |limit 10"}
{"input": "阻断信息或包_源ip_top10。", "instruction": "dell防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:dell \"blocked\" | eval value = firewall.src.geo.ip+\"_\"+firewall.src.geo.city+\"_\"+firewall.src.geo.isp|stats count()  by value |limit 10"}
{"input": "阻断信息或包_目的ip_top10。", "instruction": "dell防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:dell \"blocked\" | eval value = firewall.dst.geo.ip+\"_\"+firewall.dst.geo.city+\"_\"+firewall.dst.geo.isp|stats count() by value |limit 10"}
{"input": "丢弃事件msg事件等级与协议占比_top10。", "instruction": "sonicwall防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall AND tag:sonicwall \"dropped\" |eval aaa=firewall.pri+\"_\"+firewall.pri_cn+\"_\"+firewall.proto|stats count() as count_1 by aaa,firewall.msg|sort by count_1|limit 10"}
{"input": "端口扫描事件msg事件等级与协议占比_top10。", "instruction": "sonicwall防火墙日志数据，编写查询语句实现如下分析场景", "output": "\nappname:firewall AND tag:sonicwall \"scan detected\"\n|eval proto=if(empty(firewall.proto),0,firewall.proto)\n|eval aaa=firewall.pri+\"_\"+firewall.pri_cn+\"_\"+proto|stats count() as count_1 by aaa,firewall.msg|sort by count_1|limit 10"}
{"input": "拒绝事件msg事件等级与协议占比_top10。", "instruction": "sonicwall防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall AND tag:sonicwall \"denied\"\n|eval proto=if(empty(firewall.proto),0,firewall.proto)\n|eval aaa=firewall.pri+\"_\"+firewall.pri_cn+\"_\"+proto|stats count() as count_1 by aaa,firewall.msg|sort by count_1|limit 10"}
{"input": "", "instruction": "aix用户登录TOP10比例", "output": "appname:aix tag:last|eval hu=hostname+\"_\"+aix.user|stats count(hostname) as count_ by hu| sort by count_ |limit 10 "}
{"input": "用户登录TOP10比例。", "instruction": "aix日志数据，编写查询语句实现如下分析场景", "output": "appname:aix tag:last|eval hu=hostname+\"_\"+aix.user|stats count(hostname) as count_ by hu| sort by count_ |limit 10"}
{"input": "", "instruction": "我想问的是，我的应用有多少人使用和下载了吗？总共有多少流量呢？你能帮我把这些数据列出吗？", "output": "appname:ac tag:surfilter ac.event_type:statistic_traffic|eval up=tolong(ac.kv.up)  |eval down=tolong(ac.kv.down) |eval all=up+down  |stats sum(all) as total_ by ac.user | sort by total_ | limit 20"}
{"input": "", "instruction": "我想问最近两天发生在 appname 为 \"firewall\" 和 tag 为 \"newdon\" 的所有事件中，发送流量（sum(sent)）最多的前 20 个 IP 地址是哪些？", "output": "appname:firewall tag:newdon firewall.sent:*|eval sent=tolong(firewall.sent)|stats sum(sent) as sum_ by firewall.src_ip,firewall.dst_ip|sort by sum_|limit 20"}
{"input": "", "instruction": "我想要知道从哪些国家的用户访问了dc防火墙，并按访问量排序，前二十个结果是什么。", "output": "appname:firewall tag:dc   firewall.src.geo.city:private |stats count() as cnt by firewall.src_ip,firewall.dst_ip,firewall.dst.geo.country,firewall.dst.geo.city| eval dst=firewall.dst_ip+\"_\"+firewall.dst.geo.country+\"_\"+firewall.dst.geo.city|eval from=firewall.src_ip|eval to=dst|sort by cnt|limit 20|fields from,to,cnt"}
{"input": "", "instruction": "我想问以下内容：根据上述条件进行数据统计和排序，并返回前 15 个 IP 地址的总风险数量（sum(cnt)）", "output": "appname:hids tag:safedog  hids.event_type:risk |eval cnt=tolong(hids.riskCount)| stats sum(cnt) as cnt by hids.localIp|sort by cnt |limit 15"}
{"input": "", "instruction": "“What was the question that I asked?”而不是“What did Apache logs indicate about referrals from search engines such as Google or Bing?”。根据您提供的查询语句，Apache logs 中有关搜索引擎（如 Google 或 Bing）的反向链接被标记为 `input_type = “organic”`。这意味着可能涉及到与网站上的排名、营销活动或其他因素相关的问题。", "output": "appname:apache | eval input_type=case(apache.referer == \"-\",\"direct\", contains(apache.referer, \"google.com\"),\"organic\", contains(apache.referer, \"bing.com\"),\"organic\", contains(apache.referer, \"baidu.com\"), \"organic\",default,\"social\")"}
{"input": "", "instruction": "我想要知道某台设备的交换机上有哪些接口收发包量统计数据，并计算总和。", "output": "appname:switchperf AND (switchperf.type:ifInNUcastPkts OR switchperf.type:ifInUcastPkts OR switchperf.type:ifOutUcastPkts OR switchperf.type:ifOutNUcastPkts) | stats max(switchperf.value) as _max,min(switchperf.value) as _min by switchperf.devip,switchperf.type,switchperf.ifindex | eval totalpkts=_max-_min | stats sum(totalpkts) as _total"}
{"input": "", "instruction": "网络设备接口数据，编写查询语句实现如下分析场景：单位时段整机网络包进出方向总合统计", "output": "appname:switchperf AND (switchperf.type:ifInNUcastPkts OR switchperf.type:ifInUcastPkts OR switchperf.type:ifOutUcastPkts OR switchperf.type:ifOutNUcastPkts) | stats max(switchperf.value) as _max,min(switchperf.value) as _min by switchperf.devip,switchperf.type,switchperf.ifindex | eval totalpkts=_max-_min | stats sum(totalpkts) as _total"}
{"input": "", "instruction": "我想询问名称为“Firewall”、标记中包含“Fortinet”且其类型为“Traffic”，同时源地和目的地国家为私人网络（private）的信息。", "output": "(appname:firewall  tag:fortinet AND firewall.type:traffic AND firewall.src.geo.country:private) |eval sent=tolong(firewall.sentbyte) |stats sum(sent) as sum_  by  firewall.src_ip,firewall.dst_ip| sort by sum_ | limit 100"}
{"input": "", "instruction": "我想询问的是“在哪个时间段内发生的Apache错误”。根据提供的信息和我的推理能力，您的意图应该是这样的：1. 使用`eval`函数将字段`timestamp`解析为日期类型并生成新字段`hour`。2. 根据`hour`的值对数据进行分组，分别计算出每小时、早上/下午/傍晚/晚上四个时间段中的访问量。3. 将结果保存在名为`time_segment`的新字段中。4. 通过`|`符号连接这三条流水线，实现一次数据处理完成后的结果展示。", "output": "appname:apache | eval hour=parsedate(timestamp, \"H\") | eval time_segment=case(hour<6,\"night\",hour<12,\"morning\",hour<18,\"afternoon\",default,\"evening\")"}
{"input": "", "instruction": "我想要知道最近十条 Huawei 系统的告警信息，并将它们分组为不同的等级。请问您需要其他帮助吗？", "output": "appname:switch tag:huawei |eval r=switch.describe+\"_\"+switch.level|top 10 r"}
{"input": "", "instruction": "我想寻找一些关于 VPN（虚拟私人网络）的信息，首先从指定的索引和类型中检索符合条件的事件，然后使用 `table` 命令将结果以表格形式显示，并选择 `_time` 和 `user` 字段作为列，最后使用 `eval` 命令将描述修改为 “VPN: A new TCP tunnel has been established successfully”。", "output": "appname:VPN tag:array \"VPN: A new TCP tunnel has been established successfully\" |table time,user |eval desc=\"VPN: A new TCP tunnel has been established successfully\" "}
{"input": "", "instruction": "我想要知道主机的数量和分布情况。你能告诉我吗？", "output": "appname:incloud_sphere tag:host |stats dc(host) as cnt |eval cnt=tolong(cnt)"}
{"input": "", "instruction": "最近一分钟内的 MySQL 连接数量。", "output": "appname:rzyxt tag:mysql_metrics   |eval mysql_connection_num=tolong(mysql_connection_num) |table mysql_connection_num |limit 1 "}
{"input": "", "instruction": "我想问有关manager的性能监控数据中，MySQL数据库连接数量发生异常增长的问题。正在寻找“manager”应用名称下，带有“mysql_metrics”标签的最近一条记录中的 MySQL 连接数量（以“mysql_connection_num”为指标），并对该值进行转换后显示在表格中，同时只展示一行结果，并将其限制为最新的一条记录。", "output": "appname:manager tag:mysql_metrics   |eval mysql_connection_num=tolong(mysql_connection_num) |table mysql_connection_num |limit 1 "}
{"input": "", "instruction": "我想要知道 MySQL 服务的连接数量和其他prometheus指标情况。", "output": "appname:promethus tag:mysql_metrics   |eval mysql_connection_num=tolong(mysql_connection_num) |table mysql_connection_num |limit 10 "}
{"input": "", "instruction": "Prometheus的MySQL指标数据，并希望通过对这些指标进行分析来发现问题或解决问题。寻找与“mysql_metrics”标签和名称以“mysql_connection_num”开头的所有时间序列数据。此外，还使用了一个名为“tolong()”的函数将字段“mysql_connection_num”的值转换为长整数类型。最后，结果被限制为前50行。", "output": "appname:promethus tag:mysql_metrics   |eval mysql_connection_num=tolong(mysql_connection_num) |table mysql_connection_num |limit 50 "}
{"input": "", "instruction": "我想问有关manager的性能指标数据，标签中包含“MySQL metrics”。返回最近五分钟内 MySQL 连接数量的统计信息。", "output": "appname:manager tag:mysql_metrics   |eval mysql_connection_num=tolong(mysql_connection_num) |table mysql_connection_num |limit 5 "}
{"input": "", "instruction": "我想要知道有关 Ansible 应用的 ulimit 配置文件的 IP 地址、限制值和状态的信息。请列出所有不重复的 IP 地址", "output": "appname:ansible tag:ulimit_config |dedup 1 ip |table ip,ulimit_config |sort by +ip |eval status=if(ulimit_config==\"655350\",\"正常\",\"异常\") "}
{"input": "", "instruction": "我想询问以下内容：> 查询防火墙的ToS流量和源IP、目的IP分别为多少，并按数量从大到小排序，最多返回20条记录。如果我的理解有误或您还有其他需要帮助的问题，欢迎随时向我提出。", "output": "appname:firewall tag:tos firewall.sent:*|eval sent=tolong(firewall.sent)|stats sum(sent) as sum_ by firewall.src_ip,firewall.dst_ip|sort by count_|limit 20"}
{"input": "", "instruction": "我想询问 Firewall 应用的新用户 Don 的会话数据，并仅显示源 IP 和目的 IP 地址以及总发送字节数排名前 20 个的记录。", "output": "appname:firewall tag:newdon firewall.sent:*|eval sent=tolong(firewall.sent)|stats sum(sent) as sum_ by firewall.src_ip,firewall.dst_ip|sort by sum_|limit 20"}
{"input": "", "instruction": "我想要知道 IBM WebSphere Application Server (WAS) 中全局垃圾回收的平均耗时为多少，并将其转换为秒后，赋值给变量 `aaa`。", "output": "appname:gc tag:ibm_was  jvm_gc.type:global |stats avg(jvm_gc.cost) as avg_cost|eval aaa=avg_cost/1000"}
{"input": "", "instruction": "我想问“Antivirus Gateway”的运行状况和安全性的信息，它是否在扫描办公室中的病毒并进行反恶意软件检查，如果检测到威胁的话会怎么做？", "output": "appname:antivirus_gateway tag:officescan antivirus.threat_name:* |eval result=if(antivirus.result==\"1\",1,0)|stats sum(result) as success,count() as cnt |eval all=success/cnt"}
{"input": "", "instruction": "我想跟踪一系列的网络通信，这些通信都是由同样的程序（appname）发起的，并且使用UDP协议进行传输。你还要求在结果中只显示前十个最高的进程（根据某种评分）。", "output": "* AND appname:process process.local_addr:* process.proto:udp |eval t=process.pid+\"_\"+process.program_name|top 10 t"}
{"input": "", "instruction": "我想问有关某些应用的TCP连接信息吗？如果这就是你的目的，那么我可以告诉您以下这些信息：在过去一小时内，该应用（根据您的提供的信息）曾经启动了十个进程，它们的本地地址为*（星号），协议为TCP，状态为ESTABLISHED。此外，为了能够更好地理解这些进程之间的关系和作用，我还将每个进程与其关联的程序名称相加以生成新的列名，并按这个新列排序，从而得到了前十个最活跃的进程。", "output": "appname:process process.local_addr:* process.proto:tcp process.state:ESTABLISHED |eval t=process.pid+\"_\"+process.program_name|top 10 t"}
{"input": "", "instruction": "我想问有关某一应用的TCP监听端口信息吗？这个应用的名称为“appname”，其进程中的本地地址为“process.local_addr”、协议类型为“process.proto”且处于Listen状态（即“process.state”为“LISTEN”）。然后使用eval将进程ID和程序名合并成一个字段t并排序后取前十个作为结果返回。", "output": "appname:process process.local_addr:* process.proto:tcp process.state:LISTEN |eval t=process.pid+\"_\"+process.program_name|top 10 t"}
{"input": "", "instruction": "我想要知道connector的错误率在哪个返回码最高。", "output": "* AND  'appname':connector |top 1 connector.info2.retCode|eval rate=percent/100"}
{"input": "", "instruction": "我想问最近IIS中间件有哪些来源 IP产生了最多的访问流量，并按数据流量大小对它们进行排序。", "output": "appname:middleware tag:iis |eval in  = tolong(middleware.bytes_in)|stats sum(in) as len by middleware.src_ip|sort by len|limit 10"}
{"input": "", "instruction": "我想问最近一周中有哪些应用名称为“中间件”并且包含标签“IIS”的主机发送或接收到的最大数据包数量排名前十的列表。", "output": "appname:middleware tag:iis |eval out = tolong(middleware.bytes_out)|stats sum(out) as len by middleware.dst_ip|sort by len|limit 10"}
{"input": "", "instruction": "我想询问以下内容：查询天融信防火墙目的 IP 和总流量的 top 10 数据。", "output": "appname:firewall tag:tos firewall.type:conn|eval inpkt=tolong(firewall.inpkt)|stats sum(inpkt) as sum_ by firewall.dst_ip|sort by sum_|limit 10"}
{"input": "", "instruction": "我想询问tos防火墙应用的流量统计信息，并要求显示最近十个发送方IP地址和总共接收到的流量之和。", "output": "appname:firewall tag:tos firewall.type:conn|eval rcvd=tolong(firewall.rcvd)|stats sum(rcvd) as sum_ by firewall.dst_ip|sort by sum_|limit 10"}
{"input": "", "instruction": "我想问天融信防火墙应用的一些统计信息，包括总数据包数和发送源 IP 的前 10 个用户。", "output": "appname:firewall tag:tos firewall.type:conn|eval sent=tolong(firewall.sent)|stats sum(sent) as sum_ by firewall.src_ip|sort by sum_|limit 10"}
{"input": "", "instruction": "我的问题可能涉及到一些网络流量监控和分析的问题，是哪款应用软件的下载和上传总量排名第1-20大吗？", "output": "appname:ac tag:surfilter ac.event_type:statistic_traffic|eval up=tolong(ac.kv.up)  |eval down=tolong(ac.kv.down) |eval all=up+down  |stats sum(all) as total_ by ac.app_name | sort by total_ | limit 20"}
{"input": "", "instruction": "我想询问关于newdon应用的防火墙日志中有关新用户和流量的信息，并要求我为您生成Top 10发送数据的IP地址列表。", "output": "appname:firewall tag:newdon firewall.type:conn OR firewall.type:traffic|eval rcvd=tolong(firewall.rcvd)|stats sum(rcvd) as sum_ by firewall.dst_ip|sort by sum_|limit 10"}
{"input": "", "instruction": "我想问有关newdon应用的网络防火墙日志中，根据用户发送和接收的数据包数量进行排序并返回前十个数据包的信息。", "output": "appname:firewall tag:newdon firewall.type:conn OR firewall.type:traffic firewall.rcvd_pkt:* |eval inpkt=tolong(firewall.rcvd_pkt)|stats sum(inpkt) as sum_ by firewall.dst_ip|sort by sum_|limit 10"}
{"input": "", "instruction": "我想表达的意思是：在`firewall`表中搜索包含`newdon`标签且流量或连接类型为`conn`或`traffic`的记录，并按发送流量进行排序，返回前10个结果。", "output": "appname:firewall tag:newdon firewall.type:conn OR firewall.type:traffic|eval sent=tolong(firewall.sent)|stats sum(sent) as sum_ by firewall.src_ip|sort by sum_|limit 10"}
{"input": "", "instruction": "我想寻找有关某台服务器上失败的密码登录尝试的信息：查找包含“Failed password for”字符串的所有记录。然后，它将执行评估步骤，以确定源 IP、SSH 用户和 su 命令使用的用户名称等信息。最后，它使用统计函数计算每个 IP 和主机名出现的失败登录次数以及所用的身份验证方法（ssh 或 su）。", "output": "appname:audit AND (\"Failed password for\")   | eval src=case(audit.msg.ser==\"su-l\",audit.msg.ruser,audit.msg.ser==\"sshd\",audit.msg.src_ip)  | stats count() as fail by ip,hostname,audit.msg.ser,audit.msg.user,src "}
{"input": "", "instruction": "我想问在日志易中应该如何搜索sudo 操作的审计日志，并根据返回结果是否为空，来判断 sudo 操作是否成功。最后按照 ip 地址、操作账号、sudo 命令和执行结果是否成功生成统计表格。", "output": "appname:audit AND audit.msg.ser:sudo | eval result=if(empty(audit.msg.result),\"success\",audit.msg.result) | stats count() as sudo by ip,audit.msg.user,audit.msg.pwd,audit.msg.command,result "}
{"input": "", "instruction": "用户所在国家/地区在上午、下午、晚上、凌晨的四个时段中，使用 Apache 服务的次数，以及响应时间中位数和 95 分位数分别为多少？", "output": "appname:apache | eval hour=parsedate(timestamp, \"H\") | eval time_seg=case(hour<6,\"night\",hour<12,\"morning\",hour<18,\"afternoon\",hour<24,\"evening\") | eval user_group = apache.geo.country+\"_\"+time_seg | stats count(), pct(apache.resp_time, 50, 95) by user_group"}
{"input": "", "instruction": "我在询问关于 Apache web 服务器的访问统计信息，具体包括总访问量、以 GET 方法为主的访问数量和以 POST 方法为主的访问数量，并计算出这两种方法所占比例。", "output": "appname:apache | stats count() as total, count(eval(apache.method==\"GET\")) as cnt1, count(eval(apache.method==\"POST\")) as cnt2 |  eval get_pct=round(cnt1*100/total,2), post_pct=round(cnt2*100/total,2)"}
{"input": "", "instruction": "我想要知道有多少个 Cisco Nexus 设备的运行状态是 warning 和 critical 的，并且计算出所有这些设备累计的严重程度。", "output": "appname:switch tag:cisco_nexus | stats count() as count_ by switch.level | eval tmp=switch.level*count_/10|stats sum(tmp) as sum_|eval health=(10000-sum_)/10000"}
{"input": "", "instruction": "希望了解以下信息：1、在 appname 为 \"switch\" 和 tag 为 \"cisco_ios\" 的日志文件中，统计各个交换机级别 (switch.level) 下的登录用户数量并计算出每个级别下用户总数占比；2、将上一步得到的结果进行汇总，计算所有级别下的用户总量和，再减去所有级别下的用户总量与 800 之比值所得的值作为该设备整体运行状况分数。", "output": "appname:switch tag:cisco_ios  | stats count() as count_ by switch.level | eval tmp=switch.level*count_/10 |stats sum(tmp) as sum_|eval health=(800-sum_)/1000"}
{"input": "", "instruction": "我想在leagsoft软件的 tc 标签日志中按tc.msg.kv.straccessfailedcode字段值进行分组统计，并创建一个 result 字段，当tc.msg.kv.straccessfailedcode为 0 时，result 字段值为“接入成功”，否则为“接入失败”。", "output": "appname:leagsoft tag:tc | stats count() as cnt by tc.msg.kv.straccessfailedcode|eval result=if(tc.msg.kv.straccessfailedcode==\"0\",\"接入成功\",\"接入失败\")"}
{"input": "", "instruction": "从索引 firewall 中搜索包含 `appname:\"firewall\"` 和 `tag:dell` 的所有记录，同时message中包含“scan detected”。然后对这些记录执行以下操作：1. 使用 eval 命令将字段 firewall.dst.geo.ip、firewall.dst.geo.city、firewall.dst.geo.isp 拼接起来，生成新的字段 ip_city_isp；2. 使用 stats 命令计算每个不同的值（即 ip_city_isp）出现的次数并统计总数；3. 使用 limit 命令限制返回前 10 个结果，按降序排列 total 字段。", "output": "appname:firewall tag:dell \"scan detected\" | eval value = firewall.dst.geo.ip+\"_\"+firewall.dst.geo.city+\"_\"+firewall.dst.geo.isp|stats count() by value |limit 10"}
{"input": "", "instruction": "首先，我们使用 `appname: firewall` 来筛选出与防火墙应用相关的所有事件。接下来，我们使用 `tag: dell` 来筛选出包含“Dell”标记的所有事件。然后，我们使用引号括起来的字符串 `\"scan detected\"` 以便仅包括那些含有该字符串的消息。最后，我们使用 `eval` 命令计算新的字段值并创建名为 “value”的值，该值由源IP地址、城市和ISP组合而成。此外，我们还可以使用 `stats` 命令生成统计数据", "output": "appname:firewall tag:dell \"scan detected\" | eval value = firewall.src.geo.ip+\"_\"+firewall.src.geo.city+\"_\"+firewall.src.geo.isp|stats count() by value |limit 10"}
{"input": "", "instruction": "我想问的是，在 SonicWall 设备上，有哪些应用被标记为“丢包”的数量最多？这些 IP 是从哪里来的呢？", "output": "appname:firewall tag:sonicwall (firewall.pri:1  OR firewall.pri:0) \"dropped\"|eval aaa=firewall.src.geo.city+\"_\"+firewall.src.geo.isp|stats count() as count_1 by firewall.src.geo.ip,aaa|sort by count_1|limit 10"}
{"input": "", "instruction": "我想问有关 SonicWall Firewall 的应用名称为“Firewall”且包含标记“SonicWall”的日志中，出现了被拒绝的情况的数量统计和排名。", "output": "appname:firewall tag:sonicwall  \"denied\"|eval aaa=firewall.src.geo.city+\"_\"+firewall.src.geo.isp|stats count() as count_1 by firewall.src.geo.ip,aaa|sort by count_1|limit 10"}
{"input": "", "instruction": "我想问以下信息：- 查询 sonicwall 标签下的所有防火墙应用名为“firewall”的访问记录；- 对这些访问记录进行分组依据目的 IP 地址和地区 ISP（互联网服务提供商）对数据聚合；- 根据每个IP地址和ISP对数据的数量排序；- 返回前 10 个数据。", "output": "appname:firewall tag:sonicwall  \"denied\"|eval aaa=firewall.dst.geo.city+\"_\"+firewall.dst.geo.isp|stats count() as count_1 by firewall.dst.geo.ip,aaa|sort by count_1|limit 10"}
{"input": "", "instruction": "我想问有关dell防火墙软件的用户在使用过程中出现的问题，其中涉及到的关键词包括“应用名称：防火墙”、“标签：Dell”和“包丢失”。我将生成以下查询语句：请问这是否符合您需要呢？", "output": "appname:firewall tag:dell \"packet dropped\" | eval value = firewall.dst.geo.ip+\"_\"+firewall.dst.geo.city+\"_\"+firewall.dst.geo.isp|stats count() by value |limit 10"}
{"input": "", "instruction": "从 `firewall` 表中选择源 IP、城市和ISP字段的值，并根据这些值对结果进行分组和计数排序，最终返回前 10个最高频率的记录。", "output": "appname:firewall tag:dell \"packet dropped\" | eval value = firewall.src.geo.ip+\"_\"+firewall.src.geo.city+\"_\"+firewall.src.geo.isp|stats count()  by value |limit 10"}
{"input": "", "instruction": "我想问有关dell防火墙应用的使用情况和流量分析报告", "output": "appname:firewall tag:dell \"blocked\" | eval value = firewall.dst.geo.ip+\"_\"+firewall.dst.geo.city+\"_\"+firewall.dst.geo.isp|stats count() by value |limit 10"}
{"input": "", "instruction": "我想询问以下内容：- firewall应用名称为“SonicWall”的日志中包含了tag为“ dropped ”的信息；- 对这些信息进行评估后生成了一个新的字段aaa，其值为“ firewall.pri + \"_\" + firewall.pri_cn + \"_\" + firewall.proto ”；- 通过统计count()函数并按aaa和firewall.msg进行排序，取出前十条数据；如果以上描述符合你的意思，那么我所要查询的是SonicWall防火墙应用的Dropped包数量排名前十的消息。", "output": "appname:firewall AND tag:sonicwall \"dropped\" |eval aaa=firewall.pri+\"_\"+firewall.pri_cn+\"_\"+firewall.proto|stats count() as count_1 by aaa,firewall.msg|sort by count_1|limit 10"}
{"input": "", "instruction": "我想问的是最近有没有发现过类似于“SonicWall scan detected”这样的消息吗？如果有的话，它们发生的时间分别是什么样子的？", "output": "appname:firewall AND tag:sonicwall \"scan detected\"|eval proto=if(empty(firewall.proto),0,firewall.proto)|eval aaa=firewall.pri+\"_\"+firewall.pri_cn+\"_\"+proto|stats count() as count_1 by aaa,firewall.msg|sort by count_1|limit 10"}
{"input": "", "instruction": "我想询问 SonicWall Firewall 应用中包含“拒绝”标记的事件数目排名前十的协议类型。", "output": "appname:firewall AND tag:sonicwall \"denied\"|eval proto=if(empty(firewall.proto),0,firewall.proto)|eval aaa=firewall.pri+\"_\"+firewall.pri_cn+\"_\"+proto|stats count() as count_1 by aaa,firewall.msg|sort by count_1|limit 10"}
{"input": "", "instruction": "我想问如何根据给定的条件（appname:aix tag:last）生成一段 SPL 查询语句，以获取最近十个访问量最高的主机名和访问次数。", "output": "appname:aix tag:last|eval hu=hostname+\"_\"+aix.user|stats count(hostname) as count_ by hu| sort by count_ |limit 10 "}
{"input": "", "instruction": "我想问的是Informix数据库的平均响应时间在过去五分钟内为多少毫秒？", "output": "starttime=\"-5m/m\" endtime=\"now/m\"appname:informix tag:online_log informix.block_time:<100 |stats avg(informix.block_time) as avg_block_time |eval aaa=avg_block_time*1000"}
{"input": "", "instruction": "我想问的是，今天用户从哪些 IP 下线的，耗时最长的一批次在多少小时内完成的？", "output": "starttime=\"now/d\" appname:ac tag:qianxin ac.log_type:auth ac.action:\"下线\" | eval st=parsedate(ac.time.stime,\"yyyy-MM-dd HH:mm:ss\") | eval et=parsedate(ac.time.etime,\"yyyy-MM-dd HH:mm:ss\")|eval duration=et-st | stats sum(duration) as sum_ by ac.src_ip | sort by sum_ | limit 10 | eval duration=sum_/1000/60/60"}
