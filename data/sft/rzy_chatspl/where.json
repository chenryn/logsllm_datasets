{"input": "", "instruction": "搜索 nginx.url_request.url_mod为 WebPMP 的日志，表格列出 nginx.url_reqeust.url_path，nginx.reqeust_time， nginx.url 字段，注意需要过滤掉Nginx.url字段中以“/WebPMP/Main.aspx”开头的数据", "output": "Nginx.url_request.Url_Mod:WebPMP|table Nginx.url_request.Url_Path,Nginx.request_time,Nginx.url|where match(Nginx.url,\"/WebPMP/Main.aspx.*\")==false"}
{"input": "", "instruction": "linux_当天rsyslog服务关闭", "output": "starttime=\"now/d\" tag:rsyslog_status  | parse \".*(?<status>running)\"   | where status!=\"running\"  | stats dc(ip) as error by ip  | eval type=\"rsyslog关闭\" "}
{"input": "ths_all.GDZH作为交易流水号，做 transaction 交易查询，设定一笔交易最多包括 5 条日志。串联好交易后，只保留交易耗时小于 2000 毫秒的部分", "instruction": "同花顺日志数据，编写查询语句实现如下分析场景", "output": " tag:ths_all | transaction ths_all.GDZH maxevents=5 | where _duration<2000"}
{"input": "Nginx.url_request.url_Mod:WebPMP |parse field=Nginx.url \"(?<aspx>\\S{17})\" where aspx != /WebPMP/Main.aspx |table Nginx.url_request.Url_Path,Nginx.request_time,Nginx.url", "instruction": "需要过滤掉Nginx.url字段中以“/WebPMP/Main.aspx”开头的数据，以下语句为什么不行？", "output": "该语句虽然通过parse提取字段，通过where语句对不等于这个字段的内容进行过滤，但 parse 指令的 field 参数需要从字段的 doc_value 中读数据，而 Nginx.url 字段值长度超过 512 字节，触发索引配置模板中的 ignore_above 显示，没有 doc_value 给 parse 指令提取，因此无法命中数据"}
{"input": "", "instruction": "使用 addinfo 指令获取搜索时间信息，以 inputlookup 搜索举例过滤昨天以后的内容。", "output": "| inputlookup incident_review_lookup| addinfo| eval yesterday=relative_time(now(), \"-1d@d\")| where (time >= yesterday && time <= info_maxtimestamp)"}
{"input": "", "instruction": "查找在特定时间内未登录过的主机。具体方法为：1. 按主机分组统计最早时间和最晚时间；2. 判断最晚时间和当前时刻的差距是否在 30 天内，在 30 天内则赋值 recent 字段为 1，否则为 0；3. 转换各个时间字段的格式为yyyy-MM-dd HH:mm:ss；4. 过滤并只保留第二步判断中为 0 的数据", "output": "* | stats latest(timestamp) as lastTime, earliest(timestamp) as firstTime by hostname | eval recent = if(lastTime > relative_time(now(),\"-30d\"),1,0), realLatest = formatdate(latest,\"yyyy-MM-dd HH:mm:ss\")| eval firstTime=formatdate(firstTime,\"yyyy-MM-dd HH:mm:ss\")| eval lastTime=formatdate(lastTime,\"yyyy-MM-dd HH:mm:ss\")| where recent==0"}
{"input": "", "instruction": "从rzy_internal索引中查询平均耗时大于1毫秒字段提取详情", "output": "_index:rzy_internal tag:parser_stat  parser_stat.id:* |eval parser_id=parser_stat.id |stats sum(parser_stat.total) as total,sum(parser_stat.success) as success,sum(parser_stat.cost_us) as total_cost_us by parser_stat.name |eval fail=total - success |eval avg_cost_us = todouble(format(\"%.4f\",total_cost_us/total/1000)) |where avg_cost_us > 1 |sort by avg_cost_us |fields parser_stat.name,total,success,fail,avg_cost_us |rename parser_stat.name as \"字段提取名称\",total as \"总处理量\",success as \"处理成功\",fail as \"处理失败\",avg_cost_us as \"平均耗时(毫秒)\""}
{"input": "会话超时详情。过滤hac.det.class字段值为SESSION_END的日志，按yyyy-MM-dd HH:mm:ss格式转换hac.det.start_time和hac.det.end_time字段内容，注意使用 UTC 时区。然后二者相减得到会话耗时的毫秒数，并转换为分钟数，过滤其中大于 600 分钟的记录。", "instruction": "新HAC堡垒机审计数据，编写查询语句实现如下分析场景", "output": "tag:hac hac.det.class:SESSION_END\n| eval start_time=parsedate(hac.det.start_time, \"yyyy-MM-dd HH:mm:ss\", \"UTC\"),end_time=parsedate(hac.det.end_time, \"yyyy-MM-dd HH:mm:ss\", \"UTC\"),duration=(end_time-start_time)/1000/60\n|where duration>600"}
{"input": "", "instruction": "问一下，怎么把遍历结果结束耗时后面的值大于 10 的过滤出来啊？", "output": "可以通过 parse 将耗时字段提取出来，并转成数值，再通过 where 进行过滤。 SPL 语句为: * AND 遍历结果结束耗时 | parse \"遍历结果结束耗时: (?<duration>\\d+)\" | where tolong(duration) > 10"}
{"input": "", "instruction": "apicode里在PICJK后面匹配四位数字，怎么用正则查询", "output": "* | parse field=apicode \"(?<code>PICJK\\d{4})\" | where !empty(code) "}
{"input": "", "instruction": "linux当前用户数", "output": "tag:linux_user | dedup 1 ip | parse field=raw_message \"(?<current_user>[^\\#]+)\\#\\s+users=(?<user_count>\\d+)\" | stats count() as cnt by ip,hostname,current_user,user_count | where user_count !=\"0\""}
{"input": "", "instruction": "从_internal索引中查询字段提取解析规则错误数", "output": "_index:_internal tag:parser_rule_stat |stats sum(parser_rule_stat.total) as total,sum(parser_rule_stat.success) as success,sum(parser_rule_stat.fail) as fail,sum(parser_rule_stat.skip) as skip,sum(parser_rule_stat.error) as error,avg(parser_rule_stat.cost_us) as avg_cost_us by parser_rule_stat.parser_name,parser_rule_stat.rule_type |eval avg_cost_ms = format(\"%.4f ms\",avg_cost_us/1000) |fields parser_rule_stat.parser_name,rule_name,total,success,fail,skip,error,avg_cost_ms|where error>0 |stats count() as cnt"}
{"input": "", "instruction": "从rzy_internal索引中查询字段提取解析规则错误数", "output": "_index:rzy_internal tag:parser_rule_stat |stats sum(parser_rule_stat.total) as total,sum(parser_rule_stat.success) as success,sum(parser_rule_stat.fail) as fail,sum(parser_rule_stat.skip) as skip,sum(parser_rule_stat.error) as error,avg(parser_rule_stat.cost_us) as avg_cost_us by parser_rule_stat.parser_name,parser_rule_stat.rule_type |eval avg_cost_ms = format(\"%.4f ms\",avg_cost_us/1000) |fields parser_rule_stat.parser_name,rule_name,total,success,fail,skip,error,avg_cost_ms|where error>0 |stats count() as cnt"}
{"input": "", "instruction": "从rzy_internal索引中查询字段提取规则解析超时数", "output": "_index:rzy_internal tag:parser_rule_stat |stats count()  as cnt by parser_rule_stat.parser_name,parser_rule_stat.rule_type,parser_rule_stat.cost_us |where parser_rule_stat.cost_us>100000 |stats count() as cnt"}
{"input": "", "instruction": "从_internal索引中查询字段提取规则解析超时数", "output": "_index:_internal tag:parser_rule_stat |stats count()  as cnt by parser_rule_stat.parser_name,parser_rule_stat.rule_type,parser_rule_stat.cost_us |where parser_rule_stat.cost_us>100000 |stats count() as cnt"}
{"input": "linux当前用户数", "instruction": "linux审计数据，编写查询语句实现如下分析场景", "output": "tag:linux_user | dedup 1 ip | parse field=raw_message \"(?<current_user>[^\\#]+)\\#\\s+users=(?<user_count>\\d+)\" | stats count() as cnt by ip,hostname,current_user,user_count | where user_count !=\"0\" "}
{"input": "堡垒机异常工单数量", "instruction": "新HAC堡垒机审计数据，编写查询语句实现如下分析场景", "output": "tag:hac  hac.worknotename:* NOT hac.worknotename:\"值班\"  |stats count() by hac.worknotename,hac.worknote\n|eval worknotename=match(hac.worknotename,\"^[\\\\u4e00-\\\\u9fa5]{2}\") \n| stats count() as cnt by worknotename |where worknotename==false| fields cnt"}
{"input": "会话超时分用户次数统计。过滤hac.det.class字段值为SESSION_END的日志，按yyyy-MM-dd HH:mm:ss格式转换hac.det.start_time和hac.det.end_time字段内容，注意使用 UTC 时区。然后二者相减得到会话耗时的毫秒数，并转换为分钟数，过滤其中大于 200 分钟的记录。最后按用户名分组统计次数", "instruction": "新HAC堡垒机审计数据，编写查询语句实现如下分析场景", "output": "tag:hac hac.det.class:SESSION_END\n| eval start_time=parsedate(hac.det.start_time, \"yyyy-MM-dd HH:mm:ss\", \"UTC\"),end_time=parsedate(hac.det.end_time, \"yyyy-MM-dd HH:mm:ss\", \"UTC\"),duration=(end_time-start_time)/1000/60\n|where duration>200 | stats count() as cnt by hac.det.primary_user"}
{"input": "贷记来账(tranCode 为BUP03059)超过7秒交易数mps", "instruction": "查询农信银支付清算系统(mps)数据，进行如下统计", "output": "tranCode:BUP03059 trancode:* AND ('type':结束交易 OR type:开始交易)| stats max(timestamp) as _max,min(timestamp) as _min by seqNo,num| eval cost=_max-_min | where cost > 7000 | stats count() as cnt"}
{"input": "借记来账超过7秒的交易量，交易代码 BUP03058。按 seqNo 序列码统计时间戳的最大值最小值，然后相减可得交易时长。", "instruction": "查询农信银支付清算系统(mps)数据，进行如下统计", "output": "tranCode:BUP03058 trancode:* AND ('type':结束交易 OR type:开始交易)| stats max(timestamp) as _max,min(timestamp) as _min by seqNo,num| eval cost=_max-_min | where cost > 7000 | stats count() as cnt"}
{"input": "", "instruction": "怎么从代理软件(Squid, Bluecoat, IronPort 等)的日志里发现 beacon 流量. Let's think step by step.", "output": "我们可以检查不同时间建立的类似连接之间的差异。步骤如下：\n\n1. 检索包含非空URL的代理服务器日志事件;\n2. 按时间排序;\n3.对于每两个匹配相同源主机和URL的连续事件，计算这些事件之间的时间差，以秒为单位;\n4. 一旦计算出所有事件的差异，将匹配的事件数和连续事件之间时间差的标准差，添加到每一行/事件(每个源主机和URL);\n5. 过滤那些标准偏差低于5且计数大于100的行(阈值可调整);\n6. 最后，按URL对每个相关属性/字段进行分组，包括唯一源主机的计数，并开始检查输出。\n\n最后使用如下 SPL 实现：\n _index:squid url:* | eval currenttimestamp=timestamp| sort by + currenttimestamp| streamstats global=false window=2 current=false last(currenttimestamp) as previoustimestamp by src, url| eval difftimestamp=currenttimestamp-previoustimestamp| eventstats count() as cnt, stddev(difftimestamp) as std by src, url | where std<5 && cnt>100| stats count() as conn_count, dc(src) as unique_sources, values(http_method) as methods,  values(http_user_agent) as agents, values(std) as diff_deviation, values(category) as category by url"}
{"input": "", "instruction": "从日志易内部索引中查询解析器执行的相关任务数量、成功和失败数量以及每个任务的平均耗时。", "output": "_index:rzy_internal tag:parser_stat  parser_stat.id:* |eval parser_id=parser_stat.id |stats sum(parser_stat.total) as total,sum(parser_stat.success) as success,sum(parser_stat.cost_us) as total_cost_us by parser_stat.name |eval fail=total - success |eval avg_cost_us = todouble(format(\"%.4f\",total_cost_us/total/1000)) |where avg_cost_us > 1 |sort by avg_cost_us |fields parser_stat.name,total,success,fail,avg_cost_us |rename parser_stat.name as \"字段提取名称\",total as \"总处理量\",success as \"处理成功\",fail as \"处理失败\",avg_cost_us as \"平均耗时(毫秒)\""}
{"input": "", "instruction": "您好，我想要从日志数据中找到那个解析器中发生错误次数最多的规则。", "output": "_index:_internal tag:parser_rule_stat |stats sum(parser_rule_stat.total) as total,sum(parser_rule_stat.success) as success,sum(parser_rule_stat.fail) as fail,sum(parser_rule_stat.skip) as skip,sum(parser_rule_stat.error) as error,avg(parser_rule_stat.cost_us) as avg_cost_us by parser_rule_stat.parser_name,parser_rule_stat.rule_type |eval avg_cost_ms = format(\"%.4f ms\",avg_cost_us/1000) |fields parser_rule_stat.parser_name,rule_name,total,success,fail,skip,error,avg_cost_ms|where error>0 |stats count() as cnt"}
{"input": "", "instruction": "我想问的是，在这个时间段内，有多少条数据出现了错误？请帮忙把结果打印出来。", "output": "_index:rzy_internal tag:parser_rule_stat |stats sum(parser_rule_stat.total) as total,sum(parser_rule_stat.success) as success,sum(parser_rule_stat.fail) as fail,sum(parser_rule_stat.skip) as skip,sum(parser_rule_stat.error) as error,avg(parser_rule_stat.cost_us) as avg_cost_us by parser_rule_stat.parser_name,parser_rule_stat.rule_type |eval avg_cost_ms = format(\"%.4f ms\",avg_cost_us/1000) |fields parser_rule_stat.parser_name,rule_name,total,success,fail,skip,error,avg_cost_ms|where error>0 |stats count() as cnt"}
{"input": "", "instruction": "询问的是最近一段时间内，日志易的某些解析器在处理某一种规则时花费的时间超过了 100ms（约为 1/100th of second），并按解析器、规则类型和耗时进行分组统计，最后再计算所有记录数目。", "output": "_index:_internal tag:parser_rule_stat |stats count()  as cnt by parser_rule_stat.parser_name,parser_rule_stat.rule_type,parser_rule_stat.cost_us |where parser_rule_stat.cost_us>100000 |stats count() as cnt"}
{"input": "非工作时间用户登录明细，注意去除系统用户账号，展示前 10 条", "instruction": "Windows_AD数据，编写查询语句实现如下分析场景", "output": "appname:windows AND (json.event_id:4624 OR json.event_id:4625 ) AND NOT (json.username:*$ OR json.username:SYSTEM)\n|eval time=formatdate(timestamp)\n|eval hour = tolong(formatdate(timestamp,\"HH\"))\n|eval day = tolong(formatdate(timestamp,\"ee\"))\n|where day >5 || (hour <8 || hour >19)\n|stats count() as cnt by json.username | sort by cnt |limit 10"}
{"input": "windows非工作时间用户登陆明细", "instruction": "windows日志数据，编写查询语句实现如下分析场景", "output": "* AND appname:windows AND (json.event_id:4624 OR json.event_id:4625 OR json.event_id:4648)|eval time=formatdate(timestamp)|eval hour = tolong(formatdate(timestamp,\"HH\"))|eval day = tolong(formatdate(timestamp,\"e\"))|where day >5 &&(hour <8 || hour >19)"}
{"input": "用户账户管理-未解锁用户账户", "instruction": "AD日志数据，编写查询语句实现如下分析场景", "output": "appname:windows tag:security (json.event_id:4767 OR json.event_id:4740) json.keywords:审核成功\n| stats dc(json.event_id) by json.event_data.TargetUserName,json.event_id\n| stats sum(json.event_id) as event_id by json.event_data.TargetUserName\n| rename json.event_data.TargetUserName as Username\n| where event_id == 4740\n| map \" json.event_data.TargetUserName:$Username$ appname:windows tag:security json.event_id:4740 json.keywords:审核成功\n| dedup 1 json.event_data.TargetUserName \n| parse field = json.message \"^(?<brief>.*)。\"\n| table timestamp, json.event_data.SubjectUserName, json.event_data.TargetUserName, json.keywords, brief \""}
{"input": "AD登录多来源IP失败用户", "instruction": "AD日志数据，编写查询语句实现如下分析场景", "output": "appname:windows tag:security json.event_id:4625 json.keywords:审核失败 NOT json.event_data.TargetUserName:*$\n| stats sparkline(count(),10m), dc(json.event_data.IpAddress) as dc_ip by json.event_data.TargetUserName \n| where dc_ip > 2\n| sort by dc_ip"}
{"input": "非工作时间用户登录明细", "instruction": "Windows_AD数据，编写查询语句实现如下分析场景", "output": "appname:windows AND (json.event_id:4624 OR json.event_id:4625 ) AND NOT (json.username:*$ OR json.username:SYSTEM)\n|eval time=formatdate(timestamp)\n|eval hour = tolong(formatdate(timestamp,\"HH\"))\n|eval day = tolong(formatdate(timestamp,\"ee\"))\n|where day >5 || (hour <8 || hour >19)"}
{"input": "同一用户尝试在多个不同主机登录且登录失败", "instruction": "Windows_AD数据，编写查询语句实现如下分析场景", "output": "appname:windows   json.event_id:4625 NOT (json.username:*$ OR json.username:SYSTEM)\n| stats values(json.src_ip) as IpAddress, dc(json.src_ip) as dc_ip by json.username\n| where dc_ip > 2\n| sort by dc_ip"}
{"input": "磁盘高使用率主机列表，即使用率大于 80%", "instruction": "Linux主机运维监控指标数据，编写查询语句实现如下分析场景", "output": "appname:top_info_disk_stats AND NOT json.disk.path:\\/boot \n\t| stats max(json.disk.used_percent) as _disk by json.disk.path,ip,hostname \n\t| where _disk >=80\n\t| eval used_percent=format(\"%.2f%%\",_disk) "}
{"input": "磁盘使用率高于 80% 的主机数量", "instruction": "Linux主机运维监控指标数据，编写查询语句实现如下分析场景", "output": "appname:top_info_disk_stats AND NOT json.disk.path:\\/boot \n\t| where json.disk.used_percent >=80 \n\t| stats dc(ip) as _dc \n\t| rename _dc as \"磁盘高使用率主机数\"\n\t"}
{"input": "磁盘高使用率主机数", "instruction": "Windows主机运维监控指标数据，编写查询语句实现如下分析场景", "output": "appname:top_info_win_disk_stats \n\t| where json.disk.used_percent >=80 \n\t| stats dc(ip) as _dc \n\t| rename _dc as \"磁盘高使用率主机数\""}
{"input": "磁盘高使用率主机列表", "instruction": "Windows主机运维监控指标数据，编写查询语句实现如下分析场景", "output": "appname:top_info_win_disk_stats\n\t| stats max(json.disk.used_percent) as _disk by json.disk.path,ip,hostname \n\t| where _disk >=80\n\t| eval used_percent=format(\"%.2f%%\",_disk) "}
{"input": "AD账户登陆失败6次且登陆成功1次", "instruction": "AD日志数据，编写查询语句实现如下分析场景", "output": "appname:windows tag:security ((json.event_id:4771 AND json.keywords:\"审核失败\")  OR json.event_id:4624) NOT json.event_data.TargetUserName:*$\n| eval user=json.event_data.TargetUserName\n| top 2 json.event_id by user\n| where percent!=100 && percent>99 && json.event_id!=4624 && count>6\n| eval desc=\"存在异常登陆风险\""}
{"input": "AD账户登陆成功率低于60，且次数大于 6 次", "instruction": "AD日志数据，编写查询语句实现如下分析场景", "output": "appname:windows tag:security ((json.event_id:4771 AND json.keywords:\"审核失败\")  OR json.event_id:4624) NOT json.event_data.TargetUserName:*$\n| eval user=json.event_data.TargetUserName\n| top 2 json.event_id by user\n| where percent<60 && json.event_id==4624 && count>6\n| eval desc=\"登陆成功率过低\""}
{"input": "AD账户登陆成功率低于40", "instruction": "AD日志数据，编写查询语句实现如下分析场景", "output": "appname:windows tag:security ((json.event_id:4771 AND json.keywords:\"审核失败\")  OR json.event_id:4624) NOT json.event_data.TargetUserName:*$\n| eval user=json.event_data.TargetUserName\n| top 2 json.event_id by user\n| where percent<40 && json.event_id==4624 && count>6\n| eval desc=\"登陆成功率过低\""}
{"input": "windows非工作时间用户登录排行，非工作时间为每周 6 或 7，或周 1 到周五的 8 点之前，19 点后", "instruction": "windows日志数据，编写查询语句实现如下分析场景", "output": "(* AND appname:windows AND (json.event_id:4624 OR json.event_id:4625 OR json.event_id:4648)) |eval time=formatdate(timestamp)|eval hour = tolong(formatdate(timestamp,\"HH\"))|eval day = tolong(formatdate(timestamp,\"e\"))|where day >5 || (hour <8 || hour >19) |stats count(json.event_data.TargetUserName) as ct by json.event_data.TargetUserName "}
{"input": "", "instruction": "上个月最后一天的mysql数据库主机表空间使用情况", "output": "starttime=\"now/M-1d\" endtime=\"now/M\" appname:mysql tag:metric json.tag:tablespace AND json.os_type: 官网核心MySQL数据库-* |stats count() as cnt by json.os_type,json.table_name,json.TABLE_SCHEMA,json.INDEX_LENGTH,json.DATA_LENGTH |eval sum_=todouble(json.INDEX_LENGTH)+todouble(json.DATA_LENGTH) |eval sum_=sum_/1024/1024 |where sum_> 1 |eval sum_=format(\"%.2fG\",sum_) "}
{"input": "AD当天锁定次数超过10次的帐户", "instruction": "AD日志数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:windows tag:security json.event_id:4740 \n| eval user=json.event_data.TargetUserName\n| stats count() as ct by user\n| where ct > 10"}
{"input": "AD当天锁定次数超过20次的帐户", "instruction": "AD日志数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:windows tag:security json.event_id:4740 \n| eval user=json.event_data.TargetUserName\n| stats count() as ct by user\n| where ct > 20"}
{"input": "AD当天新增且删除的帐户", "instruction": "AD日志数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:windows tag:security (json.event_id:4720 OR json.event_id:4726)\n| eval user=json.event_data.TargetUserName\n| stats count() as ct by user\n| where ct >1"}
{"input": "AD当天修改或重置密码超过2次的帐户", "instruction": "AD日志数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:windows tag:security (json.event_id:4723 OR json.event_id:4724) NOT json.event_data.TargetUserName:*$\n| eval user=json.event_data.TargetUserName\n| stats count() as ct by user\n| where ct > 2"}
{"input": "AD当天新建且删除的帐户", "instruction": "AD日志数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:windows tag:security (json.event_id:4720 OR json.event_id:4726)\n| eval user=json.event_data.TargetUserName\n| stats count() as ct by user\n| where ct >1"}
{"input": "AD当天重置或更改密码超过2次的帐户", "instruction": "AD日志数据，编写查询语句实现如下分析场景", "output": "starttime=\"now/d\" appname:windows tag:security (json.event_id:4723 OR json.event_id:4724) NOT json.event_data.TargetUserName:*$\n| stats count() as ct by json.event_data.TargetUserName\n| where ct > 2"}
{"input": "172.16.0.2 10分钟内cpu负载过高（大于 0.8）次数", "instruction": "docker性能数据，编写查询语句实现如下分析场景", "output": "starttime=\"-10m\" appname:docker_metric tag:docker_metric_cpu AND (hostname:* AND ip:172.16.0.2 )|where json.total.pct>0.8| stats count(json.total.pct) as cnt"}
{"input": "172.16.0.2 10分钟内cpu过于空闲(多余 4 回出现使用率低于 0.2)次数", "instruction": "docker性能数据，编写查询语句实现如下分析场景", "output": "starttime=\"-10m\" appname:docker_metric tag:docker_metric_cpu AND (hostname:* AND ip:172.16.0.2 )|where json.total.pct<0.20| stats count(json.total.pct) as cnt |where cnt>4"}
{"input": "172.16.0.2 异常丢包率", "instruction": "docker性能数据，编写查询语句实现如下分析场景", "output": "appname:docker_metric tag:docker_metric_network AND (hostname:* AND ip:172.16.0.2 ) NOT json.in.packets:0| stats count() as cnt by json.in.dropped,json.out.dropped,json.inbound.packets,json.outbound.packets | eval drop=json.in.dropped+json.out.dropped|eval all=json.inbound.packets+json.outbound.packets| stats sum(all) as total ,sum(drop) as drop_total | eval drop_p=drop_total/total \n| where drop_p>=0.1 |rename drop_total as \"丢包数\", total as \"总接收发送包数\" , drop_p as \"丢包率\""}
{"input": "AD登录成功率低于40的用户", "instruction": "Windows_AD数据，编写查询语句实现如下分析场景", "output": "appname:windows (json.event_id:4625 OR json.event_id:4624 )NOT (json.username:*$ OR json.username:SYSTEM)\n|eval a=if(json.event_id == 4625,1,0)\n|stats count() as cnt,sum(a) as f by json.username\n|eval p=todouble(format(\"%.2f\",((cnt-f)/cnt)*100))\n|where p<40\n|eval p=p+\"%\"\n|rename json.username as \"用户名\",cnt as \"登录次数\",f as \"登录失败次数\",p as \"成功率\""}
{"input": "", "instruction": "我想问的是 windows 系统上的登录情况有哪些异常用户或操作吗？而且不希望看到系统账户和常用的管理员账户的信息。", "output": "appname:windows AND (json.event_id:4624 OR json.event_id:4625 ) AND NOT (json.username:*$ OR json.username:SYSTEM)|eval time=formatdate(timestamp)|eval hour = tolong(formatdate(timestamp,\"HH\"))|eval day = tolong(formatdate(timestamp,\"ee\"))|where day >5 || (hour <8 || hour >19)|stats count() as cnt by json.username | sort by cnt |limit 10"}
{"input": "", "instruction": "我想问非工作时间发生的 Windows 系统登录失败事件数量和类型有哪些？", "output": "* AND appname:windows AND (json.event_id:4624 OR json.event_id:4625 OR json.event_id:4648)|eval time=formatdate(timestamp)|eval hour = tolong(formatdate(timestamp,\"HH\"))|eval day = tolong(formatdate(timestamp,\"e\"))|where day >5 &&(hour <8 || hour >19)"}
{"input": "", "instruction": "我想问的是发生过登录或者注销事件的 Windows 应用？", "output": "appname:windows AND (json.event_id:4624 OR json.event_id:4625 ) AND NOT (json.username:*$ OR json.username:SYSTEM)|eval time=formatdate(timestamp)|eval hour = tolong(formatdate(timestamp,\"HH\"))|eval day = tolong(formatdate(timestamp,\"ee\"))|where day >5 || (hour <8 || hour >19)"}
{"input": "", "instruction": "windows非工作时间用户登录明细", "output": "* AND appname:windows AND (json.event_id:4624 OR json.event_id:4625 OR json.event_id:4648)|eval time=formatdate(timestamp)|eval hour = tolong(formatdate(timestamp,\"HH\"))|eval day = tolong(formatdate(timestamp,\"e\"))|where day >5 &&(hour <8 || hour >19)"}
{"input": "", "instruction": "帮我创建 Windows 用户登录失败的安全事件监控告警规则。", "output": "* AND appname:windows AND (json.event_id:4624 OR json.event_id:4625 OR json.event_id:4648)|eval time=formatdate(timestamp)|eval hour = tolong(formatdate(timestamp,\"HH\"))|eval day = tolong(formatdate(timestamp,\"e\"))|where day >5 &&(hour <8 || hour >19)"}
{"input": "", "instruction": "我想问有关某一 Windows 应用的安全审计事件的数量和趋势的信息，并且提供相应的数据中心（DC）的 IP 地址分布情况。", "output": "appname:windows tag:security json.event_id:4625 json.keywords:审核失败 NOT json.event_data.TargetUserName:*$| stats sparkline(count(),10m), dc(json.event_data.IpAddress) as dc_ip by json.event_data.TargetUserName | where dc_ip > 2| sort by dc_ip"}
{"input": "", "instruction": "我想问的是 windows 应用的登录事件，并且不是系统自带用户或者是管理员登录。IP地址分布在国际上，且 IP 地址的地理位置（数据中心）大于等于三个。", "output": "appname:windows   json.event_id:4625 NOT (json.username:*$ OR json.username:SYSTEM)| stats values(json.src_ip) as IpAddress, dc(json.src_ip) as dc_ip by json.username| where dc_ip > 2| sort by dc_ip"}
{"input": "", "instruction": "我想问的是，我的磁盘空间使用率过高了吗？你能帮我检查一下吗？appname: top_info_disk_stats AND NOT json.disk.path:/boot | stats max(json.disk.used_percent) as disk_usage by json.disk.path, ip, hostname | where disk_usage >= 80 | eval used_percent = format(\"%.2f%%\", disk_usage)", "output": "appname:top_info_disk_stats AND NOT json.disk.path:/boot  | stats max(json.disk.used_percent) as _disk by json.disk.path,ip,hostname  | where _disk >=80 | eval used_percent=format(\"%.2f%%\",_disk) "}
{"input": "", "instruction": "我想问的是，系统的哪些磁盘空间占用比较高？而且不应该在 /boot 下面？", "output": "appname:top_info_disk_stats AND NOT json.disk.path:/boot  | where json.disk.used_percent >=80  | stats dc(ip) as _dc  | rename _dc as \"磁盘高使用率主机数\" "}
{"input": "", "instruction": "我想问的是哪些字段的磁盘空间占比超过80%的主机有哪些？请列举IP地址和数量", "output": "appname:top_info_win_disk_stats  | where json.disk.used_percent >=80  | stats dc(ip) as _dc  | rename _dc as \"磁盘高使用率主机数\""}
{"input": "", "instruction": "我想问在处理用户反馈时遇到的问题：在某些情况下，我的搜索结果中包含了一些不应该出现的条目。这些条目通常具有相同或类似的描述文本、用户名称和事件 ID（例如 4771 和 4624），但它们的百分比不足 100%，并且数量也小于 6 个。", "output": "appname:windows tag:security ((json.event_id:4771 AND json.keywords:\"审核失败\")  OR json.event_id:4624) NOT json.event_data.TargetUserName:*$| eval user=json.event_data.TargetUserName| top 2 json.event_id by user| where percent!=100 && percent>99 && json.event_id!=4624 && count>6| eval desc=\"存在异常登陆风险\""}
{"input": "", "instruction": "我想问在周六到周日，或者每天早上八点至晚上七点之外的非工作时间，访问过 Windows 用户账户的数量以及他们的姓名是什么。", "output": "(* AND appname:windows AND (json.event_id:4624 OR json.event_id:4625 OR json.event_id:4648)) |eval time=formatdate(timestamp)|eval hour = tolong(formatdate(timestamp,\"HH\"))|eval day = tolong(formatdate(timestamp,\"e\"))|where day >5 || (hour <8 || hour >19) |stats count(json.event_data.TargetUserName) as ct by json.event_data.TargetUserName "}
{"input": "", "instruction": "我想问关于 Docker 中网络性能监控的情况，例如延迟、吞吐量等方面", "output": "appname:docker_metric tag:docker_metric_network AND (hostname:* AND ip:172.16.0.2 ) NOT json.in.packets:0| stats count() as cnt by json.in.dropped,json.out.dropped,json.inbound.packets,json.outbound.packets | eval drop=json.in.dropped+json.out.dropped|eval all=json.inbound.packets+json.outbound.packets| stats sum(all) as total,sum(drop) as drop_total | eval drop_p=drop_total/total | where drop_p>=0.1 |rename drop_total as \"丢包数\", total as \"总接收发送包数\", drop_p as \"丢包率\""}
{"input": "", "instruction": "我想要知道在过去一天中，有多少用户同时登录到了 Windows 系统并且触发了安全事件 ID 为 4740 的情况。", "output": "starttime=\"now/d\" appname:windows tag:security json.event_id:4740 | eval user=json.event_data.TargetUserName| stats count() as ct by user| where ct > 10"}
{"input": "", "instruction": "我想问的是，最近两天有几台 Windows 系统的计算机出现过登录失败事件 ID 为 4740 的安全问题？并且同一用户在这两天内也发生了多次这样的问题吗？", "output": "starttime=\"now/d\" appname:windows tag:security json.event_id:4740 | eval user=json.event_data.TargetUserName| stats count() as ct by user| where ct > 20"}
{"input": "", "instruction": "过去两天中，发生在 Windows 系统上的任何安全事件（如入侵、破坏等）的数量和具体的受害人（user）。", "output": "starttime=\"now/d\" appname:windows tag:security (json.event_id:4723 OR json.event_id:4724) NOT json.event_data.TargetUserName:*$| eval user=json.event_data.TargetUserName| stats count() as ct by user| where ct > 2"}
{"input": "", "instruction": "我最近两天在 Windows 下做了哪些安全相关的操作呢？有几个用户重复地被攻击了吗？", "output": "starttime=\"now/d\" appname:windows tag:security (json.event_id:4723 OR json.event_id:4724) NOT json.event_data.TargetUserName:*$| eval user=json.event_data.TargetUserName| stats count() as ct by user| where ct > 2"}
{"input": "", "instruction": "我想问的是最近一天发生的安全事件中，同一用户出现次数最多的那个用户是谁？请帮我修改一下这个查询。", "output": "starttime=\"now-1d\" appname:windows tag:security (json.event_id:4720 OR json.event_id:4726)| eval user=json.event_data.TargetUserName| stats count() as ct by user| where ct >1"}
{"input": "", "instruction": "我正在进行一次安全审计，需要知道今天有多少用户在使用 Windows 应用时被锁定了两次或以上。", "output": "starttime=\"now/d\" appname:windows tag:security (json.event_id:4723 OR json.event_id:4724) NOT json.event_data.TargetUserName:*$| stats count() as ct by json.event_data.TargetUserName| where ct > 2"}
{"input": "", "instruction": "我想问的是，在过去十分钟内，使用 Docker 智能化的主机上，Docker CPU 使用率低于 20% 的实例有几个？", "output": "starttime=\"-10m\" appname:docker_metric tag:docker_metric_cpu AND (hostname:* AND ip:172.16.0.2 )|where json.total.pct<0.20| stats count(json.total.pct) as cnt |where cnt>4"}
{"input": "索引可用字段有：apache.clientip, apache.domain, apache.geo.country, apache.geo.isp, apache.method, apache.referer, apache.request_path, apache.request_query, apache.resp_time, apache.status, apache.ua, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "查看使用不常见或伪造域名的日志，使用 entropy 方法判断", "output": "appname:apache | eval entropy = entropy(apache.domain) | where entropy > 5"}
{"input": "非工作时间登录vpn列表。索引可用字段有：vpn.action, vpn.actor.displayName, vpn.actype, vpn.app.upstream.host, vpn.app.upstream.port, vpn.app.web.request.url, vpn.auth_dst, vpn.dst.geo.city, vpn.dst.geo.country, vpn.dst.geo.ip, vpn.dst.geo.isp, vpn.dst.geo.latitude, vpn.dst.geo.longitude, vpn.dst.geo.province, vpn.dst_ip, vpn.dst_nt_host, vpn.dst_port, vpn.event_level, vpn.event_name, vpn.kv.dst.geo.country, vpn.kv.dst.geo.latitude, vpn.kv.dst.geo.longitude, vpn.kv.msg, vpn.kv.proto, vpn.kv.src.geo.city, vpn.kv.src.geo.country, vpn.kv.src.geo.latitude, vpn.kv.src.geo.longitude, vpn.kv.user, vpn.login_user, vpn.msg, vpn.msg.virtual_ip, vpn.proto, vpn.reason, vpn.resource_name, vpn.result, vpn.seconds, vpn.src._ip, vpn.src.geo.city, vpn.src.geo.country, vpn.src.geo.ip, vpn.src.geo.isp, vpn.src.geo.latitude, vpn.src.geo.longitude, vpn.src.geo.province, vpn.src_ip, vpn.src_ip.geo.city, vpn.src_ip.geo.country, vpn.src_port, vpn.state, vpn.target.displayName, vpn.time, vpn.transport, vpn.user, vpn.user_name, vpn.vpn.login_user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "sslvpn日志数据，编写查询语句实现如下分析场景", "output": "appname:vpn tag:cisco  \n| eval time1=tolong(formatdate(timestamp,\"HH\"))\n| where time1 > 18 || time1 < 8 \n|eval time2=formatdate(timestamp)\n|sort by +times2\n|table time2,vpn.src_ip,vpn.user\n|rename time2 as \"登录时间\"\n|rename vpn.src_ip as \"源ip\"\n|rename vpn.user as \"登录用户\""}
{"input": "点播卡顿占比_县top10。索引可用字段有：stb_vixtel_sotthas.district, stb_vixtel_sotthas.downloadTime, stb_vixtel_sotthas.freezeTime, stb_vixtel_sotthas.geo.city, stb_vixtel_sotthas.geo.province, stb_vixtel_sotthas.hasQoE, stb_vixtel_sotthas.programName, stb_vixtel_sotthas.stbId, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒分析_数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_sotthas stb_vixtel_sotthas.hasQoE:>=0 stb_vixtel_sotthas.freezeTime:>=0\nstb_vixtel_sotthas.downloadTime:>=0 NOT stb_vixtel_sotthas.programName:未知\n|eval freezeTime=todouble(stb_vixtel_sotthas.freezeTime)\n|eval downloadTime=todouble(stb_vixtel_sotthas.downloadTime)\n|eval freezeRate=(freezeTime/1000000)/downloadTime\n|stats avg(freezeRate) as avg_freezeRate by stb_vixtel_sotthas.district\n|eval aaa=len(stb_vixtel_sotthas.district)\n|where aaa>1|sort by avg_freezeRate|limit 10\n|eval avg_freezeRate_1=format(\"%.2f\",avg_freezeRate)"}
{"input": "直播花屏占比_地市top10。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒分析_数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_smpegts (stb_vixtel_smpegts.freezeTime:>=0 AND stb_vixtel_smpegts.downloadTime:>=0)\n|eval freezeTime=tolong(stb_vixtel_smpegts.freezeTime)\n|eval downloadTime=tolong(stb_vixtel_smpegts.downloadTime)\n| stats avg(freezeTime) as freezeTime1,avg(downloadTime) as downloadTime1 by stb_vixtel_smpegts.district\n|eval liveFreezeRate=format(\"%.3f\",(freezeTime1/1000000)/downloadTime1)\n|eval aaa=len(stb_vixtel_smpegts.district)\n|where  aaa>1\n|sort by liveFreezeRate\n|limit 10"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Linux操作系统审计_系统账号添加详情，过滤掉 user 字段为空的内容，按时间正序排序，重命名英文字段为中文名，包括时间、IP 地址、主机名、用户操作和添加用户名字段", "output": "appname:linux tag:secure (type:useradd OR type:passwd OR type:usermod OR type:groupadd OR type:gpasswd OR type:groupmod) |where !empty(user) |sort by +timestamp |rename time as \"时间\",ip as \"IP地址\",hostname as \"主机名\",type as \"用户操作\",user as \"添加用户\""}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Linux操作系统审计_系统账号删除详情，去掉 user 字段为空的部分", "output": "appname:linux tag:secure (type:userdel OR type:passwd OR type:usermod OR type:groupdel OR type:gpasswd OR type:groupmod) |where !empty(user)"}
{"input": "去掉空用户，如果 logout_time 为空则设置 logout_time 为still logged in，如果 use_time 为空则设置 use_name 为 still logged in。表格列出 ip 地址、用户、终端、登录时间、注销时间、使用时长和源 ip 地址，表头改为中文。索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Linux操作系统审计_linux源主机每次登录操作时长", "output": "appname:linux tag:last  |where !empty(user)  |eval logout_time=if(empty(logout_time),\"still logged in\",logout_time) |eval use_time=if(empty(use_time),\"still logged in\",use_time) |table ip,user,terminal,login_time,logout_time,use_time,src_ip |rename ip as '服务器',user as '用户',terminal as '终端',login_time as '登录时间',logout_time as '注销时间',use_time as '使用时长',src_ip as '源IP'"}
{"input": "应用_服务器命令操作详情。索引可用字段有：fortress.action, fortress.dst_ip, fortress.facility, fortress.host_ip, fortress.input, fortress.ip, fortress.level, fortress.log_type, fortress.loginOK, fortress.login_user, fortress.message, fortress.msg.action, fortress.msg.adlg_type, fortress.msg.begin_time, fortress.msg.command, fortress.msg.date, fortress.msg.mode, fortress.msg.module, fortress.msg.session_guid, fortress.msg.src_ip, fortress.msg.srcip, fortress.msg.srvaddr, fortress.msg.system_user, fortress.msg.sysuser, fortress.node, fortress.protocol, fortress.reason, fortress.remote_addr, fortress.request_msg, fortress.result, fortress.secondary_user, fortress.server, fortress.severity, fortress.src_ip, fortress.src_port, fortress.status, fortress.system_user, fortress.type, fortress.user, fortress.user_agent, fortress.user_name, fortress.username, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "堡垒机_qizhi数据，编写查询语句实现如下分析场景", "output": "appname:fortress tag:shterm | eval time=formatdate(timestamp,\"MM-dd HH:mm\")|table time,fortress.src_ip,fortress.server,fortress.login_user,fortress.node,fortress.server,fortress.msg.command,fortress.msg.action|where !empty(fortress.msg.command)|rename fortress.msg.command as \"命令\",fortress.src_ip as \"操作ip\",fortress.server as \"被操作服务器/应用\",fortress.login_user as \"操作用户\",fortress.node as \"节点\",fortress.msg.action as \"动作\""}
{"input": "系统信息详情。", "instruction": "通达信数据，编写查询语句实现如下分析场景", "output": "(appname:tdx  NOT 连接信息) 系统信息 | eval time=formatdate(timestamp,\"MM-dd HH:mm:ss\") | table time,TDX.REQUEST_TYPE,TDX.message | where !empty(TDX.message)"}
{"input": "Windows登录事件详情，过滤掉其中 windows.IpAddress等于\"-\"的部分。索引可用字段有：windows.EventData.Data, windows.IpAddress, windows.System.EventID.text, windows.System.Level, windows.System.Provider.Name, windows.event_type, windows.level, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Windows系统日志数据搜索如下内容", "output": "appname:windows windows.event_type:\"登录审计\" \n|where  windows.IpAddress!=\"-\""}
{"input": "从 metrics 索引里搜索和统计访问最多与工作无关应用的个人，展示前 30 个结果。索引内字段名都有 sangforAC. 前缀。索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "深信服上网行为审计数据，编写查询语句实现如下分析场景", "output": "_index:metrics sangforAC.metrics_name:user_app_serv|stats sum(time) as time by sangforAC.servname,sangforAC.appname,sangforAC.name,sangforAC.show_name|where sangforAC.servname!=\"其他\" &&  sangforAC.servname!=\"网络协议\"  &&  sangforAC.servname!=\"HTTP_POST\" &&  sangforAC.appname!=\"其他\" &&  sangforAC.appname!=\"IT相关\"|eval min=format(\"%.1f\",time/60)|sort by min|limit 30"}
{"input": "从 metrics 索引里搜索和统计浏览最久的个人及其应用，展示前 30 个结果。索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "深信服上网行为审计数据，编写查询语句实现如下分析场景", "output": "_index:metrics access_control.metrics_name:user_app_serv |stats sum(time) as time by access_control.servname,access_control.appname,access_control.name,access_control.show_name|where access_control.servname!=\"其他\" &&  access_control.servname!=\"网络协议\"  &&  access_control.servname!=\"HTTP_POST\" &&  access_control.appname!=\"其他\" &&  access_control.appname!=\"IT相关\"|sort by time|limit 30"}
{"input": "分支机构平均流量排名前 10。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_permin_site utc |stats avg(lingcloud.data.totalBytes) as cnt by lingcloud.siteid|sort by cnt|limit 20|lookup sitename dclingcloud_site.csv on lingcloud.siteid=siteid|where !empty(sitename)"}
{"input": "前 20 家分支机构并发量分析。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:inst_kpi_all_site|stats max(lingcloud.data.conCurConnNum) as cnt by lingcloud.siteid|sort by cnt|limit 20|lookup sitename dclingcloud_site.csv on lingcloud.siteid=siteid|where !empty(sitename)"}
{"input": "", "instruction": "查询 webserver、waf 和防火墙日志，看看 Exchange 服务器的请求伪造漏洞是否被利用了？", "output": " (owa auth) OR (ecp (default OR main OR js)) OR (aspnet aspx)| eval path_match=if(match(raw_message, \"(?i)(/owa/auth|/ecp/|/aspnet_client)\"), \"Path matches\", null)| eval agent_match=if(match(raw_message, \"(?i)(DuckDuckBot|facebookexternalhit|Baiduspider|Bingbot|Googlebot|Konqueror|Yahoo.*Slurp|YandexBot|Mozilla/5.0.\\(X11;.Linux.x86_64\\).AppleWebKit|antSword|ExchangeServicesClient|python-requests)\"), \"Agent matches\", null)| eval ip_match=if(match(raw_message, \"(?i)(103\\.77\\.192\\.219|104\\.140\\.114\\.110|104\\.250\\.191\\.110|108\\.61\\.246\\.56|149\\.28\\.14\\.163|157\\.230\\.221\\.198|167\\.99\\.168\\.251|185\\.250\\.151\\.72|192\\.81\\.208\\.169|203\\.160\\.69\\.66|211\\.56\\.98\\.146|5\\.254\\.43\\.18|80\\.92\\.205\\.81)\"), \"IP matches\", null)| eval has_ext=if(match(raw_message, \"(?i)\\.(js|aspx)\"), \"Has js/aspx extension\", null)| where (isnotnull(path_match) && isnotnull(agent_match)) || isnotnull(ip_match)| stats sparkline(count(),1h), count(), values(path_match) as path_match, values(agent_match) as agent_match, values(ip_match) as ip_match, values(has_ext) as has_ext, latest(raw_message) by index, appname"}
{"input": "索引可用字段有：dbaudit.alert_type, dbaudit.app_name, dbaudit.dataSubType, dbaudit.databaseName, dbaudit.dst_ip, dbaudit.dst_port, dbaudit.level, dbaudit.payload, dbaudit.rule, dbaudit.ruleName, dbaudit.rule_name, dbaudit.src_ip, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "数据库审计日志中告警详情", "output": "(appname:dbaudit AND tag:dbappsecurity) | eval time=formatdate(timestamp,\"MM-dd HH:mm:ss\")|table time,dbaudit.src_ip,dbaudit.dst_ip,dbaudit.dst_port,dbaudit.rule_name,dbaudit.level,dbaudit.payload|where len(dbaudit.payload)>0"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "192.168.128.96 系统重启详情", "output": "ip:192.168.128.96 appname:linux tag:linux_boot | eval up_time=case(len(audit.up_time)==16,parsedate(audit.up_time,\"yyyy-MM-dd HH:mm\"),len(audit.up_time)==12,parsedate(audit.up_time,\"MMM dd HH:mm\")) | eval dura=tolong(abs(timestamp-up_time)) | stats min(dura) as _min by ip,audit.up_time | where _min < 600000 "}
{"input": "索引可用字段有：mysql.level, mysql.os_type, mysql.query_time, mysql.rows_examined, mysql.sql, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "最近一个月Mysql数据库大于 60 秒的慢查询SQL详情", "output": "starttime=\"-1M/M\" endtime=\"now/M\" appname:mysql tag:mysql_slow mysql.os_type:官网核心MySQL数据库-主库 |eval mysql.query_time=todouble(mysql.query_time) |where mysql.query_time>60 |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\") |table time,ip,mysql.os_type,mysql.query_time,mysql.rows_examined,mysql.sql |sort by mysql.query_time "}
{"input": "告警详情。索引可用字段有：dbaudit.alert_type, dbaudit.app_name, dbaudit.dataSubType, dbaudit.databaseName, dbaudit.dst_ip, dbaudit.dst_port, dbaudit.level, dbaudit.payload, dbaudit.rule, dbaudit.ruleName, dbaudit.rule_name, dbaudit.src_ip, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "安恒数据库审计数据，编写查询语句实现如下分析场景", "output": "(appname:dbaudit AND tag:dbappsecurity) \n| eval time=formatdate(timestamp,\"MM-dd HH:mm:ss\")\n|table time,dbaudit.src_ip,dbaudit.dst_ip,dbaudit.dst_port,dbaudit.rule_name,dbaudit.ruleName,dbaudit.level,dbaudit.payload,dbaudit.databaseName\n|where len(dbaudit.payload)>0\n|rename dbaudit.src_ip as \"源地址\",dbaudit.dst_ip as \"目的地址\",dbaudit.dst_port as \"目的端口\",dbaudit.rule_name as \"事件\",dbaudit.level as \"等级\",dbaudit.payload as \"payload\",dbaudit.databaseName as db_name,dbaudit.ruleName as \"规则名\",dbaudit.rule_name as \"规则名\""}
{"input": "攻击事件详情。索引可用字段有：waf.action, waf.attack_name, waf.attack_type, waf.bytes_in, waf.cost, waf.cve_id, waf.dst_city, waf.dst_domain, waf.dst_ip, waf.dst_latitude, waf.dst_longitude, waf.dst_port, waf.error_msg, waf.event_level, waf.event_log_level, waf.event_name, waf.event_type, waf.http_method, waf.http_refer, waf.is_truncated, waf.kv.Evt_level, waf.kv.Evt_type, waf.kv.event_name, waf.kv.http_method, waf.kv.http_refer, waf.kv.http_url, waf.kv.msg, waf.kv.owasp_top, waf.kv.pri, waf.kv.severity_level, waf.kv.status, waf.kv.type, waf.level, waf.log_category, waf.message, waf.message.action, waf.message.event, waf.message.method, waf.message.policy, waf.message.src_ip.geo.ip, waf.message.src_ip.geo.province, waf.message.src_port, waf.message.status, waf.message.threaten, waf.method, waf.module, waf.msg.act, waf.msg.cs, waf.msg.policy_id, waf.msg.src.geo.country, waf.policy_name, waf.proto, waf.referer, waf.risk_level, waf.severity, waf.src.geo.city, waf.src.geo.country, waf.src.geo.ip, waf.src.geo.isp, waf.src.geo.latitude, waf.src.geo.longitude, waf.src.geo.province, waf.src_ip, waf.src_port, waf.status, waf.status_code, waf.threat_level, waf.time, waf.ua_browser, waf.ua_device, waf.ua_os, waf.uri, waf.url, waf.user_agent.browser, waf.user_agent.os, waf.website_name, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "WAF_网御星云数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:leadsec NOT (waf.Evt_level:非攻击事件 OR waf.kv.Evt_level:10) NOT \"黑名单\"\n| rename waf.* as *,kv.* as *  \n| eval time=formatdate(timestamp,\"HH:mm\")\n|where !empty(Host)\n| table time,Evt_type,Module,src_ip,src_port,src.geo.city,dst_ip,dst_ip,Host,URL,action"}
{"input": "攻击事件详情。索引可用字段有：ids.action, ids.attack_name, ids.attack_type, ids.brief, ids.dst_ip, ids.dst_port, ids.event_level, ids.event_name, ids.kv.event_name, ids.level, ids.login_user, ids.module, ids.msg, ids.proto, ids.severity_id, ids.signature, ids.src.geo.city, ids.src_ip, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "网御星云ids日志数据，编写查询语句实现如下分析场景", "output": "appname:ids tag:leadsec NOT (ids.event_level:非攻击事件 OR ids.level:10) NOT \"黑名单\"\n| rename ids.* as *,kv.* as *  \n| eval time=formatdate(timestamp,\"HH:mm\")\n|where !empty(Host)\n| table time,event_name,src_ip,src_port,src.geo.city,dst_ip,dst_ip"}
{"input": "直播业务_ts超时状态TOP10节点。直播平台域名包括：live.hcs.yottabyte.cn,livelimit.lovev.com,hlssplive.rizhiyi.com,hlszblive.rizhiyi.com,sp.live.rizhiyi.com,,yy.live.rizhiyi.com,zb.live.rizhiyi.com。索引可用字段有：cdn.cdn_status, cdn.clientip.geo.city, cdn.clientip.geo.isp, cdn.domain, cdn.event_name, cdn.finished_body_response, cdn.geo.city, cdn.geo.country, cdn.geo.province, cdn.http_status, cdn.prefix_url, cdn.proto, cdn.remote_addr, cdn.request_domain, cdn.request_url, cdn.src_outside_ip, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "华为CDN数据，编写查询语句实现如下分析场景", "output": "appname:cdn tag:huawei AND cdn.prefix_url:*ts  AND cdn.finished_body_response:>3  AND   （cdn.domain:live.hcs.yottabyte.cn OR cdn.domain:livelimit.lovev.com OR cdn.domain:hlssplive.rizhiyi.com OR  cdn.domain:hlszblive.rizhiyi.com OR cdn.domain:sp.live.rizhiyi.com  OR cdn.domain:yy.live.rizhiyi.com OR cdn.domain:zb.live.rizhiyi.com） |top 10 tag  |where percent > 0.1  | eval per = format(\"%.1f%%\",percent)"}
{"input": "直播业务_m3u8超时状态TOP10节点。直播平台域名包括：live.hcs.yottabyte.cn,livelimit.lovev.com,hlssplive.rizhiyi.com,hlszblive.rizhiyi.com,sp.live.rizhiyi.com,,yy.live.rizhiyi.com,zb.live.rizhiyi.com。索引可用字段有：cdn.cdn_status, cdn.clientip.geo.city, cdn.clientip.geo.isp, cdn.domain, cdn.event_name, cdn.finished_body_response, cdn.geo.city, cdn.geo.country, cdn.geo.province, cdn.http_status, cdn.prefix_url, cdn.proto, cdn.remote_addr, cdn.request_domain, cdn.request_url, cdn.src_outside_ip, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "华为CDN数据，编写查询语句实现如下分析场景", "output": "appname:cdn tag:huawei  AND cdn.prefix_url:*m3u8 AND cdn.finished_body_response:>3  AND   （cdn.domain:live.hcs.yottabyte.cn OR cdn.domain:livelimit.lovev.com OR cdn.domain:hlssplive.rizhiyi.com OR  cdn.domain:hlszblive.rizhiyi.com OR cdn.domain:sp.live.rizhiyi.com  OR cdn.domain:yy.live.rizhiyi.com OR cdn.domain:zb.live.rizhiyi.com） |top 10 tag  |where percent > 0.1  | eval per = format(\"%.1f%%\",percent)"}
{"input": "直播业务错误状态TOP10。直播平台域名包括：live.hcs.yottabyte.cn,livelimit.lovev.com,hlssplive.rizhiyi.com,hlszblive.rizhiyi.com,sp.live.rizhiyi.com,,yy.live.rizhiyi.com,zb.live.rizhiyi.com。索引可用字段有：cdn.cdn_status, cdn.clientip.geo.city, cdn.clientip.geo.isp, cdn.domain, cdn.event_name, cdn.finished_body_response, cdn.geo.city, cdn.geo.country, cdn.geo.province, cdn.http_status, cdn.prefix_url, cdn.proto, cdn.remote_addr, cdn.request_domain, cdn.request_url, cdn.src_outside_ip, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "华为CDN数据，编写查询语句实现如下分析场景", "output": "appname:cdn tag:huawei  AND (cdn.http_status:40? OR cdn.http_status:5??) AND  （live.hcs.yottabyte.cn OR cdn.domain:livelimit.lovev.com OR cdn.domain:hlssplive.rizhiyi.com OR  cdn.domain:hlszblive.rizhiyi.com OR cdn.domain:sp.live.rizhiyi.com  OR cdn.domain:yy.live.rizhiyi.com OR cdn.domain:zb.live.rizhiyi.com）|top 10 tag  |where percent > 0.1  | eval per = format(\"%.1f%%\",percent)|fields tag,count, per"}
{"input": "点播业务_ts超时状态TOP10节点。点播域名包括：vod.hcs.yottabyte.cn, hlsspvod.rizhiyi.com, sp.vod.rizhiyi.com, hlszbvod.rizhiyi.com。索引可用字段有：cdn.cdn_status, cdn.clientip.geo.city, cdn.clientip.geo.isp, cdn.domain, cdn.event_name, cdn.finished_body_response, cdn.geo.city, cdn.geo.country, cdn.geo.province, cdn.http_status, cdn.prefix_url, cdn.proto, cdn.remote_addr, cdn.request_domain, cdn.request_url, cdn.src_outside_ip, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "华为CDN数据，编写查询语句实现如下分析场景", "output": "appname:cdn tag:huawei AND cdn.prefix_url:*ts  AND cdn.finished_body_response:>3  AND   （(cdn.domain:vod.hcs.yottabyte.cn OR cdn.domain:hlsspvod.rizhiyi.com OR  cdn.domain:sp.vod.rizhiyi.com OR cdn.domain:hlszbvod.rizhiyi.com) |top 10 tag  |where percent > 0.1  | eval per = format(\"%.1f%%\",percent)"}
{"input": "点播业务_m3u8超时状态TOP10节点。点播域名包括：vod.hcs.yottabyte.cn, hlsspvod.rizhiyi.com, sp.vod.rizhiyi.com, hlszbvod.rizhiyi.com。索引可用字段有：cdn.cdn_status, cdn.clientip.geo.city, cdn.clientip.geo.isp, cdn.domain, cdn.event_name, cdn.finished_body_response, cdn.geo.city, cdn.geo.country, cdn.geo.province, cdn.http_status, cdn.prefix_url, cdn.proto, cdn.remote_addr, cdn.request_domain, cdn.request_url, cdn.src_outside_ip, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "华为CDN数据，编写查询语句实现如下分析场景", "output": "appname:cdn tag:huawei  AND cdn.prefix_url:*m3u8  AND cdn.finished_body_response:>3  AND   （(cdn.domain:vod.hcs.yottabyte.cn OR cdn.domain:hlsspvod.rizhiyi.com OR  cdn.domain:sp.vod.rizhiyi.com OR cdn.domain:hlszbvod.rizhiyi.com) |top 10 tag  |where percent > 0.1  | eval per = format(\"%.1f%%\",percent)"}
{"input": "点播业务错误状态节点TOP10。点播域名包括：vod.hcs.yottabyte.cn, hlsspvod.rizhiyi.com, sp.vod.rizhiyi.com, hlszbvod.rizhiyi.com。索引可用字段有：cdn.cdn_status, cdn.clientip.geo.city, cdn.clientip.geo.isp, cdn.domain, cdn.event_name, cdn.finished_body_response, cdn.geo.city, cdn.geo.country, cdn.geo.province, cdn.http_status, cdn.prefix_url, cdn.proto, cdn.remote_addr, cdn.request_domain, cdn.request_url, cdn.src_outside_ip, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "华为CDN数据，编写查询语句实现如下分析场景", "output": "appname:cdn tag:huawei AND (cdn.http_status:40? OR cdn.http_status:5??) AND  (cdn.domain:vod.hcs.yottabyte.cn OR cdn.domain:hlsspvod.rizhiyi.com OR  cdn.domain:sp.vod.rizhiyi.com OR cdn.domain:hlszbvod.rizhiyi.com)）|top 10 tag  |where percent > 0.1  | eval per = format(\"%.1f%%\",percent)"}
{"input": "高危主机ipTop10。索引可用字段有：tda.ICID, tda.act, tda.category, tda.detect_type, tda.dst_ip, tda.dst_port, tda.event_class, tda.host, tda.level, tda.net, tda.proto, tda.src.geo.city, tda.src_ip, tda.src_port, tda.status, tda.threats_desc, tda.threats_type, tda.threats_type_group, tda.type, tda.url, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "趋势tda数据，编写查询语句实现如下分析场景", "output": "appname:tda |stats dc(tda.attack_stage) as dcnt by tda.src_ip|where dcnt>1|sort by dcnt |limit 10"}
{"input": "易受攻击主机ipTop10。索引可用字段有：tda.ICID, tda.act, tda.category, tda.detect_type, tda.dst_ip, tda.dst_port, tda.event_class, tda.host, tda.level, tda.net, tda.proto, tda.src.geo.city, tda.src_ip, tda.src_port, tda.status, tda.threats_desc, tda.threats_type, tda.threats_type_group, tda.type, tda.url, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "趋势tda数据，编写查询语句实现如下分析场景", "output": "appname:tda |stats dc(tda.attack_stage) as dcnt by tda.dst_ip|where dcnt>1|sort by dcnt |limit 10"}
{"input": "高危urlTop10。索引可用字段有：tda.ICID, tda.act, tda.category, tda.detect_type, tda.dst_ip, tda.dst_port, tda.event_class, tda.host, tda.level, tda.net, tda.proto, tda.src.geo.city, tda.src_ip, tda.src_port, tda.status, tda.threats_desc, tda.threats_type, tda.threats_type_group, tda.type, tda.url, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "趋势tda数据，编写查询语句实现如下分析场景", "output": "appname:tda |stats dc(tda.attack_stage) as dcnt by tda.url|where dcnt>1|sort by dcnt |limit 10"}
{"input": "在线时长TOP10用户。索引可用字段有：vpn.action, vpn.actor.displayName, vpn.actype, vpn.app.upstream.host, vpn.app.upstream.port, vpn.app.web.request.url, vpn.auth_dst, vpn.dst.geo.city, vpn.dst.geo.country, vpn.dst.geo.ip, vpn.dst.geo.isp, vpn.dst.geo.latitude, vpn.dst.geo.longitude, vpn.dst.geo.province, vpn.dst_ip, vpn.dst_nt_host, vpn.dst_port, vpn.event_level, vpn.event_name, vpn.kv.dst.geo.country, vpn.kv.dst.geo.latitude, vpn.kv.dst.geo.longitude, vpn.kv.msg, vpn.kv.proto, vpn.kv.src.geo.city, vpn.kv.src.geo.country, vpn.kv.src.geo.latitude, vpn.kv.src.geo.longitude, vpn.kv.user, vpn.login_user, vpn.msg, vpn.msg.virtual_ip, vpn.proto, vpn.reason, vpn.resource_name, vpn.result, vpn.seconds, vpn.src._ip, vpn.src.geo.city, vpn.src.geo.country, vpn.src.geo.ip, vpn.src.geo.isp, vpn.src.geo.latitude, vpn.src.geo.longitude, vpn.src.geo.province, vpn.src_ip, vpn.src_ip.geo.city, vpn.src_ip.geo.country, vpn.src_port, vpn.state, vpn.target.displayName, vpn.time, vpn.transport, vpn.user, vpn.user_name, vpn.vpn.login_user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "vpn_softether数据，编写查询语句实现如下分析场景", "output": "appname:vpn tag:softether vpn.action:logout |eval time=formatdate(timestamp,\"HH:mm\") | table vpn.user,vpn.seconds|sort by vpn.seconds|where vpn.seconds>1|limit 10|eval duration=format(\"%.2f\",vpn.seconds/60)"}
{"input": "敏感文件打印。索引可用字段有：dlp.action, dlp.actionType, dlp.channelType, dlp.corporateType, dlp.details, dlp.dst_user, dlp.file_name, dlp.hostname, dlp.login_user, dlp.msg, dlp.policyNames, dlp.recv_mail, dlp.send_mail, dlp.service, dlp.severityType, dlp.src.geo.country, dlp.src_ip, dlp.src_user, dlp.user, dlp.workModeType, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "websense dlp数据，编写查询语句实现如下分析场景", "output": "appname:dlp tag:websense dlp.service:\"Endpoint Printing\" | stats count() as cnt by dlp.src_user,dlp.file_name | lookup desc sensitive_fname.csv on dlp.file_name=fname| where !empty(fname) | fields dlp.src_user,fname,desc,cnt| rename dlp.src_user as \"内部用户\",fname as \"敏感文件\",desc as \"文件详情\",cnt  as \"出现次数\""}
{"input": "敏感文件外发。索引可用字段有：dlp.action, dlp.actionType, dlp.channelType, dlp.corporateType, dlp.details, dlp.dst_user, dlp.file_name, dlp.hostname, dlp.login_user, dlp.msg, dlp.policyNames, dlp.recv_mail, dlp.send_mail, dlp.service, dlp.severityType, dlp.src.geo.country, dlp.src_ip, dlp.src_user, dlp.user, dlp.workModeType, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "websense dlp数据，编写查询语句实现如下分析场景", "output": "appname:dlp tag:websense dlp.service:\"Endpoint Email\" | stats count() as cnt by dlp.src_user,dlp.dst_user,dlp.file_name | lookup desc sensitive_fname.csv on dlp.file_name=fname| where !empty(fname) | fields dlp.src_user,dlp.dst_user,fname,desc,cnt| rename dlp.src_user as \"内部用户\",dlp.dst_user as \"外发用户\",fname as \"敏感文件\",desc as \"文件详情\",cnt  as \"出现次数\""}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "192.168.128.97 主机重启次数", "output": "ip:192.168.128.97 appname:linux tag:linux_boot | eval up_time=case(len(audit.up_time)==16,parsedate(audit.up_time,\"yyyy-MM-dd HH:mm\"),len(audit.up_time)==12,parsedate(audit.up_time,\"MMM dd HH:mm\")) | eval dura=tolong(abs(timestamp-up_time)) | stats min(dura) as _min by ip,audit.up_time | where _min < 600000 | stats count() "}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Linux操作系统审计_主机与NTP时间差(秒)", "output": "appname:linux tag:ntp   |dedup 1 ip  |eval diff_in_ms=tonumber(diff_in_ms) |eval offset=todouble(format(\"%.3f\",abs(diff_in_ms)/1000))  |where offset > 0.001 |stats count() as cnt by ip,hostname,offset  "}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Linux操作系统审计_NTP时间异常主机数", "output": "appname:linux tag:ntp   |dedup 1 ip  |eval diff_in_ms=tonumber(diff_in_ms) |eval offset=todouble(format(\"%.3f\",abs(diff_in_ms)/1000))  |where offset > 0.001 |stats count() as cnt"}
{"input": "按 ip、主机名、当前用户、当前用户数 4 个字段统计，每个 ip 保留一条，去掉 cnt，最后重命名各列为中文名称。索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Linux操作系统审计_linux当前用户数", "output": "appname:linux tag:user |stats count() as cnt by ip,hostname,users_num,users |dedup 1 ip |where cnt != 0 |fields -cnt |rename ip as \"IP地址\",hostname as \"主机名\",users as \"当前用户\",users_num as \"当前用户数\""}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Linux操作系统审计_系统重启事件数", "output": "appname:linux tag:boot |eval up_time1=case(len(up_time)==16,parsedate(up_time,\"yyyy-MM-dd HH:mm\"),len(up_time)==12,parsedate(up_time,\"MMM dd HH:mm\"))  |eval dura=tolong(abs(now()-up_time1)/1000/60)  |stats min(dura) as _min by ip,hostname,up_time |where _min<10 |stats count() as cnt"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "昨天的Linux主机堡垒机绕行登录，按时间(时分秒格式)、来源地址、登录地址、类型、用户名统计次数。堡垒机地址为：10.234.5.79和10.234.5.80", "output": "starttime=\"now/d-1d\" endtime=\"now/d\" appname:linux tag:secure event_name:登录成功事件 |eval time=formatdate(timestamp,\"HH:mm:ss\") |stats count() as cnt by time,src_ip,ip,type,user |where src_ip != \"10.234.5.79\" && linux.src_ip != \"10.234.5.80\" |rename time as \"登录时间\",src_ip as \"来源IP\",ip as \"目标主机\",type as \"登陆方式\",user as \"登录用户\",cnt as \"登录次数\""}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "昨天Linux多次尝试错误口令登录", "output": "starttime=\"now/d-1d\" endtime=\"now/d\" appname:linux tag:secure event_name:登录失败事件 \"Failed password for\"  |stats count() as cnt by src_ip,ip,user,type  |where cnt > 3 |rename src_ip as \"来源IP\",ip as \"目标主机\",user as \"登录用户\",type as \"登陆类型\",cnt as \"登录次数\""}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Linux3次以上尝试错误口令的登录事件，列出来源 ip、登录 ip、用户名、类型和尝试次数", "output": "appname:linux tag:secure event_name:登录失败事件 \"Failed password for\"  |stats count() as cnt by src_ip,ip,user,type  |where cnt > 3 "}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Linux多次尝试错误口令登录事件次数", "output": "appname:linux tag:secure event_name:登录失败事件 \"Failed password for\"  |stats count() as cnt by src_ip,ip,user,type  |where cnt > 3 |stats count() as cnt"}
{"input": "索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "aix每天主机登录列表", "output": "appname:aix tag:last| stats count(hostname) as count_ by hostname,aix.user,aix.type,aix.span_h,aix.span_m,aix.src_ip,timestamp |eval ts=formatdate(timestamp) |eval l_way=if(match(aix.type,\"ftp\"),0,1)| where l_way>0  |eval span_h=(todouble(aix.span_h))*3600 |eval span_m=(todouble(aix.span_m))*60 |eval login_cost=span_h+span_m  |rename hostname as login_host, aix.user as login_user, aix.type as login_way, aix.src_ip as login_srcip  |fields login_host,login_user,login_way,login_srcip,ts,login_cishu,login_cost |rename login_host as \"登录主机\", login_user as \"登录用户\", login_way as  \"登录方式\", login_srcip as \"登录ip\", ts as \"登录时间\", login_cost as \"登录时长_秒\""}
{"input": "", "instruction": "从rizhiyi中查询功能访问次数，要求过滤掉本地来源，过滤掉空用户名", "output": "appname:rizhiyi tag:yottaweb_audit module_cn:* NOT remote_addr:127.0.0.1 |where !empty(user_name) |stats count() as cnt"}
{"input": "postgresql数据库操作命令标签占比。索引可用字段有：postgresql.command_tag, postgresql.database, postgresql.duration, postgresql.error_severity, postgresql.ip, postgresql.sql_state_code, postgresql.stringmess, postgresql.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "postgresql日志数据，编写查询语句实现如下分析场景", "output": "appname:postgresql postgresql.command_tag:*| stats count() by postgresql.command_tag|eval aaa=len(postgresql.command_tag)|where aaa>0"}
{"input": "主机登录列表_日报。索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "aix日志数据，编写查询语句实现如下分析场景", "output": "appname:aix tag:last| stats count(hostname) as count_ by hostname,aix.user,aix.type,aix.span_h,aix.span_m,aix.src_ip,timestamp |eval ts=formatdate(timestamp)\n|eval l_way=if(match(aix.type,\"ftp\"),0,1)| where l_way>0\n\n|eval span_h=(todouble(aix.span_h))*3600\n|eval span_m=(todouble(aix.span_m))*60\n|eval login_cost=span_h+span_m\n"}
{"input": "非工作时间的登录列表_日报。索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "aix日志数据，编写查询语句实现如下分析场景", "output": "appname:aix tag:last|eval time1=tolong(formatdate(timestamp,\"HH\"))| where time1 > 18 || time1 < 8 | stats count(hostname) as count_ by hostname,aix.user,aix.login_way,aix.span_h,aix.span_m,aix.src_ip,timestamp\n|eval l_way=if(match(aix.type,\"ftp\"),0,1)| where l_way>0\n|eval ts=formatdate(timestamp)\n\n\n|eval span_h=(todouble(aix.span_h))*3600\n|eval span_m=(todouble(aix.span_m))*60\n|eval login_cost=span_h+span_m\n"}
{"input": "攻击大于100次的IP分布。索引可用字段有：ips.action, ips.application, ips.attack_name, ips.attack_type, ips.block_reason, ips.cve, ips.dst.geo.city, ips.dst.geo.ip, ips.dst.geo.latitude, ips.dst.geo.longitude, ips.dst_ip, ips.dst_port, ips.event, ips.event_id, ips.event_level, ips.event_name, ips.inbound_interface, ips.inbound_zone, ips.level, ips.local, ips.msg.seclevel, ips.outbound_interface, ips.outbound_zone, ips.policy, ips.proto, ips.service, ips.severity, ips.src.geo.city, ips.src.geo.country, ips.src.geo.ip, ips.src.geo.latitude, ips.src.geo.longitude, ips.src.geo.province, ips.src_ip, ips.src_port, ips.url, ips.vendor_app, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "ips_fortinet数据，编写查询语句实现如下分析场景", "output": "appname:ips tag:fortinet | stats count() as cnt by ips.src.geo.ip,ips.dst.geo.ip|where cnt>100"}
{"input": "攻击IP趋势图。索引可用字段有：ips.action, ips.application, ips.attack_name, ips.attack_type, ips.block_reason, ips.cve, ips.dst.geo.city, ips.dst.geo.ip, ips.dst.geo.latitude, ips.dst.geo.longitude, ips.dst_ip, ips.dst_port, ips.event, ips.event_id, ips.event_level, ips.event_name, ips.inbound_interface, ips.inbound_zone, ips.level, ips.local, ips.msg.seclevel, ips.outbound_interface, ips.outbound_zone, ips.policy, ips.proto, ips.service, ips.severity, ips.src.geo.city, ips.src.geo.country, ips.src.geo.ip, ips.src.geo.latitude, ips.src.geo.longitude, ips.src.geo.province, ips.src_ip, ips.src_port, ips.url, ips.vendor_app, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "ips_fortinet数据，编写查询语句实现如下分析场景", "output": "appname:ips tag:fortinet |eval ts=formatdate(timestamp,\"MM-dd HH:mm\")|stats count() as cnt by ts, ips.src.geo.ip |where cnt>100"}
{"input": "用户访问错误码统计。索引可用字段有：nginx.bytes, nginx.clientip, nginx.event, nginx.geo.city, nginx.geo.isp, nginx.geo.province, nginx.method, nginx.real_ip.last, nginx.request_path, nginx.request_raw.request_url, nginx.request_time, nginx.src_ip, nginx.status, nginx.upstream, nginx.uri, nginx.user_agent.browser, nginx.user_agent.device, nginx.user_agent.os, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "Thinkbus_Nginx用户访问数据，编写查询语句实现如下分析场景", "output": "appname:nginx | where middleware.rsp > 399 | stats count() by middleware.rsp"}
{"input": "h_特权账号暴力破解。", "instruction": "企业bg数据，编写查询语句实现如下分析场景", "output": "appname:h_1  h_1.result:failure h_1.type:privilege| stats count() as cnt by h_1.user_name| where cnt> 5|rename h_1.user_name \tas \"特权账号\""}
{"input": "h_账号权限变更异常。", "instruction": "企业bg数据，编写查询语句实现如下分析场景", "output": "appname:h_1  h_1.action:permission_change| stats count() as cnt by h_1.user_name| where cnt > 10|rename h_1.user_name as \"账户\",cnt as \"次数\""}
{"input": "h_租户账户的暴力破解。", "instruction": "企业bg数据，编写查询语句实现如下分析场景", "output": "appname:h_1 h_1.result:failure |stats count() as cnt by  h_1.domain\t| where cnt > 10| rename h_1.domain as \"租户账户\",cnt as \"次数\""}
{"input": "h_数量基线_账户5分钟登陆营销系统10次。", "instruction": "企业bg数据，编写查询语句实现如下分析场景", "output": "appname:h_1 | stats count() as cnt by h_1.user_name,h_1.loacl_ip| eval system=if(h_1.loacl_ip==\"2.1.1.12\",\"营销系统\",system)|fields h_1.user_name,system,cnt| where cnt > 10"}
{"input": "h_关系_账户变换来源ip登录应用系统。", "instruction": "企业bg数据，编写查询语句实现如下分析场景", "output": "appname:h_1 | stats count() as cnt by h_1.src_ip,h_1.user_name,h_1.loacl_ip|fields h_1.user_name,h_1.src_ip,h_1.loacl_ip|mvcombine h_1.src_ip|where  len(h_1.src_ip)>16|rename h_1.src_ip as \"源ip地址\",h_1.user_name as \"账户\",h_1.loacl_ip as \"目标机\""}
{"input": "核心交易大于10毫秒功能及耗时分布。", "instruction": "核心交易系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':ensemble  ensemble.excute_time:*|eval aa=tolong(ensemble.excute_time)|where aa>10|stats count() as cnt by ensemble.fuc_name,ensemble.excute_time"}
{"input": "清算交易大于10毫秒功能及耗时分布。", "instruction": "清算系统数据，编写查询语句实现如下分析场景", "output": "* AND  'appname':accounting  accounting.excute_time:*|eval aa=tolong(accounting.excute_time)|where aa>10|stats count() as cnt by accounting.fuc_name,accounting.excute_time"}
{"input": "http状态码占比。索引可用字段有：threat.attack_name, threat.attack_type, threat.dst_ip, threat.dst_port, threat.src.geo.city, threat.src.geo.country, threat.src.geo.province, threat.src_ip, threat.status_code, threat.threat_level, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "奇安信_威胁感知数据，编写查询语句实现如下分析场景", "output": "appname:threat tag:360 | stats count() as cnt by threat.status_code|where len(threat.status_code)>1"}
{"input": "索引可用字段有：dbaudit.alert_type, dbaudit.app_name, dbaudit.dataSubType, dbaudit.databaseName, dbaudit.dst_ip, dbaudit.dst_port, dbaudit.level, dbaudit.payload, dbaudit.rule, dbaudit.ruleName, dbaudit.rule_name, dbaudit.src_ip, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "数据库审计日志中触发告警事件TOP10", "output": "(appname:dbaudit AND tag:dbappsecurity) | stats count() as cnt by dbaudit.rule_name|where len(dbaudit.rule_name)>1|limit 10"}
{"input": "用户体验mos_质差top10。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒分析_数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0\nstb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知\n|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)\n|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)\n|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)\n|stats count(stb_vixtel_smpegts.programName) as playCount,avg(avgMos) as avg_avgMos,avg(tsLostRate) as avg_tsLostRate,avg(avgThroughput) as avg_avgThroughput by stb_vixtel_smpegts.programName\n|eval avg_avgThroughput_1=format(\"%.2f\",avg_avgThroughput/1000000)\n|eval avg_avgMos_1=format(\"%.3f\",avg_avgMos)\n|eval avg_tsLostRate_1=format(\"%.2f\",avg_tsLostRate)\n|eval aaa=len(stb_vixtel_smpegts.programName)\n|where aaa>1\n|sort by +avg_avgMos_1|limit 10"}
{"input": "mos质差直播频道top10。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒日志分析_实时数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0.000\nstb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知\n|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)\n|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)\n|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)\n|stats count(stb_vixtel_smpegts.programName) as playCount,avg(avgMos) as avg_avgMos,avg(tsLostRate) as avg_tsLostRate,avg(avgThroughput) as avg_avgThroughput by stb_vixtel_smpegts.programName\n|eval avg_avgThroughput_1=format(\"%.2f\",avg_avgThroughput/1000000)\n|eval avg_avgMos_1=format(\"%.3f\",avg_avgMos)\n|eval avg_tsLostRate_1=format(\"%.2f\",avg_tsLostRate)\n|eval aaa=len(stb_vixtel_smpegts.programName)\n|where aaa>1\n|sort by +avg_avgMos_1|limit 10"}
{"input": "吞吐率低直播流视频top10。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒日志分析_实时数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0.000\nstb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知\n|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)\n|stats count(stb_vixtel_smpegts.programName) as playCount,avg(avgThroughput) as avg_avgThroughput by stb_vixtel_smpegts.programName\n|eval avg_avgThroughput_1=format(\"%.2f\",avg_avgThroughput/1000000)\n|eval aaa=len(stb_vixtel_smpegts.programName)\n|where aaa>1\n|sort by +avg_avgThroughput_1|limit 10"}
{"input": "TS丢包率高直播频道top10。索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "机顶盒日志分析_实时数据，编写查询语句实现如下分析场景", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0\nstb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知\n|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)\n|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)\n|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)\n|stats count(stb_vixtel_smpegts.programName) as playCount,avg(tsLostRate) as avg_tsLostRate by stb_vixtel_smpegts.programName\n|eval avg_tsLostRate_1=format(\"%.3f\",avg_tsLostRate)\n|eval aaa=len(stb_vixtel_smpegts.programName)\n|where aaa>1\n|sort by avg_tsLostRate_1|limit 10"}
{"input": "最近 30 条访问轨迹。", "instruction": "防火墙checkpoint日志数据，编写查询语句实现如下分析场景", "output": "(* AND appname:firewall) AND tag:checkpoint (NOT firewall.kv.proto:icmp)\n|eval src_port=tostring(if(empty(firewall.src_port),0,firewall.src_port))\n|eval src_ip=if(empty(firewall.src_ip),0,firewall.src_ip)\n|eval dst_ip=if(empty(firewall.dst_ip),0,firewall.dst_ip)\n|eval dst_port=tostring(if(empty(firewall.kv.service),0,firewall.kv.service))\n|eval proto=tostring(if(empty(firewall.kv.proto),0,firewall.kv.proto))\n|eval aaa=src_ip+\"_\"+src_port+\"_\"+proto|eval bbb=dst_ip+\"_\"+dst_port| stats count()  as count_1 by aaa,bbb|sort by count_1|limit 30\n|rename aaa as from\n|rename bbb as to|where from !=\"0_0_0\""}
{"input": "展示访问量最大的前 10 条网络五元组的访问轨迹，包括源ip、源端口、源协议、目的ip、目的端口和目的类型等。 五元组中所有空数据都设定为 0，并过滤掉源 ip 为 0 的空数据。。", "instruction": "亚信tda趋势发现日志数据，编写查询语句实现如下分析场景", "output": "appname:tda\n|eval src_port=if(empty(tda.src_port),0,tda.src_port)\n|eval src_ip=if(empty(tda.src_ip\t),0,tda.src_ip)\n|eval dst_ip=if(empty(tda.dst_ip),0,tda.dst_ip)\n|eval dst_port=if(empty(tda.dst_port),0,tda.dst_port)\n|eval proto=if(empty(tda.app),0,tda.app)\n|eval type=if(empty(tda.type),0,tda.type)\n|where src_ip != 0\n|eval aaa=src_ip+\"_\"+src_port+\"_\"+proto|eval bbb=dst_ip+\"_\"+dst_port+\"_\"+type| stats count()  as count_1 by aaa,bbb|sort by count_1|limit 10\n|rename aaa as from\n|rename bbb as to"}
{"input": "索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "aix非工作时间的登录列表_日报", "output": "appname:aix tag:last|eval time1=tolong(formatdate(timestamp,\"HH\"))| where time1 > 18 || time1 < 8 | stats count(hostname) as count_ by hostname,aix.user,aix.login_way,aix.span_h,aix.span_m,aix.src_ip,timestamp |eval l_way=if(match(aix.type,\"ftp\"),0,1)| where l_way>0 |eval ts=formatdate(timestamp)   |eval span_h=(todouble(aix.span_h))*3600 |eval span_m=(todouble(aix.span_m))*60 |eval login_cost=span_h+span_m  |rename hostname as login_host, aix.user as login_user, aix.type as login_way, aix.src_ip as login_srcip  |sort by login_cost |fields login_host,login_user,login_way,login_srcip,ts,login_cost |rename login_host as \"登录主机\", ts as \"登录时间\", login_user as \"登录用户\", login_srcip as \"登录ip\", login_way as  \"登录方式\", login_cost as \"登录时长_秒\" "}
{"input": "索引可用字段有：aix.class_dec, aix.dst_host, aix.facility, aix.login_time, aix.login_way, aix.net, aix.resource_name, aix.severity, aix.span_h, aix.span_m, aix.src_ip, aix.src_port, aix.type, aix.type_dec, aix.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "aix主机登录列表_日报", "output": " appname:aix tag:last| stats count(hostname) as count_ by hostname,aix.user,aix.type,aix.span_h,aix.span_m,aix.src_ip,timestamp |eval ts=formatdate(timestamp) |eval l_way=if(match(aix.type,\"ftp\"),0,1)| where l_way>0  |eval span_h=(todouble(aix.span_h))*3600 |eval span_m=(todouble(aix.span_m))*60 |eval login_cost=span_h+span_m  |rename hostname as login_host, aix.user as login_user, aix.type as login_way, aix.src_ip as login_srcip |sort by login_cost |fields login_host,login_user,login_way,login_srcip,ts,login_cishu,login_cost |rename login_host as \"登录主机\", login_user as \"登录用户\", login_way as  \"登录方式\", login_srcip as \"登录ip\", ts as \"登录时间\", login_cost as \"登录时长_秒\""}
{"input": "源ip_源端口_目的ip_目的端口_动作-top10。索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "深信服防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:sangfor\n|where !empty(firewall.dst.geo.city)\n|where !empty(firewall.src_ip)\n|where !empty(firewall.src_port)\n|where !empty(firewall.dst_ip)\n|where !empty(firewall.dst_port)\n|where !empty(firewall.app_name)\n|eval aaa=firewall.dst.geo.city+\"_\"+firewall.src_ip+\"_\"+firewall.src_port+\"_\"+firewall.dst_ip+\"_\"+firewall.dst_port+\"_\"+firewall.app_name|stats count() as count_ by aaa|sort by count_|limit 10"}
{"input": "拒绝行为_源ip源端口_top10。索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "深信服防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:sangfor firewall.action:拒绝\n|where !empty(firewall.dst.geo.city)\n|where !empty(firewall.src_ip)\n|where !empty(firewall.src_port)\n|eval aaa=firewall.dst.geo.city+\"_\"+firewall.src_ip+\"_\"+firewall.src_port\n|stats count() as count_ by aaa|sort by count_|limit 10"}
{"input": "拒绝行为_目的ip端口类型_top10。索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "深信服防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:sangfor firewall.action:拒绝\n|where !empty(firewall.dst_ip)\n|where !empty(firewall.dst_port)\n|where !empty(firewall.app_name)\n|eval bbb=firewall.dst_ip+\"_\"+firewall.dst_port+\"_\"+firewall.app_name\n|stats count() as count_ by bbb|sort by count_|limit 10"}
{"input": "访问情况_拒绝_关联top10。索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "深信服防火墙日志数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:sangfor firewall.action:拒绝\n|where !empty(firewall.dst_ip)\n|where !empty(firewall.src_ip)\n|where !empty(firewall.src_port)\n|where !empty(firewall.dst_ip)\n|where !empty(firewall.dst_port)\n|where !empty(firewall.app_name)\n|eval aaa=firewall.src.geo.city+\"_\"+firewall.src.geo.ip+\"_\"+firewall.src_port\n|eval bbb=firewall.dst_ip+\"_\"+firewall.dst_port+\"_\"+firewall.app_name\n| stats count() as count_ by aaa,bbb\n|sort by count_|limit 10\n|rename aaa as from\n|rename bbb as to"}
{"input": "索引可用字段有：fortress.action, fortress.dst_ip, fortress.facility, fortress.host_ip, fortress.input, fortress.ip, fortress.level, fortress.log_type, fortress.loginOK, fortress.login_user, fortress.message, fortress.msg.action, fortress.msg.adlg_type, fortress.msg.begin_time, fortress.msg.command, fortress.msg.date, fortress.msg.mode, fortress.msg.module, fortress.msg.session_guid, fortress.msg.src_ip, fortress.msg.srcip, fortress.msg.srvaddr, fortress.msg.system_user, fortress.msg.sysuser, fortress.node, fortress.protocol, fortress.reason, fortress.remote_addr, fortress.request_msg, fortress.result, fortress.secondary_user, fortress.server, fortress.severity, fortress.src_ip, fortress.src_port, fortress.status, fortress.system_user, fortress.type, fortress.user, fortress.user_agent, fortress.user_name, fortress.username, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道在公司的防火墙上做了哪些事情，可以吗？我需要知道的是具体的时间、发生事件的主机IP地址、所属部门或机构以及执行的操作和指令。", "output": "appname:fortress tag:shterm | eval time=formatdate(timestamp,\"MM-dd HH:mm\")|table time,fortress.src_ip,fortress.server,fortress.login_user,fortress.node,fortress.server,fortress.msg.command,fortress.msg.action|where!empty(fortress.msg.command)|rename fortress.msg.command as \"命令\",fortress.src_ip as \"操作ip\",fortress.server as \"被操作服务器/应用\",fortress.login_user as \"操作用户\",fortress.node as \"节点\",fortress.msg.action as \"动作\""}
{"input": "", "instruction": "我想问的是，每分钟的最大并发连接数分别在哪些实例上达到了峰值？", "output": "appname:lingcloud AND tag:inst_kpi_all_site|stats max(lingcloud.data.conCurConnNum) as cnt by lingcloud.siteid|sort by cnt|limit 20|lookup sitename dclingcloud_site.csv on lingcloud.siteid=siteid|where!empty(sitename)"}
{"input": "索引可用字段有：cdn.cdn_status, cdn.clientip.geo.city, cdn.clientip.geo.isp, cdn.domain, cdn.event_name, cdn.finished_body_response, cdn.geo.city, cdn.geo.country, cdn.geo.province, cdn.http_status, cdn.prefix_url, cdn.proto, cdn.remote_addr, cdn.request_domain, cdn.request_url, cdn.src_outside_ip, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "请帮我查询一下内的华为云CDN，m3u8文件的响应时间大于 3 秒的访问中，访问量排名前十的域名，忽略掉占比小于百分之 0.1 的部分，并以百分号显示。", "output": "appname:cdn tag:huawei  AND cdn.prefix_url:*m3u8  AND cdn.finished_body_response:>3  AND   （(cdn.domain:vod.hcs.yottabyte.cn OR cdn.domain:hlsspvod.rizhiyi.com OR  cdn.domain:sp.vod.rizhiyi.com OR cdn.domain:hlszbvod.rizhiyi.com) |top 10 cdn.domain  |where percent > 0.1  | eval per = format(\"%.1f%%\",percent)"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，我的服务器有几个不同的 IP 访问过吗？请帮忙列出这些 IP 和对应的访问次数。", "output": "appname:linux tag:user |stats count() as cnt by ip,hostname,users_num,users |dedup 1 ip |where cnt!= 0 |fields -cnt |rename ip as \"IP地址\",hostname as \"主机名\",users as \"当前用户\",users_num as \"当前用户数\""}
{"input": "", "instruction": "我想问的是有没有人在使用 yottaweb_audit 模块，并且不是从 127.0.0.1 IP 地址访问的，并且用户名称不为空的情况发生了多少次。", "output": "appname:rizhiyi tag:yottaweb_audit module_cn:* NOT remote_addr:127.0.0.1 |where!empty(user_name) |stats count() as cnt"}
{"input": "", "instruction": "想查询某应用的用户在一天内使用了多少次特权功能。", "output": "appname:h_1  h_1.result:failure h_1.type:privilege| stats count() as cnt by h_1.user_name| where cnt> 5|rename h_1.user_name  as \"特权账号\""}
{"input": "索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，流量最高的电视节目是什么？请告诉我播放次数、平均质量分数和丢包率排名前十的节目的信息。", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0stb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)|stats count(stb_vixtel_smpegts.programName) as playCount,avg(avgMos) as avg_avgMos,avg(tsLostRate) as avg_tsLostRate,avg(avgThroughput) as avg_avgThroughput by stb_vixtel_smpegts.programName|eval avg_avgThroughput_1=format(\"%.2f\",avg_avgThroughput/1000000)|eval avg_avgMos_1=format(\"%.3f\",avg_avgMos)|eval avg_tsLostRate_1=format(\"%.2f\",avg_tsLostRate)|eval aaa=len(stb_vixtel_smpegts.programName)|where aaa>1|sort by +avg_avgMos_1|limit 10"}
{"input": "索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，有没有流量卡顿或者掉包的情况吗？如果有的话，那应该是哪些频道出现的问题呢？", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0.000stb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)|stats count(stb_vixtel_smpegts.programName) as playCount,avg(avgThroughput) as avg_avgThroughput by stb_vixtel_smpegts.programName|eval avg_avgThroughput_1=format(\"%.2f\",avg_avgThroughput/1000000)|eval aaa=len(stb_vixtel_smpegts.programName)|where aaa>1|sort by +avg_avgThroughput_1|limit 10"}
{"input": "索引可用字段有：stb_vixtel_smpegts.avgMos, stb_vixtel_smpegts.district, stb_vixtel_smpegts.downloadTime, stb_vixtel_smpegts.programName, stb_vixtel_smpegts.stbId, stb_vixtel_smpegts.tsLostRate, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我在询问的是内，STB_VIXTEL_SMPEGTS直播流的质量、延迟和丢包率等指标信息。", "output": "appname:stb_vixtel_smpegts stb_vixtel_smpegts.avgMos:>=0 stb_vixtel_smpegts.tsLostRate:>=0stb_vixtel_smpegts.avgThroughput:>=0 NOT stb_vixtel_smpegts.programName:未知|eval avgMos=todouble(stb_vixtel_smpegts.avgMos)|eval tsLostRate=todouble(stb_vixtel_smpegts.tsLostRate)|eval avgThroughput=todouble(stb_vixtel_smpegts.avgThroughput)|stats count(stb_vixtel_smpegts.programName) as playCount,avg(tsLostRate) as avg_tsLostRate by stb_vixtel_smpegts.programName|eval avg_tsLostRate_1=format(\"%.3f\",avg_tsLostRate)|eval aaa=len(stb_vixtel_smpegts.programName)|where aaa>1|sort by avg_tsLostRate_1|limit 10"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "帮我设计一个安全审计报告的 SPL 查询语句。", "output": "appname:linux tag:secure (type:useradd OR type:passwd OR type:usermod OR type:groupadd OR type:gpasswd OR type:groupmod) |where!empty(user) |sort by +timestamp |rename time as \"时间\",ip as \"IP地址\",hostname as \"主机名\",type as \"用户操作\",user as \"添加用户\""}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道有哪些关于 Linux 下安全相关的操作记录，比如用户管理、密码修改等等，但是不包括安装或卸载软件。", "output": "appname:linux tag:secure (type:userdel OR type:passwd OR type:usermod OR type:groupdel OR type:gpasswd OR type:groupmod) |where!empty(user)"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想询问最近一次访问 Linux 系统的用户的信息，并列出他们的登录、注销和使用的详细信息", "output": "appname:linux tag:last  |where!empty(user)  |eval logout_time=if(empty(logout_time),\"still logged in\",logout_time) |eval use_time=if(empty(use_time),\"still logged in\",use_time) |table ip,user,terminal,login_time,logout_time,use_time,src_ip |rename ip as '服务器',user as '用户',terminal as '终端',login_time as '登录时间',logout_time as '注销时间',use_time as '使用时长',src_ip as '源IP'"}
{"input": "索引可用字段有：oracle.ACCOUNT_STATUS, oracle.ACTION, oracle.ACTION_NAME, oracle.BLOCK_CHANGES, oracle.CREATED, oracle.EVENT, oracle.EXECUTIONS, oracle.EXPIRY_DATE, oracle.FILE_COUNTS, oracle.FILE_SIZE, oracle.FREE_BYTES, oracle.GRANTED_ROLE, oracle.GRANTEE, oracle.HOST_NAME, oracle.INSTANCE_NAME, oracle.JOB, oracle.LAST_DATE, oracle.LIMIT, oracle.LOCK_DATE, oracle.LOGON_TIME, oracle.LOG_USER, oracle.MACHINE, oracle.NEXT_DATE, oracle.Name, oracle.ORACODE, oracle.OSUSER, oracle.PHYSICAL_READS, oracle.PROFILE, oracle.PROG, oracle.PROGRAM, oracle.RESOURCE_NAME, oracle.RESOURCE_TYPE, oracle.SID, oracle.SPID, oracle.SQL_ID, oracle.SQL_TEXT, oracle.STATUS, oracle.TABLESPACE_NAME, oracle.TERMINAL, oracle.TOTAL_BLOCKS, oracle.TOTAL_BYTES, oracle.TS_COUNTS, oracle.USED_BYTES, oracle.USED_SIZE, oracle.USERNAME, oracle.VALUE, oracle.WAIT_TIME, oracle.WHAT, oracle.action, oracle.conn_str.HOST, oracle.conn_str.SID, oracle.description, oracle.event, oracle.host, oracle.host_addr, oracle.logical_reads_M, oracle.login_user, oracle.msg, oracle.ora_code, oracle.osprivilege, oracle.physical_reads_M, oracle.policy, oracle.src_ip, oracle.status, oracle.tns_error, oracle.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问如何编写一个日志易查询以获取 Oracle 数据库的元数据信息。这个查询首先从所有索引中检索 `Oracle` 相关的信息，并将结果按 `_time` 字段进行倒序排序。然后使用 `table` 命令将搜索到的各个字段打印在屏幕上。接着使用 `where` 命令过滤掉不符合要求的记录，例如 `ORCL:TRACE` 和 `ORCL:REPLAY` 源类型的数据。最后使用 `rename` 命令将 `hostname` 字段重命名为 `域名`，`oracle.INSTANCE_NAME` 字段重命名为 `实例名`，`oracle.STATUS` 字段重命名为 `状态`，`oracle.STARTUP_TIME` 字段重命名为 `上次启动时间`。", "output": "appname:oracle tag:meta |sort by timestamp|limit 1|table hostname, oracle.INSTANCE_NAME, oracle.STATUS, oracle.STARTUP_TIME|rename hostname as '域名', oracle.INSTANCE_NAME as '实例名', oracle.STATUS as '状态', oracle.STARTUP_TIME as '上次启动时间'"}
{"input": "索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问有关某些服务的访问情况和相应时间的统计信息，具体包括以下几个方面：1. 用户应用服务器（User App Server）的各项指标数据，例如请求总数、响应时间等；2. 服务名（ServName）为“其他”、“网络协议”、“HTTP POST”之外的所有服务的信息；3. 某些特定的用户应用或系统功能模块（AppName）如“其他”、“IT相关”之外的信息；4. 需要展示给用户的名称（Show Name），即在界面上显示的名字；5. 数据中不包含“其他”、“网络协议”、“HTTP POST”这三种特殊服务的数据。", "output": "_index:metrics access_control.metrics_name:user_app_serv |stats sum(time) as time by access_control.servname,access_control.appname,access_control.name,access_control.show_name|where access_control.servname!=\"其他\" &&  access_control.servname!=\"网络协议\"  &&  access_control.servname!=\"HTTP_POST\" &&  access_control.appname!=\"其他\" &&  access_control.appname!=\"IT相关\"|sort by time|limit 30"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问有关某台服务器的登录信息以及该服务器在上一次启动时到现在已经运行的时间间隔是否小于六十万毫秒（即一分钟）。", "output": "ip:192.168.128.96 appname:linux tag:linux_boot | eval up_time=case(len(audit.up_time)==16,parsedate(audit.up_time,\"yyyy-MM-dd HH:mm\"),len(audit.up_time)==12,parsedate(audit.up_time,\"MMM dd HH:mm\")) | eval dura=tolong(abs(timestamp-up_time)) | stats min(dura) as _min by ip,audit.up_time | where _min < 600000 "}
{"input": "索引可用字段有：tda.ICID, tda.act, tda.category, tda.detect_type, tda.dst_ip, tda.dst_port, tda.event_class, tda.host, tda.level, tda.net, tda.proto, tda.src.geo.city, tda.src_ip, tda.src_port, tda.status, tda.threats_desc, tda.threats_type, tda.threats_type_group, tda.type, tda.url, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，最近有没有人在使用同样的应用（appname）进行大量的攻击（attack_stage=“ATTACK”），并源自同一台机器IP地址（src_ip）。你认为这十个 IP 是谁呢？", "output": "appname:tda |stats dc(tda.attack_stage) as dcnt by tda.src_ip|where dcnt>1|sort by dcnt |limit 10"}
{"input": "索引可用字段有：tda.ICID, tda.act, tda.category, tda.detect_type, tda.dst_ip, tda.dst_port, tda.event_class, tda.host, tda.level, tda.net, tda.proto, tda.src.geo.city, tda.src_ip, tda.src_port, tda.status, tda.threats_desc, tda.threats_type, tda.threats_type_group, tda.type, tda.url, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道有多少个不同的攻击阶段（attack stage），以及它们对应的目标 IP（destination ip）。这些不同攻击阶段的数量应该大于等于 1，并且排名最高的那个数量应该最大。", "output": "appname:tda |stats dc(tda.attack_stage) as dcnt by tda.dst_ip|where dcnt>1|sort by dcnt |limit 10"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "堡垒机 10.200.0.79 和 10.200.0.80 以外成功登录的绕行堡垒机登录数量，按秒级时间和来源地址、登录地址、用户名等统计：", "output": "appname:linux tag:secure event_name:登录成功事件 |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\") |stats count() as cnt by time,src_ip,ip,type,user |where src_ip!= \"10.200.0.79\" && linux.src_ip!= \"10.200.0.80\" |stats count() as cnt |eval type=\"Linux主机绕行堡垒机登录事件\"]]"}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问如何在日志易中使用 EVAL 和 CASE 函数进行时间转换和计算，并筛选出持续时间小于 600 秒的记录。", "output": "ip:192.168.128.97 appname:linux tag:linux_boot | eval up_time=case(len(audit.up_time)==16,parsedate(audit.up_time,\"yyyy-MM-dd HH:mm\"),len(audit.up_time)==12,parsedate(audit.up_time,\"MMM dd HH:mm\")) | eval dura=tolong(abs(timestamp-up_time)) | stats min(dura) as _min by ip,audit.up_time | where _min < 600000 | stats count() "}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问关于某 Linux 应用的 NTP（网络时间协议）标签下的日志中，查询延迟大于 0.001 秒的 IP、主机名和偏移量的信息数量。", "output": "appname:linux tag:ntp   |dedup 1 ip  |eval diff_in_ms=tonumber(diff_in_ms) |eval offset=todouble(format(\"%.3f\",abs(diff_in_ms)/1000))  |where offset > 0.001 |stats count() as cnt by ip,hostname,offset  "}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想知道在 Linux 下有哪些安全性问题比较严重的应用，比如常见的漏洞或者攻击手段等信息。", "output": "appname:linux tag:secure event_name:登录失败事件 \"Failed password for\"  |stats count() as cnt by src_ip,ip,user,type  |where cnt > 3 "}
{"input": "索引可用字段有：postgresql.command_tag, postgresql.database, postgresql.duration, postgresql.error_severity, postgresql.ip, postgresql.sql_state_code, postgresql.stringmess, postgresql.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是数据库的哪些表有数据量比较大吗？可以列举几个表名吗？还有这些表的数据类型和大小分别是多少？", "output": "appname:postgresql postgresql.command_tag:*| stats count() by postgresql.command_tag|eval aaa=len(postgresql.command_tag)|where aaa>0"}
{"input": "索引可用字段有：ips.action, ips.application, ips.attack_name, ips.attack_type, ips.block_reason, ips.cve, ips.dst.geo.city, ips.dst.geo.ip, ips.dst.geo.latitude, ips.dst.geo.longitude, ips.dst_ip, ips.dst_port, ips.event, ips.event_id, ips.event_level, ips.event_name, ips.inbound_interface, ips.inbound_zone, ips.level, ips.local, ips.msg.seclevel, ips.outbound_interface, ips.outbound_zone, ips.policy, ips.proto, ips.service, ips.severity, ips.src.geo.city, ips.src.geo.country, ips.src.geo.ip, ips.src.geo.latitude, ips.src.geo.longitude, ips.src.geo.province, ips.src_ip, ips.src_port, ips.url, ips.vendor_app, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "首先从 logs_cef 索引中检索包含 appname、ips 和 fortinet 标签的数据；然后使用 eval 转换器将时间戳字段 timestamp 格式化为字符串类型并添加到名为 ts 的新列中；接着使用 stats 聚合器计算每个时间段内源 IP 地址出现次数超过 100 次的数据点数量；最后通过 where 过滤器只保留满足条件的数据集。", "output": "appname:ips tag:fortinet |eval ts=formatdate(timestamp,\"MM-dd HH:mm\")|stats count() as cnt by ts, ips.src.geo.ip |where cnt>100"}
{"input": "索引可用字段有：nginx.bytes, nginx.clientip, nginx.event, nginx.geo.city, nginx.geo.isp, nginx.geo.province, nginx.method, nginx.real_ip.last, nginx.request_path, nginx.request_raw.request_url, nginx.request_time, nginx.src_ip, nginx.status, nginx.upstream, nginx.uri, nginx.user_agent.browser, nginx.user_agent.device, nginx.user_agent.os, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道 Nginx 中间件返回状态码大于等于 400 时有多少条记录。", "output": "appname:nginx | where middleware.rsp > 399 | stats count() by middleware.rsp"}
{"input": "", "instruction": "我想问的是，有哪些用户在同一时间点使用了多次权限修改的行为吗？请列出所有账户及其发生次数。", "output": "appname:h_1  h_1.action:permission_change| stats count() as cnt by h_1.user_name| where cnt > 10|rename h_1.user_name as \"账户\",cnt as \"次数\""}
{"input": "", "instruction": "我想问的是，在有多少个不同的域名出现了超过十次的异常结果？", "output": "appname:h_1 h_1.result:failure |stats count() as cnt by  h_1.domain | where cnt > 10| rename h_1.domain as \"租户账户\",cnt as \"次数\""}
{"input": "索引可用字段有：dbaudit.alert_type, dbaudit.app_name, dbaudit.dataSubType, dbaudit.databaseName, dbaudit.dst_ip, dbaudit.dst_port, dbaudit.level, dbaudit.payload, dbaudit.rule, dbaudit.ruleName, dbaudit.rule_name, dbaudit.src_ip, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问有关 AppName 为 \"dbaudit\"、标签为 \"dbappsecurity\" 的审计规则的数量以及名称的长度是否大于 1 个的信息。", "output": "(appname:dbaudit AND tag:dbappsecurity) | stats count() as cnt by dbaudit.rule_name|where len(dbaudit.rule_name)>1|limit 10"}
{"input": "", "instruction": "我想要知道有哪些端口号和IP地址组合最常见的应用协议。请列出前十个结果并按访问次数递减的顺序排列。", "output": "appname:tda|eval src_port=if(empty(tda.src_port),0,tda.src_port)|eval src_ip=if(empty(tda.src_ip ),0,tda.src_ip)|eval dst_ip=if(empty(tda.dst_ip),0,tda.dst_ip)|eval dst_port=if(empty(tda.dst_port),0,tda.dst_port)|eval proto=if(empty(tda.app),0,tda.app)|eval type=if(empty(tda.type),0,tda.type)|where src_ip!= 0|eval aaa=src_ip+\"_\"+src_port+\"_\"+proto|eval bbb=dst_ip+\"_\"+dst_port+\"_\"+type| stats count()  as count_1 by aaa,bbb|sort by count_1|limit 10|rename aaa as from|rename bbb as to"}
{"input": "索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问的是，在深信服防火墙日志里有多少条记录的目的地城市、源IP地址和源端口相同呢？你能帮我把这些数据列出吗？", "output": "appname:firewall tag:sangfor firewall.action:拒绝|where!empty(firewall.dst.geo.city)|where!empty(firewall.src_ip)|where!empty(firewall.src_port)|eval aaa=firewall.dst.geo.city+\"_\"+firewall.src_ip+\"_\"+firewall.src_port|stats count() as count_ by aaa|sort by count_|limit 10"}
{"input": "索引可用字段有：firewall.action, firewall.alarm_ip, firewall.app, firewall.app_name, firewall.app_type, firewall.appcat, firewall.application_type, firewall.apprisk, firewall.attack, firewall.attack_message, firewall.attack_name, firewall.brief, firewall.dip, firewall.dst.geo.city, firewall.dst.geo.country, firewall.dst.geo.ip, firewall.dst.geo.province, firewall.dst.geo.latitude, firewall.dst.geo.longitude, firewall.dst_ip, firewall.dst_port, firewall.dst_zone, firewall.dup_add, firewall.event_level, firewall.event_name, firewall.event_type, firewall.facility, firewall.flow.application, firewall.flow.dst_ip.geo.city, firewall.flow.policy, firewall.flow.proto, firewall.fw_ip, firewall.grade, firewall.host, firewall.ingress_if, firewall.interface, firewall.kv.proto, firewall.kv.rule, firewall.level, firewall.locip, firewall.log_level, firewall.message, firewall.mod, firewall.module, firewall.msg, firewall.msg.CloseReason, firewall.msg.PolicyName, firewall.msg.RcvBytes, firewall.msg.SendBytes, firewall.msg.action, firewall.msg.command, firewall.msg.description, firewall.msg.dst_addr.geo.city, firewall.msg.dst_addr.geo.latitude, firewall.msg.dst_addr.geo.longitude, firewall.msg.dst_port, firewall.msg.fw, firewall.msg.method, firewall.msg.msg, firewall.msg.op, firewall.msg.pri, firewall.msg.proto, firewall.msg.reason, firewall.msg.result, firewall.msg.rule, firewall.msg.src_addr.geo.city, firewall.msg.src_addr.geo.country, firewall.msg.src_addr.geo.latitude, firewall.msg.src_addr.geo.longitude, firewall.msg.user, firewall.op, firewall.policy, firewall.policy_id, firewall.pri, firewall.pri_cn, firewall.proto, firewall.rcvd_pkt, firewall.reason, firewall.receive_byte, firewall.recorder, firewall.rem_ip.geo.city, firewall.rem_ip.geo.country, firewall.rem_ip.geo.province, firewall.remip, firewall.result, firewall.rule, firewall.rule_name, firewall.send_byte, firewall.sent, firewall.service, firewall.session_type, firewall.severity, firewall.severity_level, firewall.sip, firewall.source, firewall.src.geo.city, firewall.src.geo.country, firewall.src.geo.ip, firewall.src.geo.province, firewall.src.geo.latitude, firewall.src.geo.longitude, firewall.src_ip, firewall.src_port, firewall.src_zone, firewall.status, firewall.subtype, firewall.sys_info_id, firewall.sys_notify_traffic, firewall.threat_name, firewall.threat_subtype, firewall.threat_type, firewall.time, firewall.transport, firewall.type, firewall.url, firewall.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想问有关深信服防火墙产品的访问记录数据，其中包含以下字段：源 IP、目的 IP、目的端口、应用名称等信息。您是否需要帮助分析该数据集中的异常或安全事件？", "output": "appname:firewall tag:sangfor firewall.action:拒绝|where!empty(firewall.dst_ip)|where!empty(firewall.dst_port)|where!empty(firewall.app_name)|eval bbb=firewall.dst_ip+\"_\"+firewall.dst_port+\"_\"+firewall.app_name|stats count() as count_ by bbb|sort by count_|limit 10"}
{"input": "索引可用字段有：mysql.level, mysql.os_type, mysql.query_time, mysql.rows_examined, mysql.sql, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": " MySQL 服务器执行超过六十秒的慢查询、这些慢查询对应的 IP 地址、操作系统类型、查询时间、扫描行数以及 SQL 查询文本等信息。", "output": "starttime=\"-1M/M\" endtime=\"now/M\" appname:mysql tag:mysql_slow mysql.os_type:官网核心MySQL数据库-主库 |eval mysql.query_time=todouble(mysql.query_time) |where mysql.query_time>60 |eval time=formatdate(timestamp,\"yyyy-MM-dd HH:mm:ss\") |table time,ip,mysql.os_type,mysql.query_time,mysql.rows_examined,mysql.sql |sort by mysql.query_time "}
{"input": "索引可用字段有：linux.cmd, linux.command, linux.event_detail.comm, linux.event_detail.exe, linux.event_detail.key, linux.event_detail.pid, linux.event_detail.ppid, linux.event_id, linux.event_msg.terminal, linux.event_name, linux.event_type, linux.log_type, linux.login_time, linux.msg, linux.pid, linux.result, linux.service_name, linux.src_ip, linux.status, linux.terminal, linux.type, linux.use_time, linux.user, appname, tag, logtype, ip, hostname, timestamp, source。请仅使用所需要的字段。", "instruction": "我想要知道昨天的服务器访问情况，排除两个特定的 IP（10.234.5.79和10.234.5.80）。我想知道哪些账户在这两天都进行了多少次登录，以及他们分别使用了什么方法登录，登录时间和来源目标地址等。", "output": "starttime=\"now/d-1d\" endtime=\"now/d\" appname:linux tag:secure event_name:登录成功事件 |eval time=formatdate(timestamp,\"HH:mm:ss\") |stats count() as cnt by time,src_ip,ip,type,user |where src_ip!= \"10.234.5.79\" && linux.src_ip!= \"10.234.5.80\" |rename time as \"登录时间\",src_ip as \"来源IP\",ip as \"目标主机\",type as \"登陆方式\",user as \"登录用户\",cnt as \"登录次数\""}
