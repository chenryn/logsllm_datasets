{"input": "", "instruction": "根据数据标签找到对应的所有索引", "output": "_index:* tag:'authentication,alert,certificate,change,database,dlp,email,ids,attack,inventory,malware,attack,operations,network,resolution,dns,session,communicate,performance,report,vulnerabilities,update,status,web' | stats values(index) as index by tag"}
{"input": "", "instruction": "按dest字段分组，获取组内最早和最晚的时间点", "output": "* | stats earliest(timestamp) as firstTime, latest(timestamp) as lastTime by dest "}
{"input": "命令总和", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "tag:rds_info | stats max(redis.total_commands_processed) as total_cmd"}
{"input": "Keys监控", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "tag:rds_cmd (rds_cmd.cmd:\"del\" OR rds_cmd.cmd:\"exists\") | stats max(rds_cmd.summ.calls) as calls by rds_cmd.cmd"}
{"input": "Hashes监控", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "tag:rds_cmd (rds_cmd.cmd:\"hget\" OR rds_cmd.cmd:\"hdel\") | stats max(rds_cmd.summ.calls) as calls by rds_cmd.cmd"}
{"input": "Lists监控", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "tag:rds_cmd (rds_cmd.cmd:\"rpop\" OR rds_cmd.cmd:\"lpop\") | stats max(rds_cmd.summ.calls) as calls by rds_cmd.cmd"}
{"input": "Sets监控组", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "tag:rds_cmd (rds_cmd.cmd:\"sadd\" OR rds_cmd.cmd:\"scard\") | stats max(rds_cmd.summ.calls) as calls by rds_cmd.cmd"}
{"input": "Zset监控", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "tag:rds_cmd rds_cmd.cmd:\"zset\"  | stats max(rds_cmd.summ.calls) as calls by rds_cmd.cmd"}
{"input": "HyperLog监控", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "tag:rds_cmd (rds_cmd.cmd:\"pfadd\" OR rds_cmd.cmd:\"pfcount\") | stats max(rds_cmd.summ.calls) as calls by rds_cmd.cmd"}
{"input": "Transaction监控", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "tag:rds_cmd (rds_cmd.cmd:\"watch\" OR rds_cmd.cmd:\"multi\" OR rds_cmd.cmd:\"exec\") | stats max(rds_cmd.summ.calls) as calls by rds_cmd.cmd"}
{"input": "Pub_Sub监控", "instruction": "Redis数据，编写查询语句实现如下分析场景", "output": "tag:rds_cmd (rds_cmd.cmd:\"publish\" OR rds_cmd.cmd:\"subscribe\") | stats max(rds_cmd.summ.calls) as calls by rds_cmd.cmd"}
{"input": "索引中可用字段包括：apache.domain,apache.req,apache.x,apache.user,apache.request,apache.ua,apache.status,apache.resp,apache.clientip,apache.referer,apache.geo,apache.method。请只使用实际需要的字段", "instruction": "查询包含 GET 或 POST 方法，且状态码为 200 的日志记录，并计算平均响应时间", "output": "(GET OR POST) apache.status:200 | stats avg(apache.resp_time)"}
{"input": "", "instruction": "查询包含 GET 或 POST 方法，且响应时间大于 5 秒的日志记录，并计算平均响应时间", "output": "(GET OR POST) apache.resp_time:>5 | stats avg(apache.resp_time)"}
{"input": "", "instruction": "查询包含 GET 或 POST 方法，且响应时间大于 5 秒的日志记录，并计算最大和最小响应时间", "output": "(GET OR POST) apache.resp_time:>5 | stats max(apache.resp_time) as max_time, min(apache.resp_time) as min_time"}
{"input": "来帐最大耗时指标(1小时)mfe", "instruction": "查询农信银支付前置(mfe)系统数据，进行如下统计", "output": "_index:schedule  schedule_name:农信银支付前置来账耗时 | stats max(cost) as _max"}
{"input": "从定时任务索引中统计往账最大耗时指标", "instruction": "查询农信银支付前置(mfe)系统数据，进行如下统计", "output": "_index:schedule  schedule_name:农信银支付前置往账耗时 | stats max(cost) as _max"}
{"input": "", "instruction": "如何统计独立数，使用dc统计不准", "output": "使用 distinct 函数做精准统计。比如： * | stats distinct(uid)"}
{"input": "", "instruction": "寻找包含 `pfadd` 或 `pfcount` 的所有命令行以及它们的调用总数，并按命令分组以获取最大值。", "output": "tag:rds_cmd (rds_cmd.cmd:\"pfadd\" OR rds_cmd.cmd:\"pfcount\") | stats max(rds_cmd.summ.calls) as calls by rds_cmd.cmd"}
{"input": "", "instruction": "我想跟踪RDS云数据库的性能问题，这几个命令里对应的最大的数据库调用次数：`watch`，`multi`和`exec`。", "output": "tag:rds_cmd (rds_cmd.cmd:\"watch\" OR rds_cmd.cmd:\"multi\" OR rds_cmd.cmd:\"exec\") | stats max(rds_cmd.summ.calls) as calls by rds_cmd.cmd"}
{"input": "", "instruction": "我想过滤 Apache web 服务器的响应时间高于 5 秒的访问，并统计出最大值和最小值。", "output": "(GET OR POST) apache.resp_time:>5 | stats max(apache.resp_time) as max_time, min(apache.resp_time) as min_time"}
{"input": "", "instruction": "查询 syslog 日志中包含 error 或 fatal 关键字的记录，并计算平均响应时间", "output": "appname:syslog (error OR fatal) | stats avg(syslog.resp_time)"}
{"input": "", "instruction": "计算web页面平均响应时间和访问量", "output": "appname:apache | stats avg(apache.resp_time), count(apache.status) as pageviews by apache.request_path"}
{"input": "", "instruction": "在经纬度地图上统计和标记访问数量和 isp 来源", "output": "appname:apache | geostats latfield=apache.geo.latitude longfield=apache.geo.longitude count() by apache.geo.isp"}
{"input": "", "instruction": "获取每个域名下平均的请求响应时间", "output": "appname:apache | stats avg(apache.resp_time) as avg_resp_time by apache.domain "}
{"input": "", "instruction": "站点列表页平均停留时间", "output": "appname:apache apache.request_path:*list* | stats avg(duration) as avg_duration by apache.domain"}
{"input": "", "instruction": "获取搜索引擎为「百度、谷歌、必应」的流量", "output": "appname:apache apache.referer:/baidu|google|bing/ | stats sum(apache.resp_len)"}
{"input": "", "instruction": "获取apache响应时间的50，90，95，99分位数", "output": "appname:apache | stats pct(apache.resp_time, 50, 90, 95, 99)"}
{"input": "防火墙全球事件等级分布。", "instruction": "cisco_asa防火墙数据，编写查询语句实现如下分析场景", "output": "appname:firewall tag:cisco_asa firewall.src.geo.country:* | geostats latfield=firewall.src.geo.latitude longfield=firewall.src.geo.longitude count() as cnt by firewall.severity_level"}
{"input": "应用协议占比。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:kpi_list_all utc|stats sum(lingcloud.totalbytes) as cnt by lingcloud.rulename"}
{"input": "单位时段并发连接数。", "instruction": "lingcloud流量数据，编写查询语句实现如下分析场景", "output": "appname:lingcloud AND tag:inst_kpi_all | stats sum(lingcloud.data.conCurConnNum) as cnt"}
{"input": "运营商访问流量。", "instruction": "Apache日志数据，编写查询语句实现如下分析场景", "output": "appname:apache tag:access NOT middleware.geo.isp:\"*\" |stats sum(middleware.resp_len) as len by middleware.geo.isp"}
{"input": "不同动作日志占比。", "instruction": "CitrixNetscaler日志数据，编写查询语句实现如下分析场景", "output": "(* AND appname:citrix) AND 'tag':netscaler | stats  count() by netscaler.action\t\n\n"}
{"input": "数据库当前进程的连接数。", "instruction": "Database_Oracle数据，编写查询语句实现如下分析场景", "output": "appname:oracle tag:process_count | stats first(oracle.COUNT_PROCESS) as '进程数'"}
{"input": "数据库当前会话的连接数。", "instruction": "Database_Oracle数据，编写查询语句实现如下分析场景", "output": "appname:oracle tag:session_count | stats first(oracle.COUNT_SESSION) as '会话数'"}
{"input": "session_active。", "instruction": "Database_Oracle数据，编写查询语句实现如下分析场景", "output": "appname:oracle tag:session_active  | stats first('oracle.COUNT(*)') as session_active"}
{"input": "银证转账-银转证金额。", "instruction": "通达信数据，编写查询语句实现如下分析场景", "output": "appname:tdx TDX.TDX_ID_ZZJE:* TDX.TDX_ID_ZZFX:0| stats sum(TDX.TDX_ID_ZZJE)"}
{"input": "冲正交易量，交易代码 BUP03056。", "instruction": "查询农信银支付清算系统(mps)数据，进行如下统计", "output": "appname:mps tranCode:BUP03056 | stats distinct(seqNo) as _dc"}
{"input": "", "instruction": "我想问的是，有多少次访问了以“/list”结尾的路径的Apache服务？并且计算每个域名下的平均响应时间。", "output": "appname:apache apache.request_path:*list* | stats avg(duration) as avg_duration by apache.domain"}
{"input": "", "instruction": "我想问的是最近有没有发现系统异常或者严重错误的信息吗？如果有的话，这些信息的平均响应时间是多少呢？", "output": "appname:syslog (error OR fatal) | stats avg(syslog.resp_time)"}
{"input": "", "instruction": "我想要知道网站 apache 的响应时间的中位数即第 50%ile、第 90%ile 和第 95%ile 和第 99%ile 是多少", "output": "appname:apache | stats pct(apache.resp_time, 50, 90, 95, 99)"}
{"input": "", "instruction": "我想问 Nginx 应用的平均请求时间以及每个 URL 的平均请求时间，并且只显示大于等于 3 毫秒的时间。", "output": "appname:nginx AND nginx.request_time:>3 | stats avg(nginx.request_time) by nginx.request_path "}
{"input": "", "instruction": "nginx 请求事件大于 3 秒的，按请求分组统计平均耗时", "output": "appname:nginx AND nginx.request_time:>3 | stats avg(nginx.request_time) by nginx.request_path"}
{"input": "", "instruction": "Cisco ASA防火墙应用的访问量，按严重级别进行汇总并绘制成经纬度统计地图。", "output": "appname:firewall tag:cisco_asa firewall.src.geo.country:* | geostats latfield=firewall.src.geo.latitude longfield=firewall.src.geo.longitude count() as cnt by firewall.severity_level"}
{"input": "", "instruction": "我想要知道 Apache 服务的每个运营商的流量情况，先排除掉没有运营商解析结果的数据。", "output": "appname:apache tag:access NOT apache.geo.isp:\"*\" |stats sum(apache.resp_len) as len by apache.geo.isp"}
{"input": "", "instruction": "oracle的进程数量有多大？从 oracle 数据中过滤标记为 process_count的内容，然后获取第一个COUNT_PROCESS 指标值，并重命名为进程数", "output": "appname:oracle tag:process_count | stats first(oracle.COUNT_PROCESS) as '进程数'"}
{"input": "", "instruction": "有多少 oracle 会话正在使用中？从 oracle 监控数据中获取标记为 session_active 的指标，提取第一条 COUNT(*) 指标并命名为 session_active 字段。", "output": "appname:oracle tag:session_active  | stats first('oracle.COUNT(*)') as session_active"}
{"input": "", "instruction": "我想要知道有多少个 IP 地址访问了带有 \"chatin\" 标签的 WAF 服务。", "output": "(appname:waf AND tag:chatin) waf.action:* |stats dc(waf.src_ip)"}
{"input": "was_gc平均耗时ms。", "instruction": "ibmjdk7_was_gc数据，编写查询语句实现如下分析场景", "output": "appname:gc tag:ibm_was  |stats avg(jvm_gc.cost)"}
{"input": "独立访客数UV。", "instruction": "瑞数waf数据，编写查询语句实现如下分析场景", "output": "appname:waf tag:river |stats dc(waf.src_ip) as count_"}
{"input": "", "instruction": "我想问的是，从哪些 IP 源访问过 river waf？你能帮我把这些 IP 源统计一下去重数吗？", "output": "appname:waf tag:river |stats dc(waf.src_ip) as count_"}
{"input": "192.168.1.253主机性能一览图", "instruction": "Linux主机运维监控指标数据，编写查询语句实现如下分析场景", "output": "appname:top_info_system_stats  AND 192.168.1.253 |stats sparkline(avg(json.cpu.idle_percent), 15m) as cpu,sparkline(avg(json.Mem.used_percent), 15m) as mem,sparkline(avg(json.Load.load1), 15m) as load1,sparkline(avg(json.Load.load5), 15m) as load5,sparkline(avg(json.Load.load15), 15m) as load15 by ip"}
{"input": "192.168.1.253主机性能一览图，采用 sparkline 表格效果，sparkline 每 15 分钟绘制一个点", "instruction": "Windows主机运维监控指标数据，编写查询语句实现如下分析场景", "output": "appname:top_info_win_system_stats AND 192.168.1.253|stats sparkline(avg(json.cpu.idle_percent), 15m) as cpu,sparkline(avg(json.Mem.used_percent), 15m) as mem,sparkline(avg('json.nets.本地连接.bytes_recv'),15m) as bytes_recv,sparkline(avg('json.nets.本地连接.bytes_sent'),15m) as bytes_sent by ip"}
{"input": "", "instruction": "我想问关于服务器192.168.1.253的运行状况的信息，具体来说就是 CPU、内存、系统负载等信息，以及每15分钟的 CPU 使用率和内存使用量的迷你趋势图>。", "output": "appname:top_info_system_stats  AND 192.168.1.253 |stats sparkline(avg(json.cpu.idle_percent), 15m) as cpu,sparkline(avg(json.Mem.used_percent), 15m) as mem,sparkline(avg(json.Load.load1), 15m) as load1,sparkline(avg(json.Load.load5), 15m) as load5,sparkline(avg(json.Load.load15), 15m) as load15 by ip"}
{"input": "", "instruction": "IIS 服务器的平均耗时最高top10", "output": "appname:rzytv tag:iis (NOT rzytv.cs_uri_stem:*Date*) | stats avg(rzytv.time_cost) as c1 by rzytv.cs_uri_stem|sort by c1| limit 10"}
{"input": "tomcat_stdout_独立访客数UV。", "instruction": "tomcat_stdout_数据，编写查询语句实现如下分析场景", "output": "appname:tomcat tag:stdout |stats dc(middleware.src_ip) "}
{"input": "世界攻击地图。", "instruction": "ips_fortinet_数据，编写查询语句实现如下分析场景", "output": "绘制攻击地图需要提供攻击行为的来源地址经纬度和目标地址经纬度，因此生成查询语句如下：\nappname:ips tag:fortinet | stats count() by ips.src.geo.city,ips.src.geo.latitude, ips.src.geo.longitude, ips.dst.geo.city,ips.dst.geo.latitude,ips.dst.geo.longitude"}
